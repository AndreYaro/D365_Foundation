<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdLicensePlateLabelBuild</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdLicensePlateLabelBuild</c> class is used to create the license plate label without WhsWorkTable and printing it.
/// </summary>
public final class ProdLicensePlateLabelBuild
{
    protected WHSLicensePlateLabel   label;

    private WHSWorkTransType       workTransType;
    private ProdParmReportFinished prodParmReportFinished;
    private JmgJobId               jobId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProdParmReportFinished _prodParmReportFinished, WHSWorkTransType _workTransType)
    {
        if (!_prodParmReportFinished)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        workTransType = _workTransType;
        prodParmReportFinished = _prodParmReportFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJmgJobId</Name>
				<Source><![CDATA[
    internal JmgJobId parmJmgJobId(JmgJobId _jobId = jobId)
    {
        jobId = _jobId;
        return jobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLicensePlateLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds license plate labels.
    /// </summary>
    /// <param name = "_inventDimId">The reported <c>InventDimId</c>.</param>
    /// <param name = "_reportedQty">The reported quantity for this <c>InventDimId</c>.</param>
    /// <returns>
    /// The created license plate label Id.
    /// </returns>
    internal WHSLabelId buildLicensePlateLabel(InventDimId _inventDimId = null, InventQty _reportedQty = prodParmReportFinished.QtyGood)
    {
        this.initLabel(_inventDimId, _reportedQty);

        label.insert();

        return label.LabelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLicensePlateLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints license plate label using document routing.
    /// </summary>
    internal void printLicensePlateLabel(WHSLabelId _labelId)
    {
        WHSDocumentRouting documentRouting = WHSDocumentRouting::construct();
        WHSLicensePlateLabel labelForPrint = WHSLicensePlateLabel::find(_labelId, true);

        labelForPrint.PrintedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (this.canUpdateLicensePlateLabel(labelForPrint))
        {
            labelForPrint.update();
        }

        documentRouting.printDocument(labelForPrint.WorkTransType, labelForPrint);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateLicensePlateLabel</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean canUpdateLicensePlateLabel(WHSLicensePlateLabel _licensePlateLabel)
    {
        return true; // Used as an extension point.
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the label.
    /// </summary>
    /// <param name = "_inventDimId">The reported <c>InventDimId</c>.</param>
    /// <param name = "_reportedQty">The reported quantity for this <c>InventDimId</c>.</param>
    private void initLabel(InventDimId _inventDimId, InventQty _reportedQty)
    {
        if ((prodParmReportFinished.PmfProductType == PmfProductType::Co_Product || 
            prodParmReportFinished.PmfProductType == PmfProductType::By_Product) && JmgPrintLicensePlateLabelCoByProductFlight::instance().isEnabled())
        {
            this.initLabelFromCoByProduct(prodParmReportFinished.InventTransId);
        }
        else 
        {
            this.initLabelFromProdTable(prodParmReportFinished.InventTransId);
        }

        InventDim inventDim = this.initLabelFromInventDim(_inventDimId ? _inventDimId : prodParmReportFinished.InventDimId);
        this.initLabelInventQtyUnitId(_reportedQty);
        this.initLabelWrkCtrId();
        this.setAddressFrom(inventDim.wmsLocationId);
        
        label.setLabelId();
        label.WorkTransType    = workTransType;
        label.ItemName         = InventTable::find(label.ItemId).defaultProductName();
        label.Weight           = InventTable::find(label.ItemId).grossWeight() * label.InventQty; 
        label.UCCCompanyPrefix = WHSParameters::find().UCCCompanyPrefix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLabelInventQtyUnitId</Name>
				<Source><![CDATA[
    private void initLabelInventQtyUnitId(InventQty _reportedQty)
    {
        label.Qty                 = _reportedQty;
        label.InventUnitId        =  WHSCatchWeightHelper::inventHandlingUnitId(label.ItemId);
        label.UnitID              = label.InventUnitId;
        label.InventQty           = label.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLabelFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the label fields from the <c>InventTransId</c> value.
    /// </summary>
    /// <param name = "_inventTransId">
    /// The current <c>InventTransId</c>. 
    /// </param>
    public void initLabelFromProdTable(InventTransId _inventTransId)
    {
        ProdTable  prodTable = ProdTable::findTransId(_inventTransId);
        label.ItemId              = prodTable.ItemId;
        label.OrderNum            = prodTable.ProdId;
        [label.OrderedQty, label.RemainingQty] = this.findOrderedAndRemainQty(prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLabelFromCoByProduct</Name>
				<Source><![CDATA[
    private void initLabelFromCoByProduct(InventTransId _inventTransId)
    {
        PmfProdCoBy  prodCoBy = PmfProdCoBy::findTransId(_inventTransId);
        label.ItemId              = prodCoBy.ItemId;
        label.OrderNum            = prodCoBy.ProdId;
        [label.OrderedQty, label.RemainingQty] = this.findOrderedAndRemainQtyCoByProduct(prodCoBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLabelFromInventDim</Name>
				<Source><![CDATA[
    private InventDim initLabelFromInventDim(InventDimId _inventDimId)
    {
        InventDim inventDim = InventDim::find(_inventDimId);

        InventDimParm inventDimParm;
        inventDimParm.setAllProductDimensions();
        inventDimParm.setAllTrackingDimensions();
        inventDimParm.setAllStorageDimensions();
        label.initLabelFromInventDimParm(inventDim, inventDimParm);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLabelWrkCtrId</Name>
				<Source><![CDATA[
    private void initLabelWrkCtrId()
    {
        if (this.parmJmgJobId())
        {
            JmgJobTable jobTable       = JmgJobTable::find(jobId);
            label.WrkCtrId             = jobTable.WrkCtrId;
            label.WorkCenterLocationId = WrkCtrTable::find(jobTable.WrkCtrId).inputWMSLocation(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).wmsLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFrom</Name>
				<Source><![CDATA[
    private void setAddressFrom(WmsLocationId _wmsLocationId)
    {
        label.FromName              = InventLocation::find(label.InventLocationId).Name;
        label.wmsLocationIdFrom     = _wmsLocationId;
        label.ZoneIdFrom            = WMSLocation::find(label.wmsLocationIdFrom, label.InventLocationId).ZoneId;
        label.initFromAddressFromInventSite(label.InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderedAndRemainQty</Name>
				<Source><![CDATA[
    private container findOrderedAndRemainQty(ProdTable _prodTable)
    {
        if (_prodTable.RecId && PdsGlobal::pdsIsCWItem(_prodTable.ItemId))
        {
            return [_prodTable.PdsCWBatchSched, _prodTable.PdsCWRemainInventPhysical];
        }

        return [_prodTable.QtySched, _prodTable.RemainInventPhysical];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderedAndRemainQtyCoByProduct</Name>
				<Source><![CDATA[
    private container findOrderedAndRemainQtyCoByProduct(PmfProdCoBy _prodCoBy)
    {
        if (_prodCoBy.RecId && PdsGlobal::pdsIsCWItem(_prodCoBy.ItemId))
        {
            return [_prodCoBy.PdsCWQty, _prodCoBy.PdsCWRemainPhysical];
        }

        return [_prodCoBy.CoByQty, _prodCoBy.RemainCoByPhysical];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>