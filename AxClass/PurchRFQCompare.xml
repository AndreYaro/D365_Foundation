<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCompare</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQCompare
{
    List                            replyTableList;
    List                            replyLineList;

    PurchRFQCaseId                  caseId;
    LeadTime                        leadTime;
    PurchRFQDeliveryDateDeviation   deliveryDateDeviation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildReplyLineList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates RFQ Reply lines for the current <c>PurchRFQTable</c> record and the case ID.
    /// </summary>
    /// <param name="_rfqReplyTable">
    ///    The <c>PurchRFQReplyTable</c> table records for specific <c>VendAccount</c> table record
    /// </param>
    /// <param name="_purchRFQTable">
    ///    The <c>PurchRFQTable</c> table records for specific <c>VendAccount</c> table record
    /// </param>
    protected void buildReplyLineList(PurchRFQReplyTable _rfqReplyTable, PurchRFQTable _purchRFQTable)
    {
        PurchRFQReplyLine           rfqReplyLine;
        PurchRFQLine                rfqLine;
        PurchRFQTmpCompareRFQReply  purchRFQTmpCompareRFQReply;
        leadTime                    = 0;
        deliveryDateDeviation       = 0;

        while select LeadTime, DeliveryDate, rfqLineRecId, rfqId, LineAmount, LineNum, PurchPrice, PurchQty, PurchUnit, PdsCWQty, PurchMarkup, RFQMark, Comment
                from rfqReplyLine
                where rfqReplyLine.rfqId == _rfqReplyTable.rfqId
                    join InventDimId, CategoryId, ItemId, RFQCaseLineLineNumber, Status , IsAlternate, ItemName
                       from rfqLine
                       where rfqLine.RecId == rfqReplyLine.rfqLineRecId
        {
            leadTime              += rfqReplyLine.LeadTime;
            deliveryDateDeviation += rfqReplyLine.deliveryDateDeviation();

            purchRFQTmpCompareRFQReply = this.initializeReplyLine(_rfqReplyTable, _purchRFQTable, rfqReplyLine, rfqLine);

            replyLineList.addEnd(purchRFQTmpCompareRFQReply);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReplyLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes <c>PurchRFQTmpCompareRFQReply</c> record for the current <c>PurchRFQReplyLine</c> record.
    /// </summary>
    /// <param name="_rfqReplyTable">The <c>PurchRFQReplyTable</c> table records for specific <c>VendAccount</c> table record.</param>
    /// <param name="_purchRFQTable">The <c>PurchRFQTable</c> table records for specific <c>VendAccount</c> table record.</param>
    /// <param name = "_rfqReplyLine">The <c>PurchRFQReplyLine</c> record used to initialize RFQ compare reply line.</param>
    /// <param name = "_rfqLine">The <c>PurchRFQLine</c> record used to initialize RFQ compare reply line.</param>
    /// <returns>The initialized <c>PurchRFQTmpCompareRFQReply</c> record.</returns>
    protected PurchRFQTmpCompareRFQReply initializeReplyLine(
        PurchRFQReplyTable  _rfqReplyTable, 
        PurchRFQTable       _purchRFQTable,
        PurchRFQReplyLine   _rfqReplyLine,
        PurchRFQLine        _rfqLine)
    {
        PurchRFQTmpCompareRFQReply  purchRFQTmpCompareRFQReply;
            
        purchRFQTmpCompareRFQReply.LineType                 = PurchRFQCompareLineType::Line;
        purchRFQTmpCompareRFQReply.rfqId                    = _rfqReplyLine.rfqId;
        purchRFQTmpCompareRFQReply.RFQMark                  = _rfqReplyLine.RFQMark;
        purchRFQTmpCompareRFQReply.PurchRFQLine             = _rfqReplyLine.rfqLineRecId;
        purchRFQTmpCompareRFQReply.RFQCaseLineLineNumber    = _rfqLine.RFQCaseLineLineNumber;
        purchRFQTmpCompareRFQReply.IsAlternate              = _rfqLine.IsAlternate;
        purchRFQTmpCompareRFQReply.Status                   = _rfqLine.Status;
        purchRFQTmpCompareRFQReply.CurrencyCode             = _rfqReplyTable.CurrencyCode;
        purchRFQTmpCompareRFQReply.NetAmount                = _rfqReplyLine.LineAmount;
        purchRFQTmpCompareRFQReply.DeliveryDeviation        = _rfqReplyLine.DeliveryDateDeviation();
        purchRFQTmpCompareRFQReply.LeadTime                 = this.convertLeadTime(_rfqReplyLine.LeadTime,PurchRFQCompareLineType::Line);
        purchRFQTmpCompareRFQReply.PurchQty                 = _rfqReplyLine.PurchQty;
        purchRFQTmpCompareRFQReply.PurchUnit                = _rfqReplyLine.PurchUnit;
        purchRFQTmpCompareRFQReply.PdsCWQty                 = _rfqReplyLine.PdsCWQty;
        purchRFQTmpCompareRFQReply.InventDimId              = _rfqLine.InventDimId;
        purchRFQTmpCompareRFQReply.VendAccount              = _purchRFQTable.VendAccount;
        purchRFQTmpCompareRFQReply.PurchPrice               = this.convertPurchPrice(_rfqReplyLine.PurchPrice,PurchRFQCompareLineType::Line);
        purchRFQTmpCompareRFQReply.CategoryId               = _rfqLine.CategoryId;
        purchRFQTmpCompareRFQReply.ItemId                   = _rfqLine.ItemId;
        purchRFQTmpCompareRFQReply.PurchPriceMST            = this.convertPurchPriceMST(ExchangeRateHelper::mstPrice(_rfqReplyLine.PurchPrice, _rfqReplyTable.CurrencyCode),PurchRFQCompareLineType::Line);
        purchRFQTmpCompareRFQReply.NetAmountMST             = CurrencyExchangeHelper::mstAmount(_rfqReplyLine.calcNetLineAmount(), _rfqReplyTable.CurrencyCode);
        purchRFQTmpCompareRFQReply.PurchRFQNetPriceQtyMST   = CurrencyExchangeHelper::mstAmount(_rfqReplyLine.displayNetPriceQty(), _rfqReplyTable.CurrencyCode);
        purchRFQTmpCompareRFQReply.MarkupAmountMST          = ExchangeRateHelper::mstPrice(_rfqReplyLine.PurchMarkup, _rfqReplyTable.CurrencyCode);
        purchRFQTmpCompareRFQReply.Comment                  = _rfqReplyLine.Comment;
        purchRFQTmpCompareRFQReply.ItemName                 = _rfqLine.ItemName;
        purchRFQTmpCompareRFQReply.StatusHigh               = _purchRFQTable.StatusHigh;
        purchRFQTmpCompareRFQReply.StatusLow                = _purchRFQTable.StatusLow;
        purchRFQTmpCompareRFQReply.PurchId                  = _purchRFQTable.PurchId;
            
        return purchRFQTmpCompareRFQReply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReplyLists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates RFQ Replies for the current <c>PurchRFQTable</c> and the specified case ID.
    /// </summary>
    public void buildReplyLists()
    {
        PurchRFQTable               rfqTable;
        PurchRFQTotals_ReplyTrans   purchRFQTotals;
        PurchRFQReplyTable          rfqReplyTable;
        PurchRFQTmpCompareRFQReply  purchRFQTmpCompareRFQReply;

        while select RFQId, CurrencyCode, VendAccount, StatusHigh, StatusLow, PurchId
            from rfqTable where rfqTable.rfqCaseId == caseId
                join CurrencyCode, rfqId , Rank, TotalScore, RFQMark, DiscPercent
                    from rfqReplyTable where rfqReplyTable.rfqId == rfqTable.rfqId

        {
            if (!rfqReplyTable.CurrencyCode)
            {
                rfqReplyTable.CurrencyCode = rfqTable.CurrencyCode;
            }

            purchRFQTotals = PurchRFQTotals::construct(rfqReplyTable);
            purchRFQTotals.calc();

            this.buildReplyLineList(rfqReplyTable, rfqTable);

            purchRFQTmpCompareRFQReply.LineType             = PurchRFQCompareLineType::Header;
            purchRFQTmpCompareRFQReply.PurchRFQReplyTable   = rfqReplyTable.RecId;
            purchRFQTmpCompareRFQReply.RFQId                = rfqTable.RFQId;
            purchRFQTmpCompareRFQReply.RFQMark              = rfqReplyTable.RFQMark;
            purchRFQTmpCompareRFQReply.Rank                 = rfqReplyTable.Rank;
            purchRFQTmpCompareRFQReply.TotalScore           = rfqReplyTable.TotalScore;
            purchRFQTmpCompareRFQReply.CurrencyCode         = rfqReplyTable.CurrencyCode;
            purchRFQTmpCompareRFQReply.NetAmount            = purchRFQTotals.totalAmount();
            purchRFQTmpCompareRFQReply.VendAccount          = rfqTable.VendAccount;
            purchRFQTmpCompareRFQReply.GrossAmount          = purchRFQTotals.totalBalance();
            purchRFQTmpCompareRFQReply.LineDiscounts        = purchRFQTotals.totalLineDisc();
            purchRFQTmpCompareRFQReply.MarkupAmount         = purchRFQTotals.totalMarkup();
            purchRFQTmpCompareRFQReply.TotalDiscounts       = purchRFQTotals.totalEndDisc();
            purchRFQTmpCompareRFQReply.DeliveryDeviation    = deliveryDateDeviation;
            purchRFQTmpCompareRFQReply.NetAmountMST         = CurrencyExchangeHelper::mstAmount(purchRFQTmpCompareRFQReply.NetAmount, rfqReplyTable.CurrencyCode);
            purchRFQTmpCompareRFQReply.LineDiscountsMST     = this.convertLineDiscountsMST(CurrencyExchangeHelper::mstAmount(purchRFQTmpCompareRFQReply.LineDiscounts, rfqReplyTable.CurrencyCode),PurchRFQCompareLineType::Header);
            purchRFQTmpCompareRFQReply.MarkupAmountMST      = CurrencyExchangeHelper::mstAmount(purchRFQTmpCompareRFQReply.MarkupAmount, rfqReplyTable.CurrencyCode);
            purchRFQTmpCompareRFQReply.GrossAmountMST       = CurrencyExchangeHelper::mstAmount(purchRFQTmpCompareRFQReply.GrossAmount, rfqReplyTable.CurrencyCode);
            purchRFQTmpCompareRFQReply.TotalDiscountsMST    = this.convertTotalDiscountsMST(CurrencyExchangeHelper::mstAmount(purchRFQTmpCompareRFQReply.TotalDiscounts, rfqReplyTable.CurrencyCode),PurchRFQCompareLineType::Header);
            purchRFQTmpCompareRFQReply.StatusHigh           = rfqTable.StatusHigh;
            purchRFQTmpCompareRFQReply.StatusLow            = rfqTable.StatusLow;
            purchRFQTmpCompareRFQReply.PurchId              = rfqTable.PurchId;
            replyTableList.addEnd(purchRFQTmpCompareRFQReply);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>LeadTimeDelivery</c> value to string based on the <c>PurchRFQCompareLineType</c> enum value
    /// </summary>
    /// <param name="_leadTime">
    /// The <c>LeadTimeDelivery</c> value
    /// </param>
    /// <param name="_lineType">
    /// The <c>PurchRFQCompareLineType</c> enum value
    /// </param>
    /// <returns>
    ///  For lines the lead time in string, otherwise, an empty string
    /// </returns>
    public PurchRFQNumber2Str convertLeadTime(LeadTimeDelivery _leadTime, PurchRFQCompareLineType _lineType)
    {
        return (_lineType == PurchRFQCompareLineType::Line) ? strFmt("%1",_leadTime) : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertLineDiscountsMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>DiscAmountMST</c> MST) value to string based on the <c>PurchRFQCompareLineType</c> enum value
    /// </summary>
    /// <param name="_lineDiscountsMST">
    /// The <c>DiscAmountMST</c> value
    /// </param>
    /// <param name="_lineType">
    /// The <c>PurchRFQCompareLineType</c> enum value
    /// </param>
    /// <returns>
    ///  For Headers the line discounts (MST) in string, otherwise, an empty string
    /// </returns>
    public PurchRFQNumber2Str convertLineDiscountsMST(DiscAmountMST _lineDiscountsMST, PurchRFQCompareLineType _lineType)
    {
        return (_lineType == PurchRFQCompareLineType::Header) ? this.convertNum2Str(extendedTypeNum(DiscAmountMST),_lineDiscountsMST) : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertNum2Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the real value to a str value
    /// </summary>
    /// <param name="_id">
    /// The ExtendedType Id
    /// </param>
    /// <param name="_value">
    /// The value to convert
    /// </param>
    /// <returns>
    ///  A str value
    /// </returns>
    private str convertNum2Str(ExtendedTypeId _id, real _value)
    {
        SysDictType dt = new SysDictType(_id);

        return num2str(_value,dt.stringLen(), dt.noOfDecimals() == 0 ? 2: dt.noOfDecimals(), dt.decimalSeparator(),dt.thousandSeparator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPurchPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>PurchPrice</c> value to string based on the <c>PurchRFQCompareLineType</c> enum value
    /// </summary>
    /// <param name="_purchPrice">
    /// The <c>PurchPrice</c> value
    /// </param>
    /// <param name="_lineType">
    /// The <c>PurchRFQCompareLineType</c> enum value
    /// </param>
    /// <returns>
    ///  For Line the purch price in string, otherwise, an empty string
    /// </returns>
    public PurchRFQNumber2Str convertPurchPrice(PurchPrice _purchPrice, PurchRFQCompareLineType _lineType)
    {
        return (_lineType == PurchRFQCompareLineType::Line) ? this.convertNum2Str(extendedTypeNum(PurchPrice),_purchPrice) : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPurchPriceMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>PurchPrice</c> (MST) value to string based on the <c>PurchRFQCompareLineType</c> enum value
    /// </summary>
    /// <param name="_purchPriceMST">
    /// The <c>PurchPrice</c> value
    /// </param>
    /// <param name="_lineType">
    /// The <c>PurchRFQCompareLineType</c> enum value
    /// </param>
    /// <returns>
    ///  For Line the purch price( MST) in string, otherwise, an empty string
    /// </returns>
    public PurchRFQNumber2Str convertPurchPriceMST(PurchPrice _purchPriceMST, PurchRFQCompareLineType _lineType)
    {
        return (_lineType == PurchRFQCompareLineType::Line) ? this.convertNum2Str(extendedTypeNum(PurchPrice),_purchPriceMST) : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTotalDiscountsMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>DiscAmountMST</c> (MST) value to string based on the <c>PurchRFQCompareLineType</c> enum value
    /// </summary>
    /// <param name="_totalDiscountsMST">
    /// The <c>DiscAmountMST</c> value
    /// </param>
    /// <param name="_lineType">
    /// The <c>PurchRFQCompareLineType</c> enum value
    /// </param>
    /// <returns>
    ///  For Header the total discount (MST) in string, otherwise, an empty string
    /// </returns>
    public PurchRFQNumber2Str convertTotalDiscountsMST(DiscAmountMST _totalDiscountsMST, PurchRFQCompareLineType _lineType)
    {
        return (_lineType == PurchRFQCompareLineType::Header) ? this.convertNum2Str(extendedTypeNum(DiscAmountMST),_totalDiscountsMST) : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReplyLineList</Name>
				<Source><![CDATA[
    public container getReplyLineList()
    {
        return replyLineList.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReplyTableList</Name>
				<Source><![CDATA[
    public container getReplyTableList()
    {
        return replyTableList.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRFQReplies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PurchRFQReplyTable</c> and <c>PurchRFQReplyLines</c> records for the current RFQ Case
    /// </summary>
    /// <returns>
    /// Returns Container containing [List of RFQReplyTable records, List of the RFQReplyLine records and the accounting currency]
    /// </returns>
    public container getRFQReplies()
    {
        this.buildReplyLists();

        return [this.getReplyTableList(),this.getReplyLineList(),Ledger::accountingCurrency(CompanyInfo::current())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        replyTableList  = new List(Types::Record);
        replyLineList   = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaseId</Name>
				<Source><![CDATA[
    public PurchRFQCaseId parmCaseId(PurchRFQCaseId _caseId = caseId)
    {
        caseId = _caseId;

        return caseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCaseId</Name>
				<Source><![CDATA[
    public static PurchRFQCompare newCaseId(PurchRFQCaseId _caseId)
    {
        PurchRFQCompare     purchRFQCompare = new PurchRFQCompare();

        purchRFQCompare.parmCaseId(_caseId);

        return purchRFQCompare;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>