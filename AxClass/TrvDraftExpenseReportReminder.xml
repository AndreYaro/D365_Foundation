<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvDraftExpenseReportReminder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for running a job showing a dialog that let's users
/// select some values for a query that picks approvers to send a reminder email to.
/// </summary>
 class TrvDraftExpenseReportReminder extends RunBaseBatch implements BatchRetryable
{
    FreeTxt             emailSubject;
    FreeTxt             emailText;
    TrvDays             daysOld;
    NoYesId             notifyDelegate;

    DialogField         dialogEmailSubject;
    DialogField         dialogEmailText;
    DialogField         dialogDaysOld;
    DialogField         dialogNotifyDelegate;

    private static str clientEndpoint = '';

    // The version of the class, it is used when packing and unpacking.
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        emailSubject,
        emailText,
        daysOld,
        notifyDelegate
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@Expense:UnsubmittedExpenseReportReminder";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <param name="_dialog">
    ///    An already initialized instance of the <c>DialogRunBase</c> class; optional.
    /// </param>
    /// <param name="_forceOnClient">
    ///    A Boolean value that specifies whether the dialog must be created on the client; optional.
    /// </param>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        Object ret;

        ret = this.dialogInternal(_dialog, _forceOnClient);

        dialogEmailSubject   = ret.addFieldValue(extendedTypeStr(FreeTxt), emailSubject, "@SYS101366", "@SYS101367");
        dialogEmailText      = ret.addFieldValue(extendedTypeStr(FreeTxt), emailText, "@SYS2595", "@SYS101969");

        dialogDaysOld        = ret.addFieldValue(extendedTypeStr(TrvDays), daysOld, "@SYS117518");
        dialogNotifyDelegate = ret.addFieldValue(extendedTypeStr(NoYesId), notifyDelegate, "@Expense:DelegateNotification");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        emailSubject = dialogEmailSubject.value();
        emailText = dialogEmailText.value();

        daysOld = dialogDaysOld.value();
        notifyDelegate = dialogNotifyDelegate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gathers the email addresses to send the message to and sends the email.
    /// </summary>
    /// <param name = "_hcmWorker">Worker to send the message to.</param>
    /// <param name = "_messageBody">Body of the email to send.</param>
    private void mail(HcmWorker _hcmWorker, str _messageBody)
    {
        TrvAppEmplSub trvAppEmplSub;
        Email		  toDelegatedUserEmail;
        str			  toEmailAddresses;
        const char semiColon = ';';

        if (_messageBody)
        {
            toEmailAddresses = _hcmWorker.email();

            if (notifyDelegate == NoYes::Yes)
            {
                trvAppEmplSub = TrvAppEmplSub::findAllDelegatedUsers(_hcmWorker.RecId);
            }

            while (trvAppEmplSub)
            {
                toDelegatedUserEmail = HcmWorker::findByPerson(DirPersonUser::find(trvAppEmplSub.DelegatedUser).PersonParty).email();

                if (toDelegatedUserEmail)
                {
                    toEmailAddresses = toEmailAddresses + semiColon + toDelegatedUserEmail;
                }
                next trvAppEmplSub;
            }

            TrvMailHelper::sendMailV2(toEmailAddresses, emailSubject, _messageBody);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        str baseMessage = emailText + "\r\n";
        str emailBody = baseMessage;
        TrvHcmWorkerRecId theWorker;
        TrvDateStd beforeDate = DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), - daysOld));;

        TrvExpTable trvExpTable;
        HcmWorker hcmWorker;

        while select Txt1, Txt2, ExpNumber, RecId from trvExpTable
            join RecID from hcmWorker order by hcmWorker.RecID
            where trvExpTable.CreatingWorker == hcmWorker.RecId
            && trvExpTable.approvalStatus == TrvAppStatus::Create
            && DateTimeUtil::date(trvExpTable.CreatedDateTime) < beforeDate
            && trvExpTable.LegalEntity == CompanyInfo::current()
        {
            try
            {
                if (theWorker && theWorker != hcmWorker.RecId && HcmWorker::find(theWorker).email())
                {
                    this.mail(HcmWorker::find(theWorker), emailBody);
                    emailBody = baseMessage;
                }

                theWorker = hcmWorker.RecId;
                emailBody = this.addReport(trvExpTable, emailBody);
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
        }

        if (theWorker && HcmWorker::find(theWorker).email())
        {
            this.mail(HcmWorker::find(theWorker), emailBody);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the given report information to the list of reports to be emailed to the user.
    /// </summary>
    /// <param name = "_trvExpTable">Report to add information for.</param>
    /// <param name = "_body">Existing email body</param>
    /// <returns>Updated email body with the additional report</returns>
    private str addReport(TrvExpTable _trvExpTable, str _body)
    {
        str reportLink = strFmt("<a href=\"%1\">%2</a>", this.getReportLink(_trvExpTable.RecId), _trvExpTable.ExpNumber);

        str updatedBody = _body + strFmt("\r\n\%1: \%2", "@SYS101341", reportLink);

        if (_trvExpTable.Txt1)
        {
            updatedBody = updatedBody + strFmt(" \%1: \%2", "@SYS101290", _trvExpTable.Txt1);
        }

        if (_trvExpTable.Txt2)
        {
            updatedBody = updatedBody + strFmt(" \%1: \%2", "@Expense:ExpenseReportPurpose", _trvExpTable.Txt2);
        }

        return updatedBody;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uses the UrlGenerator to generate a URL for the specified expense report.
    /// </summary>
    /// <param name = "_trvExpTableRecID">RecID of the expense report.</param>
    /// <returns>URL that links to the given expense report.</returns>
    private str getReportLink(RecId _trvExpTableRecID)
    {
        var urlGenerator = new Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper.UrlGenerator();
        var requestQueryParameterCollection = urlGenerator.RequestQueryParameterCollection;
        var currentHost = new System.Uri(TrvDraftExpenseReportReminder::getClientURL());
        urlGenerator.HostUrl = currentHost.GetLeftPart(System.UriPartial::Authority);
        urlGenerator.Company = curext();
        urlGenerator.MenuItemName = menuItemDisplayStr(TrvExpenses);
        urlGenerator.Partition = getCurrentPartition();
        requestQueryParameterCollection.AddRequestQueryParameter(
            tableId2Name(tableNum(TrvExpTable)),
            fieldId2Name(tableNum(TrvExpTable), fieldNum(TrvExpTable, RecId)), int642Str(_trvExpTableRecID));

        return urlGenerator.GenerateFullUrl().AbsoluteUri.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClientURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the client URL in a way that works in the batch server
    /// </summary>
    /// <returns>The base URL of the client</returns>
    /// <remarks>This method is needed as UrlUtility::getUrl generates an exception when run in batch.</remarks>
    private static str getClientURL()
    {
        if (clientEndpoint == '')
        {
            var environment = Microsoft.Dynamics.ApplicationPlatform.Environment.EnvironmentFactory::GetApplicationEnvironment();
            var infrastructureEnv = environment.Infrastructure;
            var clientUrl = infrastructureEnv.HostUrl;

            if (!clientUrl.EndsWith(@"/"))
            {
                clientUrl += "/";
            }

            clientEndpoint = clientUrl;
        }

        return clientEndpoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    ///    be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@Expense:UnsubmittedExpenseReportReminder";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        TrvDraftExpenseReportReminder   reminder;

        reminder = new TrvDraftExpenseReportReminder();

        if (reminder.prompt())
        {
            reminder.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>