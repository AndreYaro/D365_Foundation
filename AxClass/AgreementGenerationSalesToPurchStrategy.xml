<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementGenerationSalesToPurchStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AgreementGenerationSalesToPurchStrategy</c> class is the strategy class for creating a
///    purchase agreement from a sales agreement.
/// </summary>
class AgreementGenerationSalesToPurchStrategy extends AgreementGenerationStrategy
{
    VendTable               vendTable;
    SalesAgreementHeader    salesAgreementHeader;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the purchase agreement header.
    /// </summary>
    public void createAgreementHeader()
    {
        AgreementHeaderDefault  agreementHeaderDefault;
        // <GEERU>
        SalesAgreementHeaderExt_RU salesAgreementHeaderExt;

        if (intraCompany_RU)
        {
            salesAgreementHeader.intracompanySync_RU(true);

            salesAgreementHeaderExt = SalesAgreementHeaderExt_RU::findBySalesAgreementHeader(salesAgreementHeader.RecId);
            if (salesAgreementHeaderExt)
            {
                salesAgreementHeaderExt.intracompanySync(true);
            }
        }
        else
        {
        // </GEERU>
            salesAgreementHeader.intercompanySync(true);
        // <GEERU>
        }
        // </GEERU>
        agreementHeaderDefault = AgreementHeaderDefault::findAgreementHeader(salesAgreementHeader.RecId);
        if (agreementHeaderDefault.RecId)
        {
            // <GEERU>
            if (intraCompany_RU)
            {
                agreementHeaderDefault.intracompanySyncSalesToPurch_RU(true);
                PurchAgreementHeaderDefault::createFromSalesAgreementHeaderRecId(salesAgreementHeader.RecId, true);
            }
            else
            {
            // </GEERU>
                agreementHeaderDefault.intercompanySyncSalesToPurch(true);
                PurchAgreementHeaderDefault::createFromSalesAgreementHeaderRecId(salesAgreementHeader.RecId);
            // <GEERU>
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the purchase agreement lines.
    /// </summary>
    public void createAgreementLines()
    {
        AgreementLineQuantityCommitment agreementLine;

        // <GEERU>
        AgreementLineExt_RU agreementLineExt;

        if (intraCompany_RU)
        {
            while select agreementLine
                where agreementLine.Agreement == salesAgreementHeader.RecId
                exists join agreementLineExt
                    where agreementLineExt.AgreementLine == agreementLine.RecId
                       && !agreementLineExt.SkipIntraCompanySync
            {
                agreementLine.intracompanySync_RU();
            }
        }
        else
        {
        // </GEERU>
            while select agreementLine
                where agreementLine.Agreement == salesAgreementHeader.RecId
                   && !agreementLine.IsDeleted
            {
                agreementLine.intercompanySync();
            }
        // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the header buffer of the created purchase agreement.
    /// </summary>
    /// <returns>
    ///    The heder buffer of the created sales agreement.
    /// </returns>
    public AgreementHeader createdAgreementHeader()
    {
        // <GEERU>
        if (intraCompany_RU)
        {
            return salesAgreementHeader.purchAgreementHeader_RU();
        }
        // </GEERU>
        return salesAgreementHeader.purchAgreementHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the customer record to use to create the sales agreement.
    /// </summary>
    public void setCustVendTable()
    {
        CustTable   custTable;

        salesAgreementHeader = this.parmCallerRecord() as SalesAgreementHeader;
        custTable            = salesAgreementHeader.custTable();
        // <GEERU>
        if (intraCompany_RU)
        {
            custVendTable = VendTable::findByPartyRecId(custTable.Party);
        }
        else
        {
        // </GEERU>
            custVendTable = VendTable::find(custTable.interCompanyTradingPartnerAccount());
        // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static AgreementGenerationSalesToPurchStrategy construct()
    {
        return new AgreementGenerationSalesToPurchStrategy();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>