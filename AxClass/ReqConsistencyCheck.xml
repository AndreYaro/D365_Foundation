<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFixLeanCoverageDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fixes broken lean coverage dimensions.
    /// </summary>
    private void checkFixLeanCoverageDim()
    {
        LeanCoverage            leanCoverage;
        KanbanRule              kanbanRule;
        KanbanFlow              kanbanFlow;
        LeanCoverageKanbanRule  leanCoverageKanbanRule;
        InventDim               inventDimCovReceipt;
        InventDim               inventDimLeanCoverage;
        InventDimParm           inventDimParmCov;
        RecId                   curLegalEntityRecid = CompanyInfo::current();

        ttsbegin;
        leanCoverage.selectForUpdate(this.checkFix() == CheckFix::Fix);

        while select leanCoverage
            join tableId from leanCoverageKanbanRule
                where leanCoverageKanbanRule.Coverage == leanCoverage.RecId
            join ruleId from kanbanRule
                where kanbanRule.RecId       == leanCoverageKanbanRule.KanbanRule &&
                      kanbanRule.LegalEntity == curLegalEntityRecid
            join kanbanFlow
                where kanbanFlow.RecId == kanbanRule.KanbanFlow
        {
            setprefix(tablepname(LeanCoverage));

            inventDimLeanCoverage = InventDim::findInLegalEntity(leanCoverage.InventDimId, leanCoverage.InventDimDataAreaId);
            inventDimCovReceipt   = kanbanFlow.receiptInventDim();

            switch (leanCoverage.RuleCoverageType)
            {
                case LeanRuleCoverageType::Product:
                    inventDimCovReceipt.clearNotCovPrDim(InventDimGroupSetup::newItemId(leanCoverage.ItemId));
                    break;
                case LeanRuleCoverageType::ProductFamily:
                case LeanRuleCoverageType::All:
                    inventDimCovReceipt.clearNotSiteAndWarehouseDim();
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            inventDimParmCov.initFromInventDim(inventDimCovReceipt);

            if (!inventDim::isInventDimParmEqual(inventDimCovReceipt, inventDimLeanCoverage, inventDimParmCov, false))
            {
                checkFailed(strfmt("@SYS79198" + ' ' + "@SYS321492", kanbanRule.RuleId));

                if (this.checkFix() == CheckFix::Fix)
                {
                    inventDimLeanCoverage.initFromInventDim(inventDimCovReceipt, inventDimParmCov.selectedDimFields());
                    leanCoverage.setInventDimId(InventDim::findOrCreate(inventDimLeanCoverage));
                    leanCoverage.update();
                    this.updateCorrected();
                }
            }
        }

        if (this.checkFix() != CheckFix::Fix)
        {
            this.updateNotCorrected();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    configurationKeyId configurationKey()
    {
        return configurationkeynum(Req);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 120;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        ReqItemTable    reqItemTable;
        ReqPO           reqPO;
        ReqRoute        reqRoute;
        ReqRouteJob     reqRouteJob;
        WrkCtrCapRes    wrkCtrCapRes;
        ReqPlanId       reqPlanId;
        ReqTrans reqTrans, otherReqTrans;

        InventDim                       inventDim;
        InventDimGroupSetup             inventDimGroupSetup;
        ItemId                          lastItemId = '';

        this.kernelCheckTable(tablenum(ReqPlanForecast));
        this.kernelCheckTable(tablenum(ReqPlanSched));
        this.kernelCheckTable(tablenum(ReqGroup));
        this.kernelCheckTable(tablenum(ReqTrans));

        ttsbegin;

        while select optimisticlock reqItemTable
            order by reqItemTable.ItemId
        {
            setprefix(tablepname(ReqItemTable));

            inventDim = InventDim::find(reqItemTable.CovInventDimId);

            if (! inventDim.RecId)
            {
                checkFailed(strfmt("@SYS72900",reqItemTable.CovInventDimId));
                if (this.checkFix() == CheckFix::Fix)
                {
                    reqItemTable.doDelete();

                    this.updateCorrected();
                }
            }
            else
            {
                if (lastItemId != reqItemTable.ItemId)
                {
                    inventDimGroupSetup = InventDimGroupSetup::newItemId(reqItemTable.ItemId);
                    lastItemId = reqItemTable.ItemId;
                }
                if (reqItemTable.CovInventDimId != inventDim.reqCovDimId(inventDimGroupSetup))
                {
                    checkFailed(strfmt("@SYS72901",reqItemTable.CovInventDimId,reqItemTable.ItemId));
                    if (this.checkFix() == CheckFix::Fix)
                    {
                        reqItemTable.CovInventDimId = inventDim.reqCovDimId(inventDimGroupSetup);

                        if (! ReqItemTable::find(reqItemTable.ItemId,reqItemTable.CovInventDimId).RecId)
                            reqItemTable.doUpdate();
                        else
                            reqItemTable.doDelete();

                        this.updateCorrected();
                    }
                }

                if (reqItemTable.RecId)
                    this.kernelCheckRecord(reqItemTable);
            }
        }
        if (this.checkFix() != CheckFix::Fix)
        {
            this.updateNotCorrected();
        }
        ttscommit;

        ttsbegin;

        while select optimisticlock reqPO
        {
            if (! reqPO.reqTrans().RecId)
            {
                setprefix(tablepname(ReqPO));

                reqPlanId = ReqPlanVersion::find(reqPO.PlanVersion).ReqPlanId;

                checkFailed(strfmt("@SYS28633",reqPO.RefId,reqPlanId));
                if (this.checkFix() == CheckFix::Fix)
                {
                    reqPO.doDelete();

                    this.updateCorrected();
                }
            }
            else
                this.kernelCheckRecord(reqPO);
        }
        if (this.checkFix() != CheckFix::Fix)
        {
            this.updateNotCorrected();
        }

        ttscommit;

        ttsbegin;

        while select forceplaceholders optimisticlock reqRoute
            notexists join reqPO
            where reqPO.PlanVersion              == reqRoute.PlanVersion              &&
                    reqPO.RefId                    == reqRoute.RefId
        {
            setprefix(tablepname(ReqRoute));

            reqPlanId = ReqPlanVersion::find(reqRoute.PlanVersion).ReqPlanId;

            checkFailed(strfmt("@SYS28633",reqRoute.RefId,reqPlanId));
            if (this.checkFix() == CheckFix::Fix)
            {
                reqRoute.doDelete();

                this.updateCorrected();
            }
        }
        if (this.checkFix() != CheckFix::Fix)
        {
            this.updateNotCorrected();
        }

        ttscommit;

        ttsbegin;

        while select forceplaceholders optimisticlock reqRouteJob
            notexists join reqPO
            where reqPO.PlanVersion             == reqRouteJob.PlanVersion              &&
                    reqPO.RefId                   == reqRouteJob.ReqPOId
        {
            setprefix(tablepname(ReqRouteJob));

            reqPlanId = ReqPlanVersion::find(reqRouteJob.PlanVersion).ReqPlanId;

            checkFailed(strfmt("@SYS28633",reqRouteJob.ReqPOId,reqPlanId));
            if (this.checkFix() == CheckFix::Fix)
            {
                reqRouteJob.doDelete();

                this.updateCorrected();
            }
        }
        if (this.checkFix() != CheckFix::Fix)
        {
            this.updateNotCorrected();
        }

        ttscommit;

        ttsbegin;

        while select forceplaceholders optimisticlock wrkCtrCapRes
            where wrkCtrCapRes.RefType == WrkCtrCapRefType::PlannedOrder
            notexists join reqPO
            where reqPO.PlanVersion             == wrkCtrCapRes.PlanVersion            &&
                    reqPO.RefId                   == wrkCtrCapRes.RefId
        {
            setprefix(tablepname(WrkCtrCapRes));

            reqPlanId = ReqPlanVersion::find(wrkCtrCapRes.PlanVersion).ReqPlanId;

            checkFailed(strfmt("@SYS28633",wrkCtrCapRes.RefId,reqPlanId));
            if (this.checkFix() == CheckFix::Fix)
            {
                wrkCtrCapRes.doDelete();

                this.updateCorrected();
            }
        }
        if (this.checkFix() != CheckFix::Fix)
        {
            this.updateNotCorrected();
        }

        ttscommit;

        ttsbegin;

        while select optimisticlock reqTrans
            where 
                (!ReqConsistencyCheckMasterPlanningItemCheckFlight::instance().isEnabled() ||
                  reqTrans.RefType == ReqRefType::BOMPlannedOrder ||
                  reqTrans.RefType == ReqRefType::ItemPlannedOrder ||
                  reqTrans.RefType == ReqRefType::TransferPlannedOrder ||
                  reqTrans.RefType == ReqRefType::PlannedKanban ||
                  reqTrans.RefType == ReqRefType::PlannedKanbanLine ||
                  reqTrans.RefType == ReqRefType::PmfPlannedProdBatch ||
                  reqTrans.RefType == ReqRefType::PlannedIntercompanyDemand)
            exists join otherReqTrans
                where reqTrans.RefId == otherReqTrans.RefId &&
                    reqTrans.RefType == otherReqTrans.RefType &&
                    reqTrans.PlanVersion == otherReqTrans.PlanVersion &&
                    (!ReqConsistencyCheckMasterPlanningItemCheckFlight::instance().isEnabled() ||
                    reqTrans.ItemId == otherReqTrans.ItemId) &&
                    reqTrans.CovInventDimId != otherReqTrans.CovInventDimId
            notexists join reqPO
                where reqPO.PlanVersion == reqTrans.PlanVersion &&
                    reqPO.RefId == reqTrans.RefId &&
                    reqPO.CovInventDimId == reqTrans.CovInventDimId
        {
            setprefix(tablepname(ReqTrans));
            checkFailed(strfmt("@SCMPlanning:ReqConsistencyCheckReqTransDuplicates", reqTrans.RefType, reqTrans.RefId));

            if (this.checkFix() == CheckFix::Fix)
            {
                reqTrans.doDelete();

                this.updateCorrected();
            }
        }
        if (this.checkFix() != CheckFix::Fix)
        {
            this.updateNotCorrected();
        }

        ttscommit;

        this.checkFixLeanCoverageDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    classId treeParentClassId()
    {
        return classnum(SysConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS25606";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@SYS58201";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        SysConsistencyCheckJob      consistencyCheckJob;

        consistencyCheckJob =  new SysConsistencyCheckJob(classnum(ReqConsistencyCheck));

        if (consistencyCheckJob.prompt())
            consistencyCheckJob.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>