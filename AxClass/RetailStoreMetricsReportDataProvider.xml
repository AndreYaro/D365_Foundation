<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStoreMetricsReportDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailStoreMetricsReportDataProvider</c> class is the data provider
/// class for retail store metrics report.
/// </summary>
[SRSReportParameterAttribute(classstr(RetailStoreMetricsParameterContract_ApplicationSuite))]
class RetailStoreMetricsReportDataProvider extends SRSReportDataProviderBase
{
    RetailStoreMetricsTmp t;
    RetailStoreMetricsTmp tmp;
    RetailStoreMetricsParameterContract dc;
    private RetailStoreMetricsParameterContract_ApplicationSuite dca;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called by the SSRS framework to bring back data. It gets called after processReport.
    /// </summary>
    /// <returns>The table buffer object.</returns>
    [SRSReportDataSetAttribute(tableStr(RetailStoreMetricsTmp))]
    public RetailStoreMetricsTmp getTable()
    {
        select * from t;
        return t;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the report.
    /// </summary>
    public void processReport()
    {
        dca = this.parmDataContract();

        date start = dca.parmFromDate();
        date end = dca.parmToDate();

        Query q = this.buildQuery(start, end);
        QueryRun qr = new QueryRun(q);

        // run query and insert query results into temp table buffer
        while (qr.next())
        {
            CustInvoiceTrans t1 = qr.get(tableNum(CustInvoiceTrans));
            InventTransGrouped t2 = qr.get(tableNum(InventTransGrouped));
            RetailCustInvoiceJourTable t3 = qr.get(tableNum(RetailCustInvoiceJourTable));
            tmp.clear();
            tmp.SalesAmount = t1.LineAmountMST;
            tmp.SalesQuantity = t1.Qty;
            tmp.COGS = t2.COGS;
            tmp.GrossProfitMargin = t1.LineAmountMST - t2.COGS;
            tmp.OperatingUnitID = t3.OMInternalOrganization;
            tmp.insert();
        }

        RecId hierarchyRelationId = str2recId(dca.parmHierarchyRelationId());
        var dateTimeStart = DateTimeUtil::newDateTime(start, 0);
        var dateTimeEnd = DateTimeUtil::newDateTime(end, 0);
        if (hierarchyRelationId != 0 && RetailEnableSelectingOrgHierarchyForChannelReportingFlight::instance().isEnabled())
        {
            OmInternalOrganization org;                     // individual organizations;
            OMExplodedOrganizationSecurityGraph graph;      // ancester organization -> (des) organization, with hierarchy type, validfrom , validto, distance (including 0);
            OMHierarchyRelationship parentRelationship;     // parent organization   -> child organization, with hierarchy type, validfrom , validto, (consider distince = 1);

            OMHierarchyRelationship selectedRelationship = OMHierarchyRelationship::findRecId(hierarchyRelationId);
            Set visitedOrgs = new Set(Types::Int64);
            
            while select validTimeState(dateTimeStart, dateTimeEnd) Organization from graph
                    where graph.AncestorOrganization == selectedRelationship.ChildOrganization
                        && graph.OMHierarchyType == selectedRelationship.HierarchyType
                join Name, RecId from org
                    where org.RecId == graph.Organization
                outer join SalesAmount, SalesQuantity, COGS, GrossProfitMargin from tmp
                    where graph.Organization == tmp.OperatingUnitID
            {
                // In the time range [dateTimeStart, dateTimeEnd], the reporting organization hierarchy can be modified,
                // which will cause duplicate items in the final report. So, we skip the organizations that were already
                // inserted into the report.
                if (visitedOrgs.in(graph.Organization))
                {
                    continue;
                }

                visitedOrgs.add(graph.Organization);

                select firstonly validTimeState(dateTimeStart, dateTimeEnd) ParentOrganization from parentRelationship
                    order by parentRelationship.ValidFrom desc
                    where parentRelationship.ChildOrganization == org.RecId
                        && parentRelationship.HierarchyType == selectedRelationship.HierarchyType;

                this.insertMetricsResult(tmp, graph.Organization, org.Name, parentRelationship.ParentOrganization);
            }
        }
        else
        {
            RetailOMHierarchyView om;

            // left outer join 'all the operating units' with 'operating units that has sales data'
            // this will ensure a complete view of all the operating units.
            // then insert into the temp buffer that will be used to display on report.
            while select * from om
            where om.ValidFrom <= dateTimeEnd
            && om.ValidTo >= dateTimeStart
            outer join tmp
            where om.RecId == tmp.OperatingUnitID
            {
                this.insertMetricsResult(tmp, om.RecId, om.Name, om.ParentOrganization);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMetricsResult</Name>
				<Source><![CDATA[
    private void insertMetricsResult(RetailStoreMetricsTmp storeMetrics, RecId operatingUnitId, str operatingUnitName, RecId parentOperatngUnitId)
    {
        t.clear();
        t.SalesAmount = storeMetrics.SalesAmount;
        t.SalesQuantity = storeMetrics.SalesQuantity;
        t.COGS = storeMetrics.COGS;
        t.GrossProfitMargin = storeMetrics.GrossProfitMargin;
        t.OperatingUnitID = operatingUnitId;
        t.OperatingUnitName = operatingUnitName;
        t.ParentOperatingUnitID = parentOperatngUnitId;
        t.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the AX query based on date range and channel.
    /// </summary>
    /// <param name = "start">The start date value for the report.</param>
    /// <param name = "end">The end date value for the report.</param>
    /// <returns>The query for the report.</returns>
    public Query buildQuery(date start, date end)
    {
        Query q = new Query();

        if (this.userRoleIsGrantedToAllCompanies() || !RetailEnableCrossCompanyInQryForUsersWithAccessInAllCompaniesFlight::instance().isEnabled())
        {
            q.allowCrossCompany(true);
        }

        QueryBuildDataSource t1 = q.addDataSource(tableNum(CustInvoiceTrans));

        QueryBuildDataSource t2 = t1.addDataSource(tableNum(CustInvoiceJour));
        t2.fetchMode(QueryFetchMode::One2One);
        t2.joinMode(JoinMode::InnerJoin);
        t2.relations(true);
        t2.addLink(fieldNum(CustInvoiceTrans, SalesId), fieldNum(CustInvoiceJour, SalesId));
        t2.addLink(fieldNum(CustInvoiceTrans, InvoiceId), fieldNum(CustInvoiceJour, InvoiceId));
        t2.addLink(fieldNum(CustInvoiceTrans, InvoiceDate), fieldNum(CustInvoiceJour, InvoiceDate));
        t2.addLink(fieldNum(CustInvoiceTrans, numberSequenceGroup), fieldNum(CustInvoiceJour, numberSequenceGroup));

        QueryBuildDataSource t3 = t2.addDataSource(tableNum(RetailCustInvoiceJourTable));
        t3.fetchMode(QueryFetchMode::One2One);
        t3.joinMode(JoinMode::OuterJoin);
        t3.relations(false);
        t3.addLink(fieldNum(CustInvoiceJour, RecId), fieldNum(RetailCustInvoiceJourTable, CustInvoiceJour));

        QueryBuildDataSource t4 = t1.addDataSource(tableNum(InventTransOrigin));
        t4.fetchMode(QueryFetchMode::One2One);
        t4.joinMode(JoinMode::OuterJoin);
        t4.relations(true);
        t4.addLink(fieldNum(CustInvoiceTrans, InventTransId), fieldNum(InventTransOrigin, InventTransId));

        QueryBuildDataSource t5 = t4.addDataSource(tableNum(InventTransGrouped));
        t5.fetchMode(QueryFetchMode::One2One);
        t5.joinMode(JoinMode::OuterJoin);
        t5.relations(false);
        t5.addLink(fieldNum(CustInvoiceTrans, InvoiceId), fieldNum(InventTransGrouped, InvoiceId), t1.name());
        t5.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTransGrouped, InventTransOrigin));

        t1.addSelectionField(fieldNum(CustInvoiceTrans, LineAmountMST), SelectionField::Sum);
        t1.addSelectionField(fieldNum(CustInvoiceTrans, LineAmountTaxMST), SelectionField::Sum);
        t1.addSelectionField(fieldNum(CustInvoiceTrans, Qty), SelectionField::Sum);
        t5.addSelectionField(fieldNum(InventTransGrouped, COGS), SelectionField::Sum);
        t3.addSelectionField(fieldNum(RetailCustInvoiceJourTable, OMInternalOrganization));

        t3.addGroupByField(fieldNum(RetailCustInvoiceJourTable, OMInternalOrganization));

        t1.addRange(fieldNum(CustInvoiceTrans, InvoiceDate)).value(SysQuery::range(start, end));

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userRoleIsGrantedToAllCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the user has access to all the legal entities or not.
    /// </summary>
    /// <returns>True If the user has has access to all the legal entities</returns>
    private boolean userRoleIsGrantedToAllCompanies()
    {
        SecurityUserRole securityUserRole;
        SecurityUserRoleCondition securityUserRoleCondition;

        //The user has access to all the legal entities then <t>SecurityUserRoleCondition</t> table would be empty.
        select firstonly RecId from securityUserRole
           exists join securityUserRoleCondition
            where securityUserRole.RecID == securityUserRoleCondition.SecurityUserRole
                && securityUserRole.User == curUserId();

        return !securityUserRole.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>