<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSupply</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventSupply</c> class handles the creation of temporary data for use with the
/// <c>InventSupply</c> form.
/// </summary>
/// <remarks>
/// Only data that is independent of dimension display settings will be created by this class whereas
/// the rest will be handled by the <c>InventDim_Frm_Supply</c> class.
/// </remarks>
class InventSupply
{
    InventDim                           inventDimReq;
    InventSupplyDlvModeSelectSupply     dlvModeSelectSupp;
    InventSupplyDlvModeSelectCust       dlvModeSelectCust;
    boolean                             onlyTransportRel;
    DlvModeId                           dlvModeReq;

    InventTable                         inventTable;
    InventQty                           qty;
    LogisticsPostalAddressMap           custAddressMap;
    boolean                             isWHSItem;
    //Logist
    CalendarId                          custCalendarId;
    ReqSetupDim                         reqSetupDimReq;
    Map                                 mapCustMOD;
    WorkCalendarSched                   workCalendarSched;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAccessRights</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the current user has access to all the tables that are used by this class.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    Rights are insufficient to use one of the following tables: <c>InventDim</c>,
    ///    <c>InventItemPurchSetup</c>, <c>InventItemInventSetup</c>, <c>PriceDiscTable</c>, <c>VendTable</c>,
    ///    <c>InventSum</c> or <c>InventTrans</c>.
    /// </exception>
    protected void checkAccessRights()
    {
        boolean ok = true;

        if (! hasTableAccess(tableNum(InventDim)))
        {
            ok = checkFailed(strFmt("@SYS76214",tableId2name(tableNum(InventDim))));
        }

        if (! hasTableAccess(tableNum(InventItemPurchSetup)))
        {
            ok = checkFailed(strFmt("@SYS76214",tableId2name(tableNum(InventItemPurchSetup))));
        }

        if (! hasTableAccess(tableNum(InventItemInventSetup)))
        {
            ok = checkFailed(strFmt("@SYS76214",tableId2name(tableNum(InventItemInventSetup))));
        }

        if (! hasTableAccess(tableNum(PriceDiscTable)))
        {
            ok = checkFailed(strFmt("@SYS76214",tableId2name(tableNum(PriceDiscTable))));
        }

        if (! hasTableAccess(tableNum(VendTable)))
        {
            ok = checkFailed(strFmt("@SYS76214",tableId2name(tableNum(VendTable))));
        }

        if (! hasTableAccess(tableNum(InventSum)))
        {
            ok = checkFailed(strFmt("@SYS76214",tableId2name(tableNum(InventSum))));
        }

        if (! hasTableAccess(tableNum(InventTrans)))
        {
            ok = checkFailed(strFmt("@SYS76214",tableId2name(tableNum(InventTrans))));
        }

        if (!ok)
        {
            throw error("@SYS79625");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpDataOnhand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a temporary <c>InventSupplyTmpOnHand</c> buffer with information about the on-hand quantities
    /// and the available mode of delivery.
    /// </summary>
    /// <param name="_dimParmVisibleGrid">
    /// An <c>InventDimParm</c> record that determines how grouping and summation should be performed.
    /// </param>
    /// <returns>
    /// A temporary <c>InventSupplyTmpOnHand</c> buffer with information about the on-hand quantities and
    /// the available mode of delivery.
    /// </returns>
    /// <remarks>
    /// The data comes from the <c>InventSum</c> table and is summed based on the flags set in the
    /// <c>InventDimParm</c> record by the <c>parmDimParmVisibleGrid</c> parameter method.
    /// </remarks>
    public InventSupplyTmpOnhand createTmpDataOnhand(InventDimParm _dimParmVisibleGrid)
    {
        InventSupplyTmpOnhand       inventSupplyTmpOnhand;

        InventDim                   lastInventDim;

        TransDate                   shipDateSupply;

        Map                         mapSuppMOD;

        ReqSetupDim                 reqSetupDimSupp;

        //Create new query based on InventSum
        Query query = new Query();

        QueryBuildDataSource dsInventSum = query.addDataSource(tablenum(InventSum));
        dsInventSum.addRange(fieldnum(InventSum,ItemId)).value(queryValue(inventTable.ItemId));

        //All fields from InventSum will be returned as sum
        InventSum::queryAddSumFields(dsInventSum);

        QueryBuildRange criteriaClosed = SysQuery::findOrCreateRange(dsInventSum, fieldnum(InventSum,Closed));
        if (_dimParmVisibleGrid.ClosedFlag)
            criteriaClosed.value('');
        else
            criteriaClosed.value(queryValue(NoYes::No));

        QueryBuildRange criteriaClosedQty = SysQuery::findOrCreateRange(dsInventSum, fieldnum(InventSum,ClosedQty));
        if (_dimParmVisibleGrid.ClosedQtyFlag)
            criteriaClosedQty.value(queryValue(NoYes::No));
        else
            criteriaClosedQty.value('');

        QueryBuildDataSource dsInventDim = dsInventSum.addDataSource(tablenum(InventDim));
        dsInventDim.joinMode(JoinMode::InnerJoin);
        dsInventDim.addLink(fieldnum(InventSum,InventDimId),fieldnum(InventDim,InventDimId));

        InventDim::queryAddRangeAndValueProductDim(dsInventDim, inventDimReq, EcoResProductDimGroupSetup::newInventTable(inventTable), false);

        //Group by the fields that were selected in Dimension display
        _dimParmVisibleGrid.queryAddSortField(dsInventDim);

        //Only include onhand from warehouses that are type Standard
        this.limitInventDimToStandardInventLoc(dsInventDim);

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            InventSum inventSum = queryRun.getNo(1);
            InventDim inventDimGrouped = queryRun.getNo(2);

            //Only show if we have physical inventory
            //Note: This comparison should ideally be done in the query, but is currently not possible
            if (inventSum.physicalInventCalculated() != 0)
            {
                InventDim inventDim = InventDim::findOrCreate(inventDimGrouped);

                if (inventDim.InventDimId != lastInventDim.InventDimId)
                {
                    reqSetupDimSupp = ReqSetupDim::newInventTable(inventTable,inventDim.InventDimId,inventDim);
                }

                //Only recreate the map if warehouse is not the same as on the previous record
                if (inventDim.InventLocationId != lastInventDim.InventLocationId || !mapSuppMOD)
                {
                    //Get earliest possible date for shipping based on order entry deadlines and open dates in calendar
                    shipDateSupply = InventOrderEntryDeadlineTable::effectiveOrderDate(inventDim.InventSiteId,'');
                    if (inventDim.InventLocationId)
                    {
                        shipDateSupply += reqSetupDimSupp.marginIssue();
                        shipDateSupply = InventLocation::find(inventDim.InventLocationId).findOpenDateForward(shipDateSupply);
                    }

                    mapSuppMOD = this.initMapSuppMOD(inventDim.InventLocationId, inventDimReq.InventLocationId);
                }

                lastInventDim = inventDim;

                InventIAvailability     inventAvailability = InventAvailabilityProvider::findByItemSumDim(inventTable, inventSum, inventDim).parmInventAvailability();
                InventQtyReservPhysical reservPhysical     = inventAvailability.reservPhysical();
                InventQtyAvailPhysical  availPhysical      = inventAvailability.availPhysical();

                InventQtyPhysicalOnhand physicalInvent = inventSum.physicalInventCalculated();

                //Loop through both MOD maps and generate record combinations
                this.loopMapsAndInsertOnhand(inventSupplyTmpOnhand,
                                             mapSuppMOD,
                                            mapCustMOD,
                                            inventTable.ItemId,
                                            inventDim,
                                            physicalInvent,
                                            reservPhysical,
                                            availPhysical,
                                            inventSum.pdsCWPhysicalInventCalculated(),
                                            inventSum.PdsCWReservPhysical,
                                            inventSum.pdsCWAvailPhysicalCalculated(),
                                            shipDateSupply);
            }
        }

        return inventSupplyTmpOnhand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpDataOrdersPlanned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds information about the planned purchase or production orders to a temporary
    /// <c>InventSupplyTmpOrders</c> buffer.
    /// </summary>
    /// <param name="_inventSupplyTmpOrders">
    /// A temporary <c>InventSupplyTmpOrders</c> buffer to which the information about the planned purchase
    /// or production orders should be added.
    /// </param>
    /// <param name="_dimParmVisibleGrid">
    /// An <c>InventDimParm</c> record that determines how grouping and summation should be performed.
    /// </param>
    /// <returns>
    /// A temporary <c>InventSupplyTmpOrders</c> buffer with information about the planned purchase or
    /// production orders and their mode of delivery.
    /// </returns>
    public InventSupplyTmpOrders createTmpDataOrdersPlanned(InventSupplyTmpOrders _inventSupplyTmpOrders, InventDimParm _dimParmVisibleGrid)
    {
        InventDim                   lastInventDim;
        TransDate                   reqDateDlv;
        inventQtyOrderedSum         orderedSum;
        PdsCWInventQtyOrderedSum    cwOrderedSum;

        Map                         mapSuppMOD;

        ReqSetupDim                 reqSetupDimSupp;

        //
        // Machine date is used because this date has to be the same as the date returned by
        // InventOrderEntryDeadlineTable.effectiveOrderDate method.
        // It is a requirement to use machine date in InventOrderEntryDeadlineTable.effectiveOrderDate because
        // it is more restrictive to users than session date.
        //
        date machineDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        ReqPlanVersion reqPlanVersion = InventSupply::planVersion();

        //Create new query based on ReqTrans
        Query query = new Query();

        QueryBuildDataSource dsReqPO = query.addDataSource(tablenum(ReqPO));
        dsReqPO.addRange(fieldnum(ReqPO,ItemId)).value(queryValue(inventTable.ItemId));
        dsReqPO.addRange(fieldnum(ReqPO,PlanVersion)).value(queryValue(reqPlanVersion.RecId));

        dsReqPO.addRange(fieldnum(ReqPO,IsDerivedDirectly)).value(queryValue(NoYes::No));

        //Only quantity field from ReqPO should be returned as sum
        QueryBuildFieldList flReqPO = dsReqPO.fields();
        flReqPO.addField(fieldnum(ReqPO,Qty),SelectionField::Sum);
        flReqPO.addField(fieldnum(ReqPO,PdsCWReqQty),SelectionField::Sum);

        //Group by ReqDateDlv
        dsReqPO.addSortField(fieldnum(ReqPO,ReqDateDlv));
        dsReqPO.orderMode(OrderMode::GroupBy);

        QueryBuildDataSource dsInventDim = dsReqPO.addDataSource(tablenum(InventDim));
        dsInventDim.joinMode(JoinMode::InnerJoin);
        dsInventDim.addLink(fieldnum(ReqPO,CovInventDimId),fieldnum(InventDim,InventDimId));

        InventDim::queryAddRangeAndValueProductDim(dsInventDim, inventDimReq, EcoResProductDimGroupSetup::newInventTable(inventTable), false);

        //Group by the fields that were selected in Dimension display
        _dimParmVisibleGrid.queryAddSortField(dsInventDim);

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            ReqPO reqPO = queryRun.getNo(1);
            InventDim inventDimGrouped = queryRun.getNo(2);
            InventDim inventDim = InventDim::findOrCreate(inventDimGrouped);

            //Do not allow dates in the past
            TransDate reqPOReqDateDlv = reqPO.ReqDateDlv;
            if (reqPOReqDateDlv < machineDate)
                reqPOReqDateDlv = machineDate;

            if ((lastInventDim && inventDim.InventDimId != lastInventDim.InventDimId) || (reqDateDlv && reqPOReqDateDlv != reqDateDlv))
            {
                //Loop through both MOD maps and generate record combinations
                this.loopMapsAndInsertOrders(_inventSupplyTmpOrders,
                                         mapSuppMOD,
                                         mapCustMOD,
                                         inventTable.ItemId,
                                         lastInventDim,
                                         orderedSum,
                                         0,
                                         cwOrderedSum,
                                         0,
                                         reqDateDlv,
                                         true,
                                         reqSetupDimSupp);

                orderedSum = 0;
                cwOrderedSum = 0;
            }

            //Only recreate the map if warehouse is not the same as on the previous record
            if (inventDim.InventLocationId != lastInventDim.InventLocationId || !mapSuppMOD)
            {
                mapSuppMOD = this.initMapSuppMOD(inventDim.InventLocationId, inventDimReq.InventLocationId);
            }
            if (inventDim.InventDimId != lastInventDim.InventDimId)
            {
                reqSetupDimSupp = ReqSetupDim::newInventTable(inventTable,inventDim.InventDimId,inventDim);
            }

            lastInventDim = inventDim;
            reqDateDlv = reqPOReqDateDlv;
            orderedSum += reqPO.Qty;
            cwOrderedSum += ReqPO.PdsCWReqQty;
        }

        if (orderedSum != 0)
        {
            //Loop through both MOD maps and generate record combinations
            this.loopMapsAndInsertOrders(_inventSupplyTmpOrders,
                                     mapSuppMOD,
                                     mapCustMOD,
                                     inventTable.ItemId,
                                     lastInventDim,
                                     orderedSum,
                                     0,
                                     cwOrderedSum,
                                     0,
                                     reqDateDlv,
                                     true,
                                     reqSetupDimSupp);
        }

        return _inventSupplyTmpOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpDataOrdersReal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a temporary <c>InventSupplyTmpOrdersbuffer</c> with information about the current purchase or
    /// production orders.
    /// </summary>
    /// <param name="_dimParmVisibleGrid">
    /// An <c>InventDimParm</c> record that determines how grouping and summation should be performed.
    /// </param>
    /// <returns>
    /// A temporary <c>InventSupplyTmpOrders</c> buffer with information about the current purchase or
    /// production orders.
    /// </returns>
    public InventSupplyTmpOrders createTmpDataOrdersReal(InventDimParm _dimParmVisibleGrid)
    {
        InventSupplyTmpOrders       inventSupplyTmpOrders;

        InventDim                   lastInventDim;
        TransDate                   dateExpected;
        inventQtyOrderedSum         orderedSum;
        InventQtyReservOrdered      reservOrdered;
        PdsCWInventQtyOrderedSum    cwOrderedSum;
        PdsCWReservOrdered          cwReservOrdered;

        Map                         mapSuppMOD;

        ReqSetupDim                 reqSetupDimSupp;

        //
        // Machine date is used because this date has to be the same as the date returned by
        // InventOrderEntryDeadlineTable.effectiveOrderDate method.
        // It is a requirement to use machine date in InventOrderEntryDeadlineTable.effectiveOrderDate because
        // it is more restrictive to users than session date.
        //
        date machineDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        reqSetupDimReq = ReqSetupDim::newInventTable(inventTable,inventDimReq.InventDimId,inventDimReq);

        //Create new query based on InventTrans
        Query query = new Query();

        QueryBuildDataSource dsInventTrans = query.addDataSource(tablenum(InventTrans));
        dsInventTrans.addRange(fieldnum(InventTrans,ItemId)).value(queryValue(inventTable.ItemId));

        //StatusReceipt = Ordered OR StatusIssue=ReservOrdered
        QueryBuildRange qrStatus = dsInventTrans.addRange(fieldnum(InventTrans,StatusIssue));
        qrStatus.value(strfmt('((%1 == %2) || (%3 == %4))',
                        fieldstr(InventTrans,StatusReceipt),
                        any2int(StatusReceipt::Ordered),
                        fieldstr(InventTrans,StatusIssue),
                        any2int(StatusIssue::ReservOrdered)
                       ) );
        qrStatus.status(RangeStatus::Locked);

        //Only quantity field from InventTrans should be returned as sum
        QueryBuildFieldList flInventTrans = dsInventTrans.fields();
        flInventTrans.addField(fieldnum(InventTrans,Qty),SelectionField::Sum);
        flInventTrans.addField(fieldnum(InventTrans,PdsCWQty),SelectionField::Sum);

        //Group by DateExpected,StatusReceipt,StatusIssue
        dsInventTrans.addSortField(fieldnum(InventTrans,DateExpected));
        dsInventTrans.addSortField(fieldnum(InventTrans,StatusReceipt));
        dsInventTrans.addSortField(fieldnum(InventTrans,StatusIssue));
        dsInventTrans.orderMode(OrderMode::GroupBy);

        QueryBuildDataSource dsInventDim = dsInventTrans.addDataSource(tablenum(InventDim));
        dsInventDim.joinMode(JoinMode::InnerJoin);
        dsInventDim.addLink(fieldnum(InventTrans,InventDimId),fieldnum(InventDim,InventDimId));

        InventDim::queryAddRangeAndValueProductDim(dsInventDim, inventDimReq, EcoResProductDimGroupSetup::newInventTable(inventTable), false);

        //Group by the fields that were selected in Dimension display
        _dimParmVisibleGrid.queryAddSortField(dsInventDim);

        //Only include onhand from warehouses that are type Standard
        this.limitInventDimToStandardInventLoc(dsInventDim);

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            InventTrans inventTrans = queryRun.getNo(1);
            InventDim inventDimGrouped = queryRun.getNo(2);
            InventDim inventDim = InventDim::findOrCreate(inventDimGrouped);

            //Do not allow dates in the past
            TransDate inventTransDateExpected = inventTrans.DateExpected;
            if (inventTransDateExpected < machineDate)
                inventTransDateExpected = machineDate;

            if ((lastInventDim && inventDim.InventDimId != lastInventDim.InventDimId) || (dateExpected && inventTransDateExpected != dateExpected))
            {
                //Loop through both MOD maps and generate record combinations
                this.loopMapsAndInsertOrders(inventSupplyTmpOrders,
                                             mapSuppMOD,
                                             mapCustMOD,
                                             inventTable.ItemId,
                                             lastInventDim,
                                             orderedSum,
                                             reservOrdered,
                                             cwOrderedSum,
                                             cwReservOrdered,
                                             dateExpected,
                                             false,
                                             reqSetupDimSupp);

                orderedSum = 0;
                reservOrdered = 0;
                cwOrderedSum = 0;
                cwReservOrdered = 0;
            }

            //Only recreate the map if warehouse is not the same as on the previous record
            if (inventDim.InventLocationId != lastInventDim.InventLocationId || !mapSuppMOD)
            {
                mapSuppMOD = this.initMapSuppMOD(inventDim.InventLocationId, inventDimReq.InventLocationId);
            }
            if (inventDim.InventDimId != lastInventDim.InventDimId)
            {
                reqSetupDimSupp = ReqSetupDim::newInventTable(inventTable,inventDim.InventDimId,inventDim);
            }

            //Sum up orderedSum and reservOrdered on the same day
            lastInventDim = inventDim;
            dateExpected = inventTransDateExpected;
            orderedSum += (inventTrans.StatusReceipt == StatusReceipt::Ordered ? inventTrans.Qty : 0);
            reservOrdered -= (inventTrans.StatusIssue == StatusIssue::ReservOrdered ? inventTrans.Qty : 0);
            cwOrderedSum += (inventTrans.StatusReceipt == StatusReceipt::Ordered ? inventTrans.PdsCWQty : 0);
            cwReservOrdered -= (inventTrans.StatusIssue == StatusIssue::ReservOrdered ? inventTrans.PdsCWQty : 0);
        }

        if (orderedSum != 0 || reservOrdered != 0)
        {
            this.loopMapsAndInsertOrders(inventSupplyTmpOrders,
                                                     mapSuppMOD,
                                                     mapCustMOD,
                                                     inventTable.ItemId,
                                                     lastInventDim,
                                                     orderedSum,
                                                     reservOrdered,
                                                     cwOrderedSum,
                                                     cwReservOrdered,
                                                     dateExpected,
                                                     false,
                                                     reqSetupDimSupp);
        }

        return inventSupplyTmpOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpDataStdLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills a temporary <c>InventSupplyTmpVendors</c> buffer with information about the standard lead
    ///    times coming from both Item Coverage and from the default/site-specific order settings.
    /// </summary>
    /// <returns>
    ///    A temporary <c>InventSupplyTmpVendors</c> buffer.
    /// </returns>
    public InventSupplyTmpStdLeadtime createTmpDataStdLeadTime()
    {
        InventSupplyTmpStdLeadtime inventSupplyTmpStdLeadtime = this.createTmpDataStdLeadTimeReqItemTable();
        this.createTmpDataStdLeadTimeInventItem(inventSupplyTmpStdLeadtime);

        return inventSupplyTmpStdLeadtime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpDataStdLeadTimeInventItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills a temporary <c>InventSupplyTmpVendors</c> buffer with information about the standard lead
    ///    times coming from the default or site-specific order settings.
    /// </summary>
    /// <param name="_inventSupplyTmpStdLeadtime">
    ///    A temporary <c>InventSupplyTmpStdLeadTime</c> table buffer to insert data into.
    /// </param>
    protected void createTmpDataStdLeadTimeInventItem(InventSupplyTmpStdLeadtime  _inventSupplyTmpStdLeadtime)
    {
        InventItemOrderSetupMap     inventItemOrderSetupMap;
        InventDim                   inventDim;

        InventDim                   lastInventDim;

        Map                         mapSuppMOD;
        ReqSetupDim                 reqSetupDimSupp;

        //Create new query based on InventItemPurchSetup
        Query query = new Query();

        QueryBuildDataSource dsInventItemPurchSetup = query.addDataSource(tableNum(InventItemPurchSetup));
        dsInventItemPurchSetup.addRange(fieldNum(InventItemPurchSetup,ItemId)).value(queryValue(inventTable.ItemId));
        dsInventItemPurchSetup.addRange(fieldNum(InventItemPurchSetup,LeadTime)).value(SysQuery::range(1,null));

        //AND (InventItemPurchSetup.Override = = NoYes::Yes OR InventItemPurchSetup.InventDimId == InventDim::inventDimIdBlank() )
        QueryBuildRange qrOverride = dsInventItemPurchSetup.addRange(fieldNum(InventItemPurchSetup,Override));
        qrOverride.value(strFmt('((%1 == %2) || (%3 == "%4") )',
                         fieldStr(InventItemPurchSetup,Override),
                         any2int(NoYes::Yes),
                         fieldStr(InventItemPurchSetup,InventDimId),
                         queryValue(InventDim::inventDimIdBlank()) ));
        qrOverride.status(RangeStatus::Locked);

        QueryBuildDataSource dsInventDimPurch = dsInventItemPurchSetup.addDataSource(tableNum(InventDim));
        dsInventDimPurch.joinMode(JoinMode::InnerJoin);
        dsInventDimPurch.addLink(fieldNum(InventItemPurchSetup,InventDimId),fieldNum(InventDim,InventDimId));

        //Union with InventItemInventSetup
        QueryBuildDataSource dsInventItemInventSetup = query.addDataSource(tableNum(InventItemInventSetup),'',UnionType::Union);
        dsInventItemInventSetup.addRange(fieldNum(InventItemInventSetup,ItemId)).value(queryValue(inventTable.ItemId));
        dsInventItemInventSetup.addRange(fieldNum(InventItemInventSetup,LeadTime)).value(SysQuery::range(1,null));

        //AND (InventItemInventSetup.Override == NoYes::Yes OR InventItemInventSetup.InventDimId == InventDim::inventDimIdBlank() )
        qrOverride = dsInventItemInventSetup.addRange(fieldNum(InventItemInventSetup,Override));
        qrOverride.value(strFmt('((%1 == %2) || (%3 == "%4") )',
                         fieldStr(InventItemPurchSetup,Override),
                         any2int(NoYes::Yes),
                         fieldStr(InventItemPurchSetup,InventDimId),
                         queryValue(InventDim::inventDimIdBlank()) ));
        qrOverride.status(RangeStatus::Locked);

        QueryBuildDataSource dsInventDimInvent = dsInventItemInventSetup.addDataSource(tableNum(InventDim));
        dsInventDimInvent.joinMode(JoinMode::InnerJoin);
        dsInventDimInvent.addLink(fieldNum(InventItemInventSetup,InventDimId),fieldNum(InventDim,InventDimId));

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            if (queryRun.getNo(1))
            {
                inventItemOrderSetupMap = queryRun.getNo(1);
                inventDim = queryRun.getNo(2);
            }
            else
            {
                inventItemOrderSetupMap = queryRun.getNo(3);
                inventDim = queryRun.getNo(4);
            }

            //Only recreate the map if warehouse is not the same as on the previous record
            if (inventDim.InventLocationId != lastInventDim.InventLocationId || !mapSuppMOD)
            {
                mapSuppMOD = this.initMapSuppMOD(inventDim.InventLocationId, inventDimReq.InventLocationId);
            }
            if (inventDim.InventDimId != lastInventDim.InventDimId)
            {
                reqSetupDimSupp = ReqSetupDim::newInventTable(inventTable,inventDim.InventDimId,inventDim);
            }

            lastInventDim = inventDim;

            this.loopMapsAndInsertStdLeadTime(_inventSupplyTmpStdLeadtime,
                                              mapSuppMOD,
                                              mapCustMOD,
                                              inventTable.ItemId,
                                              inventDim,
                                             (inventItemOrderSetupMap.setupType() == InventItemOrderSetupType::Purch ? InventSupplyTmpLeadtimeType::Purchase : InventSupplyTmpLeadtimeType::Production),
                                             (inventDim.InventDimId == InventDim::inventDimIdBlank() ? InventSupplyLeadTimeSource::InventItemOrderSetup : InventSupplyLeadTimeSource::InventItemOrderSetupDim),
                                              inventItemOrderSetupMap.LeadTime,
                                              inventItemOrderSetupMap.CalendarDays,
                                              reqSetupDimSupp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpDataStdLeadTimeReqItemTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills a temporary <c>InventSupplyTmpVendors</c> buffer with information about the standard lead
    ///    times coming from Item Coverage.
    /// </summary>
    /// <returns>
    ///    A temporary <c>InventSupplyTmpVendors</c> buffer.
    /// </returns>
    protected InventSupplyTmpStdLeadtime createTmpDataStdLeadTimeReqItemTable()
    {
        InventDim                   lastInventDim;

        Map                         mapSuppMOD;
        ReqSetupDim                 reqSetupDimSupp;

        InventSupplyTmpStdLeadtime  inventSupplyTmpStdLeadtime;

        //Create new query based on ReqItemTable
        Query query = new Query();
        QueryBuildDataSource dsReqItemTable = query.addDataSource(tableNum(ReqItemTable));
        dsReqItemTable.addRange(fieldNum(ReqItemTable,ItemId)).value(queryValue(inventTable.ItemId));

        //Only use records where (LeadTimePurchase > 0 && LeadTimePurchaseActive) or (LeadTimeProduction > 0 && LeadTimeProductionActive)
        QueryBuildRange qrDataAreaId = dsReqItemTable.addRange(fieldNum(ReqItemTable,DataAreaId));
        qrDataAreaId.value(strFmt('((%1 > 0) && (%2 == %3)) || ((%4 > 0) && (%5 == %6))',
                           fieldStr(ReqItemTable,LeadTimePurchase),
                           fieldStr(ReqItemTable,LeadTimePurchaseActive),
                           any2int(NoYes::Yes),
                           fieldStr(ReqItemTable,LeadTimeProduction),
                           fieldStr(ReqItemTable,LeadTimeProductionActive),
                           any2int(NoYes::Yes)));
        qrDataAreaId.status(RangeStatus::Locked);

        //Join with inventDim
        QueryBuildDataSource dsInventDim = dsReqItemTable.addDataSource(tableNum(InventDim));
        dsInventDim.joinMode(JoinMode::InnerJoin);
        dsInventDim.addLink(fieldNum(ReqItemTable,CovInventDimId),fieldNum(InventDim,InventDimId));

        InventDim::queryAddRangeAndValueProductDim(dsInventDim, inventDimReq, EcoResProductDimGroupSetup::newInventTable(inventTable), false);

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            ReqItemTable reqItemTable = queryRun.getNo(1);
            InventDim inventDimGrouped = queryRun.getNo(2);
            InventDim inventDim = InventDim::findOrCreate(inventDimGrouped);

            //Only recreate the map if warehouse is not the same as on the previous record
            if (inventDim.InventLocationId != lastInventDim.InventLocationId || !mapSuppMOD)
            {
                mapSuppMOD = this.initMapSuppMOD(inventDim.InventLocationId, inventDimReq.InventLocationId);
            }
            if (inventDim.InventDimId != lastInventDim.InventDimId)
            {
                reqSetupDimSupp = ReqSetupDim::newInventTable(inventTable,inventDim.InventDimId,inventDim);
            }

            lastInventDim = inventDim;

            //Generate MOD combinations for purchase lead time
            if (reqItemTable.LeadTimePurchaseActive && reqItemTable.LeadTimePurchase > 0)
            {
                this.loopMapsAndInsertStdLeadTime(inventSupplyTmpStdLeadtime,
                                                  mapSuppMOD,
                                                  mapCustMOD,
                                                  inventTable.ItemId,
                                                  inventDim,
                                                  InventSupplyTmpLeadtimeType::Purchase,
                                                  InventSupplyLeadTimeSource::ReqItemTable,
                                                  reqItemTable.LeadTimePurchase,
                                                  reqItemTable.CalendarDaysPurchase,
                                                  reqSetupDimSupp);
            }

            //Generate MOD combinations for production lead time
            if (reqItemTable.LeadTimeProductionActive && reqItemTable.LeadTimeProduction > 0)
            {
                this.loopMapsAndInsertStdLeadTime(inventSupplyTmpStdLeadtime,
                                                  mapSuppMOD,
                                                  mapCustMOD,
                                                  inventTable.ItemId,
                                                  inventDim,
                                                  InventSupplyTmpLeadtimeType::Production,
                                                  InventSupplyLeadTimeSource::ReqItemTable,
                                                  reqItemTable.LeadTimeProduction,
                                                  reqItemTable.CalendarDaysProduction,
                                                  reqSetupDimSupp);
            }
        }

        return inventSupplyTmpStdLeadtime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpDataVendors</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills a temporary <c>InventSupplyTmpVendors</c> buffer with vendor information.
    /// </summary>
    /// <returns>
    ///    A temporary record buffer with vendor information.
    /// </returns>
    public InventSupplyTmpVendors createTmpDataVendors()
    {
        InventSupplyTmpVendors      inventSupplyTmpVendors;

        // Add a primary vendor from Items form
        if (inventTable.PrimaryVendorId)
        {
            this.loopMapsAndInsertTmpVendors(inventSupplyTmpVendors,
                                             mapCustMOD,
                                             inventTable.ItemId,
                                             VendTable::find(inventTable.PrimaryVendorId),
                                             reqSetupDimReq.leadTime(ReqRefType::ItemPlannedOrder),
                                             reqSetupDimReq.leadTimeCalendarDays(ReqRefType::ItemPlannedOrder));
        }

        ItemPrimaryVendId primaryVendId = reqSetupDimReq.primaryVendId();

        // Add a primary vendor used by master scheduling
        if (primaryVendId && primaryVendId != inventTable.PrimaryVendorId)
        {
            this.loopMapsAndInsertTmpVendors(inventSupplyTmpVendors,
                                             mapCustMOD,
                                             inventTable.ItemId,
                                             VendTable::find(primaryVendId),
                                             reqSetupDimReq.leadTime(ReqRefType::ItemPlannedOrder),
                                             reqSetupDimReq.leadTimeCalendarDays(ReqRefType::ItemPlannedOrder));
        }

        //Loop vendors from trade agreements
        Query query = new Query();

        QueryBuildDataSource dsVendTable = query.addDataSource(tableNum(VendTable));

        QueryBuildDataSource dsPriceDiscTable = dsVendTable.addDataSource(tableNum(PriceDiscTable));
        dsPriceDiscTable.joinMode(JoinMode::InnerJoin);
        dsPriceDiscTable.addLink(fieldNum(VendTable,AccountNum),fieldNum(PriceDiscTable,AccountRelation));
        dsPriceDiscTable.addLink(fieldNum(VendTable,Currency),fieldNum(PriceDiscTable,Currency));

        dsPriceDiscTable.addRange(fieldNum(PriceDiscTable,Relation)).value(queryValue(PriceType::PricePurch));
        dsPriceDiscTable.addRange(fieldNum(PriceDiscTable,ItemCode)).value(queryValue(PriceDiscProductCodeType::Table));
        dsPriceDiscTable.addRange(fieldNum(PriceDiscTable,ItemRelation)).value(queryValue(inventTable.ItemId));
        dsPriceDiscTable.addRange(fieldNum(PriceDiscTable,AccountCode)).value(queryValue(PriceDiscPartyCodeType::Table));
        dsPriceDiscTable.addRange(fieldNum(PriceDiscTable,UnitId)).value(queryValue(inventTable.purchUnitId()));

        if (this.parmQty()) // we only filter on quantity if it is not 0
        {
            dsPriceDiscTable.addRange(fieldNum(PriceDiscTable,QuantityAmountFrom)).value(SysQuery::range(null,queryValue(this.parmQty())));
        }

        //Get the InventDim if it conforms to the filter
        QueryBuildDataSource dsInventDim = dsPriceDiscTable.addDataSource(tableNum(InventDim));
        dsInventDim.joinMode(JoinMode::OuterJoin);
        dsInventDim.addLink(fieldNum(PriceDiscTable,InventDimId),fieldNum(InventDim,InventDimId));

        InventDim::queryAddRangeAndValueProductDim(dsInventDim, inventDimReq, EcoResProductDimGroupSetup::newInventTable(inventTable), false);

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            VendTable vendTable = queryRun.getNo(1);
            PriceDiscTable priceDiscTable = queryRun.getNo(2);
            InventDim inventDim = queryRun.getNo(3);

            //No inventDim record means that it do not fall within the filter
            //but PriceDiscTable records with "blank" inventDimId is also allowed
            if (inventDim || priceDiscTable.InventDimId == InventDim::inventDimIdBlank())
            {
                this.loopMapsAndInsertTmpVendors(inventSupplyTmpVendors,
                                                 mapCustMOD,
                                                 inventTable.ItemId,
                                                 vendTable,
                                                 priceDiscTable.DeliveryTime,
                                                 priceDiscTable.CalendarDays);
            }
        }

        return inventSupplyTmpVendors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>reqSetupDimReq</c> and <c>mapCustMOD</c> class variables.
    /// </summary>
    protected void init()
    {
        reqSetupDimReq      = ReqSetupDim::newInventTable(inventTable,inventDimReq.InventDimId,inventDimReq);
        workCalendarSched   = new WorkCalendarSched(true);

        //Initialize map and get MOD/transportdays from Requirement warehouse to customer
        this.initMapCustMOD();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapCustMOD</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class variable <c>mapCustMOD</c> with the mode of delivery and transport days
    ///    between the requirement warehouse and the customer.
    /// </summary>
    protected void initMapCustMOD()
    {
        CustVendTransportTime       transportTime;

        mapCustMOD = new Map(Types::String,Types::Integer);

        if (!inventDimReq.InventLocationId)
        {
            //Blank requirement warehouse (dimension not active) means all transport times should be zero
            mapCustMOD.insert('',0);
        }
        else if (dlvModeSelectCust == InventSupplyDlvModeSelectCust::ReqDlvMode)
        {
            //Get from requirement MOD
            mapCustMOD.insert(dlvModeReq,CustVendTransportPointLine::defaultTransportDays(dlvModeReq,
                                                                                                 inventDimReq.InventLocationId,
                                                                                                 custAddressMap.CountryRegionId,
                                                                                                 custAddressMap.State,
                                                                                                 custAddressMap.County,
                                                                                                 custAddressMap.ZipCode));
        }
        else
        {
            //Get transport point/line for address and use this to fetch default or all MODs, depending on the settings
            CustVendTransportPointLine transportPointLine = CustVendTransportPointLine::findDefaultValue(inventDimReq.InventLocationId,
                                                                                             custAddressMap.CountryRegionId,
                                                                                             custAddressMap.State,
                                                                                             custAddressMap.County,
                                                                                             custAddressMap.ZipCode);

            while select DlvMode, TransportDays from transportTime
                where  transportTime.TransportPointLineRecId == transportPointLine.RecId &&
                      (transportTime.DefaultDlvMode == NoYes::Yes || dlvModeSelectCust == InventSupplyDlvModeSelectCust::AllDlvMode)
            {
                mapCustMOD.insert(transportTime.DlvMode,transportTime.TransportDays);
            }

            if (mapCustMOD.empty())
            {
                mapCustMOD.insert('',transportPointLine.TransportDays);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapSuppMOD</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a map of the mode of delivery and transport days between the supply warehouse and the
    ///    requirement warehouse.
    /// </summary>
    /// <param name="_fromInventLocationId">
    ///    The ID of the supply warehouse.
    /// </param>
    /// <param name="_toInventLocationId">
    ///    The ID of the requirement warehouse.
    /// </param>
    /// <returns>
    ///    A map containing the valid modes of delivery in the format: key=MOD, value=transport days.
    /// </returns>
    protected Map initMapSuppMOD(InventLocationId                   _fromInventLocationId,
                                 InventLocationId                   _toInventLocationId)
    {
        CustVendTransportTime       transportTime;
        Map                         mapSuppMOD = new Map(Types::String,Types::Integer);

        if (!_toInventLocationId)
        {
            if (!onlyTransportRel)
            {
                //Blank requirement warehouse (dimension not active) means all transport times should be zero
                mapSuppMOD.insert('',0);
            }
        }
        else
        {
            //Get MOD/transportdays from Supply warehouse to Requirement warehouse
            CustVendTransportPointLine transportPointLine = CustVendTransportPointLine::findDefaultValue(_fromInventLocationId,'','','','',_toInventLocationId);
            if (transportPointLine)
            {
                while select DlvMode, TransportDays from transportTime
                where  transportTime.TransportPointLineRecId == transportPointLine.RecId &&
                      (transportTime.DefaultDlvMode == NoYes::Yes || dlvModeSelectSupp == InventSupplyDlvModeSelectSupply::AllDlvMode)
                {
                    mapSuppMOD.insert(transportTime.DlvMode,transportTime.TransportDays);
                }

                if (mapSuppMOD.empty())
                {
                    mapSuppMOD.insert('',transportPointLine.TransportDays);
                }
            }
            else
            {
                if (!onlyTransportRel)
                {
                    mapSuppMOD.insert('',0);
                }
            }
        }

        return mapSuppMOD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitInventDimToStandardInventLoc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a relation of type NoExistsJoin to an InventDim data source, so that InventDim records with a
    ///    warehouse type not equal to Standard are not included.
    /// </summary>
    /// <param name="_dsInventDim">
    ///    The data source to manipulate.
    /// </param>
    protected void limitInventDimToStandardInventLoc(QueryBuildDataSource _dsInventDim)
    {
        QueryBuildDataSource dsInventLocation = _dsInventDim.addDataSource(tableNum(InventLocation));
        dsInventLocation.joinMode(JoinMode::NoExistsJoin);
        dsInventLocation.addLink(fieldNum(InventDim,InventLocationId),fieldNum(InventLocation,InventLocationId),_dsInventDim.name());
        dsInventLocation.addRange(fieldNum(InventLocation,InventLocationType)).value(SysQuery::valueNot(any2int(InventLocationType::Standard)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopMapsAndInsertOnhand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loops through the two specified maps to insert temporary records in the
    ///    <c>InventSupplyTmpOnhand</c> table for all MOD combinations.
    /// </summary>
    /// <param name="_tmpBuffer">
    ///    The temporary <c>InventSupplyTmpOnHand</c> buffer the information about the on-hand information
    ///    should be added to.
    /// </param>
    /// <param name="_mapSuppMOD">
    ///    A map that contains modes of delivery and the transport times for supply warehouse to requirement
    ///    warehouse.
    /// </param>
    /// <param name="_mapCustMOD">
    ///    A map that contains modes of delivery and the transport times from requirement warehouse to
    ///    customer address.
    /// </param>
    /// <param name="_itemId">
    ///    The ID of the item to be inserted.
    /// </param>
    /// <param name="_inventDimSupply">
    ///    The ID of the dimension for supply warehouse.
    /// </param>
    /// <param name="_physicalInvent">
    ///    The number of items on physical inventory.
    /// </param>
    /// <param name="_reservPhysical">
    ///    The number of items physically reserved.
    /// </param>
    /// <param name="_availPhysical">
    ///    The number of items physically available.
    /// </param>
    /// <param name="_cwPhysicalInvent">
    ///    The number of items catch weight physical inventory.
    /// </param>
    /// <param name="_cwReservPhysical">
    ///    The number of items catch weight physically reserved.
    /// </param>
    /// <param name="_cwAvailPhysical">
    ///    The number of items catch weight physically available.
    /// </param>
    /// <param name="_shipDateSupply">
    ///    The ship date from supply warehouse.
    /// </param>
    protected void loopMapsAndInsertOnhand(InventSupplyTmpOnhand  _tmpBuffer,
                                         Map                     _mapSuppMOD,
                                         Map                     _mapCustMOD,
                                         ItemId                  _itemId,
                                         InventDim               _inventDimSupply,
                                         InventQtyPhysicalOnhand _physicalInvent,
                                         InventQtyReservPhysical _reservPhysical,
                                         InventQtyAvailPhysical  _availPhysical,
                                         PdsCWInventQtyOnHand    _cwPhysicalInvent,
                                         PdsCWReservPhysical     _cwReservPhysical,
                                         PdsCWAvailPhysical      _cwAvailPhysical,
                                         TransDate               _shipDateSupply)
    {
        InventSupplyTmpOnhand       inventSupplyTmpOnhand;

        inventSupplyTmpOnhand.setTmpData(_tmpBuffer);

        //Loop through both maps and generate MOD combinations
        MapEnumerator enumeratorSuppMOD = _mapSuppMOD.getEnumerator();
        while (enumeratorSuppMOD.moveNext())
        {
            MapEnumerator enumeratorCustMOD = _mapCustMOD.getEnumerator();
            while (enumeratorCustMOD.moveNext())
            {
                inventSupplyTmpOnhand.clear();
                inventSupplyTmpOnhand.ItemId = _itemId;
                inventSupplyTmpOnhand.InventDimId = _inventDimSupply.InventDimId;
                inventSupplyTmpOnhand.PhysicalInvent = _physicalInvent;
                inventSupplyTmpOnhand.ReservPhysical = _reservPhysical;
                inventSupplyTmpOnhand.AvailPhysical = _availPhysical;
                inventSupplyTmpOnhand.PdsCWPhysicalInvent = _cwPhysicalInvent;
                inventSupplyTmpOnhand.PdsCWReservPhysical = _cwReservPhysical;
                inventSupplyTmpOnhand.PdsCWAvailPhysical  = _cwAvailPhysical;

                inventSupplyTmpOnhand.DlvModeSupply = enumeratorSuppMOD.currentKey();
                inventSupplyTmpOnhand.ShipDateSupply = this.pickupDate(_shipDateSupply,
                                                                       _inventDimSupply.InventLocationId,
                                                                       inventSupplyTmpOnhand.DlvModeSupply);
                inventSupplyTmpOnhand.TransportTimeSupply = enumeratorSuppMOD.currentValue();

                inventSupplyTmpOnhand.DlvModeCust = enumeratorCustMOD.currentKey();
                inventSupplyTmpOnhand.ShipDateCust = this.shipDateCust(inventSupplyTmpOnhand.ShipDateSupply,
                                                                      _inventDimSupply.InventLocationId,
                                                                      inventSupplyTmpOnhand.DlvModeSupply,
                                                                      inventSupplyTmpOnhand.TransportTimeSupply,
                                                                      inventSupplyTmpOnhand.DlvModeCust);
                inventSupplyTmpOnhand.TransportTimeCust = enumeratorCustMOD.currentValue();
                inventSupplyTmpOnhand.ReceiptDateCust = this.receiptDateCust(inventSupplyTmpOnhand.ShipDateCust,
                                                                             inventSupplyTmpOnhand.DlvModeCust,
                                                                             inventSupplyTmpOnhand.TransportTimeCust);

                inventSupplyTmpOnhand.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopMapsAndInsertOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loops through the two specified maps to insert temporary records in the
    /// <c>InventSupplyTmpOrders</c> table for all MOD combinations.
    /// </summary>
    /// <param name="_tmpBuffer">
    /// The temporary <c>InventSupplyTmpOnHand</c> buffer to which the information about the orders should
    /// be added.
    /// </param>
    /// <param name="_mapSuppMOD">
    /// A map that contains the modes of delivery and the transport times for supply warehouse to
    /// requirement warehouse.
    /// </param>
    /// <param name="_mapCustMOD">
    /// A map that contains the modes of delivery and the transport times from requirement warehouse to
    /// customer address.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item to be inserted.
    /// </param>
    /// <param name="_inventDimSupply">
    /// The ID of the dimension for the supply warehouse.
    /// </param>
    /// <param name="_orderedSum">
    /// The number of items ordered in total.
    /// </param>
    /// <param name="_reservOrdered">
    /// The number of items ordered reserved.
    /// </param>
    /// <param name="_cwOrderedSum">
    /// The number of items catch weight ordered in total.
    /// </param>
    /// <param name="_cwReservOrdered">
    /// The number of items catch weight ordered reserved.
    /// </param>
    /// <param name="_deliveryDate">
    /// The delivery date of the incoming order.
    /// </param>
    /// <param name="_isPlannedOrder">
    /// A Boolean value that indicates whether the order is a planned order.
    /// </param>
    /// <param name="_reqSetupDimSupp">
    /// A <c>ReqSetupDim</c> object that contains margins for the supply warehouse.
    /// </param>
    protected void loopMapsAndInsertOrders(InventSupplyTmpOrders  _tmpBuffer,
                                     Map                    _mapSuppMOD,
                                     Map                    _mapCustMOD,
                                     ItemId                  _itemId,
                                     InventDim               _inventDimSupply,
                                     inventQtyOrderedSum     _orderedSum,
                                     InventQtyReservOrdered  _reservOrdered,
                                     PdsCWInventQtyOrderedSum _cwOrderedSum,
                                     PdsCWReservOrdered       _cwReservOrdered,
                                     TransDate               _deliveryDate,
                                     boolean                 _isPlannedOrder,
                                     ReqSetupDim             _reqSetupDimSupp)
    {
        InventSupplyTmpOrders       inventSupplyTmpOrders;

        inventSupplyTmpOrders.setTmpData(_tmpBuffer);

        //Loop through both MOD maps and generate record combinations
        MapEnumerator enumeratorSuppMOD = _mapSuppMOD.getEnumerator();
        while (enumeratorSuppMOD.moveNext())
        {
            MapEnumerator enumeratorCustMOD = _mapCustMOD.getEnumerator();
            while (enumeratorCustMOD.moveNext())
            {
                inventSupplyTmpOrders.clear();
                inventSupplyTmpOrders.ItemId = _itemId;
                inventSupplyTmpOrders.InventDimId = _inventDimSupply.InventDimId;
                inventSupplyTmpOrders.DeliveryDate = _deliveryDate;
                inventSupplyTmpOrders.IsPlannedOrder = _isPlannedOrder;

                inventSupplyTmpOrders.OrderedSum = _orderedSum;
                inventSupplyTmpOrders.ReservOrdered = _reservOrdered;
                inventSupplyTmpOrders.AvailOrdered = inventSupplyTmpOrders.OrderedSum - inventSupplyTmpOrders.ReservOrdered;

                inventSupplyTmpOrders.PdsCWOrderedSum = _cwOrderedSum;
                inventSupplyTmpOrders.PdsCWReservOrdered = _cwReservOrdered;
                inventSupplyTmpOrders.PdsCWAvailOrdered= inventSupplyTmpOrders.PdsCWOrderedSum - inventSupplyTmpOrders.PdsCWReservOrdered;

                inventSupplyTmpOrders.DlvModeSupply = enumeratorSuppMOD.currentKey();
                inventSupplyTmpOrders.ShipDateSupply = inventSupplyTmpOrders.DeliveryDate;
                if (_inventDimSupply.InventLocationId && _inventDimSupply.InventLocationId != inventDimReq.InventLocationId)
                {
                    inventSupplyTmpOrders.ShipDateSupply += _reqSetupDimSupp.marginIssue();
                }
                inventSupplyTmpOrders.ShipDateSupply = this.pickupDate(inventSupplyTmpOrders.ShipDateSupply,
                                                                       _inventDimSupply.InventLocationId,
                                                                       inventSupplyTmpOrders.DlvModeSupply);
                inventSupplyTmpOrders.TransportTimeSupply = enumeratorSuppMOD.currentValue();

                inventSupplyTmpOrders.DlvModeCust = enumeratorCustMOD.currentKey();
                inventSupplyTmpOrders.ShipDateCust = this.shipDateCust(inventSupplyTmpOrders.ShipDateSupply,
                                                                      _inventDimSupply.InventLocationId,
                                                                      inventSupplyTmpOrders.DlvModeSupply,
                                                                      inventSupplyTmpOrders.TransportTimeSupply,
                                                                      inventSupplyTmpOrders.DlvModeCust);
                inventSupplyTmpOrders.TransportTimeCust = enumeratorCustMOD.currentValue();
                inventSupplyTmpOrders.ReceiptDateCust = this.receiptDateCust(inventSupplyTmpOrders.ShipDateCust,
                                                                             inventSupplyTmpOrders.DlvModeCust,
                                                                             inventSupplyTmpOrders.TransportTimeCust);

                inventSupplyTmpOrders.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopMapsAndInsertStdLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loops through the map that contains mode of delivery and transport times and inserts records into
    ///    the temporary <c>InventSupplyTmpStdLeadTime</c> table buffer.
    /// </summary>
    /// <param name="_tmpBuffer">
    ///    The temporary <c>InventSupplyTmpStdLeadTime</c> buffer into which to insert data.
    /// </param>
    /// <param name="_mapSuppMOD">
    ///    A map that contains modes of delivery and the transport times.
    /// </param>
    /// <param name="_mapCustMOD">
    ///    A map that contains modes of delivery and the transport times.
    /// </param>
    /// <param name="_itemId">
    ///    The ID of the item.
    /// </param>
    /// <param name="_inventDimSupply">
    ///    The ID of the dimension for supply warehouse.
    /// </param>
    /// <param name="_leadTimeType">
    ///    The type of lead time (purchase,production).
    /// </param>
    /// <param name="_leadTimeSource">
    ///    The origin of the lead time.
    /// </param>
    /// <param name="_leadTime">
    ///    The lead time in days.
    /// </param>
    /// <param name="_calendarDays">
    ///    A Boolean value that specifies whether the lead time is expressed in calendar days.
    /// </param>
    /// <param name="_reqSetupDimSupp">
    ///    A <c>ReqSetupDim</c> object that contains margins for the supply warehouse.
    /// </param>
    protected void loopMapsAndInsertStdLeadTime(InventSupplyTmpStdLeadtime  _tmpBuffer,
                                             Map                            _mapSuppMOD,
                                             Map                            _mapCustMOD,
                                             ItemId                         _itemId,
                                             InventDim                      _inventDimSupply,
                                             InventSupplyTmpLeadtimeType    _leadTimeType,
                                             InventSupplyLeadTimeSource     _leadTimeSource,
                                             LeadTime                       _leadTime,
                                             CalendarDays                   _calendarDays,
                                             ReqSetupDim                    _reqSetupDimSupp)
    {
        InventSupplyTmpStdLeadtime  inventSupplyTmpStdLeadtime;

        TransDate availDate = workCalendarSched.schedDate(SchedDirection::Forward,
                                                          InventOrderEntryDeadlineTable::effectiveOrderDate(_inventDimSupply.InventSiteId,''),
                                                          _leadTime,
                                                          _calendarDays,
                                                          _reqSetupDimSupp.reqCalendarId());

        inventSupplyTmpStdLeadtime.setTmpData(_tmpBuffer);

        //Loop through both MOD maps and generate record combinations
        MapEnumerator enumeratorSuppMOD = _mapSuppMOD.getEnumerator();
        while (enumeratorSuppMOD.moveNext())
        {
            MapEnumerator enumeratorCustMOD = _mapCustMOD.getEnumerator();
            while (enumeratorCustMOD.moveNext())
            {
                inventSupplyTmpStdLeadtime.clear();
                inventSupplyTmpStdLeadtime.setTmpData(_tmpBuffer);

                inventSupplyTmpStdLeadtime.ItemId = _itemId;
                inventSupplyTmpStdLeadtime.InventDimId = _inventDimSupply.InventDimId;
                inventSupplyTmpStdLeadtime.LeadtimeType = _leadTimeType;
                inventSupplyTmpStdLeadtime.LeadTimeSource = _leadTimeSource;
                inventSupplyTmpStdLeadtime.LeadTime = _leadTime;
                inventSupplyTmpStdLeadtime.AvailDate = availDate;

                inventSupplyTmpStdLeadtime.DlvModeSupply = enumeratorSuppMOD.currentKey();
                inventSupplyTmpStdLeadtime.ShipDateSupply = inventSupplyTmpStdLeadtime.AvailDate;
                if (_inventDimSupply.InventLocationId)
                {
                    inventSupplyTmpStdLeadtime.ShipDateSupply += _reqSetupDimSupp.marginIssue();
                }
                inventSupplyTmpStdLeadtime.ShipDateSupply = this.pickupDate(inventSupplyTmpStdLeadtime.ShipDateSupply,
                                                                            _inventDimSupply.InventLocationId,
                                                                            inventSupplyTmpStdLeadtime.DlvModeSupply);
                inventSupplyTmpStdLeadtime.TransportTimeSupply = enumeratorSuppMOD.currentValue();

                inventSupplyTmpStdLeadtime.DlvModeCust = enumeratorCustMOD.currentKey();
                inventSupplyTmpStdLeadtime.ShipDateCust = this.shipDateCust(inventSupplyTmpStdLeadtime.ShipDateSupply,
                                                                           _inventDimSupply.InventLocationId,
                                                                           inventSupplyTmpStdLeadtime.DlvModeSupply,
                                                                           inventSupplyTmpStdLeadtime.TransportTimeSupply,
                                                                           inventSupplyTmpStdLeadtime.DlvModeCust);

                inventSupplyTmpStdLeadtime.TransportTimeCust = enumeratorCustMOD.currentValue();
                inventSupplyTmpStdLeadtime.ReceiptDateCust = this.receiptDateCust(inventSupplyTmpStdLeadtime.ShipDateCust,
                                                                                  inventSupplyTmpStdLeadtime.DlvModeCust,
                                                                                  inventSupplyTmpStdLeadtime.TransportTimeCust);

                inventSupplyTmpStdLeadtime.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopMapsAndInsertTmpVendors</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loops through the map containing mode of delivery and transport times and inserts records into the
    ///    temporary <c>InventSupplyTmpVendors</c> table buffer.
    /// </summary>
    /// <param name="_tmpBuffer">
    ///    The temporary <c>InventSupplyTmpVendors</c> buffer to insert data into.
    /// </param>
    /// <param name="_mapCustMOD">
    ///    A map containing the mode of delivery and the transport times.
    /// </param>
    /// <param name="_itemId">
    ///    The ID of the item to insert.
    /// </param>
    /// <param name="_vendTable">
    ///    A <c>VendTable</c> table for the vendor to insert.
    /// </param>
    /// <param name="_vendLeadTime">
    ///    The lead time in days.
    /// </param>
    /// <param name="_vendCalendarDays">
    ///    A Boolean value that specifies whether the lead time is expressed in calendar days.
    /// </param>
    protected void loopMapsAndInsertTmpVendors(InventSupplyTmpVendors  _tmpBuffer,
                                            Map                    _mapCustMOD,
                                            ItemId                  _itemId,
                                            VendTable               _vendTable,
                                            LeadTime                _vendLeadTime,
                                            CalendarDays            _vendCalendarDays)
    {
        InventSupplyTmpVendors      inventSupplyTmpVendors;

        inventSupplyTmpVendors.setTmpData(_tmpBuffer);

        //Calculate earliest possible shipping date from warehouse to customer based on margins and leadtime
        TransDate shipDateCust = InventOrderEntryDeadlineTable::effectiveOrderDate(reqSetupDimReq.inventDim().InventSiteId,'') + reqSetupDimReq.marginOrder();
        shipDateCust           = workCalendarSched.schedDate(SchedDirection::Forward, shipDateCust, _vendLeadTime, _vendCalendarDays,reqSetupDimReq.purchCalendarId(_vendTable.AccountNum));
        shipDateCust           = shipDateCust + reqSetupDimReq.marginReceipt() + reqSetupDimReq.marginIssue();
        if (inventDimReq.InventLocationId)
            shipDateCust = InventLocation::find(inventDimReq.InventLocationId).findOpenDateForward(shipDateCust);

        //Loop through map and generate record combinations
        MapEnumerator enumeratorCustMOD = _mapCustMOD.getEnumerator();
        while (enumeratorCustMOD.moveNext())
        {
            inventSupplyTmpVendors.clear();
            inventSupplyTmpVendors.ItemId = _itemId;
            inventSupplyTmpVendors.AccountNum = _vendTable.AccountNum;
            inventSupplyTmpVendors.LeadTime = _vendLeadTime;

            inventSupplyTmpVendors.DlvModeCust = enumeratorCustMOD.currentKey();
            inventSupplyTmpVendors.ShipDateCust = this.pickupDate(shipDateCust,
                                                                  inventDimReq.InventLocationId,
                                                                  inventSupplyTmpVendors.DlvModeCust);
            inventSupplyTmpVendors.TransportTimeCust = enumeratorCustMOD.currentValue();
            inventSupplyTmpVendors.ReceiptDateCust = this.receiptDateCust(inventSupplyTmpVendors.ShipDateCust,
                                                                          inventSupplyTmpVendors.DlvModeCust,
                                                                          inventSupplyTmpVendors.TransportTimeCust);

            inventSupplyTmpVendors.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.checkAccessRights();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAddressMap</Name>
				<Source><![CDATA[
    public LogisticsPostalAddressMap parmCustAddressMap(LogisticsPostalAddressMap _custAddressMap = custAddressMap)
    {
        if (!prmisDefault(_custAddressMap))
        {
            custAddressMap = _custAddressMap;
        }
        return custAddressMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustCalendarId</Name>
				<Source><![CDATA[
    public CalendarId parmCustCalendarId(CalendarId _custCalendarId = custCalendarId)
    {
        if (!prmisDefault(_custCalendarId))
        {
            custCalendarId = _custCalendarId;
        }
        return custCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDlvModeReq</Name>
				<Source><![CDATA[
    public DlvModeId parmDlvModeReq(DlvModeId _dlvModeReq = dlvModeReq)
    {
        if (!prmisDefault(_dlvModeReq))
        {
            dlvModeReq = _dlvModeReq;
        }
        return dlvModeReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDlvModeSelectCust</Name>
				<Source><![CDATA[
    public InventSupplyDlvModeSelectCust parmDlvModeSelectCust(InventSupplyDlvModeSelectCust _dlvModeSelectCust = dlvModeSelectCust)
    {
        if (!prmisDefault(_dlvModeSelectCust))
        {
            dlvModeSelectCust = _dlvModeSelectCust;
        }
        return dlvModeSelectCust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDlvModeSelectSupp</Name>
				<Source><![CDATA[
    public InventSupplyDlvModeSelectSupply parmDlvModeSelectSupp(InventSupplyDlvModeSelectSupply _dlvModeSelectSupp = dlvModeSelectSupp)
    {
        if (!prmisDefault(_dlvModeSelectSupp))
        {
            dlvModeSelectSupp = _dlvModeSelectSupp;
        }
        return dlvModeSelectSupp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimReq</Name>
				<Source><![CDATA[
    public InventDim parmInventDimReq(InventDim _inventDimReq = inventDimReq)
    {
        if (!prmisDefault(_inventDimReq))
        {
            inventDimReq = _inventDimReq;
        }
        return inventDimReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        if (!prmisDefault(_inventTable))
        {
            inventTable = _inventTable;
            isWHSItem   = WHSInventEnabled::exist(_inventTable.ItemId);
        }
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyTransportRel</Name>
				<Source><![CDATA[
    public boolean parmOnlyTransportRel(boolean _onlyTransportRel = onlyTransportRel)
    {
        if (!prmisDefault(_onlyTransportRel))
        {
            onlyTransportRel = _onlyTransportRel;
        }
        return onlyTransportRel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public InventQty parmQty(InventQty _qty = qty)
    {
        if (!prmisDefault(_qty))
        {
            qty = _qty;
        }
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickupDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the date for which the items can be picked up based on the calendar for the transport.
    /// </summary>
    /// <param name="_shipDate">
    ///    The base date for the calculation.
    /// </param>
    /// <param name="_fromLocationId">
    ///    The ID for the warehouse from which the items are going to be shipped.
    /// </param>
    /// <param name="_dlvMode">
    ///    The mode of delivery from the warehouse.
    /// </param>
    /// <returns>
    ///    The date for which the items can be picked up for transportation.
    /// </returns>
    protected TransDate pickupDate(TransDate        _shipDate,
                                   InventLocationId _fromLocationId,
                                   DlvModeId        _dlvMode)
    {
        TransDate   pickupDate = _shipDate;

        CalendarId calendarIdTransport = CustVendTransportCalendarSetup::find(_dlvMode,_fromLocationId).Calendar;
        if (calendarIdTransport)
        {
            pickupDate = workCalendarSched.schedDate(SchedDirection::Forward,
                                                     _shipDate,
                                                     0,
                                                     true,
                                                     calendarIdTransport,
                                                     '',
                                                     SalesCheckForPickup::PrimaryCalendar);
        }

        return pickupDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptDateCust</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the receipt date of the customer based on the shipping date, the transport time, and the
    ///    customer calendar.
    /// </summary>
    /// <param name="_shipDateReq">
    ///    The date of shipping (pick up) from the requirement warehouse.
    /// </param>
    /// <param name="_dlvModeReqToCust">
    ///    The mode of delivery that is used to transport the items to the customer.
    /// </param>
    /// <param name="_transportTimeReqToCust">
    ///    The number of days used for transport.
    /// </param>
    /// <returns>
    ///    The date the items can be received by the customer.
    /// </returns>
    protected TransDate receiptDateCust(TransDate                       _shipDateReq,
                                        DlvModeId                       _dlvModeReqToCust,
                                        InventSupplyTransportTimeSupply _transportTimeReqToCust
                                        )
    {
        //Receipt date = ship date + transport time in working days
        //Make sure not to hit a date where the receiving customer is closed (happens through the use of the secondary calendar)
        return workCalendarSched.schedDate(SchedDirection::Forward,
                                           _shipDateReq,
                                           _transportTimeReqToCust,
                                           true,
                                           CustVendTransportCalendarSetup::find(_dlvModeReqToCust,inventDimReq.InventLocationId).Calendar,
                                           custCalendarId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipDateCust</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the date that the items can be shipped from the requirement warehouse to the customer.
    /// </summary>
    /// <param name="_shipDateSupply">
    ///    The date when the items are shipped from the supply warehouse.
    /// </param>
    /// <param name="_locationIdSupply">
    ///    The ID of the supply warehouse.
    /// </param>
    /// <param name="_dlvModeSupplyToReq">
    ///    The mode of delivery from the supply warehouse to the requirement warehouse.
    /// </param>
    /// <param name="_transportTimeSupplyToReq">
    ///    The time in days that it takes to transport the items from the supply warehouse to the requirement
    ///    warehouse.
    /// </param>
    /// <param name="_dlvModeReqToCust">
    ///    The mode of delivery from the requirement warehouse to the customer.
    /// </param>
    /// <returns>
    ///    The date that the items can be shipped from the requirement warehouse to the customer.
    /// </returns>
    protected TransDate shipDateCust(TransDate                      _shipDateSupply,
                                    InventLocationId                _locationIdSupply,
                                    DlvModeId                       _dlvModeSupplyToReq,
                                    InventSupplyTransportTimeSupply _transportTimeSupplyToReq,
                                    DlvModeId                       _dlvModeReqToCust
                                    )
    {
        TransDate   shipDateReq = _shipDateSupply;

        if (_locationIdSupply && _locationIdSupply != inventDimReq.InventLocationId)
        {
            //Receipt date = ship date + transport time in working days
            //Make sure not to hit a date where the receiving warehouse is closed (happens through the use of the secondary calendar)
            shipDateReq = workCalendarSched.schedDate(SchedDirection::Forward,
                                                      _shipDateSupply,
                                                      _transportTimeSupplyToReq,
                                                      true,
                                                      CustVendTransportCalendarSetup::find(_dlvModeSupplyToReq,_locationIdSupply).Calendar,
                                                      reqSetupDimReq.reqCalendarId());

            //Add receipt and issue margin
            shipDateReq += reqSetupDimReq.marginReceipt();
        }

        shipDateReq += reqSetupDimReq.marginIssue();

        //Take into account when then items can be picked up by the transporter
        shipDateReq = this.pickupDate(shipDateReq,inventDimReq.InventLocationId,_dlvModeReqToCust);

        return shipDateReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventSupply construct()
    {
        return new InventSupply();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventSupply</c> class.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> record that is used for the <c>parmInventTable</c> method.
    /// </param>
    /// <param name="_qty">
    ///    The quantity used for the <c>parmQty</c> method.
    /// </param>
    /// <param name="_custAddressMap">
    ///    The <c>AddressMap</c> map used for the <c>parmCustAddressMap</c> method.
    /// </param>
    /// <param name="_inventDimReq">
    ///    The requirements for item dimensions (to be used for filtering) and the warehouse.
    /// </param>
    /// <param name="_dlvModeSelectSupp">
    ///    An <c>InventSupplyDlvModeSelectSupply</c> enumeration value for selecting how the mode of delivery
    ///    from supply to requirement warehouse should be displayed.
    /// </param>
    /// <param name="_dlvModeSelectCust">
    ///    An <c>InventSupplyDlvModeSelectCust</c> enumeration value for selecting how Mode of delivery from
    ///    requirement warehouse to customer should be displayed.
    /// </param>
    /// <param name="_onlyTransportRel">
    ///    A Boolean value that specifies whether lines should only be shown in the form if they have a
    ///    transport relation from the supply warehouse to the requirement warehouse.
    /// </param>
    /// <param name="_dlvModeReq">
    ///    The mode of delivery required from the requirement warehouse to the customer.
    /// </param>
    /// <param name="_custCalendarId">
    ///    The calendar ID for the customer.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventSupply</c> class.
    /// </returns>
    public static InventSupply newFromForm( InventTable                      _inventTable,
                                            InventQty                        _qty,
                                            LogisticsPostalAddressMap       _custAddressMap,
                                            InventDim                        _inventDimReq,
                                            InventSupplyDlvModeSelectSupply  _dlvModeSelectSupp,
                                            InventSupplyDlvModeSelectCust    _dlvModeSelectCust,
                                            boolean                          _onlyTransportRel,
                                            DlvModeId                        _dlvModeReq,
                                            CalendarId                       _custCalendarId)
    {
        InventSupply inventSupply = InventSupply::construct();

        inventSupply.parmInventTable(_inventTable);
        inventSupply.parmQty(_qty);
        inventSupply.parmCustAddressMap(_custAddressMap);
        inventSupply.parmCustCalendarId(_custCalendarId);
        inventSupply.parmInventDimReq(_inventDimReq);
        inventSupply.parmDlvModeSelectSupp(_dlvModeSelectSupp);
        inventSupply.parmDlvModeSelectCust(_dlvModeSelectCust);
        inventSupply.parmOnlyTransportRel(_onlyTransportRel);
        inventSupply.parmDlvModeReq(_dlvModeReq);

        inventSupply.init();

        return inventSupply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the master plan version which contains planned orders that will be included in the supply overview.
    /// </summary>
    /// <returns>An ID of a master plan.</returns>
    /// <remarks>Dynamic master plan is used by default. If it is not specified then the static master plan should be used.</remarks>
    public static ReqPlanVersion planVersion()
    {
        ReqParameters reqParameters = ReqParameters::find();
        ReqPlanId reqPlanId = reqParameters.CurrentReqPlanIdSchedDynamic ? reqParameters.CurrentReqPlanIdSchedDynamic : reqParameters.CurrentReqPlanIdSchedStatic;
        return ReqPlan::findReqPlanId(reqPlanId).findActiveVersion();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
