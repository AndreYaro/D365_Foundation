<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsCustomLabelsMetadataCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final static class WhsCustomLabelsMetadataCache
{
    private static const int GlobalCacheEntry_CustomLabelLayoutDataSourcesForTableName = 1;
    private static const int GlobalCacheEntry_CustomLabelLayoutDataSourcesForDataAreaAndTableName = 2;
    
    private static boolean IsWhsCustomLabelsMetadataCacheDataAreaIdFlightEnabled = WhsCustomLabelsMetadataCacheDataAreaIdFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getKeyForTableName</Name>
				<Source><![CDATA[
    private static container getKeyForTableName(TableName _tableName)
    {
        return IsWhsCustomLabelsMetadataCacheDataAreaIdFlightEnabled ?
            [GlobalCacheEntry_CustomLabelLayoutDataSourcesForDataAreaAndTableName, curExt(), _tableName] : 
            [GlobalCacheEntry_CustomLabelLayoutDataSourcesForTableName, _tableName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomLabelLayoutDataSourcesForTableName</Name>
				<Source><![CDATA[
    internal static List getCustomLabelLayoutDataSourcesForTableName(TableName _tableName)
    {
        SysGlobalObjectCache cache = ClassFactory.globalObjectCache();
        container metadataCacheContainer = cache.find(classStr(WhsCustomLabelsMetadataCache), WhsCustomLabelsMetadataCache::getKeyForTableName(_tableName));

        if (metadataCacheContainer == conNull())
        {
            return WhsCustomLabelsMetadataCache::populateCustomLabelLayoutDataSourcesForTableNameCache(_tableName);
        }
        
        return List::create(conPeek(metadataCacheContainer, 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCustomLabelLayoutDataSourcesForTableName</Name>
				<Source><![CDATA[
    internal static void resetCustomLabelLayoutDataSourcesForTableName(TableName _tableName)
    {
        SysGlobalObjectCache cache = ClassFactory.globalObjectCache();

        // Make sure this cache is populated at least once before removing the value to sync the remove action
        if (WhsCustomLabelsMetadataCacheForceInitFlight::instance().isEnabled())
        {            
            WhsCustomLabelsMetadataCache::getCustomLabelLayoutDataSourcesForTableName(_tableName);
        }

        cache.remove(classStr(WhsCustomLabelsMetadataCache), WhsCustomLabelsMetadataCache::getKeyForTableName(_tableName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustomLabelLayoutDataSourcesForTableNameCache</Name>
				<Source><![CDATA[
    private static List populateCustomLabelLayoutDataSourcesForTableNameCache(TableName _tableName)
    {
        List labelLayoutList = new List(Types::String);

        if (WhsCustomLabelsMetadataCacheUncheckedFlight::instance().isEnabled())
        {
            // Since this code can be hit by anyone and is used as a global cache, we should avoid any permission checks when populating the cache.
            // This avoids potentially caching a blank list in error. Permissions to print custom labels will be checked later.

            unchecked (Uncheck::TableSecurityPermission | Uncheck::XDS)
            {
                WHSLabelLayoutDataSource labelLayoutDS;

                while select LabelLayoutDataSourceId from labelLayoutDS
                    where labelLayoutDS.LayoutType == WHSLabelLayoutType::CustomLabel
                       && labelLayoutDS.CustomLabelRootDataSourceTable == _tableName
                {
                    labelLayoutList.addEnd(labelLayoutDS.LabelLayoutDataSourceId);
                }
            }
        }
        else
        {
            WHSLabelLayoutDataSource labelLayoutDS;

            while select LabelLayoutDataSourceId from labelLayoutDS
                where labelLayoutDS.LayoutType == WHSLabelLayoutType::CustomLabel
                   && labelLayoutDS.CustomLabelRootDataSourceTable == _tableName
            {
                labelLayoutList.addEnd(labelLayoutDS.LabelLayoutDataSourceId);
            }
        }

        SysGlobalObjectCache cache = ClassFactory.globalObjectCache();
        cache.insert(classStr(WhsCustomLabelsMetadataCache), WhsCustomLabelsMetadataCache::getKeyForTableName(_tableName), [labelLayoutList.pack()]);

        return labelLayoutList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>