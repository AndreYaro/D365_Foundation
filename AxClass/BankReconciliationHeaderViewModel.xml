<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationHeaderViewModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationHeaderViewModel</c> is the view model for bank reconciliation header form.
/// </summary>
class BankReconciliationHeaderViewModel
{
    // Form view
    BankReconciliationHeaderFormView reconciliationFormView;

    // Number sequences
    NumberSeqFormHandler numberSeqFormHandlerReconciliationId;

    // Data sources
    FormDataSource dsReconciliation;

    // Records
    BankReconciliationHeader reconciliation;

    JournalTableData journalTableData;
    ImageListAppl_journal imageListAppl;

    boolean researchData;

    #BankElectronicReconciliation
    #MACROLIB.resAppl

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bookRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Refreshes <c>BankReconciliationHeader</c> form when <c>BankReconciliationWorksheet</c> form is closed.
    /// </summary>
    /// <param name="_research">
    ///     Indicates whether the data source of <c>BankReconciliationHeader</c> should be researched.
    /// </param>
    private void bookRefresh(boolean _research = false)
    {
        dsReconciliation.reread();
        dsReconciliation.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsReconciliationActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the Active event of <c>BankReconciliationHeader</c>.
    /// </summary>
    /// <param name="_header">
    ///     Given <c>BankReconciliationHeader</c> buffer.
    /// </param>
    public void dsReconciliationActivePost(BankReconciliationHeader _header)
    {
        reconciliation = _header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsReconciliationCreatePre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the create event of <c>BankReconciliationHeader</c>.
    /// </summary>
    public void dsReconciliationCreatePre()
    {
        if (numberSeqFormHandlerReconciliationId)
        {
            numberSeqFormHandlerReconciliationId.formMethodDataSourceCreatePre();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsReconciliationDeletePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the delete event of <c>BankReconciliationHeader</c>.
    /// </summary>
    public void dsReconciliationDeletePost()
    {
        if (numberSeqFormHandlerReconciliationId)
        {
            numberSeqFormHandlerReconciliationId.formMethodDataSourceDelete();
        }

        researchData = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsReconciliationExecuteQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Excutes data source.
    /// </summary>
    /// <remarks>
    ///     This method is called when controls AllOpenReconciledField,
    ///     BankAccountIdField or ShowUserCreatedOnly is changed.
    /// </remarks>
    public void dsReconciliationExecuteQuery()
    {
        if (dsReconciliation)
        {
            dsReconciliation.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsReconciliationInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the initValue event of <c>BankReconciliationHeader</c>.
    /// </summary>
    /// <param name="_reconciliation">
    ///     Given <c>BankReconciliationHeader</c> buffer.
    /// </param>
    public void dsReconciliationInitValuePost(BankReconciliationHeader _reconciliation)
    {
        _reconciliation.IsReconciled = NoYes::No;
        _reconciliation.CutOffDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (numberSeqFormHandlerReconciliationId)
        {
            numberSeqFormHandlerReconciliationId.formMethodDataSourceCreate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsReconciliationLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the linkActive event of <c>BankReconciliationHeader</c>.
    /// </summary>
    public void dsReconciliationLinkActivePre()
    {
        if (numberSeqFormHandlerReconciliationId)
        {
            numberSeqFormHandlerReconciliationId.formMethodDataSourceLinkActive();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsReconciliationMethodInUseBlock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ds reconciliation method in use block.
    /// </summary>
    /// <param name="_set">
    /// The set flag.
    /// </param>
    /// <param name="_journalTable">
    /// The journal table.
    /// </param>
    /// <param name="_value">
    /// The journal mark in use block value.
    /// </param>
    /// <returns>
    /// The instance of the <c>JournalMarkInUseBlock</c> class.
    /// </returns>
    public JournalMarkInUseBlock dsReconciliationMethodInUseBlock(
        boolean _set,
        JournalTableMap _journalTable,
        JournalMarkInUseBlock _value)
    {
        if (_set)
        {
            if (!_value && _journalTable.SessionId)
            {
                journalTableData.updateBlock(JournalBlockLevel::None, JournalBlockLevel::None);
                dsReconciliation.active();
            }
        }

        if (_journalTable.SessionId)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsReconciliationMethodInUseUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ds reconciliation method in use user id.
    /// </summary>
    /// <param name="_reconciliation">
    /// The reconciliation.
    /// </param>
    /// <returns>
    /// The instance of the <c>JournalBlockInUseUserId</c> class.
    /// </returns>
    public JournalBlockInUseUserId dsReconciliationMethodInUseUserId(BankReconciliationHeader _reconciliation)
    {
        if (_reconciliation.SessionId)
        {
            return new xSession(_reconciliation.SessionId).userId();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsReconciliationMethodLockImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ds reconciliation method lock image.
    /// </summary>
    /// <param name="_journalTable">
    /// The journal table.
    /// </param>
    /// <returns>
    /// The instance of the <c>ImageRes</c> class.
    /// </returns>
    public ImageRes dsReconciliationMethodLockImage(JournalTableMap _journalTable)
    {
        switch (journalTableData.blockLevel(_journalTable))
        {
            case JournalBlockLevel::InUse:
                return imageListAppl.image(#Image_journalBlockInUse);

            case JournalBlockLevel::System:
                return imageListAppl.image(#Image_journalBlockSystem);

            default:
                return -1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsReconciliationValidateWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the validateWrite event of <c>BankReconciliationHeader</c>.
    /// </summary>
    /// <param name="_ret">
    ///     Indicates whether the validation is passed for super method.
    /// </param>
    /// <returns>
    ///     Returns true if validation is passed. Otherwise, returns false.
    /// </returns>
    public boolean dsReconciliationValidateWritePost(boolean _ret)
    {
        boolean ret = _ret;

        if (numberSeqFormHandlerReconciliationId)
        {
            ret = ret && numberSeqFormHandlerReconciliationId.formMethodDataSourceValidateWrite(_ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsReconciliationWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the write event of <c>BankReconciliationHeader</c>.
    /// </summary>
    public void dsReconciliationWritePost()
    {
        if (numberSeqFormHandlerReconciliationId)
        {
            numberSeqFormHandlerReconciliationId.formMethodDataSourceWrite();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Called before form is closed.
    /// </summary>
    /// <remarks>
    ///     Data sources for list page form will be refreshed and unsaved number sequence will be released.
    /// </remarks>
    public void formClosePre()
    {
        this.bookRefresh(researchData);

        if (numberSeqFormHandlerReconciliationId)
        {
            numberSeqFormHandlerReconciliationId.formMethodClose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageListAppl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets image list appl.
    /// </summary>
    /// <returns>
    /// The instance of the <c>ImageListAppl_journal</c> class.
    /// </returns>
    public ImageListAppl_journal getImageListAppl()
    {
        return imageListAppl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes data sources.
    /// </summary>
    private void initDataSource()
    {
        dsReconciliation = reconciliationFormView.parmDSReconciliation();

        journalTableData = JournalTableData::newTable(dsReconciliation.cursor());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the bank statement view model.
    /// </summary>
    public void initialize()
    {
        this.initDataSource();
        this.initNumberSeq();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the number sequence for bank reconciliation Id.
    /// </summary>
    protected void initNumberSeq()
    {
        numberSeqFormHandlerReconciliationId = this.numberSeqFormHandlerReconciliationId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        imageListAppl = ImageListAppl_journal::newList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandlerReconciliationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets number sequence for bank reconciliation Id.
    /// </summary>
    /// <returns>
    ///     Number sequence for bank reconciliation Id.
    /// </returns>
    protected NumberSeqFormHandler numberSeqFormHandlerReconciliationId()
    {
        if (!numberSeqFormHandlerReconciliationId)
        {
            numberSeqFormHandlerReconciliationId = NumberSeqFormHandler::newForm(
                BankParameters::numRefBankReconciliationId().NumberSequenceId,
                reconciliationFormView.parmReconciliationFormRun(),
                dsReconciliation,
                this.tableFieldIdReconciliationId());
        }

        return numberSeqFormHandlerReconciliationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReconciliationFormView</Name>
				<Source><![CDATA[
    public BankReconciliationHeaderFormView parmReconciliationFormView(BankReconciliationHeaderFormView _reconciliationFormView = reconciliationFormView)
    {
        reconciliationFormView = _reconciliationFormView;

        return reconciliationFormView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldIdReconciliationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the field Id for reconciliation Id.
    /// </summary>
    /// <returns>
    ///     Field Id for reconciliation Id.
    /// </returns>
    private FieldId tableFieldIdReconciliationId()
    {
        return fieldNum(BankReconciliationHeader, ReconciliationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of <c>BankReconciliationHeaderViewModel</c> class.
    /// </summary>
    /// <returns>
    ///     The <c>BankReconciliationHeaderViewModel</c> instance.
    /// </returns>
    protected static BankReconciliationHeaderViewModel construct()
    {
        return new BankReconciliationHeaderViewModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReconciliationView</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of <c>BankReconciliationHeaderViewModel</c> class.
    /// </summary>
    /// <param name="_reconciliationFormView">
    ///     The instance of <c>BankReconciliationHeaderFormView</c> class.
    /// </param>
    /// <returns>
    ///     The instance of <c>BankReconciliationHeaderViewModel</c> class.
    /// </returns>
    public static BankReconciliationHeaderViewModel newFromReconciliationView(BankReconciliationHeaderFormView _reconciliationFormView)
    {
        BankReconciliationHeaderViewModel  reconciliationViewModel;

        Debug::assert(_reconciliationFormView != null);

        reconciliationViewModel = BankReconciliationHeaderViewModel::construct();
        reconciliationViewModel.parmReconciliationFormView(_reconciliationFormView);

        reconciliationViewModel.initialize();

        Debug::assert(reconciliationViewModel != null);

        return reconciliationViewModel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>