<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferUpd</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransferUpd</c> class updates one shipment or receipt.
/// </summary>
/// <remarks>
/// Updates of shipments or receipts are based on the data that is supplied in the
/// <c>InventTransferParmTable</c> table. Each instance of this class holds a reference to a record in
/// the <c>InventTransferParmTable</c> table, from which a related <c>InventTransferTable</c> record
/// can be found. The updating of a shipment or receipt will cause a possible update of the status of
/// the <c>InventTransferTable</c> record and the related <c>InventTransferLines</c> record.
/// Furthermore, any updates of related inventory transactions are handled.This class is used by the
/// <c>InventTransferMulti</c> class so that more transfer orders can be updated in one update.
/// </remarks>
abstract class InventTransferUpd extends UpdateBase
{
    InventTransferTable         inventTransferTable;
    InventTransferParmTable     inventTransferParmTable;

    InventTransferVoucherId     voucherId;
    NumberSeq                   numberSeq;

    LedgerVoucher               ledgerVoucher;
    boolean                     isSomeThingPosted;

    Counter                     progressCounter;
    SysOperationProgress        progressBar;
    RecordSortedList            journalLinesRSList;
    // <GEERU>
    boolean                     isReturn;
    boolean                     isStorno;
    // </GEERU>
    InventTransferJour          inventTransferJour;
    // <GIN>
    InventTransLineTax_IN           inventTransLineTax;
    InventTransferTable             inventTransTable;
    NetAmount_IN                    vatRetAmtInq;
    UnitPrice_IN                    unitPrice;
    LedgerDimensionDefaultAccount   retentionAcc;
    NetAmount_IN                    retentionAmt;
    AmountCur                       invoiceAmount;
    // </GIN>
    // <GIN><GEERU>
    #ISOCountryRegionCodes
    // </GEERU></GIN>
    // <GEEU>
    LtDocNumberingCode          ltDocNumberingCode;
    // </GEEU>

    // <GBR>
    FiscalDocumentNumber_BR             fiscalDocumentNumber_BR;
    InventTransferTableFiscalInfo_BR    inventTransferTableFiscalInfo_BR;
    InventTransferTotals_BR             inventTransferTotals_BR;
    // </GBR>
    
    // Instrumentation measures
    private int parmLineCount;
    private int parmLineCloseCount;
    private int transferLineCount;

    const int InventQtyConPos   = 1;
    const int PdsCWQtyConPos    = 2;

    // <GTE>
    boolean mustBeBookedFinancially = true;
    boolean isLedgerVoucherPosted;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beginLedger</Name>
				<Source><![CDATA[
    // </GTE>

    /// <summary>
    ///    Creates the data that is required for updating the ledger voucher.
    /// </summary>
    /// <remarks>
    ///    The data is not committed before the <see cref="M:InventTransferUpd.commitLedger" /> method is
    ///    called.
    /// </remarks>
    protected void beginLedger()
    {
        LedgerVoucherObject ledgerVoucherObject;
        TransactionTxt      transactionTxt = TransactionTxt::construct();

        this.initializeNumberSequence();
        voucherId     = this.getVoucherId();
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,SysModule::Invent, NumberSeq::newGetNum(InventParameters::numRefTransferVoucherId()).parmNumberSequenceCode());

        transactionTxt.setType(LedgerTransTxt::InventTransferOrder);
        transactionTxt.setDate(inventTransferParmTable.TransDate);
        transactionTxt.setVoucher(voucherId);
        transactionTxt.setKey1(inventTransferParmTable.TransferId);

        TransactionTextContext::setTransactionTextContext(transactionTxt, LedgerTransTxt::InventTransferOrder, inventTransferTable);

        // <GBR>
        if (BrazilParameters::isEnabled() && (inventTransferTableFiscalInfo_BR.canCreateShipmentFiscalDocument() || inventTransferTableFiscalInfo_BR.canCreateReceiveFiscalDocument()))
        {
            transactionTxt.setFormLetter(fiscalDocumentNumber_BR);
            transactionTxt.setCustVendName(this.getToLocationName_BR());
        }
        // </GBR>

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucherId,
                                                              inventTransferParmTable.TransDate,
                                                              SysModule::Invent,
                                                              LedgerTransType::Invent);
        ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
        ledgerVoucher.addVoucher(ledgerVoucherObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeNumberSequence</Name>
				<Source><![CDATA[
    private void initializeNumberSequence()
    {
        numberSeq = NumberSeq::newGetNum(InventParameters::numRefTransferVoucherId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an inventory transfer voucher Id.
    /// </summary>
    /// <returns>The inventory transfer voucher id.</returns>
    protected InventTransferVoucherId getVoucherId()
    {
        if (!numberSeq)
        {
            this.initializeNumberSequence();
        }

        return numberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfSomethingIsPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether something is posted during the update.
    /// </summary>
    /// <param name="_info">
    ///    Indicates whether to write a message to the Infolog.
    /// </param>
    /// <returns>
    ///    true if something is posted during the update; otherwise, false.
    /// </returns>
    protected boolean  checkIfSomethingIsPosted(boolean _info = true)
    {
        if (! isSomeThingPosted)
        {
            return (_info ? checkFailed("@SYS78876") : false);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSomeThingPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or gets the flag which determines if something has been posted during the transfer order update.
    /// </summary>
    /// <param name = "_isSomeThingPosted">The current flag to determine if something has been posted</param>
    /// <returns>True if any transfer order line has been posted; otherwise false.</returns>
    public boolean parmIsSomeThingPosted(boolean _isSomeThingPosted = isSomeThingPosted)
    {
        isSomeThingPosted = _isSomeThingPosted;

        return isSomeThingPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferJour</Name>
				<Source><![CDATA[
    public InventTransferJour parmInventTransferJour(InventTransferJour _inventTransferJour = inventTransferJour)
    {
        inventTransferJour = _inventTransferJour;

        return inventTransferJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Commits the voucher.
    /// </summary>
    protected void commitLedger()
    {
        isLedgerVoucherPosted = ledgerVoucher.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the journal header for the update in the <see cref="T:InventTransferJour" /> table.
    /// </summary>
    protected void createInventTransferJour()
    {
        //<GIN>
        InventTransferJour_IN           inventTransferJourLoc;
        InventTransferLine              inventTransferLine;
        TaxRegistrationNumbers_IN       taxRegistrationNumbers;
        ExciseNumSequenceRef_IN         exciseNumSequenceRef;
        TransTaxInformation             transTaxInformation;
        //</GIN>

        inventTransferJour.initFromInventTransferParmTable(inventTransferParmTable);
        inventTransferJour.initFromInventTransferTable(inventTransferTable);

        inventTransferJour.VoucherId = voucherId;

        if (inventTransferParmTable.CanceledShipmentJournalRecId)
        {
            inventTransferJour.CanceledShipment = NoYes::Yes;
            inventTransferJour.CanceledShipmentJournalRecId = inventTransferParmTable.CanceledShipmentJournalRecId;
        }
        
        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]))
        {
            this.initInventTransferJour_W(inventTransferJour);
        }
        // </GEEU>
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || BrazilParameters::isEnabled())
        {
            inventTransferJour.Storno_RU = isStorno;
            inventTransferJour.Return_RU = isReturn;
        }
        // </GEERU>
        // <GIN>
        if (TaxParameters::isExciseEnable_IN() && inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer
           && inventTransferTable.isExcisable_IN())
        {
            select RecId from inventTransferLine
                where inventTransferLine.TransferId == inventTransferTable.TransferId;

            transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(inventTransferLine);
            taxRegistrationNumbers = TaxRegistrationNumbers_IN::find(transTaxInformation.ExciseECCRegistrationNumber);

            exciseNumSequenceRef = ExciseNumSequenceRef_IN::findByRegistrationNumber(taxRegistrationNumbers.RecId, ExciseReference_IN::Excise);
            if (exciseNumSequenceRef.NumberSequenceTable)
            {
                inventTransferJourLoc = inventTransferJour.inventTransferJour_IN();
                inventTransferJourLoc.ExciseInvoiceId = NumberSeq::newGetNumFromId(exciseNumSequenceRef.NumberSequenceTable).num();
                inventTransferJour.packInventTransferJour_IN(inventTransferJourLoc);
            }
        }
        // </GIN>
        inventTransferJour.insert();

        // <GEELT>
        //this.copyTransportationProperties_W(inventTransferTable, inventTransferJour);
        // </GEELT>
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusIssueAndReceiptForInventTransferJourLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>StatusIssue</c> and <c>StatusReceipt</c> for the InventTrans range with creating <c>InventTransferJourLine</c> records.
    /// </summary>
    /// <returns>Returns a container with <c>StatusIssue</c> and <c>StatusReceipt</c>.</returns>
    protected container statusIssueAndReceiptForInventTransferJourLineCreation()
    {
        if (this.isOutboundTransfer() 
           && inventTransferParmTable.CanceledShipmentJournalRecId == 0)
        {
            return [StatusIssue::Sold, StatusReceipt::None];
        }

        return [StatusIssue::None, StatusReceipt::Purchased];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferJourLine</Name>
				<Source><![CDATA[
    protected void createInventTransferJourLine(
        InventTransferParmLine  _inventTransferParmLine,
        InventTransferLine      _inventTransferLine,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParm
        )
    {
        InventTransOrigin               inventTransOrigin;
        InventTrans                     inventTrans;
        InventDim                       inventDim;

        StatusIssue                     statusIssue;
        StatusReceipt                   statusReceipt;
        InventTransType                 inventTransType;

        if (this.isOutboundTransfer())
        {
            inventTransType = InventTransType::TransferOrderShip;
        }
        else
        {
            inventTransType = InventTransType::TransferOrderReceive;
        }
        [statusIssue, statusReceipt] = this.statusIssueAndReceiptForInventTransferJourLineCreation();

        if (inventTransferParmTable.ExplodeLines)
        {
            select forceplaceholders TableId from inventTransOrigin
                where inventTransOrigin.InventTransId      == _inventTransferParmLine.InventTransId
                    && inventTransOrigin.ReferenceCategory == inventTransType
                join sum(Qty), sum(PdsCWQty) from inventTrans
                    group by InventDimId
                    where inventTrans.InventTransOrigin  == inventTransOrigin.RecId
                        && inventTrans.StatusIssue       <= statusIssue
                        && inventTrans.StatusReceipt     <= statusReceipt
                        && inventTrans.Voucher           == voucherId
                        && inventTrans.DateFinancial     == inventTransferParmTable.TransDate
                #inventDimExistsJoin(inventTrans.InventDimId,inventDim,_inventDimCriteria,_inventDimParm);
        }
        else
        {
            select TableId from inventTransOrigin
                where inventTransOrigin.InventTransId      == _inventTransferParmLine.InventTransId
                    && inventTransOrigin.ReferenceCategory == inventTransType
            join sum(Qty), sum(PdsCWQty) from inventTrans
                group by InventDimId
                where inventTrans.InventTransOrigin  == inventTransOrigin.RecId
                    && inventTrans.StatusIssue       <= statusIssue
                    && inventTrans.StatusReceipt     <= statusReceipt
                    && inventTrans.Voucher           == voucherId
                    && inventTrans.DateFinancial     == inventTransferParmTable.TransDate;
        }

        if (!journalLinesRSList)
        {
            this.initJournalLinesList();
        }

        while (inventTrans.InventDimId)
        {
            InventTransferJourLine inventTransferJourLine;

            //build the key first for the Record sorted list
            inventTransferJourLine.TransferId   = _inventTransferLine.TransferId;
            inventTransferJourLine.VoucherId    = voucherId;
            inventTransferJourLine.LineNum      = _inventTransferLine.LineNum;
            inventTransferJourLine.InventDimId  = inventTrans.InventDimId;

            boolean foundJournalList = journalLinesRSList.find(inventTransferJourLine);

            if (!foundJournalList)
            {
                inventTransferJourLine.initFromInventTransferParmTable(inventTransferParmTable);
                inventTransferJourLine.initFromInventTransferParmLine(_inventTransferParmLine);
                inventTransferJourLine.UnitId   = _inventTransferLine.UnitId;
            }

            this.initializeInventTransferJourLine(inventTransferJourLine, inventTrans, _inventTransferParmLine, _inventTransferLine);

            journalLinesRSList.ins(inventTransferJourLine, true);

            next inventTransOrigin;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventTransferJourLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a inventory transfer journal line.
    /// </summary>
    /// <param name = "_inventTransferJourLine">The inventory transfer journal line to initialize.</param>
    /// <param name = "_inventTrans">The inventory transaction.</param>
    /// <param name = "_inventTransferParmLine">The inventory transfer line parameters.</param>
    /// <param name = "_inventTransferLine">The inventory transfer line.</param>
    protected void initializeInventTransferJourLine(
        InventTransferJourLine  _inventTransferJourLine, 
        InventTrans             _inventTrans,
        InventTransferParmLine  _inventTransferParmLine,
        InventTransferLine      _inventTransferLine)
    {
        if (this.isOutboundTransfer())
        {
            _inventTransferJourLine.QtyShipped       = -_inventTrans.Qty;
            _inventTransferJourLine.PdsCWQtyShipped  = -_inventTrans.PdsCWQty;

            if  (inventTransferParmTable.AutoReceiveQty)
            {
                _inventTransferJourLine.QtyReceived      = -_inventTrans.Qty;
                _inventTransferJourLine.PdsCWQtyReceived = -_inventTrans.PdsCWQty;
            }
        }
        else
        {
            _inventTransferJourLine.QtyReceived      = _inventTrans.Qty;
            _inventTransferJourLine.PdsCWQtyReceived = _inventTrans.PdsCWQty;
        }

        if (_inventTransferParmLine.QtyScrapNow)
        {
            InventTrans inventTransScrap = this.findScrapNow(_inventTransferLine, _inventTrans.InventDimId);
            _inventTransferJourLine.QtyScrapped      = -inventTransScrap.Qty;
            _inventTransferJourLine.PdsCWQtyScrapped = -inventTransScrap.PdsCWQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findScrapNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the scrap quantities for an inventory transfer line.
    /// </summary>
    /// <param name = "_inventTransferLine">The transfer line.</param>
    /// <param name = "_inventDimId">The inventory dimension.</param>
    /// <returns>An inventory transaction record with the scrap quantities.</returns>
    [Replaceable]
    protected InventTrans findScrapNow(
        InventTransferLine      _inventTransferLine, 
        InventDimId             _inventDimId)
    {
        InventTrans inventTransScrap;
        InventTransOriginTransferScrap inventTransOriginTransferScrap;

        if (inventTransferParmTable.UpdateType == InventTransferUpdateType::Receive)
        {
            select TableId from inventTransOriginTransferScrap
                where inventTransOriginTransferScrap.TransferScrapId         == _inventTransferLine.TransferId
                    && inventTransOriginTransferScrap.TransferScrapDataAreaId == _inventTransferLine.DataAreaId
                    && inventTransOriginTransferScrap.TransferScrapLineNum    == _inventTransferLine.LineNum
                join sum(Qty), sum(PdsCWQty) from inventTransScrap
                    where inventTransScrap.InventTransOrigin  == inventTransOriginTransferScrap.InventTransOrigin
                        && inventTransScrap.StatusIssue       == StatusIssue::Sold
                        && inventTransScrap.StatusReceipt     == StatusReceipt::None
                        && inventTransScrap.Voucher           == voucherId
                        && inventTransScrap.DateFinancial     == inventTransferParmTable.TransDate
                        && inventTransScrap.InventDimId       == _inventDimId;
        }
        return inventTransScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutboundTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the update type.
    /// </summary>
    /// <returns>
    /// true if the update type value is valid; otherwise, false.
    /// </returns>
    [Replaceable]
    protected boolean isOutboundTransfer()
    {
        return (inventTransferParmTable.UpdateType == InventTransferUpdateType::Shipment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToLocationName_BR</Name>
				<Source><![CDATA[
    private str getToLocationName_BR()
    {
        InventLocation  fromToInventLocation;
        FiscalEstablishment_BR thirdPartyFiscalEstablishment;

        if (!inventTransferTableFiscalInfo_BR.isFiscalEstablishmentOrder())
        {
            fromToInventLocation = InventLocation::find(inventTransferJour.InventLocationIdTo);

            if (fromToInventLocation.CustAccount_BR)
            {
                return CustTable::find(fromToInventLocation.CustAccount_BR).name();
            }
            else
            {
                return VendTable::find(fromToInventLocation.VendAccount).name();
            }
        }

        thirdPartyFiscalEstablishment = InventSite::find(
            InventLocation::find(inventTransferTable.InventLocationIdTo).InventSiteId).fiscalEstablishment();

        return thirdPartyFiscalEstablishment.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransferJour_W</Name>
				<Source><![CDATA[
    private void initInventTransferJour_W(InventTransferJour _jour)
    {
        NumberSequenceCode  packingSlipNumber;

        if (inventTransferParmTable.Num_LT)
        {
            _jour.Num_LT = inventTransferParmTable.Num_LT;
        }
        else
        {
            _jour.Numbering_W    = ltDocNumberingCode;
            if (ltDocNumberingCode)
            {
                packingSlipNumber = LtInvoiceAutoNumberingTable::find(ltDocNumberingCode).NumberSequenceCode;
                _jour.Num_LT      = NumberSeq::newGetNumFromCode(packingSlipNumber).num();

                LtInvoiceAutoNumberingTable::updateLastDate(ltDocNumberingCode, _jour.TransDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransferTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal <see cref="T:InventTransferTable" /> buffer based on the internal <see
    ///    cref="T:InventTransferLine" />.
    /// </summary>
    protected void initInventTransferTable()
    {
        inventTransferTable = InventTransferTable::find(inventTransferParmTable.TransferId,true);

        if (! inventTransferTable.checkValid(inventTransferTable.TransferId))
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalLinesList</Name>
				<Source><![CDATA[
    protected void initJournalLinesList()
    {
        journalLinesRSList = new RecordSortedList(tableNum(InventTransferJourLine));

        journalLinesRSList.sortOrder(fieldNum(InventTransferJourLine,TransferId),
                                     fieldNum(InventTransferJourLine,VoucherId),
                                     fieldNum(InventTransferJourLine,LineNum),
                                     fieldNum(InventTransferJourLine,InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournalLines</Name>
				<Source><![CDATA[
    protected void insertJournalLines()
    {
        // <GIN>
        InventTransferJourLine      inventTransferJourLine;
        InventTransferJourLine_IN   inventTransferJourLineIN;
        InventTransferLine          inventTransferLine;
        InventTransferLine_IN       inventTransferLineIN;
        // </GIN>

        if (journalLinesRSList && journalLinesRSList.usageCount())
        {
            journalLinesRSList.insertDatabase();
        }

        //<GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) &&
            inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer)
        {
            while select inventTransferJourLine
                where inventTransferJourLine.TransferId == inventTransferJour.TransferId &&
                inventTransferJourLine.VoucherId == inventTransferJour.VoucherId
            {
                inventTransferLine       = inventTransferJourLine.inventTransferLine();
                inventTransferLineIN     = inventTransferLine.inventTransferLine_IN();
                inventTransferJourLineIN = inventTransferJourLine.inventTransferJourLine_IN();
                if (inventTransferJour.UpdateType == InventTransferUpdateType::Shipment)
                {
                    inventTransferJourLineIN.AssessableValue = inventTransferLineIN.AssessableValueTransactionCurrency * (inventTransferJourLine.QtyShipped/inventTransferLine.QtyTransfer);
                }
                else if (inventTransferJour.UpdateType == InventTransferUpdateType::Receive)
                {
                    inventTransferJourLineIN.AssessableValue = inventTransferLineIN.AssessableValueTransactionCurrency * (inventTransferJourLine.QtyReceived/inventTransferLine.QtyTransfer);
                }
                inventTransferJourLine.packInventTransferJourLine_IN(inventTransferJourLineIN);
                inventTransferJourLine.SysExtensionSerializerMap::postInsert();
                inventTransferJourLine.SysExtensionSerializerMap::postUpdate();
            }
        }
        //</GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmBuffer</Name>
				<Source><![CDATA[
    public ParmBuffer parmParmBuffer(ParmBuffer _inventTransferParmTable = inventTransferParmTable)
    {
        if (!_inventTransferParmTable.RecId)
        {
            throw error("@SYS53949");
        }
        inventTransferParmTable = _inventTransferParmTable;

        return inventTransferParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLines_BR</Name>
				<Source><![CDATA[
    private void updateLines_BR()
    {
        if (inventTransferTableFiscalInfo_BR.canCreateReceiveFiscalDocument()
            || inventTransferTableFiscalInfo_BR.canCreateShipmentFiscalDocument())
        {
            inventTransferTotals_BR = InventTransferTotals_BR::construct(inventTransferParmTable);
            inventTransferTotals_BR.calc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCloseLine</Name>
				<Source><![CDATA[
    private void processCloseLine()
    {
        InventTransferParmLine inventTransferParmLine;
        InventTransferLine     inventTransferLine;

        while select forupdate inventTransferLine
            exists join inventTransferParmLine
                where inventTransferParmLine.InventTransId == InventTransferLine.InventTransId   &&
                        inventTransferParmLine.ParmId      == inventTransferParmTable.ParmId     &&
                        inventTransferParmLine.TransferId  == inventTransferParmTable.TransferId &&
                        inventTransferParmLine.CloseLine   == NoYes::Yes
        {
            inventTransferLine.closeLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    void progressUpdate(str text)
    {
        #avifiles

        if (!progressBar)
        {
            progressBar = SysOperationProgress::newGeneral(#aviUpdate,"@SYS78234" , 0);
        }
        progressCounter++;
        progressBar.setCount(progressCounter);
        progressBar.setText(text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUpdateFieldId_RU</Name>
				<Source><![CDATA[
    protected FieldId qtyUpdateFieldId_RU()
    {
        return fieldNum(InventTransferParmLine, QtyShipNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUpInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sum up the inventory transactions if possible.
    /// </summary>
    protected void sumUpInventoryTransactions()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles initialization and updates, for example, of journals and ledger transactions, that are
    ///    performed during the update.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        setPrefix(#PreFixField(inventTransferParmTable,TransferId));
        boolean isPostingCompleted = false;

        try
        {
            using (InventTransferUpdateInstrumentationTask instrumentationTask = new InventTransferUpdateInstrumentationTask(this))
            {
                ttsbegin;

                if (! this.validate())
                {
                    throw error("@SYS18447");
                }

                this.initInventTransferTable();

                this.beginLedger();

                this.updateInventTransferOrder();

                if (!this.checkIfSomethingIsPosted())
                {
                    throw error("@SYS18447");
                }

                this.createInventTransferJour();

                this.insertJournalLines();

                this.postInventTransferJournalCreated();

                //<GTE>
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                {
                    TaxBusinessService::transferTaxDocument(inventTransferParmTable, inventTransferJour);
                    
                    ITaxableDocument taxableDocument = TaxableDocumentObject::construct(
                        TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.getTaxableDocmentTransactionTable()));
                    TaxBusinessService::postTax(ledgerVoucher, taxableDocument);

                    if (inventTransferParmTable.isShipmentCancellation())
                    {
                        InventTransferJour inventOriginTransferJour;

                        select firstonly inventOriginTransferJour
                            where inventOriginTransferJour.RecId == inventTransferParmTable.CanceledShipmentJournalRecId;

                        TransitDocEWayBillController_IN::updateEWayBillStatusByJournal(inventOriginTransferJour, TaxGSTEWayBillStatus_IN::Cancelled);
                    }
                }

                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() 
                    && TaxSolutionScopeParameters::find().TaxDocumentPostingMode == TaxDocumentPostingMode::Synchronous)
                {
                    TaxBusinessService::postTaxDocument(TaxableDocumentObject::construct(
                            TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.getTaxableDocmentTransactionTable())),
                        ledgerVoucher);
                }
                //</GTE>

                this.runDelegate(inventTransferJour, inventTransferTable);

                this.updateJobJournal(ParmJobStatus::Executed);

                this.commitLedger();

                ttscommit;

                isPostingCompleted = true;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            this.updateJobJournal(ParmJobStatus::ContainErrors);
            throw (Exception::Error);
        }

        if (isPostingCompleted)
        {
            this.postTaxDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts the transfer order taxes.
    /// </summary>
    /// <param name="_post">
    ///    A Boolean value indicating whether the taxes will be posted or not.
    /// </param>
    protected void postTax(boolean _post)
    {
        if (!TaxIntegrationUtils::isTaxInTransferOrderEnabled())
        {
            return;
        }

        this.postTaxInternal(false);

        if (this.inventTransferParmTable.AutoReceiveQty)
        {
            this.postTaxInternal(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferPackedTaxCalculationInput</Name>
				<Source><![CDATA[
    private void transferPackedTaxCalculationInput()
    {
        TaxIntegrationCalculationInputPersisted packedTaxCalculationInput;

        update_recordset packedTaxCalculationInput
            setting
                JournalTableId = inventTransferJour.TableId,
                JournalRecId = inventTransferJour.RecId
            where packedTaxCalculationInput.HeadingTableId == inventTransferJour.TableId
                && packedTaxCalculationInput.HeadingRecId == inventTransferJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxInternal</Name>
				<Source><![CDATA[
    private void postTaxInternal(boolean _postingAutoReceive)
    {
        InventTransferTotals inventTransferTotals = InventTransferTotals::construct(this.inventTransferJour);

        if (_postingAutoReceive)
        {
            inventTransferTotals.setUpdateType(InventTransferUpdateType::Receive);
        }
        else
        {
            this.initTaxRegulationFromParmTable();
        }

        inventTransferTotals.calc();

        TaxInventTransfer taxInventTransfer = inventTransferTotals.tax();
        taxInventTransfer.saveAndPost(LedgerPostingController::newForLedgerPostingJournal(this.ledgerVoucher));

        // Under auto-receive scenario, shipment and receive share the same InventTransferJour.
        // InventTransferJour.TaxID and InventTransferJour.Listcode have been updated during posting shipment.
        // And it's not required to do the update during posting auto-receiving.
        // Thus, InventTransferJour.TaxID and InventTransferJour.Listcode finally save TaxID and list code from shipment.
        if (!_postingAutoReceive)
        {
            TaxTransactionTaxIDHelper::updateTaxIdToCustVendJour(taxInventTransfer, inventTransferJour);
            TaxIntegrationListCodeUtility::updateListCodeToJournalTable(inventTransferJour, inventTransferTable);
        }

        if (TaxIntegrationUtils::isISVApiActivated(TaxServiceISVApiTypes::PostTax)
            && TaxIntegrationUtils::getTaxSolutionProviderTypeByBusinessProcess(TaxIntegrationBusinessProcess::Inventory) == TaxSolutionProviderType::ISV)
        {
            this.transferPackedTaxCalculationInput();

            if (_postingAutoReceive || this.inventTransferParmTable.UpdateType == InventTransferUpdateType::Receive)
            {
                TaxIntegrationFacade::postTaxToISV(inventTransferJour.TableId, inventTransferJour.RecId, TaxModuleType::TransferOrderReceive);
            }
            else
            {
                TaxIntegrationFacade::postTaxToISV(inventTransferJour.TableId, inventTransferJour.RecId, TaxModuleType::TransferOrderShipment);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxRegulationFromParmTable</Name>
				<Source><![CDATA[
    private void initTaxRegulationFromParmTable()
    {
        TaxWorkRegulation::copy(this.inventTransferParmTable, this.inventTransferJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventTransferJournalCreated</Name>
				<Source><![CDATA[
    protected void postInventTransferJournalCreated()
    {
        if(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.updateInventTransferJour_RU();
        }

        if(TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.transitDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransferJour_RU</Name>
				<Source><![CDATA[
    protected void updateInventTransferJour_RU()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates an <c>InventTransferLine</c> record.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    ///    The <c>InventTransferParmLine</c> record that specifies the <c>InventTransferLine</c> record to
    ///    update.
    /// </param>
    /// <remarks>
    ///    This method should be overridden on derived classes to perform an update. This method should not
    ///    update a related <c>InventTransferTable</c> record. The record will be updated by the caller after
    ///    all lines are updated.
    /// </remarks>
    protected abstract void updateInventTransferLine(InventTransferParmLine  _inventTransferParmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the related <c>InventTransferLine</c> and <c>InventTransferTable</c> records.
    /// </summary>
    protected void updateInventTransferOrder()
    {
        if (!inventTransferParmTable.EditLines)
        {
            //force creation of parmLines
            inventTransferParmTable.createLines(NoYes::Yes);
        }

        //update transfer lines
        this.updateLines();

        // update transfer status
        inventTransferTable.reread();   // Updating lines might already have adjusted the status on the header in some scenarios
        inventTransferTable.setInventTransferStatus();
        inventTransferTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransferReceiveRetFully_RU</Name>
				<Source><![CDATA[
    [SysObsolete('', false, 07\07\2020)]
    protected void updateInventTransferReceiveRetFully_RU(InventTransferParmLine  _inventTransferParmLine,
                                                          InventTransferLine      _inventTransferLine,
                                                          InventMovement          _movementTransitFrom,
                                                          InventMovement          _movementTo,
                                                          InventQty               _inventQty = _inventTransferParmLine.QtyReceiveNow,
                                                          PdsCWInventQty          _cwQty = _inventTransferParmLine.PdsCWQtyReceiveNow)
    {
        InventUpd_Financial     inventUpd_Financial;
        InventUpd_Estimated     inventUpd_Estimated;

        InventQty               qtyRemain = _inventQty;
        container               remainQtyCon;
        PdsCWInventQty          cwQtyRemain = _cwQty;

        InventTransOriginId     transitToOriginId;
        InventTransOriginId     transitFromOriginId;
        InventTransOriginId     scrapOriginId;

        this.updateScrapReturn_RU(_inventTransferParmLine,
                                  _inventTransferLine,
                                  _movementTo,
                                  null,
                                  null,
                                  _inventTransferParmLine.QtyScrapNow,
                                  _inventTransferParmLine.PdsCWQtyScrapNow);

        _movementTransitFrom.returnedSpecialCheckUpdate_RU(UnknownNoYes::Yes);

        inventUpd_Financial = InventUpd_Financial::newInventTransferLineReceive(_movementTransitFrom,
                                                                                ledgerVoucher,
                                                                                0,
                                                                                _inventQty,
                                                                                null,
                                                                                null,
                                                                                _cwQty);

        inventUpd_Financial.updateNow();

        transitFromOriginId = InventTransOriginTransferTransitFrom::findInventTransOriginId(_inventTransferLine.DataAreaId,
                                                                                            _inventTransferLine.TransferId,
                                                                                            _inventTransferLine.LineNum);

        transitToOriginId = InventTransOriginTransferTransitTo::findInventTransOriginId(_inventTransferLine.DataAreaId,
                                                                                        _inventTransferLine.TransferId,
                                                                                        _inventTransferLine.LineNum);

        scrapOriginId     = InventTransOriginTransferScrap::findInventTransOriginId(_inventTransferLine.DataAreaId,
                                                                                    _inventTransferLine.TransferId,
                                                                                    _inventTransferLine.LineNum);

        InventTransOrigin::updateMarking(transitFromOriginId,
                                         transitFromOriginId,
                                         -_inventQty,
                                         '',
                                         SortOrder::Ascending,
                                         false,
                                         null,
                                         null,
                                         -_cwQty);

        // create estimated transaction for the transit issue
        inventUpd_Estimated = InventUpd_Estimated::newInventMovement(_movementTransitFrom);
        inventUpd_Estimated.parmPreEstimated(0);
        inventUpd_Estimated.parmCWPreEstimated(0);
        inventUpd_Estimated.parmEstimated(qtyRemain);
        inventUpd_Estimated.parmPdsCWEstimated(cwQtyRemain);
        inventUpd_Estimated.updateNow();

        InventTransOrigin::updateMarking(transitFromOriginId,
                                         transitFromOriginId,
                                         qtyRemain,
                                         '',
                                         SortOrder::Descending,
                                         false,
                                         null,
                                         null,
                                         cwQtyRemain);

        // create temporary estimated transaction for the transfer receipt, so reservation can be passed ok
        inventUpd_Estimated = InventUpd_Estimated::newInventMovement(_movementTo);
        inventUpd_Estimated.parmPreEstimated(0);
        inventUpd_Estimated.parmCWPreEstimated(0);
        inventUpd_Estimated.parmEstimated(-qtyRemain);
        inventUpd_Estimated.parmPdsCWEstimated(-cwQtyRemain);
        inventUpd_Estimated.updateNow();

        //reserve physically created transit issue transaction
        InventUpd_Reservation::updateReserveBuffer(_inventTransferLine, qtyRemain, InventMovSubType::TransferOrderTransitFrom, cwQtyRemain);

        // delete temporary estimated transaction for the transfer receipt, so reservation can be passed ok
        inventUpd_Estimated = InventUpd_Estimated::newInventMovement(_movementTo);
        inventUpd_Estimated.parmPreEstimated(-qtyRemain);
        inventUpd_Estimated.parmCWPreEstimated(-cwQtyRemain);
        inventUpd_Estimated.parmEstimated(qtyRemain);
        inventUpd_Estimated.parmPdsCWEstimated(cwQtyRemain);
        inventUpd_Estimated.updateNow();

        remainQtyCon = this.updateReturnIssue_RU(_inventTransferParmLine,
                                                 _inventTransferLine,
                                                 null,
                                                 null,
                                                 qtyRemain,
                                                 cwQtyRemain,
                                                 InventTransOriginTransferScrap::findInventTransOriginId(_inventTransferLine.DataAreaId,
                                                                                                         _inventTransferLine.TransferId,
                                                                                                         _inventTransferLine.LineNum),
                                                 _movementTo,
                                                 false);
        qtyRemain   += conPeek(remainQtyCon, InventQtyConPos);
        cwQtyRemain += conPeek(remainQtyCon, PdsCWQtyConPos);

        if (qtyRemain)
        {
            throw error("@GLS113808");
        }

        this.updateReceiveOrdered_RU(_inventTransferLine, _movementTo, InventDim::find(_inventTransferParmLine.InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransferReceiveRetPartly_RU</Name>
				<Source><![CDATA[
    protected container updateInventTransferReceiveRetPartly_RU(
        InventTransferParmLine  _inventTransferParmLine,
        InventTransferLine      _inventTransferLine,
        InventMovement          _movementTransitFrom,
        InventMovement          _movementTo,
        InventDim               _inventDimFrom,
        InventQty               _inventQty = _inventTransferParmLine.QtyReceiveNow,
        PdsCWInventQty          _cwQty     = _inventTransferParmLine.PdsCWQtyReceiveNow)
    {
        InventUpd_Financial     inventUpd_Financial;
        InventUpd_Estimated     inventUpd_Estimated;
        InventUpd_Reservation   inventUpd_Reservation;

        InventTransOriginId transitFromOriginId;
        InventTransOriginId scrapOriginId;

        InventTrans         inventTrans;

        InventDim           inventDimTransitIssue;
        InventDim           inventDimReceipt;
        InventDim           inventDimIssue;

        InventDimParm       inventDimParmTransitIssue;
        InventDimParm       inventDimParmReceipt;
        InventDimParm       inventDimParmIssue;

        InventQty           qty;
        InventQty           qtyRemain;
        container           remainQtyCon;
        PdsCWInventQty      cwQty;
        PdsCWInventQty      cwQtyRemain;

        Map                 inventDimMap;

        inventDimTransitIssue = _movementTransitFrom.inventDimMerged(_inventDimFrom);
        inventDimParmTransitIssue.initFromInventDim(inventDimTransitIssue);

        qtyRemain       = _inventQty;
        cwQtyRemain     = _cwQty;
        inventDimMap    = new Map(Types::Record, Types::Container);

        this.updateScrapReturn_RU(
            _inventTransferParmLine,
            _inventTransferLine,
            _movementTo,
            inventDimTransitIssue,
            inventDimParmTransitIssue,
            _inventTransferParmLine.QtyScrapNow,
            _inventTransferParmLine.PdsCWQtyScrapNow);

        transitFromOriginId = InventTransOriginTransferTransitFrom::findInventTransOriginId(
            _inventTransferLine.DataAreaId,
            _inventTransferLine.TransferId,
            _inventTransferLine.LineNum);

        scrapOriginId = InventTransOriginTransferScrap::findInventTransOriginId(
            _inventTransferLine.DataAreaId,
            _inventTransferLine.TransferId,
            _inventTransferLine.LineNum);

        //select transit issues for return
        while select sum(Qty), sum(PdsCWQty), InventDimId from inventTrans
            group by InventDimId desc
            where inventTrans.InventTransOrigin == transitFromOriginId
               && inventTrans.StatusIssue       == StatusIssue::Sold
               && inventTrans.InvoiceReturned   == NoYes::No
            #inventDimJoin(inventTrans.inventDimId, inventDimIssue, inventDimTransitIssue, inventDimParmTransitIssue)
        {
            inventDimIssue = inventTrans.inventDim();
            inventDimParmIssue.initFromInventDim(inventDimIssue);

            qty   = max(qtyRemain,   inventTrans.Qty);
            cwQty = max(cwQtyRemain, inventTrans.PdsCWQty);

            inventDimReceipt = _movementTo.inventDimMerged(inventDimIssue);
            inventDimParmReceipt.initFromInventDim(inventDimReceipt);

            remainQtyCon = this.updateReturnIssue_RU(
                _inventTransferParmLine, 
                _inventTransferLine,
                inventDimReceipt,
                inventDimParmReceipt,
                qty,
                cwQty,
                scrapOriginId,
                _movementTo,
                false);

            _movementTransitFrom.returnedSpecialCheckUpdate_RU(UnknownNoYes::Yes);
            inventUpd_Financial = InventUpd_Financial::newInventTransferLineReceive(
                _movementTransitFrom,
                ledgerVoucher,
                0,
                qty,
                inventDimIssue,
                inventDimParmIssue,
                cwQty);

            inventUpd_Financial.parmTransferOrderVoucherMatched(inventTransferParmTable.VoucherShipmentId);

            inventUpd_Financial.updateNow();

            InventTransOrigin::updateMarking(
                transitFromOriginId, 
                transitFromOriginId, 
                -qty,  
                '', 
                SortOrder::Ascending, 
                false, 
                null, 
                null, 
                -cwQty);

            inventDimMap.insert(inventDimIssue, [-inventUpd_Financial.updFinancial(), -inventUpd_Financial.pdsCWUpdFinancial()]);

            // create estimated transaction for the transit issue
            inventUpd_Estimated = InventUpd_Estimated::newInventMovement(_movementTransitFrom);
            inventUpd_Estimated.parmPreEstimated(0);
            inventUpd_Estimated.parmCWPreEstimated(0);
            inventUpd_Estimated.parmEstimated(qty);
            inventUpd_Estimated.parmPdsCWEstimated(cwQty);
            inventUpd_Estimated.updateNow();

            InventTransOriginId markingForTransitIssueOriginId = transitFromOriginId;

            markingForTransitIssueOriginId = InventTransOriginTransferTransitTo::findInventTransOriginId(
                _inventTransferLine.DataAreaId,
                _inventTransferLine.TransferId,
                _inventTransferLine.LineNum);

            InventTransOrigin::updateMarking(
                transitFromOriginId, 
                markingForTransitIssueOriginId,
                qty,  
                '', 
                SortOrder::Descending, 
                false, 
                null, 
                null, 
                cwQty);

            //reserve physically created transit issue transaction
            inventUpd_Reservation = InventUpd_Reservation::newParameters(
                _movementTransitFrom,
                inventDimIssue, 
                inventDimParmIssue, 
                0,
                qty, 
                false, 
                false, 
                cwQty, 
                true);

            inventUpd_Reservation.parmReserveLessPhysicalFirst_RU(true);
            inventUpd_Reservation.parmUpdateMarking_RU(true);
            inventUpd_Reservation.updateNow();

            inventDimReceipt = _movementTo.inventDimMerged(inventDimIssue);
            inventDimParmReceipt.initFromInventDim(inventDimReceipt);

            qtyRemain   += conPeek(remainQtyCon, InventQtyConPos);
            cwQtyRemain += conPeek(remainQtyCon, PdsCWQtyConPos);

            if (!qtyRemain)
            {
                break;
            }
        }

        if (qtyRemain)
        {
            throw error("@GLS113808");
        }

        this.updateReceiveOrdered_RU(
            _inventTransferLine, 
            _movementTo, 
            InventDim::find(_inventTransferParmLine.InventDimId));

        return inventDimMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates all <see cref="T:InventTransferLine" />s that are related to the internal
    ///    InventTransferParmTable.
    /// </summary>
    [HookableAttribute(true)]
    protected void updateLines()
    {
        // <GEERU>
        boolean                 countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || BrazilParameters::isEnabled();
        InventTransferParmLine  inventTransferParmLinePos, inventTransferParmLineNeg;
        FieldId                 qtyUpdateFieldId;
        // </GEERU>
        InventTransferParmLine  inventTransferParmLine;
        boolean                 mustCallProcessCloseLine;
        // <GEERU>

        // <GIN>
        TaxTrans_IN             taxTransUpdate;
        // </GIN>

        if (BrazilParameters::isEnabled())
        {
            this.updateLines_BR();
        }

        if (countryRegion_RU)
        {
            qtyUpdateFieldId = this.qtyUpdateFieldId_RU();
            select firstonly RecId from inventTransferParmLinePos
                where inventTransferParmLinePos.ParmId     == inventTransferParmTable.ParmId     &&
                      inventTransferParmLinePos.TransferId == inventTransferParmTable.TransferId &&
                      inventTransferParmLinePos.(qtyUpdateFieldId) > 0;

            select firstonly RecId from inventTransferParmLineNeg
                where inventTransferParmLineNeg.ParmId     == inventTransferParmTable.ParmId     &&
                      inventTransferParmLineNeg.TransferId == inventTransferParmTable.TransferId &&
                      inventTransferParmLineNeg.(qtyUpdateFieldId) < 0;

            if (inventTransferParmLinePos.RecId && inventTransferParmLineNeg.RecId)
            {
                throw error("@GLS113809");
            }

            isReturn = inventTransferParmLineNeg.RecId ? true : false;
            isStorno = isReturn && InventTransferParmUpdate::find(inventTransferParmTable.ParmId).Storno_RU;

            ledgerVoucher.findLedgerVoucherObject().parmCorrection(isStorno);
        }
        // </GEERU>

        Set inventTransIds = new Set(Types::String);

        while select forupdate inventTransferParmLine
            index ParmLineIdx
            where inventTransferParmLine.ParmId     == inventTransferParmTable.ParmId &&
                  inventTransferParmLine.TransferId == inventTransferParmTable.TransferId
        {
            if (!mustCallProcessCloseLine && inventTransferParmLine.CloseLine)
            {
                mustCallProcessCloseLine = true;
            }
            this.updateInventTransferLine(inventTransferParmLine);

            // Instrumentation
            parmLineCount++;
            if (inventTransferParmLine.CloseLine)
            {
                parmLineCloseCount++;
            }
            inventTransIds.add(inventTransferParmLine.InventTransId);
        }

        transferLineCount = inventTransIds.elements();

        //We need to close the transfer lines after the processing since we can have multiple parm lines for a single transfer line
        //and we can only close the transfer line once
        if (mustCallProcessCloseLine)
        {
            this.processCloseLine();
        }

        this.sumUpInventoryTransactions();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer)
        {
            update_recordset taxTransUpdate
               setting InvoiceAmount = invoiceAmount
                  where taxTransUpdate.TransferOrderNumber == inventTransferParmTable.TransferId;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReceiveOrdered_RU</Name>
				<Source><![CDATA[
    protected void updateReceiveOrdered_RU(
        InventTransferLine _inventTransferLine,
        InventMovement     _movementTo,
        InventDim          _inventDimFrom)
    {
        InventMov_TransferFrom  movementFrom;
        InventUpd_Estimated     inventUpdate;
        InventTransIdSum        inventTransIdSum;
        InventTrans             inventTransOrdered;
        InventDim               inventDim = _movementTo.inventdim();
        InventQty               qtyRemain;
        InventQty               qtyIssued;
        container               remainQtyCon;
        PdsCWInventQty          cwQtyRemain;
        PdsCWInventQty          cwQtyIssued;
        InventDim               inventDimIssue;
        InventDimParm           inventDimParmIssue;
        InventDim               inventDimReceipt;
        InventDimParm           inventDimParmReceipt;

        InventTransOriginId inventTransOriginIdIssue        = InventTransOrigin::findByInventTransId(_inventTransferLine.InventTransId).RecId;

        InventTransOriginId inventTransOriginIdReceive      = InventTransOriginTransferReceive::findInventTransOriginId(_inventTransferLine.DataAreaId,
                                                                                                    _inventTransferLine.TransferId,
                                                                                                    _inventTransferLine.LineNum);

        movementFrom = InventMov_TransferFrom::newFromInventTransferLine(_inventTransferLine);

        inventDimIssue = movementFrom.inventDimMerged(_inventDimFrom);
        inventDimParmIssue.initFromInventDim(inventDimIssue);

        inventTransIdSum = InventTransIdSum::newTransOriginIdDimension(inventTransOriginIdIssue, inventDimIssue, inventDimParmIssue);
        inventTransIdSum.calcSum();

        qtyIssued = inventTransIdSum.reservPhysical() + inventTransIdSum.financial();
        cwQtyIssued = inventTransIdSum.pdsCWReservPhysical() + inventTransIdSum.pdsCWFinancial();

        inventDimReceipt = _movementTo.inventDimMerged(inventDimIssue);
        inventDimParmReceipt.initFromInventDim(inventDimReceipt);

        inventTransIdSum = InventTransIdSum::newTransOriginIdDimension(inventTransOriginIdReceive, inventDimReceipt, inventDimParmReceipt);
        inventTransIdSum.calcSum();

        qtyRemain = -qtyIssued - inventTransIdSum.financial() - inventTransIdSum.estimated();
        cwQtyRemain = -cwQtyIssued - inventTransIdSum.pdsCWFinancial() - inventTransIdSum.pdsCWEstimated();

        while (qtyRemain > 0)
        {
            select forupdate inventTransOrdered
                where inventTransOrdered.InventTransOrigin  == inventTransOriginIdReceive
                    && inventTransOrdered.StatusReceipt      == StatusReceipt::Ordered
                    && inventTransOrdered.InventDimId        == inventDim.InventDimId;

            if (inventTransOrdered.RecId)
            {
                if (! inventUpdate)
                {
                    inventUpdate = InventUpd_Estimated::newInventMovement(_movementTo);
                }
                remainQtyCon = inventUpdate.updateTransDimReceipt(inventTransOrdered, inventDim, inventDimReceipt, qtyRemain, false, false, cwQtyRemain);
                qtyRemain   -= conPeek(remainQtyCon, InventQtyConPos);
                cwQtyRemain -= conPeek(remainQtyCon, PdsCWQtyConPos);
            }
            else
            {
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnIssue_RU</Name>
				<Source><![CDATA[
    protected container updateReturnIssue_RU(
        InventTransferParmLine _inventTransferParmLine,
        InventTransferLine     _inventTransferLine,
        InventDim              _inventDimReceipt,
        InventDimParm          _inventDimParmReceipt,
        InventQty              _qtyReceived,
        PdsCWInventQty         _cwQtyReceived,
        InventTransOriginId    _inventTransOriginCheck,
        InventMovement         _inventMovement,
        boolean                _updateShipped)
    {
        InventUpd_Financial inventUpd_Financial;
        InventTrans         inventTransCheck;
        InventDim           inventDimCheck;
        InventDimParm       inventDimParmCheck;

        InventTransOriginId markingRefInventTransOrigin;

        InventQty           qtyReceiveTransitVirt,
                            qtyReceiveTransitVirtRemain,
                            qtyUpdated;

        PdsCWInventQty      cwQtyReceiveTransitVirt;
        PdsCWInventQty      cwQtyReceiveTransitVirtRemain;
        PdsCWInventQty      cwQtyUpdated;

        void financialInit (InventDim _inventDim, InventDimParm _inventDimParm, InventQty _qty, PdsCWInventQty _cwQty, CostAmount _retCostAmount = 0)
        {
            if (_updateShipped)
            {
                inventUpd_Financial = InventUpd_Financial::newInventTransferLineShip(_inventMovement,
                                                                                     ledgerVoucher,
                                                                                     _inventTransferParmLine,
                                                                                     _retCostAmount,
                                                                                     _qty,
                                                                                     _inventDim,
                                                                                     _inventDimParm,
                                                                                     _cwQty);
            }
            else
            {
                inventUpd_Financial = InventUpd_Financial::newInventTransferLineReceive(_inventMovement,
                                                                                        ledgerVoucher,
                                                                                        _retCostAmount,
                                                                                        _qty,
                                                                                        _inventDim,
                                                                                        _inventDimParm,
                                                                                        _cwQty);
            }


            inventUpd_Financial.parmTransferOrderVoucherMatched(inventTransferParmTable.VoucherShipmentId);
        }

        void doQtyUpdates()
        {
            InventQty       qtyUpdatedNow   = inventUpd_Financial.updFinancial();
            PdsCWInventQty  cwQtyUpdatedNow = inventUpd_Financial.pdsCWUpdFinancial();

            qtyReceiveTransitVirtRemain -= qtyUpdatedNow;
            cwQtyReceiveTransitVirtRemain -= cwQtyUpdatedNow;

            if (_updateShipped)
            {
                _inventTransferLine.QtyShipped      += qtyUpdatedNow;
                _inventTransferLine.PdsCWQtyShipped += cwQtyUpdatedNow;
            }
            else
            {
                _inventTransferLine.QtyReceived      += qtyUpdatedNow;
                _inventTransferLine.PdsCWQtyReceived += cwQtyUpdatedNow;
            }

            qtyUpdated   -= qtyUpdatedNow;
            cwQtyUpdated -= cwQtyUpdatedNow;
        }

        markingRefInventTransOrigin = _updateShipped ? InventTransOriginTransferTransitFrom::findInventTransOriginId(_inventTransferLine.DataAreaId, _inventTransferLine.TransferId, _inventTransferLine.LineNum) :
                                                       InventTransOriginTransferScrap::findInventTransOriginId(_inventTransferLine.DataAreaId, _inventTransferLine.TransferId, _inventTransferLine.LineNum);

        qtyReceiveTransitVirtRemain = _qtyReceived;
        cwQtyReceiveTransitVirtRemain = _cwQtyReceived;
        CostAmount retCostAmount;
        boolean needSetReturnAmount = !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])            
                                      && !BrazilParameters::isEnabled();

        //look for unmarked returns, init special Update
        while select sum(Qty), sum(PdsCWQty),sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTransCheck
            group by InventDimId
            where inventTransCheck.InventTransOrigin    == _inventTransOriginCheck
               && inventTransCheck.StatusReceipt        == StatusReceipt::Purchased
               && inventTransCheck.InvoiceReturned      == NoYes::Yes
               && !inventTransCheck.MarkingRefInventTransOrigin
           #inventDimJoin(inventTransCheck.inventDimId,inventDimCheck, _inventDimReceipt, _inventDimParmReceipt)
        {
            inventDimCheck = inventTransCheck.inventDim();
            inventDimParmCheck.initFromInventDim(inventDimCheck);

            qtyReceiveTransitVirt = -1 * min(inventTransCheck.Qty, abs(qtyReceiveTransitVirtRemain));
            cwQtyReceiveTransitVirt = -1 * min(inventTransCheck.PdsCWQty, abs(cwQtyReceiveTransitVirtRemain));

            if (inventTransCheck.Qty && needSetReturnAmount)
            {
                retCostAmount = CurrencyExchangeHelper::amount((inventTransCheck.CostAmountPosted + inventTransCheck.CostAmountAdjustment) * qtyReceiveTransitVirt/inventTransCheck.Qty);
            }

            _inventMovement.returnedSpecialCheckUpdate_RU(UnknownNoYes::Yes);
            _inventMovement.parmMarkingRefInventTransOrigin_RU(markingRefInventTransOrigin);

            financialInit(inventDimCheck, inventDimParmCheck, qtyReceiveTransitVirt, cwQtyReceiveTransitVirt, retCostAmount);

            inventUpd_Financial.updateNow();

            doQtyUpdates();

            if (!qtyReceiveTransitVirtRemain)
            {
                break;
            }
        }

        //init standard return update
        if (qtyReceiveTransitVirtRemain)
        {
            markingRefInventTransOrigin = _updateShipped ? InventTransOriginTransferTransitTo::findInventTransOriginId(_inventTransferLine.DataAreaId, _inventTransferLine.TransferId, _inventTransferLine.LineNum) :
                                                           InventTransOriginTransferReceive::findInventTransOriginId(_inventTransferLine.DataAreaId, _inventTransferLine.TransferId, _inventTransferLine.LineNum);

            _inventMovement.returnedSpecialCheckUpdate_RU(UnknownNoYes::No);
            _inventMovement.parmMarkingRefInventTransOrigin_RU(markingRefInventTransOrigin);

            if (needSetReturnAmount)
            {
                select sum(Qty), sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTransCheck
                    where inventTransCheck.InventTransOrigin    == markingRefInventTransOrigin
                       && !inventTransCheck.ReturnInventTransOrigin
                       && inventTransCheck.StatusReceipt      == StatusReceipt::Purchased
                       && inventTransCheck.StatusIssue        == StatusIssue::None
                   #inventDimJoin(inventTransCheck.inventDimId,inventDimCheck, _inventDimReceipt, _inventDimParmReceipt);

                if (inventTransCheck.Qty)
                {
                    retCostAmount = CurrencyExchangeHelper::amount((inventTransCheck.CostAmountPosted + inventTransCheck.CostAmountAdjustment) * qtyReceiveTransitVirtRemain/inventTransCheck.Qty);
                }
            }

            financialInit(_inventDimReceipt, _inventDimParmReceipt, qtyReceiveTransitVirtRemain, cwQtyReceiveTransitVirtRemain, retCostAmount);

            inventUpd_Financial.updateNow();

            doQtyUpdates();
        }

        return [qtyUpdated, cwQtyUpdated];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScrapReturn_RU</Name>
				<Source><![CDATA[
    protected void updateScrapReturn_RU(
        InventTransferParmLine  _inventTransferParmLine,
        InventTransferLine      _inventTransferLine,
        InventMovement          _movementTo,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParm,
        InventQty               _inventQty,
        PdsCWInventQty          _cwQty)
    {
        InventUpd_Financial     inventUpd_Financial;

        InventTrans             inventTransSearch;
        InventDim               inventDimIssue;

        InventQty               qtyRemain;
        PdsCWInventQty          cwQtyRemain;
        InventDim               inventDim;

        InventMov_TransferScrap movement;
        InventTransOriginId     inventTransOriginIdScrap;

        if (! _inventTransferLine.InventTransIdScrap ||
              _inventQty                      == 0   ||
              _inventTransferLine.QtyScrapped == 0)
        {
            return;
        }

        if (abs(_inventQty) > _inventTransferLine.QtyScrapped)
        {
            throw error(strFmt("@GLS113810", abs(_inventQty), _inventTransferLine.QtyScrapped));
        }

        qtyRemain                   = _inventQty;
        cwQtyRemain                 = _cwQty;
        inventDimIssue              = _movementTo.inventDimMerged(_inventDimCriteria);
        inventTransOriginIdScrap    = InventTransOriginTransferScrap::findInventTransOriginId(_inventTransferLine.DataAreaId,
                                                                                              _inventTransferLine.TransferId,
                                                                                              _inventTransferLine.LineNum);

        if (inventTransferParmTable.ExplodeLines && _inventDimCriteria)
        {
            select forceplaceholders sum(Qty), sum(PdsCWQty), InventDimId from inventTransSearch
                group by InventDimId desc
                where inventTransSearch.InventTransOrigin     == inventTransOriginIdScrap
                  &&  inventTransSearch.StatusIssue           == StatusIssue::Sold
                  &&  inventTransSearch.StatusReceipt         == StatusReceipt::None
                  && !inventTransSearch.PackingSlipReturned
                  && !inventTransSearch.InvoiceReturned
            #inventDimExistsJoin(inventTransSearch.InventDimId,inventDim,inventDimIssue,_inventDimParm);
        }
        else
        {
            select sum(Qty), sum(PdsCWQty),  InventDimId from inventTransSearch
                group by InventDimId desc
                where inventTransSearch.InventTransOrigin     == inventTransOriginIdScrap
                  &&  inventTransSearch.StatusIssue           == StatusIssue::Sold
                  &&  inventTransSearch.StatusReceipt         == StatusReceipt::None
                  && !inventTransSearch.PackingSlipReturned
                  && !inventTransSearch.InvoiceReturned;
        }

        while (inventTransSearch.Qty)
        {
            inventTransSearch.Qty      = -1 * max(inventTransSearch.Qty, qtyRemain);
            inventTransSearch.PdsCWQty = -1 * max(inventTransSearch.PdsCWQty, cwQtyRemain);

            movement = InventMov_TransferScrap::newParameters(_inventTransferLine, inventTransSearch, inventTransferParmTable, true, isStorno);

            inventUpd_Financial = InventUpd_Financial::newInventTransferLineScrap(movement, ledgerVoucher, true);

            inventUpd_Financial.parmTransferOrderVoucherMatched(inventTransferParmTable.VoucherShipmentId);

            inventUpd_Financial.updateNow();

            qtyRemain                           += inventUpd_Financial.updFinancial();
            _inventTransferLine.QtyScrapped     -= inventUpd_Financial.updFinancial();
            _inventTransferParmLine.QtyScrapNow -= inventUpd_Financial.updFinancial();

            cwQtyRemain                              += inventUpd_Financial.pdsCWUpdFinancial();
            _inventTransferLine.PdsCWQtyScrapped     -= inventUpd_Financial.pdsCWUpdFinancial();
            _inventTransferParmLine.PdsCWQtyScrapNow -= inventUpd_Financial.pdsCWUpdFinancial();

            if (! qtyRemain)
            {
                break;
            }

            next inventTransSearch;
        }

        if (qtyRemain)
        {
            throw error(strFmt("@GLS113811", qtyRemain));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the number of the voucher that will be used for this update.
    /// </summary>
    /// <returns>
    ///    The number of the voucher that will be used for this update.
    /// </returns>
    Voucher voucherId()
    {
        return voucherId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregateFormTrackingPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is a dummy node used for consolidating all form tracking changelist.
    /// </summary>
    private void aggregateFormTrackingPackage()
    {
        //This method is reserved blank on purpose.
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    private void transitDocument()
    {
        TransitDocumentManager_IN   transitDocManager;
        InventTransferJourLine      jourLineLoc;
        InventTransferParmLine      parmLineLoc;

        transitDocManager = TransitDocumentManager_IN::newManager();

        transitDocManager.transit(inventTransferParmTable, inventTransferJour);

        if (transitDocManager.existsAnyTransitDocType() &&
            transitDocManager.existTransitRuleForTransType(tableNum(InventTransferParmLine)))
        {
            // Form tracking
            while select RecId from jourLineLoc
                where jourLineLoc.VoucherId  == inventTransferJour.VoucherId
                    && jourLineLoc.TransferId == inventTransferJour.TransferId
                join RecId from parmLineLoc
                    where parmLineLoc.ParmId     == inventTransferParmTable.ParmId
                        && parmLineLoc.RecId == jourLineLoc.InventTransferParmLine
            {
                transitDocManager.transit(parmLineLoc, jourLineLoc, inventTransferJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInterimTaxAmountGTE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate interim tax amount with GTE
    /// </summary>
    /// <param name = "_inventTransferParmLine">inventTransferParmLine</param>
    /// <param name = "_inventTransferUpdateType">inventTransferUpdateType</param>
    /// <returns>
    /// A container of loadOnInventoryTaxAmount and interimTaxAmount.
    /// </returns>
    protected container calculateInterimTaxAmountGTE(
        InventTransferParmLine  _inventTransferParmLine,
        InventTransferUpdateType _inventTransferUpdateType)
    {        
        TaxAmountCur                    loadOnInventoryTaxAmount;
        TaxAmountCur                    interimTaxAmount;

        if(TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && _inventTransferParmLine.inventTransferParmTable().UpdateType == _inventTransferUpdateType)
        {
            ITaxableDocument taxableDocument = TaxableDocumentObject::construct(
                TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(_inventTransferParmLine.inventTransferParmTable()));
            ITaxDocument taxDocument = TaxBusinessService::calculateTax(taxableDocument);
            if (taxDocument)
            {
                ITaxDocumentLine taxDocumentLine = taxDocument.findLineBySource(_inventTransferParmLine.TableId, _inventTransferParmLine.RecId);
                if (taxDocumentLine)
                {
                    TaxAccountingPostingProfileDistributionSide side;
                    TaxAccountingPostingProfileDistributionSide offsetSide;
                    if (_inventTransferUpdateType == InventTransferUpdateType::Receive)
                    {
                        side = TaxAccountingPostingProfileDistributionSide::Debit;
                        offsetSide = TaxAccountingPostingProfileDistributionSide::Credit;
                    }
                    else if (_inventTransferUpdateType == InventTransferUpdateType::Shipment)
                    {
                        side = TaxAccountingPostingProfileDistributionSide::Credit;
                        offsetSide = TaxAccountingPostingProfileDistributionSide::Debit;
                    }

                    loadOnInventoryTaxAmount = taxDocumentLine.sumByTaxAccountingProvider(TaxAccountingProvider::Inventory, side).amountTransactionCurrency();
                    loadOnInventoryTaxAmount -= taxDocumentLine.sumByTaxAccountingProvider(TaxAccountingProvider::Inventory, offsetSide).amountTransactionCurrency();

                    interimTaxAmount = taxDocumentLine.sumByTaxAccountingProvider(TaxAccountingProvider::Party, offsetSide).amountTransactionCurrency();
                    interimTaxAmount -= taxDocumentLine.sumByTaxAccountingProvider(TaxAccountingProvider::Party, side).amountTransactionCurrency();                 
                }
            }
        }

        return [loadOnInventoryTaxAmount, interimTaxAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventoryTaxAmountGTE</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculate inventory tax amount with GTE
    /// </summary>
    /// <param name = "_inventTransferParmLine">inventTransferParmLine</param>
    /// <param name = "_side">side</param>
    /// <returns>Amount of inventoryTaxAmount</returns>
    protected TaxAmountCur calculateInventoryTaxAmountGTE(
        InventTransferParmLine _inventTransferParmLine,
        TaxAccountingPostingProfileDistributionSide _side)
    {
        TaxAmountCur inventoryTaxAmount;

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            ITaxDocument taxDocument = TaxBusinessService::calculateTax(TaxableDocumentObject::construct(
            TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(_inventTransferParmLine.inventTransferParmTable())));
            if (taxDocument)
            {
                ITaxDocumentLine taxDocumentline = taxDocument.findLineBySource(_inventTransferParmLine.TableId, _inventTransferParmLine.RecId);
                if (taxDocumentLine)
                {
                    inventoryTaxAmount = taxDocumentline.sumByTaxAccountingProvider(TaxAccountingProvider::Inventory, _side).amountTransactionCurrency();
                }
            }
        }

        return inventoryTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupInventTransferLineUpdateParameters_PostProcessing</Name>
				<Source><![CDATA[
    protected InventTransferLineUpdateParameters setupInventTransferLineUpdateParameters_PostProcessing(InventTransferLine _inventTransferLine)
    {
        InventTransferLineEstimation estimation = InventTransferLineEstimation::newFromLine(_inventTransferLine);
        estimation.parmDropEstimated(NoYes::No);
        estimation.parmUpdateHeader(NoYes::No);
        estimation.parmSkipReservation(NoYes::Yes);
        InventTransferLineUpdateParameters parameters = _inventTransferLine.createUpdateParameters(estimation);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns instrumentation measure for posting lines processed.
    /// </summary>
    /// <returns>Number of posting lines processed.</returns>
    internal int parmParmLineCount()
    {
        return parmLineCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmLineCloseCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns instrumentation measure for posting lines processed that were marked Close.
    /// </summary>
    /// <returns>Number of posting lines processed that were marked Closed.</returns>
    internal int parmParmLineCloseCount()
    {
        return parmLineCloseCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns instrumentation measure for transfer order lines processed.
    /// </summary>
    /// <returns>Number of transfer order lines processed.</returns>
    internal int parmTransferLineCount()
    {
        return transferLineCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post current tax document.
    /// </summary>
    /// <param name="_checkLedgerVoucher">
    /// A Boolean value that indicates whether checking the LedgerVoucher; optional.
    /// </param>
    protected void postTaxDocument(boolean _checkLedgerVoucher = true)
    {
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            boolean runPostTaxDocument = !_checkLedgerVoucher || (ledgerVoucher && (isLedgerVoucherPosted || ledgerVoucher.check()));

            if (runPostTaxDocument)
            {
                ITaxableDocument taxableDocument = TaxableDocumentObject::construct(
                    TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.getTaxableDocmentTransactionTable()));
                TaxBusinessService::postTaxDocument(taxableDocument, ledgerVoucher);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableDocmentTransactionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the taxable document transaction table.
    /// </summary>
    /// <returns>The inventTransferJour table.</returns>
    protected Common getTaxableDocmentTransactionTable()
    {
        return inventTransferJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwPostingAccountError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws posting account error.
    /// </summary>
    /// <param name = "_throwError">Throw error.</param>
    /// <param name = "_itemId">Item id.</param>
    /// <param name = "_accountType">Account type.</param>
    /// <param name = "_errorMessage">Error message.</param>
    private void throwPostingAccountError(boolean _throwError, ItemIdInventoried _itemId, str _accountType, str _errorMessage)
    {
        if (_throwError)
        {
            throw error(strFmt(_errorMessage, _accountType, _itemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwInventoryPostingAccountError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws inventory posting account error.
    /// </summary>
    /// <param name = "_throwError">Throw error.</param>
    /// <param name = "_itemId">Item id.</param>
    /// <param name = "_accountType">Account type.</param>
    protected void throwInventoryPostingAccountError(boolean _throwError, ItemIdInventoried _itemId, InventAccountType _accountType)
    {
        this.throwPostingAccountError(_throwError, _itemId, enum2Str(_accountType), "@TaxLocalization:AccountNotSpecifiedOnTheInventoryPosting");
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwTaxLedgerPostingAccountError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws tax ledger posting account error.
    /// </summary>
    /// <param name = "_throwError">Throw error.</param>
    /// <param name = "_itemId">Item id.</param>
    /// <param name = "_accountType">Account type.</param>
    protected void throwTaxLedgerPostingAccountError(boolean _throwError, ItemIdInventoried _itemId, TaxAccountType_IN _accountType)
    {
        this.throwPostingAccountError(_throwError, _itemId, enum2Str(_accountType), "@TaxLocalization:AccountNotSpecifiedOnTheTaxLedgerPostingGroup");
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// A delegate that is called in the <c>run</c>.
    /// </summary>
    /// <param name = "_inventTransferJour">The <c>InventTransferJour</c> record.</param>
    /// <param name = "_inventTransferTable">The <c>InventTransferTable</c> record.</param>
    delegate void runDelegate(InventTransferJour _inventTransferJour, InventTransferTable _inventTransferTable)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>