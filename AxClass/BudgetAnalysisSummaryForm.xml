<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAnalysisSummaryForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the form runner class for the <c>BudgetAnalysisDimensionSummary</c> form.
/// </summary>
public class BudgetAnalysisSummaryForm
{
    FormRun formRun;

    BudgetAnalysisRequest       request;

    FormCheckBoxControl         ctrlDisplaySeparateDimensions;
    FormCheckBoxControl         ctrlDisplayDimensionName;
    FormCheckBoxControl         ctrlIsClosingIncluded;
    FormControl                 ctrlLedgerDimensionCombineDisplayValue;
    FormDateControl             ctrlFromDate;
    FormDateControl             ctrlToDate;
    FormComboBoxControl         ctrlColumnSet;
    FormComboBoxControl         ctrlPostingLayer;
    FormStringControl           ctrlDimensionSet;
    FormStringControl           ctrlFocusValue;
    FormStringControl           ctrlDateInterval;
    FormGroupControl            ctrlExpenseColumnSet;
    FormGroupControl            ctrlExpenseWithCarryForwardColumnSet;
    FormGroupControl            ctrlRevenueColumnSet;
    FormGroupControl            ctrlOperatingResultsColumnSet;
    FormGroupControl            ctrlExpenseColumnSet_Total;
    FormGroupControl            ctrlExpenseWithCarryForwardColumnSet_Total;
    FormGroupControl            ctrlRevenueColumnSet_Total;
    FormGroupControl            ctrlOperatingResultsColumnSet_Total;
    FormGridControl             ctrlSummaryGrid;
    QuickFilterControl          quickFilterControl;

    #Dimensions
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>apply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invoked when the apply button is clicked.
    /// </summary>
    /// <param name="_budgetAnalysisDimensionTransTemp">
    /// The reference of <c>BudgetAnalysisDimensionTransTemp</c> table.
    /// </param>
    /// <param name="_budgetAnalysisDimensionSummaryTemp">
    /// The reference of <c>BudgetAnalysisDimensionSummaryTmp</c> table.
    /// </param>
    /// <param name="_dimensionFocusNameTmp">
    /// The reference of <c>DimensionFocusNameTmp</c> table.
    /// </param>
    public void apply(
        BudgetAnalysisDimensionSummaryTmp _budgetAnalysisDimensionTransTemp,
        BudgetAnalysisDimensionSummaryTmp _budgetAnalysisDimensionSummaryTemp,
        DimensionFocusNameTmp              _dimensionFocusNameTmp)
    {
        BudgetAnalysisDataProcessor budgetAnalysisDataProcessor;
        DimensionHierarchyId        dimensionHierarchyId    = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, ctrlDimensionSet.valueStr()).RecId;
        FromDate                    fromDate                = ctrlFromDate.dateValue();
        ToDate                      toDate                  = ctrlToDate.dateValue();
        BudgetAnalysisColumnSet     columnSet               = any2Enum(ctrlColumnSet.selection());
        boolean                     separateDimensionValues = ctrlDisplaySeparateDimensions.value();
        boolean                     displayDimensionName    = ctrlDisplayDimensionName.value();
    
        request.parmColumnSet(columnSet);
        request.parmFromDate(fromDate);
        request.parmToDate(toDate);
        request.parmDimensionHierarchyId(dimensionHierarchyId);
        request.parmPostingLayer(ctrlPostingLayer.selection());
        request.parmIncludeClosingEntries(ctrlIsClosingIncluded.value());
        request.parmRequestType(BudgetAnalysisRequestType::Summary);
        request.parmSummaryTempTable(_budgetAnalysisDimensionTransTemp);
        request.parmTotalsTempTable(_budgetAnalysisDimensionSummaryTemp);
        request.parmDimensionFocusNameTmp(_dimensionFocusNameTmp);
        request.parmDateCode(ctrlDateInterval.valueStr());
        request.parmDisplayDimensionInSeparateColumns(ctrlDisplaySeparateDimensions.value());
        request.parmDisplayAccountNameColumn(ctrlDisplayDimensionName.value());
    
        budgetAnalysisDataProcessor = BudgetAnalysisDataProcessor::construct(request);
    
        xSysLastValue::saveLast(request);
    
        budgetAnalysisDataProcessor.process();
    
        ctrlFocusValue.visible(displayDimensionName);
        this.showHideGridColumns(columnSet);
        this.displayDimensionAttributeValueColumns(dimensionHierarchyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDimensionAttributeValueColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show or hide the dimension attribute columns based on the financial dimension set selected.
    /// </summary>
    /// <param name="_dimensionHierarchyId">
    /// The dimension hierarchy ID to be used to show or hide the columns.
    /// </param>
    public void displayDimensionAttributeValueColumns(DimensionHierarchyId _dimensionHierarchyId)
    {
        int  i;
        FormStringControl       dimensionFormControl;
        DimensionSetSegmentName dimensionSetSegmentNames;
        
        if (ctrlDisplaySeparateDimensions.value())
        {
            // Hide Ledger Account column and display individual segments for the selected financial dimension set
            ctrlLedgerDimensionCombineDisplayValue.visible(false);
    
            dimensionSetSegmentNames = DimensionHierarchyLevel::getDimensionHierarchyLevelNames(_dimensionHierarchyId);
            
            int  dimensionHierarchylevelCount = DimensionHierarchy::getLevelCount(_dimensionHierarchyId);
    
            for (i = 1; i <= #MaxDimensionHierarchyLevelsInStructure; i++)
            {
                if (i <= dimensionHierarchylevelCount)
                {
                    dimensionFormControl = this.getDimensionAttributeControl(i);
    
                    dimensionFormControl.label(dimensionSetSegmentNames[i]);
                    dimensionFormControl.visible(true);
                }
                else
                {
                    dimensionFormControl = this.getDimensionAttributeControl(i);
                    dimensionFormControl.visible(false);
                }
            }
        }
        else
        {
            // Show Ledger Account column and hide individual segments for the selected financial dimension set
            ctrlLedgerDimensionCombineDisplayValue.visible(true);
    
            for (i = 1; i <= #MaxDimensionHierarchyLevelsInStructure; i++)
            {
                dimensionFormControl = this.getDimensionAttributeControl(i);
                dimensionFormControl.visible(false);
            }
        }

        this.updateQuickFilterControlList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuickFilterControlList</Name>
				<Source><![CDATA[
    private void updateQuickFilterControlList()
    {
        List quickFilterList = new List(Types::String);
        List quickFilterLabels = new List(Types::String);
        int i;

        for (i = 1; i <= ctrlSummaryGrid.controlCount(); i++)
        {
            FormControl ctrlSummaryGridColumn = ctrlSummaryGrid.controlNum(i);

            if (ctrlSummaryGridColumn.visible())
            {
                quickFilterList.addEnd(ctrlSummaryGridColumn.name());
                quickFilterLabels.addEnd(ctrlSummaryGridColumn.labelText());
            }
        }

        quickFilterControl.parmFieldList(quickFilterList);
        quickFilterControl.parmFieldLabels(quickFilterLabels);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeControl</Name>
				<Source><![CDATA[
    private FormStringControl getDimensionAttributeControl(int _dimHierLevel)
    {
        if (_dimHierLevel <= 9)
        {
            return formRun.design().controlName(strFmt('DimensionAttributeValue0%1', _dimHierLevel));
        }
        else
        {
            return formRun.design().controlName(strFmt('DimensionAttributeValue%1', _dimHierLevel));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    private void initControls()
    {
        request = BudgetAnalysisRequest::construct();
    
        ctrlDisplaySeparateDimensions               = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, DisplaySeparateDimensionValues)));
        ctrlDisplayDimensionName                    = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, DisplayDimensionNameColumn)));
        ctrlLedgerDimensionCombineDisplayValue      = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, DimensionAttributeValueCombination_DisplayValue)));
        ctrlFromDate                                = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlFromDate)));
        ctrlToDate                                  = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlToDate)));
        ctrlColumnSet                               = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlColumnSet)));
        ctrlDimensionSet                            = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlDimensionSet)));
        ctrlFocusValue                              = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, DimensionFocusNameTmp_FocusValue)));
        ctrlExpenseColumnSet                        = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlExpenseColumnsSet)));
        ctrlExpenseWithCarryForwardColumnSet        = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlExpenseWithCarryForwardColumnsSet)));
        ctrlRevenueColumnSet                        = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlRevenueColumnsSet)));
        ctrlOperatingResultsColumnSet               = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlOperatingResultsColumnsSet)));
        ctrlExpenseColumnSet_Total                  = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlExpenseColumnsSet_Total)));
        ctrlExpenseWithCarryForwardColumnSet_Total  = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlExpenseWithCarryForwardColumnsSet_Total)));
        ctrlRevenueColumnSet_Total                  = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlRevenueColumnsSet_Total)));
        ctrlOperatingResultsColumnSet_Total         = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlOperatingResultsColumnsSet_Total)));
        ctrlPostingLayer                            = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlPostingLayer)));
        ctrlIsClosingIncluded                       = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlIsClosingIncluded)));
        ctrlDateInterval                            = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlDateInterval)));
        ctrlSummaryGrid                             = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, ctrlSummaryGrid)));
        quickFilterControl                          = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionFocusSummary, QuickFilterControl)));
    
        this.initValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    private void initValue()
    {
        xSysLastValue::getLast(request);
    
        ctrlColumnSet.selection(enum2int(request.parmColumnSet()));
        ctrlFromDate.dateValue(DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), DateTimeUtil::getToday(0)));
        ctrlToDate.dateValue(DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), DateTimeUtil::getToday(0)));
        ctrlPostingLayer.selection(request.parmPostingLayer());
        ctrlDimensionSet.text(DimensionHierarchy::getMainAccountFocus().Name);
        ctrlIsClosingIncluded.value(request.parmIncludeClosingEntries());
        ctrlDateInterval.text(request.parmDateCode());
        ctrlDisplaySeparateDimensions.value(request.parmdisplayDimensionInSeparateColumns());
        ctrlDisplayDimensionName.value(request.parmDisplayAccountNameColumn());

        DimensionHierarchyId        dimensionHierarchyId    = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, ctrlDimensionSet.valueStr()).RecId;
        BudgetAnalysisColumnSet     columnSet               = any2Enum(ctrlColumnSet.selection());

        this.showHideGridColumns(columnSet);
        this.displayDimensionAttributeValueColumns(dimensionHierarchyId);
        ctrlFocusValue.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormRun</Name>
				<Source><![CDATA[
    private void setFormRun(FormRun _formRun)
    {
        formRun = _formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>BudgetAnalysisDimensionDetail</c> form.
    /// </summary>
    /// <param name="_budgetAnalysisColumn">
    /// An enum of type <c>BudgetAnalysisColumn</c>.
    /// </param>
    /// <param name="_focusLedgerDimension">
    /// The ledger dimension to filter the detail records.
    /// </param>
    public void showDetails(
        BudgetAnalysisColumns  _budgetAnalysisColumn,
        LedgerDimensionAccount _focusLedgerDimension)
    {
        Args formArgs = new Args();
    
        request.parmFocusLedgerDimensionId(_focusLedgerDimension);
        request.parmColumn(_budgetAnalysisColumn);
        request.parmRequestType(BudgetAnalysisRequestType::Details);
    
        formArgs.parmObject(request);
    
        new MenuFunction(menuitemDisplayStr(BudgetAnalysisDimensionDetails), MenuItemType::Display).run(formArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showHideGridColumns</Name>
				<Source><![CDATA[
    private void showHideGridColumns(BudgetAnalysisColumnSet _columnSet)
    {
        ctrlExpenseColumnSet.visible(_columnSet == BudgetAnalysisColumnSet::ExpenseBudget);
        ctrlExpenseColumnSet_Total.visible(_columnSet == BudgetAnalysisColumnSet::ExpenseBudget);
        ctrlExpenseWithCarryForwardColumnSet.visible(_columnSet == BudgetAnalysisColumnSet::ExpenseBudgetWithCarryForward);
        ctrlExpenseWithCarryForwardColumnSet_Total.visible(_columnSet == BudgetAnalysisColumnSet::ExpenseBudgetWithCarryForward);
        ctrlRevenueColumnSet.visible(_columnSet == BudgetAnalysisColumnSet::RevenueBudget);
        ctrlRevenueColumnSet_Total.visible(_columnSet == BudgetAnalysisColumnSet::RevenueBudget);
        ctrlOperatingResultsColumnSet.visible(_columnSet == BudgetAnalysisColumnSet::OperatingResults);
        ctrlOperatingResultsColumnSet_Total.visible(_columnSet == BudgetAnalysisColumnSet::OperatingResults);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetAnalysisSummaryForm construct(FormRun _formRun)
    {
        BudgetAnalysisSummaryForm budgetAnalysisSummaryForm = new BudgetAnalysisSummaryForm();
    
        budgetAnalysisSummaryForm.setFormRun(_formRun);
        budgetAnalysisSummaryForm.initControls();
    
        return budgetAnalysisSummaryForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        MenuFunction menuFunction;
    
        if (BudgetParameters::find().DisplayLegacyBudgetAnalysis)
        {
            menuFunction = new MenuFunction(menuitemDisplayStr(BudgetAnalysisInquiry_PSN), MenuItemType::Display);
        }
        else
        {
            menuFunction = new MenuFunction(menuitemDisplayStr(BudgetAnalysisDimensionFocusSummary), MenuItemType::Display);
        }
    
        menuFunction.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>