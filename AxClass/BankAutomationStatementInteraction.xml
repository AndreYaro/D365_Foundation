<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAutomationStatementInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankAutomationStatementInteraction</c> class is used to controll the enable status of buttons on <c>BankAutomationStatementForm</c> form.
/// </summary>
internal class BankAutomationStatementInteraction extends PageInteraction
{
    private BankAutomationStatementInteractionHelper interactionHelper;
    private FormRun currentFormRun;
    private BankAutomationStatementFormView currentFormView;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankReconStatement_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the selectionChanged and enables the action pane buttons.
    /// </summary>
    [FormDataSourceInteractionAttribute(tableStr(BankStmtISOAccountStatement), 'SelectionChanged')]
    public void bankReconStatement_DS_selectionChanged()
    {
        currentFormRun = this.page().formRun();
        currentFormView = currentFormRun.getFormView();

        BankStmtISOAccountStatement statement = this.page().activeRecord(tableStr(BankStmtISOAccountStatement));
        BankStmtISOReportEntry statementLine = this.page().activeRecord(tableStr(BankStmtISOReportEntry));

        currentFormView.setHeaderTitle(statement);

        interactionHelper = BankAutomationStatementInteractionHelper::construct(statement);
        interactionHelper.initFormInteraction();
        this.setHeaderButtonVisible();
        this.setHeaderButtonEnabled();

        if (currentFormRun.viewOptionHelper().getViewOption() != FormViewOption::Grid)
        {
            this.setLineViewHeaderAndCardsGroupVisible(!interactionHelper.isOpenStatementForm());
            this.setRelatedWorksheetTabVisible(!interactionHelper.isOpenStatementForm());

            BankAutomationStatementFormViewMatchingStatusPresenter matchingCardPresenter = currentFormView.getMatchingCardPresenter();
            matchingCardPresenter.refreshBookQueryToOriginQuery(statement);

            if (statement.RecId)
            {
                // Matching status cards refresh.
                matchingCardPresenter.refreshAllMatchingStatusCardsStatisticsContent();

                // Related worksheet cards refresh.
                BankAutomationStatementFormViewRelatedWorksheetPresenter relatedWorksheetPresenter = currentFormView.getRelatedWorksheetPresenter();
                relatedWorksheetPresenter.refreshRelatedWorksheetQuery(statement);
                if (currentFormRun.viewOptionHelper().getViewOption() == FormViewOption::Details)
                {
                    relatedWorksheetPresenter.expandCollapseTabPage();
                }

                // Statement form design refresh.
                this.updateStatementFormDetailsViewDesign();
            }
            else
            {
                this.updateStatementFormDetailsViewDesignForNewStatement();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderButtonVisible</Name>
				<Source><![CDATA[
    private void setHeaderButtonVisible()
    {
        if (interactionHelper.isOpenStatementForm())
        {
            currentFormRun.design().viewEditMode(ViewEditMode::Edit);
        }
        else
        {
            currentFormRun.design().viewEditMode(ViewEditMode::View);
        }
        this.page().actionPaneControlVisible(formControlStr(BankAutomationStatementForm, ValidateButton), interactionHelper.getButtonValidateVisible());
        this.page().actionPaneControlVisible(formControlStr(BankAutomationStatementForm, ConfirmButton), interactionHelper.getButtonConfirmVisible());
        this.page().actionPaneControlVisible(formControlStr(BankAutomationStatementForm, ReopenButton), interactionHelper.getButtonReopenVisible());
        this.page().actionPaneControlVisible(formControlStr(BankAutomationStatementForm, ReconcileInWorksheetButton), interactionHelper.getButtonReconcileInWorksheetVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled property on the header action pane buttons.
    /// </summary>
    private void setHeaderButtonEnabled()
    {
        this.page().actionPaneControlEnabled(formControlStr(BankAutomationStatementForm, ValidateButton), interactionHelper.getButtonValidateEnabled());
        this.page().actionPaneControlEnabled(formControlStr(BankAutomationStatementForm, ConfirmButton), interactionHelper.getButtonConfirmEnabled());
        this.page().actionPaneControlEnabled(formControlStr(BankAutomationStatementForm, ReopenButton), interactionHelper.getButtonReopenEnabled());
        this.page().actionPaneControlEnabled(formControlStr(BankAutomationStatementForm, ReconcileInWorksheetButton), interactionHelper.getButtonReconcileInWorksheetEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled property on the line action pane buttons.
    /// </summary>
    private void setLineButtonEnabled()
    {
        this.page().actionPaneControlEnabled(formControlStr(BankAutomationStatementForm, AddLineButton), interactionHelper.getButtonAddLineEnabled());
        this.page().actionPaneControlEnabled(formControlStr(BankAutomationStatementForm, RemoveLineButton), interactionHelper.getButtonRemoveLineEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatementFormDetailsViewDesign</Name>
				<Source><![CDATA[
    private void updateStatementFormDetailsViewDesign()
    {
        // Header tab only visible when the statement is open, status cards only visible when the statement is not open.
        boolean isOpenStatementForm = interactionHelper.isOpenStatementForm();

        if (isOpenStatementForm)
        {
            currentFormView.updateFormDetailsViewDesignToMatchingStatusType(BankAutomationStatementFormViewMatchingStatusType::Open);
        }
        else
        {
            // Every time when selecting other statement, the matching status cards should focus on the total card.
            BankAutomationStatementFormViewMatchingStatusPresenter matchingCardPresenter = currentFormView.getMatchingCardPresenter();
            if (matchingCardPresenter)
            {
                currentFormView.updateFormDetailsViewDesignToMatchingStatusType(BankAutomationStatementFormViewMatchingStatusType::Total);
                matchingCardPresenter.setFocusToStatusCardByStatusType(BankAutomationStatementFormViewMatchingStatusType::Total);
            }
        }

        this.setLineButtonEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatementFormDetailsViewDesignForNewStatement</Name>
				<Source><![CDATA[
    private void updateStatementFormDetailsViewDesignForNewStatement()
    {
        this.setLineViewHeaderAndCardsGroupVisible(false);
        this.setRelatedWorksheetTabVisible(false);
        currentFormView.updateLineViewLinesGridCaption(BankAutomationStatementFormViewMatchingStatusType::Open);
        currentFormView.updateGridButtonVisibilityByMatchingStatus(BankAutomationStatementFormViewMatchingStatusType::Open);
        this.setLineButtonEnabled();
        currentFormRun.expandFactBoxPaneAtStart();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineViewHeaderAndCardsGroupVisible</Name>
				<Source><![CDATA[
    private void setLineViewHeaderAndCardsGroupVisible(boolean _isCardsGroupVisible)
    {
        FormTabPageControl lineViewHeaderTabPageControl = currentFormRun.design().controlName(formControlStr(BankAutomationStatementForm, LineViewHeader));
        FormGroupControl lineViewMatchingStatusCardsGroupControl = currentFormRun.design().controlName(formControlStr(BankAutomationStatementForm, LineViewMatchingStatusCards));
        lineViewHeaderTabPageControl.visible(!_isCardsGroupVisible);
        lineViewMatchingStatusCardsGroupControl.visible(_isCardsGroupVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRelatedWorksheetTabVisible</Name>
				<Source><![CDATA[
    private void setRelatedWorksheetTabVisible(boolean _isRelatedWorksheetTabVisible)
    {
        FormTabPageControl relatedWorksheetTabPageControl = currentFormRun.design().controlName(formControlStr(BankAutomationStatementForm, RelatedWorksheetTabPag));
        relatedWorksheetTabPageControl.visible(_isRelatedWorksheetTabVisible);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>