<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_InventItemPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>InventItemPrice</c> form
/// </summary>
public class PmfFormCtrl_InventItemPrice extends PmfFormCtrl
{
    str bomIdControlName;
    str bomIdGroupName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRule(
                formRun.design().controlName(bomIdGroupName),
                formRun.design().controlName(bomIdControlName),
                methodstr(PmfFormCtrl_InventItemPrice, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO529");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the process industries functionality is enabled
    /// </summary>
    /// <returns>
    /// true, if the configuration key is enabled
    /// </returns>
    /// <remarks>
    /// The method is required to feed into the button manager.
    /// </remarks>
    public NoYes isFormulaEnabled()
    {
        return #PmfEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_InventItemPrice construct()
    {
        return new PmfFormCtrl_InventItemPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMIdControlName</Name>
				<Source><![CDATA[
    public str parmBOMIdControlName(str _bomIdControlName = bomIdControlName)
    {
        bomIdControlName = _bomIdControlName;
        return bomIdControlName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMIdGroupName</Name>
				<Source><![CDATA[
    public str parmBOMIdGroupName(str _bomIdGroupName = bomIdGroupName)
    {
        bomIdGroupName = _bomIdGroupName;
        return bomIdGroupName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_formRun">
    /// The form element to create the form control handler for
    /// </param>
    /// <param name="__bomIdControlName">
    /// The name of the <c>BOMId</c> control from the form element.
    /// </param>
    /// <param name="__bomIdGroupName">
    /// The name of the group where the <c>BOMId</c> control is located in the form element.
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_InventItemPrice newFromForm(
        FormRun _formRun,
        str     _bomIdControlName,
        str     _bomIdGroupName)
    {
        PmfFormCtrl_InventItemPrice frmCtrl;

        frmCtrl = PmfFormCtrl_InventItemPrice::construct();
        frmCtrl.parmFormRun(_formRun);
        frmCtrl.parmBOMIdControlName(_bomIdControlName);
        frmCtrl.parmBOMIdGroupName(_bomIdGroupName);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>