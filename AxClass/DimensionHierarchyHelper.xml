<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionHierarchyHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionHierarchyHelper</c> class has helper methods for working with the <c>DimensionHierarchy</c> table
/// and subscriber methods to delegates on the <c>DimensionHierarchy</c> table.
/// </summary>
class DimensionHierarchyHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the balance initialization state of the specified dimension hierarchy.
    /// </summary>
    /// <param name = "_focusDimensionHierarchyRecId">The record ID of the dimension hierarchy.</param>
    /// <param name = "_oldState">The old balance initialization state.</param>
    /// <param name = "_newState">The new balance initialization state.</param>
    /// <returns></returns>
    public static boolean updateState(
        DimensionFocusStateRecId _focusDimensionHierarchyRecId,
        DimensionFocusBalanceInitializationState _oldState,
        DimensionFocusBalanceInitializationState _newState)
    {
        return DimensionHierarchySupportProvider::updateState(_focusDimensionHierarchyRecId, _oldState, _newState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimSetValue2Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a concatenated string from the specified dimension attribute criteria and dimension separator.
    /// </summary>
    /// <param name = "_dimensionAttributes">A container of the dimension attributes to be concatenated.</param>
    /// <param name = "_dimensionCriteria">A container of the dimension criteria to be concatenated.</param>
    /// <param name = "_dimensionSeparator">The separator character.</param>
    /// <param name = "_dimensionCriteriaStartIndex">The starting index of the criteria.</param>
    /// <returns>A string of concatenated dimension criteria.</returns>
    public static DimensionSortValue dimSetValue2Str(
        container _dimensionAttributes,
        container _dimensionCriteria,
        DimensionsStaticTextString _dimensionSeparator,
        int _dimensionCriteriaStartIndex = 1)
    {
        int attributeIndex;
        int criteriaIndex;
        DimensionSortValue tmpStr;

        // loop stops at the end of the attribute values
        for (attributeIndex = 1; attributeIndex <= conLen(_dimensionAttributes); attributeIndex++)
        {
            criteriaIndex = attributeIndex + _dimensionCriteriaStartIndex - 1;

            if (criteriaIndex > conLen(_dimensionCriteria))
            {
                // stop because we are out of criteria values
                break;
            }

            if (strLen(tmpStr) > 0)
            {
                tmpStr += ChartOfAccounts::dimensionsStaticTextString(_dimensionSeparator);
            }

            tmpStr += conPeek(_dimensionCriteria, criteriaIndex);
        }

        return tmpStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>focusValue2Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a concatenated string from the specified account number, dimension criteria and dimension separator.
    /// </summary>
    /// <param name = "_focusTemplate">A container of the dimension focus template to be concatenated.</param>
    /// <param name = "_accountNum">The account number string to be concatenated.</param>
    /// <param name = "_dimensionCriteriaList">A container of the dimension criteria to be concatenated.</param>
    /// <param name = "_startFrom">The starting index of the criteria.</param>
    /// <param name = "_dimensionSeparator">The separator character.</param>
    /// <returns>A string of concatenated account and dimension criteria.</returns>
    public static DimensionSortValue focusValue2Str(
        container _focusTemplate,
        str _accountNum,
        container _dimensionCriteriaList,
        int _startFrom = 1,
        DimensionsStaticTextString _dimensionSeparator = DimensionsStaticTextString::Separator)
    {
        int                 attributeIndex, end;
        DimensionSortValue  tmpStr;

        end = conLen(_focusTemplate) + _startFrom - 1;

        // loop processes the attributes
        for (attributeIndex = _startFrom; attributeIndex <= end; attributeIndex++)
        {
            if (attributeIndex > _startFrom)
            {
                tmpStr += ChartOfAccounts::dimensionsStaticTextString(_dimensionSeparator);
            }

            if (conPeek(_focusTemplate, attributeIndex) == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount) && _accountNum)
            {
                tmpStr += _accountNum;
            }
            else if (conLen(_dimensionCriteriaList) >= attributeIndex)
            {
                // Dimension criteria list is a container of values, focus
                // template is a parallel container of attributes
                tmpStr += conPeek(_dimensionCriteriaList, attributeIndex);
            }
        }

        return tmpStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDimensionSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a dimension set lookup.
    /// </summary>
    /// <param name="_dimensionSetStringControl">
    /// The dimension set control.
    /// </param>
    /// <param name="_filterInitializationState">
    /// true to filter by focus initialzation state; optional.
    /// </param>
    /// <param name="_initializationState">
    /// The focus initialization state to filter by; optional.
    /// </param>
    public static void lookupDimensionSet(
        FormStringControl _dimensionSetStringControl,
        boolean _filterInitializationState = false,
        DimensionFocusBalanceInitializationState _initializationState = DimensionFocusBalanceInitializationState::Initialized)
    {
        DimensionHierarchySupportProvider::lookupDimensionSet(_dimensionSetStringControl, _filterInitializationState, _initializationState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionAttrExt_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the set of all dimension attributes (with child dimension attributes)
    /// </summary>
    /// <returns>
    /// the set of all dimension attributes.
    /// </returns>
    public static Set dimensionAttrExt_RU(RecId recId)
    {
        DimensionHierarchyLevel dimHierarchyLevel;
        DimensionAttribute      dimAttr;
        Set                     set = new Set(Types::String);

        while select RecId from dimHierarchyLevel
                where dimHierarchyLevel.DimensionHierarchy == recId
            join Name from dimAttr
                where dimAttr.RecId             == dimHierarchyLevel.DimensionAttribute
                   && dimAttr.BackingEntityType != tableNum(MainAccount)
        {
            set.add(dimAttr.Name);
        }

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFocusTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a container of dimension attribute ID values in the order specified by the dimension
    /// hierarchy record.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// A <c>DimensionHierarchy</c> table.
    /// </param>
    /// <returns>
    /// A container of dimension attribute ID values.
    /// </returns>
    public static container generateFocusTemplate(DimensionHierarchy _dimensionHierarchy)
    {
        container                   tmpTemplateMainFocusList = conNull();
        DimensionTopicsPrioritizer  dimensionTopicsPrioritizer;
        DimensionTopic              dimensionTopic;

        dimensionTopicsPrioritizer = DimensionTopicsPrioritizer::construct(_dimensionHierarchy);

        dimensionTopic = dimensionTopicsPrioritizer.firstDimensionTopic();
        while (dimensionTopic)
        {
            tmpTemplateMainFocusList += dimensionTopic.parmDimensionAttributeId();
            dimensionTopic = dimensionTopicsPrioritizer.nextDimensionTopic(dimensionTopic);
        }

        return tmpTemplateMainFocusList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefFocus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the <c>DimensionFocus</c> form for the specified <c>DimensionHierarchy</c>.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// The <c>DimensionHierarchy</c> record used to position the record on the <c>DimensionFocus</c> form.
    /// </param>
    /// <param name="_caller">
    /// The form that view details was selected from.
    /// </param>
    /// <param name="_parm">
    /// Parameters to supply to the <c>DimensionFocus</c> form; optional.
    /// </param>
    public static void jumpRefFocus(
        DimensionHierarchy  _dimensionHierarchy,
        Object              _caller,
        str                 _parm = '')
    {
        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(DimensionFocusTable), MenuItemType::Display);
        Args         args = new args();

        args.caller(_caller);
        args.parm(_parm);
        args.lookupRecord(_dimensionHierarchy);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefAccountStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the <c>DimensionConfigureAccountStructure</c> form for the specified <c>DimensionHierarchy</c>.
    /// </summary>
    /// <param name="_dimensionHierarchyId">
    /// The <c>DimensionHierarchy</c> record ID used to position the record on the <c>DimensionConfigureAccountStructure</c> form.
    /// </param>
    /// <param name="_caller">
    /// The form that view details was selected from.
    /// </param>
    public static void jumpRefAccountStructure(
        DimensionHierarchyId    _dimensionHierarchyId,
        Object                  _caller)
    {
        Args accountStructureArgs = new Args();

        if (_dimensionHierarchyId)
        {
            DimensionHierarchy dimensionHierarchy = DimensionHierarchy::find(_dimensionHierarchyId);

            if (dimensionHierarchy.StructureType == DimensionHierarchyType::AccountStructure)
            {
                accountStructureArgs.record(dimensionHierarchy);

                MenuFunction menuFunction = new MenuFunction(menuitemdisplaystr(DimensionConfigureAccountStructureDetails), MenuItemType::Display);
                menufunction.run(accountStructureArgs);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedInInventSumDateFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the current record is being used as inventory turnover dimension.
    /// </summary>
    /// <returns>
    ///     True if the current record is being used as inventory turnover dimension; otherwise, false.
    /// </returns>
    [SubscribesTo(tablestr(DimensionHierarchy), delegatestr(DimensionHierarchy, isUsedInInventSumDateFinancial))]
    public static void isUsedInInventSumDateFinancial(RecId recId, EventHandlerResult _ret)
    {
        InventParameters inventParameters;

        if (recId)
        {
            select firstonly crosscompany RecId from inventParameters
                where inventParameters.InventSumDateFinancialDimensionFocus_RU == recId;
        }

        _ret.result(inventParameters.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates records related to the <c>DimensionHierarchy</c> record when the <c>postValidateWrite</c> delegate
    /// on the <c>DimensionHierarchy</c> table is called.
    /// </summary>
    /// <param name = "dimHierarchy">The <c>DimensionHierarchy</c> record validated.</param>
    /// <param name = "_ret">The event handler result.</param>
    [SubscribesTo(tablestr(DimensionHierarchy), delegatestr(DimensionHierarchy, postValidateWrite))]
    public static void postValidateWrite(DimensionHierarchy dimHierarchy, EventHandlerResult _ret)
    {
        LedgerStructure ledgerStructure;
        if (dimHierarchy.DeletedVersion && !dimHierarchy.orig().DeletedVersion)
        {
            while select Ledger from ledgerStructure
                where ledgerStructure.DimensionHierarchy == dimHierarchy.RecId
            {
                _ret.result( _ret.result() && !LedgerStructureDelegates::callCheckIfStuctureRemovalFromLedgerIsPrevented(dimHierarchy, Ledger::find(ledgerStructure.Ledger)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyIdByAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a system-generated dimension hierarchy for the specified account type.
    /// </summary>
    /// <param name="_accountType">
    /// The account type from which to retrieve a dimension hierarchy.
    /// </param>
    /// <param name="_enumType">
    /// The type of the enumeration that specifies the account type.
    /// </param>
    /// <param name="_custVend">
    /// A value that indicates whether this is a customer or a vendor module.
    /// </param>
    /// <returns>
    /// A system-generated dimension hierarchy for the specified account type.
    /// </returns>
    public static RecId getHierarchyIdByAccountType(
        int _accountType,
        EnumId _enumType = enumNum(LedgerJournalACType),
        ModuleInventCustVend _custVend = ModuleInventCustVend::Cust)
    {
        DimensionHierarchyType dimHierarchyType;

        // Set structure type based on account type
        dimHierarchyType = DimensionHierarchyHelper::getHierarchyTypeByAccountType(_accountType, _enumType, _custVend);
        return DimensionHierarchy::getHierarchyIdByHierarchyType(dimHierarchyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDimensionHierarchyTypeFromPartyModuleDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>DimensionHierarchyType</c> corresponding to the party module.
    /// </summary>
    /// <param name = "_module">A <c>ModuleInventCustVend</c> value.</param>
    /// <param name = "_result">Subscribers can use this to provide the <c>DimensionHierarchyType</c>.</param>
    static delegate void retrieveDimensionHierarchyTypeFromPartyModuleDelegate(
        ModuleInventCustVend _module,
        EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyTypeByAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>DimensionHierarchyType</c> field for the specified account type.
    /// </summary>
    /// <param name="_accountType">
    /// The account type from which to retrieve a <c>DimensionHierarchyType</c>.
    /// </param>
    /// <param name="_enumType">
    /// The type of the enumeration that specifies the account type.
    /// </param>
    /// <param name="_custVend">
    /// A value that indicates whether this is a customer or vendor module.
    /// </param>
    /// <returns>
    /// A system-generated dimension hierarchy for the specified account type.
    /// </returns>
    public static DimensionHierarchyType getHierarchyTypeByAccountType(
        int _accountType,
        EnumId _enumType = enumNum(LedgerJournalACType),
        ModuleInventCustVend _custVend = ModuleInventCustVend::Cust)
    {
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        switch (_enumType)
        {
            case enumNum(LedgerJournalACType):
                LedgerJournalACType accountType = any2Enum(_accountType);
                switch (accountType)
                {
                    case LedgerJournalACType::Bank:
                        return DimensionHierarchyType::BankAccount;
                    case LedgerJournalACType::Cust:
                        return  DimensionHierarchyType::Customer;
                    case LedgerJournalACType::FixedAssets:
                        return  DimensionHierarchyType::FixedAsset;
                    case LedgerJournalACType::Ledger:
                        return  DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                    case LedgerJournalACType::Project:
                        return  DimensionHierarchyType::Project;
                    case LedgerJournalACType::Vend:
                        return  DimensionHierarchyType::Vendor;
                    // <GEERU>
                    case LedgerJournalACType::FixedAssets_RU:
                        return  DimensionHierarchyType::FixedAssets_RU;
                    case LedgerJournalACType::RDeferrals:
                        return  DimensionHierarchyType::RDeferrals;
                    case LedgerJournalACType::RCash:
                        return  DimensionHierarchyType::RCash;
                    case LedgerJournalACType::Employee_RU:
                        return  DimensionHierarchyType::Employee_RU;
                    // </GEERU>
                }
                break;

            case enumNum(TrvPostMethod):
                switch (_accountType)
                {
                    case TrvPostMethod::Bank:
                        return  DimensionHierarchyType::BankAccount;
                    case TrvPostMethod::Employee:
                        return  DimensionHierarchyType::Employee;
                    case TrvPostMethod::None:
                    case TrvPostMethod::Ledger:
                        return  DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                    case TrvPostMethod::Vendor:
                        return  DimensionHierarchyType::Vendor;
                }
                break;

            case enumNum(ProjOffsetType):
                switch (_accountType)
                {
                    case ProjOffsetType::Bank:
                        return  DimensionHierarchyType::BankAccount;
                    case ProjOffsetType::Cust:
                        return  DimensionHierarchyType::Customer;
                    case ProjOffsetType::Ledger:
                        return  DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                    case ProjOffsetType::Vend:
                        return  DimensionHierarchyType::Vendor;
                }
                break;

            case enumNum(MarkupType):
                switch (_accountType)
                {
                    case MarkupType::CustVend:
                        EventHandlerResult result = EventHandlerResult::newSingleResponse();
                        DimensionHierarchyHelper::retrieveDimensionHierarchyTypeFromPartyModuleDelegate(_custVend, result);
                        if (result.hasResult())
                        {
                            return result.result();
                        }
                        break;
                    case MarkupType::Item:
                        return  DimensionHierarchyType::Item;
                    case MarkupType::LedgerAccount:
                        return  DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                }
                break;

            case enumNum(BankCodaLedgerJournalACType):
                switch (_accountType)
                {
                    case BankCodaLedgerJournalACType::Cust:
                        return  DimensionHierarchyType::Customer;
                    case BankCodaLedgerJournalACType::Ledger:
                        return  DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                    case BankCodaLedgerJournalACType::Vend:
                        return  DimensionHierarchyType::Vendor;
                    case BankCodaLedgerJournalACType::None:
                        // The type BankCodaLedgerJournalACType::None should never be used with a value, so return default hierarchy type.
                        return  DimensionHierarchyType::AccountStructure;
                    default:
                        return DimensionHierarchyHelper::extensionGetDimensionHierarchyTypeByBankCodaLedgerJournalACType(_accountType);
                }

            case enumNum(LedgerJournalACTypeForPaymProposal):
                switch (_accountType)
                {
                    case LedgerJournalACTypeForPaymProposal::Bank:
                        return  DimensionHierarchyType::BankAccount;
                    case LedgerJournalACTypeForPaymProposal::Ledger:
                        return  DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                    case LedgerJournalACTypeForPaymProposal::None:
                        // The type LedgerJournalACTypeForPaymProposal::None should never be used with a value, so return 0
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
                break;

            case enumNum(RetailLedgerBank):
                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                {
                    switch (_accountType)
                    {
                        case RetailLedgerBank::Bank:
                            return  DimensionHierarchyType::BankAccount;
                        case RetailLedgerBank::Ledger:
                            return  DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                        case RetailLedgerBank::RCash:
                            return DimensionHierarchyType::RCash;
                        default:
                            return RetailPaymentExtensions::dimensionHierarchyTypeForRetailLedgerBank(_accountType);
                    }
                }
                break;
            // <GIN>
            case enumNum(TaxWithholdACType_IN):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    switch (_accountType)
                    {
                        case TaxWithholdACType_IN::Cust:
                            return  DimensionHierarchyType::Customer;
                        case TaxWithholdACType_IN::Ledger:
                            return  DimensionHierarchyType::AccountStructure;  // Used by dynamic accounts as a marker to mean account structure or default account
                        case TaxWithholdACType_IN::Vend:
                            return DimensionHierarchyType::Vendor;
                    }
                }
                break;
            // </GIN>

            case enumNum(TaxEngineTaxJournalAccountType):
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                {
                    switch (_accountType)
                    {
                        case TaxEngineTaxJournalAccountType::Bank:
                            return DimensionHierarchyType::BankAccount;
                        case TaxEngineTaxJournalAccountType::Cust:
                            return DimensionHierarchyType::Customer;
                        case TaxEngineTaxJournalAccountType::Vend:
                            return DimensionHierarchyType::Vendor;
                        case TaxEngineTaxJournalAccountType::Ledger,
                            TaxEngineTaxJournalAccountType::Tax:
                            return DimensionHierarchyType::AccountStructure;
                    }
                }
                break;

            default:
                EventHandlerResult ret = new EventHandlerResult();
                DimensionHierarchyHelper::getHierarchyTypeByAccountTypeDelegate(_accountType, _enumType, _custVend, ret);

                if (ret.hasResult())
                {
                    return ret.result();
                }
        }

        // Should not get to here, as the enumeration was not expected to exist
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>extensionGetDimensionHierarchyTypeByBankCodaLedgerJournalACType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the extension of dimension hierarchy according type field for account type.
    /// </summary>
    /// <param name = "_bankCodaLedgerJournalACType">
    /// The account type.
    /// </param>
    /// <returns>
    /// A system-generated dimension hierarchy for the specified account type.
    /// </returns>
    [Replaceable(true)]
    protected static DimensionHierarchyType extensionGetDimensionHierarchyTypeByBankCodaLedgerJournalACType(BankCodaLedgerJournalACType _bankCodaLedgerJournalACType)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyTypeByAccountTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>DimensionHierarchyType</c> field for the specified account type when the
    /// <c>getHierarchyTypeByAccountTypeDelegate</c> delegate on the <c>DimensionHierarchyHelper</c> class is called.
    /// </summary>
    /// <param name="_accountType">
    /// The account type from which to retrieve a <c>DimensionHierarchyType</c>.
    /// </param>
    /// <param name="_enumType">
    /// The type of the enumeration that specifies the account type.
    /// </param>
    /// <param name="_custVend">
    /// A value that indicates whether this is a customer or vendor module.
    /// </param>
    /// <param name="_ret">
    /// The event handler result.
    /// </param>
    static delegate void getHierarchyTypeByAccountTypeDelegate(
        int _accountType,
        EnumId _enumType,
        ModuleInventCustVend _custVend,
        EventHandlerResult _ret)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>