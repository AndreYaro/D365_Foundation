<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReport770Writer_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxReport770Writer_IT
{
    TextStreamIo                                  outFile;
    str                                     currentLine;
    int                                     nonPositionalSectionStartPos;
    System.Text.RegularExpressions.Regex    cleanupStrRegex;
    InteropPermission                       interopPermission;
    TaxReportIWriteable_IT                  caller;

    #TaxReportWriter_IT
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callerNextLine</Name>
				<Source><![CDATA[
    private void callerNextLine()
    {
        if (caller)
        {
            caller.outputNextLine(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupStr</Name>
				<Source><![CDATA[
    private str cleanupStr(str _value)
    {
        interopPermission.assert();
        return cleanupStrRegEx.Replace(strUpr(_value), #WriterBlankSpace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        this.nextLine();

        if (outFile)
        {
            outFile.write('');
            outFile = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [SysObsolete('Use construct() instead.', true, 3\6\2021)]
    protected void new(ERFileName _fileName, RecId _currentBatchId = 0)
    {
        //Initializing a regex only once in a constructor for performance reasons
        interopPermission = new InteropPermission(InteropKind::ClrInterop);
        interopPermission.assert();
        cleanupStrRegex = new System.Text.RegularExpressions.Regex(#WriterCleanupCharsPattern);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxReport770Writer_IT construct()
    {
        return new TaxReport770Writer_IT('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    public void nextLine()
    {
        if (!currentLine)
            return;

        this.nextLinePreWrite();

        this.write(currentLine);

        this.nextLinePostWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLinePostWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the post-write actions on the report line.
    /// </summary>
    public void nextLinePostWrite()
    {
        currentLine = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLinePreWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepare the line for writing into the file.
    /// </summary>
    /// <returns>
    /// The report line ready for insertion.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Line length exceeds the allowed limit.
    /// </exception>
    public str nextLinePreWrite()
    {
        //Number of spaces to pad right before inserting the control character
        int unusedPartLength = #WriterLineLength - #WriterControlSectionLength - strlen(currentLine);

        if (unusedPartLength < 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        currentLine += strrep(#WriterBlankSpace, unusedPartLength);
        currentLine += #WriterControlSectionChar;

        return currentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextNonPosValueExceedsMaxLineLength</Name>
				<Source><![CDATA[
    private boolean nextNonPosValueExceedsMaxLineLength()
    {
        return strlen(currentLine) + #WriterNonPosKeyLength + #WriterNonPosValueLength > #WriterLineLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaller</Name>
				<Source><![CDATA[
    public TaxReportIWriteable_IT parmCaller(TaxReportIWriteable_IT _caller = caller)
    {
        caller = _caller;
        return caller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecordType</Name>
				<Source><![CDATA[
    public void setRecordType(str _recordType)
    {
        if (currentLine)
        {
            //Record type must be set before writing values
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        switch (_recordType)
        {
            case 'A', 'B', 'Z':
                nonPositionalSectionStartPos = 0;
                break;
            case 'E', 'H', 'J', 'C', 'D':
                nonPositionalSectionStartPos = 90;
                break;
            default: //Unsupported record type
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        //set record type as the first record character
        currentLine = _recordType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteNonPos</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the non-positional field should be written.
    /// </summary>
    /// <param name="_value">
    /// The unformatted value of new field.
    /// </param>
    /// <param name="_format">
    /// The field format.
    /// </param>
    /// <returns>
    /// true, if the <paramref name="_format"/> can be applied to <paramref name="_value"/> and can produce a valid field value.
    /// </returns>
    public boolean validateWriteNonPos(
        anytype                 _value,
        TaxReportFieldFormat_IT _format)
    {
        real    valueReal;

        switch (typeOf(_value))
        {
            case Types::Date :
            case Types::Enum :
                return _value ? true : false;

            case Types::Int64 :
            case Types::Integer :
            case Types::Real :
                switch (_format)
                {
                    case TaxReportFieldFormat_IT::NP    :
                    case TaxReportFieldFormat_IT::VP    :
                        valueReal = _value;
                        return valueReal > 0;

                    case TaxReportFieldFormat_IT::CB    :
                        return _value ? true : false;
                }
                break;

            case Types::RString :
            case Types::String  :
                switch (_format)
                {
                    case TaxReportFieldFormat_IT::AN    :
                    case TaxReportFieldFormat_IT::PR    :
                        return _value ? true : false;
                }
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWritePos</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the position and the length of the value of the positional field do not violate the report structure.
    /// </summary>
    /// <param name="_position">
    /// The start position of the report field.
    /// </param>
    /// <param name="_valueLength">
    /// The length of the report field value.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The positional field is attempted to be inserted into the restricted part of the report line.
    /// </exception>
    public void validateWritePos(int _position, int _valueLength)
    {
        if (strlen(currentLine) != _position - 1
            || (nonPositionalSectionStartPos
                && strlen(currentLine) + _valueLength >= nonPositionalSectionStartPos))
        {
            throw error(strfmt("@SYS4004347", strlen(currentLine), _position, _valueLength));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueDate</Name>
				<Source><![CDATA[
    private str valueDate(
        date                    _date,
        TaxReportFieldFormat_IT _format)
    {
        DateDay     dateDay;
        DateMonth   dateMonth;
        DateYear    dateYear;

        switch (_format)
        {
            case TaxReportFieldFormat_IT::D4 :
                dateDay     = DateDay::Digits2;
                dateMonth   = DateMonth::Digits2;
                dateYear    = DateYear::None;
                break;

            case TaxReportFieldFormat_IT::D6 :
                dateDay     = DateDay::None;
                dateMonth   = DateMonth::Digits2;
                dateYear    = DateYear::Digits4;
                break;

            case TaxReportFieldFormat_IT::DT :
                dateDay     = DateDay::Digits2;
                dateMonth   = DateMonth::Digits2;
                dateYear    = DateYear::Digits4;
                break;
        }

        return date2str(_date, DateFormat::DMY, dateDay, DateSeparator::None, dateMonth, DateSeparator::None, dateYear, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>valuePosCB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the field value according to positional CB format.
    /// </summary>
    /// <param name="_value">
    /// The field value.
    /// </param>
    /// <returns>
    /// The field value formatted according to positional CB format.
    /// </returns>
    public str valuePosCB(boolean _value)
    {
        return _value ? '1': '0';
    }

]]></Source>
			</Method>
			<Method>
				<Name>valuePosNU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the field value according to positional NU format.
    /// </summary>
    /// <param name="_value">
    /// The field value.
    /// </param>
    /// <param name="_width">
    /// The width of the formatted value.
    /// </param>
    /// <returns>
    /// The field value formatted according to positional NU format.
    /// </returns>
    public str valuePosNU(
        int64   _value,
        int     _width)
    {
        return strRFix(int642str(_value), _width, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the report line into the file.
    /// </summary>
    /// <param name="_line">
    /// Report line to write.
    /// </param>
    public void write(str _line)
    {
        if (outFile)
        {
            outFile.write(_line);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPos</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes a non-positional field.
    /// </summary>
    /// <param name="_code">
    /// The field code.
    /// </param>
    /// <param name="_value">
    /// The field value.
    /// </param>
    /// <param name="_format">
    /// The field format.
    /// </param>
    /// <param name="_width">
    /// The field width, appended by zero characters. This is applicable to the Nx format only.
    /// </param>
    /// <returns>
    /// The number of non-positional fields that were written.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The field format is not applicable to the field value type.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The field value type is not supported.
    /// </exception>
    public int writeNonPos(
        str                     _code,
        anytype                 _value,
        TaxReportFieldFormat_IT _format,
        int                     _width = 0)
    {
        switch (typeOf(_value))
        {
            case Types::Date :
                switch (_format)
                {
                    case TaxReportFieldFormat_IT::D4    :
                        return this.writeNonPosD4(_code, _value);

                    case TaxReportFieldFormat_IT::D6    :
                        return this.writeNonPosD6(_code, _value);

                    case TaxReportFieldFormat_IT::DA    :
                        return this.writeNonPosDA(_code, _value);

                    case TaxReportFieldFormat_IT::DN    :
                        return this.writeNonPosDT(_code, _value);

                    case TaxReportFieldFormat_IT::DT    :
                        return this.writeNonPosDT(_code, _value);
                }
                TaxReport770Writer_IT::errorCannotConvertValue(_value, _format, _code);

            case Types::Enum :
                // casting to boolean without validation
                return this.writeNonPosCB(_code, _value);

            case Types::Int64 :
            case Types::Integer :
            case Types::Real :
                switch (_format)
                {
                    case TaxReportFieldFormat_IT::NP    :
                        return this.writeNonPosNP(_code, _value);

                    case TaxReportFieldFormat_IT::NU    :
                        return this.writeNonPosNx(_code, _value);

                    case TaxReportFieldFormat_IT::Nx    :
                        return this.writeNonPosNx(_code, _value, _width);

                    case TaxReportFieldFormat_IT::PC    :
                        return this.writeNonPosPC(_code, _value);

                    case TaxReportFieldFormat_IT::QU    :
                        return this.writeNonPosQU(_code, _value);

                    case TaxReportFieldFormat_IT::CB    :
                        return this.writeNonPosCB(_code, _value);

                    case TaxReportFieldFormat_IT::VP    :
                        return this.writeNonPosVP(_code, _value);

                    case TaxReportFieldFormat_IT::VN    :
                        return this.writeNonPosVN(_code, _value);
                }
                TaxReport770Writer_IT::errorCannotConvertValue(_value, _format, _code);

            case Types::RString :
            case Types::String  :
                switch (_format)
                {
                    case TaxReportFieldFormat_IT::AN    :
                        return this.writeNonPosAN(_code, _value);

                    case TaxReportFieldFormat_IT::CF    :
                    case TaxReportFieldFormat_IT::CN    :
                    case TaxReportFieldFormat_IT::PI    :
                    case TaxReportFieldFormat_IT::PN    :
                    case TaxReportFieldFormat_IT::PE    :
                        return this.writeNonPosCF(_code, _value);

                    case TaxReportFieldFormat_IT::PR    :
                        return this.writeNonPosPR(_code, _value);

                    case TaxReportFieldFormat_IT::NU    :
                        return this.writeNonPosNx(_code, str2int(_value));

                    case TaxReportFieldFormat_IT::Nx    :
                        return this.writeNonPosNx(_code, str2int(_value), _width);

                    case TaxReportFieldFormat_IT::CB    :
                        return this.writeNonPosCB(_code, _value ? true : false);

                    default                             :
                        return this.writeNonPosValue(_code, _value);
                }
            default                             :
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosAN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes <paramref name="_value"/> into zero or more of the non-positional text fields.
    /// </summary>
    /// <param name="_code">
    /// The field code.
    /// </param>
    /// <param name="_value">
    /// The field value.
    /// </param>
    /// <returns>
    /// The number of non-positional field that were written.
    /// </returns>
    /// <remarks>
    /// If <paramref name="_value"/> does not fit into 16 characters,
    /// the remaining part of <paramref name="_value"/> is split into pieces of 15 characters.
    /// Each piece is appended with plus ('+') symbol and written into additional non-positional field.
    /// All inserted fields have the same field ID.
    /// </remarks>
    public int writeNonPosAN(str _code, str _value)
    {
        int length;
        int position;
        str newValue;
        int fieldsWritten;
        #define.AdditionalValueLength(15)

        if (_value)
        {
            length = strlen(_value);
            _value = this.cleanupStr(_value);

            fieldsWritten = this.writeNonPosValue(_code, strLFix(_value, #WriterNonPosValueLength, #WriterBlankSpace));

            for (position = #WriterNonPosValueLength + 1; position <= length; position += #AdditionalValueLength)
            {
                newValue = substr(_value, position, #AdditionalValueLength);

                if (this.nextNonPosValueExceedsMaxLineLength())
                {
                    this.callerNextLine();
                }

                fieldsWritten += this.writeNonPosValue(_code, '+' + strLFix(newValue, #AdditionalValueLength, #WriterBlankSpace));
            }
        }

        return fieldsWritten;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosCB</Name>
				<Source><![CDATA[
    public int writeNonPosCB(str _code, boolean _flag)
    {
        //True:  15 whitespaces + 1
        //False: field is not present
        if (_flag)
        {
            return this.writeNonPosValue(_code, TaxReport770Writer_IT::valueNonPosCB());
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosCF</Name>
				<Source><![CDATA[
    public int writeNonPosCF(str _code, str _value)
    {
        return this.writeNonPosValue(_code, strLFix(_value, #WriterNonPosValueLength));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosD4</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the non-positional date field formatted as ddmm.
    /// </summary>
    /// <param name="_code">
    /// The field code.
    /// </param>
    /// <param name="_date">
    /// The field value (date).
    /// </param>
    /// <returns>
    /// The number of non-positional field that were written.
    /// </returns>
    public int writeNonPosD4(str _code, date _date)
    {
        if (_date)
        {
            return this.writeNonPosValue(_code,
                strRFix(this.valueDate(_date, TaxReportFieldFormat_IT::D4), #WriterNonPosValueLength));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosD6</Name>
				<Source><![CDATA[
    public int writeNonPosD6(str _code, date _date)
    {
        if (_date)
        {
            //output date in mmyyyy format
            return this.writeNonPosValue(_code,
                strRFix(this.valueDate(_date, TaxReportFieldFormat_IT::D6), #WriterNonPosValueLength));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosDA</Name>
				<Source><![CDATA[
    public int writeNonPosDA(str _code, date _date)
    {
        if (_date)
        {
            //output date in yyyy format
            return this.writeNonPosValue(_code,
                strRFix(int2str(year(_date)), #WriterNonPosValueLength));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosDT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the non-positional date field formatted as ddmmyyyy.
    /// </summary>
    /// <param name="_code">
    /// The field code.
    /// </param>
    /// <param name="_date">
    /// The field value (date).
    /// </param>
    /// <returns>
    /// The number of non-positional field that were written.
    /// </returns>
    public int writeNonPosDT(str _code, date _date)
    {
        if (_date)
        {
            //output date in ddmmyyyy format
            return this.writeNonPosValue(_code,
                strRFix(this.valueDate(_date, TaxReportFieldFormat_IT::DT), #WriterNonPosValueLength));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosNP</Name>
				<Source><![CDATA[
    public int writeNonPosNP(str _code, AmountMST _value)
    {
        if (_value > 0)
        {
            return this.writeNonPosNx(_code, decround(_value, 0));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosNx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the non-positional numeric field formatted as numeral (no decimals, special rounding rules).
    /// </summary>
    /// <param name="_code">
    /// The field code.
    /// </param>
    /// <param name="_num">
    /// The field value.
    /// </param>
    /// <param name="_width">
    /// The width of the field; optional.
    /// </param>
    /// <returns>
    /// The number of non-positional fields that were actually written; zero if none.
    /// </returns>
    public int writeNonPosNx(str _code, real _num, int _width = 0)
    {
        return this.writeNonPosValue(_code, TaxReport770Writer_IT::valueNonPosNx(_num, _width));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosPC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the non-positional numeric field formatted as percent (max 3 decimals, no percent sign).
    /// </summary>
    /// <param name="_code">
    /// The field code.
    /// </param>
    /// <param name="_num">
    /// The field value.
    /// </param>
    /// <returns>
    /// The number of non-positional fields that were actually written; zero if none.
    /// </returns>
    public int writeNonPosPC(str _code, real _num)
    {
        return this.writeNonPosQU(_code, _num , 3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosPR</Name>
				<Source><![CDATA[
    public int writeNonPosPR(str _code, str _county)
    {
        return this.writeNonPosAN(_code, _county);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosQU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the non-positional numeric field with maximal number of decimals specified.
    /// </summary>
    /// <param name="_code">
    /// The field code.
    /// </param>
    /// <param name="_num">
    /// The field value.
    /// </param>
    /// <param name="_maxDecimals">
    /// The maximal number of decimals.
    /// </param>
    /// <returns>
    /// The number of non-positional field that were written.
    /// </returns>
    public int writeNonPosQU(str _code, real _num, int _maxDecimals = 5)
    {
        return this.writeNonPosValue(_code, TaxReport770Writer_IT::valueNonPosQU(_num, _maxDecimals));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosValue</Name>
				<Source><![CDATA[
    protected int writeNonPosValue(str _code, str _value)
    {
        if (strlen(_code) != #WriterNonPosKeyLength                 ||
            strlen(currentLine) < nonPositionalSectionStartPos-1    ||
            this.nextNonPosValueExceedsMaxLineLength())
        {
            throw error(
                strFmt("@SYS4004346",
                _code,
                strlen(_code),
                strlen(currentLine),
                _value,
                strlen(_value)));
        }
        if (_value)
        {
            currentLine += _code;
            currentLine += strRFix(strupr(_value), #WriterNonPosValueLength);
        }

        return _value ? 1 : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosAN</Name>
				<Source><![CDATA[
    public void writePosAN(int _pos, str _value, int _width)
    {
        this.writePosValue(_pos, strLFix(this.cleanupStr(_value), _width));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosANPhoneNum</Name>
				<Source><![CDATA[
    public void writePosANPhoneNum(int _pos, str _numStr, int _width)
    {
        this.writePosValue(_pos, strLFix(strkeep(_numStr, #WriterDigits), _width, #WriterBlankSpace));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosBlank</Name>
				<Source><![CDATA[
    public void writePosBlank(int _pos, int _width)
    {
        this.writePosValue(_pos, strRep(' ', _width));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosCB</Name>
				<Source><![CDATA[
    public void writePosCB(int _pos, boolean _flag)
    {
        this.writePosValue(_pos, this.valuePosCB(_flag));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosCF</Name>
				<Source><![CDATA[
    public void writePosCF(int _pos, str _fiscalCode)
    {
        this.writePosAN(_pos, _fiscalCode, 16);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosCN</Name>
				<Source><![CDATA[
    public void writePosCN(int _pos, int64 _fiscalCode)
    {
        this.writePosValue(_pos, strRFix(int642str(_fiscalCode), 11, '0'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosCNStr</Name>
				<Source><![CDATA[
    public void writePosCNStr(int _pos, str _fiscalCode)
    {
        this.writePosValue(_pos, strRFix(strkeep(_fiscalCode, #WriterDigits), 11, '0'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosD6</Name>
				<Source><![CDATA[
    public void writePosD6(int _pos, date _date)
    {
        #define.DateNullStr('000000') //6 zeros

        this.writePosValue(
            _pos,
            _date ? this.valueDate(_date, TaxReportFieldFormat_IT::D6) : #DateNullStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosDA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the positional date field formatted as yyyy.
    /// </summary>
    /// <param name="_pos">
    /// The field start position.
    /// </param>
    /// <param name="_date">
    /// The field value.
    /// </param>
    /// <remarks>
    /// Null date is represented as '0000'.
    /// </remarks>
    public void writePosDA(int _pos, date _date)
    {
        #define.DateNullStr('0000') //4 zeros

        this.writePosValue(_pos, _date ? int2str(year(_date)) : #DateNullStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosDT</Name>
				<Source><![CDATA[
    public void writePosDT(int _pos, date _date)
    {
        #define.DateNullStr('00000000') //8 zeros

        this.writePosValue(
            _pos,
            _date ? this.valueDate(_date, TaxReportFieldFormat_IT::DT) : #DateNullStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosNU</Name>
				<Source><![CDATA[
    public void writePosNU(int _pos, int64 _number, int _width)
    {
        this.writePosValue(_pos, this.valuePosNU(_number, _width));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosNUStr</Name>
				<Source><![CDATA[
    public void writePosNUStr(int _pos, str _numStr, int _width)
    {
        this.writePosValue(_pos, strRFix(strkeep(_numStr, #WriterDigits), _width, '0'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosPR</Name>
				<Source><![CDATA[
    public void writePosPR(int _pos, str _county)
    {
        this.writePosValue(_pos, strLFix(_county, 2, ' '));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the positional field into the report line.
    /// </summary>
    /// <param name="_pos">
    /// The start position of the report field.
    /// </param>
    /// <param name="_value">
    /// The field value.
    /// </param>
    protected void writePosValue(int _pos, str _value)
    {
        this.validateWritePos(_pos, strlen(_value));

        currentLine += strupr(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosPE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the non-positional text field formatted as an abbreviation of the vehicle registration province name.
    /// </summary>
    /// <param name="_code">
    /// The field code.
    /// </param>
    /// <param name="_province">
    /// The vehicle registration province name abbreviation.
    /// </param>
    /// <returns>
    /// The number of non-positional fields that were actually written; zero if none.
    /// </returns>
    public int writeNonPosPE(str _code, str 2 _province)
    {
        return this.writeNonPosAN(_code, _province);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosPN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the non-positional text field formatted as an abbreviation of the province name.
    /// </summary>
    /// <param name="_code">
    /// The field code.
    /// </param>
    /// <param name="_province">
    /// The province name abbreviation.
    /// </param>
    /// <returns>
    /// The number of non-positional fields that were actually written; zero if none.
    /// </returns>
    public int writeNonPosPN(str _code, str 2 _province)
    {
        return this.writeNonPosAN(_code, _province);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosVN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the non-positional numeric field with two decimal digits and support for negative numbers.
    /// </summary>
    /// <param name="_code">
    /// The field code.
    /// </param>
    /// <param name="_num">
    /// The field value.
    /// </param>
    /// <returns>
    /// The number of non-positional field that were written.
    /// </returns>
    public int writeNonPosVN(str _code, real _num)
    {
        return _num ? this.writeNonPosValue(_code, TaxReport770Writer_IT::valueNonPosVN(_num)) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNonPosVP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the non-positional non-negative numeric field with two decimal digits.
    /// </summary>
    /// <param name="_code">
    /// The field code.
    /// </param>
    /// <param name="_num">
    /// The field value.
    /// </param>
    /// <returns>
    /// The number of non-positional field that were written.
    /// </returns>
    public int writeNonPosVP(str _code, real _num)
    {
        return _num > 0 ? this.writeNonPosVN(_code, _num) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosPE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the positional field formatted as an abbreviation of the vehicle registration province name.
    /// </summary>
    /// <param name="_pos">
    /// The start position of the report field.
    /// </param>
    /// <param name="_province">
    /// The vehicle registration province name abbreviation.
    /// </param>
    public void writePosPE(int _pos, str _province)
    {
        this.writePosAN(_pos, _province, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePosPN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the positional field formatted as an abbreviation of the province name.
    /// </summary>
    /// <param name="_pos">
    /// The start position of the report field.
    /// </param>
    /// <param name="_province">
    /// The province name abbreviation.
    /// </param>
    public void writePosPN(int _pos, str _province)
    {
        this.writePosAN(_pos, _province, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorCannotConvertValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an error when the value cannot be converted to the specified report field format.
    /// </summary>
    /// <param name="_value">
    /// The value.
    /// </param>
    /// <param name="_format">
    /// The report format.
    /// </param>
    /// <param name="_fieldID">
    /// The report field ID.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The value cannot be converted to the specified report field format.
    /// </exception>
    public static void errorCannotConvertValue(
        anytype                 _value,
        TaxReportFieldFormat_IT _format,
        TaxReportFieldID_IT     _fieldID)
    {
        throw error(strFmt(
            "@SYS4004345",
            _fieldID,
            _value,
            new DictEnum(enumNum(TaxReportFieldFormat_IT)).value2Label(_format)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumFromNonPosValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the numeric value from the formatted value.
    /// </summary>
    /// <param name="_value">
    /// The report field value.
    /// </param>
    /// <param name="_format">
    /// The report format.
    /// </param>
    /// <returns>
    /// The numeric value.
    /// </returns>
    public static real getNumFromNonPosValue(
        TaxReportFieldValue_IT  _value,
        TaxReportFieldFormat_IT _format)
    {
        real                    ret;
        TaxReportFieldValue_IT  value = strLTrim(strRTrim(_value));

        int                     commaPos;
        str                     valueDecimals;

        switch (_format)
        {
            case TaxReportFieldFormat_IT::NP    :
            case TaxReportFieldFormat_IT::NU    :
            case TaxReportFieldFormat_IT::Nx    :
            case TaxReportFieldFormat_IT::CB    :
                ret = str2int64(value) * 1.0;

            case TaxReportFieldFormat_IT::PC    :
            case TaxReportFieldFormat_IT::QU    :
            case TaxReportFieldFormat_IT::VP    :
            case TaxReportFieldFormat_IT::VN    :
                commaPos = strFind(value, ',', 1, strLen(value));
                if (commaPos)
                {
                    valueDecimals = subStr(value, commaPos + 1, commaPos);
                    ret = str2int64(subStr(value, 1, commaPos - 1)) * 1.0;
                    ret += sign(ret) * str2int64(valueDecimals) * power(0.1, strLen(valueDecimals));
                }
                else
                {
                    ret = str2int64(value) * 1.0;
                }
                break;

            default                             :
                TaxReport770Writer_IT::errorCannotConvertValue(_value, _format, '');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueNonPosCB</Name>
				<Source><![CDATA[
    private static TaxReportFieldValue_IT valueNonPosCB()
    {
        return strRFix('1', #WriterNonPosValueLength);
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueNonPosNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the numeric value into the numeric report format.
    /// </summary>
    /// <param name="_value">
    /// The value.
    /// </param>
    /// <param name="_format">
    /// The report format.
    /// </param>
    /// <param name="_width">
    /// The field width, appended by zero characters. This is applicable to the Nx format only.
    /// </param>
    /// <returns>
    /// The formatted value.
    /// </returns>
    public static TaxReportFieldValue_IT valueNonPosNum(
        real                    _value,
        TaxReportFieldFormat_IT _format,
        int                     _width = 0)
    {
        TaxReportFieldValue_IT  ret;

        switch (_format)
        {
            case TaxReportFieldFormat_IT::NP    :
                if (_value > 0)
                {
                    ret = TaxReport770Writer_IT::valueNonPosNx(decRound(_value, 0));
                }
                break;

            case TaxReportFieldFormat_IT::NU    :
                ret = TaxReport770Writer_IT::valueNonPosNx(_value);
                break;

            case TaxReportFieldFormat_IT::Nx    :
                ret = TaxReport770Writer_IT::valueNonPosNx(_value, _width);
                break;

            case TaxReportFieldFormat_IT::PC    :
                ret = TaxReport770Writer_IT::valueNonPosQU(_value, 3);
                break;

            case TaxReportFieldFormat_IT::QU    :
                ret = TaxReport770Writer_IT::valueNonPosQU(_value);
                break;

            case TaxReportFieldFormat_IT::CB    :
                if (_value)
                {
                    ret = TaxReport770Writer_IT::valueNonPosCB();
                }
                break;

            case TaxReportFieldFormat_IT::VP    :
                if (_value > 0)
                {
                    ret = TaxReport770Writer_IT::valueNonPosVN(_value);
                }
                break;

            case TaxReportFieldFormat_IT::VN    :
                ret = TaxReport770Writer_IT::valueNonPosVN(_value);
                break;

            default                             :
                TaxReport770Writer_IT::errorCannotConvertValue(_value, _format, '');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueNonPosNx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the numeric value into the Nx report format.
    /// </summary>
    /// <param name="_num">
    /// The value.
    /// </param>
    /// <param name="_width">
    /// The field width, appended by zero characters.
    /// </param>
    /// <returns>
    /// The formatted value.
    /// </returns>
    private static TaxReportFieldValue_IT valueNonPosNx(
        real    _num,
        int     _width = 0)
    {
        TaxReportFieldValue_IT  ret;
        int64                   roundedNum = _num ? (abs(_num) < 1 ? 1 : any2int64(trunc(_num))) : 0;

        if (_width > 0)
        {
            ret =  strRFix(int642str(roundedNum), _width, '0');
        }
        else
        {
            ret = int642str(roundedNum);
        }

        return strRFix(ret, #WriterNonPosValueLength);
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueNonPosQU</Name>
				<Source><![CDATA[
    private static TaxReportFieldValue_IT valueNonPosQU(
        real    _num,
        int     _maxDecimals = 5)
    {
        real    numRounded  = round(_num, power(0.1, _maxDecimals));
        real    numDecimals = abs(numRounded - round(numRounded, 1));
        int     currentDecimals;

        while (numDecimals > 0)
        {
            currentDecimals ++;
            numDecimals = numDecimals * 10;
            numDecimals = abs(numDecimals - round(numDecimals, 1));
        }

        return strRFix(num2str(numRounded, 0, currentDecimals, DecimalSeparator::Comma, ThousandSeparator::None), #WriterNonPosValueLength);
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueNonPosVN</Name>
				<Source><![CDATA[
    private static TaxReportFieldValue_IT valueNonPosVN(
        real    _num)
    {
        return num2str(_num, 0, 2, DecimalSeparator::Comma, ThousandSeparator::None);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>