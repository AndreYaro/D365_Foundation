<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('PSAProjTree is no longer being used within the product anymore', true, 2\11\2022)]
public class PSAProjTree
{
    #resAppl

    ImageListAppl_Proj  imageList;

    FormTreeControl     tree;
    FormTreeItem        item;
    Integer             master;
    Map                 treeTreeId;
    Map                 treeRecId ;
    boolean             createMaster;
    Integer             id;
    ProjId              parentId;
    SalesQuotationTable salesQuotationTable;
    Integer             defaultId;
    smmActivityNumber   defaultActivityNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildtree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the tree based on WBS of the project
    /// </summary>
    protected void buildtree()
    {
        ProjTable           projParent;
        HierarchyTreeTable  hierarchyTreeTable;
        hierarchyTreeTable  hierarchyTreeTableLoc;
        Hierarchy           hierarchy;
        boolean             children;
        hierarchyLinkTable  hierarchyLinkTable;

        if (this.parmCreateMaster())
        {
            this.createMaster();
        }

        if (!salesQuotationTable)
        {
            while select projParent
                order by ProjId
                where (!parentId && projParent.ParentId == '') || (parentId && projParent.ParentId == parentId)
            {
                select firstonly RecId from hierarchyTreeTable
                    join recId from hierarchyTreeTableLoc
                        where hierarchyTreeTable.HierarchyId == hierarchyTreeTableLoc.HierarchyId
                            && hierarchyTreeTable.ParentElementNumber == hierarchyTreeTableLoc.ElementNumber
                    join recId from Hierarchy
                        where hierarchyTreeTableLoc.HierarchyId == Hierarchy.HierarchyId
                            && hierarchyTreeTableLoc.ParentElementNumber == ''
                    join recId from hierarchyLinkTable
                        where hierarchyLinkTable.RefRecId == projParent.RecId
                            && hierarchyLinkTable.RefTableId == projParent.TableId
                            && hierarchyLinkTable.HierarchyId == Hierarchy.HierarchyId;
                if (hierarchyTreeTable)
                {
                    children = true;
                }
                this.createNode(projParent, children, master);

                children = false;
            }
        }
        else
        {
            select firstonly RecId from hierarchyTreeTable
                join recId from hierarchyTreeTableLoc
                    where hierarchyTreeTable.HierarchyId == hierarchyTreeTableLoc.HierarchyId
                        && hierarchyTreeTable.ParentElementNumber == hierarchyTreeTableLoc.ElementNumber
                join recId from Hierarchy
                    where hierarchyTreeTableLoc.HierarchyId == Hierarchy.HierarchyId
                        && hierarchyTreeTableLoc.ParentElementNumber == ''
                join recId from hierarchyLinkTable
                    where hierarchyLinkTable.RefRecId == salesQuotationTable.RecId
                        && hierarchyLinkTable.RefTableId == salesQuotationTable.TableId
                        && hierarchyLinkTable.HierarchyId == Hierarchy.HierarchyId;
            if (hierarchyTreeTable)
            {
                children = true;
            }
            this.createNode(salesQuotationTable, children, master);
            children = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the root of the tree
    /// </summary>
    private void createMaster()
    {
        ProjTable   projTable   = ProjTable::find(parentId);
        ProjTable   projTableExist;

        item = new FormTreeItem();

        item.text(this.text(projTable));
        select firstonly projTableExist;
        item.children(projTableExist ? true : false);
        item.data(projTable.TableId);

        item.image(imageList.image(projTable.image()));
        item.selectedImage(imageList.image(projTable.image()));

        master  = tree.addItem(0,0,item);

        treeTreeId.insert(master, projTable.RecId);
        treeRecId.insert(projTable.RecId, master);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a node in the tree
    /// </summary>
    /// <param name="_common">
    /// The activity record on WBS
    /// </param>
    /// <param name="_child">
    /// Boolean to indicate if there are any child nodes
    /// </param>
    /// <param name="_parent">
    /// The index of the parent node
    /// </param>
    /// <param name="_sort">
    /// Boolean to indicate if the node is sortable
    /// </param>
    public void createNode(Common      _common,
                           boolean     _child,
                           int         _parent,
                           boolean     _sort     = false)
    {
        Integer         insertAfterIdx = 0;

        item = new FormTreeItem();

        if (!salesQuotationTable && HierarchyTreeTable::findRecId(_common.RecId).activityNumber() == "")
        {
            return;
        }

        if (! treeRecId.exists(_common.RecId))
        {
            item.text(this.text(_common));
            item.children(_child);
            item.data(_common.TableId);

            item.image(imageList.image(this.image(_common)));
            item.selectedImage(imageList.image(this.image(_common)));

            id  = tree.addItem(_parent, insertAfterIdx, item);
            treeTreeId.insert(id, _common.RecId);
            treeRecId.insert(_common.RecId, id);

            if (HierarchyTreeTable::findRecId(_common.RecId).activityNumber() == defaultActivityNum)
            {
                 defaultId = id;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all the nodes in the tree
    /// </summary>
    protected void deleteAll()
    {
        tree.deleteAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>expanding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expand or Colapse a certain node
    /// </summary>
    /// <param name="_idx">
    /// An int describing the id of the expanded object
    /// </param>
    /// <param name="_action">
    /// Exapand or Colapse
    /// </param>
    /// <param name="_data">
    /// anytype
    /// </param>
    /// <returns>
    /// Boolean to indicate if the expand action is successed or not
    /// </returns>
    public boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
    {
        boolean ret = false;

        item = tree.getItem(_idx);

        if (item.data() == tablenum(ProjTable))
        {
            if (_action == FormTreeExpand::Expand && ! item.stateExpandedOnce())
            {
                this.expandingProjTable(_idx, treeTreeId.lookup(_idx), item.data());
            }
        }
        else if (item.data() == tablenum(SalesQuotationTable))
        {
            if (_action == FormTreeExpand::Expand && ! item.stateExpandedOnce())
            {
                this.expandingSalesQuotationTable(_idx, treeTreeId.lookup(_idx), item.data());
            }
        }
        else if (item.data() == tablenum(HierarchyTreeTable))
        {
            if (_action == FormTreeExpand::Expand && ! item.stateExpandedOnce())
            {
                this.expandingActivity(_idx, treeTreeId.lookup(_idx));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandingActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expand an acitivty node in the tree
    /// </summary>
    /// <param name="_idx">
    /// The index of the tree node
    /// </param>
    /// <param name="_recId">
    /// The recId of the HierarchyTreeTable
    /// </param>
    void expandingActivity(int _idx, RecId _recId)
    {
        HierarchyTreeTable activityNode = HierarchyTreeTable::findRecId(_recId);

        HierarchyTreeTable  hierarchyTreeTable;
        HierarchyTreeTable  hierarchyTreeTableChild;

        while select hierarchyTreeTable
            where hierarchyTreeTable.HierarchyId == activityNode.HierarchyId
                && hierarchyTreeTable.ParentElementNumber == activityNode.ElementNumber
        {
            select firstonly recId from hierarchyTreeTableChild 
                where hierarchyTreeTableChild.HierarchyId == hierarchyTreeTable.HierarchyId
                    && hierarchyTreeTableChild.ParentElementNumber == hierarchyTreeTable.ElementNumber;

            this.createNode(hierarchyTreeTable, hierarchyTreeTableChild ? true : false, _idx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandingProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expand a project node in the tree
    /// </summary>
    /// <param name="_idx">
    /// The index of the node
    /// </param>
    /// <param name="_recId">
    /// The recId of the project
    /// </param>
    /// <param name="_tableId">
    /// The project table id
    /// </param>
    void expandingProjTable(int _idx, RecId _recId, TableId _tableId)
    {
        Hierarchy           hierarchy;
        HierarchyLinkTable  hierarchyLinkTable;
        HierarchyTreeTable  hierarchyTreeTable;
        HierarchyTreeTable  hierarchyTreeTableLoc;
        HierarchyTreeTable  hierarchyTreeTableChild;
        ProjTable           projTable;
        ProjTable           projTableLoc;
        ProjTable           projSibling;
        boolean             children;

        projTable = projTable::findRecId(_recId);

        while select projTableLoc
            order by ProjId
            where projTableLoc.ParentId == projTable.ProjId
        {
            select firstonly RecId from projSibling
                where projSibling.ParentId  == projTableLoc.ProjId;

            children = projSibling.RecId != 0;
            this.createNode(projTableLoc, children, _idx);
        }

        while select hierarchyTreeTable
            join recId from hierarchyTreeTableLoc
                where hierarchyTreeTable.HierarchyId == hierarchyTreeTableLoc.HierarchyId
                    && hierarchyTreeTable.ParentElementNumber == hierarchyTreeTableLoc.ElementNumber
            join recId from Hierarchy
                where hierarchyTreeTableLoc.HierarchyId == Hierarchy.HierarchyId
                    && hierarchyTreeTableLoc.ParentElementNumber == ''
            join recId from hierarchyLinkTable
                where hierarchyLinkTable.RefRecId == projTable.RecId
                    && hierarchyLinkTable.RefTableId == projTable.TableId
                    && hierarchyLinkTable.HierarchyId == Hierarchy.HierarchyId
        {
            select firstonly recId from hierarchyTreeTableChild
                where hierarchyTreeTableChild.HierarchyId == hierarchyTreeTable.HierarchyId
                    && hierarchyTreeTableChild.ParentElementNumber == hierarchyTreeTable.ElementNumber;

            this.createNode(hierarchyTreeTable, hierarchyTreeTableChild ? true : false, _idx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandingSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expand a quotation node in the tree
    /// </summary>
    /// <param name="_idx">
    /// The index of the node
    /// </param>
    /// <param name="_recId">
    /// The recId of the quotation
    /// </param>
    /// <param name="_tableId">
    /// The quotation table id
    /// </param>
    void expandingSalesQuotationTable(int _idx, RecId _recId, TableId _tableId)
    {
        Hierarchy           hierarchy;
        HierarchyLinkTable  hierarchyLinkTable;
        HierarchyTreeTable  hierarchyTreeTable;
        HierarchyTreeTable  hierarchyTreeTableLoc;
        HierarchyTreeTable  hierarchyTreeTableChild;

        while select hierarchyTreeTable
            join recId from hierarchyTreeTableLoc
                where hierarchyTreeTable.HierarchyId == hierarchyTreeTableLoc.HierarchyId
                    && hierarchyTreeTable.ParentElementNumber == hierarchyTreeTableLoc.ElementNumber
            join recId from Hierarchy
                where hierarchyTreeTableLoc.HierarchyId == Hierarchy.HierarchyId
                    && hierarchyTreeTableLoc.ParentElementNumber == ''
            join recId from hierarchyLinkTable
                where hierarchyLinkTable.RefRecId == salesQuotationTable.RecId
                    && hierarchyLinkTable.RefTableId == salesQuotationTable.TableId
                    && hierarchyLinkTable.HierarchyId == Hierarchy.HierarchyId
        {
            select firstonly recId from hierarchyTreeTableChild 
                where hierarchyTreeTableChild.HierarchyId == hierarchyTreeTable.HierarchyId
                    && hierarchyTreeTableChild.ParentElementNumber == hierarchyTreeTable.ElementNumber;

            this.createNode(hierarchyTreeTable, hierarchyTreeTableChild ? true : false, _idx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expand all the child nodes for a certain item in the tree
    /// </summary>
    /// <param name="_idx">
    /// The index of the item to expand
    /// </param>
    public void expandItem(int _idx)
    {
        int childNode = 0;

        tree.expand(_idx);

        childNode = tree.getChild(_idx);
        //---expand child, depth first
        while (childNode > 0 && (defaultId ==0) )
        {
            this.expandItem(childNode);
            childNode = tree.getNextSibling(childNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a tree item by index
    /// </summary>
    /// <param name="_idx">
    /// The index of the item
    /// </param>
    /// <returns>
    /// The tree item
    /// </returns>
    public FormTreeItem getItem(int _idx)
    {
        return tree.getItem(_idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the index for selected node in the tree
    /// </summary>
    /// <returns>
    /// Index of the selected node
    /// </returns>
    public int64 getSelection()
    {
        int64 retVal = 0;

        if (tree.getSelection())
        {
            retVal = treeTreeId.lookup(tree.getSelection());
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>image</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays an image for selected node based on the node's type
    /// </summary>
    /// <param name="_common">
    /// The node of the tree
    /// </param>
    /// <returns>
    /// Always return 0
    /// </returns>
    int image(Common _common)
    {
        ProjTable   projTable;

        #resApplPSA

        switch (_common.TableId)
        {
            case tablenum(ProjTable):
                projTable = _common;
                return projTable.image(projTable.Type);

            case tablenum(HierarchyTreeTable):
                return #ImageTask;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>master</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the root node's id
    /// </summary>
    /// <returns>
    /// Integer id of the root node in the tree
    /// </returns>
    protected Integer master()
    {
        return master;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormTreeControl _formTree,
                    projId          _parentId   = '',
                    boolean         _bInactive = false)
    {
        tree        = _formTree;
        parentId    = _parentId;

        salesQuotationTable = SalesQuotationTable::find(parentId);

        imageList   = new ImageListAppl_Proj();

        treeTreeId  = new Map(Types::Int64, Types::Int64);
        treeRecId   = new Map(Types::Int64, Types::Int64);

        tree.setImagelist(imageList.imageList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateMaster</Name>
				<Source><![CDATA[
    public boolean parmCreateMaster(boolean _createMaster = createMaster)
    {
        createMaster    = _createMaster;

        return createMaster;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultActivityNum</Name>
				<Source><![CDATA[
    public smmActivityNumber parmDefaultActivityNum(smmActivityNumber _defaultActivityNum)
    {
        defaultActivityNum    = _defaultActivityNum;

        return defaultActivityNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupChart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup the tree and select on default activity
    /// </summary>
    /// <param name="_bInactive">
    /// Boolean to indicate if the tree is inactived or not
    /// </param>
    public void setupChart(boolean _bInactive = false)
    {
        tree.lock();

        this.buildtree();
        this.expandItem(tree.getRoot());

        //---focus on the default activity
        tree.select(defaultId > 0 ? defaultId : tree.getRoot());

        tree.setFocus();
        tree.update();

        tree.unLock(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>text</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return a string value based on the node's type
    /// </summary>
    /// <param name="_common">
    /// A node in the tree
    /// </param>
    /// <returns>
    /// Return Project Id/Quotation Id/Name based on the node's type
    /// </returns>
    public str text(Common _common)
    {
        ProjTable           projTable;
        HierarchyTreeTable  hierarchyTreeTable;
        str                 retval = '';

        switch (_common.TableId)
        {
            case tablenum(ProjTable):
                projTable = _common;
                if (projTable)
                {
                    retval = projTable.projId;
                }
                break;

            case tablenum(SalesQuotationTable):
                salesQuotationTable = _common;
                if (salesQuotationTable)
                {
                    retval = salesQuotationTable.QuotationId;
                }
                break;

            case tablenum(HierarchyTreeTable):
                hierarchyTreeTable = _common;
                if (hierarchyTreeTable)
                {
                    retval = hierarchyTreeTable.Name;
                }
                break;
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PSAProjTree construct (
        FormTreeControl _formTree,
        ProjId          _parentId = '')
    {
        PSAProjTree psaProjTree;

        psaProjTree = new PSAProjTree(_formTree, _parentId);

        return psaProjTree;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>