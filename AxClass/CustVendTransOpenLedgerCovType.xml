<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransOpenLedgerCovType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendTransOpenLedgerCovType</c> class updates cash flow forecasts for open customer or vendor invoices, credit notes, bridged payments and payments.
/// </summary>
internal abstract class CustVendTransOpenLedgerCovType
{
    protected LedgerCoverage ledgerCoverage;
    protected CustVendTransOpenLedgerCovContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cash flow forecasts.
    /// </summary>
    [Wrappable(false)]
    internal abstract void updateLedgerCov()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void init(LedgerCoverage _ledgerCoverage, CustVendTransOpenLedgerCovContract _contract)
    {
        #ISOCountryRegionCodes
        
        ledgerCoverage = _ledgerCoverage;
        contract = _contract;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            ledgerCoverage.parmPostingProfile_RU(contract.getCustVendTrans().PostingProfile);
            ledgerCoverage.parmInventProfileType_RU(contract.getCustVendTrans().inventProfileType_RU());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDueDate</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected final TransDate getDueDate()
    {
        TransDate dueDate;

        if (contract.getCustVendTransOpen().DueDate != dateNull())
        {
            dueDate = contract.getCustVendTransOpen().DueDate;
        }
        else
        {
            dueDate = contract.getCustVendTransOpen().TransDate;
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMinimumPaymentDate</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected static TransDate calculateMinimumPaymentDate(TransDate _paymentDate)
    {
        TransDate paymentDate = _paymentDate;

        date systemDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (paymentDate <= systemDate)
        {
            paymentDate = systemDate;
        }

        return paymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>CustVendTransOpenLedgerCovType</c> class from a customer or vendor transaction.
    /// </summary>
    /// <param name = "_ledgerCoverage">The cash flow forecasting calculations.</param>
    /// <param name = "_custVendTrans">The customer or vendor transaction.</param>
    /// <param name = "_custVendTransOpen">The customer or vendor open transaction.</param>
    /// <returns>A new instance of the <c>CustVendTransOpenLedgerCovType</c> class.</returns>
    [Wrappable(false)]
    internal static CustVendTransOpenLedgerCovType newForDocument(
        LedgerCoverage _ledgerCoverage,
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen)
    {
        CustVendTransOpenLedgerCovContract contract = CustVendTransOpenLedgerCovContract::newForDocument(_custVendTrans, _custVendTransOpen);

        CustVendTransOpenLedgerCovType instance;

        // Invoice and marked for settlement
        if (CashflowInsightsActivation::isActive()
            && contract.isInvoice()
            && SpecTrans::existByRef(contract.getCustVendTransOpen().DataAreaId, contract.getCustVendTransOpen().TableId, contract.getCustVendTransOpen().RecId))
        {
            instance = new CustVendTransOpenLedgerCovTypeInvoiceMarked();
        }

        // Invoice
        if (instance == null && contract.isInvoice())
        {
            if (contract.getCustVendTrans().TableId == tableNum(CustTrans))
            {
                CustTrans custTrans = contract.getCustVendTrans();
                CustTransOpen custTransOpen = contract.getCustVendTransOpen();

                PayPredPredictionResult predictionResult = PayPredPredictionResult::findPredictionResult(custTransOpen.TableId, custTransOpen.RecId);

                if (custTrans.PaymSchedId == ''
                    && CashflowInsightsActivation::isPayPredIntegrationActive()
                    && predictionResult.RecId != 0)
                {
                    instance = new CustTransOpenLedgerCovTypeInvoice();
                }
            }
            
            if (instance == null)
            {
                instance = new CustVendTransOpenLedgerCovTypeInvoice();
            }
        }

        // Credit note
        if (instance == null && contract.isCreditNote())
        {
            instance = new CustVendTransOpenLedgerCovTypeCreditNote();
        }

        // Bridging
        if (instance == null && contract.isBridging())
        {
            instance = new CustVendTransOpenLedgerCovTypeBridging();
        }

        // Payment
        if (instance == null && contract.isPayment())
        {
            instance = new CustVendTransOpenLedgerCovTypePayment();
        }

        // Zero value
        if (instance == null)
        {
            instance = new CustVendTransOpenLedgerCovTypeNoAction();

            using (SysInstrumentationActivityContext activityContext = CustVendTransOpenLedgerCovType::getActivityContext(contract))
            {
                activityContext.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyCashFlowIsInvoice, any2Str(contract.isInvoice()));
                activityContext.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyCashFlowHasInvoice, any2Str(contract.getCustVendTrans().Invoice != ''));
                activityContext.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyCashFlowIsCreditNote, any2Str(contract.isCreditNote()));
                activityContext.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyCashFlowIsBridging, any2Str(contract.isBridging()));
                activityContext.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyCashFlowIsPayment, any2Str(contract.isPayment()));
                activityContext.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyCashFlowIsZeroValue, any2Str(contract.isZeroValue()));
            }
        }

        instance.init(_ledgerCoverage, contract);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext</Name>
				<Source><![CDATA[
    private static SysInstrumentationActivityContext getActivityContext(CustVendTransOpenLedgerCovContract _contract)
    {
        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(CustVendInstrumentationConstants::SourceNameCashFlowCustVendTransOpenLedgerCovType);

        SysInstrumentationActivity activity =
            SysInstrumentationActivity::construct(
                CustVendInstrumentationConstants::ActivityNameCashFlowNewForDocument,
                CustVendInstrumentationConstants::InstrumentationNamespace);

        return logger.activityContextWithCustomProperties(activity)
            .addCustomProperty(CustVendInstrumentationConstants::Module, CustVendTransOpenLedgerCovType::getModule(_contract))
            .addCustomProperty(CustVendInstrumentationConstants::CustomPropertyCashFlowCustVendTransRecId, int642Str(_contract.getCustVendTrans().RecId))
            .addCustomProperty(CustVendInstrumentationConstants::CustomPropertyCashFlowCustVendTransOpenRecId, int642Str(_contract.getCustVendTransOpen().RecId));

    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    private static str getModule(CustVendTransOpenLedgerCovContract _contract)
    {
        str module;

        if (_contract.getCustVendTrans().TableId == tableNum(CustTrans))
        {
            module = CustVendInstrumentationConstants::ModuleCustomer;
        }
        else
        {
            module = CustVendInstrumentationConstants::ModuleVendor;
        }

        return module;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>