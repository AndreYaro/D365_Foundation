<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventNonConformanceChangeType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventNonConformanceChangeType</c> class lets the user change the type of a nonconformance.
/// </summary>
class InventNonConformanceChangeType extends RunBase
{
    InventNonConformanceID      inventNonConformanceID;
    InventNonConformanceType    inventNonConformanceType;
    InventTestProblemTypeId     inventTestProblemTypeId;

    DialogField                 fieldType;
    DialogField                 fieldProblemType;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        inventNonConformanceID,
        inventNonConformanceType,
        inventTestProblemTypeId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a dialog box that has a field to specify the new type.
    /// </summary>
    /// <param name="_dialog">
    ///    The dialog box as built by the framework.
    /// </param>
    /// <param name="forceOnClient">
    ///    A Boolean value that indicates whether the dialog box is forced on the client or not.
    /// </param>
    /// <returns>
    ///    The modified <c>Dialog</c> class.
    /// </returns>
    public Object dialog(DialogRunbase _dialog = null, boolean forceOnClient = false)
    {
        DialogRunbase dialog = this.dialogInternal(_dialog, forceOnClient);
        dialog.formBuildDesign().dialogSize(0); // DialogSize::Small

        fieldType = dialog.addFieldValue(enumStr(InventNonConformanceType), inventNonConformanceType);
        fieldProblemType = dialog.addFieldValue(extendedTypeStr(InventTestProblemTypeId), inventTestProblemTypeId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the method on the base class to also get the new type from the dialog box.
    /// </summary>
    /// <returns>
    ///    true if the values from the dialog box could be retrieved; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        inventNonConformanceType = fieldType.value();
        inventTestProblemTypeId = fieldProblemType.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class based on the object that calls it.
    /// </summary>
    /// <param name="_args">
    ///    The arguments supplied by the element that calls the method.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The caller does not provide a <c>InventNonConformanceTable</c> table buffer.
    /// </exception>
    protected void initFromArgs(Args _args)
    {
        if (!_args || !_args.record() || !_args.record().RecId || _args.dataset() != tableNum(InventNonConformanceTable))
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        InventNonConformanceTable inventNonConformanceTable = _args.record();

        this.getLast();
        this.parmInventNonConformanceId(inventNonConformanceTable.InventNonConformanceID);
        this.parmInventNonConformanceType(inventNonConformanceTable.InventNonConformanceType);
        this.parmInventTestProblemTypeId(inventNonConformanceTable.InventTestProblemTypeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventNonConformanceId</Name>
				<Source><![CDATA[
    public InventNonConformanceID parmInventNonConformanceId(InventNonConformanceID _inventNonConformanceID = inventNonConformanceID)
    {
        inventNonConformanceID = _inventNonConformanceID;

        return inventNonConformanceID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventNonConformanceType</Name>
				<Source><![CDATA[
    public InventNonConformanceType parmInventNonConformanceType(InventNonConformanceType _inventNonConformanceType = inventNonConformanceType)
    {
        inventNonConformanceType = _inventNonConformanceType;

        return inventNonConformanceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTestProblemTypeId</Name>
				<Source><![CDATA[
    public InventTestProblemTypeId parmInventTestProblemTypeId(InventTestProblemTypeId _inventTestProblemTypeId = inventTestProblemTypeId)
    {
        inventTestProblemTypeId = _inventTestProblemTypeId;

        return inventTestProblemTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the type change.
    /// </summary>
    public void run()
    {
        super();
        ttsbegin;
        if (!InventProblemTypeSetup::exist(inventTestProblemTypeId, inventNonConformanceType))
        {
            throw error("@SYS114021");
        }

        InventNonConformanceTable inventNonConformanceTable = InventNonConformanceTable::find(inventNonConformanceID, true);
        if (!inventNonConformanceTable || inventNonConformanceTable.InventNonConformanceType == inventNonConformanceType)
        {
            throw error(strFmt("@SYS114045", inventNonConformanceID));
        }

        inventNonConformanceTable.InventNonConformanceType = inventNonConformanceType;
        inventNonConformanceTable.InventTestProblemTypeId = inventTestProblemTypeId;
        switch (inventNonConformanceTable.InventNonConformanceType)
        {
            case InventNonConformanceType::Cust :
            case InventNonConformanceType::Service :
                inventNonConformanceTable.InventTransType    = InventTransType::Sales;
                if (inventNonConformanceTable.orig().InventNonConformanceType != InventNonConformanceType::Cust &&
                    inventNonConformanceTable.orig().InventNonConformanceType != InventNonConformanceType::Service)
                {
                    inventNonConformanceTable.clearAllReferences();
                }
                break;
            case InventNonConformanceType::Vend :
                inventNonConformanceTable.InventTransType    = InventTransType::Purch;
                inventNonConformanceTable.clearAllReferences();
                break;
            case InventNonConformanceType::Production :
                inventNonConformanceTable.InventTransType    = InventTransType::Production;
                inventNonConformanceTable.clearAllReferences();
                break;
            case InventNonConformanceType::Internal :
                inventNonConformanceTable.InventTransType    = InventTransType::QualityOrder;
                inventNonConformanceTable.clearAllReferences();
                break;
            default:
                this.modifyingNonConformanceType(inventNonConformanceTable);
                break;
        }
        inventNonConformanceTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyingNonConformanceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event raised when the nonconformance type is being changed for a <c>InventNonConformanceTable</c> record.
    /// </summary>
    /// <param name = "_nonConformanceTable">The nonconformance record to update the related fields on for the new nonconformance type.</param>
    delegate void modifyingNonConformanceType(InventNonConformanceTable _nonConformanceTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version      = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the parameters provided are valid to perform a type change.
    /// </summary>
    /// <param name="calledFrom">
    ///    This parameter is not used in this class.
    /// </param>
    /// <returns>
    ///    true if the validation succeeded; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    See the base class, <c>RunBase</c>, for a description of the <paramref name="calledFrom" />
    ///    parameter.
    /// </remarks>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (!inventNonConformanceID)
            ret = checkFailed(strFmt("@SYS53926", classStr(InventNonConformanceChangeType)));

        InventNonConformanceTable inventNonConformanceTable = InventNonConformanceTable::find(inventNonConformanceID);
        if (!inventNonConformanceTable || inventNonConformanceTable.InventNonConformanceType == inventNonConformanceType)
        {
            return checkFailed(strFmt("@SYS114045", inventNonConformanceID));
        }

        if (!InventProblemTypeSetup::exist(inventTestProblemTypeId, inventNonConformanceType))
        {
            ret = checkFailed("@SYS114021");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventNonConformanceChangeType construct()
    {
        return new InventNonConformanceChangeType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS114050";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        InventNonConformanceChangeType inventNonConformanceChangeType = InventNonConformanceChangeType::construct();

        inventNonConformanceChangeType.initFromArgs(args);

        if (!inventNonConformanceChangeType.prompt())
        {
            return;
        }

        inventNonConformanceChangeType.runOperation();

        if (args && args.record() && args.dataset() == tableNum(InventNonConformanceTable))
        {
            InventNonConformanceChangeType::refreshCaller(args.record());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the calling form so that the updates are shown.
    /// </summary>
    /// <param name="_caller">
    ///    The calling record.
    /// </param>
    protected static void refreshCaller(Common _caller)
    {
        if (FormDataUtil::isFormDataSource(_caller))
        {
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(_caller);
            formDataSource.reread();
            formDataSource.refresh();
            formDataSource.active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
