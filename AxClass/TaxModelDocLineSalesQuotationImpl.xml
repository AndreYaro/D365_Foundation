<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineSalesQuotationImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>SalesQuotationLine</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(SalesQuotationLine))]
public class TaxModelDocLineSalesQuotationImpl extends TaxModelDocLineBaseImpl
{
    SalesQuotationTable salesQuotationTable;
    SalesQuotationLine  salesQuotationLine;

    SalesCalcTax        salesCalcTax;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
        return salesQuotationTable.custTable_CustAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    public Date getDeliveryDate()
    {
        return salesQuotationTable.dlvDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount.
    /// </summary>
    /// <returns>The total discount amount.
    /// </returns>
    public Amount getDiscAmount()
    {
        Amount totalDisc;

        PriceUnit priceUnit = salesQuotationLine.PriceUnit == 0? 1 : salesQuotationLine.PriceUnit;

        Amount netAmount = (salesQuotationLine.SalesQty * ((salesQuotationLine.SalesPrice - salesQuotationLine.discAmount()) / priceUnit)) * (100 - salesQuotationLine.discPercent()) / 100;

        totalDisc = netAmount * salesQuotationTable.DiscPercent / 100 + (salesQuotationLine.SalesQty * salesQuotationLine.SalesPrice / priceUnit) - netAmount;

        return totalDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        Qty ret;

        if (salesCalcTax)
        {
            ret = salesCalcTax.transQty();
        }
        else
        {
            if (salesQuotationLine.RemainSalesFinancial * salesQuotationLine.RemainSalesPhysical < 0)
            {
                ret = salesQuotationLine.RemainSalesFinancial;
            }
            else
            {
                ret = salesQuotationLine.RemainSalesPhysical + salesQuotationLine.RemainSalesFinancial;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::OutgoingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    public TransDate getTransDate()
    {
        return salesQuotationTable.createDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        salesQuotationLine = _documentLineMap;
        salesQuotationTable = salesQuotationLine.salesQuotationTable();

        super(_documentLineMap);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBaseModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the base Model.
    /// </summary>
    /// <param name="_baseModel">
    /// The base model.
    /// </param>
    public void setBaseModel(Object _baseModel)
    {
        if (_baseModel is SalesCalcTax)
        {
            salesCalcTax = _baseModel as SalesCalcTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type
    /// </summary>
    /// <returns>
    /// The transaction tax module type
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        return TaxModuleType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// True if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        SalesQuotationStatus    status;

        status = salesQuotationLine.salesQuotationTable().QuotationStatus;

        return (status != SalesQuotationStatus::Lost)
            && (status != SalesQuotationStatus::Cancelled)
            && (status != SalesQuotationStatus::Confirmed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    /// This method is used to init TransTaxInformation.CompanyLocation, which should be defaulted from transaction line delivery address
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        if (this.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getReferenceTaxModelDocLine().getTaxLogisticsPostalAddress(TransTaxInformationType_IN::Normal);
        }
        else
        {
            InventDim inventDim = salesQuotationLine.inventDim();
            if (inventDim && inventDim.InventLocationId != '' && inventDim.InventSiteId != '')
            {
                return LogisticsPostalAddress::findByLocation(
                    TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(inventDim.InventLocationId, inventDim.InventSiteId));
            }
            else
            {
                CompanyInfo         companyInfoLoc;
                DirPartyLocation    dirPartyLocation;

                companyInfoLoc      = CompanyInfo::findByCompany_IN(curExt());
                dirPartyLocation    = DirPartyLocation::findPrimaryPartyLocation(companyInfoLoc.RecId);

                return LogisticsPostalAddress::findByLocation(dirPartyLocation.Location);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is a foreign transaction or not.
    /// </summary>
    /// <returns>
    /// True if the document line is a foregin foreign transaction; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isForeignTransaction()
    {
        return SalesQuotationLineTaxExtensionIN::findBysalesQuotationLine(salesQuotationLine.RecId, true).ExportOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        return salesQuotationLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return salesQuotationLine.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return salesQuotationLine.Transdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>