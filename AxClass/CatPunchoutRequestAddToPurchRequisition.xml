<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatPunchoutRequestAddToPurchRequisition</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CatPunchoutRequestAddToPurchRequisition</c> class creates a purchase requisition from a shopping cart.
/// </summary>
public final class CatPunchoutRequestAddToPurchRequisition
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPurchReqLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create purchase requisition lines from the shopping carts of the current user
    /// </summary>
    public static void createPurchReqLines()
    {
        CatCartLine         cartLine;
        CatCartLineState    cartLineState;
        CatPunchoutRequest  punchoutRequest;
        PurchReqTable       purchReqTable;
        RefRecId            previousPunchoutRequestRecId;
        CatCXMLCartLines    cxmlCartLines;
        container           supplierAuxIdCont;
        int                 contIdx = 1;

        PurchReqPreparerRefRecId originator = HcmWorkerLookup::currentWorker();

        // When flight is removed the supplierAuxIdCont variable should be removed as well
        if (!CatCXMLCartLinePurchSupplierFlight::instance().isEnabled())
        {
            //This is working on the assumption that the order of the lines doesn't change.
            select punchoutRequest
                where punchoutRequest.Originator == originator
                      && punchoutRequest.RequestStatus == CatPunchoutRequestStatus::BasketConsumed;

            supplierAuxIdCont = CatCXMLCartLog::extractSupplierAux(punchoutRequest.RecId);
        }
        
        ttsbegin;
          
        while select punchoutRequest
            where punchoutRequest.Originator == originator
                  && punchoutRequest.RequestStatus == CatPunchoutRequestStatus::BasketConsumed
            join cartLine
                where cartLine.PunchoutRequest == punchoutRequest.RecId
            exists join cartLineState
                where cartLineState.CartLine == cartLine.RecId
                    && cartLineState.IsValidProduct == NoYes::Yes
        {
            if (punchoutRequest.RecId != previousPunchoutRequestRecId)
            {
                previousPunchoutRequestRecId = punchoutRequest.RecId;
                purchReqTable = PurchReqTable::find(punchoutRequest.PurchReqTable);
            }

            if (purchReqTable.RequisitionStatus == PurchReqRequisitionStatus::Draft)
            {
                CatPunchoutRequestAddToPurchRequisition::insertCXMLCartLines(cartLine
                                                                            ,punchoutRequest
                                                                            ,purchReqTable
                                                                            ,cxmlCartLines
                                                                            ,supplierAuxIdCont
                                                                            ,contIdx);
                contIdx++;
    
                CatPunchoutRequestAddToPurchRequisition::setPurchReqLine(cartLine, punchoutRequest, purchReqTable);
            }
        }

        CatPunchoutRequest::deleteAllActivePunchoutRequestsForUser(originator);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCXMLCartLines</Name>
				<Source><![CDATA[
    private static void insertCXMLCartLines(CatCartLine             cartLine
                                            ,CatPunchoutRequest     punchoutRequest
                                            ,PurchReqTable          purchReqTable
                                            ,CatCXMLCartLines       cxmlCartLines
                                            ,container              supplierAuxIdCont
                                            ,int                    contIdx
                                            )
    {
        ttsbegin;

        cxmlCartLines.initValue();
        cxmlCartLines.PunchOutRequest = punchoutRequest.RecId;
        cxmlCartLines.ExternalCatalogQuote = CatExternalQuoteProductReference::find(cartLine.ProductReference).ExternalQuote;
        cxmlCartLines.ItemId = CatExternalQuoteProductReference::find(cartLine.ProductReference).ItemId;
        cxmlCartLines.ProductName = CatProductReference::find(cartLine.ProductReference, false).ProductName;
        cxmlCartLines.ProductDescription = CatProductReference::find(cartLine.ProductReference, false).ProductDescription;
        cxmlCartLines.InventQty = cartline.Quantity;
        cxmlCartLines.PurchLineAmount = cartline.LineAmount;
        cxmlCartLines.CurrencyCode = cartLine.CurrencyCode;
        cxmlCartLines.UnitOfMeasure = cartLine.UnitOfMeasure;
        cxmlCartLines.LineNum = contIdx;
        cxmlCartLines.PurchSupplierAuxId = CatCXMLCartLinePurchSupplierFlight::instance().isEnabled() ? cartLine.PurchSupplierAuxId
            : conPeek(supplierAuxIdCont,contIdx);
        cxmlCartLines.PurchReqTable = purchReqTable.RecId;

        cxmlCartLines.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqLine</Name>
				<Source><![CDATA[
    private static void setPurchReqLine(CatCartLine _catCartLine, CatPunchoutRequest _catPunchoutRequest, PurchReqTable _purchReqTable)
    {
        boolean                             ret                             = true;
        CatProductReference                 catProductReference             = CatProductReference::find(_catCartLine.ProductReference, false);
        CatExternalQuoteProductReference    externalQuoteProductReference   = CatExternalQuoteProductReference::find(_catCartLine.ProductReference);
        CatExternalCatalogQuote             catExternalCatalogQuote         = CatExternalCatalogQuote::find(externalQuoteProductReference.ExternalQuote);
        VendTable                           vendTable;
        PurchReqLine                        purchReqLine;

        ttsbegin;
        purchReqLine.BuyingLegalEntity      = CompanyInfo::findDataArea(_catPunchoutRequest.BuyingLegalEntity).RecId;
        purchReqLine.ReceivingOperatingUnit = _catPunchoutRequest.ReceivingOperatingUnit;

        changecompany(purchReqLine.buyingLegalEntity2DataArea())
        {
            purchReqLine.initFromPurchReqTable(_purchReqTable);
            purchReqLine.initValue();
            purchReqLine.Requisitioner      = _catPunchoutRequest.Requisitioner;
            purchReqLine.LineType           = PurchReqLineType::External;
            purchReqLine.setInventDimId(InventDim::inventDimIdBlank());
            purchReqLine.ExternalItemId     = externalQuoteProductReference.ItemId;
            purchReqLine.ItemIdNonCatalog   = catProductReference.ProductName;
            purchReqLine.PurchQty           = _catCartLine.Quantity;
            purchReqLine.LineAmount         = _catCartLine.LineAmount;
            purchReqLine.PurchUnitOfMeasure = _catCartLine.UnitOfMeasure ? _catCartLine.UnitOfMeasure : UnitOfMeasure::findBySymbol(InventParameters::find().DefaultUnitId).RecId;
            purchReqLine.PurchPrice         = !purchReqLine.PurchQty ? 0 : purchReqLine.LineAmount / purchReqLine.PurchQty;

            if (purchReqLine.ProjId
                && purchReqLine.PurchUnitOfMeasure
                && purchReqLine.ItemIdNonCatalog
                && !purchReqLine.ItemId
                && !purchReqLine.ProjSalesUnitOfMeasure)
            {
                purchReqLine.ProjSalesUnitOfMeasure = purchReqLine.PurchUnitOfMeasure;
            }

            if (catProductReference.ProcurementCategory != 0)
            {
                purchReqLine.initFromEcoResCategory(catProductReference.ProcurementCategory);
            }

            purchReqLine.CurrencyCode   = _catCartLine.CurrencyCode;
            purchReqLine.Name           = catProductReference.ProductDescription;

            CatExternalCatalog catExternalCatalog = CatExternalCatalog::findByRecId(_catPunchoutRequest.ExternalCatalog);

            vendTable = VendTable::findByPartyRecId(catExternalCatalog.Party);
            if (vendTable.RecId != 0)
            {
                purchReqLine.VendAccount            = vendTable.AccountNum;
                purchReqLine.setDataAreaForModifiedField(fieldNum(PurchReqLine, VendAccount));
                ret = purchReqLine.validateVendAccount();
            }

            purchReqLine.setDefaultDimension();
            purchReqLine.setAddressFromInventDim(purchReqLine.inventDim());

            if (PurchReqLineInitAssetGroupForExternalCatalogItemFlight::instance().isEnabled())
            {
                purchReqLine.initAssetGroup();
            }

            ret = ret && purchReqLine.validateWrite();
            
            if (!ret)
            {
                throw error("@SCM:CatPunchoutRequestAddToPurchRequisitionError");                
            }

            purchReqLine.insert();

            if (purchReqLine.LineType == PurchReqLineType::External)
            {
                CatPunchoutRequestAddToPurchRequisition::insertPurchReqLineExternalCatalogQuote(purchReqLine.RecId, catExternalCatalogQuote.RecId);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchReqLineExternalCatalogQuote</Name>
				<Source><![CDATA[
    private static void insertPurchReqLineExternalCatalogQuote(RefRecId _purchReqLineRecId, RefRecId _catExternalCatalogQuoteRecId)
    {
        if (_purchReqLineRecId && _catExternalCatalogQuoteRecId)
        {
            PurchReqLineExternalCatalogQuote externalCatalogQuote;

            ttsbegin;
            externalCatalogQuote.PurchReqLine = _purchReqLineRecId;
            externalCatalogQuote.ExternalCatalogQuote = _catExternalCatalogQuoteRecId;
            externalCatalogQuote.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorSelectionForCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the vendor selection for the passed category based on the category policy applied.
    /// </summary>
    /// <param name = "_ecoResCategoryId">The <c>EcoResCategoryId</c> of the category to be checked.</param>
    /// <param name = "_procCategoryTmpPolicyRule">The <c>ProcCategoryTmpPolicyRule</c> associated with the buying legal entity/receiving operating unit.</param>
    /// <returns>The <c>ProcCategoryVendorSelection</c> associated with the passed category based on the policy</returns>
    public static ProcCategoryVendorSelection getVendorSelectionForCategory(EcoResCategoryId _ecoResCategoryId,
                                                                            ProcCategoryTmpPolicyRule _procCategoryTmpPolicyRule)
    {
        ProcCategoryPolicyParameter         procCategoryPolicyParameter;
        EcoResCategory                      ecoResCategory, ecoResCategorySelected;

        if (!_procCategoryTmpPolicyRule)
        {
            return ProcCategoryVendorSelection::Any;
        }
        
        // directly join in-memory table to db table will lead to loop the in-memory table
        // and then execute select statement one by one which will cause performance issue
        // so fetch the data from db table first then filter data out the result by in-memory table
        select VendorSelection, ProcurementCategoryPolicyRule from procCategoryPolicyParameter
            group by procCategoryPolicyParameter.VendorSelection, procCategoryPolicyParameter.ProcurementCategoryPolicyRule
            exists join RecId from ecoResCategory
            order by ecoResCategory.Level desc
                where procCategoryPolicyParameter.ProcurementCategory == ecoResCategory.RecId
            exists join ecoResCategorySelected
                where ecoResCategorySelected.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                    && ecoResCategorySelected.NestedSetLeft >= ecoResCategory.NestedSetLeft
                    && ecoResCategorySelected.NestedSetRight <= ecoResCategory.NestedSetRight
                    && ecoResCategorySelected.RecId == _ecoResCategoryId;

        while (procCategoryPolicyParameter)
        {
            select firstonly PolicyRule from _procCategoryTmpPolicyRule
                order by _procCategoryTmpPolicyRule.PolicyRuleRank asc
                    where _procCategoryTmpPolicyRule.PolicyRule == procCategoryPolicyParameter.ProcurementCategoryPolicyRule;

            if (_procCategoryTmpPolicyRule.PolicyRule)
            {
                return procCategoryPolicyParameter.VendorSelection;
            }

            next procCategoryPolicyParameter;
        }

        return ProcCategoryVendorSelection::Any;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>