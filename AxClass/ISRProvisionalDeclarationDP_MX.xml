<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ISRProvisionalDeclarationDP_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The Report Data Provider class for the ISR Summary SSRS report.
/// </summary>
/// <remarks>
///    This method is the Report Data Provider class for the ISR Summary SSRS Report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(ISRProvisionalDeclarationContract_MX))
]
class ISRProvisionalDeclarationDP_MX extends SRSReportDataProviderBase
{
    ISRProvisionalDeclarationTmp_MX         isrProvisionalDeclarationTmp;
    ISRRateTable_MX                         isrRateTable;
    ISRConceptMainAccount_MX                isrConceptMainAccount;
    ISRConcept_MX                           isrConcept;
    MainAccount                             mainAccount;
    GeneralJournalEntry                     generalJournalEntry;
    GeneralJournalAccountEntry              generalJournalAccountEntry;
    DimensionAttributeValueCombination      dimensionAttributeValueCombination;
    DimensionAttributeValueGroupCombination dimensionAttributeValueGroupCombination;
    DimensionAttributeLevelValue            dimensionAttributeLevelValue;
    TransDate                               fromDate;
    TransDate                               toDate;
    ISRUtilityRatio_MX                      utilityRatio;
    ISRReportType_MX                        detail;
    ISRMonth_MX                             month;
    ISRYear_MX                              isryear;
    Amount                                  fiscalAmount;

    public static const str DefaultLabelRevenue = "@SYS316828";
    public static const str DefaultLabelInventory = "@SYS316829";
    public static const str DefaultLabelPTUTaxPayment = "@SYS316830";
    public static const str DefaultLabelDeductions = "@SYS316831";
    public static const str DefaultLabelLosses = "@SYS316832";
    public static const str DefaultLabelISRRetentions = "@SYS316833";
    public static const str DefaultLabelCashDepositTax = "@SYS316834";
    public static const str DefaultLabelISRPreviousPayments = "@SYS316835";
    public static const str DefaultLabelISRCurrentPayments = "@SYS316836";
    public static const str DefaultLabelCompensationBalance = "@SYS316837";
    public static const str DefaultLabelEmployeeSubsidy = "@SYS316838";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getISRProvisionalDeclarationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The Report Data Provider class for the ISR Summary SSRS report.
    /// </summary>
    /// <returns>
    ///    The populated temporary table object.
    /// </returns>
    [
        #ISR_SSRSParameters_MX
        SRSReportDataSetAttribute(#tempProvisionalTable)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ISRProvisionalDeclarationTmp_MX getISRProvisionalDeclarationTmp()
    {
        select * from isrProvisionalDeclarationTmp;

        return isrProvisionalDeclarationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the report parameters.
    /// </summary>
    private void getParameters()
    {
        ISRProvisionalDeclarationContract_MX isrProvisionalDeclarationContract = this.parmDataContract() as ISRProvisionalDeclarationContract_MX;

        month        = isrProvisionalDeclarationContract.parmMonth();
        isrYear      = isrProvisionalDeclarationContract.parmIsryear();
        utilityRatio = isrProvisionalDeclarationContract.parmUtilityRatio();

        fromDate     = mkDate(01, month, isrYear);
        toDate       = endmth(fromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConceptsDefaultLabels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts default report's labels into the <c>ISRProvisionalDeclartionTmp_MX</c> temporary table.
    /// </summary>
    /// <remarks>
    ///    Inserts default report's labels into temporary table.
    /// </remarks>
    private void setConceptsDefaultLabels()
    {
        isrProvisionalDeclarationTmp.LabelAccumulatedRevenue = DefaultLabelRevenue;
        isrProvisionalDeclarationTmp.LabelInventory = DefaultLabelInventory;
        isrProvisionalDeclarationTmp.LabelPTUTaxPayment = DefaultLabelPTUTaxPayment;
        isrProvisionalDeclarationTmp.LabelDeductions = DefaultLabelDeductions;
        isrProvisionalDeclarationTmp.LabelLosses = DefaultLabelLosses;
        isrProvisionalDeclarationTmp.LabelISRRetentions = DefaultLabelISRRetentions;
        isrProvisionalDeclarationTmp.LabelCashDepositCash = DefaultLabelCashDepositTax;
        isrProvisionalDeclarationTmp.LabelISRPreviousPayments = DefaultLabelISRPreviousPayments;
        isrProvisionalDeclarationTmp.LabelISRCurrentPayments = DefaultLabelISRCurrentPayments;
        isrProvisionalDeclarationTmp.LabelCompensationBalance = DefaultLabelCompensationBalance;
        isrProvisionalDeclarationTmp.LabelEmployeeSubsidy = DefaultLabelEmployeeSubsidy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConceptsDescriptionLabels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts ISR concept label into the <c>ISRProvisionalDeclartionTmp_MX</c> temporary table.
    /// </summary>
    /// <param name="_isrConcept">
    ///    The <c>ISRConcept_MX</c> table buffer which contains concept descriptions.
    /// </param>
    /// <remarks>
    ///    Inserts ISR concept label into temporary table.
    /// </remarks>
    private void setConceptsDescriptionLabels()
    {
        while select isrConcept where isrConcept.Description
        {
            switch (isrConcept.Concept)
            {
                case ISRConceptCategory_MX::Revenue:
                    isrProvisionalDeclarationTmp.LabelAccumulatedRevenue = isrConcept.Description;
                    break;

                case ISRConceptCategory_MX::Inventory:
                    isrProvisionalDeclarationTmp.LabelInventory = isrConcept.Description;
                    break;

                case ISRConceptCategory_MX::PTUTaxPayment:
                    isrProvisionalDeclarationTmp.LabelPTUTaxPayment = isrConcept.Description;
                    break;

                case ISRConceptCategory_MX::Deductions:
                    isrProvisionalDeclarationTmp.LabelDeductions = isrConcept.Description;
                    break;

                case ISRConceptCategory_MX::Losses:
                    isrProvisionalDeclarationTmp.LabelLosses = isrConcept.Description;
                    break;

                case ISRConceptCategory_MX::ISRRetentions:
                    isrProvisionalDeclarationTmp.LabelISRRetentions = isrConcept.Description;
                    break;

                case ISRConceptCategory_MX::CashDepositTax:
                    isrProvisionalDeclarationTmp.LabelCashDepositCash = isrConcept.Description;
                    break;

                case ISRConceptCategory_MX::ISRPreviousPayments:
                    isrProvisionalDeclarationTmp.LabelISRPreviousPayments = isrConcept.Description;
                    break;

                case ISRConceptCategory_MX::ISRCurrentPayments:
                    isrProvisionalDeclarationTmp.LabelISRCurrentPayments = isrConcept.Description;
                    break;

                case ISRConceptCategory_MX::CompensationBalance:
                    isrProvisionalDeclarationTmp.LabelCompensationBalance = isrConcept.Description;
                    break;

                case ISRConceptCategory_MX::EmployeeSubsidy:
                    isrProvisionalDeclarationTmp.LabelEmployeeSubsidy = isrConcept.Description;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertConcepts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the <c>ISRProvisionalDeclartionTmp_MX</c> temporary table.
    /// </summary>
    /// <param name="_isrConcept">
    ///    The <c>ISRConcept_MX</c> table buffer which contains concept categories.
    /// </param>
    /// <param name="_generalJournalEntry">
    ///    The <c>GeneralJournalEntry</c> table buffer which contains journal information.
    /// </param>
    /// <param name="_generalJournalAccountEntry">
    ///    The <c>GeneralJournalAccountEntry</c> table buffer which contains transactions of all main accounts.
    /// </param>
    /// <param name="_toDate">
    ///    The <c>ToDate</c> type entered in the helper class.
    /// </param>
    /// <remarks>
    ///    Inserts records into temporary table.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertConcepts(
        ISRConcept_MX               _isrConcept,
        GeneralJournalEntry         _generalJournalEntry,
        GeneralJournalAccountEntry  _generalJournalAccountEntry,
        TransDate                   _toDate)
    {
        switch (_isrConcept.Concept)
        {
            case ISRConceptCategory_MX::Revenue:
                if (_generalJournalEntry.AccountingDate <= _toDate)
                {
                    isrProvisionalDeclarationTmp.AmountAccumlatedRevenue -= _generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            break;

            case ISRConceptCategory_MX::Inventory:
                if (_generalJournalEntry.AccountingDate <= _toDate)
                {
                    isrProvisionalDeclarationTmp.AmountInventory += _generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            break;

            case ISRConceptCategory_MX::PTUTaxPayment:
                if (_generalJournalEntry.AccountingDate <= _toDate)
                {
                    isrProvisionalDeclarationTmp.AmountPTUTaxPayment += _generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            break;

            case ISRConceptCategory_MX::Deductions:
                if (_generalJournalEntry.AccountingDate <= _toDate)
                {
                    isrProvisionalDeclarationTmp.AmountDeductions += _generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            break;

            case ISRConceptCategory_MX::Losses:
                if (_generalJournalEntry.AccountingDate <= _toDate)
                {
                    isrProvisionalDeclarationTmp.AmountLosses += _generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            break;

            case ISRConceptCategory_MX::ISRRetentions:
                if (_generalJournalEntry.AccountingDate <= _toDate)
                {
                    isrProvisionalDeclarationTmp.AmountISRRetentions += _generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            break;

            case ISRConceptCategory_MX::CashDepositTax:
                if (_generalJournalEntry.AccountingDate <= _toDate)
                {
                    isrProvisionalDeclarationTmp.AmountCashDepositTax += _generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            break;

            case ISRConceptCategory_MX::ISRPreviousPayments:
                if (_generalJournalEntry.AccountingDate <= _toDate)
                {
                    isrProvisionalDeclarationTmp.AmountISRPreviousPayments += _generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            break;

            case ISRConceptCategory_MX::ISRCurrentPayments:
                if (_generalJournalEntry.AccountingDate <= _toDate)
                {
                    isrProvisionalDeclarationTmp.AmountISRCurrentPayments += _generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            break;

            case ISRConceptCategory_MX::CompensationBalance:
                if (_generalJournalEntry.AccountingDate <= _toDate)
                {
                    isrProvisionalDeclarationTmp.AmountCompensationBalance += _generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            break;

            case ISRConceptCategory_MX::EmployeeSubsidy:
                if (_generalJournalEntry.AccountingDate <= _toDate)
                {
                    isrProvisionalDeclarationTmp.AmountEmployeeSubsidy += _generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertISRRates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the ISR Rates, lower amount, and fixed amount on an ISR Rates table based on the fiscal
    ///    amount value.
    /// </summary>
    private void insertISRRates()
    {
        fiscalAmount = (((isrProvisionalDeclarationTmp.AmountAccumlatedRevenue * utilityRatio)
                        + (isrProvisionalDeclarationTmp.AmountInventory - isrProvisionalDeclarationTmp.AmountPTUTaxPayment - isrProvisionalDeclarationTmp.AmountDeductions))
                        - isrProvisionalDeclarationTmp.AmountLosses );

        isrRateTable = ISRRateTable_MX::findByYearMonthMinMaxAmount(year(fromDate), mthofyr(fromDate), fiscalAmount);

        if (fiscalAmount > 0 && !isrRateTable)
        {
            var formatedDate = date2Str(fromDate, 23, DateDay::None, DateSeparator::Slash, DateMonth::Digits1or2, DateSeparator::Slash, DateYear::Digits4);

            isrProvisionalDeclarationTmp.IsRateMissing = true;
            isrProvisionalDeclarationTmp.MissingRateErrorMessage = strFmt("@Mexico:ISR_MissingRateForYearMonthAndRange", fiscalAmount, formatedDate);
        }
        else
        {
            isrProvisionalDeclarationTmp.Rate        = isrRateTable.Rate;
            isrProvisionalDeclarationTmp.MinAmount   = isrRateTable.LowerAmount;
            isrProvisionalDeclarationTmp.FixedAmount = isrRateTable.FixedAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExtendedResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts to ISRProvisionalDeclarationTmp_MX values which are calculated based on other fields data.
    /// </summary>
    private void insertExtendedResults()
    {
        isrProvisionalDeclarationTmp.FiscalUtility1 = isrProvisionalDeclarationTmp.AmountAccumlatedRevenue * utilityRatio;

        isrProvisionalDeclarationTmp.FiscalUtility2 = isrProvisionalDeclarationTmp.FiscalUtility1 +
                                                     isrProvisionalDeclarationTmp.AmountInventory -
                                                     isrProvisionalDeclarationTmp.AmountPTUTaxPayment -
                                                     isrProvisionalDeclarationTmp.AmountDeductions;

        isrProvisionalDeclarationTmp.FiscalResult = isrProvisionalDeclarationTmp.FiscalUtility2 - isrProvisionalDeclarationTmp.AmountLosses;

        isrProvisionalDeclarationTmp.PartialResult1 = isrProvisionalDeclarationTmp.FiscalResult - isrProvisionalDeclarationTmp.MinAmount;

        isrProvisionalDeclarationTmp.PartialResult2 = isrProvisionalDeclarationTmp.PartialResult1 * isrProvisionalDeclarationTmp.Rate / 100;

        isrProvisionalDeclarationTmp.ISRAmountOfPeriod = isrProvisionalDeclarationTmp.PartialResult2 + isrProvisionalDeclarationTmp.FixedAmount;

        isrProvisionalDeclarationTmp.NetISRAmountOfPeriod = isrProvisionalDeclarationTmp.ISRAmountOfPeriod -
                                                           isrProvisionalDeclarationTmp.AmountISRRetentions -
                                                           isrProvisionalDeclarationTmp.AmountCashDepositTax -
                                                           isrProvisionalDeclarationTmp.AmountISRPreviousPayments;

        isrProvisionalDeclarationTmp.ISRTaxPayableOfPeriod = isrProvisionalDeclarationTmp.NetISRAmountOfPeriod - isrProvisionalDeclarationTmp.AmountISRCurrentPayments;

        isrProvisionalDeclarationTmp.ISRTaxPayable = isrProvisionalDeclarationTmp.ISRTaxPayableOfPeriod - isrProvisionalDeclarationTmp.AmountCompensationBalance;

        isrProvisionalDeclarationTmp.ProvisionalPaymentOfISR = isrProvisionalDeclarationTmp.ISRTaxPayable - isrProvisionalDeclarationTmp.AmountEmployeeSubsidy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. The method will be called by
    ///    SSRS at runtime, compute data, and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        FiscalCalendarYear      fiscalCalendarYear;
        FiscalYearName          yearFind;
        TransDate               startDate;

        this.getParameters();

        yearFind = int2str(isrYear);
        select StartDate from fiscalCalendarYear
            where fiscalCalendarYear.Name == yearFind;

        if (fiscalCalendarYear)
            startDate = fiscalCalendarYear.StartDate;

        this.setConceptsDefaultLabels();
        this.setConceptsDescriptionLabels();

        while select isrConcept
            order by Concept
            join isrConceptMainAccount
                where isrConceptMainAccount.Concept == isrConcept.RecId
            join name, MainAccountID from mainAccount
                where mainAccount.RecId     == isrConceptMainAccount.MainAccount
        {
            while select * from generalJournalAccountEntry
                join RecId from dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
                join RecId, DimensionAttributeValueGroup from dimensionAttributeValueGroupCombination
                    where dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination == dimensionAttributeValueCombination.RecId
                join RecId from dimensionAttributeLevelValue
                    where dimensionAttributeLevelValue.DimensionAttributeValueGroup == dimensionAttributeValueGroupCombination.DimensionAttributeValueGroup
                       && dimensionAttributeLevelValue.DisplayValue                 == mainAccount.MainAccountID
                join RecId, AccountingDate from generalJournalEntry
                    where generalJournalEntry.RecId          == generalJournalAccountEntry.GeneralJournalEntry
                       && generalJournalEntry.AccountingDate >= startDate
                       && generalJournalEntry.Ledger == Ledger::current()
            {
                if ((generalJournalAccountEntry.AccountingCurrencyAmount    > 0 && isrConceptMainAccount.AccountType == ISRCreditDebit_MX::Debit)
                    || (generalJournalAccountEntry.AccountingCurrencyAmount < 0 && isrConceptMainAccount.AccountType == ISRCreditDebit_MX::Credit)
                    || (isrConceptMainAccount.AccountType == ISRCreditDebit_MX::Both))
                {
                    this.insertConcepts(isrConcept, generalJournalEntry, generalJournalAccountEntry, toDate);
                }
            }
        }

        this.insertISRRates();
        this.insertExtendedResults();
        isrProvisionalDeclarationTmp.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
