<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSLoadBuildQueryBuilder</c> class is used as a base class for classes creating load build queries.
/// </summary>
abstract class TMSLoadBuildQueryBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLocationData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the ranges for an address to query on.
    /// </summary>
    /// <param name="_logisticsPostalAddressDS">
    /// The datasource to populate.
    /// </param>
    /// <param name="_country">
    /// The country to query on.
    /// </param>
    /// <param name="_postalCodeFrom">
    /// The starting postal code to query from.
    /// </param>
    /// <param name="_postalCodeTo">
    /// The end postal code to query to.
    /// </param>
    protected void addLocationData(
        QueryBuildDataSource            _logisticsPostalAddressDS,
        TMSCountryRegion                _country,
        TMSPostalCodeFromRegExpression  _postalCodeFrom,
        TMSPostalCodeToRegExpression    _postalCodeTo)
    {
        QueryBuildRange qr;

        if (_country)
        {
            qr = SysQuery::findOrCreateRange(_logisticsPostalAddressDS, fieldNum(logisticsPostalAddress, CountryRegionId));

            if (!qr.value())
            {
                qr.value(_country);
            }
        }

        if (_postalCodeFrom && _postalCodeTo)
        {
            qr = SysQuery::findOrCreateRange(_logisticsPostalAddressDS, fieldNum(logisticsPostalAddress, ZipCode));

            if (!qr.value())
            {
                qr.value(queryRange(_postalCodeFrom, _postalCodeTo));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLocationDataFromWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the ranges for a warehouse address to query on.
    /// </summary>
    /// <param name="_inventLocationDS">
    /// The datasource to populate.
    /// </param>
    /// <param name="_country">
    /// The country to query on.
    /// </param>
    /// <param name="_postalCodeFrom">
    /// The starting postal code to query from.
    /// </param>
    /// <param name="_postalCodeTo">
    /// The end postal code to query to.
    /// </param>
    protected void addLocationDataFromWarehouse(
        QueryBuildDataSource            _inventLocationDS,
        TMSCountryRegion                _country,
        TMSPostalCodeFromRegExpression  _postalCodeFrom,
        TMSPostalCodeToRegExpression    _postalCodeTo)
    {
        QueryBuildDataSource inventLocationLogisticsLocationDS;
        QueryBuildDataSource logisticLocationDS;
        QueryBuildDataSource logisticsPostalAddressDS;

        if (_country || (_postalCodeFrom && _postalCodeTo))
        {
            inventLocationLogisticsLocationDS = _inventLocationDS.addDataSource(tableNum(InventLocationLogisticsLocation));
            logisticLocationDS                = inventLocationLogisticsLocationDS.addDataSource(tableNum(LogisticsLocation));
            logisticsPostalAddressDS          = logisticLocationDS.addDataSource(tableNum(LogisticsPostalAddress));

            inventLocationLogisticsLocationDS.joinMode(JoinMode::ExistsJoin);
            inventLocationLogisticsLocationDS.relations(true);

            logisticLocationDS.joinMode(JoinMode::ExistsJoin);
            logisticLocationDS.relations(true);

            logisticsPostalAddressDS.joinMode(JoinMode::ExistsJoin);
            logisticsPostalAddressDS.relations(true);

            this.addLocationData(logisticsPostalAddressDS, _country, _postalCodeFrom, _postalCodeTo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a sales query using the supplied data.
    /// </summary>
    /// <param name="_loadBuildQueryCriteria">
    /// Data to generate the query from.
    /// </param>
    /// <param name="_deliveryZipCodes">
    /// A container with a scheduled route's destination zip codes
    /// </param>
    /// <returns>
    /// Generated Query.
    /// </returns>
    public abstract Query buildQuery(
        TMSLoadBuildQueryCriteria   _loadBuildQueryCriteria,
        container                   _deliveryZipCodes = conNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>