<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_TransferTransitFrom</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMov_TransferTransitFrom</c> class creates movements for each transfer order.
/// </summary>
/// <remarks>
///    This class is used together with the inventory transfer orders.When working with
///    <c>
///       transferorders
///    </c>
///     and
///    <c>
///       inventMovements
///    </c>
///    , four movements are created for each transfer order (
///    <c>
///       TableNum: InventTransferLine
///    </c>
///    ).
///    <list type="bullet">
///       <item>
///          <description>
///             <c>InventMov_TransferFrom</c>: Issue transaction from warehouse.
///          </description>
///       </item>
///       <item>
///          <description>
///             <c>InventMov_TransferTransitTo</c>: Receipt transaction to transit warehouse.
///          </description>
///       </item>
///       <item>
///          <description>
///             <c>InventMov_TransferTransitFrom</c>: Issue transaction from transit warehouse.
///          </description>
///       </item>
///       <item>
///          <description>
///             <c>InventMov_TransferTo</c>: Receipt transaction to warehouse.
///          </description>
///       </item>
///    </list>
/// </remarks>
[InventMovementFactoryAttribute(tableStr(InventTransferLine),InventMovSubType::TransferOrderTransitFrom)]
class InventMov_TransferTransitFrom extends InventMov_Transfer
{
    private boolean isCancellingTransferOrder = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
    public void addRemainPhysical(InventQty  _inventQty)
    {
        inventTransferLine.QtyRemainReceive += _inventQty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the <c>InventLocationId</c> extended data type of the <c>InventDim</c> table of this
    ///    movement is the same as the <c>InventLocationId</c> extended data type of the transit location of
    ///    the <c>InventTransferTable</c> table that is related to this movement.
    /// </summary>
    /// <returns>
    ///    true if both of the <c>InventLocationId</c> extended data types are the same; otherwise, false.
    /// </returns>
    protected boolean checkInventLocationId()
    {
        if (this.inventdim().InventLocationId != InventTransferTable::find(inventTransferLine.TransferId).InventLocationIdTransit)
        {
            return checkFailed(strFmt("@SYS78512", InventTransferTable::find(inventTransferLine.TransferId).InventLocationIdTransit));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotSubDelivery</Name>
				<Source><![CDATA[
    protected boolean checkNotSubDelivery(
        InventQty       _physicalNow,
        InventQty       _remainPhysicalNow,
        boolean         _isPhysicalUpdate
        , PdsCWInventQty  _pdsCWPhysicalNow
        , PdsCWInventQty  _pdsCWRemainPhysicalNow
        )
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePicked</Name>
				<Source><![CDATA[
    public boolean checkUpdatePicked(InventUpd_Picked _updateNow)
    {
        //No need to do this check for TO and transit, so increase performance
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && inventTransferLine.RecId)
        {
            InventTransOriginTransferTransitFrom::writeOriginOwnerRelationship(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will return the DefaultDimension based up on the InventTransId
    /// </summary>
    /// <returns>
    /// Default dimension
    /// </returns>
    public DimensionDefault defaultDimension()
    {
        if (InventTransferLine::enableDefaultDimensionControl())
        {
            return inventTransferLine.DimensionDefaultShipFrom;
        }

        // <GIN>
        if (this.useParmLineDefaultDimension_IN())
        {
            return (select firstOnly InventTransferParmLine where InventTransferParmLine.ParmId == this.parmInventParmID_IN()
                                                                && InventTransferParmLine.InventTransIdTransit == inventTransferLine.InventTransIdTransitFrom).DefaultDimension_IN;
        }
        // </GIN>

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (inventTransferLine.RecId)
        {
            InventTransOriginTransferTransitFrom::deleteOwnerRelationship(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAllowBlankIssue</Name>
				<Source><![CDATA[
    protected boolean dimAllowBlankIssue(InventDimGroupFieldSetup _inventDimGroupFieldSetup)
    {
        return this.dimAllowBlankReceipt(_inventDimGroupFieldSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAllowBlankReceipt</Name>
				<Source><![CDATA[
    protected boolean dimAllowBlankReceipt(InventDimGroupFieldSetup _inventDimGroupFieldSetup)
    {
        boolean ret = super(_inventDimGroupFieldSetup);

        if (!ret)
        {   
            // Allow WMSLocationId to be blank at the transit warehouse
            if (_inventDimGroupFieldSetup.dimFieldId() == fieldNum(InventDim, wmsLocationId))
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFrom</Name>
				<Source><![CDATA[
    protected InventDim inventDimFrom()
    {
        return inventTransferLine.inventDimTransitFrom(inventTransferTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        if (! inventDim.InventDimId)
        {
            inventDim = inventTransferLine.inventDimTransitFrom(inventTransferTable);
        }

        return inventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimMerged</Name>
				<Source><![CDATA[
    public InventDim inventDimMerged(InventDim _inventDim)
    {
        return inventTransferLine.inventDimMergeWarehouse(inventTransferTable.InventLocationIdTransit,inventTransferTable,_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimTo</Name>
				<Source><![CDATA[
    protected InventDim inventDimTo()
    {
        return inventTransferLine.inventDimReceive(inventTransferTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginTransferTransitFrom::findInventTransOriginId(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrimaryMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether this movement is the primary movement.
    /// </summary>
    /// <returns>
    ///    true if it is the primary movement; otherwise, false.
    /// </returns>
    public boolean isPrimaryMovement()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ID of the marked transaction origin.
    /// </summary>
    /// <returns>
    /// <c>0</c> if entire movement is not marked; otherwise, the ID of the transaction origin marked with.
    /// </returns>
    public InventTransOriginId markingRefInventTransOrigin()
    {
        // <GEERU>
        if (markingRefInventTransOrigin_RU)
        {
            return markingRefInventTransOrigin_RU;
        }
        // </GEERU>

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeTransDimTransferReceipt</Name>
				<Source><![CDATA[
    public InventDim mergeTransDimTransferReceipt(
        InventDim       _toInventDim,
        InventDim       _fromInventDim          = this.inventdim(),
        InventDim       _origFromDim            = _fromInventDim)
    {
        _toInventDim.mergeUsedDim(this.inventDimGroupSetup(), _fromInventDim);

        return _toInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBePicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transactions that are related to this movement must be picked.
    /// </summary>
    /// <returns>
    ///    true if the transactions must be picked; otherwise, false.
    /// </returns>
    public boolean mustBePicked()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transactions that are related to this movement must be registered.
    /// </summary>
    /// <returns>
    ///    true if transactions must be registered; otherwise, false.
    /// </returns>
    public boolean mustBeRegistered()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckOverDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current <c>InventMovement</c> object requires checking for over delivery.
    /// </summary>
    /// <param name="_direction">
    /// The <c>InventDirection</c> value of the update that is being made.
    /// </param>
    /// <returns>
    /// true if over delivery must be checked; otherwise, false.
    /// </returns>
    public NoYes mustCheckOverDelivery(InventDirection _direction)
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new <see cref="T:InventMov_TransferTransitFrom" /> class that is created based on the
    /// original <see cref="T:InventTransferLine" />.
    /// </summary>
    /// <returns>
    /// A new instance of the <see cref="T:InventMov_TransferTransitFrom" /> class.
    /// </returns>
    public InventMovement newMovement_Orig()
    {
        if (!inventTransferLine.RecId)
        {
            return null;
        }

        return InventMov_TransferTransitFrom::newFromInventTransferLine(inventTransferLine.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>InventMovement</c> object.
    /// </summary>
    /// <returns>
    /// The <c>InventMovement</c> object.
    /// </returns>
    InventMovement  newMovement_TransferIssue()
    {
        if (this.isCancellingTransferOrder() || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            return this;
        else
            return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>InventMovement</c> object.
    /// </summary>
    /// <returns>
    /// An <c>InventMovement</c> object.
    /// </returns>
    InventMovement  newMovement_TransferReceipt()
    {
        if (this.isCancellingTransferOrder() || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            return InventMovement::construct(this.buffer(),InventMovSubType::TransferOrderTo,this.childBuffer());
        else
            return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancellingTransferOrder</Name>
				<Source><![CDATA[
    private boolean isCancellingTransferOrder()
    {
        if (isCancellingTransferOrder) 
        {
            return true;
        }

        if (parmId)
        {
            InventTransferParmTable inventTransferParmTable;
            select firstonly CanceledShipmentJournalRecId from inventTransferParmTable
                where inventTransferParmTable.ParmId == parmId;
            if (inventTransferParmTable.CanceledShipmentJournalRecId)
            {
                isCancellingTransferOrder = true;
                return true;
            }
        }
        isCancellingTransferOrder = false;
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAddRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method adds CW remain physical
    /// </summary>
    /// <param name="_qty">
    /// CW quantity to add to remain physical
    /// </param>
    public void pdsCWAddRemainPhysical(PdsCWInventQty _qty)
    {
        inventTransferLine.PdsCWQtyRemainReceive += _qty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns CW remain physical
    /// </summary>
    /// <returns>
    /// returns CW quantity
    /// </returns>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        return this.transSign() * inventTransferLine.PdsCWQtyRemainReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveMarkMin</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns if CW should reserve min CW quantity.
    /// </summary>
    /// <returns>
    /// returns flag
    /// </returns>
    public boolean pdsCWReserveMarkMin()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method set CW remain physical
    /// </summary>
    /// <param name="_qty">
    /// CW quantity to set remain physical
    /// </param>
    public void pdsCWSetRemainPhysical(PdsCWInventQty _qty)
    {
        inventTransferLine.PdsCWQtyRemainReceive = _qty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty remainPhysical()
    {
        // <GIN>
        if (inventTransferLine.checkForUnitID_IN())
        {
            return this.transSign() * inventTransferLine.converUnit_IN(inventTransferLine.QtyRemainReceive);
        }
        else
        {
        // </GIN>
            return this.transSign() * inventTransferLine.QtyRemainReceive;
        // <GIN>
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>InventDimId</c> extended data type of this movement to a merge between the
    ///    <c>InventDim</c> table that is related to the <c>InventDimId</c> extended data type that is passed
    ///    as an argument and the <c>InventLoactionIdTransit</c> extended data type of the
    ///    <c>InventTransferTable</c> table that is related to the <c>InventTransferLine</c> table that is
    ///    related to this movement.
    /// </summary>
    /// <param name="_dimId">
    ///    The <c>InventDimId</c> extended data type from which to find the <c>InventDim</c> table to merge.
    /// </param>
    public void setInventDimId(InventDimId _dimId)
    {
        inventDim = inventTransferLine.inventDimMergeWarehouse(inventTransferTable.InventLocationIdTransit,inventTransferTable,InventDim::find(_dimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysical</Name>
				<Source><![CDATA[
    public void setRemainPhysical(InventQty  _inventQty)
    {
        inventTransferLine.QtyRemainReceive = _inventQty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return inventTransferLine.ReceiveDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDirection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the direction of the transfer movements.
    /// </summary>
    /// <returns>
    ///    The direction of the transfer movements.
    /// </returns>
    public InventDirection transferDirection()
    {
        return InventDirection::Issue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of a transfer counterpart inventory transaction originator that corresponds to the
    ///    movement.
    /// </summary>
    /// <returns>
    ///    The ID of a transfer counterpart inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId transferInventTransOriginId()
    {
        return InventTransOrigin::findByInventTransId(inventTransferLine.InventTransIdReceive).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return inventTransferLine.InventTransIdTransitFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transIdSum</Name>
				<Source><![CDATA[
    public InventTransIdSum transIdSum(boolean reRead = false)
    {
        if (! transIdSum || reRead)
        {
            transIdSum = InventTransIdSum_InventLocation::newTransit(this.inventTransOriginId(), this.transChildType() != InventTransChildType::None, this.transChildType(), this.transChildRefId());
        }

        return transIdSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>transSign</c> representing the direction of this transaction.
    /// </summary>
    /// <returns>
    ///    Returns -1.
    /// </returns>
    public Integer transSign()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::TransferOrderReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_TransferTransitFrom</c> class that is based on the
    ///    specified record.
    /// </summary>
    /// <param name="_inventTransferLine">
    ///    The <c>InventTransferLine</c> record for which the class is instantiated.
    /// </param>
    /// <param name="_inventType">
    ///    The associated <c>InventType</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_TransferTransitFrom</c> class.
    /// </returns>
    public static InventMov_TransferTransitFrom newFromInventTransferLine(
        InventTransferLine      _inventTransferLine,
        InventType              _inventType         = new InventType(_inventTransferLine))
    {
        InventMov_TransferTransitFrom movement = new InventMov_TransferTransitFrom(_inventTransferLine, _inventType);
        movement.inventMovSubType(InventMovSubType::TransferOrderTransitFrom);
        return movement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>