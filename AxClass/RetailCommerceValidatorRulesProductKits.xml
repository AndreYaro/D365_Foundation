<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorRulesProductKits</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorRulesProductKits
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate entity type list.
    /// </summary>
    /// <returns>The map containing all entity types and their descriptions.</returns>
    public static Map getEntityType()
    {
        Map entityList = new Map(Types::String,Types::Container);

        entityList.insert("@Retail:RetailCommerceValidatorKitValidationEntityId", [RetailCommerceValidatorEntityFunction::Functional, tableNum(RetailKit), classStr(RetailCommerceValidatorRulesProductKits)]);

        return entityList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRulesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate rule list.
    /// </summary>
    /// <returns>The map containing all rules and rule related properties.</returns>
    public static Map getRulesList()
    {
        Map rulesList = new Map(Types::String,Types::Container);

        // Validate if Kit product is released to legal entity.
        rulesList.insert("@Retail:RetailCommerceValidatorKitRu001", [
            "@Retail:RetailCommerceValidatorKitValidationEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorKitRu001Description",
            'validateKit',
            formStr(EcoResProductListPage),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        // Validate if Kit component is released to legal entity.
        rulesList.insert("@Retail:RetailCommerceValidatorKitCompRu001", [
            "@Retail:RetailCommerceValidatorKitValidationEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorKitCompRu001Description",
            'validateKitComponent',
            formStr(RetailKitConfigure),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);
        
        //Validate if Kit component substitute is released to legal entity.
        rulesList.insert("@Retail:RetailCommerceValidatorKitCompSubsRu001", [
            "@Retail:RetailCommerceValidatorKitValidationEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorKitCompSubsRu001Description",
            'validateKitComponentSubstitute',
            formStr(RetailKitConfigure),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        //Validates Kit and kit components are part of the same assortment or not.
        rulesList.insert("@Retail:RetailCommerceValidatorKitCompRu002", [
            "@Retail:RetailCommerceValidatorKitValidationEntityId",
            0,
            RetailCommerceValidatorResultStatus::Warning,
            "@Retail:RetailCommerceValidatorKitCompRu002Description",
            'validateKitComponentAssortment',
            formStr(RetailKitConfigure),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        //Validates Kit and kit components(including substitutions) are part of the same assortment or not.
        rulesList.insert("@Retail:RetailCommerceValidatorKitCompSubsRu002", [
            "@Retail:RetailCommerceValidatorKitValidationEntityId",
            0,
            RetailCommerceValidatorResultStatus::Warning,
            "@Retail:RetailCommerceValidatorKitCompSubsRu002Description",
            'validateKitComponentSubstituteAssortment',
            formStr(RetailKitConfigure),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        //Validates kit components are not excluded from any assortment.
        rulesList.insert("@Retail:RetailCommerceValidatorKitCompRu003", [
            "@Retail:RetailCommerceValidatorKitValidationEntityId",
            0,
            RetailCommerceValidatorResultStatus::Warning,
            "@Retail:RetailCommerceValidatorKitCompRu003Description",
            'validateKitComponentNotExcluded',
            formStr(RetailKitConfigure),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        return rulesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get number of entities of the Entity type for a given validation
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <returns>The number of entities in scope for the validation.</returns>
    public static int64 getEntityCount(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorWorkChannelAssortedProducts AssortmentProducts;
        int64 counter;

        while select count(KitRefRecId) from AssortmentProducts
            group by AssortmentProducts.KitRefRecId
            where AssortmentProducts.ValidationId == '003501' && AssortmentProducts.KitRefRecId != 0
        {
            counter++;
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rule --> Kit-Ru-001: Kit product is not released in the legal entity.
    /// Validates Kit product is released in the legal entity or not.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateKit(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelAssortedProducts  retailCommerceValidatorAssortedProducts;
        RetailKit  retailKit;
        InventTable  inventTable;
        int resultsCounter = 0;

        while select KitRefRecId from retailCommerceValidatorAssortedProducts
            group by retailCommerceValidatorAssortedProducts.KitRefRecId,retailKit.RecId
            where retailCommerceValidatorAssortedProducts.ValidationId == _validatorTest.ValidationId &&
                  retailCommerceValidatorAssortedProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                  retailCommerceValidatorAssortedProducts.ProductRefRecId <= _validatorTest.RangeEndRecId
         join RecId from retailKit
            where retailKit.RecId == retailCommerceValidatorAssortedProducts.KitRefRecId
         Notexists join inventTable
            where inventTable.Product == retailKit.ProductMaster
        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextKitMaster(_validatorTest.ValidationId, retailKit.RecId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    "@Retail:RetailCommerceValidatorKitRu001Description",
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorKitRu001"
                    );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKitComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rule --> KitComp-Ru-001: Kit component is not released in the legal entity.
    /// Validates Kit component is released in the legal entity or not.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateKitComponent(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelAssortedProducts  retailCommerceValidatorAssortedProducts;
        RetailKit  retailKit;
        RetailKitComponent  retailKitComponent;
        InventDimCombination  inventDimCombination;
        InventTable  inventTable;
        int resultsCounter = 0;

        while select KitRefRecId from retailCommerceValidatorAssortedProducts
            group by retailCommerceValidatorAssortedProducts.KitRefRecId,retailKit.RecId,retailKitComponent.RecId,retailKitComponent.Component
            where retailCommerceValidatorAssortedProducts.ValidationId == _validatorTest.ValidationId &&
                  retailCommerceValidatorAssortedProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                  retailCommerceValidatorAssortedProducts.ProductRefRecId <= _validatorTest.RangeEndRecId
         join RecId from retailKit
            where retailKit.RecId == retailCommerceValidatorAssortedProducts.KitRefRecId
         join RecId,Component from retailKitComponent
            where retailKitComponent.Kit == retailKit.RecId
         Notexists join inventDimCombination
            where inventDimCombination.DistinctProductVariant == retailKitComponent.Component
        {
            //To indentify the product master
            if(!InventTable::findByProduct(retailKitComponent.Component))
            {
                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextKitComponent(_validatorTest.ValidationId, retailKit.RecId, retailKitComponent.RecId);

                // Log the issue
                RetailCommerceValidatorLog::addLog(
                        logContext,
                        "@Retail:ValidationRuleCounterMetricId",
                        "@Retail:RetailCommerceValidatorKitCompRu001Description",
                        _validatorTest.TestId,
                        "@Retail:RetailCommerceValidatorKitCompRu001"
                        );

                // Increase the counter of issues
                resultsCounter++;
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKitComponentSubstitute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rule --> KitCompSubs-Ru-001: Substitute of the Kit component is not released in the legal entity.
    /// Validates Substitute of the Kit component is released in the legal entity or not.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateKitComponentSubstitute(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelAssortedProducts  retailCommerceValidatorAssortedProducts;
        RetailKit  retailKit;
        RetailKitComponent  retailKitComponent;
        RetailKitComponentSubstitute  retailKitComponentSubstitute;
        InventDimCombination  inventDimCombination;
        int resultsCounter = 0;

        while select KitRefRecId from retailCommerceValidatorAssortedProducts
            group by retailCommerceValidatorAssortedProducts.KitRefRecId,retailKit.RecId,retailKitComponent.RecId,retailKitComponentSubstitute.RecId,retailKitComponentSubstitute.SubstituteProduct
            where retailCommerceValidatorAssortedProducts.ValidationId == _validatorTest.ValidationId &&
                  retailCommerceValidatorAssortedProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                  retailCommerceValidatorAssortedProducts.ProductRefRecId <= _validatorTest.RangeEndRecId
         join RecId from retailKit
            where retailKit.RecId == retailCommerceValidatorAssortedProducts.KitRefRecId
         join RecId from retailKitComponent
            where retailKitComponent.Kit == retailKit.RecId
         join RecId,SubstituteProduct from retailKitComponentSubstitute
            where retailKitComponentSubstitute.KitComponent == retailKitComponent.RecId
         Notexists join inventDimCombination
            where inventDimCombination.DistinctProductVariant == retailKitComponentSubstitute.SubstituteProduct
        {
            if(!InventTable::findByProduct(retailKitComponentSubstitute.SubstituteProduct))
            {
                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextKitComponentSubstitute(_validatorTest.ValidationId, retailKit.RecId, retailKitComponent.RecId, retailKitComponentSubstitute.RecId);

                // Log the issue
                RetailCommerceValidatorLog::addLog(
                        logContext,
                        "@Retail:ValidationRuleCounterMetricId",
                        "@Retail:RetailCommerceValidatorKitCompSubsRu001Description",
                        _validatorTest.TestId,
                        "@Retail:RetailCommerceValidatorKitCompSubsRu001"
                        );

                // Increase the counter of issues
                resultsCounter++;
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKitComponentAssortment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rule --> KitComp-Ru-002: Kit and kit components must be part of the same assortment.
    /// Validates Kit and kit components are part of the same assortment or not.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateKitComponentAssortment(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelProducts  workChannelProducts;
        RetailCommerceValidatorWorkChannelAssortedProducts  retailCommerceValidatorAssortedProducts;
        RetailCommerceValidatorWorkChannelAssortedProducts  workChannelAssortedProducts;
        RetailKit  retailKit;
        RetailKitComponent  retailKitComponent;
        int resultsCounter = 0;

        while select KitRefRecId,AssortmentId from retailCommerceValidatorAssortedProducts
            where retailCommerceValidatorAssortedProducts.ValidationId == _validatorTest.ValidationId &&
                  retailCommerceValidatorAssortedProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                  retailCommerceValidatorAssortedProducts.ProductRefRecId <= _validatorTest.RangeEndRecId
             join RecId from retailKit
                where retailKit.RecId == retailCommerceValidatorAssortedProducts.KitRefRecId
             join RecId,Component from retailKitComponent
                where retailKitComponent.Kit == retailKit.RecId
             notexists join workChannelAssortedProducts
                where workChannelAssortedProducts.ValidationId == _validatorTest.ValidationId &&
                    workChannelAssortedProducts.AssortmentId == retailCommerceValidatorAssortedProducts.AssortmentId &&
                    workChannelAssortedProducts.ProductRefRecId == retailKitComponent.Component
                join workChannelProducts
                    where workChannelProducts.ProductRefRecId == workChannelAssortedProducts.ProductRefRecId &&
                        workChannelProducts.ValidationId == workChannelAssortedProducts.ValidationId &&
                        workChannelProducts.ChannelExcluded == Noyes::No

        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextKitComponentAssortment(_validatorTest.ValidationId, retailKit.RecId, retailKitComponent.RecId, retailCommerceValidatorAssortedProducts.AssortmentId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    "@Retail:RetailCommerceValidatorKitCompRu002Description",
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorKitCompRu002"
                    );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKitComponentSubstituteAssortment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rule --> KitCompSubs-Ru-002: Kit and kit components(including substitutions) must be part of the same assortment.
    /// Validates Kit and kit components(including substitutions) are part of the same assortment or not.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateKitComponentSubstituteAssortment(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelProducts  workChannelProducts;
        RetailCommerceValidatorWorkChannelAssortedProducts  retailCommerceValidatorAssortedProducts;
        RetailCommerceValidatorWorkChannelAssortedProducts  workChannelAssortedProducts;
        RetailKit  retailKit;
        RetailKitComponent  retailKitComponent;
        RetailKitComponentSubstitute  retailKitComponentSubstitute;
        int resultsCounter = 0;

        while select KitRefRecId,AssortmentId from retailCommerceValidatorAssortedProducts
            order by ProductRefRecId
            where retailCommerceValidatorAssortedProducts.ValidationId == _validatorTest.ValidationId &&
                  retailCommerceValidatorAssortedProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                  retailCommerceValidatorAssortedProducts.ProductRefRecId <= _validatorTest.RangeEndRecId
             join RecId from retailKit
                where retailKit.RecId == retailCommerceValidatorAssortedProducts.KitRefRecId
             join RecId from retailKitComponent
                where retailKitComponent.Kit == retailKit.RecId
             join RecId,SubstituteProduct from retailKitComponentSubstitute
                where retailKitComponentSubstitute.KitComponent == retailKitComponent.RecId
             notexists join workChannelAssortedProducts
                where workChannelAssortedProducts.ValidationId == _validatorTest.ValidationId &&
                    workChannelAssortedProducts.AssortmentId == retailCommerceValidatorAssortedProducts.AssortmentId &&
                    workChannelAssortedProducts.ProductRefRecId == retailKitComponentSubstitute.SubstituteProduct
                join workChannelProducts
                    where workChannelProducts.ProductRefRecId == workChannelAssortedProducts.ProductRefRecId &&
                        workChannelProducts.ValidationId == workChannelAssortedProducts.ValidationId &&
                        workChannelProducts.ChannelExcluded == Noyes::No

        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextKitComponentSubstituteAssortment(_validatorTest.ValidationId, retailKit.RecId, retailKitComponent.RecId, retailKitComponentSubstitute.RecId, retailCommerceValidatorAssortedProducts.AssortmentId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    "@Retail:RetailCommerceValidatorKitCompSubsRu002Description",
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorKitCompSubsRu002"
                    );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKitComponentNotExcluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rule --> KitComp-Ru-003: Kit component is excluded from the assortment.
    /// Validates kit components are not excluded from any assortment.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateKitComponentNotExcluded(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelAssortedProducts  retailCommerceValidatorAssortedProducts;
        RetailCommerceValidatorWorkChannelProducts  retailCommerceValidatorWorkChannelProducts;
        RetailKit  retailKit;
        RetailKitComponent  retailKitComponent;
        RetailAssortmentLookup  retailAssortmentLookup;
        int resultsCounter = 0;

        while select KitRefRecId from retailCommerceValidatorAssortedProducts
            where retailCommerceValidatorAssortedProducts.ValidationId == _validatorTest.ValidationId &&
                  retailCommerceValidatorAssortedProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                  retailCommerceValidatorAssortedProducts.ProductRefRecId <= _validatorTest.RangeEndRecId
         join RecId from retailKit
            where retailKit.RecId == retailCommerceValidatorAssortedProducts.KitRefRecId
         join RecId,Component from retailKitComponent
            where retailKitComponent.Kit == retailKit.RecId
         exists join retailCommerceValidatorWorkChannelProducts
            where retailCommerceValidatorWorkChannelProducts.ProductRefRecId == retailKitComponent.Component &&
                retailCommerceValidatorWorkChannelProducts.ValidationId == _validatorTest.ValidationId &&
                retailCommerceValidatorWorkChannelProducts.ChannelExcluded == NoYes::Yes
        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextKitComponent(_validatorTest.ValidationId, retailKit.RecId, retailKitComponent.RecId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    "@Retail:RetailCommerceValidatorKitCompRu003Description",
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorKitCompRu003"
                    );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>