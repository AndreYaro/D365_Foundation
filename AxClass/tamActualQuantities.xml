<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMActualQuantities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMActualQuantities</c> class is designed to get the actual
/// quantity purchased during the time of a given promotion.
/// </summary>
class tamActualQuantities
{
    TAMTradePromotion       tamTradePromotion;
    SalesQty                actualBaseQty;
    Percent                 actualLift;
    SalesQty                totalInvoicedQty;
    AmountCur               totalInvoicedAmt;
    List                    salesOrderInventTransId;
    List                    salesOrderInvoiceRecId;
    Set                     countedSalesOrderInventTransId;
    Set                     countedSalesOrderInvoiceRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcActualBaseQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates actual base quantity.
    /// </summary>
    protected void calcActualBaseQty()
    {
        // If the actual invoice quantity is greater than that estimated on the promotion for
        // base quantity use the base quantity from the promotion.
        if (totalInvoicedQty > tamTradePromotion.BaseUnits)
        {
            actualBaseQty = tamTradePromotion.BaseUnits;
        }
        // If the actual invoice quantity is less than that estimated on the promotion for
        // base quantity use the actual amount of quantity invoiced for the promotion.
        else
        {
            actualBaseQty = totalInvoicedQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and sets all actual quantity values.
    /// </summary>
    public void calcAllQuantities()
    {
        this.calcInvoicedQty();
        this.calcActualBaseQty();
        this.calcLiftPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBBInvoiceAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all amounts related to bill back merchandise events that have not already been
    /// evaluated for off invoice merchandise events on the same promotion to calculate
    /// the bill back invoiced quantity.
    /// </summary>
    /// <param name="_merchEventItems">
    /// The trade promotion item to use to check for bill back merchandise events.
    /// </param>
    /// <param name="_toUnit">
    /// The unit of measure to convert the bill back to.
    /// </param>
    /// <returns>
    /// The invoiced amount for bill back events on a promotion.
    /// </returns>
    public SalesInvoicedQty calcBBInvoiceAmt(TAMPromotionItem _merchEventItems, UnitOfMeasureSymbol _toUnit)
    {
        AmountCur           invoiceAmt;
        PdsRebateAgreement  pdsRebateAgreement;
        PdsRebateTable      pdsRebateTable;
        CustInvoiceTrans    custInvoiceTrans;

        while select RecId from pdsRebateAgreement
                where pdsRebateAgreement.tamMerchandisingEventID == _merchEventItems.MerchandisingEventID
                join RecId from pdsRebateTable
                    where pdsRebateTable.PdsRebateAgreementRefRecId == pdsRebateAgreement.RecId
                join LineAmount, RecId from custInvoiceTrans
                    where custInvoiceTrans.RecId   == pdsRebateTable.custInvoiceTransRefRecId
        {
            if (!countedSalesOrderInvoiceRecId.in(custInvoiceTrans.RecId))
            {
                // Convert to the unit of measure for the trade promotion.
                invoiceAmt += custInvoiceTrans.LineAmount;
                // Store the recId for the cust invoice trans.
                salesOrderInvoiceRecId.addEnd(custInvoiceTrans.RecId);
                countedSalesOrderInvoiceRecId.add(custInvoiceTrans.RecId);
            }
        }

        return invoiceAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBBInvoicedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all quantities related to bill back merchandise events that have not already been
    /// evaluated for off invoice merchandise events on the same promotion to calculate
    /// the bill back invoiced quantity.
    /// </summary>
    /// <param name="_merchEventItems">
    /// The trade promotion item to use to check for bill back merchandise events.
    /// </param>
    /// <param name="_toUnit">
    /// The unit of measure to convert the bill back to.
    /// </param>
    /// <returns>
    /// The invoiced quantity for bill back events on a promotion.
    /// </returns>
    SalesQty calcBBInvoicedQty(TAMPromotionItem _merchEventItems, UnitOfMeasureSymbol _toUnit)
    {
        SalesQty            invoicedQty;
        PdsRebateAgreement  pdsRebateAgreement;
        PdsRebateTable      pdsRebateTable;
        CustInvoiceTrans    custInvoiceTrans;

        while select RecId from pdsRebateAgreement
                where pdsRebateAgreement.tamMerchandisingEventID == _merchEventItems.MerchandisingEventID
            join RecId from pdsRebateTable
                where pdsRebateTable.PdsRebateAgreementRefRecId == pdsRebateAgreement.RecId
            join Qty, SalesUnit, ItemId, InventTransId, InventDimId from custInvoiceTrans
                where custInvoiceTrans.RecId   == pdsRebateTable.custInvoiceTransRefRecId
        {
            if (!countedSalesOrderInventTransId.in(custInvoiceTrans.InventTransId))
            {
                // Convert to the unit of measure for the trade promotion.
                invoicedQty += EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                    custInvoiceTrans.ItemId,
                                    custInvoiceTrans.InventDimId,
                                    custInvoiceTrans.Qty,
                                    custInvoiceTrans.SalesUnit,
                                    _toUnit);

                // Store the inventtransid for the sales line.
                salesOrderInventTransId.addEnd(custInvoiceTrans.InventTransId);
                countedSalesOrderInventTransId.add(custInvoiceTrans.InventTransId);
            }
        }

        return invoicedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLiftPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the actual lift percent for a promotion.
    /// </summary>
    protected void calcLiftPercent()
    {
        SalesQty actualBaseQtyLocal;
        // If not actual base qty set actualBaseQtyLocal to 1
        // so that a divide by 0 stack trace does not occur.
        if (!actualBaseQty)
        {
            actualBaseQtyLocal = 1;
        }
        else
        {
            actualBaseQtyLocal = actualBaseQty;
        }

        actualLift = ((totalInvoicedQty/actualBaseQtyLocal) - 1) * 100;
        if (actualLift == -100)
        {
            actualLift = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOIInvoiceAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all invoiced amounts for off invoice events on a promotion.
    /// </summary>
    /// <param name="_merchEventItems">
    /// The trade promotion item to use to check for off invoice merchandise events.
    /// </param>
    /// <param name="_toUnit">
    /// The unit of measure to convert the off invoice to.
    /// </param>
    /// <returns>
    /// The invoiced amounts for off invoice events on a promotion.
    /// </returns>
    public AmountCur calcOIInvoiceAmt(TAMPromotionItem _merchEventItems, UnitOfMeasureSymbol _toUnit)
    {
        MCRPriceHistory             priceHistory;
        MCRPriceHistoryRef          priceHistoryRef;
        SalesLine                   salesLine;
        InventDim                   promotionInventDim = InventDim::find(_merchEventItems.InventDimID);
        InventDim                   salesLineInventDim;
        CustInvoiceTrans            custInvoiceTrans;
        AmountCur                   invoiceAmt;

        InventDimParm nonEmptyProdDims;
        nonEmptyProdDims.initFromInventDim(promotionInventDim, InventDim::dimProductDimFieldList());

        while select RecId from priceHistory
            where priceHistory.MerchandisingEventID == _merchEventItems.MerchandisingEventID
            join RecId from priceHistoryRef
                where priceHistoryRef.PriceHistoryRecId == priceHistory.RecId
            join RecId from salesLine
                where salesLine.mcrOrderLine2PriceHistoryRef == priceHistoryRef.mcrOrderLine2PriceHistoryRef
                   && salesLine.ItemId                       == _merchEventItems.ItemID
            #InventDimJoin(salesLine.InventDimId, salesLineInventDim, promotionInventDim, nonEmptyProdDims)
        join LineAmount, RecId from custInvoiceTrans
                group by RecId, LineAmount
                where custInvoiceTrans.SalesId       == salesLine.SalesId
                   && custInvoiceTrans.InventTransId == salesLine.InventTransId
        {
            if (!countedSalesOrderInvoiceRecId.in(custInvoiceTrans.RecId))
            {
                invoiceAmt += custInvoiceTrans.LineAmount;
                //Store the recId for the cust invoice trans.
                salesOrderInvoiceRecId.addEnd(custInvoiceTrans.RecId);
                countedSalesOrderInvoiceRecId.add(custInvoiceTrans.RecId);
            }
        }

        return invoiceAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOIInvoicedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all invoiced quantities for off invoice events on a promotion.
    /// </summary>
    /// <param name="_merchEventItems">
    /// The trade promotion item to use to check for off invoice merchandise events.
    /// </param>
    /// <param name="_toUnit">
    /// The unit of measure to convert the off invoice to.
    /// </param>
    /// <returns>
    /// The invoiced quantities for off invoice events on a promotion.
    /// </returns>
    public SalesQty calcOIInvoicedQty(TAMPromotionItem _merchEventItems, UnitOfMeasureSymbol _toUnit)
    {
        MCRPriceHistory             priceHistory;
        MCRPriceHistoryRef          priceHistoryRef;
        SalesLine                   salesLine;
        InventDim                   promotionInventDim = InventDim::find(_merchEventItems.InventDimID);
        InventDim                   salesLineInventDim;
        SalesQty                    invoiceQty;

        InventDimParm nonEmptyProdDims;
        nonEmptyProdDims.initFromInventDim(promotionInventDim, InventDim::dimProductDimFieldList());

        while select RecId from priceHistory
            where priceHistory.MerchandisingEventID == _merchEventItems.MerchandisingEventID
            join RecId from priceHistoryRef
                where priceHistoryRef.PriceHistoryRecId == priceHistory.RecId
            join salesLine
                where salesLine.mcrOrderLine2PriceHistoryRef == priceHistoryRef.mcrOrderLine2PriceHistoryRef
                   && salesLine.ItemId                       == _merchEventItems.ItemID
            #InventDimExistsJoin(salesLine.InventDimId, salesLineInventDim, promotionInventDim, nonEmptyProdDims)
        {
            if (!countedSalesOrderInventTransId.in(salesLine.InventTransId))
            {
                invoiceQty += EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                    salesLine.ItemId,
                                    salesLine.InventDimId,
                                    salesLine.invoicedInTotal(),
                                    salesLine.SalesUnit,
                                    _toUnit);

                salesOrderInventTransId.addEnd(salesLine.InventTransId);
                countedSalesOrderInventTransId.add(salesLine.InventTransId);
            }
        }

        return invoiceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoicedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the overall invoiced quantity for a promotion.
    /// </summary>
    /// <remarks>
    /// To avoid double counting quantity for item specified on bill back
    /// off invoice, and/or lump sum, a container is kept of items that have
    /// already been evaluated.
    /// </remarks>
    public void calcInvoicedQty()
    {
        TAMMerchandisingEvent       tamMerchandisingEvent;
        TAMTradePromotion           tamTradePromotionLocal;
        TAMPromotionCust            tamPromotionCust;
        TAMPromotionItem            merchEventItems;
        String255                   itemInventDimID;
        container                   listOfItems;
        Integer                     counter = 0;

        // Find the items related to the promotion for which to calculate the invoiced quantity.
        while select  MerchandisingEventID, MerchandisingEventCategory from tamMerchandisingEvent
            where tamMerchandisingEvent.PromotionID == tamTradePromotion.PromotionID
                && tamMerchandisingEvent.MerchandisingEventCategory != MCRMerchandisingEventCategory::LumpSum
            join merchEventItems
            where merchEventItems.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
            exists join tamTradePromotionLocal
            where tamTradePromotionLocal.PromotionID == tamMerchandisingEvent.PromotionID
                && !tamTradePromotionLocal.Template
            exists join tamPromotionCust
            where tamPromotionCust.PromotionID == tamMerchandisingEvent.PromotionID
        {
            // Variable with the combination of item id, invent dim id and unit, which is what makes an item
            // unique on a promotion.
            itemInventDimID = merchEventItems.ItemID + ' '
                            + merchEventItems.InventDimID + ' '
                            + merchEventItems.UnitID + ' '
                            + tamMerchandisingEvent.MerchandisingEventID;
            // If the item has not already been evaluated.
            if (!conFind(listOfItems, itemInventDimID))
            {
                counter ++;
                // Container to see what items have already been evaluated so that we do not double count an item.
                listOfItems = conPoke(listOfItems, counter, itemInventDimID);

                // Off invoice quantity.
                if (tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::OffInvoice)
                {
                    totalInvoicedQty += this.calcOIInvoicedQty(merchEventItems, tamTradePromotion.UnitID);
                    totalInvoicedAmt += this.calcOIInvoiceAmt(merchEventItems, tamTradePromotion.UnitID);
                }
                // Bill back quantity.
                else if (tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack)
                {
                    totalInvoicedQty += this.calcBBInvoicedQty(merchEventItems, tamTradePromotion.UnitID);
                    totalInvoicedAmt += this.calcBBInvoiceAmt(merchEventItems, tamTradePromotion.UnitID);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualBaseQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the actual base qty.
    /// </summary>
    /// <returns>
    /// The actual base quantity.
    /// </returns>
    public SalesQty getActualBaseQty()
    {
        return actualBaseQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the actual invoiced amount.
    /// </summary>
    /// <returns>
    /// The actual total invoiced amount.
    /// </returns>
    public AmountCur getInvoiceAmt()
    {
        return totalInvoicedAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLiftPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the actual lift percent.
    /// </summary>
    /// <returns>
    /// The actual lift percent.
    /// </returns>
    public Percent getLiftPercent()
    {
        return actualLift;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getsalesorderInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of <c>InventTransId</c> values for the sale order used to
    /// find the correct invoice records in the invoice tab.
    /// </summary>
    /// <returns>
    /// The list of <c>InventTransId</c> values for the sale order.
    /// </returns>
    public List getsalesorderInventTransId()
    {
        return salesOrderInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderInvoiceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of <c>RecId</c> values for the sales order invoice used to
    /// find the correct invoice records in the invoice tab.
    /// </summary>
    /// <returns>
    /// The list of <c>RecId</c> values for the sale order invoice.
    /// </returns>
    public List getSalesOrderInvoiceRecId()
    {
        return salesOrderInvoiceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the actual invoiced qty.
    /// </summary>
    /// <returns>
    /// The actual total invoiced quantity.
    /// </returns>
    public SalesQty getInvoicedQty()
    {
        return totalInvoicedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes in the trade promotion that is being
    /// evaluated for actual invoice quantity.
    /// </summary>
    /// <param name="_tamTradePromotion">
    /// The trade promotion to be evaluated for actual invoice quantity.
    /// </param>
    public void new(TAMTradePromotion _tamTradePromotion)
    {
        tamTradePromotion = _tamTradePromotion;
        salesOrderInventTransId = new List(Types::String);
        salesOrderInvoiceRecId = new List(Types::Int64);
        countedSalesOrderInventTransId = new Set(Types::String);
        countedSalesOrderInvoiceRecId = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceTmpRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the temporary sales order invoice records found from the
    /// list of <c>RecId</c> values.
    /// </summary>
    /// <param name="_salesOrderCustInvoiceRecIdList">
    /// The list of record ID's used to populate the temporary table.
    /// </param>
    /// <returns>
    /// The temporary sales order invoice records found from the list of record ID's.
    /// </returns>
    public static container getCustInvoiceTmpRecords(List _salesOrderCustInvoiceRecIdList)
    {
        ListEnumerator          enumerator;
        CustInvoiceTrans        custInvoiceTrans;
        RecId                   custInvoiceRecId;
        List                    listCustInvoiceTrans = new List(Types::Record);

        enumerator = _salesOrderCustInvoiceRecIdList.getEnumerator();

        while (enumerator.moveNext())
        {
            custInvoiceRecId = enumerator.current();

            while select custInvoiceTrans
                where custInvoiceTrans.RecId == custInvoiceRecId
            {
                listCustInvoiceTrans.addEnd(custInvoiceTrans);
            }
        }

        return listCustInvoiceTrans.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransTmpRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the temporary invent trans records found from the
    /// list of inventory transaction ID's.
    /// </summary>
    /// <param name="_salesOrderInventTransIdList">
    /// The list of inventory transaction ID's used to populate the temporary table.
    /// </param>
    /// <returns>
    /// The temporary invent trans records found from the list of inventory transaction ID's.
    /// </returns>
    public static container getInventTransTmpRecords(List _salesOrderInventTransIdList)
    {
        ListEnumerator          enumerator;
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventTransId           inventTransId;
        List                    listInventTrans = new List(Types::Record);

        enumerator = _salesOrderInventTransIdList.getEnumerator();

        while (enumerator.moveNext())
        {
            inventTransId = enumerator.current();

            while select inventTrans
                where (inventTrans.StatusIssue == StatusIssue::Sold
                    || inventTrans.StatusIssue == StatusIssue::Deducted)
                    && inventTrans.StatusReceipt == StatusReceipt::None
                exists join inventTransOrigin
                where inventTransOrigin.InventTransId == inventTransId
                    && inventTrans.InventTransOrigin == inventTransOrigin.RecId

            {
                listInventTrans.addEnd(inventTrans);
            }
        }

        return listInventTrans.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>