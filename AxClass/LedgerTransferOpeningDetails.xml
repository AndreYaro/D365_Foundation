<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransferOpeningDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class LedgerTransferOpeningDetails
{
    private RefRecId startRecId;
    private RefRecId endRecId;
    private LedgerTransferOpeningType transferOpeningType;
    private UTCTimestamp processTimeStamp;
    private int processSession;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildEntryDetails</Name>
				<Source><![CDATA[
    internal static void buildEntryDetails(
        RefRecId _startRecId,
        RefRecId _endRecId,
        LedgerTransferOpeningType _transferOpeningType,
        int _processSession,
        UTCTimeStamp _processTimeStamp)
    {
        LedgerTransferOpeningDetails openingDetails = new LedgerTransferOpeningDetails();
        openingDetails.parmStartRecId(_startRecId);
        openingDetails.parmEndRecId(_endRecId);
        openingDetails.parmLedgerTransferOpeningType(_transferOpeningType);
        openingDetails.parmProcessSession(_processSession);
        openingDetails.parmProcessTimeStamp(_processTimeStamp);

        openingDetails.insertEntryDetails();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntryDetails</Name>
				<Source><![CDATA[
    private void insertEntryDetails()
    {
        Query query = this.buildEntryDetailsQuery();
        this.updateToExcludeSettledTransactions(query);

        Map fieldMap = new Map(Types::String, Types::Container);

        this.addSelectionFieldsForQuery(query);
        this.insertFieldMapValues(query, fieldMap);

        GeneralJournalAccountEntryDetailsTmp entryDetails;
        Query::insert_recordset(entryDetails, fieldMap, query);

        ttsbegin;
        this.deletePreviousOpeningTransactions();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEntryDetailsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the initial query for all transactions that details are being brought forward. This query starts with <t>GeneralJournalAccountEntry</t>
    /// then joins the <t>GeneralJournalAccountEntryDimension</t> and the <t>LedgerTransSettlementAccount</t>.
    /// </summary>
    /// <returns>The query containing transactions with details kept.</returns>
    private Query buildEntryDetailsQuery()
    {
        Query query = new Query();

        QueryBuildDataSource gjae = query.addDataSource(tableNum(GeneralJournalAccountEntry));
        gjae.fields().dynamic(NoYes::No);
        gjae.fields().clearFieldList();

        QueryBuildDataSource gjaeDimension = gjae.addDataSource(tableNum(GeneralJournalAccountEntryDimension));
        gjaeDimension.addLink(fieldNum(GeneralJournalAccountEntry, RecId), fieldNum(GeneralJournalAccountEntryDimension, GeneralJournalAccountEntry));

        gjaeDimension.addRange(fieldNum(GeneralJournalAccountEntryDimension, GeneralJournalAccountEntryHash))
            .value(strFmt('((%1.%2 >= %3) && (%1.%2 <= %4))',
                gjaeDimension.name(),
                fieldStr(GeneralJournalAccountEntryDimension, GeneralJournalAccountEntryHash),
                this.parmStartRecId(),
                this.parmEndRecId()));

        gjaeDimension.addRange(fieldNum(GeneralJournalAccountEntryDimension, Type)).value(SysQuery::value(this.parmLedgerTransferOpeningType()));
        gjaeDimension.addRange(fieldNum(GeneralJournalAccountEntryDimension, CurrentSessionId)).value(SysQuery::value(this.parmProcessSession()));
        gjaeDimension.addRange(fieldNum(GeneralJournalAccountEntryDimension, UTCTimestamp)).value(SysQuery::value(this.parmProcessTimeStamp()));
       
        gjaeDimension.fetchMode(QueryFetchMode::One2One);
        gjaeDimension.joinMode(JoinMode::InnerJoin);
        gjaeDimension.fields().dynamic(NoYes::No);
        gjaeDimension.fields().clearFieldList();

        QueryBuildDataSource ledgerTransSettlementAccount = gjae.addDataSource(tableNum(LedgerTransSettlementAccount));
        ledgerTransSettlementAccount.addLink(fieldNum(GeneralJournalAccountEntry, MainAccount), fieldNum(LedgerTransSettlementAccount, MainAccount));
        ledgerTransSettlementAccount.addRange(fieldNum(LedgerTransSettlementAccount, KeepDetails)).value(SysQuery::value(NoYes::Yes));
        ledgerTransSettlementAccount.fetchMode(QueryFetchMode::One2One);
        ledgerTransSettlementAccount.joinMode(JoinMode::InnerJoin);
        ledgerTransSettlementAccount.fields().dynamic(NoYes::No);
        ledgerTransSettlementAccount.fields().clearFieldList();

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSelectionFieldsForQuery</Name>
				<Source><![CDATA[
    private void addSelectionFieldsForQuery(Query _q)
    {
        QueryBuildDataSource gjae = _q.dataSourceTable(tableNum(GeneralJournalAccountEntry));

        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCorrection));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCredit));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, LedgerAccount));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, MainAccount));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, PostingType));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, RecId));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, OriginalAccountEntry));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, ReportingCurrencyAmount));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, Text));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));
        gjae.addSelectionField(fieldNum(GeneralJournalAccountEntry, FinTag));

        QueryBuildDataSource gjaeDimension = _q.dataSourceTable(tableNum(GeneralJournalAccountEntryDimension));

        gjaeDimension.addSelectionField(fieldNum(GeneralJournalAccountEntryDimension, PostingLayer));
        gjaeDimension.addSelectionField(fieldNum(GeneralJournalAccountEntryDimension, CurrentSessionId));
        gjaeDimension.addSelectionField(fieldNum(GeneralJournalAccountEntryDimension, UTCTimestamp));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFieldMapValues</Name>
				<Source><![CDATA[
    private void insertFieldMapValues(Query _q, Map _fieldMap)
    {
        int gjaeUniqueId = _q.dataSourceTable(tableNum(GeneralJournalAccountEntry)).uniqueId();

        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, AccountingCurrencyAmount), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, AccountingCurrencyAmount)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, GeneralJournalEntry), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, GeneralJournalEntry)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, IsCorrection), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, IsCorrection)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, IsCredit), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, IsCredit)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, LedgerAccount), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, LedgerAccount)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, LedgerDimension), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, LedgerDimension)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, MainAccount), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, MainAccount)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, PostingType), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, PostingType)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, GeneralJournalAccountEntryRecId), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, RecId)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, RelatedAccountEntryDetails), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, OriginalAccountEntry)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, ReportingCurrencyAmount), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, ReportingCurrencyAmount)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, Text), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, Text)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, TransactionCurrencyAmount), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, TransactionCurrencyAmount)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, TransactionCurrencyCode), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, TransactionCurrencyCode)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, FinTag), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, FinTag)]);

        int gjaeDimensionUniqueId = _q.dataSourceTable(tableNum(GeneralJournalAccountEntryDimension)).uniqueId();

        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, PostingLayer), [gjaeDimensionUniqueId, fieldStr(GeneralJournalAccountEntryDimension, PostingLayer)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, ProcessSessionId), [gjaeDimensionUniqueId, fieldStr(GeneralJournalAccountEntryDimension, CurrentSessionId)]);
        _fieldMap.insert(fieldStr(GeneralJournalAccountEntryDetailsTmp, ProcessUTCTimestamp), [gjaeDimensionUniqueId, fieldStr(GeneralJournalAccountEntryDimension, UTCTimestamp)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToExcludeSettledTransactions</Name>
				<Source><![CDATA[
    private void updateToExcludeSettledTransactions(Query _query)
    {
        QueryBuildDataSource lts = _query.dataSourceTable(tableNum(GeneralJournalAccountEntry)).addDataSource(tableNum(LedgerTransSettlement));
        lts.addLink(fieldNum(GeneralJournalAccountEntry, RecId), fieldNum(LedgerTransSettlement, TransRecId));
        lts.fetchMode(QueryFetchMode::One2One);
        lts.joinMode(JoinMode::NoExistsJoin);
        lts.fields().dynamic(NoYes::No);
        lts.fields().clearFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePreviousOpeningTransactions</Name>
				<Source><![CDATA[
    private void deletePreviousOpeningTransactions()
    {
        this.deletePreviousDetailsTransactions();
        this.deletePreviousSummarizedTransactions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePreviousDetailsTransactions</Name>
				<Source><![CDATA[
    private void deletePreviousDetailsTransactions()
    {
        GeneralJournalAccountEntryDetailsTmp entryDetails;
        GeneralJournalAccountEntry accountEntry;

        delete_from entryDetails
            where entryDetails.ProcessSessionId == this.parmProcessSession()
                && entryDetails.ProcessUTCTimestamp == this.parmProcessTimeStamp()
            exists join accountEntry
                where accountEntry.OriginalAccountEntry == entryDetails.GeneralJournalAccountEntryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePreviousSummarizedTransactions</Name>
				<Source><![CDATA[
    private void deletePreviousSummarizedTransactions()
    {
        GeneralJournalAccountEntryDetailsTmp entryDetails;
        GeneralJournalAccountEntrySummarized accountEntrySummarized;

        delete_from entryDetails
            where entryDetails.ProcessSessionId == this.parmProcessSession()
                && entryDetails.ProcessUTCTimestamp == this.parmProcessTimeStamp()
            exists join accountEntrySummarized
                where accountEntrySummarized.GeneralJournalAccountEntryRecId == entryDetails.GeneralJournalAccountEntryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDetailsTransactions</Name>
				<Source><![CDATA[
    internal static void insertDetailsTransactions(
        Voucher _voucher,
        RefRecId _openingFiscalCalendarPeriodRecId,
        int _processSession,
        UTCTimeStamp _processTimeStamp)
    {
        GeneralJournalAccountEntryDetailsTmp entryDetails;

        select firstonly RecId from entryDetails
            where entryDetails.ProcessSessionId == _processSession
                && entryDetails.ProcessUTCTimestamp == _processTimeStamp;
        
        if (!entryDetails.RecId)
        {
            return;
        }

        GeneralJournalEntry journalEntry;

        while select RecId, PostingLayer from journalEntry
            where journalEntry.SubledgerVoucher == _voucher
                && journalEntry.SubledgerVoucherDataAreaId == curExt()
                && journalEntry.FiscalCalendarPeriod == _openingFiscalCalendarPeriodRecId
        {
            LedgerTransferOpeningDetailAccountEntry::insertDetailsTransactions(
                journalEntry.RecId,
                journalEntry.PostingLayer,
                 _processSession,
                _processTimeStamp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartRecId</Name>
				<Source><![CDATA[
    private RefRecId parmStartRecId(RefRecId _startRecId = startRecId)
    {
        startRecId = _startRecId;
        return startRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndRecId</Name>
				<Source><![CDATA[
    private RefRecId parmEndRecId(RefRecId _endRecId = endRecId)
    {
        endRecId = _endRecId;
        return endRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerTransferOpeningType</Name>
				<Source><![CDATA[
    private LedgerTransferOpeningType parmLedgerTransferOpeningType(LedgerTransferOpeningType _transferOpeningType = transferOpeningType)
    {
        transferOpeningType = _transferOpeningType;
        return transferOpeningType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessSession</Name>
				<Source><![CDATA[
    private int parmProcessSession(int _processSession = processSession)
    {
        processSession = _processSession;
        return processSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessTimeStamp</Name>
				<Source><![CDATA[
    private UTCTimestamp parmProcessTimeStamp(UTCTimestamp _processTimeStamp = processTimeStamp)
    {
        processTimeStamp = _processTimeStamp;
        return processTimeStamp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>