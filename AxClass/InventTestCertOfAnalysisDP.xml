<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTestCertOfAnalysisDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTestCertOfAnalysisDP</c> class provides data for the <c>InventTestCertOfAnalysis</c>
/// report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(InventTestCertOfAnalysis))
]
public class InventTestCertOfAnalysisDP extends SRSReportDataProviderBase
{
    InventTestCertOfAnalysisTmp             inventTestCertOfAnalysisTmp;
    InventTestCertOfAnalysisTable           inventTestCertOfAnalysisTable;
    InventTestCertOfAnalysisLine            inventTestCertOfAnalysisLine;
    InventTestCertOfAnalysisLineResults     inventTestCertOfAnalysisLineResults;
    DocuRef                                 docuRef;

    //Macros
    #define.EmptyString('')
    #define.Zero(0.0)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventTestCertOfAnalysisTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the temporary <c>InventTestCertOfAnalysisTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('InventTestCertOfAnalysisTmp')
    ]
    public InventTestCertOfAnalysisTmp getInventTestCertOfAnalysisTmp()
    {
        select * from inventTestCertOfAnalysisTmp;
        return inventTestCertOfAnalysisTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDocuRefIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a specified <c>DocuRef</c> table buffer into a temporary table.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table.
    /// </param>
    protected void insertDocuRefIntoTempTable(int _tableId)
    {
        //Page Header data
        inventTestCertOfAnalysisTmp.InventCertificateOfAnalysisId       =   inventTestCertOfAnalysisTable.InventCertificateOfAnalysisId;
        inventTestCertOfAnalysisTmp.QualityOrderId                      =   inventTestCertOfAnalysisTable.QualityOrderId;
        inventTestCertOfAnalysisTmp.ItemId                              =   inventTestCertOfAnalysisTable.ItemId;

        inventTestCertOfAnalysisTmp.TypeId                              =   docuRef.TypeId;
        inventTestCertOfAnalysisTmp.Name                                =   docuRef.Name;
        inventTestCertOfAnalysisTmp.Notes                               =   docuRef.Notes;

        switch (_tableId)
        {
            case tableNum(InventTestCertOfAnalysisTable):
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysis       =   NoYes::Yes;
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisLine   =   NoYes::No;
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisResult =   NoYes::No;
                break;
            case tableNum(InventTestCertOfAnalysisLine):
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysis       =   NoYes::No;
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisLine   =   NoYes::Yes;
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisResult =   NoYes::No;
                break;
            case tableNum(InventTestCertOfAnalysisLineResults):
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysis       =   NoYes::No;
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisLine   =   NoYes::No;
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisResult =   NoYes::Yes;
                break;
        }

        inventTestCertOfAnalysisTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts specified records into a temporary table.
    /// </summary>
    /// <param name="_tableId">
    /// The serial ID of the table.
    /// </param>
    private void insertIntoTempTable(int _tableId)
    {
        inventTestCertOfAnalysisTmp.clear();

        this.initializeInventTestCertOfAnalysisTmp(_tableId);

        inventTestCertOfAnalysisTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventTestCertOfAnalysisTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate specified records into a temporary table.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID.
    /// </param>
    protected void initializeInventTestCertOfAnalysisTmp(int _tableId)
    {
        //Page Header Id
        inventTestCertOfAnalysisTmp.InventCertificateOfAnalysisId           =   inventTestCertOfAnalysisTable.InventCertificateOfAnalysisId;
        inventTestCertOfAnalysisTmp.QualityOrderId                          =   inventTestCertOfAnalysisTable.QualityOrderId;

        //Page Header Account
        if (inventTestCertOfAnalysisTable.AccountRelation)
        {
            inventTestCertOfAnalysisTmp.AccountRelation                     =   inventTestCertOfAnalysisTable.AccountRelation;
            inventTestCertOfAnalysisTmp.CustVendName                        =   inventTestCertOfAnalysisTable.custVendName();
            inventTestCertOfAnalysisTmp.ContactPersonName                   =   inventTestCertOfAnalysisTable.editContactPersonName(false,#EmptyString);
            inventTestCertOfAnalysisTmp.CustVendPhone                       =   inventTestCertOfAnalysisTable.custVendPhone();
            inventTestCertOfAnalysisTmp.CustVendTeleFax                     =   inventTestCertOfAnalysisTable.custVendTeleFax();
            inventTestCertOfAnalysisTmp.CustVendEmail                       =   inventTestCertOfAnalysisTable.custVendEmail();
        }

        //Page Header Item
        inventTestCertOfAnalysisTmp.ItemId                                  =   inventTestCertOfAnalysisTable.ItemId;
        inventTestCertOfAnalysisTmp.ItemName                                =   inventTestCertOfAnalysisTable.itemName();

        //References
        inventTestCertOfAnalysisTmp.ReferenceType                           =   inventTestCertOfAnalysisTable.ReferenceType;
        inventTestCertOfAnalysisTmp.InventRefId                             =   inventTestCertOfAnalysisTable.InventRefId;
        inventTestCertOfAnalysisTmp.InventRefTransId                        =   inventTestCertOfAnalysisTable.InventRefTransId;
        inventTestCertOfAnalysisTmp.RouteId                                 =   inventTestCertOfAnalysisTable.RouteId;

        if (_tableId == tableNum(InventTestCertOfAnalysisLine) || _tableId == tableNum(InventTestCertOfAnalysisLineResults))
        {
            //Line Options
            inventTestCertOfAnalysisTmp.TestId                              =   inventTestCertOfAnalysisLine.TestId;
            inventTestCertOfAnalysisTmp.TestUnitID                          =   inventTestCertOfAnalysisLine.TestUnitId;
            inventTestCertOfAnalysisTmp.TestResult                          =   inventTestCertOfAnalysisLine.TestResult;
            inventTestCertOfAnalysisTmp.VariableOutcomeIdStandard           =   inventTestCertOfAnalysisLine.VariableOutcomeIdStandard;

            //Line Non_Options (Extra)
            inventTestCertOfAnalysisTmp.StandardValue                       =   inventTestCertOfAnalysisLine.StandardValue;
            inventTestCertOfAnalysisTmp.LowerLimit                          =   inventTestCertOfAnalysisLine.LowerLimit;
            inventTestCertOfAnalysisTmp.UpperLimit                          =   inventTestCertOfAnalysisLine.UpperLimit;
            inventTestCertOfAnalysisTmp.LowerTolerance                      =   inventTestCertOfAnalysisLine.LowerTolerance;
            inventTestCertOfAnalysisTmp.UpperTolerance                      =   inventTestCertOfAnalysisLine.UpperTolerance;

            //Line (Only Test Type)
            inventTestCertOfAnalysisTmp.TestType                            =   InventTestTable::find(inventTestCertOfAnalysisLine.TestId).TestType;

            if (_tableId == tableNum(InventTestCertOfAnalysisLineResults))
            {
                //Results Options
                inventTestCertOfAnalysisTmp.TestResultQuantity              =   inventTestCertOfAnalysisLineResults.TestResultQuantity;
                inventTestCertOfAnalysisTmp.TestResultValueOutcome          =   inventTestCertOfAnalysisLineResults.TestResultValueOutcome;
                inventTestCertOfAnalysisTmp.TestResultResult                =   inventTestCertOfAnalysisLineResults.TestResult;

                //Results Non Options
                inventTestCertOfAnalysisTmp.TestResultValueReal             =   inventTestCertOfAnalysisLineResults.TestResultValueReal;
                inventTestCertOfAnalysisTmp.CertOfAnalysisResult            =   NoYes::Yes;
            }
            else
            {
                //Results Options
                inventTestCertOfAnalysisTmp.TestResultQuantity              =   #Zero;
                inventTestCertOfAnalysisTmp.TestResultValueOutcome          =   #EmptyString;
                inventTestCertOfAnalysisTmp.TestResultResult                =   InventTestOutcomeStatus::Fail;

                //Results Non Options
                inventTestCertOfAnalysisTmp.TestResultValueReal             =   #Zero;
                inventTestCertOfAnalysisTmp.CertOfAnalysisResult            =   NoYes::No;
            }
        }
        else
        {
            //Line Options
            inventTestCertOfAnalysisTmp.TestId                              =   #EmptyString;
            inventTestCertOfAnalysisTmp.TestUnitID                          =   #EmptyString;
            inventTestCertOfAnalysisTmp.TestResult                          =   InventTestOutcomeStatus::Fail;
            inventTestCertOfAnalysisTmp.VariableOutcomeIdStandard           =   #EmptyString;

            //Line Non_Options (Extra)
            inventTestCertOfAnalysisTmp.StandardValue                       =   #Zero;
            inventTestCertOfAnalysisTmp.LowerLimit                          =   #Zero;
            inventTestCertOfAnalysisTmp.UpperLimit                          =   #Zero;
            inventTestCertOfAnalysisTmp.LowerTolerance                      =   #Zero;
            inventTestCertOfAnalysisTmp.UpperTolerance                      =   #Zero;

            //Line (Only Test Type)
            inventTestCertOfAnalysisTmp.TestType                            =   InventTestType::Fraction;

            //Results Options
            inventTestCertOfAnalysisTmp.TestResultQuantity                  =   #Zero;
            inventTestCertOfAnalysisTmp.TestResultValueOutcome              =   #EmptyString;
            inventTestCertOfAnalysisTmp.TestResult                          =   InventTestOutcomeStatus::Fail;

            //Results Non Options
            inventTestCertOfAnalysisTmp.TestResultValueReal                 =   #Zero;
            inventTestCertOfAnalysisTmp.CertOfAnalysisResult                =   NoYes::No;
        }

        // This is not a docuRef record.
        inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysis       =   NoYes::No;
        inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisLine   =   NoYes::No;
        inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisResult =   NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWithDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a <c>DocuRef</c> record exists for each record that was received.
    /// </summary>
    /// <param name="_common">
    /// A common table buffer record.
    /// </param>
    /// <remarks>
    /// If a <c>DocuRef</c> record exists, this method sends for the insertion together with the
    /// <c>DocuRef</c> record. Otherwise, this method will send for the insertion of this record only.
    /// </remarks>
    private void insertWithDocuRef(Common _common)
    {
        InventTestReportSetup   inventTestReportSetup;
        int                     tableId;

        switch (_common.TableId)
        {
            case tableNum(InventTestCertOfAnalysisTable):
                tableId   =   tableNum(InventTestCertOfAnalysisTable);
                break;

            case tableNum(InventTestCertOfAnalysisLine):
                tableId   =   tableNum(InventTestCertOfAnalysisLine);
                break;

            case tableNum(InventTestCertOfAnalysisLineResults):
                tableId   =   tableNum(InventTestCertOfAnalysisLineResults);
                break;
        }

        this.insertIntoTempTable(tableId);

        while select docuRef
            order by ModifiedDateTime
            where docuRef.RefCompanyId  == _common.DataAreaId
               && docuRef.RefTableId    == _common.TableId
               && docuRef.RefRecId      == _common.RecId
            exists join inventTestReportSetup
                where inventTestReportSetup.InventTestReport    == InventTestReport::CertificateOfAnalysis
                   && inventTestReportSetup.DocuRestriction     == docuRef.Restriction
                   && inventTestReportSetup.DocuTypeIdNote      == docuRef.TypeId
        {
            this.insertDocuRefIntoTempTable(tableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTestCertOfAnalysis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventTestCertOfAnalysisLine</c> and <c>InventTestCertOfAnalysisLineResults</c>
    /// records.
    /// </summary>
    /// <remarks>
    /// This method retrieves the <c>Docuref</c> records for each record to return.
    /// </remarks>
    private void inventTestCertOfAnalysis()
    {
        this.insertWithDocuRef(inventTestCertOfAnalysisTable);

        while select  inventTestCertOfAnalysisLine
            order by TestSequence, TestId
            where   inventTestCertOfAnalysisLine.InventCertificateOfAnalysisId == inventTestCertOfAnalysisTable.InventCertificateOfAnalysisId
            {
                this.insertWithDocuRef(inventTestCertOfAnalysisLine);

                while select inventTestCertOfAnalysisLineResults
                    where   inventTestCertOfAnalysisLineResults.InventCertificateOfAnalysisId       == inventTestCertOfAnalysisLine.InventCertificateOfAnalysisId
                    && inventTestCertOfAnalysisLineResults.TestSequence                     == inventTestCertOfAnalysisLine.TestSequence
                    && inventTestCertOfAnalysisLineResults.TestId                           == inventTestCertOfAnalysisLine.TestId
                    {
                        this.insertWithDocuRef(inventTestCertOfAnalysisLineResults);
                    }
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the class.
    /// </summary>
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic by calling the helper methods and inserting the data into the
    /// temporary table.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by
    /// Reporting Service (SSRS) at run time. The method should compute data and populate the data tables
    /// that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            inventTestCertOfAnalysisTable      =   queryRun.get(tableNum(InventTestCertOfAnalysisTable));
            this.inventTestCertOfAnalysis();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>