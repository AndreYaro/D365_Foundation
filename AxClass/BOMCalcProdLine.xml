<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcProdLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomCalcProdLine extends BOMCalcLine
{
    ProdBOM                                     prodBOM;

    Qty                                         seriesSize;
    Qty                                         consumptionInventQty;

    PmfProdCalcTransMap                         prodCalcTrans;

    private Set dupProdId;
    private Set refProdId;
    private boolean isBomCalcProdSameRefProdIdAvoidUpdateConflictFlightEnabled = BomCalcProdSameRefProdIdAvoidUpdateConflictFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDupProdId</Name>
				<Source><![CDATA[
    public Set parmDupProdId(Set _dupProdId = dupProdId)
    {
        dupProdId = _dupProdId;
        return dupProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefProdId</Name>
				<Source><![CDATA[
    public Set parmRefProdId(Set _refProdId = refProdId)
    {
        refProdId = _refProdId;
        return refProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAmountCostAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the amounts in the <c>ProdCalcTrans</c> record with the cost allocation percentage.
    /// </summary>
    /// <param name="_parentBOMCalcProd">The parent BOM calc class.</param>
    /// <param name="_prodCalcTrans">The record to adjust the amounts for.</param>
    protected void adjustAmountCostAllocation(BOMCalcProd _parentBOMCalcProd, PmfProdCalcTransMap _prodCalcTrans)
    {
        if (_parentBOMCalcProd.parmProdTable().ProdType == ProdType::Process)
        {
            _prodCalcTrans.CostAmount    = _prodCalcTrans.CostAmount * (_parentBOMCalcProd.parmPmfCostAllocationPct() / 100);
            _prodCalcTrans.CostMarkup    = _prodCalcTrans.CostMarkup * (_parentBOMCalcProd.parmPmfCostAllocationPct() / 100);

            _prodCalcTrans.SalesAmount   = _prodCalcTrans.SalesAmount * (_parentBOMCalcProd.parmPmfCostAllocationPct() / 100);
            _prodCalcTrans.SalesMarkup   = _prodCalcTrans.SalesMarkup * (_parentBOMCalcProd.parmPmfCostAllocationPct() / 100);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bufferCalcTrans</Name>
				<Source><![CDATA[
    Common bufferCalcTrans()
    {
        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    void calc()
    {
        BOMCalcProd localParentBOMCalcProd;
        setPrefix("@SYS28550");
        setPrefix(#PreFixField(prodBOM,ItemId));

        if (!this.validate())
        {
            throw Exception::Error;
        }

        this.init();

        this.calcConsumption();

        if (this.hasProduction())
        {
            localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;
            if (localParentBOMCalcProd.parmCalcReferences())
            {
                this.calcBOM();
            }
            return;
        }

        if (!this.calcCost(consumptionInventQty))
        {
            return;
        }

        this.updateCalcAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBOM</Name>
				<Source><![CDATA[
    protected void calcBOM()
    {
        BOMCalcProd childBOMCalcProd;
        BOMCalcProd localChildBOMCalcProd;

        if (!this.parmChildBOMCalc())
        {
            if (isBomCalcProdSameRefProdIdAvoidUpdateConflictFlightEnabled)
            {
                childBOMCalcProd = BOMCalcProd::newProdBOMWithRefProd(prodBOM,
                                                                   this.parmParentBOMCalc(),
                                                                   this.parmRefProdId(),
                                                                   this.parmDupProdId());
            }
            else
            {
                childBOMCalcProd = BOMCalcProd::newProdBOM(prodBOM,
                                                           this.parmParentBOMCalc());
            }

            this.parmChildBOMCalc(childBOMCalcProd);
        }

        localChildBOMCalcProd = this.parmChildBOMCalc() as BOMCalcProd;
        localChildBOMCalcProd.calc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBOMTradeAgreements</Name>
				<Source><![CDATA[
    protected void calcBOMTradeAgreements()
    {
        BOMCalcProd localChildBOMCalcProd;

        if (!this.parmChildBOMCalc())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        localChildBOMCalcProd = this.parmChildBOMCalc() as BOMCalcProd;
        localChildBOMCalcProd.calcTradeAgreements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcConsumption</Name>
				<Source><![CDATA[
    protected void calcConsumption()
    {
        BOMCalcProd localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;

        if (localParentBOMCalcProd.parmProdTable().ProdType ==ProdType::Process)
        {
            //main item
            consumptionInventQty = prodBOM.QtyInventCalc
                * prodBOM.prodTable().pmfRemainCostAlloc() / 100;

            consumptionInventQty = this.calculateReducedRecycledBpConsumption(consumptionInventQty);
        }
        else
        {
            // Consumption is calculated in inventory units during the production estimation
            consumptionInventQty = prodBOM.QtyInventCalc;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTradeAgreements</Name>
				<Source><![CDATA[
    void calcTradeAgreements()
    {
        BOMCalcProd localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;

        if (this.hasProduction() && !BOMCalcGroup::stopExplodePrice(bomCalcGroup, inventTable::find(itemId), inventDimId, siteId))
        {
            if (localParentBOMCalcProd.parmCalcReferences())
            {
                this.calcBOMTradeAgreements();
            }
            return;
        }

        if (!this.parmParentBOMCalc().hasTradeAgreements(itemId, inventDimId))
        {
            return;
        }

        if (!this.calcCost(consumptionInventQty, true))
        {
            return;
        }

        this.updateCalcAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasProduction</Name>
				<Source><![CDATA[
    public boolean hasProduction()
    {
        return    prodBOM.InventRefType == InventRefType::Production
               && prodBOM.InventRefId
               && (prodBOM.type().isPeggedSupply() || (prodBOM.ProdLineType == BOMType::Item && CostTakeMarkedItemAsPeggedSupplyFlight::instance().isEnabled()))
               && InventTable::find(itemId).inventItemType().canBeProduced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        this.initParameters();
        this.initProdCalcTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected void initParameters()
    {
        super();

        seriesSize      = this.parmParentBOMCalc().parmSeriesSize() ? this.parmParentBOMCalc().parmSeriesSize() : 1;

        bomCalcCost     = BOMCalcCost::construct();

        vendAccount     = prodBOM.vendId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdCalcTrans</Name>
				<Source><![CDATA[
    protected void initProdCalcTrans()
    {
        prodCalcTrans.clear();

        prodCalcTrans = ProdCalcTrans::findIdRefCalcType(prodBOM.TableId, prodBOM.RecId, calculationType, true);

        if (prodCalcTrans.RecId)
        {
            this.resetCalcValues();

            itemId          = prodCalcTrans.Resource    ? prodCalcTrans.Resource    : itemId;
            inventUnitId    = prodCalcTrans.UnitId      ? prodCalcTrans.UnitId      : inventUnitId;
            inventDimId     = prodCalcTrans.InventDimId ? prodCalcTrans.InventDimId : inventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdCalcTrans</Name>
				<Source><![CDATA[
    void insertProdCalcTrans()
    {
        BOMCalcProd localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;
        if (!prodCalcTrans.RecId)
        {
            prodCalcTrans.initFromProdTable(localParentBOMCalcProd.parmProdTable(), calculationType);
            prodCalcTrans.initFromProdBOM(prodBOM);

            prodCalcTrans.Production        = NoYes::No;
            prodCalcTrans.bom               = NoYes::No;

            prodCalcTrans.Resource      = itemId;
            prodCalcTrans.UnitId        = inventUnitId;
            prodCalcTrans.OprId         = '';
            prodCalcTrans.BOMCalcTransMap::setInventDimStr(inventDimId);
            prodCalcTrans.InventDimId   = inventDimId;
        }
        else if (dupProdId != null && isBomCalcProdSameRefProdIdAvoidUpdateConflictFlightEnabled)
        {
            if (dupProdId.in(prodCalcTrans.TransRefId))
            {
                ProdCalcTrans prodCalcTransLocal;
                select firstonly RecVersion from prodCalcTransLocal
                    where prodCalcTransLocal.RecId == prodCalcTrans.RecId;

                if (prodCalcTrans.RecVersion != prodCalcTransLocal.RecVersion)
                {
                    prodCalcTrans.reread();
                }
            }
        }

        prodCalcTrans.Qty               = seriesSize;
        prodCalcTrans.TransDate         = this.parmParentBOMCalc().parmCalcDate();
        prodCalcTrans.OprNum            = prodBOM.OprNum;

        if (prodCalcTrans.BOM && prodCalcTrans.LineNum != lineNum)
        {
            prodCalcTrans.updateBreakdownTransLineNum(lineNum);
        }
        prodCalcTrans.LineNum           = lineNum;

        prodCalcTrans.CalcGroupId       = bomCalcGroup.CalcGroupId;
        prodCalcTrans.CostGroupId       = costGroup;

        prodCalcTrans.ConsumpType       = prodBOM.bomConsump;

        this.insertProdCalcTransBreakdown();

        prodCalcTrans.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdCalcTransBreakdown</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts extra records representing the cost breakdown on a production calculation line.
    /// </summary>
    protected void insertProdCalcTransBreakdown()
    {
        ProdCalcTrans   prodCalcTransCostBreakdown;
        LineNum         lineNumBreakdown;
        MapEnumerator   stdCostBreakdownEnumerator;
        InventPriceMap  inventPriceMap;

        if (!this.mustCalcCostBreakdown())
            return;

        if (! bomCalcCost.stdCostBreakdown())
        {
            inventPriceMap = InventTable::find(itemId).inventCostPriceMap(inventDimId, null, null, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),  siteId);
            bomCalcCost.stdCostBreakDownCalcRollupExt(inventPriceMap.RecId);
            stdCostBreakdownEnumerator = bomCalcCost.stdCostBreakdownAmount(consumptionInventQty).getEnumerator();
        }
        else
        {
            stdCostBreakdownEnumerator = bomCalcCost.stdCostBreakdownAmount().getEnumerator();
        }

        lineNumBreakdown = prodCalcTrans.LineNum;

        delete_from prodCalcTransCostBreakdown
            where prodCalcTransCostBreakdown.TransRefId         == prodCalcTrans.TransRefId
               && prodCalcTransCostBreakdown.TransRefType       == prodCalcTrans.TransRefType
               && prodCalcTransCostBreakdown.Resource           == prodCalcTrans.Resource
               && prodCalcTransCostBreakdown.IdRefTableId       == prodCalcTrans.IdRefTableId
               && prodCalcTransCostBreakdown.IdRefRecId         == prodCalcTrans.IdRefRecId
               && prodCalcTransCostBreakdown.CollectRefProdId   == prodCalcTrans.CollectRefProdId
               && prodCalcTransCostBreakdown.CollectRefLevel    == prodCalcTrans.CollectRefLevel + 1
               && prodCalcTransCostBreakdown.CalcType           == ItemCalcType::CostGroup
               && prodCalcTransCostBreakdown.LineNum            >  prodCalcTrans.LineNum
               && prodCalcTransCostBreakdown.LineNum            <  prodCalcTrans.LineNum + 1;

        while (stdCostBreakdownEnumerator.moveNext())
        {
            lineNumBreakdown += 0.00001;

            prodCalcTransCostBreakdown.initCostBreakdown(prodCalcTrans);
            prodCalcTransCostBreakdown.LineNum          = lineNumBreakdown;
            prodCalcTransCostBreakdown.CostGroupId      = stdCostBreakdownEnumerator.currentKey();
            // <GEERU>
            [ prodCalcTransCostBreakdown.CostAmount ]     = stdCostBreakdownEnumerator.currentValue();
            // </GEERU>
            prodCalcTransCostBreakdown.ConsumpVariable  = prodCalcTrans.ConsumpVariable;
            prodCalcTransCostBreakdown.ConsumpConstant  = prodCalcTrans.ConsumpConstant;
            prodCalcTransCostBreakdown.insert();
        }

        if (prodCalcTrans.LineNum != lineNumBreakdown)
        {
            prodCalcTrans.bom = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalcCostBreakdown</Name>
				<Source><![CDATA[
    public boolean mustCalcCostBreakdown()
    {
        CostBreakdownInsertionRule costBreakdownInsertionRule = CostBreakdownInsertionRule::construct();

        costBreakdownInsertionRule.parmItemId(itemId);
        costBreakdownInsertionRule.parmIsProduction(this.hasProduction() || !parentBOMCalc.parmIsCostBreakdownAllowed());

        return costBreakdownInsertionRule.mustInsertCostBreakdown();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildBOMCalc</Name>
				<Source><![CDATA[
    BOMCalcBase parmChildBOMCalc(BOMCalcBase _childBOMCalcProd = childBOMCalc)
    {
        BOMCalcProd ret;

        ret = super(_childBOMCalcProd) as BOMCalcProd;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumptionInventQty</Name>
				<Source><![CDATA[
    public Qty parmConsumptionInventQty(Qty _consumptionInventQty = consumptionInventQty)
    {
        consumptionInventQty = _consumptionInventQty;

        return consumptionInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentBOMCalc</Name>
				<Source><![CDATA[
    BOMCalcBase parmParentBOMCalc(BOMCalcBase _parentBOMCalcProd = parentBOMCalc)
    {
        BOMCalcProd ret;

        ret = super(_parentBOMCalcProd) as BOMCalcProd;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdBOM</Name>
				<Source><![CDATA[
    ProdBOM parmProdBOM(ProdBOM _prodBOM = prodBOM)
    {
        prodBOM = _prodBOM;
        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalc</Name>
				<Source><![CDATA[
    void recalc()
    {
        BOMCalcProd localParentBOMCalcProd;
        setprefix("@SYS28550");
        setprefix(#PreFixField(prodBOM,ItemId));

        if (this.hasProduction())
        {
            localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;
            if (localParentBOMCalcProd.parmCalcReferences())
            {
                this.recalcBOM();
                this.updateCalcAmountFromChild();
            }
            else
            {
                this.updateCalcAmountFromProduction();
            }

            // Adjust the cost amounts with the cost allocation percentages, since the cost is taken directly from
            // the sub-production without regards to the quantity
            this.adjustAmountCostAllocation(localParentBOMCalcProd, prodCalcTrans);

            // update parent production
            localParentBOMCalcProd.updateCalcAmount(prodCalcTrans);
        }

        this.updateConsumption();

        this.insertProdCalcTrans();

        this.updateParent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcBOM</Name>
				<Source><![CDATA[
    protected void recalcBOM()
    {
        CostCalcTransData   childBOMCostCalcTransData;
        BOMCalcProd         localChildBOMCalcProd;
        BOMCalcProd         localParentBOMCalcProd;

        if (!this.parmChildBOMCalc())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        localChildBOMCalcProd = this.parmChildBOMCalc() as BOMCalcProd;
        localChildBOMCalcProd.recalcBOM();

        if (InventParameters::isCostBreakdownActivated())
        {
            // Treat the child Production as a composite - fetch the data accumulated from all sublevels
            childBOMCostCalcTransData = localChildBOMCalcProd.parmCostCalcTransData();
        }
        else
        {
            // Treat the child Production as a single ProdCalcTrans
            childBOMCostCalcTransData = CostCalcTransData::construct();
            childBOMCostCalcTransData.addProdCalcTrans(localChildBOMCalcProd.parmProdCalcTrans(), CostSheetProdCalcMode::Estimation);
        }

        localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;
        localParentBOMCalcProd.parmCostCalcTransData().addCostCalcTransData(childBOMCostCalcTransData
            , (localParentBOMCalcProd.parmProdTable().ProdType == ProdType::Process ? localParentBOMCalcProd.parmPmfCostAllocationPct() : 100)

        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCalcValues</Name>
				<Source><![CDATA[
    public void resetCalcValues()
    {
        prodCalcTrans.ConsumpVariable   = 0;
        prodCalcTrans.ConsumpConstant   = 0;

        prodCalcTrans.CostAmount        = 0;
        prodCalcTrans.CostMarkup        = 0;
        prodCalcTrans.SalesAmount       = 0;
        prodCalcTrans.SalesMarkup       = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalcAmount</Name>
				<Source><![CDATA[
    void updateCalcAmount()
    {
        BOMCalcProd localParentBOMCalcProd;
        prodCalcTrans.CostAmount    = bomCalcCost.costAmount();
        prodCalcTrans.CostMarkup    = bomCalcCost.costMarkup();

        prodCalcTrans.SalesAmount   = bomCalcCost.salesAmount();
        prodCalcTrans.SalesMarkup   = bomCalcCost.salesMarkup();

        if (prodBOM.bomConsump == BOMConsumpType::Constant)
        {
            prodCalcTrans.CostMarkup       += prodCalcTrans.CostAmount;
            prodCalcTrans.SalesMarkup      += prodCalcTrans.SalesAmount;
            prodCalcTrans.CostAmount       = 0;
            prodCalcTrans.SalesAmount      = 0;
        }

        // update parent production
        localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;
        localParentBOMCalcProd.updateCalcAmount(prodCalcTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalcAmountFromChild</Name>
				<Source><![CDATA[
    protected void updateCalcAmountFromChild()
    {
        ProdCalcTrans   prodCalcTransChild;
        BOMCalcProd     localChildBOMCalcProd;

        if (!this.parmChildBOMCalc())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        localChildBOMCalcProd = this.parmChildBOMCalc() as BOMCalcProd;
        prodCalcTransChild = localChildBOMCalcProd.parmProdCalcTrans();

        prodCalcTrans.CostAmount    = prodCalcTransChild.CostAmount;
        prodCalcTrans.CostMarkup    = prodCalcTransChild.CostMarkup;

        prodCalcTrans.SalesAmount   = prodCalcTransChild.SalesAmount;
        prodCalcTrans.SalesMarkup   = prodCalcTransChild.SalesMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalcAmountFromProduction</Name>
				<Source><![CDATA[
    protected void updateCalcAmountFromProduction()
    {
        Qty             qtyChildProd;
        Qty             signConsump = 1;
        ProdCalcTrans   prodCalcTransChild;

        int origLevel = this.parmParentBOMCalc().parmLevel();

        prodCalcTransChild = this.findChildProdCalcTrans(origLevel + 1);

        if (!prodCalcTransChild && BOMCalcProdLineUseProdTableRefLevelToCalcFlight::instance().isEnabled())
        {
            BOMCalcProdLineFromProdEstimationContext context = BOMCalcProdLineFromProdEstimationContext::current();

            if (context && origLevel == 0 && this.hasProduction())
            {
                BOMCalcProd parentBomCalcProd = this.parmParentBOMCalc() as BOMCalcProd;

                if (parentBomCalcProd && !parentBomCalcProd.parmCalcReferences())
                {
                    ProdTable prodTable = parentBomCalcProd.parmProdTable();
                    if (prodTable.CollectRefLevel != origLevel)
                    {
                        this.parmParentBOMCalc().parmLevel(prodTable.CollectRefLevel);
                        prodCalcTransChild = this.findChildProdCalcTrans(this.parmParentBOMCalc().parmLevel() + 1);
                    }
                }
            }
        }

        if (!prodCalcTransChild)
        {
            throw error("@SYS15490");
        }

        qtyChildProd = prodCalcTransChild.Qty ? prodCalcTransChild.Qty : 1;
        signConsump  = consumptionInventQty < 0 ? -1 : 1;

        prodCalcTrans.CostAmount    = consumptionInventQty * prodCalcTransChild.CostAmount / qtyChildProd;
        prodCalcTrans.CostMarkup    = consumptionInventQty == 0 ? 0 : signConsump * prodCalcTransChild.CostMarkup;

        prodCalcTrans.SalesAmount   = consumptionInventQty * prodCalcTransChild.SalesAmount / qtyChildProd;
        prodCalcTrans.SalesMarkup   = consumptionInventQty == 0 ? 0 : signConsump * prodCalcTransChild.SalesMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findChildProdCalcTrans</Name>
				<Source><![CDATA[
    private ProdCalcTrans findChildProdCalcTrans(Level _level)
    {
        ProdCalcTrans prodCalcTransChild;
        select firstonly prodCalcTransChild
            index hint ProdCollectIdx
            where prodCalcTransChild.TransRefId           == prodBOM.InventRefId           &&
                  prodCalcTransChild.TransRefType         == ProdTransRefType::Production  &&
                  prodCalcTransChild.CollectRefLevel      == _level                        &&
                  prodCalcTransChild.Production           == NoYes::Yes;

        return prodCalcTransChild;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalcTransBeforeUpdCostSheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PmfProdCalcTransMap</c> record before passing it to the costing sheet engine.
    /// </summary>
    /// <param name="_prodCalcTrans">
    /// The <c>PmfProdCalcTransMap</c> record.
    /// </param>
    /// <returns>
    /// Updated copy of the <c>PmfProdCalcTransMap</c> record.
    /// </returns>
    /// <remarks>
    /// This method is used in context of recycled byproduct where overheads ought to be calculated on input amount and quantity.
    /// Without this method overheads would be calculated on top of quantity and amount that are left after the allocation of recycled byproduct.
    /// </remarks>
    private PmfProdCalcTransMap updateCalcTransBeforeUpdCostSheet(PmfProdCalcTransMap _prodCalcTrans)
    {
        ProdCalcTrans                        localTrans;
        PmfRecycledBpConsumptionCalc_ProdEst consumptionCalc = this.parmPmfRecycledBpConsumptionCalc() as PmfRecycledBpConsumptionCalc_ProdEst;
        localTrans.data(_prodCalcTrans);

        if (consumptionCalc)
        {
            consumptionCalc.parmBomCalcCost(bomCalcCost);
            consumptionCalc.updateCalcTransForCostSheetCalc(localTrans, seriesSize);
        }

        return localTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConsumption</Name>
				<Source><![CDATA[
    void updateConsumption()
    {
        if (prodBOM.bomConsump == BOMConsumpType::Variable)
        {
            prodCalcTrans.ConsumpVariable   = consumptionInventQty;
            prodCalcTrans.ConsumpConstant   = 0;
        }
        else if (prodBOM.bomConsump == BOMConsumpType::Constant)
        {
            prodCalcTrans.ConsumpVariable  = 0;
            prodCalcTrans.ConsumpConstant  = consumptionInventQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParent</Name>
				<Source><![CDATA[
    protected void updateParent()
    {
        ProdCalcTrans       prodCalcTransCostBreakdown;
        boolean             breakdownExists;
        BOMCalcProd         localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;
        ProdCalcTrans       updatedProdCalcTrans;
        ProdCalcTrans       breakdownProdCalcTrans;

        // If a breakdown has been inserted, add this for the calculation of the indirect cost
        if (prodCalcTrans.DerivedReference != InventRefType::Production && prodCalcTrans.CalcType == ItemCalcType::BOM)
        {
            while select * from prodCalcTransCostBreakdown
                where prodCalcTransCostBreakdown.TransRefId         == prodCalcTrans.TransRefId
                   && prodCalcTransCostBreakdown.TransRefType       == prodCalcTrans.TransRefType
                   && prodCalcTransCostBreakdown.Resource           == prodCalcTrans.Resource
                   && prodCalcTransCostBreakdown.IdRefTableId       == prodCalcTrans.IdRefTableId
                   && prodCalcTransCostBreakdown.IdRefRecId         == prodCalcTrans.IdRefRecId
                   && prodCalcTransCostBreakdown.CollectRefProdId   == prodCalcTrans.CollectRefProdId
                   && prodCalcTransCostBreakdown.CollectRefLevel    == prodCalcTrans.CollectRefLevel + 1
                   && prodCalcTransCostBreakdown.CalcType           == ItemCalcType::CostGroup
                   && prodCalcTransCostBreakdown.LineNum            >  prodCalcTrans.LineNum
                   && prodCalcTransCostBreakdown.LineNum            <  prodCalcTrans.LineNum + 1
            {
                updatedProdCalcTrans = this.updateCalcTransBeforeUpdCostSheet(prodCalcTransCostBreakdown);
                localParentBOMCalcProd.updateCostCalcTransData(updatedProdCalcTrans);
                breakdownExists = true;
            }
        }

        if (prodCalcTrans.CalcType != ItemCalcType::BOM ||
            (prodCalcTrans.DerivedReference == InventRefType::None && !breakdownExists)) // Exclude sub-BOMs with type equal Production
        {
            updatedProdCalcTrans = this.updateCalcTransBeforeUpdCostSheet(prodCalcTrans);
            localParentBOMCalcProd.updateCostCalcTransData(updatedProdCalcTrans);
        }
        else if (prodCalcTrans.DerivedReference == InventRefType::None && breakdownExists)
        {
            updatedProdCalcTrans = this.updateCalcTransBeforeUpdCostSheet(prodCalcTrans);
            breakdownProdCalcTrans.data(updatedProdCalcTrans);
            breakdownProdCalcTrans.CostAmount = 0;
            breakdownProdCalcTrans.CostMarkup = 0;
            breakdownProdCalcTrans.RealCostAdjustment = 0;
            breakdownProdCalcTrans.RealCostAmount = 0;
            breakdownProdCalcTrans.CalcType = ItemCalcType::Item;
            localParentBOMCalcProd.updateCostCalcTransData(breakdownProdCalcTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(boolean _checkBOM = true)
    {
        boolean ret;

        ret = super();

        if (_checkBOM && !prodBOM)
        {
            ret = checkFailed(strFmt("@SYS29104", classStr(BOMCalcProdLine)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BOMCalcProdLine construct()
    {
        return new BOMCalcProdLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMCalcProd</Name>
				<Source><![CDATA[
    static BOMCalcProdLine newBOMCalcProd(ProdBOM        _prodBOM,
                                                 BOMCalcProd    _parentBOMCalcProd,
                                                 LineNum        _lineNum,
                                                 InventSiteId   _siteId)
    {
        BOMCalcProdLine bomCalcProdLine = BOMCalcProdLine::construct();

        bomCalcProdLine.parmItemId(_prodBOM.ItemId);
        bomCalcProdLine.parmInventDimId(_prodBOM.InventDimId);
        bomCalcProdLine.parmProdBOM(_prodBOM.data());
        bomCalcProdLine.parmLineNum(_lineNum);
        bomCalcProdLine.parmSiteId(_siteId);

        bomCalcProdLine.parmParentBOMCalc(_parentBOMCalcProd);

        return bomCalcProdLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMCalcProdWithRefProd</Name>
				<Source><![CDATA[
    static BOMCalcProdLine newBOMCalcProdWithRefProd(ProdBOM _prodBOM,
                                                    BOMCalcProd _parentBOMCalcProd,
                                                    LineNum _lineNum,
                                                    InventSiteId _siteId,
                                                    Set _refProdId,
                                                    Set _dupProdId)
    {
        BOMCalcProdLine bomCalcProdLine = BOMCalcProdLine::construct();

        bomCalcProdLine.parmItemId(_prodBOM.ItemId);
        bomCalcProdLine.parmInventDimId(_prodBOM.InventDimId);
        bomCalcProdLine.parmProdBOM(_prodBOM.data());
        bomCalcProdLine.parmLineNum(_lineNum);
        bomCalcProdLine.parmSiteId(_siteId);
        bomCalcProdLine.parmRefProdId(_refProdId);
        bomCalcProdLine.parmDupProdId(_dupProdId);
        bomCalcProdLine.parmParentBOMCalc(_parentBOMCalcProd);

        return bomCalcProdLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>