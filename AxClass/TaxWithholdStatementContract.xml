<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdStatementContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdStatementContract</c> class is the data contract class for the
/// <c>TaxWithholdStatement_IN</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the Data Contract class for the <c>TaxWithholdStatement_IN</c> SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classstr(TaxWithholdStatementUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly),
    SysOperationGroupAttribute('Identification', "@SYS53631", '1'),
    SysOperationGroupAttribute('Printout', "@SYS12608", '2'),
    SysOperationGroupAttribute('Efiling', "@GLS6381", '3')
]
class TaxWithholdStatementContract implements SysOperationValidatable
{
    //Parameter of Identification
    NoYesId                                 statementFiledearlier;
    TaxWithholdProvisionalReceiptNumber_IN  provisionalReceiptNumber;
    TaxWithholdTANNumber_IN                 taxAccountNumber;
    TaxWithholdStatement_IN                 statement;
    TransDate                               taxWithholdDate;
    TaxWithholdPeriodEnd_IN                 periodEnd;

    //Parameter of Print out
    Name                                    fullName;
    Name                                    designation;
    TransDate                               printDate;
    TaxWithholdPreparationUltiltyName_IN    utilityName;

    //Parameter of E-Filing
    NoYesId                                 efiling;
    NoYesId                                 correctedEFiling;
    Filename                                fileName;
    Filename                                consolidatedFileName;
    NoYesId                                 efilingFiled;
    TANName_IN                              tanName;
    BranchDivision_IN                       branchDivision;

    TransDate                               fromDate;
    TransDate                               toDate;
    TaxWithholdType_IN                      taxType;
    HcmPersonnelNumberId                    responsiblePerson;

    #define.QuarterOneEnd('3103')
    #define.QuarterTwoEnd('3006')
    #define.QuarterThreeEnd('3009')
    #define.QuarterFourEnd('3112')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isValidConsolidatedFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validates the fileName of the consolidated TDS file.
    /// </summary>
    /// <param name="_filename">
    /// Condsolidated file name.
    /// </param>
    /// <returns>
    /// Boolean value.
    /// </returns>
    public boolean isValidConsolidatedFile(Filename _filename)
    {
        Filename path;
        Filename fName;
        Filename ext;
        #TaxWithhold_IN

        [path, fName, ext] = filenamesplit(_filename);
        return ext == #FileExtensionTDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsolidatedFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FileName.
    /// </summary>
    /// <param name="_consolidatedFileName">
    /// The new value of the datacontract parameter FileName;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter FileName.
    /// </returns>
    [
        DataMemberAttribute('ConsolidatedFileName'),
        SysOperationLabelAttribute(literalStr("@SYS4002103")),
        SysOperationHelpTextAttribute(literalStr("@SYS4002104")),
        SysOperationGroupMemberAttribute('Efiling'),
        SysOperationDisplayOrderAttribute('4')
    ]
    public Filename parmConsolidatedFileName(Filename _consolidatedFileName = consolidatedFileName)
    {
        consolidatedFileName = _consolidatedFileName;
        return consolidatedFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedEfiling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter CorrectedEFilling.
    /// </summary>
    /// <param name="_correctedEFiling">
    /// The new value of the datacontract parameter CorrectedEFiling;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter CorrectedEFiling.
    /// </returns>
    [
        DataMemberAttribute('CorrectedEFilling'),
        SysOperationLabelAttribute(literalStr("@GLS6287")),
        SysOperationHelpTextAttribute(literalStr("@GLS51001")),
        SysOperationGroupMemberAttribute('Efiling'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public NoYesId parmCorrectedEfiling(NoYesId _correctedEFiling = correctedEFiling)
    {
        correctedEFiling = _correctedEFiling;
        return correctedEFiling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDesignation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Designation.
    /// </summary>
    /// <param name="_designation">
    /// The new value of the datacontract parameter Designation;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Designation.
    /// </returns>
    [
        DataMemberAttribute('Designation'),
        SysOperationLabelAttribute(literalStr("@GLS6285")),
        SysOperationGroupMemberAttribute('Printout'),
        SysOperationDisplayOrderAttribute('3')
    ]
    public Name parmDesignation(Name _designation = designation)
    {
        designation = _designation;
        return designation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEfiling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter EFilling.
    /// </summary>
    /// <param name="_efilling">
    /// The new value of the datacontract parameter EFilling;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter EFilling.
    /// </returns>
    [
        DataMemberAttribute('EFilling'),
        SysOperationLabelAttribute(literalStr("@GLS6286")),
        SysOperationHelpTextAttribute(literalStr("@GLS51000")),
        SysOperationGroupMemberAttribute('Efiling'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public NoYesId parmEfiling(NoYesId _efilling = efiling)
    {
        efiling = _efilling;
        return efiling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEfilingFiled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter EFillingFiled.
    /// </summary>
    /// <param name="_efilingFiled">
    /// The new value of the datacontract parameter EFilingFiled;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter EFilingFiled.
    /// </returns>
    [
        DataMemberAttribute('EFillingFiled'),
        SysOperationLabelAttribute(literalStr("@GLS6288")),
        SysOperationHelpTextAttribute(literalStr("@GLS51002")),
        SysOperationGroupMemberAttribute('Efiling'),
        SysOperationDisplayOrderAttribute('4')
    ]
    public NoYesId parmEfilingFiled(NoYesId _efilingFiled = efilingFiled)
    {
        efilingFiled = _efilingFiled;
        return efilingFiled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FileName.
    /// </summary>
    /// <param name="_fileName">
    /// The new value of the datacontract parameter FileName;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter FileName.
    /// </returns>
    [
        DataMemberAttribute('FileName'),
        SysOperationGroupMemberAttribute('Efiling'),
        SysOperationDisplayOrderAttribute('3')
    ]
    public Filename parmFileName(Filename _fileName = fileName)
    {
        fileName = _fileName;
        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter FromDate;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter FromDate.
    /// </returns>
    /// <remarks>
    /// This parameter just is used for report logic, it's not a report parameter. No attribute for it.
    /// </remarks>
    public Transdate parmFromDate(Transdate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFullName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Full name.
    /// </summary>
    /// <param name="_fullName">
    /// The new value of the datacontract parameter Full name;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Full name.
    /// </returns>
    [
        DataMemberAttribute('FullName'),
        SysOperationLabelAttribute(literalStr("@SYS83801")),
        SysOperationGroupMemberAttribute('Printout'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public Name parmFullName(Name _fullName = fullName)
    {
        fullName = _fullName;
        return fullName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Period End.
    /// </summary>
    /// <param name="_periodEnd">
    /// The new value of the datacontract parameter Period End;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Period End.
    /// </returns>
    [
        DataMemberAttribute('PeriodEnd'),
        SysOperationGroupMemberAttribute('Identification'),
        SysOperationHelpTextAttribute(literalStr("@GLS6338")),
        SysOperationDisplayOrderAttribute('6')
    ]
    public TaxWithholdPeriodEnd_IN parmPeriodEnd(TaxWithholdPeriodEnd_IN _periodEnd = periodEnd)
    {
        periodEnd = _periodEnd;
        return periodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Print date.
    /// </summary>
    /// <param name="_printDate">
    /// The new value of the datacontract parameter Print date;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Print date.
    /// </returns>
    [
        DataMemberAttribute('PrintDate'),
        SysOperationLabelAttribute(literalStr("@SYS8557")),
        SysOperationHelpTextAttribute(literalStr("@GLS6341")),
        SysOperationGroupMemberAttribute('Printout'),
        SysOperationDisplayOrderAttribute('4')
    ]
    public TransDate parmPrintDate(TransDate _printDate = printDate)
    {
        printDate = _printDate;
        return printDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProvisionalReceiptNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Provisional receipt number.
    /// </summary>
    /// <param name="_provisionalReceiptNumber">
    /// The new value of the datacontract parameter Provisional receipt number;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Provisional receipt number.
    /// </returns>
    [
        DataMemberAttribute('ProvisionalReceiptNumber'),
        SysOperationGroupMemberAttribute('Identification'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public TaxWithholdProvisionalReceiptNumber_IN parmProvisionalReceiptNumber(TaxWithholdProvisionalReceiptNumber_IN _provisionalReceiptNumber = provisionalReceiptNumber)
    {
        provisionalReceiptNumber = _provisionalReceiptNumber;
        return provisionalReceiptNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResponsiblePerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Responsible Person.
    /// </summary>
    /// <param name="_responsiblePerson">
    /// The new value of the datacontract parameter ResponsiblePerson; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ResponsiblePerson.
    /// </returns>
    [
        DataMemberAttribute('ResponsiblePerson'),
        SysOperationLabelAttribute(literalstr("@SYS190434")),
        SysOperationGroupMemberAttribute('Printout'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public HcmPersonnelNumberId parmResponsiblePerson(HcmPersonnelNumberId _responsiblePerson = responsiblePerson)
    {
        responsiblePerson = _responsiblePerson;
        return responsiblePerson;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Statement.
    /// </summary>
    /// <param name="_statement">
    /// The new value of the datacontract parameter Statement;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Statement.
    /// </returns>
    [
        DataMemberAttribute('Statement'),
        SysOperationGroupMemberAttribute('Identification'),
        SysOperationHelpTextAttribute(literalStr("@GLS6337")),
        SysOperationDisplayOrderAttribute('4')
    ]
    public TaxWithholdStatement_IN parmStatement(TaxWithholdStatement_IN _statement = statement)
    {
        statement = _statement;
        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementFiledEarlier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Statement filed eariler.
    /// </summary>
    /// <param name="_statementFiledearlier">
    /// The new value of the datacontract parameter Statement filed eariler;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Statement filed eariler.
    /// </returns>
    [
        DataMemberAttribute('statementFiledearlier'),
        SysOperationLabelAttribute(literalStr("@GLS6284")),
        SysOperationGroupMemberAttribute('Identification'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public NoYesId parmStatementFiledEarlier(NoYesId _statementFiledearlier = statementFiledearlier)
    {
        statementFiledearlier = _statementFiledearlier;
        return statementFiledearlier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Tax Account Number(TAN).
    /// </summary>
    /// <param name="_taxAccountNumber">
    /// The new value of the datacontract parameter Tax Account Number(TAN);
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Tax Account Number(TAN).
    /// </returns>
    [
        DataMemberAttribute('TaxAccountNumber'),
        SysOperationGroupMemberAttribute('Identification'),
        SysOperationDisplayOrderAttribute('3')
    ]
    public TaxWithholdTANNumber_IN parmTaxAccountNumber(TaxWithholdTANNumber_IN _taxAccountNumber = taxAccountNumber)
    {
        taxAccountNumber = _taxAccountNumber;
        return taxAccountNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter TaxType.
    /// </summary>
    /// <param name="_taxType">
    /// The new value of the datacontract parameter TaxType;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter TaxType.
    /// </returns>
    /// <remarks>
    /// This parameter just is used for report logic, it's not a report parameter. No attribute for it.
    /// </remarks>
    public TaxWithholdType_IN parmTaxType(TaxWithholdType_IN _taxType = taxType)
    {
        taxType = _taxType;
        return taxType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Tax withhold date.
    /// </summary>
    /// <param name="_taxWithholdDate">
    /// The new value of the datacontract parameter Tax withhold date;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Tax withhold date.
    /// </returns>
    [
        DataMemberAttribute('TaxWithholdDate'),
        SysOperationLabelAttribute(literalStr("@SYS7402")),
        SysOperationHelpTextAttribute(literalStr("@GLS5264")),
        SysOperationGroupMemberAttribute('Identification'),
        SysOperationDisplayOrderAttribute('5')
    ]
    public TransDate parmTaxWithholdDate(TransDate _taxWithholdDate = taxWithholdDate)
    {
        taxWithholdDate = _taxWithholdDate;
        return taxWithholdDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter ToDate;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ToDate.
    /// </returns>
    /// <remarks>
    /// This parameter just is used for report logic, it's not a report parameter. No attribute for it.
    /// </remarks>
    public Transdate parmToDate(Transdate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUtilityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Utility Name.
    /// </summary>
    /// <param name="_utilityName">
    /// The new value of the datacontract parameter utility name;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter utility name.
    /// </returns>
    [
        DataMemberAttribute('UtilityName'),
        SysOperationGroupMemberAttribute('Printout'),
        SysOperationDisplayOrderAttribute('4')
    ]
    public TaxWithholdPreparationUltiltyName_IN parmUtilityName(TaxWithholdPreparationUltiltyName_IN _utilityName = utilityName)
    {
        utilityName = _utilityName;
        return utilityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;
        TaxWithholdComponentTable_IN        taxWithholdComponent;
        TaxWithholdTrans_IN                 taxWithholdTrans;
        TaxWithholdRegNumbers_IN            taxWithholdRegNumbers;
        TaxWithholdProvisionalReceipt_IN    taxWithholdProvisionalReceipt;
        TaxWithholdComponentGroupTable_IN   taxWithholdComponentGroupTable;
        TaxWithholdComponentTable_IN        taxWithholdComponentTable;
        TaxWithholdCodeType_IN              taxCodeType;
        boolean                             isValidPrintDate = true;

        if (ret && statementFiledearlier)
        {
            if (!provisionalReceiptNumber)
            {
                //Field Provisional receipt number must be filled in.
                ret = checkFailed(strfmt("@SYS26332", "@GLS6282"));
            }
        }

        if (ret && !taxAccountNumber)
        {
            //Field Tax Account Number (TAN) must be filled in.
            ret = checkFailed(strfmt("@SYS26332", "@GLS5353"));
        }

        if (ret && taxAccountNumber)
        {
            if (!TaxWithholdRegNumbers_IN::exist(taxAccountNumber, TaxRegistrationType_IN::Company))
            {
                //Tax account number '%1' is not of type 'Company'.
                ret = checkFailed(strfmt("@GLS5447", taxAccountNumber, TaxRegistrationType_IN::Company));
            }
        }

        if (ret && !taxWithholddate)
        {
            //Field Date must be filled in.
            ret = checkFailed(strfmt("@SYS26332", "@SYS7402"));
        }

        if (ret && !fullName)
        {
            //Field Full name must be filled in.
            ret = checkFailed(strfmt("@SYS26332", "@SYS190434"));
        }

        if (ret && !designation)
        {
            //Field Designation must be filled in.
            ret = checkFailed(strfmt("@SYS26332", "@GLS6285"));
        }

        if (ret && !printDate)
        {
            //Printing date must be specified.
            ret = checkFailed("@SYS57947");
        }

        if (ret && printDate)
        {
            switch (periodEnd)
            {
                //June
                case "@SYS24781":
                    if (printDate < Global::str2DateDMY(#QuarterTwoEnd + int2str(year(taxWithholddate))))
                    {
                        isValidPrintDate = false;
                    }
                    break;
                //September
                case "@SYS24784":
                    if (printDate < Global::str2DateDMY(#QuarterThreeEnd + int2str(year(taxWithholddate))))
                    {
                        isValidPrintDate = false;
                    }
                    break;
                //December
                case "@SYS24787":
                    if (printDate < Global::str2DateDMY(#QuarterFourEnd + int2str(year(taxWithholddate))))
                    {
                        isValidPrintDate = false;
                    }
                    break;
                //March
                case "@SYS24778":
                    if (printDate < Global::str2DateDMY(#QuarterOneEnd + int2str(year(taxWithholddate))))
                    {
                        isValidPrintDate = false;
                    }
                    break;
            }

            if (isValidPrintDate == false)
            {
                //The printing date should be same as or later than the Period end.
                ret = checkFailed(strfmt("@GLS6387", "@GLS6281"));
            }
        }

        if (ret && (efiling || correctedEFiling))
        {
            if (!filename)
            {
                //Field File name must be filled in.
                ret = checkFailed(strfmt("@SYS26332", "@SYS80053"));
            }
        }

        [periodEnd, fromDate, toDate] = TaxWithholdStatementReportHelper::getFromToDateAndPeriodEnd(taxWithholdDate);
        switch (this.parmStatement())
        {
            case TaxWithholdStatement_IN::Form26Q:
            case TaxWithholdStatement_IN::Form27Q:
                taxCodeType = TaxWithholdCodeType_IN::TDS;
                taxType = TaxWithholdType_IN::TDS;
                break;

            case TaxWithholdStatement_IN::Form27EQ:
                taxCodeType = TaxWithholdCodeType_IN::TCS;
                taxType = TaxWithholdType_IN::TCS;
                break;
        }

        if (ret)
        {
            select firstOnly RecId from taxWithholdTrans
                where taxWithholdTrans.Settled                   == NoYes::No
                    && taxWithholdTrans.BookEntry                == NoYes::No
                    && taxWithholdTrans.bsrCode                  == ''
                    && taxWithholdTrans.ChallanNumber            == ''
                    && taxWithholdTrans.TransDate                >= fromDate
                    && taxWithholdTrans.TransDate                <= toDate
                    && taxWithholdTrans.RecoverableAccount       == false
                    && taxWithholdTrans.TransactionReversal      == false
                    && taxWithholdTrans.TaxWithholdAmount
                    && taxWithholdTrans.IsTaxInterim == NoYes::No
                exists join taxWithholdComponent
                    where taxWithholdComponent.RecId == taxWithholdTrans.TaxWithholdComponent
                        && taxWithholdComponent.TaxType == taxType
                exists join taxWithholdRegNumbers
                    where taxWithholdRegNumbers.RecId               == taxWithholdTrans.TaxWithholdRegNumber
                        && taxWithholdRegNumbers.RegistrationNumber == taxAccountNumber;

                if (taxWithholdTrans.RecId)
                {
                    //Challan number must be entered for all the transactions.
                    ret = checkFailed("@GLS6354");
                }
        }

        if (ret)
        {
            while select TaxWithholdComponentGroup, TaxWithholdComponent from taxWithholdTrans
                group by TaxWithholdComponentGroup, TaxWithholdComponent
                where taxWithholdTrans.TaxType  == taxCodeType
            {
                taxWithholdComponentGroupTable = TaxWithholdComponentGroupTable_IN::find(taxWithholdTrans.TaxWithholdComponentGroup);
                taxWithholdComponentTable   =   TaxWithholdComponentTable_IN::find(taxWithholdTrans.TaxWithholdComponent);

                if (taxWithholdComponentTable.Component && taxWithholdComponentGroupTable.ComponentGroup)
                {
                    if (ret && !TaxWithholdReportingCodes_IN::findByComponentGroup(taxType, taxWithholdComponentTable.Component, taxWithholdComponentGroupTable.ComponentGroup).RecId)
                    {
                        //Reporting codes must be filled in Withholding tax reporting codes.
                        ret = checkFailed(strfmt("@GLS5286", "@GLS6379", "@GLS6371"));
                    }
                    if (ret && !TaxWithholdComponentGroupTable_IN::find(taxWithholdTrans.TaxWithholdComponentGroup).SectionCode)
                    {
                        //Section code must be filled in Withholding tax component groups.
                        ret = checkFailed(strfmt("@GLS5286", "@GLS5354", "@GLS5479"));
                    }
                }
            }
        }

        if (ret && !CompanyInfoHelper::getTaxInformationLegalEntity_IN(CompanyInfo::find()).PANNumber)
        {
            //Permanent account number must be filled in Company information.
            ret = checkFailed(strfmt("@GLS5286", "@GLS5039", "@SYS81121"));
        }

        if (ret)
        {
            select RecId, Status from taxWithholdProvisionalReceipt
                where taxWithholdProvisionalReceipt.Statement == statement
                   && taxWithholdProvisionalReceipt.PeriodEnd == periodEnd
                   && taxWithholdProvisionalReceipt.FromDate  >= fromDate
                   && taxWithholdProvisionalReceipt.ToDate    <= toDate
                exists join taxWithholdRegNumbers
                    where taxWithholdRegNumbers.RecId               == taxWithholdProvisionalReceipt.TaxWithholdRegNumber
                        && taxWithholdRegNumbers.RegistrationNumber == taxAccountNumber;

            if (taxWithholdProvisionalReceipt.RecId && efilingFiled && efiling
                && taxWithholdProvisionalReceipt.Status == TaxWithholdEStatus_IN::Original)
            {
                //Statement is already generated for the selected period and Tax Account Number (TAN).
                ret = checkFailed("@GLS6355");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBranchDivision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter branch division.
    /// </summary>
    /// <param name="_branchDivision">
    /// The new value of the datacontract parameter branch division;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter branch division.
    /// </returns>
    [
    DataMemberAttribute('BranchDivision'),
    SysOperationGroupMemberAttribute('Efiling'),
    SysOperationDisplayOrderAttribute('7')
    ]
    public BranchDivision_IN parmBranchDivision(BranchDivision_IN _branchDivision = branchDivision)
    {
        branchDivision = _branchDivision;
        return branchDivision;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTANName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter TAN name.
    /// </summary>
    /// <param name="_tanName">
    /// The new value of the datacontract parameter TAN name;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter TAN name.
    /// </returns>
    [
    DataMemberAttribute('TANName'),
    SysOperationGroupMemberAttribute('Efiling'),
    SysOperationDisplayOrderAttribute('6')
    ]
    public TANName_IN parmTANName(TANName_IN _tanName = tanName)
    {
        tanName = _tanName;
        return tanName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>