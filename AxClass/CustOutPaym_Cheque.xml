<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustOutPaym_Cheque</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustOutPaym_Cheque extends CustOutPaym
{
    CustVendCheque          custVendCheque;

    BankChequeStartNum      firstChequeNum;
    BankChequeQty           numOfBlankCheque;
    ChequeNumMethod         chequeNumMethod;
    BankCheckNumCreated     startChequeNum;

    DialogField             dialogAccountId;
    DialogField             dialogFromChequeNum;
    DialogField             dialogNumOfBlankCheque;
    DialogField             dialogLookupChequeNum;

    #DEFINE.CurrentVersion(5)
    #LOCALMACRO.CurrentList
        accountId
    #ENDMACRO

    #LOCALMACRO.CurrentSwappingList
        accountId,
        firstChequeNum,
        numOfBlankCheque,
        chequeNumMethod,
        startChequeNum
    #ENDMACRO

    // This list defines which fields will be persisted and restored via the system's
    // SysLastValue functionality.
    #DEFINE.SysLastValuesCurrentVersion(1)
    #LOCALMACRO.SysLastValuesList
        firstChequeNum,
        numOfBlankCheque,
        chequeNumMethod,
        startChequeNum
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens a printer settings dialog box for the specified payment document type.
    /// </summary>
    /// <param name="_documentType">
    ///    The payment document type.
    /// </param>
    /// <returns>
    ///    true if the printer settings dialog box was closed with the OK button; otherwise, false.
    /// </returns>
    boolean callPrinterSettings(PaymDocumentType _documentType)
    {
        SrsPrintDestinationSettings printSettings;
        boolean ok;

        if (_documentType == PaymDocumentType::Document)
        {
            printSettings = new SrsPrintDestinationSettings();
            printSettings.unpack(this.getPrinterSettings(_documentType));

            printSettings.fromPage(1);
            printSettings.toPage(99999999);
            printSettings.printMediumType(SRSPrintMediumType::Printer);

            ok = SrsReportRunUtil::showSettingsDialog(printSettings);

            if (ok)
            {
                this.updatePrinterSettings(_documentType, printSettings.pack());
            }
        }
        else
        {
            ok = super(_documentType);
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the epilogue of the media, such as an end record for a file.
    /// </summary>
    void close()
    {
        if (!custVendCheque.tmpChequePrintout().ChequeNum)
        {
            return;
        }

        this.printDocument();

        if (printPaymAdvice)
        {
            this.printPaymAdvice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public configurationKeyId configurationKey()
    {
        return configurationkeynum(BankCheque);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The method should return the class ID of the corresponding parent of <c>CustVendOutPaymRecord</c>
    ///    classes.
    /// </summary>
    /// <returns>
    ///    The class ID.
    /// </returns>
    /// <remarks>
    ///    The class must be inherited from the <c>CustVendOutPaymRecord</c> class.
    /// </remarks>
    public classId custVendOutPaymRecordRootClassId()
    {
        return classnum(CustOutPaymRecord_Cheque);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = super();

        if (chequeNumMethod == ChequeNumMethod::Fixed)
        {
            firstChequeNum = 0;
        }

        custVendCheque.parmAccountId            (accountId);
        custVendCheque.parmFirstChequeNum       (firstChequeNum);
        custVendCheque.parmNumOfBlankCheque     (numOfBlankCheque);
        custVendCheque.parmChequeNumMethod      (chequeNumMethod);
        custVendCheque.parmLedgerJournalACType  (LedgerJournalACType::Cust);

        custVendCheque.initChequeNumEx(false);
        startChequeNum = int2str(custVendCheque.parmFirstChequeNum());
        dialogAccountId         = dialog.addFieldValue(extendedtypestr(CompanyBankAccountId), accountId);
        dialogAccountId.allowEdit(false);

        dialogLookupChequeNum   = dialog.addFieldValue(extendedtypestr(BankCheckNumCreated), startChequeNum,"@SYS4083");

        if (BankParameters::find().AllowCheckReuse == NoYes::Yes)
        {
            dialogLookupChequeNum.allowEdit(true);
        }
        else
        {
            dialogLookupChequeNum.allowEdit(chequeNumMethod == ChequeNumMethod::Free);
        }

        dialogNumOfBlankCheque = dialog.addFieldValue(extendedtypestr(BankChequeQty), numOfBlankCheque, "@SYS24080");
        dialogNumOfBlankCheque.visible(!BankParameters::find().AllowCreateBlankStatusChecks);

        BankChequeLayout bankChequeLayout = BankChequeLayout::find(custVendCheque.parmAccountId());

        if (!bankChequeLayout.UseGER)
        {
            this.dialogAddPrintOption(PaymDocumentType::Document, dialog);
        }

        this.dialogAddPrintDocument(PaymDocumentType::PaymAdvice, dialog, true, true, true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    void generatePaymentLines()
    {
        LedgerJournalTrans          ledgerJournalTrans;
        CustOutPaymRecord_Cheque    custOutPaymRecord;

        int64 paymentLinesToProcess = this.findQueryRecordCount();
        int64 paymentLinesProcessed;

        SysInstrumentationProgressLogger progressLogger = this.createProgressLogger();
        SysInstrumentationProgressStage progressStage = progressLogger.createStage(CustVendInstrumentationConstants::PaymentGenerationGeneratePaymentLines, paymentLinesToProcess);

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextWithProgressMonitor(progressStage))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::ClassName, this.getClassName());

            ttsbegin;

            setprefix("@SYS17561");

            outPaymRecordList = new List(Types::Class);

            while (queryRun.next())
            {
                ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));

                paymentLinesProcessed++;
                progressLogger.trackProgress(paymentLinesProcessed);

                if (!this.isOffsetAccountValid(ledgerJournalTrans))
                    continue;

                custOutPaymRecord = CustVendOutPaymRecord::construct(ledgerJournalTrans.PaymMode,
                                                                        ledgerJournalTrans.PaymSpec,
                                                                        this,
                                                                        this.custPaym(ledgerJournalTrans));

                if (custOutPaymRecord.checkValues(ledgerJournalTrans, this.parmProgress()))
                {
                    if (!(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&
                            ledgerJournalTrans.BankChequeNum))
                    {
                        if (custVendCheque.checkDataOk(ledgerJournalTrans))
                        {
                            ledgerJournalTrans.reread();
                            custVendCheque.processChequeNum(ledgerJournalTrans);
                            custVendCheque.parmPrintJobSettingsPacked(this.getPrinterSettings(PaymDocumentType::Document));
                            custOutPaymRecord.parmCustVendCheque(custVendCheque);
                            custOutPaymRecord.output();

                            custOutPaymRecord.parmCustVendPaym().ledgerJournalTrans(ledgerJournalTrans.data());
                            outPaymRecordList.addEnd(custOutPaymRecord);

                            if (ledgerJournalTrans.PaymReference ||
                                ledgerJournalTrans.BankChequeNum)
                            {
                                ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Sent;
                                ledgerJournalTrans.update();
                            }
                        }
                    }
                    else
                    {
                        throw error("@SYS18447");
                    }
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        accountId           = dialogAccountId.value();

        if (BankParameters::find().AllowCreateBlankStatusChecks)
        {
            numOfBlankCheque = 0;
        }
        else
        {
            numOfBlankCheque = dialogNumOfBlankCheque.value();
        }

        chequeNumMethod     = BankChequeLayout::find(accountId).ChequeNumMethod;
        startChequeNum      = dialogLookupChequeNum.value();
        firstChequeNum      = str2int(startChequeNum);

        custVendCheque.parmAccountId        (accountId);
        custVendCheque.parmFirstChequeNum   (firstChequeNum);
        custVendCheque.parmNumOfBlankCheque (numOfBlankCheque);
        custVendCheque.parmChequeNumMethod  (chequeNumMethod);

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the format to display in the user interface.
    /// </summary>
    /// <returns>
    /// The name of the format to display in the user interface.
    /// </returns>
    /// <remarks>
    /// Formats without an interface name cannot be used in electronic banking as export formats. However,
    /// they can serve as parents for other formats.
    /// </remarks>
    PaymInterfaceName interfaceName()
    {
        return "@SYS22495";
    }

]]></Source>
			</Method>
			<Method>
				<Name>interval</Name>
				<Source><![CDATA[
    BankChequeNum interval()
    {
        return custVendCheque.interval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        custVendCheque = new CustVendCheque();
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the media, such as creating a file, and creates the header of the media, such as creating a
    ///    start record for a file.
    /// </summary>
    void open()
    {
        custVendCheque.parmAccountId            (accountId);
        custVendCheque.parmFirstChequeNum       (firstChequeNum);
        custVendCheque.parmNumOfBlankCheque     (numOfBlankCheque);
        custVendCheque.parmChequeNumMethod      (chequeNumMethod);
        custVendCheque.parmLedgerJournalACType  (LedgerJournalACType::Cust);

        custVendCheque.initChequeNumEx(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (this.isSwappingPrompt())
        {
            return [#CurrentVersion, #CurrentSwappingList] + [super()];
        }
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the data required for <c>SysLastValues</c>.
    /// </summary>
    /// <returns>
    ///    A container that stores the data to be persisted by <c>SysLastValues</c>.
    /// </returns>
    /// <remarks>
    ///    The pack and unpack pattern does not have provisions for supporting different serialization and
    ///    <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    ///    <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    ///    <c>RunBaseBatch</c> class. Derivative classes also implement this method so that a whole object can
    ///    be packed for <c>SysLastValues</c>.
    /// </remarks>
    public container packSysLastValues()
    {
        return [#SysLastValuesCurrentVersion,#SysLastValuesList, custVendPaymPrinterSettings.getAllPrinterSettingsPacked(), super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccountID</Name>
				<Source><![CDATA[
    public CompanyBankAccountId parmBankAccountID(CompanyBankAccountId _accountID = accountID)
    {
        CompanyBankAccountId oldAccountId       = accountID;
        ChequeNumMethod      oldChequeNumMethod = chequeNumMethod;

        super(_accountID);
        chequeNumMethod = BankChequeLayout::find(accountID).ChequeNumMethod;

        if (accountID != oldAccountId || chequeNumMethod != oldChequeNumMethod)
        {
            this.resetChequeNum();
        }

        return accountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument</Name>
				<Source><![CDATA[
    public void printDocument()
    {
        BankChequePrint bankChequePrint;

        if (custVendCheque.tmpChequePrintout())
        {
            bankChequePrint = BankChequePrint::construct(custVendCheque.tmpChequePrintout(),
                                                         this.getPrinterSettings(PaymDocumentType::Document),
                                                         custVendCheque);
            bankChequePrint.printDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPaymAdvice</Name>
				<Source><![CDATA[
    public void printPaymAdvice()
    {
        Args args = new Args();

        if (BankPaymAdviceReportV2FeatureExposure::isEnabled())
        {
            BankPaymAdviceDefaultParameters defaultParameters = BankPaymAdviceDefaultParameters::newForPaymAdvicePrintRun(
                this.getPaymRecords(),
                new SrsPrintDestinationSettings(this.getPrinterSettings(PaymDocumentType::PaymAdvice)),
                printPaymAdvicePrintMgmt);

            args.parmObject(defaultParameters);

            new MenuFunction(menuitemOutputStr(BankPaymAdviceCustV2), MenuItemType::Output).run(args);
        }
        else
        {
            args.caller(this);
            args.parmObject(this.getPaymRecords());
            args.parmEnumType(enumNum(NoYes));
            args.parmEnum(printPaymAdvicePrintMgmt);

            new MenuFunction(menuitemOutputStr(BankPaymAdviceCust), MenuItemType::Output).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetChequeNum</Name>
				<Source><![CDATA[
    void resetChequeNum()
    {
        numOfBlankCheque = 0;
        firstChequeNum   = 0;
        startChequeNum   = "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean     ret;
        Integer     version = RunBase::getVersion(packedClass);
        container   base;

        switch (version)
        {
            case #CurrentVersion:
                if (!this.isSwappingPrompt())
                {
                    [version, #CurrentList, base] = packedClass;
                }
                else
                {
                    [version, #CurrentSwappingList, base] = packedClass;
                }

                ret = super(base);
                break;

            default :
                return false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks the data required for <c>SysLastValues</c>.
    /// </summary>
    /// <param name="_packedValues">
    ///    The values stored by the <c>SysLastValues</c> framework that are to be unpacked.
    /// </param>
    /// <remarks>
    ///    The pack and unpack pattern does not have provisions for supporting different serialization and
    ///    <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    ///    <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    ///    <c>RunBaseBatch</c> class. Derivative classes also implement this method so that a whole object can
    ///    be unpacked for <c>SysLastValues</c>.
    /// </remarks>
    public void unpackSysLastValues(container _packedValues)
    {
        container   baseClassPackedValues;
        container   packedPrinterSettings;
        Version     version = RunBase::getVersion(_packedValues);

        switch (version)
        {
            case #SysLastValuesCurrentVersion:
                [version, #SysLastValuesList, packedPrinterSettings, baseClassPackedValues] = _packedValues;
                super(baseClassPackedValues);
                break;
        }

        if (packedPrinterSettings)
        {
            // Recreate the object from the packed values.
            custVendPaymPrinterSettings = CustVendPaymPrinterSettings::newForPackedPrinterSettings(packedPrinterSettings);
        }
        else
        {
            custVendPaymPrinterSettings = new CustVendPaymPrinterSettings();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the state of the internal variables.
    /// </summary>
    /// <param name="_calledFrom">
    ///    Identifies the object from which this method is called. The default value is null.
    /// </param>
    /// <returns>
    ///    true if the internal variables are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method must validate the state of the internal variables. It is called before closing the
    ///    dialog and should be called in the <c>run</c> method.It must only contain code that adds warnings
    ///    to the Infolog.The throw command is not allowed in this method.The method should generally return
    ///    errors using the <c>Global::CheckFailed</c> method.Export formats that are designed to handle only
    ///    one method of payment per payment media must call the <c>checkUniquePaymMode</c> method.
    /// </remarks>
    boolean validate(Object _calledFrom = null)
    {
        boolean             ret;
        BankChequeLayout    bankChequeLayout = BankChequeLayout::find(accountID);

        ret = bankChequeLayout.checkBitmapsExist();

        if (!accountID)
        {
            ret = checkFailed("@SYS28489");
        }
        else
        {
            ret = BankAccountTable::checkIsActive(accountID);
        }

        if (!BankChequeLayout::find(accountID))
        {
            ret = checkFailed(strfmt("@SYS28490", accountID));
        }

        ret = ret && custVendCheque.validateFreeChequeNumber(startChequeNum);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS24060";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>