<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XMLSchemaBuilderHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class to generate schema elements and types.
/// </summary>
internal class XMLSchemaBuilderHelper
{
    protected const str StandardSchemaNamespace = "http://www.w3.org/2001/XMLSchema";
 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createEnumSimpleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a simple type for an enum which contains restrictions on enum values.
    /// </summary>
    /// <param name = "_enum">Instance of enum</param>
    /// <returns>An <c>XmlSchemaSimpleType</c> for the passed enum.</returns>
    internal static System.Xml.Schema.XmlSchemaSimpleType createEnumSimpleType(Microsoft.Dynamics.AX.Metadata.MetaModel.AxEnum _enum)
    {
        Set enumValues = new Set(Types::String);

        var enumValuesEnumerator = _enum.EnumValues.GetEnumerator();
        
        while(enumValuesEnumerator.moveNext())
        {
            Microsoft.Dynamics.AX.Metadata.MetaModel.AxEnumValue enumValue = enumValuesEnumerator.Current;
            enumValues.Add(enumValue.Name);
        }

        return XMLSchemaBuilderHelper::createStringSimpleTypeWithValuesRestrictions(_enum.Name, enumValues);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStringSimpleTypeWithValuesRestrictions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a simple type with restrictions for a set of possible values.
    /// </summary>
    /// <param name = "_name">Name of the new simple type.</param>
    /// <param name = "_values"> A <c>Set</c> which consists of possible values.
    /// <returns>An <c>XmlSchemaSimpleType</c> with a restrictions on a set of values..</returns>
    internal static System.Xml.Schema.XmlSchemaSimpleType createStringSimpleTypeWithValuesRestrictions(str _name, Set _values)
    {
        System.Xml.Schema.XmlSchemaSimpleType simpleType = new System.Xml.Schema.XmlSchemaSimpleType();
        simpleType.Name = _name;
        System.Xml.Schema.XmlSchemaSimpleTypeRestriction simpleTypeRestriction = new  System.Xml.Schema.XmlSchemaSimpleTypeRestriction();
        simpleTypeRestriction.BaseTypeName = new  System.Xml.XmlQualifiedName("string", StandardSchemaNamespace);

        var facets = simpleTypeRestriction.Facets;
        SetEnumerator _setEnumerator = _values.getEnumerator();
        while (_setEnumerator.moveNext())
        {
            System.Xml.Schema.XmlSchemaEnumerationFacet enumValueFacet = new  System.Xml.Schema.XmlSchemaEnumerationFacet();
            enumValueFacet.Value = _setEnumerator.current();
            facets.Add(enumValueFacet);
        }
  
        simpleType.Content = simpleTypeRestriction;
        
        return simpleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStringSimpleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a simple type for a string which contains restrictions on maximum length.
    /// </summary>
    /// <param name = "_newTypeName">New type name.</param>
    /// <param name = "_length">Maximum length allowed for the string.</param>
    /// <returns>An <c>XmlSchemaSimpleType</c> for a string with a specific maximum length.</returns>
    internal static System.Xml.Schema.XmlSchemaSimpleType createStringSimpleType(str _newTypeName, int _length)
    {
        System.Xml.Schema.XmlSchemaSimpleType simpleType = new System.Xml.Schema.XmlSchemaSimpleType();
        simpleType.Name = _newTypeName;

        System.Xml.Schema.XmlSchemaSimpleTypeRestriction simpleTypeRestriction = new System.Xml.Schema.XmlSchemaSimpleTypeRestriction();
        simpleTypeRestriction.BaseTypeName = new  System.Xml.XmlQualifiedName("string", StandardSchemaNamespace);
       
        System.Xml.Schema.XmlSchemaMaxLengthFacet maxLength = new  System.Xml.Schema.XmlSchemaMaxLengthFacet();
        maxLength.Value = int2Str(_length);
        
        var facets = simpleTypeRestriction.Facets;
        facets.Add(maxLength);
        simpleType.Content = simpleTypeRestriction;
        
        return simpleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXMLComplexType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an anonymus complex type with a specific sequence of elements.
    /// </summary>
    /// <param name = "_sequence">Schema sequence instance.</param>
    /// <returns>An <c>XmlSchemaComplexType</c> instance.</returns>
    internal static System.Xml.Schema.XmlSchemaComplexType createXMLComplexType(System.Xml.Schema.XmlSchemaSequence _sequence)
    {
        System.Xml.Schema.XmlSchemaComplexType complexType = new System.Xml.Schema.XmlSchemaComplexType();
        complexType.Particle = _sequence;
        return complexType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXMLSchemaElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a schema element with a specific name.
    /// </summary>
    /// <param name = "_name">Name for the new schema element.</param>
    /// <returns>An <c>XmlSchemaElement</c> instance.</returns>
    internal static System.Xml.Schema.XmlSchemaElement createXMLSchemaElement(str _name)
    {
        System.Xml.Schema.XmlSchemaElement schemaElement = new  System.Xml.Schema.XmlSchemaElement();
        schemaElement.Name =  _name;
        return schemaElement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>