<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesAutoCreate_Basket</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesAutoCreate_Basket extends SalesAutoCreate
{
    SalesBasketId   currentSalesBasketId;
    SalesBasket     salesBasket;
    SalesBasketLine salesBasketLine;
    boolean         firstRecord;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    CustAccount custAccount()
    {
        return salesBasketLine.salesBasket().CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerRef</Name>
				<Source><![CDATA[
    CustRef customerRef()
    {
        return salesBasket.CustomerRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    DlvDate deliveryDate()
    {
        return salesBasket.DeliveryDate ? salesBasket.DeliveryDate : InventOrderEntryDeadlineTable::effectiveOrderDate('','');
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation</Name>
				<Source><![CDATA[
    LogisticsLocationRecId deliveryLocation()
    {
        return salesBasket.DeliveryLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryName</Name>
				<Source><![CDATA[
    Name deliveryName()
    {
        return salesBasket.DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address for a <c>SalesBasket</c> record.
    /// </summary>
    /// <returns>
    /// The record ID of the <c>DeliveryPostalAddress</c> record.
    /// </returns>
    public LogisticsPostalAddressRecId deliveryPostalAddress()
    {
        return LogisticsPostalAddress::findByLocation(salesBasket.DeliveryLocation).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
    void endUpdate()
    {
        if (currentSalesBasketId)
            salesBasket.delete();

        if (salesTable)
        {
            salesTable.updateMultiLineDisc();
            salesTable.updateFinalDisc();
            if (salesTable.setEstimate())
            {
                salesTable.doUpdate();
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    CustInvoiceAccount invoiceAccount()
    {
        return custTable.InvoiceAccount  ? custTable.InvoiceAccount
                                         : custTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesBasketLine    _salesBasketLine,
             Object             _callBackClass      = null)
    {
        select forupdate salesBasketLine
            where salesBasketLine.SalesBasketId == _salesBasketLine.SalesBasketId;

        super(_salesBasketLine,_callBackClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextRecord</Name>
				<Source><![CDATA[
    void nextRecord()
    {
        next salesBasketLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchOrderFormNum</Name>
				<Source><![CDATA[
    CustPurchaseOrder purchOrderFormNum()
    {
        return salesBasket.PurchOrderFormNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordExist</Name>
				<Source><![CDATA[
    boolean recordExist()
    {
        return salesBasketLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesType</Name>
				<Source><![CDATA[
    SalesType salesType()
    {
        return SalesType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCust</Name>
				<Source><![CDATA[
    void setCust()
    {
        if (this.custAccount())
            custTable = CustTable::find(this.custAccount());

        if (!custTable)
        {
            checkFailed(strFmt("@SYS16734",this.custAccount()));
            throw error("@SYS23020");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesLine</Name>
				<Source><![CDATA[
    void  setSalesLine()
    {
        setPrefix(#PreFixField(salesBasketLine,ItemId));

        super();

        salesLine.initFromSalesBasketLine(salesBasketLine);

        SalesBasketLine salesBasketLineDelete = SalesBasketLine::findRecId(salesBasketLine.RecId, true);
        salesBasketLineDelete.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTable</Name>
				<Source><![CDATA[
    void  setSalesTable()
    {
        if (currentSalesBasketId != salesBasketLine.SalesBasketId)
        {
            if (currentSalesBasketId)
                salesBasket.delete();

            salesBasket = salesBasketLine.salesBasket(true);

            super();

            salesTable.initFromSalesBasket(salesBasket);

            this.createSalesTable();
        }

        if (!salesTable)
        {
            checkFailed(strFmt("@SYS15067", this.salesId()));
            throw error("@SYS23020");
        }

        currentSalesBasketId = salesBasketLine.SalesBasketId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
