<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQTotals_ReplyTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQTotals_ReplyTrans
extends PurchRFQTotals_Trans
{
    PurchRFQReplyLine   purchRFQReplyLine;
    PurchRFQReplyTable  purchRFQReplyTable;
    RecordSortedList    recordSortedListReplyLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    protected TradeCalcTax constructCalcTax()
    {
        return PurchCalcTax::construct(purchRFQReplyTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currency code of the record in the <c>Currency</c> table.
    /// </summary>
    /// <returns>
    /// The currency code of the record in the <c>Currency</c> table.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return purchRFQReplyTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    protected DiscPct  discPercent()
    {
        return purchRFQReplyTable.DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedListLine</Name>
				<Source><![CDATA[
    protected void initRecordSortedListLine()
    {
        super();

        recordSortedListReplyLine = new RecordSortedList(tableNum(PurchRFQReplyLine));
        recordSortedListReplyLine.sortOrder (fieldNum(PurchRFQReplyLine, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordSortedListLine</Name>
				<Source><![CDATA[
    protected void insertRecordSortedListLine(Common _orderLine)
    {
        super(_orderLine);
        recordSortedListReplyLine.ins(purchRFQReplyLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected LineAmount  lineAmount(PurchQty purchQty, TransDate transDate)
    {
        return this.makeCalcPurchRFQLine().calcLineAmountExclTax(purchQty, transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscAmount</Name>
				<Source><![CDATA[
    protected DiscAmount lineDiscAmount(UnitQty unitQty, TransDate transDate)
    {
        DiscAmount discAmount = 0;

        if (purchRFQReplyLine.PurchPrice)
            discAmount += this.makeCalcPurchRFQLine().calcLineDiscExclTax(unitQty, transDate);

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeCalcPurchRFQLine</Name>
				<Source><![CDATA[
    protected PurchRFQLine makeCalcPurchRFQLine()
    {
        PurchRFQLine    tmpPurchRFQLine = purchRFQLineMap.data(),emptyPurchRFQLine;

        if  (tmpPurchRFQLine.TableId != tableNum(PurchRFQLine))
            tmpPurchRFQLine = emptyPurchRFQLine;

        tmpPurchRFQLine.initFromPurchRFQReplyLine(purchRFQReplyLine);
        return tmpPurchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common         _orderTable,
             PurchRFQUpdate _specQty)
    {
        super(_orderTable, _specQty);

        purchRFQReplyTable  = _orderTable;
        purchRFQTableMap    = purchRFQReplyTable.purchRFQTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    protected PdsCWInventQty pdsCWQtyUnit()
    {
        return PurchRFQQuantity::construct().pdsCalcCWQty(purchRFQLineMap,
            purchRFQReplyLine, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    protected InventQty  qtyInvent()
    {
        return PurchRFQQuantity::construct().calcInventQty(purchRFQLineMap, purchRFQReplyLine, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    protected UnitQty qtyUnit()
    {
        return PurchRFQQuantity::construct().calcPurchQty(purchRFQLineMap, purchRFQReplyLine, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    protected QueryRun  queryBuild()
    {
        QueryRun                query;
        QueryBuildDataSource    qbds;
        query   = super();
        qbds    = query.query().dataSourceTable(tableNum(PurchRFQLine));
        qbds    = qbds.addDataSource(tableNum(PurchRFQReplyLine));
        qbds.relations(true);
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    protected Common queryGet(QueryRun  _queryRun)
    {
        super(_queryRun);

        if (_queryRun.changed(tableNum(PurchRFQReplyLine)))
        {
            purchRFQReplyLine = _queryRun.get(tableNum(PurchRFQReplyLine));
        }
        else
        {
            purchRFQReplyLine = null;
        }

        //return purchRFQLine instead of reply line
        return purchRFQLineMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQTotals_ReplyTrans construct(PurchRFQReplyTable   _purchRFQReplyTable,
                                               PurchRFQUpdate       _specQty)
    {
        return new PurchRFQTotals_ReplyTrans(_purchRFQReplyTable, _specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    // <GTE>
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        if (orderTable.TableId == tableNum(PurchRFQReplyTable))
        {
            PurchRFQReplyTable purchRFQReplyTableTmp = orderTable as PurchRFQReplyTable;

            return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(purchRFQReplyTableTmp.purchRFQTable());
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGTETax</Name>
				<Source><![CDATA[
    // </GTE>

    /// <summary>
    /// Calcluates GTE tax amount when GTE enabled.
    /// </summary>
    protected void calcGTETax()
    {
        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            ITaxableDocument taxableDocument = TaxableDocumentObject::construct(this.parmTaxableDocumentDescriptor());
            ITaxDocument taxDocumentObject = TaxBusinessService::calculateTax(taxableDocument);

            if (taxDocumentObject)
            {
                ITaxDocumentMeasureValue totalTaxMeasureValue = taxDocumentObject.getTotalTax();
                taxTotalGTE = taxTotal + totalTaxMeasureValue.amountTransactionCurrency();

                ITaxDocumentMeasureValue partyTaxMeasureValue = taxDocumentObject.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Credit);
                taxTotal += partyTaxMeasureValue.amountTransactionCurrency();

                partyTaxMeasureValue = taxDocumentObject.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Debit);
                taxTotal -= partyTaxMeasureValue.amountTransactionCurrency();

                taxTotalReverseCharge = TaxDocumentUtils::calculateTaxTotalReverseCharge(taxDocumentObject);
            }
            else
            {
                taxTotalGTE = taxTotal;
            }
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkupTax</Name>
				<Source><![CDATA[
    public void setMarkupTax(Markup _markup)
    {
        // We should skip tax initing in case PurchTaxOnOperations is set to True to avoid twice tax calculation.
        if (TaxParameters::find().PurchTaxOnOperations
            && PurchRFQTotalsReplyTransSetMarkupTaxFlight::instance().isEnabled())
        {
            return;
        }

        super(_markup);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>