<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTblSpecTimeTrans_Vacation</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayTblSpecTimeTrans_Vacation extends RpayTblSpecTimeTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        protected boolean check(TransDate _startDate,
                            TransDate _endDate)
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
        RPayAverageEarnEngine_Vacation rPayAverageEarnEngine_Vacation;
        TransLink_RU                   transLink;
        container                      con;
        int                            i;
        StartDate                      startDateLocal;
        EndDate                        endDateLocal;

        rPayAverageEarnEngine_Vacation = new RPayAverageEarnEngine_Vacation(rPayAverageEarnEmplPeriodTable.EmplId,
                                                                            rPayAverageEarnEmplPeriodTable.rPayAverageEarnCode,
                                                                            rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod);

        while select rPayAverageEarnEmplPeriodTable
            where rPayAverageEarnEmplPeriodTable.AverageEarnCodeType  == RPayAverageEarnCodeType::Vacation &&
                  rPayAverageEarnEmplPeriodTable.EmplId               == emplTable.EmployeeId              &&
                  rPayAverageEarnEmplPeriodTable.StartDate            <= _endDate                          &&
                  rPayAverageEarnEmplPeriodTable.EndDate              >= _startDate                        &&
                  rPayAverageEarnEmplPeriodTable.VacationRecordType   == RPayVacationRecordType::Vacation
            #transLinkNotExistsReversed_RU(transLink, rpayAverageEarnEmplPeriodTable)
        {
            rPayAverageEarnEngine_Vacation.rPayAverageEarnEmplPeriodTable(rPayAverageEarnEmplPeriodTable);
            con = rPayAverageEarnEngine_Vacation.getVacationIntervals();

            for (i = 1 ; i <= conLen(con) ; i++)
            {
                startDateLocal = conPeek(conPeek(con,i),1);
                endDateLocal   = conPeek(conPeek(con,i),2);

                if (_startDate <= endDateLocal && _endDate >= startDateLocal)
                {
                    return checkFailed(strFmt("@RUP1888",
                                              emplTable.EmployeeId,
                                              emplTable.name(),
                                              "@GLS106125",
                                              rPayAverageEarnEmplPeriodTable.StartDate,
                                              rPayAverageEarnEmplPeriodTable.EndDate));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodIntervals</Name>
				<Source><![CDATA[
        public container getPeriodIntervals(boolean _isCreateReverseLine = false)
    {
        container                      intervals;
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
        RHRMVacationType               rhrmVacationType;
        int                            i,j;
        RPayAverageEarnEngine_Vacation rPayAverageEarnEngine_Vacation;
        container                      con;
        StartDate                      startDateLocal;
        EndDate                        endDateLocal;
        TransLink_RU                   transLink;

        rPayAverageEarnEngine_Vacation = new RPayAverageEarnEngine_Vacation(rPayAverageEarnEmplPeriodTable.EmplId,
                                                                            rPayAverageEarnEmplPeriodTable.rPayAverageEarnCode,
                                                                            rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod);

        while select rPayAverageEarnEmplPeriodTable
            where rPayAverageEarnEmplPeriodTable.AverageEarnCodeType  == RPayAverageEarnCodeType::Vacation &&
                  rPayAverageEarnEmplPeriodTable.EmplId               == emplTable.EmployeeId              &&
                  rPayAverageEarnEmplPeriodTable.StartDate            <= dateEnd                           &&
                  rPayAverageEarnEmplPeriodTable.EndDate              >= dateStart                         &&
                  rPayAverageEarnEmplPeriodTable.VacationRecordType   == RPayVacationRecordType::Vacation  &&
                  ((!_isCreateReverseLine &&  rPayAverageEarnEmplPeriodTable.PayPeriod == rPayAverageEarnEmplPeriodTable.CorrectedPeriod) ||
                  (_isCreateReverseLine   &&  rPayAverageEarnEmplPeriodTable.PayPeriod != rPayAverageEarnEmplPeriodTable.CorrectedPeriod))
        exists join rhrmVacationType
            where rhrmVacationType.VacationTypeId   == rPayAverageEarnEmplPeriodTable.VacationTypeId &&
                  rhrmVacationType.CalendarTimeCode == rpayTblSpecTimeTable.RpayCalendarTimeCode
        notexists join transLink
            where transLink.RefTableId == rPayAverageEarnEmplPeriodTable.TableId &&
                  transLink.RefPri     == rPayAverageEarnEmplPeriodTable.RecId &&
                  transLink.RefSec     == rPayAverageEarnEmplPeriodTable.RecId
        {
            rPayAverageEarnEngine_Vacation.rPayAverageEarnEmplPeriodTable(rPayAverageEarnEmplPeriodTable);
            con = rPayAverageEarnEngine_Vacation.getVacationIntervals();

            for (j = 1 ; j <= conLen(con) ; j++)
            {
                startDateLocal = conPeek(conPeek(con,j),1);
                endDateLocal   = conPeek(conPeek(con,j),2);

                if (dateStart <= endDateLocal && dateEnd >= startDateLocal)
                {
                    i++;
                    intervals = conPoke(intervals,
                                i,
                                [max(startDateLocal,dateStart),
                                 min(endDateLocal,dateEnd)]);
                }
            }
        }

        return intervals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(RHRMEmplTable  _emplTable,
                    TransDate  _dateStart,
                    TransDate  _dateEnd,
                    RPayCalendarTimeCode _timeCode)

    {
        ;
        super(_emplTable, _dateStart, _dateEnd);

        rpayTblSpecTimeTable = RpayTblSpecTimeTable::find(RpayTblSpecTimeType::Vacation, _timeCode);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>