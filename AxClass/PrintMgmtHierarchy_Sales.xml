<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintMgmtHierarchy_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PrintMgmtHierarchy_Sales</c> class is responsible for managing the Accounts Receivable
///    hierarchy.
/// </summary>
/// <remarks>
///    The <c>PrintMgmtHierarchy_Sales</c> class manages the defaulting hierarchy for the Accounts
///    Receivable module. It manages Print Management data for transactions, customers and the entire
///    module-level.
/// </remarks>
public class PrintMgmtHierarchy_Sales extends PrintMgmtHierarchy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodesImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds valid nodes for the <c>PrintMgmtHierarchy_Sales</c> class.
    /// </summary>
    /// <returns>
    ///    A list of <c>PrintMgmtNodeType</c> enumeration values that specify the valid nodes for the
    ///    <c>PrintMgmtHierarchy_Sales</c> class hierarchy.
    /// </returns>
    /// <remarks>
    ///    The valid nodes for this hierarchy are <c>PrintMgmtNode_Sales</c>, <c>PrintMgmtNode_CustTable</c>,
    ///    <c>PrintMgmtNode_CustInvoiceTable</c>, <c>PrintMgmtNode_SalesQuotationTable</c> and
    ///    <c>PrintMgmtNode_SalesTable</c>.
    /// </remarks>
    protected List getNodesImplementation()
    {
        List supportedNodes = new List(Types::Enum);

        // Add allowable nodes for this hierarchy
        supportedNodes.addEnd(PrintMgmtNodeType::Sales);
        supportedNodes.addEnd(PrintMgmtNodeType::CustTable);
        supportedNodes.addEnd(PrintMgmtNodeType::CustInvoiceTable);
        supportedNodes.addEnd(PrintMgmtNodeType::SalesQuotationTable);
        supportedNodes.addEnd(PrintMgmtNodeType::SalesTable);
        supportedNodes.addEnd(PrintMgmtNodeType::SalesAgreement);
        // <GEEU>
        if (isConfigurationkeyEnabled(configurationKeyNum(CzCustVendAdvanceInvoices)))
        {
            supportedNodes.addEnd(PrintMgmtNodeType::SalesAdvanceInvoice);
        }
        // </GEEU>

        return supportedNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the parent node instance based on the information provided.
    /// </summary>
    /// <param name="_nodeInstance">
    ///    The instance of the <c>PrintMgmtNodeInstance</c> class for which the parent is being requested.
    /// </param>
    /// <param name="_docType">
    ///    The <c>PrintMgmtDocumentType</c> enumeration value that is used to determine the appropriate parent.
    /// </param>
    /// <returns>
    ///    An instance of the parent <c>PrintMgmtNodeInstance</c> class; otherwise, null.
    /// </returns>
    /// <remarks>
    ///    The parent returned can vary on the table being referenced by the _<paramref name="nodeInstance" />
    ///    parameter and the _<paramref name="docType" /> parameter being requested.
    /// </remarks>
    protected PrintMgmtNodeInstance getParentImplementation(PrintMgmtNodeInstance _nodeInstance, PrintMgmtDocumentType _docType)
    {
        // Find the appropriate parent
        PrintMgmtNodeInstance result;
        SalesTable salesTable;
        CustInvoiceTable custInvoiceTable;
        SalesQuotationTable salesQuotationTable;
        SalesAgreementHeader salesAgreementHeader;
        // <GEEU>
        CzCustAdvanceInvoiceTable custAdvanceInvoiceTable;
        // </GEEU>

        result = new PrintMgmtNodeInstance();

        // Get the node instance type
        switch (_nodeInstance.parmNodeDefinition().getNodeType())
        {
            case PrintMgmtNodeType::CustInvoiceTable:
                custInvoiceTable = _nodeInstance.parmReferencedTableBuffer();

                 // <GEERU>
                if ((_docType == PrintMgmtDocumentType::SalesFreeTextInvoice
                     || _docType == PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU )
                     && strLen(custInvoiceTable.InvoiceAccount) != 0)
                // </GEERU>
                {
                    result.parmReferencedTableBuffer(custInvoiceTable.selectRefRecord(fieldNum(CustInvoiceTable, InvoiceAccount)));
                }
                else
                {
                    result.parmReferencedTableBuffer(null);
                }

                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::CustTable));
                break;

            case PrintMgmtNodeType::SalesQuotationTable:
                salesQuotationTable = _nodeInstance.parmReferencedTableBuffer();
                if (strLen(salesQuotationTable.CustAccount) != 0)
                {
                    result.parmReferencedTableBuffer(salesQuotationTable.selectRefRecord(fieldNum(SalesQuotationTable, CustAccount)));
                }
                else
                {
                    result.parmReferencedTableBuffer(null);
                }

                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::CustTable));
                break;

            case PrintMgmtNodeType::SalesTable:
                salesTable = _nodeInstance.parmReferencedTableBuffer();

                if (_docType == PrintMgmtDocumentType::SalesOrderInvoice && strLen(salesTable.InvoiceAccount) != 0)
                {
                    result.parmReferencedTableBuffer(salesTable.selectRefRecord(fieldNum(SalesTable, InvoiceAccount)));
                }
                else if (strLen(salesTable.CustAccount) != 0)
                {
                    // For all other document types, just determine if CustAccount is present
                    result.parmReferencedTableBuffer(salesTable.selectRefRecord(fieldNum(SalesTable, CustAccount)));
                }
                else
                {
                    // No specific "instance" present
                    result.parmReferencedTableBuffer(null);
                }

                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::CustTable));

                break;

            case PrintMgmtNodeType::SalesAgreement:
                salesAgreementHeader = _nodeInstance.parmReferencedTableBuffer();
                if (strLen(salesAgreementHeader.CustAccount) != 0)
                {
                    result.parmReferencedTableBuffer(salesAgreementHeader.selectRefRecord(fieldNum(SalesAgreementHeader, CustAccount)));
                }
                else
                {
                    result.parmReferencedTableBuffer(null);
                }

                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::CustTable));
                break;

            // <GEEU>
            case PrintMgmtNodeType::SalesAdvanceInvoice:
                custAdvanceInvoiceTable = _nodeInstance.parmReferencedTableBuffer();

                if (strLen(custAdvanceInvoiceTable.InvoiceAccount) != 0)
                {
                    result.parmReferencedTableBuffer(custAdvanceInvoiceTable.selectRefRecord(fieldNum(CzCustAdvanceInvoiceTable, InvoiceAccount)));
                }
                else if (strLen(custAdvanceInvoiceTable.OrderAccount) != 0)
                {
                    result.parmReferencedTableBuffer(custAdvanceInvoiceTable.selectRefRecord(fieldNum(CzCustAdvanceInvoiceTable, OrderAccount)));
                }
                else
                {
                    // No specific "instance" present
                    result.parmReferencedTableBuffer(null);
                }

                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::CustTable));

                break;
            // </GEEU>

            case PrintMgmtNodeType::CustTable:
                // No record to reference, but there is another node in the hierarchy
                result.parmReferencedTableBuffer(null);
                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::Sales));
                break;

            case PrintMgmtNodeType::Sales:
                // When no parent is present, return null
                result = null;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>