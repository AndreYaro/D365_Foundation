<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailRelatedProductsJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailRelatedProductsJob</c> is a dialog class used to populate the related products.
/// </summary>
/// <remarks>
/// This job will automatically populate related products based on sales transaction purchase history.
/// The two relationships created are 'customers who bought this item also bought' and the 'frequently
/// bought together' relation types.
/// </remarks>
class RetailRelatedProductsJob extends RunBaseBatch implements BatchRetryable
{
    int64 frequentlyBoughtTogetherRecId, customersAlsoBoughtRecId;

    #define.FrequentlyBoughtTogether('FrequentlyBoughtTogether')
    #define.CustomersWhoBoughtThisAlsoBought('CustomersWhoBoughtThisAlsoBought')

    // The minimum number of times a product pair must be bought together
    // before it is considered in the CustomersWhoBoughtThisAlsoBought list.
    #define.CustomersBoughtFrequencyThreshold(15)

    // The threshold used to determine whether a product pairing is elevated
    // into the FrequentlyBoughtTogether list.
    #define.FrequentlyBoughtThresholdPercentage(10)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRelationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new relation type if it does not exist.
    /// </summary>
    /// <param name="relationTypeName">
    /// The name of the relation type.
    /// </param>
    /// <returns>
    /// The record identifier of the relation type.
    /// </returns>
    private int64 createRelationType(Name relationTypeName)
    {
        EcoResProductRelationType relationType;

        select firstOnly RecId from relationType
            where relationType.Name == relationTypeName;

        if (!relationType)
        {
            relationType.Name = relationTypeName;
            relationType.insert();
        }

        return relationType.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRelatedProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the related products for every product based on the frequency table.
    /// </summary>
    private void populateRelatedProducts()
    {
        EcoResProductRelationTable relationTable;
        EcoResProductRelationTable relationTableInner;
        RetailRelatedProductsFrequency frequencyTable;
        RetailRelatedProductsFrequency frequencyTableTmp;
        RetailRelatedProductsFrequency frequencyTableSum;
        RetailRelatedProductsRelationsTmp relatedProductsRelationsTmp;
        EcoResProduct ecoResProduct;
        int64 frequencySum;

        // Iterate over all unique products. Filter out any pairs that do not meet our threshold value.
        while select frequencyTableTmp
            join RecId from ecoResProduct
            group by ecoResProduct.RecId
            where
                frequencyTableTmp.Frequency >= #CustomersBoughtFrequencyThreshold &&
                (ecoResProduct.RecId == frequencyTableTmp.Product1 || ecoResProduct.RecId == frequencyTableTmp.Product2)
        {
            // Calculate the total sum of frequencies for this product.
            select sum(Frequency) from frequencyTableSum
                where
                    frequencyTableSum.Product1 == ecoResProduct.RecId ||
                    frequencyTableSum.Product2 == ecoResProduct.RecId;

            frequencySum = frequencyTableSum.Frequency;

            // Insert 'frequently bought together' relations for P1->P2.
            insert_recordset relatedProductsRelationsTmp (Product1, Product2, ProductRelationType)
                select Product1, Product2, frequentlyBoughtTogetherRecId from frequencyTable
                where
                    frequencyTable.Product1 == ecoResProduct.RecId &&
                    (frequencyTable.Frequency * 100) >= #FrequentlyBoughtThresholdPercentage * frequencySum;

            // Insert 'frequently bought together' relations for P2->P1.
            insert_recordset relatedProductsRelationsTmp (Product1, Product2, ProductRelationType)
                select Product2, Product1, frequentlyBoughtTogetherRecId from frequencyTable
                where
                    frequencyTable.Product2 == ecoResProduct.RecId &&
                    (frequencyTable.Frequency * 100) >= #FrequentlyBoughtThresholdPercentage * frequencySum;

            // Insert 'customers who bought this also bought' relations for P1->P2.
            insert_recordset relatedProductsRelationsTmp (Product1, Product2, ProductRelationType)
                select Product1, Product2, customersAlsoBoughtRecId from frequencyTable
                where
                    frequencyTable.Product1 == ecoResProduct.RecId &&
                    (frequencyTable.Frequency * 100) < #FrequentlyBoughtThresholdPercentage * frequencySum;

            // Insert 'customers who bought this also bought' relations for P2->P1.
            insert_recordset relatedProductsRelationsTmp (Product1, Product2, ProductRelationType)
                select Product2, Product1, customersAlsoBoughtRecId from frequencyTable
                where
                    frequencyTable.Product2 == ecoResProduct.RecId &&
                    (frequencyTable.Frequency * 100) < #FrequentlyBoughtThresholdPercentage * frequencySum;
        }

        // NOTE: If you need to Debug, you can get name for the 'RetailRelatedProductsRelationsTmp' in sql 'tempdb' DB via
        // a call such as the following: str temptableName = RetailUtilities::getPhysicalTableName(relatedProductsRelationsTmp);

        // Update product relation types for FBT and CAB relation types.
        update_recordSet relationTable
            setting ProductRelationType = relatedProductsRelationsTmp.ProductRelationType
            where
                relationTable.ProductRelationType == frequentlyBoughtTogetherRecId ||
                relationTable.ProductRelationType == customersAlsoBoughtRecId
            join relatedProductsRelationsTmp
            where
                relatedProductsRelationsTmp.Product1 == relationTable.Product1 &&
                relatedProductsRelationsTmp.Product2 == relationTable.Product2 &&
                relatedProductsRelationsTmp.ProductRelationType != relationTable.ProductRelationType;

        // Delete any removed relations for FBT and CAB relation types.
        delete_from relationTable
            where
                relationTable.ProductRelationType == frequentlyBoughtTogetherRecId ||
                relationTable.ProductRelationType == customersAlsoBoughtRecId
            notExists join relatedProductsRelationsTmp
            where
                relatedProductsRelationsTmp.Product1 == relationTable.Product1 &&
                relatedProductsRelationsTmp.Product2 == relationTable.Product2;

        // Insert any newly added product relations.
        insert_recordset relationTable (Product1, Product2, ProductRelationType)
            select Product1, Product2, ProductRelationType
            from relatedProductsRelationsTmp
            notExists join relationTableInner
            where
                relationTableInner.Product1 == relatedProductsRelationsTmp.Product1 &&
                relationTableInner.Product2 == relatedProductsRelationsTmp.Product2 &&
                relationTableInner.ProductRelationType == relatedProductsRelationsTmp.ProductRelationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RetailRelatedProductsJobSyncAnchor synchAnchorTable;
        utcDateTime startSyncAnchor = DateTimeUtil::minValue();
        utcDateTime endSyncAnchor = DateTimeUtil::utcNow();

        ttsBegin;
        // Create the relation types if they do not already exists.
        frequentlyBoughtTogetherRecId = this.createRelationType(#FrequentlyBoughtTogether);
        customersAlsoBoughtRecId = this.createRelationType(#CustomersWhoBoughtThisAlsoBought);
        ttsCommit;

        ttsBegin;

        // Calculate the starting synchronization anchor. This will be the last
        // time the job completed successfully or minDate() if first execution.
        select firstOnly forUpdate synchAnchorTable;
        if (synchAnchorTable)
        {
            startSyncAnchor = synchAnchorTable.LastSyncAnchor;
        }

        // Update the frequency table with any new transactions that have been
        // created since the last synchronization anchor.
        this.updateFrequencyTable(startSyncAnchor, endSyncAnchor);

        // Based on the updated frequency table, create or update the related
        // product relationships.
        this.populateRelatedProducts();

        // Update the synchronization anchor.
        synchAnchorTable.LastSyncAnchor = endSyncAnchor;
        synchAnchorTable.write();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFrequencyTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the frequency table for transactions that fall within the specified
    /// time interval.
    /// </summary>
    /// <param name="startTime">
    /// The interval start time of sales transactions to consider.
    /// </param>
    /// <param name="endTime">
    /// The interval end time of sales transactions to consider.
    /// </param>
    /// <remarks>
    /// The time window is used to avoid recomputing the frequencies of previous
    /// transactions over and over again. The synchronization anchor is maintained
    /// so we continuously operate on smaller sets of data.
    /// </remarks>
    private void updateFrequencyTable(utcDateTime startTime, utcDateTime endTime)
    {
        InventTable inventTable;
        InventTable inventTableInner;
        RetailTransactionSalesTrans salesTrans;
        RetailTransactionSalesTrans salesTransInner;
        RetailRelatedProductsFrequency frequencyTable;
        RetailRelatedProductsFrequencyTmp tmpTable;

        // Compute all of the frequencies since the last anchor point. The anchor
        // is based on the date/time when the record was created in AX and not when
        // the transaction itself took place.
        insert_recordset tmpTable (Frequency, Product1, Product2)
            select count(RecId) from salesTrans
            join salesTransInner
            group by inventTable.Product, inventTableInner.Product
            where
                salesTrans.transactionId == salesTransInner.transactionId &&
                salesTrans.store == salesTransInner.store &&
                salesTrans.terminalId == salesTransInner.terminalId &&
                salesTrans.itemId < salesTransInner.itemId &&
                salesTrans.createdDateTime >= startTime &&
                salesTrans.createdDateTime < endTime
            join Product from inventTable
                where inventTable.ItemId == salesTrans.itemId
            join Product from inventTableInner
                where inventTableInner.ItemId == salesTransInner.itemId;

        // Update frequencies for existing product pairs.
        update_recordSet frequencyTable
            setting Frequency = frequencyTable.Frequency + tmpTable.Frequency
            join Frequency from tmpTable
            where
                tmpTable.Product1 == frequencyTable.Product1 &&
                tmpTable.Product2 == frequencyTable.Product2;

        // Insert frequencies for new product pairs.
        insert_recordset frequencyTable (Product1, Product2, Frequency)
            select Product1, Product2, Frequency from tmpTable
            notExists join frequencyTable
            where
                frequencyTable.Product1 == tmpTable.Product1 &&
                frequencyTable.Product2 == tmpTable.Product2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@REX4160878";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailRelatedProductsJob scheduler = new RetailRelatedProductsJob();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purge</Name>
				<Source><![CDATA[
    /// <summary>
    /// This function can be used to purge all calculated frequencies. The
    /// synchronization anchor is also reset such that the next time the job
    /// executes, all transactions to date will be evalulated.
    /// </summary>
    public static void purge()
    {
        RetailRelatedProductsJobSyncAnchor syncAnchor;
        RetailRelatedProductsFrequency frequencyTable;

        ttsBegin;
        delete_from syncAnchor;
        delete_from frequencyTable;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailRelatedProductsJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailRelatedProductsJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>