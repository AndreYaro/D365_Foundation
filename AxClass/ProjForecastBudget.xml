<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastBudget</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class ProjForecastBudget extends RunBaseBatch
{
    boolean     includeHour;
    boolean     includeExpenses;
    boolean     includeItem;
    boolean     includeFee;
    boolean     includeOnAccount;

    TransDate   projectFromDate;
    TransDate   projectToDate;
    TransDate   ledgerFromDate;
    TransDate   ledgerToDate;

    QueryRun    queryRun;

    DialogField dialogIncludeHour;
    DialogField dialogIncludeExpenses;
    DialogField dialogIncludeItem;
    DialogField dialogIncludeFee;
    DialogField dialogIncludeOnAccount;

    DialogField dialogProjectFromDate;
    DialogField dialogProjectToDate;
    DialogField dialogLedgerFromDate;
    DialogField dialogLedgerToDate;

    ProjId                  parmProjId;
    ProjInvoiceId           parmProjInvoiceId;
    ResourceRecId           parmResource;
    ResourceCategoryRecId   parmResourceCategory;
    ProjCategoryId          parmProjCategoryId;
    ProjWipId               parmProjWIPId;

    #define.CurrentVersion(3)

    #localmacro.CurrentList
        includeHour,
        includeExpenses,
        includeItem,
        includeFee,
        includeOnAccount,
        projectFromDate,
        projectToDate,
        ledgerFromDate,
        ledgerToDate
     #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAndDisableDatasource</Name>
				<Source><![CDATA[
    boolean checkAndDisableDatasource(Query query, QueryBuildDataSource qbd)
    {
        int         c;
        boolean     canBeDisabled = true;

        for (c = qbd.rangeCount(); c > 0 && canBeDisabled; c--)
        {
            if (qbd.range(c).value())
            {
                canBeDisabled = false;
            }
        }

        for (c = qbd.childDataSourceCount(); c > 0; c--)
        {
            if (qbd.childDataSourceNo(c).table() == tableNum(DimensionAttributeValueSet) 
                || !this.checkAndDisableDatasource(query, qbd.childDataSourceNo(c)))
            {
                canBeDisabled = false;
            }
        }

        if (canBeDisabled)
        {
            qbd.enabled(false);
        }
        else
        {
            qbd.enabled(true);
        }

        return canBeDisabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the AOT.
    /// </remarks>
    public Object dialog()
    {
        #define.one(1)
        #define.two(2)

        Dialog      dialogRunBase;
        DialogGroup fromToDialogGroup,
                dialogProjectDate;

        this.queryRanges();

        dialogRunBase = super();
        dialogRunBase.caption(this.title());

        dialogRunBase = this.dialogGroup1(dialogRunBase);

        if (this.ledgerDates())
        {
            fromToDialogGroup = dialogRunBase.addGroup('');
            fromToDialogGroup.columns(2);
            fromToDialogGroup.frameType(FormFrameType::None);
        }

        dialogProjectDate = dialogRunBase.addGroup("@SYS12896");
        dialogProjectDate.columns(#two);
        dialogProjectDate.frameType(#one);

        dialogRunBase.addGroup("@SYS54242",dialogProjectDate);
        dialogProjectFromDate   = dialogRunBase.addFieldValue(extendedTypeStr(TransDate),projectFromDate,   "@SYS24050","@SYS90467");
        dialogProjectToDate     = dialogRunBase.addFieldValue(extendedTypeStr(TransDate),projectToDate,     "@SYS80934","@SYS90468");

        if (this.ledgerDates())
        {
            dialogRunBase.addGroup("@SYS23410",dialogProjectDate);
            dialogLedgerFromDate    = dialogRunBase.addFieldValue(extendedTypeStr(TransDate),ledgerFromDate, "@SYS24050","@SYS90469");
            dialogLedgerToDate      = dialogRunBase.addFieldValue(extendedTypeStr(TransDate),ledgerToDate,   "@SYS80934","@SYS90470");
        }

        return dialogRunBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogGroup1</Name>
				<Source><![CDATA[
    Dialog dialogGroup1(Dialog dialogRunBase)
    {
        ProjCategoryType    categoryType;

        dialogRunBase.addGroup("@SYS71862");

        if (this.parmCategoryId())
        {
            categoryType    = ProjCategory::find(this.parmCategoryId()).CategoryType;

            switch (categoryType)
            {
                case ProjCategoryType::Revenue:
                    includeHour     = false;
                    includeExpenses = false;
                    includeItem     = false;
                    includeFee      = true;
                    includeOnAccount= false;
                    break;
                case ProjCategoryType::Cost:
                    includeHour     = false;
                    includeExpenses = true;
                    includeItem     = false;
                    includeFee      = false;
                    includeOnAccount= false;
                    break;
                case ProjCategoryType::Item:
                    includeHour     = false;
                    includeExpenses = false;
                    includeItem     = true;
                    includeFee      = false;
                    includeOnAccount= false;
                    break;
                case ProjCategoryType::Hour:
                    includeHour     = true;
                    includeExpenses = false;
                    includeItem     = false;
                    includeFee      = false;
                    includeOnAccount= false;
                    break;
            }
        }

        dialogIncludeHour       = dialogRunBase.addFieldValue(extendedTypeStr(ProjOptionHours),  includeHour,          "@SYS5269",  "@SYS78368");
        dialogIncludeExpenses   = dialogRunBase.addFieldValue(extendedTypeStr(ProjOptionCost),   includeExpenses,      "@SYP4882014", "@SYS78369");
        dialogIncludeItem       = dialogRunBase.addFieldValue(extendedTypeStr(ProjOptionItem),   includeItem,          "@SYS7407",  "@SYS78372");
        dialogIncludeFee        = dialogRunBase.addFieldValue(extendedTypeStr(ProjOptionRevenue),includeFee,           "@SYS9154",  "@SYS78818");
        dialogIncludeOnAccount  = dialogRunBase.addFieldValue(extendedTypeStr(ProjOptionOnAcc),  includeOnAccount,     "@SYS7659",  "@SYS78371");

        if (this.parmCategoryId())
        {
            dialogIncludeHour.enabled(false);
            dialogIncludeExpenses.enabled(false);
            dialogIncludeItem.enabled(false);
            dialogIncludeFee.enabled(false);
            dialogIncludeOnAccount.enabled(false);

            switch (categoryType)
            {
                case ProjCategoryType::Revenue:
                    dialogIncludeFee.enabled(true);
                    break;
                case ProjCategoryType::Cost:
                    dialogIncludeExpenses.enabled(true);
                    break;
                case ProjCategoryType::Item:
                    dialogIncludeItem.enabled(true);
                    break;
                case ProjCategoryType::Hour:
                    dialogIncludeHour.enabled(true);
                    break;
            }
        }

        return dialogRunBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_Cost</Name>
				<Source><![CDATA[
    Num do_Cost(Num transId)
    {
        return  '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_empl</Name>
				<Source><![CDATA[
    Num do_empl(Num transId)
    {
        return  '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_onAcc</Name>
				<Source><![CDATA[
    Num do_onAcc(Num transId)
    {
        return  '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_Revenue</Name>
				<Source><![CDATA[
    Num do_Revenue(Num transId)
    {
        return  '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_sales</Name>
				<Source><![CDATA[
    Num do_sales(Num transId)
    {
        return  '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdCategoryId</Name>
				<Source><![CDATA[
    public FieldId fieldIdCategoryId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdItemId</Name>
				<Source><![CDATA[
    protected FieldId fieldIdItemId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdProjId</Name>
				<Source><![CDATA[
    public FieldId fieldIdProjId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdProjTransType</Name>
				<Source><![CDATA[
    public FieldId fieldIdProjTransType()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdResource</Name>
				<Source><![CDATA[
    protected FieldId fieldIdResource()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdResourceCategory</Name>
				<Source><![CDATA[
    protected FieldId fieldIdResourceCategory()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdTransId</Name>
				<Source><![CDATA[
    public FieldId fieldIdTransId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmProjectFromDate(dialogProjectFromDate.value());
        this.parmProjectToDate(dialogProjectToDate.value());

        if (this.ledgerDates())
        {
            this.parmLedgerFromDate(dialogLedgerFromDate.value());
            this.parmLedgerToDate(dialogLedgerToDate.value());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    void initQuery()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDates</Name>
				<Source><![CDATA[
    boolean ledgerDates()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack = conNull();
        container ret;

        if (queryRun)
        {
            pack = queryRun.pack();
        }

        ret =  [#CurrentVersion, #CurrentList] + [pack];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryId</Name>
				<Source><![CDATA[
    str parmCategoryId(ProjCategoryId _projCategoryId = parmProjCategoryId)
    {
        parmProjCategoryId = _projCategoryId;

        return parmProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeExpenses</Name>
				<Source><![CDATA[
    public boolean parmIncludeExpenses(boolean _includeExpenses = includeExpenses)
    {
        includeExpenses  = _includeExpenses;

        return includeExpenses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeFee</Name>
				<Source><![CDATA[
    public boolean parmIncludeFee(boolean _includeFee = includeFee)
    {
        includeFee  = _includeFee;

        return includeFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeHour</Name>
				<Source><![CDATA[
    public boolean parmIncludeHour(boolean _includeHour = includeHour)
    {
        includeHour  = _includeHour;

        return includeHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeItem</Name>
				<Source><![CDATA[
    public boolean parmIncludeItem(boolean _includeItem = includeItem)
    {
        includeItem  = _includeItem;

        return includeItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeOnAccount</Name>
				<Source><![CDATA[
    public boolean parmIncludeOnAccount(boolean _includeOnAccount = includeOnAccount)
    {
        includeOnAccount  = _includeOnAccount;

        return includeOnAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerFromDate</Name>
				<Source><![CDATA[
    public TransDate parmLedgerFromDate(TransDate _ledgerFromDate = ledgerFromDate)
    {
        ledgerFromDate  = _ledgerFromDate;

        return ledgerFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerToDate</Name>
				<Source><![CDATA[
    public TransDate parmLedgerToDate(TransDate _ledgerToDate = ledgerToDate)
    {
        ledgerToDate  = _ledgerToDate;

        return ledgerToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectFromDate</Name>
				<Source><![CDATA[
    public TransDate parmProjectFromDate(TransDate _projectFromDate = projectFromDate)
    {
        projectFromDate  = _projectFromDate;

        return projectFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectToDate</Name>
				<Source><![CDATA[
    public TransDate parmProjectToDate(TransDate _projectToDate = projectToDate)
    {
        projectToDate  = _projectToDate;

        return projectToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    ProjId parmProjId(ProjId _projId = parmProjId)
    {
        parmProjId = _projId;

        return parmProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceId</Name>
				<Source><![CDATA[
    ProjInvoiceId parmProjInvoiceId(ProjInvoiceId _projInvoiceId = parmProjInvoiceId)
    {
        parmProjInvoiceId = _projInvoiceId;

        return parmProjInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjWIPId</Name>
				<Source><![CDATA[
    ProjWipId parmProjWIPId(ProjWipId _projWipId = parmProjWIPId)
    {
        parmProjWIPId = _projWipId;

        return parmProjWIPId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResource</Name>
				<Source><![CDATA[
    ResourceRecId parmResource(ResourceRecId _resourceRecId = parmResource)
    {
        parmResource = _resourceRecId;
        return parmResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceCategory</Name>
				<Source><![CDATA[
    ResourceCategoryRecId parmResourceCategory(ResourceCategoryRecId _resourceCategoryRecId = parmResourceCategory)
    {
        parmResourceCategory = _resourceCategoryRecId;
        return parmResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressTitle</Name>
				<Source><![CDATA[
    abstract str progressTitle()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    protected void progressUpdate(str text, int idx = 1)
    {
        progress.incCount(1,idx);
        progress.setText(text,idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    protected QueryRun queryBuild()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRanges</Name>
				<Source><![CDATA[
    void queryRanges()
    {
        // clear query from old values if called with "prefixed" values
        if (parmProjId || parmProjInvoiceId || parmProjCategoryId || parmProjWIPId || parmResource!=0 || parmResourceCategory!=0)
        {
            this.queryBuild();
        }

        // fill in old values
        if (parmProjId)
        {
            this.setRange(tableNum(ProjTable),fieldNum(ProjTable,ProjId),parmProjId);
        }

        if (parmProjInvoiceId)
        {
            this.setRange(tableNum(ProjTable),fieldNum(ProjTable,ProjInvoiceProjId),parmProjInvoiceId);
        }

        if (parmResource)
        {
            this.setRange(this.tableId(), this.fieldIdResource(), queryValue(parmResource), RangeStatus::Open);
        }

        if (parmResourceCategory)
        {
            this.setRange(this.tableId(), this.fieldIdResourceCategory(), queryValue(parmResourceCategory), RangeStatus::Open);
        }

        if (parmProjCategoryId)
        {
            this.setRange(this.tableId(), this.fieldIdCategoryId(), parmProjCategoryId, RangeStatus::Open);
        }

        if (parmProjWIPId)
        {
            this.setRange(tableNum(ProjTable),fieldNum(ProjTable,wipProject),parmProjWIPId);
        }

        if (ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Forecasts))
        {
            this.setRange(tableNum(ProjTable), fieldNum(ProjTable, ProjDataSource), SysQuery::value(0), RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// An instance of the <c>QueryRun</c> class.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog and if a select menu item is added to a dialog.
    /// Do not create the instance of the <c>QueryRun</c> class when this method is called. Create it in
    /// the <c>unpack</c> method and the <c>initParmDefault</c> method or use it in the <c>init</c> method
    /// if it is appropriate.
    /// </remarks>
    public QueryRun queryRun()
    {
        if (!queryRun)
        {
            this.queryBuild();
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #avifiles

        Common                  common;
        Num                     newTransId;

        this.initQuery();

        this.progressInit(this.progressTitle(), 0, #AviFormLetter);

        ttsbegin;

        while (queryRun.next())
        {
            common          = queryRun.get(this.tableId());
            newTransId      = '';

            if (common)
            {
                // Project '%1', type '%2'
                this.progressUpdate(strFmt("@SYS82770", common.(this.fieldIdProjId()), common.(this.fieldIdProjTransType())));

                switch (common.(this.fieldIdProjTransType()))
                {
                    case ProjTransType::Revenue :
                        newTransId = this.do_Revenue(common.(this.fieldIdTransId()));
                        break;

                    case ProjTransType::Hour :
                        newTransId = this.do_empl(common.(this.fieldIdTransId()));
                        break;

                    case ProjTransType::Cost :
                        newTransId = this.do_Cost(common.(this.fieldIdTransId()));
                        break;

                    case ProjTransType::Item :
                        if (common.(this.fieldIdProjId()))
                        {
                            newTransId = this.do_sales(common.(this.fieldIdTransId()));
                        }
                        break;

                    case ProjTransType::OnAccount :
                        newTransId = this.do_onAcc(common.(this.fieldIdTransId()));
                        break;

                    default :
                        EventHandlerResult eventResult = new EventHandlerResult();
                        this.runFromTransactionTypeDelegate(common.(this.fieldIdProjTransType()), common, eventResult);
                        
                        if (!eventResult.hasResult())
                        {
                            checkFailed("@SYS6144");
                        }
                        break;
                }
            }
            else
            {
                progress.incCount(1);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFromTransactionTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to be called in the default case within the run() method for executing budget forcasting for custom transaction types.
    /// </summary>
    /// <param name = "_projTransType">The transaction type used for execution.</param>
    /// <param name = "_common">The table buffer used for the budget forecasting.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> instance to be assigned to prior to exiting the method once the work is completed.</param>
    delegate void runFromTransactionTypeDelegate(ProjTransType _projTransType, Common _common, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    /// true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    /// always return false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    QueryBuildRange setRange(TableId tableId, FieldId fieldId, str value, RangeStatus rangeStatus = RangeStatus::Open, boolean _findRange = true)
    {
        QueryBuildRange ret;

        if (this.queryRun().query().dataSourceTable(tableId))
        {
            if (_findRange)
            {
                ret = queryRun.query().dataSourceTable(tableId).findRange(fieldId);
            }

            if (!ret)
            {
                ret = queryRun.query().dataSourceTable(tableId).addRange(fieldId);
            }

            ret.value(value);
            ret.status(rangeStatus);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid instance of the <c>QueryRun</c> class.If you change the return value to false, the
    /// button will not be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    public TableId tableId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>title</Name>
				<Source><![CDATA[
    str title()
    {
        return strFmt("@SYS18885",funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version         = RunBase::getVersion(packedClass);
        container       packedQuery;
        boolean         ret = true;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if ((projectFromDate > projectToDate && projectToDate)
            || (ledgerFromDate > ledgerToDate && ledgerToDate))
        {
            // Invalid date interval
            ret = checkFailed("@SYS91020");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProjForecastBudget construct(ProjBudgetAction action)
    {
        ProjForecastBudget projForecastBudget;

        switch (action)
        {
            case ProjBudgetAction::Copy :
                projForecastBudget = new ProjForecastBudgetCopy();
                break;

            case ProjBudgetAction::Delete :
                projForecastBudget = new ProjForecastBudgetDelete();
                break;

            case ProjBudgetAction::Transfer :
                projForecastBudget = new ProjForecastBudgetTransferToLedger();
                break;
        }

        return projForecastBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    protected static ClassDescription description()
    {
        return strFmt("@SYS18885",funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastCopy</Name>
				<Source><![CDATA[
    public static boolean forecastCopy(
        boolean             _includeHour,
        boolean             _includeExpenses,
        boolean             _includeItem,
        boolean             _includeFee,
        boolean             _includeOnAccount,
        ProjTransDate       _fromDate,
        ProjTransDate       _toDate,
        ForecastModelId     _fromModelId,
        ForecastModelId     _toModelId,
        ProjWipId           _buProjId,
        CategoryId          _buCategoryId,
        ProjId              _projId,
        ProjInvoiceProjId   _projInvoiceProjId)
    {
        boolean ret = false;

        ProjForecastBudgetCopy projForecastBudget = ProjForecastBudget::forecastCopyCreateProjForecastBudgetCopy(
            _includeHour,
            _includeExpenses,
            _includeItem,
            _includeFee,
            _includeOnAccount,
            _fromDate,
            _toDate,
            _fromModelId,
            _toModelId,
            _buProjId,
            _buCategoryId,
            _projId,
            _projInvoiceProjId);

        //set initial filters
        if (_buProjId != "")
        {
            projForecastBudget.setRange(projForecastBudget.tableId(), projForecastBudget.fieldIdProjId(), _buProjId, RangeStatus::Locked);
        }

        if (_buCategoryId != "")
        {
            projForecastBudget.setRange(projForecastBudget.tableId(), projForecastBudget.fieldIdCategoryId(), _buCategoryId, RangeStatus::Locked);
        }

        if (_projId != "")
        {
            projForecastBudget.setRange(tableNum(ProjTable), fieldNum(ProjTable, ProjId), _projId, RangeStatus::Locked);
        }

        if (_projInvoiceProjId != "")
        {
            projForecastBudget.setRange(tableNum(ProjTable), fieldNum(ProjTable, ProjInvoiceProjId), _projInvoiceProjId, RangeStatus::Locked);
        }

        ret = projForecastBudget.validate(null);
        if (ret)
        {
            projForecastBudget.runOperation();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastCopyCreateProjForecastBudgetCopy</Name>
				<Source><![CDATA[
    protected static ProjForecastBudgetCopy forecastCopyCreateProjForecastBudgetCopy(
        boolean             _includeHour,
        boolean             _includeExpenses,
        boolean             _includeItem,
        boolean             _includeFee,
        boolean             _includeOnAccount,
        ProjTransDate       _fromDate,
        ProjTransDate       _toDate,
        ForecastModelId     _fromModelId,
        ForecastModelId     _toModelId,
        ProjWipId           _buProjId,
        CategoryId          _buCategoryId,
        ProjId              _projId,
        ProjInvoiceProjId   _projInvoiceProjId)
    {
        ProjForecastBudgetCopy projForecastBudget = new ProjForecastBudgetCopy();

        //get parameters
        projForecastBudget.parmIncludeHour(_includeHour);
        projForecastBudget.parmIncludeExpenses(_includeExpenses);
        projForecastBudget.parmIncludeItem(_includeItem);
        projForecastBudget.parmIncludeFee(_includeFee);
        projForecastBudget.parmIncludeOnAccount(_includeOnAccount);
        projForecastBudget.parmProjectFromDate(_fromDate);
        projForecastBudget.parmProjectToDate(_toDate);
        projForecastBudget.parmFromForecastModel(_fromModelId);
        projForecastBudget.parmToForecastModel(_toModelId);
        projForecastBudget.parmProjWIPId(_buProjId);
        projForecastBudget.parmCategoryId(_buCategoryId);
        projForecastBudget.parmProjId(_projId);
        projForecastBudget.parmProjInvoiceId(_projInvoiceProjId);

        return projForecastBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastDelete</Name>
				<Source><![CDATA[
    public static boolean forecastDelete(
        boolean             _includeHour,
        boolean             _includeExpenses,
        boolean             _includeItem,
        boolean             _includeFee,
        boolean             _includeOnAccount,
        ProjTransDate       _fromDate,
        ProjTransDate       _toDate,
        ForecastModelId     _modelId,
        ProjWipId           _buProjId,
        CategoryId          _buCategoryId,
        ProjId              _projId,
        ProjInvoiceProjId   _projInvoiceProjId)
    {
        boolean ret = false;

        ProjForecastBudgetDelete projForecastBudget = ProjForecastBudget::forecastDeleteCreateProjForecastBudgetDelete(
            _includeHour,
            _includeExpenses,
            _includeItem,
            _includeFee,
            _includeOnAccount,
            _fromDate,
            _toDate,
            _modelId,
            _buProjId,
            _buCategoryId,
            _projId,
            _projInvoiceProjId);

        //set initial filters
        if (_buProjId != "")
        {
            projForecastBudget.setRange(projForecastBudget.tableId(), projForecastBudget.fieldIdProjId(), _buProjId, RangeStatus::Locked);
        }

        if (_buCategoryId != "")
        {
            projForecastBudget.setRange(projForecastBudget.tableId(), projForecastBudget.fieldIdCategoryId(), _buCategoryId, RangeStatus::Locked);
        }

        if (_projId != "")
        {
            projForecastBudget.setRange(tableNum(ProjTable), fieldNum(ProjTable, ProjId), _projId, RangeStatus::Locked);
        }

        if (_projInvoiceProjId != "")
        {
            projForecastBudget.setRange(tableNum(ProjTable), fieldNum(ProjTable, ProjInvoiceProjId), _projInvoiceProjId, RangeStatus::Locked);
        }

        ret = projForecastBudget.validate(null);
        if (ret)
        {
            projForecastBudget.runOperation();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastDeleteCreateProjForecastBudgetDelete</Name>
				<Source><![CDATA[
    protected static ProjForecastBudgetDelete forecastDeleteCreateProjForecastBudgetDelete(
        boolean             _includeHour,
        boolean             _includeExpenses,
        boolean             _includeItem,
        boolean             _includeFee,
        boolean             _includeOnAccount,
        ProjTransDate       _fromDate,
        ProjTransDate       _toDate,
        ForecastModelId     _modelId,
        ProjWipId           _buProjId,
        CategoryId          _buCategoryId,
        ProjId              _projId,
        ProjInvoiceProjId   _projInvoiceProjId)
    {
        ProjForecastBudgetDelete projForecastBudget = new ProjForecastBudgetDelete();

        //get parameters
        projForecastBudget.parmIncludeHour(_includeHour);
        projForecastBudget.parmIncludeExpenses(_includeExpenses);
        projForecastBudget.parmIncludeItem(_includeItem);
        projForecastBudget.parmIncludeFee(_includeFee);
        projForecastBudget.parmIncludeOnAccount(_includeOnAccount);
        projForecastBudget.parmProjectFromDate(_fromDate);
        projForecastBudget.parmProjectToDate(_toDate);
        projForecastBudget.parmFromForecastModel(_modelId);
        projForecastBudget.parmProjWIPId(_buProjId);
        projForecastBudget.parmCategoryId(_buCategoryId);
        projForecastBudget.parmProjId(_projId);
        projForecastBudget.parmProjInvoiceId(_projInvoiceProjId);

        return projForecastBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastTransfer</Name>
				<Source><![CDATA[
    public static boolean forecastTransfer(
        boolean             _includeProfitAndLoss,
        boolean             _includeWIP,
        boolean             _includePayrollAllocation,
        ProjTransDate       _fromDate,
        ProjTransDate       _toDate,
        TransDate           _ledgerFromDate,
        TransDate           _ledgerToDate,
        ForecastModelId     _modelId,
        BudgetModelHeadId   _budgetModelId,
        boolean             _deleteExistingTrans,
        boolean             _salesCurrency,
        Num                 _number,
        ProjId              _projId,
        ProjInvoiceProjId   _projInvoiceProjId)
    {
        boolean ret = false;

        ProjForecastBudgetTransferToLedger projForecastBudget = ProjForecastBudget::forecastTransferCreateProjForecastBudgetTransferToLedger(
            _includeProfitAndLoss,
            _includeWIP,
            _includePayrollAllocation,
            _fromDate,
            _toDate,
            _ledgerFromDate,
            _ledgerToDate,
            _modelId,
            _budgetModelId,
            _deleteExistingTrans,
            _salesCurrency,
            _number,
            _projId,
            _projInvoiceProjId);

        //set initial filters
        if (_number)
        {
            projForecastBudget.setRange(projForecastBudget.tableId(), projForecastBudget.fieldIdTransId(), _number, RangeStatus::Locked);
        }

        if (_projId != "")
        {
            projForecastBudget.setRange(tableNum(ProjTable), fieldNum(ProjTable, ProjId), _projId, RangeStatus::Locked);
        }

        if (_projInvoiceProjId != "")
        {
            projForecastBudget.setRange(tableNum(ProjInvoiceTable), fieldNum(ProjInvoiceTable, ProjInvoiceProjId), _projInvoiceProjId, RangeStatus::Locked);
        }

        ret = projForecastBudget.validate(null);
        if (ret)
        {
            projForecastBudget.runOperation();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastTransferCreateProjForecastBudgetTransferToLedger</Name>
				<Source><![CDATA[
    protected static ProjForecastBudgetTransferToLedger forecastTransferCreateProjForecastBudgetTransferToLedger(
        boolean             _includeProfitAndLoss,
        boolean             _includeWIP,
        boolean             _includePayrollAllocation,
        ProjTransDate       _fromDate,
        ProjTransDate       _toDate,
        TransDate           _ledgerFromDate,
        TransDate           _ledgerToDate,
        ForecastModelId     _modelId,
        BudgetModelHeadId   _budgetModelId,
        boolean             _deleteExistingTrans,
        boolean             _salesCurrency,
        Num                 _number,
        ProjId              _projId,
        ProjInvoiceProjId   _projInvoiceProjId)
    {
        ProjForecastBudgetTransferToLedger projForecastBudget = new ProjForecastBudgetTransferToLedger();

        //get parameters
        projForecastBudget.parmIncludeProfitAndloss(_includeProfitAndLoss);
        projForecastBudget.parmIncludeWIP(_includeWIP);
        projForecastBudget.parmPayrollAllocation(_includePayrollAllocation);
        projForecastBudget.parmProjectFromDate(_fromDate);
        projForecastBudget.parmProjectToDate(_toDate);
        projForecastBudget.parmLedgerFromDate(_ledgerFromDate);
        projForecastBudget.parmLedgerToDate(_ledgerToDate);
        projForecastBudget.parmFromForecastModel(_modelId);
        projForecastBudget.parmToForecastModel(_budgetModelId);
        projForecastBudget.parmDeleteExistingTrans(_deleteExistingTrans);
        projForecastBudget.parmSalesCurrency(_salesCurrency);
        projForecastBudget.parmProjId(_projId);
        projForecastBudget.parmProjInvoiceId(_projInvoiceProjId);

        return projForecastBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        #define.star('*')

        ProjForecastBudget  projForecastBudget;

        if (args && args.parmEnumType() == enumNum(ProjBudgetAction))
        {
            projForecastBudget = ProjForecastBudget::construct(args.parmEnum());

            if ( args.record())
            {
                switch (args.record().TableId)
                {
                    case tableNum(ProjTable) :
                        projForecastBudget.parmProjId( args.record().(fieldNum(ProjTable, ProjId)) + #star);
                        break;

                    case tableNum(ProjInvoiceTable) :
                        projForecastBudget.parmProjInvoiceId( args.record().(fieldNum(ProjInvoiceTable, ProjInvoiceProjId)));
                        break;

                    case tableNum(HcmWorker) :
                        projForecastBudget.parmResource( ResourceFacade::findByWorker(args.record().(fieldNum(HcmWorker, RecId))));
                        break;

                    case tableNum(ResourceView) :
                        projForecastBudget.parmResource( args.record().(fieldNum(ResourceView, RecId)));
                        break;

                    case tableNum(ResourceCategoryView) :
                        projForecastBudget.parmResourceCategory( args.record().(fieldNum(ResourceCategoryView, RecId)));
                        break;

                    case tableNum(ProjWIPTable) :
                        projForecastBudget.parmProjWIPId( args.record().(fieldNum(ProjWIPTable, ProjId)));
                        break;

                    case tableNum(ProjCategory) :
                        projForecastBudget.parmCategoryId(args.record().(fieldNum(ProjCategory, CategoryId)));
                        break;
                }
            }

            if (projForecastBudget && projForecastBudget.prompt())
            {
                projForecastBudget.runOperation();
            }
        }
        else
        {
            // ProjForecastBudget.main is not called correctly.
            throw error("@SYS86826");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferQuoteLines</Name>
				<Source><![CDATA[
    static boolean transferQuoteLines(container _recIds)
    {
        SalesQuotationLine                  salesQuotationLine;
        SalesQuotationLine                  salesQuotationLineTmp;
        ProjForecastTransferFromQuotation   projForecastTransferFromQuotation = new ProjForecastTransferFromQuotation();
        int                                 iterator;
        RecId                               recId;
        boolean                             ret = false;

        salesQuotationLineTmp.setTmp();
        //get RecIds from container
        for (iterator=1;iterator<=conLen(_recIds);iterator++)
        {
            recId = any2int64(conPeek(_recIds, iterator));
            select salesQuotationLine where salesQuotationLine.RecId == recId;
            salesQuotationLineTmp.data(salesQuotationLine.data());
            salesQuotationLineTmp.doInsert();
        }
        if (salesQuotationLineTmp)
        {
            projForecastTransferFromQuotation.initParameters(salesQuotationLineTmp);
            projForecastTransferFromQuotation.transfer();
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransTypeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build up the range value.
    /// </summary>
    /// <returns>A range value as a string for all the transaction types.</returns>
    protected str setTransTypeRange()
    {
        str transTypeRange;

        if (includeFee)
        {
            transTypeRange = Global::queryRangeConcat(transTypeRange, queryValue(ProjTransType::Revenue));
        }

        if (includeHour)
        {
            transTypeRange = Global::queryRangeConcat(transTypeRange, queryValue(ProjTransType::Hour));
        }

        if (includeExpenses)
        {
            transTypeRange = Global::queryRangeConcat(transTypeRange, queryValue(ProjTransType::Cost));
        }

        if (includeItem)
        {
            transTypeRange = Global::queryRangeConcat(transTypeRange, queryValue(ProjTransType::Item));
        }

        if (includeOnAccount)
        {
            transTypeRange = Global::queryRangeConcat(transTypeRange, queryValue(ProjTransType::OnAccount));
        }

        return transTypeRange;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>