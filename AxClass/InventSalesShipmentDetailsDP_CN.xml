<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSalesShipmentDetailsDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesShipmentDetailsReportDP</c> class is the Report Data Provider class for the<c>SalesShipmentDetailsReportDP</c> Overview Report.
/// </summary>
/// <remarks>
/// This is the RDP class for the Inventory <c>SalesShipmentDetailsReportDP</c> SRS Report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(InventSalesShipmentDetailsContract_CN))
]
class InventSalesShipmentDetailsDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    //TMP table and contract class
    InventSalesShipmentDetailsTmp_CN        salesShipmentDetailsTmp_CN;
    InventSalesShipmentDetailsContract_CN   contract;

    SalesLine                       salesLine;
    InventTrans                     inventTrans;
    CustInvoiceTrans                custInvoiceTrans;
    DirPartyTable                   dirPartyTable;
    InventDim                       inventDim;

    #define.Percent(100)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSalesShipmentDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>SalesShipmentDetailsReport</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>SalesShipmentDetailsReport</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(InventSalesShipmentDetailsTmp_CN))
    ]
    public InventSalesShipmentDetailsTmp_CN getSalesShipmentDetailsTmp()
    {
        select salesShipmentDetailsTmp_CN;
        return salesShipmentDetailsTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSalesShipmentDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    public void initInventSalesShipmentDetailsTmp()
    {
        DateFinancial           dateFinancial;
        SalesUnit               salesUnit;
        TaxItemGroup            taxItemGroup;
        TaxGroup                taxGroup;
        CurrencyCode            currencyCode;
        LineAmount              lineAmount;
        SalesQty                salesQty;
        SalesLineDisc           salesLineDics;
        SalesLinePercent        salesLinePercent;
        SalesPrice              salesPrice;

        boolean isIncludeTax = false;
        SalesTable salesTable = SalesTable::find(salesLine.SalesId);

        salesShipmentDetailsTmp_CN.PackingSlipId = inventTrans.PackingSlipId;
        salesShipmentDetailsTmp_CN.TransDate     = inventTrans.DatePhysical;
        salesShipmentDetailsTmp_CN.SalesUnitId   = salesLine.SalesUnit;
        salesShipmentDetailsTmp_CN.SalesMan      = DirPartyTable::findRec(HcmWorker::find(salesTable.WorkerSalesResponsible).Person).Name;
        salesShipmentDetailsTmp_CN.CustAccount   = salesLine.CustAccount;
        salesShipmentDetailsTmp_CN.CustomerName  = dirPartyTable.Name;
        salesShipmentDetailsTmp_CN.SiteId        = InventDim::find(inventTrans.inventDimId).InventSiteId;
        salesShipmentDetailsTmp_CN.Warehouse     = InventDim::find(inventTrans.inventDimId).InventLocationId;
        salesShipmentDetailsTmp_CN.ItemId        = salesLine.ItemId;
        salesShipmentDetailsTmp_CN.ItemName      = InventTable::find(salesLine.ItemId).itemName();
        salesShipmentDetailsTmp_CN.Qty           = - inventTrans.Qty;

        if (!inventTrans.DateFinancial)
        {
            //Get SalesLine datas
            dateFinancial       = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            salesUnit           = salesLine.SalesUnit;
            taxItemGroup        = salesLine.TaxItemGroup;
            taxGroup            = salesLine.TaxGroup;
            currencyCode        = salesLine.CurrencyCode;
            lineAmount          = salesLine.LineAmount;
            salesQty            = salesLine.SalesQty;
            salesLineDics       = salesLine.LineDisc;
            salesLinePercent    = salesLine.LinePercent;
            salesPrice          = salesLine.SalesPrice;

            //Judges whether the sales order include the tax
            isIncludeTax    = salesTable.InclTax;
        }
        else
        {
            //Get CustInvoiceTrans datas
            dateFinancial       = inventTrans.DateFinancial;
            salesUnit           = custInvoiceTrans.SalesUnit;
            taxItemGroup        = custInvoiceTrans.TaxItemGroup;
            taxGroup            = custInvoiceTrans.TaxGroup;
            currencyCode        = custInvoiceTrans.CurrencyCode;
            lineAmount          = custInvoiceTrans.LineAmount;
            salesQty            = custInvoiceTrans.Qty;
            salesLineDics       = custInvoiceTrans.LineDisc;
            salesLinePercent    = custInvoiceTrans.LinePercent;
            salesPrice          = custInvoiceTrans.SalesPrice;
        }
        //UnitConvert ,From CustInvoiceTrans/SalesLine to InventTableModule
        salesQty = InventTableModule::unitConvert(salesLine.ItemId, 
                                                  ModuleInventPurchSales::Invent, 
                                                  salesUnit, 
                                                  salesQty,
                                                  salesLine.InventDimId);

        salesShipmentDetailsTmp_CN.NetAmount = salesQty == 0 ? lineAmount : (- inventTrans.Qty * lineAmount / salesQty);

        //Calculate tax value
        if (isIncludeTax == false)
        {
            salesShipmentDetailsTmp_CN.TaxAmount = Tax::calcTaxAmount(taxGroup, taxItemGroup, dateFinancial, currencyCode, salesShipmentDetailsTmp_CN.NetAmount, TaxModuleType::Sales);
        }
        else
        {
            isIncludeTax = NoYes::No;
            //Get the BaseAmount when the LineAmount includes taxes in order table.
            SalesShipmentDetailsTmp_CN.TaxAmount    = salesShipmentDetailsTmp_CN.NetAmount - salesLine.amountExclTax(salesShipmentDetailsTmp_CN.NetAmount, salesQty, dateFinancial);
            salesShipmentDetailsTmp_CN.NetAmount    = salesLine.amountExclTax(salesShipmentDetailsTmp_CN.NetAmount, salesQty, dateFinancial);
        }
        salesShipmentDetailsTmp_CN.Amount           = salesShipmentDetailsTmp_CN.TaxAmount + salesShipmentDetailsTmp_CN.NetAmount;
        salesShipmentDetailsTmp_CN.UnitPriceInclTax = inventTrans.Qty == 0 ? salesShipmentDetailsTmp_CN.Amount : (salesShipmentDetailsTmp_CN.Amount / salesShipmentDetailsTmp_CN.Qty);
        salesShipmentDetailsTmp_CN.DiscountAmount   = salesShipmentDetailsTmp_CN.Qty * (salesPrice - salesLineDics) * salesLinePercent / #Percent;
        salesShipmentDetailsTmp_CN.ReturnFlag       = inventTrans.Qty > 0 ? NoYes::Yes : NoYes::No;

        salesShipmentDetailsTmp_CN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        //Initial Contract class
        contract = this.parmDataContract() as InventSalesShipmentDetailsContract_CN;
        //Initialize query by data contract parameters
        Query query = new Query(queryStr(InventSalesShipmentDetails_CN));
        query = InventSalesShipmentDetailsDP_CN::initQueryByDataContract(query, contract);
        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            inventTrans                     = queryRun.get(tableNum(InventTrans));
            dirPartyTable                   = queryRun.get(tableNum(DirPartyTable));
            salesLine                       = queryRun.get(tableNum(SalesLine));
            custInvoiceTrans                = queryRun.get(tableNum(CustInvoiceTrans));
            inventDim                       = queryRun.get(tableNum(InventDim));

            this.initInventSalesShipmentDetailsTmp();
        }

        select firstOnly forUpdate RecId from salesShipmentDetailsTmp_CN;
        if (!salesShipmentDetailsTmp_CN.RecId)
        {
            salesShipmentDetailsTmp_CN.clear();
            salesShipmentDetailsTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryByDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize query by data contract parameters
    /// </summary>
    /// <param name="_query">
    /// Primary query
    /// </param>
    /// <param name="_contract">
    /// Data contract
    /// </param>
    /// <returns>
    /// Return the query which filtered by data contract parameters.
    /// </returns>
    static Query initQueryByDataContract(
        Query                                   _query,
        InventSalesShipmentDetailsContract_CN   _contract)
    {
        //Get parameters from Contract
        ItemId           itemId           = _contract.parmItemId();
        InventLocationId inventLocationId = _contract.parmInventLocationId();
        smmSalesUnitId   salesUnitId      = _contract.parmSalesUnitId();
        TransDate        fromDate         = _contract.parmFromDate();
        TransDate        toDate           = _contract.parmToDate();

        //Execute the Query and Select all the fields from the Query
        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(SalesLine)),
            fieldNum(SalesLine, ItemId)).value(itemId);
        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(InventDim)),
            fieldNum(InventDim, InventLocationId)).value(inventLocationId);
        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(SalesLine)),
            fieldNum(SalesLine, SalesUnit)).value(salesUnitId);
        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(InventTrans)),
            fieldNum(InventTrans, DatePhysical)).value(queryRange(fromDate, toDate));

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>