<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymFeeCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankPaymFeeCancel</c> class processes bank fees generated as part of a payment.
/// </summary>
public class BankPaymFeeCancel
{
    LedgerVoucher ledgerVoucher;
    LedgerVoucherObject ledgerVoucherObject;
    BankAccountTrans bankAccountPaymentToCancel;
    CustTrans custTransToCancel;
    ReasonRefRecID reasonRefRecID;
    TransDate cancelDate;
    BankPaymCancelType bankPaymCancelType;
    ReasonComment           reasonComment;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelCustPaymentBankFees</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels any related fees for the <c>BankAccountTrans</c> currently being cancelled.
    /// </summary>
    public void cancelCustPaymentBankFees()
    {
        BankDeposit bankDeposit;
        BankAccountTrans bankAccountFeeToCancel;
        BankAccountTrans cancellingBankAccountFee;
        CustVendPaymJournalFee  paymentJournalFee;

        while select forUpdate * from bankAccountFeeToCancel
            where bankAccountFeeToCancel.Voucher == bankAccountPaymentToCancel.Voucher
                && bankAccountFeeToCancel.TransDate == bankAccountPaymentToCancel.TransDate
                && bankAccountFeeToCancel.Cancel == NoYes::No
            join * from paymentJournalFee
                where paymentJournalFee.feeTransRecId == bankAccountFeeToCancel.SourceRecId
                    && paymentJournalFee.RefRecId == bankAccountPaymentToCancel.SourceRecId
                    && paymentJournalFee.Module == ModuleCustVend::Cust
                    && paymentJournalFee.LedgerJournalACType == LedgerJournalACType::Ledger

        {

            if (this.validateFee(bankAccountFeeToCancel))
            {
                bankPaymCancelType = BankPaymCancelType::construct(custTransToCancel,
                    bankDeposit,
                    paymentJournalFee,
                    bankAccountFeeToCancel,
                    reasonRefRecID,
                    ledgerVoucher,
                    ledgerVoucherObject);

                cancellingBankAccountFee = bankPaymCancelType.createCancellingBankTrans();

                bankPaymCancelType.createCancellingPaymentLedgerTrans(this.getFeeGeneralJournalAccount(bankAccountFeeToCancel), bankAccountFeeToCancel.PaymReference);

                bankPaymCancelType.createCancellingOffsetLedgerTrans(this.getOffsetToCancelledFeeGeneralJournal(bankAccountFeeToCancel), bankAccountFeeToCancel.PaymReference, cancellingBankAccountFee.RecId, cancellingBankAccountFee.TableId);

                // For non prepayments the taxes on the fee must be cancelled as part of cancelling the fee
                this.reverseTaxesOnFee(bankAccountFeeToCancel.SourceRecId, bankAccountFeeToCancel.SourceTableId, cancellingBankAccountFee.RecId, cancellingBankAccountFee.TableId);

                bankAccountFeeToCancel.ReasonRefRecID = ReasonTableRef::checkCreateInCompany(reasonRefRecID, bankAccountPaymentToCancel.DataAreaId);
                bankAccountFeeToCancel.update();

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeeGeneralJournalAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the general journal transaction for the fee bank transaction.
    /// </summary>
    /// <param name="_bankAccountFeeToCancel">
    /// The bank account fee being cancelled.
    /// </param>
    /// <returns>
    /// The <c>GeneralJournalAccountEntry</c> table record ID of the bank fee.
    /// </returns>
    protected RecId getFeeGeneralJournalAccount(BankAccountTrans _bankAccountFeeToCancel)
    {
        BankPaymCancelLedgerAcctType bankPaymCancelLedgerAcctType;
        CustVendPaymJournalFee  paymentJournalFee;

        bankPaymCancelLedgerAcctType = BankPaymCancelLedgerAcctType::construct(paymentJournalFee,
            _bankAccountFeeToCancel);

        return bankPaymCancelLedgerAcctType.retrieveCashGeneralJournalAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetToCancelledFeeGeneralJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the general journal transaction that offsets the fee bank transaction.
    /// </summary>
    /// <param name="_bankAccountFeeToCancel">
    /// The bank account fee being cancelled.
    /// </param>
    /// <returns>
    /// The <c>GeneralJournalAccountEntry</c> ID of the offset to the bank fee.
    /// </returns>
    protected Recid getOffsetToCancelledFeeGeneralJournal(BankAccountTrans _bankAccountFeeToCancel)
    {
        BankPaymCancelLedgerAcctType bankPaymCancelLedgerAcctType;
        CustVendPaymJournalFee  paymentJournalFee;

        bankPaymCancelLedgerAcctType = BankPaymCancelLedgerAcctType::construct(paymentJournalFee,
            _bankAccountFeeToCancel);

        return bankPaymCancelLedgerAcctType.retrieveOffsetToCancelGeneralJournal();

    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables to the values provided.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The ledger voucher object containing the journal information for the cancelled payment.
    /// </param>
    /// <param name="_ledgerVoucherObject">
    /// The ledger voucher object to add the fee adjustments too.
    /// </param>
    /// <param name="_bankAccountPaymentToCancel">
    /// The <c>BankAccountTrans</c> record of the payment being cancelled.
    /// </param>
    /// <param name="_custTrans">
    /// The customer transaction being cancelled.
    /// </param>
    /// <param name="_reasonRefRecId">
    /// The reason the payment is being cancelled.
    /// </param>
    /// <param name="_reasonComment">
    /// The comment for the reason the payment is being cancelled.
    /// </param>
    public void init(LedgerVoucher _ledgerVoucher,
        LedgerVoucherObject _ledgerVoucherObject,
        BankAccountTrans _bankAccountPaymentToCancel,
        CustTrans _custTrans,
        ReasonRefRecID _reasonRefRecId,
        ReasonComment _reasonComment)
    {
        bankAccountPaymentToCancel = _bankAccountPaymentToCancel;
        custTransToCancel = _custTrans;
        reasonRefRecID = _reasonRefRecId;
        cancelDate = _ledgerVoucherObject.parmAccountingDate();
        ledgerVoucher = _ledgerVoucher;
        ledgerVoucherObject = _ledgerVoucherObject;
        ReasonComment = _reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTaxesOnFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses taxes corresponding to a canceled fee.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The record ID of the source of the fee which matches to specific tax transactions.
    /// </param>
    /// <param name="_sourceTableId">
    /// The table ID of the source of the fee which matches to specific tax transactions.
    /// </param>
    /// <param name="_cancellingSourceRecId">
    /// The record ID of the source of the cancelling fee which new taxes are to relate to.
    /// </param>
    /// <param name="_cancellingSourceTableId">
    /// The table ID of the source of the cancelling fee which new taxes are to relate to.
    /// </param>
    protected void reverseTaxesOnFee(RefRecId _sourceRecId, RefTableId _sourceTableId, RefRecId _cancellingSourceRecId, RefTableId _cancellingSourceTableId)
    {
        TaxReverseTax reverseTax;
        LedgerPostingController controller;

        reverseTax = new TaxReverseTax(
                        ledgerVoucher.lastVoucher(),
                        cancelDate,
                        reasonComment);

        reverseTax.setRestrictionRecId(_sourceRecId);
        reverseTax.setRestrictionTableId(_sourceTableId);
        reverseTax.setReverseRecId(_cancellingSourceRecId);
        reverseTax.setReverseTableId(_cancellingSourceTableId);

        controller = LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher);

        reverseTax.calcAndPost(controller, bankAccountPaymentToCancel.Voucher, bankAccountPaymentToCancel.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the payment fee can be cancelled.
    /// </summary>
    /// <param name="_bankAccountFee">
    /// The <c>BankAccountTrans</c> record to validate.
    /// </param>
    /// <returns>
    /// true if the payment fee can be cancelled; otherwise, false.
    /// </returns>
    protected boolean validateFee(BankAccountTrans _bankAccountFee)
    {
        boolean isValid = true;
        CustVendPaymJournalFee  paymentFee;

        // If the fee is reconciled warn but continue
        if (_bankAccountFee.Reconciled == NoYes::Yes)
        {
            select firstOnly FeeId from paymentFee
                where paymentFee.feeTransRecId == _bankAccountFee.SourceRecId;

            isValid = checkFailed(strFmt("@SYS4003517", paymentFee.FeeId));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankPaymFeeCancel</c> class to support cancelling of any <c>BankAccountTrans</c> fee records.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The <c>LedgerVoucher</c> object journal entries need to be added to.
    /// </param>
    /// <param name="_ledgerVoucherObject">
    /// The voucher object needed to create a record for the voucher entry.
    /// </param>
    /// <param name="_bankAccountPaymentToCancel">
    /// The <c>BankAccountTrans</c> record being cancelled.
    /// </param>
    /// <param name="_reasonRefRecId">
    /// The record ID of the reason code selected for the cancellation.
    /// </param>
    /// <param name="_custTrans">
    /// The <c>CustTrans</c> record being cancelled.
    /// </param>
    /// <param name="_reasonComment">
    /// The comment for the reason the payment is being cancelled.
    /// </param>
    /// <returns>
    /// An instance of the class.
    /// </returns>
    public static BankPaymFeeCancel construct(LedgerVoucher _ledgerVoucher,
        LedgerVoucherObject _ledgerVoucherObject,
        BankAccountTrans _bankAccountPaymentToCancel,
        ReasonRefRecID _reasonRefRecId,
        CustTrans _custTrans,
        ReasonComment _reasonComment)
    {
        BankPaymFeeCancel bankPaymFeeToCancel;

        Debug::assert(_ledgerVoucher != null);
        Debug::assert(_ledgerVoucherObject != null);

        bankPaymFeeToCancel = new BankPaymFeeCancel();
        bankPaymFeeToCancel.init(_ledgerVoucher,
            _ledgerVoucherObject,
            _bankAccountPaymentToCancel,
            _custTrans,
            _reasonRefRecID,
            _reasonComment);

        return bankPaymFeeToCancel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>