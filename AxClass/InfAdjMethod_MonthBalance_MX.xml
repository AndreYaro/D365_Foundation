<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InfAdjMethod_MonthBalance_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InfAdjMethod_MonthBalance_MX</c> class handles the calculation of inflation adjustment for
///    adjustment method Monthly Balance and returns the <c>RepomoReportTmp_MX</c> temporary table buffer
///    to use for posting and reports.
/// </summary>
public class InfAdjMethod_MonthBalance_MX extends InfAdjMethod_MX
{
    int                 diffInMonths;
    container           conTotalPL;
    container           conMonthlyINPC;
    container           conInflationRatio;
    RepomoReportTmp_MX  repomoReportTmp;
    container           conRepomoMonthlyAdjustment;
    MainAccountNum      fromMainAccount;
    MainAccountNum      toMainAccount;

    #InflationAdjustment_MX
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the inflation adjustment for adjustment method Monthly Balance and returns the
    ///    <c>RepomoReportTmp_MX</c> temporary table buffer.
    /// </summary>
    /// <param name="_repomoReportTmp">
    ///    The <c>RepomoReportTmp_MX</c> temporary table buffer to use to calculate the total inflation
    ///    adjustment for adjustment method Monthly Balance.
    /// </param>
    /// <returns>
    ///    The <c>RepomoReportTmp_MX</c> temporary table buffer with inflation adjustment values for
    ///    adjustment method Monthly Balance.
    /// </returns>
    /// <remarks>
    ///    The process considers the monthly INPC and inflation ratio to calculate the inflation adjustment
    ///    for the adjustment method Monthly Balance.
    /// </remarks>
    public Common calculate(Common _repomoReportTmp)
    {
        RepomoReportTmp_MX repomoTmpPL;

        this.getTotalPL(_repomoReportTmp);
        conMonthlyINPC = this.getMonthlyINPC(fromDate, endmth(fromDate), diffInMonths);
        this.getInflationRatio();
        repomoTmpPL = this.populateRepomoTmpWithPLAdjusted(_repomoReportTmp);

        return repomoTmpPL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the functional currency amount.
    /// </summary>
    /// <param name="_startDate">
    /// The From date to consider for the transactions.
    /// </param>
    /// <param name="_endDate">
    /// The To date to consider for the transactions.
    /// </param>
    /// <param name="_mainAccountRecId">
    /// The record ID of the account for which the transactions are retrieved.
    /// </param>
    /// <param name="_periodType">
    /// The Period type that determines the type of transaction.
    /// </param>
    /// <param name="_displayValue">
    /// The display value of the main account that has the combination of dimensions.
    /// </param>
    /// <param name="_considerInfAdj">
    /// A Boolean value that determines whether to consider transactions of posting type inflation
    /// adjustment; optional.
    /// </param>
    /// <returns>
    /// The accounting currency amount for an account and date range, depending on the type of transaction.
    /// </returns>
    protected AmountMSTDebCred getAccountingCurrencyAmount(
        FromDate                _startDate,
        ToDate                  _endDate,
        RecId                   _mainAccountRecId,
        FiscalPeriodType        _periodType,
        DimensionDisplayValue   _displayValue,
        boolean                 _considerInfAdj = false)
    {
        GeneralJournalEntry                     generalJournalEntry;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        DimensionAttributeValueCombination      dimensionAttributeValueCombination;
        FiscalCalendarPeriod                    fiscalCalendarPeriod;

        select sum(AccountingCurrencyAmount) from generalJournalAccountEntry
            where generalJournalAccountEntry.PostingType                != LedgerPostingType::InflationAdjustment_MX
            join RecId, DisplayValue from dimensionAttributeValueCombination
                group by dimensionAttributeValueCombination.DisplayValue
                where dimensionAttributeValueCombination.RecId          == generalJournalAccountEntry.LedgerDimension
                   && dimensionAttributeValueCombination.MainAccount    == _mainAccountRecId
                   && dimensionAttributeValueCombination.DisplayValue   == _displayValue
            join RecId from generalJournalEntry
                where generalJournalAccountEntry.GeneralJournalEntry    == generalJournalEntry.RecId
                   && generalJournalEntry.Ledger                        == Ledger::current()
                   && generalJournalEntry.AccountingDate                >= _startDate
                   && generalJournalEntry.AccountingDate                <= _endDate
            join RecId from fiscalCalendarPeriod
                where generalJournalEntry.FiscalCalendarPeriod          == fiscalCalendarPeriod.RecId
                   && fiscalCalendarPeriod.Type                         == _periodType;

        return generalJournalAccountEntry.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInflationRatio</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the inflation ratio and inserts it into a container.
    /// </summary>
    /// <remarks>
    ///    Calculates the inflation ratio by dividing the INPC of the to date by the monthly INPC.
    /// </remarks>
    private void getInflationRatio()
    {
        int              noOfMonths = 1;
        InpcRate_MX      rateOfToDate;

        rateOfToDate = this.getInflationRate(mthofyr(toDate), year(toDate));

        while (noOfMonths <= diffInMonths)
        {
            conInflationRatio = conins(conInflationRatio, noOfMonths, decround((rateOfToDate / conpeek(conMonthlyINPC, noOfMonths)), 4));
            noOfMonths ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalPL</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total monthly balances per month for profit and loss accounts.
    /// </summary>
    /// <param name="_repomoReportTmpPL">
    ///    The <c>RepomoReportTmp_MX</c> temporary table buffer that has monthly balances of profit and loss
    ///    accounts to use to calculate the total.
    /// </param>
    /// <remarks>
    ///    Selects the summation of monthly balances of profit and loss accounts and inserts it into a
    ///    container.
    /// </remarks>
    private void getTotalPL(RepomoReportTmp_MX _repomoReportTmpPL)
    {
        RepomoReportTmp_MX repomoReportTmpPL;

        repomoReportTmpPL.setTmpData(_repomoReportTmpPL);

        select sum(BalanceMonthTotal),
               sum(BalanceMonth1),
               sum(BalanceMonth2),
               sum(BalanceMonth3),
               sum(BalanceMonth4),
               sum(BalanceMonth5),
               sum(BalanceMonth6),
               sum(BalanceMonth7),
               sum(BalanceMonth8),
               sum(BalanceMonth9),
               sum(BalanceMonth10),
               sum(BalanceMonth11),
               sum(BalanceMonth12)
            from  repomoReportTmpPL
            where repomoReportTmpPL.ReportType == #PL;

        conTotalPL = conins(conTotalPL, 1, repomoReportTmpPL.BalanceMonth1);
        conTotalPL = conins(conTotalPL, 2, repomoReportTmpPL.BalanceMonth2);
        conTotalPL = conins(conTotalPL, 3, repomoReportTmpPL.BalanceMonth3);
        conTotalPL = conins(conTotalPL, 4, repomoReportTmpPL.BalanceMonth4);
        conTotalPL = conins(conTotalPL, 5, repomoReportTmpPL.BalanceMonth5);
        conTotalPL = conins(conTotalPL, 6, repomoReportTmpPL.BalanceMonth6);
        conTotalPL = conins(conTotalPL, 7, repomoReportTmpPL.BalanceMonth7);
        conTotalPL = conins(conTotalPL, 8, repomoReportTmpPL.BalanceMonth8);
        conTotalPL = conins(conTotalPL, 9, repomoReportTmpPL.BalanceMonth9);
        conTotalPL = conins(conTotalPL, 10, repomoReportTmpPL.BalanceMonth10);
        conTotalPL = conins(conTotalPL, 11, repomoReportTmpPL.BalanceMonth11);
        conTotalPL = conins(conTotalPL, 12, repomoReportTmpPL.BalanceMonth12);
        conTotalPL = conins(conTotalPL, 13, repomoReportTmpPL.BalanceMonthTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRepomoTmpBalanceFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the monthly balance of accounts into the temporary table for each month.
    /// </summary>
    /// <param name="_currentMonth">
    ///    The current month indicator to use to specify which field to use to store the monthly balance of
    ///    accounts.
    /// </param>
    /// <param name="_amount">
    ///    The monthly balance of accounts.
    /// </param>
    /// <remarks>
    ///    This method is used in the <c>populateTmpTable</c> method to insert the value of the monthly
    ///    balances into the respective fields in the temporary table, based on the month indicator.
    /// </remarks>
    private void initRepomoTmpBalanceFields(
        int     _currentMonth,
        Amount  _amount)
    {
        switch (_currentMonth)
        {
            case 1:
                repomoReportTmp.BalanceMonth1 =_amount;
                break;
            case 2:
                repomoReportTmp.BalanceMonth2 = _amount;
                break;
            case 3:
                repomoReportTmp.BalanceMonth3 = _amount;
                break;
            case 4:
                repomoReportTmp.BalanceMonth4 = _amount;
                break;
            case 5:
                repomoReportTmp.BalanceMonth5 = _amount;
                break;
            case 6:
                repomoReportTmp.BalanceMonth6 = _amount;
                break;
            case 7:
                repomoReportTmp.BalanceMonth7 = _amount;
                break;
            case 8:
                repomoReportTmp.BalanceMonth8 = _amount;
                break;
            case 9:
                repomoReportTmp.BalanceMonth9 = _amount;
                break;
            case 10:
                repomoReportTmp.BalanceMonth10 = _amount;
                break;
            case 11:
                repomoReportTmp.BalanceMonth11 = _amount;
                break;
            case 12:
                repomoReportTmp.BalanceMonth12 = _amount;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConRepomoMonthlyAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="conRepomoMonthlyAdjustment" /> parameter.
    /// </summary>
    /// <param name="_conRepomoMonthlyAdjustment">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="conRepomoMonthlyAdjustment" /> parameter.
    /// </returns>
    public container parmConRepomoMonthlyAdjustment(container _conRepomoMonthlyAdjustment = conRepomoMonthlyAdjustment)
    {
        conRepomoMonthlyAdjustment = _conRepomoMonthlyAdjustment;

        return conRepomoMonthlyAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiffInMonths</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="diffInMonths" /> parameter.
    /// </summary>
    /// <param name="_diffInMonths">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="diffInMonths" /> parameter.
    /// </returns>
    public int parmDiffInMonths(int _diffInMonths = diffInMonths)
    {
        diffInMonths = _diffInMonths;

        return diffInMonths;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="fromMainAccount" /> parameter.
    /// </summary>
    /// <param name="_fromMainAccount">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="fromMainAccount" /> parameter.
    /// </returns>
    public MainAccountNum parmFromMainAccount(MainAccountNum _fromMainAccount = fromMainAccount)
    {
        fromMainAccount = _fromMainAccount;

        return fromMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="toMainAccount" /> parameter.
    /// </summary>
    /// <param name="_toMainAccount">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="toMainAccount" /> parameter.
    /// </returns>
    public MainAccountNum parmToMainAccount(MainAccountNum _toMainAccount = toMainAccount)
    {
        toMainAccount = _toMainAccount;

        return toMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRepomoTmpWithPLAdjusted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the inflation adjustment for profit and loss accounts.
    /// </summary>
    /// <param name="_repomoTmp">
    ///    The temporary table <c>RepomoReportTmp_MX</c> buffer with monthly balances of profit and loss
    ///    accounts to calculate the inflation adjustment.
    /// </param>
    /// <returns>
    ///    The <c>RepomoReportTmp_MX</c> temporary table buffer after the inflation adjustment for profit and
    ///    loss accounts is calculated.
    /// </returns>
    /// <remarks>
    ///    Traverses through the <c>RepomoReportTmp_MX</c> temporary table buffer for profit and loss accounts
    ///    and calculates the inflation adjustment and inserts the record into the temporary table with the
    ///    report type set to "Profit and Loss adjustment".
    /// </remarks>
    private RepomoReportTmp_MX populateRepomoTmpWithPLAdjusted(RepomoReportTmp_MX _repomoTmp)
    {
        RepomoReportTmp_MX repomoTmpPLAdjusted;
        RepomoReportTmp_MX repomoTmpPL;

        repomoTmpPLAdjusted.setTmpData(_repomoTmp);
        repomoTmpPL.setTmpData(_repomoTmp);

        while select repomoTmpPLAdjusted
            where repomoTmpPLAdjusted.ReportType == #PL
        {
            repomoTmpPL.clear();
            repomoTmpPL.LedgerDimension = repomoTmpPLAdjusted.LedgerDimension;
            repomoTmpPL.DisplayValue = repomoTmpPLAdjusted.DisplayValue;
            repomoTmpPL.MainAccountName = repomoTmpPLAdjusted.MainAccountName;
            repomoTmpPL.ReportType = #PLAdjust;

            CurrencyCode currencyCode = Ledger::accountingCurrency();

            if (repomoTmpPLAdjusted.BalanceMonth1)
            {
                repomoTmpPL.BalanceMonth1 = CurrencyExchange::round(((repomoTmpPLAdjusted.BalanceMonth1 * conpeek(conInflationRatio, 1)) - repomoTmpPLAdjusted.BalanceMonth1), currencyCode);
            }
            if (repomoTmpPLAdjusted.BalanceMonth2)
            {
                repomoTmpPL.BalanceMonth2 = CurrencyExchange::round(((repomoTmpPLAdjusted.BalanceMonth2 * conpeek(conInflationRatio, 2)) - repomoTmpPLAdjusted.BalanceMonth2), currencyCode);
            }
            if (repomoTmpPLAdjusted.BalanceMonth3)
            {
                repomoTmpPL.BalanceMonth3 = CurrencyExchange::round(((repomoTmpPLAdjusted.BalanceMonth3 * conpeek(conInflationRatio, 3)) - repomoTmpPLAdjusted.BalanceMonth3), currencyCode);
            }
            if (repomoTmpPLAdjusted.BalanceMonth4)
            {
                repomoTmpPL.BalanceMonth4 = CurrencyExchange::round(((repomoTmpPLAdjusted.BalanceMonth4 * conpeek(conInflationRatio, 4)) - repomoTmpPLAdjusted.BalanceMonth4), currencyCode);
            }
            if (repomoTmpPLAdjusted.BalanceMonth5)
            {
                repomoTmpPL.BalanceMonth5 = CurrencyExchange::round(((repomoTmpPLAdjusted.BalanceMonth5 * conpeek(conInflationRatio, 5)) - repomoTmpPLAdjusted.BalanceMonth5), currencyCode);
            }
            if (repomoTmpPLAdjusted.BalanceMonth6)
            {
                repomoTmpPL.BalanceMonth6 = CurrencyExchange::round(((repomoTmpPLAdjusted.BalanceMonth6 * conpeek(conInflationRatio, 6)) - repomoTmpPLAdjusted.BalanceMonth6), currencyCode);
            }
            if (repomoTmpPLAdjusted.BalanceMonth7)
            {
                repomoTmpPL.BalanceMonth7 = CurrencyExchange::round(((repomoTmpPLAdjusted.BalanceMonth7 * conpeek(conInflationRatio, 7)) - repomoTmpPLAdjusted.BalanceMonth7), currencyCode);
            }
            if (repomoTmpPLAdjusted.BalanceMonth8)
            {
                repomoTmpPL.BalanceMonth8 = CurrencyExchange::round(((repomoTmpPLAdjusted.BalanceMonth8 * conpeek(conInflationRatio, 8)) - repomoTmpPLAdjusted.BalanceMonth8), currencyCode);
            }
            if (repomoTmpPLAdjusted.BalanceMonth9)
            {
                repomoTmpPL.BalanceMonth9 = CurrencyExchange::round(((repomoTmpPLAdjusted.BalanceMonth9 * conpeek(conInflationRatio, 9)) - repomoTmpPLAdjusted.BalanceMonth9), currencyCode);
            }
            if (repomoTmpPLAdjusted.BalanceMonth10)
            {
                repomoTmpPL.BalanceMonth10 = CurrencyExchange::round(((repomoTmpPLAdjusted.BalanceMonth10 * conpeek(conInflationRatio, 10)) - repomoTmpPLAdjusted.BalanceMonth10), currencyCode);
            }
            if (repomoTmpPLAdjusted.BalanceMonth11)
            {
                repomoTmpPL.BalanceMonth11 = CurrencyExchange::round(((repomoTmpPLAdjusted.BalanceMonth11 * conpeek(conInflationRatio, 11)) - repomoTmpPLAdjusted.BalanceMonth11), currencyCode);
            }
            if (repomoTmpPLAdjusted.BalanceMonth12)
            {
                repomoTmpPL.BalanceMonth12 = CurrencyExchange::round(((repomoTmpPLAdjusted.BalanceMonth12 * conpeek(conInflationRatio, 12)) - repomoTmpPLAdjusted.BalanceMonth12), currencyCode);
            }
            repomoTmpPL.BalanceMonthTotal = repomoTmpPL.BalanceMonth1 + repomoTmpPL.BalanceMonth2
                                           + repomoTmpPL.BalanceMonth3 + repomoTmpPL.BalanceMonth4
                                           + repomoTmpPL.BalanceMonth5 + repomoTmpPL.BalanceMonth6
                                           + repomoTmpPL.BalanceMonth7 + repomoTmpPL.BalanceMonth8
                                           + repomoTmpPL.BalanceMonth9 + repomoTmpPL.BalanceMonth10
                                           + repomoTmpPL.BalanceMonth11 + repomoTmpPL.BalanceMonth12;

            repomoTmpPL.insert();
        }

        return repomoTmpPL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>RepomoReportTmp_MX</c> temporary table for adjustment method Monthly Balance and also
    ///    considers the calculation of REPOMO.
    /// </summary>
    /// <param name="_fromDate">
    ///    The from date to use to select the range of transactions.
    /// </param>
    /// <param name="_toDate">
    ///    The to date to use to select the range of transactions.
    /// </param>
    /// <returns>
    ///    The <c>RepomoReportTmp_MX</c> temporary table buffer with inflation adjustment values for the
    ///    adjustment method Monthly Balance.
    /// </returns>
    /// <remarks>
    ///    Considers the main accounts and the adjustment method Monthly Balance and inserts the transaction
    ///    balance per month.The process also considers the calculation of REPOMO for the adjustment method
    ///    Monthly Balance.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The main account does not exist for the account that is set as REPOMO in GL parameters or the
    ///    REPOMO account in GL parameters is not selected.
    /// </exception>
    public Common populateTmpTable(
        FromDate  _fromDate,
        ToDate    _toDate)
    {
        FromDate                            startDate;
        ToDate                              endDate;
        MainAccount                         mainAccount;
        int                                 currentMonth;
        LedgerDimensionDefaultAccount       repomoAccount;
        AmountMSTDebCred                    transactionAmount;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        GeneralJournalAccountEntry          generalJournalAccountEntry;

        fromDate = _fromDate;
        toDate   = _toDate;

        diffInMonths = InfAdjValidation_MX::monthDifference(_fromDate, _toDate);

        while select Type, RecId from mainAccount
            where mainAccount.InflationAdjustment_MX
               && mainAccount.AdjustmentMethod_MX == AdjustmentMethod_MX::MonthlyBalance
               && ((!fromMainAccount || mainAccount.MainAccountId >= fromMainAccount)
               && (!toMainAccount || mainAccount.MainAccountId <= toMainAccount))
               && (mainAccount.Type == DimensionLedgerAccountType::ProfitAndLoss
               ||  mainAccount.Type == DimensionLedgerAccountType::Revenue
               ||  mainAccount.Type == DimensionLedgerAccountType::Expense)
        {
            while select DisplayValue, RecId
                from  dimensionAttributeValueCombination
                exists join LedgerDimension from generalJournalAccountEntry
                where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
                   && dimensionAttributeValueCombination.MainAccount == mainAccount.RecId
            {
                repomoReportTmp.LedgerDimension = dimensionAttributeValueCombination.RecId;
                repomoReportTmp.DisplayValue    = dimensionAttributeValueCombination.DisplayValue;
                repomoReportTmp.MainAccountName = MainAccount::getLocalizedName(mainAccount.RecId);

                startDate    = fromDate;
                endDate      = endmth(startDate);
                currentMonth = 1;

                while (currentMonth <= diffInMonths)
                {
                    transactionAmount = this.getAccountingCurrencyAmount(startDate, endDate, mainAccount.RecId, FiscalPeriodType::Operating, dimensionAttributeValueCombination.DisplayValue);

                    this.initRepomoTmpBalanceFields(currentMonth, transactionAmount);

                    startDate = endDate + 1;
                    endDate   = endmth(startDate);
                    currentMonth++;
                }

                repomoReportTmp.BalanceMonthTotal = repomoReportTmp.BalanceMonth1 + repomoReportTmp.BalanceMonth2
                                                  + repomoReportTmp.BalanceMonth3 + repomoReportTmp.BalanceMonth4
                                                  + repomoReportTmp.BalanceMonth5 + repomoReportTmp.BalanceMonth6
                                                  + repomoReportTmp.BalanceMonth7 + repomoReportTmp.BalanceMonth8
                                                  + repomoReportTmp.BalanceMonth9 + repomoReportTmp.BalanceMonth10
                                                  + repomoReportTmp.BalanceMonth11 + repomoReportTmp.BalanceMonth12;
                repomoReportTmp.ReportType = #PL;
                if (repomoReportTmp.BalanceMonthTotal)
                {
                    repomoReportTmp.insert();
                }
            }
        }

        repomoAccount = LedgerParameters::find().RepomoMainAccount_MX;
        if (repomoAccount)
        {
            mainAccount                            = LedgerDimensionFacade::getMainAccountFromLedgerDimension(repomoAccount);
            if (mainAccount)
            {
                repomoReportTmp.LedgerDimension   = LedgerDimensionFacade::serviceCreateLedgerDimension(repomoAccount);
                repomoReportTmp.DisplayValue      = mainAccount.MainAccountId;
                repomoReportTmp.MainAccountName   = mainAccount.localizedName();
                repomoReportTmp.BalanceMonth1     = conpeek(conRepomoMonthlyAdjustment, 2);
                repomoReportTmp.BalanceMonth2     = conpeek(conRepomoMonthlyAdjustment, 3);
                repomoReportTmp.BalanceMonth3     = conpeek(conRepomoMonthlyAdjustment, 4);
                repomoReportTmp.BalanceMonth4     = conpeek(conRepomoMonthlyAdjustment, 5);
                repomoReportTmp.BalanceMonth5     = conpeek(conRepomoMonthlyAdjustment, 6);
                repomoReportTmp.BalanceMonth6     = conpeek(conRepomoMonthlyAdjustment, 7);
                repomoReportTmp.BalanceMonth7     = conpeek(conRepomoMonthlyAdjustment, 8);
                repomoReportTmp.BalanceMonth8     = conpeek(conRepomoMonthlyAdjustment, 9);
                repomoReportTmp.BalanceMonth9     = conpeek(conRepomoMonthlyAdjustment, 10);
                repomoReportTmp.BalanceMonth10    = conpeek(conRepomoMonthlyAdjustment, 11);
                repomoReportTmp.BalanceMonth11    = conpeek(conRepomoMonthlyAdjustment, 12);
                repomoReportTmp.BalanceMonth12    = conpeek(conRepomoMonthlyAdjustment, 13);
                repomoReportTmp.BalanceMonthTotal = repomoReportTmp.BalanceMonth1 + repomoReportTmp.BalanceMonth2
                                                  + repomoReportTmp.BalanceMonth3 + repomoReportTmp.BalanceMonth4
                                                  + repomoReportTmp.BalanceMonth5 + repomoReportTmp.BalanceMonth6
                                                  + repomoReportTmp.BalanceMonth7 + repomoReportTmp.BalanceMonth8
                                                  + repomoReportTmp.BalanceMonth9 + repomoReportTmp.BalanceMonth10
                                                  + repomoReportTmp.BalanceMonth11 + repomoReportTmp.BalanceMonth12;
                repomoReportTmp.ReportType        = #PL;
                if (repomoReportTmp.BalanceMonthTotal)
                {
                    repomoReportTmp.insert();
                }
            }
            else
            {
                throw error("@SYS312852");
            }
        }
        else
        {
            throw error("@SYS312852");
        }

        return repomoReportTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>