<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdWhsInventBatchOnHandCollectionManagement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdWhsInventBatchOnHandCollectionManagement</c> class provides ways to query the on hand collection for batch enabled items in a warehouse.
/// </summary>
public class ProdWhsInventBatchOnHandCollectionManagement
{
    InventTable             item;
    InventDim               inventDimCriteria;
    CreatedTransactionId    ttsId;
    boolean                 sortBatchByProdDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ProdWhsInventBatchOnHandCollectionManagement construct()
    {
        return new ProdWhsInventBatchOnHandCollectionManagement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance from given parameters.
    /// </summary>
    /// <param name = "_inventTable">The <c>InventTable</c> record for which the on hand query shall be run.</param>
    /// <param name = "_inventDimCriteria">The <c>InventDim</c> record on which to look for on hand.</param>
    /// <param name = "_ttsId">The transaction id in which this has been called.</param>
    /// <returns>An instance of the <c>ProdWhsInventOnHandCollectionManagement</c> class.</returns>
    public static ProdWhsInventBatchOnHandCollectionManagement newFromParameters(
        InventTable             _inventTable,
        InventDim               _inventDimCriteria,
        CreatedTransactionId    _ttsId)
    {
        ProdWhsInventBatchOnHandCollectionManagement ret = ProdWhsInventBatchOnHandCollectionManagement::construct();
        ret.parmInventTable(_inventTable);
        ret.parmInventDimCriteria(_inventDimCriteria);
        ret.parmTtsId(_ttsId);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.sortBatchByProdDate = false;
        this.ttsId = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the item.
    /// </summary>
    /// <param name = "_inventTable">The record to set to.</param>
    /// <returns>The item record.</returns>
    public InventTable parmInventTable(InventTable _inventTable = item)
    {
        if (!prmIsDefault(_inventTable))
        {
            item = _inventTable;
            this.parmSortBatchByProdDate(_inventTable.modelGroup().PdsCheck == NoYes::No);
        }
        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the inventDimCriteria.
    /// </summary>
    /// <param name = "_inventDimCriteria">The record to set to.</param>
    /// <returns>The invent dim criteria according to which the on hand is calculated</returns>
    public InventDim parmInventDimCriteria(InventDim _inventDimCriteria = inventDimCriteria)
    {
        if (!prmIsDefault(_inventDimCriteria))
        {
            inventDimCriteria = _inventDimCriteria;
        }
        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTtsId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the transaction id.
    /// </summary>
    /// <param name = "_ttsId">The transaction id to set to.</param>
    /// <returns></returns>
    public CreatedTransactionId parmTtsId(CreatedTransactionId _ttsId = ttsId)
    {
        ttsId = _ttsId;
        return ttsId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSortBatchByProdDate</Name>
				<Source><![CDATA[
    private boolean parmSortBatchByProdDate(boolean _sortBatchByProdDate = sortBatchByProdDate)
    {
        sortBatchByProdDate = _sortBatchByProdDate;
        return sortBatchByProdDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmLocationAndAbove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes location and above dimensions in the reservation hierarchy
    /// </summary>
    /// <returns>The <c>InventDimParm</c> instance.</returns>
    protected InventDimParm initInventDimParmLocationAndAbove()
    {
        return WHSReservationHierarchyInventDimUtil::initInventDimParmLocationAndAbove(this.parmInventTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumeratorForDeepestHierarchyLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enumerator for the on-hand collection on the deepest hierarchy level.
    /// </summary>
    /// <returns>The <c>WHSInventOnHandCollectionEnumerator</c> instance.</returns>
    public WHSInventOnHandCollectionEnumerator getEnumeratorForDeepestHierarchyLevel()
    {
        InventDimParm inventDimParmLocationAndAbove = this.initInventDimParmLocationAndAbove();

        // For batch above location, we need to include all batches unless a batch id was explicitly specified.
        if (!inventDimCriteria.inventBatchId)
        {
            inventDimParmLocationAndAbove.InventBatchIdFlag = NoYes::No;
        }

        WhsReservationHierarchyProvider hierarchyProvider = WHSReservationHierarchyProvider::construct();

        WHSReservationHierarchyLevel hierarchyLevel = hierarchyProvider.getBottomHierarchyLevel(this.parmInventTable());
        
        // If batch is above location, the bottom level is license plate, which will not have a record for non-LP locations.
        // We need to search on location instead.
        if (!hierarchyProvider.itemHasDimensionBelowLicensePlate(this.parmInventTable()) && !WMSLocation::find(inventDimCriteria.WMSLocationId, inventDimCriteria.InventLocationId).whsLocationIsLPControlled())
        {
            hierarchyLevel = hierarchyProvider.getLocationHierarchyLevel(this.parmInventTable());
        }

        WHSInventBatchReserveQueryBuilder whsInventReserveQueryBuilder = WHSInventBatchReserveQueryBuilder::newExcludeSumWithDeltaRecords(this.parmInventTable().ItemId,
                                                                                                                this.parmInventDimCriteria(),
                                                                                                                inventDimParmLocationAndAbove,
                                                                                                                hierarchyLevel,
                                                                                                                this.parmTtsId(),
                                                                                                                false,
                                                                                                                true,
                                                                                                                0,
                                                                                                                true);
        whsInventReserveQueryBuilder.parmSortBatchByProdDate(this.parmSortBatchByProdDate());

        WHSInvBatchReserveDeltaQueryBuilder whsInventReserveDeltaQueryBuilder = WHSInvBatchReserveDeltaQueryBuilder::newFromParameters(this.parmInventTable().ItemId,
                                                                                                               this.parmInventDimCriteria(),
                                                                                                               inventDimParmLocationAndAbove,
                                                                                                               hierarchyLevel,
                                                                                                               this.parmTtsId(),
                                                                                                               false,
                                                                                                               true,
                                                                                                               0,
                                                                                                               true);
        whsInventReserveDeltaQueryBuilder.parmSortBatchByProdDate(this.parmSortBatchByProdDate());

        return WHSInvBatchReserveAndDeltaQryCollection::newFromQueries(whsInventReserveQueryBuilder.buildOnHandQuery(),
                                                                        whsInventReserveQueryBuilder.sumTableId(),
                                                                        whsInventReserveDeltaQueryBuilder.buildOnHandQuery(),
                                                                        whsInventReserveDeltaQueryBuilder.sumTableId(),
                                                                        InventBatchChooser::construct(whsInventReserveDeltaQueryBuilder.parmItemId())).getEnumerator() as WHSInventOnHandCollectionEnumerator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>