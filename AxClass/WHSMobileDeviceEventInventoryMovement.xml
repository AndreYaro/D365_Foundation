<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceEventInventoryMovement</Name>
	<SourceCode>
		<Declaration><![CDATA[
[WHSMobileDeviceEventStrategyFactory(WHSMobileDeviceQueueEventType::InventoryMovement)]
/// <summary>
/// The <c>WHSMobileDeviceEventInventoryMovement</c> class contains the logic processing inventory movement mobile device events.
/// </summary>
internal final class WHSMobileDeviceEventInventoryMovement extends WHSMobileDeviceEvent
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default message state that should be used when creating messages.
    /// </summary>
    /// <returns>The default message state that should be used when creating messages.</returns>
    [Hookable(false)]
    public WHSMobileDeviceQueueMessageState defaultState()
    {
        return WHSMobileDeviceQueueMessageState::Queued;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventTypeDependency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the dependent event type for the mobile device event.
    /// </summary>
    /// <returns>The dependent event type for the mobile device event.</returns>
    [Hookable(false)]
    public WHSMobileDeviceQueueEventType getEventTypeDependency()
    {
        return WHSMobileDeviceQueueEventType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStateOnRelatedMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the message state on the messages associated with the related mobile device event.
    /// </summary>
    /// <param name = "_mobileDeviceQueueMessageCollection">The message collection used when finding the related mobile device event.</param>
    [Hookable(false)]
    public void updateStateOnRelatedMessages(WHSMobileDeviceQueueMessageCollection _mobileDeviceQueueMessageCollection)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes a mobile device event.
    /// </summary>
    /// <param name = "_mobileDeviceQueueMessageCollection">The message collection related to the mobile device event.</param>
    /// <param name = "_batchAffinity">The batch affinity identifying the messages to be processed.</param>
    [Hookable(false)]
    public void processEvent(WHSMobileDeviceQueueMessageCollection _mobileDeviceQueueMessageCollection, WHSMobileDeviceQueueBatchAffinity _batchAffinity)
    {
        WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;
        WHSMobileDeviceQueueInventoryMovementMessage mobileDeviceQueueInventoryMovementMessage;

        select firstonly mobileDeviceQueueMessage 
            where  mobileDeviceQueueMessage.QueueMessageCollectionRecId == _mobileDeviceQueueMessageCollection.RecId
                && mobileDeviceQueueMessage.State == WHSMobileDeviceQueueMessageState::Queued
                && mobileDeviceQueueMessage.BatchAffinity == _batchAffinity
            join mobileDeviceQueueInventoryMovementMessage
                where mobileDeviceQueueInventoryMovementMessage.MobileDeviceQueueMessageRecId == mobileDeviceQueueMessage.RecId;

        if (mobileDeviceQueueMessage && mobileDeviceQueueInventoryMovementMessage)
        {
            ttsbegin;

            var movementParameters = this.createInventMovementParametersFromMessages(mobileDeviceQueueMessage, mobileDeviceQueueInventoryMovementMessage);

            var controller = WHSWorkCreateMovementController::newFromMovementParameters(movementParameters);
            controller.processMovementWork(WHSWorkCreateMovementController::ForceExecuteNow);

            this.deleteMessageCollection(
                _mobileDeviceQueueMessageCollection.Identifier,
                [WHSMobileDeviceQueueEventType::InventoryMovement]
            );

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventMovementParametersFromMessages</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryMovementOperationParameters createInventMovementParametersFromMessages(
        WHSMobileDeviceQueueMessage _mobileDeviceQueueMessage,
        WHSMobileDeviceQueueInventoryMovementMessage _mobileDeviceQueueInventoryMovementMessage)
    {
        var movementParameters = WHSInventoryMovementOperationParameters::construct();

        movementParameters.FromInventDim = InventDim::find(_mobileDeviceQueueInventoryMovementMessage.FromInventDimId);
        movementParameters.ItemId = _mobileDeviceQueueInventoryMovementMessage.ItemId;
        movementParameters.Qty = _mobileDeviceQueueInventoryMovementMessage.Qty;
        movementParameters.Uom = _mobileDeviceQueueInventoryMovementMessage.UOM;
        movementParameters.SelectedValueUom = _mobileDeviceQueueInventoryMovementMessage.SelectedValueUOM;
        movementParameters.ToLocationId = _mobileDeviceQueueInventoryMovementMessage.ToLocationId;
        movementParameters.ToInventStatusId = _mobileDeviceQueueInventoryMovementMessage.ToInventStatusId;
        movementParameters.ToLicensePlateId = _mobileDeviceQueueInventoryMovementMessage.ToLicensePlateId;
        movementParameters.MergeContainerId = _mobileDeviceQueueInventoryMovementMessage.MergeContainerId;
        movementParameters.CapturedWeight = _mobileDeviceQueueInventoryMovementMessage.CapturedWeight;
        movementParameters.ScannedTags = _mobileDeviceQueueInventoryMovementMessage.ScannedTags;
        movementParameters.IsMoveLP = _mobileDeviceQueueInventoryMovementMessage.IsMoveLP;
        movementParameters.IsNestedLPMove = _mobileDeviceQueueInventoryMovementMessage.IsNestedLPMove;
        movementParameters.IsAnchoringConfirmed = _mobileDeviceQueueInventoryMovementMessage.IsAnchoringConfirmed;
        movementParameters.IsAnchoringCheckedInCurrentTransaction = false;   // by intent since may need to re-check. Added for perf reasons.
        movementParameters.IsLocationAndLicensePlateConfirmed = _mobileDeviceQueueInventoryMovementMessage.IsLocationAndLicensePlateConfirmed;
        movementParameters.MenuItemName = _mobileDeviceQueueMessage.MenuItemName;
        movementParameters.UserId = _mobileDeviceQueueMessage.RegisteringUserId;

        return movementParameters;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>