<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvUnreconciledExpenseEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TrvUnreconciledExpenseEventHandler
{
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>TrvPBSMaindata_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler to insert an expense line for an inserted unreconciled credit card expense
    /// </summary>
    /// <param name="sender">a <c>TrvPBSMaindata</c> record</param>
    /// <param name="e">Args object</param>
    [DataEventHandler(tableStr(TrvPBSMaindata), DataEventType::Inserted)]
    public static void TrvPBSMaindata_onInserted(Common sender, DataEventArgs e)
    {
        TrvPBSMaindata trvPBSMaindata = sender as TrvPBSMaindata;

        TrvUnreconciledExpenseHelper::insertExpenseLineFromCreditCard(trvPBSMaindata, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvUnreconciledExpenseTransaction_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler to insert an expense line for an inserted unreconciled expense
    /// </summary>
    /// <param name="sender"a <c>TrvUnreconciledExpenseTransaction</c> record<></param>
    /// <param name="e">Args object</param>
    [DataEventHandler(tableStr(TrvUnreconciledExpenseTransaction), DataEventType::Inserted)]
    public static void TrvUnreconciledExpenseTransaction_onInserted(Common sender, DataEventArgs e)
    {
        TrvUnreconciledExpenseTransaction trvUnreconciledExpenseTransaction = sender as TrvUnreconciledExpenseTransaction;

        // Do not transfer unattached receipts
        if (!trvUnreconciledExpenseTransaction.IsEmpty)
        {
            TrvUnreconciledExpenseHelper::insertExpenseLineFromUnreconciledExpense(trvUnreconciledExpenseTransaction, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvPbsItemizations_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler to insert an itemized expense line after a <c>TrvPBSItemizations</c> record is created.
    /// </summary>
    /// <param name="sender">a <c>TrvPbsItemizations</c> record</param>
    /// <param name="e">Args object</param>
    [DataEventHandler(tableStr(TrvPbsItemizations), DataEventType::Inserted)]
    public static void TrvPbsItemizations_onInserted(Common sender, DataEventArgs e)
    {
        TrvPbsItemizations itemization = sender as TrvPbsItemizations;

        TrvUnreconciledExpenseHelper::insertExpenseItemizationLineFromCreditCard(itemization, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvPBSMaindata_onDeleting</Name>
				<Source><![CDATA[
    // <summary>
    /// Event handler to delete an expense line for an deleted unreconciled credit card expense
    /// </summary>
    /// <param name="sender">
	/// A <c>TrvPBSMaindata</c> record.
	/// </param>
    /// <param name="e">Args object</param>
    [DataEventHandler(tableStr(TrvPBSMaindata), DataEventType::Deleting)]
    public static void TrvPBSMaindata_onDeleting(Common sender, DataEventArgs e)
    {
        TrvPBSMaindata pbsMaindata = sender as TrvPBSMaindata;

        TrvExpTrans existingExpenseLine;
        delete_from existingExpenseLine
            where existingExpenseLine.PBSRecId  == pbsMaindata.RecId
                && existingExpenseLine.ExpNumber == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvPBSMainData_OnWriting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler called as writes are being performed on a <c>TrvPBSMaindata</c> datasource.
    /// </summary>
    /// <param name="sender">The <c>TrvPBsMaindata</c> datasource</param>
    /// <param name="e">Args object</param>
    [FormDataSourceEventHandler(formDataSourceStr(TrvPbsMainDataLines, TrvPBSMainData), FormDataSourceEventType::Writing)]
    public static void TrvPBSMainData_OnWriting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        TrvPBSMaindata trvPBSMaindata = sender.cursor() as TrvPBSMaindata;

		TrvExpTrans trvExpTrans;
        select firstonly forupdate * from trvExpTrans where trvExpTrans.PBSRecId == trvPBSMaindata.RecId;

        if (trvExpTrans.RecId)
        {
            TrvPBSMaindata trvPBSMaindata_orig = trvPBSMaindata.orig();

			// Cost type has changed and does not match cost type on expense line
            if (trvPBSMaindata_orig.CostType != trvPBSMaindata.CostType
				&& trvPBSMaindata.CostType != trvExpTrans.CostType)
            {
                trvExpTrans.updateCostType(TrvCostType::find(trvPBSMaindata.CostType));
            }

			// Payment method has changed and does not match payment method on expense line
            if (trvPBSMaindata_orig.Paymethod != trvPBSMaindata.Paymethod
                && trvPBSMaindata.Paymethod != TrvExpTrans.PayMethod)
            {
                TrvExpTrans::updatePaymentMethod(trvExpTrans.RecId, trvPBSMaindata.Paymethod);
            }
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>