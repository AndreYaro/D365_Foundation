<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTermJob_Illegal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>T:JmgTermJob_illegal</c> class checks whether the input job ID is valid.
/// </summary>
/// <remarks>
///    Instances of this class represent illegal jobs. That is, if either the <c>JmgTermJob::construct</c>
///    method or the <c>JmgTermJob::constructJobTable</c> method is invoked by using an invalid job ID, an
///    instance of this class is returned.
/// </remarks>
class JmgTermJob_Illegal extends JmgTermJob
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initSourceData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the job-based source data into memory. For illegal jobs, no data record is loaded. This
    ///    method is part of the initialization procedure of an instance.
    /// </summary>
    /// <param name="_jmgJobTable">
    ///    The <c>JmgJobTable</c> record with the corresponding job ID.
    /// </param>
    /// <param name="_sourceData">
    ///    If the source data has already been fetched from the database, the source data can be supplied as a
    ///    parameter; optional.
    /// </param>
    /// <remarks>
    ///    For a code example that uses the <c>initSourceData</c> method, see <see cref="M:JmgTermJob.init" />.
    /// </remarks>
    protected void initSourceData(JmgJobTable _jmgJobTable, Common _sourceData = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidJobId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether this instance is based on a valid job ID.
    /// </summary>
    /// <returns>
    ///    true if it is based on a valid jobs ID; otherwise, false.
    /// </returns>
    public boolean isValidJobId()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourRegType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the journal registration type that this type of job corresponds to.
    /// </summary>
    /// <returns>
    ///    <c>JmgJourRegTypeEnum::Empty</c>.
    /// </returns>
    /// <remarks>
    ///    For invalid jobs, this type is the <c>JmgJourRegTypeEnum::Empty</c> enumeration value. For a code
    ///    example that uses the <c>jourRegType</c> method, see <see cref="M:JmgTermJob.jourRegType" />.
    /// </remarks>
    public JmgJourRegType jourRegType()
    {
        JmgJourRegType ret;

        ret = JmgJourRegTypeEnum::Empty;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeFeedback</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates feedback on a job that was started.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker who made the feedback.
    /// </param>
    /// <param name="_regParameters">
    /// An instance of the <see cref="T:JmgRegistrationParameters" /> class that encapsulates the
    /// parameters to the registration.
    /// </param>
    /// <param name="_regDate">
    /// The date that the feedback is made.
    /// </param>
    /// <param name="_regTime">
    /// The time that the feedback is made.
    /// </param>
    /// <remarks>
    /// Invoking this method for illegal jobs does nothing. For a code example that uses the
    /// <c>makeFeedback</c> method, see <see cref="M:JmgTermJob_Prod.makeFeedback" /> .
    /// </remarks>
    public void makeFeedback(JmgWorkerRecId _worker, JmgRegistrationParameters _regParameters, JmgDate _regDate, JmgTime _regTime)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a start job registration or a stop job registration.
    /// </summary>
    /// <param name="_worker">
    ///    The ID of the Worker who is making the registration.
    /// </param>
    /// <param name="_date">
    ///    The date of the registration.
    /// </param>
    /// <param name="_time">
    ///    The time of the registration.
    /// </param>
    /// <param name="_start">
    ///    A Boolean that indicates whether it will be a start or a stop registration; optional.
    /// </param>
    /// <param name="_registrationParameters">
    ///    Additional registration parameters with which to create the registration; optional.
    /// </param>
    /// <param name="_autoStamp">
    ///    A <c>NoYes</c> function that indicates whether this registration is made by an employee enumeration
    ///    value or by some function activated by a supervisor enumeration value; optional.
    /// </param>
    /// <remarks>
    ///    It is impossible to create registrations on an illegal job and this method throws an error when it
    ///    is tried.
    /// </remarks>
    public void makeRegistration(
        JmgWorkerRecId _worker,
        JmgDate _date,
        JmgTime _time,
        boolean _start = true,
        JmgRegistrationParameters _registrationParameters = new JmgRegistrationParameters(),
        NoYes                       _autoStamp = NoYes::No)
    {
        this.registrationError("@SYS39895");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the module from where the job originated.
    /// </summary>
    /// <returns>
    ///    The module where the job originated.
    /// </returns>
    /// <remarks>
    ///    Since an illegal job does not belong to any module, this method throws an error. For a code example
    ///    that uses the <c>module</c> method, see <see cref="M:JmgTermJob.module" />.
    /// </remarks>
    JmgModuleEnum module()
    {
        throw error("@SYS19559");
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedStarted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether the job has been reported as started. An illegal job is never started.
    /// </summary>
    /// <returns>
    ///    false.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>reportedStarted</c> method, see <see
    ///    cref="M:JmgTermJob.reportedStarted" />.
    /// </remarks>
    public boolean reportedStarted()
    {
        boolean ret;

        ret = false;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireFeedbackInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether additional feedback is needed. Illegal jobs never require additional feedback.
    /// </summary>
    /// <param name="_regParameters">
    ///    The registration parameters already given. Optional.
    /// </param>
    /// <returns>
    ///    false.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>requireFeedbackInfo</c> method, see <see
    ///    cref="M:JmgTermJob.requireFeedbackInfo" />.
    /// </remarks>
    public boolean requireFeedbackInfo(JmgRegistrationParameters _regParameters = new JmgRegistrationParameters())
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireStartupInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether any additional startup information is needed. For an illegal job, this is never
    ///    the case.
    /// </summary>
    /// <param name="_regParameters">
    ///    The registration parameters already given. Can be set to NULL.
    /// </param>
    /// <returns>
    ///    false.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>requireStartupInfo</c> method, see <see
    ///    cref="M:JmgTermJob.requireStartupInfo" />.
    /// </remarks>
    public boolean requireStartupInfo(JmgRegistrationParameters _regParameters = new JmgRegistrationParameters())
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the type of registration associated with this job. For the illegal job, this method
    ///    throws an error.
    /// </summary>
    /// <returns>
    ///    The registration type associated with this job.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>signType</c> method, See <see cref="M:JmgTermJob.signType" />.
    /// </remarks>
    JmgSignInOut signType()
    {
        return JmgSignInOut::Job;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides access to the source data record from where the job originated. An invalid job is not
    ///    based on any source record.
    /// </summary>
    /// <returns>
    ///    null.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>sourceData</c> method, see <see cref="JmgTermJob.sourceData
    ///    Method" />.
    /// </remarks>
    public Common sourceData()
    {
        Common ret;

        ret = null;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stampType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the stamp type associated with this job. For an illegal job, this method throws an error.
    /// </summary>
    /// <returns>
    ///    The stamp type associated with this job.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>stampType</c> method, see <see cref="M:JmgTermJob.stampType" />.
    /// </remarks>
    JmgStampTypeEnum stampType()
    {
        return JmgStampTypeEnum::Work;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>