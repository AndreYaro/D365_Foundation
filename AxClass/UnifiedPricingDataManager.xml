<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UnifiedPricingDataManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using PricingEngine = Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine;
using CrtPriceContext = Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.PriceContext;
using CrtCommercePropertyValue = Microsoft.Dynamics.Commerce.Runtime.DataModel.CommercePropertyValue;
using CrtPriceAttributeApplicabilityRule = Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAttributeApplicabilityRule;
using CrtPriceAttributeValueContext = Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAttributeValueContext;
using CrtPriceAttributeDefinition = Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAttributeDefinition;
using CrtPriceComponentCode = Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceComponentCode;
using CrtPriceGroup = Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceGroup;
using CrtPriceTreeSetup = Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceTreeSetup;

/// <summary>
/// The <c>UnifiedPricingDataManager</c> class implements the actual queries for <c>IPricingDataAccessor</c> under unified pricing.
/// These queries search for pricing rules and product details from the AX database.
/// </summary>
public class UnifiedPricingDataManager
    extends RetailPricingDataManager
    implements PricingEngine.IPricingDataAccessorV9
{
    private const str UnifiedPricingFeatureName = 'Dynamics.AX.Application.UnifiedPricingFeature';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RecId _channelRecordId, RetailTransactionId _transactionId, RetailTempOrderItem _tempOrderItem = null, boolean _isTempOrderItemFilled = false)
    {
        super(_channelRecordId, _transactionId, _tempOrderItem, _isTempOrderItemFilled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// inheritdoc
    /// </summary>
    /// <param name = "_featureName">The feature name.</param>
    /// <returns>True if the feature is pricing engine supported and is enabled, otherwise false.</returns>
    public System.Boolean IsFeatureEnabled(System.String _featureName)
    {
        switch (_featureName)
        {
            case UnifiedPricingFeatureName:
                return FeatureStateProvider::isFeatureEnabled(UnifiedPricingFeature::instance());
        }

        return super(_featureName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetPriceTreeSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// inheritdoc
    /// </summary>
    /// <returns>Price tree setup.</returns>
    /// <remarks>As of now, we retrieve the setup of the default price tree only.</remarks>
    public Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceTreeSetup GetPriceTreeSetup() // Do not use alias defined by `using` as method return type, it cannot be inherited by the extending class.
    {
        PriceTree priceTree;
        PriceComponentCodeSetup priceComponentCodeSetup;
        PriceComponentCode priceComponentCode;

        // TODO from [leshe] to [boycez]: finalize how to define price tree in sales order.
        // As of now, we retrieve only the default tree.
        select firstonly priceTree where priceTree.IsDefaultTree == NoYes::Yes;

        CLRObject priceComponentCodeList = this.createCLRList(new CrtPriceComponentCode());
        while select PriceComponent, Name from priceComponentCode
            join CalculationSequence from priceComponentCodeSetup
                where priceComponentCodeSetup.PriceTreeName == priceTree.Name
                    && priceComponentCodeSetup.PriceComponent == priceComponentCode.PriceComponent && priceComponentCodeSetup.PriceComponentCodeName == priceComponentCode.Name
        {
            var crtPriceComponentCode = new CrtPriceComponentCode();
            crtPriceComponentCode.Name = priceComponentCode.Name;
            crtPriceComponentCode.PriceComponentValue = enum2int(priceComponentCode.PriceComponent);
            crtPriceComponentCode.CalculationSequence = priceComponentCodeSetup.CalculationSequence;

            priceComponentCodeList.Add(crtPriceComponentCode);
        }

        return new CrtPriceTreeSetup(priceTree.Name, priceComponentCodeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetPriceAttributeDefinitions</Name>
				<Source><![CDATA[
    /// <summary>
    /// inheritdoc
    /// </summary>
    /// <param name="_priceContext">The price context.</param>
    /// <returns>Price attribute definitions.</returns>
    public System.Object GetPriceAttributeDefinitions(CrtPriceContext _priceContext)
    {
        CLRObject definitionList = this.createCLRList(new CrtPriceAttributeDefinition());
        PriceAttributeDefinition priceAttributeDefinition;
        PriceComponentCodeAttribute priceComponentCodeAttribute;

        // Get definitions for price groups.
        while select Name, PriceComponent, AttributeType, AttributeSource, PredefinedField, EcoResAttributeRecId, Sequence from priceAttributeDefinition
                where priceAttributeDefinition.Status == PriceAttributeStatus::Published && priceAttributeDefinition.PriceComponent == PriceComponent::PriceGroup
            join PriceComponentCodeName, PriorityNumber from priceComponentCodeAttribute
                where priceComponentCodeAttribute.PriceAttributeName == priceAttributeDefinition.Name && priceComponentCodeAttribute.PriceComponent == priceAttributeDefinition.PriceComponent
                    && priceComponentCodeAttribute.Status == PriceAttributeStatus::Published
        {
            definitionList.add(this.convertToCrtPriceAttributeDefinition(priceAttributeDefinition, priceComponentCodeAttribute));
        }

        // Get definitions for price component codes.
        UnifiedPricingPriceComponentCodeTmp priceComponentCodeTmp = this.populatePriceComponentCodeTmp(
            _priceContext.get_PriceAttributeValueContext().get_PriceTreeSetup().get_PriceComponentCodes());

        while select Name, PriceComponent, AttributeType, AttributeSource, PredefinedField, EcoResAttributeRecId, Sequence from priceAttributeDefinition
                where priceAttributeDefinition.Status == PriceAttributeStatus::Published && priceAttributeDefinition.PriceComponent != PriceComponent::PriceGroup
            join PriceComponentCodeName, PriorityNumber from priceComponentCodeAttribute
                where priceComponentCodeAttribute.PriceAttributeName == priceAttributeDefinition.Name && priceComponentCodeAttribute.PriceComponent == priceAttributeDefinition.PriceComponent
                    && priceComponentCodeAttribute.Status == PriceAttributeStatus::Published
            exists join priceComponentCodeTmp
                where priceComponentCodeTmp.Name == priceComponentCodeAttribute.PriceComponentCodeName
                    && priceComponentCodeTmp.PriceComponent == priceComponentCodeAttribute.PriceComponent
        {
            definitionList.add(this.convertToCrtPriceAttributeDefinition(priceAttributeDefinition, priceComponentCodeAttribute));
        }

        return definitionList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToCrtPriceAttributeDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the given price attribute definition from AX data model to CRT data model.
    /// </summary>
    /// <param name = "_priceAttributeDefinition">The price attribute definition.</param>
    /// <param name = "_priceComponentCodeAttribute">The price component code attribute.</param>
    /// <returns>The price attribute definition in CRT data model.</returns>
    private CrtPriceAttributeDefinition convertToCrtPriceAttributeDefinition(PriceAttributeDefinition _priceAttributeDefinition, PriceComponentCodeAttribute _priceComponentCodeAttribute)
    {
        var crtDefinition = new CrtPriceAttributeDefinition();
        crtDefinition.Name = _priceAttributeDefinition.Name;
        crtDefinition.PriceComponentValue = enum2int(_priceAttributeDefinition.PriceComponent);
        crtDefinition.PriceAttributeTypeValue = enum2int(_priceAttributeDefinition.AttributeType);
        crtDefinition.PriceAttributeSourceValue = enum2int(_priceAttributeDefinition.AttributeSource);
        crtDefinition.PriceAttributePredefinedFieldValue = enum2int(_priceAttributeDefinition.PredefinedField);
        crtDefinition.AttributeRecordId = _priceAttributeDefinition.EcoResAttributeRecId;
        crtDefinition.PriceComponentCodeName = _priceComponentCodeAttribute.PriceComponentCodeName;
        crtDefinition.Sequence = _priceAttributeDefinition.Sequence;
        crtDefinition.PriorityNumber = _priceComponentCodeAttribute.PriorityNumber;

        return crtDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetPriceGroupsByPriceAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// inheritdoc
    /// </summary>
    /// <param name="_priceContext">The price context.</param>
    /// <returns>Price groups.</returns>
    public System.Object GetPriceGroupsByPriceAttributes(CrtPriceContext _priceContext)
    {
        CLRObject crtPriceGroupList = this.createCLRList(new CrtPriceGroup());
        CrtPriceAttributeValueContext crtPriceAttributeValueContext = _priceContext.get_PriceAttributeValueContext();

        var definitionList = new List(Types::AnyType);
        System.Collections.IEnumerator enumerator = crtPriceAttributeValueContext.get_PriceAttributes().GetEnumerator();
        while(enumerator.MoveNext())
        {
            CrtPriceAttributeDefinition crtDefinition = enumerator.get_Current();
            if (any2Enum(crtDefinition.get_PriceComponent()) == PriceComponent::PriceGroup)
            {
                definitionList.addEnd(crtDefinition);
            }
        }

        if (definitionList.empty())
        {
            return crtPriceGroupList;
        }

        List applicabilities = this.getPossiblePricingRuleApplicabilities(crtPriceAttributeValueContext, definitionList);
        UnifiedPricingHashHexTmp hashTmp = this.populatePricingRuleApplicabilityHashHexTmp(applicabilities);

        PriceDiscGroup priceDiscGroup;
        PricingRuleApplicability pricingRuleApplicability;
        while select forceSelectOrder forceNestedLoop hashTmp
            join HashValue from pricingRuleApplicability
                where pricingRuleApplicability.PriceComponent == PriceComponent::PriceGroup
                    && pricingRuleApplicability.HashValue == hashTmp.HashValue
                    && pricingRuleApplicability.Status == RetailDisabledEnabled::Enabled
            join RecId, GroupId from priceDiscGroup
                where priceDiscGroup.RecId == pricingRuleApplicability.PricingRuleRecId
        {
            var crtPriceGroup = new CrtPriceGroup();
            crtPriceGroup.PriceGroupId = priceDiscGroup.RecId;
            crtPriceGroup.GroupId = priceDiscGroup.GroupId;
            crtPriceGroup.HashValue = pricingRuleApplicability.HashValue;

            crtPriceGroupList.add(crtPriceGroup);
        }

        return crtPriceGroupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetPricingRuleApplicabilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// inheritdoc
    /// </summary>
    /// <param name="_priceContext">The price context.</param>
    /// <returns>
    /// A dictionary of Pricing rule applicabilities for lines.
    /// Key - line number
    /// Value - pricing rule applicability RecIds
    /// </returns>
    public System.Object GetPricingRuleApplicabilities(CrtPriceContext _priceContext)
    {
        CLRObject result = this.getCLRDictionaryOfDecimalToLongs();
        CrtPriceAttributeValueContext crtPriceAttributeValueContext = _priceContext.get_PriceAttributeValueContext();

        var definitionList = new List(Types::AnyType);
        System.Collections.IEnumerator enumerator = crtPriceAttributeValueContext.get_PriceAttributes().GetEnumerator();
        while(enumerator.MoveNext())
        {
            CrtPriceAttributeDefinition crtDefinition = enumerator.get_Current();
            if (any2Enum(crtDefinition.get_PriceComponent()) != PriceComponent::PriceGroup)
            {
                definitionList.addEnd(crtDefinition);
            }
        }

        if (definitionList.empty())
        {
            return result;
        }

        Set lineNumSet = new Set(Types::Real);
        enumerator = crtPriceAttributeValueContext.get_PricingRuleApplicabilityAttributeValues().get_Keys().GetEnumerator();
        while (enumerator.MoveNext())
        {
            CLRObject tuple = enumerator.get_Current();
            System.Decimal lineNum = this.GetTupleValue(tuple, 'Item2');
            lineNumSet.add(lineNum);
        }

        Map hashLineNum = new Map(Types::AnyType, Types::AnyType);
        List applicabilities = this.getPossiblePricingRuleApplicabilitiesPerLine(crtPriceAttributeValueContext, hashLineNum, lineNumSet, definitionList);
        UnifiedPricingHashHexTmp hashTmp = this.populatePricingRuleApplicabilityHashHexTmp(applicabilities);
        TmpRecIdFilter priceGroupRecIdTmp = this.populatePriceGroupRecIdTmp(_priceContext.get_PriceAttributeBasedPriceGroups());

        date activeDate = this.GetDateInChannelTimeZone(_priceContext.ActiveDate);

        PricingRuleApplicability pricingRuleApplicability;
        PriceGroupPricingRuleLink priceGroupPricingRuleLink;
        while select forceSelectOrder forceNestedLoop hashTmp
            join RecId, HashValue from pricingRuleApplicability
                where pricingRuleApplicability.PriceComponent != PriceComponent::PriceGroup
                    && pricingRuleApplicability.HashValue == hashTmp.HashValue
                    && pricingRuleApplicability.Status == RetailDisabledEnabled::Enabled
                    && (pricingRuleApplicability.ValidFrom <= activeDate || pricingRuleApplicability.ValidFrom <= noDate)
                    && (pricingRuleApplicability.ValidTo >= activeDate || pricingRuleApplicability.ValidTo <= noDate)
            exists join priceGroupPricingRuleLink
                where priceGroupPricingRuleLink.PricingRuleTableId == pricingRuleApplicability.PricingRuleTableId
                    && priceGroupPricingRuleLink.PricingRuleRecId == pricingRuleApplicability.PricingRuleRecId
            exists join priceGroupRecIdTmp
                where priceGroupRecIdTmp.RefRecId == priceGroupPricingRuleLink.PriceDiscGroup
                    || priceGroupPricingRuleLink.PriceDiscGroup == 0 // 0 means always apply without price group filtering
        {
            str hashValue = pricingRuleApplicability.HashValue;
            Set lineNums = hashLineNum.lookup(hashValue);

            SetEnumerator se = lineNums.getEnumerator();
            while(se.moveNext())
            {
                System.Decimal lineNum = se.current();

                if (!result.containsKey(lineNum))
                {
                    CLRObject newSet = this.getCLRSetOfLong();
                    result.Add(lineNum, newSet);
                }

                CLRObject existingSet = result.get_Item(lineNum);
                existingSet.Add(pricingRuleApplicability.RecId);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPossiblePricingRuleApplicabilitiesPerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the possible pricing rule applicabilities for given lines.
    /// </summary>
    /// <param name = "_context">The price attribute value context.</param>
    /// <param name = "_hashLineNum">The hash to line numbers map.</param>
    /// <param name = "_lineNumSet">The line number set.</param>
    /// <param name = "_priceAttributeDefinitionList">The price attribute definition list.</param>
    /// <returns>A list of pricing rule applicabilities.</returns>
    private List getPossiblePricingRuleApplicabilitiesPerLine(CrtPriceAttributeValueContext _context, Map _hashLineNum, Set _lineNumSet, List _priceAttributeDefinitionList)
    {
        List result = new List(Types::AnyType);

        SetEnumerator lineNumEn = _lineNumSet.getEnumerator();
        while (lineNumEn.moveNext())
        {
            LineNum lineNum = lineNumEn.current();
            List applicabilities = this.getPossiblePricingRuleApplicabilities(_context, _priceAttributeDefinitionList, true, lineNum);

            ListEnumerator le = applicabilities.getEnumerator();
            while (le.moveNext())
            {
                CrtPriceAttributeApplicabilityRule applicability = le.current();
                System.String hashKey = applicability.get_HashKey();

                if (_hashLineNum.exists(hashKey))
                {
                    Set lineNumSet = _hashLineNum.lookup(hashKey);
                    lineNumSet.add(lineNum);
                }
                else
                {
                    Set lineNumSet = new Set(Types::Real);
                    lineNumSet.add(lineNum);
                    _hashLineNum.insert(hashKey, lineNumSet);
                }

                result.addEnd(applicability);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPossiblePricingRuleApplicabilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets possible pricing rule applicabilities based on attribute definitions and values.
    /// </summary>
    /// <param name = "_context">The price attribute value context.</param>
    /// <param name = "_priceAttributeDefinitionList">The price attribute definitions.</param>
    /// <param name = "_lookupByLineNum">A flag indicating whether to process per line. True if process per line, otherwise false.</param>
    /// <param name = "_lineNum">The line number. It is effective only when processing per line.</param>
    /// <returns>A list of possible pricing rule applicabilities.</returns>
    private List getPossiblePricingRuleApplicabilities(CrtPriceAttributeValueContext _context, List _priceAttributeDefinitionList, boolean _lookupByLineNum = false, LineNum _lineNum = 0)
    {
        List applicabilities = new List(Types::AnyType);
        applicabilities.addEnd(new CrtPriceAttributeApplicabilityRule());  // Add the default empty rule.

        ListEnumerator definitionEn = _priceAttributeDefinitionList.GetEnumerator();
        while(definitionEn.MoveNext())
        {
            CrtPriceAttributeDefinition crtDefinition = definitionEn.current();
            int sequence = crtDefinition.get_Sequence();

            System.Collections.IEnumerator attributeValuesEn;
            if (_lookupByLineNum)
            {
                attributeValuesEn = _context.GetPricingRuleApplicabilityAttributeValues(crtDefinition, _lineNum).GetEnumerator();
            }
            else
            {
                attributeValuesEn = _context.GetPriceGroupApplicabilityAttributeValues(crtDefinition).GetEnumerator();
            }

            List attributeStringValues = new List(Types::AnyType);
            while(attributeValuesEn.MoveNext())
            {
                CrtCommercePropertyValue crtValue = attributeValuesEn.Current;
                System.String stringValue = crtValue.GetPropertyValue().ToString();

                if (!System.String::IsNullOrWhiteSpace(stringValue))
                {
                    attributeStringValues.addEnd(stringValue);
                }
            }

            List newApplicabilities = new List(Types::AnyType);
            ListEnumerator le = applicabilities.getEnumerator();
            while (le.moveNext())
            {
                CrtPriceAttributeApplicabilityRule existingApplicability = le.current();

                ListEnumerator leValue = attributeStringValues.getEnumerator();
                while (leValue.moveNext())
                {
                    CrtPriceAttributeApplicabilityRule newApplicability = existingApplicability.Clone();
                    newApplicability.set_Item(sequence, leValue.current());

                    newApplicabilities.addEnd(newApplicability);
                }
            }

            le = newApplicabilities.getEnumerator();
            while (le.moveNext())
            {
                CrtPriceAttributeApplicabilityRule newApplicability = le.current();

                applicabilities.addEnd(newApplicability);
            }
        }

        return applicabilities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePriceComponentCodeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates price component code data into temp table UnifiedPricingPriceComponentCodeTmp.
    /// </summary>
    /// <param name = "_crtPriceComponentCodes">The price component codes.</param>
    /// <returns>The temp table reference.</returns>
    private UnifiedPricingPriceComponentCodeTmp populatePriceComponentCodeTmp(CLRObject _crtPriceComponentCodes)
    {
        UnifiedPricingPriceComponentCodeTmp priceComponentCodeTmp;
        var recordInsertList = new RecordInsertList(tableNum(UnifiedPricingPriceComponentCodeTmp), true, true, true, true, true, priceComponentCodeTmp);

        System.Collections.IEnumerator clrEn = _crtPriceComponentCodes.GetEnumerator();
        while(clrEn.MoveNext())
        {
            CrtPriceComponentCode crtPriceComponentCode = clrEn.get_Current();

            priceComponentCodeTmp.clear();
            priceComponentCodeTmp.Name = crtPriceComponentCode.get_Name();
            priceComponentCodeTmp.PriceComponent = any2Enum(crtPriceComponentCode.get_PriceComponentValue());
            recordInsertList.Add(priceComponentCodeTmp);
        }
        recordInsertList.insertDatabase();

        return priceComponentCodeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePricingRuleApplicabilityHashHexTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates pricing rule applicability data into temp table UnifiedPricingHashHexTmp.
    /// </summary>
    /// <param name = "_applicabilities">The pricing rule applicabilities.</param>
    /// <returns>The temp table reference.</returns>
    private UnifiedPricingHashHexTmp populatePricingRuleApplicabilityHashHexTmp(List _applicabilities)
    {
        UnifiedPricingHashHexTmp hashTmp;
        var hashTmpList = new RecordInsertList(tableNum(UnifiedPricingHashHexTmp), true, true, true, true, true, hashTmp);

        ListEnumerator le = _applicabilities.getEnumerator();
        while(le.moveNext())
        {
            CrtPriceAttributeApplicabilityRule applicability = le.current();

            hashTmp.clear();
            hashTmp.HashValue = applicability.get_HashKey();
            hashTmpList.add(hashTmp);
        }
        hashTmpList.insertDatabase();

        return hashTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePriceGroupRecIdTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates price group RecIds into temp table TmpRecIdFilter.
    /// </summary>
    /// <param name = "_crtPriceGroups">The price groups.</param>
    /// <returns>The temp table reference.</returns>
    private TmpRecIdFilter populatePriceGroupRecIdTmp(CLRObject _crtPriceGroups)
    {
        TmpRecIdFilter priceDiscGroupTmp;
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(TmpRecIdFilter), true, true, true, true, true, priceDiscGroupTmp);

        System.Collections.IEnumerator clrEn = _crtPriceGroups.GetEnumerator();
        while (clrEn.MoveNext())
        {
            CrtPriceGroup crtPriceGroup = clrEn.get_Current();
            priceDiscGroupTmp.RefRecId = crtPriceGroup.get_PriceGroupId();
            recordInsertList.add(priceDiscGroupTmp);
        }
        recordInsertList.insertDatabase();

        return priceDiscGroupTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCLRDictionaryOfDecimalToLongs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets CLR dictionary of decimal to enumerable of long.
    /// </summary>
    /// <returns>Emtpy CLR dictionary of decimal to set of long.</returns>
    private System.Object getCLRDictionaryOfDecimalToLongs()
    {
        return Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.TypeHelperForAx::CreateDictionaryOfDecimalToLongs();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>