<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransFormMultiSelectionState</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqTransFormMultiSelectionState</c> class encapsulates the details of planned order details
///    page multi-selection state management.
/// </summary>
/// <remarks>
///    This class is implemented as an observable state, which lets you hide maintenance of the
///    multi-selection rules from the producing form and provide a simple interface to the consumer
///    classes.
/// </remarks>
class ReqTransFormMultiSelectionState
{
    Map selectedRecords;

    ReqTransFormMultiSelectionObserver  observer;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a <c>ReqTrans</c> record to the state; the record becomes a part of the set of multiselected records.
    /// </summary>
    /// <param name="_record">
    /// A <c>ReqTrans</c> record to be added to the state.
    /// </param>
    /// <param name="_isMarked">
    /// A boolean value indicating if the record was explicitely marked (by selecting check box marking flag).
    /// </param>
    public void addRecord(ReqTrans _record, boolean _isMarked = false)
    {
        this.addRecordInternal(_record, _isMarked);
        this.notifyObserver();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecordInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a <c>ReqTrans</c> record to the state; the record becomes a part of the set of multiselected records.
    /// </summary>
    /// <param name="_record">
    /// A <c>ReqTrans</c> record to be added to the state.
    /// </param>
    /// <param name="_isMarked">
    /// A boolean value indicating if the record was explicitely marked (by selecting check box marking flag).
    /// </param>
    private void addRecordInternal(ReqTrans _record, boolean _isMarked = false)
    {
        ReqTrans    existingRecord;
        container   newRecordPair;

        if ( selectedRecords )
        {
            if ( !_isMarked && selectedRecords.exists(_record.RecId) )
            {
                // if record was marked the marking flag should be preserved.
                [existingRecord,_isMarked] = selectedRecords.lookup(_record.RecId);
            }

            newRecordPair = [_record,_isMarked];
            selectedRecords.insert(_record.RecId,newRecordPair);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a collection of <c>ReqTrans</c> record to the state; the records becomes a part of the set of multiselected records.
    /// </summary>
    /// <param name="_records">
    /// A <c>Map</c> of the record to be added to the state.
    /// </param>
    /// <param name="_isMarked">
    /// A boolean value indicating if the records were explicitely marked (by selecting check box marking flag).
    /// </param>
    public void addRecords(Map _records, boolean _isMarked = false)
    {
        MapEnumerator   recordsEnumerator;

        if (_records)
        {
            recordsEnumerator = _records.getEnumerator();

            while (recordsEnumerator.moveNext())
            {
                this.addRecordInternal(recordsEnumerator.currentValue(), _isMarked);
            }

            this.notifyObserver();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of <c>MapEnumerator</c> which can be used to iterate the set of selected records.
    /// </summary>
    /// <returns>
    /// An instance of <c>MapEnumerator</c> which can be used to iterate the set of selected records.
    /// </returns>
    public MapEnumerator getEnumerator()
    {
        return selectedRecords.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        public void init()
    {
        selectedRecords = new Map(typeName2Type(extendedtypestr(recId)), Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecordMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean value indicating if a <c>ReqTrans</c> record is contained in the state (is selected).
    /// </summary>
    /// <param name="_record">
    /// A <c>ReqTrans</c> record being validated.
    /// </param>
    /// <returns>
    /// true if a <c>ReqTrans</c> record is contained in the state (is selected).
    /// </returns>
    public boolean isRecordMarked(ReqTrans _record)
    {
        ReqTrans    existingRecord;
        boolean     isMarked = false;

        if ( selectedRecords.exists(_record.RecId) )
        {
            [existingRecord,isMarked] = selectedRecords.lookup(_record.RecId);
        }

        return isMarked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyObserver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Notifies registered observer that the state has changed; for example new record is added.
    /// </summary>
    private void notifyObserver()
    {
        if (observer)
        {
            observer.onMultiSelectionUpdated(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmObserver</Name>
				<Source><![CDATA[
        public ReqTransFormMultiSelectionObserver parmObserver(ReqTransFormMultiSelectionObserver _observer = observer)
    {
        observer = _observer;
        return observer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNotMarkedRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all the records which are not marked.
    /// </summary>
    public void removeNotMarkedRecords()
    {
        Map             newSelectedRecords;
        MapEnumerator   selectedRecordsEnumerator;

        ReqTrans        record;
        boolean         isMarked;

        if ( selectedRecords && selectedRecords.elements() )
        {
            newSelectedRecords = new Map(selectedRecords.keyType(), selectedRecords.valueType());

            selectedRecordsEnumerator = selectedRecords.getEnumerator();

            while (selectedRecordsEnumerator.moveNext())
            {
                [record,isMarked] = selectedRecordsEnumerator.currentValue();

                if (isMarked)
                {
                    newSelectedRecords.insert(record.RecId, [record,isMarked]);
                }
            }

            selectedRecords = newSelectedRecords;
        }

        this.notifyObserver();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a record from the state.
    /// </summary>
    /// <param name="_record">
    /// A <c>ReqTrans</c> record which should be removed from the state.
    /// </param>
    public void removeRecord(ReqTrans _record)
    {
        if (selectedRecords && selectedRecords.exists(_record.RecId))
        {
            selectedRecords.remove(_record.RecId);
            this.notifyObserver();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedRecordsCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns number of records registered as selected.
    /// </summary>
    /// <returns>
    /// An integer representing the number of records stored in the state.
    /// </returns>
    public int selectedRecordsCount()
    {
        int recordsCount = 0;

        if ( selectedRecords )
        {
            recordsCount = selectedRecords.elements();
        }

        return recordsCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static ReqTransFormMultiSelectionState construct()
    {
        return new ReqTransFormMultiSelectionState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newObserver</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of <c>ReqTransFormMultiSelectionState</c> and registers an observer.
    /// </summary>
    /// <param name="_observer">
    ///     A <c>ReqTransFormMultiSelectionObserver</c> instance which should be registered as the observer.
    /// </param>
    /// <returns>
    ///     The instance of <c>ReqTransFormMultiSelectionState</c>.
    /// </returns>
    public static ReqTransFormMultiSelectionState newObserver(ReqTransFormMultiSelectionObserver _observer)
    {
        ReqTransFormMultiSelectionState ret = ReqTransFormMultiSelectionState::construct();
        ret.parmObserver(_observer);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>