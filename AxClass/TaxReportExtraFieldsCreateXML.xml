<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportExtraFieldsCreateXML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>TaxReportExtraFieldsCreateXML</c> extends to Run base class.
/// </summary>
class TaxReportExtraFieldsCreateXML extends RunBase
{
    DialogField dialogTaxPeriod;
    DialogField dialogEBAS;

    TaxPeriod   taxPeriod;
    Filename    ebas;
    str         ebasURL;

    TaxDocumentIdNumber din;                 // A1
    str                 abn;                 // A2
    str                 fromDate;            // A3
    str                 toDate;              // A4
    str                 fringeATO;           // 6A
    str                 deferredInstallment; // 7
    str                 deferredGSTOnImport; // 7A
    str                 paygCommRate;        // T2

    #define.keepStr('0123456789')

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        taxPeriod,
        EBAS
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogTaxPeriod    = dialog.addFieldValue(extendedtypestr(TaxPeriod), taxPeriod);
        dialogEBAS         = dialog.addFieldValue(extendedtypestr(Filename), ebas, '', "@SYS65009");
        dialogEBAS.allowEdit(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElementValue</Name>
				<Source><![CDATA[
    private str getElementValue(XmlElement _xmlElement, str _elementName)
    {
        XmlElement tmpElement = _xmlElement.getNamedElement(_elementName);

        return tmpElement ? tmpElement.innerText() : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if get from dialog.
    /// </summary>
    /// <returns>True if get from dialog, otherwise false.</returns>
    public boolean getFromDialog()
    {
        taxPeriod = dialogTaxPeriod.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack current version and current list.
    /// </summary>
    /// <returns>Contianer of current version and currecnt list.</returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseBASXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parse BA xml.
    /// </summary>
    /// <param name = "xmlDoc">Xml document.</param>
    public void parseBASXml(XmlDocument xmlDoc)
    {
        XmlElement xmlRoot;
        #define.ABN('ABN')
        #define.DIN('DIN')
        #define.toDate('PERIOD_DATE_TO')
        #define.fromDate('PERIOD_DATE_FROM')
        #define.ATO_CALCULATED_AMOUNT('ATO_CALCULATED_AMOUNT')
        #define.GST_DEFERRED_ON_IMPORTED_GOODS('GST_DEFERRED_ON_IMPORTED_GOODS')
        #define.ATO_CALCULATED_FBT_INSTALMENT('ATO_CALCULATED_FBT_INSTALMENT')
        #define.COMMISSIONERS_INSTALMENT_RATE ('COMMISSIONERS_INSTALMENT_RATE')
        CompanyCoRegNum companyABN;

        xmlRoot = xmlDoc.root();

        companyABN = strkeep(CompanyInfo::find().CoRegNum, #keepStr);
        abn        = this.getElementValue(xmlRoot, #ABN);

        if (CompanyInfo::find().CoRegNum != abn)
        {
            throw error("@SYS81375");
        }

        toDate              = this.getElementValue(xmlRoot, #toDate);                           // xmlRoot.getNamedElement(#toDate).innerText();
        fromDate            = this.getElementValue(xmlRoot, #fromDate);                         // xmlRoot.getNamedElement(#fromDate).innerText();
        din                 = this.getElementValue(xmlRoot, #DIN);                              // xmlRoot.getNamedElement(#DIN).innerText();
        deferredInstallment = this.getElementValue(xmlRoot, #ATO_CALCULATED_AMOUNT);            // xmlRoot.getNamedElement(#ATO_CALCULATED_AMOUNT).innerText();
        deferredGSTOnImport = this.getElementValue(xmlRoot, #GST_DEFERRED_ON_IMPORTED_GOODS);   // xmlRoot.getNamedElement(#GST_DEFERRED_ON_IMPORTED_GOODS).innerText();
        fringeATO           = this.getElementValue(xmlRoot, #ATO_CALCULATED_FBT_INSTALMENT);    // xmlRoot.getNamedElement(#ATO_CALCULATED_FBT_INSTALMENT).innerText();
        paygCommRate        = this.getElementValue(xmlRoot, #COMMISSIONERS_INSTALMENT_RATE);    // xmlRoot.getNamedElement(#COMMISSIONERS_INSTALMENT_RATE).innerText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        XmlDocument xmlDoc;

        super();

        xmlDoc = XmlDocument::newFromStream(File::UseFileFromURL(ebasURL));

        if (xmlDoc)
        {
            this.parseBASXml(xmlDoc);
            this.setBASdata();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEBASFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set EBA file name.
    /// </summary>
    /// <param name = "_fileName">File name.</param>
    public void setEBASFileName(Filename _fileName)
    {
        ebas = _fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEBASFileURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set EBA file URL.
    /// </summary>
    /// <param name = "_fileURL">URL of file.</param>
    public void setEBASFileURL(str _fileURL)
    {
        ebasURL = _fileURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBASdata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set BAS date.
    /// </summary>
    public void setBASdata()
    {
        TaxReportPeriod         taxReportPeriod;
        TaxReportExtraFields    taxReportExtraFields;
        date                    tmpFromDate;
        date                    tmpToDate;

        tmpFromDate = this.validateDate(fromDate);
        tmpToDate = this.validateDate(toDate);

        if (TaxReportExtraFields::exist(taxPeriod, tmpFromDate, tmpToDate))
        {
            throw error(strfmt("@SYS65010",taxPeriod, date2StrUsr(tmpFromDate, DateFlags::FormatAll), date2StrUsr(tmpToDate, DateFlags::FormatAll)));
        }
        else
        {
            if (tmpFromDate
                && tmpToDate
                && !TaxReportPeriod::exist(taxPeriod, tmpFromDate, tmpToDate))
            {
                ttsbegin;
                taxReportPeriod.TaxPeriod = taxPeriod;
                taxReportPeriod.FromDate  = tmpFromDate;
                taxReportPeriod.ToDate    = tmpToDate;
                taxReportPeriod.insert();
                ttscommit;
            }

            ttsbegin;
            taxReportExtraFields.TaxPeriod = taxPeriod;
            taxReportExtraFields.FromDate  = tmpFromDate;
            taxReportExtraFields.ToDate    = tmpToDate;

            taxReportExtraFields.TaxDocumentIdNumber = this.validateDIN(din);
            taxReportExtraFields.DeferredInstalment  = this.validateAmount(deferredInstallment);
            taxReportExtraFields.DeferredGSTOnImport = this.validateAmount(deferredGSTOnImport);
            taxReportExtraFields.FringeATO           = this.validateAmount(fringeATO);
            taxReportExtraFields.PaygCommRate        = this.validateAmount(paygCommRate);
            taxReportExtraFields.insert();
            ttscommit;
        // ABN
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Unpack class.
    /// </summary>
    /// <param name = "packedClass">Container of packed class.</param>
    /// <returns>True if version is expect, otherwise false.</returns>
    public boolean unpack(container packedClass)
    {
        #localmacro.Version1List
            taxPeriod
        #endmacro

        boolean     ret     = false;
        Version     version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#Currentlist]=packedClass;
                ret=true;
                break;
            case 1:
                [version, #Version1List] = packedClass;
                ret = true;
                break;

            default :
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate tax report exra fields create xml.
    /// </summary>
    /// <param name = "_calledFrom">Called from object.</param>
    /// <returns>True if the instanse of <c>TaxReportExtraFieldsCreateXML</c> is validate, otherwise false.</returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (!taxPeriod)
                ret = checkFailed("@SYS63293");

            if (!ebas)
                ret = checkFailed("@SYS18624");

            if (ret && !ebasURL)
                ret = checkFailed(strfmt("@SYS26666", ebas));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAmount</Name>
				<Source><![CDATA[
    private Amount validateAmount(str _tmpStr)
    {
        str     tempStr;
        Amount  tempAmount;
        #define.keepRealStr('0123456789.-')

        tempStr = strkeep(_tmpStr, #keepRealStr);

        if (tempStr)
        {
            tempAmount = str2num(tempStr);
        }

        return tempAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDate</Name>
				<Source><![CDATA[
    private date validateDate(str _tmpStr)
    {
        str     tempStr;
        date    tempDate;
        #define.8(8)

        tempStr = strkeep(_tmpStr, #keepStr);

        if (strlen(tempStr) == #8)
        {
            tempDate = str2date(tempStr,123);
        }

        return tempDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDIN</Name>
				<Source><![CDATA[
    private str validateDIN(str _tmpStr)
    {
        str     tempStr;
        boolean displayError = false;
        #define.DINLength(11)

        tempStr = strkeep(_tmpStr, #keepStr);

        if (strlen(tempStr) != #DINLength)
        {
            displayError = true;
        }
        else
        {
            if (str2num(tempStr) < 10000000000
                || str2num(tempStr) > 99999999999)
            {
                displayError = true;
            }
        }

        if (displayError)
        {
            throw error("@SYS104637");
        }

        return tempStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get description of class.
    /// </summary>
    /// <returns>Description of class.</returns>
    public static ClassDescription description()
    {
        return "@SYS63300";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main method of Tax report extra fields create xml.
    /// </summary>
    /// <param name = "_args">Arguments.</param>
    public static void main(Args _args)
    {
        // Upload the ebas file first
        FileUploadTemporaryStorageResult result = File::GetFileFromUser() as FileUploadTemporaryStorageResult;

        if (result.getUploadStatus())
        {
            TaxReportExtraFieldsCreateXML taxReportExtraFieldsXML = new TaxReportExtraFieldsCreateXML();

            taxReportExtraFieldsXML.getLast();
            taxReportExtraFieldsXML.setEBASFileName(result.getFileName());
            taxReportExtraFieldsXML.setEBASFileURL(result.getDownloadUrl());

            if (taxReportExtraFieldsXML.prompt())
            {
                taxReportExtraFieldsXML.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Can run in new session.
    /// </summary>
    /// <returns>False.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>