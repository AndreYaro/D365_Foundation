<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLayoutHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides methods for various functional requirements of budget plan layouts.
/// </summary>
public class BudgetPlanLayoutHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canEditBudgetPlanForScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the budget plan document is editable within a given <c>BudgetPlanScenario</c> record.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId"> The <c>BudgetPlanHeader</c> record ID to find the associated <c>BudgetPlanLayoutElement</c> record. </param>
    /// <param name="_budgetPlanScenarioRecId"> The <c>BudgetPlanScenario</c> record ID to find the associated <c>BudgetPlanLayoutElement</c> record. </param>
    /// <returns> true if the budget plan document is editable within the given <c>BudgetPlanScenario</c> record; otherwise, false. </returns>
    public static boolean canEditBudgetPlanForScenario(
        BudgetPlanHeaderRecId   _budgetPlanHeaderRecId,
        BudgetPlanScenarioRecId _budgetPlanScenarioRecId)
    {
        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLayoutHelper, canEditBudgetPlanForScenario),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }
        else if (!_budgetPlanScenarioRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLayoutHelper, canEditBudgetPlanForScenario),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanScenarioRecId))));
        }

        boolean          canEditForScenario;
        BudgetPlanHeader budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId);

        if (BudgetPlanLayoutElement::findFirstByLayoutScenario(budgetPlanHeader.Layout, _budgetPlanScenarioRecId) != null)
        {
            canEditForScenario = BudgetPlanLayoutElement::findFirstNonEditableLayoutElementByLayoutScenario(budgetPlanHeader.Layout, _budgetPlanScenarioRecId) == null;
        }

        return canEditForScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allChildPlansHaveAccessSetForScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether all child budget plans for the specified parent budget plan have their read/write access set.
    /// </summary>
    /// <param name="_parentBudgetPlanHeaderRecId"> The record ID of the parent <c>BudgetPlanHeader</c> record. </param>
    /// <param name="_targetBudgetPlanScenarioRecId"> The record ID of <c>BudgetPlanScenario</c> record associated with the child <c>BudgetPlanHeader</c> record. </param>
    /// <param name="_budgetPlanIsEditableForScenario"> The enum value of <c>NoYes</c> for the desired read/write access; optional. </param>
    /// <returns> true if all child plans for the given scenario have their read/write access set to the given <c>NoYes</c> value; otherwise, false. </returns>
    public static boolean allChildPlansHaveAccessSetForScenario(
        BudgetPlanHeaderRecId           _parentBudgetPlanHeaderRecId,
        BudgetPlanScenarioRecId         _targetBudgetPlanScenarioRecId,
        NoYes                           _budgetPlanIsEditableForScenario = NoYes::No)
    {
        if (!_parentBudgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLayoutHelper, allChildPlansHaveAccessSetForScenario),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }
        else if (!_targetBudgetPlanScenarioRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLayoutHelper, allChildPlansHaveAccessSetForScenario),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanScenarioRecId))));
        }

        boolean                             hasAccessToScenario;
        boolean                             isEditableSpecified;

        isEditableSpecified = !prmisDefault(_budgetPlanIsEditableForScenario);

        // Determine if a child plan that exists with the target scenario (if isEditable is specified, find one with the given isEditable value).
        hasAccessToScenario = (BudgetPlanLayoutHelper::findFirstSetChildBudgetPlanAccessLevelForScenario(_targetBudgetPlanScenarioRecId, _parentBudgetPlanHeaderRecId, _budgetPlanIsEditableForScenario, isEditableSpecified) != null);

        // If a budget plan is found and we are ensuring all child plans with the given scenario have the same access level.
        if (hasAccessToScenario && isEditableSpecified)
        {
            // Locate any budget plans that are not set for the given access, if one is found here return false; otherwise true.
            hasAccessToScenario = (BudgetPlanLayoutHelper::findFirstUnsetChildBudgetPlanAccessLevelForScenario(_targetBudgetPlanScenarioRecId, _parentBudgetPlanHeaderRecId, _budgetPlanIsEditableForScenario, isEditableSpecified) == null);
        }

        return hasAccessToScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstUnsetChildBudgetPlanAccessLevelForScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first child <c>BudgetPlanHeader</c> record that does not have its read only access level set to
    /// the parameter <c>NoYes</c> value passed in for a given <c>BudgetPlanScenarioRecId</c> value.
    /// </summary>
    /// <param name = "_targetBudgetPlanScenarioRecId"> The record ID of <c>BudgetPlanScenario</c> record associated with the child <c>BudgetPlanHeader</c> record. </param>
    /// <param name = "_parentBudgetPlanHeaderRecId"> The record ID of the parent <c>BudgetPlanHeader</c> record. </param>
    /// <param name = "_budgetPlanLayoutElementIsEditable"> The expected <c>NoYes</c> value that all the child plans should have for the given scenario. </param>
    /// <param name = "_isEditableSpecified"> A boolean value determining whether the access level being passed alongside is a defaulted value or not. </param>
    /// <returns> A <c>BudgetPlanHeader</c> record of the child plan that does not have its access level set for the given <c>BudgetPlanScenarioRecId</c> scenario and expected <c>NoYes</c> value. </returns>
    /// <remarks>
    /// This method is currently exclusively used in the allChildPlansHaveAccessToScenario method, since that method has an optional parameter for the access level
    /// it was necessary to utilize the boolean parameter to retain whether the access level was specified or not.
    /// </remarks>
    public static BudgetPlanHeader findFirstUnsetChildBudgetPlanAccessLevelForScenario(
        BudgetPlanScenarioRecId _targetBudgetPlanScenarioRecId,
        BudgetPlanHeaderRecId   _parentBudgetPlanHeaderRecId,
        NoYes                   _budgetPlanLayoutElementIsEditable,
        boolean                 _isEditableSpecified)
    {
        BudgetPlanHeader                    childBudgetPlanHeader;
        BudgetPlanLayoutElement             budgetPlanLayoutElement;
        BudgetPlanColumn                    budgetPlanColumn;

        select firstonly RecId from childBudgetPlanHeader
            where childBudgetPlanHeader.ParentBudgetPlanHeader == _parentBudgetPlanHeaderRecId
                exists join budgetPlanLayoutElement
                    where budgetPlanLayoutElement.Layout == childBudgetPlanHeader.Layout
                    exists join budgetPlanColumn
                        where budgetPlanColumn.RecId == budgetPlanLayoutElement.ElementDefinition
                            && budgetPlanColumn.Scenario == _targetBudgetPlanScenarioRecId
                            && (!_isEditableSpecified
                                || budgetPlanLayoutElement.IsEditable != _budgetPlanLayoutElementIsEditable);

        return childBudgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstSetChildBudgetPlanAccessLevelForScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first child <c>BudgetPlanHeader</c> record that does have its read only access level set to
    /// the parameter <c>NoYes</c> value passed in for a given <c>BudgetPlanScenarioRecId</c> value.
    /// </summary>
    /// <param name = "_targetBudgetPlanScenarioRecId"> The record ID of <c>BudgetPlanScenario</c> record associated with the child <c>BudgetPlanHeader</c> record. </param>
    /// <param name = "_parentBudgetPlanHeaderRecId"> The record ID of the parent <c>BudgetPlanHeader</c> record. </param>
    /// <param name = "_budgetPlanLayoutElementIsEditable"> The expected <c>NoYes</c> value that all the child plans should have for the given scenario. </param>
    /// <param name = "_isEditableSpecified"> A boolean value determining whether the access level being passed alongside is a defaulted value or not. </param>
    /// <returns> A <c>BudgetPlanHeader</c> record of the child plan that does have its access level set for the given <c>BudgetPlanScenarioRecId</c> scenario and expected <c>NoYes</c> value. </returns>
    /// <remarks>
    /// This method is currently exclusively used in the allChildPlansHaveAccessToScenario method, since that method has an optional parameter for the access level it was necessary to utilize the boolean
    /// parameter to retain whether the access level was specified or not.
    /// </remarks>
    public static BudgetPlanHeader findFirstSetChildBudgetPlanAccessLevelForScenario(
        BudgetPlanScenarioRecId _targetBudgetPlanScenarioRecId,
        BudgetPlanHeaderRecId   _parentBudgetPlanHeaderRecId,
        NoYes                   _budgetPlanLayoutElementIsEditable,
        boolean                 _isEditableSpecified)
    {
        BudgetPlanHeader                    childBudgetPlanHeader;
        BudgetPlanLayoutElement             budgetPlanLayoutElement;
        BudgetPlanColumn                    budgetPlanColumn;

        select firstonly RecId from childBudgetPlanHeader
            where childBudgetPlanHeader.ParentBudgetPlanHeader == _parentBudgetPlanHeaderRecId
                exists join budgetPlanLayoutElement
                    where budgetPlanLayoutElement.Layout == childBudgetPlanHeader.Layout
                        exists join budgetPlanColumn
                            where budgetPlanColumn.RecId == budgetPlanLayoutElement.ElementDefinition
                                && budgetPlanColumn.Scenario == _targetBudgetPlanScenarioRecId
                                && (!_isEditableSpecified
                                    || budgetPlanLayoutElement.IsEditable == _budgetPlanLayoutElementIsEditable);

        return childBudgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateScenarioExistsInLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the scenario name has a valid <c>BudgetPlanLayoutElement</c> record.
    /// </summary>
    /// <param name = "_budgetPlanLayoutRecId"> The record ID of the <c>BudgetPlanLayout</c> record. </param>
    /// <param name = "_budgetPlanScenarioLocalizedName"> The <c>BudgetPlanScenario</c> name; optional. </param>
    /// <param name = "_budgetPlanScenarioRecId"> The <c>BudgetPlanScenarioRecId</c> record; optional. </param>
    /// <param name = "_displayErrorMessage"> Boolean flag to determine whether or not to display an error message; optional. </param>
    /// <returns> true if a layout element record was found; otherwise, false. </returns>
    /// <exception cref="M:Exception::Error"> The required parameters are null. </exception>
    public static boolean validateScenarioExistsInLayout(
        BudgetPlanLayoutRecId   _budgetPlanLayoutRecId,
        BudgetPlanScenarioName  _budgetPlanScenarioLocalizedName = BudgetPlanningConstants::emptyString,
        BudgetPlanScenarioRecId _budgetPlanScenarioRecId = 0,
        boolean                 _displayErrorMessage = true)
    {
        if (!_budgetPlanLayoutRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLayoutHelper, validateScenarioExistsInLayout),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanLayoutRecId))));
        }
        if (_budgetPlanScenarioLocalizedName == BudgetPlanningConstants::emptyString && _budgetPlanScenarioRecId == 0)
        {
            throw error(strfmt("@Budget:IncorrectFunctionUsage", funcname()));
        }

        // Retrieve the Scenario record ID that must be present in the Layout
        if (_budgetPlanScenarioLocalizedName && !_budgetPlanScenarioRecId)
        {
            _budgetPlanScenarioRecId = BudgetPlanScenario::findByLocalizedName(_budgetPlanScenarioLocalizedName).RecId;
        }

        // Check if the Scenario exists in the Layout
        boolean doesExist = (BudgetPlanLayoutElement::findFirstByLayoutScenario(_budgetPlanLayoutRecId, _budgetPlanScenarioRecId) != null);

        if (!doesExist && _displayErrorMessage)
        {
            checkFailed(strFmt("@Budget:UnableToFindUniqueRecord", "@Budget:ScenarioNameLabel"));
        }

        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssociatedLayoutMappingAndCacheRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes associated <c>BudgetPlanLayoutMapping</c> and <c>BudgetPlanLayoutCache</c> records for a given <c>BudgetPlanLayout</c> record ID.
    /// </summary>
    /// <param name = "_layoutRecId"> The <c>BudgetPlanLayout</c> record ID used to delete associated records. </param>
    public static void deleteAssociatedLayoutMappingAndCacheRecords(BudgetPlanLayoutRecId _layoutRecId)
    {
        BudgetPlanLayoutMapping::deleteByLayout(_layoutRecId);
        BudgetPlanLayoutCache::deleteByLayout(_layoutRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionAttributeInLedgerDimensionSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a <c>FieldName</c> value is used in a <c>BudgetPlanLayout</c> records' ledger dimension set.
    /// </summary>
    /// <param name = "_dimensionAttribute"> The <c>DimensionAttributeRecId</c> value to search for in the ledger dimension set. </param>
    /// <param name = "_dimensionHierarchyId"> The <c>DimensionHierarchyId</c> record to retrieve the ledger dimension set. </param>
    /// <returns> true if the given <c>DimensionAttribute</c> value is found in the layouts' ledger dimension set; otherwise, false. </returns>
    public static boolean isDimensionAttributeInLedgerDimensionSet(DimensionAttributeRecId _dimensionAttribute, DimensionHierarchyId _dimensionHierarchyId)
    {
        boolean                 dimensionAttributeExistsInLedgerDimension;
        DimensionHierarchy      dimensionHierarchy;
        DimensionHierarchyLevel dimensionHierarchyLevel;

        select firstonly RecId from dimensionHierarchy
            where dimensionHierarchy.RecId == _dimensionHierarchyId
            exists join dimensionHierarchyLevel
                where dimensionHierarchyLevel.DimensionHierarchy == dimensionHierarchy.RecId
                    && dimensionHierarchyLevel.DimensionAttribute == _dimensionAttribute;

        if (dimensionHierarchy.RecId)
        {
            dimensionAttributeExistsInLedgerDimension = true;
        }

        return dimensionAttributeExistsInLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionIsColumnFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if one of the dimension attributes is also a column filter.
    /// </summary>
    /// <param name = "_dimensionHierarchyId"> The dimension focus to check the dimensions for. </param>
    /// <param name = "_layoutRecId"> The record ID of the <c>BudgetPlanLayout</c> record. </param>
    /// <param name = "_columnRecId"> The record ID of the <c>BudgetPlanElementDefinition</c> record to look for filters; optional. </param>
    /// <returns> true if any dimension from the dimension focus is used as a <c>BudetPlanColumnRule</c> filter; otherwise, false. </returns>
    public static boolean checkDimensionIsColumnFilter(
        DimensionHierarchyId                _dimensionHierarchyId,
        BudgetPlanLayoutRecId               _layoutRecId,
        BudgetPlanElementDefinitionRecId    _columnRecId = 0)
    {
        str dimensionAttrStr;

        if (!_dimensionHierarchyId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLayoutHelper, checkDimensionIsColumnFilter),
                                                                tableStr(DimensionHierarchy)));
        }
        if (!_layoutRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLayoutHelper, checkDimensionIsColumnFilter),
                                                                tableStr(BudgetPlanLayout)));
        }

        SetEnumerator dimensionAttributeSetEnumator = BudgetPlanLayoutHelper::getBudgetPlanLineDimensionList().getEnumerator();

        boolean dimensionFoundAsFilter;

        while (dimensionAttributeSetEnumator.moveNext())
        {
            DimensionAttribute dimensionAttribute = DimensionAttribute::findByName(dimensionAttributeSetEnumator.current());

            if (dimensionAttribute.RecId
                && BudgetPlanLayoutHelper::isDimensionAttributeInLedgerDimensionSet(dimensionAttribute.RecId, _dimensionHierarchyId))
            {
                boolean                 columnNotSpecified = prmIsDefault(_columnRecId);
                BudgetPlanColumnRule    columnRule;
                BudgetPlanLayoutElement layoutElement;

                dimensionFoundAsFilter = !columnNotSpecified && (BudgetPlanColumnRule::findFirstDimensionAttributeColumnRuleFilter(_columnRecId, dimensionAttribute.BackingEntityTableName) != null);

                if (dimensionFoundAsFilter)
                {
                    checkFailed("@Budget:CannotAddColumnWithFilterSameAsDimension");
                    break;
                }

                if (columnNotSpecified)
                {
                    select firstonly RecId from columnRule
                        where columnRule.TableName == dimensionAttribute.BackingEntityTableName
                        exists join layoutElement
                            where layoutElement.Layout              == _layoutRecId
                                && layoutElement.ElementDefinition  == columnRule.Column;

                    dimensionFoundAsFilter = columnRule.RecId;

                    if (dimensionFoundAsFilter)
                    {
                        checkFailed("@Budget:CannotAddDimensionSameAsColumnFilter");
                        break;
                    }
                }
            }
        }

        return dimensionFoundAsFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanLineDimensionList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the dimension attributes linked with the tables used in the Budget plan column rule.
    /// </summary>
    /// <returns>
    /// Set of the dimension attribute names.
    /// </returns>
    public static Set getBudgetPlanLineDimensionList()
    {
        DimensionAttribute dimensionAttribute;
        Set                dimensionAttributeSet = new Set(Types::String);

        while select Name from dimensionAttribute
            order by dimensionAttribute.Name
            where dimensionAttribute.BackingEntityTableName == tableStr(ProjTable)
                  || dimensionAttribute.BackingEntityTableName == tableStr(AssetTable)
                  || dimensionAttribute.BackingEntityTableName == tableStr(MainAccount)
        {
            dimensionAttributeSet.add(dimensionAttribute.Name);
        }

        return dimensionAttributeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldARowElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines for given <c>BudgetPlanLayout</c> record ID and <c>FieldName</c> value if the field is used as a <c>BudgetPlanRow</c>
    /// record or one of the segments in the <c>DimensionHierarchy</c> record.
    /// </summary>
    /// <param name = "_fieldName">
    /// The <c>FieldName</c> value to find.
    /// </param>
    /// <param name = "_budgetPlanLayoutRecId">
    /// The <c>BudgetPlanLayoutRecId</c> record ID to search for the field.
    /// </param>
    /// <param name = "_dimensionHierarchyId">
    /// The <c>DimensionHierarchyId</c> value to search in the case of a ledger dimension filter being checked; optional.
    /// </param>
    /// <returns>
    /// true if the layout has a row element for the field name specified; otherwise, false.
    /// </returns>
    public static boolean isFieldARowElement(FieldName _fieldName, BudgetPlanLayoutRecId _budgetPlanLayoutRecId, DimensionHierarchyId _dimensionHierarchyId = 0)
    {
        boolean                  fieldExistsAsRow;

        if (_fieldName == fieldStr(BudgetPlanLine, LedgerDimension))
        {
            if (BudgetPlanLayoutHelper::isDimensionAttributeInLedgerDimensionSet(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount), _dimensionHierarchyId))
            {
                fieldExistsAsRow = true;
            }
        }
        else
        {
            BudgetPlanRow            budgetPlanRow;
            BudgetPlanLayoutElement  budgetPlanLayoutElement;

            select firstOnly RecId from budgetPlanRow
                where budgetPlanRow.FieldName == _fieldName
                exists join budgetPlanLayoutElement
                    where budgetPlanLayoutElement.ElementDefinition == budgetPlanRow.RecId
                        && budgetPlanLayoutElement.Layout == _budgetPlanLayoutRecId;

            if (budgetPlanRow.RecId)
            {
                fieldExistsAsRow = true;
            }
        }

        return fieldExistsAsRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddNewElementInLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an element can be added in the layout.
    /// </summary>
    /// <param name = "_budgetPlanLayoutRecId"> The record ID of the <c>BudgetPlanLayout</c> record. </param>
    /// <param name = "_budgetPlanElementDefinitionRecId"> The record ID of the <c>BudgetPlanElementDefinition</c> record. </param>
    /// <returns> true if the column filter does not exist in the layout element; otherwise, false. </returns>
    public static boolean canAddNewElementInLayout(
        BudgetPlanLayoutRecId            _budgetPlanLayoutRecId,
        BudgetPlanElementDefinitionRecId _budgetPlanElementDefinitionRecId)
    {
        boolean canAdd;

        // Determines whether the element is a row element
        BudgetPlanRow budgetPlanRow = BudgetPlanRow::find(_budgetPlanElementDefinitionRecId);

        if (budgetPlanRow.RecId)
        {
            canAdd = !BudgetPlanLayoutHelper::isLayoutElementAFilter(_budgetPlanLayoutRecId, budgetPlanRow.FieldName);

            if (!canAdd)
            {
                warning("@Budget:CannotAddNewLineInLayoutForRowElement");
            }
        }
        else
        {
            canAdd = !BudgetPlanLayoutHelper::isFilterALayoutElement(_budgetPlanLayoutRecId, _budgetPlanElementDefinitionRecId);

            if (!canAdd)
            {
                warning("@Budget:CannotAddNewLineInLayoutForColumnElement");
            }

            canAdd = canAdd && !BudgetPlanLayoutHelper::checkDimensionIsColumnFilter(BudgetPlanLayout::find(_budgetPlanLayoutRecId).DimensionHierarchy, _budgetPlanLayoutRecId, _budgetPlanElementDefinitionRecId);
        }

        return canAdd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanEditColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current <c>BudgetPlanLineActiveView</c> field is editable.
    /// </summary>
    /// <param name = "_budgetPlanLayoutRecId"> The record ID of <c>BudgetPlanLayout</c>. </param>
    /// <param name = "_budgetPlanLineActiveViewFieldId"> The field ID of <c>BudgetPlanLineActiveView</c> field to check for editability. </param>
    /// <param name = "_displayErrorMessage"> Boolean determining to show the error message; optional. </param>
    /// <returns> true if the column is editable; otherwise, false. </returns>
    public static boolean checkCanEditColumn(
        BudgetPlanLayoutRecId   _budgetPlanLayoutRecId,
        FieldId                 _budgetPlanLineActiveViewFieldId,
        boolean                 _displayErrorMessage = true)
    {
        boolean canEditColumn;
        BudgetPlanLayoutMapping layoutMapping = BudgetPlanLayoutMapping::findByLayoutFieldNum(_budgetPlanLayoutRecId, _budgetPlanLineActiveViewFieldId);

        canEditColumn = layoutMapping.IsEditable;

        if (!canEditColumn && _displayErrorMessage)
        {
            error(strFmt("@Budget:ModifyingUneditableLayoutColumn", layoutMapping.FieldLabel));
        }

        return canEditColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLayoutElementAFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether any column filter exists in the layout elements for the passed-in row element.
    /// </summary>
    /// <param name = "_budgetPlanLayoutRecId"> The record ID of the <c>BudgetPlanLayout</c> record. </param>
    /// <param name = "_fieldName"> The value of the <c>FieldName</c> field of the <c>BudgetPlanRow</c> table. </param>
    /// <returns> true if the column filter exists in the layout element; otherwise, false. </returns>
    public static boolean isLayoutElementAFilter(BudgetPlanLayoutRecId _budgetPlanLayoutRecId, FieldName _fieldName)
    {
        BudgetPlanColumnRule    budgetPlanColumnRule;
        BudgetPlanColumn        budgetPlanColumn;
        BudgetPlanLayoutElement budgetPlanLayoutElement;
        FieldName               budgetPlanColumnFieldName;
        TableName               budgetPlanColumnTableName;

        [budgetPlanColumnTableName, budgetPlanColumnFieldName] = BudgetPlanLineFieldFilterMapping::getColumnFilterTableFieldMappingForRowElement(_fieldName);

        select firstonly budgetPlanColumnRule
            order by budgetPlanColumnRule.RecId
                exists join budgetPlanColumn
                    where budgetPlanColumnRule.Column == budgetPlanColumn.RecId
                        && budgetPlanColumnRule.FieldName == budgetPlanColumnFieldName
                        && budgetPlanColumnRule.TableName == budgetPlanColumnTableName
                        && budgetPlanColumnRule.Operator != BudgetPlanExpressionOperator::GreaterThan
                        && budgetPlanColumnRule.Operator != BudgetPlanExpressionOperator::LessThan
                        exists join budgetPlanLayoutElement
                            where budgetPlanColumn.RecId == budgetPlanLayoutElement.ElementDefinition
                                && budgetPlanLayoutElement.Layout == _budgetPlanLayoutRecId;

        return budgetPlanColumnRule.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFilterALayoutElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the passed-in column contains filters for layout's row elements.
    /// </summary>
    /// <param name = "_budgetPlanLayoutRecId"> The record ID of the <c>BudgetPlanLayout</c> record. </param>
    /// <param name = "_budgetPlanElementDefinitionRecId"> The record ID of the <c>BudgetPlanElementDefinition</c> record. </param>
    /// <returns> true, if the column filter exists for any layout's row element; otherwise, false. </returns>
    public static boolean isFilterALayoutElement(
        BudgetPlanLayoutRecId            _budgetPlanLayoutRecId,
        BudgetPlanElementDefinitionRecId _budgetPlanElementDefinitionRecId)
    {
        BudgetPlanRow           budgetPlanRow;
        FieldName               budgetPlanColumnFieldName;
        TableName               budgetPlanColumnTableName;
        BudgetPlanLayoutElement budgetPlanLayoutElement;
        boolean                 doesExist;

        while select FieldName from budgetPlanRow
            exists join budgetPlanLayoutElement
            where budgetPlanRow.RecId == budgetPlanLayoutElement.ElementDefinition
                && budgetPlanLayoutElement.Layout == _budgetPlanLayoutRecId
        {
            [budgetPlanColumnTableName, budgetPlanColumnFieldName] = BudgetPlanLineFieldFilterMapping::getColumnFilterTableFieldMappingForRowElement(budgetPlanRow.FieldName);

            doesExist = BudgetPlanColumnRule::findFirstColumnRuleForColumnTableField(
                            _budgetPlanElementDefinitionRecId,
                            budgetPlanColumnTableName,
                            budgetPlanColumnFieldName).RecId;

            if (doesExist)
            {
                break;
            }
        }

        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLayoutExistsInHeaderSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a <c>BudgetPlanLayout</c> record exists in the setup for a <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <param name = "_budgetPlanHeader"> The <c>BudgetPlanHeader</c> record to check. </param>
    /// <param name = "_budgetPlanLayout"> The <c>BudgetPlanLayout</c> table buffer to check. </param>
    /// <param name = "_showWarning"> A boolean to determine to show a warning message; optional. </param>
    /// <returns> true if the layout exists in the setup; otherwise, false. </returns>
    public static boolean checkLayoutExistsInHeaderSetup(
        BudgetPlanHeader _budgetPlanHeader,
        BudgetPlanLayout _budgetPlanLayout,
        boolean          _showWarning = false)
    {
        if (_budgetPlanHeader == null)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLayoutHelper, checkLayoutExistsInHeaderSetup),
                                                               tableStr(BudgetPlanHeader)));
        }
        else if (_budgetPlanLayout == null)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLayoutHelper, checkLayoutExistsInHeaderSetup),
                                                               tableStr(BudgetPlanLayout)));
        }

        boolean                 layoutExists;
        BudgetPlanningStageRule budgetPlanningStageRule = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                                _budgetPlanHeader.BudgetPlanningProcess,
                                                                _budgetPlanHeader.BudgetingOrganization,
                                                                _budgetPlanHeader.BudgetPlanningStage);

        if (budgetPlanningStageRule.Layout == _budgetPlanLayout.RecId
            || BudgetPlanAlternateLayout::existsByLayoutStageRule(_budgetPlanLayout.RecId, budgetPlanningStageRule.RecId))
        {
            layoutExists = true;
        }

        if (!layoutExists && _showWarning)
        {
            warning(strFmt("@Budget:LayoutDoesNotExistInSetup", _budgetPlanLayout.Name));
        }

        return layoutExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetHeaderLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the layout field of the <c>BudgetPlanHeader</c> buffer to the default stage rule layout.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId"> The record ID of the <c>BudgetPlanHeader</c> record to update. </param>
    public static void resetHeaderLayout(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLayoutHelper, resetHeaderLayout),
                                                               extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }

        BudgetPlanHeader header = BudgetPlanHeader::find(_budgetPlanHeaderRecId, true);
        ttsbegin;
        header.Layout = BudgetPlanningStageRule::findByProcessOrganizationStage(
                            header.BudgetPlanningProcess,
                            header.BudgetingOrganization,
                            header.BudgetPlanningStage).Layout;
        header.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLayoutCacheAndMappingByElementDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records in the <c>BudgetPlanLayoutCache</c> and <c>BudgetPlanLayoutMapping</c> tables that contain layout
    /// elements with a given <c>BudgetPlanElementDefinition</c> record ID.
    /// </summary>
    /// <param name = "_elementDefinitionRecId"> The <c>BudgetPlanElementDefinition</c> record ID. </param>
    public static void deleteLayoutCacheAndMappingByElementDefinition(BudgetPlanElementDefinitionRecId _elementDefinitionRecId)
    {
        BudgetPlanLayoutElement layoutElement;
        BudgetPlanLayoutCache   layoutCache;
        BudgetPlanLayoutMapping layoutMapping;
        LanguageId              currentUserLanguage = currentUserLanguage();

        if (_elementDefinitionRecId)
        {
            delete_from layoutCache
                exists join layoutElement
                    where layoutElement.ElementDefinition   == _elementDefinitionRecId
                        && layoutElement.Layout             == layoutCache.Layout;

            delete_from layoutMapping
                exists join layoutElement
                    where layoutElement.ElementDefinition   == _elementDefinitionRecId
                        && layoutElement.Layout             == layoutMapping.Layout
                        && layoutMapping.LanguageId         == currentUserLanguage;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLayoutMappingRecordsByElementDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>BudgetPlanLayoutMapping</c> records for all layouts which contain the given <c>BudgetPlanElementDefinition</c> record ID as a layout element.
    /// </summary>
    /// <param name = "_elementDefinitionRecId"> The <c>BudgetPlanElementDefinition</c> record ID. </param>
    public static void createLayoutMappingRecordsByElementDefinition(BudgetPlanElementDefinitionRecId _elementDefinitionRecId)
    {
        BudgetPlanLayoutElement layoutElement;

        while select Layout from layoutElement
            where layoutElement.ElementDefinition == _elementDefinitionRecId
        {
            BudgetPlanLayoutManager::loadLayoutMapping(layoutElement.Layout);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the <c>BudgetPlanLayoutMapping</c> and <c>BudgetPLanLineDefaultRowTemplate</c> records for various parameter scenarios.
    /// </summary>
    /// <param name = "_deleteType"> The <c>BudgetPlanMappingCacheDeleteType</c> flag to determine which delete method to call. </param>
    /// <param name = "_deleteRecId"> The <c>RecId</c> in which to pass to the delete method. </param>
    /// <param name = "_refreshType"> The <c>BudgetPlanMappingRefreshType</c> flag to determine which create method to call. </param>
    /// <param name = "_refreshRecId"> The <c>RecId</c> in which to pass to the create method. </param>
    /// <param name = "_refreshTemplates"> Boolean flag which determines to refresh the <c>BudgetPlanLineDefaultRowTemplate</c> records; optional. </param>
    /// <param name = "_languageId"> The <c>LanguageId</c> value in which to pass to the delete method; optional. </param>
    public static void refreshLayout(
        BudgetPlanMappingCacheDeleteType    _deleteType,
        RecId                               _deleteRecId,
        BudgetPlanMappingRefreshType        _refreshType,
        RecId                               _refreshRecId,
        boolean                             _refreshTemplates = true,
        LanguageId                          _languageId = BudgetPlanningConstants::emptyString)
    {
        if (_deleteRecId && _refreshRecId)
        {
            switch (_deleteType)
            {
                case BudgetPlanMappingCacheDeleteType::DeleteMappingByLayout:
                    BudgetPlanLayoutMapping::deleteByLayout(_deleteRecId);
                    break;
                case BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByElement:
                    BudgetPlanLayoutHelper::deleteLayoutCacheAndMappingByElementDefinition(_deleteRecId);
                    break;
                case BudgetPlanMappingCacheDeleteType::DeleteMappingByColumnLanguage:
                    BudgetPlanLayoutMapping::deleteByColumnLanguage(_deleteRecId, _languageId);
                    break;
                case BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByLayout:
                    BudgetPlanLayoutHelper::deleteAssociatedLayoutMappingAndCacheRecords(_deleteRecId);
                    break;
                default:
                    throw error("@Budget:BudgetPlanningInvalidRefreshFlag");
            }

            switch (_refreshType)
            {
                case BudgetPlanMappingRefreshType::RefreshByLayout:
                    BudgetPlanLayoutManager::loadLayoutMapping(_refreshRecId);

                    if (_refreshTemplates)
                    {
                        BudgetPlanLineDefaultRowTemplateManager::refreshTemplateRecordsForLayout(_refreshRecId);
                    }
                    break;
                case BudgetPlanMappingRefreshType::RefreshByElement:
                    BudgetPlanLayoutHelper::createLayoutMappingRecordsByElementDefinition(_refreshRecId);

                    if (_refreshTemplates)
                    {
                        BudgetPlanLineDefaultRowTemplateManager::refreshTemplateRecordsForColumn(_refreshRecId);
                    }
                    break;
                default:
                    throw error("@Budget:BudgetPlanningInvalidRefreshFlag");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapElementPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Swaps the position of the two <c>BudgetPlanLayoutElement</c>s passed in.
    /// </summary>
    /// <param name = "_fromPosition"> The <c>BudgetPlanLayoutElement</c> being moved. </param>
    /// <param name = "_toPosition"> The <c>BudgetPlanLayoutElement</c> being displaced. </param>
    public static void swapElementPosition(
        BudgetPlanLayoutElement _fromPosition,
        BudgetPlanLayoutElement _toPosition)
    {
        BudgetPlanLayoutElement updateLowerPositionElement;

        ttsbegin;

        update_recordset updateLowerPositionElement
            setting Ordinal = (updateLowerPositionElement.Ordinal * BudgetPlanningConstants::negativeOne)
            where updateLowerPositionElement.RecId == _toPosition.RecId;

        _toPosition.reread();
        _fromPosition.reread();
        _fromPosition.selectForUpdate();
        _fromPosition.Ordinal = _toPosition.Ordinal * BudgetPlanningConstants::negativeOne;
        _fromPosition.write();

        _toPosition.selectForUpdate();
        _toPosition.Ordinal = _fromPosition.Ordinal - 1;
        _toPosition.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLayoutFocusCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes cached dimension focus items for the <c>BudgetPlanLayout</c> record ID specified.
    /// </summary>
    /// <param name = "_budgetPlanlayoutRecId"> The record ID of the <c>BudgetPlanLayout</c> to clear the cached items for. </param>
    public static void clearLayoutFocusCache(BudgetPlanLayoutRecId _budgetPlanlayoutRecId)
    {
        BudgetPlanLayoutMapping layoutMapping;
        LanguageId              currentUserLanguage = currentUserLanguage();
        DimensionAttribute      dimensionAttribute;

        while select FieldLabel, ElementIndex
                from layoutMapping
                where layoutMapping.Layout      == _budgetPlanlayoutRecId
                    && layoutMapping.LanguageId == currentUserLanguage
                    && layoutMapping.Ordinal    == 0
        {
            dimensionAttribute = DimensionAttribute::findByLocalizedName(layoutMapping.FieldLabel);

            BudgetPlanCache::removeValue(
                BudgetPlanCacheScope::DimensionAttributeIndex,
                [_budgetPlanlayoutRecId, dimensionAttribute.RecId]);
            BudgetPlanCache::removeValue(
                BudgetPlanCacheScope::DimensionAttribute,
                [_budgetPlanlayoutRecId, layoutMapping.ElementIndex]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLayoutForViewInitialization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the layout for the budget plan document,The system throw error when the document contains line having currency different from header
    /// and the layout does not contains the layout element.
    /// </summary>
    /// <param name = "_budgetPlanHeader">
    /// The <c>BudgetPlanHeader</c> record to use to generate the internal parameter values.
    /// </param>
    public static void validateLayoutForViewInitialization(BudgetPlanHeader _budgetPlanHeader)
    {
        BudgetPlanRowRecId       currencyElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, TransactionCurrencyCode)).RecId;
        BudgetPlanLayoutElement  currencyLayoutElement          = BudgetPlanLayoutElement::findByLayoutElementDefinition(_budgetPlanHeader.Layout, currencyElementDefinitionRecId);

        if (!currencyLayoutElement.RecId
            && BudgetPlanLineItemLine::doesLineCurrencyDifferFromDefault(_budgetPlanHeader.RecId, _budgetPlanHeader.Currency)
            && !BudgetPlanLayoutHelper::doAllColumnsHaveCurrencyFilter(_budgetPlanHeader.Layout))
        {
            throw error("@Budget:LineCurrencyIsDifferentFromHeader");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGenerateTemplateForLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a template can be generated for a given layout. A template can be generated when the layout has at
    /// least one column type <c>BudgetPlanLayoutElement</c> record with its <c>InWorksheet</c> field set to yes.
    /// </summary>
    /// <param name = "_layoutRecId"> The <c>BudgetPlanLayout</c> record ID. </param>
    /// <returns> true if a template can be generated; otherwise, false. </returns>
    public static boolean canGenerateTemplateForLayout(BudgetPlanLayoutRecId _layoutRecId)
    {
        BudgetPlanLayoutElement budgetPlanLayoutElement;
        BudgetPlanColumn        budgetPlanColumn;

        select firstonly RecId from budgetPlanLayoutElement
            exists join budgetPlanColumn
                where budgetPlanColumn.RecId == budgetPlanLayoutElement.ElementDefinition
                    && budgetPlanLayoutElement.Layout == _layoutRecId
                    && budgetPlanLayoutElement.InWorksheet == NoYes::Yes;

        return budgetPlanLayoutElement.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a layout can be modified based on a template existing for the given layout and it being enabled for mass update.
    /// </summary>
    /// <param name = "_layoutRecId"> The <c>BudgetPlanLayout</c> record ID. </param>
    /// <returns> true, if the layout can be modified; otherwise, false. </returns>
    public static boolean canModifyLayout(BudgetPlanLayoutRecId _layoutRecId)
    {
        BudgetPlanLayout layout = BudgetPlanLayout::find(_layoutRecId);
        if (!layout)
        {
            throw error(strFmt("@Budget:MissingParameterValue",
                                staticMethodStr(BudgetPlanLayoutHelper, canModifyLayout),
                                extendedTypeId2pname(extendedTypeNum(BudgetPlanLayoutRecId))));
        }

        return !layout.UseBudgetPlanLineMassUpdate && !BudgetPlanLayoutHelper::existsTemplate(layout.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a template exists for a layout.
    /// </summary>
    /// <param name = "_layoutName">Name of the Layout.</param>
    /// <returns>true, if the layout has a template; otherwise, false.</returns>
    private static boolean existsTemplate(BudgetPlanLayoutName _layoutName)
    {
        return DocuTemplate::findExactTemplateWithRegion(
                    OfficeAppApplicationType::Excel,
                    _layoutName,
                    BudgetPlanningConstants::emptyString,
                    BudgetPlanningConstants::emptyString,
                    BudgetPlanningConstants::emptyString).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesLayoutContainEditableCurrencyElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the layout contains the editable currency element.
    /// </summary>
    /// <param name = "_budgetPlanLayoutRecId">The record ID of the <c>BudgetPlanLayout</c> table.</param>
    /// <returns>true if the layout contains the editable currency element; otherwise, false.</returns>
    public static boolean doesLayoutContainEditableCurrencyElement(BudgetPlanLayoutRecId _budgetPlanLayoutRecId)
    {
        BudgetPlanRowRecId       currencyElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, TransactionCurrencyCode)).RecId;
        BudgetPlanLayoutElement  currencyLayoutElement          = BudgetPlanLayoutElement::findByLayoutElementDefinition(_budgetPlanLayoutRecId, currencyElementDefinitionRecId);

        return (currencyLayoutElement.RecId && currencyLayoutElement.IsEditable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrencyInLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the layout contains the currency element.
    /// </summary>
    /// <param name = "_budgetPlanLayoutRecId"> The record ID of the <c>BudgetPlanLayout</c> record. </param>
    /// <returns> true if the element exists; otherwise, false. </returns>
    public static boolean isCurrencyInLayout(BudgetPlanLayoutRecId _budgetPlanLayoutRecId)
    {
        BudgetPlanRowRecId       currencyElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, TransactionCurrencyCode)).RecId;
        BudgetPlanLayoutElement  currencyLayoutElement          = BudgetPlanLayoutElement::findByLayoutElementDefinition(_budgetPlanLayoutRecId, currencyElementDefinitionRecId);

        return currencyLayoutElement.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsMainAccountFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>BudgetPlanLayout</c>'s current column contains a filter on main account.
    /// </summary>
    /// <param name = "_budgetPlanLayoutRecId"> The record ID of a <c>BudgetPlanLayout</c> record. </param>
    /// <param name = "_ordinal"> The current position of the column to check for filter presence. </param>
    /// <returns> true if the column contains a main account filter; otherwise, false. </returns>
    public static boolean containsMainAccountFilter(
        BudgetPlanLayoutRecId       _budgetPlanLayoutRecId,
        BudgetPlanElementOrdinal    _ordinal)
    {
        BudgetPlanLayoutElement budgetPlanLayoutElement = BudgetPlanLayoutElement::findByLayoutOrdinal(_budgetPlanLayoutRecId, _ordinal);
        BudgetPlanColumnRule    budgetPlanColumnRule = BudgetPlanColumnRule::findFirstDimensionAttributeColumnRuleFilter(budgetPlanLayoutElement.ElementDefinition, tableStr(MainAccount));

        return budgetPlanColumnRule.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAllColumnsHaveCurrencyFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all the <c>BudgetPlanLayout</c>'s monetary columns contain a currency filter.
    /// </summary>
    /// <param name = "_budgetPlanLayoutRecId"> The record ID of a <c>BudgetPlanLayout</c> record. </param>
    /// <returns> true if all monetary columns contain a currency filter; otherwise, false. </returns>
    public static boolean doAllColumnsHaveCurrencyFilter(BudgetPlanLayoutRecId _budgetPlanLayoutRecId)
    {
        BudgetPlanColumn budgetPlanColumn;
        BudgetPlanColumnRule budgetPlanColumnRule;
        BudgetPlanLayout budgetPlanLayout;
        BudgetPlanLayoutElement budgetPlanLayoutElement;
        BudgetPlanScenario budgetPlanScenario;

        select firstonly RecId from budgetPlanColumn
            exists join budgetPlanScenario
                where budgetPlanScenario.RecId == budgetPlanColumn.Scenario
                   && budgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary
            exists join budgetPlanLayoutElement
                where budgetPlanLayoutElement.Layout == _budgetPlanLayoutRecId
                   && budgetPlanLayoutElement.ElementDefinition == budgetPlanColumn.RecId
            notexists join budgetPlanColumnRule
                where budgetPlanColumnRule.Column == budgetPlanColumn.RecId
                  && budgetPlanColumnRule.TableName == tableStr(BudgetPlanLine)
                  && budgetPlanColumnRule.FieldName == fieldStr(BudgetPlanLine, TransactionCurrencyCode);

        return budgetPlanColumn.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLayoutCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>BudgetPlanLayoutCache</c> table based on the given <c>BudgetPlanLayout</c> reference.
    /// </summary>
    /// <param name = "_layoutRecId">The <c>BudgetPlanLayout</c> record ID. </param>
    public static void populateLayoutCache(BudgetPlanLayoutRecId _layoutRecId)
    {
        BudgetPlanningProcess       budgetPlanningProcess;
        BudgetPlanningStageRule     budgetPlanningStageRule;
        BudgetPlanAlternateLayout   budgetPlanAlternateLayout;
        BudgetPlanLayoutCache       layoutCache;

        while select RecId, BudgetCycle from budgetPlanningProcess
            join Layout from budgetPlanningStageRule
                where budgetPlanningStageRule.BudgetPlanningProcess == budgetPlanningProcess.RecId
                    outer join BudgetPlanLayout from budgetPlanAlternateLayout
                        where budgetPlanAlternateLayout.BudgetPlanningStageRule == budgetPlanningStageRule.RecId
        {
            if (budgetPlanningStageRule.Layout == _layoutRecId || budgetPlanAlternateLayout.BudgetPlanLayout == _layoutRecId)
            {
                layoutCache = BudgetPlanLayoutCache::findByLayoutBudgetCycle(_layoutRecId, budgetPlanningProcess.BudgetCycle);

                if (!layoutCache)
                {
                    BudgetPlanLayoutManager layoutManager = BudgetPlanLayoutManager::newFromBudgetPlanningProcessAndLayout(budgetPlanningProcess.RecId, _layoutRecId);

                    layoutManager.findOrCreateLayoutCache();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedInBudgetPlanLayoutTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is being used in a budget plan layout with a generated template.
    /// </summary>
    /// <param name = "_dimensionHierarchyRecId"> The <c>DimensionHierarchy</c> to be tested for usage. </param>
    /// <param name = "_result"> true if it is being used; otherwise, false. </param>
    [SubscribesTo(tablestr(DimensionHierarchy), delegatestr(DimensionHierarchy, isUsedInBudgetPlanLayoutTemplate))]
    public static void isUsedInBudgetPlanLayoutTemplate(RecId _dimensionHierarchyRecId, EventHandlerResult _result)
    {
        BudgetPlanLayout    budgetPlanLayout;
        DocuTemplate        layoutDocuTemplate;

        if (_dimensionHierarchyRecId)
        {
            select firstonly RecId from budgetPlanLayout
                where budgetPlanLayout.DimensionHierarchy == _dimensionHierarchyRecId
                    exists join layoutDocuTemplate
                        where layoutDocuTemplate.TemplateType == OfficeAppApplicationType::Excel
                            && layoutDocuTemplate.TemplateID == budgetPlanLayout.Name
                            && layoutDocuTemplate.LegalEntityID == BudgetPlanningConstants::emptyString
                            && layoutDocuTemplate.LanguageID == BudgetPlanningConstants::emptyString;
        }

        _result.result(budgetPlanLayout.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the layouts using the dimension hierarchy that changed.
    /// </summary>
    /// <param name = "_dimensionHierarchyRecId"> The <c>DimensionHierarchy</c> to be tested for usage. </param>
    /// <param name = "_result"> true if it is being used; otherwise, false. </param>
    [SubscribesTo(tablestr(DimensionHierarchy), delegatestr(DimensionHierarchy, postValidateWrite))]
    public static void postValidateWrite(DimensionHierarchy _dimensionHierarchy, EventHandlerResult _result)
    {
        BudgetPlanLayout    budgetPlanLayout;
        DocuTemplate        layoutDocuTemplate;

        if (_dimensionHierarchy)
        {
            while select RecId from budgetPlanLayout
                where budgetPlanLayout.DimensionHierarchy == _dimensionHierarchy.RecId
                    notexists join layoutDocuTemplate
                        where layoutDocuTemplate.TemplateType   == OfficeAppApplicationType::Excel
                            && layoutDocuTemplate.TemplateID    == budgetPlanLayout.Name
                            && layoutDocuTemplate.LegalEntityID == BudgetPlanningConstants::emptyString
                            && layoutDocuTemplate.LanguageID    == BudgetPlanningConstants::emptyString
            {
                BudgetPlanLayoutHelper::refreshLayout(BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByLayout, budgetPlanLayout.RecId, BudgetPlanMappingRefreshType::RefreshByLayout, budgetPlanLayout.RecId);
                BudgetPlanLayoutDescriptionElement::deleteSelectedDimensionHierarchyFields(budgetPlanLayout.RecId);
            }
        }

        _result.result(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>