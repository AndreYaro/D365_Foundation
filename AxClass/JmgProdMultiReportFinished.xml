<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProdMultiReportFinished</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgProdMultiReportFinished</c> class is used to report productions
/// as finished from the registration form.
/// </summary>
public class JmgProdMultiReportFinished extends ProdMultiReportFinished implements BatchRetryable
{
    boolean     userCanceled;
    InventDimId inventDimId;
    private FormRun                   callerForm;
    private JmgRegistrationParameters feedback;
    private JmgProdParametersDim      jmgProdParametersDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of batch journal types.
    /// </summary>
    /// <returns>
    ///    true if the class is set to be shown in the list of batch journal types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class for which the same parameters can repeatedly
    ///    be used. The dialog box can be shown and the parameters can be changed, but parameters of some
    ///    classes might build on data that is only valid for a short time. Not all classes can be run two
    ///    times with the same parameters. If the <c>canGoBatch</c> method returns false, this method will not
    ///    have any effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSignDocument</Name>
				<Source><![CDATA[
    protected void checkSignDocument()
    {
        // NOTE: digital signatures are not supported in shop floor functionality
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Disables controls on the dialog, which the user should not have access to when reporting
    ///    productions as finished from Manufacturing execution.
    /// </summary>
    /// <param name="dialog">
    ///    The dialog on which to disable controls.
    /// </param>
    public void dialogPostRun(DialogRunbase dialog)
    {
        FormRun         fr;
        FormDataSource  fds;

        super(dialog);

        fr = dialog.formRun();

        // User should not be able to add or delete records
        fds = fr.dataSource(
            tableStr(ProdParmReportFinished)
        );

        if (!this.pmfProdTable() || this.pmfProdTable().ProdType != ProdType::Process)
        {
            fds.allowCreate(false);
            fds.allowDelete(false);

            // All fields containing on data from registration should be locked.
            // These are ProdId, EndJob, QtyGood, QtyError, TransDate
            fds.object(fieldId2Ext(fieldNum(ProdParmReportFinished, ProdId), 1)).allowEdit(false);
            fds.object(fieldId2Ext(fieldNum(ProdParmReportFinished, EndJob), 1)).allowEdit(false);
            fds.object(fieldId2Ext(fieldNum(ProdParmReportFinished, QtyGood), 1)).allowEdit(false);
            fds.object(fieldId2Ext(fieldNum(ProdParmReportFinished, QtyError), 1)).allowEdit(false);
            fds.object(fieldId2Ext(fieldNum(ProdParmReportFinished, TransDate), 1)).allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProdParmReportFinished</c> record to use when reporting
    /// productions as finished from Manufacturing Execution.
    /// </summary>
    /// <param name="_prodParmReportFinished">
    /// the <c>ProdParmReportFinished</c> record to initialize.
    /// </param>
    void initParmBuffer(ParmBuffer _prodParmReportFinished)
    {
        ProdParmReportFinished  prodParmReportFinished = _prodParmReportFinished;

        jmgProdParametersDim    = JmgProdParametersDim::find(inventDimId);

        if (jmgProdParametersDim.ReportFinishUseSFCParameters == NoYes::Yes)
        {
            prodParmReportFinished.data(standardParmReportFinished);

            prodParmReportFinished.RouteJournalNameId       = jmgProdParametersDim.ReportFinishRouteJournalNameId;
            prodParmReportFinished.RouteAutoConsump         = jmgProdParametersDim.ReportFinishRouteAutoConsump;
            prodParmReportFinished.EndRouteCard             = jmgProdParametersDim.ReportFinishEndRouteCard;
            prodParmReportFinished.bomJournalNameId         = jmgProdParametersDim.ReportFinishBOMJournalNameId;
            prodParmReportFinished.bomAutoConsump           = jmgProdParametersDim.ReportFinishBOMAutoConsump;
            prodParmReportFinished.EndPicklist              = jmgProdParametersDim.ReportFinishEndPicklist;
            prodParmReportFinished.ProdJournalNameId        = jmgProdParametersDim.ReportFinishProdJournalNameId;
            prodParmReportFinished.EndJob                   = jmgProdParametersDim.ReportFinishEndJob;
            prodParmReportFinished.AcceptError              = jmgProdParametersDim.ReportFinishAcceptError;
        }
        else
        {
            super(prodParmReportFinished);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmSFC</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes SFC specific parameters.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDim</c> record ID of the site currently reporting productions as finished.
    /// </param>
    public void initParmSFC(InventDimId _inventDimId)
    {
        userCanceled = false;
        this.getLast();
        this.initParmId();
        inventDimId = _inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserCanceled</Name>
				<Source><![CDATA[
    public boolean parmUserCanceled(boolean _value = userCanceled)
    {
        userCanceled = _value;
        return userCanceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerForm</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal FormRun parmCallerForm(FormRun _callerForm = callerForm)
    {
        callerForm = _callerForm;
        return callerForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegistrationParametersFeedback</Name>
				<Source><![CDATA[
    public JmgRegistrationParameters parmRegistrationParametersFeedback(JmgRegistrationParameters _feedback = feedback)
    {
        feedback = _feedback;
        return feedback;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOperationsReportedAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if given operations has reported as finished status.
    /// </summary>
    /// <returns>true if operations be reported as finished at quantity or status level; otherwise, false.</returns>
    [Hookable(false)]
    protected boolean isOperationsReportedAsFinished()
    {
        if (!jmgProdParametersDim)
        {
            jmgProdParametersDim = JmgProdParametersDim::find(inventDimId);
        }

        return jmgProdParametersDim.ReportFinishStatus == JmgProdStatusUpdateReportFinished::Qty ||
            jmgProdParametersDim.ReportFinishStatus == JmgProdStatusUpdateReportFinished::QtyOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCoByProduct</Name>
				<Source><![CDATA[
    protected void insertCoByProduct(ProdParmReportFinished  _coByParmBuffer,  ProdParmReportFinished  _prodParmReportFinished, boolean _initFromParmBuffer)
    {
        if (!this.parmCallerForm())
        {
            super(_coByParmBuffer, _prodParmReportFinished, _initFromParmBuffer);
            return;
        }

        switch(this.parmCallerForm().name())
        {
            case formstr(JmgRegistrationTouch):
            case formstr(JmgRegistration):
                super(_coByParmBuffer, _prodParmReportFinished, _initFromParmBuffer);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdParmReportFinishedInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>InventDim</c> for production order parameter with license plate and batch number.
    /// The license plate and batch number will be created if they are not in the system.
    /// </summary>
    /// <param name = "_itemId">
    /// The reported item Id.
    /// </param>
    /// <param name = "_prodParmReportFinishedInventDimId">
    /// Default <c>inventDimId</c> on the <c>ProdParmReportFinished</c> object. 
    /// </param>
    /// <param name = "_whsLicensePlateId">
    /// The reported license plate.
    /// </param>
    /// <param name = "_inventBatchId">
    /// The reported batch number
    /// </param>
    /// <returns>
    /// An <c>InventDim</c> object to be used for reported production order parameter.
    /// </returns>
    [Hookable(false)]
    internal static InventDim initProdParmReportFinishedInventDim(ItemId _itemId, InventDimId _prodParmReportFinishedInventDimId, WHSLicensePlateId _whsLicensePlateId, InventBatchId _inventBatchId)
    {
        InventDim prodParmReportFinishedInventDim = InventDim::find(_prodParmReportFinishedInventDimId);
        InventBatch prodParmReportFinishedInventBatch;

        if (_whsLicensePlateId)
        {
            // create new license plate, if it doesn't exist
            WHSLicensePlate::createLicensePlate(_whsLicensePlateId);
        }

        if (_inventBatchId)
        {
            prodParmReportFinishedInventBatch = InventBatch::findOrCreateWithProdDate(_inventBatchId, _itemId, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        }

        prodParmReportFinishedInventDim.LicensePlateId = _whsLicensePlateId;
        prodParmReportFinishedInventDim.inventBatchId = prodParmReportFinishedInventBatch.inventBatchId;

        prodParmReportFinishedInventDim = InventDim::findOrCreate(prodParmReportFinishedInventDim);

        return prodParmReportFinishedInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJmgSerialNumberSpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>JmgSerialNumberSpecification</c> records based on the <c>ProdParmReportFinished</c> record.
    /// </summary>
    /// <param name = "_prodParmReportFinished">
    /// The buffer for parameters to report a production order as finished.
    /// </param>
    /// <param name = "_jobId">
    /// Represents production jobId.
    /// </param>
    /// <param name = "_prodFinished">
    /// true if the production job is being reported as finished; otherwise, false.
    /// </param>
    [Hookable(false)]
    internal void initializeJmgSerialNumberSpecification(
        ProdParmReportFinished _prodParmReportFinished,
        JmgJobId               _jobId,
        boolean                _prodFinished)
    {
        if (!this.isOperationsReportedAsFinished())
        {
            return;
        }

        int numberOfReportingSerialNumbers = this.getNumberOfReportingSerialNumber(_jobId, _prodParmReportFinished.ItemId, _prodParmReportFinished.InventTransId);
        
        // Report errors from previous operations. Relevant only for main products
        if (_prodFinished
            && _prodParmReportFinished.PmfProductType != PmfProductType::Co_Product
            && _prodParmReportFinished.PmfProductType != PmfProductType::By_Product)
        {
            if (this.isOperationsReportedAsFinished())
            {
                container prevReportedErrorQty        = ProdRouteTrans::qtyErrorAndCWQtyErrorAtAndBeforeOpr(_prodParmReportFinished.ProdId, JmgJobTable::find(_jobId).OprNum, false);
                _prodParmReportFinished.QtyError      = conpeek(prevReportedErrorQty, 1);
                _prodParmReportFinished.PdsCWBatchErr = conpeek(prevReportedErrorQty, 2);
            }
      
            // Mark Report as Finished if no serial number reporting now
            if (!numberOfReportingSerialNumbers)
            {
                _prodParmReportFinished.EndJob = true;
            }

            _prodParmReportFinished.update();
        }

        InventDim prodParmReportFinishedInventDim = InventDim::find(_prodParmReportFinished.InventDimId);
        JmgTmpSerialNumberSpecification localSerialNumberSpecification;
        localSerialNumberSpecification.setTmpData(this.parmRegistrationParametersFeedback().parmSerialNumberSpecification());

        InventQty qtyError;
        InventQty pdsCWQtyError;
        int currentNumberOfSerialNumbers;
        JmgSerialNumberSpecification serialNumberSpec;
        RecordInsertList jmgSerialNumberSpecList = new RecordInsertList(tableNum(JmgSerialNumberSpecification));
        
        while select localSerialNumberSpecification
            where    localSerialNumberSpecification.JobId         == _jobId &&
                     localSerialNumberSpecification.ItemId        == _prodParmReportFinished.ItemId
        {
            serialNumberSpec.clear();
            serialNumberSpec.initFromJmgTmpSerialNumberSpecification(localSerialNumberSpecification);
            serialNumberSpec.ParmId         = _prodParmReportFinished.ParmId;
            serialNumberSpec.ProdId         = _prodParmReportFinished.ProdId;
            
            currentNumberOfSerialNumbers++;
            if (_prodFinished && currentNumberOfSerialNumbers == numberOfReportingSerialNumbers)
            {
                serialNumberSpec.EndJob = _prodFinished;
            }

            InventSerial jobInventSerial = InventSerial::findOrCreate(localSerialNumberSpecification.SerialNumber, localSerialNumberSpecification.ItemId);
            prodParmReportFinishedInventDim.inventSerialId = jobInventSerial.inventSerialId;
            serialNumberSpec.InventDimId = InventDim::findOrCreate(prodParmReportFinishedInventDim).inventDimId;
            
            jmgSerialNumberSpecList.add(serialNumberSpec);

            qtyError += localSerialNumberSpecification.QtyError;
            pdsCWQtyError += localSerialNumberSpecification.PdsCWQtyError;
        }

        jmgSerialNumberSpecList.insertDatabase();

        // Update ProdParmReportFinished.QtyError if we reported serial number scrap.
        if (_prodParmReportFinished.QtyError != qtyError && qtyError > 0)
        {
            _prodParmReportFinished.QtyError = qtyError;
            _prodParmReportFinished.update();
        }

        // Update ProdParmReportFinished.PdsCWBatchErr if we reported serial number CW scrap.
        if (_prodParmReportFinished.PdsCWBatchErr != pdsCWQtyError && pdsCWQtyError > 0)
        {
            _prodParmReportFinished.PdsCWBatchErr = pdsCWQtyError;
            _prodParmReportFinished.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProdParmReportFinishFromJmgTmpJobBundleProdFeedback</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes production order parameters for the reporting co/by products from Jmg interface.
    /// </summary>
    /// <param name = "_coByParmBuffer">
    /// The current <c>ProdParmReportFinished</c> record for a co/by item.
    /// </param>
    /// <param name = "_coByProductFeedback">
    /// The current <c>JmgTmpJobBundleProdFeedback</c> co/by product feedback based on which
    /// the <c>ProdParmReportFinished</c> record for a co/by item should be created.
    /// </param>
    /// <param name = "_initFromParmBuffer">
    /// Indicates if the co/by product buffer should be initialized from the main buffer.
    /// </param>
    /// <param name = "_prodEndJob">
    ///  true if the production job is being reported as finished; otherwise, false.
    /// </param>
    protected void initializeProdParmReportFinishFromJmgTmpJobBundleProdFeedback(
        ProdParmReportFinished      _coByParmBuffer,
        JmgTmpJobBundleProdFeedback _coByProductFeedback,
        boolean                     _initFromParmBuffer,
        ProdEndJob                  _prodEndJob)
    {

        InventDim parmReportFinishedInventDim = JmgProdMultiReportFinished::initProdParmReportFinishedInventDim(
                    _coByProductFeedback.ItemId,
                    _coByParmBuffer.InventDimId,
                    _coByProductFeedback.WHSLicensePlate,
                    _coByProductFeedback.InventBatch);

        _coByParmBuffer.LineNum++;
        _coByParmBuffer.InventDimId = parmReportFinishedInventDim.inventDimId;

        _coByParmBuffer.QtyError        = _coByProductFeedback.errorNow();
        _coByParmBuffer.QtyGood         = _coByProductFeedback.GoodNow;
        _coByParmBuffer.PdsCWBatchErr   = _coByProductFeedback.pdsCWErrorNow();
        _coByParmBuffer.PdsCWBatchGood  = _coByProductFeedback.PdsCWGoodNow;

        if (_initFromParmBuffer && _coByParmBuffer)
        {
            _coByParmBuffer.EndJob = _prodEndJob;
        }

        _coByParmBuffer.update();

        this.initializeProdParmReportFinishedWithSerialNumber(_coByParmBuffer, _coByProductFeedback.JobId, _prodEndJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProdParmReportFinishedWithSerialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes production order parameters for the reporting with serial numbers.
    /// </summary>
    /// <param name = "_prodParmReportFinished">
    /// The buffer for parameters to report a production order as finished.
    /// </param>
    /// <param name = "_jobId">
    /// Represents production jobId.
    /// </param>
    /// <param name = "_prodFinished">
    /// true if the production job is being reported as finished; otherwise, false.
    /// </param>
    [Hookable(false)]
    internal void initializeProdParmReportFinishedWithSerialNumber(
        ProdParmReportFinished _prodParmReportFinished,
        JmgJobId               _jobId,
        boolean                _prodFinished)
    {
        if (!this.isOperationsReportedAsFinished())
        {
            return;
        }

        InventDim prodParmReportFinishedInventDim = InventDim::find(_prodParmReportFinished.InventDimId);
        int currentNumberOfReportingSerialNumber = 0;
        boolean isFirstIteration = true;
        int numberOfReportingSerialNumbers = this.getNumberOfReportingSerialNumber(_jobId, _prodParmReportFinished.ItemId, _prodParmReportFinished.InventTransId);
        
        // Report errors from previous operations. Relevant only for main products
        if (_prodFinished
            && _prodParmReportFinished.PmfProductType != PmfProductType::Co_Product
            && _prodParmReportFinished.PmfProductType != PmfProductType::By_Product)
        {
            this.createLinePrevOperationsReportedQtyError(_prodParmReportFinished, _jobId, !numberOfReportingSerialNumbers);

            isFirstIteration = false;
        }

        JmgTmpSerialNumberSpecification localSerialNumberSpecification;
        localSerialNumberSpecification.setTmpData(this.parmRegistrationParametersFeedback().parmSerialNumberSpecification());

        while select localSerialNumberSpecification
            where    localSerialNumberSpecification.JobId         == _jobId
                  && localSerialNumberSpecification.ItemId        == _prodParmReportFinished.ItemId
                  && (!_prodParmReportFinished.InventTransId || localSerialNumberSpecification.InventTransId == _prodParmReportFinished.InventTransId)
        {
            _prodParmReportFinished.EndJob = false;
            _prodParmReportFinished.LineNum ++;

            _prodParmReportFinished.QtyGood        = localSerialNumberSpecification.QtyGood;
            _prodParmReportFinished.QtyError       = localSerialNumberSpecification.QtyError;
            _prodParmReportFinished.PdsCWBatchGood = localSerialNumberSpecification.PdsCWQtyGood;
            _prodParmReportFinished.PdsCWBatchErr  = localSerialNumberSpecification.PdsCWQtyError;
            _prodParmReportFinished.ErrorCause     = localSerialNumberSpecification.ErrorCause;

            InventSerial jobInventSerial = InventSerial::findOrCreate(localSerialNumberSpecification.SerialNumber, _prodParmReportFinished.ItemId);
            prodParmReportFinishedInventDim.inventSerialId = jobInventSerial.inventSerialId;
            _prodParmReportFinished.InventDimId  = InventDim::findOrCreate(prodParmReportFinishedInventDim).inventDimId;

            currentNumberOfReportingSerialNumber++;
            if (_prodFinished && currentNumberOfReportingSerialNumber == numberOfReportingSerialNumbers)
            {
                _prodParmReportFinished.EndJob = _prodFinished;
            }

            // if it is the first serial number that needs to be reported on this item then we need to update current object;
            // otherwise, create a new one.
            if (isFirstIteration)
            {
                _prodParmReportFinished.update();
                isFirstIteration = false;
            }
            else
            {
                _prodParmReportFinished.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinePrevOperationsReportedQtyError</Name>
				<Source><![CDATA[
    private void createLinePrevOperationsReportedQtyError(
        ProdParmReportFinished _prodParmReportFinished,
        JmgJobId               _jobId,
        boolean                _isNoSerialNumberReportingNow)
    {
        _prodParmReportFinished.QtyGood        = 0;
        _prodParmReportFinished.QtyError       = 0;
        _prodParmReportFinished.PdsCWBatchGood = 0;
        _prodParmReportFinished.PdsCWBatchErr  = 0;
        _prodParmReportFinished.ErrorCause     = ProdErrorCause::None;
        _prodParmReportFinished.EndJob = false;

        if (this.isOperationsReportedAsFinished())
        {
            container prevReportedErrorQty = ProdRouteTrans::qtyErrorAndCWQtyErrorAtAndBeforeOpr(_prodParmReportFinished.ProdId, JmgJobTable::find(_jobId).OprNum, false);
            _prodParmReportFinished.QtyError      = conpeek(prevReportedErrorQty, 1);
            _prodParmReportFinished.PdsCWBatchErr = conpeek(prevReportedErrorQty, 2);
        }

        // Mark Report as Finished if no serial number reporting now
        if (_isNoSerialNumberReportingNow)
        {
            _prodParmReportFinished.EndJob = true;
        }

        _prodParmReportFinished.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfReportingSerialNumber</Name>
				<Source><![CDATA[
    private int getNumberOfReportingSerialNumber(JmgJobId _jobId, ItemId _itemId, InventTransId _inventTransId)
    {
        JmgTmpSerialNumberSpecification localSerialNumberSpecificationCount;
        localSerialNumberSpecificationCount.setTmpData(this.parmRegistrationParametersFeedback().parmSerialNumberSpecification());
        select count(RecId)
                from localSerialNumberSpecificationCount
                where localSerialNumberSpecificationCount.JobId  == _jobId
                   && localSerialNumberSpecificationCount.ItemId == _itemId
                   && (!_inventTransId || localSerialNumberSpecificationCount.InventTransId == _inventTransId);

        return localSerialNumberSpecificationCount.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>