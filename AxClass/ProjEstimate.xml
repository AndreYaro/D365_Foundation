<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjEstimate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjEstimate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record in the <c>PSAActivityEstimates</c> table given the hierarchyID, task ID and record ID of the record.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <param name = "_recId">Record ID of <c>PSAActivityEstimates</c> table.</param>
    /// <param name = "_hierarchyTaskId">ID of the hierarchy task.</param>
    public static void delete(HierarchyIdBase _hierarchyId, str _recId, str _hierarchyTaskId)
    {
        PSAActivityEstimates psaActivityEstimates;
        RecId                psaActivityEstimatesRecId = str2Int64(strLTrim(_recId));
        ProjHierarchyTaskId  hierarchyTaskId = str2int64(_hierarchyTaskId);
        
        if (psaActivityEstimatesRecId)
        {
            ttsbegin;
            delete_from psaActivityEstimates
                where psaActivityEstimates.RecId == psaActivityEstimatesRecId;
			
			ProjEstimate::updateTaskFromEstimatesV2(_hierarchyId, hierarchyTaskId);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all records in the <c>PSAActivityEstimates</c> table which referenced by the given the hierarchy ID and task ID.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <param name = "_hierarchyTaskId">ID of the hierarchy task.</param>
    public static void deleteParent(HierarchyIdBase _hierarchyId, str _hierarchyTaskId)
    {
        ProjHierarchyTaskId  hierarchyTaskId = str2int64(_hierarchyTaskId);

        PSAActivityEstimates::deleteEstimatesForTask(_hierarchyId, hierarchyTaskId);
        ProjEstimate::updateTaskFromEstimatesV2(_hierarchyId, hierarchyTaskId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateEstimateFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>PSAActivityEstimates</c> table buffer with the passed in parameters.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <param name = "_hierarchyTaskId">ID of the hierarchy task.</param>
    /// <param name = "_estimateNumber">Estimate number of the estimation line.</param>
    /// <param name = "_projTransType">Project transaction type of the estimation line.</param>
    /// <param name = "_projCategoryId">Project category ID.</param>
    /// <param name = "_resourceCategory">Record ID of resource category.</param>
    /// <param name = "_resource">Record ID of the resource.</param>
    /// <param name = "_description">Description of the estimation line</param>
    /// <param name = "_quantity">Quantity of the estimation line.</param>
    /// <param name = "_salesCategory">Sales category of the estimation line.</param>
    /// <param name = "_unitCostPrice">Unit cost price of the estimation line.</param>
    /// <param name = "_unitSalesPrice">Unit sales price of the estimatin line.</param>
    /// <param name = "_totalCostPrice">Total cost price of the estimation line.</param>
    /// <param name = "_totalSalesPrice">Total sales price of the estimation line.</param>
    /// <param name = "_projLineProperty">Project line property of the estimation line.</param>
    /// <param name = "_itemId">Item ID of the estimation line.</param>
    /// <param name = "_activityNumber"><c>smmActivities</c> table activity number.</param>
    /// <param name = "_wbsType">Whether the WBS type is project or quotation.</param>
    protected static psaActivityEstimates populateEstimateFields(
                            HierarchyIdBase          _hierarchyId,
                            ProjHierarchyTaskId     _hierarchyTaskId,
                            int                     _estimateNumber,
                            QuotationProjTransType  _projTransType,
                            QuotationProjCategory   _projCategoryId,
                            ResourceCategoryRecId   _resourceCategory,
                            ResourceRecId           _resource,
                            Description             _description,
                            NonNegativeQuantity     _quantity,
                            SalesCategory           _salesCategory,
                            NonNegativeTotal        _unitCostPrice,
                            NonNegativeTotal        _unitSalesPrice,
                            NonNegativeTotal        _totalCostPrice,
                            NonNegativeTotal        _totalSalesPrice,
                            ProjLinePropertyId      _projLineProperty,
                            ItemId                  _itemId,
                            smmActivityNumber       _activityNumber,
                            ProjWBSType             _wbsType)
    {
        PSAActivityEstimates psaActivityEstimates;
        ItemId               itemId = strLTrim(_itemId);

        psaActivityEstimates.ProjPlanHierarchyId        = _hierarchyId;
        psaActivityEstimates.Quantity                   = _quantity;
        psaActivityEstimates.UnitCostPrice              = _unitCostPrice;
        psaActivityEstimates.UnitSalesPrice             = _unitSalesPrice;
        psaActivityEstimates.TotalCostPrice             = _totalCostPrice;
        psaActivityEstimates.TotalSalesPrice            = _totalSalesPrice;
        psaActivityEstimates.ProjTransType              = _projTransType;
        psaActivityEstimates.ProjCategoryId             = _projCategoryId;
        psaActivityEstimates.ResourceCategory           = _resourceCategory;
        psaActivityEstimates.Resource                   = _resource;
        psaActivityEstimates.ProjPlanHierarchyTaskId    = _hierarchyTaskId;
        psaActivityEstimates.Description                = _description;
        psaActivityEstimates.LinePropertyId             = _projLineProperty;
        psaActivityEstimates.SalesCategory              = _salesCategory;
        psaActivityEstimates.ItemId                     = itemId;
        psaActivityEstimates.EstimateNumber             = _estimateNumber;

        if (_activityNumber)
        {
            psaActivityEstimates.ActivityNumber = _activityNumber;
        }
        else
        {
            psaActivityEstimates.ActivityNumber = ProjPlanVersion::getActivityNumber(_hierarchyId, _hierarchyTaskId);
        }

        return psaActivityEstimates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>PSAActivityEstimates</c> Table with the passed in parameters.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <param name = "_hierarchyTaskId">ID of the hierarchy task.</param>
    /// <param name = "_estimateNumber">Estimate number of the estimation line.</param>
    /// <param name = "_projTransType">Project transaction type of the estimation line.</param>
    /// <param name = "_projCategoryId">Project category ID.</param>
    /// <param name = "_resourceCategory">Record ID of resource category.</param>
    /// <param name = "_resource">Record ID of the resource.</param>
    /// <param name = "_description">Description of the estimation line</param>
    /// <param name = "_quantity">Quantity of the estimation line.</param>
    /// <param name = "_salesCategory">Sales category of the estimation line.</param>
    /// <param name = "_unitCostPrice">Unit cost price of the estimation line.</param>
    /// <param name = "_unitSalesPrice">Unit sales price of the estimatin line.</param>
    /// <param name = "_totalCostPrice">Total cost price of the estimation line.</param>
    /// <param name = "_totalSalesPrice">Total sales price of the estimation line.</param>
    /// <param name = "_projLineProperty">Project line property of the estimation line.</param>
    /// <param name = "_itemId">Item ID of the estimation line.</param>
    /// <param name = "_activityNumber"><c>smmActivities</c> table activity number.</param>
    /// <param name = "_updateTasksAfterAdd">true to update the task effort based on changes
    /// to the hour estimates after task addition is executed; else false.</param>
    /// <param name = "_wbsType">Whether the WBS type is project or quotation.</param>
    public static void add(HierarchyIdBase          _hierarchyId,
        ProjHierarchyTaskId     _hierarchyTaskId,
        int                     _estimateNumber,
        QuotationProjTransType  _projTransType,
        QuotationProjCategory   _projCategoryId,
        ResourceCategoryRecId   _resourceCategory,
        ResourceRecId           _resource,
        Description             _description,
        NonNegativeQuantity     _quantity,
        SalesCategory           _salesCategory,
        NonNegativeTotal        _unitCostPrice,
        NonNegativeTotal        _unitSalesPrice,
        NonNegativeTotal        _totalCostPrice,
        NonNegativeTotal        _totalSalesPrice,
        ProjLinePropertyId      _projLineProperty,
        ItemId                  _itemId,
        smmActivityNumber       _activityNumber = null,
        boolean                 _updateTasksAfterAdd = true,
        ProjWBSType             _wbsType = ProjWBSType::Project)
    {
        PSAActivityEstimates psaActivityEstimates = ProjEstimate::populateEstimateFields(
            _hierarchyId,
            _hierarchyTaskId,
            _estimateNumber,
            _projTransType,
            _projCategoryId,
            _resourceCategory,
            _resource,
            _description,
            _quantity,
            _salesCategory,
            _unitCostPrice,
            _unitSalesPrice,
            _totalCostPrice,
            _totalSalesPrice,
            _projLineProperty,
            _itemId,
            _activityNumber,
            _wbsType);

        if (_projTransType == QuotationProjTransType::Item && psaActivityEstimates.itemId != '')
        {
            psaActivityEstimates.itemIdChanged();
        }

        //Update PSAActivityEstimates fields for extensibility purpose.
        psaActivityEstimates = ProjEstimate::defineEstimateFieldsForInsertion(psaActivityEstimates);

        ttsbegin;
        // In AX 2012, we allow the Estimates to be created even if the Line Property is not defaulted
        // Skip validation for WBS Template
        if (!psaActivityEstimates.LinePropertyId && _wbsType == ProjWBSType::Template)
        {
            psaActivityEstimates.insert();
        }
        else if (psaActivityEstimates.validateWrite())
        {
            psaActivityEstimates.insert();
        }
        ttscommit;

        if (_updateTasksAfterAdd)
        {
            ProjEstimate::updateTaskFromEstimatesV2(_hierarchyId, _hierarchyTaskId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a record in the <c>PSAActivityEstimates</c> table.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <param name = "_hierarchyTaskId">ID of the hierarchy task.</param>
    /// <param name = "_recId">Record ID of <c>PSAActivityEstimates</c> table.</param>
    /// <param name = "_estimateNumber">Estimate number of the estimation line.</param>
    /// <param name = "_projTransType">Project transaction type of the estimation line.</param>
    /// <param name = "_projCategoryId">Project category ID.</param>
    /// <param name = "_resourceCategory">Record ID of resource category.</param>
    /// <param name = "_resource">Record ID of the resource.</param>
    /// <param name = "_description">Description of the estimation line</param>
    /// <param name = "_quantity">Quantity of the estimation line.</param>
    /// <param name = "_salesCategory">Sales category of the estimation line.</param>
    /// <param name = "_unitCostPrice">Unit cost price of the estimation line.</param>
    /// <param name = "_unitSalesPrice">Unit sales price of the estimatin line.</param>
    /// <param name = "_totalCostPrice">Total cost price of the estimation line.</param>
    /// <param name = "_totalSalesPrice">Total sales price of the estimation line.</param>
    /// <param name = "_projLineProperty">Project line property of the estimation line.</param>
    /// <param name = "_itemId">Item ID of the estimation line.</param>
    /// <param name = "_wbsType">Whether the WBS type is project or quotation.</param>
    public static void update(HierarchyIdBase _hierarchyId, str _hierarchyTaskId, str _recId, str _estimateNumber, str _projTransType, str _projCategoryId,
                                     str _resourceCategory, str _resource, str _description, str _quantity, str _salesCategory, str _unitCostPrice,
                                     str _unitSalesPrice, str _totalCostPrice, str _totalSalesPrice, str _projLineProperty, str _itemId,
                                     ProjWBSType _wbsType = ProjWBSType::Project)
    {
        if (strltrim(_projTransType) != '')
        {
            NonNegativeQuantity     quantity, unitCostPrice, unitSalesPrice, totalCostPrice, totalSalesPrice;
            QuotationProjCategory   projCategoryId;
            ResourceCategoryRecId   resourceCategoryRecId;
            SalesCategory           salesCategory = 0;
            QuotationProjTransType  projTransType;
            RecId                   psaActEstimatesRecId;
            PSAActivityEstimates    psaActivityEstimates;
            ItemId                  itemId;
            ResourceRecId           resource;
            int                     estimateNumber = str2Int(_estimateNumber);
            RefRecId                hierarchyTaskId = str2int64(_hierarchyTaskId);

            itemId = strLTrim(_itemId);

            if (strltrim(_recId) != '')
            {
                psaActEstimatesRecId = str2int64(_recId);
                psaActivityEstimates = psaActivityEstimates::find(psaActEstimatesRecId,true);
            }
            else
            {
                select forupdate * from psaActivityEstimates
                where psaActivityEstimates.ProjPlanHierarchyId == _hierarchyId
                && psaActivityEstimates.ProjPlanHierarchyTaskId == hierarchyTaskId
                && psaActivityEstimates.EstimateNumber == estimateNumber;
            }

            if (str2enum(projTransType, _projTransType) == QuotationProjTransType::Item )
            {
                if (strltrim(_salesCategory) != '')
                {
                    salesCategory = str2Int64(_salesCategory);
                }
                if (psaActivityEstimates.ItemId != itemId)
                {
                    psaActivityEstimates.ItemId = itemId;
                    psaActivityEstimates.itemIdChanged();
                }
            }

            projCategoryId = _projCategoryId;
            resourceCategoryRecId = str2int64(_resourceCategory);
            resource = str2int64(_resource);
            quantity = str2num(_quantity);
            unitCostPrice = str2num(_unitCostPrice);
            unitSalesPrice = str2num(_unitSalesPrice);
            totalCostPrice = str2num(_totalCostPrice);
            totalSalesPrice = str2num(_totalSalesPrice);
            projTransType = str2enum(projTransType, _projTransType);

            psaActivityEstimates.Quantity = quantity;
            psaActivityEstimates.UnitCostPrice = unitCostPrice;
            psaActivityEstimates.UnitSalesPrice = unitSalesPrice;
            psaActivityEstimates.TotalCostPrice = totalCostPrice;
            psaActivityEstimates.TotalSalesPrice = totalSalesPrice;
            psaActivityEstimates.ProjTransType = projTransType;
            psaActivityEstimates.ProjCategoryId = projCategoryId;
            psaActivityEstimates.ResourceCategory = resourceCategoryRecId;
            psaActivityEstimates.Resource = resource;
            psaActivityEstimates.SalesCategory = salesCategory;
            psaActivityEstimates.Description = _description;
            psaActivityEstimates.LinePropertyId = _projLineProperty;
            psaActivityEstimates.ItemId = itemId;

            //Update PSAActivityEstimates fields for extensibility purpose.
            psaActivityEstimates = ProjEstimate::defineEstimateFieldsForUpdate(psaActivityEstimates);

            ttsbegin;
            // In AX 2012, we allow the Estimates to be created even if the Line Property is not defaulted
            // Skip validation for WBS Template
            if (!psaActivityEstimates.LinePropertyId && _wbsType == ProjWBSType::Template)
            {
                psaActivityEstimates.doUpdate();
            }
            else
            {
                psaActivityEstimates.update();
            }
            ProjEstimate::updateTaskFromEstimatesV2(_hierarchyId, str2int64(_hierarchyTaskId));
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>get</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the collection data contract based on the specified hierarchy ID.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <returns>Collection data contract object.</returns>
    public static CollectionDataContract get(HierarchyIdBase _hierarchyId)
    {
        if (!_hierarchyId)
        {
            return CollectionDataContract::construct();
        }

        CollectionDataContract collection;
        List items = new List(Types::Class);
        ProjEstimateDataContract estimates;
        ProjPlanVersion projPlanElement;
        str taskId, parentTaskId, lastTaskId;
        ProjEstimateBaseDataContract estimatesBase;

        QueryRun queryRun;
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource, psaActivityEstimatesQBDS;
        TableId collectionRootDataSourceId = tablenum(ProjPlanVersion);
        PSAActivityEstimates psaActivityEstimates;
        PSAProjSchedRole     psaProjSchedRole;
        Name taskName;
        str id;
        int resourcesAssigned;

        queryBuildDataSource = query.addDataSource(collectionRootDataSourceId);
        queryBuildDataSource.addRange(fieldnum(ProjPlanVersion, HierarchyId)).value(queryValue(_hierarchyId));
        queryBuildDataSource.addSortField(fieldnum(ProjPlanVersion, TaskSiblingNumber), SortOrder::Ascending);
        queryBuildDataSource.addSelectionField(fieldnum(ProjPlanVersion, HierarchyTaskId));
        queryBuildDataSource.addSelectionField(fieldnum(ProjPlanVersion, ParentHierarchyTaskId));
        queryBuildDataSource.addSelectionField(fieldnum(ProjPlanVersion, TaskName));

        psaActivityEstimatesQBDS = queryBuildDataSource.addDataSource(tableNum(PSAActivityEstimates));
        psaActivityEstimatesQBDS.joinMode(JoinMode::OuterJoin);
        psaActivityEstimatesQBDS.addLink(fieldNum(ProjPlanVersion, HierarchyId),
                                        fieldNum(PSAActivityEstimates, ProjPlanHierarchyId));
        psaActivityEstimatesQBDS.addLink(fieldnum(ProjPlanVersion, HierarchyTaskId),
                                        fieldnum(PSAActivityEstimates, ProjPlanHierarchyTaskId));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, ProjTransType));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, Description ));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, ProjCategoryId));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, ResourceCategory));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, Resource));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, SalesCategory));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, ItemId));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, Quantity));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, UnitCostPrice));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, UnitSalesPrice));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, TotalCostPrice));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, TotalSalesPrice));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, LinePropertyId));
        psaActivityEstimatesQBDS.addSelectionField(fieldnum(PSAActivityEstimates, RecId));
        psaActivityEstimatesQBDS.addSelectionField(fieldNum(PSAActivityEstimates, EstimateNumber));

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            projPlanElement    = queryRun.getNo(1);
            psaActivityEstimates       = queryRun.getNo(2);

            taskId = int642str(projPlanElement.getFieldValue(fieldstr(ProjPlanVersion, HierarchyTaskId)));
            parentTaskId = int642str(projPlanElement.getFieldValue(fieldstr(ProjPlanVersion, ParentHierarchyTaskId)));

            if (taskId == lastTaskId)
            {
                id = taskId + '-' + int642Str(psaActivityEstimates.RecId);
                taskName = '';
            }
            else
            {
                taskName = projPlanElement.TaskName;
                id = taskId;
                lastTaskId = taskId;
            }

            //if this is a summary task w/o estimates
            if (psaActivityEstimates.ProjTransType ==  QuotationProjTransType::None)
            {
                estimatesBase = ProjEstimate::setEstimatesBase(id, taskId, parentTaskId, taskName, projPlanElement.HierarchyTaskId);
                estimatesBase.parmHierarchyId(_hierarchyId);
                items.addEnd(estimatesBase);
            }
            else
            {
                //if this is the first entry of a leaf task
                if (taskId == id)
                {
                    estimatesBase = ProjEstimate::setEstimatesBase(id, taskId, parentTaskId, taskName, projPlanElement.HierarchyTaskId);
                    estimatesBase.parmHierarchyId(_hierarchyId);
                    items.addEnd(estimatesBase);
                    id = taskId + '-' + int642Str(psaActivityEstimates.RecId);
                    taskName = '';
                }
                //Proceed with adding the estimate lines
                estimates = ProjEstimateDataContract::construct();
                estimates.parmId(id);
                estimates.parmElementId(taskId);
                estimates.parmEstimateNumber(psaActivityEstimates.EstimateNumber);
                estimates.parmParentId(taskId);
                estimates.parmName(taskName);
                estimates.parmHierarchyId(_hierarchyId);
                estimates.parmHierarchyTaskId(projPlanElement.HierarchyTaskId);
                estimates.parmDescription(psaActivityEstimates.Description);
                estimates.parmProjCategoryId(psaActivityEstimates.ProjCategoryId);
                estimates.parmResourceCategoryRecId(psaActivityEstimates.ResourceCategory);
                estimates.parmResourceRecId(psaActivityEstimates.Resource);
                psaProjSchedRole = PSAProjSchedRole::findByRecId(psaActivityEstimates.Resource);
                estimates.parmResourceName(psaProjSchedRole.Name);
                estimates.parmProjTransType(psaActivityEstimates.ProjTransType);
                estimates.parmSalesCategory(EcoResCategory::find(psaActivityEstimates.SalesCategory).Name);
                estimates.parmItemId(psaActivityEstimates.ItemId);
                estimates.parmprojLinePropertyId(psaActivityEstimates.LinePropertyId);
                estimates.parmRecId(psaActivityEstimates.RecId);
                estimates.parmQuantity(psaActivityEstimates.Quantity);
                estimates.parmUnitCostPrice(psaActivityEstimates.UnitCostPrice);
                estimates.parmUnitSalesPrice(psaActivityEstimates.UnitSalesPrice);
                estimates.parmTotalCostPrice(psaActivityEstimates.TotalCostPrice);
                estimates.parmTotalSalesPrice(psaActivityEstimates.TotalSalesPrice);

                if (ActivityFacade::existsAnyAssignmentForActivity(PSAActivityEstimates::findActivityRecId(_hierarchyId, projPlanElement.HierarchyTaskId)))
                {
                    resourcesAssigned = 1;
                }
                estimates.parmTaskHasAnyResourceAssigned(resourcesAssigned);

                items.addEnd(estimates);
                resourcesAssigned = 0;
            }
        }

        collection = CollectionDataContract::construct();
        collection.parmItems(items);

        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEstimatesBase</Name>
				<Source><![CDATA[
    private static ProjEstimateBaseDataContract setEstimatesBase(str _id, str _elementNumber, str _parentElementNumber, Name _taskName, int64 _hierarchyTaskId )
    {
        ProjEstimateBaseDataContract estimatesBase;
        estimatesBase = ProjEstimateBaseDataContract::construct();
        estimatesBase.parmId(_id);
        estimatesBase.parmElementId(_elementNumber);
        estimatesBase.parmParentId(_parentElementNumber);
        estimatesBase.parmName(_taskName);
        estimatesBase.parmHierarchyTaskId(_hierarchyTaskId);
        return estimatesBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaskFromEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the task effort based on changes to the hour estimates on the cost planning view.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <param name = "_taskId">ID of the hierarchy task.</param>
    [SysObsoleteAttribute('This method does not take into account the auto scheduling flag so is replaced by updateTaskFromEstimatesV2()', false, 24\10\2018)]
    public static void updateTaskFromEstimates(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId)
    {
        ProjEstimate::updateTaskFromEstimatesV2(_hierarchyId, _taskId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaskFromEstimatesV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the task effort based on changes to the hour estimates on the cost planning view.
    /// This method also takes into account the autoScheduling check box for duration and finish date.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <param name = "_taskId">ID of the hierarchy task.</param>
    /// <param name = "_autoScheduling">Flag to show if auto scheduling is turned on. True by default to support existing usecases.</param>
    public static void updateTaskFromEstimatesV2(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId, boolean _autoScheduling = true)
    {
        PSAActivityEstimates    psaActivityEstimates;
        ProjPlanVersion         projPlan = ProjPlanVersion::findByHierarchyAndTaskId(_hierarchyId, _taskId);
        NonNegativeQuantity     newEffort, effortAtComplete;
        Amount                  costAtComplete;
        ResourceCategoryRecId   resourceCategory;

        //calendar calculation variables
        SchedFromDate           taskStartDate = projPlan.TaskStartDate;
        ProjTable               projTable = ProjPlanVersionDetail::getProjTableByHierarchyId(_hierarchyId);
        SalesQuotationTable     salesQuotationTable = HierarchyLinkTable::findAssociation(_hierarchyId, tableNum(SalesQuotationTable));
        WorkCalendarSched       workCalendarSched = new WorkCalendarSched();
        CalendarId              calendarId =  projTable ? projTable.PSASchedCalendarId : salesQuotationTable.PSASchedCalendarId;
        StandardWorkDayHours    workDayHours = ProjWorkBreakdownStructureV2FormHelper::getCalendarStandardWorkDayHours(calendarId);
        DaysAsReal              duration;
        SchedToDate             endDate;

        select count(RecId) from psaActivityEstimates
            where psaActivityEstimates.ProjPlanHierarchyId == _hierarchyId
                && psaActivityEstimates.ProjPlanHierarchyTaskId == _taskId
                && psaActivityEstimates.ProjTransType == QuotationProjTransType::Hour;

        if (psaActivityEstimates.RecId == 1)
        {
            select Quantity, ResourceCategory, UnitCostPrice from psaActivityEstimates
                where psaActivityEstimates.ProjPlanHierarchyId == _hierarchyId
                    && psaActivityEstimates.ProjPlanHierarchyTaskId == _taskId
                    && psaActivityEstimates.ProjTransType == QuotationProjTransType::Hour;

            newEffort           = psaActivityEstimates.Quantity;
            resourceCategory    = psaActivityEstimates.ResourceCategory;
            effortAtComplete    = psaActivityEstimates.Quantity == projPlan.TaskEffort ? projPlan.TaskEffortAtComplete : psaActivityEstimates.Quantity;
        }
        else
        {
            newEffort           = PSAActivityEstimates::getTotalEffortEstimateForTask(_hierarchyId, _taskId);
            resourceCategory    = projPlan.ResourceCategory;
            effortAtComplete    = newEffort == projPlan.TaskEffort ? projPlan.TaskEffortAtComplete : newEffort;
        }

        if (effortAtComplete)
        {
            NonNegativeCostPrice averageUnitCostPrice =
                PSAActivityEstimates::getAverageUnitCostPriceByHierarchyTaskId(_hierarchyId, _taskId);

            costAtComplete = averageUnitCostPrice * effortAtComplete;
        }

        PSAActivityEstimates psaNonHourEstimates;
        select sum(TotalCostPrice) from psaNonHourEstimates
            where psaNonHourEstimates.ProjPlanHierarchyId == _hierarchyId
                && psaNonHourEstimates.ProjPlanHierarchyTaskId == _taskId
                && psaNonHourEstimates.ProjTransType != QuotationProjTransType::Hour;
        if (psaNonHourEstimates.TotalCostPrice != 0)
        {
            costAtComplete += psaNonHourEstimates.TotalCostPrice;
        }

        // Calculate duration and end date only when auto scheduling is turned on.
        if (_autoScheduling)
        {
            // If this is a WBS template, no calendar will be found above and workDayHours will be 0.
            // Set duration to 0, which is correct for templates which do not store dates or duration for tasks.
            if (workDayHours == 0 || !projPlan.NumberOfResources)
            {
                duration = 0;
            }
            else
            {
                duration = roundUpDec(newEffort / projPlan.NumberOfResources / workDayHours, 0);
            }

            if (duration == projPlan.TaskDuration)
            {
                endDate = projPlan.TaskFinishDate;
            }
            else
            {
                endDate = ProjEstimate::calculateEndDateFromStartDate(taskStartDate, duration, calendarId);
            }
        }

        ttsbegin;
        projPlan.selectForUpdate(true);
        projPlan.TaskEffort = newEffort;
        projPlan.TaskEffortAtComplete = effortAtComplete;
        projPlan.TaskCostAtComplete = costAtComplete;
        if (_autoScheduling)
        {
            projPlan.TaskDuration = duration;
            projPlan.TaskFinishDate = endDate;
        }
        projPlan.ResourceCategory = resourceCategory;
        
        //Update ProjPlanVersion fields for extensibility purpose.
        projPlan = ProjEstimate::definePlanVersionFieldsForUpdate(projPlan);
        
        projPlan.update();

        ProjPlanVersion::updateStartDateForSuccessors(calendarId, projPlan);
        ProjPlanVersion::rollUpToParent(calendarId, projPlan);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateEndDateFromStartDate</Name>
				<Source><![CDATA[
    private static SchedToDate calculateEndDateFromStartDate(SchedFromDate _startDate, DaysAsReal _duration, CalendarId _calendarId)
    {
        real                duration = _duration;
        SchedToDate         endDate = _startDate;
        WorkCalendarSched   workCalendarSched = new WorkCalendarSched();

        duration--;
        while (duration > 0)
        {
            endDate++;
            if (workCalendarSched.isDateOpen(_calendarId, endDate, true))
            {
                duration--;
            }
        }
        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoGenerateEstimateLinesFromTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will auto generate the estimate lines for a given task in the given Hierarchy.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <param name = "_taskId">ID of the hierarchy task.</param>
    /// <param name = "_wbsType">Whether the WBS type is project or quotation.</param>
    public static void autoGenerateEstimateLinesFromTask(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId, ProjWBSType _wbsType = ProjWBSType::Project)
    {
        ProjPlanVersion         projPlan        = ProjPlanVersion::findByHierarchyAndTaskId(_hierarchyId, _taskId);
        ActivityRecId           activity        = ProjTask::getActivityRecId(_hierarchyId, _taskId);
        smmActivities           smmActivity     = smmActivities::findWithRecId(activity);
        QuotationProjTransType  transTypeHour   = ProjEstimate::getQuotationProjTransType(_hierarchyId, _taskId);
        ProjLinePropertyId      linePropertyId;

        if (_wbsType == ProjWBSType::Project)
        {
            ProjId projId = ProjPlanVersionDetail::getProjTableByHierarchyId(_hierarchyId).ProjId;
            linePropertyId = ProjLinePropertySetup::findLinePropertyId(projId, projPlan.TaskCategory);
        }
        else if (_wbsType == ProjWBSType::ProjectQuotation)
        {
            linePropertyId = (select firstonly projLinePropertySetup where projLinePropertySetup.ProjCode == TableGroupAll::All &&
                                projLinePropertySetup.ProjRelation     == '' &&
                                projLinePropertySetup.CategoryCode     == TableGroupAll::Table &&
                                projLinePropertySetup.CategoryRelation == projPlan.TaskCategory).LinePropertyId;
        }
        
        //generate project estimate line for the hours using project category or resource category accordingly
        ProjEstimateDataContract estimate = ProjEstimateDataContract::construct();
        estimate.updateEstimates('projCategoryId',
                                _hierarchyId,
                                _taskId,
                                projPlan.TaskStartDate,
				                0,
                                transTypeHour,
                                projPlan.TaskCategory,
                                projPlan.ResourceCategory,
                                0,
                                '',
                                estimate.parmDescription(),
                                linePropertyId,                                
                                projPlan.TaskEffort,
                                0, 0, 
                                '');

        ProjEstimate::add(_hierarchyId,
                        _taskId,
                        0,
                        transTypeHour,
                        projPlan.TaskCategory,
                        projPlan.ResourceCategory,
                        0,
                        estimate.parmDescription(),
                        projPlan.TaskEffort,
                        0,
                        estimate.parmUnitCostPrice(),
                        estimate.parmUnitSalesPrice(),
                        estimate.parmTotalCostPrice(),
                        estimate.parmTotalSalesPrice(),
                        estimate.parmprojLinePropertyId(),
                        estimate.parmItemId(),
                        smmActivity.ActivityNumber,
                        false,
                        _wbsType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuotationProjTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get quotation project trans type by <c>ProjPlanVersion</c> table hierarchy ID and task ID fields.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy task ID field.</param>
    /// <param name = "_taskId">Task ID field.</param>
    /// <returns>Quotation project transation type.</returns>
    protected static QuotationProjTransType getQuotationProjTransType(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId)
    {
        QuotationProjTransType transactionType;

        if (_hierarchyId && _taskId)
        {
            transactionType = QuotationProjTransType::Hour;
        }

        return transactionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTransactionValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get default transaction values depending on the transaction type parameter.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy task ID.</param>
    /// <param name = "_taskId">Task ID field.</param>
    /// <param name = "_transactionType">Transaction type.</param>
    /// <returns></returns>
    protected static PSAActivityEstimates getDefaultTransactionValues(
        HierarchyIdBase         _hierarchyId,
        ProjHierarchyTaskId     _taskId,
        QuotationProjTransType  _transactionType)
    {
        // Get the first transaction for this record, to preserve UnitCostPrice and UnitSalesPrice
        PSAActivityEstimates defaultHourTransaction;
        select firstonly RecId, UnitCostPrice, UnitSalesPrice, Quantity, ProjCategoryId, Description from defaultHourTransaction
            order by defaultHourTransaction.RecId asc
                where defaultHourTransaction.ProjPlanHierarchyId == _hierarchyId
                    && defaultHourTransaction.ProjPlanHierarchyTaskId == _taskId
                    && defaultHourTransaction.ProjTransType == _transactionType;

        return defaultHourTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeleteEstimatesForTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not estimates should be deleted for the given task.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <param name = "_taskId">ID of the hierarchy task.</param>
    /// <returns>true if estimates for the given task should be deleted; otherwise, false.</returns>
    protected static boolean shouldDeleteEstimatesForTask(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId)
    {
        return ProjPlanVersion::isSummaryTask(_hierarchyId, _taskId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncEstimateLinesFromTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronize the estimation line from WBS task.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <param name = "_taskId">ID of the hierarchy task.</param>
    /// <param name = "_wbsType">Whether the WBS type is project or quotation.</param>
    [SysObsoleteAttribute('This method does not take into account the auto scheduling flag so is replaced by syncEstimateLinesFromTaskV2()', false, 24\10\2018)]
    public static void syncEstimateLinesFromTask(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId, ProjWBSType _wbsType = ProjWBSType::Project)
    {
        ProjEstimate::syncEstimateLinesFromTaskV2(_hierarchyId, _taskId, _wbsType, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncEstimateLinesFromTaskV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronize the estimation line from WBS task.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <param name = "_taskId">ID of the hierarchy task.</param>
    /// <param name = "_wbsType">Whether the WBS type is project or quotation.</param>
    /// <param name = "_autoScheduling">Flag to show if auto scheduling is turned on. True by default to support existing usecases.</param>
    public static void syncEstimateLinesFromTaskV2(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId, ProjWBSType _wbsType = ProjWBSType::Project, boolean _autoScheduling = true)
    {
        ProjPlanVersion projPlan = ProjEstimate::findProjPlanVersion(_hierarchyId, _taskId);
        
        // Delete all estimates tasks if this is a summary task
        if (ProjEstimate::shouldDeleteEstimatesForTask(_hierarchyId, _taskId))
        {
            PSAActivityEstimates::deleteEstimatesForTask(_hierarchyId, _taskId);
        }        
		else if (!projPlan.TaskCategory)
        {
            PSAActivityEstimates::deleteHourEstimatesForTask(_hierarchyId, _taskId, false, false, _wbsType);
        }
        // Add estimates if it is a end node task and task category is defined
        else
        {
            QuotationProjTransType transactionType = ProjEstimate::getQuotationProjTransType(_hierarchyId, _taskId);

            if (_autoScheduling)
            {
                PSAActivityEstimates defaultTransaction = ProjEstimate::getDefaultTransactionValues(_hierarchyId, _taskId, transactionType);

                Description categoryDescription;
                if (projPlan.TaskCategory == defaultTransaction.ProjCategoryId)
                {
                    categoryDescription = defaultTransaction.Description;
                }

                boolean hasDefaultPrices = defaultTransaction != null;
                      
                //Delete any existing estimates as they will no longer be valid
                PSAActivityEstimates::deleteHourEstimatesForTask(_hierarchyId, _taskId, false, false, _wbsType);

                Hours                   newEffort = projPlan.TaskEffort;
                ProjLinePropertyId      linePropertyId;

                if (_wbsType == ProjWBSType::Project)
                {
                    ProjId projId = ProjPlanVersionDetail::getProjTableByHierarchyId(_hierarchyId).ProjId;
                    linePropertyId = ProjLinePropertySetup::findLinePropertyId(projId, projPlan.TaskCategory);
                }
                else if (_wbsType == ProjWBSType::ProjectQuotation)
                {
                    linePropertyId = (select firstonly projLinePropertySetup where projLinePropertySetup.ProjCode == TableGroupAll::All &&
                        projLinePropertySetup.ProjRelation     == '' &&
                        projLinePropertySetup.CategoryCode     == TableGroupAll::Table &&
                        projLinePropertySetup.CategoryRelation == projPlan.TaskCategory).LinePropertyId;
                }

			    if (newEffort > 0.0)
                {
				    //Create a new estimate line for the task
				    ProjEstimateDataContract estimate = ProjEstimateDataContract::construct();

                    if (categoryDescription != '')
                    {
                        // Apply previous description.
                        estimate.parmDescription(categoryDescription);
                    }

				    estimate.updateEstimates('projCategoryId',
					    _hierarchyId,
					    _taskId,
					    projPlan.TaskStartDate,
					    0,
					    transactionType,
					    projPlan.TaskCategory,
					    projPlan.ResourceCategory,
					    0,
					    '',
					    estimate.parmDescription(),
					    linePropertyId,
					    newEffort,
					    0, 0,
					    '');

                    // Only apply the previous pricing if the previous buffer do not have the same effort hours.
                    if (hasDefaultPrices && (defaultTransaction.Quantity != newEffort || !_autoScheduling))
				    {
					    estimate.parmUnitCostPrice(defaultTransaction.UnitCostPrice);
					    estimate.parmUnitSalesPrice(defaultTransaction.UnitSalesPrice);
					    estimate.fieldChanged('unitSalesPrice');
				    }

				    ProjEstimate::add(_hierarchyId,
					    _taskId,
					    0,
					    transactionType,
					    projPlan.TaskCategory,
					    projPlan.ResourceCategory,
					    0,
					    estimate.parmDescription(),
					    newEffort,
					    0,
					    estimate.parmUnitCostPrice(),
					    estimate.parmUnitSalesPrice(),
					    estimate.parmTotalCostPrice(),
					    estimate.parmTotalSalesPrice(),
					    estimate.parmprojLinePropertyId(),
					    estimate.parmItemId(),
					    ProjPlanVersion::getActivityNumber(_hierarchyId, _taskId),
					    false,
					    _wbsType);
                }
            }

            if (_wbsType == ProjWBSType::ProjectQuotation)
            {
                RecId recordId = ProjCache::retrieveActivityEstimatesCacheForProjectQuotation(_hierarchyId, _taskId);

                if (recordId)
                {
                    PSAActivityEstimates psaActivityEstimates;
                    select firstonly psaActivityEstimates
                        where psaActivityEstimates.ProjPlanHierarchyId == _hierarchyId
                            && psaActivityEstimates.ProjPlanHierarchyTaskId == _taskId
                            && psaActivityEstimates.ProjTransType == transactionType;

                    if (psaActivityEstimates)
                    {
                        ttsbegin;

                        SalesQuotationLine salesQuotationLine;
                        update_recordset salesQuotationLine
                            setting psaRefRecId = psaActivityEstimates.RecId
                                where salesQuotationLine.PSARefRecId == recordId;

                        ttscommit;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjPlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>ProjPlanVersion</c> buffer from a given hierarchy Id and task Id.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy Id</param>
    /// <param name = "_taskId">Task Id</param>
    /// <returns>A  <c>ProjPlanVersion</c> buffer.</returns>
    protected static ProjPlanVersion findProjPlanVersion(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId)
    {
        return ProjPlanVersion::findByHierarchyAndTaskId(_hierarchyId, _taskId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesCategoryFromName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sales category by string representation.
    /// </summary>
    /// <param name = "_salesCategory">String representation of sales category.</param>
    /// <returns>Sales category.</returns>
    public static SalesCategory getSalesCategoryFromName(str _salesCategory)
    {
        SalesCategory   salesCategory = 0;
        EcoResCategoryHierarchyRole     ecoResCategoryHierarchyRole;
        EcoResCategoryHierarchy         ecoResCategoryHierarchy;

        ecoResCategoryHierarchyRole = EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Sales);
        ecoResCategoryHierarchy     = EcoResCategoryHierarchy::find(ecoResCategoryHierarchyRole.CategoryHierarchy);
        salesCategory = EcoResCategory::findByName(_salesCategory, ecoResCategoryHierarchy.RecId).RecId;

        return salesCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineEstimateFieldsForInsertion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define <c>PSAActivityEstimates</c> record fields for insertion.
    /// </summary>
    /// <param name = "psaActivityEstimates"><c>PSAActivityEstimates</c> record buffer.</param>
    /// <remarks>This method is added for extensibility purpose.</remarks>
    protected static PSAActivityEstimates defineEstimateFieldsForInsertion(PSAActivityEstimates _psaActivityEstimates)
    {
        return _psaActivityEstimates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineEstimateFieldsForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define <c>PSAActivityEstimates</c> record fields for update.
    /// </summary>
    /// <param name = "psaActivityEstimates"><c>PSAActivityEstimates</c> record buffer.</param>
    /// <remarks>This method is added for extensibility purpose.</remarks>
    protected static PSAActivityEstimates defineEstimateFieldsForUpdate(PSAActivityEstimates _psaActivityEstimates)
    {
        return _psaActivityEstimates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>definePlanVersionFieldsForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define <c>ProjPlanVersion</c> fields for update.
    /// </summary>
    /// <param name = "_planVersion"><c>ProjPlanVersion</c> record buffer.</param>
    /// <remarks>This method is added for extensibility purpose.</remarks>
    protected static ProjPlanVersion definePlanVersionFieldsForUpdate(ProjPlanVersion _planVersion)
    {
        return _planVersion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>