<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustDefaultPartyLocationSyncDataEvents</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustDefaultPartyLocationSyncDataEvents
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CustDefaultLocation_onInserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the data in <c>CustDefaultPartyLocation</c> based on changes to <c>CustDefaultLocation</c>.
    /// </summary>
    /// <param name="_sender">The <c>CustDefaultLocation</c> record.</param>
    /// <param name="_e">The data event arguments.</param>
    [DataEventHandler(tableStr(CustDefaultLocation), DataEventType::Inserting), Hookable(false)]
    public final static void CustDefaultLocation_onInserting(Common _sender, DataEventArgs _e)
    {
        if (CustDefaultPartyLocationFeature::isEnabled())
        {
            CustDefaultLocation newRecord = _sender as CustDefaultLocation;
            AccountNum custAccount = newRecord.AccountNum;
            RefRecId dirPartyLocationRoleRecId = newRecord.PartyLocationRole;

            CustDefaultPartyLocation newDefaultPartyLocation;
            LogisticsLocationRole llr;
            DirPartyLocationRole dplr;
            CustTable custTable;

            insert_recordset newDefaultPartyLocation
                (CustTableRecId, PartyLocation, DefaultLocationType)
            select RecId from custTable
                where custTable.AccountNum == custAccount
            join PartyLocation from dplr
                where dplr.RecId == dirPartyLocationRoleRecId
            join Type from llr
                where dplr.LocationRole == llr.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDefaultLocation_onDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the data in <c>CustDefaultPartyLocation</c> based on changes to <c>CustDefaultLocation</c>.
    /// </summary>
    /// <param name="_sender">The <c>CustDefaultLocation</c> record.</param>
    /// <param name="_e">The data event arguments.</param>
    [DataEventHandler(tableStr(CustDefaultLocation), DataEventType::Deleting), Hookable(false)]
    public final static void CustDefaultLocation_onDeleting(Common _sender, DataEventArgs _e)
    {
        if (CustDefaultPartyLocationFeature::isEnabled())
        {
            CustDefaultLocation deletingRecord = _sender as CustDefaultLocation;
            RefRecId dirPartyLocationRoleRecId = deletingRecord.PartyLocationRole;

            CustDefaultPartyLocation defaultPartyLocation;
            LogisticsLocationRole llr;
            CustTable custTable = CustTable::find(deletingRecord.AccountNum);
            DirPartyLocationRole locRole;

            select firstonly Type from llr
                exists join locRole where locRole.LocationRole == llr.RecId
                  && locRole.RecId == dirPartyLocationRoleRecId;

            delete_from defaultPartyLocation
                where defaultPartyLocation.DefaultLocationType == llr.Type
                   && defaultPartyLocation.CustTableRecId == custTable.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDefaultLocation_onUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the data in <c>CustDefaultPartyLocation</c> based on changes to <c>CustDefaultLocation</c>.
    /// </summary>
    /// <param name="_sender">The <c>CustDefaultLocation</c> record.</param>
    /// <param name="_e">The data event arguments.</param>
    [DataEventHandler(tableStr(CustDefaultLocation), DataEventType::Updating), Hookable(false)]
    public final static void CustDefaultLocation_onUpdating(Common _sender, DataEventArgs _e)
    {
        CustDefaultPartyLocationSyncDataEvents::CustDefaultLocation_onDeleting(_sender.orig(), _e);
        CustDefaultPartyLocationSyncDataEvents::CustDefaultLocation_onInserting(_sender, _e);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyLocationRole_onDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that when a <c>DirPartyLocationRole</c> row is not referenced on a <c>CustDefaultPartyLocation</c> row when being deleted.
    /// </summary>
    /// <param name="_sender">The <c>DirPartyLocationRole</c> record being deleted.</param>
    /// <param name="_e">The data event arguments.</param>
    [DataEventHandler(tableStr(DirPartyLocationRole), DataEventType::Deleting), Hookable(false)]
    public final static void DirPartyLocationRole_onDeleting(Common _sender, DataEventArgs _e)
    {
        if (CustDefaultPartyLocationFeature::isEnabled())
        {
            DirPartyLocationRole deletingRecord = _sender as DirPartyLocationRole;
            boolean canDelete;

            unchecked(Uncheck::XDS)
            {
                CustDefaultPartyLocation defaultPartyLocation;
                select firstonly crosscompany RecId from defaultPartyLocation where defaultPartyLocation.PartyLocation == deletingRecord.PartyLocation;
                canDelete = (defaultPartyLocation.RecId == 0);
            }

            if (!canDelete)
            {
                throw error(strFmt("@AccountsReceivable:CannotDeleteUsedLocation", tablePName(DirPartyLocationRole)));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>