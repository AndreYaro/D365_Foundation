<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvancedLedgerEntryLineUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AdvancedLedgerEntryLineUtil</c> class provides the <c>AdvancedLedgerEntryLine</c> table strategies
///    base default values and validation.
/// </summary>
class AdvancedLedgerEntryLineUtil
{
    boolean                     isCreate;
    boolean                     isInteractiveContext;
    AdvancedLedgerEntryHeader   advancedLedgerEntryHeader;
    AdvancedLedgerEntryLine     advancedLedgerEntryLine;

    AxAdvancedLedgerEntryLine   axAdvancedLedgerEntryLine;

    #define.default('default')
    #define.validate('validate')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustAmountWithProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides adjustment to the <c>AmountCurCredit</c> and <c>AmountCurDebit</c> fields of the <c>AdvancedLedgerEntryLine</c> table if the project is selected.
    /// </summary>
    protected void adjustAmountWithProject()
    {
        advancedLedgerEntryLine.adjustAmountWithProject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>CostPrice</c> field of the <c>AdvancedLedgerEntryLine</c> table.
    /// </summary>
    protected void defaultCostPrice()
    {
        AmountMST amountMST;
        if (!axAdvancedLedgerEntryLine.isFieldSet(fieldNum(AdvancedLedgerEntryLine, CostPrice)))
        {
            if (advancedLedgerEntryLine.ProjId)
            {
                advancedLedgerEntryLine.setProjectCostPrice();
                axAdvancedLedgerEntryLine.parmCostPrice(advancedLedgerEntryLine.CostPrice);
            }
        }
        else
        {
            if (ProjCategory::find(advancedLedgerEntryLine.ProjCategoryId).CategoryType == ProjCategoryType::Revenue)
            {
                return;
            }

            amountMST = advancedLedgerEntryLine.CostPrice * advancedLedgerEntryLine.Quantity;
            if (amountMST < 0)
            {
                advancedLedgerEntryLine.AmountCurCredit = abs(amountMST);
            }
            else if (amountMST > 0)
            {
                advancedLedgerEntryLine.AmountCurDebit = amountMST;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the default values for a specific field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field identifier that corresponds with the field for which the default value is generated.
    /// </param>
    public void defaultField(FieldId _fieldId)
    {
        str              fieldName;
        str              methodName;
        SysDictClass     sysDictClass;
        InternalExternal internalStatusOriginal;

        internalStatusOriginal = axAdvancedLedgerEntryLine.inputStatus();
        axAdvancedLedgerEntryLine.inputStatus(InternalExternal::Internal);

        fieldName = fieldId2name(tableNum(AdvancedLedgerEntryLine), _fieldId);
        methodName = #default + fieldName;
        sysDictClass = new SysDictClass(classIdGet(this));

        if (sysDictClass.hasObjectMethod(methodName))
        {
            sysDictClass.callObject(methodName, this);
        }

        axAdvancedLedgerEntryLine.inputStatus(internalStatusOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>JournalizingDefinition</c> field of the <c>AdvancedLedgerEntryLine</c> table.
    /// </summary>
    protected void defaultJournalizingDefinition()
    {
        if (!advancedLedgerEntryLine.JournalizingDefinition)
        {
            this.initializeAdvancedLedgerEntryHeader();

            axAdvancedLedgerEntryLine.parmJournalizingDefinition(advancedLedgerEntryHeader.JournalizingDefinition);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a default value for the <c>LineNumber</c> field on the <c>AdvancedLedgerEntryLine</c> table.
    /// </summary>
    protected void defaultLineNumber()
    {
        LineNum lineNum;

        // The line number is always calculated when using the service.  If the consumer provided a value, we need
        // to ignore it and calculate the line number.
        if (axAdvancedLedgerEntryLine.isFieldSetExternally(fieldNum(AdvancedLedgerEntryLine, LineNumber)))
        {
            axAdvancedLedgerEntryLine.removeFieldAsTouched(fieldNum(AdvancedLedgerEntryLine, LineNumber));
        }

        if (!advancedLedgerEntryLine.LineNumber)
        {
            this.initializeAdvancedLedgerEntryHeader();
            lineNum = AdvancedLedgerEntryManager::generateAdvancedLedgerEntryLineNum(advancedLedgerEntryHeader.RecId);

            axAdvancedLedgerEntryLine.parmLineNumber(lineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>ProjFundingSource</c> field of the <c>AdvancedLedgerEntryLine</c> table.
    /// </summary>
    protected void defaultProjFundingSource()
    {
        if (advancedLedgerEntryLine.ProjId)
        {
            advancedLedgerEntryLine.setProjFundingSource();
            axAdvancedLedgerEntryLine.parmProjFundingSource(advancedLedgerEntryLine.ProjFundingSource);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjLinePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>ProjLinePropertyId</c> field of the <c>AdvancedLedgerEntryLine</c> table.
    /// </summary>
    protected void defaultProjLinePropertyId()
    {
        if (!axAdvancedLedgerEntryLine.isFieldSet(fieldNum(AdvancedLedgerEntryLine, ProjLinePropertyId)))
        {
            axAdvancedLedgerEntryLine.parmProjLinePropertyId(ProjLinePropertySetup::findLinePropertyId(advancedLedgerEntryLine.ProjId, advancedLedgerEntryLine.ProjCategoryId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjSalesCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>ProjSalesCurrency</c> field of the <c>AdvancedLedgerEntryLine</c> table.
    /// </summary>
    protected void defaultProjSalesCurrency()
    {
        ProjTable projTable;

        if (!axAdvancedLedgerEntryLine.isFieldSet(fieldNum(AdvancedLedgerEntryLine, ProjSalesCurrency)))
        {
            projTable = ProjTable::find(advancedLedgerEntryLine.ProjId);
            axAdvancedLedgerEntryLine.parmProjSalesCurrency(projTable.currencyId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>Quantity</c> field of the <c>AdvancedLedgerEntryLine</c> table.
    /// </summary>
    protected void defaultQuantity()
    {
        Qty quantity = 0;
        if (advancedLedgerEntryLine.Quantity)
        {
            quantity = advancedLedgerEntryLine.Quantity;
        }

        if (!axAdvancedLedgerEntryLine.isFieldSet(fieldNum(AdvancedLedgerEntryLine, Quantity)))
        {
            if (advancedLedgerEntryLine.ProjId)
            {
                axAdvancedLedgerEntryLine.parmQuantity(quantity);
            }
        }

        advancedLedgerEntryLine.setProjectQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the default field values for the <c>AdvancedLedgerEntryLine</c> record.
    /// </summary>
    public void defaultRow()
    {
        InternalExternal internalStatusOriginal;

        internalStatusOriginal = axAdvancedLedgerEntryLine.inputStatus();
        axAdvancedLedgerEntryLine.inputStatus(InternalExternal::Internal);

        this.defaultLineNumber();
        this.defaultTransactionCurrency();
        this.defaultJournalizingDefinition();
        this.defaultTransactionText();
        this.defaultProjLinePropertyId();
        this.defaultProjSalesCurrency();
        this.defaultQuantity();
        this.defaultCostPrice();
        this.defaultSalesPrice();
        this.adjustAmountWithProject();
        this.defaultProjFundingSource();
        axAdvancedLedgerEntryLine.inputStatus(internalStatusOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>SalesPrice</c> field of the <c>AdvancedLedgerEntryLine</c> table.
    /// </summary>
    protected void defaultSalesPrice()
    {
        if (!axAdvancedLedgerEntryLine.isFieldSet(fieldNum(AdvancedLedgerEntryLine, SalesPrice)))
        {
            if (advancedLedgerEntryLine.ProjId)
            {
                advancedLedgerEntryLine.setProjectSalesPrice();

                axAdvancedLedgerEntryLine.parmSalesPrice(advancedLedgerEntryLine.SalesPrice);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>TransactionCurrency</c> field of the <c>AdvancedLedgerEntryLine</c> table.
    /// </summary>
    protected void defaultTransactionCurrency()
    {
        if (!axAdvancedLedgerEntryLine.isFieldSet(fieldNum(AdvancedLedgerEntryLine, TransactionCurrency)))
        {
            this.initializeAdvancedLedgerEntryHeader();

            axAdvancedLedgerEntryLine.parmTransactionCurrency(advancedLedgerEntryHeader.TransactionCurrency);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransactionText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>TransactionText</c> field of the <c>AdvancedLedgerEntryLine</c> table.
    /// </summary>
    protected void defaultTransactionText()
    {
        if (!advancedLedgerEntryLine.TransactionText)
        {
            this.initializeAdvancedLedgerEntryHeader();

            axAdvancedLedgerEntryLine.parmTransactionText(advancedLedgerEntryHeader.TransactionText);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAdvancedLedgerEntryHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AdvancedLedgerEntryHeader</c> record for the current <c>AdvancedLedgerEntryLine</c> record.
    /// </summary>
    protected void initializeAdvancedLedgerEntryHeader()
    {
        if (!advancedLedgerEntryHeader)
        {
            advancedLedgerEntryHeader = advancedLedgerEntryLine.advancedLedgerEntryHeaderRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>AdvancedLedgerEntryLineUtil</c> class.
    /// </summary>
    /// <param name="_axAdvancedLedgerEntryLine">
    /// An instance of the <c>AxAdvancedLedgerEntryLine</c> class that represents the data that is
    /// defaulted and validated.
    /// </param>
    /// <param name="_isInteractiveContext">
    /// A boolean value that indicates the caller context.
    /// </param>
    /// <param name="_isCreate">
    /// A boolean value that indicates if a transaction is being created or updated.
    /// </param>
    protected void new(
        AxAdvancedLedgerEntryLine _axAdvancedLedgerEntryLine,
        boolean                   _isInteractiveContext,
        boolean                   _isCreate)
    {
        axAdvancedLedgerEntryLine = _axAdvancedLedgerEntryLine;

        advancedLedgerEntryLine = axAdvancedLedgerEntryLine.advancedLedgerEntryLine();

        isInteractiveContext = _isInteractiveContext;

        isCreate = _isCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the value of the specified field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field identifier of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the value is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldId)
    {
        str fieldName;
        str methodName;
        SysDictClass sysDictClass;
        boolean isValid = true;
        ExecutePermission perm;

        perm = new ExecutePermission();

        // Grant permission to execute the DictClass.callObject method.
        perm.assert();

        fieldName = fieldId2name(tableNum(AdvancedLedgerEntryLine), _fieldId);
        methodName = #validate + fieldName;

        sysDictClass = new SysDictClass(classIdGet(this));

        if (sysDictClass.hasObjectMethod(methodName))
        {
            isValid = sysDictClass.callObject(methodName, this);
        }

        // Close the code access permission scope.
        CodeAccessPermission::revertAssert();

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>JournalizingDefinition</c> field of the <c>AdvancedLedgerEntryLine</c> table is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>JournalizingDefination</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateJournalizingDefinition()
    {
        this.initializeAdvancedLedgerEntryHeader();
        return AdvancedLedgerEntryManager::checkValidJournalizingDefinition(advancedLedgerEntryLine.JournalizingDefinition, advancedLedgerEntryHeader.AccountingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>LedgerDimension</c> field of the <c>AdvancedLedgerEntryLine</c> table is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>LedgerDimension</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateLedgerDimension()
    {
        this.initializeAdvancedLedgerEntryHeader();
        return AdvancedLedgerEntryManager::validateLedgerDimension(advancedLedgerEntryLine.LedgerDimension, advancedLedgerEntryHeader.AccountingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>ProjCategoryId</c> field of the <c>AdvancedLedgerEntryLine</c> table is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>ProjCategoryId</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateProjCategoryId()
    {
        boolean isValid = true;

        if (advancedLedgerEntryLine.ProjCategoryId)
        {
            isValid = AdvancedLedgerEntryManager::checkProjCategoryId(advancedLedgerEntryLine.ProjCategoryId);

            if (ProjCategory::find(advancedLedgerEntryLine.ProjCategoryId).CategoryType == ProjCategoryType::Item)
            {
                isValid = AifFault::checkFailedLogFault(strFmt("@SPS2407", ProjCategoryType::Item));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>ProjFundingSource</c> field of the <c>AdvancedLedgerEntryLine</c> table is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>ProjFundingSource</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateProjFundingSource()
    {
        boolean isValid = true;

        if (advancedLedgerEntryLine.ProjFundingSource)
        {
            isValid = AdvancedLedgerEntryManager::checkProjFundingSource(
                        advancedLedgerEntryLine.ProjId,
                        advancedLedgerEntryLine.ProjFundingSource);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>ProjId</c> field of the <c>AdvancedLedgerEntryLine</c> table is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>ProjId</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateProjId()
    {
        boolean isValid = true;

        if (advancedLedgerEntryLine.ProjId && (ProjTable::find(advancedLedgerEntryLine.ProjId).Status == ProjStatus::Completed ||
            ProjTable::find(advancedLedgerEntryLine.ProjId).Status == ProjStatus::Created))
        {
            isValid = AifFault::checkFailedLogFault(strFmt("@SPS796", ProjTable::find(advancedLedgerEntryLine.ProjId).Status));
            advancedLedgerEntryLine.ProjId = '';
            advancedLedgerEntryLine.ProjCategoryId = '';
        }

        if (advancedLedgerEntryLine.ProjId)
        {
            isValid = isValid && advancedLedgerEntryLine.validateProjectFromProjGroupSetup();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjSalesCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>ProjSalesCurrency</c> field of the <c>AdvancedLedgerEntryLine</c> table
    ///    is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>ProjSalesCurrency</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateProjSalesCurrency()
    {
        boolean isValid = true;

        if (advancedLedgerEntryLine.ProjSalesCurrency && !AdvancedLedgerEntryManager::validateCurrency(advancedLedgerEntryLine.ProjSalesCurrency))
        {
             isValid = AifFault::checkFailedLogFault("@SPS2350");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>TransactionCurrency</c> field of the <c>AdvancedLedgerEntryLine</c> table
    ///    is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>TransactionCurrency</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateTransactionCurrency()
    {
        boolean isValid = true;

        if (!advancedLedgerEntryLine.TransactionCurrency)
        {
            isValid = AifFault::checkFailedLogFault(strFmt("@SPS1913", fieldPName(AdvancedLedgerEntryLine, TransactionCurrency)));
        }
        else if (advancedLedgerEntryLine.TransactionCurrency && !AdvancedLedgerEntryManager::validateCurrency(advancedLedgerEntryLine.TransactionCurrency))
        {
             isValid = AifFault::checkFailedLogFault("@SPS2350");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>AdvancedLedgerEntryLineUtil</c> class.
    /// </summary>
    /// <param name="_axAdvancedLedgerEntryLine">
    ///    An instance of the <c>AxAdvancedLedgerEntryLine</c> class that represents the data that is being
    ///    validated and changed to the default value.
    /// </param>
    /// <returns>
    ///    An instance of the <c>AdvancedLedgerEntryLineUtil</c> class.
    /// </returns>
    public static AdvancedLedgerEntryLineUtil construct(AxAdvancedLedgerEntryLine _axAdvancedLedgerEntryLine)
    {
        boolean isCreate = _axAdvancedLedgerEntryLine.advancedLedgerEntryLine().RecId == 0;

        boolean isInteractiveContext = FormDataUtil::isFormDataSource(_axAdvancedLedgerEntryLine.advancedLedgerEntryLine());

        return new AdvancedLedgerEntryLineUtil(_axAdvancedLedgerEntryLine, isInteractiveContext, isCreate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>