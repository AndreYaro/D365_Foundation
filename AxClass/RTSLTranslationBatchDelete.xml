<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTSLTranslationBatchDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RTSLTranslationBatchDelete extends RTSLTranslationBatch implements BatchRetryable
{
    RTSLSessionTransId  sessionTransId;

    #define.CurrentVersion(1)
    #localMacro.CurrentList
        sessionTransId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ #CurrentVersion,
                 #CurrentList,
                 classidget(translation),
                 translation.parmRuleGroup().RuleGroupId ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTranslation</Name>
				<Source><![CDATA[
    public RTSLTranslation parmTranslation(RTSLTranslation    _translation = translation,
                                           RTSLSessionTransId _sessionTransId = sessionTransId)
    {
        sessionTransId = _sessionTransId;
        return super(_translation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    #define.Coeff(2)
    public void run()
    {
        if (! this.validate())
            throw error('');
        try
        {
            ttsbegin;
            this.progressInit(strfmt("@GLS103412", translation.toCompanyId()),
                              RTSLSessionTrans::find(sessionTransId).NumTrans * #Coeff,
                              #AviFileNuke);

            translation.deleteSession(sessionTransId);
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _pack)
    {
        boolean             ret        = true;
        int                 version    = conpeek(_pack, 1);
        int                 classId;
        RTSLRuleGroupId     groupId;
        RTSLSessionTransId  oldTransId = sessionTransId;

        switch (version)
        {
            case #CurrentVersion :
                [ version, #CurrentList, classId, groupId ] = _pack;
                if (! translation)
                {
                    translation = RTSLTranslation::construct(RTSLRuleModule::find(groupId, classId));
                }
                if (oldTransId)
                {
                    sessionTransId = oldTransId;
                }
                break;
            default              :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS103411";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RTSLTranslationBatchDelete  translationDelete;
        RTSLSessionTrans            sessionTrans;
        ;

        if (! _args)
            throw error("@SYS25407");

        if (_args.dataset() != tablenum(RTSLSessionTrans))
            throw error(strfmt("@SYS29104", RTSLTranslation::description()));

        sessionTrans = _args.record();

        translationDelete = new RTSLTranslationBatchDelete();
        translationDelete.parmTranslation(RTSLTranslation::construct(RTSLRuleModule::find(sessionTrans.RuleGroupId,
                                                                                          sessionTrans.ClassId)),
                                          sessionTrans.SessionTransId);

        if (translationDelete.prompt())
        {
            translationDelete.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>