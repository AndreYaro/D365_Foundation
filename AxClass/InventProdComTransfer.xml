<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventProdComTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventProdComTransfer</c> class is responsible for transfer data from sales and project invoice to <c>InventProdComTable</c>.
/// </summary>
class InventProdComTransfer
{
    private const str FeatureReference = 'BE-00020';

    date                    startDate;
    date                    endDate;
    RefRecId                inventProdComPeriodRecId;
    TaxBranchNumber         branchNumber;
    InventProdComBranchType branchType;

    #InventProdCom

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new()
    {
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static InventProdComTransfer construct()
    {
        return new InventProdComTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventProdComTransfer inventProdComTransfer = InventProdComTransfer::construct();

        if (_args.dataset() == tablenum(InventProdComTable))
        {
            inventProdComTransfer.initFields(_args.record());
            inventProdComTransfer.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductUnitConverter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates unit converter object of specified parameters.
    /// </summary>
    /// <param name = "_from">From unit of measure code.</param>
    /// <param name = "_to">To unit of measure code.</param>
    /// <param name = "_itemId">ID of the item.</param>
    /// <param name = "_inventDimId">The dimension ID for conversion.</param>
    /// <returns>The created <c>EcoResProductUnitConverter</c> class.</returns>
    public EcoResProductUnitConverter createProductUnitConverter(
        UnitOfMeasureSymbol _from,
        UnitOfMeasureSymbol _to,
        ItemId              _itemId,
        InventDimId         _inventDimId)
    {
        EcoResProductUnitConverter ecoResProductUnitConverter;

        if (_from != _to && _from && _to)
        {
            ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                                           _inventDimId,
                                                                                                           _from,
                                                                                                           _to);

            if (!ecoResProductUnitConverter.canValueBeConverted())
            {
                error(strfmt("@SYS92102", _from, _to));
            }
        }

        return ecoResProductUnitConverter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert unit values according to specified conversion rule.
    /// </summary>
    /// <param name = "_base">Base value to convert.</param>
    /// <param name = "_converter">Conversion rule.</param>
    /// <returns>The converted value.</returns>
    public real convertValue(
        real                        _base,
        EcoResProductUnitConverter  _converter)
    {
        real value;

        if (_converter)
        {
            value = _converter.convertValue(_base);
        }
        else
        {
            value = _base;
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBranchNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the branch number of the warehouse that has the item.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The lot ID of the sales or project item.
    /// </param>
    /// <returns>
    ///    The branch number of the warehouse if it exists; otherwise, the branch number of the company.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxBranchNumber findBranchNumber(InventTransId _inventTransId)
    {
        InventTransOrigin   inventTransOrigin;
        InventLocation      inventLocation;
        InventTrans         inventTrans;
        InventDim           inventDim;

        select firstonly BranchNumber from inventLocation
            exists join inventDim
                where inventLocation.InventLocationId   == inventDim.InventLocationId
            exists join inventTrans
                where inventTrans.InventDimId           == inventDim.InventDimId
            exists join inventTransOrigin
                where inventTransOrigin.RecId           ==  inventTrans.InventTransOrigin
                   && inventTransOrigin.InventTransId   == _inventTransId;

        return inventLocation.BranchNumber? inventLocation.BranchNumber : CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::BranchId, endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    private void initFields(InventProdComTable _inventProdComTable)
    {
        startDate                   = _inventProdComTable.PeriodStart;
        endDate                     = _inventProdComTable.PeriodEnd;
        inventProdComPeriodRecId    = _inventProdComTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodComLineDetail</Name>
				<Source><![CDATA[
    private void prodComLineDetail(InventProdcomSetup    _inventProdcomSetup,
                                   SalesLine             _salesLine,
                                   SalesTable            _salesTable,
                                   RefRecId              _inventProdComPeriodRecId,
                                   IntrastatToProdcom    _intrastatToProdcom)
    {
        InventProdComLineDetail inventProdComLineDetail;
        CustInvoiceTrans        custInvoiceTrans;

        if (! InventProdComLineDetail::findByInventProdCom(
                                            _salesTable.SalesId,
                                            _salesLine.ItemId,
                                            _inventProdComPeriodRecId,
                                            _salesLine.LineNum,
                                            branchNumber))
        {
            select sum(Qty), sum(LineAmount) from custInvoiceTrans
                where custInvoiceTrans.OrigSalesId   == _salesTable.SalesId
                    && custInvoiceTrans.InventTransId == _salesLine.InventTransId
                    && custInvoiceTrans.InvoiceDate >= startDate 
                    && custInvoiceTrans.InvoiceDate <= endDate;

            ttsbegin;
            inventProdComLineDetail.clear();
            inventProdComLineDetail.InventProdComTable      = _inventProdComPeriodRecId;
            inventProdComLineDetail.InventProdComItemCodeId = _intrastatToProdcom.InventProdComCodeID;
            inventProdComLineDetail.SalesId                 = _salesTable.SalesId;
            inventProdComLineDetail.SalesName               = _salesTable.SalesName;
            inventProdComLineDetail.LineNum                 = _salesLine.LineNum;
            inventProdComLineDetail.CustAccount             = _salesTable.CustAccount;
            inventProdComLineDetail.ItemId                  = _salesLine.ItemId;
            inventProdComLineDetail.SalesQty                = custInvoiceTrans.Qty;
            inventProdComLineDetail.SalesPrice              = custInvoiceTrans.LineAmount / custInvoiceTrans.Qty;
            inventProdComLineDetail.CreationWork            = _inventProdcomSetup.CreationWork;
            inventProdComLineDetail.OtherDelivery           = _inventProdcomSetup.OtherDelivery;
            inventProdComLineDetail.UnitId                  = _salesLine.SalesUnit;
            inventProdComLineDetail.BranchNumber            = branchNumber;
            inventProdComLineDetail.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodComLineDetailProjects</Name>
				<Source><![CDATA[
    private void prodComLineDetailProjects(InventProdcomSetup    _inventProdcomSetup,
                                           ProjInvoiceItem       _projInvoiceItem,
                                           ProjInvoiceJour       _projInvoiceJour,
                                           RefRecId              _inventProdComPeriodRecId,
                                           IntrastatToProdcom    _intrastatToProdcom)
    {
        InventProdComLineDetail inventProdComLineDetail;

        if (! InventProdComLineDetail::findByInventProdCom(_projInvoiceItem.SalesId,
                                            _projInvoiceItem.ItemId,
                                            _inventProdComPeriodRecId,
                                            0,
                                            branchNumber))
        {
            ttsbegin;
            inventProdComLineDetail.clear();
            inventProdComLineDetail.InventProdComTable      = _inventProdComPeriodRecId;
            inventProdComLineDetail.InventProdComItemCodeId = _intrastatToProdcom.InventProdComCodeID;
            inventProdComLineDetail.SalesId                 = _projInvoiceItem.SalesId;
            inventProdComLineDetail.SalesName               = CustTable::find(_projInvoiceJour.InvoiceAccount).name();
            inventProdComLineDetail.LineNum                 =  _projInvoiceItem.salesLine().LineNum;
            inventProdComLineDetail.CustAccount             = _projInvoiceJour.InvoiceAccount;
            inventProdComLineDetail.ItemId                  = _projInvoiceItem.ItemId;
            inventProdComLineDetail.SalesQty                = _projInvoiceItem.Qty;
            inventProdComLineDetail.SalesPrice              = _projInvoiceItem.salesPrice();
            inventProdComLineDetail.CreationWork            = _inventProdcomSetup.CreationWork;
            inventProdComLineDetail.OtherDelivery           = _inventProdcomSetup.OtherDelivery;
            inventProdComLineDetail.UnitId                  = _projInvoiceItem.SalesUnit;
            inventProdComLineDetail.BranchNumber            = branchNumber;
            inventProdComLineDetail.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run()
    {
        InventProdComLineWithCode    inventProdComLineWithCode;

        if (InventProdComLineWithCode::find(inventProdComPeriodRecId))
        {
            ttsbegin;
            delete_from inventProdComLineWithCode
                where inventProdComLineWithCode.InventProdComTable == inventProdComPeriodRecId;
            ttscommit;
        }
        branchNumber = CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::BranchId, endDate);
        branchType   = InventProdComParameters::find().BranchType;
        this.runSalesTable();
        this.runProjects();

        info("@SYS12615");
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProjects</Name>
				<Source><![CDATA[
    private void runProjects()
    {
        InventProdComLineWithCode    inventProdComLineWithCode;
        ProjInvoiceItem              projInvoiceItem;
        ProjInvoiceJour              projInvoiceJour;

        while select projInvoiceItem
               where projInvoiceItem.ItemType       == ProjItemType::SalesOrder
                  && (projInvoiceItem.InvoiceDate   >= startdate &&
                      projInvoiceItem.InvoiceDate   <= enddate)

        {
            if (branchType == InventProdComBranchType::Warehouse)
            {
                branchNumber = this.findBranchNumber(projInvoiceItem.InventTransId);
            }

            select firstonly projInvoiceJour where projInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId;
            inventProdComLineWithCode.clear();
            InventProdcomSetup inventProdcomSetup = InventProdcomSetup::findByItemId(projInvoiceItem.ItemId);
            if (inventProdcomSetup.OwnProduct==NoYes::Yes)
            {
                InventTable inventTable = InventTable::find(projInvoiceItem.ItemId);
                IntrastatToProdcom intrastatToProdcom = IntrastatToProdcom::findByKeyId(inventTable.IntrastatCommodity,year(startDate),year(endDate));
                if (inventTable.IntrastatCommodity || intrastatToProdcom)
                {
                    if (! InventProdComLineWithCode::findOnItem(intrastatToProdcom.InventProdComCodeID, inventProdComPeriodRecId, branchNumber))
                    {
                        inventProdComLineWithCode.InventProdComTable    = inventProdComPeriodRecId;
                        inventProdComLineWithCode.ColumnA               = intrastatToProdcom.InventProdComCodeID;
                        inventProdComLineWithCode.IntrastatCommodity    = inventTable.IntrastatCommodity;
                        inventProdComLineWithCode.ColumnC               = intrastatToProdcom.Unit;
                        inventProdComLineWithCode.BranchNumber          = branchNumber;
                        inventProdComLineWithCode.insert();
                    }
                    ttsbegin;
                    inventProdComLineWithCode = InventProdComLineWithCode::findOnItem(intrastatToProdcom.InventProdComCodeID,
                                                                                      inventProdComPeriodRecId,
                                                                                      branchNumber,
                                                                                      true);
                    if (!inventProdComLineWithCode.ColumnC)
                    {
                        error (strfmt("@SYS92103", intrastatToProdcom.InventProdComCodeID));
                    }
                    EcoResProductUnitConverter conversionRuleA = this.createProductUnitConverter(
                                                                    projInvoiceItem.SalesUnit, 
                                                                    inventProdComLineWithCode.ColumnC, 
                                                                    inventTable.ItemId, 
                                                                    projInvoiceItem.inventDimId);
                    EcoResProductUnitConverter conversionRuleB = this.createProductUnitConverter(
                                                                    inventTable.salesUnitId(), 
                                                                    inventProdComLineWithCode.ColumnC, 
                                                                    inventTable.ItemId, 
                                                                    projInvoiceItem.inventDimId);
                    if (intrastatToProdcom.Variable == #ProdComVarT)
                    {
                        inventProdComLineWithCode.ColumnD = this.convertValue(this.totalProduction(inventTable.ItemId), conversionRuleB);
                    }
                    else
                    {
                        inventProdComLineWithCode.ColumnD = 0;
                    }
                    if (intrastatToProdcom.Variable == #ProdComVarC)
                    {
                        inventProdComLineWithCode.ColumnE = this.convertValue(this.totalProduction(inventTable.ItemId), conversionRuleB);
                    }
                    else
                    {
                        inventProdComLineWithCode.ColumnE = 0;
                    }
                    if (inventProdcomSetup.OtherDelivery == NoYes::Yes)
                    {
                        inventProdComLineWithCode.ColumnF += this.convertValue(projInvoiceItem.Qty, conversionRuleA);
                        inventProdComLineWithCode.ColumnI += projInvoiceItem.amountMST();
                        if (CustTable::find(projInvoiceJour.InvoiceAccount).postalAddress().CountryRegionId == CompanyInfo::find().postalAddress().CountryRegionId)
                        {
                            inventProdComLineWithCode.ColumnG += this.convertValue(projInvoiceItem.Qty, conversionRuleA);
                            inventProdComLineWithCode.ColumnJ += projInvoiceItem.amountMST();
                        }
                        else
                        {
                            inventProdComLineWithCode.ColumnH += this.convertValue(projInvoiceItem.Qty, conversionRuleA);
                            inventProdComLineWithCode.ColumnK += projInvoiceItem.amountMST();
                        }
                    }
                    if (inventProdcomSetup.CreationWork == NoYes::Yes)
                    {
                        if (CustTable::find(projInvoiceJour.InvoiceAccount).postalAddress().CountryRegionId == CompanyInfo::find().postalAddress().CountryRegionId)
                        {
                            inventProdComLineWithCode.ColumnL += this.convertValue(projInvoiceItem.Qty, conversionRuleA);
                            inventProdComLineWithCode.ColumnM += projInvoiceItem.amountMST();
                        }
                        else
                        {
                            inventProdComLineWithCode.ColumnN += this.convertValue(projInvoiceItem.Qty, conversionRuleA);
                            inventProdComLineWithCode.ColumnO += projInvoiceItem.amountMST();
                        }
                    }
                    inventProdComLineWithCode.update();
                    ttscommit;
                }
                if (inventProdcomSetup.OwnProduct == NoYes::Yes)
                {
                    this.prodComLineDetailProjects(inventProdcomSetup, projInvoiceItem, projInvoiceJour, inventProdComPeriodRecId, intrastatToProdcom);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSalesTable</Name>
				<Source><![CDATA[
    private void runSalesTable()
    {
        IntrastatToProdcom              intrastatToProdcom;
        InventProdComLineWithCode       inventProdComLineWithCode;
        SalesTable                      salesTable;
        SalesLine                       salesLine;
        CustInvoiceSalesLink            custInvoiceSalesLink;
        CustInvoiceTrans                custInvoiceTrans;
        LogisticsAddressCountryRegionId countryRegionId;

        while select salesTable
            join RecId from custInvoiceSalesLink
            join Qty, LineAmountMST, InventTransId from custInvoiceTrans
                where salesTable.SalesId                    == custInvoiceSalesLink.OrigSalesId
                   && salesTable.DocumentStatus             == DocumentStatus::Invoice
                   && (custInvoiceSalesLink.InvoiceDate     >= startdate
                        && custInvoiceSalesLink.InvoiceDate <= enddate)
                   && custInvoiceTrans.InvoiceId            == custInvoiceSalesLink.InvoiceId
        {
            while select salesLine
                where salesLine.SalesId             == salesTable.SalesId
                   && salesLine.InventTransId       == custInvoiceTrans.InventTransId
                   && ( salesLine.SalesStatus       == SalesStatus::Invoiced
                        || (salesLine.SalesStatus   == SalesStatus::Backorder
                   && salesLine.RemainSalesPhysical > 0)
                        || (salesLine.SalesStatus   == SalesStatus::Delivered
                   && salesLine.RemainSalesFinancial >0))
            {
                if (branchType == InventProdComBranchType::Warehouse)
                {
                    branchNumber = this.findBranchNumber(salesLine.InventTransId);
                }

                inventProdComLineWithCode.clear();
                InventProdcomSetup inventProdcomSetup = InventProdcomSetup::findByItemId(salesLine.ItemId);
                if (inventProdcomSetup.OwnProduct == NoYes::Yes)
                {
                    InventTable inventTable = InventTable::find(salesLine.ItemId);
                    intrastatToProdcom = IntrastatToProdcom::findByKeyId(inventTable.IntrastatCommodity,year(startDate),year(endDate));
                    if (inventTable.IntrastatCommodity || intrastatToProdcom)
                    {
                        if (! InventProdComLineWithCode::findOnItem(intrastatToProdcom.InventProdComCodeID,
                                                                    inventProdComPeriodRecId,
                                                                    branchNumber))
                        {
                            inventProdComLineWithCode.InventProdComTable    = inventProdComPeriodRecId;
                            inventProdComLineWithCode.ColumnA               = intrastatToProdcom.InventProdComCodeID;
                            inventProdComLineWithCode.IntrastatCommodity    = inventTable.IntrastatCommodity;
                            inventProdComLineWithCode.ColumnC               = intrastatToProdcom.Unit;
                            inventProdComLineWithCode.BranchNumber          = branchNumber;
                            inventProdComLineWithCode.insert();
                        }
                        ttsbegin;
                        inventProdComLineWithCode = InventProdComLineWithCode::findOnItem(intrastatToProdcom.InventProdComCodeID,
                                                                                          inventProdComPeriodRecId,
                                                                                          branchNumber,
                                                                                          true);
                        if (!inventProdComLineWithCode.ColumnC)
                        {
                            error (strfmt("@SYS92103", intrastatToProdcom.InventProdComCodeID));
                        }
                        EcoResProductUnitConverter conversionRuleA = this.createProductUnitConverter(
                                                                        salesLine.SalesUnit, 
                                                                        inventProdComLineWithCode.ColumnC, 
                                                                        inventTable.ItemId, 
                                                                        salesLine.InventDimId);
                        EcoResProductUnitConverter conversionRuleB = this.createProductUnitConverter(
                                                                        inventTable.salesUnitId(), 
                                                                        inventProdComLineWithCode.ColumnC, 
                                                                        inventTable.ItemId, 
                                                                        salesLine.InventDimId);
                        if (intrastatToProdcom.Variable == #ProdComVarT)
                        {
                            inventProdComLineWithCode.ColumnD = this.convertValue(this.totalProduction(inventTable.ItemId), conversionRuleB);
                        }
                        else
                        {
                            inventProdComLineWithCode.ColumnD = 0;
                        }
                        if (intrastatToProdcom.Variable == #ProdComVarC)
                        {
                            inventProdComLineWithCode.ColumnE = this.convertValue(this.totalProduction(inventTable.ItemId), conversionRuleB);
                        }
                        else
                        {
                            inventProdComLineWithCode.ColumnE = 0;
                        }
                        if (inventProdcomSetup.OtherDelivery == NoYes::Yes)
                        {
                            inventProdComLineWithCode.ColumnF += this.convertValue(custInvoiceTrans.Qty, conversionRuleA);
                            inventProdComLineWithCode.ColumnI += custInvoiceTrans.LineAmountMST;
                            if (CustTable::find(salesTable.CustAccount).postalAddress().CountryRegionId == countryRegionId)
                            {
                                inventProdComLineWithCode.ColumnG += this.convertValue(custInvoiceTrans.Qty, conversionRuleA);
                                inventProdComLineWithCode.ColumnJ += custInvoiceTrans.LineAmountMST;
                            }
                            else
                            {
                                inventProdComLineWithCode.ColumnH += this.convertValue(custInvoiceTrans.Qty, conversionRuleA);
                                inventProdComLineWithCode.ColumnK += custInvoiceTrans.LineAmountMST;
                            }
                        }
                        if (inventProdcomSetup.CreationWork == NoYes::Yes)
                        {
                            if (CustTable::find(salesTable.CustAccount).postalAddress().CountryRegionId == countryRegionId)
                            {
                                inventProdComLineWithCode.ColumnL += this.convertValue(custInvoiceTrans.Qty, conversionRuleA);
                                inventProdComLineWithCode.ColumnM += custInvoiceTrans.LineAmountMST;
                            }
                            else
                            {
                                inventProdComLineWithCode.ColumnN += this.convertValue(custInvoiceTrans.Qty, conversionRuleA);
                                inventProdComLineWithCode.ColumnO += custInvoiceTrans.LineAmountMST;
                            }
                        }
                        inventProdComLineWithCode.update();
                        ttscommit;
                    }
                }
                if (inventProdcomSetup.OwnProduct == NoYes::Yes)
                {
                    this.prodComLineDetail(inventProdcomSetup, salesLine, salesTable, inventProdComPeriodRecId, intrastatToProdcom);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalProduction</Name>
				<Source><![CDATA[
    private InventQty totalProduction(ItemId _itemId)
    {
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        InventLocation      inventLocation;
        InventDim           inventDim;

        if (InventProdComParameters::find().BranchType == InventProdComBranchType::Company)
        {
            select TableId from inventTransOrigin
                where inventTransOrigin.ItemId              == _itemId
                   && inventTransOrigin.ReferenceCategory   == InventTransType::Production
                join sum(Qty) from inventTrans
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                       && inventTrans.DatePhysical          >= startDate
                       && inventTrans.DatePhysical          <= endDate;
        }
        else
        {
            select TableId from inventTransOrigin
                where inventTransOrigin.ItemId              == _itemId
                   && inventTransOrigin.ReferenceCategory   == InventTransType::Production
                join sum(Qty) from inventTrans
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                       && inventTrans.DatePhysical          >= startDate
                       && inventTrans.DatePhysical          <= endDate
                exists join inventDim
                    where inventDim.InventDimId             == inventTrans.InventDimId
                exists join inventLocation
                    where inventLocation.InventLocationId   == inventDim.InventLocationId
                       && inventLocation.BranchNumber       == branchNumber;
        }

        return inventTrans.Qty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>