<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingCalculatorCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// The <c>RetailPricingCalculatorCreator</c> class is the plugin interface for the Retail Pricing Engine.
/// </summary>
/// <remarks>
/// When creating a new discount type, a new implementation of this class must be registered and implemented accordingly.
/// Only one implementation can be active at a time.
/// </remarks>
[ExportInterface(ExportInterfaceType::Configuration)]
public abstract class RetailPricingCalculatorCreator
{   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>RetailPricingCalculatorCreator</c>.
    /// </summary>
    /// <remarks>
    /// This method is marked as protected to avoid unwanted instantiations of this any implementations.
    /// The plugin's instance should be obtained through the <c>getInstance</c> method.
    /// </remarks>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderCalculator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance of <c>RetailOrderCalculator</c>.
    /// </summary>
    /// <param name="_tableId">
    /// The TableId of the target table.
    /// </param>
    /// <param name="_salesId">
    /// The primary key of the table.
    /// </param>
    /// <param name="_currentSalesPurchLine">
    /// The line of the transaction.
    /// </param>
    /// <returns>
    /// An instance of <c>RetailOrderCalculator</c>.
    /// </returns>
    public abstract RetailOrderCalculator createOrderCalculator(TableId _tableId, SalesIdBase _salesId, SalesPurchLine _currentSalesPurchLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderCalculatorBasedOnDateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>RetailOrderCalculator</c>.
    /// </summary>
    /// <param name="_tableId">
    /// The TableId of the target table.
    /// </param>
    /// <param name="_salesId">
    /// The primary key of the table.
    /// </param>
    /// <param name="_currentSalesPurchLine">
    /// The line of the transaction.
    /// </param>
    /// <param name="_dateType">
    /// Date type.
    /// </param>
    /// <returns>
    /// An instance of <c>RetailOrderCalculator</c>.
    /// </returns>
    internal RetailOrderCalculator createOrderCalculatorBasedOnDateType(TableId _tableId, SalesIdBase _salesId, SalesPurchLine _currentSalesPurchLine, SalesPriceDateType _dateType = SalesPriceDateType::Today)
    {
        return this.createOrderCalculator(_tableId, _salesId, _currentSalesPurchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPricingSimulator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance of <c>RetailPricingSimulator</c>.
    /// </summary>
    /// <param name="_salesTransactionId">
    /// RecId of PricingSimulatorSalesTransaction table.
    /// </param>
    /// <returns>
    /// A new instance of <c>RetailPricingSimulator</c>.
    /// </returns>
    public abstract RetailPricingSimulator createPricingSimulator(RefRecId _salesTransactionId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>RetailPriceCheck</c>.
    /// </summary>
    /// <returns>A new instance of <c>RetailPriceCheck</c>.</returns>
    public abstract RetailPriceCheck createPriceCheck()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the currently active implementation of <c>RetailPricingCalculatorCreator</c>.
    /// </summary>
    /// <returns>An instance of <c>RetailPricingCalculatorCreator</c>.</returns>
    public static RetailPricingCalculatorCreator getInstance()
    {
        RetailPricingCalculatorCreator::registerDefaultImplementation();

        return RetailPluginUtils::getInstance(classNum(RetailPricingCalculatorCreator));
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Register a implementation of the <c>RetailPricingCalculatorCreator</c> plugin.
    /// </summary>
    /// <param name = "_classId">The <c>ClassId </c>of the implementation.</param>
    /// <param name = "_seq">The sequence in which the plugin should be considered, the lowest the highest priority it will have.</param>
    /// <remarks>
    /// Since only one implementation can be active at a given time, the implementation with lowest sequence number is the one which is going to be active.
    /// Registration should only be performed once. Since the configuration is stored in the database, it will survive AOS restarts.
    /// </remarks>
    public static void registerImplementation(ClassId _classId, int _seq)
    {
        SysPluginConfigurationBuilder::construct().forPlugin(classNum(RetailPricingCalculatorCreator))
                                                  .addImplementation(_classId, _seq)
                                                  .build();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerDefaultImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the default implementation of <c>RetailPricingCalculatorCreator</c> with the highest possible sequence number.
    /// </summary>
    private static void registerDefaultImplementation()
    {
        RetailPricingCalculatorCreator::registerImplementation(classNum(RetailPricingCalculatorDefaultCreator), intMax());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>