<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceUtilities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A class containing tools that can be useful across TransactionService related classes.
/// </summary>
class RetailTransactionServiceUtilities
{
    #define.dateTimeBeginXmlTag("<a:DateTime>")
    #define.offsetBeginXmlTag("<a:OffsetMinutes>")
    #define.dateTimeEndXmlTag("</a:DateTime>")
    #define.offsetEndXmlTag("</a:OffsetMinutes>")
    #define.crtXmlEncoding("utf-16LE")
    #define.crtDataModelXmlNamespace("http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.Commerce.Runtime.DataModel")
    
    private const str crtTransactionServiceXmlNamespace = "http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.Commerce.Runtime.TransactionService";
    private const str DateTimeNullString = '1900-01-01T00:00:00Z';

    #define.RetailTranactionServiceError_Default('RetailTransactionServiceError_MethodFailed')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getErrorCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return a default error code.
    /// </summary>
    /// <param name = "errorMessage">The original error message or stack-trace.</param>
    /// <returns>Default error code.</returns>
    public static str getErrorCode(str errorMessage)
    {
        str errorCode;

        // return simplified error code.
        if (errorMessage)
        {
            errorCode = #RetailTranactionServiceError_Default;
        }

        return errorCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfologMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Infolog messages.
    /// </summary>
    /// <param name="fromLine">
    /// Line in the Infolog buffer.
    /// </param>
    /// <returns>
    /// Infolog message.
    /// </returns>
    public static str getInfologMessages(int fromLine)
    {
        return RetailUtilities::getInfologMessages(fromLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAndClearInfologMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Infolog messages and clears them from the infolog.
    /// </summary>
    /// <param name="fromLine">
    /// Line in the Infolog buffer.
    /// </param>
    /// <returns>
    /// Infolog message.
    /// </returns>
    public static str getAndClearInfologMessages(int fromLine)
    {
        return RetailUtilities::getAndClearInfologMessages(fromLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>realToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a money value to a standard string format.
    /// </summary>
    /// <param name="moneyValue">
    /// Money value to convert to string.
    /// </param>
    /// <returns>
    /// Money in string format with three decimal places,
    /// a dot to denote decimals, and no thousands place separator eg:"1000.000".
    /// </returns>
    public static str realToString(real moneyValue)
    {
        return num2str(moneyValue, 5, 3, DecimalSeparator::Dot, ThousandSeparator::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a quantitative value to a standard string format.
    /// </summary>
    /// <param name="quantitativeValue">
    /// Quantitative value to convert to string.
    /// </param>
    /// <returns>
    /// Quantitative in string format with three decimal places,
    /// a dot to denote decimals, and no thousands place separator eg:"1000.0000000000000000".
    /// </returns>
    public static str qtyToString(real quantitativeValue)
    {
        return num2str(quantitativeValue, 5, 16, DecimalSeparator::Dot, ThousandSeparator::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNumToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a lineNumValue value to a standard string format.
    /// </summary>
    /// <param name="lineNumValue">
    /// LineNum value to convert to string.
    /// </param>
    /// <returns>
    /// Linenum in string format with three decimal places,
    /// a dot to denote decimals, and no thousands place separator eg:"1000.0000000000000000".
    /// </returns>
    public static str lineNumToString(real lineNumValue)
    {
        return num2str(lineNumValue, 5, 16, DecimalSeparator::Dot, ThousandSeparator::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>record2XmlNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a table record to an <c>XmlElement</c>.
    /// </summary>
    /// <param name="_common">
    /// The record buffer.
    /// </param>
    /// <param name="_xml">
    /// The <c>XmlDocument</c> to which the <c>XmlElement</c> is added.
    /// </param>
    /// <param name="_includeFields">
    /// A <c>Set</c> containing fields to include. Leave null to include all fields.
    /// </param>
    /// <returns>
    /// The <c>XmlElement</c> representing the record.
    /// </returns>
    /// <remarks>
    /// This is a generic function which can be modified to handle more scenarios.
    /// </remarks>
    public static XmlElement record2XmlNode(Common _common, XmlDocument _xml, Set _includeFields = null)
    {
        SysDictTable        table;
        SysDictField        field;
        int                 f;
        FieldId             fieldId;
        str                 fieldName;
        anytype             FieldValue;
        XmlElement          node;
        LogisticsPostalAddress address;

        if (!_common || !_xml)
        {
            return null;
        }

        // get the table object
        table = new SysDictTable(_common.TableId);
        if (!table)
        {
            return null;
        }

        node = _xml.createElement(table.name());

        // loop through the fields in the table
        for (f = 1 ; f <= table.fieldCnt() ; f++)
        {
            fieldId = table.fieldCnt2Id(f);
            fieldName = table.fieldName(fieldId);

            if (!fieldId && !_common.isFieldSet(fieldId))
            {
                continue;
            }

            field = null;

            try
            {
                // get the field object
                field = table.fieldObject(fieldId);

                // Do not include system fields
                if (!field || field.isSystem())
                {
                    continue;
                }
            }
            catch
            {
                // no field object so move to the next iteration
                continue;
            }

            fieldName = field.name();

            // If set is null, all fields are added, if not null add only fields in the set
            if (_includeFields == null || (_includeFields != null && !_includeFields.in(fieldId)))
            {
                continue;
            }

            switch (field.baseType())
            {
                case Types::Container:
                    // not supported
                    continue;
                case Types::Enum:
                    FieldValue = int2str(enum2int(_common.getFieldValue(fieldName)));
                    break;
                case Types::Date:
                    FieldValue = date2str(_common.getFieldValue(fieldName), 321, DateDay::Digits2,
                                                        DateSeparator::Hyphen,
                                                        DateMonth::Digits2, DateSeparator::Hyphen,
                                                        DateYear::Digits4, DateFlags::None);
                    break;
                case Types::Int64:
                    if (field.typeId() == extendedTypeNum(LogisticsPostalAddressRecId))
                    {
                        // This is one of cases, add more cases when encountered
                        address = LogisticsPostalAddress::findRecId(_common.getFieldValue(fieldName));
                        node.setAttribute(fieldStr(LogisticsPostalAddress, CountryRegionId), address.CountryRegionId);
                        node.setAttribute(fieldStr(LogisticsPostalAddress, State), address.State);
                        node.setAttribute(fieldStr(LogisticsPostalAddress, County), address.County);
                        node.setAttribute(fieldStr(LogisticsPostalAddress, City), address.City);
                        node.setAttribute(fieldStr(LogisticsPostalAddress, DistrictName), address.DistrictName);
                        node.setAttribute(fieldStr(LogisticsPostalAddress, Street), address.Street);
                        node.setAttribute(fieldStr(LogisticsPostalAddress, StreetNumber), address.StreetNumber);
                        node.setAttribute(fieldStr(LogisticsPostalAddress, BuildingCompliment), address.BuildingCompliment);
                        node.setAttribute(fieldStr(LogisticsPostalAddress, ZipCode), address.ZipCode);
                        continue;
                    }
                    else
                    {
                        FieldValue = int642str(_common.getFieldValue(fieldName));
                    }
                    break;
                case Types::Integer:
                    FieldValue = int2str(_common.getFieldValue(fieldName));
                    break;
                case Types::Real:
                    FieldValue = num2str(_common.getFieldValue(fieldName), 0, 2, DecimalSeparator::Dot, ThousandSeparator::None);
                    break;
                case Types::Time:
                    FieldValue = time2StrHMS(_common.getFieldValue(fieldName));
                    break;
                case Types::Guid:
                    FieldValue = guid2str(_common.getFieldValue(fieldName));
                    break;
                case Types::String:
                    FieldValue = _common.getFieldValue(fieldName);
                    break;
                case Types::UtcDateTime:
                    FieldValue = DateTimeUtil::toStr(_common.getFieldValue(fieldName));
                    break;
                default:
                    continue;
            }

            node.setAttribute(fieldName, FieldValue);
        }

        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>utcDateTimeToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert date-time to a standard string format.
    /// </summary>
    /// <param name="theDateTime">
    /// Date Time to convert to string.
    /// </param>
    /// <returns>
    /// Date Time in string format "dd/mm/yyyy hh:mm:ss".
    /// </returns>
    public static str utcDateTimeToString(utcdatetime theDateTime)
    {
        return DateTimeUtil::toFormattedStr(
            theDateTime,
            321,
            DateDay::Digits2,
            DateSeparator::Slash, // separator1
            DateMonth::Digits2,
            DateSeparator::Slash, // separator2
            DateYear::Digits4,
            TimeSeparator::Colon,
            TimeSeparator::Colon,
            DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>utcDateTimeToDateTimeStringWithOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a utc datetime value to a standard datetime string format plus offset based on timezone setting of the UTC.
    /// </summary>
    /// <param name="theDateTime">
    /// UtcDateTime to convert to string with offset.
    /// </param>
    /// <returns>
    /// Date in string format "dd-mm-yyyy" + OffsetMinutes.
    /// </returns>
    public static str utcDateTimeToDateTimeStringWithOffset(utcDateTime theDateTime)
    {
        return RetailTransactionServiceUtilities::strDateTimeToDateTimeStringWithOffset(DateTimeUtil::toStr(theDateTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>strDateTimeToDateTimeStringWithOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a utc datetime value string to a standard datetime string format plus offset based on timezone setting of the UTC.
    /// </summary>
    /// <param name="_dateTimeStr">
    /// UtcDateTime in format of str to convert to string with offset.
    /// </param>
    /// <returns>
    /// Date in string format "dd-mm-yyyy" + OffsetMinutes.
    /// </returns>
    public static str strDateTimeToDateTimeStringWithOffset(str _dateTimeStr)
    {
        str dateTimeStr, offsetStr;

        dateTimeStr = #dateTimeBeginXmlTag + _dateTimeStr + #dateTimeEndXmlTag;

        offsetStr = #offsetBeginXmlTag + int2str(0) + #offsetEndXmlTag;

        return dateTimeStr + offsetStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToDateTimeStringWithOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a date value to a standard datetime string format plus offset based on timezone setting of the current leagl entity.
    /// </summary>
    /// <param name="theDate">
    /// Date to convert to string with osffset.
    /// </param>
    /// <param name="channelId">
    /// Retail channel identifier.
    /// </param>
    /// <returns>
    /// Date in string format "yyyy-mm-dd" + OffsetMinutes.
    /// </returns>
    public static str dateToDateTimeStringWithOffset(date theDate, RecId channelId)
    {
        str dateTimeStr, offsetStr;
        Timezone tz;
        utcDateTime convertedUtcDateTime;
        RetailChannelTable retailChannelTable;

        dateTimeStr = #dateTimeBeginXmlTag + RetailTransactionServiceUtilities::dateToString(theDate) + #dateTimeEndXmlTag;

        select ChannelTimeZone from retailChannelTable
        where retailChannelTable.RecId == channelId;
        tz = retailChannelTable.ChannelTimeZone;

        convertedUtcDateTime = Global::datetobeginUtcDateTime(theDate, tz);
        offsetStr = #offsetBeginXmlTag + int2str(DateTimeUtil::getTimeZoneOffset(convertedUtcDateTime, tz)) + #offsetEndXmlTag;

        return dateTimeStr + offsetStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>utcDateTimeToDateTimeStringWithOffsetAndTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a utsdatetime value to a standard datetime string format plus offset based on timezone setting of the current channel.
    /// </summary>
    /// <param name="theDateTime">
    /// DateTime to convert to string with osffset.
    /// </param>
    /// <param name="channelId">
    /// Retail channel identifier.
    /// </param>
    /// <returns>
    /// Date/Time in a XML format string "<a:DateTime>yyyy-mm-ddThh:mm:ss</a:DateTime><a:OffsetMinutes>offsetMinutes</a:OffsetMinutes>".
    /// </returns>
    public static str utcDateTimeToDateTimeStringWithOffsetAndTimeZone(utcdatetime theDateTime, RecId channelId)
    {
        str dateTimeStr, offsetStr;
        Timezone tz;
        RetailChannelTable retailChannelTable;

        dateTimeStr = #dateTimeBeginXmlTag + DateTimeUtil::toStr(theDateTime) + #dateTimeEndXmlTag;

        select ChannelTimeZone from retailChannelTable
        where retailChannelTable.RecId == channelId;
        tz = retailChannelTable.ChannelTimeZone;

        offsetStr = #offsetBeginXmlTag + int2str(DateTimeUtil::getTimeZoneOffset(theDateTime, tz)) + #offsetEndXmlTag;

        return dateTimeStr + offsetStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToDateTimeOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a date value to a standard datetime plus offset based on timezone setting of the current leagl entity.
    /// </summary>
    /// <param name="theDate">
    /// Date to convert with osffset.
    /// </param>
    /// <param name="channelId">
    /// Retail channel identifier.
    /// </param>
    /// <returns>
    /// DateTimeOffset for the given Date and Channel TimeZone.
    /// </returns>
    public static System.DateTimeOffset dateToDateTimeOffset(date theDate, RecId channelId)
    {
        Timezone tz = (select ChannelTimeZone from RetailChannelTable where retailChannelTable.RecId == channelId).ChannelTimeZone;
        utcDateTime convertedUtcDateTime = Global::datetobeginUtcDateTime(theDate, tz);

        System.DateTimeOffset offset = new System.DateTimeOffset(
            DateTimeUtil::year(convertedUtcDateTime), //year,
            DateTimeUtil::month(convertedUtcDateTime), // month
            DateTimeUtil::day(convertedUtcDateTime), //day
            0, //hour
            0, //minute
            0, //second
            0, //millisecond
            new System.TimeSpan(
                0, // hours
                DateTimeUtil::getTimeZoneOffset(convertedUtcDateTime, tz), //minutes
                0)  //seconds
            );
        return offset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToDateTimeWithOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a date value to a standard datetime plus offset based on timezone setting.
    /// </summary>
    /// <param name="theDate">
    /// Date to convert with offset.
    /// </param>
    /// <param name="channelId">
    /// Retail channel identifier.
    /// </param>
    /// <returns>
    /// DateTime for the given Date and Channel TimeZone.
    /// </returns>
    public static System.DateTimeOffset dateToDateTimeWithOffset(date theDate, RecId channelId)
    {
        Timezone tz = (select ChannelTimeZone from RetailChannelTable where retailChannelTable.RecId == channelId).ChannelTimeZone;
        utcDateTime convertedUtcDateTime = Global::datetobeginUtcDateTime(theDate, tz);

        System.DateTimeOffset dateTimeOffset = new System.DateTimeOffset(
            DateTimeUtil::year(theDate),
            DateTimeUtil::month(theDate),
            DateTimeUtil::day(theDate),
            0,
            0,
            0,
            0,
            new System.TimeSpan(
                0,
                DateTimeUtil::getTimeZoneOffset(convertedUtcDateTime, tz),
                0)
            );
        return dateTimeOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert date to a standard string format
    /// </summary>
    /// <param name="theDate">
    /// Date to convert to string
    /// </param>
    /// <returns>
    /// Date in string format "yyyy-mm-dd"
    /// </returns>
    public static str dateToString(TransDate theDate)
    {
        return date2str(
            theDate,
            321,
            DateDay::Digits2,
            DateSeparator::Hyphen, // separator1
            DateMonth::Digits2,
            DateSeparator::Hyphen, // separator2
            DateYear::Digits4,
            DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelSchemaRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a given channel's channel schema RecId.
    /// </summary>
    /// <param name="channelRecId">
    /// The store or channel to find the schema RecId for.
    /// </param>
    /// <returns>
    /// The RetailConnChannelSchema RecId corresponding to the specified channel.
    /// </returns>
    public static RecId getChannelSchemaRecId(RecId channelRecId)
    {
        RetailChannelTableExt       channelTableExt;
        RetailConnDatabaseProfile   databaseProfile;
        RetailCDXDataGroup          dataGroup;
        RetailConnChannelSchema     connChannelSchema;

        select firstonly ChannelSchema
            from dataGroup
            exists join databaseProfile
                where dataGroup.RecId == databaseProfile.DataGroup
            exists join channelTableExt
                where databaseProfile.RecId == channelTableExt.LiveChannelDatabase
                && channelTableExt.Channel == channelRecId
            exists join connChannelSchema
                where connChannelSchema.RecId == dataGroup.ChannelSchema;

        if (!dataGroup)
        {
            throw Global::error(strFmt("@Retail:NoChannelSchemaFound", channelRecId));
        }

        return dataGroup.ChannelSchema;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlDocumentForSerializedEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// A utility method to get a properly configured XML document to serialize entities (for use with SerializationHelper).
    /// </summary>
    /// <returns>
    /// An XML document formatted to deserialize into an object in CRT via SerializationHelper.
    /// </returns>
    public static XmlDocument getXmlDocumentForSerializedEntities()
    {
        return XmlDocument::newBlank(#crtXmlEncoding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCrtDataModelXmlNamespace</Name>
				<Source><![CDATA[
    /// <summary>
    /// A utility method to get CRT's XML namespace (for use with SerializationHelper).
    /// </summary>
    /// <returns>
    /// The XML namespace required to deserialize XML into objects in CRT.
    /// </returns>
    public static str getCrtDataModelXmlNamespace()
    {
        return #crtDataModelXmlNamespace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCrtTransactionServiceXmlNamespace</Name>
				<Source><![CDATA[
    /// <summary>
    /// A utility method to get CRT's TransactionService XML namespace (for use with SerializationHelper).
    /// </summary>
    /// <returns>
    /// The XML namespace required to deserialize XML into objects in CRT.
    /// </returns>
    internal static str getCrtTransactionServiceXmlNamespace()
    {
        return crtTransactionServiceXmlNamespace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ParseRootElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parse an XML string and return the root element.
    /// </summary>
    /// <param name = "_xmlString">XML string to parse.</param>
    /// <returns>The root <c>XmlElement</c>.</returns>
    public static XmlElement ParseRootElement(str _xmlString)
    {
        XmlDocument         argsXml;
        XmlElement          argsRoot;

        argsXml   = new XmlDocument();
        if (argsXml.loadXml(_xmlString))
        {
            argsRoot = argsXml.documentElement();
        }
        return argsRoot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the value of a named element under the given root <c>XmlElement</c>.
    /// </summary>
    /// <param name = "_rootElement">The root <c>XmlElement</c>.</param>
    /// <param name = "_elementName">The name of the element to return.</param>
    /// <returns>The value of the given element, or empty string if it doesn't exist.</returns>
    public static str GetValue(XmlElement _rootElement, str _elementName)
    {
        str result = '';

        XmlElement xmlRoot = _rootElement.getNamedElement(_elementName);
        if (xmlRoot != null)
        {
            result = xmlRoot.text();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addElementResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Add string result value to XML element.
    /// </summary>
    /// <param name = "_resultDoc">The XML document.</param>
    /// <param name = "_parentElement">The parent element.</param>
    /// <param name = "_elementName">The element name.</param>
    /// <param name = "_value">The value to be added to XML result.</param>
    public static void addElementResult(XmlDocument _resultDoc, XmlElement _parentElement, str _elementName, str _elementValue)
    {
        XmlElement elementResult = _resultDoc.createElement(_elementName);
        elementResult.innerText(_elementValue);
        _parentElement.appendChild(elementResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDateElementResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add date result value to XML element.
    /// </summary>
    /// <param name = "_resultDoc">The XML document.</param>
    /// <param name = "_parentElement">The parent element.</param>
    /// <param name = "_elementName">The element name.</param>
    /// <param name = "_dateTimeStr">The datetime value as a string.</param>
    public static void addDateElementResult(XmlDocument _resultDoc, XmlElement _parentElement, str _elementName, str _dateTimeStr)
    {
        XmlElement propertyElement = _resultDoc.createElement(_elementName);
        propertyElement.setAttribute('xmlns:a', 'http://schemas.datacontract.org/2004/07/System');
        propertyElement.innerXml(RetailTransactionServiceUtilities::strDateTimeToDateTimeStringWithOffset(_dateTimeStr));
        _parentElement.appendChild(propertyElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDateWithEmptyDefaultElementResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add date result value to XML element.
    /// </summary>
    /// <param name = "_resultDoc">The XML document.</param>
    /// <param name = "_parentElement">The parent element.</param>
    /// <param name = "_elementName">The element name.</param>
    /// <param name = "_dateTimeStr">The datetime value as a string.</param>
    public static void addDateWithEmptyDefaultElementResult(XmlDocument _resultDoc, XmlElement _parentElement, str _elementName, str _dateTimeStr)
    {
        _dateTimeStr = _dateTimeStr != '' ? _dateTimeStr : DateTimeNullString;

        RetailTransactionServiceUtilities::addDateElementResult(_resultDoc, _parentElement, _elementName, _dateTimeStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseSortColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parse the node SortColumn in xml element.
    /// </summary>
    /// <param name = "_sortColumnElement">The xml contains the SortColumn.</param>
    /// <returns>A container of the sort column.</returns>
    internal static container parseSortColumn(XmlElement _sortColumnElement)
    {
        XmlElement node;
        str        columnName = '';
        SortOrder  sortOrder = SortOrder::Ascending;

        if (_sortColumnElement != null)
        {
            node = _sortColumnElement.getNamedElement('ColumnName');
            if (node != null)
            {
                columnName = node.text();
            }

            node = _sortColumnElement.getNamedElement('IsDescending');
            if (node != null)
            {
                sortOrder = strContains(node.text(), 'true') ? SortOrder::Descending : SortOrder::Ascending;
            }
        }

        return [columnName, sortOrder];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>