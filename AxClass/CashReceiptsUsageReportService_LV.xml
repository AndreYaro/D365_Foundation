<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashReceiptsUsageReportService_LV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Declares variables and tables to generate Cash receipts usage report.
/// </summary>
public class CashReceiptsUsageReportService_LV
{
    private TransDate start;
    private TransDate end;
    private TmpCashReceiptsUsageLV tmpCashReceiptsUsageLV;
    private CashReceiptsUsageReportContractLV dataContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateReportData</Name>
				<Source><![CDATA[
    private void generateReportData(Query _query, boolean _beforeQuarter)
    {
        lvCashReceiptTrans  prevLvCashReceiptTrans;
        LvCashReceiptTrans  lvCashReceiptTrans;
        lvCashReceiptTable  prevLvCashReceiptTable;
        LvCashReceiptTable  lvCashReceiptTable;

        QueryRun queryRun = new QueryRun(_query);

        while (queryRun.next())
        {
            lvCashReceiptTrans = queryRun.get(tablenum(lvCashReceiptTrans));
            lvCashReceiptTable = queryRun.get(tablenum(lvCashReceiptTable));

            if (prevLvCashReceiptTable.RecId != lvCashReceiptTable.RecId
                && lvCashReceiptTrans.FromNumber != lvCashReceiptTable.FromNumber)
            {
                // If there are receipts unused at the begining of the batch
                this.insertTmpCashReceiptsUsage(tmpCashReceiptsUsageLV, lvCashReceiptTable.AcquisitionDate, lvCashReceiptTable.FromNumber, lvCashReceiptTrans.FromNumber -1, lvCashReceiptTable.Format, CashReceiptsUsageReportSectionLV::Section5, _beforeQuarter);
            }

            this.insertTmpCashReceiptsUsage(tmpCashReceiptsUsageLV, lvCashReceiptTrans.TransactionDate, lvCashReceiptTrans.FromNumber, lvCashReceiptTrans.ToNumber, prevLvCashReceiptTable.Format, CashReceiptsUsageReportSectionLV::Section3, _beforeQuarter, lvCashReceiptTrans.Type, lvCashReceiptTrans.AmountMST);
            // Remainder between receipt transactions
            if (lvCashReceiptTrans.LvCashReceiptTable == prevLvCashReceiptTrans.LvCashReceiptTable)
            {
                this.insertTmpCashReceiptsUsage(tmpCashReceiptsUsageLV, prevLvCashReceiptTable.AcquisitionDate, prevLvCashReceiptTrans.ToNumber + 1, lvCashReceiptTrans.FromNumber-1, prevLvCashReceiptTable.Format, CashReceiptsUsageReportSectionLV::Section5, _beforeQuarter);
            }
            else if (prevLvCashReceiptTrans.ToNumber != prevLvCashReceiptTable.ToNumber)
            {
                this.insertTmpCashReceiptsUsage(tmpCashReceiptsUsageLV, prevLvCashReceiptTable.AcquisitionDate, prevLvCashReceiptTrans.ToNumber + 1, prevLvCashReceiptTable.ToNumber, prevLvCashReceiptTable.Format, CashReceiptsUsageReportSectionLV::Section5, _beforeQuarter);
            }

            prevLvCashReceiptTrans.data(lvCashReceiptTrans);
            prevLvCashReceiptTable.data(lvCashReceiptTable);
        }

        if (prevLvCashReceiptTrans && prevLvCashReceiptTrans.ToNumber != prevLvCashReceiptTable.ToNumber)
        {
            // Remainder
            this.insertTmpCashReceiptsUsage(tmpCashReceiptsUsageLV, prevLvCashReceiptTable.AcquisitionDate, prevLvCashReceiptTrans.ToNumber + 1, prevLvCashReceiptTable.ToNumber, prevLvCashReceiptTable.Format, CashReceiptsUsageReportSectionLV::Section5, _beforeQuarter);
        }
        // Registered in the quarter
        while select lvCashReceiptTable
        where   lvCashReceiptTable.AcquisitionDate >= start &&
                lvCashReceiptTable.AcquisitionDate <= end
        {
            this.insertTmpCashReceiptsUsage(tmpCashReceiptsUsageLV, lvCashReceiptTable.AcquisitionDate, lvCashReceiptTable.FromNumber, lvCashReceiptTable.ToNumber, lvCashReceiptTable.Format, CashReceiptsUsageReportSectionLV::Section2, _beforeQuarter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpCashReceiptsUsageLV</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns data from the <c>TmpCashReceiptsUsageLV</c> temporary table.
    /// </summary>
    /// <returns>
    /// Data from the <c>TmpCashReceiptsUsageLV</c> temporary table.
    /// </returns>
    public tmpCashReceiptsUsageLV getTmpCashReceiptsUsageLV()
    {
        select tmpCashReceiptsUsageLV;
        return tmpCashReceiptsUsageLV;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpCashReceiptsUsage</Name>
				<Source><![CDATA[
    private void insertTmpCashReceiptsUsage(
        TmpCashReceiptsUsageLV              _tmpCashReceiptsUsageLV,
        TransDate                           _acquisitionDate,
        LvFromNumber                        _fromNumber,
        LvToNumber                          _toNumber,
        NumberSequenceFormat                _format,
        CashReceiptsUsageReportSectionLV    _section = CashReceiptsUsageReportSectionLV::Section5,
        boolean                             _beforeQuarter = false,
        LvCashReceiptTransactionsType       _type = LvCashReceiptTransactionsType::Used,
        AmountMST                           _amountMST = 0)
    {
        _tmpCashReceiptsUsageLV.AcquisitionDate = _acquisitionDate;
        _tmpCashReceiptsUsageLV.AmountMST = _amountMST;
        _tmpCashReceiptsUsageLV.FromNumber = _fromNumber;
        _tmpCashReceiptsUsageLV.ToNumber = _toNumber;
        _tmpCashReceiptsUsageLV.TotalReceipts = _toNumber - _fromNumber + 1;

        // If these are unused receipts before the begining of the quarter
        if (_beforeQuarter && _section == CashReceiptsUsageReportSectionLV::Section5)
        {
            _tmpCashReceiptsUsageLV.Section = CashReceiptsUsageReportSectionLV::Section1;
        }
        //If the receipts are voided, move them to section 4
        else if (_section == CashReceiptsUsageReportSectionLV::Section3 && _type == LvCashReceiptTransactionsType::Voided)
        {
            _tmpCashReceiptsUsageLV.Section = CashReceiptsUsageReportSectionLV::Section4;
        }
        else
        {
            _tmpCashReceiptsUsageLV.Section = _section;
        }

        // Dont insert values unless its either within the quarter or for section1
        if (!_beforeQuarter || tmpCashReceiptsUsageLV.Section == CashReceiptsUsageReportSectionLV::Section1)
        {
            _tmpCashReceiptsUsageLV.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic for cash receipts usage which is used to populate a temporary table.
    /// </summary>
    public void processReport()
    {
        Query query = new Query(SysOperationHelper::base64Decode(dataContract.parmQuery()));
        QueryBuildDataSource qbd = query.dataSourceTable(tablenum(lvCashReceiptTable));

        // Only count the receipts batch which are not closed, or closed after the start of the quarter
        qbd.addRange(fieldnum(lvCashReceiptTable, ClosingDate)).value(queryRange(start, dateMax()));
        qbd.addRange(fieldnum(lvCashReceiptTable, ClosingDate)).value(queryValue(dateNull()));

        qbd = query.dataSourceTable(tablenum(lvCashReceiptTrans));
        qbd.addRange(fieldnum(LvCashReceiptTrans, Type)).value(queryRange(LvCashReceiptTransactionsType::Used, LvCashReceiptTransactionsType::Voided));
        qbd.addSortField(fieldnum(lvCashReceiptTrans, lvCashReceiptTable));
        qbd.addSortField(fieldnum(lvCashReceiptTrans, fromNumber));

        // Generate report data for receipts which are unused at the begining of the quarter
        qbd.addRange(fieldnum(lvCashReceiptTrans, TransactionDate)).value(queryRange(dateNull(), start - 1));
        this.generateReportData(query, true);

        qbd.clearRange(fieldnum(lvCashReceiptTrans, TransactionDate));
        // Generate report data for the receipts in the quarter
        qbd.addRange(fieldnum(lvCashReceiptTrans, TransactionDate)).value(queryRange(start, end));
        this.generateReportData(query, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called by service controller.
    /// </summary>
    /// <param name = "_dataContract">The report parameters.</param>
    public void run(CashReceiptsUsageReportContractLV _dataContract)
    {
        dataContract = _dataContract;
        [start, end] = CashReceiptsUsageReportService_LV::getReportPeriod(dataContract.parmQuarterOfYear(), dataContract.parmReportYear());
        dataContract.parmStartDate(start);
        dataContract.parmEndDate(end);
        if (dataContract.parmGenerateExcel())
        {
            this.processReport();
        }
        this.runER();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    private void runER()
    {
        ERObjectsFactory::createFormatMappingRunByFormatMappingId(dataContract.parmFormatMapping())
            .withFileDestination(ERObjectsFactory::createFileDestinationBrowser())
                .withParameter(new ERModelDefinitionDatabaseContext()
                    .addTemporaryTable(this.getTmpCashReceiptsUsageLV()))
                        .withCreatingObjectParameter(CashReceiptsUsageReportContractLV::parmERModelname(),
                                                     classStr(CashReceiptsUsageReportContractLV),
                                                     dataContract)
                            .run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the begining and end of the quarter.
    /// </summary>
    /// <param name="_quarter">
    /// The quarter of the year.
    /// </param>
    /// <param name="_year">
    /// The year in which the quarter belongs.
    /// </param>
    /// <returns>
    /// The begining and end date of the quarter, as a container.
    /// </returns>
    public static container getReportPeriod(quarterOfYear _quarter, Yr _year)
    {
        TransDate start, end;

        start = mkdate(1, _quarter * 3 - 2, _year);
        if (_quarter == 4)
        {
            end = mkdate(1, 1, _year + 1) - 1;
        }
        else
        {
            end = mkdate(1, _quarter * 3 + 1, _year) - 1;
        }

        return [start, end];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>