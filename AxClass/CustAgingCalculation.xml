<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAgingCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustAgingCalculation</c> class runs aging process for customers.
/// </summary>
/// <remarks>
///    This class is derived from the <see cref="T:CustVendAgingCalculation" /> and contains Accounts Receivable specifics.
/// </remarks>
class CustAgingCalculation extends CustVendAgingCalculation
{
    List billingClassificationList;
    NoYes inclTransWithNoBillingClass;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process()
    {
        super();

        if (updateCollectionsStatus)
        {
            CustDisputeHistoryAutomationAging::updateCollectionsStatus(customersVendors, agingDate);
        }

        if (CustDisputeHistoryAutomationAvoidTempDbLeakFlight::instance().isEnabled())
        {
            customersVendors.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerOrVendorTableId</Name>
				<Source><![CDATA[
    protected TableId getCustomerOrVendorTableId()
    {
        return tableNum(CustTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionTableId</Name>
				<Source><![CDATA[
    protected TableId getTransactionTableId()
    {
        return tableNum(CustTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
            QueryRun _custVendQuery,
            DateTransactionDuedate _agedBy,
            CustVendAgingPeriodScaleTmp _custVendAgingPeriodScaleTmp,
            TransDate _balanceAsOfDate,
            int _agingBucketCount,
            NoYes _paymentsToSpecialBucket,
            NoYes _includeReversedTransactions,
            NoYes _calculateDetails,
            NoYes _excludeZeroBalance,
            NoYes _excludeNegativeBalance,
            List _billingClass = null,
            NoYes _inclTransWithNoBillingClass = NoYes::No,
            Query _custVendTransQuery = null,
            boolean _updateCollectionsStatus = true,
            CustAgingDate _agingDate = dateNull())
    {
        billingClassificationList = _billingClass;
        inclTransWithNoBillingClass = _inclTransWithNoBillingClass;

        super(  _custVendQuery,
                _agedBy,
                _custVendAgingPeriodScaleTmp,
                _balanceAsOfDate,
                _agingBucketCount,
                _paymentsToSpecialBucket,
                _includeReversedTransactions,
                _calculateDetails,
                _excludeZeroBalance,
                _excludeNegativeBalance,
                _custVendTransQuery,
                _updateCollectionsStatus,
                _agingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    protected CustVendAgingCalculatedTmp postProcess()
    {
        var totalBalances = super();

        if (excludeNegativeBalance || excludeZeroBalance)
        {
            delete_from agingCalculatedTmp
                exists join totalBalances
                    where agingCalculatedTmp.AccountNum == totalBalances.AccountNum
                            && ((totalBalances.Amount == 0 && excludeZeroBalance) || (totalBalances.Amount < 0 && excludeNegativeBalance));
        }

        if (!excludeZeroBalance)
        {
            insert_recordset agingCalculatedTmp (AccountNum, Txt)
                select AccountNum, Name from customersVendors
                    notExists join totalBalances
                        where customersVendors.AccountNum == totalBalances.AccountNum;
        }

        return totalBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcess</Name>
				<Source><![CDATA[
    protected void preProcess(CustVendAgingProcessingTmp _agingProcessingTmp, CustVendAgingProcessingDetailsTmp _agingProcessingDetailsTmp)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && (billingClassificationList || inclTransWithNoBillingClass))
        {
            CustBillingClassification billingClassifications;
            CustTrans custTrans;
            var billingClassificationProcessing = this.readBillingClassifications();

            delete_from _agingProcessingTmp
                exists join custTrans
                    where custTrans.RecId == _agingProcessingTmp.TransRecId
                exists join billingClassifications
                    where billingClassifications.RecId == custTrans.CustBillingClassification
                notexists join billingClassificationProcessing
                    where billingClassificationProcessing.BillingClassification == billingClassifications.BillingClassification;

            delete_from _agingProcessingTmp
                exists join custTrans
                    where custTrans.RecId == _agingProcessingTmp.TransRecId
                            && !inclTransWithNoBillingClass
                            && custTrans.CustBillingClassification == 0;

            if (billingClassificationList && !billingClassificationList.empty())
            {
                update_recordSet _agingProcessingTmp
                    setting
                        BillingClassification = billingClassifications.BillingClassification
                    join custTrans
                        where custTrans.RecId == _agingProcessingTmp.TransRecId
                    join billingClassifications
                        where billingClassifications.RecId == custTrans.CustBillingClassification
                    exists join billingClassificationProcessing
                        where billingClassificationProcessing.BillingClassification == billingClassifications.BillingClassification;
            }
        }

        //super is called after the code because in it we clean up TransRecId in case of non-detailed view is needed
        //while BillingClassification is intended to show up in non-detailed view for PS enabled.
        super(_agingProcessingTmp, _agingProcessingDetailsTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readBillingClassifications</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the list of selected billing classifications to new instance of <c>CustVendAgingProcessingTmp</c> table to perform set-based operations on it.
    /// </summary>
    /// <returns>
    /// The <c>CustVendAgingProcessingTmp</c> buffer with lines where only billing classification is filled in.
    /// </returns>
    /// <remarks>
    /// List of billing classifications is specified through construct method of <c>CustVendAgingCalculation</c>.
    /// </remarks>
    protected CustVendAgingProcessingTmp readBillingClassifications()
    {
        CustVendAgingProcessingTmp billingClassificationProcessing;

        var recordInsertList = new RecordInsertList(tableNum(CustVendAgingProcessingTmp), true, true, true, false, true, billingClassificationProcessing);

        var literator = billingClassificationList.getEnumerator();

        while (literator.moveNext())
        {
            billingClassificationProcessing.BillingClassification = literator.current();
            recordInsertList.add(billingClassificationProcessing);
        }

        recordInsertList.insertDatabase();

        return billingClassificationProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDetailsOfTransactions</Name>
				<Source><![CDATA[
    protected CustVendAgingProcessingDetailsTmp selectDetailsOfTransactions(CustVendAgingProcessingTmp _agingProcessingTmp)
    {
        var agingProcessingDetailsTmp = super(_agingProcessingTmp);

        // The update below cannot be done in super because super works with maps (CustVendTransOpen and CustVendSettlement).
        // Compile error pops up when update_recordset is called with a map joined to the updated table.

        switch (agedBy)
        {
            case DateTransactionDuedate::DueDate:
                CustSettlement custSettlement;

                update_recordSet agingProcessingDetailsTmp
                    setting
                        TransDate = custSettlement.DueDate
                    join _agingProcessingTmp
                        where _agingProcessingTmp.RecId == agingProcessingDetailsTmp.ProcessingRecId
                    join custSettlement
                        where _agingProcessingTmp.SettlementRecId == custSettlement.RecId
                                && custSettlement.TransDate > balanceAsOfDate
                                && custSettlement.DueDate > dateNull();

                CustTransOpen custTransOpen;

                update_recordSet agingProcessingDetailsTmp
                    setting
                        TransDate = custTransOpen.DueDate
                    join _agingProcessingTmp
                        where _agingProcessingTmp.RecId == agingProcessingDetailsTmp.ProcessingRecId
                    join custTransOpen
                        where _agingProcessingTmp.TransOpenRecId == custTransOpen.RecId
                            && custTransOpen.TransDate <= balanceAsOfDate
                            && custTransOpen.DueDate > dateNull();
                break;

            case DateTransactionDuedate::DocumentDate:
                CustTrans custTrans;
                update_recordSet agingProcessingDetailsTmp
                    setting
                        TransDate = custTrans.DocumentDate
                    join _agingProcessingTmp
                        where _agingProcessingTmp.RecId == agingProcessingDetailsTmp.ProcessingRecId
                    join custTrans
                        where _agingProcessingTmp.TransRecId == custTrans.RecId
                                && custTrans.TransDate <= balanceAsOfDate
                                && (!custTrans.Closed || custTrans.Closed >= balanceAsOfDate)
                                && custTrans.DocumentDate > dateNull()
                    exists join customersVendors
                        where custTrans.AccountNum == customersVendors.AccountNum;
                break;
        }

        return agingProcessingDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectTransactions</Name>
				<Source><![CDATA[
    protected CustVendAgingProcessingTmp selectTransactions()
    {
        var agingProcessingTmp = super();

        CustTrans custTrans;
        update_recordset agingProcessingTmp
            setting
                IsPayment = true
            exists join custTrans
                where custTrans.RecId == agingProcessingTmp.TransRecId
                   && custTrans.AmountCur < 0
                   && !custTrans.Invoice;

        return agingProcessingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendSettlementBuffer</Name>
				<Source><![CDATA[
    protected CustVendSettlement setCustVendSettlementBuffer()
    {
        return CustVendSettlement::getEmptyTableBuffer(ModuleCustVend::Cust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransBuffer</Name>
				<Source><![CDATA[
    protected CustVendTrans setCustVendTransBuffer()
    {
        return CustVendTrans::getEmptyTableBuffer(ModuleCustVend::Cust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransOpenBuffer</Name>
				<Source><![CDATA[
    protected CustVendTransOpen setCustVendTransOpenBuffer()
    {
        return CustVendTransOpen::getEmptyTableBuffer(ModuleCustVend::Cust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFieldMapping</Name>
				<Source><![CDATA[
    protected Map generateFieldMapping()
    {
        var insertRecordsetMap = new Map(Types::String, Types::Container);
        var custTableId = this.getCustomerOrVendorTableId();
        var dataSourceId = custVendQuery.query().dataSourceTable(custTableId).uniqueId();

        custVendQuery.query().clearAllFields();

        var fieldList = custVendQuery.query().dataSourceTable(custTableId).fields();
        fieldList.dynamic(1);

        this.addDestinationFieldToFieldMapping(
                        fieldList,
                        custTableId,
                        insertRecordsetMap,
                        dataSourceId,
                        fieldStr(CustTable, AccountNum),
                        fieldStr(CustVendTransAging, AccountNum));

        this.addDestinationFieldToFieldMapping(
                        fieldList,
                        custTableId,
                        insertRecordsetMap,
                        dataSourceId,
                        fieldStr(CustTable, CustGroup),
                        fieldStr(CustVendTransAging, GroupId));

        return insertRecordsetMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrderByFieldsForDatasource</Name>
				<Source><![CDATA[
    protected str addOrderByFieldsForDatasource(QueryBuildDataSource _qbds, str _orderByStr)
    {
        str ret = _orderByStr;

        ret = super(_qbds, _orderByStr);

        if (_qbds.table() == tableNum(CustTable))
        {
            for (int i=1; i<=_qbds.sortFieldCount(); i++)
            {
                switch (_qbds.sortField(i))
                {
                    case fieldNum(CustTable, AccountNum):
                        ret = ret + ' ' + fieldStr(CustVendTransAging, AccountNum) + this.getSortingDirection(_qbds, i);
                        break;
                    case fieldNum(CustTable, CustGroup):
                        ret = ret + ' ' + fieldStr(CustVendTransAging, GroupId) + this.getSortingDirection(_qbds, i);
                        break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinOpenTransactionsToFilterQuery</Name>
				<Source><![CDATA[
    internal void joinOpenTransactionsToFilterQuery(Query _q)
    {
        super(_q);

        if (_q.dataSourceTable(tableNum(CustTransOpen)))
        {
            return;
        }

        QueryBuildDataSource qbdsOpenTransactions = _q.dataSourceTable(tableNum(CustTrans)).addDataSource(tableNum(CustTransOpen));
        qbdsOpenTransactions.addLink(fieldNum(CustTrans, RecId), fieldNum(CustTransOpen, RefRecId));

        qbdsOpenTransactions.joinMode(JoinMode::ExistsJoin);
        qbdsOpenTransactions.fields().dynamic(NoYes::No);
        qbdsOpenTransactions.fields().clearFieldList();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>