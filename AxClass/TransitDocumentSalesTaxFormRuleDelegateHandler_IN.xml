<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransitDocumentSalesTaxFormRuleDelegateHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The transit document rule handler for sales tax form.
/// </summary>
class TransitDocumentSalesTaxFormRuleDelegateHandler_IN
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initRulesForSalesTaxForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init transact document transaction rule list for sales tax form.
    /// </summary>
    /// <param name = "_result">The result contains a list which is containing all rule objects.</param>
    [SubscribesTo(classstr(TransitDocumentTransactionRuleHelper_IN), delegateStr(TransitDocumentTransactionRuleHelper_IN,initTransitDocumentTransactionRuleList))]
    public static void initRulesForSalesTaxForm(List _ruleList)
    {
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            if (_ruleList)
            {
                //init rule: document type -> transaction type
                TransitDocumentType_IN      formToIssueType;
                TransitDocumentType_IN      formToReceiveType;

                // Form to issue type
                formToIssueType = TransitDocumentType_IN::findOrDefineType(
                    tableNum(TransitDocumentSalesTaxForm_IN),
                    fieldNum(TransitDocumentSalesTaxForm_IN, Direction),
                    FormTrackingBasis_IN::FormIssuable);

                // Form to receive type
                formToReceiveType = TransitDocumentType_IN::findOrDefineType(
                    tableNum(TransitDocumentSalesTaxForm_IN),
                    fieldNum(TransitDocumentSalesTaxForm_IN, Direction),
                    FormTrackingBasis_IN::FormReceivable);

                // Rule definitions
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchTable), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchTable), formToReceiveType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchLine), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchLine), formToReceiveType));

                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesTable), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesTable), formToReceiveType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesLine), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesLine), formToReceiveType));

                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceTable), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceTable), formToReceiveType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceLine), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceLine), formToReceiveType));

                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferTable), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferTable), formToReceiveType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferLine), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferLine), formToReceiveType));

                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendInvoiceInfoLine), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendInvoiceInfoLine), formToReceiveType));

                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesParmLine), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesParmLine), formToReceiveType));

                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendInvoiceTrans), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendInvoiceTrans), formToReceiveType));

                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceJour), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceJour), formToReceiveType));

                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceTrans), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceTrans), formToReceiveType));

                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferParmLine), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferParmLine), formToReceiveType));

                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferJourLine), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferJourLine), formToReceiveType));

                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjTable), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjTable), formToReceiveType));

                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjInvoiceTable), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjInvoiceTable), formToReceiveType));

                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesQuotationTable), formToIssueType));
                _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesQuotationTable), formToReceiveType));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransitDocumentRelationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction document transaction relation table.
    /// </summary>
    /// <param name = "_parameter">The parameter of the event.</param>
    [SubscribesTo(classstr(TransitDocumentManager_IN), delegateStr(TransitDocumentManager_IN, getTransitDocumentRelationTable))]
    public static void getTransitDocumentRelationTable(TransitDocumentManagerEventParameter_IN _parameter)
    {
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            switch (_parameter.parmTransitDocTableId())
            {
                case tableNum(TransitDocumentSalesTaxForm_IN):
                case tableNum(SalesTaxFormTypes_IN):
                    _parameter.parmTransitRelationTableId(tableNum(TransitDocumentTransactionRelation_IN));
                    break;
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransationDocumentsByHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all transit documents that are associated with the transaction header.
    /// </summary>
    /// <param name = "_transHeader">The transaction header.</param>
    [SubscribesTo(classstr(TransitDocumentManager_IN), delegateStr(TransitDocumentManager_IN, deleteTransationDocumentsByHeader))]
    public static void deleteTransationDocumentsByHeader(Common _transHeader)
    {
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            TransitDocumentType_IN                  transitDocumentSalesTaxFormType = TransitDocumentType_IN::findType(tableNum(TransitDocumentSalesTaxForm_IN));
            TransitDocumentType_IN                  salesTaxFormType = TransitDocumentType_IN::findType(tableNum(SalesTaxFormTypes_IN));
            TransitDocumentTransactionRelation_IN   trasactionRelation;
            TransitDocumentSalesTaxForm_IN          transitDocumentSalesTaxForm;
            SalesTaxFormTypes_IN                    salesTaxFormTypes;

            if (transitDocumentSalesTaxFormType)
            {
                delete_from transitDocumentSalesTaxForm
                    exists join trasactionRelation
                        where trasactionRelation.TransactionRecId == _transHeader.RecId
                        && trasactionRelation.TransactionType == _transHeader.TableId
                        && trasactionRelation.TransitDocumentType == transitDocumentSalesTaxFormType.RecId
                        && trasactionRelation.TransitDocumentRecId == transitDocumentSalesTaxForm.RecId
                        && trasactionRelation.IsHistory == Noyes::No;

                delete_from trasactionRelation
                    where trasactionRelation.TransactionRecId == _transHeader.RecId
                    && trasactionRelation.TransactionType == _transHeader.TableId
                    && trasactionRelation.TransitDocumentType == transitDocumentSalesTaxFormType.RecId
                    && trasactionRelation.IsHistory == Noyes::No;
            }

            if (salesTaxFormTypes)
            {
                delete_from salesTaxFormTypes
                    exists join trasactionRelation
                        where trasactionRelation.TransactionRecId == _transHeader.RecId
                        && trasactionRelation.TransactionType == _transHeader.TableId
                        && trasactionRelation.TransitDocumentType == salesTaxFormType.RecId
                        && trasactionRelation.TransitDocumentRecId == salesTaxFormTypes.RecId
                        && trasactionRelation.IsHistory == Noyes::No;

                delete_from trasactionRelation
                    where trasactionRelation.TransactionRecId == _transHeader.RecId
                    && trasactionRelation.TransactionType == _transHeader.TableId
                    && trasactionRelation.TransitDocumentType == salesTaxFormType.RecId
                    && trasactionRelation.IsHistory == Noyes::No;
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>