<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalTableListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustomJournalTableListPageInteraction</c> class is the interaction class for a model-driven
/// <c>CustomJournalTableListPage</c> form.
/// </summary>
class CustomJournalTableListPageInteraction extends SysListPageInteractionBase
{
    CustomJournalTable_RU customJournalTable;
    ListPage              listPage;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentCustomJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an active <c>CustomJournalTable_RU</c> record.
    /// </summary>
    /// <returns>
    ///    An active <c>CustomJournalTable_RU</c> record.
    /// </returns>
    private CustomJournalTable_RU currentCustomJournalTable()
    {
        return this.listPage().activeRecord(queryDataSourceStr(CustomJournalTableListPage, CustomJournalTable)) as CustomJournalTable_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines access to form controls.
    /// </summary>
    /// <remarks>
    /// This method defines access to form control depending on record values.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initHeaderActions()
    {
        boolean enabled, posted;
        boolean allowEdit = true, allowCreate = true, allowDelete = true;
        boolean factured;
        boolean existLine = (CustomJournalTrans_RU::maxLineNum(customJournalTable.CustomJournalId) != 0);

        enabled = (customJournalTable.CustomJournalType == CustomJournalType_RU::Export) ? false : true;

        switch (customJournalTable.CustomJournalStatus)
        {
            case CustomJournalStatus_RU::Open:
                break;

            case CustomJournalStatus_RU::Released:
                allowDelete = false;
                allowCreate = false;
                break;

            case CustomJournalStatus_RU::Posted:
                allowDelete = false;
                allowEdit   = false;
                allowCreate = false;
                posted      = true;
                break;
        }

        factured = (FactureJour_RU::find(customJournalTable.FactureId, FactureModule_RU::Vend).RecId != 0);
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, EditButton), customJournalTable.CustomJournalStatus == CustomJournalStatus_RU::Open);
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, EditInGridButton), customJournalTable.CustomJournalStatus == CustomJournalStatus_RU::Open);
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, CustomJournalGTDFactureCreate), posted && ! factured && enabled);
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, CustomCorrectionCreate), posted);
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, CustomJournalGTDPost), customJournalTable.CustomJournalStatus == CustomJournalStatus_RU::Released);
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, FactureJournalVend), posted && factured && enabled);
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, LedgerTransVoucher), posted);
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, CustomCorrectionTable), customJournalTable.existCorrection());
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, CustomJournalChargeCalc), customJournalTable.CustomJournalStatus == CustomJournalStatus_RU::Open && allowEdit && existLine);
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, CustomJournalCalc), customJournalTable.CustomJournalStatus == CustomJournalStatus_RU::Open && allowEdit && existLine);
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, CustomJournalGTDCreateBase), allowCreate && existLine);
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, CustomJournalGTDCreate), customJournalTable.CustomJournalStatus == CustomJournalStatus_RU::Open && allowCreate && existLine);
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, CustomJournalGTDCancel), customJournalTable.CustomJournalStatus == CustomJournalStatus_RU::Released);
        this.listPage().actionPaneControlEnabled(formControlStr(CustomJournalTableListPage, InventJournalTableTransfer), customJournalTable.TransferInventJournalId ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the current <c>CustomJournalTable_RU</c> record.
    /// </summary>
    /// <remarks>
    ///    This method is called by the framework every time that a record is selected in the grid on the list page.
    /// </remarks>
    public void selectionChanged()
    {
        customJournalTable = this.currentCustomJournalTable();

        this.initHeaderActions();

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>