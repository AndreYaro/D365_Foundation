<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymModeData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendPaymModeData</c> class holds base methods for customer and vendor methods of
///    payment. The class and its inheritances provide the ability to inherit tables.
/// </summary>
abstract class CustVendPaymModeData
{
    CustVendPaymModeTable   custVendPaymModeTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendPaymModeTable</Name>
				<Source><![CDATA[
        public CustVendPaymModeTable parmCustVendPaymModeTable(CustVendPaymModeTable _custVendPaymModeTable = custVendPaymModeTable)
    {
        ;
        custVendPaymModeTable = _custVendPaymModeTable;

        return custVendPaymModeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOfPaymAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a set of payment attributes that are enabled for the method of payment in question.
    /// </summary>
    /// <returns>
    ///    A set that contains the enumeration values for the active payment attributes.
    /// </returns>
    abstract public Set setOfPaymAttributes()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static CustVendPaymModeData construct(CustVendPaymModeTable _custVendPaymModeTable)
    {
        CustVendPaymModeData    custVendPaymModeData;
        ;

        switch (_custVendPaymModeTable.TableId)
        {
            case tablenum(CustPaymModeTable) :
                custVendPaymModeData = new CustPaymModeData();
                break;

            case tablenum(VendPaymModeTable) :
                custVendPaymModeData = new VendPaymModeData();
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        custVendPaymModeData.parmCustVendPaymModeTable(_custVendPaymModeTable);

        return custVendPaymModeData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustVendPaymProposalLine</Name>
				<Source><![CDATA[
        static public CustVendPaymModeData newCustVendPaymProposalLine(CustVendPaymProposalLine _custVendPaymProposalLine)
    {
        CustVendPaymModeData    custVendPaymModeData;
        ;

        switch (_custVendPaymProposalLine.AccountType)
        {
            case ModuleCustVend::Cust :
                custVendPaymModeData = CustVendPaymModeData::construct(CustPaymModeTable::find(_custVendPaymProposalLine.PaymMode));
                break;

            case ModuleCustVend::Vend :
                custVendPaymModeData = CustVendPaymModeData::construct(VendPaymModeTable::find(_custVendPaymProposalLine.PaymMode));
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return custVendPaymModeData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustVendTrans</Name>
				<Source><![CDATA[
        static public CustVendPaymModeData newCustVendTrans(CustVendTrans   _custVendTrans)
    {
        CustVendPaymModeData    custVendPaymModeData;
        ;

        switch (_custVendTrans.TableId)
        {
            case tablenum(CustTrans) :
                custVendPaymModeData = CustVendPaymModeData::construct(CustPaymModeTable::find(_custVendTrans.PaymMode));
                break;

            case tablenum(VendTrans) :
                custVendPaymModeData = CustVendPaymModeData::construct(VendPaymModeTable::find(_custVendTrans.PaymMode));
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return custVendPaymModeData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>