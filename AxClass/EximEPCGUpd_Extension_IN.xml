<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximEPCGUpd_Extension_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim EPCG update extension class.
/// </summary>
class EximEPCGUpd_Extension_IN extends EximEPCGUpdate_IN implements BatchRetryable
{
    TmpEximEPCGExportObligationPeriod_IN tmpEximEPCGExportObligationPeriodTable;
    EximEPCGExportObligationPeriod_IN    tmpEximEPCGBlockExtension;
    EximEPCGBlockExtension_IN            tmpEximEPCGBlockExt;
    EximEPCGExtendPeriod_IN              eximExtendPeriod;
    EximEPCGPeriodInterval_IN            periodInterval;
    EximCertificateNum_IN                certificateNum;
    TransDateTime                        transDateTime;
    TransDateTime                        toDateTime;
    Days                                 value;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blockExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// The extension of the exim EPCG export obligation period block.
    /// </summary>
    public void blockExtension()
    {
        TmpEximEPCGExportObligationPeriod_IN tmpEximEPCGExpObligationPeriod;
        TmpEximEPCGExportObligationPeriod_IN tmpEximEPCGExpObligationPrd;
        FromDateTime                         fromDateTime;
        ToDateTime                           endDateTime;
        boolean                              checkMerge = false;
        int                                  counter;
        #define.one(1)

        tmpEximEPCGExpObligationPeriod.setTmpData(tmpEximEPCGExportObligationPeriod);
        tmpEximEPCGExpObligationPrd.setTmpData(tmpEximEPCGExportObligationPeriod);

        ttsbegin;

        if (EximEPCGExtendPeriod_IN::SelectedBlock == eximExtendPeriod)
        {
            select forupdate tmpEximEPCGExpObligationPrd
                where tmpEximEPCGExpObligationPrd.Block == tmpEximEPCGExportObligationPeriod.Block;

            if (tmpEximEPCGExpObligationPrd)
            {
                endDateTime = DateTimeUtil::newDateTime(endmth(DateTimeUtil::date(EximEPCGUpd_Extension_IN::extendDateTime(DateTimeUtil::applyTimeZoneOffset(tmpEximEPCGExportObligationPeriod.ToDateTime,
                                                                                                                           DateTimeUtil::getUserPreferredTimeZone()), value, periodInterval))), 0);

                endDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::addSeconds(DateTimeUtil::addDays(endDateTime, 1), -1), DateTimeUtil::getUserPreferredTimeZone());

                tmpEximEPCGExpObligationPrd.ToDateTime = endDateTime;

                fromDateTime = DateTimeUtil::addSeconds(DateTimeUtil::applyTimeZoneOffset(tmpEximEPCGExpObligationPrd.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()), 1);
                tmpEximEPCGExpObligationPrd.update();
            }

            while select forupdate tmpEximEPCGExpObligationPeriod
                where tmpEximEPCGExpObligationPeriod.Block > tmpEximEPCGExportObligationPeriod.Block
                   && tmpEximEPCGExpObligationPeriod.FromDateTime < fromDateTime
            {
                if (DateTimeUtil::applyTimeZoneOffset(tmpEximEPCGExpObligationPeriod.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()) <= fromDateTime)
                {
                    tmpEximEPCGExpObligationPrd.Percentage += tmpEximEPCGExpObligationPeriod.Percentage;
                    tmpEximEPCGExpObligationPrd.update();
                    checkMerge = true;
                    tmpEximEPCGExpObligationPeriod.delete();
                }
                else
                {
                    tmpEximEPCGExpObligationPeriod.FromDateTime = DateTimeUtil::removeTimeZoneOffset(fromDateTime, DateTimeUtil::getUserPreferredTimeZone());
                    tmpEximEPCGExpObligationPeriod.update();
                }
            }
        }
        else if (EximEPCGExtendPeriod_IN::AllBlocks == eximExtendPeriod)
        {
            fromDateTime = DateTimeUtil::applyTimeZoneOffset(tmpEximEPCGExportObligationPeriod.FromDateTime, DateTimeUtil::getUserPreferredTimeZone());
            counter = 1;
            while select forupdate tmpEximEPCGExpObligationPeriod
                where tmpEximEPCGExpObligationPeriod.Block >= 1
            {
                tmpEximEPCGExpObligationPeriod.FromDateTime   = DateTimeUtil::removeTimeZoneOffset(fromDateTime, DateTimeUtil::getUserPreferredTimeZone());
                endDateTime = DateTimeUtil::newDateTime(endmth(DateTimeUtil::date(EximEPCGUpd_Extension_IN::extendDateTime(
                                                                                                                           DateTimeUtil::applyTimeZoneOffset(tmpEximEPCGExpObligationPeriod.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                                                                                                                           value * counter,
                                                                                                                           periodInterval))), 0);
                endDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::addSeconds(DateTimeUtil::addDays(endDateTime, 1), -1), DateTimeUtil::getUserPreferredTimeZone());

                tmpEximEPCGExpObligationPeriod.ToDateTime = endDateTime;
                tmpEximEPCGExpObligationPeriod.Percentage = tmpEximEPCGExpObligationPeriod.Percentage;
                tmpEximEPCGExpObligationPeriod.update();
                fromDateTime = DateTimeUtil::addSeconds(DateTimeUtil::applyTimeZoneOffset(tmpEximEPCGExpObligationPeriod.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()), #one);
                counter++;
            }
        }

        if (checkMerge)
        {
            update_recordset tmpEximEPCGExpObligationPeriod
                setting Block = tmpEximEPCGExpObligationPeriod.Block - #one
                where tmpEximEPCGExpObligationPeriod.Block > tmpEximEPCGExportObligationPeriod.Block;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the running query.
    /// </summary>
    /// <param name="_schemeApprovalRecId">
    /// The approval record id of the scheme.
    /// </param>
    /// <param name="_schemeTableRecId">
    /// The table record id of the scheme.
    /// </param>
    /// <param name="_isExtended">
    /// If 'True', the query can be extended.
    /// </param>
    public void buildQueryRun(
        EximEPCGSchemeApproveRecId_IN _schemeApprovalRecId,
        EximEPCGSchemeTableRecId_IN   _schemeTableRecId,
        boolean                       _isExtended)
    {
        Query                query = new Query();
        QueryBuildDataSource obligationPeriodDataSource;
        QueryBuildDataSource blockExtensionDataSource;
        Version              versionNum;

        if (_isExtended)
        {
            versionNum = EximEPCGSchemeLine_IN::findVersionNum(_schemeTableRecId);

            blockExtensionDataSource = query.addDataSource(tablenum(EximEPCGBlockExtension_IN));
            blockExtensionDataSource.addSortField(fieldnum(EximEPCGBlockExtension_IN, Block));
            blockExtensionDataSource.addRange(fieldnum(EximEPCGBlockExtension_IN, SchemeTableRecId)).value(queryValue(_schemeTableRecId));
            blockExtensionDataSource.addRange(fieldnum(EximEPCGBlockExtension_IN, VersionNum)).value(queryValue(versionNum));
        }
        else
        {
            obligationPeriodDataSource = query.addDataSource(tablenum(EximEPCGExportObligationPeriod_IN));
            obligationPeriodDataSource.addSortField(fieldnum(EximEPCGExportObligationPeriod_IN, Block));
            obligationPeriodDataSource.addRange(fieldnum(EximEPCGExportObligationPeriod_IN, Block));
            obligationPeriodDataSource.addRange(fieldnum(EximEPCGExportObligationPeriod_IN, SchemeApproveRecId)).value(queryValue(_schemeApprovalRecId));
        }
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
        public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBlockExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the block extension information.
    /// </summary>
    /// <param name="_tmpEximEPCGExportObligationPeriod">
    /// The tmp exim epcg export obligation period.
    /// </param>
    protected void insertBlockExtension(TmpEximEPCGExportObligationPeriod_IN _tmpEximEPCGExportObligationPeriod)
    {
        EximEPCGExportObligationPeriod_IN  epcgExportObligationPeriod;
        EximEPCGBlockExtension_IN          epcgBlockExtension;

        while select Block, FromDateTime, ToDateTime, Percentage, ExportObligationPeriodRecId
            from _tmpEximEPCGExportObligationPeriod
        {
            epcgExportObligationPeriod                     = EximEPCGExportObligationPeriod_IN::find(_tmpEximEPCGExportObligationPeriod.ExportObligationPeriodRecId);
            epcgBlockExtension.Block                       = _tmpEximEPCGExportObligationPeriod.Block;
            epcgBlockExtension.Description                 = _tmpEximEPCGExportObligationPeriod.Description;
            epcgBlockExtension.FromDateTime                = _tmpEximEPCGExportObligationPeriod.FromDateTime;
            epcgBlockExtension.ToDateTime                  = _tmpEximEPCGExportObligationPeriod.ToDateTime;
            epcgBlockExtension.Percentage                  = _tmpEximEPCGExportObligationPeriod.Percentage;
            epcgBlockExtension.ExportObligationPeriodRecId = epcgExportObligationPeriod.RecId;
            epcgBlockExtension.SchemeTableRecId            = schemeTableRecId;
            epcgBlockExtension.VersionNum                  = EximEPCGSchemeLine_IN::findVersionNum(schemeTableRecId);
            epcgBlockExtension.insert();

            if (epcgBlockExtension.FromDateTime < epcgBlockExtension.ToDateTime)
            {
                this.insertExportObligationDetails(epcgBlockExtension,
                                                   epcgBlockExtension.FromDateTime,
                                                   epcgBlockExtension.ToDateTime);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExportObligationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts export obligation details.
    /// </summary>
    /// <param name="_eximEPCGBlockExtLoc">
    /// The exim epcg block extension.
    /// </param>
    /// <param name="_fromDateTime">
    /// The from date time.
    /// </param>
    /// <param name="_toDateTime">
    /// The to date time.
    /// </param>
    protected void insertExportObligationDetails(
        EximEPCGBlockExtension_IN _eximEPCGBlockExtLoc,
        FromDateTime              _fromDateTime,
        ToDateTime                _toDateTime)
    {
        EximEPCGExportObligationDetails_IN eximEPCGExportObligationDetails;
        FromDateTime                       obligationDetailsFromDateTime;
        ToDateTime                         obligationDetailsToDateTime;
        ToDateTime                         detailsToDateTime;
        int                                yearDiff;
        int                                counter;
        int                                daysDiff;
        FromDate                           fromDate;
        ToDate                             toDate;

        #define.one(1)

        ttsbegin;

        delete_from eximEPCGExportObligationDetails
            where eximEPCGExportObligationDetails.ExportObligationPeriodRecId == _eximEPCGBlockExtLoc.ExportObligationPeriodRecId;

        obligationDetailsFromDateTime = DateTimeUtil::applyTimeZoneOffset(_fromDateTime, DateTimeUtil::getUserPreferredTimeZone());
        obligationDetailsToDateTime   = DateTimeUtil::applyTimeZoneOffset(_toDateTime, DateTimeUtil::getUserPreferredTimeZone());

        fromDate = DateTimeUtil::date(obligationDetailsFromDateTime);
        toDate   = DateTimeUtil::date(obligationDetailsToDateTime);

        daysDiff = toDate - fromDate + 1;

        if (daysDiff >= 0)
            yearDiff = year(num2date(daysDiff)) - 1900;
        else
            yearDiff = -1 * (year(num2date(-1 * daysDiff)) - 1900);

        if (yearDiff)
        {
            for (counter = 1; counter <= yearDiff; counter ++)
            {
                eximEPCGExportObligationDetails.Block        = EximEPCGExportObligationPeriod_IN::find(_eximEPCGBlockExtLoc.ExportObligationPeriodRecId).Block;
                eximEPCGExportObligationDetails.FromDateTime = DateTimeUtil::removeTimeZoneOffset(obligationDetailsFromDateTime, DateTimeUtil::getUserPreferredTimeZone());
                if (counter < yearDiff)
                {
                    detailsToDateTime = DateTimeUtil::newDateTime(endmth(DateTimeUtil::date(DateTimeUtil::addSeconds(
                                                                                                                    EximEPCGUpdate_IN::extendDateTime(DateTimeUtil::applyTimeZoneOffset(eximEPCGExportObligationDetails.FromDateTime,
                                                                                                                               DateTimeUtil::getUserPreferredTimeZone()), 1, PaymentPer_IN::Years), -1))), 0);
                    detailsToDateTime = DateTimeUtil::addSeconds(DateTimeUtil::addDays(detailsToDateTime, 1), -1);
                }
                else if (counter == yearDiff)
                {
                    detailsToDateTime = obligationDetailsToDateTime;
                }
                eximEPCGExportObligationDetails.ToDateTime                  = DateTimeUtil::removeTimeZoneOffset(detailsToDateTime, DateTimeUtil::getUserPreferredTimeZone());
                eximEPCGExportObligationDetails.ExportObligationPeriodRecId = _eximEPCGBlockExtLoc.ExportObligationPeriodRecId;
                eximEPCGExportObligationDetails.SchemeTableRecId            = schemeTableRecId;
                eximEPCGExportObligationDetails.insert();
                obligationDetailsFromDateTime = DateTimeUtil::addSeconds(DateTimeUtil::applyTimeZoneOffset(eximEPCGExportObligationDetails.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()), 1);
            }
        }
        else
        {
            eximEPCGExportObligationDetails.Block                       = EximEPCGExportObligationPeriod_IN::find(_eximEPCGBlockExtLoc.ExportObligationPeriodRecId).Block;
            eximEPCGExportObligationDetails.FromDateTime                = DateTimeUtil::removeTimeZoneOffset(obligationDetailsFromDateTime, DateTimeUtil::getUserPreferredTimeZone());
            eximEPCGExportObligationDetails.ToDateTime                  = DateTimeUtil::removeTimeZoneOffset(obligationDetailsToDateTime, DateTimeUtil::getUserPreferredTimeZone());
            eximEPCGExportObligationDetails.ExportObligationPeriodRecId = _eximEPCGBlockExtLoc.ExportObligationPeriodRecId;
            eximEPCGExportObligationDetails.SchemeTableRecId            = schemeTableRecId;
            eximEPCGExportObligationDetails.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExportObligationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the export obligation period information.
    /// </summary>
    /// <param name="_schemeApproveRecId">
    /// The scheme approve rec id.
    /// </param>
    /// <param name="_schemeTableRecId">
    /// The scheme table rec id.
    /// </param>
    public void insertExportObligationPeriod(
        EximEPCGSchemeApproveRecId_IN _schemeApproveRecId,
        EximEPCGSchemeTableRecId_IN   _schemeTableRecId)
    {
        EximEPCGBlockExtension_IN         epcgBlockExtension;
        EximEPCGExportObligationPeriod_IN epcgExportObligationPeriod;
        boolean                           isExtended;

        select RecId
            from  epcgExportObligationPeriod
                where epcgExportObligationPeriod.SchemeApproveRecId == _schemeApproveRecId
            join ExportObligationPeriodRecId
                from epcgBlockExtension
                    where epcgBlockExtension.ExportObligationPeriodRecId == epcgExportObligationPeriod.RecId;

        if (epcgBlockExtension.ExportObligationPeriodRecId)
        {
            isExtended = true;
        }

        this.buildQueryRun(_schemeApproveRecId,
                           _schemeTableRecId,
                           isExtended);

        this.insertTmpExportObligationPeriod(isExtended,
                                             _schemeTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSchemeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts scheme line information.
    /// </summary>
    protected void insertSchemeLine()
    {
        EximEPCGSchemeLine_IN   eximEPCGSchemeLine;

        eximEPCGSchemeLine.CertificateNum         = certificateNum;
        eximEPCGSchemeLine.CertificateDateTime    = DateTimeUtil::removeTimeZoneOffset(transDateTime, DateTimeUtil::getUserPreferredTimeZone());
        eximEPCGSchemeLine.LicenseStatus          = EximEPCGLicenseStatus_IN::Extended;
        eximEPCGSchemeLine.SchemeTableRecId       = schemeTableRecId;
        eximEPCGSchemeLine.VersionNum             = EximEPCGSchemeLine_IN::findVersionNum(schemeTableRecId) + 1;
        eximEPCGSchemeLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpExportObligationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts tmp export obligation period information.
    /// </summary>
    /// <param name="_isExtended">
    /// The is extended flag.
    /// </param>
    /// <param name="_schemeTableRecId">
    /// The scheme table rec id.
    /// </param>
    /// <returns>
    /// The instance of the <c>TmpEximEPCGExportObligationPeriod_IN</c> class.
    /// </returns>
    public TmpEximEPCGExportObligationPeriod_IN insertTmpExportObligationPeriod(
        boolean                     _isExtended,
        EximEPCGSchemeTableRecId_IN _schemeTableRecId)
    {
        EximEPCGExportObligationPeriod_IN epcgExportObligationPeriod;
        EximEPCGBlockExtension_IN         epcgBlockExtension;

        queryRun.recordLevelSecurity(true);

        while (queryRun.next())
        {
            if (_isExtended)
            {
                if (queryRun.changed(tablenum(EximEPCGBlockExtension_IN)))
                {
                    epcgBlockExtension = queryRun.get(tablenum(EximEPCGBlockExtension_IN));
                    tmpEximEPCGExportObligationPeriod.Block                       = epcgBlockExtension.Block;
                    tmpEximEPCGExportObligationPeriod.Description                 = epcgBlockExtension.Description;
                    tmpEximEPCGExportObligationPeriod.FromDateTime                = epcgBlockExtension.FromDateTime;
                    tmpEximEPCGExportObligationPeriod.ToDateTime                  = epcgBlockExtension.ToDateTime;
                    tmpEximEPCGExportObligationPeriod.Percentage                  = epcgBlockExtension.Percentage;
                    tmpEximEPCGExportObligationPeriod.ExportObligationPeriodRecId = epcgBlockExtension.ExportObligationPeriodRecId;
                    tmpEximEPCGExportObligationPeriod.SchemeTableRecId            = _schemeTableRecId;
                }
            }
            else
            {
                if (queryRun.changed(tablenum(EximEPCGExportObligationPeriod_IN)))
                {
                    epcgExportObligationPeriod = queryRun.get(tablenum(EximEPCGExportObligationPeriod_IN));
                    tmpEximEPCGExportObligationPeriod.Block                       = epcgExportObligationPeriod.Block;
                    tmpEximEPCGExportObligationPeriod.Description                 = epcgExportObligationPeriod.Description;
                    tmpEximEPCGExportObligationPeriod.Percentage                  = epcgExportObligationPeriod.Percentage;
                    tmpEximEPCGExportObligationPeriod.FromDateTime                = epcgExportObligationPeriod.FromDateTime;
                    tmpEximEPCGExportObligationPeriod.ToDateTime                  = epcgExportObligationPeriod.ToDateTime;
                    tmpEximEPCGExportObligationPeriod.Units                       = epcgExportObligationPeriod.Units;
                    tmpEximEPCGExportObligationPeriod.ExportObligationPeriodRecId = epcgExportObligationPeriod.RecId;
                    tmpEximEPCGExportObligationPeriod.SchemeTableRecId            = _schemeTableRecId;
                }
            }
            tmpEximEPCGExportObligationPeriod.insert();
        }
        return tmpEximEPCGExportObligationPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificateNumber</Name>
				<Source><![CDATA[
        public EximCertificateNum_IN parmCertificateNumber(EximCertificateNum_IN _certificateNum = certificateNum)
    {
        certificateNum = _certificateNum;
        return certificateNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExtension</Name>
				<Source><![CDATA[
        public EximEPCGExtendPeriod_IN parmExtension(EximEPCGExtendPeriod_IN _eximExtendPeriod = eximExtendPeriod)
    {
        eximExtendPeriod = _eximExtendPeriod;
        return eximExtendPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodInterval</Name>
				<Source><![CDATA[
        public EximEPCGPeriodInterval_IN parmPeriodInterval(EximEPCGPeriodInterval_IN _periodInterval = periodInterval)
    {
        periodInterval = _periodInterval;
        return periodInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpExpObligation</Name>
				<Source><![CDATA[
        public TmpEximEPCGExportObligationPeriod_IN parmTmpExpObligation(TmpEximEPCGExportObligationPeriod_IN _tmpExpObligation = tmpEximEPCGExportObligationPeriod)
    {
        tmpEximEPCGExportObligationPeriod = _tmpExpObligation;
        return tmpEximEPCGExportObligationPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
        public TransDateTime parmTransDate(TransDateTime _transDateTime = transDateTime)
    {
        transDateTime = _transDateTime;
        return transDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValue</Name>
				<Source><![CDATA[
        public Days parmValue(Days _value = value)
    {
        value = _value;
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        #OCCRetryCount

        try
        {
            if (certificateNum && transDateTime)
            {
                EximEPCGUpd_Extension_IN::runOnServer(tmpEximEPCGExportObligationPeriod,
                                                      schemeTableRecId,
                                                      certificateNum,
                                                      periodInterval,
                                                      transDateTime,
                                                      value,
                                                      eximExtendPeriod);
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends date time of the transaction.
    /// </summary>
    /// <param name="_transDateTime">
    /// The date time of the transaction.
    /// </param>
    /// <param name="_value">
    /// The instance of the <c>Integer</c> class.
    /// </param>
    /// <param name="_periodInterval">
    /// The exim EPCG period interval.
    /// </param>
    /// <returns>
    /// The date time of the transaction.
    /// </returns>
    public static TransDateTime extendDateTime(
        TransDateTime             _transDateTime,
        Integer                   _value,
        EximEPCGPeriodInterval_IN _periodInterval)
    {
        TransDateTime  extendDateTime;

        switch (_periodInterval)
        {
            case EximEPCGPeriodInterval_IN::Months:
                extendDateTime = DateTimeUtil::addMonths(_transDateTime, _value);
                break;

            case EximEPCGPeriodInterval_IN::Years:
                extendDateTime = DateTimeUtil::addYears(_transDateTime, _value);
                break;
        }

        return extendDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run on server side.
    /// </summary>
    /// <param name="_tmpEximEPCGExportObligationPeriod">
    /// The tmp exim epcg export obligation period.
    /// </param>
    /// <param name="_schemeTableRecId">
    /// The scheme table rec id.
    /// </param>
    /// <param name="_certificateNum">
    /// The certificate number.
    /// </param>
    /// <param name="_periodInterval">
    /// The period interval.
    /// </param>
    /// <param name="_transDateTime">
    /// The trans date time.
    /// </param>
    /// <param name="_value">
    /// The days value.
    /// </param>
    /// <param name="_eximExtendPeriod">
    /// The exim epcg extend period.
    /// </param>
    public static void runOnServer(
        TmpEximEPCGExportObligationPeriod_IN _tmpEximEPCGExportObligationPeriod,
        RefRecId                             _schemeTableRecId,
        EximCertificateNum_IN                _certificateNum,
        EximEPCGPeriodInterval_IN            _periodInterval,
        TransDateTime                        _transDateTime,
        Days                                 _value,
        EximEPCGExtendPeriod_IN              _eximExtendPeriod)
    {
        EximEPCGUpd_Extension_IN    epcgExtension;

        ttsbegin;

        epcgExtension = new EximEPCGUpd_Extension_IN();

        epcgExtension.parmSchemeTableRecId(_schemeTableRecId);
        epcgExtension.parmCertificateNumber(_certificateNum);
        epcgExtension.parmPeriodInterval(_periodInterval);
        epcgExtension.parmTransDate(_transDateTime);
        epcgExtension.parmValue(_value);
        epcgExtension.parmExtension(_eximExtendPeriod);

        epcgExtension.insertSchemeLine();

        epcgExtension.insertBlockExtension(_tmpEximEPCGExportObligationPeriod);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the caller data source.
    /// </summary>
    /// <param name="_formDataSource">
    /// The form data source.
    /// </param>
    /// <param name="_recordExists">
    /// True if the record exists.
    /// </param>
    protected static void updateCallerDataSource(
        Object  _formDataSource = null,
        boolean _recordExists = false)
    {
        if (_recordExists)
        {
            _formDataSource.executeQuery();
        }
        else
        {
            _formDataSource.reSearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>