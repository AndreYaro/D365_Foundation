<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransAccountVoucherContract_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The data contract class for the <c>LedgerTransAccountVoucher_FR</c> SSRS report.
/// </summary>
[
    DataContract,
    SysOperationGroup('Date', "@SYS80056", '1', FormArrangeMethod::HorizontalFlushRight),
    SysOperationGroup('Account', "@SYS129344", '2', FormArrangeMethod::HorizontalFlushRight),
    SysOperationGroup('Posting layer', "@SYS10925", '3', FormArrangeMethod::HorizontalFlushRight),
    SysOperationContractProcessingAttribute(classStr(LedgerTransAccountVoucherUIBuilder_FR))
]
public class LedgerTransAccountVoucherContract_FR  implements SysOperationValidatable
{
    private FromDate fromDate;
    private ToDate toDate;
    private MainAccountNum fromAccount;
    private MainAccountNum toAccount;
    private boolean includeClosed;
    private boolean totalByVoucher;
    private boolean includeGroupAccount;
    private boolean includeOpening;
    private boolean includeClosing;
    private boolean useTotalByPeriod;
    private List postingLayerMultiSelectFilter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFromAccount</Name>
				<Source><![CDATA[
    [
        DataMember('FromAccount'),
        SysOperationLabel(literalstr("@SYS4083")),
        SysOperationGroupMember('Account'),
        SysOperationDisplayOrder('1')
    ]
    public MainAccountNum parmFromAccount(MainAccountNum _fromAccount = fromAccount)
    {
        fromAccount = _fromAccount;
        return fromAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('FromDate'),
        SysOperationGroupMemberAttribute('Date'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeClosed</Name>
				<Source><![CDATA[
    [
        DataMember('IncludeClosed'),
        SysOperationLabel(literalstr("@SYS77909")),
        SysOperationHelpText(literalstr("@SYS77856")),
        SysOperationDisplayOrder('5')
    ]
    public boolean parmIncludeClosed(boolean _includeClosed = includeClosed)
    {
        includeClosed = _includeClosed;
        return includeClosed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeClosing</Name>
				<Source><![CDATA[
    [
        DataMember('IncludeClosing'),
        SysOperationLabel(literalstr("@SYS87359")),
        SysOperationHelpText(literalstr("@SYS87360")),
        SysOperationDisplayOrder('9')
    ]
    public boolean parmIncludeClosing(boolean _includeClosing = includeClosing)
    {
        includeClosing = _includeClosing;
        return includeClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeGroupAccount</Name>
				<Source><![CDATA[
    [
        DataMember('IncludeGroupAccount'),
        SysOperationLabel(literalstr("@SYS4083196")),
        SysOperationHelpText(literalstr("@SYS4083197")),
        SysOperationDisplayOrder('7')
    ]
    public boolean parmIncludeGroupAccount(boolean _includeGroupAccount = includeGroupAccount)
    {
        includeGroupAccount = _includeGroupAccount;
        return includeGroupAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeOpening</Name>
				<Source><![CDATA[
    [
        DataMember('IncludeOpening'),
        SysOperationLabel(literalstr("@SYS4000403")),
        SysOperationHelpText(literalstr("@SYS4000403")),
        SysOperationDisplayOrder('8')
    ]
    public boolean parmIncludeOpening(boolean _includeOpening = includeOpening)
    {
        includeOpening = _includeOpening;
        return includeOpening;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayerMultiSelectFilter</Name>
				<Source><![CDATA[
    [
        DataMember('PostingLayerMultiSelectFilter'),
        SysOperationLabel(literalstr("@SYS10925")),
        SysOperationGroupMember('Posting layer'),
        SysOperationDisplayOrder('2'),
        AifCollectionTypeAttribute('return', Types::Enum, enumStr(CurrentOperationsTax))
    ]
    public List parmPostingLayerMultiSelectFilter(List _postingLayerMultiSelectFilter = postingLayerMultiSelectFilter)
    {
        postingLayerMultiSelectFilter = _postingLayerMultiSelectFilter;
        return postingLayerMultiSelectFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToAccount</Name>
				<Source><![CDATA[
    [
        DataMember('ToAccount'),
        SysOperationLabel(literalstr("@SYS8828")),
        SysOperationGroupMember('Account'),
        SysOperationDisplayOrder('2')
    ]
    public MainAccountNum parmToAccount(MainAccountNum _toAccount = toAccount)
    {
        toAccount = _toAccount;
        return toAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [
        DataMember('ToDate'),
        SysOperationGroupMember('Date'),
        SysOperationDisplayOrder('2')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalByVoucher</Name>
				<Source><![CDATA[
    [
        DataMember('TotalByVoucher'),
        SysOperationLabel(literalstr("@SYS77883")),
        SysOperationHelpText(literalstr("@SYS77883")),
        SysOperationDisplayOrder('6')
    ]
    public boolean parmTotalByVoucher(boolean _totalByVoucher = totalByVoucher)
    {
        totalByVoucher = _totalByVoucher;
        return totalByVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseTotalByPeriod</Name>
				<Source><![CDATA[
    [
        DataMember('UseTotalByPeriod'),
        SysOperationLabel(literalstr("@SYS77908")),
        SysOperationHelpText(literalstr("@SYS77855")),
        SysOperationDisplayOrder('4')
    ]
    public boolean parmUseTotalByPeriod(boolean _useTotalByPeriod = useTotalByPeriod)
    {
        useTotalByPeriod = _useTotalByPeriod;
        return useTotalByPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the date parameter values.
    /// </summary>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;
        FiscalCalendarRecId calendarRecId;
        TransDate toOpeningStartDate, fromOpeningStartDate;

        calendarRecId = Ledger::fiscalCalendar(CompanyInfo::current());
        fromOpeningStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, fromDate);
        toOpeningStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, toDate);

        if (!this.parmFromDate())
        {
            ret = checkFailed("@SYS97591");
        }

        if (!this.parmToDate())
        {
            ret = checkFailed("@SYS97592");
        }

        if (this.parmFromDate() > this.parmToDate())
        {
            ret = checkFailed("@SYS16982");
        }

        if (ret && (fromOpeningStartDate != toOpeningStartDate))
        {
            ret = checkFailed(strfmt("@SYS28745", year(fromOpeningStartDate), year(toOpeningStartDate)));
        }

        if (this.parmPostingLayerMultiSelectFilter().empty())
        {
            ret = checkFailed("@GeneralLedger:TrialBalancePostingLayerRequired");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>