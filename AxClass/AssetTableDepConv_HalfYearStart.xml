<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableDepConv_HalfYearStart</Name>
	<SourceCode>
		<Declaration><![CDATA[
//
//  The primary functionality of this class type is to calculate the
//  asset depreciation amounts for fixed assets employing a depreciation
//  convention of 'Half-Year (Start of Year)'. For this purpose this class
//  type must always be used in conjuction with the AssetTableMethod_SL and
//  AssetTableMethod_RB asset depreciation amount calculation classes.
//
//  This secondary functionality of this class type is to calculate the
//  asset depreciation start date for fixed assets employing a depreciation
//  convention.
//
[AssetTableDepConvAttribute(AssetDepreciationConvention::HalfYearStart)]
public class AssetTableDepConv_HalfYearStart extends AssetTableDepConv
{
    private const real HalfYearStartYearFactor = 0.5;
    private boolean useRestPeriod;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustLastDepreciationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the projected depreciation date based on a given depreciation convention.
    /// </summary>
    /// <param name="_endDate">
    /// A date to adjust
    /// </param>
    /// <param name="_partialPeriod">
    /// Value model's life remaining.
    /// </param>
    /// <returns>
    /// Adjusted date of the last projected depreciation date.
    /// </returns>
    protected TransDate adjustLastDepreciationDate(TransDate _endDate, real _partialPeriod = 0)
    {
        TransDate returnDate = _endDate;

        returnDate = super(_endDate, _partialPeriod);

        returnDate = this.adjustLastDepreciationDatePartialPeriod(returnDate, _partialPeriod);

        return returnDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLifeTimeRest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds the value of Life Time Remaining
    /// </summary>
    /// <param name="_lifeTimeRest">
    /// Life Time Remaining number
    /// </param>
    /// <returns>
    /// Life Time Remaining number
    /// </returns>
    /// <remarks>
    /// For Half Year Start convention calculation adjustement is not need.
    /// </remarks>
    protected AssetDepreciationTime adjustLifeTimeRest(AssetDepreciationTime _lifeTimeRest)
    {
        return _lifeTimeRest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_RB</Name>
				<Source><![CDATA[
    public AssetAmount calc_RB(AssetAmount _basisForDepreciation,
        AssetAmount _prevDepAmountThisYear,
        TransDate _depreciationDate,
        AssetDepreciationTime _periods)
    {
        AssetAmount retValue;

        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods, true);

            if (isFirstYear && !this.isStraightLineLifeRemaining_AT())
            {
                retValue = this.calculateFirstYearDepreciation(
                    _depreciationDate,
                    _basisForDepreciation,
                    _prevDepAmountThisYear);
            }
            else
            {
                retValue = this.calc_ReducingBalance(_basisForDepreciation, _depreciationDate);
            }
        }
        catch
        {
            // An error has occurred within this calculation process, throw an error.
            // Report which AssetId and BookId the error occurred on.
            // The actual error caught may provide more detailed information in the infolog

            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SL</Name>
				<Source><![CDATA[
    public AssetAmount calc_SL(AssetAmount _basisForDepreciation,
        AssetAmount _prevDepAmountThisYear,
        AssetAmount _prevDepAmountExternal,
        AssetAmount _prevDepAmountPriorYears,
        TransDate _depreciationDate,
        AssetDepreciationTime _periods)
    {
        AssetAmount retValue;

        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods);

            if (isFirstYear && !this.isStraightLineLifeRemaining_AT())
            {
                startingServiceLife = assetBook.ServiceLife;
                retValue = this.calculateFirstYearDepreciation(
                    _depreciationDate,
                    _basisForDepreciation * this.depreciationPercentage_SL(),
                    _prevDepAmountThisYear);
            }
            else
            {
                retValue = this.calc_StraightLine(_basisForDepreciation, _prevDepAmountThisYear, _prevDepAmountExternal, _periods);
            }
        }
        catch
        {
            // An error has occurred within this calculation process, throw an error.
            // Report which AssetId and BookId the error occurred on.
            // The actual error caught may provide more detailed information in the infolog

            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the asset's period depreciation amount into the correct currency.
    /// </summary>
    /// <param name="_amount">
    /// The depreciation amount.
    /// </param>
    /// <param name="_periods">
    /// Periods value for which depreciation value is calculated.
    /// </param>
    /// <returns>
    /// Depreciation amount for the given period.
    /// </returns>
    /// <remarks>
    /// The periods value is not used as the depreciation amount already has the final value and
    /// we don't need to multiply the amount the _periods value either.
    /// </remarks>
    public AssetAmount calcCurrencyAmount(AssetAmount _amount, AssetDepreciationTime _periods)
    {
        // In Austria it is needed to take periods value into account.
        // Amount is calculated from the depreciation start date.
        
        AssetAmount amount;

        if (useRestPeriod)
        {
            useRestPeriod = false;
            amount = super(_amount, _periods);
        }
        else if (assetBook.RecId)
        {
            amount = assetBook.roundDepreciationAmount(
                _amount,
                isReportingCurrencyDepreciation);
        }
        else
        {
            amount = CurrencyExchangeHelper::amount(_amount, this.getCurrencyCode());
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    //
    //  This method returns the adjustment to asset's remaining life.
    //
    //  This method assumes that an instance of this class type exists
    //  and that calc_RB() or calc_SL() methods have already been run.
    //
    public AssetDepreciationTime calcRestPeriod(AssetDepreciationTime _restPeriod, AssetTransDate _periodstart, AssetDepreciationTime _periods)
    {
        AssetDepreciationTime restPeriod = _restPeriod;

        if (AssetDepreciationProfile::isReducingBalanceDepreciationMethod(depreciationProfile.Method)
            || depreciationProfile.Method == AssetDepreciationMethod::StraightLine
            || depreciationProfile.Method == AssetDepreciationMethod::StraightLineLifeRemaining)
        {
            this.setAssetPeriodDate(_periodstart, _periods, depreciationProfile.AssetEndDependOnServiceLife ? false : true);

            if (isFirstYear)
            {
                if (depreciationProfile.Accrual == AssetAccrual::Yearly)
                {
                    if (assetBook.UsedFromDate >= depreciationInterval.findMiddleOfYear(assetBook.UsedFromDate))
                    {
                        if (this.isStraightLineLifeRemaining_AT())
                        {
                            useRestPeriod = true;
                        }
                        restPeriod = HalfYearStartYearFactor;
                    }
                }
                else
                {
                    if (this.isStraightLineLifeRemaining_AT())
                    {
                        if (depreciationInterval.indexofPeriod(_periodstart) == depreciationInterval.indexofPeriod(assetBook.UsedFromDate))
                        {
                            useRestPeriod = true;
                            restPeriod = min (assetBook.LifeTimeRest,
                                depreciationInterval.indexofPeriod(_periodstart) - depreciationInterval.indexofPeriod(assetBook.DepreciationStartDate) + 1);
                        }
                    }
                    else
                    {
                        AssetDepreciationTime numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(assetBook.UsedFromDate);
                        AssetDepreciationTime totalNumberOfPeriodsInYear = this.setNumberOfPeriodsLeftInYear(assetBook.DepreciationStartDate);

                        if (numberOfPeriodsLeftInYear)
                        {
                            // Round to 16 decimal places as that is the default scale for RealBase EDT
                            restPeriod = decround(totalNumberOfPeriodsInYear / numberOfPeriodsLeftInYear, 16);
                        }

                        // Make sure that for the final period takes the final amount of period remaining at this
                        // point the value model should depreciate the full year of depreciation.
                        if (depreciationInterval.indexofPeriod(_periodstart) ==
                            depreciationInterval.indexofPeriod(depreciationInterval.findLastDayOfYear(_periodstart)))
                        {
                            if (frac(_periods) > 0)
                            {
                                AssetDepreciationTime totalPeriodsAfterFirstYear =
                                assetBook.LifeTime - depreciationInterval.numOfPeriodsPerYear();

                                if (totalPeriodsAfterFirstYear > 0)
                                {
                                    restPeriod = _periods - totalPeriodsAfterFirstYear;
                                }
                            }
                        }
                    }
                }
            }
        }

        return restPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStartDate</Name>
				<Source><![CDATA[
    //
    //  This method calculates the asset's starting depreciation date.
    //
    //  The "Half Year Start of Year" depreciation convention will set the "depreciation run date"
    //  second half of the year that the asset was placed in service.
    //
    //  If the depreciation profile accrual is "Calendar" then the used from date will be set
    //  based on whether the passed in date parameter value is less than, greater than, or equal to
    //  the mid-point of the calendar year (July, 1st, the year of the passed in date value).
    //
    //  If the depreciation profile accrual is "Fiscal" then the the used from date will be set
    //  based on whether the passed in date parameter value is less than, greater than, or equal to
    //  the mid-point of the fiscal year.
    //
    //      If the passed in date is less than the mid-point of the fiscal year than the
    //      used from date will be set to beginning of the fiscal year.
    //
    //      If the passed in date is greater than or equal to the mid-point of the fiscal year than the
    //      used from date will be set the closer of the beginning or mid-point of that fiscal period.
    //
    //
    //  The AssetBook.usedFromDate is considered to be the "placed in service date".
    //
    //  When Half-Year Additional Acquisition logic is enabled, the method also calculates the depreciation
    //  date for frequencies other then Yearly and Daily.
    //

    protected AssetDepreciationStartDate calcStartDate(AssetUsedFromDate _usedFromDate)
    {
        AssetDepreciationStartDate startDate;

        if ((depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance
                || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance125
                || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance150
                || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance175
                || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance200
                || depreciationProfile.Method == AssetDepreciationMethod::StraightLine
                || depreciationProfile.Method == AssetDepreciationMethod::StraightLineLifeRemaining)
            // If Half-Year Additional Acquisition logic is enabled, determine the start date for
            // other frequencies then yearly.
            || AssetAdditionalAcquisitions::applyAdditionalAcquistionsLogic(depreciationProfile, assetBook.DepreciationConvention))
        {
            switch (depreciationProfile.DepreciationYear)
            {
                case  AssetDepreciationYear::Fiscal:
                    AssetDepreciationStartDate middleYearDate = depreciationInterval.findMiddleOfYear(_usedFromDate);
                    if (_usedFromDate < middleYearDate)
                    {
                        startDate = depreciationInterval.findFirstDayOfYear(_usedFromDate);
                    }
                    else
                    {
                        startDate = middleYearDate;
                    }

                    break;

                case AssetDepreciationYear::Calendar:
                    if (mthOfYr(_usedFromDate) > MonthsOfYear::June)
                    {
                        startDate = mkDate(1, MonthsOfYear::July, year(_usedFromDate));
                    }
                    else
                    {
                        startDate = mkDate(1, MonthsOfYear::January, year(_usedFromDate));
                    }

                    break;

                default:
                    // The enumeration is unknown, throw an error;
                    throw error(strFmt("@SYS99083", depreciationProfile.Profile));
            }
        }
        else
        {
            startDate = _usedFromDate;
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDisposalDepreciationAdjRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the portion of the depreciation allowed for a given period based on the date of the disposal.
    /// </summary>
    /// <param name="_disposalTransDate">
    /// The date of the disposal.
    /// </param>
    /// <returns>
    /// The portion of depreciation.
    /// </returns>
    public real calculateDisposalDepreciationAdjRatio(TransDate _disposalTransDate)
    {
        real adjustedDepreciation;
        TransDate   firstDayOfYear;
        int         totalNumberOfDays;
        TransDate   depreciationDateExt;

        TransDate disposalTransLastDayOfYear = depreciationInterval.findLastDayOfYear(_disposalTransDate);

        boolean isDisposalSameYear = depreciationInterval.findLastDayOfYear(assetBook.UsedFromDate) == disposalTransLastDayOfYear ? true : false;

        if (!isDisposalSameYear)
        {
            firstDayOfYear = depreciationInterval.findFirstDayOfYear(_disposalTransDate);
        }
        else
        {
            firstDayOfYear = assetBook.DepreciationStartDate;
        }

        this.updateDisposalFirstLastYear(_disposalTransDate);

        if (_disposalTransDate >= lastDepreciationDate)
        {
            adjustedDepreciation = 1;
        }
        else
        {
            if (this.isStraightLineLifeRemaining_AT())
            {
                TransDate middleOfYear = depreciationInterval.findMiddleOfYear(_disposalTransDate);

                // Depreciation should be calculated till the middle of the year or till the end of the year
                if (_disposalTransDate < middleOfYear)
                {
                    depreciationDateExt = middleOfYear - 1;
                }
                else
                {
                    depreciationDateExt = disposalTransLastDayOfYear;
                }

                if (depreciationDateExt >= lastDepreciationDate || depreciationDateExt == disposalTransLastDayOfYear)
                {
                    adjustedDepreciation = 1;
                }
                else
                {
                    if (disposalTransLastDayOfYear <= lastDepreciationDate)
                    {
                        adjustedDepreciation = HalfYearStartYearFactor;
                    }
                    else
                    {
                        totalNumberOfDays = lastDepreciationDate - firstDayOfYear + 1;
                        if (totalNumberOfDays)
                        {
                            adjustedDepreciation = depreciationDateExt - firstDayOfYear + 1;
                            adjustedDepreciation = adjustedDepreciation / totalNumberOfDays;
                        }
                    }
                }
            }
            else
            {
                if (lastDepreciationDate && lastDepreciationDate < disposalTransLastDayOfYear)
                {
                    totalNumberOfDays = lastDepreciationDate - firstDayOfYear + 1;
                }
                else
                {
                    totalNumberOfDays = disposalTransLastDayOfYear - firstDayOfYear + 1;
                }

                if (totalNumberOfDays)
                {
                    adjustedDepreciation = _disposalTransDate - firstDayOfYear + 1;
                    adjustedDepreciation = adjustedDepreciation / totalNumberOfDays;
                }
            }
        }

        return adjustedDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFirstYearDepreciation</Name>
				<Source><![CDATA[
    private AssetAmount calculateFirstYearDepreciation(
        TransDate _depreciationDate,
        AssetAmount _basisForDepreciation,
        AssetAmount _prevDepAmountThisYear)
    {
        AssetAmount                 returnValue;

        AssetDepreciationTime numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
        AssetDepreciationTime numberOfPeriodsInInterval = this.setNumberOfPeriodsInInterval(_depreciationDate);

        AssetAmount estimatedYearlyDepreciation = _basisForDepreciation;

        if (assetBook.UsedFromDate >= depreciationInterval.findMiddleOfYear(assetBook.UsedFromDate))
        {
            estimatedYearlyDepreciation = estimatedYearlyDepreciation * HalfYearStartYearFactor;
        }

        // With the true-up depreciation the primary profile additional depreciation could be higher then
        // the estimated depreciation for Straight Line method. To avoid incorrect results, the depreciation
        // for the alt. depreciation will be calculated based on the estimated yearly depreciation.
        if (assetBook.IsTrueUpDepreciation
            && depreciationProfile.Method == AssetDepreciationMethod::StraightLineLifeRemaining
            && _prevDepAmountThisYear > estimatedYearlyDepreciation
            && depreciationProfile.Profile == assetBook.DepreciationAltProfile)
        {
            numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(assetBook.UsedFromDate);
            if (numberOfPeriodsLeftInYear)
            {
                return assetBook.roundDepreciationAmount(
                    estimatedYearlyDepreciation / numberOfPeriodsLeftInYear,
                    this.parmIsReportingCurrencyDepreciation());
            }
        }

        AssetAmount netAmountToDepreciate = estimatedYearlyDepreciation - _prevDepAmountThisYear;

        if (numberOfPeriodsLeftInYear)
        {
            returnValue = this.getPeriodAmount(
                netAmountToDepreciate,
                numberOfPeriodsInInterval,
                numberOfPeriodsLeftInYear);
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateOfLastDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date of the last depreciation for a given value model.
    /// </summary>
    /// <param name="_depreciationDate">
    /// The date of the transaction
    /// </param>
    /// <param name="_periods">
    /// The number of remaining depreciation periods.
    /// </param>
    /// <param name="_isRB_Calc">
    /// A Boolean value that indicates whether the depreciation is of reducing balance type; optional.
    /// </param>
    /// <returns>
    /// Transaction date of the of the final year of depreciation.
    /// </returns>
    public TransDate getDateOfLastDepreciation(TransDate _depreciationDate, AssetDepreciationTime _periods, boolean _isRB_Calc = false)
    {
        return super(_depreciationDate, _periods, _isRB_Calc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStraightLineLifeRemaining_AT</Name>
				<Source><![CDATA[
    private boolean isStraightLineLifeRemaining_AT()
    {
        return (AssetTableDepConv_HalfYearStart::isHalfYearDepreciationMethod_AT(depreciationProfile.Method))
            && AssetParameters::find().HalfYearDepreciation_AT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumberOfPeriodsInInterval</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method sets the correct number of periods to take within the context of
    ///  the total number of periods for the asset's current transaction.
    /// </summary>
    /// <param name="_depreciationDate">
    /// Asset's current transaction date
    /// </param>
    /// <returns>
    /// Returns number of periods in the interval.
    /// </returns>
    protected AssetDepreciationTime setNumberOfPeriodsInInterval(TransDate _depreciationDate)
    {
        AssetDepreciationTime retValue;

        if (isFirstYear
            && (depreciationProfile.Accrual == AssetAccrual::HalfYearly
                || depreciationProfile.Accrual == AssetAccrual::Quarterly))
        {
            if (depreciationInterval.indexofPeriod(assetBook.UsedFromDate) == depreciationInterval.indexofPeriod(_depreciationDate))
            {
                retValue = depreciationInterval.periodOfYear(depreciationInterval.endPeriod(_depreciationDate)) -
                    depreciationInterval.periodOfYear(depreciationInterval.findFirstDayOfPeriod(assetBook.UsedFromDate)) + 1;
            }
            else
            {
                retValue = super(_depreciationDate);
            }
        }
        else
        {
            retValue = super(_depreciationDate);
        }

        if (retValue && retValue > 0)
        {
            return retValue;
        }
        else
        {
            // A proper asset depreciation time value cannot be calculated, throw an error.
            // This value must be greater than 1.

            throw error(strFmt("@SYS99073", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumberOfPeriodsLeftInYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the correct number of total periods from the asset's current transaction
    /// until the end of the year.
    /// </summary>
    /// <param name="_depreciationDate">
    /// Asset's current transaction date
    /// </param>
    /// <returns>
    /// Returns number of periods.
    /// </returns>
    protected AssetDepreciationTime setNumberOfPeriodsLeftInYear(TransDate _depreciationDate)
    {
        AssetDepreciationTime retValue;

        if (isFirstYear
            && (depreciationProfile.Accrual == AssetAccrual::HalfYearly
                || depreciationProfile.Accrual == AssetAccrual::Quarterly))
        {
            if (depreciationInterval.indexofPeriod(assetBook.UsedFromDate) == depreciationInterval.indexofPeriod(_depreciationDate))
            {
                retValue = depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfYear(_depreciationDate)) -
                    depreciationInterval.periodOfYear(assetBook.UsedFromDate) + 1;
            }
            else
            {
                retValue = super(_depreciationDate);
            }
        }
        else
        {
            retValue = super(_depreciationDate);
        }

        if (retValue && retValue > 0)
        {
            return retValue;
        }
        else
        {
            // A proper asset depreciation time value cannot be calculated, throw an error;
            // This value must be greater than 1.

            throw error(strFmt("@SYS99073", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHalfYearDepreciationMethod_AT</Name>
				<Source><![CDATA[
    internal static boolean isHalfYearDepreciationMethod_AT(AssetDepreciationMethod _depreciationMethod)
    {
        return conFind(FixedAssetsLocalizationConstants::HalfYearDepreciationMethods_AT, _depreciationMethod);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>