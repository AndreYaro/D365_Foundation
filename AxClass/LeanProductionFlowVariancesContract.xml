<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProductionFlowVariancesContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanProductionFlowVariancesContract</c> class contains a data contract for the
///    <c>LeanProductionFlowVariances</c> report.
/// </summary>
[
    DataContractAttribute
]
class LeanProductionFlowVariancesContract implements SysOperationValidatable
{
    PlanName        planName;
    InventCostLevel rollupLevel;
    TransDate       transDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPlanName</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('PlanName'),
        SysOperationLabelAttribute(literalStr("@SYS131795")),
        SysOperationDisplayOrderAttribute('1')
    ]
    public PlanName parmPlanName(PlanName _planName = planName)
    {
        planName = _planName;

        return planName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRollupLevel</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('RollupLevel'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public InventCostLevel parmRollupLevel(InventCostLevel _rollupLevel = rollupLevel)
    {
        rollupLevel = _rollupLevel;

        return rollupLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('TransDate'),
        SysOperationLabelAttribute(literalStr("@SYS7402")),
        SysOperationDisplayOrderAttribute('3')
    ]
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the report contract parameters.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (planName)
        {
            if (PlanReference::findPlanName(planName).PlanType != PlanTypes::ProductionFlow)
            {
                isValid = checkFailed("@SYS303304");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static LeanProductionFlowVariancesContract construct()
    {
        return new LeanProductionFlowVariancesContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>