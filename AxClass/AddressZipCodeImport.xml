<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AddressZipCodeImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class AddressZipCodeImport
{
    protected Filename filename;
    protected System.IO.Stream fileStream;

    protected TextStreamIo importFile;
    protected boolean processOK;
    protected Counter progressCounter;
    protected LogisticsAddressCountryRegion logisticsAddressCountryRegion;

    #isoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public boolean delete(boolean _delete = false)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    public Filename fileName(Filename _filename = filename)
    {
        filename = _filename;
        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileStream</Name>
				<Source><![CDATA[
    public System.IO.Stream fileStream(System.IO.Stream _fileStream = fileStream)
    {
        fileStream = _fileStream;
        return fileStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    protected void openFile()
    {
        importFile = TextStreamIo::constructForRead(fileStream, 850);

        if (importFile == null || importFile.status() != IO_Status::Ok)
        {
            throw error("@SYS52680");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdateInt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the progress.
    /// </summary>
    /// <param name="_incCount">
    /// The number of records imported.
    /// </param>
    protected void progressUpdateInt(int _incCount = 1)
    {
        progressCounter += _incCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    abstract protected void readFile()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;
            progressCounter = 0;

            this.readFile();
            if (processOK)
            {
                ttscommit;
            }
            else
            {
                ttsabort;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCountryRegionFromISOCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the country or region ID value from the ISO code. The Country/Region ID value therefore
    /// determined is used by the child classes for Zip Code Import.
    /// </summary>
    /// <param name="_isoCode">
    /// The ISO code for the corresponding country or region code.
    /// </param>
    public void setCountryRegionFromISOCode(LogisticsAddressCountryRegionISOCode _isoCode)
    {
        select firstonly CountryRegionId from logisticsAddressCountryRegion
            where logisticsAddressCountryRegion.isOcode == _isoCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>AddressZipCodeImport</c> class.
    /// </summary>
    /// <param name="_addressZipCodeImportCountryRegion">
    /// The member of the <c>LogisticsAddrZipCodeImportCountryRegion</c> class.
    /// </param>
    /// <returns>
    /// A new instance of an <c>AddressZipCodeImport</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The call of the class is incorrect.
    /// </exception>
    public static AddressZipCodeImport construct(LogisticsAddrZipCodeImportCountryRegion _addressZipCodeImportCountryRegion)
    {
        AddressZipCodeImport addressZipCodeImport;
        switch (_addressZipCodeImportCountryRegion)
        {
            case LogisticsAddrZipCodeImportCountryRegion::Netherlands:
                addressZipCodeImport = new AddressZipCodeImport_NL();
                addressZipCodeImport.setCountryRegionFromISOCode(#isoNL);
                break;
            case LogisticsAddrZipCodeImportCountryRegion::Sweden:
                addressZipCodeImport = new AddressZipCodeImport_SE();
                addressZipCodeImport.setCountryRegionFromISOCode(#isoSE);
                break;
            case LogisticsAddrZipCodeImportCountryRegion::Belgium:
                addressZipCodeImport = new AddressZipCodeImport_BE();
                addressZipCodeImport.setCountryRegionFromISOCode(#isoBE);
                break;
            default:
                GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes(
                    [ [#isoCN, GlobalizationConstants::FeatureReferenceCN00008] ],
                    funcName()
                );

                var eventHandlerResult = new EventHandlerResult();
                AddressZipCodeImport::addressZipCodeImportConstruct(_addressZipCodeImportCountryRegion, eventHandlerResult);
                
                if (eventHandlerResult.hasResult())
                {
                    addressZipCodeImport = eventHandlerResult.result();
                }
                else
                {
                    throw error("@SYS59121");
                }
        }
        return addressZipCodeImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressZipCodeImportConstruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for constructing a new <c>AddressZipCodeImport</c> instance.
    /// </summary>
    /// <param name = "_addressZipCodeImportCountryRegion"> The country region that the <c>AddressZipCodeImport</c> object should construct for. </param>
    /// <param name = "_result"> An <c>EventHandlerResult</c> instance, where subscribers can provide the new <c>AddressZipCodeImport</c> instance.</param>
    static delegate void addressZipCodeImportConstruct(LogisticsAddrZipCodeImportCountryRegion _addressZipCodeImportCountryRegion, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllCountryRegionZipCodes</Name>
				<Source><![CDATA[
    public static void deleteAllCountryRegionZipCodes(LogisticsAddressCountryRegionId _addressCountryRegionId)
    {
        // Don't delete zip codes, since there are RecId references to them
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAddressZipCodeImport</Name>
				<Source><![CDATA[
    public static AddressZipCodeImport newAddressZipCodeImport(
        LogisticsAddrZipCodeImportCountryRegion _addressZipCodeImportCountryRegion,
        Filename _filename,
        System.IO.Stream _fileStream,
        NoYes _delete)
    {
        AddressZipCodeImport addressZipCodeImport;
        addressZipCodeImport = AddressZipCodeImport::construct(_addressZipCodeImportCountryRegion);
        addressZipCodeImport.delete(_delete);
        addressZipCodeImport.fileName(_filename);
        addressZipCodeImport.fileStream(_fileStream);
        return addressZipCodeImport;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>