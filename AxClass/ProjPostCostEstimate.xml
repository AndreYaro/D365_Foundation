<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostCostEstimate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostCostEstimate extends ProjPost
{
    ProjCostTrans       projCostTrans;
    ProjCostTransCost   projCostTransCost;
    LedgerJournalTrans  ledgerJournalTrans;
    LedgerJournalTrans_Project  ledgerJournalTrans_Project;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkEnterNeverLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the project ledger status field for costs to determine whether costs are posted to the
    /// general ledgers.
    /// </summary>
    /// <returns>
    /// true if the project ledger status for costs is equal to the enumeration value
    /// <c>ProjLedgerStatus::Never</c>; otherwise, false.
    /// </returns>
    public boolean checkEnterNeverLedger()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvestElimination</Name>
				<Source><![CDATA[
    boolean checkInvestElimination()
    {
        ProjTable projTableLocal = ProjTable::find(projTrans.projId());

        if (projTableLocal.Type == ProjType::Investment || ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            if (ProjRevRecHelper::isForeseeableLossesActivatedForProject(projTrans.projId()))
            {
                if (this.parmElimination())
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the mandatory transaction fields contain values.
    /// </summary>
    /// <param name="throwerror">
    /// A Boolean value that specifies whether to throw an error when a validation fails. May be set to
    /// null. The default value is true; optional.
    /// </param>
    /// <returns>
    /// true if the basic fields contain values; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  The following fields are checked by this routine:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Project ID</description>
    ///   </item>
    ///   <item>
    ///   <description>Category ID</description>
    ///   </item>
    ///   <item>
    ///   <description>Currency ID for Sales</description>
    ///   </item>
    ///   <item>
    ///   <description>Transaction Date</description>
    ///   </item>
    ///  </list>
    ///  The <paramref name="throwerror" />
    ///   parameter is not used in this method and is provided for extending the functionality through an
    ///  override method. This method will call the
    ///  <c>
    ///  checkFailed
    ///  </c>
    ///   method for all checked fields that do not contain a valid value.
    /// </remarks>
    public boolean checkTrans(boolean throwerror = true)
    {
        LedgerDimensionAccount          mergedLedgerDimension;
        LedgerDimensionDefaultAccount   defaultLedgerDimension;
        boolean                         ok  = true;

        ok  = super();

        ok = (ok &&  projTrans.validateWrite());
        
        ProjLedgerStatus costLedgerStatus;
        NoYes postWIPCost;
        ProjTable projTableLoc = ProjTable::find(projTrans.projId());
        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            ProjRevenueProfile revProfile = ProjRevRecHelper::getProfileForRevRecProject(projTableLoc, ProjContractBillingMethod::FixedPrice);
            costLedgerStatus = ProjRevRecHelper::cost2LedgerStatus(revProfile.CostLedgerStatus);
            postWIPCost = revProfile.PostWIPCost;
        }
        else
        {
            ProjGroup projGroup = ProjGroup::find(projTableLoc.ProjGroupId);
            costLedgerStatus = projGroup.CostTransCost;
            postWIPCost = projGroup.CostTransTurnover;
        }

        if (! projTrans.linePropertyId())
        {
            ok = checkFailed("@SYS50154") && ok;
        }

        if (costLedgerStatus && projTrans.transCost())
        {
            defaultLedgerDimension=projTrans.statusAccountLedgerDimension(0);
            // need to merge the default account with the default dimensions and do the check on the fully instantiated account
            mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
            ok = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension)) && ok;

            defaultLedgerDimension=projTrans.costAccountLedgerDimension(0,throwerror);
            // need to merge the default account with the default dimensions and do the check on the fully instantiated account
            mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
            ok = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension)) && ok;
        }

        if (postWIPCost && projTrans.canBeInvoiced() && projTrans.transTurnover())
        {
            defaultLedgerDimension=projTrans.salesOffsetAccountLedgerDimension(0);
            // need to merge the default account with the default dimensions and do the check on the fully instantiated account
            mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
            ok = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension)) && ok;

            defaultLedgerDimension=projTrans.salesValueAccountLedgerDimension(0);
            // need to merge the default account with the default dimensions and do the check on the fully instantiated account
            mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
            ok = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension)) && ok;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEnterCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have a credit amount for the cost account.
    /// </summary>
    /// <returns>
    /// true if the posting should have a credit amount for the cost account; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by the class that extends this class to provide the necessary
    /// functionality for the transaction that is being posted.
    /// </remarks>
    protected boolean costEnterCredit()
    {
        if (this.checkInvestElimination())
        {
            if (!this.parmReverseAccrued())
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEnterDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have a debit amount for the cost account.
    /// </summary>
    /// <returns>
    /// true if the posting should have a debit amount for the cost account; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by the class that extends this class to provide the necessary
    /// functionality for the transaction that is being posted.
    /// </remarks>
    protected boolean costEnterDebit()
    {
        if (this.checkInvestElimination())
        {
            if (this.parmReverseAccrued())
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        if (this.parmElimination())
        {
            if (this.parmReverseAccrued())
            {
                return projTrans.wipCostAccruedLedgerDimension(_fundingSourceId);
            }
        }
        else
        {
            if (!this.parmReverseAccrued())
            {
                return projTrans.wipCostAccruedLedgerDimension(_fundingSourceId);
            }
        }

        return projTrans.accruedCostLedgerDimension(_fundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        if (this.parmElimination())
        {
            if (this.parmReverseAccrued())
            {
                return projTrans.accruedCostLedgerDimension(_fundingSourceId);
            }
        }
        else
        {
            if (!this.parmReverseAccrued())
            {
                return projTrans.accruedCostLedgerDimension(_fundingSourceId);
            }
        }

        return projTrans.wipCostAccruedLedgerDimension(_fundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer, Common _bufferCost)
    {
        switch (_buffer.TableId)
        {
            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans  = _buffer;
                ledgerJournalTrans_Project = LedgerJournalTrans_Project::find(ledgerJournalTrans.RecId);
                projTrans           = ProjTrans::newLedgerJournalTrans(ledgerJournalTrans);
                break;

            case tableNum(ProjCostTrans):
                projCostTrans       = _buffer;
                projCostTransCost   = _bufferCost;
                projTrans           = ProjTrans::newProjCostTransCost(projCostTrans, projCostTransCost);
                this.parmTransIdCost(projCostTrans.TransId);
                this.parmTransIdSales(projCostTrans.TransId);
                break;
        }

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger posting type that is associated with posting project costs based on the
    /// current project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        if (this.parmElimination())
        {
            if (this.parmReverseAccrued())
            {
                return LedgerPostingType::ProjAccruedCost;
            }
        }
        else
        {
            if (! this.parmReverseAccrued())
            {
                return LedgerPostingType::ProjAccruedCost;
            }
        }

        return LedgerPostingType::ProjWIPCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger posting type for project offset cost posting based on the current ledger
    /// status of the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        if (this.parmElimination())
        {
            if (this.parmReverseAccrued())
            {
                return LedgerPostingType::ProjWIPCost;
            }
        }
        else
        {
            if (! this.parmReverseAccrued())
            {
                return LedgerPostingType::ProjWIPCost;
            }
        }

        return LedgerPostingType::ProjAccruedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c> method
    /// when the <c>parmUpdateTrans</c> method returns true.This method contains no code.
    /// </remarks>
    public void projTransCreate()
    {
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        projCostTrans.clear();

        projCostTrans                   = ProjCostTrans::initTransFromJournal(ledgerJournalTrans,
                                                                              ledgerJournalTrans_Project);
        projCostTrans.VoucherJournal    = ledgerVoucher.lastVoucher();

        projCostTrans.TransactionOrigin = this.parmTransactionOrigin();

        if (! projCostTrans.TransId)
        {
            projCostTrans.TransId   = ProjParameters::newTransId();
        }

        if (! projCostTrans.validateWrite())
        {
            throw error("@SYS21628");
        }

        projCostTrans.insert();

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(ledgerJournalTrans, projCostTrans);
        }
        // </GTE>

        //Create ProjCostTransCost record
        projCostTransCost.clear();
        projCostTransCost.TransId           = projCostTrans.TransId;
        projCostTransCost.LedgerTransdate   = ledgerVoucher.lastTransDate();
        projCostTransCost.CostPrice         = projTrans.costPrice();
        projCostTransCost.CostPriceCurrency = projTrans.costPrice();
        projCostTransCost.LineAmount        = projTrans.transCost();
        projCostTransCost.LedgerStatusCost  = this.parmLedgerStatusCost();
        projCostTransCost.wipPeriod         = projTrans.transDate();
        projCostTransCost.TransStatus       = ProjTransStatus::Estimated;
        projCostTransCost.DefaultDimension  = projTrans.defaultDimension();
        projCostTransCost.insert();

        Docu::copy(ledgerJournalTrans, projCostTrans);

        this.parmTransIdCost(projCostTrans.TransId);
        this.parmTransIdSales(projCostTrans.TransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c> method
    /// when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        this.populateProjCostTransCost();
        projCostTransCost.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjCostTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populate values for <c>ProjCostTransCost</c> table.
    /// </summary>
    protected void populateProjCostTransCost()
    {
        if (this.parmReverseAccrued() && ! this.parmElimination()) // reverse period
        {
            projCostTransCost.TransStatus = ProjTransStatus::Adjusted;
            projCostTransCost.wipPeriod = dateNull();
        }
        else if (! this.parmReverseAccrued() && this.parmElimination()) // elimination
        {
            projCostTransCost.TransStatus = ProjTransStatus::Eliminated;
        }
        else if (! this.parmReverseAccrued() && ! this.parmElimination()) // normal period
        {
            projCostTransCost.TransStatus = ProjTransStatus::Estimated;
        }
        else if (  this.parmReverseAccrued() && this.parmElimination()) // reverse elimination
        {
            projCostTransCost.TransStatus = ProjTransStatus::Estimated;
        }

        projCostTransCost.CostAmountLedger = -this.ledgerCostAmountMST();
        projCostTransCost.LedgerStatusCost = this.parmLedgerStatusCost();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>