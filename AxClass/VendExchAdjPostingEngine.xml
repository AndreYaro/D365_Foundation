<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendExchAdjPostingEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendExchAdjPostingEngine extends CustVendExchAdjPostingEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerTransactionText</Name>
				<Source><![CDATA[
    protected LedgerTransTxt getLedgerTransactionText()
    {
        return LedgerTransTxt::VendExchAdjLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    protected ModuleCustVend getModule()
    {
        return ModuleCustVend::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequence</Name>
				<Source><![CDATA[
    protected NumberSequenceReference getNumberSequence()
    {
        return VendParameters::numRefVendExchAdjVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalGainLossPostingAccountTypes</Name>
				<Source><![CDATA[
    protected List getOriginalGainLossPostingAccountTypes()
    {
        return CustVendSettlePostingTypes::construct(custVendTrans).getOriginalPostingAccountTypes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubLedgerTransactionText</Name>
				<Source><![CDATA[
    protected LedgerTransTxt getSubLedgerTransactionText()
    {
        return LedgerTransTxt::VendExchAdjVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeSummaryLedgerDimension</Name>
				<Source><![CDATA[
    protected LedgerDimensionAccount mergeSummaryLedgerDimension(
        boolean _useSettingsFromPreviousAdjustment,
        boolean _voucherContainsMultipleSummaryEntries = false,
        boolean _isReversing = false)
    {
        LedgerDimensionDefaultAccount mainAccountWithDefaultDimension;

        mainAccountWithDefaultDimension = super(_useSettingsFromPreviousAdjustment, _voucherContainsMultipleSummaryEntries, _isReversing);

        if (this.isInVendorInvoicePool(custVendTrans))
        {
            DimensionDefault localDimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(mainAccountWithDefaultDimension);

            mainAccountWithDefaultDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                this.getPurchasingLedgerDimension(custVendTrans.AccountNum, this.getPostingProfile(_useSettingsFromPreviousAdjustment)),
                localDimensionDefault);
        }

        return mainAccountWithDefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummaryLedgerDimension</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount getSummaryLedgerDimension(CustVendAC _custVendAC, PostingProfile _postingProfile)
    {
        return VendLedgerAccounts::summaryLedgerDimension(_custVendAC, _postingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchasingLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the summary ledger dimension value based on the purchasing ledger dimension.
    /// </summary>
    /// <param name="_custVendAC">The vendor account to find dimensions for.</param>
    /// <param name="_postingProfile">The posting profile.</param>
    /// <returns>The purchasing ledger dimension value.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerDimensionDefaultAccount getPurchasingLedgerDimension(CustVendAC _custVendAC, PostingProfile _postingProfile)
    {
        return VendLedgerAccounts::purchasingLedgerDimension(_custVendAC, _postingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummaryPostingAccountType</Name>
				<Source><![CDATA[
    protected LedgerPostingType getSummaryPostingAccountType()
    {
        return LedgerPostingType::VendBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInVendorInvoicePool</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the current <c>CustVendTrans</c> record is in the vendor invoice pool.
    /// </summary>
    /// <param name = "_custVendTrans">The <c>CustVendTrans</c> record to search the pool against.</param>
    /// <returns>True if the record is in the vendor invoice pool.</returns>
    private boolean isInVendorInvoicePool(CustVendTrans _custVendTrans)
    {
        boolean ret;

        if (_custVendTrans.TableId == tableNum(VendTrans))
        {
            LedgerJournalTable ledgerJournalTable = LedgerJournalTable::findVendorInvoicePool();
            VendTrans vendTrans = VendTrans::find(_custVendTrans.RecId);

            if (vendTrans.JournalNum == ledgerJournalTable.JournalNum)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateNewCustVendTransForExhangeAdjustment</Name>
				<Source><![CDATA[
    protected CustVendTrans populateNewCustVendTransForExhangeAdjustment(AmountMST _accountingCurrencyExchangeAdjustmentAmount, AmountMSTSecondary _reportingCurrencyExchangeAdjustmentAmount, TransDate _exchangeAdjustmentTransDate, boolean _isReversing, boolean _useSettingsFromPreviousAdjustment, CustVendTrans _originalCustVendTrans)
    {
        CustVendTrans newCustVendTrans;

        newCustVendTrans  = super(_accountingCurrencyExchangeAdjustmentAmount, _reportingCurrencyExchangeAdjustmentAmount, _exchangeAdjustmentTransDate, _isReversing, _useSettingsFromPreviousAdjustment, _originalCustVendTrans);

        // set arrival value to match the account of the original trans record
        newCustVendTrans.Arrival = this.shouldRevalueAgainstArrivalAccount(_originalCustVendTrans, newCustVendTrans, _isReversing);
        
        return newCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRevalueAgainstArrivalAccount</Name>
				<Source><![CDATA[
    private NoYes shouldRevalueAgainstArrivalAccount(CustVendTrans _originalCustVendTrans, CustVendTrans _currentTrans, boolean _isReversing)
    {
        // Arrival value is set to true when the original vend trans record has arrival of true and approved of false.
        // Reversing transaction set its arrival value followed by previous exchange adjustment record.        
        NoYes arrival = NoYes::No;

        if (_isReversing)
        {
            arrival = (this.isLatestExchangeAdjustmentArrival(_currentTrans.OffsetRecId, _currentTrans.ExchAdjustment * -1) == NoYes::Yes);
        }
        else
        {
            // Check the original transaction has ever approved before only when the arrival value of original trans record is Yes, which means invoice register.
            if  (_originalCustVendTrans.Approved == NoYes::No && _originalCustVendTrans.Arrival == NoYes::Yes)
            {
                arrival = !this.isApprovedInHistory(_originalCustVendTrans.RecId);
            }
        }

        return arrival;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLatestExchangeAdjustmentArrival</Name>
				<Source><![CDATA[
    private NoYes isLatestExchangeAdjustmentArrival(VendTransRefRecId _offsetRecId, AmountMST _exchAdjustment)
    {
        // search the lastest exchange adjustment record in vend trans table and return its arrival value.
        VendTrans adjustmentTrans;

        select firstonly Arrival from adjustmentTrans
            order by adjustmentTrans.CreatedDateTime desc, adjustmentTrans.RecId desc
            where adjustmentTrans.OffsetRecId == _offsetRecId
                && adjustmentTrans.TransType == LedgerTransType::ExchAdjustment
                && adjustmentTrans.ExchAdjustment == _exchAdjustment;

        return adjustmentTrans.Arrival;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApprovedInHistory</Name>
				<Source><![CDATA[
    private boolean isApprovedInHistory(RecId _custVendTransRecId)
    {
        VendTrans originalTrans;
        LedgerJournalTable ledgerJournalTable;

        select firstonly RecId from ledgerJournalTable
            where ledgerJournalTable.JournalType == LedgerJournalType::Approval
            join originalTrans
            where originalTrans.JournalNum == ledgerJournalTable.JournalNum
                && originalTrans.RecId == _custVendTransRecId;

        return ledgerJournalTable.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>