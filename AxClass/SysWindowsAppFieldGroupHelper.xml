<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysWindowsAppFieldGroupHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class allows to perform field group operations in the context of the
/// workflow approval.
/// </summary>
/// <remarks>
/// This class simplifies search of the existing fields within a field group
/// and allows to extend a workflow token map with the members of a field
/// groups of the specific workflow approval name.
/// </remarks>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class SysWindowsAppFieldGroupHelper
{
    SysDictWorkflowElement  workflowElement;
    TableId                 templateTableId;
    FieldGroupName          overviewFieldGroup;
    SysDictClass            sysDictClass;
    str                     tableName;
    SysDictTable            sysDictTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>extendMapWithField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend specified map of workflow tokens with the particular field of the workflow document table.
    /// </summary>
    /// <param name="_tokens">
    /// Token map to extend. The map should contain field/method name - WorkflowDocumentFieldElement key-value pairs.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field to extend tokens with.
    /// </param>
    private void extendMapWithField(Map _tokens, FieldId _fieldId)
    {
        var sysDictField = new SysDictField(templateTableId, _fieldId);

        if (sysDictField)
        {
            str titleFieldName  = sysDictField.name();
            str fieldKey        = sysDictTable.name() + '.' + titleFieldName;

            if (!_tokens.exists(fieldKey))
            {
                var label           = sysDictField.label();
                var documentField   = WorkflowDocumentFieldElement::newFieldToken(titleFieldName,
                                                                            fieldKey,
                                                                            sysDictTable.label() + '.' + label,
                                                                            sysDictField.id(),
                                                                            sysDictField.baseType(),
                                                                            sysDictField.typeId(),
                                                                            sysDictField.enumId(),
                                                                            label,
                                                                            sysDictField.help(),
                                                                            sysDictField.tableid(),
                                                                            '',
                                                                            sysDictField.arrayIndex());
                _tokens.insert(fieldKey, documentField);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendMapWithFieldGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend specified map of workflow tokens with members of the field group.
    /// </summary>
    /// <param name="_tokens">
    /// Token map to extend. The map should contain field/method name - WorkflowDocumentFieldElement key-value pairs.
    /// </param>
    /// <param name="_overviewFieldGroup">
    /// A field group to extend tokens with.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void extendMapWithFieldGroup(Map _tokens, FieldGroupName _overviewFieldGroup = overviewFieldGroup)
    {
        Counter controlIndex;
        var     sysDictFieldGroup = new SysDictFieldGroup(templateTableId, _overviewFieldGroup);

        if (sysDictFieldGroup)
        {
            // Iterate through field group
            for (controlIndex = 1; controlIndex <= sysDictFieldGroup.numberOfFields(); controlIndex++)
            {
                SysDictField                    sysDictField;
                str                             fieldOrMethodName;
                WorkflowDocumentFieldElement    documentField;
                Types                           baseType;
                extendedTypeId                  extendedTypeId;
                enumId                          enumId;
                WorkflowDocumentFieldLabel      label;
                WorkflowDocumentFieldHelpText   help;
                boolean                         isMethod        = false;
                Name                            dataFieldName   = sysDictFieldGroup.methodName(sysDictFieldGroup.field(controlIndex));

                // If current field group record is a method, check if its name is equal to the
                // placeholder name of the validated SysWindowsAppApprovalsConfigFields record
                if (dataFieldName)
                {
                    fieldOrMethodName   = dataFieldName;
                    isMethod            = true;
                }
                else
                {
                    // If current field group record is not a method, it's a field. Check if its
                    // name is equal to the placeholder name of the validated
                    // SysWindowsAppApprovalsConfigFields record
                    FieldId fieldId     = sysDictFieldGroup.field(controlIndex);
                    sysDictField        = new SysDictField(templateTableId, fieldId);
                    fieldOrMethodName   = sysDictField.name();
                }

                str fieldKey = sysDictTable.name() + '.' + fieldOrMethodName;
                if (!_tokens.exists(fieldKey))
                {
                    if (isMethod)
                    {
                        var dictMethod = new DictMethod(UtilElementType::ClassInstanceMethod, sysDictClass.id(), fieldOrMethodName);

                        // The types of a value, returned by the method may differ, that's why
                        // newMethodToken parameters are being set differently depending on
                        // the return type.
                        if (dictMethod.returnType() == Types::Enum)
                        {
                            var sysDictEnum = new SysDictEnum(dictMethod.returnId());
                            if (sysDictEnum)
                            {
                                label = sysDictEnum.label();
                                help = sysDictEnum.help();
                                baseType = dictMethod.returnType();
                                extendedTypeId = 0;
                                enumId = sysDictEnum.id();
                            }
                        }
                        else
                        {
                            var sysDictType = new SysDictType(dictMethod.returnId());
                            if (sysDictType)
                            {
                                label = sysDictType.label();
                                help = sysDictType.help();
                                baseType = sysDictType.baseType();
                                extendedTypeId = sysDictType.id();
                                enumId = sysDictType.enumId();
                            }
                        }

                        documentField = WorkflowDocumentFieldElement::newMethodToken(fieldOrMethodName,
                                                                                     fieldKey,
                                                                                     sysDictTable.label() + '.' + label,
                                                                                     sysDictClass.id(),
                                                                                     baseType,
                                                                                     extendedTypeId,
                                                                                     enumId,
                                                                                     label,
                                                                                     help);
                    }
                    else
                    {
                        // Member is a field
                        label = sysDictField.label();
                        documentField = WorkflowDocumentFieldElement::newFieldToken(fieldOrMethodName,
                                                                                    fieldKey,
                                                                                    sysDictTable.label() + '.' + label,
                                                                                    sysDictField.id(),
                                                                                    baseType,
                                                                                    extendedTypeId,
                                                                                    enumId,
                                                                                    label,
                                                                                    help,
                                                                                    sysDictField.tableid(),
                                                                                    '',
                                                                                    sysDictField.arrayIndex());
                    }

                    _tokens.insert(fieldKey, documentField);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendMapWithTitles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend specified map of workflow tokens with Title1 and Title2 fields of the workflow document table.
    /// </summary>
    /// <param name="_tokens">
    /// Token map to extend. The map should contain field/method name - WorkflowDocumentFieldElement key-value pairs.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void extendMapWithTitles(Map _tokens)
    {
        this.extendMapWithField(_tokens, sysDictTable.titleField1());
        this.extendMapWithField(_tokens, sysDictTable.titleField2());
    }

]]></Source>
			</Method>
			<Method>
				<Name>memberExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if current record exists in the specified field group of the workflow document
    /// associated with the specified table.
    /// </summary>
    /// <param name="_fieldName">
    /// Field name to be found.
    /// </param>
    /// <param name="_fieldGroupName">
    /// Field group name. If not specified, searches within a workflow document default group name.
    /// </param>
    /// <returns>
    /// true if the field exists in the specified field group; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean memberExists(str _fieldName, FieldGroupName _fieldGroupName = overviewFieldGroup)
    {
        Counter controlIndex;
        var     sysDictFieldGroup   = new SysDictFieldGroup(templateTableId, _fieldGroupName);
        boolean result              = false;

        if (_fieldName && sysDictFieldGroup)
        {
            // Iterate through field group
            for (controlIndex = 1; controlIndex <= sysDictFieldGroup.numberOfFields(); controlIndex++)
            {
                Name dataFieldName = sysDictFieldGroup.methodName(sysDictFieldGroup.field(controlIndex));

                // If current field group record is a method, check if its name is equal to the
                // placeholder name of the validated SysWindowsAppApprovalsConfigFields record
                if (dataFieldName)
                {
                    if (strFmt('%1.%2', tableName, dataFieldName) == _fieldName)
                    {
                        result = true;
                        break;
                    }
                }
                else
                {
                    // If current field group record is not a method, it's a field. Check if its
                    // name is equal to the placeholder name of the validated
                    // SysWindowsAppApprovalsConfigFields record
                    FieldId fieldId     = sysDictFieldGroup.field(controlIndex);
                    var sysDictField    = new SysDictField(templateTableId, fieldId);

                    if (strFmt('%1.%2', tableName, sysDictField.name()) == _fieldName)
                    {
                        result = true;
                        break;
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the <c>SysWindowsAppFieldGroupHelper</c>.
    /// </summary>
    /// <param name="_workflowApprovalName">
    /// The name of the workflow approval type.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(WorkflowApprovalName _workflowApprovalName)
    {
        workflowElement     = new SysDictWorkflowElement(WorkflowElementType::Approval, _workflowApprovalName);
        templateTableId     = tableName2id(workflowElement.documentTableName());
        sysDictTable        = new SysDictTable(templateTableId);
        overviewFieldGroup  = workflowElement.documentPreviewFieldGroup();
        sysDictClass        = new SysDictClass(className2Id(workflowElement.document()));
        tableName           = tableId2name(templateTableId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>