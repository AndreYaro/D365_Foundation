<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DataEntityDataSourceRuntimeContextAppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
static class DataEntityDataSourceRuntimeContextAppSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isAnyFieldSetToNonDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether at least one of the fields of the specified data source has a non-default value.
    /// </summary>
    /// <param name = "_dataSourceCtx">The data source context where the values should be tested.</param>
    /// <param name = "_dataEntityTableId">The table ID of the entity.</param>
    /// <returns>true if at least one of the fields has a non-default value; otherwise, false.</returns>
    public static boolean isAnyFieldSetToNonDefaultValue(DataEntityDataSourceRuntimeContext _dataSourceCtx, TableId _dataEntityTableId)
    {
        Common buffer = _dataSourceCtx.getBuffer();
        Common blankBuffer = new SysDictTable(buffer.TableId).makeRecord();

        DictDataEntity entity = new DictDataEntity(_dataEntityTableId);
        FieldId entityFieldId = entity.fieldNext(0);

        while (entityFieldId)
        {
            DictDataEntityField entityField = entity.fieldObject(entityFieldId);

            if (entityField.dataSource() == _dataSourceCtx.name()
                && !entityField.isSystem()
                && !entityField.IsComputedField())
            {
                FieldId tableFieldId = fieldName2Id(buffer.TableId, entityField.dataField());
                if (buffer.(tableFieldId) != blankBuffer.(tableFieldId))
                {
                    return true;
                }
            }

            entityFieldId = entity.fieldNext(entityFieldId);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyEntityFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether at least one of the entity fields that are mapped to the specified data source is set.
    /// </summary>
    /// <param name = "_dataSourceCtx">The data source context where the values should be tested.</param>
    /// <param name = "_dataEntityTableId">The table ID of the entity.</param>
    /// <returns>true if at least one of the fields is set; otherwise, false.</returns>
    public static boolean isAnyEntityFieldSet(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _dataEntity)
    {
        DictDataEntity entity = new DictDataEntity(_dataEntity.TableId);
        FieldId entityFieldId = entity.fieldNext(0);

        while (entityFieldId)
        {
            DictDataEntityField entityField = entity.fieldObject(entityFieldId);

            if (entityField.dataSource() == _dataSourceCtx.name()
                && !entityField.isSystem()
                && _dataEntity.isFieldSet(entityFieldId))
            {
                return true;
            }

            entityFieldId = entity.fieldNext(entityFieldId);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllFieldStatesToNotSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets field state for all fields to the "Not set" value.
    /// </summary>
    /// <param name = "_dataSourceCtx">The data source context.</param>
    public static void setAllFieldStatesToNotSet(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        _dataSourceCtx.setFieldStateForAllFields(FieldState::NotSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldStateForAllFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets field state for all fields to the specified value.
    /// </summary>
    /// <param name = "_dataSourceCtx">The data source context.</param>
    /// <param name = "_fieldState">The field state.</param>
    public static void setFieldStateForAllFields(DataEntityDataSourceRuntimeContext _dataSourceCtx, FieldState _fieldState)
    {
        Common buffer = _dataSourceCtx.getBuffer();
        SysDictTable dictTable = new SysDictTable(buffer.TableId);

        FieldId fieldId = dictTable.fieldNext(0);

        while (fieldId)
        {
            DictField field = dictTable.fieldObject(fieldId);

            if (buffer.fieldState(field.id()) != _fieldState && !field.isSystem())
            {
                buffer.fieldState(field.id(), _fieldState);
            }

            fieldId = dictTable.fieldNext(fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldStateForSubDataSourceFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets field state for sub-datasource fields to the specified value.
    /// </summary>
    /// <param name = "_dataSourceCtx">The data source context.</param>
    /// <param name = "_subDataSourceName">The Sub Data Source Name to be prossessed.</param>
    /// <param name = "_fieldState">The field state.</param>
    public static void setFieldStateForSubDataSourceFields(DataEntityDataSourceRuntimeContext _dataSourceCtx, DataSourceName _subDataSourceName, FieldState _fieldState)
    {
        Common buffer = _dataSourceCtx.getBuffer();
        DictDataEntity entity = new DictDataEntity(buffer.TableId);
        FieldId entityFieldId = entity.fieldNext(0);

        while (entityFieldId)
        {
            DictDataEntityField entityField = entity.fieldObject(entityFieldId);

            if (entityField.dataSource() == _subDataSourceName
                && !entityField.isSystem()
                && buffer.fieldState(entityFieldId) != _fieldState)
            {
                buffer.fieldState(entityFieldId, _fieldState);
            }

            entityFieldId = entity.fieldNext(entityFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginOrBlank</Name>
				<Source><![CDATA[
    public static Common getOriginOrBlank(Common _entity)
    {
        return _entity.RecId ? _entity.orig() : new SysDictTable(_entity.TableId).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBlankFieldStateToNotSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets blank field state to the "Not set" value.
    /// </summary>
    /// <param name = "_dataSourceCtx">The data source context.</param>
    public static void setBlankFieldStateToNotSet(Common _dataEntity, FieldId _targetFieldId)
    {
        if (!_dataEntity.(_targetFieldId) && _dataEntity.isFieldSet(_targetFieldId))
        {
            _dataEntity.fieldState(_targetFieldId, FieldState::NotSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>detectConflictForDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detects a conflict for the specified data source.
    /// </summary>
    /// <param name = "_entityCtx">The entity context containing the entity instance.</param>
    /// <param name = "_dataSourceCtx">The datasource on which to perform conflict detection for the entity instance.</param>
    /// <param name = "_matchingRecord">The matching record for the specified datasource.</param>
    /// <remarks>Conflict can happen when the record for the specified datasource was created together with another datasource record.</remarks>
    public static void detectConflictForDatasource(
        DataEntityRuntimeContext            _entityCtx, 
        DataEntityDataSourceRuntimeContext  _dataSourceCtx,
        Common                              _matchingRecord = null)
    {
        _dataSourceCtx.conflictDetectionInvoked(true);

        Common matchingRecord = prmIsDefault(_matchingRecord) ? _entityCtx.getEntityRecord().findEntityDataSource(_entityCtx, _dataSourceCtx) : _matchingRecord;

        if (matchingRecord)
        {
            if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
            {
                // change the operation to Update to avoid duplicated key exception
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
            }
        }
        else
        {
            if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
            {
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
            }
        }

        // if read only datasource, irrespective of whether lookup failed or passed matching record should be set
        if (matchingRecord || _dataSourceCtx.readOnly())
        {
            // Copy the valid time state update mode from the current buffer to the matching record
            matchingRecord.validTimeStateUpdateMode(_dataSourceCtx.getBuffer().validTimeStateUpdateMode());

            // use the matching record as the data source buffer
            _dataSourceCtx.setBuffer(matchingRecord);

            Common entity = _entityCtx.getEntityRecord();

            // Substitute rec version of the record in the data entity view with that of the matching record to avoid update conflict
            entity.fromViewDataSource(_dataSourceCtx.id(), matchingRecord);

            // re-map the entity fields:
            entity.mapEntityToDataSource(_entityCtx, _dataSourceCtx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwValidateWriteFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws <c>validateWrite</c> failed exception for the specified data source.
    /// </summary>
    /// <param name = "_dataSourceCtx">The data source context.</param>
    public static void throwValidateWriteFailed(DataEntityDataSourceRuntimeContext _dataSourceCtx, str _warningMessage = null)
    {
        if (_warningMessage)
        {
            warning(_warningMessage);
        }

        throw error(strFmt("@ApplicationFoundation:DataEntitiesDataSourceValidateWriteFailed", _dataSourceCtx.name()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified field of the data entity is modified.
    /// </summary>
    /// <param name = "_entity">The data entity record.</param>
    /// <param name = "_fieldId">The ID of the field.</param>
    /// <returns>true, if the field is modified; otherwise, false.</returns>
    public static boolean isFieldModified(Common _entity, FieldId _fieldId)
    {
        if (_entity.isFieldSet(_fieldId))
        {
            Common originOrBlank = _entity.getOriginOrBlank();

            return _entity.(_fieldId) != originOrBlank.(_fieldId);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyMappedFieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether at least one of the mapped fields of the specified entity have been modified.
    /// </summary>
    /// <param name = "_entity">The data entity record.</param>
    /// <returns>true, if at least one of the mapped fields of the specified entity have been modified; otherwise, false.</returns>
    public static boolean isAnyMappedFieldModified(Common _entity)
    {
        SysDictTable dictTable = new SysDictTable(_entity.TableId);

        FieldId fieldId = dictTable.fieldNext(0);

        while (fieldId)
        {
            DictField field = dictTable.fieldObject(fieldId);

            if (!field.isSystem() && _entity.isFieldModified(field.id()) && _entity.isFieldDataRetrieved(field.name()))
            {
                return true;
            }

            fieldId = dictTable.fieldNext(fieldId);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEntityInDataManagementContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the entity is running in a Data management context.
    /// </summary>
    /// <param name = "_entity">The data entity record.</param>
    /// <returns>true if entity is in Data management context; otherwise, false.</returns>
    /// <remarks>scopeIdentifier, set in DmfEntityWriter, is only set in Data management scenario. It is null for OData.</remarks>
    public static boolean isEntityInDataManagementContext(Common _entity)
    {
        if (_entity.scopeIdentifier())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDatabaseOperationInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the database operation is insert.
    /// </summary>
    /// <param name = "_entityCtx">The entity context containing the entity instance.</param>
    /// <returns>true if the database operation is insert; otherwise, false.</returns>
    public static boolean isDatabaseOperationInsert(DataEntityRuntimeContext _entityCtx)
    {
        return _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDatabaseOperationUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the database operation is update.
    /// </summary>
    /// <param name = "_entityCtx">The entity context containing the entity instance.</param>
    /// <returns>true if the database operation is update; otherwise, false.</returns>
    public static boolean isDatabaseOperationUpdate(DataEntityRuntimeContext _entityCtx)
    {
       return _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDatabaseOperationInsertOrUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the database operation is an insert or an update.
    /// </summary>
    /// <param name = "_entityCtx">The entity context containing the entity instance.</param>
    /// <returns>true if the database operation is an insert or an update; otherwise, false.</returns>
    public static boolean isDatabaseOperationInsertOrUpdate(DataEntityRuntimeContext _entityCtx)
    {
        var dataBaseOperation = _entityCtx.getDatabaseOperation();
        return dataBaseOperation == DataEntityDatabaseOperation::Update || dataBaseOperation == DataEntityDatabaseOperation::Insert;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>