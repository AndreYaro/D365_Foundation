<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlanActivityTimeCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PlanActivityTimeCalculation</c> class provides an interface to calculate time for the
///    <c>PlanActivityTime</c> table.
/// </summary>
public class PlanActivityTimeCalculation
{
    PlanActivityTime            planActivityTime;
    ItemId                      itemId;
    InventQty                   inventQty;
    RefRecId                    unitOfMeasure;
    InventDimId                 inventDimId;

    boolean                     cachedResult;

    real                        queueBeforeSeconds;
    real                        runTimeSeconds;
    real                        queueAfterSeconds;
    real                        valueAddedSeconds;

    PlanActivity                planActivity;

    LeanThroughputRatio         throughputRatio;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the appropriate calculation method.
    /// </summary>
    private void calculate()
    {
        this.init();

        if (planActivity)
        {
            this.calculatePlanActivity();
        }
        else
        {
            this.calculatePlanActivityTime();
        }

        cachedResult = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the activity time for a specific <c>PlanActivity</c> record.
    /// </summary>
    /// <remarks>
    ///    The result includes times from dependent next-level activities.
    /// </remarks>
    private void calculatePlanActivity()
    {
        PlanActivity                        planActivityLocal;
        PlanActivityTime                    planActivityTimeLocal;
        Map                                 map;
        MapEnumerator                       me;

        map = planActivity.mapPlanActivityTimes();

        if (   map
            && map.elements())
        {
            me = map.getEnumerator();
            while (me.moveNext())
            {
                planActivityLocal     = me.currentKey();
                planActivityTimeLocal = me.currentValue();
                this.calculatePlanActivityTime(planActivityLocal.calendarId(),planActivityTimeLocal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePlanActivityTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates duration based on the values provided through the constructor.
    /// </summary>
    /// <param name="_calendarId">
    /// A <c>CalendarId</c> string that identifies a calendar in the <c>WorkCalendarTable</c> table: optional.
    /// </param>
    /// <param name="_planActivityTime">
    /// A <c>PlanActivityTime</c> table record; optional.
    /// </param>
    private void calculatePlanActivityTime(
        CalendarId       _calendarId       = '',
        PlanActivityTime _planActivityTime = planActivityTime)
    {
        PlanActivityTimeComponent   planActivityTimeComponent;
        real                        durationSeconds;

        InventQty                   processQuantityInventUnit;
        RefRecId                    inventUnitOfMeasure;
        InventTable                 inventTable;

        if (_planActivityTime)
        {
            while select planActivityTimeComponent
                where planActivityTimeComponent.PlanActivityTime == _planActivityTime.RecId
            {
                real timeSeconds = ProdTimeUnitOfMeasure::convertToTimeUnitCalendarId(_calendarId,
                                                                                      planActivityTimeComponent.TimeUnitOfMeasure,
                                                                                      planActivityTimeComponent.Time,
                                                                                      ProdTimeUnitType::Seconds);

                if (this.isConstantTime(planActivityTimeComponent))
                {
                    durationSeconds = timeSeconds;
                }
                else
                {
                    if (!inventUnitOfMeasure && !inventTable.RecId)
                    {
                        inventTable = InventTable::find(itemId);
                        inventUnitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(inventTable.inventUnitId());
                    }

                    if (!processQuantityInventUnit)
                    {
                        processQuantityInventUnit = _planActivityTime.ProcessQuantity ?
                                                        EcoResProductUnitConverter::convertForReleasedProduct(
                                                                                            inventTable.ItemId,
                                                                                            inventDimId,
                                                                                            _planActivityTime.ProcessQuantity,
                                                                                            _planActivityTime.QuantityUnitOfMeasure,
                                                                                            inventUnitOfMeasure,
                                                                                            NoYes::Yes)
                                                    : 1;
                    }

                    InventQty timeRelatedQuantityInventUnit = planActivityTimeComponent.TimeRelatedQuantity ?
                                                        EcoResProductUnitConverter::convertForReleasedProduct(
                                                                                            inventTable.ItemId,
                                                                                            inventDimId,
                                                                                            planActivityTimeComponent.TimeRelatedQuantity,
                                                                                            planActivityTimeComponent.QuantityUnitOfMeasure,
                                                                                            inventUnitOfMeasure,
                                                                                            NoYes::Yes)
                                                    : 1;

                    InventQty inventQtyInventUnit = EcoResProductUnitConverter::convertForReleasedProduct(inventTable.ItemId,
                                                                                                          inventDimId,
                                                                                                          inventQty, 
                                                                                                          unitOfMeasure, 
                                                                                                          inventUnitOfMeasure, 
                                                                                                          NoYes::Yes);
                    
                    durationSeconds = this.calculateDurationSeconds(timeSeconds, processQuantityInventUnit, timeRelatedQuantityInventUnit, inventQtyInventUnit);
                }

                this.updateSecondsBasedOnTimeType(planActivityTimeComponent, durationSeconds);

                if (planActivityTimeComponent.IsValueAddedTime)
                {
                    valueAddedSeconds += durationSeconds;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDurationSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the duration seconds based on the converted <c>InventQty</c> units.
    /// </summary>
    /// <param name = "_timeSeconds">The converted <c>ProdTimeUnitOfMeasure</c> real value.</param>
    /// <param name = "_processQuantityInventUnit">The process quantity of the <c>PlanActivityTime</c> in inventory units.</param>
    /// <param name = "_timeRelatedQuantityInventUnit">The time related quantity of the <c>PlanActivityTimeComponent</c> in inventory units.</param>
    /// <param name = "_inventQtyInventUnit">The quantity in inventory units.</param>
    /// <returns>The calculated duration seconds real value.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected real calculateDurationSeconds(real _timeSeconds, InventQty _processQuantityInventUnit, InventQty _timeRelatedQuantityInventUnit, InventQty _inventQtyInventUnit)
    {
        int numberOfBatches = any2int(roundUp(_inventQtyInventUnit / _processQuantityInventUnit, 1));

        real durationSeconds = any2int(decround(((_processQuantityInventUnit / _timeRelatedQuantityInventUnit) * _timeSeconds) * numberOfBatches, 0));
        durationSeconds = durationSeconds * throughputRatio;

        return durationSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSecondsBasedOnTimeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the relevant seconds real value based on the <c>PlanActivityTimeComponent</c> record's time type.
    /// </summary>
    /// <param name = "_planActivityTimeComponent">The <c>PlanActivityTimeComponent</c> record.</param>
    /// <param name = "_durationSeconds">The real amount of duration seconds.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateSecondsBasedOnTimeType(PlanActivityTimeComponent _planActivityTimeComponent, real _durationSeconds)
    {
        switch (_planActivityTimeComponent.TimeType)
        {
            case PlanActivityTimeTypes::QueueTimeBefore:
                queueBeforeSeconds += _durationSeconds;
                break;
            case PlanActivityTimeTypes::RunTime:
                runTimeSeconds += _durationSeconds;
                break;
            case PlanActivityTimeTypes::QueueTimeAfter:
                queueAfterSeconds += _durationSeconds;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the calculation variables.
    /// </summary>
    private void init()
    {
        queueBeforeSeconds = 0;
        queueAfterSeconds  = 0;
        runTimeSeconds     = 0;
        valueAddedSeconds  = 0;
        cachedResult       = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConstantTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a <c>PlanActivityTimeComponent</c> table buffer represents a constant or a
    ///    quantity-dependent duration.
    /// </summary>
    /// <param name="_planActivityTimeComponent">
    ///    A <c>PlanActivityTimeComponent</c> table buffer.
    /// </param>
    /// <returns>
    ///    true if the duration is constant; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The queue times are constant.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isConstantTime(PlanActivityTimeComponent _planActivityTimeComponent)
    {
        return _planActivityTimeComponent.TimeType == PlanActivityTimeTypes::QueueTimeBefore ||
               _planActivityTimeComponent.TimeType == PlanActivityTimeTypes::QueueTimeAfter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventQty parmInventQty(InventQty _inventQty = inventQty)
    {
        inventQty = _inventQty;
        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanActivity</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public PlanActivity parmPlanActivity(PlanActivity _planActivity = planActivity)
    {
        planActivity = _planActivity;
        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanActivityTime</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public PlanActivityTime parmPlanActivityTime(PlanActivityTime _planActivityTime = planActivityTime)
    {
        planActivityTime = _planActivityTime;
        return planActivityTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThroughputRatio</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public LeanThroughputRatio parmThroughputRatio(LeanThroughputRatio _throughputRatio = throughputRatio)
    {
        throughputRatio = _throughputRatio;
        return throughputRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitOfMeasure</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RefRecId parmUnitOfMeasure(RefRecId _unitOfMeasure = unitOfMeasure)
    {
        unitOfMeasure = _unitOfMeasure;
        return unitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queueAfterSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the queue after time in seconds.
    /// </summary>
    /// <returns>
    ///    The queue after time in seconds.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public real queueAfterSeconds()
    {
        if (!cachedResult)
        {
            this.calculate();
        }

        return queueAfterSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queueBeforeSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the queue before time in seconds.
    /// </summary>
    /// <returns>
    ///    The queue before time in seconds.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public real queueBeforeSeconds()
    {
        if (!cachedResult)
        {
            this.calculate();
        }

        return queueBeforeSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTimeSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the run time in seconds.
    /// </summary>
    /// <returns>
    ///    The run time in seconds.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public real runTimeSeconds()
    {
        if (!cachedResult)
        {
            this.calculate();
        }

        return runTimeSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTimeSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the total time in seconds.
    /// </summary>
    /// <returns>
    ///    The total time in seconds.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public real totalTimeSeconds()
    {
        if (!cachedResult)
        {
            this.calculate();
        }

        return   queueBeforeSeconds
               + runTimeSeconds
               + queueAfterSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueAddedSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the value added time in seconds.
    /// </summary>
    /// <returns>
    ///    The value added time in seconds.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public real valueAddedSeconds()
    {
        if (!cachedResult)
        {
            this.calculate();
        }

        return valueAddedSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static PlanActivityTimeCalculation construct()
    {
        return new PlanActivityTimeCalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPlannedActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PlanActivityTimeCalculation</c> class.
    /// </summary>
    /// <param name="_planActivity">
    ///    A <c>PlanActivity</c> table buffer used in the calculation.
    /// </param>
    /// <param name="_itemId">
    ///    An <c>ItemId</c> value used to determine the conversion factors in the calculation.
    /// </param>
    /// <param name="_inventDimId">
    ///    The dimension ID to use for conversions.
    /// </param>
    /// <param name="_inventQty">
    ///    The quantity for which to calculate the time.
    /// </param>
    /// <param name="_unitOfMeasure">
    ///    The unit in which the quantity is stated.
    /// </param>
    /// <param name="_throughputRatio">
    ///    The throughput ratio to be applied to process time; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PlanActivityTimeCalculation</c> class.
    /// </returns>
    /// <remarks>
    ///    Use a blank item ID for nonitem specific unit conversions.
    /// </remarks>
    public static PlanActivityTimeCalculation newPlannedActivity(
        PlanActivity        _planActivity,
        ItemId              _itemId,
        InventDimId         _inventDimId,
        InventQty           _inventQty,
        RefRecId            _unitOfMeasure   = UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(_itemId).inventUnitId()),
        LeanThroughputRatio _throughputRatio = 1.0)
    {
        PlanActivityTimeCalculation     planActivityTimeCalculation = PlanActivityTimeCalculation::construct();

        planActivityTimeCalculation.parmPlanActivity(_planActivity);
        planActivityTimeCalculation.parmPlanActivityTime(PlanActivityTime::find(_planActivity.ActivityTime));
        planActivityTimeCalculation.parmItemId(_itemId);
        planActivityTimeCalculation.parmInventQty(_inventQty);
        planActivityTimeCalculation.parmUnitOfMeasure(_unitOfMeasure);
        planActivityTimeCalculation.parmThroughputRatio(_throughputRatio);
        planActivityTimeCalculation.inventDimId = _inventDimId;

        return planActivityTimeCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandardActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PlanActivityTimeCalculation</c> class.
    /// </summary>
    /// <param name="_planActivityTime">
    ///    A <c>PlanActivityTime</c> table buffer used in the calculation.
    /// </param>
    /// <param name="_itemId">
    ///    An <c>ItemId</c> value that is used to determine conversion factors in the calculation.
    /// </param>
    /// <param name="_inventDimId">
    ///    The dimension ID used for conversions.
    /// </param>
    /// <param name="_inventQty">
    ///    The quantity for which to calculate the time.
    /// </param>
    /// <param name="_unitOfMeasure">
    ///    The unit in which the quantity is stated.
    /// </param>
    /// <param name="_throughputRatio">
    ///    The throughput ratio to be applied to process time; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PlanActivityTimeCalculation</c> class.
    /// </returns>
    /// <remarks>
    ///    Use a blank item ID for nonitem specific unit conversions.
    /// </remarks>
    public static PlanActivityTimeCalculation newStandardActivity(
        PlanActivityTime    _planActivityTime,
        ItemId              _itemId,
        InventDimId         _inventDimId,
        InventQty           _inventQty,
        RefRecId            _unitOfMeasure,
        LeanThroughputRatio _throughputRatio = 1.0)
    {
        PlanActivityTimeCalculation     planActivityTimeCalculation = PlanActivityTimeCalculation::construct();

        planActivityTimeCalculation.parmPlanActivityTime(_planActivityTime);
        planActivityTimeCalculation.parmItemId(_itemId);
        planActivityTimeCalculation.parmInventQty(_inventQty);
        planActivityTimeCalculation.parmUnitOfMeasure(_unitOfMeasure);
        planActivityTimeCalculation.parmThroughputRatio(_throughputRatio);
        planActivityTimeCalculation.inventDimId = _inventDimId;

        return planActivityTimeCalculation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>