<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_CustBillProtest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalEngine_CustBillProtest</c> class supports journals for protesting bills of
///    exchange.
/// </summary>
/// <remarks>
///    This class extends <see cref="T:LedgerJournalEngine" />.
/// </remarks>
public class LedgerJournalEngine_CustBillProtest extends LedgerJournalEngine_CustBillOfExchange
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankAccountIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the offset account type and number according to the selected bank account.
    /// </summary>
    /// <param name="ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record buffer to modify.
    /// </param>
    public void bankAccountIdModified(LedgerJournalTrans ledgerJournalTrans)
    {
        if (ledgerJournalTable.ProtestSettledBill == NoYes::Yes
            && ledgerJournalTable.FixedOffsetAccount == NoYes::No)
        {
            ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.BankAccountId, LedgerJournalACType::Bank);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankRemittanceTypeModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets offset account type and number according to the selected bank remittance type.
    /// </summary>
    /// <param name="ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record buffer to modify.
    /// </param>
    void bankRemittanceTypeModified(LedgerJournalTrans ledgerJournalTrans)
    {
        if (ledgerJournalTable.ProtestSettledBill == NoYes::Yes
            && ledgerJournalTable.FixedOffsetAccount == NoYes::No)
        {
            ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.BankAccountId, LedgerJournalACType::Bank);
        }

        this.initCustPostingProfile(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustOffsetAccount</Name>
				<Source><![CDATA[
    protected void initCustOffsetAccount(LedgerJournalTrans ledgerJournalTrans)
    {
        super(ledgerJournalTrans);

        if (ledgerJournalTable.FixedOffsetAccount == NoYes::No)
        {
            if (ledgerJournalTable.ProtestSettledBill == NoYes::Yes)
            {
                ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.BankAccountId, LedgerJournalACType::Bank);
            }
            else
            {
                ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.parmAccount(), LedgerJournalACType::Cust);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustPostingProfile</Name>
				<Source><![CDATA[
    public void initCustPostingProfile(LedgerJournalTrans ledgerJournalTrans)
    {
        super(ledgerJournalTrans);

        if (ledgerJournalTable.ProtestSettledBill == NoYes::Yes)
        {
            ledgerJournalTrans.PostingProfile = CustParameters::find().PostingProfileBillsProtested;
        }
        else
        {
            switch (ledgerJournalTrans.BankRemittanceType)
            {
                case BankRemittanceType::None:
                    ledgerJournalTrans.PostingProfile = CustParameters::find().PostingProfileBills;
                    break;

                case BankRemittanceType::Collection:
                    ledgerJournalTrans.PostingProfile = CustParameters::find().PostingProfileBillsRemitCollection;
                    break;

                case BankRemittanceType::Discount:
                    ledgerJournalTrans.PostingProfile = CustParameters::find().PostingProfileBillsRemitDiscount;
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markedForSettlementWarning</Name>
				<Source><![CDATA[
    boolean markedForSettlementWarning(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;

        if (ledgerJournalTable.ProtestSettledBill == NoYes::Yes
            && _ledgerJournalTrans.SettleVoucher == SettlementType::SelectedTransact
            && _ledgerJournalTrans.amount() != _ledgerJournalTrans.orig().amount())
        {
            ret = checkFailed("@SYS74143");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransUpdate</Name>
				<Source><![CDATA[
    public void settleTransUpdate(LedgerJournalTrans ledgerJournalTrans)
    {
        if (ledgerJournalTable.ProtestSettledBill == NoYes::Yes)
        {
            this.settleTransUpdateSettled(ledgerJournalTrans);
        }
        else
        {
            super(ledgerJournalTrans);

            SpecTrans specTrans;
            CustTransOpen custTransOpen;

            select firstonly crossCompany RecId
            from specTrans
                where specTrans.SpecCompany == ledgerJournalTrans.DataAreaId
                    && specTrans.SpecRecId == ledgerJournalTrans.RecId
                    && specTrans.SpecTableId == ledgerJournalTrans.TableId
            exists join custTransOpen
                where custTransOpen.DataAreaId == specTrans.RefCompany
                    && custTransOpen.TableId == specTrans.RefTableId
                    && custTransOpen.RecId == specTrans.RefRecId
                    && custTransOpen.AmountCur != specTrans.Balance01;

            if (specTrans)
            {
                ledgerJournalTrans.amountCur2DebCred(0);
                ledgerJournalTrans.write();
                if (ledgerJournalTrans_ds)
                {
                    ledgerJournalTrans_ds.refresh();
                }

                SpecTransManager::constructServer(ledgerJournalTrans, false).deleteAll();

                throw error("@SYS74143");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransUpdateSettled</Name>
				<Source><![CDATA[
    public void settleTransUpdateSettled(LedgerJournalTrans ledgerJournalTrans)
    {
        DueDate dueDate;
        CustPaymMode paymMode;
        PostingProfile postingProfile;
        BankRemittanceType bankRemittanceType;
        CompanyBankAccountId companyBankAccountId;

        boolean warningIssuedDueDate = false;
        boolean crossCompanySettlement;

        SpecTrans specTrans;
        CustSettlement custSettlement;
        CustTrans custTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        while select crossCompany RecId
        from specTrans
            where specTrans.SpecCompany == ledgerJournalTrans.DataAreaId
                && specTrans.SpecRecId == ledgerJournalTrans.RecId
                && specTrans.SpecTableId == ledgerJournalTrans.TableId
        join DueDate from custSettlement
            where custSettlement.DataAreaId == specTrans.RefCompany
                && custSettlement.TableId == specTrans.RefTableId
                && custSettlement.RecId == specTrans.RefRecId
        join custTrans
            where custTrans.RecId == custSettlement.TransRecId
                && custTrans.AccountNum == custSettlement.AccountNum
        join BankRemittanceType, RemittedToBankAccountId from custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID
                && custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum
                && custBillOfExchangeTrans.Status == custTrans.BillOfExchangeStatus
        {
            if (ledgerJournalTrans.Company != custTrans.company())
            {
                crossCompanySettlement = true;
            }

            if (dueDate && dueDate != custSettlement.DueDate && !warningIssuedDueDate)
            {
                warningIssuedDueDate = !checkFailed("@SYS73746");
            }

            if ((paymMode && paymMode != custTrans.PaymMode)
                || (postingProfile && postingProfile != custTrans.PostingProfile)
                || (bankRemittanceType && bankRemittanceType != custBillOfExchangeTrans.BankRemittanceType)
                || (companyBankAccountId && companyBankAccountId != custBillOfExchangeTrans.RemittedToBankAccountId))
            {
                ledgerJournalTrans.amountCur2DebCred(0);
                ledgerJournalTrans.write();

                if (ledgerJournalTrans_ds)
                {
                    ledgerJournalTrans_ds.refresh();
                }

                SpecTransManager::constructServer(ledgerJournalTrans, false).deleteAll();

                throw error("@SYS76908");
            }

            dueDate = max(dueDate, custSettlement.DueDate);
            paymMode = custTrans.PaymMode;
            postingProfile = custTrans.PostingProfile;
            bankRemittanceType = custBillOfExchangeTrans.BankRemittanceType;
            companyBankAccountId = custBillOfExchangeTrans.RemittedToBankAccountId;
        }

        ledgerJournalTrans.Due = dueDate;
        if (!crossCompanySettlement)
        {
            ledgerJournalTrans.PaymMode = paymMode;
        }

        if (ledgerJournalTable.JournalType != LedgerJournalType::CustPaymRemittance)
        {
            ledgerJournalTrans.BankRemittanceType = bankRemittanceType;
            ledgerJournalTrans.BankAccountId = companyBankAccountId;
        }

        this.initCustOffsetAccount(ledgerJournalTrans);

        if (CustBillOfExchangeFinTagFlight::instance().isEnabled() && ledgerJournalTrans.OffsetLedgerDimension)
        {
            this.performFinTagDefaulting(ledgerJournalTrans, AccountOffsetaccount::OffsetAccount);
        }

        ledgerJournalTrans.write();
        ledgerJournalTrans_ds.reread();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>