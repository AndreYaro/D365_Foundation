<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionValidationHeader</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionValidationHeader</c> class validates the header of a Retail transaction.
/// </summary>
internal class RetailTransactionValidationHeader extends RetailTransactionValidationBase
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the customer account related to the Retail transaction.
    /// </summary>
    /// <returns>True if the customer account exists in HQ or is the default customer; otherwise, false.</returns>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerCustomerAccountDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    public boolean validateCustAccount()
    {
        if (customerOrderInfo.CustomerAccount == storeDefaultCustomer)
        {
            return true;
        }

        CustTable custTable = CustTable::find(customerOrderInfo.CustomerAccount);

        if (custTable.RecId == 0)
        {
            RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerCustomerAccountError", CustomerOrderInfo.CustomerAccount);

            this.insertValidationErrorForTransaction(RetailTransactionValidationType::CustomerAccount, errorMessage);

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumberOfItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the number of items related to the current transaction.
    /// </summary>
    /// <returns>True if the number of items from header is equal to the number of items from sales transactions; false, otherwise.</returns>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerNumberOfItemsDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    public boolean validateNumberOfItems()
    {
        RetailNumberOfItems numberOfItemsFromHeader = customerOrderInfo.NumberOfItems;
        RetailNumberOfItems numberOfItemsFromLines;

        for (int j = 0; j < customerOrderInfo.Items.get_count(); j++)
        {
            ItemInfo itemInfo = customerOrderInfo.Items.get_Item(j) as ItemInfo;

            numberOfItemsFromLines += abs(itemInfo.Quantity);
        }

        if (numberOfItemsFromHeader != numberOfItemsFromLines)
        {
            RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerNumberOfItemsError", numberOfItemsFromHeader, numberOfItemsFromLines);

            this.insertValidationErrorForTransaction(RetailTransactionValidationType::NumberOfItems, errorMessage);

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumberOfItemLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the number of item lines related to the current transaction.
    /// </summary>
    /// <returns>True if the number of item lines from header is equal to the number of actual transactions; false, otherwise.</returns>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerNumberOfItemLinesDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    public boolean validateNumberOfItemLines()
    {
        RetailNumberOfItemLines numberOfItemLinesFromHeader = customerOrderInfo.numberofItemLines;
        RetailNumberOfItemLines numberOfItemLinesFromLines;
        RetailTransactionSalesTrans salesTrans;

        select count(RecId) from salesTrans
            where salesTrans.Channel == str2Int64(customerOrderInfo.ChannelRecordId)
                && salesTrans.Store == customerOrderInfo.StoreId
                && salesTrans.terminalId == customerOrderInfo.TerminalId
                && salesTrans.transactionId == customerOrderInfo.TransactionId;

        numberOfItemLinesFromLines = salesTrans.RecId;

        if (numberOfItemLinesFromHeader != numberOfItemLinesFromLines)
        {
            RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerNumberOfItemLinesError", numberOfItemLinesFromHeader, numberOfItemLinesFromLines);

            this.insertValidationErrorForTransaction(RetailTransactionValidationType::NumberOfItemLines, errorMessage);

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConsistentIsIncludedInPriceFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that RetailTransactionTable.IsIncludedInPrice is consistent within a transaction.
    /// </summary>
    /// <returns>True if RetailTransactionTable.IsIncludedInPrice is consistent within a transaction; otherwise, false.</returns>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerTaxTransIsIncludedInPriceDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    public boolean validateConsistentIsIncludedInPriceFlag()
    {
        boolean isIncludedInPrice;
        boolean hasIsIncludedInPriceBeenSet = false;

        for (int i = 0; i < customerOrderInfo.Items.Count; i++)
        {
            ItemInfo itemInfo = customerOrderInfo.Items.get_Item(i) as ItemInfo;

            for (int j = 0; j < itemInfo.Taxes.Count; j++)
            {
                TaxInfo taxInfo = itemInfo.Taxes.get_Item(j) as TaxInfo;

                // Set isIncludedInPrice if it hasn't been set yet, otherwise validate consistency
                if (!hasIsIncludedInPriceBeenSet)
                {
                    isIncludedInPrice = taxInfo.IsIncludedInPrice;
                    hasIsIncludedInPriceBeenSet = true;
                }
                else
                {
                    if (isIncludedInPrice != taxInfo.IsIncludedInPrice)
                    {
                        RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerTaxTransIsIncludedInPriceError", customerOrderInfo.TransactionId);

                        this.insertValidationErrorForTransaction(RetailTransactionValidationType::ConsistentIsIncludedInPriceFlag, errorMessage);

                        return false;
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGrossAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the gross amount on the header equals the sum of the net amounts including tax on the lines plus charges.
    /// </summary>
    /// <returns>True if the header gross amount equals the sum of the net amounts including tax on the lines plus charges; false, otherwise.</returns>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerHeaderGrossAmountDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    public boolean validateGrossAmount()
    {
        // Get grossAmount from two different places

        RetailGrossAmount   grossAmount = customerOrderInfo.GrossAmount;
        RetailNetAmount     sumNetAmountInclTax;
        RetailTaxAmount     sumTaxAmount;
        AmountMST           sumOfCharges;
        Amount              sumOfChargeTaxes;

        // customerOrderInfo.IsTaxIncludedInPrice is stored as a string so we must compare strings to determine the value of isIncludedInPrice
        boolean isIncludedInPrice = customerOrderInfo.IsTaxIncludedInPrice == 'True';

        // sumTaxAmount = Sigma(TaxAmount_i)
        // sumNetAmountInclTax = Sigma(netAmount_i). netAmount is already rounded
        for (int i = 0; i < customerOrderInfo.Items.Count; i++)
        {
            ItemInfo itemInfo = customerOrderInfo.Items.get_Item(i) as ItemInfo;
            // sum the taxes without rounding
            sumTaxAmount += itemInfo.TaxAmount;
            // sum the already rounded net amounts
            sumNetAmountInclTax += customerOrderInfo.Items.get_Item(i).NetAmount;
        }

        // sum the charges without rounding
        sumOfCharges = this.getHeaderChargesAmount() + this.getLineChargesAmount();
        sumOfChargeTaxes = this.getHeaderChargeTaxAmount() + this.getLineChargeTaxAmount();

        // If ‘Prices include sales tax’ is set to No, grossAmount = sumNetAmountInclTax + sumTaxAmount + sumOfCharges + sumOfChargeTaxes
        // Else, grossAmount = sumNetAmountInclTax + sumOfCharges
        if (!isIncludedInPrice)
        {
            // sum the total netAmount, taxes and charges
            RetailGrossAmount totalAmount = sumNetAmountInclTax + sumTaxAmount + sumOfCharges + sumOfChargeTaxes;
            RetailGrossAmount totalRoundedAmount = CurrencyExchangeHelper::price(totalAmount, customerOrderInfo.CurrencyCode);

            if (abs(grossAmount - totalRoundedAmount) > RetailTransactionValidationHelper::getMaximumRoundingDifferenceAllowed())
            {
                RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerHeaderGrossAmountError", grossAmount, sumNetAmountInclTax + sumTaxAmount, sumOfCharges + sumOfChargeTaxes);

                this.insertValidationErrorForTransaction(RetailTransactionValidationType::HeaderGrossAmount, errorMessage);

                return false;
            }
        }
        else
        {
            // sum the total netAmount, and charges
            RetailGrossAmount totalAmount = sumNetAmountInclTax + sumOfCharges + sumOfChargeTaxes;
            RetailGrossAmount totalRoundedAmount = CurrencyExchangeHelper::price(totalAmount, customerOrderInfo.CurrencyCode);

            if (abs(grossAmount - totalRoundedAmount) > RetailTransactionValidationHelper::getMaximumRoundingDifferenceAllowed())
            {
                RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerHeaderGrossAmountError", grossAmount, sumNetAmountInclTax, sumOfCharges + sumOfChargeTaxes);

                this.insertValidationErrorForTransaction(RetailTransactionValidationType::HeaderGrossAmount, errorMessage);

                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the net amount on the header equals the sum of the net amount excluding tax on the lines plus charges.
    /// </summary>
    /// <returns>True if the net amount on the header equals the sum of the net amount excluding tax on the lines plus charges; false, otherwise.</returns>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerHeaderNetAmountDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    public boolean validateNetAmount()
    {
        RetailNetAmount netAmount = customerOrderInfo.NetAmount;
        RetailNetAmount sumNetAmount;
        AmountMST       sumOfCharges;

        // sumNetAmount = Sigma(NetAmountExclTax_i)
        for (int i = 0; i < customerOrderInfo.Items.Count; i++)
        {
            ItemInfo itemInfo = customerOrderInfo.Items.get_Item(i) as ItemInfo;
            sumNetAmount += itemInfo.NetAmountExclTax;
        }

        sumOfCharges = this.getHeaderChargesAmount() + this.getLineChargesAmount();

        AmountMST totalRoundedAmount = CurrencyExchangeHelper::price(sumNetAmount + sumOfCharges);

        if (abs(netAmount - totalRoundedAmount) > RetailTransactionValidationHelper::getMaximumRoundingDifferenceAllowed())
        {
            RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerHeaderNetAmountError", netAmount, sumNetAmount, sumOfCharges);

            this.insertValidationErrorForTransaction(RetailTransactionValidationType::HeaderNetAmount, errorMessage);

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNetAmountWithTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the net amount including tax on the header equals the sum of the net amount excluding tax and the tax amount on the lines.
    /// </summary>
    /// <returns>True if the net amount including tax on the header equals the sum of the net amount excluding tax and the tax amount on the lines; false, otherwise.</returns>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerHeaderNetAmountWithTaxDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    public boolean validateNetAmountWithTax()
    {
        RetailGrossAmount   grossAmount = customerOrderInfo.GrossAmount;
        RetailNetAmount     sumNetAmount;
        RetailTaxAmount     sumTaxAmount;
        AmountMST           sumOfCharges;
        Amount              sumOfChargeTaxes;

        // sumNetAmount = Sigma(NetAmountExclTax_i)
        // sumTaxAmount = Sigma(TaxAmount_i)
        for (int i = 0; i < customerOrderInfo.Items.Count; i++)
        {
            ItemInfo itemInfo = customerOrderInfo.Items.get_Item(i) as ItemInfo;
            sumNetAmount += itemInfo.NetAmountExclTax;
            sumTaxAmount += itemInfo.TaxAmount;
        }

        sumOfCharges = this.getHeaderChargesAmount() + this.getLineChargesAmount();
        sumOfChargeTaxes = this.getHeaderChargeTaxAmount() + this.getLineChargeTaxAmount();

        AmountMST totalRoundedAmount = CurrencyExchangeHelper::price(sumNetAmount + sumTaxAmount + sumOfCharges + sumOfChargeTaxes);

        if (abs(grossAmount - totalRoundedAmount) > RetailTransactionValidationHelper::getMaximumRoundingDifferenceAllowed())
        {
            RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerHeaderNetAmountWithTaxError", grossAmount, sumNetAmount, sumTaxAmount, sumOfCharges, sumOfChargeTaxes);

            this.insertValidationErrorForTransaction(RetailTransactionValidationType::HeaderNetAmountWithTax, errorMessage);

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionAmountsForUnderOverPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the difference between gross amount and payment amount to maximum over or under payment configured in Accounts Receiveable parameters.
    /// </summary>
    /// <returns>True if the amounts are correct for the validation; otherwise, false.</returns>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerTransactionAmountsDescription"),
        RetailTransactionValidationNotApplicableTo(RetailTransactionType::AsyncCustomerOrder),
        RetailTransactionValidationNotApplicableTo(RetailTransactionType::AsyncCustomerQuote),
        RetailTransactionValidationNotApplicableTo(RetailTransactionType::PendingSalesOrder)
    ]
    public boolean validateTransactionAmountsForUnderOverPayment()
    {
        RetailGrossAmount grossAmount = customerOrderInfo.GrossAmount;
        RetailPaymentAmount paymentAmount = customerOrderInfo.PaymentAmount;
        CustParameters custParameter = CustParameters::findByCompany(curExt());

        if (abs(grossAmount - paymentAmount) > custParameter.MaxMSTOverUnder)
        {
            RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerTransactionAmountsError", grossAmount, paymentAmount, custParameter.MaxMSTOverUnder);

            RetailTransactionValidationErrorMessage testMsg = strFmt("@Ret5016");

            this.insertValidationErrorForTransaction(RetailTransactionValidationType::TransactionGrossAndPaymentAmount, errorMessage);

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates RetailTransactionTable discount with sum of discount for that transaction in RetailTransactionSalesTrans table
    /// </summary>
    /// <returns>True if RetailTransactionTable discount is equal to sum of discounts for that transaction in RetailTransactionSalesTrans table; otherwise, false.</returns>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerDiscountAmountDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    public boolean validateDiscountAmount()
    {
        RetailDiscAmount sumOfDiscountFromItems;
        RetailDiscAmount headerDiscount = customerOrderInfo.DiscountAmount;
 
        for (int i = 0; i < customerOrderInfo.Items.get_count(); i++)
        {
            ItemInfo itemInfo = customerOrderInfo.Items.get_Item(i);
            sumOfDiscountFromItems += CurrencyExchange::round(itemInfo.Discount * itemInfo.Quantity, customerOrderInfo.CurrencyCode);
        }

        if (abs(headerDiscount - sumOfDiscountFromItems) >  RetailTransactionValidationHelper::getMaximumRoundingDifferenceAllowed())
        {
            RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerDiscountAmountError", headerDiscount, sumOfDiscountFromItems);
            this.insertValidationErrorForTransaction(RetailTransactionValidationType::DiscountAmount, errorMessage);
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeaderPaymentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the payment amount from header matches the sum of payment transactions per tender type.
    /// </summary>
    /// <returns>True if payment amount from header is equal to sum of payments transactions per tender type; otherwise, false.</returns>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerHeaderPaymentDoesNotMatchPaymentTransDescription"),
        RetailTransactionValidationNotApplicableTo(RetailTransactionType::PendingSalesOrder)
    ]
    public boolean validateHeaderPaymentAmount()
    {
        RetailPaymentAmount paymentAmountInStoreCurrency = customerOrderInfo.PaymentAmount;
        CurrencyCode storeCurrency = customerOrderInfo.CurrencyCode;

        TransDate transactionBusinessDate = str2Date(customerOrderInfo.BusinessDateString, 321);

        // Calculated exchange amount with 2 different Rounding criteria.
        RetailPaymentAmount sumOfPaymentLineRoundAmount;
        RetailPaymentAmount sumOfPaymentLineRoundPrice;
        CurrencyExchange currencyExchange = CurrencyExchange::construct();

        for (int i = 0; i < customerOrderInfo.Payments.get_Count(); i++)
        {
            PaymentInfo paymentInfo = customerOrderInfo.Payments.get_Item(i) as PaymentInfo;

            if (paymentInfo.PaymentStatusValue != enum2int(RetailTenderLineStatus::Voided))
            {   
                if (storeCurrency != paymentInfo.Currency)
                {
                    // If currency is different than store currency, calculate the amount from transaction currency to store currency
                    // Then round it with 2 different rounding criteria.  
                    Amount exchangedAmount = CurrencyExchange::calculateAmount(paymentInfo.Amount, paymentInfo.ExchangeRate);
                    sumOfPaymentLineRoundAmount += CurrencyExchange::roundWithRuleType(exchangedAmount, storeCurrency, CurrencyRoundingRuleType::Amount);
                    sumOfPaymentLineRoundPrice += CurrencyExchange::roundWithRuleType(exchangedAmount, storeCurrency, CurrencyRoundingRuleType::Price);
                }
                else
                {
                    sumOfPaymentLineRoundAmount += paymentInfo.Amount;
                    sumOfPaymentLineRoundPrice += paymentInfo.Amount;
                }
            }
        }

        // 1.Compare with Price rounding criteria
        // 2.if failed, compare with Amount rounding criteria
        // if 1 and 2 fails, throw error
        // if 1 fails, 2 succeed, pass but log 2 amounts
        if (abs(paymentAmountInStoreCurrency - sumOfPaymentLineRoundPrice) > RetailTransactionValidationHelper::getMaximumRoundingDifferenceAllowed())
        {
            if (abs(paymentAmountInStoreCurrency - sumOfPaymentLineRoundAmount) > RetailTransactionValidationHelper::getMaximumRoundingDifferenceAllowed())
            {
                RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerHeaderPaymentDoesNotMatchPaymentTransError", paymentAmountInStoreCurrency, sumOfPaymentLineRoundAmount);
                this.insertValidationErrorForTransaction(RetailTransactionValidationType::HeaderPaymentAmount, errorMessage);
                return false;
            }
            eventSource.EventWriteValidationFailedWithOnlyPriceRounding();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderChargesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sum of charges for the transaction header.
    /// </summary>
    /// <returns>Amount that represents the sum of charges for the transaction header.</returns>
    private AmountMST getHeaderChargesAmount()
    {
        AmountMST sumOfHeaderCharges;

        for (int i = 0; i < customerOrderInfo.Charges.get_Count(); i++)
        {
            ChargeInfo chargeInfo = customerOrderInfo.Charges.get_Item(i) as ChargeInfo;

            sumOfHeaderCharges += chargeInfo.Amount;

            // The charge CalculatedAmount field is never modified to account for taxes. If taxes are exclusive CalculatedAmount is the 'charge amount' and we get the 'total paid' by adding exclusive taxes.
            // If taxes are inclusive, the CalculatedAmount is the 'total paid' so we have to subtract inclusive taxes to get the 'charge amount'.
            TaxInfoCollection taxInfoCollection = chargeInfo.Taxes as TaxInfoCollection;

            for (int j = 0; j < taxInfoCollection.Count; j++)
            {
                TaxInfo taxInfo = taxInfoCollection.get_Item(j) as TaxInfo;

                if (taxInfo.IsIncludedInPrice && !taxInfo.IsExempt)
                {
                    sumOfHeaderCharges -= taxInfo.Amount;
                }
            }
        }

        return sumOfHeaderCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sum of charges for the transaction lines.
    /// </summary>
    /// <returns>Amount that represents the sum of charges for the transaction lines.</returns>
    private AmountMST getLineChargesAmount()
    {
        AmountMST sumOfLinesCharges;

        for (int i = 0; i < customerOrderInfo.Items.Count; i++)
        {
            ItemInfo itemInfo = customerOrderInfo.Items.get_Item(i) as ItemInfo;

            for (int j = 0; j < itemInfo.Charges.get_Count(); j++)
            {
                ChargeInfo chargeInfo = itemInfo.Charges.get_Item(j) as ChargeInfo;

                sumOfLinesCharges += chargeInfo.Amount;

                // The charge CalculatedAmount field is never modified to account for taxes. If taxes are exclusive CalculatedAmount is the 'charge amount' and we get the 'total paid' by adding exclusive taxes.
                // If taxes are inclusive, the CalculatedAmount is the 'total paid' so we have to subtract inclusive taxes to get the 'charge amount'.
                TaxInfoCollection taxInfoCollection = chargeInfo.Taxes as TaxInfoCollection;

                for (int k = 0; k < taxInfoCollection.Count; k++)
                {
                    TaxInfo taxInfo = taxInfoCollection.get_Item(k) as TaxInfo;

                    if (taxInfo.IsIncludedInPrice && !taxInfo.IsExempt)
                    {
                        sumOfLinesCharges -= taxInfo.Amount;
                    }
                }
            }
        }

        return sumOfLinesCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderChargeTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sum of charge taxes for the transaction header.
    /// </summary>
    /// <returns>Amount that represents the sum of charge taxes for the transaction header.</returns>
    private Amount getHeaderChargeTaxAmount()
    {
        Amount sumOfHeaderChargeTaxes = 0;

        // Sum all charge taxes for all charges on the header
        for (int i = 0; i < customerOrderInfo.Charges.get_Count(); i++)
        {
            TaxInfoCollection taxInfoCollection = customerOrderInfo.Charges.get_Item(i).Taxes as TaxInfoCollection;

            for (int j = 0; j < taxInfoCollection.Count; j++)
            {
                TaxInfo taxInfo = taxInfoCollection.get_Item(j) as TaxInfo;

                if (!taxInfo.IsExempt)
                {
                    sumOfHeaderChargeTaxes += taxInfo.Amount;
                }
            }
        }

        return sumOfHeaderChargeTaxes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sum of charge taxes for the transaction lines.
    /// </summary>
    /// <returns>Amount that represents the sum of charge taxes for the transaction lines.</returns>
    private Amount getLineChargeTaxAmount()
    {
        Amount sumOfLineChargeTaxes = 0;

        // Sum all charge taxes for all charges on all lines
        for (int i = 0; i < customerOrderInfo.Items.get_Count(); i++)
        {
            ChargeInfoCollection chargeInfoCollection = customerOrderInfo.Items.get_Item(i).Charges as ChargeInfoCollection;

            for (int j = 0; j < chargeInfoCollection.get_Count(); j++)
            {
                TaxInfoCollection taxInfoCollection = chargeInfoCollection.get_item(j).Taxes as TaxInfoCollection;

                for (int k = 0; k < taxInfoCollection.get_Count(); k++)
                {
                    TaxInfo taxInfo = taxInfoCollection.get_Item(k) as TaxInfo;

                    if (!taxInfo.IsExempt)
                    {
                        sumOfLineChargeTaxes += taxInfo.Amount;
                    }
                }
            }
        }

        return sumOfLineChargeTaxes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTrasactionBusinessDatesFiscalPeriodIsOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the fiscal period and inventory is open for the transaction business date.
    /// </summary>
    /// <returns> True if fiscal period is open and inventory is open; otherwise; false.</returns>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerFiscalPeriodAndInventoryPeriodDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    public boolean validateTrasactionBusinessDatesFiscalPeriodIsOpen()
    {
        FiscalCalendarPeriod fiscalCalendarPeriod;
        RetailTransactionValidationErrorMessage errorMessage;

        TransDate businessDate = str2Date(customerOrderInfo.BusinessDateString, 321);
        RecId calendarRecId = Ledger::fiscalCalendar(CompanyInfo::current());
        fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(calendarRecId, businessDate);

        if (!fiscalCalendarPeriod)
        {
            errorMessage = strFmt("@Retail:ConsistencyCheckerFiscalPeriodNotFoundError", businessDate);
            this.insertValidationErrorForTransaction(RetailTransactionValidationType::ClosedFiscalPeriod, errorMessage);
            return false;
        }

        if (fiscalCalendarPeriod.currentLedgerPeriodStatus() != FiscalPeriodStatus::Open)
        {
            errorMessage = strFmt("@Retail:ConsistencyCheckerFiscalPeriodNotOpenError", businessDate);
            this.insertValidationErrorForTransaction(RetailTransactionValidationType::ClosedFiscalPeriod, errorMessage);
            return false;
        }

        // When fiscal period is open check required modules are open.
        boolean custModule = LedgerFiscalCalendar::checkModuleIsOpen(SysModule::Cust, businessDate, fiscalCalendarPeriod);
        boolean salesModule = LedgerFiscalCalendar::checkModuleIsOpen(SysModule::Sales, businessDate, fiscalCalendarPeriod);
        boolean retailModule = LedgerFiscalCalendar::checkModuleIsOpen(SysModule::Retail, businessDate, fiscalCalendarPeriod);

        if (!custModule || !salesModule || !retailModule)
        {
            errorMessage = strFmt("@Retail:ConsistencyCheckerFiscalPeriodNotOpenForModulesError", custModule, salesModule, retailModule, businessDate);
            this.insertValidationErrorForTransaction(RetailTransactionValidationType::ClosedFiscalPeriod, errorMessage);
            return false;
        }
        
        // Check inventory is open or not.
        if (!InventClosing::checkOpen(businessDate))
        {
            errorMessage = strFmt("@Retail:ConsistencyCheckerInventoryIsNotOpenError", businessDate);
            this.insertValidationErrorForTransaction(RetailTransactionValidationType::ClosedFiscalPeriod, errorMessage);
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAmountRoundingAsPerCurrencyRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the transaction amounts were rounded as per currency rule.
    /// </summary>
    /// <returns>True if the rounding was as per currency rounding rule; false, otherwise.</returns>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerCurrencyRoundingValidationDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    public boolean validateAmountRoundingAsPerCurrencyRule()
    {
        List notRoundedFields = new List(Types::String);
        
        if (!this.validateAmountIsRoundedAsPerCurrencyRule(customerOrderInfo, customerOrderInfo.GrossAmount))
        {
            notRoundedFields.addEnd(fieldPName(RetailTransactionTable, grossAmount));
        }
        
        if (!this.validateAmountIsRoundedAsPerCurrencyRule(customerOrderInfo, customerOrderInfo.PaymentAmount))
        {
            notRoundedFields.addEnd(fieldPName(RetailTransactionTable, paymentAmount));
        }

        if (!this.validateAmountIsRoundedAsPerCurrencyRule(customerOrderInfo, customerOrderInfo.NetAmount))
        {
            notRoundedFields.addEnd(fieldPName(RetailTransactionTable, netAmount));
        }

        if (!this.validateAmountIsRoundedAsPerCurrencyRule(customerOrderInfo, customerOrderInfo.DiscountAmount))
        {
            notRoundedFields.addEnd(fieldPName(RetailTransactionTable, discAmount));
        }

        if (notRoundedFields.elements() > 0)
        {
            ListEnumerator fieldsListEnumerator = notRoundedFields.getEnumerator();
            RetailTransactionValidationErrorMessage errorMessage = "@Retail:ConsistencyCheckerCurrencyRoundingValidationError";
            fieldsListEnumerator.moveNext();
            errorMessage = errorMessage + fieldsListEnumerator.current();

            while (fieldsListEnumerator.moveNext())
            {
                errorMessage = errorMessage + ", " + fieldsListEnumerator.current();
            }
            this.insertValidationErrorForTransaction(RetailTransactionValidationType::HeaderAmountsRoundedToCurrencyRule, errorMessage);
            return false;
        }
  
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateChargeLinesTaxExemptAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the original amount of the header charges equals the sum of the new charge amounts and the exempted tax amount.
    /// </summary>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerTaxExemptAmountsForPriceInclusiveChargesValidationDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateChargeLinesTaxExemptAmounts()
    {
        if (customerOrderInfo.IsTaxExemptedForPriceInclusive)
        {
            ChargeInfoCollection charges = customerOrderInfo.Charges;

            for (int i = 0; i < charges.get_Count(); i++)
            {
                ChargeInfo chargeInfo = charges.get_Item(i) as ChargeInfo;

                Amount originalAmount = chargeInfo.TaxExemptPriceInclusiveOriginalAmount;
                Amount amount = chargeInfo.Amount;
                Amount exemptTaxAmount = chargeInfo.TaxExemptPriceInclusiveReductionAmount;

                if (abs(originalAmount - (amount + exemptTaxAmount)) > RetailTransactionValidationHelper::getMaximumRoundingDifferenceAllowed())
                {
                    RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerTaxExemptAmountsForPriceInclusiveChargesError", amount, exemptTaxAmount, originalAmount);
                    this.insertValidationErrorForTransaction(RetailTransactionValidationType::TaxExemptForPriceInclusive, errorMessage);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionIsNotEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the transaction contains at least one line that is not voided.
    /// </summary>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Retail:ConsistencyCheckerTransactionEmptyOrOnlyContainsVoidedLinesDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateTransactionIsNotEmpty()
    {
        if (customerOrderInfo.Items.Count == 0)
        {
            this.insertValidationErrorForTransaction(RetailTransactionValidationType::EmptyTransaction, "@Retail:ConsistencyCheckerTransactionEmptyOrOnlyContainsVoidedLinesError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAmountIsRoundedAsPerCurrencyRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that an amount from <c>CustomerOrderInfo</c> is rounded as per currency rule.
    /// </summary>
    /// <param name = "_customerOrderInfo">Customer order info.</param>
    /// <param name = "_amountToValidate">The amount.</param>
    /// <returns> Returns false if amount is not rounded as per currency rule; otherwise, true.</returns>
    private boolean validateAmountIsRoundedAsPerCurrencyRule(CustomerOrderInfo _customerOrderInfo, real _amountToValidate)
    {
        if (_amountToValidate != CurrencyExchange::roundWithRuleType(_amountToValidate, _customerOrderInfo.CurrencyCode, CurrencyRoundingRuleType::Price))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>