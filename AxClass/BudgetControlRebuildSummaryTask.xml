<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlRebuildSummaryTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data maintenance task to rebuild BudgetSourceTrackingSummary.
/// </summary>
internal class BudgetControlRebuildSummaryTask implements IDataMaintenanceTask
{
    private const BudgetControlSummaryUpdateType DeleteType = BudgetControlSummaryUpdateType::Delete;
    private const BudgetControlSummaryUpdateType UpdateType = BudgetControlSummaryUpdateType::Update;
    private const BudgetControlSummaryUpdateType InsertType = BudgetControlSummaryUpdateType::Insert;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceTaskResult run()
    {
        System.Exception ex;

        DataMaintenanceTaskResult taskResult = DataMaintenanceTaskResult::construct();

        BudgetControlInstrumentationLogger logger = BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlRebuildSummaryTask));

        ttsbegin;

        try
        {
            BudgetControlRebuildSummaryTmp budgetControlRebuildSummaryTmp = this.populateTrackingSummaryDetailsToRebuild(logger);
            BudgetSourceTrackingSummaryUpdate::rebuildSummaryBalancesWithRebuildSummaryTmp(budgetControlRebuildSummaryTmp, logger);
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw Exception::Error;
            }
        }
        catch(ex)
        {
            throw ex;
        }

        ttscommit;
       
        return taskResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@Budget:BudgetControlRebuildSummaryTaskCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTrackingSummaryDetailsToRebuild</Name>
				<Source><![CDATA[
    private BudgetControlRebuildSummaryTmp populateTrackingSummaryDetailsToRebuild(BudgetControlInstrumentationLogger _logger = null)
    {
        BudgetControlRebuildSummaryTmp budgetControlRebuildSummaryTmp;

        // Set a range of tracking date between the beginning of last year and the end of this year
        // as more than two years old budget data would not be changed
        // and by setting a range of limited period, a query performance in actual processing is better.
        int currentYear = year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        TransDate fromDate = mkDate(1, 1, currentYear - 1);
        TransDate toDate = mkDate(31, 12, currentYear);

        using (var activityContext = _logger.dataMaintenance().populateTrackingSummaryDetailsToRebuild())
        {
            this.populateSummaryDetailsToDelete(budgetControlRebuildSummaryTmp, fromDate, toDate);
            this.populateSummaryDetailsToUpdate(budgetControlRebuildSummaryTmp, fromDate, toDate);
            this.populateSummaryDetailsToInsert(budgetControlRebuildSummaryTmp, fromDate, toDate);
        }

        return budgetControlRebuildSummaryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSummaryDetailsToDelete</Name>
				<Source><![CDATA[
    private void populateSummaryDetailsToDelete(BudgetControlRebuildSummaryTmp _budgetControlRebuildSummaryTmp, TransDate _fromDate, TransDate _toDate)
    {
        BudgetControlTrackingSummaryRebuildCheckView budgetControlTrackingSummaryRebuildCheckView;

        insert_recordset _budgetControlRebuildSummaryTmp (TrackingSummaryRecId, SummaryUpdateType)
        select TrackingSummaryRecId, DeleteType
            from budgetControlTrackingSummaryRebuildCheckView
                where budgetControlTrackingSummaryRebuildCheckView.VarianceAmountSum != 0
                    && budgetControlTrackingSummaryRebuildCheckView.DetailSummaryViewDimension == 0
                    && budgetControlTrackingSummaryRebuildCheckView.TrackingDate >= _fromDate
                    && budgetControlTrackingSummaryRebuildCheckView.TrackingDate <= _toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSummaryDetailsToUpdate</Name>
				<Source><![CDATA[
    private void populateSummaryDetailsToUpdate(BudgetControlRebuildSummaryTmp _budgetControlRebuildSummaryTmp, TransDate _fromDate, TransDate _toDate)
    {
        BudgetControlTrackingSummaryRebuildCheckView budgetControlTrackingSummaryRebuildCheckView;

        insert_recordset _budgetControlRebuildSummaryTmp (TrackingSummaryRecId, AccountingCurrencyAmount, SummaryUpdateType)
        select TrackingSummaryRecId, DetailSummaryViewAmount, UpdateType
            from budgetControlTrackingSummaryRebuildCheckView
                where budgetControlTrackingSummaryRebuildCheckView.VarianceAmountSum != 0
                    && budgetControlTrackingSummaryRebuildCheckView.DetailSummaryViewDimension != 0
                    && budgetControlTrackingSummaryRebuildCheckView.TrackingDate >= _fromDate
                    && budgetControlTrackingSummaryRebuildCheckView.TrackingDate <= _toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSummaryDetailsToInsert</Name>
				<Source><![CDATA[
    private void populateSummaryDetailsToInsert(BudgetControlRebuildSummaryTmp _budgetControlRebuildSummaryTmp, TransDate _fromDate, TransDate _toDate)
    {
        BudgetControlDetailSummaryRebuildCheckView budgetControlDetailSummaryRebuildCheckView;

        insert_recordset _budgetControlRebuildSummaryTmp (
            AccountingCurrencyAmount,
            BudgetControlLedgerDimension,
            BudgetModelDataAreaId,
            BudgetModelId,
            BudgetModelSubModelId,
            BudgetModelType,
            Category,
            IntegratorType,
            IsCarryForward,
            IsDraft,
            IsSimulation,
            PrimaryLedger,
            TrackingDate,
            TrackingSummaryRecId,
            SummaryUpdateType)
        select AccountingCurrencyAmount,
            BudgetControlLedgerDimension,
            BudgetModelDataAreaId,
            BudgetModelId,
            BudgetModelSubModelId,
            BudgetModelType,
            Category,
            IntegratorType,
            IsCarryForward,
            IsDraft,
            IsSimulation,
            PrimaryLedger,
            TrackingDate,
            TrackingSummaryRecId,
            InsertType
            from budgetControlDetailSummaryRebuildCheckView
                where budgetControlDetailSummaryRebuildCheckView.TrackingSummaryRecId == 0
                    && budgetControlDetailSummaryRebuildCheckView.AccountingCurrencyAmount != 0
                    && budgetControlDetailSummaryRebuildCheckView.TrackingDate >= _fromDate
                    && budgetControlDetailSummaryRebuildCheckView.TrackingDate <= _toDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>