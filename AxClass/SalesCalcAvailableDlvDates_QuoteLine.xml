<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcAvailableDlvDates_QuoteLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesCalcAvailableDlvDates_QuoteLine extends SalesCalcAvailableDlvDates
{
    SalesQuotationLine      salesQuotationLine;
    SalesQuotationLine      salesQuotationLineOrig;
    SalesQuotationLine      salesQuotationLineCaller;
    SalesQuotationLineType  salesQuotationLineType;
    SalesQuotationTable     salesQuotationTable;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        salesQuotationLine,
        salesQuotationLineOrig,
        salesQuotationLineCaller,
        salesQuotationTable
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to perform delivery date control on the confirmed dates.
    /// </summary>
    /// <returns>
    /// true if the delivery date control on confirmed dates must be performed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method always returns false in sub-classes that are related to tables that do not contain
    /// confirmed date fields. For example, the <c>TmpSalesTable</c> and <c>TmpSalesLine</c> tables.
    /// </remarks>
    protected boolean checkConfirmedDates()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateControlActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the delivery date control is active.
    /// </summary>
    /// <returns>
    /// true if the delivery date control is active; otherwise, false.
    /// </returns>
    protected boolean deliveryDateControlActive()
    {
        boolean ok = super();

        if (ok && salesQuotationLine.SalesQty < 0)
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllUnitConversionInfoRequired</Name>
				<Source><![CDATA[
    protected boolean validateAllUnitConversionInfoRequired()
    {
        return EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(salesQuotationLine.ItemId, salesQuotationLine.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateCaller</Name>
				<Source><![CDATA[
    protected boolean doUpdateCaller(boolean _disableDlvDateControl = false)
    {
        if (_disableDlvDateControl)
        {
            if (salesQuotationLineOrig.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                return true;
            }
        }
        else
        {
            if (deliveryDateControlMap.DlvMode                 != salesQuotationLineOrig.DlvMode
            ||  deliveryDateControlMap.InventDimId             != salesQuotationLineOrig.InventDimId
            ||  deliveryDateControlMap.ShippingDateRequested   != salesQuotationLineOrig.ShippingDateRequested
            ||  deliveryDateControlMap.ReceiptDateRequested    != salesQuotationLineOrig.ReceiptDateRequested)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether changes have been made to fields that influence the delivery date control.
    /// </summary>
    /// <returns>
    /// true if changes have been made to fields that influence the delivery date control; otherwise, false.
    /// </returns>
    protected boolean doValidateWrite()
    {
        if (salesQuotationLine.DlvMode                 != salesQuotationLineOrig.DlvMode
        ||  salesQuotationLine.InventDimId             != salesQuotationLineOrig.InventDimId
        ||  salesQuotationLine.SalesQty                != salesQuotationLineOrig.SalesQty
        ||  salesQuotationLine.DeliveryPostalAddress   != salesQuotationLineOrig.DeliveryPostalAddress
        ||  salesQuotationLine.DeliveryDateControlType != salesQuotationLineOrig.DeliveryDateControlType)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId2DlvDateType</Name>
				<Source><![CDATA[
    protected SalesDlvDateType fieldId2DlvDateType(FieldId _fieldId)
    {
        SalesDlvDateType    dlvDateType;

        switch (_fieldId)
        {
            case fieldNum(SalesQuotationLine,ReceiptDateRequested) :
                dlvDateType = SalesDlvDateType::RequestedReceipt;
                break;

            case fieldNum(SalesQuotationLine,ShippingDateRequested) :
                dlvDateType = SalesDlvDateType::RequestedShipping;
                break;

            default :
                dlvDateType = SalesDlvDateType::None;
                break;
        }

        return dlvDateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    protected ItemId getItemId()
    {
        return salesQuotationLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the dimensions on the <c>InventDim</c> table.
    /// </summary>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that contains fields that have been modified.
    /// </param>
    /// <remarks>
    /// The key <c>InventDimId</c> field on the parent table that links to the <c>InventDim</c> record has
    /// not been updated at the time when the delivery date control occurs. The method is used to get the
    /// new value of the dimension field from the related <c>InventDim</c> table.
    /// </remarks>
    protected void inventDimIdUpdate(InventDim _inventDim)
    {
        if (_inventDim)
        {
            salesQuotationLine.setInventDimIdFromInventDim(_inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>leadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the sales lead time for the current instance of a quotation line.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimensions that are used to calculate the sales lead time.
    /// </param>
    /// <returns>
    ///    The lead time in days.
    /// </returns>
    /// <remarks>
    ///    For category based lines lead time is defaulted from sales parameters.
    /// </remarks>
    public LeadTime leadTime(InventDim _inventDim)
    {
        PriceDisc_Price     localPriceDisc;
        PriceGroupId        priceGroupId;
        SalesQuotationLine  orderLine;
        SalesQuotationLine  committedLine;  // line committed to SalesQuotationLine table if called on temporary table buffer;
        LeadTime            leadTime;

        if (salesQuotationLineCaller.isTmp())
        {
            orderLine = SalesQuotationLine::findInventTransId(salesQuotationLine.InventTransId);
        }
        else
        {
            orderLine = salesQuotationLine;
        }

        if (orderLine.isCategoryBased())
        {
            leadTime = SalesParameters::find().LeadTimeSalesDefault;
        }
        else
        {
            if (orderLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
            {
                orderLine       = SalesQuotationDeliverySchedule::findOrderLineForDeliveryLine(committedLine.InventTransId);
                localPriceDisc  = orderLine.salesPurchLineInterface().priceDisc_PriceCache(_inventDim, true);
                priceGroupId    = orderLine.priceGroupId();
            }
            else
            {
                localPriceDisc  = orderLine.salesPurchLineInterface().priceDisc_PriceCache(_inventDim, true);
                priceGroupId    = salesQuotationLine.priceGroupId();
            }

            if (!this.parmPriceDisc()                                   ||
                !this.parmPriceDisc().isEqual(localPriceDisc)           ||
                this.parmPriceDisc().parmPriceGroupId() != priceGroupId)
            {
                localPriceDisc.price();
                this.parmPriceDisc(localPriceDisc);
            }

            leadTime = this.parmPriceDisc().deliveryDays();
        }

        return leadTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the current <c>SalesCalcAvailableDlvDates_QuoteLine</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current <c>SalesCalcAvailableDlvDates_QuoteLine</c> class.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId parmInventLocationId(InventLocationId  _inventLocationId = InventDim::find(salesQuotationLine.InventDimId).InventLocationId)
    {
        if (!prmisDefault(_inventLocationId))
        {
            InventDim inventDim = InventDim::find(salesQuotationLine.InventDimId);
            inventDim.InventLocationId = _inventLocationId;
            salesQuotationLine.setInventDimIdFromInventDim(inventDim);
            deliveryDateControlMap.InventDimId = salesQuotationLine.InventDimId;
        }

        return _inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    protected InventSiteId parmInventSiteId(InventSiteId  _inventSiteId = InventDim::find(salesQuotationLine.InventDimId).InventSiteId)
    {
        if (!prmisDefault(_inventSiteId))
        {
            InventDim inventDim = InventDim::find(salesQuotationLine.InventDimId);
            inventDim.InventSiteId = _inventSiteId;
            salesQuotationLine.setInventDimIdFromInventDim(inventDim);
            deliveryDateControlMap.InventDimId = salesQuotationLine.InventDimId;
        }

        return _inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQuotationLine</Name>
				<Source><![CDATA[
    public SalesQuotationLine parmSalesQuotationLine(SalesQuotationLine _salesQuotationLine = salesQuotationLine)
    {
        deliveryDateControlMap          = _salesQuotationLine.data();
        salesQuotationLine              = _salesQuotationLine.data();
        salesQuotationTable             = salesQuotationLine.salesQuotationTable().data();
        salesQuotationLineOrig          = _salesQuotationLine.orig();
        salesQuotationLineCaller        = _salesQuotationLine;

        if (!isConfigurationkeyEnabled(configurationKeyNum(TradeMultiShipTo)))
        {
            deliveryDateControlMap.PostalAddress    = salesQuotationTable.DeliveryPostalAddress;
        }

        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the receipt calendar ID for the customer.
    /// </summary>
    /// <returns>
    /// The receipt calendar ID for the customer.
    /// </returns>
    protected CalendarId receiptCalendarId()
    {
        if (receiptCalendarId)
        {
            return receiptCalendarId;
        }

        receiptCalendarId = LogisticsLocationExt::find(salesQuotationLine.deliveryLocation()).SalesCalendarId;

        if (!receiptCalendarId && salesQuotationLine.AddressRefTableId && salesQuotationLine.AddressRefRecId )
        {
            switch (salesQuotationLine.AddressRefTableId)
            {
                case tableNum(LogisticsLocation) :
                    receiptCalendarId = LogisticsLocationExt::find(salesQuotationLine.AddressRefRecId).SalesCalendarId;
                    break;
                case tableNum(CustTable) :
                    receiptCalendarId = (select custTable where custTable.TableId == salesQuotationLine.AddressRefTableId && custTable.RecId == salesQuotationLine.AddressRefRecId).SalesCalendarId;
                    break;
                default :
                    break;
            }
        }

        if (!receiptCalendarId)
        {
            receiptCalendarId = LogisticsLocationExt::find(salesQuotationTable.deliveryLocation()).SalesCalendarId;
        }

        if (!receiptCalendarId && salesQuotationTable.AddressRefTableId && salesQuotationTable.AddressRefRecId )
        {
            switch (salesQuotationTable.AddressRefTableId)
            {
                case tableNum(LogisticsLocation) :
                    receiptCalendarId = LogisticsLocationExt::find(salesQuotationTable.AddressRefRecId).SalesCalendarId;
                    break;

                case tableNum(CustTable) :
                    receiptCalendarId = (select custTable where custTable.TableId == salesQuotationTable.AddressRefTableId && custTable.RecId == salesQuotationTable.AddressRefRecId).SalesCalendarId;
                    break;
                default :
                    break;
            }
        }

        if (!receiptCalendarId)
        {
            receiptCalendarId = CustTable::find(salesQuotationLine.CustAccount).SalesCalendarId;
        }

        return receiptCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLeadTimeBasedOnDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales lead time based on delivery date control type and sets that the sales lead time has been found.
    /// </summary>
    protected void initializeSalesLeadTimeBasedOnDeliveryDateControlType()
    {
        InventDim inventDim = InventDim::find(this.parmInventDimId());

        switch (salesQuotationLine.DeliveryDateControlType)
        {
            case SalesDeliveryDateControlType::ATPPlusIssueMargin:
                MarginIssue marginIssue = this.marginIssue(salesQuotationLine.ItemId, inventDim);
            //
            // No break here.
            // The process of calculation ATP and "ATP + Issue margin" is
            // typically the same. The only difference is in adding an extra lead time in a latter case.
            //
            case SalesDeliveryDateControlType::ATP:
                    SalesATPCalculation salesATPCalculation = SalesATPCalculation::newSalesCalculation(
                        salesQuotationLine.ItemId,
                        inventDim.InventDimId,
                        salesQuotationLine.CustAccount);

                // marginIssue will be > 0 only for "ATP + Issue margin" delivery date control method.
                salesATPCalculation.parmMarginIssue(marginIssue);
                salesATPCalculation.parmIssueMarginCalendarId(this.reqSetupDim().reqCalendarId());

                salesLeadTime = salesATPCalculation.atpLeadTime(salesQuotationLine.QtyOrdered,
                                                                    this.effectiveOrderDate(),
                                                                    salesQuotationLine.InventTransId);
                salesLeadTimeBasedOnCalendarSetup = salesLeadTime;
                break;
            case SalesDeliveryDateControlType::SalesLeadTime:
            case SalesDeliveryDateControlType::None:
                // For SalesDeliveryDateControlType::None lead time should also be calculated.
                salesLeadTime = this.leadTime(inventDim);
                salesLeadTimeBasedOnCalendarSetup  = this.adjustLeadTimeForWorkingDays(salesLeadTime);
                break;
        }

        salesLeadTimeFound = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="_packedClass" /> parameter to the current instance of the
    ///    <c>SalesCalcAvailableDlvDates_QuoteLine</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container that is used to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if the deserialization was successful; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        container   packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = _packedClass;

                if (packedSuper)
                    return super(packedSuper);
            break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaller</Name>
				<Source><![CDATA[
    protected void updateCaller(Common  _record,
                                boolean _disableDlvDateControl = false)
    {
        super(_record,_disableDlvDateControl);

        if (this.parmCheckOnly())
            return;

        if (_record.TableId != tableNum(SalesQuotationLine))
            throw error("@SYS18626");

        SalesQuotationLine salesQuotationLineCallerLocal = _record;

        if (this.parmCancelModifiedField())
        {
            if (salesQuotationLineCallerLocal.RecId)
            {
                salesQuotationLineCallerLocal.ShippingDateRequested   = salesQuotationLineOrig.ShippingDateRequested;
                salesQuotationLineCallerLocal.ReceiptDateRequested    = salesQuotationLineOrig.ReceiptDateRequested;
                salesQuotationLineCallerLocal.DeliveryDateControlType = salesQuotationLineOrig.DeliveryDateControlType;
            }
            return;
        }

        if (_disableDlvDateControl)
        {
            salesQuotationLineCallerLocal.DeliveryDateControlType = SalesDeliveryDateControlType::None;
        }
        else
        {
            salesQuotationLineCallerLocal.DlvMode               = deliveryDateControlMap.DlvMode;
            salesQuotationLineCallerLocal.setInventDimId(deliveryDateControlMap.InventDimId);
            salesQuotationLineCallerLocal.ShippingDateRequested = deliveryDateControlMap.ShippingDateRequested;

            if (isConfigurationkeyEnabled(configurationKeyNum(SalesDeliveryDateControl)))
            {
                salesQuotationLineCallerLocal.ReceiptDateRequested  = deliveryDateControlMap.ReceiptDateRequested;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLeadTime</Name>
				<Source><![CDATA[
    public LeadTime salesLeadTime(CalendarDays _basedOnCalendarSetup = NoYes::Yes)
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static SalesCalcAvailableDlvDates_QuoteLine construct()
    {
        return new SalesCalcAvailableDlvDates_QuoteLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesQuotationLine</Name>
				<Source><![CDATA[
    public static SalesCalcAvailableDlvDates_QuoteLine newSalesQuotationLine(SalesQuotationLine _salesQuotationLine,
                                                                                    FieldId            _fieldId = 0,
                                                                                    InventDim          _inventDim = null)
    {
        InventDim                            localInventDim = InventDim::find(_salesQuotationLine.InventDimId);
        SalesCalcAvailableDlvDates_QuoteLine salesCalc = SalesCalcAvailableDlvDates_QuoteLine::construct();
        InventDim                            inventDim = _inventDim ? _inventDim : localInventDim;

        SalesDlvDateType masterDateType = salesCalc.fieldId2DlvDateType(_fieldId);
        salesCalc.parmSalesQuotationLine(_salesQuotationLine);
        salesCalc.parmDlvModeIdSelected(_salesQuotationLine.DlvMode);

        if (_inventDim)
        {
            salesCalc.inventDimIdUpdate(_inventDim);
            salesCalc.parmInventLocationIdSelected(salesCalc.parmInventLocationId());
            salesCalc.parmInventSiteIdSelected(salesCalc.parmInventSiteId());
        }
        else
        {
            salesCalc.parmInventLocationIdSelected(inventDim.InventLocationId);
            salesCalc.parmInventSiteIdSelected(inventDim.InventSiteId);
        }

        localInventDim.InventLocationId = salesCalc.parmInventLocationIdSelected();
        localInventDim.InventSiteId     = salesCalc.parmInventSiteIdSelected();
        localInventDim = InventDim::findOrCreate(localInventDim);

        salesCalc.parmInventLocationTransportShipping(inventDim.InventLocationId);
        salesCalc.parmOrderEntryDeadlineGroupId(CustTable::find(_salesQuotationLine.CustAccount).OrderEntryDeadlineGroupId);
        salesCalc.parmRecalculateShippingDate(false);
        salesCalc.parmInventDimId(localInventDim.InventDimId);
        salesCalc.initReqSetupDim(_salesQuotationLine.ItemId, localInventDim, _salesQuotationLine.DeliveryDateControlType);
        salesCalc.initMaster(masterDateType);

        return salesCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>