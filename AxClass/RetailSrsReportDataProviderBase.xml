<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSrsReportDataProviderBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailSrsReportDataProviderBase</c> is the base class for Retail report data provider classes.
/// </summary>
public abstract class RetailSrsReportDataProviderBase extends SRSReportDataProviderPreProcessTempDB
{
    RetailReportSessionIdentifier sessionId = guid2Str(newGuid());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InsertChannelsToTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method inserts the channels the <c>RetailReportChannelTable</c> table
    /// for the passed hierarchy relationship id.
    /// </summary>
    /// <param name = "hierarchyRelationshipId">The hierarchy relationship id for the selected entity.</param>
    protected void InsertChannelsToTmpTable(str hierarchyRelationshipId)
    {
        RetailChannelTable channel;
        OMExplodedOrganizationSecurityGraph graph;
        OMHierarchyRelationship hierarchyRelationship;
        RetailReportChannelTable reportChannel;

        while select RecId, count(OMOperatingUnitID) from channel
            join graph
            join hierarchyRelationship
            group by channel.RecId
            where hierarchyRelationship.RecId == str2Int64(hierarchyRelationshipId)
                && channel.OMOperatingUnitID == graph.Organization
                && graph.OMHierarchyType == hierarchyRelationship.HierarchyType
                && hierarchyRelationship.ChildOrganization == graph.AncestorOrganization

        {
            reportChannel.RetailChannel = channel.RecId;
            reportChannel.SessionId = sessionId;
            reportChannel.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>JoinChannelFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method joins a join to the <c>RetailReportChannelTable</c> table
    /// </summary>
    /// <param name = "qds">The datasource that must be joined.</param>
    /// <param name = "channelIdFieldNum">Field number of the channel id field int the data source.</param>
    protected void JoinChannelFilter(QueryBuildDataSource qds, int channelIdFieldNum )
    {
        QueryBuildDataSource channelDS = qds.addDataSource(tableNum(RetailReportChannelTable));
        channelDS.fetchMode(QueryFetchMode::One2One);
        channelDS.joinMode(JoinMode::InnerJoin);
        channelDS.relations(false);
        channelDS.addRange(fieldNum(RetailReportChannelTable, SessionId)).value(sessionId);
        channelDS.addLink(channelIdFieldNum, fieldNum(RetailReportChannelTable, RetailChannel));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ClearChannelFilterTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method deleted the channel ids from <c>RetailReportChannelTable</c> created for the current report session.
    /// </summary>
    protected void ClearChannelFilterTable()
    {
        RetailReportChannelTable reportChannel;
        delete_from reportChannel
            where reportChannel.SessionId == sessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDateRangeForSpecifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates data range for the specified field.
    /// </summary>
    /// <param name = "_fromDate">From date of new date range.</param>
    /// <param name = "_toDate">To date of new date range.</param>
    /// <param name = "_targetFieldName">Field name of field used in the date range.</param>
    /// <returns>Returns a formatted date range expression.</returns>
    protected str buildDateRangeForSpecifiedField(date _fromDate, date _toDate, FieldName _targetFieldName)
    {
        return strFmt('((%1 >= %2) && (%1 <= %3))', _targetFieldName, date2StrXpp(_fromDate), date2StrXpp(_toDate));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>