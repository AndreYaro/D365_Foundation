<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttSetup_WrkCtr</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttSetup_WrkCtr extends GanttSetup
{
    NoYes                   mustReloadData;

    // General
    NoYes                   showAllLinks;
    NoYes                   showAllLinksChanged;

    NoYes                   showLateJobs;
    NoYes                   showLateJobsChanged;

    // Production
    NoYes                   loadProdJobData;

    NoYes                   showProdJobTypeQueueBefore;
    NoYes                   showProdJobTypeSetup;
    NoYes                   showProdJobTypeProcess;
    NoYes                   showProdJobTypeOverlap;
    NoYes                   showProdJobTypeTransport;
    NoYes                   showProdJobTypeQueueAfter;

    NoYes                   showFinishedProdJobs;
    NoYes                   showProdJobsNoCapRes;

    NoYes                   loadEntireProdOrder;

    NoYes                   showProdJobCompletion;
    NoYes                   showProdJobCompletionChanged;
    NoYes                   showProdJobMaterialDate;

    // Planned production
    NoYes                   loadPlannedProdJobData;

    NoYes                   showPlannedProdJobTypeQueueBefore;
    NoYes                   showPlannedProdJobTypeSetup;
    NoYes                   showPlannedProdJobTypeProcess;
    NoYes                   showPlannedProdJobTypeOverlap;
    NoYes                   showPlannedProdJobTypeTransport;
    NoYes                   showPlannedProdJobTypeQueueAfter;

    NoYes                   showPlannedProdJobsNoCapRes;

    NoYes                   loadEntirePlannedProdOrder;

    ReqPlanId               reqPlanIdPlannedProd;
    NoYes                   showPlannedProdJobMaterialDate;

    // Project
    NoYes                   loadProjData;
    NoYes                   loadEntireProject;

    #define.CurrentVersion(8)
    #localmacro.CurrentList
        // General
        showAllLinks,
        showLateJobs,
        timescaleUnit,
        timescaleStep,

        // Production
        loadProdJobData,
        showProdJobTypeQueueBefore,
        showProdJobTypeSetup,
        showProdJobTypeProcess,
        showProdJobTypeOverlap,
        showProdJobTypeTransport,
        showProdJobTypeQueueAfter,
        showFinishedProdJobs,
        showProdJobsNoCapRes,
        loadEntireProdOrder,
        showProdJobCompletion,
        showProdJobMaterialDate,

        // Planned production
        loadPlannedProdJobData,
        showPlannedProdJobTypeQueueBefore,
        showPlannedProdJobTypeSetup,
        showPlannedProdJobTypeProcess,
        showPlannedProdJobTypeOverlap,
        showPlannedProdJobTypeTransport,
        showPlannedProdJobTypeQueueAfter,
        showPlannedProdJobsNoCapRes,
        showPlannedProdJobMaterialDate,
        loadEntirePlannedProdOrder,
        reqPlanIdPlannedProd,

        // Project
        loadProjData,
        loadEntireProject

    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyChangedValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the values changed in the setup class.
    /// </summary>
    /// <returns>
    ///    true if the change was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the load calendar option was changed, a reload of the Gantt chart is performed.
    /// </remarks>
    protected boolean applyChangedValues()
    {
        if (!super())
        {
            return false;
        }

        if (mustReloadData)
        {
            return ganttClient.reload();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ganttVisualization</Name>
				<Source><![CDATA[
    public GanttVisualization ganttVisualization()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        // Setup dialog settings
        this.initParmDefaultGeneral();

        this.initParmDefaultProd();
        this.initParmDefaultPlannedProd();
        this.initParmDefaultProj();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefaultGeneral</Name>
				<Source><![CDATA[
    protected void initParmDefaultGeneral()
    {
        showAllLinks            = NoYes::Yes;

        showLateJobs            = NoYes::No;

        timescaleUnit = GanttTimescale::Hours;
        timescaleStep = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefaultPlannedProd</Name>
				<Source><![CDATA[
    protected void initParmDefaultPlannedProd()
    {
        loadPlannedProdJobData              = NoYes::Yes;

        showPlannedProdJobTypeQueueBefore   = NoYes::Yes;
        showPlannedProdJobTypeSetup         = NoYes::Yes;
        showPlannedProdJobTypeProcess       = NoYes::Yes;
        showPlannedProdJobTypeOverlap       = NoYes::Yes;
        showPlannedProdJobTypeTransport     = NoYes::Yes;
        showPlannedProdJobTypeQueueAfter    = NoYes::Yes;

        showPlannedProdJobsNoCapRes         = NoYes::Yes;

        loadEntirePlannedProdOrder          = NoYes::No;

        reqPlanIdPlannedProd                = ReqPlanSched::defaultDynamicId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefaultProd</Name>
				<Source><![CDATA[
    protected void initParmDefaultProd()
    {
        loadProdJobData             = NoYes::Yes;

        showProdJobTypeQueueBefore  = NoYes::Yes;
        showProdJobTypeSetup        = NoYes::Yes;
        showProdJobTypeProcess      = NoYes::Yes;
        showProdJobTypeOverlap      = NoYes::Yes;
        showProdJobTypeTransport    = NoYes::Yes;
        showProdJobTypeQueueAfter   = NoYes::Yes;

        showFinishedProdJobs        = NoYes::No;
        showProdJobsNoCapRes        = NoYes::Yes;

        loadEntireProdOrder         = NoYes::No;

        showProdJobCompletion       = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefaultProj</Name>
				<Source><![CDATA[
    protected void initParmDefaultProj()
    {
        loadProjData        = NoYes::Yes;

        loadEntireProject   = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifiername lastValueDesignName()
    {
        GanttClient_WrkCtr localGanttClient = this.parmGanttClient() as GanttClient_WrkCtr;
        return localGanttClient.lastValueDesignName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttClient</Name>
				<Source><![CDATA[
    public GanttClient parmGanttClient(GanttClient _ganttClient = ganttClient)
    {
        return super(_ganttClient);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadEntirePlannedProdOrder</Name>
				<Source><![CDATA[
    public NoYes parmLoadEntirePlannedProdOrder(NoYes _loadEntirePlannedProdOrder = loadEntirePlannedProdOrder)
    {
        if (loadEntirePlannedProdOrder != _loadEntirePlannedProdOrder)
        {
            mustReloadData              = NoYes::Yes;
            loadEntirePlannedProdOrder  = _loadEntirePlannedProdOrder;
        }

        return loadEntirePlannedProdOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadEntireProdOrder</Name>
				<Source><![CDATA[
    public NoYes parmLoadEntireProdOrder(NoYes _loadEntireProdOrder = loadEntireProdOrder)
    {
        if (loadEntireProdOrder != _loadEntireProdOrder)
        {
            mustReloadData      = NoYes::Yes;
            loadEntireProdOrder = _loadEntireProdOrder;
        }

        return loadEntireProdOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadEntireProject</Name>
				<Source><![CDATA[
    public NoYes parmLoadEntireProject(NoYes _loadEntireProject = loadEntireProject)
    {
        if (loadEntireProject != _loadEntireProject)
        {
            mustReloadData      = NoYes::Yes;
            loadEntireProject   = _loadEntireProject;
        }

        return loadEntireProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadPlannedProdJobData</Name>
				<Source><![CDATA[
    public NoYes parmLoadPlannedProdJobData(NoYes _loadPlannedProdJobData = loadPlannedProdJobData)
    {
        if (loadPlannedProdJobData != _loadPlannedProdJobData)
        {
            mustReloadData          = NoYes::Yes;
            loadPlannedProdJobData  = _loadPlannedProdJobData;
        }

        return loadPlannedProdJobData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadProdJobData</Name>
				<Source><![CDATA[
    public NoYes parmLoadProdJobData(NoYes _loadProdJobData = loadProdJobData)
    {
        if (loadProdJobData != _loadProdJobData)
        {
            mustReloadData  = NoYes::Yes;
            loadProdJobData = _loadProdJobData;
        }

        return loadProdJobData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadProjData</Name>
				<Source><![CDATA[
    public NoYes parmLoadProjData(NoYes _loadProjData = loadProjData)
    {
        if (loadProjData != _loadProjData)
        {
            mustReloadData  = NoYes::Yes;
            loadProjData    = _loadProjData;
        }

        return loadProjData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanIdPlannedProd</Name>
				<Source><![CDATA[
    public ReqPlanId parmReqPlanIdPlannedProd(ReqPlanId _reqPlanIdPlannedProd = reqPlanIdPlannedProd)
    {
        if (reqPlanIdPlannedProd != _reqPlanIdPlannedProd)
        {
            mustReloadData          = NoYes::Yes;
            reqPlanIdPlannedProd    = _reqPlanIdPlannedProd;
        }

        return reqPlanIdPlannedProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowAllLinks</Name>
				<Source><![CDATA[
    public NoYes parmShowAllLinks(NoYes _showAllLinks = showAllLinks)
    {
        if (showAllLinks != _showAllLinks)
        {
            showAllLinksChanged = NoYes::Yes;
            showAllLinks        = _showAllLinks;
        }

        return showAllLinks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFinishedProdJobs</Name>
				<Source><![CDATA[
    public NoYes parmShowFinishedProdJobs(NoYes _showFinishedProdJobs = showFinishedProdJobs)
    {
        if (showFinishedProdJobs != _showFinishedProdJobs)
        {
            mustReloadData          = NoYes::Yes;
            showFinishedProdJobs    = _showFinishedProdJobs;
        }

        return showFinishedProdJobs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowLateJobs</Name>
				<Source><![CDATA[
    public NoYes parmShowLateJobs(NoYes _showLateJobs = showLateJobs)
    {
        if (showLateJobs != _showLateJobs)
        {
            showLateJobsChanged = NoYes::Yes;
            showLateJobs        = _showLateJobs;
        }

        return showLateJobs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPlannedProdJobsNoCapRes</Name>
				<Source><![CDATA[
    public NoYes parmShowPlannedProdJobsNoCapRes(NoYes _showPlannedProdJobsNoCapRes = showPlannedProdJobsNoCapRes)
    {
        if (showPlannedProdJobsNoCapRes != _showPlannedProdJobsNoCapRes)
        {
            mustReloadData              = NoYes::Yes;
            showPlannedProdJobsNoCapRes = _showPlannedProdJobsNoCapRes;
        }

        return showPlannedProdJobsNoCapRes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPlannedProdJobTypeOverlap</Name>
				<Source><![CDATA[
    public NoYes parmShowPlannedProdJobTypeOverlap(NoYes _showPlannedProdJobTypeOverlap = showPlannedProdJobTypeOverlap)
    {
        if (showPlannedProdJobTypeOverlap != _showPlannedProdJobTypeOverlap)
        {
            mustReloadData                  = NoYes::Yes;
            showPlannedProdJobTypeOverlap   = _showPlannedProdJobTypeOverlap;
        }

        return showPlannedProdJobTypeOverlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPlannedProdJobTypeProcess</Name>
				<Source><![CDATA[
    public NoYes parmShowPlannedProdJobTypeProcess(NoYes _showPlannedProdJobTypeProcess = showPlannedProdJobTypeProcess)
    {
        if (showPlannedProdJobTypeProcess != _showPlannedProdJobTypeProcess)
        {
            mustReloadData                  = NoYes::Yes;
            showPlannedProdJobTypeProcess   = _showPlannedProdJobTypeProcess;
        }

        return showPlannedProdJobTypeProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPlannedProdJobTypeQueueAfter</Name>
				<Source><![CDATA[
    public NoYes parmShowPlannedProdJobTypeQueueAfter(NoYes _showPlannedProdJobTypeQueueAfter = showPlannedProdJobTypeQueueAfter)
    {
        if (showPlannedProdJobTypeQueueAfter != _showPlannedProdJobTypeQueueAfter)
        {
            mustReloadData                      = NoYes::Yes;
            showPlannedProdJobTypeQueueAfter    = _showPlannedProdJobTypeQueueAfter;
        }

        return showPlannedProdJobTypeQueueAfter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPlannedProdJobTypeQueueBefore</Name>
				<Source><![CDATA[
    public NoYes parmShowPlannedProdJobTypeQueueBefore(NoYes _showPlannedProdJobTypeQueueBefore = showPlannedProdJobTypeQueueBefore)
    {
        if (showPlannedProdJobTypeQueueBefore != _showPlannedProdJobTypeQueueBefore)
        {
            mustReloadData                      = NoYes::Yes;
            showPlannedProdJobTypeQueueBefore   = _showPlannedProdJobTypeQueueBefore;
        }

        return showPlannedProdJobTypeQueueBefore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPlannedProdJobTypeSetup</Name>
				<Source><![CDATA[
    public NoYes parmShowPlannedProdJobTypeSetup(NoYes _showPlannedProdJobTypeSetup = showPlannedProdJobTypeSetup)
    {
        if (showPlannedProdJobTypeSetup != _showPlannedProdJobTypeSetup)
        {
            mustReloadData              = NoYes::Yes;
            showPlannedProdJobTypeSetup = _showPlannedProdJobTypeSetup;
        }

        return showPlannedProdJobTypeSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPlannedProdJobTypeTransport</Name>
				<Source><![CDATA[
    public NoYes parmShowPlannedProdJobTypeTransport(NoYes _showPlannedProdJobTypeTransport = showPlannedProdJobTypeTransport)
    {
        if (showPlannedProdJobTypeTransport != _showPlannedProdJobTypeTransport)
        {
            mustReloadData                  = NoYes::Yes;
            showPlannedProdJobTypeTransport = _showPlannedProdJobTypeTransport;
        }

        return showPlannedProdJobTypeTransport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowProdJobCompletion</Name>
				<Source><![CDATA[
    public NoYes parmShowProdJobCompletion(NoYes _showProdJobCompletion = showProdJobCompletion)
    {
        if (showProdJobCompletion != _showProdJobCompletion)
        {
            showProdJobCompletionChanged    = NoYes::Yes;
            showProdJobCompletion           = _showProdJobCompletion;
        }

        return showProdJobCompletion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowProdJobsNoCapRes</Name>
				<Source><![CDATA[
    public NoYes parmShowProdJobsNoCapRes(NoYes _showProdJobsNoCapRes = showProdJobsNoCapRes)
    {
        if (showProdJobsNoCapRes != _showProdJobsNoCapRes)
        {
            mustReloadData          = NoYes::Yes;
            showProdJobsNoCapRes    = _showProdJobsNoCapRes;
        }

        return showProdJobsNoCapRes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowProdJobTypeOverlap</Name>
				<Source><![CDATA[
    public NoYes parmShowProdJobTypeOverlap(NoYes _showProdJobTypeOverlap = showProdJobTypeOverlap)
    {
        if (showProdJobTypeOverlap != _showProdJobTypeOverlap)
        {
            mustReloadData          = NoYes::Yes;
            showProdJobTypeOverlap  = _showProdJobTypeOverlap;
        }

        return showProdJobTypeOverlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowProdJobTypeProcess</Name>
				<Source><![CDATA[
    public NoYes parmShowProdJobTypeProcess(NoYes _showProdJobTypeProcess = showProdJobTypeProcess)
    {
        if (showProdJobTypeProcess != _showProdJobTypeProcess)
        {
            mustReloadData          = NoYes::Yes;
            showProdJobTypeProcess  = _showProdJobTypeProcess;
        }

        return showProdJobTypeProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowProdJobTypeQueueAfter</Name>
				<Source><![CDATA[
    public NoYes parmShowProdJobTypeQueueAfter(NoYes _showProdJobTypeQueueAfter = showProdJobTypeQueueAfter)
    {
        if (showProdJobTypeQueueAfter != _showProdJobTypeQueueAfter)
        {
            mustReloadData              = NoYes::Yes;
            showProdJobTypeQueueAfter   = _showProdJobTypeQueueAfter;
        }

        return showProdJobTypeQueueAfter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowProdJobTypeQueueBefore</Name>
				<Source><![CDATA[
    public NoYes parmShowProdJobTypeQueueBefore(NoYes _showProdJobTypeQueueBefore = showProdJobTypeQueueBefore)
    {
        if (showProdJobTypeQueueBefore != _showProdJobTypeQueueBefore)
        {
            mustReloadData              = NoYes::Yes;
            showProdJobTypeQueueBefore  = _showProdJobTypeQueueBefore;
        }

        return showProdJobTypeQueueBefore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowProdJobTypeSetup</Name>
				<Source><![CDATA[
    public NoYes parmShowProdJobTypeSetup(NoYes _showProdJobTypeSetup = showProdJobTypeSetup)
    {
        if (showProdJobTypeSetup != _showProdJobTypeSetup)
        {
            mustReloadData          = NoYes::Yes;
            showProdJobTypeSetup    = _showProdJobTypeSetup;
        }

        return showProdJobTypeSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowProdJobTypeTransport</Name>
				<Source><![CDATA[
    public NoYes parmShowProdJobTypeTransport(NoYes _showProdJobTypeTransport = showProdJobTypeTransport)
    {
        if (showProdJobTypeTransport != _showProdJobTypeTransport)
        {
            mustReloadData              = NoYes::Yes;
            showProdJobTypeTransport    = _showProdJobTypeTransport;
        }

        return showProdJobTypeTransport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetChangedValues</Name>
				<Source><![CDATA[
    protected void resetChangedValues()
    {
        super();

        mustReloadData                  = NoYes::No;

        // General
        showAllLinksChanged             = NoYes::No;

        showLateJobsChanged             = NoYes::No;

        // Production
        showProdJobCompletionChanged    = NoYes::No;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>runForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the form that contains the setup options for work center Gantt to the user.
    /// </summary>
    protected void runForm()
    {
        Args    args = new Args(formstr(ganttWrkCtrSetup));
        FormRun formRun;
        args.caller(this);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.detach();
        formRun.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container   base;
        boolean     ret;
        Integer     version = conpeek(packedClass,1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttSetup_WrkCtr construct()
    {
        return new GanttSetup_WrkCtr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        #define.ganttClient('ganttClient')

        GanttClient_WrkCtr  ganttClient;
        GanttSetup_WrkCtr   ganttSetup;

        if (!args || !args.caller())
        {
            throw error(strfmt("@SYS53926", classstr(GanttSetup_WrkCtr)));
        }

        if (args.caller() is FormRun)
        {
            if (!SysFormRun::hasMethod(args.caller(), #ganttClient))
            {
                throw error(strfmt("@SYS73945",args.caller().name(), #ganttClient));
            }

            ganttClient = args.caller().ganttClient();
        }
        else
        {
            ganttClient = args.caller();
        }

        ganttSetup = ganttClient.parmGanttSetup();

        ganttSetup.runForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGanttClient</Name>
				<Source><![CDATA[
    public static GanttSetup_WrkCtr newGanttClient(GanttClient_WrkCtr _ganttClient)
    {
        GanttSetup_WrkCtr ganttSetup = GanttSetup_WrkCtr::construct();
        ganttSetup.parmGanttClient(_ganttClient);

        return ganttSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowProdJobMaterialDate</Name>
				<Source><![CDATA[
    public NoYes parmShowProdJobMaterialDate(NoYes _showProdJobMaterialDate = showProdJobMaterialDate)
    {
        if (showProdJobMaterialDate != _showProdJobMaterialDate)
        {
            mustReloadData = NoYes::Yes;
            showProdJobMaterialDate = _showProdJobMaterialDate;
        }

        return showProdJobMaterialDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPlannedProdJobMaterialDate</Name>
				<Source><![CDATA[
    public NoYes parmShowPlannedProdJobMaterialDate(NoYes _showPlannedProdJobMaterialDate = showPlannedProdJobMaterialDate)
    {
        if (showPlannedProdJobMaterialDate != _showPlannedProdJobMaterialDate)
        {
            mustReloadData = NoYes::Yes;
            showPlannedProdJobMaterialDate = _showPlannedProdJobMaterialDate;
        }

        return showPlannedProdJobMaterialDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>