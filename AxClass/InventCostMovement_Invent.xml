<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostMovement_Invent</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventCostMovement_Invent extends InventCostMovement
{
    InventDim                      issueInventDim;
    InventItemPrice                issueInventItemPrice;
    InventCostTransCostList        issueStdCostList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomConsumptionCostList</Name>
				<Source><![CDATA[
    protected InventCostTransCostList bomConsumptionCostList()
    {
        InventTrans                         componentInventTrans;        
        InventJournalTrans                  inventJournalTrans;
        InventTransOriginJournalTrans       inventTransOriginJournalTrans;
        InventTransOriginJournalTrans       componentInventTransOriginJournalTrans;
        InventCostTransCostList             consumptionCostList;
        InventCostTransVariance             variance;
        InventTransOriginAssemblyComponent  inventTransOriginAssemblyComponent;

        InventCostTransCostList totalConsumptionCostList = InventCostTransCostList::construct();

        if (inventTransOrigin.ReferenceCategory == InventTransType::BOMMain)
        {
            while select TableId from inventTransOriginJournalTrans
                where inventTransOriginJournalTrans.InventTransOrigin == inventTransOrigin.RecId
                join DefaultDimension, Qty from inventJournalTrans
                    where inventJournalTrans.JournalId                      == inventTransOriginJournalTrans.InventJournalId
                       && inventJournalTrans.DataAreaId                     == inventTransOriginJournalTrans.InventJournalDataAreaId // not joining on linenum as we want all lines in journal
                       && inventJournalTrans.InventTransIdFather            == inventTransOrigin.InventTransId
                        join TableId from componentInventTransOriginJournalTrans
                            where componentInventTransOriginJournalTrans.InventJournalDataAreaId    == inventJournalTrans.DataAreaId
                               && componentInventTransOriginJournalTrans.InventJournalId            == inventJournalTrans.JournalId
                               && componentInventTransOriginJournalTrans.InventJournalLineNum       == inventJournalTrans.LineNum
                            // <GEERU>
                            join DatePhysical, InventDimId, CostAmountPhysical, CostAmountSecCurPhysical_RU from componentInventTrans
                            // </GEERU>
                            where componentInventTrans.InventTransOrigin                        == componentInventTransOriginJournalTrans.InventTransOrigin
                                exists join inventTransOriginAssemblyComponent
                                    where inventTransOriginAssemblyComponent.ComponentInventTransOrigin == componentInventTrans.InventTransOrigin
                                       && inventTransOriginAssemblyComponent.AssemblyInventTransOrigin  == inventTransOrigin.RecId
            {
                // Inventory cost are the actual cost
                consumptionCostList = InventCostTransCostList::construct();

                variance = this.initializeInventCostTransVariance(inventTransOrigin.RecId, inventJournalTrans, componentInventTrans);

                consumptionCostList.insert(variance, true);

                // Now I need to merge this list into the total list
                totalConsumptionCostList.summarize(consumptionCostList);
            }
        }
        else
        {
            throw error(strfmt("@SYS19306",funcname()));
        }

        return totalConsumptionCostList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventCostTransVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the FG is a serialized item, there will be more than one record of inventTrans with qty 1 that are associated with the same record of InventTransOrigin for FG item.
    /// The same record of InventTrans for the same bom item will be found more than one time by caller.
    /// So we should need init InventCostTransVarinace with allocation amount of bom inventTrans instead of full amount.
    /// </summary>
    /// <paeam name = "_recid">
    /// THe recid of <InventTransOrigin</c> table
    /// </paeam>
    /// <param name = "_inventJournalTrans">
    /// The record of <c>InventJournalTrans</c> table.
    /// </param>
    /// <param name = "_componentInventTrans">
    /// The record of <c>InventTrans</c> table.
    /// </param>
    /// <returns></returns>
    private InventCostTransVariance initializeInventCostTransVariance(RefRecId _recid, InventJournalTrans _inventJournalTrans, Inventtrans _componentInventTrans)
    {
        InventCostTransVariance variance;
        InventTable componentInventTable;
        InventTrans fgInventTrans;

        select count(RecId) from fgInventTrans
            group by fgInventTrans.inventTransOrigin
            where fgInventTrans.inventTransOrigin == _recid;

        // <GEERU>
        if (fgInventTrans.RecId)
        {
            variance.initInventCostTransVariance(componentInventTable.costGroup(), this.varianceType(), _inventJournalTrans.DefaultDimension, -_componentInventTrans.CostAmountPhysical / fgInventTrans.RecId, -_componentInventTrans.CostAmountSecCurPhysical_RU / fgInventTrans.RecId);
        }
        // </GEERU>

        return variance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActCostListFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the actual cost list for the financial update of the inventory cost movement.
    /// </summary>
    protected void initActCostListFinancial()
    {
        // Calculation is done at the financial state, because the old framework also
        // calculates variances at the financial update
        // Only for financail updates of the receipt for transfers can occur variances
        if (inventTransOrigin.ReferenceCategory == InventTransType::BOMMain && inventTrans.isReceipt())
        {
            // Act = Cost of BOM lines
            actCostList = this.bomConsumptionCostList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActCostListPhysical</Name>
				<Source><![CDATA[
    protected void initActCostListPhysical()
    {
        // Only for physical updates of the receipt for transfers can occur variances
        if ((inventTransOrigin.ReferenceCategory == InventTransType::InventTransfer        ||
             inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderShip     ||
             inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderReceive) &&
             inventTrans.isReceipt())
        {
            // Act = Std Cost of Issue
            actCostList = InventCostTransCostList::newFromList(issueStdCostList, inventTrans.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostMovement</Name>
				<Source><![CDATA[
    public void initCostMovement(InventCostTransState _costTransState, Voucher _voucher, TransDate _transDate, boolean _isReturn)
    {
        super(_costTransState, _voucher, _transDate, _isReturn);

        // Check if issued inventDimId has been set
        if (issueInventDim)
        {
            this.initIssueInventItemPrice();
            this.initIssueStdCostList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEstCostListFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the estimated cost list for the financial update of the inventory cost movement.
    /// </summary>
    protected void initEstCostListFinancial()
    {
        // Calculation is done at the financial state, because the old framework also
        // calculates variances at the financial update
        // Only for financail updates of the receipt for transfers can occur variances
        if (inventTransOrigin.ReferenceCategory == InventTransType::BOMMain && inventTrans.isReceipt())
        {
            // Est = current Std Cost
            estCostList = InventCostTransCostList::newFromList(stdCostList, inventTrans.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEstCostListPhysical</Name>
				<Source><![CDATA[
    protected void initEstCostListPhysical()
    {
        // Only for physical updates of the receipt for transfers can occur variances
        if ((inventTransOrigin.ReferenceCategory == InventTransType::InventTransfer        ||
             inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderShip     ||
             inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderReceive) &&
             inventTrans.isReceipt())
        {
            // Est = current Std Cost
            estCostList = InventCostTransCostList::newFromList(stdCostList, inventTrans.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIssueInventItemPrice</Name>
				<Source><![CDATA[
    protected void initIssueInventItemPrice()
    {
        issueInventItemPrice = InventItemPrice::stdCostFindDate(inventTable,
                                                                transDate,
                                                                '',
                                                                issueInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIssueStdCostList</Name>
				<Source><![CDATA[
    protected void initIssueStdCostList()
    {
        // Initialize the list
        issueStdCostList = InventCostTransCostList::newStdCostList(issueInventItemPrice.RecId,
                                                                   this.varianceType(),
                                                                   dimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(InventMovement _inventMovement)
    {
        super(_inventMovement);

        // Set the issue inventory dimension
        if (_inventMovement.isTransfer())
        {
            issueInventDim = _inventMovement.transferIssueCostPriceInventDim();

            if (!issueInventDim)
            {
                throw error("@SCM:InventMovementIssueMissingInventDim");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostMovement_Invent construct(InventMovement _inventMovement)
    {
        return new InventCostMovement_Invent(_inventMovement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>