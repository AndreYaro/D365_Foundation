<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentTableType_ApproveJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendDocumentTableType_ApproveJournal</c> class is used for validation and to apply default
///    values to approve journals.
/// </summary>
public class VendDocumentTableType_ApproveJournal extends VendDocumentTableType_Invoice
{
    VendTrans vendTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultedApproveJournalInvAdditionalFields</Name>
				<Source><![CDATA[
    delegate void defaultedApproveJournalInvAdditionalFields(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAdditionalFields</Name>
				<Source><![CDATA[
    protected void defaultAdditionalFields()
    {
        #ISOCountryRegionCodes

        super();

        this.defaultPoolRecId();
        this.defaultInvoiceReleaseDate();
        this.defaultReleaseDateComment();

        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            if (vendInvoiceInfoTable.VendDocumentTableMap::parmVatDueDate_W() == dateNull())
            {
                vendInvoiceInfoTable.VendDocumentTableMap::parmVatDueDate_W(this.ledgerJournalTrans().VatDueDate_W);
            }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.defaultCFDIUUID_MX();
        }

        this.defaultedApproveJournalInvAdditionalFields(vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCFDIUUID_MX</Name>
				<Source><![CDATA[
    protected void defaultCFDIUUID_MX()
    {
        EInvoiceCFDIUUID_MX cfdiuuid;

        if (!vendInvoiceInfoTable.VendDocumentTableMap::parmCFDIUUID_MX())
        {
            cfdiuuid = this.determineDefaultCFDIUUID_MX();
            vendInvoiceInfoTable.VendDocumentTableMap::parmCFDIUUID_MX(cfdiuuid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInvoiceSeries_MX</Name>
				<Source><![CDATA[
    protected void defaultInvoiceSeries_MX()
    {
        InvoiceSeries_MX invoiceSeries;

        if (!vendInvoiceInfoTable.vendDocumentTableMap::parmInvoiceSeries_MX())
        {
            invoiceSeries = this.determineDefaultInvoiceSeries_MX();
            vendInvoiceInfoTable.vendDocumentTableMap::parmInvoiceSeries_MX(invoiceSeries);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPoolRecId</Name>
				<Source><![CDATA[
    protected void defaultPoolRecId()
    {
        LedgerJournalTransRefRecId poolRecId;

        if (!vendInvoiceInfoTable.isFieldSet(fieldnum(VendInvoiceInfoTable, PoolRecId)))
        {
            poolRecId = this.determineDefaultPoolRecId();
            vendInvoiceInfoTable.PoolRecId = poolRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInvoiceReleaseDate</Name>
				<Source><![CDATA[
    protected void defaultInvoiceReleaseDate()
    {
        InvoiceReleaseDate invoiceReleaseDate;

        if (!vendInvoiceInfoTable.isFieldSet(fieldnum(VendInvoiceInfoTable, InvoiceReleaseDate)))
        {
            invoiceReleaseDate = this.determineDefaultInvoiceReleasedate();
            vendInvoiceInfoTable.InvoiceReleaseDate = invoiceReleaseDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReleaseDateComment</Name>
				<Source><![CDATA[
    protected void defaultReleaseDateComment()
    {
        ReleaseDateComment releaseDateComment;

        if (!vendInvoiceInfoTable.isFieldSet(fieldnum(VendInvoiceInfoTable, ReleaseDateComment)))
        {
            releaseDateComment = this.determineDefaultReleasedateComment();
            vendInvoiceInfoTable.ReleaseDateComment = releaseDateComment;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCFDIUUID_MX</Name>
				<Source><![CDATA[
    protected EInvoiceCFDIUUID_MX determineDefaultCFDIUUID_MX()
    {
        return this.ledgerJournalTrans().CFDIUUID_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInvoiceSeries_MX</Name>
				<Source><![CDATA[
    protected InvoiceSeries_MX determineDefaultInvoiceSeries_MX()
    {
        return this.ledgerJournalTrans().InvoiceSeries_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDocumentDate</Name>
				<Source><![CDATA[
    protected DocumentDate determineDefaultDocumentDate()
    {
        return this.ledgerJournalTrans().DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDocumentNum</Name>
				<Source><![CDATA[
    protected DocumentNum determineDefaultDocumentNum()
    {
        return this.ledgerJournalTrans().DocumentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultEuroTriangulation</Name>
				<Source><![CDATA[
    protected EUROTriangulation determineDefaultEuroTriangulation()
    {
        return this.ledgerJournalTrans().Triangulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultExchRate</Name>
				<Source><![CDATA[
    protected ExchRate determineDefaultExchRate()
    {
        return this.ledgerJournalTrans().ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultExchRateSecondary</Name>
				<Source><![CDATA[
    protected ExchrateSecondary determineDefaultExchRateSecondary()
    {
        return this.ledgerJournalTrans().ExchRateSecond;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultReportingCurrencyFixedExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate determineDefaultReportingCurrencyFixedExchangeRate()
    {
        return this.ledgerJournalTrans().ReportingCurrencyExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFixedDueDate</Name>
				<Source><![CDATA[
    protected FixedDueDate determineDefaultFixedDueDate()
    {
        FixedDueDate fixedDueDate = this.ledgerJournalTrans().Due;

        //Recalculate the due date only if the document date or trans date was modified on the Invoice.
        if ((vendInvoiceInfoTable.documentDate != this.ledgerJournalTrans().DocumentDate) ||
                (vendInvoiceInfoTable.TransDate != this.ledgerJournalTrans().TransDate))
        {
            fixedDueDate = super();
        }

        return fixedDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFixedExchRate</Name>
				<Source><![CDATA[
    protected FixedExchRate determineDefaultFixedExchRate()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPaymId</Name>
				<Source><![CDATA[
    protected PaymId determineDefaultPaymId()
    {
        return this.vendTrans().PaymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPaymMode</Name>
				<Source><![CDATA[
    protected PaymMode determineDefaultPaymMode()
    {
        return this.vendTrans().PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPaymSpec</Name>
				<Source><![CDATA[
    protected VendPaymSpec determineDefaultPaymSpec()
    {
        return this.vendTrans().PaymSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPoolRecId</Name>
				<Source><![CDATA[
    protected LedgerJournalTransRefRecId determineDefaultPoolRecId()
    {
        return LedgerJournalTrans::ledgerJournalTransPool(this.ledgerJournalTrans()).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInvoiceReleasedate</Name>
				<Source><![CDATA[
    protected InvoiceReleaseDate determineDefaultInvoiceReleasedate()
    {
        return this.ledgerJournalTrans().InvoiceReleaseDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultReleasedateComment</Name>
				<Source><![CDATA[
    protected ReleaseDateComment determineDefaultReleasedateComment()
    {
        return this.ledgerJournalTrans().ReleaseDateComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTransDate</Name>
				<Source><![CDATA[
    protected TransDate determineDefaultTransDate()
    {
        if (this.ledgerJournalTrans().TransDate != datenull())
        {
            date transDate = this.ledgerJournalTrans().TransDate;

            if (!LedgerFiscalCalendar::checkLedgerPeriodDateModule(CompanyInfoHelper::fiscalCalendarRecId(), transDate, SysModule::Purch, false))
            {
                transDate = LedgerFiscalCalendar::findFirstOpenStartDateModule(CompanyInfoHelper::fiscalCalendarRecId(), transDate, SysModule::Purch);
            }

            return transDate;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the associated <c>VendTrans</c> record.
    /// </summary>
    /// <returns>
    ///    The <c>VendTrans</c> record.
    /// </returns>
    protected VendTrans vendTrans()
    {
        if (vendTrans == null)
        {
            vendTrans = vendTrans::find(this.ledgerJournalTrans().VendTransId);
        }

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTotalInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validations on the <c>PurchTotals</c> and total amount of <c>VendInvoiceJour</c>.
    /// </summary>
    ///<param name="_purchTotals">
    ///The <c>PurchTotals></c> is to get the total amount of <c>VendInvoice</c>.
    ///</param>
    ///<param name="_vendInvoiceJour">
    ///The <c>VendInvoice</c> is registered to <c>VendInvoiceJour></c>.
    ///</param>
    ///<param name="_ledgerJournalTrans">
    ///The <c>LedgerJournalTrans</c> is related to <c>VendInvoiceJour></c>.
    ///</param>
    /// <returns>
    /// true if the invoice total and registered invoice total are equal; otherwise false.
    /// </returns>
    internal static VendInvoiceTotalValidationResult checkTotalInvoiceAmount(
        PurchTotals _purchTotals,
        VendInvoiceJour _vendInvoiceJour,
        LedgerJournalTrans _ledgerJournalTrans = null)
    {
        AmountCur amountDifference;
        AmountCur purchTotalAmount = _purchTotals.purchTotalAmount();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            AmountCur withholdTaxAmount;
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                // Get withholding tax amount calculated in invoice register, include both TDS and TCS.
                PurchFormletterParmDataApproveJournal purchFormletterParmDataApproveJournal = PurchFormletterParmDataApproveJournal::construct();
                withholdTaxAmount = purchFormletterParmDataApproveJournal.getWithholdingTaxAmount_IN(
                    _vendInvoiceJour.OrderAccount,
                    _vendInvoiceJour.LedgerVoucher,
                    _vendInvoiceJour.InvoiceDate);

                if (_ledgerJournalTrans
                    && TaxWithholdEnableIncludeTCSInTotalFeatureToggle::isFeatureEnabled())
                {
                    LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExtensionIN = LedgerJournalTransTaxExtensionIN::findByLedgerJournalTrans(_ledgerJournalTrans.RecId);

                    // Withholding tax isn't calculated in invoice register.
                    if (ledgerJournalTransTaxExtensionIN && (!ledgerJournalTransTaxExtensionIN.TDSGroup && !ledgerJournalTransTaxExtensionIN.TCSGroup))
                    {
                        TaxWithhold_IN taxWithhold_IN = _purchTotals.taxWithhold_IN();

                        // Get TCS withholding tax amount calculated in register PO when feature '(India) Enable to include tax collection at source (TCS) in the "total invoice value" of an invoice' enabled.
                        if (taxWithhold_IN && taxWithhold_IN.taxTCSType())
                        {
                            purchTotalAmount += _purchTotals.parmTaxWithholdAmount_IN();
                        }
                    }
                }
            }

            amountDifference = abs((purchTotalAmount + withholdTaxAmount) - _vendInvoiceJour.InvoiceAmount);
        }
        else
        {
            if (_vendInvoiceJour.SumTax
                && TaxTrans::existsByDirectionVoucherAndDate(TaxDirection::UseTax, _vendInvoiceJour.LedgerVoucher, _vendInvoiceJour.InvoiceDate))
            {
                TaxAmountCur useTaxTotalFromVendorInvoice = _purchTotals.tax().totalTaxAmountByDirection(TaxDirection::UseTax);
                TaxAmountCur useTaxTotalFromRegister = TaxTrans::totalTaxByDirectionVoucherAndDate(
                    TaxDirection::UseTax,
                    _vendInvoiceJour.LedgerVoucher,
                    _vendInvoiceJour.InvoiceDate);
                amountDifference = abs((purchTotalAmount + useTaxTotalFromVendorInvoice) - (_vendInvoiceJour.InvoiceAmount + useTaxTotalFromRegister));
            }
            else
            {
                amountDifference = abs(purchTotalAmount - _vendInvoiceJour.InvoiceAmount);
            }
        }

        VendInvoiceTotalValidationResult vendInvoiceTotalValidationResult;
        if (amountDifference != 0)
        {
            vendInvoiceTotalValidationResult = VendInvoiceTotalValidationResult::newForSuccess(false);
            vendInvoiceTotalValidationResult.resultMessage = strFmt("@SYS74899", amountDifference, _vendInvoiceJour.CurrencyCode);
        }
        else
        {
            vendInvoiceTotalValidationResult = VendInvoiceTotalValidationResult::newForSuccess(true);
        }

        return vendInvoiceTotalValidationResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>