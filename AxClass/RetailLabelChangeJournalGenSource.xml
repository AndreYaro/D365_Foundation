<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLabelChangeJournalGenSource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generates label change journals from the given source.
/// </summary>
class RetailLabelChangeJournalGenSource extends RetailLabelChangeJournalGenerator implements BatchRetryable
{
    RetailLabelChangeSourceType     sourceType;
    RetailLabelChangeSourceId       sourceId;

    Set                             journalsRemovalSet;

    RetailItemQtyFilter             itemQtyFilter;
    NoYes                           initQty;

    DialogField                     dialogItemQtyFilter;
    DialogField                     dialogInitQty;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        itemQtyFilter, initQty
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates label change journal header.
    /// </summary>
    /// <param name="_storeId">
    /// Retail store Id.
    /// </param>
    /// <returns>
    /// Label change journal Id.
    /// </returns>
    /// <remarks>
    /// Updates existing label change journal if one exists to reuse existing journal number allocated from a number sequence.
    /// </remarks>
    protected RetailLabelChangeJournalId createJournal(RetailStoreId _storeId)
    {
        RetailLabelChangeJournalTable journalTable;
        RetailLabelChangeJournalTrans journalTrans;

        ttsBegin;

        journalTable = RetailLabelChangeJournalTable::findSourceStore(sourceType, sourceId, _storeId, RetailLabelChangeJournalStatus::Open, NoYes::No, true);

        if (!journalTable)
        {
            journalTable.initValue();
            journalTable.JournalNum = this.getJournalId();
        }

        journalTable.Description = strFmt("@SYP4880971", sourceId, sourceType);
        journalTable.StoreId = _storeId;
        journalTable.PriceValidOnDate = priceDate;
        journalTable.Status = RetailLabelChangeJournalStatus::Open;
        journalTable.ConfirmDate = dateNull();
        journalTable.HcmWorker = HcmWorker::userId2Worker(curUserId());
        journalTable.SourceType = sourceType;
        journalTable.SourceId = sourceId;
        journalTable.ItemQtyFilter = itemQtyFilter;
        journalTable.PriceValidOnDate = priceDate;
        switch (sourceType)
        {
            case RetailLabelChangeSourceType::PriceDiscAdmTrans:
                journalTable.InitWithQtyOnHand = initQty;
                break;
            default:
                journalTable.InitWithQtyOrdered = initQty;
                break;
        }

        if (journalTable.RecId == 0)
        {
            journalTable.insert();
        }
        else
        {
            journalTable.update();
            // Remove all the lines if the journals already exists (this is regeneration case).
            delete_from journalTrans
                where journalTrans.JournalNum == journalTable.JournalNum;
        }

        if (journalsRemovalSet)
        {
            journalsRemovalSet.remove(journalTable.JournalNum);
        }

        this.deactivateExistingConfirmedJournals(_storeId);

        ttsCommit;

        return journalTable.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deactivateExistingConfirmedJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deactivates existing confirmed journals generated from the same source for the same store.
    /// </summary>
    /// <param name="_storeId">
    /// Retail store Id.
    /// </param>
    private void deactivateExistingConfirmedJournals(RetailStoreId _storeId)
    {
        RetailLabelChangeJournalTable confirmedLabelChangeJournalTable;

        ttsBegin;

        update_recordSet confirmedLabelChangeJournalTable
            setting Active = NoYes::No
            where confirmedLabelChangeJournalTable.SourceType == sourceType
               && confirmedLabelChangeJournalTable.SourceId == sourceId
               && confirmedLabelChangeJournalTable.StoreId == _storeId
               && confirmedLabelChangeJournalTable.Status == RetailLabelChangeJournalStatus::Confirmed
               && confirmedLabelChangeJournalTable.Active == NoYes::Yes;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;

        dialog = super();
        dialogItemQtyFilter = dialog.addFieldValue(extendedTypeStr(RetailItemQtyFilter), itemQtyFilter);
        dialogInitQty = dialog.addFieldValue(enumStr(NoYes), initQty,
            sourceType == RetailLabelChangeSourceType::PriceDiscAdmTrans ?
            "@SYP4880988" :
            "@SYP4880945");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillJournalsRemovalSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills jourrnals removal set with Ids of open journals generated from the same source document.
    /// </summary>
    /// <remarks>
    /// Considers only open label change journals.
    /// </remarks>
    private void fillJournalsRemovalSet()
    {
        RetailLabelChangeJournalTable journalTable;

        journalsRemovalSet = new Set(Types::String);

        while select JournalNum from journalTable
            where journalTable.SourceType == sourceType
               && journalTable.SourceId == sourceId
               && journalTable.Status == RetailLabelChangeJournalStatus::Open
        {
            journalsRemovalSet.add(journalTable.JournalNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFetcher</Name>
				<Source><![CDATA[
    protected RetailLabelChangeDataFetcher getFetcher()
    {
        return RetailLabelChangeDataFetcherFromSource::construct(sourceType, sourceId, priceDate, itemQtyFilter, initQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        itemQtyFilter = dialogItemQtyFilter.value();
        initQty = dialogInitQty.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasJournalsToShow</Name>
				<Source><![CDATA[
    protected boolean hasJournalsToShow()
    {
        return RetailLabelChangeJournalTable::existSource(sourceType, sourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalTrans</Name>
				<Source><![CDATA[
    protected RetailLabelChangeJournalTrans initJournalTrans(
        RetailLabelChangeJournalId _journalNum,
        ItemId _itemId,
        RetailVariantId _variantId,
        Price _price,
        InventQty _qty,
        InventUnitId _unitId,
        RetailStoreId _storeId)
    {
        return super(_journalNum, _itemId, _variantId, _price, _qty, _unitId, _storeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        itemQtyFilter = RetailAllNewOnHand::All;
        initQty = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceId</Name>
				<Source><![CDATA[
    protected final RetailLabelChangeSourceId parmSourceId(RetailLabelChangeSourceId _sourceId = sourceId)
    {
        sourceId = _sourceId;
        return sourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceType</Name>
				<Source><![CDATA[
    protected final RetailLabelChangeSourceType parmSourceType(RetailLabelChangeSourceType _sourceType = sourceType)
    {
        sourceType = _sourceType;
        return sourceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt(boolean _callSuper = true)
    {
        boolean ret;

        if (RetailLabelChangeJournalTable::existSource(sourceType, sourceId))
        {
            if (!this.shouldRegenerateExistingJournals())
            {
                return false;
            }

            this.fillJournalsRemovalSet();

            ret = true;
        }

        if (_callSuper)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeObsoleteJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes obsolete label change journals that are no longer valid.
    /// </summary>
    /// <remarks>
    /// Label change journal lines anr related <c>RetailInventItemLabel</c> entries cascade deleted.
    /// </remarks>
    protected void removeObsoleteJournals()
    {
        RetailLabelChangeJournalTable journalTable;
        SetEnumerator se;

        if (journalsRemovalSet)
        {
            se = journalsRemovalSet.getEnumerator();

            ttsBegin;

            while (se.moveNext())
            {
                delete_from journalTable
                    where journalTable.JournalNum == se.current();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRegenerateExistingJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether  existing label change journals should be regenerated.
    /// </summary>
    /// <returns>
    /// true if existing journals should be regenerated; false otherwise.
    /// </returns>
    /// <remarks>
    /// Prompts the user with a dialog and decides upon the dialog result.
    /// </remarks>
    protected boolean shouldRegenerateExistingJournals()
    {
        return
            Box::yesNo(
                strFmt("@SYP4880965", sourceType, sourceId),
                DialogButton::No, "@SYP4880966") == DialogButton::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        boolean ret = false;
        container basePackedClass;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, basePackedClass] = packedClass;
                ret = super(basePackedClass);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>RetailLabelChangeJournalGenerator</c> based on the arguments provided.
    /// </summary>
    /// <param name="_args">
    /// Arguments.
    /// </param>
    /// <returns>
    /// An initialized instance of the <c>RetailLabelChangeJournalGenerator</c>
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws error if wrong source type is being retrieved.
    /// </exception>
    public static RetailLabelChangeJournalGenSource construct(Args _args)
    {
        RetailLabelChangeJournalGenSource generator;
        RetailLabelChangeSourceType sourceType;
        RetailLabelChangeSourceId sourceId;
        PriceDate priceDate;

        [sourceType, sourceId, priceDate] = RetailLabelChangeJournalGenSource::getParametersFromArgs(_args);

        switch (sourceType)
        {
            case RetailLabelChangeSourceType::PriceDiscAdmTrans:
                generator = new RetailLabelChangeJournalGenTAJ();
                break;
            case RetailLabelChangeSourceType::PurchaseOrder:
            case RetailLabelChangeSourceType::InventJournalTable:
            case RetailLabelChangeSourceType::InventTransferTable:
                generator = new RetailLabelChangeJournalGenSource();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        generator.parmGivenPriceDate(priceDate);
        generator.parmSourceType(sourceType);
        generator.parmSourceId(sourceId);

        return generator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides description for the class.
    /// </summary>
    /// <returns>
    /// Description of the class.
    /// </returns>
    /// <remarks>
    /// Description also serves as a caption for the dialog.
    /// </remarks>
    public static ClassDescription description()
    {
        return "@SYP4881018";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParametersFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets parameters from args.
    /// </summary>
    /// <param name="_args">
    /// Arguments.
    /// </param>
    /// <returns>
    /// A contaioner cvonsisting of [sourceType, sourceId, priceDate].
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws error if <paramref name="_args"/> is not provided or does not have record attached.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws error if <paramref name="_args"/> has a record of a wrong type.
    /// </exception>
    protected static container getParametersFromArgs(Args _args)
    {
        RetailLabelChangeSourceType sourceType;
        RetailLabelChangeSourceId sourceId;
        PriceDate priceDate;
        Common record;
        PurchTable purchTable;
        InventTransferTable inventTransferTable;
        InventJournalTable inventJournalTable;
        PriceDiscAdmTable priceDiscAdmTable;

        if (!_args || !_args.record())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        priceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        record = _args.record();
        switch (record.TableId)
        {
            case tableNum(PurchTable):
                purchTable = record;
                sourceType = RetailLabelChangeSourceType::PurchaseOrder;
                sourceId = purchTable.PurchId;
                priceDate = purchTable.DeliveryDate;
                break;
            case tableNum(InventTransferTable):
                inventTransferTable = record;
                sourceType = RetailLabelChangeSourceType::InventTransferTable;
                sourceId = inventTransferTable.TransferId;
                priceDate = inventTransferTable.ShipDate;
                break;
            case tableNum(InventJournalTable):
                inventJournalTable = record;
                sourceType = RetailLabelChangeSourceType::InventJournalTable;
                sourceId = inventJournalTable.JournalId;
                break;
            case tableNum(PriceDiscAdmTable):
                priceDiscAdmTable = record;
                sourceType = RetailLabelChangeSourceType::PriceDiscAdmTrans;
                sourceId = priceDiscAdmTable.JournalNum;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return [sourceType, sourceId, priceDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>showJournalsForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a label change journal form to the user.
    /// </summary>
    /// <param name="_record">
    /// Source record the journals were generated for.
    /// </param>
    private static void showJournalsForm(Common _record)
    {
        MenuFunction mf = new MenuFunction(menuitemDisplayStr(RetailLabelChangeJournalTable), MenuItemType::Display);
        Args args = new Args();
        args.record(_record);
        mf.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailLabelChangeJournalGenSource</c> class
    /// can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailLabelChangeJournalGenSource</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>