<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorPortalAdvancedFilterHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>VendVendorPortalAdvancedFilterHandler</c> class removes the advanced filter pane for external vendor users.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.SysQuerySFKFieldReplacementIProvider))]
class VendVendorPortalAdvancedFilterHandler implements SysQuerySFKFieldReplacementIProvider
{
    static boolean isExternalVendor;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setIsExternalVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set up the filter handler for the external vendor role.
    /// </summary>
    public static void setIsExternalVendor()
    {
        if (!isExternalVendor)
        {
            Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteApplicationDiagnostic(
                'Setting isExternalVendor to true',
                new System.Diagnostics.StackTrace().ToString());

            isExternalVendor = true;
            FormRun::onFormRun += eventhandler(VendVendorPortalAdvancedFilterHandler::onFormRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the run method of <c>FormRun</c> class.
    /// </summary>
    /// <param name = "_formRun">The form instance being initialized.</param>
    public static void onFormRun(FormRun _formRun)
    {
        #SysSystemDefinedButtons
		
        if (_formRun && isExternalVendor) 
        {
            var filterButton = _formRun.control(_formRun.controlId(#SystemDefinedShowFiltersButton)) as FormControl;

            if (filterButton)
            {
                filterButton.enabled(false);
                filterButton.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSFKFieldReplacementsForField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of fields to replace the specified surrogate foreign key field.
    /// </summary>
    /// <param name = "_dictField">
    /// The <c>DictField</c> for which to get the list of replacement fields.
    /// </param>
    /// <returns>
    /// An empty list, to not override any existing behaviors.
    /// </returns>
    public List getSFKFieldReplacementsForField(DictField _dictField)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSFKReplacementFieldLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label for the specified field.
    /// </summary>
    /// <param name = "_dictField">
    /// The <c>DictField</c> for which to find its label.
    /// </param>
    /// <returns>
    /// An empty string, to not override any existing behaviors.
    /// </returns>
    public str getSFKReplacementFieldLabel(DictField _dictField)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>openLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows a lookup to be opened for the specified <c>FormStringControl</c> based on the specified table and field.
    /// </summary>
    /// <param name = "_lookupTableId">
    /// The <c>TableId</c> of the table for which a lookup is being opened.
    /// </param>
    /// <param name = "_lookupFieldId">
    /// The <c>FieldId</c> of the field for which a lookup is being opened.
    /// </param>
    /// <param name = "_formStringControl">
    /// The <c>FormStringControl</c> for which to open a lookup.
    /// </param>
    /// <returns>
    /// false, to not override any existing behaviors (please check base class comments for more information).
    /// </returns>
    public boolean openLookup(TableId _lookupTableId, FieldId _lookupFieldId, FormStringControl _formStringControl)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipAddImplicitSurrogateFKReplacements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if implicit surrogate foreign key replacement fields should be created for the specified field.
    /// </summary>
    /// <param name = "_dictField">
    /// The <c>DictField</c> to consider if it should have implicit surrogate FK replacement fields created.
    /// </param>
    /// <returns>
    /// false, to not override any existing behaviors.
    /// </returns>
    public boolean skipAddImplicitSurrogateFKReplacements(DictField _dictField)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipAddTableFieldsToFilterPane</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified table should have its fields excluded from the Filter Pane.
    /// </summary>
    /// <param name = "_tableId">
    /// The <c>TableId</c> of the table to consider if it should be included in the Filter Pane fields.
    /// </param>
    /// <returns>
    /// true when the current user is an external vendor; otherwise, false.
    /// </returns>
    public boolean skipAddTableFieldsToFilterPane(TableId _tableId)
    {
        return isExternalVendor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>