<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransOpenData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class CustVendTransOpenData
{
    protected CustVendTransOpen custVendTransOpen;
    protected CustVendTrans custVendTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDiscDate</Name>
				<Source><![CDATA[
    public TransDate calcDiscDate(TransDate _originalDate)
    {
        TransDate calcDiscDate;

        switch (custVendTransOpen.UseCashDisc)
        {
            case UseCashDisc::Normal:
                calcDiscDate = _originalDate;
                break;

            case UseCashDisc::Always:
                calcDiscDate = dateNull();
                break;

            case UseCashDisc::Never:
                calcDiscDate = dateMax();
                break;
        }

        return calcDiscDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSettlementOutsideCashDiscDate</Name>
				<Source><![CDATA[
    protected AmountCur calcSettlementOutsideCashDiscDate(CustVendTrans _trans = this.custVendTrans())
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscDateModified</Name>
				<Source><![CDATA[
    public container cashDiscDateModified(AmountCur _amountCurDebit,
        TempReal _balance,
        CurrencyCode _currencyCodeOld,
        CurrencyCode _currencyCodeNew,
        TransDate _transDate)
    {
        AmountCur amountCurDebit = _amountCurDebit;
        TempReal balance = _balance;

        changecompany(custVendTransOpen.company())
        {
            if (custVendTransOpen.CashDiscDate >= _transDate)
            {
                amountCurDebit -= CurrencyExchangeHelper::curAmount2CurAmount(custVendTransOpen.orig().PossibleCashDisc, _currencyCodeOld, _currencyCodeNew, _transDate, true)
                    - CurrencyExchangeHelper::curAmount2CurAmount(custVendTransOpen.PossibleCashDisc, _currencyCodeOld, _currencyCodeNew, _transDate, true);

                balance += custVendTransOpen.orig().PossibleCashDisc - custVendTransOpen.PossibleCashDisc;
            }
        }

        return [amountCurDebit, balance];
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTrans</Name>
				<Source><![CDATA[
    public CustVendTrans custVendTrans()
    {
        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransOpen</Name>
				<Source><![CDATA[
    public CustVendTransOpen custVendTransOpen()
    {
        return custVendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCashDisc</Name>
				<Source><![CDATA[
    public CustVendTransCashDisc findCashDisc(
        TransDate _transDate = dateNull(),
        DiscGraceDays _graceDays = 0)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDueDate</Name>
				<Source><![CDATA[
    public DueDate findDueDate()
    {
        return custVendTransOpen.DueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymModeTable</Name>
				<Source><![CDATA[
    public CustVendPaymModeTable findPaymModeTable(boolean _forUpdate)
    {
        CustVendPaymModeTable custVendPaymModeTable;

        changecompany(custVendTransOpen.company())
        {
            custVendPaymModeTable = this.transData().findPaymModeTable(_forUpdate);
        }

        return custVendPaymModeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSettlementAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the amount to settle for an open transaction.
    /// </summary>
    /// <param name = "_amountCur">The desired amount to settle.</param>
    /// <param name = "_cashDisc">The type of cash discount on the open transaction.</param>
    /// <param name = "_discDate">The date to take the cash discount, if applicable.</param>
    /// <param name = "_includeFineAndInterest">If true, fines and interest are included in the settled amount.</param>
    /// <param name = "_previousMarkedAmount">The previous amount settled on the open transaction.</param>
    /// <param name = "_previousCashDiscountToTake">The previous cash discount marked to be taken on the open transaction.</param>
    /// <returns>The amount to settle on the open transaction.</returns>
    public AmountCur findSettlementAmount(
        AmountCur _amountCur,
        UnspecificSpecific _cashDisc = UnspecificSpecific::Specific,
        TransDate _discDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean _includeFineAndInterest = true,
        AmountCur _previousMarkedAmount = 0.0,
        AmountCur _previousCashDiscountToTake = 0.0)
    {
        AmountCur remainingAmount;
        AmountCur settlementAmount = _amountCur;

        if (_cashDisc != UnspecificSpecific::Unspecific)
        {
            if (BrazilParameters::isEnabled())
            {
                remainingAmount = this.remainAmountCashDisc(
                    _discDate,
                    0,
                    _includeFineAndInterest,
                    _previousMarkedAmount,
                    _previousCashDiscountToTake);
            }
            else
            {
                remainingAmount = this.remainAmountCashDisc(
                    _discDate,
                    0,
                    false,
                    _previousMarkedAmount,
                    _previousCashDiscountToTake);
            }
        }
        else
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && (custVendTransOpen.TableId == tableNum(VendTransOpen)))
            {
                if (custVendTransOpen.checkPwpEnabled(custVendTransOpen))
                {
                    remainingAmount = custVendTransOpen.calcSettlementAmount(custVendTransOpen);
                }
                else
                {
                    remainingAmount = this.findRemainingAmountCur()
                        + _previousMarkedAmount
                        + _previousCashDiscountToTake;
                }
            }
            else
            {
                remainingAmount = this.findRemainingAmountCur()
                    + _previousMarkedAmount
                    + _previousCashDiscountToTake;
            }

            if (BrazilParameters::isEnabled() && _includeFineAndInterest)
            {
                remainingAmount += custVendTransOpen.InterestAmount_BR + custVendTransOpen.FineAmount_BR;
            }
        }

        if (remainingAmount < 0)
        {
            if (settlementAmount < remainingAmount || settlementAmount > 0)
            {
                settlementAmount = remainingAmount;
            }
        }
        else if (remainingAmount > 0)
        {
            if (settlementAmount > remainingAmount || settlementAmount < 0)
            {
                settlementAmount = remainingAmount;
            }
        }
        else if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && settlementAmount < 0)
        {
            settlementAmount = remainingAmount;
        }

        return settlementAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRemainingAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the remaining unmarked amount for the open tranaction.
    /// </summary>
    /// <returns>The remaining unmarked amount for the open tranaction.</returns>
    public AmountCur findRemainingAmountCur()
    {
        SpecTrans specTrans;
        CustVendPaymProposalLine custVendPaymProposalLine;

        select sum(Balance01), sum(CashDiscToTake) from specTrans
            where specTrans.RefCompany == custVendTransOpen.company()
                && specTrans.RefTableId == custVendTransOpen.TableId
                && specTrans.RefRecId == custVendTransOpen.RecId
            notexists join custVendPaymProposalLine
                where specTrans.SpecTableId == tableNum(LedgerJournalTrans)
                    && custVendPaymProposalLine.LedgerJournalTransRecId == specTrans.SpecRecId;

        return custVendTransOpen.AmountCur - specTrans.Balance01 - specTrans.CashDiscToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCashDiscountMarkedToBeTaken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the cash discount amount marked to be taken for the open tranaction.
    /// </summary>
    /// <returns>The cash discount amount marked to be taken for the open tranaction.</returns>
    public DiscAmount findCashDiscountMarkedToBeTaken()
    {
        SpecTrans specTrans;
        CustVendPaymProposalLine custVendPaymProposalLine;

        select sum(CashDiscToTake) from specTrans
            where specTrans.RefCompany == custVendTransOpen.company()
                && specTrans.RefTableId == custVendTransOpen.TableId
                && specTrans.RefRecId == custVendTransOpen.RecId
            notexists join custVendPaymProposalLine
                where specTrans.SpecTableId == tableNum(LedgerJournalTrans)
                    && custVendPaymProposalLine.LedgerJournalTransRecId == specTrans.SpecRecId;

        return specTrans.CashDiscToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTransOpen</Name>
				<Source><![CDATA[
    public CustVendTransOpen parmCustVendTransOpen(CustVendTransOpen _custVendTransOpen = custVendTransOpen)
    {
        custVendTransOpen = _custVendTransOpen;

        if (custVendTrans == null || custVendTransOpen.RefRecId != custVendTrans.RecId)
        {
            custVendTrans = CustVendTrans::findByRelatedCustVendTransOpen(custVendTransOpen);
        }

        return custVendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refFormName</Name>
				<Source><![CDATA[
    public FormName refFormName()
    {
        return new DictTable(custVendTransOpen.TableId).formRef();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the remaining amount to settle for an open transaction.
    /// </summary>
    /// <param name = "_transDate">The date to take the cash discount, if applicable.</param>
    /// <param name = "_discGraceDays">The number of grace days on the cash discount.</param>
    /// <param name = "_includeFineAndInterest">If true, fines and interest are included in the remaining amount.</param>
    /// <param name = "_previousSettleAmountForPayment">The previous amount settled on the open transaction.</param>
    /// <param name = "_previousCashDiscTakenForPayment">The previous cash discount marked to be taken on the open transaction.</param>
    /// <returns>The remaining amount to settle on the open transaction.</returns>
    public AmountCur remainAmountCashDisc(
        TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        DiscGraceDays _discGraceDays = 0,
        boolean _includeFineAndInterest = true,
        AmountCur _previousSettleAmountForPayment = 0.0,
        AmountCur _previousCashDiscTakenForPayment = 0.0)
    {
        AmountCur lateSettlement = 0.0;

        AmountCur amountCur = this.findRemainingAmountCur()
            + _previousSettleAmountForPayment
            + _previousCashDiscTakenForPayment;

        changecompany(custVendTransOpen.company())
        {
            if (BrazilParameters::isEnabled() && _includeFineAndInterest)
            {
                amountCur += custVendTransOpen.FineAmount_BR + custVendTransOpen.InterestAmount_BR;
            }

            if (custVendTrans.SettleAmountCur != 0.0)
            {
                lateSettlement = this.calcSettlementOutsideCashDiscDate(custVendTrans);
            }

            if (lateSettlement == 0.0)
            {
                CustVendTransCashDisc custVendTransCashDisc = this.findCashDisc(_transDate, _discGraceDays);

                AmountCur amountCashDisc = this.calculateCashDiscountAmountToTakeForPayment(
                    custVendTransCashDisc.CashDiscAmount,
                    _previousCashDiscTakenForPayment);

                amountCur -= amountCashDisc;
            }
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCashDiscountAmountToTakeForPayment</Name>
				<Source><![CDATA[
    private CashDiscAmount calculateCashDiscountAmountToTakeForPayment(
        CashDiscAmount _fullCashDiscAmount,
        CashDiscAmount _previousCashDiscTakenForPayment)
    {
        CashDiscAmount cashDiscAmountToTake;
        CustVendCashDiscountHelper cashDiscountHelper = CustVendCashDiscountHelper::construct(custVendTransOpen);

        cashDiscountHelper.parmFullCashDiscountForTier(_fullCashDiscAmount);
        cashDiscountHelper.parmCashDiscountTaken(this.calculateCashDiscAmountTakenForPayment(_previousCashDiscTakenForPayment));

        cashDiscAmountToTake = cashDiscountHelper.determineCashDiscForOpenAmount();

        return cashDiscAmountToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCashDiscAmountTakenForPayment</Name>
				<Source><![CDATA[
    private CashDiscAmount calculateCashDiscAmountTakenForPayment(CashDiscAmount _previousCashDiscTakenForPayment)
    {
        return custVendTransOpen.getCashDiscAlreadyTaken()
            + this.findCashDiscountMarkedToBeTaken()
            - _previousCashDiscTakenForPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCashDisc</Name>
				<Source><![CDATA[
    public void setCashDisc(TransDate _transDate, DiscGraceDays _graceDays = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextWeekDayDate</Name>
				<Source><![CDATA[
    private TransDate nextWeekDayDate(TransDate _transDate, WeekDays _weekDayTarget)
    {
        WeekDays transDateDayOfWeek = dayOfWk(_transDate);
        int daysUntilWeekDayTarget = (_weekDayTarget - transDateDayOfWeek + 7) mod 7;

        return _transDate + daysUntilWeekDayTarget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumPaymDate</Name>
				<Source><![CDATA[
    public TransDate sumPaymDate(
        TransDate _exactpaymDate,
        WeekDays _paymWeekDayFixed = WeekDays::None,
        TransDate _paymDateFixed = dateNull(),
        TransDate _minimumDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        TransDate _systemMinimumDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TransDate transDueOrCashDiscDate  = _exactpaymDate;
        TransDate sumPaymDate;
        PaymSumBy paymSumBy = this.findPaymModeTable(false).PaymSumBy;
        WeekDays weekDayFixed = _paymWeekDayFixed ? _paymWeekDayFixed : WeekDays::Monday;                

        sumPaymDate = this.calculateSumPaymDate(
            paymSumBy,
            transDueOrCashDiscDate,    
            _paymDateFixed,
            weekDayFixed);

        sumPaymDate = max(sumPaymDate, max(_systemMinimumDate, _minimumDate));

        sumPaymDate = this.calculateWeekdayAdjustmentForSumPaymDate(
            sumPaymDate,
            transDueOrCashDiscDate,
            paymSumBy,
            weekDayFixed);

        return sumPaymDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSumPaymDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the summarization payment date.
    /// </summary>
    /// <param name = "_paymSumBy">
    /// The period for calculation.
    /// </param>
    /// <param name = "_transDueOrCashDiscDate">
    /// Either the due date or the cash discount date.
    /// </param>
    /// <param name = "_paymDateFixed">
    /// The fixed payment date.
    /// </param>
    /// <param name = "_weekDayFixed">
    /// The day of the week.
    /// </param>
    /// <returns>
    /// The summarization payment date.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate calculateSumPaymDate(
        PaymSumBy _paymSumBy,
        TransDate _transDueOrCashDiscDate,
        TransDate _paymDateFixed,
        WeekDays _weekDayFixed
        )
    {
        TransDate sumPaymDate;

        switch (_paymSumBy)
        {
            case PaymSumBy::Invoice,
                PaymSumBy::TransDate:
                sumPaymDate = _transDueOrCashDiscDate;
                break;

            case PaymSumBy::Week:
                sumPaymDate = this.nextWeekDayDate(_transDueOrCashDiscDate, _weekDayFixed);

                // Use the week before if the weekday is past the due date
                if (sumPaymDate > _transDueOrCashDiscDate)
                {
                    sumPaymDate -= 7;
                }
                break;

            case PaymSumBy::Total:
                sumPaymDate = _paymDateFixed ? _paymDateFixed : _transDueOrCashDiscDate;
                break;
        }

        return sumPaymDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWeekdayAdjustmentForSumPaymDate</Name>
				<Source><![CDATA[
    private TransDate calculateWeekdayAdjustmentForSumPaymDate(
        TransDate _sumPaymDate,
        TransDate _transDueOrCashDiscDate,
        PaymSumBy _paymSumBy,
        WeekDays _weekDayFixed)
    {        
        SysInfoAction_Formrun sysInfoAction;
        TransDate adjustedSumPaymDate = _sumPaymDate;

        switch (_paymSumBy)
        {
            case PaymSumBy::Week:
                // Adjust the date to the proper weekday.
                // If the adjusted weekday is past the due date, keep todays date or the early payment date (whichever is latest)
                // and warn the user that the payment couldn't be fit into the wanted week day.
                if (this.nextWeekDayDate(adjustedSumPaymDate, _weekDayFixed) <= _transDueOrCashDiscDate)
                {
                    adjustedSumPaymDate = this.nextWeekDayDate(adjustedSumPaymDate, _weekDayFixed);
                }
                else
                {
                    sysInfoAction = SysInfoAction_Formrun::newFormname(CustVendTransOpenData::construct(custVendTransOpen).refFormName());
                    sysInfoAction.parmCallerBuffer(custVendTransOpen);
                    sysInfoAction.parmDescription("@SYS16011");

                    warning(strFmt("@SYS86765", date2StrUsr(adjustedSumPaymDate, DateFlags::FormatAll), _weekDayFixed, this.nextWeekDayDate(adjustedSumPaymDate, _weekDayFixed)), '', sysInfoAction);
                }
                break;
        }

        return adjustedSumPaymDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transData</Name>
				<Source><![CDATA[
    public CustVendTransData transData()
    {
        return CustVendTransData::construct(this.custVendTrans());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendTransOpenData construct(CustVendTransOpen _custVendTransOpen)
    {
        CustVendTransOpenData custVendTransOpenData;

        switch (_custVendTransOpen.TableId)
        {
            case tableNum(CustTransOpen):
                custVendTransOpenData = new CustTransOpenData();
                break;

            case tableNum(VendTransOpen):
                custVendTransOpenData = new VendTransOpenData();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        custVendTransOpenData.parmCustVendTransOpen(_custVendTransOpen);

        return custVendTransOpenData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>