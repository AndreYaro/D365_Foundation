<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorPortalUserRequestManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendVendorPortalUserRequestManager</c> class inherits from the <c>SysUserRequestManager</c> class and handles requests
/// in relation to provisioning new vendor portal user, inactivate existing vendor portal user,
/// or maintaining security roles on the existing vendor portal user.
/// </summary>
public class VendVendorPortalUserRequestManager extends SysUserRequestManager
{
    MenuItemName menuitemName;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCallerMenuItemName</Name>
				<Source><![CDATA[
    private MenuItemName parmCallerMenuItemName(MenuItemName _menuitemName = menuitemName)
    {
        menuitemName = _menuitemName;

        return menuitemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityType</Name>
				<Source><![CDATA[
    public SysUserRequestEntityType entityType()
    {
        return SysUserRequestEntityType::VendorPortalUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    public tableId tableId()
    {
        return tableNum(VendVendorPortalUserRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendVendorPortalUserRequestManager construct()
    {
        return new VendVendorPortalUserRequestManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysUserRequestManager_constructFromTableDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(SysUserRequestManager), staticDelegateStr(SysUserRequestManager, constructFromTableDelegate))]
    public static void SysUserRequestManager_constructFromTableDelegate(Common _record, EventHandlerResult result)
    {
        SysUserRequest userRequest = _record as SysUserRequest;
        if (userRequest.InstanceRelationType == tableNum(VendVendorPortalUserRequest))
        {
            result.result(VendVendorPortalUserRequestManager::construct());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysUserRequestManager_constructFromMenuItemDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(SysUserRequestManager), staticDelegateStr(SysUserRequestManager, constructFromMenuItemDelegate))]
    public static void SysUserRequestManager_constructFromMenuItemDelegate(menuItemName _menuItemName, EventHandlerResult result)
    {
        switch (_menuItemName)
        {
            case menuItemDisplayStr(VendVendorPortalUserRequestListPageFiltered):
            //Fall through
            case menuItemDisplayStr(VendVendorPortalUserRequestListPage):
            //Fall through
            case menuItemDisplayStr(VendorCollaborationUserRequestsTile):
                VendVendorPortalUserRequestManager vendorPortalUserRequestManager = VendVendorPortalUserRequestManager::construct();
                vendorPortalUserRequestManager.parmCallerMenuItemName(_menuItemName);
                result.result(vendorPortalUserRequestManager);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedExternalEntityTypeVendorSecurityRoles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>RecIds</c> of the external entity type vendor security roles currently assigned to the <c>DirPerson</c> record.
    /// </summary>
    /// <param name = "_person">
    ///   A <c>DirPersonRecId</c> of Person to get security role for.
    /// </param>
    /// <returns>
    ///   Set containing <c>RecId</c> of the external entity type vendor security roles.
    ///  </returns>
    public set getAssignedExternalEntityTypeVendorSecurityRoles(DirPersonRecId _person)
    {
        if (!_person)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Set assignedRoles = new Set(Types::Int64);

        DirExternalRole  externalRole;
        SecurityUserRole userRole;
        DirPersonUser    dirPersonUser;

        while select crosscompany externalRole
            exists join userRole
            where  externalRole.EntityType == UserExternalPartyEntityType::Vendor
                && externalRole.Role == userRole.SecurityRole
                exists join dirPersonUser
                where dirPersonUser.User         == userRole.User
                    && dirPersonUser.PersonParty == _person
        {
            assignedRoles.add(externalRole.Role);
        }

        return assignedRoles;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnlyExternalEntityTypeVendorSecurityRolesAssigned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if only the external entity type vendor security roles are assigned to the <c>DirPersonRecId</c> person.
    /// </summary>
    /// <param name = "_person">
    ///   A <c>DirPersonRecId</c> of Person.
    /// </param>
    /// <returns>true if only the external entity type vendor security roles are assigned, otherwise false.</returns>
    protected boolean isOnlyExternalEntityTypeVendorSecurityRolesAssigned(DirPersonRecId _person)
    {
        return this.isOnlyExternalSecurityRolesAssigned(_person, UserExternalPartyEntityType::Vendor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnlyExternalEntityTypeProspectiveVendorSecurityRolesAssigned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if only the external entity type prospective vendor security roles are assigned to the <c>DirPersonRecId</c> person.
    /// </summary>
    /// <param name = "_userRequest">
    ///   A <c>SysUserRequest</c> vendor portal user request.
    /// </param>
    /// <returns>true if only the external entity type prospective vendor security roles are assigned, otherwise false.</returns>
    protected boolean isOnlyExternalEntityTypeProspectiveVendorSecurityRolesAssigned(SysUserRequest _userRequest)
    {
        return _userRequest.RequestAction == SysUserRequestAction::MaintainUser
               && DirPersonUser::findParty(_userRequest.Person).isActiveProspectiveVendorUser()
               && this.isOnlyExternalSecurityRolesAssigned(_userRequest.Person, UserExternalPartyEntityType::ProspectiveVendor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the newly provisioned user account by creating user relations to the contact person described in the request.
    /// </summary>
    /// <param name = "_userRequest">
    ///   A <c>SysUserRequest</c> vendor portal user request.
    /// </param>
    protected void configureUser(SysUserRequest _userRequest)
    {
        VendVendorPortalUserRequest userRequest = _userRequest as VendVendorPortalUserRequest;

        if (!userRequest)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        UserInfo userInfo = xUserInfo::userInfoByUserAlias(userRequest.UserAlias);
        SysUserInfo sysUserInfo = SysUserInfo::find(userInfo.id, true);

        if (userInfo && sysUserInfo)
        {
            switch (_userRequest.RequestAction)
            {
                case SysUserRequestAction::MaintainUser:
                    //Fall through
                case SysUserRequestAction::AddUser:
                    FormRunConfigurationOptions::disallowPersonalization(userRequest.User);

                    VendProspectiveVendorRegistrationRequest registrationRequest = VendProspectiveVendorRegistrationRequest::findByUserRequestId(userRequest.RequestID, true);
                    if (registrationRequest && registrationRequest.RequestState == VendProspectiveVendorRegistrationRequestState::UserRequested)
                    {
                        changecompany (this.getDefaultCompany (_userRequest))
                        {
                            registrationRequest.setRequestStateToUserInvited();
                            registrationRequest.update();

                            sysUserInfo.StartPage = menuItemDisplayStr(VendProspectiveVendorRegistrationWizard);
                            sysUserInfo.update();
                        }
                    }
                    else
                    {
                        DirPersonUser::createDirPersonUser(userRequest.User, userRequest.Person);
                    }

                    break;

                default :
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            throw error(strFmt("@SCM:CouldNotFindUserInformationForUserAlias", userRequest.UserAlias));
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContactPersonsVendorPortalAccess</Name>
				<Source><![CDATA[
    private void updateContactPersonsVendorPortalAccess(Map _mapVendorPortalAcess, SysUserRequestAction _userRequestAction)
    {
        MapEnumerator mapVendorPortalAcessEnumerator = new MapEnumerator(_mapVendorPortalAcess);

        ttsbegin;

        while (mapVendorPortalAcessEnumerator.moveNext())
        {
            ContactPerson contactPerson = mapVendorPortalAcessEnumerator.currentKey() as ContactPerson;
            contactPerson.setVendorPortalAccess(_userRequestAction == SysUserRequestAction::InactivateUser ? NoYes::No : mapVendorPortalAcessEnumerator.currentValue());
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContactPersonsVendorPortalAccessAndSubmitVendorPortalUserRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the vendor portal access to the chosen values and then submits vendor portal user request to the workflow.
    /// </summary>
    /// <param name = "_userRequest">
    ///  A <c>VendVendorPortalTmpUserRequest</c> record containing the user request.
    /// </param>
    /// <param name = "_mapVendorPortalAcess">
    ///  A <c>Map</c> containing user selection for allowing or removing vendor portal access on the contacts.
    /// </param>
    /// <param name = "_mapAssignedSecurityRole">
    ///  A <c>Map</c> containing user selection for granting or removing security role to the contact the person user.
    /// </param>
    public void updateContactPersonsVendorPortalAccessAndSubmitVendorPortalUserRequest(VendVendorPortalTmpUserRequest _userRequest, Map _mapVendorPortalAcess, Map _mapAssignedSecurityRole)
    {
        if (!_userRequest.Person || _userRequest.ProspectiveVendorUserRequest)
        {
            throw error("@SCM:InvalidUserRequestForVendor");
        }

        if (_userRequest.RequestAction != SysUserRequestAction::MaintainUser)
        {
            this.updateContactPersonsVendorPortalAccess(_mapVendorPortalAcess, _userRequest.RequestAction);
        }

        this.createUserRequest(_userRequest, _mapAssignedSecurityRole);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProspectiveVendorUserCreationRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates prospective vendor user creation request for the prospective vendor registration request.
    /// and submits the request to the user request workflow.
    /// </summary>
    /// <param name = "_requestRecId">
    ///  A <c>VendProspectiveVendorRegistrationRequestRecId</c> of the prospective vendor registration request record.
    /// </param>
    public void createProspectiveVendorUserCreationRequest(VendProspectiveVendorRegistrationRequestRecId _requestRecId)
    {
        DataAreaId requestCompany = VendProspectiveVendorRegistrationRequest::find(_requestRecId).RequestCompany;

        changecompany(requestCompany? requestCompany : curext())
        {
            VendVendorPortalTmpUserRequest userRequest;
            userRequest.initFromProspectiveVendorRegistrationRequest(_requestRecId, SysUserRequestAction::AddUser);

	        SecurityRole securityRole;
            
            select firstonly securityRole where securityRole.AotName == roleStr(VendProspectiveVendorExternal);
            if (!securityRole.RecId)
            {
                throw error(strFmt("@SCM:SecurityRoleNotFound", "@SCM:ProspectiveVendorSecurityRole"));
            }

            Map mapAssignedSecurityRole = new Map(Types::Int64, Types::Enum);

            mapAssignedSecurityRole.insert(securityRole.Recid, NoYes::Yes);
            userRequest.validateVendorPortalUserRequest(null, mapAssignedSecurityRole);

            this.createUserRequest(userRequest, mapAssignedSecurityRole);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainVendorExternalAdminPrivilegesForProspectiveVendorUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates user maintenance request to elevate prospective vendor user privileges to vendor external admin privileges.
    /// </summary>
    /// <param name = "_contactPerson">The <c>ContactPerson</c> record associated to the prospective vendor user account.</param>
    /// <param name = "_contactDirPerson">The <c>DirPerson</c> record associated to the prospective vendor user account.</param>
    public void maintainVendorExternalAdminPrivilegesForProspectiveVendorUser(ContactPerson _contactPerson, DirPerson _contactDirPerson)
    {
        VendVendorPortalTmpUserRequest userRequest;
        userRequest.initFromDirPerson(_contactDirPerson.RecId, SysUserRequestAction::MaintainUser);
        userRequest.ProspectiveVendorUserRequest = NoYes::Yes;
        userRequest.BusinessJustification = "@SCM:BusinessJustificationForUserRequestToGrantNewVendorUserSecurityRoles";

        Map mapRequestedSecurityRole = new Map(Types::Int64, Types::Enum);
        
        SecurityRole    securityRole;
        DirExternalRole vendorExternalRole;

        while select RecId from securityRole
            exists join vendorExternalRole
                where securityRole.RecId            == vendorExternalRole.Role
                  &&  vendorExternalRole.EntityType == UserExternalPartyEntityType::Vendor
        {
            mapRequestedSecurityRole.insert(securityRole.RecId, NoYes::Yes);
        }
        
        Map mapVendorPortalAcess = new Map(Types::Record, Types::Enum);
        mapVendorPortalAcess.insert(_contactPerson, true);

        this.updateContactPersonsVendorPortalAccess(mapVendorPortalAcess, userRequest.RequestAction);
        this.createSysUserRequestAndSubmitToWorkFlow(userRequest, mapRequestedSecurityRole);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProspectiveVendorUserDeactivationRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates prospective vendor user deactivation request for the prospective vendor registration request
    /// and submits the request to the user request workflow.
    /// </summary>
    /// <param name = "_requestRecId">
    ///  A <c>VendProspectiveVendorRegistrationRequestRecId</c> of the prospective vendor registration request record.
    /// </param>
    public void createProspectiveVendorUserDeactivationRequest(VendProspectiveVendorRegistrationRequestRecId _requestRecId)
    {
        VendVendorPortalTmpUserRequest userRequest;
        userRequest.initFromProspectiveVendorRegistrationRequest(_requestRecId, SysUserRequestAction::InactivateUser, "@SCM:UserAccountNotNeededForProspectiveVendorUser");
        userRequest.validateVendorPortalUserRequest(null, null);

        this.createSysUserRequestAndSubmitToWorkFlow(userRequest, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUserRequest</Name>
				<Source><![CDATA[
    private void createUserRequest(VendVendorPortalTmpUserRequest _userRequest, Map _mapAssignedSecurityRole)
    {
        str successMessage;
        str failureMessage;
        boolean canSubmitToWorkFlow = false;

        [canSubmitToWorkFlow, successMessage, failureMessage] = this.canSubmitVendorPortalUserRequestToWorkFlow(_userRequest);

        if (canSubmitToWorkFlow && this.createSysUserRequestAndSubmitToWorkFlow(_userRequest, _mapAssignedSecurityRole))
        {
            info(successMessage);
        }
        else
        {
            error(failureMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitVendorPortalUserRequestToWorkFlow</Name>
				<Source><![CDATA[
    private container canSubmitVendorPortalUserRequestToWorkFlow(VendVendorPortalTmpUserRequest _userRequest)
    {
        boolean canSubmitToWorkFlow = false;
        str failureMessage;
        str successMessage;

        switch (_userRequest.RequestAction)
        {
            case SysUserRequestAction::AddUser:

                if (_userRequest.ProspectiveVendorUserRequest)
                {
                    successMessage = strFmt("@SCM:ProspectiveVendorRequestSubmittedToWorkFlow", VendProspectiveVendorRegistrationRequestState::UserInvited);
                    failureMessage = "@SCM:ProspectiveVendorRequestNotSubmittedToWorkFlow";
                }
                else
                {
                    successMessage = "@SCM:AccessSettingSuccessfullyAppliedRequestSubmittedToWorkFlow";
                    failureMessage = "@SCM:AccessSettingSuccessfullyAppliedRequestNotSubmittedToWorkFlow";
                }

                break;

            case SysUserRequestAction::InactivateUser:
                successMessage = "@SCM:AccessSettingSuccessfullyRemovedRequestSubmittedToWorkFlow";
                failureMessage = "@SCM:AccessSettingSuccessfullyRemovedRequestNotSubmittedToWorkFlow";

                break;

            case SysUserRequestAction::MaintainUser:
                successMessage = "@SCM:UserAccountRolesChangeRequestSubmittedToWorkFlow";
                failureMessage = "@SCM:UserAccountRolesChangeRequestNotSubmittedToWorkFlow";

                break;

            default :
                failureMessage = '@SCM:UnknownErrorHasOccurred';
                break;
        }

        if (this.isUserAliasValidForSysUserRequestAction(_userRequest.UserAlias, _userRequest.Person, _userRequest.RequestAction)
             && (_userRequest.ProspectiveVendorUserRequest 
                    || this.isOnlyExternalEntityTypeVendorSecurityRolesAssigned(_userRequest.Person))
             && (_userRequest.RequestAction == SysUserRequestAction::AddUser
			        || !ContactPerson::findByPartyRecId(_userRequest.Person).partyOfVendorContactPersonHasVendorContactRelationToOtherVendors()
				    || this.isPrivilegedUserToSubmitVendorPortalUserRequest()))
        {
			canSubmitToWorkFlow = true;
        }

        return [canSubmitToWorkFlow, successMessage, failureMessage];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSysUserRequestAndSubmitToWorkFlow</Name>
				<Source><![CDATA[
    private boolean createSysUserRequestAndSubmitToWorkFlow(VendVendorPortalTmpUserRequest _userRequest, Map _mapAssignedSecurityRole)
    {
        SysUserRequestID requestID =  VendVendorPortalUserRequestManager::construct().newRequestID();
        VendVendorPortalUserRequest vendorPortalUserRequest;

        ttsbegin;
        vendorPortalUserRequest.initFrom(_userRequest);
        vendorPortalUserRequest.RequestID = requestID;
        vendorPortalUserRequest.insert();

        if (_userRequest.RequestAction != SysUserRequestAction::InactivateUser)
        {
            this.createSecurityRolesRequest(requestID, _mapAssignedSecurityRole);
        }
        else
        {
            this.addExistingSecurityRolesToUserRequest(requestID, _userRequest.Person);
        }

        VendVendorPortalUserRequestWorkflow::submit(vendorPortalUserRequest.RequestID);

        if (_userRequest.ProspectiveVendorUserRequest && _userRequest.RequestAction == SysUserRequestAction::AddUser)
        {
            VendProspectiveVendorRegistrationRequest prospectiveVendorRegistrationRequest = VendProspectiveVendorRegistrationRequest::findByEmail(_userRequest.UserAlias, true);
            if (!prospectiveVendorRegistrationRequest)
            {
                throw error(strFmt("@SCM:CouldNotFindExternalRegistrationRequestForUserAlias", _userRequest.UserAlias));
            }

            prospectiveVendorRegistrationRequest.UserRequestID = vendorPortalUserRequest.RequestID;
            prospectiveVendorRegistrationRequest.setRequestStateToUserRequested();
            prospectiveVendorRegistrationRequest.update();
        }

        ttscommit;

        vendorPortalUserRequest.reread();

        return vendorPortalUserRequest.isSubmitted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSecurityRolesRequest</Name>
				<Source><![CDATA[
    private void createSecurityRolesRequest(SysUserRequestID _requestID,  Map _mapAssignedSecurityRole)
    {
        ttsbegin;

        RecordInsertList userRequestSecurityRolesList;
        SysUserRequestSecurityRoles userRequestSecurityRoles;
        MapEnumerator mapAssignedSecurityRoleEnumerator = new MapEnumerator(_mapAssignedSecurityRole);

        userRequestSecurityRolesList = new RecordInsertList(tableNum(SysUserRequestSecurityRoles));

        while (mapAssignedSecurityRoleEnumerator.moveNext())
        {
            if (mapAssignedSecurityRoleEnumerator.currentValue() == NoYes::Yes)
            {
                userRequestSecurityRoles.RequestID = _requestID;
                userRequestSecurityRoles.RequestedRole = mapAssignedSecurityRoleEnumerator.currentKey();
                userRequestSecurityRolesList.add(userRequestSecurityRoles);
            }
        }

        userRequestSecurityRolesList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExistingSecurityRolesToUserRequest</Name>
				<Source><![CDATA[
    private void addExistingSecurityRolesToUserRequest(SysUserRequestID _requestID, DirPersonRecId _person)
    {
        ttsbegin;

        RecordInsertList userRequestSecurityRolesList;
        SysUserRequestSecurityRoles userRequestSecurityRoles;
        SecurityUserRole userRole;
        DirPersonUser dirPersonUser;

        userRequestSecurityRolesList = new RecordInsertList(tableNum(SysUserRequestSecurityRoles));
        
        if(_person)
        {
            while select crosscompany userRole
                exists join dirPersonUser
                    where dirPersonUser.User         == userRole.User
                        && dirPersonUser.PersonParty == _person
            {
                userRequestSecurityRoles.RequestID = _requestID;
                userRequestSecurityRoles.RequestedRole = userRole.SecurityRole;

                userRequestSecurityRolesList.add(userRequestSecurityRoles);
            }
        }
        else
        {
            while select crosscompany userRole
                where userRole.User == xUserInfo::userInfoByUserAlias(SysUserRequest::findByUserRequestId(_requestID).UserAlias).id
            {
                userRequestSecurityRoles.RequestID = _requestID;
                userRequestSecurityRoles.RequestedRole = userRole.SecurityRole;

                userRequestSecurityRolesList.add(userRequestSecurityRoles);
            }
        }

        userRequestSecurityRolesList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserExternal</Name>
				<Source><![CDATA[
    public boolean isUserExternal(SysUserRequest _userRequest)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserTypeSelectionAllowed</Name>
				<Source><![CDATA[
    public boolean isUserTypeSelectionAllowed(SysUserRequest _userRequest)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserReprovisioningAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if user reprovisioning is allowed.
    /// </summary>
    /// <param name = "_userRequest">
    ///  A <c>SysUserRequest</c> record of the vendor portal user reqeust.
    /// </param>
    /// <param name = "_userInfo">
    ///  A <c>UserInfo</c> record of the user.
    /// </param>
    /// <returns>true if user reprovisioning is allowed, otherwise false</returns>
    public boolean isUserReprovisioningAllowed(SysUserRequest _userRequest, UserInfo _userInfo)
    {
        VendVendorPortalUserRequest userRequest = _userRequest as VendVendorPortalUserRequest;

        return this.isUserAliasValidForSysUserRequestAction(userRequest.UserAlias, userRequest.Person, userRequest.RequestAction)
             && (VendProspectiveVendorRegistrationRequest::findByUserRequestId(userRequest.RequestID)
                    || this.isOnlyExternalEntityTypeVendorSecurityRolesAssigned(userRequest.Person)
                    || this.isOnlyExternalEntityTypeProspectiveVendorSecurityRolesAssigned(_userRequest))
             && (!ContactPerson::findByPartyRecId(userRequest.Person).partyOfVendorContactPersonHasVendorContactRelationToOtherVendors(userRequest.CreatedBy)
                    || this.isPrivilegedUserToSubmitVendorPortalUserRequest(userRequest.CreatedBy));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrivilegedUserToSubmitVendorPortalUserRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the provided <c>UserId</c> user has privileged security rights to submit vendor portal user request.
    /// The <c>UserId</c> is defaulted to current user id.
    /// </summary>
    /// <param name = "_userId">
    ///  A <c>UserId</c> to validate for.
    /// </param>
    /// <returns>true if user has privileged rights to submit vendor portal user request, otherwise false. </returns>
    protected boolean isPrivilegedUserToSubmitVendorPortalUserRequest(UserId _userId = curUserId())
    {
        SecurityRights securityRights = SecurityRights::newUser(_userId);
        AccessRight result = securityRights.menuItemAccessRight(SecurableType::MenuItemAction, menuItemActionStr(SysUserRequestSubmit));

        return result == AccessRight::Delete ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inactivateUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inactivates vendor portal user and resets the vendor portal access on related contacts.
    /// </summary>
    /// <param name = "_userRequest">A <c>SysUserRequest</c> record of the vendor portal user request.</param>
    public void inactivateUser(SysUserRequest _userRequest)
    {
        super (_userRequest);

        if (!xUserInfo::find(false, _userRequest.User).enable)
        {
            VendVendorPortalUserRequest userRequest = _userRequest as VendVendorPortalUserRequest;

            Unchecked(Uncheck::XDS)
            {
                ContactPerson contactPerson;

                while select crosscompany contactPerson
                    where contactPerson.Party == userRequest.Person
                     && contactPerson.VendorPortalAccessAllowed == NoYes::Yes
                {
                    contactPerson.setVendorPortalAccess(NoYes::No);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExistingUserExposureAllowed</Name>
				<Source><![CDATA[
    public boolean isExistingUserExposureAllowed(SysUserRequest _userRequest, UserInfo _userInfo)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExistingUserRoleAssignmentsMustBeKept</Name>
				<Source><![CDATA[
    public boolean isExistingUserRoleAssignmentsMustBeKept(SysUserRequest _userRequest, UserInfo _userInfo)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserAliasValidForSysUserRequestAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the <c>NetworkAlias</c> is a valid value for the <c>SysUserRequestAction</c> action.
    /// </summary>
    /// <param name="_userAlias">
    ///  The <c>NetworkAlias</c> to validate.
    /// </param>
    /// <param name = "_person">
    ///   The <c>DirPersonRecId</c> of Person to validate alias for.
    /// </param>
    /// <param name = "_userRequestAction">
    ///   The <c>SysUserRequestAction</c> value.
    /// </param>
    /// <returns>true if the alias is valid for the action, otherwise false </returns>
    protected boolean isUserAliasValidForSysUserRequestAction(NetworkAlias _userAlias, DirPersonRecId _person, SysUserRequestAction _userRequestAction)
    {
        boolean result;
        UserInfo userInfo = xUserInfo::userInfoByUserAlias(_userAlias);

        switch (_userRequestAction)
        {
            case SysUserRequestAction::AddUser:
                if (strLen(userInfo.networkAlias) == 0
                    || (userInfo.networkAlias == _userAlias && DirPersonUser::findParty(_person).User == userInfo.id))
                {
                    result = true;
                }
                break;

            case SysUserRequestAction::InactivateUser:
                //Fall through
            case SysUserRequestAction::MaintainUser:
                if (userInfo.networkAlias == _userAlias && DirPersonUser::findParty(_person).User == userInfo.id)
                {
                    result = true;
                }
                break;

            default :
                result = false;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateListPageQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the list page query.
    /// </summary>
    /// <param name="_query">
    ///   The query to update.
    /// </param>
    public void updateListPageQuery(Query _query)
    {
        super(_query);

        if (((this.parmCallerMenuItemName() == menuItemDisplayStr(VendVendorPortalUserRequestListPageFiltered))
            || (this.parmCallerMenuItemName() == menuItemDisplayStr(VendorCollaborationUserRequestsTile)))
            && !SecurityRights::construct().isSystemAdministrator())
        {
            QueryBuildRange range;

            range = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(SysUserRequest)), fieldNum(SysUserRequest, createdBy));
            range.status(RangeStatus::Hidden);
            range.value(SysQueryRangeUtil::value(curUserId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the automated action described in the provided user request, such as
    /// adding, inactivating or maintaining the user security roles.
    /// </summary>
    /// <param name = "_userRequest">The user request to provision, inactivate or otherwise modify a user</param>
    public void performRequest(SysUserRequest _userRequest)
    {
        switch (_userRequest.RequestAction)
        {
            case SysUserRequestAction::MaintainUser:
                //Fall through
            case SysUserRequestAction::AddUser:
                this.provisionUser(_userRequest);
                break;

            case SysUserRequestAction::InactivateUser:
                this.inactivateUser(_userRequest);
                break;

            default :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysUserRequestManager_updatePreviewPaneDesignDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(SysUserRequestManager), staticDelegateStr(SysUserRequestManager, updatePreviewPaneDesignDelegate))]
    public static void SysUserRequestManager_updatePreviewPaneDesignDelegate(SysUserRequestManager userRequestManager, SysUserRequest userRequest, FormRun sysUserRequestPreviewPaneFormRun)
    {
        boolean isPersonControlVisible = (userRequestManager != null && userRequestManager.entityType() == SysUserRequestEntityType::VendorPortalUser);

        sysUserRequestPreviewPaneFormRun.control(sysUserRequestPreviewPaneFormRun.controlId(formControlStr(SysUserRequestPreviewPane, SysUserRequest_VendVendorPortalUserRequest_Person))).visible(isPersonControlVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCompany</Name>
				<Source><![CDATA[
    protected dataAreaId getDefaultCompany(SysUserRequest _userRequest)
    {
        VendVendorPortalUserRequest addUserRequest = _userRequest as VendVendorPortalUserRequest;

        if (addUserRequest && addUserRequest.RequestCompany)
        {
           return addUserRequest.RequestCompany;
        }

        VendProspectiveVendorRegistrationRequest registrationRequest = VendProspectiveVendorRegistrationRequest::findByUserRequestId(_userRequest.RequestID, true);
        
        return registrationRequest && registrationRequest.RequestCompany ? registrationRequest.RequestCompany : super(_userRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnlyExternalSecurityRolesAssigned</Name>
				<Source><![CDATA[
    private boolean isOnlyExternalSecurityRolesAssigned(DirPersonRecId _person, UserExternalPartyEntityType _entityType)
    {
        if (!_person)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        DirExternalRole  externalRole;
        SecurityRole     securityRole;
        SecurityUserRole userRole;
        DirPersonUser    dirPersonUser;

        select firstonly crosscompany userRole
            exists join dirPersonUser
                where dirPersonUser.User         == userRole.User
                    && dirPersonUser.PersonParty == _person
            exists join securityRole
                where securityRole.RecID == userRole.SecurityRole
                    && securityRole.AotName != roleStr(SystemExternalUser)
                    notexists join externalRole
                        where externalRole.EntityType == _entityType
                        && externalRole.Role == securityRole.RecID;

        return userRole.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendorPortalUserAccessToAtLeastOneVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate vendor portal user has access to at least one vendor.
    /// </summary>
    /// <param name = "_formRun">The form instance.</param>
    [Hookable(false)]
    internal static void validateVendorPortalUserAccessToAtLeastOneVendor(FormRun _formRun)
    {
        VendTable vendTable = VendTable::getFirstOrNull();
        DirPersonUser personUser = DirPersonUser::find(curUserId());

        if (!vendTable 
            && personUser 
            && VendVendorPortalUserRequestManager::construct().isOnlyExternalEntityTypeVendorSecurityRolesAssigned(personUser.PersonParty))
        {
            error("@SCM:VendorPortalInsufficientRights");
            _formRun.close();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>