<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanCreateForecastResumeProcessHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class used in restart or resume of generate forecast batch process.
/// </summary>
internal final class ReqDemPlanCreateForecastResumeProcessHelper
{
    private ReqDemPlanRestartResumeAction processAction;
    private boolean firstRun;

    private Batch batchTask;
    private ReqDemPlanGeneratedForecastRecId forecastId;
    private ReqDemPlanInstrumentationLogger reqInstrumentationLogger;

    private ReqDemPlanForecastCreateProcessStage currentStage;
    private ReqDemPlanForecastCreateProcessStage completedStage;

    private ReqDemPlanGeneratedForecast resumeForecastContext;
    private ReqDemPlanTaskLoggerInterface taskLoggerForResume;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaskLoggerForResume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a task logger to be used for process resume.
    /// </summary>
    /// <returns>The instance of the <c>ReqDemPlanTaskLoggerInterface</c>.</returns>
    /// <remarks>
    /// The original forecast process task logger is reinitialised to be able to continue logging.
    /// </remarks>
    public ReqDemPlanTaskLoggerInterface getTaskLoggerForResume()
    {
        if (!taskLoggerForResume)
        {
            taskLoggerForResume  = ReqDemPlanTaskLogger::constructInstrumentedAttached(reqInstrumentationLogger, resumeForecastContext.TaskCollection);
        }

        return taskLoggerForResume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Begins the generate forecast process by updating the <c>ReqDemPlanGeneratedForecast</c> record with resume data.
    /// </summary>
    public void beginProcess()
    {
        ttsbegin;

        ReqDemPlanGeneratedForecast reqDemPlanGeneratedForecast = ReqDemPlanGeneratedForecast::find(forecastId, true);

        reqDemPlanGeneratedForecast.Stage = ReqDemPlanForecastCreateProcessStage::Starting;
        reqDemPlanGeneratedForecast.BatchTask = batchTask.RecId;

        reqDemPlanGeneratedForecast.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends the generate forecast process by updating the <c>ReqDemPlanGeneratedForecast</c> record status to Ended.
    /// </summary>
    public void endProcess()
    {
        ReqDemPlanGeneratedForecast::setStage(forecastId, ReqDemPlanForecastCreateProcessStage::Ended);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStageCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completes current stage and save it in <c>ReqDemPlanGeneratedForecast</c> record.
    /// </summary>
    public void processStageCompleted()
    {
        ReqDemPlanGeneratedForecast::setStage(forecastId, currentStage);

        completedStage = currentStage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets current stage for generate forecast process.
    /// </summary>
    /// <param name="_stage">
    ///     The process stage.
    /// </param>
    /// <returns>The current stage.</returns>
    public ReqDemPlanForecastCreateProcessStage parmProcessStage(ReqDemPlanForecastCreateProcessStage _stage = currentStage)
    {
        currentStage = _stage;
        return currentStage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldExecuteProcessStage</Name>
				<Source><![CDATA[
    internal boolean shouldExecuteProcessStage()
    {
        if (processAction == ReqDemPlanRestartResumeAction::Restart)
        {
            return true;
        }
        else
        {
            return currentStage > completedStage;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadResumeContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads resume information for current generate forecast batch process.
    /// </summary>
    public void loadResumeContext()
    {
        resumeForecastContext = ReqDemPlanGeneratedForecast::findByBatchTask(batchTask.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareRestartResume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and prepares the restart/resume action.
    /// </summary>
    /// <returns>true if an action has been defined; otherwise, false if processing should be stopped.</returns>
    public boolean prepareRestartResume()
    {
        if (firstRun)
        {
            // Recurring batch jobs have the same batchTaskId, hence multiple ReqDemPlanGeneratedForecast records
            // can be linked to the specific batchTaskId. 
            // In order to enable restart/resume, we dissociate ReqDemPlanGeneratedForecast
            // records of previous runs from their batchTaskIds if they have the batchTaskId of the current run.
            // This is done in the beginning of every new run.

            ReqDemPlanCreateForecastResumeProcessHelper::clearBatchTaskForPreviousRuns(batchTask.RecId);
        }

        this.selectAndValidateAction();

        return processAction != ReqDemPlanRestartResumeAction::Stop;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAndValidateAction</Name>
				<Source><![CDATA[
    private void selectAndValidateAction()
    {
        if (firstRun)
        {
            processAction = ReqDemPlanRestartResumeAction::Restart;
        }

        if (processAction == ReqDemPlanRestartResumeAction::Undefined
            && !resumeForecastContext)
        {
            warning("@DMP:NoGeneratedForecastRecordDoProcessRestart");

            processAction = ReqDemPlanRestartResumeAction::Restart;
        }

        if (processAction == ReqDemPlanRestartResumeAction::Undefined
            && !this.isLatestForecastResumed())
        {
            // A process can not continue as it might be confusing and have side effects.
            warning("@DMP:NewForecastRunDetectedStopProcessing");
            processAction = ReqDemPlanRestartResumeAction::Stop;
        }

        if (processAction == ReqDemPlanRestartResumeAction::Undefined 
            && !this.shouldForecastProcessBeResumed())
        {
            processAction = ReqDemPlanRestartResumeAction::Restart;
        }

        if (processAction == ReqDemPlanRestartResumeAction::Undefined)
        {
            processAction = ReqDemPlanRestartResumeAction::Resume;
        }

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setForecastId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a generate forecast Id.
    /// </summary>
    /// <param name="_forecastId">
    ///     The generate forecast Id.
    /// </param>
    public void setForecastId(ReqDemPlanGeneratedForecastRecId _forecastId)
    {
        forecastId = _forecastId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canResume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets if generate forecast process can be resumed or restarted.
    /// </summary>
    /// <returns>True if it can be resumed; otherfise false for restart.</returns>
    public boolean canResume()
    {
        return processAction == ReqDemPlanRestartResumeAction::Resume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resumeProcess</Name>
				<Source><![CDATA[
    public void resumeProcess(ReqDemPlanTaskLoggerInterface _logger)
    {
        _logger.startMonitoredTask(ReqDemPlanTaskCodes::ProcessBatchResume, "@DMP:ReqDemPlanForecastCreateResumeProcess");

        completedStage = resumeForecastContext.Stage;
        this.setForecastId(resumeForecastContext.RecId);

        _logger.finishTask(strFmt("@DMP:GenerateForecastProcessResumeInfo", resumeForecastContext.Stage, batchTask.retryCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldForecastProcessBeResumed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets if recorded process stage allows the resume.
    /// </summary>
    /// <returns>
    /// True if if the process should be resumed; otherwise false, for restart.
    /// </returns>
    /// <remarks>
    /// Up to SaveGeneratedForecastInfo phase, no significant work has been completed, process can be simply restarted.
    /// </remarks>
    private boolean shouldForecastProcessBeResumed()
    {
        return resumeForecastContext.Stage > ReqDemPlanForecastCreateProcessStage::SaveGeneratedForecastInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLatestForecastResumed</Name>
				<Source><![CDATA[
    private boolean isLatestForecastResumed()
    {
        return ReqDemPlanGeneratedForecast::findLatest().RecId == resumeForecastContext.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBatchTaskForPreviousRuns</Name>
				<Source><![CDATA[
    private static void clearBatchTaskForPreviousRuns(RefRecId _batchTaskRecId)
    {
        try
        {
            ReqDemPlanGeneratedForecast reqDemPlanGeneratedForecast;

            ttsbegin;

            update_recordset reqDemPlanGeneratedForecast
                setting BatchTask = 0
                where reqDemPlanGeneratedForecast.BatchTask == _batchTaskRecId;

            ttscommit;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and initialises an instance of <c>ReqDemPlanCreateForecastResumeProcessHelper</c>.
    /// </summary>
    /// <param name = "_batchTask"> Batch task record.</param>
    /// <param name = "_reqInstrumentationLogger"> Instrumentation logger to be used.</param>
    /// <returns>New instance of <c>ReqDemPlanCreateForecastResumeProcessHelper</c>.</returns>
    public static ReqDemPlanCreateForecastResumeProcessHelper construct(
        Batch _batchTask,
        ReqDemPlanInstrumentationLogger _reqInstrumentationLogger)
    {
        ReqDemPlanCreateForecastResumeProcessHelper restartResumeHelper = new ReqDemPlanCreateForecastResumeProcessHelper(_batchTask, _reqInstrumentationLogger);

        return restartResumeHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(
        Batch _batchTask,
        ReqDemPlanInstrumentationLogger _reqInstrumentationLogger)
    {
        batchTask = _batchTask;
        reqInstrumentationLogger = _reqInstrumentationLogger;

        processAction = ReqDemPlanRestartResumeAction::Undefined;
        firstRun = batchTask.retryCount == 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>