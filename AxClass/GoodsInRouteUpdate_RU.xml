<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GoodsInRouteUpdate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GoodsInRouteUpdate_RU extends GoodsInRouteEngine_RU
{
    CustInvoiceTrans        custInvoiceTrans;

    LedgerVoucher           ledgerVoucher;
    LedgerBondClient_RU     ledgerBondClient;

    SalesQty                remainQty;
    AmountCur               remainLineAmount;
    DiscAmount              remainLineDisc;
    AmountCur               remainTaxAmount;
    SalesQty                totalRemainQty;
    AmountCur               totalLineAmount;
    AmountCur               totalLineAmountInvoice;

    AmountCur               lineAmount;
    DiscAmount              lineDisc;
    AmountCur               lineAmountExclDisc;
    AmountCur               lineTaxAmount;

    ExchRate                exchRate;
    ExchRate                exchRateSecond;
    CurrencyExchangeHelper  exchangeRateHelper;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCustTrans</Name>
				<Source><![CDATA[
    private void createCustTrans()
    {
        CustVoucher         custVoucher;
        CustTrans           custTrans;
        CustTransRefType    refType;
        Num                 refId;

        LedgerTransTxt      ledgerTransTxt;

        if (custInvoiceJour.InvoiceAmount < 0)
            ledgerTransTxt = LedgerTransTxt::SalesCreditNoteCust;
        else
            ledgerTransTxt = LedgerTransTxt::SalesInvoiceCust;

        custVoucher = CustVoucher::newCustVoucherGoodsInRoute_RU(ledgerTransTxt,
                                                                 custInvoiceJour,
                                                                 goodsInRouteJour.AmountCur + goodsInRouteJour.EndDisc,
                                                                 goodsInRouteJour.AmountCur);

        custVoucher.parmExchRate(exchRate);
        custVoucher.parmExchRateSecondary(exchRateSecond);

        if (custInvoiceJour.creditNote())
        {
            refType = CustTransRefType::CreditNote;
            refId = custInvoiceJour.InvoiceId;
        }
        else
        {
            refType = CustTransRefType::Invoice;
            refId = custInvoiceJour.InvoiceId;
        }

        custVoucher.parmTransRefType(refType);
        custVoucher.parmTransRefId(refId);

        custVoucher.parmBypassCreditCheck(PaymTerm::find(custInvoiceJour.Payment).CreditCardCreditCheck  == CreditCardCreditCheck::ByPass);
        custVoucher.post(ledgerVoucher, custTrans, NoYes::No,Currency::noYes2UnknownNoYes(custInvoiceJour.Triangulation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeRateHelper</Name>
				<Source><![CDATA[
    private CurrencyExchangeHelper exchangeRateHelper(TransDate _exchangeDate,
                                                     ExchRate  _exchRate        = exchRate,
                                                     ExchRate  _exchRateSecond  = exchRateSecond)
    {
        if (! exchangeRateHelper                                    ||
           exchangeRateHelper.parmExchangeDate()  != _exchangeDate  ||
           exchangeRateHelper.parmExchangeRate1() != _exchRate      ||
           exchangeRateHelper.parmExchangeRate2() != _exchRateSecond)
        {
            exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), _exchangeDate);
            exchangeRateHelper.parmExchangeRate1(_exchRate);
            exchangeRateHelper.parmExchangeRate2(_exchRateSecond);
        }

        return exchangeRateHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postEndDisc</Name>
				<Source><![CDATA[
    private void postEndDisc()
    {
        LedgerVoucherObject     ledgerVoucherObject;
        LedgerDimensionAccount  ledgerDimensionMerged;
        GoodsInRouteJour_RU     goodsInRouteJourSum;

        if (! totalRemainQty)
        {
            select sum(AmountCur), sum(EndDisc) from goodsInRouteJourSum
                where goodsInRouteJourSum.InvoiceRecId == custInvoiceJour.RecId;

            goodsInRouteJour.EndDisc = custInvoiceJour.EndDisc - goodsInRouteJourSum.EndDisc;
        }
        else
        {
            if (totalLineAmountInvoice && custInvoiceJour.EndDisc)
            {
                goodsInRouteJour.EndDisc = CurrencyExchangeHelper::amount(custInvoiceJour.EndDisc * totalLineAmount / totalLineAmountInvoice, custInvoiceJour.CurrencyCode);
            }
        }

        if (! goodsInRouteJour.EndDisc)
        {
            return;
        }

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerSystemAccounts::getDefaultAccount(LedgerPostingType::CustInvoiceDisc), custInvoiceJour.DefaultDimension);

        ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                                    ledgerVoucherObject,
                                    LedgerPostingType::CustInvoiceDisc,
                                    ledgerDimensionMerged,
                                    custInvoiceJour.CurrencyCode,
                                    goodsInRouteJour.EndDisc,
                                    this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate())));

        ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(CustLedgerAccounts::summaryLedgerDimension(custInvoiceJour.InvoiceAccount, custInvoiceJour.PostingProfile), custInvoiceJour.DefaultDimension);

        ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                                    ledgerVoucherObject,
                                    LedgerPostingType::CustBalance,
                                    ledgerDimensionMerged,
                                    custInvoiceJour.CurrencyCode,
                                    -goodsInRouteJour.EndDisc,
                                    this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate())));

        if (ledgerBondClient)
        {
            ledgerBondClient.bondVRef2VRef(ledgerBondClient.lastVrefId(),
                                           ledgerBondClient.lastVrefId(-1));
        }

        goodsInRouteJour.AmountCur -= goodsInRouteJour.EndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkup</Name>
				<Source><![CDATA[
    private void postMarkup(HeadingLine _headingLine)
    {
        LedgerVoucherObject     ledgerVoucherObject;
        LedgerDimensionAccount  ledgerDimensionMerged;

        MarkupTrans             markupTrans;
        MarkupTable             markupTable;
        MarkupCustPosting_RU    markupCustPosting;

        DimensionDefault        defaultDimension;
        RefTableId              tableId;
        RefRecId                recId;

        if (_headingLine == HeadingLine::Heading)
        {
            defaultDimension    = custInvoiceJour.DefaultDimension;
            tableId             = tablenum(CustInvoiceJour);
            recId               = custInvoiceJour.RecId;
        }
        else
        {
            defaultDimension    = custInvoiceTrans.DefaultDimension;
            tableId             = tablenum(CustInvoiceTrans);
            recId               = custInvoiceTrans.RecId;
        }

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        while select forupdate markupTrans
            where markupTrans.TransTableId                  == tableId
               && markupTrans.TransRecId                    == recId
               && markupTrans.GoodsInRouteToDelivery_RU     == NoYes::Yes
               && markupTrans.CalculatedAmount
        join markupTable
            where markupTable.MarkupCode                    == markupTrans.MarkupCode
               && markupTable.UseCustPostingTypeTransit_RU  == NoYes::Yes
        {
            if (markupTable.CustType == MarkupType::CustVend)
            {
                // cust balance (later in CustVoucher) - sales revenue
                markupCustPosting = MarkupCustPosting_RU::findLedger(MarkupCustPostingType_RU::SalesRevenue,
                                                                     custInvoiceJour.InvoiceAccount,
                                                                     markupTable.MarkupCode);
                if (! markupCustPosting.LedgerDimension)
                {
                    throw error(strfmt("@GLS114840", markupTable.MarkupCode));
                }

                ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(markupCustPosting.LedgerDimension, defaultDimension);

                ledgerVoucher.addTrans(
                        LedgerVoucherTransObject::newTransactionAmountDefault(
                                            ledgerVoucherObject,
                                            LedgerPostingType::SalesRevenue,
                                            ledgerDimensionMerged,
                                            markupTrans.CurrencyCode,
                                            -(markupTrans.CalculatedAmount + markupTrans.TaxAmount),
                                            this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate(),
                                                                    markupTrans.ExchRate_RU,
                                                                    markupTrans.ExchRateSecond_RU)));

                // sales consumption - markup transit
                markupCustPosting = MarkupCustPosting_RU::findLedger(MarkupCustPostingType_RU::SalesConsumption,
                                                                     custInvoiceJour.InvoiceAccount,
                                                                     markupTable.MarkupCode);
                if (! markupCustPosting.LedgerDimension)
                {
                    throw error(strfmt("@GLS114839", markupTable.MarkupCode));
                }

                ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(markupCustPosting.LedgerDimension, defaultDimension);

                ledgerVoucher.addTrans(
                        LedgerVoucherTransObject::newTransactionAmountDefault(
                                            ledgerVoucherObject,
                                            LedgerPostingType::SalesConsump,
                                            ledgerDimensionMerged,
                                            markupTrans.CurrencyCode,
                                            markupTrans.CalculatedAmount,
                                            this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate(),
                                                                    markupTrans.ExchRate_RU,
                                                                    markupTrans.ExchRateSecond_RU)));

                markupCustPosting = MarkupCustPosting_RU::findLedger(MarkupCustPostingType_RU::Transit,
                                                                     custInvoiceJour.InvoiceAccount,
                                                                     markupTable.MarkupCode);
                if (! markupCustPosting.LedgerDimension)
                {
                    throw error(strfmt("@GLS114804", markupTable.MarkupCode));
                }

                ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(markupCustPosting.LedgerDimension, defaultDimension);

                ledgerVoucher.addTrans(
                        LedgerVoucherTransObject::newTransactionAmountDefault(
                                            ledgerVoucherObject,
                                            markupCustPosting.LedgerPostingType,
                                            ledgerDimensionMerged,
                                            markupTrans.CurrencyCode,
                                            -markupTrans.CalculatedAmount,
                                            this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate(),
                                                                    markupTrans.ExchRate_RU,
                                                                    markupTrans.ExchRateSecond_RU)));

                goodsInRouteJour.AmountCur  += markupTrans.CalculatedAmount + markupTrans.TaxAmount;
                goodsInRouteJour.TaxAmount  += markupTrans.TaxAmount;
            }
            else
            {
                ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(markupTable.CustomerLedgerDimension, defaultDimension);

                // markup debit - markup transit
                ledgerVoucher.addTrans(
                        LedgerVoucherTransObject::newTransactionAmountDefault(
                                            ledgerVoucherObject,
                                            markupTable.CustPosting,
                                            ledgerDimensionMerged,
                                            markupTrans.CurrencyCode,
                                            -markupTrans.CalculatedAmount,
                                            this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate(),
                                                                    markupTrans.ExchRate_RU,
                                                                    markupTrans.ExchRateSecond_RU)));

                markupCustPosting = MarkupCustPosting_RU::findLedger(MarkupCustPostingType_RU::Transit,
                                                                     custInvoiceJour.InvoiceAccount,
                                                                     markupTable.MarkupCode);
                if (! markupCustPosting.LedgerDimension)
                {
                    throw error(strfmt("@GLS114837", markupTable.MarkupCode));
                }

                ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(markupCustPosting.LedgerDimension, defaultDimension);

                ledgerVoucher.addTrans(
                        LedgerVoucherTransObject::newTransactionAmountDefault(
                                            ledgerVoucherObject,
                                            markupCustPosting.LedgerPostingType,
                                            ledgerDimensionMerged,
                                            markupTrans.CurrencyCode,
                                            markupTrans.CalculatedAmount,
                                            this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate(),
                                                                    markupTrans.ExchRate_RU,
                                                                    markupTrans.ExchRateSecond_RU)));
            }

            if (ledgerBondClient)
            {
                ledgerBondClient.bondVRef2VRef(ledgerBondClient.lastVrefId(),
                                               ledgerBondClient.lastVrefId(-1));
            }

            markupTrans.GoodsInRouteToDelivery_RU = NoYes::No;
            markupTrans.GoodsInRouteId_RU = goodsInRouteJour.GoodsInRouteId;
            markupTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTax</Name>
				<Source><![CDATA[
    private void postMarkupTax(HeadingLine _headingLine)
    {
        TaxTrans                taxTrans;
        TaxTrans_RU             taxTrans_RU;
        MarkupTrans             markupTrans;

        TaxLedgerAccountGroup   taxLedgerAccountGroup;
        InventTransId           inventTransId;
        DimensionDefault        defaultDimension;

        if (_headingLine == HeadingLine::Heading)
        {
            defaultDimension = custInvoiceJour.DefaultDimension;
        }
        else
        {
            defaultDimension = custInvoiceTrans.DefaultDimension;
            inventTransId    = custInvoiceTrans.InventTransId;
        }

        while select taxTrans
            where taxTrans.InventTransId                == inventTransId
               && taxTrans.Voucher                      == custInvoiceJour.LedgerVoucher
               && taxTrans.TransDate                    == custInvoiceJour.InvoiceDate
        join forUpdate taxTrans_RU
            where taxTrans_RU.TaxTrans == taxTrans.RecId
               && taxTrans_RU.GoodsInRouteToDelivery_RU    == NoYes::Yes
               && taxTrans_RU.TaxSourceType_RU             == TaxSourceType_RU::MarkupTrans
        join markupTrans
            where markupTrans.OrigRecId                 == taxTrans_RU.MarkupTransRecId_RU
               && markupTrans.Voucher                   == taxTrans.Voucher
        {
            taxLedgerAccountGroup = TaxLedgerAccountGroup::find(TaxTable::findAccountGroup(taxTrans.TaxCode));

            this.postTax(taxLedgerAccountGroup,
                         0,
                         defaultDimension,
                         taxTrans.SourceCurrencyCode,
                         -taxTrans.taxAmountCur_W(),
                         markupTrans.ExchRate_RU,
                         markupTrans.ExchRateSecond_RU);

            taxTrans_RU.GoodsInRouteToDelivery_RU = NoYes::No;
            taxTrans_RU.GoodsInRouteId_RU = goodsInRouteJour.GoodsInRouteId;
            taxTrans_RU.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSalesDisc</Name>
				<Source><![CDATA[
    private void postSalesDisc()
    {
        LedgerVoucherObject     ledgerVoucherObject;
        LedgerDimensionAccount  ledgerDimensionMerged;

        if (! lineDisc)
        {
            return;
        }

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(custInvoiceTrans.accountDisc_RU(custInvoiceJour), custInvoiceTrans.DefaultDimension);

        ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                                    ledgerVoucherObject,
                                    LedgerPostingType::SalesDisc,
                                    ledgerDimensionMerged,
                                    custInvoiceJour.CurrencyCode,
                                    lineDisc,
                                    this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate())));

        ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(custInvoiceTrans.accountSales_RU(custInvoiceJour), custInvoiceTrans.DefaultDimension);

        ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                                    ledgerVoucherObject,
                                    LedgerPostingType::SalesRevenue,
                                    ledgerDimensionMerged,
                                    custInvoiceTrans.CurrencyCode,
                                    -lineDisc,
                                    this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate())));

        if (ledgerBondClient)
        {
            ledgerBondClient.bondVRef2VRef(ledgerBondClient.lastVrefId(),
                                           ledgerBondClient.lastVrefId(-1));
        }

        ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                                    ledgerVoucherObject,
                                    LedgerPostingType::SalesRevenue,
                                    ledgerDimensionMerged,
                                    custInvoiceTrans.CurrencyCode,
                                    -lineDisc,
                                    this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate())));

        goodsInRouteJour.AmountCur  += lineDisc;
        goodsInRouteTrans.AmountCur += lineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSalesRevenue</Name>
				<Source><![CDATA[
    private void postSalesRevenue()
    {
        LedgerVoucherObject     ledgerVoucherObject;
        LedgerDimensionAccount  ledgerDimensionMerged;

        if (! lineAmountExclDisc)
        {
            return;
        }

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(custInvoiceTrans.accountSales_RU(custInvoiceJour), custInvoiceTrans.DefaultDimension);

        ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                                    ledgerVoucherObject,
                                    LedgerPostingType::SalesRevenue,
                                    ledgerDimensionMerged,
                                    custInvoiceTrans.CurrencyCode,
                                    -lineAmountExclDisc,
                                    this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate())));

        goodsInRouteTrans.SalesQty  = tmpFrmVirtual.Qty;
        goodsInRouteTrans.InventQty = tmpFrmVirtual.inventQty_RU;
        goodsInRouteTrans.PdsCWQty  = tmpFrmVirtual.PdsCWQty;
        goodsInRouteTrans.AmountCur = lineAmountExclDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    private void postTax(TaxLedgerAccountGroup          _taxLedgerAccountGroup,
                         LedgerDimensionDefaultAccount  _ledgerAccountSalesRevenue,
                         DimensionDefault               _dimension,
                         CurrencyCode                   _currencyCode,
                         AmountCur                      _amountCur,
                         ExchRate                       _exchRate,
                         ExchrateSecondary              _exchRateSecond)
    {
        LedgerVoucherObject     ledgerVoucherObject;
        LedgerDimensionAccount  ledgerDimensionMerged;

        if (! _taxLedgerAccountGroup.TaxOutgoingOffsetLedgerDimension_RU)
        {
            throw error(strfmt("@GLS103651", _taxLedgerAccountGroup.TaxAccountGroup));
        }

        if (! _taxLedgerAccountGroup.TaxGoodsInRouteLedgerDimension_RU)
        {
            throw error(strfmt("@GLS115950", _taxLedgerAccountGroup.TaxAccountGroup));
        }

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        if (_ledgerAccountSalesRevenue)
        {
            ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerAccountSalesRevenue, _dimension);

            ledgerVoucher.addTrans(
                    LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucherObject,
                                        LedgerPostingType::SalesRevenue,
                                        ledgerDimensionMerged,
                                        _currencyCode,
                                        -_amountCur,
                                        this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate(), _exchRate)));
        }

        if (_taxLedgerAccountGroup.TaxOutgoingOffsetLedgerDimension_RU == _taxLedgerAccountGroup.TaxGoodsInRouteLedgerDimension_RU ||
            ! _amountCur)
        {
            return;
        }

        // tax offset account outgoing - tax account goods in route
        ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(_taxLedgerAccountGroup.TaxOutgoingOffsetLedgerDimension_RU, _dimension);

        ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                                    ledgerVoucherObject,
                                    LedgerPostingType::Tax,
                                    ledgerDimensionMerged,
                                    _currencyCode,
                                    _amountCur,
                                    this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate(),
                                                            _exchRate,
                                                            _exchRateSecond)));

        ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(_taxLedgerAccountGroup.TaxGoodsInRouteLedgerDimension_RU, _dimension);

        ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                                    ledgerVoucherObject,
                                    LedgerPostingType::Tax,
                                    ledgerDimensionMerged,
                                    _currencyCode,
                                    -_amountCur,
                                    this.exchangeRateHelper(ledgerVoucherObject.parmAccountingDate(),
                                                            _exchRate,
                                                            _exchRateSecond)));

        if (ledgerBondClient)
        {
            ledgerBondClient.bondVRef2VRef(ledgerBondClient.lastVrefId(),
                                           ledgerBondClient.lastVrefId(-1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnLine</Name>
				<Source><![CDATA[
    private void postTaxOnLine()
    {
        TaxTrans                taxTrans;
        TaxTrans_RU             taxTrans_RU;
        TaxLedgerAccountGroup   taxLedgerAccountGroup;
        AmountCur               taxAmount;

        lineTaxAmount = 0;
        while select forupdate taxTrans
            where taxTrans.InventTransId                == custInvoiceTrans.InventTransId
               && taxTrans.Voucher                      == custInvoiceJour.LedgerVoucher
               && taxTrans.TransDate                    == custInvoiceJour.InvoiceDate
            exists join taxTrans_RU
                where taxTrans_RU.TaxTrans == taxTrans.RecId
                && taxTrans_RU.TaxSourceType_RU             == TaxSourceType_RU::InvoiceTrans
        {
            remainTaxAmount = 0;
            if (remainQty && custInvoiceTrans.Qty)
            {
                remainTaxAmount = CurrencyExchangeHelper::amount(remainQty * taxTrans.taxAmountCur_W() / custInvoiceTrans.Qty, custInvoiceTrans.CurrencyCode);
            }
            taxAmount = -(taxTrans.taxAmountCur_W() - remainTaxAmount);

            lineTaxAmount += taxAmount;

            taxLedgerAccountGroup = TaxLedgerAccountGroup::find(TaxTable::findAccountGroup(taxTrans.TaxCode));
            this.postTax(taxLedgerAccountGroup,
                         custInvoiceTrans.accountSales_RU(custInvoiceJour),
                         custInvoiceTrans.DefaultDimension,
                         taxTrans.SourceCurrencyCode,
                         taxAmount,
                         custInvoiceJour.ExchRate,
                         custInvoiceJour.ExchRateSecondary);

            goodsInRouteTrans.TaxAmount += taxAmount;
            goodsInRouteJour.TaxAmount  += taxAmount;
            goodsInRouteJour.AmountCur  += taxAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the text describing the transaction.
    /// </summary>
    /// <returns>
    ///     Always returns 'Passing of property'.
    /// </returns>
    public TransTxt transactionLogTxt()
    {
        return "@GLS114736";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the type of the transaction.
    /// </summary>
    /// <returns>
    ///     Always returns <c>TransactionLogType::GoodsInRoute_RU</c>.
    /// </returns>
    public TransactionLogType transactionLogType()
    {
        return TransactionLogType::GoodsInRoute_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    protected void update()
    {
        CustInvoiceTrans_RU                     custInvoiceTrans_RU;
        InventMov_Vir_GoodsInRoute_Delivery_RU  movementVirtual;
        InventUpd_Financial                     financialVirtual;

        NumberSeq               numberSeq;
        Voucher                 invoiceVoucher;

        TransactionTxt          transactionTxt;
        LedgerVoucherObject     ledgerVoucherObject;

        numberSeq           = NumberSeq::newGetVoucher(SalesParameters::numRefGoodsInRouteVoucher_RU());

        invoiceVoucher      = numberSeq.voucher();

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType          (custInvoiceJour.InvoiceAmount < 0 ? LedgerTransTxt::SalesCreditNoteCust : LedgerTransTxt::SalesInvoiceCust);
        transactionTxt.setVoucher       (invoiceVoucher);
        transactionTxt.setFormLetter    (custInvoiceJour.InvoiceId);
        transactionTxt.setKey1          (custInvoiceJour.SalesId);
        transactionTxt.setKey2          (custInvoiceJour.InvoiceAccount);
        transactionTxt.setKey3          (CustTable::groupId(custInvoiceJour.InvoiceAccount));

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                     SysModule::Sales,
                                                     numberSeq.parmVoucherSequenceCode());

        ledgerVoucher.parmCheckBlockedDimensions(false);
        ledgerVoucher.parmCustomDetailLevel(true);  // records are summed according to ledgerVoucherTransObject.parmRecId

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(invoiceVoucher,
                                                              updateDate,
                                                              SysModule::Sales,
                                                              LedgerTransType::Sales);
        ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        ledgerBondClient = ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();

        exchRate        = custInvoiceJour.ExchRate;
        exchRateSecond  = custInvoiceJour.ExchRateSecondary;

        this.initJournal();
        goodsInRouteJour.Voucher = invoiceVoucher;

        while select tmpFrmVirtual
            where tmpFrmVirtual.NoYes
               && tmpFrmVirtual.Qty
        {
            custInvoiceTrans = CustInvoiceTrans::findRecId(tmpFrmVirtual.RecordNo);
            custInvoiceTrans_RU = custInvoiceTrans.custInvoiceTrans_RU();

            this.initJournalLine(custInvoiceTrans);

            movementVirtual  =   InventMov_Vir_GoodsInRoute_Delivery_RU::newParameters(custInvoiceTrans.ItemId,
                                                                                       InventTransType::Sales,
                                                                                       custInvoiceTrans.salesLine().SalesId,
                                                                                       custInvoiceTrans.InventDimId,
                                                                                       custInvoiceTrans.orderAccount(),
                                                                                       custInvoiceTrans.DefaultDimension,
                                                                                       updateDate,
                                                                                       tmpFrmVirtual.inventQty_RU,
                                                                                       custInvoiceTrans.SalesCategory,
                                                                                       InventTransOrigin::findByInventTransId(custInvoiceTrans.InventTransId).RecId,
                                                                                       custInvoiceTrans_RU.InventTransIdDelivery_RU,
                                                                                       InventTransOrigin::findByInventTransId(custInvoiceTrans_RU.InventTransIdTransit_RU).RecId,
                                                                                       custInvoiceTrans.custInvoiceJour().CustGroup,
                                                                                       custInvoiceTrans.TaxGroup);
            movementVirtual.pdsCWSetTransQty(tmpFrmVirtual.PdsCWQty);
            movementVirtual.pdsCWSetRemainPhysical(custInvoiceTrans.PdsCWRemain - tmpFrmVirtual.PdsCWQty);
            financialVirtual = InventUpd_Financial::newGoodsInRouteDelivery_RU(movementVirtual,
                                                                               ledgerVoucher,
                                                                               custInvoiceJour.invoiceIdDisplay());
            financialVirtual.updateNow();

            remainQty        = custInvoiceTrans.Qty - tmpFrmVirtual.Qty;
            remainLineAmount = 0;
            remainLineDisc   = 0;
            if (remainQty && custInvoiceTrans.Qty)
            {
                remainLineAmount = CurrencyExchangeHelper::amount(remainQty * custInvoiceTrans.LineAmount / custInvoiceTrans.Qty, custInvoiceTrans.CurrencyCode);
                remainLineDisc   = CurrencyExchangeHelper::amount(remainQty * custInvoiceTrans.SumLineDisc / custInvoiceTrans.Qty, custInvoiceTrans.CurrencyCode);
            }
            lineAmount  = custInvoiceTrans.LineAmount  - remainLineAmount;
            lineDisc    = custInvoiceTrans.SumLineDisc - remainLineDisc;
            lineAmountExclDisc = lineAmount - lineDisc;

            goodsInRouteJour.AmountCur += lineAmountExclDisc;
            totalRemainQty += remainQty;
            totalLineAmount         += lineAmount;
            totalLineAmountInvoice  += lineAmount + remainLineAmount;

            this.postSalesRevenue();
            this.postSalesDisc();
            this.postTaxOnLine();

            this.postMarkup(HeadingLine::Line);
            this.postMarkupTax(HeadingLine::Line);

            this.writeJournalLine();
        }
        this.postMarkup(HeadingLine::Heading);
        this.postMarkupTax(HeadingLine::Heading);
        this.postEndDisc();

        this.createCustTrans();

        if (ledgerBondClient &&
            ledgerBondClient.findVRefByPostingType(LedgerPostingType::CustBalance))
        {
            ledgerBondClient.bondVRef2Log(ledgerBondClient.findVRefByPostingType(LedgerPostingType::CustBalance));
        }

        this.writeJournal();

        ledgerVoucher.end();

        TransactionLog::create(this.transactionLogType(), this.transactionLogTxt());

        numberSeq.used();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS114736";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>