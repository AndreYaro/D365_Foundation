<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupPeriodChargeFreeTextInvoiceCreateParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class MarkupPeriodChargeFreeTextInvoiceCreateParameters
{
    private CurrencyCode    currencyCode;
    private CustAccount     invoiceAccount;
    private Days            splitByDays;
    private TransDate       invoiceDate;
    private str             invoiceMapKey;

    private MarkupPeriodChargeRuleDefaultRevenueAccount defaultRevenueAccount;
    private MarkupPeriodChargeRuleChargeAmount invoiceLineAmount;
    private MarkupPeriodChargeRuleLineDescription lineDescription;

    private MarkupPeriodChargeInvoiceLineBaseFromDate invoiceLineBaseFromDate;
    private MarkupPeriodChargeInvoiceLineBaseToDate invoiceLineBaseToDate;
    private MarkupPeriodChargeInvoiceLineBaseFromDate invoiceLineFromDate;

    private Set invoiceLineBaseSet;

    private MarkupPeriodChargeRuleLineRecId periodChargeRuleLineRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCurrency</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public CurrencyCode parmCurrency(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public CustAccount parmInvoiceAccount(CustAccount _invoiceAccount = invoiceAccount)
    {
        invoiceAccount = _invoiceAccount;
        return invoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public TransDate parmInvoiceDate(TransDate _invoiceDate = invoiceDate)
    {
        invoiceDate = _invoiceDate;
        return invoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitByDays</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Days parmSplitByDays(Days _splitByDays = splitByDays)
    {
        splitByDays = _splitByDays;
        return splitByDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultRevenueAccount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MarkupPeriodChargeRuleDefaultRevenueAccount parmDefaultRevenueAccount(MarkupPeriodChargeRuleDefaultRevenueAccount _defaultRevenueAccount = defaultRevenueAccount)
    {
        defaultRevenueAccount = _defaultRevenueAccount;
        return defaultRevenueAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MarkupPeriodChargeRuleChargeAmount parmInvoiceLineAmount(MarkupPeriodChargeRuleChargeAmount _invoiceLineAmount = invoiceLineAmount)
    {
        invoiceLineAmount = _invoiceLineAmount;
        return invoiceLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDescription</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MarkupPeriodChargeRuleLineDescription parmLineDescription(MarkupPeriodChargeRuleLineDescription _lineDescription = lineDescription)
    {
        lineDescription = _lineDescription;
        return lineDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceLineBaseSet</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Set parmInvoiceLineBaseSet(Set _invoiceLineBaseSet = invoiceLineBaseSet)
    {
        invoiceLineBaseSet = _invoiceLineBaseSet;
        return invoiceLineBaseSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceLineBaseFromDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MarkupPeriodChargeInvoiceLineBaseFromDate parmInvoiceLineBaseFromDate(MarkupPeriodChargeInvoiceLineBaseFromDate _invoiceLineBaseFromDate = invoiceLineBaseFromDate)
    {
        invoiceLineBaseFromDate = _invoiceLineBaseFromDate;
        return invoiceLineBaseFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceLineBaseToDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MarkupPeriodChargeInvoiceLineBaseToDate parmInvoiceLineBaseToDate(MarkupPeriodChargeInvoiceLineBaseToDate _invoiceLineBaseToDate = invoiceLineBaseToDate)
    {
        invoiceLineBaseToDate = _invoiceLineBaseToDate;
        return invoiceLineBaseToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceLineFromDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MarkupPeriodChargeInvoiceLineBaseFromDate parmInvoiceLineFromDate(MarkupPeriodChargeInvoiceLineBaseFromDate _invoiceLineFromDate = invoiceLineFromDate)
    {
        invoiceLineFromDate = _invoiceLineFromDate;
        return invoiceLineFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodChargeRuleLineRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MarkupPeriodChargeRuleLineRecId parmPeriodChargeRuleLineRecId(MarkupPeriodChargeRuleLineRecId _periodChargeRuleLineRecId = periodChargeRuleLineRecId)
    {
        periodChargeRuleLineRecId = _periodChargeRuleLineRecId;
        return periodChargeRuleLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceMapKey</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal str generateInvoiceMapKey(boolean _isMinAmount = false)
    {
        if (_isMinAmount)
        {
            invoiceMapKey = strFmt('%1-%2-%3-%4', invoiceAccount, currencyCode, invoiceLineFromDate, periodChargeRuleLineRecId);
        }
        else
        {
            invoiceMapKey = strFmt('%1-%2-%3', invoiceAccount, currencyCode, invoiceLineFromDate);
        }
        return invoiceMapKey;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>