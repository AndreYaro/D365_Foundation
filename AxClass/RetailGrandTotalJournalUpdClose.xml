<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGrandTotalJournalUpdClose</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements the Close operation on journal.
/// </summary>
[RetailGrandTotalJournalAction(RetailGrandTotalJourUpdAction::Close)]
public class RetailGrandTotalJournalUpdClose extends RetailGrandTotalJournalUpdate implements RetailIDigitalSignatureManagerHost
{
    private RetailIDigitalSignatureManager digitalSignatureManager;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDigitalSignatureManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the digital signature manager.
    /// </summary>
    /// <returns>The digital signature manager.</returns>
    public RetailIDigitalSignatureManager getDigitalSignatureManager()
    {
        if (!digitalSignatureManager)
        {
            digitalSignatureManager = RetailDigitalSignatureManager::constructFromParms();
        }

        return digitalSignatureManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDigitalSignatureManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the digital signature manager.
    /// </summary>
    /// <param name = "_digitalSignatureManager">The digital signature manager.</param>
    public void setDigitalSignatureManager(RetailIDigitalSignatureManager _digitalSignatureManager)
    {
        digitalSignatureManager = _digitalSignatureManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSignature</Name>
				<Source><![CDATA[
    private void addSignature()
    {
        var signatureHelper = new RetailGrandTotalJournalSignatureHelper(journalTable);
        RetailHashAlgorithm hashAlgorithm = this.getDigitalSignatureManager().getDigestAlgorithm();
        signatureHelper.validateHashAlgorithm(hashAlgorithm);

        System.String subjToSign = signatureHelper.buildStringToSign();
        System.Byte[] bytesToSign = System.Text.Encoding::GetEncoding(this.getDigitalSignatureManager().getEncoding()).GetBytes(subjToSign);
            
        journalTable.Signature  = this.getDigitalSignatureManager().hashAndSignBytes(bytesToSign);
        journalTable.Thumbprint = this.getDigitalSignatureManager().getCertificateThumbprint();
        journalTable.DataToSign = subjToSign;
        journalTable.HashAlgorithm = hashAlgorithm;
        journalTable.DataToSignFormatVersion = RetailGrandTotalJournalSignatureHelper::DataToSignFormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatus</Name>
				<Source><![CDATA[
    protected RetailGrandTotalJournalStatus getStatus()
    {
        return RetailGrandTotalJournalStatus::Closed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEarlyActiveJournalExist</Name>
				<Source><![CDATA[
    private boolean isEarlyActiveJournalExist()
    {
        RetailGrandTotalJournalTable journalTableEarly;

        select firstOnly RecId from journalTableEarly
            where journalTableEarly.FromDate < journalTable.ToDate
                && (journalTableEarly.Status == RetailGrandTotalJournalStatus::New
                ||  journalTableEarly.Status == RetailGrandTotalJournalStatus::Calculated)
                && journalTableEarly.StoreId == journalTable.StoreId
                && journalTableEarly.RecId != journalTable.RecId
                && journalTableEarly.Annual == journalTable.Annual;

        return journalTableEarly.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournal</Name>
				<Source><![CDATA[
    protected void updateJournal()
    {
        journalTable.SequentialNumber = RetailGrandTotalJournaltable::getLastSignedSequentialNumber(journalTable.StoreId) + 1;
        this.addSignature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournal</Name>
				<Source><![CDATA[
    protected boolean validateJournal()
    {
        boolean ret = true;

        if (journalTable.Status != RetailGrandTotalJournalStatus::Calculated)
        {
            ret = checkFailed(strFmt("@RetailGrandTotalJournal:JournalCloseFailure", journalTable.Status));
        }

        if (this.isEarlyActiveJournalExist())
        {
            ret = checkFailed("@RetailGrandTotalJournal:JournalNotCreated");
        }
        
        if (journalTable.Annual == NoYes::Yes && !journalTable.checkFiscalYearClosingJournalClosed())
        {
            ret = checkFailed(strFmt("@RetailGrandTotalJournal:AnnualJournalNotPossibleCalculateOrClose", journalTable.Status));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>