<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCustPaymIdUpdate_NO</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankCustPaymIdUpdate_NO extends RunBase
{
    DialogRunbase dialogRunbase;

    NoYes       updateInvoice;
    NoYes       updateInterest;
    NoYes       updateCollection;
    NoYes       updateProj;
    NoYes       deletePaymId;

    NoYes       deletePaymIDInvoice;
    NoYes       deletePaymIDInterest;
    NoYes       deletePaymIDCollection;
    NoYes       deletePaymIDProj;

    DialogField dialogUpdateInvoice;
    DialogField dialogUpdateInterest;
    DialogField dialogUpdateCollection;
    DialogField dialogUpdateProj;
    DialogField dialogDeletePaymId;

 // This list defines which fields will be persisted and restored via the system's
    // SysLastValue functionality.
    #DEFINE.SysLastValuesCurrentVersion(1)
    #LOCALMACRO.SysLastValuesList
        updateInvoice,
        updateInterest,
        updateCollection,
        updateProj,
        deletePaymId
    #ENDMACRO

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        updateInvoice,
        updateInterest,
        updateCollection,
        updateProj,
        deletePaymId,
        deletePaymIDInvoice,
        deletePaymIDInterest,
        deletePaymIDCollection,
        deletePaymIDProj

    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deletePaymId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deletePaymId()
    {
        CustInterestJour            custInterestJour;
        CustInvoiceJour             custInvoiceJour;
        CustCollectionLetterJour    custCollectionLetterJour;
        ProjInvoiceJour             projInvoiceJour;
        ;

        setprefix("@SYS119824");

        if (deletePaymIDInvoice)
        {
            ttsbegin;
            while select forupdate custInvoiceJour
            {
                custInvoiceJour.PaymId = "";
                custInvoiceJour.update();
                info(strfmt("@SYS119831", custInvoiceJour.SalesId, custInvoiceJour.InvoiceAccount, custInvoiceJour.InvoiceId));
            }
            ttscommit;
        }

        if (deletePaymIDInterest)
        {
            ttsbegin;
            while select forupdate custInterestJour
            {
                custInterestJour.PaymId = "";
                custInterestJour.update();
                info(strfmt("@SYS119832", custInterestJour.InterestNote, custInterestJour.AccountNum));
            }
            ttscommit;
        }

        if (deletePaymIDCollection)
        {
            ttsbegin;
            while select forupdate custCollectionLetterJour
            {
                custCollectionLetterJour.PaymId = "";
                custCollectionLetterJour.update();
                info(strfmt("@SYS119833", custCollectionLetterJour.CollectionLetterNum, custCollectionLetterJour.AccountNum));
            }
            ttscommit;
        }

        if (deletePaymIDProj)
        {
            ttsbegin;
            while select forupdate projInvoiceJour
            {
                projInvoiceJour.PaymId = "";
                projInvoiceJour.update();
                info(strfmt("@SYS119834", projInvoiceJour.ProjInvoiceId, projInvoiceJour.InvoiceAccount));
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    AOT.
    /// </remarks>
    public Object dialog()
    {
        ;
        dialogRunbase = super();
        dialogRunbase.caption("@SYS119804");

        dialogRunbase.addGroup("@SYS119824");
        dialogDeletePaymId     = dialogRunbase.addFieldValue(extendedtypestr(NoYesId),deletePaymId,"@SYS119824","@SYS119825");

        dialogRunbase.addGroup("@SYS119826");
        dialogUpdateInvoice    = dialogRunbase.addFieldValue(extendedtypestr(NoYesId),updateInvoice,"@SYS119804","@SYS119807");
        dialogUpdateInterest   = dialogRunbase.addFieldValue(extendedtypestr(NoYesId),updateInterest,"@SYS119805","@SYS119808");
        dialogUpdateCollection = dialogRunbase.addFieldValue(extendedtypestr(NoYesId),updateCollection,"@SYS119806","@SYS119809");
        dialogUpdateProj       = dialogRunbase.addFieldValue(extendedtypestr(NoYesId),updateProj,"@SYS119811","@SYS119810");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;
        updateInvoice       = dialogUpdateInvoice.value();
        updateInterest      = dialogUpdateInterest.value();
        updateCollection    = dialogUpdateCollection.value();
        updateProj          = dialogUpdateProj.value();
        deletePaymId        = dialogDeletePaymId.value();

        if (deletePaymId)
        {
            deletePaymIDInvoice = Box::yesNo("@SYS119827",DialogButton::No) == DialogButton::Yes;
            deletePaymIDInterest = Box::yesNo("@SYS119828",DialogButton::No) == DialogButton::Yes;
            deletePaymIDCollection = Box::yesNo("@SYS119829",DialogButton::No) == DialogButton::Yes;
            deletePaymIDProj = Box::yesNo("@SYS119830",DialogButton::No) == DialogButton::Yes;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>SysLastValue</c> record for this user and object.
    /// </summary>
    /// <remarks>
    ///    This is a customization of the standard <c>SysLastValues</c> record functionality and is required
    ///    to support the split implementation of serializing, by using the <c>pack</c> and <c>unpack</c>,
    ///    method, and persisting user input with the <c>SysLastValue</c> record.
    /// </remarks>
    public void getLast()
    {
        container packedValues;
        ;

        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.
        // super();

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        getLastCalled   = true;
        inGetSaveLast   = true;

        // Restore the pertinent values from the SysLastValue table.
        packedValues = xSysLastValue::getValue(this.lastValueDataAreaId(),
                                               this.lastValueUserId(),
                                               this.lastValueType(),
                                               this.lastValueElementName(),
                                               this.lastValueDesignName());

        this.unpackSysLastValues(packedValues);

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the data required for the <c>SysLastValue</c> record.
    /// </summary>
    /// <returns>
    ///    A container storing the data to be persisted by the <c>SysLastValues</c> record.
    /// </returns>
    /// <remarks>
    ///    The pack and unpack pattern does not have provisions for supporting the different serialization and
    ///    <c>SysLastValues</c> record pack lists. This separate packing mechanism has been implemented for
    ///    the <c>SysLastValues</c> record and is first defined on the class one level above the
    ///    <c>RunBase</c> or <c>RunBaseBatch</c> class. Derivative classes also implement this method so that
    ///    a whole object can be packed for the <c>SysLastValues</c> record.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container packSysLastValues()
    {
        ;

        return [#SysLastValuesCurrentVersion, #SysLastValuesList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Does the actual job of the class.
    /// </summary>
    public void run()
    {
        CustTable                   custTable;
        CustTrans                   custTrans;
        CustInvoiceJour             custInvoiceJour;
        CustCollectionLetterJour    custCollectionLetterJour;
        CustInterestJour            custInterestJour;
        ProjInvoiceJour             projInvoiceJour;
        PaymId                      paymId;
        PaymMoneyTransferSlip       moneyTransferSlip = new PaymMoneyTransferSlip();
        QueryRun                    queryRunCustTrans;
        ;

        if (deletePaymId)
        {
            this.deletePaymId();
        }

        if (updateInvoice)
        {
            setprefix("@SYS79380");

            ttsbegin;
            while select forupdate custInvoiceJour
            {
                if (! custInvoiceJour.PaymId)
                {
                    custTable = CustTable::find(custInvoiceJour.InvoiceAccount);
                    moneyTransferSlip.init(custTable.GiroType);

                    paymId = moneyTransferSlip.ocrField( custInvoiceJour.InvoiceAccount, custInvoiceJour.InvoiceId,
                                                            strlen(int2str(NumberSeq::highest(SalesParameters::numRefInvoiceId().NumberSequenceId))));

                    custInvoiceJour.PaymId = strltrim(paymId);
                    custInvoiceJour.update();
                    info(strfmt("@SYS119799", custInvoiceJour.SalesId, custInvoiceJour.InvoiceAccount, custInvoiceJour.InvoiceId, custInvoiceJour.PaymId));

                    //CustTrans update with PaymentId
                    queryRunCustTrans = custInvoiceJour.queryRunCustTrans(true);

                    while (queryRunCustTrans.next())
                    {
                        custTrans           = queryRunCustTrans.get(tablenum(CustTrans));
                        custTrans.PaymId    = custInvoiceJour.PaymId;
                        custTrans.update();
                    }
                }
            }
            ttscommit;
        }

        if (updateInterest)
        {
            setprefix("@SYS119800");

            ttsbegin;
            while select forupdate custInterestJour
            {
                if (! custInterestJour.PaymId)
                {
                    custTable = CustTable::find(custInterestJour.AccountNum);
                    moneyTransferSlip.init(custTable.GiroTypeInterestNote);
                    paymId = moneyTransferSlip.ocrField( custInterestJour.AccountNum, custInterestJour.InterestNote,
                                                            strlen(int2str(NumberSeq::highest(CustParameters::numRefInterestNote().NumberSequenceId))));

                    custInterestJour.PaymId = strltrim(paymId);
                    custInterestJour.update();
                    info(strfmt("@SYS119801", custInterestJour.InterestNote, custInterestJour.AccountNum, custInterestJour.PaymId));

                    //CustTrans update with PaymentId
                    queryRunCustTrans = custInterestJour.queryRunCustTrans(true);

                    while (queryRunCustTrans.next())
                    {
                        custTrans           = queryRunCustTrans.get(tablenum(CustTrans));
                        custTrans.PaymId    = custInterestJour.PaymId;
                        custTrans.update();
                    }
                }
            }
            ttscommit;
        }

        if (updateCollection)
        {
            setprefix("@SYS119802");

            ttsbegin;
            while select forupdate custCollectionLetterJour
            {
                if (! custCollectionLetterJour.PaymId)
                {
                    custTable = CustTable::find(custCollectionLetterJour.AccountNum);

                    moneyTransferSlip.init(custTable.GiroType);  //temporary here and Invoice giro type until
                                                                 //TransferSlip are created to this CollectionReport
                                                                 //with seperate GiroType
                    paymId = moneyTransferSlip.ocrField( custCollectionLetterJour.AccountNum, custCollectionLetterJour.CollectionLetterNum,
                                                            strlen(int2str(NumberSeq::highest(CustParameters::numRefCollectionLetterNum().NumberSequenceId))));

                    custCollectionLetterJour.PaymId = strltrim(paymId);
                    custCollectionLetterJour.update();
                    info(strfmt("@SYS119803", custCollectionLetterJour.CollectionLetterNum, custCollectionLetterJour.AccountNum, custCollectionLetterJour.PaymId));

                    //CustTrans update with PaymentId
                    queryRunCustTrans = custCollectionLetterJour.queryRunCustTrans(true);

                    while (queryRunCustTrans.next())
                    {
                        custTrans           = queryRunCustTrans.get(tablenum(CustTrans));
                        custTrans.PaymId    = custCollectionLetterJour.PaymId;
                        custTrans.update();
                    }
                }
            }
            ttscommit;
        }

        if (updateProj)
        {
            setprefix("@SYS119812");

            ttsbegin;
            while select forupdate projInvoiceJour
            {
                if (! projInvoiceJour.PaymId)
                {
                    custTable = CustTable::find(projInvoiceJour.InvoiceAccount);
                    moneyTransferSlip.init(custTable.GiroType);

                    paymId = moneyTransferSlip.ocrField( projInvoiceJour.InvoiceAccount, projInvoiceJour.ProjInvoiceId,
                                                            strlen(int2str(NumberSeq::highest(ProjParameters::numRefProjNormalInvoiceId().NumberSequenceId))));

                    projInvoiceJour.PaymId = strltrim(paymId);
                    projInvoiceJour.update();
                    info(strfmt("@SYS119813", projInvoiceJour.ProjInvoiceId, projInvoiceJour.InvoiceAccount, projInvoiceJour.PaymId));

                    //CustTrans update with PaymentId
                    queryRunCustTrans = projInvoiceJour.queryRunCustTrans(true);

                    while (queryRunCustTrans.next())
                    {
                        custTrans           = queryRunCustTrans.get(tablenum(CustTrans));
                        custTrans.PaymId    = projInvoiceJour.PaymId;
                        custTrans.update();
                    }
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the <c>SysLastValue</c> record for this user and object.
    /// </summary>
    /// <remarks>
    ///    This is a customization of the standard <c>SysLastValues</c> functionality and is required to
    ///    support the split implementation of serializing, with the <c>pack</c> and <c>unpack</c> methods,
    ///    and persisting user input, the <c>SysLastValue</c> record.
    /// </remarks>
    public void saveLast()
    {
        ;

        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.
        //super();

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast   = true;

        // Persist the pertinent values to the SysLastValue table.
        xSysLastValue::putValue(this.packSysLastValues(),
                                this.lastValueDataAreaId(),
                                this.lastValueUserId(),
                                this.lastValueType(),
                                this.lastValueElementName(),
                                this.lastValueDesignName());

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer          version         = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList]      = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks the data required for the <c>SysLastValues</c> record.
    /// </summary>
    /// <param name="_packedValues">
    ///    The values stored by the <c>SysLastValues</c> framework that are to be unpacked.
    /// </param>
    /// <remarks>
    ///    The pack and unpack pattern does not have provisions for supporting the different serialization and
    ///    <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for the
    ///    <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    ///    <c>RunBaseBatch</c> class. Derivative classes also implement this method so that a whole object can
    ///    be unpacked for <c>SysLastValues</c>.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void unpackSysLastValues(container _packedValues)
    {
        Version version = RunBase::getVersion(_packedValues);
        ;

        switch (version)
        {
            case #SysLastValuesCurrentVersion:
                [version, #SysLastValuesList] = _packedValues;

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BankCustPaymIdUpdate_NO construct()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00002, funcName());

        return new BankCustPaymIdUpdate_NO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args a)
    {
        BankCustPaymIdUpdate_NO paymIdUpdate = BankCustPaymIdUpdate_NO::construct();
        ;

        if (paymIdUpdate.prompt())
            paymIdUpdate.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>