<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReimbursementSlipDP_HU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReimbursementSlipDP_HU</c> class is the report data provider class for the
///    <c>TaxReimbursementSlip_HU</c> SQL Server Reporting Services Report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(TaxReimbursementSlipContract_HU))
]
class TaxReimbursementSlipDP_HU extends SrsReportDataProviderPreProcess
{
    TaxReimbursementSlipContract_HU contract;
    TaxReimbursementSlipTmp_HU taxReimbursementSlipTmp_HU;

    CompanyInfo companyInfo;
    CustInvoiceJour custInvoiceJour;
    LogisticsAddressing companyAddress;
    LogisticsAddressing customerAddress;
    DirPartyTable customerParty;
    CustTable custTable;
    Map taxAdminIdSplitter;
    Map passportNumberSplitter;
    FreeText totalAmountAsString;
    FreeText taxAmountAsString;

    LogisticsAddressCountryRegionTranslation countryTranslation;

    TaxReimbursementDoc_HU taxReimbursementDocumentNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sequence number used for tax reimbursement slip.
    /// </summary>
    /// <returns>
    /// The sequence number.
    /// </returns>
    private str getDocumentNumber()
    {
        NumberSeq numberSeq;
        NumberSequenceReference numberSequenceReference = NumberSeqReference::findReference(extendedTypeNum (TaxReimbursementDoc_HU));

        if (numberSequenceReference)
        {
            numberSeq = NumberSeq::newGetNum(numberSequenceReference);
        }
        else
        {
            throw error ("@SYS54052");
        }

        return numberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReimbursementSlipTmp_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the temporary table of ssrs report.
    /// </summary>
    /// <returns>
    /// The temporary table <c>TaxReimbursementSlipTmp_HU</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxReimbursementSlipTmp_HU))
    ]
    public TaxReimbursementSlipTmp_HU getTaxReimbursementSlipTmp_HU()
    {
        return taxReimbursementSlipTmp_HU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReimbursementSlipTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the temporary <c>taxReimbursementSlipTmp_HU</c> table.
    /// </summary>
    private void insertTaxReimbursementSlipTmp()
    {
        taxReimbursementSlipTmp_HU.CompanyName = companyInfo.Name;
        taxReimbursementSlipTmp_HU.CompanyAddress = companyAddress;
        taxReimbursementSlipTmp_HU.CustomerName = customerParty.Name;
        taxReimbursementSlipTmp_HU.PassportIssuerCountry = countryTranslation.ShortName;
        taxReimbursementSlipTmp_HU.CustomerAddress = customerAddress;
        taxReimbursementSlipTmp_HU.InvoiceId = custInvoiceJour.InvoiceId;
        taxReimbursementSlipTmp_HU.InvoiceDate = date2str(custInvoiceJour.InvoiceDate, 213,
            DateDay::Digits2, DateSeparator::Slash, DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4, DateFlags::None);
        taxReimbursementSlipTmp_HU.TotalAmount = totalAmountAsString;
        taxReimbursementSlipTmp_HU.TaxAmount = taxAmountAsString;
        taxReimbursementSlipTmp_HU.DocumentNumber = taxReimbursementDocumentNumber;
        taxReimbursementSlipTmp_HU.TaxAdminId1 = taxAdminIdSplitter.lookup(1);
        taxReimbursementSlipTmp_HU.TaxAdminId2 = taxAdminIdSplitter.lookup(2);
        taxReimbursementSlipTmp_HU.TaxAdminId3 = taxAdminIdSplitter.lookup(3);
        taxReimbursementSlipTmp_HU.TaxAdminId4 = taxAdminIdSplitter.lookup(4);
        taxReimbursementSlipTmp_HU.TaxAdminId5 = taxAdminIdSplitter.lookup(5);
        taxReimbursementSlipTmp_HU.TaxAdminId6 = taxAdminIdSplitter.lookup(6);
        taxReimbursementSlipTmp_HU.TaxAdminId7 = taxAdminIdSplitter.lookup(7);
        taxReimbursementSlipTmp_HU.TaxAdminId8 = taxAdminIdSplitter.lookup(8);
        taxReimbursementSlipTmp_HU.TaxAdminId9 = taxAdminIdSplitter.lookup(9);
        taxReimbursementSlipTmp_HU.TaxAdminId10 = taxAdminIdSplitter.lookup(10);
        taxReimbursementSlipTmp_HU.TaxAdminId11 = taxAdminIdSplitter.lookup(11);
        taxReimbursementSlipTmp_HU.PassportNumber1 = passportNumberSplitter.lookup(1);
        taxReimbursementSlipTmp_HU.PassportNumber2 = passportNumberSplitter.lookup(2);
        taxReimbursementSlipTmp_HU.PassportNumber3 = passportNumberSplitter.lookup(3);
        taxReimbursementSlipTmp_HU.PassportNumber4 = passportNumberSplitter.lookup(4);
        taxReimbursementSlipTmp_HU.PassportNumber5 = passportNumberSplitter.lookup(5);
        taxReimbursementSlipTmp_HU.PassportNumber6 = passportNumberSplitter.lookup(6);
        taxReimbursementSlipTmp_HU.PassportNumber7 = passportNumberSplitter.lookup(7);
        taxReimbursementSlipTmp_HU.PassportNumber8 = passportNumberSplitter.lookup(8);
        taxReimbursementSlipTmp_HU.PassportNumber9 = passportNumberSplitter.lookup(9);
        taxReimbursementSlipTmp_HU.PassportNumber10 = passportNumberSplitter.lookup(10);
        taxReimbursementSlipTmp_HU.PassportNumber11 = passportNumberSplitter.lookup(11);
        taxReimbursementSlipTmp_HU.PassportNumber12 = passportNumberSplitter.lookup(12);
        taxReimbursementSlipTmp_HU.PassportNumber13 = passportNumberSplitter.lookup(13);

        taxReimbursementSlipTmp_HU.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create data for the <c>taxReimbursementSlipTmp_HU</c> table.
    /// </summary>
    public void processReport()
    {
        #define.hu('hu')
        #define.passportNumberElements(13)
        #define.taxIdElements(11)

        taxReimbursementSlipTmp_HU.setConnection(this.parmUserConnection());

        contract = this.parmDataContract() as TaxReimbursementSlipContract_HU;

        custInvoiceJour = CustInvoiceJour::findRecId(contract.parmCustInvoiceJourRecId());

        CustInvoiceJour_W custInvoiceJour_W = custInvoiceJour.custInvoiceJour_W();
        if (!custInvoiceJour_W.TaxReimbursementDoc_HU)
        {
            ttsbegin;
            custInvoiceJour_W.selectForUpdate(true);
            custInvoiceJour_W.TaxReimbursementDoc_HU = this.getDocumentNumber();
            custInvoiceJour_W.write();
            ttscommit;
        }

        taxReimbursementDocumentNumber = custInvoiceJour_W.TaxReimbursementDoc_HU;

        companyInfo = CompanyInfo::find();

        DirPartyPostalAddressView dirPartyPostalAddressView;

        select ZipCode, City, Street from dirPartyPostalAddressView
            where dirPartyPostalAddressView.Party == companyInfo.RecId &&
                dirPartyPostalAddressView.IsPrimary == NoYes::Yes;

        companyAddress = dirPartyPostalAddressView.ZipCode + " " +
            dirPartyPostalAddressView.City + " " + dirPartyPostalAddressView.Street;

        unchecked (Uncheck::TableSecurityPermission)
        {
            select PassportNo_HU, IssuerCountry_HU from custTable
                where custTable.AccountNum == custInvoiceJour.InvoiceAccount
                outer join Name from customerParty
                    where customerParty.RecId == custTable.Party
                outer join ZipCode, City, Street from dirPartyPostalAddressView
                    where dirPartyPostalAddressView.Party == custTable.Party &&
                        dirPartyPostalAddressView.IsPrimary == NoYes::Yes
                outer join ShortName from countryTranslation
                    where countryTranslation.CountryRegionId == custTable.IssuerCountry_HU &&
                        countryTranslation.LanguageId == #hu;
        }

        customerAddress = dirPartyPostalAddressView.ZipCode + " " +
            dirPartyPostalAddressView.City + " " + dirPartyPostalAddressView.Street;

        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceTrans_W custInvoiceTrans_W;
        TaxTrans taxTrans;
        select sum(LineAmountMST), sum(TaxAmountMST) from custInvoiceTrans
            where custInvoiceTrans.SalesId == custInvoiceJour.SalesId &&
                custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId &&
                custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate &&
                custInvoiceTrans.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup
            outer join sum(TaxAmountCur) from taxTrans
                where taxTrans.SourceTableId == tableNum(CustInvoiceTrans) &&
                    taxTrans.SourceRecId == custInvoiceTrans.RecId
            exists join CustInvoiceTrans_W
                where custInvoiceTrans_W.CustInvoiceTrans == custInvoiceTrans.RecId &&
                    custInvoiceTrans_W.TaxReimbursement_HU == NoYes::Yes;

        AmountCur taxAmount = taxTrans.TaxAmountCur * -1;

        if (!taxAmount)
        {
            taxAmount = custInvoiceTrans.TaxAmountMST;
        }

        AmountCur totalAmount = custInvoiceTrans.LineAmountMST + taxAmount;
        totalAmountAsString = num2str(totalAmount, 1, 2, 2, 0) +  "  " +
            RNumDateInWordConverter::construct(#hu).numeralsToCurrency(totalAmount, custInvoiceJour.CurrencyCode);
        taxAmountAsString = num2str(taxAmount, 1, 2, 2, 0) + "  " +
            RNumDateInWordConverter::construct(#hu).numeralsToCurrency(taxAmount, custInvoiceJour.CurrencyCode);

        passportNumberSplitter = new Map(Types::Integer, Types::String);

        unchecked (Uncheck::TableSecurityPermission)
        {
            this.splitID(custTable.PassportNo_HU, passportNumberSplitter, #passportNumberElements);
        }

        taxAdminIdSplitter = new Map(Types::Integer, Types::String);
        this.splitID(strRem(companyInfo.CoRegNum, "-"), taxAdminIdSplitter, #taxIdElements);

        this.insertTaxReimbursementSlipTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits the each character of the source Id into a map.
    /// </summary>
    /// <param name="_sourceID">
    /// The source id to be splitted.
    /// </param>
    /// <param name="_idMap">
    /// The map to hold each character of the source id.
    /// </param>
    /// <param name="_numberOfChar">
    /// The number of the character of source id.
    /// </param>
    private void splitID(
        str _sourceID,
        Map _idMap,
        int _numberOfChar)
    {
        int i;

        for (i = 0; i < strLen(_sourceID); i++)
        {
            _idMap.insert(i+1, subStr(_sourceID, i+1, 1));
        }

        while (i < _numberOfChar)
        {
            i++;
            _idMap.insert(i, "");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>