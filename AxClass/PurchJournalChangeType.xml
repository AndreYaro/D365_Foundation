<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchJournalChangeType</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       PurchJournalChangeType
extends     RunBaseBatch implements BatchRetryable
{
    PurchaseType        purchaseType;
    QueryRun            journal;
    Query               query;

    DialogField         fieldContinue;
    PurchTable          purchTable;

    #define.CurrentVersion(1)
    #LOCALMACRO.ParmList
        PurchaseType
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class where the same parameters can be used
    /// repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    /// classes might build on data that is only valid for a short time. Running a class twice with the
    /// same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" /> is false, this
    /// method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        FormRun formRun = classfactory.createQueryForm(this);

        formRun.init();
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
    )
    {
        QueryBuildDataSource    queryData;
        QueryBuildRange         queryRange;

        super();

        this.getLast();

        query = new Query();

        query.addDataSource(tableNum(PurchTable));
        queryData   = query.dataSourceTable(tableNum(PurchTable));
        queryRange  = queryData.addRange(fieldNum(PurchTable, PurchaseType));
        queryRange.value(queryValue(PurchaseType::Journal));
        queryRange.status(RangeStatus::Locked);

        queryData.addRange(fieldNum(PurchTable, PurchId));
        queryData.addRange(fieldNum(PurchTable, CreatedDateTime));

        journal = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#ParmList,journal.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseType</Name>
				<Source><![CDATA[
    public PurchaseType parmPurchaseType(PurchaseType _purchaseType = purchaseType)
    {
        purchaseType = _purchaseType;
        return purchaseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void  run()
    {
        #OCCRetryCount
        int     numberOfOrdersChanged;

        journal.query().dataSourceTable(tableNum(PurchTable)).update(true);
        journal.query().dataSourceTable(tableNum(PurchTable)).concurrencyModel(ConcurrencyModel::Optimistic);

        while (journal.next())
        {
            purchTable = journal.get(tableNum(PurchTable));

            setPrefix(#PreFixField(PurchTable, PurchId));
            try
            {
                ttsbegin;

                purchTable.PurchaseType = purchaseType;

                if (!purchTable.validateWrite())
                {
                    throw Exception::Error;
                }

                purchTable.write();
                ttscommit;
                numberOfOrdersChanged ++;
            }

            catch (Exception::Deadlock)
            {
                purchTable = PurchTable::find(purchTable.PurchId, true, ConcurrencyModel::Optimistic);
                retry;
            }

            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        purchTable = PurchTable::find(purchTable.PurchId, true, ConcurrencyModel::Optimistic);
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }

            catch (Exception::Error)
            {
                checkFailed(strFmt("@SYS127722", purchTable.PurchId, enum2str(purchaseType)));
            }
        }

        info(strFmt("@SYS127723", enum2str(purchaseType),numberOfOrdersChanged));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    /// true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    /// return false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version      = RunBase::getVersion(_packedClass);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#ParmList,packedQuery] = _packedClass;
                if (packedQuery)
                {
                    journal = new QueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>PurchJournalChangeType</c> class.
    /// </summary>
    /// <param name="_purchaseType">
    /// Purchase type to create an instance of; deprecated.
    /// </param>
    /// <returns>
    /// An instance of <c>PurchJournalChangeType</c> class.
    /// </returns>
    /// <remarks>
    /// <c>_purchaseType</c> parameter is deprecated and not used inside the method.
    /// Use <c>newChangeType</c> method to create an instance of <c>PurchJournalChangeType</c> class of specified type.
    /// </remarks>
    public static PurchJournalChangeType  construct(PurchaseType  _purchaseType = PurchaseType::Journal)
    {
        return new PurchJournalChangeType(
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS4310";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void  main(Args  _args)
    {
        PurchJournalChangeType  purchJournalChangeType;

        if (!_args)
        {
            throw error("@SYS25407");
        }

        purchJournalChangeType =
        PurchJournalChangeType::newChangeType(_args.parmEnum());

        if (purchJournalChangeType.prompt())
        {
            purchJournalChangeType.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChangeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an instance of the <c>PurchJournalChangeType</c> class.
    /// </summary>
    /// <param name="_purchaseType">
    /// A <c>PurchaseType</c> type.
    /// </param>
    /// <returns>
    /// An instance of the <c>PurchJournalChangeType</c> class.
    /// </returns>
    public static PurchJournalChangeType newChangeType(PurchaseType  _purchaseType)
    {
        PurchJournalChangeType purchJournalChangeType = PurchJournalChangeType::construct();
        purchJournalChangeType.parmPurchaseType(_purchaseType);
        return purchJournalChangeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>