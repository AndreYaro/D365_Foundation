<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetComponentAddFromPurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetComponentAddFromPurchLine extends RunBase
{
    protected RAssetId rAssetId;
    protected PurchId purchId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class in which the same parameters can be used
    /// repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    /// classes might build on data that is only valid for a short time. Not all classes can be run two
    /// times with the same parameters. If the <c>canGoBatch</c> method returns false, this method will not
    /// have any effect.
    /// </remarks>
    boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Args args = new Args();
        args.caller(this);

        FormRun dialog = new MenuFunction(menuItemDisplayStr(RAssetAddComponentsFromPurchDialog), MenuItemType::Display).create(args);
        dialog.run();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
    public RAssetId parmAssetId(RAssetId _rAssetId = rAssetId)
    {
        rAssetId = _rAssetId;
        return rAssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchId</Name>
				<Source><![CDATA[
    public PurchId parmPurchId(PurchId _purchId = purchId)
    {
        purchId = _purchId;
        return purchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        PurchLine   purchLine;
        InventTable inventTable;
        while select purchLine
            where purchLine.PurchId == purchId &&
                  purchLine.ItemId
        exists join inventTable
            where inventTable.ItemId   == purchLine.ItemId &&
                  inventTable.ItemType == ItemType::Item
        {
            RAssetScrap rassetScrapNew;
            rassetScrapNew.AssetId = rAssetId;
            rassetScrapNew.Assembling = NoYes::Yes;
            rassetScrapNew.initFromPurchLine(purchLine);

            if (rassetScrapNew.validateWrite())
            {
                rassetScrapNew.insert();
            }
            else
            {
                throw error("@GLS101992");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetIComponents rAssetIComponents = _args.caller() as RAssetIComponents;
        if (rAssetIComponents)
        {
            RAssetTable rAssetTable = rAssetIComponents.rAssetTable();
            RassetComponentAddFromPurchLine addComponentsFromPurch = new RassetComponentAddFromPurchLine();

            addComponentsFromPurch.parmAssetId(rAssetTable.AccountNum);

            if (addComponentsFromPurch.prompt())
            {
                addComponentsFromPurch.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>