<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInstrumentationLoggerItem_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Adds activities for items to the inventory instrumentation logging.
/// </summary>
[ExtensionOf(classStr(InventInstrumentationLogger))]
internal final class InventInstrumentationLoggerItem_Extension
{
    private InventItemInstrumentationActivities inventItemActivities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>items</Name>
				<Source><![CDATA[
    public InventItemInstrumentationActivities items()
    {
        if (!inventItemActivities)
        {
            inventItemActivities = InventItemInstrumentationActivities::newFromLogger(this);
        }
        return inventItemActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logItemSettings</Name>
				<Source><![CDATA[
    internal final void logItemSettings(
        InventMovement  _movement,
        RecId           _companyRecId,
        RecId           _warehouseRecId,
        InventTable     _inventTable)
    {
        InventDimParm physicalDimensions;
        InventDimParm productDimensions;
        _movement.inventDimGroupSetup().inventDimParmActivePhysicalInventory(physicalDimensions);
        _movement.inventDimGroupSetup().inventDimParmActiveProductDimension(productDimensions);

        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        var properties = InventInstrumentationLoggerProperties::construct();

        serializer
            .setNameAndValue(properties.propertyByTableRecordId(tableNum(CompanyInfo), _companyRecId))
            .setNameAndValue(properties.propertyByTableRecord(_inventTable))
            .setNameAndValue(properties.isWhsItem(_movement))
            .setNameAndValue(properties.isCwItem(_movement))
            .setNameAndValue(properties.isStockedItem(_inventTable))
            .setNameAndValue(properties.isBatchItem(physicalDimensions))
            .setNameAndValue(properties.isSerialItem(physicalDimensions))
            .setNameAndValue(properties.isOwnerItem(physicalDimensions))
            .setNameAndValue(properties.isVariantItem(productDimensions));

        instrumentationLogger.logInformation(serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logItemInformation</Name>
				<Source><![CDATA[
    internal final void logItemInformation(RecId _itemRecId)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        var properties = InventInstrumentationLoggerProperties::construct();

        serializer
            .setNameAndValue(properties.propertyByTableRecordId(tableNum(InventTable), _itemRecId));

        instrumentationLogger.logInformation(serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logStorageDimensionGroupItemInformation</Name>
				<Source><![CDATA[
    internal final void logStorageDimensionGroupItemInformation(RecId _itemRecId, RecId _storageDimensionGroupRecId)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        var properties = InventInstrumentationLoggerProperties::construct();

        serializer
            .setNameAndValue(properties.propertyByTableRecordId(tableNum(InventTable), _itemRecId))
            .setNameAndValue(properties.propertyByTableRecordId(tableNum(EcoResStorageDimensionGroup), _storageDimensionGroupRecId));

        instrumentationLogger.logInformation(serializer.toString());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>