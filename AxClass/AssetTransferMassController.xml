<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTransferMassController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetTransferMassController</c> class is a controller class used to trigger the mass transfer operation.
/// </summary>
public class AssetTransferMassController extends SysOperationServiceController implements BatchRetryable
{
    #AssetTransfer
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actionModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///      Updates the design of the Sys operation dialog on the selection change event of radio control.
    /// </summary>
    /// <param name="_radioControl">
    ///     Reference of the radio control.
    /// </param>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    public boolean actionModified(FormRadioControl _radioControl)
    {
        this.updateDesign(_radioControl.selection());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    protected void dialogPostRun()
    {
        AssetTransferMassContract assetTransferMassContract;

        super();

        assetTransferMassContract = this.getAssetTransferContract();
        this.updateDesign(assetTransferMassContract.parmAction());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTransferContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>AssetTransferMassContract</c> object of the controller class.
    /// </summary>
    /// <returns>
    ///     An object of the <c>AssetTransferMassContract</c> class.
    /// </returns>
    public AssetTransferMassContract getAssetTransferContract()
    {
        return this.getDataContractObject('_assetTransferContract') as AssetTransferMassContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDialogCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies whether user has cancelled further execution of batch tasks by cancellation of the batch parameters dialog.
    /// </summary>
    /// <returns>
    ///     true if the user has cancelled further processing; otherwise false.
    /// </returns>
    public boolean isDialogCancelled()
    {
        return dialogCanceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        this.parmClassName(classStr(AssetTransferMassTaskService));
        this.parmMethodName(methodStr(AssetTransferMassTaskService, process));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Makes the print controls visible on the dialog.
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    public boolean showPrintSettings()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Changes the design of Sys Operation dialog based on the selection of the radio control.
    /// </summary>
    /// <param name="_action">
    ///     The action selected on dialog.
    /// </param>
    public void updateDesign(AssetTransferMassAction _action)
    {
        boolean                     isPreview;
        FormRun                     formRun;
        FormBuildGroupControl       groupBuildControl;
        FormBuildCommandButtonControl commandButtonBuildControl;
        FormGroupControl            groupControl;
        FormCommandButtonControl    buttonControl;
        SysOperationDialog          sysOperationDialog;

        sysOperationDialog = dialog as SysOperationDialog;
        formRun = sysOperationDialog.formRun();

        isPreview = _action == AssetTransferMassAction::Preview;

        groupBuildControl = formRun.form().design().control(#CurrentPrintDestinationControlName);
        groupControl = formRun.design().control(groupBuildControl.id());
        groupControl.visible(isPreview);

        commandButtonBuildControl = formRun.form().design().control(#CommandButtonControlName);
        buttonControl = formRun.design().control(commandButtonBuildControl.id());

        if (isPreview)
        {
            buttonControl.caption("@SYS65316");
        }
        else
        {
            buttonControl.caption("@SYS301992");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean                     isValid;
        AssetTransferMassContract   assetTransferMassContract;

        isValid = super();

        assetTransferMassContract = this.getAssetTransferContract();

        if (isValid && assetTransferMassContract.parmAction() == AssetTransferMassAction::Preview)
        {
            isValid = this.validateReportPrintSetting();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReportPrintSetting</Name>
				<Source><![CDATA[
    private boolean validateReportPrintSetting()
    {
        boolean                     isValid = true;
        SRSPrintDestinationSettings printSettings;

        if (this.batchInfo() && this.batchInfo().parmBatchExecute())
        {
            printSettings = this.getDataContractObject('SRSPrintDestinationSettings') as SRSPrintDestinationSettings;

            if (printSettings && printSettings.printMediumType() == SRSPrintMediumType::Screen)
            {
                isValid = checkFailed("@SYS329665");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AssetTransferMassController construct()
    {
        return new AssetTransferMassController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Intializes the report controller with the given data contract
    ///     and runs the SSRS Report <c>AssetTransferMassReport</c> with the given print settings.
    /// </summary>
    /// <param name="_assetTransferContract">
    ///     Reference of the <c>AssetTransferMass</c> contract.
    /// </param>
    /// <param name="_srsPrintDestinationSettings">
    ///     Reference of the <c>SRSPrintDestinationSettings</c> contract.
    /// </param>
    /// <param name="_args">
    ///     Reference of the <c>Args</c> object.
    /// </param>
    /// <param name="_launch">
    ///     True by default, determines whether the report should be launched or not.
    /// </param>
    public static void executeReport(
        AssetTransferMassContract   _assetTransferContract,
        SRSPrintDestinationSettings _srsPrintDestinationSettings,
        Args                        _args,
        boolean                     _launch = true)
    {
        Query                           query;
        SrsReportDataContract           srsContract;
        SrsReportRunController          srsController;
        AssetTransferMassReportContract rdpContract;

        query = new query(SysOperationHelper::base64Decode(_assetTransferContract.parmQuery()));

        srsController = new SrsReportRunController();

        srsController.parmArgs(_args);
        srsController.parmReportName(ssrsReportStr(AssetTransferMassReport, Report));
        srsController.parmDialogCaption("@SYS4005946");
        srsContract = srsController.parmReportContract();

        rdpContract = srsContract.parmRdpContract() as AssetTransferMassReportContract;
        rdpContract.parmTransferDate(_assetTransferContract.parmTransferDate());
        rdpContract.parmTransferComment(_assetTransferContract.parmTransferComment());
        rdpContract.parmTargetDefaultDimension(_assetTransferContract.parmTargetDefaultDimension());

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            rdpContract.parmDueToAccount(_assetTransferContract.parmDueToAccount());
            rdpContract.parmDueFromAccount(_assetTransferContract.parmDueFromAccount());
        }

        if (srsContract.parmQueryContracts() != null)
        {
            srsContract.parmQueryContracts().insert(#DynamicParameter, query);
        }

        srsContract.parmPrintSettings(_srsPrintDestinationSettings);
        srsController.parmShowDialog(false);

        if (_launch)
        {
            srsController.runReport();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AssetTransferMassContract   assetTransferMassContract;
        SRSPrintDestinationSettings sRSPrintDestinationSettings;
        AssetTransferMassController massTransferController = AssetTransferMassController::construct();

        massTransferController.parmDialogCaption("@SYS4005929");
        massTransferController.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        massTransferController.startOperation();

        if (!massTransferController.isDialogCancelled())
        {
            assetTransferMassContract = massTransferController.getAssetTransferContract();

            if (massTransferController.parmExecutionMode() != SysOperationExecutionMode::ScheduledBatch)
            {
                if (assetTransferMassContract.parmAction() == AssetTransferMassAction::Preview)
                {
                    sRSPrintDestinationSettings = massTransferController.getDataContractObject('SRSPrintDestinationSettings') as SRSPrintDestinationSettings;
                    AssetTransferMassController::executeReport(assetTransferMassContract, sRSPrintDestinationSettings, _args);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>