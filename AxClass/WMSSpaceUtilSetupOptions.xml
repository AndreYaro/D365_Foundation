<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsSpaceUtilSetupOptions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSSpaceUtilSetupOptions</c> class encapsulates the parameters
/// required by the space utilization service.
/// </summary>
public class WmsSpaceUtilSetupOptions
{
    ReqPlanId                       reqPlanId;
    TransDate                       fromDate;
    TransDate                       toDate;
    WMSSpaceUtilStorageLoadUnitType storageLoadUnitType;
    PeriodTemplateName              periodTemplateName;
    container                       locationTypes;
    boolean                         isInputBlockingLocationPolicyEnabled;
    RefRecId                        reportSetupRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromWMSSPaceUtilReportSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>WMSSpaceUtilSetupOptions</c> class from the <c>WMSSpaceUtilReportSetup</c> record.
    /// </summary>
    /// <param name="_wmsSpaceUtilReportSetup">
    /// The <c>WMSSpaceUtilReportSetup</c> record to initialize from.
    /// </param>
    /// <remarks>
    /// Add a post-method handler to set the right value for locationTypes when extending the <c>WMSLocationType</c> enumeration.
    /// </remarks>
    public void initFromWMSSPaceUtilReportSetup(WMSSpaceUtilReportSetup _wmsSpaceUtilReportSetup)
    {
        this.parmIsInputBlockingLocationPolicyEnabled(_wmsSpaceUtilReportSetup.InputBlockingLocationPolicyEnabled);
        this.parmStorageLoadUnitType(_wmsSpaceUtilReportSetup.StorageLoadUnitType);

        locationTypes = conNull();

        if (_wmsSpaceUtilReportSetup.LocationTypeBuffer)
        {
            locationTypes += WMSLocationType::Buffer;
        }

        if (_wmsSpaceUtilReportSetup.LocationTypeInputPort)
        {
            locationTypes += WMSLocationType::InputPort;
        }

        if (_wmsSpaceUtilReportSetup.LocationTypeInspectionLocation)
        {
            locationTypes += WMSLocationType::InspectionLocation;
        }

        if (_wmsSpaceUtilReportSetup.LocationTypeKanbanSupermarket)
        {
            locationTypes += WMSLocationType::KanbanSupermarket;
        }

        if (_wmsSpaceUtilReportSetup.LocationTypeOutputPort)
        {
            locationTypes += WMSLocationType::OutputPort;
        }

        if (_wmsSpaceUtilReportSetup.LocationTypePick)
        {
            locationTypes += WMSLocationType::Pick;
        }

        if (_wmsSpaceUtilReportSetup.LocationTypeProductionInput)
        {
            locationTypes += WMSLocationType::ProductionInput;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWMSSPaceUtilServiceDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>WMSSpaceUtilSetupOptions</c> class from the <c>WMSSpaceUtilServiceDataContract</c> object.
    /// </summary>
    /// <param name="_wmsSpaceUtilServiceDataContract">
    /// The <c>WMSSpaceUtilServiceDataContract</c> object to initialize from.
    /// </param>
    public void initFromWMSSPaceUtilServiceDataContract(WMSSpaceUtilServiceDataContract _wmsSpaceUtilServiceDataContract)
    {
        WMSSpaceUtilReportSetup wmsSpaceUtilReportSetup;

        this.parmToDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) + _wmsSpaceUtilServiceDataContract.parmNumberOfDays());
        this.parmReqPlanId(_wmsSpaceUtilServiceDataContract.parmReqPlanId());
        this.parmReportSetupRecId(_wmsSpaceUtilServiceDataContract.parmReportSetupRecId());

        select firstonly wmsSpaceUtilReportSetup
        where wmsSpaceUtilReportSetup.wmsReportSetup == _wmsSpaceUtilServiceDataContract.parmReportSetupRecId();

        this.initFromWMSSPaceUtilReportSetup(wmsSpaceUtilReportSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInputBlockingLocationPolicyEnabled</Name>
				<Source><![CDATA[
    public boolean parmIsInputBlockingLocationPolicyEnabled(boolean _isInputBlockingLocationPolicyEnabled = isInputBlockingLocationPolicyEnabled)
    {
        isInputBlockingLocationPolicyEnabled = _isInputBlockingLocationPolicyEnabled;

        return isInputBlockingLocationPolicyEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocationTypes</Name>
				<Source><![CDATA[
    public container parmLocationTypes(container _locationTypes = locationTypes)
    {
        locationTypes = _locationTypes;

        return locationTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodTemplateName</Name>
				<Source><![CDATA[
    public PeriodTemplateName parmPeriodTemplateName(PeriodTemplateName _periodTemplateName = periodTemplateName)
    {
        periodTemplateName = _periodTemplateName;

        return periodTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportSetupRecId</Name>
				<Source><![CDATA[
    public RefRecId parmReportSetupRecId(RefRecId _reportSetupRecId = reportSetupRecId)
    {
        reportSetupRecId = _reportSetupRecId;

        return reportSetupRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanId</Name>
				<Source><![CDATA[
    public ReqPlanId parmReqPlanId(ReqPlanId _reqPlanId = reqPlanId)
    {
        reqPlanId = _reqPlanId;

        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorageLoadUnitType</Name>
				<Source><![CDATA[
    public WMSSpaceUtilStorageLoadUnitType parmStorageLoadUnitType(WMSSpaceUtilStorageLoadUnitType _storageLoadUnitType = storageLoadUnitType)
    {
        storageLoadUnitType = _storageLoadUnitType;

        return storageLoadUnitType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSSpaceUtilSetupOptions construct()
    {
        return new WMSSpaceUtilSetupOptions();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>