<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailScaleUnitUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailScaleUnitUtility</c> class provides functionalities related to retail scale units.
/// </summary>
public class RetailScaleUnitUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRetailScaleUnitDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the details of a retail scale unit.
    /// </summary>
    /// <param name = "_scaleUnitId">The retail scale unit id.</param>
    /// <returns>The retail scale unit object.</returns>
    public static RetailCDXServiceScaleUnitContract getRetailScaleUnitDetails(str _scaleUnitId)
    {
        RetailCDXServiceScaleUnitContract scaleUnitContract;

        RetailScaleUnit scaleUnit = RetailScaleUnit::find(_scaleUnitId);

        if (scaleUnit)
        {
            scaleUnitContract = new RetailCDXServiceScaleUnitContract();

            scaleUnitContract.parmScaleUnitId(_scaleUnitId);
            scaleUnitContract.parmType(enum2Symbol(enumNum(RetailScaleUnitType), scaleUnit.Type));
            scaleUnitContract.parmFriendlyName(scaleUnit.Name);

            scaleUnitContract.parmChannelDB(RetailScaleUnitUtility::GetRetailScaleUnitChannelDatabase(_scaleUnitId));
            scaleUnitContract.parmChannelProfile(RetailScaleUnitUtility::GetRetailScaleUnitChannelProfile(_scaleUnitId));
            scaleUnitContract.parmIdentityProvider(RetailScaleUnitUtility::GetRetailScaleUnitIdentityProvider(_scaleUnitId));
            scaleUnitContract.parmChannelList(RetailScaleUnitUtility::GetRetailScaleUnitChannelList(_scaleUnitId));
        }

        return scaleUnitContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailCloudScaleUnitIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of cloud scale units Ids.
    /// </summary>
    /// <returns>The list of cloud scale unit Ids.</returns>
    public static List getRetailCloudScaleUnitIds()
    {
        RetailScaleUnit retailScaleUnit;
        List scaleUnitIds = new List(Types::String);

        while select Id from retailScaleUnit
            where retailScaleUnit.Type == RetailScaleUnitType::RCSU
        {
            scaleUnitIds.addEnd(retailScaleUnit.Id);
        }
        return scaleUnitIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetRetailScaleUnitChannelList</Name>
				<Source><![CDATA[
    private static List GetRetailScaleUnitChannelList(str _scaleUnitId)
    {
        List channelsList = new List(Types::Class);
        RetailChannelView retailChannelView;
        RetailConnDatabaseProfile databaseProfile;
        RetailCDXDataStoreChannel databaseChannel;
        RetailChannelTableExt retailChannelTableExt;

        // Flight added on 2022-10, it will eventually be removed in future releases
        if (RetailGetScaleUnitDetailsFilteredByLiveChannelDbFlight::instance().isEnabled())
        {
            while select RetailChannelId, OMOperatingUnitNumber, ChannelType from retailChannelView
            exists join databaseChannel where databaseChannel.Channel == retailChannelView.RecId1
            exists join databaseProfile
            where databaseProfile.Name == _scaleUnitId
            && databaseProfile.RecId == databaseChannel.DatabaseProfile
            exists join retailChannelTableExt
            where retailChannelTableExt.LiveChannelDatabase == databaseProfile.RecId
            && retailChannelTableExt.Channel == retailChannelView.RecId1
            {
                RetailCDXServiceScaleUnitChannelContract channelContract = new RetailCDXServiceScaleUnitChannelContract();
                channelContract.parmChannelId(retailChannelView.RetailChannelId);
                channelContract.parmOmOperatingUnitNumber(retailChannelView.OMOperatingUnitNumber);
                channelContract.parmChannelType(enum2Symbol(enumNum(RetailChannelType), retailChannelView.ChannelType));
                channelsList.addEnd(channelContract);
            }
        }
        else
        {
            while select RetailChannelId, OMOperatingUnitNumber, ChannelType from retailChannelView
            exists join databaseChannel where databaseChannel.Channel == retailChannelView.RecId1
            exists join databaseProfile
                where databaseProfile.Name == _scaleUnitId
                   && databaseProfile.RecId == databaseChannel.DatabaseProfile
            {
                RetailCDXServiceScaleUnitChannelContract channelContract = new RetailCDXServiceScaleUnitChannelContract();
                channelContract.parmChannelId(retailChannelView.RetailChannelId);
                channelContract.parmOmOperatingUnitNumber(retailChannelView.OMOperatingUnitNumber);
                channelContract.parmChannelType(enum2Symbol(enumNum(RetailChannelType), retailChannelView.ChannelType));
                channelsList.addEnd(channelContract);
            }
        }

        return channelsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailScaleUnitChannelDatabase</Name>
				<Source><![CDATA[
    private static RetailCDXServiceChannelDatabaseConnectionContract getRetailScaleUnitChannelDatabase(str _scaleUnitId)
    {
        RetailConnDatabaseProfile                           channelDatabase;
        RetailCDXServiceChannelDatabaseConnectionContract   channelDBContract;

        channelDatabase = RetailConnDatabaseProfile::find(_scaleUnitId);

        if (channelDatabase)
        {
            channelDBContract = new RetailCDXServiceChannelDatabaseConnectionContract();

            channelDBContract.parmEncryptedConnectionString(channelDatabase.ConnectionString);
        }

        return channelDBContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailScaleUnitChannelProfile</Name>
				<Source><![CDATA[
    private static RetailCDXServiceChannelProfileContract getRetailScaleUnitChannelProfile(str _scaleUnitId)
    {
        RetailChannelProfile                    channelProfile;
        RetailCDXServiceChannelProfileContract  channelProfileContract;

        select firstonly channelProfile where channelProfile.Name == _scaleUnitId;

        if (channelProfile)
        {
            channelProfileContract = new RetailCDXServiceChannelProfileContract();

            RetailChannelProfileProperty retailServerProfileProperty, cloudPosProfileProperty;

            select firstonly retailServerProfileProperty
                    where   retailServerProfileProperty.ChannelProfile  == channelProfile.RecId
                        &&  retailServerProfileProperty.Key             == RetailServerProfilePropertyKey::InternalUrl;

            if (retailServerProfileProperty)
            {
                channelProfileContract.parmRetailServerUrl(retailServerProfileProperty.Value);
            }

            select firstonly cloudPosProfileProperty
                    where   cloudPosProfileProperty.ChannelProfile  == channelProfile.RecId
                        &&  cloudPosProfileProperty.Key             == RetailServerProfilePropertyKey::CloudPOSUrl;

            channelProfileContract.parmCloudPosUrl(cloudPosProfileProperty.Value);
        }

        return channelProfileContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailScaleUnitIdentityProvider</Name>
				<Source><![CDATA[
    private static RetailCDXServiceIdentityProviderContract getRetailScaleUnitIdentityProvider(str _scaleUnitId)
    {
        RetailCDXServiceIdentityProviderContract    identityProviderContract;
        RetailIdentityProvider                      identityProvider;
        RetailScaleUnitConfiguration                configuration;
        RetailScaleUnit                             retailScaleUnit;

        retailScaleUnit = RetailScaleUnit::find(_scaleUnitId);

        if (retailScaleUnit)
        {
            select configuration 
                where   configuration.RetailScaleUnit   == retailScaleUnit.RecId
                    &&  configuration.RefTableId        == tableNum(RetailIdentityProvider);

            if (configuration)
            {
                select identityProvider where identityProvider.RecId == configuration.RefRecId;

                if (identityProvider)
                {
                    identityProviderContract = new RetailCDXServiceIdentityProviderContract();

                    identityProviderContract.parmIssuerUrl(identityProvider.Issuer);
                    identityProviderContract.parmName(identityProvider.Name);

                    identityProviderContract.parmRelyingParties(RetailScaleUnitUtility::GetRetailScaleUnitIdentityProviderRelyingParties(identityProvider));
                }
            }
        }

        return identityProviderContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailScaleUnitIdentityProviderRelyingParties</Name>
				<Source><![CDATA[
    private static List getRetailScaleUnitIdentityProviderRelyingParties(RetailIdentityProvider _identityProvider)
    {
        List                relyingParties;
        RetailRelyingParty  relyingParty;

        while select relyingParty
            where   relyingParty.ProviderId == _identityProvider.RecId
        {
            if (relyingParties == null)
            {
                relyingParties = new List(Types::Class);
            }

            RetailCDXServiceRelyingPartyContract relyingPartyContract = new RetailCDXServiceRelyingPartyContract();

            relyingPartyContract.parmClientId(relyingParty.ClientId);

            relyingParties.addEnd(relyingPartyContract);
        }

        return relyingParties;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>