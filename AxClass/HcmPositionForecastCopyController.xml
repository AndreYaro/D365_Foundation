<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastCopyController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HcmPositionForecastCopyController</c> class is the controller class for
/// the <c>HcmPositionForecastCopyService</c> class.
/// This creates copy of selected forecast positions to a new Budget Planning Scenario.
/// </summary>
public class HcmPositionForecastCopyController extends SysOperationServiceController implements BatchRetryable
{
    #define.CallerDataSource("HcmPositionForecastScenario")

    container   positionForecastScenarioList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setContractData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the list of selected position(s) and adds it to the data contract.
    /// </summary>
    /// <param name="_args">
    /// The details of the calling form are contained within this parameter.
    /// </param>
    private void setContractData(Args _args)
    {
        Set                             selectedForecastPositionsSet;
        FormRun                         callerForm;
        FormDataSource                  hcmPositionForecastScenario_ds;
        HcmPositionForecastCopyContract contract;

        selectedForecastPositionsSet   = new Set(Types::Int64);
        callerForm                     = _args.caller();
        contract                       = this.getDataContractObject();
        hcmPositionForecastScenario_ds = callerform.dataSource(#CallerDataSource);

        this.setForecastPositionScenariosSet(hcmPositionForecastScenario_ds, selectedForecastPositionsSet);
        contract.parmListPositionForecastScenario(selectedForecastPositionsSet.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setForecastPositionScenariosSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the marked positions from the <c>HcmPositionForecastList</c> form and creates a list of those positions.
    /// </summary>
    /// <param name="_hcmPositionForecastScenario_ds">
    /// The data source from the caller form which supplies the list of forecast positions.
    /// </param>
    /// <param name="_selectedPosForecastScenarioIdSet">
    /// This will contain the set of selected forecast positions that will be copied to a new budget planning scenario.
    /// </param>
    private void setForecastPositionScenariosSet(FormDataSource _hcmPositionForecastScenario_ds, Set _selectedPosForecastScenarioIdSet)
    {
        HcmPositionForecastScenario positionForecastScenario;

        if (_hcmPositionForecastScenario_ds.anyMarked())
        {
            // Get the references to the marked positions.
            positionForecastScenario = _hcmPositionForecastScenario_ds.getFirst(true);

            while (positionForecastScenario)
            {
                _selectedPosForecastScenarioIdSet.add(positionForecastScenario.RecId);
                positionForecastScenario = _hcmPositionForecastScenario_ds.getNext();
            }
        }
        else
        {
            positionForecastScenario = _hcmPositionForecastScenario_ds.cursor();
            _selectedPosForecastScenarioIdSet.add(positionForecastScenario.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateForm</Name>
				<Source><![CDATA[
    public FormName templateForm()
    {
        return formStr(HcmPositionForecastScenarioCopy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCopyScenarioController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the controller for the process of copying the selected forecast positions to a new budget planning scenario.
    /// </summary>
    /// <param name="_args">
    /// The details of the calling form are contained within this parameter.
    /// </param>
    /// <returns>
    /// An instance of the class <c>HcmPositionForecastCopyController</c>.
    /// </returns>
    public static HcmPositionForecastCopyController createCopyScenarioController(Args _args)
    {
        HcmPositionForecastCopyController    controller;

        controller = new HcmPositionForecastCopyController(classStr(HcmPositionForecastCopyService),
                                                           methodStr(HcmPositionForecastCopyService, processPositionForecastCopyScenario),
                                                           SysOperationExecutionMode::Synchronous);

        // Displays the HcmPositionForecastScenarioCopy form
        controller.parmArgs(_args);

        // UI display
        controller.parmShowDialog(true);
        controller.parmShowProgressForm(true);

        // Initialize the parameter
        controller.setContractData(_args);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>HcmPositionForecastCopyController</c> class instance and starts operation.
    /// </summary>
    /// <param name = "_args">
    /// The details of the calling form are contained within this parameter.
    /// </param>
    public static void main(Args _args)
    {
        HcmPositionForecastCopyController controller;

        controller = HcmPositionForecastCopyController::createCopyScenarioController(_args);

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>