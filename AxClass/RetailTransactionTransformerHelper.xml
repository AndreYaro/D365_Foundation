<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionTransformerHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;

/// <summary>
/// The <c>RetailTransactionTransformerHelper</c> class provides common helper methods for the following transformer classes:
/// <c>RetailTransactionTransformer</c>, <c>RetailEodTransactionTransformer</c>, and <c>RetailEodAggregationTransformer</c>.
/// </summary>
internal static class RetailTransactionTransformerHelper
{ 
    private const static str RecordIdStr = 'RecordId';
    private const static str ValueStr = 'Value';
    private const static str PriceTypeStr = 'PriceType';
    private const static str PricesStr = 'Prices';
    private const static str PriceStr = 'Price';
    private const static str PriceLinesStr = 'PriceLines';
    private const static str PriceLineStr = 'PriceLine';
    private const static str LineNumberStr = 'LineNumber';
    private const static str SaleLineNumberStr = 'SaleLineNumber';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ReadTransactionNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate transaction notes on customer order info.
    /// </summary>
    /// <param name="_noteInfoCollection">Collection of note infos./// </param>
    /// <param name = "_transactionId">The transaction identifier.</param>
    /// <param name = "_terminalId">The terminal identifier.</param>
    /// <param name = "_storeId">The store identifier.</param>
    /// <param name = "_channelId">The channel identifier.</param>
    internal static void ReadTransactionNotes(NoteInfoCollection _noteInfoCollection,
                                                    RetailTransactionId _transactionId,
                                                    RetailTerminalId _terminalId,
                                                    RetailStoreId _storeId,
                                                    RefRecId _channelId)
    {
        // Skip populating the order notes for aggregated scenario.
        if (!_transactionId)
        {
            return;
        }

        RetailTransactionNoteTrans noteTable;

        while select Description, Notes, Restriction, StaffId, DocuRefRecId from noteTable
            where noteTable.Channel == _channelId
                && noteTable.transactionId == _transactionId
                && noteTable.terminal == _terminalId
                && noteTable.store == _storeId
        {
            NoteInfo noteInfo = new NoteInfo();

            noteInfo.Title = noteTable.Description;
            noteInfo.Description = noteTable.Notes;
            noteInfo.Restriction = noteTable.Restriction;
            noteInfo.StaffId = noteTable.StaffId;
            noteInfo.DocuRefRecId = noteTable.DocuRefRecId;

            _noteInfoCollection.Add(noteInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadTransactionAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate attributes on transaction header or line level.
    /// </summary>
    /// <param name="_attributeValueInfoCollection">
    /// Collection of attribute info.
    /// </param>
    /// <param name = "_transactionId">The transaction identifier.</param>
    /// <param name = "_terminalId">The terminal identifier.</param>
    /// <param name = "_storeId">The store identifier.</param>
    /// <param name = "_channelId">The channel identifier.</param>
    /// <param name = "_lineNum">The line number. Zero if level is header.</param>
    internal static void ReadTransactionAttributes(AttributeValueInfoCollection _attributeValueInfoCollection,
                                                      RetailTransactionId _transactionId,
                                                      RetailTerminalId _terminalId,
                                                      RetailStoreId _storeId,
                                                      RefRecId _channelId,
                                                      HeaderOrLineNum _lineNum)
    {
        // Skip populating the order attributes for aggregated scenario.
        if (!_transactionId)
        {
            return;
        }
        
        RetailTransactionAttributeTrans attributeTable;

        while select Name, TextValue from attributeTable
            where attributeTable.Channel == _channelId
                && attributeTable.transactionId == _transactionId
                && attributeTable.terminal == _terminalId
                && attributeTable.store == _storeId
                && attributeTable.HeaderOrLineNum == _lineNum
        {
            AttributeValueInfo attributeInfo = new AttributeValueInfo();
            attributeInfo.Name = attributeTable.Name;
            attributeInfo.TextValue = attributeTable.TextValue;
            _attributeValueInfoCollection.Add(attributeInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadSalesAgreement</Name>
				<Source><![CDATA[
    internal static void ReadSalesAgreement(
        CustomerOrderInfo customerOrderInfo,
        RetailTransactionId _transactionId,
        RetailTerminalId _terminalId,
        RetailStoreId _storeId,
        RefRecId _channelId)
    {
        if (_transactionId == '')
        {
            return;
        }

        RetailSalesAgreementSalesTrans salesAgreementSalesTrans;
        AgreementLine agreementLine;
        select firstonly SalesAgreementLineRecordId from salesAgreementSalesTrans
            where salesAgreementSalesTrans.Channel == _channelId
                && salesAgreementSalesTrans.transactionId == _transactionId
                && salesAgreementSalesTrans.terminal == _terminalId
                && salesAgreementSalesTrans.store == _storeId
        join Agreement from agreementLine
            where agreementLine.RecId == salesAgreementSalesTrans.SalesAgreementLineRecordId;

        customerOrderInfo.SalesAgreementRecordId = agreementLine.Agreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordIdStr</Name>
				<Source><![CDATA[
    internal static str getRecordIdStr()
    {
        return RecordIdStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueStr</Name>
				<Source><![CDATA[
    internal static str getValueStr()
    {
        return ValueStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceTypeStr</Name>
				<Source><![CDATA[
    internal static str getPriceTypeStr()
    {
        return PriceTypeStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPricesStr</Name>
				<Source><![CDATA[
    internal static str getPricesStr()
    {
        return PricesStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceStr</Name>
				<Source><![CDATA[
    internal static str getPriceStr()
    {
        return PriceStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceLinesStr</Name>
				<Source><![CDATA[
    internal static str getPriceLinesStr()
    {
        return PriceLinesStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNumberStr</Name>
				<Source><![CDATA[
    internal static str getLineNumberStr()
    {
        return LineNumberStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceLineStr</Name>
				<Source><![CDATA[
    internal static str getPriceLineStr()
    {
        return PriceLineStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSaleLineNumberStr</Name>
				<Source><![CDATA[
    internal static str getSaleLineNumberStr()
    {
        return SaleLineNumberStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAddMorePriceDetailsInfo</Name>
				<Source><![CDATA[
    internal protected static boolean shouldAddMorePriceDetailsInfo()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>