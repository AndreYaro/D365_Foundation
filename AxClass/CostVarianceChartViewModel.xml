<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostVarianceChartViewModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostVarianceChartViewModel</c> class is a ViewModel for the chart that shows variances for inventory statements.
/// </summary>
public class CostVarianceChartViewModel
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostVarianceChartViewModel construct()
    {
        return new CostVarianceChartViewModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the view model and updates the chart data.
    /// </summary>
    /// <param name = "_chartData">
    /// An instance of <C>CostVarianceChartTmp</C>.
    /// </param>
    /// <param name = "_args">Arguments that were passed to <C>CostVarianceChart</C> form.</param>
    public void initialize(CostVarianceChartTmp _chartData, CostReconciliationType _reconciliationType, CostStatementModel _statementModel)
    {
        CostVarianceModel model;

        switch (_reconciliationType)
        {
            case CostReconciliationType::WIP:
                model = CostWipVarianceModel::construct();
                break;
            case CostReconciliationType::Inventory:
                model = CostInventoryVarianceModel::construct();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        model.initialize(_statementModel);
        _chartData.setTmpData(model.getChartData());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>