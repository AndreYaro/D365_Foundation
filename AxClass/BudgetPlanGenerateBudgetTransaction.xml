<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateBudgetTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateBudgetTransaction</c> class is to act as a service class for <c>BudgetPlanGenerateBudgetTransaction</c> form.
/// </summary>
public class BudgetPlanGenerateBudgetTransaction
{
    BudgetTransactionLineTmpDetail       budgetTransactionLineTmpDetail;
    BudgetPlanGenerateBudgetTrnsContract budgetPlanGenerateBudgetTrnsContract;
    BudgetPlanCurrencyCode               accountingCurrencyCode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustAmountByFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount by applying the factor to the specified amount.
    /// </summary>
    /// <param name="_budgetPlanCurrencyAmount">
    /// The amount to which factor will be applied.
    /// </param>
    /// <param name="_budgetPlanCurrencyCode">
    /// The currency code of the amount.
    /// </param>
    /// <returns>
    /// The amount adjusted by the factor.
    /// </returns>
    protected BudgetPlanCurrencyAmount adjustAmountByFactor(AmountCur _budgetPlanCurrencyAmount, BudgetPlanCurrencyCode _budgetPlanCurrencyCode)
    {
        AmountCur amountCur = _budgetPlanCurrencyAmount;

        if (budgetPlanGenerateBudgetTrnsContract.parmTargetFactor() != 0.0)
        {
            amountCur = _budgetPlanCurrencyAmount * budgetPlanGenerateBudgetTrnsContract.parmTargetFactor();
            amountCur = CurrencyExchange::round(amountCur, _budgetPlanCurrencyCode);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetTransactionHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetTransactionHeader</c> record.
    /// </summary>
    /// <returns>
    /// A <c>BudgetTransactionHeader</c> record.
    /// </returns>
    protected BudgetTransactionHeader createBudgetTransactionHeader()
    {
        NumberSequenceReference numberSequenceReference;
        NumberSeq               numberSeq;
        ReasonRefRecID          reasonRefRecID;
        BudgetTransactionHeader budgetTransactionHeader;

        numberSequenceReference = BudgetParameters::numRefBudgetTransactionId();
        numberSeq = NumberSeq::newGetNumFromId(numberSequenceReference.NumberSequenceId);
        numberSeq.used();

        // Creating reasonTableRef table.
        if (budgetPlanGenerateBudgetTrnsContract.parmTargetReasonCode() != ''
            || budgetPlanGenerateBudgetTrnsContract.parmTargetReasonComment() != '')
        {
            reasonRefRecID = ReasonTableRef::createReasonTableRef(budgetPlanGenerateBudgetTrnsContract.parmTargetReasonCode(), budgetPlanGenerateBudgetTrnsContract.parmTargetReasonComment());
        }

        budgetTransactionHeader.clear();
        budgetTransactionHeader.TransactionNumber     = numberSeq.num();
        budgetTransactionHeader.TransactionStatus     = BudgetTransactionStatus::Draft;
        budgetTransactionHeader.Date                  = budgetPlanGenerateBudgetTrnsContract.parmTargetTransDate();
        budgetTransactionHeader.PrimaryLedger         = budgetPlanGenerateBudgetTrnsContract.parmSourceLedgerRecId();

        budgetTransactionHeader.setBudgetTransactionCode(budgetPlanGenerateBudgetTrnsContract.parmTargetBudgetTransactionCodeId());
        budgetTransactionHeader.editBudgetModel(true, budgetPlanGenerateBudgetTrnsContract.parmTargetBudgetModelId());
        budgetTransactionHeader.ReasonTableRef        = reasonRefRecID != 0 ? reasonRefRecID : budgetTransactionHeader.ReasonTableRef;

        if (budgetTransactionHeader.validateWrite())
        {
            budgetTransactionHeader.write();
        }

        return budgetTransactionHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetTransactionLineTmpDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>BudgetTransactionLineTmpDetail</c> record.
    /// </summary>
    /// <param name="_budgetTransactionHeader">
    /// A record of <c>BudgetTransactionHeader</c> table.
    /// </param>
    /// <param name="_budgetPlanLine">
    /// A record of <c>_budgetPlanLine</c> table.
    /// </param>
    protected void createBudgetTransactionLineTmpDetail(
        BudgetTransactionHeader _budgetTransactionHeader,
        BudgetPlanLine          _budgetPlanLine)
    {
        AmountCur                 transactionCurrencyAmount;
        AmountMST                 accountingCurrencyAmount;
        LedgerDimensionBudget     ledgerDimensionBudget;
        BudgetType                budgetType;
        boolean                   useAccountingCurrency = false;
        LineNumber                lineNumber;

        lineNumber = budgetTransactionLineTmpDetail.LineNumber + 1.0;

        MainAccountNum mainAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(_budgetPlanLine.LedgerDimension);

        if (mainAccount)
        {
            budgetType = BudgetTransactionLine::determineBudgetTypeFromMainAccount(mainAccount);
        }
        else
        {
            budgetType = (_budgetPlanLine.BudgetClass == BudgetClass::Expense ? BudgetType::Expense : BudgetType::Revenue);
        }
      
        transactionCurrencyAmount = _budgetPlanLine.TransactionCurrencyAmount;

        ledgerDimensionBudget = BudgetTransactionManager::saveBudgetLedgerDimension(_budgetPlanLine.LedgerDimension);

        if (ledgerDimensionBudget != 0 && transactionCurrencyAmount != 0)
        {
            budgetTransactionLineTmpDetail.clear();
            budgetTransactionLineTmpDetail.BudgetTransactionHeader   = _budgetTransactionHeader.RecId;

            // Setting the line number manually, because if the existing API then can not perform the bulk operation.
            budgetTransactionLineTmpDetail.LineNumber          = lineNumber;
            budgetTransactionLineTmpDetail.WorkflowStatus      = BudgetTransactionWorkflowStatus::NotSubmitted;
            budgetTransactionLineTmpDetail.BudgetType          = budgetType;
            budgetTransactionLineTmpDetail.Date                = _budgetPlanLine.EffectiveDate;
            budgetTransactionLineTmpDetail.LedgerDimension     = ledgerDimensionBudget;
            budgetTransactionLineTmpDetail.Price               = budgetPlanGenerateBudgetTrnsContract.parmTargetFactor() == 1 ? _budgetPlanLine.TransactionUnitPrice : 0;
            budgetTransactionLineTmpDetail.Quantity            = _budgetPlanLine.Quantity;
            budgetTransactionLineTmpDetail.Comment             = _budgetPlanLine.Comment;
            budgetTransactionLineTmpDetail.TransactionCurrency = _budgetPlanLine.TransactionCurrencyCode;
            budgetTransactionLineTmpDetail.BudgetPlanLine      = _budgetPlanLine.RecId;

            // Adjust the budget plan amount by the selected factor and round it.
            budgetTransactionLineTmpDetail.TransactionCurrencyAmount = this.adjustAmountByFactor(_budgetPlanLine.TransactionCurrencyAmount, budgetTransactionLineTmpDetail.TransactionCurrency);
            budgetTransactionLineTmpDetail.TransactionCurrencyAmount = this.roundWithRule(budgetTransactionLineTmpDetail.TransactionCurrencyAmount);

            if (budgetTransactionLineTmpDetail.TransactionCurrency == accountingCurrencyCode)
            {
                // The budget plan line is in accounting currency.
                budgetTransactionLineTmpDetail.AccountingCurrencyAmount = budgetTransactionLineTmpDetail.TransactionCurrencyAmount;
            }
            else
            {
                // Adjust the budget plan amount by the selected factor and round it.
                budgetTransactionLineTmpDetail.AccountingCurrencyAmount = this.adjustAmountByFactor(_budgetPlanLine.AccountingCurrencyAmount, accountingCurrencyCode);
                budgetTransactionLineTmpDetail.AccountingCurrencyAmount = this.roundWithRule(budgetTransactionLineTmpDetail.AccountingCurrencyAmount);
            }

            // Validates whether the BudgetTransactionLine is correct before inserting into the temp table.
            if (this.validateBudgetTransactionLineTmpDetail(budgetTransactionLineTmpDetail))
            {
                budgetTransactionLineTmpDetail.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetTransactionLineTmpDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>BudgetTransactionLine</c> record before inserting into the <c>BudgetTransactionLineTmpDetail</c> buffer.
    /// </summary>
    /// <param name = "_budgetTransactionLineTmpDetail">
    /// The buffer of the <c>BudgetTransactionLineTmpDetail</c> table.
    /// </param>
    protected boolean validateBudgetTransactionLineTmpDetail(BudgetTransactionLineTmpDetail _budgetTransactionLineTmpDetail)
    {
        BudgetTransactionLine budgetTransactionLine;
        boolean               isValid;

        budgetTransactionLine.clear();
        budgetTransactionLine.AccountingCurrencyAmount  = budgetTransactionLineTmpDetail.AccountingCurrencyAmount;
        budgetTransactionLine.BudgetTransactionHeader   = budgetTransactionLineTmpDetail.BudgetTransactionHeader;
        budgetTransactionLine.BudgetType                = budgetTransactionLineTmpDetail.BudgetType;
        budgetTransactionLine.Comment                   = budgetTransactionLineTmpDetail.Comment;
        budgetTransactionLine.Date                      = budgetTransactionLineTmpDetail.Date;
        budgetTransactionLine.LedgerDimension           = budgetTransactionLineTmpDetail.LedgerDimension;
        budgetTransactionLine.LineNumber                = budgetTransactionLineTmpDetail.LineNumber;
        budgetTransactionLine.Price                     = budgetTransactionLineTmpDetail.Price;
        budgetTransactionLine.Quantity                  = budgetTransactionLineTmpDetail.Quantity;
        budgetTransactionLine.TransactionCurrency       = budgetTransactionLineTmpDetail.TransactionCurrency;
        budgetTransactionLine.TransactionCurrencyAmount = budgetTransactionLineTmpDetail.TransactionCurrencyAmount;
        budgetTransactionLine.WorkflowStatus            = budgetTransactionLineTmpDetail.WorkflowStatus;

        if (budgetTransactionLine.validateWrite()
            && BudgetTransactionManager::validateLedgerDimension(budgetTransactionLine.LedgerDimension, budgetTransactionLine.Date))
        {
            isValid = true;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBudgetTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the budget transaction entry in the <c>BudgetTransactionHeader</c> and
    /// <c>BudgetTransactionLine</c> table.
    /// </summary>
    private void generateBudgetTransaction()
    {
        Query                   userDefinedQuery;
        QueryRun                queryRun;
        QueryBuildDataSource    budgetPlanHeaderDataSource;
        QueryBuildDataSource    budgetPlanLineDataSource;
        BudgetPlanLine          budgetPlanLine;
        BudgetTransactionHeader budgetTransactionHeader;

        // Checking the Budget Transaction number sequence.
        if (!BudgetTransactionManager::checkBudgetTransactionNumberSequence())
        {
            // Since number sequence is not properly setup, stopping the execution of process.
            return;
        }

        this.initAccountingCurrencyCode();

        userDefinedQuery = new Query(SysOperationHelper::base64Decode(budgetPlanGenerateBudgetTrnsContract.parmQueryBudgetRegisterEntryBudgetPlan()));
        budgetPlanHeaderDataSource = userDefinedQuery.dataSourceTable(tableNum(BudgetPlanHeader));
        budgetPlanLineDataSource =  userDefinedQuery.dataSourceTable(tableNum(BudgetPlanLine));
        budgetPlanLineDataSource.addLink(fieldNum(BudgetPlanHeader, RecId), fieldNum(BudgetPlanLine, BudgetPlanHeader));

        // Adding the filter which user defined on the generate form.
        budgetPlanHeaderDataSource.addRange(fieldNum(BudgetPlanHeader, RecId)).value(queryValue(budgetPlanGenerateBudgetTrnsContract.parmSourceBudgetPlanDocumentNumber()));
        budgetPlanLineDataSource.addRange(fieldNum(BudgetPlanLine, BudgetPlanScenario)).value(queryValue(budgetPlanGenerateBudgetTrnsContract.parmSourceBudgetPlanScenario()));

        ttsbegin;

        budgetTransactionHeader = this.createBudgetTransactionHeader();
        if (budgetTransactionHeader)
        {
            queryRun = new QueryRun(userDefinedQuery);

            while (queryRun.next())
            {
                budgetPlanLine = queryRun.get(tableNum(BudgetPlanLine)) as BudgetPlanLine;
                this.createBudgetTransactionLineTmpDetail(budgetTransactionHeader, budgetPlanLine);
            }
        }

        // Checking the table buffer to determine whether any line has been inserted.
        if (budgetTransactionLineTmpDetail)
        {
            this.performBulkInsertInBudgetPlanLine();
            budgetTransactionHeader.setIncludeInCashFlowForecast();

            ttscommit;
            info(strFmt("@GLS150158", budgetTransactionHeader.TransactionNumber));
        }
        else
        {
            // Since no budget transaction line is created, So the headerTransactionHeader record creation will be aborted.

            ttsabort;
            error("@GLS70521");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccountingCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the accounting currency by using the ledger defined in the budget planning process.
    /// </summary>
    protected void initAccountingCurrencyCode()
    {
        accountingCurrencyCode = Ledger::accountingCurrencyByLedger(budgetPlanGenerateBudgetTrnsContract.parmSourceLedgerRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBulkInsertInBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the bulk insert in the <c>BudgetTransactionLine</c> table.
    /// </summary>
    protected void performBulkInsertInBudgetPlanLine()
    {
        BudgetTransactionLine                   budgetTransactionLine;
        BudgetPlanLineBudgetTransactionLineLink budgetPlanLineBudgetTransactionLineLink;

        if (budgetPlanGenerateBudgetTrnsContract.parmTargetSummarizeToDimension() == NoYes::No)
        {
            insert_recordset budgetTransactionLine(
                AccountingCurrencyAmount,
                BudgetTransactionHeader,
                BudgetType,
                Comment,
                @Date,
                LedgerDimension,
                LineNumber,
                Price,
                Quantity,
                TransactionCurrency,
                TransactionCurrencyAmount,
                WorkflowStatus)
            select
                AccountingCurrencyAmount,
                BudgetTransactionHeader,
                BudgetType,
                Comment,
                @Date,
                LedgerDimension,
                LineNumber,
                Price,
                Quantity,
                TransactionCurrency,
                TransactionCurrencyAmount,
                WorkflowStatus
            from budgetTransactionLineTmpDetail;
        }
        else
        {
            insert_recordset budgetTransactionLine(
                AccountingCurrencyAmount,
                BudgetTransactionHeader,
                BudgetType,
                @Date,
                LedgerDimension,
                LineNumber,
                TransactionCurrency,
                TransactionCurrencyAmount,
                WorkflowStatus)
            select
                sum(AccountingCurrencyAmount),
                BudgetTransactionHeader,
                BudgetType,
                @Date,
                LedgerDimension,
                minof(LineNumber),
                TransactionCurrency,
                sum(TransactionCurrencyAmount),
                WorkflowStatus
            from budgetTransactionLineTmpDetail
            group by
                BudgetTransactionHeader,
                BudgetType,
                @Date,
                LedgerDimension,
                TransactionCurrency,
                WorkflowStatus;
        }

        // Inserting data in BudgetPlanLineBudgetTransactionLineLink.
        insert_recordset budgetPlanLineBudgetTransactionLineLink
        (
            BudgetPlanLine,
            BudgetTransactionLine
        )
        select BudgetPlanLine from budgetTransactionLineTmpDetail
            join RecId from budgetTransactionLine
                where budgetTransactionLineTmpDetail.BudgetTransactionHeader == budgetTransactionLine.BudgetTransactionHeader
                    && budgetTransactionLineTmpDetail.BudgetType             == budgetTransactionLine.BudgetType
                    && budgetTransactionLineTmpDetail.Date                   == budgetTransactionLine.Date
                    && budgetTransactionLineTmpDetail.LedgerDimension        == budgetTransactionLine.LedgerDimension
                    && budgetTransactionLineTmpDetail.TransactionCurrency    == budgetTransactionLine.TransactionCurrency
                    && budgetTransactionLineTmpDetail.WorkflowStatus         == budgetTransactionLine.WorkflowStatus
                    && budgetTransactionLineTmpDetail.LineNumber             == budgetTransactionLine.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundWithRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds the amount according to value specified by user.
    /// </summary>
    /// <param name="_budgetPlanCurrencyAmount">
    /// The amount which must be rounded.
    /// </param>
    /// <returns>
    /// The rounded amount.
    /// </returns>
    protected BudgetPlanCurrencyAmount roundWithRule(BudgetPlanCurrencyAmount _budgetPlanCurrencyAmount)
    {
        return CurrencyExchange::roundWithRule(_budgetPlanCurrencyAmount, budgetPlanGenerateBudgetTrnsContract.parmTargetRoundOff(), RoundOffType::Ordinary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes data generation.
    /// </summary>
    /// <param name="_contract">
    /// An object of <c>BudgetPlanGenerateBudgetTrnsContract</c> class.
    /// </param>
    public void startProcess(BudgetPlanGenerateBudgetTrnsContract _contract)
    {
        int tryCount = 0;

        try
        {
            budgetPlanGenerateBudgetTrnsContract = _contract;
            this.generateBudgetTransaction();
        }
        catch (Exception::Deadlock)
        {
            if (tryCount < 3)
            {
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            checkFailed("@SYS78886");
        }
        catch (Exception::Error)
        {
            checkFailed("@SYS78886");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>