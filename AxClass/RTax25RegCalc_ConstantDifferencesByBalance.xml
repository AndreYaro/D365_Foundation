<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_ConstantDifferencesByBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RTax25RegCalc_ConstantDifferencesByBalance</c> class is used for the calculation of "Constant tax differences by balance method" register.
/// </summary>
internal final class RTax25RegCalc_ConstantDifferencesByBalance extends RTax25RegCalc
{
    private const str EmptyStr = '';

    private Map registerLineMap;
    private AmountMST totalBookkeepingAmount, totalTaxAmount, totalAmountReceipt, totalAmountIssue, totalCTLAmount,totalCTAAmount;
    private AmountMST profitBookkeepingAmount, profitTaxAmount, profitAmountReceipt, profitAmountIssue, profitCTLAmount, profitCTAAmount;
    private AmountMST taxCodeBookkeepingAmount, taxCodeTaxAmount, taxCodeAmountReceipt, taxCodeAmountIssue, taxCodeCTLAmount, taxCodeCTAAmount;
    private TaxCode lastTaxCode;
    private RTax25Query queryNotInfluenceIncome, queryStdCurrentExpense;
    private Counter transCount;
    private RefRecId lastProfitTableRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates register data and saves it to buffer.
    /// </summary>
    public void calc()
    {
        const int RetryNum = 5;

        int64 totalStdCurrentExpense, totalNotInfluenceIncome;
        RTax25RegisterTransMap regTrans;
        try
        {
            ttsbegin;
            super();

            if (queryNotInfluenceIncome.first())
            {
                totalNotInfluenceIncome = queryNotInfluenceIncome.getTotalRecCount();
            }

            if (queryStdCurrentExpense.first())
            {
                totalStdCurrentExpense = queryStdCurrentExpense.getTotalRecCount();
            }

            if (totalNotInfluenceIncome)
            {
                do
                {
                    regTrans = queryNotInfluenceIncome.getRecord();
                    this.createBodyNotInfluenceIncome(regTrans);
                }
                while (queryNotInfluenceIncome.next());
            }

            if (totalStdCurrentExpense)
            {
                do
                {
                    regTrans = queryStdCurrentExpense.getRecord();
                    this.createBodyStdCurrentExpense(regTrans);
                }
                while (queryStdCurrentExpense.next());
            }

            if (registerLineMap.elements())
            {
                this.sortRegisterTrans();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if ((appl.ttsLevel() == 0)
                && (xSession::currentRetryCount() < RetryNum))
            {
                retry;
            }
            else
            {
                throw Exception::Deadlock;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBodyNotInfluenceIncome</Name>
				<Source><![CDATA[
    private void createBodyNotInfluenceIncome(RTax25RegisterTrans_NotInfluenceIncome _sourceRegisterTrans)
    {
        RTax25RegisterTrans_ConstantDifferencesByBalance regTrans;
        TaxCode taxCode = RTax25ProfitTable::find(_sourceRegisterTrans.rTax25ProfitTable).taxCode();
        RecordSortedList registerTransList;

        transCount++;

        container fieldValues = [queryNotInfluenceIncome.getField(1),
                                 queryNotInfluenceIncome.getField(2),
                                 queryNotInfluenceIncome.getField(3),
                                 queryNotInfluenceIncome.getField(4) ? queryNotInfluenceIncome.getField(4) : queryNotInfluenceIncome.getField(6),
                                 0.0,
                                 queryNotInfluenceIncome.getField(4),
                                 queryNotInfluenceIncome.getField(5),
                                 queryNotInfluenceIncome.getField(6),
                                 queryNotInfluenceIncome.getField(7)];

        RTax25RegisterLineNum64 correctLineNumber = date2num(queryNotInfluenceIncome.getField(1)) * 10000 + transCount;
        regTrans = regQuery.addBodyRecord(
            _sourceRegisterTrans.rTax25ProfitTable,
            fieldValues,
            _sourceRegisterTrans.TableId,
            _sourceRegisterTrans.RecId,
            _sourceRegisterTrans.LineDescription,
            -correctLineNumber,
            _sourceRegisterTrans.ProfitAmount);

        regTrans.LineNumber = -regTrans.LineNumber;

        if (registerLineMap.exists(taxCode))
        {
            registerTransList = registerLineMap.lookup(taxCode);
        }
        else
        {
            registerTransList = new RecordSortedList(tablenum(RTax25RegisterTrans_ConstantDifferencesByBalance));
            registerTransList.sortOrder(fieldnum(RTax25RegisterTrans_ConstantDifferencesByBalance, rTax25ProfitTable),
                                        fieldnum(RTax25RegisterTrans_ConstantDifferencesByBalance, LineNumber));
        }
        registerTransList.ins(regTrans);
        registerLineMap.insert(taxCode, registerTransList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBodyStdCurrentExpense</Name>
				<Source><![CDATA[
    private void createBodyStdCurrentExpense(RTax25RegisterTrans_StdCurrentExpense _sourceRegisterTrans)
    {
        RTax25RegisterTrans_ConstantDifferencesByBalance regTrans;
        TaxCode taxCode = RTax25ProfitTable::find(_sourceRegisterTrans.rTax25ProfitTable).taxCode();
        RecordSortedList registerTransList;
        AmountMST differenceReceipt, differenceIssue, ctlAmount, ctaAmount;
        Tax tax = new Tax();

        AmountMST bookkeepingAmount = queryStdCurrentExpense.getField(5);
        AmountMST taxAmount = queryStdCurrentExpense.getField(8) + queryStdCurrentExpense.getField(10);
        if (bookkeepingAmount == taxAmount)
        {
            return;
        }

        switch (RTax25ProfitTable::find(_sourceRegisterTrans.rTax25ProfitTable).ProfitType)
        {
            case RTax25ProfitType::Issue:
                if (bookkeepingAmount < taxAmount)
                {
                    differenceReceipt = taxAmount - bookkeepingAmount;
                }
                else
                {
                    differenceIssue = bookkeepingAmount - taxAmount;
                }
                break;
            case RTax25ProfitType::Receipt:
                if (bookkeepingAmount > taxAmount)
                {
                    differenceReceipt = bookkeepingAmount - taxAmount;
                }
                else
                {
                    differenceIssue = taxAmount - bookkeepingAmount;
                }
                break;
            default:
                return;
        }

        if (differenceReceipt)
        {
            ctaAmount = tax.taxCalcWithoutSource_RU(
                taxCode,
                dateTo,
                CompanyInfoHelper::standardCurrency(),
                differenceReceipt,
                TaxModuleType::Voucher);
        }
        else
        {
            ctlAmount = tax.taxCalcWithoutSource_RU(
                taxCode,
                dateTo,
                CompanyInfoHelper::standardCurrency(),
                differenceIssue,
                TaxModuleType::Voucher);
        }

        transCount++;

        container fieldValues = [queryStdCurrentExpense.getField(4),
                                 queryStdCurrentExpense.getField(2),
                                 queryStdCurrentExpense.getField(3),
                                 bookkeepingAmount,
                                 taxAmount,
                                 differenceReceipt,
                                 ctaAmount,
                                 differenceIssue,
                                 ctlAmount];

        RTax25RegisterLineNum64 correctLineNumber = date2num(queryStdCurrentExpense.getField(4)) * 10000 + transCount;
        regTrans = regQuery.addBodyRecord(
            _sourceRegisterTrans.rTax25ProfitTable,
            fieldValues,
            _sourceRegisterTrans.TableId,
            _sourceRegisterTrans.RecId,
            _sourceRegisterTrans.LineDescription,
            -correctLineNumber,
            differenceReceipt ? differenceReceipt : differenceIssue);

        regTrans.LineNumber = -regTrans.LineNumber;

        if (registerLineMap.exists(taxCode))
        {
            registerTransList = registerLineMap.lookup(taxCode);
        }
        else
        {
            registerTransList = new RecordSortedList(tablenum(RTax25RegisterTrans_ConstantDifferencesByBalance));
            registerTransList.sortOrder(fieldnum(RTax25RegisterTrans_ConstantDifferencesByBalance, rTax25ProfitTable),
                                        fieldnum(RTax25RegisterTrans_ConstantDifferencesByBalance, LineNumber));
        }
        registerTransList.ins(regTrans);
        registerLineMap.insert(taxCode, registerTransList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    private void createFooter(Counter _i, RTax25FieldId _blockFieldNum = 0)
    {
        TaxValue taxValue = TaxData::percent(lastTaxCode, dateTo, 0);
        container fieldValues;

        switch (_blockFieldNum)
        {
            case 1:
                fieldValues = [dateNull(),
                               EmptyStr,
                               EmptyStr,
                               taxCodeBookkeepingAmount,
                               taxCodeTaxAmount,
                               taxCodeAmountReceipt,
                               taxCodeCTAAmount,
                               taxCodeAmountIssue,
                               taxCodeCTLAmount];

                regQuery.addFooterRecord(
                    0,
                    fieldValues,
                    0,
                    strfmt("@GLS107102", lastTaxCode,taxValue),
                    _i);

                taxCodeBookkeepingAmount = 0;
                taxCodeTaxAmount = 0;
                taxCodeAmountReceipt = 0;
                taxCodeAmountIssue = 0;
                taxCodeCTAAmount = 0;
                taxCodeCTLAmount = 0;
                break;
            case 2:
                fieldValues = [dateNull(),
                               EmptyStr,
                               EmptyStr,
                               profitBookkeepingAmount,
                               profitTaxAmount,
                               profitAmountReceipt,
                               profitCTAAmount,
                               profitAmountIssue,
                               profitCTLAmount];

                regQuery.addFooterRecord(
                    lastProfitTableRecId,
                    fieldValues,
                    0,
                    strfmt("@GLS103999", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId),
                    _i);

                profitBookkeepingAmount = 0;
                profitTaxAmount = 0;
                profitAmountReceipt = 0;
                profitAmountIssue = 0;
                profitCTAAmount = 0;
                profitCTLAmount = 0;
                break;
            default:
                fieldValues = [dateNull(),
                               EmptyStr,
                               EmptyStr,
                               totalBookkeepingAmount,
                               totalTaxAmount,
                               totalAmountReceipt,
                               totalCTAAmount,
                               totalAmountIssue,
                               totalCTLAmount];

                regQuery.addFooterRecord(
                    0,
                    fieldValues,
                    0,
                    "@SYS37297",
                    _i);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    private void createHeader(Counter _i, RTax25FieldId _blockFieldNum = 0)
    {
        switch (_blockFieldNum)
        {
            case 1:
                regQuery.addHeaderRecord(
                    0,
                    conNull(),
                    0,
                    strfmt("@GLS107103", lastTaxCode, TaxData::percent(lastTaxCode, dateTo, 0)),
                    _i);
                break;
            case 2:
                regQuery.addHeaderRecord(
                    lastProfitTableRecId,
                    conNull(),
                    0,
                    strfmt("@GLS104111", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId),
                    _i);
                break;
            default:
                regQuery.addHeaderRecord(
                    0,
                    conNull(),
                    0,
                    "@SYS28004",
                    _i);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes register data.
    /// </summary>
    /// <param name="_registerJournalTrans">
    /// <c>RegisterJournalTrans</c> record being calculated.
    /// </param>
    /// <param name="_batch">
    /// <c>Batch</c> record.
    /// </param>
    /// <returns>
    /// true if initialization succeed; Otherwise false.
    /// </returns>
    public boolean init(RTax25RegisterJournalTrans _journalTrans = null, Batch _batch = null)
    {
        RTax25RegisterJournalTrans childJournal;
        boolean ret = super(_journalTrans, _batch);

        childJournal = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::NotInfluenceIncome, _journalTrans);
        queryNotInfluenceIncome = RTax25Query::newParameters(RTax25RegisterType::NotInfluenceIncome, childJournal, true);

        childJournal = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::StdCurrentExpense, _journalTrans);
        queryStdCurrentExpense = RTax25Query::newParameters(RTax25RegisterType::StdCurrentExpense, childJournal, true);

        registerLineMap = new Map (Types::String, Types::Class);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortRegisterTrans</Name>
				<Source><![CDATA[
    private void sortRegisterTrans()
    {
        RTax25RegisterTrans_ConstantDifferencesByBalance regTrans;
        int i = 1;
        MapEnumerator mapEnumerator = registerLineMap.getEnumerator();
        RecordSortedList registerTransList;

        while (mapEnumerator.moveNext())
        {
            registerTransList = mapEnumerator.currentValue();
            if (i == 1)
            {
                this.createHeader(i);
            }
            i++;
            lastTaxCode = mapEnumerator.currentKey();
            this.createHeader(i, 1);
            lastProfitTableRecId = 0;
            while (registerTransList.next(regTrans))
            {
                if (regTrans.rTax25ProfitTable != lastProfitTableRecId)
                {
                    if (lastProfitTableRecId)
                    {
                        i++;
                        this.createFooter(i, 2);
                    }
                    i++;
                    lastProfitTableRecId = regTrans.rTax25ProfitTable;
                    this.createHeader(i, 2);
                }
                i++;
                this.totals(regTrans);

                regTrans.LineNumber = -regTrans.LineNumber;
                if (regQuery.getSortedList().find(regTrans))
                {
                    regQuery.getSortedList().del(regTrans);
                    regTrans.LineNumber = i;

                    regQuery.getSortedList().ins(regTrans);
                }
            }
            i++;
            this.createFooter(i, 2);
            i++;
            this.createFooter(i, 1);
        }

        if (i > 1)
        {
            i++;
            this.createFooter(i);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    private void totals(RTax25RegisterTrans_ConstantDifferencesByBalance _regTrans)
    {
        totalBookkeepingAmount += _regTrans.BaseAmount;
        totalTaxAmount += _regTrans.TaxAmount;
        totalAmountReceipt += _regTrans.DifferencesIncome;
        totalCTAAmount += _regTrans.CTAAmount;
        totalAmountIssue += _regTrans.DifferencesExpense;
        totalCTLAmount += _regTrans.CTLAmount;

        profitBookkeepingAmount += _regTrans.BaseAmount;
        profitTaxAmount += _regTrans.TaxAmount;
        profitAmountReceipt += _regTrans.DifferencesIncome;
        profitCTAAmount += _regTrans.CTAAmount;
        profitAmountIssue += _regTrans.DifferencesExpense;
        profitCTLAmount += _regTrans.CTLAmount;

        taxCodeBookkeepingAmount += _regTrans.BaseAmount;
        taxCodeTaxAmount += _regTrans.TaxAmount;
        taxCodeAmountReceipt += _regTrans.DifferencesIncome;
        taxCodeCTAAmount += _regTrans.CTAAmount;
        taxCodeAmountIssue += _regTrans.DifferencesExpense;
        taxCodeCTLAmount += _regTrans.CTLAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>