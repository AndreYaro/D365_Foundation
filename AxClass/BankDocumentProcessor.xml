<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankDocumentProcessor</c> is bank document status change processor.
/// </summary>
class BankDocumentProcessor
{
    BankDocumentTable               bankDocumentTable;
    BankDocumentStatusChangeType    bankDocumentStatusChangeType;

    BankDocument                    bankDocument;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the processor.
    /// </summary>
    protected void initialize()
    {
        bankDocument = BankDocument::newFromBankDocumentTable(bankDocumentTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankDocumentStatusChangeType</Name>
				<Source><![CDATA[
        public BankDocumentStatusChangeType parmBankDocumentStatusChangeType(BankDocumentStatusChangeType _bankDocumentStatusChangeType = bankDocumentStatusChangeType)
    {
        bankDocumentStatusChangeType = _bankDocumentStatusChangeType;
        return bankDocumentStatusChangeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankDocumentTable</Name>
				<Source><![CDATA[
        public BankDocumentTable parmBankDocumentTable(BankDocumentTable _bankDocumentTable = bankDocumentTable)
    {
        if (!prmisDefault(_bankDocumentTable))
        {
            bankDocumentTable = _bankDocumentTable;
        }

        return bankDocumentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the status change.
    /// </summary>
    protected void submit()
    {
        BankDocumentState bankDocumentState;

        bankDocumentState = bankDocument.getCurrentBankDocumentState();
        bankDocumentState.parmBankDocumentStatusChangeType(bankDocumentStatusChangeType);

        bankDocumentState.transitionTo();

        this.submittedBankDocumentEventHandler(bankDocumentState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>submittedBankDocumentEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs after submitting bank document status change.
    /// </summary>
    /// <param name="_state">
    /// The bank docuemnt state.
    /// </param>
    delegate void submittedBankDocumentEventHandler(BankDocumentState _state)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the bank document.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source record id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source table id.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throw error when the bank document can not be removed.
    /// </exception>
    public static void deleteBankDocument(
        TableId     _sourceTableId,
        RefRecId    _sourceRecId)
    {
        BankDocumentTable   documentTable;
        BankDocument        bankDocument;

        documentTable = BankDocumentTable::findBySource(_sourceTableId, _sourceRecId, true);
        if (documentTable)
        {
            bankDocument = BankDocument::newFromBankDocumentTable(documentTable);

            if (!bankDocument.getCurrentBankDocumentState().isRemovable())
            {
                throw error("@GLS221624");
            }

            ttsBegin;
            documentTable.delete();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankDocumentTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates processor from bank document table.
    /// </summary>
    /// <param name="_bankDocumentTable">
    /// The bank document table.
    /// </param>
    /// <returns>
    /// The bank document processor.
    /// </returns>
    protected static BankDocumentProcessor newFromBankDocumentTable(BankDocumentTable _bankDocumentTable)
    {
        BankDocumentProcessor processor;

        processor = new BankDocumentProcessor();
        processor.parmBankDocumentTable(_bankDocumentTable);
        processor.initialize();

        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits bank document status change.
    /// </summary>
    /// <param name="_bankDocumentTable">
    /// The bank document table.
    /// </param>
    /// <param name="_bankDocumentStatusChangeType">
    /// The bank document status change type.
    /// </param>
    public static void submitBankDocument(
        BankDocumentTable               _bankDocumentTable,
        BankDocumentStatusChangeType    _bankDocumentStatusChangeType)
    {
        BankDocumentProcessor processor;

        processor = BankDocumentProcessor::newFromBankDocumentTable(_bankDocumentTable);
        processor.parmBankDocumentStatusChangeType(_bankDocumentStatusChangeType);
        processor.submit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitBankDocumentTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits bank document status change.
    /// </summary>
    /// <param name="_documentMap">
    /// The source of bank document.
    /// </param>
    /// <param name="_bankDocumentStatusChangeType">
    /// The status change type.
    /// </param>
    public static void submitBankDocumentTable(
        BankDocumentTableMap            _documentMap,
        BankDocumentStatusChangeType    _bankDocumentStatusChangeType = BankDocumentStatusChangeType::None)
    {
        BankDocumentTable   documentTable;

        if (BankAccountTable::isAdvancedBankReconciliationEnabled(_documentMap.parmBankAccount()))
        {
            documentTable = BankDocumentTable::findBySource(_documentMap.TableId, _documentMap.RecId);

            if (!documentTable)
            {
                if (_documentMap.canCreateBankDocument())
                {
                    documentTable.initValue();
                    documentTable.SourceRelationType = _documentMap.TableId;
                    documentTable.SourceRecId = _documentMap.RecId;
                    documentTable.BankDocumentBookType = _documentMap.parmBankDocumentBookType();
                    documentTable.insert();
                }
            }

            if (documentTable)
            {
                BankDocumentProcessor::submitBankDocument(documentTable, _bankDocumentStatusChangeType);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>