<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportModelNodeHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class PCImportModelNodeHandler
{
    Map                         childHandlers;
    XmlNode                     currentNode;
    PCImportModelNodeHandler    parentHandler;
    Map                         attributes;

    #PCExportImport
    #PC
    #define.tempImportPrefix('Import')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addChild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds another handler as a child to this one.
    /// </summary>
    /// <param name="_nodeType">
    /// The string representation of the type of nodes the new child should handle.
    /// </param>
    /// <param name="_handler">
    /// The new child handler.
    /// </param>
    /// <returns>
    /// True if no children for such node type was present, false otherwise.
    /// </returns>
    /// <remarks>
    /// Call to this method also sets the parent reference to this handler for the child.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If the new child already has a parent.
    /// </exception>
    public boolean addChild(str _nodeType, PCImportModelNodeHandler _handler)
    {
        if (_handler.parent() == null)
        {
            _handler.setParentHandler(this);

            return childHandlers.insert(_nodeType, _handler);
        }
        else
        {
            throw error('Child handler already has a parent!');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addChildWithType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new child handler to this one, obtaining the node type for the child from a call to its <c>.nodeType()</c> method.
    /// </summary>
    /// <param name="_child">
    /// The new child handler.
    /// </param>
    public void addChildWithType(PCImportModelNodeHandler _child)
    {
        this.addChild(_child.nodeType(), _child);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearState</Name>
				<Source><![CDATA[
    protected void clearState()
    {
        this.record(true).clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyField</Name>
				<Source><![CDATA[
    protected void copyField(str _fieldStr)
    {
        this.record().setFieldValue(_fieldStr, this.getFieldByName(_fieldStr));
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyIntField</Name>
				<Source><![CDATA[
    protected void copyIntField(str _fieldStr, int _default = 0)
    {
        this.record().setFieldValue(_fieldStr, this.getIntFieldByName(_fieldStr, _default));
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDateField</Name>
				<Source><![CDATA[
    protected void copyDateField(str _fieldStr)
    {
        this.record().setFieldValue(_fieldStr, this.getDateFieldByName(_fieldStr));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldById</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get an attribute value from the XML node corresponding to the field of the record.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the specified field of the record.
    /// </param>
    /// <returns>
    /// The string value of the attribute.
    /// </returns>
    public str getFieldById(FieldId _fieldId)
    {
        return this.getFieldByName(fieldId2name(this.record().TableId, _fieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get an attribute value from the XML node corresponding to the field of the record.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the specified field of the record.
    /// </param>
    /// <param name="_default">
    /// The default value to return if the XML node is not found.
    /// </param>
    /// <returns>
    /// The string value of the attribute.
    /// </returns>
    public str getFieldByName(str _fieldName, str _default = '')
    {
        str lowerCase = _fieldName;

        if (attributes.exists(lowerCase))
        {
            return attributes.lookup(lowerCase);
        }
        else
        {
            return _default;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntFieldById</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get an integer from an attribute value of the XML node corresponding to the field of the record.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the specified field of the record.
    /// </param>
    /// <returns>
    /// The value of the attribute converted to integer.
    /// </returns>
    public int getIntFieldById(FieldId _fieldId)
    {
        return str2int(this.getFieldById(_fieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntFieldByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get an integer from an attribute value of the XML node corresponding to the field of the record.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the specified field of the record.
    /// </param>
    /// <param name="_default">
    /// The default value to return if the XML node is not found.
    /// </param>
    /// <returns>
    /// The value of the attribute converted to integer.
    /// </returns>
    public int getIntFieldByName(str _fieldName, int _default = 0)
    {
        return str2int(this.getFieldByName(_fieldName, int2str(_default)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFieldByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a date from an attribute value of the XML node corresponding to the field of the record.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the specified field of the record.
    /// </param>
    /// <returns>
    /// The value of the attribute converted to date.
    /// </returns>
    public date getDateFieldByName(str _fieldName)
    {
        // Specify the positions of the day (1), month (2), and year (3)
        const int DateSequence = 123;

        return str2Date(this.getFieldByName(_fieldName), DateSequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRealFieldByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a real from an attribute value of the XML node corresponding to the field of the record.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the specified field of the record.
    /// </param>
    /// <returns>
    /// The value of the attribute converted to real.
    /// </returns>
    public real getRealFieldByName(str _fieldName)
    {
        return str2num(this.getFieldByName(_fieldName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>importData</Name>
				<Source><![CDATA[
    abstract protected void importData() {}

]]></Source>
			</Method>
			<Method>
				<Name>lookupChild</Name>
				<Source><![CDATA[
    protected PCImportModelNodeHandler lookupChild(str _nodeType)
    {
        if (childHandlers.exists(_nodeType))
        {
            return childHandlers.lookup(_nodeType);
        }
        else
        {
            throw error(strFmt("@SYP4980060", _nodeType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        childHandlers = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node</Name>
				<Source><![CDATA[
    protected XmlNode node()
    {
        return currentNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the type of the XML node the handler is supposed to handle.
    /// </summary>
    /// <returns>
    /// The table name of the record, but may be overridden to return a constant.
    /// </returns>
    public str nodeType()
    {
        return tableId2name(this.record().TableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parent</Name>
				<Source><![CDATA[
    public PCImportModelNodeHandler parent()
    {
        return parentHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMap</Name>
				<Source><![CDATA[
    private void populateMap()
    {
        XmlNode         current;
        XmlNamedNodeMap attributeMap = currentNode.attributes();

        attributes = new Map(Types::String, Types::String);

        if (attributeMap)
        {
            current = attributeMap.nextNode();

            while (current)
            {
                attributes.insert(strLwr(current.name()), current.value());

                current = attributeMap.nextNode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    protected void postProcess()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the XML node type, resets the handler state, builds a map of the attribute names converted to lowercase to
    /// their values and imports the data to the DB. Then for each child of the XML node finds the matching child handler and
    /// calls this method on it recursively. After processing the child nodes performs the post-processing.
    /// </summary>
    /// <param name="_node">
    /// The XML node to process.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If there is no matching child handler specified for some of the child XML nodes.
    /// </exception>
    public void processNode(XmlNode _node)
    {
        XmlNode                     currentChild;
        XmlNodeList                 children;
        PCImportModelNodeHandler    childHandler;

        currentNode     = _node;

        if (this.validateNode())
        {
            this.clearState();
            this.populateMap();
            this.importData();

            if (currentNode.hasChildNodes())
            {
                children = currentNode.childNodes();
                currentChild = children.nextNode();

                while (currentChild)
                {
                    if (currentChild.nodeType() != XmlNodeType::Text)
                    {
                        childHandler = this.lookupChild(currentChild.name());

                        if (!this.isPCPriceModelSelectionCriteriaImportExportEnabled()
                            || !childHandler.isHandlerRecordCompanySpecific())
                        {
                            childHandler.processNode(currentChild);
                        }
                        else
                        {
                            PCImportXmlDocumentHandler root = this.root();

                            if (root
                                && root.selectedLegalEntities())
                            {
                                var selectedLegalEntitiesEnumerator = root.selectedLegalEntities().getEnumerator();

                                while (selectedLegalEntitiesEnumerator.moveNext())
                                {
                                    SelectableDataArea legalEntityDataAreaId = CompanyInfo::findRecId(selectedLegalEntitiesEnumerator.current()).DataArea;

                                    if (legalEntityDataAreaId)
                                    {
                                        changeCompany(legalEntityDataAreaId)
                                        {
                                            childHandler.processNode(currentChild);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    currentChild = children.nextNode();
                }
            }

            this.postProcess();
        }
        else
        {
            throw error(strFmt("@SYP4980059", currentNode.name(), this.nodeType()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPCPriceModelSelectionCriteriaImportExportEnabled</Name>
				<Source><![CDATA[
    internal boolean isPCPriceModelSelectionCriteriaImportExportEnabled()
    {
        PCImportModelNodeHandler root = this.root();

        if (root
            && root is PCImportXmlDocumentHandler)
        {
            PCImportXmlDocumentHandler xmlDocumentRoot = root as PCImportXmlDocumentHandler;

            return xmlDocumentRoot
                && xmlDocumentRoot.isPriceModelSelectionCriteriaImportExportEnabled;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHandlerRecordCompanySpecific</Name>
				<Source><![CDATA[
    internal boolean isHandlerRecordCompanySpecific()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>record</Name>
				<Source><![CDATA[
    public Common record(boolean _suppressValidation = false)
    {
        Common result;

        if (_suppressValidation)
        {
            return result;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the ID of the record if it was already inserted.
    /// </summary>
    /// <returns>
    /// The RecId of the record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If the ID is 0, meaning the record was not saved.
    /// </exception>
    public RefRecId recordRecId()
    {
        RefRecId result = this.record().RecId;

        if (0 != result)
        {
            return result;
        }
        else
        {
            throw error('The record was not saved!');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>root</Name>
				<Source><![CDATA[
    protected PCImportModelNodeHandler root()
    {
        PCImportModelNodeHandler current = this;

        while (current.parent() != null)
        {
            current = current.parent();
        }

        return current;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParentHandler</Name>
				<Source><![CDATA[
    private void setParentHandler(PCImportModelNodeHandler _parent)
    {
        parentHandler = _parent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNode</Name>
				<Source><![CDATA[
    private boolean validateNode()
    {
        return currentNode.name() == this.nodeType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>xml2EcoResBool</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a string value to an <c>AttributeValueBoolean</c> value.
    /// </summary>
    /// <param name="_xml">
    /// An XML-formatted string.
    /// </param>
    /// <returns>
    /// An <c>AttributeValueBoolean</c> value.
    /// </returns>
    protected AttributeValueBoolean xml2EcoResBool(str _xml)
    {
        if (_xml == #True)
        {
            return NoYes::Yes;
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>