<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesEditLinesForm_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesEditLinesFormFactoryAttribute(DocumentStatus::Invoice)]
class SalesEditLinesForm_Invoice extends SalesEditLinesForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditPrintCODCashReceipt_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if the <c>Print cash receipt</c> checkbox should be editable in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///  True if it is possible to print receipt, and false - otherwise.
    /// </returns>
    boolean allowEditPrintCODCashReceipt_W()
    {
        SalesParmTable          salesParmTableLocal;
        SalesTable              salesTableLocal;
        PaymTerm                paymTerm;
        CashRegisterPaymMode_W  cashRegisterPaymMode;

        select firstonly RecId from salesParmTableLocal
            where salesParmTableLocal.ParmId == salesParmUpdate.ParmId
        exists join salesTableLocal
            where salesTableLocal.SalesId == salesParmTableLocal.SalesId
        exists join paymTerm
            where paymTerm.PaymTermId == salesTableLocal.Payment
                && paymTerm.CashLedgerDimension != 0
        exists join cashRegisterPaymMode
            where cashRegisterPaymMode.PaymMode == salesTableLocal.PaymMode;

        return salesParmTableLocal.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankLCExportLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the letter of credit line field is visible.
    /// </summary>
    /// <returns>
    ///    true if the letter of credit line field is visible; otherwise, false.
    /// </returns>
    public boolean bankLCExportLine()
    {
        return BankLCExportFeatureChecker::checkBankLCExportEnabled() && !salesParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>billOfLading</Name>
				<Source><![CDATA[
    public boolean billOfLading()
    {
        return SalesParameters::find().useBillOfLadingOnInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>classType</Name>
				<Source><![CDATA[
    str classType()
    {
        return "@SYS12128";
    }

]]></Source>
			</Method>
			<Method>
				<Name>correct</Name>
				<Source><![CDATA[
    boolean correct()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctPhysical_RU</Name>
				<Source><![CDATA[
    boolean correctPhysical_RU()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return true;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditRemaining</Name>
				<Source><![CDATA[
    boolean creditRemaining()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBankAccountId</Name>
				<Source><![CDATA[
    boolean custBankAccountId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBankAccountIdAllowEdit</Name>
				<Source><![CDATA[
    boolean custBankAccountIdAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBankLCExportLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the letter of credit line field is editable.
    /// </summary>
    /// <returns>
    ///    true if the letter of credit line field is editable; otherwise, false.
    /// </returns>
    public boolean editBankLCExportLine()
    {
        return salesTable && salesTable.isMarkedForBankLC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDeliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the deliver now quantity fields are editable in the edit lines form.
    /// </summary>
    /// <returns>
    /// true if the deliver now quantity fields will be editable in the edit lines form; otherwise, false.
    /// </returns>
    public boolean editDeliverNow()
    {
        return salesParmUpdate.SpecQty != SalesUpdate::PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editingCaption</Name>
				<Source><![CDATA[
    str editingCaption(Common _callerTable = null)
    {
        return "@SYS75613";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedDueDate</Name>
				<Source><![CDATA[
    boolean fixedDueDate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterButtonCaption</Name>
				<Source><![CDATA[
    str formLetterButtonCaption()
    {
        return "@SYS12128";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterButtonCaptionCopy</Name>
				<Source><![CDATA[
    str formLetterButtonCaptionCopy()
    {
        return "@SYS93915";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterCaption</Name>
				<Source><![CDATA[
    str formLetterCaption()
    {
        return "@SYS12938";
    }

]]></Source>
			</Method>
			<Method>
				<Name>giro</Name>
				<Source><![CDATA[
    boolean giro()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTrackingRegistrationEnabled</Name>
				<Source><![CDATA[
    public boolean inventTrackingRegistrationEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDropShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that the dropship checkbox should not be shown.
    /// </summary>
    /// <returns>
    /// false indicating that the dropship checkbox should not be shown.
    /// </returns>
    public boolean mcrDropShipment()
    {
        // Hide the dropship checkbox
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGiftCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that the gift certificate checkbox should be shown.
    /// </summary>
    /// <returns>
    /// true indicating that the gift certificate checkbox should be shown.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean mcrGiftCertificate()
    {
        // Show the gift certificate checkbox
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrShowMiscChargePrintOption</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true.
    /// </summary>
    /// <returns>
    ///     true.
    /// </returns>
    /// <remarks>
    ///     Whether or not misc charge print option should be shown. For every form except invoicing
    ///     this is not shown.
    ///     The print option dictates whether each misc charge is printed on a separate line or whether
    ///     they are summarized/grouped by misc charge code.
    /// </remarks>
    public boolean mcrShowMiscChargePrintOption()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numCaption_W</Name>
				<Source><![CDATA[
    public str numCaption_W()
    {
        return "@SYS12128";
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentSched</Name>
				<Source><![CDATA[
    boolean paymentSched()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCODLabel</Name>
				<Source><![CDATA[
    boolean printCODLabel()
    {
        if (salesTable.payment().PaymMethod == NetCurrent::COD)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOverdueFineTxt_FR</Name>
				<Source><![CDATA[
    public boolean printOverdueFineTxt_FR()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printShippingLabel</Name>
				<Source><![CDATA[
    boolean printShippingLabel()
    {
        return SalesParameters::find().useShippingStatOnInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyToPickInSalesUnit</Name>
				<Source><![CDATA[
    boolean qtyToPickInSalesUnit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceOnHand</Name>
				<Source><![CDATA[
    boolean reduceOnHand()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserve</Name>
				<Source><![CDATA[
    boolean reserve()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectJournalButton</Name>
				<Source><![CDATA[
    public boolean selectJournalButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupBankLCExportLineController</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets up the <c>BankLCExportLineNumController</c> object that is used for the
    ///    <c>BankLCExportLine</c> field.
    /// </summary>
    public void setupBankLCExportLineController()
    {
        super();
        if (bankLCExportLineNumController)
        {
            bankLCExportLineNumController.parmAllowOpened(false);
            bankLCExportLineNumController.parmAllowUpdatedPackingSlip(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAdvanceInvoiceSettlement_W</Name>
				<Source><![CDATA[
    public boolean showAdvanceInvoiceSettlement_W()
    {
        return CustParameters::find().AdvanceInvoicePostingProfile_W || CzCustAdvanceInvoiceTable::featureEnabled_Ledger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAlcoholLicenseSeriesNum_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls the visibility of the <c>AlcoholLicenseSeriesNum_RU</c> field on the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///    true
    /// </returns>
    public boolean showAlcoholLicenseSeriesNum_RU()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCFDIReference_MX</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the CDFI reference button should be shown.
    /// </summary>
    /// <returns>
    ///     True if the CDFI reference button should be shown; otherwise, false.
    /// </returns>
    public boolean showCFDIReference_MX()
    {
        return EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled()
        && EInvoiceCFDIParameters_MX::find().cfdiVersion >= EInvoiceCFDIVersion_MX::V3_3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCorrect_RU</Name>
				<Source><![CDATA[
    public boolean showCorrect_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCorrectedInvoiceId_RU</Name>
				<Source><![CDATA[
    public boolean showCorrectedInvoiceId_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEntryCertificateRequired_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the <c>Entry certificate required</c> field should be shown in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///    True if the entry certificate management is enabled, false otherwise.
    /// </returns>
    public boolean showEntryCertificateRequired_W()
    {
        return CustParameters::find().EntryCertificateManagementEnabled_W && !salesParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showExtra_RU</Name>
				<Source><![CDATA[
    final public boolean showExtra_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFiscalDocType_PL</Name>
				<Source><![CDATA[
    public boolean showFiscalDocType_PL()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFiscalDocumentType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the fiscal document type field should be shown.
    /// </summary>
    /// <returns>
    /// True if the fiscal document type field should be shown; otherwise, false.
    /// </returns>
    public boolean showFiscalDocumentType_BR()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFiscalReference_BR</Name>
				<Source><![CDATA[
    public boolean showFiscalReference_BR()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInventOwnerId_RU</Name>
				<Source><![CDATA[
    public boolean showInventOwnerId_RU()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInventProfileType_RU</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public boolean showInventProfileType_RU()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInvoicePostingType_RU</Name>
				<Source><![CDATA[
    public boolean showInvoicePostingType_RU()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInvoicePrintout_RU</Name>
				<Source><![CDATA[
    // Invoce layout (TORG-12, M-15)
    #ISOCountryRegionCodes
    public boolean showInvoicePrintout_RU()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showIssueOwnEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the <c>Issue own certificate</c> field should be shown in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///    True if the issuing functionality is enabled, false otherwise.
    /// </returns>
    public boolean showIssueOwnEntryCertificate_W()
    {
        return CustParameters::find().EntryCertificateIssuingEnabled_W && !salesParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showNum_W</Name>
				<Source><![CDATA[
    public boolean showNum_W()
    {
        return CustParameters::find().InvoiceIdEditing_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOfficials_RU</Name>
				<Source><![CDATA[
    final public boolean showOfficials_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPackingSlipDetails</Name>
				<Source><![CDATA[
    public boolean showPackingSlipDetails()
    {
        return salesParmUpdate.SpecQty == SalesUpdate::PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPDSCalculatedLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the calculation line amount should be displayed on the form.
    /// </summary>
    /// <returns>
    ///     true if the calculation line amount should be displayed; otherwise, false.
    /// </returns>
    public boolean showPDSCalculatedLineAmount()
    {
        PDSSalesLinePricingCalculation salesLinePricingCalculation;
        SalesParmLine lclSalesParmLine;

        if (#PDSPotencyEnabled)
        {
            select firstOnly SalesLine, PriceCalculation
                from salesLinePricingCalculation
                exists join lclsalesParmLine
                    where lclSalesParmLine.SalesLineRecId == salesLinePricingCalculation.SalesLine
                        && lclSalesParmLine.ParmId == salesParmUpdate.ParmId;

            return salesLinePricingCalculation.SalesLine && salesLinePricingCalculation.PriceCalculation;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPostingProfile_RU</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public boolean showPostingProfile_RU()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPostponeVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value to determine whether the <c>PostponeVAT</c> field should be visible on the form.
    /// </summary>
    /// <returns>
    /// true if the <c>PostponeVAT</c> field should be visible; otherwise, false.
    /// </returns>
    public boolean showPostponeVAT()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintAcceptanceReport_RU</Name>
				<Source><![CDATA[
    final public boolean showPrintAcceptanceReport_RU()
    {
        return salesTable.SalesType != SalesType::ReturnItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintCODCashReceipt_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check availability of cash receipt printing.
    /// </summary>
    /// <returns>True if printing of cash reciept is avaliable, false - otherwise.</returns>
    public boolean showPrintCODCashReceipt_W()
    {
        return CashRegisterProcessingBase::isEnabledForCurrentUser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintBlankDate_LT</Name>
				<Source><![CDATA[
    public boolean showPrintBlankDate_LT()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>ButtonEntryCertificate_W</c> button can be enabled in <c>SalesEditLines</c> form.
    /// </summary>
    /// <param name = "_isChecked">Is checkbox "Issue entry certificate" checked or not. Optional.</param>
    /// <returns>True if the <c>ButtonEntryCertificate_W</c> button is available; false otherwise.</returns>
    public boolean enableButtonEntryCertificate_W(boolean _isChecked = false)
    {
        return this.isCustomerOwnEntryCertificate_W(_isChecked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the <c>Print entry certificate</c> checkbox should be shown in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///    True if the issuing functionality is enabled, false otherwise.
    /// </returns>
    public boolean showPrintEntryCertificate_W()
    {
        return CustParameters::find().EntryCertificateIssuingEnabled_W && !salesParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintInventBaileeReport_RU</Name>
				<Source><![CDATA[
    public boolean showPrintInventBaileeReport_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintMST_RU</Name>
				<Source><![CDATA[
    final public boolean showPrintMST_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showVatDueDate_W</Name>
				<Source><![CDATA[
    final public boolean showVatDueDate_W()
    {
        return TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showVATOnPayment_RU</Name>
				<Source><![CDATA[
    final public boolean showVATOnPayment_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subLine</Name>
				<Source><![CDATA[
    public boolean subLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByJournal</Name>
				<Source><![CDATA[
    boolean sumByJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByJournalCaption</Name>
				<Source><![CDATA[
    str sumByJournalCaption()
    {
        return "@SYS11549";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateCaption</Name>
				<Source><![CDATA[
    str transDateCaption()
    {
        return "@SYS57610";
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLoadAllowIncreaseQuantities_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the quantities can be increased based on the fact that the sales parm table has been created using a WHSLoadTable or not.
    ///     The user should not be allowed to add new sales parm tables, new sales parm lines, neither changing
    ///     the quantities of the existing lines (invent now, delivery now, spec quantity).
    /// </summary>
    /// <param name="_loadId">
    ///     Load id of the WHSLoadTable used to created the sales parm table. Blank if the sales parm table has not been created from a load.
    /// </param>
    /// <returns>
    ///     True if the parm has not been created from a WHSLoadTable; otherwise; false
    /// </returns>
    public boolean whsLoadAllowIncreaseQuantities_BR(WHSLoadId _loadId)
    {
        if (_loadId)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>