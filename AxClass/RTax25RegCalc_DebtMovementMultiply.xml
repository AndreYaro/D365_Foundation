<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_DebtMovementMultiply</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RTax25RegCalc_DebtMovementMultiply extends RunBaseBatch implements BatchRetryable
{
    CustVend_RU                 custVend;
    NoYes                       settleSelect;
    RecId                       recIdFrom, recIdTo;
    RTax25RegisterLineNum64     startCount, recordCount;
    RefRecId                    journalTransRecId;
    RTax25RegisterJournalTrans  registerJournalTrans;
    RTax25Query                 regQuery;
    RTax25RegisterTransMap      regTrans;
    RTax25RegisterType          registerType;
    TransDate                   dateFrom, dateTo;
    RTax25DebtType              debtType;
    RefRecId                    amountDiffLossProfitTableRecId;
    RefRecId                    amountDiffProfitProfitTableRecId;
    CustVendSettlement          currentCustVendSettlement;
    CustVendTrans               currentOffsetCustVendTrans;
    LedgerCurrencyParameters_RU ledgerCurrencyParameters;
    TransDate                   modelStartDate;
    TransDate                   modelEndDate;
    RTax25DebtModel             rTax25DebtModel;
 
    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        startCount,
        journalTransRecId,
        inBatch,
        custVend,
        settleSelect,
        recIdFrom,
        recIdTo
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountsOrder</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Description accountsOrder(CustVendTrans _custVendTrans)
    {
        PaymTerm        paymentTerms;
        CustInvoiceJour custInvoiceJour;
        VendInvoiceJour vendInvoiceJour;

        if (! _custVendTrans.Invoice)
            return "";

        switch (_custVendTrans.TableId)
        {
            case tablenum(CustTrans) :
                select firstonly RecId from custInvoiceJour
                    index hint InvoiceNumIdx
                    where custInvoiceJour.InvoiceId         == _custVendTrans.Invoice   &&
                          custInvoiceJour.InvoiceDate       == _custVendTrans.TransDate &&
                          custInvoiceJour.InvoiceAccount    == _custVendTrans.AccountNum
                join Description from paymentTerms
                    where paymentTerms.PaymTermId == custInvoiceJour.Payment;
                break;
            case tablenum(VendTrans) :
                select firstonly RecId from vendInvoiceJour
                    index hint InvoiceIdx
                    where vendInvoiceJour.InvoiceId         == _custVendTrans.Invoice   &&
                          vendInvoiceJour.InvoiceDate       == _custVendTrans.TransDate &&
                          vendInvoiceJour.InvoiceAccount    == _custVendTrans.AccountNum
                join Description from paymentTerms
                    where paymentTerms.PaymTermId == vendInvoiceJour.Payment;
                break;
        }

        return paymentTerms.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmountDifference</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RefRecId calcAmountDifference(CustVendTrans _custVendTrans, CustVendTrans _offsetCustVendTrans, TransDate _settlementDate, BookStructSmallVATAmounts_RU _amounts)
    {
        FactureJour_RU               amountDiffFactureJour;
        CustVendTransPostingLog_RU   postingLog;
        TaxTrans                     taxTrans;
        TaxTrans_RU                  taxTrans_RU;
        TaxTable                     taxTable;
        AmountMST                    amountMST;
        RefRecId                     profitTableRecId;
        int                          sign = _custVendTrans.TableId == tablenum(CustTrans) ? -1 : 1;

        select firstonly amountDiffFactureJour
            join postingLog
            where postingLog.TransRecId  == _custVendTrans.RecId            &&
                  postingLog.OffSetRecId == _offsetCustVendTrans.RecId      &&
                  postingLog.TransDate   == _settlementDate                 &&
                  amountDiffFactureJour.PostingLogRecId == postingLog.RecId &&
                  postingLog.PostingLogType             == CustVendTransPostingLogType_RU::ExchAmountDiff;

        if (amountDiffFactureJour)
        {
            while select sum(TaxBaseAmount), sum(TaxAmount) from taxTrans
                where taxTrans.Voucher                      == postingLog.Voucher       &&
                      taxTrans.TransDate                    == postingLog.TransDate     &&
                      taxTrans.TaxOrigin == TaxOrigin::Tax
            exists join taxTrans_RU
                where taxTrans_RU.TaxTrans == taxTrans.RecId
                && taxTrans_RU.CustVendTransPostingLog_RU   == postingLog.recID
            exists join taxTable
                where taxTable.TaxCode     == taxTrans.TaxCode &&
                      (taxTable.TaxType_W == TaxType_W::VAT        ||
                       taxTable.TaxType_W == TaxType_W::VATReduced ||
                       taxTable.TaxType_W == TaxType_W::VATZero)
            {
                _amounts.addAmounts(sign * (taxTrans.TaxBaseAmount + taxTrans.TaxAmount),
                                    sign *  taxTrans.TaxBaseAmount,
                                    sign *  taxTrans.TaxAmount);
            }

            if (_amounts.amountInclVAT() != amountDiffFactureJour.amountInclTax())
            {
                amountMST = amountDiffFactureJour.amountInclTax() - _amounts.amountInclVAT();
                _amounts.addAmounts(amountMST, amountMST, 0);
            }

            profitTableRecId = postingLog.AmountMST < 0 ? amountDiffProfitProfitTableRecId : amountDiffLossProfitTableRecId;
        }

        return profitTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExchRateDifference</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RefRecId calcExchRateDifference(CustVendTrans _custVendTrans, CustVendTrans _offsetCustVendTrans, TransDate _settlementDate, BookStructSmallVATAmounts_RU _amounts)
    {
        CustVendTransPostingLog_RU   postingLog;
        RefRecId                     profitTableRecId;
        int                          sign = _custVendTrans.TableId == tablenum(CustTrans) ? -1 : 1;

        select sum(AmountMST) from postingLog
            // See CustVendSettle.postExchRateDiff_RU()
            // Summed transations give the whole amount with taxes
            where postingLog.TransRecId         == _custVendTrans.RecId          &&
                  postingLog.OffSetRecId        == _offsetCustVendTrans.RecId    &&
                  postingLog.TransDate          == _settlementDate               &&
                  postingLog.PostingLogType     == CustVendTransPostingLogType_RU::ExchAdjustment &&
                  postingLog.RefTableId         == _custVendTrans.TableId;

        if (postingLog.AmountMST)
        {
            _amounts.addAmounts(sign * postingLog.AmountMST, sign * postingLog.AmountMST, 0);

            if (postingLog.AmountMST < 0)
            {
                profitTableRecId = LedgerCurrencyParameters_RU::findParameters(Ledger::current(), _custVendTrans.CurrencyCode).rTax25ProfitTableProfit;
            }
            else
            {
                profitTableRecId = LedgerCurrencyParameters_RU::findParameters(Ledger::current(), _custVendTrans.CurrencyCode).rTax25ProfitTableLoss;
            }
        }

        return profitTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debtType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RTax25DebtType debtType()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchCustVendDebtsMovement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fetchCustVendDebtsMovement(CustVend_RU _custVend)
    {
        CustVendTrans           custVendTrans;
        CustVendTransOpen       custVendTransOpen;
        CustVendSettlement      custVendSettlement;
        boolean                 prepayment;
        ;

        progress.setCaption(_custVend == CustVend_RU::Cust ? "@SYS11307" : "@SYS9449");

        if (_custVend == CustVend_RU::Cust)
        {
            custVendTrans      = new DictTable(tablenum(CustTrans)).makeRecord();
            custVendTransOpen  = new DictTable(tablenum(CustTransOpen)).makeRecord();
            custVendSettlement = new DictTable(tablenum(CustSettlement)).makeRecord();
            amountDiffProfitProfitTableRecId = ledgerCurrencyParameters.rTax25ProfitTableProfitCust;
            amountDiffLossProfitTableRecId   = ledgerCurrencyParameters.rTax25ProfitTableLossCust;
        }
        else
        {
            custVendTrans      = new DictTable(tablenum(VendTrans)).makeRecord();
            custVendTransOpen  = new DictTable(tablenum(VendTransOpen)).makeRecord();
            custVendSettlement = new DictTable(tablenum(VendSettlement)).makeRecord();
            amountDiffProfitProfitTableRecId = ledgerCurrencyParameters.rTax25ProfitTableProfitVend;
            amountDiffLossProfitTableRecId   = ledgerCurrencyParameters.rTax25ProfitTableLossVend;
        }
        if (registerType == RTax25RegisterType::DebtDebitMovement ||
            registerType == RTax25RegisterType::DebtDebitMovementRAP)
        {
            prepayment = (_custVend == CustVend_RU::Vend);
        }
        else
        {
            prepayment = (_custVend == CustVend_RU::Cust);
        }

        if (settleSelect || custVend == CustVend_RU::None)
        {   // Movement (settlements)
            while select custVendTrans
                order by RecId asc
                where ((debtType == RTax25DebtType::Debit  && custVendTrans.AmountMST > 0)         ||
                       (debtType == RTax25DebtType::Credit && custVendTrans.AmountMST < 0))        &&
                      custVendTrans.TransDate       <= dateTo                                      &&
                      ((prepayment  && custVendTrans.Prepayment) || ! prepayment)                  &&
                      custVendTrans.TransType != LedgerTransType::ExchAdjustment                   &&
                      custVendTrans.TransType != LedgerTransType::AdvanceAdjustment_RU             &&
                      custVendTrans.TransType != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                      custVendTrans.TransType != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                      custVendTrans.TransType != LedgerTransType::Tax                              &&
                      (! recIdFrom                                                                 ||
                       (custVendTrans.RecId   >= recIdFrom                                         &&
                        custVendTrans.RecId   <= recIdTo))
            exists join custVendSettlement
                where custVendSettlement.TransRecId   == custVendTrans.RecId &&
                      custVendSettlement.CanBeReversed == NoYes::Yes         &&
                      custVendSettlement.TransDate     >= dateFrom           &&
                      custVendSettlement.TransDate     <= dateTo
            {
                progress.setText(strfmt("@SYS66092", custVendTrans.Invoice, custVendTrans.Voucher));
                this.processFoundCustVendTrans(custVendTrans,
                    _custVend == CustVend_RU::Cust ?
                       (select firstonly DueDate from custSettlement
                            where custSettlement.TransRecId == custVendTrans.RecId).DueDate :
                       (select firstonly DueDate from vendSettlement
                            where vendSettlement.TransRecId == custVendTrans.RecId).DueDate);
                progress.incCount();
            }
        }
        if (! settleSelect || custVend == CustVend_RU::None)
        {   // When the debt emerges
            while select custVendTrans
                order by RecId asc
                where ((debtType == RTax25DebtType::Debit  && custVendTrans.AmountMST > 0)         ||
                       (debtType == RTax25DebtType::Credit && custVendTrans.AmountMST < 0))        &&
                      custVendTrans.TransDate       <= dateTo                                      &&
                      ((prepayment  && custVendTrans.Prepayment) || ! prepayment)                  &&
                      custVendTrans.TransType != LedgerTransType::ExchAdjustment                   &&
                      custVendTrans.TransType != LedgerTransType::AdvanceAdjustment_RU             &&
                      custVendTrans.TransType != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                      custVendTrans.TransType != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                      custVendTrans.TransType != LedgerTransType::Tax                              &&
                      (! recIdFrom                                                                 ||
                       (custVendTrans.RecId   >= recIdFrom                                         &&
                        custVendTrans.RecId   <= recIdTo))
            join DueDate from custVendTransOpen
                where custVendTransOpen.RefRecId  == custVendTrans.RecId &&
                      ((custVendTransOpen.DueDate >= dateFrom            &&
                        custVendTransOpen.DueDate <= dateTo))
            notexists join custVendSettlement
                where custVendSettlement.TransRecId   == custVendTrans.RecId &&
                      custVendSettlement.CanBeReversed == NoYes::Yes         &&
                      custVendSettlement.TransDate     >= dateFrom           &&
                      custVendSettlement.TransDate     <= dateTo
            {
                progress.setText(strfmt("@SYS66092", custVendTrans.Invoice, custVendTrans.Voucher));
                this.processFoundCustVendTrans(custVendTrans, custVendTransOpen.DueDate);
                progress.incCount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProfitTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a reference to the profit code table.
    /// </summary>
    /// <param name = "_custVendTrans">Customer/vendor transaction of the original operation.</param>
    /// <returns>A reference to the profit code table.</returns>
    protected RefRecId getProfitTableId(CustVendTrans _custVendTrans)
    {
        RTax25DebtModel debtModel = rTax25DebtModel ?
                                rTax25DebtModel :
                                RTax25DebtModel::findRecId(CustParameters::rTax25DebtModelTax());

        switch (debtModel.AccountingPolicy)
        {
            case RTax25DebtPolicy::Total :
                return debtModel.RTax25ProfitTableLoss;
            case RTax25DebtPolicy::Document :
            return RTax25DebtLedgerAccounts::getAccounts(
                debtModel.RecId,
                _custVendTrans.TableId == tablenum(CustTrans) ?
                ModuleCustVend::Cust :
                ModuleCustVend::Vend,
                _custVendTrans.AccountNum).RTax25ProfitTableLoss;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrentSettlement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initCurrentSettlement(CustVendTrans _custVendTrans, RecId _settlementRecId)
    {
        CustSettlement      custSettlement;
        CustTrans           offsetCustTrans;
        VendSettlement      vendSettlement;
        VendTrans           offsetVendTrans;

        if (_custVendTrans.TableId == tablenum(CustTrans))
        {
            currentCustVendSettlement  = custSettlement;
            currentOffsetCustVendTrans = offsetCustTrans;
        }
        else
        {
            currentCustVendSettlement  = vendSettlement;
            currentOffsetCustVendTrans = offsetVendTrans;
        }

        select currentOffsetCustVendTrans
            join currentCustVendSettlement
            where currentCustVendSettlement.OffsetRecId == currentOffsetCustVendTrans.RecId &&
                  currentCustVendSettlement.RecId       == _settlementRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRunItem</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean initRunItem()
    {
        RTax25RegisterLineNum64 countRecords(CustVend_RU _custVend)
        {
            CustVendTrans           custVendTrans;
            CustVendTransOpen       custVendTransOpen;
            CustVendSettlement      custVendSettlement;
            boolean                 prepayment;
            RTax25RegisterLineNum64 recCount = 0;;

            if (_custVend == CustVend_RU::Cust)
            {
                custVendTrans      = new DictTable(tablenum(CustTrans)).makeRecord();
                custVendTransOpen  = new DictTable(tablenum(CustTransOpen)).makeRecord();
                custVendSettlement = new DictTable(tablenum(CustSettlement)).makeRecord();
            }
            else
            {
                custVendTrans      = new DictTable(tablenum(VendTrans)).makeRecord();
                custVendTransOpen  = new DictTable(tablenum(VendTransOpen)).makeRecord();
                custVendSettlement = new DictTable(tablenum(VendSettlement)).makeRecord();
            }
            if (registerType == RTax25RegisterType::DebtDebitMovement ||
                registerType == RTax25RegisterType::DebtDebitMovementRAP)
            {
                prepayment = (_custVend == CustVend_RU::Vend);
            }
            else
            {
                prepayment = (_custVend == CustVend_RU::Cust);
            }

            if (settleSelect || custVend == CustVend_RU::None)
            {
                select count(RecId) from custVendTrans
                    where ((debtType == RTax25DebtType::Debit  && custVendTrans.AmountMST > 0)         ||
                           (debtType == RTax25DebtType::Credit && custVendTrans.AmountMST < 0))        &&
                          custVendTrans.TransDate       <= dateTo                                      &&
                          custVendTrans.SettleAmountCur != 0.0                                         &&
                          ((prepayment  && custVendTrans.Prepayment) || ! prepayment)                  &&
                          custVendTrans.TransType != LedgerTransType::ExchAdjustment                   &&
                          custVendTrans.TransType != LedgerTransType::AdvanceAdjustment_RU             &&
                          custVendTrans.TransType != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                          custVendTrans.TransType != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                          custVendTrans.TransType != LedgerTransType::Tax                              &&
                          (! recIdFrom                                                                 ||
                           (custVendTrans.RecId   >= recIdFrom                                         &&
                            custVendTrans.RecId   <= recIdTo))
                exists join custVendSettlement
                    where custVendSettlement.TransRecId    == custVendTrans.RecId &&
                          custVendSettlement.CanBeReversed == NoYes::Yes          &&
                          ((custVendSettlement.DueDate     >= dateFrom            &&
                            custVendSettlement.DueDate     <= dateTo)             ||
                           (custVendSettlement.TransDate   >= dateFrom            &&
                            custVendSettlement.TransDate   <= dateTo) );
                recCount += custVendTrans.RecId;
            }
            if (! settleSelect || custVend == CustVend_RU::None)
            {
                select count(RecId) from custVendTrans
                    where ((debtType == RTax25DebtType::Debit  && custVendTrans.AmountMST > 0)         ||
                           (debtType == RTax25DebtType::Credit && custVendTrans.AmountMST < 0))        &&
                          custVendTrans.TransDate       <= dateTo                                      &&
                          custVendTrans.SettleAmountCur == 0.0                                         &&
                          ((prepayment  && custVendTrans.Prepayment) || ! prepayment)                  &&
                          custVendTrans.TransType != LedgerTransType::ExchAdjustment                   &&
                          custVendTrans.TransType != LedgerTransType::AdvanceAdjustment_RU             &&
                          custVendTrans.TransType != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                          custVendTrans.TransType != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                          custVendTrans.TransType != LedgerTransType::Tax                              &&
                          (! recIdFrom                                                                 ||
                           (custVendTrans.RecId   >= recIdFrom                                         &&
                            custVendTrans.RecId   <= recIdTo))
                join DueDate from custVendTransOpen
                    where custVendTransOpen.RefRecId  == custVendTrans.RecId &&
                          ((custVendTransOpen.DueDate >= dateFrom            &&
                            custVendTransOpen.DueDate <= dateTo));
                recCount += custVendTrans.RecId;
            }
            return recCount;
        }
        ;

        dateFrom      = registerJournalTrans.fromDate();
        dateTo        = registerJournalTrans.toDate();

        if (modelEndDate == dateTo)
        {
            dateFrom = modelStartDate;
        }

        debtType = this.debtType();

        if (! this.parmInBatch() && (! modelEndDate || modelEndDate == dateTo))
        {
            if (custVend != CustVend_RU::Vend)
            {
                recordCount = countRecords(CustVend_RU::Cust);
            }

            if (custVend != CustVend_RU::Cust)
            {
                recordCount += countRecords(CustVend_RU::Vend);
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRegisterFooter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertRegisterFooter()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRegisterHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertRegisterHeader()
    {
        ;
        regQuery.addHeaderRecord(0, conNull(), 0, strfmt("@SYS4925"), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTransRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmJournalTransRecId(RefRecId _journalTransRecId = journalTransRecId)
    {
        ;
        journalTransRecId = _journalTransRecId;
        return journalTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecIdRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void parmRecIdRange(CustVend_RU  _custVend,
                               NoYes        _settleSelect,
                               RecId        _recIdFrom,
                               RecId        _recIdTo)
    {
        ;
        custVend     = _custVend;
        settleSelect = _settleSelect;
        recIdFrom    = _recIdFrom;
        recIdTo      = _recIdTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartCount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterLineNum64 parmStartCount(RTax25RegisterLineNum64 _startCount = startCount)
    {
        ;
        startCount = _startCount;
        return startCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFoundCustVendTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processFoundCustVendTrans(CustVendTrans    _custVendTrans,
                                             DueDate          _dueDate)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>refDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container refDocument(CustVendTrans _custVendTrans)
    {
        CustInvoiceJour     custInvoiceJour;
        VendInvoiceJour     vendInvoiceJour;
        LedgerJournalTrans  ledgerJournalTrans;
        tableId             refTableId;
        RefRecId            refRecId;
        DimensionAttributeLevelValueView dimView;

        if (_custVendTrans.Invoice)
        {
            switch (_custVendTrans.TableId)
            {
                case tablenum(CustTrans) :
                select firstonly RecId from custInvoiceJour
                    where custInvoiceJour.InvoiceId      == _custVendTrans.Invoice     &&
                          custInvoiceJour.InvoiceAccount == _custVendTrans.AccountNum  &&
                          custInvoiceJour.LedgerVoucher  == _custVendTrans.Voucher     &&
                          custInvoiceJour.InvoiceDate    == _custVendTrans.TransDate;

                refTableId = custInvoiceJour.TableId;
                refRecId   = custInvoiceJour.RecId;
                break;

                case tablenum(VendTrans) :
                select firstonly RecId from vendInvoiceJour
                    where vendInvoiceJour.InvoiceId      == _custVendTrans.Invoice     &&
                          vendInvoiceJour.InvoiceAccount == _custVendTrans.AccountNum  &&
                          vendInvoiceJour.LedgerVoucher  == _custVendTrans.Voucher     &&
                          vendInvoiceJour.InvoiceDate    == _custVendTrans.TransDate;

                refTableId = vendInvoiceJour.TableId;
                refRecId   = vendInvoiceJour.RecId;
               break;
            }
        }
        else
        {
            select firstonly RecId from ledgerJournalTrans
                where ledgerJournalTrans.Voucher         == _custVendTrans.Voucher        &&
                      ledgerJournalTrans.TransDate       == _custVendTrans.TransDate      &&
                      ledgerJournalTrans.TransactionType == _custVendTrans.TransType
            exists join TableId from dimView
                where dimView.ValueCombinationRecId == ledgerJournalTrans.LedgerDimension &&
                      dimView.DisplayValue          == _custVendTrans.AccountNum;

            if (ledgerJournalTrans.RecId)
            {
                refTableId = ledgerJournalTrans.TableId;
                refRecId   = ledgerJournalTrans.RecId;
            }
            else
            {
                refTableId = _custVendTrans.TableId;
                refRecId   = _custVendTrans.RecId;
            }
        }
        return [refTableId, refRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>renumbering</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void renumbering()
    {
        if (! this.parmInBatch())
        {
            select count(RecId) from regTrans
                where regTrans.JournalTransRefRecId == registerJournalTrans.RecId;
        }
        this.progressInit("@SYS4138", regTrans.RecId, #AviUpdate);
        progress.updateInterval(10);

        regTrans.skipDataMethods(true);
        regTrans.skipDatabaseLog(true);
        regTrans.skipEvents(true);

        this.insertRegisterHeader();
        startCount = 2;
        while select forupdate regTrans
            order by LineNumber desc
            where regTrans.JournalTransRefRecId == registerJournalTrans.RecId &&
                  regTrans.LineNumber           <  0
        {
            progress.setText(strFmt("@SYS26913", startCount));
            regTrans.LineNumber = startCount;
            regTrans.doUpdate();
            this.totals(regTrans);
            startCount++;
            progress.incCount();
        }
        this.insertRegisterFooter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        select firstonly registerJournalTrans
            where registerJournalTrans.RecId == journalTransRecId;

        registerType = RTax25RegisterTable::registerId2Type(registerJournalTrans.RegisterId);
        regQuery     = RTax25Query::newParameters(registerType, registerJournalTrans, true);
        regQuery.initSuspendRecId();
        regTrans     = new SysDictTable(regQuery.getRegType().detachedTableId()).makeRecord();

        modelStartDate  = dateNull();
        modelEndDate    = dateNull();

        if (regQuery.getRegType().badDebtModel())
        {
            rTax25DebtModel = RTax25DebtModel::findRecId(regQuery.getRegType().badDebtModel());
            if (rTax25DebtModel)
            {
                [modelStartDate, modelEndDate] = RTax25DebtModel::periodDates(rTax25DebtModel.PeriodType, registerJournalTrans.toDate());
            }
        }

        if (startCount)
        {
            this.initRunItem();
            this.runItem();
        }
        else
        {
            this.runFinal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFinal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runFinal()
    {
        ttsbegin;

        select firstonly RecId from regTrans
            where regTrans.JournalTransRefRecId == registerJournalTrans.RecId;

        if (regTrans.RecId)
        {
            this.renumbering();
        }
        regQuery.insertDatabase();

        registerJournalTrans.selectForUpdate(true);
        registerJournalTrans.Status = RTax25RegisterStatus::Calculated;
        registerJournalTrans.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runItem</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runItem()
    {
        #OCCRetryCount

        this.progressInit('', recordCount, #AviUpdate);
        progress.updateInterval(10);

        try
        {
            ttsbegin;

            if (! modelEndDate || modelEndDate == dateTo)
            {
                if (custVend != CustVend_RU::Vend)
                {
                    this.fetchCustVendDebtsMovement(CustVend_RU::Cust);
                }
                if (custVend != CustVend_RU::Cust)
                {
                    this.fetchCustVendDebtsMovement(CustVend_RU::Vend);
                }
            }

            regQuery.insertDatabase();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void totals(RTax25RegisterTransMap _trans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDescription</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container transDescription(CustVendTrans _custVendTrans)
    {
        Num                     num;
        Description             description;
        BankPaymentOrderJour_RU paymentOrderJour;

        if (_custVendTrans.Invoice)
        {
            num = _custVendTrans.Invoice;
            description = "@SYS14204";
        }

        if (! num)
        {
            select firstonly PaymentOrderNum from paymentOrderJour
                where paymentOrderJour.Voucher          == _custVendTrans.Voucher  &&
                      paymentOrderJour.PaymentTransDate == _custVendTrans.TransDate;
            num = paymentOrderJour.PaymentOrderNum;
            if (num)
            {
                description = "@GLS100632";
            }
        }

        if (! num)
        {
            num = _custVendTrans.DocumentNum;
            if (num)
            {
                description = "@SYS21873";
            }
        }

        if (! num)
        {
            num = _custVendTrans.Voucher;
            description = "@GLS103349";
        }

        return [num, description];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegCalc_DebtMovementMultiply construct(RTax25RegisterType _registerType,
                                                                      int64              _startCount,
                                                                      RefRecId           _journalTransRecId,
                                                                      boolean            _isInBatch)
    {
        RTax25RegCalc_DebtMovementMultiply ret;
        ;

        switch (_registerType)
        {
            case RTax25RegisterType::DebtCreditMovement:
                ret = new RTax25RegCalc_DebtCreditMovementMult();
                break;
            case RTax25RegisterType::DebtDebitMovement:
                ret = new RTax25RegCalc_DebtDebitMovementMult();
                break;
            case RTax25RegisterType::DebtDebitMovementRAP:
                ret = new RTax25RegCalc_DebtDebitMovementMultRAP();
                break;

            default :
                ret = RTax25RegCalc_DebtMovementMultiply::constructDefault(_registerType);
                if (!ret)
                {
                    throw error(error::wrongUseOfFunction(funcname()));
                }
        }
        ret.parmStartCount(_startCount);
        ret.parmJournalTransRecId(_journalTransRecId);
        ret.parmInBatch(_isInBatch);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method provides the extension point for adding a new RTax25 register into the part of RTax25 framework.
    /// </summary>
    /// <param name = "_registerType">A main register type.</param>
    /// <returns>An instance of a class <c>RTax25RegCalc_DebtMovementMultiply</c>, if extended.</returns>
    protected static RTax25RegCalc_DebtMovementMultiply constructDefault(RTax25RegisterType _registerType)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>