<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTimeListSourceByDocumentAE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Average earn documents.
/// </summary>
[RPayTimeListSourceByDocumentAttribute(RPayTblDocumentType::AverageEarning)]
class RPayTimeListSourceByDocumentAE extends RPayTimeListSourceByDocument
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>selectDocumentsForPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Select documents for proceed.
    /// </summary>
    protected void selectDocumentsForPeriod()
    {
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable;

        while select averageEarnEmplPeriodTable
            where averageEarnEmplPeriodTable.EmplId == tblContext.parmEmpId()
               && averageEarnEmplPeriodTable.StartDate <= tblContext.parmEndDate()
               && averageEarnEmplPeriodTable.EndDate >= tblContext.parmStartDate()
               && (averageEarnEmplPeriodTable.averageEarnCodeType ==RPayAverageEarnCodeType::BusinessTrip
                || averageEarnEmplPeriodTable.averageEarnCodeType ==RPayAverageEarnCodeType::SickList
                || averageEarnEmplPeriodTable.averageEarnCodeType ==RPayAverageEarnCodeType::Vacation)
        {
            tblDocument = RPayTblDocumentAE::construct(averageEarnEmplPeriodTable, tblContext);
            documentsTimeList.append(tblDocument.getTimeList());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnIncludedPeriods</Name>
				<Source><![CDATA[
/// <summary>
    /// Gets the unincluded periods.
    /// </summary>
    /// <param name="_end">
    /// The end date.
    /// </param>
    /// <param name="_emplId">
    /// The employee id.
    /// </param>
    /// <returns>
    /// The time list.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayTblTimeList getUnIncludedPeriods(TransDate _end, RHRMEmplId _emplId)
    {
        RPayTblTimeList ret = new RPayTblTimeList();
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable;
        RPayTblTime         time;

        while select averageEarnEmplPeriodTable order by StartDate
            where averageEarnEmplPeriodTable.EmplId == _emplId
               && averageEarnEmplPeriodTable.StartDate <= _end
               && (averageEarnEmplPeriodTable.averageEarnCodeType ==RPayAverageEarnCodeType::BusinessTrip
                || averageEarnEmplPeriodTable.averageEarnCodeType ==RPayAverageEarnCodeType::SickList
                || averageEarnEmplPeriodTable.averageEarnCodeType ==RPayAverageEarnCodeType::Vacation)
        {
            if ( !averageEarnEmplPeriodTable.isFullyInTimeSheet())
            {
                time = new RPayTblTime();
                time.parmStartDate(averageEarnEmplPeriodTable.getStartUnincludedPeriod());
                time.parmEndDate(min(averageEarnEmplPeriodTable.EndDate, _end));

                if (time.parmStartDate() <= time.parmEndDate())
                {
                    ret = ret.addEndUniquePeriod(time);
                }
            }
        }

        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>