<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetSourceSourceDocumentLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetSourceSourceDocumentLine</c> class is responsible for data management for the
///    <c>BudgetSource</c> records that are associated with the <c>SourceDocumentLine</c> records.
/// </summary>
/// <remarks>
///    This class extends the <c>BudgetSourceIntegrator</c> class.
/// </remarks>
public class BudgetSourceSourceDocumentLine extends BudgetSourceIntegrator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetSource</c> table buffer for the <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <returns>
    /// A <c>BudgetSource</c> table buffer.
    /// </returns>
    public BudgetSource createBudgetSource()
    {
        BudgetSource budgetSource;

        budgetSource.SourceDocumentLine = commonId;
        budgetSource.BudgetSourceType = BudgetSourceType::SourceDocumentLine;
        budgetSource.BudgetControlSourceIntegrator = BudgetSourceSourceDocumentLine::getBudgetControlSourceIntegrator(commonId);

        return budgetSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceTrackingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget source tracking number.
    /// </summary>
    public Num getBudgetSourceTrackingNumber()
    {
        SourceDocumentLineItem sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(
            SourceDocumentLine::find(this.parmCommonId()));

        // Get the budget rule with the default draft check settings for the current user.
        // It is only needed to get the budget source tracking number which does not depend on the budget
        // check request details and therefore the default values are valid.
        BudgetControlSourceDocumentLineRule budgetControlSourceDocumentLineRule = BudgetControlSourceDocumentLineRule::newRule(
            sourceDocumentLineItem,
            true,
            curUserId(),
            null,
            false);

        return budgetControlSourceDocumentLineRule.parmBudgetTrackingNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceTrackingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget source tracking date.
    /// </summary>
    public TransDate getBudgetSourceTrackingDate()
    {
        SourceDocumentLineItem sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(
            SourceDocumentLine::find(this.parmCommonId()));

        return sourceDocumentLineItem.parmAccountingDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetSourceIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a set of IDs for the <c>BudgetSource</c> records that are associated with the
    ///    <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <returns>
    ///    A set of IDs for the <c>BudgetSource</c> records that are associated with the
    ///    <c>SourceDocumentLine</c> record.
    /// </returns>
    public Set findBudgetSourceIds()
    {
        BudgetSourceRecId   budgetSourceId;
        Set                 budgetSourceIds;

        budgetSourceIds = new Set(typeName2Type(extendedtypestr(recId)));
        budgetSourceId = BudgetSourceSourceDocumentLine::findBudgetSourceId(commonId);

        if (budgetSourceId != 0)
        {
            budgetSourceIds.add(budgetSourceId);
        }

        return budgetSourceIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetCheckResult</c> value that is associated with the specified <c>Common</c> record.
    /// </summary>
    /// <param name="_doCheckLedgerBudgetControlEnabled">
    /// A Boolean value that indicates whether to check that budget control is enabled on the primary
    /// ledger of the current legal entity before trying to get the <c>BudgetCheckResult</c> value;
    /// optional.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value of the <c>BudgetSource</c> record that is associated with the
    /// <c>Common</c> record.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult(boolean _doCheckLedgerBudgetControlEnabled = true)
    {
        return BudgetSourceSourceDocumentLine::findBudgetCheckResult(this.parmCommonId(), _doCheckLedgerBudgetControlEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates copies of the <c>BudgetSource</c> records for a collection of <c>SourceDocumentLine</c>
    /// records from the <c>BudgetSource</c> records for another collection of <c>SourceDocumentLine</c>
    /// records.
    /// </summary>
    /// <param name="_packedFromAndToSourceDocumentLinePairs">
    /// A collection of pairs of the record ID of the <c>SourceDocumentLine</c> record for the
    /// <c>BudgetSource</c> record that is to be copied from and the record ID of the
    /// <c>SourceDocumentLine</c> record for the <c>BudgetSource</c> record copy to be created.
    /// </param>
    /// <remarks>
    /// Use this method only to maintain the budget check results when copies of <c>SourceDocumentLine</c>
    /// records are created. This method will copy the overall budget check result and the budget check
    /// result details. No other details will be copied. The <paramref
    /// name="_packedFromAndToSourceDocumentLinePairs" /> must be a packed map with the key being from the
    /// <c>SourceDocumentLine</c> record ID and the value being the <c>SourceDocumentLine</c> record ID.
    /// </remarks>
    public static void copyBudgetSource(container _packedFromAndToSourceDocumentLinePairs)
    {
        BudgetSource                    fromBudgetSource;
        BudgetSource                    toBudgetSource;
        Map                             budgetSourceIds;
        Map                             packedFromAndToSourceDocumentLinePairs;
        MapEnumerator                   packedFromAndToSourceDocumentLinePairsEnumerator;
        int                             budgetSourceBatchCount;
        SourceDocumentLineRecId         toSourceDocumentLineId;
        Types                           budgetSourceRecIdTypes;

        budgetSourceRecIdTypes = typeName2Type(extendedtypestr(BudgetSourceRecId));

        if (_packedFromAndToSourceDocumentLinePairs != conNull())
        {
            packedFromAndToSourceDocumentLinePairs = Map::create(_packedFromAndToSourceDocumentLinePairs);

            if (packedFromAndToSourceDocumentLinePairs.elements() > 0)
            {
                budgetSourceIds = new Map(budgetSourceRecIdTypes, budgetSourceRecIdTypes);
                packedFromAndToSourceDocumentLinePairsEnumerator = packedFromAndToSourceDocumentLinePairs.getEnumerator();
                budgetSourceBatchCount = BudgetControlSQLObjects::getBudgetControlCopyErrorWarnBatchCount();

                ttsBegin;

                while (packedFromAndToSourceDocumentLinePairsEnumerator.moveNext())
                {
                    fromBudgetSource = BudgetSourceSourceDocumentLine::findBudgetSource(packedFromAndToSourceDocumentLinePairsEnumerator.currentKey());

                    if (fromBudgetSource)
                    {
                        toSourceDocumentLineId = packedFromAndToSourceDocumentLinePairsEnumerator.currentValue();
                        toBudgetSource = BudgetSourceSourceDocumentLine::findBudgetSource(toSourceDocumentLineId);

                        if (!toBudgetSource)
                        {
                            toBudgetSource.data(fromBudgetSource);
                            toBudgetSource.SourceDocumentLine = toSourceDocumentLineId;
                            toBudgetSource.insert();

                            if (fromBudgetSource.CheckResult == BudgetCheckResult::Failed ||
                                fromBudgetSource.CheckResult == BudgetCheckResult::PassedWithWarnings)
                            {
                                budgetSourceIds.insert(fromBudgetSource.RecId, toBudgetSource.RecId);

                                if (budgetSourceIds.elements() mod budgetSourceBatchCount == 0)
                                {
                                    // Copy the budget source error warning details for the current batch.
                                    BudgetSourceSourceDocumentLine::invokeBudgetControlCopyErrorWarnProc(budgetSourceIds.pack());

                                    // Reset the map for the next batch.
                                    budgetSourceIds = new Map(budgetSourceRecIdTypes, budgetSourceRecIdTypes);
                                }
                            }
                        }
                    }
                }

                if (budgetSourceIds.elements() > 0)
                {
                    // Copy the final budget source error warning details batch if it has not been done already
                    // in the case the batch contains less than BudgetSourceBatchCount records.
                    BudgetSourceSourceDocumentLine::invokeBudgetControlCopyErrorWarnProc(budgetSourceIds.pack());
                }

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a <c>BudgetSource</c> record that is associated with the specified
    ///    <c>SourceDocumentLine</c> record exists.
    /// </summary>
    /// <param name="_sourceDocumentLineId">
    ///    The record ID of a record in the <c>SourceDocumentLine</c> table.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existBudgetSource(SourceDocumentLineRecId _sourceDocumentLineId)
    {
        boolean         found;
        BudgetSource    budgetSource;

        // Adding ranges for all the alternate key fields of budget source table
        // for performance reason.
        select firstonly RecId from budgetSource
            where  (budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine &&
                    budgetSource.BudgetTransactionLine == 0 &&
                    budgetSource.SourceDocumentLine == _sourceDocumentLineId &&
                    budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                    budgetSource.LedgerEntryJournalNumber == '' &&
                    budgetSource.LedgerEntryJournalReferenceNumber == '' &&
                    budgetSource.LedgerEntryJournalLegalEntity == 0);

        found = (budgetSource.RecId != 0);

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>BudgetCheckResult</c> value of the <c>BudgetSource</c> record that is associated with
    ///    the <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLineId">
    ///    The record ID of the <c>SourceDocumentLine</c> table.
    /// </param>
    /// <param name="_doCheckLedgerBudgetControlEnabled">
    ///    A Boolean value that indicates whether to check if budget control is enabled on the primary ledger of
    ///    the current legal entity prior to attempting to find the <c>BudgetCheckResult</c> value; optional.
    /// </param>
    /// <returns>
    ///    The <c>BudgetCheckResult</c> value of the <c>BudgetSource</c> record that associated with the
    ///    <c>SourceDocumentLine</c> record.
    /// </returns>
    public static BudgetCheckResult findBudgetCheckResult(SourceDocumentLineRecId _sourceDocumentLineId, boolean _doCheckLedgerBudgetControlEnabled = true)
    {
        BudgetCheckResult   budgetCheckResult;
        BudgetSource        budgetSource;

        budgetCheckResult = BudgetCheckResult::NoCheck;

        if (_sourceDocumentLineId)
        {
            if (BudgetControlConfiguration::isControlConfigured() &&
                hasTableAccess(tablenum(BudgetSource)))
            {
                if (!_doCheckLedgerBudgetControlEnabled ||
                    (_doCheckLedgerBudgetControlEnabled &&
                        Ledger::isLedgerBudgetControlEnabled()))
                {
                    // Adding ranges for all the alternate key fields of budget source table
                    // for performance reason.
                    select firstonly CheckResult from budgetSource
                        where (budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine &&
                                budgetSource.BudgetTransactionLine == 0 &&
                                budgetSource.SourceDocumentLine == _sourceDocumentLineId &&
                                budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                                budgetSource.LedgerEntryJournalNumber == '' &&
                                budgetSource.LedgerEntryJournalReferenceNumber == '' &&
                                budgetSource.LedgerEntryJournalLegalEntity == 0);

                    budgetCheckResult = budgetSource.CheckResult;
                }
            }

            if (ProjParameters::find().UseBudgeting)
            {
                RefTableId sourceRelationType = Sourcedocumentline::find(_sourceDocumentLineId).SourceRelationType;

                if ((sourceRelationType == tableNum(PurchReqLine) && PurchReqLine::findBySourceDocumentLine(_sourceDocumentLineId).ProjId) ||
                    (sourceRelationType == tableNum(PurchLine) && PurchLine::findBySourceDocumentLine(_sourceDocumentLineId).ProjId) ||
                    (sourceRelationType == tableNum(VendInvoiceInfoLine) && VendInvoiceInfoLine::findSourceDocumentLine(_sourceDocumentLineId).vendInvoiceInfoLine_Project().ProjId))
                {
                    ProjBudgetStatus projBudgetStatus = ProjBudgetStatus::findBySourceDocumentLine(_sourceDocumentLineId);
                    ProjBudgetCheckResult projBudgetCheckResult = projBudgetStatus ? projBudgetStatus.BudgetCheckResult : ProjBudgetCheckResult::NoCheck;

                    //adding projBudgetCheckResult + 1, since this base enum value starts from 0
                    if (enum2int(budgetCheckResult) >= enum2int(projBudgetCheckResult) + 1)
                    {
                        budgetCheckResult = budgetCheckResult;
                    }
                    else
                    {
                        budgetCheckResult = enum2int(projBudgetCheckResult) + 1;
                    }
                }
            }
        }

        return budgetCheckResult == 0 ? BudgetCheckResult::NoCheck : budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record ID for the <c>BudgetSource</c> record that is associated with the
    ///    <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLineId">
    ///    The record ID of the <c>SourceDocumentLine</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The <c>ConcurrencyModel</c> object to use when the record is read; optional.
    /// </param>
    /// <returns>
    ///    The <c>BudgetSource</c> record that is associated with the <c>SourceDocumentLine</c> record.
    /// </returns>
    public static BudgetSource findBudgetSource(
        SourceDocumentLineRecId _sourceDocumentLineId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetSource budgetSource;

        budgetSource.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetSource.concurrencyModel(_concurrencyModel);
        }

        // Adding ranges for all the alternate key fields of budget source table
        // for performance reason.
        select firstonly * from budgetSource
            where (budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine &&
                    budgetSource.BudgetTransactionLine == 0 &&
                    budgetSource.SourceDocumentLine == _sourceDocumentLineId &&
                    budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                    budgetSource.LedgerEntryJournalNumber == '' &&
                    budgetSource.LedgerEntryJournalReferenceNumber == '' &&
                    budgetSource.LedgerEntryJournalLegalEntity == 0);

        return budgetSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record ID of the <c>BudgetSource</c> record that is associated with the specified
    ///    <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLineId">
    ///    The record ID of a <c>SourceDocumentLine</c> record.
    /// </param>
    /// <returns>
    ///    The record ID of the <c>BudgetSource</c> record that is associated with the specified
    ///    <c>SourceDocumentLine</c> record.
    /// </returns>
    public static recId findBudgetSourceId(SourceDocumentLineRecId _sourceDocumentLineId)
    {
        BudgetSource budgetSource;

        // Adding ranges for all the alternate key fields of budget source table
        // for performance reason.
        select firstonly RecId from budgetSource
            where  (budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine &&
                    budgetSource.BudgetTransactionLine == 0 &&
                    budgetSource.SourceDocumentLine == _sourceDocumentLineId &&
                    budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                    budgetSource.LedgerEntryJournalNumber == '' &&
                    budgetSource.LedgerEntryJournalReferenceNumber == '' &&
                    budgetSource.LedgerEntryJournalLegalEntity == 0);

        return budgetSource.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlSourceIntegrator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget control source integrator for the specified source document line.
    /// </summary>
    /// <param name="_sourceDocumentLineId">
    /// The record ID of the <c>SourceDocumentLine</c> record.
    /// </param>
    /// <returns>
    /// The budget control source integrator.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The ledger journal type does not have an associated budget control source integrator.
    /// </exception>
    protected static BudgetControlSourceIntegrator getBudgetControlSourceIntegrator(recId _sourceDocumentLineId)
    {
        SourceDocumentLine                  sourceDocumentLine;
        BudgetControlSourceIntegrator       sourceIntegrator;
        Object                              localObject;
        SourceDocumentLineItem              sourceDocumentLineItem;
        SourceDocumentTypeIBudgetControl    budgetSourceSourceDocumentType;

        sourceDocumentLine = SourceDocumentLine::find(_sourceDocumentLineId);

        if (sourceDocumentLine)
        {
            sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine);
            localObject = sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentType();
            budgetSourceSourceDocumentType = localObject as SourceDocumentTypeIBudgetControl;

            if (budgetSourceSourceDocumentType)
            {
                sourceIntegrator = budgetSourceSourceDocumentType.parmBudgetControlSourceIntegrator();
            }
        }

        return sourceIntegrator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceInquiryDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an object of the <c>BudgetSourceInquiryDetails</c> class for the specified source document
    ///    line reference.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///    The <c>SourceDocumentLine</c> record for which to get the <c>BudgetSourceInquiryDetails</c> object.
    /// </param>
    /// <returns>
    ///    An object of the <c>BudgetSourceInquiryDetails</c> class if the specified source document line
    ///    reference is valid; otherwise, null.
    /// </returns>
    public static BudgetSourceInquiryDetails getBudgetSourceInquiryDetails(SourceDocumentLine _sourceDocumentLine)
    {
        BudgetSourceInquiryDetails  inquiryDetails;
        BudgetSourceRecId           budgetSourceId;

        budgetSourceId = BudgetSourceSourceDocumentLine::findBudgetSourceId(_sourceDocumentLine.RecId);

        if (budgetSourceId)
        {
            inquiryDetails = BudgetSourceInquiryDetails::construct(budgetSourceId);
        }

        return inquiryDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeBudgetControlCopyErrorWarnProc</Name>
				<Source><![CDATA[
    private static void invokeBudgetControlCopyErrorWarnProc(container _packedBudgetSourceIds)
    {
        str                             sql;
        Connection                      connection;
        Statement                       statement;
        SqlStatementExecutePermission   permission;

        if (_packedBudgetSourceIds)
        {
            sql = strfmt(@"EXEC %1 @PartitionId = %2, @BudgetSourceArray = '%3'",
                    BudgetControlSQLObjects::getBudgetControlCopyErrorWarnProcName(),
                    getcurrentpartitionrecid(),
                    BudgetControlSQLObjects::getBudgetControlCopyErrorWarnStrArray(_packedBudgetSourceIds));

            // Open the code access permission scope.
            permission = new SqlStatementExecutePermission(sql);
            permission.assert();

            connection = new Connection();
            statement = connection.createStatement();

            statement.executeUpdateWithParameters(sql, SqlParams::create());

            // Close the code access permission scope.
            CodeAccessPermission::revertAssert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBudgetSourceSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>BudgetSourceSourceDocumentLine</c> class by using an ID of the
    ///    specified <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLineId">
    ///    The record ID of a <c>SourceDocumentLine</c> record.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetSourceSourceDocumentLine</c> class.
    /// </returns>
    public static BudgetSourceSourceDocumentLine newBudgetSourceSourceDocumentLine(SourceDocumentLineRecId _sourceDocumentLineId)
    {
        BudgetSourceSourceDocumentLine budgetSourceSourceDocumentLine;

        budgetSourceSourceDocumentLine = new BudgetSourceSourceDocumentLine();
        budgetSourceSourceDocumentLine.parmCommonId(_sourceDocumentLineId);

        return budgetSourceSourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the new <c>BudgetSource</c> record for the specified <c>SourceDocumentLine</c> record if one
    /// does not already exist.
    /// </summary>
    /// <param name="_sourceDocumentLineId">
    /// The record ID of a record in the <c>SourceDocumentLine</c> table.
    /// </param>
    /// <returns>
    /// The record ID of the <c>BudgetSource</c> record that was saved.
    /// </returns>
    /// <remarks>
    /// If there does not exist a <c>BudgetSource</c> record for the specified <c>SourceDocumentLine</c>
    /// record, this method will insert one record; otherwise, it will return the record ID of the
    /// <c>BudgetSource</c> record.
    /// </remarks>
    public static BudgetSourceRecId saveBudgetSource(SourceDocumentLineRecId _sourceDocumentLineId)
    {
        BudgetSourceRecId               budgetSourceId;
        BudgetSource                    budgetSource;
        BudgetSourceSourceDocumentLine  budgetSourceSourceDocumentLine;

        budgetSourceSourceDocumentLine = BudgetSourceSourceDocumentLine::newBudgetSourceSourceDocumentLine(_sourceDocumentLineId);
        budgetSourceId = BudgetSourceSourceDocumentLine::findBudgetSourceId(_sourceDocumentLineId);

        if (!budgetSourceId)
        {
            budgetSource = budgetSourceSourceDocumentLine.createBudgetSource();
            budgetSource.insert();

            budgetSourceId = budgetSource.RecId;
        }

        return budgetSourceId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>