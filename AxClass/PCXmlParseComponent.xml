<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcXmlParseComponent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Parses session XML for a component.
/// </summary>
class PcXmlParseComponent
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCXmlParseComponent construct()
    {
        return new PCXmlParseComponent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseIL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the session values included in the XML of the specified configuration session.
    /// </summary>
    /// <param name="_component">
    /// The component parameter.
    /// </param>
    /// <param name="_xmlReader">
    /// The XML reader used to retrieve the session values.
    /// </param>
    /// <param name="_componentInstanceValue">
    /// The value container that will store the attribute values for the current component.
    /// </param>
    /// <param name="_expectedName">
    /// The name of the sub-component or root component used to validate the parsed XML.
    /// </param>
    /// <param name="_adaptorComponent">
    /// An instance of the <c>PCAdaptorComponent</c> class.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The record parsed from the XML string does not match the current record.
    /// </exception>
    public void parseIL(
        PCClass                             _component,
        PCXmlParseReader                    _xmlReader,
        PCComponentInstanceValue            _componentInstanceValue,
        str                                 _expectedName,
        PCAdaptorComponent                  _adaptorComponent)
    {
        #PC
        str                             parsedName;
        RefRecId                        parsedRecId;
        PCTemplateComponent             templateComponent;
        PCSubComponent                  subComponent;
        PCClass                         component;
        PCXmlParseReader                subComponentXMLReader;
        str                             subComponentXML;

        // adaptor elements
        PCAdaptorSubComponent           adaptorSubComponent;
        PCAdaptorComponent              adaptorSubComponent_Component;
        PCAdaptorBOMLine                adaptorBOMLine;
        PCAdaptorRouteOperation         adaptorRouteOperation;

        PCXmlParseComponentAttributes   parseComponentAttributes    = PCXmlParseComponentAttributes::construct();
        PCXmlParseTemplateComponent     parseTemplateComponent      = PCXmlParseTemplateComponent::construct();
        PCXmlParseComponent             parseComponent              = PCXmlParseComponent::construct();

        //reader is already positioned
        parsedName  =   _xmlReader.getAttribute(#nameAttribute);
        parsedRecId =   str2int64(_xmlReader.getAttribute(#ReqIdAttribute));

        if (_expectedName != parsedName)
        {
            throw error(strFmt("@SYS89175", tableStr(PCClass)));
        }

        _xmlReader.read();

        parseComponentAttributes.parseIL(_component.RecId, _xmlReader, _adaptorComponent, _componentInstanceValue);

        while (_xmlReader.nameIfIsStartElement() == #operationLineElement) // Route operation
        {
            parsedRecId = str2int64(_xmlReader.getAttribute(#ReqIdAttribute));

            templateComponent = PCTemplateComponent::find(parsedRecId);
            if (templateComponent)
            {
                adaptorRouteOperation = PCAdaptorRouteOperation::construct(templateComponent, null);
                _adaptorComponent.addRouteOperation(adaptorRouteOperation);

                parseTemplateComponent.parseIL(templateComponent, _xmlReader, 0, adaptorRouteOperation);
            }
            _xmlReader.read();
        }
        while (_xmlReader.nameIfIsStartElement() == #subPartElement)// BOM line
        {
            parsedRecId = str2int64(_xmlReader.getAttribute(#ReqIdAttribute));

            templateComponent = PCTemplateComponent::find(parsedRecId);
            if (templateComponent)
            {
                adaptorBOMLine = PCAdaptorBOMLine::construct(templateComponent, null);
                adaptorBOMLine.setAdaptorComponent(_adaptorComponent);
                _adaptorComponent.addBOMLine(adaptorBOMLine);

                parseTemplateComponent.parseIL(templateComponent, _xmlReader, 0, adaptorBOMLine);
            }
            _xmlReader.read();
        }
        while (_xmlReader.nameIfIsStartElement() == #subComponentElement) // Sub component
        {
            parsedRecId = str2int64(_xmlReader.getAttribute(#ReqIdAttribute));
            subComponentXML = _xmlReader.readOuterXml();   //_component reads to the next element
            subComponentXMLReader = PCXmlParseReader::construct();
            subComponentXMLReader.initialize(subComponentXML);
            subComponentXMLReader.read();

            select  firstonly subComponent
            where   subComponent.RecId == parsedRecId
            join    firstonly component
            where   subComponent.ChildComponentClass == component.RecId
            &&      subComponent.ParentComponentClass == _component.RecId;
            if (subComponent)
            {
                adaptorSubComponent_Component = PCAdaptorComponent::construct(component, null);

                adaptorSubComponent = PCAdaptorSubComponent::construct(
                                                            subComponent,
                                                            null,
                                                            null,
                                                            null,
                                                            adaptorSubComponent_Component,
                                                            _adaptorComponent);

                _adaptorComponent.addSubComponent(adaptorSubComponent);

                parseComponent.parseIL(component, subComponentXMLReader, null, subComponent.SolverName, adaptorSubComponent_Component);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>