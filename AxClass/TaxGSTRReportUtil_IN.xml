<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTRReportUtil_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Utility class for GSTR report
/// </summary>
internal class TaxGSTRReportUtil_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>roundingTotalTransactionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounding the total transaction value.
    /// </summary>
    /// <param name="_source">
    /// Source.
    /// </param>
    /// <param name="_totalTransValue">
    /// The total transaction value.
    /// </param>
    /// <returns>
    /// The total transaction value for current tax document row transaction.
    /// </returns>
    public static AmountCur roundingTotalTransactionValue(TaxModuleType _source, AmountCur _totalTransValue)
    {
        AmountCur totalTransValue = _totalTransValue;

        switch (_source)
        {
            case TaxModuleType::Sales :
            case TaxModuleType::SalesInvoice :
            case TaxModuleType::FreeTxtInvoice :
                totalTransValue = CurrencyExchange::roundWithRuleType(
                totalTransValue,
                '',
                CurrencyRoundingRuleType::SalesOrder);
                break;
            case TaxModuleType::Purch :
            case TaxModuleType::PurchInvoice :
                totalTransValue = CurrencyExchange::roundWithRuleType(
                totalTransValue,
                '',
                CurrencyRoundingRuleType::PurchaseOrder);
                break;
            case TaxModuleType::Voucher :
                totalTransValue = CurrencyExchange::roundWithRuleType(
                totalTransValue,
                '',
                CurrencyRoundingRuleType::Amount);
                break;
            default :
                break;
        }

        return totalTransValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets item rate. Item rate is the unit price of invoice journal.
    /// </summary>
    /// <param name = "_tmpLineDetail">The <c>TmpTaxGSTRReportTaxLineDetail_IN</c> record.</param>
    /// <returns>The item rate.</returns>
    public static PriceCur getItemRate(TmpTaxGSTRReportTaxLineDetail_IN _tmpLineDetail)
    {
        if (_tmpLineDetail.TransactionCurrency != Ledger::accountingCurrency())
        {
            switch (_tmpLineDetail.TransactionJourHeaderTableId)
            {
                case tableNum(CustInvoiceJour):
                    CustInvoiceJour custInvoiceJour = CustInvoiceJour::findRecId(_tmpLineDetail.TransactionJourHeaderRecId);
                    return custInvoiceJour.ExchRate * _tmpLineDetail.UnitPrice / 100;

                case tableNum(CustomsShippingBillJour_IN):
                    CustomsShippingBillJour_IN customsShippingBillJour = CustomsShippingBillJour_IN::find(_tmpLineDetail.TransactionJourHeaderRecId);
                    return customsShippingBillJour.ExchRate * _tmpLineDetail.UnitPrice / 100;

                default:
                    return ExchangeRateHelper::mstPrice(_tmpLineDetail.UnitPrice, _tmpLineDetail.TransactionCurrency, _tmpLineDetail.TransactionDate);
            }
        }
        else
        {
            return ExchangeRateHelper::mstPrice(_tmpLineDetail.UnitPrice, _tmpLineDetail.TransactionCurrency, _tmpLineDetail.TransactionDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>