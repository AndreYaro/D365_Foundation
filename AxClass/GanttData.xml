<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttData</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class GanttData
{
    #macrolib.AviFiles

    GanttClient             ganttClient;
    GanttTableCollection    ganttTableCollection;
    GanttDataUndo           ganttDataUndo;

    GanttCalendarCollection ganttCalendarCollection;
    Set                     setCalendarNames;

    FromDate                loadingFromDate;
    ToDate                  loadingToDate;

    FromDate                prevLoadingFromDate;
    ToDate                  prevLoadingToDate;

    RunbaseProgress         progress;
    Counter                 progressCounter;
    private Map capacityReservationsByActivityId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCalendarName</Name>
				<Source><![CDATA[
    public void addCalendarName(Name _name)
    {
        if (!this.parmGanttClient().parmGanttSetup().parmLoadCalendar())
        {
            return;
        }

        setCalendarNames.add(_name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLoadingDatesInterval</Name>
				<Source><![CDATA[
    protected void adjustLoadingDatesInterval(FromDate _fromDate, ToDate _toDate)
    {
        if (_fromDate > _toDate     ||
            _fromDate <= dateNull() ||
            _toDate   <= dateNull() ||
            _toDate   >= naDate())
        {
            return;
        }

        if (_fromDate < this.parmLoadingFromDate())
        {
            this.parmLoadingFromDate(_fromDate);
        }

        if (_toDate > this.parmLoadingToDate())
        {
            this.parmLoadingToDate(_toDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUndo</Name>
				<Source><![CDATA[
    public boolean canUndo()
    {
        if (!this.parmGanttDataUndo().checkTransactionsExist())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanAfterSaving</Name>
				<Source><![CDATA[
    protected void cleanAfterSaving()
    {
        this.parmGanttDataUndo().deleteAll();

        this.parmGanttTableCollection().resetUserChangesOnAllTables();

        this.cleanCapacityReservationsByActivityId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanAll</Name>
				<Source><![CDATA[
    public void cleanAll()
    {
        this.parmGanttDataUndo().deleteAll();

        ganttTableCollection.deleteDataFromAllTables();

        ganttCalendarCollection.deleteDataFromAllCalendars();

        this.cleanCalendarNames();

        this.resetLoadingData();

        this.cleanCapacityReservationsByActivityId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanCapacityReservationsByActivityId</Name>
				<Source><![CDATA[
    public void cleanCapacityReservationsByActivityId()
    {
        capacityReservationsByActivityId = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanCalendarNames</Name>
				<Source><![CDATA[
    public void cleanCalendarNames()
    {
        setCalendarNames = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalendars</Name>
				<Source><![CDATA[
    protected boolean createCalendars()
    {
        GanttCalendar   ganttCalendar;
        SetEnumerator   setEnumerator;

        if (this.parmGanttClient().parmGanttSetup()                      &&
           !this.parmGanttClient().parmGanttSetup().parmLoadCalendar())
        {
            return false;
        }

        if (!setCalendarNames.elements())
        {
            return false;
        }

        setEnumerator = setCalendarNames.getEnumerator();

        while (setEnumerator && setEnumerator.moveNext())
        {
            if (ganttCalendarCollection.findCalendarName(setEnumerator.current()))
            {
                continue;
            }

            ganttCalendar = GanttCalendar::newGanttCalendarType(this.ganttCalendarType());
            ganttCalendar.parmCalendarName(setEnumerator.current());

            ganttCalendarCollection.insert(ganttCalendar);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ganttCalendarType</Name>
				<Source><![CDATA[
    public GanttCalendarType ganttCalendarType()
    {
        return GanttCalendarType::Basic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGanttTableByRecId</Name>
				<Source><![CDATA[
    public GanttTableBase getGanttTableByRecId(TableName    _tableName,
                                               RecId        _recId)
    {
        GanttTableBase ganttTable;
        if (!_tableName || !_recId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        ganttTable = this.parmGanttTableCollection().findTableName(_tableName, true);

        ganttTable.findRecId(_recId, true);

        return ganttTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordByRecId</Name>
				<Source><![CDATA[
    public Common getRecordByRecId(TableName    _tableName,
                                   RecId        _recId)
    {
        GanttTableBase ganttTable;
        if (!_tableName || !_recId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        ganttTable = this.getGanttTableByRecId(_tableName, _recId);

        return ganttTable.parmTableBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    // If you need to do any feature related changes to this method,
    // then copy/paste it to the derived class without calling super()
    public void init()
    {
        if (!this.validate())
        {
            throw Exception::Error;
        }

        this.initTables();

        this.initTableCollection();

        this.initFieldCollection();

        this.initData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    protected void initData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldCollection</Name>
				<Source><![CDATA[
    protected void initFieldCollection()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLoadingDatesInterval</Name>
				<Source><![CDATA[
    protected void initLoadingDatesInterval()
    {
        this.setLoadingDatesInterval(this.parmGanttClient().parmFromDate(),
                                     this.parmGanttClient().parmToDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPostLoadingData</Name>
				<Source><![CDATA[
    protected void initPostLoadingData()
    {
        this.updateTimeScaleInterval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPreLoadingData</Name>
				<Source><![CDATA[
    protected void initPreLoadingData()
    {
        this.initLoadingDatesInterval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableCollection</Name>
				<Source><![CDATA[
    protected void initTableCollection()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTables</Name>
				<Source><![CDATA[
    protected void initTables()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    // If you need to do any feature related changes to this method,
    // then copy/paste it to the derived class without calling super()
    public void load()
    {
        if (!this.validateLoad())
        {
            throw Exception::Error;
        }

        this.initPreLoadingData();

        this.loadData();

        this.createCalendars();

        this.loadCalendarData();

        this.initPostLoadingData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCalendarData</Name>
				<Source><![CDATA[
    public void loadCalendarData(boolean _expandCalendars = false)
    {
        GanttCalendar   ganttCalendar;
        if (this.parmGanttClient().parmGanttSetup()                      &&
           !this.parmGanttClient().parmGanttSetup().parmLoadCalendar())
        {
            return;
        }

        ganttCalendar = ganttCalendarCollection.findFirst();

        while (ganttCalendar != null)
        {
            if (_expandCalendars && !(ganttCalendar is GanttCalendarCombined))
            {
                if (this.parmLoadingFromDate() < this.prevLoadingFromDate())
                {
                    ganttCalendar.parmIsDataLoaded(false);
                    ganttCalendar.load(this.parmLoadingFromDate(), this.prevLoadingFromDate() - 1);
                }

                if (this.parmLoadingToDate() > this.prevLoadingToDate())
                {
                    ganttCalendar.parmIsDataLoaded(false);
                    ganttCalendar.load(this.prevLoadingToDate() + 1, this.parmLoadingToDate());
                }
            }
            else
            {
                if (_expandCalendars)
                {
                    // Combined calendars are regenerated every time
                    ganttCalendar.deleteAllData();
                }
                ganttCalendar.load(this.parmLoadingFromDate(), this.parmLoadingToDate());
            }

            ganttCalendar = ganttCalendarCollection.findNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    protected void loadData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyModificationBeforeValidation</Name>
				<Source><![CDATA[
    public void modifyModificationBeforeValidation(GanttDataModification _ganttDataModification)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        setCalendarNames                = new Set(Types::String);

        ganttTableCollection            = GanttTableCollection::construct();

        ganttDataUndo                   = GanttDataUndo::newGanttData(this);

        ganttCalendarCollection         = GanttCalendarCollection::construct();
        capacityReservationsByActivityId = new Map(Types::Int64, Types::Class);

        this.resetLoadingDatesInterval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttCalendarCollection</Name>
				<Source><![CDATA[
    public GanttCalendarCollection parmGanttCalendarCollection(GanttCalendarCollection _ganttCalendarCollection = ganttCalendarCollection)
    {
        ganttCalendarCollection = _ganttCalendarCollection;
        return ganttCalendarCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttClient</Name>
				<Source><![CDATA[
    public GanttClient  parmGanttClient(GanttClient _ganttClient = ganttClient)
    {
        ganttClient = _ganttClient;

        return ganttClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttDataUndo</Name>
				<Source><![CDATA[
    public GanttDataUndo parmGanttDataUndo(GanttDataUndo _ganttDataUndo = ganttDataUndo)
    {
        ganttDataUndo = _ganttDataUndo;
        return ganttDataUndo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttTableCollection</Name>
				<Source><![CDATA[
    public GanttTableCollection parmGanttTableCollection(GanttTableCollection _ganttTableCollection = ganttTableCollection)
    {
        ganttTableCollection = _ganttTableCollection;

        return ganttTableCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadingFromDate</Name>
				<Source><![CDATA[
    public FromDate parmLoadingFromDate(FromDate _loadingFromDate = loadingFromDate)
    {
        if(!prmIsDefault(_loadingFromDate))
        {
            prevLoadingFromDate = loadingFromDate;
            loadingFromDate = _loadingFromDate;
        }

        return loadingFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadingToDate</Name>
				<Source><![CDATA[
    public ToDate parmLoadingToDate(ToDate _loadingToDate = loadingToDate)
    {
        if(!prmIsDefault(_loadingToDate))
        {
            prevLoadingToDate = loadingToDate;
            loadingToDate = _loadingToDate;
        }

        return loadingToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCapacityReservationsByActivityId</Name>
				<Source><![CDATA[
    public Map parmCapacityReservationsByActivityId(Map _capacityReservationsByActivityId = capacityReservationsByActivityId)
    {
        capacityReservationsByActivityId = _capacityReservationsByActivityId;
        return capacityReservationsByActivityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevLoadingFromDate</Name>
				<Source><![CDATA[
    public FromDate prevLoadingFromDate()
    {
        return prevLoadingFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevLoadingToDate</Name>
				<Source><![CDATA[
    public ToDate prevLoadingToDate()
    {
        return prevLoadingToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSaveData</Name>
				<Source><![CDATA[
    protected void postSaveData()
    {
        ganttTableCollection.updateBaseDataOnAllTablesAfterSaving();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReload</Name>
				<Source><![CDATA[
    public void prepareReload()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressFinish</Name>
				<Source><![CDATA[
    protected void progressFinish()
    {
        if (progress)
        {
            progress.kill();

            progress        = null;
            progressCounter = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressInit</Name>
				<Source><![CDATA[
    protected void progressInit(str     _caption    = "@SYS20037",
                               int64    _total      = 1,
                               Filename _animation  = #AviUpdate,
                               int      _numOfBars  = 1)
    {
        progressCounter = 0;

        if (!progress)
        {
            progress = RunbaseProgress::construct(_numOfBars, null);
        }

        progress.setCaption(_caption);
        progress.setTotal(_total);
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressInitSaving</Name>
				<Source><![CDATA[
    protected void progressInitSaving()
    {
        this.progressInit();
        this.progressUpdate("@SYS113147", 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressInitValidating</Name>
				<Source><![CDATA[
    protected void progressInitValidating()
    {
        this.progressInit();
        this.progressUpdate("@SYS113556", 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressTotal</Name>
				<Source><![CDATA[
    protected void progressTotal(int64 _total)
    {
        if (progress)
        {
            progress.setTotal(_total);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    protected void progressUpdate(str   _text = '',
                                  int   _increment = 1)
    {
        if (progress)
        {
            if (_increment)
            {
                progressCounter = progressCounter + _increment;
                progress.setCount(progressCounter);
            }

            if (!prmisdefault(_text))
            {
                progress.setText(_text);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLoadingData</Name>
				<Source><![CDATA[
    protected void resetLoadingData()
    {
        this.resetLoadingDatesInterval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLoadingDatesInterval</Name>
				<Source><![CDATA[
    protected void resetLoadingDatesInterval()
    {
        loadingFromDate     = dateMax();
        prevLoadingFromDate = dateMax();
        loadingToDate       = dateNull();
        prevLoadingToDate   = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    // If you need to do any feature related changes to this method,
    // then copy/paste it to the derived class without calling super()
    public void save()
    {
        #OCCRetryCount
        
        try
        {
            ttsbegin;

            if (!this.validateSave())
            {
                throw Exception::Error;
            }

            this.saveData();

            this.postSaveData();

            this.cleanAfterSaving();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            this.progressFinish();

            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            this.progressFinish();

            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            this.progressFinish();

            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            this.progressFinish();

            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveData</Name>
				<Source><![CDATA[
    protected void saveData(boolean _onlyValidate   = false,
                            boolean _skipValidation = true) // validation is done in validateSave() which is normally called before this method, so no need to do it again.
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLoadingDatesInterval</Name>
				<Source><![CDATA[
    protected void setLoadingDatesInterval(FromDate _fromDate, ToDate _toDate)
    {
        this.parmLoadingFromDate(_fromDate);
        this.parmLoadingToDate(_toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>undo</Name>
				<Source><![CDATA[
    public void undo()
    {
        this.parmGanttDataUndo().undoLastTransaction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateModification</Name>
				<Source><![CDATA[
    public void updateModification(GanttDataModification    _ganttDataModification,
                                   boolean                  _validateModification   = true,
                                   boolean                  _addToUndoData          = true)
    {
        GanttTableBase  ganttTable;
        if (!_ganttDataModification.parmModifiedTableName())
        {
            throw error(strfmt("@SYS23264", funcname()));
        }

        if (!_ganttDataModification.parmMapModifiedFields()          ||
           !_ganttDataModification.parmMapModifiedFields().elements())
        {
            return;
        }

        if (_validateModification && !this.validateModification(_ganttDataModification))
        {
            throw error("@SYS18447");
        }

        ganttTable = ganttTableCollection.findTableName(_ganttDataModification.parmModifiedTableName());

        if (!ganttTable)
        {
            throw error(GanttTableBase::txtNotFound(_ganttDataModification.parmModifiedTableName()));
        }

        ganttTable.updateModification(_ganttDataModification);

        if (_addToUndoData && ganttTable.parmAllowUserModification() && ganttTable.parmKeepBaseData())
        {
            ganttDataUndo.insertModification(_ganttDataModification);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateModificationCollection</Name>
				<Source><![CDATA[
    public void updateModificationCollection(GanttDataModificationCollection    _ganttDataModificationCollection,
                                             boolean                            _validateModification = true)
    {
        GanttTTSId              ttsId;
        GanttDataModification   ganttDataModification;

        if (!_ganttDataModificationCollection || !ganttDataUndo)
        {
            throw error(strfmt("@SYS23264", funcname()));
        }

        ganttDataModification = _ganttDataModificationCollection.findFirst();

        if (ganttDataModification)
        {
            ttsId = ganttDataUndo.generateNextTTSId();
        }

        while (ganttDataModification)
        {
            ganttDataModification.parmTTSId(ttsId);

            this.updateModification(ganttDataModification, _validateModification);

            ganttDataModification = _ganttDataModificationCollection.findNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimeScaleInterval</Name>
				<Source><![CDATA[
    protected void updateTimeScaleInterval()
    {
        if (this.parmGanttClient().checkDatesInterval(this.parmLoadingFromDate(),
                                                     this.parmLoadingToDate()))
        {
            this.parmGanttClient().parmFromDate(this.parmLoadingFromDate());
            this.parmGanttClient().parmToDate(this.parmLoadingToDate());
        }
        else if (this.parmGanttClient().checkDatesInterval(this.parmGanttClient().parmOrderFromDate(),
                                                          this.parmGanttClient().parmOrderToDate()))
        {
            this.parmGanttClient().parmFromDate(this.parmGanttClient().parmOrderFromDate());
            this.parmGanttClient().parmToDate(this.parmGanttClient().parmOrderToDate());
        }
        else
        {
            throw error("@SYS74446");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        if (!this.parmGanttClient()                          ||
           !this.parmGanttClient().parmGanttVisualization())
        {
            return checkFailed(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (!this.parmGanttTableCollection())
        {
            return checkFailed(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoad</Name>
				<Source><![CDATA[
    public boolean validateLoad()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModification</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates one modification the user performed in the Gantt chart data.
    /// </summary>
    /// <param name="_ganttDataModification">
    ///    The <c>GanttDataModification</c> instance that contains the modified fields and additional
    ///    modification information.
    /// </param>
    /// <param name="_modifyModificationBeforeValidation">
    ///    A Boolean value that indicates whether the <c>modifyModificationBeforeValidation</c> hook method
    ///    should be called to allow additional information to the modification before validating; optional.
    /// </param>
    /// <returns>
    ///    true if the validation of the modification was successful; otherwise, false.
    /// </returns>
    public boolean validateModification(GanttDataModification   _ganttDataModification,
                                        boolean                 _modifyModificationBeforeValidation = true)
    {
        GanttTableBase  ganttTable;

        boolean         ret;

        if (_modifyModificationBeforeValidation)
        {
            this.modifyModificationBeforeValidation(_ganttDataModification);
        }

        if (!_ganttDataModification                          ||
           !_ganttDataModification.parmModifiedTableName()  ||
           !_ganttDataModification.parmModifiedRecId())
        {
            return false;
        }

        ganttTable = ganttTableCollection.findTableName(_ganttDataModification.parmModifiedTableName());

        if (!ganttTable)
        {
            error(GanttTableBase::txtNotFound(_ganttDataModification.parmModifiedTableName()));

            return false;
        }

        ganttTable.findRecId(_ganttDataModification.parmModifiedRecId());

        if (!ganttTable.parmTableBuffer().RecId)
        {
            error("@SYS35042");

            return false;
        }

        if (!_ganttDataModification.parmMapModifiedFields()          ||
           !_ganttDataModification.parmMapModifiedFields().elements())
        {
            return true;
        }

        ganttTable.setFieldValuesFromMap(_ganttDataModification.parmMapModifiedFields());

        ret = ganttTable.validateWrite();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSave</Name>
				<Source><![CDATA[
    public boolean validateSave(boolean _showInfo = false)
    {
        try
        {
            // do not save any data, only check them.
            this.saveData(true, false);
        }
        catch(Exception::Error)
        {
            if (_showInfo)
            {
                info("@SYS113561");
            }

            return false;
        }

        if (_showInfo)
        {
            info("@SYS113560");
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>