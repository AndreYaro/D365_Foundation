<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsComdPricingTradeUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Job class to create trade agreement records from commodity pricing margin lines.
/// </summary>
class PdsComdPricingTradeUpdate extends RunBaseBatch implements BatchRetryable
{
    PdsComdPricingMarginId      pdsComdPricingMarginId;

    TransDate                   transDate;

    CompanyInfo                 companyInfo;
    PdsComdPricingRun           pdsComdPricingRun;
    PdsComdPricingMargin        pdsComdPricingMargin;

    DialogField                 fieldPriceMarginId;

    #define.CurrentVersion(1)
    #LocalMacro.CurrentList
        pdsComdPricingMarginId
    #EndMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new trade agreement journal line record.
    /// </summary>
    /// <param name="_marginLine">
    /// A pricing margin line from which to create the trade agreement journal line record.
    /// </param>
    /// <param name="_priceDiscJournalNum">
    /// A price discount journal number from which to create the trade agreement journal line record.
    /// </param>
    /// <remarks>
    /// This creates a new trade agreement journal line record using the current parameter values
    /// and given margin line.
    /// </remarks>
    public void createJournalLine(
        PdsComdPricingMarginLine    _marginLine,
        PriceDiscJournalNum         _priceDiscJournalNum)
    {
        AxPriceDiscAdmTrans             axPriceDiscAdmTrans = AxPriceDiscAdmTrans::construct();
        InventTableModule               inventTableModule;
        PriceDiscTable                  priceDiscTable;
        SysInfoAction_FormRun           sysInfoAction;
        AmountCur                       amount = 0;

        inventTableModule = InventTableModule::find(_marginLine.ItemId, ModuleInventPurchSales::Sales);

        axPriceDiscAdmTrans.parmJournalNum(_priceDiscJournalNum);
        axPriceDiscAdmTrans.parmAccountCode(_marginLine.MarginAccountCode);
        axPriceDiscAdmTrans.parmAccountRelation(_marginLine.MarginAccountRelation);
        axPriceDiscAdmTrans.parmCurrency(CompanyInfoHelper::standardCurrency());
        axPriceDiscAdmTrans.parmFromDate(pdsComdPricingRun.RunEffective);
        axPriceDiscAdmTrans.parmInventDimId(_marginLine.InventDimId);
        axPriceDiscAdmTrans.parmItemCode(PriceDiscProductCodeType::Table);
        axPriceDiscAdmTrans.parmItemRelation(_marginLine.ItemId);
        axPriceDiscAdmTrans.parmModule(ModuleInventCustVend::Cust);
        axPriceDiscAdmTrans.parmRelation(PriceType::PriceSales);
        axPriceDiscAdmTrans.parmToDate(pdsComdPricingRun.RunExpiry);
        axPriceDiscAdmTrans.parmUnitId(inventTableModule.UnitId);

        EcoResProductUnitConverter converter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                    _marginLine.ItemId,
                                                    _marginLine.InventDimId,
                                                    _marginLine.UnitID,
                                                    inventTableModule.UnitId,
                                                    NoYes::No,
                                                    NoYes::No);

        axPriceDiscAdmTrans.parmQuantityAmountFrom(converter.convertValue(_marginLine.InventQtyFrom));
        axPriceDiscAdmTrans.parmQuantityAmountTo(converter.convertValue(_marginLine.InventQtyTo));
        amount = converter.convertValue(_marginLine.Price);
        axPriceDiscAdmTrans.parmAmount(amount);

        axPriceDiscAdmTrans.validateWrite();
        axPriceDiscAdmTrans.save();

        priceDiscTable = this.readExactTrade(_marginLine, inventTableModule.UnitId);
        if (priceDiscTable)
        {
            if (priceDiscTable.Amount != amount)
            {
                sysInfoAction = SysInfoAction_FormRun::newFormnameDesc(Formstr(PriceDiscAdmTable), "@PDS1522");

                info(strfmt("@PDS532", priceDiscTable.ItemRelation,
                    _marginLine.accountRelationText(),
                    priceDiscTable.QuantityAmountFrom,
                    priceDiscTable.QuantityAmountTo,
                    amount,
                    priceDiscTable.Amount), "@PDS1523", sysInfoAction);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new trade agreement journal record.
    /// </summary>
    /// <returns>
    ///  An instance of the <c>PriceDiscAdmTable</c> table.
    /// </returns>
    /// <remarks>
    /// Creates a new trade agreement record using the current parameter values.
    /// </remarks>
    public PriceDiscAdmTable createJournalTable()
    {
        PriceDiscJournalName    priceDiscJournalName;
        PriceDiscAdmTable       priceDiscAdmTable;
        PriceDiscAdmName        priceDiscAdmName;

        priceDiscJournalName = PdsParameters::find().PriceDiscJournalName;

        if (priceDiscJournalName)
        {
            priceDiscAdmName = PriceDiscAdmName::find(priceDiscJournalName);
            priceDiscAdmTable.initFromPriceDiscAdmName(priceDiscAdmName);

            if (priceDiscAdmTable.validateWrite())
            {
                priceDiscAdmTable.insert();
            }
            else
            {
                throw error("@PDS1526");
            }
        }
        else
        {
            throw error("@PDS1525");
        }

        return priceDiscAdmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard RunBaseBatch method to get the dialog box.
    /// </summary>
    /// <returns>
    /// Dialog to interact with the user.
    /// </returns>
    /// <remarks>
    /// This uses a basic dialog and adds some fields to it.
    /// <syntax>
    /// public Object dialog()
    /// </syntax>
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase           dialog = super();

        fieldPriceMarginId = dialog.addField(extendedtypestr(PdsComdPricingMarginId));

        fieldPriceMarginId.value(pdsComdPricingMarginId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimateWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Estimate the number of lines that will be generated.
    /// </summary>
    /// <returns>
    /// Estimated number of lines to generate for the current pricing margin id.
    /// </returns>
    /// <remarks>
    /// This is useful for providing the total amount of work for a progress indicator.
    /// <syntax>
    /// private Int64 estimateWork()
    /// </syntax>
    /// </remarks>
    private int64 estimateWork()
    {
        PdsComdPricingMarginLine    pdsComdPricingMarginLine;

        select count(RecId)
            from pdsComdPricingMarginLine
            where pdsComdPricingMarginLine.PricingMarginId
                    == pdsComdPricingMarginId
                && pdsComdPricingMarginLine.UpdateAgreement   == NoYes::Yes;

        return pdsComdPricingMarginLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard method in RunBaseBatch classes called to allow the class to retrieve values from the dialog.
    /// </summary>
    /// <returns>
    /// Value returned from parent method.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public boolean getFromDialog()
    /// </syntax>
    /// </remarks>
    public boolean getFromDialog()
    {
        pdsComdPricingMarginId = fieldPriceMarginId.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the standard new method to protect it.
    /// </summary>
    /// <remarks>
    /// Best practice requirement.
    /// <syntax>
    /// protected void new()
    /// </syntax>
    /// </remarks>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard pack method to save the important properties of this class.
    /// </summary>
    /// <returns>
    /// container holding the packed properties
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public Container pack()
    /// </syntax>
    /// </remarks>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComdPricingMarginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parameter method for the pricing margin id property.
    /// </summary>
    /// <param name="_marginId">
    /// Optional. The PdsPridingMarginId to use when generating trade agreement lines.
    /// </param>
    /// <returns>
    /// Current pricing margin id propety value.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public PdsPricingMarginId parmPricingMarginId(PdsPricingMarginId _marginId)
    /// </syntax>
    /// </remarks>
    public PdsComdPricingMarginId parmComdPricingMarginId(
        PdsComdPricingMarginId _marginId = pdsComdPricingMarginId)
    {
        pdsComdPricingMarginId = _marginId;
        return pdsComdPricingMarginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readExactTrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds and returns the corresponding ProdDiscTable record to the
    /// parameter _marginLine.
    /// </summary>
    /// <param name="_marginLine">
    /// Record to find and return.
    /// </param>
    /// <param name="_unitId">
    /// Unit Id needed to find record to be returned.
    /// </param>
    /// <returns>
    /// The found PriceDiscTable record.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// private Record readExactTrade(PdsComdPricingMarginLine _marginLine)
    /// </syntax>
    /// </remarks>
    public PriceDiscTable readExactTrade(
        PdsComdPricingMarginLine    _marginLine,
        UnitOfMeasureSymbol         _unitId)
    {
        PriceDiscTable          priceDiscTable;

        select firstonly priceDiscTable
            where priceDiscTable.Relation               == PriceType::PriceSales
                && priceDiscTable.AccountCode           == _marginLine.MarginAccountCode
                && priceDiscTable.AccountRelation       == _marginLine.MarginAccountRelation
                && priceDiscTable.ItemCode              == PriceDiscProductCodeType::Table
                && priceDiscTable.ItemRelation          == _marginLine.ItemId
                && priceDiscTable.InventDimId           == _marginLine.InventDimId
                && priceDiscTable.UnitId                == _unitId
                && priceDiscTable.QuantityAmountFrom    == _marginLine.InventQtyFrom
                && priceDiscTable.QuantityAmountTo      == _marginLine.InventQtyTo
                && priceDiscTable.FromDate              == pdsComdPricingRun.RunEffective
                && priceDiscTable.ToDate                == pdsComdPricingRun.RunExpiry;

        return priceDiscTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard RunBaseBatch method to execute the job.
    /// </summary>
    /// <remarks>
    /// This will initialize the progress indicator and internal object variables
    /// needed by the other operational methods of the class. Read each record
    /// in the pricing margin line table for the pricing margin id parameter and
    /// calls createTradeAgreement to create the trade agreement line.
    /// <syntax>
    /// public void run()
    /// </syntax>
    /// </remarks>
    public void run()
    {
        PdsComdPricingMarginLine    pdsComdPricingMarginLine;
        PriceDiscAdmTable           priceDiscAdmTable;

        setprefix(PdsComdPricingTradeUpdate::description());

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        if (!transDate)
        {
            transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        companyInfo          = CompanyInfo::find();
        pdsComdPricingMargin = PdsComdPricingMargin::findById(
            pdsComdPricingMarginId);
        pdsComdPricingRun    = PdsComdPricingRun::find(
            pdsComdPricingMargin.PricingRunId);

        this.progressInit("@PDS520", this.estimateWork(), #AviUpdate);

        try
        {
            ttsbegin;

            priceDiscAdmTable = this.createJournalTable();

            while select pdsComdPricingMarginLine
                where pdsComdPricingMarginLine.PricingMarginId
                            == pdsComdPricingMarginId
                    && pdsComdPricingMarginLine.UpdateAgreement == NoYes::Yes
            {
                progress.incCount();
                this.createJournalLine(pdsComdPricingMarginLine, priceDiscAdmTable.JournalNum);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        info("@PDS474");
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard unpack method to restore the important properties of this class.
    /// </summary>
    /// <param name="_packedClass">
    /// container holding the packed properties
    /// </param>
    /// <returns>
    /// true if the properties could be restored successfully; false otherwise.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public Enum unpack(Container _packedClass)
    /// </syntax>
    /// </remarks>
    public boolean unpack(container _packedClass)
    {
        Integer         version = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard method expected by RunBaseBatch if there is any parameter validation required.
    /// </summary>
    /// <param name="calledFrom">
    /// object called from
    /// </param>
    /// <returns>
    /// true if all parameters are valid; false otherwise.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public boolean validate()
    /// </syntax>
    /// </remarks>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        if (!pdsComdPricingMarginId)
        {
            ret = checkFailed("@PDS472");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard constructor pattern to create a new instance of PdsPricingTradeUpdate.
    /// </summary>
    /// <returns>
    /// New instance of PdsPricingTradeUpdate
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public static PdsPricingTradeUpdate construct()
    /// </syntax>
    /// </remarks>
    public static PdsComdPricingTradeUpdate construct()
    {
        return new PdsComdPricingTradeUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provide the description for this job class.
    /// </summary>
    /// <returns>
    /// Description for this job class.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public static ClassDescription description()
    /// </syntax>
    /// </remarks>
    public static ClassDescription description()
    {
        return "@PDS471";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard entry point method for any RunBase class.
    /// </summary>
    /// <param name="_args">
    /// Run time arguments.
    /// </param>
    /// <exception cref="Exception::Error" label="@PDS533">If a record argument is given then it must be either PdsPricingMargin or
    /// PdsPricingMarginLine.</exception>
    /// <remarks>
    /// This update class may be run directly and can be run as a batch. However,
    /// if a current record buffer is set in the args then this will expect either
    /// table PdsPricingMargin or PdsPricingMarginLine and then immediately run
    /// the trade agreement update (there is no chance to schedule it as a job).
    /// <syntax>
    /// public static void main(Args args)
    /// </syntax>
    /// </remarks>
    public static void main(Args _args)
    {
        PdsComdPricingTradeUpdate       tradeUpdate;

        PdsComdPricingMargin            margin;
        PdsComdPricingMarginLine        marginLines;

        tradeUpdate = PdsComdPricingTradeUpdate::construct();

        if (_args && _args.caller() && _args.record())
        {
            switch (_args.dataset())
            {
                case tablenum(PdsComdPricingMargin):
                    margin = _args.record();
                    tradeUpdate.parmComdPricingMarginId(margin.PricingMarginId);
                    break;

                case tablenum(PdsComdPricingMarginLine):
                    marginLines = _args.record();
                    tradeUpdate.parmComdPricingMarginId(
                        marginLines.PricingMarginId);
                    break;

                default:
                    throw error(strfmt("@PDS533", tablestr(PdsComdPricingMargin),
                        tablestr(PdsComdPricingMarginLine)));
            }

            tradeUpdate.runOperation();
            return;
        }

        if (tradeUpdate.prompt())
        {
            tradeUpdate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>