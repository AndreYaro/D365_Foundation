<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceCreateService_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceCreateService_IN</c> class is the service class
/// for the Indian EInvoice records creation.
/// </summary>
internal final class EInvoiceCreateService_IN  extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs Indian EInvoice creation.
    /// </summary>
    /// <param name = "_dataContract">A <c>EInvoiceCreateContract_IN</c> object that acts as data contract.</param>
    public void createEInvoice(EInvoiceCreateContract_IN _dataContract)
    {
        #OCCRetryCount

        container tablesContainer = [tableNum(CustInvoiceJour), tableNum(ProjInvoiceJour), tableNum(InventTransferJour), tableNum(CustomsShippingBillJour_IN)];

        Query query = new Query(SysOperationHelper::base64Decode(_dataContract.parmQuery()));
        QueryRun queryRun = new QueryRun(query);

        int createdRecordCount;
        int totalRecordsCount;

        try
        {
            totalRecordsCount = 0;
            while (queryRun.next())
            {
                for (int i = 1; i <= conLen(tablesContainer); i++)
                {
                    TableId tableId = conPeek(tablesContainer, i);

                    if (queryRun.changed(tableId))
                    {
                        Common currentRecord = queryRun.get(tableId);

                        if (currentRecord)
                        {
                            setPrefix(OnlineInvoicingHelper_IN::getErrorMessage(currentRecord));

                            if (TaxGSTInvoiceHelper_IN::isGSTInvoice(currentRecord))
                            {
                                if (OnlineInvoicingHelper_IN::validateEInvoice(currentRecord, true))
                                {
                                    this.createRecord(currentRecord);
                                    createdRecordCount++;
                                }

                                totalRecordsCount++;
                            }
                        }
                    }
                }
            }
        }
        catch (Exception::Deadlock)
        {
            queryRun.reset();
            retry;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        info(strFmt("@WAX:WHSWorkDeferredPutProcessingControllerOperationSummary", createdRecordCount, totalRecordsCount-createdRecordCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord</Name>
				<Source><![CDATA[
    private void createRecord(Common _record)
    {
        EInvoice_IN eInvoice;
        eInvoice.RefTableId = _record.TableId;
        eInvoice.RefRecId = _record.RecId;
        eInvoice.Status = EInvoiceStatus_IT::Created;
        eInvoice.doInsert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>