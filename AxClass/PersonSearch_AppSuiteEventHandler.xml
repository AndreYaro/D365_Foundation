<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PersonSearch_AppSuiteEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PersonSearch_AppSuiteEventHandler</c> class provides event handlers for person search form functionality extensions.
/// </summary>
public final class PersonSearch_AppSuiteEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PersonSearchResultCustomerView_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the customer result tab page with a count of record results.
    /// </summary>
    /// <param name="sender">The data source sender.</param>
    /// <param name="e">The event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PersonSearch, PersonSearchResultCustomerView), FormDataSourceEventType::QueryExecuted)]
    public static void PersonSearchResultCustomerView_OnQueryExecuted(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();

        FormTabPageControl tabPage = formRun.design().controlName(formControlStr(PersonSearch, ResultCustomerTabPage)) as FormTabPageControl;

        if (tabPage && formRun is PersonSearchIMarkResult)
        {
            formRun.setResultCountOnGridCaption(tabPage, sender, "@PersonSearch:CustomerSearchResults");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PersonSearchResultVendorView_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the vendor result tab page with a count of record results.
    /// </summary>
    /// <param name="sender">The data source sender.</param>
    /// <param name="e">The event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PersonSearch, PersonSearchResultVendorView), FormDataSourceEventType::QueryExecuted)]
    public static void PersonSearchResultVendorView_OnQueryExecuted(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();

        FormTabPageControl tabPage = formRun.design().controlName(formControlStr(PersonSearch, ResultVendorTabPage)) as FormTabPageControl;

        if (tabPage && formRun is PersonSearchIMarkResult)
        {
            formRun.setResultCountOnGridCaption(tabPage, sender, "@PersonSearch:VendorSearchResults");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PersonSearchResultProspectView_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the prospect result tab page with a count of record results.
    /// </summary>
    /// <param name="sender">The data source sender.</param>
    /// <param name="e">The event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PersonSearch, PersonSearchResultProspectView), FormDataSourceEventType::QueryExecuted)]
    public static void PersonSearchResultProspectView_OnQueryExecuted(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();

        FormTabPageControl tabPage = formRun.design().controlName(formControlStr(PersonSearch, ResultProspectTabPage)) as FormTabPageControl;

        if (tabPage && formRun is PersonSearchIMarkResult)
        {
            formRun.setResultCountOnGridCaption(tabPage, sender, "@PersonSearch:ProspectSearchResults");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PersonSearchResultProspectiveVendorView_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the prospective vendor result tab page with a count of record results.
    /// </summary>
    /// <param name="sender">The data source sender.</param>
    /// <param name="e">The event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PersonSearch, PersonSearchResultProspectiveVendorView), FormDataSourceEventType::QueryExecuted)]
    public static void PersonSearchResultProspectiveVendorView_OnQueryExecuted(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();

        FormTabPageControl tabPage = formRun.design().controlName(formControlStr(PersonSearch, ResultProspectiveVendorTabPage)) as FormTabPageControl;

        if (tabPage && formRun is PersonSearchIMarkResult)
        {
            formRun.setResultCountOnGridCaption(tabPage, sender, "@PersonSearch:ProspectiveVendorSearchResults");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PersonSearchResultDriverView_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the driver result tab page with a count of record results.
    /// </summary>
    /// <param name="sender">The data source sender.</param>
    /// <param name="e">The event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PersonSearch, PersonSearchResultDriverView), FormDataSourceEventType::QueryExecuted)]
    public static void PersonSearchResultDriverView_OnQueryExecuted(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();

        FormTabPageControl tabPage = formRun.design().controlName(formControlStr(PersonSearch, ResultDriverTabPage)) as FormTabPageControl;

        if (tabPage && formRun is PersonSearchIMarkResult)
        {
            formRun.setResultCountOnGridCaption(tabPage, sender, "@PersonSearch:DriverSearchResults");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PersonSearchResultProspectView_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the prospective view jump reference to change company context depending on the legal entity of the result record.
    /// </summary>
    /// <param name="sender">The form data source containing the field for jumpRef.</param>
    /// <param name="e">The form data source event context.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PersonSearch, PersonSearchResultProspectView), FormDataSourceEventType::Initialized)]
    public static void PersonSearchResultProspectView_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        PersonSearch_AppSuiteJumpRefHelper jumpRef = PersonSearch_AppSuiteJumpRefHelper::construct(sender.formRun());

        FormDataObject dataObject = sender.object(fieldNum(PersonSearchResultProspectView, BusRelAccount));
        dataObject.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(PersonSearch_AppSuiteJumpRefHelper, jumpRef), jumpRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PersonSearchResultCustomerView_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the customer view jump reference to change company context depending on the legal entity of the result record.
    /// </summary>
    /// <param name="sender">The form data source containing the field for jumpRef.</param>
    /// <param name="e">The form data source event context.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PersonSearch, PersonSearchResultCustomerView), FormDataSourceEventType::Initialized)]
    public static void PersonSearchResultCustomerView_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        PersonSearch_AppSuiteJumpRefHelper jumpRef = PersonSearch_AppSuiteJumpRefHelper::construct(sender.formRun());

        FormDataObject dataObject = sender.object(fieldNum(PersonSearchResultCustomerView, AccountNum));
        dataObject.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(PersonSearch_AppSuiteJumpRefHelper, jumpRef), jumpRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PersonSearchResultVendorView_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the vendor view jump reference to change company context depending on the legal entity of the result record.
    /// </summary>
    /// <param name="sender">The form data source containing the field for jumpRef.</param>
    /// <param name="e">The form data source event context.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PersonSearch, PersonSearchResultVendorView), FormDataSourceEventType::Initialized)]
    public static void PersonSearchResultVendorView_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        PersonSearch_AppSuiteJumpRefHelper jumpRef = PersonSearch_AppSuiteJumpRefHelper::construct(sender.formRun());

        FormDataObject dataObject = sender.object(fieldNum(PersonSearchResultVendorView, AccountNum));
        dataObject.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(PersonSearch_AppSuiteJumpRefHelper, jumpRef), jumpRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PersonSearchResultContactView_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the contact view jump reference to change company context depending on the legal entity of the result record.
    /// </summary>
    /// <param name="sender">The form data source containing the field for jumpRef.</param>
    /// <param name="e">The form data source event context.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PersonSearch, PersonSearchResultContactView), FormDataSourceEventType::Initialized)]
    public static void PersonSearchResultContactView_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        PersonSearch_AppSuiteJumpRefHelper jumpRef = PersonSearch_AppSuiteJumpRefHelper::construct(sender.formRun());

        FormDataObject dataObject = sender.object(fieldNum(PersonSearchResultContactView, ContactPersonId));
        dataObject.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(PersonSearch_AppSuiteJumpRefHelper, jumpRef), jumpRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PersonSearchResultUserView_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the user view jump reference to change company context depending on the legal entity of the result record.
    /// </summary>
    /// <param name="sender">The form data source containing the field for jumpRef.</param>
    /// <param name="e">The form data source event context.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PersonSearch, PersonSearchResultUserView), FormDataSourceEventType::Initialized)]
    public static void PersonSearchResultUserView_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        PersonSearch_AppSuiteJumpRefHelper jumpRef = PersonSearch_AppSuiteJumpRefHelper::construct(sender.formRun());

        FormDataObject dataObject = sender.object(fieldNum(PersonSearchResultUserView, Id));
        dataObject.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(PersonSearch_AppSuiteJumpRefHelper, jumpRef), jumpRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PersonSearchResult_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the associated prospective user, if any, when the associated contact is included or excluded.
    /// </summary>
    /// <param name="sender">The search result table record.</param>
    /// <param name="e">The event arguments.</param>
    [DataEventHandler(tableStr(PersonSearchResult), DataEventType::Updated), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void PersonSearchResult_onUpdated(Common sender, DataEventArgs e)
    {
        PersonSearchResult personSearchResult = sender as PersonSearchResult;

        if (personSearchResult && personSearchResult.ResultCategory == PersonSearchResultCategory::Contact)
        {
            VendVendorPortalUserRequest vendorPortalUserRequest;
            ContactPerson contactPerson;

            select firstonly vendorPortalUserRequest
                where vendorPortalUserRequest.Person != 0
                join contactPerson
                where vendorPortalUserRequest.Person == contactPerson.Party
                    && contactPerson.RecId == personSearchResult.ResultRecId
                    && contactPerson.TableId == personSearchResult.ResultTableId;

            PersonSearchResult prospectiveUserResult = PersonSearchResult::findByResult(
                personSearchResult.TaskId,
                vendorPortalUserRequest.RecId,
                vendorPortalUserRequest.TableId,
                PersonSearchResultCategory::ProspectiveUser,
                true);

            if (prospectiveUserResult)
            {
                ttsbegin;
                prospectiveUserResult.Include = personSearchResult.Include;
                prospectiveUserResult.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PersonSearchProcessor_onFindPartyLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create person search results for Application Suite artifacts from the set of Global Address Book party numbers
    /// harvested during all searches.
    /// </summary>
    /// <param name = "_taskId">The person search task id.</param>
    [SubscribesTo(classStr(PersonSearchProcessor), delegateStr(PersonSearchProcessor, onFindPartyLink))]
    public static void PersonSearchProcessor_onFindPartyLink(PersonSearchTaskId _taskId)
    {
        PersonSearch personSearch = PersonSearch::find(_taskId);

        if (!personSearch)
        {
            return;
        }

        DirPartyTable dirPartyTable;
        PersonSearchPartyNumberTmp personSearchPartyNumberTmp;
        VendTable vendTable;
        CustTable custTable;

        // Customers
        while select crossCompany RecId, DataAreaId from custTable
            join dirPartyTable
                where custTable.Party == dirPartyTable.RecId
            join personSearchPartyNumberTmp
                where dirPartyTable.PartyNumber == personSearchPartyNumberTmp.PartyNumber
                    && personSearchPartyNumberTmp.TaskId == personSearch.TaskId
        {
            PersonSearchResult::findOrCreateResult(
                personSearch.TaskId,
                PersonSearchResultCategory::Customer,
                custTable.RecId,
                tableNum(CustTable),
                custTable.DataAreaId,
                dirPartyTable.PartyNumber);
        }

        // Vendors
        while select crossCompany RecId, DataAreaId from vendTable
            join dirPartyTable
                where vendTable.Party == dirPartyTable.RecId
            join personSearchPartyNumberTmp
                where dirPartyTable.PartyNumber == personSearchPartyNumberTmp.PartyNumber
                    && personSearchPartyNumberTmp.TaskId == personSearch.TaskId
        {
            PersonSearchResult::findOrCreateResult(
                personSearch.TaskId,
                PersonSearchResultCategory::Vendor,
                vendTable.RecId,
                tableNum(VendTable),
                vendTable.DataAreaId,
                dirPartyTable.PartyNumber);
        }

        // Prospects
        smmBusRelTable smmBusRelTable;

        while select crossCompany RecId, DataAreaId from smmBusRelTable
            join dirPartyTable
                where smmBusRelTable.Party == dirPartyTable.RecId
            join personSearchPartyNumberTmp
                where dirPartyTable.PartyNumber == personSearchPartyNumberTmp.PartyNumber
                    && personSearchPartyNumberTmp.TaskId == personSearch.TaskId
        {
            PersonSearchResult::findOrCreateResult(
                personSearch.TaskId,
                PersonSearchResultCategory::Prospect,
                smmBusRelTable.RecId,
                tableNum(smmBusRelTable),
                smmBusRelTable.DataAreaId,
                dirPartyTable.PartyNumber);
        }

        // Prospective vendors with a contact person party
        VendProspectiveVendorRegistration vendorRegistration;
        VendProspectiveVendorRegistrationRequest vendorRegistrationRequest;

        while select crossCompany vendorRegistrationRequest
            join vendorRegistration
                where vendorRegistrationRequest.RecId == vendorRegistration.RegistrationRequest
            join dirPartyTable
                where vendorRegistration.ContactParty == dirPartyTable.RecId
            join personSearchPartyNumberTmp
                where dirPartyTable.PartyNumber == personSearchPartyNumberTmp.PartyNumber
                    && personSearchPartyNumberTmp.TaskId == personSearch.TaskId
        {
            PersonSearchResult::findOrCreateResult(
                personSearch.TaskId,
                PersonSearchResultCategory::ProspectiveVendor,
                vendorRegistrationRequest.RecId,
                tableNum(VendProspectiveVendorRegistrationRequest),
                vendorRegistrationRequest.DataAreaId,
                dirPartyTable.PartyNumber);
        }

        // Prospective vendors with vendor party
        while select crossCompany vendorRegistrationRequest
            join vendorRegistration
                where vendorRegistrationRequest.RecId == vendorRegistration.RegistrationRequest
            join dirPartyTable
                where vendorRegistration.VendorParty == dirPartyTable.RecId
            join personSearchPartyNumberTmp
                where dirPartyTable.PartyNumber == personSearchPartyNumberTmp.PartyNumber
                    && personSearchPartyNumberTmp.TaskId == personSearch.TaskId
        {
            PersonSearchResult::findOrCreateResult(
                personSearch.TaskId,
                PersonSearchResultCategory::ProspectiveVendor,
                vendorRegistrationRequest.RecId,
                tableNum(VendProspectiveVendorRegistrationRequest),
                vendorRegistrationRequest.DataAreaId,
                dirPartyTable.PartyNumber);
        }

        // Prospective users by Person
        VendVendorPortalUserRequest vendorPortalUserRequest;

        while select vendorPortalUserRequest
            join dirPartyTable
                where vendorPortalUserRequest.Person == dirPartyTable.RecId
            join personSearchPartyNumberTmp
                where dirPartyTable.PartyNumber == personSearchPartyNumberTmp.PartyNumber
                    && personSearchPartyNumberTmp.TaskId == personSearch.TaskId
        {
            PersonSearchResult::findOrCreateResult(
                personSearch.TaskId,
                PersonSearchResultCategory::ProspectiveUser,
                vendorPortalUserRequest.RecId,
                tableNum(VendVendorPortalUserRequest),
                vendorPortalUserRequest.DataAreaId,
                dirPartyTable.PartyNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the entity name associated with a target entity.
    /// </summary>
    /// <param name = "_targetEntity">The target entity.</param>
    /// <param name = "_parentEntityName">The entity parent name.</param>
    /// <returns>The entity name, if any.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static DMFEntityName findEntityName(str _targetEntity, DMFEntityName _parentEntityName = '')
    {
        DMFEntity dmfEntity;

        select firstonly EntityName from dmfEntity
            where dmfEntity.TargetEntity == _targetEntity
                && dmfEntity.ParentEntityName == _parentEntityName
                && dmfEntity.IsObsolete == NoYes::No;

        return dmfEntity.EntityName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>