<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcAdaptorVisitorDocumentReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCAdaptorVisitorDocumentReference</c> class is the visitor that is responsible for creating
/// document reference notes.
/// </summary>
class PcAdaptorVisitorDocumentReference extends PCAdaptorVisitor
{
    PCName                  modelName;
    Notes                   notes;
    int                     treeLevel;

    PCStack                 stack;

    private LanguageId      languageId;

    #PC
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendAttributeInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends attribute information to the notes.
    /// </summary>
    /// <param name="_attributeEnumerator">
    /// A map enumerator.
    /// </param>
    protected void appendAttributeInformation(MapEnumerator _attributeEnumerator)
    {
        PCAdaptorAttribute adaptorAttribute;

        while (_attributeEnumerator.moveNext())
        {
            adaptorAttribute = _attributeEnumerator.currentValue();

            if (this.shouldAppendAttributeInformation(adaptorAttribute))
            {
                adaptorAttribute.setLanguageId(languageId);

                // we add one to the tree level because the attributes should have one tab more than the component
                notes += #DocuRefNewLine + PCRuntimeLibrary::docuRefTabStr(this.getTreeLevel() + 1);
                notes += adaptorAttribute.getLocalizedName() + ' ' + adaptorAttribute.getValueAsLocalizedString();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAppendAttributeInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the information for the specified attribute should be appended to the notes.
    /// </summary>
    /// <param name = "_adaptorAttribute">The adaptor for an attribute.</param>
    /// <returns>true if the information should be appended; otherwise, false.</returns>
    protected boolean shouldAppendAttributeInformation(PCAdaptorAttribute _adaptorAttribute)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLanguageId</Name>
				<Source><![CDATA[
    internal void setLanguageId(LanguageId _languageId)
    {
        languageId = _languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendComponentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends component header information to the notes.
    /// </summary>
    /// <param name="_adaptorComponent">
    /// An instance of the <c>PCAdaptorComponent</c> class.
    /// </param>
    protected void appendComponentHeader(PCAdaptorComponent _adaptorComponent)
    {
        _adaptorComponent.setLanguageId(languageId);
        notes += #DocuRefNewLine + #DocuRefNewLine + PCRuntimeLibrary::docuRefTabStr(stack.count()) + _adaptorComponent.getLocalizedName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendComponentInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends component information to the notes.
    /// </summary>
    /// <param name="_adaptorComponent">
    /// An instance of the <c>PCAdaptorComponent</c> class.
    /// </param>
    protected void appendComponentInformation(PCAdaptorComponent _adaptorComponent)
    {
        this.appendComponentHeader(_adaptorComponent);

        this.appendAttributeInformation(_adaptorComponent.getAttributeEnumerator());

        this.synchronizeTreeLevel(_adaptorComponent.getID());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the notes in a string representation.
    /// </summary>
    /// <returns>
    /// A string representation of the notes.
    /// </returns>
    public Notes getNotes()
    {
        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTreeLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current level in the tree.
    /// </summary>
    /// <returns>
    /// The level in the tree.
    /// </returns>
    protected int getTreeLevel()
    {
        return stack.count();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        stack = PCStack::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeTreeLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the data structure that is used to keep track of the level in the tree.
    /// </summary>
    /// <param name="_componentID">
    /// A component ID.
    /// </param>
    protected void synchronizeTreeLevel(int64 _componentID)
    {
        stack.push(_componentID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTreeLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the level in the tree.
    /// </summary>
    /// <param name="_parentComponentID">
    /// The ID of the parent component.
    /// </param>
    protected void updateTreeLevel(int64 _parentComponentID)
    {
        // if the parent component ID does not match the last visited, we are back tracking in the tree
        while (stack.pull() != _parentComponentID)
        {
            stack.pop();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitRootComponentStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits a root component adapter instance.
    /// </summary>
    /// <param name="_adaptorRootComponent">
    /// An instance of the <c>PCAdaptorRootComponent</c> class.
    /// </param>
    public void visitRootComponentStart(PCAdaptorRootComponent _adaptorRootComponent)
    {
        this.appendComponentInformation(_adaptorRootComponent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitSubComponentStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits a sub component adapter instance.
    /// </summary>
    /// <param name="_subComponent">
    /// An instance of the <c>PCAdaptorSubComponent</c> class.
    /// </param>
    public void visitSubComponentStart(PCAdaptorSubComponent _subComponent)
    {
        this.updateTreeLevel(_subComponent.getParentComponentID());

        this.appendComponentInformation(_subComponent.getComponent());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCAdaptorVisitorDocumentReference construct()
    {
        PCAdaptorVisitorDocumentReference visitor = new PCAdaptorVisitorDocumentReference();

        return visitor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>