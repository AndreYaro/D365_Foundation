<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetDimensionFocusProcessBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a derived class that is responsible for creating dimension reference records for budget source tracking and budget transaction data.
/// </summary>
public class BudgetDimensionFocusProcessBalance extends DimensionFocusProcessBalance implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetDimensionReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates budget dimension references.
    /// </summary>
    public void createBudgetDimensionReference()
    {
        BudgetDimensionFocusDimensionReference budgetDimensionReference;
        BudgetTransactionLine                  budgetTransactionLine;
        RecordInsertList                       newBudgetDimensionReferences;
    
        if (progress != null)
        {
            progress.setText("@SYS315716");
        }
    
        newBudgetDimensionReferences = new RecordInsertList(tableNum(BudgetDimensionFocusDimensionReference));
        utcdatetime startTime = DateTimeUtil::utcNow();

        while select LedgerDimension from budgetTransactionLine
            group by budgetTransactionLine.LedgerDimension
            notexists join budgetDimensionReference
                where budgetDimensionReference.BudgetLedgerDimension == budgetTransactionLine.LedgerDimension
                    && budgetDimensionReference.FocusDimensionHierarchy == dimensionFocusRecId
        {
            startTime = DimensionFocusProcessBalance::validateGeneralLedgerBalanceFeatureDisabled(startTime);

            this.processBudgetLedgerDimension(
                newBudgetDimensionReferences,
                budgetTransactionLine.LedgerDimension);
        }
    
        newBudgetDimensionReferences.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMissingLedgerDimensionReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the missing ledger dimension reference from budget source tracking data.
    /// There could be some ledger dimensions that are in Budget source tracking but not yet in GeneralJournalAccountEntry.
    /// </summary>
    public void createMissingLedgerDimensionReference()
    {
        DimensionFocusLedgerDimensionReference ledgerDimensionReference;
        BudgetSourceTrackingDetail             budgetSourceTrackingDetail;
        RecordInsertList                       newLedgerDimensionReferences;
        DataAreaId                             dataAreaId = curext();
    
        newLedgerDimensionReferences = new RecordInsertList(tableNum(DimensionFocusLedgerDimensionReference));
    
        if (ledgerRecId && ledgerRecId != Ledger::current())
        {
            dataAreaId = CompanyInfo::find(Ledger::find(ledgerRecId).PrimaryForLegalEntity).DataArea;
        }
    
        changeCompany(dataAreaId)
        {
            utcdatetime startTime = DateTimeUtil::utcNow();

            while select BudgetSourceLedgerDimension from budgetSourceTrackingDetail
                group by budgetSourceTrackingDetail.BudgetSourceLedgerDimension
            // a notExists join to the DimensionFocusLedgerDimensionReference table is included because
            // the primary purpose of this loop is to create ledger dimensions for the missing
            // DimensionFocusLedgerDimensionReference records
            notexists join ledgerDimensionReference
                where ledgerDimensionReference.AccountEntryLedgerDimension == budgetSourceTrackingDetail.BudgetSourceLedgerDimension
                    && ledgerDimensionReference.FocusDimensionHierarchy == dimensionFocusRecId
            {
                startTime = DimensionFocusProcessBalance::validateGeneralLedgerBalanceFeatureDisabled(startTime);

                this.processAccountEntryLedgerDimension(
                    newLedgerDimensionReferences,
                    budgetSourceTrackingDetail.BudgetSourceLedgerDimension);
            }
        }
    
        newLedgerDimensionReferences.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBudgetLedgerDimension</Name>
				<Source><![CDATA[
    protected void processBudgetLedgerDimension(
        RecordInsertList        _newLedgerDimensionReferences,
        LedgerDimensionBudget   _budgetLedgerDimension)
    {
        BudgetDimensionFocusDimensionReference  budgetDimensionReference;
        DimensionHierarchyLevel                 dimHierarchyLevel;
        DimensionAttributeLevelValueView        dimAttrLevelValueView;
        DimensionStorage                        dimStorage;
        boolean                                 isCreated;
        RecId                                   dimAttrValueComboRecId;
    
        while select DimensionAttribute, Level from dimHierarchyLevel
            order by dimHierarchyLevel.Level
                where dimHierarchyLevel.DimensionHierarchy == dimensionFocusRecId
            join firstonly AttributeValueRecId, AttributeValueHashKey, DisplayValue from dimAttrLevelValueView
                where dimAttrLevelValueView.ValueCombinationRecId == _budgetLedgerDimension
                    && dimAttrLevelValueView.DimensionAttribute == dimHierarchyLevel.DimensionAttribute
        {
            if (dimAttrLevelValueView != null)
            {
                if (!isCreated)
                {
                    dimStorage = DimensionStorage::construct();
                    dimStorage.addHierarchy(dimensionFocusRecId);
    
                    isCreated = true;
                }
    
                dimStorage.setSegment(
                    dimHierarchyLevel.Level,
                    DimensionStorageSegment::construct(
                        dimAttrLevelValueView.DisplayValue,
                        dimAttrLevelValueView.AttributeValueRecId,
                        dimAttrLevelValueView.AttributeValueHashKey));
            }
        }
    
        if (isCreated)
        {
            dimAttrValueComboRecId = dimStorage.save();
        }
        else
        {
            dimAttrValueComboRecId = 0;
        }
    
        select RecId from budgetDimensionReference
            where budgetDimensionReference.BudgetLedgerDimension == _budgetLedgerDimension
                && budgetDimensionReference.FocusDimensionHierarchy == dimensionFocusRecId
                && budgetDimensionReference.FocusLedgerDimension == dimAttrValueComboRecId;
    
        if (budgetDimensionReference == null)
        {
            budgetDimensionReference.BudgetLedgerDimension = _budgetLedgerDimension;
            budgetDimensionReference.FocusDimensionHierarchy = dimensionFocusRecId;
            budgetDimensionReference.FocusLedgerDimension = dimAttrValueComboRecId;
            _newLedgerDimensionReferences.add(budgetDimensionReference);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServer</Name>
				<Source><![CDATA[
    protected void runServer()
    {
        BudgetInstrumentationLogger budgetInstrumentationLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetDimensionFocusProcessBalance));
        using (SysInstrumentationActivityContext processBalanceContext = budgetInstrumentationLogger.dimensionFocusBalance().processBalanceContext(dimensionFocusRecId, this.parmCurrentBatch().BatchJobId, ledgerRecId))
        {
            super();
            
            int startTimeForBudgetDimensionReferences = processBalanceContext.getElapsedMilliseconds();

            this.createMissingLedgerDimensionReference();
            this.createBudgetDimensionReference();

            budgetInstrumentationLogger.logTimeDuration(processBalanceContext, startTimeForBudgetDimensionReferences);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetDimensionFocusProcessBalance construct(DimensionHierarchy _dimensionHierarchy)
    {
        BudgetDimensionFocusProcessBalance updateBalance;
    
        updateBalance = new BudgetDimensionFocusProcessBalance();
        updateBalance.setDimensionHierarchy(_dimensionHierarchy);
    
        return updateBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>