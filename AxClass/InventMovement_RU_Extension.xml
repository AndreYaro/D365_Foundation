<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMovement_RU_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMovement_RU_Extension</c> class contain Russian extensions to the <c>InventMovement</c> class.
/// </summary>
[ExtensionOf(classStr(InventMovement))]
final class InventMovement_RU_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>performFinancialPhysicalLedgerUpdate</Name>
				<Source><![CDATA[
    protected boolean performFinancialPhysicalLedgerUpdate(
        LedgerVoucher _ledgerVoucher,
        InventTrans _inventTrans,
        InventUpdate _updateNow,
        InventOnhand _inventOnhand,
        InventTrans _inventTransUpd_RU)
    {
        boolean ledgerVoucherCorrectionChanged;
        boolean isCountryRegion_RU = this.parmCompanyCountryRegion().isCountryRegionRU();
        if (isCountryRegion_RU)
        {
            InventUpd_Physical  inventUpd_Physical = classIdGet(_updateNow) == classNum(InventUpd_Physical) ? _updateNow : null;
            InventUpd_Financial inventUpd_Financial = classIdGet(_updateNow) == classNum(InventUpd_Financial) ? _updateNow : null;
            ledgerVoucherCorrectionChanged = this.updateLedgerVoucherCorrectionChangedForFinancialUpdate(_ledgerVoucher, inventUpd_Physical, inventUpd_Financial);

            this.updateInventTransUpdStornoPhysicalForFinancialUpdate_RU(_inventTransUpd_RU, inventUpd_Physical, inventUpd_Financial);
        }

        boolean res = next performFinancialPhysicalLedgerUpdate(_ledgerVoucher, _inventTrans, _updateNow, _inventOnhand, _inventTransUpd_RU);

        return ledgerVoucherCorrectionChanged || res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performPhysicalAmountLedgerUpdate</Name>
				<Source><![CDATA[
    protected void performPhysicalAmountLedgerUpdate(
        LedgerVoucher _ledgerVoucher,
        InventTrans _inventTrans,
        InventUpdate _updateNow)
    {
        boolean isCountryRegion_RU = this.parmCompanyCountryRegion().isCountryRegionRU();
        boolean isUpdateRequired = false;

        if (isCountryRegion_RU)
        {
            InventTransPosting inventTransPosting = _inventTrans.inventTransPostingPhysical();
            if (inventTransPosting.IsPosted)
            {
                isUpdateRequired = true;
            }
        }

        next performPhysicalAmountLedgerUpdate(_ledgerVoucher, _inventTrans, _updateNow);

        if (isUpdateRequired && _inventTrans.CostAmountPhysical)
        {
            LedgerVoucherObject ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
            LedgerBondClient_RU ledgerBondClient = ledgerVoucherObject.ledgerBondClient_RU();

            if (ledgerBondClient)
            {
                ledgerBondClient.bondLast2();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerVoucherRevenueTransactionAmountsForFinancialUpdate</Name>
				<Source><![CDATA[
    protected LedgerBondId_RU addLedgerVoucherRevenueTransactionAmountsForFinancialUpdate(
        LedgerVoucher _ledgerVoucher,
        InventTrans _inventTrans,
        LedgerVoucherObject _ledgerVoucherObject,
        CurrencyExchangeHelper _currencyExchangeHelper,
        InventTransPosting _inventTransPosting)
    {
        boolean isCountryRegion_RU = this.parmCompanyCountryRegion().isCountryRegionRU();

        LedgerBondClient_RU ledgerBondClient;
        LedgerVoucherObject ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();

        if (isCountryRegion_RU)
        {
            InventTransPosting inventTransPosting = _inventTrans.inventTransPostingPhysicalRevenue();
            if (inventTransPosting.IsPosted)
            {                
                ledgerBondClient = ledgerVoucherObject.ledgerBondClient_RU();
                if (ledgerBondClient)
                {
                    ledgerBondClient.addNewLogObject();
                }
            }
        }

        LedgerBondId_RU vRefId = next addLedgerVoucherRevenueTransactionAmountsForFinancialUpdate(_ledgerVoucher, _inventTrans, _ledgerVoucherObject, _currencyExchangeHelper, _inventTransPosting);

        if (ledgerBondClient)
        {
            if (_inventTrans.RevenueAmountPhysical && vRefId)
            {
                ledgerBondClient.bondVRef2Log(vRefId);
            }

            ledgerBondClient.removeCurrentLogObject();
        }

        return vRefId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>