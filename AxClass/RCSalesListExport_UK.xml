<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RCSalesListExport_UK</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The <c>RCSalesListExport_UK</c> class is responsible for exports file for Reverse charge sales list.
/// </summary>
public class RCSalesListExport_UK extends RunBase
{
    private TaxAuthority taxAuthority;
    private TaxPeriod taxPeriod;
    private ERFileName fileName;
    private TransDate fromDate;
    private TransDate toDate;
    private ERIFileDestination fileDestination;

    private DialogField dialogFileName;
    private DialogField dialogFromDate;
    private DialogField dialogToDate;
    private DialogField dialogTaxAuthority;
    private DialogField dialogTaxPeriod;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        taxAuthority,
        fileName,
        taxPeriod,
        fromDate,
        toDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTaxAuthority</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxAuthority parmTaxAuthority(TaxAuthority _taxAuthority = taxAuthority)
    {
        taxAuthority = _taxAuthority;
        return taxAuthority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxPeriod parmTaxPeriod(TaxPeriod _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;
        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ERFileName parmFileName(ERFileName _fileName = fileName)
    {
        fileName = _fileName;
        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileDestination</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ERIFileDestination parmFileDestination(ERIFileDestination _fileDestination = fileDestination)
    {
        fileDestination = _fileDestination;
        return fileDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = conpeek(_packedClass, 1);
        boolean ret = true;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        fromDate = dateStartQtr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        toDate = dateEndQtr(fromDate);

        if (!fileDestination)
        {
            fileDestination = ERObjectsFactory::createFileDestinationBrowser();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase("@SYS118810", this);

        DialogGroup dialogFile = dialog.addGroup("@SYS4047");
        dialogFile.columns(1);

        dialogFileName = dialog.addFieldValue(extendedTypeStr(ERFileName), fileName);

        DialogGroup dialogDate = dialog.addGroup("@SYS323");
        dialogDate.columns(2);

        dialogFromDate = dialog.addFieldValue(extendedTypeStr(TransDate), fromDate, "@SYS5209");
        dialogToDate = dialog.addFieldValue(extendedTypeStr(TransDate), toDate, "@SYS14656");

        dialog.addGroup("@SYS21937");
        dialogTaxAuthority = dialog.addFieldValue(extendedTypeStr(TaxAuthority), taxAuthority);

        dialogTaxPeriod = dialog.addFieldValue(extendedTypeStr(TaxPeriod), taxPeriod);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = true;

        fromDate = dialogFromDate.value();
        toDate = dialogToDate.value();
        taxAuthority = dialogTaxAuthority.value();
        taxPeriod = dialogTaxPeriod.value();
        fileName = strRTrim(strLTrim(dialogFileName.value()));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super();

        if (fromDate > toDate)
        {
            ret = checkFailed("@SYS15885");

            info("@SYS118809");
        }

        if (!taxAuthority)
        {
            ret = checkFailed("@SYS63248");
        }

        if (!TaxAuthorityAddress::checkExist(taxAuthority))
        {
            ret = false;
        }

        if (!taxPeriod)
        {
            ret = checkFailed("@SYS24993");
        }

        ret = ret && this.validateRCSalesList();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        container fromdt, todt;
        RCSalesListTmp_UK rcSalesListTmp;

        this.setPeriod();

        int noOfMonths;
        if (year(toDate) == year(fromDate))
        {
            noOfMonths = mthOfYr(toDate) - mthOfYr(fromDate) + 1;
        }
        else
        {
            int noOfYears = year(toDate) - year(fromDate) + 1;
            noOfMonths = (12 * noOfYears) - (12 - mthOfYr(toDate)) - (mthOfYr(fromDate) - 1);
        }

        if (noOfMonths > 1)
        {
            fromdt = [fromDate, endMth(fromDate) + 1];

            for (int i = 3; i <= noOfMonths; i++)
            {
                fromdt += [nextMth(conPeek(fromdt, i - 1))];
            }

            for (int i = 1; i <= noOfMonths; i++)
            {
                if (i < noOfMonths)
                {
                    todt += [endMth(conPeek(fromdt, i))];
                }
                else
                {
                    todt += [toDate];
                }
            }
        }
        else
        {
            fromdt = [fromDate];
            todt = [toDate];
        }

        RCSalesList_UK rcSalesList;
        while select VATNum from rcSalesList
            group by vatNum
            where rcSalesList.TransDate >= this.fromdate
                && rcSalesList.TransDate <= this.todate
        {
            for (int i = 1; i <= conLen(fromdt); i++)
            {
                date periodFromDate = conPeek(fromdt, i);
                date periodToDate = conPeek(todt, i);

                RCSalesList_UK rcSalesListLoc;
                select sum(AmountMST) from rcSalesListLoc
                    where rcSalesListLoc.TransDate >= periodFromDate
                        && rcSalesListLoc.TransDate <= periodToDate
                        && rcSalesListLoc.vatNum == rcSalesList.vatNum
                        && rcSalesListLoc.Listcode == Listcode::IncludeNot;

                rcSalesListTmp.clear();
                rcSalesListTmp.VATNum = rcSalesList.VATNum;
                rcSalesListTmp.DueDate = periodFromDate;
                rcSalesListTmp.TotalValue = real2int(decRound(rcSalesListLoc.AmountMST, 0));
                rcSalesListTmp.insert();
            }
        }

        this.runER(rcSalesListTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDateFormat</Name>
				<Source><![CDATA[
    private str convertDateFormat(date _date)
    {
        str strDate = date2Str(_date,
            123,
            DateDay::Digits2,
            DateSeparator::Dot,
            DateMonth::Digits2,
            DateSeparator::Dot,
            DateYear::Digits4,
            DateFlags::None);

        return strRem(strDate, '.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    private void runER(RCSalesListTmp_UK _rcSalesListTmp)
    {
        const str parmNameFromDate = 'parameter.FromDate';
        const str parmNameToDate = 'parameter.ToDate';

        ERFormatMappingId formatMappingId = ReverseChargeParameters_W::find().ERFormatMappingSalesListExport_UK;

        ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId, fileName, false)
            .withParameter(new ERModelDefinitionDatabaseContext()
                .addTemporaryTable(_rcSalesListTmp))
            .withParameter(new ERModelDefinitionInputParametersAction()
                .addParameter(parmNameFromDate, this.convertDateFormat(fromDate))
                .addParameter(parmNameToDate, this.convertDateFormat(toDate)))
            .withFileDestination(fileDestination)
            .run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriod</Name>
				<Source><![CDATA[
    private void setPeriod()
    {
        TaxReportPeriod taxReportPeriod;
        select minof(FromDate), maxof(ToDate) from taxReportPeriod
            where taxReportPeriod.TaxPeriod == taxPeriod;

        if (fromDate > taxReportPeriod.ToDate
            || toDate < taxReportPeriod.FromDate)
        {
            throw error("@SYS118811");
        }

        if (toDate > taxReportPeriod.ToDate)
        {
            toDate = taxReportPeriod.ToDate;
        }

        while select FromDate from taxReportPeriod
            where taxReportPeriod.TaxPeriod == taxPeriod
        {
            if (fromDate < taxReportPeriod.FromDate)
            {
                fromDate = prevMth(endMth(fromDate) + 1);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRCSalesList</Name>
				<Source><![CDATA[
    private boolean validateRCSalesList()
    {
        boolean ret = true;

        RCSalesList_UK rcSalesList;
        while select rcSalesList
            where rcSalesList.TransDate >= this.fromdate
                && rcSalesList.TransDate <= this.todate
        {
            if (!rcSalesList.check())
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RCSalesListExport_UK rcSalesListExport = new RCSalesListExport_UK();

        if (rcSalesListExport.prompt())
        {
            rcSalesListExport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>