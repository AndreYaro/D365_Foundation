<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjEstimateListDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjEstimateListDP</c> class is a report data provider class for the associated
///    <c>ProjEstimateList</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjEstimateList)),
    SRSReportParameterAttribute(classstr(ProjEstimateListContract))
]
public class ProjEstimateListDP extends SRSReportDataProviderBase
{
    int                     errcode;
    ProjCostGroupId         projCostGroupId;
    real                    totalcost;
    real                    totalcontract;
    ProjPeriodId            projPeriodId;
    NoYes                   includeCreatedTrans;
    NoYes                   includePostedTrans;
    NoYes                   includeReversedTrans;
    NoYes                   includeEliminatedTrans;
    ProjPeriodTo            periodTo;
    ProjControlTypeOutput   outputResult;
    ProjEstimateListTmp     projEstimateListTmp;
    ProjControlPeriodTable  localProjControlPeriodTable;
    ProjPeriodId            periodId;
    ProjControlTypeOutput   projIncludeWarnings;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkWarning</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the warning codes for each record.
    /// </summary>
    /// <param name="_localProjControlPeriodTable">
    ///    The table of which to set the warning codes.
    /// </param>
    public void checkWarning(ProjControlPeriodTable   _localProjControlPeriodTable)
    {
        ProjControlPeriodTableColumn    projControlPeriodTableColumnEstimate,
                                        projControlPeriodTableColumnTotal;

        ProjControlPeriodCostGroup      projControlPeriodCostGroup;

        // Do the check
        // Check if Completion pct is above 100
        if (_localProjControlPeriodTable.CompletePct > 100)
        {
            this.warningCode(2);
        }

        // Check 4, check if completion pct is below 0
        if (_localProjControlPeriodTable.CompletePct < 0)
        {
            this.warningCode(4);
        }

        //Check 5, Check for contract
        ProjTable projTableLocal = _localProjControlPeriodTable.projTable();

        if (projTableLocal.Type == ProjType::FixedPrice || (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() && ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjContractBillingMethod::FixedPrice)))
        {
            if (_localProjControlPeriodTable.ActualContract + _localProjControlPeriodTable.ctcContract == 0)
            {
                this.warningCode(5);
            }
        }

        // Check 6 No cost estimate exists
        if (_localProjControlPeriodTable.displayActualCostAmount() + _localProjControlPeriodTable.displayCTCCostAmount() == 0)
        {
            this.warningCode(6);
        }

        // Check 7 Accumulated revenue exceeds total revenue
        projControlPeriodTableColumnEstimate = localProjControlPeriodTable.projControlPeriodTableColumnAccEstimate();
        projControlPeriodTableColumnTotal    = localProjControlPeriodTable.projControlPeriodTableColumnTotal();

        if (projControlPeriodTableColumnEstimate.plTotalRevenue > projControlPeriodTableColumnTotal.plTotalRevenue)
        {
            this.warningCode(7);
        }

        // Check 8 Accumulated gross margin exceeds total gross margin
        if (projControlPeriodTableColumnEstimate.plTotalGrossMargin > projControlPeriodTableColumnTotal.plTotalGrossMargin)
        {
            this.warningCode(8);
        }

        //Check costoverrun
        while select CostGroupId from projControlPeriodCostGroup
            where   projControlPeriodCostGroup.ProjId       == localProjControlPeriodTable.ProjId
            &&      projControlPeriodCostGroup.ControlId    == localProjControlPeriodTable.ControlId
            &&      projControlPeriodCostGroup.PeriodFrom   == localProjControlPeriodTable.PeriodFrom
            &&      projControlPeriodCostGroup.Version      == localProjControlPeriodTable.Version
            &&      projControlPeriodCostGroup.ctcCostAmount    < 0
        {
            this.warningCode(1,projControlPeriodCostGroup.CostGroupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjEstimateListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the project estimate list from the temporary table.
    /// </summary>
    /// <returns>
    ///    The project estimate list from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('ProjEstimateListTmp')
    ]
    public ProjEstimateListTmp getProjEstimateListTmp()
    {
        select * from projEstimateListTmp;
        return projEstimateListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTextForErrCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the warning messages for each error code.
    /// </summary>
    /// <returns>
    ///    The error message.
    /// </returns>
    public str getTextForErrCode()
    {
        str retmsg;

        switch (errCode)
        {
            case 1: retmsg = strfmt("@SYS74797", projCostGroupId);  break;
            case 2: retmsg = "@SYS74800";                           break;
            case 4: retmsg = "@SYS74802";                           break;
            case 5: retmsg = "@SYS74803";                           break;
            case 6: retmsg = "@SYS74804";                           break;
            case 7: retmsg = "@SYS99519";                           break;
            case 8: retmsg = "@SYS99520";                           break;
        }
        return retmsg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a record should be included.
    /// </summary>
    /// <param name="_localProjControlPeriodTable">
    ///    The table in which to include the record.
    /// </param>
    /// <returns>
    ///    true if the record should be included; otherwise, false.
    /// </returns>
    public boolean includeRecord(ProjControlPeriodTable _localProjControlPeriodTable)
    {
        boolean ret = false;

        if ((includeCreatedTrans && (_localProjControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Created))
            ||
            (includeEliminatedTrans && (_localProjControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Eliminate))
            ||
            (includePostedTrans && (_localProjControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Posted))
            ||
            (includeReversedTrans && (_localProjControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Reversal))
          )
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjEstimateList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the specified record and inserts it in the temporary table.
    /// </summary>
    /// <param name="_warningCode">
    ///    A Boolean value that indicates whether to include a warning code.
    /// </param>
    public void insertProjEstimateList(boolean _warningCode)
    {
        projEstimateListTmp.clear();

        if (_warningCode)
        {
            projEstimateListTmp.ErrMsg = this.getTextForErrCode();
        }
        else
        {
            projEstimateListTmp.ErrMsg = '';
        }

        projEstimateListTmp.Margin                  = totalContract - totalCost;
        projEstimateListTmp.TotalContract           = totalcontract;
        projEstimateListTmp.TotalCost               = totalcost;
        projEstimateListTmp.Version                 = localProjControlPeriodTable.Version;
        projEstimateListTmp.ProjId                  = localProjControlPeriodTable.ProjId;
        projEstimateListTmp.PeriodTo                = localProjControlPeriodTable.PeriodTo;
        projEstimateListTmp.PeriodStatus            = localProjControlPeriodTable.PeriodStatus;
        projEstimateListTmp.CompletePctCalculated   = localProjControlPeriodTable.CompletePct;
        projEstimateListTmp.PeriodId                = periodId;
        projEstimateListTmp.PeriodName              = localProjControlPeriodTable.periodName();

        projEstimateListTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SSRS at
    ///    runtime. This method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun    queryRun;
        ProjEstimateListContract contract = this.parmDataContract() as ProjEstimateListContract;

        outputResult            = contract.parmProjIncludeWarnings();
        includeCreatedTrans     = contract.parmProjCreated();
        includePostedTrans      = contract.parmProjPosted();
        includeReversedTrans    = contract.parmProjReversed();
        includeEliminatedTrans  = contract.parmProjElimination();
        projPeriodId            = contract.parmProjPeriodId();
        periodTo                = contract.parmProjEstimateDate();

        queryRun = new QueryRun(this.parmQuery());
        queryRun.interactive(true);

        while (queryRun.next())
        {
            localProjControlPeriodTable = queryRun.get(tablenum(ProjControlPeriodTable));
            totalcontract   = 0;
            totalcost       = 0;
            errCode         = 0;
            periodId        = localProjControlPeriodTable.PeriodId;

            if (this.includeRecord(localProjControlPeriodTable) && outputResult != ProjControlTypeOutput::NothingToPrint)
            {
                if (localProjControlPeriodTable.PeriodId == projPeriodId &&
                    (periodTo >= localProjControlPeriodTable.PeriodFrom &&
                     periodTo <= localProjControlPeriodTable.PeriodTo))
                {
                    totalcontract   = localProjControlPeriodTable.ActualContract + localProjControlPeriodTable.ctcContract;
                    totalcost       = localProjControlPeriodTable.displayActualCostAmount() + localProjControlPeriodTable.displayCTCCostAmount();

                    if (outputResult == ProjControlTypeOutput::ExclWarrning)
                    {
                        errCode = 0;
                        totalcontract   = localProjControlPeriodTable.ActualContract + localProjControlPeriodTable.ctcContract;
                        totalcost       = localProjControlPeriodTable.displayActualCostAmount() + localProjControlPeriodTable.displayCTCCostAmount();
                        this.insertProjEstimateList(false);
                    }
                    else
                    {
                        this.checkWarning(localProjControlPeriodTable);
                    }

                    if (!errCode && outputResult == ProjControlTypeOutput::InclWarrning)
                    {
                        this.insertProjEstimateList(false);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the error codes for all records and insert them in the temperory table.
    /// </summary>
    /// <param name="_warningCode">
    ///    The error code.
    /// </param>
    /// <param name="_costGroupId">
    ///    The ID of the cost group of which to set the error codes.
    /// </param>
    public void warningCode(int _warningCode, ProjCostGroupId _costGroupId = '')
    {
        errCode = _warningCode;
        projCostGroupId = _costGroupId;
        this.insertProjEstimateList(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>