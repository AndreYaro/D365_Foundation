<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionRegistrationAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventoryTransactionRegistrationAction</c> class is a base class for operations responsible for generating registered receipt or issue warehouse inventory transactions.
/// </summary>
internal abstract class WHSInventoryTransactionRegistrationAction extends WHSInventoryTransactionAction implements WHSILocationLoadTrackingContext
{
    private WHSLocationLoadChangeTracker whsLocationLoadChangeTracker;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>physicalOnHandChanging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains logic that needs to be executed whenever physical on-hand is about to change.
    /// </summary>
    /// <param name="_context">
    /// The context of the physical on-hand change.
    /// </param>
    /// <param name="_args">
    /// The information that describes the changes to the physical on-hand.
    /// </param>
    delegate void physicalOnHandChanging(Object _context, InventPhysicalOnHandChangeArgs _args)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>preInsertTransaction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void preInsertTransaction(WHSInventoryTransactionActionParameters _parameters, WHSInventoryTransaction _transaction, WHSWorkInventoryTransactionDescriptor _transactionDescriptor)
    {
        super(_parameters, _transaction, _transactionDescriptor);

        this.raiseOnHandChangingEvent(_parameters, _transactionDescriptor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>raiseOnHandChangingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Raises an inventory changing event.
    /// </summary>
    /// <param name = "_parameters">Parameters of the action.</param>
    /// <param name = "_transactionDescriptor">A transaction descriptor.</param>
    /// <remarks>
    /// Note that subscription logic expects that this event is raised before the on-hand is actually updated.
    /// </remarks>
    [Hookable(false)]
    protected void raiseOnHandChangingEvent(WHSInventoryTransactionActionParameters _parameters, WHSWorkInventoryTransactionDescriptor _transactionDescriptor)
    {
        ItemId prevItemId;
        InventTable inventTable;
        boolean mustInventBeControlled; // this should always be true, keeping only to support potential extensions.

        WMSLocation wmsLocation = WMSLocation::find(
            _parameters.parmStorageDimensions().parmWmsLocationId(),
            _parameters.parmStorageDimensions().parmInventLocationId());

        WHSLocationProfile locationProfile = wmsLocation.whsLocationProfile();

        WHSWorkInventoryTransactionDescriptorEnumerator enumerator = _transactionDescriptor.getEnumerator();
        while (enumerator.moveNext())
        {
            WHSWorkInventoryTransactionDescriptorElement descriptorElement = enumerator.current();

            if (descriptorElement.parmItemId() != prevItemId)
            {
                inventTable = InventTable::find(descriptorElement.parmItemId());
                mustInventBeControlled = inventTable.inventItemType().mustInventBeControlled();

                prevItemId = descriptorElement.parmItemId();
            }

            if (mustInventBeControlled)
            {
                WHSInventoryQuantityPair inventoryQuantity = WHSInventoryTransactionQuantityFormatConverter::convertFromWarehouseHandlingFormatToInventoryFormat(
                    descriptorElement.parmItemId(),
                    this.transactionInventoryDirectionSign() * descriptorElement.parmHandlingQty(),
                    this.transactionInventoryDirectionSign() * descriptorElement.parmHandlingWeight());

                InventPhysicalOnHandChangeArgs physicalOnHandChangeArgs = InventPhysicalOnHandChangeArgs::newStandardDeltaQuantities(
                    inventTable,
                    descriptorElement.parmInventoryDimensionsDescriptor().convertToInventDim(true),
                    inventoryQuantity.parmInventQty(),
                    inventoryQuantity.parmCwInventQty());

                // This is purely performance optimization.
                // We can utilize the fact that storage dimensions are the same for the whole item set thus no need to re-query on each iteration.
                physicalOnHandChangeArgs.setLocationAndProfile(wmsLocation, locationProfile);

                this.physicalOnHandChanging(this, physicalOnHandChangeArgs);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionInventoryDirectionSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines a sign of the inventory change.
    /// </summary>
    /// <returns>+1 when adding inventory; -1 when removing inventory.</returns>
    protected abstract int transactionInventoryDirectionSign()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSLocationLoadChangeTracker</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSLocationLoadChangeTracker parmWHSLocationLoadChangeTracker(WHSLocationLoadChangeTracker _whsLocationLoadChangeTracker = whsLocationLoadChangeTracker)
    {
        if (prmisDefault(_whsLocationLoadChangeTracker))
        {
            if (!whsLocationLoadChangeTracker)
            {
                whsLocationLoadChangeTracker = WHSLocationLoadChangeTracker::construct();
            }
        }
        else
        {
            whsLocationLoadChangeTracker = _whsLocationLoadChangeTracker;
        }

        return whsLocationLoadChangeTracker;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>