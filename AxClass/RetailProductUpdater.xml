<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailProductUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailProductUpdater</c> class is used to update a set of products contained in a category.
/// </summary>
public class RetailProductUpdater extends RunBaseBatch implements BatchRetryable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    RetailCategoryProductUpdateParm productUpdateParameters;
    RetailProductAttributesToUpdate attributesToUpdate;
    RetailAttributesGlobalLookup attributesGlobalLookup;
    RetailAttributesLegalEntityLookup attributesLegalEntityLookup;
    RetailProductAttributesReference oldAttributes;
    SysOperationProgress    sysOperationProgress;

    boolean showProgress;
    boolean includeSubCategories;
    boolean overrideProductProperties;

    UnitOfMeasure                       unitBOM;
    UnitOfMeasure                       unitInvent;
    UnitOfMeasure                       unitSales;
    UnitOfMeasure                       unitPurchase;
    UnitOfMeasure                       unitBaseConversion;

    container   packedParameters;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        packedParameters,
        includeSubCategories,
        overrideProductProperties
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the attribute of the product should be set or not.
    /// </summary>
    /// <param name="_shouldBeSet">
    /// If the attributes was selected to be set
    /// </param>
    /// <param name="_currentValue">
    /// the current value of the attribute.
    /// </param>
    /// <param name="_originalValue">
    /// the previous value of the attribute before the category was chnaged.
    /// </param>
    /// <returns>
    /// true if the attrbute should be overriden
    /// </returns>
    protected boolean canOverride(boolean _shouldBeSet, anytype _currentValue, anytype _originalValue = null)
    {
        // should this value even be set?
        if (!_shouldBeSet)
        {
            return false;
        }

        // are we overiding product attributes that are not inhereted from category
        if (overrideProductProperties)
        {
            return true;
        }

        // if the value is not the one inhereted from category; see previous condition
        if ((_currentValue) && (_currentValue != _originalValue))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (productUpdateParameters)
        {
            packedParameters = productUpdateParameters.pack();
        }

        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeSubCategories</Name>
				<Source><![CDATA[
    public boolean parmIncludeSubCategories(boolean _includeSubCategories = includeSubCategories)
    {
        includeSubCategories = _includeSubCategories;
        return includeSubCategories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverrideProductProperties</Name>
				<Source><![CDATA[
    public boolean parmOverrideProductProperties(boolean _overrideProductProperties = overrideProductProperties)
    {
        overrideProductProperties = _overrideProductProperties;
        return overrideProductProperties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductUpdateParameters</Name>
				<Source><![CDATA[
    public RetailCategoryProductUpdateParm parmProductUpdateParameters(RetailCategoryProductUpdateParm _productUpdateParameters = productUpdateParameters)
    {
        productUpdateParameters = _productUpdateParameters;
        return productUpdateParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowProgress</Name>
				<Source><![CDATA[
    public boolean parmShowProgress(boolean _showProgress = showProgress)
    {
        showProgress = _showProgress;
        return showProgress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        using(var telemetry = RetailInstrumentationSegment::construct('RetailProduceUpdater', funcName()))
        {
            this.updateProductsInCategory();
            eventSource.EventWriteProductsRetailProductUpdaterUpdateCategoryDone(classId2Name(ClassIdGet(this)), funcName());
            info(strFmt("@RET260000", productUpdateParameters.parmEntityName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                productUpdateParameters = RetailCategoryProductUpdateParm::construct();
                productUpdateParameters.unpack(packedParameters);
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMultipleProductsFromCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all the products in the category.
    /// </summary>
    /// <remarks>
    /// Updates and counts the number of products in the category.
    /// </remarks>
    public void updateMultipleProductsFromCategory()
    {
        EcoResProduct retrievedProduct;
        SetEnumerator enumerator;
        RefRecId productId;
        int numberOfProductsUpdated;

        if (productUpdateParameters.parmEntityType() != RetailProductUpdateMode::ProductSet)
        {
            // wrong use of function
            error("@SYS104799");
        }

        if (!productUpdateParameters.parmProductIds())
        {
            // wrong use of function
            error("@SYS104799");
        }

        attributesToUpdate = RetailProductAttributesToUpdate::findByEntityTypeAndId(
            productUpdateParameters.parmEntityType(),
            productUpdateParameters.parmEntityId());

        if ((!attributesToUpdate) || (!attributesToUpdate.isAnythingSet()))
        {
            eventSource.EventWriteProductsGenericMessage(classId2Name(ClassIdGet(this)), funcName(), 'No attributes to update.');
            info("@RET2353");
            return;
        }

        numberOfProductsUpdated = 0;
        enumerator = productUpdateParameters.parmProductIds().getEnumerator();
        while (enumerator.moveNext())
        {
            productId = enumerator.current();
            retrievedProduct = EcoResProduct::find(productId);
            try
            {
                this.updateForLegalEntities(retrievedProduct);
                numberOfProductsUpdated ++;
            }
            catch(Exception::Error)
            {
                eventSource.EventWriteProductsUpdateProductWarning(classId2Name(ClassIdGet(this)), funcName(), retrievedProduct.RecId);
                warning(strFmt("@RET260057", retrievedProduct.DisplayProductNumber));
            }
        }

        RetailProductAttributesToUpdate::deleteByEntityTypeAndId(productUpdateParameters.parmEntityType(), productUpdateParameters.parmEntityId());

        eventSource.EventWriteProductsGenericMessageCount(classId2Name(ClassIdGet(this)), funcName(), 'products were updated', numberOfProductsUpdated);
        info(strFmt("@RET2754", numberOfProductsUpdated));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductProperties</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    protected RetailProductPropertyManager initProductProperties(RefRecId _categoryId, EcoResProduct _product, LegalEntity _legalEntity)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        boolean isCountryRegionRU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        RetailAttributesGlobalLookup oldGlobalAttributes;
        RetailAttributesLegalEntityLookup oldLegalEntityAttributes;
        RetailProductPropertyManager retailProductPropertyManager;
        boolean siteAttributeRequired = false;

        // Get the attributes configured by the user...
        attributesLegalEntityLookup = RetailAttributesLegalEntityLookup::findByCategory(_categoryId, _legalEntity, false);

        // Retrieve the existing values - use the user configured ReportItemLabel and ReportShelfLabel value.
        retailProductPropertyManager = RetailProductPropertyManager::retrieveExisting(_product, _legalEntity, attributesLegalEntityLookup.ReportItemLabel, attributesLegalEntityLookup.ReportShelfLabel);

        if (oldAttributes)
        {
            oldGlobalAttributes = oldAttributes.getOriginalRetailAttributesGlobal();
            oldLegalEntityAttributes = oldAttributes.getOriginalRetailAttributesLegalEntity(_legalEntity);

            oldLegalEntityAttributes.checkInvalidFieldAccess(false);
        }

        attributesGlobalLookup = RetailAttributesGlobalLookup::findByCategory(_categoryId, false);
        attributesLegalEntityLookup = RetailAttributesLegalEntityLookup::findByCategory(_categoryId, _legalEntity, false);

        attributesLegalEntityLookup.checkInvalidFieldAccess(false);

        unitBaseConversion  = UnitOfMeasure::find(attributesLegalEntityLookup.UnitBaseComparison);
        unitBOM             = UnitOfMeasure::find(attributesLegalEntityLookup.UnitBOM);
        unitInvent          = UnitOfMeasure::find(attributesLegalEntityLookup.UnitInvent);
        unitSales           = UnitOfMeasure::find(attributesLegalEntityLookup.UnitSales);
        unitPurchase        = UnitOfMeasure::find(attributesLegalEntityLookup.UnitPurchase);

        if (!retailProductPropertyManager.hasProduct())
        {
            return null;
        }

        if (this.canOverride(
            attributesToUpdate.RetailBarCodeUseEANStandard,
            retailProductPropertyManager.parmBarCodeUseEANStandard(),
            oldLegalEntityAttributes.RetailBarCodeUseEANStandard))
        {
            retailProductPropertyManager.parmBarCodeUseEANStandard(attributesLegalEntityLookup.RetailBarCodeUseEANStandard);
        }

        if (this.canOverride(
            attributesToUpdate.GroupProductDimension,
            retailProductPropertyManager.parmGroupProductDimension(),
            oldGlobalAttributes.GroupProductDimension))
        {
            retailProductPropertyManager.parmGroupProductDimension(attributesGlobalLookup.GroupProductDimension);
        }

        if (this.canOverride(
            attributesToUpdate.GroupStorageDimension,
            retailProductPropertyManager.parmGroupStorageDimension(),
            oldGlobalAttributes.GroupStorageDimension))
        {
            if (attributesGlobalLookup.GroupStorageDimension)
            {
                retailProductPropertyManager.parmGroupStorageDimension(attributesGlobalLookup.GroupStorageDimension);
            }
        }

        if (this.canOverride(
            attributesToUpdate.GroupTrackingDimension,
            retailProductPropertyManager.parmGroupTrackingDimension(),
            oldGlobalAttributes.GroupTrackingDimension))
        {
            if (attributesGlobalLookup.GroupTrackingDimension)
            {
                retailProductPropertyManager.parmGroupTrackingDimension(attributesGlobalLookup.GroupTrackingDimension);
            }
        }

        if (this.canOverride(
            attributesToUpdate.RetailPOSAllowNegativeQuantity,
            retailProductPropertyManager.parmPOSAllowNegativeQuantity(),
            oldLegalEntityAttributes.RetailPOSAllowNegativeQuantity))
        {
            retailProductPropertyManager.parmPOSAllowNegativeQuantity(attributesLegalEntityLookup.RetailPOSAllowNegativeQuantity);
        }

        if (this.canOverride(
            attributesToUpdate.RetailPOSDisallowDiscount,
            retailProductPropertyManager.parmPOSDisallowDiscount(),
            oldLegalEntityAttributes.RetailPOSDisallowDiscount))
        {
            retailProductPropertyManager.parmPOSDisallowDiscount(attributesLegalEntityLookup.RetailPOSDisallowDiscount);
        }

        if (this.canOverride(
            attributesToUpdate.RetailPOSDisallowManualDiscount,
            retailProductPropertyManager.parmPOSDisallowManualDiscount(),
            oldLegalEntityAttributes.RetailPOSDisallowManualDiscount))
        {
            retailProductPropertyManager.parmPOSDisallowManualDiscount(attributesLegalEntityLookup.RetailPOSDisallowManualDiscount);
        }

        if (this.canOverride(
            attributesToUpdate.RetailPOSIsScaleItem,
            retailProductPropertyManager.parmPOSIsScaleItem(),
            oldLegalEntityAttributes.RetailPOSIsScaleItem))
        {
            retailProductPropertyManager.parmPOSIsScaleItem(attributesLegalEntityLookup.RetailPOSIsScaleItem);
        }

        if (this.canOverride(
            attributesToUpdate.RetailDateToBeBlocked,
            retailProductPropertyManager.parmDateToBeBlocked(),
            oldLegalEntityAttributes.RetailDateToBeBlocked))
        {
            retailProductPropertyManager.parmDateToBeBlocked(attributesLegalEntityLookup.RetailDateToBeBlocked);
        }

        if (this.canOverride(
            attributesToUpdate.RetailDateBlocked,
            retailProductPropertyManager.parmDateBlocked(),
            oldLegalEntityAttributes.RetailDateBlocked))
        {
            retailProductPropertyManager.parmDateBlocked(attributesLegalEntityLookup.RetailDateBlocked);
        }

        if (this.canOverride(
            attributesToUpdate.RetailDateToActivateItem,
            retailProductPropertyManager.parmDateToActivateItem(),
            oldLegalEntityAttributes.RetailDateToActivateItem))
        {
            retailProductPropertyManager.parmDateToActivateItem(attributesLegalEntityLookup.RetailDateToActivateItem);
        }

        if (this.canOverride(
            attributesToUpdate.RetailBlockedAtRegister,
            retailProductPropertyManager.parmBlockedAtRegister(),
            oldLegalEntityAttributes.RetailBlockedAtRegister))
        {
            retailProductPropertyManager.parmBlockedAtRegister(attributesLegalEntityLookup.RetailBlockedAtRegister);
        }

        if (this.canOverride(
            attributesToUpdate.RetailPOSIsZeroPriceValid,
            retailProductPropertyManager.parmPOSIsZeroPriceValid(),
            oldLegalEntityAttributes.RetailPOSIsZeroPriceValid))
        {
            retailProductPropertyManager.parmPOSIsZeroPriceValid(attributesLegalEntityLookup.RetailPOSIsZeroPriceValid);
        }

        if (this.canOverride(
            attributesToUpdate.RetailPOSKeyingInPrice,
            retailProductPropertyManager.parmPOSKeyingInPrice(),
            oldLegalEntityAttributes.RetailPOSKeyingInPrice))
        {
            retailProductPropertyManager.parmPOSKeyingInPrice(attributesLegalEntityLookup.RetailPOSKeyingInPrice);
        }

        if (this.canOverride(
            attributesToUpdate.RetailPOSKeyingInQuantity,
            retailProductPropertyManager.parmPOSKeyingInQuantity(),
            oldLegalEntityAttributes.RetailPOSKeyingInQuantity))
        {
            retailProductPropertyManager.parmPOSKeyingInQuantity(attributesLegalEntityLookup.RetailPOSKeyingInQuantity);
        }

        if (this.canOverride(
            attributesToUpdate.RetailPOSMustKeyInComment,
            retailProductPropertyManager.parmPOSMustKeyInComment(),
            oldLegalEntityAttributes.RetailPOSMustKeyInComment))
        {
            retailProductPropertyManager.parmPOSMustKeyInComment(attributesLegalEntityLookup.RetailPOSMustKeyInComment);
        }

        // Others
        if (this.canOverride(
            attributesToUpdate.RetailPrintVariantsShelfLabels,
            retailProductPropertyManager.parmPrintVariantsShelfLabels(),
            oldLegalEntityAttributes.RetailPrintVariantsShelfLabels))
        {
            retailProductPropertyManager.parmPrintVariantsShelfLabels(attributesLegalEntityLookup.RetailPrintVariantsShelfLabels);
        }

        if (this.canOverride(
            attributesToUpdate.RetailSeasonCode,
            retailProductPropertyManager.parmSeasonCode(),
            oldLegalEntityAttributes.RetailSeasonCode))
        {
            retailProductPropertyManager.parmSeasonCode(attributesLegalEntityLookup.RetailSeasonCode);
        }

        if (this.canOverride(
            attributesToUpdate.RetailLifeFrom,
            retailProductPropertyManager.parmLifeFrom(),
            oldLegalEntityAttributes.RetailLifeFrom))
        {
            retailProductPropertyManager.parmLifeFrom(attributesLegalEntityLookup.RetailLifeFrom);
        }

        if (this.canOverride(
            attributesToUpdate.RetailLifeTo,
            retailProductPropertyManager.parmLifeTo(),
            oldLegalEntityAttributes.RetailLifeTo))
        {
            retailProductPropertyManager.parmLifeTo(attributesLegalEntityLookup.RetailLifeTo);
        }

        // <GEERU>
        if (isCountryRegionRU)
        {
            this.updateProduct_RU(retailProductPropertyManager, oldLegalEntityAttributes);
        }
        // </GEERU>

        if (attributesLegalEntityLookup)
        {
            if (this.canOverride(
                attributesToUpdate.BarcodeSetup,
                retailProductPropertyManager.parmBarcodeSetup(),
                oldLegalEntityAttributes.BarCodeSetup))
            {
                retailProductPropertyManager.parmBarcodeSetup(attributesLegalEntityLookup.BarCodeSetup);
            }

            if (this.canOverride(
                attributesToUpdate.GroupCounting,
                retailProductPropertyManager.parmGroupCounting(),
                oldLegalEntityAttributes.GroupCounting))
            {
                retailProductPropertyManager.parmGroupCounting(attributesLegalEntityLookup.GroupCounting);
            }

            if (this.canOverride(
                attributesToUpdate.GroupCoverage,
                retailProductPropertyManager.parmGroupCoverage(),
                oldLegalEntityAttributes.GroupCoverage))
            {
                retailProductPropertyManager.parmGroupCoverage(attributesLegalEntityLookup.GroupCoverage);
            }

            if (this.canOverride(
                attributesToUpdate.GroupInventoryModel,
                retailProductPropertyManager.parmGroupInventoryModel(),
                oldLegalEntityAttributes.GroupInventoryModel))
            {
                retailProductPropertyManager.parmGroupInventoryModel(attributesLegalEntityLookup.GroupInventoryModel);
            }

            if (this.canOverride(
                attributesToUpdate.GroupItemGroup,
                retailProductPropertyManager.parmGroupItemGroup(),
                oldLegalEntityAttributes.GroupItemGroup))
            {
                retailProductPropertyManager.parmGroupItemGroup(attributesLegalEntityLookup.GroupItemGroup);
            }

            if (this.canOverride(
                attributesToUpdate.ItemSalesTaxGroupPurch,
                retailProductPropertyManager.parmItemSalesTaxGroupPurch(),
                oldLegalEntityAttributes.ItemSalesTaxGroupPurch))
            {
                retailProductPropertyManager.parmItemSalesTaxGroupPurch(attributesLegalEntityLookup.ItemSalesTaxGroupPurch);
            }

            if (this.canOverride(
                attributesToUpdate.ItemSalesTaxGroupSales,
                retailProductPropertyManager.parmItemSalesTaxGroupSales(),
                oldLegalEntityAttributes.ItemSalesTaxGroupSales))
            {
                retailProductPropertyManager.parmItemSalesTaxGroupSales(attributesLegalEntityLookup.ItemSalesTaxGroupSales);
            }

            if (this.canOverride(
                attributesToUpdate.ReportItemLabel,
                retailProductPropertyManager.parmReportItemLabel(),
                oldLegalEntityAttributes.ReportItemLabel))
            {
                retailProductPropertyManager.parmReportItemLabel(attributesLegalEntityLookup.ReportItemLabel);
            }

            if (this.canOverride(
                attributesToUpdate.ReportShelfLabel,
                retailProductPropertyManager.parmReportShelfLabel(),
                oldLegalEntityAttributes.ReportShelfLabel))
            {
                retailProductPropertyManager.parmReportShelfLabel(attributesLegalEntityLookup.ReportShelfLabel);
            }

            if (this.canOverride(
                attributesToUpdate.UnitBaseComparison,
                retailProductPropertyManager.parmUnitBaseComparison(),
                unitBaseConversion.Symbol))
            {
                retailProductPropertyManager.parmUnitBaseComparison(unitBaseConversion.Symbol);
            }

            if (this.canOverride(
                attributesToUpdate.UnitBOM,
                retailProductPropertyManager.parmUnitBOM(),
                unitBOM.Symbol))
            {
                retailProductPropertyManager.parmUnitBOM(unitBOM.Symbol);
            }

            if (this.canOverride(
                attributesToUpdate.UnitInvent,
                retailProductPropertyManager.parmUnitInvent(),
                unitInvent.Symbol))
            {
                retailProductPropertyManager.parmUnitInvent(unitInvent.Symbol);
            }

            if (this.canOverride(
                attributesToUpdate.UnitPrice,
                retailProductPropertyManager.parmUnitPrice(),
                attributesLegalEntityLookup.UnitPrice))
            {
                retailProductPropertyManager.parmUnitPrice(attributesLegalEntityLookup.UnitPrice);
            }

            if (this.canOverride(
                attributesToUpdate.UnitPriceSales,
                retailProductPropertyManager.parmUnitPriceSales(),
                attributesLegalEntityLookup.UnitPriceSales))
            {
                retailProductPropertyManager.parmUnitPriceSales(attributesLegalEntityLookup.UnitPriceSales);
            }

            if (this.canOverride(
                attributesToUpdate.UnitSales,
                retailProductPropertyManager.parmUnitSales(),
                unitSales.Symbol))
            {
                retailProductPropertyManager.parmUnitSales(unitSales.Symbol);
            }

            if (this.canOverride(
                attributesToUpdate.UnitPurchase,
                retailProductPropertyManager.parmUnitPurchase(),
                unitPurchase.Symbol))
            {
                retailProductPropertyManager.parmUnitPurchase(unitPurchase.Symbol);
            }           

            // this property can not be identified if it was customized at the product level
            if (this.canOverride(
                attributesToUpdate.WarehouseInvent,
                retailProductPropertyManager.parmWarehouseInvent(),
                attributesLegalEntityLookup.WarehouseInvent))
            {
                retailProductPropertyManager.parmWarehouseInvent(attributesLegalEntityLookup.WarehouseInvent);
                siteAttributeRequired = true;
            }

            // this property can not be identified if it was customized at the product level
            if (this.canOverride(
                attributesToUpdate.WarehousePurch,
                retailProductPropertyManager.parmWarehousePurch(),
                attributesLegalEntityLookup.WarehousePurch))
            {
                retailProductPropertyManager.parmWarehousePurch(attributesLegalEntityLookup.WarehousePurch);
                siteAttributeRequired = true;
            }

            // this property can not be identified if it was customized at the product level
            if (this.canOverride(
                attributesToUpdate.WarehouseSales,
                retailProductPropertyManager.parmWarehouseSales(),
                attributesLegalEntityLookup.WarehouseSales))
            {
                retailProductPropertyManager.parmWarehouseSales(attributesLegalEntityLookup.WarehouseSales);
                siteAttributeRequired = true;
            }

            // this property can not be identified if it was customized at the product level
            // update this property if any warehouses are updated.
            if (this.canOverride(
                attributesToUpdate.SiteId,
                retailProductPropertyManager.parmSiteId(),
                attributesLegalEntityLookup.SiteId) || siteAttributeRequired)
            {
                retailProductPropertyManager.parmSiteId(attributesLegalEntityLookup.SiteId);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
            {
                if (this.canOverride(
                    attributesToUpdate.ReservationHierarchy,
                    retailProductPropertyManager.parmReservationHierarchy(),
                    oldLegalEntityAttributes.ReservationHierarchy))
                {
                    retailProductPropertyManager.parmReservationHierarchy(attributesLegalEntityLookup.ReservationHierarchy);
                }

                if (this.canOverride(
                    attributesToUpdate.UOMSeqGroupId,
                    retailProductPropertyManager.parmUOMSeqGroupId(),
                    oldLegalEntityAttributes.UOMSeqGroupId))
                {
                    retailProductPropertyManager.parmUOMSeqGroupId(attributesLegalEntityLookup.UOMSeqGroupId);
                }
            }

            if (this.canOverride(
                attributesToUpdate.PurchaseOverdeliveryPct,
                retailProductPropertyManager.parmPurchaseOverdeliveryPct(),
                oldLegalEntityAttributes.PurchaseOverdeliveryPct))
            {
                retailProductPropertyManager.parmPurchaseOverdeliveryPct(attributesLegalEntityLookup.PurchaseOverdeliveryPct);
            }

            if (this.canOverride(
                attributesToUpdate.PurchaseUnderdeliveryPct,
                retailProductPropertyManager.parmPurchaseUnderdeliveryPct(),
                oldLegalEntityAttributes.PurchaseUnderdeliveryPct))
            {
                retailProductPropertyManager.parmPurchaseUnderdeliveryPct(attributesLegalEntityLookup.PurchaseUnderdeliveryPct);
            }

            if (this.canOverride(
                attributesToUpdate.SalesOverdeliveryPct,
                retailProductPropertyManager.parmSalesOverdeliveryPct(),
                oldLegalEntityAttributes.SalesOverdeliveryPct))
            {
                retailProductPropertyManager.parmSalesOverdeliveryPct(attributesLegalEntityLookup.SalesOverdeliveryPct);
            }

            if (this.canOverride(
                attributesToUpdate.SalesUnderdeliveryPct,
                retailProductPropertyManager.parmSalesUnderdeliveryPct(),
                oldLegalEntityAttributes.SalesUnderdeliveryPct))
            {
                retailProductPropertyManager.parmSalesUnderdeliveryPct(attributesLegalEntityLookup.SalesUnderdeliveryPct);
            }

            if (this.canOverride(
                attributesToUpdate.InventoryOverdeliveryPct,
                retailProductPropertyManager.parmInventoryOverdeliveryPct(),
                oldLegalEntityAttributes.InventoryOverdeliveryPct))
            {
                retailProductPropertyManager.parmInventoryOverdeliveryPct(attributesLegalEntityLookup.InventoryOverdeliveryPct);
            }

            if (this.canOverride(
                attributesToUpdate.InventoryUnderdeliveryPct,
                retailProductPropertyManager.parmInventoryUnderdeliveryPct(),
                oldLegalEntityAttributes.InventoryUnderdeliveryPct))
            {
                retailProductPropertyManager.parmInventoryUnderdeliveryPct(attributesLegalEntityLookup.InventoryUnderdeliveryPct);
            }

            if (this.canOverride(
                attributesToUpdate.PurchModel,
                retailProductPropertyManager.parmItemPurchModel(),
                oldLegalEntityAttributes.PurchModel))
            {
                retailProductPropertyManager.parmItemPurchModel(attributesLegalEntityLookup.PurchModel);
            }

            if (this.canOverride(
                attributesToUpdate.CostModel,
                retailProductPropertyManager.parmItemCostModel(),
                oldLegalEntityAttributes.CostModel))
            {
                retailProductPropertyManager.parmItemCostModel(attributesLegalEntityLookup.CostModel);
            }

            if (this.canOverride(
                attributesToUpdate.ItemBuyerGroupId,
                retailProductPropertyManager.parmItemBuyerGroupId(),
                oldLegalEntityAttributes.ItemBuyerGroupId))
            {
                retailProductPropertyManager.parmItemBuyerGroupId(attributesLegalEntityLookup.ItemBuyerGroupId);
            }

            // Purchase
            if (this.canOverride(
                attributesToUpdate.PurchaseInterCompanyBlocked,
                retailProductPropertyManager.parmPurchaseInterCompanyBlocked(),
                oldLegalEntityAttributes.PurchaseInterCompanyBlocked))
            {
                retailProductPropertyManager.parmPurchaseInterCompanyBlocked(attributesLegalEntityLookup.PurchaseInterCompanyBlocked);
            }

            if (this.canOverride(
                attributesToUpdate.ItemPriceToleranceGroupId,
                retailProductPropertyManager.parmItemPriceToleranceGroupId(),
                oldLegalEntityAttributes.ItemPriceToleranceGroupId))
            {
                retailProductPropertyManager.parmItemPriceToleranceGroupId(attributesLegalEntityLookup.ItemPriceToleranceGroupId);
            }

            if (this.canOverride(
                attributesToUpdate.PrimaryVendorId,
                retailProductPropertyManager.parmPrimaryVendorId(),
                oldLegalEntityAttributes.PrimaryVendorId))
            {
                retailProductPropertyManager.parmPrimaryVendorId(attributesLegalEntityLookup.PrimaryVendorId);
            }

            if (this.canOverride(
                attributesToUpdate.PurchasePriceDate,
                retailProductPropertyManager.parmPurchasePriceDate(),
                oldLegalEntityAttributes.PurchasePriceDate))
            {
                retailProductPropertyManager.parmPurchasePriceDate(attributesLegalEntityLookup.PurchasePriceDate);
            }

            if (this.canOverride(
                attributesToUpdate.PurchasePrice,
                retailProductPropertyManager.parmPurchasePrice(),
                oldLegalEntityAttributes.PurchasePrice))
            {
                retailProductPropertyManager.parmPurchasePrice(attributesLegalEntityLookup.PurchasePrice);
            }

            if (this.canOverride(
                attributesToUpdate.PurchaseMarkup,
                retailProductPropertyManager.parmPurchaseMarkup(),
                oldLegalEntityAttributes.PurchaseMarkup))
            {
                retailProductPropertyManager.parmPurchaseMarkup(attributesLegalEntityLookup.PurchaseMarkup);
            }

            if (this.canOverride(
                attributesToUpdate.PurchasePriceQty,
                retailProductPropertyManager.parmPurchasePriceQty(),
                oldLegalEntityAttributes.PurchasePriceQty))
            {
                retailProductPropertyManager.parmPurchasePriceQty(attributesLegalEntityLookup.PurchasePriceQty);
            }

            if (this.canOverride(
                attributesToUpdate.PurchaseMarkupGroupId,
                retailProductPropertyManager.parmPurchaseMarkupGroupId(),
                oldLegalEntityAttributes.PurchaseMarkupGroupId))
            {
                retailProductPropertyManager.parmPurchaseMarkupGroupId(attributesLegalEntityLookup.PurchaseMarkupGroupId);
            }

            if (this.canOverride(
                attributesToUpdate.PurchaseAllocateMarkup,
                retailProductPropertyManager.parmPurchaseAllocateMarkup(),
                oldLegalEntityAttributes.PurchaseAllocateMarkup))
            {
                retailProductPropertyManager.parmPurchaseAllocateMarkup(attributesLegalEntityLookup.PurchaseAllocateMarkup);
            }

            if (this.canOverride(
                attributesToUpdate.PurchaseLineDisc,
                retailProductPropertyManager.parmPurchaseLineDisc(),
                oldLegalEntityAttributes.PurchaseLineDisc))
            {
                retailProductPropertyManager.parmPurchaseLineDisc(attributesLegalEntityLookup.PurchaseLineDisc);
            }

            if (this.canOverride(
                attributesToUpdate.PurchaseMultiLineDisc,
                retailProductPropertyManager.parmPurchaseMultiLineDisc(),
                oldLegalEntityAttributes.PurchaseMultiLineDisc))
            {
                retailProductPropertyManager.parmPurchaseMultiLineDisc(attributesLegalEntityLookup.PurchaseMultiLineDisc);
            }

            if (this.canOverride(
                attributesToUpdate.PurchaseEndDisc,
                retailProductPropertyManager.parmPurchaseEndDisc(),
                oldLegalEntityAttributes.PurchaseEndDisc))
            {
                retailProductPropertyManager.parmPurchaseEndDisc(attributesLegalEntityLookup.PurchaseEndDisc);
            }

            if (this.canOverride(
                attributesToUpdate.PurchaseSuppItemGroupId,
                retailProductPropertyManager.parmPurchaseSuppItemGroupId(),
                oldLegalEntityAttributes.PurchaseSuppItemGroupId))
            {
                retailProductPropertyManager.parmPurchaseSuppItemGroupId(attributesLegalEntityLookup.PurchaseSuppItemGroupId);
            }

            if (this.canOverride(
                attributesToUpdate.ItemBuyerGroupId,
                retailProductPropertyManager.parmItemBuyerGroupId(),
                oldLegalEntityAttributes.ItemBuyerGroupId))
            {
                retailProductPropertyManager.parmItemBuyerGroupId(attributesLegalEntityLookup.ItemBuyerGroupId);
            }

            if (this.canOverride(
                attributesToUpdate.PurchasePDSPricingPrecision,
                retailProductPropertyManager.parmPurchasePDSPricingPrecision(),
                oldLegalEntityAttributes.PurchasePDSPricingPrecision))
            {
                retailProductPropertyManager.parmPurchasePDSPricingPrecision(attributesLegalEntityLookup.PurchasePDSPricingPrecision);
            }

            if (this.canOverride(
                attributesToUpdate.PdsVendorCheckItem,
                retailProductPropertyManager.parmPdsVendorCheckItem(),
                oldLegalEntityAttributes.PdsVendorCheckItem))
            {
                retailProductPropertyManager.parmPdsVendorCheckItem(attributesLegalEntityLookup.PdsVendorCheckItem);
            }

            // purchase MCR
            if (this.canOverride(
                attributesToUpdate.ItemVendRebateGroupId,
                retailProductPropertyManager.parmItemVendRebateGroupId(),
                oldLegalEntityAttributes.ItemVendRebateGroupId))
            {
                retailProductPropertyManager.parmItemVendRebateGroupId(attributesLegalEntityLookup.ItemVendRebateGroupId);
            }

            // Sales
            if (this.canOverride(
                attributesToUpdate.SalesInterCompanyBlocked,
                retailProductPropertyManager.parmSalesInterCompanyBlocked(),
                oldLegalEntityAttributes.SalesInterCompanyBlocked))
            {
                retailProductPropertyManager.parmSalesInterCompanyBlocked(attributesLegalEntityLookup.SalesInterCompanyBlocked);
            }

            if (this.canOverride(
                attributesToUpdate.SalesCommisionGroupId,
                retailProductPropertyManager.parmSalesCommisionGroupId(),
                oldLegalEntityAttributes.SalesCommisionGroupId))
            {
                retailProductPropertyManager.parmSalesCommisionGroupId(attributesLegalEntityLookup.SalesCommisionGroupId);
            }

            if (this.canOverride(
                attributesToUpdate.SalesPriceModel,
                retailProductPropertyManager.parmSalesPriceModel(),
                oldLegalEntityAttributes.SalesPriceModel))
            {
                retailProductPropertyManager.parmSalesPriceModel(attributesLegalEntityLookup.SalesPriceModel);
            }

            if (this.canOverride(
                attributesToUpdate.SalesBasePriceModel,
                retailProductPropertyManager.parmSalesBasePriceModel(),
                oldLegalEntityAttributes.SalesBasePriceModel))
            {
                retailProductPropertyManager.parmSalesBasePriceModel(attributesLegalEntityLookup.SalesBasePriceModel);
            }

            if (this.canOverride(
                attributesToUpdate.SalesContributionRatio,
                retailProductPropertyManager.parmSalesContributionRatio(),
                oldLegalEntityAttributes.SalesContributionRatio))
            {
                retailProductPropertyManager.parmSalesContributionRatio(attributesLegalEntityLookup.SalesContributionRatio);
            }

            if (this.canOverride(
                attributesToUpdate.SalesPercentMarkup,
                retailProductPropertyManager.parmSalesPercentMarkup(),
                oldLegalEntityAttributes.SalesPercentMarkup))
            {
                retailProductPropertyManager.parmSalesPercentMarkup(attributesLegalEntityLookup.SalesPercentMarkup);
            }

            if (this.canOverride(
                attributesToUpdate.SalesPriceDate,
                retailProductPropertyManager.parmSalesPriceDate(),
                oldLegalEntityAttributes.SalesPriceDate))
            {
                retailProductPropertyManager.parmSalesPriceDate(attributesLegalEntityLookup.SalesPriceDate);
            }

            if (this.canOverride(
                attributesToUpdate.SalesPrice,
                retailProductPropertyManager.parmSalesPrice(),
                oldLegalEntityAttributes.SalesPrice))
            {
                retailProductPropertyManager.parmSalesPrice(attributesLegalEntityLookup.SalesPrice);
            }

            if (this.canOverride(
                attributesToUpdate.SalesPriceMarkup,
                retailProductPropertyManager.parmSalesPriceMarkup(),
                oldLegalEntityAttributes.SalesPriceMarkup))
            {
                retailProductPropertyManager.parmSalesPriceMarkup(attributesLegalEntityLookup.SalesPriceMarkup);
            }

            if (this.canOverride(
                attributesToUpdate.SalesPriceMarkupQuantity,
                retailProductPropertyManager.parmSalesPriceMarkupQuantity(),
                oldLegalEntityAttributes.SalesPriceMarkupQuantity))
            {
                retailProductPropertyManager.parmSalesPriceMarkupQuantity(attributesLegalEntityLookup.SalesPriceMarkupQuantity);
            }

            if (this.canOverride(
                attributesToUpdate.SalesMarkupGroupId,
                retailProductPropertyManager.parmSalesMarkupGroupId(),
                oldLegalEntityAttributes.SalesMarkupGroupId))
            {
                retailProductPropertyManager.parmSalesMarkupGroupId(attributesLegalEntityLookup.SalesMarkupGroupId);
            }

            if (this.canOverride(
                attributesToUpdate.SalesAllocateMarkup,
                retailProductPropertyManager.parmSalesAllocateMarkup(),
                oldLegalEntityAttributes.SalesAllocateMarkup))
            {
                retailProductPropertyManager.parmSalesAllocateMarkup(attributesLegalEntityLookup.SalesAllocateMarkup);
            }

            if (this.canOverride(
                attributesToUpdate.SalesLineDiscount,
                retailProductPropertyManager.parmSalesLineDiscount(),
                oldLegalEntityAttributes.SalesLineDiscount))
            {
                retailProductPropertyManager.parmSalesLineDiscount(attributesLegalEntityLookup.SalesLineDiscount);
            }

            if (this.canOverride(
                attributesToUpdate.SalesMultiLineDiscount,
                retailProductPropertyManager.parmSalesMultiLineDiscount(),
                oldLegalEntityAttributes.SalesMultiLineDiscount))
            {
                retailProductPropertyManager.parmSalesMultiLineDiscount(attributesLegalEntityLookup.SalesMultiLineDiscount);
            }

            if (this.canOverride(
                attributesToUpdate.SalesTotalDiscount,
                retailProductPropertyManager.parmSalesTotalDiscount(),
                oldLegalEntityAttributes.SalesTotalDiscount))
            {
                retailProductPropertyManager.parmSalesTotalDiscount(attributesLegalEntityLookup.SalesTotalDiscount);
            }

            if (this.canOverride(
                attributesToUpdate.SalesSuppItemGroupId,
                retailProductPropertyManager.parmSalesSuppItemGroupId(),
                oldLegalEntityAttributes.SalesSuppItemGroupId))
            {
                retailProductPropertyManager.parmSalesSuppItemGroupId(attributesLegalEntityLookup.SalesSuppItemGroupId);
            }

            if (this.canOverride(
                attributesToUpdate.SalesUseAltItemId,
                retailProductPropertyManager.parmSalesUseAltItemId(),
                oldLegalEntityAttributes.SalesUseAltItemId))
            {
                retailProductPropertyManager.parmSalesUseAltItemId(attributesLegalEntityLookup.SalesUseAltItemId);
            }

            if (this.canOverride(
                attributesToUpdate.SalesAltItemId,
                retailProductPropertyManager.parmSalesAltItemId(),
                oldLegalEntityAttributes.SalesAltItemId))
            {
                retailProductPropertyManager.parmSalesAltItemId(attributesLegalEntityLookup.SalesAltItemId);
                retailProductPropertyManager.parmSalesAltConfigId(attributesLegalEntityLookup.SalesAltConfigId);
                retailProductPropertyManager.parmSalesAltInventSizeId(attributesLegalEntityLookup.SalesAltInventSizeId);
                retailProductPropertyManager.parmSalesAltInventColorId(attributesLegalEntityLookup.SalesAltInventColorId);
                retailProductPropertyManager.parmSalesAltInventStyleId(attributesLegalEntityLookup.SalesAltInventStyleId);
                retailProductPropertyManager.parmSalesAltInventVersionId(attributesLegalEntityLookup.SalesAltInventVersionId);
            }

            if (this.canOverride(
                attributesToUpdate.SalesPDSPricingPrecision,
                retailProductPropertyManager.parmSalesPDSPricingPrecision(),
                oldLegalEntityAttributes.SalesPDSPricingPrecision))
            {
                retailProductPropertyManager.parmSalesPDSPricingPrecision(attributesLegalEntityLookup.SalesPDSPricingPrecision);
            }

            if (this.canOverride(
                attributesToUpdate.SalesPdsItemRebateGroupId,
                retailProductPropertyManager.parmSalesPdsItemRebateGroupId(),
                oldLegalEntityAttributes.SalesPdsItemRebateGroupId))
            {
                retailProductPropertyManager.parmSalesPdsItemRebateGroupId(attributesLegalEntityLookup.SalesPdsItemRebateGroupId);
            }

            if (this.canOverride(
                attributesToUpdate.SalesPdsFreightAllocationGroupId,
                retailProductPropertyManager.parmSalesPdsFreightAllocationGroupId(),
                oldLegalEntityAttributes.SalesPdsFreightAllocationGroupId))
            {
                retailProductPropertyManager.parmSalesPdsFreightAllocationGroupId(attributesLegalEntityLookup.SalesPdsFreightAllocationGroupId);
            }

            // sales MCR
            if (this.canOverride(
                attributesToUpdate.SalesAllowPriceAdjust,
                retailProductPropertyManager.parmSalesAllowPriceAdjust(),
                oldLegalEntityAttributes.SalesAllowPriceAdjust))
            {
                retailProductPropertyManager.parmSalesAllowPriceAdjust(attributesLegalEntityLookup.SalesAllowPriceAdjust);
            }

            if (this.canOverride(
                attributesToUpdate.SalesInstallmentEligible,
                retailProductPropertyManager.parmSalesInstallmentEligible(),
                oldLegalEntityAttributes.SalesInstallmentEligible))
            {
                retailProductPropertyManager.parmSalesInstallmentEligible(attributesLegalEntityLookup.SalesInstallmentEligible);
            }

            if (this.canOverride(
                attributesToUpdate.SalesFTCExempt,
                retailProductPropertyManager.parmSalesFTCExempt(),
                oldLegalEntityAttributes.SalesFTCExempt))
            {
                retailProductPropertyManager.parmSalesFTCExempt(attributesLegalEntityLookup.SalesFTCExempt);
            }

            if (this.canOverride(
                attributesToUpdate.SalesContinuityScheduleId,
                retailProductPropertyManager.parmSalesContinuityScheduleId(),
                oldLegalEntityAttributes.SalesContinuityScheduleId))
            {
                retailProductPropertyManager.parmSalesContinuityScheduleId(attributesLegalEntityLookup.SalesContinuityScheduleId);
            }

            if (this.canOverride(
                attributesToUpdate.SalesStartDate,
                retailProductPropertyManager.parmSalesStartDate(),
                oldLegalEntityAttributes.SalesStartDate))
            {
                retailProductPropertyManager.parmSalesStartDate(attributesLegalEntityLookup.SalesStartDate);
            }

            if (this.canOverride(
                attributesToUpdate.SalesEndDate,
                retailProductPropertyManager.parmSalesEndDate(),
                oldLegalEntityAttributes.SalesEndDate))
            {
                retailProductPropertyManager.parmSalesEndDate(attributesLegalEntityLookup.SalesEndDate);
            }

            if (this.canOverride(
                attributesToUpdate.SalesRetailInventoryAvailabilityBuffer,
                retailProductPropertyManager.parmSalesRetailInventoryAvailabilityBuffer(),
                oldLegalEntityAttributes.SalesRetailInventoryAvailabilityBuffer))
            {
                retailProductPropertyManager.parmSalesRetailInventoryAvailabilityBuffer(attributesLegalEntityLookup.SalesRetailInventoryAvailabilityBuffer);
            }

            if (this.canOverride(
                attributesToUpdate.SalesRetailInventoryAvailabilityLevelProfile,
                retailProductPropertyManager.parmSalesRetailInventoryAvailabilityLevelProfile(),
                oldLegalEntityAttributes.SalesRetailInventoryAvailabilityLevelProfile))
            {
                retailProductPropertyManager.parmSalesRetailInventoryAvailabilityLevelProfile(attributesLegalEntityLookup.SalesRetailInventoryAvailabilityLevelProfile);
            }

            // Inventory
            if (this.canOverride(
                attributesToUpdate.NetWeight,
                retailProductPropertyManager.parmNetWeight(),
                oldLegalEntityAttributes.NetWeight))
            {
                retailProductPropertyManager.parmNetWeight(attributesLegalEntityLookup.NetWeight);
            }

            if (this.canOverride(
                attributesToUpdate.TaraWeight,
                retailProductPropertyManager.parmTaraWeight(),
                oldLegalEntityAttributes.TaraWeight))
            {
                retailProductPropertyManager.parmTaraWeight(attributesLegalEntityLookup.TaraWeight);
            }

            if (this.canOverride(
                attributesToUpdate.GrossDepth,
                retailProductPropertyManager.parmGrossDepth(),
                oldLegalEntityAttributes.GrossDepth))
            {
                retailProductPropertyManager.parmGrossDepth(attributesLegalEntityLookup.GrossDepth);
            }

            if (this.canOverride(
                attributesToUpdate.GrossWidth,
                retailProductPropertyManager.parmGrossWidth(),
                oldLegalEntityAttributes.GrossWidth))
            {
                retailProductPropertyManager.parmGrossWidth(attributesLegalEntityLookup.GrossWidth);
            }

            if (this.canOverride(
                attributesToUpdate.GrossHeight,
                retailProductPropertyManager.parmGrossHeight(),
                oldLegalEntityAttributes.GrossHeight))
            {
                retailProductPropertyManager.parmGrossHeight(attributesLegalEntityLookup.GrossHeight);
            }

            if (this.canOverride(
                attributesToUpdate.UnitVolume,
                retailProductPropertyManager.parmUnitVolume(),
                oldLegalEntityAttributes.UnitVolume))
            {
                retailProductPropertyManager.parmUnitVolume(attributesLegalEntityLookup.UnitVolume);
            }

            if (this.canOverride(
                attributesToUpdate.BatchNumGroupId,
                retailProductPropertyManager.parmBatchNumGroupId(),
                oldLegalEntityAttributes.BatchNumGroupId))
            {
                retailProductPropertyManager.parmBatchNumGroupId(attributesLegalEntityLookup.BatchNumGroupId);
            }

            if (this.canOverride(
                attributesToUpdate.SerialNumGroupId,
                retailProductPropertyManager.parmSerialNumGroupId(),
                oldLegalEntityAttributes.SerialNumGroupId))
            {
                retailProductPropertyManager.parmSerialNumGroupId(attributesLegalEntityLookup.SerialNumGroupId);
            }

            if (this.canOverride(
                attributesToUpdate.WMSArrivalHandlingTime,
                retailProductPropertyManager.parmWMSArrivalHandlingTime(),
                oldLegalEntityAttributes.WMSArrivalHandlingTime))
            {
                retailProductPropertyManager.parmWMSArrivalHandlingTime(attributesLegalEntityLookup.WMSArrivalHandlingTime);
            }

            if (this.canOverride(
                attributesToUpdate.PdsVendorCheckItem,
                retailProductPropertyManager.parmPdsVendorCheckItem(),
                oldLegalEntityAttributes.PdsVendorCheckItem))
            {
                retailProductPropertyManager.parmPdsVendorCheckItem(attributesLegalEntityLookup.PdsVendorCheckItem);
            }

            if (this.canOverride(
                attributesToUpdate.SortCode,
                retailProductPropertyManager.parmSortCode(),
                oldLegalEntityAttributes.SortCode))
            {
                retailProductPropertyManager.parmSortCode(attributesLegalEntityLookup.SortCode);
            }

            if (this.canOverride(
                attributesToUpdate.PackagingGroupId,
                retailProductPropertyManager.parmPackagingGroupId(),
                oldLegalEntityAttributes.PackagingGroupId))
            {
                retailProductPropertyManager.parmPackagingGroupId(attributesLegalEntityLookup.PackagingGroupId);
            }

            if (this.canOverride(
                attributesToUpdate.TaxPackagingQty,
                retailProductPropertyManager.parmTaxPackagingQty(),
                oldLegalEntityAttributes.TaxPackagingQty))
            {
                retailProductPropertyManager.parmTaxPackagingQty(attributesLegalEntityLookup.TaxPackagingQty);
            }

            // Cost
            if (this.canOverride(
                attributesToUpdate.CostGroupId,
                retailProductPropertyManager.parmCostGroupId(),
                oldLegalEntityAttributes.CostGroupId))
            {
                retailProductPropertyManager.parmCostGroupId(attributesLegalEntityLookup.CostGroupId);
            }

            if (this.canOverride(
                attributesToUpdate.InventoryPriceDate,
                retailProductPropertyManager.parmInventoryPriceDate(),
                oldLegalEntityAttributes.InventoryPriceDate))
            {
                retailProductPropertyManager.parmInventoryPriceDate(attributesLegalEntityLookup.InventoryPriceDate);
            }

            if (this.canOverride(
                attributesToUpdate.InventoryPrice,
                retailProductPropertyManager.parmInventoryPrice(),
                oldLegalEntityAttributes.InventoryPrice))
            {
                retailProductPropertyManager.parmInventoryPrice(attributesLegalEntityLookup.InventoryPrice);
            }

            if (this.canOverride(
                attributesToUpdate.InventoryPriceUnit,
                retailProductPropertyManager.parmInventoryPriceUnit(),
                oldLegalEntityAttributes.InventoryPriceUnit))
            {
                retailProductPropertyManager.parmInventoryPriceUnit(attributesLegalEntityLookup.InventoryPriceUnit);
            }

            if (this.canOverride(
                attributesToUpdate.InventoryMarkup,
                retailProductPropertyManager.parmInventoryMarkup(),
                oldLegalEntityAttributes.InventoryMarkup))
            {
                retailProductPropertyManager.parmInventoryMarkup(attributesLegalEntityLookup.InventoryMarkup);
            }

            if (this.canOverride(
                attributesToUpdate.InventoryPriceQty,
                retailProductPropertyManager.parmInventoryPriceQty(),
                oldLegalEntityAttributes.InventoryPriceQty))
            {
                retailProductPropertyManager.parmInventoryPriceQty(attributesLegalEntityLookup.InventoryPriceQty);
            }

            if (this.canOverride(
                attributesToUpdate.InventoryAllocateMarkup,
                retailProductPropertyManager.parmInventoryAllocateMarkup(),
                oldLegalEntityAttributes.InventoryAllocateMarkup))
            {
                retailProductPropertyManager.parmInventoryAllocateMarkup(attributesLegalEntityLookup.InventoryAllocateMarkup);
            }

            if (this.canOverride(
                attributesToUpdate.ABCValue,
                retailProductPropertyManager.parmABCValue(),
                oldLegalEntityAttributes.ABCValue))
            {
                retailProductPropertyManager.parmABCValue(attributesLegalEntityLookup.ABCValue);
            }

            if (this.canOverride(
                attributesToUpdate.ABCContributionMargin,
                retailProductPropertyManager.parmABCContributionMargin(),
                oldLegalEntityAttributes.ABCContributionMargin))
            {
                retailProductPropertyManager.parmABCContributionMargin(attributesLegalEntityLookup.ABCContributionMargin);
            }

            if (this.canOverride(
                attributesToUpdate.ABCRevenue,
                retailProductPropertyManager.parmABCRevenue(),
                oldLegalEntityAttributes.ABCRevenue))
            {
                retailProductPropertyManager.parmABCRevenue(attributesLegalEntityLookup.ABCRevenue);
            }

            if (this.canOverride(
                attributesToUpdate.ABCTieUp,
                retailProductPropertyManager.parmABCTieUp(),
                oldLegalEntityAttributes.ABCTieUp))
            {
                retailProductPropertyManager.parmABCTieUp(attributesLegalEntityLookup.ABCTieUp);
            }

            // <GBR>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]))
            {
                this.UpdateProduct_BR(retailProductPropertyManager);
            }
            // </GBR>

            //<GEERU>
            if (isCountryRegionRU)
            {
                this.updateProductLabelAttributes(retailProductPropertyManager, oldLegalEntityAttributes);
            }
            //</GEERU>
        }

        return retailProductPropertyManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveProductProperties</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    private void saveProductProperties(RetailProductPropertyManager _retailProductPropertyManager, RefRecId _categoryId, EcoResProduct _product, LegalEntity _legalEntity)
    {
        try
        {
            // If infocode property is checked copy category info code to related products
            if (attributesToUpdate.InfoCode)
            {
                this.copyCategoryInfoCodesToProduct(_categoryId, InventTable::findByProduct(_product.RecId).ItemId,
                            _legalEntity, overrideProductProperties);
            }

            _retailProductPropertyManager.saveRetailProductProperties();
        }
        catch
        {
            // don't do anything; continue the update, proper messages were presented to the user;
            Global::exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateProduct_BR</Name>
				<Source><![CDATA[
    private void UpdateProduct_BR(RetailProductPropertyManager retailProductPropertyManager)
    {
        if (this.canOverride(
            attributesToUpdate.InventProductType_BR,
            retailProductPropertyManager.parmInventProductType_BR(),
            attributesLegalEntityLookup.InventProductType_BR))
        {
            retailProductPropertyManager.parmInventProductType_BR(attributesLegalEntityLookup.InventProductType_BR);
        }

        if (InventTable::findByProduct(retailProductPropertyManager.parmEcoResProduct().RecId).ItemType == ItemType::Service)
        {
            if (this.canOverride(
                attributesToUpdate.ICMSonService_BR,
                retailProductPropertyManager.parmICMSonService_BR(),
                attributesLegalEntityLookup.ICMSonService_BR))
            {
                retailProductPropertyManager.parmICMSonService_BR(attributesLegalEntityLookup.ICMSonService_BR);
            }

            if (this.canOverride(
                attributesToUpdate.TaxServiceCode_BR,
                retailProductPropertyManager.parmTaxServiceCode_BR(),
                attributesLegalEntityLookup.TaxServiceCode_BR))
            {
                retailProductPropertyManager.parmTaxServiceCode_BR(attributesLegalEntityLookup.TaxServiceCode_BR);
            }
        }
        else
        {
            if (this.canOverride(
                attributesToUpdate.ExceptionCode_BR,
                retailProductPropertyManager.parmExceptionCode_BR(),
                attributesLegalEntityLookup.ExceptionCode_BR))
            {
                retailProductPropertyManager.parmExceptionCode_BR(attributesLegalEntityLookup.ExceptionCode_BR);
            }

            if (this.canOverride(
                attributesToUpdate.TaxationOrigin_BR,
                retailProductPropertyManager.parmTaxationOrigin_BR(),
                attributesLegalEntityLookup.TaxationOrigin_BR))
            {
                retailProductPropertyManager.parmTaxationOrigin_BR(attributesLegalEntityLookup.TaxationOrigin_BR);
            }

            if (this.canOverride(
                attributesToUpdate.TaxFiscalClassification_BR,
                retailProductPropertyManager.parmTaxFiscalClassification_BR(),
                attributesLegalEntityLookup.TaxFiscalClassification_BR))
            {
                retailProductPropertyManager.parmTaxFiscalClassification_BR(attributesLegalEntityLookup.TaxFiscalClassification_BR);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProduct_RU</Name>
				<Source><![CDATA[
    private void updateProduct_RU(RetailProductPropertyManager retailProductPropertyManager, RetailAttributesLegalEntityLookup oldLegalEntityAttributes)
    {
        if (this.canOverride(
            attributesToUpdate.RetailProhibitReturn_RU,
            retailProductPropertyManager.parmProhibitReturn_RU(),
            oldLegalEntityAttributes.RetailProhibitReturn_RU))
        {
            retailProductPropertyManager.parmProhibitReturn_RU(attributesLegalEntityLookup.RetailProhibitReturn_RU);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductMasterProperties</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    private RetailProductPropertyManager initProductMasterProperties(RefRecId _categoryId, EcoResProduct _product, LegalEntity _legalEntity)
    {
        RetailAttributesGlobalLookup oldGlobalAttributes;
        RetailProductPropertyManager retailProductPropertyManager = RetailProductPropertyManager::retrieveExisting(_product, _legalEntity);

        if (oldAttributes)
        {
            oldGlobalAttributes = oldAttributes.getOriginalRetailAttributesGlobal();
        }

        attributesGlobalLookup = RetailAttributesGlobalLookup::findByCategory(_categoryId, false);

        if (this.canOverride(
            attributesToUpdate.VariantColorGroup,
            retailProductPropertyManager.parmVariantColorGroup(),
            oldGlobalAttributes.VariantColorGroup))
        {
            retailProductPropertyManager.parmVariantColorGroup(attributesGlobalLookup.VariantColorGroup);
        }

        if (this.canOverride(
            attributesToUpdate.VariantSizeGroup,
            retailProductPropertyManager.parmVariantSizeGroup(),
            oldGlobalAttributes.VariantSizeGroup))
        {
            retailProductPropertyManager.parmVariantSizeGroup(attributesGlobalLookup.VariantSizeGroup);
        }

        if (this.canOverride(
            attributesToUpdate.VariantStyleGroup,
            retailProductPropertyManager.parmVariantStyleGroup(),
            oldGlobalAttributes.VariantStyleGroup))
        {
            retailProductPropertyManager.parmVariantStyleGroup(attributesGlobalLookup.VariantStyleGroup);
        }

        return retailProductPropertyManager;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveProductMasterProperties</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    private void saveProductMasterProperties(RetailProductPropertyManager retailProductPropertyManager)
    {
        try
        {
            retailProductPropertyManager.saveProductVariantGroups();
        }
        catch
        {
            // don't do anything; continue the update, proper messages were presented to the user;
            Global::exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductsInCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Will update the products in the specified category.
    /// </summary>
    /// <remarks>
    /// Be sure that you set the right parameters exposed as class properties.
    /// This function is expected to be called in category mode. In this case the EntityId will be the category id.
    /// </remarks>
    public void updateProductsInCategory()
    {
        Query productsQuery;
        QueryRun executionQuery;
        EcoResProduct retrievedProduct;
        int numberOfProductsUpdated;
        int numberOfProductsToUpdate;
        #Macrolib.AviFiles

        if (productUpdateParameters.parmEntityType() != RetailProductUpdateMode::Category)
        {
            // wrong use of function
            error("@SYS104799");
        }

        attributesToUpdate = RetailProductAttributesToUpdate::findByEntityTypeAndId(
            productUpdateParameters.parmEntityType(),
            productUpdateParameters.parmEntityId());

        if ((!attributesToUpdate) || (!attributesToUpdate.isAnythingSet()))
        {
            eventSource.EventWriteProductsGenericMessage(classId2Name(ClassIdGet(this)), funcName(), 'No attributes to update.');
            info("@RET2353");
            return;
        }

        oldAttributes = productUpdateParameters.parmOldCategoryAttributes();

        numberOfProductsUpdated = 0;

        productsQuery = RetailGroupMemberLineQueryProvider::containedProductsQuery(productUpdateParameters.parmEntityId(), includeSubCategories);
        executionQuery = new QueryRun(productsQuery);
        numberOfProductsToUpdate = SysQuery::countLoops(executionQuery);

        if (showProgress)
        {
            sysOperationProgress = SysOperationProgress::newGeneral(#aviUpdate, "@RET6399", numberOfProductsToUpdate);
        }

        while (executionQuery.next())
        {
            retrievedProduct = executionQuery.get(tableNum(EcoResProduct));
            if (showProgress)
            {
                sysOperationProgress.setText(retrievedProduct.productName());
            }

            try
            {
                this.updateForLegalEntities(retrievedProduct);
                numberOfProductsUpdated ++;
            }
            catch(Exception::Error)
            {
                eventSource.EventWriteProductsUpdateCategoryWarning(classId2Name(ClassIdGet(this)), funcName(), retrievedProduct.RecId);
                warning(strFmt("@RET260057", retrievedProduct.DisplayProductNumber));
            }

            if (showProgress)
            {
                sysOperationProgress.incCount();
            }
        }

        RetailProductAttributesToUpdate::deleteByEntityTypeAndId(productUpdateParameters.parmEntityType(), productUpdateParameters.parmEntityId());

        eventSource.EventWriteProductsGenericMessageCount(classId2Name(ClassIdGet(this)), funcName(), 'products were updated', numberOfProductsUpdated);
        info(strFmt("@RET2754", numberOfProductsUpdated));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSingleProductFromCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the single product in the category.
    /// </summary>
    public void updateSingleProductFromCategory()
    {
        EcoResProduct retrievedProduct;

        if (productUpdateParameters.parmEntityType() != RetailProductUpdateMode::Product)
        {
            // wrong use of function
            error("@SYS104799");
        }

        attributesToUpdate = RetailProductAttributesToUpdate::findByEntityTypeAndId(
            productUpdateParameters.parmEntityType(),
            productUpdateParameters.parmEntityId());

        if ((!attributesToUpdate) || (!attributesToUpdate.isAnythingSet()))
        {
            eventSource.EventWriteProductsGenericMessage(classId2Name(ClassIdGet(this)), funcName(), 'No attributes to update.');
            info("@RET2353");
            return;
        }

        retrievedProduct = EcoResProduct::find(productUpdateParameters.parmEntityId());

        this.updateForLegalEntities(retrievedProduct);

        RetailProductAttributesToUpdate::deleteByEntityTypeAndId(productUpdateParameters.parmEntityType(), productUpdateParameters.parmEntityId());
        
        eventSource.EventWriteProductsRetailProductUpdaterUpdateProductDone(classId2Name(ClassIdGet(this)), funcName(), retrievedProduct.RecId);
        info(strFmt("@RET260330", retrievedProduct.DisplayProductNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailProductUpdater construct()
    {
        return new RetailProductUpdater();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductLabelAttributes</Name>
				<Source><![CDATA[
    private void updateProductLabelAttributes(RetailProductPropertyManager _retailProductPropertyManager, RetailAttributesLegalEntityLookup _oldLegalEntityAttributes)
    {
        if (this.canOverride(
            attributesToUpdate.LabelAttribute1,
            _retailProductPropertyManager.parmLabelAttribute1(),
            _oldLegalEntityAttributes.LabelAttribute1))
        {
            _retailProductPropertyManager.parmLabelAttribute1(attributesLegalEntityLookup.LabelAttribute1);
        }

        if (this.canOverride(
            attributesToUpdate.LabelAttribute2,
            _retailProductPropertyManager.parmLabelAttribute2(),
            _oldLegalEntityAttributes.LabelAttribute2))
        {
            _retailProductPropertyManager.parmLabelAttribute2(attributesLegalEntityLookup.LabelAttribute2);
        }

        if (this.canOverride(
            attributesToUpdate.LabelAttribute3,
            _retailProductPropertyManager.parmLabelAttribute3(),
            _oldLegalEntityAttributes.LabelAttribute3))
        {
            _retailProductPropertyManager.parmLabelAttribute3(attributesLegalEntityLookup.LabelAttribute3);
        }

        if (this.canOverride(
            attributesToUpdate.LabelAttribute4,
            _retailProductPropertyManager.parmLabelAttribute4(),
            _oldLegalEntityAttributes.LabelAttribute4))
        {
            _retailProductPropertyManager.parmLabelAttribute4(attributesLegalEntityLookup.LabelAttribute4);
        }

        if (this.canOverride(
            attributesToUpdate.LabelAttribute5,
            _retailProductPropertyManager.parmLabelAttribute5(),
            _oldLegalEntityAttributes.LabelAttribute5))
        {
            _retailProductPropertyManager.parmLabelAttribute5(attributesLegalEntityLookup.LabelAttribute5);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForLegalEntities</Name>
				<Source><![CDATA[
    [Hookable(true)]
    protected void updateForLegalEntities(EcoResProduct retrievedProduct)
    {
        CompanyInfo legalEntity;

        if (retrievedProduct.isProductMaster() && !retrievedProduct.isReleased())
        {
            RetailProductPropertyManager retailProductPropertyManager = this.initProductMasterProperties(productUpdateParameters.parmCategoryId(), retrievedProduct, CompanyInfo::current());

            this.saveProductMasterProperties(retailProductPropertyManager);
        }
        else
        {
            while select RecId, DataArea from legalEntity
            {
                changecompany(legalEntity.DataArea)
                {
                    RetailProductPropertyManager retailProductPropertyManager = this.initProductProperties(productUpdateParameters.parmCategoryId(), retrievedProduct, legalEntity.RecId);

                    if (retailProductPropertyManager != null)
                    {
                        this.saveProductProperties(retailProductPropertyManager, productUpdateParameters.parmCategoryId(), retrievedProduct, legalEntity.RecId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCategoryInfoCodesToReleasedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy category info codes(if any) to product getting released with respect to legal entity.
    /// </summary>
    /// <param name="_productId">
    /// RecId value for current product.
    /// </param>
    /// <param name="_legalEntity">
    /// RecId value of legal entity in which product is being released.
    /// </param>
    public void copyCategoryInfoCodesToReleasedProduct(RefRecId _productId, LegalEntity _legalEntity)
    {
        EcoResCategoryHierarchy ecoResCategoryHierarchy;
        RefRecId                categoryId;

        // Fetch category hierarchy record and category of product
        ecoResCategoryHierarchy = EcoResCategoryHierarchy::find(
        EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Retail).CategoryHierarchy);
        categoryId = EcoResProductCategory::findCategoryByProduct(_productId, ecoResCategoryHierarchy.RecId).RecId;

        // By default overrideProductProperties remains true
        this.CopyCategoryInfoCodesToProduct(categoryId, Inventtable::findByProduct(_productId).ItemId, _legalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCategoryInfoCodesToProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy category info codes to respective product.
    /// </summary>
    /// <param name="_categoryId">
    /// RecId value for current category.
    /// </param>
    /// <param name="_itemId">
    /// ItemID of an <c>EcoResProduct</c> record.
    /// </param>
    /// <param name="_legalEntity">
    /// RecId value of legal entity
    /// </param>
    /// <param name="_overrideProductProperties">
    /// Boolean value to override products attributes
    /// </param>
    private void copyCategoryInfoCodesToProduct(RefRecId _categoryId, ItemId _itemId, LegalEntity _legalEntity, boolean _overrideProductProperties = true)
    {
        RetailInfocodeTableSpecific     retailInfocodeTableProductSpecific;
        RetailInfocodeCategorySpecific  retailInfocodeCategorySpecific;
        SelectableDataArea              targetDataArea;
        RetailCategoryProductInfoCode   retailCategoryProductInfoCode;
        RetailInfocodeRefTableIdBase    refTableName = RetailInfocodeRefTableIdBase::RetailInventTable;

        if (_itemId != '')
        {
            targetDataArea = CompanyInfo::findRecId(_legalEntity).DataArea;

            changecompany(targetDataArea)
            {
                ttsBegin;

                EcoResCategory ecoResCategory = EcoResCategory::find(_categoryId);

                // Reset table buffers so as to using it across different companies
                retailInfocodeCategorySpecific = null;
                retailCategoryProductInfoCode = null;
                retailInfocodeTableProductSpecific = null;

                // Delete non-manual infocodes from product, if that infocode deleted from category
                delete_from retailInfocodeTableProductSpecific
                    where retailInfocodeTableProductSpecific.reftableId == RetailInfocodeRefTableIdBase::RetailInventTable &&
                        retailInfocodeTableProductSpecific.refRelation == _itemId
                    exists join retailCategoryProductInfoCode
                    where retailCategoryProductInfoCode.infocodeId  == retailInfocodeTableProductSpecific.infocodeId &&
                        retailCategoryProductInfoCode.itemId == retailInfocodeTableProductSpecific.refRelation &&
                        retailCategoryProductInfoCode.itemId == _itemId
                    notExists join infocodeId, CategoryHierarchy, CategoryName from retailInfocodeCategorySpecific
                        where retailInfocodeCategorySpecific.infocodeId == retailCategoryProductInfoCode.infocodeId &&
                            retailInfocodeCategorySpecific.CategoryHierarchy == ecoResCategory.CategoryHierarchy &&
                            retailInfocodeCategorySpecific.CategoryName == ecoResCategory.Name;

                // If override flag is true, update product's infocode attributes for overlapping infocodes with it its category.
                if (_overrideProductProperties)
                {
                    // Clear table buffers
                    retailInfocodeCategorySpecific.clear();
                    retailInfocodeTableProductSpecific.clear();

                    update_recordset retailInfocodeTableProductSpecific
                        setting
                            inputRequired = retailInfocodeCategorySpecific.inputRequired,
                            sequence = retailInfocodeCategorySpecific.Sequence,
                            whenRequired = retailInfocodeCategorySpecific.whenrequired
                        where retailInfocodeTableProductSpecific.refRelation  == _itemId &&
                                retailInfocodeTableProductSpecific.reftableId   == RetailInfocodeRefTableIdBase::RetailInventTable
                        join retailInfocodeCategorySpecific
                            where retailInfocodeCategorySpecific.CategoryHierarchy == ecoResCategory.CategoryHierarchy &&
                                retailInfocodeCategorySpecific.CategoryName == ecoResCategory.Name &&
                                retailInfocodeCategorySpecific.infocodeid == retailInfocodeTableProductSpecific.infocodeid;
                }

                // Clear table buffers
                retailInfocodeCategorySpecific.clear();
                retailCategoryProductInfoCode.clear();
                //retailInfocodeTableProductSpecific.clear();

                // For all such infocodes which are to be copied from category to product, create a record in mapping table [retailCategoryProductInfoCode]
                insert_recordset retailCategoryProductInfoCode(infocodeId, ItemId)
                select infocodeid, _itemId
                    from retailInfocodeCategorySpecific
                    where retailInfocodeCategorySpecific.CategoryHierarchy == ecoResCategory.CategoryHierarchy &&
                        retailInfocodeCategorySpecific.CategoryName == ecoResCategory.Name
                    notexists join retailCategoryProductInfoCode
                        where retailCategoryProductInfoCode.infocodeId == retailInfocodeCategorySpecific.infocodeId &&
                            retailCategoryProductInfoCode.itemId == _itemId;

                // Clear table buffers
                retailInfocodeCategorySpecific.clear();
                retailInfocodeTableProductSpecific.clear();

                // Copy all newly added category infocodes from category to product
                insert_recordset retailInfocodeTableProductSpecific(infocodeId, inputRequired,
                    refrelation, refTableId, Sequence, whenrequired)
                select infocodeid, inputRequired, _itemId, refTableName, Sequence, whenrequired
                    from retailInfocodeCategorySpecific
                    where retailInfocodeCategorySpecific.CategoryHierarchy == ecoResCategory.CategoryHierarchy &&
                        retailInfocodeCategorySpecific.CategoryName == ecoResCategory.Name
                    notExists join retailInfocodeTableProductSpecific
                        where retailInfocodeTableProductSpecific.infocodeid == retailInfocodeCategorySpecific.infocodeid &&
                            retailInfocodeTableProductSpecific.refRelation == _itemId &&
                            retailInfocodeTableProductSpecific.reftableId == RetailInfocodeRefTableIdBase::RetailInventTable;

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailProductUpdater</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailProductUpdater</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>