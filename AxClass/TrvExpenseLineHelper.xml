<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseLineHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for all expense line related methods.
/// </summary>
public static class TrvExpenseLineHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>attachToExpenseReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Attaches expense lines to an expense report.
    /// </summary>
    /// <param name = "_expenseNumber">
    ///     The expense number of the expense report to attach the expense lines to.
    /// </param>
    /// <param name = "_expenseLines">
    ///     List of all the expense lines that are to be attached.
    /// </param>
    /// <param name = "_skipSourceDocAndPolicies">
    ///     True if source document and policy evaluations can be skipped; otherwise, false. Optional.
    /// </param>
    /// <param name = "_callerForm">
    ///     The caller form where the async operations are performed. Optional.
    /// </param>
    /// <returns>
    ///     True if the attach succeeds and false if it fails. Expenses that can be attached will be attached,
    ///     false just means that there is at least one failed attachement.
    /// </returns>
    public static boolean attachToExpenseReport(TrvExpNumber _expenseNumber,
                                                List _expenseLines,
                                                boolean _skipSourceDocAndPolicies = false,
                                                TrvIAsyncEnabled _callerForm = null)
    {
        TrvParameters trvParameters = TrvParameters::find();
        boolean ret = true;

        ExpenseInstrumentationLogger logger = ExpenseInstrumentationLogger::createLogger('TrvExpenseLineHelper');
        ExpenseInstrumentationExpenseLineActivities expenseLineActivities = ExpenseInstrumentationExpenseLineActivities::construct(logger);

        if (_expenseLines.empty())
        {
            ret = checkFailed("@Expense:NoExpenseLineSelected");
        }

        TrvExpTable trvExpTable;

        if (_expenseNumber != "")
        {
            trvExpTable = TrvExpTable::find(_expenseNumber);

            if (!trvExpTable)
            {
                ret = checkFailed(strFmt("@SYS102079", _expenseNumber));
            }

            //
            // The expense report has to be in create mode
            // cannot add lines to a submitted expense report.
            //
            if (ret && trvExpTable.ApprovalStatus != TrvAppStatus::Create)
            {
                ret = checkFailed(strFmt("@Expense:UnableToTransferExpenseLinesDueToStatus", trvExpTable.ApprovalStatus));
            }
        }
        else
        {
            ret = checkFailed("@Expense:BlankExpenseReportNumberError");
        }

        if (ret)
        {
            using (var activityContext = expenseLineActivities.attachExpenseLineContext())
            {
                ListEnumerator listEnumerator = _expenseLines.getEnumerator();
                listEnumerator.reset();

                while (listEnumerator.moveNext())
                {
                    TrvExpTrans current = listEnumerator.current();
                    
                    TrvExpenseLineHelper::updateHeaderDetails(current.RecId, trvExpTable.RecId, _expenseNumber, _skipSourceDocAndPolicies, _callerForm);

                    if (TrvExpTrans::isChildLineExisting(current.RecId))
                    {
                        TrvExpTrans expTransChild;

                        while select RecId from expTransChild
                            where expTransChild.ParentRecId == current.RecId
                        {
                            TrvExpenseLineHelper::updateHeaderDetails(expTransChild.RecId, trvExpTable.RecId, _expenseNumber, _skipSourceDocAndPolicies, _callerForm);
                        }
                    }
                }

                if (_expenseNumber != "" && !_skipSourceDocAndPolicies)
                {
                    // Once all the lines are saved on the expense report, evaluate the policies for the header.
                    if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
                    {
                        TrvPolicyEvalEngine::evaluateViolationsForHdr(trvExpTable.RecId, SysPolicyTypeEnum::TrvExpensePolicy);

                        if (trvExpTable.ProjId)
                        {
                            trvExpTable.validateProjPolicies(false);
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSubmittedExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes the expenses that have been submitted from a list of expense lines
    /// </summary>
    /// <param name = "_expenseLines">
    ///     A <c>List</c> of <c>TrvExpTrans</c> records
    /// </param>
    /// <returns>
    ///     A list of expense lines that have never been submitted
    /// </returns>
    public static List removeSubmittedExpenses(List _expenseLines)
    {
        List filteredList = new List(Types::Record);

        ListEnumerator listEnumerator = _expenseLines.getEnumerator();
        listEnumerator.reset();

        while (listEnumerator.moveNext())
        {
            TrvExpTrans current = listEnumerator.current();
            TrvExpTrans trvExpTrans = TrvExpTrans::find(current.RecId, true);

            if (!current.isEditable(true, false) || current.ApprovalStatus != TrvAppStatus::Create)
            {
                warning(strFmt("@Expense:UnableToTransferExpenseLineDueToLineStatus",
                    current.CostType, current.TransDate, current.AmountMST, current.ApprovalStatus));
                continue;
            }

            filteredList.addEnd(current);
        }

        return filteredList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedExpensesForAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a list of expense line recIds based on the passed in datasource
    /// </summary>
    /// <param name = "_dataSource">
    ///     A <c>TrvExpTrans</c> datasource objects with multiple records selected
    /// </param>
    /// <returns>
    ///     A list of expense line recIds
    /// </returns>
    public static List getSelectedExpensesForAttachment(FormDataSource _dataSource)
    {
        if (_dataSource.table() != tableNum(TrvExpTrans))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        List list = new List(Types::Record);

        // User has already been prompted to verify whether attached lines should be moved to new report
        boolean hasPrompted = false;

        // User has selected to move attached selected lines to new report
        boolean includeAttachedLines = false;

        // Only include explicitly checked records for selection
        for (TrvExpTrans current = _dataSource.getFirst(1); current; current = _dataSource.getNext())
        {
            // Ask user if attached expense lines should be included the first time we see an already attached expense line
            if (!hasPrompted && current.ExpNumber)
            {
                DialogButton result = Box::yesNoCancel("@Expense:LinesAlreadyOnExpenseReportConfirmation", DialogButton::Yes);
                hasPrompted = true;

                if (result == DialogButton::Yes)
                {
                    includeAttachedLines = true;
                }
                else if (result == DialogButton::Cancel)
                {
                    return null;
                }
            }

            //
            // Add selected expense to the list if the expense is not already attached or a report
            // OR if the user has elected to include already attached lines
            //
            if (includeAttachedLines || !current.ExpNumber)
            {
                list.addEnd(current);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesTotalGiftAmtExceedLineAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates total amount from gift records present for an expense line, excluding the creating/modifying gift record.
    /// </summary>
    /// <param name = "_trvExpTransGuest"></param>
    /// <returns>
    /// True if total gift amount exceeds respective expense line; otherwise false.
    /// </returns>
    public static boolean doesTotalGiftAmtExceedLineAmt(TrvExpTransGuest	_trvExpTransGuest)
    {
        TrvExpTransGuest trvExpTransGuestAmt;

        select sum(AmountCurr) from trvExpTransGuestAmt
            where trvExpTransGuestAmt.TrvExpTrans == _trvExpTransGuest.TrvExpTrans
            && trvExpTransGuestAmt.RecId != _trvExpTransGuest.RecId;

        AmountCur totalGiftAmount = trvExpTransGuestAmt.AmountCurr + _trvExpTransGuest.AmountCurr;
        if (totalGiftAmount > TrvExpTrans::find(_trvExpTransGuest.TrvExpTrans).AmountCurr)
        {
            return checkFailed('@Expense:GiftAmountMoreThanExpenseAmount');
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHeaderDetails</Name>
				<Source><![CDATA[
    public static void updateHeaderDetails(RefRecId _expTransRecId, RefRecId _expTableRecId, TrvExpNumber _expenseNumber,
                                                boolean _skipSourceDocAndPolicies = false, TrvIAsyncEnabled _callerForm = null)
    {
        TrvParameters trvParameters = TrvParameters::find();

        ExpenseInstrumentationLogger logger = ExpenseInstrumentationLogger::createLogger('TrvExpenseLineHelper');
        ExpenseInstrumentationExpenseLineActivities expenseLineActivities = ExpenseInstrumentationExpenseLineActivities::construct(logger);

        TrvExpTrans trvExpTrans = TrvExpTrans::find(_expTransRecId, true);
        TrvExpTableTrvRequisitionTable requisitionLink;

        select RecId from requisitionLink where requisitionLink.TrvExpTable == _expTableRecId;
        boolean travelReqAttached = (requisitionLink.RecId != 0);

        logger.logInformation(strFmt('Attaching expense line %1 to header %2. Financial Dimension: %3; ' +
                        'ProjID: %4; Intercompany LE: %5; Travel Requisition is Attached: %6',
                        trvExpTrans.ExpTransNumber, _expenseNumber, trvExpTrans.DefaultDimension, trvExpTrans.ProjId,
                        trvExpTrans.InterCompanyLE, travelReqAttached));

        trvExpTrans.updateExpenseReport(_expenseNumber);
        if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave
                    && trvExpTrans.SplitLineType != TrvExpSplitLineType::SplitHeader)
        {
            TrvPolicyEvalEngine::evaluateViolationsForLine(trvExpTrans.RecId, SysPolicyTypeEnum::TrvExpensePolicy);
        }

        if (_skipSourceDocAndPolicies && _callerForm)
        {
            _callerForm.doAsyncAction(trvExpTrans.RecId);
        }

        logger.logInformation(strFmt('Finished attaching expense line %1 to header %2. Financial Dimension: %3; ' +
                        'ProjID: %4; Intercompany LE: %5; Travel Requisition is Attached: %6',
                        trvExpTrans.ExpTransNumber, _expenseNumber, trvExpTrans.DefaultDimension, trvExpTrans.ProjId,
                        trvExpTrans.InterCompanyLE, travelReqAttached));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>