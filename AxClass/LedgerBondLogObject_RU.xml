<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBondLogObject_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerBondLogObject_RU
{
    LedgerBondLogList_RU        bondLoglist;
    Map                         vrefIdMap;

    LedgerBondTransObject_RU    lastBondTransObject;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
        public void add(LedgerBondId_RU _vrefId, TransDate _transDate)
    {
        LedgerBondLogObject_RU prevLogObject;

        if (_vrefId <= 0)
        {
            throw error(strFmt("@SYS23264", funcName()));
        }

        vrefIdMap.insert(_vrefId, _transDate);
        lastBondTransObject = null;

        prevLogObject = bondLoglist.findPrevLogObject(this);
        if (prevLogObject)
        {
            prevLogObject.add(_vrefId, _transDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBondTransObject</Name>
				<Source><![CDATA[
        public void addBondTransObject(LedgerBondTransObject_RU _bondTransObject)
    {
        LedgerBondLogObject_RU prevLogObject;

        if (! _bondTransObject)
        {
            throw error(strFmt("@SYS23264", funcName()));
        }

        lastBondTransObject = _bondTransObject;

        vrefIdMap.insert(_bondTransObject.vrefId(), _bondTransObject.transDate());

        prevLogObject = bondLoglist.findPrevLogObject(this);
        if (prevLogObject)
        {
            prevLogObject.addBondTransObject(_bondTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushLog</Name>
				<Source><![CDATA[
        public void flushLog()
    {
        ;
        vrefIdMap = new Map(Types::Integer, Types::Date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>log</Name>
				<Source><![CDATA[
        public LedgerBondLog_RU log(TransDate _transDate)
    {
        LedgerBondLog_RU    ret;
        MapIterator         mapIterator = new MapIterator(vrefIdMap);

        while (mapIterator.more())
        {
            if (mapIterator.value() == _transDate)
            {
                ret += mapIterator.key();
            }
            mapIterator.next();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(LedgerBondLogList_RU _ledgerBondLogList)
    {
        if (! _ledgerBondLogList)
        {
            throw error(strfmt("@SYS23669", funcname()));
        }

        bondLoglist = _ledgerBondLogList;

        vrefIdMap = new Map(Types::Integer, Types::Date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
        public void remove(LedgerBondId_RU _vrefId)
    {
        if (_vrefId <= 0)
        {
            throw error(strfmt("@SYS23264", funcname()));
        }

        if (vrefIdMap.exists(_vrefId))
        {
            vrefIdMap.remove(_vrefId);
        }
        lastBondTransObject = null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>