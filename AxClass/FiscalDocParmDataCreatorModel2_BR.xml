<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorModel2_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for creating a <c>FiscalDocumentParmData_BR</c> object and its
/// components for a fiscal document model 2 generated at the Retail POS.
/// </summary>
class FiscalDocParmDataCreatorModel2_BR extends FiscalDocumentParmDataCreator_BR
{
    Voucher                                 voucher;
    RetailFiscalDocumentModel2_BR           fiscalDocumentModel2;
    RetailFiscalDocumentModel2TaxTrans_BR   fiscalDocumentModel2TaxTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canHavePresumedTaxes</Name>
				<Source><![CDATA[
    protected boolean canHavePresumedTaxes()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishment</Name>
				<Source><![CDATA[
        private FiscalEstablishment_BR fiscalEstablishment()
    {
        return RetailStoreTable::find(fiscalDocumentModel2.StoreId).fiscalEstablishment_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceCurrencyCode</Name>
				<Source><![CDATA[
        protected CurrencyCode fiscalReferenceSourceCurrencyCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceRecId</Name>
				<Source><![CDATA[
        protected recId fiscalReferenceSourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceTableId</Name>
				<Source><![CDATA[
        protected tableId fiscalReferenceSourceTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the customer invoice that was generated by the Fiscal document model 2
    /// </summary>
    /// <returns>
    /// A <c>CustInvoiceJour</c> record.
    /// </returns>
    private CustInvoiceJour getCustInvoiceJour()
    {
        RetailTransactionTable  transactionTable;
        CustInvoiceJour         custInvoiceJour;

        transactionTable    = RetailTransactionTable::find(fiscalDocumentModel2.TransactionId, fiscalDocumentModel2.StoreId, fiscalDocumentModel2.TerminalId);

        select custInvoiceJour
            where   custInvoiceJour.InvoiceId   == transactionTable.invoiceId
                &&  custInvoiceJour.InvoiceDate == transactionTable.businessDate;

        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
        protected boolean hasCustVendTrans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
        protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an instance of the object representing the Fiscal Document header information.
    /// </summary>
    /// <returns>
    /// An instance of <c>FiscalDocumentParmData_BR</c> representing the header of the Fiscal Document.
    /// </returns>
    protected FiscalDocumentParmData_BR initHeaderParmData()
    {
        #FiscalDocumentModels_BR

        FiscalDocumentParmData_BR fiscalDocument            = new FiscalDocumentParmData_BR();
        FiscalEstablishment_BR    fiscalEstablishment       = this.fiscalEstablishment();
        CustInvoiceJour           custInvoiceJour           = this.getCustInvoiceJour();

        fiscalDocument.parmFiscalEstablishmentID            (fiscalEstablishment.FiscalEstablishmentId);
        fiscalDocument.parmFiscalEstablishmentName          (fiscalEstablishment.Name);
        fiscalDocument.parmFiscalEstablishmentPostalAddress (fiscalEstablishment.postalAddress().RecId);
        fiscalDocument.parmFiscalEstablishmentCNPJCPF       (fiscalEstablishment.CNPJCPFNum_BR);
        fiscalDocument.parmFiscalEstablishmentIE            (fiscalEstablishment.IENum_BR);
        fiscalDocument.parmFiscalEstablishmentCCMNum        (fiscalEstablishment.CCMNum_BR);
        fiscalDocument.parmFiscalEstablishmentPhone         (fiscalEstablishment.phone());
        fiscalDocument.parmFiscalDocumentIssuer             (FiscalDocumentIssuer_BR::OwnEstablishment);
        fiscalDocument.parmModel                            (#FiscalDocModel_02);
        fiscalDocument.parmFiscalDocumentSeries             (fiscalDocumentModel2.FiscalDocumentSeries);
        fiscalDocument.parmSpecie                           (FiscalDocumentSpecie_BR::NF);
        fiscalDocument.parmFiscalDocumentNumber             (fiscalDocumentModel2.FiscalDocumentNumber);
        fiscalDocument.parmAccountingDate                   (fiscalDocumentModel2.FiscalDocumentDate);
        fiscalDocument.parmPaymentMethod                    (FiscalDocumentParmDataCreator_BR::nfePaymentMethod_BR(custInvoiceJour, this.getFiscalDocumentPurpose()));
        fiscalDocument.parmPaymentAmount                    (custInvoiceJour.InvoiceAmountMST);

        if (fiscalDocumentModel2.Status == FiscalDocumentStatus_BR::Cancelled)
        {
            fiscalDocument.parmCancelAccountingDate(fiscalDocumentModel2.FiscalDocumentDate);
        }

        fiscalDocument.parmRefRecId                         (custInvoiceJour.RecId);
        fiscalDocument.parmRefTableId                       (custInvoiceJour.TableId);
        fiscalDocument.parmVoucher                          (voucher);

        fiscalDocument.parmFiscalDocumentAccountType        (CustVendType_BR::Customer);
        fiscalDocument.parmThirdPartyCNPJCPF                (fiscalDocumentModel2.ConsumerCNPJCPFNumber);
        fiscalDocument.parmDirection                        (FiscalDocDirection_BR::Outgoing);
        fiscalDocument.parmFiscalDocumentDate               (fiscalDocumentModel2.FiscalDocumentDate);
        fiscalDocument.parmTotalAmount                      (fiscalDocumentModel2.TotalAmount);
        fiscalDocument.parmTotalDiscountAmount              (fiscalDocumentModel2.TotalDiscountAmount);
        fiscalDocument.parmStatus                           (fiscalDocumentModel2.Status);

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a list of objects representing the Fiscal Document lines.
    /// </summary>
    /// <returns>
    /// A List of classes with instances of <c>FiscalDocumentLineParmData_BR</c> representing the lines of the Fiscal Document.
    /// </returns>
    protected List initLinesParmData()
    {
        RetailFiscalDocumentModel2Line_BR   fiscalDocumentModel2Line;
        FiscalDocumentLineParmData_BR       fiscalDocumentLineParmData;
        InventTable                         inventTable;
        LogisticsPostalAddress              logisticsPostalAddress;
        TaxBenefitCodeSetupHeading_BR       taxBenefitCodeSetupHeading;
        List                                ret = new List(Types::Class);

        CFOPId_BR                           cfopId;

        CustInvoiceJour custInvoiceJour = this.getCustInvoiceJour();
        logisticsPostalAddress = this.fiscalEstablishment().postalAddress();
        taxBenefitCodeSetupHeading = TaxBenefitCodeSetupHeading_BR::findByCountryRegionIdAndStateId(logisticsPostalAddress.CountryRegionId, logisticsPostalAddress.State);
        while select ItemId, CFOP, Quantity, Unit, LineAmount, LineDiscount, UnitPrice, TableId, RecId
            from fiscalDocumentModel2Line
            where   fiscalDocumentModel2Line.TransactionId  == fiscalDocumentModel2.TransactionId
                &&  fiscalDocumentModel2Line.TerminalId     == fiscalDocumentModel2.TerminalId
                &&  fiscalDocumentModel2Line.StoreId        == fiscalDocumentModel2.StoreId
        {
            fiscalDocumentLineParmData  = new FiscalDocumentLineParmData_BR();
            inventTable                 = inventTable::find(fiscalDocumentModel2Line.ItemId);
            cfopId                      = CFOPTable_BR::formatCFOPCode(fiscalDocumentModel2Line.CFOP);

            // Fiscal document model 2 always contains products
            fiscalDocumentLineParmData.parmItemType             (FiscalDocumentLineItemType_BR::Product);
            fiscalDocumentLineParmData.parmFiscalClassification (inventTable.TaxFiscalClassification_BR);

            fiscalDocumentLineParmData.parmItemId               (fiscalDocumentModel2Line.ItemId);
            fiscalDocumentLineParmData.parmDescription          (inventTable.defaultProductName());
            fiscalDocumentLineParmData.parmCFOP                 (cfopId);
            fiscalDocumentLineParmData.parmQuantity             (fiscalDocumentModel2Line.Quantity);
            fiscalDocumentLineParmData.parmUnit                 (fiscalDocumentModel2Line.Unit);
            fiscalDocumentLineParmData.parmLineAmount           (fiscalDocumentModel2Line.LineAmount);
            fiscalDocumentLineParmData.parmLineDiscount         (fiscalDocumentModel2Line.LineDiscount);
            fiscalDocumentLineParmData.parmUnitPrice            (fiscalDocumentModel2Line.UnitPrice);
            fiscalDocumentLineParmData.parmOrigin               (inventTable.TaxationOrigin_BR);
            fiscalDocumentLineParmData.parmExceptionCode        (inventTable.ExceptionCode_BR);
            fiscalDocumentLineParmData.parmScaleIndicator       (inventTable.ScaleIndicator_BR);
            fiscalDocumentLineParmData.parmCNPJ                 (inventTable.CNPJ_BR);

            fiscalDocumentLineParmData.parmBenefitCode          (TaxBenefitCodeSetupData_BR::findAdjustmentCode(
                                                                    taxBenefitCodeSetupHeading.RecId,
                                                                    inventTable.ItemId,
                                                                    CustVendType_BR::Customer,
                                                                    custInvoiceJour.InvoiceAccount,
                                                                    cfopId,
                                                                    SalesPurchTrntype_BR::Sales));
            fiscalDocumentLineParmData.parmAdjustmentCode53     (TaxBenefitCodeSetupData_BR::findAdjustmentCode53(
                                                                    taxBenefitCodeSetupHeading.RecId,
                                                                    inventTable.ItemId,
                                                                    CustVendType_BR::Customer,
                                                                    custInvoiceJour.InvoiceAccount,
                                                                    cfopId,
                                                                    SalesPurchTrntype_BR::Sales));
            fiscalDocumentLineParmData.parmObservationCode      (TaxBenefitCodeSetupData_BR::findObservationCode(
                                                                    taxBenefitCodeSetupHeading.RecId,
                                                                    inventTable.ItemId,
                                                                    CustVendType_BR::Customer,
                                                                    custInvoiceJour.InvoiceAccount,
                                                                    cfopId,
                                                                    SalesPurchTrntype_BR::Sales));

            fiscalDocumentLineParmData.parmRefTableId           (fiscalDocumentModel2Line.TableId);
            fiscalDocumentLineParmData.parmRefRecId             (fiscalDocumentModel2Line.RecId);

            ret.addEnd(fiscalDocumentLineParmData);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a list of objects representing the Fiscal Document installments.
    /// </summary>
    /// <returns>
    /// A List of classes with instances of <c>FiscalDocumentInstallmentParmData_BR</c> representing the installments generated for the Fiscal Document.
    /// </returns>
    /// <remarks>
    /// Fiscal document model 2 does not have installments by design.
    /// </remarks>
    protected List initListOfInstallments()
    {
        List ret = new List(Types::Class);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Provides a list of objects representing the shipment specifications for a given Fiscal Document line.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// An instance of <c>FiscalDocumentParmData_BR</c> representing a specific Fiscal Document line.
    /// </param>
    /// <returns>
    /// A List of classes with instances of <c>FiscalDocumentParmData_BR</c> representing the
    /// shipment specifications incurred for the Fiscal Document line passed in as parameter.
    /// </returns>
    /// <remarks>
    /// Fiscal document model 2 does not have shipments by design.
    /// </remarks>
    protected List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        List ret = new List(Types::Class);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfTaxTransParmDataForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a list of objects representing the taxes incurred for a given Fiscal Document line.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    ///     An instance of <c>FiscalDocumentParmData_BR</c> representing the header for the given Fiscal Document line.
    /// </param>
    /// <param name="_fiscalDocumentLineParmData">
    ///     An instance of <c>FiscalDocumentLineParmData_BR</c> representing a specific Fiscal Document line.
    /// </param>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentTaxTransParmData_BR</c> representing the taxes incurred for
    ///     the Fiscal Document line passed in as parameter.
    /// </returns>
    /// <remarks>
    /// Fiscal document model 2 taxes are pre-calculate at the Retail POS.
    /// </remarks>
    protected List initListOfTaxTransParmDataForLine(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        List                                    listOfTaxParmData = new List(Types::Class);
        FiscalDocumentTaxTransParmData_BR       fiscalDocumentTaxTransParmData;
        RetailFiscalDocumentModel2Line_BR       fiscalDocumentModel2Line;
        TaxTrans                                dummyTaxTrans;

        select LineNum, TransactionId, TerminalId, StoreId from fiscalDocumentModel2Line
            where fiscalDocumentModel2Line.RecId == _fiscalDocumentLineParmData.parmRefRecId();

        while select fiscalDocumentModel2TaxTrans
            where   fiscalDocumentModel2TaxTrans.LineNum        == fiscalDocumentModel2Line.LineNum
                &&  fiscalDocumentModel2TaxTrans.TransactionId  == fiscalDocumentModel2Line.TransactionId
                &&  fiscalDocumentModel2TaxTrans.TerminalId     == fiscalDocumentModel2Line.TerminalId
                &&  fiscalDocumentModel2TaxTrans.StoreId        == fiscalDocumentModel2Line.StoreId
                // Fiscal documents with model 02 cannot use taxes whose type is ICMS-ST
                &&  fiscalDocumentModel2TaxTrans.TaxType        != TaxType_BR::ICMSST
        {
            fiscalDocumentTaxTransParmData = new FiscalDocumentTaxTransParmData_BR();

            this.initTaxTransParmDataFromTraxTrans(_fiscalDocumentParmData,
                                                   fiscalDocumentTaxTransParmData,
                                                   dummyTaxTrans,
                                                   dummyTaxTrans,
                                                   dummyTaxTrans);

            listOfTaxParmData.addEnd(fiscalDocumentTaxTransParmData);
        }

        return listOfTaxParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransParmDataFromTraxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>FiscalDocumentTaxTransParmData_BR</c> class with tax transaction information.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// Not used.
    /// </param>
    /// <param name="_fiscalDocumentTaxTransParmData">
    /// The <c>FiscalDocumentTaxTransParmData_BR</c> class to be initialized.
    /// </param>
    /// <param name="_taxTrans">
    /// Not used.
    /// </param>
    /// <param name="_taxTransTaxSubstitution">
    /// Not used.
    /// </param>
    /// <param name="_taxTransTaxDiff">
    /// Not used.
    /// </param>
    /// <remarks>
    /// Extends the base class method.
    /// </remarks>
    protected void initTaxTransParmDataFromTraxTrans(   FiscalDocumentParmData_BR           _fiscalDocumentParmData,
                                                        FiscalDocumentTaxTransParmData_BR   _fiscalDocumentTaxTransParmData,
                                                        TaxTrans                            _taxTrans,
                                                        TaxTrans                            _taxTransTaxSubstitution,
                                                        TaxTrans                            _taxTransTaxDiff)
    {
        TaxTable taxTable = TaxTable::find(fiscalDocumentModel2TaxTrans.TaxCode);

        _fiscalDocumentTaxTransParmData.parmTaxTrans            (fiscalDocumentModel2TaxTrans.RecId);
        _fiscalDocumentTaxTransParmData.parmType                (fiscalDocumentModel2TaxTrans.TaxType);
        _fiscalDocumentTaxTransParmData.parmTaxationCode        (fiscalDocumentModel2TaxTrans.TaxationCode);
        _fiscalDocumentTaxTransParmData.parmTaxValue            (fiscalDocumentModel2TaxTrans.TaxValue);
        _fiscalDocumentTaxTransParmData.parmFiscalValue         (fiscalDocumentModel2TaxTrans.FiscalValue);
        _fiscalDocumentTaxTransParmData.parmTaxationOrigin      (fiscalDocumentModel2TaxTrans.TaxationOrigin);
        _fiscalDocumentTaxTransParmData.parmRetainedTax         (taxTable.RetainedTax_BR);
        _fiscalDocumentTaxTransParmData.parmIncludedTax         (taxTable.IncludedTax_BR);
        _fiscalDocumentTaxTransParmData.parmTaxReductionPct     (fiscalDocumentModel2TaxTrans.TaxReductionPct);

        switch (fiscalDocumentModel2TaxTrans.FiscalValue)
        {
            case TaxFiscalValue_BR::WithCreditDebit:
                _fiscalDocumentTaxTransParmData.parmTaxAmount       (fiscalDocumentModel2TaxTrans.TaxAmount);
                _fiscalDocumentTaxTransParmData.parmTaxBaseAmount   (fiscalDocumentModel2TaxTrans.TaxBaseAmount);
                break;
            case TaxFiscalValue_BR::WithoutCreditDebitExempt:
                _fiscalDocumentTaxTransParmData.parmTaxBaseAmountExempt (fiscalDocumentModel2TaxTrans.TaxBaseAmount);
                break;
            case TaxFiscalValue_BR::WithoutCreditDebitOther:
                _fiscalDocumentTaxTransParmData.parmTaxAmountOther      (fiscalDocumentModel2TaxTrans.TaxAmount);
                _fiscalDocumentTaxTransParmData.parmTaxBaseAmountOther  (fiscalDocumentModel2TaxTrans.TaxBaseAmount);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalDocumentModel2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>RetailFiscalDocumentModel2_BR</c> that will posted as Fiscal document.
    /// </summary>
    /// <param name="_fiscalDocumentModel2">
    /// A <c>RetailFiscalDocumentModel2_BR</c> table buffer.
    /// </param>
    public void setFiscalDocumentModel2(RetailFiscalDocumentModel2_BR _fiscalDocumentModel2)
    {
        fiscalDocumentModel2 = _fiscalDocumentModel2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the voucher associated to the statement that contains the fiscal document model 2.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher number.
    /// </param>
    /// <remarks>
    /// As statements are posted aggregated, the voucher may contain several fiscal documents model 2.
    /// </remarks>
    public void setVoucher(Voucher _voucher)
    {
        voucher = _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    protected FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
        return FiscalDocumentPurpose_BR::Regular;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>