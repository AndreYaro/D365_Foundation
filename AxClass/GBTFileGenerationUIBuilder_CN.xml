<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GBTFileGenerationUIBuilder_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The user interface builder of GBT file generation.
/// </summary>
class GBTFileGenerationUIBuilder_CN extends SysOperationAutomaticUIBuilder
{
    DialogField fiscalYearName;
    DialogField startPeriodName;
    DialogField endPeriodName;
    DialogField periodName;
    RecId       fiscalCalendarYearRecId;
    GBTFileGenerationDataContract_CN contract;
    Dialog gbtDialog;
    #define.SystemButtonName('MnuItm_1')
    #define.ClickMethodName('Clicked')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Action after build of the dialog UI.
    /// </summary>
    public void postBuild()
    {
        FormBuildFunctionButtonControl previewButton;

        super();

        contract = this.dataContractObject();

        fiscalYearName = this.bindInfo().getDialogField(contract, methodStr(GBTFileGenerationDataContract_CN, parmFiscalYearName));
        startPeriodName = this.bindInfo().getDialogField(contract, methodStr(GBTFileGenerationDataContract_CN, parmStartPeriodName));
        endPeriodName = this.bindInfo().getDialogField(contract, methodStr(GBTFileGenerationDataContract_CN, parmEndPeriodName));
        periodName = this.bindInfo().getDialogField(contract, methodStr(GBTFileGenerationDataContract_CN, parmPeriodName));

        // Fiscal year
        fiscalYearName.registerOverrideMethod(methodStr(FormStringControl, Lookup), methodStr(GBTFileGenerationUIBuilder_CN, fiscalYearByFiscalCalendarLookup), this);
        fiscalYearName.registerOverrideMethod(methodStr(FormStringControl, Modified), methodStr(GBTFileGenerationUIBuilder_CN, FiscalYearFieldModified), this);

        // Data start fiscal period
        startPeriodName.registerOverrideMethod(methodStr(FormStringControl, Lookup), methodStr(GBTFileGenerationUIBuilder_CN, fiscalPeriodByFiscalYearLookup), this);
        startPeriodName.registerOverrideMethod(methodStr(FormStringControl, Modified), methodStr(GBTFileGenerationUIBuilder_CN, FiscalPeriodFieldModified), this);

        // Data end fiscal period
        endPeriodName.registerOverrideMethod(methodStr(FormStringControl, Lookup), methodStr(GBTFileGenerationUIBuilder_CN, fiscalPeriodByFiscalYearLookup), this);
        endPeriodName.registerOverrideMethod(methodStr(FormStringControl, Modified), methodStr(GBTFileGenerationUIBuilder_CN, FiscalPeriodFieldModified), this);

        // Report Fiscal period
        periodName.registerOverrideMethod(methodStr(FormStringControl, Lookup), methodStr(GBTFileGenerationUIBuilder_CN, fiscalPeriodByFiscalYearLookup), this);
        periodName.registerOverrideMethod(methodStr(FormStringControl, Modified), methodStr(GBTFileGenerationUIBuilder_CN, FiscalPeriodFieldModified), this);

        gbtDialog = this.dialog();
        gbtDialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(GBTPreview_CN));
        previewButton = dialog.dialogForm().control(#SystemButtonName);
        previewButton.registerOverrideMethod(#ClickMethodName, methodStr(GBTFileGenerationUIBuilder_CN, previewButtonClicked), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalPeriodByFiscalYearLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup form for fiscal calendar period.
    /// </summary>
    /// <param name="_fiscalCalendarPeriodControl">
    /// The fiscal calendar period form string control.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fiscalPeriodByFiscalYearLookup(FormStringControl _fiscalCalendarPeriodControl)
    {
        // Return the record selected by the user.
        this.buildFiscalPeriodLookupTable(_fiscalCalendarPeriodControl).performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalPeriodFieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a modified method for fiscal calendar year.
    /// </summary>
    /// <param name="_fiscalCalendarPeriodControl">
    /// The fiscal calendar year form string control.
    /// </param>
    /// <returns>
    /// True when fiscal year name is valid, else false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean fiscalPeriodFieldModified(FormStringControl _fiscalCalendarPeriodControl)
    {
        str fiscalPeriodNamelocal = _fiscalCalendarPeriodControl.valueStr();
        boolean ret = false;

        if (!fiscalPeriodNamelocal)
        {
            ret = true;
        }

        if (!ret && fiscalYearName.value() && GBTExportDataToXML_CN::validatePeriodName(fiscalPeriodNamelocal, fiscalYearName.value()))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFiscalPeriodLookupTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds fiscal period lookup table.
    /// </summary>
    /// <param name="_fiscalCalendarPeriodControl">
    /// The fiscal calendar period control.
    /// </param>
    /// <returns>
    /// The instance of the <c>SysTableLookup</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SysTableLookup buildFiscalPeriodLookupTable(FormStringControl _fiscalCalendarPeriodControl)
    {
        Query                lookupQuery;
        QueryBuildDataSource fiscalCalendarPeriodDS;
        QueryBuildRange      queryBuildRange;
        QueryBuildRange      queryBuildRangePeriodType;

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(
            tableNum(FiscalCalendarPeriod),
            _fiscalCalendarPeriodControl);

        lookupQuery = new Query();
        sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, Name));
        sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, StartDate));
        sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, EndDate));
        fiscalCalendarPeriodDS = lookupQuery.addDataSource(tableNum(FiscalCalendarPeriod));
        queryBuildRange = fiscalCalendarPeriodDS.addRange(fieldNum(FiscalCalendarPeriod, FiscalCalendarYear));
        queryBuildRangePeriodType = fiscalCalendarPeriodDS.addRange(fieldNum(FiscalCalendarPeriod, Type));

        queryBuildRangePeriodType.value(SysQuery::value(FiscalPeriodType::Operating));

        fiscalCalendarYearRecId = FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(), fiscalYearName.value()).RecId;
        queryBuildRange.value(SysQuery::value(fiscalCalendarYearRecId));
        sysTableLookup.parmQuery(lookupQuery);

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalYearByFiscalCalendarLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup form form fiscal calendar year.
    /// </summary>
    /// <param name="_fiscalCalendarYearControl">
    /// The fiscal calendar year form string control.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fiscalYearByFiscalCalendarLookup(FormStringControl _fiscalCalendarYearControl)
    {
        FiscalCalendarYear::lookupFiscalCalendarYear(_fiscalCalendarYearControl, Ledger::fiscalCalendar());
    }

]]></Source>
			</Method>
			<Method>
				<Name>FiscalYearFieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a modified method for fiscal calendar year.
    /// </summary>
    /// <param name="_fiscalCalendarYearControl">
    /// The fiscal calendar year form string control.
    /// </param>
    /// <returns>
    /// True when fiscal year name is valid, else false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean FiscalYearFieldModified(FormStringControl _fiscalCalendarYearControl)
    {
        str fiscalYearNamelocal = _fiscalCalendarYearControl.text();
        boolean ret = false;

        if (!fiscalYearNamelocal)
        {
            periodName.value('');
            startPeriodName.value('');
            endPeriodName.value('');
            ret = true;
        }

        if (!ret && GBTExportDataToXML_CN::validateYearName(fiscalYearNamelocal))
        {
            periodName.value('');
            startPeriodName.value('');
            endPeriodName.value('');
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a clicked method for button Preview.
    /// </summary>
    /// <param name="_previewButton">
    /// The form button control.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void previewButtonClicked(FormFunctionButtonControl _previewButton)
    {
        Args            args;
        FormRun         formRun;

        contract.parmEndPeriodName(endPeriodName.value());
        contract.parmFiscalYearName(fiscalYearName.value());
        contract.parmPeriodName(periodName.value());
        contract.parmStartPeriodName(startPeriodName.value());

        if (contract.validate())
        {
            args = new Args(formStr(GBTPreview_CN));
            args.caller(this);
            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait(true);

            if (formRun.closedOk())
            {
                gbtDialog.close();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>