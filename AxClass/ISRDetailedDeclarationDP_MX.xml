<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>isrDetailedDeclarationDP_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ISRDetailedDeclarationDP_MX</c> class is the Report Data Provider class for the ISR
///    Provisional Detailed SSRS report.
/// </summary>
/// <remarks>
///    This is the RDP class for the ISR Provisional Detailed SSRS report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(ISRDetailedDeclarationContract_MX))
]
class isrDetailedDeclarationDP_MX extends SRSReportDataProviderBase
{
    ISRDetailedDeclarationTmp_MX            isrDetailedDeclarationTmp;
    ISRConceptMainAccount_MX                isrConceptMainAccount;
    ISRConcept_MX                           isrConcept;
    MainAccount                             mainAccount;
    GeneralJournalEntry                     generalJournalEntry;
    GeneralJournalAccountEntry              generalJournalAccountEntry;
    DimensionAttributeValueCombination      dimensionAttributeValueCombination;
    DimensionAttributeValueGroupCombination dimensionAttributeValueGroupCombination;
    DimensionAttributeLevelValue            dimensionAttributeLevelValue;
    TransDate                               fromDate;
    TransDate                               toDate;
    boolean                                 firstRecordPerConcept;
    boolean                                 removeBlankLines;
    ISRUtilityRatio_MX                      utilityRatio;
    ISRReportType_MX                        detail;
    ISRMonth_MX                             month;
    ISRYear_MX                              isryear;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getISRDetailedDeclarationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The Report Data Provider class for ISR Detailed SSRS report.
    /// </summary>
    /// <returns>
    ///    The populated temporary table object.
    /// </returns>
    [
        #ISR_SSRSParameters_MX
        SRSReportDataSetAttribute(#tempDetailedTable)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ISRDetailedDeclarationTmp_MX getISRDetailedDeclarationTmp()
    {
        select * from isrDetailedDeclarationTmp
            order by Conceptcategory;

        return isrDetailedDeclarationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the report parameters.
    /// </summary>
    private void getParameters()
    {
        ISRDetailedDeclarationContract_MX isrDetailedDeclarationContract = this.parmDataContract() as ISRDetailedDeclarationContract_MX;

        month    = isrDetailedDeclarationContract.parmMonth();
        isryear  = isrDetailedDeclarationContract.parmIsryear();
        fromDate = mkdate(01, month, isryear);
        toDate   = endmth(fromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateISRDetaileddDeclarationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts or updates records into the <c>ISRDetailedDeclarationTmp_MX</c> table.
    /// </summary>
    /// <param name="_mainAccount">
    ///    The <c>MainAccount</c> record that contains the <c>accountID</c> and <c>name</c> values.
    /// </param>
    /// <param name="_isrConceptMainAccount">
    ///    A <c>ISRConceptMainAccount_MX</c> record that contains the account type.
    /// </param>
    /// <param name="_isrConcept">
    ///    A <c>ISRConcept_MX</c> record that contains the concept category.
    /// </param>
    /// <param name="_generalJournalEntry">
    ///    A <c>GeneralJournalEntry</c> record that contains the <c>AccountingDate</c> and
    ///    <c>VoucherNumber</c> values.
    /// </param>
    /// <param name="_generalJournalAccountEntry">
    ///    A <c>GeneralJournalAccountEntry</c> record that contains the <c>PostingType</c> and <c>Amount</c>
    ///    values.
    /// </param>
    /// <param name="_subledgerVoucher">
    ///    The subledger voucher number
    /// </param>
    /// <returns>
    ///    A <c>ISRDetailedDeclarationTmp_MX</c> table buffer.
    /// </returns>
    private ISRDetailedDeclarationTmp_MX insertOrUpdateISRDetaileddDeclarationTmp(
        MainAccount                 _mainAccount,
        ISRConceptMainAccount_MX    _isrConceptMainAccount,
        ISRConcept_MX               _isrConcept,
        GeneralJournalEntry         _generalJournalEntry,
        GeneralJournalAccountEntry  _generalJournalAccountEntry,
        Voucher                     _subledgerVoucher)
    {
        isrDetailedDeclarationTmp.MainAccount     = _mainAccount.MainAccountId;
        isrDetailedDeclarationTmp.Conceptcategory = _isrConcept.Concept;
        isrDetailedDeclarationTmp.TransDate       = _generalJournalEntry.AccountingDate;
        isrDetailedDeclarationTmp.Voucher         = _subledgerVoucher;
        isrDetailedDeclarationTmp.LedgerTransType = _generalJournalAccountEntry.PostingType;
        isrDetailedDeclarationTmp.DebitCredit     = _generalJournalAccountEntry.AccountingCurrencyAmount >= 0 ? ISRCreditDebit_MX::Debit : ISRCreditDebit_MX::Credit;
        isrDetailedDeclarationTmp.Amount          = _generalJournalAccountEntry.AccountingCurrencyAmount;
        isrDetailedDeclarationTmp.AccountName     = MainAccount::getLocalizedName(_mainAccount.RecId);

        return isrDetailedDeclarationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ISRConceptCategory_MX   isrConceptCategoryLoc;
        FiscalCalendarYear      fiscalCalendarYear;
        FiscalYearName          yearFind;
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        TransDate               startDate;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        firstRecordPerConcept = false;

        this.getParameters();
        yearFind = int2str(isryear);

        select StartDate from fiscalCalendarYear
            where fiscalCalendarYear.Name == yearFind;

        if (fiscalCalendarYear)
            startDate = fiscalCalendarYear.StartDate;

        ttsbegin;
        while select isrConcept
            order by Concept
            join isrConceptMainAccount
                where isrConceptMainAccount.Concept == isrConcept.RecId
            join MainAccountId, RecId from mainAccount
                where mainAccount.RecId     == isrConceptMainAccount.MainAccount
        {
            if (isrConceptCategoryLoc != isrConcept.Concept)
            {
                removeBlankLines = false;
            }

            while select * from generalJournalAccountEntry
                join RecId from dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
                join RecId, DimensionAttributeValueGroup from dimensionAttributeValueGroupCombination
                    where dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination == dimensionAttributeValueCombination.RecId
                join RecId from dimensionAttributeLevelValue
                    where dimensionAttributeLevelValue.DimensionAttributeValueGroup == dimensionAttributeValueGroupCombination.DimensionAttributeValueGroup
                       && dimensionAttributeLevelValue.DisplayValue                 == mainAccount.MainAccountId
                join RecId, AccountingDate from generalJournalEntry
                    where generalJournalEntry.RecId          == generalJournalAccountEntry.GeneralJournalEntry
                       && generalJournalEntry.AccountingDate >= startDate
                       && generalJournalEntry.AccountingDate <= toDate
                       && generalJournalEntry.Ledger == Ledger::current()
                    join Type from fiscalCalendarPeriod
                        where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                join Voucher from subledgerVoucherGeneralJournalEntry
                    where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
            {
                if (fiscalCalendarPeriod.Type == FiscalPeriodType::Operating && generalJournalEntry.AccountingDate >= fromDate && generalJournalEntry.AccountingDate <= toDate)
                {
                    if ((generalJournalAccountEntry.AccountingCurrencyAmount    > 0 && isrConceptMainAccount.AccountType == ISRCreditDebit_MX::Debit)
                        || (generalJournalAccountEntry.AccountingCurrencyAmount < 0 && isrConceptMainAccount.AccountType == ISRCreditDebit_MX::Credit)
                        || (isrConceptMainAccount.AccountType == ISRCreditDebit_MX::Both))
                    {
                        select forupdate isrDetailedDeclarationTmp
                            where isrDetailedDeclarationTmp.Conceptcategory == isrConcept.Concept
                               && isrDetailedDeclarationTmp.OpeningAmount   != 0
                               && isrDetailedDeclarationTmp.Amount          == 0;

                        if (isrDetailedDeclarationTmp && firstRecordPerConcept)
                        {
                            firstRecordPerConcept = false;
                            isrDetailedDeclarationTmp = this.insertOrUpdateISRDetaileddDeclarationTmp(mainAccount,
                                isrConceptMainAccount,
                                isrConcept,
                                generalJournalEntry,
                                generalJournalAccountEntry,
                                subledgerVoucherGeneralJournalEntry.Voucher);
                            isrDetailedDeclarationTmp.doUpdate();
                        }
                        else
                        {
                            isrDetailedDeclarationTmp = this.insertOrUpdateISRDetaileddDeclarationTmp(mainAccount,
                                isrConceptMainAccount,
                                isrConcept,
                                generalJournalEntry,
                                generalJournalAccountEntry,
                                subledgerVoucherGeneralJournalEntry.Voucher);
                            isrDetailedDeclarationTmp.insert();
                        }
                    }
                }

                else if (generalJournalEntry.AccountingDate < fromDate
                            || (fiscalCalendarPeriod.Type == FiscalPeriodType::Opening && generalJournalEntry.AccountingDate == startDate))
                {
                    if ((generalJournalAccountEntry.AccountingCurrencyAmount    > 0 && isrConceptMainAccount.AccountType == ISRCreditDebit_MX::Debit)
                       || (generalJournalAccountEntry.AccountingCurrencyAmount < 0 && isrConceptMainAccount.AccountType == ISRCreditDebit_MX::Credit)
                       || (isrConceptMainAccount.AccountType == ISRCreditDebit_MX::Both))
                    {
                        firstRecordPerConcept = true;
                        select firstonly forupdate OpeningAmount from isrDetailedDeclarationTmp
                            where isrDetailedDeclarationTmp.Conceptcategory == isrConcept.Concept;

                        if (isrDetailedDeclarationTmp)
                        {
                            if (!removeBlankLines)
                            {
                                firstRecordPerConcept =  false;
                            }

                            isrDetailedDeclarationTmp.OpeningAmount += generalJournalAccountEntry.AccountingCurrencyAmount;
                            isrDetailedDeclarationTmp.doUpdate();
                        }
                        else
                        {
                            isrDetailedDeclarationTmp.Conceptcategory = isrConcept.Concept;
                            isrDetailedDeclarationTmp.OpeningAmount   += generalJournalAccountEntry.AccountingCurrencyAmount;
                            isrDetailedDeclarationTmp.DebitCredit     = generalJournalAccountEntry.AccountingCurrencyAmount >= 0 ? ISRCreditDebit_MX::Debit : ISRCreditDebit_MX::Credit;
                            removeBlankLines = true;
                            isrDetailedDeclarationTmp.insert();
                        }
                    }
                }
            }

            select firstonly isrDetailedDeclarationTmp
                where isrDetailedDeclarationTmp.Conceptcategory == isrConcept.Concept;

            if (!isrDetailedDeclarationTmp)
            {
                isrDetailedDeclarationTmp.Conceptcategory = isrConcept.Concept;
                isrDetailedDeclarationTmp.OpeningAmount   = 0;
                isrDetailedDeclarationTmp.insert();
            }

            isrConceptCategoryLoc = isrConcept.Concept;
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
