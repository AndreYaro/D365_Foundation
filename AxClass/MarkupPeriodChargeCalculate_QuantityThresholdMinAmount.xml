<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupPeriodChargeCalculate_QuantityThresholdMinAmount</Name>
	<SourceCode>
		<Declaration><![CDATA[
[MarkupPeriodChargeCalculateMode(MarkupPeriodChargeRuleLineType::QuantityThresholdMinAmount)]
internal class MarkupPeriodChargeCalculate_QuantityThresholdMinAmount extends MarkupPeriodChargeCalculate_QuantityThreshold
{
    private MarkupPeriodChargeCalculateMinAmountTmp periodChargeCalculateMinAmountTmp;
    private Map invoiceLineBaseMinAmountMap;
    private Map invoiceMinAmountMap;
    private Set invoiceLineBaseMinAmountPendingRemoveSet;
    private boolean mustAddInvoiceLineBaseToSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPeriodRuleTypeRanges</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addPeriodRuleTypeRanges(Query _query)
    {
        super(_query);

        QueryBuildDataSource qbdsCustInvoiceJour = _query.dataSourceTable(tableNum(CustInvoiceJour));
        QueryBuildDataSource qbdsCustInvoiceTrans = _query.dataSourceTable(tableNum(CustInvoiceTrans));

        QueryBuildDataSource qbdsPeriodChargeCalculateMinAmountTmp = qbdsCustInvoiceTrans.addDataSource(tableNum(MarkupPeriodChargeCalculateMinAmountTmp));
        
        qbdsPeriodChargeCalculateMinAmountTmp.fetchMode(QueryFetchMode::One2One);
        qbdsPeriodChargeCalculateMinAmountTmp.joinMode(JoinMode::ExistsJoin);
        qbdsPeriodChargeCalculateMinAmountTmp.addLink(fieldNum(CustInvoiceJour, InvoiceAccount), fieldNum(MarkupPeriodChargeCalculateMinAmountTmp, InvoiceAccount), qbdsCustInvoiceJour.name());
        qbdsPeriodChargeCalculateMinAmountTmp.addRange(fieldNum(MarkupPeriodChargeCalculateMinAmountTmp, SalesInvoiceDateFrom)).value(strFmt(
            '((%1.%2 <= %3.%4) && (%1.%5 >= %3.%4))',
            qbdsPeriodChargeCalculateMinAmountTmp.name(),// %1
            fieldStr(MarkupPeriodChargeCalculateMinAmountTmp, SalesInvoiceDateFrom), // %2
            qbdsCustInvoiceJour.name(), // %3
            fieldStr(CustInvoiceJour, InvoiceDate), // %4
            fieldStr(MarkupPeriodChargeCalculateMinAmountTmp, SalesInvoiceDateTo))); // %5
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryRun</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected QueryRun buildQueryRun(Query _query)
    {
        QueryRun queryRun = super(_query);
        queryRun.setRecord(periodChargeCalculateMinAmountTmp);
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPeriodChargeRuleCheck</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void runPeriodChargeRuleCheck()
    {
        this.processMonetaryAmount();

        super();

        this.deleteInvoiceLineBaseRelationship();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMonetaryAmount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void processMonetaryAmount()
    {
        MarkupPeriodChargeCalculate_MonetaryThresholdMinAmount periodChargeCalculateMonetaryThresholdMinAmount = new MarkupPeriodChargeCalculate_MonetaryThresholdMinAmount();
        periodChargeCalculateMonetaryThresholdMinAmount.parmPeriodChargeRuleLine(periodChargeRuleLine);
        periodChargeCalculateMonetaryThresholdMinAmount.parmFromDate(fromDate);
        periodChargeCalculateMonetaryThresholdMinAmount.parmToDate(toDate);
        periodChargeCalculateMonetaryThresholdMinAmount.parmDaysPerInvoice(daysPerInvoice);
        periodChargeCalculateMonetaryThresholdMinAmount.parmExecutionId(executionId);        
        periodChargeCalculateMonetaryThresholdMinAmount.parmBundleId(bundleId);
        periodChargeCalculateMonetaryThresholdMinAmount.runPeriodChargeRuleCheck();

        periodChargeCalculateMinAmountTmp = periodChargeCalculateMonetaryThresholdMinAmount.parmPeriodChargeCalculateMinAmountTmp();
        invoiceMinAmountMap = periodChargeCalculateMonetaryThresholdMinAmount.parmInvoiceMinAmountMap();
        invoiceLineBaseMinAmountMap = periodChargeCalculateMonetaryThresholdMinAmount.parmInvoiceLineBaseMinAmountMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoiceCreationParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MarkupPeriodChargeFreeTextInvoiceCreateParameters populateInvoiceCreationParameters()
    {
        MarkupPeriodChargeFreeTextInvoiceCreateParameters invoiceCreationParameters = super();

        invoiceCreationParameters.parmCurrency(periodChargeRuleLine.CurrencyCode);
        invoiceCreationParameters.parmPeriodChargeRuleLineRecId(periodChargeRuleLine.RecId);

        str invoiceMinAmountMapKey = invoiceCreationParameters.generateInvoiceMapKey(true);
        if (invoiceMinAmountMap.exists(invoiceMinAmountMapKey))
        {
            MarkupPeriodChargeFreeTextInvoiceCreateParameters invoiceMonetaryCreationParameters = invoiceMinAmountMap.lookup(invoiceMinAmountMapKey);
            invoiceCreationParameters.parmInvoiceLineAmount(invoiceMonetaryCreationParameters.parmInvoiceLineAmount());
        }

        return invoiceCreationParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGenerateZeroQuantityInvoiceLineBase</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustGenerateZeroQuantityInvoiceLineBase()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoiceLineBaseCreationParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal MarkupPeriodChargeInvoiceLineBaseCreateParameters populateInvoiceLineBaseCreationParameters()
    {
        MarkupPeriodChargeInvoiceLineBaseCreateParameters invoiceLineBaseCreationParameters = super();
        invoiceLineBaseCreationParameters.parmChargeCode(periodChargeRuleLine.ChargeCode);
        return this.mergeInvoiceLineBaseCreationParameters(invoiceLineBaseCreationParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeInvoiceLineBaseCreationParameters</Name>
				<Source><![CDATA[
    private MarkupPeriodChargeInvoiceLineBaseCreateParameters mergeInvoiceLineBaseCreationParameters(MarkupPeriodChargeInvoiceLineBaseCreateParameters _quantityInvoiceLineBaseCreationParameters)
    {
        MarkupPeriodChargeInvoiceLineBaseCreateParameters quantityInvoiceLineBaseCreateParameters = _quantityInvoiceLineBaseCreationParameters;

        str invoiceLineBaseMinAmountMapKey = quantityInvoiceLineBaseCreateParameters.generateInvoiceLineBaseId();
        
        if (invoiceLineBaseMinAmountMap.exists(invoiceLineBaseMinAmountMapKey))
        {
            mustAddInvoiceLineBaseToSet = true;
            MarkupPeriodChargeInvoiceLineBaseCreateParameters monetaryInvoiceLineBaseCreateParameters = invoiceLineBaseMinAmountMap.lookup(invoiceLineBaseMinAmountMapKey);

            quantityInvoiceLineBaseCreateParameters.parmChargeAmount(monetaryInvoiceLineBaseCreateParameters.parmChargeAmount());
            quantityInvoiceLineBaseCreateParameters.parmChargeCode(monetaryInvoiceLineBaseCreateParameters.parmChargeCode());
            quantityInvoiceLineBaseCreateParameters.parmChargeCurrencyCode(monetaryInvoiceLineBaseCreateParameters.parmChargeCurrencyCode());
            quantityInvoiceLineBaseCreateParameters.parmChargeDescription(monetaryInvoiceLineBaseCreateParameters.parmChargeDescription());
            
            this.addInvoiceLineBaseMinAmountMapKeyToPendingRemoveSet(invoiceLineBaseMinAmountMapKey);
        }
        else
        {
            mustAddInvoiceLineBaseToSet = false;
        }

        return quantityInvoiceLineBaseCreateParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddInvoiceLineBaseToSet</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustAddInvoiceLineBaseToSet()
    {
        return mustAddInvoiceLineBaseToSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleLineCondition</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean checkRuleLineCondition()
    {
        boolean result = super();

        if (!result)
        {
            this.removePendingElementsFromInvoiceLineBaseMinAmountMap();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceLineBaseMinAmountMapKeyToPendingRemoveSet</Name>
				<Source><![CDATA[
    private void addInvoiceLineBaseMinAmountMapKeyToPendingRemoveSet(str _invoiceLineBaseMinAmountMapKey)
    {
        if (!invoiceLineBaseMinAmountPendingRemoveSet)
        {
            invoiceLineBaseMinAmountPendingRemoveSet = new Set(Types::String);
        }

        invoiceLineBaseMinAmountPendingRemoveSet.add(_invoiceLineBaseMinAmountMapKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePendingElementsFromInvoiceLineBaseMinAmountMap</Name>
				<Source><![CDATA[
    private void removePendingElementsFromInvoiceLineBaseMinAmountMap()
    {
        if (invoiceLineBaseMinAmountPendingRemoveSet)
        {
            SetEnumerator setEnumerator = invoiceLineBaseMinAmountPendingRemoveSet.getEnumerator();
            while (setEnumerator.moveNext())
            {
                str invoiceLineBaseMinAmountMapKey = setEnumerator.current();
                if (invoiceLineBaseMinAmountMap.exists(invoiceLineBaseMinAmountMapKey))
                {
                    // Excludes invoice line base Id from the relationship record list that must be deleted.
                    invoiceLineBaseMinAmountMap.remove(invoiceLineBaseMinAmountMapKey);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultValues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void setDefaultValues()
    {
        super();

        invoiceLineBaseMinAmountPendingRemoveSet = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInvoiceLineBaseRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///     The invoice line base relationship data must be deleted when invoice line base is not created. 
    ///     It is a deletion of monetary threshold calculation part data that were not used for quantity threshold calculation part.
    /// </summary>
    [Hookable(false)]
    internal void deleteInvoiceLineBaseRelationship()
    {
        if (invoiceLineBaseMinAmountMap.elements())
        {
            SysDaQueryObject sysDaQuery = this.buildInvoiceLineBaseRelationshipDeleteQuery();

            new SysDaDeleteStatement().executeQuery(new SysDaDeleteObject(sysDaQuery));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInvoiceLineBaseRelationshipDeleteQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysDaQueryObject buildInvoiceLineBaseRelationshipDeleteQuery()
    {
        MarkupPeriodChargeInvoiceLineBaseRelationship invoiceLineBaseRelationship;
        SysDaQueryExpression invoiceLineWhereClause;

        MapEnumerator invoiceLineBaseMapEnumerator = invoiceLineBaseMinAmountMap.getEnumerator();
        while (invoiceLineBaseMapEnumerator.moveNext())
        {
            MarkupPeriodChargeInvoiceLineBaseId currentInvoiceLineBaseId = invoiceLineBaseMapEnumerator.currentKey();
            
            SysDaQueryExpression invoiceBaseLineExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(invoiceLineBaseRelationship, fieldStr(MarkupPeriodChargeInvoiceLineBaseRelationship, InvoiceLineBaseId)),
                new SysDaValueExpression(currentInvoiceLineBaseId));

            if (invoiceLineWhereClause)
            {
                invoiceLineWhereClause = invoiceLineWhereClause.or(invoiceBaseLineExpression);
            }
            else
            {
                invoiceLineWhereClause = invoiceBaseLineExpression;
            }
        }

        SysDaQueryExpression executionIdWhereClause = new SysDaEqualsExpression(
                new SysDaFieldExpression(invoiceLineBaseRelationship, fieldStr(MarkupPeriodChargeInvoiceLineBaseRelationship, ExecutionId)),
                new SysDaValueExpression(executionId));

        SysDaQueryObject sysDaQuery = new SysDaQueryObject(invoiceLineBaseRelationship);
        sysDaQuery.whereClause(executionIdWhereClause.and(invoiceLineWhereClause));

        return sysDaQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceLineBaseId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected str generateInvoiceLineBaseId()
    {
        return strFmt('%1 %2 %3 %4', int642Str(periodChargeRuleLine.RecId), int642Str(previousRecId), previousSalesId, periodChargeRuleLine.ChargeCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddRelationshipPerCharge</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustAddRelationshipPerCharge()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodChargeRuleLineRelationshipType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MarkupPeriodChargeRuleLineRelationshipType getPeriodChargeRuleLineRelationshipType()
    {
        return MarkupPeriodChargeRuleLineRelationshipType::QuantityThresholdMinAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>