<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is handling events from the final on-hand update in order to ensure that license plates does not have physical on-hand on multiple locations.
/// </summary>
final internal class WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckHandler
{
    private Map constraintCheckParameters;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>numberOfLicensePlatesToCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of license plates that should be checked.
    /// </summary>
    /// <returns>The number of license plates that should be checked.</returns>
    [Hookable(false)]
    internal int numberOfLicensePlatesToCheck()
    {
        if (constraintCheckParameters)
        {
            return constraintCheckParameters.elements();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a check for a licenseplate.
    /// </summary>
    /// <param name = "_licensePlateId">The Id of the license plate.</param>
    /// <param name = "_wmsLocationId">The Id of the location where the license plate is being added.</param>
    /// <param name = "_inventLocationId">The Id of the location where the license plate is being added.</param>
    /// <param name = "_checkUserLocations">A boolean determining if user locations should be included in the check.</param>
    /// <param name = "_inventLocationIdToIgnore">An id of a warehouse that should be excluded from the check.</param>
    [Hookable(false)]
    internal void addCheck(
        WHSLicensePlateId   _licensePlateId,
        WMSLocationId       _wmsLocationId,
        InventLocationId    _inventLocationId,
        boolean             _checkUserLocations,
        InventLocationId    _inventLocationIdToIgnore)
    {
        if (_licensePlateId)
        {
            // see if we should even check at all
            if (!_checkUserLocations)
            {
                //if we are skipping user location checks and the check is for a user location then there is no need to check at all
                if (!constraintCheckParameters && WMSLocation::find(_wmsLocationId, _inventLocationId).whsLocationIsUserLocation())
                {
                    return;
                }
            }

            if (!constraintCheckParameters)
            {
                this.initializeConstraintCheckParameters();
                //only register handlers once
                this.registerEventHandlers();
            }

            this.addSingleLPCheck(_licensePlateId, _checkUserLocations, _inventLocationIdToIgnore);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    private void registerEventHandlers()
    {
        var inventUpdateOnHand = InventUpdateOnhandGlobal::instance().inventUpdateOnhand(); 
        
        inventUpdateOnHand.onOnHandUpdated += eventhandler(this.onOnHandUpdated);
        inventUpdateOnHand.onOnHandAborted += eventhandler(this.onOnHandUpdateAborted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterEventHandlers</Name>
				<Source><![CDATA[
    private void unregisterEventHandlers(InventUpdateOnhand _inventUpdateOnhand)
    {
        _inventUpdateOnhand.onOnHandUpdated -= eventhandler(this.onOnHandUpdated);
        _inventUpdateOnhand.onOnHandAborted -= eventhandler(this.onOnHandUpdateAborted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConstraints</Name>
				<Source><![CDATA[
    private void checkConstraints()
    {
        if (constraintCheckParameters)
        {
            WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheck::construct().performCheck(constraintCheckParameters);
        }
        else //this should never happen if the inventory apis we register on have been used correctly
        {
            WHSInstrumentationLogger logger = WHSInstrumentationLogger::createLogger(classStr(WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckHandler));
            logger.activity('LicensePlateOnMultipleLocationsCheck');
            logger.logError('ConstraintCheckParameters are null which should not happen when event handler is registered on InventUpdateOnHand class.');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeConstraintCheckParameters</Name>
				<Source><![CDATA[
    private void initializeConstraintCheckParameters()
    {
        constraintCheckParameters = new Map(Types::String, Types::Class);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParameters</Name>
				<Source><![CDATA[
    private void updateParameters(
        WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckParameters   _parameters, 
        boolean                                                             _excludeUserLocations,
        InventLocationId                                                    _inventLocationIdExcluded)
    {
        // The strategy is that the last check added determines the values.
        // E.g. if the last check tells that we do not allow the lp on user locations then it does not matter what previous checks have added.
        
        _parameters.parmExcludeUserLocations(_excludeUserLocations);        
        _parameters.excludeWarehouse(_inventLocationIdExcluded);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSingleLPCheck</Name>
				<Source><![CDATA[
    private void addSingleLPCheck(
        WHSLicensePlateId   _licensePlateId,
        boolean             _checkUserLocations,
        InventLocationId    _inventLocationIdToIgnore)
    {
        if (_licensePlateId)
        {
            // we need to consider that checks for the same lp can be added in during the transaction, for example if we move an lp
            // the strategy is that the last set of parameters will be determining how the check should be done
            WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckParameters lpCheckParameter;
            if (constraintCheckParameters.exists(_licensePlateId))
            {
                lpCheckParameter = constraintCheckParameters.lookup(_licensePlateId);

                this.updateParameters(lpCheckParameter, _checkUserLocations, _inventLocationIdToIgnore);
            }
            else
            {
                lpCheckParameter = WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckParameters::construct();
                this.updateParameters(lpCheckParameter, _checkUserLocations, _inventLocationIdToIgnore);
            }

            constraintCheckParameters.insert(_licensePlateId, lpCheckParameter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    private void clear(InventUpdateOnhand _inventUpdateOnhand)
    {
        this.unregisterEventHandlers(_inventUpdateOnhand);
        constraintCheckParameters = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onOnHandUpdateAborted</Name>
				<Source><![CDATA[
    private void onOnHandUpdateAborted(InventUpdateOnhand _inventUpdateOnhand)
    {
        this.clear(_inventUpdateOnhand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onOnHandUpdated</Name>
				<Source><![CDATA[
    private void onOnHandUpdated(InventUpdateOnhand _inventUpdateOnhand)
    {
        this.checkConstraints();
        this.clear(_inventUpdateOnhand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckHandler</c> class.
    /// </summary>
    /// <returns>
    /// The created instance.
    /// </returns>
    /// <remarks>
    /// The class should always be instantiated though the <c>WHSLicensePlateOnMultipleLocationsCheckFinalOnHandUpdateHandlerAccessor</c> class to account for scenarios where updates to multiple companies occur in the same transaction.
    ///</remarks>
    [Hookable(false)]
    static internal WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckHandler construct()
    {
        return new WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>