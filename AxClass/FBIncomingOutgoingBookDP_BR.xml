<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBIncomingOutgoingBookDP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBIncomingOutgoingBookDP_BR</c> class is the Report Data Provider abstract class for the FiscalBooks reports.
/// </summary>
[SRSReportParameterAttribute(classStr(FBincomingOutgoingBookContract_BR))]
abstract class FBIncomingOutgoingBookDP_BR extends SRSReportDataProviderBase
{
    TmpFBIncomingOutgoingBook_BR tmpIncomingOutgoingBook;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the query for FiscalBook
    /// </summary>
    /// <returns>
    /// The query return to retrieve report data
    /// </returns>
    abstract protected Query buildQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryRetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to retrieve Retail Z Report data filtered by contract parameters
    /// </summary>
    /// <returns>
    /// The query return to retrieve report data.
    /// </returns>
    protected Query buildQueryRetail()
    {
        Query                               query;
        QueryBuildDataSource                qbdsBookingPeriodFicalDocument;
        QueryBuildDataSource                qbdsRetailZReport;
        QueryBuildDataSource                qbdsRetailZReportTotalizer;
        QueryBuildDataSource                qbdsRetailZReportTotalizerTaxTrans;
        QueryBuildDataSource                qbdsFBTaxTrans;
        QueryBuildDataSource                qbdsCFOPTable;
        FBincomingOutgoingBookContract_BR   contract = this.parmDataContract() as FBIncomingOutgoingBookContract_BR;

        query = new Query();

        // FBBookingPeriodFiscalDocument_BR
        qbdsBookingPeriodFicalDocument = query.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbdsBookingPeriodFicalDocument.addRange(fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR)).value(SysQuery::value(contract.parmFBBookingPeriodRecId()));

        // RetailZReport_BR
        qbdsRetailZReport = qbdsBookingPeriodFicalDocument.addDataSource(tableNum(RetailZReport_BR));
        qbdsRetailZReport.joinMode(JoinMode::InnerJoin);
        qbdsRetailZReport.relations(true);
        qbdsRetailZReport.addGroupByField(fieldNum(RetailZReport_BR, AccountingDate));
        qbdsRetailZReport.addRange(fieldNum(RetailZReport_BR, AccountingDate)).value(SysQuery::range(contract.parmFromDate(), contract.parmToDate()));

        // RetailZReportTotalizer_BR
        qbdsRetailZReportTotalizer = qbdsRetailZReport.addDataSource(tableNum(RetailZReportTotalizer_BR));
        qbdsRetailZReportTotalizer.joinMode(JoinMode::InnerJoin);
        qbdsRetailZReportTotalizer.relations(true);

        // RetailZReportTotalizerTaxTrans_BR
        qbdsRetailZReportTotalizerTaxTrans = qbdsRetailZReportTotalizer.addDataSource(tableNum(RetailZReportTotalizerTaxTrans_BR));
        qbdsRetailZReportTotalizerTaxTrans.joinMode(JoinMode::InnerJoin);
        qbdsRetailZReportTotalizerTaxTrans.relations(true);
        qbdsRetailZReportTotalizerTaxTrans.addGroupByField(fieldNum(RetailZReportTotalizerTaxTrans_BR, TaxValue));
        qbdsRetailZReportTotalizerTaxTrans.addGroupByField(fieldNum(RetailZReportTotalizerTaxTrans_BR, TaxationCode));

        // FBTaxTrans_BR
        qbdsFBTaxTrans = qbdsRetailZReportTotalizerTaxTrans.addDataSource(tableNum(FBTaxTrans_BR));
        qbdsFBTaxTrans.joinMode(JoinMode::InnerJoin);
        qbdsFBTaxTrans.relations(true);
        qbdsFBTaxTrans.addGroupByField(fieldNum(FBTaxTrans_BR, CFOP));
        qbdsFBTaxTrans.addGroupByField(fieldNum(FBTaxTrans_BR, TaxType));
        qbdsFBTaxTrans.addGroupByField(fieldNum(FBTaxTrans_BR, TaxationCode));
        qbdsFBTaxTrans.addSelectionField(fieldNum(FBTaxTrans_BR, TaxBaseAmount), SelectionField::Sum);
        qbdsFBTaxTrans.addSelectionField(fieldNum(FBTaxTrans_BR, TaxAmount), SelectionField::Sum);
        qbdsFBTaxTrans.addSelectionField(fieldNum(FBTaxTrans_BR, TaxBaseAmountExempt), SelectionField::Sum);
        qbdsFBTaxTrans.addSelectionField(fieldNum(FBTaxTrans_BR, TaxBaseAmountOther), SelectionField::Sum);
        qbdsFBTaxTrans.addRange(fieldNum(FBTaxTrans_BR, TaxType)).value(SysQuery::value(TaxType_BR::ICMS));

        // CFOPTable_BR
        qbdsCFOPTable = qbdsFBTaxTrans.addDataSource(tableNum(CFOPTable_BR));
        qbdsCFOPTable.joinMode(JoinMode::InnerJoin);
        qbdsCFOPTable.addGroupByField(fieldNum(CFOPTable_BR, Name));
        qbdsCFOPTable.addLink(fieldnum(FBTaxTrans_BR, CFOP), fieldNum(CFOPTable_BR, CFOPId));

        qbdsRetailZReport.addOrderByField(fieldNum(RetailZReport_BR, AccountingDate));
        qbdsFBTaxTrans.addOrderByField(fieldNum(FBTaxTrans_BR, CFOP));
        qbdsRetailZReportTotalizerTaxTrans.addOrderByField(fieldNum(RetailZReportTotalizerTaxTrans_BR, TaxValue));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpincomingOutgoingBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TmpFBIncomingOutgoingBook_BR</c> table.
    /// </summary>
    /// <returns>
    /// The <c>TmpFBIncomingOutgoingBook_BR</c>
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TmpFBIncomingOutgoingBook_BR))]
    public TmpFBIncomingOutgoingBook_BR getTmpincomingOutgoingBook()
    {
        select tmpIncomingOutgoingBook;
        return tmpIncomingOutgoingBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpIncomingOutgoingBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a register in the table <c>TmpFBIncomingOutgoingBook_BR</c>
    /// </summary>
    private void insertTmpIncomingOutgoingBook()
    {
        tmpIncomingOutgoingBook.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        Query       query;
        QueryRun    queryRun;

        FiscalDocument_BR               fiscalDocument;
        FiscalDocumentLine_BR           fiscalDocumentLine;
        FiscalDocumentTaxTransView_BR   fiscalDocumentTaxTransView;
        CFOPTable_BR                    cfopTable;
        FiscalDocumentRecId_BR          previousFiscalDocumentRecId;
        CFOPId_BR                       previousCfop;

        FBIncomingOutgoingBookContract_BR       contract;

        contract = this.parmDataContract() as FBIncomingOutgoingBookContract_BR;

        changeCompany(contract.parmFiscalEstablishmentDataArea())
        {
            query = this.buildQuery();
            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                fiscalDocument              = queryRun.get(tableNum(FiscalDocument_BR));
                fiscalDocumentLine          = queryRun.get(tableNum(FiscalDocumentLine_BR));
                fiscalDocumentTaxTransView  = queryRun.get(tableNum(FiscalDocumentTaxTransView_BR));
                cfopTable                   = CFOPTable_BR::findByCFOPId(fiscalDocumentLine.CFOP);

                tmpIncomingOutgoingBook.IncomingOutgoingDate    = fiscalDocument.AccountingDate;
                tmpIncomingOutgoingBook.Specie                  = fiscalDocument.Specie;
                tmpIncomingOutgoingBook.Series                  = fiscalDocument.FiscalDocumentSeries;
                tmpIncomingOutgoingBook.Number                  = fiscalDocument.FiscalDocumentNumber;
                tmpIncomingOutgoingBook.IssueDate               = fiscalDocument.FiscalDocumentDate;
                tmpIncomingOutgoingBook.FiscalDocumentRecId     = fiscalDocument.RecId;
                tmpIncomingOutgoingBook.Name                    = fiscalDocument.ThirdPartyName;
                tmpIncomingOutgoingBook.CNPJ                    = fiscalDocument.ThirdPartyCNPJCPF;
                tmpIncomingOutgoingBook.IE                      = fiscalDocument.ThirdPartyIE;
                tmpIncomingOutgoingBook.State                   = substr(LogisticsPostalAddress::findRecId(fiscalDocument.ThirdPartyPostalAddress).State, 1, 2);

                tmpIncomingOutgoingBook.CFOP                    = fiscalDocumentLine.CFOP;
                tmpIncomingOutgoingBook.Description             = cfopTable.Name;

                tmpIncomingOutgoingBook.TaxBaseAmount           = fiscalDocumentTaxTransView.TaxBaseAmount;
                tmpIncomingOutgoingBook.TaxValue                = fiscalDocumentTaxTransView.TaxValue;
                tmpIncomingOutgoingBook.TaxAmount               = fiscalDocumentTaxTransView.TaxAmount;
                tmpIncomingOutgoingBook.TaxBaseAmountExempt     = fiscalDocumentTaxTransView.TaxBaseAmountExempt;
                tmpIncomingOutgoingBook.TaxBaseAmountOther      = fiscalDocumentTaxTransView.TaxBaseAmountOther;

                if (fiscalDocumentTaxTransView.Type == TaxType_BR::IPI)
                {
                    tmpIncomingOutgoingBook.TaxBaseAmountOther  += fiscalDocumentTaxTransView.TaxAmountOther;
                }

                tmpIncomingOutgoingBook.TaxationCode            = fiscalDocumentTaxTransView.TaxationCode;
                tmpIncomingOutgoingBook.TaxType                 = fiscalDocumentTaxTransView.Type;

                tmpIncomingOutgoingBook.RetailFiscalReceipt     = NoYes::No;

                if (previousFiscalDocumentRecId != fiscalDocument.RecId)
                {
                    tmpIncomingOutgoingBook.ItemAmount          = this.sumByCFOP(fiscalDocument.RecId, fiscalDocumentLine.CFOP);
                    tmpIncomingOutgoingBook.Text                = fiscalDocument.getLegalTextsAsString(DocuRestriction::Internal);
                }
                else
                {
                    if (previousCfop != fiscalDocumentLine.CFOP)
                    {
                        tmpIncomingOutgoingBook.ItemAmount      = this.sumByCFOP(fiscalDocument.RecId, fiscalDocumentLine.CFOP);
                    }
                    else
                    {
                        tmpIncomingOutgoingBook.ItemAmount      = 0;
                    }

                    tmpIncomingOutgoingBook.Text                = "";
                }

                previousFiscalDocumentRecId = fiscalDocument.RecId;
                previousCfop = fiscalDocumentLine.CFOP;

                this.insertTmpIncomingOutgoingBook();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportRetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes retail data to the outgoing report
    /// </summary>
    public void processReportRetail()
    {
        #FiscalBooks_BR

        FBFiscalPrinterDailyReport_BR           fiscalPrinterDailyReport;
        FiscalEstablishment_BR                  fiscalEstablishment;
        LogisticsPostalAddress                  fiscalEstablishmentAddress;
        RetailZReport_Br                        retailZReport;
        RetailZReportTotalizerTaxTrans_BR       retailZReportTotalizerTaxTrans;
        FBTaxTrans_BR                           fbTaxTrans;
        CFOPTable_BR                            cfopTable;
        Query                                   query;
        QueryRun                                queryRun;
        FBIncomingOutgoingBookContract_BR       contract;

        contract = this.parmDataContract() as FBIncomingOutgoingBookContract_BR;

        changeCompany(contract.parmFiscalEstablishmentDataArea())
        {
            fiscalEstablishment = FiscalEstablishment_BR::findById(contract.parmFiscalEstablishmentId());
            fiscalEstablishmentAddress = fiscalEstablishment.postalAddress();

            query = this.buildQueryRetail();
            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                fbTaxTrans                      = queryRun.get(tableNum(FBTaxTrans_BR));
                retailZReportTotalizerTaxTrans  = queryRun.get(tableNum(RetailZReportTotalizerTaxTrans_BR));
                retailZReport                   = queryRun.get(tableNum(RetailZReport_BR));
                fiscalPrinterDailyReport        = FBFiscalPrinterDailyReport_BR::findByAccountingDate(retailZReport.AccountingDate, contract.parmFBBookingPeriodRecId());
                cfopTable                       = queryRun.get(tableNum(CFOPTable_BR));

                tmpIncomingOutgoingBook.clear();

                tmpIncomingOutgoingBook.IncomingOutgoingDate  = retailZReport.AccountingDate;
                tmpIncomingOutgoingBook.Specie                = FiscalDocumentSpecie_BR::CF;
                tmpIncomingOutgoingBook.Series                = #RetailSeries;
                tmpIncomingOutgoingBook.Number                = int2str(fiscalPrinterDailyReport.Number);
                tmpIncomingOutgoingBook.IssueDate             = retailZReport.AccountingDate;
                tmpIncomingOutgoingBook.Name                  = fiscalEstablishment.Name;
                tmpIncomingOutgoingBook.CNPJ                  = fiscalEstablishment.CNPJCPFNum_BR;
                tmpIncomingOutgoingBook.IE                    = fiscalEstablishment.IENum_BR;
                tmpIncomingOutgoingBook.State                 = fiscalEstablishmentAddress.State;

                tmpIncomingOutgoingBook.CFOP                  = fbTaxTrans.CFOP;
                tmpIncomingOutgoingBook.Description           = cfopTable.Name;
                tmpIncomingOutgoingBook.TaxType               = fbTaxTrans.TaxType;
                tmpIncomingOutgoingBook.TaxationCode          = retailZReportTotalizerTaxTrans.TaxationCode;
                tmpIncomingOutgoingBook.TaxValue              = retailZReportTotalizerTaxTrans.TaxValue;
                tmpIncomingOutgoingBook.TaxAmount             = fbTaxTrans.TaxAmount;

                tmpIncomingOutgoingBook.ItemAmount            = fbTaxTrans.taxBaseAmountSum();

                tmpIncomingOutgoingBook.TaxBaseAmount         = fbTaxTrans.TaxBaseAmount;
                tmpIncomingOutgoingBook.TaxBaseAmountExempt   = fbTaxTrans.TaxBaseAmountExempt;
                tmpIncomingOutgoingBook.TaxBaseAmountOther    = fbTaxTrans.TaxBaseAmountOther;

                tmpIncomingOutgoingBook.RetailFiscalReceipt   = NoYes::Yes;

                this.insertTmpIncomingOutgoingBook();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query
    /// </summary>
    /// <param name="_fiscalDocDirection">
    /// The fiscal document direction
    /// </param>
    /// <returns>
    /// The query to retrieve the report data
    /// </returns>
    protected Query queryBuilder(FiscalDocDirection_BR _fiscalDocDirection)
    {
        Query                               query;
        QueryBuildDataSource                qbds;
        QueryBuildRange                     qbr;
        FBincomingOutgoingBookContract_BR   contract = this.parmDataContract() as FBincomingOutgoingBookContract_BR;

        query = new Query();

        qbds = query.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR)).value(SysQuery::value(contract.parmFBBookingPeriodRecId()));

        // FiscalDocument_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocument_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, AccountingDate));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, TotalAmount));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, Specie));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, FiscalDocumentSeries));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, FiscalDocumentNumber));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, FiscalDocumentDate));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, RecId));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, ThirdPartyName));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, ThirdPartyCNPJCPF));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, ThirdPartyIE));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, ThirdPartyPostalAddress));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, DataAreaId));
        qbds.addOrderByField(fieldNum(FiscalDocument_BR, ThirdPartyCNPJCPF));
        qbds.addOrderByField(fieldNum(FiscalDocument_BR, FiscalDocumentDate));
        qbds.addRange(fieldNum(FiscalDocument_BR, Direction)).value(SysQuery::value(_fiscalDocDirection));
        qbds.addRange(fieldNum(FiscalDocument_BR, Status)).value(SysQuery::value(FiscalDocumentStatus_BR::Approved));
        qbds.addRange(fieldNum(FiscalDocument_BR, AccountingDate)).value(SysQuery::range(contract.parmFromDate(), contract.parmToDate()));

        // FiscalDocumentLine_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addGroupByField(fieldNum(FiscalDocumentLine_BR, CFOP));

        // FiscalDocumentTaxTransView_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocumentTaxTransView_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addLink(fieldNum(FiscalDocumentLine_BR, RecId), fieldNum(FiscalDocumentTaxTransView_BR, FiscalDocumentLine));
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTransView_BR, TaxBaseAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTransView_BR, TaxAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTransView_BR, TaxAmountOther), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTransView_BR, TaxBaseAmountExempt), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTransView_BR, TaxBaseAmountOther), SelectionField::Sum);
        qbds.addGroupByField(fieldNum(FiscalDocumentTaxTransView_BR, Type));
        qbds.addGroupByField(fieldNum(FiscalDocumentTaxTransView_BR, TaxValue));
        qbds.addGroupByField(fieldNum(FiscalDocumentTaxTransView_BR, TaxationCode));
        qbr = qbds.addRange(fieldNum(FiscalDocumentTaxTransView_BR, Type));

        if (classIdGet(this) == classNum(FBIncomingBook1ADP_BR) || classIdGet(this) == classNum(FBOutgoingBook2ADP_BR))
        {
            qbr.value(strfmt('(%1 == %2) || (%1 == %3)',
                fieldStr(FiscalDocumentTaxTransView_BR, Type),
                any2int(TaxType_BR::ICMS),
                any2int(TaxType_BR::ICMSST)));
        }
        else
        {
            qbr.value(strfmt('(%1 == %2) || (%1 == %3) || (%1 == %4)',
                fieldStr(FiscalDocumentTaxTransView_BR, Type),
                any2int(TaxType_BR::ICMS),
                any2int(TaxType_BR::IPI),
                any2int(TaxType_BR::ICMSST)));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByCFOP</Name>
				<Source><![CDATA[
    private AmountMST sumByCFOP(FiscalDocumentRecId_BR _fiscalDocumentRecId, CFOPId_BR _cfop)
    {
        FiscalDocumentLine_BR fiscalDocumentLine;

        select sum(AccountingAmount) from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == _fiscalDocumentRecId
                && fiscalDocumentLine.CFOP == _cfop;

        return fiscalDocumentLine.AccountingAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>