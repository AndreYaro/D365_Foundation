<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingProposalController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendNettingProposalController extends SysOperationServiceController implements BatchRetryable
{
    private boolean enablePreview;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal protected void new(
        IdentifierName _className = classStr(CustVendNettingProposalProcessor),
        IdentifierName _methodName = methodStr(CustVendNettingProposalProcessor, process),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::ScheduledBatch)
    {
        super(_className, _methodName, _executionMode);
        if (this.batchInfo() != null)
        {
            this.batchInfo().parmBatchHeader().parmRetriesOnFailure(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CustVendNettingProposalController construct(
        IdentifierName _methodName = methodStr(CustVendNettingProposalProcessor, process),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        return new CustVendNettingProposalController(classStr(CustVendNettingProposalProcessor), _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAutomation</Name>
				<Source><![CDATA[
    internal static CustVendNettingProposalController constructAutomation()
    {
        return new CustVendNettingProposalController(classStr(CustVendNettingProposalController), methodStr(CustVendNettingProposalController, runAutomation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        CustVendNettingProposalController controller = CustVendNettingProposalController::construct();
        controller.parmArgs(_args);
        controller.showBatchRecurrenceButton(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAutomation</Name>
				<Source><![CDATA[
    internal void runAutomation(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        CustVendNettingAutomationCriteria custVendNettingAutomationCriteria;
        select firstonly TransDateType, RuleName from custVendNettingAutomationCriteria
            where custVendNettingAutomationCriteria.ProcessScheduleOccurrence == _processScheduleWorkItem.parmProcessScheduleOccurrenceRecId();
        ProcessScheduleOccurrence processScheduleOccurrence;
        select firstonly ScheduledDateTime from processScheduleOccurrence
            where processScheduleOccurrence.RecId == _processScheduleWorkItem.parmProcessScheduleOccurrenceRecId();

        TransDate transDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(processScheduleOccurrence.ScheduledDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        switch (custVendNettingAutomationCriteria.TransDateType)
        {
            case CustVendNettingAutomationTransDateType::LastDayOfLastMonth:
                transDate = transDate - dayOfMth(transDate);
                break;

            case CustVendNettingAutomationTransDateType::LastDayOfLastWeek:
                transDate = transDate - dayOfWk(transDate);
                break;

            case CustVendNettingAutomationTransDateType::LastDayOfCurrentMonth:
                transDate = endMth(transDate);
                break;

            case CustVendNettingAutomationTransDateType::LastDayOfCurrentWeek:
                transDate = transDate - dayOfWk(transDate) + 7;
                break;

            default:
                break;
        }

        CustVendNettingProposalContract contract = new CustVendNettingProposalContract();
        CustVendNettingProposalProcessor processor = new CustVendNettingProposalProcessor();
        contract.parmTransDate(transDate);
        contract.parmRule(custVendNettingAutomationCriteria.RuleName);
        processor.processAutomation(_processScheduleWorkItem, contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnablePreview</Name>
				<Source><![CDATA[
    internal void setEnablePreview(boolean _enablePreview)
    {
        enablePreview = _enablePreview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateForm</Name>
				<Source><![CDATA[
    public FormName templateForm()
    {
        return formStr(CustVendNettingProposalDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    public ClassDescription defaultCaption()
    {
        return "@CashManagement:NettingAutomationMenuAction";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    public boolean canRunInNewSession()
    {
        return !enablePreview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>