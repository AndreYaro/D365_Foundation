<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionLetterCodeOrderedList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class to handle items that are contained in the <c>CustCollectionLetterCode</c> enumeration in a ordered list to represent state transitions
/// for collection letter calculations.
/// </summary>
public class CustCollectionLetterCodeOrderedList implements Enumerable
{
    List custCollectionLetterCodeOrderedList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the enumerator of the ordered list.
    /// </summary>
    /// <returns>An instance of <c>Enumerator</c> class.</returns>
    public Enumerator getEnumerator()
    {
        return custCollectionLetterCodeOrderedList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new value of <c>CustCollectionLetterCode</c> enumeration to the ordered list after the specified value.
    /// </summary>
    /// <param name = "_newCustCollectionLetterCode">Value to be added.</param>
    /// <param name = "_addAfterCustCollectionLetterCode">Value to add after.</param>
    public void addAfter(CustCollectionLetterCode _newCustCollectionLetterCode, CustCollectionLetterCode _addAfterCustCollectionLetterCode)
    {
        ListIterator listIterator = new ListIterator(custCollectionLetterCodeOrderedList);
        while (listIterator.more())
        {
            if (listIterator.value() == _addAfterCustCollectionLetterCode)
            {
                listIterator.next();
                listIterator.insert(_newCustCollectionLetterCode);
                return;
            }
            listIterator.next();
        }

        throw error(strFmt("@AccountsReceivable:CouldNotAddValueCustCollectionLetterCodeOrderedList", _newCustCollectionLetterCode, _addAfterCustCollectionLetterCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new value of <c>CustCollectionLetterCode</c> enumeration to the start of the ordered list.
    /// </summary>
    /// <param name = "_custCollectionLetterCode">Value to be added.</param>
    public void addStart(CustCollectionLetterCode _custCollectionLetterCode)
    {
        custCollectionLetterCodeOrderedList.addStart(_custCollectionLetterCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new value of <c>CustCollectionLetterCode</c> enumeration to the end of the ordered list.
    /// </summary>
    /// <param name = "_custCollectionLetterCode">Value to be added.</param>
    public void addEnd(CustCollectionLetterCode _custCollectionLetterCode)
    {
        custCollectionLetterCodeOrderedList.addEnd(_custCollectionLetterCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>indexOf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current index location of the given <c>CustCollectionLetterCode</c> enumeration value.
    /// </summary>
    /// <param name = "_currentCustCollectionLetterCode">The <c>CustCollectionLetterCode</c> enumeration value.</param>
    /// <returns>The current index location of the given <c>CustCollectionLetterCode</c> enumeration value.</returns>
    public int indexOf(CustCollectionLetterCode _currentCustCollectionLetterCode)
    {
        ListIterator listIterator = new ListIterator(custCollectionLetterCodeOrderedList);
        Container con = list2Con(custCollectionLetterCodeOrderedList);

        int itemIndex = conFind(con, _currentCustCollectionLetterCode);

        if (itemIndex == 0)
        {
            throw error(strFmt("@AccountsReceivable:ItemNotFoundInCustCollectionLetterCodeOrderedList", enum2Str(_currentCustCollectionLetterCode)));
        }

        return itemIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSortedTempTableMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a temp table which holds the sorted list of <c>CustCollectionLetterCode</c> enumeration values.
    /// </summary>
    /// <param name = "_custCollectionLetterCodeTmp">The temporary table instance, which holds the sorted values.</param>
    public void buildSortedTempTableMap(CustCollectionLetterCodeTmp _custCollectionLetterCodeTmp)
    {
        if (!_custCollectionLetterCodeTmp)
        {
            Counter counter;
            ListIterator listIterator = new ListIterator(custCollectionLetterCodeOrderedList);

            while (listIterator.more())
            {
                counter++;
                _custCollectionLetterCodeTmp.clear();
                _custCollectionLetterCodeTmp.CustCollectionLetterCode = listIterator.value();
                _custCollectionLetterCodeTmp.CustCollectionLetterCodeValue = counter;
                _custCollectionLetterCodeTmp.insert();
                listIterator.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.initializeCustCollectionLetterCodeOrderedList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>CustCollectionLetterCodeOrderedList</c> class to be enumerated in the specified order.
    /// </summary>
    /// <param name="_enumerateInOrder">Enumerate the values in the enumeration in the specified order.</param>
    /// <returns>An instance of <c>CustCollectionLetterCodeOrderedList</c> class.</returns>
    public static CustCollectionLetterCodeOrderedList newFromOrder(SortOrder _enumerateInOrder = SortOrder::Ascending)
    {
        CustCollectionLetterCodeOrderedList orderedList = new CustCollectionLetterCodeOrderedList();
        orderedList.setEnumerateInOrder(_enumerateInOrder);

        return orderedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePreviousCustCollectionLetterCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the previous <c>CustCollectionLetterCode</c> enumeration value based on the current <c>CustCollectionLetterCode</c> enumeration value.
    /// </summary>
    /// <param name = "_currentCustCollectionLetterCode">The current <c>CustCollectionLetterCode</c> enumeration value.</param>
    /// <returns>The previous <c>CustCollectionLetterCode</c> enumeration value.</returns>
    public static CustCollectionLetterCode determinePreviousCustCollectionLetterCode(CustCollectionLetterCode _currentCustCollectionLetterCode)
    {
        CustCollectionLetterCodeOrderedList custCollectionLetterCodeOrderedList = CustCollectionLetterCodeOrderedList::newFromOrder(SortOrder::Descending);

        return custCollectionLetterCodeOrderedList.getNextValue(_currentCustCollectionLetterCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineNextCustCollectionLetterCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the next <c>CustCollectionLetterCode</c> enumeration value based on the current <c>CustCollectionLetterCode</c> enumeration value.
    /// </summary>
    /// <param name = "_currentCustCollectionLetterCode">The current <c>CustCollectionLetterCode</c> enumeration value.</param>
    /// <returns>The next <c>CustCollectionLetterCode</c> enumeration value.</returns>
    public static CustCollectionLetterCode determineNextCustCollectionLetterCode(CustCollectionLetterCode _currentCustCollectionLetterCode)
    {
        CustCollectionLetterCodeOrderedList custCollectionLetterCodeOrderedList = CustCollectionLetterCodeOrderedList::newFromOrder();

        return custCollectionLetterCodeOrderedList.getNextValue(_currentCustCollectionLetterCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustCollectionLetterCodeOrderedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the list with all the applicable values of <c>CustCollectionLetterCode</c> enumeration in ascending order.
    /// </summary>
    protected void initializeCustCollectionLetterCodeOrderedList()
    {
        custCollectionLetterCodeOrderedList = new List(Types::Enum);
        custCollectionLetterCodeOrderedList.addEnd(CustCollectionLetterCode::None);
        custCollectionLetterCodeOrderedList.addEnd(CustCollectionLetterCode::CollectionLetter1);
        custCollectionLetterCodeOrderedList.addEnd(CustCollectionLetterCode::CollectionLetter2);
        custCollectionLetterCodeOrderedList.addEnd(CustCollectionLetterCode::CollectionLetter3);
        custCollectionLetterCodeOrderedList.addEnd(CustCollectionLetterCode::CollectionLetter4);
        custCollectionLetterCodeOrderedList.addEnd(CustCollectionLetterCode::Collection);
        custCollectionLetterCodeOrderedList.addEnd(CustCollectionLetterCode::All);
        custCollectionLetterCodeOrderedList.addEnd(CustCollectionLetterCode::CollectionPerCust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnumerateInOrder</Name>
				<Source><![CDATA[
    private void setEnumerateInOrder(SortOrder _enumerateInOrder)
    {
        if (_enumerateInOrder == SortOrder::Descending)
        {
            this.reverseOrderedList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseOrderedList</Name>
				<Source><![CDATA[
    private void reverseOrderedList()
    {
        List reversedCustCollectionLetterCodeOrderedList = new List(Types::Enum);
        ListEnumerator enumerator = this.getEnumerator() as ListEnumerator;

        while (enumerator.moveNext())
        {
            reversedCustCollectionLetterCodeOrderedList.addStart(enumerator.current());
        }

        custCollectionLetterCodeOrderedList = reversedCustCollectionLetterCodeOrderedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextValue</Name>
				<Source><![CDATA[
    private CustCollectionLetterCode getNextValue(CustCollectionLetterCode _currentCustCollectionLetterCode)
    {
        ListIterator listIterator = new ListIterator(custCollectionLetterCodeOrderedList);
        while (listIterator.more())
        {
            if (listIterator.value() == _currentCustCollectionLetterCode)
            {
                listIterator.next();
                if (listIterator.more())
                {
                    return listIterator.value();
                }
                else
                {
                    throw error(strFmt("@AccountsReceivable:CouldNotGetNextValueCustCollectionLetterCodeOrderedList", enum2Str(_currentCustCollectionLetterCode)));
                }
            }
            listIterator.next();
        }

        throw error(strFmt("@AccountsReceivable:ItemNotFoundInCustCollectionLetterCodeOrderedList", enum2Str(_currentCustCollectionLetterCode)));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>