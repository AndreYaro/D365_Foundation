<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblDocumentAE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates time list from average earning documents.
/// </summary>
abstract class RPayTblDocumentAE implements RPayTblIDocument
{
    RPayTblTimeList     tblTimeList;
    RPayTblContext      tblContext;

    RPayAverageEarnEmplPeriodTable  document;
    RHRMEmplTable                   emplTable;
    RPayAverageEarnEngine           averageEarnEngine;
    boolean                         isReverseDocument; //document is reverse

    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendDependentTimeList</Name>
				<Source><![CDATA[
/// <summary>
    /// The method adds time to fill the gaps for reversed periods to fill info about corrected periods.
    /// </summary>
    private void appendDependentTimeList()
    {
        RPayTblTimeList  dependTimeList;
        ListEnumerator   listEnum;
        RPayTblTime      tblTime;
        RPayTblDimension dimension;

        if (tblTimeList && tblTimeList.elements())
        {
            dependTimeList = this.createDependentTimeList(tblTimeList);

            listEnum = dependTimeList.periods().getEnumerator();
            while (listEnum.moveNext())
            {
                tblTime = listEnum.current();
                dimension = tblTime.dimension();
                this.insertPeriod2List(
                    tblTime.parmStartDate(),
                    tblTime.parmEndDate(),
                    tblTime.parmHours(),
                    dimension.parmTimeCode(),
                    dimension.parmCalendarId(),
                    dimension.parmPayFormType(),
                    dimension.parmCorrectedPeriod());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTimeList</Name>
				<Source><![CDATA[
    private void createTimeList()
    {
        tblTimeList = new RPayTblTimeList();

        if (document.RecId)
        {
            this.initTimeListFromDocument();

            if (isReverseDocument)
            {
                this.appendDependentTimeList();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimeList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets time list.
    /// </summary>
    /// <returns>
    /// The <c>RPayTblTimeList</c> list object.
    /// </returns>
    public RPayTblTimeList getTimeList()
    {
        if (!tblTimeList)
        {
            this.createTimeList();
        }

        return tblTimeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hrsSign</Name>
				<Source><![CDATA[
        private int hrsSign()
    {
        return isReverseDocument ? -1 : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        private void init(RPayAverageEarnEmplPeriodTable _document, RPayTblContext _tblContext)
    {
        document          = _document;
        tblContext        = _tblContext;
        emplTable         = RHRMEmplTable::find(document.EmplId);
        isReverseDocument = document.isReverseLine();
        this.initAEEngine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAEEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized Average Earning engine.
    /// </summary>
    protected void initAEEngine()
    {
        averageEarnEngine = RPayAverageEarnEngine::construct(document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTimeListFromDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized time list.
    /// </summary>
    abstract protected void initTimeListFromDocument()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDateRange2List</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts Date range to result list.
    /// </summary>
    /// <param name="_startDate">
    /// start date
    /// </param>
    /// <param name="_endDate">
    /// end date
    /// </param>
    /// <param name="_timeCode">
    /// time code
    /// </param>
    protected void insertDateRange2List(StartDate _startDate, EndDate _endDate, RPayTblTimeCode _timeCode)
    {
        Stack dateStack = new Stack();

        RPayCalendarDateLine    calendarDateLine;
        RPayTblTimeTable        tblTimeTable;

        StartDate       periodStartDate;
        EndDate         periodEndDate;
        TransDate       currentDate;
        TransDate       correctedPeriod = document.getCorrectedPeriod();
        RPayTblDayHour  currentHr, prevHr, dateSecs;

        for (currentDate = _startDate; currentDate <= _endDate; ++currentDate)
        {
            dateSecs = 0;

            while select calendarDateLine
                order by TransDate
                where calendarDateLine.CalendarId == emplTable.PayCalendarId &&
                      calendarDateLine.TransDate  == currentDate
                exists join tblTimeTable
                    where tblTimeTable.PayTblTimeCode == calendarDateLine.PayCalendarTimeCode &&
                            tblTimeTable.PayFormType  == emplTable.PayFormType
            {
                dateSecs += calendarDateLine.capacity();
            }

            currentHr = dateSecs / #SecondsPerHour;

            if (currentHr != prevHr)
            {
                if (dateStack.qty())
                {
                    [periodStartDate] = dateStack.pop();
                    periodEndDate     = currentDate - 1;
                    this.insertPeriod2List(periodStartDate, periodEndDate, prevHr * this.hrsSign(), _timeCode, emplTable.PayCalendarId, emplTable.PayFormType, correctedPeriod);
                }

                dateStack.push([currentDate]); //start of the subperiod

                prevHr = currentHr;
            }
        }

        if (dateStack.qty())
        {
            [periodStartDate] = dateStack.pop();
            periodEndDate     = _endDate;
            this.insertPeriod2List(periodStartDate, periodEndDate, currentHr * this.hrsSign(), _timeCode, emplTable.PayCalendarId, emplTable.PayFormType, correctedPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPeriod2List</Name>
				<Source><![CDATA[
        private void insertPeriod2List(startDate _startDate,
                                     EndDate _endDate,
                                     RPayDayHour _hours,
                                     RPayTblTimeCode _timeCode,
                                     RPayCalendarId _calendarId,
                                     RPayFormType _formType,
                                     TransDate _correctedPeriod)
    {
        RPayTblTime         time;
        RPayTblDimension    dimension;

        if (_hours)
        {
            time      = new RPayTblTime();
            dimension = time.dimension();

            dimension.parmCalendarId(_calendarId);
            dimension.parmPayFormType(_formType);
            dimension.parmTimeCode(_timeCode);
            dimension.parmCorrectedPeriod(_correctedPeriod);

            dimension.clone(time.dimension());
            time.parmStartDate(_startDate);
            time.parmEndDate(_endDate);
            time.parmHours(_hours);
            time.parmSrcDocumentAttr(document.TableId, document.RecId);

            tblTimeList.addEnd(time);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of a class.
    /// </summary>
    /// <param name="_document">
    /// The document.
    /// </param>
    /// <param name="_tblContext">
    /// The time context.
    /// </param>
    /// <returns>
    /// The instantiated object.
    /// </returns>
    static public RPayTblDocumentAE construct(RPayAverageEarnEmplPeriodTable _document, RPayTblContext  _tblContext)
    {
        RPayTblDocumentAEAttribute docTypeAttribute = new RPayTblDocumentAEAttribute(_document.averageEarnCodeType);
        RPayTblDocumentAE  tblDocument = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(RPayTblDocumentAE), docTypeAttribute);

        tblDocument.init(_document, _tblContext);

        return tblDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDependentTimeList</Name>
				<Source><![CDATA[
    private RPayTblTimeList createDependentTimeList(RPayTblTimeList _tblTimeList)
    {
        RPayTblTimeList         dependTimeList;
        RPayTblStream           tblStream;
        RPayTblTimeList         tempTblTimeList;
        ListEnumerator          dimListEnumerator;
        RPayTblIDimensionFiller tblDimension;

        tempTblTimeList = _tblTimeList.clone();

        dimListEnumerator = RPayTblDimension::getDimensions().getEnumerator();

        while (dimListEnumerator.moveNext())
        {
            tblDimension = dimListEnumerator.current();
            tempTblTimeList = tempTblTimeList.fillDimension(tblDimension, tblContext);
        }

        tblStream = new RPayTblStream();
        dependTimeList = tblStream.readTimeList(tempTblTimeList, tblContext, document.CorrectedPeriod);

        if (!dependTimeList.isEmpty())
        {
            dependTimeList.reverse();
            dependTimeList = dependTimeList.substract(tempTblTimeList);
        }

        return dependTimeList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>