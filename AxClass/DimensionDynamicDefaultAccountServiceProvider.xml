<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionDynamicDefaultAccountServiceProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionDynamicDefaultAccountServiceProvider</c> class resolves dynamic default account contracts.
/// </summary>
class DimensionDynamicDefaultAccountServiceProvider extends DimensionNameValueListServiceProvider
{
    #DimensionServiceFaults
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForDynamicDefaultAccountContract</Name>
				<Source><![CDATA[

    /// <summary>
    ///    Creates a new instance of the <c>DimensionDynamicDefaultAccountServiceProvider</c> class for the specified
    ///    dynamic default account contract.
    /// </summary>
    /// <param name="_dimensionDynamicDefaultAccountContract">
    ///    An instance of the <c>DimensionDynamicDefaultAccountContract</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>DimensionDynamicDefaultAccountServiceProvider</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static DimensionDynamicDefaultAccountServiceProvider newForDynamicDefaultAccountContract(
        DimensionDynamicDefaultAccountContract _dimensionDynamicDefaultAccountContract)
    {
        DimensionDynamicDefaultAccountServiceProvider serviceProvider = new DimensionDynamicDefaultAccountServiceProvider();
        serviceProvider.initialize(_dimensionDynamicDefaultAccountContract);

        return serviceProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the value list and returns the record ID, and updates the dimension storage result with any errors.
    /// </summary>
    /// <returns>
    ///    The record ID of the saved record.
    /// </returns>
    protected RecId save()
    {
        DimensionDynamicDefaultAccountContract contract =
            this.getDimensionNameValueListContract() as DimensionDynamicDefaultAccountContract;

        // Check if the value exists before calling the helper to avoid an exception.
        DimensionAttributeValue dimensionAttributeValue =
            DimensionAttributeValue::findByDimensionAttributeAndValueNoError(
                LedgerDynamicAccountHelper::getDimensionAttributeFromAccountType(contract.parmAccountType(), enumName2Id(contract.parmEnumName()), contract.parmSecondaryAccountValue()),
                contract.parmPrimaryDimensionAttributeValue().parmValue(),
                false,
                true);

        DimensionDynamicDefaultAccount ledgerDimensionId = 0;

        if (dimensionAttributeValue)
        {
            // If the DisplayValue is blank we should use whatever was passed in
            str value = dimensionAttributeValue.DisplayValue != '' ? dimensionAttributeValue.DisplayValue : contract.parmPrimaryDimensionAttributeValue().parmValue();

            // Use the helper to get the value to take advantage of the caching.
            ledgerDimensionId = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumberEnumModule(
                value,
                contract.parmAccountType(),
                enumName2Id(contract.parmEnumName()),
                contract.parmSecondaryAccountValue());
        }

        if (!ledgerDimensionId)
        {
            this.getDimensionStorageResult().parmStatus(DimensionStorageResultStatus::InvalidDimensionAttributeValue);
            this.getDimensionStorageResult().parmInvalidValue(contract.parmPrimaryDimensionAttributeValue());
        }

        return ledgerDimensionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resolves and returns a <c>DimensionStorageResult</c> instance in the company context of the dynamic account instance.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>DimensionStorageResult</c> class.
    /// </returns>
    public DimensionStorageResult resolve()
    {
        DimensionStorageResult dimStorageResult = null;

        if (this.validateNameValueListContract())
        {
            DimensionDynamicDefaultAccountContract contract =
                this.getDimensionNameValueListContract() as DimensionDynamicDefaultAccountContract;

            SelectableDataArea dimensionCompany = contract.parmCompany();

            changecompany (dimensionCompany)
            {
                DimensionHierarchyType dimensionHierarchyType = DimensionHierarchyHelper::getHierarchyTypeByAccountType(contract.parmAccountType(), enumName2Id(contract.parmEnumName()), contract.parmSecondaryAccountValue());

                if (dimensionHierarchyType == DimensionHierarchyType::AccountStructure)
                {
                    // Use the default account service provider to resolve the ledger account type.
                    LedgerDimensionDefaultAccountContract defaultAccountContract =
                        new LedgerDimensionDefaultAccountContract();

                    List values = new List(Types::Class);
                    values.addEnd(contract.parmPrimaryDimensionAttributeValue());
                    defaultAccountContract.parmValues(values);

                    LedgerDimensionDefaultAccountServiceProvider defaultAccountServiceProvider =
                        LedgerDimensionDefaultAccountServiceProvider::newForLedgerDimensionDefaultAccountContract(
                            defaultAccountContract);

                    dimStorageResult = defaultAccountServiceProvider.resolve();
                }
                else
                {
                    this.getDimensionStorageResult().parmSavedRecId(this.save());
                }
            }
        }

        if (dimStorageResult == null)
        {
            dimStorageResult = this.getDimensionStorageResult();
        }

        return dimStorageResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNameValueListContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>DimensionNameValueListContract</c> instance and updates the dimension storage result with any errors.
    /// </summary>
    /// <returns>
    ///    true if the contract is valid; otherwise, false.
    /// </returns>
    protected boolean validateNameValueListContract()
    {
        if (super())
        {
            DimensionDynamicDefaultAccountContract dimensionDynamicDefaultAccountContract =
                this.getDimensionNameValueListContract() as DimensionDynamicDefaultAccountContract;

            if (dimensionDynamicDefaultAccountContract == null ||
                dimensionDynamicDefaultAccountContract.parmPrimaryDimensionAttributeValue() == null ||
                dimensionDynamicDefaultAccountContract.parmValues().elements() > 0)
            {
                this.getDimensionStorageResult().parmStatus(DimensionStorageResultStatus::InvalidContract);
            }
        }

        return this.getDimensionStorageResult().isValid();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>