<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxDeclarationPeriod_NL</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxDeclarationPeriod_NL
{
    private const int invalidPeriodCode = -1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>quarter</Name>
				<Source><![CDATA[
    public int quarter(date _date)
    {
        int ret = -1;
        ;
        if (_date)
        {
            switch (mthofyr(_date))
            {
                case 01: ret = 21; break;
                case 02: ret = 22; break;
                case 03: ret = 23; break;
                case 04: ret = 24; break;
                case 05: ret = 25; break;
                case 06: ret = 26; break;
                case 07: ret = 27; break;
                case 08: ret = 28; break;
                case 09: ret = 29; break;
                case 10: ret = 30; break;
                case 11: ret = 31; break;
                case 12: ret = 32; break;
                default: ret = -1; break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is specified period valid for NL Tax Declaration
    /// </summary>
    public static boolean isValidPeriod(TaxPeriod _taxPeriod, date _startDate)
    {
        return TaxDeclarationPeriod_NL::code(_taxPeriod, _startDate) != invalidPeriodCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>code</Name>
				<Source><![CDATA[
    public static int code(TaxPeriod _taxPeriod, date _startDate)
    {
        TaxDeclarationPeriod_NL declarationPeriod = TaxDeclarationPeriod_NL::construct();
        TaxPeriodHead           taxPeriodHead = TaxPeriodHead::find(_taxPeriod);
        int ret = invalidPeriodCode;
        ;
        if (taxPeriodHead)
        {
            if (TaxReportPeriod::dateIsInPeriod(_taxPeriod, _startDate))
            {
                switch (TaxDeclarationPeriod_NL::periodLength(_taxPeriod, _startDate))
                {
                    case 28, 29, 30, 31:
                        ret = mthofyr(_startDate);
                        break;
                    case 90, 91, 92:
                        ret = declarationPeriod.quarter(_startDate);
                        break;
                    case 364, 365, 366:
                        ret = 40;
                        break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxDeclarationPeriod_NL construct()
    {
        return new TaxDeclarationPeriod_NL();
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodLength</Name>
				<Source><![CDATA[
    public static int periodLength(TaxPeriod     _taxPeriod,
                                          TaxPeriodDate _taxPeriodDate)
    {
        int ret = -1;
        TaxReportPeriod taxReportPeriod;
        ;
        if (_taxPeriod && _taxPeriodDate)
        {
            select firstonly FromDate, ToDate
                from taxReportPeriod
                index hint TaxPeriodIdx
                where taxReportPeriod.TaxPeriod == _taxPeriod
                   && taxReportPeriod.FromDate  <= _taxPeriodDate
                   && taxReportPeriod.ToDate    >= _taxPeriodDate;

            ret =  date2num(taxReportPeriod.ToDate) -  date2num(taxReportPeriod.FromDate) + 1;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>