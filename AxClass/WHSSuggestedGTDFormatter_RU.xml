<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSuggestedGTDFormatter_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform;

/// <summary>
/// Implements converting logic: list of suggested GTDs to string
/// </summary>
public class WHSSuggestedGTDFormatter_RU
{
    private List    gtdIds;

    private const boolean   IsSkipEmptyItems    = true;
    private const int       MaxItemsToShow      = 5;
    private const str       ItemSeparator       = ', ';
    private const str       ItemWrapper         = '"%1"';
    private const str       OutputWrapper       = '{%1}';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSSuggestedGTDFormatter_RU construct()
    {
        return new WHSSuggestedGTDFormatter_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGtdList</Name>
				<Source><![CDATA[
    public List parmGtdList(List _gtdIds = gtdIds)
    {
        gtdIds = _gtdIds;

        return gtdIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>WHSSuggestedGTDFormatter_RU</c> based on provided parameters
    /// </summary>
    /// <param name = "_gtdIds">List of suggested GTDs</param>
    /// <returns>Instance of the formatter</returns>
    public static WHSSuggestedGTDFormatter_RU newFromParams(List _gtdIds)
    {
        WHSSuggestedGTDFormatter_RU instance = WHSSuggestedGTDFormatter_RU::construct();

        instance.parmGtdList(_gtdIds);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main entry point
    /// </summary>
    /// <returns>Formatted string</returns>
    public str run()
    {
        if (!this.validate())
        {
            return '';
        }

        return this.format();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if operation can be run
    /// </summary>
    /// <returns>True if validation passed</returns>
    protected boolean validate()
    {
        boolean ret = true;

        if (!gtdIds)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>format</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements formatting logic
    /// </summary>
    /// <returns>Formatted string</returns>
    protected str format()
    {
        return this.gtds2String();
    }

]]></Source>
			</Method>
			<Method>
				<Name>gtds2String</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts gtds list to string
    /// </summary>
    /// <returns>Converted string</returns>
    private str gtds2String()
    {
        ListEnumerator              le              = gtdIds.getEnumerator();
        int                         itemsCount      = 1;
        System.Text.StringBuilder   output          = PooledStringBuilder::GetInstance();

        while (le.moveNext())
        {
            if (itemsCount > MaxItemsToShow)
            {
                break;
            }

            if (!le.current() && this.skipEmptyItem())
            {
                continue;
            }

            this.addItem(output, this.formatItem(le.current()));

            itemsCount++;
        }

        return this.wrapOutput(output);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts item list - gtd - to proper format 
    /// </summary>
    /// <param name = "_item">Item of the gtds list</param>
    /// <returns>Formatted item string</returns>
    protected str formatItem(str _item)
    {
        return this.wrapItem(_item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds formatted item to formatted string
    /// </summary>
    /// <param name = "_output">Formatted string</param>
    /// <param name = "_item">Formatted item</param>
    protected void addItem(System.Text.StringBuilder _output, str _item)
    {
        if (_output.Length)
        {
            _output.Append(ItemSeparator);
        }
        
        _output.Append(_item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipEmptyItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if empty gtd value should be added to formmated gtd list
    /// </summary>
    /// <returns>True if item should be skipped</returns>
    protected boolean skipEmptyItem()
    {
        return IsSkipEmptyItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Surrounds gtd value with extra separators or symbols
    /// </summary>
    /// <param name = "_item">GTD</param>
    /// <param name = "_itemWrapper">Template for wrapping</param>
    /// <returns>Wrapped gtd</returns>
    protected str wrapItem(str _item, str _itemWrapper = ItemWrapper)
    {
        return strFmt(_itemWrapper, _item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Surrounds formatted list of items with extra separators, symbols or descriptions
    /// </summary>
    /// <param name = "_output">Formatted list of gtds</param>
    /// <param name = "_containerWrapper">Template for wrapping</param>
    /// <returns>Wrapped formatted list of gtds</returns>
    protected str wrapOutput(System.Text.StringBuilder _output, str _outputWrapper = OutputWrapper)
    {
        return strFmt(_outputWrapper, _output.ToString());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>