<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_RegistryDepositAmounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The registry deposit amounts report.
/// </summary>
class OxmlExcelReport_RegistryDepositAmounts extends OXMLExcelReport_RPay implements BatchRetryable
{
    private const str LocalizationFeatureReference = 'EEU-00025';

    QueryRun reportQR;
    RPayDepositTable depositTable;

    RPayAmount totalAmount;
    int        stateCurrent;

    #define.ReportHeader('ReportHeader')
    #define.TableHeader('TableHeader')
    #define.Body('Body')
    #define.Total('Total')
    #define.Footer('Footer')
    #define.NewPage('NewPage') //pseudo section used to define new page action

    #define.WidthPage(97)

    #define.StateStart  (0)
    #define.StatePrint  (1)
    #define.StateEnd    (2)

    #define.FileName('Deposit amonts')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(14.4)

        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #WidthPage);

        stateCurrent = #StateStart;

        while (reportQR.next())
        {
            depositTable = reportQR.get(tableNum(RPayDepositTable));

            this.handleAction(this.defineActionSeq());
        }

        if (this.isSectionPrinted())
        {
            this.handleAction(this.defineActionSeq());
            this.setPrintArea();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineActionSeq</Name>
				<Source><![CDATA[
    private container defineActionSeq()
    {
        container con;

        if (stateCurrent == #StateStart)
        {
            con = [#ReportHeader, #TableHeader, #Body];

            stateCurrent = #StatePrint;
        }
        else if (stateCurrent == #StatePrint)
        {
            if (this.isNewPage())
            {
                con = [#NewPage, #TableHeader];
            }

            if (depositTable == null)
            {
                con = [#Total, #NewPage, #Footer];
                stateCurrent = #StateEnd;
            }
            else
            {
                con += [#Body];
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return #FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + curUserId() + '_' + strRem(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    private void fillBody()
    {
        this.insertValueToSection('Department', this.getDept());
        this.insertValueToSection('PaySheetNo', depositTable.PaySheetNum);
        this.insertValueToSection('FIO', RHRMEmplTable::find(depositTable.EmplId).personTable().fio());
        this.insertValueToSection('Amount', depositTable.DepositSum);

        totalAmount += depositTable.DepositSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #ReportHeader:
                this.fillReportHeader();
                break;
            case #TableHeader:
                this.fillTableHeader();
                break;
            case #Body:
                this.fillBody();
                break;
            case #Footer:
                this.fillFooter();
                break;
            case #Total:
                this.fillTotal();
                break;
            case #NewPage:
                this.newPage();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    private void fillFooter()
    {
        this.insertValueToSection('ChiefAccTxt', "@GLS100677");
        this.insertValueToSection('AccauntantTxt', "@GLS101922");
        this.insertValueToSection('CashierTxt', "@GLS100680");

        this.insertValueToSection('ChiefAccauntant', OfficialsTable_RU::nameAccountant());
        this.insertValueToSection('Cashier', OfficialsTable_RU::find(OffReportType_RU::CashSlip, OffPosition_RU::Cashier).Name);

        stateCurrent = #StateEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    private void fillReportHeader()
    {
        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());
        CurrencyNameDeclension_RU currencyNameDeclension = CurrencyNameDeclension_RU::find(CompanyInfoHelper::standardCurrency(),
                                                                                           infolog.language());

        this.insertValueToSection('ApprovedTxt', "@RUP699");
        this.insertValueToSection('AuthorityTxt', "@RUP700");
        this.insertValueToSection('AuthorityDateTxt', "@RUP701");
        this.insertValueToSection('ReportNameTxt', "@RUP698");
        this.insertValueToSection('OnTxt', "@GLS111248");
        this.insertValueToSection('YrTxt', "@GLS102432");
        this.insertValueToSection('CodesTxt', "@SYS17782");
        this.insertValueToSection('OKUDTxt', "@RUP2715");
        this.insertValueToSection('DateTxt', "@SYS80056");
        this.insertValueToSection('OKPOTxt', "@GLS101039");
        this.insertValueToSection('FKRTxt', "@RUP2723");
        this.insertValueToSection('KCSRTxt', "@RUP2722");
        this.insertValueToSection('KVRTxt', "@RUP2721");
        this.insertValueToSection('OKEITxt', "@RUP2709");
        this.insertValueToSection('CompanyNameTxt', "@RUP2713");
        this.insertValueToSection('DivisionTxt', "@RUP2717");
        this.insertValueToSection('PurposeTxt', "@RUP2716");
        this.insertValueToSection('ExpenceTypeTxt', "@GLS103770");
        this.insertValueToSection('UnitTxt', "@SYS40864");
        this.insertValueToSection('AnaliticTxt', "@RUP2718");
        this.insertValueToSection('DebitTxt', "@RUP2719");
        this.insertValueToSection('CreditTxt', "@RUP2720");

        if (depositTable.PayPeriod)
        {
            this.insertValueToSection('Month', mthName(mthOfYr(depositTable.PayPeriod)));
            this.insertValueToSection('Year', year(depositTable.PayPeriod));
            this.insertValueToSection('DocDate', date2str(depositTable.PayPeriod, 123, DateDay::None, DateSeparator::Dot, DateMonth::Digits2, DateSeparator::Dot, DateYear::Digits4, DateFlags::None));
        }

        this.insertValueToSection('CompanyName', CompanyInfo::find().Name);
        this.insertValueToSection('Unit', currencyNameDeclension.ShortName);
        this.insertValueToSection('Debit', this.getDebit());
        this.insertValueToSection('Credit', LedgerDimensionFacade::getMainAccountFromLedgerDimension(RPayPaymentParameters::find().DepositLedgerDimension));
        this.insertValueToSection('OKPO', CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), depositTable.PayPeriod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableHeader</Name>
				<Source><![CDATA[
    private void fillTableHeader()
    {
        this.insertValueToSection('StructTxt', "@GLS100821");
        this.insertValueToSection('NumTxt', "@RUP2724");
        this.insertValueToSection('FIOTxt', "@RUP318");
        this.insertValueToSection('CntTypeTxt', "@RUP2726");
        this.insertValueToSection('AmountTxt', "@RUP195");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotal</Name>
				<Source><![CDATA[
    private void fillTotal()
    {
        this.insertValueToSection('TotalAmount', totalAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebit</Name>
				<Source><![CDATA[
    private MainAccountNum getDebit()
    {
        RPaytitleposting payTitlePosting;
        RHRMEmplTable    emplTable = RHRMEmplTable::find(depositTable.EmplId);

        payTitlePosting = RPaytitleposting::findAccount(RPayParameters::find().OffsetAccountPostingProfile,
                                                        '',
                                                        emplTable.EmployeeId,
                                                        emplTable.PayHRMOrganizationId,
                                                        emplTable.HcmTitle);

        return LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(payTitlePosting.LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDept</Name>
				<Source><![CDATA[
    private Name getDept()
    {
        return RPayHRMOrganization::find(RPayHistory::getHistoryLineByDate(depositTable.EmplId, endmth(depositTable.PayPeriod)).HrmOrganizationId).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAction</Name>
				<Source><![CDATA[
    private void handleAction(container _actions)
    {
        int i;

        for (i = 1; i <= conLen(_actions); ++i)
        {
            if (conPeek(_actions, i) == #NewPage)
            {
                this.newPage();
            }
            else
            {
                this.execute(conPeek(_actions, i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Total);
        this.addSection(#ReportHeader);
        this.addSection(#TableHeader);
        this.addSection(#Body);
        this.addSection(#Footer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewPage</Name>
				<Source><![CDATA[
    private boolean isNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(#Body);

        return (pageHeight - currentHeight < requiredHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPage</Name>
				<Source><![CDATA[
    private void newPage()
    {
        document.insertPageBreak(currentRow);
        currentHeight = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the running query.
    /// </summary>
    /// <param name="_qr">
    /// The instance of the <c>QueryRun</c> class.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setQueryRun(QueryRun _qr)
    {
        reportQR = _qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayRegistryDepositAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        return SysQuery::countTotal(reportQR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>