<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayReverse_PayJournalTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayReverse_PayJournalTable extends RPayReverse
{
    boolean restoreOrigLines;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogBoxText</Name>
				<Source><![CDATA[
        protected str dialogBoxText()
    {
        return "@RUP2963";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrigJournal</Name>
				<Source><![CDATA[
        private RPayJournalTable findOrigJournal(RPayJournalTable _journalTableNew)
    {
        TransLink_RU     transLink;
        RPayJournalTable journalTable;
        RefRecId         refSec, refPri;

        refSec = _journalTableNew.RecId;

        while (refSec)
        {
            select firstonly RefPri from transLink
                where  transLink.RefSec == refSec
                    && transLink.RefPri != refSec
                    && transLink.RefTableId == _journalTableNew.TableId;

            if (transLink.RefPri)
            {
                refPri = transLink.RefPri;
            }

            refSec = transLink.RefPri;
        }

        journalTable = RPayJournalTable::findRecId(refPri);

        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayTransFromOrigLine</Name>
				<Source><![CDATA[
        private void initPayTransFromOrigLine(RPayJournalTrans _payJournalTransOrig, RPayJournalTrans _payJournalTransNew)
    {
        RPayGroupMember     payGroupMember;
        RHRMEmplTable       emplTable;
        RPayTrans           payTrans;

        if (_payJournalTransOrig.TransType == RPayTypeString::Employee)
        {
             emplTable = RHRMEmplTable::find(_payJournalTransNew.Number);

            payTrans.initFromPayJournalTrans(emplTable, _payJournalTransNew);
            payTrans.CorrectedPeriod = endmth(_payJournalTransOrig.TransDate);
            payTrans.PayPeriod       = RPayParameters::payPeriod();
            payTrans.insert();
        }
        else
        {
            while select PersonEmplId from payGroupMember
                where payGroupMember.PayGroup == _payJournalTransOrig.Number
            {
                emplTable = RHRMEmplTable::find(payGroupMember.PersonEmplId);
                if (emplTable.checkEmplBeforeCalc(_payJournalTransNew.TransDate))
                {
                    payTrans.initFromPayJournalTrans(emplTable, _payJournalTransNew);
                    payTrans.CorrectedPeriod = endmth(_payJournalTransOrig.TransDate);
                    payTrans.PayPeriod       = RPayParameters::payPeriod();
                    payTrans.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRestoreOrigLines</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmRestoreOrigLines(boolean _resoreOrigLines = restoreOrigLines)
    {
        restoreOrigLines = restoreOrigLines;

        return restoreOrigLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreOriginalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the original lines.
    /// </summary>
    /// <param name="_journalTableNew">
    /// The payroll journal to restore data from.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void restoreOriginalLines(RPayJournalTable _journalTableNew)
    {
        RPayJournalTable journalTableOrig;
        RPayJournalTrans journalTransOrig, journalTransNew;
        RPayTrans        payTrans;

        journalTableOrig = this.findOrigJournal(_journalTableNew);

        while select * from journalTransOrig
            where journalTransOrig.JournalId == journalTableOrig.JournalId
            notexists join payTrans
                where payTrans.SourceRecId == journalTransOrig.RecId
        {
            journalTransNew.data(journalTransOrig);
            journalTransNew.JournalId = _journalTableNew.JournalId;
            journalTransNew.insert();

            this.initPayTransFromOrigLine(journalTransOrig, journalTransNew);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReverse</Name>
				<Source><![CDATA[
        void runReverse()
    {
        RPayJournalTable rPayJournalTableNew;
        RPayJournalTrans rPayJournalTransOrig;
        RPayJournalTrans rPayJournalTransNew;
        RPayTrans        rPayTransOrig;
        NumberSeq        numberSeq;
        RPayTrans        payTransNew;
        ;

        numberSeq = NumberSeq::newGetNum(RPayParameters::numRefJournalID());

        rPayJournalTableNew.data(common);
        rPayJournalTableNew.JournalId = numberSeq.num();
        rPayJournalTableNew.SessionId = 0;
        rPayJournalTableNew.Amount    = rPayReverseMap.Amount * (-1);
        rPayJournalTableNew.insert();

        this.createSourceTransLink(common, rPayJournalTableNew);

        if (this.parmRestoreOrigLines())
        {
            this.restoreOriginalLines(rPayJournalTableNew);
        }

        while select rPayJournalTransOrig
            where rPayJournalTransOrig.JournalId == rPayReverseMap.JournalId
        {
            rPayJournalTransNew.data(rPayJournalTransOrig);
            rPayJournalTransNew.JournalId = rPayJournalTableNew.JournalId;
            rPayJournalTransNew.Amount    = (rPayJournalTransOrig.Amount) * (-1);
            rPayJournalTransNew.Qty       = (rPayJournalTransOrig.Qty) * (-1);
            rPayJournalTransNew.insert();

            this.createSourceTransLink(rPayJournalTransOrig, rPayJournalTransNew);

            while select rPayTransOrig
                where rPayTransOrig.SourceTableId == rPayJournalTransOrig.TableId &&
                rPayTransOrig.SourceRecId   == rPayJournalTransOrig.RecId
            {
                this.createReversePayTrans(rPayTransOrig, rPayJournalTransNew);

                update_recordset payTransNew
                    setting PayModuleCode = rPayJournalTableNew.JournalNameId,
                            CounterUnit   = rPayJournalTableNew.JournalId
                    where payTransNew.SourceTableId == rPayJournalTransNew.TableId &&
                          payTransNew.SourceRecId   == rPayJournalTransNew.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayReverse_PayJournalTable construct()
    {
        return new RPayReverse_PayJournalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>