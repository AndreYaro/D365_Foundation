<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTransferLineReceiptPoster</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSTransferLineReceiptPoster</c> class is responsible for posting the transfer line receipt.
/// </summary>
internal class WHSTransferLineReceiptPoster
{
    private InventTransferLine transferLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTransferLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSTransferLineReceiptPoster newFromTransferLine(InventTransferLine _transferLine)
    {
        var transferLineReceiptPoster = new WHSTransferLineReceiptPoster();

        transferLineReceiptPoster.initFromTransferLine(_transferLine);

        return transferLineReceiptPoster;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTransferLine</Name>
				<Source><![CDATA[
    private void initFromTransferLine(InventTransferLine _transferLine)
    {
        // As WhsWorkCreateReceiving.receiveTransferLine is public, it might be a breaking change to use _transferLine.data() here,
        // which would have been the preferred choice, so that if transferLine buffer changes inside this class, it doesn't affect the caller's buffer.
        // The breaking change would happen in the case a customization expects that the _transferLine would change in the InventTransferParmLineCreate class,
        // where it is set in the parmInventTransferLineToProcess method.
        transferLine = _transferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTransferLineReceipt</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void postTransferLineReceipt()
    {
        InventTransferParmTable     inventTransferParmTable;
        InventTransferMultiReceive  inventTransferMultiReceive;

        ttsbegin;

        inventTransferParmTable.clear();
        inventTransferParmTable.initParmDefault();
        inventTransferParmTable.TransferId       = transferLine.TransferId;
        inventTransferParmTable.UpdateType       = InventTransferUpdateType::Receive;
        inventTransferParmTable.ShipUpdateQty    = InventTransferShipUpdateQty::ShipNow;
        inventTransferParmTable.ReceiveUpdateQty = InventTransferReceiveUpdateQty::Registered;
        inventTransferParmTable.EditLines        = true;
        inventTransferParmTable.LineNum          = 1;
        inventTransferParmTable.JobStatus        = ParmJobStatus::Executed;
        inventTransferParmTable.ExecutedDateTime = DateTimeUtil::utcNow();
        inventTransferParmTable.PickUpdateQty    = InventTransferPickUpdateQty::ShipNow;
        inventTransferParmTable.ExplodeLines     = true;

        inventTransferMultiReceive = InventTransferMultiReceive::construct();
        inventTransferMultiReceive.init();
        inventTransferMultiReceive.parmCalledFromWMS(false);
        RunBaseMultiParm::initParm(inventTransferMultiReceive);

        inventTransferParmTable.ParmId = inventTransferMultiReceive.parmId();

        inventTransferParmTable.insert(false);
        
        InventTransferParmLineCreate inventTransferParmLineCreate = InventTransferParmLineCreate::newFromParameters(inventTransferParmTable);
        inventTransferParmLineCreate.parmInventTransferLineToProcess(transferLine);
        inventTransferParmLineCreate.createReceiveLines();

        select inventTransferParmTable
            where inventTransferParmTable.ParmId == inventTransferMultiReceive.parmId();

        while (inventTransferParmTable)
        {
            try
            {
                inventTransferMultiReceive.runUpdate(inventTransferParmTable);
                inventTransferMultiReceive.addUpdateRec(InventTransferTable::find(inventTransferParmTable.TransferId));
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                throw;
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }

            next inventTransferParmTable;
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>