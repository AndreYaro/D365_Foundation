<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkInventoryTransactionQueryByUserActions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkInventoryTransactionQueryByUserActions</c> is an implementation of the <c>WHSWorkInventoryTransactionIQuery</c> interface
/// based on the warehouse user actions. I.e. it reads information from <c>WHSWorkTrans</c> and <c>WHSDimTracking</c> tables.
/// </summary>
internal class WHSWorkInventoryTransactionQueryByUserActions implements WHSWorkInventoryTransactionIQuery
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registeredIssueByWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkInventoryTransactionDescriptor registeredIssueByWorkLine(WHSWorkId _workId, LineNum _lineNum, WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor;

        WHSWorkLine workLine = WHSWorkLine::find(_workId, _lineNum);

        // The API supports only pick and put work lines for now.
        if (workLine.WorkType == WHSWorkType::Pick)
        {
            // distinguish initial picks from subsequent picks.
            if (workLine.isInitialPickLine())
            {
                inventoryTransactionDescriptor = this.pickedByInitialPickWorkLine(workLine, _queryParameters.parmFirstOnly());
            }
            else
            {
                inventoryTransactionDescriptor = this.pickedByStagePickWorkLine(workLine, _queryParameters.parmFirstOnly());
            }
        }
        else if (workLine.WorkType == WHSWorkType::Put)
        {
            inventoryTransactionDescriptor = this.pickedByPutWorkLine(workLine, _queryParameters.parmFirstOnly());
        }
        else
        {
            WHSInventoryTransactionErrorProvider::throwNotSupportedWarehouseTransactionScenario();
        }

        return inventoryTransactionDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredReceiptByWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkInventoryTransactionDescriptor registeredReceiptByWorkLine(WHSWorkId _workId, LineNum _lineNum, WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        WHSWorkLine workLine = WHSWorkLine::find(_workId, _lineNum);

        // The API supports only pick and put work lines for now.
        if (!workLine ||
            (workLine.WorkType != WHSWorkType::Pick && workLine.WorkType != WHSWorkType::Put))
        {
            WHSInventoryTransactionErrorProvider::throwNotSupportedWarehouseTransactionScenario();
        }

        if (workLine.WorkType == WHSWorkType::Pick)
        {
            return this.putByPickWorkLine(workLine, _queryParameters);
        }
        else
        {
            return this.putByPutWorkLine(workLine, _queryParameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>putByPutWorkLine</Name>
				<Source><![CDATA[
    private WHSWorkInventoryTransactionDescriptor putByPutWorkLine(WHSWorkLine _workLine, WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor = WHSWorkInventoryTransactionDescriptor::construct();

        WHSLicensePlateId targetLicensePlateId = WHSWorkTable::find(_workLine.WorkId).TargetLicensePlateId;

        WHSWorkInventTrans  workInventTrans;

        while select workInventTrans
            where  workInventTrans.WorkId  == _workLine.WorkId
                && workInventTrans.LineNum == _workLine.LineNum
        {
            if (workInventTrans.InventQtyRemain == workInventTrans.Qty)
            {
                // it means that nothing is picked/put by current workInventTrans record.
                continue;
            }

            WHSDimTracking  dimTracking;

            LineNum fromPickLineNum, toPickLineNum;

            [fromPickLineNum, toPickLineNum] = WhsWorkExecute::construct().getPrevLineRange(_workLine.WorkId, _workLine.LineNum, WHSWorkType::Pick);

            boolean hasDimTracking = false;

            while select InventDimId, Qty, CapturedWeight from dimTracking
                where dimTracking.WorkId == _workLine.WorkId
                    && dimTracking.LineNum >= fromPickLineNum
                    && dimTracking.LineNum <= toPickLineNum
                    && dimTracking.InventTransIdParent == workInventTrans.InventTransIdParent
            {
                InventDim dimTrackingDim = InventDim::find(dimTracking.InventDimId);
                dimTrackingDim.wMSLocationId = _workLine.WMSLocationId;
                dimTrackingDim.LicensePlateId = targetLicensePlateId;

                inventoryTransactionDescriptor.add(WHSWorkInventoryTransactionDescriptorElement::newFromValues(
                    workInventTrans.ItemId,
                    dimTracking.Qty,
                    dimTracking.CapturedWeight,
                    WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(dimTrackingDim),
                    workInventTrans.InventTransIdParent));

                hasDimTracking = true;

                if (_queryParameters.parmFirstOnly())
                {
                    break;
                }
            }

            if (!hasDimTracking)
            {
                InventDim inventDimTo = InventDim::find(workInventTrans.InventDimIdTo);
                inventDimTo.wMSLocationId = _workLine.WMSLocationId;
                inventDimTo.LicensePlateId = targetLicensePlateId;

                inventoryTransactionDescriptor.add(WHSWorkInventoryTransactionDescriptorElement::newFromValues(
                    workInventTrans.ItemId,
                    workInventTrans.Qty - workInventTrans.InventQtyRemain,
                    0.0,    // CW not supported for now
                    WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(inventDimTo),
                    workInventTrans.InventTransIdParent));

                if (_queryParameters.parmFirstOnly())
                {
                    break;
                }
            }
        }

        return inventoryTransactionDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>putByPickWorkLine</Name>
				<Source><![CDATA[
    private WHSWorkInventoryTransactionDescriptor putByPickWorkLine(WHSWorkLine _workLine, WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor = WHSWorkInventoryTransactionDescriptor::construct();

        WHSWorkInventTrans workInventTrans;

        while select workInventTrans
            where  workInventTrans.WorkId  == _workLine.WorkId
                && workInventTrans.LineNum == _workLine.LineNum
        {
            if (workInventTrans.InventQtyRemain == workInventTrans.Qty)
            {
                // it means that nothing is picked/put by current workInventTrans record.
                continue;
            }

            if (PdsGlobal::pdsIsCWItem(workInventTrans.ItemId))
            {
                WHSInventoryTransactionErrorProvider::throwNotSupportedWarehouseTransactionScenario();
            }

            boolean hasDimTracking = false;
            WHSDimTracking dimTracking;

            // More detailed information found in WHSDimTracking, if it is present.
            while select InventDimId, Qty, CapturedWeight from dimTracking
                where  dimTracking.WorkId == _workLine.WorkId
                    && dimTracking.LineNum == _workLine.LineNum
                    && dimTracking.InventTransIdParent == workInventTrans.InventTransIdParent
            {
                InventDim dimTrackingDim = InventDim::find(dimTracking.InventDimId);
                dimTrackingDim.wMSLocationId = _workLine.UserId;
                dimTrackingDim.LicensePlateId = WHSWorkTable::find(_workLine.WorkId).TargetLicensePlateId;

                inventoryTransactionDescriptor.add(WHSWorkInventoryTransactionDescriptorElement::newFromValues(
                    workInventTrans.ItemId,
                    dimTracking.Qty,
                    dimTracking.CapturedWeight,
                    WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(dimTrackingDim),
                    workInventTrans.InventTransIdParent));

                hasDimTracking = true;

                if (_queryParameters.parmFirstOnly())
                {
                    break;
                }
            }

            if (!hasDimTracking)
            {
                WHSWorkTrans workTrans;

                while select InventDimId, TargetLicensePlateId from workTrans
                    where  workTrans.WorkId  == _workLine.WorkId
                        && workTrans.LineNum == _workLine.LineNum
                {
                    InventDim workTransDim = InventDim::find(workTrans.InventDimId);
                    workTransDim.wMSLocationId = _workLine.UserId;
                    workTransDim.LicensePlateId = workTrans.TargetLicensePlateId;

                    inventoryTransactionDescriptor.add(WHSWorkInventoryTransactionDescriptorElement::newFromValues(
                        workInventTrans.ItemId,
                        workInventTrans.Qty - workInventTrans.InventQtyRemain,
                        0.0,    // CW not supported for now
                        WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(workTransDim),
                        workInventTrans.InventTransIdParent));

                    if (_queryParameters.parmFirstOnly())
                    {
                        break;
                    }
                }
            }
        }

        return inventoryTransactionDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickedByInitialPickWorkLine</Name>
				<Source><![CDATA[
    private WHSWorkInventoryTransactionDescriptor pickedByInitialPickWorkLine(WHSWorkLine _workLine, boolean _firstOnly)
    {
        if (PdsGlobal::pdsIsCWItem(_workLine.ItemId))
        {
            WHSInventoryTransactionErrorProvider::throwNotSupportedWarehouseTransactionScenario();
        }

        WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor = WHSWorkInventoryTransactionDescriptor::construct();
        boolean hasDimTracking = false;

        WHSDimTracking dimTracking;

        // More detailed information found in WHSDimTracking, if it is present.
        while select InventDimId, InventTransIdParent, Qty, CapturedWeight from dimTracking
            where  dimTracking.WorkId == _workLine.WorkId
                && dimTracking.LineNum == _workLine.LineNum
        {
            inventoryTransactionDescriptor.add(WHSWorkInventoryTransactionDescriptorElement::newFromValues(
                _workLine.ItemId,
                dimTracking.Qty,
                dimTracking.CapturedWeight,
                WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(InventDim::find(dimTracking.InventDimId)),
                dimTracking.InventTransIdParent));

            hasDimTracking = true;

            if (_firstOnly)
            {
                break;
            }
        }

        if (!hasDimTracking)
        {
            WHSWorkTrans workTrans;

            while select ItemId, InventTransId, InventDimId, Qty, UOM from workTrans
                where  workTrans.WorkId  == _workLine.WorkId
                    && workTrans.LineNum == _workLine.LineNum
            {
                InventDim workTransDim = InventDim::find(workTrans.InventDimId);

                InventHandlingQty handlingQty = EcoResReleasedProductUnitConverter::construct().convert(
                    workTrans.Qty,
                    UnitOfMeasure::unitOfMeasureIdBySymbol(workTrans.UOM),
                    UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(workTrans.ItemId).inventUnitId()),
                    NoYes::No,
                    workTrans.ItemId,
                    workTransDim.InventDimId,
                    NoYes::No);

                inventoryTransactionDescriptor.add(WHSWorkInventoryTransactionDescriptorElement::newFromValues(
                    workTrans.ItemId,
                    handlingQty,
                    0.0,    // CW is not supported now.
                    WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(workTransDim),
                    workTrans.InventTransId));

                if (_firstOnly)
                {
                    break;
                }
            }
        }

        return inventoryTransactionDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickedByStagePickWorkLine</Name>
				<Source><![CDATA[
    private WHSWorkInventoryTransactionDescriptor pickedByStagePickWorkLine(WHSWorkLine _workLine, boolean _firstOnly)
    {
        WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor = WHSWorkInventoryTransactionDescriptor::construct();

        WHSWorkInventTrans  workInventTrans;

        while select workInventTrans
            where  workInventTrans.WorkId  == _workLine.WorkId
                && workInventTrans.LineNum == _workLine.LineNum
        {
            if (workInventTrans.InventQtyRemain == workInventTrans.Qty)
            {
                // it means that nothing is picked/put by current workInventTrans record.
                continue;
            }

            if (PdsGlobal::pdsIsCWItem(workInventTrans.ItemId))
            {
                WHSInventoryTransactionErrorProvider::throwNotSupportedWarehouseTransactionScenario();
            }

            WHSDimTracking  dimTracking;
            boolean         hasDimTracking = false;

            while select InventDimId, Qty, CapturedWeight from dimTracking
                where dimTracking.WorkId == _workLine.WorkId
                    && dimTracking.LineNum == _workLine.LineNum
                    && dimTracking.InventTransIdParent == workInventTrans.InventTransIdParent
            {
                inventoryTransactionDescriptor.add(WHSWorkInventoryTransactionDescriptorElement::newFromValues(
                    workInventTrans.ItemId,
                    dimTracking.Qty,
                    dimTracking.CapturedWeight,
                    WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(InventDim::find(dimTracking.InventDimId)),
                    workInventTrans.InventTransIdParent));

                hasDimTracking = true;

                if (_firstOnly)
                {
                    break;
                }
            }

            if (!hasDimTracking)
            {
                WHSWorkTrans workTrans;

                // This is to get the LP we picked from. This should be the TargetLP of the work header.
                select firstOnly InventDimId from workTrans
                    where  workTrans.WorkId  == _workLine.WorkId
                        && workTrans.LineNum == _workLine.LineNum;

                if (workTrans)
                {
                    inventoryTransactionDescriptor.add(WHSWorkInventoryTransactionDescriptorElement::newFromValues(
                        workInventTrans.ItemId,
                        workInventTrans.Qty - workInventTrans.InventQtyRemain,
                        0.0,    // CW not supported for now
                        WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(InventDim::find(workTrans.InventDimId)),
                        workInventTrans.InventTransIdParent));
                }
            }

            if (_firstOnly && !inventoryTransactionDescriptor.isEmpty())
            {
                break;
            }
        }

        return inventoryTransactionDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickedByPutWorkLine</Name>
				<Source><![CDATA[
    private WHSWorkInventoryTransactionDescriptor pickedByPutWorkLine(WHSWorkLine _workLine, boolean _firstOnly)
    {
        WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor = WHSWorkInventoryTransactionDescriptor::construct();

        LineNum fromLineNum;
        LineNum toLineNum;

        [fromLineNum, toLineNum] = WhsWorkExecute::construct().getPrevLineRange(_workLine.WorkId, _workLine.LineNum, WHSWorkType::Pick);

        WHSWorkInventTrans  workInventTrans;

        while select workInventTrans
            where  workInventTrans.WorkId  == _workLine.WorkId
                && workInventTrans.LineNum == _workLine.LineNum
        {
            if (workInventTrans.InventQtyRemain == workInventTrans.Qty)
            {
                // it means that nothing is picked/put by current workInventTrans record.
                continue;
            }

            // don't expect that put line's WHSWorkInventTrans record can be executed partially.
            if (workInventTrans.InventQtyRemain != 0)
            {
                WHSInventoryTransactionErrorProvider::throwNotSupportedWarehouseTransactionScenario();
            }

            if (PdsGlobal::pdsIsCWItem(workInventTrans.ItemId))
            {
                WHSInventoryTransactionErrorProvider::throwNotSupportedWarehouseTransactionScenario();
            }

            WHSWorkInventTrans pickWorkInventTrans;

            while select pickWorkInventTrans
                where  pickWorkInventTrans.WorkId  == _workLine.WorkId
                    && pickWorkInventTrans.LineNum >= fromLineNum
                    && pickWorkInventTrans.LineNum <= toLineNum
                    && pickWorkInventTrans.InventTransIdParent == workInventTrans.InventTransIdParent
            {
                boolean hasDimTracking = false;
                WHSDimTracking dimTracking;

                // More detailed information found in WHSDimTracking, if it is present.
                while select InventDimId, Qty, CapturedWeight from dimTracking
                    where  dimTracking.WorkId == pickWorkInventTrans.WorkId
                        && dimTracking.LineNum == pickWorkInventTrans.LineNum
                        && dimTracking.InventTransIdParent == pickWorkInventTrans.InventTransIdParent
                {
                    InventDim dimTrackingDim = InventDim::find(dimTracking.InventDimId);
                    dimTrackingDim.wMSLocationId = _workLine.UserId;
                    dimTrackingDim.LicensePlateId = WHSWorkTable::find(_workLine.WorkId).TargetLicensePlateId;

                    inventoryTransactionDescriptor.add(WHSWorkInventoryTransactionDescriptorElement::newFromValues(
                        pickWorkInventTrans.ItemId,
                        dimTracking.Qty,
                        dimTracking.CapturedWeight,
                        WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(dimTrackingDim),
                        pickWorkInventTrans.InventTransIdParent));

                    hasDimTracking = true;

                    if (_firstOnly)
                    {
                        break;
                    }
                }

                if (!hasDimTracking)
                {
                    WHSWorkTrans workTrans;

                    while select InventDimId, TargetLicensePlateId from workTrans
                        where  workTrans.WorkId  == _workLine.WorkId
                            && workTrans.LineNum == pickWorkInventTrans.LineNum
                    {
                        InventDim workTransDim = InventDim::find(workTrans.InventDimId);
                        workTransDim.wMSLocationId = _workLine.UserId;
                        workTransDim.LicensePlateId = workTrans.TargetLicensePlateId;

                        inventoryTransactionDescriptor.add(WHSWorkInventoryTransactionDescriptorElement::newFromValues(
                            pickWorkInventTrans.ItemId,
                            pickWorkInventTrans.Qty - pickWorkInventTrans.InventQtyRemain,
                            0.0,    // CW not supported for now
                            WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(workTransDim),
                            pickWorkInventTrans.InventTransIdParent));

                        if (_firstOnly)
                        {
                            break;
                        }
                    }
                }
            }
        }

        return inventoryTransactionDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkInventoryTransactionQueryByUserActions construct()
    {
        return new WHSWorkInventoryTransactionQueryByUserActions();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>