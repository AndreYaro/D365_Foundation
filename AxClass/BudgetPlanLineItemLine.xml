<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLineItemLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Manages the validate/modify/default events for the <c>BudgetPlanLine</c> record.
/// </summary>
public class BudgetPlanLineItemLine extends BudgetPlanLineItem
{
    BudgetPlanLine           budgetPlanLine;
    BudgetPlanColumnRecId    budgetPlanColumnRecId;
    BudgetPlanLayoutRecId    budgetPlanLayoutRecId;

    public static readonly TableName proposedAssetTableStr       = tableStr(BudgetPlanProposedAsset);
    public static readonly TableName proposedProjectTableStr     = tableStr(BudgetPlanProposedProject);
    public static readonly TableName budgetPlanLineTableStr      = tableStr(BudgetPlanLine);
    public static readonly TableName assetTableStr               = tableStr(AssetTable);
    public static readonly TableName hcmPositionForecastTableStr = tableStr(HcmPositionForecast);
    public static readonly TableName projTableStr                = tableStr(ProjTable);
    public static readonly FieldName lineIsNewRequestFieldName   = fieldStr(BudgetPlanLine, IsNewRequest);
    public static readonly FieldName lineCommentFieldName        = fieldStr(BudgetPlanLine, Comment);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultEffectiveDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a value for the <c>EffectiveDate</c> field of the <c>BudgetPlanLine</c> table.
    /// </summary>
    protected void defaultEffectiveDate()
    {
        if (!budgetPlanLine.EffectiveDate)
        {
            budgetPlanLine.EffectiveDate = this.getProcessCycleStartDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultEstimateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a value for the <c>EstimateType</c> field of the <c>BudgetPlanLine</c> table.
    /// </summary>
    protected void defaultEstimateType()
    {
        if (!budgetPlanLine.EstimateType)
        {
            BudgetPlanScenario      scenario;
            BudgetPlanEstimateType  budgetPlanEstimateType;

            scenario = BudgetPlanScenario::find(budgetPlanLine.BudgetPlanScenario);

            if (scenario && scenario.UnitOfMeasureClass != UnitOfMeasureClass::Monetary)
            {
                budgetPlanEstimateType = BudgetPlanEstimateType::Quantity;

                budgetPlanLine.EstimateType = budgetPlanEstimateType;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPlanCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a value for the <c>PlanCurrencyCode</c> field of the <c>BudgetPlanLine</c> table.
    /// </summary>
    protected void defaultPlanCurrencyCode()
    {
        if (!budgetPlanLine.TransactionCurrencyCode)
        {
            budgetPlanLine.TransactionCurrencyCode = BudgetPlanHeader::find(budgetPlanLine.BudgetPlanHeader).Currency;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default field values for a <c>BudgetPlanLine</c> record.
    /// </summary>
    public void defaultRow()
    {
        this.defaultEstimateType();
        this.defaultEffectiveDate();
        this.setSourceDataAreaId();
        this.defaultAssetId();
        this.defaultComment();
        this.defaultProjId();
        this.defaultProposedAsset();
        this.defaultProposedProject();
        this.defaultPosition();
        this.defaultBudgetClass();
        this.defaultIsNewRequest();
        this.defaultIsRecurring();

        if (budgetPlanLine.EstimateType == BudgetPlanEstimateType::Monetary)
        {
            this.defaultPlanCurrencyCode();
        }
        else
        {
            this.defaultUnitOfMeasure();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRowFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns defaulted fields for the line record from a <c>BudgetPlanLineDefaultRowTemplate</c> record.
    /// </summary>
    public void defaultRowFromCache()
    {
        if (!budgetPlanColumnRecId)
        {
            throw error(strFmt("@Budget:BudgetPlanning_Validation_MissingColumn", tableStr(BudgetPlanColumn)));
        }

        BudgetPlanHeader                    budgetPlanHeaderLocal   = BudgetPlanHeader::find(budgetPlanLine.BudgetPlanHeader);
        BudgetPlanLayoutElementOrdinal      ordinal                 = BudgetPlanLayoutMapping::findByLayoutColumn(budgetPlanHeaderLocal.Layout, budgetPlanColumnRecId).Ordinal;
        BudgetPlanLineDefaultRowTemplate    lineTemplate            = BudgetPlanLineDefaultRowTemplate::findByLayoutProcessOrdinal(
                                                                            budgetPlanHeaderLocal.Layout,
                                                                            budgetPlanHeaderLocal.BudgetPlanningProcess,
                                                                            ordinal);

        if (!lineTemplate)
        {
            BudgetPlanLineDefaultRowTemplateManager::createDefaultRowTemplateRecords(budgetPlanHeaderLocal.Layout, BudgetPlanningProcess::find(budgetPlanHeaderLocal.BudgetPlanningProcess));

            lineTemplate = BudgetPlanLineDefaultRowTemplate::findByLayoutProcessOrdinal(
                                budgetPlanHeaderLocal.Layout,
                                budgetPlanHeaderLocal.BudgetPlanningProcess,
                                ordinal);
        }

        // Enum based fields should only be assigned if there was a default value provided to the template.
        // This prevents user supplied values from being overwritten.
        budgetPlanLine.IsRecurring  = lineTemplate.IsRecurringDefaulted ? lineTemplate.IsRecurring : budgetPlanLine.IsRecurring;
        budgetPlanLine.BudgetClass  = lineTemplate.BudgetClassDefaulted ? lineTemplate.BudgetClass : budgetPlanLine.BudgetClass;
        budgetPlanLine.IsNewRequest = lineTemplate.IsNewRequestDefaulted ? lineTemplate.IsNewRequest : budgetPlanLine.IsNewRequest;

        // User supplied values should not be overwritten.
        budgetPlanLine.EstimateType     = budgetPlanLine.EstimateType ? budgetPlanLine.EstimateType : lineTemplate.EstimateType;
        budgetPlanLine.EffectiveDate    = budgetPlanLine.EffectiveDate ? budgetPlanLine.EffectiveDate : lineTemplate.StartDate;
        budgetPlanLine.SourceDataAreaId = budgetPlanLine.SourceDataAreaId ? budgetPlanLine.SourceDataAreaId : lineTemplate.SourceDataAreaId;
        budgetPlanLine.AssetId          = budgetPlanLine.AssetId ? budgetPlanLine.AssetId : lineTemplate.AssetId;
        budgetPlanLine.Comment          = budgetPlanLine.Comment ? budgetPlanLine.Comment : lineTemplate.Comment;
        budgetPlanLine.ProjectId        = budgetPlanLine.ProjectId ? budgetPlanLine.ProjectId : lineTemplate.ProjectId;
        budgetPlanLine.ProposedAsset    = budgetPlanLine.ProposedAsset ? budgetPlanLine.ProposedAsset : lineTemplate.ProposedAsset;
        budgetPlanLine.ProposedProject  = budgetPlanLine.ProposedProject ? budgetPlanLine.ProposedProject : lineTemplate.ProposedProject;
        budgetPlanLine.Position         = budgetPlanLine.Position ? budgetPlanLine.Position : lineTemplate.Position;
        budgetPlanLine.PositionScenario = budgetPlanLine.PositionScenario ? budgetPlanLine.PositionScenario : lineTemplate.PositionScenario;
        budgetPlanLine.UnitOfMeasure    = budgetPlanLine.UnitOfMeasure ? budgetPlanLine.UnitOfMeasure : lineTemplate.UnitOfMeasure;

        // Do not overwrite a value if the user supplied one.
        if (!budgetPlanLine.TransactionCurrencyCode)
        {
            if (lineTemplate.TransactionCurrencyCode)
            {
                // Use the default transaction currency code from the column rule if one was defaulted from there.
                budgetPlanLine.TransactionCurrencyCode = lineTemplate.TransactionCurrencyCode;
            }
            else if (budgetPlanLine.EstimateType == BudgetPlanEstimateType::Monetary)
            {
                // Otherwise use the transaction currency code from the header.
                this.defaultPlanCurrencyCode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromBudgetPlanLineActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default field values for the <c>BudgetPlanLine</c> record from the <c>BudgetPlanLineActiveView</c> record.
    /// </summary>
    /// <param name = "_budgetPlanLineActiveView">
    /// The record ID of the <c>BudgetPlanLineActiveView</c> record.
    /// </param>
    public void defaultFromBudgetPlanLineActiveView(BudgetPlanLineActiveView _budgetPlanLineActiveView)
    {
        budgetPlanLine.BudgetClass              = _budgetPlanLineActiveView.BudgetClass;
        budgetPlanLine.IsRecurring              = _budgetPlanLineActiveView.IsRecurring;
        budgetPlanLine.IsNewRequest             = _budgetPlanLineActiveView.IsNewRequest;
        budgetPlanLine.Comment                  = _budgetPlanLineActiveView.Comment;
        budgetPlanLine.AssetId                  = _budgetPlanLineActiveView.AssetId;
        budgetPlanLine.ProjectId                = _budgetPlanLineActiveView.ProjectId;
        budgetPlanLine.ProposedAsset            = _budgetPlanLineActiveView.ProposedAsset;
        budgetPlanLine.ProposedProject          = _budgetPlanLineActiveView.ProposedProject;
        budgetPlanLine.Position                 = _budgetPlanLineActiveView.Position;

        this.defaultRowFromCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a value for the <c>UnitOfMeasure</c> field of the <c>BudgetPlanLine</c> table.
    /// </summary>
    protected void defaultUnitOfMeasure()
    {
        UnitOfMeasureRecId scenarioUnitOfMeasureRecId;

        scenarioUnitOfMeasureRecId = BudgetPlanScenario::find(budgetPlanLine.BudgetPlanScenario).UnitOfMeasure;

        // Set the default unit of measure on the line same as the default unit on the scenario
        budgetPlanLine.UnitOfMeasure = scenarioUnitOfMeasureRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBudgetClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the <c>BudgetClass</c> field of the <c>BudgetPlanLine</c> record if a column rule filter exists for that field.
    /// </summary>
    /// <returns> true, if the field has been defaulted; otherwise, false. </returns>
    public boolean defaultBudgetClass()
    {
        boolean defaultedFromColumnRule;

        // Return quickly so user supplied values from the entity based inserts/updates are not overwritten.
        if (!budgetPlanColumnRecId)
        {
            return defaultedFromColumnRule;
        }

        BudgetPlanColumnRule budgetPlanColumnRule = BudgetPlanColumnRule::findFirstColumnRuleForColumnTableField(
                                                        budgetPlanColumnRecId,
                                                        budgetPlanLineTableStr,
                                                        BudgetPlanLineItem::BudgetClass);

        if (budgetPlanColumnRule)
        {
            // str2Int() used as either '0' or '1' as that is the enumeration's value.
            budgetPlanLine.BudgetClass  = str2Int(budgetPlanColumnRule.RightSideValueOne);
            defaultedFromColumnRule     = true;
        }

        return defaultedFromColumnRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsRecurring</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the <c>IsRecurring</c> field of the <c>BudgetPlanLine</c> record if a column rule filter exists for that field.
    /// </summary>
    /// <returns> true, if the field has been defaulted; otherwise, false. </returns>
    public boolean defaultIsRecurring()
    {
        boolean defaultedFromColumnRule;

        // Return quickly so user supplied values from the entity based inserts/updates are not overwritten.
        if (!budgetPlanColumnRecId)
        {
            return defaultedFromColumnRule;
        }

        if (!BudgetPlanLayoutHelper::isFieldARowElement(BudgetPlanLineItem::IsRecurring, budgetPlanLayoutRecId))
        {
            BudgetPlanColumnRule budgetPlanColumnRule = BudgetPlanColumnRule::findFirstColumnRuleForColumnTableField(
                                                            budgetPlanColumnRecId,
                                                            budgetPlanLineTableStr,
                                                            BudgetPlanLineItem::IsRecurring);

            if (budgetPlanColumnRule)
            {
                // str2Int() used as either '0' or '1' as that is the enumeration's value.
                budgetPlanLine.IsRecurring  = str2Int(budgetPlanColumnRule.RightSideValueOne);
                defaultedFromColumnRule     = true;
            }
            else
            {
                budgetPlanLine.IsRecurring = NoYes::Yes;
            }
        }

        return defaultedFromColumnRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsNewRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the <c>IsNewRequest</c> field of the <c>BudgetPlanLine</c> record if a column rule filter exists for that field.
    /// </summary>
    /// <returns> true, if the field has been defaulted; otherwise, false. </returns>
    public boolean defaultIsNewRequest()
    {
        boolean defaultedFromColumnRule;

        // Return quickly so user supplied values from the entity based inserts/updates are not overwritten.
        if (!budgetPlanColumnRecId)
        {
            return defaultedFromColumnRule;
        }

        BudgetPlanColumnRule budgetPlanColumnRule = BudgetPlanColumnRule::findFirstColumnRuleForColumnTableField(
                                                        budgetPlanColumnRecId,
                                                        budgetPlanLineTableStr,
                                                        lineIsNewRequestFieldName);

        if (budgetPlanColumnRule)
        {
            // str2Int() used as either '0' or '1' as that is the enumeration's value.
            budgetPlanLine.IsNewRequest = str2Int(budgetPlanColumnRule.RightSideValueOne);
            defaultedFromColumnRule     = true;
        }

        return defaultedFromColumnRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProposedAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the <c>ProposedAsset</c> field of the <c>BudgetPlanLine</c> record if a column rule filter exists for that field.
    /// </summary>
    protected void defaultProposedAsset()
    {
        if (!budgetPlanLine.ProposedAsset)
        {
            BudgetPlanColumnRule budgetPlanColumnRule = BudgetPlanColumnRule::findFirstColumnRuleForColumnTableField(
                                                            budgetPlanColumnRecId,
                                                            proposedAssetTableStr,
                                                            fieldStr(BudgetPlanProposedAsset, Name));
            if (budgetPlanColumnRule)
            {
                BudgetPlanProposedAsset budgetPlanProposedAsset = BudgetPlanProposedAsset::findByName(budgetPlanColumnRule.RightSideValueOne);

                budgetPlanLine.ProposedAsset = budgetPlanProposedAsset.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProposedProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the <c>ProposedProject</c> field of the <c>BudgetPlanLine</c> record if a column rule filter exists for that field.
    /// </summary>
    protected void defaultProposedProject()
    {
        if (!budgetPlanLine.ProposedProject)
        {
            BudgetPlanColumnRule budgetPlanColumnRule = BudgetPlanColumnRule::findFirstColumnRuleForColumnTableField(
                                                            budgetPlanColumnRecId,
                                                            proposedProjectTableStr,
                                                            fieldStr(BudgetPlanProposedProject, Name));

            if (budgetPlanColumnRule)
            {
                BudgetPlanProposedProject budgetPlanProposedProject = BudgetPlanProposedProject::findByName(budgetPlanColumnRule.RightSideValueOne);

                budgetPlanLine.ProposedProject = budgetPlanProposedProject.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the <c>Comment</c> field of the <c>BudgetPlanLine</c> record if a column rule filter exists for that field.
    /// </summary>
    protected void defaultComment()
    {
        if (!budgetPlanLine.Comment)
        {
            BudgetPlanColumnRule budgetPlanColumnRule = BudgetPlanColumnRule::findFirstColumnRuleForColumnTableField(
                                                            budgetPlanColumnRecId,
                                                            budgetPlanLineTableStr,
                                                            lineCommentFieldName);

            if (budgetPlanColumnRule)
            {
                budgetPlanLine.Comment = budgetPlanColumnRule.RightSideValueOne;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the <c>AssetId</c> field of the <c>BudgetPlanLine</c> record if a column rule filter exists for that field.
    /// </summary>
    protected void defaultAssetId()
    {
        if (!budgetPlanLine.AssetId)
        {
            BudgetPlanColumnRule budgetPlanColumnRule = BudgetPlanColumnRule::findFirstColumnRuleForColumnTableField(
                                                            budgetPlanColumnRecId,
                                                            assetTableStr,
                                                            fieldStr(AssetTable, AssetId));

            if (budgetPlanColumnRule)
            {
                budgetPlanLine.AssetId = budgetPlanColumnRule.RightSideValueOne;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the <c>ProjectId</c> field of the <c>BudgetPlanLine</c> record if a column rule filter exists for that field.
    /// </summary>
    protected void defaultProjId()
    {
        if (!budgetPlanLine.ProjectId)
        {
            BudgetPlanColumnRule budgetPlanColumnRule = BudgetPlanColumnRule::findFirstColumnRuleForColumnTableField(
                                                            budgetPlanColumnRecId,
                                                            projTableStr,
                                                            fieldStr(ProjTable, ProjId));

            if (budgetPlanColumnRule)
            {
                budgetPlanLine.ProjectId = budgetPlanColumnRule.RightSideValueOne;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the <c>Position</c> field of the <c>BudgetPlanLine</c> record if a column rule filter exists for that field.
    /// </summary>
    protected void defaultPosition()
    {
        if (!budgetPlanLine.Position)
        {
            BudgetPlanColumnRule budgetPlanColumnRule = BudgetPlanColumnRule::findFirstColumnRuleForColumnTableField(
                                                            budgetPlanColumnRecId,
                                                            hcmPositionForecastTableStr,
                                                            fieldStr(HcmPositionForecast, Position));

            if (budgetPlanColumnRule)
            {
                budgetPlanLine.Position = HcmPositionForecast::findByPosition(str2Int64(budgetPlanColumnRule.RightSideValueOne)).RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default values for the specified field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field to set to the default values.
    /// </param>
    public void defaultField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(BudgetPlanLine, BudgetClass):
                this.defaultBudgetClass();
                break;
            case fieldNum(BudgetPlanLine, EffectiveDate):
                this.defaultEffectiveDate();
                break;
            case fieldNum(BudgetPlanLine, EstimateType):
                this.defaultEstimateType();
                break;
            case fieldNum(BudgetPlanLine, IsRecurring):
                this.defaultIsRecurring();
                break;
            case fieldNum(BudgetPlanLine, TransactionCurrencyCode):
                this.defaultPlanCurrencyCode();
                break;
            case fieldNum(BudgetPlanLine, UnitOfMeasure):
                this.defaultUnitOfMeasure();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedPlanCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional field values based on the modified <c>UnitPrice</c> field value.
    /// </summary>
    protected void modifiedPlanCurrencyAmount()
    {
        budgetPlanLine.TransactionUnitPrice = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedPlanCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional field values based on the modified <c>PlanCurrencyCode</c> field value.
    /// </summary>
    protected void modifiedPlanCurrencyCode()
    {
        // Both Quantity and Unit price have a non-zero value then recalculate
        // amount using the rounding rules on the new currency code selected
        if (budgetPlanLine.Quantity && budgetPlanLine.TransactionUnitPrice)
        {
            budgetPlanLine.TransactionCurrencyAmount = CurrencyExchange::round(
                                                            (budgetPlanLine.Quantity * budgetPlanLine.TransactionUnitPrice),
                                                            budgetPlanLine.TransactionCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional field values based on the modified <c>Quantity</c> field value.
    /// </summary>
    protected void modifiedQuantity()
    {
        budgetPlanLine.TransactionCurrencyAmount = CurrencyExchange::round(
                                                        (budgetPlanLine.Quantity * budgetPlanLine.TransactionUnitPrice),
                                                        budgetPlanLine.TransactionCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional field values based on the modified <c>UnitPrice</c> field value.
    /// </summary>
    protected void modifiedUnitPrice()
    {
        budgetPlanLine.TransactionCurrencyAmount = CurrencyExchange::round(
                                                        (budgetPlanLine.Quantity * budgetPlanLine.TransactionUnitPrice),
                                                        budgetPlanLine.TransactionCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies or sets additional field values based on the modified field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that was modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(BudgetPlanLine, TransactionCurrencyAmount):
                this.modifiedPlanCurrencyAmount();
                break;
            case fieldNum(BudgetPlanLine, TransactionCurrencyCode):
                this.modifiedPlanCurrencyCode();
                break;
            case fieldNum(BudgetPlanLine, Quantity):
                this.modifiedQuantity();
                break;
            case fieldNum(BudgetPlanLine, TransactionUnitPrice):
                this.modifiedUnitPrice();
                break;
            case fieldNum(BudgetPlanLine, AssetId):
                this.modifiedAssetId();
                break;
            case fieldNum(BudgetPlanLine, ProjectId):
                this.modifiedProjectId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>SourceDataAreaId</c> field of the <c>BudgetPlanLine</c> table record.
    /// </summary>
    public void setSourceDataAreaId()
    {
        if (budgetPlanLine.AssetId || budgetPlanLine.ProjectId)
        {
            budgetPlanLine.SourceDataAreaId = BudgetPlan::getDataAreaId(budgetPlanLine.BudgetPlanHeader);
        }
        else
        {
            budgetPlanLine.SourceDataAreaId = BudgetPlanningConstants::emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEffectiveDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>EffectiveDate</c> field in the <c>BudgetPlanLine</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>EffectiveDate</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateEffectiveDate()
    {
        boolean                     isValid = true;
        BudgetPlanningProcessRecId  planningProcessRecId;
        BudgetCycle                 budgetCycle;
        BudgetCycleRecId            budgetCycleRecId;

        planningProcessRecId = BudgetPlanHeader::find(budgetPlanLine.BudgetPlanHeader).BudgetPlanningProcess;
        budgetCycleRecId     = BudgetPlanningProcess::find(planningProcessRecId).BudgetCycle;
        budgetCycle          = BudgetCycle::find(budgetCycleRecId);

        // The effective date of the budget plan line MUST be within the budget cycle date for the budget planning process
        if (budgetCycle.getStartDate() > budgetPlanLine.EffectiveDate
            || budgetCycle.getEndDate() < budgetPlanLine.EffectiveDate)
        {
            isValid = checkFailed("@GLS70449");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>LedgerDimension</c> field in the <c>BudgetPlanLine</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>LedgerDimension</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateLedgerDimension()
    {
        boolean                     isValid = true;
        BudgetPlanHeader            budgetPlanHeaderLocal;
        BudgetPlanningProcess       process;
        DimensionValidationStatus   dimensionValidationStatus;
        Ledger                      processLedger;

        if (!FormDataUtil::isFormDataSource(budgetPlanLine) && budgetPlanLine.LedgerDimension)
        {
            budgetPlanHeaderLocal = BudgetPlanHeader::find(budgetPlanLine.BudgetPlanHeader);
            process          = BudgetPlanningProcess::find(budgetPlanHeaderLocal.BudgetPlanningProcess);
            processLedger    = Ledger::find(process.Ledger);

            changecompany(CompanyInfo::getDataArea(processLedger.PrimaryForLegalEntity))
            {
                dimensionValidationStatus = LedgerDimensionValidationHelper::validateByTree(budgetPlanLine.LedgerDimension, budgetPlanLine.EffectiveDate, true, true);

                if (BudgetDimensionStructureChangePostingFixFlight::instance().isFlightEnabled() && dimensionValidationStatus == DimensionValidationStatus::StructureChanged)
                {
                    budgetPlanLine.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimensionForType(LedgerDimensionType::BudgetPlanning, budgetPlanLine.LedgerDimension);
                    dimensionValidationStatus = LedgerDimensionValidationHelper::validateByTree(budgetPlanLine.LedgerDimension, budgetPlanLine.EffectiveDate, true, true);
                }

                if (dimensionValidationStatus != DimensionValidationStatus::Valid)
                {
                    isValid = false;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value for a specific field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID that corresponds with the field to be validated.
    /// </param>
    /// <returns>
    /// true if the value is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldId)
    {
        boolean isValid = true;

        switch (_fieldId)
        {
            case fieldNum(BudgetPlanLine, LedgerDimension):
                isValid = this.validateLedgerDimension();
                break;
            case fieldNum(BudgetPlanLine, TransactionCurrencyCode):
                isValid = this.validatePlanCurrencyCode();
                break;
            case fieldNum(BudgetPlanLine, UnitOfMeasure):
                isValid = this.validateUnitOfMeasure();
                break;
            case fieldNum(BudgetPlanLine, EffectiveDate):
                isValid = this.validateEffectiveDate();
                break;
            case fieldNum(BudgetPlanLine, AssetId):
                isValid = this.validateAssetId();
                break;
            case fieldNum(BudgetPlanLine, ProposedAsset):
                isValid = this.validateProposedAsset();
                break;
            case fieldNum(BudgetPlanLine, ProjectId):
                isValid = this.validateProjectId();
                break;
            case fieldNum(BudgetPlanLine, ProposedProject):
                isValid = this.validateProposedProject();
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanLine</Name>
				<Source><![CDATA[
    public BudgetPlanLine parmBudgetPlanLine(BudgetPlanLine _budgetPlanLine = budgetPlanLine)
    {
        budgetPlanLine               = _budgetPlanLine;
        // Point the common record to the BudgetPlanLine buffer
        budgetPlanLineActiveViewLine = budgetPlanLine;

        return budgetPlanLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanColumnRecId</Name>
				<Source><![CDATA[
    public BudgetPlanColumnRecId parmBudgetPlanColumnRecId(BudgetPlanColumnRecId _budgetPlanColumnRecId = budgetPlanColumnRecId)
    {
        budgetPlanColumnRecId = _budgetPlanColumnRecId;

        return budgetPlanColumnRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanLayoutRecId</Name>
				<Source><![CDATA[
    public BudgetPlanLayoutRecId parmBudgetPlanLayoutRecId(BudgetPlanLayoutRecId _budgetPlanLayoutRecId = budgetPlanLayoutRecId)
    {
        budgetPlanLayoutRecId = _budgetPlanLayoutRecId;

        return budgetPlanLayoutRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanLineItemLine construct()
    {
        return new BudgetPlanLineItemLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        BudgetPlanScenario      = fieldStr(BudgetPlanLine, BudgetPlanScenario);
        BudgetPlanHeader        = fieldStr(BudgetPlanLine, BudgetPlanHeader);
        AssetId                 = fieldStr(BudgetPlanLine, AssetId);
        BudgetClass             = fieldStr(BudgetPlanLine, BudgetClass);
        ProjectId               = fieldStr(BudgetPlanLine, ProjectId);
        ProposedAsset           = fieldStr(BudgetPlanLine, ProposedAsset);
        ProposedProject         = fieldStr(BudgetPlanLine, ProposedProject);
        EstimateType            = fieldStr(BudgetPlanLine, EstimateType);
        LedgerDimension         = fieldStr(BudgetPlanLine, LedgerDimension);
        EffectiveDate           = fieldStr(BudgetPlanLine, EffectiveDate);
        UnitOfMeasure           = fieldStr(BudgetPlanLine, UnitOfMeasure);
        IsRecurring             = fieldStr(BudgetPlanLine, IsRecurring);
        TransactionCurrencyCode = fieldStr(BudgetPlanLine, TransactionCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetPlanLineForWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BudgetPlanLine</c> record is
    /// valid and ready to be written to the database.
    /// </summary>
    /// <returns>
    /// true if the <c>BudgetPlanLine</c> record is valid; otherwise, false.
    /// </returns>
    public boolean checkBudgetPlanLineForWrite()
    {
        boolean isValid;

        isValid = super();

        // Check for required fields that cannot be enforced at the table level.
        if (budgetPlanLine.EstimateType == BudgetPlanEstimateType::Monetary)
        {
            if (budgetPlanLine.TransactionCurrencyCode == BudgetPlanningConstants::emptyString)
            {
                isValid = checkFailed(strFmt("@SYS84753", "@GLS70110"));
            }
        }
        else
        {
            if (!budgetPlanLine.UnitOfMeasure)
            {
                isValid = checkFailed(strFmt("@SYS84753", "@SYS96151"));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesLineCurrencyDifferFromDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether any budget plan line has the currency that is different from the header.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> table.
    /// </param>
    /// <param name = "_budgetPlanCurrencyCode">
    /// The currency code on the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// true if line exists with currency different from header; otherwise false
    /// </returns>
    public static boolean doesLineCurrencyDifferFromDefault(
        BudgetPlanHeaderRecId   _budgetPlanHeaderRecId,
        BudgetPlanCurrencyCode  _budgetPlanCurrencyCode)
    {
        BudgetPlanLine   budgetPlanLine;

        select firstonly RecId from budgetPlanLine
            where budgetPlanLine.BudgetPlanHeader           == _budgetPlanHeaderRecId
                && budgetPlanLine.EstimateType              == BudgetPlanEstimateType::Monetary
                && budgetPlanLine.TransactionCurrencyCode   != _budgetPlanCurrencyCode;

        return budgetPlanLine.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>