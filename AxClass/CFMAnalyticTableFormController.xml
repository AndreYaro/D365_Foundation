<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticTableFormController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CFMAnalyticTableFormController</c> class manages the <c>CFMAnalyticTable</c> from.
/// </summary>
public class CFMAnalyticTableFormController
{
    CFMJournalTable journalTable;
    FormDataSource formDataSource;
    FormRun formRun;
    FormButtonControl originByDateButtonControl;
    FormButtonControl changePaymSourceButtonControl;
    FormButtonControl measuresVisibleButtonControl;
    CFMAnalyticalPivoter analyticalPivoter;
    CFMAnalyticFormBalance cashBalance;

    CFMAnalyticTableTmp analyticalTable;
    CFMAnalyticTableTmp formAnalyticalTable;
    NoYes usePaymentAccountNum;
    NoYes usePaymMode;

    Map amountDateFieldsMap;
    Map controlId2DateMap;

    Map fieldSourceTargetMap;
    Map measureFieldLabelMap;
    container curMeasures;

    Integer visibleMeasure;
    Integer maxMeasure;
    Integer activeAmountOnDateControl;
    Integer paymentAccountLevel;
    boolean forceRecalcForm;

    CFMAnalyticMeasureFieldListPanel measureFieldListPanel;
    const int currencyLevel = 1;
    const str delimiter = '#';
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearActiveAmountOnDateControl</Name>
				<Source><![CDATA[
    public void clearActiveAmountOnDateControl()
    {
        activeAmountOnDateControl = 0; 
        changePaymSourceButtonControl.text("@Cashflowmanagement:ChangePaymentSources");
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActiveAmountOnDateControl</Name>
				<Source><![CDATA[
    public void setActiveAmountOnDateControl(CFMAnalyticTableTmp _analyticTableTmp, FormRealControl _ctrl)
    {
        if (this.showAmountContext(_analyticTableTmp))
        {
            if (!activeAmountOnDateControl || _ctrl.id() != activeAmountOnDateControl)
            {
                activeAmountOnDateControl = _ctrl.id();
                changePaymSourceButtonControl.text("@Cashflowmanagement:ChangePaymentSources" + ' ' + strFmt("@GEE12693", controlId2DateMap.lookup(_ctrl.id())));
            }
            //refresh button enabled
            this.dataSourceActive(_analyticTableTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveAmountOnDateControl</Name>
				<Source><![CDATA[
    public int getActiveAmountOnDateControl()
    {
        return activeAmountOnDateControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAnalyticTableForm</Name>
				<Source><![CDATA[
    public static CFMAnalyticTableFormController constructAnalyticTableForm(FormRun _formRun)
    {
        CFMAnalyticTableFormController controller = new CFMAnalyticTableFormController(); 
        controller.initFromAnalyticTableForm(_formRun);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAnalyticalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls recalculation of data that should be represented in the form.
    /// </summary>
    public void calculateAnalyticalTable()
    {
        container newMeasureList = this.getMeasureFieldList();

        if (curMeasures != newMeasureList || this.parmForceRecalcForm())
        {
            if (conLen(newMeasureList) >= min(dimof(analyticalTable.SortMeasure), dimof(analyticalTable.DisplayMeasure)))
            {
                throw (error(strFmt("@Cashflowmanagement:PaymSchedAnalyticReportProcessNoMoreMeasures", min(dimof(analyticalTable.SortMeasure), dimof(analyticalTable.DisplayMeasure)))));
            }

            curMeasures = newMeasureList;
            this.initfieldSourceTargetMap(curMeasures);

            analyticalPivoter = CFMAnalyticalPivoter::constructFromJournal(journalTable.JournalId);
            analyticalPivoter.parmFieldSourceTargetMap(fieldSourceTargetMap);
            analyticalPivoter.setAnalyticTable(analyticalTable);

            analyticalPivoter.calc();

            this.parmForceRecalcForm(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the <c>init</c> method of the <c>CFMAnalyticTable</c> form data source.
    /// </summary>
    /// <param name="_analyticalTable">
    /// A record from the <c>CFMAnalyticTableTmp</c> table.
    /// </param>
    public void datasourceInitPost(CFMAnalyticTableTmp _analyticalTable)
    {
        formDataSource = _analyticalTable.dataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the display options for an analytic table record.
    /// </summary>
    /// <param name="_record">
    /// The current cursor of <c>CFMAnalyticTableTmp</c> type.
    /// </param>
    /// <param name="_options">
    /// The record options.
    /// </param>
    public void displayOption(CFMAnalyticTableTmp _record, FormRowDisplayOption _options)
    {
        #define.Yellow(255, 255, 153)
        FieldId fieldId;
        FieldId sourceFieldId, targetFieldId, targetFieldStrId, targetDisplayFieldId;
        Name attributeName;
        FieldId paymAccFieldId, paymAccTypeFieldId;

        if (usePaymentAccountNum && _record.Level == paymentAccountLevel)
        {
            [sourceFieldId, attributeName, targetFieldId, targetFieldStrId, targetDisplayFieldId] = fieldSourceTargetMap.lookup(paymentAccountLevel);
            paymAccFieldId = targetFieldStrId;
            [sourceFieldId, attributeName, targetFieldId, targetFieldStrId, targetDisplayFieldId] = fieldSourceTargetMap.lookup(paymentAccountLevel - 1);
            paymAccTypeFieldId = targetFieldStrId;
        }

        _options.fontBold(_record.AnalyticLineType != CFMAnalyticLineType::RegularLine);

        if (_record.AnalyticLineType == CFMAnalyticLineType::ActualBalance && amountDateFieldsMap)
        {
            MapEnumerator me = amountDateFieldsMap.getEnumerator();

            while (me.moveNext())
            {
                FormControlId formControlId;
                TransDate curDate;
                [fieldId, formControlId, curDate] = me.currentValue();

                if (_record.Level == CurrencyLevel)
                {
                    if (!cashBalance.checkDailyBalance(_record.getFieldValue(fieldStr(CFMAnalyticTableTmp, SortMeasure), CurrencyLevel), _record.(fieldId)))
                    {
                        _options.backColor(WinApi::RGB2int(#Yellow));
                        _options.affectedElementsByControl(formControlId);
                    }
                }
                else if (usePaymentAccountNum && _record.Level == paymentAccountLevel)
                {
                    [sourceFieldId, attributeName, targetFieldId, targetFieldStrId, targetDisplayFieldId] = fieldSourceTargetMap.lookup(paymentAccountLevel);

                    if (!cashBalance.checkAccountBalance(_record.(paymAccTypeFieldId), _record.(paymAccFieldId), _record.(fieldId)))
                    {
                        _options.backColor(WinApi::RGB2int(#Yellow));
                        _options.affectedElementsByControl(formControlId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the <c>init</c> method of the <c>CFMAnalyticTable</c> form.
    /// </summary>
    public void formInitPost()
    {
        measureFieldListPanel.parmSource(journalTable);

        originByDateButtonControl = formRun.control(formRun.controlId(formControlStr(CFMAnalyticTable, ShowOrigin)));
        changePaymSourceButtonControl = formRun.control(formRun.controlId(formControlStr(CFMAnalyticTable, ChangePaymentSources)));
        measuresVisibleButtonControl  = formRun.control(formRun.controlId(formControlStr(CFMAnalyticTable, MeasuresVisibleButton)));

        measureFieldListPanel.init();

        this.initDateFieldMaps();

        measureFieldListPanel.fill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called before the <c>init</c> method of the <c>CFMAnalyticTable</c> form.
    /// </summary>
    public void formInitPre()
    {
        CFMAnalyticTableTmp locAnalyticTable;

        if (journalTable.DateTo - journalTable.DateFrom >= dimof(locAnalyticTable.AmountOnDate) - 1)
        {
            throw (error(strFmt("@Cashflowmanagement:PaymSchedAnalyticReportProcessNoMoreDatesOfJour", dimof(locAnalyticTable.AmountOnDate) - 1)));
        }

        measureFieldListPanel = CFMAnalyticMeasureFieldListPanel::newForm(
            formRun,
            formRun.controlId(formControlStr(CFMAnalyticTable, FieldListGroup)));

        measureFieldListPanel.parmExcludeFields(this.getMeasureFieldList(true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAnalyticTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of the <c>CFMAnalyticTableTmp</c> table.
    /// </summary>
    /// <returns>
    /// The instance of the <c>CFMAnalyticTableTmp</c> table.
    /// </returns>
    public CFMAnalyticTableTmp getAnalyticTable()
    {
        select analyticalTable;

        return analyticalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkedMeasureFieldNameList</Name>
				<Source><![CDATA[
    private container getMarkedMeasureFieldNameList()
    {
        Container fieldIdCon;

        FormListControl viewLeft = measureFieldListPanel.parmViewSelected();

        if (viewLeft.getCount())
        {
            for (int i = 0; i < viewLeft.getCount(); i++)
            {
                fieldIdCon += viewLeft.getItem(i).data();
            }
        }

        return fieldIdCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMeasureFieldLabel</Name>
				<Source><![CDATA[
    private FieldLabel getMeasureFieldLabel(FieldName _fieldName, Name _attributeName)
    {
        FieldLabel label;

        if (_attributeName)
        {
            label = _attributeName;
        }
        else
        {
            CFMJournalAggregationField aggregationField;
            aggregationField.FieldName = _fieldName;
            label = aggregationField.description();
        }

        return label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMeasureFieldList</Name>
				<Source><![CDATA[
    private container getMeasureFieldList(boolean _getPredefinedOnly = false)
    {
        Container fieldIdCon;

        fieldIdCon += fieldStr(CFMJournalTrans, CurrencyCode);

        if (_getPredefinedOnly || usePaymentAccountNum)
        {
            fieldIdCon += fieldStr(CFMJournalTrans, PaymentAccountType);
            fieldIdCon += fieldStr(CFMJournalTrans, PaymentAccountNum);
        }

        if (_getPredefinedOnly || usePaymMode)
        {
            fieldIdCon += fieldStr(CFMJournalTrans, PaymMode);
        }

        if (!_getPredefinedOnly)
        {
            fieldIdCon += this.getMarkedMeasureFieldNameList();
        }

        fieldIdCon += fieldStr(CFMJournalTrans, SourceType);

        return fieldIdCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDateFieldMaps</Name>
				<Source><![CDATA[
    private void initDateFieldMaps()
    {
        SysDictTable sdtAnalyticTable = SysDictTable::newTableId(tableNum(CFMAnalyticTableTmp));
        FieldId fieldId;

        void  addElement(Integer _i, TransDate _transDate)
        {
            Str controlName;
            FormControlId formControlId;

            controlName = strFmt(identifierStr('AmountOnDate_AmountOnDate_%1'), _i);
            formControlId = formRun.controlId(controlName);

            if (!formControlId)
            {
                throw error(strFmt("@Cashflowmanagement:FormDoesNotContainFieldTxt", controlName));
            }

            amountDateFieldsMap.insert(_i, [fieldId2Ext(fieldId, _i), formControlId, _transDate]);
            controlId2DateMap.insert(formControlId, _transDate);
        }

        amountDateFieldsMap = new Map(Types::Integer, Types::Container);
        controlId2DateMap = new Map(Types::Integer, Types::Date);

        fieldId = fieldNum(CFMAnalyticTableTmp, AmountOnDate);

        addElement(1, dateNull());

        int i = amountDateFieldsMap.elements();

        for (TransDate curDate = journalTable.DateFrom; curDate <= journalTable.DateTo; curDate++)
        {
            i++;
            addElement(i, curDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldSourceTargetMap</Name>
				<Source><![CDATA[
    private void initFieldSourceTargetMap(container _fields)
    {
        SysDictTable sdtJournalTrans = SysDictTable::newTableId(tableNum(CFMJournalTrans));
        SysDictTable sdtAnalyticTable = SysDictTable::newTableId(tableNum(CFMAnalyticTableTmp));
        FieldId sourceFieldId, targetFieldId, targetFieldStrId, targetDisplayFieldId;

        FieldId sortMeasureFieldId = fieldNum(CFMAnalyticTableTmp, SortMeasure);
        FieldId displayMeasureFieldId = fieldNum(CFMAnalyticTableTmp, DisplayMeasure);
        fieldSourceTargetMap = new Map (Types::Integer, Types::Container);
        measureFieldLabelMap = new Map (Types::Integer, Types::String);

        Counter measureQty = conLen(_fields);

        for (int i = 1; i <= measureQty; i++)
        {
            FieldName fieldName;
            Name attributeName;
        
            [fieldName, attributeName] = str2con_RU(conPeek(_fields, i), Delimiter);

            if (attributeName == int2str(0))
            {
                attributeName = '';
            }

            sourceFieldId = sdtJournalTrans.fieldName2Id(fieldName);
            targetFieldId = sdtAnalyticTable.fieldName2Id(fieldName);

            targetDisplayFieldId = fieldId2Ext(displayMeasureFieldId, i);
            targetFieldStrId = fieldId2Ext(sortMeasureFieldId, i);

            fieldSourceTargetMap.insert(i, [sourceFieldId, attributeName, targetFieldId, targetFieldStrId, targetDisplayFieldId]);

            if (targetFieldId == fieldNum(CFMAnalyticTableTmp, PaymentAccountNum))
            {
                paymentAccountLevel = i;
            }

            measureFieldLabelMap.insert(i, this.getMeasureFieldLabel(fieldName, attributeName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceActive</Name>
				<Source><![CDATA[
    public void dataSourceActive(CfmAnalyticTableTmp _cfmAnalyticTableTmp)
    {
        switch (this.isSelectLineMeasureCollapse(_cfmAnalyticTableTmp))
        {
            case UnknownNoYes::Yes:
                measuresVisibleButtonControl.text("@Res:Collapse");
                measuresVisibleButtonControl.enabled(true);
                break;

            case UnknownNoYes::No:
                measuresVisibleButtonControl.text("@Res:Expand");
                measuresVisibleButtonControl.enabled(true);
                break;

            default:
                measuresVisibleButtonControl.enabled(false);
        }

        boolean showAmountContext = this.getActiveAmountOnDateControl() != 0;

        originByDateButtonControl.enabled(this.isCanShowOrigin(_cfmAnalyticTableTmp));

        changePaymSourceButtonControl.enabled(showAmountContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAnalyticTableForm</Name>
				<Source><![CDATA[
    private void initFromAnalyticTableForm(FormRun _formRun)
    {
        formRun = _formRun;

        journalTable = _formRun.args().record();

        cashBalance = CFMAnalyticFormBalance::construct(journalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        maxMeasure = dimOf(analyticalTable.SortMeasure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForceRecalcForm</Name>
				<Source><![CDATA[
    public boolean parmForceRecalcForm(boolean _forceRecalcForm = forceRecalcForm)
    {
        forceRecalcForm = _forceRecalcForm;
        return forceRecalcForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsePaymentAccountNum</Name>
				<Source><![CDATA[
    public NoYes parmUsePaymentAccountNum(NoYes _usePaymentAccountNum = usePaymentAccountNum)
    {
        usePaymentAccountNum = _usePaymentAccountNum;

        return usePaymentAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsePaymMode</Name>
				<Source><![CDATA[
    public CFMShowPaymModeTotals parmUsePaymMode(CFMShowPaymModeTotals _usePaymMode = usePaymMode)
    {
        usePaymMode = _usePaymMode;

        return usePaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCanShowOrigin</Name>
				<Source><![CDATA[
    public boolean isCanShowOrigin(CFMAnalyticTableTmp _cursor)
    {
        return this.showAmountContext(_cursor) && controlId2DateMap.exists(activeAmountOnDateControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pivoter</Name>
				<Source><![CDATA[
    public CFMAnalyticalPivoter pivoter()
    {
        return analyticalPivoter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSelectLineMeasureCollapse</Name>
				<Source><![CDATA[
    /// <summary>
    /// return visibility of measures on the form.
    /// </summary>
    /// <param name="_cursor">
    /// The current cursor of <c>CFMAnalyticTable</c> type.
    /// </param>
    /// <returns>
    /// state of collapse for the measure (Unknown - if it is not a measure, Yes - if Collapse, No - expand)
    /// </returns>
    public UnknownNoYes isSelectLineMeasureCollapse(CFMAnalyticTableTmp _cursor)
    {
        if (_cursor.Level == fieldSourceTargetMap.elements())
            return UnknownNoYes::Unknown;

        if (visibleMeasure > _cursor.Level || !visibleMeasure)
            return UnknownNoYes::Yes;

        return UnknownNoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMeasureVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes visibility of measures on the form.
    /// </summary>
    /// <param name="_cursor">
    /// The current cursor of <c>CFMAnalyticTable</c> type.
    /// </param>
    public void processMeasureVisibility(CFMAnalyticTableTmp _cursor)
    {
        int selectedMeasureId = _cursor.Level;
        str rangeValue;
        CFMAnalyticTableTmp cursor;

        cursor.data(_cursor);

        if (selectedMeasureId == fieldSourceTargetMap.elements())
        {
            //line type should not be processed
            return;
        }
        else if (visibleMeasure > selectedMeasureId || !visibleMeasure)
        {
            //collapse
            visibleMeasure = selectedMeasureId;
            rangeValue = strFmt('< %1', visibleMeasure + 1);
            CFMAnalyticalPivoter::markDrillSign(analyticalTable, false, visibleMeasure, fieldSourceTargetMap.elements() - 1);
        }
        else if (visibleMeasure == selectedMeasureId)
        {
            //expand
            visibleMeasure = 0;
            rangeValue = SysQuery::valueUnlimited();
            CFMAnalyticalPivoter::markDrillSign(analyticalTable, true, selectedMeasureId, fieldSourceTargetMap.elements() - 1);
        }

        Query query = formDataSource.query();
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(CFMAnalyticTableTmp));
        SysQuery::findOrCreateRange(qbds, fieldNum(CFMAnalyticTableTmp, Level)).value(rangeValue);

        formDataSource.executeQuery();
        formDataSource.positionToRecord(cursor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh of data presentation on the form.
    /// </summary>
    public void refresh()
    {
        formRun.lock();
        this.updateDesignDataFields();
        this.updateDesignMeasureFields();
        formDataSource.executeQuery();
        formRun.redraw();
        formRun.unLock();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAmountContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether amount context can be shown.
    /// </summary>
    /// <param name="_analyticTableTmp">
    /// The cursor of <c>CFMAnalyticTableTmp</c> type.
    /// </param>
    /// <returns>
    /// true if amount context can be shown; otherwise false.
    /// </returns>
    public boolean showAmountContext(CFMAnalyticTableTmp _analyticTableTmp)
    {
        return analyticalPivoter &&
               analyticalPivoter.parmFieldSourceTargetMap() &&
               CFMAnalyticSourceDataEdit::isEditDataAllowed(_analyticTableTmp, fieldSourceTargetMap.elements()) &&
               journalTable.isNotSubmittedWF() &&
               journalTable.Posted == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEditSourceDataForm</Name>
				<Source><![CDATA[
    public void showEditSourceDataForm(CFMAnalyticTableTmp _analyticalTable)
    {
        if (_analyticalTable.Level == fieldSourceTargetMap.elements())
        {
            if (!controlId2DateMap.exists(activeAmountOnDateControl))
            {
                throw error(strFmt("@SYS19378",funcName()));
            }

            CFMAnalyticFormDataEditController formDataEditController = CFMAnalyticFormDataEditController::constructFromAnalyticForm(this,
                _analyticalTable,
                fieldSourceTargetMap,
                analyticalPivoter.amountDateFieldIdMap(),
                controlId2DateMap.lookup(activeAmountOnDateControl),
                journalTable.JournalId);

            formDataEditController.parmUsePaymAccountNum(usePaymentAccountNum);
            formDataEditController.showEditForm();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a form of sources of data in the given record.
    /// </summary>
    /// <param name="_analyticalTable">
    /// The cursor of <c>CFMAnalyticTableTmp</c> type.
    /// </param>
    /// <param name="_ctrl">
    /// The form control that was double clicked during call. The date of documents gets from its id.
    /// </param>
    public void showOrigin(CFMAnalyticTableTmp _analyticalTable)
    {
        if (_analyticalTable.Level == fieldSourceTargetMap.elements())
        {
            if (!controlId2DateMap.exists(activeAmountOnDateControl))
            {
                throw error(strFmt("@SYS19378",funcName()));
            }

            CFMAnalyticOrigDoc origDocBuilder = CFMAnalyticOrigDoc::construct(_analyticalTable,
                fieldSourceTargetMap,
                controlId2DateMap.lookup(activeAmountOnDateControl),
                journalTable.JournalId);

            if (origDocBuilder)
            {
                origDocBuilder.run();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignDataFields</Name>
				<Source><![CDATA[
    private void updateDesignDataFields()
    {
        CFMAmountOnDate amountOnDate;

        for (int i = 1; i <= dimof(amountOnDate); i++)
        {
            if ((!journalTable.IncludeOverduePayment && i == 1) ||
               !amountDateFieldsMap.exists(i))
            {
                formDataSource.object(fieldId2Ext(fieldNum(CFMAnalyticTableTmp, AmountOnDate), i)).visible(false);
            }
            else
            {
                FieldId fieldId;
                FormControlId formControlId;
                TransDate curDate;
                str label;

                [fieldId, formControlId, curDate] = amountDateFieldsMap.lookup(i);
                FormRealControl curFormControl = formRun.control(formControlId);

                if (curDate)
                {
                    label = date2StrUsr(curDate, DateFlags::FormatAll);
                }
                else
                {
                    label = "@Cashflowmanagement:Arrears";
                }

                curFormControl.label(label);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignMeasureFields</Name>
				<Source><![CDATA[
    private void updateDesignMeasureFields()
    {
        for (int i = 1; i <= maxMeasure; i++)
        {
            FormControlId formControlId = formRun.controlId(strFmt('DisplayMeasure_DisplayMeasure_%1', i));

            if (formControlId)
            {
                FormStringControl stringControl = formRun.control(formControlId);

                if (measureFieldLabelMap.exists(i))
                {
                    stringControl.label(measureFieldLabelMap.lookup(i));
                    stringControl.visible(true);
                }
                else
                {
                    stringControl.visible(false);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>