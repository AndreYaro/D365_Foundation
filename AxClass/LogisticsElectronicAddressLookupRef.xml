<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsElectronicAddressLookupRef</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LogisticsElectronicAddressLookupRef extends SysReferenceTableLookup
{
    boolean returnLocation;
    LogisticsElectronicAddressMethodType methodType;
    Common entity, callingBuffer;
    FormRun callingForm;
    FormBuildDataSource locationDataSource;
    FormBuildDataSource electronicAddressDataSource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildAdditionalFormDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates additional form data sources for the lookup.
    /// </summary>
    /// <param name="_form">
    ///    A form object where the lookup will be rendered.
    /// </param>
    public void buildAdditionalFormDataSources(Form _form)
    {
        const str logisticsLocationRelationName = 'Location';
        super(_form);

        if (returnLocation)
        {
            // Add Postal Address
            electronicAddressDataSource = _form.addDataSource(tablestr(LogisticsElectronicAddress));
            electronicAddressDataSource.table(tablenum(LogisticsElectronicAddress));

            this.configureLookupDataSource(electronicAddressDataSource);
            electronicAddressDataSource.joinSource(_form.dataSource(1).name());
            electronicAddressDataSource.joinRelation(logisticsLocationRelationName);
            electronicAddressDataSource.linkType(FormLinkType::InnerJoin);
        }
        else
        {
            // Add LogisticsLocation
            locationDataSource = _form.addDataSource(tablestr(LogisticsLocation));
            locationDataSource.table(tablenum(LogisticsLocation));

            this.configureLookupDataSource(locationDataSource);
            locationDataSource.joinSource(_form.dataSource(1).name());
            locationDataSource.joinRelation(logisticsLocationRelationName);
            locationDataSource.linkType(FormLinkType::InnerJoin);
        }

        // Form Name
        _form.name(classstr(LogisticsLocationSelectionLookup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies additional properties of the arguments.
    /// </summary>
    /// <param name="_args">
    ///    The arguments of the <c>SysTableLookupBase</c> class.
    /// </param>
    /// <remarks>
    ///    Override this method to add properties of the arguments.
    /// </remarks>
    protected void buildArgs(Args _args)
    {
        super(_args);

        _args.caller(callingForm);
        _args.record(callingBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGrid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the grid control at runtime.
    /// </summary>
    /// <param name="_formBuildGridControl">
    ///    A <c>FormBuildGridControl</c> object that the lookup will use.
    /// </param>
    /// <param name="_formBuildDataSource">
    ///    A <c>FormBuildDataSource</c> object that the lookup will use.
    /// </param>
    /// <returns>
    ///    A <c>FormBuildDataSource</c> object that the lookup will render.
    /// </returns>
    protected FormBuildGridControl buildGrid(FormBuildGridControl _formBuildGridControl, FormBuildDataSource _formBuildDataSource)
    {
        FormBuildGridControl ret;

        if (!returnLocation)
        {
            // Add LogisticsLocation fields
            _formBuildGridControl.addDataField(locationDataSource.id(), fieldnum(LogisticsLocation, Description));
        }

        ret = super(_formBuildGridControl, _formBuildDataSource);

        if (returnLocation)
        {
            // Add Postal address fields
            _formBuildGridControl.addDataField(electronicAddressDataSource.id(), fieldnum(LogisticsElectronicAddress, Locator));

            if (methodType == LogisticsElectronicAddressMethodType::Phone)
            {
                _formBuildGridControl.addDataField(electronicAddressDataSource.id(), fieldnum(LogisticsElectronicAddress, LocatorExtension));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the query that the lookup will use.
    /// </summary>
    public void buildQuery()
    {
        Query myQuery;
        QueryBuildDataSource qbd, qbdLocation, qbdEntityLocation;
        DirParty party;
        RecId entityRecId;
        tableId entityLocationTableId;
        fieldId entityFieldId;

        myQuery = new Query();

        if (this.parmReturnLocation())
        {
            qbdLocation = myQuery.addDataSource(tablenum(LogisticsLocation));
            qbd = qbdLocation.addDataSource(tablenum(LogisticsElectronicAddress));
            qbd.joinMode(JoinMode::InnerJoin);
            qbd.relations(true);
        }
        else
        {
            qbd = myQuery.addDataSource(tablenum(LogisticsElectronicAddress));
            qbdLocation = qbd.addDataSource(tablenum(LogisticsLocation));
            qbdLocation.joinMode(JoinMode::InnerJoin);
            qbdLocation.relations(true);
        }

        if (methodType)
        {
            qbd.addRange(fieldnum(LogisticsElectronicAddress,Type)).value(SysQuery::value(methodType));
        }

        // Entity is a party
        party = new DirParty(entity);
        entityRecId = party.getPartyRecId();

        entityLocationTableId = LogisticsLocationAppUtil::getEntityLocationTableId(entity.TableId);
        entityFieldId = LogisticsLocationAppUtil::getEntityFieldId(entityLocationTableId);

        qbdEntityLocation = qbdLocation.addDataSource(entityLocationTableId);
        qbdEntityLocation.joinMode(JoinMode::InnerJoin);
        qbdEntityLocation.relations(true);
        qbdEntityLocation.addRange(entityFieldId).value(queryValue(entityRecId));

        this.parmQuery(myQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the <c>new</c> method to create a new instance of the
    ///    <c>LogisticsElectronicAddressLookupRef</c> class.
    /// </summary>
    /// <param name="_entity">
    ///    A <c>Common</c> table buffer from which the lookup is being called.
    /// </param>
    void new(Common _entity)
    {
        returnLocation = true;
        entity = _entity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingBuffer</Name>
				<Source><![CDATA[
    public Common parmCallingBuffer(Common _callingBuffer = callingBuffer)
    {
        callingBuffer = _callingBuffer;

        return callingBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingForm</Name>
				<Source><![CDATA[
    public FormRun parmCallingForm(FormRun _callingForm = callingForm)
    {
        callingForm = _callingForm;

        return callingForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMethodType</Name>
				<Source><![CDATA[
    public LogisticsElectronicAddressMethodType parmMethodType(LogisticsElectronicAddressMethodType _methodType = methodType)
    {
        methodType = _methodType;
        return methodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnLocation</Name>
				<Source><![CDATA[
    public boolean parmReturnLocation(boolean _returnLocation = returnLocation)
    {
        returnLocation = _returnLocation;

        return returnLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performFormLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the <c>performLookup</c> method.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsElectronicAddress</c> record.
    /// </returns>
    public Common performFormLookup()
    {
        Common ret;

        // Init for return type
        if (returnLocation)
        {
            this.parmTableId(tablenum(LogisticsLocation));
            this.addLookupfield(fieldnum(LogisticsLocation, Description));
        }
        else
        {
            this.parmTableId(tablenum(LogisticsElectronicAddress));
            this.addLookupfield(fieldnum(LogisticsElectronicAddress, Locator));
            if (methodType == LogisticsElectronicAddressMethodType::Phone)
            {
                this.addLookupfield(fieldnum(LogisticsElectronicAddress, LocatorExtension));
            }
        }

        this.buildQuery();

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LogisticsElectronicAddressLookupRef construct(Common _entity)
    {
        return new LogisticsElectronicAddressLookupRef(_entity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the object with necessary parameters.
    /// </summary>
    /// <param name="_callingControl">
    ///    The <c>FormReferenceControl</c> calling control.
    /// </param>
    /// <param name="_entity">
    ///    A common table buffer from where it was called.
    /// </param>
    /// <param name="_methodType">
    ///    A <c>LogisticsElectronicAddressMethodType</c> enumeration type.
    /// </param>
    /// <returns>
    ///    A <c>LogisticsElectronicAddressLookupRef</c> object.
    /// </returns>
    public static LogisticsElectronicAddressLookupRef newParameters(FormReferenceControl _callingControl, Common _entity, LogisticsElectronicAddressMethodType _methodType)
    {
        LogisticsElectronicAddressLookupRef lookup = LogisticsElectronicAddressLookupRef::construct(_entity);

        lookup.parmCallingControl(_callingControl);
        lookup.parmMethodType(_methodType);

        return lookup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>