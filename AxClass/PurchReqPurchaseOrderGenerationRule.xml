<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqPurchaseOrderGenerationRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReqPurchaseOrderGenerationRule
{
    RefRecId     policyRuleId;
    PurchReqLine purchReqLine;

    private PurchReqInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canConsolidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the record can be aggregated.
    /// </summary>
    /// <returns>
    /// true if the record can be consolidated; otherwise, false.
    /// </returns>
    private boolean canConsolidate()
    {
        PurchReqConsolidationHoldByCategoryRule purchReqConsolidationHoldByCategoryRule;
        PurchReqConsolidationHoldByVendorRule   purchReqConsolidationHoldByVendorRule;
        boolean                                 enableConsolidateCatalogItem = false;
        boolean                                 retConsolidation = false;

        switch (this.purchReqConsolidationRule().EnableManualHold)
        {
            case PurchReqSourcingConsolidationType::Always:
                retConsolidation = true;
                break;
            case PurchReqSourcingConsolidationType::Never:
                retConsolidation = false;
                break;
            case PurchReqSourcingConsolidationType::Conditionally:
                switch (purchReqLine.LineType)
                {
                    case PurchReqLineType::Item:
                        switch (this.purchReqConsolidationRule().EnableHoldByInternalCatalogItem)
                        {
                            case PurchReqSourcingCatalogItemHoldType::All:
                                retConsolidation = true;
                                break;
                            case PurchReqSourcingCatalogItemHoldType::None:
                                retConsolidation = false;
                                break;
                            case PurchReqSourcingCatalogItemHoldType::Conditionally:
                                enableConsolidateCatalogItem = true;
                                break;
                        }
                        break;

                    case PurchReqLineType::External:
                        switch (this.purchReqConsolidationRule().EnableHoldByExternalCatalogItem)
                        {
                            case PurchReqSourcingCatalogItemHoldType::All:
                                retConsolidation = true;
                                break;
                            case PurchReqSourcingCatalogItemHoldType::None:
                                retConsolidation = false;
                                break;
                            case PurchReqSourcingCatalogItemHoldType::Conditionally:
                                enableConsolidateCatalogItem = true;
                                break;
                        }
                        break;

                    case PurchReqLineType::Category:
                        switch (this.purchReqConsolidationRule().EnableHoldByNonCatalogItem)
                        {
                            case PurchReqSourcingCatalogItemHoldType::All:
                                retConsolidation = true;
                                break;
                            case PurchReqSourcingCatalogItemHoldType::None:
                                retConsolidation = false;
                                break;
                            case PurchReqSourcingCatalogItemHoldType::Conditionally:
                                enableConsolidateCatalogItem = true;
                                break;
                        }
                        break;
                }

                if (enableConsolidateCatalogItem)
                {
                    // Check for both category and vendor consolidation exist
                    select RecId, PurchReqConsolidationHoldByCategoryRule, VendAccountNum, VendDataAreaId from purchReqConsolidationHoldByVendorRule
                      join RecId, ProcurementCategory from purchReqConsolidationHoldByCategoryRule
                     where purchReqConsolidationHoldByCategoryRule.RecId               == purchReqConsolidationHoldByVendorRule.PurchReqConsolidationHoldByCategoryRule
                        && purchReqConsolidationHoldByCategoryRule.ProcurementCategory == purchReqLine.ProcurementCategory
                        && purchReqConsolidationHoldByVendorRule.VendAccountNum        == purchReqLine.VendAccount
                        && purchReqConsolidationHoldByVendorRule.VendDataAreaId        == purchReqLine.VendAccountDataArea;

                    if (purchReqConsolidationHoldByVendorRule)
                    {
                        retConsolidation = true;
                    }

                    // Check for only category consolidation exist and no vendor for holding
                    select RecId from purchReqConsolidationHoldByCategoryRule
                     where purchReqConsolidationHoldByCategoryRule.PurchReqConsolidationRule == this.purchReqConsolidationRule().RecId
                        && purchReqConsolidationHoldByCategoryRule.ProcurementCategory       == purchReqLine.ProcurementCategory;

                    select RecId from purchReqConsolidationHoldByVendorRule
                     where purchReqConsolidationHoldByVendorRule.PurchReqConsolidationHoldByCategoryRule == purchReqConsolidationHoldByCategoryRule.RecId;

                    if (purchReqConsolidationHoldByCategoryRule && !purchReqConsolidationHoldByVendorRule)
                    {
                        retConsolidation = true;
                    }
                }
                break;
        }

        return retConsolidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there is an existing policy.
    /// </summary>
    /// <returns>
    /// true if there is an existing policy; otherwise, false.
    /// </returns>
    public boolean hasPolicy()
    {
        return policyRuleId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPolicy</Name>
				<Source><![CDATA[
        public void initPolicy()
    {
        RefRecId        policyRuleTypeIndex;
        RefRecId        buyingLegalEntity[1];

        // Get the policy rule type index
        policyRuleTypeIndex = SysPolicyRuleType::findByRuleTypePolicyType(SysPolicyRuleTypeEnum::RequisitionToPOCreationRule, SysPolicyTypeEnum::PurchasingPolicy).RecId;

        // Get the LE from purchase requisition line
        buyingLegalEntity[1] = purchReqLine.BuyingLegalEntity;

        // Get the policy rule ID
        policyRuleId = SysPolicies::getPolicyRuleID(buyingLegalEntity, policyRuleTypeIndex, SysPolicyTypeEnum::PurchasingPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isManualCreateCatalogItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the purchase order for the requisition line will be manually created.
    /// </summary>
    /// <returns>
    /// true if purchase order is to be created manually; otherwise, false.
    /// </returns>

    private boolean isManualCreateCatalogItem()
    {
        PurchReqSourcingHoldByCategoryRule  purchReqSourcingHoldByCategoryRule;
        PurchReqSourcingHoldByVendorRule    purchReqSourcingHoldByVendorRule;
        PurchReqSourcingHoldByVendorRule    purchReqSourcingHoldByVendorCategoryRule;
        PurchReqSourcingCatalogItemHoldType purchReqSourcingCatalogItemHoldType;
        boolean                             ret = false;

        switch (purchReqLine.LineType)
        {
            case PurchReqLineType::Item     : purchReqSourcingCatalogItemHoldType = this.purchReqSourcingHoldRule().EnableHoldByInternalCatalogItem; break;
            case PurchReqLineType::External : purchReqSourcingCatalogItemHoldType = this.purchReqSourcingHoldRule().EnableHoldByExternalCatalogItem; break;
            case PurchReqLineType::Category : purchReqSourcingCatalogItemHoldType = this.purchReqSourcingHoldRule().EnableHoldByNonCatalogItem;      break;
        }

        switch (purchReqSourcingCatalogItemHoldType)
        {
            case PurchReqSourcingCatalogItemHoldType::All:
                ret = true;
                break;

            case PurchReqSourcingCatalogItemHoldType::None:
                ret = false;
                break;

            case PurchReqSourcingCatalogItemHoldType::Conditionally:
                purchReqSourcingHoldByCategoryRule       = PurchReqSourcingHoldByCategoryRule::findByCategory(
                                                            this.purchReqSourcingHoldRule().RecId,
                                                            purchReqLine.LineType,
                                                            purchReqLine.ProcurementCategory,
                                                            false);

                purchReqSourcingHoldByVendorRule         = PurchReqSourcingHoldByVendorRule::findByVendAccount(
                                                            this.purchReqSourcingHoldRule().RecId,
                                                            purchReqLine.LineType,
                                                            purchReqLine.ProcurementCategory,
                                                            purchReqLine.VendAccount,
                                                            purchReqLine.VendAccountDataArea,
                                                            false);

                purchReqSourcingHoldByVendorCategoryRule = PurchReqSourcingHoldByVendorRule::findByCategory(
                                                            this.purchReqSourcingHoldRule().RecId,
                                                            purchReqLine.LineType,
                                                            purchReqLine.ProcurementCategory,
                                                            false);

                if (purchReqSourcingHoldByCategoryRule && purchReqSourcingHoldByVendorRule.RecId)
                {
                    ret = true;
                }
                else if (purchReqSourcingHoldByCategoryRule && !purchReqSourcingHoldByVendorRule && !purchReqSourcingHoldByVendorCategoryRule)
                {
                    ret = true;
                }

                // Consider manual PO creation if item type is enable and grid is empty
                select firstonly RecId from purchReqSourcingHoldByCategoryRule
                 where purchReqSourcingHoldByCategoryRule.PurchReqSourcingHoldRule == this.purchReqSourcingHoldRule().RecId
                    && purchReqSourcingHoldByCategoryRule.PurchReqSourcingItemType == purchReqLine.LineType;

                if (!purchReqSourcingHoldByCategoryRule)
                {
                    ret = true;
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isManualCreatePurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there are any records that have a policy rule that only allows for manual PO
    /// creation.
    /// </summary>
    /// <returns>
    /// true if manual PO creation exists for purchase requisition line; otherwise, false.
    /// </returns>
    private boolean isManualCreatePurchaseOrder()
    {
        boolean retManualPOCreation = false;

        // If purchase requisition line can be consolidated, then it is manual PO creation
        if (PurchReqPurchaseOrderGenerationRule::canConsolidateStatic(purchReqLine))
        {
            retManualPOCreation = true;
        }

        if (purchReqLine.IsPrepayment == NoYes::Yes && this.purchReqSourcingHoldRule().EnableHoldByPrePayment == NoYes::Yes)
        {
            retManualPOCreation = true;
        }

        if (!retManualPOCreation && this.hasPolicy())
        {
            switch (this.purchReqSourcingHoldRule().EnableManualHold)
            {
                case PurchReqSourcingManualType::Always:
                    retManualPOCreation = true;
                    break;

                case PurchReqSourcingManualType::Conditionally:
                    retManualPOCreation = this.isManualCreateCatalogItem();
                    break;
            }
        }
        else
        {
            // Always manual PO creation if no policy
            retManualPOCreation = true;
        }

        return retManualPOCreation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqLine</Name>
				<Source><![CDATA[
        public PurchReqLine parmPurchReqLine(PurchReqLine _purchReqLine)
    {
        purchReqLine = _purchReqLine;
        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchReqLine</Name>
				<Source><![CDATA[
    internal PurchReqLine getPurchReqLine()
    {
        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPolicyRuleId</Name>
				<Source><![CDATA[
    internal RefRecId parmPolicyRuleId(RefRecId _policyRuleId = policyRuleId)
    {
        if (!prmIsDefault(_policyRuleId))
        {
            policyRuleId = _policyRuleId;
        }
        return policyRuleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqConsolidationRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record from the <c>PurchReqConsolidationRule</c> table.
    /// </summary>
    /// <returns>
    /// A record from the <c>PurchReqConsolidationRule</c> table.
    /// </returns>
    public PurchReqConsolidationRule purchReqConsolidationRule()
    {
        if (PurchReqPurchaseOrderGenerationRuleCache::exists())
        {
            using (var activityContext = this.instrumentationLogger()
                .purchaseOrderGenerationRule().findByRuleFromCache(purchReqLine))
            {
                return PurchReqPurchaseOrderGenerationRuleCache::current().findByRule(policyRuleId);
            }
        }

        return PurchReqConsolidationRule::findByRule(policyRuleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqSourcingHoldRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record from the <c>PurchReqSourcingHoldRule</c> table.
    /// </summary>
    /// <returns>
    /// A record from the <c>PurchReqSourcingHoldRule</c> table.
    /// </returns>
    public PurchReqSourcingHoldRule purchReqSourcingHoldRule()
    {
        return PurchReqSourcingHoldRule::findByRule(policyRuleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqSourcingPolicyRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record from the <c>PurchReqSourcingPolicyRule</c> table.
    /// </summary>
    /// <returns>
    /// A record from the <c>PurchReqSourcingPolicyRule</c> table.
    /// </returns>
    public PurchReqSourcingPolicyRule purchReqSourcingPolicyRule()
    {
        return PurchReqSourcingPolicyRule::find(policyRuleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqSourcingPriceToleranceRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record from the <c>PurchReqSourcingPriceToleranceRule</c> table.
    /// </summary>
    /// <returns>
    /// A record from the <c>PurchReqSourcingPriceToleranceRule</c> table.
    /// </returns>
    public PurchReqSourcingPriceToleranceRule purchReqSourcingPriceToleranceRule()
    {
        return PurchReqSourcingPriceToleranceRule::findByRule(policyRuleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqSourcingSplitRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record from the <c>PurchReqSourcingSplitRule</c> table.
    /// </summary>
    /// <returns>
    /// A record from the <c>PurchReqSourcingSplitRule</c> table.
    /// </returns>
    public PurchReqSourcingSplitRule purchReqSourcingSplitRule()
    {
        return PurchReqSourcingSplitRule::findByRule(policyRuleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConsolidateStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the record can be aggregated.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The record ID in the <c>PurchReqLine</c> table.
    /// </param>
    /// <returns>
    /// true if the record can be consolidated; otherwise, false.
    /// </returns>
    public static boolean canConsolidateStatic(PurchReqLine _purchReqLine)
    {
        PurchReqPurchaseOrderGenerationRule     purchReqPurchaseOrderGenerationRule;

        purchReqPurchaseOrderGenerationRule = PurchReqPurchaseOrderGenerationRule::construct();
        purchReqPurchaseOrderGenerationRule.parmPurchReqLine(_purchReqLine);

        if (PurchReqPurchaseOrderGenerationRuleCache::exists())
        {
            using (var activityContext = purchReqPurchaseOrderGenerationRule.instrumentationLogger()
                .purchaseOrderGenerationRule().initPolicyFromCache(_purchReqLine))
            {
                PurchReqPurchaseOrderGenerationRuleCache::current().initPolicy(purchReqPurchaseOrderGenerationRule);
            }
        }
        else
        {
            purchReqPurchaseOrderGenerationRule.initPolicy();
        }

        return purchReqPurchaseOrderGenerationRule.canConsolidate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PurchReqPurchaseOrderGenerationRule construct()
    {
        return new PurchReqPurchaseOrderGenerationRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isManualCreatePurchaseOrderStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there are any records has a policy rule that only allow for manual PO creation.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The record ID in the <c>PurchReqLine</c> table.
    /// </param>
    /// <returns>
    /// true if manual PO creation exists for purchase requisition line; otherwise, false.
    /// </returns>
    public static boolean isManualCreatePurchaseOrderStatic(PurchReqLine _purchReqLine)
    {
        PurchReqPurchaseOrderGenerationRule     purchReqPurchaseOrderGenerationRule;

        purchReqPurchaseOrderGenerationRule = PurchReqPurchaseOrderGenerationRule::construct();
        purchReqPurchaseOrderGenerationRule.parmPurchReqLine(_purchReqLine);
        purchReqPurchaseOrderGenerationRule.initPolicy();

        return purchReqPurchaseOrderGenerationRule.isManualCreatePurchaseOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqSourcingPolicyRuleStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record from the <c>PurchReqSourcingPolicyRule</c> table.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The record ID in the <c>PurchReqLine</c> table.
    /// </param>
    /// <returns>
    /// A record from the <c>PurchReqSourcingPolicyRule</c> table.
    /// </returns>

    public static PurchReqSourcingPolicyRule purchReqSourcingPolicyRuleStatic(PurchReqLine _purchReqLine)
    {
        PurchReqPurchaseOrderGenerationRule     purchReqPurchaseOrderGenerationRule;

        purchReqPurchaseOrderGenerationRule = PurchReqPurchaseOrderGenerationRule::construct();
        purchReqPurchaseOrderGenerationRule.parmPurchReqLine(_purchReqLine);
        purchReqPurchaseOrderGenerationRule.initPolicy();

        return purchReqPurchaseOrderGenerationRule.purchReqSourcingPolicyRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private PurchReqInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchReqInstrumentationLogger::createLogger(classStr(PurchReqPurchaseOrderGenerationRule));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>