<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TradeNonStockedConversionForm</c> class controls the <c>TradeNonStockedConversion</c> form.
/// </summary>
class TradeNonStockedConversionForm
{
    TradeNonStockedConversion       tradeNonStockedConversion;
    TradeNonStockedConversionItem   tradeNonStockedConversionItem;

    TradeNonStockedConversionStatus conversionStatus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether it can execute the conversion.
    /// </summary>
    /// <returns>
    /// true if it can execute the conversion; otherwise, false.
    /// </returns>
    public boolean allowChange()
    {
        return  conversionStatus == TradeNonStockedConversionStatus::Checked
        ||      conversionStatus == TradeNonStockedConversionStatus::CheckedIssues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowChangeLogReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the change log report can be printed.
    /// </summary>
    /// <returns>
    /// true if the change log report can be printed; otherwise, false.
    /// </returns>
    public boolean allowChangeLogReport()
    {
        return this.parmTradeNonStockedConversion().RecId
            && conversionStatus == TradeNonStockedConversionStatus::Converted ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDeleteLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a line can be deleted.
    /// </summary>
    /// <returns>
    /// true if deletion of a line is enabled; otherwise, false.
    /// </returns>
    public boolean allowDeleteLine()
    {
        return conversionStatus != TradeNonStockedConversionStatus::Converted ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowNewLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a new line can be added to the current conversion.
    /// </summary>
    /// <returns>
    /// true if a new line can be added; otherwise, false.
    /// </returns>
    public boolean allowNewLine()
    {
        return this.parmTradeNonStockedConversion().RecId
        &&     conversionStatus != TradeNonStockedConversionStatus::Converted ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowReadinessCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the readiness check can be executed.
    /// </summary>
    /// <returns>
    /// true if readiness check can be executed; otherwise, false.
    /// </returns>
    public boolean allowReadinessCheck()
    {
        return this.parmTradeNonStockedConversion().RecId
        &&     conversionStatus != TradeNonStockedConversionStatus::Converted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowReadinessWorksheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>TradeNonStockedConversionReadinessWorksheet</c> form can be opened.
    /// </summary>
    /// <returns>
    /// true if issues exists; otherwise, false.
    /// </returns>
    public boolean allowReadinessWorksheet()
    {
        TradeNonStockedConversionItem conversionItem;
        TradeNonStockedConversionCheckLog checkLog;

        select firstonly RecId from checkLog
            exists join conversionItem
                where checkLog.NonStockedConversionItem == conversionItem.RecId
                &&    conversionItem.NonStockedConversion == this.parmTradeNonStockedConversion().RecId;

        return checkLog.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ecoResProductAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the product can be changed on the line.
    /// </summary>
    /// <returns>
    /// true if the product can be changed; otherwise, false.
    /// </returns>
    public boolean ecoResProductAllowEdit()
    {
        return tradeNonStockedConversionItem.ItemId ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the item can be changed on the line.
    /// </summary>
    /// <returns>
    /// true if the item can be changed; otherwise, false.
    /// </returns>
    public boolean itemIdAllowEdit()
    {
        return tradeNonStockedConversionItem.Product ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedConversion</Name>
				<Source><![CDATA[
        public TradeNonStockedConversion parmTradeNonStockedConversion(TradeNonStockedConversion _tradeNonStockedConversion = tradeNonStockedConversion)
    {
        tradeNonStockedConversion = _tradeNonStockedConversion;

        conversionStatus = tradeNonStockedConversion.status();
        return tradeNonStockedConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedConversionItem</Name>
				<Source><![CDATA[
        public TradeNonStockedConversionItem parmTradeNonStockedConversionItem(TradeNonStockedConversionItem _tradeNonStockedConversionItem = tradeNonStockedConversionItem)
    {
        tradeNonStockedConversionItem = _tradeNonStockedConversionItem;
        return tradeNonStockedConversionItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static public TradeNonStockedConversionForm construct()
    {
        return new TradeNonStockedConversionForm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>