<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_VendInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalEngine_VendInvoice extends LedgerJournalEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountModified</Name>
				<Source><![CDATA[
    public DebCredProposal accountModified(LedgerJournalTrans _ledgerJournalTrans,
                                           LedgerJournalTrans_Project _ledgerJournalTrans_Project = null,
                                           LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null
                                           , Tax1099BoxDetail _tax1099Detail = null
                                           , LedgerJournalTrans_RAsset _ledgerJournalTrans_RAsset = null
                                           , LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null
                                           )
    {
        DebCredProposal debCredProposal;
        CompanyId companyId;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            debCredProposal = super(_ledgerJournalTrans, _ledgerJournalTrans_Project, _ledgerJournalTrans_Asset, _tax1099Detail);
        }
        else
        {
            debCredProposal = super(_ledgerJournalTrans, _ledgerJournalTrans_Project, _ledgerJournalTrans_Asset);
        }

        if (_ledgerJournalTrans.CashDiscCode)
        {
            if ( xDataArea::exist(_ledgerJournalTrans.Company))
            {
                companyId = _ledgerJournalTrans.Company;
            }
            else
            {
                companyId = curext();
            }

            changecompany(companyId)
            {
                this.cashDiscCodeModified(_ledgerJournalTrans);
            }

            if (ledgerJournalTrans_ds)
            {
                ledgerJournalTrans_ds.refresh();
            }
        }

        // <GEERU>

        if (_ledgerJournalTrans.Correct_RU)
        {
            _ledgerJournalTrans.CorrectedInvoiceId_RU = '';
            _ledgerJournalTrans.CorrectedInvoiceDate_RU = dateNull();
        }
        // </GEERU>

        return debCredProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDueDateBaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the date to base the due date from.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record contianing the dates.
    /// </param>
    /// <returns>
    /// The date from the <c>LedgerJournalTrans</c> record based on the selection criteria.
    /// </returns>
    public TransDate getDueDateBaseDate(LedgerJournalTrans _ledgerJournalTrans)
    {
        PaymTerm paymTerm;
        paymTerm = PaymTerm::find(_ledgerJournalTrans.Payment);

        // Spanish Prompt Payment Law
        if (paymTerm.UseDeliveryDateForDueDate_ES)
        {
            return _ledgerJournalTrans.LedgerJournalDlvDate_ES;
        }
        else
        {
            return _ledgerJournalTrans.DocumentDate ? _ledgerJournalTrans.DocumentDate : _ledgerJournalTrans.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDueDateLimit</Name>
				<Source><![CDATA[
    public PaymDueDateLimit_ES getDueDateLimit(LedgerJournalTrans _ledgerJournalTrans)
    {
        PaymTerm paymTerm;

        paymTerm = PaymTerm::find(_ledgerJournalTrans.Payment);
        return PaymDueDateLimit_ES::getCurrentValues(paymTerm.DueDateLimitGroupId_ES);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementHeader_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initiates a <c>LedgerJournalTrans</c> record with values based on <c>AgreementHeader</c> record depending on account type.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     The <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_agreementHeader">
    ///     The <c>AgreementHeader</c> record.
    /// </param>
    /// <param name="_accountOffsetAccount">
    ///     Account type, account or offset account; optional.
    /// </param>
    protected void initFromAgreementHeader_RU(LedgerJournalTrans _ledgerJournalTrans,
        AgreementHeader _agreementHeader,
        AccountOffsetAccount _accountOffsetAccount = AccountOffsetAccount::Account)
    {
        super(_ledgerJournalTrans, _agreementHeader, _accountOffsetAccount);

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend &&
            vendTable.vatTaxAgent_RU)
        {
            _ledgerJournalTrans.vatOperationCode_RU = PurchAgreementHeaderExt_RU::findByPurchAgreementHeader(_agreementHeader.recId).vatOperationCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    protected void initFromVendTable(LedgerJournalTrans _ledgerJournalTrans
        , Tax1099BoxDetail _tax1099Detail = null
        )
    {
        #ISOCountryRegionCodes

        DueDate dueDate;
        PaymTerm paymTerm;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            super(_ledgerJournalTrans, _tax1099Detail);
        }
        else
        {
            super(_ledgerJournalTrans);
        }

        if (vendTable.PaymTermId)
        {
            this.findPayment(vendTable.PaymTermId);
            //  If an Invoice number and Document date exist use the Document date to determine the Due date
            //  otherwise use the Transaction date.
            dueDate = payment.due((_ledgerJournalTrans.Invoice && _ledgerJournalTrans.DocumentDate) ?
                            _ledgerJournalTrans.DocumentDate : _ledgerJournalTrans.TransDate,
                            this.paymDayId(_ledgerJournalTrans));
            paymTerm = PaymTerm::find(_ledgerJournalTrans.Payment);

            if (paymTerm
                && InvoiceJournalPaymentScheduleFeature::isEnabled())
            {
                _ledgerJournalTrans.PaymSched = paymTerm.PaymSched;
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
            {
                dueDate = this.getDueDateBaseDate(_ledgerJournalTrans);

                if (dueDate || !paymTerm.UseDeliveryDateForDueDate_ES)
                {
                    dueDate = payment.due(
                        dueDate,
                        this.paymDayId(_ledgerJournalTrans),
                        false,
                        this.getDueDateLimit(_ledgerJournalTrans));
                }
            }
            else if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
            {
                dueDate = this.adjustDueDate(dueDate, _ledgerJournalTrans);
            }

            _ledgerJournalTrans.Due = dueDate;
        }
        else
        {
            _ledgerJournalTrans.Due = _ledgerJournalTrans.TransDate;
        }

        _ledgerJournalTrans.TaxGroup = vendTable.TaxGroup;

        // Only default the offset account when there is not a fixed offset account
        if (ledgerJournalTable.FixedOffsetAccount == NoYes::No)
        {
            _ledgerJournalTrans.OffsetAccountType = vendTable.OffsetAccountType;

            if (vendTable.OffsetAccountType == LedgerJournalACType::Ledger)
            {
                // need to merge the default ledger dimension from the VendTable with the appropiate dimensions
                _ledgerJournalTrans.parmOffsetLedgerDimension(
                    _ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(
                        vendTable.OffsetLedgerDimension,
                        _ledgerJournalTrans.getOffsetCompany()));
            }
            else
            {
               _ledgerJournalTrans.OffsetLedgerDimension = vendTable.OffsetLedgerDimension;
            }
        }

        // <GEERU>
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend &&
            vendTable.vatTaxAgent_RU)
        {
            _ledgerJournalTrans.vatOperationCode_RU = vendTable.vatOperationCode_RU;
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(LedgerJournalTrans ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        super(ledgerJournalTrans);

        if (ledgerJournalTrans.ledgerJournalTable().OffsetAccountType == LedgerJournalACType::Project)
        {
            ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
            ledgerJournalTrans.OffsetLedgerDimension = 0;
        }
        else
        {
            ledgerJournalTrans.OffsetAccountType = ledgerJournalTrans.ledgerJournalTable().OffsetAccountType;
        }
        ledgerJournalTrans.AccountType = LedgerJournalACType::Vend;
        ledgerJournalTrans.SettleVoucher = SettlementType::None;
        ledgerJournalTrans.Approved = NoYes::Yes;
        ledgerJournalTrans.Approver = HcmWorker::userId2Worker(curuserid());
        ledgerJournalTrans.TransactionType = LedgerTransType::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupCodeLookup_RU</Name>
				<Source><![CDATA[
    public boolean markupCodeLookup_RU(FormStringControl _formStringControl)
    {
        MarkupTable::serviceMarkupCodeLookup_RU(_formStringControl);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupCodeModified_RU</Name>
				<Source><![CDATA[
    public void markupCodeModified_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        MarkupTable markupTable;
        DimensionDefault defaultDimension;

        if (_ledgerJournalTrans.MarkupCode_RU)
        {
            markupTable = MarkupTable::find(MarkupModuleType::Vend, _ledgerJournalTrans.MarkupCode_RU);

            if (markupTable.CustType == MarkupType::LedgerAccount &&
                markupTable.VendType == MarkupType::CustVend &&
                markupTable.ModuleType == MarkupModuleType::Vend)
            {
                if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
                {
                    defaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension);
                }
                else
                {
                    defaultDimension = _ledgerJournalTrans.OffsetDefaultDimension;
                }

                if (_ledgerJournalTrans.AccountAgreementId_RU)
                {
                    defaultDimension = AgreementHeaderExt_RU::createAgreementDimension(
                        AgreementHeaderExt_RU::findByAgreementId(_ledgerJournalTrans.AccountAgreementId_RU).RecId,
                        defaultDimension);
                }

                _ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
                _ledgerJournalTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(markupTable.CustomerLedgerDimension, defaultDimension);
            }
            else
            {
                _ledgerJournalTrans.MarkupCode_RU = '';
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>