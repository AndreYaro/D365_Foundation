<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerSheetServer_ActAdjustCust</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RLedgerSheetServer_ActAdjustCust extends RLedgerSheetServer_ActAdjustCustVend
{
    Map mapRootPayment;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bindedTransactions</Name>
				<Source><![CDATA[
        protected RecordSortedList bindedTransactions(CustVendTrans _originalTrans)
    {
        return CustTrans::prepaymentTrans_RU(_originalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKeyForPayment</Name>
				<Source><![CDATA[
        protected container createKeyForPayment(RecID                      _origRecID,
                                            CustVendTrans              _custVendTrans,
                                            RActAdjustCVPartitionType  _actAdjustCVPartitionType,
                                            TempStr                    _invoiceId,
                                            int                        _iNum,
                                            RActAdjustCVPaymType       _paymType,
                                            AgreementHeaderExtRecId_RU _agreementHeaderExtRecId = 0)
    {
        container   conValue, conKey;

        Map         map;

        void createConKey()
        {
            conKey = connull();

            if (_agreementHeaderExtRecId)
            {
                conKey += int642str(_agreementHeaderExtRecId);
            }

            conKey += int2str(_actAdjustCVPartitionType);
            conKey += _invoiceId;
            conKey += int2str(_paymType);
        }

        void inserValue()
        {
            conValue = super(_origRecID, _custVendTrans, _actAdjustCVPartitionType, _invoiceId, _iNum, _paymType, _agreementHeaderExtRecId);
            map.insert(conKey, conValue);
        }
        ;

        if (mapRootPayment.exists(_origRecID))
        {
            map = mapRootPayment.lookup(_origRecID);

            createConKey();

            if (map.exists(conKey))
                conValue = map.lookup(conKey);
            else
                inserValue();
        }
        else
        {
            map = new Map(Types::Container, Types::Container);

            createConKey();
            inserValue();

            mapRootPayment.insert(_origRecID, map);
        }

        return conValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStructBalance</Name>
				<Source><![CDATA[
        protected Struct createStructBalance(TransDate _transDate, str _txt, Amount _amountInvoice, Amount _amountPayment)
    {
        return  RHolderData_ActAdjustCustVend::createStruct(_transDate, _txt, 0, _amountInvoice, _amountPayment, 0, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStructInvoice</Name>
				<Source><![CDATA[
        protected Struct createStructInvoice(TransDate      _transDate,
                                         str            _txt,
                                         Amount         _amountOfDoc,
                                         Amount         _amount,
                                         Amount         _amountTurnover,
                                         RecID          _recID = 0)
    {
        return  RHolderData_ActAdjustCustVend::createStruct(_transDate, _txt, _amountOfDoc, _amount, 0, _amountTurnover, 0, tablenum(CustTrans), _recID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStructPayment</Name>
				<Source><![CDATA[
        protected Struct createStructPayment(TransDate _transDate, str _txt, Amount _amountOfDoc, Amount _amount, Amount _amountTurnover, RecID _recID = 0)
    {
        return RHolderData_ActAdjustCustVend::createStruct(_transDate, _txt, _amountOfDoc, 0, _amount, 0, _amountTurnover, tablenum(CustTrans), _recID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendTrans</Name>
				<Source><![CDATA[
        protected CustVendTrans findCustVendTrans(recId _recID)
    {
        return CustTrans::find(_recID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRootPayment</Name>
				<Source><![CDATA[
        protected CustVendTrans findRootPayment(CustVendTrans _custVendTrans)
    {
        return  _custVendTrans.originalPaymTrans_RU(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementHeaderExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SalesAgreementHeaderExt_RU</c> table record by the record ID provided.
    /// </summary>
    /// <param name="_agreementHeaderExtRecId">
    /// <c>SalesAgreementHeaderExt_RU</c> table record ID.
    /// </param>
    /// <returns>
    /// <c>SalesAgreementHeaderExt_RU</c> table record.
    /// </returns>
    public AgreementHeaderExt_RU getAgreementHeaderExt(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId)
    {
        return SalesAgreementHeaderExt_RU::find(_agreementHeaderExtRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDescription</Name>
				<Source><![CDATA[
        protected TempStr getDocumentDescription(CustVendTrans _custVendTrans)
    {
        TempStr             strRet;

        ;

        switch (_custVendTrans.TransType)
        {
            case LedgerTransType::CollectionLetter :
                strRet = this.getDocumentDescriptionCollectionLetter(_custVendTrans);
                break;

            case LedgerTransType::Interest :
                strRet = this.getDocumentDescriptionInterest(_custVendTrans);
                break;

            default :
                strRet = super(_custVendTrans);
        }

        return strRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDescriptionCollectionLetter</Name>
				<Source><![CDATA[
        protected TempStr getDocumentDescriptionCollectionLetter(CustVendTrans _custVendTrans)
    {
        TempStr                        strRet;

        CustCollectionLetterJour       custCollectionLetterJour;

        ;

        if (this.existsDocumentInfo(_custVendTrans))
            strRet = strfmt("@GLS110608", _custVendTrans.DocumentNum, _custVendTrans.DocumentDate);
        else
        {
            select firstonly RecId, CollectionLetterNum, CollectionLetterDate
                from custCollectionLetterJour
                where  (custCollectionLetterJour.AccountNum    == _custVendTrans.AccountNum) &&
                       (custCollectionLetterJour.Updated       == _custVendTrans.TransDate)  &&
                       (custCollectionLetterJour.LedgerVoucher == _custVendTrans.Voucher);

            if (custCollectionLetterJour)
                strRet = strfmt("@GLS110608", custCollectionLetterJour.CollectionLetterNum, custCollectionLetterJour.CollectionLetterDate);
            else
                strRet = strfmt("@GLS110609", _custVendTrans.Voucher);
        }

        return strRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDescriptionInterest</Name>
				<Source><![CDATA[
        protected TempStr getDocumentDescriptionInterest(CustVendTrans _custVendTrans)
    {
        TempStr             strRet;
        CustInterestJour    custInterestJour;

        date                dtDocumentDate;
        str                 szDocumentNum;

        boolean             bDocumentInfoFound = false;

        ;

        if (this.existsDocumentInfo(_custVendTrans))
        {
            szDocumentNum      = _custVendTrans.DocumentNum;
            dtDocumentDate     = _custVendTrans.DocumentDate;
            bDocumentInfoFound = true;
        }
        else
        {
            select firstonly RecId, InterestNote, Updated
                from custInterestJour
                where (custInterestJour.AccountNum    == _custVendTrans.AccountNum)  &&
                      (custInterestJour.Updated       == _custVendTrans.TransDate)   &&
                      (custInterestJour.FeeVoucher    == _custVendTrans.Voucher);

            if (custInterestJour)
            {
                szDocumentNum      = custInterestJour.InterestNote;
                dtDocumentDate     = custInterestJour.Updated;
                bDocumentInfoFound = true;
            }
        }

        if (bDocumentInfoFound)
            strRet = strfmt("@GLS110606", szDocumentNum, dtDocumentDate);
        else
            strRet = strfmt("@GLS110607", _custVendTrans.Voucher);

        return strRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
        protected RActAdjustCVType getDocumentType(CustVendTrans _custVendTrans)
    {
        RActAdjustCVType    actAdjustCVType;
        CustTrans           origCustTrans;

        ;

        switch (_custVendTrans.TransType)
        {
            case LedgerTransType::CollectionLetter :
                actAdjustCVType = RActAdjustCVType::Invoice;
                break;

            case LedgerTransType::Interest :
                actAdjustCVType = (sign(_custVendTrans.AmountMST) == sign(signInvoice)) ? RActAdjustCVType::Invoice : RActAdjustCVType::CreditNote;
                break;

            default :
                actAdjustCVType = super(_custVendTrans);
        }

        if (actAdjustCVType == RActAdjustCVType::Repayment)
        {
            origCustTrans   = _custVendTrans.originalPaymTrans_RU(false);

            if (origCustTrans.RecId != _custVendTrans.RecId)
            {
                actAdjustCVType = super(origCustTrans);
            }
        }

        return actAdjustCVType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
        protected TempStr getInvoiceId(CustVendTrans _custVendTrans)
    {
        TempStr             sz;
        RActAdjustCVType    actAdjustCVType;

        ;

        actAdjustCVType = this.getDocumentType(_custVendTrans);

        if ((_custVendTrans.TransType == LedgerTransType::CollectionLetter)  ||
          ((_custVendTrans.TransType == LedgerTransType::Interest)          &&
           ((actAdjustCVType         == RActAdjustCVType::Invoice)          ||
            (actAdjustCVType         == RActAdjustCVType::CreditNote))))
        {
            sz = strfmt("@GLS110614", this.dateToStrForKey(_custVendTrans.TransDate), _custVendTrans.Voucher, _custVendTrans.RecId);
        }
        else
            sz = super(_custVendTrans);

        return sz;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTable</Name>
				<Source><![CDATA[
        protected CustVendTable initCustVendTable(CustVendAC _custVendAC)
    {
        return CustTable::find(_custVendAC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        protected void initValue()
    {
        super();

        signInvoice = 1;
        signPayment = -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run(Query _query = null)
    {
        ;

        mapRootPayment = new Map(typeName2Type(extendedTypeStr(recId)), Types::Class);

        super(_query);

        mapRootPayment = null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>