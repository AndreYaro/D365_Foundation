<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class TradeNonStockedValidator
{
    SalesPurchLine  salesPurchLine;

    boolean         totalsHasBeenCalculated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNotOverDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the quantity that is being physically updated results in over-delivery.
    /// </summary>
    /// <param name="_physicalNow">
    ///    The quantity that is being updated.
    /// </param>
    /// <param name="_isPhysicalUpdate">
    ///    A Boolean value that indicates whether the update is a physical update, that is, a packing slip
    ///    update.
    /// </param>
    /// <param name="_isFinancialUpdate">
    ///    A Boolean value that indicates whether the update is a financial update.
    /// </param>
    /// <param name="_isQuantityUpdated">
    ///    A Boolean value that indicates whether the update has already been posted for the line.
    /// </param>
    /// <returns>
    ///    true if the quantity that is being updated exceeds the defined over delivery constraints;
    ///    otherwise, false.
    /// </returns>
    public boolean checkNotOverDelivery(
        UnitQty        _physicalNow,
        boolean        _isPhysicalUpdate,
        boolean        _isFinancialUpdate,
        boolean        _isQuantityUpdated)
    {
        UnitQty     qtyPre;
        UnitQty     qtyPost;
        Percent     subOverPct;

        if (_physicalNow == 0)
        {
            return true;
        }

        if (this.transQty() * _physicalNow < 0)
        {
            return true;
        }

        qtyPre      = abs(this.transQty());
        qtyPost     = this.qtyPost(_physicalNow, _isPhysicalUpdate, _isQuantityUpdated, _isFinancialUpdate);
        subOverPct  = (qtyPost - qtyPre) / (qtyPre ? qtyPre : 1) * 100;

        if (subOverPct > this.overDeliveryPct())
        {
            return checkFailed(strfmt("@SYS24920",subOverPct,this.overDeliveryPct()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotUnderDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the quantity that is being physically updated results in under-delivery.
    /// </summary>
    /// <param name="_physicalNow">
    ///    The quantity that is being updated.
    /// </param>
    /// <param name="_remainPhysicalNow">
    ///    The quantity that is currently yet to be physical updated.
    /// </param>
    /// <param name="_isPhysicalUpdate">
    ///    A Boolean value that indicates whether the update is a physical update.
    /// </param>
    /// <param name="_isQuantityUpdated">
    ///    A Boolean value that indicates whether the update has already been done on the line.
    /// </param>
    /// <returns>
    ///    true if the quantity that is being updated exceeds the defined under delivery constraints;
    ///    otherwise, false.
    /// </returns>
    public boolean checkNotUnderDelivery(
        InventQty       _physicalNow,
        InventQty       _remainPhysicalNow,
        boolean         _isPhysicalUpdate,
        boolean         _isQuantityUpdated)
    {
        UnitQty     qtyPre;
        UnitQty     qtyPost;
        Percent     subOverPct;

        if (_remainPhysicalNow != 0 || _physicalNow == 0)
        {
            return true;
        }

        if (this.transQty() * _physicalNow < 0)
        {
            return true;
        }

        qtyPre      = abs(this.transQty());
        qtyPost     = this.qtyPost(_physicalNow, _isPhysicalUpdate, _isQuantityUpdated);
        subOverPct  = (qtyPre - qtyPost) / (qtyPre ? qtyPre : 1) * 100;

        if (subOverPct > this.underDeliveryPct())
        {
            return checkFailed(strfmt("@SYS24921", subOverPct, this.underDeliveryPct()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoiced quantity for the line.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    abstract protected UnitQty invoiced()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the allowed over-delivery percent for the line.
    /// </summary>
    /// <returns>
    ///    A <c>Percent</c> value.
    /// </returns>
    abstract protected Percent overDeliveryPct()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchLine</Name>
				<Source><![CDATA[
        public SalesPurchLine parmSalesPurchLine(SalesPurchLine _salesPurchLine = salesPurchLine)
    {
        salesPurchLine = _salesPurchLine;

        return salesPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyfinancialUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity that has been financially updated.
    /// </summary>
    /// <returns>
    ///    A <c>UnitQty</c> value.
    /// </returns>
    public abstract UnitQty qtyfinancialUpdated()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyphysicalUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity that has been packing slip updated, but not yet financially updated.
    /// </summary>
    /// <returns>
    ///    A <c>UnitQty</c> value.
    /// </returns>
    abstract protected UnitQty qtyphysicalUpdated()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyphysicalUpdatedAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity that has been physically updated by either registering or receiving.
    /// </summary>
    /// <returns>
    ///    A <c>UnitQty</c> value.
    /// </returns>
    abstract protected UnitQty qtyphysicalUpdatedAll()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total quantity that has been posted for the line, inclusive of the current quantity that
    ///    is being posted.
    /// </summary>
    /// <param name="_physicalNow">
    ///    The quantity that is being updated.
    /// </param>
    /// <param name="_isPhysicalUpdate">
    ///    A Boolean value that indicates whether the update is a physical update.
    /// </param>
    /// <param name="_isQuantityUpdated">
    ///    A Boolean value that indicates whether the update has already been performed on the line.
    /// </param>
    /// <param name="_isFinancialUpdate">
    ///    A Boolean value that indicates whether the update is a financial update.
    /// </param>
    /// <returns>
    ///    A <c>UnitQty</c> value.
    /// </returns>
    protected UnitQty qtyPost(
        InventQty       _physicalNow,
        boolean         _isPhysicalUpdate,
        boolean        _isQuantityUpdated,
        boolean        _isFinancialUpdate = false)
    {
        UnitQty     qtyPost;

        if (_isFinancialUpdate)
        {
            qtyPost = this.qtyfinancialUpdated();
        }
        else
        {
            if (_isPhysicalUpdate)
            {
                qtyPost = this.qtyphysicalUpdated();
            }
            else
            {
                qtyPost = this.qtyphysicalUpdatedAll();
            }

            qtyPost += this.qtyfinancialUpdated();

            if (!_isQuantityUpdated)
            {
                qtyPost     = abs(qtyPost +  _physicalNow) ;
            }
        }

        return qtyPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the registered quantity for the line.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    abstract protected UnitQty registered()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line quantity.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    public UnitQty transQty()
    {
        return salesPurchLine.salesPurchLineInterface().parmQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>underDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the allowed under-delivery percent for the line.
    /// </summary>
    /// <returns>
    ///    A <c>Percent</c> value.
    /// </returns>
    abstract protected Percent underDeliveryPct()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>TradeNonStockedValidator</c> object by using the specified
    ///    <c>SalesLine</c> or <c>PurchLine</c> values.
    /// </summary>
    /// <param name="_salesPurchLine">
    ///    A <c>SalesPurchLine</c> object to use to create the <c>TradeNonStockedValidator</c> object.
    /// </param>
    /// <returns>
    ///    A <c>TradeNonStockedValidator</c> object.
    /// </returns>
    public static TradeNonStockedValidator newFromSalesPurchLine(SalesPurchLine _salesPurchLine)
    {
        TradeNonStockedValidator tradeNonStockedValidator;

        if (!_salesPurchLine)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        switch (_salesPurchLine.TableId)
        {
            case tablenum(PurchLine):
                tradeNonStockedValidator = PurchNonStockedValidator::newFromPurchLine(_salesPurchLine);
                break;
            case tablenum(SalesLine):
                tradeNonStockedValidator = SalesNonStockedValidator::newFromSalesLine(_salesPurchLine);
                break;
        }

        return tradeNonStockedValidator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>