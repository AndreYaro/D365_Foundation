<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGOperationParm_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGOperationParm_RU
{
    LedgerRRGOperationParm_RU   parent;
    LedgerRRGOperationTable_RU  operation;
    LedgerPeriodCode            period;
    LedgerRRGEDocuments_W       document;
    boolean                     documentInited;
    Map                         defaultDimensionFilterMap;
    str                         operationTaxFilter;
    str                         transTypeFilter;
    str                         accountFilter;
    str                         accountReverseFilter;
    str                         offsetAccountFilter;
    Set                         accountSet;
    Set                         accountReverseSet;
    date                        baseDate;
    ReportCalcMethod_RU         calcMethod;
    TransDate                   reportOnDate;
    LedgerRRGCurrencyForCalc_RU currencyForCalc;
    LedgerRRGEScale_W           scale;
    LedgerRRGEPointSignNum_W    pointSignNum;
    SysAlignment                alignment;
    int                         length;
    str                         emptyChar;

    private str accountFilterRecId;
    private str accountReverseFilterRecId;
    private str offsetAccountFilterRecId;

    private const str           OverflowChar	            = '#';
    private const str           Comma	                    = ',';
    private const str           KeyDelim	                = '#';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountFilter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str accountFilter()
    {
        return accountFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountFilterRecId</Name>
				<Source><![CDATA[
    public str accountFilterRecId()
    {
        return accountFilterRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountReverseFilterRecId</Name>
				<Source><![CDATA[
    public str accountReverseFilterRecId()
    {
        return accountReverseFilterRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountFilterRecId</Name>
				<Source><![CDATA[
    public str offsetAccountFilterRecId()
    {
        return offsetAccountFilterRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountReverseFilter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str accountReverseFilter()
    {
        return accountReverseFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountReverseSet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set accountReverseSet()
    {
        return accountReverseSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountSet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set accountSet()
    {
        return accountSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amount2Str</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str amount2Str(Amount _amount)
    {
        if (scale)
        {
            return num2str(decRound(_amount / scale, pointSignNum), -1, pointSignNum, -1, 0);
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public date baseDate(date _baseDate = baseDate)
    {
        baseDate = _baseDate;
        return baseDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyForCalc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGCurrencyForCalc_RU currencyForCalc()
    {
        return currencyForCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimensionFilterMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns a map, representing default dimension filter.
    /// </summary>
    /// <returns>
    ///  A <c>Map</c> class intance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map defaultDimensionFilterMap()
    {
        return defaultDimensionFilterMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>document</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEDocuments_W document(LedgerRRGEDocuments_W _document = document)
    {
        if (!prmisDefault(_document))
        {
            document.data(_document);
            documentInited  = true;
        }
        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentInited</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean documentInited()
    {
        return documentInited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterValue</Name>
				<Source><![CDATA[
    private str filterValue(str _fromValue, str _toValue = _fromValue)
    {
        if (_fromValue == _toValue)
        {
            if (_fromValue)
            {
                return SysQuery::value(_fromValue);
            }
            else
            {
                return SysQuery::valueEmptyString();
            }
        }
        else
        {
            return SysQuery::range(_fromValue, _toValue);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>fmtStr</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str fmtStr(str           _value,
                      SysAlignment  _alignment      = alignment,
                      str           _emptyChar      = emptyChar,
                      int           _length         = length,
                      int           _pointSignNum   = pointSignNum)
    {
        int valueLen = strLen(_value);

        if (_length && valueLen != _length)
        {
            if (valueLen > _length)
            {
                return strRep(OverflowChar, _length);
            }

            if (!_emptyChar)
            {
                _emptyChar = ' ';
            }

            if (_alignment == SysAlignment::AlignDefault || _alignment == SysAlignment::AlignLeft)
            {
                return strLFix(_value, _length, _emptyChar);
            }
            else
            {
                if (_alignment == SysAlignment::AlignRight)
                {
                    return strRFix(_value, _length, _emptyChar);
                }
            }

            return strLFix(strRFix(_value, (_length - valueLen) / 2 + valueLen, _emptyChar), _length, _emptyChar);
        }
        else
        {
            if (!_value && _emptyChar)
            {
                return _emptyChar;
            }
        }

        return _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate fromDate(TransDate _baseDate = baseDate)
    {
        if (documentInited && !operation.LedgerPeriodCode)
        {
            return document.StartPeriod;
        }

        return this.ledgerPeriodCode().fromDate(_baseDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromBuffer(Common _record)
    {
        LedgerRRGCellTable_RU   cellTable;
        LedgerRRGReportTable_RU reportTable;
        LedgerRRGEQueries_W     queries;

        accountSet          = new Set(Types::String);
        accountReverseSet   = new Set(Types::String);
        baseDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        switch (_record.TableId)
        {
            case tableNum(LedgerRRGOperationTable_RU):
                operation.data(_record);
                this.loadAccountList(_record);
                this.loadOffsetAccountList(_record);
                this.loadRTax25ProfitList(_record);
                break;

            case tableNum(LedgerRRGCellTable_RU):
                cellTable                   = _record;
                operation.LedgerPeriodCode  = cellTable.LedgerPeriodCode;
                operation.TypeByCorrect     = cellTable.TypeByCorrect;
                operation.ModelNum          = cellTable.ModelNum;
                operation.rTax25FieldId     = cellTable.rTax25FieldId;
                operation.rTax25RegisterId  = cellTable.rTax25RegisterId;
                alignment                   = cellTable.Alignment;
                length                      = cellTable.Length;
                emptyChar                   = cellTable.EmptyChar;
                pointSignNum                = cellTable.PointSignNum;
                break;

            case tableNum(LedgerRRGReportTable_RU):
                reportTable = _record;
                operation.LedgerPeriodCode  = reportTable.LedgerPeriodCode;
                operation.TypeByCorrect     = reportTable.TypeByCorrect;
                operation.ModelNum          = reportTable.ModelNum;
                currencyForCalc             = reportTable.CurrencyForCalc;
                pointSignNum                = reportTable.PointSignNum;
                scale                       = reportTable.Scale;
                break;

            case tableNum(LedgerRRGEQueries_W):
                queries = _record;
                operation.LedgerPeriodCode      = queries.Period;
                operation.TypeByCorrect         = queries.TypeByCorrect;
                operation.ModelNum              = queries.ModelNum;
                currencyForCalc                 = queries.CurrencyForCalc;
                pointSignNum                    = queries.PointSignNum;
                scale                           = queries.Scale;
                break;

            case tableNum(LedgerRRGEDocuments_W):
                document.data(_record);
                documentInited = true;
                break;
        }

        if (_record.TableId != tableNum(LedgerRRGEDocuments_W))
        {
            this.loadDefaultDimensionList(_record);
            this.loadOperationTaxList(_record);
            this.loadTransTypeList(_record);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinParm</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void joinParm(LedgerRRGOperationParm_RU _parm)
    {
        parent = _parm;
    
        if (!_parm)
        {
            return;
        }
    
        if (!operation.LedgerPeriodCode)
        {
            operation.LedgerPeriodCode = _parm.operation().LedgerPeriodCode;
        }
    
        if (!operation.TypeByCorrect)
        {
            operation.TypeByCorrect = _parm.operation().TypeByCorrect;
        }
    
        if (!operation.rTax25FieldId)
        {
            operation.rTax25FieldId = _parm.operation().rTax25FieldId;
        }
    
        if (!operation.rTax25RegisterId)
        {
            operation.rTax25RegisterId = _parm.operation().rTax25RegisterId;
        }
    
        if (!operation.ModelNum)
        {
            operation.ModelNum = _parm.operation().ModelNum;
        }
    
        if (!defaultDimensionFilterMap)
        {
            defaultDimensionFilterMap = _parm.defaultDimensionFilterMap();
        }
    
        if (!operationTaxFilter)
        {
            operationTaxFilter = _parm.operationTaxFilter();
        }
    
        if (!transTypeFilter)
        {
            transTypeFilter = _parm.transTypeFilter();
        }
    
        if (!accountFilter)
        {
            accountFilter = _parm.accountFilter();
        }
    
        if (!offsetAccountFilter)
        {
            offsetAccountFilter = _parm.offsetAccountFilter();
        }
    
        if (!document)
        {
            document.data(_parm.document());
            documentInited = _parm.documentInited();
        }
    
        if (!operation.LedgerRRGEProperties_W)
        {
            operation.LedgerRRGEProperties_W = _parm.operation().LedgerRRGEProperties_W;
        }
    
        if (!pointSignNum)
        {
            pointSignNum = _parm.pointSignNum();
        }
    
        if (!alignment)
        {
            alignment = _parm.parmAlignment();
        }
    
        if (!length)
        {
            length = _parm.parmLength();
        }
    
        if (!emptyChar)
        {
            emptyChar = _parm.parmEmptyChar();
        }
    
        baseDate        = _parm.baseDate();
        calcMethod      = _parm.calcMethod();
        reportOnDate    = _parm.reportOnDate();
        currencyForCalc = _parm.currencyForCalc();
        scale           = _parm.scale();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPeriodCode</Name>
				<Source><![CDATA[
    private LedgerPeriodCode ledgerPeriodCode()
    {
        if (!period)
        {
            if (! operation.LedgerPeriodCode)
            {
                throw error("@SYS25953");
            }

            period = LedgerPeriodCode::find(operation.LedgerPeriodCode);
        }

        return period;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAccountList</Name>
				<Source><![CDATA[
    private void loadAccountList(Common _record)
    {
        LedgerRRGAccountInterval_RU accountInterval;

        switch (operation.AccountIntervalType)
        {
            case LedgerRRGIntervalType_RU::None:
                accountFilter = SysQuery::valueEmptyString();
                break;

            case LedgerRRGIntervalType_RU::Account:
                accountFilter = operation.AccountNumMask;
                break;

            case LedgerRRGIntervalType_RU::Interval:
                while select FromLedgerDimensionAccountId, ToLedgerDimensionAccountId from accountInterval
                    where accountInterval.OperationRecID == _record.RecId
                {
                    if (accountFilter)
                    {
                        accountFilter += ',' + this.filterValue(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(accountInterval.FromLedgerDimensionAccountId),
                                                                LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(accountInterval.ToLedgerDimensionAccountId));
                    }
                    else
                    {
                        accountFilter = this.filterValue(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(accountInterval.FromLedgerDimensionAccountId),
                                                         LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(accountInterval.ToLedgerDimensionAccountId));
                    }
                }
                break;
        }

        [accountFilter, accountReverseFilter] = this.splitAccounts(accountFilter, true, accountSet, accountReverseSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDefaultDimensionList</Name>
				<Source><![CDATA[
    private void loadDefaultDimensionList(Common _record)
    {
        LedgerRRGDimensionInterval_RU   dimensionInterval;
        str                             dimensionFilter;

        select dimensionInterval
            where dimensionInterval.DimTableID == _record.TableId &&
                  dimensionInterval.DimRecID   == _record.RecId;

        if (dimensionInterval)
        {
            defaultDimensionFilterMap = new Map(Types::Int64, Types::String);
        }

        while (dimensionInterval)
        {
            dimensionFilter = this.filterValue(dimensionInterval.DimensionFromValue, dimensionInterval.DimensionToValue);
            if (defaultDimensionFilterMap.exists(dimensionInterval.DimensionAttribute))
            {
                dimensionFilter = defaultDimensionFilterMap.lookup(dimensionInterval.DimensionAttribute)  + Comma + dimensionFilter;
            }

            defaultDimensionFilterMap.insert(dimensionInterval.DimensionAttribute, dimensionFilter);
            next dimensionInterval;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadOffsetAccountList</Name>
				<Source><![CDATA[
    private void loadOffsetAccountList(Common _record)
    {
        LedgerRRGOffsetAccountInterval_RU   offsetAccountInterval;
        str                                 tempStr;

        if (operation.LedgerOperation != LedgerRRGOperationType_RU::TurnoverInCorr          &&
            operation.LedgerOperation != LedgerRRGOperationType_RU::TurnoverInCorrCredit    &&
            operation.LedgerOperation != LedgerRRGOperationType_RU::TurnoverInCorrDebit)
        {
            return;
        }

        switch (operation.OffsetAccountIntervalType)
        {
            case LedgerRRGIntervalType_RU::None:
                offsetAccountFilter = SysQuery::valueEmptyString();
                break;

            case LedgerRRGIntervalType_RU::Account:
                offsetAccountFilter = this.filterValue(operation.OffsetAccountNumMask);
                break;

            case LedgerRRGIntervalType_RU::Interval:
                while select FromLedgerDimension, ToLedgerDimension from offsetAccountInterval
                    where offsetAccountInterval.OperationRecID   == _record.RecId
                {
                    if (offsetAccountFilter)
                    {
                        offsetAccountFilter += ',' + this.filterValue(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(offsetAccountInterval.FromLedgerDimension),
                                                                      LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(offsetAccountInterval.ToLedgerDimension));
                    }
                    else
                    {
                        offsetAccountFilter = this.filterValue(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(offsetAccountInterval.FromLedgerDimension),
                                                               LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(offsetAccountInterval.ToLedgerDimension));
                    }
                }
                break;
        }

        [offsetAccountFilter, tempStr] = this.splitAccounts(offsetAccountFilter, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadOperationTaxList</Name>
				<Source><![CDATA[
    private void loadOperationTaxList(Common _record)
    {
        LedgerRRGTransOperationsTax_RU transOperationsTax;

        while select OperationsTax from transOperationsTax
            where transOperationsTax.OpTaxTableId == _record.TableId &&
                  transOperationsTax.OpTaxRecId   == _record.RecId
        {
            operationTaxFilter += (operationTaxFilter?',':'') + this.filterValue(SysQuery::value(transOperationsTax.OperationsTax));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRTax25ProfitList</Name>
				<Source><![CDATA[
    private void loadRTax25ProfitList(Common _record)
    {
        LedgerRRGTax25ProfitInterval_RU accountInterval;

        switch (operation.AccountIntervalType)
        {
            case LedgerRRGIntervalType_RU::None:
                accountFilter = SysQuery::valueEmptyString();
                break;

            case LedgerRRGIntervalType_RU::Account:
                accountFilter = this.filterValue(operation.AccountNumMask);
                break;

            case LedgerRRGIntervalType_RU::Interval:
                while select FromAccountId, ToAccountId from accountInterval
                    where accountInterval.OperationRecID   == _record.RecId
                {
                    if (accountFilter)
                    {
                        accountFilter += ',' + this.filterValue(RTax25ProfitTable::find(accountInterval.FromAccountId).ProfitId,
                                                                RTax25ProfitTable::find(accountInterval.ToAccountId).ProfitId);
                    }
                    else
                    {
                        accountFilter = this.filterValue(RTax25ProfitTable::find(accountInterval.FromAccountId).ProfitId,
                                                         RTax25ProfitTable::find(accountInterval.ToAccountId).ProfitId);
                    }
                }
                break;
        }

        [accountFilter, accountReverseFilter] = this.splitAccounts(accountFilter, true, accountSet, accountReverseSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTransTypeList</Name>
				<Source><![CDATA[
    private void loadTransTypeList(Common _record)
    {
        LedgerRRGTransType_RU transType;

        while select TransType from transType
            where transType.TransTypeTableId == _record.TableId &&
                  transType.TransTypeRecId   == _record.RecId
        {
            transTypeFilter += (transTypeFilter?',':'') + this.filterValue(SysQuery::value(transType.TransType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountFilter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str offsetAccountFilter()
    {
        return offsetAccountFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGOperationTable_RU operation()
    {
        return operation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationTaxFilter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str operationTaxFilter()
    {
        return operationTaxFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAlignment</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SysAlignment parmAlignment(SysAlignment _alignment = alignment)
    {
       
        alignment = _alignment;

        return alignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmptyChar</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str parmEmptyChar(str _emptyChar = emptyChar)
    {
       
        emptyChar = _emptyChar;

        return emptyChar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKey</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str parmKey()
    {
        str             key;
        MapEnumerator   me;

        key =
                KeyDelim + enum2str(operation.DataType)            +
        KeyDelim + enum2str(operation.LedgerOperation)     +
        KeyDelim + operation.LedgerPeriodCode              +
        KeyDelim + enum2str(operation.BalanceType)         +
        KeyDelim + enum2str(operation.TypeByCorrect)       +
        KeyDelim + operation.ModelNum                      +
        KeyDelim + int2str(operation.rTax25FieldId)        +
        KeyDelim + operation.rTax25RegisterId              +
        KeyDelim + strFmt('%1', operation.ConstantValue)   +
        KeyDelim + enum2str(operation.BalanceDetail)       +

        KeyDelim + operationTaxFilter                      +
        KeyDelim + transTypeFilter                         +
        KeyDelim + accountFilter                           +
        KeyDelim + offsetAccountFilter;

        if (defaultDimensionFilterMap)
        {
            me = defaultDimensionFilterMap.getEnumerator();

            while (me.moveNext())
            {
                key += KeyDelim + enum2str(me.currentKey()) +
                       KeyDelim + me.currentValue();
            }
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLength</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int parmLength(int _length = length)
    {
       
        length = _length;

        return length;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pointSignNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEPointSignNum_W pointSignNum()
    {
        return pointSignNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scale</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEScale_W scale()
    {
        return scale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>set2Filter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str set2Filter(Set _set)
    {
        SetEnumerator   se = _set.getEnumerator();
        str             res;

        if (se.moveNext())
        {
            res = se.current();
            while (se.moveNext())
            {
                res += ', ' + se.current();
            }
        }
        else
        {
            res = SysQuery::valueEmptyString();
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitAccounts</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container splitAccounts(str _accountFilter,
                                      boolean _splitReverse = true,
                                      Set _accountSet = new Set(Types::String),
                                      Set _accountReverseSet = new Set(Types::String))
    {
        const int                                   QueryForceLiterals = 1;

        Query                                       query = new Query();
        QueryRun                                    queryRun;
        MainAccount                                 mainAccount;
        DimensionAttributeValue                     dimAttrValue;
        MainAccount                                 sumMainAccount;
        str                                         directAccounts  = SysQuery::valueEmptyString();
        str                                         reverseAccounts = SysQuery::valueEmptyString();
        DimensionAttributeValueTotallingCriteria    totallingCriteria;

        if (_splitReverse)
        {
            accountFilterRecId  = SysQuery::valueEmptyString();
            accountReverseFilterRecId = SysQuery::valueEmptyString();
        }
        else
        {
            offsetAccountFilterRecId = SysQuery::valueEmptyString();
        }
        Set accountSetRecId = new Set(Types::Int64);
        Set accountReverseSetRecId = new Set(Types::Int64);

        QueryBuildDataSource qbds = query.addDataSource(tableNum(MainAccount));
        qbds.addSelectionField(fieldNum(MainAccount, MainAccountId));
        qbds.addSelectionField(fieldNum(MainAccount, Type));
        qbds.addSelectionField(fieldNum(MainAccount, RecId));
        qbds.addRange(fieldNum(MainAccount, MainAccountId)).value(_accountFilter);
        qbds.addRange(fieldNum(MainAccount, LedgerChartOfAccounts)).value(queryValue(Ledger::find(Ledger::current()).ChartOfAccounts));
        query.literals(QueryForceLiterals);
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            mainAccount = queryRun.get(tableNum(MainAccount));
            if (mainAccount.Type == DimensionLedgerAccountType::Total)
            {
                // Get the dimension attribute value for the main account
                dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(
                    DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount),
                    mainAccount.RecId,
                    false,
                    false);

                if (dimAttrValue)
                {
                    while select FromValue, ToValue, InvertTotalSign from totallingCriteria
                        where totallingCriteria.DimensionAttributeValue == dimAttrValue.RecId
                    {
                        while select MainAccountId, RecId from sumMainAccount
                            where sumMainAccount.MainAccountId >= totallingCriteria.FromValue
                               && sumMainAccount.MainAccountId <= totallingCriteria.ToValue
                        {
                            if (_splitReverse && totallingCriteria.InvertTotalSign)
                            {
                                _accountReverseSet.add(sumMainAccount.MainAccountId);
                                accountReverseSetRecId.add(sumMainAccount.RecId);
                            }
                            else
                            {
                                _accountSet.add(sumMainAccount.MainAccountId);
                                accountSetRecId.add(sumMainAccount.RecId);
                            }
                        }
                    }
                }
            }
            else
            {
                _accountSet.add(mainAccount.MainAccountId);
                accountSetRecId.add(mainAccount.RecId);
            }
        }

        if (_accountReverseSet.empty())
        {
            directAccounts = this.set2Filter(_accountSet);
            if (_splitReverse)
            {
                accountFilterRecId = this.set2FilterRecId(accountSetRecId);
            }
            else
            {
                offsetAccountFilterRecId = this.set2FilterRecId(accountSetRecId);
            }
        }
        else
        {
            _accountSet = Set::difference(_accountSet, _accountReverseSet);
            accountSetRecId = Set::difference(accountSetRecId, accountReverseSetRecId);
            if (!_accountSet.empty())
            {
                directAccounts = this.set2Filter(_accountSet);
            }
            if (!accountSetRecId.empty())
            {
                accountFilterRecId = this.set2FilterRecId(accountSetRecId);
            }

            reverseAccounts = this.set2Filter(_accountReverseSet);
            accountReverseFilterRecId = this.set2FilterRecId(accountReverseSetRecId);
        }

        return [directAccounts, reverseAccounts];
    }

]]></Source>
			</Method>
			<Method>
				<Name>set2FilterRecId</Name>
				<Source><![CDATA[
    private str set2FilterRecId(Set _set)
    {
        SetEnumerator   se = _set.getEnumerator();
        str             res;

        if (se.moveNext())
        {
            res = se.current();
            while (se.moveNext())
            {
                res += ', ' + int642Str(se.current());
            }
        }
        else
        {
            res = SysQuery::valueEmptyString();
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate toDate(TransDate _baseDate = baseDate)
    {
        if (documentInited && !operation.LedgerPeriodCode)
        {
            return document.Period;
        }

        return this.ledgerPeriodCode().toDate(_baseDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate transDate(TransDate _baseDate = baseDate)
    {
        if (operation.BalanceType == LedgerRRGBalancePeriodType_RU::Incoming)
        {
            return this.fromDate(_baseDate) - 1;
        }
        else
        {
            return this.toDate(_baseDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateFilter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str transDateFilter(TransDate            _baseDate  = baseDate,
                               QueryBuildDataSource _dsTrans = null,
                               QueryBuildDataSource _dsVoucherReportDate = null,
                               str                  _fieldName = fieldStr(GeneralJournalEntry, AccountingDate))
    {
        str TransDateQuery      = '(\%1 <= \%2)';
        str ReportingDateQuery	= '((\%1.' + _fieldName + ' <= \%3) || (\%2.ReportingDate <= \%3))';
        return calcMethod == ReportCalcMethod_RU::ReportingDate && _dsTrans && _dsVoucherReportDate ?
               strFmt(ReportingDateQuery, _dsTrans.name(), _dsVoucherReportDate.name(), date2StrXpp(this.transDate(_baseDate))) :
               strFmt(TransDateQuery, _fieldName, date2StrXpp(this.transDate(_baseDate)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDatePeriodFilter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str transDatePeriodFilter(TransDate            _baseDate  = baseDate,
                                     QueryBuildDataSource _dsTrans = null,
                                     QueryBuildDataSource _dsVoucherReportDate = null,
                                     str                  _fieldName = fieldStr(GeneralJournalEntry, AccountingDate))
    {
        str TransDatePeriodQuery	    = '((\%1 >= \%2) && (\%1 <= \%3))';
        str ReportingDatePeriodQuery	= '(((\%1.' + _fieldName + ' >= \%3) && (\%1.' + _fieldName + ' <= \%4)) || ((\%2.ReportingDate >= \%3) && (\%2.ReportingDate <= \%4)))';

        return calcMethod == ReportCalcMethod_RU::ReportingDate && _dsTrans && _dsVoucherReportDate ?
               strFmt(ReportingDatePeriodQuery, _dsTrans.name(), _dsVoucherReportDate.name(), date2StrXpp(this.fromDate(_baseDate)), date2StrXpp(this.toDate(_baseDate))) :
               strFmt(TransDatePeriodQuery, _fieldName, date2StrXpp(this.fromDate(_baseDate)), date2StrXpp(this.toDate(_baseDate)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTypeFilter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str transTypeFilter()
    {
        return transTypeFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGOperationParm_RU construct()
    {
        return new LedgerRRGOperationParm_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBuffer</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGOperationParm_RU newFromBuffer(Common _record, LedgerRRGOperationParm_RU _highParms = null)
    {
        LedgerRRGOperationParm_RU   parm;

        if (_record.TableId == tableNum(LedgerRRGOperationTable_RU) &&
            _record.(fieldNum(LedgerRRGOperationTable_RU, DataType)) == LedgerRRGDataType_RU::Register)
        {
            parm = LedgerRRGOperationParm_Reg_RU::construct();
        }
        else
        {
            parm = LedgerRRGOperationParm_RU::construct();
        }

        parm.initFromBuffer(_record);

        if (_highParms)
        {
            parm.joinParm(_highParms);
        }

        return parm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMethod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportCalcMethod_RU calcMethod(ReportCalcMethod_RU _calcMethod = calcMethod)
    {
        calcMethod = _calcMethod;
        return calcMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportOnDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate reportOnDate(TransDate _reportOnDate = reportOnDate)
    {
        reportOnDate = _reportOnDate;
        return reportOnDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>