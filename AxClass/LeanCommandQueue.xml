<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandQueue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>LeanCommandQueue</c> class manages a queue of commands.
/// </summary>
public class LeanCommandQueue
{
    int64 curTransactionId;
    List commandList;

    #define.cacheKey('queue')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCommand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new command to the end of the queue.
    /// </summary>
    /// <param name="_command">
    /// The command to add.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void addCommand(LeanCommandBase _command)
    {
        commandList.addEnd(_command);
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the commands in the queue.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void clear()
    {
        this.init(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commandList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of commands in the queue.
    /// </summary>
    /// <returns>
    /// A list of <c>LeanCommandBase</c> objects.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List commandList()
    {
        return commandList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the command list.
    /// </summary>
    /// <param name="_forceNew">
    /// A <c>boolean</c> value that determines if the list should always be cleared; optional.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init(boolean _forceNew = false)
    {
        int64 newTransactionId = appl.curTransactionId(true);

        // When the transaction id has changed (= a new top tts scope has been started) the list must be cleared
        if (newTransactionId != curTransactionId
            || _forceNew)
        {
            curTransactionId = newTransactionId;
            commandList = new List(Types::Class);

            // Save in cache that a new list has been started
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the list of commands is empty.
    /// </summary>
    /// <returns>
    /// true if the list of commands is empty; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isEmpty()
    {
        return commandList.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runQueuedCommands</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs all commands in the queue.
    /// </summary>
    /// <returns>
    /// true if the commands ran correctly; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean runQueuedCommands()
    {
        boolean         result = true;

        if (commandList && !commandList.empty())
        {
            // Save current list of commands
            List tempCommandList = commandList;

            // Remove all commands from the queue to start a new "scope"
            this.clear();

            // Run all saved commands
            ListEnumerator listEnumerator = tempCommandList.getEnumerator();
            while (result && listEnumerator.moveNext())
            {
                LeanCommandBase command = listEnumerator.current();
                if (command)
                {
                    result = command.run();
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the class itself as a global object.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void update()
    {
        appl.globalCache().set(classStr(LeanCommandQueue), #cacheKey, this, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static LeanCommandQueue construct()
    {
        LeanCommandQueue queue = new LeanCommandQueue();
        return queue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the singleton instance of the command queue.
    /// </summary>
    /// <returns>
    /// The singleton instance of the command queue.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCommandQueue getInstance()
    {
        LeanCommandQueue queue;
        SysGlobalCache globalCache = appl.globalCache();

        if (globalCache.isSet(classStr(LeanCommandQueue), #cacheKey))
        {
            queue = globalCache.get(classStr(LeanCommandQueue), #cacheKey);
        }
        else
        {
            queue = LeanCommandQueue::construct();
        }

        queue.init();

        return queue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
