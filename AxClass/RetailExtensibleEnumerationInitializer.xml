<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailExtensibleEnumerationInitializer</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Reflection;
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// The <c>RetailExtensibleEnumerationInitializer</c> class is responsible for initializing CRT Extensible Enumerations inside AX runtime.
/// This is needed because we have usages of the CRT data model (ex: Pricing Engine, Transaction Service).
/// </summary>
/// <remarks>
/// CRT Extensible Enumeration Initialization is run only once during AOS boot, by hooking to <c>ApplicationStartupDelegates::onPostApplicationStartup</c> event.
/// This implementation does not rely on the <c>RetailEnumValueTable</c> table, since we can just query AX metadata using the <c>SysDictEnum</c> class.
/// </remarks>
class RetailExtensibleEnumerationInitializer implements Microsoft.Dynamics.Commerce.Runtime.IExtensibleEnumerationInitializer
{
    private static System.Type ExtensibleEnumerationTypeAttributeType = CLRInterop::getType('Microsoft.Dynamics.Commerce.Runtime.Framework.ExtensibleEnumerationTypeAttribute');

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InitializeExtensibleEnumeration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a sub-class of <c>ExtensibleEnumeration</c> by retrieving the data for the enumeration members from AOT metadata.
    /// </summary>
    /// <param name = "extensibleEnumerationType">A <c>System.Type</c> that have the <c>ExtensibleEnumerationType</c> attribute.</param>
    public void InitializeExtensibleEnumeration(System.Type extensibleEnumerationType)
    {
        System.Exception exception;

        try
        {
            ApplicationEventSource::EventWriteRetailExtensibleEnumerationInitializeStart();

            str axEnumValueFromAttribute = RetailExtensibleEnumerationInitializer::getAxEnumNameFromAttribute(extensibleEnumerationType);

            if (axEnumValueFromAttribute == '')
            {
                return;
            }

            SysDictEnum dictEnum = SysDictEnum::newName(axEnumValueFromAttribute);

            if (dictEnum == null)
            {
                return;
            }

            System.Collections.ArrayList tuples = new System.Collections.ArrayList();

            int values = dictEnum.values();
            for (int idx = 0; idx < values; idx++)
            {
                CLRObject tuple = Microsoft.Dynamics.Commerce.Runtime.Framework.ExtensibleEnumerationAXHelper::CreateTuple(dictEnum.index2Symbol(idx), dictEnum.index2Value(idx));

                tuples.Add(tuple);
            }

        
            RetailExtensibleEnumerationInitializer::initializeEnum(extensibleEnumerationType, tuples);
        }
        catch (exception)
        {
            ApplicationEventSource::EventWriteRetailExtensibleEnumerationInitializeFailure(exception.ToString());
        }
        finally
        {
            ApplicationEventSource::EventWriteRetailExtensibleEnumerationInitializeStop();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the Extensible Enumeration represent by <c>_type</c>.
    /// </summary>
    /// <param name = "_type">The Extensible Enumeration to be initialized.</param>
    /// <param name = "nameValuePairs">A list of tuples containing the members of the Extensible Enumeration.</param>
    private static void initializeEnum(System.Type _type, System.Collections.IEnumerable nameValuePairs)
    {
        CLRObject nameValuePairsGeneric = Microsoft.Dynamics.Commerce.Runtime.Framework.ExtensibleEnumerationAXHelper::ToGenericEnumerable(nameValuePairs);

        System.Reflection.MethodInfo initialize = _type.BaseType.GetMethod("Initialize");
        
        System.Object[] params = new System.Object[1]();
        params.SetValue(nameValuePairsGeneric, 0);

        initialize.Invoke(null, params);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAxEnumNameFromAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the corresponding name of the AX enum type, given a <c>System.Type</c> annotated with <c>ExtensibleEnumerationType</c>.
    /// </summary>
    /// <param name = "_type">A <c>System.Type</c> annotated with <c>ExtensibleEnumerationType</c>.</param>
    /// <returns>The name of the corresponding AX enum as specified in the attribute or an empty string if the attribute is not found.</returns>
    private static str getAxEnumNameFromAttribute(System.Type _type)
    {
        Microsoft.Dynamics.Commerce.Runtime.Framework.ExtensibleEnumerationTypeAttribute attr = System.Attribute::GetCustomAttribute(_type, ExtensibleEnumerationTypeAttributeType);

        if (attr == null)
        {
            return '';
        }

        return attr.AXEnumType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSystemStartup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hooks to the AOS initialization and executes the CRT Extensible Enumeration framework initialization.
    /// </summary>
    [SubscribesTo(classStr(ApplicationStartupEventManager), staticDelegateStr(ApplicationStartupEventManager, onSystemStartup))]
    public static void onSystemStartup()
    {
        RetailExtensibleEnumerationInitializer::setExtensibleEnumInitializer(funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSessionCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the initialization of an user session to check if 
    /// the extensible enumeration initializer object is instantiated.
    /// </summary>
    /// <param name="_isBatch">Whether the system is running a batch job.</param>
    /// <param name="_isInteractive">Whether the session is interactive.</param>
    [SubscribesTo(classStr(ApplicationStartupEventManager), staticDelegateStr(ApplicationStartupEventManager, onSessionCreated))]
    public static void onSessionCreated(boolean _isBatch, boolean _isInteractive)
    {
        RetailExtensibleEnumerationInitializer::setExtensibleEnumInitializer(funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExtensibleEnumInitializer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the extensible enum initializer if it is not set yet.
    /// </summary>
    /// <param name = "_funcName">The name of the caller function.</param>
    internal static void setExtensibleEnumInitializer(str _funcName)
    {
        System.Exception exception;
        
        // If initialization is already completed, skip everything.
        if (Microsoft.Dynamics.Commerce.Runtime.Framework.ExtensibleEnumeration::Initializer == null
            && isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            try
            {
                ApplicationEventSource::EventWriteRetailExtensibleEnumerationInitializerRecreateStart(_funcName);
                Microsoft.Dynamics.Commerce.Runtime.Framework.ExtensibleEnumeration::Initializer = new RetailExtensibleEnumerationInitializer();
            }
            catch (exception)
            {
                ApplicationEventSource::EventWriteRetailExtensibleEnumerationInitializerRecreateFailure(_funcName, exception.ToString());
            }
			finally
            {
                ApplicationEventSource::EventWriteRetailExtensibleEnumerationInitializerRecreateStop(_funcName);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>