<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttWrkCtrSchedulingInteropDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data provider for the <c>GanttControlScheduler</c> class.
/// </summary>
public class GanttWrkCtrSchedulingInteropDataProvider extends WrkCtrSchedulingInteropDataProvider
{
    GanttControlScheduler scheduler;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttWrkCtrSchedulingInteropDataProvider construct()
    {
        return new GanttWrkCtrSchedulingInteropDataProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGanttDataHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>GanttWrkCtrSchedulingInteropDataProvider</c> class using data already available to the Gantt chart.
    /// </summary>
    /// <param name="_ganttControlScheduler">
    ///    An instance of the <c>GanttControlScheduler</c> class that contains the same data as the Gantt chart.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>WrkCtrSchedulingInteropDataProvider</c> class.
    /// </returns>
    public static GanttWrkCtrSchedulingInteropDataProvider newGanttDataHandler(GanttControlScheduler _ganttControlScheduler)
    {
        GanttWrkCtrSchedulingInteropDataProvider dataProvider = GanttWrkCtrSchedulingInteropDataProvider::construct();

        dataProvider.parmScheduler(_ganttControlScheduler);

        return dataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScheduler</Name>
				<Source><![CDATA[
    protected GanttControlScheduler parmScheduler(GanttControlScheduler _scheduler = scheduler)
    {
        scheduler = _scheduler;
        return scheduler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivity</Name>
				<Source><![CDATA[
    private GanttControlActivity getActivity(str _activityId)
    {
        ListEnumerator activityEnumerator = scheduler.parmActivities().getEnumerator();
        while (activityEnumerator.moveNext())
        {
            GanttControlActivity activity = activityEnumerator.current() as GanttControlActivity;
            if(activity.parmId() == _activityId)
            {
                return activity;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApplicableResources</Name>
				<Source><![CDATA[
    public container getApplicableResources(container _requirements)
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCapacityReservations</Name>
				<Source><![CDATA[
    public container getCapacityReservations(str        _engineResourceId,
                                             int        _workingTimesType,
                                             boolean    _loadJobSchedulingCapacity,
                                             boolean    _loadOperationSchedulingCapacity,
                                             date       _startDate,
                                             timeOfDay  _startTime,
                                             date       _endDate,
                                             timeOfDay  _endTime)
    {
        // Not using capacity reservations
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceCapabilities</Name>
				<Source><![CDATA[
    public container getResourceCapabilities(WrkCtrId _resourceId)
    {
        // Not using capabilities
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceCalendars</Name>
				<Source><![CDATA[
    public container getResourceCalendars(WrkCtrId _resourceId)
    {
        GanttControlActivity activity = this.getActivity(_resourceId);

        if(!activity)
        {
            return conNull();
        }

        str calendarId = activity.parmCalendarId();

        return this.calendarAsContainer(_resourceId, dateNull(), dateMax(), calendarId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarAsContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a container with the calendar information.
    /// </summary>
    /// <param name="_resourceId">
    /// The resource ID.
    /// </param>
    /// <param name="_validFrom">
    /// The start date for the validity of the calendar.
    /// </param>
    /// <param name="_validTo">
    /// The end date for the validity of the calendar.
    /// </param>
    /// <param name="_calendarId">
    /// The calendar ID.
    /// </param>
    /// <returns>
    /// A container with the calendar data.
    /// </returns>
    /// <remarks>
    /// This is a copy of the same method on the base class, with the exception that this is using the GanttCalendarId EDT instead of the CalendarId EDT.
    /// </remarks>    
    protected container calendarAsContainer(WrkCtrId    _resourceId,
                                            Date        _validFrom,
                                            Date        _validTo,
                                            GanttCalendarId  _calendarId)
    {
        return [_resourceId, _validFrom, _validTo, _calendarId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkingTimes</Name>
				<Source><![CDATA[
    public container getWorkingTimes(str        _calendarId,
                                     int        _workingTimesType,
                                     date       _startDate,
                                     timeOfDay  _startTime,
                                     date       _endDate,
                                     timeOfDay  _endTime,
                                     int        _workingTimesCount,
                                     boolean    _forward)
    {
        GanttControlCalendar calendar = scheduler.getCalendar(_calendarId);

        if(calendar == null)
        {
            return conNull();
        }

        List workingTimes = calendar.parmWorkingTimes();

        var sortedTimes = new System.Collections.SortedList(workingTimes.elements());
        ListEnumerator workingTimesEnumerator = workingTimes.getEnumerator();
        while (workingTimesEnumerator.moveNext())
        {
            var interval = workingTimesEnumerator.current() as GanttControlWorkingTimeInterval;
            utcdatetime key = _forward ? interval.parmFromDateTime() : DateTimeUtil::maxValue() - interval.parmToDateTime();
            sortedTimes.Add(key, interval);
        }

        utcdatetime fromDateTime = DateTimeUtil::newDateTime(_startDate, _startTime);
        utcdatetime toDateTime = DateTimeUtil::newDateTime(_endDate, _endTime);
        var sortedTimesEnumerator = sortedTimes.GetEnumerator();
        container result;
        while (sortedTimesEnumerator.MoveNext() && conLen(result) < _workingTimesCount)
        {
            GanttControlWorkingTimeInterval interval = sortedTimesEnumerator.get_Value();
            if(interval.parmFromDateTime() < toDateTime && interval.parmToDateTime() > fromDateTime)
            {
                //start date time, end date time, effectivity, and the property ID
                var effectivityInterval = interval as GanttControlWorkingTimeEffectivityInterval;
                result += [[DateTimeUtil::anyToDateTime(max(interval.parmFromDateTime(), fromDateTime)),
                           DateTimeUtil::anyToDateTime(min(interval.parmToDateTime(), toDateTime)),
                           effectivityInterval ? effectivityInterval.parmEffectivity() / 100 : 1,
                           conNull()]];
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>