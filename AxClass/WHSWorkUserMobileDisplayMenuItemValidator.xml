<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkUserMobileDisplayMenuItemValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkUserMobileDisplayMenuItemValidator</c> class is used for several mobile device menu item validations.
/// </summary>
public class WHSWorkUserMobileDisplayMenuItemValidator
{
    SysGlobalObjectCache sgoc;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getValidMenuItemNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list with all the menu item names in which the passed user has access to, is user directed
    /// and have a menu line with the passed class ID.
    /// </summary>
    /// <param name = "_classId">The current class ID of the menu item line</param>
    /// <param name = "_userId">The current user ID</param>
    /// <returns>A container with a list of all valid menu item names</returns>
    public List getValidMenuItemNames(WHSWorkClassId _classId, WHSUserId _userId)
    {
        WHSRFMenuItemLine   menuItemLine;
        WHSRFMenuItemTable  menuItemTable;
        List                itemNames = new List(Types::String);

        while select MenuItemName from menuItemLine
            where menuItemLine.WorkClassId == _classId
                exists join menuItemTable
                    where menuItemTable.MenuItemName == menuItemLine.MenuItemName
                        && menuItemTable.MenuItemMode == WHSMenuItemMode::Work
                        && menuItemTable.UseExistingWork == NoYes::Yes
                        && (menuItemTable.MenuItemDirectedBy == WHSMenuItemDirectedBy::UserDirected
                            || menuItemTable.MenuItemDirectedBy == WHSMenuItemDirectedBy::None)
        {
            if (this.hasAccessToMenuItem(_userId, menuItemLine.MenuItemName))
            {
                itemNames.addEnd(menuItemLine.MenuItemName);
            }
        }

        return itemNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAccessToMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks is the specified user has access to a <c>WHSRFMenuItemTable</c> record
    /// </summary>
    /// <param name="_userId">
    /// The <c>WHSWorkUser</c> record to validate access for.
    /// </param>
    /// <param name="_menuItem">
    /// Name of the <c>WHSRFMenuItemTable</c> record to validate access against.
    /// </param>
    /// <returns>
    /// true if a valid menu structure is found containing the <c>WHSMenuItemName</c> which the user has access to;
    /// otherwise false
    /// </returns>
    public boolean hasAccessToMenuItem(WHSUserId _userId, WHSMenuItemName _menuItem)
    {
        boolean         ret = false;

        sgoc = new SysGlobalObjectCache();

        GlobalObjectCacheScope cacheScope = WHSWorkUserMobileDisplayMenuItemValidator::validatorCacheScope();
        container result = sgoc.find(cacheScope, [curext(), _userId, _menuItem]);
        
        if (result == conNull())
        {
            Set menusAlreadySeen = new Set(Types::String);
            WHSMenuName menuName = WHSWorkUser::getDefaultMenu(_userId);
            container menuItemSet = [menuName];

            while (conLen(menuItemSet) != 0 && !ret)
            {
                menuName    = conPeek(menuItemSet, 1);
                menuItemSet = conDel(menuItemSet, 1, 1);
                menusAlreadySeen.add(menuName);

                WHSRFMenuLine   menuLine;
                while select MenuItemName, MenuName from menuLine
                    where menuLine.RefMenuName == menuName
                {
                    sgoc.insert(cacheScope, [curext(), _userId, menuLine.MenuItemName], [true]);

                    if (menuLine.MenuItemName == _menuItem)
                    {
                        ret = true;
                        break;
                    }
                    if (menuLine.MenuName != '')
                    {
                        if (!confind(menuItemSet, menuLine.MenuName)
                            && !menusAlreadySeen.in(menuLine.MenuName))
                        {
                            menuItemSet += menuLine.MenuName;
                        }
                    }
                }
            }
        }
        else if (conPeek(result, 1))
        {
            ret = true;
        }

        if (!ret && result == conNull())
        {
            sgoc.insert(cacheScope, [curext(), _userId, _menuItem], [false]);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the scope identifier for the global object cache.
    /// </summary>
    /// <param name = "_userId">Not used.</param>
    /// <returns>Global Object Cache Scope identifier.</returns>
    [SysObsolete('Use validatorCacheScope instead', false, 31\03\2019)]
    public static GlobalObjectCacheScope cacheScope(WHSUserId _userId)
    {
        return WHSWorkUserMobileDisplayMenuItemValidator::validatorCacheScope();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatorCacheScope</Name>
				<Source><![CDATA[
    private static GlobalObjectCacheScope validatorCacheScope()
    {
        return classStr(WHSWorkUserMobileDisplayMenuItemValidator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushCache</Name>
				<Source><![CDATA[
    private static void flushCache()
    {
        classFactory.globalObjectCache().clear(WHSWorkUserMobileDisplayMenuItemValidator::validatorCacheScope());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWorkUserMobileDisplayMenuItemValidator construct()
    {
        return new WHSWorkUserMobileDisplayMenuItemValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSRFMenuLine_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// If any of the mobile device menu setup changes, flush the cache.
    /// </summary>
    /// <param name = "sender"><c>WHSRFMenuLine</c> record that was inserted.</param>
    /// <param name = "e">Data event arguments.</param>
    [DataEventHandler(tableStr(WHSRFMenuLine), DataEventType::Inserted)]
    public static void WHSRFMenuLine_onInserted(Common sender, DataEventArgs e)
    {
        WHSWorkUserMobileDisplayMenuItemValidator::flushCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSRFMenuLine_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// If any of the mobile device menu setup changes, flush the cache.
    /// </summary>
    /// <param name = "sender"><c>WHSRFMenuLine</c> record that was updated.</param>
    /// <param name = "e">Data event arguments.</param>
    [DataEventHandler(tableStr(WHSRFMenuLine), DataEventType::Updated)]
    public static void WHSRFMenuLine_onUpdated(Common sender, DataEventArgs e)
    {
        WHSWorkUserMobileDisplayMenuItemValidator::flushCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSRFMenuLine_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// If any of the mobile device menu setup changes, flush the cache.
    /// </summary>
    /// <param name = "sender"><c>WHSRFMenuLine</c> record that was removed.</param>
    /// <param name = "e">Data event arguments.</param>
    [DataEventHandler(tableStr(WHSRFMenuLine), DataEventType::Deleted)]
    public static void WHSRFMenuLine_onDeleted(Common sender, DataEventArgs e)
    {
        WHSWorkUserMobileDisplayMenuItemValidator::flushCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSWorkUser_onUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the default menu assignment for a worker changes, flush the cache.
    /// </summary>
    /// <param name = "sender"><c>WHSRFMenuLine</c> record that was inserted.</param>
    /// <param name = "e">Data event arguments.</param>
    [DataEventHandler(tableStr(WHSWorkUser), DataEventType::Updating)]
    public static void WHSWorkUser_onUpdating(Common sender, DataEventArgs e)
    {
        WHSWorkUser workUser = sender as WHSWorkUser;

        if (workUser.orig().MenuName != workUser.MenuName)
        {
            WHSWorkUserMobileDisplayMenuItemValidator::flushCache();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>