<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceHeaderWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceHeaderWorkflow extends VendInvoiceWorkflow implements IValidateWorkflowWorkItemAction
{
    VendInvoiceInfoTable vendInvoiceInfoTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets or Sets the Vendor Invoice Info Table record.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    ///     The VendInvoiceInfoTable record to set.
    /// </param>
    /// <returns>
    ///     The current VendInvoiceInfoTable record.
    /// </returns>
    public VendInvoiceInfoTable parmVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable = vendInvoiceInfoTable)
    {
        vendInvoiceInfoTable = _vendInvoiceInfoTable;

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reactivates the vendor invoice header workflow.
    /// </summary>
    /// <remarks>
    /// This method continues the workflow by calling the <c>dispatchWorkItemAction</c> method on the
    /// <c>WorkflowWorkItemActionManager</c> class that has information about the current work item.
    /// </remarks>
    public void reSubmit()
    {
        this.validateReadyForSubmit();

        WorkflowWorkItemTable workItem = args.caller().getActiveWorkflowWorkItem();

        if (workItem.RecId)
        {
            VendInvoiceWorkflowValidation::validateBudgetReservations(vendInvoiceInfoTable);

            if (!VendInvoiceWorkflowValidation::validateProjectFundingLimits(vendInvoiceInfoTable))
            {
                throw error("@SYS4110061");
            }

            VendInvoiceHeaderWorkflow vendInvoiceHeaderWorkflow = VendInvoiceHeaderWorkflow::construct();

            if (VendInvoiceWorkflowValidation::validateInvoiceAccountingDistributions(vendInvoiceInfoTable))
            {
                WorkflowWorkItemActionDialog workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(workItem,
                    WorkflowWorkItemActionType::Resubmit,
                    new MenuFunction(args.menuItemName(),
                    args.menuItemType()));

                if (this.actionDialog(workflowWorkItemActionDialog))
                {
                    WorkflowWorkItemActionManager::dispatchWorkItemAction(workItem,
                        workflowWorkItemActionDialog.parmWorkflowComment(),
                        workflowWorkItemActionDialog.parmTargetUser(),
                        WorkflowWorkItemActionType::Resubmit,
                        args.menuItemName());
                    
                    VendInvoiceInfoTable::setRequestStatus(vendInvoiceInfoTable.RecId, VendInvoiceRequestStatus::InReview);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the vendor invoice workflow.
    /// </summary>
    /// <remarks>
    /// This method starts the workflow configuration by calling the <c>activateFromWorkflowType</c> method
    /// on the <c>Workflow</c> class that has information about the vendor invoice record.
    /// </remarks>
    public void submit()
    {
        this.validateReadyForSubmit();

        if (vendInvoiceInfoTable.RequestStatus != VendInvoiceRequestStatus::Draft)
        {
            error(strFmt("@SYS313553", vendInvoiceInfoTable.Num));
        }
        else
        {
            VendInvoiceWorkflowValidation::validateBudgetReservations(vendInvoiceInfoTable);

            if (!VendInvoiceWorkflowValidation::validateProjectFundingLimits(vendInvoiceInfoTable))
            {
                throw error("@SYS4110061");
            }

            VendInvoiceHeaderWorkflow vendInvoiceHeaderWorkflow = VendInvoiceHeaderWorkflow::construct();

            if (VendInvoiceWorkflowValidation::validateInvoiceAccountingDistributions(vendInvoiceInfoTable))
            {
                WorkflowSubmitDialog workflowSubmitDialog = WorkflowSubmitDialog::construct(args.caller().getActiveWorkflowConfiguration());

                if (this.submitDialog(workflowSubmitDialog))
                {
                    VendInvoiceHeaderWorkflow::submitToWorkflow(vendInvoiceInfoTable, workflowSubmitDialog.parmWorkflowComment());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReadyForSubmit</Name>
				<Source><![CDATA[
    private void validateReadyForSubmit()
    {
        if (!FeatureStateProvider::isFeatureEnabled(VendInvoiceExtendInvoiceIdFeature::instance()) && strLen(vendInvoiceInfoTable.Num) > 20)
        {
            throw error(strFmt("@AccountsPayable:VendInvoiceWithLongNumFail", vendInvoiceInfoTable.Num));
        }

        if (!VendInvoiceWorkflowValidation::validateMatchingHasBeenPerformed(vendInvoiceInfoTable))
        {
            if(VendInvoiceLastMatchStatusFailedBeforeWorkflowSubmissionFlight::instance().isEnabled())
            {
                throw error("@AccountsPayable:InvoiceValidWorkSubmitBlocked");
            }
            else
            {
                throw error(strFmt("@AccountsPayable:InvoiceMatchingNotPerformedMustNotSubmitWF", "@AccountsPayable:MatchStatus"));
            }
        }

        // Don't submit if the invoice is currently in use by another user.
        this.validateInUse();

        //Don't submit if the invoice total and registered invoice total are not equal.
        this.validateInvoiceTotalAndRegisteredInvoiceTotalNotEqual();

        // Don't submit if a posted invoice with the same invoice number already exists.
        if (!this.validateDuplicateInvoice())
        {
            throw Exception::error;
        }

        // Don't submit if there is any item charge in header when VendInvoiceWorkflowSubmitWhenUnallocatedChargesExistedFeature is on
        if (!VendInvoiceWorkflowValidation::validateInvoiceHasNoUnallocatedChargesBlockingWorkflowSubmit(vendInvoiceInfoTable))
        {
            throw error("@SYS115806");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the invoice is being used by another user.
    /// </summary>
    /// <param name="_doThrow">
    /// Determines whether or not to throw an exception if the invoice is in use.
    /// </param>
    /// <returns>
    /// True if the invoice is not currently in use by another user. False if is currently in use by another user.
    /// </returns>
    private boolean validateInUse(boolean _doThrow = true)
    {
        if (vendInvoiceInfoTable.ParmId)
        {
            PurchParmUpdate parmUpdate = vendInvoiceInfoTable.purchParmUpdate();

            if (parmUpdate.CreatedBy != curUserId())
            {
                if (_doThrow)
                {
                    throw error(strFmt("@AccountsPayable:InvoiceInUseWorkflowError", vendInvoiceInfoTable.Num, parmUpdate.CreatedBy));
                }
                else
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preWorkflowDialogRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a budget check for the invoice when the workflow dialog run event occurs.
    /// </summary>
    protected void preWorkflowDialogRun()
    {
        super();

        if (Ledger::isLedgerBudgetControlEnabled())
        {
            // Submit to source document processor to perform GL budget check before confirming the comment dialog.
            SourceDocumentProcessorFacade::submitOnDemandSourceDocumentImpl(vendInvoiceInfoTable);
            vendInvoiceInfoTable.validateAccountingDistributions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendInvoiceHeaderWorkflow construct()
    {
        return new VendInvoiceHeaderWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkflowConfigurationToActivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a workflow to open based on a workflow enabled record.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The record for which to determine whether there is a workflow to open.
    /// </param>
    /// <returns>
    /// The workflow to open.
    /// </returns>
    /// <remarks>
    /// Activation conditions will be evaluated, and the first workflow whose activation condition
    /// evaluates to true will be returned. If no activation condition evaluates to true, the default
    /// workflow will be returned.
    /// </remarks>
    public static WorkflowVersionTable findWorkflowConfigurationToActivate(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        WorkflowVersionTable workflowVersionTable;

        workflowVersionTable = Workflow::findWorkflowConfigurationToActivate(_vendInvoiceInfoTable, workFlowTypeStr(VendProcessInvoice));

        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Submits a vendor invoice document and starts corresponding workflow.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> value from the caller.
    /// </param>
    public static void main(Args _args)
    {
        WorkflowWorkItemTable workItem;
        str callerMenuItem;
        FormRun caller;
        VendInvoiceHeaderWorkflow vendInvoiceHeaderWorkflow = VendInvoiceWorkflow::newVendInvoiceWorkflow(_args);
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendParameters vendParameters = VendParameters::find();

        if (_args)
        {
            callerMenuItem = _args.menuItemName();
            caller = _args.caller();
        }
        else
        {
            throw error("@SYS25407");
        }

        if (callerMenuItem == menuitemActionStr(VendInvoiceApprovalApprove))
        {
            workItem = caller.getActiveWorkflowWorkItem();
            vendInvoiceInfoTable = workItem.getRecord();
        }
        else
        {
            vendInvoiceInfoTable = _args.record();
            vendInvoiceInfoTable.reread();
        }

        if (!VendInvoiceWorkflowValidation::validateInvoiceNumberIsNotEmpty(vendInvoiceInfoTable))
        {
            throw error(strFmt("@SYS23051", vendInvoiceInfoTable.PurchId));
        }
        else
        {
            if (!VendInvoiceWorkflowValidation::validateInvoiceNotOnHold(vendInvoiceInfoTable))
            {
                if (Box::okCancel(strFmt("@SYS323328", vendInvoiceInfoTable.Num), DialogButton::Cancel) == DialogButton::Ok)
                {
                    vendInvoiceInfoTable.Hold = NoYes::No;
                }
                else
                {
                    return;
                }
            }

            boolean areAllInvoicePurchaseOrdersConfirmed =
                VendInvoiceWorkflowValidation::validateAllPurchaseOrdersAreConfirmed(vendInvoiceInfoTable);

            if (!areAllInvoicePurchaseOrdersConfirmed
                && Box::okCancel("@AccountsPayable:PurchaseOrderNoLongerConfirmed", DialogButton::Cancel) == DialogButton::Cancel)
            {
                return;
            }

            if (VendParameters::isBlockPostingAndSubmissionToWorkflow()
                && !VendInvoiceWorkflowValidation::validateInvoiceQuantityLessThanProductReceiptQuantity(vendInvoiceInfoTable))
            {
                throw error(strFmt("@AccountsPayable:InvoiceQuantityLessThanProductReceiptQuantity", vendInvoiceInfoTable.Num));
            }

            
            if (vendParameters.AutomationTotalsReqForWorkflowSubmission
                && !VendInvoiceWorkflowValidation::validateImportedAmountsEqualCalculatedAmounts(vendInvoiceInfoTable))
            {
                throw error("@AccountsPayable:VendInvoiceValidationTotalsError");
            }

            ttsbegin;
            vendInvoiceInfoTable.selectForUpdate(true);
            vendInvoiceInfoTable.PerformFullInvoiceMatching = NoYes::Yes;

            vendInvoiceInfoTable.VendInvoiceSaveStatus = VendInvoiceSaveStatus::Pending;

            if (vendParameters.editAutomaticHeaderMatching())
            {
                vendInvoiceInfoTable.LastMatchVariance = vendInvoiceInfoTable.checkIfMatched(false);
            }

            if (vendInvoiceInfoTable.VarianceApproved == NoYes::No && vendParameters.PostInvoiceMatchDiscrepancies == InvoiceMatchPostingOption::AllowWithWarning)
            {
                vendInvoiceInfoTable.VarianceApproved = NoYes::Yes;
            }

            vendInvoiceInfoTable.doUpdate();
            ttscommit;

            vendInvoiceHeaderWorkflow.parmVendInvoiceInfoTable(vendInvoiceInfoTable);

            try
            {
                switch (callerMenuItem)
                {
                    case menuitemActionStr(VendInvoiceHeaderWorkflowSubmit):
                        vendInvoiceHeaderWorkflow.submit();
                        break;
                    case menuitemActionStr(VendInvoiceHeaderWorkflowReSubmit):
                        vendInvoiceHeaderWorkflow.reSubmit();
                        break;
                    case menuitemActionStr(VendInvoiceApprovalApprove):
                        if (PublicSectorUtils::isBudgetReservationEnabled())
                        {
                            VendInvoiceInfoTable::checkBudgetReservationBalance_PSN(vendInvoiceInfoTable.TableRefId, vendInvoiceInfoTable.SourceDocumentHeader);
                        }
                        if (FeatureStateProvider::isFeatureEnabled(VendInvoicePostingDateAutoAdjustmentFeature::instance()))
                        {
                            WorkflowElementTable workflowElementLocal;

                            //If Vendor invoice header workflow is configured with automatic posting task then
                            //Skip update of posting date at this level, since automatic invoice posting task takes care of adjustment invoice posting date.

                            select firstonly RecId from  workflowElementLocal 
                               where workflowElementLocal.ConfigurationId == workItem.ConfigurationId
                                && workflowElementLocal.ElementType == WorkflowElementType::AutomatedTask
                                && (workflowElementLocal.ElementName == VendInvoicePostTaskConstants::VendInvoicePaymentAuthorization
                                || workflowElementLocal.ElementName == VendInvoicePostTaskConstants::VendInvoicePostWorkflowTask);

                            boolean automaticPostingTaskExists = workflowElementLocal.RecId ? true : false;
                            
                            if (!automaticPostingTaskExists)
                            {
                                vendInvoiceInfoTable.updatePostingDate();
                            }
                        }
                        else
                        {
                            vendInvoiceInfoTable.updatePostingDate();
                        }

                        VendInvoiceHeaderWorkflowWorkItemActionManager::main(_args);
                        break;
                    default:
                        throw(error(strFmt("@SYS23264", funcName())));
                }
            }
            catch
            {
                error(strFmt("@SYS321204",vendInvoiceInfoTable.Num));
            }

            if (caller)
            {
                caller.updateWorkFlowControls();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the vendor invoice workflow.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <param name="_workflowComment">
    /// The submission comment.
    /// </param>
    /// <remarks>
    /// This method starts the workflow configuration by calling the <c>ActivateWorkflowTemplate</c> method
    /// on the <c>Workflow</c> class that has information about the vendor invoice record.
    /// </remarks>
    public static void submitToWorkflow(VendInvoiceInfoTable _vendInvoiceInfoTable, WorkflowComment _workflowComment)
    {
        WorkflowVersionTable workflowVersionTable = VendInvoiceHeaderWorkflow::findWorkflowConfigurationToActivate(_vendInvoiceInfoTable);

        _vendInvoiceInfoTable.reread();

        if (workflowVersionTable && _vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Draft)
        {
            Workflow::activateFromWorkflowConfigurationId(workflowVersionTable.ConfigurationId, _vendInvoiceInfoTable.RecId, _workflowComment, false);
            VendInvoiceInfoTable::setRequestStatus(_vendInvoiceInfoTable.RecId, VendInvoiceRequestStatus::InReview);

            // If the invoice is in AP automation, ensure that this manual workflow submission
            // is reflected in the invoice's document history
            if (VendInvoiceAutomationStateManagement::isAutomationInvoice(_vendInvoiceInfoTable))
            {
                container manualWorkflowSubmissionEventParameters = [curUserId()];

                VendInvoiceHeaderWorkflow::logDocumentEvent(
                    enumNum(VendInvoiceManualSubmissionToWorkflow),
                    VendInvoiceManualSubmissionToWorkflow::NotSpecified,
                    _vendInvoiceInfoTable.RecId,
                    manualWorkflowSubmissionEventParameters);

                VendInvoiceAutomationStateManagement::setInvoiceAutomationStatusToInWorkflow(_vendInvoiceInfoTable.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the workflow document prior to approval.
    /// </summary>
    /// <param name = "_context">
    /// An instance of WorkflowWorkItemActionValidationContext containing data used for validation of workflow item.
    /// </param>
    /// <returns>
    /// True if validation passes successfully. False if validation fails.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// When context is not provided or the work item reference table id is invalid.
    /// </exception>
    public boolean validate(WorkflowWorkItemActionValidationContext _context)
    {
        WorkflowWorkItemTable workItem;

        if(!_context)
        {
            throw error("@AccountsPayable:ValidationContextNotProvided");
        }

        workItem = _context.parmWorkItem();

        switch (workItem.RefTableId)
        {
            case tableNum(VendInvoiceInfoTable):
                this.vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(workItem.RefRecId);
                break;

            default:
                throw error(strFmt("@AccountsPayable:InvalidRefTableId", workItem.RefTableId, tableStr(VendInvoiceInfoTable), tableNum(VendInvoiceInfoTable)));
        }

        return this.validateReadyForSubmitCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceTotalAndRegisteredInvoiceTotalNotEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the invoice total and registered invoice total are not equal.
    /// </summary>
    /// <param name="_doThrow">
    /// Determines whether or not to throw an exception if invoice totals are not equal.
    /// </param>
    /// <returns>
    /// True if the invoice total and registered invoice total are equal. False if not equal.
    /// </returns>
    private boolean validateInvoiceTotalAndRegisteredInvoiceTotalNotEqual(boolean _doThrow = true)
    {
        if (VendParameters::find().InvoiceTotalAmountMatchesTotalAmountInThePool == NoYes::Yes && vendInvoiceInfoTable.Ordering == DocumentStatus::ApproveJournal)
        {
            VendInvoiceTotalValidationResult localVendInvoiceTotalValidationResult = vendInvoiceInfoTable.validateInvoiceTotal();

            if (localVendInvoiceTotalValidationResult && !localVendInvoiceTotalValidationResult.isSuccess)
            {
                if (_doThrow)
                {
                    throw error(localVendInvoiceTotalValidationResult.resultMessage);
                }
                else
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDuplicateInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a posted invoice with the same invoice number already exists.
    /// </summary>
    /// <returns>
    /// True if a posted invoice with the same invoice number does not exist. False if already exists.
    /// </returns>
    private boolean validateDuplicateInvoice()
    {
        boolean isInvoiceNumberFreeForUse = true;

        isInvoiceNumberFreeForUse = VendInvoiceWorkflowValidation::validateInvoiceNumberNotUsedByAlreadyPostedInvoice(
            vendInvoiceInfoTable,
            VendTable::find(vendInvoiceInfoTable.InvoiceAccount));

        if (isInvoiceNumberFreeForUse && VendInvoiceCheckDupNumInRunningWorkflowFlight::instance().isEnabled())
        {
            isInvoiceNumberFreeForUse = VendInvoiceWorkflowValidation::validateInvoiceNumberNotUsedByInRunningWorkflowInvoice(
                vendInvoiceInfoTable,
                VendTable::find(vendInvoiceInfoTable.InvoiceAccount));
        }

        return isInvoiceNumberFreeForUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReadyForSubmitCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if passes all the ready for submit validations.
    /// </summary>
    /// <returns>
    /// True if passes all the ready for submit validations. Otherwise False.
    /// </returns>
    private boolean validateReadyForSubmitCheck()
    {
        return VendInvoiceWorkflowValidation::validateMatchingHasBeenPerformed(vendInvoiceInfoTable)
            && this.validateInUse(false)
            && this.validateInvoiceTotalAndRegisteredInvoiceTotalNotEqual(false)
            && this.validateDuplicateInvoice()
            && VendInvoiceWorkflowValidation::validateInvoiceHasNoUnallocatedChargesBlockingWorkflowSubmit(vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDocumentEvent</Name>
				<Source><![CDATA[
    private static void logDocumentEvent(
        EnumId _eventEnumId,
        DocumentEventEnumValue _eventEnumValue,
        VendInvoiceInfoTableRecId _sourceRecId,
        container _parameters = conNull())
    {
        DocumentEventLogRequest documentEventLogRequest = new DocumentEventLogRequest();
        documentEventLogRequest.eventEnumId = _eventEnumId;
        documentEventLogRequest.eventEnumValue = _eventEnumValue;
        documentEventLogRequest.sourceRecId = _sourceRecId;
        documentEventLogRequest.sourceTableId = tableNum(VendInvoiceInfoTable);
        documentEventLogRequest.parameters = _parameters;

        DocumentEventLog::logDocumentEvent(documentEventLogRequest);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>