<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSealedBidKeyVaultCertificateTableHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQSealedBidKeyVaultCertificateTableHandler</c> class handles the
/// <c>KeyVaultCertificateTable</c> table for the Sealed bidding feature.
/// </summary>
internal final class PurchRFQSealedBidKeyVaultCertificateTableHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCertificateTableEntryForSealedRFQReply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new record in the <c>KeyVaultCertificateTable</c> table.
    /// </summary>
    /// <param name="_certificateTableParameters">
    /// Parameters for the <c>KeyVaultCertificateTable</c> to be created.</param>
    /// <exception>Exception is thrown if certificate validation fail.</exception>
    [Hookable(false)]
    internal final static void createCertificateTableEntryForSealedRFQReply(PurchRFQSealedBidKeyVaultCertificateTableParameters _certificateTableParameters)
    {
        KeyVaultCertificateTable keyVaultCertificateTable;

        keyVaultCertificateTable.initValue();

        keyVaultCertificateTable.Name = _certificateTableParameters.name;
        keyVaultCertificateTable.Description = _certificateTableParameters.description;
        keyVaultCertificateTable.KeyVaultCertificate = _certificateTableParameters.keyVaultCertificate;
        keyVaultCertificateTable.KeyVaultRef = _certificateTableParameters.keyVaultRef;
        keyVaultCertificateTable.KeyVaultCertificateType = _certificateTableParameters.keyVaultCertificateType;

        if(!keyVaultCertificateTable.validateWrite() || !KeyVaultCertificateTable::validateKeyVaultCertificate(keyVaultCertificateTable))
        {
            throw error(strfmt("@SYS4007721", tablePname(KeyVaultCertificateTable)));
        }

        keyVaultCertificateTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkeKeyVaultCertificateToSealedRFQReply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new record in the <c>PurchRFQSealedBidKeyVaultCertificateTableRelation</c> table.
    /// </summary>
    /// <param name="_replyTableRecId">
    /// The <c>PurchRFQReplyTableRecId</c> of the <c>PurchRFQReplyTable</c> table.
    /// </param>
    /// <param name="_keyVaultCertificateRef">
    /// The <c>KeyVaultCertificateRef</c> of the <c>KeyVaultCertificateTable</c> table.
    /// </param>
    internal final static void linkeKeyVaultCertificateToSealedRFQReply(PurchRFQReplyTableRecId _replyTableRecId, KeyVaultCertificateRef _keyVaultCertificateRef)
    {
        PurchRFQSealedBidKeyVaultCertificateTableRelation sealedBidKeyVaultCertificateTableRelation;
        sealedBidKeyVaultCertificateTableRelation.initValue();
        sealedBidKeyVaultCertificateTableRelation.PurchRFQReplyTable = _replyTableRecId;
        sealedBidKeyVaultCertificateTableRelation.KeyVaultCertificateTable = _keyVaultCertificateRef;
        sealedBidKeyVaultCertificateTableRelation.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCertificateTableEntryForSealedRFQReply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the <c>KeyVaultCertificateTable</c> table record that is associated to the <c>PurchRFQReplyTable</c> table record.
    /// </summary>
    /// <param name="_replyTableRecId">
    /// The <c>PurchRFQReplyTableRecId</c> of the <c>PurchRFQReplyTable</c> table.
    /// </param>
    /// <returns>The record in the <c>KeyVaultCertificateTable</c> table; otherwise, an empty record.</returns>
    [Hookable(false)]
    internal final static KeyVaultCertificateTable findCertificateTableEntryForSealedRFQReply(PurchRFQReplyTableRecId _replyTableRecId)
    {
        KeyVaultCertificateTable keyVaultCertificate;

        if (_replyTableRecId)
        {
            PurchRFQSealedBidKeyVaultCertificateTableRelation purchRFQSealedReplySecret;

            select firstonly keyVaultCertificate
                exists join purchRFQSealedReplySecret
                    where purchRFQSealedReplySecret.KeyVaultCertificateTable == keyVaultCertificate.RecId
                       && purchRFQSealedReplySecret.PurchRFQReplyTable == _replyTableRecId;

        }

        return keyVaultCertificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKeyVaultParametersForSealedRFQReply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the <c>KeyVaultParameters</c> table record that is associated to the <c>PurchRFQReplyTable</c> table record.
    /// </summary>
    /// <param name="_replyTableRecId">
    /// The <c>PurchRFQReplyTableRecId</c> of the <c>PurchRFQReplyTable</c> table.
    /// </param>
    /// <returns>The record in the <c>KeyVaultParameters</c> table; otherwise, an empty record.</returns>
    [Hookable(false)]
    internal final static KeyVaultParameters findKeyVaultParametersForSealedRFQReply(PurchRFQReplyTableRecId _replyTableRecId)
    {
        KeyVaultParameters vaultParameters;

        if (_replyTableRecId)
        {
            KeyVaultCertificateTable keyVaultCertificate;
            PurchRFQSealedBidKeyVaultCertificateTableRelation purchRFQSealedReplySecret;

            select firstonly vaultParameters
                exists join keyVaultCertificate
                    where keyVaultCertificate.KeyVaultRef == vaultParameters.RecId
                exists join purchRFQSealedReplySecret
                    where purchRFQSealedReplySecret.KeyVaultCertificateTable == keyVaultCertificate.RecId
                       && purchRFQSealedReplySecret.PurchRFQReplyTable == _replyTableRecId;

        }

        return vaultParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkedToSealedRFQReply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether link exists between a Sealed RFQ Reply and the <c>KeyVaultCertificateTable</c> record.
    /// </summary>
    /// <param name="_keyVaultCertificateRef">
    /// The <c>KeyVaultCertificateRef</c> of the <c>KeyVaultCertificateTable</c> table.
    /// </param>
    /// <returns>True if link exists; otherwise false.</returns>
    [Hookable(false)]
    internal final static boolean isLinkedToSealedRFQReply(KeyVaultCertificateRef _keyVaultCertificateRef)
    {
        PurchRFQSealedBidKeyVaultCertificateTableRelation purchRFQSealedReplySecret;

        select firstonly purchRFQSealedReplySecret
            where purchRFQSealedReplySecret.KeyVaultCertificateTable == _keyVaultCertificateRef;

        return purchRFQSealedReplySecret.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>KeyVaultCertificateTable_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnActivated event of the <c>KeyVaultCertificateTable</c> data source for the <c>KeyVaultParameters</c> form.
    /// </summary>
    /// <param name = "_sender">The instance of the form being extended.</param>
    /// <param name = "_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(KeyVaultParameters, KeyVaultCertificateTable), FormDataSourceEventType::Activated)]
    public static void KeyVaultCertificateTable_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        KeyVaultCertificateTable keyVaultCertificateTable = _sender.cursor() as KeyVaultCertificateTable;
        boolean existsLink = !PurchRFQSealedBidKeyVaultCertificateTableHandler::isLinkedToSealedRFQReply(keyVaultCertificateTable.RecId);

        _sender.allowDelete(existsLink);
        _sender.allowEdit(existsLink);

        _sender.formRun().design().controlName(formControlStr(KeyVaultParameters, RemoveButton)).enabled(existsLink);
        _sender.formRun().design().controlName(formControlStr(KeyVaultParameters, ValidateCertificate)).enabled(existsLink);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>