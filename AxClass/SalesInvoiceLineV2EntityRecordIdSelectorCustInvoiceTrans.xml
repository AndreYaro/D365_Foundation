<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoiceLineV2EntityRecordIdSelectorCustInvoiceTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadataAttribute(identifierStr(TableName), tableStr(CustInvoiceTrans))]
[ExportMetadataAttribute(identifierStr(EntityName), dataentityviewstr(SalesInvoiceLineV2Entity))]
[ExportAttribute(identifierstr(Dynamics.AX.Application.IBusinessEventsTableToEntityRecordIdSelector))]
internal final class SalesInvoiceLineV2EntityRecordIdSelectorCustInvoiceTrans implements IBusinessEventsTableToEntityRecordIdSelector
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEntityRecordIdsImpactedByTableChange</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public List getEntityRecordIdsImpactedByTableChange(BusinessEventsDefinition _eventDefinition, BusinessEventsActions _changeType, RecId _changedRecordId)
    {
        List impactedRecIds = null;

        impactedRecIds = this.getEntityRecordIdsExcludeFTIAndReturnOrder(_changedRecordId);

        return impactedRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityRecordIdsExcludeFTIAndReturnOrder</Name>
				<Source><![CDATA[
    private List getEntityRecordIdsExcludeFTIAndReturnOrder(RecId _changedRecordId)
    {
        List impactedRecIds = new List(Types::Int64);

        CustInvoiceTrans custInvoiceTrans;
        SalesTable salesTable;

        if (SalesInvoiceV2EntityRecordIdSelectorExclROFight::instance().isEnabled())
        {
            // Exclude free text invoices by only including records that have a sales ID.
            // Exclude return order by checking the sales type
            select firstonly RecId from custInvoiceTrans
                where custInvoiceTrans.RecId == _changedRecordId
                    && custInvoiceTrans.SalesId != ''
                exists join salesTable
                    where salesTable.SalesId == custInvoiceTrans.SalesId
                        && salesTable.SalesType != SalesType::ReturnItem;
        }
        
        else
        {
        // Exclude free text invoices by only including records that have a sales ID.
        select firstonly RecId from custInvoiceTrans
            where custInvoiceTrans.RecId == _changedRecordId
                && custInvoiceTrans.SalesId != '';
        }

        if (custInvoiceTrans)
        {
            impactedRecIds.addEnd(custInvoiceTrans.RecId);
        }

        return impactedRecIds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>