<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPrepaymentInvoiceCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the abstract class for creating a prepayment invoice from a sales order.
/// </summary>
internal abstract class CustPrepaymentInvoiceCreate extends RunBase
{
    protected SalesPurchTable salesPurchTable;
    protected CustPrepaymentInvoiceTable prepaymentInvoiceTable;
    protected CustPrepaymentInvoiceLine prepaymentInvoiceLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFromForm</Name>
				<Source><![CDATA[
    internal static boolean createFromForm(SalesPurchTable _salesPurchTable, CustPrepaymentInvoiceTable _prepaymentInvoiceTable,CustPrepaymentInvoiceLine _prepaymentInvoiceLine)
    {
        CustPrepaymentInvoiceCreate create;

        if (![_salesPurchTable] || (_prepaymentInvoiceTable.TableId != tablenum(CustPrepaymentInvoiceTable)) || (_prepaymentInvoiceLine.TableId  != tablenum(CustPrepaymentInvoiceLine)))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        create = new CustPrepaymentInvoiceCreate_Cust(_salesPurchTable, _prepaymentInvoiceTable, _prepaymentInvoiceLine, SalesUpdate::All);
        create.runOperation();

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>CustPrepaymentInvoiceCreate</c>.
    /// </summary>
    /// <param name = "_salesTable"> Sales order against which prepaymentinvoice is created</param>
    /// <param name = "_prepaymentInvoiceTable">Prepayment invoice instance</param>
    /// <param name = "_prepaymentInvoiceLine">Prepayment invoice line instance</param>
    public void new(SalesPurchTable _salesTable, CustPrepaymentInvoiceTable _prepaymentInvoiceTable, CustPrepaymentInvoiceLine _prepaymentInvoiceLine)
    {
        salesPurchTable = _salesTable;
        prepaymentInvoiceTable = _prepaymentInvoiceTable;
        prepaymentInvoiceLine = _prepaymentInvoiceLine;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTable</Name>
				<Source><![CDATA[
    protected void calcTable(SalesPurchTable _salesPurchTable)
    {
        SalesPurchTableInterface salesPurchTableInterface = _salesPurchTable.salesPurchTableInterface();
        SalesTable localSalesTable = _salesPurchTable;
        prepaymentInvoiceTable.Payment = salesPurchTableInterface.parmPayment();
        prepaymentInvoiceTable.initFromPayment();

        prepaymentInvoiceTable.PaymMode = salesPurchTableInterface.parmPaymMode();
        prepaymentInvoiceTable.PaymSpec = salesPurchTableInterface.parmPaymSpec();

        if (!prepaymentInvoiceTable.InvoiceDate)
        {
            prepaymentInvoiceTable.InvoiceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        prepaymentInvoiceTable.calcDue();

        prepaymentInvoiceTable.LanguageId = salesPurchTableInterface.parmLanguageId();
        prepaymentInvoiceTable.CustGroup = salesPurchTableInterface.parmCustVendGroup();

        prepaymentInvoiceTable.OrderAccount = salesPurchTableInterface.parmOrderAccount();
        prepaymentInvoiceTable.InvoiceAccount = prepaymentInvoiceTable.InvoiceAccount ? prepaymentInvoiceTable.InvoiceAccount :
                                                                                            (salesPurchTableInterface.parmInvoiceAccount() ?
                                                                                                salesPurchTableInterface.parmInvoiceAccount() : salesPurchTableInterface.parmOrderAccount());

        prepaymentInvoiceTable.NumberSequenceGroup = salesPurchTableInterface.parmNumberSequenceGroup();
        prepaymentInvoiceTable.DefaultDimension = salesPurchTableInterface.parmDefaultDimension();
        prepaymentInvoiceTable.CurrencyCode = salesPurchTableInterface.parmCurrencyCode();
        prepaymentInvoiceTable.Status = CustPrepaymentInvoiceStatus::Open;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    public static void runOnServer(SalesTable _salesPurchTable, CustPrepaymentInvoiceTable _prepaymentInvoiceTable, CustPrepaymentInvoiceLine _custPrepaymentInvoiceLine)
    {
        CustPrepaymentInvoiceCreate  custPrepaymentInvoiceCreate;

        switch (_prepaymentInvoiceTable.TableId)
        {
            case (tablenum(CustPrepaymentInvoiceTable)):
                custPrepaymentInvoiceCreate = new CustPrepaymentInvoiceCreate_Cust(_salesPurchTable, _prepaymentInvoiceTable, _custPrepaymentInvoiceLine, SalesUpdate::All);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        custPrepaymentInvoiceCreate.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the prepayment invoice
    /// </summary>
    final public void run()
    {
        SalesPurchLine recordLine;
        RecordSortedList recordSortedList;

        if (!this.validate())
        {
            checkFailed("@SYS25904");

            return;
        }
       
        ttsbegin;
        
        this.calcTable(salesPurchTable);
        prepaymentInvoiceTable.insert();

        this.initLine(prepaymentInvoiceTable);
        this.insertTotalLine();
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTotalLine</Name>
				<Source><![CDATA[
    abstract protected void insertTotalLine()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmount</Name>
				<Source><![CDATA[
    abstract protected AmountCur invoiceAmount()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>initLine</Name>
				<Source><![CDATA[
    protected void initLine(CustPrepaymentInvoiceTable _prepaymentInvoiceTable)
    {
        prepaymentInvoiceLine.clear();
        prepaymentInvoiceLine.initValue();
        prepaymentInvoiceLine.CustPrepaymentInvoiceTable = _prepaymentInvoiceTable.RecId;
        prepaymentInvoiceLine.LineNum = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordSortedListLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordSortedListLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLine</Name>
				<Source><![CDATA[
    protected SalesPurchLine salesPurchLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    protected Tax tax()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxSign</Name>
				<Source><![CDATA[
    abstract protected int taxSign()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineAmount</Name>
				<Source><![CDATA[
    abstract protected Amount salesPurchLineAmount(SalesPurchLine _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineQty</Name>
				<Source><![CDATA[
    protected UnitQty salesPurchLineQty(SalesPurchLine _line)
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyData</Name>
				<Source><![CDATA[
    internal static CustPrepaymentInvoiceTable copyData(CustPrepaymentInvoiceTable _custPrepaymentInvoiceTable, AmountCur _amountcur, CustInvoiceJour _custInvoiceJour)
    {
        int sign = -1;
        AmountCur totalAmountCur = sign * _amountcur;

        ttsbegin;

        CustPrepaymentInvoiceTable custPrepaymentInvoiceTable;
        custPrepaymentInvoiceTable = _custPrepaymentInvoiceTable.data();
        custPrepaymentInvoiceTable.Type = PrepaymentInvoiceType::Reversal;
        custPrepaymentInvoiceTable.InvoiceId = '';
        custPrepaymentInvoiceTable.Voucher = '';
        custPrepaymentInvoiceTable.Posted = NoYes::No;
        custPrepaymentInvoiceTable.InvoiceAmount = totalAmountCur;
        custPrepaymentInvoiceTable.OrigCustPrepaymentInvoiceTable = _custPrepaymentInvoiceTable.RecId;
        custPrepaymentInvoiceTable.CustInvoiceJour = _custInvoiceJour.RecId;
        custPrepaymentInvoiceTable.insert();

        CustPrepaymentInvoiceLine custPrepaymentInvoiceLine;
        CustPrepaymentInvoiceLine copyCustPrepaymentInvoiceLine;
        RecId parentRecId = custPrepaymentInvoiceTable.RecId;

        insert_recordset copyCustPrepaymentInvoiceLine (CustPrepaymentInvoiceTable, LineNum, ItemId, TaxGroup, TaxItemGroup, LineAmount, Description)
            select parentRecId, LineNum, ItemId, TaxGroup, TaxItemGroup, totalAmountCur, Description
                from custPrepaymentInvoiceLine
                where custPrepaymentInvoiceLine.CustPrepaymentInvoiceTable == _custPrepaymentInvoiceTable.RecId;

        ttscommit;

        return custPrepaymentInvoiceTable;

    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _formRun = null )
    {
        boolean ret = true;

        if (!salesPurchTable || (prepaymentInvoiceTable.TableId != tablenum(CustPrepaymentInvoiceTable)) || (prepaymentInvoiceLine.TableId  != tablenum(CustPrepaymentInvoiceLine)))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        SalesPurchTableInterface salesPurchTableInterface = salesPurchTable.salesPurchTableInterface();

        if (salesPurchTableInterface.parmPaymentSched())
        {
            ret = checkFailed("@AccountsReceivable:PrepaymentInvoicePaymentScheduleWarning");
        }

        SalesTable saleTable = salesPurchTable as SalesTable;

        //Validate if the salesOrder is confirmed 
        if (CustParameters::find().CheckSOConfirmation && !(saleTable.DocumentStatus == DocumentStatus::Confirmation))
        {
            ret = checkFailed("@AccountsReceivable:PrepaymentInvoiceSOConfirmError");
        }

        CustPrepaymentProposalTable custPrepaymentProposalTable = CustPrepaymentProposalTable::findCustPrepaymentProposalBySalesRecId(saleTable.RecId);

        if (!custPrepaymentProposalTable)
        {
            ret = checkFailed("@AccountsReceivable:PrepaymentProposalMissingError");
        }

        if (!custPrepaymentProposalTable.CategoryId)
        {
            ret = checkFailed("@AccountsReceivable:PrepaymentProposalCategoryMissingError");
        }

        if (custPrepaymentProposalTable.PrepaymentAmount <= 0)
        {
            ret = checkFailed("@AccountsReceivable:PrepaymentFixedValueNonPositiveError");
        }

        if (custPrepaymentProposalTable.PrepaymentType == SalesPrepayType::Percent && custPrepaymentProposalTable.PrepaymentValue <= 0)
        {
            ret = checkFailed("@SYS183656");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>