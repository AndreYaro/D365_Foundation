<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetSourceBudgetTransactionLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetSourceBudgetTransactionLine</c> class is responsible for data management for the
///    <c>BudgetSource</c> records that are associated with the <c>BudgetTransactionLine</c> records.
/// </summary>
/// <remarks>
///    This class extends the <c>BudgetSourceIntegrator</c> class.
/// </remarks>
public class BudgetSourceBudgetTransactionLine extends BudgetSourceIntegrator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>BudgetSource</c> table buffer for the <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <returns>
    ///    A <c>BudgetSource</c> table buffer.
    /// </returns>
    public BudgetSource createBudgetSource()
    {
        BudgetSource newBudgetSource;

        newBudgetSource.BudgetTransactionLine = commonId;
        newBudgetSource.BudgetSourceType = BudgetSourceType::BudgetTransactionLine;
        newBudgetSource.BudgetControlSourceIntegrator = BudgetControlSourceIntegrator::BudgetTransaction;

        return newBudgetSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceTrackingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget source tracking number.
    /// </summary>
    public Num getBudgetSourceTrackingNumber()
    {
        BudgetTransactionLine budgetTransactionLine = BudgetTransactionLine::find(this.parmCommonId());

        return budgetTransactionLine.getBudgetTransactionHeader().TransactionNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceTrackingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget source tracking date.
    /// </summary>
    public TransDate getBudgetSourceTrackingDate()
    {
        BudgetTransactionLine budgetTransactionLine = BudgetTransactionLine::find(this.parmCommonId());

        return budgetTransactionLine.Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetSourceIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>BudgetSource</c> records that are associated with the <c>BudgetTransactionLine</c>
    ///    record.
    /// </summary>
    /// <returns>
    ///    A set of IDs for the <c>BudgetSource</c> records that are associated with the
    ///    <c>BudgetTransactionLine</c> record.
    /// </returns>
    public Set findBudgetSourceIds()
    {
        Set                 budgetSourceIds;
        BudgetSourceRecId   budgetSourceId;

        budgetSourceIds = new Set(typeName2Type(extendedTypeStr(BudgetSourceRecId)));
        budgetSourceId = BudgetSourceBudgetTransactionLine::findBudgetSourceId(commonId);

        if (budgetSourceId != 0)
        {
            budgetSourceIds.add(budgetSourceId);
        }

        return budgetSourceIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetCheckResult</c> value that is associated with the specified <c>Common</c> record.
    /// </summary>
    /// <param name="_doCheckLedgerBudgetControlEnabled">
    /// A Boolean value that indicates whether to check that budget control is enabled on the primary
    /// ledger of the current legal entity before trying to get the <c>BudgetCheckResult</c> value;
    /// optional.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value of the <c>BudgetSource</c> record that is associated with the
    /// <c>Common</c> record.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult(boolean _doCheckLedgerBudgetControlEnabled = true)
    {
        BudgetCheckResult budgetCheckResult;

        budgetCheckResult = BudgetSourceBudgetTransactionLine::findBudgetCheckResult(this.parmCommonId(), _doCheckLedgerBudgetControlEnabled);

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a <c>BudgetSource</c> record that is associated with the specified
    ///    <c>BudgetTransactionLine</c> record exists.
    /// </summary>
    /// <param name="_budgetTransactionLineId">
    ///    The record ID of the <c>BudgetTransactionLine</c> record.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean existBudgetSource(RecId _budgetTransactionLineId)
    {
        boolean         found;
        BudgetSource    budgetSource;

        // Adding ranges for all the alternate key fields of budget source table
        // for performance reason.
        select firstonly RecId from budgetSource
            where (budgetSource.BudgetSourceType == BudgetSourceType::BudgetTransactionLine &&
                    budgetSource.BudgetTransactionLine == _budgetTransactionLineId &&
                    budgetSource.SourceDocumentLine == 0 &&
                    budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                    budgetSource.LedgerEntryJournalNumber == '' &&
                    budgetSource.LedgerEntryJournalReferenceNumber == '' &&
                    budgetSource.LedgerEntryJournalLegalEntity == 0);

        found = (budgetSource.RecId != 0);

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>BudgetCheckResult</c> value of the <c>BudgetSource</c> record that is associated with
    ///    the <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <param name="_budgetTransactionLineId">
    ///    The record ID of the <c>BudgetTransactionLine</c> record.
    /// </param>
    /// <param name="_doCheckLedgerBudgetControlEnabled">
    ///    A Boolean value that indicates whether to check if budget control is enabled on the primary ledger of
    ///    the current legal entity prior to attempting to find the <c>BudgetCheckResult</c> value; optional.
    /// </param>
    /// <returns>
    ///    The <c>BudgetCheckResult</c> value of the <c>BudgetSource</c> record that is associated with the
    ///    <c>BudgetTransactionLine</c> record.
    /// </returns>
    public static BudgetCheckResult findBudgetCheckResult(RecId _budgetTransactionLineId, boolean _doCheckLedgerBudgetControlEnabled = true)
    {
        BudgetCheckResult   budgetCheckResult;
        BudgetSource        budgetSource;

        budgetCheckResult = BudgetCheckResult::NoCheck;

        if (_budgetTransactionLineId)
        {
            if (BudgetControlConfiguration::isControlConfigured() &&
                hasTableAccess(tableNum(BudgetSource)))
            {
                if (!_doCheckLedgerBudgetControlEnabled ||
                    Ledger::isLedgerBudgetControlEnabled())
                {
                    // Adding ranges for all the alternate key fields of budget source table
                    // for performance reason.
                    select firstonly CheckResult from budgetSource
                        where  (budgetSource.BudgetSourceType == BudgetSourceType::BudgetTransactionLine &&
                                budgetSource.BudgetTransactionLine == _budgetTransactionLineId &&
                                budgetSource.SourceDocumentLine == 0 &&
                                budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                                budgetSource.LedgerEntryJournalNumber == '' &&
                                budgetSource.LedgerEntryJournalReferenceNumber == '' &&
                                budgetSource.LedgerEntryJournalLegalEntity == 0);

                    if (budgetSource.CheckResult)
                    {
                        budgetCheckResult = budgetSource.CheckResult;
                    }
                }
            }
        }

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record ID for the <c>BudgetSource</c> record that is associated with the
    ///    <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <param name="_budgetTransactionLineId">
    ///    The record ID of the <c>BudgetTransactionLine</c> record.
    /// </param>
    /// <returns>
    ///    The record ID for the <c>BudgetSource</c> record that is associated with the
    ///    <c>BudgetTransactionLine</c> record.
    /// </returns>
    public static BudgetSourceRecId findBudgetSourceId(RecId _budgetTransactionLineId)
    {
        BudgetSource budgetSource;

        // Adding ranges for all the alternate key fields of budget source table
        // for performance reason.
        select firstonly RecId from budgetSource
            where  (budgetSource.BudgetSourceType == BudgetSourceType::BudgetTransactionLine &&
                    budgetSource.BudgetTransactionLine == _budgetTransactionLineId &&
                    budgetSource.SourceDocumentLine == 0 &&
                    budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                    budgetSource.LedgerEntryJournalNumber == '' &&
                    budgetSource.LedgerEntryJournalReferenceNumber == '' &&
                    budgetSource.LedgerEntryJournalLegalEntity == 0);

        return budgetSource.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBudgetSourceBudgetTransactionLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>BudgetSourceBudgetTransactionLine</c> class by using an ID of a
    ///    <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <param name="_budgetTransactionLineId">
    ///    The ID of a <c>BudgetTransactionLine</c> record.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetSourceBudgetTransactionLine</c> class.
    /// </returns>
    public static BudgetSourceBudgetTransactionLine newBudgetSourceBudgetTransactionLine(RecId _budgetTransactionLineId)
    {
        BudgetSourceBudgetTransactionLine budgetSourceBudgetTransactionLine;

        budgetSourceBudgetTransactionLine = new BudgetSourceBudgetTransactionLine();
        budgetSourceBudgetTransactionLine.parmCommonId(_budgetTransactionLineId);

        return budgetSourceBudgetTransactionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the new <c>BudgetSource</c> record for the specified <c>BudgetTransactionLine</c> record if
    /// one does not already exist.
    /// </summary>
    /// <param name="_budgetTransactionLineId">
    /// The record ID of the <c>BudgetTransactionLine</c> record.
    /// </param>
    /// <returns>
    /// The record ID of the saved <c>BudgetSource</c> record.
    /// </returns>
    /// <remarks>
    /// If there does not exist a <c>BudgetSource</c> record for the specified <c>BudgetTransactionLine</c>
    /// record, this method will insert one record by using a user connection; otherwise, it will just
    /// return the <c>BudgetSource</c> record ID.
    /// </remarks>
    public static BudgetSourceRecId saveBudgetSource(
        RecId _budgetTransactionLineId)
    {
        BudgetSourceRecId                   budgetSourceId;
        BudgetSource                        budgetSource;
        UserConnection                      userConnection;
        BudgetSourceBudgetTransactionLine   budgetSourceBudgetTransactionLine = BudgetSourceBudgetTransactionLine::newBudgetSourceBudgetTransactionLine(_budgetTransactionLineId);

        budgetSourceId = BudgetSourceBudgetTransactionLine::findBudgetSourceId(_budgetTransactionLineId);

        if (!budgetSourceId)
        {
            userConnection = new UserConnection();

            try
            {
                userConnection.ttsbegin();

                budgetSource = budgetSourceBudgetTransactionLine.createBudgetSource();
                budgetSource.setConnection(userConnection);
                budgetSource.insert();

                budgetSourceId = budgetSource.RecId;

                userConnection.ttscommit();
            }
            finally
            {
                UserConnection.finalize();
            }
        }

        return budgetSourceId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>