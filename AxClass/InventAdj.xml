<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class InventAdj extends RunBaseBatch
{
    InventClosing           inventClosing;
    InventTransCurrency_RU  inventTransCurrency;
    DimensionDefault        corrDimension_RU;
    LedgerDimensionAccount  corrLedgerAccount_RU;
    UnknownNoYes            storno_RU;
    LedgerPostingType       corrLedgerPosting_RU;

    #ISOCountryRegionCodes

    #DEFINE.CurrentVersion(104)
    #LOCALMACRO.CurrentList
        InventClosing,
        inventTransCurrency,
        corrDimension_RU,
        corrLedgerAccount_RU,
        storno_RU,
        corrLedgerPosting_RU
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrDimension_RU</Name>
				<Source><![CDATA[
    public DimensionDefault parmCorrDimension_RU(DimensionDefault _corrDimension_RU = corrDimension_RU)
    {
        if (!prmisDefault(_corrDimension_RU))
        {
            corrDimension_RU = _corrDimension_RU;
        }

        return corrDimension_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrLedgerAccount_RU</Name>
				<Source><![CDATA[
    public LedgerDimensionAccount parmCorrLedgerAccount_RU(LedgerDimensionAccount _corrLedgerAccount_RU = corrLedgerAccount_RU)
    {
        corrLedgerAccount_RU = _corrLedgerAccount_RU;

        return corrLedgerAccount_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrLedgerPosting_RU</Name>
				<Source><![CDATA[
    public LedgerPostingType parmCorrLedgerPosting_RU(LedgerPostingType _corrLedgerPosting = corrLedgerPosting_RU)
    {
        corrLedgerPosting_RU = _corrLedgerPosting;

        return corrLedgerPosting_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventClosing</Name>
				<Source><![CDATA[
    InventClosing parmInventClosing(InventClosing _inventClosing = inventClosing)
    {
        inventClosing = _inventClosing;
        return inventClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCurrency_RU</Name>
				<Source><![CDATA[
    protected InventTransCurrency_RU parmInventTransCurrency_RU(InventTransCurrency_RU _inventTransCurrency = inventTransCurrency)
    {
        inventTransCurrency = _inventTransCurrency;
        return inventTransCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorno_RU</Name>
				<Source><![CDATA[
    public boolean parmStorno_RU(boolean _storno_RU = storno_RU == UnknownNoYes::Yes)
    {
        if (!prmisDefault(_storno_RU))
        {
            storno_RU = _storno_RU ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return storno_RU == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always return true.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend this class must override the <c>runsImpersonated</c> method and return
    ///    false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer          version         = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvent</Name>
				<Source><![CDATA[
    abstract public void updateInvent(InventDataAdj _data)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedger</Name>
				<Source><![CDATA[
    void updateLedger(LedgerTransTxt     ledgerTransTxt,
                      NoYes              correct            = NoYes::No,
                      Voucher            offsetVoucher      = '',
                      boolean            onClosingDate      = false,
                      boolean            checkOpen          = true,
                      NumberSequenceCode voucherSequence    = ''
                     )
    {
        // <GEERU>
        boolean                 countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        if (inventClosing.Ledger)
        {
            if (progress)
            {
                progress.setText("@SYS26475",1);
            }

            InventAdjustPost post = new InventAdjustPost(inventClosing.Voucher,
                                                         inventClosing.TransDate,
                                                         inventClosing.AdjustmentSpec,
                                                         ledgerTransTxt,
                                                         correct,
                                                         offsetVoucher,
                                                         onClosingDate,
                                                         checkOpen,
                                                         voucherSequence);

            // <GEERU>
            if (countryRegion_RU)
            {
                if (storno_RU != UnknownNoYes::Unknown)
                {
                    post.parmStorno_RU(storno_RU == UnknownNoYes::Yes);
                }

                post.parmAdjust_RU(inventClosing.AdjustmentType == InventAdjustmentType::InventOnHand || inventClosing.AdjustmentType == InventAdjustmentType::Transaction);
            }
            // </GEERU>
            post.updateNow();
        }
        else if (InventAdjustPost::checkPostProject(inventClosing.Voucher,inventClosing.TransDate))
        {
            InventAdjustPost::updateProjectNoLedger(inventClosing.Voucher,inventClosing.TransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerSecCur_RU</Name>
				<Source><![CDATA[
    protected void updateLedgerSecCur_RU(LedgerTransTxt     _ledgerTransTxt,
                                         NoYes              _correct            = NoYes::No,
                                         Voucher            _offsetVoucher      = '',
                                         boolean            _onClosingDate      = false,
                                         boolean            _checkOpen          = true,
                                         NumberSequenceCode _voucherSequence    = '')
    {
        if (inventClosing.Ledger)
        {
            if (progress)
            {
                progress.setText("@SYS26475", 1);
            }

            InventAdjustPostSecCur_RU post = new InventAdjustPostSecCur_RU(inventClosing.Voucher,
                                                                           inventClosing.TransDate,
                                                                           inventClosing.AdjustmentSpec,
                                                                           _ledgerTransTxt,
                                                                           _correct,
                                                                           _offsetVoucher,
                                                                           _onClosingDate,
                                                                           _checkOpen,
                                                                           _voucherSequence);

            if (storno_RU != UnknownNoYes::Unknown)
            {
                post.parmStorno_RU(storno_RU == UnknownNoYes::Yes);
            }

            post.parmAdjust_RU(inventClosing.AdjustmentType == InventAdjustmentType::InventOnHand || inventClosing.AdjustmentType == InventAdjustmentType::Transaction);

            post.updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorAccountBalanceSheet</Name>
				<Source><![CDATA[
    static LedgerDimensionAccount errorAccountBalanceSheet(
        ItemId           _itemId,
        ItemGroupId      _itemGroup,
        InventQty        _qty,
        InventDim        _inventDim_RU = null)
    {
        LedgerDimensionDefaultAccount ldda = InventPosting::itemLedgerDimensionFromParameter(InventAdj::buildItemLedgerDimensionParameterForBalanceSheet(_qty, _itemId, _itemGroup, _inventDim_RU));

        return InventAdj::getLedgerDimensionFromDefaultAccount(ldda);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameterForBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_qty">inventory quantity.</param>
    /// <param name="_itemId">An item Id.</param>
    /// <param name="_itemGroupId">An item group Id.</param>
    /// <param name="_inventDim_RU">Inventory dimension.</param>
    /// <returns>The built parameter instance.</returns>
    protected static InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameterForBalanceSheet(
        InventQty   _qty,
        ItemId      _itemId,
        ItemGroupId _itemGroupId,
        InventDim   _inventDim_RU)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = InventPostingItemLedgerDimensionParameters::newFromParameters(
            _qty >= 0 ? InventAccountType::InventReceipt : InventAccountType::InventIssue,
            _itemId,
            _itemGroupId);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            searchParameters.InventDim_RU = _inventDim_RU;
        }

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorAccountBalanceSheet_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends the original method <c>errorAccountBalanceSheet</c> in order to
    /// use site information for addition to select ledger account.
    /// </summary>
    /// <param name="_itemId">
    /// Item Id.
    /// </param>
    /// <param name="_itemGroup">
    /// Item group.
    /// </param>
    /// <param name="_qty">
    /// Invent quantity.
    /// </param>
    /// <param name="_inventPostingExtendParm">
    /// Extended parameters for invent posting.
    /// </param>
    /// <returns>
    /// The matched ledger account.
    /// </returns>
    static LedgerDimensionDefaultAccount errorAccountBalanceSheet_CN(
        ItemId                      _itemId,
        ItemGroupId                 _itemGroup,
        InventQty                   _qty,
        InventPostingExtendParm_CN  _inventPostingExtendParm)
    {
        if (_qty >= 0)
        {
            return InventPosting::itemExtendParm_CN(
                InventAccountType::InventReceipt,
                _inventPostingExtendParm,
                _itemId,
                _itemGroup);
        }
        else
        {
            return InventPosting::itemExtendParm_CN(
                InventAccountType::InventIssue,
                _inventPostingExtendParm,
                _itemId,
                _itemGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorAccountOperations</Name>
				<Source><![CDATA[
    static LedgerDimensionDefaultAccount errorAccountOperations(
        ItemId         _itemId,
        ItemGroupId    _itemGroup,
        CostAmount     _costAmount,
        InventDim      _inventDim_RU = null
        )
    {
        LedgerDimensionDefaultAccount ldda = InventPosting::itemLedgerDimensionFromParameter(InventAdj::buildItemLedgerDimensionParameterForOperations(_costAmount, _itemId, _itemGroup, _inventDim_RU));
        
        return InventAdj::getLedgerDimensionFromDefaultAccount(ldda);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameterForOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_costAmount">Cost amount.</param>
    /// <param name="_itemId">An item Id.</param>
    /// <param name="_itemGroupId">An item group Id.</param>
    /// <param name="_inventDim_RU">Inventory dimension.</param>
    /// <returns>The built parameter instance.</returns>
    protected static InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameterForOperations(
        CostAmount  _costAmount,
        ItemId      _itemId,
        ItemGroupId _itemGroupId,
        InventDim   _inventDim_RU)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = InventPostingItemLedgerDimensionParameters::newFromParameters(
            _costAmount >= 0 ? InventAccountType::InventProfit : InventAccountType::InventLoss,
            _itemId,
            _itemGroupId);

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorPostingBalanceSheet</Name>
				<Source><![CDATA[
    static LedgerPostingType errorPostingBalanceSheet(InventQty _qty)
    {
        if (_qty >= 0)
        {
            return LedgerPostingType::InventReceipt;
        }
        return LedgerPostingType::InventIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorPostingOperations</Name>
				<Source><![CDATA[
    static LedgerPostingType errorPostingOperations(CostAmount costAmount)
    {
        if (costAmount >= 0)
        {
            return LedgerPostingType::InventProfit;
        }
        return LedgerPostingType::InventLoss;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionFromDefaultAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Wraps the <c>LedgerDimensionFacade::serviceCreateLedgerDimension</c> method.
    /// </summary>
    /// <param name="_defaultAccount">
    ///    The ID of the <c>DimensionAttributeValueCombination</c> record that represents the default account.
    /// </param>
    /// <param name="_defaultDimension">
    ///    The ID of a default dimension set to use; optional.
    /// </param>
    /// <returns>
    ///    The ID of the <c>DimensionAttributeValueCombination</c> record.
    /// </returns>
    /// <remarks>
    ///    Calling this method with empty default account will not throw an exception.
    /// </remarks>
    private static LedgerDimensionAccount getLedgerDimensionFromDefaultAccount(
        LedgerDimensionDefaultAccount   _defaultAccount,
        DimensionDefault                _defaultDimension = 0)
    {
        if (!_defaultAccount)
            return 0;
        else
            return LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultAccount, _defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnhandAdjusted</Name>
				<Source><![CDATA[
    public static boolean isOnhandAdjusted(InventTransOriginId      _inventTransOriginId,
                                           InventTransOriginId      _returnInventTransOriginId,
                                           Voucher                  _voucherPhysical,
                                           InventTransCurrency_RU   _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventTrans         inventTrans;
        InventSettlement    inventSettlement;
        // <GEERU>
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        select firstonly RecId from inventTrans
            where inventTrans.InventTransOrigin         == _inventTransOriginId
              &&  inventTrans.StatusReceipt             == StatusReceipt::Purchased
              &&  inventTrans.StatusIssue               == StatusIssue::None
              &&  inventTrans.PackingSlipReturned       == 0
              && (inventTrans.ReturnInventTransOrigin   == _returnInventTransOriginId   || !_returnInventTransOriginId)
              && (inventTrans.VoucherPhysical           == _voucherPhysical             || !_voucherPhysical)
            exists join inventSettlement
                where inventSettlement.TransRecId       == inventTrans.RecId
                  &&  inventSettlement.Cancelled        == NoYes::No
                  &&  inventSettlement.SettleModel      == InventSettleModel::Adjustment
                      // <GEERU>
                  &&  (!countryRegion_RU
                      || (countryRegion_RU
                          && inventSettlement.InventTransCurrency_RU == _inventTransCurrency))
                      // </GEERU>
                  &&  inventSettlement.SettleType       == InventSettleType::RemainAdjustment;

        if (inventTrans.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleQtyDec</Name>
				<Source><![CDATA[
    static Integer settleQtyDec(boolean _previousPrecision = false)
    {
        if (_previousPrecision)
        {
            return 4;           // precision used in vesions before 3.0 SP3
        }
        return 8;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleQtyDiff</Name>
				<Source><![CDATA[
    static RealBase settleQtyDiff(boolean _previousPrecision = false)
    {
        if (_previousPrecision)
        {
            return 0.0001;         // precision used in vesions before 3.0 SP3
        }
        return 0.00000001;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateModule</Name>
				<Source><![CDATA[
    static void updateModule(
        InventTrans     _inventTrans,
        CostAmount      _adjustment,
        InventClosing   _inventClosing
        )
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && _inventClosing.InventTransCurrency_RU != InventTransCurrency_RU::PrimaryCur)
        {
            return;
        }
        // </GEERU>
        switch (_inventTrans.inventTransOrigin().ReferenceCategory)
        {
            case InventTransType::ProdLine :
                InventAdj::updateModuleProdLine(_inventTrans,_adjustment,_inventClosing);
                break;

            default:
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateModuleProdLine</Name>
				<Source><![CDATA[
    static void updateModuleProdLine(
        InventTrans       _inventTrans,
        CostAmount        _adjustment,
        InventClosing     _inventClosing
        )
    {
        if (_inventClosing.ProdJournal)
        {
            ProdBOM prodBOM = InventTransOriginProdBOM::prodBOM(_inventTrans.InventTransOrigin);
            ProdCalcTrans prodCalcTrans = prodBOM.prodCalcTrans(true);

            if (prodCalcTrans.RecId                             &&
                prodCalcTrans.TransRefId   == prodBOM.ProdId    &&
                prodCalcTrans.TransRefType == ProdTransRefType::Production)
            {
                prodCalcTrans.RealCostAdjustment-= _adjustment;
                prodCalcTrans.update();
            }

            ProdTableJour prodTableJour = _inventTrans.prodTableJour(true);

            if (prodTableJour.RecId)
            {
                prodTableJour.Adjustment-= _adjustment;
                prodTableJour.update();
            }

            ProdTable prodTable = prodBOM.prodTable();

            if (prodTable.RecId)
            {
                prodCalcTrans = prodTable.prodCalcTrans(true);

                if (prodCalcTrans.RecId                           &&
                prodCalcTrans.TransRefId   == prodBOM.ProdId      &&
                prodCalcTrans.TransRefType == ProdTransRefType::Production)
                {
                    prodCalcTrans.RealCostAdjustment-= _adjustment;
                    prodCalcTrans.update();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>