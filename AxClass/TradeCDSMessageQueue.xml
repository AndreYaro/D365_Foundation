<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeCDSMessageQueue</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysMessageQueueFactoryAttribute(SysMessageQueue::SalesD365SalesIntegration)]
internal final class TradeCDSMessageQueue extends SysMessageQueueMetadata
{
    private const SysMessageProcessorMaxBundleSize DefaultMessageProcessorsTasks = 5;
    private const SysMessageProcessorMaxBundleSize DefaultBundleSize = 30;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultMessageProcessorsTasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysMessageProcessorsTasks getDefaultMessageProcessorsTasks()
    {
        return DefaultMessageProcessorsTasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxBundleSize</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysMessageProcessorMaxBundleSize getMaxBundleSize()
    {
        int maxBundleSize =  SalesParameters::find().MessageProcessorBatchTaskSize;

        return maxBundleSize ? maxBundleSize : DefaultBundleSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageProcessorScheduler</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysMessageIProcessorScheduler getMessageProcessorScheduler()
    {
        return SysMessageKeyDateTimeSequenceProcessorScheduler::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queueMessageOnSend</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean queueMessageOnSend()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitPerCreatedTransactionID</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean commitPerCreatedTransactionID()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSendQuotation</Name>
				<Source><![CDATA[
    internal static void processSendQuotation(SalesQuotationTable _salesQuotation)
    {
        SalesParameters salesParameters = SalesParameters::find();

        if (salesParameters.IsD365SalesQuotationLifecycleEnabled
            && salesParameters.IsD365SalesMessageProcessorEnabled
            && salesParameters.MessageProcessorCreateQuotationJournalAsync)
        {
            TradeCDSSendQuotationContract contract = TradeCDSSendQuotationContract::construct();
            contract.parmSalesQuotationId(_salesQuotation.QuotationId);
            contract.parmDataAreaId(_salesQuotation.DataAreaId);
            str serializedContract = FormJsonSerializer::serializeClass(contract);

            SysMessageSend::sendMessageCompany(SysMessageQueue::SalesD365SalesIntegration, SysMessageType::SalesD365SalesSendQuotation, serializedContract, curExt());
        }
        else
        {
            TradeCDSSendQuotationMessageType::processQuotation(_salesQuotation.QuotationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processConfirmQuotation</Name>
				<Source><![CDATA[
    internal static void processConfirmQuotation(SalesQuotationTable _salesQuotation)
    {
        SalesParameters salesParameters = SalesParameters::find();

        if (salesParameters.IsD365SalesQuotationLifecycleEnabled
            && salesParameters.IsD365SalesMessageProcessorEnabled
            && salesParameters.MessageProcessorCreateQuotationConfirmJournalAsync)
        {
            TradeCDSConfirmQuotationContract contract = TradeCDSConfirmQuotationContract::construct();
            contract.parmSalesQuotationId(_salesQuotation.QuotationId);
            contract.parmDataAreaId(_salesQuotation.DataAreaId);
            str serializedContract = FormJsonSerializer::serializeClass(contract);

            SysMessageSend::sendMessageCompany(SysMessageQueue::SalesD365SalesIntegration, SysMessageType::SalesD365SalesConfirmQuotation, serializedContract, curExt());
        }
        else
        {
            TradeCDSConfirmQuotationMessageType::processQuotation(_salesQuotation.QuotationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCreateSalesOrderFromQuotation</Name>
				<Source><![CDATA[
    internal static void processCreateSalesOrderFromQuotation(SalesTable _salesTable)
    {
        SalesParameters salesParameters = SalesParameters::find();

        if (salesParameters.IsD365SalesQuotationLifecycleEnabled
            && salesParameters.IsD365SalesMessageProcessorEnabled
            && salesParameters.MessageProcessorCreateQuotationConfirmJournalAsync)
        {
            TradeCDSCreateSalesOrderFromQuotationContract contract = TradeCDSCreateSalesOrderFromQuotationContract::construct();
            contract.parmSalesId(_salesTable.SalesId);
            contract.parmSalesQuotationId(_salesTable.QuotationId);
            contract.parmDataAreaId(_salesTable.DataAreaId);
            str serializedContract = FormJsonSerializer::serializeClass(contract);

            SysMessageSend::sendMessageCompany(SysMessageQueue::SalesD365SalesIntegration, SysMessageType::SalesD365SalesCreateSalesOrderFromQuotation, serializedContract, curExt());
        }
        else
        {
            TradeCDSCreateSalesOrderFromQuotationMessageType::processOrder(_salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQuotationDefaultSalesOrder</Name>
				<Source><![CDATA[
    internal static void processQuotationDefaultSalesOrder(SalesTable                       _salesTable,
                                                           SalesLineCreationSequenceNumber  _lineCreationSequenceNumberFrom,
                                                           SalesLineCreationSequenceNumber  _lineCreationSequenceNumberTo,
                                                           boolean                          _defaultHeader)
    {
        if (_salesTable.QuotationId)
        {
            SalesParameters salesParameters = SalesParameters::find();

            if (salesParameters.IsD365SalesQuotationLifecycleEnabled
                && salesParameters.IsD365SalesMessageProcessorEnabled
                && salesParameters.MessageProcessorQuotationDefaultSalesOrderAsync)
            {
                TradeCDSQuotationDefaultSalesOrderDataContract contract = TradeCDSQuotationDefaultSalesOrderDataContract::construct();
                contract.parmSalesId(_salesTable.SalesId);
                contract.parmSalesQuotationId(_salesTable.QuotationId);
                contract.parmLineCreationSequenceNumberFrom(_lineCreationSequenceNumberFrom);
                contract.parmLineCreationSequenceNumberTo(_lineCreationSequenceNumberTo);
                contract.parmDataAreaId(_salesTable.DataAreaId);
                contract.parmDefaultHeader(_defaultHeader);
                str serializedContract = FormJsonSerializer::serializeClass(contract);

                SysMessageSend::sendMessageCompany(SysMessageQueue::SalesD365SalesIntegration, SysMessageType::SalesD365SalesQuotationDefaultSalesOrder, serializedContract, curExt());
            }
            else
            {
                TradeCDSQuotationDefaultSalesOrderMessageType::processOrder(_salesTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQuotationDefaultSalesOrderLine</Name>
				<Source><![CDATA[
    internal static void processQuotationDefaultSalesOrderLine(SalesLine _salesLine)
    {
        SalesTable salesTable = SalesTable::find(_salesLine.SalesId);

        SalesParameters salesParameters = SalesParameters::find();

        if (salesTable.QuotationId
            && (!salesParameters.IsD365SalesQuotationLifecycleEnabled
                || !salesParameters.IsD365SalesMessageProcessorEnabled
                || !salesParameters.MessageProcessorQuotationDefaultSalesOrderAsync))
        {   
            SalesQuotationLine salesQuotationLine = SalesQuotationLine::findLineCreationSequence(salesTable.QuotationId, _salesLine.LineCreationSequenceNumber);
            TradeCDSQuotationDefaultSalesOrderMessageType::processOrderLine(_salesLine, salesTable, salesQuotationLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePricesAndTotalsForSalesOrder</Name>
				<Source><![CDATA[
    internal static void calculatePricesAndTotalsForSalesOrder(SalesTable   _salesTable,
                                                               boolean      _updatePrices,
                                                               List         _recordList = new List(Types::String))
    {
        if (_salesTable)
        {
            TradeCDSSalesOrderUpdatePricesAndTotalsDataContract contract = TradeCDSSalesOrderUpdatePricesAndTotalsDataContract::construct();
            contract.parmSalesId(_salesTable.SalesId);
            contract.parmDataAreaId(_salesTable.DataAreaId);
            contract.parmRecordList(_recordList);
            contract.parmUpdatePrices(_updatePrices);

            if (TradeCDSMessageQueue::isCalculateSalesPricesAndTotalsAsyncEnabled())
            {
                str serializedContract = FormJsonSerializer::serializeClass(contract);

                SysMessageSend::sendMessageCompany(SysMessageQueue::SalesD365SalesIntegration, SysMessageType::SalesD365SalesOrderUpdatePricesAndTotals, serializedContract, curExt());
            }
            else
            {
                SalesOrderUpdatePricesAndTotals::construct().calculate(contract);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePricesAndTotalsForQuotation</Name>
				<Source><![CDATA[
    internal static void calculatePricesAndTotalsForQuotation(SalesQuotationTable   _salesQuotationTable,
                                                              boolean               _updatePrices,
                                                              List                  _recordList = new List(Types::String))
    {
        if (_salesQuotationTable)
        {
            TradeCDSQuotationUpdatePricesAndTotalsDataContract contract = TradeCDSQuotationUpdatePricesAndTotalsDataContract::construct();
            contract.parmSalesQuotationId(_salesQuotationTable.QuotationId);
            contract.parmDataAreaId(_salesQuotationTable.DataAreaId);
            contract.parmRecordList(_recordList);
            contract.parmUpdatePrices(_updatePrices);

            if (TradeCDSMessageQueue::isCalculateSalesPricesAndTotalsAsyncEnabled())
            {   
                str serializedContract = FormJsonSerializer::serializeClass(contract);

                SysMessageSend::sendMessageCompany(SysMessageQueue::SalesD365SalesIntegration, SysMessageType::SalesD365SalesQuotationUpdatePricesAndTotals, serializedContract, curExt());
            }
            else
            {
                SalesQuotationUpdatePricesAndTotals::construct().calculate(contract);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalsForSalesOrder</Name>
				<Source><![CDATA[
    internal static void calculateTotalsForSalesOrder(SalesTable _salesTable, utcdatetime _updateDateTime)
    {
        if (_salesTable)
        {
            if (TradeCDSMessageQueue::isCalculateSalesPricesAndTotalsAsyncEnabled())
            {
                TradeCDSSalesOrderCalculateTotalsDataContract contract = TradeCDSSalesOrderCalculateTotalsDataContract::construct();
                contract.parmSalesId(_salesTable.SalesId);
                contract.parmDataAreaId(_salesTable.DataAreaId);
                str serializedContract = FormJsonSerializer::serializeClass(contract);

                SysMessageSend::sendMessageCompany(SysMessageQueue::SalesD365SalesIntegration, SysMessageType::SalesD365SalesOrderCalculateTotals, serializedContract, curExt());
            }
            else
            {
                SalesOrderTotalsCalculate::calculateTotalsForOrder(_salesTable.SalesId, _updateDateTime);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalsForQuotation</Name>
				<Source><![CDATA[
    internal static void calculateTotalsForQuotation(SalesQuotationTable _salesQuotationTable, utcdatetime _updateDateTime)
    {
        if (_salesQuotationTable)
        {
            if (TradeCDSMessageQueue::isCalculateSalesPricesAndTotalsAsyncEnabled())
            {
                TradeCDSQuotationCalculateTotalsDataContract contract = TradeCDSQuotationCalculateTotalsDataContract::construct();
                contract.parmSalesQuotationId(_salesQuotationTable.QuotationId);
                contract.parmDataAreaId(_salesQuotationTable.DataAreaId);
                str serializedContract = FormJsonSerializer::serializeClass(contract);

                SysMessageSend::sendMessageCompany(SysMessageQueue::SalesD365SalesIntegration, SysMessageType::SalesD365SalesQuotationCalculateTotals, serializedContract, curExt());
            }
            else
            {
                SalesQuotationTotalsCalculate::calculateTotalsForQuotation(_salesQuotationTable.QuotationId, _updateDateTime);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalculateSalesPricesAndTotalsAsyncEnabled</Name>
				<Source><![CDATA[
    internal static boolean isCalculateSalesPricesAndTotalsAsyncEnabled()
    {
        SalesParameters salesParameters = SalesParameters::find();

        return salesParameters.IsD365SalesQuotationLifecycleEnabled
            && salesParameters.IsD365SalesMessageProcessorEnabled
            && salesParameters.MessageProcessorCalculateSalesPricesAndTotalsAsync;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>