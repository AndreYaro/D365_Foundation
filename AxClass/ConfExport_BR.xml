<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfExport_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ConfExport_BR</c> class is the basis of
/// the export process of files for the Configurator feature.
/// </summary>
class ConfExport_BR
{
    #ConfMacros_BR
    #Define.placementChar('#')

    Query                   query;
    QueryRun                queryRun;
    TextStreamIo            file;

    ConfLayoutLines_BR      layoutLines;
    ConfLayoutGroups_BR     layoutGroup;
    TmpConfLayoutFields_BR  tmpConfLayoutFields;

    Array                   lastData;

    FileSize                parmMaxFileSize;
    ErrorMsg                parmMaxFileSizeError;
    ConfGroupId_BR          parmGroupId;
    ConfLayoutGroupId_BR    parmLayoutId;
    Filename                parmFileName;
    ConfExportMode_BR       parmExportMode;

    str                     separator;
    str                     textQualifier;
    int                     lineNo;
    int                     lineNoZeroBased;
    date                    systemDate;
    int                     detailsCount;

    boolean                 epSpecific;
    boolean                 complexStructure;

    // For the complext structure
    int                     batchCount;
    int                     batchId;
    int                     seqNo;
    int                     seqNoZeroBased;
    int                     batchRegNo;
    int                     batchSequenceNo;
    int                     batchSequenceNoLastLine;
    boolean                 summaryDone;
    TmpConfSummation_BR     tmpConfSummation;
    protected internal TmpConfSummationTmp_BR  tmpConfSummationTmp;
    PaymSpec                paymSpec;
    int                     lineCount;
    boolean                 isNextSegment;
    Array                   queryCont;
    container               paymSpecCont;
    Map                     tableExtensionMethodCache;
    Set                     tablesCache;
    const str               methodSeparator = '.';
    const str               tableMethodExtensionClassSuffix = '_Extension';
    private const str lastSequenceNumberFieldName = 'LastSequenceNumber';
    private int codePage;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCodePage</Name>
				<Source><![CDATA[
    public int parmCodePage(int _codePage = codePage)
    {
        codePage = _codePage;

        return codePage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the file being exported.
    /// </summary>
    protected void closeFile()
    {
        if (parmMaxFileSize && file.getStream().Length > parmMaxFileSize)
        {
            throw error(parmMaxFileSizeError);
        }

        File::SendFileToUser(file.getStream(), parmFileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExtentsion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the extension of the filename.
    /// </summary>
    /// <returns>A string containing the extension.</returns>
    protected Filename findExtentsion()
    {
        return conPeek(fileNameSplit(parmFileName), 3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the paymMode selected to generate the payment.
    /// </summary>
    /// <returns>
    /// Payment mode.
    /// </returns>
    /// <remarks>
    /// Method is specific for electronic payments and complex files. Is overloaded on <c>ElectronicPaymentRemitExport_BR</c> class
    /// </remarks>
    protected PaymMode getPaymMode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a segment related for a given payment specification
    /// </summary>
    /// <param name="_paymSpec">
    /// Payment specification of the journal line
    /// </param>
    /// <returns>
    /// The segment related.
    /// </returns>
    /// <remarks>
    /// Method is specific for electronic payments and complex files. Is overloaded on <c>ElectronicPaymentRemitExport_BR</c> class
    /// </remarks>
    protected str getSegment(PaymSpec _paymSpec)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoBR, GlobalizationConstants::FeatureReferenceBR00068] ],
            funcName()
        );

        #ConfMacros_BR

        this.parmExportMode(ConfExportMode_BR::Layout);
        separator       = #Tab;
        textQualifier   = #SingleQuotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a file that will be exported.
    /// </summary>
    protected void openFile()
    {
        file = TextStreamIo::constructForWrite(this.parmCodePage());

        if (!file)
        {
            throw error(strFmt("@SYS72245", parmFileName));
        }
        file.outFieldDelimiter(separator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputFormatedDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs the current record from the query datasource in the formatted mode.
    /// </summary>
    /// <param name="_lineType">The <c>ConfLayoutLineTypeId</c> value indicating if it's a header, detail or trailer line.</param>
    protected void outputFormatedDS(ConfLayoutLineTypeId _lineType)
    {
        #ConfMacros_BR

        ConfLayoutFields_BR     layoutFields;
        TableId                 tableId;
        FieldId                 fieldId;
        Common                  common;
        DictTable               dictTable;
        container               outputCon;
        container               value;
        str                     formattedValue;
        str                     filler;
        TmpConfLayoutFields_BR  tmpConfLayoutFieldsCopy;

        while select  layoutLines
            order by LayoutLineNum
            where   layoutLines.LayoutGroupId   == layoutGroup.LayoutGroupId
                &&  layoutLines.LayoutLineType  == _lineType
        {
            outputCon = conNull();
            while select layoutFields
                order by FieldSeq
                where   layoutFields.LayoutGroupId == layoutLines.LayoutGroupId
                    &&  layoutFields.LayoutLineNum == layoutLines.LayoutLineNum
            {
                value = conNull();

                if (layoutFields.TableName == #Command)
                {
                    switch (layoutFields.FieldName)
                    {
                        case   #Blanks:
                            if (layoutGroup.LayoutType == ConfLayoutTypesChoice_BR::FixedLength)
                            {
                                value = [strRep(#Space, layoutFields.Size)];
                            }
                            else
                            {
                                value = [#Space];
                            }
                            break;

                        case    #Zeros:
                            if (layoutGroup.LayoutType == ConfLayoutTypesChoice_BR::FixedLength)
                            {
                                value = [strRep(#Zero, layoutFields.Size)];
                            }
                            else
                            {
                                value = [#Zero];
                            }
                            break;

                        case    #Fixed:
                            value = [layoutFields.Value];
                            break;

                        case    #Sequence:
                            value = [NumberSeq::numInsertFormat(lineNo, layoutFields.Format)];
                            lineNo++;
                            break;

                        case    #SequenceZeroBased:
                            value = [NumberSeq::numInsertFormat(lineNoZeroBased, layoutFields.Format)];
                            lineNoZeroBased++;
                            break;

                        case    #Systemdate:
                            value = [systemDate];
                            break;

                        case    #RegisterType:
                            value = [layoutFields.Value];
                            break;

                        case    #QtdRegistersinBatch_File:
                            value = [detailsCount];
                            break;

                        default:
                            value = [#None];
                    }
                }
                else if (layoutFields.Summaryfield)
                {
                    tmpConfLayoutFieldsCopy = TmpConfLayoutFields_BR::find(tmpConfLayoutFields, layoutFields.LayoutGroupId, layoutFields.RecId);

                    switch (layoutFields.Summaryfield)
                    {
                        case #SumTotal:
                            value = [tmpConfLayoutFieldsCopy.SummaryTotalValue];
                            break;

                        case #Count:
                            value = [tmpConfLayoutFieldsCopy.SummaryCountValue];
                            break;

                        case #Average:
                            if (tmpConfLayoutFieldsCopy.SummaryCountValue)
                            {
                                value = [tmpConfLayoutFieldsCopy.SummaryTotalValue / tmpConfLayoutFieldsCopy.SummaryCountValue];
                            }
                            else
                            {
                                value = [0];
                            }
                            break;
                    }
                }
                else
                {
                    tableId = tableName2id(layoutFields.TableName);

                    if (lastData != null)
                    {
                        common = this.populateCommon(query, lastData, tableId);
                    }

                    if (layoutFields.FieldName)
                    {
                        fieldId = fieldName2id(tableId,layoutFields.FieldName);
                        if (layoutFields.FieldArrayIdx)
                        {
                            fieldId = fieldId2Ext(fieldId,layoutFields.FieldArrayIdx);
                        }
                        value = [common.(fieldId)];
                    }

                    if (layoutFields.MethodName)
                    {
                        new ExecutePermission().assert();

                        if (!dictTable || (dictTable && dictTable.id() != tableId))
                        {
                            dictTable = new DictTable(tableId);
                        }

                        if (layoutFields.MethodTypeDisplayEdit == DisplayFunctionType::Get)
                        {
                            value = [dictTable.callObject(layoutFields.MethodName, common)];
                        }
                        else if (layoutFields.MethodTypeDisplayEdit == DisplayFunctionType::Set)
                        {
                            value = [dictTable.callObject(layoutFields.MethodName, common, false)];
                        }

                        CodeAccessPermission::revertAssert();
                    }
                }
                formattedValue = this.outputFormattedField(conPeek(value, 1), layoutFields);

                if (layoutGroup.LayoutType == ConfLayoutTypesChoice_BR::FixedLength)
                {
                    filler = strRep((layoutFields.FieldFill ? layoutFields.FieldFill : #Space), layoutFields.Size);

                    if (strLen(formattedValue) < layoutFields.Size)
                    {
                        if (layoutFields.Justifiy == ConfJustify_BR::LeftJustify)
                        {
                            formattedValue = subStr(formattedValue + filler, 1, layoutFields.Size);
                        }
                        else if (layoutFields.Justifiy == ConfJustify_BR::RightJustify)
                        {
                            formattedValue = subStr(filler, 1, layoutFields.Size - strLen(formattedValue)) + formattedValue;
                        }
                    }
                }
                outputCon += formattedValue;
            }

            if (!layoutLines.Hide)
            {
                this.writeToFile(outputCon);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputFormatedDSComplex</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Outputs the current record from the query datasource in the formatted complex mode.
    /// </summary>
    /// <param name="_lineNo">
    ///     The <c>LineNum</c> value indicating the layout line number.
    /// </param>
    void outputFormatedDSComplex(LineNum _lineNo)
    {
        #ConfMacros_BR
        ConfLayoutLines_BR      layoutLinesLocal;
        ConfLayoutLines_BR      layoutLinesLoc11;
        ConfLayoutFields_BR     layoutFields;

        TableId                 tableId;
        FieldId                 fieldId;
        Common                  common;
        DictTable               dictTable;
        container               outputCon;
        anytype                 value;
        str                     formattedValue;
        str                     filler;

        TmpConfLayoutFields_BR  tmpConfLayoutFieldsCopy;
        real                    totalLoc;
        real                    countLoc;

        real calcSummaryValue(str summationType, boolean fileTrailer)
        {
            TmpConfSummationTmp_BR tmpConfSummationTmpLocOutput;

            tmpConfSummationTmpLocOutput.linkPhysicalTableInstance(tmpConfSummationTmp);

            totalLoc = 0;
            countLoc = 0;
            if (fileTrailer)
            {
                while select SummaryTotalValue, SummaryCountValue
                    from tmpConfSummationTmpLocOutput
                    where tmpConfSummationTmpLocOutput.LayoutGroupId == layoutFields.LayoutGroupId
                        && tmpConfSummationTmpLocOutput.TableName     == layoutFields.TableName
                        && tmpConfSummationTmpLocOutput.FieldName     == (layoutFields.FieldName ? layoutFields.FieldName : layoutFields.MethodName)

                {
                    totalLoc += tmpConfSummationTmpLocOutput.SummaryTotalValue;
                    countLoc += tmpConfSummationTmpLocOutput.SummaryCountValue;
                }
            }
            else
            {
                while select SummaryTotalValue, SummaryCountValue
                    from tmpConfSummationTmpLocOutput
                    where tmpConfSummationTmpLocOutput.LayoutGroupId == layoutFields.LayoutGroupId
                        && tmpConfSummationTmpLocOutput.TableName     == layoutFields.TableName
                        && tmpConfSummationTmpLocOutput.FieldName     == (layoutFields.FieldName ? layoutFields.FieldName : layoutFields.MethodName)
                        && tmpConfSummationTmpLocOutput.BatchId       == paymSpec

                {
                    totalLoc += tmpConfSummationTmpLocOutput.SummaryTotalValue;
                    countLoc += tmpConfSummationTmpLocOutput.SummaryCountValue;
                }
            }
            if (summationType == #SumTotal)
            {
                return totalLoc;
            }
            else if (summationType == #Count)
            {
                return countLoc;
            }
            else if (summationType == #Average)
            {
                if (countLoc)
                {
                    return totalLoc / countLoc;
                }
                else
                {
                    return 0;
                }
            }
            return 0;
        }

        if (epSpecific)
        {
            layoutLines = ConfLayoutLines_BR::findRecordType(layoutGroup.LayoutGroupId, _lineNo);
        }

        while
            select  layoutLinesLocal
               order by LayoutLineNum
                 where   layoutLinesLocal.LayoutGroupId == layoutGroup.LayoutGroupId
                         &&  layoutLinesLocal.LayoutLineNum  == _lineNo
        {
            outputCon = conNull();
            while
                select  layoutFields
                order by FieldSeq
                where   layoutFields.LayoutGroupId == layoutLinesLocal.LayoutGroupId
                    &&  layoutFields.LayoutLineNum == layoutLinesLocal.LayoutLineNum
            {
                if (layoutFields.TableName == #Command)
                {
                    switch (layoutFields.FieldName)
                    {
                        case    #Blanks:
                            if (layoutGroup.LayoutType == ConfLayoutTypesChoice_BR::FixedLength)
                            {
                                value = strRep(' ',layoutFields.Size);
                            }
                            else
                            {
                                value = ' ';
                            }
                            break;

                        case    #Zeros:
                            if (layoutGroup.LayoutType == ConfLayoutTypesChoice_BR::FixedLength)
                            {
                                value = strRep('0',layoutFields.Size);
                            }
                            else
                            {
                                value = '0';
                            }
                            break;

                        case    #Fixed:
                            value = layoutFields.Value;
                            break;

                        case    #Sequence:
                            if (layoutLines.Hide)
                            {
                                seqNo--;
                            }
                            value = NumberSeq::numInsertFormat(seqNo, layoutFields.Format);
                            break;

                        case    #SequenceZeroBased:
                            if (layoutLines.Hide)
                            {
                                seqNoZeroBased--;
                            }
                            value = NumberSeq::numInsertFormat(seqNoZeroBased, layoutFields.Format);
                            break;

                        case    #Systemdate:
                            value = systemDate;
                            break;

                        case    #Systemtime:
                            value = strRem(time2str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()), 1, 1), #Colon);
                            break;

                        case    #RegisterType:
                            value = layoutFields.Value;
                            break;

                        case    #QtdRegistersinBatch_File:
                            if (layoutLines.BatchLayoutLineType == ConfBatchLayoutLineType_BR::FileTrailer)
                            {
                                value = seqNo;
                            }
                            else
                            {
                                value = lineCount;
                            }
                            break;

                        case #QtdBatches:
                            value = batchCount;
                            break;

                        case #BatchRegisterNumber:
                            value = NumberSeq::numInsertFormat(batchRegNo, strRep(#Hash, layoutFields.Size));
                            break;

                        case #BatchSequenceNumber:
                            value = NumberSeq::numInsertFormat(batchSequenceNo, strRep(#Hash, layoutFields.Size));
                            if (!layoutLines.Hide && batchSequenceNoLastLine != _lineNo)
                            {
                                batchSequenceNo++;
                                batchSequenceNoLastLine = real2int(_lineNo);
                            }
                            break;

                        case #BatchId:
                            if (layoutLines.BatchLayoutLineType == ConfBatchLayoutLineType_BR::FileHeader ||
                                layoutLines.BatchLayoutLineType == ConfBatchLayoutLineType_BR::FileTrailer)
                            {
                                value = subStr(layoutFields.Value, 1, layoutFields.Size);
                            }
                            else
                            {
                                value = NumberSeq::numInsertFormat(batchId, strRep(#Hash, layoutFields.Size));
                            }
                            break;

                        default:
                            value = #None;
                    }
                }

                else if (layoutFields.Summaryfield)
                {
                    tmpConfLayoutFieldsCopy = TmpConfLayoutFields_BR::find(tmpConfLayoutFields,layoutFields.LayoutGroupId,layoutFields.RecId);
                    switch (layoutFields.Summaryfield)
                    {
                        case #SumTotal:
                            if (!epSpecific)
                            {
                                value = tmpConfLayoutFieldsCopy.SummaryTotalValue;
                            }
                            else
                            {
                                TmpConfSummation_BR::calcSum(layoutGroup.LayoutGroupId, paymSpec, layoutFields.TableName, layoutFields.FieldName ? layoutFields.FieldName : layoutFields.MethodName);
                                if (layoutLines.BatchLayoutLineType == ConfBatchLayoutLineType_BR::BatchTrailer)
                                {
                                    value = calcSummaryValue(#SumTotal, false);
                                }
                                else if (layoutLines.BatchLayoutLineType == ConfBatchLayoutLineType_BR::FileTrailer)
                                {
                                    value = calcSummaryValue(#SumTotal, true);
                                }
                            }
                            break;

                        case #Count:
                            if (!epSpecific)
                            {
                                value = tmpConfLayoutFieldsCopy.SummaryCountValue;
                            }
                            else
                            {
                                TmpConfSummation_BR::calcSum(layoutGroup.LayoutGroupId, paymSpec, layoutFields.TableName, layoutFields.FieldName ? layoutFields.FieldName : layoutFields.MethodName);
                                if (layoutLines.BatchLayoutLineType == ConfBatchLayoutLineType_BR::BatchTrailer)
                                {
                                    value = calcSummaryValue(#Count, false);
                                }
                                else if (layoutLines.BatchLayoutLineType == ConfBatchLayoutLineType_BR::FileTrailer)
                                {
                                    value = calcSummaryValue(#Count, true);
                                }
                            }
                            break;

                        case #Average:
                            if (!epSpecific)
                            {
                                value = (tmpConfLayoutFieldsCopy.SummaryTotalValue / tmpConfLayoutFieldsCopy.SummaryCountValue);
                            }
                            else
                            {
                                TmpConfSummation_BR::calcSum(layoutGroup.LayoutGroupId, paymSpec, layoutFields.TableName, layoutFields.FieldName ? layoutFields.FieldName : layoutFields.MethodName);
                                if (layoutLines.BatchLayoutLineType == ConfBatchLayoutLineType_BR::BatchTrailer)
                                {
                                    value = calcSummaryValue(#Average, false);
                                }
                                else
                                {
                                    tmpConfSummationTmp = tmpConfSummationTmp.findByBatchId(layoutGroup.LayoutGroupId, paymSpec, layoutFields.TableName, layoutFields.FieldName ? layoutFields.FieldName : layoutFields.MethodName);

                                    if (tmpConfSummationTmp.SummaryCountValue)
                                    {
                                        value = calcSummaryValue(#Average, true);
                                    }
                                    else if (layoutLines.BatchLayoutLineType == ConfBatchLayoutLineType_BR::FileTrailer)
                                    {
                                        value = 0;
                                    }
                                }
                            }
                            break;

                        case #GroupBy:
                            value = layoutFields.Value;
                            break;
                    }
                }
                else
                {
                    tableId = tableName2id(layoutFields.TableName);
                    common = this.populateCommon(query, lastData, tableId);

                    if (layoutFields.FieldName)
                    {
                        fieldId = fieldName2id(tableId,layoutFields.FieldName);
                        if (layoutFields.FieldArrayIdx)
                            fieldId = fieldId2Ext(fieldId,layoutFields.FieldArrayIdx);

                        value = common.(fieldId);

                        if (epSpecific && layoutFields.FieldName == fieldStr(EPSegmentTable_BR, epSegment_BR))
                        {
                            value = layoutFields.Value;
                        }
                    }
                    if (layoutFields.MethodName)
                    {
                        new ExecutePermission().assert();

                        if (!dictTable || (dictTable && dictTable.id() != tableId))
                        {
                            dictTable = new DictTable(tableId);
                        }

                        if (dictTable.doesMethodExist(layoutFields.MethodName))
                        {
                            if (layoutFields.MethodTypeDisplayEdit == DisplayFunctionType::Get)
                            {
                                value = dictTable.callObject(layoutFields.MethodName,common);
                            }
                            else if (layoutFields.MethodTypeDisplayEdit == DisplayFunctionType::Set)
                            {
                                value = dictTable.callObject(layoutFields.MethodName,common,false);
                            }
                        }
                        else
                        {
                            SysDictMethod extensionMethod = this.getTableExtensionMethod(dictTable.id(), layoutFields.MethodName);
                            DictClass extensionClass = new DictClass(extensionMethod.parentId());

                            if (layoutFields.MethodTypeDisplayEdit == DisplayFunctionType::Get)
                            {
                                value = extensionClass.callStatic(layoutFields.MethodName,common);
                            }
                            else if (layoutFields.MethodTypeDisplayEdit == DisplayFunctionType::Set)
                            {
                                value = extensionClass.callStatic(layoutFields.MethodName,common,false);
                            }
                        }

                        CodeAccessPermission::revertAssert();
                    }
                }

                formattedValue = this.outputFormattedField(value,layoutFields);

                if (layoutGroup.LayoutType == ConfLayoutTypesChoice_BR::FixedLength)
                {
                    filler = strRep((layoutFields.FieldFill ? layoutFields.FieldFill: #Space), layoutFields.Size);

                    if (strLen(formattedValue) < layoutFields.Size)
                    {
                        if (layoutFields.Justifiy == ConfJustify_BR::LeftJustify)
                        {
                            formattedValue = subStr(formattedValue+filler,1,layoutFields.Size);
                        }
                        if (layoutFields.Justifiy == ConfJustify_BR::RightJustify)
                        {
                            formattedValue = subStr(filler,1,layoutFields.Size-strLen(formattedValue))+formattedValue;
                        }
                    }
                }
                outputCon += formattedValue;

                if (!summaryDone)
                {
                    layoutLinesLoc11 = ConfLayoutLines_BR::findRecordType(layoutGroup.LayoutGroupId, _lineNo);
                    if (layoutLinesLoc11.BatchLayoutLineType == ConfBatchLayoutLineType_BR::Details &&
                                layoutFields.TableName != #Command)
                    {
                        ttsbegin;
                        if (layoutFields.Type == ConfFieldType_BR::Integer ||
                                layoutFields.Type == ConfFieldType_BR::Real_type)
                        {
                            if (!isNextSegment)
                            {
                                tmpConfSummationTmp = tmpConfSummationTmp.findbyLineNum(layoutGroup.LayoutGroupId, _lineNo,  layoutFields.TableName, layoutFields.FieldName ? layoutFields.FieldName : layoutFields.MethodName, true);
                                if (tmpConfSummationTmp)
                                {
                                    tmpConfSummationTmp.SummaryCountValue += 1;
                                    tmpConfSummationTmp.SummaryTotalValue += value;
                                    tmpConfSummationTmp.BatchId            = paymSpec;
                                    tmpConfSummationTmp.LineCount         += 1;
                                    tmpConfSummationTmp.update();
                                }
                            }
                        }

                        ttscommit;
                    }
                }
            }

            if (!layoutLines.Hide && summaryDone)
            {
                this.writeToFile(outputCon);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTableExtensionMethodsToCache</Name>
				<Source><![CDATA[
    public void addTableExtensionMethodsToCache(TableId _tableId)
    {
        if (!tablesCache)
        {
            tablesCache = new Set(Types::Integer);
        }

        // Check whether the current table was already added to cache or not
        if (tablesCache.in(_tableId))
        {
            return;
        }

        Set extensionMethods = new Set(Types::Class);

        var classes = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetAllClasses();
        var classesEnum = classes.getEnumerator();

        while (classesEnum.moveNext())
        {
            Microsoft.Dynamics.AX.Metadata.MetaModel.AxClass classInfo = classesEnum.Current;

            if (classInfo.IsStatic
                    && classInfo.IsPublic
                    && classInfo.Name.EndsWith(tableMethodExtensionClassSuffix, System.StringComparison::OrdinalIgnoreCase))
            {
                var methods = classInfo.Methods;
                var methodsEnum = methods.GetEnumerator();

                while (methodsEnum.MoveNext())
                {
                    Microsoft.Dynamics.AX.Metadata.MetaModel.AxMethod method = methodsEnum.Current;
                    var dictMethod = new SysDictMethod(UtilElementType::ClassStaticMethod, className2Id(classInfo.Name), method.Name);

                    if (this.isTableExtensionMethod(_tableId, dictMethod))
                    {
                        extensionMethods.add(dictMethod);
                        if (!tableExtensionMethodCache)
                        {
                            tableExtensionMethodCache = new Map(Types::String, Types::Class);
                        }
                        this.addTableMethodToCache(tableExtensionMethodCache, _tableId, dictMethod);
                    }
                }
            }
        }

        tablesCache.add(_tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableExtensionMethod</Name>
				<Source><![CDATA[
    public SysDictMethod getTableExtensionMethod(TableId _tableID, str _methodName)
    {
        SysDictMethod ret = this.getTableMethodFromCache(tableExtensionMethodCache, _tableID, _methodName);

        if (ret)
        {
            return ret;
        }

        this.addTableExtensionMethodsToCache(_tableID);

        return this.getTableMethodFromCache(tableExtensionMethodCache, _tableID, _methodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMethodCacheKey</Name>
				<Source><![CDATA[
    private str buildMethodCacheKey(TableId _tableId, str _methodName)
    {
        return int642Str(_tableID) + methodSeparator + _methodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTableMethodToCache</Name>
				<Source><![CDATA[
    private void addTableMethodToCache(Map _cache, TableId _tableId, SysDictMethod _method)
    {
        if (_method && _cache)
        {
            _cache.insert(this.buildMethodCacheKey(_tableId, _method.name()), _method);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableMethodFromCache</Name>
				<Source><![CDATA[
    private SysDictMethod getTableMethodFromCache(Map _cache, TableId _tableId, str _methodName)
    {
        var key = this.buildMethodCacheKey(_tableId, _methodName);

        if (_cache && _cache.exists(key))
        {
            return _cache.lookup(key);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTableExtensionMethod</Name>
				<Source><![CDATA[
    public boolean isTableExtensionMethod(TableId _tableId, SysDictMethod _method)
    {
        const int methodParmsQty = 1;
        System.String parentName = _method.parentName();

        return _method.parentType() == UtilElementType::Class
            && _method.isStatic()
            && _method.parameterCnt() == methodParmsQty
            && _method.parameterType(methodParmsQty) == Types::Record
            && _method.parameterId(methodParmsQty)  == _tableId
            && _method.compiledOk()
            && parentName.EndsWith(tableMethodExtensionClassSuffix, System.StringComparison::OrdinalIgnoreCase);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputFormatted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through each record being fetched from the query
    /// and outputs it in the formatted mode.
    /// </summary>
    protected void outputFormatted()
    {
        lineNo          = 1;
        lineNoZeroBased = 0;
        detailsCount    = 0;
        systemDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (queryRun)
        {
            this.summaryFieldPrepare();
            this.summaryFieldProcess();

            while (queryRun.next())
            {
                this.saveLastData(queryRun);

                if (detailsCount == 0)
                {
                    this.outputFormatedDS(ConfLayoutLineType_BR::Header);
                }

                this.outputFormatedDS(ConfLayoutLineType_BR::Detail);
                detailsCount++;
            }

            if (detailsCount == 0)
            {
                error("@GLS221431");
            }

            if (lastData)
            {
                this.outputFormatedDS(ConfLayoutLineType_BR::Trailer);
            }
        }
        else
        {
            info("@GLS221431");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputFormattedComplex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through each record being fetched from the query
    /// and outputs it in the formatted complex mode.
    /// </summary>
    void outputFormattedComplex()
    {
        #ConfMacros_BR
        ConfLayoutLines_BR      layoutLinesLoc;
        ConfLayoutFields_BR     layoutFieldsLoc;
        int                     i = 1;
        str                     segment;
        str                     nextSegment;
        Set                     nextSegmentSet = new Set(Types::String);
        SetEnumerator           nextSegmentSetEnumerator;
        EPSegmentTable_BR       segmentLoc;

        void printLayout(LineNum _layoutLineNum)
        {
            int     layoutLineNum = real2int(_layoutLineNum);

            while (queryRun.next())
            {
                this.saveLastData(queryRun);

                this.outputFormatedDSComplex(layoutLineNum);
                lineCount++;

                nextSegmentSetEnumerator = nextSegmentSet.getEnumerator();
                nextSegmentSetEnumerator.reset();
                while (nextSegmentSetEnumerator.moveNext())
                {
                    nextSegment = nextSegmentSetEnumerator.current();

                    if (ConfLayoutFields_BR::findLineNum(layoutGroup.LayoutGroupId, nextSegment, false).LayoutLineNum)
                    {
                        isNextSegment = true;
                        seqNo++;
                        seqNoZeroBased++;
                        this.outputFormatedDSComplex(ConfLayoutFields_BR::findLineNum(layoutGroup.LayoutGroupId, nextSegment, false).LayoutLineNum);
                        lineCount++;
                        lineNoZeroBased++;
                        isNextSegment = false;
                    }
                    else
                    {
                        if (segmentLoc.Mandatory)
                        {
                            throw error (strFmt("@GLS1321","@SYS53422",nextSegment, layoutGroup.LayoutGroupId));
                        }
                    }
                }

                seqNo++;
                seqNoZeroBased++;

                if (ConfLayoutLines_BR::findRecordType(layoutGroup.LayoutGroupId, layoutLineNum, false).BatchLayoutLineType ==
                                ConfBatchLayoutLineType_BR::Details)
                {
                    batchRegNo++;
                }

                if (ConfLayoutLines_BR::findRecordType(layoutGroup.LayoutGroupId, layoutLineNum, false).BatchLayoutLineType != ConfBatchLayoutLineType_BR::Details)
                    break;
            }

            if (!lineCount)
            {
                throw error("@SYS62195");
            }
        }

        void cancelGenerate(str errSegment)
        {
            if (!paymSpec)
            {
                throw error(strFmt("@SYS98763", this.getPaymMode()));
            }
            else
            {
                throw error(strFmt("@GLS1321", "@SYS53422", errSegment, layoutGroup.LayoutGroupId));
            }
        }

        seqNo       = 1;
        seqNoZeroBased = 0;
        batchRegno  = 1;
        batchSequenceNo = 1;
        batchSequenceNoLastLine = -1;
        lineNo      = 1;
        lineNoZeroBased = 0;
        systemDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (!summaryDone)
        {
            ttsbegin;

            delete_from tmpConfSummationTmp where tmpConfSummationTmp.LayoutGroupId == layoutGroup.LayoutGroupId;

            while select layoutLinesLoc
                  order by LayoutLineNum asc
                  where layoutLinesLoc.LayoutGroupId == layoutGroup.LayoutGroupId
            {
                if (layoutLinesLoc.BatchLayoutLineType == ConfBatchLayoutLineType_BR::Details)
                {
                    while select TableName, Type, BatchId, LayoutLineNum, FieldName, MethodName
                        from layoutFieldsLoc
                        where layoutFieldsLoc.LayoutGroupId == layoutGroup.LayoutGroupId
                            && layoutFieldsLoc.LayoutLineNum == layoutLinesLoc.LayoutLineNum
                    {
                        if (layoutFieldsLoc.TableName != #Command)
                        {
                            if (layoutFieldsLoc.Type == ConfFieldType_BR::Integer ||
                                        layoutFieldsLoc.Type == ConfFieldType_BR::Real_type)
                            {
                                tmpConfSummationTmp.LayoutGroupId = layoutLinesLoc.LayoutGroupId;
                                tmpConfSummationTmp.GroupName     = layoutLinesLoc.GroupName;
                                tmpConfSummationTmp.BatchId       = layoutFieldsLoc.BatchId;
                                tmpConfSummationTmp.LineNum       = layoutFieldsLoc.LayoutLineNum;
                                tmpConfSummationTmp.TableName     = layoutFieldsLoc.TableName;
                                tmpConfSummationTmp.FieldName     = layoutFieldsLoc.FieldName ? layoutFieldsLoc.FieldName : layoutFieldsLoc.MethodName;
                                tmpConfSummationTmp.insert();
                            }
                        }
                    }
                }
            }
            ttscommit;
        }

        if (queryRun)
        {
            queryRun = new QueryRun(queryCont.value(queryCont.lastIndex()));

            printlayout(ConfLayoutLines_BR::findBatchLineNum(layoutGroup.LayoutGroupId, ConfBatchLayoutLineType_BR::FileHeader).LayoutLineNum);

            for (i=1; i<=conLen(paymSpecCont); i++)
            {
                paymSpec = conPeek(paymSpecCont, i);

                if (summaryDone)
                {
                    batchCount++;
                    batchId++;
                }
                lineCount = 0;

                if (epSpecific)
                {
                    if (i <= conLen(paymSpecCont))
                    {
                        queryRun = new QueryRun(queryCont.value(i));
                    }
                    else
                    {
                        queryRun = new QueryRun(queryCont.value(queryCont.lastIndex()));
                    }
                }

                printLayout(ConfLayoutLines_BR::findBatchLineNum(layoutGroup.LayoutGroupId,
                                                                 ConfBatchLayoutLineType_BR::BatchHeader).
                                                                 LayoutLineNum);
                queryRun.reset();

                segment = this.getSegment(paymSpec);

                segmentLoc  = EPSegmentTable_BR::find(segment);
                nextSegment = EPSegmentTable_BR::find(segment).Nextsegment;

                while (nextSegment)
                {
                    nextSegmentSet.add(nextSegment);
                    nextSegment = EPSegmentTable_BR::find(nextSegment).Nextsegment;
                }

                layoutFieldsLoc = ConfLayoutFields_BR::findLineNum(layoutGroup.LayoutGroupId, segment, false);
                if (ConfLayoutLines_BR::findRecordType(layoutFieldsLoc.LayoutGroupId,
                                                       layoutFieldsLoc.LayoutLineNum,
                                                        false).BatchLayoutLineType ==
                                                         ConfBatchLayoutLineType_BR::Details)
                {
                    printLayout(layoutFieldsLoc.LayoutLineNum);
                    nextSegmentSet = new Set(Types::String);
                    batchRegno  = 1;
                    batchSequenceNo = 1;
                }
                else
                {
                    cancelGenerate(segment);
                }

                queryRun.reset();

                lineCount++;
                printLayout(ConfLayoutLines_BR::findBatchLineNum(layoutGroup.LayoutGroupId,
                                                                 ConfBatchLayoutLineType_BR::BatchTrailer).
                                                                 LayoutLineNum);
                queryRun.reset();
            }
            queryRun = new QueryRun(queryCont.value(queryCont.lastIndex()));

            printlayout(ConfLayoutLines_BR::findBatchLineNum(layoutGroup.LayoutGroupId, ConfBatchLayoutLineType_BR::FileTrailer).LayoutLineNum);
            if (!summaryDone)
            {
                summaryDone = true;
                this.outputFormattedComplex();

                if (lineCount)
                {
                    this.writeToFile(['']);
                }
            }
        }
        else
        {
            info("@SYS62195");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputFormattedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats a field value to be exported to the file.
    /// </summary>
    /// <param name="_value">The value of field read from the query datasource.</param>
    /// <param name="_layoutField">A <c>ConfLayoutFields_BR</c> record with the format information.</param>
    /// <returns>A string with the value formatted.</returns>
    protected str outputFormattedField(anytype _value, ConfLayoutFields_BR _layoutField)
    {
        #ConfMacros_BR

        str         outStr;
        str         formatLeft;
        str         formatRight;
        str         formatMain;
        int         mainFormatPos;
        int         length;
        int         decimals;
        int         i;
        int         j;
        real        valueReal;
        DictField   fieldObject;
        DictEnum    enumObject;
        str         unTrimmed;
        str         trimmed;
        str         outValue;
        boolean     digitsOnly  = false;
        anytype     value       = _value;

        boolean     formatRealWithComma;
        boolean     formatRealWithNoDot;
        str         formatRealLeftFill;

        switch (_layoutField.Type)
        {
            case ConfFieldType_BR::String_type:
                if (strScan(_layoutField.Format,'X(',1,strLen(_layoutField.Format)))
                {
                    mainFormatPos   = strScan(_layoutField.Format,'X(',1,strLen(_layoutField.Format));
                }
                else if (strScan(_layoutField.Format,'D(',1,strLen(_layoutField.Format)))
                {
                    mainFormatPos   = strScan(_layoutField.Format,'D(',1,strLen(_layoutField.Format));
                    digitsOnly      = true;
                }

                if (mainFormatPos)
                {
                    i = strScan(_layoutField.Format,')',mainFormatPos+2,strLen(_layoutField.Format));

                    if (!i)
                    {
                        throw error(strFmt("@GLS978",_layoutField.Format));
                    }

                    formatLeft  = subStr(_layoutField.Format,1,mainFormatPos-1);
                    formatRight = subStr(_layoutField.Format,i+1,strLen(_layoutField.Format)-i);
                    formatMain  = subStr(_layoutField.Format,mainFormatPos,i-mainFormatPos+1);
                    length      = str2int(subStr(formatMain,3,strLen(formatMain)-3));
                    if (!length)
                    {
                        throw error(strFmt("@GLS978",_layoutField.Format));
                    }

                    fieldObject = new DictField(tableName2id(_layoutField.TableName),fieldName2id(tableName2id(_layoutField.TableName),_layoutField.FieldName));
                    if (fieldObject && fieldObject.baseType() != Types::Enum)
                    {
                        value = strReplace(value, num2char(10), ' ');
                    }

                    if (fieldObject && fieldObject.baseType() == Types::Enum)
                    {
                        enumObject = new DictEnum(fieldObject.enumId());
                        outValue = enumObject.value2Name(value);
                    }
                    else
                    {
                        outValue = value;
                    }

                    outStr =    strReplace(formatLeft,#placementChar,_layoutField.Value)
                            +   (digitsOnly ? strKeep(outValue, '0123456789') : outValue)
                            +   strReplace(formatRight,#placementChar,_layoutField.Value);

                    outStr = strRTrim(strLTrim(strRem(outStr, #SpecialChars)));

                    if (strLen(outStr) > length)
                    {
                        if (_layoutField.Justifiy == ConfJustify_BR::LeftJustify)
                        {
                            outStr = subStr(outStr, 1, length);
                        }
                        else if (_layoutField.Justifiy == ConfJustify_BR::RightJustify)
                        {
                            outStr = subStr(outStr, strLen(outStr), -length);
                        }
                    }

                    outStr = textQualifier + outStr + textQualifier;
                }
                else
                {
                    throw error(strFmt("@GLS978",_layoutField.Format));
                }
                break;

            case ConfFieldType_BR::Date_type:
                formatLeft  = #None;
                formatRight = #None;
                formatMain  = _layoutField.Format;

                if (value)
                {
                    formatMain = strReplace(formatMain,#y+#y+#y+#y,ConfHelpers_BR::int2strPad(year(value),4));
                    formatMain = strReplace(formatMain,#Y+#Y+#Y+#Y,ConfHelpers_BR::int2strPad(year(value),4));
                    formatMain = strReplace(formatMain,#m+#m,ConfHelpers_BR::int2strPad(mthOfYr(value),2));
                    formatMain = strReplace(formatMain,#M+#M,ConfHelpers_BR::int2strPad(mthOfYr(value),2));
                    formatMain = strReplace(formatMain,#d+#d,ConfHelpers_BR::int2strPad(dayOfMth(value),2));
                    formatMain = strReplace(formatMain,#D+#D,ConfHelpers_BR::int2strPad(dayOfMth(value),2));

                    formatMain = strReplace(formatMain,#y+#y,ConfHelpers_BR::int2strPad(year(value) mod 100,2));
                    formatMain = strReplace(formatMain,#Y+#Y,ConfHelpers_BR::int2strPad(year(value) mod 100,2));
                    formatMain = strReplace(formatMain,#y,int2str(year(value) mod 100));
                    formatMain = strReplace(formatMain,#Y,int2str(year(value) mod 100));
                    formatMain = strReplace(formatMain,#m,int2str(mthOfYr(value)));
                    formatMain = strReplace(formatMain,#M,int2str(mthOfYr(value)));
                    formatMain = strReplace(formatMain,#d,int2str(dayOfMth(value)));
                    formatMain = strReplace(formatMain,#D,int2str(dayOfMth(value)));
                    formatMain = strReplace(formatMain,#placementChar,_layoutField.Value);
                }
                else
                {
                    formatMain = strRep(#Zero, strLen(formatMain));
                }

                outStr = formatMain;
                break;

            case ConfFieldType_BR::Time_type:
                outStr = value;
                break;

            case ConfFieldType_BR::DateTime_type:
                throw error("@GLS60638");

            case ConfFieldType_BR::Real_type:
            case ConfFieldType_BR::Integer:
                mainFormatPos = strScan(_layoutField.Format,'9(',1,strLen(_layoutField.Format));
                if (mainFormatPos)
                {
                    formatLeft = subStr(_layoutField.Format,1,mainFormatPos-1);

                    if (strScan(_layoutField.Format,')V9(',mainFormatPos+2,strLen(_layoutField.Format)))
                    {
                        i       = strScan(_layoutField.Format,')V9(',mainFormatPos+2,strLen(_layoutField.Format));
                        length  = str2int(subStr(_layoutField.Format,mainFormatPos+2,i-mainFormatPos+2));
                        j       = strScan(_layoutField.Format,')',i+4,strLen(_layoutField.Format));
                        if (!j)
                        {
                            throw error(strFmt("@GLS978",_layoutField.Format));
                        }

                        decimals    = str2int(subStr(_layoutField.Format,i+4,j-i+4));
                        formatRight = subStr(_layoutField.Format,j+1,strLen(_layoutField.Format));
                    }
                    else if (strScan(_layoutField.Format,')P9(',mainFormatPos+2,strLen(_layoutField.Format)))
                    {
                        i       = strScan(_layoutField.Format,')P9(',mainFormatPos+2,strLen(_layoutField.Format));
                        length  = str2int(subStr(_layoutField.Format,mainFormatPos+2,i-mainFormatPos+2));
                        j       = strScan(_layoutField.Format,')',i+4,strLen(_layoutField.Format));
                        if (!j)
                        {
                            throw error(strFmt("@GLS978",_layoutField.Format));
                        }

                        decimals    = str2int(subStr(_layoutField.Format,i+4,j-i+4));
                        formatRight = subStr(_layoutField.Format,j+1,strLen(_layoutField.Format));
                    }
                    else if (strScan(_layoutField.Format,')9(',mainFormatPos+2,strLen(_layoutField.Format)))
                    {
                        i       = strScan(_layoutField.Format,')9(',mainFormatPos+2,strLen(_layoutField.Format));
                        length  = str2int(subStr(_layoutField.Format,mainFormatPos+2,i-mainFormatPos+2));
                        j       = strScan(_layoutField.Format,')',i+3,strLen(_layoutField.Format));
                        if (!j)
                        {
                            throw error(strFmt("@GLS978",_layoutField.Format));
                        }

                        decimals    = str2int(subStr(_layoutField.Format,i+3,j-(i+3)));
                        formatRight = subStr(_layoutField.Format,j+1,strLen(_layoutField.Format));
                    }
                    else
                    {
                        j       = strScan(_layoutField.Format,')',mainFormatPos+2,strLen(_layoutField.Format));
                        length  = str2int(subStr(_layoutField.Format,mainFormatPos+2,j-mainFormatPos-2));
                        if (!j)
                        {
                            throw error(strFmt("@GLS978",_layoutField.Format));
                        }
                        decimals    = 0;
                        formatRight = subStr(_layoutField.Format,j+1,strLen(_layoutField.Format));
                    }
                    valueReal = Value;

                    if (decimals >= 0)
                    {
                        switch (_layoutField.TruncateField)
                        {
                            case ConfTruncate_BR::Round:
                                valueReal = round(valueReal, 1 / power(10, decimals));
                                break;

                            case ConfTruncate_BR::RoundUp:
                                valueReal = roundUp(valueReal, 1 / power(10, decimals));
                                break;

                            case ConfTruncate_BR::RoundDown:
                                valueReal = roundDown(valueReal, 1 / power(10, decimals));
                                break;

                            default:
                            // Intentionally empty
                        }
                    }

                    if (_layoutField.Type == ConfFieldType_BR::Real_type)
                    {
                        if (strScan(_layoutField.Format,')V9(',mainFormatPos+2,strLen(_layoutField.Format)))
                        {
                            formatRealWithComma = true;
                            formatRealWithNoDot = false;
                            formatRealLeftFill = '0' ;
                        }
                        else if (strScan(_layoutField.Format,')P9(',mainFormatPos+2,strLen(_layoutField.Format)))
                        {
                            formatRealWithComma = false;
                            formatRealWithNoDot = false;
                            formatRealLeftFill = '0' ;
                        }
                        else if (strScan(_layoutField.Format,')9(',mainFormatPos+2,strLen(_layoutField.Format)))
                        {
                            formatRealWithComma = false;
                            formatRealWithNoDot = true;
                            formatRealLeftFill = '0' ;
                        }

                        length      = decimals == 0 ? length : length + decimals + (formatRealWithNoDot ? 0 : 1);
                        untrimmed   = num2str(valueReal, length, decimals, (formatRealWithComma ? 2 : 1), 0);
                        trimmed     = strRTrim(strLTrim(untrimmed));

                        if (formatRealWithNoDot)
                        {
                            trimmed = strRem(trimmed, formatRealWithComma ? ',' : '.');
                        }

                        if (_layoutField.FieldFill != '')
                        {
                            formatRealLeftFill = _layoutField.FieldFill;
                        }

                        outStr = strRep(formatRealLeftFill, strLen(unTrimmed) - strLen(trimmed)) + trimmed;
                        if (valueReal < 0)
                        {
                            outStr = #hyphen + strRem(outStr, #hyphen);
                        }
                    }
                    else
                    {
                        switch (_layoutField.FieldName)
                        {
                            case #BatchId:
                            case #QtdBatches:
                            case #QtdRegistersinBatch_File:
                            case #BatchRegisterNumber:
                            case #BatchSequenceNumber:
                                outStr = value;
                                break;

                            case lastSequenceNumberFieldName:
                                outStr = value;
                                break;

                            default:
                                outStr = num2str(valueReal,length,0,0,0);
                                break;
                        }
                    }
                }
                else if (strScan(_layoutField.Format,#placementChar,1,strLen(_layoutField.Format)))
                {
                    length = strLen(_layoutField.Format);
                    decimals = 0;
                    valueReal = Value;
                    outStr = value;
                }
                break;
        }

        return outStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputSimple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through each record being fetched from the query
    /// and outputs it in the simple mode.
    /// </summary>
    protected void outputSimple()
    {
        DataSourceNumber    dataSourceNo;

        if (queryRun)
        {
            while (queryRun.next())
            {
                for (dataSourceNo = 1 ; dataSourceNo <= query.dataSourceCount() ; dataSourceNo++)
                {
                    if (queryRun.changedNo(dataSourceNo))
                    {
                        this.outputSimpleDS(dataSourceNo);
                    }
                }
            }
        }
        else
        {
            info("@GLS221431");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputSimpleDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs the current record from the query datasource in the simple mode.
    /// </summary>
    /// <param name="_dataSourceNo">The datasource number to be exported.</param>
    protected void outputSimpleDS(int _dataSourceNo)
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildFieldList     queryBuildFieldList;
        Common                  common;
        int                     fieldNo;
        FieldId                 fieldId;
        DictField               dictField;
        container               outFields;

        outFields               = conNull();
        queryBuildDataSource    = query.dataSourceNo(_dataSourceNo);
        queryBuildFieldList     = queryBuildDataSource.fields();
        common                  = queryRun.getNo(_dataSourceNo);

        if (!hasTableAccess(common.TableId, AccessType::View))
        {
            throw error(strFmt('%1 - %2', tableId2pname(common.TableId), "@SYS57330"));
        }

        for (fieldNo = 1 ; fieldNo <= queryBuildFieldList.fieldCount() ; fieldNo++)
        {
            fieldId     = queryBuildFieldList.field(fieldNo);
            dictField   = new DictField(queryBuildDataSource.table(),fieldId);

            if (dictField.arraySize() > 1)
            {
                outFields += [common.(fieldId)];
            }
            else
            {
                switch (dictField.baseType())
                {
                    case Types::Date:
                        outFields += date2str(  common.(fieldId),   123,
                                                DateDay::Digits2,   DateSeparator::Slash,
                                                DateMonth::Digits2, DateSeparator::Slash,
                                                DateYear::Digits4,  DateFlags::None);
                        break;

                    case Types::UtcDateTime:
                        outFields += textQualifier + datetime2str(common.(fieldId), DateFlags::None) + textQualifier;
                        break;

                    case Types::Enum:
                        outFields += enum2str(common.(fieldId));
                        break;

                    case Types::Real:
                        outFields += strReplace(strFmt('%1', common.(fieldId)), ',', '.');
                        break;

                    case Types::String:
                    case Types::RString:
                    case Types::VarString:
                        outFields += textQualifier + common.(fieldId) + textQualifier;
                        break;

                    default:
                        if (dictField.typeId() == extendedTypeNum(TimeOfDay))
                        {
                            outFields += time2str(common.(fieldId), 1, 1);
                        }
                        else
                        {
                            outFields += common.(fieldId);
                        }
                        break;
                }
            }
        }

        this.writeToFile(outFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportMode</Name>
				<Source><![CDATA[
    public ConfExportMode_BR parmExportMode(ConfExportMode_BR _mode = parmExportMode)
    {
        parmExportMode = _mode;

        return parmExportMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    public Filename parmFileName(Filename _filename = parmFileName)
    {
        parmFileName = _filename;

        return parmFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupId</Name>
				<Source><![CDATA[
    public ConfGroupId_BR parmGroupId(ConfGroupId_BR _confGroupId = parmGroupId)
    {
        parmGroupId = _confGroupId;
        if (!prmisDefault(_confGroupId))
        {
            if (_confGroupId)
            {
                this.queryBuild();
            }
            else
            {
                query = null;
            }
        }

        return parmGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLayoutId</Name>
				<Source><![CDATA[
    ConfLayoutGroupId_BR parmLayoutId(ConfLayoutGroupId_BR _confLayoutId=parmLayoutId)
    {
        parmLayoutId = _confLayoutId;

        select layoutGroup where layoutGroup.LayoutGroupId == parmLayoutId;

        parmGroupId = layoutGroup.ConfGroupId;
        if (!prmisDefault(_confLayoutId))
        {
            if (parmGroupId)
            {
                this.queryBuild();
            }
            else
            {
                query = null;
            }
        }

        return parmLayoutId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxFileSize</Name>
				<Source><![CDATA[
    public FileSize parmMaxFileSize(FileSize _maxFileSize = parmMaxFileSize)
    {
        parmMaxFileSize = _maxFileSize;

        return parmMaxFileSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxFileSizeError</Name>
				<Source><![CDATA[
    public ErrorMsg parmMaxFileSizeError(ErrorMsg _maxFileSizeError = parmMaxFileSizeError)
    {
        parmMaxFileSizeError = _maxFileSizeError;

        return parmMaxFileSizeError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a validated common table buffer that is ready for output.
    /// </summary>
    /// <param name="_query">
    /// The query which contains the datasource for _tableId
    /// </param>
    /// <param name="_lastData">
    /// The array that has been populated with data corresponding to the _query.
    /// </param>
    /// <param name="_tableId">
    /// The tableId for the datasource on the _query.
    /// </param>
    /// <returns>
    /// Returns a common table buffer if valid.
    /// </returns>
    protected Common populateCommon(Query _query, Array _lastData, TableId _tableId)
    {
        QueryBuildDataSource    queryBuildDataSource;
        Common                  common;

        if (!hasTableAccess(_tableId, AccessType::View))
        {
            throw error(strFmt('%1 - %2', tableId2pname(_tableId), "@SYS57330"));
        }

        queryBuildDataSource = _query.dataSourceTable(_tableId);

        if (queryBuildDataSource)
        {
            common = _lastData.value(queryBuildDataSource.id());
        }
        else
        {
            throw error(strFmt("@GLS51022", tableId2pname(_tableId)));
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class fields based on the layout being used.
    /// </summary>
    public void prepare()
    {
        #ConfMacros_BR

        if (parmExportMode == ConfExportMode_BR::Simple)
        {
            layoutGroup.clear();
            layoutGroup.LayoutType      = ConfLayoutTypesChoice_BR::Delimited;
            layoutGroup.DelimitedBy     = ConfDelimiters_BR::Comma;
            layoutGroup.Textqualifier   = ConfText_qualifier_BR::DoubleQuotes;
        }
        else
        {
            layoutGroup = ConfLayoutGroups_BR::find(parmLayoutId);
        }

        if (layoutGroup.LayoutType == ConfLayoutTypesChoice_BR::Delimited)
        {
            switch (layoutGroup.DelimitedBy)
            {
                case ConfDelimiters_BR::Comma:
                    separator = #Comma;
                    break;

                case ConfDelimiters_BR::Semicolon:
                    separator = #SemiColon;
                    break;

                case ConfDelimiters_BR::Space:
                    separator = #Space;
                    break;

                case ConfDelimiters_BR::Tab:
                    separator = #Tab;
                    break;

                case ConfDelimiters_BR::Other:
                    separator = layoutGroup.DelimiterChars;
                    break;

                default:
                    separator = #None;
                    break;
            }
        }
        else
        {
            separator = #None;
        }

        if (this.findExtentsion() == #fullstop + enum2str(ConfFileFormats_BR::CSV))
        {
            separator = #comma;
        }

        switch (layoutGroup.Textqualifier)
        {
            case ConfText_qualifier_BR::DoubleQuotes:
                textQualifier = #DoubleQuotes;
                break;

            case ConfText_qualifier_BR::SingleQuotes:
                textQualifier = #SingleQuotes;
                break;

            case ConfText_qualifier_BR::None:
                textQualifier = #None;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parm method for the internal <c>Query</c> object of class.
    /// </summary>
    /// <param name="_query">The given <c>Query</c> object; optional.</param>
    /// <returns>The returned <c>Query</c> object.</returns>
    public Query query(Query _query = query)
    {
        query = _query;

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the the internal <c>Query</c> object based on the Definition group being used.
    /// </summary>
    /// <param name="_joinMode">The <c>JoinMode</c> to be used; optional.</param>
    /// <param name="_fetchMode">The <c>QueryFetchMode</c> to be used; optional.</param>
    protected void queryBuild(  JoinMode        _joinMode   = JoinMode::InnerJoin,
                                QueryFetchMode  _fetchMode  = QueryFetchMode::One2One)
    {
        ConfTableSelection_BR   tableSelection;
        ConfRelations_BR        tableRelations;
        ConfDefinitions_BR      fieldsGroupsSelection;
        ConfSortOrder_BR        tableSorting;
        ConfRange_BR            fieldRanges;

        QueryBuildDataSource    dataSource;
        QueryBuildFieldList     fieldList;
        QueryBuildRange         queryBuildRange;

        TableId                 tableId;
        FieldId                 fieldId;
        DictFieldGroup          dictFieldGroup;
        DictRelation            dictRelation;

        TableId                 relatedTableId;
        QueryBuildDataSource    relatedDataSource;

        boolean                 tmprelations;
        int                     n;

        query = new Query();

        tmprelations = false;

        while select tableSelection
            order by DataSourceNumber
                where   tableSelection.ConfGroupId == parmGroupId
        {
            tableId = tableName2id(tableSelection.TableName);
            if (!tableId)
            {
                error(strFmt("@SYS75683",tableSelection.TableName));
                continue;
            }

            if (tableSelection.RelatedTo)
            {
                relatedTableId = tableName2id(tableSelection.RelatedTo);
                if (!relatedTableId)
                {
                    error(strFmt("@SYS75683", tableSelection.RelatedTo));
                    continue;
                }
                relatedDataSource = query.dataSourceTable(relatedTableId);

                if (relatedDataSource)
                {
                    dataSource = relatedDataSource.addDataSource(tableId);
                    dataSource.joinMode(_joinMode);
                    dataSource.fetchMode(_fetchMode);
                }

                if (tableSelection.SysRelation == NoYes::Yes)
                {
                    dictRelation = new DictRelation(tableId);
                    if (dictRelation.loadTableRelation(relatedTableId))
                    {
                        dataSource.addRelation(dictRelation);
                    }
                    else
                    {
                        error(strFmt("@SYS75688", tableSelection.TableName, tableSelection.RelatedTo));
                    }
                }
                else
                {
                    while
                        select  tableRelations
                        where   tableRelations.ConfGroupId      == parmGroupId
                            &&  tableRelations.SourceTableName  == tableSelection.RelatedTo
                            &&  tableRelations.RelatedTable     == tableSelection.TableName
                    {
                        tmprelations = true;

                        switch (tableRelations.RelationshipType)
                        {
                            case ConfRelationships_BR::Normal:
                                dataSource.addLink( fieldName2id(relatedTableId,    tableRelations.SourceFieldName),
                                                    fieldName2id(tableId,           tableRelations.RelatedField));
                                break;

                            case ConfRelationships_BR::FixedField:
                                queryBuildRange = relatedDataSource.findRange(fieldName2id(relatedTableId, tableRelations.SourceFieldName));
                                if (!queryBuildRange)
                                {
                                    queryBuildRange = relatedDataSource.addRange(fieldName2id(relatedTableId, tableRelations.SourceFieldName));
                                }
                                queryBuildRange.value(int2str(tableRelations.FixedValue ));
                                break;

                            case ConfRelationships_BR::FixedFieldRelated:
                                queryBuildRange = dataSource.findRange(fieldName2id(tableId,tableRelations.RelatedField));
                                if (!queryBuildRange)
                                {
                                    queryBuildRange = dataSource.addRange(fieldName2id(tableId,tableRelations.RelatedField));
                                }
                                queryBuildRange.value(int2str(tableRelations.FixedValue));
                                break;
                        }
                    }
                }
            }
            else
            {
                dataSource = query.addDataSource(tableId);
            }

            dataSource.firstFast(false);
            dataSource.firstOnly(false);
            dataSource.clearSortIndex();
            dataSource.clearRanges();

            while select FieldName, SortOrder from tableSorting
                order by SortingNumber
                where   tableSorting.ConfGroupId == tableSelection.ConfGroupId
                    &&  tableSorting.TableName   == tableSelection.TableName
            {
                fieldId = fieldName2id(tableId, tableSorting.FieldName);

                if (fieldName2id(tableId, tableSorting.FieldName))
                {
                    dataSource.addSortField(fieldId, tableSorting.SortOrder);
                }
                else
                {
                    error(strFmt("@SYS33954", fieldsGroupsSelection.FieldName, tableSelection.TableName));
                }
            }

            fieldList = dataSource.fields();
            fieldList.dynamic(true);

            while select fieldsGroupsSelection
                order by SortingNumber
                where   fieldsGroupsSelection.ConfGroupId == tableSelection.ConfGroupId
                    &&  fieldsGroupsSelection.TableName == tableSelection.TableName
            {
                if (fieldsGroupsSelection.FieldName)
                {
                    fieldId = fieldName2id(tableId,fieldsGroupsSelection.FieldName);

                    if (fieldId)
                    {
                        fieldList.addField(fieldId);
                    }
                    else
                    {
                        error(strFmt( "@SYS33954",fieldsGroupsSelection.FieldName,tableSelection.TableName));
                    }
                }

                if (fieldsGroupsSelection.FieldGroup)
                {
                    dictFieldGroup = new DictFieldGroup(tableId,fieldsGroupsSelection.FieldGroup);

                    if (dictFieldGroup)
                    {
                        for (n = 1; n <= dictFieldGroup.numberOfFields(); n++)
                        {
                            fieldId = dictFieldGroup.field(n);

                            if (fieldId)
                            {
                                fieldList.addField(fieldId);
                            }
                            else
                            {
                                error(strFmt("@SYS77712",fieldsGroupsSelection.FieldGroup, n));
                            }
                        }
                    }
                    else
                    {
                        error(strFmt("@GLS1179", fieldsGroupsSelection.FieldGroup,tableSelection.TableName ));
                    }
                }
            }

            if (!tmprelations)
            {
                while
                    select  RelationshipType, SourceFieldName, RelatedField, FixedValue from tableRelations
                    where   tableRelations.ConfGroupId == parmGroupId
                        &&  tableRelations.SourceTableName  == tableSelection.RelatedTo
                        &&  tableRelations.RelatedTable     == tableSelection.TableName
                {
                    switch (tableRelations.RelationshipType)
                    {
                        case ConfRelationships_BR::Normal:
                            dataSource.addLink( fieldName2id(relatedTableId,tableRelations.SourceFieldName),
                                                fieldName2id(tableId,tableRelations.RelatedField));
                            break;

                        case ConfRelationships_BR::FixedField:
                            queryBuildRange = relatedDataSource.findRange(fieldName2id(relatedTableId,tableRelations.SourceFieldName));
                            if (!queryBuildRange)
                            {
                                queryBuildRange = relatedDataSource.addRange(fieldName2id(relatedTableId,tableRelations.SourceFieldName));
                            }
                            queryBuildRange.value(int2str(tableRelations.FixedValue));
                            break;

                        case ConfRelationships_BR::FixedFieldRelated:
                            queryBuildRange = dataSource.findRange(fieldName2id(tableId,tableRelations.RelatedField));
                            if (!queryBuildRange)
                            {
                                queryBuildRange = dataSource.addRange(fieldName2id(tableId,tableRelations.RelatedField));
                            }
                            queryBuildRange.value(int2str(tableRelations.FixedValue));
                            break;
                    }
                }
            }

            while select FieldName from fieldRanges
                where   fieldRanges.ConfGroupId == tableSelection.ConfGroupId
                    &&  fieldRanges.TableName   == tableSelection.TableName
            {
                fieldId = fieldName2id(tableId, fieldRanges.FieldName);

                if (fieldId)
                {
                    dataSource.addRange(fieldId);
                }
                else
                {
                    error(strFmt( "@SYS33954",fieldsGroupsSelection.FieldName,tableSelection.TableName));
                }
            }
        }

        if (!query.dataSourceCount())
        {
            throw warning(strFmt("@GLS64312", parmGroupId));
        }

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parm method for the internal <c>QueryRun</c> object of class.
    /// </summary>
    /// <param name="_queryRun">The given <c>QueryRun</c> object; optional.</param>
    /// <returns>The returned <c>QueryRun</c> object.</returns>
    /// <remarks>
    /// If no value is already configured, it calls method queryBuild.
    /// </remarks>
    public QueryRun queryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;

        if (!queryRun)
        {
            this.queryBuild();
            queryRun = new QueryRun(query);
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Base method that initializes the query, initialize the class fields,
    /// creates the file, outputs data and closes the file.
    /// </summary>
    public void run()
    {
        if (!query)
        {
            this.queryBuild();
        }

        this.prepare();
        this.openFile();

        if (parmExportMode == ConfExportMode_BR::Simple)
        {
            this.outputSimple();
        }
        else
        {
            if (epSpecific && complexStructure)
            {
                this.outputFormattedComplex();
            }
            else
            {
                this.outputFormatted();
            }
        }

        this.closeFile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLastData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores internally the data from the <c>QueryRun</c> object for later use.
    /// </summary>
    /// <param name="_queryRun">The given <c>QueryRun</c> object containing the data.</param>
    protected void saveLastData(QueryRun    _queryRun)
    {
        DataSourceNumber    dataSourceNo;

        lastData = new Array(Types::Record);

        for (dataSourceNo = 1; dataSourceNo <= query.dataSourceCount(); dataSourceNo++)
        {
            lastData.value(dataSourceNo, _queryRun.getNo(dataSourceNo));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryFieldPrepare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the summary field temporary table to be used.
    /// </summary>
    protected void summaryFieldPrepare()
    {
        ConfLayoutFields_BR     layoutFields;

        ttsbegin;

        while select LayoutGroupId, RecId from layoutFields
            order by FieldSeq
            where   layoutFields.LayoutGroupId == layoutGroup.LayoutGroupId
                    &&  (   layoutFields.Summaryfield  == #SumTotal
                        ||  layoutFields.Summaryfield  == #Count
                        ||  layoutFields.Summaryfield  == #Average)
        {
            tmpConfLayoutFields.LayoutGroupId   = layoutFields.LayoutGroupId;
            tmpConfLayoutFields.RefRecId        = layoutFields.RecId;
            tmpConfLayoutFields.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryFieldProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through each record from the query and
    /// processes fields to be summarized.
    /// </summary>
    protected void summaryFieldProcess()
    {
        ConfLayoutFields_BR     layoutFields;
        TableId                 tableId;
        Common                  common;
        QueryRun                queryRunSummary;

        queryRunSummary = queryRun.newObject(query);

        if (queryRunSummary)
        {
            while (queryRunSummary.next())
            {
                this.saveLastData(queryRunSummary);

                while select LayoutGroupId, LayoutLineNum from layoutLines
                    order by LayoutLineNum
                    where   layoutLines.LayoutGroupId == layoutGroup.LayoutGroupId
                {
                    ttsbegin;

                    while select * from layoutFields
                        order by FieldSeq
                        where   layoutFields.LayoutGroupId == layoutLines.LayoutGroupId
                            &&  layoutFields.LayoutLineNum == layoutLines.LayoutLineNum
                            &&  (   layoutFields.Summaryfield  == #SumTotal
                                ||  layoutFields.Summaryfield  == #Count
                                ||  layoutFields.Summaryfield  == #Average)
                    {
                        tableId = tableName2id(layoutFields.TableName);
                        common  = lastData.value(query.dataSourceTable(tableId).id());
                        this.summaryFieldUpdate(layoutFields, tableId, common);
                    }

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryFieldUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a single summarize field.
    /// </summary>
    /// <param name="_layoutFields">A <c>ConfLayoutFields_BR</c> containing the field layout.</param>
    /// <param name="_tableId">The <c>TableId</c> of the table being processed.</param>
    /// <param name="_common">A <c>Common</c> buffer with the data to be processed.</param>
    protected void summaryFieldUpdate(ConfLayoutFields_BR   _layoutFields,
                                      TableId               _tableId,
                                      Common                _common)
    {
        FieldId                 fieldId;
        DictTable               dictTable;
        TmpConfLayoutFields_BR  tmpConfLayoutFieldsCopy;

        tmpConfLayoutFieldsCopy = TmpConfLayoutFields_BR::find(tmpConfLayoutFields, _layoutFields.LayoutGroupId, _layoutFields.RecId, true);

        if (_layoutFields.FieldName)
        {
            fieldId = fieldName2id(_tableId, _layoutFields.FieldName);

            if (_layoutFields.FieldArrayIdx)
            {
                fieldId = fieldId2Ext(fieldId, _layoutFields.FieldArrayIdx);
            }

            tmpConfLayoutFieldsCopy.SummaryTotalValue += _common.(fieldId);
        }

        if (_layoutFields.MethodName)
        {
            if (!dictTable || (dictTable && dictTable.id() != _tableId))
            {
                dictTable = new DictTable(_tableId);
            }

            new ExecutePermission().assert();

            if (_layoutFields.MethodTypeDisplayEdit == DisplayFunctionType::Get)
            {
                tmpConfLayoutFieldsCopy.SummaryTotalValue += dictTable.callObject(_layoutFields.MethodName, _common);
            }
            else if (_layoutFields.MethodTypeDisplayEdit == DisplayFunctionType::Set)
            {
                tmpConfLayoutFieldsCopy.SummaryTotalValue += dictTable.callObject(_layoutFields.MethodName, _common, false);
            }

            CodeAccessPermission::revertAssert();
        }

        tmpConfLayoutFieldsCopy.SummaryCountValue += 1;
        tmpConfLayoutFieldsCopy.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeToFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the given data to the export file.
    /// </summary>
    /// <param name="_data">A container with each of the fields being exported.</param>
    protected void writeToFile(container _data)
    {
        file.writeExp(_data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ConfExport_BR construct()
    {
        return new ConfExport_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS960";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>