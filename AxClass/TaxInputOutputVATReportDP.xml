<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxInputOutputVATReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxInputOutputVATReportDP</c> class is the report data provider class for the
/// <c>TaxInputOutputVAT</c> report.
/// </summary>
[
    SRSReportQueryAttribute    (queryStr(TaxInputOutputVATReport)),
    SRSReportParameterAttribute(classStr(TaxInputOutputVATReportContract))
    ]
    public class TaxInputOutputVATReportDP extends SrsReportDataProviderPreProcessTempDB
{
    TaxInputOutputVATTmp                taxInputOutputVATTmp;
    RecordInsertList                    taxInputOutputVATList;

    boolean                             insertToTmp;
    boolean                             previousInsertToTmp;
    TaxTrans                            taxTransPaym;
    TaxTransExtensionTH                 taxTransExtensionTHPaym;
    TaxTrans                            taxTransInv;
    StartDate                           startDateParameter;
    EndDate                             endDateParameter;
    Counter                             counter;
    TaxCode                             salesTaxCodeParameter;
    DetailSummary                       detailSummaryParameter;
    TaxDirection                        taxDirectionParameter;
    TaxBranchCode                       taxBranchCode;
    TaxBranchCode                       taxBranchCodeParameter;
    TaxUnrealizedPurchTaxInvoiceId      taxInvoiceNumParameter;
    TaxUnrealizedPurchInvoiceDate       taxInvoiceDateParameter;
    TaxUnrealizedPurchRealVendName      name;
    TaxBranchEnabled                    isTaxBranchEnabled;
    TaxUnrealizedPurchTaxInvoiceId      taxInvoiceNum;
    TaxUnrealizedPurchInvoiceDate       taxInvoiceDate;
    Voucher                             voucher;
    TaxUnrealizedPurchRealVendName      actualName;
    TaxBase                             taxBaseAmountSum;
    TaxAmount                           taxAmountSum;
    TaxUnrealizedPurchTaxInvoiceId      previousTaxInvoiceId;

    // <GTH>
    RefRecId                            taxTransRecId;
    BranchNumber_TH                     branchNumber;
    BranchNumber_TH                     actualBranchNumber;
    TaxNatureOfAddress_TH               taxNatureOfAddress;
    TaxNatureOfAddress_TH               actualTaxNatureOfAddress;
    TaxRegistrationNumber               taxRegistrationNumber;
    TaxRegistrationNumber               actualTaxRegistrationNumber;
    InvoiceId                           origInvoiceNum;
    InvoiceId                           actualOrigInvoiceNum;
    Description255                      remark;
    Description255                      actualRemark;
    TransDate                           postingDate;
    TransDateTime                       taxTransCreatedDateTime;
    boolean                             isThaiRegionCode;

    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report logic based on the <c>TaxTrans</c> source value.
    /// </summary>
    public void executeSection()
    {
        taxNatureOfAddress      = TaxNatureOfAddress_TH::Branch;
        branchNumber            = '';
        taxRegistrationNumber   = '';
        origInvoiceNum          = '';
        remark                  = '';

        switch (taxTransPaym.SourceTableId)
        {
            case tableNum(VendTrans):
            case tableNum(VendInvoiceTrans):
            case tableNum(VendInvoiceInfoLine):
                this.findFromVendInvoiceTrans();
                break;
            case tableNum(CustTrans):
            case tableNum(CustInvoiceTrans):
                this.findFromCustInvoiceTrans();
                break;
            case tableNum(MarkupTrans):
                if (isThaiRegionCode)
                {
                    MarkupTrans markupTrans;
                    select firstonly TransRecId, TransTableId from markupTrans
                    where markupTrans.RecId == taxTransPaym.SourceRecId;

                    switch (markupTrans.TransTableId)
                    {
                        case tableNum(CustInvoiceJour)   :
                        case tableNum(CustInvoiceTrans)  :
                            this.findFromCustInvoiceTrans();
                            break;
                    }
                }
                break;
            case tableNum(LedgerJournalTrans):
                this.findFromLedgerJournalTrans();
                break;
            case tableNum(ProjTransPosting):
                this.findFromProjTransPosting();
                break;
                // <GTH>
            case tableNum(ProjInvoiceEmpl):
            case tableNum(ProjInvoiceItem):
            case tableNum(ProjInvoiceCost):
            case tableNum(ProjInvoiceOnAcc):
            case tableNum(ProjInvoiceRevenue):
                if (isThaiRegionCode)
                {
                    this.findFromProjInvoiceJour_TH();
                }
                break;
                // </GTH>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report logic for the <c>CustTrans</c> table.
    /// </summary>
    public void findFromCustInvoiceTrans()
    {
        CustTrans           custTrans;
        RecId               sourceRecId;
        DimensionDefault    defaultDimension;

        // <GTH>
        TaxInformation_TH       taxInformation;
        CustInvoiceJour         custInvoiceJour;
        ProjInvoiceJour         projInvoiceJour;
        DirPartyLocation        dirPartyLocation;
        Voucher                 invoiceVoucher;
        TransDate               transDate;
        CustTable               custInvoiceAccount;
        LogisticsPostalAddress  invoiceAddress;
        // </GTH>

        if (taxTransPaym.TaxOrigin == TaxOrigin::Payment)
        {
            custTrans = CustTrans::find(taxTransPaym.SourceRecId);

            // <GTH>
            if (isThaiRegionCode)
            {
                invoiceVoucher  = taxTransInv.Voucher;
                transDate       = taxTransInv.TransDate;
                remark          = ReasonTableRef::find(custTrans.ReasonRefRecId).ReasonComment;
            }
            // </GTH>
        }
        else
        {
            custTrans = CustTrans::findVoucherDate(taxTransPaym.Voucher, taxTransPaym.TransDate);

            // <GTH>
            if (isThaiRegionCode)
            {
                invoiceVoucher  = taxTransPaym.Voucher;
                transDate       = taxTransPaym.TransDate;
                remark          = ReasonTableRef::find(custTrans.ReasonRefRecId).ReasonComment;
            }
            // </GTH>
        }

        custInvoiceJour = CustInvoiceJour::findFromTaxTrans(invoiceVoucher, transDate);
        if (custInvoiceJour)
        {
            name = custInvoiceJour.InvoicingName;
        }
        else
        {
            select firstonly projInvoiceJour
                where projInvoiceJour.LedgerVoucher == invoiceVoucher
                    && projInvoiceJour.InvoiceDate   == TransDate;
            name = projInvoiceJour.DeliveryName;
        }

        // <GTH>
        if (isThaiRegionCode)
        {
            if (custInvoiceJour)
            {
                custInvoiceAccount = custInvoiceJour.custTable_InvoiceAccount();
            }
            else
            {
                custInvoiceAccount = CustTable::find(projInvoiceJour.InvoiceAccount);
            }
            if (custInvoiceJour.InvoicePostalAddress)
            {
                invoiceAddress = LogisticsPostalAddress::findRecId(custInvoiceJour.InvoicePostalAddress);
            }
            else if (projInvoiceJour.DeliveryPostalAddress)
            {
                invoiceAddress = LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress);
            }
            else
            {
                invoiceAddress = custInvoiceAccount.InvoiceAddress();
            }

            dirPartyLocation    = DirPartyLocation::findByPartyLocation(
                custInvoiceAccount.Party,
                invoiceAddress.Location);
            taxInformation      = TaxInformation_TH::find(dirPartyLocation.Location);
            if (taxInformation)
            {
                branchNumber            = taxInformation.BranchNumber;
                taxNatureOfAddress      = taxInformation.TaxNatureOfAddress;
            }
            if (custInvoiceJour)
            {
                taxRegistrationNumber   = TaxRegistration::getTaxRegistrationFromInvoiceJour_TH(custInvoiceJour).RegistrationNumber;
            }
            else
            {
                taxRegistrationNumber   = TaxRegistration::getTaxRegistrationFromInvoiceJour_TH(projInvoiceJour).RegistrationNumber;
            }
        }
        // </GTH>

        if (taxTransInv.RecId)
        {
            sourceRecId = taxTransInv.SourceRecId;
            switch (taxTransInv.SourceTableId)
            {
                case tableNum(LedgerJournalTrans):
                    defaultDimension = LedgerJournalTrans::findRecId(sourceRecId, false).DefaultDimension;
                    break;
                case tableNum(ProjInvoiceOnAcc):
                    defaultDimension = ProjInvoiceOnAcc::findRecId(sourceRecId, false).DefaultDimension;
                    break;
                case tableNum(ProjInvoiceRevenue):
                    defaultDimension = ProjInvoiceRevenue::findRecId(sourceRecId, false).DefaultDimension;
                    break;
                case tableNum(ProjInvoiceItem):
                    defaultDimension = ProjInvoiceItem::findRecId(sourceRecId, false).DefaultDimension;
                    break;
                case tableNum(ProjInvoiceEmpl):
                    defaultDimension = ProjInvoiceEmpl::findRecId(sourceRecId, false).DefaultDimension;
                    break;
                case tableNum(ProjInvoiceCost):
                    defaultDimension = ProjInvoiceCost::findRecId(sourceRecId, false).DefaultDimension;
                    break;
                default:
                    // line level tax branch
                    defaultDimension = CustInvoiceTrans::findRecId(sourceRecId).DefaultDimension;
            }
        }
        else
        {
            sourceRecId = taxTransPaym.SourceRecId;
            switch (taxTransPaym.SourceTableId)
            {
                case tableNum(LedgerJournalTrans):
                    defaultDimension = LedgerJournalTrans::findRecId(sourceRecId, false).DefaultDimension;
                    break;
                default:
                    // line level tax branch
                    defaultDimension = CustInvoiceTrans::findRecId(sourceRecId).DefaultDimension;
            }
        }

        taxBranchCode = TaxBranchType::getTBDisplayValueByDefaultDimension(defaultDimension);
        if (!taxBranchCodeParameter || taxBranchCode == taxBranchCodeParameter)
        {
            insertToTmp = true;
        }
        else
        {
            insertToTmp = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report logic for the <c>LedgerJournalTrans</c> table.
    /// </summary>
    public void findFromLedgerJournalTrans()
    {
        RecId               sourceRecId;
        LedgerJournalTrans  ledgerJournalTrans;

        // <GTH>
        LedgerJournalTransExtensionTH   ledgerJournalTransExtensionTH;
        // </GTH>

        name               = '';
        ledgerJournalTrans = LedgerJournalTrans::findRecId(taxTransPaym.SourceRecId, false);

        if (taxTransExtensionTHPaym.RealVendName)
        {
            name = taxTransExtensionTHPaym.RealVendName;
        }
        else
        {
            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
            {
                name = ledgerJournalTrans.findVendTable().name();
            }
            else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
            {
                name = ledgerJournalTrans.findCustTable().name();
            }
        }

        // <GTH>
        if (isThaiRegionCode)
        {
            ledgerJournalTransExtensionTH   = ledgerJournalTrans.ledgerJournalTransExtensionTH();
            if (ledgerJournalTransExtensionTH)
            {
                branchNumber            = ledgerJournalTransExtensionTH.BranchNumber;
                taxNatureOfAddress      = ledgerJournalTransExtensionTH.TaxNatureOfAddress;
                taxRegistrationNumber   = ledgerJournalTransExtensionTH.TaxRegNum;
            }
            remark = ledgerJournalTrans.editReasonComment(false, '');
        }
        // </GTH>

        if (taxTransInv.RecId)
        {
            sourceRecId = taxTransInv.SourceRecId;
        }
        else
        {
            sourceRecId = taxTransPaym.SourceRecId;
        }

        if (!taxBranchCodeParameter || taxTransExtensionTHPaym.TaxBranch == taxBranchCodeParameter)
        {
            insertToTmp = true;
        }
        else
        {
            insertToTmp = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromProjInvoiceJour_TH</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report logic for the <c>ProjInvoiceJour</c> table.
    /// </summary>
    public void findFromProjInvoiceJour_TH()
    {
        ProjInvoiceJour         projInvoiceJour;

        select InvoiceAccount,DeliveryPostalAddress,DefaultDimension,InvoiceDate from projInvoiceJour
            where projInvoiceJour.LedgerVoucher == taxTransPaym.Voucher
                && projInvoiceJour.InvoiceDate  == taxTransPaym.TransDate;
        CustTable custTable = custTable::find(projInvoiceJour.InvoiceAccount,false);
        if (custTable)
        {
            LogisticsPostalAddress invoiceAddress  = LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress);
            if (invoiceAddress)
            {
                DirPartyLocation    dirPartyLocation = DirPartyLocation::findByPartyLocation(custTable.Party,invoiceAddress.Location);
                TaxInformation_TH   taxInformation = TaxInformation_TH::find(dirPartyLocation.Location);

                if (taxInformation)
                {
                    branchNumber            = taxInformation.BranchNumber;
                    taxNatureOfAddress      = taxInformation.TaxNatureOfAddress;  
                }

                taxRegistrationNumber   = TaxRegistration::getTaxRegistrationFromInvoiceJour_TH(projInvoiceJour).RegistrationNumber;
            }
            name = custTable.name();
        }

        taxBranchCode = TaxBranchType::getTBDisplayValueByDefaultDimension(projInvoiceJour.DefaultDimension);
        if (!taxBranchCodeParameter || taxBranchCode == taxBranchCodeParameter)
        {
            insertToTmp = true;
        }
        else
        {
            insertToTmp = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromProjTransPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report logic for the <c>ProjTransPosting</c> table.
    /// </summary>
    public void findFromProjTransPosting()
    {
        ProjTransPosting   projTransPosting;

        select firstonly ProjTransDate, DefaultDimension, ProjId from projTransPosting
            where projTransPosting.Voucher          == taxTransPaym.Voucher
               && projTransPosting.LedgerTransDate  == taxTransPaym.TransDate
               && projTransPosting.TransId          == taxTransPaym.InventTransId;

        if (projTransPosting.RecId == 0)
        {
            select firstonly ProjTransDate, DefaultDimension, ProjId from projTransPosting
                where projTransPosting.Voucher          == taxTransPaym.Voucher
                   && projTransPosting.LedgerTransDate  == taxTransPaym.TransDate
                   && projTransPosting.InventTransId    == taxTransPaym.InventTransId;
        }

        name = ProjTable::find(projTransPosting.ProjId).Name;

        taxBranchCode = TaxBranchType::getTBDisplayValueByDefaultDimension(projTransPosting.DefaultDimension);
        if (!taxBranchCodeParameter || taxBranchCode == taxBranchCodeParameter)
        {
            insertToTmp = true;
        }
        else
        {
            insertToTmp = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report logic for the <c>VendTrans</c> table.
    /// </summary>
    public void findFromVendInvoiceTrans()
    {
        VendTrans           vendTrans;
        RecId               sourceRecId;
        DimensionDefault    defaultDimension;

        // <GTH>
        TaxInformation_TH           taxInformation;
        VendInvoiceJour             vendInvoiceJour;
        DirPartyLocation            dirPartyLocation;
        Voucher                     invoiceVoucher;
        TransDate                   transDate;
        VendTable                   vendInvoiceAccount;
        LogisticsPostalAddress      invoiceAddress;
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTransExtensionTH   ledgerJournalTransExtensionTH;
        VendInvoiceJourExtensionTH  vendInvoiceJourExtensionTH;
        // </GTH>

        if (taxTransPaym.TaxOrigin == TaxOrigin::Payment)
        {
            vendTrans = VendTrans::find(taxTransPaym.SourceRecId);

            // <GTH>
            if (isThaiRegionCode)
            {
                invoiceVoucher  = taxTransInv.Voucher;
                transDate       = taxTransInv.TransDate;
            }
            // </GTH>
        }
        else
        {
            vendTrans = VendTrans::findVoucherDate(taxTransPaym.Voucher, taxTransPaym.TransDate);

            // <GTH>
            if (isThaiRegionCode)
            {
                invoiceVoucher  = taxTransPaym.Voucher;
                transDate       = taxTransPaym.TransDate;

                if (vendTrans.TransType == LedgerTransType::PurchAdvanceApplication)
                {
                    TaxTrans taxTransOrigin;
                    VendTrans vendTransOrigin;
                    TaxTransExtensionTH taxTransExtensionTHOrigin;
                    TaxTransExtensionTH taxTransExtensionTH = taxTransPaym.taxTransExtensionTH();
                    
                    select firstonly Voucher, TransDate from taxTransOrigin
                        exists join taxTransExtensionTHOrigin
                            where taxTransExtensionTHOrigin.TaxInvoiceDate == taxTransExtensionTH.TaxInvoiceDate
                                && taxTransExtensionTHOrigin.TaxInvoiceId == taxTransExtensionTH.TaxInvoiceId
                                && taxTransExtensionTHOrigin.TaxTrans == taxTransOrigin.RecId
                        exists join vendTransOrigin
                            where vendTransOrigin.TransDate == taxTransOrigin.TransDate
                                && vendTransOrigin.Voucher == taxTransOrigin.Voucher
                                && vendTransOrigin.TransType != LedgerTransType::PurchAdvanceApplication;
                     
                    invoiceVoucher  = taxTransOrigin.Voucher;
                    transDate       = taxTransOrigin.TransDate;
                }
            }
            // </GTH>
        }

        // <GTH>
        if (isThaiRegionCode)
        {
            remark = vendTrans.displayReasonComment();
            if (!remark)
            {
                remark = ReasonTableRef::find(vendTrans.vendInvoiceJour().vendInvoiceJourExtensionTH().ReasonTableRef).ReasonComment;
            }

            ledgerJournalTrans              = LedgerJournalTrans::findJournalForVoucher(invoiceVoucher, transDate);
            ledgerJournalTransExtensionTH   = ledgerJournalTrans.ledgerJournalTransExtensionTH();

            if (ledgerJournalTransExtensionTH)
            {
                branchNumber            = ledgerJournalTransExtensionTH.BranchNumber;
                taxNatureOfAddress      = ledgerJournalTransExtensionTH.TaxNatureOfAddress;
                taxRegistrationNumber   = ledgerJournalTransExtensionTH.TaxRegNum;
            }
            else
            {
                vendInvoiceJour     = VendInvoiceJour::findFromTaxTrans(invoiceVoucher, transDate);
                vendInvoiceAccount          = vendInvoiceJour.vendTable_InvoiceAccount();
                vendInvoiceJourExtensionTH  = vendInvoiceJour.vendInvoiceJourExtensionTH();

                if (vendInvoiceJourExtensionTH.InvoicePostalAddress)
                {
                    invoiceAddress = LogisticsPostalAddress::findRecId(vendInvoiceJourExtensionTH.InvoicePostalAddress);
                }
                else
                {
                    invoiceAddress = vendInvoiceJour.vendTable_InvoiceAccount().InvoiceAddress();
                }

                dirPartyLocation    = DirPartyLocation::findByPartyLocation(
                vendInvoiceAccount.Party,
                invoiceAddress.Location);
                taxInformation      = TaxInformation_TH::find(dirPartyLocation.Location);
                if (taxInformation)
                {
                    branchNumber            = taxInformation.BranchNumber;
                    taxNatureOfAddress      = taxInformation.TaxNatureOfAddress;
                    taxRegistrationNumber   = TaxRegistration::getTaxRegistrationFromInvoiceJour_TH(vendInvoiceJour).RegistrationNumber;
                }

                CustVendCreditInvoicingJour custVendCreditInvoicingJour = CustVendCreditInvoicingJour::find(vendInvoiceJour.TableId, vendInvoiceJour.RecId);

                if (custVendCreditInvoicingJour)
                {
                    VendInvoiceJour vendInvoiceJourOrig = VendInvoiceJour::findRecId(custVendCreditInvoicingJour.CorrectedInvoiceRecId);
                    origInvoiceNum = vendInvoiceJourOrig.InvoiceId;
                }
            }
        }
        // </GTH>

        if (taxTransExtensionTHPaym.RealVendName)
        {
            name = taxTransExtensionTHPaym.RealVendName;
        }
        else
        {
            name = vendTrans.vendTableName();
        }

        if (taxTransInv.RecId)
        {
            sourceRecId = taxTransInv.SourceRecId;
        }
        else
        {
            sourceRecId = taxTransPaym.SourceRecId;
        }

        switch (taxTransInv.SourceTableId)
        {
            case tableNum(LedgerJournalTrans):
                defaultDimension = LedgerJournalTrans::findRecId(sourceRecId, false).DefaultDimension;
                break;
            default:
                // header level tax branch
                //defaultDimension = VendInvoiceTrans::findRecId(sourceRecId).vendInvoiceJour().DefaultDimension;
                // line level tax branch
                defaultDimension = VendInvoiceTrans::findRecId(sourceRecId).DefaultDimension;
                break;
        }

        taxBranchCode = this.getTaxBranchCode(taxTransInv, defaultDimension, sourceRecId);

        if (!taxBranchCodeParameter || taxBranchCode == taxBranchCodeParameter)
        {
            insertToTmp = true;
        }
        else
        {
            insertToTmp = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBranchCode</Name>
				<Source><![CDATA[
    private TaxBranchCode getTaxBranchCode(TaxTrans _taxTransInv, DimensionDefault _defaultDimension, RecId _sourceRecId)
    {
        TaxBranchCode branchCode = TaxBranchType::getTBDisplayValueByDefaultDimension(_defaultDimension);

        if (!branchCode
            && taxTransInv.SourceTableId == tableNum(LedgerJournalTrans))
        {
            LedgerJournalTrans ledgerJourTrans = LedgerJournalTrans::findRecId(_sourceRecId, false);

            if (ledgerJourTrans.AccountType == LedgerJournalACType::Ledger)
            {
                branchCode = TaxBranchType::getTBDisplayValueByLedgerDimension(ledgerJourTrans.LedgerDimension);
            }
        }

        return branchCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInputOutputVATTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data from the <c>TaxInputOutputVATTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TaxInputOutputVATTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxInputOutputVATTmp))
    ]
    public TaxInputOutputVATTmp getTaxInputOutputVATTmp()
    {
        select taxInputOutputVATTmp;
        return taxInputOutputVATTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the query by passing the UI parameter values to the range values.
    /// </summary>
    /// <param name="_newQuery">
    ///    The base query that is used by the report.
    /// </param>
    /// <returns>
    ///    The updated query, filtered by the UI parameter values.
    /// </returns>
    public Query initQuery(Query _newQuery)
    {
        QueryBuildDataSource    qbds;
        QueryBuildDataSource    qbdsExtensionTH;

        qbdsExtensionTH = _newQuery.dataSourceName(queryDataSourceStr(TaxInputOutputVATReport, TaxTransExtensionTH));
        qbdsExtensionTH.addRange(fieldNum(TaxTransExtensionTH, TaxType)).value(enum2Value(TaxType_TH::Normal));
        qbdsExtensionTH.addRange(fieldNum(TaxTransExtensionTH, ExcludeFromReports)).value(enum2Value(NoYes::No));
        qbdsExtensionTH.addRange(fieldNum(TaxTransExtensionTH, PaymTaxCode)).value(SysQuery::valueEmptyString());

        qbds = _newQuery.dataSourceName(queryDataSourceStr(TaxInputOutputVATReport, TaxTrans));
        qbds.findRange(fieldNum(TaxTrans, TaxDirection)).value(enum2Value(taxDirectionParameter));
        
        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled())
        {
            if (taxDirectionParameter == TaxDirection::OutgoingTax)
            {
                qbds.addRange(fieldNum(TaxTrans, TaxDirection)).value(enum2Value(TaxDirection::OutgoingTax_W));
            }
            else if (taxDirectionParameter == TaxDirection::IncomingTax)
            {
                qbds.addRange(fieldNum(TaxTrans, TaxDirection)).value(enum2Value(TaxDirection::IncomingTax_W));
            }
        }

        qbds.addRange(fieldNum(TaxTrans, RecId)).value(
            strFmt('((%1 == %2) || (%1 == %3) || (%1 == %4) || (%1 == %5))',
                fieldStr(TaxTrans, TaxOrigin),
                enum2int(TaxOrigin::Tax),
                enum2int(TaxOrigin::Transfer),
                enum2int(TaxOrigin::Payment),
                enum2int(TaxOrigin::TaxReversed)));

        SysQuery::findOrCreateRange(qbds, fieldNum(TaxTrans, TransDate)).value(queryRange(startDateParameter, endDateParameter));

        if (salesTaxCodeParameter)
        {
            qbds.findRange(fieldNum(TaxTrans, TaxCode)).value(queryValue(salesTaxCodeParameter));
        }

        if (taxInvoiceNumParameter)
        {
            qbdsExtensionTH.findRange(fieldNum(TaxTransExtensionTH, TaxInvoiceId)).value(queryValue(taxInvoiceNumParameter));
        }

        if (taxInvoiceDateParameter)
        {
            qbdsExtensionTH.findRange(fieldNum(TaxTransExtensionTH, TaxInvoiceDate)).value(queryValue(taxInvoiceDateParameter));
        }

        qbdsExtensionTH.addSortField(fieldNum(TaxTransExtensionTH, TaxInvoiceId));

        return _newQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryForAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits the query
    /// </summary>
    /// <param name="_newQuery">
    /// Orignal query
    /// </param>
    /// <returns>
    /// The new query
    /// </returns>
    public Query initQueryForAdjustment(Query _newQuery)
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        qbds = _newQuery.dataSourceName(queryDataSourceStr(TaxInputOutputVATReport, TaxTrans));
        qbr = SysQuery::findOrCreateRange(qbds, fieldNum(TaxTrans, TransDate));
        
        qbds = qbds.addDataSource(tableNum(CustInvoiceJourAdjustmentView));
        qbds.relations(false);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(TaxTrans, TransDate), fieldNum(CustInvoiceJourAdjustmentView, InvoiceDate));
        qbds.addLink(fieldNum(TaxTrans, Voucher), fieldNum(CustInvoiceJourAdjustmentView, LedgerVoucher));
        if (qbr.value())
        {
            qbds.addRange(fieldNum(CustInvoiceJourAdjustmentView, AdjustDateTime)).value(qbr.value());
            qbr.value('');
        }

        return _newQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryForAdjustmentProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits the query
    /// </summary>
    /// <param name="_newQuery">
    /// Orignal query
    /// </param>
    /// <returns>
    /// The new query
    /// </returns>
    public Query initQueryForAdjustmentProject(Query _newQuery)
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        qbds = _newQuery.dataSourceName(queryDataSourceStr(TaxInputOutputVATReport, TaxTrans));
        qbr = SysQuery::findOrCreateRange(qbds, fieldNum(TaxTrans, TransDate));
        
        qbds = qbds.addDataSource(tableNum(ProjInvoiceJourAdjustmentView));
        qbds.relations(false);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(TaxTrans, TransDate), fieldNum(ProjInvoiceJourAdjustmentView, InvoiceDate));
        qbds.addLink(fieldNum(TaxTrans, Voucher), fieldNum(ProjInvoiceJourAdjustmentView, LedgerVoucher));
        if (qbr.value())
        {
            qbds.addRange(fieldNum(ProjInvoiceJourAdjustmentView, AdjustDateTime)).value(qbr.value());
            qbr.value('');
        }

        return _newQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>TaxInputOutputVATTmp_TH</c> temporary table.
    /// </summary>
    private void insertTmpTable()
    {
        counter++;
        taxInputOutputVATTmp.Counter        = counter;
        taxInputOutputVATTmp.Name           = actualName;
        taxInputOutputVATTmp.TaxBranch      = taxBranchCode;
        taxInputOutputVATTmp.TaxInvoiceDate = taxInvoiceDate;
        taxInputOutputVATTmp.TaxInvoiceNum  = taxInvoiceNum;
        taxInputOutputVATTmp.Voucher        = voucher;
        if (taxDirectionParameter == TaxDirection::OutgoingTax)
        {
            taxInputOutputVATTmp.TaxAmount      = -taxAmountSum;
            taxInputOutputVATTmp.TaxBaseAmount  = -taxBaseAmountSum;
        }
        else
        {
            taxInputOutputVATTmp.TaxAmount      = taxAmountSum;
            taxInputOutputVATTmp.TaxBaseAmount  = taxBaseAmountSum;
        }
        taxInputOutputVATTmp.TotalSum       = taxInputOutputVATTmp.TaxBaseAmount + taxInputOutputVATTmp.TaxAmount;
        taxInputOutputVATTmp.TaxTransRecId  = taxTransRecId;

        // <GTH>
        if (isThaiRegionCode)
        {
            taxInputOutputVATTmp.InvoiceBranch              = actualBranchNumber;
            taxInputOutputVATTmp.InvoiceTaxNatureOfAddress  = actualTaxNatureOfAddress;
            taxInputOutputVATTmp.InvoiceTaxRegNumber        = actualTaxRegistrationNumber;
            taxInputOutputVATTmp.OrigInvoiceNum             = actualOrigInvoiceNum;
            taxInputOutputVATTmp.Remark                     = actualRemark;
            taxInputOutputVATTmp.PostingDate                = postingDate;
            taxInputOutputVATTmp.TaxTransCreatedDateTime    = taxTransCreatedDateTime;
        }
        // </GTH>

        if (taxInputOutputVATTmp.TaxAmount || taxInputOutputVATTmp.TaxBaseAmount)
        {
            taxInputOutputVATList.add(taxInputOutputVATTmp);
        }

        taxInputOutputVATTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic.This method will be called by SSRS at
    ///    runtime.The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        Query                               query;
        Query                               tmpQuery;
        QueryRun                            queryRun;
        QueryBuildDataSource                qbdPaym;
        QueryBuildDataSource                qbdTaxTransExtensionTHPaym;
        QueryBuildDataSource                qbdInv;
        TaxInputOutputVATReportContract     taxInputOutputVATReportContract;
        CustInvoiceJourAdjustmentView       custInvoiceJourAdjustmentView;
        CustInvoiceJourAdjustment           custInvoiceJourAdjustment;
        ProjInvoiceJourAdjustmentView       projInvoiceJourAdjustmentView;
        ProjInvoiceJourAdjustment_TH        projInvoiceJourAdjustment;
        Set                                 adjustmentIds;
        TaxOrigin                           previousTaxOrigin;

        // <GTH>
        isThaiRegionCode = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]);
        // </GTH>

        taxInputOutputVATReportContract = this.parmDataContract() as TaxInputOutputVATReportContract;

        startDateParameter      = taxInputOutputVATReportContract.parmStartDate();
        endDateParameter        = taxInputOutputVATReportContract.parmEndDate();
        taxDirectionParameter   = taxInputOutputVATReportContract.parmTaxDirection();
        taxBranchCodeParameter  = taxInputOutputVATReportContract.parmTaxBranchCode();
        salesTaxCodeParameter   = taxInputOutputVATReportContract.parmSalesTaxCode();
        taxInvoiceDateParameter = taxInputOutputVATReportContract.parmTaxInvoiceDate();
        taxInvoiceNumParameter  = taxInputOutputVATReportContract.parmTaxInvoiceNum();
        detailSummaryParameter  = taxInputOutputVATReportContract.parmDetailSummary();

        query                       = this.initQuery(this.parmQuery());
        queryRun                    = new QueryRun(query);
        qbdPaym                     = query.dataSourceName(queryDataSourceStr(TaxInputOutputVATReport, TaxTrans));
        qbdTaxTransExtensionTHPaym  = query.dataSourceName(queryDataSourceStr(TaxInputOutputVATReport, TaxTransExtensionTH));
        qbdInv                      = query.dataSourceName(queryDataSourceStr(TaxInputOutputVATReport, TaxTransInvoice));
        previousTaxInvoiceId        = '';

        taxInputOutputVATList = new RecordInsertList(tableNum(TaxInputOutputVATTmp), true, true, true, true, true, taxInputOutputVATTmp);

        while (queryRun.next())
        {
            taxTransPaym            = queryRun.getNo(qbdPaym.id());
            taxTransExtensionTHPaym = queryRun.getNo(qbdTaxTransExtensionTHPaym.id());
            taxTransInv             = queryRun.getNo(qbdInv.id());
            this.executeSection();
            if (detailSummaryParameter == DetailSummary::Summary)
            {
                if (((previousTaxInvoiceId != '' && taxTransExtensionTHPaym.TaxInvoiceId != previousTaxInvoiceId) || (actualName != '' && Name != actualName)) ||
                     (taxTransPaym.TaxOrigin == TaxOrigin::TaxReversed && previousTaxOrigin != taxTransPaym.TaxOrigin))
                {
                    if (previousInsertToTmp)
                    {
                        this.insertTmpTable();
                    }
                    taxAmountSum        = 0;
                    taxBaseAmountSum    = 0;
                    previousInsertToTmp = false;
                }

                if (insertToTmp)
                {
                    previousTaxInvoiceId    = taxTransExtensionTHPaym.TaxInvoiceId;
                    previousInsertToTmp     = insertToTmp;
                    previousTaxOrigin       = taxTransPaym.TaxOrigin;

                    taxAmountSum            = taxAmountSum + taxTransPaym.TaxAmount;
                    taxBaseAmountSum        = taxBaseAmountSum + taxTransPaym.TaxBaseAmount;
                    taxInvoiceNum           = taxTransExtensionTHPaym.TaxInvoiceId;
                    taxInvoiceDate          = taxTransExtensionTHPaym.TaxInvoiceDate;
                    this.setVoucherAndTaxTransDates();
                    actualName              = name;
                    taxTransRecId           = taxTransPaym.RecId;
                    // <GTH>
                    if (isThaiRegionCode)
                    {
                        actualBranchNumber          = branchNumber;
                        actualTaxNatureOfAddress    = taxNatureOfAddress;
                        actualTaxRegistrationNumber = taxRegistrationNumber;
                        actualOrigInvoiceNum        = origInvoiceNum;
                        actualRemark                = remark;
                    }
                    // </GTH>
                }
            }
            else
            {
                if (insertToTmp)
                {
                    taxInvoiceNum       = taxTransExtensionTHPaym.TaxInvoiceId;
                    taxInvoiceDate      = taxTransExtensionTHPaym.TaxInvoiceDate;
                    this.setVoucherAndTaxTransDates();
                    actualName          = name;
                    taxTransRecId       = taxTransPaym.RecId;
                    // <GTH>
                    if (isThaiRegionCode)
                    {
                        actualBranchNumber          = branchNumber;
                        actualTaxNatureOfAddress    = taxNatureOfAddress;
                        actualTaxRegistrationNumber = taxRegistrationNumber;
                        actualOrigInvoiceNum        = origInvoiceNum;
                        actualRemark                = remark;
                    }
                    // </GTH>
                    taxAmountSum        = taxTransPaym.TaxAmount;
                    taxBaseAmountSum    = taxTransPaym.TaxBaseAmount;
                    this.insertTmpTable();
                }
            }
        }

        if (detailSummaryParameter == DetailSummary::Summary)
        {
            if (previousInsertToTmp)
            {
                this.insertTmpTable();
            }
        }
        
        // Generate lines for adjustment.
        tmpQuery                = new Query(query);
        query                   = this.initQueryForAdjustment(query);
        queryRun                = new QueryRun(query);
        previousInsertToTmp     = false;
        previousTaxInvoiceId    = '';
        actualName              = '';
        actualRemark            = '';
        adjustmentIds           = new Set(Types::Int64);
        while (queryRun.next())
        {
            taxTransPaym            = queryRun.getNo(qbdPaym.id());
            taxTransExtensionTHPaym = queryRun.getNo(qbdTaxTransExtensionTHPaym.id());
            taxTransInv             = queryRun.getNo(qbdInv.id());

            custInvoiceJourAdjustmentView = queryRun.get(tableNum(CustInvoiceJourAdjustmentView));
            custInvoiceJourAdjustment = CustInvoiceJourAdjustment::findRecId(custInvoiceJourAdjustmentView.CustInvoiceJourAdjustmentRecId);

            if (adjustmentIds.in(custInvoiceJourAdjustment.RecId))
            {
                continue;
            }

            this.executeSection();
            if (detailSummaryParameter == DetailSummary::Summary)
            {
                if (   (previousTaxInvoiceId != '' && taxTransExtensionTHPaym.TaxInvoiceId != previousTaxInvoiceId)
                    || (actualName != '' && custInvoiceJourAdjustmentView.InvoicingName != actualName)
                    || (actualRemark != '' && custInvoiceJourAdjustment.remarkTxt() != actualRemark))
                {
                    if (previousInsertToTmp)
                    {
                        this.insertTmpTable();
                    }
                    taxAmountSum        = 0;
                    taxBaseAmountSum    = 0;
                    previousInsertToTmp = false;
                }

                if (insertToTmp)
                {
                    previousTaxInvoiceId    = custInvoiceJourAdjustmentView.InvoiceId;
                    previousInsertToTmp     = insertToTmp;

                    taxAmountSum            = 0;
                    taxBaseAmountSum        = 0;
                    this.setVoucherAndTaxTransDates();
                    taxInvoiceNum           = custInvoiceJourAdjustment.TaxInvoiceId;
                    taxInvoiceDate          = taxTransExtensionTHPaym.TaxInvoiceDate;
                    postingDate             = DateTimeUtil::date(custInvoiceJourAdjustmentView.AdjustDateTime);
                    taxInputOutputVATTmp.Reference = custInvoiceJourAdjustmentView.Reference;
                    actualRemark            = custInvoiceJourAdjustment.remarkTxt();
                    actualTaxRegistrationNumber = custInvoiceJourAdjustment.InvoiceTaxRegNumber;
                    actualBranchNumber          = custInvoiceJourAdjustment.InvoiceBranch;
                    actualName                  = custInvoiceJourAdjustment.InvoicingName;

                    adjustmentIds.add(custInvoiceJourAdjustment.RecId);
                }
            }
            else
            {
                if (insertToTmp)
                {
                    taxAmountSum            = 0;
                    taxBaseAmountSum        = 0;
                    this.setVoucherAndTaxTransDates();
                    taxInvoiceNum           = custInvoiceJourAdjustment.TaxInvoiceId;
                    taxInvoiceDate          = taxTransExtensionTHPaym.TaxInvoiceDate;
                    postingDate             = DateTimeUtil::date(custInvoiceJourAdjustmentView.AdjustDateTime);
                    taxInputOutputVATTmp.Reference = custInvoiceJourAdjustmentView.Reference;
                    actualRemark            = custInvoiceJourAdjustment.remarkTxt();
                    actualTaxRegistrationNumber = custInvoiceJourAdjustment.InvoiceTaxRegNumber;
                    actualBranchNumber          = custInvoiceJourAdjustment.InvoiceBranch;
                    actualName                  = custInvoiceJourAdjustment.InvoicingName;

                    this.insertTmpTable();

                    adjustmentIds.add(custInvoiceJourAdjustment.RecId);
                }
            }
        }

        if (detailSummaryParameter == DetailSummary::Summary)
        {
            if (previousInsertToTmp)
            {
                this.insertTmpTable();
            }
        }
        
        // Generate lines for project adjustment.
        tmpQuery                = this.initQueryForAdjustmentProject(tmpQuery);
        queryRun                = new QueryRun(tmpQuery);
        previousInsertToTmp     = false;
        previousTaxInvoiceId    = '';
        actualName              = '';
        actualRemark            = '';
        adjustmentIds           = new Set(Types::Int64);
        while (queryRun.next())
        {
            taxTransPaym            = queryRun.getNo(qbdPaym.id());
            taxTransExtensionTHPaym = queryRun.getNo(qbdTaxTransExtensionTHPaym.id());
            taxTransInv             = queryRun.getNo(qbdInv.id());

            projInvoiceJourAdjustmentView = queryRun.get(tableNum(ProjInvoiceJourAdjustmentView));
            projInvoiceJourAdjustment = ProjInvoiceJourAdjustment_TH::findRecId(projInvoiceJourAdjustmentView.ProjInvoiceJourAdjustmentRecId);

            if (adjustmentIds.in(projInvoiceJourAdjustment.RecId))
            {
                continue;
            }

            this.executeSection();
            if (detailSummaryParameter == DetailSummary::Summary)
            {
                if (   (previousTaxInvoiceId != '' && taxTransExtensionTHPaym.TaxInvoiceId != previousTaxInvoiceId)
                    || (actualName != '' && projInvoiceJourAdjustmentView.InvoicingName != actualName)
                    || (actualRemark != '' && projInvoiceJourAdjustment.remarkTxt() != actualRemark))
                {
                    if (previousInsertToTmp)
                    {
                        this.insertTmpTable();
                    }
                    taxAmountSum        = 0;
                    taxBaseAmountSum    = 0;
                    previousInsertToTmp = false;
                }

                if (insertToTmp)
                {
                    previousTaxInvoiceId    = projInvoiceJourAdjustmentView.InvoiceId;
                    previousInsertToTmp     = insertToTmp;

                    taxAmountSum            = 0;
                    taxBaseAmountSum        = 0;
                    this.setVoucherAndTaxTransDates();
                    taxInvoiceNum           = projInvoiceJourAdjustment.TaxInvoiceId;
                    taxInvoiceDate          = taxTransExtensionTHPaym.TaxInvoiceDate;
                    postingDate             = DateTimeUtil::date(projInvoiceJourAdjustmentView.AdjustDateTime);
                    taxInputOutputVATTmp.Reference = projInvoiceJourAdjustmentView.Reference;
                    actualRemark            = projInvoiceJourAdjustment.remarkTxt();
                    actualTaxRegistrationNumber = projInvoiceJourAdjustment.InvoiceTaxRegNumber;
                    actualBranchNumber          = projInvoiceJourAdjustment.InvoiceBranch;
                    actualName                  = projInvoiceJourAdjustment.InvoicingName;

                    adjustmentIds.add(projInvoiceJourAdjustment.RecId);
                }
            }
            else
            {
                if (insertToTmp)
                {
                    taxAmountSum            = 0;
                    taxBaseAmountSum        = 0;
                    this.setVoucherAndTaxTransDates();
                    taxInvoiceNum           = projInvoiceJourAdjustment.TaxInvoiceId;
                    taxInvoiceDate          = taxTransExtensionTHPaym.TaxInvoiceDate;
                    postingDate             = DateTimeUtil::date(projInvoiceJourAdjustmentView.AdjustDateTime);
                    taxInputOutputVATTmp.Reference = projInvoiceJourAdjustmentView.Reference;
                    actualRemark            = projInvoiceJourAdjustment.remarkTxt();
                    actualTaxRegistrationNumber = projInvoiceJourAdjustment.InvoiceTaxRegNumber;
                    actualBranchNumber          = projInvoiceJourAdjustment.InvoiceBranch;
                    actualName                  = projInvoiceJourAdjustment.InvoicingName;

                    this.insertTmpTable();

                    adjustmentIds.add(projInvoiceJourAdjustment.RecId);
                }
            }
        }

        if (detailSummaryParameter == DetailSummary::Summary)
        {
            if (previousInsertToTmp)
            {
                this.insertTmpTable();
            }
        }

        taxInputOutputVATList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucherAndTaxTransDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets voucher ans tax transaction dates to be saved in the temporary table.
    /// </summary>
    private void setVoucherAndTaxTransDates()
    {
        if (taxTransPaym)
        {
            voucher = taxTransPaym.Voucher;
            if (isThaiRegionCode)
            {
                postingDate             = taxTransPaym.TransDate;
                taxTransCreatedDateTime = taxTransPaym.CreatedDateTime;
            }
        }
        else
        {
            voucher = taxTransInv.Voucher;
            if (isThaiRegionCode)
            {
                postingDate             = taxTransInv.TransDate;
                taxTransCreatedDateTime = taxTransInv.CreatedDateTime;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>