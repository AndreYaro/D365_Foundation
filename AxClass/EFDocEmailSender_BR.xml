<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocEmailSender_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible to prepare and send the electronic fiscal document email notification
/// after the document is approved or canceled.
/// </summary>
class EFDocEmailSender_BR
{
    const str InvoiceNumberTAG = '1';
    const str AccessKeyTAG = '2';
    const str ProtocolNumberTAG = '3';

    EFDocument_BR       efDocument;
    DirPartyTable       destination;
    FiscalDocument_BR   fiscalDocument;
    SysEmailTable       emailTemplate;
    boolean             isRunFromBatch;
    boolean             isExecutionSuccessfull;
    private EFDocEmailType_BR efDocEmailType;
    private BusinessDocumentCreationMode creationMode;
    private boolean featureBR00053IsEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>attachFile</Name>
				<Source><![CDATA[
    private boolean attachFile(SysEmailItemId              _nextEmailItemId,
                            SysOutgoingEmailData        _outgoingEmailData,
                            BinData                     _file,
                            FileName                    _filename,
                            SysEmailParameters          _emailParameters,
                            Counter                     _counter)
    {
        Filename                filePath;
        Filename                fileName;
        Filename                fileExtension;

        if (_file.size() < (_emailParameters.MaxEmailAttachmentSize * 1000000))
        {
            [filePath, filename, fileExtension] = Global::fileNameSplit(_filename);
            _outgoingEmailData.EmailItemId       = _nextEmailItemId;
            _outgoingEmailData.DataId            = _counter;
            _outgoingEmailData.EmailDataType     = SysEmailDataType::Attachment;
            _outgoingEmailData.Data              = _file.getData();
            _outgoingEmailData.FileName          = fileName;
            _outgoingEmailData.FileExtension     = fileExtension;
            _outgoingEmailData.insert();

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the file specified exists on the server file system.
    /// </summary>
    /// <param name="_filename">
    /// The file to be checked
    /// </param>
    /// <returns>
    /// True if the file exists on the server, false otherwise.
    /// </returns>
    protected boolean fileExists(Filename _filename)
    {
        return WinAPIServer::fileExists(_filename);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the specified file's size
    /// </summary>
    /// <param name="_filename">
    /// The file to get the size of
    /// </param>
    /// <returns>
    /// The size of the specified file
    /// </returns>
    protected int64 fileSize(Filename _filename)
    {
        System.IO.FileInfo fileInfo = new System.IO.FileInfo(_filename);
        return fileInfo.Length;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationAddresses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the list of destination addresses that XML email should be sent to.
    /// </summary>
    /// <returns>A <c>SetEnumerator</c> of strings with the email addresses.</returns>
    public SetEnumerator getDestinationAddresses()
    {
        SalesCarrier                    salesCarrier;
        recId                           partyRecId;
        LogisticsElectronicAddress      electronicAddress;
        LogisticsElectronicAddressRole  electronicAddressRole;
        LogisticsLocationRole           logisticsLocationRole;
        DirPartyLocation                dirPartyLocation;
        Set                             destinationEmailSet = new Set(Types::String);
        List                            partyRecIdList = new List(Types::Int64);
        ListEnumerator                  partyRecIdEnumerator;

        // Auxiliary inner method to avoid duplications and empty addresses
        void addEmailAddress (Email _email)
        {
            if (_email && !destinationEmailSet.in(_email))
            {
                destinationEmailSet.add(_email);
            }
        }

        if (fiscalDocument.isElectronicConsumerFiscalDoc() ||
            this.getElectronicAddressFromThirdParty())
        {
            addEmailAddress(fiscalDocument.ThirdPartyEmail);
        }
        else
        {
            // Email address are related to DirPartyTable entries.
            // First retrieve party data from fiscal document recipient
            if (fiscalDocument.FiscalDocumentAccountType == CustVendType_BR::Customer)
            {
                partyRecIdList.addEnd(CustTable::find(fiscalDocument.fiscalDocumentAccountNum).Party);
            }
            else if (fiscalDocument.FiscalDocumentAccountType == CustVendType_BR::FiscalEstablishment)
            {
                partyRecIdList.addEnd(DirPartyLocation::findRec(FiscalEstablishment_BR::findById(fiscalDocument.FiscalEstablishment).DirPartyLocation).Party);
            }
            else
            {
                partyRecIdList.addEnd(VendTable::find(fiscalDocument.fiscalDocumentAccountNum).Party);
            }

            // Then we need to send email to carrier, if any.
            if (fiscalDocument.SalesCarrier)
            {
                select firstonly VendAccount_BR from SalesCarrier
                    where SalesCarrier.RecId == fiscalDocument.SalesCarrier;

                if (SalesCarrier.VendAccount_BR)
                {
                    partyRecIdList.addEnd(VendTable::find(SalesCarrier.VendAccount_BR).Party);
                }
            }

            partyRecIdEnumerator = partyRecIdList.getEnumerator();

            while (partyRecIdEnumerator.moveNext())
            {
                partyRecId = partyRecIdEnumerator.current();

                if (fiscalDocument.FiscalDocumentAccountType == CustVendType_BR::FiscalEstablishment)
                {
                    while select locator from electronicAddress
                                        where electronicAddress.Type == LogisticsElectronicAddressMethodType::Email
                                            && electronicAddress.Location == partyRecId
                                            && electronicAddress.IsPrimary == true
                    {
                        addEmailAddress(electronicAddress.Locator);
                    }
                }

                // Tries to find an email address with purpose "invoice"
                while select locator from electronicAddress
                                where electronicAddress.Type == LogisticsElectronicAddressMethodType::Email
                    exists join dirPartyLocation
                                where  DirPartyLocation.Party == partyRecId
                                    && DirPartyLocation.Location == electronicAddress.Location
                    exists join electronicAddressRole
                                where  electronicAddressRole.ElectronicAddress == electronicAddress.RecId
                    exists join logisticsLocationRole
                                where  logisticsLocationRole.RecId == electronicAddressRole.LocationRole
                                    && logisticsLocationRole.Type == LogisticsLocationRoleType::Invoice
                {
                    addEmailAddress(electronicAddress.Locator);
                }
            }
        }

        return destinationEmailSet.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElectronicAddressFromThirdParty</Name>
				<Source><![CDATA[
    private boolean getElectronicAddressFromThirdParty()
    {
        return fiscalDocument.FiscalDocumentAccountType == CustVendType_BR::FiscalEstablishment && 
                fiscalDocument.RefTableId == tableNum(InventTransferJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailLanguageId</Name>
				<Source><![CDATA[
    private LanguageId getEmailLanguageId()
    {
        LanguageId ret;

        switch (fiscalDocument.FiscalDocumentAccountType)
        {
            case CustVendType_BR::Customer:
                ret = CustTable::find(FiscalDocument.FiscalDocumentAccountNum).languageId();
                break;

            case CustVendType_BR::Vendor:
                ret = VendTable::find(FiscalDocument.FiscalDocumentAccountNum).languageId();
                break;

            case CustVendType_BR::FiscalEstablishment:
                ret = CompanyInfo::languageId();
                break;
        }

        if (!ret)
        {
            ret = emailTemplate.DefaultLanguage;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailTemplateForEFDocEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the proprer e-mail template, if it was set up by user.
    /// </summary>
    /// <param name="_event">
    /// The <c>EFDocSchemaType_BR</c> value used to select the correct event
    /// </param>
    /// <returns>
    /// The value of the class variable that holds the e-mail template information.
    /// </returns>
    public SysEmailTable getEmailTemplateForEFDocEvent(EFDocSchemaType_BR _event)
    {
        switch (_event)
        {
            case EFDocSchemaType_BR::CorrectionLetter :
                emailTemplate = SysEmailTable::find(
                                FiscalEstablishment_BR::findById(fiscalDocument.FiscalEstablishment).EFDocEmailEvent
                                );
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return emailTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailTemplateForEFDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the proprer e-mail template according to the Fiscal Document status, if it was set up by user.
    /// </summary>
    /// <returns>
    /// The value of the class variable that holds the e-mail template information.
    /// </returns>
    public SysEmailTable getEmailTemplateForEFDocument()
    {
        FiscalEstablishment_BR fiscalEstablishment = FiscalEstablishment_BR::findById(fiscalDocument.FiscalEstablishment);

        if (FiscalDocument.Status == FiscalDocumentStatus_BR::Approved)
        {
            if (FiscalDocument.isElectronicConsumerFiscalDoc())
            {
                emailTemplate = SysEmailTable::find(fiscalEstablishment.ConsumerEFDocEmailApproved);
            }
            else
            {
            emailTemplate = SysEmailTable::find(fiscalEstablishment.EFDocEmailApproved);
        }
        }
        else if (FiscalDocument.Status == FiscalDocumentStatus_BR::Cancelled)
        {
            emailTemplate = SysEmailTable::find(fiscalEstablishment.EFDocEmailCanceled);
        }
        else
        {
            emailTemplate = null;
        }

        return emailTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPdfFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the complete PDF file path
    /// </summary>
    /// <returns>
    /// The complete path for the PDF file
    /// </returns>
    protected BinData getPdfFile()
    {
        EFDocPdfExport_BR           pdfExport;
        BinData                     pdfBinFile;

        pdfExport = EFDocPdfExport_BR::construct(fiscalDocument);
        pdfBinFile = pdfExport.exportBinary();

        return pdfBinFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTagSubstitutionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a Map that maps TAGS to information about the NF-e to be substitued in email
    /// body or subject.
    /// </summary>
    /// <returns>
    /// A map from TAGs to NF-e information.
    /// </returns>
    protected Map getTagSubstitutionMap()
    {
        Map map = new Map(Types::String, Types::String);
        map.insert(InvoiceNumberTAG, fiscalDocument.FiscalDocumentNumber);
        map.insert(AccessKeyTAG, efDocument.accessKey());
        map.insert(ProtocolNumberTAG, efDocument.ProtocolNumber);

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXMLFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a fiscal document XML file in memory that will be sent to the user
    /// fiscal document recipient as email attachment.
    /// </summary>
    /// <returns>
    /// The path to the generated file.
    /// </returns>
    protected BinData getXMLFile()
    {
        BinData xmlBinFile;

        try
        {
            xmlBinFile = new BinData();
            IEFDocMsgFormat xmlExport;

            switch (efDocument.MessageType)
            {
                case EFDocMessageType_BR::Submit:
                    xmlExport = new EFDocMsgFormat_XmlExport_BR();
                    break;

                case EFDocMessageType_BR::Cancel:
                    if (creationMode == BusinessDocumentCreationMode::EInvoicingService
                        || EFDocumentXML_BR::findByRef(efDocument.RecId).isCancelAsEvent())
                    {
                        xmlExport = new EFEventDocMsgFormat_CancelXmlExport_BR();
                    }
                    else
                    {
                        xmlExport = new EFDocMsgFormat_CancelXmlExport_BR();
                    }

                    break;

                default:
                    return null;
            }

            EFDocMsgStringStream_BR eFDocMsgStringStream = new EFDocMsgStringStream_BR();
            EFiscalDocumentList_BR oneDocument = EFiscalDocumentList_BR::construct();
            oneDocument.add(EFiscalDocument_BR::construct(fiscalDocument));
            EFDocMsgFormat_XmlBase_BR xmlExportBase = xmlExport;
            xmlExportBase.parmCreationMode(creationMode);
            xmlExport.write(eFDocMsgStringStream, oneDocument);

            System.Byte[] bytes = System.Text.Encoding::get_UTF8().GetBytes(eFDocMsgStringStream.toString());
            xmlBinFile.setBinaryData(Binary::constructFromMemoryStream(new System.IO.MemoryStream(bytes)));
        }
        catch
        {
            Error(strfmt("@GLS62925",  efDocument.accessKey()));
        }

        return xmlBinFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EFDocEmailSender_BR</c> object.
    /// </summary>
    /// <param name="_fiscalDocument"><c>FiscalDocument_BR</c> record from which the email will be based.</param>
    /// <param name="_isRunFromBatch">Tells whether the class is being run from batch or not.</param>
    public void new(FiscalDocument_BR _fiscalDocument, boolean _isRunFromBatch = false)
    {
        fiscalDocument  = _fiscalDocument;
        isRunFromBatch  = _isRunFromBatch;
        featureBR00053IsEnabled = BusinessDocumentParameters::isFeatureEnabled([EInvoicingFeaturesForService::BR00053]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreationMode</Name>
				<Source><![CDATA[
    public BusinessDocumentCreationMode parmCreationMode(BusinessDocumentCreationMode _creationMode = creationMode)
    {
        creationMode = _creationMode;
        return creationMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEFDocEmailType</Name>
				<Source><![CDATA[
    public EFDocEmailType_BR parmEFDocEmailType(EFDocEmailType_BR _efDocEmailType = efDocEmailType)
    {
        efDocEmailType = _efDocEmailType;
        return efDocEmailType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEFDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or retrieves the <c>EFDocument_BR</c> record which the email is based on.
    /// </summary>
    /// <param name="_efDocument"><c>EFDocument_BR</c> record which the email is based on.</param>
    /// <returns><c>EFDocument_BR</c> record which the email is based on.</returns>
    public EFDocument_BR parmEFDocument(EFDocument_BR _efDocument = efDocument)
    {
        efDocument = _efDocument;
        return efDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareEmailMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the email message to be sent, inserting it into proper email tables.
    /// </summary>
    /// <param name="_toEmailAddr">
    /// Destinaton email address.
    /// </param>
    /// <param name="_emailTemplate">
    /// SysEmailTable to be used as template.
    /// </param>
    /// <param name="_emailMessage">
    /// SysEmailMessageTable with email message to be sent.
    /// </param>
    /// <param name="_emailParameters">
    /// SysEmailParameters with the parameters to send the email.
    /// </param>
    /// <param name="_xmlBinFile">
    /// XML file in Binary format to be sent as attachment.
    /// </param>
    /// <param name="_pdfBinFile">
    /// PDF file in Binary format to be sent as attachment.
    /// </param>
    /// <returns>A boolean indicating that this process failed.</returns>
    protected boolean prepareEmailMessage(SysEmailRecipients  _toEmailAddr,
                                       SysEmailTable _emailTemplate,
                                       SysEmailMessageTable _emailMessage,
                                       SysEmailParameters _emailParameters,
                                       BinData  _xmlBinFile,
                                       BinData  _pdfBinFile = null)
    {
        List                    list;
        ListEnumerator          enumerator;
        Filename                htmlDecodedFileName;
        container               embeddedBinaryData;
        BinData                 binData;
        SysEmailDescriptionType emailIdentifier;
        Filename                filePath;
        Filename                filename;
        Filename                fileExtension;
        SysOutgoingEmailTable   outgoingEmailTable;
        SysOutgoingEmailData    outgoingEmailData;
        container               data;
        FileIOPermission        fileIOPermission;
        SysEmailItemId          nextEmailItemId;
        SysEmailContents        messageBody;
        Map                     tagSubstitutionMap = this.getTagSubstitutionMap();
        Counter                 counter;

        counter         = 1;
        nextEmailItemId = EventInbox::nextEventId();

        messageBody = _emailMessage.Mail;

        ttsBegin;

        outgoingEmailTable.EmailItemId      = nextEmailItemId;
        outgoingEmailTable.TemplateId       = _emailTemplate.EmailId;
        outgoingEmailTable.IsSystemEmail    = NoYes::No;
        outgoingEmailTable.Sender           = _emailTemplate.SenderAddr;
        outgoingEmailTable.SenderName       = _emailTemplate.SenderName;
        outgoingEmailTable.Recipient        = _toEmailAddr;
        outgoingEmailTable.Origin           = emailIdentifier;

        messageBody = SysEmailMessage::stringExpand(messageBody, tagSubstitutionMap);

        // Resolve references to images
        [outgoingEmailTable.Message, data]  = SysEmailTable::embedImages(messageBody);
        list = List::create(data);
        enumerator = list.getEnumerator();
        while (enumerator.moveNext())
        {
            HTMLDecodedFileName     = SysEmailTable::htmlDecode(enumerator.current());

            fileIOPermission    = new FileIOPermission(htmlDecodedFileName,'r');
            fileIOPermission.assert();

            if (this.fileExists(htmlDecodedFileName) &&
                (this.fileSize(htmlDecodedFileName) < (_emailParameters.MaxEmailAttachmentSize * 1000000)))
            {
                binData = new BinData();

                binData.loadFile(htmlDecodedFileName);
                embeddedBinaryData                  = binData.getData();
                binData.finalize();
                binData = null;

                outgoingEmailData.EmailItemId       = nextEmailItemId;
                outgoingEmailData.DataId            = counter;
                outgoingEmailData.EmailDataType     = SysEmailDataType::Embedded;
                outgoingEmailData.Data              = embeddedBinaryData;
                [filePath, filename, fileExtension] = Global::fileNameSplit(HTMLDecodedFileName);

                outgoingEmailData.FileName      = int642str(nextEmailItemId) + '_' + int2str(counter);
                outgoingEmailData.FileExtension = fileExtension;

                outgoingEmailData.insert();
                counter++;
            }
            else
            {
                CodeAccessPermission::revertAssert();

                ttsAbort;
                return false;
            }

            CodeAccessPermission::revertAssert();
        }

        outgoingEmailTable.Subject      = SysEmailMessage::stringExpand(_emailMessage.Subject, tagSubstitutionMap);
        outgoingEmailTable.Priority     = _emailTemplate.Priority;
        outgoingEmailTable.WithRetries  = true;
        outgoingEmailTable.RetryNum     = 0;
        outgoingEmailTable.UserId       = curuserid();
        outgoingEmailTable.Status       = SysEmailStatus::Unsent;

        // Attach NF-e XML
        if (_xmlBinFile)
        {
            var xmlFileName = efDocument.accessKey() + '.xml';
            if (!this.attachFile(nextEmailItemId, outgoingEmailData, _xmlBinFile, xmlFileName, _emailParameters, counter))
            {
                CodeAccessPermission::revertAssert();

                ttsAbort;
                return false;
            }

            counter++;
        }

        CodeAccessPermission::revertAssert();

        // Attach NF-e PDF DANFE
        if (_pdfBinFile)
        {
            var pdfFileName = efDocument.accessKey() + '.pdf';
            if (!this.attachFile(nextEmailItemId, outgoingEmailData, _pdfBinFile, pdfFileName, _emailParameters, counter))
            {
                CodeAccessPermission::revertAssert();

                ttsAbort;
                return false;
            }
        }

        CodeAccessPermission::revertAssert();

        outgoingEmailTable.LatestStatusChangeDateTime = DateTimeUtil::getSystemDateTime();
        outgoingEmailTable.insert();

        ttsCommit;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepare the email message and send to proper destination addresses.
    /// </summary>
    /// <param name="_destinationAddresses">SetEnumerator with email addresses in string format to
    /// which the email must be sent to.</param>
    /// <returns>A String255 of comment for email history table.</returns>
    public String255 sendEmail(SetEnumerator _destinationAddresses = null)
    {
        return this.sendEmailBySchemaType(_destinationAddresses);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEmailBySchemaType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepare the email message and send to proper destination addresses.
    /// </summary>
    /// <param name="_destinationAddresses">SetEnumerator with email addresses in string format to
    /// which the email must be sent to.</param>
    /// <param name="_schemaType">Type of document that is being sent.</param>
    /// <returns>A String255 of comment for email history table.</returns>
    public String255 sendEmailBySchemaType(SetEnumerator _destinationAddresses = null, EFDocSchemaType_BR _schemaType = EFDocSchemaType_BR::Submit)
    {
        SysEmailMessageTable        emailMessage;
        SysEmailParameters          emailParameters;
        LanguageId                  languageId;
        BinData                     xmlBinFile;
        BinData                     pdfBinFile;
        SetEnumerator               toAddressList;
        boolean                     hasEmailDestination;

        isExecutionSuccessfull = true;

        if (!EFDocState_BR::construct(fiscalDocument, efDocument).canNotifyRecipients())
        {
            return "@SYS4007180";
        }

        emailParameters = SysEmailParameters::find();

        if (!emailTemplate)
        {
            if (!this.getEmailTemplateForEFDocument())
            {
                return "@SYS4007181";
            }
        }

        languageId = this.getEmailLanguageId();
        emailMessage = SysEmailMessageTable::find(emailTemplate.EmailId, languageId);
        if (!emailMessage)
        {
            error(strfmt("@SYS4000463", emailTemplate.EmailId, languageId));
            return strfmt("@SYS4000463", emailTemplate.EmailId, languageId);
        }

        //Generate XML file and get its path
        if (_schemaType != EFDocSchemaType_BR::CorrectionLetter)
        {
            xmlBinFile = this.getXmlFile();
        }

        if ((!xmlBinFile && _schemaType != EFDocSchemaType_BR::CorrectionLetter) ||
            (isRunFromBatch 
                && efDocument.MessageType != EFDocMessageType_BR::Submit
                && !featureBR00053IsEnabled))
        {
            return "@SYS4007182";
        }

        //Retrieves all email recipients.
        if (!_destinationAddresses)
        {
            toAddressList = this.getDestinationAddresses();
        }
        else
        {
            toAddressList = _destinationAddresses;
        }

        if (this.shouldSendPdfDanfe())
        {
            pdfBinFile = this.getPdfFile();

            if (!pdfBinFile)
            {
                return "@SYS4007201";
            }
        }

        while (toAddressList.moveNext() && isExecutionSuccessfull)
        {
            hasEmailDestination = true;
            isExecutionSuccessfull = false;

            System.Diagnostics.Stopwatch stopwatch = System.Diagnostics.Stopwatch::StartNew();
            System.Exception ex;

            try
            {
                isExecutionSuccessfull = this.prepareEmailMessage(toAddressList.current(),
                                     emailTemplate,
                                     emailMessage,
                                     emailParameters,
                                     xmlBinFile,
                                     pdfBinFile);
            }
            catch(ex)
            {
                stopwatch.Stop();
                GlobalizationInstrumentationHelper::featureRunWithPerformance(
                    GlobalizationConstants::FeatureReferenceBR00058,
                    funcName(),
                    GlobalizationInstrumentationHelper::DefaultFeatureVersion,
                    SysCountryRegionCode::countryInfo(),
                    stopwatch.ElapsedMilliseconds,
                    false,
                    false);
                throw ex;
            }
            finally
            {
                stopwatch.Stop();
                GlobalizationInstrumentationHelper::featureRunWithPerformance(
                    GlobalizationConstants::FeatureReferenceBR00058,
                    funcName(),
                    GlobalizationInstrumentationHelper::DefaultFeatureVersion,
                    SysCountryRegionCode::countryInfo(),
                    stopwatch.ElapsedMilliseconds,
                    false,
                    isExecutionSuccessfull);
            }
        }

        if (!hasEmailDestination)
        {
            return "@SYS4007179";
        }

        if (!isExecutionSuccessfull)
        {
            return "@SYS4007183";
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSendPdfDanfe</Name>
				<Source><![CDATA[
    private boolean shouldSendPdfDanfe()
    {
        boolean shouldSendPdf;
        FiscalEstablishment_BR  fiscalEstablishment;
        fiscalEstablishment   = FiscalEstablishment_BR::findById(fiscalDocument.FiscalEstablishment);

        if (fiscalDocument.isElectronicConsumerFiscalDoc())
        {
            shouldSendPdf = fiscalEstablishment.ConsumerEFDocSendPdfInEmail
                && efDocument.MessageType == EFDocMessageType_BR::Submit;
        }
        else
        {
            shouldSendPdf = fiscalEstablishment.EFDocSendPdfInEmail
                && efDocument.MessageType == EFDocMessageType_BR::Submit;
        }

        return shouldSendPdf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EFDocEmailSender_BR</c> object.
    /// </summary>
    /// <param name="_efDocument">The <c>EFDocument_BR</c> record from which the email will be based.</param>
    /// <returns>A <c>EFDocEmailSender_BR</c> object.</returns>
    /// <param name="_isRunFromBatch">Tells whether the class is being run from batch or not.</param>
    public static EFDocEmailSender_BR construct(EFDocument_BR _efDocument, boolean _isRunFromBatch = false)
    {
        EFDocEmailSender_BR emailSender = new EFDocEmailSender_BR(FiscalDocument_BR::find(_efDocument.RefRecId), _isRunFromBatch);
        emailSender.parmEFDocument(_efDocument);
        return emailSender;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromAccessKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EFDocEmailSender_BR</c> object based on access key from the refered document.
    /// </summary>
    /// <param name="_accessKey">The access key of the NF-e from which the email will be based on.</param>
    /// <returns>A <c>EFDocEmailSender_BR</c> object.</returns>
    public static EFDocEmailSender_BR constructFromAccessKey(EFDocAccessKey_BR _accessKey)
    {
        EFDocument_BR efdocument;
        FiscalDocument_BR   fiscalDocument;

        fiscalDocument = FiscalDocument_BR::findByAccessKey(_accessKey);
        efdocument = EFDocument_BR::findByRef(fiscalDocument.RecId);

        return EFDocEmailSender_BR::construct(efdocument);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>