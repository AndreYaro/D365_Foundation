<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanOverlappingColumnValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class responsible for validating a filter value or date overlap between two columns in a budget plan layout.
/// </summary>
public class BudgetPlanOverlappingColumnValidator
{
    private BudgetPlanRecordModificationType    columnRuleModificationType = BudgetPlanRecordModificationType::NoChange;
    private BudgetPlanColumnRule                columnRuleToCheck;
    private BudgetPlanColumn                    currentBudgetPlanColumn;
    private boolean                             showColumnModificationWarning;
    private boolean                             showLayoutElementModificationWarning;
    private boolean                             showLayoutElementOverlapWarning;
    private BudgetPlanLayoutManager             layoutManager;
    BudgetPlanLayoutRecId                       currentBudgetPlanLayoutRecId;
    BudgetCycleRecId                            currentBudgetCycleRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmColumnRuleModificationType</Name>
				<Source><![CDATA[
    public BudgetPlanRecordModificationType parmColumnRuleModificationType(BudgetPlanRecordModificationType _recordModificationType = columnRuleModificationType)
    {
        columnRuleModificationType = _recordModificationType;
        return columnRuleModificationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmColumnRuleToCheck</Name>
				<Source><![CDATA[
    public BudgetPlanColumnRule parmColumnRuleToCheck(BudgetPlanColumnRule _columnRuleToCheck = columnRuleToCheck)
    {
        columnRuleToCheck = _columnRuleToCheck;
        return columnRuleToCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentBudgetPlanColumn</Name>
				<Source><![CDATA[
    public BudgetPlanColumn parmCurrentBudgetPlanColumn(BudgetPlanColumn _currentBudgetPlanColumn = currentBudgetPlanColumn)
    {
        currentBudgetPlanColumn = _currentBudgetPlanColumn;
        return currentBudgetPlanColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentBudgetPlanLayoutRecId</Name>
				<Source><![CDATA[
    public BudgetPlanLayoutRecId parmCurrentBudgetPlanLayoutRecId(BudgetPlanLayoutRecId _currentBudgetPlanLayoutRecId = currentBudgetPlanLayoutRecId)
    {
        currentBudgetPlanLayoutRecId = _currentBudgetPlanLayoutRecId;
        return currentBudgetPlanLayoutRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentBudgetCycleRecId</Name>
				<Source><![CDATA[
    public BudgetCycleRecId parmCurrentBudgetCycleRecId(BudgetCycleRecId _currentBudgetCycleRecId = currentBudgetCycleRecId)
    {
        currentBudgetCycleRecId = _currentBudgetCycleRecId;
        return currentBudgetCycleRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowColumnModificationWarning</Name>
				<Source><![CDATA[
    public boolean parmShowColumnModificationWarning(boolean _showColumnModificationWarning = showColumnModificationWarning)
    {
        showColumnModificationWarning = _showColumnModificationWarning;
        return showColumnModificationWarning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowLayoutElementModificationWarning</Name>
				<Source><![CDATA[
    public boolean parmShowLayoutElementModificationWarning(boolean _showLayoutElementModificationWarning = showLayoutElementModificationWarning)
    {
        showLayoutElementModificationWarning = _showLayoutElementModificationWarning;
        return showLayoutElementModificationWarning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowLayoutElementOverlapWarning</Name>
				<Source><![CDATA[
    public boolean parmShowLayoutElementOverlapWarning(boolean _showLayoutElementOverlapWarning = showLayoutElementOverlapWarning)
    {
        showLayoutElementOverlapWarning = _showLayoutElementOverlapWarning;
        return showLayoutElementOverlapWarning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLayoutManager</Name>
				<Source><![CDATA[
    public BudgetPlanLayoutManager parmLayoutManager(BudgetPlanLayoutManager _layoutManager = layoutManager)
    {
        layoutManager = _layoutManager;
        return layoutManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // Force the use of other parameterized constructor
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanOverlappingColumnValidator construct()
    {
        return new BudgetPlanOverlappingColumnValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverlapExistsAcrossAnyLayoutForColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an overlap exists within any layout for the column specified.
    /// </summary>
    /// <param name = "_request">The <c>BudgetPlanOverlappingColumnValidatorRequest</c> values.</param>
    /// <returns>true if an overlap exists; otherwise, false.</returns>
    public static boolean checkOverlapExistsAcrossAnyLayoutForColumn(BudgetPlanOverlappingColumnValidatorRequest _request)
    {
        boolean hasOverlap;

        if (_request.validate())
        {
            BudgetPlanOverlappingColumnValidator validator;
            validator = BudgetPlanOverlappingColumnValidator::construct();
            validator.parmCurrentBudgetPlanColumn(_request.getCurrentBudgetPlanColumn());
            validator.parmColumnRuleModificationType(_request.getColumnRuleModificationType());
            validator.parmColumnRuleToCheck(_request.getColumnRuleToCheck());
            validator.parmShowColumnModificationWarning(_request.getShowColumnModificationWarning());
            validator.parmShowLayoutElementModificationWarning(_request.getShowLayoutElementModificationWarning());
            validator.parmLayoutManager(BudgetPlanLayoutManager::construct());

            hasOverlap = validator.checkOverlapExistsAcrossAnyLayout();
        }

        return hasOverlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverlapExistsWithinLayoutForColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an overlap exists within the given layout for the column specified.
    /// </summary>
    /// <param name = "_request">The <c>BudgetPlanOverlappingValidatorRequest</c> values.</param>
    /// <returns>true if an overlap exists; otherwise, false.</returns>
    public static boolean checkOverlapExistsWithinLayoutForColumn(BudgetPlanOverlappingValidatorRequest _request)
    {
        boolean hasOverlap;

        if (_request.validate())
        {
            BudgetPlanOverlappingColumnValidator validator;
            validator = BudgetPlanOverlappingColumnValidator::construct();
            validator.parmCurrentBudgetPlanColumn(_request.getCurrentBudgetPlanColumn());
            validator.parmCurrentBudgetPlanLayoutRecId(_request.getBudgetPlanLayoutRecId());
            validator.parmColumnRuleModificationType(_request.getColumnRuleModificationType());
            validator.parmColumnRuleToCheck(_request.getColumnRuleToCheck());
            validator.parmShowColumnModificationWarning(_request.getShowColumnModificationWarning());
            validator.parmShowLayoutElementModificationWarning(_request.getShowLayoutElementModificationWarning());
            validator.parmLayoutManager(BudgetPlanLayoutManager::construct());

            hasOverlap = validator.checkOverlapExistsInLayoutForColumn();
        }

        return hasOverlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverlapExistsWithinLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an overlap exists within the given layout.
    /// </summary>
    /// <param name = "_request">The <c>BudgetPlanOverlappingColumnLayoutValidatorRequest</c> values.</param>
    /// <returns>true if an overlap exists; otherwise, false.</returns>
    public static boolean checkOverlapExistsWithinLayout(BudgetPlanOverlappingLayoutValidatorRequest _request)
    {
        boolean hasOverlap;

        if (_request.validate())
        {
            BudgetPlanOverlappingColumnValidator validator;
            validator = BudgetPlanOverlappingColumnValidator::construct();
            validator.parmCurrentBudgetPlanLayoutRecId(_request.getBudgetPlanLayoutRecId());
            validator.parmCurrentBudgetCycleRecId(_request.getBudgetcycleRecId());
            validator.parmshowLayoutElementOverlapWarning(_request.getShowLayoutElementOverlapWarning());
            validator.parmLayoutManager(BudgetPlanLayoutManager::construct());

            hasOverlap = validator.checkOverlapExistsInLayout();
        }

        return hasOverlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverlapExistsAcrossAnyLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an overlap exists in any associated layouts of the local column.
    /// </summary>
    /// <returns> true, if there is an overlap; otherwise, false. </returns>
    protected boolean checkOverlapExistsAcrossAnyLayout()
    {
        BudgetPlanLayout        layouts;
        BudgetPlanLayoutElement layoutElements;
        boolean                 overlapExists;

        while select RecId from layouts
            exists join layoutElements
                where layoutElements.Layout             == layouts.RecId
                    && layoutElements.ElementDefinition == currentBudgetPlanColumn.RecId
                    && layoutElements.InWorksheet       == NoYes::Yes
        {
            if (this.checkOverlapExistsInLayoutForColumn(layouts.RecId))
            {
                overlapExists = true;
                break;
            }
        }

        return overlapExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverlapExistsInLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an overlap exists within a specific layout.
    /// </summary>
    /// <returns> true, if there is an overlap; otherwise, false. </returns>
    protected boolean checkOverlapExistsInLayout()
    {
        boolean                     hasOverlap;
        BudgetPlanColumn            referenceColumns;
        BudgetPlanColumn            compareColumns;
        BudgetPlanLayoutElement     referenceLayoutElements;
        BudgetPlanLayoutElement     compareLayoutElements;
        BudgetPlanLineEffectiveDate referenceColumnEffectiveDateStart;
        BudgetPlanLineEffectiveDate referenceColumnEffectiveDateEnd;

        while select referenceColumns
            join compareColumns
                where compareColumns.Scenario == referenceColumns.Scenario
                    && compareColumns.RecId   != referenceColumns.RecId
            exists join referenceLayoutElements
                where referenceLayoutElements.ElementDefinition  == referenceColumns.RecId
                    && referenceLayoutElements.InWorksheet       == NoYes::Yes
                    && referenceLayoutElements.Layout            == currentBudgetPlanLayoutRecId
            exists join compareLayoutElements
                where compareLayoutElements.ElementDefinition  == compareColumns.RecId
                    && compareLayoutElements.InWorksheet       == NoYes::Yes
                    && compareLayoutElements.Layout            == currentBudgetPlanLayoutRecId
        {
            [referenceColumnEffectiveDateStart, referenceColumnEffectiveDateEnd] = layoutManager.getEffectiveDates(
                                                                                        referenceColumns,
                                                                                        DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                                                                                        dateMax());

            this.currentBudgetPlanColumn = referenceColumns;

            if (this.columnLengthOverlap(compareColumns, referenceColumns, referenceColumnEffectiveDateStart, referenceColumnEffectiveDateEnd)
                && (this.columnRuleCountCausesOverlap(compareColumns.RecId) || this.overlapInColumns(compareColumns)))
            {
                hasOverlap = true;
                break;
            }
        }

        if (hasOverlap && showLayoutElementOverlapWarning)
        {
            warning(strFmt("@Budget:BudgetPlanning_Config_Validation_OverlappingColumnsInLayout",
                            currentBudgetPlanColumn.Name,
                            referenceColumns.Name,
                            BudgetPlanLayout::find(currentBudgetPlanLayoutRecId).Name));
        }

        return hasOverlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverlapExistsInLayoutForColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an overlap exists for a specific layout and the given attribute state of the class instance.
    /// </summary>
    /// <param name = "_layoutRecId"> The <c>BudgetPlanLayout</c> record ID to check for overlap; optional. </param>
    /// <returns> true, if there is an overlap; otherwise, false. </returns>
    protected boolean checkOverlapExistsInLayoutForColumn(BudgetPlanLayoutRecId _layoutRecId = currentBudgetPlanLayoutRecId)
    {
        boolean                     hasOverlap;
        BudgetPlanColumn            columns;
        BudgetPlanLayoutElement     layoutElements;
        BudgetPlanLineEffectiveDate currentColumnEffectiveDateStart;
        BudgetPlanLineEffectiveDate currentColumnEffectiveDateEnd;

        [currentColumnEffectiveDateStart, currentColumnEffectiveDateEnd] = layoutManager.getEffectiveDates(
                                                                                currentBudgetPlanColumn,
                                                                                DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                                                                                dateMax());
        while select columns
            where columns.Scenario == currentBudgetPlanColumn.Scenario
            exists join layoutElements
                where layoutElements.ElementDefinition  == columns.RecId
                    && layoutElements.ElementDefinition != currentBudgetPlanColumn.RecId
                    && layoutElements.InWorksheet       == NoYes::Yes
                    && layoutElements.Layout            == _layoutRecId
        {
            if (this.columnLengthOverlap(columns, currentBudgetPlanColumn, currentColumnEffectiveDateStart, currentColumnEffectiveDateEnd)
                && (this.columnRuleCountCausesOverlap(columns.RecId) || this.overlapInColumns(columns)))
            {
                hasOverlap = true;
                break;
            }
        }

        if (hasOverlap
            && (showColumnModificationWarning || showLayoutElementModificationWarning))
        {
            this.showWarningMessage(columns, _layoutRecId);
        }

        return hasOverlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnRuleCountCausesOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if either the current column (taking the column rule modification type into account) or a comparing column have will cause an overlap.
    /// </summary>
    /// <param name = "_columnToCompareRecId"> The <c>BudgetPlanColumnRule</c> record ID to find a column rule count. </param>
    /// <returns> true, if either column has zero column rules; otherwise, false. </returns>
    protected boolean columnRuleCountCausesOverlap(BudgetPlanColumnRecId _columnToCompareRecId)
    {
        int currentColumnRuleCount = BudgetPlanOverlappingColumnValidator::getColumnRuleCount(currentBudgetPlanColumn.RecId);
        switch (columnRuleModificationType)
        {
            case BudgetPlanRecordModificationType::Delete:
                currentColumnRuleCount--;
                break;
            case BudgetPlanRecordModificationType::Insert:
                currentColumnRuleCount++;
                break;
        }
        int comparingColumnRuleCount = BudgetPlanOverlappingColumnValidator::getColumnRuleCount(_columnToCompareRecId);

        return (currentColumnRuleCount == 0 || comparingColumnRuleCount == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overlapInColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the column rules of the class instance column and the given column cause an overlap.
    /// </summary>
    /// <param name = "_columnToCompare"> The <c>BudgetPlanColumn</c> record to compare. </param>
    /// <returns> true, if the column rules in both columns cause an overlap; otherwise, false. </returns>
    protected boolean overlapInColumns(BudgetPlanColumn _columnToCompare)
    {
        // Assumption is that an overlap exists until a pair of disconnecting column rules are found between the two columns
        boolean                 overlapExists = true;
        BudgetPlanColumnRule    columnRules;
        BudgetPlanColumnRule    likeColumnRule;
        boolean                 excludeColumnRule = columnRuleModificationType == BudgetPlanRecordModificationType::Delete;

        if (columnRuleModificationType == BudgetPlanRecordModificationType::Update)
        {
            select firstonly likeColumnRule
                where likeColumnRule.Column == _columnToCompare.RecId
                    && likeColumnRule.TableName == columnRuleToCheck.TableName
                    && likeColumnRule.FieldName == columnRuleToCheck.FieldName;

            if (likeColumnRule && !BudgetPlanOverlappingColumnValidator::overlapExistsInColumnRules(columnRuleToCheck, likeColumnRule))
            {
                overlapExists = false;
            }
        }
        else
        {
            while select columnRules
                where columnRules.Column == currentBudgetPlanColumn.RecId
                    && (!excludeColumnRule
                        || columnRules.RecId != columnRuleToCheck.RecId)
                join likeColumnRule
                    where likeColumnRule.TableName == columnRules.TableName
                        && likeColumnRule.FieldName == columnRules.FieldName
                        && likeColumnRule.Column == _columnToCompare.RecId
            {
                if (likeColumnRule && !BudgetPlanOverlappingColumnValidator::overlapExistsInColumnRules(columnRules, likeColumnRule))
                {
                    overlapExists = false;
                    break;
                }
            }
        }

        return overlapExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overlapExistsInColumnRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is an overlap between the two given <c>BudgetPlanColumnRule</c> records.
    /// </summary>
    /// <param name = "_budgetPlanColumnRule"> The <c>BudgetPlanColumnRule</c> record to retrieve field value to compare with. </param>
    /// <param name = "_columnRulesToCompare"> The <c>BudgetPlanColumnRule</c> record ID to retrieve column rule records to compare with. </param>
    /// <returns> true, the two column rules overlap; otherwise, false. </returns>
    protected static boolean overlapExistsInColumnRules(BudgetPlanColumnRule _budgetPlanColumnRule, BudgetPlanColumnRule _columnRulesToCompare)
    {
        // Position is the only field stored as a RecId, need to convert to display value
        boolean fieldIsPosition = _budgetPlanColumnRule.FieldName == fieldStr(HcmPositionForecast, Position);
        BudgetPlanColumnRuleValue columnRuleOneValueOne = fieldIsPosition ? HcmPosition::find(str2Int64(_budgetPlanColumnRule.RightSideValueOne)).PositionId : _budgetPlanColumnRule.RightSideValueOne;
        BudgetPlanColumnRuleValue columnRuleOneValueTwo = fieldIsPosition ? HcmPosition::find(str2Int64(_budgetPlanColumnRule.RightSideValueTwo)).PositionId : _budgetPlanColumnRule.RightSideValueTwo;
        BudgetPlanColumnRuleValue columnRuleTwoValueOne = fieldIsPosition ? HcmPosition::find(str2Int64(_columnRulesToCompare.RightSideValueOne)).PositionId : _columnRulesToCompare.RightSideValueOne;
        BudgetPlanColumnRuleValue columnRuleTwoValueTwo = fieldIsPosition ? HcmPosition::find(str2Int64(_columnRulesToCompare.RightSideValueTwo)).PositionId : _columnRulesToCompare.RightSideValueTwo;

        boolean overlapExists = BudgetPlanOverlappingColumnValidator::expressionsOverlap(
                                    _budgetPlanColumnRule.Operator,
                                    _columnRulesToCompare.Operator,
                                    columnRuleOneValueOne,
                                    columnRuleTwoValueOne,
                                    columnRuleOneValueTwo,
                                    columnRuleTwoValueOne);

        return overlapExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expressionsOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is an overlap based on the boolean logic of two column rules.
    /// </summary>
    /// <param name = "_columnRuleOneOperator"> The <c>BudgetPlanExpressionOperator</c> operator. </param>
    /// <param name = "_columnRuleTwoOperator"> The <c>BudgetPlanExpressionOperator</c> operator. </param>
    /// <param name = "_columnRuleOneValueOne"> The <c>BudgetPlanColumnRuleValue</c> operand. </param>
    /// <param name = "_columnRuleTwoValueOne"> The <c>BudgetPlanColumnRuleValue</c> operand. </param>
    /// <param name = "_columnRuleOneValueTwo"> The <c>BudgetPlanColumnRuleValue</c> operand. </param>
    /// <param name = "_columnRuleTwoValueTwo"> The <c>BudgetPlanColumnRuleValue</c> operand. </param>
    /// <returns> true, if there is an overlap; otherwise, false. </returns>
    protected static boolean expressionsOverlap(
        BudgetPlanExpressionOperator    _columnRuleOneOperator,
        BudgetPlanExpressionOperator    _columnRuleTwoOperator,
        BudgetPlanColumnRuleValue       _columnRuleOneValueOne,
        BudgetPlanColumnRuleValue       _columnRuleTwoValueOne,
        BudgetPlanColumnRuleValue       _columnRuleOneValueTwo,
        BudgetPlanColumnRuleValue       _columnRuleTwoValueTwo)
    {
        boolean expressionsCauseOverlap = false;
        if (_columnRuleOneOperator == _columnRuleTwoOperator)
        {
            if (_columnRuleOneOperator == BudgetPlanExpressionOperator::Between)
            {
                expressionsCauseOverlap = (_columnRuleOneValueOne == _columnRuleTwoValueOne)
                                            && (_columnRuleOneValueTwo == _columnRuleTwoValueTwo);
            }
            else
            {
                expressionsCauseOverlap = (_columnRuleOneValueOne == _columnRuleTwoValueOne);
            }
        }

        if (!expressionsCauseOverlap)
        {
            BudgetPlanColumnRuleExpressionTmp expressionTable;
            expressionTable.Value = _columnRuleOneValueOne;
            expressionTable.insert();

            if (_columnRuleOneValueTwo != BudgetPlanningConstants::emptyString)
            {
                expressionTable.Value = _columnRuleOneValueTwo;
                expressionTable.insert();
            }

            expressionTable.Value = _columnRuleTwoValueOne;
            expressionTable.insert();

            if (_columnRuleTwoValueTwo != BudgetPlanningConstants::emptyString)
            {
                expressionTable.Value = _columnRuleTwoValueTwo;
                expressionTable.insert();
            }

            BudgetPlanOverlappingColumnValidator::deleteOrSelectExpressionRecord(expressionTable, false, _columnRuleOneOperator, _columnRuleOneValueOne, _columnRuleOneValueTwo);
            expressionsCauseOverlap = BudgetPlanOverlappingColumnValidator::deleteOrSelectExpressionRecord(expressionTable, true, _columnRuleTwoOperator, _columnRuleTwoValueOne, _columnRuleTwoValueTwo) != 0;
        }

        return expressionsCauseOverlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOrSelectExpressionRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes complementary <c>BudgetPlanColumnRuleExpressionTmp</c> records or selects valid records based on the given operator and operands(s).
    /// </summary>
    /// <param name = "_expressionRecordScope"> The <c>BudgetPlanColumnRuleExpressionTmp</c> buffer to retain scope of the instantiated in memory table. </param>
    /// <param name = "_selectRecord"> Boolean to determine whether to remove complementary values or to select. </param>
    /// <param name = "_operator"> The <c>BudgetPLanExpressionOperator</c> value. </param>
    /// <param name = "_rightSideValueOne"> The <c>BudgetPlanColumnRuleValue</c> value. </param>
    /// <param name = "_rightSideValueTwo"> The <c>BudgetPlanColumnRuleValue</c> value. </param>
    /// <returns> The <c>BudgetPlanColumnRuleExpressionTmpRecId</c> value if one was selected. </returns>
    protected static BudgetPlanColumnRuleExpressionTmpRecId deleteOrSelectExpressionRecord(
        BudgetPlanColumnRuleExpressionTmp   _expressionRecordScope,
        boolean                             _selectRecord,
        BudgetPlanExpressionOperator        _operator,
        BudgetPlanColumnRuleValue           _rightSideValueOne,
        BudgetPlanColumnRuleValue           _rightSideValueTwo)
    {
        switch (_operator)
        {
            case BudgetPlanExpressionOperator::Equals:
                if (_selectRecord)
                {
                    select firstonly RecId from _expressionRecordScope
                        where _expressionRecordScope.Value == _rightSideValueOne;
                }
                else
                {
                    delete_from _expressionRecordScope
                        where _expressionRecordScope.Value != _rightSideValueOne;
                }
                break;
            case BudgetPlanExpressionOperator::LessThan:
                if (_selectRecord)
                {
                    select firstonly RecId from _expressionRecordScope
                        where _expressionRecordScope.Value < _rightSideValueOne;
                }
                else
                {
                    delete_from _expressionRecordScope
                        where _expressionRecordScope.Value >= _rightSideValueOne;
                }

                break;
            case BudgetPlanExpressionOperator::GreaterThan:
                if (_selectRecord)
                {
                    select firstonly RecId from _expressionRecordScope
                        where _expressionRecordScope.Value > _rightSideValueOne;
                }
                else
                {
                    delete_from _expressionRecordScope
                        where _expressionRecordScope.Value <= _rightSideValueOne;
                }
                break;
            case BudgetPlanExpressionOperator::LessThanEqual:
                if (_selectRecord)
                {
                    select firstonly RecId from _expressionRecordScope
                        where _expressionRecordScope.Value <= _rightSideValueOne;
                }
                else
                {
                    delete_from _expressionRecordScope
                        where _expressionRecordScope.Value > _rightSideValueOne;
                }
                break;
            case BudgetPlanExpressionOperator::GreaterThanEqual:
                if (_selectRecord)
                {
                    select firstonly RecId from _expressionRecordScope
                        where _expressionRecordScope.Value >= _rightSideValueOne;
                }
                else
                {
                    delete_from _expressionRecordScope
                        where _expressionRecordScope.Value < _rightSideValueOne;
                }
                break;
            case BudgetPlanExpressionOperator::Between:
                if (_selectRecord)
                {
                    select firstonly RecId from _expressionRecordScope
                        where _expressionRecordScope.Value >= _rightSideValueOne
                                && _expressionRecordScope.Value <= _rightSideValueTwo;
                }
                else
                {
                    delete_from _expressionRecordScope
                        where _expressionRecordScope.Value < _rightSideValueOne;
                    delete_from _expressionRecordScope
                        where _expressionRecordScope.Value > _rightSideValueTwo;
                }
                break;
        }

        return _expressionRecordScope.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnRuleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the amount of column rules that exist for a given <c>BudgetPlanColumn</c> record.
    /// </summary>
    /// <param name = "_budgetPlanColumn"> The <c>BudgetPlanColumn</c> record ID. </param>
    /// <returns> The number of <c>BudgetPlanColumnRule</c> records that exist. </returns>
    protected static int getColumnRuleCount(BudgetPlanColumnRecId _budgetPlanColumn)
    {
        BudgetPlanColumnRule columnRuleCount;

        select count(RecId) from columnRuleCount
            where columnRuleCount.Column == _budgetPlanColumn;

        return int642int(columnRuleCount.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWarningMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the correct warning message based on the class instance attributes.
    /// </summary>
    /// <param name = "_overlappingColumn"> The <c>BudgetPlanColumn</c> which caused the overlap. </param>
    /// <param name = "_overlappedLayout"> The <c>BudgetPlanLayout</c> which contains the overlapping columns; optional. </param>
    protected void showWarningMessage(BudgetPlanColumn _overlappingColumn, BudgetPlanLayoutRecId _overlappedLayout = 0)
    {
        if (showColumnModificationWarning && showLayoutElementModificationWarning)
        {
            throw error(strfmt("@Budget:IncorrectFunctionUsage", funcname()));
        }

        if (showColumnModificationWarning)
        {
            warning(strFmt("@Budget:OverlappingColumnColumnChangeWarning", _overlappingColumn.Name, BudgetPlanLayout::find(_overlappedLayout).Name));
        }
        else
        {
            warning(strFmt("@Budget:OverlappingColumnLayoutElementChangeWarning", currentBudgetPlanColumn.Name, _overlappingColumn.Name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnLengthOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the columns overlap based on the time periods they cover.
    /// </summary>
    /// <param name = "_column"> The comparison column to use. </param>
    /// <param name = "_currentBudgetPlanColumn"> The reference column to use as current. </param>
    /// <param name = "_currentColumnEffectiveDateStart"> The reference column's effective start date to use. </param>
    /// <param name = "_currentColumnEffectiveDateEnd"> The reference column's effective end date to use. </param>
    /// <returns> true if the columns' lengths overlap; otherwise, false. </returns>
    protected boolean columnLengthOverlap(
        BudgetPlanColumn            _column,
        BudgetPlanColumn            _currentBudgetPlanColumn,
        BudgetPlanLineEffectiveDate _currentColumnEffectiveDateStart,
        BudgetPlanLineEffectiveDate _currentColumnEffectiveDateEnd)
    {
        boolean                     columnsOverlap;
        BudgetCycle                 cycles;
        BudgetPlanLineEffectiveDate cycleStartDate;
        BudgetPlanLineEffectiveDate currentColumnEffectiveDateStart;
        BudgetPlanLineEffectiveDate currentColumnEffectiveDateEnd;
        BudgetPlanLineEffectiveDate otherColumnEffectiveDateStart;
        BudgetPlanLineEffectiveDate otherColumnEffectiveDateEnd;

        if (_column.ColumnPeriodLength == BudgetPlanColumnPeriodLength::Period)
        {
            while select RecId, StartFiscalCalendarPeriod from cycles
                where (!currentBudgetCycleRecId
                        || cycles.RecId == currentBudgetCycleRecId)
            {
                cycleStartDate = cycles.getStartDate();

                [currentColumnEffectiveDateStart, currentColumnEffectiveDateEnd] = layoutManager.getEffectiveDates(
                                                                                        _currentBudgetPlanColumn,
                                                                                        cycleStartDate,
                                                                                        dateMax(),
                                                                                        cycles.RecId);
                [otherColumnEffectiveDateStart, otherColumnEffectiveDateEnd] = layoutManager.getEffectiveDates(
                                                                                    _column,
                                                                                    cycleStartDate,
                                                                                    dateMax(),
                                                                                    cycles.RecId);

                if (this.hasDateOverlap(currentColumnEffectiveDateStart, currentColumnEffectiveDateEnd, otherColumnEffectiveDateStart, otherColumnEffectiveDateEnd))
                {
                    columnsOverlap = true;
                    break;
                }
            }
        }
        else
        {
            [otherColumnEffectiveDateStart, otherColumnEffectiveDateEnd] = layoutManager.getEffectiveDates(
                                                                                _column,
                                                                                DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                                                                                dateMax());

            columnsOverlap = this.hasDateOverlap(_currentColumnEffectiveDateStart, _currentColumnEffectiveDateEnd, otherColumnEffectiveDateStart, otherColumnEffectiveDateEnd);
        }

        return columnsOverlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDateOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified dates overlap.
    /// </summary>
    /// <param name = "_currentColumnEffectiveDateStart"> The reference column start date. </param>
    /// <param name = "_currentColumnEffectiveDateEnd"> The reference column end date. </param>
    /// <param name = "_otherColumnEffectiveDateStart"> The comparison column start date. </param>
    /// <param name = "_otherColumnEffectiveDateEnd"> The comparison column end date. </param>
    /// <returns> true if the dates overlap; otherwise, false. </returns>
    protected boolean hasDateOverlap(
        BudgetPlanLineEffectiveDate _currentColumnEffectiveDateStart,
        BudgetPlanLineEffectiveDate _currentColumnEffectiveDateEnd,
        BudgetPlanLineEffectiveDate _otherColumnEffectiveDateStart,
        BudgetPlanLineEffectiveDate _otherColumnEffectiveDateEnd)
    {
        return (_currentColumnEffectiveDateStart >= _otherColumnEffectiveDateStart && _currentColumnEffectiveDateStart <= _otherColumnEffectiveDateEnd)
                || (_currentColumnEffectiveDateStart <= _otherColumnEffectiveDateStart && _currentColumnEffectiveDateEnd >= _otherColumnEffectiveDateStart);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>