<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedReinfEventCreate_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBSpedReinfEventCreate_BR</c> class creates SPED Reinf events
/// for subsequent sending to the Brazilian authority.
/// </summary>
class FBSpedReinfEventCreate_BR extends RunBaseBatch implements BatchRetryable
{
    RefRecId                bookingPeriod;
    FBSpedReinfEventType_BR eventType;

    Map                     eventMap;
    QueryRun                queryRun;
    QueryRun                queryRunNFO;
    Set                     eventsCreated,
                            eventsUpdated;

    private boolean isCreateOrUpdateEventAction;

    const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the last user choices can be saved and restored.
    /// </summary>
    /// <returns>
    /// true, if the last user choices can be saved and restored; false, otherwise.
    /// </returns>
    protected boolean canSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateEvent</Name>
				<Source><![CDATA[
    private FBSpedReinfEvent_BR findOrCreateEvent(
        FiscalDocumentAccountNumber_BR  _fiscalDocumentAccountNum,
        RecId                           _bookingPeriodRecId)
    {
        FBSpedReinfEvent_BR     spedReinfEvent;
    
        if (eventMap.exists([ _fiscalDocumentAccountNum, _bookingPeriodRecId ]))
        {
            spedReinfEvent = FBSpedReinfEvent_BR::findRecId(eventMap.lookup([ _fiscalDocumentAccountNum, _bookingPeriodRecId ]));
        }
        else
        {
            spedReinfEvent = FBSpedReinfEvent_BR::findAccountPeriodType(_fiscalDocumentAccountNum, _bookingPeriodRecId, eventType);
            if (spedReinfEvent)
            {
                eventsUpdated.add(spedReinfEvent.RecId);
            }
            else
            {
                spedReinfEvent.clear();
                spedReinfEvent.initValue();
                spedReinfEvent.Id                 = NumberSeq::newGetNum(NumberSeqReference::findReference(extendedTypeNum(FBSpedReinfEventId_BR))).num();
                spedReinfEvent.FBBookingPeriod_BR = _bookingPeriodRecId;
                spedReinfEvent.Type               = eventType;
                spedReinfEvent.AccountNum         = _fiscalDocumentAccountNum;
                spedReinfEvent.TransDate          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                spedReinfEvent.insert();

                eventsCreated.add(spedReinfEvent.RecId);
            }

            eventMap.insert([ _fiscalDocumentAccountNum, _bookingPeriodRecId ], spedReinfEvent.RecId);
        }

        return spedReinfEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocDirectionRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fiscal document direction for the event type.
    /// </summary>
    /// <returns>
    /// The fiscal document direction for the event type.
    /// </returns>
    protected str fiscalDocDirectionRange()
    {
        str ret;

        switch (eventType)
        {
            case FBSpedReinfEventType_BR::R2010:
            case FBSpedReinfEventType_BR::R4010:
            case FBSpedReinfEventType_BR::R4020:
            case FBSpedReinfEventType_BR::R4040:
                ret = SysQuery::value(FiscalDocDirection_BR::Incoming);
                break;

            case FBSpedReinfEventType_BR::R2020:
            case FBSpedReinfEventType_BR::R4080:
                ret = SysQuery::value(FiscalDocDirection_BR::Outgoing);
                break;

            default :
                ret = queryRangeConcat(SysQuery::value(FiscalDocDirection_BR::Incoming), FiscalDocDirection_BR::Outgoing);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataToUpdate</Name>
				<Source><![CDATA[
    private Set getDataToUpdate(FBSpedReinfEventType_BR _eventType = eventType)
    {
        Set dataToUpdate = new Set(Types::Container);

        FBBookingPeriod_BR      fbBookingPeriod;
        FiscalEstablishment_BR  fiscalEstablishment;
        FiscalOrganization_BR   rootFiscalOrganization;
        FBBookingPeriod_BR      branchBookingPeriod;

        FiscalDocument_BR       fiscalDocument;
        FiscalDocumentLine_BR   fiscalDocumentLine;
        FBNonFiscalOperation_BR nonFiscalOperation;
        QueryBuildDataSource    qbdsBookingPeriod;
        QueryBuildDataSource    qbdsBookingPeriodNFO;

        fbBookingPeriod         = FBBookingPeriod_BR::find(bookingPeriod);
        fiscalEstablishment     = fbBookingPeriod.fiscalEstablishment();
        rootFiscalOrganization  = FiscalOrganization_BR::find(fiscalEstablishment.FiscalOrganization_BR);

        boolean eventTypeSupportsFO = _eventType != FBSpedReinfEventType_BR::R4040;
        boolean eventTypeSupportsNFO = _eventType == FBSpedReinfEventType_BR::R4010
            || _eventType == FBSpedReinfEventType_BR::R4020
            || _eventType == FBSpedReinfEventType_BR::R4040;

        if (eventTypeSupportsFO)
        {
            if (!queryRun || _eventType != eventType)
            {
                queryRun = this.queryRunInitDefaultSpecificEventType(_eventType);
            }

            qbdsBookingPeriod = queryRun.query().dataSourceTable(tableNum(FBBookingPeriodFiscalDocument_BR));
        }

        if (eventTypeSupportsNFO)
        {
            if (!queryRunNFO || _eventType != eventType)
            {
                queryRunNFO = this.queryRunNFOInitDefaultSpecificEventType(_eventType);
            }

            qbdsBookingPeriodNFO = queryRunNFO.query().dataSourceTable(tableNum(FBBookingPeriod_BR));
        }

        while select crossCompany branchBookingPeriod
            where branchBookingPeriod.PeriodMonth               == fbBookingPeriod.PeriodMonth
                && branchBookingPeriod.PeriodYear               == fbBookingPeriod.PeriodYear
        exists join fiscalEstablishment
            where fiscalEstablishment.FiscalOrganization_BR     == rootFiscalOrganization.RecId
                && fiscalEstablishment.FiscalEstablishmentId    == branchBookingPeriod.FiscalEstablishmentId
                && fiscalEstablishment.dataAreaId               == branchBookingPeriod.FiscalEstablishmentDataArea
        {
            if (eventTypeSupportsFO)
            {
                queryRun.query().addCompanyRange(branchBookingPeriod.FiscalEstablishmentDataArea);
                findOrCreateRange_W(qbdsBookingPeriod, fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR), SysQuery::value(branchBookingPeriod.RecId)).status(RangeStatus::Locked);
                queryRun.reset();

                while (queryRun.next())
                {
                    fiscalDocument = queryRun.get(tableNum(FiscalDocument_BR));
                    fiscalDocumentLine = queryRun.get(tableNum(FiscalDocumentLine_BR));

                    dataToUpdate.add([fiscalDocument.RecId,
                        fiscalDocumentLine.RecId,
                        fiscalDocument.FiscalDocumentAccountNum,
                        branchBookingPeriod.RecId,
                        fiscalDocument.dataAreaId,
                        0]);
                }
            }

            if (eventTypeSupportsNFO)
            {
                queryRunNFO.query().addCompanyRange(branchBookingPeriod.FiscalEstablishmentDataArea);
                findOrCreateRange_W(qbdsBookingPeriodNFO, fieldNum(FBBookingPeriod_BR, RecId), SysQuery::value(branchBookingPeriod.RecId)).status(RangeStatus::Locked);
                queryRunNFO.reset();

                while (queryRunNFO.next())
                {
                    nonFiscalOperation = queryRunNFO.get(tableNum(FBNonFiscalOperation_BR));

                    if (!FBSpedReinfEventCreateNoPisCofinsTaxTrans_BRFlight::instance().isEnabled()
                        || nonFiscalOperation.hasTaxTransactionsOfType([TaxType_BR::IRRF])
                        || nonFiscalOperation.hasTaxWithholdTransactionsOfType([
                            TaxWithholdType_BR::CSLL,
                            TaxWithholdType_BR::PIS,
                            TaxWithholdType_BR::COFINS,
                            TaxWithholdType_BR::PCC]))
                    {
                        dataToUpdate.add([0,
                            0,
                            nonFiscalOperation.accountNum(),
                            branchBookingPeriod.RecId,
                            nonFiscalOperation.FiscalEstablishmentDataArea,
                            nonFiscalOperation.RecId]);
                    }
                }
            }
        }

        return dataToUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    /// If no record can be found or the <c>unpack</c> method returns false, <c>initParmDefault</c> method
    /// will be called. Normally, this method should not be overridden.
    /// </remarks>
    public void getLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters()
    {
        eventMap = new Map(Types::Container, Types::Int64);

        eventsCreated = new Set(Types::Int64);
        eventsUpdated = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        this.queryRunInitDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        this.initParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [
            CurrentVersion,
            bookingPeriod,
            eventType,
            queryRun ? queryRun.pack() : conNull()];

        packed = SysPackExtensions::appendVariableToPack(
            packed,
            classStr(FBSpedReinfEventCreate_BR),
            varStr(queryRunNFO),
            queryRunNFO ? queryRunNFO.pack() : conNull());

        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookingPeriod</Name>
				<Source><![CDATA[
    public RefRecId parmBookingPeriod(RefRecId _bookingPeriod = bookingPeriod)
    {
        bookingPeriod = _bookingPeriod;
        return bookingPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEventType</Name>
				<Source><![CDATA[
    public FBSpedReinfEventType_BR parmEventType(FBSpedReinfEventType_BR _eventType = eventType)
    {
        eventType = _eventType;
        return eventType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCreateOrUpdateEventAction</Name>
				<Source><![CDATA[
    public boolean parmIsCreateOrUpdateEventAction(boolean _isCreateOrUpdateEventAction = isCreateOrUpdateEventAction)
    {
        isCreateOrUpdateEventAction = _isCreateOrUpdateEventAction;
        return isCreateOrUpdateEventAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    private void process()
    {
        Set                                 dataToUpdate = this.getDataToUpdate();
        SetEnumerator                       en = dataToUpdate.getEnumerator();

        FiscalDocumentAccountNumber_BR      fdAccountNum;
        RecId                               fdRecId,
                                            fdLineRecId,
                                            bookingPeriodRecId,
                                            nfoRecId;
        DataAreaId                          fdDataAreaId;

        FBSpedReinfEventFiscalDocument_BR       eventFD;
        FBSpedReinfEventNonFiscalOperation_BR   eventNFO;
        FBSpedReinfEvent_BR                     event;

        while (en.moveNext())
        {
            [fdRecId, fdLineRecId, fdAccountNum, bookingPeriodRecId, fdDataAreaId, nfoRecId] = en.current();

            changeCompany(fdDataAreaId)
            {
                event = this.findOrCreateEvent(fdAccountNum, bookingPeriodRecId);

                if (fdRecId || fdLineRecId)
                {
                    eventFD.clear();
                    eventFD.initValue();
                    eventFD.FBSpedReinfEvent_BR = event.RecId;
                    eventFD.FiscalDocument_BR = fdRecId;
                    eventFD.FiscalDocumentLine_BR = fdLineRecId;
                    eventFD.insert();
                }

                if (nfoRecId)
                {
                    eventNFO.clear();
                    eventNFO.initValue();
                    eventNFO.FBSpedReinfEvent_BR = event.RecId;
                    eventNFO.NonFiscalOperation_BR = nfoRecId;
                    eventNFO.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCreatedEvents</Name>
				<Source><![CDATA[
    private void processCreatedEvents()
    {
        SetEnumerator       en = eventsCreated.getEnumerator();
        FBSpedReinfEvent_BR event;

        while (en.moveNext())
        {
            event = FBSpedReinfEvent_BR::findRecId(en.current());
            info(strFmt("@SpedReinf_AS:EventWasCreated", event.Id));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUpdatedEvents</Name>
				<Source><![CDATA[
    private void processUpdatedEvents()
    {
        SetEnumerator       en = eventsUpdated.getEnumerator();
        FBSpedReinfEvent_BR event;

        while (en.moveNext())
        {
            event       = FBSpedReinfEvent_BR::findRecId(en.current());
            info(strFmt("@SpedReinf_AS:EventWasUpdated", event.Id));

            event.postUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInitDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default query.
    /// </summary>
    /// <returns>
    /// The default query.
    /// </returns>
    protected Query queryInitDefault()
    {
        return this.queryInitDefaultSpecificEventType(eventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryNFOInitDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default query.
    /// </summary>
    /// <returns>
    /// The default query.
    /// </returns>
    protected Query queryNFOInitDefault()
    {
        return this.queryNFOInitDefaultSpecificEventType(eventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInitDefaultSpecificEventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default query.
    /// </summary>
    /// <param name="_eventType">
    /// The event type.
    /// </param>
    /// <returns>
    /// The default query.
    /// </returns>
    protected Query queryInitDefaultSpecificEventType(FBSpedReinfEventType_BR _eventType = eventType)
    {
        Query query = new Query();
        query.allowCrossCompany(true);

        QueryBuildDataSource qbdsBookingPeriodFD = query.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));

        QueryBuildDataSource qbdsFD = qbdsBookingPeriodFD.addDataSource(tableNum(FiscalDocument_BR));
        qbdsFD.relations(true);
        qbdsFD.fetchMode(QueryFetchMode::One2One);
        qbdsFD.joinMode(JoinMode::InnerJoin);
        findOrCreateRange_W(qbdsFD, fieldNum(FiscalDocument_BR, Direction), this.fiscalDocDirectionRange()).status(RangeStatus::Locked);
        findOrCreateRange_W(qbdsFD, fieldNum(FiscalDocument_BR, FiscalDocumentAccountNum));
        qbdsFD.addOrderByField(fieldNum(FiscalDocument_BR, FiscalDocumentAccountNum), SortOrder::Ascending);

        QueryBuildDataSource qbdsFDLine = qbdsFD.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbdsFDLine.relations(true);
        qbdsFDLine.fetchMode(QueryFetchMode::One2One);
        qbdsFDLine.joinMode(JoinMode::InnerJoin);
        qbdsFDLine.addRange(FieldNum(FiscalDocumentLine_BR, CFOP));

        switch (_eventType)
        {
            case FBSpedReinfEventType_BR::R2010:
            case FBSpedReinfEventType_BR::R2020:
                findOrCreateRange_W(qbdsBookingPeriodFD, fieldNum(FBBookingPeriodFiscalDocument_BR, HasInss), int2str(enum2int(NoYes::Yes))).status(RangeStatus::Locked);
                findOrCreateRange_W(qbdsFD, fieldNum(FiscalDocument_BR, Model), SysQuery::value(FiscalBooksConstants_BR::FiscalDocModel_SE));

                if (_eventType == FBSpedReinfEventType_BR::R2010)
                {
                    QueryBuildDataSource qbdsVT;
                    qbdsVT = qbdsFD.addDataSource(tableNum(VendTable));
                    qbdsVT.joinMode(JoinMode::ExistsJoin);
                    qbdsVT.relations(false);
                    qbdsVT.addLink(fieldNum(FiscalDocument_BR, FiscalDocumentAccountNum), fieldNum(VendTable, AccountNum));

                    QueryBuildDataSource qbdsDP = qbdsVT.addDataSource(tableNum(DirPartyTable));
                    qbdsDP.joinMode(JoinMode::ExistsJoin);
                    qbdsDP.relations(true);
                    qbdsDP.addRange(fieldNum(DirPartyTable, InstanceRelationType)).value(SysQuery::value(tableNum(DirOrganization)));
                }

                break;

            case FBSpedReinfEventType_BR::R2055:
                QueryBuildDataSource qbdsView = qbdsFDLine.addDataSource(tableNum(FBSPEDReinfR2055View_BR));
                qbdsView.joinMode(JoinMode::ExistsJoin);
                qbdsView.addLink(fieldNum(FiscalDocumentLine_BR, RecId), fieldNum(FBSPEDReinfR2055View_BR, FiscalDocumentLineRecId));

                findOrCreateRange_W(qbdsView, fieldNum(FBSPEDReinfR2055View_BR, HasRatTax),
                    strFmt('((%1 == %3) || (%2 == %3))',
                        fieldStr(FBSPEDReinfR2055View_BR, HasRatTax),
                        fieldStr(FBSPEDReinfR2055View_BR, HasSenarTax),
                        enum2int(NoYes::Yes)));
                break;

            case FBSpedReinfEventType_BR::R4010:
            case FBSpedReinfEventType_BR::R4020:
            case FBSpedReinfEventType_BR::R4080:
                findOrCreateRange_W(qbdsBookingPeriodFD, fieldNum(FBBookingPeriodFiscalDocument_BR, HasIrrf), int2str(enum2int(NoYes::Yes))).status(RangeStatus::Locked);

                QueryBuildDataSource qbdsBP = qbdsBookingPeriodFD.addDataSource(tableNum(FBBookingPeriod_BR));
                qbdsBP.relations(true);
                qbdsBP.fetchMode(QueryFetchMode::One2One);
                qbdsBP.joinMode(JoinMode::InnerJoin);

                FBBookingPeriod_BR fbBookingPeriod = FBBookingPeriod_BR::find(bookingPeriod);
                findOrCreateRange_W(qbdsBP, fieldNum(FBBookingPeriod_BR, PeriodMonth), SysQuery::value(fbBookingPeriod.PeriodMonth)).status(RangeStatus::Locked);
                findOrCreateRange_W(qbdsBP, fieldNum(FBBookingPeriod_BR, PeriodYear), SysQuery::value(fbBookingPeriod.PeriodYear)).status(RangeStatus::Locked);

                findOrCreateRange_W(qbdsFD, fieldNum(FiscalDocument_BR, Model), SysQuery::value(FiscalBooksConstants_BR::FiscalDocModel_SE));

                if (_eventType == FBSpedReinfEventType_BR::R4080)
                {
                    QueryBuildDataSource qbdsCT;
                    qbdsCT = qbdsFD.addDataSource(tableNum(CustTable));
                    qbdsCT.joinMode(JoinMode::ExistsJoin);
                    qbdsCT.relations(false);
                    qbdsCT.addLink(fieldNum(FiscalDocument_BR, FiscalDocumentAccountNum), fieldNum(CustTable, AccountNum));

                    QueryBuildDataSource qbdsDP = qbdsCT.addDataSource(tableNum(DirPartyTable));
                    qbdsDP.joinMode(JoinMode::ExistsJoin);
                    qbdsDP.relations(true);

                    qbdsDP.addRange(fieldNum(DirPartyTable, InstanceRelationType)).value(SysQuery::value(tableNum(DirOrganization)));
                }
                else
                {
                    QueryBuildDataSource qbdsVT;
                    qbdsVT = qbdsFD.addDataSource(tableNum(VendTable));
                    qbdsVT.joinMode(JoinMode::ExistsJoin);
                    qbdsVT.relations(false);
                    qbdsVT.addLink(fieldNum(FiscalDocument_BR, FiscalDocumentAccountNum), fieldNum(VendTable, AccountNum));

                    findOrCreateRange_W(qbdsVT, fieldNum(VendTable, IsUnidentifiedBenef_BR), SysQuery::value(NoYes::No)).status(RangeStatus::Locked);

                    QueryBuildDataSource qbdsDP = qbdsVT.addDataSource(tableNum(DirPartyTable));
                    qbdsDP.joinMode(JoinMode::ExistsJoin);
                    qbdsDP.relations(true);

                    if (_eventType == FBSpedReinfEventType_BR::R4020)
                    {
                        qbdsDP.addRange(fieldNum(DirPartyTable, InstanceRelationType)).value(SysQuery::value(tableNum(DirOrganization)));
                    }
                    else
                    {
                        qbdsDP.addRange(fieldNum(DirPartyTable, InstanceRelationType)).value(SysQuery::value(tableNum(DirPerson)));
                    }
                }
                break;
        }

        QueryBuildDataSource qbdsSpedReinfEventFD = qbdsFDLine.addDataSource(tableNum(FBSpedReinfEventFiscalDocument_BR));
        qbdsSpedReinfEventFD.relations(true);
        qbdsSpedReinfEventFD.joinMode(JoinMode::NoExistsJoin);
        qbdsSpedReinfEventFD.allowAdd(QueryAllowAdd::NoFields);

        if (isCreateOrUpdateEventAction && _eventType)
        {
            QueryBuildDataSource qbdsSpedReinfEvent = qbdsSpedReinfEventFD.addDataSource(tableNum(FBSpedReinfEvent_BR));
            qbdsSpedReinfEvent.relations(true);
            qbdsSpedReinfEvent.joinMode(JoinMode::ExistsJoin);
            findOrCreateRange_W(qbdsSpedReinfEvent, fieldNum(FBSpedReinfEvent_BR, Type), SysQuery::value(_eventType)).status(RangeStatus::Locked);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryNFOInitDefaultSpecificEventType</Name>
				<Source><![CDATA[
    protected Query queryNFOInitDefaultSpecificEventType(FBSpedReinfEventType_BR _eventType = eventType)
    {
        Query query = new Query();

        switch (_eventType)
        {
            case FBSpedReinfEventType_BR::R4010:
            case FBSpedReinfEventType_BR::R4020:
            case FBSpedReinfEventType_BR::R4040:
                query.allowCrossCompany(true);
                FBBookingPeriod_BR fbBookingPeriod = FBBookingPeriod_BR::find(bookingPeriod);

                QueryBuildDataSource qbdsBP = query.addDataSource(tableNum(FBBookingPeriod_BR));
                findOrCreateRange_W(qbdsBP, fieldNum(FBBookingPeriod_BR, PeriodMonth), SysQuery::value(fbBookingPeriod.PeriodMonth)).status(RangeStatus::Locked);
                findOrCreateRange_W(qbdsBP, fieldNum(FBBookingPeriod_BR, PeriodYear), SysQuery::value(fbBookingPeriod.PeriodYear)).status(RangeStatus::Locked);

                QueryBuildDataSource qbdsNFO = qbdsBP.addDataSource(tableNum(FBNonFiscalOperation_BR));
                qbdsNFO.relations(true);
                qbdsNFO.fetchMode(QueryFetchMode::One2One);
                qbdsNFO.joinMode(JoinMode::InnerJoin);
                findOrCreateRange_W(qbdsNFO, fieldNum(FBNonFiscalOperation_BR, AccountType), SysQuery::value(LedgerJournalACType::Vend)).status(RangeStatus::Locked);

                QueryBuildDataSource qbdsDAVC = qbdsNFO.addDataSource(tableNum(DimensionAttributeValueCombination));
                qbdsDAVC.relations(true);
                qbdsDAVC.fetchMode(QueryFetchMode::One2One);
                qbdsDAVC.joinMode(JoinMode::InnerJoin);

                QueryBuildDataSource qbdsVT = qbdsDAVC.addDataSource(tableNum(VendTable));
                qbdsVT.relations(false);
                qbdsVT.fetchMode(QueryFetchMode::One2One);
                qbdsVT.joinMode(JoinMode::InnerJoin);
                qbdsVT.addLink(fieldNum(DimensionAttributeValueCombination, DisplayValue), fieldNum(VendTable, AccountNum));

                if (_eventType == FBSpedReinfEventType_BR::R4040)
                {
                    findOrCreateRange_W(qbdsVT, fieldNum(VendTable, IsUnidentifiedBenef_BR), SysQuery::value(NoYes::Yes)).status(RangeStatus::Locked);
                }
                else
                {
                    findOrCreateRange_W(qbdsVT, fieldNum(VendTable, IsUnidentifiedBenef_BR), SysQuery::value(NoYes::No)).status(RangeStatus::Locked);

                    QueryBuildDataSource qbdsDP = qbdsVT.addDataSource(tableNum(DirPartyTable));
                    qbdsDP.joinMode(JoinMode::ExistsJoin);
                    qbdsDP.relations(true);

                    if (_eventType == FBSpedReinfEventType_BR::R4020)
                    {
                        qbdsDP.addRange(fieldNum(DirPartyTable, InstanceRelationType)).value(SysQuery::value(tableNum(DirOrganization)));
                    }
                    else
                    {
                        qbdsDP.addRange(fieldNum(DirPartyTable, InstanceRelationType)).value(SysQuery::value(tableNum(DirPerson)));
                    }
                }

                QueryBuildDataSource qbdsSpedReinfEventNFO = qbdsNFO.addDataSource(tableNum(FBSpedReinfEventNonFiscalOperation_BR));
                qbdsSpedReinfEventNFO.relations(true);
                qbdsSpedReinfEventNFO.joinMode(JoinMode::NoExistsJoin);
                break;
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return eventType != FBSpedReinfEventType_BR::R4040 ? queryRun : queryRunNFO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunInitDefault</Name>
				<Source><![CDATA[
    protected QueryRun queryRunInitDefault()
    {
        return new QueryRun(this.queryInitDefault());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunNFOInitDefault</Name>
				<Source><![CDATA[
    protected QueryRun queryRunNFOInitDefault()
    {
        return new QueryRun(this.queryNFOInitDefault());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunInitDefaultSpecificEventType</Name>
				<Source><![CDATA[
    protected QueryRun queryRunInitDefaultSpecificEventType(FBSpedReinfEventType_BR _eventType = eventType)
    {
        return new QueryRun(this.queryInitDefaultSpecificEventType(_eventType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunNFOInitDefaultSpecificEventType</Name>
				<Source><![CDATA[
    protected QueryRun queryRunNFOInitDefaultSpecificEventType(FBSpedReinfEventType_BR _eventType = eventType)
    {
        return new QueryRun(this.queryNFOInitDefaultSpecificEventType(_eventType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        setPrefix(FBSpedReinfEventCreate_BR::description());

        if (!this.validate())
            throw error("@SYS18447");

        try
        {
            ttsBegin;

            this.process();

            this.processCreatedEvents();
            this.processUpdatedEvents();

            ttsCommit;

            info(strFmt("@SpedReinf_AS:EventSOfTypeHaveBeenCreatedOrUpdated", eventMap.elements(), eventType));
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last choice by using the <c>pack</c> method.
    /// </summary>
    /// <remarks>
    ///    This method should not normally be overridden.
    /// </remarks>
    public void saveLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);
        PackedQueryRun packedQuery;
        PackedQueryRun packedQueryNFO;

        switch (version)
        {
            case CurrentVersion:
                [version, bookingPeriod, eventType, packedQuery] = _packedClass;
                packedQueryNFO = SysPackExtensions::extractPackedVariable(_packedClass, classStr(FBSpedReinfEventCreate_BR), varStr(queryRunNFO));
                break;

            default:
                return false;
        }

        if (SysQuery::isPackedOk(packedQuery))
        {
            queryRun = new QueryRun(packedQuery);
        }
        else
        {
            queryRun = this.queryRunInitDefault();
        }

        if (SysQuery::isPackedOk(packedQueryNFO))
        {
            queryRunNFO = new QueryRun(packedQueryNFO);
        }
        else
        {
            queryRunNFO = this.queryRunNFOInitDefault();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBookingPeriodFiscalDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the fiscal documents for the given booking period.
    /// </summary>
    /// <returns>
    /// true, if all fiscal documents in the booking period are either included into events, or not applicable for event creation; otherwise, false.
    /// </returns>
    public boolean validateBookingPeriodFiscalDocuments()
    {
        boolean findFD = this.validateBookingPeriodFiscalDocumentsEvent(FBSpedReinfEventType_BR::R2010);
        findFD = this.validateBookingPeriodFiscalDocumentsEvent(FBSpedReinfEventType_BR::R2020) || findFD;
        findFD = this.validateBookingPeriodFiscalDocumentsEvent(FBSpedReinfEventType_BR::R2055) || findFD;

        return findFD
            ? checkFailed(strFmt("@SpedReinf_AS:ThereAreFiscalDocumentsThatAreNotIncludedIntoAnySpedReinfEventsPleaseUpdateEventsForTheBookingPeriod",
                strFmt('%1, %2, %3', FBSpedReinfEventType_BR::R2010, FBSpedReinfEventType_BR::R2020, FBSpedReinfEventType_BR::R2055),
                strFmt("@SpedReinf_AS:Word1DashWord2", FBBookingPeriod_BR::find(bookingPeriod).PeriodMonth, FBBookingPeriod_BR::find(bookingPeriod).PeriodYear)))
            : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBookingPeriodFiscalDocumentsEvent</Name>
				<Source><![CDATA[
    private boolean validateBookingPeriodFiscalDocumentsEvent(FBSpedReinfEventType_BR _eventType)
    {
        Set dataToUpdate = this.getDataToUpdate(_eventType);

        FiscalDocumentAccountNumber_BR fdAccountNum;
        RecId fdRecId;
        RecId fdLineRecId;
        RecId bookingPeriodRecId;
        RecId nfoRecId;
        DataAreaId dataAreaId;
        FiscalDocument_BR fiscalDocument;

        SetEnumerator en = dataToUpdate.getEnumerator();
        boolean findFD = false;

        while (en.moveNext())
        {
            [ fdRecId, fdLineRecId, fdAccountNum, bookingPeriodRecId, dataAreaId, nfoRecId ] = en.current();

            fiscalDocument = FiscalDocument_BR::find(fdRecId);

            info(strFmt("@SpedReinf_AS:FiscalDocumentIsNotIncludedIntoAnySpedReinfEvent", fiscalDocument.FiscalDocumentNumber));
            findFD = true;
        }

        return findFD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FBSpedReinfEventCreate_BR construct()
    {
        return new FBSpedReinfEventCreate_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SpedReinf_AS:CreateSpedReinfEvents";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FBSpedReinfEventCreate_BR   runClass;
        FormDataSource              formDatasource;

        if (!_args
            || !formHasMethod(_args.caller() as FormRun, identifierStr(bookingPeriod))
            || !formHasMethod(_args.caller() as FormRun, identifierStr(eventType)))
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        runClass = FBSpedReinfEventCreate_BR::construct();
        runClass.parmBookingPeriod(_args.caller().bookingPeriod());
        runClass.parmEventType(_args.caller().eventType());
        runClass.parmIsCreateOrUpdateEventAction(true);

        if (runClass.prompt())
        {
            runClass.runOperation();

            if (_args)
            {
                if (formHasMethod(_args.caller() as FormRun, identifierStr(rereadDatasource)))
                {
                    _args.caller().rereadDatasource();
                }
                else if (_args.record() && _args.record().isFormDataSource())
                {
                    formDatasource = _args.record().dataSource();
                    formDatasource.executeQuery();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBookingPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the fiscal documents for the given booking period.
    /// </summary>
    /// <param name="_bookingPeriod">
    /// The booking period record ID.
    /// </param>
    /// <returns>
    /// true, if all fiscal documents in the booking period are either included into events, or not applicable for event creation; otherwise, false.
    /// </returns>
    public static boolean validateBookingPeriod(RefRecId _bookingPeriod)
    {
        FBSpedReinfEventCreate_BR   runClass = FBSpedReinfEventCreate_BR::construct();

        runClass.parmBookingPeriod(_bookingPeriod);
        runClass.initParmDefault();

        return runClass.validateBookingPeriodFiscalDocuments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>