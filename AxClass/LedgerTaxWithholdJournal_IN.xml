<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTaxWithholdJournal_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerTaxWithholdJournal_IN</c> class calculates the taxes for adjustment journal for direct taxes and transfers the taxes to journal.
/// </summary>
class LedgerTaxWithholdJournal_IN
{
    JournalId                       journalNum;
    TmpTaxWithholdTaxJournal_IN     tmpTaxWithholdTaxJournal;
    TmpTaxWithholdTaxJournalLine_IN tmpTaxWithholdTaxJournalLine;
    LedgerJournalEngine             ledgerJournalEngine;
    LedgerJournalTrans              ledgerJournalTrans;
    LedgerJournalTable              ledgerJournalTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerTaxWithholdJournal_IN</c> class object with a LedgerJournalEngine,LedgerJournalTrans,LedgerJournalTable,TmpTaxWithholdTaxJournal_IN and TmpTaxWithholdTaxJournalLine_IN objects .
    /// </summary>
    /// <param name="_ledgerJournalEngine">
    /// A <c>LedgerJournalEngine</c> class instance.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    /// <param name="_ledgerJournalTable">
    /// A <c>LedgerJournalTable</c> table buffer.
    /// </param>
    /// <param name="_tmpTaxWithholdTaxJournal">
    /// A <c>TmpTaxWithholdTaxJournal_IN</c> table buffer.
    /// </param>
    /// <param name="_tmpTaxWithholdTaxJournalLine">
    /// A <c>TmpTaxWithholdTaxJournalLine_IN</c> table buffer.
    /// </param>
    public void init(
        LedgerJournalEngine _ledgerJournalEngine,
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTable _ledgerJournalTable,
        TmpTaxWithholdTaxJournal_IN _tmpTaxWithholdTaxJournal,
        TmpTaxWithholdTaxJournalLine_IN _tmpTaxWithholdTaxJournalLine)
    {
        tmpTaxWithholdTaxJournal = _tmpTaxWithholdTaxJournal;
        tmpTaxWithholdTaxJournalLine = _tmpTaxWithholdTaxJournalLine;

        ledgerJournalEngine = _ledgerJournalEngine;
        ledgerJournalTrans = _ledgerJournalTrans;
        ledgerJournalTable = _ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers adjustment lines taxes to journal.
    /// </summary>
    public void run()
    {
        Voucher voucher;
        LineNum lineNum;
        CurrencyCode currencyCodeloc;
        TaxWithholdTaxJournalTrans_IN taxWithholdTaxJournalTrans;
        DimensionDefault defaultDimension;
        VendTrans vendTransOrigin;

        journalNum = ledgerJournalTable.JournalNum;
        if (ledgerJournalTrans.CurrencyCode != '')
        {
            currencyCodeloc = ledgerJournalTrans.CurrencyCode;
        }
        else
        {
            currencyCodeloc = Ledger::accountingCurrency();
        }

        // Check if line exists on form that hasn't been saved, and clear the voucher number
        if (!ledgerJournalTrans.RecId && ledgerJournalTrans.Voucher)
        {
            ledgerJournalEngine.clearVoucher();
        }

        if (!ledgerJournalTrans.RecId)
        {
            lineNum = ledgerJournalTrans.LineNum;
        }
        if (!voucher)
        {
            voucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(true);
        }
        if (!lineNum)
        {
            lineNum = LedgerJournalTrans::lastLineNum(ledgerJournalTable.JournalNum) + 1;
        }

        if (tmpTaxWithholdTaxJournal.SourceTransTableId == tableNum(VendTrans))
        {
            defaultDimension = VendTrans::find(tmpTaxWithholdTaxJournal.SourceTransRecId).DefaultDimension;
        }
        else
        {
            defaultDimension = CustTrans::find(tmpTaxWithholdTaxJournal.SourceTransRecId).DefaultDimension;
        }

        select firstonly Invoice from vendTransOrigin
            where vendTransOrigin.RecId == tmpTaxWithholdTaxJournal.SourceTransRecId;

        ttsbegin;
        while select tmpTaxWithholdTaxJournalLine
            where tmpTaxWithholdTaxJournalLine.TmpTaxWithholdTaxJournal == tmpTaxWithholdTaxJournal.RecId
               && tmpTaxWithholdTaxJournalLine.SourceTaxAmountCur
        {
            ledgerJournalTrans.clear();
            ledgerJournalTrans.ledgerJournalTransTaxExtensionIN().clear();
            ledgerJournalTrans.JournalNum = journalNum;
            ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();

            ledgerJournalTrans.TransDate = tmpTaxWithholdTaxJournal.TransDate;
            ledgerJournalTrans.Voucher = voucher;
            ledgerjournalTrans.LineNum = lineNum;
            ledgerJournalTrans.AccountType = LedgerJournalACType::Ledger;
            ledgerJournalTrans.LedgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(tmpTaxWithholdTaxJournalLine.LedgerDimension, defaultDimension);
            ledgerJournalTrans.CurrencyCode = currencyCodeloc != '' ? currencyCodeloc : CompanyInfoHelper::standardCurrency();
            ledgerjournalTrans.OffsetAccountType = tmpTaxWithholdTaxJournal.DefaultOffsetAccountType;
            ledgerjournalTrans.OffsetLedgerDimension = tmpTaxWithholdTaxJournal.DefaultOffsetLedgerDimension;
            ledgerjournalTrans.Invoice = vendTransOrigin.Invoice;

            if (ledgerJournalTrans.ExchRate == 0)
            {
                ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
            }

            if ((tmpTaxWithholdTaxJournal.TaxWithholdAccountType == TaxWithholdDirection_IN::IncomingTax
                 && tmpTaxWithholdTaxJournalLine.SourceTaxAmountCur > 0)
               || (tmpTaxWithholdTaxJournal.TaxWithholdAccountType == TaxWithholdDirection_IN::OutgoingTax
                 && tmpTaxWithholdTaxJournalLine.SourceTaxAmountCur < 0))
            {
                ledgerJournalTrans.AmountCurCredit = 0;
                ledgerJournalTrans.AmountCurDebit = abs(tmpTaxWithholdTaxJournalLine.SourceTaxAmountCur);
            }
            else if ((tmpTaxWithholdTaxJournal.TaxWithholdAccountType == TaxWithholdDirection_IN::IncomingTax
                      && tmpTaxWithholdTaxJournalLine.SourceTaxAmountCur < 0)
                    || (tmpTaxWithholdTaxJournal.TaxWithholdAccountType == TaxWithholdDirection_IN::OutgoingTax
                      && tmpTaxWithholdTaxJournalLine.SourceTaxAmountCur > 0))
            {
                ledgerJournalTrans.AmountCurDebit = 0;
                ledgerJournalTrans.AmountCurCredit = abs(tmpTaxWithholdTaxJournalLine.SourceTaxAmountCur);
            }

            ledgerJournalTrans.ledgerJournalTransTaxExtensionIN().TaxWithholdCode = tmpTaxWithholdTaxJournalLine.TaxWithholdCode;
            ledgerJournalTrans.OffsetDefaultDimension = defaultDimension;

            ledgerJournalTrans.markAsApprovedByCurrentUser();
            ledgerJournalTrans.insert();

            if (ledgerJournalEngine != null)
            {
                ledgerJournalEngine.write(ledgerJournalTrans);
            }

            taxWithholdTaxJournalTrans.clear();
            taxWithholdTaxJournalTrans.LedgerJournalTrans = ledgerJournalTrans.RecId;
            taxWithholdTaxJournalTrans.initFromTmpTaxWithholdTaxJournal(tmpTaxWithholdTaxJournal);
            taxWithholdTaxJournalTrans.initFromTmpTaxWithholdTaxJournalLine(tmpTaxWithholdTaxJournalLine);
            taxWithholdTaxJournalTrans.insert();
        }
        if (TaxWithholdUncommitted_IN::existByDocumentId(ledgerJournalTable.TableId, ledgerJournalTable.RecId))
        {
            TaxWithholdUncommitted_IN::deleteForInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice);
        }
        LedgerJournalTrans_IN_Extension::getTaxWithholdInstance_IN(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice, true);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWithholdTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates withhold taxes for adjustment journals.
    /// </summary>
    /// <param name="_taxWithholdGroup">
    /// A <c>TaxWithholdGroup</c> selected in adjustment journal.
    /// </param>
    /// <param name="_amountOriginCur">
    /// A <c>AmountCur</c>, base amount entered in adjustment journal.
    /// </param>
    /// <param name="_transDate">
    /// A <c>TransDate</c> selected in adjustment journal.
    /// </param>
    /// <param name="_accountNum">
    /// A <c>AccountNum</c> selected in adjustment journal.
    /// </param>
    /// <param name="_tmpTaxWithholdTaxJournalRecId">
    /// A <c>TmpTaxWithholdTaxJournal_IN</c> table record id.
    /// </param>
    /// <param name="_taxWithholdDirection">
    /// A <c>TaxWithholdDirection_IN</c> selected in adjustment journal.
    /// </param>
    /// <param name="_currencyCode">
    /// A <c>CurrencyCode</c> selected in adjustment journal.
    /// </param>
    /// <param name="_isVendTransaction">
    /// A <c>boolean</c>, if vendor or customer transaction selected for settlement.
    /// </param>
    /// <returns>
    /// A record <c>TmpTaxWithholdTaxJournalLine_IN</c> table after populated with withhold taxes.
    /// </returns>
    public static TmpTaxWithholdTaxJournalLine_IN calculateWithholdTax(
        TaxWithholdGroup _taxWithholdGroup,
        AmountCur _amountOriginCur,
        TransDate _transDate,
        AccountNum _accountNum,
        RefRecId _tmpTaxWithholdTaxJournalRecId,
        TaxWithholdDirection_IN _taxWithholdDirection,
        CurrencyCode _currencyCode,
        boolean _isVendTransaction)
    {
        TaxWithholdCalcFormulaDesigner_IN taxWithholdCalcFormulaDesigner;
        TmpTaxWithholdWorkTrans_IN tmpTaxWithholdworkTrans;
        CurrencyCode currencyCodeloc;

        if (_currencyCode == '')
        {
            currencyCodeloc = Ledger::accountingCurrency();
        }
        else
        {
            currencyCodeloc = _currencyCode;
        }

        taxWithholdCalcFormulaDesigner = new TaxWithholdCalcFormulaDesigner_IN(_taxWithholdGroup,
                                                        _amountOriginCur,
                                                        _transDate,
                                                        _accountNum,
                                                        _tmpTaxWithholdTaxJournalRecId,
                                                        _taxWithholdDirection,
                                                        currencyCodeloc,
                                                        _isVendTransaction);

        taxWithholdCalcFormulaDesigner.calculateTax();

        tmpTaxWithholdworkTrans = taxWithholdCalcFormulaDesigner.parmTmpTaxWithholdWorkTrans();

        return TmpTaxWithholdTaxJournalLine_IN::insertTmpTaxWithholdTaxJournalLine(
                                                                    tmpTaxWithholdworkTrans,
                                                                    _tmpTaxWithholdTaxJournalRecId,
                                                                    _amountOriginCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferTaxAdjustmentJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the tax adjustment lines to journal.
    /// </summary>
    /// <param name="_ledgerJournalEngine">
    /// A <c>LedgerJournalEngine</c> class instance.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    /// <param name="_ledgerJournalTable">
    /// A <c>LedgerJournalTable</c> table buffer.
    /// </param>
    /// <param name="_TmpTaxWithholdTaxJournal">
    /// A <c>TmpTaxWithholdTaxJournal_IN</c> table buffer.
    /// </param>
    /// <param name="_TmpTaxWithholdTaxJournalLine">
    /// A <c>TmpTaxWithholdTaxJournalLine_IN</c> table buffer.
    /// </param>
    public static void transferTaxAdjustmentJournalLines(
        LedgerJournalEngine _ledgerJournalEngine,
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTable _ledgerJournalTable,
        TmpTaxWithholdTaxJournal_IN _TmpTaxWithholdTaxJournal,
        TmpTaxWithholdTaxJournalLine_IN _TmpTaxWithholdTaxJournalLine)
    {
        LedgerTaxWithholdJournal_IN ledgerTaxWithholdJournal;

        ledgerTaxWithholdJournal = new LedgerTaxWithholdJournal_IN();

        ledgerTaxWithholdJournal.init(_ledgerJournalEngine,
                                    _ledgerJournalTrans,
                                    _ledgerJournalTable,
                                    _TmpTaxWithholdTaxJournal,
                                    _TmpTaxWithholdTaxJournalLine);

        ledgerTaxWithholdJournal.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>