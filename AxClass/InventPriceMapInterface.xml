<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPriceMapInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class providing an interface to common functionality applicable for tables mapped to the <c>InventPriceMap</c> table map.
/// </summary>
public abstract class InventPriceMapInterface
{
    private InventPriceMap inventPriceMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new ()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventPriceMap</Name>
				<Source><![CDATA[
    private void initializeInventPriceMap(InventPriceMap _inventPriceMap)
    {
        inventPriceMap = _inventPriceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>InventPriceMapInterface</c> object based on the provided <c>InventPriceMap</c> record.
    /// </summary>
    /// <param name = "_inventPriceMap">
    /// A <c>InventPriceMap</c> record to create a <c>InventPriceMapInterface</c> object for.
    /// </param>
    /// <returns>
    /// The instantiated <c>InventPriceMapInterface</c> object.
    /// </returns>
    [Hookable(false)]
    public static InventPriceMapInterface createInstance(InventPriceMap _inventPriceMap)
    {
        InventPriceMapInterfaceFactoryAttribute attr = new InventPriceMapInterfaceFactoryAttribute(tableId2Name(_inventPriceMap.tableId));
        
        InventPriceMapInterface instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(InventPriceMapInterface), attr) as InventPriceMapInterface;

        if (!instance)
        {
            instance = new InventPriceMapDefault();
        }

        instance.initializeInventPriceMap(_inventPriceMap);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markup</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final MarkupAmount markup()
    {
        if (inventPriceMap.AllocateMarkup)
        {
            return 0;
        }

        return inventPriceMap.Markup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupSecCur_RU</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final InventPriceMarkupSecCur_RU markupSecCur_RU()
    {
        if (inventPriceMap.AllocateMarkup)
        {
            return 0;
        }

        return inventPriceMap.MarkupSecCur_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxRetailPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum retail price.
    /// </summary>
    /// <returns>
    /// The maximum retail price.
    /// </returns>
    [Hookable(false)]
    public final Price maxRetailPrice_IN()
    {
        return inventPriceMap.MaximumRetailPrice_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPrice</Name>
				<Source><![CDATA[
    public Price pcsPrice()
    {
        Price pcsPrice = inventPriceMap.Price / inventPriceMap.priceUnit();

        if (inventPriceMap.AllocateMarkup)
        {
            pcsPrice += inventPriceMap.Markup / inventPriceMap.priceQty();
        }

        return pcsPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPriceSecCur_RU</Name>
				<Source><![CDATA[
    public PriceSecCur_RU pcsPriceSecCur_RU()
    {
        Price pcsPrice = inventPriceMap.PriceSecCur_RU / inventPriceMap.priceUnit();

        if (inventPriceMap.AllocateMarkup)
        {
            pcsPrice += inventPriceMap.MarkupSecCur_RU / inventPriceMap.priceQty();
        }

        return pcsPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>price</Name>
				<Source><![CDATA[
    public Price price()
    {
        if (inventPriceMap.AllocateMarkup)
        {
            return inventPriceMap.Price + inventPriceMap.priceUnit() *  inventPriceMap.Markup / inventPriceMap.priceQty();
        }

        return inventPriceMap.Price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceCalcId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>PriceCalcId</c> in the mapped table.
    /// </summary>
    /// <returns>
    ///    The <c>PriceCalcId</c> of the mapped record, if present; an empty <c>PriceCalcId</c> if the mapped
    ///    table doesn't support <c>PriceCalcId</c>.
    /// </returns>
    /// <remarks>
    ///    If <c>inventPriceMap.priceCalcId() </c>throws an error ("Error executing code: xRecord object does
    ///    not have method <c>'priceCalcId'</c>"), use <c>inventPriceMap.inventPriceMap::priceCalcId()
    ///    </c>instead
    /// </remarks>
    public PriceCalcId priceCalcId()
    {
        if (new DictTable(inventPriceMap.TableId).fieldName2Id(identifierStr(PriceCalcId)) != 0)
        {
            return inventPriceMap.PriceCalcId;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public PriceQty priceQty()
    {
        return inventPriceMap.PriceQty  ? inventPriceMap.PriceQty : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceSecCur_RU</Name>
				<Source><![CDATA[
    public PriceSecCur_RU priceSecCur_RU()
    {
        if (inventPriceMap.AllocateMarkup)
        {
            return inventPriceMap.PriceSecCur_RU + inventPriceMap.priceUnit() * inventPriceMap.MarkupSecCur_RU / inventPriceMap.priceQty();
        }

        return inventPriceMap.PriceSecCur_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceUnit</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public PriceUnit  priceUnit()
    {
        return inventPriceMap.PriceUnit ? inventPriceMap.PriceUnit : 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>