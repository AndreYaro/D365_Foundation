<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationDirectiveActionQueryEnumerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLocationDirectiveActionQueryEnumerator</c> class is an enumerator of location directive queries.
/// </summary>
class WhsLocationDirectiveActionQueryEnumerator
{
    QueryRun queryRun;
    boolean hasReadAhead;
    UnknownNoYes hasHits;
    private boolean useInventoryDimensionOfInventSum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WhsLocationDirectiveActionQueryEnumerator construct()
    {
        return new WhsLocationDirectiveActionQueryEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance from a QueryRun instance.
    /// </summary>
    /// <param name = "_queryRun">The QueryRun to enumerate.</param>
    /// <returns>A <c>WhsLocationDirectiveActionQueryEnumerator</c> instance.</returns>
    public static WhsLocationDirectiveActionQueryEnumerator newFromQueryRun(QueryRun _queryRun)
    {
        Debug::assert(_queryRun != null);

        boolean canReadInventDimFromQuery =  WHSLocDirAction::queryContainsInventDimDataSourceAndInventDimData(_queryRun.query());

        var enumerator = WhsLocationDirectiveActionQueryEnumerator::construct();
        enumerator.queryRun = _queryRun;
        enumerator.useInventoryDimensionOfInventSum = !canReadInventDimFromQuery;

        return enumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasHitsDetermined</Name>
				<Source><![CDATA[
    private boolean hasHitsDetermined()
    {
        return hasHits != UnknownNoYes::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHasHits</Name>
				<Source><![CDATA[
    private void setHasHits(boolean _moveNextResult)
    {
        hasHits = _moveNextResult ? UnknownNoYes::Yes : UnknownNoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHasHits</Name>
				<Source><![CDATA[
    private boolean getHasHits()
    {
        switch (hasHits)
        {
            case UnknownNoYes::No:
                return false;
            case UnknownNoYes::Yes:
                return true;
        }
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasHits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a Boolean flag indicating if the enumerator has any hits.
    /// </summary>
    /// <returns>true if the query returns any records; otherwise, false.</returns>
    public boolean hasHits()
    {
        if (this.hasHitsDetermined())
        {
            return this.getHasHits();
        }

        // Need to execute the query to determine if there are any results.
        if (this.moveNext())
        {
            // Make sure external calls to moveNext
            hasReadAhead = true;
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the enumerator to the next position.
    /// </summary>
    /// <returns>true if there are more data to enumerate; otherwise, false.</returns>
    public boolean moveNext()
    {
        boolean result;

        if (hasReadAhead)
        {
            hasReadAhead = false;
            result = true;
        }
        else
        {
            result = queryRun.next();
        }

        if (!this.hasHitsDetermined())
        {
            this.setHasHits(result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>WMSLocation</c> record of the current position.
    /// </summary>
    /// <returns>The <c>WMSLocation</c> record of the current position.</returns>
    public WMSLocation currentWMSLocation()
    {
        return queryRun.get(tableNum(WMSLocation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventDim</c> record of the current position.
    /// </summary>
    /// <returns>The <c>InventDim</c> record of the current position.</returns>
    public InventDim currentInventDim()
    {
        if (useInventoryDimensionOfInventSum)
        {
            InventDim inventDim;
            InventSum inventSum = this.currentInventSum();

            inventDim.initFromInventSum(inventSum);
            inventDim.InventDimId = inventSum.InventDimId;
            
            return inventDim;
        }

        return queryRun.get(tableNum(InventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventSum</c> record of the current position.
    /// </summary>
    /// <returns>The <c>InventSum</c> record of the current position.</returns>
    public InventSum currentInventSum()
    {
        return queryRun.get(tableNum(InventSum));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>