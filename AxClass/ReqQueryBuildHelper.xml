<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqQueryBuildHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This class provides helper methods that work with QueryBuild* objects.
/// </summary>
class ReqQueryBuildHelper
{
    Query                   query;
    QueryBuildDatasource    lastDataSource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a data source to the query, either at the root or as a child to the previously added data source, if any.
    /// </summary>
    /// <param name="_tableId">
    ///     The ID of the table to add.
    /// </param>
    /// <param name="_name">
    ///     The name of the data source
    /// </param>
    /// <returns>
    ///     A <c>QueryBuildDatasource</c> instance that represents the added data source.
    /// </returns>
    public QueryBuildDatasource addDataSource(TableId _tableId, str _name = '')
    {
        QueryBuildDatasource qbds;

        if (lastDataSource != null)
        {
            qbds = lastDataSource.addDataSource(_tableId, _name);
        }
        else
        {
            qbds = query.addDataSource(_tableId, _name);
        }

        lastDataSource = qbds;

        return qbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLink</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a link to the current links.
    /// </summary>
    /// <param name="_qbdsChild">
    ///     The child data source to add the link to.
    /// </param>
    /// <param name="_childFieldId">
    ///     The ID of the linked field in the child data source.
    /// </param>
    /// <param name="_qbdsParent">
    ///     The parent data source.
    /// </param>
    /// <param name="_parentFieldId">
    ///     The ID of the linked field in the parent data source.
    /// </param>
    public void addLink(QueryBuildDataSource _qbdsChild, FieldId _childFieldId, QueryBuildDatasource _qbdsParent, FieldId _parentFieldId)
    {
        _qbdsChild.addLink(_parentFieldId, _childFieldId, _qbdsParent.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupBySelectedFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds "group by" entries to the query for each of the selected fields in the given data source.
    /// </summary>
    /// <param name="_qbds">
    ///     The data source instance.
    /// </param>
    public void groupBySelectedFields(QueryBuildDataSource _qbds)
    {
        QueryBuildFieldList fieldList = _qbds.fields();
        int fieldsLen = fieldList.fieldCount();
        int fieldIndex;

        for (fieldIndex = 1; fieldIndex <= fieldsLen; fieldIndex++)
        {
            _qbds.addGroupByField(fieldList.field(fieldIndex));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>ReqQueryBuildHelper</c> class.
    /// </summary>
    /// <param name="_query">
    ///     The query that this instance will work with.
    /// </param>
    public void new(Query _query)
    {
        query = _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderBy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Orders the given data source by the given field, clearing the previous sort list.
    /// </summary>
    /// <param name="_qbds">
    ///     The data source instance.
    /// </param>
    /// <param name="_fieldId">
    ///     The ID of the field to order by.
    /// </param>
    public void orderBy(QueryBuildDataSource _qbds, FieldId _fieldId)
    {
        _qbds.sortClear();
        _qbds.addSortField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLinks</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears all links and dynalinks from the given data source.
    /// </summary>
    /// <param name="_qbds">
    ///     The data source.
    /// </param>
    public void resetLinks(QueryBuildDataSource _qbds)
    {
        _qbds.clearDynalinks();
        _qbds.clearLinks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets which fields should be selected from a data source.
    /// </summary>
    /// <param name="_qbds">
    ///     The data source instance.
    /// </param>
    /// <param name="_fields">
    ///     A container with the IDs of the fields that should be selected.
    /// </param>
    public void selectFields(QueryBuildDataSource _qbds, container _fields)
    {
        QueryBuildFieldList fieldList = _qbds.fields();
        int fieldsLen = conLen(_fields);
        int fieldIndex;

        fieldList.clearFieldList();
        for (fieldIndex = 1; fieldIndex <= fieldsLen; fieldIndex++)
        {
            fieldList.addField(conPeek(_fields, fieldIndex));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLink</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets a link between two data sources, clearing the previous links of the child data source.
    /// </summary>
    /// <param name="_qbdsChild">
    ///     The child data source to add the link to.
    /// </param>
    /// <param name="_childFieldId">
    ///     The ID of the linked field in the child data source.
    /// </param>
    /// <param name="_qbdsParent">
    ///     The parent data source.
    /// </param>
    /// <param name="_parentFieldId">
    ///     The ID of the linked field in the parent data source.
    /// </param>
    public void setLink(QueryBuildDataSource _qbdsChild, FieldId _childFieldId, QueryBuildDatasource _qbdsParent, FieldId _parentFieldId)
    {
        this.resetLinks(_qbdsChild);
        this.addLink(_qbdsChild, _childFieldId, _qbdsParent, _parentFieldId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>