<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqActionGraphModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents an action graph model (structure) as set of nodes (requirement transactions) and relations between them.
/// It also contains mapping structures between temporary requirement transactions and original requirement transactions records.
/// </summary>
class ReqActionGraphModel
{
    private Map         reqTransToTmpMapping;
    private Map         tmpToReqTransMapping;
    private ReqTrans    reqTransTmp;
    private Map         nodes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds provided requirement transaction to the model.
    /// </summary>
    /// <param name="_reqTrans">
    /// A requirement transaction to add to the model.
    /// </param>
    /// <returns>The created graph node.</returns>
    public ReqActionGraphNode addReqTrans(ReqTrans _reqTrans)
    {
        ReqActionGraphNode actionGraphNode = ReqActionGraphNode::construct(_reqTrans);

        reqTransTmp.data(_reqTrans);
        reqTransTmp.doInsert();

        reqTransToTmpMapping.insert(_reqTrans.RecId, reqTransTmp.RecId);
        tmpToReqTransMapping.insert(reqTransTmp.RecId, _reqTrans.RecId);

        nodes.insert(_reqTrans.RecId, actionGraphNode);

        return actionGraphNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds provided action graph node to the model. Relations are not copied.
    /// </summary>
    /// <param name="_actionGraphNode">
    /// An action graph node to add to the model.
    /// </param>
    public void addNode(ReqActionGraphNode _actionGraphNode)
    {
        ReqActionGraphNode node = this.addReqTrans(_actionGraphNode.getReqTrans());
        node.parmIsActionApplied(_actionGraphNode.parmIsActionApplied());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a relation between two provided requirement transactions to the model.
    /// </summary>
    /// <param name="_fromReqTrans">
    /// A requirement transaction which acts as an "origin".
    /// </param>
    /// <param name="_toReqTrans">
    /// A requirement transaction which acts as a "destination".
    /// </param>
    /// <param name="_relationType">
    /// The type of relation.
    /// </param>
    /// <param name="_reqTransCovQty">
    /// A requirement coverage associated with a relation.
    /// </param>
    public void addRelation(
        ReqTrans            _fromReqTrans,
        ReqTrans            _toReqTrans,
        ReqGraphEdgeType    _relationType   = ReqGraphEdgeType::ParentChild,
        ReqQtySettled       _reqTransCovQty = 0.0)
    {
        ReqActionGraphNode fromNode = nodes.lookup(_fromReqTrans.RecId);
        ReqActionGraphNode toNode = nodes.lookup(_toReqTrans.RecId);

        fromNode.addChildRelation(toNode, _relationType, _reqTransCovQty);
        toNode.addParentRelation(fromNode, _relationType, _reqTransCovQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if provided requirement transaction exists in the model.
    /// </summary>
    /// <param name="_reqTrans">
    /// A requirement transaction to check in the model.
    /// </param>
    /// <returns>
    /// true if requirement transaction exists in the model; otherwise, false.
    /// </returns>
    public boolean reqTransExists(ReqTrans _reqTrans)
    {
        return this.reqTransRecIdExists(_reqTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransRecIdExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if provided requirement transaction RecId exists in the model.
    /// </summary>
    /// <param name="_reqTransRecId">
    /// A requirement transaction RecId to check in the model.
    /// </param>
    /// <returns>
    /// true if requirement transaction RecId exists in the model; otherwise, false.
    /// </returns>
    public boolean reqTransRecIdExists(ReqTransRefRecId _reqTransRecId)
    {
        return reqTransToTmpMapping.exists(_reqTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a temporary table cursor with all the requirement transactions in the model.
    /// </summary>
    /// <returns>
    /// Temporary table cursor.
    /// </returns>
    public ReqTrans getReqTransTmp()
    {
        return reqTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an enumerator with all the nodes <see cref="ReqActionGraphNode" /> defined in the model.
    /// </summary>
    /// <returns>
    /// Enumerator with nodes.
    /// </returns>
    public MapEnumerator getNodes()
    {
        return nodes.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <see cref="ReqActionGraphNode" /> defined in the model.
    /// </summary>
    /// <param name="_reqTransRecId">
    /// The requirement transaction identifier.
    /// </param>
    /// <returns>
    /// A node.
    /// </returns>
    public ReqActionGraphNode getNode(RefRecId _reqTransRecId)
    {
        return nodes.lookup(_reqTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets specific requirement transaction from the model by provided id.
    /// </summary>
    /// <param name="_reqTransRecId">
    /// The requirement transaction identifier.
    /// </param>
    /// <returns>
    /// A requirement transaction.
    /// </returns>
    public ReqTrans getReqTrans(RefRecId _reqTransRecId)
    {
        return nodes.lookup(_reqTransRecId).getReqTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransRecIdToTmpRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a requirement transaction identifier to the identifier of a temporary requirement transaction.
    /// </summary>
    /// <param name="_reqTransRecId">
    /// The requirement transaction identifier.
    /// </param>
    /// <returns>
    /// The identifier of a temporary requirement transaction.
    /// </returns>
    public RefRecId reqTransRecIdToTmpRecId(RefRecId _reqTransRecId)
    {
        RefRecId tmpReqTransRecId;

        if (reqTransToTmpMapping.exists(_reqTransRecId))
        {
            tmpReqTransRecId = reqTransToTmpMapping.lookup(_reqTransRecId);
        }

        return tmpReqTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpRecIdToReqTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a temporary requirement transaction identifier to the identifier of a requirement transaction.
    /// </summary>
    /// <param name="_tmpReqTransRecId">
    /// The temporary requirement transaction identifier.
    /// </param>
    /// <returns>
    /// The identifier of a requirement transaction.
    /// </returns>
    public RefRecId tmpRecIdToReqTransRecId(RefRecId _tmpReqTransRecId)
    {
        RefRecId reqTransRecId;

        if (tmpToReqTransMapping.exists(_tmpReqTransRecId))
        {
            reqTransRecId = tmpToReqTransMapping.lookup(_tmpReqTransRecId);
        }

        return reqTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of actions.
    /// </summary>
    /// <returns>
    /// Number of actions.
    /// </returns>
    public ReqNumberOfActions numberOfActions()
    {
        return reqTransToTmpMapping.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerActionApplied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Store information about applied requirement transaction action in model.
    /// </summary>
    /// <param name="_reqTransRecId">
    /// Identifier of requirement transaction applied.
    /// </param>
    public void registerActionApplied(RecId _reqTransRecId)
    {
        ReqActionGraphNode actionGraphNode = nodes.lookup(_reqTransRecId);
        actionGraphNode.parmIsActionApplied(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActionApplied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets info if requirement transaction action is already applied.
    /// </summary>
    /// <param name="_reqTransRecId">
    /// Identifier of requirement transaction which to check in model.
    /// </param>
    /// <returns>
    /// true if requirement transaction action was already applied; otherwise, false.
    /// </returns>
    public boolean isActionApplied(RecId _reqTransRecId)
    {
        return nodes.lookup(_reqTransRecId).parmIsActionApplied();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        reqTransTmp.setTmp();

        reqTransToTmpMapping = new Map(Types::Int64, Types::Int64);
        tmpToReqTransMapping = new Map(Types::Int64, Types::Int64);

        nodes = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqActionGraphModel construct()
    {
        ReqActionGraphModel reqActionGraphModel = new ReqActionGraphModel();

        reqActionGraphModel.init();

        return reqActionGraphModel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>