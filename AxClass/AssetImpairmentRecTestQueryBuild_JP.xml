<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentRecTestQueryBuild_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetImpairmentRecTestQueryBuild_JP</c> class handles the asset impairment recognition test query build.
/// </summary>
public class AssetImpairmentRecTestQueryBuild_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build base query to select value model or depreciation book which recently updated the indicators.
    /// </summary>
    /// <param name="_bookType">
    /// If it is value model or depreciation book.
    /// </param>
    /// <param name="_fromDate">
    /// The from date of indicator updates.
    /// </param>
    /// <param name="_toDate">
    /// The to date of indicator updates.
    /// </param>
    /// <returns>
    /// A query that select value model or depreciation book which recently updated the indicators.
    /// </returns>
    /// <remarks>
    /// This is the basic query. More ranges will be add later.
    /// </remarks>
    public static Query buildQuery(date _fromDate = dateNull(), date _toDate = dateMax())
    {
        Query                   query          = new Query();
        QueryBuildDataSource    assetTableDS;
        QueryBuildDataSource    assetBookTableDS;
        QueryBuildDataSource    assetBookDS;
        QueryBuildDataSource    assetDocIndicatorDS;
        QueryBuildRange         modifyDateRange;
        QueryBuildRange         isFinalizedRange;
        QueryBuildRange         assetTypeRange;
        QueryBuildLink          link;

        assetDocIndicatorDS = query.addDataSource(tableNum(AssetImpairmentIndicator_JP));

        assetDocIndicatorDS.addRange(fieldNum(AssetImpairmentIndicator_JP, AssetId));
        assetDocIndicatorDS.addRange(fieldNum(AssetImpairmentIndicator_JP, BookId));
        modifyDateRange = assetDocIndicatorDS.addRange(fieldNum(AssetImpairmentIndicator_JP, ModifyDate));
        modifyDateRange.value(SysQuery::range(_fromDate, _toDate));
        modifyDateRange.status(RangeStatus::Hidden);

        assetBookDS = assetDocIndicatorDS.addDataSource(tableNum(AssetBook));
        link = assetBookDS.addLink(fieldNum(AssetImpairmentIndicator_JP, AssetId), fieldNum(AssetBook, AssetId));
        link = assetBookDS.addLink(fieldNum(AssetImpairmentIndicator_JP, BookId), fieldNum(AssetBook, BookId));
        assetBookDS.joinMode(JoinMode::InnerJoin);
        assetBookDS.fetchMode(QueryFetchMode::One2One);

        isFinalizedRange = assetDocIndicatorDS.addRange(fieldNum(AssetImpairmentIndicator_JP, IsFinalized));
        isFinalizedRange.value(SysQuery::value(NoYes::Yes));
        isFinalizedRange.status(RangeStatus::Hidden);

        assetTableDS = assetBookDS.addDataSource(tableNum(AssetTable));
        link = assetTableDS.addLink(fieldNum(AssetBook, AssetId), fieldNum(AssetTable, AssetId));
        assetTableDS.joinMode(JoinMode::InnerJoin);
        assetTableDS.fetchMode(QueryFetchMode::One2One);
        assetTableDS.addRange(fieldNum(AssetTable, AssetGroup));
        assetTypeRange = assetTableDS.addRange(fieldNum(AssetTable, AssetType));
        assetTypeRange.value(SysQuery::valueNot(AssetType::Goodwill));
        assetTypeRange.status(RangeStatus::Hidden);

        assetBookTableDS = assetBookDS.addDataSource(tableNum(AssetBookTable));
        assetBookTableDS.joinMode(JoinMode::InnerJoin);
        assetBookTableDS.fetchMode(QueryFetchMode::One2One);
        assetBookTableDS.addLink(fieldNum(AssetBook, BookId), fieldNum(AssetBookTable, BookId));
        assetBookTableDS.addRange(fieldNum(AssetBookTable, CurrentOperationsTax));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform query and calculate the impairment adjustment.
    /// </summary>
    /// <param name="_queryRunCont">
    /// The pack of a SysQueryRun instance.
    /// </param>
    /// <param name="_bookType">
    /// The book type.
    /// </param>
    /// <param name="_fromDate">
    /// The from date of indicators.
    /// </param>
    /// <param name="_toDate">
    /// The to date of indicators.
    /// </param>
    /// <returns>
    /// A container contains <c>AssetImpairmentReviewTestTmp_JP</c> records with test result.
    /// </returns>
    public static container performQuery(
        container _queryRunCont,
        AssetTransDate _fromDate = dateNull(),
        AssetTransDate _toDate = dateMax())
    {
        AssetImpairmentIndicator_JP     indicator;
        SysQueryRun                     queryRun;
        AssetId                         assetId;
        AssetBookId                     bookId;
        AssetImpairmentReviewTestTmp_JP testTemp;
        Set                             existedSet = new Set(Types::Container);
        container                       result;

        queryRun = new SysQueryRun(_queryRunCont);

        while (queryRun.next())
        {
            indicator = queryRun.get(tableNum(AssetImpairmentIndicator_JP));
            assetId = indicator.AssetId;
            bookId = indicator.BookId;

            if (!existedSet.in([assetId, bookId]))
            {
                testTemp = AssetImpairmentReviewTestTmp_JP::construct(assetId, bookId);
                testTemp.calculateTest(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), AssetYear::All, _fromDate, _toDate);
                result += [testTemp.buf2con()];
                existedSet.add([assetId, bookId]);
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>