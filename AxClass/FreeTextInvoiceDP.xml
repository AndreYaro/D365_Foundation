<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FreeTextInvoiceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FreeTextInvoiceDP</c> class is the report data provider class for the <c>FreeTextInvoice</c>
/// report.
/// </summary>
[SRSReportParameterAttribute(classStr(FreeTextInvoiceContract))]
class FreeTextInvoiceDP extends SalesInvoiceDPBase
{
    FreeTextInvoiceTmp freeTextInvoiceTmp;
    MarkupPeriodChargeFreeTextInvoiceTmp freeTextInvoicePeriodChargeTmp;

    // <GEEU>
    FreeTextInvoiceHeaderFooterTmp freeTextInvoiceHeaderFooterTmp;
    FreeTextInvoiceLocalizationTmp freeTextInvoiceLocalizationTmp;
    SysDocuBrandDetailsRegular docuBrandDetails;
    ReasonComment creditNoteReasonComment;
    Bitmap emptyBitmap;
    str invoiceTxtSequel;
    boolean isFirstRowInserted; //Indicates if first row in the header table been inserted.
    boolean isTransportationDataInserted; // Indicates if transportation data been inserted to the tmp table.
    #PrintMgmtSetup
    // </GEEU>
    FreeTextInvoiceContract contract;
    FormLetterTxt formLetterTxt;
    CustPackingSlipTrans custPackingSlipTrans;
    PaymMoneyTransferSlip_BE moneyTransferSlip_BE;
    PaymMoneyTransferSlip_CH moneyTransferSlip_CH;
    PaymMoneyTransferSlip moneyTransferSlip;
    PaymMoneyTransferSlip_FI moneyTransferSlip_FI;
    container taxCodesUsed;
    MarkupTrans markupTrans;
    FormletterProformaPrint formletterProformaPrint;
    CashDiscAmount cashDiscAmountTax;
    Amount amount;
    AmountCur prepaidAmount;
    str backOrderName;
    boolean isTaxAmountVisible;
    boolean showMarkupTrans;
    // <GEEHU>
    Counter lineNumber;
    // </GEEHU>
    boolean isInvoiceCreditNote;
    UnitOfMeasureReportingText salesUnitTxt;
    //<GIN>
    TaxWithholdTrans_IN taxWithholdTrans;
    TaxWithholdSpec_IN taxWithholdSpec;
    // </GIN>
    // <GEEPL>
    RefRecId custInvoiceDuplicateTableRecId;
    boolean lineNumberInserted;
    // </GEEPL>
    SalesInvoicePaymentStubTmp salesInvoicePaymentStubTmp;
    boolean isPaymentStubRecordInserted;
    AmountCur proforma_totalExcludedTaxAmount;
    CustInvoiceJourAdjustment custInvoiceJourAdjustment;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountNo2_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 2 value for the CH country context.
    /// </summary>
    /// <returns>The account number 2 value.</returns>
    protected str accountNo2_CH()
    {
        if (moneyTransferSlip_CH.ocr_AccountNo2())
        {
            return moneyTransferSlip_CH.ocr_AccountNo2() + '>';
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum1_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 1 value for the FI country context.
    /// </summary>
    /// <returns>The account number 1 value.</returns>
    protected str accountNum1_FI()
    {
        if (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, Name)))
        {
            return moneyTransferSlip_FI.ocr_AccountNum1();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum2_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 2 value for the FI country context.
    /// </summary>
    /// <returns>The account number 2 value.</returns>
    protected str accountNum2_FI()
    {
        if (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, Name)))
        {
            return moneyTransferSlip_FI.ocr_AccountNum2();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum3_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 3 value for the FI country context.
    /// </summary>
    /// <returns>The account number 3 value.</returns>
    protected str accountNum3_FI()
    {
        if (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, Name)))
        {
            return moneyTransferSlip_FI.ocr_AccountNum3();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum4_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 4 value for the FI country context.
    /// </summary>
    /// <returns>The account number 4 value.</returns>
    protected str accountNum4_FI()
    {
        if (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, Name)))
        {
            return moneyTransferSlip_FI.ocr_AccountNum4();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum5_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 5 value for the FI country context.
    /// </summary>
    /// <returns>The account number 5 value.</returns>
    protected str accountNum5_FI()
    {
        if (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, Name)))
        {
            return moneyTransferSlip_FI.ocr_AccountNum5();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum6_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 6 value for the FI country context.
    /// </summary>
    /// <returns>The account number 6 value.</returns>
    protected str accountNum6_FI()
    {
        if (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, Name)))
        {
            return moneyTransferSlip_FI.ocr_AccountNum6();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCheckId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount check Id for the transfer slip.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal record.</param>
    /// <returns>The amount check Id value.</returns>
    protected str amountCheckId(CustInvoiceJour _custInvoiceJour)
    {
        return moneyTransferSlip.amountCheckId(_custInvoiceJour.remainAmountToBePaid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDecimals_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of decimals for the CH country context.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal record.</param>
    /// <returns>The number of decimals.</returns>
    protected str amountDecimals_CH(CustInvoiceJour _custInvoiceJour)
    {
        if (!moneyTransferSlip_CH.checkCurrency() || _custInvoiceJour.remainAmountToBePaid() < 0)
        {
            return 'XX';
        }

        return _custInvoiceJour.CashDisc ? #emptyString : moneyTransferSlip_CH.invoiceAmountPenny();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountNoDecimals_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the expanded number of decimals for the CH country context.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal record.</param>
    /// <returns>The expanded number of decimals.</returns>
    protected str amountNoDecimals_CH(CustInvoiceJour _custInvoiceJour)
    {
        if (!moneyTransferSlip_CH.checkCurrency() || _custInvoiceJour.remainAmountToBePaid() < 0)
        {
            return 'XXXXXXXX';
        }

        return _custInvoiceJour.CashDisc ? #emptyString : moneyTransferSlip_CH.invoiceAmountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountTable_AccountNum_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account number.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal record.</param>
    /// <returns>The bank account number.</returns>
    protected str bankAccountTable_AccountNum_CH(CustInvoiceJour _custInvoiceJour)
    {
        if (_custInvoiceJour.GiroType == PaymentStub::ESR_red_bank)
        {
            return moneyTransferSlip.bankAccountNum();
        }

        return #emptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountTable_Clearing_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account clearing number.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal record.</param>
    /// <returns>The bank account clearing number.</returns>
    protected str bankAccountTable_Clearing_CH(CustInvoiceJour _custInvoiceJour)
    {
        if (_custInvoiceJour.GiroType == PaymentStub::ESR_red_bank)
        {
            return moneyTransferSlip.bankAccountTable().BankClearingCode;
        }

        return #emptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankGroupIdName_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account name.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal record.</param>
    /// <returns>The bank account name.</returns>
    protected Description bankGroupIdName_CH(CustInvoiceJour _custInvoiceJour)
    {
        if (_custInvoiceJour.GiroType == PaymentStub::ESR_red_bank)
        {
            return BankAccountTable::find(_custInvoiceJour.paymentBankAccountId()).Name;
        }

        return #emptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankZipCode_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank zip code.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal record.</param>
    /// <returns>The bank zip code.</returns>
    protected str bankZipCode_CH(CustInvoiceJour _custInvoiceJour)
    {
        if (_custInvoiceJour.GiroType == PaymentStub::ESR_red_bank)
        {
            return strFmt('%1 %2', BankAccountTable::find(_custInvoiceJour.paymentBankAccountId()).postalAddress().ZipCode,
                    BankAccountTable::find(_custInvoiceJour.paymentBankAccountId()).postalAddress().City);
        }

        return #emptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTransportationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the transportation related fields from the temporary table.
    /// </summary>
    private void clearTransportationDetails()
    {
        freeTextInvoiceLocalizationTmp.TransportationDataSection = NoYes::No;
        freeTextInvoiceLocalizationTmp.DoPrintTransportationDocument = NoYes::No;
        freeTextInvoiceLocalizationTmp.DeliveryName = #emptyString;
        freeTextInvoiceLocalizationTmp.DeliveryAddress = #emptyString;

        freeTextInvoiceLocalizationTmp.TransportationContactPersonName = #emptyString;
        freeTextInvoiceLocalizationTmp.TransportationContactPersonTitle = #emptyString;

        freeTextInvoiceLocalizationTmp.TransportationCarrierAddress = #emptyString;
        freeTextInvoiceLocalizationTmp.TransportationCarrierName = #emptyString;

        freeTextInvoiceLocalizationTmp.TransPortationIssuedByName = #emptyString;
        freeTextInvoiceLocalizationTmp.TransportationIssuedByTitle = #emptyString;

        freeTextInvoiceLocalizationTmp.TransportationLoadedDateTime = utcDateTimeNull();
        freeTextInvoiceLocalizationTmp.TransportationLoadedAddress = #emptyString;
        freeTextInvoiceLocalizationTmp.TransportationLoadedName = #emptyString;

        freeTextInvoiceLocalizationTmp.TransportationPackageDangerDegree = #emptyString;
        freeTextInvoiceLocalizationTmp.TransportationPackageDescription = #emptyString;

        freeTextInvoiceLocalizationTmp.TransportationVehicleDescription = #emptyString;
        freeTextInvoiceLocalizationTmp.TransportationVehicleDriverName = #emptyString;
        freeTextInvoiceLocalizationTmp.TransportationVehiclePlateNumber = #emptyString;
        freeTextInvoiceLocalizationTmp.TransportationVehicleTrailerNumber = #emptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedInvoiceInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original invoice information.
    /// </summary>
    /// <param name="_custInvoiceId">
    /// The ID of the customer invoice.
    /// </param>
    /// <returns>
    /// A container that contains the invoice ID and the reason comment.
    /// </returns>
    private container correctedInvoiceInfo(CustInvoiceId _custInvoiceId)
    {
        CustRelatedInvoice custRelatedInvoice;
        CustInvoiceTable custInvoiceTable;
        ReasonTableRef reasonTableRef;

        select firstonly RecId, CorrectionReasonCode
            from custInvoiceTable
            where custInvoiceTable.InvoiceId == _custInvoiceId;

        if (custInvoiceTable)
        {
            reasonTableRef = ReasonTableRef::find(custInvoiceTable.CorrectionReasonCode);

            select firstonly custRelatedInvoice
                where custRelatedInvoice.CustInvoice == custInvoiceTable.RecId &&
                    custRelatedInvoice.InvoiceAssociationType == InvoiceAssociationType::CorrectedInvoice;

            if (custRelatedInvoice && custRelatedInvoice.InvoiceAssociationType == InvoiceAssociationType::CorrectedInvoice)
            {
                select firstonly InvoiceId
                    from custInvoiceTable
                    where custInvoiceTable.RecId == custRelatedInvoice.OriginalCustInvoice;

                return [custInvoiceTable.InvoiceId, reasonTableRef.ReasonComment];
            }
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>TaxSpec</c> class.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice information.
    /// </param>
    /// <returns>
    /// An instance of the <c>TaxSpec</c> class.
    /// </returns>
    public TaxSpec createTaxSpec(CustInvoiceJour _custInvoiceJour)
    {
        TaxSpec taxSpec;

        if (_custInvoiceJour.isProforma())
        {
            taxSpec = TaxSpec::construct('', naDate(), _custInvoiceJour.RecId);
            taxSpec.setTmpTaxWorkTrans(this.tmpTaxWorkTrans(_custInvoiceJour));
        }
        else
        {
            taxSpec = TaxSpec::construct(_custInvoiceJour.LedgerVoucher, _custInvoiceJour.InvoiceDate, _custInvoiceJour.RecId);
        }

        taxSpec.parmLanguageId(_custInvoiceJour.LanguageId);

        // <GMY>
        if (isGSTInvoice)
        {
            taxSpec.parmIsGSTInvoice_MY(true);
        }
        // </GMY>

        return taxSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCodeISO_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency ISO code value.
    /// </summary>
    /// <returns>The currency ISO code value.</returns>
    protected CurrencyCodeISO currencyCodeISO_CH()
    {
        CurrencyCodeISO currencyCodeISO;

        if (moneyTransferSlip_CH.parmIsEUR())
        {
            currencyCodeISO = 'EUR';
        }

        if (moneyTransferSlip_CH.parmIsCHF())
        {
            currencyCodeISO = 'CHF';
        }

        return currencyCodeISO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiCreditorId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Creditor Id value.
    /// </summary>
    /// <returns>The creditor Id value.</returns>
    protected str fiCreditorId()
    {
        CompanyInfoHelper::checkFICreditorIDEmpty(companyInfo.fiCreditorID_DK);
        return companyInfo.fiCreditorID_DK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceHeaderLocalizationData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>FreeTextInvoiceHeaderFooterTmp</c> record for the Eastern Europe countries.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_companyInfo">
    /// The <c>CompanyInfo</c> record that has the company information.
    /// </param>
    protected void generateInvoiceHeaderLocalizationData(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        CustTable buyer, payer;
        CustBankAccount customerBankAccount;
        CustInvoiceJour_W custInvoiceJour_W;
        BankAccountTable currencyBankAccountTable;
        CustInvoiceDuplicateTable_W custInvoiceDuplicateTable;

        custInvoiceJour_W = _custInvoiceJour.custInvoiceJour_W();
        currencyBankAccountTable = BankAccountTable::find(custInvoiceJour_W.CompanyCurBankAccount_W);
        buyer = _custInvoiceJour.custTable_OrderAccount();
        payer = _custInvoiceJour.custTable_InvoiceAccount();

        freeTextInvoiceHeaderFooterTmp.CompanyEmail = _companyInfo.email();
        freeTextInvoiceHeaderFooterTmp.CompanyURL = _companyInfo.url();
        freeTextInvoiceHeaderFooterTmp.CompanyBankAccount = strFmt('%1 %2', this.parmCompanyBankAccountTable().RegistrationNum ,
            this.parmCompanyBankAccountTable().AccountNum);
        freeTextInvoiceHeaderFooterTmp.CompanyBankName = this.parmCompanyBankAccountTable().Name;
        freeTextInvoiceHeaderFooterTmp.OriginalInvoiceReference = this.parmOriginalInvoiceIds();
        freeTextInvoiceHeaderFooterTmp.SalesDate = custInvoiceJour_W.SalesDate_W;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL, #isoRU]) && _custInvoiceJour.InvoiceAccount != _custInvoiceJour.OrderAccount)
        {
            freeTextInvoiceHeaderFooterTmp.BuyerAddress = buyer.postalAddress().Address;
            freeTextInvoiceHeaderFooterTmp.BuyerName = buyer.name();
        }
        else
        {
            freeTextInvoiceHeaderFooterTmp.BuyerAddress = _custInvoiceJour.deliveryAddress();
            freeTextInvoiceHeaderFooterTmp.BuyerName = _custInvoiceJour.DeliveryName;
        }

        if (_custInvoiceJour.InvoiceAccount != _custInvoiceJour.OrderAccount)
        {
            freeTextInvoiceHeaderFooterTmp.ShowPayer = true;
            if (isoCountryCode == #isoLT)
            {
                freeTextInvoiceHeaderFooterTmp.PayerEnterpriseCode = payer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
            }
        }

        if (currencyBankAccountTable && _custInvoiceJour.CurrencyCode != Ledger::accountingCurrency(companyInfo.RecId))
        {
            freeTextInvoiceHeaderFooterTmp.ShowCurrencyBankAccount = true;

            freeTextInvoiceHeaderFooterTmp.CompanyCurrencyBankAccount = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                strFmt('%1 %2', currencyBankAccountTable.RegistrationNum, currencyBankAccountTable.AccountNum) : "@AccountsReceivable:FiveAsterisk";

            freeTextInvoiceHeaderFooterTmp.Iban = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, IBAN)) ?
                currencyBankAccountTable.iban : "@AccountsReceivable:FiveAsterisk";

            freeTextInvoiceHeaderFooterTmp.CompanyCurrencyBankName = currencyBankAccountTable.Name;
            freeTextInvoiceHeaderFooterTmp.BankSpecificSymbol = currencyBankAccountTable.SpecificSymbol;
            freeTextInvoiceHeaderFooterTmp.SwiftNumber = currencyBankAccountTable.swiftNo;
        }
        else
        {
            freeTextInvoiceHeaderFooterTmp.ShowCurrencyBankAccount = false;

            freeTextInvoiceHeaderFooterTmp.Iban = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, IBAN)) ?
                this.parmCompanyBankAccountTable().iban : "@AccountsReceivable:FiveAsterisk";

            freeTextInvoiceHeaderFooterTmp.SwiftNumber = this.parmCompanyBankAccountTable().swiftNo;
            freeTextInvoiceHeaderFooterTmp.BankSpecificSymbol = this.parmCompanyBankAccountTable().SpecificSymbol;
        }

        switch (isoCountryCode)
        {
            case #isoEE:
                freeTextInvoiceHeaderFooterTmp.CompanyURL = _companyInfo.url();
                freeTextInvoiceHeaderFooterTmp.CompanyEmail = _companyInfo.email();
                break;

            case #isoLV:
                customerBankAccount = CustBankAccount::find(_custInvoiceJour.InvoiceAccount, custInvoiceJour_W.CustBankAccount_LV);

                if (customerBankAccount)
                {
                    freeTextInvoiceHeaderFooterTmp.CustomerBankAccount = hasFieldAccess(tableNum(CustBankAccount), fieldNum(CustBankAccount, AccountNum)) ?
                        strFmt('%1 %2', customerBankAccount.RegistrationNum, customerBankAccount.AccountNum) : "@AccountsReceivable:FiveAsterisk";

                    freeTextInvoiceHeaderFooterTmp.CustomerBankName = customerBankAccount.Name;
                }

                freeTextInvoiceHeaderFooterTmp.SpecialFormattedDocumentDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(_custInvoiceJour.DocumentDate, false, true);
                freeTextInvoiceHeaderFooterTmp.SpecialFormattedInvoiceDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(_custInvoiceJour.InvoiceDate, false, true);
                freeTextInvoiceHeaderFooterTmp.SpecialFormattedPrintDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), false, true);
                break;

            case #isoHU:
                freeTextInvoiceHeaderFooterTmp.PayerRegNum_W = payer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
                freeTextInvoiceHeaderFooterTmp.BuyerRegNum_W = buyer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
                freeTextInvoiceHeaderFooterTmp.VatDueDate_W = this.getVatDueDate(_custInvoiceJour);
                break;

            case #isoCZ:
                freeTextInvoiceHeaderFooterTmp.PayerRegNum_W = payer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
                freeTextInvoiceHeaderFooterTmp.BuyerRegNum_W = buyer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
                freeTextInvoiceHeaderFooterTmp.VatDueDate_W = this.getVatDueDate(_custInvoiceJour);
                freeTextInvoiceHeaderFooterTmp.RegNumCompaniesFieldMap::initCommercialRegisterFromTaxRegistration(companyInfo, _custInvoiceJour.InvoiceDate);
                freeTextInvoiceHeaderFooterTmp.ConstantSymbol = BankConstantSymbol::find(CustInvoiceJourSymbol::findByCustInvoiceJour(_custInvoiceJour.RecId).BankConstantSymbol).ConstantSymbol;
                break;

            case #isoPL:
                CustInvoiceJour_PL custInvoiceJourPl = CustInvoiceJour_PL::findByCustInvoiceJour(_custInvoiceJour.RecId);
                if (custInvoiceJourPl.FiscalOrderAccount_PL)
                {
                    freeTextInvoiceHeaderFooterTmp.BuyerAddress = custInvoiceJourPl.fiscalOrderAddressing_PL();
                    freeTextInvoiceHeaderFooterTmp.BuyerName    = custInvoiceJourPl.fiscalOrderName_PL();
                }
                if (custInvoiceJourPl.FiscalInvoiceAccount_PL)
                {
                    freeTextInvoiceHeaderFooterTmp.InvoicingName    = custInvoiceJourPl.fiscalInvoiceName_PL();
                    freeTextInvoiceHeaderFooterTmp.InvoiceAccount   = custInvoiceJourPl.FiscalInvoiceAccount_PL;
                    freeTextInvoiceHeaderFooterTmp.InvoicingAddress = custInvoiceJourPl.fiscalInvoiceAddressing_PL();
                }
                freeTextInvoiceHeaderFooterTmp.VatDueDate_W = this.getVatDueDate(_custInvoiceJour);
                custInvoiceDuplicateTable = CustInvoiceDuplicateTable_W::find(custInvoiceDuplicateTableRecId);
                freeTextInvoiceHeaderFooterTmp.DuplicateDate = custInvoiceDuplicateTable.DuplicateDate;
                freeTextInvoiceHeaderFooterTmp.DuplicateNum = custInvoiceDuplicateTable.DuplicateNum;
                break;

            case #isoLT:
                freeTextInvoiceHeaderFooterTmp.BuyerEnterpriseCode = buyer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVatDueDate</Name>
				<Source><![CDATA[
    private VatDueDate_W getVatDueDate(CustInvoiceJour _custInvoiceJour)
    {
        return _custInvoiceJour.isProforma() 
            ? this.findCustInvoiceTableForProforma(_custInvoiceJour).VatDueDate_W 
            : _custInvoiceJour.vatDueDate_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data from the contract class.
    /// </summary>
    public void getDataFromContract()
    {
        contract = this.parmDataContract() as FreeTextInvoiceContract;
        formLetterTxt = contract.parmFormLetterTxt();
        this.parmPrintCopyOriginal(contract.parmPrintCopyOriginal());
        this.parmCustInvoiceJour(CustInvoiceJour::findRecId(contract.parmCustInvoiceJourRecId()));

        if (this.parmCustInvoiceJour().isProforma())
        {
            RecId formLetterPrintRecId = contract.parmFormletterProformaPrintRecId();

            if (formLetterPrintRecId)
            {
                ttsbegin;

                SrsTmpDataStore srsTmpDataStore;

                select forupdate firstonly Value from srsTmpDataStore
                    where srsTmpDataStore.RecId == formLetterPrintRecId;

                if (srsTmpDataStore.RecId)
                {
                    formletterProformaPrint = FormletterProformaPrint::newUnpack(srsTmpDataStore.Value);
                    srsTmpDataStore.delete();
                }

                ttscommit;
            }
        }
        // <GTH>
        isUnrealizedVATEnabled = TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled();
        if (isUnrealizedVATEnabled)
        {
            isTaxInvoice = contract.parmIsTaxInvoice();
            documentPrintHeader = contract.parmPrintHeader();
            this.setIsSalesInvoiceDP_TH(false);
            this.initItemTypeByProdType_TH(contract.parmProdType());
            custInvoiceJourAdjustment = CustInvoiceJourAdjustment::findRecId(contract.parmAdjustmentRecId_TH());
        }
        // </GTH>

        // <GEEPL>
        if (isoCountryCode == #isoPL)
        {
            custInvoiceDuplicateTableRecId = contract.parmCustInvoiceDuplicateRecId();
        }
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNote</Name>
				<Source><![CDATA[
    public Notes getDocumentNote(Common _common, CustFormletterDocument _custFormletterDocument)
    {
        Notes notes;
        var docuOnFormular = this.getDocuOnFormular(_common);

        if (_custFormletterDocument.DocuOnFreeTextInvoice == docuOnFormular ||
            _custFormletterDocument.DocuOnFreeTextInvoice == DocuOnFormular::All)
        {
            var docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(_common,
                                                                       _custFormletterDocument.DocuTypeFreeTextInvoice,
                                                                       DocuRestriction::External);
            notes = Docu::concatDocuRefNotes(docuRefSearch);
        }

        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFreeTextInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>FreeTextInvoiceHeaderFooterTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data in the <c>FreeTextInvoiceHeaderFooterTmp</c> table.
    /// </returns>
    [SRSReportDataSet(tableStr(FreeTextInvoiceHeaderFooterTmp))]
    public FreeTextInvoiceHeaderFooterTmp getFreeTextInvoiceHeaderFooterTmp()
    {
        select freeTextInvoiceHeaderFooterTmp;
        return freeTextInvoiceHeaderFooterTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDocuBrandDetailsRegular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SysDocuBrandDetailsRegular</c> table.
    /// </summary>
    /// <returns>
    /// The <c>SysDocuBrandDetailsRegular</c> table.
    /// </returns>
    [SRSReportDataSet(tableStr(SysDocuBrandDetailsRegular))]
    public SysDocuBrandDetailsRegular getSysDocuBrandDetailsRegular()
    {
        select docuBrandDetails;
        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFreeTextInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>FreeTextInvoiceLocalizationTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data in the <c>FreeTextInvoiceLocalizationTmp</c> table.
    /// </returns>
    [SRSReportDataSet(tableStr(FreeTextInvoiceLocalizationTmp))]
    public FreeTextInvoiceLocalizationTmp getFreeTextInvoiceLocalizationTmp()
    {
        select freeTextInvoiceLocalizationTmp;
        return freeTextInvoiceLocalizationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFreeTextInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the temporary <c>CustInterestNoteTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data in the <c>FreeTextInvoiceTmp</c> table.
    /// </returns>
    [SRSReportDataSet(tableStr(FreeTextInvoiceTmp))]
    public FreeTextInvoiceTmp getFreeTextInvoiceTmp()
    {
        select freeTextInvoiceTmp;
        return freeTextInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoicePaymentStubTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>SalesInvoicePaymentStubTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>SalesInvoicePaymentStubTmp</c> table.
    /// </returns>
    [SRSReportDataSet(tableStr(SalesInvoicePaymentStubTmp))]
    public SalesInvoicePaymentStubTmp getSalesInvoicePaymentStubTmp()
    {
        select salesInvoicePaymentStubTmp;
        return salesInvoicePaymentStubTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupPeriodChargeFreeTextInvoiceTmp</Name>
				<Source><![CDATA[
    [SRSReportDataSet(tableStr(MarkupPeriodChargeFreeTextInvoiceTmp)), Hookable(false)]
    public MarkupPeriodChargeFreeTextInvoiceTmp getMarkupPeriodChargeFreeTextInvoiceTmp()
    {
        select freeTextInvoicePeriodChargeTmp;
        return freeTextInvoicePeriodChargeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init(CustInvoiceJour _custInvoiceJour)
    {
        TmpTaxWorkTrans tmpTaxWorkTrans;

        super(_custInvoiceJour);

        if (_custInvoiceJour.creditNote())
        {
            isInvoiceCreditNote = true;
        }

        if (CustInvoiceJourCacheTaxBalanceDPInitFlight::instance().isEnabled())
        {
            TmpTaxWorkTrans tmpTaxWorkTransObj = this.tmpTaxWorkTrans(_custInvoiceJour);
            
            cachedTaxableBalance = _custInvoiceJour.taxableBalance(tmpTaxWorkTransObj);
            cachedTaxableBalanceEuro = _custInvoiceJour.amountCur2Euro(cachedTaxableBalance);
            cachedTaxFreeBalance = _custInvoiceJour.netAmount() - cachedTaxableBalance - _custInvoiceJour.reverseChargeBalance(tmpTaxWorkTransObj);
            cachedTaxFreeBalanceEuro = _custInvoiceJour.amountCur2Euro(cachedTaxFreeBalance);
            cachedCashDiscEuro = _custInvoiceJour.amountCur2Euro(_custInvoiceJour.CashDisc);
        }
        else
        {
            tmpTaxWorkTrans = this.tmpTaxWorkTrans(_custInvoiceJour);

            cachedTaxableBalanceEuro = _custInvoiceJour.taxableBalanceEuro(this.tmpTaxWorkTrans(_custInvoiceJour));
            cachedTaxFreeBalanceEuro = _custInvoiceJour.taxFreeBalanceEuro(this.tmpTaxWorkTrans(_custInvoiceJour));
            cachedTaxableBalance = _custInvoiceJour.taxableBalance(this.tmpTaxWorkTrans(_custInvoiceJour));
            cachedTaxFreeBalance = _custInvoiceJour.taxFreeBalance(this.tmpTaxWorkTrans(_custInvoiceJour));
            cachedCashDiscEuro = _custInvoiceJour.amountCur2Euro(_custInvoiceJour.CashDisc);
        }

        //<GEEU>
        if (conFind(#easternEuropeAll, isoCountryCode))
        {
            cachedTaxFreeBalanceMST = _custInvoiceJour.taxFreeBalanceMST(this.tmpTaxWorkTrans(_custInvoiceJour));
            cachedTaxableBalanceMST = _custInvoiceJour.taxableBalanceMST(this.tmpTaxWorkTrans(_custInvoiceJour));
            cachedEuroExchangeRate = this.getEuroExchangeRate(_custInvoiceJour);
            cachedNetAmountMST = _custInvoiceJour.netAmountMST();
        }
        //</GEEU>

        if (custFormLetterParameters.PrePrintLevelFreeTextInvoice == PrePrintLevel::BlankPaper)
        {
            companyLogo = FormLetter::companyLogo();
        }

        this.initGiro(_custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGiro</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the Giro data.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record that contains the invoice data.
    /// </param>
    protected void initGiro(CustInvoiceJour _custInvoiceJour)
    {
        moneyTransferSlip = PaymMoneyTransferSlip::construct(_custInvoiceJour.GiroType);

        switch (_custInvoiceJour.GiroType)
        {
            case PaymentStub::ESR_orange:
            case PaymentStub::ESR_red_bank:
                moneyTransferSlip_CH = moneyTransferSlip;
                break;

            case PaymentStub::BelSMS101:
            case PaymentStub::BelSMS102:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBE00005, funcName());
                moneyTransferSlip_BE = moneyTransferSlip;
                break;

            case PaymentStub::Finnish:
                moneyTransferSlip_FI = moneyTransferSlip;
                break;
        }

        moneyTransferSlip.init(_custInvoiceJour.GiroType);

        if (_custInvoiceJour.GiroType == PaymentStub::ESR_red_bank ||
           _custInvoiceJour.GiroType == PaymentStub::ESR_orange)
        {
            moneyTransferSlip_CH.initOCRLine_CH(_custInvoiceJour);
        }
        else if (_custInvoiceJour.GiroType == PaymentStub::Finnish)
        {
            moneyTransferSlip_FI.initOCRLine_FI();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCreditNoteSummaryLine_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>SalesInvoiceLocalizationTmp</c> table buffer with credit note summary information for the PL country context.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record that has the sales invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    /// <param name = "_correctiveInvoiceTrans_W">
    /// The <c>CustInvoiceTrans_W</c> record that has corrective invoice transaction information.
    /// </param>
    protected void populateCreditNoteSummaryLine_PL(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans, CustInvoiceTrans_W _correctiveInvoiceTrans_W)
    {
        CustInvoiceTrans reverseInvoiceTrans;
        CustInvoiceTrans_W reverseInvoiceTrans_W;
        
        select firstonly Qty, DiscAmount, LineAmount, TaxAmount
                    from reverseInvoiceTrans
                    where reverseInvoiceTrans.SalesId == _custInvoiceTrans.SalesId
                exists join reverseInvoiceTrans_W
                    where reverseInvoiceTrans_W.CustInvoiceTrans == reverseInvoiceTrans.RecId
                       && reverseInvoiceTrans_W.CreditNoteInternalRef_W == _correctiveInvoiceTrans_W.CreditNoteInternalRef_W
                       && reverseInvoiceTrans_W.RefReturnInvoiceTrans_W;

        freeTextInvoiceLocalizationTmp.SummaryLine_PL = NoYes::Yes;
        freeTextInvoiceLocalizationTmp.InvoiceId = _custInvoiceJour.InvoiceId;

        if (!lineNumberInserted)
        {
            lineNumber++;
            freeTextInvoiceLocalizationTmp.LineNumber = lineNumber;

            lineNumberInserted = true;
        }

        freeTextInvoiceLocalizationTmp.Name = _custInvoiceTrans.Name;
        freeTextInvoiceLocalizationTmp.PKWiUCode = this.getInvoiceLinePKWiU(_custInvoiceTrans);
        freeTextInvoiceLocalizationTmp.Qty = _custInvoiceTrans.Qty + reverseInvoiceTrans.Qty;
        freeTextInvoiceLocalizationTmp.SalesUnitTxt = _custInvoiceTrans.salesUnitTxt();
        freeTextInvoiceLocalizationTmp.DiscountAmount = _custInvoiceTrans.DiscAmount + reverseInvoiceTrans.DiscAmount;
        freeTextInvoiceLocalizationTmp.LineAmount = _custInvoiceTrans.LineAmount + reverseInvoiceTrans.LineAmount;
        freeTextInvoiceLocalizationTmp.LineTaxAmount = _custInvoiceTrans.TaxAmount + reverseInvoiceTrans.TaxAmount;
        freeTextInvoiceLocalizationTmp.TaxWriteCode = _custInvoiceTrans.TaxWriteCode;

        if (!_custInvoiceTrans.TaxWriteCode &&
                    _custInvoiceTrans.TaxGroup &&
                    _custInvoiceTrans.TaxItemGroup)
        {
            freeTextInvoiceLocalizationTmp.TaxWriteCode = TaxTable::getTaxWriteCodeVat(_custInvoiceTrans.TaxGroup, _custInvoiceTrans.TaxItemGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCreditNoteSummaryLine_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>SalesInvoiceLocalizationTmp</c> table buffer with credit note summary information for the PL country context.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record that has the sales invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    protected void insertCreditNoteSummaryLine_PL(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        CustInvoiceTrans_W correctiveInvoiceTrans_W;

        if (isoCountryCode == #isoPL &&
            isInvoiceCreditNote &&
            CustFormLetterParameters::isPrintCreditNoteLine_PL(custFormLetterParameters.PrintFTICreditNoteLines_PL, CreditNoteReportLineType_PL::Summary))
        {
            correctiveInvoiceTrans_W = _custInvoiceTrans.custInvoiceTrans_W();

            if (!correctiveInvoiceTrans_W.RefReturnInvoiceTrans_W && correctiveInvoiceTrans_W.CreditNoteInternalRef_W)
            {
                this.populateCreditNoteSummaryLine_PL(_custInvoiceJour, _custInvoiceTrans, correctiveInvoiceTrans_W);

                freeTextInvoiceLocalizationTmp.insert();
                freeTextInvoiceLocalizationTmp.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataInFreeTextInvoiceTmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into <c>FreeTextInvoiceTmp</c> table for IND data.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The record of <c>CustInvoiceJour</c> table.
    /// </param>
    private void insertDataInFreeTextInvoiceTmp_IN(CustInvoiceJour _custInvoiceJour)
    {
        CustInvoiceJour_W custInvoiceJour_W;
        CustInvoiceTrans custInvoiceTrans;
        TaxInformation_IN taxInformation;

        select firstOnly custInvoiceTrans where custInvoiceTrans.InvoiceId == _custInvoiceJour.InvoiceId;
        taxInformation = TaxInformation_IN::find(custInvoiceTrans.custInvoiceTrans_IN().TaxInformation_IN);

        if (TaxParameters::isSalesTaxEnable_IN())
        {
            freeTextInvoiceTmp.ShowCSTNumber_IN = true;
            freeTextInvoiceTmp.SalesTaxNumber_IN = TaxRegistrationNumbers_IN::find(taxInformation.SalesTaxRegistrationNumber).RegistrationNumber;
        }

        if (TaxParameters::isVATEnable_IN())
        {
            freeTextInvoiceTmp.ShowTINNumber_IN = true;
            freeTextInvoiceTmp.TINNumber_IN = TaxRegistrationNumbers_IN::find(taxInformation.tin).RegistrationNumber;
        }

        if (TaxParameters::isServiceTaxEnable_IN())
        {
            freeTextInvoiceTmp.ShowSTCNumber_IN = true;
            freeTextInvoiceTmp.STCNumber_IN = TaxRegistrationNumbers_IN::find(taxInformation.stcRegistrationNumberTable).RegistrationNumber;
        }

        if (TaxParameters::isExciseEnable_IN())
        {
            freeTextInvoiceTmp.ShowECCNumber_IN = true;
            freeTextInvoiceTmp.ECCNumber_IN = TaxRegistrationNumbers_IN::find(taxInformation.ManECCRegistrationNumberTable).RegistrationNumber;
            freeTextInvoiceTmp.ExciseLTUCode_IN = taxInformation.ExciseLTUCode;
        }

        // TaxWithholdTrans_IN
        if (TaxWithholdParameters_IN::isTCSActivate())
        {
            freeTextInvoiceTmp.ShowTaxWithholdTrans_IN = true;

            custInvoiceJour_W = _custInvoiceJour.custInvoiceJour_W();

            if (TaxWithholdEnableIncludeTCSInTotalFeatureToggle::isFeatureEnabled())
            {
                freeTextInvoiceTmp.InvoiceAmount += CurrencyExchange::roundWithRuleType(
                    custInvoiceJour_W.SumTaxWithhold_IN,
                    _custInvoiceJour.CurrencyCode,
                    CurrencyRoundingRuleType::SalesOrder);
            }
            else
            {
                freeTextInvoiceTmp.InvoiceAmount += custInvoiceJour_W.SumTaxWithhold_IN;
            }


            freeTextInvoiceTmp.SumTaxWithhold_IN = custInvoiceJour_W.SumTaxWithhold_IN;
            freeTextInvoiceTmp.SumTaxWithholdEUR_IN = _custInvoiceJour.amountCur2Euro(custInvoiceJour_W.SumTaxWithhold_IN);

            if (taxWithholdSpec)
            {
                freeTextInvoiceTmp.TaxWithholdCode_IN = taxWithholdSpec.taxWithholdCode();
                freeTextInvoiceTmp.SourceRegulateAmountCur_IN = -taxWithholdSpec.taxAmountMST();
                freeTextInvoiceTmp.SourceBaseAmountCur_IN = taxWithholdSpec.taxBaseAmount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateGiroInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the Giro information into the <c>SalesInvoicePaymentStubTmp</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_companyInfo">
    /// The <c>CompanyInfo</c> record that has the company information.
    /// </param>
    protected void populateGiroInformation(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        salesInvoicePaymentStubTmp.CompanyName = cachedCompanyInfoName;
        salesInvoicePaymentStubTmp.CompanyAddress = cachedCompanyInfoAddress;
        salesInvoicePaymentStubTmp.CompanyPhone = cachedCompanyInfoPhone;
        salesInvoicePaymentStubTmp.CompanyGiro = _companyInfo.Giro;
        salesInvoicePaymentStubTmp.InvoiceId = _custInvoiceJour.InvoiceId;
        salesInvoicePaymentStubTmp.InvoiceAccount = _custInvoiceJour.InvoiceAccount;
        salesInvoicePaymentStubTmp.InvoiceAmount = _custInvoiceJour.InvoiceAmount;
        salesInvoicePaymentStubTmp.RemainAmountToBePaid = _custInvoiceJour.InvoiceAmount - cachedPrepaidAmount;
        SalesInvoicePaymentStubTmp.CustInvoiceJourDueDate = _custInvoiceJour.DueDate;

        salesInvoicePaymentStubTmp.GiroType = _custInvoiceJour.GiroType;

        this.postPopulateGiroInformation(_custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPopulateGiroInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Post populates the Giro information into the <c>SalesInvoicePaymentStubTmp</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceJour">
    ///     The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    protected void postPopulateGiroInformation(CustInvoiceJour _custInvoiceJour)
    {
        switch (_custInvoiceJour.GiroType)
        {
            case PaymentStub::FIK751:
            case PaymentStub::FIK752:
                salesInvoicePaymentStubTmp.InvoiceName = cachedInvoicingName;
                salesInvoicePaymentStubTmp.InvoiceAddress = _custInvoiceJour.invoiceAccountAddress();
                salesInvoicePaymentStubTmp.InvoiceAmountDecimals = this.invoiceAmountDecimals(_custInvoiceJour);
                salesInvoicePaymentStubTmp.InvoiceAmountNoDecimals = this.invoiceAmountNoDecimals(_custInvoiceJour);
                salesInvoicePaymentStubTmp.OcrField = this.ocrField(_custInvoiceJour);
                salesInvoicePaymentStubTmp.fiCreditorID_DK = this.fiCreditorId();
                break;

            case PaymentStub::BBS:
                salesInvoicePaymentStubTmp.InvoiceName = cachedInvoicingName;
                salesInvoicePaymentStubTmp.InvoiceAddress = _custInvoiceJour.invoiceAccountAddress();
                salesInvoicePaymentStubTmp.OcrField = this.ocrField(_custInvoiceJour);
                salesInvoicePaymentStubTmp.InvoiceAmountDecimals = this.invoiceAmountDecimals(_custInvoiceJour);
                salesInvoicePaymentStubTmp.InvoiceAmountNoDecimals = this.invoiceAmountNoDecimals(_custInvoiceJour);
                salesInvoicePaymentStubTmp.AmountCheckId = this.amountCheckId(_custInvoiceJour);
                break;

            case PaymentStub::ESR_red_bank:
                salesInvoicePaymentStubTmp.BankGroupIdName_CH = this.bankGroupIdName_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.BankZipCode_CH = this.bankZipCode_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.Description_CH = "@SYS12128";
                salesInvoicePaymentStubTmp.PaymentRef1_CH = moneyTransferSlip_CH.ocr_paymentRef1();
                salesInvoicePaymentStubTmp.PaymentRef2_CH = moneyTransferSlip_CH.ocr_paymentRef2();
                salesInvoicePaymentStubTmp.BankAccountTable_AccountNum_CH = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                                                                                this.bankAccountTable_AccountNum_CH(_custInvoiceJour) : "@AccountsReceivable:FiveAsterisk";
                salesInvoicePaymentStubTmp.BankAccountTable_Clearing_CH = this.bankAccountTable_Clearing_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.InvoiceAmountNoDecimals = this.amountNoDecimals_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.InvoiceAmountDecimals = this.amountDecimals_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.PaymentId2_PaymentId3_CH = this.paymentId2_PaymentId3_CH();
                salesInvoicePaymentStubTmp.CustName_CH = CustTable::find(_custInvoiceJour.InvoiceAccount).name();
                salesInvoicePaymentStubTmp.CustAddress_CH = CustTable::find(_custInvoiceJour.InvoiceAccount).postalAddress().Address;
                salesInvoicePaymentStubTmp.LayoutCode_CH = moneyTransferSlip_CH.layoutCode();
                salesInvoicePaymentStubTmp.OcrLine_CH = moneyTransferSlip_CH.ocrLine();
                salesInvoicePaymentStubTmp.AccountNo2_CH = this.accountNo2_CH();
                break;

            case PaymentStub::ESR_orange:
                salesInvoicePaymentStubTmp.InvoiceAmountNoDecimals = this.amountNoDecimals_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.InvoiceAmountDecimals = this.amountDecimals_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.CurrencyCodeISO_CH = this.currencyCodeISO_CH();
                salesInvoicePaymentStubTmp.AccountNo1_CH = moneyTransferSlip_CH.ocr_AccountNo1();
                salesInvoicePaymentStubTmp.PaymentId2_PaymentId3_CH = this.paymentId2_PaymentId3_CH();
                salesInvoicePaymentStubTmp.CustName_CH = CustTable::find(_custInvoiceJour.InvoiceAccount).name();
                salesInvoicePaymentStubTmp.CustAddress_CH = CustTable::find(_custInvoiceJour.InvoiceAccount).postalAddress().Address;
                salesInvoicePaymentStubTmp.LayoutCode_CH = moneyTransferSlip_CH.layoutCode();
                salesInvoicePaymentStubTmp.OcrLine_CH = moneyTransferSlip_CH.ocrLine();
                break;

            case PaymentStub::Finnish:
                salesInvoicePaymentStubTmp.AccountNum1_FI = this.accountNum1_FI();
                salesInvoicePaymentStubTmp.AccountNum2_FI = this.accountNum2_FI();
                salesInvoicePaymentStubTmp.AccountNum3_FI = this.accountNum3_FI();
                salesInvoicePaymentStubTmp.AccountNum4_FI = this.accountNum4_FI();
                salesInvoicePaymentStubTmp.AccountNum5_FI = this.accountNum5_FI();
                salesInvoicePaymentStubTmp.AccountNum6_FI = this.accountNum6_FI();
                salesInvoicePaymentStubTmp.InvoiceName = cachedInvoicingName;
                salesInvoicePaymentStubTmp.InvoiceAddress = _custInvoiceJour.invoiceAccountAddress();
                salesInvoicePaymentStubTmp.InvoiceReferenceNumberFI = _custInvoiceJour.invoiceReferenceNumberFI();
                salesInvoicePaymentStubTmp.OcrLine_FI = this.ocrLine_FI(_custInvoiceJour);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGiroInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the Giro information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_companyInfo">
    /// The <c>CompanyInfo</c> record that has the company information.
    /// </param>
    protected void insertGiroInformation(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        // GIRO: Remove this block of code when GIRO no longer prints as a separate report
        if (GiroReportController::needGiroReport(_custInvoiceJour.GiroType) && !isPaymentStubRecordInserted)
        {
            this.populateGiroInformation(_custInvoiceJour, _companyInfo);
            salesInvoicePaymentStubTmp.insert();
            isPaymentStubRecordInserted = true;

            GiroReportTmp::populate(this.parmUserConnection(), salesInvoicePaymentStubTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFreeTextInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the invoice header information into the <c>FreeTextInvoiceHeaderFooterTmp</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_companyInfo">
    /// The <c>CompanyInfo</c> record that has the company information.
    /// </param>
    protected void populateFreeTextInvoiceHeaderFooterTmp(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        // <GTH>
        DirPartyLocation dirPartyLocation;
        TaxInformation_TH taxInformation_TH;
        // </GTH>
        RefRecId custBillingClassification;
        container correctedInvoiceInfo = this.correctedInvoiceInfo(_custInvoiceJour.InvoiceId);

        freeTextInvoiceHeaderFooterTmp.clear();
        freeTextInvoiceHeaderFooterTmp.CompanyRegNum = _companyInfo.RegNum;
        freeTextInvoiceHeaderFooterTmp.SalesAdministrator = cachedSalesAdministratorName;
        freeTextInvoiceHeaderFooterTmp.SalesAdministratorPhone = cachedSalesAdministratorPhone;
        freeTextInvoiceHeaderFooterTmp.SalesAdministratorEmail = cachedSalesAdministratorEmail;
        freeTextInvoiceHeaderFooterTmp.CompanyGiro = _companyInfo.Giro;
        freeTextInvoiceHeaderFooterTmp.CompanyEnterpriseNumber = _companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);

        if (custFormLetterParameters.PrePrintLevelInvoice == PrePrintLevel::BlankPaper && custFormLetterParameters.PrintFreeTextInvoiceVATNum)
        {
            freeTextInvoiceHeaderFooterTmp.ShowCompanyVATNum = true;
        }

        freeTextInvoiceHeaderFooterTmp.InvoiceDate = _custInvoiceJour.InvoiceDate;
        freeTextInvoiceHeaderFooterTmp.DocumentDate = _custInvoiceJour.DocumentDate;

        freeTextInvoiceHeaderFooterTmp.CompanyName = cachedCompanyInfoName;
        freeTextInvoiceHeaderFooterTmp.CompanyAddress = cachedCompanyInfoAddress;
        freeTextInvoiceHeaderFooterTmp.CompanyPhone = cachedCompanyInfoPhone;
        freeTextInvoiceHeaderFooterTmp.CompanyTeleFax = cachedCompanyInfoTeleFax;

        freeTextInvoiceHeaderFooterTmp.CompanyCoRegNum = _companyInfo.CoRegNum;
        
        // Call getLegalEntityTaxID of TaxTransactionTaxID to fetch the CompanyVATNum, when support multiple VAT registration numbers feature is enabled.
        freeTextInvoiceHeaderFooterTmp.CompanyVATNum = TaxTransactionTaxIDHelper::getTaxID(
            _custInvoiceJour.TableId,
            _custInvoiceJour.RecId,
            _custInvoiceJour.InvoiceDate).getLegalEntityTaxID();

        freeTextInvoiceHeaderFooterTmp.CompanyCurrencyCode = Ledger::accountingCurrency();
        if (isoCountryCode == #isoLT)
        {
            freeTextInvoiceHeaderFooterTmp.CompanyEnterpriseCode = _companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
        }
        freeTextInvoiceHeaderFooterTmp.CompanyLogo = companyLogo;
        freeTextInvoiceHeaderFooterTmp.CompanyDebitDirectId = BankAccountTable::findByCompany(_companyInfo.DataArea, _companyInfo.Bank).DebitDirectId;

        if (_companyInfo.PrintEnterpriseregister_NO)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00011, funcName());
            freeTextInvoiceHeaderFooterTmp.Enterpriseregister_NO = SysLabel::labelId2String(literalStr("@SYS4002065"),
                                                                                            _custInvoiceJour.LanguageId ? _custInvoiceJour.LanguageId : infolog.language());
        }

        freeTextInvoiceHeaderFooterTmp.InvoicingName = _custInvoiceJour.InvoicingName;
        freeTextInvoiceHeaderFooterTmp.InvoicingAddress = cachedInvoicingAddress;
        freeTextInvoiceHeaderFooterTmp.ContactPersonName = cachedContactPersonName;

        TaxRegistrationNumber taxRegistrationNum;
        if (TaxRegistration::useTAXIDRegNum_W())
        {
            taxRegistrationNum = TaxRegistration::getTAXIDRegNumFromInvoiceJour_W(_custInvoiceJour);
        }

        freeTextInvoiceHeaderFooterTmp.VatNum = taxRegistrationNum ? taxRegistrationNum : _custInvoiceJour.vatNum;
        freeTextInvoiceHeaderFooterTmp.TaxLicenseNum = cachedTaxLicenseNum;
        freeTextInvoiceHeaderFooterTmp.CustomerRef = _custInvoiceJour.CustomerRef;
        freeTextInvoiceHeaderFooterTmp.PaymentCondition = cachedPaymentCondition;
        freeTextInvoiceHeaderFooterTmp.InvoiceAccount = _custInvoiceJour.InvoiceAccount;
        freeTextInvoiceHeaderFooterTmp.PrintFreeTextInvoiceVATNum = custFormLetterParameters.PrintFreeTextInvoiceVATNum;
        freeTextInvoiceHeaderFooterTmp.CustInvoiceRefNum_FI = custParameters.CustInvoiceRefNum_FI;
        freeTextInvoiceHeaderFooterTmp.EnterpriseNumber = _custInvoiceJour.EnterpriseNumber;
        freeTextInvoiceHeaderFooterTmp.InvoiceReferenceNumber = _custInvoiceJour.invoiceReferenceNumberFI();
        freeTextInvoiceHeaderFooterTmp.NotesLine_FR = this.overdueFineTxt_FR();

        if (isoCountryCode == #isoJP)
        {
            CustInvoiceQualifiedInvoiceIssuerParameters custInvoiceQualifiedInvoiceIssuerParameters =  new CustInvoiceQualifiedInvoiceIssuerParameters(InvoiceType_JP::FreeTextInvoice);
            freeTextInvoiceHeaderFooterTmp.ShowQIINum = custInvoiceQualifiedInvoiceIssuerParameters.parmShowQIINumber();
            freeTextInvoiceHeaderFooterTmp.ShowQIILabel = custInvoiceQualifiedInvoiceIssuerParameters.parmShowQIILabel();
            freeTextInvoiceHeaderFooterTmp.QIINum = custInvoiceQualifiedInvoiceIssuerParameters.parmQIINumber();
        }

        // <GTH>
        if (isUnrealizedVATEnabled)
        {
            dirPartyLocation = DirPartyLocation::findByPartyLocation(
                _custInvoiceJour.custTable_InvoiceAccount().Party,
                LogisticsPostalAddress::getLocation(_custInvoiceJour.InvoicePostalAddress));

            taxInformation_TH = TaxInformation_TH::find(dirPartyLocation.Location);

            freeTextInvoiceHeaderFooterTmp.InvoiceTxt = this.invoiceTxt_TH(_custInvoiceJour);
            freeTextInvoiceHeaderFooterTmp.InvoiceTxtNote_TH = SalesInvoiceDPBase::invoiceTxtNote_TH(_custInvoiceJour, custInvoiceJourAdjustment, PrintCopyOriginal);
            freeTextInvoiceHeaderFooterTmp.InvoiceTaxNatureOfAddress_TH = taxInformation_TH.TaxNatureOfAddress;
            freeTextInvoiceHeaderFooterTmp.CompanyBranch_TH = TaxBranch::findByLocationId(
                DirPartyLocation::findPrimaryPartyLocation(_companyInfo.RecId).Location).Code;

            if (custInvoiceJourAdjustment)
            {
                freeTextInvoiceHeaderFooterTmp.initFromCustInvoiceJourAdjustment_TH(custInvoiceJourAdjustment);
            }
            else
            {
                freeTextInvoiceHeaderFooterTmp.InvoiceBranch_TH = taxInformation_TH.BranchNumber;
                freeTextInvoiceHeaderFooterTmp.InvoiceBranchName_TH = LogisticsLocation::find(taxInformation_TH.LogisticsLocation).Description;
                freeTextInvoiceHeaderFooterTmp.InvoiceTaxRegNumber_TH = TaxRegistration::getTaxRegistrationFromInvoiceJour_TH(_custInvoiceJour).RegistrationNumber;
                freeTextInvoiceHeaderFooterTmp.CustomerPhone_TH = _custInvoiceJour.custTable_InvoiceAccount().phone();
                freeTextInvoiceHeaderFooterTmp.CustomerTeleFax_TH = _custInvoiceJour.custTable_InvoiceAccount().telefax();
            }
        }
        else
        {
            freeTextInvoiceHeaderFooterTmp.InvoiceTxt = this.invoiceTxt(_custInvoiceJour);
        }
        // <GTH>

        freeTextInvoiceHeaderFooterTmp.PaymentReference = this.paymentReference(_custInvoiceJour);
        freeTextInvoiceHeaderFooterTmp.IsPaymIdVisible = (isoCountryCode == #isoNO);
        freeTextInvoiceHeaderFooterTmp.IsCreditInvoicingReportEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES, #isoSE, #isoPL])
            && this.isCreditInvoicingReportEnabled(_custInvoiceJour);

        freeTextInvoiceHeaderFooterTmp.IsCreditInvoicingReportEnabled_W = CustVendCreditInvoicingTable::useCreditInvoicingReporting()
            && this.isCreditInvoicingReportEnabled(_custInvoiceJour);

        freeTextInvoiceHeaderFooterTmp.PaymId = _custInvoiceJour.getPaymentId(isoCountryCode);
        freeTextInvoiceHeaderFooterTmp.CorrectedInvoiceId = correctedInvoiceId;
        freeTextInvoiceHeaderFooterTmp.CorrectiveReasonHeader = correctiveReason_header;
        freeTextInvoiceHeaderFooterTmp.OriginalInvoiceAmount = originalInvoiceAmount;
        freeTextInvoiceHeaderFooterTmp.OriginalVatAmount = originalInvoiceVATAmount;

        custBillingClassification = _custInvoiceJour.custInvoiceTable().CustBillingClassification;

        if (custBillingClassification)
        {
            freeTextInvoiceHeaderFooterTmp.CustBillingClassification = CustBillingClassification::find(custBillingClassification).BillingClassification;
        }

        // If it is a Corrected Invoice. Insert Correction reason and Original Invoice number.
        if (conLen(correctedInvoiceInfo) == 2)
        {
            freeTextInvoiceHeaderFooterTmp.OriginalInvoice = conPeek(correctedInvoiceInfo, 1);
            freeTextInvoiceHeaderFooterTmp.CorrectionReason = conPeek(correctedInvoiceInfo, 2);
            freeTextInvoiceHeaderFooterTmp.InvoiceTxt = "@AccountsReceivable:CorrectiveFreeTextInvoiceHeaderLabel";
        }

        // <GEEU>
        if (conFind(#easternEuropeAll, isoCountryCode))
        {
            this.generateInvoiceHeaderLocalizationData(_custInvoiceJour, _companyInfo);
        }
        // </GEEU>

        // <GMY>
        if (isoCountryCode == #isoMY)
        {
            freeTextInvoiceHeaderFooterTmp.InvoiceType_MY = _custInvoiceJour.custInvoiceJour_W().InvoiceType_MY;

            if (isGSTInvoice)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMY00002, funcName());
                freeTextInvoiceHeaderFooterTmp.CompanyCoRegNum = TaxGSTHelper_MY::getGSTRegistrationNumber(_custInvoiceJour.InvoiceDate);
                freeTextInvoiceHeaderFooterTmp.GSTReasonCode_MY = debitCreditNoteReasonCode_MY;
            }
        }
        // </GMY>

        if (isoCountryCode == #isoFR)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFR00003, funcName());
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFR00023, funcName());
            freeTextInvoiceHeaderFooterTmp.CompanyRegComFR             = _companyInfo.CompanyRegComFR;
            freeTextInvoiceHeaderFooterTmp.CompanyLegalFormFR          = _companyInfo.LegalFormFR;
            freeTextInvoiceHeaderFooterTmp.CompanyIdNAF                = CompanyNAFCode::find(_companyInfo.CompanyNAFCode).CompanyIdNAF;
            freeTextInvoiceHeaderFooterTmp.CompanyInitialCapital_FR    = _companyInfo.CompanyInitialCapital_FR;
        }

        if (conFind(CustParameters::listOfCountriesForCreditNoteCashDisc(), isoCountryCode))
        {
            CustTrans custTransOrig = CustTrans::find(_custInvoiceJour.custInvoiceJour_W().CashDiscOrigInvoiceCustTrans_CZ);
            if (custTransOrig)
            {
                freeTextInvoiceHeaderFooterTmp.OriginalInvoiceInfo_W = strFmt("@SYS26868", custTransOrig.Invoice, custTransOrig.TransDate);
                freeTextInvoiceHeaderFooterTmp.ReasonComment_W = ReasonTableRef::find(_custInvoiceJour.ReasonTableRef).ReasonComment;
            }
        }

        if (isoCountryCode == #isoAE)
        {
            freeTextInvoiceHeaderFooterTmp.RegistrationNumber_AE = _custInvoiceJour.custTable_InvoiceAccount().registrationNumber();
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoFreeTextInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice header information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_companyInfo">
    /// The <c>CompanyInfo</c> record that has the company information.
    /// </param>
    /// <remarks>
    /// This method will insert the invoice header information into <c>FreeTextInvoiceHeaderFooterTmp</c> table.
    /// </remarks>
    protected void insertIntoFreeTextInvoiceHeaderFooterTmp(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        this.populateFreeTextInvoiceHeaderFooterTmp(_custInvoiceJour, _companyInfo);
                
        // set Document Branding Header;
        this.setSysDocuBrandDetails(_custInvoiceJour);

        freeTextInvoiceHeaderFooterTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SysDocuBrandDetailsRegular</c> table with header details.
    /// </summary>
    [Wrappable(true)]
    protected final void setSysDocuBrandDetails(CustInvoiceJour _custInvoiceJour)
    {
        SysDocuBrandDetailsRegular bufferTable = SysDocuBrandDetails::getDocuBrandDetailsRegular(this);
        docuBrandDetails.clear();
        docuBrandDetails.setConnection(this.parmUserConnection());
        docuBrandDetails.data(bufferTable.data());
        docuBrandDetails.PaymTermDescription = PaymTerm::find(_custInvoiceJour.Payment).Description;
        docuBrandDetails.PaymDueDate = _custInvoiceJour.custTrans().DueDate;
        docuBrandDetails.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFreeTextInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates invoice details information into the <c>FreeTextInvoiceLocalizationTmp</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    /// <param name="_taxSpec">
    /// The <c>TaxSpec</c> class instance that has the taxes information.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The <c>CustPaymSchedLine</c> record that has the payment schedules information.
    /// </param>
    /// <param name="_prepaymentCustTrans">
    /// The <c>CustTrans</c> record that has the prepayment information.
    /// </param>
    /// <param name="_prepaymentTaxTrans">
    /// The <c>TaxTrans</c> record that has the prepayment taxes information.
    /// </param>
    /// <remarks>
    /// This method will insert the invoice details information into <c>FreeTextInvoiceLocalizationTmp</c>
    /// table which is only used for Eastern European countries and other countries that need customization
    /// from the SYS layer functionality.
    /// </remarks>
    protected void populateFreeTextInvoiceLocalizationTmp(
        CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine = null,
        CustTrans _prepaymentCustTrans = null,
        TaxTrans _prepaymentTaxTrans = null)
    {
        CustInvoiceTrans_W custInvoiceTrans_W;
        boolean taxPrintTaxFreeBalance;
        ReasonComment lineReasonComment;
        // <GEEPL>
        boolean isPrintFTICreditNoteLine;
        // </GEEPL>

        taxPrintTaxFreeBalance = custFormletterParameters.TaxPrintTaxFreeBalance;

        freeTextInvoiceLocalizationTmp.PrePrintLevel = custFormletterParameters.PrePrintLevelFreeTextInvoice;

        freeTextInvoiceLocalizationTmp.IsTaxAmountMSTVisible = this.parmIsTaxAmountMSTVisible();
        freeTextInvoiceLocalizationTmp.ShowTotals = !taxPrintTaxFreeBalance;
        freeTextInvoiceLocalizationTmp.ShowTotalsTaxBalances = taxPrintTaxFreeBalance;
        freeTextInvoiceLocalizationTmp.ShowPayment = !isInvoiceCreditNote && !_custInvoiceJour.PaymentSched;
        freeTextInvoiceLocalizationTmp.ShowTotalsEuro = cachedPrintEuroTotals && !taxPrintTaxFreeBalance;
        freeTextInvoiceLocalizationTmp.ShowTotalsTaxBalancesEuro = cachedPrintEuroTotals && taxPrintTaxFreeBalance;
        freeTextInvoiceLocalizationTmp.PrintEuroTotals = cachedPrintEuroTotals;
        freeTextInvoiceLocalizationTmp.ShowCashDiscOnInvoiceControls = cashDiscOnInvoice;
        freeTextInvoiceLocalizationTmp.ShowSepaNotification = this.showSepaNotification(_custInvoiceJour);

        //Invoice
        freeTextInvoiceLocalizationTmp.InvoiceId = _custInvoiceJour.InvoiceId;
        freeTextInvoiceLocalizationTmp.CustomerRef = _custInvoiceJour.CustomerRef;
        freeTextInvoiceLocalizationTmp.PaymentReference = this.paymentReference(_custInvoiceJour);
        freeTextInvoiceLocalizationTmp.CorrectedInvoiceId = correctedInvoiceId;
        freeTextInvoiceLocalizationTmp.CorrectiveReasonHeader = correctiveReason_header;
        freeTextInvoiceLocalizationTmp.OriginalInvoiceAmount = originalInvoiceAmount;

        if (_custInvoiceTrans)
        {
            freeTextInvoiceLocalizationTmp.LineHeader = this.parmLineHeader();
        }

        freeTextInvoiceLocalizationTmp.PriceIncludeTax = _custInvoiceJour.InclTax;

        //custInvoiceTrans
        if (isoCountryCode == #isoHU || isoCountryCode == #isoPL)
        {
            custInvoiceTrans_W = _custInvoiceTrans.custInvoiceTrans_W();

            freeTextInvoiceLocalizationTmp.LineSign = _custInvoiceJour.creditNote() ?
                (custInvoiceTrans_W.RefReturnInvoiceTrans_W ? '-': '+') : '';

            // <GEEPL>
            if (isoCountryCode == #isoPL)
            {
                if (!custInvoiceTrans_W.RefReturnInvoiceTrans_W && !custInvoiceTrans_W.CreditNoteInternalRef_W)
                {
                    lineNumber++;
                    freeTextInvoiceLocalizationTmp.LineNumber = lineNumber;
                }
                else
                {
                    if (custInvoiceTrans_W.RefReturnInvoiceTrans_W)
                    {
                        lineNumberInserted = false;
                    }

                    isPrintFTICreditNoteLine = CustFormLetterParameters::isPrintCreditNoteLine_PL(
                        custFormLetterParameters.PrintFTICreditNoteLines_PL,
                        custInvoiceTrans_W.RefReturnInvoiceTrans_W ? CreditNoteReportLineType_PL::Reverse : CreditNoteReportLineType_PL::Corrective);

                    if (!lineNumberInserted && isPrintFTICreditNoteLine)
                    {
                        lineNumber++;
                        freeTextInvoiceLocalizationTmp.LineNumber = lineNumber;

                        lineNumberInserted = true;
                    }
                }
            }
            else if (custInvoiceTrans_W.RefReturnInvoiceTrans_W || !_custInvoiceJour.creditNote())
            // </GEEPL>
            {
                // If the line is not a credit note line or a correction line, shows the line number.
                lineNumber = lineNumber + 1;
                freeTextInvoiceLocalizationTmp.LineNumber = lineNumber;
            }

            // <GEEPL>
            if (isoCountryCode == #isoPL && custInvoiceTrans_W.RefReturnInvoiceTrans_W)
            {
                freeTextInvoiceLocalizationTmp.LineTaxAmount = -_custInvoiceTrans.TaxAmount;
            }
            else
            {
                // </GEEPL>
                freeTextInvoiceLocalizationTmp.LineTaxAmount = _custInvoiceTrans.TaxAmount;
                // <GEEPL>
            }
            // </GEEPL>

            if (isoCountryCode == #isoHU)
            {
                freeTextInvoiceLocalizationTmp.ShipmentDate = _custInvoiceJour.ReceiptDateConfirmed_ES;
                freeTextInvoiceLocalizationTmp.IntrastatCode = this.parmIntrastatCode();
                freeTextInvoiceLocalizationTmp.SalesTaxExchangeRate = this.getSalesTaxTransactionExchangeRate(_custInvoiceJour).SalesTaxExchangeRate;
                freeTextInvoiceLocalizationTmp.LineTaxAmount -= this.getExcludedTaxAmount(_custInvoiceJour.LedgerVoucher, _custInvoiceTrans);
            }
            else
            {
                freeTextInvoiceLocalizationTmp.PKWiUCode = this.getInvoiceLinePKWiU(_custInvoiceTrans);
            }
        }

        // fetch SalesTaxExchangeRate from TaxSpecificExchangeRate Table if the TaxSpecificExchangeRateFeature is enabled.
        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(_custInvoiceJour.TableId, _custInvoiceJour.RecId))
        {

            // find sales tax exchangeRateDisplayFactor for displaying salesTaxExchangeRate on Reports
            TaxParameters taxParameters = TaxParameters::find();
            CurrencyCode accountingCurrency = Ledger::accountingCurrency();
            ExchangeRateDisplayFactor exchangeRateDisplayFactor = ExchangeRateCurrencyPair::getExchangeRateDisplayFactor(
                _custInvoiceJour.CurrencyCode,
                accountingCurrency,
                taxParameters.SalesTaxReceivableExchangeRateType,
                true);

            // fetch SalesTaxExchangeRate from TaxSpecificExchangeRate Table
            CurrencyExchangeRate taxSpecificExchangeRate = this.getTaxSpecificExchangeRate(_custInvoiceJour);
            
            // display on FTI report
            if (!accountingCurrency || !exchangeRateDisplayFactor)
            {
                freeTextInvoiceLocalizationTmp.SalesTaxExchangeRate = taxSpecificExchangeRate;
            }
            else
            {
                freeTextInvoiceLocalizationTmp.SalesTaxExchangeRate = CurrencyEuroDenomination::displayStoredExchangeRate_Static(taxSpecificExchangeRate, exchangeRateDisplayFactor);
            }
        }

        freeTextInvoiceLocalizationTmp.Name = _custInvoiceTrans.Name;
        freeTextInvoiceLocalizationTmp.SalesPrice = _custInvoiceTrans.SalesPrice;
        freeTextInvoiceLocalizationTmp.TaxWriteCode = _custInvoiceTrans.TaxWriteCode;

        // <GEEPL>
        if (isoCountryCode == #isoPL && custInvoiceTrans_W.RefReturnInvoiceTrans_W)
        {
            freeTextInvoiceLocalizationTmp.Qty = -_custInvoiceTrans.Qty;
            freeTextInvoiceLocalizationTmp.LineAmount = -_custInvoiceTrans.LineAmount;
        }
        else
        {
            // </GEEPL>
            freeTextInvoiceLocalizationTmp.Qty = _custInvoiceTrans.Qty;
            freeTextInvoiceLocalizationTmp.LineAmount = _custInvoiceTrans.LineAmount;
            // <GEEPL>
        }
        // </GEEPL>

        if (custParameters::isBillingClassificationEnabled())
        {
            freeTextInvoiceLocalizationTmp.BillingCode = _custInvoiceTrans.BillingCode;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
        {
            if (isoCountryCode == #isoPL &&
                !_custInvoiceTrans.TaxWriteCode &&
                _custInvoiceTrans.TaxGroup &&
                _custInvoiceTrans.TaxItemGroup)
            {
                freeTextInvoiceLocalizationTmp.TaxWriteCode = TaxTable::getTaxWriteCodeVat(_custInvoiceTrans.TaxGroup, _custInvoiceTrans.TaxItemGroup);
            }

            freeTextInvoiceLocalizationTmp.PreviousRunningTotal = this.parmPreviousRunningTotal();
            if (!freeTextInvoiceLocalizationTmp.LineTaxAmount && _custInvoiceJour.isProforma())
            {
                freeTextInvoiceLocalizationTmp.LineTaxAmount = Tax::calcTaxAmount(_custInvoiceTrans.TaxGroup,
                    _custInvoiceTrans.TaxItemGroup,
                    _custInvoiceJour.InvoiceDate,
                    (_custInvoiceTrans.CurrencyCode ? _custInvoiceTrans.CurrencyCode : _custInvoiceJour.CurrencyCode),
                    _custInvoiceTrans.LineAmount,
                    TaxModuleType::FreeTxtInvoice);
            }
        }

        freeTextInvoiceLocalizationTmp.SalesUnitTxt = _custInvoiceTrans.salesUnitTxt();

        if (originalInvoiceIds != '')
        {
            // If invoice line is credit note, get the reason comment.
            lineReasonComment = ReasonTableRef::find(_custInvoiceTrans.ReasonRefRecId).ReasonComment;
            if (lineReasonComment != correctiveReason_header)
            {
                // Only shows the reason comment for the line if it is different from the reason comment of the header.
                freeTextInvoiceLocalizationTmp.CorrectiveReasonLines = lineReasonComment;
            }
        }
        else
        {
            freeTextInvoiceLocalizationTmp.CorrectiveReasonLines = correctiveReason_lines;
        }

        freeTextInvoiceLocalizationTmp.LineAmountInclTax = _custInvoiceTrans.LineAmount + _custInvoiceTrans.LineAmountTax ;
        freeTextInvoiceLocalizationTmp.DiscPercent = _custInvoiceTrans.DiscPercent;
        freeTextInvoiceLocalizationTmp.DiscountAmount = _custInvoiceTrans.DiscAmount;

        freeTextInvoiceLocalizationTmp.InvoiceAmount = _custInvoiceJour.InvoiceAmount;
        freeTextInvoiceLocalizationTmp.PrepaidAmount = cachedPrepaidAmount;
        freeTextInvoiceLocalizationTmp.RemainAmountToBePaid = _custInvoiceJour.InvoiceAmount - cachedPrepaidAmount;
        freeTextInvoiceLocalizationTmp.CustInvoiceJourCurrencyCode = _custInvoiceJour.CurrencyCode;
        freeTextInvoiceLocalizationTmp.InvoiceAmountEuro = cachedInvoiceAmountEuro;
        freeTextInvoiceLocalizationTmp.PrepaidAmountEuro = cachedPrepaidAmountEuro;
        freeTextInvoiceLocalizationTmp.RemainAmountToBePaidEuro = cachedRemainAmountToBePaidEuro;
        freeTextInvoiceLocalizationTmp.EuroCurrencyCode = Currency::findEuroCurrencyCode();

        freeTextInvoiceLocalizationTmp.SalesBalance = _custInvoiceJour.SalesBalance;
        freeTextInvoiceLocalizationTmp.EndDisc = _custInvoiceJour.EndDisc;
        freeTextInvoiceLocalizationTmp.SumMarkup = _custInvoiceJour.SumMarkup;
        freeTextInvoiceLocalizationTmp.SumTax = _custInvoiceJour.SumTax;
        freeTextInvoiceLocalizationTmp.InvoiceRoundOff = _custInvoiceJour.InvoiceRoundOff;

        freeTextInvoiceLocalizationTmp.SalesBalanceEuro = cachedSalesBalanceEuro;
        freeTextInvoiceLocalizationTmp.EndDiscEuro = cachedEndDiscEuro;
        freeTextInvoiceLocalizationTmp.SumMarkupEuro = cachedSumMarkupEuro;
        freeTextInvoiceLocalizationTmp.SumTaxEuro = cachedSumTaxEuro;
        freeTextInvoiceLocalizationTmp.InvoiceRoundOffEuro = cachedInvoiceRoundOffEuro;
        freeTextInvoiceLocalizationTmp.NetAmount = cachedNetAmount;
        freeTextInvoiceLocalizationTmp.NetAmountEuro = cachedNetAmountEuro;
        freeTextInvoiceLocalizationTmp.TaxableBalanceEuro = cachedTaxableBalanceEuro;
        freeTextInvoiceLocalizationTmp.TaxFreeBalanceEuro = cachedTaxFreeBalanceEuro;
        freeTextInvoiceLocalizationTmp.TaxableBalance = cachedTaxableBalance;
        freeTextInvoiceLocalizationTmp.TaxFreeBalance = cachedTaxFreeBalance;
        freeTextInvoiceLocalizationTmp.TaxFreeBalanceMST = cachedTaxFreeBalanceMST;
        freeTextInvoiceLocalizationTmp.TaxableBalanceMST = cachedTaxableBalanceMST;

        freeTextInvoiceLocalizationTmp.StandardCurrency = CompanyInfoHelper::standardCurrency();
        
        if (isoCountryCode == #isoPL && _custInvoiceJour.ExchRate > 0)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),_custInvoiceJour.CurrencyCode);
            freeTextInvoiceLocalizationTmp.ExchRate = exchangeRateHelper.displayStoredExchangeRate(_custInvoiceJour.ExchRate);
        }
        else
        {
            freeTextInvoiceLocalizationTmp.ExchRate = cachedExchRate;
        }

        freeTextInvoiceLocalizationTmp.EUROExchangeRate = cachedEuroExchangeRate;
        freeTextInvoiceLocalizationTmp.SalesBalanceMST = _custInvoiceJour.SalesBalanceMST;
        freeTextInvoiceLocalizationTmp.SumTaxMST = _custInvoiceJour.SumTaxMST;
        freeTextInvoiceLocalizationTmp.CashDiscTxt_LanguageId = cachedCashDiscTxt_LanguageId;
        freeTextInvoiceLocalizationTmp.EndDiscMST = _custInvoiceJour.EndDiscMST;
        freeTextInvoiceLocalizationTmp.SumMarkupMST = _custInvoiceJour.SumMarkupMST;
        freeTextInvoiceLocalizationTmp.NetAmountMST = cachedNetAmountMST;
        freeTextInvoiceLocalizationTmp.InvoiceRoundOffMST = _custInvoiceJour.InvoiceRoundOffMST;
        freeTextInvoiceLocalizationTmp.InvoiceAmountMST = _custInvoiceJour.InvoiceAmountMST;
        freeTextInvoiceLocalizationTmp.CashDisc = _custInvoiceJour.CashDisc;

        freeTextInvoiceLocalizationTmp.ExternalItemId = FormLetter::journalExternalItemId(ModuleInventPurchSales::Sales, _custInvoiceTrans.ExternalItemId);
        freeTextInvoiceLocalizationTmp.HeaderNotes = cachedHeaderNotes;

        if (isoCountryCode == #isoPL)
        {
            RNumDateInWordConverter dateInWordConverter = RNumDateInWordConverter::construct(_custInvoiceJour.LanguageId);

            freeTextInvoiceLocalizationTmp.AmountInWords = dateInWordConverter.numeralsToTxt(_custInvoiceJour.InvoiceAmount);
            freeTextInvoiceLocalizationTmp.AmountInWordsEUR = dateInWordConverter.numeralsToTxt(_custInvoiceJour.invoiceAmountEuro());

            if (!(dateInWordConverter is RNumDateInWordConverter_PL) && !(dateInWordConverter is RNumDateInWordConverter_HU))
            {
                freeTextInvoiceLocalizationTmp.AmountInWords += ' ' + RNumDateInWordConverter::getPennyAmountInWords(_custInvoiceJour.InvoiceAmount, freeTextInvoiceLocalizationTmp.AmountInWords);
                freeTextInvoiceLocalizationTmp.AmountInWordsEUR += ' ' + RNumDateInWordConverter::getPennyAmountInWords(_custInvoiceJour.invoiceAmountEuro(), freeTextInvoiceLocalizationTmp.AmountInWordsEUR);
            }

            freeTextInvoiceLocalizationTmp.AmountInWords += ' ' + Currency::find(_custInvoiceJour.CurrencyCode).CurrencyCodeISO;
            freeTextInvoiceLocalizationTmp.AmountInWordsEUR += ' ' + Currency::find(Currency::findEuroCurrencyCode()).CurrencyCodeISO;

            freeTextInvoiceLocalizationTmp.HeaderNotes = this.addSplitPaymentNote_W(
                _custInvoiceJour,
                freeTextInvoiceLocalizationTmp.HeaderNotes);
        }

        //taxTrans
        if (_taxSpec)
        {
            if (custFormletterParameters.TaxSpecPrintLevel == TaxSpecPrintLevel::None && (isoCountryCode == #isoLT || isoCountryCode == #isoHU))
            {
                freeTextInvoiceLocalizationTmp.ShowTaxTrans = false;
            }
            else
            {
                freeTextInvoiceLocalizationTmp.ShowTaxTrans = true;
            }

            freeTextInvoiceLocalizationTmp.TaxCode = _taxSpec.taxCode();
            freeTextInvoiceLocalizationTmp.Amount = - amount;
            freeTextInvoiceLocalizationTmp.CashDiscAmount = -cashDiscAmountTax ;
            freeTextInvoiceLocalizationTmp.TaxBaseAmount = -_taxSpec.taxBaseAmount();
            freeTextInvoiceLocalizationTmp.TaxBaseAmountMST = -_taxSpec.taxBaseAmountMST();
            freeTextInvoiceLocalizationTmp.TaxAmount = -_taxSpec.taxAmount();
            freeTextInvoiceLocalizationTmp.TaxAmountMST = -_taxSpec.taxAmountMST();
            freeTextInvoiceLocalizationTmp.TaxExemptDescription = _taxSpec.taxExemptDescription();
            freeTextInvoiceLocalizationTmp.TaxBaseQty = -_taxSpec.taxBaseQty();
            freeTextInvoiceLocalizationTmp.PrintCode = _taxSpec.taxWriteCode();
            freeTextInvoiceLocalizationTmp.TaxDirective = LanguageTxt::find(tableNum(TaxTable), TaxTable::find(_taxSpec.taxCode()).RecId, _taxSpec.parmLanguageId()).Txt;
            freeTextInvoiceLocalizationTmp.TaxCurrencyCode = _taxSpec.currencyCode();

            if (isoCountryCode == #isoHU || isoCountryCode == #isoLT)
            {
                if (isoCountryCode == #isoHU)
                {
                    freeTextInvoiceLocalizationTmp.IsBankExchangeRateEnabled = TaxParameters::find().BankExchRate_W;
                }

                freeTextInvoiceLocalizationTmp.TaxExcludeFromInvoice = _taxSpec.parmExcludeFromInvoice();

                if (freeTextInvoiceLocalizationTmp.TaxExcludeFromInvoice == NoYes::Yes)
                {
                    // Set the tax amount that was excluded so it can be subtracted from the invoice amount on the report.
                    freeTextInvoiceLocalizationTmp.TaxAmountExcluded = freeTextInvoiceLocalizationTmp.TaxAmount;

                    // Set the tax amount in Euro so that it can be subtracted from the total tax amount in euro on the report.
                    freeTextInvoiceLocalizationTmp.TaxAmountExcludedEuro = _custInvoiceJour.amountCur2Euro(freeTextInvoiceLocalizationTmp.TaxAmountExcluded);

                    // Set the tax amounts to zero so they aren't included on the invoice
                    freeTextInvoiceLocalizationTmp.TaxAmount = 0;
                    freeTextInvoiceLocalizationTmp.TaxAmountMST = 0;
                }
            }
            else if (isoCountryCode == #isoPL)
            {
                freeTextInvoiceLocalizationTmp.TaxValue = this.getTaxValue(_taxSpec, _custInvoiceJour);
            }
        }

        if (isoCountryCode == #isoLT)
        {
            AmountCur AmountInAmountCur;
            if (_custInvoiceJour.isProforma())
            {
                proforma_totalExcludedTaxAmount += freeTextInvoiceLocalizationTmp.TaxAmountExcluded;
                AmountInAmountCur = _custInvoiceJour.InvoiceAmount - proforma_totalExcludedTaxAmount;
            }
            else
            {
                AmountInAmountCur = _custInvoiceJour.InvoiceAmount - this.parmTotalExcludedTaxAmount();
            }

            freeTextInvoiceLocalizationTmp.AmountInWords = this.getNumDateInWordConverter(_custInvoiceJour).numeralsToCurrency(AmountInAmountCur,
                                                                                                        _custInvoiceJour.CurrencyCode);
        }
        else if (isoCountryCode == #isoLV)
        {
            freeTextInvoiceLocalizationTmp.SpecialFormattedPaymentDueDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(_custInvoiceJour.DueDate, false, true);
            freeTextInvoiceLocalizationTmp.AmountInWordsEUR = this.getNumDateInWordConverter(_custInvoiceJour).numeralsToCurrency(freeTextInvoiceLocalizationTmp.InvoiceAmountEuro,
                                                                                                    freeTextInvoiceLocalizationTmp.EuroCurrencyCode);
        }
        else
        {
            freeTextInvoiceLocalizationTmp.CustInvoiceJourDueDate = _custInvoiceJour.DueDate;
        }

        freeTextInvoiceLocalizationTmp.InvoiceName = _custInvoiceJour.invoiceName();

        //custPaymSchedLine
        if (_custPaymSchedLine)
        {
            freeTextInvoiceLocalizationTmp.ShowCustPaymSched = true;
            freeTextInvoiceLocalizationTmp.ShowCustPaymSchedLine = true;

            if (isoCountryCode == #isoLV)
            {
                freeTextInvoiceLocalizationTmp.SpecialFormattedDiscountDueDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(_custPaymSchedLine.DueDate, false, true);
                freeTextInvoiceLocalizationTmp.SpecialFormattedDiscountDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(_custPaymSchedLine.DiscDate, false, true);
            }
            else
            {
                freeTextInvoiceLocalizationTmp.DueDate = _custPaymSchedLine.DueDate;
                freeTextInvoiceLocalizationTmp.DiscDate = _custPaymSchedLine.DiscDate;
            }

            freeTextInvoiceLocalizationTmp.DiscAmount = _custPaymSchedLine.DiscAmount;
            freeTextInvoiceLocalizationTmp.DueAmount = _custPaymSchedLine.DueAmount;
        }

        //custTrans
        if (_prepaymentCustTrans && !_prepaymentTaxTrans)
        {
            freeTextInvoiceLocalizationTmp.ShowPrepaidTotalsEuro = cachedPrintEuroTotals;
            freeTextInvoiceLocalizationTmp.ShowCustTrans = true;
            freeTextInvoiceLocalizationTmp.ShowPrepaidTotals = true;
            freeTextInvoiceLocalizationTmp.Txt = _prepaymentCustTrans.Txt;
            freeTextInvoiceLocalizationTmp.SettledAmountCur = settledAmountCur;
            freeTextInvoiceLocalizationTmp.CurrencyCode = _prepaymentCustTrans.CurrencyCode;

            if (isoCountryCode == #isoLV)
            {
                freeTextInvoiceLocalizationTmp.SpecialFormattedPrePaymentTransDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(_prepaymentCustTrans.TransDate, false, true);
            }
            else
            {
                freeTextInvoiceLocalizationTmp.TransDate = _prepaymentCustTrans.TransDate;
            }

            if (isoCountryCode == #isoHU)
            {
                if (_prepaymentCustTrans.Prepayment == NoYes::Yes)
                {
                    [freeTextInvoiceLocalizationTmp.PrePaymentAmountTax, freeTextInvoiceLocalizationTmp.PrePaymentAmountTaxMST] = this.getPrepaymentTaxAmount(_prepaymentCustTrans);
                    freeTextInvoiceLocalizationTmp.PrePaymentAmountTaxEuro = - CurrencyExchangeHelper::curAmount2CurAmount(freeTextInvoiceLocalizationTmp.PrePaymentAmountTax, _prepaymentCustTrans.CurrencyCode, freeTextInvoiceLocalizationTmp.EuroCurrencyCode, _prepaymentCustTrans.TransDate);
                }
            }
        }

        if (isoCountryCode == #isoCZ && _prepaymentTaxTrans && _prepaymentCustTrans)
        {
            int taxAmountSign = _custInvoiceJour.isProforma() ? 1 : -1;

            freeTextInvoiceLocalizationTmp.ShowTaxTrans = true;
            freeTextInvoiceLocalizationTmp.TaxCode = _prepaymentTaxTrans.TaxCode;
            freeTextInvoiceLocalizationTmp.Amount = - amount;
            freeTextInvoiceLocalizationTmp.TaxBaseAmount = taxAmountSign * _prepaymentTaxTrans.SourceBaseAmountCur;
            freeTextInvoiceLocalizationTmp.TaxBaseAmountMST = taxAmountSign * _prepaymentTaxTrans.TaxBaseAmount;
            freeTextInvoiceLocalizationTmp.TaxAmount = taxAmountSign * _prepaymentTaxTrans.SourceTaxAmountCur;
            freeTextInvoiceLocalizationTmp.TaxAmountMST = taxAmountSign * _prepaymentTaxTrans.TaxAmount;

            if (_prepaymentTaxTrans.ExemptTax)
            {
                freeTextInvoiceLocalizationTmp.TaxExemptDescription = TaxExemptCodeTable::txt(_prepaymentTaxTrans.ExemptCode);
            }

            freeTextInvoiceLocalizationTmp.TaxBaseQty = _prepaymentTaxTrans.TaxBaseQty;
            freeTextInvoiceLocalizationTmp.PrintCode = _prepaymentTaxTrans.PrintCode;
            freeTextInvoiceLocalizationTmp.TaxDirective = LanguageTxt::find(tableNum(TaxTable), TaxTable::find(_prepaymentTaxTrans.TaxCode).RecId, this.parmCompanyInfo().LanguageId).Txt;
            freeTextInvoiceLocalizationTmp.TaxDocumentNumber = CzTaxDocumentTable::find(_prepaymentCustTrans.Voucher, _prepaymentCustTrans.TransDate).TaxDocumentNum;
            freeTextInvoiceLocalizationTmp.TaxCurrencyCode = _prepaymentTaxTrans.SourceCurrencyCode;
        }

        // <GEECZ>
        if (isoCountryCode == #isoCZ)
        {
            if (originalInvoiceId_CZ
                && originalInvoiceId_CZ != _custInvoiceJour.InvoiceId)
            {
                freeTextInvoiceLocalizationTmp.OriginalInvoiceId_CZ = originalInvoiceId_CZ;
            }
            else if (_custInvoiceTrans)
            {
                custInvoiceTrans_W = _custInvoiceTrans.custInvoiceTrans_W();
                if (custInvoiceTrans_W.RefReturnInvoiceTrans_W)
                {
                    freeTextInvoiceLocalizationTmp.OriginalInvoiceId_CZ = CustInvoiceTrans::findRecId(custInvoiceTrans_W.RefReturnInvoiceTrans_W).InvoiceId;
                }
                else if (_custInvoiceJour.custInvoiceJour_W().CashDiscOrigInvoiceCustTrans_CZ)
                {
                    freeTextInvoiceLocalizationTmp.OriginalInvoiceId_CZ = CustTrans::find(custInvoiceJour.custInvoiceJour_W().CashDiscOrigInvoiceCustTrans_CZ).Invoice;
                }
            }
        }
        // </GEECZ>

        //docuRef
        freeTextInvoiceLocalizationTmp.Notes = this.getDocumentNote(_custInvoiceTrans, custFormletterDocument);

        freeTextInvoiceLocalizationTmp.DateOfCreation = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        if (IntrastatCountryRegionParameters::isInEUByIsoCode() && !isTransportationDataInserted)
        {
            this.clearTransportationDetails();
            this.insertTransportationDocument(_custInvoiceJour);
            isTransportationDataInserted = true;
        }

        // <GEEPL>
        if (isoCountryCode == #isoPL &&
            (custInvoiceTrans_W.RefReturnInvoiceTrans_W || custInvoiceTrans_W.CreditNoteInternalRef_W) &&
            !isPrintFTICreditNoteLine)
        {
            freeTextInvoiceLocalizationTmp.HideInvoiceLine_PL = NoYes::Yes;
        }
        // </GEEPL>

        freeTextInvoiceLocalizationTmp.MandateReference = this.parmCustDirectDebitMandate().MandateReference;
        freeTextInvoiceLocalizationTmp.MandateSWIFTNo = this.parmCustDirectDebitMandateBankAccount().SWIFTNo;

        freeTextInvoiceLocalizationTmp.MandateBankIBAN = hasFieldAccess(tableNum(CustBankAccount), fieldNum(CustBankAccount, BankIBAN)) ?
            this.parmCustDirectDebitMandateBankAccount().BankIBAN : "@AccountsReceivable:FiveAsterisk";
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoFreeTextInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice details information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    /// <param name="_taxSpec">
    /// The <c>TaxSpec</c> class instance that has the taxes information.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The <c>CustPaymSchedLine</c> record that has the payment schedules information.
    /// </param>
    /// <param name="_prepaymentCustTrans">
    /// The <c>CustTrans</c> record that has the prepayment information.
    /// </param>
    /// <param name="_prepaymentTaxTrans">
    /// The <c>TaxTrans</c> record that has the prepayment taxes information.
    /// </param>
    /// <remarks>
    /// This method will insert the invoice details information into <c>FreeTextInvoiceLocalizationTmp</c>
    /// table which is only used for Eastern European countries and other countries that need customization
    /// from the SYS layer functionality.
    /// </remarks>
    protected void insertIntoFreeTextInvoiceLocalizationTmp(CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine = null,
        CustTrans _prepaymentCustTrans = null,
        TaxTrans _prepaymentTaxTrans = null)
    {
        this.populateFreeTextInvoiceLocalizationTmp(_custInvoiceJour, _custInvoiceTrans, _taxSpec, _custPaymSchedLine, _prepaymentCustTrans, _prepaymentTaxTrans);
        
        freeTextInvoiceLocalizationTmp.insert();
        freeTextInvoiceLocalizationTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFreeTextInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the Invoice details information into the <c>FreeTextInvoiceTmp</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    /// <param name="_taxSpec">
    /// The <c>TaxSpec</c> class instance that has the taxes information.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The <c>CustPaymSchedLine</c> record that has the payment schedules information.
    /// </param>
    /// <param name="_prepaymentCustTrans">
    /// The <c>CustTrans</c> record that has the prepayment information.
    /// </param>
    /// <param name="_prepaymentTaxTrans">
    /// The <c>TaxTrans</c> record that has the prepayment taxes information.
    /// </param>
    protected void populateFreeTextInvoiceTmp(
        CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans,
        TaxTrans _prepaymentTaxTrans)
    {
        boolean taxPrintTaxFreeBalance;

        // <<GMY>
        CustInvoiceTrans_W custInvoiceTrans_W;
        // </GMY>

        salesInvoicePaymentStubTmp.clear();
        taxPrintTaxFreeBalance = custFormLetterParameters.TaxPrintTaxFreeBalance;

        freeTextInvoiceTmp.ShowGoodsDiscount = this.goodsDiscount(_custInvoiceTrans);

        freeTextInvoiceTmp.IsTaxAmountMSTVisible = this.parmIsTaxAmountMSTVisible();
        freeTextInvoiceTmp.TaxAmountLabel =  strFmt('%1 %2', SysLabel::labelId2String(literalStr("@SYS22646"), _custInvoiceJour.LanguageId),
            _custInvoiceJour.CurrencyCode);
        freeTextInvoiceTmp.TaxAmountMSTLabel = strFmt('%1 %2', SysLabel::labelId2String(literalStr("@SYS22646"), _custInvoiceJour.LanguageId),
            Ledger::accountingCurrency(this.parmCompanyInfo().RecId));

        freeTextInvoiceTmp.ShowTotals = !taxPrintTaxFreeBalance;
        freeTextInvoiceTmp.ShowTotalsTaxBalances = taxPrintTaxFreeBalance;
        freeTextInvoiceTmp.ShowPayment = !isInvoiceCreditNote && !_custInvoiceJour.PaymentSched;
        freeTextInvoiceTmp.ShowTotalsEuro = cachedPrintEuroTotals && !taxPrintTaxFreeBalance;
        freeTextInvoiceTmp.ShowTotalsTaxBalancesEuro = cachedPrintEuroTotals && taxPrintTaxFreeBalance;
        freeTextInvoiceTmp.ShowGiro = _custInvoiceJour.GiroType != PaymentStub::None;
        freeTextInvoiceTmp.GiroType = _custInvoiceJour.GiroType;
        freeTextInvoiceTmp.ShowLocalCurAmt = (isoCountryCode == #isoSG) && CompanyInfoHelper::standardCurrency() != _custInvoiceJour.CurrencyCode;
        freeTextInvoiceTmp.PrePrintLevel = custFormLetterParameters.PrePrintLevelFreeTextInvoice;
        freeTextInvoiceTmp.PrintEuroTotals = cachedPrintEuroTotals;
        freeTextInvoiceTmp.ShowCashDiscOnInvoiceControls = cashDiscOnInvoice;
        freeTextInvoiceTmp.ShowSepaNotification = this.showSepaNotification(_custInvoiceJour);
        freeTextInvoiceTmp.CashAccountingRegime_ES = CashAccountingRegime_ES::isEnabled(_custInvoiceJour.InvoiceDate);

        //Invoice
        if (custInvoiceJourAdjustment)
        {
            freeTextInvoiceTmp.InvoiceId = custInvoiceJourAdjustment.TaxInvoiceId;
            freeTextInvoiceTmp.RemarkTxt_TH = custInvoiceJourAdjustment.remarkTxt(_custInvoiceJour.LanguageId);
            freeTextInvoiceTmp.AdjustmentDetailsTxt_TH = custInvoiceJourAdjustment.adjustmentDetailsTxt(_custInvoiceJour.LanguageId);
        }
        else
        {
            freeTextInvoiceTmp.InvoiceId = _custInvoiceJour.InvoiceId;
        }

        //custInvoiceTrans
        if (_custInvoiceTrans)
        {
            freeTextInvoiceTmp.LineHeader = this.parmLineHeader();
        }

        freeTextInvoiceTmp.Name = _custInvoiceTrans.Name;
        freeTextInvoiceTmp.Qty = _custInvoiceTrans.Qty;
        freeTextInvoiceTmp.SalesPrice = _custInvoiceTrans.SalesPrice;
        freeTextInvoiceTmp.LineAmount = _custInvoiceTrans.LineAmount;
        freeTextInvoiceTmp.TaxWriteCode = _custInvoiceTrans.TaxWriteCode;
        freeTextInvoiceTmp.CorrectiveReasonLines = correctiveReason_lines;
        freeTextInvoiceTmp.LineAmountInclTax = _custInvoiceTrans.LineAmount + _custInvoiceTrans.LineAmountTax;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]))
        {
            freeTextInvoiceTmp.LineAmountMST = CurrencyExchangeHelper::amount(_custInvoiceTrans.LineAmount * cachedExchRate);
            freeTextInvoiceTmp.SalesPriceMST = CurrencyExchangeHelper::amount(_custInvoiceTrans.SalesPrice * cachedExchRate);
            freeTextInvoiceTmp.LineAmountInclTaxMST = CurrencyExchangeHelper::amount((_custInvoiceTrans.LineAmount + _custInvoiceTrans.LineAmountTax) * cachedExchRate);
            freeTextInvoiceTmp.EndDiscMST = _custInvoiceJour.EndDiscMST;
            freeTextInvoiceTmp.InvoiceRoundOffMST = CurrencyExchangeHelper::amount(_custInvoiceJour.InvoiceRoundOff * cachedExchRate);
            freeTextInvoiceTmp.SumMarkupMST = CurrencyExchangeHelper::amount(_custInvoiceJour.SumMarkup * cachedExchRate);
            freeTextInvoiceTmp.CashDiscMST = CurrencyExchangeHelper::amount(_custInvoiceJour.CashDisc * cachedExchRate);
        }

        freeTextInvoiceTmp.InvoiceAmount = _custInvoiceJour.InvoiceAmount;
        freeTextInvoiceTmp.PrepaidAmount = cachedPrepaidAmount;
        freeTextInvoiceTmp.RemainAmountToBePaid = _custInvoiceJour.InvoiceAmount - cachedPrepaidAmount;
        freeTextInvoiceTmp.CustInvoiceJourCurrencyCode = _custInvoiceJour.CurrencyCode;
        freeTextInvoiceTmp.CurrencySymbol = Currency::find(_custInvoiceJour.CurrencyCode).Symbol;
        freeTextInvoiceTmp.InvoiceAmountEuro = cachedInvoiceAmountEuro;
        freeTextInvoiceTmp.PrepaidAmountEuro = cachedPrepaidAmountEuro;
        freeTextInvoiceTmp.RemainAmountToBePaidEuro = cachedRemainAmountToBePaidEuro;
        freeTextInvoiceTmp.EuroCurrencyCode = Currency::findEuroCurrencyCode();

        freeTextInvoiceTmp.SalesBalance = _custInvoiceJour.SalesBalance;
        freeTextInvoiceTmp.EndDisc = _custInvoiceJour.EndDisc;
        freeTextInvoiceTmp.SumMarkup = _custInvoiceJour.SumMarkup;
        freeTextInvoiceTmp.SumTax = _custInvoiceJour.SumTax;
        freeTextInvoiceTmp.InvoiceRoundOff = _custInvoiceJour.InvoiceRoundOff;

        if (ReverseChargeParameters_W::find().Enabled)
        {
            if (_custInvoiceTrans.ReverseCharge_W)
            {
                freeTextInvoiceTmp.ReverseChargeLine = '*';
            }
            if (_custInvoiceJour.ReverseChargeAmount)
            {
                freeTextInvoiceTmp.ReverseChargeJournal = '*';
            }
            freeTextInvoiceTmp.ReverseChargeAmount = _custInvoiceJour.ReverseChargeAmount;
            freeTextInvoiceTmp.ReverseChargeAmountEuro = _custInvoiceJour.reverseChargeAmountEuro();
        }
        freeTextInvoiceTmp.SalesBalanceEuro = cachedSalesBalanceEuro;
        freeTextInvoiceTmp.EndDiscEuro = cachedEndDiscEuro;
        freeTextInvoiceTmp.SumMarkupEuro = cachedSumMarkupEuro;
        freeTextInvoiceTmp.SumTaxEuro = cachedSumTaxEuro;
        freeTextInvoiceTmp.InvoiceRoundOffEuro = cachedInvoiceRoundOffEuro;
        freeTextInvoiceTmp.NetAmount = cachedNetAmount;
        freeTextInvoiceTmp.NetAmountEuro = cachedNetAmountEuro;
        freeTextInvoiceTmp.TaxableBalanceEuro = cachedTaxableBalanceEuro;
        freeTextInvoiceTmp.TaxFreeBalanceEuro = cachedTaxFreeBalanceEuro;
        freeTextInvoiceTmp.TaxableBalance = cachedTaxableBalance;
        freeTextInvoiceTmp.TaxFreeBalance = cachedTaxFreeBalance;
        freeTextInvoiceTmp.StandardCurrency = CompanyInfoHelper::standardCurrency();
        freeTextInvoiceTmp.ExchRate = cachedExchRate;

        freeTextInvoiceTmp.SalesBalanceMST = _custInvoiceJour.SalesBalanceMST;
        freeTextInvoiceTmp.SumTaxMST = _custInvoiceJour.SumTaxMST;
        // <GSG>
        freeTextInvoiceTmp.InvoiceAmountMST = _custInvoiceJour.InvoiceAmountMST;
        // </GSG>
        freeTextInvoiceTmp.CashDiscTxt_LanguageId = cachedCashDiscTxt_LanguageId;
        freeTextInvoiceTmp.CashDisc = _custInvoiceJour.CashDisc;
        freeTextInvoiceTmp.CashDiscEuro = cachedCashDiscEuro;

        freeTextInvoiceTmp.HeaderNotes = cachedHeaderNotes;
        freeTextInvoiceTmp.CustInvoiceJourDueDate = _custInvoiceJour.DueDate;

        //markUpTrans_FI
        freeTextInvoiceTmp.MarkupAmount = this.parmMarkupAmount();
        freeTextInvoiceTmp.MarkupCode = this.parmMarkupCode();
        freeTextInvoiceTmp.MarkupTaxCode = this.parmMarkupTaxCode();
        if (freeTextInvoiceTmp.MarkupAmount || freeTextInvoiceTmp.MarkupCode || freeTextInvoiceTmp.MarkupTaxCode)
        {
            freeTextInvoiceTmp.ShowMarkupTrans = true;
        }

        if (_taxSpec)
        {
            freeTextInvoiceTmp.ShowTaxTrans = true;
            freeTextInvoiceTmp.PrintCode = _taxSpec.taxWriteCode();
            freeTextInvoiceTmp.TaxCode = _taxSpec.taxCode();
            freeTextInvoiceTmp.Amount = -amount;
            freeTextInvoiceTmp.CashDiscAmount = -cashDiscAmountTax ;
            freeTextInvoiceTmp.TaxBaseAmount = -_taxSpec.taxBaseAmount();
            freeTextInvoiceTmp.TaxBaseAmountMST = -_taxSpec.taxBaseAmountMST();
            freeTextInvoiceTmp.TaxAmount = -_taxSpec.taxAmount();
            freeTextInvoiceTmp.TaxAmountMST = -_taxSpec.taxAmountMST();

            freeTextInvoiceTmp.TaxExemptDescription = _taxSpec.taxExemptDescriptionText();

            if (!freeTextInvoiceTmp.TaxExemptDescription)
            {
                TaxTable taxTable = TaxTable::find(_taxSpec.taxCode());

                freeTextInvoiceTmp.TaxExemptDescription = LanguageTxt::find(tableNum(TaxTable), taxTable.RecId, _taxSpec.parmLanguageId()).Txt;
            }

            // <GMY>
            if (isGSTInvoice)
            {
                freeTextInvoiceTmp.GSTSummaryText_MY = _taxSpec.getGSTSummaryText_MY(_custInvoiceJour);
            }
            // </GMY>
        }

        // <GIN>
        // TaxWithholdTrans_IN
        if (isoCountryCode == #isoIN)
        {
            this.insertDataInFreeTextInvoiceTmp_IN(_custInvoiceJour);
        }
        // </GIN>
        if (isoCountryCode == #isoJP)
        {
            freeTextInvoiceTmp.WithReducedTax_JP = TaxTable::existTaxTransWithReducedTaxType_JP(_custInvoiceTrans);
        }
        // <GMY>
        if (isGSTInvoice)
        {
            custInvoiceTrans_W = _custInvoiceTrans.custInvoiceTrans_W();

            freeTextInvoiceTmp.RefInvoiceID_MY = custInvoiceTrans_W.RefInvoiceID_MY;
            freeTextInvoiceTmp.RefInvoiceDate_MY = custInvoiceTrans_W.RefInvoiceDate_MY;
        }
        // </GMY>

        if (_custPaymSchedLine)
        {
            freeTextInvoiceTmp.ShowCustPaymSched = true;
            freeTextInvoiceTmp.ShowCustPaymSchedLine = true;
            freeTextInvoiceTmp.DueDate = _custPaymSchedLine.DueDate;
            freeTextInvoiceTmp.DiscAmount = _custPaymSchedLine.DiscAmount;
            freeTextInvoiceTmp.DiscDate = _custPaymSchedLine.DiscDate;
            freeTextInvoiceTmp.DueAmount = _custPaymSchedLine.DueAmount;
        }

        if (_prepaymentCustTrans)
        {
            freeTextInvoiceTmp.ShowCustTrans = true;
            freeTextInvoiceTmp.ShowPrepaidTotals = true;
            freeTextInvoiceTmp.ShowPrepaidTotalsEuro = cachedPrintEuroTotals;
            freeTextInvoiceTmp.TransDate = _prepaymentCustTrans.TransDate;
            freeTextInvoiceTmp.Txt = _prepaymentCustTrans.Txt;
            freeTextInvoiceTmp.SettledAmountCur = _prepaymentCustTrans.AmountCur;
            freeTextInvoiceTmp.CurrencyCode = _prepaymentCustTrans.CurrencyCode;
            freeTextInvoiceTmp.CurrencySymbol = Currency::find(_custInvoiceJour.CurrencyCode).Symbol;
        }

        freeTextInvoiceTmp.Notes = this.getDocumentNote(_custInvoiceTrans, custFormletterDocument);

        this.insertGiroInformation(_custInvoiceJour, this.parmCompanyInfo());

        freeTextInvoiceTmp.BillingCode = _custInvoiceTrans.BillingCode;

        freeTextInvoiceTmp.MandateReference = this.parmCustDirectDebitMandate().MandateReference;
        freeTextInvoiceTmp.MandateSWIFTNo = this.parmCustDirectDebitMandateBankAccount().SWIFTNo;

        freeTextInvoiceTmp.MandateBankIBAN = hasFieldAccess(tableNum(CustBankAccount), fieldNum(CustBankAccount, BankIBAN)) ?
            this.parmCustDirectDebitMandateBankAccount().BankIBAN : "@AccountsReceivable:FiveAsterisk";

        if (MarkupPeriodChargeFeature::instance().isEnabled())
        {
            freeTextInvoiceTmp.PeriodChargeInvoiceLineBaseFromDate = _custInvoiceTrans.PeriodChargeInvoiceLineBaseFromDate;
            freeTextInvoiceTmp.PeriodChargeInvoiceLineBaseToDate = _custInvoiceTrans.PeriodChargeInvoiceLineBaseToDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFreeTextInvoicePeriodChargeTmp</Name>
				<Source><![CDATA[
    private void populateFreeTextInvoicePeriodChargeTmp(CustInvoiceTrans _custInvoiceTrans)
    {
        MarkupPeriodChargeInvoiceLineBase   periodChargeInvoiceLineBase;
        CustInvoiceLine                     custInvoiceLine;

        while select periodChargeInvoiceLineBase
            join Description from custInvoiceLine
            where periodChargeInvoiceLineBase.FreeTextInvoiceLineRecId == custInvoiceLine.RecId
               && custInvoiceLine.SourceDocumentLine == _custInvoiceTrans.SourceDocumentLine
        {
            this.initializeFreeTextInvoicePeriodChargeTmp(periodChargeInvoiceLineBase, custInvoiceLine);

            switch (periodChargeInvoiceLineBase.RuleLineType)
            {
                case MarkupPeriodChargeRuleLineType::MonetaryThreshold:
                    this.initializeMonetaryThresholdFreeTextInvoicePeriodChargeTmp(periodChargeInvoiceLineBase);
                    break;

                case MarkupPeriodChargeRuleLineType::QuantityThreshold:
                    this.initializeQuantityThresholdFreeTextInvoicePeriodChargeTmp(periodChargeInvoiceLineBase);
                    break;

                case MarkupPeriodChargeRuleLineType::QuantityThresholdMinAmount:
                    this.initializeQuantityThresholdMinAmountFreeTextInvoicePeriodChargeTmp(periodChargeInvoiceLineBase);
                    break;
            }

            changeCompany (freeTextInvoicePeriodChargeTmp.dataAreaId)
            {
                freeTextInvoicePeriodChargeTmp.insert();
                freeTextInvoicePeriodChargeTmp.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFreeTextInvoicePeriodChargeTmp</Name>
				<Source><![CDATA[
    private void initializeFreeTextInvoicePeriodChargeTmp(
        MarkupPeriodChargeInvoiceLineBase   _periodChargeInvoiceLineBase,
        CustInvoiceLine                     _custInvoiceLine)
    {
        CustInvoiceJour origCustInvoiceJour = CustInvoiceJour::findRecId(_periodChargeInvoiceLineBase.SalesInvoiceJourRecId);
        freeTextInvoicePeriodChargeTmp.InvoiceId = origCustInvoiceJour.InvoiceId;
        freeTextInvoicePeriodChargeTmp.InvoiceDate = origCustInvoiceJour.InvoiceDate;
        freeTextInvoicePeriodChargeTmp.CustomerReference = origCustInvoiceJour.CustomerRef;
        freeTextInvoicePeriodChargeTmp.RuleLineType = _periodChargeInvoiceLineBase.RuleLineType;
        freeTextInvoicePeriodChargeTmp.Description = _custInvoiceLine.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuantityThresholdFreeTextInvoicePeriodChargeTmp</Name>
				<Source><![CDATA[
    private void initializeQuantityThresholdFreeTextInvoicePeriodChargeTmp(MarkupPeriodChargeInvoiceLineBase _periodChargeInvoiceLineBase)
    {
        MarkupPeriodChargeInvoiceLineBaseQuantity periodChargeInvoiceLineBaseQuantity = _periodChargeInvoiceLineBase as MarkupPeriodChargeInvoiceLineBaseQuantity;
        if (periodChargeInvoiceLineBaseQuantity)
        {
            freeTextInvoicePeriodChargeTmp.SalesId = periodChargeInvoiceLineBaseQuantity.SalesId;
            freeTextInvoicePeriodChargeTmp.QuantityOrdered = periodChargeInvoiceLineBaseQuantity.QuantityOrdered;
            freeTextInvoicePeriodChargeTmp.QuantityDelivered = periodChargeInvoiceLineBaseQuantity.QuantityDelivered;
            freeTextInvoicePeriodChargeTmp.UnitSymbol = periodChargeInvoiceLineBaseQuantity.UnitSymbol;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMonetaryThresholdFreeTextInvoicePeriodChargeTmp</Name>
				<Source><![CDATA[
    private void initializeMonetaryThresholdFreeTextInvoicePeriodChargeTmp(MarkupPeriodChargeInvoiceLineBase _periodChargeInvoiceLineBase)
    {
        MarkupPeriodChargeInvoiceLineBaseMonetary periodChargeInvoiceLineBaseMonetary = _periodChargeInvoiceLineBase as MarkupPeriodChargeInvoiceLineBaseMonetary;
        if (periodChargeInvoiceLineBaseMonetary)
        {
            freeTextInvoicePeriodChargeTmp.ChargeCode = periodChargeInvoiceLineBaseMonetary.ChargeCode;
            freeTextInvoicePeriodChargeTmp.ChargeDescription = periodChargeInvoiceLineBaseMonetary.ChargeDescription;
            freeTextInvoicePeriodChargeTmp.CurrencyCode = periodChargeInvoiceLineBaseMonetary.ChargeCurrencyCode;
            freeTextInvoicePeriodChargeTmp.ChargeAmount = periodChargeInvoiceLineBaseMonetary.ChargeAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuantityThresholdMinAmountFreeTextInvoicePeriodChargeTmp</Name>
				<Source><![CDATA[
    private void initializeQuantityThresholdMinAmountFreeTextInvoicePeriodChargeTmp(MarkupPeriodChargeInvoiceLineBase _periodChargeInvoiceLineBase)
    {
        MarkupPeriodChargeInvoiceLineBaseQuantityMinAmount periodChargeInvoiceLineBaseQuantityMinAmount = _periodChargeInvoiceLineBase as MarkupPeriodChargeInvoiceLineBaseQuantityMinAmount;
        if (periodChargeInvoiceLineBaseQuantityMinAmount)
        {
            freeTextInvoicePeriodChargeTmp.ChargeCode = periodChargeInvoiceLineBaseQuantityMinAmount.MinAmountChargeCode;
            freeTextInvoicePeriodChargeTmp.ChargeDescription = periodChargeInvoiceLineBaseQuantityMinAmount.MinAmountChargeDescription;
            freeTextInvoicePeriodChargeTmp.CurrencyCode = periodChargeInvoiceLineBaseQuantityMinAmount.MinAmountChargeCurrencyCode;
            freeTextInvoicePeriodChargeTmp.ChargeAmount = periodChargeInvoiceLineBaseQuantityMinAmount.MinAmountChargeAmount;
            freeTextInvoicePeriodChargeTmp.SalesId = periodChargeInvoiceLineBaseQuantityMinAmount.MinAmountSalesId;
            freeTextInvoicePeriodChargeTmp.QuantityOrdered = periodChargeInvoiceLineBaseQuantityMinAmount.MinAmountQuantityOrdered;
            freeTextInvoicePeriodChargeTmp.QuantityDelivered = periodChargeInvoiceLineBaseQuantityMinAmount.MinAmountQuantityDelivered;
            freeTextInvoicePeriodChargeTmp.UnitSymbol = periodChargeInvoiceLineBaseQuantityMinAmount.MinAmountUnitSymbol;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoFreeTextInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the Invoice details information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    /// <param name="_taxSpec">
    /// The <c>TaxSpec</c> class instance that has the taxes information.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The <c>CustPaymSchedLine</c> record that has the payment schedules information.
    /// </param>
    /// <param name="_prepaymentCustTrans">
    /// The <c>CustTrans</c> record that has the prepayment information.
    /// </param>
    /// <param name="_prepaymentTaxTrans">
    /// The <c>TaxTrans</c> record that has the prepayment taxes information.
    /// </param>
    protected void insertIntoFreeTextInvoiceTmp(
        CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans,
        TaxTrans _prepaymentTaxTrans)
    {
        this.populateFreeTextInvoiceTmp(_custInvoiceJour, _custInvoiceTrans, _taxSpec, _custPaymSchedLine, _prepaymentCustTrans, _prepaymentTaxTrans);

        changeCompany (freeTextInvoiceTmp.dataAreaId)
        {
            freeTextInvoiceTmp.insert();
            freeTextInvoiceTmp.clear();
        }

        // <GEEU>
        switch (isoCountryCode)
        {
            case #isoEE, #isoLT, #isoHU, #isoLV, #isoCZ, #isoPL:
                this.insertIntoFreeTextInvoiceLocalizationTmp(_custInvoiceJour, _custInvoiceTrans, _taxSpec, _custPaymSchedLine, _prepaymentCustTrans, _prepaymentTaxTrans);
                break;
        }
        // </GEEU>

        companyLogo = emptyBitmap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPeriodCharge</Name>
				<Source><![CDATA[
    internal protected void insertPeriodCharge(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        super(_custInvoiceJour, _custInvoiceTrans);

        if (MarkupPeriodChargeFeature::instance().isEnabled())
        {
            this.populateFreeTextInvoicePeriodChargeTmp(_custInvoiceTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoiceDetailsInformation</Name>
				<Source><![CDATA[
    public void insertInvoiceDetailsInformation(CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans, 
        TaxTrans _prepaymentTaxTrans)
    {
        this.insertIntoFreeTextInvoiceTmp(_custInvoiceJour, _custInvoiceTrans, null, _custPaymSchedLine, _prepaymentCustTrans, _prepaymentTaxTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoiceHeaderInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice header information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_companyInfo">
    /// A <c>CompanyInfo</c> record that has the company information.
    /// </param>
    /// <remarks>
    /// The method will insert the invoice header information. It should be overridden in the sub classes
    /// to insert the data in the right temp tables.
    /// </remarks>
    public void insertInvoiceHeaderInformation(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        this.insertIntoFreeTextInvoiceHeaderFooterTmp(_custInvoiceJour, _companyInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice taxes information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record that contains invoice data.
    /// </param>
    /// <remarks>
    /// This method should be overridden in the sub classes to get the right taxes information and be
    /// inserted in the right tables.
    /// </remarks>
    public void insertTaxes(CustInvoiceJour _custInvoiceJour)
    {
        TaxSpec taxSpec;
        int taxCodeCounter;

        if (custFormletterParameters.TaxSpecPrintLevel == TaxSpecPrintLevel::None && (isoCountryCode == #isoLT || isoCountryCode == #isoHU) || custFormletterParameters.TaxSpecPrintLevel != TaxSpecPrintLevel::None)
        {
            // <GEECZ>
            if (isoCountryCode == #isoCZ)
            {
                this.insertTaxes_CZ(_custInvoiceJour);
                return;
            }
            // </GEECZ>
            taxSpec = this.createTaxSpec(_custInvoiceJour);

            while (taxSpec.parmTaxSpec(
                // <GEEU>
                false
                // </GEEU>
                ))
            {
                if (cashDiscOnInvoice)
                {
                    if (_custInvoiceJour.CashDiscPercent == 100)
                    {
                        amount = 0;
                        cashDiscAmountTax = 0;
                    }
                    else
                    {
                        amount = taxSpec.taxBaseAmount() / (100 - _custInvoiceJour.CashDiscPercent) / 100;
                        cashDiscAmountTax = amount * (_custInvoiceJour.CashDiscPercent / 100);
                    }
                }

                this.insertIntoFreeTextInvoiceTmp(_custInvoiceJour, null, taxSpec, null, null
                    // <GEECZ>
                    , null
                    // </GEECZ>
                    );
            }

            // <GIN>
            if (TaxWithholdParameters_IN::isTCSActivate())
            {
                taxSpec = null;
                taxWithholdSpec = new TaxWithholdSpec_IN(_custInvoiceJour.LedgerVoucher, _custInvoiceJour.InvoiceDate, _custInvoiceJour.RecId);
                while (taxWithholdSpec.parmTaxSpec())
                {
                    this.insertIntoFreeTextInvoiceTmp(_custInvoiceJour, null, taxSpec, null, null
                        // <GEECZ>
                        , null
                        // </GEECZ>
                        );
                }
            }
            // </GIN>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustInvoiceTableForProforma</Name>
				<Source><![CDATA[
    private CustInvoiceTable findCustInvoiceTableForProforma(CustInvoiceJour _custInvoiceJour)
    {
        // When printing a proforma Free Text Invoice ID, the custInvoiceJour.InvoiceId is a concatenation of # and the custInvoiceTable.RecId
        // see FreeTextInvoiceController.invoiceId2RecID()
        CustInvoiceTable custInvoiceTable;
        select firstonly custInvoiceTable
            where custInvoiceTable.RecId == str2int64(subStr(_custInvoiceJour.InvoiceId, 2, strLen(_custInvoiceJour.InvoiceId)));

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTmpTaxWorkFromChargesProforma_CZ</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addTmpTaxWorkFromChargesProforma_CZ(TmpTaxWorkTrans _tmpTaxWorkTrans, CustInvoiceJour _custInvoiceJour)
    {
        CustInvoiceTable custInvoiceTable = this.findCustInvoiceTableForProforma(_custInvoiceJour);

        MarkupTrans custInvoiceJourMarkupTrans;
        while select custInvoiceJourMarkupTrans
            where custInvoiceJourMarkupTrans.TransTableId == tableNum(CustInvoiceTable)
                && custInvoiceJourMarkupTrans.TransRecId == custInvoiceTable.RecId
        {
            this.initTmpTaxWorkTransFromMarkupTrans(_tmpTaxWorkTrans, _custInvoiceJour, custInvoiceJourMarkupTrans);
        }

        MarkupTrans custInvoiceTransMarkupTrans;
        CustInvoiceLine custInvoiceLine;
        while select custInvoiceTransMarkupTrans
            exists join custInvoiceLine
            where custInvoiceTransMarkupTrans.TransTableId == tableNum(CustInvoiceLine)
                && custInvoiceTransMarkupTrans.TransRecId == custInvoiceLine.RecId
                && custInvoiceTable.RecId == custInvoiceLine.ParentRecId
        {
            this.initTmpTaxWorkTransFromMarkupTrans(_tmpTaxWorkTrans, _custInvoiceJour, custInvoiceTransMarkupTrans);
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxes_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the FreeTextInvoice taxes information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    ///     A <c>CustInvoiceJour</c> record that contains invoice data.
    /// </param>
    /// <remarks>
    ///     This method is used for Czech Republic.
    /// </remarks>
    public void insertTaxes_CZ(CustInvoiceJour _custInvoiceJour)
    {
        TmpTaxWorkTrans tmpTaxWorkTrans;
        TmpTaxWorkTrans tmpTaxWorkTransTotals;
        TmpTaxWorkTrans tmpTaxWorkTransRecord;
        TaxTrans taxTrans;
        CustInvoiceJour_W custInvoiceJour_W;
        CustTrans custTrans;

        str totalStr;
        boolean calcTax = true;

        TaxProformaSpec taxProformaSpec;

        void addTmpTaxWorkTrans(Voucher _voucher, TransDate _transDate, InvoiceId invoiceId = "")
        {
            while select taxTrans
                where taxTrans.Voucher == _voucher
                    && taxTrans.TransDate == _transDate
            {
                tmpTaxWorkTrans.clear();
                tmpTaxWorkTrans.initFromTaxTrans(taxTrans);
                tmpTaxWorkTrans.HeadingTableId = _custInvoiceJour.TableId;
                tmpTaxWorkTrans.HeadingRecId = _custInvoiceJour.RecId;
                tmpTaxWorkTrans.InvoiceId = invoiceId;
                tmpTaxWorkTrans.insert();
            }
        }

        if (!isInvoiceCreditNote)
        {
            if (_custInvoiceJour.isProforma() && formletterProformaPrint)
            {
                tmpTaxWorkTrans = this.tmpTaxWorkTrans(_custInvoiceJour);
            }
            else
            {
                addTmpTaxWorkTrans(_custInvoiceJour.LedgerVoucher, _custInvoiceJour.InvoiceDate);
            }
        }
        else
        {
            if (!(_custInvoiceJour.isProforma() && formletterProformaPrint))
            {
                select firstonly taxTrans
                    where taxTrans.Voucher == _custInvoiceJour.LedgerVoucher
                       && taxTrans.TransDate == _custInvoiceJour.InvoiceDate;

                if (!taxTrans)
                {
                    calcTax = false;
                }
            }

            if (calcTax)
            {
                this.addTmpTaxWorkFromInvoiceJour_CZ(tmpTaxWorkTrans, _custInvoiceJour);

                // case for credit note charges
                this.addTmpTaxWorkFromCharges_CZ(tmpTaxWorkTrans, _custInvoiceJour);

                // case for credit note for cash discount
                custInvoiceJour_W = _custInvoiceJour.custInvoiceJour_W();
                if (custInvoiceJour_W.CashDiscOrigInvoiceCustTrans_CZ
                    && !custInvoiceJour_W.IsCashDiscReversed_CZ)
                {
                    custTrans = CustTrans::find(custInvoiceJour_W.CashDiscOrigInvoiceCustTrans_CZ);
                    addTmpTaxWorkTrans(custTrans.Voucher, custTrans.TransDate, custTrans.Invoice);
                }
            }
        }

        taxProformaSpec = new TaxProformaSpec(_custInvoiceJour.RecId);
        taxProformaSpec.setTmpTaxWorkTrans(tmpTaxWorkTrans);
        taxProformaSpec.parmLanguageId(_custInvoiceJour.LanguageId);
        while (taxProformaSpec.parmTaxSpec(false))
        {
            if (cashDiscOnInvoice)
            {
                if (_custInvoiceJour.CashDiscPercent == 100)
                {
                    amount = 0;
                    cashDiscAmountTax = 0;
                }
                else
                {
                    amount = taxProformaSpec.taxBaseAmount() / (100 - _custInvoiceJour.CashDiscPercent) / 100;
                    cashDiscAmountTax = amount * (_custInvoiceJour.CashDiscPercent / 100);
                }
            }

            this.parmOriginalInvoiceId_CZ(taxProformaSpec.parmInvoiceId());
            this.insertIntoFreeTextInvoiceTmp(_custInvoiceJour, null, taxProformaSpec, null, null, null);

            if (isInvoiceCreditNote)
            {
                select firstonly forupdate tmpTaxWorkTransTotals
                    where tmpTaxWorkTransTotals.TaxCode == taxProformaSpec.taxCode()
                       && tmpTaxWorkTransTotals.SourceCurrencyCode == taxProformaSpec.currencyCode();

                if (!tmpTaxWorkTransTotals)
                {
                    tmpTaxWorkTransTotals.TaxCode = taxProformaSpec.taxCode();
                    tmpTaxWorkTransTotals.HeadingTableId = _custInvoiceJour.TableId;
                    tmpTaxWorkTransTotals.HeadingRecId = _custInvoiceJour.RecId;
                    tmpTaxWorkTransTotals.SourceTableId = tmpTaxWorkTransTotals.HeadingTableId;
                    tmpTaxWorkTransTotals.SourceRecId = tmpTaxWorkTransTotals.HeadingRecId;
                    tmpTaxWorkTransTotals.SourceCurrencyCode = taxProformaSpec.currencyCode();
                    tmpTaxWorkTransTotals.TransDate = _custInvoiceJour.InvoiceDate;
                }

                tmpTaxWorkTransTotals.SourceRegulateAmountCur += taxProformaSpec.taxAmount();
                tmpTaxWorkTransTotals.TaxAmount += taxProformaSpec.taxAmountMST();
                tmpTaxWorkTransTotals.SourceBaseAmountCur += taxProformaSpec.taxBaseAmount();
                tmpTaxWorkTransTotals.TaxBaseAmount += taxProformaSpec.taxBaseAmountMST();
                tmpTaxWorkTransTotals.TaxBaseQty += taxProformaSpec.taxBaseQty();
                tmpTaxWorkTransTotals.write();
            }
        }

        totalStr = "@SYS14107";
        while select tmpTaxWorkTransTotals
        {
            if (!isInvoiceCreditNote)
            {
                tmpTaxWorkTransTotals.TaxCode = strFmt("@SYS90673", tmpTaxWorkTransTotals.TaxCode);
            }

            // create new tmp buffer with one record - workaround grouping in TaxSpec class
            tmpTaxWorkTransRecord = null;
            buf2Buf(tmpTaxWorkTransTotals, tmpTaxWorkTransRecord);
            tmpTaxWorkTransRecord.insert();

            taxProformaSpec = new TaxProformaSpec(_custInvoiceJour.RecId);
            taxProformaSpec.setTmpTaxWorkTrans(tmpTaxWorkTransRecord);
            taxProformaSpec.parmLanguageId(_custInvoiceJour.LanguageId);

            while (taxProformaSpec.parmTaxSpec(false))
            {
                if (cashDiscOnInvoice)
                {
                    if (_custInvoiceJour.CashDiscPercent == 100)
                    {
                        amount = 0;
                        cashDiscAmountTax = 0;
                    }
                    else
                    {
                        amount = taxProformaSpec.taxBaseAmount() / (100 - _custInvoiceJour.CashDiscPercent) / 100;
                        cashDiscAmountTax = amount * (_custInvoiceJour.CashDiscPercent / 100);
                    }
                }

                this.parmOriginalInvoiceId_CZ(isInvoiceCreditNote ? totalStr : '');
                this.insertIntoFreeTextInvoiceTmp(_custInvoiceJour, null, taxProformaSpec, null, null, null);
                totalStr = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTransportationDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the transportation information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    private void insertTransportationDocument(CustInvoiceJour _custInvoiceJour)
    {
        CustTable custTable_Seller;
        TransportationDocument transportationDocument;
        TransportationVehicle transportationVehicle;
        UserId userId;
        HcmWorker hcmWorker;

        custTable_Seller = _custInvoiceJour.custTable_OrderAccount();
        freeTextInvoiceLocalizationTmp.TransportationDataSection = NoYes::Yes;
        transportationDocument = TransportationDocument::find(_custInvoiceJour.TransportationDocument);

        if (transportationDocument)
        {
            if (isoCountryCode == #isoLV)
            {
                freeTextInvoiceLocalizationTmp.DoPrintTransportationDocument = NoYes::Yes;
                freeTextInvoiceLocalizationTmp.EconomicActivity = transportationDocument.EconomicActivityType;
            }
            else
            {
                freeTextInvoiceLocalizationTmp.DoPrintTransportationDocument = transportationDocument.DoPrintTransportationDocument;
            }

            //<GEELT>
            if (isoCountryCode == #isoLT)
            {
                userId = CustInvoiceTable::findPostedInvoice(_custInvoiceJour.OrderAccount, _custInvoiceJour.InvoiceId, _custInvoiceJour.InvoiceDate).createdBy;
                hcmWorker = HcmWorker::find(HcmWorker::userId2Worker(userId));

                freeTextInvoiceLocalizationTmp.TransportationContactPersonName = hcmWorker.name();
                freeTextInvoiceLocalizationTmp.TransportationContactPersonTitle = hcmWorker.title();
            }
            else
            {
                //</GEELT>
                freeTextInvoiceLocalizationTmp.TransportationContactPersonName = transportationDocument.contactPersonName(_custInvoiceJour);
                freeTextInvoiceLocalizationTmp.TransportationContactPersonTitle = transportationDocument.contactPersonTitle(_custInvoiceJour);
                //<GEELT>
            }
            //</GEELT>

            freeTextInvoiceLocalizationTmp.TransPortationIssuedByName = transportationDocument.issuedByName();
            freeTextInvoiceLocalizationTmp.TransportationIssuedByTitle = transportationDocument.issuedByTitle();

            if (freeTextInvoiceLocalizationTmp.DoPrintTransportationDocument)
            {
                // Identifies the record having the transporation data.
                freeTextInvoiceLocalizationTmp.DeliveryName = _custInvoiceJour.DeliveryName;
                freeTextInvoiceLocalizationTmp.DeliveryAddress = _custInvoiceJour.deliveryAddress();

                // Set values from transportation document.
                freeTextInvoiceLocalizationTmp.TransportationCarrierAddress = transportationDocument.carrierAddress(custTable_Seller.Party);
                freeTextInvoiceLocalizationTmp.TransportationCarrierName = transportationDocument.carrierName(custTable_Seller.Party);

                if (isoCountryCode == #isoLV)
                {
                    freeTextInvoiceLocalizationTmp.SpecialFormattedTransportationLoadedDate = RNumDateInWordConverter::construct(currentUserLanguage()).date2strExt( any2date(transportationDocument.LoadedDateTime), false, true);
                }
                else
                {
                    freeTextInvoiceLocalizationTmp.TransportationLoadedDateTime = transportationDocument.LoadedDateTime;
                }
                freeTextInvoiceLocalizationTmp.TransportationLoadedAddress = transportationDocument.displayLoadedPostalAddressing();
                freeTextInvoiceLocalizationTmp.TransportationLoadedName = transportationDocument.LoadedAddressName;

                freeTextInvoiceLocalizationTmp.TransportationPackageDangerDegree = transportationDocument.PackageDangerDegree;
                freeTextInvoiceLocalizationTmp.TransportationPackageDescription = transportationDocument.PackageDescription;

                // Set values from transportation vehicle.
                transportationVehicle = TransportationVehicle::findByTransportationDocument(transportationDocument.RecId);

                if (transportationVehicle)
                {
                    freeTextInvoiceLocalizationTmp.TransportationVehicleDescription = transportationVehicle.modelDescription();
                    freeTextInvoiceLocalizationTmp.TransportationVehicleDriverName = transportationVehicle.DriverName;
                    freeTextInvoiceLocalizationTmp.TransportationVehiclePlateNumber = transportationVehicle.PlateNumber;
                    freeTextInvoiceLocalizationTmp.TransportationVehicleTrailerNumber = transportationVehicle.TrailerNumber;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountDecimals</Name>
				<Source><![CDATA[
    private str invoiceAmountDecimals(CustInvoiceJour _custInvoiceJour)
    {
        AmountCur remainAmountToBePaid = _custInvoiceJour.remainAmountToBePaid();

        if (remainAmountToBePaid >= 0 && !_custInvoiceJour.PaymentSched)
        {
            return strReplace(num2str(frac(remainAmountToBePaid) * 100, 2, 0, 0, 0), ' ', '0');
        }
        return 'XX';
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountNoDecimals</Name>
				<Source><![CDATA[
    private str invoiceAmountNoDecimals(CustInvoiceJour _custInvoiceJour)
    {
        AmountCur remainAmountToBePaid = _custInvoiceJour.remainAmountToBePaid();

        if (remainAmountToBePaid >= 0 && !_custInvoiceJour.PaymentSched)
        {
            return num2str(trunc(remainAmountToBePaid), 1, 0, 0, 0);
        }
        return strRep('X', 6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTxt</Name>
				<Source><![CDATA[
    private str invoiceTxt(CustInvoiceJour _custInvoiceJour)
    {
        str invoiceTxt;

        // A custom data method on the report is used to read these flags and fill in the correct
        // label. This is because contract.parmInstanceType() is not necessarily correct now
        // that this report is preProcessed.
        invoiceTxt = _custInvoiceJour.isProforma() ? '1' : '0';
        invoiceTxt += _custInvoiceJour.Prepayment ? '1' : '0';
        invoiceTxt += custParameters.CreditInvoicingReport ? '1' : '0';

        return invoiceTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markUpTaxCode</Name>
				<Source><![CDATA[
    private TaxWriteCode markUpTaxCode(TaxCode _taxCode)
    {
        TaxTable taxTable;

        if (hasTableAccess(tableNum(TaxTable), AccessType::View))
        {
            taxTable = TaxTable::find(_taxCode);
            if (taxTable)
            {
                return taxTable.PrintCode;
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocrField</Name>
				<Source><![CDATA[
    private str ocrField(CustInvoiceJour _custInvoiceJour)
    {
        return moneyTransferSlip.ocrField(_custInvoiceJour.InvoiceAccount, _custInvoiceJour.InvoiceId,
                strLen(int2str(NumberSeq::highest(SalesParameters::numRefInvoiceId().NumberSequenceId))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocrLine_FI</Name>
				<Source><![CDATA[
    private str ocrLine_FI(CustInvoiceJour _custInvoiceJour)
    {
        return moneyTransferSlip_FI.ocrLine(_custInvoiceJour.InvoiceId, _custInvoiceJour.InvoiceAmount, _custInvoiceJour.DueDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overdueFineTxt_FR</Name>
				<Source><![CDATA[
    private str overdueFineTxt_FR()
    {
        str overdueFineTxt;
        Label label;
        LanguageId languageId = custInvoiceJour.LanguageId ? custInvoiceJour.LanguageId : infolog.language();
        TransDate transDate = custInvoiceJour.DocumentDate ?
                                             custInvoiceJour.DocumentDate :
                                             custInvoiceJour.DueDate;

        if (!isInvoiceCreditNote &&
            (isoCountryCode == #isoFR) &&
            custFormLetterDocument.DocuOverdueFineTxtInvoice_FR &&
            custFormLetterDocument.DocuOverdueFineNumOfDaysInvoice_FR &&
            custInvoiceJour.custInvoiceJour_FR().PrintOverdueFineTxt)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFR00018, funcName());

            label = new Label(languageId);
            overdueFineTxt = strFmt(label.extractString(literalStr("@SYS4002111")),
                                    custFormLetterDocument.DocuOverdueFineTxtInvoice_FR,
                                    strFmtByLanguage(languageId, '{0:d}', transDate + custFormLetterDocument.DocuOverdueFineNumOfDaysInvoice_FR));
        }

        return overdueFineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentId2_PaymentId3_CH</Name>
				<Source><![CDATA[
    private str paymentId2_PaymentId3_CH()
    {
        return strFmt('%1 %2', moneyTransferSlip_CH.ocr_PaymentId2(), moneyTransferSlip_CH.ocr_PaymentId3());
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentReference</Name>
				<Source><![CDATA[
    private PaymReference paymentReference(CustInvoiceJour _custInvoiceJour)
    {
        if (moneyTransferSlip_BE)
        {
            return moneyTransferSlip_BE.initPaymId(_custInvoiceJour);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentStubDueDate</Name>
				<Source><![CDATA[
    private str paymentStubDueDate(CustInvoiceJour _custInvoiceJour)
    {
        if (!_custInvoiceJour.creditNote() && !_custInvoiceJour.PaymentSched)
        {
            return strFmt('%1 %2', "@SYS21703", date2str(_custInvoiceJour.DueDate, -1, -1, -1, -1, -1, -1, DateFlags::FormatAll));
        }

        return #emptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentStubInvoiceId</Name>
				<Source><![CDATA[
    private str paymentStubInvoiceId(CustInvoiceJour _custInvoiceJour)
    {
        if (!_custInvoiceJour.creditNote())
        {
            return strFmt('%1: %2', "@SYS12128", _custInvoiceJour.InvoiceId);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data in the <c>FreeTextInvoiceTmp</c> table.
    /// </summary>
    public void processReport()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableConnections</Name>
				<Source><![CDATA[
    public void setTableConnections()
    {
        freeTextInvoiceTmp.setConnection(this.parmUserConnection());
        freeTextInvoiceHeaderFooterTmp.setConnection(this.parmUserConnection());
        salesInvoicePaymentStubTmp.setConnection(this.parmUserConnection());

        // <GEEU>
        if (conFind(#easternEuropeAll, isoCountryCode))
        {
            freeTextInvoiceLocalizationTmp.setConnection(this.parmUserConnection());
        }
        // </GEEU>

        if (MarkupPeriodChargeFeature::instance().isEnabled())
        {
            freeTextInvoiceTmp.setConnection(this.parmUserConnection());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    private TmpTaxWorkTrans tmpTaxWorkTrans(CustInvoiceJour _custInvoiceJour)
    {
        if (_custInvoiceJour.isProforma() && formletterProformaPrint)
        {
            return formletterProformaPrint.tmpTaxWorkTrans(_custInvoiceJour.RecId);
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>