<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdRouteOprOverview_Route</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>ProdRoute</c> datasource of
/// the <c>ProdRouteOprOverview</c> form
/// </summary>
class PmfFormCtrl_ProdRouteOprOverview_Route
    extends PmfFormCtrl
{
    ProdRoute prodRoute;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the <c>active()</c> event has been processed for the datasource
    /// </summary>
    public void dataSourceActivePost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdRouteOprOverview,Grid)),
                formRun.design().controlName(formControlStr(ProdRouteOprOverview,ProdRoute_ProdId)),
                methodstr(PmfFormCtrl_ProdRouteOprOverview_Route, isBatchEnabled),
                ButtonRuleEffectType::Label,
                "@PRO138");

            this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdRouteOprOverview,Identification)),
                formRun.design().controlName(formControlStr(ProdRouteOprOverview,Identification_ProdId)),
                methodstr(PmfFormCtrl_ProdRouteOprOverview_Route, isBatchEnabled),
                ButtonRuleEffectType::Label,
                "@PRO138");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the underlying order is a production batch order
    /// </summary>
    /// <returns>
    /// true, if the order is a production batch order
    /// </returns>
    /// <remarks>
    /// This method is mostly used for the button manager to determine the states of various controls
    /// </remarks>
    public boolean isBatchEnabled()
    {
        ProdTable   callerProdTable;

        Common      common = this.callerBuffer();

        boolean     ret = false;

        switch (common.TableId)
        {
            case tablenum(ProdTable) :
                callerProdTable = common;
                ret = callerProdTable.ProdType == ProdType::Process;
                break;
            default:
            // break;
        }

        ret = ret
            || this.menuItemName()
                    == menuitemdisplaystr(PmfProdBatchRouteOprOverview);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdRoute))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.parmBuffer(_datasources1);

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_ProdRouteOprOverview_Route construct()
    {
        return new PmfFormCtrl_ProdRouteOprOverview_Route();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_ProdRouteOprOverview_Route newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_ProdRouteOprOverview_Route::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>