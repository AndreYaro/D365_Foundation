<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkHeaderProcessingValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSWorkHeaderProcessingValidator
{
    private WHSWorkTable workTable;
    private WHSUserId    userId;
    private boolean      throwOnInvalidWork = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWorkTable</Name>
				<Source><![CDATA[
    internal WHSWorkTable parmWorkTable(WHSWorkTable _workTable = workTable)
    {
        workTable = _workTable;
        return workTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    internal WHSUserId parmUserId(WHSUserId _userId = userId)
    {
        userId = _userId;
        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrowOnInvalidWork</Name>
				<Source><![CDATA[
    internal boolean parmThrowOnInvalidWork(boolean _throwOnInvalidWork = throwOnInvalidWork)
    {
        throwOnInvalidWork = _throwOnInvalidWork;
        return throwOnInvalidWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkTable</Name>
				<Source><![CDATA[
    internal static WHSWorkHeaderProcessingValidator newFromWorkTable(
        WHSWorkTable _workTable,
        WHSUserId    _userId)
    {
        WHSWorkHeaderProcessingValidator validator = new WHSWorkHeaderProcessingValidator();
        validator.parmWorkTable(_workTable);
        validator.parmUserId(_userId);

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkHeaderForProcessing</Name>
				<Source><![CDATA[
    internal boolean validateWorkHeaderForProcessing()
    {
        boolean ret = this.validateWorkHeaderExists();
        ret = ret && this.validateWorkTableFrozen();
        ret = ret && this.validateWorkHasRelatedReplenishment();
        ret = ret && this.validateWorkCancelled();
        ret = ret && this.validateWorkHeaderLockedByOtherUser();
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkHeaderExists</Name>
				<Source><![CDATA[
    private boolean validateWorkHeaderExists()
    {
        if (!workTable)
        {
            if (throwOnInvalidWork)
            {
                throw error("@WAX567");
            }

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkHasRelatedReplenishment</Name>
				<Source><![CDATA[
    private boolean validateWorkHasRelatedReplenishment()
    {
        if (workTable.canExecuteWorkThatNeedsReplenishment()
            && workTable.allInitialPickWorkLinesNeedReplenishment())
        {
            if (throwOnInvalidWork)
            {
                throw error(strFmt("@WAX:AllInitialPickWorkLinesNeedReplen", workTable.WorkId));
            }

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkTableFrozen</Name>
				<Source><![CDATA[
    private boolean validateWorkTableFrozen()
    {
        if (workTable.Frozen)
        {
            if (throwOnInvalidWork)
            {
                WHSWorkTable::throwWorkFrozenError(workTable);
            }

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkCancelled</Name>
				<Source><![CDATA[
    private boolean validateWorkCancelled()
    {
        if (workTable.WorkStatus == WHSWorkStatus::Cancelled)
        {
            if (throwOnInvalidWork)
            {
                throw error("@WAX2211");
            }

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkHeaderLockedByOtherUser</Name>
				<Source><![CDATA[
    private boolean validateWorkHeaderLockedByOtherUser()
    {
        if (workTable.LockedUser && workTable.LockedUser != userId)
        {
            if (throwOnInvalidWork)
            {
                throw error("@WAX1831");
            }

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>