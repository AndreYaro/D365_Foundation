<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseAsyncHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Methods that facilitate asynchronous method calls from forms for the Expense module.
/// </summary>
class TrvExpenseAsyncHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaskToAsyncMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a task for the given expense to the map. Task is added to the start of the list, so the recent task will be the first one.
    /// </summary>
    /// <param name = "_expenseAsyncTaskMap">The map between expenses and their list of async tasks.</param>
    /// <param name = "_trvExpTransRecId">The expense for which the task is added.</param>
    /// <param name = "_task">The task to add.</param>
    public static void addTaskToAsyncMap(Map _expenseAsyncTaskMap, RefRecId _trvExpTransRecId, System.Threading.Tasks.Task _task)
    {
        List taskList;

        if (_expenseAsyncTaskMap.exists(_trvExpTransRecId))
        {
            taskList = _expenseAsyncTaskMap.lookup(_trvExpTransRecId);
        }
        else
        {
            taskList = new List(Types::AnyType);
        }

        taskList.addStart(_task);
        _expenseAsyncTaskMap.insert(_trvExpTransRecId, taskList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCompletedTasksFromAsyncMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the completed async tasks from the map for the given expense.
    /// </summary>
    /// <param name = "_expenseAsyncTaskMap">The map between expenses and their list of async tasks.</param>
    /// <param name = "_trvExpTransRecId">The expense for which completed tasks are to be removed.</param>
    public static void removeCompletedTasksFromAsyncMap(Map _expenseAsyncTaskMap, RefRecId _trvExpTransRecId)
    {
        if (_expenseAsyncTaskMap.exists(_trvExpTransRecId))
        {
            List taskList = _expenseAsyncTaskMap.lookup(_trvExpTransRecId);
            ListIterator taskListIterator = new ListIterator(taskList);

            while (taskListIterator.more())
            {
                System.Threading.Tasks.Task task = taskListIterator.value();
                if (task.IsCompleted)
                {
                    taskListIterator.delete();
                }
                else
                {
                    taskListIterator.next();
                }
            }

            // Remove the entry from the map if there are no more tasks for this expense.
            if (!taskList.elements())
            {
                _expenseAsyncTaskMap.remove(_trvExpTransRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForAllAsyncTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Waits for all the async writes on the given expense to return.
    /// Returns immediately if there is none.
    /// </summary>
    /// <param name = "_expenseAsyncTaskMap">The map between expenses and their list of async tasks.</param>
    /// <param name = "_trvExpTransRecId">The expense for which wait is performed.</param>
    /// <param name = "_trvExpTrans_DS">The datasource tracking the record for which wait is performed.</param>
    public static void waitForAllAsyncTasks(Map _expenseAsyncTaskMap, RefRecId _trvExpTransRecId, FormDataSource _trvExpTrans_DS)
    {
        if (_expenseAsyncTaskMap.exists(_trvExpTransRecId))
        {
            List taskList = _expenseAsyncTaskMap.lookup(_trvExpTransRecId);

            if (taskList.elements() > 0)
            {
                System.Collections.Generic.List<System.Threading.Tasks.Task> tasks = new System.Collections.Generic.List<System.Threading.Tasks.Task>();
                System.Threading.Tasks.Task[] taskArray;

                ListIterator taskListIterator = new ListIterator(taskList);

                while (taskListIterator.more())
                {
                    System.Threading.Tasks.Task task = taskListIterator.value();
                    tasks.Add(task);
                    taskListIterator.next();
                }

                taskArray = tasks.ToArray();
                // Wait until all tasks are completed before returning to the caller.
                System.Threading.Tasks.Task::WaitAll(taskArray);

                if (_trvExpTrans_DS && _trvExpTrans_DS.cursor().RecId == _trvExpTransRecId)
                {
                    _trvExpTrans_DS.reread();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForAllAsyncTasksForAllExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Waits for all the async writes on all the expenses to return.
    /// Returns immediately if there is none.
    /// </summary>
    /// <param name = "_expenseAsyncTaskMap">The map between expenses and their list of async tasks.</param>
    public static void waitForAllAsyncTasksForAllExpenses(Map _expenseAsyncTaskMap)
    {
        MapEnumerator mapEnum = _expenseAsyncTaskMap.getEnumerator();
        System.Collections.Generic.List<System.Threading.Tasks.Task> tasks = new System.Collections.Generic.List<System.Threading.Tasks.Task>();
        System.Threading.Tasks.Task[] taskArray;

        while (mapEnum.moveNext())
        {
            List taskList = mapEnum.currentValue();

            if (taskList.elements() > 0)
            {
                ListIterator taskListIterator = new ListIterator(taskList);

                while (taskListIterator.more())
                {
                    System.Threading.Tasks.Task task = taskListIterator.value();
                    tasks.Add(task);
                    taskListIterator.next();
                }
            }
        }

        if (tasks.Count > 0)
        {
            taskArray = tasks.ToArray();
            // Wait until all tasks are completed before returning to the caller.
            System.Threading.Tasks.Task::WaitAll(taskArray);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForLastAsyncTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Waits for the last async write on the given expense to return.
    /// Returns immediately if there is none.
    /// </summary>
    /// <param name = "_expenseAsyncTaskMap">The map between expenses and their list of async tasks.</param>
    /// <param name = "_trvExpTransRecId">The expense for which wait is performed.</param>
    public static void waitForLastAsyncTask(Map _expenseAsyncTaskMap, RefRecId _trvExpTransRecId)
    {
        if (_expenseAsyncTaskMap.exists(_trvExpTransRecId))
        {
            List taskList = _expenseAsyncTaskMap.lookup(_trvExpTransRecId);

            if (taskList.elements() > 0)
            {
                ListIterator taskListIterator = new ListIterator(taskList);
                System.Threading.Tasks.Task task = taskListIterator.value();

                // Wait until last async task is completed before returning to the caller.
                task.Wait();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>