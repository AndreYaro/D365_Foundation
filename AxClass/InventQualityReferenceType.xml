<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityReferenceType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventQualityReferenceType</c> class is a reference document.
/// </summary>
/// <remarks>
/// This class describes certain properties of a reference document.
/// </remarks>
abstract class InventQualityReferenceType
{
    DimensionDefault            defaultDimension;
    InventDimId                 inventDimId;
    InventDimId					bufferInventDimId;
    ItemId                      itemId;
    InventMovement              movementForRefQty;

    PdsBatchAttribUpdateType    pdsBatchAttribUpdateType;
    boolean                     pdsUpdateRelatedBatches;
    InventBatchId               pdsInventBatchId;

    private UnknownNoYes        isItemWHSEnabled;
    private UnknownNoYes        isWarehouseEnabledForQualityProcess;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTestAccountRelation</c> value for this reference document.
    /// </summary>
    /// <param name="_group">
    ///    A Boolean value that indicates whether to get the relation for the account code group or table.
    /// </param>
    /// <returns>
    ///    The appropriate <c>InventTestAccountRelation</c> value.
    /// </returns>
    public InventTestAccountRelation accountRelation(boolean _group = false)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditQuarantineOnFailure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the Quarantine upon validation failure field can be edited
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean allowEditQuarantineOnFailure()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bufferForRefQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record buffer for the source document
    /// that defines inventory quantities for the referenced document.
    /// </summary>
    /// <returns>
    /// The record buffer for the source document
    /// that defines inventory quantities for the referenced document.
    /// </returns>
    protected Common bufferForRefQty()
    {
        return this.parmBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBlock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the quality management process blocking process can be done.
    /// </summary>
    /// <returns>true if the blocking process can be done; otherwise, false.</returns>
    public boolean canBlock()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>DimensionDefault</c> value from this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>DimensionDefault</c> value.
    /// </returns>
    final public DimensionDefault defaultDimension()
    {
        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default product dimensions.
    /// </summary>
    /// <returns>Returns the current inventory dimension Id unless overriden.</returns>
    public InventDimId initProductDimensions()
    {
        return this.inventDimId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default <c>InventDimId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The <c>InventDimId</c> value.
    /// </returns>
    public InventDimId defaultInventDimId()
    {
        return this.inventDimId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventNonConformanceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance based on an <c>InventNonConformanceTable</c> buffer.
    /// </summary>
    /// <param name="_inventNonConformanceTable">
    ///    An <c>InventNonConformanceTable</c> buffer.
    /// </param>
    protected void initFromInventNonConformanceTable(InventNonConformanceTable _inventNonConformanceTable)
    {
        inventDimId              = _inventNonConformanceTable.InventDimId;
        defaultDimension         = _inventNonConformanceTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance based on the record in the <c>InventTransOrigin</c> table.
    /// </summary>
    /// <param name="_inventTransOrigin">
    ///    A record in the <c>InventTransOrigin</c> table.
    /// </param>
    protected void initFromInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance based on an <c>InventQualityOrderTable</c> buffer.
    /// </summary>
    /// <param name="_orderTable">
    ///    An <c>InventQualityOrderTable</c> buffer.
    /// </param>
    abstract protected void initFromQualityOrder(InventQualityOrderTable _orderTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventDimId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventDimId</c> value.
    /// </returns>
    final public InventDimId inventDimId()
    {
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>InventDimId</c> value for this reference document.
    /// </summary>
    /// <param name = "_inventDimId">The inventory dimension id to set.</param>
    public void setInventDimId(InventDimId _inventDimId)
    {
        inventDimId = _inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDirection</c> for this reference type.
    /// </summary>
    /// <returns>
    /// An <c>InventDirection</c> value.
    /// </returns>
    abstract protected InventDirection inventDirection()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemOrderSetupType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventItemOrderSetupType</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventItemOrderSetupType</c> value.
    /// </returns>
    public InventItemOrderSetupType inventItemOrderSetupType()
    {
        return InventItemOrderSetupType::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventRefId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventRefId</c> value.
    /// </returns>
    abstract public InventRefId inventRefId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventRefQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the lot quantity of this reference document.
    /// </summary>
    /// <returns>
    /// The quantity as an <c>InventQty</c> value.
    /// </returns>
    public InventQty inventRefQty()
    {
        InventMovement movementLocal = this.parmMovementForRefQty();
        return movementLocal.transSign() * movementLocal.transQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventRefTotalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total inventory transaction quantity for this reference document.
    /// </summary>
    /// <returns>
    /// A quantity.
    /// </returns>
    public InventQty inventRefTotalQty()
    {
        InventQty totalQty;

        switch (this.inventDirection())
        {
            case InventDirection::Receipt:
                totalQty = this.parmMovementForRefQty().transIdSum().receipt();
                break;
            case InventDirection::Issue:
                totalQty = this.parmMovementForRefQty().transIdSum().issue();
                break;
            case InventDirection::None:
                totalQty = this.inventRefQty();
        }

        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventRefTotalQtyCW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total inventory transaction catch weight quantity for this reference document.
    /// </summary>
    /// <returns>
    /// A catch weight quantity.
    /// </returns>
    public PdsCWInventQty inventRefTotalQtyCW()
    {
        PdsCWInventQty totalQty;

        switch (this.inventDirection())
        {
            case InventDirection::Receipt:
                totalQty = this.parmMovementForRefQty().transIdSum().pdsCWReceipt();
                break;
            case InventDirection::Issue:
                totalQty = this.parmMovementForRefQty().transIdSum().pdsCWIssue();
                break;
            case InventDirection::None:
                totalQty = this.pdsCWInventRefQty();
        }

        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventSiteId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventSiteId</c> value.
    /// </returns>
    public InventSiteId inventSiteId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTransId</c>  value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventTransId</c> value.
    /// </returns>
    public InventTransId inventTransId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEligibleForDestructiveTest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a quality order can be created for a destructive test.
    /// </summary>
    /// <returns>
    ///    true if the order can be created; otherwise, false.
    /// </returns>
    public boolean isEligibleForDestructiveTest()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEligibleForQualityManagement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the reference document is eligible for quality management.
    /// </summary>
    /// <returns>
    ///    true if the reference document is eligible; otherwise, false.
    /// </returns>
    public boolean isEligibleForQualityManagement()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>ItemId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>ItemId</c> value.
    /// </returns>
    final public ItemId itemId()
    {
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterateQualityAssociations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates all relevant combinations of certain quality association criteria and enables a passed
    /// actor to act on them.
    /// </summary>
    /// <param name="actionable">
    /// An <c>InventQualityManagementActionable</c> reference to be called for action on each combination
    /// of quality association criteria.
    /// </param>
    public void iterateQualityAssociations (InventQualityManagementActionable actionable)
    {
        InventTestItemQualityGroup  itemQualityGroup;

        actionable.actOnAssociations(
            TableGroupAll::Table,
            this.itemId(),
            TableGroupAll::All,
            '',
            TableGroupAll::All,
            '');

        while select QualityGroupId
            from itemQualityGroup
            where itemQualityGroup.ItemId == this.itemId()
        {
            actionable.actOnAssociations(
                TableGroupAll::GroupId,
                itemQualityGroup.QualityGroupId,
                TableGroupAll::All,
                '',
                TableGroupAll::All,
                '');
        }

        actionable.actOnAssociations(
            TableGroupAll::All,
            '',
            TableGroupAll::All,
            '',
            TableGroupAll::All,
            '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected final void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>oprNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>OprNum</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>OprNum</c> value.
    /// </returns>
    public OprNum oprNum()
    {
        return minInt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    abstract public Common parmBuffer(Common _buffer = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMovementForRefQty</Name>
				<Source><![CDATA[
    public InventMovement parmMovementForRefQty(InventMovement _movementForRefQty = movementForRefQty)
    {
        if (prmisDefault(_movementForRefQty))
        {
            if (!movementForRefQty)
            {
                movementForRefQty = InventMovement::construct(this.bufferForRefQty());
            }
        }
        else
        {
            movementForRefQty = _movementForRefQty;
        }

        return movementForRefQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsBatchAttribUpdateType</Name>
				<Source><![CDATA[
    protected PdsBatchAttribUpdateType parmPdsBatchAttribUpdateType(
        PdsBatchAttribUpdateType _updateType = pdsBatchAttribUpdateType)
    {
        if (!prmisdefault(_updateType))
        {
            pdsBatchAttribUpdateType = _updateType;
        }

        return pdsBatchAttribUpdateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsInventBatchId</Name>
				<Source><![CDATA[
    public InventBatchId parmPdsInventBatchId(
        InventBatchId _pdsInventBatchId = pdsInventBatchId)
    {
        if (!prmisdefault(_pdsInventBatchId))
        {
            pdsInventBatchId = _pdsInventBatchId;
        }

        return pdsInventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmPdsInventSiteId(InventSiteId _inventSiteId = this.inventSiteId())
    {
        return this.inventSiteId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsUpdateRelatedBatches</Name>
				<Source><![CDATA[
    protected boolean parmPdsUpdateRelatedBatches(
        boolean _pdsUpdateRelatedBatches = pdsUpdateRelatedBatches)
    {
        if (!prmisdefault(_pdsUpdateRelatedBatches))
        {
            pdsUpdateRelatedBatches = _pdsUpdateRelatedBatches;
        }

        return pdsUpdateRelatedBatches;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the quality order selected can be updated by using the reference order inventory
    /// batch attributes.
    /// </summary>
    /// <param name="_orderTable">
    /// The inventory quality order that is currently selected.
    /// </param>
    /// <returns>
    /// Always returns true .
    /// </returns>
    protected boolean pdsBatchAttribCheck(InventQualityOrderTable _orderTable)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the quality orders that are related to the reference buffer that is used to update batch
    /// attributes.
    /// </summary>
    public void pdsBatchAttribSelect()
    {
        InventQualityOrderTable     orderTable;
        InventTransId               inventTransId   = this.inventTransId();
        InventRefId                 inventRefId     = this.inventRefId();
        RouteOprId                  routeOprId      = this.routeOprId();
        OprNum                      oprNum          = this.oprNum();

        while select orderTable
            order by ValidatedDateTime desc
            where orderTable.ReferenceType          == this.referenceType()
                && (orderTable.InventRefTransId     == inventTransId
                        || !inventTransId)
                && (orderTable.InventRefId          == inventRefId
                        || !inventRefId)
                && (orderTable.RouteOprId           == routeOprId
                        || !routeOprId)
                && (orderTable.OprNum               == oprNum
                        || (oprNum == minint()))
                && orderTable.ItemId                == this.itemId()
                && orderTable.OrderStatus          != InventTestOrderStatus::Open
                && orderTable.PdsUpdateInvBatchAttributes == NoYes::Yes
        {
            if (this.pdsBatchAttribCheck(orderTable))
            {
                orderTable.pdsValidateBatchAttributes(
                    this.parmPdsInventBatchId(),
                    false,
                    pdsUpdateRelatedBatches);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWInventRefQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the lot catch weight quantity of this reference document.
    /// </summary>
    /// <returns>
    /// The catch weight quantity as an <c>InventQty</c> value.
    /// </returns>
    public PdsCWInventQty pdsCWInventRefQty()
    {
        InventMovement movementLocal = this.parmMovementForRefQty();
        return movementLocal.transSign() * movementLocal.pdsCWTransQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query to iterate all referred inventory transactions.
    /// </summary>
    /// <param name="_inventTestDocumentStatus">
    /// A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    /// A test execution value.
    /// </param>
    /// <param name="_discriminatingInventoryDimensions">
    /// An integer that represents discriminating inventory dimensions.
    /// </param>
    /// <returns>
    /// A query to retrieve referred inventory transactions.
    /// </returns>
    public Query queryInventTrans(
        InventTestDocumentStatus            _inventTestDocumentStatus,
        InventTestExecution                 _inventTestExecution,
        InventTestDiscriminatingInventDims  _discriminatingInventoryDimensions)
    {
        InventDimParm           inventDimParm;

        Query query = new Query();

        QueryBuildDataSource qbdsInventTransOrigin = query.addDataSource(tablenum(InventTransOrigin));

        InventTransId inventTransId = this.inventTransId();
        if (inventTransId)
        {
            qbdsInventTransOrigin.addRange(fieldnum(InventTransOrigin, InventTransId)).value(queryValue(inventTransId));
        }

        QueryBuildDataSource qbdsInventTrans = qbdsInventTransOrigin.addDataSource(tablenum(InventTrans));
        qbdsInventTrans.relations(true);
        qbdsInventTrans.joinMode(JoinMode::InnerJoin);
        qbdsInventTrans.fetchMode(QueryFetchMode::One2One);
        qbdsInventTrans.addRange(fieldnum(InventTrans, ValueOpen)).value(queryValue(NoYes::Yes));
        qbdsInventTrans.addRange(fieldnum(InventTrans, TransChildType)).value(queryValue(InventTransChildType::None));

        this.setStatusIssueRangeValue(
            qbdsInventTrans.addRange(fieldnum(InventTrans, StatusIssue)),
            _inventTestDocumentStatus,
            _inventTestExecution);

        this.setStatusReceiptRangeValue(
            qbdsInventTrans.addRange(fieldnum(InventTrans, StatusReceipt)),
            _inventTestDocumentStatus,
            _inventTestExecution);

        QueryBuildDataSource qbdsInventDim = qbdsInventTrans.addDataSource(tablenum(InventDim));
        qbdsInventDim.relations(true);
        qbdsInventDim.joinMode(JoinMode::InnerJoin);
        qbdsInventDim.fetchMode(QueryFetchMode::One2One);

        // Add group by clauses for all inventory dimensions that are specified as discriminating
        inventDimParm.initFromInventDimFixed(_discriminatingInventoryDimensions);

        if (!bufferInventDimId)
        {
            bufferInventDimId = WHSLoadLineAllocationProcessor::getValueFromCache(WHSLoadLineAllocationProcessor::transactionScopeCacheKey(this.inventTransId(), curext()));
        }
        inventDimParm.queryAddGroupByField(qbdsInventDim);

        if (bufferInventDimId && this.itemId())
        {
            InventDim bufferInventDim = InventDim::find(bufferInventDimId);
            InventDimParm  bufferInventDimParm;
            bufferInventDimParm.initPhysicalDimensionsFromInventDim(InventDimGroupSetup::newItemId(this.itemId()), bufferInventDim);
            bufferInventDimParm.clearStorageDimensions();
            bufferInventDimParm = InventDimParm::andParms(inventDimParm, bufferInventDimParm);

            if (!bufferInventDimParm.isAllFlagNo())
            {
                InventDim::queryAddRangeCriteriaForSelectedDims(qbdsInventDim, bufferInventDim, bufferInventDimParm);
            }
        }

        qbdsInventTrans.fields().addField(fieldnum(InventTrans, Qty), SelectionField::Sum);
        qbdsInventTrans.fields().addField(fieldnum(InventTrans, PdsCWQty), SelectionField::Sum);
        this.setQueryInventTransOrdering(qbdsInventTrans, _inventTestDocumentStatus, _inventTestExecution);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTestReferenceType</c> value of this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventTestReferenceType</c> value.
    /// </returns>
    abstract public InventTestReferenceType referenceType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>RouteId</c> value of this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>RouteId</c> value.
    /// </returns>
    public RouteId routeId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeOprId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>RouteOprId</c> value of this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>RouteOprId</c> value.
    /// </returns>
    public RouteOprId routeOprId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeWrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>WrkCtrId</c> data type of a related route.
    /// </summary>
    /// <returns>
    /// The appropriate <c>WrkCtrId</c> value; otherwise, an empty <c>WrkCtrId</c> value.
    /// </returns>
    public WrkCtrId routeWrkCtrId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryInventTransOrdering</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ordering of the transactions for an <c>InventTrans</c> table data source, depending on the
    /// document status and test execution values.
    /// </summary>
    /// <param name="_qbdsInventTrans">
    /// A query build data source object related to the <c>InventTrans</c> table.
    /// </param>
    /// <param name="_inventTestDocumentStatus">
    /// A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    /// A test execution value.
    /// </param>
    protected void setQueryInventTransOrdering(
        QueryBuildDataSource        _qbdsInventTrans,
        InventTestDocumentStatus    _inventTestDocumentStatus,
        InventTestExecution         _inventTestExecution)
    {
        _qbdsInventTrans.addGroupByField(fieldNum(InventTrans, StatusIssue));
        _qbdsInventTrans.addOrderByField(fieldNum(InventTrans, StatusIssue), SortOrder::Ascending);

        _qbdsInventTrans.addGroupByField(fieldNum(InventTrans, StatusReceipt));
        _qbdsInventTrans.addOrderByField(fieldNum(InventTrans, StatusReceipt), SortOrder::Ascending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryInventTransOrderingPhysicalVouch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ordering of the transactions for an <c>InventTrans</c> table data source, depending on the
    /// physical voucher packing slip.
    /// </summary>
    /// <param name="_qbdsInventTrans">
    /// A query build data source object related to the <c>InventTrans</c> table.
    /// </param>
    protected void setQueryInventTransOrderingPhysicalVouch(QueryBuildDataSource _qbdsInventTrans)
    {
        _qbdsInventTrans.addGroupByField(fieldNum(InventTrans, DatePhysical));
        _qbdsInventTrans.addOrderByField(fieldNum(InventTrans, DatePhysical), SortOrder::Descending);

        _qbdsInventTrans.addGroupByField(fieldNum(InventTrans, VoucherPhysical));
        _qbdsInventTrans.addOrderByField(fieldNum(InventTrans, VoucherPhysical), SortOrder::Descending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusIssueRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a range value for the <c>StatusIssue</c> field on the data source of the <c>InventTrans</c>
    ///    table that is based on the document status and test execution values.
    /// </summary>
    /// <param name="_qbrStatusIssue">
    ///    A query build range object.
    /// </param>
    /// <param name="_inventTestDocumentStatus">
    ///    A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    ///    A test execution value.
    /// </param>
    protected void setStatusIssueRangeValue(
        QueryBuildRange             _qbrStatusIssue,
        InventTestDocumentStatus    _inventTestDocumentStatus,
        InventTestExecution         _inventTestExecution)
    {
        _qbrStatusIssue.value(queryValue(StatusIssue::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusReceiptRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a range value for the <c>StatusReceipt</c> field on the data source of the <c>InventTrans</c>
    ///    table that is based on the document status and test execution values.
    /// </summary>
    /// <param name="_qbrStatusReceipt">
    ///    A query build range object.
    /// </param>
    /// <param name="_inventTestDocumentStatus">
    ///    A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    ///    A test execution value.
    /// </param>
    protected void setStatusReceiptRangeValue(
        QueryBuildRange             _qbrStatusReceipt,
        InventTestDocumentStatus    _inventTestDocumentStatus,
        InventTestExecution         _inventTestExecution)
    {
        _qbrStatusReceipt.value(queryValue(StatusReceipt::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsInventoryBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the reference document supports the blocking of items.
    /// </summary>
    /// <returns>
    /// true if blocking is supported; otherwise, false.
    /// </returns>
    public boolean supportsInventoryBlocking()
    {
        if (InventTable::find(this.itemId()).ItemType != ItemType::Item)
        {
            // blocking only supported for items, not services
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>WrkCtrId</c> value of this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>WrkCtrId</c> value.
    /// </returns>
    public WrkCtrId wrkCtrId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>InventQualityReferenceType</c> class that is based
    /// on a table buffer that contains a reference document.
    /// </summary>
    /// <param name="_buffer">
    /// A <c>Common</c> table buffer that contains the reference document.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventQualityReferenceType</c> class.
    /// </returns>
    public static InventQualityReferenceType newFromBuffer(Common _buffer)
    {
        var tableNameAttribute = new InventQualityReferenceTableNameAttribute(tableId2Name(_buffer.TableId));
        InventQualityReferenceType inventQualityReferenceType = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(InventQualityReferenceType), tableNameAttribute);

        if (!inventQualityReferenceType)
        {
            inventQualityReferenceType = InventQualityReferenceTypeInventory::construct();
        }

        inventQualityReferenceType.parmBuffer(_buffer);

        return inventQualityReferenceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventNonConformanceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>InventQualityReferenceType</c> class that is based
    /// on an <c>InventNonConformanceTable</c> table buffer.
    /// </summary>
    /// <param name="_inventNonConformanceTable">
    /// An <c>InventNonConformanceTable</c> table buffer.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventQualityReferenceType</c> class.
    /// </returns>
    public static InventQualityReferenceType newFromInventNonConformanceTable(InventNonConformanceTable _inventNonConformanceTable)
    {
        var nonConformanceTypeAttrb = new InventNonConformanceTypeFactoryAttribute(_inventNonConformanceTable.InventNonConformanceType);
        InventQualityReferenceType inventQualityReferenceType = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(InventQualityReferenceType), nonConformanceTypeAttrb);

        if (!inventQualityReferenceType)
        {
            inventQualityReferenceType = InventQualityReferenceTypeInventory::construct();
        }

        inventQualityReferenceType.initFromInventNonConformanceTable(_inventNonConformanceTable);

        return inventQualityReferenceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>InventQualityReferenceType</c> class that is based
    /// on an <c>InventTrans</c> table buffer.
    /// </summary>
    /// <param name="_inventTransOrigin">
    /// The <c>InventTransOrigin</c> table buffer.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventQualityReferenceType</c> class.
    /// </returns>
    public static InventQualityReferenceType newFromInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
        var originReferenceCategoryAttrb = new InventTransTypeFactoryAttribute(_inventTransOrigin.ReferenceCategory);
        InventQualityReferenceType inventQualityReferenceType = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(InventQualityReferenceType), originReferenceCategoryAttrb);

        if (!inventQualityReferenceType)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        inventQualityReferenceType.initFromInventTransOrigin(_inventTransOrigin);

        return inventQualityReferenceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>InventQualityReferenceType</c> class that is based
    /// on a quality order.
    /// </summary>
    /// <param name="_orderTable">
    /// An <c>InventQualityOrderTable</c> buffer.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventQualityReferenceType</c> class.
    /// </returns>
    public static InventQualityReferenceType newFromQualityOrder(InventQualityOrderTable _orderTable)
    {
        var referenceTypeAttrb = new InventTestReferenceTypeFactoryAttribute(_orderTable.ReferenceType);
        InventQualityReferenceType inventQualityReferenceType = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(InventQualityReferenceType), referenceTypeAttrb);

        if (!inventQualityReferenceType)
        {
            inventQualityReferenceType = InventQualityReferenceTypeInventory::construct();
        }

        inventQualityReferenceType.initFromQualityOrder(_orderTable);

        return inventQualityReferenceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPdsBatchAttribUpdateBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>InventQualityReferenceType</c> class that is used
    /// to update batch attribute values.
    /// </summary>
    /// <param name="_buffer">
    /// The reference buffer that indicates which derived version of the class to instantiate.
    /// </param>
    /// <param name="_updateType">
    /// A <c>PdsBatchAttribUpdateType</c> value that indicates when the batch attribute update should occur.
    /// </param>
    /// <param name="_updateRelatedBatches">
    /// Indicates whether a quality order must update all inventory batches that are related to the
    /// reference order.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventQualityReferenceType</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The class cannot be instantiated based on the specified value of the <paramref name="_buffer" />
    /// parameter.
    /// </exception>
    public static InventQualityReferenceType newPdsBatchAttribUpdateBuffer(
    Common                      _buffer,
    PdsBatchAttribUpdateType    _updateType,
    boolean                     _updateRelatedBatches = true)
    {
        InventQualityReferenceType  inventQualityReferenceType;

        switch (_buffer.TableId)
        {
            case tablenum(ProdTable) :
            case tablenum(PurchLine) :
            case tablenum(PurchParmLine)  :
            case tablenum(PmfProdCoBy) :
                inventQualityReferenceType = InventQualityReferenceType::newFromBuffer(_buffer);
                break;
            default :
                throw error("@PDS1216");
        }

        inventQualityReferenceType.parmPdsBatchAttribUpdateType(_updateType);
        inventQualityReferenceType.parmPdsUpdateRelatedBatches(_updateRelatedBatches);

        return inventQualityReferenceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemAndWarehouseQualityManagementProcessEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if quality management processes are enabled for the WHS enabled warehouse.
    /// </summary>
    /// <returns>
    /// true, if both the item and warehouse are quality management process enabled for warehouses; otherwise, false.
    /// </returns>    
    protected internal boolean isItemAndWarehouseQualityManagementProcessEnabled()
    {
        return (this.isItemEnabledForWHSProcesses() 
            &&  this.isWarehouseEnabledForQualityManagementProcesses());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemEnabledForWHSProcesses</Name>
				<Source><![CDATA[
    private boolean isItemEnabledForWHSProcesses()
    {
        if (isItemWHSEnabled == UnknownNoYes::Unknown)
        {
            isItemWHSEnabled = WHSInventEnabled::exist(this.itemId()) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }
        
        return isItemWHSEnabled == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWarehouseEnabledForQualityManagementProcesses</Name>
				<Source><![CDATA[
    private boolean isWarehouseEnabledForQualityManagementProcesses()
    {
        if (isWarehouseEnabledForQualityProcess == UnknownNoYes::Unknown)
        {
            InventLocation  inventLocation;
            InventDim       inventDim;

            select firstonly RecId from inventLocation
                where inventLocation.WHSEnabled                 == NoYes::Yes
                &&    inventLocation.EnableQualityManagement    == NoYes::Yes
                    exists join inventDim
                    where inventDim.InventLocationId == inventLocation.InventLocationId
                    &&    InventDim.inventDimId      == this.inventDimId();

            isWarehouseEnabledForQualityProcess = inventLocation.RecId != 0 ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return isWarehouseEnabledForQualityProcess == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the load ID corresponding to the source document reference.
    /// </summary>
    /// <returns>Load ID</returns>
    [Hookable(false)]
    internal WHSLoadId loadId()
    {
        WHSLoadId       loadId;
        WHSLoadLine     loadLine;
        
        if (this.inventTransId())
        {
            select firstOnly LoadId from loadLine
                where loadLine.InventTransId == this.inventTransId() &&
                      loadLine.LoadId        != '';
            
            loadId = loadLine.LoadId;
            
            if (loadId)
            {
                select firstOnly LoadId from loadLine
                    where loadLine.InventTransId    == this.inventTransId() &&
                          loadLine.LoadId           != loadId               &&
                          loadLine.LoadId           != '';
                
                if (loadLine.LoadId)
                {
                    loadId = '';
                }
            }
        }
        
        return loadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the shipment ID corresponding to the source document reference.
    /// </summary>
    /// <returns>Shipment ID</returns>
    [Hookable(false)]
    internal WHSShipmentId shipmentId()
    {
        WHSShipmentId   shipmentId;
        WHSLoadLine     loadLine;
        
        if (this.inventTransId())
        {
            select firstOnly ShipmentId from loadLine
                where loadLine.InventTransId    == this.inventTransId() &&
                      loadLine.ShipmentId       != '';
            
            shipmentId = loadLine.ShipmentId;
            
            if (shipmentId)
            {
                select firstOnly ShipmentId from loadLine
                    where loadLine.InventTransId    == this.inventTransId() &&
                          loadLine.ShipmentId       != shipmentId           &&
                          loadLine.ShipmentId       != '';
                
                if (loadLine.ShipmentId)
                {
                    shipmentId = '';
                }
            }
        }
        
        return shipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadInventRefQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instead of getting the Qty from the order we will look at the load.
    /// This is used when Item sampling has scope set to load.
    /// </summary>
    [Hookable(false)]
    internal InventQty loadInventRefQty()
    {
        throw error(strFmt("@WAX:ItemSamplingScopeRefTypeError", this.referenceType()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipmentInventRefQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instead of getting the Qty from the order we will look at the load.
    /// This is used when Item sampling has scope set to load.
    /// </summary>
    [Hookable(false)]
    internal InventQty shipmentInventRefQty()
    {
        throw error(strFmt("@WAX:ItemSamplingScopeRefTypeError", this.referenceType()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBufferInventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimId getBufferInventDimId()
    {
        return bufferInventDimId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>