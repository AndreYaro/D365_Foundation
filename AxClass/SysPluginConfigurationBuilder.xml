<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysPluginConfigurationBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Use <c>SysPluginConfigurationBuilder</c> class to help setting up the data needed to use
/// <c>[Microsoft.Dynamics.AX.Platform.Extensibility.ExportInterface(Microsoft.Dynamics.AX.Platform.Extensibility.ExportInterfaceType::Configuration)]</c>.
/// 
/// Sample usage:
/// <c>
/// SysPluginConfigurationBuilder::construct().forPlugin(classNum(RetailPricingCalculatorCreator))
///                                           .addImplementation(classNum(RetailPricingCalculatorDefaultCreator), 99)
///                                           .build();
/// </c>
/// </summary>
/// <remarks>
/// The builder never overwrites configuration that is already present in the database.
/// So calling build method twice or creating a new instance of the builder with the same parameters is a no-op.
/// </remarks>
class SysPluginConfigurationBuilder
{
    private const str NamespacePrefix = 'Dynamics.AX.Application';
    
    private ClassId _baseClassId;
    private List implementations;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        implementations = new List(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the builder.
    /// </summary>
    /// <returns>An instance of the builder.</returns>
    public static SysPluginConfigurationBuilder construct()
    {
        return new SysPluginConfigurationBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>forPlugin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configure the build to create records for the given plugin.
    /// </summary>
    /// <param name = "_classId">The ClassId for the plugin class.</param>
    /// <returns>The instance of the builder, so that calls can be chained.</returns>
    public SysPluginConfigurationBuilder forPlugin(ClassId _classId)
    {
        _baseClassId = _classId;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new implementation to plugin.
    /// </summary>
    /// <param name = "_classId">The ClassId for the implementation class.</param>
    /// <param name = "_sequenceNumber">The order in which the implementation will be used.</param>
    /// <returns>The instance of the builder, so that calls can be chained.</returns>
    public SysPluginConfigurationBuilder addImplementation(ClassId _classId, int _sequenceNumber)
    {
        implementations.addEnd([_classId, _sequenceNumber]);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the configuration provided to the database so that SysPluginFactory::getInstances() can use it.
    /// </summary>
    public void build()
    {
        if (_baseClassId == 0 || implementations.empty())
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        SysPluginClass basePluginClass = SysPluginConfigurationBuilder::findPlugin(_baseClassId);

        if (basePluginClass.RecId == 0)
        {
            basePluginClass = SysPluginConfigurationBuilder::createPlugin(_baseClassId);
        }

        Enumerator implementationsEnumerator = implementations.getEnumerator();
        while (implementationsEnumerator.moveNext())
        {
            ClassId implementationClassId;
            int sequenceNumber;
            
            [implementationClassId, sequenceNumber] = implementationsEnumerator.current();

            if (!SysPluginConfigurationBuilder::isPluginConfigured(implementationClassId))
            {
                SysPluginClass pluginImplementation = SysPluginConfigurationBuilder::createImplementation(implementationClassId);
                SysPluginConfigurationBuilder::createPluginConfiguration(basePluginClass, pluginImplementation, sequenceNumber);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPlugin</Name>
				<Source><![CDATA[
    private static SysPluginClass createPlugin(ClassId _class)
    {
        return SysPluginConfigurationBuilder::createPluginClass(_class, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createImplementation</Name>
				<Source><![CDATA[
    private static SysPluginClass createImplementation(ClassId _class)
    {
        return SysPluginConfigurationBuilder::createPluginClass(_class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPluginConfigured</Name>
				<Source><![CDATA[
    private static boolean isPluginConfigured(ClassId _class)
    {
        SysPluginClass pluginClass = SysPluginConfigurationBuilder::findPlugin(_class);

        return pluginClass.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlugin</Name>
				<Source><![CDATA[
    private static SysPluginClass findPlugin(ClassId _class)
    {
        SysPluginClass pluginClass;

        select pluginClass where pluginClass.Name == SysPluginConfigurationBuilder::getClassName(_class);

        return pluginClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPluginClass</Name>
				<Source><![CDATA[
    private static SysPluginClass createPluginClass(ClassId _class, boolean _isBaseClass = false, boolean _isInterface = false)
    {
        SysPluginClass pluginClass;
        
        pluginClass.Name = SysPluginConfigurationBuilder::getClassName(_class);
        pluginClass.IsInterface = _isInterface;
        pluginClass.IsBaseClass = _isBaseClass;
        pluginClass.insert();

        return pluginClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPluginConfiguration</Name>
				<Source><![CDATA[
    private static RecId createPluginConfiguration(SysPluginClass _baseClass, SysPluginClass _implementation, int _seq)
    {
        SysPluginConfiguration pluginConfiguration;

        pluginConfiguration.SysPluginClass = _baseClass.RecId;
        pluginConfiguration.SysPluginClassInstance = _implementation.RecId;
        pluginConfiguration.SequenceNumber = _seq;
        pluginConfiguration.insert();

        return pluginConfiguration.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClassName</Name>
				<Source><![CDATA[
    private static str getClassName(ClassId _class)
    {
        return strFmt('%1.%2', NamespacePrefix, classId2Name(_class));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>