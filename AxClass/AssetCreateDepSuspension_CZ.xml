<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCreateDepSuspension_CZ</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This class creates a suspension on depreciation for any asset.
///     It stores the suspension and modifies the last depreciation date or
///     Depreciation start date.
/// </summary>
class AssetCreateDepSuspension_CZ extends RunBase
{
    AssetBook assetBook;
    AssetAcquisitionDate acquisitionDate;

    Yr periodYear;
    DialogField dialogPeriod;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;
        DialogGroup dialogGroup;

        dialog = super();

        dialogGroup = dialog.addGroup('');
        dialogGroup.columns(1);
        dialogGroup.frameType(FormFrameType::None);
        dialog.addGroup("@GLS112891", dialogGroup);
        dialogPeriod = dialog.addFieldValue(extendedTypeStr(Yr), year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())), "@GLS112892", "@GLS112893");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmPeriodYear(dialogPeriod.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    public void initParameters(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00005, funcName());

        Args args = _args.caller().args();

        assetBook = args.record() as AssetBook;

        acquisitionDate = assetBook.AcquisitionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodYear</Name>
				<Source><![CDATA[
    public Yr parmPeriodYear(Yr _periodYear = year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
    {
        periodYear = _periodYear;
        return periodYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        AssetDepSuspension_CZ assetDepSuspension_CZ;
        TransDate dateEndYear;
        TransDate dateStartYear;
        AssetId assetId;
        AssetBookId assetBookId;
        TransDate depreciationStartDate;
        TransDate lastDepreciationDate;

        ttsbegin;

        dateStartYear = mkDate(1, 1, periodYear + 1);

        FiscalCalendarYear fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(), mkDate(1, 1, periodYear));

        dateEndYear = fiscalCalendarYear ? fiscalCalendarYear.EndDate : mkDate(31, 12, periodYear);

        if (assetBook.RecId)
        {
            assetId = assetBook.AssetId;
            assetBookId = assetBook.BookId;
            depreciationStartDate = assetBook.DepreciationStartDate;
            lastDepreciationDate = assetBook.LastDepreciationDate;

            assetDepSuspension_CZ = AssetDepSuspension_CZ::find(assetId, assetBookId, '', dateEndYear);
            if (!assetDepSuspension_CZ)
            {
                assetBook.selectForUpdate(true);

                if (AssetTrans::existDepreciationTrans(assetId, assetBookId))
                {
                    assetBook.LastDepreciationDate = dateEndYear;
                }
                else
                {
                    assetBook.DepreciationStartDate = dateStartYear;
                }

                assetBook.update();
            }
        }

        if (!assetDepSuspension_CZ)
        {
            assetDepSuspension_CZ.AssetId = assetId;
            assetDepSuspension_CZ.BookId = assetBookId;
            assetDepSuspension_CZ.SuspensionDate = dateEndYear;
            assetDepSuspension_CZ.DepreciationStartDate = depreciationStartDate;
            assetDepSuspension_CZ.LastDepreciationDate = lastDepreciationDate;
            assetDepSuspension_CZ.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates to check if an asset is eligible for depreciation suspension.
    /// </summary>
    /// <param name="_calledFrom">
    ///     The object or form which makes the call.
    /// </param>
    /// <returns>
    ///     A boolean value indicating if the depreciation of an asset can be suspended.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        FiscalCalendarYear fiscalCalendarYear;
        FiscalCalendarRecId fiscalCalendarId;
        AssetBookTable assetBookTable;
        boolean isValid;
        TransDate startDate;
        TransDate endDate;

        isValid = super(_calledFrom);

        if (isValid && !acquisitionDate)
        {
            isValid = checkFailed("@GLS112894");
        }

        if (isValid && year(acquisitionDate) > periodYear)
        {
            isValid = checkFailed(strFmt("@GLS112895", periodYear, acquisitionDate));
        }

        startDate = mkDate(1, 1, periodYear);
        endDate = mkDate(31, 12, periodYear);

        if (isValid && assetBook.RecId && assetBook.depreciationProfile().DepreciationYear == AssetDepreciationYear::Fiscal)
        {
            fiscalCalendarId = assetBookTable.getFiscalCalendar();
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarId, startDate);
            if (fiscalCalendarYear)
            {
                if (startDate != fiscalCalendarYear.StartDate || endDate != fiscalCalendarYear.EndDate)
                {
                    isValid = Box::yesNo("@FixedAssets_Suspension:CreateNewSuspension", DialogButton::No);
                }
            }
            else
            {
                isValid = checkFailed(strFmt("@SYS127980", FiscalCalendar::find(fiscalCalendarId).CalendarId, periodYear));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static Name description()
    {
        return "@GLS112900";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AssetCreateDepSuspension_CZ createDepSuspension;

        createDepSuspension = new AssetCreateDepSuspension_CZ();
        createDepSuspension.initParameters(_args);
        if (createDepSuspension.prompt())
        {
            createDepSuspension.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>