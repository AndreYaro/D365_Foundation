<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventStatusCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventStatusCache</c> caches the data for the <c>WHSInventStatus</c> table.
/// </summary>
internal final class WHSInventStatusCache
{
    private SysGlobalObjectCache sysGlobalObjectCache;
    private str                  caller;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cacheScope</Name>
				<Source><![CDATA[
    private GlobalObjectCacheScope cacheScope()
    {
        return classStr(WHSInventStatusCache);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the entire cache.
    /// </summary>
    public void clearCache()
    {
        sysGlobalObjectCache.clear(this.cacheScope());
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeCacheKey</Name>
				<Source><![CDATA[
    private container makeCacheKey()
    {
        return [caller, curExt()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMixedStatusCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is only one inventory status.
    /// </summary>
    /// <returns>
    /// true if inventory status is less than two; otherwise false
    /// </returns>
    public boolean skipMixedStatusCheck()
    {
        container cacheKey = this.makeCacheKey();
        container result   = sysGlobalObjectCache.find(this.cacheScope(), cacheKey);

        if (result == conNull())
        {
            result = this.skipMixedStatusCheckNoCache(cacheKey);
        }
        
        return conPeek(result, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMixedStatusCheckNoCache</Name>
				<Source><![CDATA[
    private container skipMixedStatusCheckNoCache(container _cacheKey)
    {
        WHSInventStatus inventStatus;

        select count(RecId) from inventStatus;

        container result;

        if (inventStatus.RecId > 1)
        {
            result = [false];
        }
        else
        {
            result = [true];
        }
            
        sysGlobalObjectCache.insert(this.cacheScope(), _cacheKey, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        sysGlobalObjectCache = classFactory.globalObjectCache();
        caller               = strFmt('%1.%2', classStr(WHSInventStatusCache), methodStr(WHSInventStatusCache, skipMixedStatusCheck));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSInventStatusCache construct()
    {
        return new WHSInventStatusCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>