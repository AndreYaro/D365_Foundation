<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportDP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxReportDP_JP</c> is the Report Data Provider class for the <c>TaxReport_JP</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(TaxReportContract_JP))
]
public class TaxReportDP_JP extends SrsReportDataProviderPreProcessTempDB
{
    TaxReportContract_JP                contract;
    TaxReportTmp_JP                     taxReportTmp_JP;
    TaxCalcReportFields_JP              taxCalcReportFields_JP;
    TaxReport_JP                        taxReport_JP;
    LedgerConsumptionTaxCalcTrans_JP    ledgerConsumptionTaxCalcTrans_JP;

    private const str dateFormat = 'gg-yy-MM-dd';

    #COSNumbers
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxReportTmp_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the <c>TaxReportTmp_JP</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>TaxReportTmp_JP</c> temporary table.
    /// </returns>
    [
        SrsReportDataSetAttribute(tableStr(TaxReportTmp_JP))
    ]
    public TaxReportTmp_JP getTaxReportTmp_JP()
    {
        select taxReportTmp_JP;
        return taxReportTmp_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the report temporary table.
    /// </summary>
    private void insertIntoTmpTable()
    {
        #define.CharacterNumber101(101)
        #define.CharacterNumber151(151)
        #define.CharacterNumber201(201)
        #define.CharacterNumber251(251)

        LedgerConsumptionTaxReportTrans_JP ledgerConsumptionTaxReportTrans_JP;

        CompanyInfo companyInfo = CompanyInfo::find();

        ledgerConsumptionTaxCalcTrans_JP = LedgerConsumptionTaxCalcTrans_JP::findByDateAndTypeOfDeclaration(
            contract.parmTaxPeriod(),
            contract.parmFromDate(),
            contract.parmToDate(),
            contract.parmtypeOfDeclaration());

        while select ledgerConsumptionTaxReportTrans_JP
            where ((ledgerConsumptionTaxReportTrans_JP.PeriodOfTaxationFrom == contract.parmFromDate()
                && ledgerConsumptionTaxReportTrans_JP.PeriodOfTaxationTo ==  contract.parmToDate())
                || (ledgerConsumptionTaxReportTrans_JP.InterimFrom == contract.parmFromDate()
                && ledgerConsumptionTaxReportTrans_JP.InterimTo ==  contract.parmToDate()))
                && ledgerConsumptionTaxReportTrans_JP.TypeOfDeclaration == contract.parmtypeOfDeclaration()
                && ledgerConsumptionTaxReportTrans_JP.DataLayout == contract.parmDataLayout()
        {
            taxReportTmp_JP.clear();

            taxReportTmp_JP.TaxationOfficeName          = this.taxationOfficeName();
            taxReportTmp_JP.CompanyAddress              = companyInfo.postalAddress().Address;
            taxReportTmp_JP.CompanyName                 = companyInfo.Name;
            taxReportTmp_JP.CompanyRep                  = ledgerConsumptionTaxCalcTrans_JP.Apellative ? ledgerConsumptionTaxCalcTrans_JP.Apellative : ledgerConsumptionTaxReportTrans_JP.CompanyRepresentative;
            taxReportTmp_JP.AccountingPersonnel         = companyInfo.AccountingPersonnel_JP;
            taxReportTmp_JP.Fromdate                    = JapaneseDateTimeHelper::date2str(contract.parmFromDate(), dateFormat);
            taxReportTmp_JP.Todate                      = JapaneseDateTimeHelper::date2str(contract.parmToDate(), dateFormat);
            taxReportTmp_JP.TypeOfDeclaration           = ledgerConsumptionTaxReportTrans_JP.TypeOfDeclaration;
            taxReportTmp_JP.reportItem1                 = ledgerConsumptionTaxReportTrans_JP.ReportItem1;
            taxReportTmp_JP.reportItem2                 = ledgerConsumptionTaxReportTrans_JP.ReportItem2;
            taxReportTmp_JP.reportItem3                 = ledgerConsumptionTaxReportTrans_JP.ReportItem3;
            taxReportTmp_JP.reportItem4                 = ledgerConsumptionTaxReportTrans_JP.ReportItem4;
            taxReportTmp_JP.reportItem5                 = ledgerConsumptionTaxReportTrans_JP.ReportItem5;
            taxReportTmp_JP.reportItem6                 = ledgerConsumptionTaxReportTrans_JP.ReportItem6;
            taxReportTmp_JP.reportItem7                 = ledgerConsumptionTaxReportTrans_JP.ReportItem7;
            taxReportTmp_JP.reportItem8                 = ledgerConsumptionTaxReportTrans_JP.ReportItem8;
            taxReportTmp_JP.reportItem9                 = ledgerConsumptionTaxReportTrans_JP.ReportItem9;
            taxReportTmp_JP.reportItem10                = ledgerConsumptionTaxReportTrans_JP.ReportItem10;
            taxReportTmp_JP.reportItem11                = ledgerConsumptionTaxReportTrans_JP.ReportItem11;
            taxReportTmp_JP.reportItem12                = ledgerConsumptionTaxReportTrans_JP.ReportItem12;
            taxReportTmp_JP.reportItem13                = ledgerConsumptionTaxReportTrans_JP.ReportItem13;
            taxReportTmp_JP.reportItem14                = ledgerConsumptionTaxReportTrans_JP.ReportItem14;
            taxReportTmp_JP.reportItem15                = ledgerConsumptionTaxReportTrans_JP.ReportItem15;
            taxReportTmp_JP.reportItem16                = ledgerConsumptionTaxReportTrans_JP.ReportItem16;
            taxReportTmp_JP.reportItem17                = ledgerConsumptionTaxReportTrans_JP.ReportItem17;
            taxReportTmp_JP.reportItem18                = ledgerConsumptionTaxReportTrans_JP.ReportItem18;
            taxReportTmp_JP.reportItem19                = ledgerConsumptionTaxReportTrans_JP.ReportItem19;
            taxReportTmp_JP.reportItem20                = ledgerConsumptionTaxReportTrans_JP.ReportItem20;
            taxReportTmp_JP.reportItem21                = ledgerConsumptionTaxReportTrans_JP.ReportItem21;
            taxReportTmp_JP.reportItem22                = ledgerConsumptionTaxReportTrans_JP.ReportItem22;
            taxReportTmp_JP.reportItem23                = ledgerConsumptionTaxReportTrans_JP.ReportItem23;
            taxReportTmp_JP.reportItem24                = ledgerConsumptionTaxReportTrans_JP.ReportItem24;
            taxReportTmp_JP.reportItem25                = ledgerConsumptionTaxReportTrans_JP.ReportItem25;
            taxReportTmp_JP.reportItem26                = ledgerConsumptionTaxReportTrans_JP.ReportItem26;
            taxReportTmp_JP.InstallmentBasis            = ledgerConsumptionTaxReportTrans_JP.InstallmentBasis;
            taxReportTmp_JP.DeferredPaymentBasis        = ledgerConsumptionTaxReportTrans_JP.DeferredPaymentBasis;
            taxReportTmp_JP.PercentageOfCompletionBasis = ledgerConsumptionTaxReportTrans_JP.PercentageOfCompletionBasis;
            taxReportTmp_JP.CashBasisAccounting         = ledgerConsumptionTaxReportTrans_JP.CashBasisAccounting;
            taxReportTmp_JP.ExceptionalTaxCalcTreatment = ledgerConsumptionTaxReportTrans_JP.ExceptionalTaxCalcTreatment;
            taxReportTmp_JP.IndividualMethod            = ledgerConsumptionTaxReportTrans_JP.IndividualMethod;
            taxReportTmp_JP.LumpsumMethod               = ledgerConsumptionTaxReportTrans_JP.LumpsumMethod;
            taxReportTmp_JP.FullyDeductible             = ledgerConsumptionTaxReportTrans_JP.FullyDeductible;
            taxReportTmp_JP.TaxPaymentAmount            = ledgerConsumptionTaxReportTrans_JP.TaxPaymentAmount;
            taxReportTmp_JP.TaxRefundAmount             = ledgerConsumptionTaxReportTrans_JP.TaxRefundAmount;
            taxReportTmp_JP.TaxableSalesBenchmarkPeriod = ledgerConsumptionTaxReportTrans_JP.TaxableSalesBenchmarkPeriod;
            taxReportTmp_JP.CompanyBankAccountId        = ledgerConsumptionTaxReportTrans_JP.BankAccount;
            taxReportTmp_JP.CommentsOne                 = subStr(ledgerConsumptionTaxReportTrans_JP.Comments, 0, #50);
            taxReportTmp_JP.CommentsTwo                 = subStr(ledgerConsumptionTaxReportTrans_JP.Comments, #51, #50);
            taxReportTmp_JP.CommentsThree               = subStr(ledgerConsumptionTaxReportTrans_JP.Comments, #CharacterNumber101, #50);
            taxReportTmp_JP.CommentsFour                = subStr(ledgerConsumptionTaxReportTrans_JP.Comments, #CharacterNumber151, #50);
            taxReportTmp_JP.CommentsFive                = subStr(ledgerConsumptionTaxReportTrans_JP.Comments, #CharacterNumber201, #50);
            taxReportTmp_JP.CommentsSix                 = subStr(ledgerConsumptionTaxReportTrans_JP.Comments, #CharacterNumber251, #50);
            taxReportTmp_JP.NameOfTaxAccountant         = substr(ledgerConsumptionTaxReportTrans_JP.NameOfTaxAccountant, 0, #50);
            taxReportTmp_JP.DocumentSubmittedLaw30      = ledgerConsumptionTaxReportTrans_JP.DocumentSubmittedLaw30;
            taxReportTmp_JP.DocumentSubmittedLaw332     = ledgerConsumptionTaxReportTrans_JP.DocumentSubmittedLaw332;

            date printDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            taxReportTmp_JP.PrintDate = strFmt(
                '%1-%2-%3-%4', 
                JapaneseDateTimeHelper::getEraName(printDate),
                JapaneseDateTimeHelper::getYearStr(printDate),
                JapaneseDateTimeHelper::getMonthStr(printDate),
                JapaneseDateTimeHelper::getDayStr(printDate));

            taxReportTmp_JP.TaxValue                    = ledgerConsumptionTaxReportTrans_JP.TaxValue;
            taxReportTmp_JP.TaxAmount                   = ledgerConsumptionTaxReportTrans_JP.TaxAmount;
            taxReportTmp_JP.TaxType                     = ledgerConsumptionTaxReportTrans_JP.TaxType;
            taxReportTmp_JP.RatioOfTaxableSales         = ledgerConsumptionTaxReportTrans_JP.RatioOfTaxableSales;
            taxReportTmp_JP.ReportItem4_1               = ledgerConsumptionTaxReportTrans_JP.ReportItem4_1;
            taxReportTmp_JP.RegistrationNumber          = strKeep(ledgerConsumptionTaxReportTrans_JP.RegistrationNumber, '0123456789');

            taxReportTmp_JP.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. The method will be called by
    /// SSRS at runtime, and will compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        LedgerConsumptionTaxReportTrans_JP ledgerConsumptionTaxReportTrans_JP;
        contract = this.parmDataContract() as TaxReportContract_JP;

        taxCalcReportFields_JP = TaxCalcReportFields_JP::construct();

        select firstonly PeriodOfTaxationFrom, PeriodOfTaxationTo, InterimFrom, InterimTo, TypeOfDeclaration
            from ledgerConsumptionTaxReportTrans_JP
            where ((ledgerConsumptionTaxReportTrans_JP.PeriodOfTaxationFrom == contract.parmFromDate()
                && ledgerConsumptionTaxReportTrans_JP.PeriodOfTaxationTo == contract.parmToDate())
                || (ledgerConsumptionTaxReportTrans_JP.InterimFrom == contract.parmFromDate()
                && ledgerConsumptionTaxReportTrans_JP.InterimTo == contract.parmToDate()))
                && ledgerConsumptionTaxReportTrans_JP.TypeOfDeclaration == contract.parmTypeOfDeclaration()
                && ledgerConsumptionTaxReportTrans_JP.DataLayout == contract.parmDataLayout();

        if (ledgerConsumptionTaxReportTrans_JP)
        {
            this.insertIntoTmpTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxationOfficeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Taxation office name
    /// </summary>
    /// <returns>
    /// The taxation office name
    /// </returns>
    private TaxJurisdictionName taxationOfficeName()
    {
        TaxJurisdiction taxJurisdiction;

        select firstonly TaxJurisdictionName from taxJurisdiction
            where taxJurisdiction.TaxPeriod == contract.parmTaxPeriod();

        return taxJurisdiction.TaxJurisdictionName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>