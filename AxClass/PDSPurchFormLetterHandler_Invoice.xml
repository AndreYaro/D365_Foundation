<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSPurchFormLetterHandler_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>PDSPurchFormLetterHandler_Invoice</c> provides pre-/post- event handlers for Purchase Form Letter - Invoice sub-class.
/// </summary>
class PDSPurchFormLetterHandler_Invoice extends PDSPurchFormLetterHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPotency</Name>
				<Source><![CDATA[
        protected boolean checkPotency()
    {
        VendInvoiceInfoLine     invoiceInfoLine;
        PurchLine               purchLine;
        PurchParmUpdate         purchParmUpdate = formLetter.purchParmUpdate();

        boolean                 ok = true;

        while select ReceiveNow
            from invoiceInfoLine
            where invoiceInfoLine.ParmId == purchParmUpdate.ParmId
            join purchLine
                where invoiceInfoLine.InventTransId == purchLine.InventTransId
                    && purchLine.PDSCalculationId   != ""
        {
            if (!this.checkRegisteredPotencyActuals(purchLine, invoiceInfoLine.ReceiveNow + purchLine.invoicedInTotal()))
            {
                ok = false;
            }
            else if (purchLine.registered() + purchLine.RemainPurchFinancial != invoiceInfoLine.ReceiveNow)
            {
                ok = checkFailed(strFmt("@PSC753", purchLine.registered() + purchLine.RemainPurchFinancial, purchLine.ItemId, purchLine.LineNumber));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PDSPurchFormLetterHandler_Invoice construct()
    {
        return new PDSPurchFormLetterHandler_Invoice();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>