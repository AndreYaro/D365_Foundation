<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanDrillThroughHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanDrillThroughHelper</c> class will be used as a base helper for the drill through functionality
/// from budget planning to their source.
/// </summary>
public abstract class BudgetPlanDrillThroughHelper
{
    DimensionDisplayValue mainAccountValue;
    ForecastModelId       forecastModelId;
    str                   items;
    str                   itemGroups;
    str                   categories;
    str                   accounts;
    str                   accountGroups;
    str                   saleTaxGroups;
    boolean               isItemRelationAll;
    boolean               isAccountRelationAll;
    Map                   dimensionAttributeValueMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDimensionAttributeValueMap</Name>
				<Source><![CDATA[
    public Map parmDimensionAttributeValueMap(Map _dimensionAttributeValueMap = dimensionAttributeValueMap)
    {
        dimensionAttributeValueMap = _dimensionAttributeValueMap;

        return dimensionAttributeValueMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMainAccountValue</Name>
				<Source><![CDATA[
    public DimensionDisplayValue parmMainAccountValue(DimensionDisplayValue _mainAccountValue = mainAccountValue)
    {
        mainAccountValue = _mainAccountValue;

        return mainAccountValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastModelId</Name>
				<Source><![CDATA[
    public ForecastModelId parmForecastModelId(ForecastModelId _forecastModelId = forecastModelId)
    {
        forecastModelId = _forecastModelId;

        return forecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRangeCriteriaFromInventPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the range criteria based on invent posting profile for the given account types.
    /// </summary>
    /// <param name = "_inventAccountTypeConsump">The value of the <c>InventAccountType</c> for consumption.</param>
    /// <param name = "_inventAccountTypeDisc">The value of the <c>InventAccountType</c> for discount.</param>
    /// <param name = "_inventAccountTypeDiscExpense">The value of the <c>InventAccountType</c> for discount expense.</param>
    /// <param name = "_includePurchReceipt">Boolean value to include receipt as part of the query condition; optional.</param>
    public void createRangeCriteriaFromInventPosting(
        InventAccountType _inventAccountTypeConsump,
        InventAccountType _inventAccountTypeDisc,
        InventAccountType _inventAccountTypeDiscExpense,
        boolean           _includePurchReceipt = false)
    {
        InventPosting                      inventPosting;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        while select ItemCode, ItemRelation, CategoryRelation, CustVendCode, CustVendRelation, TaxGroupId from inventPosting
            where inventPosting.InventAccountType == _inventAccountTypeConsump
                || inventPosting.InventAccountType == _inventAccountTypeDisc
                || inventPosting.InventAccountType == _inventAccountTypeDiscExpense
                || (_includePurchReceipt
                    && inventPosting.InventAccountType == InventAccountType::PurchReceipt)
            exists join dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == inventPosting.LedgerDimension
                    && dimensionAttributeValueCombination.DisplayValue == mainAccountValue
        {
            if (!isItemRelationAll)
            {
                switch (inventPosting.ItemCode)
                {
                    case InventPostingItemCode::All:
                        isItemRelationAll = true;
                        break;

                    case InventPostingItemCode::GroupId:
                        itemGroups += strFmt(BudgetPlanningConstants::PlaceHolderP1P2, inventPosting.ItemRelation, BudgetPlanningConstants::Comma);
                        break;

                    case InventPostingItemCode::Table:
                        items += strFmt(BudgetPlanningConstants::PlaceHolderP1P2, inventPosting.ItemRelation, BudgetPlanningConstants::Comma);
                        break;

                    case InventPostingItemCode::Category:
                        categories += strFmt(BudgetPlanningConstants::PlaceHolderP1P2, inventPosting.CategoryRelation, BudgetPlanningConstants::Comma);
                        break;
                }
            }

            if (!isAccountRelationAll)
            {
                switch (inventPosting.CustVendCode)
                {
                    case TableGroupAll::All:
                        isAccountRelationAll = true;
                        break;

                    case TableGroupAll::GroupId:
                        accountGroups += strFmt(BudgetPlanningConstants::PlaceHolderP1P2, inventPosting.CustVendRelation, BudgetPlanningConstants::Comma);
                        break;

                    case TableGroupAll::Table:
                        accounts += strFmt(BudgetPlanningConstants::PlaceHolderP1P2, inventPosting.CustVendRelation, BudgetPlanningConstants::Comma);
                        break;
                }
            }

            if (inventPosting.TaxGroupId)
            {
                saleTaxGroups += strFmt(BudgetPlanningConstants::PlaceHolderP1P2, inventPosting.TaxGroupId, BudgetPlanningConstants::Comma);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendDimensionRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends dimension attribute value ranges to the given <c>QueryBuildDataSource</c> object.
    /// </summary>
    /// <param name = "_forecastDataSource">The <c>QueryBuildDataSource</c> object to append dimension attribute value ranges to.</param>
    /// <param name = "_forecastFieldId">The <c>FieldId</c> value of the field to link in the joined <c>DimensionAttributeValueSet</c> table.</param>
    /// <param name = "_dimensionAttributeValueMap">The <c>Map</c> object containing attribute and attribute value pairs to create ranges from.</param>
    public static void appendDimensionRanges(QueryBuildDataSource _forecastDataSource, FieldId _forecastFieldId, Map _dimensionAttributeValueMap)
    {
        if (_dimensionAttributeValueMap && _dimensionAttributeValueMap.elements() > 0)
        {
            QueryBuildDataSource davsDataSource;
            MapEnumerator enumerator = _dimensionAttributeValueMap.getEnumerator();

            while (enumerator.moveNext())
            {
                if (enumerator.currentKey() != tableStr(MainAccount) && enumerator.currentValue() != SYSQuery::valueEmptyString())
                {
                    TableId davsTableId = tableNum(DimensionAttributeValueSet);
                    if (!davsDataSource && !BudgetPlanUtility::tableExistsAsChildDataSource(_forecastDataSource, davsTableId))
                    {
                        davsDataSource = _forecastDataSource.addDataSource(davsTableId);
                        davsDataSource.addLink(_forecastFieldId, fieldNum(DimensionAttributeValueSet, RecId));
                    }

                    davsDataSource
                        .addRange(DimensionAttributeValueSet::getDimensionValueFieldId(enumerator.currentKey()))
                        .value(enumerator.currentValue());
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>