<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconBridgedAutoClearingTopPickController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The controller class for the automaticlly clearing of bridged transactions batch job during bank reconciliation.
/// </summary>
internal class BankReconBridgedAutoClearingTopPickController extends SysOperationServiceController implements BatchRetryable
{
    private static const int DefaultTopPickBatchTasks = 8;
    private static const int BundleSize = 500;

    private RecId bankReconHeaderRecId;
    private BankReconciliationHeader bankReconciliationHeader;

    private BankBridgedAutoClearInstrumentationLogger logger = BankBridgedAutoClearInstrumentationLogger::createLogger(classStr(BankReconBridgedAutoClearingTopPickController));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BankReconBridgedAutoClearingTopPickController construct(RecId _bankReconHeaderRecId = 0)
    {
        BankReconBridgedAutoClearingTopPickController controller = new BankReconBridgedAutoClearingTopPickController(
            classStr(BankReconBridgedAutoClearingTopPickService),
            methodStr(BankReconBridgedAutoClearingTopPickService, process));

        if (_bankReconHeaderRecId)
        {
            controller.bankReconHeaderRecId = _bankReconHeaderRecId;
            controller.bankReconciliationHeader = BankReconciliationHeader::find(_bankReconHeaderRecId);
        }

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        BankReconBridgedAutoClearingTopPickController controller = BankReconBridgedAutoClearingTopPickController::construct();
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        if (this.isInBatch())
        {
            if (!this.getContract().parmIsTopPickClearing())
            {
                BatchHeader batchHeader = this.getOrCreateBatchHeader();
                this.createTopPickPostingTasks(batchHeader, this.prepareTopPickProcessing());

                batchHeader.save();
            }
            else
            {
                super();
            }
        }
        else
        {
            this.runWithoutBatch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets contract obejct.
    /// </summary>
    /// <returns>The <c>BankReconBridgedAutoClearingTopPickContract</c> object.</returns>
    internal BankReconBridgedAutoClearingTopPickContract getContract()
    {
        return this.getDataContractObject(classStr(BankReconBridgedAutoClearingTopPickContract)) as BankReconBridgedAutoClearingTopPickContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBridgedTransPerBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the bridged transaction per bank document.
    /// </summary>
    /// <param name = "_bankDocumentTableRecId">The record id of <c>BankDocumentTable</c>.</param>
    /// <param name = "_clearingDate">The clearing date.</param>
    /// <returns>true if the bridged transaction has been cleared, else false.</returns>
    internal static boolean clearBridgedTransPerBankDocument(RecId _bankDocumentTableRecId, TransDate _clearingDate)
    {
        boolean isCleared;

        if (_bankDocumentTableRecId)
        {
            BankDocumentTable bankDocumentTable = BankDocumentTable::find(_bankDocumentTableRecId);
            BankReconBridgedAutoClearing clearing = BankReconBridgedAutoClearing::construct(bankDocumentTable, _clearingDate);
            clearing.process();

            isCleared = clearing.isCleared;
        }

        return isCleared;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    protected ClassDescription defaultCaption()
    {
        ClassDescription caption;

        if (this.getContract().parmBankReconciliationId())
        {
            caption = strFmt("@Bank:BankReconBridgedAutoClearingCaptionWithBankRecon", this.getContract().parmBankReconciliationId());
        }
        else
        {
            caption = strFmt("@Bank:BankReconBridgedAutoClearingCaption");
        }

        return caption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean ret = super();

        if (ret && (BankBatchProcessingTracking::isBatchJobProcessingLegacy(bankReconciliationHeader, classStr(BankReconBridgedAutoClearing))
            || BankBatchProcessingTracking::isBatchJobProcessing(bankReconciliationHeader, BankReconciliationOperationType::ClearBridgedTrans)))
        {
            ret = checkFailed("@Bank:BankReconBridgedAutoClearingAnotherBatchRunningErrorMessage");
        }

        if (ret && !BankReconBridgedAutoClearing::existBridgedTrans(bankReconHeaderRecId))
        {
            ret = checkFailed("@Bank:BankReconBridgedAutoClearingNoBridgingMessage");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules the automatic clearing of bridged transactions batch job for the specified bank reconciliation.
    /// </summary>
    /// <param name = "_bankReconciliationHeaderRecId">The record id of the specified bank reconciliation.</param>
    internal static void schedule(RecId _bankReconciliationHeaderRecId)
    {
        if (_bankReconciliationHeaderRecId && FeatureStateProvider::isFeatureEnabled(BankBridgedTransAutoClearingFeature::instance()))
        {
            BankReconciliationHeader bankReconHeader = BankReconciliationHeader::find(_bankReconciliationHeaderRecId);
            BankAccountTable bankAccountTable = BankAccountTable::find(bankReconHeader.AccountId);

            if (bankAccountTable.BankReconBridgedAutoClearing)
            {
                BankReconBridgedAutoClearingTopPickController controller = BankReconBridgedAutoClearingTopPickController::construct(_bankReconciliationHeaderRecId);

                BankBridgedAutoClearInstrumentationLogger logger = controller.logger;

                using (SysInstrumentationActivityContext activityContext = logger.initActivities().addBankReconciliationId(staticMethodStr(BankReconBridgedAutoClearingTopPickController, schedule), bankReconHeader.ReconciliationId))
                {
                    if (controller.canSchedule())
                    {
                        BankReconBridgedAutoClearingTopPickContract contract = controller.getContract();
                        contract.parmBankReconciliationId(bankReconHeader.ReconciliationId);

                        BatchHeader batchHeader = BatchHeader::construct();
                        batchHeader.parmRetriesOnFailure(0);
                        batchHeader.addTask(controller);
                        batchHeader.save();

                        logger.initActivities().addBatchHeaderId(activityContext, batchHeader.parmBatchHeaderId());

                        info(strFmt("@Bank:BankReconBridgedAutoClearingBatchScheduledInfoMessage", batchHeader.parmBatchHeaderId(), bankReconHeader.ReconciliationId));

                        // Create tracking
                        BankBatchProcessingTracking tracking = BankBatchProcessingTracking::addTracking(bankReconHeader, batchHeader.parmBatchHeaderId(), BankReconciliationOperationType::ClearBridgedTrans, classStr(BankReconBridgedAutoClearing));

                        logger.initActivities().addBatchHeaderId(activityContext, batchHeader.parmBatchHeaderId());
                        logger.initActivities().addTrackingRecId(activityContext, tracking.RecId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the automatic clearing of bridged transactions batch job can be scheduled for the specified bank reconciliation.
    /// </summary>
    /// <returns>true if the automatic clearing of bridged transactions can be scheduled, else false.</returns>
    private boolean canSchedule()
    {
        BankReconBridgedAutoClearingTopPickContract contract = this.getContract();
        contract.parmBankReconciliationId(bankReconciliationHeader.ReconciliationId);

        return contract.validate()
            && !BankBatchProcessingTracking::isBatchJobProcessingLegacy(bankReconciliationHeader, classStr(BankReconBridgedAutoClearing))
            && !BankBatchProcessingTracking::isBatchJobProcessing(bankReconciliationHeader, BankReconciliationOperationType::ClearBridgedTrans)
            && BankReconBridgedAutoClearing::existBridgedTrans(this.bankReconHeaderRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTopPickProcessing</Name>
				<Source><![CDATA[
    private int64 prepareTopPickProcessing()
    {
        guid processId = newGuid();
        BankReconBridgedAutoClearingTopPickContract contract = this.getContract();
        contract.parmIsTopPickClearing(true);
        contract.parmProcessingId(processId);

        bankReconciliationHeader = BankReconciliationHeader::findByReconciliationId(contract.parmBankReconciliationId());
        bankReconHeaderRecId = bankReconciliationHeader.RecId;

        BankReconBridgedAutoClearingProcessing::cleanUpProcessing(this.bankReconHeaderRecId);

        return this.prepareBankDocument(processId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareBankDocument</Name>
				<Source><![CDATA[
    private int64 prepareBankDocument(guid _processId)
    {
        BankBridgingTrans bankBridgingTrans;
        BankDocumentTable bankDocumentTable;
        LedgerJournalTrans ledgerJournalTransBridged;
        BankReconciliationMatchingItemView matchingItemView;
        BankReconBridgedAutoClearingProcessing processing;

        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addBankReconciliationId(methodStr(BankReconBridgedAutoClearingTopPickController, prepareBankDocument), this.getContract().parmBankReconciliationId()))
        {
            BankReconBridgedAutoClearingProcessing::skip(processing);

            insert_recordset processing(BankDocumentTable, BankReconciliationHeader, ProcessId, BridgedLedgerJournalTransRecId)
            select RecId, bankReconHeaderRecId, _processId from bankDocumentTable
                join matchingItemView
                    where matchingItemView.BankDocumentTable == bankDocumentTable.RecId
                        && matchingItemView.BankReconciliationHeader == bankReconHeaderRecId
                join RecId from ledgerJournalTransBridged
                    where ledgerJournalTransBridged.RecId == bankDocumentTable.SourceRecId
                        && ledgerJournalTransBridged.TableId == bankDocumentTable.SourceRelationType
                join bankBridgingTrans
                    where bankBridgingTrans.BridgedLedgerJournalTransRecId == ledgerJournalTransBridged.RecId
                        && bankBridgingTrans.BridgingStatus == BankBridgingStatus::Bridged;

            BankChequeTable bankChequeTable;

            insert_recordset processing(BankDocumentTable, BankReconciliationHeader, ProcessId, BridgedLedgerJournalTransRecId)
            select RecId, bankReconHeaderRecId, _processId from bankDocumentTable
                join matchingItemView
                    where matchingItemView.BankDocumentTable == bankDocumentTable.RecId
                        && matchingItemView.BankReconciliationHeader == bankReconHeaderRecId
                join bankChequeTable
                    where bankChequeTable.RecId == bankDocumentTable.SourceRecId
                        && bankChequeTable.TableId == bankDocumentTable.SourceRelationType
                join RecId from ledgerJournalTransBridged
                    where ledgerJournalTransBridged.RecId == bankChequeTable.SourceRecId
                join bankBridgingTrans
                    where bankBridgingTrans.BankChequeTableRecId == bankChequeTable.RecId
                        && bankBridgingTrans.BridgingStatus == BankBridgingStatus::Bridged;

            select count(RecId) from processing where processing.ProcessId == _processId;

            logger.initActivities().addTotalBridgedNumber(activityContext, processing.RecId);
        }

        return processing.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTopPickPostingTasks</Name>
				<Source><![CDATA[
    private void createTopPickPostingTasks(BatchHeader _batchHeader, int _totalBridged)
    {
        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addBankReconciliationId(methodStr(BankReconBridgedAutoClearingTopPickController, createTopPickPostingTasks), this.getContract().parmBankReconciliationId()))
        {
            int maxTasks = this.getTaskNumber(_totalBridged);

            for (int i = 1; i <= maxTasks; i++)
            {
                BankReconBridgedAutoClearingTopPickController topPickClearingTask = BankReconBridgedAutoClearingTopPickController::construct(bankReconHeaderRecId);
                BankReconBridgedAutoClearingTopPickContract contract = topPickClearingTask.getContract();

                contract.parmIsTopPickClearing(true);
                contract.parmBankReconciliationId(this.getContract().parmBankReconciliationId());
                contract.parmProcessingId(this.getContract().parmProcessingId());

                topPickClearingTask.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
                topPickClearingTask.batchInfo().parmCaption(this.caption());

                _batchHeader.parmRetriesOnFailure(0);
                _batchHeader.addRuntimeTask(topPickClearingTask, this.parmCurrentBatch().RecId);
            }

            logger.initActivities().addRunTimeTaskNumber(activityContext, maxTasks);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskNumber</Name>
				<Source><![CDATA[
    private int getTaskNumber(int _totalBridged)
    {
        // Set 500 in a bundle, limit each task can clearing 50 bridged transactions at least
        // if the total bridged transactions bundle number is less than max task number
        return min(roundUp(_totalBridged / BundleSize, 1), this.getMaxNumberTopPickBatchTasks());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxNumberTopPickBatchTasks</Name>
				<Source><![CDATA[
    private int getMaxNumberTopPickBatchTasks()
    {
        BankParameters bankParameters = BankParameters::find();

        if (bankParameters.DefaultBridgedAutoClearTopPickBatchTasks == 0)
        {
            bankParameters.selectForUpdate(true);
            bankParameters.DefaultBridgedAutoClearTopPickBatchTasks = DefaultTopPickBatchTasks;

            ttsbegin;
            bankParameters.update();
            ttscommit;
        }

        return bankParameters.DefaultBridgedAutoClearTopPickBatchTasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runWithoutBatch</Name>
				<Source><![CDATA[
    private void runWithoutBatch()
    {
        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addBankReconciliationId(methodStr(BankReconBridgedAutoClearingTopPickController, runWithoutBatch), bankReconciliationHeader.ReconciliationId))
        {
            int totalCleared;
            boolean failedClearingsExist;
            guid processId = newGuid();

            this.prepareBankDocument(processId);

            BankReconBridgedAutoClearingProcessing processing;
            TransDate clearingDate = min(bankReconciliationHeader.CutOffDate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

            while select BankDocumentTable from processing
                where processing.ProcessId == processId
            {
                try
                {
                    ttsbegin;

                    boolean isCleared = BankReconBridgedAutoClearingTopPickController::clearBridgedTransPerBankDocument(processing.BankDocumentTable, clearingDate);

                    if (isCleared)
                    {
                        totalCleared++;
                    }

                    ttscommit;
                }
                catch (Exception::Error)
                {
                    failedClearingsExist = true;
                    ttsabort;
                }
            }

            BankReconBridgedAutoClearingProcessing::cleanUpProcessingByProcessId(processId);

            if (totalCleared)
            {
                info(strFmt("@Bank:BankReconBridgedAutoClearingTotalNumberInfoMessage", totalCleared));
            }

            logger.initActivities().addTotalClearedNumber(activityContext, totalCleared);

            if (failedClearingsExist)
            {
                throw error(strFmt("@Bank:BankReconBridgedAutoClearingFailedErrorMessage"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrCreateBatchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or creates the batch header.
    /// </summary>
    /// <returns>The created batch header.</returns>
    internal BatchHeader getOrCreateBatchHeader()
    {
        Batchheader batchHeader = BatchHeader::getCurrentBatchHeader();

        if (batchHeader == null)
        {
            batchHeader = BatchHeader::construct();
        }

        return batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void getFromDialog()
    {
        super();

        BankReconBridgedAutoClearingTopPickContract contract = this.getContract();
        bankReconciliationHeader = BankReconciliationHeader::findByReconciliationId(contract.parmBankReconciliationId());
        bankReconHeaderRecId = bankReconciliationHeader.RecId;

        this.caption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Batch doBatch()
    {
        Batch ret = super();
    
        if (batchInfo.parmBatchExecute())
        {
            using (SysInstrumentationActivityContext activityContext = logger.initActivities().addBankReconciliationId(methodStr(BankReconBridgedAutoClearingTopPickController, doBatch), bankReconciliationHeader.ReconciliationId))
            {
                BankBatchProcessingTracking tracking = BankBatchProcessingTracking::findBySource(bankReconciliationHeader.TableId, bankReconciliationHeader.RecId, BankReconciliationOperationType::ClearBridgedTrans);
                if (!tracking)
                {
                    tracking = BankBatchProcessingTracking::findBySourceLegacy(bankReconciliationHeader.TableId, bankReconciliationHeader.RecId, classStr(BankReconBridgedAutoClearing));
                }
                RefRecId batchHeaderId = batchInfo.parmBatchHeader().parmBatchHeaderId();

                if (!tracking || tracking.BatchJob != batchHeaderId)
                {
                    tracking = BankBatchProcessingTracking::addTracking(bankReconciliationHeader, batchInfo.parmBatchHeader().parmBatchHeaderId(), BankReconciliationOperationType::ClearBridgedTrans, classStr(BankReconBridgedAutoClearing));

                    logger.initActivities().addBatchHeaderId(activityContext, batchInfo.parmBatchHeader().parmBatchHeaderId());
                    logger.initActivities().addTrackingRecId(activityContext, tracking.RecId);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadFromSysLastValue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean parmLoadFromSysLastValue(boolean _loadFromSysLastValue = loadFromSysLastValue)
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>