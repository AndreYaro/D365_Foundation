<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdSalesPurchJournalController_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller class for <c>TaxWithholdSalesPurchJournal</c> SSRS report.
/// </summary>
public class TaxWithholdSalesPurchJournalController_TH extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contract instance with type <c>TaxWithholdSalesPurchJournalContract</c>.
    /// </summary>
    /// <returns>
    /// The contract instance with type <c>TaxWithholdSalesPurchJournalContract</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxWithholdSalesPurchJournalContract_TH getContract()
    {
        TaxWithholdSalesPurchJournalContract_TH  contract = this.parmReportContract().parmRdpContract() as TaxWithholdSalesPurchJournalContract_TH;

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        if (this.parmArgs().menuItemName() == menuitemOutputStr(TaxWithholdSalesJournal_TH))
        {
            this.getContract().parmModuleType(ModuleCustVend::Cust);
            // Withholding tax accounts receivable journal report
            this.parmDialogCaption("@SYS4082596");
        }
        else
        {
            this.getContract().parmModuleType(ModuleCustVend::Vend);
            // Withholding tax accounts payable journal report
            this.parmDialogCaption("@SYS4082597");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        TaxWithholdCommonContract_TH  commonContract = this.getContract().parmCommonContract();

        super();

        if (!commonContract.parmFromDate())
        {
            commonContract.parmFromDate(dateNull());
        }
        if (!commonContract.parmToDate())
        {
            commonContract.parmToDate(maxDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceTH00007, funcName());

        TaxWithholdSalesPurchJournalController_TH    controller;

        controller = new TaxWithholdSalesPurchJournalController_TH();
        controller.parmReportName(ssrsReportStr(TaxWithholdSalesPurchJournal_TH, Design));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>