<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaym</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class VendOutPaym extends CustVendOutPaym
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(BankElectronicBanking);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPrintOptionMenuItemPrefix</Name>
				<Source><![CDATA[
    protected str dialogPrintOptionMenuItemPrefix()
    {
        return 'Vend';
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymModeSpec</Name>
				<Source><![CDATA[
    public CustVendPaymModeSpec findPaymModeSpec(PaymMode _paymMode, PaymSpec _paymSpec)
    {
        return VendPaymModeSpec::findSpec(_paymMode, _paymSpec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymModeTable</Name>
				<Source><![CDATA[
    public CustVendPaymModeTable findPaymModeTable(PaymMode _paymMode, boolean _forupdate = false)
    {
        return VendPaymModeTable::find(_paymMode, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    public void generatePaymentLines()
    {
        #OCCRetryCount
        LedgerJournalTrans ledgerJournalTrans;
        VendOutPaymRecord vendOutPaymRecord;
        boolean ok = true;

        int64 paymentLinesToProcess = this.findQueryRecordCount();
        int64 paymentLinesProcessed;

        SysInstrumentationProgressLogger progressLogger = this.createProgressLogger();
        SysInstrumentationProgressStage progressStage = progressLogger.createStage(CustVendInstrumentationConstants::PaymentGenerationGeneratePaymentLines, paymentLinesToProcess);

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextWithProgressMonitor(progressStage))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::ClassName, this.getClassName());

            try
            {
                ttsbegin;

                if (!this.checkBankAccountNumber())
                {
                    throw error("@SYS18447");
                }

                setPrefix("@SYS17561");

                queryRun.reset();
                outPaymRecordList = new List(Types::Class);

                while (queryRun.next())
                {
                    ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

                    paymentLinesProcessed++;
                    progressLogger.trackProgress(paymentLinesProcessed);

                    if (!this.isOffsetAccountValid(ledgerJournalTrans))
                    {
                        continue;
                    }

                    if (!this.isVendorAccountActiveForDate(ledgerJournalTrans))
                    {
                        warning(strFmt("@SYS115093", ledgerJournalTrans.Voucher));
                        continue;
                    }

                    vendOutPaymRecord = CustVendOutPaymRecord::construct(
                        ledgerJournalTrans.PaymMode,
                        ledgerJournalTrans.PaymSpec,
                        this,
                        this.vendPaym(ledgerJournalTrans));

                    vendOutPaymRecord.parmFile(file);

                    setPrefix(strFmt(
                        "@SYS66088",
                        ledgerJournalTrans.TransDate,
                        ledgerJournalTrans.Voucher,
                        ledgerJournalTrans.parmAccount()));

                    if (vendOutPaymRecord.checkValues(ledgerJournalTrans, this.parmProgress()))
                    {
                        vendOutPaymRecord.output();
                        outPaymRecordList.addEnd(vendOutPaymRecord);
                        this.trackSequenceOnPaymMode(CustVendPaymModeTable::findCommon(ledgerJournalTrans, true));
                        this.updateLedgerJournalTrans(ledgerJournalTrans, vendOutPaymRecord, true);
                    }
                    else
                    {
                        ok = false;
                    }
                }

                if (!ok)
                {
                    throw error("@SYS18447");
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                progressLogger.logRetryOnDeadlock();

                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        progressLogger.logRetryOnUpdateConflict();

                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentType</Name>
				<Source><![CDATA[
    protected PaymentType getPaymentType(VendPaymMode _paymMode)
    {
        VendPaymModeTable vendPaymModeTable = this.findPaymModeTable(_paymMode, false);
        return vendPaymModeTable.PaymentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendPaymForVendorCoveredFee_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes vendor payment for the payment fee.
    /// </summary>
    /// <param name="_vendPaym">
    /// The vendor payment.
    /// </param>
    protected void initVendPaymForVendorCoveredFee_JP(VendPaym _vendPaym)
    {
        if (VendPaymFeeUtil_JP::isVendorPaymFeeEnabled())
        {
            _vendPaym.paymAmountInForeignCurrency(
                _vendPaym.ledgerJournalTrans().amount()
                - CustVendPaymJournalFee::getPaymFeeTotalInTransactionCurrency_JP(_vendPaym.ledgerJournalTrans().RecId, true));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the format to be displayed in the user interface.
    /// </summary>
    /// <returns>
    /// The name of the format to be displayed in the user interface.
    /// </returns>
    /// <remarks>
    /// The method must return the name of the format to be displayed in the user interface. Formats
    /// without an interface name cannot be used in electronic banking as export formats. They can serve as
    /// parents for other formats though.
    /// </remarks>
    public PaymInterfaceName interfaceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isElectronicPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the payment type against the method of payment.
    /// </summary>
    /// <param name="_paymMode">
    ///    The unique ID for the method of payment.
    /// </param>
    /// <returns>
    ///    true if payment type is electroic payment; otherwise, false.
    /// </returns>
    protected boolean isElectronicPayment(VendPaymMode _paymMode)
    {
        VendPaymModeTable vendPaymModeTable;

        vendPaymModeTable = this.findPaymModeTable(_paymMode, true);

        return vendPaymModeTable.PaymentType == PaymentType::ElectronicPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrenoteApproved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates pre-note status against a particular customer in a particular bank.
    /// </summary>
    /// <param name="_accountId">
    ///    The <c>CompanyBankAccountId</c> extended data type that represents ID of the bank in which the
    ///    customer has an account.
    /// </param>
    /// <param name="_accountNum">
    ///    The <c>AccountNum</c> extended data type that represents the ID of the customer account.
    /// </param>
    /// <returns>
    ///    true if status is approved; otherwise, false.
    /// </returns>
    protected boolean isPrenoteApproved(
        CompanyBankAccountId _accountId,
        CustVendAC _accountNum)
    {
        VendPrenote vendPrenote;
        VendBankAccountId vendBankAccountId;

        vendBankAccountId = VendTable::find(_accountNum).BankAccount;
        vendPrenote = VendPrenote::find(_accountId, _accountNum, vendBankAccountId);

        return vendPrenote.status() == PrenoteStatus::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printControlReport</Name>
				<Source><![CDATA[
    public void printControlReport()
    {
        MenuFunction menuFunction;
        Args args;

        args = new Args();
        args.caller(this);

        menuFunction = new MenuFunction(menuitemOutputStr(VendOutPaymControl), MenuItemType::Output);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPaym</Name>
				<Source><![CDATA[
    public VendPaym vendPaym(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendPaym vendPaym;
        LedgerJournalTrans ledgerJournalTrans;
        BankAccountTable bankAccountTable;
        VendTable vendTable;
        VendBankAccount vendBankAccount;
        SpecTrans specTrans;
        str settledInvoices;
        LogisticsPostalAddress postalAddress;

        // <GIN>
        TaxInformationVendTable_IN taxInformationVendTableLoc;
        // </GIN>

        ledgerJournalTrans = LedgerJournalTrans::findRecId(_ledgerJournalTrans.RecId, false);

        if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            bankAccountTable = BankAccountTable::findByLedgerDimension(ledgerJournalTrans.parmOffsetLedgerDimension());
        }
        else
        {
            bankAccountTable = BankAccountTable::findByLedgerDimension(VendPaymModeTable::find(ledgerJournalTrans.PaymMode).PaymentLedgerDimension);
        }

        if (!bankAccountTable && ledgerJournalTrans.BankAccountId)
        {
            bankAccountTable = BankAccountTable::find(ledgerJournalTrans.BankAccountId);
        }

        vendTable = VendTable::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount());
        vendBankAccount = VendBankAccount::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount(), ledgerJournalTrans.CustVendBankAccountId);

        while select specTrans
            where specTrans.SpecTableId == ledgerJournalTrans.TableId
                && specTrans.SpecRecId == ledgerJournalTrans.RecId
                && specTrans.SpecCompany == ledgerJournalTrans.company()
        {
            if (specTrans.vendTrans().Invoice)
            {
                settledInvoices += specTrans.vendTrans().Invoice + ', ';
            }
        }
        settledInvoices = subStr(settledInvoices, 1, strLen(settledInvoices)-2);  // Remove the last ', '

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt = ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();
            taxInformationVendTableLoc = vendTable.getTaxInformationVendTable_IN();
            ledgerJournalTransTaxExt.tdsGroup = taxInformationVendTableLoc.tdsGroup;
            ledgerJournalTransTaxExt.tcsGroup = taxInformationVendTableLoc.tcsGroup;
        }
        // </GIN>

        vendPaym = new VendPaym();

        vendPaym.ledgerJournalTrans(ledgerJournalTrans);
        vendPaym.bankAccountTable(bankAccountTable);
        vendPaym.custVendTable(vendTable);
        vendPaym.bankAccountMap(vendBankAccount);

        vendPaym.messageToSendersBank(vendBankAccount.MsgToBank);
        vendPaym.paymAmountInForeignCurrency(ledgerJournalTrans.amount());

        vendPaym.paymAmountInSendersCurrency(CurrencyExchangeHelper::mstAmount(ledgerJournalTrans.amount(), ledgerJournalTrans.CurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), UnknownNoYes::Unknown, ledgerJournalTrans.ExchRate));

        vendPaym.paymCurrencyCode(Currency::currencyCodeISO(ledgerJournalTrans.CurrencyCode));
        vendPaym.paymDate(ledgerJournalTrans.TransDate);
        vendPaym.documentDate(ledgerJournalTrans.DocumentDate);
        vendPaym.documentNumber(ledgerJournalTrans.DocumentNum);
        vendPaym.paymExchangeRate(vendBankAccount.ExchRate);
        vendPaym.paymExchangeRateReference(vendBankAccount.ExchRateRef);
        vendPaym.paymId(ledgerJournalTrans.PaymId);
        vendPaym.paymNote(ledgerJournalTrans.PaymentNotes);

        vendPaym.paymPurposeCode(ledgerJournalTrans.BankCentralBankPurposeCode ?
            ledgerJournalTrans.BankCentralBankPurposeCode :
            vendTable.BankCentralBankPurposeCode);

        vendPaym.paymPurposeText(ledgerJournalTrans.BankCentralBankPurposeText ?
            ledgerJournalTrans.BankCentralBankPurposeText :
            vendTable.BankCentralBankPurposeText);

        vendPaym.paymReference(ledgerJournalTrans.PaymReference);
        vendPaym.recieversBankTextCode(vendBankAccount.VendPaymentTextCode);
        vendPaym.recieversBankAccount(vendBankAccount.AccountNum);
        vendPaym.recieversBankAccountId(vendBankAccount.AccountID);
        vendPaym.recieversBankIban(vendBankAccount.BankIBAN);
        vendPaym.recieversBankName(vendBankAccount.Name);
        vendPaym.recieversBankCodeType(vendBankAccount.BankCodeType);
        vendPaym.recieversBankRegistrationNumber(vendBankAccount.RegistrationNum);
        postalAddress = vendTable.postalAddress();
        vendPaym.recieversCompanyAddress(postalAddress.Address);
        vendPaym.recieversCompanyAddress1(vendPaym.textLine(postalAddress.Address,1));
        vendPaym.recieversCompanyAddress2(vendPaym.textLine(postalAddress.Address,2));
        vendPaym.recieversCompanyAddress3(vendPaym.textLine(postalAddress.Address,3));
        vendPaym.recieversStreet(postalAddress.Street);
        vendPaym.recieversCity(postalAddress.City);
        vendPaym.recieversCountryRegionId(postalAddress.CountryRegionId);
        vendPaym.recieversZipCode(postalAddress.ZipCode);
        vendPaym.recieversCountryRegionISOCode(LogisticsAddressCountryRegion::find(postalAddress.CountryRegionId).isOcode);

        postalAddress = LogisticsLocationEntity::location2PostalAddress(vendBankAccount.Location);
        vendPaym.recieversBankAddress(postalAddress.Address);
        vendPaym.recieversBankAddress1(vendPaym.textLine(postalAddress.Address,1));
        vendPaym.recieversBankAddress2(vendPaym.textLine(postalAddress.Address,2));
        vendPaym.recieversBankAddress3(vendPaym.textLine(postalAddress.Address,3));
        vendPaym.recieversBankStreet(postalAddress.Street);
        vendPaym.recieversBankCity(postalAddress.City);
        vendPaym.recieversBankZipCode(postalAddress.ZipCode);
        vendPaym.recieversBankCountryRegionId(postalAddress.CountryRegionId);
        vendPaym.recieversBankCountryRegionISOCode(LogisticsAddressCountryRegion::find(postalAddress.CountryRegionId).ISOcode);
        vendPaym.recieversCompanyName(vendTable.name());
        vendPaym.recieversIdentificationOfSender(vendTable.YourAccountNum);
        vendPaym.recieversInvoiceNumber(settledInvoices);
        vendPaym.recieversSwiftAddress(vendBankAccount.swiftNo);
        vendPaym.sendersBankAccount(bankAccountTable.AccountNum);
        vendPaym.sendersBankRegistrationNumber(bankAccountTable.RegistrationNum);
        vendPaym.sendersBankName(bankAccountTable.Name);
        vendPaym.sendersBankCurrencyCode(Currency::currencyCodeISO(bankAccountTable.CurrencyCode));
        vendPaym.sendersBankMultiCurrency(bankAccountTable.BankMultiCurrency);
        vendPaym.sendersBankIban(bankAccountTable.iban);

        postalAddress = CompanyInfo::find().postalAddress();
        vendPaym.sendersCompanyAddress(postalAddress.Address);
        vendPaym.sendersCompanyAddress1(vendPaym.textLine(postalAddress.Address,1));
        vendPaym.sendersCompanyAddress2(vendPaym.textLine(postalAddress.Address,2));
        vendPaym.sendersCompanyAddress3(vendPaym.textLine(postalAddress.Address,3));
        vendPaym.sendersCompanyName(CompanyInfo::find().name());
        vendPaym.sendersInvoiceNumber();
        vendPaym.sendersIdentificationOfReciever(vendTable.AccountNum);
        vendPaym.sendersBanksIdentificationOfSender(bankAccountTable.CompanyPaymId);
        vendPaym.feeContractAccount(bankAccountTable.FeeContractAccount);
        vendPaym.dateOfImportOfGoods(ledgerJournalTrans.ImportDate);

        // <GJP>
        this.initVendPaymForVendorCoveredFee_JP(vendPaym);
        // </GJP>

        return vendPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPaymPayroll</Name>
				<Source><![CDATA[
    /// <summary>
    /// The Payroll application leverages the vendor payment process to disburse payments to workers.
    /// Most of the information set for the vendor is not relevant to payroll as it replaces the
    /// Vendor bank account with the worker bank account which is obtained from the
    /// related <c>LedgerJournalTransPayrollDisbursement</c> record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The worker payment record in <c>LedgerJournalTrans</c>.
    /// </param>
    /// <returns>
    /// The inialized vendPaym class, ready for printing or direct deposit.
    /// </returns>
    /// <remarks>
    /// Initialization of the vendPaym record is required from two classes <c>VendOutPaym_Cheque_Payroll</c> and
    /// <c>VendOutPaymNACHAPayroll</c> but the class inheritance diverges at the <c>VendOutPaym</c> class, therefore
    /// functionality common to the cheque and direct desposit functionality is impemented on the VendOutPaym class
    /// to eliminate duplication of code in the two payroll classes.
    /// </remarks>
    protected VendPaym vendPaymPayroll(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendPaym vendPaym;
        LedgerJournalTrans ledgerJournalTrans;
        BankAccountTable bankAccountTable;
        LogisticsPostalAddress postalAddress;
        VendTable vendTable;

        ledgerJournalTrans = LedgerJournalTrans::findRecId(_ledgerJournalTrans.RecId, false);

        if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            bankAccountTable = BankAccountTable::findByLedgerDimension(ledgerJournalTrans.parmOffsetLedgerDimension());
        }
        else
        {
            bankAccountTable = BankAccountTable::findByLedgerDimension(VendPaymModeTable::find(ledgerJournalTrans.PaymMode).PaymentLedgerDimension);
        }

        if (!bankAccountTable && ledgerJournalTrans.BankAccountId)
        {
            bankAccountTable = BankAccountTable::find(ledgerJournalTrans.BankAccountId);
        }

        vendTable = VendTable::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount());

        vendPaym = new VendPaym();

        vendPaym.ledgerJournalTrans(ledgerJournalTrans);
        vendPaym.bankAccountTable(bankAccountTable);
        vendPaym.custVendTable(vendTable);

        vendPaym.paymAmountInForeignCurrency(ledgerJournalTrans.amount());

        vendPaym.paymAmountInSendersCurrency(CurrencyExchangeHelper::mstAmount(ledgerJournalTrans.amount(), ledgerJournalTrans.CurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), UnknownNoYes::Unknown, ledgerJournalTrans.ExchRate));

        vendPaym.paymCurrencyCode(Currency::currencyCodeISO(ledgerJournalTrans.CurrencyCode));
        vendPaym.paymDate(ledgerJournalTrans.TransDate);
        vendPaym.documentDate(ledgerJournalTrans.DocumentDate);
        vendPaym.paymId(ledgerJournalTrans.PaymId);
        vendPaym.paymNote(ledgerJournalTrans.PaymentNotes);

        vendPaym.paymReference(ledgerJournalTrans.PaymReference);

        vendPaym.sendersBankAccount(bankAccountTable.AccountNum);
        vendPaym.sendersBankRegistrationNumber(bankAccountTable.RegistrationNum);
        vendPaym.sendersBankName(bankAccountTable.Name);
        vendPaym.sendersBankCurrencyCode(Currency::currencyCodeISO(bankAccountTable.CurrencyCode));
        vendPaym.sendersBankMultiCurrency(bankAccountTable.BankMultiCurrency);
        postalAddress = CompanyInfo::find().postalAddress();
        vendPaym.sendersCompanyAddress(postalAddress.Address);
        vendPaym.sendersCompanyAddress1(vendPaym.textLine(postalAddress.Address,1));
        vendPaym.sendersCompanyAddress2(vendPaym.textLine(postalAddress.Address,2));
        vendPaym.sendersCompanyAddress3(vendPaym.textLine(postalAddress.Address,3));
        vendPaym.sendersCompanyName(CompanyInfo::find().name());
        vendPaym.sendersInvoiceNumber();
        vendPaym.sendersBanksIdentificationOfSender(bankAccountTable.CompanyPaymId);
        vendPaym.feeContractAccount(bankAccountTable.FeeContractAccount);

        return vendPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorAccountActiveForDate</Name>
				<Source><![CDATA[
    protected boolean isVendorAccountActiveForDate(LedgerJournalTrans _ledgerJournalTrans)
    {
        DimensionAttributeValueCombination dimAttrValueCombo;
        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(this.ledgerJournalId);
        boolean isActive = true;

        if (_ledgerJournalTrans.CustVendBankAccountId == '')
        {
            return isActive;
        }

        select DisplayValue from dimAttrValueCombo
            where dimAttrValueCombo.RecId == _ledgerJournalTrans.LedgerDimension;

        switch (ledgerJournalTable.JournalType)
        {
            case LedgerJournalType::Payment,
                LedgerJournalType::VendPromissoryNoteDraw,
                LedgerJournalType::VendPromissoryNoteRedraw,
                LedgerJournalType::VendPaymRemittance:
                isActive = VendBankAccount::checkBankAccountIsActiveForDate(
                    dimAttrValueCombo.DisplayValue,
                    _ledgerJournalTrans.CustVendBankAccountId,
                    DateTimeUtil::date(DateTimeUtil::utcNow()),
                    _ledgerJournalTrans.Company);

                if (isActive && this.isElectronicPayment(_ledgerJournalTrans.PaymMode))
                {
                    isActive = VendBankAccount::checkBankAccountIsActiveForDate(
                        dimAttrValueCombo.DisplayValue,
                        _ledgerJournalTrans.CustVendBankAccountId,
                        _ledgerJournalTrans.TransDate,
                        _ledgerJournalTrans.Company);
                }
                break;

            default:
                break;
        }

        return isActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        Object caller = args.caller();
        CustVendSumForPaym custVendSumForPaym;
        VendOutPaym vendOutPaym;
        DialogRunbase clientDialog;

        // <GEERU>
        #isoCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        if (args && args.parmEnumType() == enumNum(PaymDocumentType))
        {
            vendOutPaym = caller.runBase();
            vendOutPaym.callPrinterSettings(args.parmEnum());
            return;
        }

        custVendSumForPaym = caller.runbase();
        clientDialog = caller.dialog();

        clientDialog.updateServer();
        custVendSumForPaym.getFromDialog();

        // <GEERU>
        if (countryRegion_RU)
        {
            vendOutPaym = custVendSumForPaym.custVendOutPaym_W();
        }
        else
        {
            // </GEERU>
            vendOutPaym = CustVendOutPaym::newCustVendSumForPaym(custVendSumForPaym);
            // <GEERU>
        }
        // </GEERU>

        if (! vendOutPaym)
        {
            throw error("@SYS26888");
        }

        // <GEERU>
        if (!countryRegion_RU)
        {
            // </GEERU>
            vendOutPaym.parmBankAccountID(custVendSumForPaym.parmBankAccountID());
            vendOutPaym.saveLast();
            // <GEERU>
        }
        // </GEERU>

        vendOutPaym.init();
        vendOutPaym.prompt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>LedgerJournalTrans</c> record after processing it.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> object to be updated.
    /// </param>
    /// <param name="_custVendOutPaymRecord">
    /// The <c>CustVendOutPaymRecord</c> record selected for payment format generation.
    /// </param>
    /// <param name="_generateRemittanceFeeTrans">
    /// A Boolean value that indicates whether the <c>RemittanceFeeTrans</c> value should be generated.
    /// </param>
    protected void updateLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans, CustVendOutPaymRecord _custVendOutPaymRecord, boolean _generateRemittanceFeeTrans)
    {
        super(_ledgerJournalTrans, _custVendOutPaymRecord, _generateRemittanceFeeTrans);

        this.updateElectronicPayment(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateElectronicPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>LedgerJournalTrans</c> record with an electronic payment number on the <c>ElectronicPaymentNumber</c> table field.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record to update
    /// </param>
    /// <remarks>
    /// This method is explicitly called by generatePaymentLines method if electronic payment number needs to be exported to file.
    /// </remarks>
    protected void updateElectronicPayment(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalType journalType = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalType;
        int entryType;
        boolean generateENum = true;

        if ((journalType == LedgerJournalType::Payment && VendParameters::find().EnableElectronicPaymentNumber == NoYes::No) 
            || (journalType == LedgerJournalType::PayrollDisbursement && PayrollParameters::find().EnableElectronicPaymentNumber == NoYes::No))
        {
            generateENum = false;
        }

        if (generateENum)
        {
            entryType = this.canGenerateElectronicPaymentReference(_ledgerJournalTrans, journalType);

            if (entryType)
            {
                this.generateElectronicPaymReference(_ledgerJournalTrans, entryType, journalType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGenerateElectronicPaymentReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether number sequence can be generated for selected payment journal line or not.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> object to be checked.
    /// </param>
    /// <param name="_journalType">
    /// Type of journal
    /// </param>
    /// <returns>
    /// return true if number sequence can be generated
    /// </returns>
    protected int canGenerateElectronicPaymentReference(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalType _journalType)
    {
        NumberSequenceReference numberSequenceReference;
        int returnValue = 0;

        boolean isElectronic = this.isElectronicPayment(_ledgerJournalTrans.PaymMode);

        if (isElectronic
            && (_ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::None
                || _ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Sent))
        {
            // for electronic payment only
            returnValue = 1;

            if (_journalType == LedgerJournalType::Payment)
            {
                numberSequenceReference = VendParameters::numRefElectronicPaymentReference();
            }
            else if (_journalType == LedgerJournalType::PayrollDisbursement)
            {
                numberSequenceReference = PayrollParameters::numRefElectronicPaymentReference();
            }

            if (numberSequenceReference)
            {
                // number sequence exists
                returnValue = 2; 

                if (numberSequenceReference.numberSequenceTable().Manual == NoYes::Yes)
                {
                    // Manual entry only. Do not generate number sequence
                    returnValue = 3;
                }
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateElectronicPaymReference</Name>
				<Source><![CDATA[
    protected void generateElectronicPaymReference(LedgerJournalTrans _ledgerJournalTrans, int _entryType, LedgerJournalType _journalType)
    {
        VendorElectronicPaymentReference newPaymentReference;

        switch (_entryType)
        {
            case 1: // electronic but number sequence not defined
            
            case 2: // electronic, number sequence defined as automatic
                if (!_ledgerJournalTrans.ElectronicPaymentNumber)
                {
                    if (_journalType == LedgerJournalType::Payment)
                    {
                        newPaymentReference = NumberSeq::newGetNum(VendParameters::numRefElectronicPaymentReference()).num();
                    }
                    else if (_journalType == LedgerJournalType::PayrollDisbursement)
                    {
                        newPaymentReference = NumberSeq::newGetNum(PayrollParameters::numRefElectronicPaymentReference()).num();
                    }

                    if (newPaymentReference)
                    {
                        _ledgerJournalTrans.ElectronicPaymentNumber = newPaymentReference;
                        _ledgerJournalTrans.PaymReference = newPaymentReference;
                    }
                }
                break;

            case 3: // electronic, number sequence defined as manual
                if (_ledgerJournalTrans.ElectronicPaymentNumber)
                {
                    _ledgerJournalTrans.PaymReference = _ledgerJournalTrans.ElectronicPaymentNumber;
                }
                break;

            default:
                break;
        }

        // Calling doUpdate because ledgerJournalTrans.update is overidden and has business logic and validations
        // which would be an over head here because we want to just update the electronic payment number in this method.
        _ledgerJournalTrans.doUpdate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>