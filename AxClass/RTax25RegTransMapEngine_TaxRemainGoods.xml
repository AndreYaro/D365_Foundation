<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegTransMapEngine_TaxRemainGoods</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RTax25RegTransMapEngine_TaxRemainGoods extends RTax25RegTransMapEngine
{
}

]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteTotals</Name>
				<Source><![CDATA[
    protected boolean deleteTotals(RTax25RegisterLineNum64 _lineNumber)
    {
        return false;   // do not delete header and footer lines for this register
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    protected boolean updateTotals(RTax25RegisterTransMap _mainTrans,
                                   RTax25RegisterTransMap _origTrans = null)
    {
        container               updFieldId, updValue;
        Common                  common, commonMain = _mainTrans, commonOrig = _origTrans;
        int                     i, openHeader = 0;
        boolean                 ret = false;
        RTax25RegisterTransMap  regTrans     = new SysDictTable(detachedTableId).makeRecord();
        container               headerFields = regType.headerFields();
        RTax25RegisterLineNum64 lineNumLast;
        anytype                 anyZero = 0;
        ;

        if ((! _mainTrans && ! _origTrans) || ! headerFields)
            return ret;

        for (i = 1; i <= fieldCnt; i++)
        {
            if (!hidedFields.in(i) && conpeek(headerFields, i) &&
                (! _origTrans || ! _mainTrans ||
                 commonMain.(conpeek(regFieldId, i)) != commonOrig.(conpeek(regFieldId, i))))
            {
                updFieldId += conpeek(regFieldId, i);
                updValue = updValue +
                          ((_mainTrans ? commonMain.(conpeek(regFieldId, i)) : anyZero) -
                           (_origTrans ? commonOrig.(conpeek(regFieldId, i)) : anyZero));
            }
        }

        if (! conlen(updFieldId))
            return ret;

        while select forupdate regTrans
            order by LineNumber desc
            where regTrans.JournalTransRefRecId == registerJournalTrans.RecId &&
                 (regTrans.BlockType            == ReportBlockType::Header    ||
                  regTrans.BlockType            == ReportBlockType::Footer)   &&
                  regTrans.LineNumber           <  (_mainTrans ? _mainTrans.LineNumber : _origTrans.LineNumber)
        {
            if (regTrans.BlockType == ReportBlockType::Footer)
            {
                if (lineNumLast && (lineNumLast - 1) != regTrans.LineNumber)
                {
                    openHeader ++;
                }
                if (openHeader)
                {
                    openHeader --;
                }
                else
                {
                    common = regTrans;
                    for (i = 1; i <= conlen(updFieldId) ; i++)
                    {
                        common.(conpeek(updFieldId, i)) += conpeek(updValue, i);
                        ret = true;
                    }
                    common.doUpdate();
                }
            }
            else
            {
                 openHeader++;
            }
            lineNumLast = regTrans.LineNumber;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>