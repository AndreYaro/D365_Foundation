<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdStandardVariance_Prod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdStandardVariance_Prod</c> class extends from the <c>ProdStandardVariance</c> class and
/// holds the production order specific logic for the variance calculation.
/// </summary>
class ProdStandardVariance_Prod extends ProdStandardVariance
{
    ProdTable                   prodTable;
    PmfProdCalcTransMap         prodCalcTransTotal;

    Map                         variance2ProdCalcTransMap;
    boolean                     calledDuringEnding;
    /// <summary>
    /// Links a <c>TmpProdStandardVariance</c> record to a <c>ProdCalcTrans</c> record.
    /// </summary>
    /// <param name="_tmpProdStandardVariance">
    /// The <c>TmpProdStandardVariance</c> record that to link.
    /// </param>
    /// <param name="_prodCalcTrans">
    /// The <c>ProdCalcTrans</c> record to which the <c>TmpProdStandardVariance</c> record will be linked.
    /// </param>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToVarianceProdCalcMap</Name>
				<Source><![CDATA[
    protected void addToVarianceProdCalcMap(TmpProdStandardVariance     _tmpProdStandardVariance,
                                            PmfProdCalcTransMap         _prodCalcTrans
                                            )
    {
        RecordSortedList    prodCalcTransRSL;

        if (variance2ProdCalcTransMap.exists(_tmpProdStandardVariance.RecId))
        {
            prodCalcTransRSL = variance2ProdCalcTransMap.lookup(_tmpProdStandardVariance.RecId);
        }
        else
        {
            prodCalcTransRSL = new RecordSortedList(tableNum(ProdCalcTrans));
            prodCalcTransRSL.sortOrder(fieldNum(ProdCalcTrans, RecId));
        }

        prodCalcTransRSL.ins(_prodCalcTrans);
        variance2ProdCalcTransMap.insert(_tmpProdStandardVariance.RecId, prodCalcTransRSL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransActual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a <c>ProdCalcTrans</c> record to the set of actual cost transactions.
    /// </summary>
    /// <param name="_prodCalcTrans">
    /// The <c>ProdCalcTrans</c> record to add.
    /// </param>
    protected void addTransActual(
                                   PmfProdCalcTransMap _prodCalcTrans
    )
    {
        super(_prodCalcTrans);

        this.addToVarianceProdCalcMap(tmpProdStandardVariance, _prodCalcTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blankProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new empty buffer of a type that is mapped in the <c>PmfProdCalcTransMap</c> map.
    /// </summary>
    /// <returns>
    /// A new empty buffer.
    /// </returns>
    protected PmfProdCalcTransMap blankProdCalcTrans()
    {
        ProdCalcTrans prodCalcTrans;
        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSubstitutionVariance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates substitution variances.
    /// </summary>
    /// <returns>
    ///    Substitution variance amount.
    /// </returns>
    protected CostAmount calcSubstitutionVariance()
    {
        CostAmount ret = super();

        // If I add a substitution variance, I need to check, if for this record alreay a link to a prodCalcTrans
        // record exists
        if ( ! variance2ProdCalcTransMap.exists(tmpProdStandardVariance.RecId))
        {
            // No link exists, link it to the total prodCalcTrans record
            this.addToVarianceProdCalcMap(tmpProdStandardVariance, prodCalcTransTotal);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotalVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates total variance and links the total variance record to the total <c>ProdCalcTrans</c> record.
    /// </summary>
    /// <param name="_lotSizeVariance">
    /// The lot size variance amount.
    /// </param>
    /// <param name="_costVariance">
    /// The cost variance amount.
    /// </param>
    /// <param name="_qtyVariance">
    /// The quantity variance amount.
    /// </param>
    /// <param name="_substitutionVariance">
    /// The substitution variance amount.
    /// </param>
    /// <param name="_realCostAmount">
    /// The real cost amount.
    /// </param>
    /// <param name="_realAdjustment">
    /// The real adjustment amount.
    /// </param>
    /// <param name="_costMarkupQty">
    /// The cost markup quantity amount.
    /// </param>
    /// <param name="_costPriceQty">
    /// The cost price quantity amount.
    /// </param>
    /// <param name="_stdCostAllowed">
    /// The allowed standard cost amount.
    /// </param>
    protected void createTotalVariance(
        CostAmount _lotSizeVariance,
        CostAmount _costVariance,
        CostAmount _qtyVariance,
        CostAmount _substitutionVariance,
        CostAmount _realCostAmount,
        CostAmount _realAdjustment,
        CostAmount _costMarkupQty,
        CostAmount _costPriceQty,
        CostAmount _stdCostAllowed
        )
    {
        super(_lotSizeVariance, _costVariance, _qtyVariance, _substitutionVariance, _realCostAmount, _realAdjustment, _costMarkupQty, _costPriceQty, _stdCostAllowed);

        // Link the total variance record to the total prod calc trans
        this.addToVarianceProdCalcMap(tmpProdStandardVariance, prodCalcTransTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default dimension of the primary record.
    /// </summary>
    /// <returns>
    /// The default dimension of the primary record.
    /// </returns>
    protected DimensionDefault defaultDimension()
    {
        return prodTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes internal calculation value objects.
    /// </summary>
    /// <param name="_transRefId">
    ///    The transaction reference ID.
    /// </param>
    /// <param name="_transRefType">
    ///    The transaction reference type, either production or production flow.
    /// </param>
    /// <param name="_collectRefLevel">
    ///    The level of the production order throughout a sub production order stack.
    /// </param>
    /// <param name="_collectRefId">
    ///    The reference of the top production order.
    /// </param>
    protected void init(
        CostTransRefId      _transRefId,
        ProdTransRefType    _transRefType,
        Level               _collectRefLevel,
        CostTransRefId      _collectRefId
        )
    {
        super(_transRefId, _transRefType, _collectRefLevel, _collectRefId);

        prodTable                   = ProdTable::find(_transRefId);
        variance2ProdCalcTransMap   = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Class);
        this.initProdCalcTransTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdCalcTransTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>prodCalcTransTotal</c> variable from the parent table.
    /// </summary>
    protected void initProdCalcTransTotal()
    {
        prodCalcTransTotal = ProdCalcTrans::findIdRef(prodTable.TableId, prodTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotalVariance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes fields in the variances temporary table.
    /// </summary>
    protected void initTotalVariance()
    {
        super();

        tmpProdStandardVariance.initFromPmfProdCalcTransMap(prodCalcTransTotal);
        tmpProdStandardVariance.Resource    = prodCalcTransTotal.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the default dimension of the primary record with a new dimension.
    /// </summary>
    /// <param name="_defaultDimension">The dimension to merge with.</param>
    protected void mergeDimension(DimensionDefault _defaultDimension)
    {
        prodTable.mergeDimension(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalledDuringEnding</Name>
				<Source><![CDATA[
    public boolean parmCalledDuringEnding(boolean _calledDuringEnding = calledDuringEnding)
    {
        calledDuringEnding = _calledDuringEnding;

        return calledDuringEnding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventItemPrice</Name>
				<Source><![CDATA[
    public InventItemPrice parmInventItemPrice()
    {
        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds validation logic that is specific for production order variance calculation.
    /// </summary>
    /// <returns>
    ///    true if variance calculation should be performed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method returns false if the <c>ProdTable</c> record does not exist anymore.
    /// </remarks>
    protected boolean validate()
    {
        boolean ret = super();

        // Only calc variances if the prodTable does still exist
        if (!prodTable)
        {
            return false;
        }

        if (!calledDuringEnding && prodTable.ProdStatus != ProdStatus::Completed)
            return false;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>variancesByDimension</Name>
				<Source><![CDATA[
/// <summary>
    /// Distributes a calculated variance by the financial dimensions of the transactions included in the
    /// collected transaction used as a base for the calculation.
    /// </summary>
    /// <returns>
    /// A temporary table that holds variances distributed by dimension.
    /// </returns>
    /// <remarks>
    /// When the transactions are collected for variance calculation certain details, such as dimension,
    /// are lost. After the calculation the result must be distributed according to these lost dimension
    /// values for posting.
    /// </remarks>
    public TmpProdStandardVariance variancesByDimension()
    {
        TmpProdStandardVariance     tmpProdStandardVarianceByDim;
        PmfProdCalcTransMap         prodCalcTrans = this.blankProdCalcTrans();

        Factor                      factor;
        DimensionDefault            defaultDimension;

        void selectTmpProdStandardVarianceByDim()
        {
            select firstonly forupdate tmpProdStandardVarianceByDim
                where tmpProdStandardVarianceByDim.OprNum           == tmpProdStandardVariance.OprNum
                   && tmpProdStandardVarianceByDim.CostGroupId      == tmpProdStandardVariance.CostGroupId
                   && tmpProdStandardVarianceByDim.CalcType         == tmpProdStandardVariance.CalcType
                   && tmpProdStandardVarianceByDim.Resource         == tmpProdStandardVariance.Resource
                   && tmpProdStandardVarianceByDim.InventDimId      == tmpProdStandardVariance.InventDimId
                   && tmpProdStandardVarianceByDim.InventCostLevel  == tmpProdStandardVariance.InventCostLevel
                   && tmpProdStandardVarianceByDim.Split            == tmpProdStandardVariance.Split
                   && tmpProdStandardVarianceByDim.OprId            == tmpProdStandardVariance.OprId
                   && tmpProdStandardVarianceByDim.WrkCtrType       == tmpProdStandardVariance.WrkCtrType
                   && tmpProdStandardVarianceByDim.DefaultDimension == defaultDimension;

            if (!tmpProdStandardVarianceByDim)
            {
                tmpProdStandardVarianceByDim.initFromTmpProdStandardVariance(tmpProdStandardVariance);
                tmpProdStandardVarianceByDim.DefaultDimension = tmpProdStandardVarianceByDim.copyDimension(defaultDimension);
            }
        }

        if (InventParameters::find().ProdStandardCostVariance == ProdStandardCostVariance::Summarized)
        {
            select firstonly tmpProdStandardVariance
                where tmpProdStandardVariance.InventCostLevel == InventCostLevel::Total;

            tmpProdStandardVarianceByDim.initFromTmpProdStandardVariance(tmpProdStandardVariance);
            tmpProdStandardVarianceByDim.DefaultDimension = tmpProdStandardVarianceByDim.copyDimension(
                                                                                                       this.defaultDimension()
                                                                                                       );

            tmpProdStandardVarianceByDim.addQty(tmpProdStandardVariance, 1);
            tmpProdStandardVarianceByDim.insert();
        }
        else
        {
            while select tmpProdStandardVariance
            {
                if (!variance2ProdCalcTransMap.exists(tmpProdStandardVariance.RecId))
                    continue;

                RecordSortedList prodCalcTransRSL = variance2ProdCalcTransMap.lookup(tmpProdStandardVariance.RecId);

                CostAmount totalLotSizeVariance      = tmpProdStandardVariance.LotSizeVariance;
                CostAmount totalCostVariance         = tmpProdStandardVariance.CostVariance;
                CostAmount totalQtyVariance          = tmpProdStandardVariance.QtyVariance;
                CostAmount totalSubstitutionVariance = tmpProdStandardVariance.SubstitutionVariance;

                if (prodCalcTransRSL.first(prodCalcTrans))
                {
                    do
                    {
                        switch (prodCalcTrans.CalcType)
                        {
                            case ItemCalcType::BOM,
                                 ItemCalcType::Item,
                                 ItemCalcType::Service,
                                 ItemCalcType::Burden:

                                if (prodCalcTrans.IdRefTableId == tableNum(PmfProdCoBy))
                                {
                                    defaultDimension = (select firstonly DefaultDimension from pmfProdCoBy
                                                where  pmfProdCoBy.RecId == prodCalcTrans.IdRefRecId).DefaultDimension;
                                }
                                else
                                {
                                    defaultDimension = (select firstonly DefaultDimension from prodBOM
                                                where prodBOM.TableId   == prodCalcTrans.IdRefTableId
                                                   && prodBOM.RecId     == prodCalcTrans.IdRefRecId).DefaultDimension;
                                }
                                break;

                            case ItemCalcType::Process,
                                 ItemCalcType::Setup,
                                 ItemCalcType::Qty :

                                 defaultDimension = (select firstonly DefaultDimension from prodRoute
                                                where prodRoute.TableId == prodCalcTrans.IdRefTableId
                                                   && prodRoute.RecId   == prodCalcTrans.IdRefRecId).DefaultDimension;
                                break;

                            case ItemCalcType::IndirectSurcharge,
                                 ItemCalcType::IndirectRate,
                                 ItemCalcType::IndirectInUnitBased,
                                 ItemCalcType::IndirectOutUnitBased :

                                defaultDimension = CostSheetCalcNodePropertyLookup::newParameters(CostPriceType::COGM, prodCalcTrans.Resource).getDefaultDimension();

                                if (defaultDimension != 0)
                                {
                                    defaultDimension = prodTable.mergeDimension(defaultDimension);
                                }
                                else
                                {
                                    defaultDimension = this.defaultDimension();
                                }
                                break;

                            case ItemCalcType::Production :
                                defaultDimension = this.defaultDimension();
                                break;
                        }

                        if (prodCalcTrans.CalcType != ItemCalcType::Production 
                            && prodCalcTrans.realCostAmountTotal())
                        {
                            factor = prodCalcTrans.realCostAmountTotal() / (tmpProdStandardVariance.realCostAmountTotal() ?
                                                                            tmpProdStandardVariance.realCostAmountTotal() :
                                                                            1);
                        }
                        else
                        {
                            // The total level is assigned to the diemsnion of the prodTable
                            // There can only be one set of dimensions, so no need to distribute it further
                            factor = 1;
                        }

                        selectTmpProdStandardVarianceByDim();

                        tmpProdStandardVarianceByDim.addQty(tmpProdStandardVariance, factor);
                        tmpProdStandardVarianceByDim.write();

                        // Add the assigned variances to the total qty
                        // Do not use the tmpProdStandardVarianceDim buffer, because it might be that
                        // the same record was found and the qty was summed up there
                        totalLotSizeVariance      -= (factor * tmpProdStandardVariance.LotSizeVariance);
                        totalCostVariance         -= (factor * tmpProdStandardVariance.CostVariance);
                        totalQtyVariance          -= (factor * tmpProdStandardVariance.QtyVariance);
                        totalSubstitutionVariance -= (factor * tmpProdStandardVariance.SubstitutionVariance);
                    }
                    while (prodCalcTransRSL.next(prodCalcTrans));
                }

                // Check if I was able to distribute all the variances.
                // If there is something left
                if ( totalLotSizeVariance        != 0 ||
                     totalCostVariance           != 0 ||
                     totalQtyVariance            != 0 ||
                     totalSubstitutionVariance   != 0 )
                {
                    // Not all the variances have been assigned.
                    // Assign the rest to the production dimensions
                    defaultDimension = this.defaultDimension();

                    selectTmpProdStandardVarianceByDim();

                    tmpProdStandardVarianceByDim.LotSizeVariance        += totalLotSizeVariance;
                    tmpProdStandardVarianceByDim.CostVariance           += totalCostVariance;
                    tmpProdStandardVarianceByDim.QtyVariance            += totalQtyVariance;
                    tmpProdStandardVarianceByDim.SubstitutionVariance   += totalSubstitutionVariance;

                    tmpProdStandardVarianceByDim.write();
                }
            }
        }
        return tmpProdStandardVarianceByDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProdStandardVariance_Prod construct()
    {
        return new ProdStandardVariance_Prod();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>