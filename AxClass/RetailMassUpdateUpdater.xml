<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMassUpdateUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This abstract class <c>RetailMassUpdateUpdater</c> used while doing a bulk update
/// from a worksheet to the destination table
/// </summary>
class RetailMassUpdateUpdater extends RetailMassUpdate implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>finalMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is used to pass some info to the user once the job is run.
    /// </summary>
    /// <returns>
    /// Message in string format.
    /// </returns>
    protected str finalMessage()
    {
        return failed ? "@RET260025" : "@RET6351";
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextWorksheetStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the status of a pirticular worksheet.
    /// </summary>
    /// <returns>
    /// An enum value of <c>RetailMassUpdateStatus</c> type.
    /// </returns>
    protected RetailMassUpdateStatus nextWorksheetStatus()
    {
        return failed ? RetailMassUpdateStatus::Open : RetailMassUpdateStatus::Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used to make an update on the table that is passed to it.
    /// </summary>
    /// <param name="destinationTable">
    /// The table where the update should take place ,passed as an object of <c>Common</c> type.
    /// </param>
    /// <param name="itemId">
    /// String conatining the Item's id whose inventory might be updated.
    /// </param>
    /// <param name="propertyDescription">
    /// A string which has a product description.
    /// </param>
    /// <param name="_line">
    /// A record for table <c>RetailMassupdateWorkSheetline</c>.
    /// </param>
    protected void processTable(Common destinationTable, str itemId, str propertyDescription, RetailMassupdateWorksheetLine _line = null)
    {
        if (destinationTable != null)
        {
            destinationTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (! this.validate())
            throw error("");

        try
        {
            ttsbegin;

            this.processWorksheet();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to update the timestamp on the worksheet when ever it is processed.
    /// </summary>
    protected void updateDateTime()
    {
        RetailMassUpdateWorksheetTable worksheet;

        ttsBegin;
        update_recordset worksheet
        setting DatePosted = DateTimeUtil::getSystemDateTime()
        where worksheet.RecId == worksheetId;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a run base bactch object of the type <c>RetailMassUpdateUpdater</c>.
    /// </summary>
    /// <param name="_worksheetId">
    /// Value for the <c>Number</c> field of the <c>RetailMassUpdateWorkSheetTable</c> table.
    /// </param>
    /// <param name="tableDataSource">
    /// Used to refresh the Work sheet status on the form if it is still open.
    /// </param>
    /// <returns>
    /// An instance of <c>RetailMassUpdateUpdater</c> class.
    /// </returns>
    public static RetailMassUpdateUpdater construct(int64 _worksheetId, FormDataSource tableDataSource)
    {
        RetailMassUpdateUpdater ret = new RetailMassUpdateUpdater();
        ret.parmWorksheetId(_worksheetId);
        ret.parmWorksheetTable(tableDataSource);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        // Here goes a description of the class
    /// <summary>
    /// Gets the desciption of the class.
    /// </summary>
    /// <returns>
    /// Gets the desciption of the class.
    /// </returns>
    static ClassDescription description()
    {
        return "@RET260024";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailMassUpdateUpdater</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailMassUpdateUpdater</c> can be run in
    /// a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>