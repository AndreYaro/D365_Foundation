<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepreciationProfilesValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides a common logic for validation of depreciation profiles in multiple tables.
/// </summary>
abstract public class AssetDepreciationProfilesValidation
{
    AssetDepreciationProfilesValidationMap assetDepreciationProfilesValidationMap;

    AssetDepreciationProfile depreciationProfile;
    AssetDepreciationProfile depreciationAltProfile;
    AssetDepreciationProfile depreciationExtProfile;
    AssetDepreciationProfile depreciationAcceleratedProfile_JP;

    #ISOCountryRegionCodes
    boolean                  isISOJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDepreciationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates correctness and compatibility of depreciation profile.
    /// </summary>
    /// <returns>
    /// true, if depreciation profile is correct; otherwise, false.
    /// </returns>
    public abstract boolean validateDepreciationProfile()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationAltProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates correctness and compatibility of alternative depreciation profile.
    /// </summary>
    /// <returns>
    /// true, if alternative depreciation profile is correct; otherwise, false.
    /// </returns>
    public abstract boolean validateDepreciationAltProfile()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationExtProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates correctness and compatibility of extraordinary depreciation profile.
    /// </summary>
    /// <returns>
    /// true, if extraordinary depreciation profile is correct; otherwise, false.
    /// </returns>
    public abstract boolean validateDepreciationExtProfile()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationAcceleratedProfile_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates correctness and compatibility of accelerated depreciation profile.
    /// </summary>
    /// <returns>
    /// true, if accelerated depreciation profile is correct; otherwise, false.
    /// </returns>
    public abstract boolean validateDepreciationAcceleratedProfile_JP()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationConvention</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates correctness and compatibility with profiles of depreciation convention.
    /// </summary>
    /// <returns>true if validation succeeds; otherwise, false.</returns>
    public abstract boolean validateDepreciationConvention()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates compatibility of posting layer with profiles.
    /// </summary>
    /// <returns>true if validation succeeds; otherwise, false.</returns>
    public abstract boolean validatePostingLayer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDepreciationProfilesValidationMap</Name>
				<Source><![CDATA[
    protected AssetDepreciationProfilesValidationMap parmDepreciationProfilesValidationMap(AssetDepreciationProfilesValidationMap _assetDepreciationProfilesValidationMap = assetDepreciationProfilesValidationMap)
    {
        assetDepreciationProfilesValidationMap = _assetDepreciationProfilesValidationMap;

        return assetDepreciationProfilesValidationMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDepreciationProfiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes profiles from the map.
    /// </summary>
    protected void initDepreciationProfiles()
    {
        depreciationProfile               = AssetDepreciationProfilesValidation::findDepreciationProfileAndThrowErrorIfNotFound(assetDepreciationProfilesValidationMap.DepreciationProfile);
        depreciationAltProfile            = AssetDepreciationProfilesValidation::findDepreciationProfileAndThrowErrorIfNotFound(assetDepreciationProfilesValidationMap.DepreciationAltProfile);
        depreciationExtProfile            = AssetDepreciationProfilesValidation::findDepreciationProfileAndThrowErrorIfNotFound(assetDepreciationProfilesValidationMap.DepreciationExtProfile);
        depreciationAcceleratedProfile_JP = AssetDepreciationProfilesValidation::findDepreciationProfileAndThrowErrorIfNotFound(assetDepreciationProfilesValidationMap.DepreciationAcceleratedProfile_JP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationProfilesMethodsForAlternativeProfile_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that depreciation profile method and alternative depreciation profile are valid.
    /// </summary>
    /// <returns>
    /// true, if the depreciation profiles are valid; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationProfilesMethodsForAlternativeProfile_PL()
    {
        boolean ret = true;

        if (depreciationProfile && depreciationAltProfile &&
            (AssetDepreciationProfile::isProfilePolishDepreciationMethod(depreciationProfile.Method) ||
             AssetDepreciationProfile::isProfilePolishDepreciationMethod(depreciationAltProfile.Method)))
        {
            ret = this.isValidProfileCombination_PL(
                depreciationProfile.Method,
                depreciationAltProfile.Method);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationProfilesMethodsForAlternativeProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that depreciation profile method and alternative depreciation profile are valid.
    /// </summary>
    /// <returns>
    /// true, if the depreciation profiles are valid; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationProfilesMethodsForAlternativeProfile()
    {
        boolean ret = true;

        if (depreciationProfile && depreciationAltProfile &&
            (!AssetDepreciationProfile::isValidProfileForAltProfileCombination(depreciationProfile.Method) ||
             !AssetDepreciationProfile::isValidProfileForAltProfileCombination(depreciationAltProfile.Method)))
        {
            ret = checkFailed(
                strFmt("@SYS71089",
                    AssetDepreciationMethod::StraightLine,
                    AssetDepreciationMethod::ReducingBalance,
                    AssetDepreciationMethod::StraightLine,
                    AssetDepreciationMethod::ReducingBalance));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationProfileAndAlternativeProfilePropertiesMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that depreciation profile and alternative depreciation profile properties match.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationProfileAndAlternativeProfilePropertiesMatch()
    {
        boolean ret = true;

        if (depreciationProfile && depreciationAltProfile)
        {
            if (depreciationProfile.DepreciationYear != depreciationAltProfile.DepreciationYear ||
                depreciationProfile.Accrual          != depreciationAltProfile.Accrual)
            {
                ret = checkFailed("@SYS71088");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationProfileNotAcceleratedMethod_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that depreciation profile method is not accelerated method.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationProfileNotAcceleratedMethod_JP()
    {
        boolean ret = true;

        if (isISOJP &&
            depreciationProfile &&
            depreciationProfile.Method == AssetDepreciationMethod::Accelerated_JP)
        {
            ret = checkFailed(strFmt("@FixedAssetsIncentiveDepreciation:AcceleratedDepProfileValidate", "@SYS67414"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationProfileNotSpecialDepreciationMethod_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that depreciation profile method is not special depreciation method.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationProfileNotSpecialDepreciationMethod_JP()
    {
        boolean ret = true;

        if (isISOJP &&
            depreciationProfile &&
            AssetDepreciationProfile::isSpecialDepMethod_JP(depreciationProfile.Method))
        {
            ret = checkFailed(strFmt("@FixedAssetsIncentiveDepreciation:SYP4880204", depreciationProfile.Method));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationProfileIsNotPolish_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that depreciation profile method is not Polish.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationProfileIsNotPolish_PL()
    {
        boolean ret = this.checkDepreciationMethodIsNotPolish_PL(depreciationProfile.Method);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationAltProfileIsNotPolish_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that alternative depreciation profile method is not Polish.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationAltProfileIsNotPolish_PL()
    {
        boolean ret = this.checkDepreciationMethodIsNotPolish_PL(depreciationAltProfile.Method);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationMethodIsNotPolish_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that depreciation method is not Polish.
    /// </summary>
    /// <param name = "_method">The depreciation method.</param>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationMethodIsNotPolish_PL(AssetDepreciationMethod _method)
    {
        boolean ret = true;

        if (AssetDepreciationProfile::isProfilePolishDepreciationMethod(_method))
        {
            ret = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_PolishDepreciationMethodIncompatibleWithPostingLayerNone", _method));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationProfileIsNotRBSL_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that depreciation profile method is not RBSL.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationProfileIsNotRBSL_FR()
    {
        boolean ret = this.checkDepreciationMethodIsNotRBSL_FR(depreciationProfile.Method);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationAltProfileIsNotRBSL_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that alternative depreciation profile method is not RBSL.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationAltProfileIsNotRBSL_FR()
    {
        boolean ret = this.checkDepreciationMethodIsNotRBSL_FR(depreciationAltProfile.Method);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationMethodIsNotRBSL_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that depreciation method is not RBSL.
    /// </summary>
    /// <param name = "_method">The depreciation method.</param>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationMethodIsNotRBSL_FR(AssetDepreciationMethod _method)
    {
        boolean ret = true;

        if (_method == AssetDepreciationMethod::RBSL)
        {
            ret = checkFailed("@FixedAssets:FA_MessageValidation_RBSLMethodIncompatibleWithPostingLayerNone");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationProfileAccrualIsNotDaily</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that depreciation profile accrual is not daily.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationProfileAccrualIsNotDaily()
    {
        boolean ret = this.checkDepreciationAccrualIsNotDaily(depreciationProfile.Accrual);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationAltProfileAccrualIsNotDaily</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that alternative depreciation profile accrual is not daily.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationAltProfileAccrualIsNotDaily()
    {
        boolean ret = this.checkDepreciationAccrualIsNotDaily(depreciationAltProfile.Accrual);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationAccrualIsNotDaily</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that depreciation accrual is not daily.
    /// </summary>
    /// <param name = "_accrual">The depreciation accrual.</param>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationAccrualIsNotDaily(AssetAccrual _accrual)
    {
        boolean ret = true;

        if (_accrual == AssetAccrual::Daily)
        {
            ret = checkFailed("@FixedAssets:FA_MessageValidation_PeriodFrequencyIncompatibleWithPostingLayerNone");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationExtProfileMethodIsNotManual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that extraordinary depreciation profile method is not manual.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationExtProfileMethodIsNotManual()
    {
        boolean ret = true;

        if (depreciationExtProfile &&
            depreciationExtProfile.Method != AssetDepreciationMethod::Manual)
        {
            ret = checkFailed(strFmt("@SYS71090",AssetDepreciationMethod::Manual));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationExtProfileMethodIsNotManualOrSpecial_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that extraordinary depreciation profile method is not manual or special.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationExtProfileMethodIsNotManualOrSpecial_JP()
    {
        boolean ret = true;

        if (isISOJP &&
            depreciationExtProfile &&
            depreciationExtProfile.Method != AssetDepreciationMethod::Manual &&
            !AssetDepreciationProfile::isSpecialDepMethod_JP(depreciationExtProfile.Method))
        {
            ret = checkFailed(
                strFmt("@SYS71090",
                    strFmt("@FixedAssetsIncentiveDepreciation:SYP4880202",
                        AssetDepreciationMethod::Manual,
                        AssetDepreciationMethod::SpecialDepreciation_JP,
                        AssetDepreciationMethod::AdditionalDepreciation_JP)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationExtProfileAdditionalMethodIsAllowedByDepreciationProfile_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that depreciation profile method allows additional depreciation.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationExtProfileAdditionalMethodIsAllowedByDepreciationProfile_JP()
    {
        boolean ret = true;

        if (isISOJP &&
            depreciationExtProfile &&
            depreciationExtProfile.Method == AssetDepreciationMethod::AdditionalDepreciation_JP &&
            !AssetDepreciationProfile::isDepMethodAllowAdditionalDep_JP(depreciationProfile.Method))
        {
            ret = checkFailed("@FixedAssetsIncentiveDepreciation:SYP4880203");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationAcceleratedProfileMethodIsAccelerated_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that accelerated depreciation profile method is accelerated method.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationAcceleratedProfileMethodIsAccelerated_JP()
    {
        boolean ret = true;

        if (isISOJP &&
            depreciationAcceleratedProfile_JP &&
            depreciationAcceleratedProfile_JP.Method != AssetDepreciationMethod::Accelerated_JP)
        {
            ret = checkFailed(strFmt("@FixedAssetsIncentiveDepreciation:SYP4880070", AssetDepreciationMethod::Accelerated_JP));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationConventionNoneForAllowedMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that Depreciation convention is equal to None for
    /// depreciation methods consumption, factor and manual.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationConventionNoneForAllowedMethods()
    {
        boolean ret = true;

        if (assetDepreciationProfilesValidationMap.DepreciationConvention != AssetDepreciationConvention::None &&
            !depreciationProfile.isConventionAllowed())
        {
            ret = checkFailed(
                strFmt("@SYS95010",
                    AssetDepreciationMethod::Consumption,
                    AssetDepreciationMethod::Factor,
                    AssetDepreciationMethod::Manual,
                    AssetDepreciationMethod::LowValuePool));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationConventionNoneForDailyAccrual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that depreciation conventions being set in conjunction with daily accrual option.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationConventionNoneForDailyAccrual()
    {
        boolean ret = true;

        if (assetDepreciationProfilesValidationMap.DepreciationConvention != AssetDepreciationConvention::None &&
            depreciationProfile.Accrual == AssetAccrual::Daily)
        {
            ret = checkFailed("@SYS100479");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationConventionNotHalfYearForStraightLineLifeRemainingMethod_AT</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the half year deprecation is enabled, and Alternative deprecation profile is selected
    /// Or the Alternative depreciation profile is set to Straight Line Life Remaining method.
    /// </summary>
    /// <returns>
    /// true, if validation passed; otherwise, false.
    /// </returns>
    protected boolean checkDepreciationConventionNotHalfYearForStraightLineLifeRemainingMethod_AT()
    {
        boolean ret = true;

        if (assetDepreciationProfilesValidationMap.DepreciationConvention == AssetDepreciationConvention::HalfYearStart &&
            depreciationProfile.Accrual != AssetAccrual::Daily &&
            AssetParameters::find().HalfYearDepreciation_AT)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceAT00007, funcName());

            if ((depreciationAltProfile &&
                 depreciationProfile.Method == AssetDepreciationMethod::StraightLineLifeRemaining) ||
                depreciationAltProfile.Method == AssetDepreciationMethod::StraightLineLifeRemaining)
            {
                ret = checkFailed("@SYS107082");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidProfileCombination_PL</Name>
				<Source><![CDATA[
    private boolean isValidProfileCombination_PL(
        AssetDepreciationMethod _depreciationProfileMethod,
        AssetDepreciationMethod _depreciationAltProfileMethod)
    {
        boolean returnValue = true;

        if (_depreciationProfileMethod != AssetDepreciationMethod::ReducingBalance_PL
            || (_depreciationProfileMethod == AssetDepreciationMethod::ReducingBalance_PL
             && _depreciationAltProfileMethod != AssetDepreciationMethod::StraightLine_PL
             && _depreciationAltProfileMethod != AssetDepreciationMethod::StraightLinePercentage_PL))
        {
            returnValue = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_PolishAlternativeDepreciationIsNotAllowed",
                AssetDepreciationMethod::StraightLine_PL,
                AssetDepreciationMethod::StraightLinePercentage_PL,
                AssetDepreciationMethod::ReducingBalance_PL));
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>AssetDepreciationProfilesValidation</c> class based on the received record.
    /// </summary>
    /// <param name = "_assetDepreciationProfilesValidationMap">The record of a table that contains a full set of depreciation profiles.</param>
    /// <returns>
    /// An instance of <c>AssetDepreciationProfilesValidation</c> class.
    /// </returns>
    public static AssetDepreciationProfilesValidation construct(AssetDepreciationProfilesValidationMap _assetDepreciationProfilesValidationMap)
    {
        AssetDepreciationProfilesValidation assetDeprecationProfilesValidation;
        AssetDepreciationProfilesValidationAttribute extensionAttribute = new AssetDepreciationProfilesValidationAttribute(tableId2Name(_assetDepreciationProfilesValidationMap.TableId));

        assetDeprecationProfilesValidation = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(AssetDepreciationProfilesValidation), extensionAttribute);

        assetDeprecationProfilesValidation.parmDepreciationProfilesValidationMap(_assetDepreciationProfilesValidationMap);

        assetDeprecationProfilesValidation.initDepreciationProfiles();

        return assetDeprecationProfilesValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDepreciationProfileAndThrowErrorIfNotFound</Name>
				<Source><![CDATA[
    private static AssetDepreciationProfile findDepreciationProfileAndThrowErrorIfNotFound(AssetDepreciationProfileId _depreciationProfileId)
    {
        AssetDepreciationProfile depreciationProfile;

        if (_depreciationProfileId)
        {
            depreciationProfile = AssetDepreciationProfile::find(_depreciationProfileId);

            if (!depreciationProfile)
            {
                throw error(strFmt("@FixedAssets:FA_ErrorMessage_DepreciationProfileDoesNotExist", _depreciationProfileId));
            }
        }

        return depreciationProfile;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>