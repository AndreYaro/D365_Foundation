<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxProjInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class TaxProjInvoice extends Tax
{
    SalesCalcTax_ProjInvoice    salesCalcTax;

    TableId                     lineTableId;
    RecId                       lineRecId;

    MarkupTrans                 markupTrans;

    NoYes                       markupAdminister;
    TransDate                   calculationDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    boolean checkParameters()
    {
        boolean ok = true;

        if (!salesCalcTax)
        {
            throw error(strFmt("@SYS22533",funcName(),classId2Name(classIdGet(salesCalcTax))));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    public ExchRate exchRate()
    {
        return salesCalcTax.exchRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFromProj</Name>
				<Source><![CDATA[
    protected void moveFromProj(TableId   _origTableId,
                                RecId     _origRecId)
    {
        while select forupdate taxWorkTrans
            where taxWorkTrans.SourceTableId == _origTableId
                && taxWorkTrans.SourceRecId == _origRecId
        {
            taxWorkTrans.HeadingTableId           = this.headingTableId();
            taxWorkTrans.HeadingRecId             = this.headingRecId();
            taxWorkTrans.SourceTableId            = this.sourceTableId();
            taxWorkTrans.SourceRecId              = this.sourceRecId();
            taxWorkTrans.update(this.ignoreCalculatedSalesTax());
        }

        // move manually inserted tax lines to new owner.
        update_recordset taxWorkTrans
        setting
            HeadingRecId    = this.headingRecId(),
            HeadingTableId  = this.headingTableId()
        where
            taxWorkTrans.HeadingTableId == salesCalcTax.transOrigTableId() &&
            taxWorkTrans.HeadingRecId   == salesCalcTax.transOrigRecId() &&
            taxWorkTrans.ManualInsertedTax == true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(NoYes              _post,
                    SalesCalcTax       _salesCalcTax,
                    TmpTaxWorkTrans    _tmpTaxWorkTrans)
    {
        this.initializeFromSalesCalcTax(_salesCalcTax);
        post = _post;

        this.tmpTaxWorkTrans(_tmpTaxWorkTrans);

        super();

        taxModuleType       = TaxModuleType::ProjectInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromSalesCalcTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes class variables.
    /// </summary>
    /// <param name = "_salesCalcTax">
    ///     An instance of <c>SalesCalcTax</c> class.
    /// </param>
    protected void initializeFromSalesCalcTax(SalesCalcTax _salesCalcTax)
    {
        salesCalcTax = _salesCalcTax;
        taxModuleType = TaxModuleType::Project;
        headingTableId = salesCalcTax.tableId();
        headingRecId = salesCalcTax.recID();
        sourceCurrencyCode = salesCalcTax.currencyCode();
        triangulation = salesCalcTax.triangulation();
        taxDate = salesCalcTax.invoiceDate();
        headingTableId = salesCalcTax.tableId();
        headingRecId = salesCalcTax.recID();
        
        this.validateHeaderTableRecord();
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeaderTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the header table record.
    /// </summary>
    protected void validateHeaderTableRecord()
    {
        if (!headingTableId && !headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            if (! this.checkParameters())
            {
                throw error("@SYS18447");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected void post(LedgerPostingController _ledgerPostingController,
                        TaxTrans                _taxTrans,
                        TaxAmount               _taxAmount,
                        TaxAmount               _chargeAmount,
                        CurrencyExchangeHelper  _exchRateHelper,
                        LedgerDimensionAccount  _ledgerDimension,
                        LedgerDimensionAccount  _operationLedgerDimension,
                        LedgerDimensionAccount  _taxOffsetUseTaxLedgerDimension,
                        LedgerDetailLevel       _ledgerDetailLevel  = LedgerDetailLevel::AsDefault,
                        ProjLedger              _projLedger = null
                        ,LedgerDimensionAccount _offsetLedgerDimension = 0,
                        AmountMSTSecondary      _amountMSTSecondary    = 0
                        )
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (prmisDefault(_offsetLedgerDimension))
            {
                _offsetLedgerDimension = _taxTrans.taxTrans_RU().OffsetLedgerDimension_RU;
            }
        }
        // </GEERU>

        super(_ledgerPostingController, _taxTrans, _taxAmount, _chargeAmount, _exchRateHelper, _ledgerDimension, _operationLedgerDimension, _taxOffsetUseTaxLedgerDimension, _ledgerDetailLevel, _projLedger, _offsetLedgerDimension, _amountMSTSecondary);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            TaxServiceTariff::insertTaxServiceTariffForNewParent(salesCalcTax.transOrigTableId(), salesCalcTax.transOrigRecId(), _taxTrans.TableId, _taxTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the transaction line to calculate.
    /// </summary>
    /// <returns>
    /// The record ID of the transaction line to calculate.
    /// </returns>
    public RecId sourceRecId()
    {
        if (markupAdminister)
        {
            return markupTrans.RecId;
        }
        else
        {
            return lineRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    /// The ID of the transaction to tax.
    /// </returns>
    public RefTableId sourceTableId()
    {
        if (markupAdminister)
        {
            return markupTrans.TableId;
        }
        else
        {
            return lineTableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxByMarkup</Name>
				<Source><![CDATA[
    protected void taxByMarkup()
    {
        NoYes   moreMarkup;
        Integer sign;

        moreMarkup  = true;
        while (moreMarkup)
        {
            markupTrans = salesCalcTax.nextMarkupLine();
            if (markupTrans)
            {
                markupAdminister= NoYes::Yes;

                this.moveFromProj(salesCalcTax.transOrigTableId(),
                                  salesCalcTax.transOrigRecId());
                if (salesCalcTax.markupAmount() < 0)
                {
                    sign = -1;
                }
                else
                {
                    sign = 1;
                }

                markupTrans.update();
            }
            else
            {
                markupAdminister= NoYes::No;
                moreMarkup  = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount       taxAmount;
        Integer         sign;

        this.initLedgerPosting(_ledgerPostingController);

        ttsbegin;

        if (!skipTableMarkup)
        {
            salesCalcTax.initCursorMarkup(salesCalcTax.markupHeaderTableId(),
                                          salesCalcTax.markupHeaderRecID());
            this.taxByMarkup();
        }

        salesCalcTax.initCursor();

        while (salesCalcTax.nextLine())
        {
            lineTableId = salesCalcTax.transTableId();
            lineRecId   = salesCalcTax.transRecId();

            this.moveFromProj(salesCalcTax.transOrigTableId(),
                              salesCalcTax.transOrigRecId());

            if (salesCalcTax.transLineAmount() < 0 ||
                salesCalcTax.transQty() < 0)
            {
                sign = -1;
            }
            else
            {
                sign = 1;
            }

            salesCalcTax.setTax(this.taxWriteCode(), this.lineTaxAmount(sign));

            if (!skipLineMarkup)
            {
                this.taxByMarkup();
            }
        }

        ttscommit;

        if (post)
        {
            this.calcTax();
            this.saveAndPost(_ledgerPostingController);
            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
        }
        else
        {
            taxAmount = this.totalTaxAmount();
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reporting exchange rate from fixed exchange rate defined in project contract.
    /// </summary>
    /// <returns>
    /// The reporting exchange rate from fixed exchange rate defined in project contract.
    /// </returns>
    protected ExchRate reportingCurrencyExchangeRate()
    {
        ExchRate repCurExchRate = salesCalcTax.reportingCurrencyExchangeRate();

        return repCurExchRate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>