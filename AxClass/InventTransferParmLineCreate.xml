<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferParmLineCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransferParmLineCreate</c> class is responsible for creating <c>InventTransferParmLine</c> records when shipping and receiving transfer orders.
/// </summary>
public class InventTransferParmLineCreate
{
    boolean                 countryRegion_RU;
    boolean                 countryRegion_IN;
    private boolean         countryRegion_BR;
    DataAreaId              countryRegionInstanceDataAreaId;
    InventTransferParmTable inventTransferParmTable;
    private InventTransferLine inventTransferLineToProcess;

    private boolean cwItemCancelShipmentFlightEnabled = StockTransferCWItemCancelShipment_INFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initInventTransferParmLineFromInventTransferParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields on the <c>InventTransferParmTable</c> record based on values from the <c>InventTransferParmTable</c> record.
    /// </summary>
    /// <param name="_inventTransferParmLine">The <c>InventTransferParmLine</c> record that should be initialized.</param>
    protected void initInventTransferParmLineFromInventTransferParmTable(InventTransferParmLine _inventTransferParmLine)
    {
        _inventTransferParmLine.ParmId         = inventTransferParmTable.ParmId;
        _inventTransferParmLine.TransferId     = inventTransferParmTable.TransferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransferParmLineFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields on the <c>InventTransferParmTable</c> record based on values from the <c>InventTrans</c> table.
    /// </summary>
    /// <param name="_inventTransferParmLine">The <c>InventTransferParmLine</c> record that should be initialized.</param>
    /// <param name="_inventTrans">An inventory transactions table record.</param>
    private void initInventTransferParmLineFromInventTrans(InventTransferParmLine _inventTransferParmLine, InventTrans _inventTrans)
    {
        _inventTransferParmLine.StatusIssue      = _inventTrans.StatusIssue;
        _inventTransferParmLine.StatusReceipt    = _inventTrans.StatusReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the inventdimId on this <c>InventTransferParmLine</c> record.
    /// </summary>
    /// <param name="_inventTransferParmLine">The <c>InventTransferParmLine</c> record that should be initialized.</param>
    /// <param name="_inventLocationId">The <c>InventLocationID</c> ID that should be used to create the <c>inventDimID</c>.</param>
    private void setInventDimIdFromInventLocation(InventTransferParmLine _inventTransferParmLine, InventLocationId _inventLocationId)
    {
        InventDim inventDim;
        inventDim = InventDim::find(_inventTransferParmLine.InventDimId);
        inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(_inventTransferParmLine.ItemId));
        inventDim.InventLocationId = _inventLocationId;
        inventDim.initFromInventLocation(inventDim.inventLocation());
        _inventTransferParmLine.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCreateShipLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post operation of creating shipment lines.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// The transfer order parm line.
    /// </param>
    /// <param name="_inventTransferLine">
    /// The transfer order line.
    /// </param>
    private void postCreateShipLine_IN(InventTransferParmLine _inventTransferParmLine, InventTransferLine _inventTransferLine)
    {
        TransitDocumentManager_IN       transitDocManager;

        // Form tracking
        transitDocManager = TransitDocumentManager_IN::newManager();
        if (transitDocManager.existsAnyTransitDocType() &&
            transitDocManager.existTransitRuleForTransType(tableNum(InventTransferLine)))
        {
            transitDocManager.transit(_inventTransferLine, _inventTransferParmLine, inventTransferParmTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCreateReceiveLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post operation of creating receipt lines.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// The transfer order parm line.
    /// </param>
    /// <param name="_inventTransferLine">
    /// The transfer order line.
    /// </param>
    private void postCreateReceiveLine_IN(InventTransferParmLine _inventTransferParmLine, InventTransferLine _inventTransferLine)
    {
        InventTransferJourLine              inventTransferJourLine;
        TransitDocumentManager_IN           transitDocManager;
        TransitDocumentSalesTaxForm_IN      formIssue,
                                            formReceive,
                                            currentForm,
                                            newForm;
        List                                list;
        ListEnumerator                      listEnumerator;

        transitDocManager = TransitDocumentManager_IN::newManager();
        if (transitDocManager.existsAnyTransitDocType() &&
            transitDocManager.existTransitRuleForTransType(tableNum(InventTransferLine)))
        {
            select firstOnly RecId from inventTransferJourLine
                where inventTransferJourLine.InventTransId == _inventTransferLine.InventTransId
                    && inventTransferJourLine.ItemId       == _inventTransferLine.ItemId;

            formIssue.Direction   = FormTrackingBasis_IN::FormIssuable;
            formReceive.Direction = FormTrackingBasis_IN::FormReceivable;

            // Form tracking
            list = transitDocManager.findTransitDocuments(inventTransferJourLine, formIssue);
            list.appendList(transitDocManager.findTransitDocuments(inventTransferJourLine, formReceive));
            listEnumerator = list.getEnumerator();
            while (listEnumerator.moveNext())
            {
                currentForm = listEnumerator.current();

                newForm = TransitDocumentSalesTaxForm_IN::findOrCreateReverseForm(currentForm);

                transitDocManager.addTransitDocument(_inventTransferParmLine, newForm);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to skip <c>InventTransferLine</c> record, or not.
    /// </summary>
    /// <param name = "_inventTransferLine">The <c>InventTransferLine</c> record to check.</param>
    /// <returns>true if the transfer line should be skipped; otherwise, false.</returns>
    protected boolean mustSkipInventTransferLine(InventTransferLine _inventTransferLine)
    {
        return WHSLoadLine::existsForInventTransId(_inventTransferLine.InventTransId)
            && !(countryRegion_BR
                && _inventTransferLine.IsWHSLoadStatusShipped_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCreatePickLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for getting <c>InventTransferLine</c> records that are ready to be picked for a given <c>InventTransferTable</c> record.
    /// </summary>
    /// <param name = "_inventTransferTable">The <c>InventTransferTable</c> to get the transfer lines for.</param>
    /// <returns>The query.</returns>
    public Query buildCreatePickLinesQuery(InventTransferTable _inventTransferTable)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsInventTransferLine = query.addDataSource(tableNum(InventTransferLine));
        qbdsInventTransferLine.addSortField(fieldNum(InventTransferLine,LineNum), SortOrder::Ascending);
        qbdsInventTransferLine.addRange(fieldNum(InventTransferLine, TransferId)).value(queryValue(_inventTransferTable.TransferId));
        qbdsInventTransferLine.addRange(fieldNum(InventTransferLine, RemainStatus)).value(queryValue(InventTransferRemainStatus::Shipping));

        QueryBuildDataSource qbdsWHSInventTransferLine = qbdsInventTransferLine.addDataSource(tableNum(WHSInventTransferLine));
        qbdsWHSInventTransferLine.joinMode(JoinMode::NoExistsJoin);
        qbdsWHSInventTransferLine.relations(true);
        qbdsWHSInventTransferLine.addRange(fieldNum(WHSInventTransferLine, ReleasedQty)).value(SysQuery::valueNot(0));
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPickLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>InventTransferParmLine</c> records that are eligible for picking.
    /// </summary>
    public void createPickLines()
    {
        if (countryRegionInstanceDataAreaId != curext())
        {
            throw error(strFmt("@SCM:InventTransferCreateParmLines_InvalidCompany", funcName(), countryRegionInstanceDataAreaId, curext()));
        }

        ttsbegin;

        InventTransferTable inventTransferTable = InventTransferTable::find(inventTransferParmTable.TransferId,true);
        if (! inventTransferTable.RecId)
        {
            throw error(strFmt(InventTransferTable::txtNotExist(),inventTransferParmTable.TransferId));
        }

        InventTransferLine      inventTransferLine;
        LineNum                 lineNum;

        Query query = this.buildCreatePickLinesQuery(inventTransferTable);
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            inventTransferLine = queryRun.get(tableNum(InventTransferLine));

            PdsCWInventQty  cwQtyUpdate;
            InventQty       qtyUpdate = inventTransferLine.calcPickQty(inventTransferParmTable.PickUpdateQty);

            if (PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId))
            {
                cwQtyUpdate = inventTransferLine.pdsCWCalcPickQty(inventTransferParmTable.PickUpdateQty);
            }
            else
            {
                cwQtyUpdate = 0;
            }

            if (qtyUpdate > 0)
            {
                lineNum++;

                InventTransferParmLine  inventTransferParmLine;

                this.initInventTransferParmLineFromInventTransferParmTable(inventTransferParmLine);
                inventTransferParmLine.initFromInventTransferLine(inventTransferLine);

                inventTransferParmLine.InventTransId        = inventTransferLine.InventTransId;
                inventTransferParmLine.InventTransIdTransit = inventTransferLine.InventTransIdTransitTo;
                inventTransferParmLine.QtyShipNow           = qtyUpdate;
                inventTransferParmLine.PdsCWQtyShipNow      = cwQtyUpdate;

                inventTransferParmLine.LineNum              = lineNum;

                inventTransferParmLine.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReceiveLineWithoutExplodeLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>InventTransferParmLine</c> table record that are ready to be received.
    /// </summary>
    /// <param name = "_inventTransferTable">The <c>InventTransferTable</c> table record related to the line for which to create the <c>InventTransferParmLine</c> table record.</param>
    /// <param name = "_inventTransferLine">The <c>InventTransferLine</c> table record related to the line for which to create the <c>InventTransferParmLine</c> table record.</param>
    /// <param name = "_lineNumber">The line number for which to create the <c>InventTransferParmLine</c> record.</param>
    /// <param name = "_quantityUpdate">The quantity for which to create the <c>InventTransferParmLine</c> record.</param>
    /// <param name = "_cwQuantityUpdate">The catch weight quantity for which to create the <c>InventTransferParmLine</c> record.</param>
    /// <returns>The created <c>InventTransferParmLine</c> table record.</returns>
    public InventTransferParmLine createReceiveLineWithoutExplodeLines(
        InventTransferTable     _inventTransferTable,
        InventTransferLine      _inventTransferLine,
        LineNum                 _lineNumber,
        InventQty               _quantityUpdate,
        PdsCWInventQty          _cwQuantityUpdate)
    {
        if (countryRegionInstanceDataAreaId != curext())
        {
            throw error(strFmt("@SCM:InventTransferCreateParmLines_InvalidCompany", funcName(), countryRegionInstanceDataAreaId, curext()));
        }

        InventTransferParmLine inventTransferParmLine;

        this.initInventTransferParmLineFromInventTransferParmTable(inventTransferParmLine);
        inventTransferParmLine.initFromInventTransferLine(_inventTransferLine);
        this.setInventDimIdFromInventLocation(inventTransferParmLine, _inventTransferTable.InventLocationIdTo);
        // <GEERU>
        if (_inventTransferLine.InventDimIdTo_RU && _inventTransferLine.inventDimTo_RU().InventProfileId_RU)
        {
            InventDim inventDimTo               = InventDim::find(inventTransferParmLine.InventDimId, true);
            inventDimTo.InventProfileId_RU      = _inventTransferLine.inventDimTo_RU().InventProfileId_RU;
            inventDimTo                         = InventDim::findOrCreate(inventDimTo);
            inventTransferParmLine.InventDimId  = inventDimTo.InventDimId;
        }
        // </GEERU>
        this.initReceiveLineDefaultDimension_IN(_inventTransferTable, inventTransferParmLine);

        inventTransferParmLine.InventTransId        = _inventTransferLine.InventTransIdReceive;
        inventTransferParmLine.InventTransIdTransit = _inventTransferLine.InventTransIdTransitFrom;
        inventTransferParmLine.QtyReceiveNow        = _quantityUpdate;
        inventTransferParmLine.PdsCWQtyReceiveNow   = _cwQuantityUpdate;

        // <GEERU>
        if (countryRegion_RU
            && inventTransferParmTable.ReceiveUpdateQty == InventTransferReceiveUpdateQty::DocumentReturn_RU
            && inventTransferParmTable.VoucherShipmentId)
        {
            inventTransferParmLine.QtyScrapNow = -((select sum(QtyScrapped) from inventTransferJourLine
                                                        where
                                                            inventTransferJourLine.TransferId == _inventTransferLine.TransferId &&
                                                            inventTransferJourLine.LineNum    == _inventTransferLine.LineNum    &&
                                                            inventTransferJourLine.VoucherId  == inventTransferParmTable.VoucherShipmentId).QtyScrapped);
        }
        // </GEERU>
        inventTransferParmLine.LineNum              = _lineNumber;

        inventTransferParmLine.insert();

        // <GIN>
        if (countryRegion_IN && _inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer)
        {
            InventTransferLine_IN inventTransferLineIN = _inventTransferLine.inventTransferLine_IN();
            InventTransferParmLine_IN inventTransferParmLineIN = inventTransferParmLine.inventTransferParmLine_IN();
            if (_inventTransferLine.QtyTransfer != 0)
            {
                inventTransferParmLineIN.AssessableValue = inventTransferLineIN.AssessableValueTransactionCurrency * (inventTransferParmLine.QtyReceiveNow/_inventTransferLine.QtyTransfer);
            }
            inventTransferParmLine.packInventTransferParmLine_IN(inventTransferParmLineIN);
            inventTransferParmLine.SysExtensionSerializerMap::postUpdate();
        }
        // </GIN>
        // <GIN>
        if (TaxIntegrationUtils::isFormTrackingEnabled_IN())
        {
            this.postCreateReceiveLine_IN(inventTransferParmLine, _inventTransferLine);
        }
        // </GIN>

        if (countryRegion_BR)
        {
            this.createReceiveLine_BR(inventTransferParmLine, _inventTransferLine);
        }

        return inventTransferParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCreateReceiveLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for getting <c>InventTransferLine</c> records that are ready to be received for a given <c>InventTransferTable</c> record.
    /// </summary>
    /// <param name = "_inventTransferTable">The <c>InventTransferTable</c> to get the transfer lines for.</param>
    /// <returns>The query.</returns>
    public Query buildCreateReceiveLinesQuery(InventTransferTable _inventTransferTable)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsInventTransferLine = query.addDataSource(tableNum(InventTransferLine));
        qbdsInventTransferLine.name('TransferLine');
        qbdsInventTransferLine.addRange(fieldNum(InventTransferLine, TransferId)).value(queryValue(_inventTransferTable.TransferId));

        if (inventTransferLineToProcess)
        {
            qbdsInventTransferLine.addRange(fieldNum(InventTransferLine, RecId)).value(queryValue(inventTransferLineToProcess.RecId));
        }

        str remainStatusRange;

        // <GEERU>
        if (countryRegion_RU && inventTransferParmTable.ReceiveUpdateQty == InventTransferReceiveUpdateQty::DocumentReturn_RU)
        {
            remainStatusRange = '';
        }
        else if (countryRegion_RU && inventTransferParmTable.ReceiveUpdateQty == InventTransferReceiveUpdateQty::ReceiveNow)
        {
            remainStatusRange = strfmt('((%1.%2 != %3) || (%1.%4 < 0))',
                                    qbdsInventTransferLine.name(),
                                    fieldStr(InventTransferLine, RemainStatus),
                                    enum2int(InventTransferRemainStatus::None),
                                    fieldStr(InventTransferLine, QtyReceiveNow));
        }
        // </GEERU>
        else 
        {
            remainStatusRange = SysQuery::valueNot(InventTransferRemainStatus::None);
        }

        
        if (remainStatusRange)
        {
            qbdsInventTransferLine.addRange(fieldNum(InventTransferLine, RemainStatus)).value(remainStatusRange);
        }

        if (inventTransferParmTable.ReceiveUpdateQty == InventTransferReceiveUpdateQty::Shipment
            || (countryRegion_RU
            && inventTransferParmTable.ReceiveUpdateQty == InventTransferReceiveUpdateQty::DocumentReturn_RU))
        {
            QueryBuildDataSource qbdsInventTransferJourLine = qbdsInventTransferLine.addDataSource(tableNum(InventTransferJourLine));
            qbdsInventTransferJourLine.joinMode(JoinMode::ExistsJoin);
            qbdsInventTransferJourLine.relations(false);
            qbdsInventTransferJourLine.addLink(fieldNum(InventTransferLine, LineNum), fieldNum(InventTransferJourLine, LineNum));
            qbdsInventTransferJourLine.addRange(fieldNum(InventTransferJourLine, TransferId)).value(queryValue(_inventTransferTable.TransferId));
            if (inventTransferParmTable.VoucherShipmentId)
            {
                qbdsInventTransferJourLine.addRange(fieldNum(InventTransferJourLine, VoucherId)).value(queryValue(inventTransferParmTable.VoucherShipmentId));
            }
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceivingShippedExplodedTransferOrderLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether receiving the shipped and exploded transfer order lines.
    /// </summary>
    /// <returns>true if receiving the shipped and exploded transfer order lines; otherwise, false.</returns>
    protected boolean isReceivingShippedExplodedTransferOrderLines()
    {
        return ((inventTransferParmTable.ReceiveUpdateQty == InventTransferReceiveUpdateQty::Shipment
             || (countryRegion_RU && inventTransferParmTable.ReceiveUpdateQty == InventTransferReceiveUpdateQty::DocumentReturn_RU))
             && inventTransferParmTable.ExplodeLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipCreatingReceiveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to skip creating a receive line for the specified transfer order line.
    /// </summary>
    /// <param name = "_inventTransferLine">A transfer order line.</param>
    /// <returns>true if no receive line should be created for the specified transfer order line; otherwise, false.</returns>
    protected boolean mustSkipCreatingReceiveLine(InventTransferLine _inventTransferLine)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReceiveLine_BR</Name>
				<Source><![CDATA[
    private void createReceiveLine_BR(
        InventTransferParmLine _inventTransferParmLine,
        InventTransferLine _inventTransferLine)
    {
        InventTransferParmLine_BR inventTransferParmLineBR = _inventTransferParmLine.inventTransferParmLine_BR();

        if (ICMSSTAdditionalInfoFeature::isEnabled())
        {
            InventTransferLineFiscalInfo_BR inventTransferLineFiscalInfo = _inventTransferLine.inventTransferLineFiscalInfo_BR();
            TaxationCode_BR icmsstTaxationCode = inventTransferLineFiscalInfo.getICMSSTTaxationCode_BR();

            if (icmsstTaxationCode)
            {
                inventTransferParmLineBR.RespWithholdingICMSST = TaxRespWithholdingICMSSTSetup_BR::find(
                    CFOPTable_BR::find(inventTransferLineFiscalInfo.ReceiveCFOPTable_BR).cfopId,
                    FiscalDocumentIssuer_BR::ThirdParty,
                    icmsstTaxationCode,
                    icmsstTaxationCode,
                    SalesPurchTrntype_BR::FiscalEstablishmentTransfer).RespWithholdingICMSST;
            }
        }

        _inventTransferParmLine.packInventTransferParmLine_BR(inventTransferParmLineBR);
        _inventTransferParmLine.SysExtensionSerializerMap::postUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReceiveLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>InventTransferParmLine</c> records that are ready to be received.
    /// </summary>
    public void createReceiveLines()
    {
        if (countryRegionInstanceDataAreaId != curext())
        {
            throw error(strFmt("@SCM:InventTransferCreateParmLines_InvalidCompany", funcName(), countryRegionInstanceDataAreaId, curext()));
        }

        ttsbegin;

        InventTransferTable inventTransferTable = InventTransferTable::find(inventTransferParmTable.TransferId,true);
        if (! inventTransferTable.RecId)
        {
            throw error(strFmt(InventTransferTable::txtNotExist(),inventTransferParmTable.TransferId));
        }

        InventTransferParmLine  inventTransferParmLine;
        InventTransferLine      inventTransferLine;
        InventTrans             inventTrans;
        InventDim               inventDim;
        InventDim               inventDimTo;
        InventDimParm           inventDimParm;
        InventDim               inventDimTransit;

        InventQty               qtyUpdate;

        LineNum                 lineNum;
        InventTrans             inventTransReceipt;

        InventTransferJourLine  inventTransferJourLine;
        boolean                 isCWItem;
        PdsCWInventQty          cwQtyUpdate;

        if (!this.isReceivingShippedExplodedTransferOrderLines())
        {
            
            Query query = this.buildCreateReceiveLinesQuery(inventTransferTable);
            QueryRun queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                inventTransferLine = queryRun.get(tableNum(InventTransferLine));

                if (this.mustSkipCreatingReceiveLine(inventTransferLine))
                {
                    continue;
                }

                isCWItem = PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId);

                qtyUpdate = inventTransferLine.calcReceiveQty(inventTransferParmTable.ReceiveUpdateQty, inventTransferParmTable.VoucherShipmentId, inventTransferTable);

                if (isCWItem)
                {
                    cwQtyUpdate = inventTransferLine.pdsCWCalcReceiveQty(
                                    inventTransferParmTable.ReceiveUpdateQty,
                                    inventTransferParmTable.VoucherShipmentId,
                                    inventTransferTable);
                }
                else
                {
                    cwQtyUpdate = 0;
                }

                // <GEERU>
                if ((countryRegion_RU
                        && qtyUpdate < 0)
                     || qtyUpdate > 0)
                // </GEERU>
                {
                    if (inventTransferParmTable.ExplodeLines)
                    {
                        select forceplaceholders sum(Qty), sum(PdsCWQty)
                        from inventTrans
                            group by InventTransOrigin,StatusReceipt,StatusIssue
                            where inventTrans.InventTransOrigin         == InventTransOriginTransferReceive::findInventTransOriginId(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum)
                                  // <GEERU>
                        &&    ((qtyUpdate > 0
                            &&      inventTrans.StatusReceipt           >= StatusReceipt::Registered)
                            ||     ((countryRegion_RU && qtyUpdate < 0)
                            &&      inventTrans.StatusReceipt           == StatusReceipt::Purchased))
                            &&    (!countryRegion_RU || inventTrans.InvoiceReturned == NoYes::No)
                                  // </GEERU>
                        &&    inventTrans.StatusIssue               == StatusIssue::None
                        join TableId from inventDim
                            group by InventSerialId,InventBatchId,InventDimId
                            where inventDim.InventDimId                 == inventTrans.InventDimId
                        exists join inventTransReceipt //make sure we only select something that matches shipped transactions
                        where inventTransReceipt.InventTransOrigin  == InventTransOriginTransferTransitFrom::findInventTransOriginId(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum)
                            // <GEERU>
                        &&    ((qtyUpdate > 0
                            &&      inventTransReceipt.StatusIssue    >= StatusIssue::Picked
                            &&      inventTransReceipt.StatusIssue    <= StatusIssue::ReservPhysical)
                            ||     ((countryRegion_RU && qtyUpdate < 0)
                            &&      inventTransReceipt.StatusIssue    == StatusIssue::Sold))
                            &&     (!countryRegion_RU || inventTransReceipt.InvoiceReturned   == NoYes::No)
                            // </GEERU>
                        exists join inventDimTransit
                            where inventDimTransit.InventDimId          == inventTransReceipt.InventDimId
                            &&    inventDimTransit.InventSerialId       == inventDim.InventSerialId
                            &&    inventDimTransit.InventBatchId        == inventDim.InventBatchId
                        #InventDimDevelop;

                        while (inventTrans.InventTransOrigin)
                        {
                            lineNum++;

                            inventTransferParmLine.clear();
                            this.initInventTransferParmLineFromInventTransferParmTable(inventTransferParmLine);
                            inventTransferParmLine.initFromInventTransferLine(inventTransferLine);
                            this.initInventTransferParmLineFromInventTrans(inventTransferParmLine, inventTrans);

                            inventTransferParmLine.InventDimId          = inventDim.InventDimId;

                            this.initReceiveLineDefaultDimension_IN(inventTransferTable, inventTransferParmLine);

                            inventTransferParmLine.InventTransId        = inventTransferLine.InventTransIdReceive;
                            inventTransferParmLine.InventTransIdTransit = inventTransferLine.InventTransIdTransitFrom;
                            // <GEERU>
                            if (countryRegion_RU)
                            {
                                inventTransferParmLine.QtyReceiveNow        = abs(qtyUpdate) > inventTrans.Qty ? inventTrans.Qty * sign(qtyUpdate): qtyUpdate;
                            }
                            else
                            {
                                // </GEERU>
                                inventTransferParmLine.QtyReceiveNow        = qtyUpdate > inventTrans.Qty ? inventTrans.Qty : qtyUpdate;
                                // <GEERU>
                            }
                            // </GEERU>

                            if (isCWItem)
                            {
                                inventTransferParmLine.PdsCWQtyReceiveNow =
                                        cwQtyUpdate > inventTrans.PdsCWQty
                                            ? inventTrans.PdsCWQty : cwQtyUpdate;
                            }

                            inventTransferParmLine.LineNum              = lineNum;

                            inventTransferParmLine.insert();

                            if (countryRegion_BR)
                            {
                                this.createReceiveLine_BR(inventTransferParmLine, inventTransferLine);
                            }

                            qtyUpdate -= inventTransferParmLine.QtyReceiveNow;

                            if (isCWItem)
                            {
                                cwQtyUpdate -= inventTransferParmLine.PdsCWQtyReceiveNow;
                            }
                            else
                            {
                                cwQtyUpdate = 0;
                            }

                            // <GEERU>
                            if (qtyUpdate == 0
                                || (!countryRegion_RU
                                    && qtyUpdate < 0))
                            // </GEERU>
                            {
                                break;
                            }
                            next inventTrans;
                        }
                    }
                    else
                    {
                        lineNum++;

                        inventTransferParmLine = this.createReceiveLineWithoutExplodeLines(inventTransferTable, inventTransferLine, lineNum, qtyUpdate, cwQtyUpdate);
                    }
                }
            }
        }
        else  // Shipment && explode lines
        {
            if (!inventTransferParmTable.VoucherShipmentId)
            {
                while select VoucherId from inventTransferJourLine
                    group by VoucherId
                    where inventTransferJourLine.TransferId == inventTransferParmTable.TransferId
                    && (inventTransferJourLine.QtyShipped
                    || inventTransferJourLine.PdsCWQtyShipped)
                {
                    lineNum = this.createShippedExplodedReceiveLines(inventTransferTable, inventTransferJourLine.VoucherId, lineNum);
                }
            }
            else
            {
                this.createShippedExplodedReceiveLines(inventTransferTable, inventTransferParmTable.VoucherShipmentId, lineNum);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShippedExplodedReceiveLines</Name>
				<Source><![CDATA[
    private LineNum createShippedExplodedReceiveLines(InventTransferTable _inventTransferTable, InventTransferVoucherId _voucherShipmentId, LineNum _lineNum)
    {
        InventTransferParmLine  inventTransferParmLine;
        InventTransferLine      inventTransferLine;
        InventTrans             inventTrans;
        InventDim               inventDim;
        InventDim               inventDimTo;
        InventDimParm           inventDimParm;
        InventDim               inventDimTransit;
        InventQty               qtyUpdate;
        InventTrans             inventTransReceipt;
        InventTransferJourLine  inventTransferJourLine;
        boolean                 isCWItem;
        PdsCWInventQty          cwQtyUpdate;

        while select TransferId, LineNum, InventDimId, QtyShipped, QtyReceived, QtyScrapped, PdsCWQtyShipped from inventTransferJourLine  // lines are always exploded
            where inventTransferJourLine.TransferId == inventTransferParmTable.TransferId &&
                inventTransferJourLine.VoucherId == _voucherShipmentId
        {
            inventTransferLine = InventTransferLine::find(inventTransferJourLine.TransferId,inventTransferJourLine.LineNum);

            if (this.mustSkipCreatingReceiveLine(inventTransferLine))
            {
                continue;
            }

            if (InventTransferParmLineMatchWithInventTransFlight::instance().isEnabled()
                    && !countryRegion_RU
                    && inventTransferParmTable.ReceiveUpdateQty != InventTransferReceiveUpdateQty::DocumentReturn_RU)
            {
                isCWItem = PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId);

                qtyUpdate = inventTransferLine.calcReceiveQty(inventTransferParmTable.ReceiveUpdateQty, _voucherShipmentId, _inventTransferTable);

                if (isCWItem)
                {
                    cwQtyUpdate = inventTransferLine.pdsCWCalcReceiveQty(
                                    inventTransferParmTable.ReceiveUpdateQty,
                                    _voucherShipmentId,
                                    _inventTransferTable);
                }
                else
                {
                    cwQtyUpdate = 0;
                }
            }
            else
            {
                _lineNum++;

                inventTransferParmLine.clear();
                this.initInventTransferParmLineFromInventTransferParmTable(inventTransferParmLine);
                inventTransferParmLine.initFromInventTransferLine(inventTransferLine);
            }
            // <GEERU>
            if (!countryRegion_RU
                    || inventTransferParmTable.ReceiveUpdateQty == InventTransferReceiveUpdateQty::Shipment)
            {
                // </GEERU>

                // inventTransferJourLine.inventDimId is the shipment dimensions - the receive dimensions must be found
                inventDimTo = InventDim::find(inventTransferJourLine.InventDimId);
                inventDimTo.mergeUsedDim(InventDimGroupSetup::newItemId(inventTransferLine.ItemId), inventTransferLine.inventDimReceive(_inventTransferTable));
                inventDimParm.initDimTransferReceipt(inventDimTo);

                if (!InventTransferParmLineMatchWithInventTransFlight::instance().isEnabled())
                {
                    select forceplaceholders InventDimId from inventTrans
                            where inventTrans.InventTransOrigin == InventTransOriginTransferReceive::findInventTransOriginId(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum)
                            &&    inventTrans.StatusReceipt     >= StatusReceipt::Registered
                            &&    inventTrans.StatusIssue       == StatusIssue::None
                            #inventDimExistsJoin(inventTrans.inventDimId,inventDim, inventDimTo, inventDimParm);
                    if (inventTrans.InventDimId)
                    {
                        inventTransferParmLine.InventDimId = inventTrans.InventDimId;
                        this.initReceiveLineDefaultDimension_IN(_inventTransferTable, inventTransferParmLine);

                        inventTransferParmLine.InventTransId        = inventTransferLine.InventTransIdReceive;
                        inventTransferParmLine.InventTransIdTransit = inventTransferLine.InventTransIdTransitFrom;
                        // <GIN>
                        if (inventTransferLine.checkForUnitID_IN())
                        {
                            inventTransferParmLine.QtyReceiveNow        = inventTransferLine.convertToUnitIdForItem_IN(inventTransferParmLine.ItemId, inventTransferParmLine.InventDimId, inventTransferJourLine.QtyShipped);
                        }
                        else
                        {
                            // </GIN>
                            inventTransferParmLine.QtyReceiveNow        = inventTransferJourLine.QtyShipped;
                            // <GIN>
                        }
                        // </GIN>
                        inventTransferParmLine.PdsCWQtyReceiveNow = inventTransferJourLine.PdsCWQtyShipped;
                        inventTransferParmLine.LineNum              = _lineNum;
                        inventTransferParmLine.insert();
                    }
                }
                else
                {
                    while select forceplaceholders Qty, PdsCWQty, InventDimId from inventTrans
                        order by inventTrans.StatusReceipt
                        where inventTrans.InventTransOrigin == InventTransOriginTransferReceive::findInventTransOriginId(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum)
                            && inventTrans.StatusReceipt >= StatusReceipt::Registered
                            && inventTrans.StatusIssue == StatusIssue::None
                        #inventDimExistsJoin(inventTrans.inventDimId, inventDim, inventDimTo, inventDimParm)
                    {
                        _lineNum++;

                        inventTransferParmLine.clear();
                        this.initInventTransferParmLineFromInventTransferParmTable(inventTransferParmLine);
                        inventTransferParmLine.initFromInventTransferLine(inventTransferLine);
                        this.initInventTransferParmLineFromInventTrans(inventTransferParmLine, inventTrans);

                        inventTransferParmLine.InventDimId = inventTrans.InventDimId;
                        this.initReceiveLineDefaultDimension_IN(_inventTransferTable, inventTransferParmLine);

                        inventTransferParmLine.InventTransId        = inventTransferLine.InventTransIdReceive;
                        inventTransferParmLine.InventTransIdTransit = inventTransferLine.InventTransIdTransitFrom;

                        // <GIN>
                        if (inventTransferLine.checkForUnitID_IN())
                        {
                            inventTransferParmLine.QtyReceiveNow = inventTransferLine.convertToUnitIdForItem_IN(inventTransferParmLine.ItemId, inventTransferParmLine.InventDimId, abs(qtyUpdate) > inventTrans.Qty ? inventTrans.Qty * sign(qtyUpdate): qtyUpdate);
                        }
                        else
                        {
                            // </GIN>
                            inventTransferParmLine.QtyReceiveNow = qtyUpdate > inventTrans.Qty ? inventTrans.Qty : qtyUpdate;
                            // <GIN>
                        }
                        // </GIN>
                        if (isCWItem)
                        {
                            inventTransferParmLine.PdsCWQtyReceiveNow = cwQtyUpdate > inventTrans.PdsCWQty ? inventTrans.PdsCWQty : cwQtyUpdate;
                        }

                        inventTransferParmLine.LineNum = _lineNum;
                        inventTransferParmLine.insert();

                        qtyUpdate -= inventTransferParmLine.QtyReceiveNow;

                        if (isCWItem)
                        {
                            cwQtyUpdate -= inventTransferParmLine.PdsCWQtyReceiveNow;
                        }

                        if (qtyUpdate <= 0 || (isCWItem && cwQtyUpdate <= 0))
                        {
                            break;
                        }
                    }
                }

                // <GEERU>
            }
            else if (countryRegion_RU
                    && inventTransferParmTable.ReceiveUpdateQty == InventTransferReceiveUpdateQty::DocumentReturn_RU)
            {
                inventTransferParmLine.InventDimId          = inventTransferJourLine.InventDimId;

                inventTransferParmLine.InventTransId        = inventTransferLine.InventTransIdReceive;
                inventTransferParmLine.InventTransIdTransit = inventTransferLine.InventTransIdTransitFrom;
                inventTransferParmLine.QtyReceiveNow        = -inventTransferJourLine.QtyReceived;
                inventTransferParmLine.QtyScrapNow          = -inventTransferJourLine.QtyScrapped;
                inventTransferParmLine.LineNum              = _lineNum;

                inventTransferParmLine.insert();
            }
            // </GEERU>
        }
        return _lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipLineWithoutExplodeLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>InventTransferParmLine</c> table record that are ready to be shipped.
    /// </summary>
    /// <param name = "_inventTransferTable">The <c>InventTransferTable</c> table record related to the line for which to create the <c>InventTransferParmLine</c> table record.</param>
    /// <param name = "_inventTransferLine">The <c>InventTransferLine</c> table record related to the line for which to create the <c>InventTransferParmLine</c> table record.</param>
    /// <param name = "_lineNumber">The line number for which to create the <c>InventTransferParmLine</c> record.</param>
    /// <param name = "_quantityUpdate">The quantity for which to create the <c>InventTransferParmLine</c> record.</param>
    /// <param name = "_cwQuantityUpdate">The catch weight quantity for which to create the <c>InventTransferParmLine</c> record.</param>
    /// <returns>The created <c>InventTransferParmLine</c> table record.</returns>
    public InventTransferParmLine createShipLineWithoutExplodeLines(
        InventTransferTable     _inventTransferTable,
        InventTransferLine      _inventTransferLine,
        LineNum                 _lineNumber,
        InventQty               _quantityUpdate,
        PdsCWInventQty          _cwQuantityUpdate)
    {
        if (countryRegionInstanceDataAreaId != curext())
        {
            throw error(strFmt("@SCM:InventTransferCreateParmLines_InvalidCompany", funcName(), countryRegionInstanceDataAreaId, curext()));
        }

        InventTransferParmLine inventTransferParmLine;

        this.initInventTransferParmLineFromInventTransferParmTable(inventTransferParmLine);
        inventTransferParmLine.initFromInventTransferLine(_inventTransferLine);
        this.setInventDimIdFromInventLocation(inventTransferParmLine, _inventTransferTable.InventLocationIdFrom);
        // <GEERU>
        if (_inventTransferLine.inventDim().InventProfileId_RU)
        {
            InventDim inventDim = _inventTransferLine.inventDim();
            inventDim.InventProfileId_RU = _inventTransferLine.inventDim().InventProfileId_RU;
            inventDim = InventDim::findOrCreate(inventDim);
            inventTransferParmLine.InventDimId = inventDim.InventDimId;
        }
        // </GEERU>
        if (_inventTransferTable.isStockTransfer_IN())
        {
            InventDim::find(inventTransferParmLine.InventDimId).modifiedInventSiteFromParent(inventTransferParmLine);
        }
        inventTransferParmLine.InventTransId        = _inventTransferLine.InventTransId;
        inventTransferParmLine.InventTransIdTransit = _inventTransferLine.InventTransIdTransitTo;
        inventTransferParmLine.QtyShipNow           = _quantityUpdate;
        inventTransferParmLine.PdsCWQtyShipNow      = _cwQuantityUpdate;
        inventTransferParmLine.LineNum              = _lineNumber;
        inventTransferParmLine.insert();

        // <GIN>
        if (countryRegion_IN && _inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer)
        {
            InventTransferLine_IN inventTransferLineIN = _inventTransferLine.inventTransferLine_IN();
            InventTransferParmLine_IN inventTransferParmLineIN = inventTransferParmLine.inventTransferParmLine_IN();
            if (_inventTransferLine.QtyTransfer != 0)
            {
                inventTransferParmLineIN.AssessableValue = inventTransferLineIN.AssessableValueTransactionCurrency * (inventTransferParmLine.QtyShipNow/_inventTransferLine.QtyTransfer);
            }
            inventTransferParmLine.packInventTransferParmLine_IN(inventTransferParmLineIN);
            inventTransferParmLine.SysExtensionSerializerMap::postUpdate();
        }
        // </GIN>
        // <GIN>
        if (TaxIntegrationUtils::isFormTrackingEnabled_IN())
        {
            this.postCreateShipLine_IN(inventTransferParmLine, _inventTransferLine);
        }
        // </GIN>

        return inventTransferParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCreateShipLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for getting <c>InventTransferLine</c> records that are ready to be shipped for a given <c>InventTransferTable</c> record.
    /// </summary>
    /// <param name = "_inventTransferTable">The <c>InventTransferTable</c> to get the transfer lines for.</param>
    /// <returns>The query.</returns>
    public Query buildCreateShipLinesQuery(InventTransferTable _inventTransferTable)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsInventTransferLine = query.addDataSource(tableNum(InventTransferLine));
        qbdsInventTransferLine.addSortField(fieldNum(InventTransferLine,LineNum),SortOrder::Ascending);
        qbdsInventTransferLine.addRange(fieldNum(InventTransferLine, TransferId)).value(queryValue(_inventTransferTable.TransferId));

        str remainStatusRange;

        if ((countryRegion_RU && inventTransferParmTable.ShipUpdateQty == InventTransferShipUpdateQty::DocumentReturn_RU)
            || inventTransferParmTable.CanceledShipmentJournalRecId != 0 )
        {
            remainStatusRange = '';
        }
        else if (countryRegion_RU && inventTransferParmTable.ShipUpdateQty == InventTransferShipUpdateQty::ShipNow)
        {
            remainStatusRange = strfmt('((%1 = %2) || (%3 < 0))',
                                    fieldStr(InventTransferLine, RemainStatus),
                                    enum2int(InventTransferRemainStatus::Shipping),
                                    fieldStr(InventTransferLine, QtyShipNow));
        }
        else
        {
            remainStatusRange = queryValue(InventTransferRemainStatus::Shipping);
        }
        
        if (remainStatusRange)
        {
            qbdsInventTransferLine.addRange(fieldNum(InventTransferLine, RemainStatus)).value(remainStatusRange);
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>InventTransferParmLine</c> table records that are ready to be shipped.
    /// </summary>
    public void createShipLines()
    {
        if (countryRegionInstanceDataAreaId != curext())
        {
            throw error(strFmt("@SCM:InventTransferCreateParmLines_InvalidCompany", funcName(), countryRegionInstanceDataAreaId, curext()));
        }

        ttsbegin;

        InventTransferTable inventTransferTable = InventTransferTable::find(inventTransferParmTable.TransferId,true);
        if (! inventTransferTable.RecId)
        {
            throw error(strFmt(InventTransferTable::txtNotExist(),inventTransferParmTable.TransferId));
        }

        InventTransferParmLine  inventTransferParmLine;
        InventTransferLine      inventTransferLine;
        InventTrans             inventTrans;
        InventDim               inventDim;
        InventQty               qtyUpdate;
        LineNum                 lineNum;
        // <GEERU>
        InventTransferJourLine  inventTransferJourLine;
        // </GEERU>
        PdsCWInventQty          cwQtyUpdate;

        boolean isStockTransferShipmentCancelation_IN = countryRegion_IN
            && inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer
            && inventTransferParmTable.isShipmentCancellation()
            && StockTransferCancelationCreateParmLineFromJour_INFlight::instance().isEnabled();

        boolean isDocumentReturnExplodeLine_RU = countryRegion_RU
            && inventTransferParmTable.ShipUpdateQty == InventTransferShipUpdateQty::DocumentReturn_RU
            && inventTransferParmTable.ExplodeLines;

        // <GEERU>
        if (isStockTransferShipmentCancelation_IN || isDocumentReturnExplodeLine_RU)
        {
            this.createParmLineFromJournal();
        }
        else
        {
            // </GEERU>
            Query query = this.buildCreateShipLinesQuery(inventTransferTable);
            QueryRun queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                inventTransferLine = queryRun.get(tableNum(InventTransferLine));

                if (this.mustSkipInventTransferLine(inventTransferLine))
                {
                    if (inventTransferParmTable.isShipmentCancellation())
                    {
                        throw error(strFmt("@SCM:TransferOrderCancellationWHSLoadLineExistsException"));
                    }

                    continue;
                }

                boolean isTransferOrderShipmentCancellation = inventTransferParmTable.CanceledShipmentJournalRecId != 0;

                // <GEERU>
                if (countryRegion_RU || isTransferOrderShipmentCancellation)
                {
                    if (inventTransferParmTable.ShipUpdateQty == InventTransferShipUpdateQty::DocumentReturn_RU 
                        || isTransferOrderShipmentCancellation)
                    {
                        select firstonly inventTransferJourLine
                                where
                                    inventTransferJourLine.TransferId == inventTransferLine.TransferId              &&
                                    inventTransferJourLine.VoucherId  == inventTransferParmTable.VoucherShipmentId &&
                                    inventTransferJourLine.LineNum    == inventTransferLine.LineNum;

                        if (!inventTransferJourLine.RecId)
                                continue;
                    }

                    qtyUpdate = isTransferOrderShipmentCancellation ? 
                        inventTransferLine.calcCancelQty(inventTransferParmTable.ShipUpdateQty, inventTransferParmTable.VoucherShipmentId) :
                        inventTransferLine.calcShipQty(inventTransferParmTable.ShipUpdateQty, inventTransferParmTable.VoucherShipmentId);

                    if (PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId))
                    {
                        cwQtyUpdate = isTransferOrderShipmentCancellation ?
                            inventTransferLine.pdsCWCalcCancelQty(inventTransferParmTable.ShipUpdateQty, inventTransferParmTable.VoucherShipmentId) :
                            inventTransferLine.pdsCWCalcShipQty(inventTransferParmTable.ShipUpdateQty, inventTransferParmTable.VoucherShipmentId);
                    }
                    else
                    {
                        cwQtyUpdate = 0;
                    }                    
                }
                else
                {
                    // </GEERU>
                    qtyUpdate = inventTransferLine.calcShipQty(inventTransferParmTable.ShipUpdateQty);

                    if (PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId))
                    {
                        cwQtyUpdate = inventTransferLine.pdsCWCalcShipQty(inventTransferParmTable.ShipUpdateQty);
                    }
                    else
                    {
                        cwQtyUpdate = 0;
                    }
                    // <GEERU>
                }
                // </GEERU>

                // <GEERU>
                if (((countryRegion_RU || isTransferOrderShipmentCancellation)
                         && qtyUpdate < 0)
                        || qtyUpdate > 0)
                    // </GEERU>
                {
                    if (inventTransferParmTable.ExplodeLines)
                    {
                        while select forceplaceholders sum(Qty), sum(PdsCWQty)
                            from inventTrans
                                group by InventTransOrigin,StatusIssue,StatusReceipt
                                where inventTrans.InventTransOrigin == InventTransOriginTransferShip::findInventTransOriginId(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum)
                                &&    inventTrans.StatusReceipt     == StatusReceipt::None
                                // <GEERU>
                        &&  ((countryRegion_RU
                                      && ((qtyUpdate > 0
                                      &&   inventTrans.StatusIssue      >= StatusIssue::Picked)
                                      ||   (qtyUpdate < 0
                                      &&   inventTrans.StatusIssue      == StatusIssue::Sold
                                      &&   inventTrans.InvoiceReturned  == NoYes::No)))
                                      || (!countryRegion_RU
                                      && inventTrans.StatusIssue >= StatusIssue::Picked))
                                // </GEERU>
                        join TableId from inventDim
                                group by InventSerialId,InventBatchId,InventDimId
                                where inventDim.InventDimId         == inventTrans.InventDimId
                        {
                            lineNum++;

                            inventTransferParmLine.clear();
                            this.initInventTransferParmLineFromInventTransferParmTable(inventTransferParmLine);
                            inventTransferParmLine.initFromInventTransferLine(inventTransferLine);

                            inventTransferParmLine.InventDimId      = inventDim.InventDimId;

                            this.initInventTransferParmLineFromInventTrans(inventTransferParmLine, inventTrans);

                            inventTransferParmLine.InventTransId        = inventTransferLine.InventTransId;
                            inventTransferParmLine.InventTransIdTransit = inventTransferLine.InventTransIdTransitTo;
                            // <GEERU>
                            if (countryRegion_RU)
                            {
                                inventTransferParmLine.QtyShipNow           = abs(qtyUpdate) > -inventTrans.Qty ? -inventTrans.Qty * sign(qtyUpdate): qtyUpdate;
                            }
                            else
                            {
                                // </GEERU>
                                inventTransferParmLine.QtyShipNow           = qtyUpdate > -inventTrans.Qty ? -inventTrans.Qty : qtyUpdate;
                                // <GEERU>
                            }
                            // </GEERU>

                            inventTransferParmLine.PdsCWQtyShipNow =
                                    cwQtyUpdate > -inventTrans.PdsCWQty
                                        ? -inventTrans.PdsCWQty
                                        : cwQtyUpdate;

                            inventTransferParmLine.LineNum              = lineNum;

                            inventTransferParmLine.insert();

                            qtyUpdate -= inventTransferParmLine.QtyShipNow;

                            // <GEERU>
                            if (qtyUpdate == 0
                                    || (!countryRegion_RU
                                        && qtyUpdate < 0)
                                    || (PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId) && (cwQtyUpdate <= 0)))
                                // </GEERU>
                            {
                                break;
                            }
                        }
                    }
                    else
                    {
                        lineNum++;

                        inventTransferParmLine = this.createShipLineWithoutExplodeLines(inventTransferTable, inventTransferLine, lineNum, qtyUpdate, cwQtyUpdate);
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineFromJournal</Name>
				<Source><![CDATA[
    private void createParmLineFromJournal()
    {
        InventTransferJourLine inventTransferJourLine;
        InventTransferParmLine inventTransferParmLine;
        int lineNum;

        if (cwItemCancelShipmentFlightEnabled)
        {
            while select TransferId, LineNum, InventDimId, QtyShipped, PdsCWQtyShipped from inventTransferJourLine
                where inventTransferJourLine.TransferId == inventTransferParmTable.TransferId
                    && inventTransferJourLine.VoucherId == inventTransferParmTable.VoucherShipmentId
            {
                InventTransferLine inventTransferLine = InventTransferLine::find(inventTransferJourLine.TransferId,inventTransferJourLine.LineNum);

                if (this.mustSkipInventTransferLine(InventTransferLine))
                {
                    continue;
                }

                lineNum++;

                inventTransferParmLine.clear();
                this.initInventTransferParmLineFromInventTransferParmTable(inventTransferParmLine);
                inventTransferParmLine.initFromInventTransferLine(inventTransferLine);

                inventTransferParmLine.InventDimId          = inventTransferJourLine.InventDimId;

                inventTransferParmLine.InventTransId        = inventTransferLine.InventTransId;
                inventTransferParmLine.InventTransIdTransit = inventTransferLine.InventTransIdTransitTo;
                inventTransferParmLine.QtyShipNow           = - inventTransferJourLine.QtyShipped;
                inventTransferParmLine.PdsCWQtyShipNow      = - inventTransferJourLine.PdsCWQtyShipped;
                inventTransferParmLine.LineNum              = lineNum;

                inventTransferParmLine.insert();
            }
        }
        else
        {
            while select TransferId, LineNum, InventDimId, QtyShipped from inventTransferJourLine
                where inventTransferJourLine.TransferId == inventTransferParmTable.TransferId
                    && inventTransferJourLine.VoucherId == inventTransferParmTable.VoucherShipmentId
            {
                InventTransferLine inventTransferLine = InventTransferLine::find(inventTransferJourLine.TransferId,inventTransferJourLine.LineNum);

                if (this.mustSkipInventTransferLine(InventTransferLine))
                {
                    continue;
                }

                lineNum++;

                inventTransferParmLine.clear();
                this.initInventTransferParmLineFromInventTransferParmTable(inventTransferParmLine);
                inventTransferParmLine.initFromInventTransferLine(inventTransferLine);

                inventTransferParmLine.InventDimId          = inventTransferJourLine.InventDimId;

                inventTransferParmLine.InventTransId        = inventTransferLine.InventTransId;
                inventTransferParmLine.InventTransIdTransit = inventTransferLine.InventTransIdTransitTo;
                inventTransferParmLine.QtyShipNow           = - inventTransferJourLine.QtyShipped;
                inventTransferParmLine.LineNum              = lineNum;

                inventTransferParmLine.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    protected void initFromParameters(
        InventTransferParmTable _inventTransferParmTable)
    {
        inventTransferParmTable = _inventTransferParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        #ISOCountryRegionCodes
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || BrazilParameters::isEnabled();
        countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        countryRegion_BR = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]);

        countryRegionInstanceDataAreaId = curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventTransferParmLineCreate construct()
    {
        return new InventTransferParmLineCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTransferParmLineCreate</c> class.
    /// </summary>
    /// <param name = "_inventTransferParmTable">Current <c>InventTransferParmTable</c> record that will be used to retrieve all the <c>InventTransferLine</c> records.</param>
    /// <returns>An instance of the <c>InventTransferParmLineCreate</c> class.</returns>
    public static InventTransferParmLineCreate newFromParameters(
        InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferParmLineCreate inventTransferParmLineCreate = InventTransferParmLineCreate::construct();

        inventTransferParmLineCreate.initFromParameters(
            _inventTransferParmTable);

        return inventTransferParmLineCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferLineToProcess</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTransferLine parmInventTransferLineToProcess(InventTransferLine _inventTransferLineToProcess = inventTransferLineToProcess)
    {
        inventTransferLineToProcess = _inventTransferLineToProcess;

        return inventTransferLineToProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReceiveLineDefaultDimension_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized Indian specific Default dimension on Inventory transfer parm line.
    /// </summary>
    /// <param name = "_inventTransferTable">Inventory transfer table cursor.</param>
    /// <param name = "_inventTransferParmLine">Inventory transfer parm line to update Default dimension.</param>
    protected void initReceiveLineDefaultDimension_IN(InventTransferTable _inventTransferTable, InventTransferParmLine _inventTransferParmLine)
    {
        if (!_inventTransferTable.isStockTransfer_IN())
        {
            return;
        }

        InventDim::find(_inventTransferParmLine.InventDimId).modifiedInventSiteFromParent(_inventTransferParmLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>