<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgConsistencyCheck_pay</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgConsistencyCheck_pay</c> class performs a consistency check for tables associated to the
///    <c>JmgPayroll</c> configuration key in Shop Floor Control module.
/// </summary>
public class JmgConsistencyCheck_pay extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the configuration key, which should be enabled in order for the consistency check to be
    ///    run, which is JmgPayroll
    /// </summary>
    /// <returns>
    ///    ConfigurationKeyId : Id of the configuration key
    /// </returns>
    configurationKeyId configurationKey()
    {
        return configurationkeynum(JmgPayroll);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an integer that represents the order in which the consistency check should be executed.
    /// </summary>
    /// <returns>
    ///    The order of execution.
    /// </returns>
    Integer executionOrder()
    {
        return 30;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a consistency check for the <c>JmgPayAgreementTable</c> and <c>JmgPayAgreementLine</c>
    ///    tables.
    /// </summary>
    public void run()
    {
        // JmgPayAddTable
        this.kernelCheckTable(tablenum(JmgPayAddTable));

        // JmgPayAddTrans
        this.kernelCheckTable(tablenum(JmgPayAddTrans));

        // JmgPayAdjustCostType
        this.kernelCheckTable(tablenum(JmgPayAdjustCostType));

        // JmgPayAdjustSetup
        this.kernelCheckTable(tablenum(JmgPayAdjustSetup));

        // JmgPayAgreementLine
        this.kernelCheckTable(tablenum(JmgPayAgreementLine));

        // JmgPayAgreementOverride
        this.kernelCheckTable(tablenum(JmgPayAgreementOverride));

        // JmgPayAgreementOverrideLine
        this.kernelCheckTable(tablenum(JmgPayAgreementOverrideLine));

        // JmgPayAgreementTable
        this.kernelCheckTable(tablenum(JmgPayAgreementTable));

        // JmgPayCountSum
        this.kernelCheckTable(tablenum(JmgPayCountSum));

        // JmgPayCountTable
        this.kernelCheckTable(tablenum(JmgPayCountTable));

        // JmgPayEmployee
        this.kernelCheckTable(tablenum(JmgPayEmployee));

        // JmgPayEvents
        this.kernelCheckTable(tablenum(JmgPayEvents));

        // JmgPayRate
        this.kernelCheckTable(tablenum(JmgPayRate));

        // JmgPayStatConfig
        this.kernelCheckTable(tablenum(JmgPayStatConfig));

        // JmgPayStatGroup
        this.kernelCheckTable(tablenum(JmgPayStatGroup));

        // JmgPayStatTrans
        this.kernelCheckTable(tablenum(JmgPayStatTrans));

        // JmgPayTable
        this.kernelCheckTable(tablenum(JmgPayTable));

        // JmgPieceRateEmpl
        this.kernelCheckTable(tablenum(JmgPieceRateEmpl));

        // JmgPieceRateGroup
        this.kernelCheckTable(tablenum(JmgPieceRateGroup));

        // JmgPieceRateLine
        this.kernelCheckTable(tablenum(JmgPieceRateLine));

        // JmgPieceRateTable
        this.kernelCheckTable(tablenum(JmgPieceRateTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the class ID of the parent class in the consistency check hierarchy, which is
    ///    <c>JmgConsistencyCheck</c>
    /// </summary>
    /// <returns>
    ///    The class ID of the parent class in the consistency check hierarchy.
    /// </returns>
    classId treeParentClassId()
    {
        return classnum(JmgConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS2694";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the help text associated with this consistency check.
    /// </summary>
    /// <returns>
    ///    The help text that is associated with the consistency check.
    /// </returns>
    static HelpTxt helpText()
    {
        return "@SYS40094";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        SysConsistencyCheckJob      consistencyCheckJob;

        consistencyCheckJob = new SysConsistencyCheckJob(classnum(JmgConsistencyCheck));

        if (! consistencyCheckJob.prompt())
        {
            return;
        }
        consistencyCheckJob.runOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>