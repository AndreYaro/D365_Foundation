<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanFindRulesEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanFindRulesEvent</c> class provides methods to find the event kanban rules for a set of
///    provided criteria.
/// </summary>
public class KanbanFindRulesEvent extends KanbanFindRules
{
    KanbanEventType kanbanEventType;
    boolean         includeManualEvent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>finalizeResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the map containing the search results by leaving only the first applicable rule.
    /// </summary>
    protected void finalizeResult()
    {
        KanbanRule              kanbanRule;
        List                    list;
        container               mapKey;
        boolean                 applicableRuleFound = false;

        if (   listResult.elements() == 0
            && mapResult.elements()  != 0)
        {
            // Find first applicable event kanban rule
            MapEnumerator me = mapResult.getEnumerator();
            if (me.moveNext())
            {
                mapKey = me.currentKey();
                list   = me.currentValue();

                if (   list
                    && list.elements())
                {
                    ListEnumerator le = list.getEnumerator();

                    if (le.moveNext())
                    {
                        kanbanRule = le.current();

                        if (this.isApplicableEventRule(kanbanRule))
                        {
                            applicableRuleFound = true;
                        }
                    }
                }
            }

            // Empty the search results
            mapResult = new Map(Types::Container,Types::Class);

            // Add the result found (if any)
            if (applicableRuleFound)
            {
                list = new List(Types::Record);
                list.addEnd(kanbanRule);

                mapResult.insert(mapKey,list);
            }
        }

        // Let the parent process the result
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableEventRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a kanban rule is an event kanban rule that meets the search criteria.
    /// </summary>
    /// <param name="_kanbanRule">
    /// A <c>KanbanRule</c> record buffer.
    /// </param>
    /// <returns>
    /// true if the rule is valid as search result for the current search criteria; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The minimum event quantity has already been applied and there is no need to verify it.
    /// </remarks>
    private boolean isApplicableEventRule(KanbanRule _kanbanRule)
    {
        boolean         isApplicableEventRule = false;

        if (_kanbanRule.ReplenishmentStrategy == LeanReplenishmentStrategy::Event)
        {
            // Manual rules were accepted during the search and discarded now
            if (includeManualEvent)
            {
                isApplicableEventRule = true;
            }
            else
            {
                KanbanRuleEvent kanbanRuleEvent = KanbanRuleEvent::findKanbanRule(_kanbanRule.RecId);

                isApplicableEventRule = this.isApplicableEventRuleForKanbanEventType(kanbanEventType, _kanbanRule, kanbanRuleEvent);
            }
        }

        return isApplicableEventRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableEventRuleForKanbanEventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a kanban rule is an event kanban rule depending on a kanban event type.
    /// </summary>
    /// <param name="_kanbanEventType">
    /// A kanban event type.
    /// </param>
    /// <param name="_kanbanRule">
    /// A <c>KanbanRule</c> record buffer.
    /// </param>
    /// <param name="_kanbanRuleEvent">
    /// A <c>KanbanRuleEvent</c> record buffer.
    /// </param>
    /// <returns>
    /// true if the rule is valid; otherwise, false.
    /// </returns>
    private boolean isApplicableEventRuleForKanbanEventType(
        KanbanEventType _kanbanEventType, 
        KanbanRule      _kanbanRule,
        KanbanRuleEvent _kanbanRuleEvent)
    {
        boolean isApplicableEventRule = false;

        switch (_kanbanEventType)
        {
            case KanbanEventType::SalesLine:
                isApplicableEventRule = _kanbanRuleEvent.SalesLineEvent != KanbanSalesLineEventType::Manual;
                break;
            case KanbanEventType::KanbanJob:
            case KanbanEventType::KanbanJobPickingList:
                isApplicableEventRule = _kanbanRuleEvent.KanbanLineEvent != KanbanLineEventType::Manual;
                break;
            case KanbanEventType::ProdBOM:
            case KanbanEventType::Replenishment:
                isApplicableEventRule = true;
                break;
            default:
                isApplicableEventRule = this.isApplicableEventRuleForKanbanEventTypeExtension(_kanbanEventType, _kanbanRule, _kanbanRuleEvent);
        }

        return isApplicableEventRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableEventRuleForKanbanEventTypeExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a kanban rule is an event kanban rule depending on an extension of the <c>KanbanEventType</c> enum.
    /// </summary>
    /// <param name="_kanbanEventType">
    /// A kanban event type.
    /// </param>
    /// <param name="_kanbanRule">
    /// A <c>KanbanRule</c> record buffer.
    /// </param>
    /// <param name="_kanbanRuleEvent">
    /// A <c>KanbanRuleEvent</c> record buffer.
    /// </param>
    /// <returns>
    /// true if the rule is valid; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    final protected boolean isApplicableEventRuleForKanbanEventTypeExtension(
        KanbanEventType _kanbanEventType, 
        KanbanRule      _kanbanRule,
        KanbanRuleEvent _kanbanRuleEvent)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a given <c>KanbanRule</c> record must be added to the result list.
    /// </summary>
    /// <param name="_kanbanRule">
    /// The <c>KanbanRule</c> record to test.
    /// </param>
    /// <returns>
    /// true if the record must be added; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method returns false, if the specified kanban event is not enabled. Minimum event quantity is
    /// verified in the parent method.
    /// </remarks>
    protected boolean mustAdd(KanbanRule _kanbanRule)
    {
        boolean         result;

        result = super(_kanbanRule);

        if (result)
        {
            if (kanbanEventType != KanbanEventType::None)
            {
                KanbanRuleEvent kanbanRuleEvent = KanbanRuleEvent::findKanbanRule(_kanbanRule.RecId);
                result = kanbanRuleEvent.RecId != 0;

                if (result)
                {
                    result = this.mustAddRuleForKanbanEventType(kanbanEventType, _kanbanRule, kanbanRuleEvent);
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddRuleForKanbanEventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a kanban rule must be added to the result list given its association with a <c>KanbanRuleEvent</c> record 
    /// and depending on a kanban event type.
    /// </summary>
    /// <param name="_kanbanEventType">
    /// A kanban event type.
    /// </param>
    /// <param name="_kanbanRule">
    /// A <c>KanbanRule</c> record to test.
    /// </param>
    /// <param name="_kanbanRuleEvent">
    /// A <c>KanbanRuleEvent</c> record to test.
    /// </param>
    /// <returns>
    /// true if a rule associated with the rule event must be added; otherwise, false.
    /// </returns>
    private boolean mustAddRuleForKanbanEventType(
        KanbanEventType _kanbanEventType, 
        KanbanRule      _kanbanRule,
        KanbanRuleEvent _kanbanRuleEvent)
    {
        boolean result = false;

        switch (_kanbanEventType)
        {
            case KanbanEventType::SalesLine:
                result = _kanbanRuleEvent.SalesLineEvent != KanbanSalesLineEventType::NotActive;
                break;
            case KanbanEventType::ProdBOM:
                result = _kanbanRuleEvent.ProdBOMLineEvent != KanbanProdBOMLineEventType::NotActive;
                break;
            case KanbanEventType::KanbanJob:
            case KanbanEventType::KanbanJobPickingList:
                result = _kanbanRuleEvent.KanbanLineEvent != KanbanLineEventType::NotActive;
                break;
            case KanbanEventType::Replenishment:
                result = _kanbanRuleEvent.StockReplenishmentEvent != KanbanStockReplenishmentEventType::NotActive;
                break;
            default:
                result = this.mustAddRuleForKanbanEventTypeExtension(_kanbanEventType, _kanbanRule, _kanbanRuleEvent);

        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddRuleForKanbanEventTypeExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a kanban rule must be added to the result list given its association with a <c>KanbanRuleEvent</c> record
    /// and depending on an extension of the <c>KanbanEventType</c> enum.
    /// </summary>
    /// <param name="_kanbanEventType">
    /// A kanban event type.
    /// </param>
    /// <param name="_kanbanRule">
    /// A <c>KanbanRule</c> record to test.
    /// </param>
    /// <param name="_kanbanRuleEvent">
    /// A <c>KanbanRuleEvent</c> record to test.
    /// </param>
    /// <returns>
    /// true if a rule associated with the rule event must be added; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    final protected boolean mustAddRuleForKanbanEventTypeExtension(
        KanbanEventType _kanbanEventType, 
        KanbanRule      _kanbanRule,
        KanbanRuleEvent _kanbanRuleEvent)
    {
        throw error(Error::wrongUseOfFunction(funcName()));    
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeManualEvent</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean parmIncludeManualEvent(boolean _includeManualEvent = includeManualEvent)
    {
        includeManualEvent = _includeManualEvent;
        return includeManualEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanEventType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public KanbanEventType parmKanbanEventType(KanbanEventType _kanbanEventType = kanbanEventType)
    {
        kanbanEventType = _kanbanEventType;
        return kanbanEventType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleSearchId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a rule search identifier based on the current rule search criteria.
    /// </summary>
    /// <returns>
    ///    A container with the identifier.
    /// </returns>
    protected container ruleSearchId()
    {
        container ruleSearchId = super();

        return ruleSearchId + [enum2int(includeManualEvent), enum2int(kanbanEventType)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanFindRulesEvent construct()
    {
        return new KanbanFindRulesEvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>KanbanFindRulesEvent</c> instance with the provided attributes.
    /// </summary>
    /// <param name="_itemId">
    ///    The <c>ItemId</c> value that the <c>findKanbanRules</c> operation is limited to.
    /// </param>
    /// <param name="_inventQty">
    ///    The <c>InventQty</c> value that limits the <c>findKanbanRules</c> operation expressed in the item inventory unit.
    /// </param>
    /// <param name="_kanbanEventType">
    ///    The <c>KanbanEventType</c> enum value that limits the <c>findKanbanRules</c> operation.
    /// </param>
    /// <param name="_includeManualEvent">
    ///    A Boolean value that limits the <c>findKanbanRules</c> operation.
    /// </param>
    /// <param name="_includeReceiveSemiFinished">
    ///    A Boolean value that limits the <c>findKanbanRules</c> operation.
    /// </param>
    /// <param name="_includeReceiveFinished">
    ///    A Boolean value that limits the <c>findKanbanRules</c> operation.
    /// </param>
    /// <param name="_dateTime">
    ///    A <c>TransDateTime</c> temporal value that limits the <c>findKanbanRules</c> operation.
    /// </param>
    /// <param name="_inventDimId">
    ///    An <c>InventDimId</c> value that limits the <c>findKanbanRules</c> operation.
    /// </param>
    /// <param name="_inventDimParm">
    ///    A <c>InventDimParm</c> table buffer that defines which inventory dimensions should be used in the search.
    /// </param>
    /// <param name="_leanProductionFlowReferenceRecId">
    ///    A record ID for the <c>LeanProductionFlowReference</c> table that limits the <c>findKanbanRules</c> operation.
    /// </param>
    /// <param name="_kanbanRuleRecId">
    ///    A record ID for the <c>KanbanRule</c> table that limits the <c>findKanbanRules</c> operation.
    /// </param>
    /// <param name="_excludeKanbanRuleRecId">
    ///    A record ID for the <c>KanbanRule</c> table that limits the <c>findKanbanRules</c> operation.
    /// </param>
    /// <param name="_lastPlanActivityRecId">
    ///    A record ID for the <c>PlanActivity</c> table that limits the <c>findKanbanRules</c> operation.
    /// </param>
    /// <param name="_lastPlanActivityDownstreamRecId">
    ///    A record ID for the <c>PlanActivity</c> table that limits the <c>findKanbanRules</c> operation.
    /// </param>
    /// <returns>
    ///    A <c>KanbanFindRulesEvent</c> class instance.
    /// </returns>
    public static KanbanFindRulesEvent newStandard(
        ItemId               _itemId,
        InventQty            _inventQty,
        KanbanEventType      _kanbanEventType,
        boolean              _includeManualEvent,
        boolean              _includeReceiveSemiFinished       = false,
        boolean              _includeReceiveFinished           = true,
        TransDateTime        _dateTime                         = DateTimeUtil::getSystemDateTime(),
        InventDimId          _inventDimId                      = '',
        InventDimParm        _inventDimParm                    = KanbanFindRules::defaultInventDimParm(),
        RefRecId             _leanProductionFlowReferenceRecId = 0,
        KanbanRuleRefRecId   _kanbanRuleRecId                  = 0,
        KanbanRuleRefRecId   _excludeKanbanRuleRecId           = 0,
        PlanActivityRefRecId _lastPlanActivityRecId            = 0,
        PlanActivityRefRecId _lastPlanActivityDownstreamRecId  = 0)
    {
        KanbanFindRulesEvent    kanbanFindRulesEvent = KanbanFindRulesEvent::construct();

        if (_kanbanEventType == KanbanEventType::None)      // Search without event type is not supported
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        kanbanFindRulesEvent.parmItemId(_itemId);
        kanbanFindRulesEvent.parmMinimumInventQty(_inventQty);
        kanbanFindRulesEvent.parmInventDimId(_inventDimId);
        kanbanFindRulesEvent.parmInventDimParm(_inventDimParm);
        kanbanFindRulesEvent.parmDateTimeFrom(_dateTime);
        kanbanFindRulesEvent.parmDateTimeTo(_dateTime);
        kanbanFindRulesEvent.parmFirstRuleOnly(true);       // Multiple rules retrieval is not supported by this class
        kanbanFindRulesEvent.parmIncludeManufacturing(true);
        kanbanFindRulesEvent.parmIncludeWithdrawal(true);
        kanbanFindRulesEvent.parmIncludePickupSemiFinished(true);
        kanbanFindRulesEvent.parmIncludePickupFinished(true);
        kanbanFindRulesEvent.parmIncludeReceiveSemiFinished(_includeReceiveSemiFinished);
        kanbanFindRulesEvent.parmIncludeReceiveFinished(_includeReceiveFinished);
        kanbanFindRulesEvent.parmIncludeOnHandUpdateReceipt(true);
        kanbanFindRulesEvent.parmIncludeNotOnHandUpdateReceipt(true);
        kanbanFindRulesEvent.parmReplenishmentStrategy(LeanReplenishmentStrategy::Event);
        kanbanFindRulesEvent.parmIncludeManualEvent(_includeManualEvent);
        kanbanFindRulesEvent.parmKanbanEventType(_kanbanEventType);
        kanbanFindRulesEvent.parmLeanProdFlowReferenceRecId(_leanProductionFlowReferenceRecId);
        kanbanFindRulesEvent.parmKanbanRuleRecId(_kanbanRuleRecId);
        kanbanFindRulesEvent.parmExcludeKanbanRuleRecId(_excludeKanbanRuleRecId);
        kanbanFindRulesEvent.parmLastPlanActivityRecId(_lastPlanActivityRecId);
        kanbanFindRulesEvent.parmLastPlanActivityDownstreamRecId(_lastPlanActivityDownstreamRecId);

        return kanbanFindRulesEvent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
