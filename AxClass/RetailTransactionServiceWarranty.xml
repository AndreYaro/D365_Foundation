<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceWarranty</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;

/// <summary>
/// The <c>RetailTransactionServiceWarranty</c> provides warranty transaction info for Retail transaction service.
/// </summary>
internal static class RetailTransactionServiceWarranty
{
    private const str textTrue = 'true';
    private const str textFalse = 'false';

    private const str dateTimeOffsetXmlNsKey = 'xmlns:a';
    private const str dateTimeOffsetXmlNsValue = 'http://schemas.datacontract.org/2004/07/System';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLatestWarrantyTransDetailsForSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get latest <c>RetailWarrantyTransactionSales</c> buffer for <c>RetailTransactionSalesTrans</c>.
    /// </summary>
    /// <param name = "_transactionSalesTrans">
    /// buffer of <c>RetailTransactionSalesTrans</c> table.
    /// </param>
    /// <return>
    /// <c>RetailWarrantyTransactionSalesTrans</c> buffer.
    /// </return>
    private static RetailWarrantyTransactionSales getLatestWarrantyTransDetailsForSalesTrans(
        RetailTransactionSalesTrans _transactionSalesTrans)
    {
        RetailWarrantyTransactionSales warrantyTrans;

        select firstonly warrantyTrans
            order by warrantyTrans.TransactionDateTime desc
            where warrantyTrans.WarrantyChannel == _transactionSalesTrans.Channel
            && warrantyTrans.WarrantyStore == _transactionSalesTrans.store
            && warrantyTrans.WarrantyTerminalId == _transactionSalesTrans.terminalId
            && warrantyTrans.WarrantyTransactionId == _transactionSalesTrans.transactionId
            && warrantyTrans.WarrantyLineNum == _transactionSalesTrans.lineNum;                
        
        return warrantyTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSalesTransWithWarrantyDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill XML node with details of the <c>RetailWarrantyTransactionSalesTrans</c> buffer.
    /// </summary>
    /// <param name = "_transactionSalesTrans">
    /// buffer of <c>RetailTransactionSalesTrans</c> table.
    /// </param>
    /// <param name = "_xmlDoc">
    /// The parent XML document to be used as a template for the new xml.
    /// </param>
    /// <param name = "_salesTransElement">
    /// RetailTransactionSalesTrans node in the XML.
    /// </param>
    /// <param name = "_predecessorForIsWarrantyLine">
    /// predecessor node in the XML for IsWarrantyLine node, since it needs to be in alphatical order.
    /// </param>
    internal final static void fillSalesTransWithWarrantyDetails(
        RetailTransactionSalesTrans _transactionSalesTrans,
        XmlDocument _xmlDoc,
        XmlElement _salesTransElement,
        XmlElement _predecessorForIsWarrantyLine)
    {
        RetailWarrantyTransactionSales warrantyTransSales;

        // This is called to fetch warranty transaction in cash and carry transaction.
        if (!WarrantyFeatureExposure::isWarrantyFeatureEnabled())
        {
            return;
        }

        str isWarrantyLine, warrantableChannel, warrantableStore, warrantableTerminalId,
            warrantableTransactionId, warrantableLineNum, warrantableSerialId;

        EcoResDistinctProduct distinctProduct =
            EcoResDistinctProduct::find(InventTable::find(_transactionSalesTrans.itemId).Product);

        // skip retrieval of warranty transaction for non-warranty product
        if (distinctProduct && distinctProduct.ServiceType == EcoResProductServiceType::Warranty)
        {
            isWarrantyLine = textTrue;
        }
        else
        {
            isWarrantyLine = textFalse;
        }

        warrantyTransSales = RetailTransactionServiceWarranty::getLatestWarrantyTransDetailsForSalesTrans(
            _transactionSalesTrans);

        if (warrantyTransSales && warrantyTransSales.Action == WarrantySalesAction::Add)
        {
            warrantableChannel = int642str(warrantyTransSales.WarrantableChannel);
            warrantableStore = warrantyTransSales.WarrantableStore;
            warrantableTerminalId = warrantyTransSales.WarrantableTerminalId;
            warrantableTransactionId = warrantyTransSales.WarrantableTransactionId;
            warrantableLineNum = num2str(warrantyTransSales.WarrantableLineNum, 5, 16, 1, 0);
            warrantableSerialId = warrantyTransSales.WarrantableSerialId;
        }
        else
        {
            warrantableChannel = '0';
            warrantableStore = '';
            warrantableTerminalId = '';
            warrantableTransactionId = '';
            warrantableLineNum = '0.000';
            warrantableSerialId = '';
        }

        XmlElement xmlEntry = _xmlDoc.createElement('IsWarrantyLine');
        xmlEntry.innerText(isWarrantyLine);
        _salesTransElement.insertAfter(xmlEntry, _predecessorForIsWarrantyLine);

        RetailTransactionServiceWarranty::addChildElement(
            _xmlDoc, _salesTransElement, 'WarrantableChannelId', warrantableChannel);
        RetailTransactionServiceWarranty::addChildElement(
            _xmlDoc, _salesTransElement, 'WarrantableLineNumber', warrantableLineNum);
        RetailTransactionServiceWarranty::addChildElement(
            _xmlDoc, _salesTransElement, 'WarrantableSerialNumber', warrantableSerialId);
        RetailTransactionServiceWarranty::addChildElement(
            _xmlDoc, _salesTransElement, 'WarrantableStore', warrantableStore);
        RetailTransactionServiceWarranty::addChildElement(
            _xmlDoc, _salesTransElement, 'WarrantableTerminalId', warrantableTerminalId);
        RetailTransactionServiceWarranty::addChildElement(
            _xmlDoc, _salesTransElement, 'WarrantableTransactionId', warrantableTransactionId);

        if (warrantyTransSales)
        {
            RetailTransactionServiceWarranty::appendRelatedWarrantyTransDetails(
                warrantyTransSales, isWarrantyLine == textTrue, _xmlDoc, _salesTransElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendRelatedWarrantyTransDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Append related list of related warranty transactions details
    /// </summary>
    /// <param name = "_warrantyTransSales">
    /// warranty transactions for which related warranty transactions will be appended
    /// </param>
    /// <param name = "_isWarrantyLine">
    /// whether this warranty transaction is for a warranty product
    /// </param>
    /// <param name = "_xmlDoc">
    /// The parent XML document to be used as a template for the new xml.
    /// </param>
    /// <param name = "_salesTransElement">
    /// RetailTransactionSalesTrans node in the XML.
    /// </param>
    private static void appendRelatedWarrantyTransDetails(
        RetailWarrantyTransactionSales _warrantyTransSales,
        boolean _isWarrantyLine,
        XmlDocument _xmlDoc,
        XmlElement _salesTransElement)
    {
        RetailWarrantyTransactionSales relatedWarrantyTransForSelect, relatedWarrantyTrans;
        XmlElement warrantyTransListElement, warrantyTransElement;
        warrantyTransListElement = _xmlDoc.createElement('WarrantyTransactions');
        _salesTransElement.appendChild(warrantyTransListElement);

        if(_isWarrantyLine)
        {
            // current line item is warranty, so all warranty transactions where current line item serves as warranty are included.
            // Sales of the waranty as standalone (i.e., for 3rd party sales of warrantble) do not generate warranty tranactions.
            while select WarrantableChannel, WarrantableStore, WarrantableTerminalId, WarrantableTransactionId, WarrantableLineNum,
                WarrantyChannel, WarrantyStore, WarrantyTerminalId, WarrantyTransactionId, WarrantyLineNum
                from relatedWarrantyTransForSelect
                group by WarrantableChannel, WarrantableStore, WarrantableTerminalId, WarrantableTransactionId, WarrantableLineNum,
                    WarrantyChannel, WarrantyStore, WarrantyTerminalId, WarrantyTransactionId, WarrantyLineNum
                where relatedWarrantyTransForSelect.WarrantyChannel == _warrantyTransSales.WarrantyChannel
                    && relatedWarrantyTransForSelect.WarrantyStore == _warrantyTransSales.WarrantyStore
                    && relatedWarrantyTransForSelect.WarrantyTerminalId == _warrantyTransSales.WarrantyTerminalId
                    && relatedWarrantyTransForSelect.WarrantyTransactionId == _warrantyTransSales.WarrantyTransactionId
                    && relatedWarrantyTransForSelect.WarrantyLineNum == _warrantyTransSales.WarrantyLineNum
            {
                RetailTransactionServiceWarranty::appendLatestWarrantyTransDetails(relatedWarrantyTransForSelect, _xmlDoc, warrantyTransListElement);
            }
        }
        else
        {
            // current line item is not warranty, so all warranty transactions where current line item serves as warrantable are included.
            // Sales of the warrantable without related warranty do not generate warranty tranactions.
            while select WarrantableChannel, WarrantableStore, WarrantableTerminalId, WarrantableTransactionId, WarrantableLineNum,
                WarrantyChannel, WarrantyStore, WarrantyTerminalId, WarrantyTransactionId, WarrantyLineNum
                from relatedWarrantyTransForSelect
                group by WarrantableChannel, WarrantableStore, WarrantableTerminalId, WarrantableTransactionId, WarrantableLineNum,
                    WarrantyChannel, WarrantyStore, WarrantyTerminalId, WarrantyTransactionId, WarrantyLineNum
                where relatedWarrantyTransForSelect.WarrantableChannel == _warrantyTransSales.WarrantableChannel
                    && relatedWarrantyTransForSelect.WarrantableStore == _warrantyTransSales.WarrantableStore
                    && relatedWarrantyTransForSelect.WarrantableTerminalId == _warrantyTransSales.WarrantableTerminalId
                    && relatedWarrantyTransForSelect.WarrantableTransactionId == _warrantyTransSales.WarrantableTransactionId
                    && relatedWarrantyTransForSelect.WarrantableLineNum == _warrantyTransSales.WarrantableLineNum
            {
                RetailTransactionServiceWarranty::appendLatestWarrantyTransDetails(relatedWarrantyTransForSelect, _xmlDoc, warrantyTransListElement);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendLatestWarrantyTransDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Append latest warranty trans details which matches the given selection criteria.
    /// </summary>
    /// <param name = "_warrantyTransSalesForSelect">warranty trans with selection criteria</param>
    /// <param name = "_xmlDoc">
    /// The parent XML document to be used as a template for the new xml.
    /// </param>
    /// <param name = "_parentElement">
    /// parent element to which the new element will be appended.
    /// </param>
    private static void appendLatestWarrantyTransDetails(
        RetailWarrantyTransactionSales _warrantyTransSalesForSelect,
        XmlDocument _xmlDoc,
        XmlElement _parentElement)
    {
        RetailWarrantyTransactionSales latestWarrantyTransSales;

        select firstonly latestWarrantyTransSales
            order by latestWarrantyTransSales.TransactionDateTime desc
            where latestWarrantyTransSales.WarrantableChannel == _warrantyTransSalesForSelect.WarrantableChannel
            && latestWarrantyTransSales.WarrantableStore == _warrantyTransSalesForSelect.WarrantableStore
            && latestWarrantyTransSales.WarrantableTerminalId == _warrantyTransSalesForSelect.WarrantableTerminalId
            && latestWarrantyTransSales.WarrantableTransactionId == _warrantyTransSalesForSelect.WarrantableTransactionId
            && latestWarrantyTransSales.WarrantableLineNum == _warrantyTransSalesForSelect.WarrantableLineNum
            && latestWarrantyTransSales.WarrantyChannel == _warrantyTransSalesForSelect.WarrantyChannel
            && latestWarrantyTransSales.WarrantyStore == _warrantyTransSalesForSelect.WarrantyStore
            && latestWarrantyTransSales.WarrantyTerminalId == _warrantyTransSalesForSelect.WarrantyTerminalId
            && latestWarrantyTransSales.WarrantyTransactionId == _warrantyTransSalesForSelect.WarrantyTransactionId
            && latestWarrantyTransSales.WarrantyLineNum == _warrantyTransSalesForSelect.WarrantyLineNum;

        if (latestWarrantyTransSales)
        {
            XmlElement warrantyTransElement = _xmlDoc.createElement('WarrantyTransaction');
            _parentElement.appendChild(warrantyTransElement);

            RetailTransactionServiceWarranty::addChildElement(
                _xmlDoc, warrantyTransElement, 'ActionValue',
                int2Str(enum2int(latestWarrantyTransSales.Action)));

            RetailTransactionServiceWarranty::addChildElement(
                _xmlDoc, warrantyTransElement, 'DataAreaId',
                curExt());
            
            XmlElement xmlEntry = _xmlDoc.createElement('TransactionDateTime');
            xmlEntry.setAttribute(dateTimeOffsetXmlNsKey, dateTimeOffsetXmlNsValue);
            xmlEntry.innerXml(RetailTransactionServiceUtilities::utcDateTimeToDateTimeStringWithOffset(
                latestWarrantyTransSales.TransactionDateTime)); // DateTimeOffset? SalesDate
            warrantyTransElement.appendChild(xmlEntry);

            RetailTransactionServiceWarranty::addChildElement(
                _xmlDoc, warrantyTransElement, 'WarrantableChannelId',
                int642Str(latestWarrantyTransSales.WarrantableChannel));
            RetailTransactionServiceWarranty::addChildElement(
                _xmlDoc, warrantyTransElement, 'WarrantableLineNumber',
                 num2str(latestWarrantyTransSales.WarrantableLineNum, 5, 16, 1, 0));
            RetailTransactionServiceWarranty::addChildElement(
                _xmlDoc, warrantyTransElement, 'WarrantableStore',
                latestWarrantyTransSales.WarrantableStore);
            RetailTransactionServiceWarranty::addChildElement(
                _xmlDoc, warrantyTransElement, 'WarrantableTerminalId',
                latestWarrantyTransSales.WarrantableTerminalId);
            RetailTransactionServiceWarranty::addChildElement(
                _xmlDoc, warrantyTransElement, 'WarrantableTransactionId',
                latestWarrantyTransSales.WarrantableTransactionId);
            RetailTransactionServiceWarranty::addChildElement(
                _xmlDoc, warrantyTransElement, 'WarrantyChannelId',
                int642Str(latestWarrantyTransSales.WarrantyChannel));
            RetailTransactionServiceWarranty::addChildElement(
                _xmlDoc, warrantyTransElement, 'WarrantyLineNumber',
                 num2str(latestWarrantyTransSales.WarrantyLineNum, 5, 16, 1, 0));
            RetailTransactionServiceWarranty::addChildElement(
                _xmlDoc, warrantyTransElement, 'WarrantyStore',
                latestWarrantyTransSales.WarrantyStore);
            RetailTransactionServiceWarranty::addChildElement(
                _xmlDoc, warrantyTransElement, 'WarrantyTerminalId',
                latestWarrantyTransSales.WarrantyTerminalId);
            RetailTransactionServiceWarranty::addChildElement(
                _xmlDoc, warrantyTransElement, 'WarrantyTransactionId',
                latestWarrantyTransSales.WarrantyTransactionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addChildElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add child element with give name and value to the current element.
    /// </summary>
    /// <param name = "_xmlDoc">
    /// The parent XML document to be used as a template for the new xml.
    /// </param>
    /// <param name = "_element">
    /// element which the child element will be appended to.
    /// </param>
    /// <param name = "_childElementName">
    /// child elemenet name
    /// </param>
    /// <param name = "_childElementValue">
    /// child element value
    /// </param>
    /// <return>
    /// the child element created.
    /// </return>
    private static XmlElement addChildElement(
        XmlDocument _xmlDoc,
        XmlElement _element,
        str _childElementName,
        str _childElementValue)
    {
        XmlElement xmlEntry = _xmlDoc.createElement(_childElementName);
        xmlEntry.innerText(_childElementValue);
        return _element.appendChild(xmlEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWarrantiedRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets Warrantied Relation of Customer Order (Quote) Lines.
    /// The method handles Warrantied Relation setup for different scenarios(by RTS Api):
    ///         1. Create Customer Order/Quote:
    ///            -- Create Warrantied Relations if there is warranty line with serial number.
    ///            -- Some standalone warranty without serial number will not create Warrantied Relation.
    ///
    ///         2. Update Customer Order
    ///            -- Void Customer Order lines: Clearn up the voided lines from the warrantied relation table,
    ///                   as the sales will also be cleared in createOrUpdateRetailOrderLines method.
    ///            -- Add new Warranty/Warrantied lines: Create Warrantied Relations.
    ///
    ///         3. Update Customer Quote:
    ///            -- Delete existing Warrantied Relatoins and setup Warrantied Relations based on new request.
    ///                  as the quotation lines will also be cleared in createOrUpdateRetailOrderLines method.
    ///
    ///         4. Return Customer Order:
    ///            -- Void the existing Warrantied Relation for returned line (Warranty or Warrnatied).
    ///
    ///         5. Return Customer Quote:
    ///            -- Not support.
    ///
    ///         6. Cancel Customer Orde:
    ///            -- Void Warrantied Relation by Sales Id.
    ///            -- Note: As warranty item is set as CustomerCarryOut by default and will be invoiced in CreateCustomerOrder step,
    ///                     then cancel is not allowed in POS after recall order.
    ///
    ///         7. Cancel Customer Quote:
    ///             -- Not support.
    ///
    ///         8. Convert Customer Quote to Order:
    ///            -- Delete the Warrantied Relation by Quotation id.
    ///            -- Set Warrantied Relation same as Create Customer Order.
    /// </summary>
    /// <param name = "_orderHeader">Retail order/quotation header information.</param>
    /// <param name = "_customerOrderInfo">The customer order information.</param>
    public static void setWarrantiedRelation(
                                    RetailOrderHeaderMap _orderHeader,
                                    CustomerOrderInfo _customerOrderInfo)
    {
        // This is called to set warranty information for customer order.
        if (!WarrantyFeatureExposure::isWarrantySalesViaCustomerOrderFeatureEnabled())
        {
            return;
        }

        boolean isSales = (_orderHeader.TableId != tableNum(SalesQuotationTable));
        WarrantiedOrderType orderType = isSales ?  WarrantiedRelationOrderType::SalesOrder : WarrantiedRelationOrderType::Quote;

        // In update scenario, there might be some voided lines, and need to clear the warrantied relation.
        WarrantiedRelationSalesLine::clearWarrantiedRelationByOrder(_orderHeader);

        ItemInfoCollection itemCollection = _customerOrderInfo.Items;
        int itemCount = itemCollection.get_Count();

        for (int i = 0; i < itemCount; i++)
        {
            ItemInfo itemInfo = itemCollection.get_Item(i) as ItemInfo;
            boolean isReturn = (itemInfo.Quantity < 0);
            boolean isWarranty = itemInfo.IsWarranty;

            WarrantySalesLineNumWarrantied warrantiedLineNumber = itemInfo.WarrantableLineNumber;

            // WarrantableOrderId is required by Add Warranty to Existing Transaction scenario, as the newly added warranty item will be in a new orders.
            // But for create new scenarios, order is not yet created before calling RTS create apis,then WarrantableOrderId is empty.
            // So By default we read the WarrantableOrderId, but if there is warrantable line number but warrantableOrderId is empty, then use current order id.
            // This stands true for both Async/Sync Customer Order/Quote.
            WarrantiedSalesId warrantiedSalesId = itemInfo.WarrantableOrderId;

            if (warrantiedLineNumber && !warrantiedSalesId)
            {
                warrantiedSalesId = _orderHeader.Id;
            }

            // Return scenaio:
            //    -- if it's the warranty line, then void by the warranty line.
            //    -- if it's the warrantied line, then void by the warrantied line.
            if (isReturn)
            {
                SalesLine originalSalesLine = SalesLine::findInventTransId(itemInfo.ReturnInventTransId);
                if (isWarranty)
                {
                    WarrantiedRelationSalesLine::voidWarrantiedRelationByWarrantySalesLine(originalSalesLine);
                }
                else
                {
                    WarrantiedRelationSalesLine::voidWarrantiedRelationByWarrantiedSalesLine(originalSalesLine);
                }
            }
            else if (isWarranty && warrantiedLineNumber != 0)
            {
                // Else: Only create relation when order line is Warranty and has warrantied line.
                // Get Warrantied line.
                WarrantySalesId warrantySalesId = _orderHeader.Id;
                WarrantySalesLineNumWarranty warrantyLineNumber = itemInfo.LineNumber;

                // Serial number is maintained by the InventTrackingRegisterTrans(linked from InventTransId), so here we don't set value to the column. 
                WarrantiedSerialNumber serialNumber = itemInfo.WarrantableSerialNumber;
                ItemInfo warrantyItem = itemInfo;
                ItemInfo warrantiedItem;
                boolean warrantiedItemFound = false;

                if (!isSales)
                {
                    SalesQuotationLine warrantyQuoteLine, warrantiedQuoteLine;
                    warrantiedQuoteLine = SalesQuotationLine::find(warrantiedSalesId, warrantiedLineNumber);
                    warrantyQuoteLine = SalesQuotationLine::find(warrantySalesId, warrantyLineNumber);
                    // Todo: Error handling if warranty line is not found.
                    // All Existing Lines will be removed for Quote, then the only operation is Add.
                    WarrantiedRelationSalesLine::addOrUpdateWarrantiedRelation(serialNumber, warrantiedQuoteLine, warrantyQuoteLine);
                }
                else
                {
                    SalesLine warrantySalesLine, warrantiedSalesLine;
                    warrantiedSalesLine = SalesLine::find(warrantiedSalesId, warrantiedLineNumber);
                    warrantySalesLine = SalesLine::find(warrantySalesId, warrantyLineNumber);
                    // Add or Update Warrantied Relation
                    // -- Add Relation: when warranty line is from CreateCustomerOrder or new warranty line of UpdateCustomerOrder.
                    // -- Update: when warranty line is existing line in UpdateCustomerOrder.
                    WarrantiedRelationSalesLine::addOrUpdateWarrantiedRelation(serialNumber, warrantiedSalesLine, warrantySalesLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendWarrantiedRelationToItemInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// appends Warranty Relation to ItemInfo, which will be used by GetCustomerOrder/GetCustomerQuote.
    ///      --WarrantableLine: set WarrantyTransaction collection.
    ///      --WarrantyLine: set IsWarranty/WarrantableOrderId/WarrantableLineNumber.
    /// </summary>
    /// <param name = "_xmlDoc">XML document to populate.</param>
    /// <param name = "_xmlRecord">The xml record.</param>
    /// <param name = "_salesLine">The CustomerOrder/Quote Line.</param>
    public static void appendWarrantiedRelationToItemInfo(
        XmlDocument _xmlDoc,
        XmlElement _xmlRecord,
        WarrantySalesLineMap _salesLine
        )
    {
        if (!WarrantyFeatureExposure::isWarrantySalesViaCustomerOrderFeatureEnabled())
        {
            return;
        }

        EcoResProduct product = EcoResProduct::find(InventTable::find(_salesLine.ItemId).Product);

        // Get warranty related information.
        if (product)
        {
            WarrantiedRelationSalesLine warrantiedRelation;

            if (product.ServiceType == EcoResProductServiceType::Warranty)
            {
                _xmlRecord.setAttribute("IsWarranty", "true");

                warrantiedRelation = WarrantiedRelationSalesLine::findWarrantiedRelationByWarrantySalesLine(_salesLine);

                // In some case, the Warranty Line is standalone, means there is no warrantied line.
                if (warrantiedRelation)
                {
                    // do not set warrantied sales id for quote, since once it is converted to order, the system won't be able to find inside SalesTable.
                    // Instead, set it to empty to indicate that the warrantied is in the same order.
                    if (WarrantiedRelationSalesLine::getOrderType(_salesLine) == WarrantiedRelationOrderType::SalesOrder)
                    {
                        _xmlRecord.setAttribute('WarrantableOrderId', warrantiedRelation.WarrantiedSalesId);
                    }

                    _xmlRecord.setAttribute('WarrantableSerialNumber', warrantiedRelation.getWarrantiedSerialNumber());
                    _xmlRecord.setAttribute('WarrantableLineNumber',  num2Str(warrantiedRelation.WarrantiedSalesLineNum, 5,16,1,0));
                }
            }
            else
            {
                RetailTransactionServiceWarranty::appendWarrantyTransactionLineFromWarrantiedRelation(_xmlDoc, _xmlRecord, _salesLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendWarrantyTransactionLineFromWarrantiedRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the WarrantyRelation, this will be deserialized into <c>WarrantyTransactionLine</c>.
    /// </summary>
    /// <param name = "_xmlDoc">XML document to populate.</param>
    /// <param name = "_xmlRecord">The xml record.</param>
    /// <param name = "_salesLine">The CustomerOrder/Quote Line.</param>
    internal static void appendWarrantyTransactionLineFromWarrantiedRelation(
        XmlDocument _xmlDoc,
        XmlElement _xmlRecord,
        WarrantySalesLineMap _salesLine
        )
    {
        if (!WarrantyFeatureExposure::isWarrantySalesViaCustomerOrderFeatureEnabled())
        {
            return;
        }

        XmlElement xmlWarrantyTransactions , xmlWarrantyTransaction;
        xmlWarrantyTransactions = _xmlDoc.createElement('WarrantyTransactionLines');

        WarrantiedOrderType orderType = _salesLine.TableId == tableNum(SalesLine) ?
            WarrantiedRelationOrderType::SalesOrder : WarrantiedRelationOrderType::Quote;

        WarrantiedRelationSalesLine warrantiedRelation;

        while select WarrantySalesId, WarrantySalesLineNum from warrantiedRelation
            where warrantiedRelation.WarrantiedSalesId == _salesLine.SalesId
                && warrantiedRelation.WarrantiedItemId == _salesLine.ItemId
                && warrantiedRelation.WarrantiedSalesLineNum == _salesLine.SalesLineNum
                && warrantiedRelation.WarrantiedOrderType == orderType
                && warrantiedRelation.Relation == WarrantiedRelation::Added
        {
            xmlWarrantyTransaction = _xmlDoc.createElement('WarrantyTransaction');
           xmlWarrantyTransaction.setAttribute('WarrantySalesId', warrantiedRelation.WarrantySalesId);
            xmlWarrantyTransaction.setAttribute('WarrantyLineNum', num2Str(warrantiedRelation.WarrantySalesLineNum, 5,16,1,0));
            xmlWarrantyTransaction.setAttribute('Action', 'Add');

            xmlWarrantyTransactions.appendChild(xmlWarrantyTransaction);
        }

        _xmlRecord.appendChild(xmlWarrantyTransactions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendIsWarrantyLineFlagToSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends IsWarrantyLine information to the Salesline.
    /// As the deserializer requires alphabetically sorting, this fiels is set separately from other warrantable information.
    /// </summary>
    /// </summary>
    /// <param name = "_xmlDoc">XML document to populate.</param>
    /// <param name = "_xmlRecord">The xml record.</param>
    /// <param name = "_salesLine">The CustomerOrder/Quote Line.</param>
    internal static void appendIsWarrantyLineFlagToSalesLine(
        XmlDocument _xmlDoc,
        XmlElement _xmlRecord,
        WarrantySalesLineMap _salesLine
        )
    {
        if (!WarrantyFeatureExposure::isWarrantySalesViaCustomerOrderFeatureEnabled())
        {
            return;
        }

        EcoResProduct product = EcoResProduct::find(InventTable::find(_salesLine.ItemId).Product);

        // Set warranty related information.
        if (product && product.ServiceType == EcoResProductServiceType::Warranty)
        {
            RetailTransactionServiceWarranty::addChildElement(_xmlDoc, _xmlRecord, "IsWarrantyLine", "1");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendWarrantiedRelationToSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  appends Warranty Relation to SalesLine, which will be used by GetSalesOrderDetailsBySalesId/GetSalesOrderDetailsByQuotationId.
    ///      --WarrantableLine: set WarrantyTransaction collection.
    ///      --WarrantyLine: set WarrantableSalesId/WarrantableLineNum.And set IsWarrantyLine(separately as the sorting requriement).
    ///  Note: The elements need to be sorted alphabetically.
    /// </summary>
    /// <param name = "_xmlDoc">XML document to populate.</param>
    /// <param name = "_xmlRecord">The xml record.</param>
    /// <param name = "_salesLine">The CustomerOrder/Quote Line.</param>
    public static void appendWarrantiedRelationToSalesLine(
        XmlDocument _xmlDoc,
        XmlElement _xmlRecord,
        WarrantySalesLineMap _salesLine
        )
    {
        if (!WarrantyFeatureExposure::isWarrantySalesViaCustomerOrderFeatureEnabled())
        {
            return;
        }

        EcoResProduct product = EcoResProduct::find(InventTable::find(_salesLine.ItemId).Product);

        // Set warranty related information.
        if (product)
        {
            if (product.ServiceType == EcoResProductServiceType::Warranty)
            {
                WarrantiedRelationSalesLine warrantiedRelation = WarrantiedRelationSalesLine::findWarrantiedRelationByWarrantySalesLine(_salesLine);

                // In some case, the Warranty Line is standalone, means there is no warrantied line.
                if (warrantiedRelation)
                {
                    RetailTransactionServiceWarranty::addChildElement(_xmlDoc, _xmlRecord, 'WarrantableLineNumber',  num2Str(warrantiedRelation.WarrantiedSalesLineNum, 5,16,1,0));
 
                    // do not set warrantied sales id for quote, since once it is converted to order, the system won't be able to find inside SalesTable.
                    // Instead, set it to empty to indicate that the warrantied is in the same order.
                    if (WarrantiedRelationSalesLine::getOrderType(_salesLine) == WarrantiedRelationOrderType::SalesOrder)
                    {
                        RetailTransactionServiceWarranty::addChildElement(_xmlDoc, _xmlRecord, 'WarrantableSalesId', warrantiedRelation.WarrantiedSalesId);
                    }

                    RetailTransactionServiceWarranty::addChildElement(_xmlDoc, _xmlRecord, 'WarrantableSerialNumber', warrantiedRelation.getWarrantiedSerialNumber());
                }
            }
            else
            {
                RetailTransactionServiceWarranty::appendWarrantyTransactionFromWarrantiedRelation(_xmlDoc, _xmlRecord, _salesLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendWarrantyTransactionFromWarrantiedRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the WarrantyRelation, this will be used by the GetSalesOrderDetailsBySalesId/GetSalesOrderDetailsByTransactonId Api.
    /// GetSalesOrderDetailsByQuotationId doesnot need it as it cannot be invoiced and then cannot be recalled for Add Warranty to Existing Transaction scenario.
    /// This will be deserialized into <c>WarrantyTransaction</c>.
    /// </summary>
    /// <param name = "_xmlDoc">XML document to populate.</param>
    /// <param name = "_xmlRecord">The xml record.</param>
    /// <param name = "_salesLine">The CustomerOrder/Quote Line.</param>
    public static void appendWarrantyTransactionFromWarrantiedRelation(
        XmlDocument _xmlDoc,
        XmlElement _xmlRecord,
        WarrantySalesLineMap _salesLine
        )
    {
        if (!WarrantyFeatureExposure::isWarrantySalesViaCustomerOrderFeatureEnabled())
        {
            return;
        }

        XmlElement xmlWarrantyTransactions , xmlWarrantyTransaction;
        xmlWarrantyTransactions = _xmlDoc.createElement("WarrantyTransactions");

        WarrantiedOrderType orderType = _salesLine.TableId == tableNum(SalesLine) ?
            WarrantiedRelationOrderType::SalesOrder : WarrantiedRelationOrderType::Quote;

        WarrantiedRelationSalesLine warrantiedRelation;

        while select WarrantySalesId, WarrantySalesLineNum from warrantiedRelation
            where warrantiedRelation.WarrantiedSalesId == _salesLine.SalesId
                && warrantiedRelation.WarrantiedItemId == _salesLine.ItemId
                && warrantiedRelation.WarrantiedSalesLineNum == _salesLine.SalesLineNum
                && warrantiedRelation.WarrantiedOrderType == orderType
                && warrantiedRelation.Relation == WarrantiedRelation::Added
        {
            xmlWarrantyTransaction = _xmlDoc.createElement("WarrantyTransaction");
            RetailTransactionServiceWarranty::addChildElement(_xmlDoc, xmlWarrantyTransaction, 'ActionValue', '0'); // WarrantyTransactionAction.Add in Channel side.
            RetailTransactionServiceWarranty::addChildElement(_xmlDoc, xmlWarrantyTransaction, "WarrantyLineNumber", num2Str(warrantiedRelation.WarrantySalesLineNum, 5,16,1,0));
            RetailTransactionServiceWarranty::addChildElement(_xmlDoc, xmlWarrantyTransaction, "WarrantySalesId", warrantiedRelation.WarrantySalesId);
            xmlWarrantyTransactions.appendChild(xmlWarrantyTransaction);
        }

        _xmlRecord.appendChild(xmlWarrantyTransactions);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>