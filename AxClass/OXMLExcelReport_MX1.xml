<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_MX1</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints Acceptance report in storage report to excel.
/// </summary>
class OxmlExcelReport_MX1 extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    VendInvoiceJour     vendInvoiceJour;

    VendInvoiceTrans    vendInvoiceTrans;
    InventTransOrigin   inventTransOrigin;
    InventTrans         inventTrans;
    InventDim           inventDim;

    Counter             totalLines;
    InventLocationName  inventLocationName;
    Days                daysOfKeepingValue;

    Qty                 pageTotalQty, totalQty, lineQty;
    AmountCur           pageTotalAmount, totalAmount;

    Counter             lineNum;

    boolean             isOnFirstPage;

    Bookmark            pageHeader;
    Bookmark            pageBody;
    Bookmark            pageFooter;

    PrintCopyOriginal   printCopyOriginal;

    protected const str ReportHeader = 'REPORTHEADER';
    protected const str Page1Header = 'PAGE1HEADER';
    protected const str Page1Body = 'PAGE1BODY';
    protected const str Page1Footer = 'PAGE1FOOTER';
    protected const str Page2Header = 'PAGE2HEADER';
    protected const str Page2Body = 'PAGE2BODY';
    protected const str Page2Footer = 'PAGE2FOOTER';
    protected const str ReportFooter = 'REPORTFOOTER';

    protected const str CompanyName = 'CompanyName';
    protected const str CompanyCodeOKPO = 'CompanyCodeOKPO';
    protected const str DepositorName = 'DepositorName';
    protected const str DepositorCodeOKDP = 'DepositorCodeOKDP';
    protected const str DepositorCodeOKPO = 'DepositorCodeOKPO';
    protected const str RContractDate = 'RContractDate';
    protected const str RContractNum = 'RContractNum';
    protected const str ReportId = 'ReportId';
    protected const str ReportDate = 'ReportDate';
    protected const str SupplierTitle = 'SupplierTitle';
    protected const str SupplierName = 'SupplierName';

    protected const str LocationName = 'InventLocationName';
    protected const str AcceptorTitle = 'AcceptorTitle';
    protected const str AcceptorName = 'AcceptorName';
    protected const str DaysOfKeeping = 'DaysOfKeeping';

    protected const str LineNum1 = 'LineNum1';
    protected const str Name1 = 'Name1';
    protected const str ItemId1 = 'ItemId1';
    protected const str InventBatchId1 = 'inventBatchId1';
    protected const str UnitTxt1 = 'UnitTxt1';
    protected const str CodeOKEI1 = 'CodeOKEI1';
    protected const str LineQty1 = 'LineQty1';
    protected const str LinePrice1 = 'LinePrice1';
    protected const str LineAmount1 = 'LineAmount1';

    protected const str TotalQty1 = 'TotalQty1';
    protected const str TotalAmount1 = 'TotalAmount1';

    protected const str LineNum2 = 'LineNum2';
    protected const str Name2 = 'Name2';
    protected const str ItemId2 = 'ItemId2';
    protected const str InventBatchId2 = 'InventBatchId2';
    protected const str UnitTxt2 = 'UnitTxt2';
    protected const str CodeOKEI2 = 'CodeOKEI2';
    protected const str LineQty2 = 'LineQty2';
    protected const str LinePrice2 = 'LinePrice2';
    protected const str LineAmount2 = 'LineAmount2';
    protected const str TotalQty2 = 'TotalQty2';
    protected const str TotalAmount2 = 'TotalAmount2';
    protected const str GrandTotalQty = 'GrandTotalQty';
    protected const str GrandTotalAmount = 'GrandTotalAmount';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        const real MinHeight = 12.75;

        return max(document.getNamedRangeHeightWrapped(isOnFirstPage ? Name1 : Name2, vendInvoiceTrans.Name),
                   document.getNamedRangeHeightWrapped(isOnFirstPage ? ItemId1 : ItemId2, vendInvoiceTrans.ItemId),
                   MinHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        const int WidthInColumns = 45;
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00049, funcName()); 

        isOnFirstPage   = true;
        pageHeader      = Page1Header;
        pageBody        = Page1Body;
        pageFooter      = Page1Footer;

        this.initReportData();

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, WidthInColumns);
        this.execute(reportHeader);
        this.execute(pageHeader);

        while select vendInvoiceTrans
            where vendInvoiceTrans.PurchID              == vendInvoiceJour.PurchId
               && vendInvoiceTrans.InvoiceDate          == vendInvoiceJour.InvoiceDate
               && vendInvoiceTrans.InvoiceId            == vendInvoiceJour.InvoiceId
               && vendInvoiceTrans.NumberSequenceGroup  == vendInvoiceJour.NumberSequenceGroup
               && vendInvoiceTrans.InternalInvoiceId    == vendInvoiceJour.InternalInvoiceId
               && vendInvoiceTrans.Qty                  >  0
        {
            while select TableId from inventTransOrigin
                where inventTransOrigin.InventTransId == vendInvoiceTrans.InventTransId
            join sum(Qty) from inventTrans
                where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                   && (vendInvoiceJour.Proforma ||
                       inventTrans.DateFinancial        == vendInvoiceTrans.InvoiceDate)
                   && (vendInvoiceJour.Proforma ||
                       inventTrans.InvoiceId            == vendInvoiceTrans.InvoiceId)
            join InventBatchId from inventDim
                group by InventBatchId
                where inventDim.InventDimId                 == inventTrans.InventDimId
            {
                if (this.mustCreateNewPage())
                {
                    this.execute(pageFooter);
                    document.insertPageBreak(currentRow, curWorksheetNum);
                    this.setCurrentWorksheetNum(curWorksheetNum + 1);
                    isOnFirstPage   = false;
                    pageHeader      = Page2Header;
                    pageBody        = Page2Body;
                    pageFooter      = Page2Footer;
                    pageTotalQty    = 0;
                    pageTotalAmount = 0;
                    this.execute(pageHeader);
                }

                lineNum ++;

                lineQty = InventTable::unitConvert(vendInvoiceTrans.ItemId,
                                                   vendInvoiceTrans.inventTable().inventUnitId(),
                                                   vendInvoiceTrans.PurchUnit,
                                                   vendInvoiceTrans.inventTable().inventUnitId(),
                                                   inventTrans.Qty,
                                                   vendInvoiceTrans.InventDimId);

                if (vendInvoiceTrans.CurrencyCode != accountingCurrency)
                {
                    vendInvoiceTrans.PurchPrice = ExchangeRateHelper::mstPrice(vendInvoiceTrans.PurchPrice, vendInvoiceTrans.CurrencyCode);
                }

                this.execute(pageBody);

                pageTotalQty    += lineQty;
                pageTotalAmount += lineQty * vendInvoiceTrans.PurchPrice;
                totalQty        += lineQty;
                totalAmount     += lineQty * vendInvoiceTrans.PurchPrice;
            }
        }

        this.execute(pageFooter);
        this.setPrintArea();
        this.setCurrentWorksheetNum(2, widthInColumns);
        this.execute(reportFooter);
        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'MX_1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + vendInvoiceJour.InvoiceId + '_' + enum2str(printCopyOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'MX1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody1</Name>
				<Source><![CDATA[
    private void fillBody1()
    {
        this.insertValueToSection(LineNum1, lineNum);
        this.insertValueToSection(Name1, vendInvoiceTrans.Name);
        this.insertValueToSection(ItemId1, vendInvoiceTrans.ItemId);
        this.insertValueToSection(InventBatchId1, inventDim.InventBatchId);
        this.insertValueToSection(UnitTxt1, vendInvoiceTrans.purchUnitTxt());
        this.insertValueToSection(CodeOKEI1, UnitOfMeasure_RU::codeOKEI_RU(UnitOfMeasure::findBySymbol(vendInvoiceTrans.PurchUnit)));
        this.insertValueToSection(LineQty1, lineQty);
        this.insertValueToSection(LinePrice1, vendInvoiceTrans.PurchPrice);
        this.insertValueToSection(LineAmount1, lineQty * vendInvoiceTrans.PurchPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody2</Name>
				<Source><![CDATA[
    private void fillBody2()
    {
        this.insertValueToSection(LineNum2, lineNum);
        this.insertValueToSection(Name2, vendInvoiceTrans.Name);
        this.insertValueToSection(ItemId2, vendInvoiceTrans.ItemId);
        this.insertValueToSection(InventBatchId2, inventDim.InventBatchId);
        this.insertValueToSection(UnitTxt2, vendInvoiceTrans.purchUnitTxt());
        this.insertValueToSection(CodeOKEI2, UnitOfMeasure_RU::codeOKEI_RU(UnitOfMeasure::findBySymbol(vendInvoiceTrans.PurchUnit)));
        this.insertValueToSection(LineQty2, lineQty);
        this.insertValueToSection(LinePrice2, vendInvoiceTrans.PurchPrice);
        this.insertValueToSection(LineAmount2, lineQty * vendInvoiceTrans.PurchPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case ReportHeader:
                this.fillReportHeader();
                break;
            case Page1Body:
                this.fillBody1();
                break;
            case Page1Footer:
                this.fillPage1Footer();
                break;
            case Page2Body:
                this.fillBody2();
                break;
            case Page2Footer:
                this.fillPage2Footer();
                break;
            case ReportFooter:
                this.fillReportFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage1Footer</Name>
				<Source><![CDATA[
    private void fillPage1Footer()
    {
        this.insertValueToSection(TotalQty1, pageTotalQty);
        this.insertValueToSection(TotalAmount1, pageTotalAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage2Footer</Name>
				<Source><![CDATA[
    private void fillPage2Footer()
    {
        this.insertValueToSection(TotalQty2, pageTotalQty);
        this.insertValueToSection(TotalAmount2, pageTotalAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    private void fillReportFooter()
    {
        OfficialsTrans_RU officialsTrans;

        this.insertValueToSection(GrandTotalQty, totalQty);
        this.insertValueToSection(GrandTotalAmount, totalAmount);

        officialsTrans = OfficialsTrans_RU::findSessionId(vendInvoiceJour.OffsessionId_RU, OffPosition_RU::Supplier);
        this.insertValueToSection(SupplierTitle, officialsTrans.Title);
        this.insertValueToSection(SupplierName,  officialsTrans.Name);

        officialsTrans = OfficialsTrans_RU::findSessionId(vendInvoiceJour.OffsessionId_RU, OffPosition_RU::Acceptor);
        this.insertValueToSection(AcceptorTitle, officialsTrans.Title);
        this.insertValueToSection(AcceptorName,  officialsTrans.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportHeader()
    {
        VendTable vendTable = vendInvoiceJour.vendTable_OrderAccount();
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(vendInvoiceJour.DefaultDimension) as PurchAgreementHeaderExt_RU;
        PurchAgreementHeader purchAgreementHeader = PurchAgreementHeader::find(purchAgreementHeaderExt.AgreementHeader);

        this.insertValueToSection(CompanyName, strFmt("@GLS106745", CompanyInfo::find().name()));
        this.insertValueToSection(CompanyCodeOKPO, CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find()));
        this.insertValueToSection(DepositorName,     vendTable.name());
        this.insertValueToSection(DepositorCodeOKDP, vendTable.partyOKDPasOfDate_RU());
        this.insertValueToSection(DepositorCodeOKPO, vendTable.partyOKPOasOfDate_RU());
        this.insertValueToSection(RContractNum,      purchAgreementHeader.DocumentTitle);
        this.insertValueToSection(RContractDate,     purchAgreementHeaderExt.AgreementDate);
        this.insertValueToSection(LocationName,      inventLocationName);
        if (daysOfKeepingValue)
        {
            this.insertValueToSection(DaysOfKeeping, daysOfKeepingValue);
        }
        else
        {
            this.insertValueToSection(DaysOfKeeping, '');
        }
        this.insertValueToSection(ReportId, vendInvoiceJour.InventBaileeReceiptReportId_RU);
        this.insertValueToSection(ReportDate, vendInvoiceJour.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportData</Name>
				<Source><![CDATA[
    private void initReportData()
    {
        AgreementHeader agreementHeader;
        InventBatch     inventBatch;
        ;

        while select vendInvoiceTrans
            where vendInvoiceTrans.PurchID              == vendInvoiceJour.PurchId
               && vendInvoiceTrans.InvoiceDate          == vendInvoiceJour.InvoiceDate
               && vendInvoiceTrans.InvoiceId            == vendInvoiceJour.InvoiceId
               && vendInvoiceTrans.NumberSequenceGroup  == vendInvoiceJour.NumberSequenceGroup
               && vendInvoiceTrans.InternalInvoiceId    == vendInvoiceJour.InternalInvoiceId
               && vendInvoiceTrans.Qty                  >  0
        {
            if (! daysOfKeepingValue)
            {
                select firstonly TableId from inventTransOrigin
                    where inventTransOrigin.InventTransId == vendInvoiceTrans.InventTransId
                join inventTrans
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                       && (vendInvoiceJour.Proforma ||
                           inventTrans.DateFinancial        == vendInvoiceTrans.InvoiceDate)
                       && (vendInvoiceJour.Proforma ||
                           inventTrans.InvoiceId            == vendInvoiceTrans.InvoiceId)
                join inventDim
                    where inventDim.InventDimId             == inventTrans.InventDimId
                       && inventDim.InventBatchId
                       && inventDim.InventOwnerId_RU;

                if (inventDim)
                {
                    agreementHeader = AgreementHeader::find(inventDim.inventOwner_RU().agreementHeaderExt().AgreementHeader);
                }

                if (agreementHeader.DefaultAgreementLineExpirationDate)
                {
                    inventBatch = InventBatch::find(inventDim.InventBatchId, vendInvoiceTrans.ItemId);
                    if (inventBatch.ProdDate)
                    {
                        daysOfKeepingValue = max(0, agreementHeader.DefaultAgreementLineExpirationDate - inventBatch.ProdDate);
                    }
                }
                totalLines ++;
            }

            while select TableId from inventTransOrigin
                where inventTransOrigin.InventTransId == vendInvoiceTrans.InventTransId
            join sum(Qty) from inventTrans
                where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                   && (vendInvoiceJour.Proforma ||
                       inventTrans.DateFinancial        == vendInvoiceTrans.InvoiceDate)
                   && (vendInvoiceJour.Proforma ||
                       inventTrans.InvoiceId            == vendInvoiceTrans.InvoiceId)
            join InventBatchId from inventDim
                group by InventBatchId
                where inventDim.InventDimId             == inventTrans.InventDimId
            {
                totalLines ++;
            }

            if (! inventLocationName)
            {
                inventLocationName = vendInvoiceTrans.inventDim().inventLocation().Name;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(reportHeader);
        this.addSection(page1Header);
        this.addSection(page1Body, true);
        this.addSection(page1Footer);
        this.addSection(page2Header);
        this.addSection(page2Body, true);
        this.addSection(page2Footer);
        this.addSection(reportFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    private boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(pageBody);

        requiredHeight += conPeek(mapSections.lookup(pageFooter), #posSectionHeight);

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendInvoiceJour parmInvoiceJour(VendInvoiceJour _vendInvoiceJour = vendInvoiceJour)
    {
        vendInvoiceJour = _vendInvoiceJour;
        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCopyOriginal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PrintCopyOriginal parmPrintCopyOriginal(PrintCopyOriginal _printCopyOriginal = printCopyOriginal)
    {
        printCopyOriginal = _printCopyOriginal;
        return printCopyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(MX1_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        const Counter CellsBody = 9;
        const Counter CellsFixed = 20;

        return CellsFixed + CellsBody * totalLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_MX1 construct()
    {
        return new OXMLExcelReport_MX1();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static ClassDescription description()
    {
        return "@GLS115490";
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeWithPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute report with Print Management print settings.
    /// </summary>
    /// <param name="_args">
    /// The object of <c>Args</c> class.
    /// </param>
    /// <param name="_settingDetail">
    /// The object of <c>PrintMgmtPrintSettingDetail</c> class.
    /// </param>
    /// <param name="_recordId">
    /// Record Id of the record of <c>VendInvoiceJour</c> table.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void executeWithPrintMgmt(Args _args, PrintMgmtPrintSettingDetail _settingDetail, RecId _recordId)
    {
        OXMLExcelReport_MX1         reportMX1 = OXMLExcelReport_MX1::construct();
        PrintCopyOriginal           printCopyOriginal;
        VendInvoiceJour             vendInvoiceJour = VendInvoiceJour::findRecId(_recordId);

        if ( vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::Bailee &&
            (vendInvoiceJour.InventBaileeReceiptReportId_RU || vendInvoiceJour.Proforma))
        {
            if (_settingDetail.parmType() == PrintMgmtDocInstanceType::Copy)
            {
                printCopyOriginal = PrintCopyOriginal::Copy;
            }
            else
            {
                printCopyOriginal = PrintCopyOriginal::Original;
            }

            reportMX1.parmArgs(_args);
            reportMX1.parmInvoiceJour(vendInvoiceJour);

            reportMX1.parmPrintCopyOriginal(printCopyOriginal);

            SRSPrintDestinationSettings printSettings = _settingDetail.parmPrintJobSettings();

            if (reportMX1.isPdfConversionEnabled(printSettings))
            {
                reportMX1.parmPrintDestinationSettings(printSettings);
            }

            reportMX1.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        OXMLExcelReport_MX1 report;
        RecordSortedList    rst;
        VendInvoiceJour     vendInvoiceJour;
        boolean             existsNext;
        if (_args)
        {
            if (_args.record())
            {
                vendInvoiceJour = _args.record();
                if (vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::Bailee &&
                    vendInvoiceJour.InventBaileeReceiptReportId_RU)
                {
                    report = OXMLExcelReport_MX1::construct();
                    report.parmInvoiceJour(_args.record());
                    report.runOperation();
                }
            }
            if (_args.object())
            {
                rst = _args.object();
                existsNext = rst.first(vendInvoiceJour);

                while (existsNext)
                {
                    if (vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::Bailee &&
                        vendInvoiceJour.InventBaileeReceiptReportId_RU)
                    {
                        report = OXMLExcelReport_MX1::construct();
                        report.parmInvoiceJour(vendInvoiceJour);
                        report.runOperation();
                    }
                    existsNext = rst.next(vendInvoiceJour);
                }
            }
        }
        else
            throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>