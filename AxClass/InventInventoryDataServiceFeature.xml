<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using KernelStateProvider = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.FeatureStateProvider;
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public final class InventInventoryDataServiceFeature implements IFeatureMetadata, IFeatureMetadataEnablementNotifiable
{
    private static InventInventoryDataServiceFeature instance;
    private const str inventInventoryDataServiceFeatureScope = 'inventInventoryDataServiceFeatureScope';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new InventInventoryDataServiceFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isEnabled()
    {
        return KernelStateProvider::isFeatureEnabled(InventInventoryDataServiceFeature::instance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static InventInventoryDataServiceFeature instance()
    {
        return InventInventoryDataServiceFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str label()
    {
        return literalStr("@SCM:InventoryServiceFeature");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::InventoryAndWarehouseManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str summary()
    {
        return literalStr("@SCM:InventoryServiceFeatureDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        if (RetailInventoryServiceIntegrationHelper::isUsingInventoryServiceAsDataSource())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSyncInventDimension</Name>
				<Source><![CDATA[
    public static boolean shouldSyncInventDimension(int field)
    {
        boolean shouldSyncInventDim = false;
        SysGlobalObjectCache cache = new SysGlobalObjectCache();
        
        container packedResult = cache.find(inventInventoryDataServiceFeatureScope, [field]);

        if (packedResult == conNull())
        {
            DictField dictField = new DictField(tableNum(InventDim), field);
            
            DictConfigurationKey dictConfigurationKey;
            if (dictField.configurationKeyId())
            {
                dictConfigurationKey = new DictConfigurationKey(dictField.configurationKeyId());
            }

            if (!dictConfigurationKey || dictConfigurationKey.enabled())
            {
                shouldSyncInventDim = true;
            }

            cache.insert(inventInventoryDataServiceFeatureScope, [field], [shouldSyncInventDim]);
        }
        else
        {
            shouldSyncInventDim = conPeek(packedResult, 1);
        }

        return shouldSyncInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        //TODO: release below comment code to diable Inventory common component flight
        //InventCCDataServiceFlight::setFlightEnabled(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        //TODO: release below commented code when CC is Public preview/GA
        //InventCCDataServiceFlight::setFlightEnabled(NoYes::Yes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>