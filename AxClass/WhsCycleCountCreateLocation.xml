<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsCycleCountCreateLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsCycleCountCreateLocation</c> class is used to run batch job for cycle count for a location.
/// </summary>
public class WhsCycleCountCreateLocation extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    QueryRun            queryRun;

    DialogField         dlgFieldMaxCounts;
    DialogField         dlgFieldWorkPoolId;

    WHSMaxCounts        maxCounts;
    WHSWorkPoolId       workPoolId;

    #define.CurrentVersion(5)
    #LOCALMACRO.CurrentList
        maxCounts,
        workPoolId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query to be used for cycle count work on locations.
    /// </summary>
    /// <returns>
    /// The query to be used for cycle count.
    /// </returns>
    Query buildQuery()
    {
        return new Query(queryStr(WMSLocation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog = super();

        dlgFieldMaxCounts   = dialog.addFieldValue(extendedTypeStr(WHSMaxCounts), maxCounts);
        dlgFieldWorkPoolId  = dialog.addFieldValue(extendedTypeStr(WHSWorkPoolId), workPoolId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean     ret;

        maxCounts   = dlgFieldMaxCounts.value();
        workPoolId  = dlgFieldWorkPoolId.value();

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        queryRun = new QueryRun(this.buildQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack(), #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkPoolId</Name>
				<Source><![CDATA[
    public WHSWorkPoolId parmWorkPoolId(WHSWorkPoolId  _workPoolId = workPoolId)
    {
        workPoolId = _workPoolId;

        return workPoolId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public void parmInventLocationId(InventLocationId _inventLocationId)
    {
        SysQuery::findOrCreateRange(queryRun.query().dataSourceTable(tableNum(WMSLocation)), fieldNum(WMSLocation, InventLocationId)).value(_inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSLocationId</Name>
				<Source><![CDATA[
    public void parmWMSLocationId(WMSLocationId _wmsLocationId)
    {
        SysQuery::findOrCreateRange(queryRun.query().dataSourceTable(tableNum(WMSLocation)), fieldNum(WMSLocation, wmsLocationId)).value(_wmsLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            #OCCRetryCount

            try
            {
                Counter createdCycleCountWorkTablesCounter = 0;
                ttsbegin;

                WHSParameters parameters = WHSParameters::find();
                WHSWorkCreateId workCreateId = WHSWorkTable::getNextWorkCreateId();

                // Reset the queryRun, in case we ended up here as a result of retry.
                queryRun.reset();

                WHSWorkTable newWorkTable;

                while (queryRun.next())
                {
                    WMSLocation location = queryRun.get(tableNum(WMSLocation));

                    // If this location is not Cycle Countable, skip it.
                    if (!location.inventLocation().WHSEnabled || !WHSLocationProfile::find(location.LocProfileId).CycleCountable)
                    {
                        continue;
                    }

                    InventSiteId inventSiteId = location.inventSiteId();

                    WHSWorkLine     workLine;
                    WHSWorkTable    workTable;

                    if (workLine.RecId == 0  
                        && !WHSWorkLine::anyCycleCountWorkExistsAtLocation(location))
                    {
                        InventDim inventDim;
                        inventDim.InventLocationId = location.InventLocationId;
                        inventDim.InventSiteId = inventSiteId;
                        inventDim.wmsLocationId = location.wmsLocationId;
                        inventDim = InventDim::findOrCreate(inventDim);
                    
                        newWorkTable.clear();
                        newWorkTable.setWorkId();
                        newWorkTable.WorkTransType      = WHSWorkTransType::CycleCount;
                        newWorkTable.WorkBuildId        = workCreateId;
                        newWorkTable.InventSiteId       = inventSiteId;
                        newWorkTable.InventLocationId   = location.InventLocationId;
                        newWorkTable.WorkPriority       = parameters.CycleCountWorkPriority ? parameters.CycleCountWorkPriority : parameters.WorkPriority;
                        newWorkTable.WorkCreatedBy      = curUserId();
                        newWorkTable.WorkPoolId         = workPoolId;
                        newWorkTable.insert();

                        WHSWorkLine newWorkLine = this.initNewWorkLine(newWorkTable, location, inventDim, parameters);
                        newWorkLine.insert();

                        ++createdCycleCountWorkTablesCounter;
                    }

                    if (maxCounts && createdCycleCountWorkTablesCounter == maxCounts)
                    {
                        break;
                    }
                }

                ttscommit;

                if (newWorkTable.WorkId)
                {
                    info("@WAX697");
                }
                else
                {
                    info("@WAX698");
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum))
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new work line.
    /// </summary>
    /// <param name = "_workTable">
    /// The work record to link this work line to.
    /// </param>
    /// <param name = "_location">
    /// The location to create the work line for.
    /// </param>
    /// <param name = "_inventDim">
    /// The dimensions to give the work line item.
    /// </param>
    /// <param name = "_parameters">
    /// The current warehouse management parameters.
    /// </param>
    /// <returns>
    /// A new <c>WHSWorkLine</c>.
    /// </returns>
    protected WHSWorkLine initNewWorkLine(
        WHSWorkTable  _workTable,
        WMSLocation   _location,
        InventDim     _inventDim,
        WHSParameters _parameters)
    {
        WHSWorkLine newWorkLine;
        newWorkLine.initValue();
        newWorkLine.WorkId          = _workTable.WorkId;
        newWorkLine.LineNum         = 1;
        newWorkLine.WorkType        = WHSWorkType::Count;
        newWorkLine.wmsLocationId   = _location.wmsLocationId;
        newWorkLine.InventDimId     = _inventDim.InventDimId;
        newWorkLine.Mandatory       = NoYes::Yes;
        newWorkLine.WorkClassId     = _parameters.DefaultCycleCountWorkClassId;
        return newWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to show query select button or not.
    /// </summary>
    /// <returns>
    /// True if to show query select button.
    /// </returns>
    boolean showQuerySelectButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        boolean     ret = true;
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedQuery, #CurrentList] = packedClass;

                if (!packedQuery)
                {
                    ret = false;
                }
                else
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static WHSCycleCountCreateLocation construct()
    {
        return new WHSCycleCountCreateLocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>WHSCycleCountCreateLocation</c> class with the query limited to the specified warehouse location.
    /// </summary>
    /// <param name = "_inventLocationId">Warehouse to set on the query.</param>
    /// <param name = "_wmsLocationId">Warehouse location to set on the query.</param>
    /// <returns></returns>
    public static WhsCycleCountCreateLocation constructFromWMSLocation(InventLocationId _inventLocationId, WMSLocationId _wmsLocationId)
    {
        var cycleCount = WhsCycleCountCreateLocation::construct();
        cycleCount.parmInventLocationId(_inventLocationId);
        cycleCount.parmWMSLocationId(_wmsLocationId);

        return cycleCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@WAX500";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args _args)
    {
        if (_args && _args.record())
        {
            var callerRecord = _args.record();
            if (fieldName2Id(callerRecord.TableId, fieldStr(WMSLocation, inventLocationId)) && fieldName2Id(callerRecord.TableId, fieldStr(WMSLocation, wMSLocationId)))
            {
                this.parmInventLocationId(callerRecord.getFieldValue(fieldStr(WMSLocation, inventLocationId)));
                this.parmWMSLocationId(callerRecord.getFieldValue(fieldStr(WMSLocation, wMSLocationId)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        WHSCycleCountCreateLocation cycleCountCreateLocation = WHSCycleCountCreateLocation::construct();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(cycleCountCreateLocation))
        {
            cycleCountCreateLocation.getLast();
            cycleCountCreateLocation.initFromArgs(_args);

            if (cycleCountCreateLocation.prompt())
            {
                cycleCountCreateLocation.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WhsCycleCountCreateLocation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSCycleCountCreateLocation);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>