<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransExecutionContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SpecTransExecutionContext</c> class defines a settlement execution context.
/// </summary>
/// <remarks>
/// 
/// Settlement allows consumers to define the group of invoices and payments that should be settled together.  The group 
/// is held in the <c>SpecTrans</c> table with the SpecCompany, SpecTableId and SpecRecId columns.  The <c>SpecTrans</c> relations shows several different
/// relationships for the these columns.  Examples: Payments with <c>LedgerJournalTrans</c> or Customer with <c>CustTable</c>.
///   
/// In several scenarios, settlement consumers define the settlement group as a customer.  When many processes are performing settlement at the same 
/// time for the same customer, we have blocking. 
///  
/// To eliminate these blocking, this class creates a unique settlement execution context.  <c>SpecContext</c> defines the settlement group
/// and the source for the settlement group.  The settlement group is the <c>SpecContext</c> row.  The source for the settlement group can be 
/// the customer.  
/// 
/// This design allows for flexibility to open up to other source settlement groups like vendors, payments and invoices.  We will start 
/// with customers.
///  
/// </remarks>
public final class SpecTransExecutionContext
{
    private CustVendTable custVendTable;
    private SpecContext specContext;
    private Common source;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>SpecTransExecutionContext</c> from the source.
    /// </summary>
    /// <param name = "_custVendTable">The customer or vendor.</param>
    /// <param name = "_source">The source settlement group.</param>
    /// <returns>A <c>SpecTransExecutionContext</c> instance.</returns>
    public static SpecTransExecutionContext newFromSource(CustVendTable _custVendTable, Common _source = _custVendTable)
    {
        SpecTransExecutionContext context = new SpecTransExecutionContext();

        context.custVendTable = _custVendTable;
        context.source = _source;
        context.specContext = SpecContext::initAndInsert(_custVendTable, _source);

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSource</Name>
				<Source><![CDATA[
    internal Common parmSource()
    {
        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    internal CustVendAC parmAccountNum()
    {
        return custVendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecContext</Name>
				<Source><![CDATA[
    public Common parmSpecContext()
    {
        return specContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferSpecContextToSourceContext</Name>
				<Source><![CDATA[
    internal void transferSpecContextToSourceContext()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            SpecTrans::deleteSetForSingleOriginator(
                specContext.SourceCompany,
                specContext.SourceTableId,
                specContext.SourceRecId);

            SpecTrans specTrans;
            update_recordset specTrans
                setting SpecCompany = specContext.SourceCompany,
                    SpecTableId = specContext.SourceTableId,
                    SpecRecId = specContext.SourceRecId
                where specTrans.SpecCompany == specContext.company()
                    && specTrans.SpecTableId == specContext.TableId
                    && specTrans.SpecRecId == specContext.RecId;

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>