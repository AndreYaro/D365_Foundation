<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProcCategoryVendorsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportQueryAttribute(querystr(ProcCategoryVendor)),
    SRSReportParameterAttribute(classstr(ProcCategoryVendorsContract))
]
class ProcCategoryVendorsDP extends SRSReportDataProviderBase
{
    ProcCategoryTmpVendor   procCategoryTmpVendor;
    /// <summary>
    /// Gets data from the <c>ProcCategoryTmpVendor</c> table.
    /// </summary>
    /// <returns>
    /// The <c>ProcCategoryTmpVendor</c> object.
    /// </returns>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProcCategoryTmpVendor</Name>
				<Source><![CDATA[
    [
        SRSReportDataSetAttribute(tablestr(ProcCategoryTmpVendor))
    ]
    public ProcCategoryTmpVendor getProcCategoryTmpVendor()
    {
        select procCategoryTmpVendor;
        return procCategoryTmpVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    ///    Note that this is a framework class. Customizing this class may cause problems with future upgrades
    ///    to the software.
    /// </remarks>
    public void processReport()
    {
        Query                           mainQuery;
        QueryRun                        queryRun;
        QueryBuildRange                 categoryRange;
        QueryBuildRange                 leRange;
        QueryBuildRange                 transRange, dtRange;
        QueryBuildDataSource            categoryDS, catVendDS, transDS;
        EcoResCategory                  ecoResCategory;
        EcoResCategoryTranslation       ecoResCategoryTranslation;
        ProcCategoryVendorView          procCategoryVendorView;

        List    legalEntity;
        List    category;

        ListEnumerator legalEntityEnum;
        ListEnumerator categoryEnum;

        int counter;
        date asOfDate;
        str queryRangeStr;

        ProcCategoryVendorsContract contract = this.parmDataContract() as ProcCategoryVendorsContract;

        asOfDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());

        mainQuery = new Query(querystr(ProcCategory));
        queryRun = new QueryRun(mainQuery);

        category = contract.parmCategory();
        legalEntity = contract.parmCompany();

        categoryDS = mainQuery.dataSourceTable(tablenum(EcoResCategory));
        categoryRange = categoryDS.addRange(fieldnum(EcoResCategory, RecId));

        categoryEnum = category.getEnumerator();

        while (categoryEnum.moveNext())
        {
            categoryRange.value(queryRangeConcat(categoryRange.value(), categoryEnum.current()));
        }

        categoryRange.value(queryRangeConcat(categoryRange.value(), 0));

        catVendDS = categoryDS.addDataSource(tablenum(ProcCategoryVendorView));
        catVendDS.relations(false);
        catVendDS.addLink(fieldnum(EcoResCategory, RecId), fieldnum(ProcCategoryVendorView, Category));
        catVendDS.joinMode(JoinMode::OuterJoin);
        catVendDS.fetchMode(QueryFetchMode::One2One);

        //LE Filter
        leRange = catVendDS.addRange(fieldnum(ProcCategoryVendorView, LegalEntity));

        legalEntityEnum = legalEntity.getEnumerator();

        while(legalEntityEnum.moveNext())
        {
            leRange.value(queryRangeConcat(leRange.value(), legalEntityEnum.current()));
        }

        //Date Range (date effectivity)
        dtRange = catVendDS.addRange(fieldnum(ProcCategoryVendorView, ValidTo));
        queryRangeStr = strfmt('((%1 <= %3) && (%2 > %3))', fieldstr(ProcCategoryVendorView, ValidFrom), fieldstr(ProcCategoryVendorView, ValidTo), date2StrXpp(asOfDate));
        dtRange.value(queryRangeStr);

        transDS = categoryDS.addDataSource(tablenum(EcoResCategoryTranslation));
        transDS.relations(false);
        transDS.addLink(fieldnum(EcoResCategory, RecId), fieldnum(EcoResCategoryTranslation, Category));
        transDS.joinMode(JoinMode::OuterJoin);
        transDS.fetchMode(QueryFetchMode::One2One);

        transRange = transDS.addRange(fieldnum(EcoResCategoryTranslation, LanguageId));
        transRange.value(queryValue(LanguageTable::defaultLanguage()));

        queryRun = new QueryRun(mainQuery);

        ttsbegin;
        while (queryRun.next())
        {
            procCategoryVendorView = queryRun.get(tablenum(ProcCategoryVendorView));
            ecoResCategory = queryRun.get(tablenum(EcoResCategory));
            ecoResCategoryTranslation = queryRun.get(tablenum(EcoResCategoryTranslation));

            procCategoryTmpVendor.clear();
            procCategoryTmpVendor.CategoryName          = ecoResCategory.Name;
            procCategoryTmpVendor.CreateDate            = ecoResCategory.CreatedDateTime;
            procCategoryTmpVendor.LastModifiedDate      = ecoResCategory.ModifiedDateTime;
            procCategoryTmpVendor.LastModifiedBy        = ecoResCategory.ModifiedBy;
            procCategoryTmpVendor.Category              = ecoResCategory.RecId;
            procCategoryTmpVendor.FriendlyName          = ecoResCategoryTranslation.FriendlyName;
            procCategoryTmpVendor.Description           = ecoResCategoryTranslation.Description;
            procCategoryTmpVendor.VendAccountNum        = procCategoryVendorView.VendAccountNum;
            procCategoryTmpVendor.VendName              = procCategoryVendorView.Name;
            procCategoryTmpVendor.VendStatus            = procCategoryVendorView.VendCategoryStatus;
            procCategoryTmpVendor.LegalEntityName       = DirPartyTable::findRec(procCategoryVendorView.LegalEntity).Name;
            procCategoryTmpVendor.doInsert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>