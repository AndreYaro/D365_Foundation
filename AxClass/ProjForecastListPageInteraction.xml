<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to render the <c>ProjectForecastListPage</c>.
/// </summary>
class ProjForecastListPageInteraction extends SysListPageInteractionBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query with <c>ProjForecastUnion</c> as datasource and <c>ProjID</c> as a range.
    /// </summary>
    /// <param name="_query">
    /// The query to be initialized.
    /// </param>
    public void initializeQuery(Query _query)
    {

        Args args = this.page().formRun().args();

        super(_query);

        if (args.parmObject() is BudgetPlanProjectForecastDrillThroughHelper)
        {
            BudgetPlanProjectForecastDrillThroughHelper drillThroughHelper = args.parmObject();

            BudgetPlanProjectForecastDrillThroughHelper::updateQueryForBudgetPlanning(_query, drillThroughHelper);
        }
        else
        {
            ProjTable proj = this.page().pageArgs().externalRecord() as ProjTable;
            if (proj)
            {
                QueryBuildDataSource projForecastUnionDataSource = _query.dataSourceTable(tableNum(ProjForecastUnion));
                projForecastUnionDataSource.clearDynalinks();
                SysQuery::findOrCreateRange(projForecastUnionDataSource, fieldNum(ProjForecastUnion,ProjId)).value(SysQuery::valueLikeAfter(proj.ProjId));
            }
        }        
        if(FeatureStateProvider::IsFeatureEnabled(ProjForecastListPageV2Feature::instance()))
        {
            QueryBuildDataSource projWbsActivityNumberView = _query.dataSourceTable(tableNum(ProjWBSActivityNumberView));
            projWbsActivityNumberView.addRange(fieldNum(ProjWBSActivityNumberView, ActivityNumber)).value(SysQuery::valueNotEmptyString());
        }
        else 
        {
            QueryBuildDataSource projWBSEstimateView = _query.dataSourceTable(tableNum(ProjWBSEstimatesView));
            projWBSEstimateView.addRange(fieldNum(ProjWBSEstimatesView, ActivityNumber)).value(SysQuery::valueNotEmptyString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the menu item name based on transaction type.
    /// </summary>
    /// <param name = "_forecastUnion">
    ///     The <c>ProjForecastUnion</c> buffer used to determine transaction type to select the menu item.
    /// </param>
    /// <returns>
    ///     Menu item name.
    /// </returns>
    protected static MenuItemName getMenuItemName(ProjForecastUnion _forecastUnion)
    {
        MenuItemName menuItemNameLocal;
        switch (_forecastUnion.ProjTransType)
        {
            case ProjTransType::Cost:
                menuItemNameLocal = menuitemDisplayStr(ProjForecastCost);
                break;
            case ProjTransType::Revenue:
                menuItemNameLocal = menuitemDisplayStr(ProjForecastRevenue);
                break;
            case ProjTransType::Hour:
                menuItemNameLocal = menuitemDisplayStr(ProjForecastEmpl);
                break;
            case ProjTransType::Item:
                menuItemNameLocal = menuitemDisplayStr(ForecastSalesProj);
                break;
            case ProjTransType::OnAccount:
                menuItemNameLocal = menuitemDisplayStr(ProjForecastOnAcc);
                break;
        }
        return menuItemNameLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runForcastFormBasedOnForecastUnion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a specific forecast form based on the <c>ProjForecastUnion</c> record in
    /// the argument.
    /// </summary>
    /// <param name="_forecastUnion">
    ///     The <c>ProjForecastUnion</c> buffer used to select the Form.
    /// </param>
    /// <param name="_openMode">
    ///     The mode in which the forecast form will open with.
    /// </param>
    /// <param name="_caller">
    ///     The caller form, used for call backs from the forecast forms.
    /// </param>
    public static void runForcastFormBasedOnForecastUnion(ProjForecastUnion _forecastUnion, OpenMode _openMode, FormRun _caller = null)
    {
        Args                args = new Args();
        MenuFunction        menuFunction;
        MenuItemName        menuItemName;
        Common              commonForecastArg;

        commonForecastArg = ProjForecastUnion::getForecast(_forecastUnion);

        if (!commonForecastArg.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        args.caller(_caller);
        args.openMode(_openMode);
        args.record(commonForecastArg);
        
        menuItemName = ProjForecastListPageInteraction::getMenuItemName(_forecastUnion);
        if (!menuItemName)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        menuFunction = new MenuFunction(
            menuItemName, MenuItemType::Display
            );
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjTableFromArgsIfNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>_projTable</c> buffer from args if it has not been initialized yet.
    /// </summary>
    /// <param name="_projTable">
    /// The buffer to be initialized.
    /// </param>
    /// <param name="_args">
    /// The <c>args</c> serving as initializing.
    /// </param>
    public static void setProjTableFromArgsIfNotExist(ProjTable _projTable, Args _args)
    {
        if (!_projTable && _args && _args.record() &&
            _args.dataset() == tableNum(ProjTable))
        {
            _projTable.data(_args.record());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust the editability for a number of form buttons
    /// </summary>
    protected void setButtonEnabled()
    {
        super();

        ProjTable projTable = this.listPage().activeRecord(identifierStr(ProjTable));
        boolean lockFieldsForForecasts = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Forecasts) && Project::isProjectExternallyManaged(projTable.ProjId);

        this.enableButton(formControlStr(ProjForecastListPage, newHour), !lockFieldsForForecasts);
        this.enableButton(formControlStr(ProjForecastListPage, newExpense), !lockFieldsForForecasts);
        this.enableButton(formControlStr(ProjForecastListPage, newItem), !lockFieldsForForecasts);
        this.enableButton(formControlStr(ProjForecastListPage, newFee), !lockFieldsForForecasts);
        this.enableButton(formControlStr(ProjForecastListPage, newOnAcc), !lockFieldsForForecasts);

        this.enableButton(formControlStr(ProjForecastListPage, EditButton), !lockFieldsForForecasts);
        this.enableButton(formControlStr(ProjForecastListPage, CopyBudget), !lockFieldsForForecasts);
        this.enableButton(formControlStr(ProjForecastListPage, TransferQuotationLines), !lockFieldsForForecasts);
        this.enableButton(formControlStr(ProjForecastListPage, ProjForecastTransferFromWbs), !lockFieldsForForecasts);

        this.enableButton(formControlStr(ProjForecastListPage, DeleteForecast), !lockFieldsForForecasts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButton</Name>
				<Source><![CDATA[
    private void enableButton(str _controlName, boolean _enabled = true)
    {
        this.listPage().actionPaneControlEnabled(_controlName, _enabled);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>