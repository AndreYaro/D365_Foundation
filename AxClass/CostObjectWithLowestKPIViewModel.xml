<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostObjectWithLowestKPIViewModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostObjectWithLowestKPIViewModel</c> class is a view model for a list of cost objects with lowest
/// inventory KPI on the cost analysis workspace.
/// </summary>
public class CostObjectWithLowestKPIViewModel
{
    utcdatetime                 lastMonthlyCacheRefreshTime;
    FormDropDialogButtonControl refreshStateButtonControl;
    boolean                     isMonthlyCacheUpToDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static CostObjectWithLowestKPIViewModel construct()
    {
        return new CostObjectWithLowestKPIViewModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromRefreshStateButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>CostObjectWithLowestKPIViewModel</c> using a button control showing the last refresh of a
    /// KPI list.
    /// </summary>
    /// <param name = "_refreshStateButtonControl">The drop dialog button showing the list refresh state.</param>
    /// <returns>The newly created instance of the view model.</returns>
    public static CostObjectWithLowestKPIViewModel newFromRefreshStateButton(FormDropDialogButtonControl _refreshStateButtonControl)
    {
        CostObjectWithLowestKPIViewModel model = CostObjectWithLowestKPIViewModel::construct();
        model.refreshStateButtonControl = _refreshStateButtonControl;

        return model;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastMonthlyCacheRefreshTime</Name>
				<Source><![CDATA[
    public utcdatetime parmLastMonthlyCacheRefreshTime()
    {
        return lastMonthlyCacheRefreshTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsMonthlyCacheUpToDate</Name>
				<Source><![CDATA[
    public boolean parmIsMonthlyCacheUpToDate()
    {
        return isMonthlyCacheUpToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRefreshStateButtonImage</Name>
				<Source><![CDATA[
    private void updateRefreshStateButtonImage(str _symbol)
    {
        refreshStateButtonControl.normalImage(_symbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastRefreshTimeValueAndControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the last refresh time and the button control responsible for showing the last refresh of the KPI list.
    /// </summary>
    /// <param name = "_endMonthDate">The date for which to update the control.</param>
    /// <remarks>
    /// This method checks the validity of the monthly cache.
    /// If it has been invalidated at the specified date or an earlier date, the data is not up to date. The refresh time is then either
    /// the previous refresh time if it exists, or the last update time of the first previous month that is not invalid.
    /// Otherwise, it means that the data is valid. In this case, the refresh time displayed is the maximum last update time between
    /// the monthly cache and the master cache, to prevent having a lower refresh time than the master cache refresh time, in the
    /// scenario where the master cache was refreshed later without data update (and thus without invalidating the monthly cache).
    /// </remarks>
    public void updateLastRefreshTimeValueAndControls(TransDate _endMonthDate)
    {
        var monthlyCacheConsumer = CostMonthlyInventoryCostObjectConsumer::newFromDate(_endMonthDate);

        if (monthlyCacheConsumer.hasInvalidCurrentOrPreviousMonths())
        {
            this.updateRefreshStateButtonImage(ImageReferenceSymbol::Warning);
            isMonthlyCacheUpToDate = false;

            // If the last refresh time has not been updated yet, fetch it from the cache consumer
            if (!lastMonthlyCacheRefreshTime)
            {
                lastMonthlyCacheRefreshTime = DateTimeutil::applyTimeZoneOffset(monthlyCacheConsumer.lastRefreshTime(), DateTimeUtil::getUserPreferredTimeZone());
            }
        }
        else
        {
            this.updateRefreshStateButtonImage(ImageReferenceSymbol::Accept);
            isMonthlyCacheUpToDate = true;

            utcdatetime costStatementCacheLastUpdateWithTimeZoneOffset = DateTimeutil::applyTimeZoneOffset(CostStatementCacheConsumer::getLastUpdate(), DateTimeUtil::getUserPreferredTimeZone());
            utcdatetime monthlyCacheLastUpdateWithTimeZoneOffset = DateTimeutil::applyTimeZoneOffset(monthlyCacheConsumer.getLastUpdate(), DateTimeUtil::getUserPreferredTimeZone());

            lastMonthlyCacheRefreshTime = max(costStatementCacheLastUpdateWithTimeZoneOffset, monthlyCacheLastUpdateWithTimeZoneOffset);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>