<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessBatchKanbanTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqEventProcessBatchKanbanTask</c> class processes the pending events in the
///    <c>ReqPeggingEvents</c> table.
/// </summary>
public class ReqEventProcessBatchKanbanTask extends ReqEventProcessBatch implements BatchRetryable
{
    LegalEntity             legalEntity;
    KanbanId                kanbanId;
    SalesId                 salesId;
    KanbanRuleRefRecId      kanbanRuleRefRecId;
    PlanReferenceRefRecId   planReferenceRefRecId;
    PlanActivityRefRecId    planActivityRefRecId;
    Map                     mapInsertedKanban;      //kanbanRule.RecId -> set Kanban.RecId
    Map                     mapUpdatedKanban;       //kanbanRule.RecId -> set Kanban.RecId
    Map                     mapDeletedKanban;       //kanbanRule.RecId -> set Kanban.RecId
    Set                     setSkipEvents;
    LeanKanbanJobStatus     minKanbanJobStatus;
    int                     ignoredEventsCount;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        legalEntity,
        planReferenceRefRecId,
        planActivityRefRecId,
        kanbanRuleRefRecId,
        kanbanId,
        salesId,
        minKanbanJobStatus
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addResultMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a result map.
    /// </summary>
    /// <param name="_addToMap">
    /// The map to add results to.
    /// </param>
    /// <param name="_addFromMap">
    /// A map to merge with existing results.
    /// </param>
    /// <remarks>
    /// The target map must be the insert, update or delete maps.
    /// The source map is expected to have a key of kanban rule record IDs mapped to a set of kanban record IDs.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addResultMap(
        Map _addToMap,
        Map _addFromMap)
    {
        MapEnumerator       me;
        KanbanRuleRefRecId  kanbanRuleRefRecIdLocal;
        Set                 setToMap;
        Set                 setFromMap;

        if (   _addToMap
            && _addFromMap
            && _addFromMap.elements())
        {
            me = _addFromMap.getEnumerator();
            while (me.moveNext())
            {
                kanbanRuleRefRecIdLocal = me.currentKey();
                setFromMap              = me.currentValue();

                if (_addToMap.exists(kanbanRuleRefRecIdLocal))
                {
                    setToMap = _addToMap.lookup(kanbanRuleRefRecIdLocal);
                    setToMap = Set::union(setToMap,setFromMap);
                }
                else
                {
                    setToMap = setFromMap;
                }

                _addToMap.insert(kanbanRuleRefRecIdLocal,setToMap);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSkipEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the provided <c>ReqPeggingEvent</c> record to the set of skipped pegging events.
    /// </summary>
    /// <param name="_reqPeggingEvent">
    ///    The <c>ReqPeggingEvent</c> record to add to the set.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addSkipEvent(ReqPeggingEvent _reqPeggingEvent)
    {
        if (_reqPeggingEvent)
        {
            if (!setSkipEvents)
            {
                setSkipEvents = new Set(Types::Int64);
            }

            setSkipEvents.add(_reqPeggingEvent.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessPeggingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an event can be processed.
    /// </summary>
    /// <param name="_sourceType">
    /// The type of source document.
    /// </param>
    /// <returns>
    /// true if the document can be processed, otherwise false;
    /// </returns>
    private boolean canProcessPeggingEvent(TableId _sourceType)
    {
        boolean result          = false;
        boolean noJobFiltering  = minKanbanJobStatus == LeanKanbanJobStatus::NotPlanned;

        switch (_sourceType)
        {
            case tableNum(KanbanRule):
                result = !kanbanId
                            && !salesId
                            && noJobFiltering;
                break;

            case tableNum(SalesLine):
                // we only process sales events in case we don't need to filter by job status
                result = !kanbanId
                            && noJobFiltering;
                break;

            case tableNum(KanbanJobIssue):
                // fall through
            case tableNum(KanbanJobPickingList):
                result = !salesId;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSessionID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the session ID from <c>ReqPeggingEvent</c> records.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void clearSessionID()
    {
        ReqPeggingEvent     reqPeggingEvent;
        TransDateTime       clearDateTime = DateTimeUtil::minValue();

        ttsbegin;
        update_recordset reqPeggingEvent
            setting @SessionId           = 0,
                    SessionLoginDateTime = clearDateTime
            where reqPeggingEvent.SessionId == sessionId();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean result = super();

        mapInsertedKanban   = new Map(Types::Int64,Types::Class);
        mapUpdatedKanban    = new Map(Types::Int64,Types::Class);
        mapDeletedKanban    = new Map(Types::Int64,Types::Class);

        ignoredEventsCount  = 0;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSelectiveProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the current event processing is selective.
    /// </summary>
    /// <returns>
    ///    true if the current processing is selective; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isSelectiveProcessing()
    {
        return    kanbanId
               || salesId
               || kanbanRuleRefRecId
               || planReferenceRefRecId
               || planActivityRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a given pegging event must be excluded from processing.
    /// </summary>
    /// <param name="_reqPeggingEvent">
    ///    The <c>ReqPeggingEvent</c> record to check.
    /// </param>
    /// <returns>
    ///    true if the record must be skipped; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustSkipEvent(ReqPeggingEvent _reqPeggingEvent)
    {
        KanbanRule  kanbanRule;
        KanbanFlow  kanbanFlow;
        boolean     result = !_reqPeggingEvent;

        // already marked to skip
        if (!result)
        {
            result =    setSkipEvents
                     && setSkipEvents.in(_reqPeggingEvent.RecId);
        }

        // kanban rule
        if (   !result
            && kanbanRuleRefRecId)
        {
            result = _reqPeggingEvent.KanbanRule != kanbanRuleRefRecId;
        }

        // production flow
        if (   !result
            && planReferenceRefRecId)
        {
            kanbanRule = KanbanRule::find(_reqPeggingEvent.KanbanRule);
            result     = kanbanRule.planReference().RecId != planReferenceRefRecId;
        }

        // last activity
        if (   !result
            && planActivityRefRecId)
        {
            kanbanRule = kanbanRule ? kanbanRule : KanbanRule::find(_reqPeggingEvent.KanbanRule);
            kanbanFlow = kanbanRule.kanbanFlow();
            result     = kanbanFlow.lastPlanActivity().RecId != planActivityRefRecId;
        }

        // mark event
        if (result)
        {
            this.addSkipEvent(_reqPeggingEvent);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        legalEntity = CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanId parmKanbanId(KanbanId _kanbanId = kanbanId)
    {
        kanbanId = _kanbanId;
        return kanbanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRuleRefRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRuleRefRecId parmKanbanRuleRefRecId(KanbanRuleRefRecId _kanbanRuleRefRecId = kanbanRuleRefRecId)
    {
        kanbanRuleRefRecId = _kanbanRuleRefRecId;
        return kanbanRuleRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinKanbanJobStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanKanbanJobStatus parmMinKanbanJobStatus(LeanKanbanJobStatus _minKanbanJobStatus = minKanbanJobStatus)
    {
        minKanbanJobStatus = _minKanbanJobStatus;

        return minKanbanJobStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanActivityRefRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivityRefRecId parmPlanActivityRefRecId(PlanActivityRefRecId _planActivityRefRecId = planActivityRefRecId)
    {
        planActivityRefRecId = _planActivityRefRecId;
        return planActivityRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanReferenceRefRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanReferenceRefRecId parmPlanReferenceRefRecId(PlanReferenceRefRecId _planReferenceRefRecId = planReferenceRefRecId)
    {
        planReferenceRefRecId = _planReferenceRefRecId;
        return planReferenceRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SalesId parmSalesId(SalesId _salesId = salesId)
    {
        salesId = _salesId;
        return salesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes pending events that match the user specified criteria.
    /// </summary>
    protected void processEvents()
    {
        #OCCRetryCount
        #define.maxLoops(100)

        using(KanbanJobDeferredSchedulingScope deferredSchedulingScope = new KanbanJobDeferredSchedulingScope())
        {
            utcdatetime     minCreatedDateTime  = utcDateTimeNull();
            boolean         doContinue  = true;
            int             loop        = 1;
            Session         session     = new Session(sessionId());

            // Events may cause other events.
            // Loop until there are no events left or a max number of loops is reached.
            while (   loop <= #maxLoops
                   && doContinue)
            {
                doContinue = false;

                //do not include records that may be inserted in the current iteration
                utcdatetime startDateTime = DateTimeUtil::utcNow();

                ReqPeggingEvent reqPeggingEvent;
                reqPeggingEvent.readPast(true);
                do
                {
                    try
                    {
                        ReqEventProcessingUsedEvents    usedEvents;
                        KanbanRule                      kanbanRule;

                        ttsbegin;

                        //select one record at a time in order to facilitate parallel batch processing
                        select firstonly pessimisticlock reqPeggingEvent
                            order by CreatedDateTime
                            where reqPeggingEvent.CreatedDateTime   <= startDateTime
                               && reqPeggingEvent.CreatedDateTime   >= minCreatedDateTime
                               && reqPeggingEvent.SessionId         == 0
                               && (reqPeggingEvent.KanbanRule       == kanbanRuleRefRecId
                               ||  !kanbanRuleRefRecId)
                        notExists join usedEvents
                            where reqPeggingEvent.RecId == usedEvents.ReqPeggingEvent;

                        minCreatedDateTime   = reqPeggingEvent.CreatedDateTime;
                    
                        if (reqPeggingEvent)
                        {
                            // add the event to the list of used ones so we don't process it again
                            ReqEventProcessingUsedEvents::addEvent(reqPeggingEvent);
                        }

                        if (reqPeggingEvent
                                && !this.mustSkipEvent(reqPeggingEvent))
                        {
                            Common common = null;

                            if (reqPeggingEvent.PeggingRequirement)
                            {
                                ReqPeggingAssignment    reqPeggingAssignment;
                                SourceDocumentLine      sourceDocumentLine;

                                // check if related to source document (event kanbans)
                                // reqPeggingAssignment saves data per company
                                select RecId, SourceRelationType from sourceDocumentLine
                                    exists join reqPeggingAssignment
                                        where reqPeggingAssignment.SourceDocumentLine       == sourceDocumentLine.RecId
                                           && reqPeggingAssignment.ReqPeggingAssignmentType == ReqPeggingAssignmentType::Requirement
                                           && reqPeggingAssignment.RecId                    == reqPeggingEvent.PeggingRequirement;

                                if (this.canProcessPeggingEvent(sourceDocumentLine.SourceRelationType))
                                {
                                    KanbanJob   kanbanJob;
                                    Kanban      kanban;

                                    // if selectively processing a specific sales order or kanban, do not initialize common
                                    // for event types that do not apply
                                    switch (sourceDocumentLine.SourceRelationType)
                                    {
                                        // if selectively processing a specific sales order or kanban, do not initialize common
                                        // for event types that do not apply
                                        case tableNum(SalesLine):
                                                SalesLine salesLine;
                                                select firstonly salesLine
                                                    where salesLine.SourceDocumentLine  == sourceDocumentLine.RecId
                                                       && (salesLine.SalesId            == salesId
                                                       ||  !salesId);

                                                common = salesLine;
                                            break;
                                        case tableNum(KanbanJobIssue):
                                                KanbanJobIssue kanbanJobIssue;
                                                select firstonly kanbanJob
                                                    where kanbanJob.Status >= minKanbanJobStatus
                                                    exists join kanbanJobIssue
                                                        where kanbanJobIssue.SourceDocumentLine  == sourceDocumentLine.RecId
                                                           && kanbanJobIssue.KanbanJob           == kanbanJob.RecId
                                                        exists join kanban
                                                            where kanban.RecId     == kanbanJob.Kanban
                                                               && kanban.Status    <  LeanKanbanStatus::Received
                                                               && (kanban.KanbanId == kanbanId
                                                               ||  !kanbanId);

                                                common = kanbanJob;
                                            break;
                                        case tableNum(KanbanJobPickingList):
                                                KanbanJobPickingList kanbanJobPickingList;
                                                select firstonly kanbanJobPickingList
                                                    where kanbanJobPickingList.SourceDocumentLine == sourceDocumentLine.RecId
                                                    exists join kanban
                                                        where kanban.RecId     == kanbanJobPickingList.Kanban
                                                            && kanban.Status    <  LeanKanbanStatus::Received
                                                            && (kanban.KanbanId == kanbanId
                                                            ||  !kanbanId)
                                                    exists join kanbanJob
                                                        where kanbanJob.RecId   == kanbanJobPickingList.Job
                                                            &&  kanbanJob.Status >= minKanbanJobStatus;

                                                common = kanbanJobPickingList;
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                //check if related to kanban rule (stock replenishment event kanbans)
                                if (reqPeggingEvent.KanbanRule
                                    && this.canProcessPeggingEvent(tableNum(KanbanRule)))
                                {
                                    select firstonly kanbanRule
                                        where kanbanRule.RecId       == reqPeggingEvent.KanbanRule
                                           && kanbanRule.LegalEntity == legalEntity
                                           && (kanbanRule.RecId      == kanbanRuleRefRecId
                                           ||  !kanbanRuleRefRecId);

                                    if (kanbanRule)
                                    {
                                        common = kanbanRule;
                                    }
                                }
                            }

                            boolean doDeletePeggingEvent = false;
                            boolean doUpdatePeggingEvent = false;

                            //process
                            if (common)
                            {
                                doContinue = true;

                                // if the event was processed, then the pegging event must be deleted
                                // if all pegging events are processed and the event was not in fact processed, then the event was invalid
                                doUpdatePeggingEvent = this.processOneEvent(common,reqPeggingEvent);
                                doDeletePeggingEvent =    doUpdatePeggingEvent
                                                       || !this.isSelectiveProcessing();
                            }
                            else
                            {
                                // if the event (common) does not exist and all events in the pegging event table are processed,
                                // then the event is invalid and the pegging event should be removed
                                // if the event cannot be validated, it should also be removed
                                doDeletePeggingEvent =    !this.isSelectiveProcessing()
                                                       || !reqPeggingEvent.validate();
   
                                ++ignoredEventsCount;
                            }

                            //delete
                            if (doDeletePeggingEvent)
                            {
                                reqPeggingEvent.delete();
                            }
                            else
                            {
                                this.addSkipEvent(reqPeggingEvent);

                                if (doUpdatePeggingEvent)
                                {
                                    reqPeggingEvent.SessionId            = session.sessionId();
                                    reqPeggingEvent.SessionLoginDateTime = session.loginDateTime();
                                    reqPeggingEvent.update();
                                }
                            }
                        }

                        ttscommit;
                    }
                    catch (Exception::Deadlock)
                    {
                        if (this.manageExceptionDeadlock())
                        {
                            retry;
                        }
                    }
                    catch (Exception::TransientSqlConnectionError)
                    {
                        if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                        {
                            retry;
                        }
                        else
                        {
                            throw;
                        }
                    }
                    catch (Exception::UpdateConflict)
                    {
                        if (this.manageExceptionUpdateConflict())
                        {
                            retry;
                        }
                    }
                    catch (Exception::DuplicateKeyException)
                    {
                        if (this.manageExceptionDuplicateKeyException())
                        {
                            retry;
                        }
                    }
                    catch (Exception::Error)
                    {
                        if (reqPeggingEvent)
                        {
                            // don't handle the error event again
                            this.addSkipEvent(reqPeggingEvent);
 
                            ttsbegin;
                            ReqPeggingEvent localReqPeggingEvent;

                            select pessimisticlock localReqPeggingEvent
                                where localReqPeggingEvent.CreatedDateTime == reqPeggingEvent.CreatedDateTime
                                && localReqPeggingEvent.RecId == reqPeggingEvent.RecId;
 
                            // It is possible that another thread reprocessed it.
                            if (localReqPeggingEvent)
                            {
                                localReqPeggingEvent.SessionId            = session.sessionId();
                                localReqPeggingEvent.SessionLoginDateTime = session.loginDateTime();
                                localReqPeggingEvent.update();
                            }
                            ttscommit;

                            // catch the exception, so that processing continues with the next record
                            error("@SYS4000035");
                        }
                        else
                        {
                            // rethrow
                            throw Exception::Error;
                        }
                    }
                }
                while (reqPeggingEvent);

                loop++;

                minCreatedDateTime = startDateTime;
            }
        }

        // clear the session ID
        this.clearSessionID();
        ReqEventProcessingUsedEvents::clearSession();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOneEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes an event using the <c>ReqEventProcessKanban</c> class.
    /// </summary>
    /// <param name="_common">
    ///    A <c>Common</c> record buffer.
    /// </param>
    /// <param name="_reqPeggingEvent">
    ///    A <c>ReqPeggingEvent</c> record buffer.
    /// </param>
    /// <returns>
    ///    true if the record was processed; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean processOneEvent(
        Common          _common,
        ReqPeggingEvent _reqPeggingEvent)
    {
        boolean result = _common.RecId;
        
        if (result)
        {
            LeanCoverage leanCoverage;
            ReqEventProcessParm reqEventProcessParm = ReqEventProcessParm::newReqPeggingEvent(_reqPeggingEvent);

            if (_common.TableId == tableNum(KanbanRule))
            {
                KanbanRule kanbanRule = _common;
                leanCoverage = kanbanRule.ruleData().parmLeanCoverage();
            }

            ReqEventProcessKanban reqEventProcessKanban;

            if (leanCoverage.RuleCoverageType == LeanRuleCoverageType::ProductFamily)
            {
                ForecastItemAllocationLine forecastItemAllocationLine;

                while select ItemId, InventDimId from forecastItemAllocationLine
                    where forecastItemAllocationLine.AllocationId == leanCoverage.AllocationId
                       && forecastItemAllocationLine.ItemId       != ''
                {
                     reqEventProcessKanban = ReqEventProcessKanban::newFromBatch(_common,
                                                                    kanbanRuleRefRecId,
                                                                    planReferenceRefRecId,
                                                                    planActivityRefRecId,
                                                                    false,
                                                                    reqEventProcessParm);
                    if (reqEventProcessKanban)
                    {
                        reqEventProcessKanban.parmProductFamilyItemId(forecastItemAllocationLine.ItemId);
                        reqEventProcessKanban.parmProductFamilyInventDimId(forecastItemAllocationLine.InventDimId);
                        reqEventProcessKanban.runOperation();
                        this.addresultInMap(reqEventProcessKanban);
                    }
                }
            }
            else
            {
                 reqEventProcessKanban = ReqEventProcessKanban::newFromBatch(_common,
                                                                kanbanRuleRefRecId,
                                                                planReferenceRefRecId,
                                                                planActivityRefRecId,
                                                                false,
                                                                reqEventProcessParm);
                if (reqEventProcessKanban)
                {
                    reqEventProcessKanban.runOperation();
                    this.addResultInMap(reqEventProcessKanban);
                }
            }

            result = reqEventProcessKanban.canDeletePeggingEvent();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the processing results in the infolog.
    /// </summary>
    protected void showResults()
    {
        KanbanRule      kanbanRule;
        Set             setKanbanRules;
        SetEnumerator   se;
        int             resultCount;
        int             totalCount;

        int resultCount(
            KanbanRuleRefRecId _kanbanRuleRefRecId,
            Map _map)
        {
            Set     set;
            int     result;

            if (   _map
                && _map.exists(_kanbanRuleRefRecId))
            {
                set = _map.lookup(_kanbanRuleRefRecId);

                result = set ? set.elements() : 0;
            }

            return result;
        }

        setKanbanRules = mapInsertedKanban ? mapInsertedKanban.keySet() : new Set(Types::Int64);
        setKanbanRules = mapUpdatedKanban  ? Set::union(setKanbanRules,mapUpdatedKanban.keySet()) : setKanbanRules;
        setKanbanRules = mapDeletedKanban  ? Set::union(setKanbanRules,mapDeletedKanban.keySet()) : setKanbanRules;

        setPrefix(ReqEventProcessBatchKanbanTask::description());

        if (   setKanbanRules
            && setKanbanRules.elements())
        {
            se = setKanbanRules.getEnumerator();
            while (se.moveNext())
            {
                kanbanRule = KanbanRule::find(se.current());
                setPrefix(kanbanRule ? strFmt("@SYS321492",kanbanRule.RuleId) : "@SYS321493");

                resultCount  = resultCount(kanbanRule.RecId,mapInsertedKanban);
                totalCount  += resultCount;
                if (resultCount)
                {
                    info(strFmt("@SYS321494",resultCount));
                }

                resultCount  = resultCount(kanbanRule.RecId,mapUpdatedKanban);
                totalCount  += resultCount;
                if (resultCount)
                {
                    info(strFmt("@SYS321495",resultCount));
                }

                resultCount  = resultCount(kanbanRule.RecId,mapDeletedKanban);
                totalCount  += resultCount;
                if (resultCount)
                {
                    info(strFmt("@SYS321496",resultCount));
                }
            }
        }

        if (minKanbanJobStatus > LeanKanbanJobStatus::NotPlanned
            && ignoredEventsCount > 0)
        {
            info(strFmt("@SYS4000047", ignoredEventsCount));
        }

        if (!totalCount)
        {
            info("@SYS321497");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the input parameters are valid.
    /// </summary>
    /// <param name="calledFrom">
    ///    An <c>Object</c> object that represents the caller; optional.
    /// </param>
    /// <returns>
    ///    true if the input parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        Kanban          kanban;
        KanbanRule      kanbanRule;
        PlanActivity    planActivity;
        boolean         result;

        result = super(calledFrom);

        if (result)
        {
            if (   planReferenceRefRecId
                && PlanReference::find(planReferenceRefRecId).LegalEntity != legalEntity)
            {
                result = checkFailed("@SYS332729");
            }

            if (   result
                && kanbanRuleRefRecId)
            {
                kanbanRule = KanbanRule::find(kanbanRuleRefRecId);
                if (kanbanRule.LegalEntity != legalEntity)
                {
                    result = checkFailed(strFmt("@SYS332730",kanbanRule.RuleId));
                }
            }

            if (   result
                && planActivityRefRecId)
            {
                planActivity = PlanActivity::find(planActivityRefRecId);
                if (planActivity.LegalEntity != legalEntity)
                {
                    result = checkFailed(strFmt("@SYS332912",planActivity.Name));
                }
            }

            if (   result
                && kanbanId)
            {
                kanban = Kanban::findKanbanId(kanbanId);

                if (!kanban)
                {
                    result = checkFailed(strFmt("@SYS332913",kanban.KanbanId));
                }
                else
                {
                    if (kanban.LegalEntity != legalEntity)
                    {
                        result = checkFailed(strFmt("@SYS332723",kanban.KanbanId));
                    }
                }
            }

            if (   result
                && salesId
                && !SalesTable::exist(salesId))
            {
                result = checkFailed(strFmt("@SYS332914",salesId));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqEventProcessBatchKanbanTask construct()
    {
        return new ReqEventProcessBatchKanbanTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the class description.
    /// </summary>
    /// <returns>
    /// A descdriptive string value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Description description()
    {
        return "@SYS321491";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of a <c>ReqEventProcessBatchKanbanTask</c> object.
    /// </summary>
    /// <param name="_planReferenceRefRecId">
    /// A record ID for the <c>PlanReference</c> table used as filter when processing; optional.
    /// </param>
    /// <param name="_planActivityRefRecId">
    ///A record ID for the <c>PlanActivity</c> table used as filter when processing; optional.
    /// </param>
    /// <param name="_kanbanRuleRefRecId">
    /// A record ID for the <c>KanbanRule</c> table used as filter when processing; optional.
    /// </param>
    /// <param name="_kanbanId">
    /// A <c>KanbanId</c> string identifier used as filter when processing; optional.
    /// </param>
    /// <param name="_salesId">
    /// A <c>SalesId</c> string identifier used as filter when processing; optional.
    /// </param>
    /// <param name="_minKanbanJobStatus">
    /// A minimum status in which the associated kanban job should be for the event to be processed; optional.
    /// </param>
    /// <returns>
    /// A <c>ReqEventProcessBatchKanbanTask</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessBatchKanbanTask newStandard(
        PlanReferenceRefRecId _planReferenceRefRecId = 0,
        PlanActivityRefRecId  _planActivityRefRecId  = 0,
        KanbanRuleRefRecId    _kanbanRuleRefRecId    = 0,
        KanbanId              _kanbanId              = '',
        SalesId               _salesId               = '',
        LeanKanbanJobStatus   _minKanbanJobStatus    = LeanKanbanJobStatus::NotPlanned)
    {
        ReqEventProcessBatchKanbanTask  reqEventProcessBatchTask = ReqEventProcessBatchKanbanTask::construct();

        reqEventProcessBatchTask.parmPlanReferenceRefRecId(_planReferenceRefRecId);
        reqEventProcessBatchTask.parmPlanActivityRefRecId(_planActivityRefRecId);
        reqEventProcessBatchTask.parmKanbanRuleRefRecId(_kanbanRuleRefRecId);
        reqEventProcessBatchTask.parmKanbanId(_kanbanId);
        reqEventProcessBatchTask.parmSalesId(_salesId);
        reqEventProcessBatchTask.parmMinKanbanJobStatus(_minKanbanJobStatus);
        return reqEventProcessBatchTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResultInMap</Name>
				<Source><![CDATA[
    private void addResultInMap(ReqEventProcessKanban _reqEventProcessKanban)
    {
        this.addResultMap(mapInsertedKanban, _reqEventProcessKanban.mapInsertedKanban());
        this.addResultMap(mapUpdatedKanban, _reqEventProcessKanban.mapUpdatedKanban());
        this.addResultMap(mapDeletedKanban, _reqEventProcessKanban.mapDeleteKanban());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>