<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportXML_SZV63</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportXML_SZV63 extends RPayPFReportXML
{
    NoYesId     showZero;
    DialogField showZeroDlg;

    RHRMEmplId          currentEmplId;
    str                 personCategoryId; //НР, ОЗОИ
    int                 agreementType;
    ReportPeriod_RU     curPeriod;
    container           conKey, conValue;
    RPayAmount          docFundAmount, docFundBaseAmount;
    boolean             newDoc;
    Counter             rowCnt, totalDocRows;
    int                 packageNumberLast;
    Map                 packageNumbers;
    RPayRateCode        livingTypeRate;

    #define.ReportTitle("@RUP3322")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>descriptionTag</Name>
				<Source><![CDATA[
    protected str descriptionTag()
    {
        return 'ВХОДЯЩАЯ_ОПИСЬ_ПО_СУММАМ_ВЫПЛАТ';
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        taxPeriod     = RPayReportSocialTaxPeriod::Year;
        corrTaxPeriod = RPayReportSocialTaxPeriod::Year;

        dialog = super();
        dialog.addGroup("@SYS28007");
        showZeroDlg = dialog.addFieldValue(extendedTypeStr(NoYesId), showZero, "@RUP3325", "@RUP3326");

        taxPeriodField.visible(false);
        corrTaxPeriodField.visible(false);
        taxPeriod2010Field.visible(false);
        corrTaxPeriod2010Field.visible(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docQty</Name>
				<Source><![CDATA[
    protected int docQty(
        str 100             _docType,
        str 20              _personCategory = '',
        RPayPFSeniorityType _seniorityType = RPayPFSeniorityType::None)
    {
        int ret;

        ret = conpeek(conValue, 3);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplTraverse</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void emplTraverse()
    {
        RHRMEmplTable   emplTableLocal;
        Map             dataMap;
        MapEnumerator   mapEnum;
        FileName        fileName;
        container       docKey, tmpKey;

        dataMap = holderData.getMap();

        if (dataMap.elements())
        {
            this.progressInit(this.caption(), dataMap.elements(), #AviFormLetter);
            progress.updateInterval(0);

            mapEnum = dataMap.getEnumerator();

            while (mapEnum.moveNext())
            {
                conKey   = mapEnum.currentKey();
                conValue = mapEnum.currentValue();

                this.unpackKey();
                emplTableLocal = RHRMEmplTable::find(currentEmplId);
                progress.setText(strFmt("@RUP3038", emplTableLocal.EmployeeId, emplTableLocal.Name()));

                if (this.isNewPackage() && (showZero || (conpeek(conValue, 1) && conpeek(conValue, 2))))
                {
                    if (xmlDoc)
                    {
                        new FileIOPermission(fileName, #io_write).assert();
                        xmlDoc.save(fileName);
                        CodeAccessPermission::revertAssert();
                        xmlDoc = NULL;
                    }

                    fileName = conpeek(this.fileName(), 1);
                    if (this.makeDocument())
                    {
                        this.fillHeader(#DocTypeSZV63, personCategoryId);
                    }
                    else
                    {
                        throw Exception::Error;
                    }
                }

                if (xmlDoc && this.isNewDocument() && (showZero || (conpeek(conValue, 1) && conpeek(conValue, 2))))
                {
                    this.fillDocument(emplTableLocal);
                    docKey = conKey;
                    docKey = condel(docKey, conlen(docKey), 1);
                }

                tmpKey = conKey;
                tmpKey = condel(tmpKey, conlen(tmpKey), 1);

                if (xmlDoc && this.isNewRow() && newDoc && tmpKey == docKey)
                {
                    this.fillRows();
                }

                progress.incCount();
            }

            if (xmlDoc)
            {
                new FileIOPermission(conpeek(this.fileName(), 1), #io_write).assert();
                xmlDoc.save(fileName);
                CodeAccessPermission::revertAssert();
                xmlDoc = NULL;
            }

            if (!printedEmplSet.elements())
            {
                info("@GLS101555");
            }
        }
        else
        {
            info("@GLS101555");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void fillDocument(RHRMEmplTable _emplTable)
    {
        DirPersonName dirPersonName = _emplTable.personTable().dirPersonName();
        RHRMSortOfWork sortOfWork;
        SysDictEnum    dictEnum;

        numInPack++;
        xmlLevel_3 = this.appendXMLElement(xmlLevel_2, #DocTypeSZV63);
            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'НомерВпачке', int2str(numInPack));
            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ТипСведений', this.dataType());
            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'СтраховойНомер', _emplTable.payPFRINN());

            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ФИО');
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Фамилия',   strupr(dirPersonName.LastName));
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Имя',       strupr(dirPersonName.FirstName));
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Отчество',  strupr(dirPersonName.MiddleName));

            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'РегистрационныйНомер',      companyInfo.PFRegNum_RU);
            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'НаименованиеКраткое',       strreplace(strreplace(strupr(companyInfo.Name), '«', '\''), '»', '\''));

            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'НалоговыйНомер');
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'ИНН',       CompanyInfoHelper::partyINN_RU(companyInfo));
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'КПП',       CompanyInfoHelper::partyKPP_RU(companyInfo));

            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'КодКатегории', personCategoryId);

            dictEnum = new SysDictEnum(enumnum(RHRMSortOfWork));
            if (dictEnum.lastValue() >= (agreementType - 1) && dictEnum.firstValue() <= (agreementType - 1))
            {
                sortOfWork = agreementType - 1;

                switch (sortOfWork)
                {
                    case RHRMSortOfWork::CivilContract:
                        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ТипДоговора',      #ContractTypeCivil);
                        break;

                    default:
                        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ТипДоговора',      #ContractTypeLabor);
                }
            }

            switch (reportType)
            {
                case RpayPensionFundExportKindOfCorrection::Cancellative:
                    xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ОтчетныйГод',       int2str(corrReportYear));
                    break;

                case RpayPensionFundExportKindOfCorrection::None:
                    xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ОтчетныйГод',       int2str(reportYear));
                    break;

                case RpayPensionFundExportKindOfCorrection::Correctional:
                    xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ОтчетныйГод',       int2str(corrReportYear));
                    break;
            }

            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ДатаЗаполнения',    date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 123, 2, 2, 2, 2, 4, DateFlags::None));

        docFundAmount     = conpeek(conValue, 1);
        docFundBaseAmount = conpeek(conValue, 2);

        rowCnt       = 0;
        newDoc       = true;
        totalDocRows = conpeek(conValue, 4);
        printedEmplSet.add(currentEmplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    protected void fillHeader(str 100               _docType,
                              str 20                _personCategory,
                              RPayPFSeniorityType   _seniorityType  = RPayPFSeniorityType::None)
    {
        SysDictEnum     dictEnum;
        RHRMSortOfWork  sortOfWork;
        RPayAmount      fundAmount, fundBaseAmount;

        super(_docType, _personCategory, _seniorityType);

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ТипСведений',       this.dataType());
        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'КодКатегории',      _personCategory);

        dictEnum = new SysDictEnum(enumnum(RHRMSortOfWork));
        if (dictEnum.lastValue() >= (agreementType - 1) && dictEnum.firstValue() <= (agreementType - 1))
        {
            sortOfWork = agreementType - 1;

            switch (sortOfWork)
            {
                case RHRMSortOfWork::CivilContract:
                    xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ТипДоговора',      #ContractTypeCivil);
                    break;

                default:
                    xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ТипДоговора',      #ContractTypeLabor);
            }
        }

        switch (reportType)
        {
            case RpayPensionFundExportKindOfCorrection::Cancellative:
                xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ОтчетныйГод',       int2str(corrReportYear));
                break;

            case RpayPensionFundExportKindOfCorrection::None:
                xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ОтчетныйГод',       int2str(reportYear));
                break;

            case RpayPensionFundExportKindOfCorrection::Correctional:
                xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ОтчетныйГод',       int2str(corrReportYear));
                break;
        }

        fundAmount      = conpeek(conValue, 1);
        fundBaseAmount  = conpeek(conValue, 2);

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'СуммаВыплатИвознаграждений');
        xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'ТипСтроки',     #PackTotal);
        xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'СуммаВыплатВсего',     num2str(fundAmount, 1, 2, 1, 0));
        xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'СуммаВыплатНачисленыСтраховыеВзносы',      num2str(fundBaseAmount, 1, 2, 1, 0));

        docFundAmount     = 0;
        docFundBaseAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRows</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillRows()
    {
        RPayAmount      fundAmount, fundBaseAmount;

        void addRow(str _lineType, RPayAMount _fundAmount, RPayAmount _baseAmount)
        {
            Months          mthNo;

            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'СуммаВыплатИвознаграждений');
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'ТипСтроки', _lineType);
            if (_lineType == #LineTypeMth)
            {
                mthNo      = mthofYr(curPeriod);
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Месяц', int2str(mthNo));
            }
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'СуммаВыплатВсего',     num2str(_fundAmount, 1, 2, 1, 0));
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'СуммаВыплатНачисленыСтраховыеВзносы',      num2str(_baseAmount, 1, 2, 1, 0));
            rowCnt++;
        }

        fundAmount      = conpeek(conValue, 1);
        fundBaseAmount  = conpeek(conValue, 2);

        addRow(#LineTypeMth, fundAmount, fundBaseAmount);

        if (rowCnt == totalDocRows)
        {
            addRow(#LineTypeTotal, docFundAmount, docFundBaseAmount);
            newDoc = false;
            rowCnt = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            showZero = showZeroDlg.value();
        }

        reportStartPeriod     = mkDate(1, 1, reportYear);
        corrReportStartPeriod = mkDate(1, 1, corrReportYear);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>holderKey</Name>
				<Source><![CDATA[
    protected container holderKey()
    {
        return [personCategoryId, agreementType, packageNum, currentEmplId, curPeriod];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmployeesData</Name>
				<Source><![CDATA[
    protected void initEmployeesData()
    {
        RHRMEmplTable   emplTableLocal;
        RHRMEmplTable   emplTableMainLocal;
        Set         processedEmplSet    = new Set(Types::String);

        this.progressInit("@RUP1997", SysQuery::countTotal(queryRun), #AviFormLetter);
        progress.updateInterval(0);

        packageNumberLast = packageNum;

        while (queryRun.next())
        {
            emplTableLocal = queryRun.get(tablenum(RHRMEmplTable));

            progress.setText(strFmt("@RUP3038", emplTableLocal.EmployeeId, emplTableLocal.Name()));

            if (! processedEmplSet.in(emplTableLocal.PayMainEmplId))
            {
                emplTableMainLocal = emplTableLocal.emplTableMain();

                if (this.checkEmplIsInsured(emplTableLocal, false))
                {
                    this.initHolderData(emplTableMainLocal);
                }

                processedEmplSet.add(emplTableLocal.PayMainEmplId);
            }

            progress.incCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHolderData</Name>
				<Source><![CDATA[
    protected void initHolderData(RHRMEmplTable _emplTable)
    {
        RPayAmount          fundTotalAmount, dedAmount, dedAmountDis;
        int                 monthIdx;
        container           contractInfo, pckg;
        Set                 docs = new Set(Types::Container);
        TransDate           curPeriodRate;
        boolean             docKeyExist;
        Map                 dataMap;
        int                 docInVertex;
        RPayPFReportCalc    reportCalc;
        container           conAmount, dedAmounts;
        boolean             temporaryLiving;

        #define.docKey([personCategoryId, agreementType, packageNum, currentEmplId])
        #define.packageKey([personCategoryId, agreementType])
        #define.docNumberKey([personCategoryId, agreementType, packageNum, "", ""])

        currentEmplId   = _emplTable.PayMainEmplId;

        reportCalc = new RPayPFReportCalc();
        reportCalc.corReportPeriod(this.currentPeriod(1), this.currentPeriod(12));
        reportCalc.parmEmplId(currentEmplId);
        reportCalc.parmFund(payTaxParameters.PensionFundInsurance);
        reportCalc.setDeductionCodes([[SysQuery::valueNot(payTaxParameters.PensionFundinvalidDeduction), true], [payTaxParameters.PensionFundinvalidDeduction, true]]);
        reportCalc.init();
        reportCalc.calc();

        for (monthIdx = 1; monthIdx <= 12; monthIdx++)
        {
            contractInfo  = this.contractMthInfo(_emplTable, mkDate(1, monthIdx, reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear));
            curPeriod     = this.currentPeriod(monthIdx);

            [conAmount, dedAmounts] = reportCalc.periodAmount(curPeriod);
            fundTotalAmount = conpeek(conAmount, 1);
            fundAmountIns   = conpeek(conAmount, 3);
            [dedAmount, dedAmountDis] = dedAmounts;

            if (fundTotalAmount != 0 || (this.checkEmplIsInsuredMth(_emplTable, curPeriod, false) && conpeek(contractInfo, 2)))
            {
                agreementType = conpeek(contractInfo, 1) + 1;

                if (dedAmountDis == 0)
                {
                    personCategoryId = #InsuredPersonCatEmployee;

                    if (disabilityRateTable)
                    {
                        curPeriodRate = endMth(mkDate(1, monthIdx, year(curPeriod)));

                        if (disabilityRateTable.getValue(RPayRateCallContext::construct(curPeriodRate, _emplTable.PayMainEmplId)) > 0)
                        {
                            personCategoryId = this.insPersonCatDisabled(year(curPeriod));
                        }
                    }
                }
                else
                {
                    personCategoryId = this.insPersonCatDisabled(year(curPeriod));
                }

                if (fundTotalAmount || showZero)
                {
                    if (RPayRateTable::find(payTaxParameters.InsuredForeignCitizens).getValue(RPayRateCallContext::construct(curPeriod, currentEmplId)) > 0)
                    {
                        temporaryLiving = RPayRateTable::find(livingTypeRate).getValue(RPayRateCallContext::construct(curPeriod, currentEmplId)) > 0;

                        if (personCategoryId == #InsuredPersonCatEmployee)
                        {
                            if (temporaryLiving)
                            {
                                personCategoryId = #TempLiveForeign;
                            }
                            else
                            {
                                personCategoryId = #TempResidenceForeign;
                            }
                        }
                        else
                        {
                            if (temporaryLiving)
                            {
                                personCategoryId = #TempLiveForeignDis;
                            }
                            else
                            {
                                personCategoryId = #TempResidenceForeignDis;
                            }
                        }
                    }

                    docKeyExist = docs.in(#docKey);

                    if (packageNumbers.exists(#packageKey))
                    {
                        packageNum = packageNumbers.lookup(#packageKey);
                        dataMap    = holderData.getMap();

                        if (!docKeyExist && dataMap.exists(#docNumberKey))
                        {
                            pckg = dataMap.lookup(#docNumberKey);
                            docInVertex = conpeek(pckg, 3);
                            if (maxDocPerFile > 0 && docInVertex >= maxDocPerFile)
                            {
                                packageNum = packageNumberLast;
                                packageNumbers.insert(#packageKey, packageNum);
                                packageNumberLast++;
                            }
                        }
                    }
                    else
                    {
                        packageNum = packageNumberLast;
                        packageNumbers.insert(#packageKey, packageNum);
                        packageNumberLast++;
                    }

                    this.insertHolderData([fundTotalAmount, fundTotalAmount - dedAmount, docKeyExist ? 0 : 1, 1]); //counters were added to count vertex

                    if (!docKeyExist)
                    {
                        docs.add(#docKey); //use part of key to recognize document vs rows
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected void initParameters()
    {
        super();
        packageNumbers = new Map(Types::Container, Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isNewDocument()
    {
        boolean ret = true;
        int i;

        //check for element is on the last level of tree
        for (i = 1; i < conlen(conKey); i++)
        {
            ret = ret && conpeek(conKey, i);

            if (!ret) break;
        }

        //check if it is a leaf of the tree
        if (ret)
        {
            ret = ret && !conpeek(conKey, i);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewPackage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isNewPackage()
    {
        return (personCategoryId && agreementType && packageNum && !currentEmplId && !curPeriod && !newDoc) ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewRow</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isNewRow()
    {
        return personCategoryId && agreementType && packageNum && currentEmplId && curPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (! this.checkCompanyInfo() || ! this.checkTaxParameters())
        {
            return;
        }

        livingTypeRate = RPayCounterTable::find(payTaxParameters.CounterUnit2011).PayRateEmpl;

        this.initEmployeesData();
        this.emplTraverse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodDialogFields</Name>
				<Source><![CDATA[
    protected void setPeriodDialogFields(RpayPensionFundExportKindOfCorrection _reportType, Yr _year, Yr _corrYear)
    {
        taxPeriodField.visible(false);
        corrTaxPeriodField.visible(false);
        taxPeriod2010Field.visible(false);
        corrTaxPeriod2010Field.visible(false);

        if (_reportType == RpayPensionFundExportKindOfCorrection::None)
        {
            corrPeriodGroup.visible(false);
        }
        else
        {
            corrPeriodGroup.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackKey</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void unpackKey()
    {
        personCategoryId    = conpeek(conKey, 1);
        agreementType       = conpeek(conKey, 2);
        packageNum          = conpeek(conKey, 3);
        currentEmplId       = conpeek(conKey, 4);
        curPeriod           = conpeek(conKey, 5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>