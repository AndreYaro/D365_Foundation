<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTransferAutoRTWContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSTransferAutoRTWContract</c> is responsible for carrying parameters for the automatic release of transfer orders.
/// </summary>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(WHSTransferAutoRTWUIBuilder))
]
public class WHSTransferAutoRTWContract implements SysOperationInitializable, SysOperationValidatable
{
    WHSReleaseQuantitySpecification     releaseQuantitySpecification;
    NoYes                               allowPartiallyReleased;
    NoYes                               groupIntoMultipleReleases;
    Query                               query;
    str                                 packedQuery;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWHSReleaseQuantitySpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the data contract parameter.
    /// </summary>
    /// <param name="_value">
    /// The new value of the data contract parameter; optional.
    /// </param>
    /// <returns>
    /// The current value of data contract parameter.
    /// </returns>
    [
        DataMemberAttribute('WHSReleaseQuantitySpecification'),
        SysOperationDisplayOrderAttribute("1")
    ]
    public WHSReleaseQuantitySpecification parmWHSReleaseQuantitySpecification(WHSReleaseQuantitySpecification _value = releaseQuantitySpecification)
    {
        releaseQuantitySpecification = _value;
        return releaseQuantitySpecification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowPartiallyReleased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the data contract parameter.
    /// </summary>
    /// <param name="_value">
    /// The new value of the data contract parameter; optional.
    /// </param>
    /// <returns>
    /// The current value of data contract parameter.
    /// </returns>
    [
         DataMemberAttribute('AllowPartiallyReleased'),
         SysOperationDisplayOrderAttribute("2"),
         SysOperationLabelAttribute(literalStr("@SYP4881422")),
         SysOperationHelpTextAttribute(literalStr("@WAX:AllowPartiallyReleased_Label"))   
    ]
    public NoYes parmAllowPartiallyReleased(NoYes _value = allowPartiallyReleased)
    {
        allowPartiallyReleased = _value;
        return allowPartiallyReleased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupIntoMultipleReleases</Name>
				<Source><![CDATA[
    [
         DataMemberAttribute('GroupIntoMultipleReleases'),
         SysOperationDisplayOrderAttribute("3"),
         SysOperationLabelAttribute(literalStr("@WAX:WHSReleaseToWarehouseServiceGroupIntoMultipleReleasesLabel")),
         SysOperationHelpTextAttribute(literalStr("@FieldDescriptions_WHS:WHSReleaseToWarehouseService_GroupIntoMultipleReleases"))
    ]
    public NoYes parmGroupIntoMultipleReleases(NoYes _value = groupIntoMultipleReleases)
    {
        groupIntoMultipleReleases = _value;
        return groupIntoMultipleReleases;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the contract.
    /// </summary>
    public void initialize()
    {
        query = new Query(queryStr(WHSTransferAutoRTWQuery));
        this.parmQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the packed query data contract parameter.
    /// </summary>
    /// <param name="_packedQuery">
    /// The new value of the packed query data contract parameter; optional.
    /// </param>
    /// <returns>
    /// The current value of the packed query data contract parameter.
    /// </returns>
    [
        DataMemberAttribute,
        AifQueryTypeAttribute('_packedQuery', queryStr(WHSTransferAutoRTWQuery))
    ]
    public str parmPackedQuery(str _packedQuery = packedQuery)
    {
        packedQuery = _packedQuery;
        return packedQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the query that provides the sorted list of transfer orders that should be released to warehouse.
    /// </summary>
    /// <param name="_query">
    /// The query that provides the sorted list of transfer orders that should be released to warehouse.
    /// </param>
    /// <returns>
    /// The query that provides the sorted list of transfer orders that should be released to warehouse.
    /// </returns>
    public Query parmQuery(Query _query = query)
    {
        if (prmisDefault(_query))
        {
            // Cannot return query directly as this query may not contain any datasource information, so query need to be initialized from packed query str
            query = new Query(SysOperationHelper::base64Decode(packedQuery));
        }
        else
        {
            packedQuery = SysOperationHelper::base64Encode(_query.pack());
            query = _query;
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        if (!this.parmQuery().dataSourceTable(tableNum(InventTransferTable)))
        {
            return checkFailed(strFmt("@SYS303331", tableStr(InventTransferTable)));
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>