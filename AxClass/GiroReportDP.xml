<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GiroReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>GiroReportDP</c> is the report Data Provider class for all GIRO payment stub  reports.
/// </summary>
[
    SRSReportParameterAttribute(classStr(GiroReportContract))
]
public class GiroReportDP extends SrsReportDataProviderPreProcess
{
    GiroReportTmp giroReportTmpNew;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getGiroReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>GiroReportTmp</c> table with the data and returns it.
    /// </summary>
    /// <returns>
    ///    The <c>GiroReportTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(GiroReportTmp))
    ]
    public GiroReportTmp getGiroReportTmp()
    {
        select giroReportTmpNew;
        return giroReportTmpNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Calls sub methods depending on the parameters.
    /// </remarks>
    public void processReport()
    {
        GiroReportContract contract = this.parmDataContract() as GiroReportContract;
        RecId giroReportTmpRecId = contract.parmGiroReportTmpRecId();
        GiroReportTmp giroReportTmp;

        // If no data was available say so!
        if (!GiroReportTmp::waitToPopulate(giroReportTmpRecId))
        {
            throw error(Error::missingRecord(tableStr(GiroReportTmp)));
        }

        // Set the userconnection to use on table.
        // This is required to ensure that createdTransactionId of inserted record is different than default transaction and
        // the same as the createdTransactionId of the main report's records.
        giroReportTmpNew.setConnection(this.parmUserConnection());

        // A preprocessed RDP class depends on records having the CreatedTransactionId field set,
        // so we insert a copy of the GIRO record to fulfill that requirement.  Once the RDP class
        // has a new record, we can delete the original.
        select giroReportTmp where giroReportTmp.RecId == giroReportTmpRecId;
        giroReportTmpNew.data(giroReportTmp);
        // Resetting the value of AltRecId to the last giro record's recid since it is used to filter the records on the report.
        // AltRecId value will not be correct in case of proforma invoice.
        giroReportTmpNew.AltRecId = giroReportTmpRecId;
        giroReportTmpNew.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>