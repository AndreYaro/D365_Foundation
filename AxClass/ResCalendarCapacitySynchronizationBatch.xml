<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCalendarCapacitySynchronizationBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Synchronizes capacity for all calendars used by resources of the company.
/// </summary>
class ResCalendarCapacitySynchronizationBatch extends ResCapacitySynchronizationTask implements BatchRetryable
{
    const Integer CurrentVersion = 3;
    private ProjOpsFinancialsLogger logger;

    #LOCALMACRO.CurrentList
        fromDate,
        toDate,
        periodCode,
        removeExistingRecords
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;
        Integer version = conPeek(packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addControlsToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates dialog with controls.
    /// </summary>
    /// <param name = "_dialog">Dialog to add controls to.</param>
    protected void addControlsToDialog(DialogRunbase _dialog)
    {
        super(_dialog);

        this.initializeDateValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDateValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize date values on the dialog.
    /// </summary>
    protected void initializeDateValues()
    {
        date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        dialogToDate.value(currentDate);
        dialogFromDate.value(currentDate);
        dialogRemoveExistingRecords.value(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        logger = ProjOpsFinancialsLogger::createLogger(classStr(ResCalendarCapacitySynchronizationBatch));
        using (SysInstrumentationActivityContext activityContext = logger.projOpsFinActivity()
            .activityContext(ProjOpsFinancialsInstrumentationActivites::ResCalendarCapacityBatchDataPopulate))
        {
            Batch batchInstance = this.parmCurrentBatch();
            BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            ResCalendarCapacitySynchronizationTask calendarCapacitySynchronization;

            this.initDates(false);

            // If remove existing records, then remove all records in the ResCalendarCapacity table.
            if (removeExistingRecords)
            {
                // Remove ResCalendarCapacity table data.
                str deleteResCalendarCapacitySqlStatement = ResSchedulingSQLObjects::getDeleteResCalendarCapacityTablesSQLStatement();
                this.executeSQLStatement(deleteResCalendarCapacitySqlStatement);
            }

            utcdatetime fromDateUTC = this.getFromDateUtc();
            utcdatetime toDateUTC = this.getToDateUtc();
            
            ResTmpCalendar tmpCalendar;
            this.insertCalendarByResource(tmpCalendar, fromDateUTC, toDateUTC);
            this.insertCalendarByProject(tmpCalendar);
            this.insertCalendarByCompanyDefaultCalendar(tmpCalendar);

            int calendarCount;
            // Allow process to execute across all legal entities
            while select CalendarDataAreaId, CalendarId from tmpCalendar
                order by tmpCalendar.CalendarDataAreaId
            {
                calendarCapacitySynchronization = ResCalendarCapacitySynchronizationTask::construct();
                calendarCapacitySynchronization.parmCalendarId(tmpCalendar.CalendarId);
                calendarCapacitySynchronization.parmCalendarDataAreaId(tmpCalendar.CalendarDataAreaId);
                calendarCapacitySynchronization.parmFromDate(fromDate);
                calendarCapacitySynchronization.parmToDate(toDate);
                calendarCapacitySynchronization.parmPeriodCode(periodCode);
                calendarCapacitySynchronization.parmRemoveExistingRecords(false);
            
                if (batchInstance)
                {
                    batchHeader.addRuntimeTask(calendarCapacitySynchronization, batchInstance.RecId);
                }
                else
                {
                    batchHeader.addTask(calendarCapacitySynchronization);
                }
                calendarCount++;
            }
            
            if (calendarCapacitySynchronization)
            {
                batchHeader.save();
            }

            this.logExecutionTelemetry(activityContext, calendarCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExecutionTelemetry</Name>
				<Source><![CDATA[
    private void logExecutionTelemetry(SysInstrumentationActivityContext _activityContext, int _numOfCalendars)
    {
        FromDate fromDateParm = fromDate;
        ToDate toDateParm = toDate;
        _activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::ResCalendarCapacityTotalCalendars, int2Str(_numOfCalendars));
        _activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::ResCalendarCapacityTotalRemovedExistingRecords, removeExistingRecords ? 'true' : 'false');

        boolean usePeriodCode;
        if (periodCode != '')
        {
            usePeriodCode = true;
            LedgerPeriodCode ledgerPeriodCode = LedgerPeriodCode::find(periodCode);
            if (ledgerPeriodCode.RecId)
            {
                fromDateParm = ledgerPeriodCode.fromDate();
                toDateParm = ledgerPeriodCode.toDate();
            }
        }

        int durationInDays = toDateParm - fromDateParm;
        _activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::ResCalendarCapacityUsePeriodCode, usePeriodCode ? 'true' : 'false');
        _activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::ResCalendarCapacityDurationInDays, int2Str(durationInDays));
        logger.logInformation(strFmt('FromDate %1', date2Str(fromDateParm, 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4)));
        logger.logInformation(strFmt('ToDate %1', date2Str(toDateParm, 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCalendarByResource</Name>
				<Source><![CDATA[
    private void insertCalendarByResource(ResTmpCalendar _resTempCalendar, utcdatetime _fromDateUTC, utcdatetime _toDateUTC)
    {
        WorkCalendarTable calendarTable;
        ResResourcesCalendarView resourcesrCalendarView;
        ttsbegin;
        
        while select crosscompany DataAreaId, CalendarId from calendarTable
            group by calendarTable.DataAreaId, calendarTable.CalendarId
            exists join resourcesrCalendarView
            where resourcesrCalendarView.Calendar == calendarTable.RecId &&
                resourcesrCalendarView.ValidFrom <= _toDateUTC &&
                resourcesrCalendarView.ValidTo >= _fromDateUTC
        {
            _resTempCalendar.CalendarDataAreaId = calendarTable.DataAreaId;
            _resTempCalendar.CalendarId = calendarTable.CalendarId;
            _resTempCalendar.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCalendarByProject</Name>
				<Source><![CDATA[
    private void insertCalendarByProject(ResTmpCalendar _resTempCalendar)
    {
        WorkCalendarTable calendarTable;
        ProjTable projTable;

        ttsbegin;
        
        while select crosscompany DataAreaId, CalendarId from calendarTable
            group by calendarTable.DataAreaId, calendarTable.CalendarId
            exists join projTable
            where projTable.DataAreaId == calendarTable.DataAreaId &&
                projTable.PSASchedCalendarId == calendarTable.CalendarId
        {
            if (!this.tmpCalendarExists(_resTempCalendar, calendarTable.DataAreaId, calendarTable.CalendarId))
            {
                _resTempCalendar.CalendarDataAreaId = calendarTable.DataAreaId;
                _resTempCalendar.CalendarId = calendarTable.CalendarId;
                _resTempCalendar.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCalendarByCompanyDefaultCalendar</Name>
				<Source><![CDATA[
    private void insertCalendarByCompanyDefaultCalendar(ResTmpCalendar _resTempCalendar)
    {
        WorkCalendarTable calendarTable;

        ttsbegin;
        PSAParameters psaParameters;

        while select crosscompany DataAreaId, CalendarId from calendarTable
            group by calendarTable.DataAreaId, calendarTable.CalendarId
            exists join psaParameters
            where psaParameters.DataAreaId == calendarTable.DataAreaId &&
                psaParameters.SchedDefaultCalendar == calendarTable.CalendarId
        {
            if (!this.tmpCalendarExists(_resTempCalendar, calendarTable.DataAreaId, calendarTable.CalendarId))
            {
                _resTempCalendar.CalendarDataAreaId = calendarTable.DataAreaId;
                _resTempCalendar.CalendarId = calendarTable.CalendarId;
                _resTempCalendar.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpCalendarExists</Name>
				<Source><![CDATA[
    private boolean tmpCalendarExists(ResTmpCalendar _tmpCalendar,
        DataAreaId _calendardataAreaId, CalendarId _calendarId)
    {
        ResTmpCalendar copyResTmpClendar;
        copyResTmpClendar.setTmpData(_tmpCalendar);

        select firstOnly RecId from copyResTmpClendar
            where copyResTmpClendar.CalendardataAreaId == _calendardataAreaId &&
                copyResTmpClendar.CalendarId == _calendarId;

        return copyResTmpClendar ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ResCalendarCapacitySynchronizationBatch construct()
    {
        return new ResCalendarCapacitySynchronizationBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Res:CalendarCapacitySynchronization";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        var task = ResCalendarCapacitySynchronizationBatch::construct();

        if (task.prompt())
        {
            task.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQLStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute SQL statement.
    /// </summary>
    /// <param name = "_statement">SQL statement string.</param>
    private void executeSQLStatement(str _statement)
    {
        Connection connection = new Connection();

        if (connection)
        {
            try
            {
                
                Statement stmt = connection.createStatement();   
                new SqlStatementExecutePermission(_statement).assert();
                stmt.executeUpdate(_statement);
                CodeAccessPermission::revertAssert();
                stmt.close();
            }
            catch
            {
                throw error(strFmt("@SYS93289"));  // Operation canceled
            }
            finally
            {
                connection.finalize();
            }
        }
        else
        {
            throw error(strFmt("@SYS73525"));  // Connection not established
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>