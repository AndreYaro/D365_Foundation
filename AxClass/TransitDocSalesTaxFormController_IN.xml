<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransitDocSalesTaxFormController_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller for maintaining the transit document attached to a transaction.
/// </summary>
/// <remarks>
/// Currently the controller class is only for the <c>TransitDocumentSalesTaxForm_IN</c>
/// </remarks>
public class TransitDocSalesTaxFormController_IN
{
    TransitDocumentManager_IN   manager;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>attachForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches the document to specified transaction.
    /// </summary>
    /// <param name="_trans">
    /// The transaction table, to which the document will be attached.
    /// </param>
    /// <param name="_selectedForm">
    /// The transit documents.
    /// </param>
    private void attachForm(Common _trans, TmpTransitDocumentSalesTaxForm_IN _selectedForm)
    {
        TransitDocumentSalesTaxForm_IN  formToAttach;

        formToAttach = TransitDocumentSalesTaxForm_IN::findByTmpSalesTaxForm(_selectedForm);

        if (!formToAttach.RecId)
        {
            formToAttach.clear();
            formToAttach.initFromTmpSalesTaxForm(_selectedForm);
            formToAttach.insert();
        }

        manager.addTransitDocument(_trans, formToAttach);
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachReverseForms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches form reference with opposite direction.
    /// </summary>
    /// <param name="_trans">
    /// The transaction.
    /// </param>
    /// <param name="_selection">
    /// The transit documents.
    /// </param>
    private void attachReverseForms(
        Common _trans,
        TmpTransitDocumentSalesTaxForm_IN _selection)
    {
        TmpTransitDocumentSalesTaxForm_IN       selectedForm,
                                                reverseForm;
        SalesTaxFormTypes_IN                    formReferenceType;

        // Remove all attached forms
        this.removeAttachedForms(_trans);

        // Add forms in the grid
        selectedForm.setTmpData(_selection);

        while select selectedForm
        {
            reverseForm.data(selectedForm);
            reverseForm.Direction = TransitDocumentSalesTaxForm_IN::reverseDirection(reverseForm.Direction);

            formReferenceType = SalesTaxFormTypes_IN::findbyFormType(reverseForm.FormType);
            if (!formReferenceType.RecId)
            {
                throw Global::error(strFmt("@SYP4880655", reverseForm.FormType));
            }

            reverseForm.SalesTaxFormTypes = formReferenceType.RecId;

            this.attachForm(_trans, reverseForm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAttachedForms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the list of transit document of the form reference type from the specified transaction.
    /// </summary>
    /// <param name="_trans">
    /// The transaction.
    /// </param>
    /// <returns>
    /// Returns a list of transit document from the specified transaction.
    /// </returns>
    private List findAttachedForms(Common _trans)
    {
        List                            result;
        TransitDocumentSalesTaxForm_IN  formSample;

        result = new List(Types::Record);

        // Forms to issue
        formSample.Direction = FormTrackingBasis_IN::FormIssuable;
        result.appendList(manager.findTransitDocuments(_trans, formSample));

        // Forms to receive
        formSample.Direction = FormTrackingBasis_IN::FormReceivable;
        result.appendList(manager.findTransitDocuments(_trans, formSample));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        TransitDocumentType_IN  typeLocal;

        select firstOnly RecId from typeLocal
            where typeLocal.RefTableId == tableNum(TransitDocumentSalesTaxForm_IN);

        if (!typeLocal.RecId)
        {
            TransitDocumentTransactionRuleHelper_IN::initRule();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches documents to transactions with other company.
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c>
    /// </param>
    /// <param name="_selection">
    /// The records of selected document.
    /// </param>
    private void interCompanyPurchLine(
        PurchLine _purchLine,
        TmpTransitDocumentSalesTaxForm_IN _selection)
    {
        SalesLine   salesLine;

        if (!_purchLine.purchTable().InterCompanyCompanyId)
        {
            return;
        }

        changecompany(_purchLine.purchTable().InterCompanyCompanyId)
        {
            // Initialize transit document framework if necessary
            TransitDocumentManager_IN::newManager();

            setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));
            salesLine = SalesLine::findInventTransId(_purchLine.InterCompanyInventTransId);
            if (salesLine.RecId)
            {
                this.attachReverseForms(salesLine, _selection);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches documents to transactions with other company.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>_purchTable</c>
    /// </param>
    /// <param name="_selection">
    /// The records of selected document.
    /// </param>
    private void interCompanyPurchTable(
        PurchTable _purchTable,
        TmpTransitDocumentSalesTaxForm_IN _selection)
    {
        SalesTable      salesTable;

        if (!_purchTable.isInterCompanyOrder())
        {
            return;
        }

        changeCompany(_purchTable.InterCompanyCompanyId)
        {
            // Initialize transit document framework if necessary
            TransitDocumentManager_IN::newManager();

            setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));
            salesTable = SalesTable::find(_purchTable.InterCompanySalesId);
            if (salesTable.RecId)
            {
                this.attachReverseForms(salesTable, _selection);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches documents to transactions with other company.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>_salesLine</c>
    /// </param>
    /// <param name="_selection">
    /// The records of selected document.
    /// </param>
    private void interCompanySalesLine(
        SalesLine _salesLine,
        TmpTransitDocumentSalesTaxForm_IN _selection)
    {
        PurchLine   purchLine;

        if (!_salesLine.salesTable().InterCompanyCompanyId)
        {
            return;
        }

        changecompany(_salesLine.salesTable().InterCompanyCompanyId)
        {
            // Initialize transit document framework if necessary
            TransitDocumentManager_IN::newManager();

            setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));
            purchLine = PurchLine::findInventTransId(_salesLine.InterCompanyInventTransId);
            if (purchLine.RecId)
            {
                this.attachReverseForms(purchLine, _selection);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches documents to transactions with other company.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>_salesTable</c>
    /// </param>
    /// <param name="_selection">
    /// The records of selected document.
    /// </param>
    private void interCompanySalesTable(
        SalesTable _salesTable,
        TmpTransitDocumentSalesTaxForm_IN _selection)
    {
        PurchTable  purchTable;

        if (!_salesTable.InterCompanyCompanyId)
        {
            return;
        }

        changecompany(_salesTable.InterCompanyCompanyId)
        {
            // Initialize transit document framework if necessary
            TransitDocumentManager_IN::newManager();

            setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));
            purchTable = PurchTable::find(_salesTable.InterCompanyPurchId);
            if (purchTable.RecId)
            {
                this.attachReverseForms(purchTable, _selection);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// New transit document sales tax form controller.
    /// </summary>
    /// <param name = "_manager">Transit document manager.</param>
    protected void new(TransitDocumentManager_IN _manager)
    {
        manager = _manager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAttachedForms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the list of transit document of the form reference type from the specified transaction.
    /// </summary>
    /// <param name="_trans">
    /// The transaction.
    /// </param>
    private void removeAttachedForms(Common _trans)
    {
        TransitDocumentSalesTaxForm_IN  formToIssue,
                                        formToReceive;

        formToIssue.Direction = FormTrackingBasis_IN::FormIssuable;
        formToReceive.Direction = FormTrackingBasis_IN::FormReceivable;

        manager.removeTransitDocuments(_trans, formToIssue);
        manager.removeTransitDocuments(_trans, formToReceive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendSelectedForms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends forms selected from the "available" list to the "attached" list.
    /// </summary>
    /// <param name="_selectedFormList">
    /// The selected forms.
    /// </param>
    /// <param name="_attachedForms">
    /// The temp table buffer for the "attached" list.
    /// </param>
    /// <returns>
    /// The temp table buffer for updated "attached" list.
    /// </returns>
    public static TmpTransitDocumentSalesTaxForm_IN appendSelectedForms(
        List                                _selectedFormList,
        TmpTransitDocumentSalesTaxForm_IN   _attachedForms)
    {
        ListEnumerator                      listEnumerator;
        TmpTransitDocumentSalesTaxForm_IN   selectedForm;
        TmpTransitDocumentSalesTaxForm_IN   attachedForm;
        TmpTransitDocumentSalesTaxForm_IN   formToAppend;

        ttsBegin;

        attachedForm.setTmpData(_attachedForms);
        formToAppend.setTmpData(_attachedForms);

        listEnumerator = _selectedFormList.getEnumerator();
        while (listEnumerator.moveNext())
        {
            selectedForm = listEnumerator.current();

            select attachedForm
                where attachedForm.SalesTaxFormTypes == selectedForm.SalesTaxFormTypes
                   && attachedForm.Direction         == selectedForm.Direction;

            if (attachedForm)
            {
                throw Global::error("@SYP4880657");
            }

            formToAppend.clear();
            formToAppend.Direction         = selectedForm.Direction;
            formToAppend.SalesTaxFormTypes = selectedForm.SalesTaxFormTypes;
            formToAppend.FormType          = selectedForm.FormType;
            formToAppend.insert();
        }

        ttsCommit;

        return formToAppend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmFormAttachmentChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms the changes to the form references of the specified transaction.
    /// </summary>
    /// <param name="_trans">
    /// The transaction record.
    /// </param>
    /// <param name="_attachedForm">
    /// The form reference list to be updated for the transaction.
    /// </param>
    public static void confirmFormAttachmentChanges(
        Common _trans,
        TmpTransitDocumentSalesTaxForm_IN _attachedForm)
    {
        TransitDocSalesTaxFormController_IN     controller;

        ttsBegin;

        controller = TransitDocSalesTaxFormController_IN::newController(
            TransitDocumentManager_IN::newManager());

        // Remove all attached forms
        controller.removeAttachedForms(_trans);

        // Add forms in the grid
        while select _attachedForm
        {
            controller.attachForm(_trans, _attachedForm);
        }

        // Intercompany
        switch (_trans.TableId)
        {
            case tableNum(PurchTable):
                controller.interCompanyPurchTable(_trans, _attachedForm);
                break;

            case tableNum(PurchLine):
                controller.interCompanyPurchLine(_trans, _attachedForm);
                break;

            case tableNum(SalesTable):
                controller.interCompanySalesTable(_trans, _attachedForm);
                break;

            case tableNum(SalesLine):
                controller.interCompanySalesLine(_trans, _attachedForm);
                break;

            default:
                break;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>TransitDocSalesTaxFormController_IN</c>.
    /// </summary>
    /// <param name="_manager">
    /// The manager for maintaining transit document in the backend.
    /// </param>
    /// <returns>
    /// A new instance of <c>TransitDocSalesTaxFormController_IN</c>.
    /// </returns>
    public static TransitDocSalesTaxFormController_IN newController(
        TransitDocumentManager_IN   _manager)
    {
        TransitDocSalesTaxFormController_IN     controller;

        controller = new TransitDocSalesTaxFormController_IN(_manager);

        controller.init();

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAttachedForms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the temp table data source with forms attached to the specified transaction.
    /// </summary>
    /// <param name="_trans">
    /// The transaction record.
    /// </param>
    /// <returns>
    /// A temp table buffer containing attached forms.
    /// </returns>
    public static TmpTransitDocumentSalesTaxForm_IN populateAttachedForms(
        Common _trans)
    {
        TransitDocSalesTaxFormController_IN     controller;
        List                                    formList;
        ListEnumerator                          listEnumerator;
        TransitDocumentSalesTaxForm_IN          currentForm;
        TmpTransitDocumentSalesTaxForm_IN       attachedForm;

        controller = TransitDocSalesTaxFormController_IN::newController(
            TransitDocumentManager_IN::newManager());

        formList = controller.findAttachedForms(_trans);
        listEnumerator = formList.getEnumerator();

        ttsBegin;
        while (listEnumerator.moveNext())
        {
            currentForm = listEnumerator.current();

            attachedForm.clear();
            attachedForm.initFromSalesTaxForm(currentForm);
            attachedForm.insert();
        }
        ttsCommit;
        return attachedForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAvailableForms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the temp table data source with available forms.
    /// </summary>
    /// <param name="_taxType">
    /// The tax type for filtering the forms.
    /// </param>
    /// <returns>
    /// A temp table buffer containing all available forms.
    /// </returns>
    public static TmpTransitDocumentSalesTaxForm_IN populateAvailableForms(
        TaxType_IN _taxType)
    {
        SalesTaxFormTypes_IN                salesTaxFormType;
        TmpTransitDocumentSalesTaxForm_IN   availableForm;

        while select salesTaxFormType
            where salesTaxFormType.TaxType == _taxType
        {
            availableForm.clear();
            availableForm.initFromSalesTaxFormType(salesTaxFormType);
            availableForm.insert();
        }

        return availableForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSelectedForms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove selected forms from the "attached" list.
    /// </summary>
    /// <param name="_selectedFormList">
    /// The selected forms.
    /// </param>
    /// <param name="_attachedForms">
    /// The attached forms.
    /// </param>
    /// <returns>
    /// The updated attached forms.
    /// </returns>
    public static TmpTransitDocumentSalesTaxForm_IN removeSelectedForms(
        List                                _selectedFormList,
        TmpTransitDocumentSalesTaxForm_IN   _attachedForms)
    {
        ListEnumerator                      listEnumerator;
        TmpTransitDocumentSalesTaxForm_IN   selectedForm;
        TmpTransitDocumentSalesTaxForm_IN   formToRemove;

        ttsBegin;

        formToRemove.setTmpData(_attachedForms);

        listEnumerator = _selectedFormList.getEnumerator();
        while (listEnumerator.moveNext())
        {
            selectedForm = listEnumerator.current();

            delete_from formToRemove
                where formToRemove.RecId == selectedForm.RecId;
        }

        ttsCommit;

        return formToRemove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTaxFormTypes_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax type.
    /// </summary>
    public static void updateSalesTaxFormTypes_IN()
    {
        SalesTaxFormTypes_IN salesTaxFormTypes;

        // Update SalesTaxFormTypes_IN
        ttsbegin;
        while select forupdate salesTaxFormTypes
            where salesTaxFormTypes.TaxType==TaxType_IN::None
        {
            salesTaxFormTypes.TaxType=TaxType_IN::SalesTax;
            salesTaxFormTypes.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>