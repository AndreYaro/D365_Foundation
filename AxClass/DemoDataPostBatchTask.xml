<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostBatchTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates the batch tasks which are associated to a run's batch header.
/// Each batch task processes a single <c>DemoDataPostRunDocument</c> record.
/// </summary>
public class DemoDataPostBatchTask extends RunBaseBatch implements BatchRetryable
{
    DemoDataPostRunId runId;
    DemoDataPostDocument document;
    LineNum lineNum;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        runId,
        document,
        lineNum
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether execution can run in new session or not.
    /// </summary>
    /// <returns>
    /// True if the the task can run in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DemoDataPostDocument parmDocument(DemoDataPostDocument _document = document)
    {
        document = _document;
        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LineNum parmLineNum(LineNum _lineNum = lineNum)
    {
        lineNum = _lineNum;
        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DemoDataPostRunId parmRunId(DemoDataPostRunId _runId = runId)
    {
        runId = _runId;
        return runId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute the batch processor.
    /// </summary>
    public void run()
    {
        BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);

        DemoDataPostBase demoDataPostBase = DemoDataPostBase::construct(document, runId, lineNum, batchHeader.parmBatchHeaderId());

        if (demoDataPostBase && demoDataPostBase is DemoDataPostBase && demoDataPostBase.getDocument() == document)
        {
            demoDataPostBase.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new batch task.
    /// </summary>
    /// <param name = "_runId">The demo data post run context.</param>
    /// <param name = "_lineNum">The line number for this given run document.</param>
    /// <param name = "_document">The document type for processing.</param>
    /// <returns>The new batch task.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static DemoDataPostBatchTask construct(DemoDataPostRunId _runId, LineNum _lineNum, DemoDataPostDocument _document)
    {
        DemoDataPostBatchTask task = new DemoDataPostBatchTask();

        task.parmRunId(_runId);
        task.parmDocument(_document);
        task.parmLineNum(_lineNum);

        return task;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>