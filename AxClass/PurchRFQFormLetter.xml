<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQFormLetter</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class PurchRFQFormLetter
extends FormLetterServiceController
{
    PurchRFQFormLetterContract  purchRFQFormLetterContract;
    RecordSortedList            journalList;
    PurchRFQFormLetter          callerFormletter;
    PurchRFQParmLine            purchRFQParmLine;
    PurchRFQCaseLine            purchRFQCaseLine;
    PurchRFQLine                purchRFQLine;
    VendRFQJour                 vendRFQJour;
    PurchRFQQuantity            purchRFQQuantity;
    ParmId                      callerFormLetterParmId;
    boolean                     showSelectionDialog;
    container                   packedOutputContract;

    //List of parameters common for PurchRFQFormLetter_* classes that needs to be packed
    //for the correct class transition between client and server.
    //If you need some additional parameters on the client, add them to this list
    //All variables in the parmListCommonCS must also be added to the method resetParmListCommonCS.

    #define.CurrentVersion(2)
    #LOCALMACRO.ParmListCommonCS
        callerFormLetterParmId,
        packedOutputContract
    #ENDMACRO

    //List of parameters extracted from arguments for the transfer from main() to mainOnServer()
    #LOCALMACRO.CachedArgsList
        className,
        methodName,
        mode,
        callerMenuItem
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>afterPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs additional steps that must be executed after the prompt has finished.
    /// </summary>
    /// <remarks>
    ///    The method is empty in the <c>PurchRFQFormLetter</c> class. It is called from the
    ///    <c>mainOnServer</c> method.
    /// </remarks>
    void afterPrompt()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerIsFormLetter</Name>
				<Source><![CDATA[
    boolean  callerIsFormLetter()
    {
        return (this.parmCallerFormLetterParmId() != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClientOutput</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the destination for printing the original of report is
    ///    client based.
    /// </summary>
    /// <param name="_showError">
    ///    A boolean value that determines whether error messages should be reported; optional.
    /// </param>
    /// <returns>
    ///    true if the destination for either original are screen; otherwise, false.
    /// </returns>
    protected boolean checkClientOutput(boolean _showError = true)
    {
        return FormLetter::isClientOutput(this.printerSettingsFormletter(PrintSetupOriginalCopy::Original));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    protected boolean  checkDiscardLine()
    {
        if (purchRFQParmLine.PurchQty == 0)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfPurchRFQCaseOrderExist</Name>
				<Source><![CDATA[
    protected boolean  checkIfPurchRFQCaseOrderExist(PurchRFQCaseTable   _purchRFQCaseTable)
    {
        if (!_purchRFQCaseTable.RecId)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfPurchRFQOrderExist</Name>
				<Source><![CDATA[
    protected boolean  checkIfPurchRFQOrderExist(PurchRFQTable   _purchRFQTable)
    {
        if (!_purchRFQTable.RecId)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfQuestionnaireComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the questionnaire associated with the RFQ is completed.
    /// </summary>
    /// <remarks>
    /// If one or more questionnaires are not complete then throwing error.
    /// </remarks>
    protected void checkIfQuestionnaireComplete()
    {
        if (this.purchRFQTable() && !PurchRFQTableKMCollection::isQuestionnaireComplete(this.purchRFQTable().RFQId))
        {
            throw error("@SYS4009644");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfSomethingIsPosted</Name>
				<Source><![CDATA[
    protected boolean  checkIfSomethingIsPosted()
    {
        if (!purchRFQLine.RecId)
        {
            return checkFailed("@SYS26185");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    protected void chooseLines()
    {
        container   outputContainer;

        outputContainer = this.chooseLinesServer();
        this.getValuesFormletterParmData(this.unpackFormletterParmDataOutputContract(outputContainer));
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesQuery</Name>
				<Source><![CDATA[
    public SysQueryRun chooseLinesQuery(SysQueryRun _chooseLines = null)
    {
        SysQueryRun ret;

        ret = super(_chooseLines);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesServer</Name>
				<Source><![CDATA[
    protected container chooseLinesServer(boolean    _append = false)
    {
        return PurchRFQFormletterParmData::chooseLinesServer(this.packDataContract(purchRFQFormLetterContract),
                                                             _append);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the <c>PurchRFQEditLines</c> form.
    /// </summary>
    /// <returns>
    /// A <c>FormRun</c> instance of the <c>PurchRFQEditLines</c> form.
    /// </returns>
    IDialogable dialog()
    {
        FormRun  purchRFQEditLines;

        purchRFQEditLines = new MenuFunction(menuitemDisplayStr(PurchRFQEditLines), MenuItemType::Display).create(FormLetterServiceController::newClientArgs(formStr(PurchRFQEditLines), this));

        return purchRFQEditLines as IDialogable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
    protected void  endUpdate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchRFQCaseLine</Name>
				<Source><![CDATA[
    protected PurchRFQCaseLine getPurchRFQCaseLine(PurchRFQParmLine    _purchRFQParmLine,
                                                   boolean             _forupdate = false)
    {
        PurchRFQCaseLine  purchRFQCaseLineNew;

        purchRFQCaseLineNew.selectForUpdate(_forupdate);

        select firstonly purchRFQCaseLineNew
            where purchRFQCaseLineNew.RecId == _purchRFQParmLine.rfqLineRecId;

        return purchRFQCaseLineNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchRFQLine</Name>
				<Source><![CDATA[
    protected PurchRFQLine getPurchRFQLine(PurchRFQParmLine    _purchRFQParmLine,
                                           boolean             _forupdate = false)
    {
        PurchRFQLine  purchRFQLineNew;

        purchRFQLineNew.selectForUpdate(_forupdate);

        select firstonly purchRFQLineNew
            where purchRFQLineNew.RecId == _purchRFQParmLine.rfqLineRecId;

        return purchRFQLineNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValuesFormletterParmData</Name>
				<Source><![CDATA[
    protected void getValuesFormletterParmData(FormLetterParmDataOutputContract _outputContract)
    {
        QueryRun queryRun;

        if (_outputContract.parmChooseLinesQueryPacked())
        {
            queryRun = new QueryRun(SysOperationHelper::base64Decode(_outputContract.parmChooseLinesQueryPacked()));
        }

        this.parmId(_outputContract.parmParmId());
        this.parmDataSourceRecordsPacked(conNull());

        if (queryRun)
        {
            this.parmQueryUsed(queryRun.query());
        }

        this.purchRFQParmUpdate(_outputContract.parmParmUpdate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesQuery</Name>
				<Source><![CDATA[
    public boolean initLinesQuery()
    {
        boolean     ret = true;
        this.chooseLines();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    public void  initParameters(PurchRFQParmUpdate _purchRFQParmUpdate     = this.purchRFQParmUpdate(),
                                Printout           _printout               = this.printout(),
                                NoYes              _printFormLetter        = this.printFormLetter(),
                                NoYes              _usePrintManagement     = this.usePrintManagement(),
                                NoYes              _printReplySheet        = this.printReplySheet(),
                                NoYes              _printPriceAmount       = this.printPriceAmount())
    {
        this.purchRFQParmUpdate(_purchRFQParmUpdate);
        this.printout(_printout);
        this.printFormLetter(_printFormLetter);
        this.usePrintManagement(_usePrintManagement);
        if (this.printFormLetter())
        {
            this.printReplySheet(_printReplySheet);
            this.printPriceAmount(_printPriceAmount);
        }
        else
        {
            this.printReplySheet(NoYes::No);
            this.printPriceAmount(NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmPurchRFQCaseTable</Name>
				<Source><![CDATA[
    public void  initParmPurchRFQCaseTable(PurchRFQCaseTable  _purchRFQCaseTable = purchRFQFormLetterContract.parmPurchRFQCaseTable())
    {
        purchRFQFormLetterContract.parmPurchRFQCaseTable(_purchRFQCaseTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmPurchRFQTable</Name>
				<Source><![CDATA[
    public void  initParmPurchRFQTable(PurchRFQTable  _purchRFQTable)
    {
        this.purchRFQTable(_purchRFQTable);
        purchRFQFormLetterContract.parmPurchRFQReplyTable(this.purchRFQTable().purchRFQReplyTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmUpdate</Name>
				<Source><![CDATA[
    protected void  initParmUpdate(boolean  _createNew = false)
    {
        PurchRFQParmUpdate  purchRFQParmUpdate = this.purchRFQParmUpdate();

        if (_createNew)
        {
            purchRFQParmUpdate.clear();
            purchRFQParmUpdate.ParmId          = this.parmId();
        }
        else
        {
            purchRFQParmUpdate = PurchRFQParmUpdate::find(this.parmId());
        }

        this.purchRFQParmUpdate(purchRFQParmUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelectionRemoveLines</Name>
				<Source><![CDATA[
    boolean  lateSelectionRemoveLines()
    {
        boolean  ok = true;
        PurchRFQParmUpdate  purchRFQParmUpdate = this.purchRFQParmUpdate();

        if (purchRFQParmUpdate.LateSelection  &&  purchRFQParmUpdate.numberOfTables() > 0)
        {
            if (Box::yesNo("@SYS72909", DialogButton::Yes))
            {
                this.chooseLinesQuery(new SysQueryRun(queryStr(PurchRFQUpdate)));

                PurchRFQParmTable::deleteWithoutUpdate(purchRFQParmUpdate.ParmId);
            }
            else
            {
                purchRFQParmUpdate.LateSelection = false;
                ok = false;
            }
        }

        this.purchRFQParmUpdate(purchRFQParmUpdate);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineStatusFilter</Name>
				<Source><![CDATA[
    public PurchRFQStatusFilter lineStatusFilter()
    {
        PurchRFQParmUpdate  purchRFQParmUpdate = this.purchRFQParmUpdate();

        return purchRFQParmUpdate.LineStatusFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        IdentifierName _className='',
        IdentifierName _methodName='',
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);
        purchRFQFormLetterContract = contract;
        purchRFQQuantity = PurchRFQQuantity::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a record sorted list.
    /// </summary>
    /// <returns>
    /// A new record sorted list.
    /// </returns>
    public RecordSortedList  newJournalList()
    {
        RecordSortedList  recordSortedList;

        recordSortedList = new RecordSortedList(tableNum(VendRFQJour));
        recordSortedList.sortOrderFromContainer(FormLetterSortingParameters::formLetterSorting(tableNum(VendRFQJour), fieldNum(VendRFQJour, RecId)));

        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (formletterOutputContract)
        {
            packedOutputContract = formletterOutputContract.pack();
        }

        return [#CurrentVersion, #ParmListCommonCS] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerFormletter</Name>
				<Source><![CDATA[
    public PurchRFQFormLetter parmCallerFormletter(PurchRFQFormLetter _callerFormletter = callerFormletter)
    {
        if (callerFormletter != _callerFormletter)
        {
            purchRFQFormLetterContract.parmCallerFormLetterParmId(_callerFormletter.parmId());
        }

        callerFormletter = _callerFormletter;
        return callerFormletter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerFormLetterParmId</Name>
				<Source><![CDATA[
    public ParmId parmCallerFormLetterParmId(ParmId _callerFormLetterParmId = purchRFQFormLetterContract.parmCallerFormLetterParmId())
    {
        return purchRFQFormLetterContract.parmCallerFormLetterParmId(_callerFormLetterParmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRejectExecuted</Name>
				<Source><![CDATA[
    public boolean parmRejectExecuted(boolean _rejectExecuted = purchRFQFormLetterContract.parmRejectExecuted())
    {
        return purchRFQFormLetterContract.parmRejectExecuted(_rejectExecuted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _purchRFQTable = contract.parmSourceTable() as PurchRFQTable)
    {
        return contract.parmSourceTable(_purchRFQTable as PurchRFQTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQParmUpdate</Name>
				<Source><![CDATA[
    public PurchRFQParmUpdate parmPurchRFQParmUpdate(PurchRFQParmUpdate _purchRFQParmUpdate = contract.parmParmUpdate() as PurchRFQParmUpdate)
    {
        return contract.parmParmUpdate(_purchRFQParmUpdate) as PurchRFQParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTable2Update</Name>
				<Source><![CDATA[
    public Common parmTable2Update(Common _parmTable2Update = purchRFQFormLetterContract.parmTable2Update() as PurchRFQParmTable)
    {
        return purchRFQFormLetterContract.parmTable2Update(_parmTable2Update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiSelectRequired</Name>
				<Source><![CDATA[
    public boolean multiSelectRequired(boolean _multiSelectRequired = purchRFQFormLetterContract.parmMultiSelectRequired())
    {
        return PurchRFQFormLetterContract.parmMultiSelectRequired(_multiSelectRequired && PurchRFQParameters::canMarkAndAcceptMultipleLines());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdate</Name>
				<Source><![CDATA[
    protected void  postUpdate()
    {
        PurchRFQParmTable purchRFQParmTable = purchRFQFormLetterContract.parmTable2Update() as PurchRFQParmTable;
        StartDateTime     startDateTimeTable;

        ttsbegin;
        this.setForUpdatePurchRFQParmTable();

        purchRFQParmTable.StartDateTime    = startDateTimeTable;
        purchRFQParmTable.EndDateTime      = DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getUserPreferredTimeZone());
        purchRFQParmTable.updateParmJobStatusExecuted();
        ttscommit;

        purchRFQFormLetterContract.parmTable2Update(purchRFQParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptInit</Name>
				<Source><![CDATA[
    boolean  prePromptInit()
    {
        if (this.purchRFQTable().RecId ||
            purchRFQFormLetterContract.parmPurchRFQCaseTable().RecId || this.callerIsFormLetter())
        {
            this.showQueryForm(false);
            if (!this.initLinesQuery())
                return false;
        }
        else
        {
             this.showQueryForm(true);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management node type.
    /// </summary>
    /// <returns>
    /// The print management node type for purchase.
    /// </returns>
    protected PrintMgmtNodeType printMgmtNodeType()
    {
        return PrintMgmtNodeType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPosted</Name>
				<Source><![CDATA[
    protected  void  printPosted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPriceAmount</Name>
				<Source><![CDATA[
    public boolean printPriceAmount(boolean _printPriceAmount = purchRFQFormLetterContract.parmPrintPriceAmount())
    {
        return purchRFQFormLetterContract.parmPrintPriceAmount(_printPriceAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReplySheet</Name>
				<Source><![CDATA[
    public boolean printReplySheet(boolean _printReplysheet = purchRFQFormLetterContract.parmPrintReplySheet())
    {
        return purchRFQFormLetterContract.parmPrintReplySheet(_printReplysheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQParmUpdate</Name>
				<Source><![CDATA[
    public PurchRFQParmUpdate  purchRFQParmUpdate(PurchRFQParmUpdate  _purchRFQParmUpdate = purchRFQFormLetterContract.parmParmUpdate() as PurchRFQParmUpdate)
    {
        if (!prmisDefault(_purchRFQParmUpdate))
        {
            purchRFQFormLetterContract.parmLateSelection(_purchRFQParmUpdate.LateSelection);
        }

        return purchRFQFormLetterContract.parmParmUpdate(_purchRFQParmUpdate) as PurchRFQParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQStatus</Name>
				<Source><![CDATA[
    abstract protected PurchRFQStatus purchRFQStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQTable</Name>
				<Source><![CDATA[
    public PurchRFQTable  purchRFQTable(PurchRFQTable  _purchRFQTable = purchRFQFormLetterContract.parmPurchRFQTable())
    {
        this.parmSourceTable(_purchRFQTable);
        return purchRFQFormLetterContract.parmPurchRFQTable(_purchRFQTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQUpdateType</Name>
				<Source><![CDATA[
    abstract PurchRFQUpdateType purchRFQUpdateType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    protected QueryRun  queryBuild()
    {
        Query                   query;
        QueryBuildDataSource    dataSourceUpdate;
        QueryBuildDataSource    dataSourceTable;
        QueryRun                queryRun;
        #query

        query               = new Query();
        dataSourceUpdate    = query.addDataSource(tableNum(PurchRFQParmUpdate));
        dataSourceTable     = dataSourceUpdate.addDataSource(tableNum(PurchRFQParmTable));
        dataSourceTable.relations(true);

        queryRun = new QueryRun(query);
        queryRun.query().dataSourceTable(tableNum(PurchRFQParmUpdate)).addRange(fieldNum(PurchRFQParmUpdate, ParmId)).value(this.purchRFQParmUpdate().ParmId);

        queryRun.literals(#queryForcePlaceholders);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeJournalFromList</Name>
				<Source><![CDATA[
    void removeJournalFromList()
    {
        journalList.del(vendRFQJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelect</Name>
				<Source><![CDATA[
    public void  reSelect(PurchRFQUpdate  _purchRFQUpdate,
                          PurchRFQStatusFilter _lineStatusFilter = PurchRFQStatusFilter::All)
    {
        PurchRFQFormletterParmData      purchRFQFormletterParmData;
        PurchRFQParmUpdate purchRFQParmUpdate = this.purchRFQParmUpdate();

        purchRFQParmUpdate.SpecQty = _purchRFQUpdate;
        purchRFQParmUpdate.LineStatusFilter = _lineStatusFilter;

        this.purchRFQParmUpdate(purchRFQParmUpdate);
        purchRFQFormletterParmData = PurchRFQFormletterParmData::newChooseLines(this.packDataContract(purchRFQFormLetterContract));

        purchRFQFormletterParmData.createData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetParmListCommonCS</Name>
				<Source><![CDATA[
    public void resetParmListCommonCS()
    {
        this.parmCallerFormLetterParmId('');
        this.initAllowEmptyTable(false);
        this.allowEmptyTable(false);
        this.showQueryForm(false);
        this.multiForm(false);
        this.transDate(dateNull());
        this.parmBatchJobId(0);
        this.parmBatchGroupId('');
        
        if (PurchRFQFormletterParmDataPrintOnlyRelatedJournalsFlight::instance().isEnabled())
        {
            this.parmId('');
        }

        packedOutputContract = conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a way to clean up after a dialog box has been canceled.
    /// </summary>
    protected void cleanupDialog()
    {
        super();

        if (PurchRFQFormletterParmDataPrintOnlyRelatedJournalsFlight::instance().isEnabled()
            && !this.parmCurrentBatch() 
            && this.parmPurchRFQParmUpdate().ParmId)
        {
            PurchRFQParmUpdate::deleteWithoutUpdate(this.parmPurchRFQParmUpdate().ParmId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the job of the class.
    /// </summary>
    void  run()
    {
        if (this.isInBatch())
        {
            this.parmBatchJobId(this.parmCurrentBatch().BatchJobId);
            this.parmBatchGroupId(this.parmCurrentBatch().GroupId);
        }

        purchRFQFormLetterContract.parmIsPrintingInAfterOperation(this.mustPrintInAfterOperation());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendAsXML</Name>
				<Source><![CDATA[
    public void sendAsXML()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setForUpdatePurchRFQParmTable</Name>
				<Source><![CDATA[
    protected void  setForUpdatePurchRFQParmTable()
    {
        PurchRFQParmTable purchRFQParmTable = purchRFQFormLetterContract.parmTable2Update() as PurchRFQParmTable;

        purchRFQFormLetterContract.parmTable2Update(PurchRFQParmTable::findRecId(purchRFQParmTable.RecId, true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewContract</Name>
				<Source><![CDATA[
    protected void setNewContract(FormLetterContract _contract)
    {
        super(_contract);
        if (!contractIsFromPreviousVersion)
        {
            purchRFQFormLetterContract = _contract;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>specQty</Name>
				<Source><![CDATA[
    PurchRFQUpdate specQty(PurchRFQUpdate   _specQty = this.purchRFQParmUpdate().SpecQty)
    {
        PurchRFQParmUpdate purchRFQParmUpdate = this.purchRFQParmUpdate();

        purchRFQParmUpdate.SpecQty = _specQty;
        this.purchRFQParmUpdate(purchRFQParmUpdate);
        return purchRFQParmUpdate.SpecQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer  version = conPeek(_packedClass,1);
        container packedBase;

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmListCommonCS, packedBase] = _packedClass;
                if (packedOutputContract)
                {
                    formletterOutputContract.unpack(packedOutputContract);
                }
                return super(packedBase);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate updateDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the RFQ line
    /// </summary>
    protected void validateLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePOTransdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>poTransDate</c> field by using the fiscal calendar on the <c>PurchRFQEditLines</c>
    ///    form that is being validated.
    /// </summary>
    /// <param name="_poTransDate">
    ///    The date to validate.
    /// </param>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    boolean validatePOTransdate(TransDate _poTransDate)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuestionnaire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the questionnaire assosiated with RFQ.
    /// </summary>
    /// <remarks>
    /// This method is overridden in the subclasses.
    /// </remarks>
    protected void validateQuestionnaire()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPrintersettingsFormletter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the printer settings by using the standard printer settings dialog box.
    /// </summary>
    /// <param name="_purchRFQFormLetter">
    /// The <c>PurchRFQFormLetter</c> class in which the printer settings are modified.
    /// </param>
    /// <param name="_originalCopy">
    /// A value that indicates whether the printer settings are being modified for the original or a copy;
    /// optional.
    /// </param>
    /// <returns>
    /// true if the settings were modified; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The <c>callPrinterSettingsFormLetter</c> method is static so that users can select AOS printers.
    /// Selecting AOS printers requires that the <c>SysPrintForm</c> form is called from the server.
    /// </remarks>
    static boolean callPrintersettingsFormletter(PurchRFQFormLetter _purchRFQFormLetter, PrintSetupOriginalCopy _originalCopy = PrintSetupOriginalCopy::Original)
    {
        #PrintMgmtSetup
        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings(_purchRFQFormLetter.printerSettingsFormletter(_originalCopy));
        boolean ok = SrsReportRunUtil::showSettingsDialog(printSettings, #SRSPrintDestinationTokenPrintMgmt, enum2Symbol(enumNum(PrintMgmtDocumentType), enum2int(_purchRFQFormLetter.printMgmtDocumentType())));

        _purchRFQFormLetter.updatePrinterSettingsFormLetter(printSettings.pack(), _originalCopy);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQFormLetter construct(
        PurchRFQUpdateType _updateType,
        IdentifierName _className = '',
        IdentifierName _methodName = '',
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        PurchRFQUpdateTypeModel model = PurchRFQUpdateTypeModel::newFromType(_updateType);
        PurchRFQFormLetter formLetter;

        if (model)
        {
            if (_className && _methodName)
            {
                formLetter = model.newPurchRFQFormLetterFromMethod(_className, _methodName, _executionMode);
            }
            else
            {
                formLetter = model.newPurchRFQFormLetter();
            }
        }
        if (!formLetter)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }
        return formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromCache</Name>
				<Source><![CDATA[
    static PurchRFQFormLetter constructFromCache(PurchRFQUpdateType _updateType, ParmId _parmId)
    {
        SysGlobalCache      cache = appl.globalCache();

        if (cache.isSet(classStr(PurchRFQFormLetter), _parmId))
        {
            return cache.get(classStr(PurchRFQFormLetter), _parmId);
        }

        return PurchRFQFormLetter::construct(_updateType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS103882";
    }

]]></Source>
			</Method>
			<Method>
				<Name>execInitLinesQueryOnServer</Name>
				<Source><![CDATA[
    protected static container execInitLinesQueryOnServer(PurchRFQUpdateType _updateType,
                                                                  ParmId _parmId,
                                                                  container _packedClass,
                                                                  container _packedChooseLines)
    {
        PurchRFQFormLetter  purchRFQFormLetter = PurchRFQFormLetter::constructFromCache(_updateType, _parmId);
        boolean             ret;

        purchRFQFormLetter.unpack(_packedClass);
        if (_packedChooseLines != conNull())
        {
            purchRFQFormLetter.chooseLinesQuery(new SysQueryRun(_packedChooseLines));
        }

        ret = purchRFQFormLetter.initLinesQuery();

        return [ret, purchRFQFormLetter.pack(), purchRFQFormLetter.chooseLinesQuery().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>execReSelectOnServer</Name>
				<Source><![CDATA[
    protected static container execReSelectOnServer(PurchRFQUpdateType    _updateType,
                                                            ParmId                _parmId,
                                                            container             _packedClass,
                                                            PurchRFQUpdate        _purchRFQUpdate,
                                                            PurchRFQStatusFilter  _lineStatusFilter)
    {
        PurchRFQFormLetter  purchRFQFormLetter = PurchRFQFormLetter::constructFromCache(_updateType, _parmId);

        purchRFQFormLetter.unpack(_packedClass);

        purchRFQFormLetter.reSelect(_purchRFQUpdate, _lineStatusFilter);

        return purchRFQFormLetter.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterSettingsFormletter</Name>
				<Source><![CDATA[
    static container getPrinterSettingsFormletter(PurchRFQUpdateType _updateType, PrintSetupOriginalCopy _originalCopy = PrintSetupOriginalCopy::Original)
    {
        PurchRFQFormLetter purchRFQFormLetterPrint;
        purchRFQFormLetterPrint = PurchRFQFormLetter::construct(_updateType);
        purchRFQFormLetterPrint.getLast();
        return purchRFQFormLetterPrint.printerSettingsFormletter(_originalCopy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args  args)
    {
        Object                      caller;
        Common                      record;
        PurchRFQUpdateType          parmEnum;
        FormDataSource              recordDataSource;
        container                   dataSourceRecordsPacked;
        str                         className, methodName;
        MenuItemNameAction          callerMenuItem;
        SysOperationExecutionMode   mode;
        container                   packedPurchRFQFormletter;
        PurchRFQFormLetter          purchRFQFormLetter;
        Object                      purchRFQTable_ds;
        boolean                     fromListpage = false;
        container                   cachedArgs;
        FormletterOutputContract    outputContract;
        Counter                     numberOfRecords;
        boolean                     showPostingDialog;
        boolean                     sendEmail = true;

        PurchRFQFormLetter::validatePurchRFQFormLetter(args);

        [className, methodName, mode] = SysOperationServiceController::parseServiceInfo(args);

        record          = args.record();
        parmEnum        = args.parmEnum();
        caller          = args.caller();
        callerMenuItem  = args.menuItemName();
        switch (args.callerName())
        {
            case formStr(PurchRFQAmendmentWizard):
                caller = caller as PurchRFQAmendmentWizard;
                // if the call is from the wizard, the wizard determines if the posting dialog should be shown
                showPostingDialog = caller.showPostingDialog() && parmEnum == PurchRFQUpdateType::Sent;
                break;

            case formStr(PurchRFQVendReply):
            case formStr(PurchRFQSealedVendReply):
                showPostingDialog = false;
                break;

            case classStr(PurchRFQVendorSelfInvitationBid_PSN):
                // Do not show the posting dialog when the vendor starts to bid on an RFQ
                // from the <c>PurchRFQPublishOpenCase_PSN</c> form.
                showPostingDialog = false;
                caller = caller as PurchRFQVendorSelfInvitationBid_PSN;
                break;

            case formStr(PurchRFQReplyTable):
                var isProcurementAgentEditing = args.parmObject() && args.parmObject().menuItemName() == menuItemActionStr(PurchRFQReplyEditBid);
                showPostingDialog = !isProcurementAgentEditing;
                sendEmail = !isProcurementAgentEditing;
                break;

            default:
                showPostingDialog = true;
        }

        if (!(caller is PurchRFQFormLetter))
        {
            recordDataSource = FormDataUtil::getFormDataSource(args.record());
        }

        if (recordDataSource)
        {
            dataSourceRecordsPacked = FormLetter::getFormRecord(recordDataSource);
        }

        cachedArgs = [#CachedArgsList];
        packedPurchRFQFormletter = PurchRFQFormLetter::mainOnServer(cachedArgs, parmEnum, record, caller, recordDataSource, dataSourceRecordsPacked);

        if (packedPurchRFQFormletter != conNull())
        {
            purchRFQFormLetter = PurchRFQFormLetter::construct(parmEnum, className, methodName, mode);
            purchRFQFormLetter.unpack(packedPurchRFQFormletter);
            purchRFQFormLetter.init();
            
            if (caller is PurchRFQAmendmentWizard)
            {
                // Mailing is suppressed here as it is handled by PurchRFQAmendmentWizard.
                purchRFQFormLetter.initParameters(purchRFQFormLetter.purchRFQParmUpdate(),
                                                  purchRFQFormLetter.printout(),
                                                  NoYes::No);
            }

            purchRFQFormLetter.showSelectionDialog(showPostingDialog);
            purchRFQFormLetter.parmShowDialog(showPostingDialog);

            SysOperationStartResult operationResult = purchRFQFormLetter.startOperation();

            if (operationResult != SysOperationStartResult::Canceled)
            {
                outputContract  = purchRFQFormLetter.getOutputContract();
                numberOfRecords = outputContract.parmNumberOfOrdersPosted();

                if (!(caller is PurchRFQVendorSelfInvitationBid_PSN) && recordDataSource)
                {
                    purchRFQTable_ds = recordDataSource;

                    switch (caller.name())
                    {
                        case formStr(PurchRFQCaseTableListPage):
                        case formStr(PurchRFQReplyTableListPage):
                            fromListpage = true;
                    }
			
                    if (sendEmail && isConfigurationkeyEnabled(configurationKeyNum(VendorCollaboration_PSN)))
                    {
                        // Send email to vendors for RFQ case.
                        new PurchRFQSendEmail_PSN().sendEmail(purchRFQFormLetter.parmId());
					}
                }

                purchRFQFormLetter.afterPrompt();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchRFQFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether <c>PurchRFQFormLetter</c> class can be processed.
    /// </summary>
    protected static void validatePurchRFQFormLetter(Args _args)
    {
        if (!_args)
        {
            throw error("@SYS25407");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>PurchRFQEditLines</c> form to send, return, accept or reject an RFQ.
    /// </summary>
    /// <param name="_cachedArgs">
    /// A container that contains cached argument values.
    /// </param>
    /// <param name="_parmEnum">
    /// An enumeration value that indicates whether the RFQ will be sent, returned, accepted or rejected.
    /// </param>
    /// <param name="_record">
    /// A record buffer of type <c>PurchRFQCaseTable</c> or <c>PurchRFQTable</c>.
    /// </param>
    /// <param name="_caller">
    /// The object of the calling process.
    /// </param>
    /// <param name="_recordDataSource">
    /// The data source of the calling process.
    /// </param>
    /// <param name="_dataSourceRecordsPacked">
    /// A container that contains default retained form field values.
    /// </param>
    /// <returns>
    /// A container that contains <c>PurchRFQFormLetter</c> values
    /// </returns>
    /// <remarks>
    /// The <c>main</c> method is split into two parts in order to reduce the interaction between tiers.
    /// The <c>main</c> method runs on the client.It obtains parameters from the <c>Args</c> class, and
    /// passes them to the <c>mainOnServer</c> method, which executes the main process.
    /// </remarks>
    protected static container  mainOnServer(
        container          _cachedArgs,
        PurchRFQUpdateType _parmEnum,
        Common             _record,
        Object             _caller,
        FormDataSource     _recordDataSource,
        container          _dataSourceRecordsPacked)
    {
        PurchRFQFormLetter          purchRFQFormLetter;
        PurchRFQTable               purchRFQTable;
        PurchRFQCaseTable           purchRFQCaseTable;
        Object                      purchRFQTable_ds;
        str                         className, methodName;
        MenuItemNameAction          callerMenuItem;
        SysOperationExecutionMode   mode;
        boolean                     multiSelectRequired;

        if (_cachedArgs == conNull())
        {
            throw error("@SYS25407");
        }

        [#CachedArgsList] = _cachedArgs;

        mode = SysOperationExecutionMode::Synchronous;
        purchRFQFormLetter = PurchRFQFormLetter::construct(_parmEnum, className, methodName, mode);
        multiSelectRequired = !(_caller is PurchRFQAmendmentWizard || _caller is PurchRFQVendorSelfInvitationBid_PSN) &&
            _caller.name() == tableStr(PurchRFQTmpCompareRFQReply);

        purchRFQFormLetter.getLast();
        purchRFQFormLetter.transDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        purchRFQFormLetter.multiSelectRequired(multiSelectRequired);

        if (_caller is PurchRFQFormLetter)
        {
            purchRFQFormLetter.parmCallerFormletter(_caller);
        }
                
        purchRFQFormLetter.parmCallerMenuItem(callerMenuItem);

        if (_record.RecId)
        {
            switch (_record.TableId)
            {
                case tableNum(PurchRFQTable) :
                    purchRFQTable = _record as PurchRFQTable;
                    purchRFQFormLetter.parmCallerTable(_record);
                    purchRFQFormLetter.initParmPurchRFQTable(purchRFQTable);
                    purchRFQTable_ds = _recordDataSource;
                    purchRFQFormLetter.parmDataSourceRecordsPacked(_dataSourceRecordsPacked);
                    break;
                case tableNum(PurchRFQCaseTable) :
                    purchRFQCaseTable = _record as PurchRFQCaseTable;
                    purchRFQFormLetter.parmCallerTable(_record);
                    purchRFQFormLetter.initParmPurchRFQCaseTable(purchRFQCaseTable);
                    purchRFQTable_ds = _recordDataSource;
                    purchRFQFormLetter.parmDataSourceRecordsPacked(_dataSourceRecordsPacked);
                    break;
            }

            purchRFQFormLetter.validateLines();
            purchRFQFormLetter.validateQuestionnaire();

            purchRFQFormLetter.allowEmptyTable(purchRFQFormLetter.initAllowEmptyTable(true));
            purchRFQFormLetter.multiForm(true);
        }

        purchRFQFormLetter.prePromptInit();
        purchRFQFormLetter.forceSaveLast();
        return purchRFQFormLetter.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rfqSendSRS</Name>
				<Source><![CDATA[
    static void rfqSendSRS(Args arg)
    {
        SrsReportDataContract       reportDataContract;
        SrsReportRdlDataContract    reportContract;
        PurchRFQSendContract        rdpContract;
        PurchRFQFormLetter          purchRFQFormLetter;
        VendRFQJour                 vendRFQJour;
        RecordSortedList            journalList;
        SrsReportRunController      srsReportRun;
        VendTable                   vendTable;

        if (arg.caller() is PurchRFQFormLetter)
        {
            purchRFQFormLetter = arg.caller() as PurchRFQFormLetter;
        }

        if (arg.record())
            journalList         = FormLetter::createJournalListCopy(arg.record());
        else
            journalList         = arg.object();

        journalList.first(vendRFQJour);

        if (vendRFQJour.InternalRFQId)
        {
            vendTable = VendTable::find(vendRFQJour.VendAccount);
            srsReportRun = new SrsReportRunController();
            srsReportRun.parmReportName('RFQSend.Report');

            reportDataContract  = srsReportRun.parmReportContract();
            reportContract      = reportDataContract.parmRdlContract();
            rdpContract         = reportDataContract.parmRdpContract() as PurchRFQSendContract;

            //setting values for the report parameters
            rdpContract.parmPurchInternalRFQId(vendRFQJour.InternalRFQId);
            rdpContract.parmNoYesId(NoYes::No);

            srsReportRun.parmShowDialog(false);
            reportContract.parmLanguageId(vendTable.languageId());
            reportContract.parmLabelLanguageId(vendTable.languageId());
            srsReportRun.run();

            if (vendRFQJour.PrintReplySheet && vendRFQJour.rfqUpdateType == PurchRFQUpdateType::Sent)
            {
                //setting values for the report parameters
                rdpContract.parmPurchInternalRFQId(vendRFQJour.InternalRFQId);
                //setting the value to 'Yes', inorder to display the Request for quote reply sheet report.
                rdpContract.parmNoYesId(NoYes::Yes);

                srsReportRun.parmShowDialog(false);
                reportContract.parmLanguageId(vendTable.languageId());
                reportContract.parmLabelLanguageId(vendTable.languageId());
                srsReportRun.run();
            }
        }
        else
        {
            throw error("@SYS26348");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSelectionDialog</Name>
				<Source><![CDATA[
    protected void showSelectionDialog(boolean _showSelectionDialog)
    {
        showSelectionDialog = _showSelectionDialog;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>