<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCXMLPunchOutLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>cXMLPunchOutLog</c> class creates the punch out log
/// </summary>
internal class CatCXMLPunchOutLog
{
    CatExternalCatalogProperties    catExternalCatalogProperties;
    CatExternalCatalog              catExternalCatalog;
    CatCXMLPunchoutRequest          punchOutRequest;
    CatCXMLPunchoutSession          punchOutSession;
    CatCXMLCartLog                  punchOutLog;
    PurchResponseXML                purchResponseXML;
    ErrorMsg                        sendError;
    Log                             traceLog;
    boolean                         traceCode;
    CXMLSetupRequest                cxmlSetupRequest;
    CXMLSetupResponse               cxmlSetupResponse;
    CXMLCart                        cxmlCart;
    CatCXMLPunchoutID               punchOutID;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static CatCXMLPunchOutLog construct(CatCXMLPunchoutID _punchOutID)
    {
        CatCXMLPunchOutLog         cxmlPunchOutLog;

        cxmlPunchOutLog = new CatCXMLPunchOutLog();
        cXMLPunchOutLog.initializeLog(_punchOutID);

        return cxmlPunchOutLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the CXML Punchout log
    /// </summary>
    /// <param name = "_punchOutID">
    /// The punchout ID
    /// </param>
    private void initializeLog(CatCXMLPunchoutID _punchOutID)
    {
        //Initialize the log.
        traceLog = "";

        this.parmPunchOutId(_punchOutID);

        //Setup the PunchOutSession
        select firstonly * from punchOutSession
            where punchOutSession.PunchoutId == _punchOutID;

        this.parmPunchOutSession(punchOutSession);

        //Setup the punchout request.
        select firstonly punchOutRequest
            where punchOutRequest.CXMLPunchoutSession == punchOutSession.RecId;

        this.parmPunchOutRequest(punchOutRequest);

        //Setup the externalog catalog.
        this.parmCatExternalCatalog();

        //Check if there is a log entry already.
        punchOutLog = CatCXMLCartLog::find(punchOutRequest.RecId);

        //If found one then up the class for the log.
        if (punchOutLog.RecId != 0)
        {
            this.parmCatCXMLCartLog(punchOutLog);
        }
        else
        {
            //If not record create one.
            this.createLog();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>addToLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add message to log
    /// </summary>
    /// <param name = "_message">
    /// The log message
    /// </param>
    public void addToLog(Log _message)
    {
        if(traceCode)
        {
            traceLog = traceLog + _message + "\n";
            this.updateTraceLog();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLog</Name>
				<Source><![CDATA[
    public Log parmLog(Log _traceLog = traceLog)
    {
        traceLog = _traceLog;

        return traceLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTraceCode</Name>
				<Source><![CDATA[
    public boolean parmTraceCode(Boolean _traceCode = traceCode)
    {
        traceCode = _traceCode;

        return traceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSendError</Name>
				<Source><![CDATA[
    public ErrorMsg parmSendError(ErrorMsg _sendError = sendError)
    {
        sendError = _sendError;

        return sendError;

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchResponseXML</Name>
				<Source><![CDATA[
    public PurchResponseXML parmPurchResponseXML(PurchResponseXML _purchResponseXML = purchResponseXML)
    {
        purchResponseXML = _purchResponseXML;

        return purchResponseXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPunchOutRequest</Name>
				<Source><![CDATA[
    public CatCXMLPunchoutRequest parmPunchOutRequest(CatCXMLPunchoutRequest _punchOutRequest = punchOutRequest)
    {
        punchOutRequest = _punchOutRequest;
        return punchOutRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPunchOutSession</Name>
				<Source><![CDATA[
    public CatCXMLPunchoutSession parmPunchOutSession(CatCXMLPunchoutSession _punchOutSession = punchOutSession)
    {
        punchOutSession = _punchOutSession;
        return punchOutSession;

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPunchOutId</Name>
				<Source><![CDATA[
    public CatCXMLPunchoutId parmPunchOutId(CatCXMLPunchoutID _punchOutID = punchOutID)
    {
        punchOutID = _punchOutID;
        return  punchOutID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCatCXMLCartLog</Name>
				<Source><![CDATA[
    public CatCXMLCartLog parmCatCXMLCartLog(CatCXMLCartLog _punchOutLog = punchOutLog)
    {
        punchOutLog = _punchOutLog;
        return punchOutLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetupRequest</Name>
				<Source><![CDATA[
    public CXMLSetupRequest parmSetupRequest(CXMLSetupRequest _cxmlSetupRequest = cxmlSetupRequest)
    {
        cxmlSetupRequest = _cxmlSetupRequest;
        return  cxmlSetupRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetupResponse</Name>
				<Source><![CDATA[
    public CXMLSetupResponse parmSetupResponse(CXMLSetupResponse _cxmlSetupResponse = cxmlSetupResponse)
    {
        cxmlSetupResponse = _cxmlSetupResponse;
        return  cxmlSetupResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPunchOutOrder</Name>
				<Source><![CDATA[
    public CXMLCart parmPunchOutOrder(CXMLCart _cxmlCart = cxmlCart)
    {
        cxmlCart = _cxmlCart;
        return  cxmlCart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCatExternalCatalog</Name>
				<Source><![CDATA[
    public CatExternalCatalog parmCatExternalCatalog()
    {

        select firstonly catExternalCatalog
            where CatExternalCatalog.RecId == punchOutRequest.ExternalCatalog;

        CatPropertyValue    property;

        property = this.getCatSessionProperty("TRACEPUNCHOUT");

        If (property == "TRUE" || property == 'true')
        {
            traceCode = true;
        }

        return catExternalCatalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatSessionProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get Catalog Session Property
    /// </summary>
    /// <param name = "_catPropertyName">
    /// The catalog property name
    /// </param>
    /// <returns>
    /// The catalog property value
    /// </returns>    
    public CatPropertyValue getCatSessionProperty(CatPropertyName _catPropertyName)
    {
        select firstonly * from catExternalCatalogProperties
        where catExternalCatalogProperties.ExternalCatalog == catExternalCatalog.RecId &&
        catExternalCatalogProperties.Name == _catPropertyName;

        return catExternalCatalogProperties.editCatPropertyName(false, '');

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLogSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will update the PunchOut setup log.
    /// </summary>
    public void updateLogSetup()
    {

        //if the trace is turned on then log the punchout details otherwise don't do anything to save the
        //extra update on the DB.
        if (traceCode)
        {
            ttsbegin;

            punchOutLog = CatCXMLCartLog::find(punchOutRequest.RecId,true);
            traceLog = punchOutLog.cXMLPunchOutTraceEdit(false, '') + traceLog;

            if (punchOutLog.RecId != 0)
            {
                punchOutLog.cXMLSetupRequestEdit(true, cxmlSetupRequest);
                punchOutLog.cXMLSetupResponseEdit(true, cxmlSetupResponse);
                punchOutLog.cXMLPunchOutTraceEdit(true, traceLog);
                punchOutLog.update();

                traceLog = "";
            }

            ttscommit;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLogBasket</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will update the log with the basket when it comes back. Before it's processed
    /// </summary>
    public void updateLogBasket()
    {

        ttsbegin;

        punchOutLog = CatCXMLCartLog::find(punchOutRequest.RecId,true);

        if (punchOutLog.RecId != 0)
        {
            if (traceCode)
            {
                traceLog = punchOutLog.cXMLPunchOutTraceEdit(false, '') + traceLog;

                punchOutLog.cXMLCartEdit(true, cxmlCart);
                punchOutLog.cXMLPunchOutTraceEdit(true, traceLog);
                punchOutLog.update();

                traceLog = "";
            }
            else
            {
                punchOutLog.cXMLCartEdit(true, cxmlCart);
                punchOutLog.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTraceLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will update the tracelog the PunchOut setup log.
    /// </summary>
    void updateTraceLog()
    {

        if (traceCode)
        {
            ttsbegin;

            punchOutLog = CatCXMLCartLog::find(punchOutRequest.RecId,true);

            if (punchOutLog.RecId != 0)
            {
                traceLog = punchOutLog.cXMLPunchOutTraceEdit(false, '') + traceLog;

                punchOutLog.cXMLPunchOutTraceEdit(true, traceLog);
                punchOutLog.update();

                traceLog = "";
            }

            ttscommit;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will initialize a log record.
    /// </summary>
    private void createLog()
    {

        ttsbegin;

        punchOutLog.initValue();
        punchOutLog.PunchOutID          = punchOutSession.PunchoutId;
        punchOutLog.PunchOutRequest     = punchOutRequest.RecId;
        punchOutLog.ExternalCatalog     = punchOutRequest.ExternalCatalog;
        punchOutLog.PurchReqTable       = punchOutRequest.PurchReqTable;
        punchOutLog.PurchReqId          = PurchReqTable::find(punchOutRequest.PurchReqTable).PurchReqId;
        punchOutLog.Originator          = punchOutRequest.Originator;
        punchOutLog.Requisitioner       = punchOutRequest.Requisitioner;
        punchOutLog.PunchOutTime        = DateTimeUtil::getSystemDateTime();
        punchOutLog.insert();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>