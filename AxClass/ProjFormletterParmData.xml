<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjFormletterParmData</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjFormletterParmData
extends formletterParmData
{
    ProjInvoiceParmTable        projInvoiceParmTable;
    ProjProposalJour            projProposalJour;
    ProjProposalId              projProposalId;
    boolean                     isInInvoicingWorkflow;
    boolean                     lateSelection;
    LateSelectionQuery          lateSelectionQuery;

    private ProjFormLetterInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertRecordLists</Name>
				<Source><![CDATA[
    protected void insertRecordLists()
    {
        super();

        ProjInvoiceParmTable        projInvoiceParmTableLoc;

        select count(RecId) from projInvoiceParmTableLoc where projInvoiceParmTableLoc.ParmId == parmId;

        numberOfLines = any2int(projInvoiceParmTableLoc.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelection</Name>
				<Source><![CDATA[
    protected boolean lateSelection()
    {
        boolean ret;

        ret = this.parmLateSelection();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelectionQuery</Name>
				<Source><![CDATA[
    protected SysQueryRun lateSelectionQuery()
    {
        SysQueryRun ret;

        ret = new SysQueryRun(this.parmLateSelectionQuery());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLateSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the lateselection control value.
    /// </summary>
    /// <param name="_lateSelection">
    /// A lateSelection control value.
    /// </param>
    /// <returns>
    /// True if mark; otherwise false.
    /// </returns>
    public boolean parmLateSelection(boolean _lateSelection = lateSelection)
    {
        lateSelection = _lateSelection;
        return lateSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLateSelectionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the lateSelectionQuery query container.
    /// </summary>
    /// <param name="_lateSelectionQuery">
    /// A lateSelectionQuery value.
    /// </param>
    /// <returns>
    /// LateSelectionQuery query container.
    /// </returns>
    public LateSelectionQuery parmLateSelectionQuery(LateSelectionQuery _lateSelectionQuery = lateSelectionQuery)
    {
        lateSelectionQuery = _lateSelectionQuery;
        return lateSelectionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    protected boolean createParmLine(Common _projProposalJour, TradeLineRefId _tableRefId)
    {
        ProjProposalJour tmpProjProposalJour = _projProposalJour as ProjProposalJour;

        if (!_projProposalJour)
        {
            throw error("@SYS50125");
        }

        if (! ProjInvoiceParmTable::exist(parmId, tmpProjProposalJour.ProjInvoiceId))
        {
            projInvoiceParmTable.clear();

            projInvoiceParmTable.initFromProjProposalJour(tmpProjProposalJour);

            projInvoiceParmTable.ParmId                 = parmId;
            projInvoiceParmTable.BatchAdministration    = multiForm;
            projInvoiceParmTable.ParmJobStatus          = ParmJobStatus::Waiting;

            projInvoiceParmTable.insert();

            // <GEEU>
            if (isConfigurationkeyEnabled(configurationKeyNum(TradeDates_W)))
            {
                this.initDates(projInvoiceParmTable);
            }
            // </GEEU>

            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmSubTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the sub order header posting parameter table.
    /// </summary>
    /// <param name="_parmTable">
    /// A <c>Common</c> record.
    /// </param>
    protected void createParmSubTable(Common _parmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmTable</Name>
				<Source><![CDATA[
    protected Common createParmTable(Common _sourceTable, Common _sourceLineTable, TradeLineRefId _tableRefId, boolean _skipParmSubTable = false)
    {
        Common ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the order posting parameter table.
    /// </summary>
    /// <returns>
    /// The inserted record.
    /// </returns>
    protected Common createParmUpdate()
    {
        Common ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the records in the order line posting parameter table for the current posting.
    /// </summary>
    protected void deleteParmLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the records in the order header posting parameter table for the current posting.
    /// </summary>
    protected void deleteParmTables()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsParmUpdate</Name>
				<Source><![CDATA[
    protected boolean existsParmUpdate(Common _parmUpdate)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmTable_TableRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID for the <c>TableRefID</c> field in the posting parameter header table.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    protected FieldId fieldIdParmTable_TableRefId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdSourceTable_OrderId</Name>
				<Source><![CDATA[
    protected FieldId fieldIdSourceTable_OrderId()
    {
        return fieldNum(ProjProposalJour,ProposalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOrigOrderIsSet</Name>
				<Source><![CDATA[
    protected void fillOrigOrderIsSet()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoSourceTableSkipped</Name>
				<Source><![CDATA[
    protected void infoSourceTableSkipped(Common _sourceTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets various fields in the <c>ProjInvoiceParmTable</c> table.
    /// </summary>
    /// <param name="_projInvoiceParmTable">
    /// The <c>ProjInvoiceParmTable</c> record to set.
    /// </param>
    public void initDates(ProjInvoiceParmTable  _projInvoiceParmTable)
    {
        ProjInvoiceParmTable localProjInvoiceParmTable;

        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            if (_projInvoiceParmTable) // Editing parmTable
            {
                this.updateDates(_projInvoiceParmTable);
            }
            else                 // Creating parmTables
            {
                while select forupdate localProjInvoiceParmTable
                    where localProjInvoiceParmTable.RecId    == projInvoiceParmTable.RecId
                {
                    this.updateDates(localProjInvoiceParmTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
protected boolean mayJournalBePosted(Common _sourceTable)
    {
        ProjProposalJour    projProposalJourLocal = _sourceTable as ProjProposalJour;
        PSAProjProposalProj psaProjProposalProj;
        ProjStatusTypeRule  projStatusTypeRule;
        ProjTable           projTable;
        boolean             ret;

        ret = super(_sourceTable);

        if (ret)
        {
            if (ProjParameters::find().EnableInvoiceProposalWorkflow)
            {
                if (isInInvoicingWorkflow)
                {
                    ret = projProposalJourLocal.isPostingUsingWorkflow();
                }
                else
                {
                    ret = !projProposalJourLocal.isPostingUsingWorkflow();
                }
            }

            if (ret)
            {
                select Status, Type, RecId from projTable
                    exists join psaProjProposalProj
                        where psaProjProposalProj.ProjId == projTable.ProjId &&
                              psaProjProposalProj.ProjProposalId == projProposalJourLocal.ProposalId
                    notexists join projStatusTypeRule
                        where projStatusTypeRule.ProjType == projTable.Type &&
                              projStatusTypeRule.ProjStatus == projTable.Status &&
                              projStatusTypeRule.ProjStatusRule == ProjStatusRule::CreateInvoiceProposal;

                if (projTable.RecId)
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInInvoicingWorkflow</Name>
				<Source><![CDATA[
    public boolean parmIsInInvoicingWorkflow(boolean _isInInvoicingWorkflow = isInInvoicingWorkflow)
    {
        isInInvoicingWorkflow = _isInInvoicingWorkflow;

        return isInInvoicingWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineMapKey</Name>
				<Source><![CDATA[
    protected str parmLineMapKey(Common _projProposalJour)
    {
        ProjProposalJour  tmpProjProposalJour = _projProposalJour as ProjProposalJour;
        str             key;

        key = this.addToKey(key,tmpProjProposalJour.ProposalId);

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineTableId</Name>
				<Source><![CDATA[
    protected TableId parmLineTableId()
    {
        return tableNum(ProjProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    Common parmParmUpdate(Common _parmUpdate = null)
    {
        Common ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = projProposalJour)
    {;
        projProposalJour = _sourceTable as ProjProposalJour;
        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubTableTableId</Name>
				<Source><![CDATA[
    protected TableId parmSubTableTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableMapKey</Name>
				<Source><![CDATA[
    protected str parmTableMapKey(Common _source)
    {
        ProjProposalJour tmpProjProposalJour = _source as ProjProposalJour;
        str             key;
        ;
        key = this.addToKey(key, tmpProjProposalJour.ProposalId);

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableTableId</Name>
				<Source><![CDATA[
    protected TableId parmTableTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalId</Name>
				<Source><![CDATA[
    protected ProjProposalId projProposalId(ProjProposalId _projProposalId = projProposalId)
    {
        ;

        projProposalId  = _projProposalId;

        return projProposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryName</Name>
				<Source><![CDATA[
    protected str queryName()
    {
        return queryStr(ProjUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rearranges the record in the line posting parameter table.
    /// </summary>
    /// <param name="_queryRun">
    /// A <c>QueryRun</c> object.
    /// </param>
    protected void reArrangeLines(QueryRun _queryRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun reArrangeQueryRun()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelectLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reselects the record in the line posting parameter table.
    /// </summary>
    /// <param name="_origOrderId">
    /// An order ID.
    /// </param>
    protected void reSelectLines(Num _origOrderId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectChooseLines</Name>
				<Source><![CDATA[
    protected void selectChooseLines(boolean _append = false)
    {
        super(_append);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the source line table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected TableId sourceLineTableId()
    {
        return tableNum(ProjProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the source table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected TableId sourceTableTableId()
    {
        return tableNum(ProjProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets various fields in the <c>ProjInvoiceParmTable</c> table.
    /// </summary>
    /// <param name="_localProjInvoiceParmTable">
    /// The <c>ProjInvoiceParmTable</c> record to set.
    /// </param>
    final public void updateDates(ProjInvoiceParmTable  _localProjInvoiceParmTable)
    {
        ttsbegin;
        _localProjInvoiceParmTable.modifiedVATDueDate_CZ(true);
        _localProjInvoiceParmTable.modifiedSalesDate_CZ(true);

        if (_localProjInvoiceParmTable.RecId && _localProjInvoiceParmTable.selectForUpdate())
        {
            _localProjInvoiceParmTable.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateQueryDocumentRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to update query ranges based on documents.
    /// </summary>
    /// <returns>
    /// true if query ranges must be updated; otherwise, false
    /// </returns>
    protected boolean mustUpdateQueryDocumentRanges()
    {
        return conLen(datasourceRecordsPacked) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void  updateQueryBuild()
    {
        if (this.useLateSelectionQuery())
        {
            chooseLines = this.lateSelectionQuery();
            return;
        }

        chooseLines = new SysQueryRun(this.queryName());

        ProjProposalJour proposalJour = this.parmSourceTable();
        Query query = chooseLines.query();

        QueryBuildDataSource qbdsProjProposalJour = query.dataSourceTable(tableNum(ProjProposalJour));
         
        switch (true)
        {
            case this.mustUpdateQueryDocumentRanges():
                this.updateQueryDocumentRanges(datasourceRecordsPacked);
                break;
            case this.projProposalId() != '':
                qbdsProjProposalJour.addRange(fieldNum(ProjProposalJour, ProposalId)).value(queryValue(this.projProposalId()));
                break;
            default:
                break;
        }

        if (ProjParameters::find().EnableInvoiceProposalWorkflow && isInInvoicingWorkflow)
        {
            qbdsProjProposalJour.addRange(fieldNum(ProjProposalJour, LineProperty)).value(queryValue(ProjLinePropertyCode::Approved));
            qbdsProjProposalJour.addRange(fieldNum(ProjProposalJour, LineProperty)).value(queryValue(ProjLinePropertyCode::PSASubmitted));
        }
        else
        {
            qbdsProjProposalJour.addRange(fieldNum(ProjProposalJour, LineProperty)).value(queryValue(ProjLinePropertyCode::Approved));
            qbdsProjProposalJour.addRange(fieldNum(ProjProposalJour, LineProperty)).value(queryValue(ProjLinePropertyCode::Open));
        }
      
        ProjInvoiceSelect::buildProjProposalLinesUnionQuery(qbdsProjProposalJour);

        query.interactive(showQueryForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useLateSelectionQuery</Name>
				<Source><![CDATA[
    protected boolean useLateSelectionQuery()
    {
        boolean  ret;

        ret = this.parmLateSelection() && this.parmLateSelectionQuery() != conNull();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProjFormletterParmData construct()
    {
        return new ProjFormletterParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChooseLines</Name>
				<Source><![CDATA[
    static ProjFormletterParmData newChooseLines(container _projFormletterPacked)
    {
        ProjFormletterParmData  projFormletterParmData;
        ProjFormLetter          projFormLetter;

        projFormletterParmData = ProjFormletterParmData::construct();
        projFormletterParmData.parmVersioningStrategy(FormLetterParmDataVersioning::newVersioningUpdateType(VersioningUpdateType::Initial, projFormletterParmData));

        projFormLetter = ProjFormLetter::construct(DocumentStatus::ProjectInvoice,false);
        projFormLetter.unpack(_projFormletterPacked);

        projFormletterParmData.parmParmId(projFormLetter.parmId());
        projFormletterParmData.parmShowQueryForm(projFormLetter.showQueryForm());
        projFormletterParmData.parmDatasourceRecordsPacked(projFormLetter.parmDataSourceRecordsPacked());
        projFormletterParmData.parmSourceTable(projFormLetter.parmSourceTable());
        projFormletterParmData.parmLateSelection(projFormLetter.parmLateSelection());
        projFormletterParmData.parmLateSelectionQuery(projFormLetter.parmLateSelectionQuery());
        projFormletterParmData.parmExecuteLateSelection(projFormLetter.parmLateSelection());

        projFormletterParmData.init();
        return projFormletterParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal FormLetterInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = ProjFormLetterInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>