<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSASchedRoleHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PSASchedRoleHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PSASchedRole_findOrCreateTeamMemberRoleDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the default team member role if it does not already exist.
    /// </summary>
    /// <param name="_result">The <c>EventHandlerResult</c> instance to be filled with the team member default role.</param>
    [SubscribesTo(tableStr(PSASchedRole), staticDelegateStr(PSASchedRole, findOrCreateTeamMemberRoleDelegate))]
    public static void PSASchedRole_findOrCreateTeamMemberRoleDelegate(EventHandlerResult _result)
    {
        PSASchedRole defaultRole;

        select firstonly defaultRole
            where defaultRole.DefaultResourceCategory == FalseTrue::True;

        if (!defaultRole)
        {
            PSASchedRoleId teamMemberRoleId = SysLabel::labelId2String(literalStr('@SYS301393'), CompanyInfo::languageId());

            ttsbegin;

            defaultRole = PSASchedRole::findById(teamMemberRoleId, true);

            if (!defaultRole)
            {
                defaultRole = PSASchedRole::createRoleById(teamMemberRoleId, "@SYS4009197");
            }

            if (defaultRole && !defaultRole.DefaultResourceCategory)
            {
                defaultRole.DefaultResourceCategory = FalseTrue::True;
                defaultRole.update();
            }

            ttscommit;
        }

        _result.result(defaultRole);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSASchedRole_existsDefaultRoleDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks for default role.
    /// </summary>
    /// <param name="_result">An <c>EventHandlerResult</c> instance to be filled with true if default role exists otherwise false.</param>
    [SubscribesTo(tableStr(PSASchedRole), staticDelegateStr(PSASchedRole, existsDefaultRoleDelegate))]
    public static void PSASchedRole_existsDefaultRoleDelegate(EventHandlerResult _result)
    {
        _result.result(
            (select firstonly RecId from PSASchedRole where PSASchedRole.DefaultResourceCategory == FalseTrue::True).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSASchedRole_updateDefaultRoleDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating other role with default role to false when modifying current role as default.
    /// </summary>
    [SubscribesTo(tableStr(PSASchedRole), staticDelegateStr(PSASchedRole, updateDefaultRoleDelegate))]
    public static void PSASchedRole_updateDefaultRoleDelegate()
    {
        PSASchedRole psaSchedRole;

        ttsbegin;

        update_recordset psaSchedRole
            setting DefaultResourceCategory = FalseTrue::False
            where psaSchedRole.DefaultResourceCategory == FalseTrue::True;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSASchedRole_onValidatingField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>PSASchedRole</c> validating field event.
    /// </summary>
    /// <param name="_sender">The <c>PSASchedRole</c> record.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(PSASchedRole), DataEventType::ValidatingField)]
    public static void PSASchedRole_onValidatingField(Common _sender, DataEventArgs _e)
    {
        ValidateFieldEventArgs validateFieldEventArgs = _e as ValidateFieldEventArgs;
        PSASchedRole role = _sender as PSASchedRole;

        switch (validateFieldEventArgs.parmFieldId())
        {
            case fieldNum(PSASchedRole, DefaultResourceCategory):
                if (!role.DefaultResourceCategory)
                {
                    PSASchedRole psaSchedRole;

                    select firstonly RecId from psaSchedRole
                        where psaSchedRole.DefaultResourceCategory == FalseTrue::True
                            && psaSchedRole.RoleId != role.RoleId;

                    if (!psaSchedRole.RecId)
                    {
                        validateFieldEventArgs.parmValidateResult(checkFailed("@Res:ProjDefaultRoleUnmarkError"));
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>