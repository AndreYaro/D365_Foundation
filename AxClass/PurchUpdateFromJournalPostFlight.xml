<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchUpdateFromJournalPostFlight</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
/// <summary>
/// The <c>PurchUpdateFromJournalPostFlight</c> class handles the flighting logic to
/// skip using <c>doUpdate</c> method for the purchase order line record with invoice and product receipt posting processes.
/// </summary>
internal final class PurchUpdateFromJournalPostFlight implements IFeatureLifecycle
{
    private static PurchUpdateFromJournalPostFlight singleton;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeNew</Name>
				<Source><![CDATA[
    private static void typeNew()
    {
        singleton = new PurchUpdateFromJournalPostFlight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static PurchUpdateFromJournalPostFlight instance()
    {
        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the feature is enabled.
    /// </summary>
    /// <returns>
    /// True if the feature is enabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean isEnabled()
    {
        return Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the stage of the feature in its lifecycle.
    /// </summary>
    /// <returns>A <c>FeatureLifeCycleState</c> value.</returns>
    /// <remarks>
    /// a.  Incomplete – feature is disabled by default. It can be only enabled on MS internal environments (think dev boxes, AxToday, TIE, etc.) with a flight. The flight name is the same as the class name (MyFeature)
    /// b.  PrivatePreview – feature is enabled by flight. The flight name is the same as the class name (MyFeature)
    /// c.  PublicPreview – feature is enabled by default, it can be turned off with the kill switch. The kill switc is flight called <ClassName>_KillSwitch  (MyFeature_KillSwitch).
    /// d.  Released – feature is enabled by default and cannot be disabled
    /// </remarks>
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::PublicPreview;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>