<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetProposalGenerateSource</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BudgetProposalGenerateSource
{
    BudgetProposalConfiguration proposalConfig;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetProposal</Name>
				<Source><![CDATA[
    internal static void createBudgetProposal(BudgetProposalConfiguration _proposalConfig)
    {
        BudgetProposalGenerateSource proposal = new BudgetProposalGenerateSource();
        proposal.proposalConfig = _proposalConfig;

        PowerAIInsightsStateMachineFacade stateMachineFacade = PowerAIInsightsStateMachineFacade::newForFeatureName(FinanceInsightsConstants::BudgetProposalInsightsFeatureNameV2);
        
        SysInstrumentationProgressLogger progressLogger = SysInstrumentationProgressLogger::createLogger(BudgetProposalConstants::SourceNameBudgetProposalGenerateSource, BudgetProposalConstants::InstrumentationNamespace);
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(BudgetProposalConstants::ActivityNameCreateBudgetProposal))
        {
            activityContext.addCustomProperty(BudgetProposalConstants::PropertyNameSourceTransactions, enum2Symbol(enumNum(BudgetSourceTransactions), proposal.proposalConfig.SourceTransactions));

            try
            {
                proposal.generateFromBudgetProposalConfiguration();

                stateMachineFacade.processEvent(PowerAIInsightsEventNoArgs::newFromEvent(PowerAIInsightsEventConstants::BatchJobSucceeded));
                stateMachineFacade.processEvent(PowerAIInsightsEventNoArgs::newFromEvent(PowerAIInsightsEventConstants::TriggerDataFlow));
            }
            catch
            {
                stateMachineFacade.processEvent(PowerAIInsightsEventNoArgs::newFromEvent(PowerAIInsightsEventConstants::BatchJobFailed));
                throw;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFromBudgetProposalConfiguration</Name>
				<Source><![CDATA[
    private void generateFromBudgetProposalConfiguration()
    {
        this.updateProposalConfig();

        switch (proposalConfig.SourceTransactions)
        {
            case BudgetSourceTransactions::Budget :
                this.generateFromBudgetSource();
                break;
            case BudgetSourceTransactions::Actuals :
                this.generateFromActualsSource();
                break;
            case BudgetSourceTransactions::Both :
                this.generateFromActualsSource();
                this.generateFromBudgetSource();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFromBudgetSource</Name>
				<Source><![CDATA[
    private void generateFromBudgetSource()
    {
        BudgetProposalGenerateSourceFromBudget budgetSource = BudgetProposalGenerateSourceFromBudget::construct();
        budgetSource.parmProposalConfiguration(proposalConfig);
        budgetSource.generate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFromActualsSource</Name>
				<Source><![CDATA[
    private void generateFromActualsSource()
    {
        BudgetProposalGenerateSourceFromActuals actualSource = BudgetProposalGenerateSourceFromActuals::construct();
        actualSource.parmProposalConfiguration(proposalConfig);
        actualSource.generate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProposalConfig</Name>
				<Source><![CDATA[
    private void updateProposalConfig()
    {
        // Set the timeseries Id to the one we are generating.
        ttsbegin;
        this.proposalConfig = BudgetProposalConfiguration::find(proposalConfig.RecId, true);
        proposalConfig.TimeSeriesId = guid2Str(newGuid());
        proposalConfig.update();
        ttscommit;

        this.proposalConfig = BudgetProposalConfiguration::find(proposalConfig.RecId, false);

        // Remove any previous execution data
        BudgetProposalGenerateSource::deleteNonExistentTimeSeriesData(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteNonExistentTimeSeriesData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes budget prediction and results data not related to an existent execution of a budget proposal configuration.
    /// </summary>
    /// <param name="_deleteAllTimeSeriesDetail">
    /// Determines whether to delete all records from the <c>BudgetTimeSeriesDetail</c> table or not.
    /// </param>
    internal static void deleteNonExistentTimeSeriesData(boolean _deleteAllTimeSeriesDetail = false)
    {
        BudgetProposalConfiguration budgetProposalConfiguration;

        ttsbegin;

        if (_deleteAllTimeSeriesDetail)
        {
            BudgetTimeSeriesDetail::deleteAllTimeSeriesData();
        }
        else
        {
            // Delete orphaned budget prediction input data
            BudgetTimeSeriesDetail timeSeriesDetail;
            delete_from timeSeriesDetail
                notexists join budgetProposalConfiguration
                where timeSeriesDetail.TimeSeriesId == budgetProposalConfiguration.TimeSeriesId;
        }
        
        // Delete orphaned budget prediction results data
        BudgetTimeSeriesDetailResult timeSeriesDetailResult;
        delete_from timeSeriesDetailResult
            notexists join budgetProposalConfiguration
            where timeSeriesDetailResult.TimeSeriesId == budgetProposalConfiguration.TimeSeriesId;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>