<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingSalesDocumentHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains helper method for retail pricing in sales document.
/// </summary>
internal static class RetailPricingSalesDocumentHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isMcrPriceControlEnabledForOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether given sales order has price control enabled.
    /// </summary>
    /// <param name = "_salesId">Id of the sales order.</param>
    /// <returns>True if given sales order has price control enabled; otherwise, false.</returns>
    internal static boolean isMcrPriceControlEnabledForOrder(SalesId _salesId)
    {
        if (!MCROrderParameters::isCallCenterEnabledAndInUse())
        {
            return false;
        }

        RetailMCRChannelTable retailMCRChannelTable;

        if (_salesId)
        {
            RetailSalesTable retailSalesTable = RetailSalesTable::find(_salesId);
            retailMCRChannelTable =
                RetailMCRChannelTable::findRecId(retailSalesTable.RetailChannel);
        }
        else
        {
            retailMCRChannelTable = RetailMCRChannelTable::findForCurrentUser();
        }

        return retailMCRChannelTable
            && retailMCRChannelTable.MCREnableOrderPriceControl == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMcrPriceControlEnabledForQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether given sales quotation has price control enabled.
    /// </summary>
    /// <param name = "_quoteId">Id of the sales quotation.</param>
    /// <returns>True if given sales quotation has price control enabled; otherwise, false.</returns>
    internal static boolean isMcrPriceControlEnabledForQuotation(SalesQuotationId _quoteId)
    {
        if (!MCROrderParameters::isCallCenterEnabledAndInUse())
        {
            return false;
        }

        RetailMCRChannelTable retailMCRChannelTable;

        if (_quoteId)
        {
            RetailSalesQuotationTable retailSalesQuote =
                RetailSalesQuotationTable::find(_quoteId);
            retailMCRChannelTable =
                RetailMCRChannelTable::findRecId(retailSalesQuote.RetailChannel);
        }
        else
        {
            retailMCRChannelTable = RetailMCRChannelTable::findForCurrentUser();
        }

        return retailMCRChannelTable
            && retailMCRChannelTable.MCREnableOrderPriceControl == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuotationsReadyForConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the quotations are valid for confirmation.
    /// </summary>
    /// <param name = "_quotationMap">A packed map of the quotation records selected by the user on the form.</param>
    internal static void validateQuotationsReadyForConfirm(container _quotationMap)
    {
        Map mapSalesQuotationRecord = Map::create(_quotationMap);
        MapEnumerator mapSalesQuotationRecordEnumerator = mapSalesQuotationRecord.getEnumerator();
        while (mapSalesQuotationRecordEnumerator.moveNext())
        {
            SalesQuotationTable localSalesQuotationTable = mapSalesQuotationRecordEnumerator.currentValue();
            if (RetailPricingEngine::useRetailPricingEngineForSalesQuatation(localSalesQuotationTable.QuotationId)
                    && RetailPricingSalesDocumentHelper::isMcrPriceControlEnabledForQuotation(localSalesQuotationTable.QuotationId)
                    && localSalesQuotationTable.mcrCheckIfAnyNonApprovedLine())
            {
                if (RetailSalesQuotationCheckWorkflowRejectedLinesFlight::instance().isEnabled())
                {
                    throw error(strFmt("@RetailPricing:CannotConfirmWhenQuotationHasRejectedLine", localSalesQuotationTable.QuotationId));
                }
                else
                {
                    throw error(strFmt("@RetailPricing:CannotConfirmQuotationWhenNotApproved", localSalesQuotationTable.QuotationId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLaunchPolicyDialogForSalesDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether the PricDiscPolicy dialog should be lanuched.
    /// </summary>
    /// <param name = "currentTableId">Table Id of the header table.</param>
    /// <param name = "salesPurchId">Id of header table.</param>
    /// <returns>True if it is not retail sales document or if is retail sales document but price lock feature is disabled and not project order.</returns>
    internal static boolean shouldLaunchPolicyDialogForSalesDocument(RefTableId currentTableId, str salesPurchId)
    {
        boolean ret = true;

        // If the prevent unintentional price recalculation is enabled via customization, then for retail sales orders and retail sales quotes,
        // the dialog should not be triggered for prices and discounts behavior by line.
        if (RetailPricingCustomizableFeatureToggle::isPreventUnintendedRecalculationEnabled())
        {
            if (currentTableId == tableNum(SalesLine))
            {
                SalesTable locSalesTable = SalesTable::find(salesPurchId);
                if (locSalesTable.isRetailSale() && locSalesTable.ProjId == "")
                {
                    ret = false;
                }
            }

            if (currentTableId == tableNum(SalesQuotationLine))
            {
                SalesQuotationTable locSalesQuotationTable = SalesQuotationTable::find(salesPurchId);
                if (locSalesQuotationTable.isRetailSaleQuotation())
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>