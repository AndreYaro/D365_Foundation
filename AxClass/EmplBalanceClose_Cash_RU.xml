<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplBalanceClose_Cash_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplBalanceClose_Cash_RU extends EmplBalanceClose_RU
{
    RCashTrans  cashTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoPosting</Name>
				<Source><![CDATA[
    protected void autoPosting()
    {
        if (! autoPosting)
            return;

        this.createCashTrans();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCashTrans</Name>
				<Source><![CDATA[
    private boolean createCashTrans()
    {
        RCashTransSetStatus setStatus;
        RecordSortedList    ledgerJournalTransList = new RecordSortedList(tableNum(LedgerJournalTrans));
        ;
        ledgerJournalTransList.ins(ledgerJournalTrans);

        setStatus = new RCashTransSetStatus();
        setStatus.parmLedgerJournalTransList(ledgerJournalTransList);

        if (RCashParameters::find().ConfirmationEnabled)
        {
            setStatus.parmStatus(RCashTransStatus::Confirmed);
            setStatus.runOperation();
        }
        setStatus.parmStatus(RCashTransStatus::Approved);
        setStatus.runOperation();

        ledgerJournalTrans = LedgerJournalTrans::findRecId(ledgerJournalTrans.RecId, false);
        cashTrans = RCashTrans::findLedgerJournalTrans(ledgerJournalTrans);
        return cashTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTable</Name>
				<Source><![CDATA[
    protected boolean createTable()
    {
        if (! emplParameters.CashCloseJournalName)
            return checkFailed("@SYS16764");

        super();
        this.createLedgerJournalTable(ledgerJournalTable,
                                      emplParameters.CashCloseJournalName);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected boolean createTrans()
    {
        boolean ret;

        OfficialsServ_RU    officialsServ = new OfficialsServ_RU();

        ret = super();

        ledgerJournalTrans.AccountType              = LedgerJournalACType::RCash;
        ledgerJournalTrans.parmAccount(emplParameters.CashCloseAccount);
        ledgerJournalTrans.PostingProfile           = RCashParameters::find().PostingProfile;
        ledgerJournalTrans.rCashDocRepresPersonId   = emplId;
        ledgerJournalTrans.setRepresPersonValues_W();

        if (totalAmount > 0)
        {
            ledgerJournalTrans.AmountCurDebit = totalAmount;
        }
        else
        {
            ledgerJournalTrans.AmountCurCredit = -totalAmount;
        }
        officialsServ.initTableRCash(ledgerJournalTrans.parmAccount());

        this.createLedgerJournalTrans(ledgerJournalTrans, ledgerJournalTable);

        ret = ledgerJournalTrans.RecId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfo</Name>
				<Source><![CDATA[
    protected void showInfo()
    {
        ;
        if (cashTrans)
        {
            info(strFmt("@GLS104623", cashTrans.DocId, cashTrans.TransDate));
        }
        else
        {
            info(strFmt("@SYS62960",
                        ledgerJournalTrans.JournalNum,
                        ledgerJournalTable.JournalType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS104620";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ;
        EmplBalanceClose_RU::execute(_args, new EmplBalanceClose_Cash_RU());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>