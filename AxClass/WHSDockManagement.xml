<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSDockManagement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSDockManagement</c> class is used to manage a location with a specific dock management profile.
/// The class contains validation of mixing goods on the location and management of the existing inventory on the location.
/// </summary>
class WHSDockManagement
{
    WMSLocation         location;
    InventSiteId        inventSiteId;
    WHSDockMgmtProfile  dockMgmtProfile;

    WHSWorkTransType    workTransType;
    WHSShipmentId       shipmentId;
    WHSOrderNum         orderNum;
    WHSLoadId           loadId;
    WHSWaveId           waveId;

    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExistingInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there is an onhand inventory on the dock location with a different value.
    /// The mixing field that contains the value is defined in the dock management profile.
    /// </summary>
    /// <returns>
    /// true if there is an existing onhand inventory on the dock location with same value; otherwise false.
    /// </returns>
    boolean checkExistingInventory()
    {
        InventSum       inventSum;
        boolean         ret = true;

        ttsbegin;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
            where inventSum.ClosedQty           == NoYes::No                    &&
                  inventSum.InventLocationId    == location.inventLocationId    &&
                  inventSum.wMSLocationId       == location.wMSLocationId       &&
                  inventSum.PhysicalInvent       > 0;
        }
        else
        {
            InventDim       inventDim;

            select RecId from inventSum
            join InventDimId, InventLocationId, WMSLocationId from inventDim
            where inventSum.InventDimId         == inventDim.inventDimId        &&
                  inventSum.ClosedQty           == NoYes::No                    &&
                  inventDim.InventLocationId    == location.inventLocationId    &&
                  inventDim.wMSLocationId       == location.wMSLocationId       &&
                  inventSum.PhysicalInvent       > 0;
        }

        if (inventSum.RecId > 0)
        {
            if (WHSDockManagementOptimizationFlight::instance().isEnabled())
            {
                ret = this.validateOpenWorkPickLine();
            }
            else
            {
                WHSWorkTable    workTable;
                WHSWorkLine     closedPrevPutWorkLine;
                WHSWorkLine     openPickWorkLine;

                select firstOnly LoadId, ShipmentId, OrderNum from openPickWorkLine
                    where openPickWorkLine.WMSLocationId == location.wMSLocationId
                        && openPickWorkLine.WorkType == WHSWorkType::Pick
                        && (openPickWorkLine.WorkStatus == WHSWorkStatus::Open
                            || openPickWorkLine.WorkStatus == WHSWorkStatus::InProcess)
                    join WaveId, WorkTransType from workTable
                        where workTable.WorkId == openPickWorkLine.WorkId
                            && workTable.InventLocationId == location.inventLocationId
                    exists join closedPrevPutWorkLine
                        where closedPrevPutWorkLine.WorkId == openPickWorkLine.WorkId
                            && closedPrevPutWorkLine.LineNum == openPickWorkLine.LineNum - 1
                            && closedPrevPutWorkLine.WorkType == WHSWorkType::Put
                            && closedPrevPutWorkLine.WorkStatus == WHSWorkStatus::Closed;

                switch (dockMgmtProfile.DockMgmtMixField)
                {
                    case WHSDockMgmtMixField::LoadId:
                        ret = loadId == openPickWorkLine.LoadId;
                        break;

                    case WHSDockMgmtMixField::ShipmentId:
                        ret = shipmentId == openPickWorkLine.ShipmentId;
                        break;

                    case WHSDockMgmtMixField::OrderNum:
                        ret = orderNum == openPickWorkLine.OrderNum;
                        break;

                    case WHSDockMgmtMixField::WaveId:
                        ret = waveId == workTable.WaveId;
                        break;

                    case WHSDockMgmtMixField::WorkTransType:
                        ret = workTransType == workTable.WorkTransType;
                        break;
                }
            }
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOpenWorkPickLine</Name>
				<Source><![CDATA[
    private boolean validateOpenWorkPickLine()
    {
        WHSWorkTable    workTable;
        WHSWorkLine     closedPrevPutWorkLine;
        WHSWorkLine     openPickWorkLine;

        SysDaQueryObject sysDaQueryWorkLine = new SysDaQueryObject(openPickWorkLine);

        sysDaQueryWorkLine.firstOnlyHint = true;
        sysDaQueryWorkLine.projection().add(fieldStr(WHSWorkLine, RecId));

        SysDaQueryExpression pickWorkLineExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(openPickWorkLine, fieldStr(WHSWorkLine, WMSLocationId)),
                new SysDaValueExpression(location.wMSLocationId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(openPickWorkLine, fieldStr(WHSWorkLine, WorkType)),
                new SysDaValueExpression(WHSWorkType::Pick)));

        SysDaQueryExpression pickWorkLineWorkStatusExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(openPickWorkLine, fieldStr(WHSWorkLine, WorkStatus)),
                new SysDaValueExpression(WHSWorkStatus::Open))
            .or(new SysDaEqualsExpression(
                new SysDaFieldExpression(openPickWorkLine, fieldStr(WHSWorkLine, WorkStatus)),
                new SysDaValueExpression(WHSWorkStatus::InProcess)));

        pickWorkLineExpression = pickWorkLineExpression.and(pickWorkLineWorkStatusExpression);

        SysDaQueryObject sysDaQueryWorkTable = new SysDaQueryObject(workTable);

        SysDaQueryExpression workTableExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(openPickWorkLine, fieldStr(WHSWorkLine, WorkId)),
                new SysDaFieldExpression(workTable, fieldStr(WHSWorkTable, WorkId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(workTable, fieldStr(WHSWorkTable, InventLocationId)),
                new SysDaValueExpression(location.inventLocationId)));

        SysDaQueryObject sysDaQueryPutWorkLineTable = new SysDaQueryObject(closedPrevPutWorkLine);

        SysDaQueryExpression closedPutWorkLineExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(openPickWorkLine, fieldStr(WHSWorkLine, WorkId)),
                new SysDaFieldExpression(closedPrevPutWorkLine, fieldStr(WHSWorkLine, WorkId)))
            .and(new SysDaLessThanExpression(
                new SysDaFieldExpression(closedPrevPutWorkLine, fieldStr(WHSWorkLine, LineNum)),
                new SysDaFieldExpression(openPickWorkLine, fieldStr(WHSWorkLine, LineNum)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(closedPrevPutWorkLine, fieldStr(WHSWorkLine, WorkType)),
                new SysDaValueExpression(WHSWorkType::Put))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(closedPrevPutWorkLine, fieldStr(WHSWorkLine, WorkStatus)),
                new SysDaValueExpression(WHSWorkStatus::Closed)))));

        switch (dockMgmtProfile.DockMgmtMixField)
        {
            case WHSDockMgmtMixField::LoadId:
                SysDaQueryExpression pickWorkLineLoadIdExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(openPickWorkLine, fieldStr(WHSWorkLine, LoadId)),
                new SysDaValueExpression(loadId));

                pickWorkLineExpression = pickWorkLineExpression.and(pickWorkLineLoadIdExpression);
                break;

            case WHSDockMgmtMixField::ShipmentId:
                SysDaQueryExpression pickWorkLineShipmentIdExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(openPickWorkLine, fieldStr(WHSWorkLine, ShipmentId)),
                new SysDaValueExpression(shipmentId));

                pickWorkLineExpression = pickWorkLineExpression.and(pickWorkLineShipmentIdExpression);
                break;

            case WHSDockMgmtMixField::OrderNum:
                SysDaQueryExpression pickWorkLineOrderNumExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(openPickWorkLine, fieldStr(WHSWorkLine, OrderNum)),
                new SysDaValueExpression(orderNum));

                pickWorkLineExpression = pickWorkLineExpression.and(pickWorkLineOrderNumExpression);
                break;

            case WHSDockMgmtMixField::WaveId:
                SysDaQueryExpression workTableWaveIdExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(workTable, fieldStr(WHSWorkTable, WaveId)),
                new SysDaValueExpression(waveId));

                workTableExpression = workTableExpression.and(workTableWaveIdExpression);
                break;

            case WHSDockMgmtMixField::WorkTransType:
                SysDaQueryExpression workTableWorkTransTypeExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(workTable, fieldStr(WHSWorkTable, WorkTransType)),
                new SysDaValueExpression(workTransType));

                workTableExpression = workTableExpression.and(workTableWorkTransTypeExpression);
                break;
        }

        sysDaQueryWorkLine.whereClause(pickWorkLineExpression);
        sysDaQueryWorkTable.whereClause(workTableExpression);
        sysDaQueryPutWorkLineTable.whereClause(closedPutWorkLineExpression);
        sysDaQueryWorkLine.joinClause(SysDaJoinKind::ExistsJoin, sysDaQueryWorkTable)
                            .joinClause(SysDaJoinKind::ExistsJoin, sysDaQueryPutWorkLineTable);

        SysDaSearchObject searchObject = new SysDaSearchObject(sysDaQueryWorkLine);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();

        searchStatement.findNext(searchObject);

        return openPickWorkLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOpenWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there is an open or in process put work to the dock location with a different value.
    /// The mixing field that contains the value is defined in the dock management profile.
    /// </summary>
    /// <returns>
    /// true if there is an open or in process work with the same value; otherwise false.
    /// </returns>
    boolean checkOpenWork()
    {
        WHSWorkTable    workTable;
        WHSWorkLine     putWorkLine;
        boolean         ret = true;


        if (WHSDockManagementOptimizationFlight::instance().isEnabled())
        {
            ret = this.validateOpenWorkLine();
        }
        else
        {
            while select LoadId, ShipmentId, OrderNum from putWorkLine
            where putWorkLine.WMSLocationId == location.wMSLocationId
                && putWorkLine.WorkType == WHSWorkType::Put
                && (putWorkLine.WorkStatus == WHSWorkStatus::Open
                    || putWorkLine.WorkStatus == WHSWorkStatus::InProcess)
            join WaveId, WorkTransType from workTable
                where workTable.WorkId == putWorkLine.WorkId
                    && workTable.InventSiteId == inventSiteId
                    && workTable.InventLocationId == location.inventLocationId
            {
                switch (dockMgmtProfile.DockMgmtMixField)
                {
                    case WHSDockMgmtMixField::LoadId:
                        ret = loadId == putWorkLine.LoadId;
                        break;

                    case WHSDockMgmtMixField::ShipmentId:
                        ret = shipmentId == putWorkLine.ShipmentId;
                        break;

                    case WHSDockMgmtMixField::OrderNum:
                        ret = orderNum == putWorkLine.OrderNum;
                        break;

                    case WHSDockMgmtMixField::WaveId:
                        ret = waveId == workTable.WaveId;
                        break;

                    case WHSDockMgmtMixField::WorkTransType:
                        ret = workTransType == workTable.WorkTransType;
                        break;
                }

                if (!ret)
                {
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOpenWorkLine</Name>
				<Source><![CDATA[
    private boolean validateOpenWorkLine()
    {
        WHSWorkTable    workTable;
        WHSWorkLine     putWorkLine;

        SysDaQueryObject sysDaQueryWorkLine = new SysDaQueryObject(putWorkLine);

        sysDaQueryWorkLine.firstOnlyHint = true;
        sysDaQueryWorkLine.projection().add(fieldStr(WHSWorkLine, RecId));

        SysDaQueryExpression putWorkLineExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(putWorkLine, fieldStr(WHSWorkLine, WMSLocationId)),
                new SysDaValueExpression(location.wMSLocationId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(putWorkLine, fieldStr(WHSWorkLine, WorkType)),
                new SysDaValueExpression(WHSWorkType::Put)));

        SysDaQueryExpression putWorkLineWorkStatusExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(putWorkLine, fieldStr(WHSWorkLine, WorkStatus)),
                new SysDaValueExpression(WHSWorkStatus::Open))
            .or(new SysDaEqualsExpression(
                new SysDaFieldExpression(putWorkLine, fieldStr(WHSWorkLine, WorkStatus)),
                new SysDaValueExpression(WHSWorkStatus::InProcess)));

        putWorkLineExpression = putWorkLineExpression.and(putWorkLineWorkStatusExpression);

        SysDaQueryObject sysDaQueryWorkTable = new SysDaQueryObject(workTable);

        SysDaQueryExpression workTableExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(putWorkLine, fieldStr(WHSWorkLine, WorkId)),
                new SysDaFieldExpression(workTable, fieldStr(WHSWorkTable, WorkId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(workTable, fieldStr(WHSWorkTable, InventSiteId)),
                new SysDaValueExpression(inventSiteId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(workTable, fieldStr(WHSWorkTable, InventLocationId)),
                new SysDaValueExpression(location.inventLocationId))));

        switch (dockMgmtProfile.DockMgmtMixField)
        {
            case WHSDockMgmtMixField::LoadId:
                SysDaQueryExpression putWorkLineLoadIdExpression = new SysDaNotEqualsExpression(
                new SysDaFieldExpression(putWorkLine, fieldStr(WHSWorkLine, LoadId)),
                new SysDaValueExpression(loadId));

                putWorkLineExpression = putWorkLineExpression.and(putWorkLineLoadIdExpression);
                break;

            case WHSDockMgmtMixField::ShipmentId:
                SysDaQueryExpression putWorkLineShipmentIdExpression = new SysDaNotEqualsExpression(
                new SysDaFieldExpression(putWorkLine, fieldStr(WHSWorkLine, ShipmentId)),
                new SysDaValueExpression(shipmentId));

                putWorkLineExpression = putWorkLineExpression.and(putWorkLineShipmentIdExpression);
                break;

            case WHSDockMgmtMixField::OrderNum:
                SysDaQueryExpression putWorkLineOrderNumExpression = new SysDaNotEqualsExpression(
                new SysDaFieldExpression(putWorkLine, fieldStr(WHSWorkLine, OrderNum)),
                new SysDaValueExpression(orderNum));

                putWorkLineExpression = putWorkLineExpression.and(putWorkLineOrderNumExpression);
                break;

            case WHSDockMgmtMixField::WaveId:
                SysDaQueryExpression putWorkTableWaveIdExpression = new SysDaNotEqualsExpression(
                new SysDaFieldExpression(workTable, fieldStr(WHSWorkTable, WaveId)),
                new SysDaValueExpression(waveId));

                workTableExpression = workTableExpression.and(putWorkTableWaveIdExpression);
                break;

            case WHSDockMgmtMixField::WorkTransType:
                SysDaQueryExpression putWorkTableWorkTransTypeExpression = new SysDaNotEqualsExpression(
                new SysDaFieldExpression(workTable, fieldStr(WHSWorkTable, WorkTransType)),
                new SysDaValueExpression(workTransType));

                workTableExpression = workTableExpression.and(putWorkTableWorkTransTypeExpression);
                break;
        }

        sysDaQueryWorkLine.whereClause(putWorkLineExpression);
        sysDaQueryWorkTable.whereClause(workTableExpression);
        sysDaQueryWorkLine.joinClause(SysDaJoinKind::ExistsJoin, sysDaQueryWorkTable);

        SysDaSearchObject searchObject = new SysDaSearchObject(sysDaQueryWorkLine);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();

        searchStatement.findNext(searchObject);

        return putWorkLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there is a put work on dock location where the work item has different value than the current value.
    /// The mixing field is defined in the dock management profile.
    /// </summary>
    /// <returns>
    /// true if there is a put work on dock location with the same value; otherwise false.
    /// </returns>
    boolean checkTempTable()
    {
        WHSTmpWorkLine      locTmpWorkLine;
        boolean             ret = true;

        if (WHSDockManagementOptimizationFlight::instance().isEnabled())
        {
            ret = this.validateTmpWorkLine();
        }
        else
        {
            while select LoadId, ShipmentId, OrderNum, WaveId, WorkTransType from locTmpWorkLine
            where locTmpWorkLine.InventLocationId   == location.inventLocationId    &&
                  locTmpWorkLine.WMSLocationId      == location.wMSLocationId       &&
                  locTmpWorkLine.WorkType           == WHSWorkType::Put
            {
                switch (dockMgmtProfile.DockMgmtMixField)
                {
                    case WHSDockMgmtMixField::LoadId:
                        ret = loadId == locTmpWorkLine.LoadId;
                        break;

                    case WHSDockMgmtMixField::ShipmentId:
                        ret = shipmentId == locTmpWorkLine.ShipmentId;
                        break;

                    case WHSDockMgmtMixField::OrderNum:
                        ret = orderNum == locTmpWorkLine.OrderNum;
                        break;

                    case WHSDockMgmtMixField::WaveId:
                        ret = waveId == locTmpWorkLine.WaveId;
                        break;

                    case WHSDockMgmtMixField::WorkTransType:
                        ret = workTransType == locTmpWorkLine.WorkTransType;
                        break;
                }

                if (!ret)
                {
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTmpWorkLine</Name>
				<Source><![CDATA[
    private boolean validateTmpWorkLine()
    {
        WHSTmpWorkLine  tmpWorkLine;

        SysDaQueryObject sysDaQueryWorkLine = new SysDaQueryObject(tmpWorkLine);

        sysDaQueryWorkLine.firstOnlyHint = true;
        sysDaQueryWorkLine.projection().add(fieldStr(WHSTmpWorkLine, RecId));

        SysDaQueryExpression tmpWorkLineExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(tmpWorkLine, fieldStr(WHSTmpWorkLine, WMSLocationId)),
                new SysDaValueExpression(location.wMSLocationId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(tmpWorkLine, fieldStr(WHSTmpWorkLine, InventLocationId)),
                new SysDaValueExpression(location.inventLocationId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(tmpWorkLine, fieldStr(WHSTmpWorkLine, WorkType)),
                new SysDaValueExpression(WHSWorkType::Put))));

        switch (dockMgmtProfile.DockMgmtMixField)
        {
            case WHSDockMgmtMixField::LoadId:
                SysDaQueryExpression tmpWorkLineLoadIdExpression = new SysDaNotEqualsExpression(
                new SysDaFieldExpression(tmpWorkLine, fieldStr(WHSTmpWorkLine, LoadId)),
                new SysDaValueExpression(loadId));

                tmpWorkLineExpression = tmpWorkLineExpression.and(tmpWorkLineLoadIdExpression);
                break;

            case WHSDockMgmtMixField::ShipmentId:
                SysDaQueryExpression tmpWorkLineShipmentIdExpression = new SysDaNotEqualsExpression(
                new SysDaFieldExpression(tmpWorkLine, fieldStr(WHSTmpWorkLine, ShipmentId)),
                new SysDaValueExpression(shipmentId));

                tmpWorkLineExpression = tmpWorkLineExpression.and(tmpWorkLineShipmentIdExpression);
                break;

            case WHSDockMgmtMixField::OrderNum:
                SysDaQueryExpression tmpWorkLineOrderNumExpression = new SysDaNotEqualsExpression(
                new SysDaFieldExpression(tmpWorkLine, fieldStr(WHSTmpWorkLine, OrderNum)),
                new SysDaValueExpression(orderNum));

                tmpWorkLineExpression = tmpWorkLineExpression.and(tmpWorkLineOrderNumExpression);
                break;

            case WHSDockMgmtMixField::WaveId:
                SysDaQueryExpression tmpWorkLineWaveIdExpression = new SysDaNotEqualsExpression(
                new SysDaFieldExpression(tmpWorkLine, fieldStr(WHSTmpWorkLine, WaveId)),
                new SysDaValueExpression(waveId));

                tmpWorkLineExpression = tmpWorkLineExpression.and(tmpWorkLineWaveIdExpression);
                break;

            case WHSDockMgmtMixField::WorkTransType:
                SysDaQueryExpression tmpWorkLineWorkTransTypeExpression = new SysDaNotEqualsExpression(
                new SysDaFieldExpression(tmpWorkLine, fieldStr(WHSTmpWorkLine, WorkTransType)),
                new SysDaValueExpression(workTransType));

                tmpWorkLineExpression = tmpWorkLineExpression.and(tmpWorkLineWorkTransTypeExpression);
                break;
        }

        sysDaQueryWorkLine.whereClause(tmpWorkLineExpression);

        SysDaSearchObject searchObject = new SysDaSearchObject(sysDaQueryWorkLine);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();

        searchStatement.findNext(searchObject);

        return tmpWorkLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor method of the class with dock location and profile.
    /// </summary>
    /// <param name="_location">
    /// Dock location.
    /// </param>
    /// <param name="_common">
    /// Common record that contains order, load, shipment and wave info.
    /// </param>
    /// <param name="_dockMgmtProfile">
    /// Dock management profile.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the common record is not WHSTmpWorkLine or WHSWorkLine record.
    /// </exception>
    void new(WMSLocation _location, Common _common, WHSDockMgmtProfile _dockMgmtProfile)
    {
        location        = _location;
        inventSiteId    = location.inventSiteId();
        dockMgmtProfile = _dockMgmtProfile;

        switch (_common.TableId)
        {
            case tableNum(WHSTmpWorkLine):
                workTransType   = WHSWorkTable::find(_common.(fieldNum(WHSTmpWorkLine, WorkId))).WorkTransType;
                shipmentId      = _common.(fieldNum(WHSTmpWorkLine, ShipmentId));
                orderNum        = _common.(fieldNum(WHSTmpWorkLine, OrderNum));
                loadId          = _common.(fieldNum(WHSTmpWorkLine, LoadId));
                waveId          = _common.(fieldNum(WHSTmpWorkLine, WaveId));
                break;

            case tableNum(WHSWorkLine):
                workTransType   = WHSWorkTable::find(_common.(fieldNum(WHSWorkLine, WorkId))).WorkTransType;
                shipmentId      = _common.(fieldNum(WHSWorkLine, ShipmentId));
                orderNum        = _common.(fieldNum(WHSWorkLine, OrderNum));
                loadId          = _common.(fieldNum(WHSWorkLine, LoadId));
                waveId          = WHSWorkTable::find(_common.(fieldNum(WHSWorkLine, WorkId))).WaveId;
                break;

            default:
                throw error("@WAX678");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDockMgmtMixing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a dock location by checking if there is any mixing with the item to be stored in dock.
    /// </summary>
    /// <param name="_location">
    /// The dock location.
    /// </param>
    /// <param name="_common">
    /// The record that is being stored in dock.
    /// </param>
    /// <returns>
    /// true if there is no mixing for the item; otherwise false.
    /// </returns>
    public static boolean validateDockMgmtMixing(WMSLocation _location, Common _common)
    {
        WHSDockMgmtProfile dockMgmtProfile = _location.whsLocationProfile().whsDockMgmtProfile();

        if (dockMgmtProfile && !dockMgmtProfile.AssumeEmptyForWave)
        {
            WHSParameters      parameters      = WHSParameters::find();
            WHSLocType         locType         = _location.whsLocationType();

            if ((locType == parameters.StageLocType || locType == parameters.ShipFinalLocType))            
            {
                WHSDockManagement dockManagement = new WHSDockManagement(_location, _common, dockMgmtProfile);
                return dockManagement.check();
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a dock location by checking if there is any mixing with the item to be stored in dock.
    /// </summary>
    /// <returns>
    /// true if there is no mixing for the item; otherwise false.
    /// </returns>
    protected boolean check()
    {
        using (var activity = this.instrumentationLogger().dockManagmentActivities().check(workTransType))
        {
            return this.checkTempTable() && this.checkOpenWork() && this.checkExistingInventory();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>