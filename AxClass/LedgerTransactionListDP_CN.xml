<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransactionListDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransactionListDP_CN</c> extends SrsReportDataProviderPreProcessTempDB class provides data for the <c>LedgerTransactionList_CN</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the Report Data Provider class for the <c>LedgerTransactionList_CN</c>.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(LedgerTransactionListContract_CN)),
    SRSReportQueryAttribute(queryStr(LedgerTransactionList_CN))
]
public class LedgerTransactionListDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    TmpDailyLedger_CN   tmpDailyLedger;

    LedgerPreprintDetail_CN         ledgerPrePrintCode;
    LedgerPrintLayoutCurrency_CN    ledgerPrintCurrency;

    Counter             lineOfOnePage;

    Query   ledgerTransactionList;

    LedgerInquiryDaily_CN       ledgerInquiryDaily;

    #define.DefaultMaxLines(30)
    #define.firstLine(1)
    #define.middleLine(2)
    #define.bottomLine(3)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Exchange Rate for the report.
    /// </summary>
    /// <param name="_accountNum">
    /// The MainAccountId field value.
    /// </param>
    /// <param name="_currencyCode">
    /// The CurrencyCode field value.
    /// </param>
    /// <param name="_transDate">
    /// The TransDate field value.
    /// </param>
    /// <returns>
    /// The exchange rate calculated.
    /// </returns>
    private ExchRate calcExchRate(
        MainAccountNum  _accountNum,
        CurrencyCode    _currencyCode,
        accountingDate  _transDate)
    {
        ExchRate        exchRate;

        if (_accountNum)
        {
            exchRate = _currencyCode ? ExchangeRateHelper::exchRate(_currencyCode, _transDate) : 0;
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpDailyLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>TmpDailyLedger_CN</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TmpDailyLedger_CN</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpDailyLedger_CN))
    ]
    public TmpDailyLedger_CN getTmpDailyLedger()
    {
        return tmpDailyLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpDailyLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates data achieved from query and inserts the results into the TmpDailyLedger_CN table.
    /// </summary>
    /// <param name="_prePrint">
    /// Identifies if the report is being printed on the pre-print paper.
    /// </param>
    public void initTmpDailyLedger(boolean _prePrint)
    {
        QueryRun                    queryRun;
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        GeneralJournalEntry         generalJournalEntry;
        GeneralJournalEntry_W       generalJournalEntryW;
        LedgerEntryJournal          ledgerEntryJournal;
        MainAccount                 mainAccount;
        boolean                     changeAccountOrTransYear;
        boolean                     changePage;

        LedgerAccount               lastTmpAccountId;
        AccountName                 lastTmpAccountName;

        //Counts the records of the current page.
        Counter recOfCurrentPage;

        //Defines the page number of the current page.
        Counter pageBreakCounter;

        #define.FirstPageNumber(1)
        #define.PageCounterZero(0)
        #define.PageCounterTwo(2)

        changeAccountOrTransYear    = false;
        changePage                  = false;

        SysQuery::findOrCreateRange(
            ledgerTransactionList.dataSourceTable(tableNum(GeneralJournalEntry)),
            fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));

        queryRun = new QueryRun(ledgerTransactionList);

        //Get tmp table data.
        ledgerInquiryDaily = new LedgerInquiryDaily_CN(
            queryRun.query().dataSourceTable(tableNum(MainAccount)).rangeField(fieldNum(MainAccount, MainAccountId)).value());

        //Set pageBreakCounter to 1 as the default starting number.
        pageBreakCounter = #FirstPageNumber;

        //Gets records from the query.
        while (queryRun.next())
        {
            generalJournalAccountEntry  = queryRun.get(tableNum(GeneralJournalAccountEntry));
            generalJournalEntry         = GeneralJournalEntry::findByGeneralJournalAccountEntry(generalJournalAccountEntry.RecId);
            generalJournalEntryW        = queryRun.get(tableNum(GeneralJournalEntry_W)) as GeneralJournalEntry_W;
            mainAccount                 = queryRun.get(tableNum(MainAccount));
            ledgerEntryJournal          = conPeek(GeneralLedgerExtension::findRelated(generalJournalAccountEntry.RecId), 2);

            //Judges if the records are to be printed on a new page.
            if (tmpDailyLedger.AccountNum)
            {
                changeAccountOrTransYear    = (tmpDailyLedger.AccountNum == mainAccount.MainAccountId) ? false : true;
            }
            if (!changeAccountOrTransYear)
            {
                if (tmpDailyLedger.TransYear)
                {
                    changeAccountOrTransYear    = (tmpDailyLedger.TransYear == int2str(year(generalJournalEntry.AccountingDate))) ? false : true;
                }
            }
            changePage = (recOfCurrentPage == lineOfOnePage) ? true : false;

            //When the number of records of current page reaches the maximum line number
            //or the AccountNum value of local table changes, the value of pageBreakCounter would plus by 1.
            if (changeAccountOrTransYear || changePage)
            {
                // Does modification to tmp table, which provides data for report, and reset the counter circumstantially.
                if (changeAccountOrTransYear && changePage)
                {
                    // If mainAccountId and page are changed at the same time, reset the recOfCurrentPage to 0.
                    recOfCurrentPage = #PageCounterZero;
                }
                else if (changeAccountOrTransYear)
                {
                    // If mainAccountId is changed, reset the recOfCurrentPage to 0 after inserting blank records.
                    this.processChangeAccountOrTransYear(recOfCurrentPage);
                    recOfCurrentPage = #PageCounterZero;
                }
                else
                {
                    // If page is changed, reset the recOfCurrentPage to 2 after modifying the previous tmp table records.
                    this.processChangePage();
                    recOfCurrentPage = #PageCounterTwo;
                }
                pageBreakCounter++;
            }

            tmpDailyLedger.clear();
            this.insertDataIntoTmpTable(
                generalJournalAccountEntry,
                generalJournalEntry,
                generalJournalEntryW,
                ledgerEntryJournal,
                mainAccount,
                pageBreakCounter);
            tmpDailyLedger.insert();

            recOfCurrentPage++;
        }

        lastTmpAccountId   = tmpDailyLedger.AccountNum;
        lastTmpAccountName = tmpDailyLedger.AccountName;

        //When the last page of report is not full, insert blank records into the tmp table
        if (tmpDailyLedger.RecId)
        {
            while (!_prePrint && (recOfCurrentPage < lineOfOnePage))
            {
                tmpDailyLedger.clear();
                tmpDailyLedger.AccountNum       = lastTmpAccountId;
                tmpDailyLedger.AccountName      = lastTmpAccountName;
                tmpDailyLedger.PageBreakCounter = pageBreakCounter;
                tmpDailyLedger.SortInGroup      = #bottomLine;
                tmpDailyLedger.insert();

                recOfCurrentPage++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataIntoTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into temp table.
    /// </summary>
    /// <param name="_generalJournalAccountEntry">
    /// The general journal account entry.
    /// </param>
    /// <param name="_generalJournalEntry">
    /// The general journal entry.
    /// </param>
    /// <param name="_generalJournalEntryW">
    /// The general journal entry.
    /// </param>
    /// <param name="_ledgerEntryJournal">
    /// The ledger entry journal.
    /// </param>
    /// <param name="_mainAccount">
    /// The main account information.
    /// </param>
    /// <param name="_pageBreakCounter">
    /// The page break counter information.
    /// </param>
    public void insertDataIntoTmpTable(
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        GeneralJournalEntry _generalJournalEntry,
        GeneralJournalEntry_W _generalJournalEntryW,
        LedgerEntryJournal _ledgerEntryJournal,
        MainAccount _mainAccount,
        Counter _pageBreakCounter)
    {
        tmpDailyLedger.AccountNum                   = _mainAccount.MainAccountId;
        tmpDailyLedger.AccountName                  = MainAccount::getLocalizedNameByMainAccountId(_mainAccount.MainAccountId);
        tmpDailyLedger.CurrencyCode                 = _generalJournalAccountEntry.TransactionCurrencyCode;
        tmpDailyLedger.ExchangeRate                 = this.calcExchRate(
            tmpDailyLedger.AccountNum,
            tmpDailyLedger.CurrencyCode,
            _generalJournalEntry.AccountingDate);
        tmpDailyLedger.Explanation                  = _generalJournalAccountEntry.Text;
        tmpDailyLedger.GeneralJournalAccountEntry   = _generalJournalAccountEntry.RecId;
        tmpDailyLedger.JournalNum                   = _ledgerEntryJournal.JournalNumber;
        tmpDailyLedger.OffsetAccount                = TmpDailyLedger_CN::composeAccountName(
            ledgerInquiryDaily.offsetAccounts(
                SubledgerVoucherGeneralJournalEntry::findByGeneralJournalEntry(_generalJournalEntry).Voucher,
                _mainAccount.MainAccountId,
                _generalJournalEntry.AccountingDate));
        tmpDailyLedger.PageBreakCounter             = _pageBreakCounter;
        tmpDailyLedger.SortInGroup                  = #middleLine;
        tmpDailyLedger.TransDate                    = _generalJournalEntry.AccountingDate;
        tmpDailyLedger.TransDay                     = int2str(dayOfMth(tmpDailyLedger.TransDate));
        tmpDailyLedger.TransMonth                   = int2str(mthOfYr(tmpDailyLedger.TransDate));
        tmpDailyLedger.TransYear                    = int2str(year(tmpDailyLedger.TransDate));
        tmpDailyLedger.Voucher                      = SubledgerVoucherGeneralJournalEntry::findByGeneralJournalEntry(_generalJournalEntry).Voucher;
        tmpDailyLedger.Voucher_CN                   = _generalJournalEntryW.Voucher_CN;

        if (_generalJournalAccountEntry.IsCredit == NoYes::No)
        {
            tmpDailyLedger.AmountCurDebit           = _generalJournalAccountEntry.TransactionCurrencyAmount;
            tmpDailyLedger.AmountMSTDebit           = _generalJournalAccountEntry.AccountingCurrencyAmount;
        }
        else
        {
            tmpDailyLedger.AmountCurCredit          = - _generalJournalAccountEntry.TransactionCurrencyAmount;
            tmpDailyLedger.AmountMSTCredit          = - _generalJournalAccountEntry.AccountingCurrencyAmount;
        }

        if (_generalJournalAccountEntry.AccountingCurrencyAmount > 0)
        {
            tmpDailyLedger.BalanceStatus = LedgerBalanceStatus_CN::DR;
        }
        else if (_generalJournalAccountEntry.AccountingCurrencyAmount < 0)
        {
            tmpDailyLedger.BalanceStatus = LedgerBalanceStatus_CN::CR;
        }
        else if (_generalJournalAccountEntry.TransactionCurrencyAmount == 0)
        {
            tmpDailyLedger.BalanceStatus = LedgerBalanceStatus_CN::Balance;
        }

        tmpDailyLedger.Balance    = abs(_generalJournalAccountEntry.AccountingCurrencyAmount);
        tmpDailyLedger.BalanceCur = abs(_generalJournalAccountEntry.TransactionCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processChangeAccountOrTransYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the tmp table when changing mainAccounts.
    /// </summary>
    /// <param name="_recOfCurrentPage">
    /// The current number of the records in the last page.
    /// </param>
    protected void processChangeAccountOrTransYear(Counter _recOfCurrentPage)
    {
        // Saves the tmpDailyLedger record.
        TmpDailyLedger_CN tmpDailyLedgerLocal;

        tmpDailyLedgerLocal.data(tmpDailyLedger);

        while (_recOfCurrentPage < lineOfOnePage)
        {
            tmpDailyLedger.clear();
            tmpDailyLedger.AccountNum       = tmpDailyLedgerLocal.AccountNum;
            tmpDailyLedger.AccountName      = tmpDailyLedgerLocal.AccountName;
            tmpDailyLedger.PageBreakCounter = tmpDailyLedgerLocal.PageBreakCounter;
            tmpDailyLedger.TransYear        = tmpDailyLedgerLocal.TransYear;
            tmpDailyLedger.SortInGroup      = #bottomLine;
            tmpDailyLedger.insert();

            _recOfCurrentPage++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processChangePage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the tmp table when changing pages.
    /// </summary>
    protected void processChangePage()
    {
        TmpDailyLedger_CN   tmpDailyLedgerLocal;
        Counter             nextPageBreakCounter;

        tmpDailyLedgerLocal.data(tmpDailyLedger);
        nextPageBreakCounter = tmpDailyLedgerLocal.PageBreakCounter + 1;

        //Delete the last tmp table record.
        ttsbegin;
        tmpDailyLedger.delete();
        ttsCommit;

        tmpDailyLedger.clear();
        //Continued on the next page.
        tmpDailyLedger.Explanation      = "@GLS54675";
        tmpDailyLedger.AccountNum       = tmpDailyLedgerLocal.AccountNum;
        tmpDailyLedger.AccountName      = tmpDailyLedgerLocal.AccountName;
        tmpDailyLedger.PageBreakCounter = tmpDailyLedgerLocal.PageBreakCounter;
        tmpDailyLedger.TransYear        = tmpDailyLedgerLocal.TransYear;
        tmpDailyLedger.SortInGroup      = #bottomLine;
        tmpDailyLedger.insert();

        tmpDailyLedger.clear();
        //Continued from the previous page.
        tmpDailyLedger.Explanation      = "@GLS54673";
        tmpDailyLedger.AccountNum       = tmpDailyLedgerLocal.AccountNum;
        tmpDailyLedger.AccountName      = tmpDailyLedgerLocal.AccountName;
        tmpDailyLedger.PageBreakCounter = nextPageBreakCounter;
        tmpDailyLedger.TransYear        = tmpDailyLedgerLocal.TransYear;
        tmpDailyLedger.SortInGroup      = #firstLine;
        tmpDailyLedger.insert();

        tmpDailyLedger.clear();
        tmpDailyLedger.data(tmpDailyLedgerLocal);
        tmpDailyLedger.PageBreakCounter = nextPageBreakCounter;
        tmpDailyLedger.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SQL Server Reporting Services report.
    /// </summary>
    /// <remarks>
    /// This method will be called by SSRS at run time. The method will compute the data and populate the
    /// data tables that will be returned to SSRS
    /// </remarks>
    public void processReport()
    {
        LedgerTransactionListContract_CN contract;

        contract = this.parmDataContract() as LedgerTransactionListContract_CN;

        if (contract.parmPreprint())
        {
            ledgerPrePrintCode  = contract.parmLedgerPreprintDetailCode();
            lineOfOnePage       = #DefaultMaxLines;
        }
        else
        {
            ledgerPrintCurrency = contract.parmLedgerPrintLayoutCurrency();
            lineOfOnePage       = contract.parmMaxLines();
        }

        ledgerTransactionList = this.parmQuery();

        this.initTmpDailyLedger(contract.parmPreprint());

        select firstOnly RecId from tmpDailyLedger;
        if (!tmpDailyLedger.RecId)
        {
            tmpDailyLedger.clear();
            tmpDailyLedger.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>