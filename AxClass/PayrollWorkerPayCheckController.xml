<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkerPayCheckController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PayrollWorkerPayCheckController</c> class is the controller class for the <c>PayrollWorkerPayCheck</c> report.
/// </summary>
public class PayrollWorkerPayCheckController extends ChequeController implements BatchRetryable
{
    boolean                         isPrintTest;
    PayrollWorkerPayCheckTmp        payrollWorkerPayCheckTmp;
    PayrollTmpChequePrintout        payrollTmpChequePrintout;
    #define.InvalidCheque('Invalid cheque type.')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteTempData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the temporary class data.
    /// </summary>
    protected void deleteTempData()
    {
        delete_from payrollWorkerPayCheckTmp;
        delete_from payrollTmpChequePrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes all the required objects here.
    /// </summary>
    /// <remarks>
    ///    This method calls the <c>PayrollWorkerPayCheck</c> cheque report designs based on the check top settings.
    /// </remarks>
    public void init()
    {
        Object                      caller = args.caller();
        PayrollBankChequePrint      payrollBankChequePrint;
        container                   printerSetting;

        int                         checkTopLimit = 15000;
        str                         reportNameCheckAtTop = ssrsReportStr(PayrollWorkerPayCheck, Report);
        str                         reportNameCheckAtBottom = ssrsReportStr(PayrollWorkerPayCheck, ReportCheckBottom);

        SRSPrintDestinationSettings defaultPrintDestinationSettings = new SRSPrintDestinationSettings();

        printDestinationSettings = new SRSprintDestinationSettings();

        // Init print settings and also temp table.
        switch (classIdGet(caller))
        {
            case classNum(PayrollBankChequePrint) :

                payrollBankChequePrint = caller;
                printerSetting = payrollBankChequePrint.parmPrintJobSettingsPacked();

                if (conLen(printerSetting) > 0)
                {
                    printDestinationSettings.unpack(printerSetting);
                }
                else
                {
                    printDestinationSettings.printMediumType(SRSPrintMediumType::Printer);
                    printDestinationSettings.fromPage(1);
                    printDestinationSettings.toPage(99999999);
                    printDestinationSettings.printLandscape(false);
                    printDestinationSettings.printerName(defaultPrintDestinationSettings.printerName());
                }

                payrollTmpChequePrintout.setTmpData(payrollBankChequePrint.parmPayrollTmpChequePrintout());
                break;

            case classNum(PayrollBankPrintTestCheque) :

                payrollBankChequePrint = args.object();
                printerSetting = payrollBankChequePrint.parmPrintJobSettingsPacked();

                if (conLen(printerSetting) > 0)
                {
                    printDestinationSettings.unpack(printerSetting);
                }

                payrollTmpChequePrintout.setTmpData(payrollBankChequePrint.parmPayrollTmpChequePrintout());
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        // init cheque report type, get from the record in tmp table.
        select payrollTmpChequePrintout;

        switch (payrollTmpChequePrintout.ChequeFormType)
        {
            case ChequeFormType::USPayrollStyle:
                if (payrollTmpChequePrintout.ChequeTop <= checkTopLimit)
                {
                    // Run the report with check at top if checkTop is less than the checkTopLimit otherwise run the report with check at bottom
                    chequeReport = reportNameCheckAtTop;
                }
                else
                {
                    chequeReport = reportNameCheckAtBottom;
                }
                break;
            default:
                throw error(#InvalidCheque);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPrintTest</Name>
				<Source><![CDATA[
    protected boolean parmIsPrintTest(boolean _isPrintTest = isPrintTest)
    {
        isPrintTest = _isPrintTest;
        return isPrintTest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        PayrollWorkerPayCheckContract contract;
        SrsTmpTblMarshallerContract   marshallerContract;

        contract = this.parmReportContract().parmRdpContract() as PayrollWorkerPayCheckContract;
        contract.parmPrintContributions(PayrollParameters::find().PaySlipContributions);
        contract.parmIsPrintTest(this.parmIsPrintTest());

        marshallerContract = this.parmReportContract().parmRdpContract() as SrsTmpTblMarshallerContract;

        // get the Temp table, and marshall it across to SSRS
        new SRSReportRunPermission().assert();
        marshallerContract.parmTmpTableDataRecId(SRSTmpTblMarshaller::sendTmpTblToDataProvider(payrollTmpChequePrintout));

        // set the print destination in contract
        if (printDestinationSettings)
        {
            this.parmReportContract().parmPrintSettings(printDestinationSettings);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PayrollWorkerPayCheckController controller = new PayrollWorkerPayCheckController();

        if (_args.caller() && _args.name() == classstr(PayrollBankPrintTestCheque))
        {
            controller.parmIsPrintTest(true);
        }
        else
        {
            controller.parmIsPrintTest(false);
        }

        controller.parmArgs(_args);
        controller.deleteTempData();
        controller.parmReportName(controller.getChequeReport());
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>