<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineItemIdModifiedDTO</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesLineItemIdModifiedDTO</c> class used for transferring values between server and
/// client tiers when item id is changed.
/// </summary>
class SalesLineItemIdModifiedDTO implements SysPackable
{
    boolean isStocked;
    WHSPackingQty whsPackingQty;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        isStocked,
        whsPackingQty
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a data transfer object from the sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> record.
    /// </param>
    public void initFromSalesLine(SalesLine _salesLine)
    {
        isStocked = _salesLine.inventTable().isStocked();

        if (WHSInventEnabled::exist(_salesLine.ItemId) || TMSInventEnabled::exist(_salesLine.ItemId))
        {
            whsPackingQty = WHSInventTable::getDefaultPackingQty(_salesLine.ItemId, _salesLine.InventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsStocked</Name>
				<Source><![CDATA[
    public boolean parmIsStocked(boolean _isStocked = isStocked)
    {
        isStocked = _isStocked;
        return isStocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSPackingQty</Name>
				<Source><![CDATA[
    public WHSPackingQty parmWHSPackingQty(WHSPackingQty _whsPackingQty = whsPackingQty)
    {
        whsPackingQty = _whsPackingQty;
        return whsPackingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conpeek(_packedClass,1);
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion  :
                [version,#CurrentList] = _packedClass;
                break;

            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesLineItemIdModifiedDTO construct()
    {
        return new SalesLineItemIdModifiedDTO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineModifyInvDimAndSetTransQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>SalesLine</c> related fields when an inventory dimension field is modified and update transaction quantities.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> buffer which will be updated.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates whether the price agreements are to be reset.
    /// </param>
    /// <returns>
    /// An <c>InventDim</c> record based on passed <c>SalesLine</c> record.
    /// </returns>
    /// <remarks>
    /// This method bundles execution of couple server calls into a single server call.
    /// </remarks>
    public static InventDim salesLineModifyInvDimAndSetTransQtyUnit(SalesLine _salesLine, boolean _resetPrice)
    {
        InventDim inventDim = InventDim::find(_salesLine.InventDimId);

        _salesLine.modifyInventDim(inventDim, fieldNum(InventDim,InventLocationId), _resetPrice);

        InventMovement::bufferSetTransQtyUnit(_salesLine);

        return inventDim;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>