<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineLoadLineDetailsEnumerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class WHSWorkLineLoadLineDetailsEnumerator implements Enumerator
{
    WHSWorkId workId;
    boolean   queryOnlyClosedWorkLines;
    boolean   groupByLoadId;

    QueryRun queryRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    public anytype current()
    {
        return queryRun.get(this.returnTableId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>definitionString</Name>
				<Source><![CDATA[
    public str definitionString()
    {
        return queryRun.query().dataSourceTable(this.returnTableId()).toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    public boolean moveNext()
    {
        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        queryRun.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnTableId</Name>
				<Source><![CDATA[
    protected abstract TableId returnTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentInventQtyWork</Name>
				<Source><![CDATA[
    public abstract InventQty currentInventQtyWork()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLoadLineRefRecId</Name>
				<Source><![CDATA[
    public abstract WHSLoadLineRefRecId currentLoadLineRefRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLoadId</Name>
				<Source><![CDATA[
    public WHSLoadId currentLoadId()
    {
        WHSLoadId loadId;

        if (groupByLoadId)
        {
            // If grouping by load id, it is a requirement that
            // load line be added to the query.
            WHSLoadLine loadLine  = queryRun.get(tableNum(WHSLoadLine));
            
            loadId = loadLine.LoadId;
        }
        else
        {
            loadId = this.currentLoadLine().LoadId;
        }

        return loadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLoadLine</Name>
				<Source><![CDATA[
    public WHSLoadLine currentLoadLine()
    {
        return WHSLoadLine::findbyRecId(this.currentLoadLineRefRecId(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    protected abstract void initQueryRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkId</Name>
				<Source><![CDATA[
    public WHSWorkId parmWorkId(WHSWorkId _workId = workId)
    {
        workId = _workId;

        // If we set a parameter after the query was already build, we need to rebuild it.
        if (queryRun)
        {
            this.initQueryRun();
        }

        return workId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryOnlyClosedWorkLines</Name>
				<Source><![CDATA[
    public boolean parmQueryOnlyClosedWorkLines(boolean _queryOnlyClosedWorkLines = queryOnlyClosedWorkLines)
    {
        queryOnlyClosedWorkLines = _queryOnlyClosedWorkLines;

        // If we set a parameter after the query was already build, we need to rebuild it.
        if (queryRun)
        {
            this.initQueryRun();
        }

        return queryOnlyClosedWorkLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupByLoadId</Name>
				<Source><![CDATA[
    public boolean parmGroupByLoadId(boolean _groupByLoadId)
    {
        groupByLoadId = _groupByLoadId;

        // If we set a parameter after the query was already build, we need to rebuild it.
        if (queryRun)
        {
            this.initQueryRun();
        }

        return groupByLoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>WHSWorkLineLoadLineDetailsEnumerator</c> class for the provided work order Id.
    /// Specify whether to only query closed work lines, or query all non cancelled lines.
    /// </summary>
    /// <param name = "_workId">Work Id to enumerate lines for.</param>
    /// <param name = "_queryOnlyClosedWorkLines">true, if only Closed work lines need to be queried; otherwise, false.</param>
    /// <returns>A <c>WHSWorkLineLoadLineDetailsEnumerator</c> instance.</returns>
    public static WHSWorkLineLoadLineDetailsEnumerator newFromWorkId(WHSWorkId _workId, boolean _queryOnlyClosedWorkLines = false)
    {
        WHSWorkLineLoadLineDetailsEnumerator enumerator = WHSWorkLineLoadLineDetailsEnumerator::constructWorkLineLoadLineDetailsEnumerator(_workId, _queryOnlyClosedWorkLines);
        enumerator.initQueryRun();

        return enumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkIdGroupByLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>WHSWorkLineLoadLineDetailsEnumerator</c> class for the provided work identifier.
    /// </summary>
    /// <param name = "_workId">Work Id to enumerate lines for.</param>
    /// <returns>A <c>WHSWorkLineLoadLineDetailsEnumerator</c> instance.</returns>
    public static WHSWorkLineLoadLineDetailsEnumerator newFromWorkIdGroupByLoadId(WHSWorkId _workId)
    {
        // When grouping on load id, it is not possible to query on open work headers.
        WHSWorkLineLoadLineDetailsEnumerator enumerator = WHSWorkLineLoadLineDetailsEnumerator::constructWorkLineLoadLineDetailsEnumerator(_workId, false);
        enumerator.parmGroupByLoadId(true);
        enumerator.initQueryRun();

        return enumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWorkLineLoadLineDetailsEnumerator</Name>
				<Source><![CDATA[
    private static WHSWorkLineLoadLineDetailsEnumerator constructWorkLineLoadLineDetailsEnumerator(WHSWorkId _workId, boolean _queryOnlyClosedWorkLines)
    {
        WHSWorkLineLoadLineDetailsEnumerator enumerator;

        WHSWorkTable workTable = WHSWorkTable::find(_workId);
        if (workTable.HasWorkLineLoadLineDetails)
        {
            enumerator = WHSWorkLineLoadLineDetailsEnumerator_WorkLineLoadLineDetails::construct();
        }
        else
        {
            enumerator = WHSWorkLineLoadLineDetailsEnumerator_WorkLineInitialPicks::construct();
        }

        enumerator.parmWorkId(_workId);
        enumerator.parmQueryOnlyClosedWorkLines(_queryOnlyClosedWorkLines);

        return enumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentCapturedWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the captured weight of the current record.
    /// </summary>
    /// <returns>The captured weight of the current record.</returns>
    [Hookable(false)]
    public WHSCapturedWeight currentCapturedWeight()
    {
        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>