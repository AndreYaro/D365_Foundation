<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlBudgetTransactionProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlBudgetTransactionProcessor</c> class supports the integration of budget
/// transactions into the budget control processor.
/// </summary>
/// <remarks>
/// This class manages the interaction with the <c>BudgetControlProcessor</c> class to check budget
/// availability or remove references to a budget transaction line from budget control.
/// </remarks>
public class BudgetControlBudgetTransactionProcessor
{
    BudgetTransactionHeader budgetTransactionHeader;
    BudgetTransactionLine budgetTransactionLine;

    BudgetSourceRecId budgetSourceRecId;
    BudgetControlCheckRequest budgetControlCheckRequest;

    boolean canProcessBudgetCheck;
    boolean isDraftReservation;
    boolean showResultMessages;
    userId userId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBudgetSourceToRemove</Name>
				<Source><![CDATA[
    private void addBudgetSourceToRemove()
    {
        BudgetControlProcessor budgetControlProcessor;

        if (this.canProcessBudget())
        {
            budgetControlProcessor = BudgetControlProcessor::Instance();

            budgetControlProcessor.parmDoDisplayMessagesFromBudgetCheck(showResultMessages);

            budgetControlProcessor.addBudgetSourceToRemoveAtCommit(budgetSourceRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCheckBudgetRequestToProcess</Name>
				<Source><![CDATA[
    private void addCheckBudgetRequestToProcess()
    {
        BudgetControlProcessor budgetControlProcessor;

        if (this.canProcessBudget())
        {
            budgetControlProcessor = BudgetControlProcessor::Instance();

            budgetControlProcessor.parmDoBudgetCheckForConfirmation(!isDraftReservation);
            budgetControlProcessor.parmDoDisplayMessagesFromBudgetCheck(showResultMessages);

            budgetControlProcessor.addBudgetCheckRequestToProcessAtCommit(budgetControlCheckRequest);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the budget control processing can be performed.
    /// </summary>
    /// <returns>
    ///    true if the budget control processing can be performed; otherwise, false.
    /// </returns>
    protected boolean canProcessBudget()
    {
        return canProcessBudgetCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the budget control category for the budget transaction.
    /// </summary>
    /// <returns>
    ///    The budget control category.
    /// </returns>
    protected BudgetControlCategory getBudgetControlCategory()
    {
        BudgetControlCategory controlCategory;

        switch (budgetTransactionHeader.BudgetTransactionType)
        {
            case BudgetTransactionType::Amendment:
                controlCategory = BudgetControlCategory::Amendment;

                break;

            case BudgetTransactionType::CarryForwardBudget:
                controlCategory = BudgetControlCategory::CarryForwardBudget;

                break;

            case BudgetTransactionType::Encumbrance:
                if (budgetTransactionLine.TransactionCurrencyAmount >= 0)
                {
                    controlCategory = BudgetControlCategory::Encumbrance;
                }
                else
                {
                    controlCategory = BudgetControlCategory::EncumbranceReduction;
                }

                break;

            case BudgetTransactionType::Apportionment:
                controlCategory = BudgetControlCategory::Apportionment;
                break;

            case BudgetTransactionType::PreliminaryBudget:
                controlCategory = BudgetControlCategory::PreliminaryBudget;
                break;

            case BudgetTransactionType::OriginalBudget:
            case BudgetTransactionType::Project:
            case BudgetTransactionType::FixedAsset:
            case BudgetTransactionType::FixedAsset_RU:
            case BudgetTransactionType::SalesForecast:
            case BudgetTransactionType::PurchForecast:
                controlCategory = BudgetControlCategory::Original;

                break;

            case BudgetTransactionType::PreEncumbrance:
                controlCategory = BudgetControlCategory::PreEncumbrance;

                break;

            case BudgetTransactionType::Transfer:
                if (budgetTransactionLine.TransactionCurrencyAmount >= 0)
                {
                    controlCategory = BudgetControlCategory::TransferIn;
                }
                else
                {
                    controlCategory = BudgetControlCategory::TransferOut;
                }

                break;

            default:

                break;
        }

        return controlCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForCheckBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BudgetControlBudgetTransactionProcessor</c> class for the budget check process.
    /// </summary>
    /// <param name="_budgetTransactionLineRecId">
    /// The record ID of the <c>BudgetTransactionLine</c> record to process.
    /// </param>
    /// <param name="_isDraftReservation">
    /// A Boolean value that indicates whether the budget reservation is a draft reservation.
    /// </param>
    /// <param name="_showResultMessages">
    /// A Boolean value that indicates whether to show budget check result messages.
    /// </param>
    /// <param name="_userId">
    /// The ID of the user who is submitting the budget transaction to the budget check process.
    /// </param>
    protected void initializeForCheckBudget(
        RecId _budgetTransactionLineRecId,
        boolean _isDraftReservation,
        boolean _showResultMessages,
        userId _userId)
    {
        BudgetControlCategory budgetControlCategory;
        BudgetSourceBudgetTransactionLine budgetSourceBudgetTransactionLine;

        budgetTransactionLine = BudgetTransactionLine::find(_budgetTransactionLineRecId);

        if (budgetTransactionLine)
        {
            budgetTransactionHeader = budgetTransactionLine.getBudgetTransactionHeader();

            canProcessBudgetCheck = Ledger::isLedgerBudgetControlEnabled(budgetTransactionHeader.PrimaryLedger);

            if (canProcessBudgetCheck)
            {
                isDraftReservation = _isDraftReservation;
                showResultMessages = _showResultMessages;
                userId = _userId;

                budgetControlCategory = this.getBudgetControlCategory();

                budgetSourceBudgetTransactionLine = BudgetSourceBudgetTransactionLine::newBudgetSourceBudgetTransactionLine(budgetTransactionLine.RecId);

                budgetSourceRecId = BudgetSourceBudgetTransactionLine::saveBudgetSource(budgetTransactionLine.RecId);

                budgetControlCheckRequest = BudgetControlCheckRequest::construct();

                budgetControlCheckRequest.parmTransactionNumber(budgetTransactionHeader.TransactionNumber);
                budgetControlCheckRequest.parmBudgetControlCategory(budgetControlCategory);
                budgetControlCheckRequest.parmBudgetDate(budgetTransactionLine.Date);
                budgetControlCheckRequest.parmBudgetSourceId(budgetSourceRecId);
                budgetControlCheckRequest.parmUser(userId);

                budgetControlCheckRequest.setBudgetModel(budgetTransactionHeader.BudgetModelId, budgetTransactionHeader.BudgetModelDataAreaId);

                if (budgetControlCategory == BudgetControlCategory::CarryForwardBudget)
                {
                    budgetControlCheckRequest.parmIsCarryforward(true);
                }

                budgetControlCheckRequest.addLedgerDimensionDetail(
                    BudgetCheckDetail::newBudgetCheckDetail(
                        Ledger::primaryForLegalEntity(budgetTransactionHeader.PrimaryLedger),
                        budgetTransactionLine.LedgerDimension,
                        budgetTransactionLine.TransactionCurrencyAmount,
                        budgetTransactionLine.TransactionCurrency));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForRemoveBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BudgetControlBudgetTransactionProcessor</c> class for the remove budget process.
    /// </summary>
    /// <param name="_budgetTransactionLineRecId">
    /// The record ID of the <c>BudgetTransactionLine</c> record to process.
    /// </param>
    /// <param name="_showResultMessages">
    /// A Boolean value that indicates whether to show remove budget result messages.
    /// </param>
    protected void initializeForRemoveBudget(RecId _budgetTransactionLineRecId, boolean _showResultMessages)
    {
        budgetTransactionLine = BudgetTransactionLine::find(_budgetTransactionLineRecId);

        if (budgetTransactionLine
            && BudgetControlCheckRequest::isControlConfigured())
        {
            // The ledger does not have to be enabled for budget control
            // to ensure checks made while the ledger was enabled are removed.
            canProcessBudgetCheck = true;

            budgetTransactionHeader = budgetTransactionLine.getBudgetTransactionHeader();

            showResultMessages = _showResultMessages;
            budgetSourceRecId = BudgetSourceBudgetTransactionLine::findBudgetSourceId(budgetTransactionLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static BudgetControlBudgetTransactionProcessor construct()
    {
        return new BudgetControlBudgetTransactionProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitBudgetTransactionToApproveOverrun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets whether the budget overrun is approved for all budget transaction lines that are associated
    /// with the specified budget transaction header.
    /// </summary>
    /// <param name="_budgetTransactionHeaderRecId">
    /// The record ID of the <c>BudgetTransactionHeader</c> record.
    /// </param>
    /// <param name="_isOverrunApproved">
    /// A Boolean value that indicates whether the overrun is approved.
    /// </param>
    public static void submitBudgetTransactionToApproveOverrun(
        recId _budgetTransactionHeaderRecId,
        boolean _isOverrunApproved)
    {
        BudgetSource budgetSource;
        BudgetSource budgetSourceExistsForOverrun;
        BudgetTransactionLine budgetTransactionLine;

        if (Ledger::isLedgerBudgetControlEnabled(BudgetTransactionHeader::find(_budgetTransactionHeaderRecId).PrimaryLedger))
        {
            ttsbegin;

            // Check whether a budget source exists that needs to be updated.
            select firstOnly RecId from budgetSourceExistsForOverrun
                where budgetSourceExistsForOverrun.BudgetSourceType == BudgetSourceType::BudgetTransactionLine
                    && budgetSourceExistsForOverrun.IsOverrunApproved != _isOverrunApproved
                exists join budgetTransactionLine
                    where budgetTransactionLine.RecId == budgetSourceExistsForOverrun.BudgetTransactionLine &&
                    budgetTransactionLine.BudgetTransactionHeader == _budgetTransactionHeaderRecId;

            if (budgetSourceExistsForOverrun)
            {
                // Only update the budget source if a change is needed to at least one record.
                update_recordset budgetSource
                    setting IsOverrunApproved = _isOverrunApproved
                    where budgetSource.BudgetSourceType == BudgetSourceType::BudgetTransactionLine
                    exists join budgetTransactionLine
                        where budgetTransactionLine.RecId == budgetSource.BudgetTransactionLine &&
                        budgetTransactionLine.BudgetTransactionHeader == _budgetTransactionHeaderRecId;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitBudgetTransLineToCheckBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the budget transaction line to check budget funds availability and reserve budget funds.
    /// </summary>
    /// <param name="_budgetTransactionLineRecId">
    /// The record ID of the <c>BudgetTransactionLine</c> record to process.
    /// </param>
    /// <param name="_isDraftReservation">
    /// A Boolean value that indicates whether the budget reservation is a draft reservation.
    /// </param>
    /// <param name="_showResultMessages">
    /// A Boolean value that indicates whether to show budget check result messages; optional.
    /// </param>
    /// <param name="_userId">
    /// The user who is submitting the budget transaction to the budget check process; optional.
    /// </param>
    public static void submitBudgetTransLineToCheckBudget(
        recId _budgetTransactionLineRecId,
        boolean _isDraftReservation,
        boolean _showResultMessages = true,
        userId _userId = curUserId())
    {
        BudgetControlBudgetTransactionProcessor processor;

        if (_budgetTransactionLineRecId)
        {
            ttsBegin;

            processor = BudgetControlBudgetTransactionProcessor::construct();

            processor.initializeForCheckBudget(
                _budgetTransactionLineRecId,
                _isDraftReservation,
                _showResultMessages,
                _userId);

            processor.addCheckBudgetRequestToProcess();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitBudgetTransLineToRemoveBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the budget transaction line to remove its budget reservation.
    /// </summary>
    /// <param name="_budgetTransactionLineRecId">
    /// The record ID of the <c>BudgetTransactionLine</c> record to process.
    /// </param>
    /// <param name="_showResultMessages">
    /// A Boolean value that indicates whether to show messages of the results; optional.
    /// </param>
    public static void submitBudgetTransLineToRemoveBudget(
        recId _budgetTransactionLineRecId,
        boolean _showResultMessages = true)
    {
        BudgetControlBudgetTransactionProcessor processor;

        if (_budgetTransactionLineRecId)
        {
            ttsBegin;

            processor = BudgetControlBudgetTransactionProcessor::construct();

            processor.initializeForRemoveBudget(_budgetTransactionLineRecId, _showResultMessages);

            processor.addBudgetSourceToRemove();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>