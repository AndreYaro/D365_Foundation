<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationHelper</c> is a helper class which provides helper methods for tax integration.
/// </summary>
public class TaxIntegrationHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax for the specific transaction.
    /// </summary>
    /// <param name = "_record">The transaction record.</param>
    /// <param name = "_callerForm">The caller form.</param>
    /// <returns>The <c>Tax</c> object.</returns>
    /// <remarks>
    /// Supports transactions:
    /// sales order header, sales order line, sales order confirmation,
    /// sales order picking list, sales order packing slip, sales order invoice,
    /// sales quotation header, transfer order ship, transfer order receive,
    /// vendor invoice header.
    /// If developer needs support more transactions, adds corresponding logic.
    /// </remarks>
    public static Tax calcTax(Common _record, FormRun _callerForm)
    {
        Tax tax;
        SalesTotals salesTotals;

        // If it is transaction line, it should use transaction header to calculate tax.
        if (Global::mappingExists(tableNum(SalesPurchJournalLine), _record.TableId))
        {
            SalesPurchJournalLine salesPurchJournalLine = SalesPurchJournalLine::findRecId(_record.TableId, _record.RecId);
            if (salesPurchJournalLine && salesPurchJournalLine.salesPurchJournalTable())
            {
                _record = salesPurchJournalLine.salesPurchJournalTable();
            }
        }

        // Calculates tax for the specific transaction.
        if (_callerForm && _callerForm.name() == formStr(SalesEditLines))
        {
            SalesParmUpdate salesParmUpdate = _callerForm.dataSource(formDataSourceStr(SalesEditLines, SalesParmUpdate)).cursor();
            SalesParmTable salesParmTable = _callerForm.dataSource(formDataSourceStr(SalesEditLines, SalesParmTable)).cursor();
            if (salesParmUpdate && salesParmTable)
            {
                salesTotals = SalesTotals::construct(
                    salesParmTable,
                    salesParmUpdate.SpecQty,
                    AccountOrder::None,
                    salesParmTable.ParmId,
                    '',
                    salesParmTable.Ordering);
                salesTotals.calc();
                tax = salesTotals.tax();
            }
        }
        else
        {
            switch (_record.TableId)
            {
                case tableNum(SalesTable):
                    salesTotals = SalesTotals::construct(_record);
                    salesTotals.calc();
                    tax = salesTotals.tax();
                    break;

                case tableNum(SalesQuotationTable):
                    SalesQuotationTotals salesQuotationTotals = SalesQuotationTotals::construct(_record);
                    salesQuotationTotals.calc();
                    tax = salesQuotationTotals.tax();
                    break;

                case tableNum(InventTransferParmTable):
                    InventTransferTotals inventTransferTotals = InventTransferTotals::construct(_record);
                    inventTransferTotals.calc();
                    tax = inventTransferTotals.tax();
                    break;

                case tableNum(VendInvoiceInfoTable):
                    if (_callerForm && _callerForm.name() == formStr(VendEditInvoice))
                    {
                        PurchParmUpdate purchParmUpdate = _callerForm.dataSource(formDataSourceStr(VendEditInvoice, PurchParmUpdate)).cursor();
                        if (purchParmUpdate)
                        {
                            VendInvoiceInfoTable vendInvoiceInfoTable = _record;
                            PurchTotals purchTotals = PurchTotals::newParmTable(
                                vendInvoiceInfoTable,
                                purchParmUpdate.SpecQty,
                                vendInvoiceInfoTable.ParmId,
                                '',
                                vendInvoiceInfoTable.Ordering);
                            purchTotals.calc();
                            tax = purchTotals.tax();
                        }
                    }
                    break;

                default:
                    tax = TaxIntegrationHelper::calcTaxExtension(_record, _callerForm);
                    break;
            }
        }

        if (!tax)
        {
            throw Error(strFmt("@TaxIntegrationException:TaxIntegrationCannotSupport", tableId2Name(_record.TableId), funcName()));
        }

        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax for transaction. This method is used for customization to handle
    /// specific transaction which TaxIntegrationHelper::calcTax() hasn't handled.
    /// </summary>
    /// <param name = "_record">The transaction record.</param>
    /// <param name = "_callerForm">The caller form.</param>
    /// <returns>The <c>Tax</c> object.</returns>
    public static Tax calcTaxExtension(Common _record, FormRun _callerForm)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs <c>TaxIntegrationDocumentObject</c> for the specific transaction.
    /// </summary>
    /// <param name = "_tableId">The transaction tableId.</param>
    /// <param name = "_recId">The transaction redId.</param>
    /// <param name = "_loadData">Whether load data from database into document object.</param>
    /// <returns>The <c>TaxIntegrationDocumentObject</c> object.</returns>
    public static TaxIntegrationDocumentObject constructDocument(RefTableId _tableId, RefRecId _recId, boolean _loadData = true)
    {
        TaxIntegrationDocumentObject document;

        try
        {
            document = TaxIntegrationDocumentObject::construct(_tableId, _recId);
        }
        catch
        {
            // No action, just null document.
        }

        if (document && _loadData)
        {
            TaxIntegrationSequence sequence =
                TaxIntegrationSequence::construct(TaxIntegrationFacade::LoggerName)
                    .appendActivityOnDocument(TaxIntegrationSettingRetrievalActivityOnDocument::construct())
                    .appendActivityOnDocument(TaxIntegrationDataRetrievalActivityOnDocument::construct());

            sequence.act(document);
        }

        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTransactionTypeByJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the transaction type of current line.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <returns>The Transaction type.</returns>
    /// <remarks>
    /// This method is used for SalesTaxTransactionExchangeRate persistence for Journal.
    /// Refered to last part of TaxCalculationJournal::calculateTaxForLine().
    /// </remarks>
    internal static TransactionType determineTransactionTypeByJournalLine(TaxIntegrationJournalLineObject _line)
    {
        Set taxLineSet = _line.getTaxLineSet();
        SetEnumerator taxLineSetEnumerator = taxLineSet.getEnumerator();

        while (taxLineSetEnumerator.moveNext())
        {
            TaxIntegrationTaxLineObject taxLine = taxLineSetEnumerator.current();
            if (taxLine.getTaxDirection() == TaxDirection::UseTax
                || taxLine.getTaxDirection() == TaxDirection::IncomingTax)
            {
                return TransactionType::Purchase;
            }
        }
        return TransactionType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPhysicalTaxPosted_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Has physical tax posted or not?
    /// </summary>
    /// <param name = "_vendPackingSlipJour">The VendPackingSlipJour.</param>
    /// <returns>true if physical tax posted; otherwise, false.</returns>
    public static boolean hasPhysicalTaxPosted_IN(VendPackingSlipJour _vendPackingSlipJour)
    {
        #ISOCountryRegionCodes

        boolean result;
        TaxTrans taxTrans;
        VendPackingSlipTrans vendPackingSlipTransLocal;

        // There is a gap to support correcting product receipt while physical tax posted.
        // Block the Correct button before fixing the gap.
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
            && InventParameters::find().PostPhysicalTax
            && TaxBlockCorrectProductReceiptWithPhysicalTax_INFlight::instance().isEnabled())
        {
            select firstonly RecId from vendPackingSlipTransLocal
                where vendPackingSlipTransLocal.VendPackingslipJour == _vendPackingSlipJour.RecId
                join RecId from taxTrans
                    where taxTrans.SourceTableId == tableNum(VendPackingSlipTrans)
                        && taxTrans.SourceRecId == vendPackingSlipTransLocal.RecId;

            result = vendPackingSlipTransLocal.RecId != 0;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>