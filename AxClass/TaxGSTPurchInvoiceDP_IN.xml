<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTPurchInvoiceDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GSTPurchInvoiceDP_IN</c> class provides base implementation of a data provider class for purchase order and AP invoice journal reports.
/// </summary>
public class TaxGSTPurchInvoiceDP_IN extends GSTInvoiceDPBase_IN
{
    VendInvoiceJour     vendInvoiceJour;
    LedgerJournalTrans  ledgerJournalTrans;
    VendInvoiceAmount   vendInvoiceAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data from the contract class.
    /// </summary>
    public void getDataFromContract()
    {
        TaxEngineLedgerJournalTransHeader taxEngineLedgerJournalTransHeader;

        contract = gstInvoiceDPBase.parmDataContract() as GSTInvoiceContract_IN;
        vendInvoiceJour = VendInvoiceJour::findRecId(contract.parmRecordId());

        if (contract.parmledgerJournalTransRecordId())
        {
            ledgerJournalTrans = ledgerJournalTrans::findRecId(contract.parmledgerJournalTransRecordId(), false);

            select firstOnly taxEngineLedgerJournalTransHeader
                where taxEngineLedgerJournalTransHeader.JournalNum == ledgerJournalTrans.JournalNum
                    && taxEngineLedgerJournalTransHeader.Voucher    == ledgerJournalTrans.Voucher;

            this.parmInvoiceJournal(taxEngineLedgerJournalTransHeader);
            isAPJournal = true;
        }
        else
        {
            this.parmInvoiceJournal(vendInvoiceJour);
            isAPJournal = false;
        }

        isProforma = VendInvoiceJour.isProforma();
        printCopyOriginal = contract.parmPrintCopyOriginal();
        moduleType = ModuleType_IN::AccountsPayable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimProduct</Name>
				<Source><![CDATA[
    protected void initInventDimProduct()
    {
        InventDimCtrl_Rep_Purch     inventDimReport;
        FieldId                     dimFieldId;
        container                   inventoryDimensionsLocal;
        vendFormletterParameters    vendFormletterParameters = vendFormletterParameters::find();
        int i = 1;

        inventDimReport = InventDimCtrl_Rep_Purch::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::Invoice);
        inventDimReport.initDimParmVisible();
        inventdimSetup = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());

        inventDimReport.initProductDimParmVisible();
        inventDimSetupProduct = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());

        if (vendFormletterParameters.ItemDimPlacement == ItemDimFormLetter::Line)
        {
            // Add product inventory dimension information.
            while (i <= conLen(inventDimSetupProduct))
            {
                dimFieldId = conPeek(inventDimSetupProduct, i);
                inventoryDimensionsLocal += dimFieldId;
                i++;
            }

            // Add non inventoried product dimension information.
            i = 1;
            while (i <= conLen(inventDimSetup))
            {
                dimFieldId = conPeek(inventDimSetup, i);

                if (!conFind(inventoryDimensionsLocal, dimFieldId))
                {
                    inventoryDimensionsLocal += dimFieldId;
                }

                i++;
            }

            inventDimSetup = inventoryDimensionsLocal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    protected void insertIntoGSTInvoiceHeaderFooterTmp()
    {
        VendInvoiceTrans    vendInvoiceTrans;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        Common              common;

        if (contract.parmledgerJournalTransRecordId())
        {
            common = ledgerJournalTrans;
        }
        else
        {
            select firstOnly vendInvoiceInfoLine
                exists join vendInvoiceTrans
                    where vendInvoiceTrans.InventTransId        == vendInvoiceInfoLine.InventTransId
                        && vendInvoiceTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate
                        && vendInvoiceTrans.InvoiceId           == vendInvoiceJour.InvoiceId
                        && vendInvoiceTrans.PurchID             == vendInvoiceJour.PurchId
                        && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                        && vendInvoiceTrans.InternalInvoiceId   == vendInvoiceJour.InternalInvoiceId;

            common = vendInvoiceInfoLine;
        }

        taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(common);

        super();

        if (isProforma)
        {
            gstInvoiceHeaderFooterTmp.SerialNumOfInvoice    = vendInvoiceJour.InvoiceId;
            gstInvoiceHeaderFooterTmp.InvoiceDate           = vendInvoiceJour.InvoiceDate;
        }

        gstInvoiceHeaderFooterTmp.BilledToLabel             = "@TaxGST:DetailsOfSupplier";
        gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure = vendInvoiceJour.InvoiceAmount;
        gstInvoiceHeaderFooterTmp.TotalInvoiceValueInWords  = numeralsToTxt_IN(abs(vendInvoiceJour.InvoiceAmount));

        gstInvoiceHeaderFooterTmp.insert();
        headerRecId = gstInvoiceHeaderFooterTmp.RecId;
        gstInvoiceHeaderFooterTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceTmp</Name>
				<Source><![CDATA[
    protected void insertIntoGSTInvoiceTmp(str _className = '')
    {
        VendInvoiceTrans    vendInvoiceTrans;

        super(_className);

        if (chargeCode)
        {
            gstInvoiceTmp.Name  = MarkupTable::find(MarkupModuleType::Vend, chargeCode).Txt;
        }
        else
        {
            if (lineTableId && lineRecId && classStr(ITaxDocumentLine) == _className)
            {
                vendInvoiceTrans = tableNum(VendInvoiceTrans) == lineTableId ?
                VendInvoiceTrans::findRecId(lineRecId):
                VendInvoiceTrans::findInventTransId(VendInvoiceInfoLine::findRecId(lineRecId).InventTransId);

                gstInvoiceTmp.ItemId        = vendInvoiceTrans.ItemId;
                gstInvoiceTmp.Name          = vendInvoiceTrans.Name;
                gstInvoiceTmp.Unit          = vendInvoiceTrans.PurchUnit;
                gstInvoiceTmp.UnitPrice     = vendInvoiceTrans.PurchPrice;
                gstInvoiceTmp.LineAmount    = vendInvoiceTrans.PurchPrice * vendInvoiceTrans.Qty;

                gstInvoiceTmp.InventDimProduct = FormLetter::inventDimReport(vendInvoiceTrans.inventDim(),
                    inventDimSetup,
                    vendInvoiceJour.LanguageId);
            }
        }

        gstInvoiceTmp.JournalRecId  = vendInvoiceTrans.RecId;
        vendInvoiceAmount += gstInvoiceTmp.ReverseChargeAmount;

        gstInvoiceTmp.insert();
        gstInvoiceTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableConnections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection to use on table.
    /// </summary>
    /// <remarks>
    /// This is required to guarantee that <c>createdTransactionId</c> of inserted record is different than default transaction.
    /// </remarks>
    public void setTableConnections()
    {
        gstInvoiceHeaderFooterTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
        gstInvoiceTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    public void createData()
    {
        super();
        select gstInvoiceHeaderFooterTmp where gstInvoiceHeaderFooterTmp.RecId == headerRecId;
        
        if (gstInvoiceHeaderFooterTmp)
        {
            ttsBegin;
            gstInvoiceHeaderFooterTmp.selectForUpdate(true);
            gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure = vendInvoiceJour.InvoiceAmount + vendInvoiceAmount - vendInvoiceJour.SumTax;
            gstInvoiceHeaderFooterTmp.TotalInvoiceValueInWords  = numeralsToTxt_IN(abs(gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure));
            gstInvoiceHeaderFooterTmp.GrandTotal = grandTotal;
            gstInvoiceHeaderFooterTmp.doUpdate();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>