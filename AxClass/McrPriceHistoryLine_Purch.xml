<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrPriceHistoryLine_Purch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRPriceHistoryLine_Purch</c> class provides information about purchase line needed for price history.
/// </summary>
class McrPriceHistoryLine_Purch extends MCRPriceHistoryLine
{
    PurchLine       purchLine;
    PurchTable      purchTable;
    AgreementLine   agreementLine;
    PurchParameters purchParameters;
    int             rebateNum;
    TAMVendRebateAgreementLine  tmpVendRebateAgreementLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildAgreementHeaderQuery</Name>
				<Source><![CDATA[
    private Query buildAgreementHeaderQuery()
    {
        #ISOCountryRegionCodes
        Query query;
        QueryBuildDataSource qbds;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            query = AgreementHeader::partyAgreementsQuery(
                tableNum(PurchAgreementHeader),
                fieldNum(PurchAgreementHeader, VendAccount),
                purchTable.OrderAccount ? purchTable.OrderAccount : SysQuery::valueEmptyString(),
                purchTable.DeliveryDate);

            if (purchTable.InvoiceAccount)
            {
                qbds = query.dataSourceTable(tableNum(PurchAgreementHeader));
                qbds = qbds.addDataSource(tableNum(PurchAgreementHeaderDefault));
                qbds.relations(true);

                qbds.addRange(fieldNum(PurchAgreementHeaderDefault, VendorInvoiceAccount)).value(queryValue(purchTable.InvoiceAccount));
            }

            qbds = query.dataSourceTable(tableNum(PurchAgreementHeader));
            qbds = qbds.addDataSource(tableNum(PurchAgreementHeaderExt_RU));
            qbds.relations(true);
            qbds.joinMode(JoinMode::ExistsJoin);
        }
        else
        {
            query = AgreementHeader::partyAgreementsQuery(
                tableNum(PurchAgreementHeader),
                fieldNum(PurchAgreementHeader, VendAccount),
                purchTable.OrderAccount,
                purchTable.DeliveryDate);
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendRebateFromLine</Name>
				<Source><![CDATA[
    private void createVendRebateFromLine(TAMVendRebateAgreement    _tamVendRebateAgreement,
                                        TAMVendRebateAgreementLine  _tamVendRebateAgreementLine,
                                        TAMVendRebateTable          _tamVendRebateTable)
    {
        TAMVendRebateAgreementLine  vendRebateAgreementLine = _tamVendRebateAgreementLine;
        TAMVendRebateAgreement      vendRebateAgreement     = _tamVendRebateAgreement;
        InventQty                   calcQty;
        UnitOfMeasureSymbol         calcUOM;
        AmountCur                   calcAmt;
        TAMVendRebateAgreementLine  vendRebateAgreementLineMax;
        TAMVendRebateTable          tamVendRebateTableTmp = _tamVendRebateTable;
        VendInvoiceTrans            tmpVendInvoiceTrans;

        if (vendRebateAgreement.UnitType == TAMRebateUnitType::InventoryUnit)
        {
            calcQty = purchLine.PurchQty;
            calcUOM = purchLine.PurchUnit;
        }
        else
        {
            calcQty = purchLine.PdsCWQty;
            calcUOM = purchLine.pdsCWUnitId();
        }

        if (vendRebateAgreement.RebateTakenFrom == TAMVendRebateTakenFrom::Gross)
        {
            calcAmt = purchLine.calcGrossAmountExclTax();
        }
        else
        {
            calcAmt = purchLine.calcLineAmountExclTax();
        }

        RebateQuantityRequirementContract contract = RebateQuantityRequirementContract::constructWithVariables(calcQty,
                                                                                                               calcUOM,
                                                                                                               purchLine.ItemId,
                                                                                                               purchLine.inventDimId,
                                                                                                               false);
        
        if  ((vendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Quantity
                    && vendRebateAgreementLine.checkRebateQuantityRequirements(contract)
                )
                ||(vendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Amount
                    && vendRebateAgreementLine.checkRebateAmtRequirements(calcAmt)))
        {
            this.initAndInsertRebate(vendRebateAgreement, vendRebateAgreementLine, tamVendRebateTableTmp);
        }
        else
        {
            tmpVendInvoiceTrans.ItemId      = purchLine.ItemId;
            tmpVendInvoiceTrans.InventDimId = purchLine.InventDimId;

            vendRebateAgreementLineMax = TAMVendRebateAgreementLine::selectRebateAgreementLineMax(vendRebateAgreement,
                                                                                                  tmpVendInvoiceTrans,
                                                                                            calcQty,
                                                                                            calcUOM,
                                                                                                  vendRebateAgreement.RebateCurrency,
                                                                                                  calcAmt);

            contract.maxRebateLineBreak = true;

            if (vendRebateAgreementLineMax.RecId == vendRebateAgreementLine.RecId
                && ((vendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Quantity
                && vendRebateAgreementLine.checkRebateQuantityRequirements(contract)
                ||(vendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Amount
                && vendRebateAgreementLine.checkRebateAmtRequirements(calcAmt, true)))))
            {
                this.initAndInsertRebate(vendRebateAgreement, vendRebateAgreementLine, tamVendRebateTableTmp);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendRebateAgreementApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the rebate agreement is applicable.
    /// </summary>
    /// <param name = "_vendRebateAgreement">The vendor rebate agreement.</param>
    /// <returns>true if applicable; otherwise, false.</returns>
    protected boolean isVendRebateAgreementApplicable(TAMVendRebateAgreement _vendRebateAgreement)
    {
        switch (_vendRebateAgreement.ItemRebateCode)
        {
            case TAMVendRebateItemCode::All:
            case TAMVendRebateItemCode::Selection:
                return true;
            
            case TAMVendRebateItemCode::GroupId:
                return _vendRebateAgreement.ItemRebateRelation == purchLine.tamItemVendRebateGroupId;
            
            case TAMVendRebateItemCode::Table:
                return _vendRebateAgreement.ItemRebateRelation == purchLine.ItemId;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendRebates</Name>
				<Source><![CDATA[
    private void createVendRebates(TAMVendRebateTable _tamVendRebateTable)
    {
        TAMVendRebateAgreement      vendRebateAgreement;
        InventDim                   inventDimLocal;
        InventDim                   purchLineInventDim = purchLine.inventDim();
        date                        dateMin = dateNull();
        date                        dateMax = maxDate();

        tmpVendRebateAgreementLine.setTmp();

        // Find all applicable rebate agreements.
        while select validTimeState(dateMin, dateMax) vendRebateAgreement
            where vendRebateAgreement.Validated
                && (vendRebateAgreement.Verifier
                    || vendRebateAgreement.WFApprovalStatus               == TAMVendRebateApprovalStatus::Approved)
                && (vendRebateAgreement.VendRebateCode                    == TableGroupAll::All
                    || (vendRebateAgreement.VendRebateCode                == TableGroupAll::GroupId
                        && vendRebateAgreement.VendRebateRelation         == purchTable.tamVendRebateGroupId)
                    || (vendRebateAgreement.VendRebateCode                == TableGroupAll::Table
                        && vendRebateAgreement.VendRebateRelation         == purchTable.OrderAccount))
                && (vendRebateAgreement.RebateCurrency                    == purchLine.CurrencyCode)
                && (vendRebateAgreement.RebateUOMOption                   == TAMRebateUOMOption::Convert
                    || (vendRebateAgreement.UnitType                      == TAMRebateUnitType::InventoryUnit
                        && vendRebateAgreement.RebateUnit                 == purchLine.PurchUnit)
                    || (vendRebateAgreement.UnitType                      == TAMRebateUnitType::CWUnit
                        && vendRebateAgreement.RebateUnit                 == purchLine.pdsCWUnitId()))
                && (PdsGlobal::pdsIsCWItem(purchLine.ItemId)
                    || vendRebateAgreement.UnitType == TAMRebateUnitType::InventoryUnit)
                #TAMRebateInventDimExistsJoin(vendRebateAgreement.InventDimId, inventDimLocal, purchLineInventDim)
        {
            if (!this.isVendRebateAgreementApplicable(vendRebateAgreement))
            {
                continue;
            }

            date calcDate = vendRebateAgreement.setCalcDate(purchLine);
            if (!vendRebateAgreement.checkValidDate(calcDate))
            {
                continue;
            }

            InventQty calcQty;
            UnitOfMeasureSymbol calcUOM;

            if (vendRebateAgreement.UnitType == TAMRebateUnitType::InventoryUnit)
            {
                calcQty = purchLine.PurchQty;
                calcUOM = purchLine.PurchUnit;
            }
            else
            {
                calcQty = purchLine.PdsCWQty;
                calcUOM = purchLine.pdsCWUnitId();
            }

            AmountCur grossAmt = purchLine.calcGrossAmountExclTax();

            if (vendRebateAgreement.checkProductRebateRequirements(grossAmt,
                                                                   calcQty,
                                                                   calcUOM,
                                                                   purchLine.CurrencyCode,
                                                                   purchLine.ItemId,
                                                                   purchLine.InventDimId))
            {
                this.createVendRebatesFromAgreement(_tamVendRebateTable, vendRebateAgreement);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendRebatesFromAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates vendor rebates from a rebate agreement.
    /// </summary>
    /// <param name = "_tamVendRebateTable">The temporary table with vendor rebates.</param>
    /// <param name = "_vendRebateAgreement">The vendor rebate agreement.</param>
    protected void createVendRebatesFromAgreement(TAMVendRebateTable _tamVendRebateTable, TAMVendRebateAgreement _vendRebateAgreement)
    {
        TAMVendRebateAgreementLine  vendRebateAgreementLine;

        // Agreements with the custom item code are using an item list.
        switch (_vendRebateAgreement.ItemRebateCode)
        {
            case TAMVendRebateItemCode::Selection:
                TAMVendRebateItem vendRebateItem;
                InventDim inventDimLocal;

                while select vendRebateAgreementLine
                    where vendRebateAgreementLine.RebateAgreementRefRecId == _vendRebateAgreement.RecId
                    join InventDimID from vendRebateItem
                        where vendRebateItem.VendRebateAgreementRefRecId == vendRebateAgreementLine.RebateAgreementRefRecId
                           && vendRebateItem.ItemID == purchLine.ItemId
                        #TAMRebateInventDimExistsJoin(vendRebateItem.InventDimId, inventDimLocal, purchLine.InventDim())
                {
                    if (!this.createVendRebateFromLineIfRequired(_vendRebateAgreement, vendRebateAgreementLine, _tamVendRebateTable))
                    {
                        break;
                    }
                }
                break;

            case TAMVendRebateItemCode::All:
            case TAMVendRebateItemCode::GroupId:
            case TAMVendRebateItemCode::Table:
                while select vendRebateAgreementLine
                    where vendRebateAgreementLine.RebateAgreementRefRecId == _vendRebateAgreement.RecId
                {
                    if (!this.createVendRebateFromLineIfRequired(_vendRebateAgreement, vendRebateAgreementLine, _tamVendRebateTable))
                    {
                        break;
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendRebateFromLineIfRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates vendor rebate from the vendor rebate agreement line, if it doesn't already exist.
    /// </summary>
    /// <param name = "_tamVendRebateAgreement">The vendor rebate agreement.</param>
    /// <param name = "_tamVendRebateAgreementLine">The agreement line.</param>
    /// <param name = "_tamVendRebateTable">The temporary table with vendor rebates.</param>
    /// <returns>true if created; otherwise, false.</returns>
    protected boolean createVendRebateFromLineIfRequired(TAMVendRebateAgreement      _tamVendRebateAgreement,
                                                         TAMVendRebateAgreementLine  _tamVendRebateAgreementLine,
                                                         TAMVendRebateTable          _tamVendRebateTable)
    {
        select firstonly RecId from _tamVendRebateTable
            where _tamVendRebateTable.VendRebateAgreementRefRecId == _tamVendRebateAgreementLine.RebateAgreementRefRecId;

        if (_tamVendRebateTable.RecId)
        {
            return false;
        }

        this.createVendRebateFromLine(_tamVendRebateAgreement, _tamVendRebateAgreementLine, _tamVendRebateTable);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVendRebateTableTmp</Name>
				<Source><![CDATA[
    public void fillVendRebateTableTmp(TAMVendRebateTable _tamVendRebateTableTmp)
    {
        super(_tamVendRebateTableTmp);

        this.createVendRebates(_tamVendRebateTableTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of <c>AgreementLine</c> according to current context.
    /// </summary>
    /// <returns>
    /// A list of <c>AgreementLine</c> according to current context.
    /// </returns>
    protected List getAgreementLines()
    {
        Query                   query;
        QueryRun                queryRun;
        PurchAgreementHeader    purchAgreementHeader;
        List                    listTemp;
        List                    listReturn = new List(Types::Record);

        using (var activityContext = AgreementInstrumentationLogger::createLogger(classStr(McrPriceHistoryLine_Purch)).agreement().priceHistoryGetAgreementLines(purchLine.TableId))
        {
            query    = this.buildAgreementHeaderQuery();
            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                purchAgreementHeader = queryRun.get(tableNum(PurchAgreementHeader));
                listTemp = AgreementLine::getAgreementLinesForOrderLine(
                    purchLine,
                    purchAgreementHeader.RecId,
                    true);

                listReturn.appendList(listTemp);
            }
        }

        return listReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAndInsertRebate</Name>
				<Source><![CDATA[
    private void initAndInsertRebate(TAMVendRebateAgreement      _tamVendRebateAgreement,
                                     TAMVendRebateAgreementLine  _tamVendRebateAgreementLine,
                                     TAMVendRebateTable          _tamVendRebateTable)
    {
        TAMVendRebateTable          tamVendRebateTableTmp   = _tamVendRebateTable;

        ttsbegin;
        tamVendRebateTableTmp.VendAccount                        = purchLine.VendAccount;
        tamVendRebateTableTmp.RebateValue                        = _tamVendRebateAgreementLine.RebateValue;
        tamVendRebateTableTmp.RebateAmtType                      = _tamVendRebateAgreementLine.RebateAmtType;
        tamVendRebateTableTmp.LedgerDimension                    = _tamVendRebateAgreement.LedgerDimension;
        tamVendRebateTableTmp.OffsetLedgerDimension              = _tamVendRebateAgreement.OffsetLedgerDimension;
        tamVendRebateTableTmp.VendRebateAgreementLineRefRecId    = _tamVendRebateAgreementLine.RecId;
        tamVendRebateTableTmp.VendRebateAgreementRefRecId        = _tamVendRebateAgreement.RecId;
        tamVendRebateTableTmp.LedgerDimension                    = _tamVendRebateAgreement.LedgerDimension;
        tamVendRebateTableTmp.OffsetLedgerDimension              = _tamVendRebateAgreement.OffsetLedgerDimension;

        tamVendRebateTableTmp.VendRebateGroupId                  = purchTable.tamVendRebateGroupId;
        tamVendRebateTableTmp.ItemVendRebateGroupId              = purchLine.mcrInventTable().ItemVendRebateGroupId;
        tamVendRebateTableTmp.CurrencyCode                       = purchLine.CurrencyCode;
        tamVendRebateTableTmp.PurchId                            = purchTable.PurchId;

        tamVendRebateTableTmp.RebateCalcDate                     = _tamVendRebateAgreement.setCalcDate(purchLine);
        tamVendRebateTableTmp.PurchTableRefRecId                 = purchTable.RecId;
        tamVendRebateTableTmp.InventTransId                      = purchLine.InventTransId;
        tamVendRebateTableTmp.ItemId                             = purchLine.ItemId;
        tamVendRebateTableTmp.PurchPriceUnit                     = purchLine.PurchPrice;
        tamVendRebateTableTmp.PurchNetExtdPrice                  = purchLine.LineAmount;
        tamVendRebateTableTmp.PurchInvoicedQty                   = purchLine.PurchQty;

        tamVendRebateTableTmp.cwInventQty  = purchLine.PdsCWQty;

        if (_tamVendRebateAgreement.RebateTakenFrom == TAMVendRebateTakenFrom::Gross)
        {
            tamVendRebateTableTmp.PurchAmount = purchLine.calcGrossAmountExclTax();
        }
        else
        {
            tamVendRebateTableTmp.PurchAmount = purchLine.calcLineAmountExclTax();
        }

        tamVendRebateTableTmp.PurchLineRefRecId          = purchLine.RecId;

        TAMRebateAmount rebateAmount = this.rebateAmountForRebateAmtType(_tamVendRebateAgreement, _tamVendRebateAgreementLine, tamVendRebateTableTmp);
        rebateAmount = CurrencyExchangeHelper::amount(rebateAmount, _tamVendRebateAgreementLine.Currency);
        tamVendRebateTableTmp.StartingRebateAmt   = CurrencyExchangeHelper::curAmount2CurAmount(rebateAmount, _tamVendRebateAgreementLine.Currency, purchLine.CurrencyCode);
        //Set next unique rebate id for the temp table to avoid duplicate records
        tamVendRebateTableTmp.VendRebateId = this.nextVendRebateId();

        tamVendRebateTableTmp.doInsert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAmountForRebateAmtType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate amount based on the rebate amount type.
    /// </summary>
    /// <param name = "_tamVendRebateAgreement">A vendor rebate agreement.</param>
    /// <param name = "_tamVendRebateAgreementLine">A vendor rebate agreement line.</param>
    /// <param name = "_tamVendRebateTable">A vendor rebate record.</param>
    /// <returns>The rebate amount.</returns>
    [Replaceable]
    protected TAMRebateAmount rebateAmountForRebateAmtType(
                                        TAMVendRebateAgreement      _tamVendRebateAgreement,
                                        TAMVendRebateAgreementLine  _tamVendRebateAgreementLine,
                                        TAMVendRebateTable          _tamVendRebateTable)
    {
        switch (_tamVendRebateAgreementLine.RebateAmtType)
        {
            case TAMRebateAmtType::AmountPerUnit :
                return _tamVendRebateTable.rebateAmountPerUnitUnitOfMeasure(purchLine.PurchUnit);

            case TAMRebateAmtType::FixedAmount:
                if (_tamVendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Amount)
                {
                    if (purchLine.LineAmount < 0)
                    {
                        return _tamVendRebateAgreementLine.RebateValue * -1;
                    }

                    return _tamVendRebateAgreementLine.RebateValue;
                }
                else
                {
                    if (purchLine.LineAmount < 0)
                    {
                        return _tamVendRebateAgreementLine.RebateValue * -1;
                    }

                    return _tamVendRebateAgreementLine.RebateValue;
                }

            case TAMRebateAmtType::Percentage:
                return _tamVendRebateTable.PurchAmount
                                    * _tamVendRebateAgreementLine.RebateValue
                                    / 100;
        }

        throw error("@PDS1430");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpMCRAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the passed buffer from class variables.
    /// </summary>
    /// <param name="_tmpMCRAgreementLine">
    /// The temporary table buffer to be populated.
    /// </param>
    public void initTmpMCRAgreementLine(TmpMCRAgreementLine _tmpMCRAgreementLine)
    {
        PurchAgreementHeader purchAgreementHeader;

        if (agreementLine)
        {
            _tmpMCRAgreementLine.initFromAgreementLine(agreementLine);
            _tmpMCRAgreementLine.AgreementId = this.parmAgreementId();

            purchAgreementHeader = PurchAgreementHeader::find(agreementLine.Agreement);
            _tmpMCRAgreementLine.AgreementState = purchAgreementHeader.AgreementState;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContinuityBillUpFrontChild</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a continuity item is bill up front.
    /// </summary>
    /// <returns>
    ///     true if line is a child line of a continuity item that is bill up front; otherwise, false.
    /// </returns>
    public boolean isContinuityBillUpFrontChild()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the purchase order line fits the current <c>Agreementline</c> record.
    /// </summary>
    /// <param name="_agreementLine">
    /// The record to validate against.
    /// </param>
    /// <returns>
    /// true if link towards <c>Agreementline</c> record is valid; otherwise, false.
    /// </returns>
    protected boolean isLinkValid(AgreementLine _agreementLine)
    {
        return _agreementLine.isLinkValid(purchLine, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDetailsEnabled</Name>
				<Source><![CDATA[
    public boolean isPriceDetailsEnabled()
    {
        return purchParameters.mcrEnablePriceDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipToChild</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if this line is a ship to child.
    /// </summary>
    /// <returns>
    ///     This method always returns false, ship to child is not valid for purchase order lines.
    /// </returns>
    public boolean isShipToChild()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrMarginAlert</Name>
				<Source><![CDATA[
    public MCRMarginAlert mcrMarginAlert()
    {
        MCRMarginAlert_Purch mcrMarginAlert_Purch;

        mcrMarginAlert_Purch = MCRMarginAlert_Purch::newPurchLine(purchLine);
        return mcrMarginAlert_Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>MCRPiceHistoryLine_Purch</c> class.
    /// </summary>
    protected void new()
    {
        super();
        purchParameters = PurchParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextVendRebateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the next rebate id to use for temporary rebate tables.
    /// </summary>
    /// <returns>
    /// The next unique rebate id.
    /// </returns>
    /// <remarks>
    /// The rebate id is not displayed and does not refer to anything.  The
    /// rebate table is only used to store temporary information for different
    /// kinds of rebates in a unified form.  The rebate id needs to be different
    /// to avoid duplicate insert error.
    /// </remarks>
    protected TAMVendRebateId nextVendRebateId()
    {
        TAMVendRebateId tamVendRebateId;

        rebateNum++;
        tamVendRebateId = int2str(rebateNum);

        return tamVendRebateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountId</Name>
				<Source><![CDATA[
    public CustVendAC parmAccountId()
    {
        return purchLine.orderAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountMultilineDiscCode</Name>
				<Source><![CDATA[
    public MultiLnDiscCode parmAccountMultilineDiscCode()
    {
        return purchTable.MultiLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementId</Name>
				<Source><![CDATA[
    public Num parmAgreementId()
    {
        Num agreementId;

        if (agreementLine)
        {
            agreementId = agreementLine.getPurchAgreementId();
        }
        return agreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanFindLineDisc</Name>
				<Source><![CDATA[
    public boolean parmCanFindLineDisc()
    {
        return purchLine.canEditDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanFindTAMMerchEventPricing</Name>
				<Source><![CDATA[
    public boolean parmCanFindTAMMerchEventPricing()
    {
        // Merchandising event pricing is not applicable for purchase lines.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode()
    {
        return purchLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim()
    {
        return purchLine.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public InventTransId parmInventTransId()
    {
        return purchLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId()
    {
        return purchLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemLineDiscCode</Name>
				<Source><![CDATA[
    public LineDiscCode parmItemLineDiscCode()
    {
        return purchLine.itemLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount parmLineDiscAmount()
    {
        return purchLine.LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscCode</Name>
				<Source><![CDATA[
    public LineDiscCode parmLineDiscCode()
    {
        return purchLine.lineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscPct</Name>
				<Source><![CDATA[
    public DiscPct parmLineDiscPct()
    {
        return purchLine.LinePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineMultiLn</Name>
				<Source><![CDATA[
    public LineMultiLn parmLineMultiLn()
    {
        return PurchParameters::find().Disc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkup</Name>
				<Source><![CDATA[
    public PriceMarkup parmMarkup()
    {
        return purchLine.PurchMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchingAgreementLine</Name>
				<Source><![CDATA[
    public AgreementLineRecId parmMatchingAgreementLine()
    {
        return purchLine.MatchingAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    public MCROrderLinePriceHistoryReference parmMCROrderLine2PriceHistoryRef()
    {
        return purchLine.mcrOrderLine2PriceHistoryRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public ModuleInventPurchSales parmModuleType()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultilineDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount parmMultilineDiscAmount()
    {
        return purchLine.MultiLnDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultilineDiscPct</Name>
				<Source><![CDATA[
    public DiscPct parmMultilineDiscPct()
    {
        return purchLine.MultiLnPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    public MCROrderLinePriceHistoryReference parmOrigMCROrderLine2PriceHistoryRef()
    {
        return purchLine.orig().mcrOrderLine2PriceHistoryRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    public PriceCur parmPrice()
    {
        return purchLine.PurchPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDate</Name>
				<Source><![CDATA[
    public PriceDate parmPriceDate()
    {
        return purchLine.priceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceGroupId</Name>
				<Source><![CDATA[
    public PriceGroupId parmPriceGroupId()
    {
        return purchLine.priceGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceOverride</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a <c>NoYes</c> indicating if the price was overridden for this line.
    /// </summary>
    /// <returns>
    ///     This method always returns NoYes::No, price overrides are not valid for purchase order lines.
    /// </returns>
    public NoYes parmPriceOverride()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceUnit</Name>
				<Source><![CDATA[
    public PriceUnit parmPriceUnit()
    {
        return purchLine.PriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchId</Name>
				<Source><![CDATA[
    public PurchId parmPurchId()
    {
        return purchLine.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a new purchase line.
    /// </summary>
    /// <param name="_purchLine">
    /// The new purchase line
    /// </param>
    public void parmPurchLine(PurchLine _purchLine)
    {
        purchLine  = _purchLine;
        purchTable = purchLine.purchTable();
        if (purchLine.MatchingAgreementLine)
        {
            agreementLine = AgreementLine::find(purchLine.MatchingAgreementLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the quantity for the purchase order line.
    /// </summary>
    /// <returns>
    ///     The purchase qty for the <c>MCRPriceHistoryLine_Purch</c> object.
    /// </returns>
    public Qty parmQty()
    {
        return purchLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyMultiline</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the purchase quantity for the multiline.
    /// </summary>
    /// <returns>
    ///     The total quantity of all lines that have matching multiline discount code.
    /// </returns>
    /// <remarks>
    ///     See class declaration for comments about returns.
    /// </remarks>
    public Qty parmQtyMultiline()
    {
        InventTableModule       inventTableModule;
        InventTableModule       inventTableModuleMultiLineDisc;
        PurchLine               purchLineLocal;

        // Sum quantity of all other lines that have same multi-line discount code
        select sum(PurchQty) from purchLineLocal
            where purchLineLocal.PurchId == purchLine.PurchId
            exists join inventTableModuleMultiLineDisc
                where inventTableModuleMultiLineDisc.ItemId     == this.parmItemId()
                   && inventTableModuleMultiLineDisc.ModuleType == this.parmModuleType()
            exists join inventTableModule
                where inventTableModule.ItemId        == purchLineLocal.ItemId
                   && inventTableModule.ModuleType    == this.parmModuleType()
                   && inventTableModule.MultiLineDisc == inventTableModuleMultiLineDisc.MultiLineDisc;

        return purchLineLocal.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuotationId</Name>
				<Source><![CDATA[
    public QuotationId parmQuotationId()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    protected RecId parmRecId()
    {
        return purchLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    public SalesId parmSalesId()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowCustRebates</Name>
				<Source><![CDATA[
    public boolean parmShowCustRebates()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMarginBrokerAmount</Name>
				<Source><![CDATA[
    public boolean parmShowMarginBrokerAmount()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMarginEstimatedSalesPrice</Name>
				<Source><![CDATA[
    public boolean parmShowMarginEstimatedSalesPrice()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMarginRelated</Name>
				<Source><![CDATA[
    public boolean parmShowMarginRelated()
    {
        return PurchParameters::find().mcrEnableMarginAlert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMarginRoyaltyAmount</Name>
				<Source><![CDATA[
    public boolean parmShowMarginRoyaltyAmount()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowVendRebates</Name>
				<Source><![CDATA[
    public boolean parmShowVendRebates()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableId</Name>
				<Source><![CDATA[
    protected TableId parmTableId()
    {
        return purchLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitId()
    {
        return purchLine.PurchUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    public void updateMCROrderLine2PriceHistoryRef(MCROrderLinePriceHistoryReference _mcrOrderLinePriceHistoryReference)
    {
        purchLine.mcrOrderLine2PriceHistoryRef = _mcrOrderLinePriceHistoryReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usesRetailPricing</Name>
				<Source><![CDATA[
    public boolean usesRetailPricing()
    {
        // Retail pricing is never used for purchase lines.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>MCRPiceHistoryLine_Purch</c> class.
    /// </summary>
    /// <returns>
    /// Instance of a purchase price history line
    /// </returns>
    public static MCRPriceHistoryLine_Purch construct()
    {
        return new MCRPriceHistoryLine_Purch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>MCRPriceHistoryLine_Purch</c> class.
    /// </summary>
    /// <param name="_purchLine">
    /// The purchase line used to initialize the object.
    /// </param>
    /// <returns>
    /// Instance of a purchase price history line
    /// </returns>
    public static MCRPriceHistoryLine_Purch newPurchLine(PurchLine _purchLine)
    {
        MCRPriceHistoryLine_Purch mcrPriceHistoryLine_Purch = MCRPriceHistoryLine_Purch::construct();

        mcrPriceHistoryLine_Purch.parmPurchLine(_purchLine);
        return mcrPriceHistoryLine_Purch;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>