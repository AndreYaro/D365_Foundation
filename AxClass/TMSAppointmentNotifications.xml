<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSAppointmentNotifications</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSAppointmentNotifications</c> class provides a dialog to setup notification parameters
/// and updates the appointment states based on these during batch run.
/// </summary>
public class TMSAppointmentNotifications extends RunBaseBatch implements BatchRetryable
{
    #DEFINE.currentVersion(1)
    #LOCALMACRO.CurrentList
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNotifications</Name>
				<Source><![CDATA[
	    /// <summary>
	/// Checks due and upcoming notifications.
	/// </summary>
    public void checkNotifications()
    {
        this.checkPastDue();
        this.checkUpcoming();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPastDue</Name>
				<Source><![CDATA[
    /// <summary>
	/// Updates status of overdue <c>TMSAppointment</c> records and alerts <c>TMSDriverLog</c> records accordingly.
	/// </summary>
    public void checkPastDue()
    {
        TMSDriverLog    driver;
        TMSAppointment  appt;

        while select forupdate driver
            join forupdate appt
            where driver.ApptId                     == appt.ApptId                          &&
                    (appt.ApptStatus                != TMSApptStatus::Cancelled             &&
                    appt.ApptStatus                 != TMSApptStatus::Completed)            &&
                    (appt.ApptToUTCDateTime         <  DateTimeUtil::getSystemDateTime()    ||
                    (appt.ApptToUTCDateTime         <= DateTimeUtil::getSystemDateTime()    &&
                    driver.ActualEndUTCDateTime     == utcDateTimeNull()                    &&
                    driver.AppointmentAlert         != TMSAppointmentAlert::PastDue))
        {
            ttsbegin;

            driver.AppointmentAlert = TMSAppointmentAlert::PastDue;
            driver.write();

            appt.ApptStatus = TMSApptStatus::OverTime;
            appt.write();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpcoming</Name>
				<Source><![CDATA[
    /// <summary>
	/// Alerts <c>TMSDriverLog</c> records for upcoming appointments.
	/// </summary>
    public void checkUpcoming()
    {
        TMSDriverLog    driver;
        TMSAppointment  appt;
        UTCDateTime     upcomingTime;

        upcomingTime = DateTimeUtil::getSystemDateTime();
        upcomingTime = DateTimeUtil::addMinutes(upcomingTime, TMSParameters::find().DriverCheckOutInterval);

        while select forupdate driver
            join appt
            where driver.ApptId                 == appt.ApptId                          &&
                    appt.ApptToUTCDateTime      <= upcomingTime                         &&
                    (appt.ApptStatus            != TMSApptStatus::Cancelled             &&
                    appt.ApptStatus             != TMSApptStatus::Completed)            &&
                    driver.ActualEndUTCDateTime == utcDateTimeNull()                    &&
                    driver.AppointmentAlert     != TMSAppointmentAlert::Upcoming        &&
                    driver.AppointmentAlert     != TMSAppointmentAlert::PastDue
        {
            ttsbegin;

            driver.AppointmentAlert = TMSAppointmentAlert::Upcoming;
            driver.write();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Object ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        this.checkNotifications();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret = true;
        Integer     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version] = _packedClass;
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    Static ClassDescription description()
    {
        return "@TRX550";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        TMSAppointmentNotifications       apptNotify;

        apptNotify = new TMSAppointmentNotifications();

        if (apptNotify.prompt())
        {
            apptNotify.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSAppointmentNotifications construct()
    {
        return new TMSAppointmentNotifications();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>