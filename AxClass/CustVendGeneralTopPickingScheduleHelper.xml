<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendGeneralTopPickingScheduleHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal static final class CustVendGeneralTopPickingScheduleHelper
{
    private const str BatchControlAttribute = classStr(CustVendGeneralTopPickingBatchControlAttribute);
    private const str SchedulingCategoryAttribute = classStr(CustVendGeneralTopPickingSchedulingCategoryAttribute);
    private const int MaxNum = 20;
    private const int IdxOfParallismDegree = 3;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDegreeOfParallismWrapped</Name>
				<Source><![CDATA[
    internal static int getDegreeOfParallismWrapped(ClassId _classId, str _methodName)
    {
        if (CustVendGeneralTopPickingScheduleHelper::isSchedulingEnabled())
        {
            container info = CustVendGeneralTopPickingScheduleHelper::getBatchContrlInfo(_classId, _methodName);
            int defaultTaskNum = CustVendGeneralTopPickingScheduleHelper::getDegreeOfParallism(info);
            CustVendGeneralTopPickingSchedulingCategory schedulingCategory = CustVendGeneralTopPickingScheduleHelper::getSchedulingCategoryInfo(_classId, _methodName);
            if (schedulingCategory != CustVendGeneralTopPickingSchedulingCategory::Default)
            {
                int overWriteCnt = CustVendGeneralTopPickingSchedulingCategoryTable::getOverWrittenCnt(schedulingCategory);
                if (CustVendGeneralTopPickingScheduleHelper::validateOverWriteTaskNum(overWriteCnt))
                {
                    return overWriteCnt;
                }
            }
            return defaultTaskNum;
        }
        else
        {
            container info = CustVendGeneralTopPickingScheduleHelper::getBatchContrlInfo(_classId, _methodName);
            return CustVendGeneralTopPickingScheduleHelper::getDegreeOfParallism(info);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBundleSizeWrapped</Name>
				<Source><![CDATA[
    internal static int getBundleSizeWrapped(ClassId _classId)
    {
        CustVendGeneralTopPickingSchedulingCategory schedulingCategory = CustVendGeneralTopPickingScheduleHelper::getSchedulingCategoryInfo(_classId, methodStr(ICustVendGeneralTopPickingRun, methodToExecute));
        if (schedulingCategory != CustVendGeneralTopPickingSchedulingCategory::Default)
        {
            return CustVendGeneralTopPickingSchedulingCategoryTable::getBundleSize(schedulingCategory);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSchedulingEnabled</Name>
				<Source><![CDATA[
    private static boolean isSchedulingEnabled()
    {
        return CustVendGeneralTopPickingTaskNumSchedulingFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchContrlInfo</Name>
				<Source><![CDATA[
    private static container getBatchContrlInfo(ClassId _classId, str _methodName)
    {
        DictMethod dm = new DictMethod(UtilElementType::ClassInstanceMethod, _classId, _methodName);
        Object attributeAsObject = dm.getAttribute(BatchControlAttribute) as CustVendGeneralTopPickingBatchControlAttribute;
        return attributeAsObject == null ? [0, "@CashManagement:CustVendGeneralTopPickingTaskRunner", 0]
            : [attributeAsObject.parmRetryCnt(), attributeAsObject.parmCaption(), attributeAsObject.parmParallelCnt()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchedulingCategoryInfo</Name>
				<Source><![CDATA[
    private static CustVendGeneralTopPickingSchedulingCategory getSchedulingCategoryInfo(ClassId _classId, str _methodName)
    {
        DictMethod dm = new DictMethod(UtilElementType::ClassInstanceMethod, _classId, _methodName);
        Object attributeAsObject = dm.getAttribute(SchedulingCategoryAttribute) as CustVendGeneralTopPickingSchedulingCategoryAttribute;
        return attributeAsObject == null ? CustVendGeneralTopPickingSchedulingCategory::Default : attributeAsObject.parmSchedulingCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOverWriteTaskNum</Name>
				<Source><![CDATA[
    private static boolean validateOverWriteTaskNum(int _taskNum)
    {
        return _taskNum > 0 && _taskNum <= MaxNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDegreeOfParallism</Name>
				<Source><![CDATA[
    private static int getDegreeOfParallism(container _attrContainer)
    {
        return conPeek(_attrContainer, IdxOfParallismDegree);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>