<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementJournalizeBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollPayStatementJournalizeBase</c> handles the dialog logic
/// that is common to all pay statement journalizing actions, such as posting
/// and generating vendor invoices.
/// </summary>
abstract class PayrollPayStatementJournalizeBase extends RunBaseBatch
{
    QueryRun                        queryRun;
    PayrollPayStatement             payStatementCaller;
    boolean                         calledWithRecord;
    Args                            callerArgs;
    str                             callingObject;
    DialogField                     payPeriodControl;
    container                       toDateList;
    FormBuildComboBoxControl        toDateBuildComboBox;
    FormComboBoxControl             toDateComboBox;
    FormReferenceGroupControl       payCycleReferenceControl;
    FormBuildReferenceGroupControl  payCycleBuildReferenceControl;
    PayrollPayCycleRecId            payCycleRecId;
    PayrollPayPeriodRecId           payPeriodRecId;
    TransDate                       toDate;
    HcmBenefitPlanRecId             benefitPlanRecId;
    PayrollTaxCodeRecId             taxCodeRecId;
    VendAccount                     vendAccount;

    private const str toDateListControl = 'ToDateListControl';
    private const str payCycleControl = 'PayCycleControl';
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether or not to allow saving the values entered by the user in the dialog.
    /// </summary>
    /// <returns>
    ///     true if saving the values is allowed; otherwise, false.
    /// </returns>
    public boolean allowSaveLast()
    {
        return (!calledWithRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        boolean ret;

        // We only want the batch tab when not called with a specific pay statement record to process
        ret = (!calledWithRecord);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createToDateList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the list of period end dates and populates the combo box in
    /// dialog with these values for the process.
    /// </summary>
    protected void createToDateList()
    {
        PayrollPayPeriod    selectedPayPeriod;
        int                 selectionIndex = 1;

        toDateList = conNull();
        toDateComboBox.clear();

        while select PeriodStartDate, PeriodEndDate from selectedPayPeriod
            order by PeriodEndDate
            where selectedPayPeriod.PayCycle == payCycleRecId
            &&    selectedPayPeriod.PeriodStatus == PayrollPeriodStatus::Open
        {
            toDateComboBox.add(strFmt('%1 - %2',
                date2StrUsr(selectedPayPeriod.PeriodStartDate, DateFlags::FormatAll),
                date2StrUsr(selectedPayPeriod.PeriodEndDate, DateFlags::FormatAll)));

            toDateList += selectedPayPeriod.PeriodEndDate;
        }

        toDateComboBox.selection(selectionIndex-1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogInit</Name>
				<Source><![CDATA[
    public DialogRunbase dialogInit(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        const int comboTypeList = 1;

        DialogRunbase   dialogModified;

        dialogModified = super(dialog, forceOnClient);

        payCycleBuildReferenceControl = dialogModified.curFormBuildGroup().addControl(FormControlType::ReferenceGroup, payCycleControl);
        payCycleBuildReferenceControl.mandatory(true);
        payCycleBuildReferenceControl.extendedDataType(extendedTypeNum(PayrollPayCycleRecId));
        payCycleBuildReferenceControl.label("@Payroll:PayCycle1");

        toDateBuildComboBox = dialogModified.curFormBuildGroup().addControl(FormControlType::ComboBox, toDateListControl);
        toDateBuildComboBox.label("@Payroll:PayPeriod");
        toDateBuildComboBox.comboType(comboTypeList);

        return dialogModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs additional actions to the dialog after the run event.
    /// </summary>
    /// <param name="_dialog">
    ///     The dialog object created by the class.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
        toDateComboBox = _dialog.dialogForm().formRun().control(toDateBuildComboBox.id());
        payCycleReferenceControl = _dialog.dialogForm().formRun().control(payCycleBuildReferenceControl.id());
        payCycleReferenceControl.registerOverrideMethod(methodStr(FormStringControl, modified),
            methodStr(PayrollPayStatementJournalizeBase, payCycleControl_modified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the values set in the dialog by the user.
    /// </summary>
    /// <returns>
    ///     true if the values were retrieved successfully; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        payCycleRecId   = payCycleReferenceControl.value();
        toDate       = conPeek(toDateList, toDateComboBox.selection() + 1);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        this.initQuery();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPeriodCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds range to retrieve only pay statements belonging with the
    /// Pay Period entered in the dialog.
    /// </summary>
    protected void initPeriodCriteria()
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;
        PayrollPayPeriod        payPeriod;

        if (payCycleRecId != 0)
        {
            select firstOnly RecId from payPeriod
                where payPeriod.PayCycle == payCycleRecId
                &&    payPeriod.PeriodEndDate == toDate;

            qbds = queryRun.query().dataSourceTable(tableNum(PayrollPayStatement));
            qbr = SysQuery::findOrCreateRange(qbds, fieldnum(PayrollPayStatement, PayPeriod));
            qbr.value(queryValue(payPeriod.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the query used by the dialog.
    /// </summary>
    void initQuery()
    {
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;

        if (!queryRun)
        {
            queryRun = new Queryrun(querystr(PayrollPayStatementJournalize));
        }
        qbd = queryRun.query().dataSourceTable(tableNum(PayrollPayStatement));

        // If the class was called with a record
        if (calledWithRecord)
        {
            if (payStatementCaller.RecId != 0)
            {
                qbd.clearRanges();
                qbr = qbd.addRange(fieldNum(PayrollPayStatement, RecId));
                qbr.value(queryValue(payStatementCaller.RecId));
                qbr.status(RangeStatus::Locked);
            }
        }

        if (payCycleRecId != 0)
        {
            toDate = conPeek(toDateList, toDateComboBox.selection() + 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRun</Name>
				<Source><![CDATA[
    public QueryRun parmQueryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCycleControl_modified</Name>
				<Source><![CDATA[
    private boolean payCycleControl_modified(FormControl _formControl)
    {
        boolean ret = true;

        ret = payCycleReferenceControl.modified();
        if (ret)
        {
            payCycleRecId = payCycleReferenceControl.value();
            this.createToDateList();
            this.initQuery();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallerArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the the caller <c>Args</c>.
    /// </summary>
    /// <param name="_callerArgs">
    ///     The caller <c>Args</c> passed into the dialog.
    /// </param>
    public void setCallerArgs(Args _callerArgs)
    {
        callerArgs = _callerArgs;
        callingObject = _callerArgs.menuItemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPayStatementCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the caller <c>PayrollPayStatement</c> table buffer passed to the dialog.
    /// </summary>
    /// <param name="_payStatementCaller">
    ///     The <c>PayrollPayStatement</c> table buffer to use for the dialog.
    /// </param>
    public void setPayStatementCaller(PayrollPayStatement _payStatementCaller)
    {
        if (_payStatementCaller.RecId)
        {
            // Set flag indicating that the class was passed a table buffer from the caller
            calledWithRecord = true;

            payStatementCaller = _payStatementCaller;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return (!calledWithRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the values supplied by the user on the dialog.
    /// </summary>
    /// <param name="calledFrom">
    ///     The object that called the dialog.
    /// </param>
    /// <returns>
    ///     true if the values are valid; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;
        PayrollPayPeriod payPeriod;

        ret = super(calledFrom);

        if (ret)
        {
            if (payCycleRecId == 0)
            {
                ret = checkFailed("@Payroll:YouMustSelectAPayCycle");
            }
            else
            {
                select firstOnly RecId from payPeriod
                    where payPeriod.PayCycle == payCycleRecId
                    &&    payPeriod.PeriodEndDate == toDate;
                if (payPeriod.RecId == 0)
                {
                    ret = checkFailed("@Payroll:YouMustSelectAPayPeriod");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>