<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanUpdEmptied</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanUpdEmptied</c> class performs status updates for kanbans that have the target status
///    set to the Emptied value.
/// </summary>
public class KanbanUpdEmptied extends KanbanUpd
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs actions for the Emptied status update.
    /// </summary>
    protected void runStatus()
    {
        this.setEmptiedDateTime();
        this.setStatus(LeanKanbanStatus::Emptied);
        this.beginLedger();
        this.updatePhysicalKanbanEmpty();
        this.commitLedger();
        this.updateKanban();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmptiedDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the empty date of the kanban.
    /// </summary>
    protected void setEmptiedDateTime()
    {
        kanban.EmptiedDateTime = kanbanStatusUpdate.TransactionDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePhysicalKanbanEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the inventory deduction for the empty kanban, if it is required.
    /// </summary>
    protected void updatePhysicalKanbanEmpty()
    {
        KanbanType                  kanbanType = kanban.type();
        InventTrans                 inventTrans;
        InventTransOrigin           inventTransOrigin;
        InventDimParm               inventDimParm;
        
        if (KanbanItemCheckMovement::newStandard(kanban.inventMovement(),false,true).isAllowed())
        {
            if (kanbanType.mustBeInventoryControlled())
            {
                //create estimated transactions
                InventUpd_Estimated inventUpd_Estimated = InventUpd_Estimated::newInventMovement(kanban.inventMovement());
                inventUpd_Estimated.updateNow();

                InventDim      fromInventDim;
                InventDim      toInventDim;
                KanbanJob      kanbanJob      = kanban.lastKanbanJob();
                InventMovement inventMovement = kanban.inventMovement();
                InventDim      inventDim      = inventMovement.inventdim();
                inventDimParm.initFromInventDim(inventDim);

                InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventMovement.inventTable());
                
                //set the exact inventory dimensions from the kanban job receipt
                while select sum(Qty), InventDimId from inventTrans
                    group by InventDimId
                    exists join inventTransOrigin
                        where inventTransOrigin.InventTransId == kanbanJob.InventTransId &&
                              inventTransOrigin.RecId         == inventTrans.InventTransOrigin
                {
                    InventUpd_ChangeDimension inventUpd_ChangeDimension;

                    toInventDim = inventTrans.inventDim();

                    fromInventDim.data(inventDim);
                    fromInventDim.copyDimParmDim(inventDimGroupSetup, toInventDim, KanbanJob::nextJobInventDimParm());
                    fromInventDim = InventDim::findOrCreate(fromInventDim);
                    inventDimParm.initFromInventDim(fromInventDim);
                    
                    inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParameters(inventMovement, inventDim, inventDimParm, toInventDim, -inventTrans.Qty);

                    inventUpd_ChangeDimension.updateNow();
                }

                //deduct from inventory
                InventUpd_Physical inventUpd_Physical = InventUpd_Physical::newKanban(kanban);
                inventUpd_Physical.updateNow(ledgerVoucher);
                costUpd.addDirectMaterialConsumption(inventUpd_Physical.movement().inventModelType().inventCostMovement().parmInventItemPrice(),
                                             - inventUpd_Physical.movement().inventModelType().inventCostMovement().totalQty());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanUpd construct()
    {
        return new KanbanUpdEmptied();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>