<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjCache</c> class holds the caching related methods for project module.
/// </summary>
class ProjCache
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setActivityEstimatesCacheForProjectQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the cache as <c>PSAActivityEstimates</c> recordid for a given hiearchy and task ID.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <param name = "_taskId">ID of the hierarchy task.</param>
    /// <param name = "_recordIdToBeCached">Record ID of <c>PSAActivityEstimates</c> table.</param>
    public static void setActivityEstimatesCacheForProjectQuotation(HierarchyIdBase _hierarchyId, RecId _taskId, RecId _recordIdToBeCached)
    {
        SysGlobalCache cache = appl.globalCache();
        str cacheKey = _hierarchyId + ':' + int642Str(_taskId);

        cache.set(tableStr(PSAActivityEstimates), cacheKey, _recordIdToBeCached);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveActivityEstimatesCacheForProjectQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cache set as <c>PSAActivityEstimates</c> recordid for a given hiearchy and task ID.
    /// </summary>
    /// <param name = "_hierarchyId">ID of the hierarchy.</param>
    /// <param name = "_taskId">ID of the hierarchy task.</param>
    /// <returns>
    ///    The <c>PSAActivityEstimates</c> table record ID.
    /// </returns>
    public static RecId retrieveActivityEstimatesCacheForProjectQuotation(HierarchyIdBase _hierarchyId, RecId _taskId)
    {
        RecId recordId;
        SysGlobalCache cache = appl.globalCache();
        str cacheKey = _hierarchyId + ':' + int642Str(_taskId);

        if (cache.isSet(tableStr(PSAActivityEstimates), cacheKey))
        {
            recordId = cache.get(tableStr(PSAActivityEstimates), cacheKey);

            // Clear the cache.
            cache.remove(tablestr(PSAActivityEstimates), cacheKey);
        }

        return recordId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearScope</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears project cache for the specified cache scope.
    /// </summary>
    /// <param name="_scope">
    ///    The project cache scope for which to clear.
    /// </param>
    public static void clearScope(ProjCacheScope _scope)
    {
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();

        objectCache.clear(ProjCache::getCacheScopeStr(_scope));
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearKeyValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears project cache for the specified cache scope and key.
    /// </summary>
    /// <param name="_scope">
    ///    The project cache scope for which to clear.
    /// </param>
    /// <param name="_key">
    ///    The value key for which to obtain the cache value.
    /// </param>
    public static void clearKeyValue(ProjCacheScope _scope, container _key)
    {
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();

        objectCache.remove(ProjCache::getCacheScopeStr(_scope), _key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheScopeStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the project cache scope identifier for the specified project cache scope.
    /// </summary>
    /// <param name="_scope">
    ///    The project cache scope for which to get the identifier.
    /// </param>
    /// <returns>
    ///    The identifier of the project cache scope.
    /// </returns>
    private static str getCacheScopeStr(ProjCacheScope _scope)
    {
        // Int2Str is used instead of Enum2Str to get the int
        // value like '2' instead of the string value for
        // the scope to ensure uniqueness. The _scope enum
        // is implicitly cast to an int by this call. This
        // avoids calling strfmt() which causes a kernel
        // callback running under IL and is therefore significantly slower.
        return 'ProjCache_' + int2str(_scope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the project cache value for the specified project cache scope and value key.
    /// </summary>
    /// <param name="_scope">
    ///    The project cache scope for which to obtain the cache value.
    /// </param>
    /// <param name="_key">
    ///    The value key for which to obtain the cache value.
    /// </param>
    /// <returns>
    ///    The project cache value.
    /// </returns>
    public static container getValue(ProjCacheScope _scope, container _key)
    {
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();

        return objectCache.find(ProjCache::getCacheScopeStr(_scope), _key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the project cache value.
    /// </summary>
    /// <param name="_scope">
    ///    The project cache scope to insert.
    /// </param>
    /// <param name="_key">
    ///    The value key to insert.
    /// </param>
    /// <param name="_value">
    ///    The value to insert.
    /// </param>
    public static void insertValue(ProjCacheScope _scope, container _key, container _value)
    {
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();

        objectCache.insert(ProjCache::getCacheScopeStr(_scope), _key, _value);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>