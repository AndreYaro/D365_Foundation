<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayTableCreateNewDateInterval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    When run, this class creates a new <see cref="T:JmgPayTable" /> record based on an existing record.
///    The class allows the user to easily specify a change in pay between the new record and existing
///    record. Individual pay rates for employees in the table <see cref="T:JmgPayEmployee" /> are also
///    copied, and pay rates are adjusted.
/// </summary>
/// <remarks>
///    There are three different ways of changing pay:
///    <list type="bullet">
///       <item>
///          <description>Rate raise - the rate is increased with the entered value. A negative value denotes a
///          decrease in pay.</description>
///       </item>
///       <item>
///          <description>Percentage raise - the rate is increased with the entered percentage. A negative value
///          denotes a decrease in pay.</description>
///       </item>
///       <item>
///          <description>New rate - the rate is set to the entered value.</description>
///       </item>
///    </list>
/// </remarks>
class JmgPayTableCreateNewDateInterval extends RunBase
{
    DialogField             dfFromDate;
    DialogField             dfToDate;
    DialogField             dfPayRaiseMethod;
    DialogField             dfraiseValue;

    JmgDate                 fromDate;
    JmgDate                 toDate;
    JmgPayCreateRaiseMethod payRaiseMethod;
    real                    raiseValue;
    RecId                   jmpPayRateRecId;

    JmgPayRate              jmgPayRate;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        fromDate,
        toDate,
        payRaiseMethod,
        raiseValue,
        jmpPayRateRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateRates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the new price and percent values, based on original values, and the type of raise
    ///    selected by the user.
    /// </summary>
    /// <param name="_price">
    ///    The price value for which a new value should be calculated.
    /// </param>
    /// <param name="_percent">
    ///    The percentage value for which a new value should be calculated.
    /// </param>
    /// <returns>
    ///    A container with two values: the calculated price and calculated percentage value.
    /// </returns>
    private container calculateRates(Price _price, Percent _percent)
    {
        switch (payRaiseMethod)
        {
            case JmgPayCreateRaiseMethod::RateRaise:
                if (_percent)
                {
                    _percent += raiseValue;
                }
                else
                {
                    _price += raiseValue;
                }
                break;
            case JmgPayCreateRaiseMethod::PercentageRaise:
                _percent += _percent * raiseValue / 100;
                _price += _price * raiseValue / 100;
                break;
            case JmgPayCreateRaiseMethod::NewRate:
                if (_price)
                {
                    _price = raiseValue;
                    _percent = 0.0;
                }
                else
                {
                    _price = 0.0;
                    _percent = raiseValue;
                }
                break;
        }

        return [_price, _percent];
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogClosedWithOk</Name>
				<Source><![CDATA[
    public void dialogClosedWithOk(Object _dialog)
    {
        // If the start date is contained in the original date interval, then ask user
        // if it should be automatically adjusted.
        if (fromDate                            &&
            ((jmgPayRate.ToDate                 &&
              fromDate <= jmgPayRate.ToDate)    ||
              !jmgPayRate.ToDate))
        {
            if (this.showConfirmDialog())
            {
                ttsbegin;
                jmgPayRate.ToDate = fromDate - 1;
                jmgPayRate.update();
                ttscommit;
            }
            else
            {
                fromDate = jmgPayRate.ToDate + 1;
            }
        }

        super(_dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods described by the <see cref="T:RunBaseDialogable" />
    ///    interface.
    /// </summary>
    /// <param name="dialog">
    ///    An already initialized dialog can be passed.
    /// </param>
    /// <param name="forceOnClient">
    ///    Specifies whether the dialog must be instantiated on the client.
    /// </param>
    /// <returns>
    ///    A <see cref="T:RunBaseDialogable" /> object.
    /// </returns>
    /// <remarks>
    ///    The <c>JmgPayTableCreateNewDateInterval</c> class adds the following fields to the dialog: <c>Pay
    ///    type</c>, <c>From date</c>, <c>To date</c>, <c>Raise</c> method, and <c>value</c>.
    /// </remarks>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Dialog ret;
        DialogGroup dialogGroup;

        ret = this.dialogInternal(dialog, forceOnClient);
        ret.caption("@SYS39601");

        // Pay type (not editable)
        dialogGroup = ret.addGroup("@SYS39294");
        dialogGroup.columns(2);
        ret.addFieldValue(extendedtypestr(JmgPayCostType), jmgPayRate.PayCostType).allowEdit(false);
        ret.addFieldValue(extendedtypestr(JmgDescription), JmgPayTable::find(jmgPayRate.PayCostType).Description).allowEdit(false);

        // Date interval
        dialogGroup = ret.addGroup("@SYS36688");
        dialogGroup.columns(2);
        dfFromDate = ret.addField(extendedtypestr(JmgDate), "@SYS35905");
        dfToDate = ret.addField(extendedtypestr(JmgDate), "@SYS35904");
        dfFromDate.value(jmgPayRate.ToDate + 1);
        dfToDate.value(dateNull());

        // New rate:
        dialogGroup = ret.addGroup("@SYS39603");
        dfPayRaiseMethod = ret.addField(enumstr(JmgPayCreateRaiseMethod));
        dfraiseValue = ret.addField(extendedtypestr(RealBase), "@SYS41043");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS39601";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the dialog values to the internal variables after the dialog is closed.
    /// </summary>
    /// <returns>
    ///    true if the method was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Retrieves values entered by the user. If the from date is not entered, or the to date is before the
    ///    from date, false is returned, and a warning message is displayed.
    ///    Remember always to call
    ///    <c>super()</c> when you inherit from this method.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean     ret;
        JmgPayRate  check;

        ret = super();

        fromDate = dfFromDate.value();
        toDate = dfToDate.value();
        payRaiseMethod = dfPayRaiseMethod.value();
        raiseValue = dfraiseValue.value();

        // From date must be set.
        if (!fromDate)
        {
            ret = ret && checkFailed("@SYS39559");
        }

        if (ret && fromDate && toDate && fromDate > toDate)
        {
            ret = checkFailed("@SYS16982");
        }

        if (ret)
        {
            check.data(jmgPayRate);
            check.FromDate = fromDate;
            check.ToDate   = toDate;
            [check.Price, check.Percent] = this.calculateRates(check.Price, check.Percent);
            ret = check.promptUserExistingPayItems();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container ret = [#CurrentVersion, #CurrentList];
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    /// <remarks>
    ///    This method creates a new <see cref="T:JmgPayTable" /> record based on the one specified. The new
    ///    rate is calculated based on the entered values from the user. If the entered date interval overlaps
    ///    the original, the user is prompted to confirm that the from date is adjusted.
    /// </remarks>
    public void run()
    {
        JmgPayRate      newPayRate;
        JmgPayEmployee  origPayEmployee;
        JmgPayEmployee  newPayEmployee;
        super();

        ttsbegin;
        // Create new entry in JmgPayTable;
        newPayRate.data(jmgPayRate);
        newPayRate.FromDate = fromDate;
        newPayRate.ToDate   = toDate;
        [newPayRate.Price, newPayRate.Percent]  = this.calculateRates(newPayRate.Price, newPayRate.Percent);
        newPayRate.insert();

        // Create new entries in JmgPayEmployee, based on the records associated to the original JmgPayTable.
        // If a new rate is chosen, no specific employee pays will be created.
        if (payRaiseMethod != JmgPayCreateRaiseMethod::NewRate)
        {
            while select origPayEmployee
                where origPayEmployee.PayCostType == jmgPayRate.PayCostType &&
                      origPayEmployee.FromDate == jmgPayRate.FromDate &&
                      origPayEmployee.ToDate == jmgPayRate.ToDate
            {
                newPayEmployee.data(origPayEmployee);
                newPayEmployee.FromDate = fromDate;
                newPayEmployee.ToDate   = toDate;
                [newPayEmployee.Price, newPayEmployee.Percent]  = this.calculateRates(newPayEmployee.Price, newPayEmployee.Percent);
                newPayEmployee.insert();
            }
        }
        ttscommit;

        // Show info box, if there is a gap between original and new pay rate.
        if (jmgPayRate.ToDate + 2 < fromDate)
        {
            info(strfmt("@SYS39734",
                        date2StrUsr(jmgPayRate.ToDate, DateFlags::FormatAll),
                        date2StrUsr(fromDate, DateFlags::FormatAll)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showConfirmDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows a dialog that asks the user to confirm whether date intervals should automatically be
    ///    adjusted.
    /// </summary>
    /// <returns>
    ///    true if the user clicked OK; otherwise, false.
    /// </returns>
    private boolean showConfirmDialog()
    {
        Dialog dialog;

        dialog = new Dialog();

        dialog.addText("@SYS39733");

        return dialog.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;
        Integer version = conpeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
                break;
        }

        if (!jmgPayRate)
        {
            select firstonly jmgPayRate
                where jmgPayRate.RecId == jmpPayRateRecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>JmgPayTableCreateNewDateInterval</c> class
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>JmgPayTableCreateNewDateInterval</c> class.
    /// </returns>
    public static JmgPayTableCreateNewDateInterval construct()
    {
        return new JmgPayTableCreateNewDateInterval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJmgPayRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the JmgPayRate record.
    /// </summary>
    /// <param name="_jmgPayRate">
    /// The JmgPayRate.
    /// </param>
    private void setJmgPayRate(JmgPayRate _jmgPayRate)
    {
        jmgPayRate = _jmgPayRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJmgPayRateRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the JmgPayRate record id.
    /// </summary>
    /// <param name="_jmpPayRateRecId">
    /// The JmgPayRate record id.
    /// </param>
    private void setJmgPayRateRecId(RecId _jmpPayRateRecId)
    {
        jmpPayRateRecId = _jmpPayRateRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        JmgPayTableCreateNewDateInterval jmgPayTableCreateNewDateInterval = JmgPayTableCreateNewDateInterval::construct();

        if (args && args.record().TableId == tablenum(JmgPayRate))
        {
            jmgPayTableCreateNewDateInterval.getLast();
            jmgPayTableCreateNewDateInterval.setJmgPayRate(args.record());
            jmgPayTableCreateNewDateInterval.setJmgPayRateRecId(args.record().RecId);
        }

        if (jmgPayTableCreateNewDateInterval.prompt())
        {
            jmgPayTableCreateNewDateInterval.runOperation();

            // Refresh caller as new data is available
            if (args.caller())
            {
                FormRun caller = args.caller();
                if (caller.dataSource())
                {
                    caller.dataSource().research();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>