<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdBOMOverview</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class serves as a FormCtrl for form ProdBOMOverview
/// </summary>
public class PmfFormCtrl_ProdBOMOverview extends PmfFormCtrl
{
    boolean calledFromFormula;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called after the form's datasource init
    /// </summary>
    /// <param name="_buffer">
    /// record buffer
    /// </param>
    public void dataSourceInitPost(Common _buffer)
    {
        super(_buffer);

        QueryBuildDataSource qbrs = formDS.query().dataSourceTable(tablenum(ProdTable));

        if (qbrs)
        {
            QueryBuildRange qbr = SysQuery::findOrCreateRange(
                                qbrs,
                                fieldnum(ProdTable, ProdType));
            qbr.status(RangeStatus::Locked);

            TableId tableId = formRun.args().dataset();
            if (this.isFormulaEnabled()
            && (!tableId || tableId == tableNum(Common)))
            {
                qbr.value(SysQuery::value(ProdType::Process));
            }
            else
            {
                qbr.value(SysQuery::value(ProdType::Standard));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        if (this.isCatchWeightEnabled())
        {
            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMOverview,BOMQuantity)),
                    formRun.design().controlName(formControlStr(ProdBOMOverview,BOMQuantity_PdsCWRemainFinancial)),
                    methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMOverview,InventoryQuantity)),
                    formRun.design().controlName(formControlStr(ProdBOMOverview,InventoryQuantity_PdsCWInventCalc)),
                    methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMOverview,InventoryQuantity)),
                    formRun.design().controlName(formControlStr(ProdBOMOverview,InventoryQuantity_PdsCWInventStup)),
                    methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMOverview,InventoryQuantity)),
                    formRun.design().controlName(formControlStr(ProdBOMOverview,InventoryQuantity_PdsCWRemainPhysical)),
                    methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMOverview,ConsumptionCalculation)),
                    formRun.design().controlName(formControlStr(ProdBOMOverview,ConsumptionCalculation_PdsCWQty)),
                    methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMOverview,ConsumptionCalculation)),
                    formRun.design().controlName(formControlStr(ProdBOMOverview,ConsumptionCalculation_M_PdsCWUnitId)),
                    methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMOverview,Grid)),
                    formRun.design().controlName(formControlStr(ProdBOMOverview,ProdBOM_PdsCWQty)),
                    methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMOverview,Grid)),
                    formRun.design().controlName(formControlStr(ProdBOMOverview,ProdBOM_PdsCWInventCalc)),
                    methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMOverview,Grid)),
                    formRun.design().controlName(formControlStr(ProdBOMOverview,ProdBOM_PdsCWInventStup)),
                    methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMOverview,Grid)),
                    formRun.design().controlName(formControlStr(ProdBOMOverview,ProdBOM_PdsCWRemainFinancial)),
                    methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMOverview,Grid)),
                    formRun.design().controlName(formControlStr(ProdBOMOverview,ProdBOM_PdsCWRemainPhysical)),
                    methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMOverview,PostingTab)),
                    formRun.design().controlName(formControlStr(ProdBOMOverview,PdsCW)),
                    methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);
        }

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOMOverview,Grid)),
                formRun.design().controlName(formControlStr(ProdBOMOverview,ProdBOM_ProdId)),
                methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO138");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOMOverview,Identification)),
                formRun.design().controlName(formControlStr(ProdBOMOverview,Identification_ProdId)),
                methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO138");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdBOMOverview,BOM)),
                methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO139");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdBOMOverview,BOMQuantity)),
                methodstr(PmfFormCtrl_ProdBOMOverview, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO141");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called before the form has been initialized
    /// </summary>
    /// <remarks>
    /// Overriding classes need to set the FormRun object.
    /// </remarks>
    public void initPre()
    {
        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (formRun.args().menuItemName()
                == menuitemdisplaystr(PmfProdBOMFormulaOverview))
        {
            calledFromFormula = true;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is item formula enabled?
    /// </summary>
    /// <returns>
    /// true, if formula enabled; otherwise false
    /// </returns>
    /// <remarks>
    /// Check the current
    /// </remarks>
    public NoYes isFormulaEnabled()
    {
        return #PmfEnabled && calledFromFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The object is created
    /// </summary>
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdBOM))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>
    /// returns instance
    /// </returns>
    public static PmfFormCtrl_ProdBOMOverview construct()
    {
        return new PmfFormCtrl_ProdBOMOverview();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PmfFormCtrl_ProdBOMCurrent</c>
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// returns instance
    /// </returns>
    public static PmfFormCtrl_ProdBOMOverview newFromForm(FormRun _fr)
    {
        PmfFormCtrl_ProdBOMOverview frmCtrl;

        frmCtrl = PmfFormCtrl_ProdBOMOverview::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>