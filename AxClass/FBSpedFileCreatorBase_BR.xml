<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreatorBase_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains the base methods to generate the SPED file.
/// </summary>
public abstract class FBSpedFileCreatorBase_BR
{
    #AviFiles
    #FiscalDocumentModels_BR
    #FiscalBooks_BR

    const str OnlyNumbers = '0123456789';
    const str OnlyAlpha = '0123456789abcdefghijklmnopqrstuvxwyzABCDEFGHIJKLMNOPQRSTUVXWYZãáàâÃÁÀÂéêëÉÊËíÍóôõÓÔÕúüÚÜçÇ';
    const str OnlyAlphaWithoutAccents = '0123456789abcdefghijklmnopqrstuvxwyzABCDEFGHIJKLMNOPQRSTUVXWYZ';
    const str RealUnitOfMeasureSymbol = 'R$';
    const str RealUnitOfMeasureDescription = 'Reais';
    const str LanguageId = 'pt-BR';
    const int MaxLegalTextLength = 255;

    const str AssetAccounts = '01';
    const str LiabilityAccounts = '02';
    const str Equity = '03';
    const str TotalAccounts = '04';
    const str Others = '09';

    FBFile_BR                       fbFile;
    FBSpedFile_BR                   spedFile;

    FBSpedFilePartyTmp_BR           spedFileParty;
    FBSpedFileItemTmp_BR            spedFileItem;
    FBSpedFileOperationNatureTmp_BR spedFileOperationNature;
    FBSpedFileUnitSymbolTmp_BR      spedFileUnitSymbol;
    FBSpedFileUnitOfMeasureTmp_BR   spedFileUnitOfMeasure;
    FBSpedFileTextTmp_BR            spedFileText;

    RunbaseProgress                 runBaseProgress;

    FBBookingPeriod_BR              fbBookingPeriod;
    private boolean result;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addChildRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a child record.
    /// </summary>
    /// <param name="_parentRecord">
    ///     An instance of <c>FBSpedRecord_BR</c> representing the parent record.
    /// </param>
    /// <param name="_childRecord">
    ///     An instance of <c>FBSpedRecord_BR</c> representing the child record being added.
    /// </param>
    protected void addChildRecord(FBSpedRecord_BR _parentRecord, FBSpedRecord_BR _childRecord)
    {
        spedFile.addChildRecord(_parentRecord, _childRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a record.
    /// </summary>
    /// <param name="_spedRecord">
    ///     An instance of <c>FBSpedRecord_BR</c> representing the record being added.
    /// </param>
    protected void addRecord(FBSpedRecord_BR _spedRecord)
    {
        spedFile.addRecord(_spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0150</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 0150 record.
    /// </summary>
    /// <param name="_parentRecord">
    /// A <c>FBSpedRecord_BR</c> object parent.
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// A <c>FiscalEstablishment_BR</c> table record.
    /// </param>
    protected void createRecord0150(FBSpedRecord_BR _parentRecord, FiscalEstablishment_BR _fiscalEstablishment)
    {
        #ISOCountryRegionCodes

        FBSpedRecord_BR         spedRecord;
        LogisticsPostalAddress  logisticsPostalAddress;
        BacenCode_BR            countryCode;
        BacenCode_BR            brazilianCountryCode;

        brazilianCountryCode = LogisticsAddressCountryRegion::find(SysCountryRegionCode::getCountryRegionIdByIsoCode(#isoBR)).BACENCode_BR;

        while select spedFileParty
            where spedFileParty.FiscalEstablishmentRecId == _fiscalEstablishment.RecId
        {
            logisticsPostalAddress = LogisticsPostalAddress::findRecId(spedFileParty.LogisticsPostalAddress);

            spedRecord = this.newRecord('0150');                        // REG

            countryCode = LogisticsAddressCountryRegion::find(logisticsPostalAddress.CountryRegionId).BACENCode_BR;

            spedRecord.addFieldString   (spedFileParty.code(), 60);     // COD_PART
            spedRecord.addFieldString   (spedFileParty.Name, 100);      // NOME
            spedRecord.addFieldString   (countryCode, 5);               // COD_PAIS

            if (countryCode == brazilianCountryCode)
            {
                spedRecord.addFieldString                   (spedFileParty.CNPJ, 14);   // CNPJ
                spedRecord.addFieldString                   (spedFileParty.CPF, 11);    // CPF
                spedRecord.addFieldString                   (spedFileParty.IENum == 'ISENTO' ? '' : IEValidation_BR::removeFormattingSP(spedFileParty.IENum), 14);  // IE
                spedRecord.addFieldNumericFilledWithZeros   (this.getCityCode(logisticsPostalAddress), 7);  // COD_MUN
            }
            else
            {
                spedRecord.addFieldEmptyNTimes(4);
            }

            spedRecord.addFieldString   (spedFileParty.SUFRAMA, 9);                         // SUFRAMA
            spedRecord.addFieldString   (logisticsPostalAddress.Street, 60);                // END
            spedRecord.addFieldString   (logisticsPostalAddress.StreetNumber, 10);          // NUM
            spedRecord.addFieldString   (logisticsPostalAddress.BuildingCompliment, 60);    // COMPL
            spedRecord.addFieldString   (logisticsPostalAddress.DistrictName, 60);          // BAIRRO

            if (_parentRecord)
            {
                this.addChildRecord(_parentRecord, spedRecord);
            }
            else
            {
                this.addRecord(spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0190</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 0190 record.
    /// </summary>
    /// <param name="_parentRecord">
    /// A <c>FBSpedRecord_BR</c> object parent.
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// A <c>FiscalEstablishment_BR</c> table record.
    /// </param>
    protected void createRecord0190(FBSpedRecord_BR _parentRecord, FiscalEstablishment_BR _fiscalEstablishment)
    {
        FBSpedRecord_BR                 spedRecord;
        UnitOfMeasure                   unitOfMeasure;
        UnitOfMeasureTranslation        unitOfMeasuretranslation;

        while select Symbol
            from spedFileUnitOfMeasure
            group by Symbol
            where spedFileUnitOfMeasure.FiscalEstablishmentRecId == _fiscalEstablishment.RecId
        {
            unitOfMeasure = UnitOfMeasure::findBySymbol(spedFileUnitOfMeasure.Symbol);

            spedRecord = FBSpedRecord_BR::constructEmpty('0190');

            if (!unitOfMeasure
                && spedFileUnitOfMeasure.Symbol == RealUnitOfMeasureSymbol)
            {
                spedRecord.addFieldString(RealUnitOfMeasureSymbol);
                spedRecord.addFieldString(RealUnitOfMeasureDescription);
            }
            else
            {
                unitOfMeasuretranslation  = UnitOfMeasureTranslation::findByTranslation(unitOfMeasure.RecId, LanguageId);

                spedRecord.addFieldString(FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol, spedFileUnitOfMeasure.Symbol));
                spedRecord.addFieldString(unitOfMeasuretranslation.Description ? unitOfMeasuretranslation.Description : UnitOfMeasureTranslation::findByTranslation(unitOfMeasure.RecId,Global::currentUserLanguage()).Description);
            }

            if (_parentRecord)
            {
                this.addChildRecord(_parentRecord, spedRecord);
            }
            else
            {
                this.addRecord(spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0200</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 0200 record.
    /// </summary>
    /// <param name="_parentRecord">
    /// A <c>FBSpedRecord_BR</c> object parent.
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// A <c>FiscalEstablishment_BR</c> table record.
    /// </param>
    protected void createRecord0200(FBSpedRecord_BR _parentRecord, FiscalEstablishment_BR _fiscalEstablishment)
    {
        FBSpedRecord_BR                 spedRecord;
        InventTable                     inventTable;
        TaxValue                        itemTaxValue;
        TaxServiceCode_BR               taxServiceCode;

        while select spedFileItem
            where spedFileItem.FiscalEstablishmentRecId == _fiscalEstablishment.RecId
        {
            inventTable = InventTable::find(spedFileItem.ItemId);

            if (inventTable && !FBSpedFileUnitOfMeasureTmp_BR::existsForItemIdAndSymbol(spedFileUnitOfMeasure, _fiscalEstablishment.RecId, inventTable.ItemId, inventTable.inventTableModuleInvent().UnitId))
            {
                spedFileUnitOfMeasure.insertFromItemIdAndSymbol(spedFileUnitSymbol, _fiscalEstablishment.RecId, inventTable.ItemId, inventTable.inventTableModuleInvent().UnitId);
            }
        }

        this.createRecord0190(_parentRecord, _fiscalEstablishment);

        while select spedFileItem
            where spedFileItem.FiscalEstablishmentRecId == _fiscalEstablishment.RecId
        {
            inventTable = InventTable::find(spedFileItem.ItemId);

            spedRecord = this.newRecord('0200');

            if (inventTable)
            {
                spedRecord.addFieldString                   (inventTable.ItemId);
                spedRecord.addFieldString                   (strLRTrim(inventTable.NameAlias));
                spedRecord.addFieldString                   (InventItemBarcode::findShowForItem(inventTable.ItemId).ItemBarCode);
                spedRecord.addFieldString                   ('');
                spedRecord.addFieldString                   (FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol,inventTable.inventTableModuleInvent().UnitId));
                spedRecord.addFieldNumericFilledWithZeros   (subStr(inventTable.InventProductType_BR, 1, 2), 2);

                if (!conFind(['07','08','09','99'], inventTable.InventProductType_BR))
                {
                    spedRecord.addFieldString(this.keepNumbers(inventTable.TaxFiscalClassification_BR));
                }
                else
                {
                    spedRecord.addFieldEmpty();
                }

                spedRecord.addFieldString                   ('');
                spedRecord.addFieldNumericFilledWithZeros   (str2int(substr(inventTable.TaxFiscalClassification_BR, 1, 2)), 2);
                spedRecord.addFieldNumeric                  ('');

                itemTaxValue = this.getItemTaxValue(inventTable.inventTableModuleSales().TaxItemGroupId, TaxType_BR::ICMS);

                if (itemTaxValue)
                {
                    spedRecord.addFieldNumeric(itemTaxValue, 2);
                }
                else
                {
                    spedRecord.addFieldEmpty();
                }
            }
            else
            {
                taxServiceCode = TaxServiceCode_BR::find(spedFileItem.ItemId);

                spedRecord.addFieldString(taxServiceCode.ServiceCodeId);
                spedRecord.addFieldString(taxServiceCode.Name);
                spedRecord.addFieldEmptyNTimes(3);
                spedRecord.addFieldNumericFilledWithZeros(9, 2);
                spedRecord.addFieldEmptyNTimes(5);
            }

            if (_parentRecord)
            {
                this.addChildRecord(_parentRecord, spedRecord);
            }
            else
            {
                this.addRecord(spedRecord);
            }

            this.createRecord0220(spedRecord, inventTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0210</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 0210 record.
    /// </summary>
    /// <param name="_parentRecord">
    /// A <c>FBSpedRecord_BR</c> object parent.
    /// </param>
    /// <param name="_spedItemId">
    /// The Sped item id.
    /// </param>
    protected void createRecord0210(FBSpedRecord_BR _parentRecord, SpedItemId _spedItemId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0220</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 0220 record.
    /// </summary>
    /// <param name="_parentRecord">
    /// A <c>FBSpedRecord_BR</c> object parent.
    /// </param>
    /// <param name="_inventTable">
    /// A <c>InventTable</c> table record.
    /// </param>
    /// <remarks>
    /// Abstract method.
    /// </remarks>
    protected abstract void createRecord0220(FBSpedRecord_BR _parentRecord, InventTable _inventTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0400</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 0400 record.
    /// </summary>
    /// <param name="_parentRecord">
    /// A <c>FBSpedRecord_BR</c> object parent.
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// A <c>FiscalEstablishment_BR</c> table record.
    /// </param>
    protected void createRecord0400(FBSpedRecord_BR _parentRecord, FiscalEstablishment_BR _fiscalEstablishment)
    {
        while select spedFileOperationNature
            where spedFileOperationNature.FiscalEstablishmentRecId == _fiscalEstablishment.RecId
        {
            CFOPTable_BR cfopTable = CFOPTable_BR::findByCFOPId(spedFileOperationNature.CFOP);

            if (cfopTable)
            {
                FBSpedRecord_BR spedRecord = this.newRecord('0400');

                spedRecord.addFieldString   (this.keepNumbers(cfopTable.CFOPId));
                spedRecord.addFieldString   (cfopTable.Name);

                if (_parentRecord)
                {
                    this.addChildRecord(_parentRecord, spedRecord);
                }
                else
                {
                    this.addRecord(spedRecord);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0450</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 0450 record.
    /// </summary>
    /// <param name="_parentRecord">
    /// A <c>FBSpedRecord_BR</c> object parent.
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// A <c>FiscalEstablishment_BR</c> table record.
    /// </param>
    protected void createRecord0450(FBSpedRecord_BR _parentRecord, FiscalEstablishment_BR _fiscalEstablishment)
    {
        FBSpedRecord_BR spedRecord;

        while select spedFileText
            where spedFileText.FiscalEstablishmentRecId == _fiscalEstablishment.RecId
        {
            spedRecord = this.newRecord('0450');

            spedRecord.addFieldString   (int2str(spedFileText.TextId), 6);
            spedRecord.addFieldString   (spedFileText.Description, 255);

            if (_parentRecord)
            {
                this.addChildRecord(_parentRecord, spedRecord);
            }
            else
            {
                this.addRecord(spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord9900</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 9900 record.
    /// </summary>
    protected void createRecord9900()
    {
        SetEnumerator   se;
        Set             recordTypes = spedFile.recordTypes();
        str             recordType;
        ListEnumerator  le;
        FBSpedRecord_BR record9900;

        void createRecord9900ForRecordType(str _recordType, int64 _totalOfRecords)
        {
            record9900 = this.newRecord('9900');
            record9900.addFieldString(_recordType);
            record9900.addFieldNumeric(_totalOfRecords);
            this.addRecord(record9900);
        }

        le = spedFile.blocks().getEnumerator();
        while (le.moveNext())
        {
            recordType = le.current() + '001';
            if (recordType != '0001')
            {
                createRecord9900ForRecordType(recordType, 1);
            }
        }

        se = recordTypes.getEnumerator();
        while (se.moveNext())
        {
            recordType = se.current();
            createRecord9900ForRecordType(recordType, spedFile.totalRecordsOfType(recordType));
        }

        createRecord9900ForRecordType('9001', 1);
        createRecord9900ForRecordType('9900', spedFile.totalRecordsOfType('9900') + 3);

        createRecord9900ForRecordType('9990', 1);
        createRecord9900ForRecordType('9999', 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord9990</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 9990 record.
    /// </summary>
    protected void createRecord9990()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('9990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('9') + 3);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord9999</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 9999 record.
    /// </summary>
    protected void createRecord9999()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = this.newRecord('9999');
        spedRecord.addFieldNumeric(spedFile.totalRecords() + spedFile.blocks().elements());

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Exports the Sped Contributions file to disk.
    /// </summary>
    public void exportFile()
    {
        if (!this.validate())
        {
            throw Exception::Error;
        }

        this.populateFileContent();

        this.writeContentToFile();

        fbFile.close();

        result = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountNatureCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account nature code.
    /// </summary>
    /// <param name="_dimensionLedgerAccountType">
    /// A ledger account type
    /// </param>
    /// <returns>
    /// The account nature code.
    /// </returns>
    protected str getAccountNatureCode(DimensionLedgerAccountType _dimensionLedgerAccountType)
    {
        switch (_dimensionLedgerAccountType)
        {
            case DimensionLedgerAccountType::Asset:
            case DimensionLedgerAccountType::BalanceSheet:
                return AssetAccounts;

            case DimensionLedgerAccountType::Liability:
                return LiabilityAccounts;

            case DimensionLedgerAccountType::Equity:
                return Equity;

            case DimensionLedgerAccountType::ProfitAndLoss:
            case DimensionLedgerAccountType::Expense:
            case DimensionLedgerAccountType::Revenue:
                return TotalAccounts;

            default: return Others;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCityCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the IBGE city code.
    /// </summary>
    /// <param name="_logisticsPostalAddress">
    /// A <c>LogisticsPostalAddress</c> table record.
    /// </param>
    /// <returns>
    /// The IBGE city code.
    /// </returns>
    protected int getCityCode(LogisticsPostalAddress _logisticsPostalAddress)
    {
        return str2int(LogisticsAddressCity::findLogisticsAddressMap(_logisticsPostalAddress).IBGECode_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTypeIdentification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document type identification.
    /// </summary>
    /// <param name="_primaryMethod">
    /// A <c>PrimaryMethod_BR</c> enum element.
    /// </param>
    /// <returns>
    /// The document type identification.
    /// </returns>
    protected str getDocumentTypeIdentification(PrimaryMethod_BR _primaryMethod)
    {
        switch (_primaryMethod)
        {
            case PrimaryMethod_BR::Duplicate:
                return '00';
            case PrimaryMethod_BR::Check:
                return '01';
            case PrimaryMethod_BR::Promissory:
                return '02';
            case PrimaryMethod_BR::Receipt:
                return '03';
            default :
                return '99';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFBThirdPartyTypeFromAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the third party type.
    /// </summary>
    /// <param name="_fiscalDocumentAccountType">
    /// A <c>CustVendType_BR</c> enum element.
    /// </param>
    /// <returns>
    /// The third party type.
    /// </returns>
    protected FBThirdPartyType_BR getFBThirdPartyTypeFromAccountType(CustVendType_BR _fiscalDocumentAccountType)
    {
        FBThirdPartyType_BR     partyType;

        switch (_fiscalDocumentAccountType)
        {
            case CustVendType_BR::Customer:
                partyType = FBThirdPartyType_BR::Customer;
                break;
            case CustVendType_BR::Vendor:
                partyType = FBThirdPartyType_BR::Vendor;
                break;
            case CustVendType_BR::FiscalEstablishment:
                partyType = FBThirdPartyType_BR::FiscalEstablishment;
                break;
            default:
                partyType = FBThirdPartyType_BR::Blank;
        }

        return partyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFreightIdentification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the freight identification.
    /// </summary>
    /// <param name="_freightChargeTerms">
    /// A <c>WMSFreightChargeTerms</c> enum element.
    /// </param>
    /// <returns>
    /// The freight identification.
    /// </returns>
    protected str 1 getFreightIdentification(FiscalDocumentFreightTerms_BR _freightChargeTerms)
    {
        return strFmt('%1', FiscalDocumentHelper::getFreightTermsIntValue(_freightChargeTerms));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIPITaxAssessmentPeriodocity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the IPI tax assessment periodicity.
    /// </summary>
    /// <returns>
    /// The IPI tax assessment periodicity.
    /// </returns>
    protected FBIPIAssessmentPeriodicity_BR getIPITaxAssessmentPeriodocity()
    {
        if (FBTaxAssessment_BR::countOfTaxAssessments(fbBookingPeriod.RecId, TaxType_BR::IPI) == 1)
        {
            return FBIPIAssessmentPeriodicity_BR::Monthly;
        }
        else
        {
            return FBIPIAssessmentPeriodicity_BR::TenDays;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemTaxValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item tax value.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// A tax item group.
    /// </param>
    /// <param name="_taxType">
    /// A <c>TaxType_BR</c> enum element.
    /// </param>
    /// <param name="_taxSubstitution">
    /// A <c>TaxSubstitutionEnum_BR</c> enum element; optional.
    /// </param>
    /// <returns>
    /// The item tax value.
    /// </returns>
    protected TaxValue getItemTaxValue(TaxItemGroup _taxItemGroup, TaxType_BR _taxType, TaxSubstitution_BR _taxSubstitution = TaxSubstitutionEnum_BR::None)
    {
        TaxOnItem   taxOnItem;
        TaxTable    taxTable;

        select firstOnly taxOnItem
                where taxOnItem.TaxItemGroup == _taxItemGroup
            exists join taxTable
                where taxTable.TaxCode == taxOnItem.TaxCode
                    && taxTable.TaxSubstitution_BR == _taxSubstitution
                    && taxTable.TaxType_BR == _taxType;

        return taxOnItem.showTaxValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRunBaseProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the progress bar.
    /// </summary>
    /// <returns>
    /// The <c>RunbaseProgress</c> object.
    /// </returns>
    protected RunbaseProgress getRunBaseProgress()
    {
        return runBaseProgress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keepAlphaAndNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Keeps the alphanumerics.
    /// </summary>
    /// <param name="_text">
    /// A text.
    /// </param>
    /// <returns>
    /// The text with only the alphanumerics.
    /// </returns>
    protected str keepAlphaAndNumbers(str _text)
    {
        return strkeep(_text, OnlyAlpha);
    }

]]></Source>
			</Method>
			<Method>
				<Name>keepAlphaWithoutAccents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Keeps the alpha numeric without accents of the text.
    /// </summary>
    /// <param name="_text">
    /// A text.
    /// </param>
    /// <returns>
    /// The text with just alpha numeric without accents.
    /// </returns>
    protected str keepAlphaWithoutAccents(str _text)
    {
        return strkeep(_text, OnlyAlphaWithoutAccents);
    }

]]></Source>
			</Method>
			<Method>
				<Name>keepNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Keeps the numbers.
    /// </summary>
    /// <param name="_text">
    /// A text.
    /// </param>
    /// <returns>
    /// The text with only the numbers.
    /// </returns>
    protected str keepNumbers(str _text)
    {
        return strkeep(_text, onlyNumbers);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        runBaseProgress = new RunbaseProgress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new SPED record object.
    /// </summary>
    /// <param name="_recordType">
    /// The type of the record.
    /// </param>
    /// <returns>
    /// A <c>FBSpedRecord_BR</c> object representing the SPED record.
    /// </returns>
    protected FBSpedRecord_BR newRecord(str _recordType)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty(_recordType);

        return spedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunBaseProgress</Name>
				<Source><![CDATA[
    public RunbaseProgress parmRunBaseProgress(RunbaseProgress _runBaseProgress = runBaseProgress)
    {
        runBaseProgress = _runBaseProgress;
        return runBaseProgress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFileContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the file content.
    /// </summary>
    /// <remarks>
    /// Abstract method.
    /// </remarks>
    protected abstract void populateFileContent()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>strRight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the right part of a string with the specified number of characters.
    /// </summary>
    /// <param name="_text">
    ///     The string with the original text.
    /// </param>
    /// <param name="positions">
    ///     Integer that specifies how many characters of the original text will be returned.
    /// </param>
    /// <returns>
    ///     The right part of the original string.
    /// </returns>
    protected str strRight(str _text, int positions)
    {
        return substr(_text, strlen(_text) - (positions-1), positions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the file can be exported.
    /// </summary>
    /// <returns>
    /// true if the file can be exported; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeContentToFile</Name>
				<Source><![CDATA[
    private void writeContentToFile()
    {
        spedFile.writeContent(fbFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the result of generating and exporting file.
    /// </summary>
    /// <returns>True - if file successfully gemerated and exported; false, otherwise.</returns>
    [Hookable(false)]
    public boolean getResult()
    {
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns number of lines in generated file.
    /// </summary>
    /// <returns>Number of lines in generated file.</returns>
    [Hookable(false)]
    public int64 getLinesCount()
    {
        return spedFile ? spedFile.totalRecords() : 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>