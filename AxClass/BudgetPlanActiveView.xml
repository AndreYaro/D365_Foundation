<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanActiveView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Manages the create/update transform activities for the <c>BudgetPlanLineActiveView</c> and <c>BudgetPlanLine</c> records.
/// </summary>
public class BudgetPlanActiveView
{
    BudgetPlanHeader                    currentBudgetPlanHeader;
    BudgetPlanLineActiveView            budgetPlanLineActiveView;
    BudgetPlanLayoutManager             layoutManager;
    BudgetPlanElementOrdinal            ordinal;
    BudgetPlanScenarioRecId             currentScenario;
    DataAreaId                          currentDataAreaId;
    FieldName                           budgetPlanLineFieldName;
    FieldName                           budgetPlanLineActiveViewFieldName;
    CurrencyExchangeHelper              currencyExchangeHelper;
    CurrencyCode                        accountingCurrency;
    CurrencyCode                        reportingCurrency;
    LedgerRecId                         ledgerRecId;
    RoundOff                            currencyPrecision;
    Map                                 scenarioQuantityPrecision = new Map(Types::Int64, Types::Real);
    BudgetPlanCurrencyExchangeHelper    budgetPlanCurrencyExchangeHelper = BudgetPlanCurrencyExchangeHelper::construct();

    const BudgetPlanCurrencyAmount TransactionCurrencyAmount_forConversion = 100;

    public static readonly TableName budgetPlanLineTableName                 = tableStr(BudgetPlanLine);
    public static readonly TableName budgetPlanLineActiveViewTableName       = tableStr(BudgetPlanLineActiveView);
    public static readonly TableId budgetPlanLineActiveViewTableId           = tableNum(BudgetPlanLineActiveView);
    public static readonly TableName budgetPlanLineActiveViewDetailTableName = tableStr(BudgetPlanLineActiveViewDetail);
    public static readonly TableId budgetPlanLineActiveViewDetailTableId     = tableNum(BudgetPlanLineActiveViewDetail);
    public static readonly FieldName budgetPlanLineActiveViewRecId           = fieldstr(BudgetPlanLineActiveView, RecId);
    public static readonly FieldName budgetPlanLineBudgetClass               = fieldstr(BudgetPlanLine, BudgetClass);
    public static readonly FieldName budgetPlanLineQuantity                  = fieldstr(BudgetPlanLine, Quantity);
    public static readonly FieldName budgetPlanLineTransactionCurrencyAmount = fieldstr(BudgetPlanLine, TransactionCurrencyAmount);
    public static readonly FieldName budgetPlanLineAccountingCurrencyAmount  = fieldStr(BudgetPlanLine, AccountingCurrencyAmount);
    public static readonly FieldName budgetPlanLineReportingCurrencyAmount   = fieldStr(BudgetPlanLine, ReportingCurrencyAmount);
    public static readonly FieldName budgetPlanLineTransactionCurrencyCode   = fieldStr(BudgetPlanLine, TransactionCurrencyCode);
    public static readonly FieldName budgetPlanLineActiveViewHeader          = fieldstr(BudgetPlanLineActiveView, BudgetPlanHeader);
    public static readonly FieldName budgetPlanLineActiveViewAssetId          = fieldstr(BudgetPlanLineActiveView, AssetId);
    public static readonly FieldName budgetPlanLineActiveViewProjectId          = fieldstr(BudgetPlanLineActiveView, ProjectId);
    public static readonly FieldName budgetPlanLineActiveViewSourceDataAreaId   = fieldstr(BudgetPlanLineActiveView, SourceDataAreaId);
    private BudgetInstrumentationLogger budgetInstrumentationLogger;
    private int budgetPlanLineActiveViewRowCount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetPlanActiveViewAndDetailFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates both <c>BudgetPlanLineActiveView</c> and <c>BudgetPlanLineActiveViewDetail</c> records from existing <c>BudgetPlanLine</c> records.
    /// </summary>
    /// <remarks>
    /// The records created in <c>BudgetPlanLineActiveViewDetail</c> are associations between the <c>BudgetPlanLineActiveView</c>
    /// and <c>BudgetPlanLine</c> records.
    /// </remarks>
    public void createBudgetPlanActiveViewAndDetailFromLine()
    {
        BudgetInstrumentationLogger budgetPlanLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetPlanActiveView));
        using (SysInstrumentationActivityContext budgetPlanActiveViewCreateViewContext = budgetPlanLogger.budgetPlan().budgetPlanActiveViewCreateViewContext(currentBudgetPlanHeader.RecId))
        {
            int startTime = budgetPlanActiveViewCreateViewContext.getElapsedMilliseconds();

            this.createBudgetPlanLineActiveView();

            // Adding telemtry to capture time required to delete and recreate BudgetPlanLineActiveView.
            budgetPlanLogger.logCount(budgetPlanActiveViewCreateViewContext, budgetPlanLineActiveViewRowCount);
            budgetPlanLogger.logTimeDuration(budgetPlanActiveViewCreateViewContext, startTime, BudgetInstrumentationConstants::BudgetPlanActiveViewCreateDuration);
            budgetPlanLogger.logAvgTimePerRow(budgetPlanActiveViewCreateViewContext, startTime, budgetPlanLineActiveViewRowCount);

            // Resetting the start time to calculate the next time lapse.
            startTime = budgetPlanActiveViewCreateViewContext.getElapsedMilliseconds();

            this.generateBudgetPlanLineActiveViewDetail();

            // Adding telemetry to capture time required to delete and recreate BudgetPlanLineActiveViewDetail.
            budgetPlanLogger.logTimeDuration(budgetPlanActiveViewCreateViewContext, startTime, BudgetInstrumentationConstants::BudgetPlanActiveViewDetailCreateDuration);

            BudgetPlanLineActiveViewDetailStatus::removeBudgetPlanLineActiveViewDetailStatus(currentBudgetPlanHeader.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanLineActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>BudgetPlanLineActiveView</c> records from existing <c>BudgetPlanLine</c> records.
    /// </summary>
    protected void createBudgetPlanLineActiveView()
    {
        Connection  connection = new Connection();

        try
        {
            // Get the direct SQL statements for inserting records into BudgetPlanLineActiveView
            str sqlActiveViewDelete         = layoutManager.getDeleteActiveView();
            str sqlActiveViewInsert         = layoutManager.getSelectActiveView();

            connection.ttsbegin();

            Statement statement = connection.createStatement();

            BudgetInstrumentationLogger budgetPlanLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetPlanActiveView));

            using (SysInstrumentationActivityContext budgetPlanLineActiveViewContext = budgetPlanLogger.budgetPlan().budgetPlanLineActiveViewContext(currentBudgetPlanHeader.RecId))
            {
                // Delete
                int startTime = budgetPlanLineActiveViewContext.getElapsedMilliseconds();

                new SqlStatementExecutePermission(sqlActiveViewDelete).assert();
                statement.executeUpdateWithParameters(sqlActiveViewDelete, SqlParams::create());
                CodeAccessPermission::revertAssert();

                // Log time taken for delete operation
                budgetPlanLogger.logTimeDuration(budgetPlanLineActiveViewContext, startTime, BudgetInstrumentationConstants::BudgetPlanLineActiveViewDeletionDuration);

                // Insert
                // Resetting start time to capture recreate time.
                startTime = budgetPlanLineActiveViewContext.getElapsedMilliseconds();

                new SqlStatementExecutePermission(sqlActiveViewInsert).assert();
                budgetPlanLineActiveViewRowCount = statement.executeUpdateWithParameters(sqlActiveViewInsert, SqlParams::create());
                CodeAccessPermission::revertAssert();

                statement.close();

                connection.ttscommit();
                connection.finalize();

                // Log time taken for recreate operation
                budgetPlanLogger.logTimeDuration(budgetPlanLineActiveViewContext, startTime, BudgetInstrumentationConstants::BudgetPlanLineActiveViewRecreationDuration);
            }
        }
        catch (Exception::Error)
        {
            connection.ttsabort();
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBudgetPlanLineActiveViewDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>BudgetPlanLineActiveViewDetail</c> records from existing <c>BudgetPlanLineActiveView</c> records.
    /// </summary>
    /// <param name = "_activeViewRecId"> The <c>BudgetPlanLineActiveView</c> record to limit the creates to; optional. </param>
    /// <param name = "_regenerate"> A boolean to indicate if previous <c>BudgetPlanLineActiveViewDetail</c> records should be purged; optional. </param>
    /// <remarks>
    /// The records created in <c>BudgetPlanLineActiveViewDetail</c> are associations between the <c>BudgetPlanLineActiveView</c>
    /// and <c>BudgetPlanLine</c> records.
    /// </remarks>
    protected void generateBudgetPlanLineActiveViewDetail(
        BudgetPlanLineActiveViewRecId _activeViewRecId = 0,
        boolean _regenerate = true)
    {
        BudgetPlanLineActiveViewDetail budgetPlanLineActiveViewDetail;

        BudgetInstrumentationLogger budgetPlanLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetPlanActiveView));
        using (SysInstrumentationActivityContext budgetPlanActiveViewCreateViewContext = budgetPlanLogger.budgetPlan().budgetPlanLineActiveViewDetailContext(currentBudgetPlanHeader.RecId))
        {
            // Delete
            int startTime = budgetPlanActiveViewCreateViewContext.getElapsedMilliseconds();

            if (_regenerate)
            {
                SysDaQueryObject deleteQueryObject = layoutManager.getActiveViewDetailDeleteQueryObject(budgetPlanLineActiveViewDetail, _activeViewRecId);
                SysDaDeleteObject deleteObject = new SysDaDeleteObject(deleteQueryObject);

                SysDaDeleteStatement deleteStatement = new SysDaDeleteStatement();

                deleteStatement.delete(deleteObject);

                // Log time taken for delete operation
                budgetPlanLogger.logTimeDuration(budgetPlanActiveViewCreateViewContext, startTime, BudgetInstrumentationConstants::BudgetPlanLineActiveViewDetailDeletionDuration);

            }

            // Insert
            // Resetting start to capture recreation time.
            startTime = budgetPlanActiveViewCreateViewContext.getElapsedMilliseconds();


            SysDaInsertObject insertObject = layoutManager.getActiveViewDetailInsertQueryObject(budgetPlanLineActiveViewDetail);

            layoutManager.insertActiveViewDetail(budgetPlanLineActiveViewDetail, insertObject, _activeViewRecId);

            // Log time taken for recreate operation
            budgetPlanLogger.logTimeDuration(budgetPlanActiveViewCreateViewContext, startTime, BudgetInstrumentationConstants::BudgetPlanLineActiveViewDetailRecreationDuration);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>BudgetPlanLine</c> or updates existing lines corresponding to the <c>BudgetPlanLineActiveView</c>
    /// and column ordinal.
    /// </summary>
    /// <param name = "_budgetPlanLineActiveView">The <c>BudgetPlanLineActiveView</c> record to use to update or create a <c>BudgetPlanLine</c>.</param>
    /// <param name = "_fieldNum">The field number of the field being edited.</param>
    /// <param name = "_budgetPlanLineFieldName">The name of the field being edited in the <c>BudgetPlanLine</c> table.</param>
    /// <param name = "_isRowElement">true if the method was invoked by row element change; otherwise, false. Optional.</param>
    public void createOrUpdateBudgetPlanLine(
        BudgetPlanLineActiveView _budgetPlanLineActiveView,
        FieldId                  _fieldNum,
        FieldName                _budgetPlanLineFieldName,
        boolean                  _isRowElement = false)
    {
        
        this.initializeForActiveView(_budgetPlanLineActiveView, _fieldNum, _budgetPlanLineFieldName);

        boolean newRecord = budgetPlanLineActiveView.isNewRecord();
        boolean refreshLine;
        boolean calledFromEntity = !FormDataUtil::isFormDataSource(budgetPlanLineActiveView);
        boolean calledFromForm = FormDataUtil::isFormDataSource(budgetPlanLineActiveView);

        if (calledFromForm)
        {
            if (BudgetPlanLineActiveViewDetailStatus::existsByHeaderActiveView(budgetPlanLineActiveView.BudgetPlanHeader, budgetPlanLineActiveView.RecId))
            {
                BudgetPlanActiveView::refreshBudgetPlanLineActiveViewDetail(budgetPlanLineActiveView.BudgetPlanHeader);
            }
        }

        try
        {
            ttsbegin;

            if ((ordinal && BudgetPlanLineActiveViewDetail::existsForActiveViewOrdinal(budgetPlanLineActiveView.RecId, ordinal))
                || (!newRecord && _isRowElement)
                || (!newRecord && budgetPlanLineFieldName == fieldStr(BudgetPlanLine, LedgerDimension)))
            {
                if (calledFromEntity && this.canUseSetBasedUpdate(_budgetPlanLineFieldName))
                {
                    this.setBudgetPlanHeaderNeedsUpdate(NoYes::Yes);

                    // Simply update the BudgetPlanLineActiveView table for now, we'll later update the backing table using set-based operation.
                    this.doPartialUpdateBudgetPlanLineActiveView();
                }
                else
                {
                    this.updateBudgetPlanLine();
                    refreshLine = calledFromForm;
                }
            }
            else if (!_isRowElement)
            {
                this.insertBudgetPlanLineActiveView(newRecord);
                this.createBudgetPlanLine();

                refreshLine = calledFromForm;
                if (!calledFromForm)
                {
                    // Track inserts to update later
                    BudgetPlanLineActiveViewDetailStatus::createBudgetPlanLineActiveViewDetailStatus(
                        budgetPlanLineActiveView.BudgetPlanHeader,
                        budgetPlanLineActiveView.RecId);
                }
            }

            ttscommit;
        }
        catch (Exception::Error)
        {
            ttsabort;
            exceptionTextFallThrough();
        }

        if (refreshLine)
        {
            this.generateBudgetPlanLineActiveViewDetail(budgetPlanLineActiveView.RecId);

            this.refreshBudgetPlanLineActiveView();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseSetBasedUpdate</Name>
				<Source><![CDATA[
    private boolean canUseSetBasedUpdate(FieldName _fieldName)
    {
        boolean canUseSetBasedUpdate;

        switch (_fieldName)
        {
            case fieldstr(BudgetPlanLine, BudgetClass),
                fieldstr(BudgetPlanLine, TransactionCurrencyCode),
                fieldstr(BudgetPlanLine, TransactionCurrencyAmount),
                fieldstr(BudgetPlanLine, Quantity):
                canUseSetBasedUpdate = true;
                break;

            default:
                canUseSetBasedUpdate = false;
        }

        return canUseSetBasedUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetPlanLineActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>BudgetPlanLineActiveView</c> to the database.
    /// </summary>
    protected void updateBudgetPlanLineActiveView()
    {
        if (!FormDataUtil::isFormDataSource(budgetPlanLineActiveView))
        {
            this.doPartialUpdateBudgetPlanLineActiveView();
        }
        else if (budgetPlanLineActiveView.validateWrite())
        {
            budgetPlanLineActiveView.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPartialUpdateBudgetPlanLineActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Partially updates the <c>BudgetPlanLineActiveView</c> record.
    /// </summary>
    protected void doPartialUpdateBudgetPlanLineActiveView()
    {
        if (budgetPlanLineActiveViewFieldName == BudgetPlanningConstants::emptyString)
        {
            return;
        }

        BudgetPlanLineActiveView budgetPlanLineActiveViewDataBase = BudgetPlanLineActiveView::find(budgetPlanLineActiveView.RecId, true);

        budgetPlanLineActiveViewDataBase.setFieldValue(budgetPlanLineActiveViewFieldName, budgetPlanLineActiveView.getFieldValue(budgetPlanLineActiveViewFieldName));

        if (budgetPlanLineActiveViewFieldName == budgetPlanLineActiveViewAssetId || budgetPlanLineActiveViewFieldName == budgetPlanLineActiveViewProjectId)
        {
            budgetPlanLineActiveViewDataBase.setFieldValue(budgetPlanLineActiveViewSourceDataAreaId, budgetPlanLineActiveView.getFieldValue(budgetPlanLineActiveViewSourceDataAreaId));
        }

        budgetPlanLineActiveViewDataBase.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBudgetPlanLineActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commits the <c>BudgetPlanLineActiveView</c> to the database if the record is new.
    /// </summary>
    /// <param name = "_isNewRecord">true if the record is new; otherwise, false.</param>
    protected void insertBudgetPlanLineActiveView(boolean _isNewRecord)
    {
        if (_isNewRecord)
        {
            if (FormDataUtil::isFormDataSource(budgetPlanLineActiveView) && !budgetPlanLineActiveView.validateWrite())
            {
                throw Exception::Error;
            }

            if (FormDataUtil::isFormDataSource(budgetPlanLineActiveView))
            {
                budgetPlanLineActiveView.insert();
            }
            else
            {
                budgetPlanLineActiveView.doInsert();
            }
        }
        else if (!FormDataUtil::isFormDataSource(budgetPlanLineActiveView))
        {
            this.doPartialUpdateBudgetPlanLineActiveView();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>BudgetPlanLine</c> record with the new values.
    /// </summary>
    protected void createBudgetPlanLine()
    {
        BudgetPlanLine         budgetPlanLineInsert;
        BudgetPlanLineItemLine budgetPlanLineItemLine = BudgetPlanLineItemLine::construct();
        BudgetPlanColumnRecId  budgetPlanColumnRecId = BudgetPlanLayoutElement::findByLayoutOrdinal(layoutManager.parmBudgetPlanLayoutRecId(), ordinal).ElementDefinition;

        budgetPlanLineInsert.BudgetPlanHeader = currentBudgetPlanHeader.RecId;

        budgetPlanLineItemLine.parmBudgetPlanLine(budgetPlanLineInsert);
        budgetPlanLineItemLine.parmBudgetPlanColumnRecId(budgetPlanColumnRecId);
        budgetPlanLineItemLine.defaultFromBudgetPlanLineActiveView(budgetPlanLineActiveView);

        try
        {
            ttsbegin;

            budgetPlanLineInsert.LedgerDimension    = budgetPlanLineActiveView.LedgerDimension;
            budgetPlanLineInsert.BudgetPlanHeader   = budgetPlanLineActiveView.BudgetPlanHeader;
            budgetPlanLineInsert.BudgetPlanScenario = layoutManager.getScenarioForOrdinal(ordinal);
            budgetPlanLineInsert.EffectiveDate      = layoutManager.getEffectiveDateStart(ordinal);
            budgetPlanLineInsert.LineReferenceId    = newGuid();
            budgetPlanLineInsert.PositionScenario   = HcmPositionForecastScenario::findByPositionForecastBudgetPlanScenario(
                budgetPlanLineActiveView.Position,
                HcmForecastScenario::findByPlanningProcessAndScenario(
                        currentBudgetPlanHeader.BudgetPlanningProcess,
                        budgetPlanLineInsert.BudgetPlanScenario).RecId).RecId;

            budgetPlanLineInsert.setSourceDataAreaId();

            if (budgetPlanLineFieldName == budgetPlanLineTransactionCurrencyAmount)
            {
                budgetPlanLineInsert.TransactionCurrencyAmount  = budgetPlanLineActiveView.getFieldValue(budgetPlanLineActiveViewFieldName) * this.getSignMultiplier(budgetPlanLineInsert);

                // If TransactionCurrencyCode is in the layout, then that value must be used.
                // If not, a column rule value could have been defaulted and we cannot overwrite this value.
                if (BudgetPlanLayoutHelper::isCurrencyInLayout(layoutManager.parmBudgetPlanLayoutRecId()))
                {
                    budgetPlanLineInsert.TransactionCurrencyCode  = budgetPlanLineActiveView.TransactionCurrencyCode;
                }

                this.calculateAccountingAndReportingCurrencyAmount(budgetPlanLineInsert);
            }
            else
            {
                budgetPlanLineInsert.Quantity       = budgetPlanLineActiveView.getFieldValue(budgetPlanLineActiveViewFieldName);
                budgetPlanLineInsert.EstimateType   = BudgetPlanEstimateType::Quantity;
                budgetPlanLineInsert.defaultField(fieldNum(BudgetPlanLine, UnitOfMeasure));
            }

            if (!budgetPlanLineInsert.validateWrite())
            {
                throw Exception::Error;
            }

            budgetPlanLineInsert.insert();

            ttscommit;
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the specified <c>BudgetPlanLine</c> field with the new values.
    /// </summary>
    protected void updateBudgetPlanLine()
    {
        boolean                         callUpdateSummary;
        BudgetPlanLine                  budgetPlanLineUpdate;
        BudgetPlanLineActiveViewDetail  currentActiveViewBackingLines;
        DataAreaId                      updateDataAreaIdValue;

        switch (budgetPlanLineFieldName)
        {
            case budgetPlanLineTransactionCurrencyAmount:
            case budgetPlanLineQuantity:
                if (budgetPlanLineActiveView.getFieldValue(budgetPlanLineActiveViewFieldName) != budgetPlanLineActiveView.orig().getFieldValue(budgetPlanLineActiveViewFieldName))
                {
                    callUpdateSummary = true;
                }
                break;

            case fieldstr(BudgetPlanLine, BudgetClass):
                int multiplier = this.getSignMultiplier(budgetPlanLineActiveView);

                update_recordset budgetPlanLineUpdate
                    setting BudgetClass                 = budgetPlanLineActiveView.BudgetClass,
                            TransactionCurrencyAmount   = budgetPlanLineUpdate.TransactionCurrencyAmount * multiplier,
                            AccountingCurrencyAmount    = budgetPlanLineUpdate.AccountingCurrencyAmount * multiplier,
                            ReportingCurrencyAmount     = budgetPlanLineUpdate.ReportingCurrencyAmount * multiplier
                    exists join currentActiveViewBackingLines
                        where currentActiveViewBackingLines.ActiveView == budgetPlanLineActiveView.RecId
                            && currentActiveViewBackingLines.Line      == budgetPlanLineUpdate.RecId;
                break;

            case fieldstr(BudgetPlanLine, Comment):
                update_recordset budgetPlanLineUpdate
                    setting Comment = budgetPlanLineActiveView.Comment
                    exists join currentActiveViewBackingLines
                        where currentActiveViewBackingLines.ActiveView == budgetPlanLineActiveView.RecId
                            && currentActiveViewBackingLines.Line      == budgetPlanLineUpdate.RecId;
                break;

            case fieldstr(BudgetPlanLine, IsNewRequest):
                update_recordset budgetPlanLineUpdate
                    setting IsNewRequest = budgetPlanLineActiveView.IsNewRequest
                    exists join currentActiveViewBackingLines
                        where currentActiveViewBackingLines.ActiveView == budgetPlanLineActiveView.RecId
                            && currentActiveViewBackingLines.Line      == budgetPlanLineUpdate.RecId;
                break;

            case fieldstr(BudgetPlanLine, IsRecurring):
                update_recordset budgetPlanLineUpdate
                    setting IsRecurring = budgetPlanLineActiveView.IsRecurring
                    exists join currentActiveViewBackingLines
                        where currentActiveViewBackingLines.ActiveView == budgetPlanLineActiveView.RecId
                            && currentActiveViewBackingLines.Line      == budgetPlanLineUpdate.RecId;
                break;

            case fieldstr(BudgetPlanLine, AssetId):
                updateDataAreaIdValue = (budgetPlanLineActiveView.ProjectId == BudgetPlanningConstants::emptyString && budgetPlanLineActiveView.AssetId == BudgetPlanningConstants::emptyString) ?
                                         BudgetPlanningConstants::emptyString : currentDataAreaId;

                update_recordset budgetPlanLineUpdate
                    setting AssetId = budgetPlanLineActiveView.AssetId,
                            SourceDataAreaId = updateDataAreaIdValue
                    exists join currentActiveViewBackingLines
                        where currentActiveViewBackingLines.ActiveView == budgetPlanLineActiveView.RecId
                            && currentActiveViewBackingLines.Line      == budgetPlanLineUpdate.RecId;
                break;

            case fieldstr(BudgetPlanLine, ProposedAsset):
                update_recordset budgetPlanLineUpdate
                    setting ProposedAsset = budgetPlanLineActiveView.ProposedAsset
                    exists join currentActiveViewBackingLines
                        where currentActiveViewBackingLines.ActiveView  == budgetPlanLineActiveView.RecId
                            && currentActiveViewBackingLines.Line       == budgetPlanLineUpdate.RecId;
                break;

            case fieldstr(BudgetPlanLine, ProjectId):
                updateDataAreaIdValue = (budgetPlanLineActiveView.ProjectId == BudgetPlanningConstants::emptyString && budgetPlanLineActiveView.AssetId == BudgetPlanningConstants::emptyString) ?
                                         BudgetPlanningConstants::emptyString : currentDataAreaId;

                update_recordset budgetPlanLineUpdate
                    setting ProjectId = budgetPlanLineActiveView.ProjectId,
                            SourceDataAreaId = updateDataAreaIdValue
                    exists join currentActiveViewBackingLines
                        where currentActiveViewBackingLines.ActiveView  == budgetPlanLineActiveView.RecId
                            && currentActiveViewBackingLines.Line       == budgetPlanLineUpdate.RecId;
                break;

            case fieldstr(BudgetPlanLine, ProposedProject):
                update_recordset budgetPlanLineUpdate
                    setting ProposedProject = budgetPlanLineActiveView.ProposedProject
                    exists join currentActiveViewBackingLines
                        where currentActiveViewBackingLines.ActiveView == budgetPlanLineActiveView.RecId
                            && currentActiveViewBackingLines.Line      == budgetPlanLineUpdate.RecId;
                break;

            case fieldstr(BudgetPlanLine, Position):
                update_recordset budgetPlanLineUpdate
                    setting Position = budgetPlanLineActiveView.Position
                    exists join currentActiveViewBackingLines
                        where currentActiveViewBackingLines.ActiveView == budgetPlanLineActiveView.RecId
                            && currentActiveViewBackingLines.Line      == budgetPlanLineUpdate.RecId;

                HcmPositionForecastScenario positionForecastScenario;
                HcmForecastScenario         forecastScenario;

                update_recordset budgetPlanLineUpdate
                    setting PositionScenario = positionForecastScenario.RecId
                    join RecId from positionForecastScenario
                        where positionForecastScenario.PositionForecast == budgetPlanLineUpdate.Position
                    exists join forecastScenario
                        where forecastScenario.BudgetPlanningProcess    == currentBudgetPlanHeader.BudgetPlanningProcess
                            && forecastScenario.BudgetPlanScenario      == budgetPlanLineUpdate.BudgetPlanScenario
                            && forecastScenario.RecId                   == positionForecastScenario.ForecastScenario
                    exists join currentActiveViewBackingLines
                        where currentActiveViewBackingLines.ActiveView == budgetPlanLineActiveView.RecId
                            && currentActiveViewBackingLines.Line      == budgetPlanLineUpdate.RecId;
                break;

            case fieldstr(BudgetPlanLine, LedgerDimension):
                update_recordset budgetPlanLineUpdate
                    setting LedgerDimension = budgetPlanLineActiveView.LedgerDimension
                    exists join currentActiveViewBackingLines
                        where currentActiveViewBackingLines.ActiveView == budgetPlanLineActiveView.RecId
                            && currentActiveViewBackingLines.Line      == budgetPlanLineUpdate.RecId;
                break;

            case fieldstr(BudgetPlanLine, TransactionCurrencyCode):
                if (budgetPlanLineActiveView.getFieldValue(budgetPlanLineFieldName) != budgetPlanLineActiveView.orig().getFieldValue(budgetPlanLineFieldName))
                {
                    callUpdateSummary = true;
                }
                break;

            default:
                var eventHandlerResult = new EventHandlerResult();
                this.updateBudgetPlanLineDelegate(budgetPlanLineFieldName, eventHandlerResult);

                if (!eventHandlerResult.hasResult())
                {
                    throw error(strFmt("@Budget:FieldNotSupportedForUpdate", budgetPlanLineFieldName));
                }
        }

        if (callUpdateSummary)
        {
            this.updateSummaryValue();
        }

        this.updateBudgetPlanLineActiveView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBudgetPlanLineActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the values in the <c>BudgetPlanLineActiveView</c> after an update or create event.
    /// </summary>
    protected void refreshBudgetPlanLineActiveView()
    {
        str updateActiveViewSqlString = this.buildUpdateActiveViewLine();

        this.executeDirectSql(updateActiveViewSqlString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateActiveViewLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the updates string to refresh the values in the <c>BudgetPlanLineActiveView</c> buffer after an update or create event.
    /// </summary>
    /// <returns> The update Tsql string. </returns>
    protected str buildUpdateActiveViewLine()
    {
        BudgetPlanLine                  line;
        BudgetPlanLineActiveViewDetail  activeViewDetail;
        BudgetPlanLayoutElement         layoutElement;
        BudgetPlanLayoutRecId           layoutRecId = layoutManager.parmBudgetPlanLayoutRecId();
        BudgetPlanColumn                column;
        str                             updateActiveViewSqlString;
        BudgetPlanLayoutMapping         layoutMapping;
        LanguageId                      currentUserLanguage = currentUserLanguage();

        while select Ordinal, ElementDefinition from layoutElement
            order by Ordinal
            where layoutElement.Layout == layoutRecId
            join layoutMapping
                where layoutMapping.Layout      == layoutElement.Layout
                    && layoutMapping.Ordinal    == layoutElement.Ordinal
                    && layoutMapping.Column     == layoutElement.ElementDefinition
                    && layoutMapping.LanguageId == currentUserLanguage
            exists join column
                where column.RecId == layoutElement.ElementDefinition
        {
            select sum(TransactionCurrencyAmount), sum(Quantity) from line
                where line.BudgetPlanHeader == budgetPlanLineActiveView.BudgetPlanHeader
                exists join activeViewDetail
                    where activeViewDetail.ActiveView   == budgetPlanLineActiveView.RecId
                        && activeViewDetail.Line        == line.RecId
                        && activeViewDetail.Ordinal     == layoutElement.Ordinal;

            updateActiveViewSqlString = updateActiveViewSqlString == BudgetPlanningConstants::emptyString ? strFmt('UPDATE %1 SET', budgetPlanLineActiveViewTableName) : strFmt('%1%2', updateActiveViewSqlString, ', ');

            if (layoutMapping.EstimateType == BudgetPlanEstimateType::Monetary)
            {
                updateActiveViewSqlString += strFmt(' %1 = %2%3',
                    layoutMapping.FieldName,
                    num2str(line.TransactionCurrencyAmount, 0, BudgetPlanActiveView::precisionLength(this.getPrecisionValue()), 1, 0),
                    this.getSignMultiplierString(layoutElement.ElementDefinition));
            }
            else if (layoutMapping.Column)
            {
                updateActiveViewSqlString += strFmt(' %1 = %2', layoutMapping.FieldName,
                    num2str(line.Quantity, 0, BudgetPlanActiveView::precisionLength(this.getPrecisionValue()), 1, 0));
            }
        }

        if (updateActiveViewSqlString != BudgetPlanningConstants::emptyString)
        {
            updateActiveViewSqlString += strFmt(' WHERE %1.%2 = %3 AND %1.%4 = %5',
                budgetPlanLineActiveViewTableName,
                BudgetPlanLayoutManager::getSqlFieldName(budgetPlanLineActiveViewTableName, budgetPlanLineActiveViewRecId),
                budgetPlanLineActiveView.RecId,
                BudgetPlanLayoutManager::getSqlFieldName(budgetPlanLineActiveViewTableName, fieldStr(BudgetPlanLineActiveView, Partition)),
                getCurrentPartitionRecId());
        }

        return updateActiveViewSqlString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSummaryValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>TransactionCurrencyAmount</c> or the <c>Quantity</c> field value in the <c>BudgetPlanLine</c> table.
    /// </summary>
    protected void updateSummaryValue()
    {
        real        updateValueDelta, originalValue, newValue;
        real        precisionAmountQuantity;
        str         amountOrPercentage;

        precisionAmountQuantity =  Currency::find(budgetPlanLineActiveView.TransactionCurrencyCode).RoundingPrecision;

        if (budgetPlanLineActiveViewFieldName == budgetPlanLineTransactionCurrencyCode)
        {
            this.updateBudgetPlanLineWithPercentAllocation(
                amountOrPercentage,
                precisionAmountQuantity,
                true);
        }
        else
        {
            currentScenario         = layoutManager.getScenarioForOrdinal(ordinal);
            newValue                = budgetPlanLineActiveView.getFieldValue(budgetPlanLineActiveViewFieldName);
            originalValue           = budgetPlanLineActiveView.orig().getFieldValue(budgetPlanLineActiveViewFieldName);

            if (originalValue == 0
                && BudgetPlanLineItem::nonZeroLinesExist(currentBudgetPlanHeader.RecId, BudgetPlanScenario::find(this.currentScenario), this.ordinal, budgetPlanLineActiveView.RecId))
            {
                // If the original total is zero due to the backing line values cancelling out each other, get the original total ignoring the sign.
                originalValue = (budgetPlanLineFieldName == budgetPlanLineTransactionCurrencyAmount) ?
                    this.getTotalAllocated(true).TransactionCurrencyAmount :
                    this.getTotalAllocated(true).Quantity;
            }

            SysDictType budgetPlanCurrencyAmountType = new SysDictType(extendedTypeNum(BudgetPlanCurrencyAmount));

            if (originalValue == 0)
            {
                amountOrPercentage = strFmt('%1', num2str(newValue/this.getSummarizedLineCount(), 0, budgetPlanCurrencyAmountType.effectivePrecision(), 1, 0));
            }
            else
            {               
                amountOrPercentage = strFmt('((%1 - %2) * %3) / %2',
                    num2str(newValue, 0, budgetPlanCurrencyAmountType.effectivePrecision(), 1, 0),
                    num2str(originalValue, 0, budgetPlanCurrencyAmountType.effectivePrecision(), 1, 0),
                    BudgetPlanningConstants::PlaceHolder_1);
            }

            // Update each line with the percent allocation amount and then round the amount
            this.updateBudgetPlanLineWithPercentAllocation(
                amountOrPercentage,
                precisionAmountQuantity);

            if (budgetPlanLineFieldName == budgetPlanLineTransactionCurrencyAmount)
            {
                int multiplier = this.getSignMultiplier(budgetPlanLineActiveView);

                updateValueDelta = newValue - this.getTotalAllocated().TransactionCurrencyAmount * multiplier;
                updateValueDelta = updateValueDelta * multiplier;
            }
            else
            {
                updateValueDelta = newValue - this.getTotalAllocated().Quantity;
            }

            // Allocate the remaining amount to the last line record
            if (updateValueDelta != 0)
            {
                this.updateLastBudgetPlanLineWithResidualAmount(updateValueDelta);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrecisionValue</Name>
				<Source><![CDATA[
    protected real getPrecisionValue()
    {
        real precisionAmountQuantity;

        if (budgetPlanLineFieldName == budgetPlanLineTransactionCurrencyAmount)
        {
            precisionAmountQuantity = currencyPrecision ? currencyPrecision : 0.01;
        }
        else
        {
            if (scenarioQuantityPrecision.exists(currentScenario))
            {
                precisionAmountQuantity = scenarioQuantityPrecision.lookup(currentScenario);
            }
            else
            {
                precisionAmountQuantity = UnitOfMeasure::find(BudgetPlanScenario::find(currentScenario).UnitOfMeasure).DecimalPrecision;

                scenarioQuantityPrecision.insert(currentScenario, precisionAmountQuantity);
            }
        }

        return precisionAmountQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetPlanLineWithPercentAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>BudgetPlanLine</c> record values per their percentage contribution.
    /// </summary>
    /// <param name = "_amountOrPercentage"> Contains an amount constant to be assigned, else contains a percentage formula to allocate the delta amount. </param>
    /// <param name = "_precision"> The currency or quantity rounding precision. </param>
    /// <param name = "_isCurrencyUpdated"> The currency or quantity rounding precision. </param>
    protected void updateBudgetPlanLineWithPercentAllocation(
        str     _amountOrPercentage,
        real    _precision,
        boolean _isCurrencyUpdated = false)
    {
        str                             sqlUpdateWithRound;
        BudgetPlanLineActiveViewDetail  budgetPlanLineActiveViewDetail;
        BudgetPlanLine                  budgetPlanLine;

        // Loop through all the BudgetPlanlines associated with the current column being updated and group by line EffectiveDate
        while select EffectiveDate from budgetPlanLine
            group by EffectiveDate
            exists join budgetPlanLineActiveViewDetail
                where budgetPlanLineActiveViewDetail.Line        == budgetPlanLine.RecId
                    && budgetPlanLineActiveViewDetail.ActiveView == budgetPlanLineActiveView.RecId
                    && ((budgetPlanLineActiveViewDetail.Ordinal  == ordinal
                            && !_isCurrencyUpdated)
                        || _isCurrencyUpdated)
        {
            if (!_isCurrencyUpdated)
            {
                sqlUpdateWithRound += this.getSQLUpdateStringForPercentAllocation(_amountOrPercentage, _precision, budgetPlanLine.EffectiveDate);
            }
            else
            {
                sqlUpdateWithRound += this.getSQLUpdateStringForCurrencyUpdate(_precision, budgetPlanLine.EffectiveDate);
            }

            sqlUpdateWithRound += strFmt('FROM %1 ', budgetPlanLineActiveViewDetailTableName);
            sqlUpdateWithRound += strFmt('WHERE %1 = %2.RecId ', fieldStr(BudgetPlanLineActiveViewDetail, Line), budgetPlanLineTableName);
            sqlUpdateWithRound += strFmt('AND %1.%2 = \'%3\' ', budgetPlanLineTableName, fieldStr(BudgetPlanLine, EffectiveDate), DateTimeUtil::toStr(budgetPlanLine.EffectiveDate));
            sqlUpdateWithRound += strFmt('AND %1 = %2 ', fieldStr(BudgetPlanLineActiveViewDetail, ActiveView), budgetPlanLineActiveView.RecId);
            sqlUpdateWithRound += strFmt('AND %1.%2 = %3 ', budgetPlanLineActiveViewDetailTableName, fieldStr(BudgetPlanLineActiveViewDetail, Partition), getCurrentPartitionRecId());

            if (!_isCurrencyUpdated)
            {
                sqlUpdateWithRound += strFmt('AND %1 = %2; ', fieldStr(BudgetPlanLineActiveViewDetail, Ordinal), ordinal);
            }
        }

        this.executeDirectSql(sqlUpdateWithRound);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForBudgetHeaderSetBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the budget plan using set-based operations.
    /// </summary>
    public void updateForBudgetHeaderSetBased()
    {
        BudgetPlanLineUpdateTmp budgetPlanLineUpdateTmp;
        
        ttsbegin;
        
        this.updateCurrencyCodeSetBased();

        this.updateMonetaryQuantityColumn(budgetPlanLineUpdateTmp);

        this.updateLastBudgetPlanLineWithResidualAmountSetBased(budgetPlanLineUpdateTmp);
        this.updateBudgetClassSetBased();
        this.setBudgetPlanHeaderNeedsUpdate(NoYes::No);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMonetaryQuantityColumn</Name>
				<Source><![CDATA[
    private void updateMonetaryQuantityColumn(BudgetPlanLineUpdateTmp _budgetPlanLineUpdateTmp)
    {
        FieldName fieldName;        
        BudgetPlanLayoutMapping layoutMapping;
        BudgetPlanLayoutRecId currentLayoutRecId = layoutManager.parmBudgetPlanLayoutRecId();
        LanguageId currentUserLanguage = currentUserLanguage();

        while select FieldId, FieldName, IsRow, Ordinal, HasDimensionFilter
            from layoutMapping
            order by IsRow desc, HasDimensionFilter desc, Ordinal
            where layoutMapping.Layout == currentLayoutRecId
                && layoutMapping.LanguageId == currentUserLanguage
                && layoutMapping.IsEditable == NoYes::Yes
                && layoutMapping.InWorksheet == NoYes::Yes
                && layoutMapping.IsRow == NoYes::No
                && layoutMapping.Ordinal != 0
        {
            fieldName = layoutMapping.FieldName;
            ordinal = layoutMapping.Ordinal;

            switch (layoutMapping.EstimateType)
            {
                case (BudgetPlanEstimateType::Monetary):
                    budgetPlanLineFieldName = fieldStr(BudgetPlanLine, TransactionCurrencyAmount);
                    break;

                case (BudgetPlanEstimateType::Quantity):
                    budgetPlanLineFieldName = fieldStr(BudgetPlanLine, Quantity);
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
            
            this.updateBudgetPlanLinePercentAllocation(fieldName, BudgetPlanLineUpdateScenarioType::NonZeroTotal);
            this.updateBudgetPlanLinePercentAllocation(fieldName, BudgetPlanLineUpdateScenarioType::ZeroTotalNonZeroLines);
            this.updateBudgetPlanLinePercentAllocation(fieldName, BudgetPlanLineUpdateScenarioType::ZeroTotalAllZeroLines);

            if (budgetPlanLineFieldName == fieldStr(BudgetPlanLine, TransactionCurrencyAmount))
            {
                this.updateBudgetPlanLinePercentAllocation(fieldName, BudgetPlanLineUpdateScenarioType::CurrencyCodeUpdate);
            }

            this.updateLineActiveViewDetailOriginalAmount(layoutMapping);
            this.populateTempTableForResidualAmountUpdate(_budgetPlanLineUpdateTmp);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTempTableForResidualAmountUpdate</Name>
				<Source><![CDATA[
    private void populateTempTableForResidualAmountUpdate(BudgetPlanLineUpdateTmp _budgetPlanLineUpdateTmp)
    {
        BudgetPlanLineActiveViewDetail budgetPlanLineActiveViewDetail;
        BudgetPlanLine budgetPlanLine;

        switch (budgetPlanLineFieldName)
        {
            case fieldStr(BudgetPlanLine, TransactionCurrencyAmount):
                insert_recordset _budgetPlanLineUpdateTmp (BudgetPlanLineRecId, OriginalAmount, BudgetPlanLineSum)
                    select maxof(Line), OriginalAmount from budgetPlanLineActiveViewDetail
                    join sum(TransactionCurrencyAmount) from budgetPlanLine
                    group by budgetPlanLineActiveViewDetail.ActiveView, budgetPlanLineActiveViewDetail.OriginalAmount
                        where budgetPlanLine.RecId == budgetPlanLineActiveViewDetail.Line
                            && budgetPlanLineActiveViewDetail.Ordinal == ordinal
                            && budgetPlanLineActiveViewDetail.Header == currentBudgetPlanHeader.RecId;
                break;

            case fieldStr(BudgetPlanLine, Quantity):
                insert_recordset _budgetPlanLineUpdateTmp (BudgetPlanLineRecId, OriginalAmount, BudgetPlanLineSum)
                    select maxof(Line), OriginalAmount from budgetPlanLineActiveViewDetail
                    join sum(Quantity) from budgetPlanLine
                    group by budgetPlanLineActiveViewDetail.ActiveView, budgetPlanLineActiveViewDetail.OriginalAmount
                        where budgetPlanLine.RecId == budgetPlanLineActiveViewDetail.Line
                            && budgetPlanLineActiveViewDetail.Ordinal == ordinal
                            && budgetPlanLineActiveViewDetail.Header == currentBudgetPlanHeader.RecId;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanHeaderNeedsUpdate</Name>
				<Source><![CDATA[
    private void setBudgetPlanHeaderNeedsUpdate(NoYes _needsUpdate)
    {
        if (currentBudgetPlanHeader.NeedsUpdate != _needsUpdate)
        {
            BudgetPlanHeader budgetPlanHeaderUnMarkForUpdate;

            update_recordset budgetPlanHeaderUnMarkForUpdate
                setting NeedsUpdate = _needsUpdate
                    where budgetPlanHeaderUnMarkForUpdate.RecId == currentBudgetPlanHeader.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineActiveViewDetailOriginalAmount</Name>
				<Source><![CDATA[
    private void updateLineActiveViewDetailOriginalAmount(BudgetPlanLayoutMapping _layoutMapping)
    {
        BudgetPlanLineActiveView lineActiveView;
        BudgetPlanLineActiveViewDetail lineActiveViewDetail;

        update_recordset lineActiveViewDetail
            setting OriginalAmount = lineActiveView.(_layoutMapping.FieldId)
            where lineActiveViewDetail.Ordinal == _layoutMapping.Ordinal
                && lineActiveViewDetail.Header == currentBudgetPlanHeader.RecId
            join lineActiveView
                where lineActiveView.RecId == lineActiveViewDetail.ActiveView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetClassSetBased</Name>
				<Source><![CDATA[
    private void updateBudgetClassSetBased()
    {
        BudgetPlanLine budgetPlanLineUpdate;
        BudgetPlanLineActiveView budgetPlanLineActiveViewLocal;
        BudgetPlanLineActiveViewDetail budgetPlanLineActiveViewDetail;

        update_recordset budgetPlanLineUpdate setting
            BudgetClass = budgetPlanLineActiveViewLocal.BudgetClass,
            TransactionCurrencyAmount = budgetPlanLineUpdate.TransactionCurrencyAmount * BudgetPlanningConstants::negativeOne,
            AccountingCurrencyAmount = budgetPlanLineUpdate.AccountingCurrencyAmount * BudgetPlanningConstants::negativeOne,
            ReportingCurrencyAmount = budgetPlanLineUpdate.ReportingCurrencyAmount * BudgetPlanningConstants::negativeOne
            join RecId from budgetPlanLineActiveViewDetail
                where budgetPlanLineActiveViewDetail.Header == budgetPlanLineUpdate.BudgetPlanHeader
                    && budgetPlanLineActiveViewDetail.Line == budgetPlanLineUpdate.RecId
            join BudgetClass from budgetPlanLineActiveViewLocal
                where budgetPlanLineActiveViewLocal.RecId == budgetPlanLineActiveViewDetail.ActiveView
                    && budgetPlanLineUpdate.BudgetPlanHeader == currentBudgetPlanHeader.RecId
                    && budgetPlanLineUpdate.BudgetClass != budgetPlanLineActiveViewLocal.BudgetClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCurrencyCodeSetBased</Name>
				<Source><![CDATA[
    private void updateCurrencyCodeSetBased()
    {
        BudgetPlanLine budgetPlanLineUpdate;
        BudgetPlanLineActiveView budgetPlanLineActiveViewLocal;
        BudgetPlanLineActiveViewDetail budgetPlanLineActiveViewDetail;

        update_recordset budgetPlanLineUpdate setting
            TransactionCurrencyCode = budgetPlanLineActiveViewLocal.TransactionCurrencyCode
            join RecId from budgetPlanLineActiveViewDetail
                where budgetPlanLineActiveViewDetail.Header == budgetPlanLineUpdate.BudgetPlanHeader
                    && budgetPlanLineActiveViewDetail.Line == budgetPlanLineUpdate.RecId
            join TransactionCurrencyCode from budgetPlanLineActiveViewLocal
                where budgetPlanLineActiveViewLocal.RecId == budgetPlanLineActiveViewDetail.ActiveView
                    && budgetPlanLineUpdate.BudgetPlanHeader == currentBudgetPlanHeader.RecId
                    && budgetPlanLineUpdate.TransactionCurrencyCode != budgetPlanLineActiveViewLocal.TransactionCurrencyCode
                    && budgetPlanLineActiveViewLocal.TransactionCurrencyCode != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalNumberOfLines</Name>
				<Source><![CDATA[
    private int totalNumberOfLines(BudgetPlanLineActiveViewDetail _budgetPlanLineActiveViewDetail, BudgetPlanLineActiveView _budgetPlanLineActiveView)
    {
        SysDaQueryObject queryObject =  new SysDaQueryObject(_budgetPlanLineActiveViewDetail);

        queryObject.projection()
            .addCount(fieldStr(BudgetPlanLineActiveViewDetail, RecId));

        SysDaQueryObject budgetPlanLineActiveViewInnerJoinQuery = new SysDaQueryObject(_budgetPlanLineActiveView);

        // Adding join condition between BudgetPlanLineActiveViewDetail and BudgetPlanLineActiveView
        budgetPlanLineActiveViewInnerJoinQuery.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, ActiveView)),
            new SysDaFieldExpression(_budgetPlanLineActiveView, fieldStr(BudgetPlanLineActiveView, RecId))));

        queryObject.joinClause(SysDaJoinKind::InnerJoin, budgetPlanLineActiveViewInnerJoinQuery);

        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, Header)),
            new SysDaValueExpression(currentBudgetPlanHeader.RecId))
            .and( new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, Ordinal)),
            new SysDaValueExpression(ordinal)))
            .and( new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, OriginalAmount)),
            new SysDaValueExpression(0)));

        queryObject.whereClause(whereClause);

        SysDaFindStatement findStatement = new SysDaFindStatement();
        
        // Find the total amount of BudgetPlanLineActiveViewDetail records for a given BudgetPlanLineActiveView
        findStatement.find(new SysDaFindObject(queryObject));        
        
        return _budgetPlanLineActiveViewDetail.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>absoluteValueSumHelper</Name>
				<Source><![CDATA[
    private real absoluteValueSumHelper(
        BudgetPlanLine _budgetPlanLine, 
        BudgetPlanLineActiveViewDetail _budgetPlanLineActiveViewDetail, 
        BudgetPlanLineActiveView _budgetPlanLineActiveView,
        boolean _isPositiveAmountOrQuantity)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(_budgetPlanLine);

        queryObject.projection()
            .addSum(budgetPlanLineFieldName);

        SysDaQueryObject budgetPlanLineActiveViewDetailInnerJoin = new SysDaQueryObject(_budgetPlanLineActiveViewDetail);

        // Adding join condition between BudgetPlanLineActiveViewDetail and BudgetPlanLine
        budgetPlanLineActiveViewDetailInnerJoin.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, Line)),
            new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, RecId))));            
        
        SysDaQueryObject budgetPlanLineActiveViewInnerJoinQuery = new SysDaQueryObject(_budgetPlanLineActiveView);

        // Adding join condition between BudgetPlanLineActiveViewDetail and BudgetPlanLineActiveView
        budgetPlanLineActiveViewInnerJoinQuery.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, ActiveView)),
            new SysDaFieldExpression(_budgetPlanLineActiveView, fieldStr(BudgetPlanLineActiveView, RecId))));

        budgetPlanLineActiveViewDetailInnerJoin.joinClause(SysDaJoinKind::InnerJoin, budgetPlanLineActiveViewInnerJoinQuery);
        
        queryObject.joinClause(SysDaJoinKind::InnerJoin, budgetPlanLineActiveViewDetailInnerJoin);

        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, Header)),
            new SysDaValueExpression(currentBudgetPlanHeader.RecId))
            .and( new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, Ordinal)),
            new SysDaValueExpression(ordinal)))
            .and( new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, OriginalAmount)),
            new SysDaValueExpression(0)));
        
        if (_isPositiveAmountOrQuantity)
        {
            whereClause = whereClause.and(new SysDaGreaterThanOrEqualsExpression(
                new SysDaFieldExpression(_budgetPlanLine, budgetPlanLineFieldName), new SysDaValueExpression(0)));            
        }
        else
        {
            whereClause = whereClause.and(new SysDaLessThanExpression(
                new SysDaFieldExpression(_budgetPlanLine, budgetPlanLineFieldName), new SysDaValueExpression(0)));
        }

        queryObject.whereClause(whereClause);
        
        SysDaFindStatement findStatement = new SysDaFindStatement();
        
        findStatement.find(new SysDaFindObject(queryObject));
        
        int fieldid = fieldName2Id(tableNum(BudgetPlanLine), budgetPlanLineFieldName);

        return _budgetPlanLine.(fieldid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>absoluteValueSum</Name>
				<Source><![CDATA[
    private real absoluteValueSum(BudgetPlanLine _budgetPlanLine, 
        BudgetPlanLineActiveViewDetail _budgetPlanActiveViewDetail, 
        BudgetPlanLineActiveView _budgetPlanLineActiveView)
    {
        real positiveSum = this.absoluteValueSumHelper(_budgetPlanLine, _budgetPlanActiveViewDetail, _budgetPlanLineActiveView, true);

        real negativeSum = this.absoluteValueSumHelper(_budgetPlanLine, _budgetPlanActiveViewDetail, _budgetPlanLineActiveView, false);
        
        // Find the sum of the absolute value of all associated budget plan lines
        real absoluteSum = positiveSum + ((-1)* negativeSum);

        return absoluteSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastBudgetPlanLineWithResidualAmountSetBased</Name>
				<Source><![CDATA[
    private void updateLastBudgetPlanLineWithResidualAmountSetBased(BudgetPlanLineUpdateTmp _budgetPlanLineUpdateTmp)
    {
        BudgetPlanLine budgetPlanLine;

        // For all updates that have a residual amount left over, apply that residual amount to the last budget line for the active view
        while select forupdate budgetPlanLine
            join OriginalAmount, BudgetPlanLineSum from _budgetPlanLineUpdateTmp
                where budgetPlanLine.RecId == _budgetPlanLineUpdateTmp.BudgetPlanLineRecId
                    && ((budgetPlanLine.BudgetClass == BudgetClass::Expense
                        && _budgetPlanLineUpdateTmp.OriginalAmount != _budgetPlanLineUpdateTmp.BudgetPlanLineSum)
                    || (budgetPlanLine.BudgetClass == BudgetClass::Revenue
                        && budgetPlanLine.EstimateType != BudgetPlanEstimateType::Quantity
                        && _budgetPlanLineUpdateTmp.OriginalAmount != _budgetPlanLineUpdateTmp.BudgetPlanLineSum * BudgetPlanningConstants::negativeOne))
        {
            if (budgetPlanLine.EstimateType == BudgetPlanEstimateType::Monetary)
            {
                int budgetClassMultiplier = budgetPlanLine.BudgetClass == BudgetClass::Revenue ? BudgetPlanningConstants::negativeOne : BudgetPlanningConstants::positiveOne;
                budgetPlanLine.TransactionCurrencyAmount += (_budgetPlanLineUpdateTmp.OriginalAmount * budgetClassMultiplier) - _budgetPlanLineUpdateTmp.BudgetPlanLineSum;
                this.calculateAccountingAndReportingCurrencyAmount(budgetPlanLine);
            }
            else
            {
                budgetPlanLine.Quantity += _budgetPlanLineUpdateTmp.OriginalAmount - _budgetPlanLineUpdateTmp.BudgetPlanLineSum;
            }

            budgetPlanLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetPlanLinePercentAllocation</Name>
				<Source><![CDATA[
    private void updateBudgetPlanLinePercentAllocation(FieldName _fieldName, BudgetPlanLineUpdateScenarioType _budgetPlanLineUpdateScenarioType)
    {        
        BudgetPlanLineActiveViewDetail budgetPlanLineActiveViewDetail;
        BudgetPlanLine budgetPlanLine;

        SysDaUpdateStatement updateStatement = new SysDaUpdateStatement();

        while select EffectiveDate, TransactionCurrencyCode from budgetPlanLine
            group by EffectiveDate, TransactionCurrencyCode
            exists join budgetPlanLineActiveViewDetail
                where budgetPlanLineActiveViewDetail.Line == budgetPlanLine.RecId
                    && budgetPlanLineActiveViewDetail.Header == currentBudgetPlanHeader.RecId
                    && budgetPlanLineActiveViewDetail.Ordinal == ordinal
        {            
            SysDaUpdateObject updateObject = this.buildUpdateObject(_fieldName, budgetPlanLine.TransactionCurrencyCode, budgetPlanLine.EffectiveDate, _budgetPlanLineUpdateScenarioType);
            
            updateStatement.update(updateObject);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateObject</Name>
				<Source><![CDATA[
    private SysDaUpdateObject buildUpdateObject(        
        FieldName _fieldName, 
        BudgetPlanCurrencyCode _transactionCurrencyCode,
        BudgetPlanLineEffectiveDate _effectiveDate,
        BudgetPlanLineUpdateScenarioType _budgetPlanLineUpdateScenarioType)
    {
        SysDaUpdateObject updateObject;
        BudgetPlanLine budgetPlanLine;
        budgetPlanLineActiveView budgetActiveView;
        BudgetPlanLineActiveViewDetail budgetPlanLineActiveViewDetail;

        if (_transactionCurrencyCode == '')
        {
            _transactionCurrencyCode = Ledger::accountingCurrencyByLedger(BudgetPlanningProcess::find(currentBudgetPlanHeader.BudgetPlanningProcess).Ledger);
        }

        if (_budgetPlanLineUpdateScenarioType == BudgetPlanLineUpdateScenarioType::CurrencyCodeUpdate)
        {
            updateObject = this.getUpdateObjectForCurrencyUpdate(budgetPlanLine, _effectiveDate, _transactionCurrencyCode);
        }
        else
        {
            updateObject = this.getUpdateObjectForPercentAllocation(budgetPlanLineActiveViewDetail, budgetActiveView, budgetPlanLine, _fieldName, _budgetPlanLineUpdateScenarioType, _effectiveDate, _transactionCurrencyCode);
        }

        SysDaQueryObject budgetPlanLineActiveViewDetailQueryObject = new SysDaQueryObject(budgetPlanLineActiveViewDetail);

        // Adding join condition between BudgetPlanActiveViewDetail and BudgetPlanLine
        budgetPlanLineActiveViewDetailQueryObject.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, Line)),
            new SysDaFieldExpression(budgetPlanLine, fieldStr(BudgetPlanLine, RecId))));

        SysDaQueryObject budgetPlanLineActiveViewQueryObject = new SysDaQueryObject(budgetActiveView);

        // Adding join condition between BudgetPlanActiveView and BudgetPlanActiveViewDetail
        budgetPlanLineActiveViewQueryObject.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(budgetActiveView, fieldStr(BudgetPlanLineActiveView, RecId)),
            new SysDaFieldExpression(budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, ActiveView))));

        budgetPlanLineActiveViewDetailQueryObject.joinClause(SysDaJoinKind::InnerJoin, budgetPlanLineActiveViewQueryObject);

        updateObject.joinClause(SysDaJoinKind::InnerJoin, budgetPlanLineActiveViewDetailQueryObject);
        
        SysDaQueryExpression whereClause = this.buildUpdateObjectWhereClause(budgetPlanLine, budgetPlanLineActiveViewDetail, _transactionCurrencyCode, _effectiveDate, _budgetPlanLineUpdateScenarioType);

        updateObject.whereClause(whereClause);

        return updateObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateObjectWhereClause</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildUpdateObjectWhereClause(
        BudgetPlanLine _budgetPlanLine,
        BudgetPlanLineActiveViewDetail _budgetPlanLineActiveViewDetail,
        BudgetPlanCurrencyCode _transactionCurrencyCode,
        BudgetPlanLineEffectiveDate _effectiveDate,
        BudgetPlanLineUpdateScenarioType _budgetPlanLineUpdateScenarioType)
    {    
        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, EffectiveDate)),
            new SysDaValueExpression(_effectiveDate))
            .and( new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(budgetPlanLineActiveViewDetail, Header)),
            new SysDaValueExpression(currentBudgetPlanHeader.RecId)))
            .and( new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, Ordinal)),
            new SysDaValueExpression(ordinal)));

        if (budgetPlanLineFieldName == fieldStr(BudgetPlanLine, TransactionCurrencyAmount))
        {
            whereClause = whereClause.and( new SysDaEqualsExpression(
                new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, TransactionCurrencyCode)),
                new SysDaValueExpression(_transactionCurrencyCode)));
        }

        switch (_budgetPlanLineUpdateScenarioType)
        {
            case BudgetPlanLineUpdateScenarioType::NonZeroTotal:
                whereClause = whereClause.and( new SysDaNotEqualsExpression(
                    new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, OriginalAmount)),
                    new SysDaValueExpression(0)));
              
                break;

            case BudgetPlanLineUpdateScenarioType::ZeroTotalAllZeroLines:
                whereClause = whereClause.and( new SysDaEqualsExpression(
                    new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, OriginalAmount)),
                    new SysDaValueExpression(0)));

                whereClause = whereClause.and( new SysDaEqualsExpression(
                    new SysDaFieldExpression(_budgetPlanLine, budgetPlanLineFieldName),
                    new SysDaValueExpression(0)));

                break;

            case BudgetPlanLineUpdateScenarioType::ZeroTotalNonZeroLines:
                whereClause = whereClause.and( new SysDaEqualsExpression(
                    new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, OriginalAmount)),
                    new SysDaValueExpression(0)));

                whereClause = whereClause.and( new SysDaNotEqualsExpression(
                    new SysDaFieldExpression(_budgetPlanLine, budgetPlanLineFieldName),
                    new SysDaValueExpression(0)));
                
                break;

            case BudgetPlanLineUpdateScenarioType::CurrencyCodeUpdate:
                whereClause = whereClause.and( new SysDaNotEqualsExpression(
                    new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, TransactionCurrencyAmount)),
                    new SysDaValueExpression(0)));
                
                break;
                
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLUpdateStringForPercentAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the SQL statement with the calculation of the amount fields in the <c>BudgetPlanLine</c> to allocate the updated/inserted amount.
    /// </summary>
    /// <param name = "_amountOrPercentage">Contains an amount constant to be assigned, else contains a percentage formula to allocate the delta amount.</param>
    /// <param name = "_precision">The currency or quantity rounding precision.</param>
    /// <param name = "_effectiveDate">The value of the <c>EffectiveDate</c> field.</param>
    /// <param name = "_transactionCurrencyCode">The currency code to use for exchange rate conversion </param>
    /// <returns>A SQL statement with the calculation of the amount fields. </returns>  
    protected str getSQLUpdateStringForPercentAllocation(
        str                         _amountOrPercentage,
        real                        _precision,
        BudgetPlanLineEffectiveDate _effectiveDate,
        BudgetPlanCurrencyCode      _transactionCurrencyCode = budgetPlanLineActiveView.TransactionCurrencyCode)
    {
        str      sqlUpdateWithRound;
        ExchRate accountingCurrencyMultiplierLocal;
        ExchRate reportingCurrencyMultiplierLocal;

        sqlUpdateWithRound += strFmt(
            'UPDATE %1 SET %2 = %2 %3 %4',
            budgetPlanLineTableName,
            budgetPlanLineFieldName,
            BudgetPlanningConstants::PositiveSign,
            BudgetPlanActiveView::roundingAmountSQLGenerator(strFmt(_amountOrPercentage, budgetPlanLineFieldName), _precision));

        if (budgetPlanLineFieldName == budgetPlanLineTransactionCurrencyAmount)
        {
            accountingCurrencyMultiplierLocal = budgetPlanCurrencyExchangeHelper.calculateAccountingCurrencyAmountMultiplier(
                TransactionCurrencyAmount_forConversion,
                _transactionCurrencyCode,
                _effectiveDate);

            reportingCurrencyMultiplierLocal  = budgetPlanCurrencyExchangeHelper.calculateReportingCurrencyAmountMultiplier(
                TransactionCurrencyAmount_forConversion,
                _transactionCurrencyCode,
                _effectiveDate);

            sqlUpdateWithRound += strFmt(
                ', %1 = %1 %2 %3',
                budgetPlanLineAccountingCurrencyAmount,
                BudgetPlanningConstants::PositiveSign,
                BudgetPlanActiveView::roundingAmountSQLGenerator(
                strfmt('%1 * %2', strFmt(_amountOrPercentage, budgetPlanLineTransactionCurrencyAmount), num2str(accountingCurrencyMultiplierLocal, 0, 16, 1, 0)),
                _precision));

            sqlUpdateWithRound += strFmt(
                ', %1 = %1 %2 %3 ',
                budgetPlanLineReportingCurrencyAmount,
                BudgetPlanningConstants::PositiveSign,
                BudgetPlanActiveView::roundingAmountSQLGenerator(
                strfmt('%1 * %2', strFmt(_amountOrPercentage, budgetPlanLineTransactionCurrencyAmount), num2str(reportingCurrencyMultiplierLocal, 0, 16, 1, 0)),
                _precision));
        }

        return sqlUpdateWithRound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateObjectForPercentAllocation</Name>
				<Source><![CDATA[
    private SysDaUpdateObject getUpdateObjectForPercentAllocation(
        BudgetPlanLineActiveViewDetail _budgetPlanLineActiveViewDetail,
        budgetPlanLineActiveView _budgetPlanLineActiveView,
        BudgetPlanLine _budgetPlanLine,
        FieldName _fieldName, 
        BudgetPlanLineUpdateScenarioType _budgetPlanLineUpdateScenarioType,
        BudgetPlanLineEffectiveDate _effectiveDate,
        BudgetPlanCurrencyCode _transactionCurrencyCode = budgetPlanLineActiveView.TransactionCurrencyCode)
    {      
        FieldName originalFieldName = fieldStr(BudgetPlanLineActiveViewDetail, OriginalAmount);

        SysDaUpdateObject updateObject = new SysDaUpdateObject(_budgetPlanLine);

        SysDaQueryExpression amountOrPercentage;

        switch (_budgetPlanLineUpdateScenarioType)
        {
            case BudgetPlanLineUpdateScenarioType::NonZeroTotal:

                amountOrPercentage = new SysDaDivideExpression(
                    new SysDaMultiplyExpression(new SysDaMinusExpression(new SysDaFieldExpression(_budgetPlanLineActiveView, _fieldName), new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, originalFieldName)), new SysDaFieldExpression(_budgetPlanLine, budgetPlanLineFieldName)),
                    new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, originalFieldName));

                break;
            
            case BudgetPlanLineUpdateScenarioType::ZeroTotalNonZeroLines:

                amountOrPercentage = new SysDaDivideExpression(
                    new SysDaMultiplyExpression(new SysDaMinusExpression(new SysDaFieldExpression(_budgetPlanLineActiveView, _fieldName), new SysDaValueExpression(this.absoluteValueSum(_budgetPlanLine, _budgetPlanLineActiveViewDetail, _budgetPlanLineActiveView))), new SysDaFieldExpression(_budgetPlanLine, budgetPlanLineFieldName)),
                    new SysDaValueExpression(this.absoluteValueSum(_budgetPlanLine, _budgetPlanLineActiveViewDetail, _budgetPlanLineActiveView)));

                break;
            
            case BudgetPlanLineUpdateScenarioType::ZeroTotalAllZeroLines:

                amountOrPercentage = new SysDaDivideExpression(
                    new SysDaFieldExpression(_budgetPlanLineActiveView, _fieldName), new SysDaValueExpression(this.totalNumberofLines(_budgetPlanLineActiveViewDetail, _budgetPlanLineActiveView)));

                break;
        }

        updateObject.settingClause()
                .add(budgetPlanLineFieldName, 
                    new SysDaPlusExpression(
                        new SysDaFieldExpression(_budgetPlanLine, budgetPlanLineFieldName), amountOrPercentage));        
        
        ExchRate accountingCurrencyMultiplierLocal;
        ExchRate reportingCurrencyMultiplierLocal;

        if (budgetPlanLineFieldName == budgetPlanLineTransactionCurrencyAmount)
        {
            accountingCurrencyMultiplierLocal = budgetPlanCurrencyExchangeHelper.calculateAccountingCurrencyAmountMultiplier(
                TransactionCurrencyAmount_forConversion,
                _transactionCurrencyCode,
                _effectiveDate);

            reportingCurrencyMultiplierLocal = budgetPlanCurrencyExchangeHelper.calculateReportingCurrencyAmountMultiplier(
                TransactionCurrencyAmount_forConversion,
                _transactionCurrencyCode,
                _effectiveDate);

            updateObject.settingClause()
                .add(budgetPlanLineAccountingCurrencyAmount, 
                    new SysDaPlusExpression(
                        new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, AccountingCurrencyAmount)), 
                        new SysDaMultiplyExpression(
                                amountOrPercentage,                                 
                                new SysDaValueExpression(accountingCurrencyMultiplierLocal))))
                .add(budgetPlanLineReportingCurrencyAmount,
                    new SysDaPlusExpression(
                        new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, ReportingCurrencyAmount)),
                        new SysDaMultiplyExpression(
                                amountOrPercentage,
                                new SysDaValueExpression(reportingCurrencyMultiplierLocal))));
        }

        return updateObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLUpdateStringForCurrencyUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the SQL statement with the calculation of the amount fields in the <c>BudgetPlanLine</c> when the currency is updated.
    /// </summary>
    /// <param name = "_precision">The currency rounding precision. </param>
    /// <param name = "_effectiveDate">The value of the <c>EffectiveDate</c> field. </param>
    /// <param name = "_currencyCode">The currency code to use for exchange rate conversion </param>
    /// <returns>A SQL statement with the calculation of the amount fields.</returns>    
    protected str getSQLUpdateStringForCurrencyUpdate(
        real                        _precision,
        BudgetPlanLineEffectiveDate _effectiveDate,
        BudgetPlanCurrencyCode _currencyCode = budgetPlanLineActiveView.TransactionCurrencyCode)
    {
        str      sqlUpdateWithRound;
        ExchRate accountingCurrencyMultiplierLocal;
        ExchRate reportingCurrencyMultiplierLocal;

        sqlUpdateWithRound += strFmt(
            'UPDATE %1 SET %2 = \'%3\' ',
            budgetPlanLineTableName,
            budgetPlanLineTransactionCurrencyCode,
            _currencyCode);

        accountingCurrencyMultiplierLocal = budgetPlanCurrencyExchangeHelper.calculateAccountingCurrencyAmountMultiplier(
            TransactionCurrencyAmount_forConversion,
            _currencyCode,
            _effectiveDate);

        reportingCurrencyMultiplierLocal  = budgetPlanCurrencyExchangeHelper.calculateReportingCurrencyAmountMultiplier(
            TransactionCurrencyAmount_forConversion,
            _currencyCode,
            _effectiveDate);

        sqlUpdateWithRound += strFmt(
            ', %1 = %2',
            budgetPlanLineAccountingCurrencyAmount,
            BudgetPlanActiveView::roundingAmountSQLGenerator(
                strfmt('%1 * %2', budgetPlanLineTransactionCurrencyAmount, num2str(accountingCurrencyMultiplierLocal, 0, 16, 1, 0)),
                _precision));

        sqlUpdateWithRound += strFmt(
            ', %1 = %2',
            budgetPlanLineReportingCurrencyAmount,
            BudgetPlanActiveView::roundingAmountSQLGenerator(
                strfmt('%1 * %2', budgetPlanLineTransactionCurrencyAmount, num2str(reportingCurrencyMultiplierLocal, 0, 16, 1, 0)),
                _precision));

        return sqlUpdateWithRound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateObjectForCurrencyUpdate</Name>
				<Source><![CDATA[
    private SysDaUpdateObject getUpdateObjectForCurrencyUpdate(
        BudgetPlanLine _budgetPlanLine,
        BudgetPlanLineEffectiveDate _effectiveDate,
        BudgetPlanCurrencyCode _currencyCode = budgetPlanLineActiveView.TransactionCurrencyCode)
    {
        ExchRate accountingCurrencyMultiplierLocal;
        ExchRate reportingCurrencyMultiplierLocal;
        
        SysDaUpdateObject updateObject = new SysDaUpdateObject(_budgetPlanLine);

        updateObject.settingClause()
            .add(fieldStr(BudgetPlanLine, TransactionCurrencyCode), new SysDaValueExpression(_currencyCode));

        accountingCurrencyMultiplierLocal = budgetPlanCurrencyExchangeHelper.calculateAccountingCurrencyAmountMultiplier(
            TransactionCurrencyAmount_forConversion,
            _currencyCode,
            _effectiveDate);

        reportingCurrencyMultiplierLocal = budgetPlanCurrencyExchangeHelper.calculateReportingCurrencyAmountMultiplier(
            TransactionCurrencyAmount_forConversion,
            _currencyCode,
            _effectiveDate);
        
        updateObject.settingClause()
            .add(budgetPlanLineAccountingCurrencyAmount, 
                new SysDaMultiplyExpression(
                    new SysDaFieldExpression(_budgetPlanLine, fieldstr(BudgetPlanLine, TransactionCurrencyAmount)), 
                    new SysDaValueExpression(accountingCurrencyMultiplierLocal)))
            .add(budgetPlanLineReportingCurrencyAmount, 
                new SysDaMultiplyExpression(
                    new SysDaFieldExpression(_budgetplanline, fieldStr(BudgetPlanLine, TransactionCurrencyAmount)), 
                    new SysDaValueExpression(reportingCurrencyMultiplierLocal)));

        return updateObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSignMultiplierString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sign multiplier string.
    /// </summary>
    /// <param name = "_columnRecId"> The <c>BudgetPlanColumn</c> record ID to lookup the cached multiplier. </param>
    /// <param name = "_lineOrActiveView"> The <c>BudgetPlanLine</c> or <c>BudgetPlanLineActiveView</c> record buffer to lookup the row value of <c>BudgetClass</c>. </param>
    /// <returns> The string multiplier to use. </returns>
    protected str getSignMultiplierString(BudgetPlanColumnRecId _columnRecId = 0, Common _lineOrActiveView = budgetPlanLineActiveView)
    {
        str multiplier = BudgetPlanningConstants::emptyString;

        if (layoutManager.parmApplyNegativeMultiplierForLine())
        {
            BudgetClass currentBudgetClass = _lineOrActiveView.getFieldValue(budgetPlanLineBudgetClass);
            BudgetClass originalBudgetClass = _lineOrActiveView.orig().getFieldValue(budgetPlanLineBudgetClass);

            multiplier = (currentBudgetClass == BudgetClass::Revenue || originalBudgetClass != currentBudgetClass)
                            ? BudgetPlanningConstants::negativeMultiplier : multiplier;
        }
        else if (!_columnRecId)
        {
            multiplier = layoutManager.getColumnMultiplierForOrdinal(ordinal);
        }
        else
        {
            multiplier = layoutManager.getColumnMultiplier(_columnRecId);
        }

        return multiplier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSignMultiplier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sign multiplier.
    /// </summary>
    /// <param name = "_lineOrActiveView"> The <c>BudgetPlanLine</c> or <c>BudgetPlanLineActiveView</c> record buffer to lookup the row value of <c>BudgetClass</c>. </param>
    /// <returns> A positive one or a negative one for a multiplier. </returns>
    protected int getSignMultiplier(Common _lineOrActiveView)
    {
        return this.getSignMultiplierString(0, _lineOrActiveView) == BudgetPlanningConstants::negativeMultiplier
                    ? BudgetPlanningConstants::negativeOne : BudgetPlanningConstants::positiveOne;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundingAmountSQLGenerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the SQL script to the equivalent of X++ rounding for the currency amounts.
    /// </summary>
    /// <param name = "_planCurrencyAmount">
    /// The value of the amount field.
    /// </param>
    /// <param name = "_precision">
    /// The value of the currency precision.
    /// </param>
    /// <returns>
    /// SQL scripts for the amount rounding that is equivalent to the x++.
    /// </returns>
    public static str roundingAmountSQLGenerator(str _planCurrencyAmount, real _precision)
    {
        if (!_precision)
        {
            _precision = 0.01;
        }

        int  precisionLength  = BudgetPlanActiveView::precisionLength(_precision);
        str  sqlRoundedAmount = strFmt('ROUND(%1, %2)', _planCurrencyAmount, precisionLength);
        str  remainder        = strFmt('(%1 % %2)', sqlRoundedAmount, any2Str(_precision));
        real threshold        = 0.5;

        str returnSQLString  = strFmt(' CASE WHEN (%1 / %2) >= %3 ', remainder, any2Str(_precision), any2Str(threshold));
        returnSQLString      += strFmt('THEN %1 + (%2 - %3) ELSE %1 - %3 END ', sqlRoundedAmount, any2Str(_precision), remainder);

        return returnSQLString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>precisionLength</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the decimal precision value for the currency amounts.
    /// </summary>
    /// <param name = "_precision">
    /// The value of the currency precision.
    /// </param>
    /// <returns>
    /// The number of decimals for the amounts.
    /// </returns>
    public static int precisionLength(real _precision)
    {
        int decimalPrecision  = 2;
        int lengthOfPrecision = strLen(any2Str(_precision));

        if (_precision)
        {
            decimalPrecision = lengthOfPrecision - strScan(any2Str(_precision),'.', 0, lengthOfPrecision);
        }

        return decimalPrecision;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummarizedLineCount</Name>
				<Source><![CDATA[
    protected BudgetPlanLineRecId getSummarizedLineCount()
    {
        BudgetPlanLineActiveViewDetail budgetPlanLineActiveViewDetail;

        select count(Line) from budgetPlanLineActiveViewDetail
            where budgetPlanLineActiveViewDetail.ActiveView == budgetPlanLineActiveView.RecId
                && budgetPlanLineActiveViewDetail.Ordinal   == ordinal;

        return budgetPlanLineActiveViewDetail.Line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAllocated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and quantity for the current backing lines.
    /// </summary>
    /// <param name = "_ignoreSign"> Boolean indicator that ignores the sign on the values and calculates a positive total; optional. </param>
    /// <returns> The <c>BudgetPlanLine</c> buffer containing the totals for the <c>TransactionCurrencyAmount</c> and <c>Quantity</c> values. </returns>
    protected BudgetPlanLine getTotalAllocated(boolean _ignoreSign = false)
    {
        BudgetPlanLine                  budgetPlanLine;
        BudgetPlanLine                  budgetPlanLinePositive;
        BudgetPlanLine                  budgetPlanLineNegative;
        BudgetPlanLineActiveViewDetail  budgetPlanLineActiveViewDetail;

        select sum(TransactionCurrencyAmount), sum(Quantity) from budgetPlanLinePositive
            where (!_ignoreSign || ((budgetPlanLinePositive.TransactionCurrencyAmount > 0 && budgetPlanLinePositive.Quantity == 0)
                                    || (budgetPlanLinePositive.TransactionCurrencyAmount == 0 && budgetPlanLinePositive.Quantity > 0)))
            exists join budgetPlanLineActiveViewDetail
                where budgetPlanLineActiveViewDetail.Line        == budgetPlanLinePositive.RecId
                    && budgetPlanLineActiveViewDetail.ActiveView == budgetPlanLineActiveView.RecId
                    && budgetPlanLineActiveViewDetail.Ordinal    == ordinal;

        budgetPlanLine = budgetPlanLinePositive;

        if (_ignoreSign)
        {
            select sum(TransactionCurrencyAmount), sum(Quantity) from budgetPlanLineNegative
                where (((budgetPlanLineNegative.TransactionCurrencyAmount < 0 && budgetPlanLineNegative.Quantity == 0)
                        || (budgetPlanLineNegative.TransactionCurrencyAmount == 0 && budgetPlanLineNegative.Quantity < 0)))
                exists join budgetPlanLineActiveViewDetail
                    where budgetPlanLineActiveViewDetail.Line        == budgetPlanLineNegative.RecId
                        && budgetPlanLineActiveViewDetail.ActiveView == budgetPlanLineActiveView.RecId
                        && budgetPlanLineActiveViewDetail.Ordinal    == ordinal;

            budgetPlanLine.TransactionCurrencyAmount += budgetPlanLineNegative.TransactionCurrencyAmount * BudgetPlanningConstants::negativeOne;
            budgetPlanLine.Quantity                  += budgetPlanLineNegative.Quantity * BudgetPlanningConstants::negativeOne;
        }

        return budgetPlanLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastBudgetPlanLineWithResidualAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the last <c>BudgetPlanLine</c> with the residual value that couldn't be distributed to other lines.
    /// </summary>
    /// <param name = "_updateValueDelta">The update amount.</param>
    protected void updateLastBudgetPlanLineWithResidualAmount(real _updateValueDelta)
    {
        BudgetPlanLine                  budgetPlanLine;
        BudgetPlanLineActiveViewDetail  budgetPlanLineActiveViewDetail;

        ttsBegin;

        select firstOnly forUpdate budgetPlanLine
            order by RecId desc
            exists join budgetPlanLineActiveViewDetail
                where budgetPlanLineActiveViewDetail.Line        == budgetPlanLine.RecId
                    && budgetPlanLineActiveViewDetail.ActiveView == budgetPlanLineActiveView.RecId
                    && budgetPlanLineActiveViewDetail.Ordinal    == ordinal;

        if (budgetPlanLineFieldName == budgetPlanLineTransactionCurrencyAmount)
        {
            budgetPlanLine.TransactionCurrencyAmount += _updateValueDelta;

            this.calculateAccountingAndReportingCurrencyAmount(budgetPlanLine);
        }
        else
        {
            budgetPlanLine.Quantity += _updateValueDelta;
        }

        budgetPlanLine.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeDirectSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the direct sql string by opening a new database connection.
    /// </summary>
    /// <param name = "_sqlToExecute">The sql string to execute on the server.</param>
    protected void executeDirectSql(str _sqlToExecute)
    {
        if (_sqlToExecute != BudgetPlanningConstants::emptyString)
        {
            Connection connection = new Connection();
            connection.ttsbegin();

            ExecutePermission permission = new ExecutePermission();
            permission.assert();

            Statement statement = connection.createStatement();
            statement.executeUpdateWithParameters(_sqlToExecute, SqlParams::create());
            statement.close();

            CodeAccessPermission::revertAssert();

            connection.ttscommit();
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionNameValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>Name</c> of the dimensions that are part of the layout focus.
    /// </summary>
    /// <param name = "_recordToSetDimensionNames"> The record that needs its dimension names set. </param>
    /// <param name = "_elementIndex"> The index of the element to set the name for; optional. </param>
    public static void setDimensionNameValues(
        Common          _recordToSetDimensionNames,
        ElementIndex    _elementIndex = 0)
    {
        str dimensionName;
        str dimensionValue;

        BudgetPlanLayout            layout = BudgetPlanLayout::find(BudgetPlanHeader::find(_recordToSetDimensionNames.getFieldValue(budgetPlanLineActiveViewHeader)).Layout);
        BudgetPlanLayoutMapping     layoutMapping;
        LanguageId                  currentUserLanguage = currentUserLanguage();

        while select FieldLabel, ElementIndex from layoutMapping
            where layoutMapping.Layout == layout.RecId
                && (!_elementIndex || layoutMapping.ElementIndex == _elementIndex)
                && !layoutMapping.Ordinal
                && layoutMapping.DescriptionFieldName   != BudgetPlanningConstants::emptyString
                && layoutMapping.LanguageId             == currentUserLanguage
        {
            dimensionName  = strFmt(BudgetPlanningConstants::placeHolder1, BudgetPlanningConstants::DimensionNames, layoutMapping.ElementIndex);
            dimensionValue = strFmt(BudgetPlanningConstants::placeHolder1, BudgetPlanningConstants::DimensionValues, layoutMapping.ElementIndex);

            _recordToSetDimensionNames.setFieldValue(dimensionName, DimensionAttributeValue::findByDimensionAttributeAndValue(
                DimensionAttribute::findByLocalizedName(
                    BudgetPlanLayoutMapping::findByLayoutFieldNum(
                        layout.RecId,
                        fieldName2Id(budgetPlanLineActiveViewTableId, dimensionValue)).FieldLabel),
                _recordToSetDimensionNames.getFieldValue(dimensionValue)).getName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes variables for a specific <c>BudgetPlanLineActiveView</c>.
    /// </summary>
    /// <param name = "_budgetPlanLineActiveView">The <c>BudgetPlanLineActiveView</c> record to use to initialize.</param>
    /// <param name = "_fieldNum">The field number of the field being edited.</param>
    /// <param name = "_budgetPlanLineFieldName">The name of the field being edited in the <c>BudgetPlanLine</c> table.</param>
    protected void initializeForActiveView(
        BudgetPlanLineActiveView _budgetPlanLineActiveView,
        FieldId                  _fieldNum,
        FieldName                _budgetPlanLineFieldName)
    {
        if (!_fieldNum)
        {
            throw error(strFmt("@Budget:MissingParameterValue", methodstr(BudgetPlanActiveView, initializeForActiveView),
                                                                extendedTypeId2pname(extendedTypeNum(FieldId))));
        }
        if (_budgetPlanLineFieldName == BudgetPlanningConstants::emptyString)
        {
            throw error(strFmt("@Budget:MissingParameterValue", methodstr(BudgetPlanActiveView, initializeForActiveView),
                                                                extendedTypeId2pname(extendedTypeNum(FieldName))));
        }

        BudgetPlanLayoutMapping mapping = BudgetPlanLayoutMapping::findByLayoutFieldNum(layoutManager.parmBudgetPlanLayoutRecId(), _fieldNum);

        ordinal                             = mapping.Ordinal;
        budgetPlanLineActiveView            = _budgetPlanLineActiveView;
        budgetPlanLineFieldName             = _budgetPlanLineFieldName;
        budgetPlanLineActiveViewFieldName   = mapping.FieldName;

        if (!budgetPlanLineActiveView.TransactionCurrencyCode)
        {
            budgetPlanLineActiveView.TransactionCurrencyCode = currentBudgetPlanHeader.Currency;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // Force the use of other parameterized constructor
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLayoutManager</Name>
				<Source><![CDATA[
    public BudgetPlanLayoutManager parmLayoutManager(BudgetPlanLayoutManager _layoutManager = layoutManager)
    {
        layoutManager = _layoutManager;
        return layoutManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanActiveView construct()
    {
        return new BudgetPlanActiveView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes commonly used class wide parameters.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId"> The <c>BudgetPlanHeader</c> record to use to generate the internal parameter values. </param>
    public void initialize(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        currentBudgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId);
        currencyPrecision       = Currency::find(currentBudgetPlanHeader.Currency).RoundingPrecision;
        currentDataAreaId       = BudgetPlan::getDataAreaId(currentBudgetPlanHeader.RecId);
        layoutManager           = BudgetPlanLayoutManager::newFromBudgetPlanHeader(_budgetPlanHeaderRecId);

        BudgetPlanLayoutHelper::validateLayoutForViewInitialization(currentBudgetPlanHeader);

        budgetPlanCurrencyExchangeHelper.initializeCurrencyExchangeHelper(BudgetPlanningProcess::find(currentBudgetPlanHeader.BudgetPlanningProcess).Ledger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBudgetPlanHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>BudgetPlanActiveView</c> class from the <c>BudgetPlanHeader</c> record reference.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId"> The <c>BudgetPlanHeader</c> record reference to use. </param>
    /// <returns> The new instance of the <c>BudgetPlanActiveView</c> class. </returns>
    public static BudgetPlanActiveView newFromBudgetPlanHeader(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanActiveView budgetPlanActiveView = BudgetPlanActiveView::construct();

        budgetPlanActiveView.initialize(_budgetPlanHeaderRecId);

        return budgetPlanActiveView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>BudgetPlanLine</c> records associated with the current <c>BudgetPlanLineActiveView</c> record.
    /// </summary>
    /// <param name = "_budgetPlanLineRequest"> The budget plan line request with the supporting parameters to aid the process of creating the records. </param>
    public static void createBudgetPlanLines(BudgetPlanLineRequest _budgetPlanLineRequest)
    {
        if (_budgetPlanLineRequest.validate())
        {
            BudgetPlanActiveView budgetPlanActiveView = BudgetPlanActiveView::construct();
            budgetPlanActiveView.initialize(_budgetPlanLineRequest.getBudgetPlanLineActiveView().BudgetPlanHeader);
            budgetPlanActiveView.createOrUpdateBudgetPlanLine(
                _budgetPlanLineRequest.getBudgetPlanLineActiveView(),
                _budgetPlanLineRequest.getBudgetPlanLineFieldNum(),
                _budgetPlanLineRequest.getBudgetPlanLineMappedFieldName(),
                _budgetPlanLineRequest.getIsRowElement());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBudgetPlanLineActiveViewDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recreates the <c>BudgetPlanLineActiveViewDetail</c> records.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId"> The document for which to recreate the records for. </param>
    public static void refreshBudgetPlanLineActiveViewDetail(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanActiveView budgetPlanActiveView = BudgetPlanActiveView::construct();

        budgetPlanActiveView.parmLayoutManager(BudgetPlanLayoutManager::newFromBudgetPlanHeader(_budgetPlanHeaderRecId));

        budgetPlanActiveView.generateBudgetPlanLineActiveViewDetail(0, false);

        BudgetPlanLineActiveViewDetailStatus::removeBudgetPlanLineActiveViewDetailStatus(_budgetPlanHeaderRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAccountingAndReportingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>TransactionCurrencyAmount</c> and <c>ReportingCurrencyAmount</c> field values on <c>BudgetPlanLine</c> record passed in.
    /// </summary>
    /// <param name = "_budgetPlanLine">
    /// The buffer of the <c>BudgetPlanLine</c> table.
    /// </param>
    protected void calculateAccountingAndReportingCurrencyAmount(BudgetPlanLine _budgetPlanLine)
    {
        _budgetPlanLine.ReportingCurrencyAmount = budgetPlanCurrencyExchangeHelper.calculateReportingCurrencyAmount(
            _budgetPlanLine.TransactionCurrencyAmount,
            _budgetPlanLine.TransactionCurrencyCode,
            _budgetPlanLine.EffectiveDate);

        _budgetPlanLine.AccountingCurrencyAmount = budgetPlanCurrencyExchangeHelper.calculateAccountingCurrencyAmount(
            _budgetPlanLine.TransactionCurrencyAmount,
            _budgetPlanLine.TransactionCurrencyCode,
            _budgetPlanLine.EffectiveDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlanLinesFromLineActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetPlanLine</c> record Ids associated with the <c>BudgetPlanLineActiveView</c> records.
    /// </summary>
    /// <param name = "_budgetPlanLineActiveViewRecId">
    /// The record Id of the <c>BudgetPlanLineActiveView</c> table.
    /// </param>
    /// <param name = "_sourceBudgetPlanScenarioRecId">
    /// The source <c>BudgetPlanScenario</c> record ID to retrieve the <c>BudgetPlanLine</c> for.
    /// </param>
    /// <returns>
    /// A set of the <c>BudgetPlanLine</c> record Ids.
    /// </returns>
    public static Set getPlanLinesFromLineActiveView(
        BudgetPlanLineActiveViewRecID   _budgetPlanLineActiveViewRecId,
        BudgetPlanScenarioRecId         _sourceBudgetPlanScenarioRecId)
    {
        if (!_budgetPlanLineActiveViewRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanActiveView, getPlanLinesFromLineActiveView),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanLineActiveViewRecID))));
        }

        if (!_sourceBudgetPlanScenarioRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanActiveView, getPlanLinesFromLineActiveView),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanScenarioRecId))));
        }

        Set                            budgetPlanLinesSet = new Set(typeName2Type(extendedTypeStr(BudgetPlanLineActiveViewRecId)));
        BudgetPlanLine                 budgetPlanLine;
        BudgetPlanLineActiveViewDetail budgetPlanLineActiveViewDetail;

        while select RecId from budgetPlanLine
            where budgetPlanLine.BudgetPlanScenario == _sourceBudgetPlanScenarioRecId
            exists join budgetPlanLineActiveViewDetail
                where budgetPlanLineActiveViewDetail.Line        == budgetPlanLine.RecId
                    && budgetPlanLineActiveViewDetail.ActiveView == _budgetPlanLineActiveViewRecId
        {
            budgetPlanLinesSet.add(budgetPlanLine.RecId);
        }

        return budgetPlanLinesSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetPlanLineDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the specified <c>BudgetPlanLine</c> field with default values.
    /// </summary>
    /// <param name = "_budgetPlanLineFieldName">
    /// The name of a field on the <c>BudgetPlanLine</c> table.
    /// </param>
    /// <param name = "_result">
    /// An <c>EventHandlerResult</c> instance, where subscribers can update the <c>BudgetPlanLine</c> field name.
    /// </param>
    delegate void updateBudgetPlanLineDelegate(FieldName _budgetPlanLineFieldName, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>