<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmWorkerFormExtensionPayrollHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the Payroll module form extension events for the HcmWorker form.
/// </summary>
public final class HcmWorkerFormExtensionPayrollHandler
{
    boolean initialized;
    FormRun element;

    // Extension controls
    FormReferenceGroupControl positionControl;   
    FormReferenceGroupControl earningCodeControl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of this form extension event handler class and registers it with the base form.
    /// </summary>
    /// <param name = "_formRunInstance">An instance of the form being extended.</param>
    public void new(FormRun _formRunInstance)
    {
        initialized = false;
        element = _formRunInstance;

        // Register this extension with the main form
        element.registerExtensionInstance(classStr(HcmWorkerFormExtensionPayrollHandler), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this form extension handler instance
    /// </summary>
    private void init()
    {
        if (initialized)
        {
            return;
        }

        initialized = true;

        // Cache of the extension controls
        positionControl = element.design().controlName(formControlStr(HcmWorker, PayrollWorkerPositionEarningCode_Position)) as FormReferenceGroupControl;
        earningCodeControl = element.design().controlName(formControlStr(HcmWorker, PayrollWorkerPositionEarningCode_EarningCode)) as FormReferenceGroupControl;

        // Register overrides
        positionControl.registerOverrideMethod(methodStr(FormReferenceControl, lookupReference), methodStr(HcmWorkerFormExtensionPayrollHandler, onPositionLookupReference), this);
        positionControl.registerOverrideMethod(methodStr(FormReferenceControl, resolveReference) , methodStr(HcmWorkerFormExtensionPayrollHandler, onPositionResolveReference), this);
        earningCodeControl.registerOverrideMethod(methodStr(FormReferenceControl, lookupReference), methodStr(HcmWorkerFormExtensionPayrollHandler, onEarningCodeLookupReference), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorker_OnInitializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnInitializing event handler for the HcmWorker.ExtensionPayroll form extension which controls the <c>PayrollPositionDetails</c> table's
    /// ability to create and edit records.
    /// </summary>
    /// <param name="_sender">The HcmWorker form.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(HcmWorker), FormEventType::Initializing)]
    public static void HcmWorker_OnInitializing(xFormRun _sender, FormEventArgs _e)
    {
        HcmWorkerFormExtensionPayrollHandler extensionInstance = new HcmWorkerFormExtensionPayrollHandler(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorker_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnInitialized event handler for the HcmWorker.ExtensionPayroll form extension which controls the <c>PayrollPositionDetails</c> table's
    /// ability to create and edit records.
    /// </summary>
    /// <param name="_sender">The HcmWorker form.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(HcmWorker), FormEventType::Initialized)]
    public static void HcmWorker_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        // Initialize the instance of this form extension handler now that the controls exist
        FormRun workerForm = _sender as FormRun;
        HcmWorkerFormExtensionPayrollHandler extensionInstance = workerForm.getExtensionInstance(classStr(HcmWorkerFormExtensionPayrollHandler));
        extensionInstance.init();

        FormTabControl payrollTab = workerForm.design().controlName(formControlStr(HcmWorker, PayrollTab_Payroll));

        FormTabPageControl positionEarningCodeTabPage = workerForm.design().controlName(formControlStr(HcmWorker, PayrollWorkerPositionEarning));

        if (payrollTab && positionEarningCodeTabPage)
        {
            payrollTab.moveControl(positionEarningCodeTabPage.id());
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPositionLookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollWorkerPositionEarningCode_Position control's lookupReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private Common onPositionLookupReference(FormReferenceGroupControl _sender)
    {
        HcmPositionLookup positionLookup = HcmPositionLookup::newAllPositions();
        HcmPosition selectedRecord;
        FormDataSource hcmWorker_ds = _sender.formRun().dataSource(formDataSourceStr(HcmWorker, HcmWorker)) as FormDataSource;
        HcmWorker hcmWorker = hcmWorker_ds.cursor() as HcmWorker;

        selectedRecord = positionLookup.lookupPosition(_sender, hcmWorker.RecId, 0, 0, true, true, true);

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPositionResolveReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollWorkerPositionEarningCode_Position control's resolveReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the resolve reference.</param>
    private Common onPositionResolveReference(FormReferenceGroupControl _sender)
    {
        HcmPositionLookup positionLookup = HcmPositionLookup::newAllPositions();
        FormDataSource hcmWorker_ds = _sender.formRun().dataSource(formDataSourceStr(HcmWorker, HcmWorker)) as FormDataSource;
        HcmWorker hcmWorker = hcmWorker_ds.cursor() as HcmWorker;

        // super
        HcmPosition selectedRecord = _sender.resolveReference();

        if (selectedRecord != null && !positionLookup.validatePosition(selectedRecord.RecId, hcmWorker.RecId, 0, 0, true, true))
        {
            selectedRecord = null;
        }

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEarningCodeLookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollWorkerPositionEarningCode_EarningCode control's lookupReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private Common onEarningCodeLookupReference(FormReferenceGroupControl _sender)
    {
        return PayrollEarningCode::lookupEarningCodeForWorkerPosition(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollWorkerPositionEarningCode_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerPositionEarningCode form data source OnActivated event handler for HcmWorker form extension data source.
    /// </summary>
    /// <param name="_sender">The PayrollWorkerPositionEarningCode data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorker, PayrollWorkerPositionEarningCode), FormDataSourceEventType::Activated)]
    public static void PayrollWorkerPositionEarningCode_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        HcmWorkerFormExtensionPayrollHandler::enableCalculationFrequencyField(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EarningCode_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerPositionEarningCode EarningCode form data object OnModified event handler for the HcmWorker form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmWorker, PayrollWorkerPositionEarningCode, EarningCode), FormDataFieldEventType::Modified)]
    public static void EarningCode_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        PayrollEarningCodeRecId earningCodeRecId = _sender.getValue();
        PayrollEarningCodeDetail earningCodeDetail = PayrollEarningCodeDetail::findByEarningCode(earningCodeRecId);
        FormDataSource payrollEarningCodeDetail_ds = _sender.datasource().formRun().dataSource(formDataSourceStr(HcmWorker, PayrollEarningCodeDetail)) as FormDataSource;
        payrollEarningCodeDetail_ds.cursor().data(earningCodeDetail);
        payrollEarningCodeDetail_ds.rereadReferenceDataSources();

		HcmWorkerFormExtensionPayrollHandler::enableCalculationFrequencyField(_sender.datasource());

        if (PayrollEarningCodeDetail::hasFutureRateBasisChange(earningCodeRecId))
        {
            info("@PayrollProcessing:RateBasisValueChangedInfo");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>MainTab_OnTabChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmWorker MainTab form control OnTabChanged event handler for the HcmWorker form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorker, MainTab), FormControlEventType::TabChanged)]
    public static void MainTab_OnTabChanged(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun hcmWorkerForm = _sender.formRun();
        FormDataSource employment_ds = hcmWorkerForm.dataSource(formDataSourceStr(HcmWorker, HcmEmployment)) as FormDataSource;
        HcmEmployment employment = employment_ds.cursor() as HcmEmployment;
        boolean employedInCurrentCompanyContext = false;

        if (employment.RecId != 0)
        {
            employedInCurrentCompanyContext = true;
        }

        //
        // Set enablement of controls that only requires the worker worker has an employment
        // and user has access to the legal enity context of that employment
        //
        HcmWorkerFormExtensionPayrollHandler::updateControls(hcmWorkerForm, employedInCurrentCompanyContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorker_employmentControlsUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the worker form controls based on the employment type of the worker.
    /// </summary>
    /// <param name="_formElement">The target form for the queries.</param>
    /// <param name="_hasEmploymentInCurrentCompany">True if the employment is in the current company.</param>
    /// <param name="_isEmployeeEmployment">True if the employment is of type Employee.</param>
    [SubscribesTo(formStr(HcmWorker), delegateStr(HcmWorker, employmentControlsUpdating))]
    public static void HcmWorker_employmentControlsUpdating(FormRun _formElement, boolean _hasEmploymentInCurrentCompany, boolean _isEmployeeEmployment)
    {
        utcdatetime asOfDateTime;
        utcdatetime nowDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone());

        DateEffectivenessPaneController dePaneController = _formElement.parmDatePaneController();

        FormDataSource payrollWorkerPositionEarningCode_ds = _formElement.dataSource(formDataSourceStr(HcmWorker, PayrollWorkerPositionEarningCode)) as FormDataSource;
        payrollWorkerPositionEarningCode_ds.validTimeStateAutoQuery(ValidTimeStateAutoQuery::AsOfDate);

        FormDataSource payrollEarningCodeDetail_ds = _formElement.dataSource(formDataSourceStr(HcmWorker, PayrollEarningCodeDetail)) as FormDataSource;
        payrollEarningCodeDetail_ds.validTimeStateAutoQuery(ValidTimeStateAutoQuery::AsOfDate);

        if (dePaneController.parmShowAsOfDate() == DateTimeUtil::date(nowDateTime))
        {
            payrollWorkerPositionEarningCode_ds.query().resetValidTimeStateQueryType();
            payrollEarningCodeDetail_ds.query().resetValidTimeStateQueryType();
        }
        else
        {
            asOfDateTime = DateTimeUtil::newDateTime(dePaneController.parmShowAsOfDate(), Global::timeMax(), DateTimeUtil::getUserPreferredTimeZone());

            // set valid time state using the controller's datetime
            payrollWorkerPositionEarningCode_ds.query().validTimeStateAsOfDateTime(asOfDateTime);
            payrollEarningCodeDetail_ds.query().validTimeStateAsOfDateTime(asOfDateTime);
        }

        //
        // Set enablement of controls that only requires the worker has an employment
        // and user has access to the legal enity context of that employment
        //
        HcmWorkerFormExtensionPayrollHandler::updateControls(_formElement, _hasEmploymentInCurrentCompany);

        HcmWorkerFormExtensionPayrollHandler::updateCountryRegionSpecificControls(_formElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControls</Name>
				<Source><![CDATA[
    private static void updateControls(FormRun _workerForm, boolean _hasEmploymentInCurrentCompany)
    {
        var menuItemButtonEarningControl = _workerForm.design().controlName(formControlStr(HcmWorker, MenuItemButtonEarning)) as FormFunctionButtonControl;
        menuItemButtonEarningControl.enabled(_hasEmploymentInCurrentCompany);

        var menuItemButtonPayControl = _workerForm.design().controlName(formControlStr(HcmWorker, MenuItemButtonPay)) as FormFunctionButtonControl;
        menuItemButtonPayControl.enabled(_hasEmploymentInCurrentCompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCalculationFrequencyField</Name>
				<Source><![CDATA[
    private static void enableCalculationFrequencyField(FormDataSource _payrollWorkerPositionEarningCode_ds)
    {
        SecurityRights securityRights = SecurityRights::construct();
        boolean payrollAccess = securityRights.formControlAccessRight(formStr(HcmWorker), formControlStr(HcmWorker, PayrollWorkerPositionEarning));

        PayrollWorkerPositionEarningCode payrollWorkerPositionEarningCode = _payrollWorkerPositionEarningCode_ds.cursor() as PayrollWorkerPositionEarningCode;
        _payrollWorkerPositionEarningCode_ds.queryBuildDataSource().enabled(payrollAccess);

        if (payrollAccess)
        {
            if (PayrollEarningCode::find(payrollWorkerPositionEarningCode.EarningCode).QuantityUnit == PayrollQuantityUnit::Each)
            {
                _payrollWorkerPositionEarningCode_ds.object(fieldNum(PayrollWorkerPositionEarningCode, CalculationFrequency)).allowEdit(true);
            }
            else
            {
                _payrollWorkerPositionEarningCode_ds.object(fieldNum(PayrollWorkerPositionEarningCode, CalculationFrequency)).allowEdit(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCountryRegionSpecificControls</Name>
				<Source><![CDATA[
    private static void updateCountryRegionSpecificControls(FormRun _formElement)
    {
        FormDataSource hcmWorker_ds = _formElement.dataSource(formDataSourceStr(HcmWorker, HcmWorker)) as FormDataSource;
        HcmWorkerRecId currentWorkerRecId = hcmWorker_ds.cursor().RecId;

        container employmentIsoCodes = HcmWorkerFormExtensionPayrollHandler::getEmploymentIsoCodes(currentWorkerRecId);

        HcmWorkerFormExtensionPayrollHandler::setCountryRegionControlsVisibility(_formElement, employmentIsoCodes);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmploymentIsoCodes</Name>
				<Source><![CDATA[
    private static container getEmploymentIsoCodes(HcmWorkerRecId _workerRecId)
    {
        HcmEmployment employments;
        CompanyInfo companyInfo;
        container employmentIsoCodes;

        utcdatetime minDateTime = DateTimeUtil::minValue();
        utcdatetime maxDateTime = DateTimeUtil::maxValue();

        while select validtimestate (minDateTime, maxDateTime) employments
            group by companyInfo.DataArea
                where employments.Worker == _workerRecId
            join DataArea from companyInfo
                where companyInfo.RecId == employments.LegalEntity
        {
            LogisticsAddressCountryRegionISOCode isoCode = SysCountryRegionCode::countryInfo(companyInfo.DataArea);

            if (isoCode)
            {
                employmentIsoCodes += isoCode;
            }
        }

        return employmentIsoCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCountryRegionControlsVisibility</Name>
				<Source><![CDATA[
    private static void setCountryRegionControlsVisibility(FormRun _formElement, container _employmentIsoCodes)
    {
        FormTabPageControl payrollInfoTabPage = _formElement.design().controlName(formControlStr(HcmWorker, PayrollInfo)) as FormTabPageControl;

        for (int i = 1; i <= payrollInfoTabPage.controlCount(); i++)
        {
            FormControl control = payrollInfoTabPage.controlNum(i);
            container controlCountryRegionCodes = str2con(control.countryRegionCodes());

            // Hide the control if it is country/region specific
            if (conLen(controlCountryRegionCodes) >= 1 && conPeek(controlCountryRegionCodes, 1) != '')
            {
                control.visible(false);
            }

            // Show the country/region specific fields for those that are applicable to the worker
            for (int j = 1; j <= conLen(controlCountryRegionCodes); j++)
            {
                if (conFind(_employmentIsoCodes, conPeek(controlCountryRegionCodes, j)))
                {
                    control.visible(true);
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>