<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCalcExtraCustVendTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rCalcExtraCustVendTransaction
{
    CurrencyTypeBrief_RU currencyTypeBrief;

    CustVendTrans        custVendTrans;

    TransDate            fromDate;
    TransDate            toDate;

    RecordSortedList     recordSortedList;

    Map                  mapResult;      //Keep result of calculating
                                         // Key   -> [RecID, RecID] of transaction
                                         // Value -> LIST of results

    boolean              calculated;
    boolean              initializedMoveNext;
    boolean              endOfData;

    ListEnumerator       enLst;

    Struct               currentStruct;

#define.valuePostingLogType("PostingLogType")
#define.valueAmount("amount")
#define.valueRecID("RecID")
#define.valueVoucher("Voucher")
#define.valueTransDate("TransDate")

#define.emptyStr("")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCustVendTrans</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void addCustVendTrans(CustVendTrans   _custVendTrans)
    {
        ;

        if (_custVendTrans.TableId != custVendTrans.TableId)
            throw error(Error::wrongUseOfFunction(funcname()));

        recordSortedList.ins(_custVendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountByRecID</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Amount amountByRecID(RecID   _firstRecID, RecID   _secondRecID, CustVendTransPostingLogType_RU   _postingLogType)
    {
        CustVendTransPostingLogType_RU  localPostingLogType;

        Amount          amount = 0;
        Struct          struct;

        ListEnumerator  en;
        List            lst;
        container       conKey;

        ;

        conKey = this.createKey(_firstRecID, _secondRecID);

        if (mapResult.exists(conKey))
        {
            lst  = mapResult.lookup(conKey);
            en   = lst.getEnumerator();

            while (en.moveNext())
            {
                struct              = en.current();
                localPostingLogType = struct.value(#valuePostingLogType);

                if (localPostingLogType == _postingLogType)
                    amount += struct.value(#valueAmount);
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void calc(CustVendTrans _firstTrans, CustVendTrans _secondTrans)
    {
        CustVendSettlement settlement        = CustVendTransStatic::newTrans(custVendTrans).custVendSettlement();
        CustVendSettlement settlementReverse = CustVendTransStatic::newTrans(custVendTrans).custVendSettlement();

        Struct             struct = null;
        List               lst    = null;
        container          conKey;

        //------------------------------------------------------------
        void addToList()
        {
            if (struct)
            {
                lst.addEnd(struct);
            }
        }
        //------------------------------------------------------------
        ;

        conKey = this.createKey(_firstTrans.RecId, _secondTrans.RecId);

        if (mapResult.exists(conKey))
        {
            lst = mapResult.lookup(conKey);
        }
        else
        {
            lst = new List(Types::Class);
            mapResult.insert(conKey, lst);
        }

        while select  settlement
            where  settlement.TransRecId       == _firstTrans.RecId  &&
                   settlement.OffsetRecId      == _secondTrans.RecId &&
                   settlement.TransDate        >= fromDate           &&
                   settlement.TransDate        <= toDate             &&
                  (settlement.CanBeReversed    == NoYes::Yes         ||
                   settlement.ReversedRecId_RU != 0)                 &&
                  (settlement.ExchAdjustment   != 0                  ||
                   settlement.PennyDiff        != 0                  ||
                   settlement.UtilizedCashDisc != 0)
        {
            if (settlement.ReversedRecId_RU)
            {
                select firstonly TransDate from settlementReverse
                    where settlementReverse.RecId == settlement.ReversedRecId_RU;

                if ((settlement.ReverseTrans_RU  == NoYes::No && settlementReverse.TransDate <= toDate) ||
                    (settlementReverse.TransDate >= fromDate  && settlementReverse.TransDate <= toDate))
                    continue;
            }

            struct = this.processingAdjustment(settlement);
            addToList();

            struct = this.processingCashDisc(settlement);
            addToList();

            struct = this.processingPennyDifference(settlement);
            addToList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKey</Name>
				<Source><![CDATA[
        private container createKey(RecID _first, RecID _second)
    {
        return [ int642str(_first), int642str(_second) ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStruct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected Struct createStruct(CustVendTransPostingLogType_RU    _postingLogType,
                                  TransDate                         _transDate,
                                  Amount                            _amount,
                                  RecID                             _recID,
                                  Voucher                           _voucher = #emptyStr)
    {
        Struct      struct;

        ;

        struct =  new Struct(Types::Enum,                   #valuePostingLogType,
                             Types::Date,                   #valueTransDate,
                             Types::Real,                   #valueAmount,
                             typeName2Type(extendedTypeStr(recId)),    #valueRecID);

        struct.value(#valuePostingLogType, _postingLogType);
        struct.value(#valueTransDate, _transDate);
        struct.value(#valueAmount, _amount);
        struct.value(#valueRecID, _recID);

        if (_voucher != #emptyStr)
            struct.add(#valueVoucher, _voucher);

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentAmount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Amount currentAmount()
    {
        Amount     amount;

        ;

        if (endOfData)
            throw error(Error::wrongUseOfFunction(funcname()));

        amount = currentStruct.value(#valueAmount);

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPostingLogType</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public CustVendTransPostingLogType_RU  currentPostingLogType()
    {
        CustVendTransPostingLogType_RU     postingLogType;

        ;

        if (endOfData)
            throw error(Error::wrongUseOfFunction(funcname()));

        postingLogType = currentStruct.value(#valuePostingLogType);

        return postingLogType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecID</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RecID currentRecID()
    {
        RecID     recID;

        ;

        if (endOfData)
            throw error(Error::wrongUseOfFunction(funcname()));

        recID = currentStruct.value(#valueRecID);

        return recID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentTransDate</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public TransDate currentTransDate()
    {
        TransDate     transDate;

        ;

        if (endOfData)
            throw error(Error::wrongUseOfFunction(funcname()));

        transDate = currentStruct.value(#valueTransDate);

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentVoucher</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Voucher currentVoucher()
    {
        Voucher     voucher = #emptyStr;

        ;

        if (endOfData)
            throw error(Error::wrongUseOfFunction(funcname()));

        if (currentStruct.exists(#valueVoucher))
            voucher = currentStruct.value(#valueVoucher);

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean moveNext()
    {
        boolean  bRet = false;

        ;

        if (!initializedMoveNext)
            throw error(Error::wrongUseOfFunction(funcname()));

        if (!calculated)
            this.run();

        if (!endOfData)
        {
            if (enLst.moveNext())
            {
                currentStruct = enLst.current();
                bRet          = true;
            }
            else
                endOfData = true;
        }

        return bRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void new(CustVendTrans   _custVendTrans, TransDate _fromDate, TransDate  _toDate, CurrencyTypeBrief_RU _currencyTypeBrief)
    {
    #define.fieldNameRecID("RecID")

        ;

        if ((!_custVendTrans) || (_toDate == dateNull()))
            throw error(Error::wrongUseOfFunction(funcname()));

        custVendTrans       = _custVendTrans;

        recordSortedList    = new RecordSortedList(custVendTrans.TableId);
        recordSortedList.sortOrder(fieldname2id(custVendTrans.TableId, #fieldNameRecID));

        fromDate            = _fromDate;
        toDate              = _toDate;

        currencyTypeBrief   = _currencyTypeBrief;

        mapResult           = new Map(Types::Container, Types::Class);

        calculated          = false;
        initializedMoveNext = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingAdjustment</Name>
				<Source><![CDATA[
        private Struct processingAdjustment(CustVendSettlement _custVendSettlement)
    {
        CustVendTransPostingLog_RU custVendTransPostingLog;
        Struct                     struct = null;
        TransDate                  transDate;
        RefTableId                 refTableId = _custVendSettlement.TableId == tablenum(CustSettlement) ? tablenum(CustTrans) : tablenum(VendTrans);
        ;

        if ((_custVendSettlement.ExchAdjustment != 0) && (currencyTypeBrief == CurrencyTypeBrief_RU::Standard))
        {
            transDate = _custVendSettlement.reverseDate_RU();

            select Voucher, TransDate, PostingLogType, sum(AmountMST) from custVendTransPostingLog
                group by Voucher, TransDate, PostingLogType
                where (((custVendTransPostingLog.TransRecId   == _custVendSettlement.TransRecId)                &&
                        (custVendTransPostingLog.OffSetRecId  == _custVendSettlement.OffsetRecId))              ||
                       ((custVendTransPostingLog.TransRecId   == _custVendSettlement.OffsetRecId)               &&
                        (custVendTransPostingLog.OffSetRecId  == _custVendSettlement.TransRecId)))              &&
                      (custVendTransPostingLog.TransDate      == transDate)                                     &&
                      (custVendTransPostingLog.PostingLogType == CustVendTransPostingLogType_RU::ExchAdjustment ||
                       custVendTransPostingLog.PostingLogType == CustVendTransPostingLogType_RU::ExchAmountDiff ||
                       custVendTransPostingLog.PostingLogType == CustVendTransPostingLogType_RU::AdvanceAdjustment) &&
                       custVendTransPostingLog.RefTableId     == refTableId;

            if (custVendTransPostingLog.AmountMST)
            {
                struct = this.createStruct(custVendTransPostingLog.PostingLogType,
                                           _custVendSettlement.TransDate,
                                           - custVendTransPostingLog.AmountMST,
                                           0,
                                           custVendTransPostingLog.Voucher);
            }
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingCashDisc</Name>
				<Source><![CDATA[
        private Struct processingCashDisc(CustVendSettlement _custVendSettlement)
    {
        CustVendTransPostingLog_RU  custVendTransPostingLog;
        Amount                      amount = 0;

        CustVendTrans               localTrans = custVendTrans.data();
        Struct                      struct = null;
        TransDate                   transDate;

        RefTableId                  refTableId = _custVendSettlement.TableId == tablenum(CustSettlement) ? tablenum(CustTrans) : tablenum(VendTrans);
        ;

        if (_custVendSettlement.UtilizedCashDisc != 0)
        {
            transDate = _custVendSettlement.reverseDate_RU();

            select firstonly RecId, TransRecId, OffSetRecId, Voucher, TransDate, PostingLogType
                from custVendTransPostingLog
                where (((custVendTransPostingLog.TransRecId     == _custVendSettlement.TransRecId)              &&
                        (custVendTransPostingLog.OffSetRecId    == _custVendSettlement.OffsetRecId))            ||
                       ((custVendTransPostingLog.TransRecId     == _custVendSettlement.OffsetRecId)             &&
                        (custVendTransPostingLog.OffSetRecId    == _custVendSettlement.TransRecId)))            &&
                      (custVendTransPostingLog.TransDate        == transDate)                                   &&
                      (custVendTransPostingLog.PostingLogType   == CustVendTransPostingLogType_RU::CashDisc)    &&
                      custVendTransPostingLog.RefTableId        == refTableId;

            if (!custVendTransPostingLog)
                throw error(Error::wrongUseOfFunction(funcname()));

            select RecId, AmountMST, AmountCur
                from  localTrans
                where (localTrans.Voucher    == custVendTransPostingLog.Voucher)   &&
                      (localTrans.TransDate  == custVendTransPostingLog.TransDate) &&
                      (localTrans.AccountNum == custVendTrans.AccountNum);

            if (currencyTypeBrief == CurrencyTypeBrief_RU::Standard)
                amount = localTrans.AmountMST;
            else
                amount = localTrans.AmountCur;

            struct = this.createStruct(custVendTransPostingLog.PostingLogType, _custVendSettlement.TransDate, amount,localTrans.RecId);
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingPennyDifference</Name>
				<Source><![CDATA[
        private Struct processingPennyDifference(CustVendSettlement _custVendSettlement)
    {
        CustVendTrans               localTrans = custVendTrans.data();
        CustVendTransPostingLog_RU  custVendTransPostingLog;
        Amount                      amount = 0;
        Struct                      struct = null;
        TransDate                   transDate;
        RefTableId                  refTableId = _custVendSettlement.TableId == tablenum(CustSettlement) ? tablenum(CustTrans) : tablenum(VendTrans);

        if (_custVendSettlement.PennyDiff != 0)
        {
            transDate = _custVendSettlement.reverseDate_RU();

            select firstonly RecId, TransRecId, OffSetRecId, Voucher, TransDate, PostingLogType
                from custVendTransPostingLog
                where ((custVendTransPostingLog.TransRecId   == _custVendSettlement.TransRecId                   &&
                        custVendTransPostingLog.OffSetRecId  == _custVendSettlement.OffsetRecId)                 ||
                       (custVendTransPostingLog.TransRecId   == _custVendSettlement.OffsetRecId                  &&
                        custVendTransPostingLog.OffSetRecId  == _custVendSettlement.TransRecId))                 &&
                      custVendTransPostingLog.TransDate      == transDate                                        &&
                      custVendTransPostingLog.PostingLogType == CustVendTransPostingLogType_RU::PennyDifference  &&
                      custVendTransPostingLog.RefTableId     == refTableId;

            if (!custVendTransPostingLog)
                throw error(Error::wrongUseOfFunction(funcname()));

            select firstonly RecId, AmountMST, AmountCur
                from  localTrans
                where localTrans.Voucher    == custVendTransPostingLog.Voucher   &&
                      localTrans.TransDate  == custVendTransPostingLog.TransDate &&
                      localTrans.AccountNum == custVendTrans.AccountNum;

            amount = currencyTypeBrief == CurrencyTypeBrief_RU::Standard ? localTrans.AmountMST : localTrans.AmountCur;

            struct = this.createStruct(custVendTransPostingLog.PostingLogType, _custVendSettlement.TransDate, amount, localTrans.RecId);
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void reset(RecID _first, RecID _second)
    {
        List        lst;
        container   conKey;

        ;

        conKey = this.createKey(_first, _second);

        if (!mapResult.exists(conKey))
            throw error(Error::wrongUseOfFunction(funcname()));

        lst                 = mapResult.lookup(conKey);
        enLst               = lst.getEnumerator();
        endOfData           = false;
        initializedMoveNext = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void run()
    {
        CustVendTrans localCustVendTrans = custVendTrans.data();
        boolean       loop = recordSortedList.first(localCustVendTrans);

        while (loop)
        {
            this.calc(custVendTrans, localCustVendTrans);
            this.calc(localCustVendTrans, custVendTrans);

            loop = recordSortedList.next(localCustVendTrans);
        }

        calculated = true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>