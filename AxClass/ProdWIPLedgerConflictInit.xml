<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdWIPLedgerConflictInit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdWIPLedgerConflictInit</c> class initializes data for the <c>ProdWIPLedgerConflict</c>
///    report.
/// </summary>
/// <remarks>
///    This class is responsible for creating subtasks that can be executed asynchronously for generating
///    the data for the report.
/// </remarks>
public class ProdWIPLedgerConflictInit extends InventLedgerConflictInit
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createContract</Name>
				<Source><![CDATA[
    protected InventLedgerConflictContract createContract()
    {
        return new ProdWIPLedgerConflictContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaskList</Name>
				<Source><![CDATA[
    protected List createTaskList()
    {
        List                                list = new list(Types::Class);

        InventCostDateCodeContract dateCodeContract = inventLedgerConflictContract.parmInventCostDateCodeContract();
        date fromDate = dateCodeContract.parmFromDate();
        date toDate = dateCodeContract.parmToDate();

        while (fromDate <= toDate)
        {
            InventLedgerConflictContract inventLedgerConflictContractPerDay = InventLedgerConflictContract::construct();
            inventLedgerConflictContractPerDay.unpack(inventLedgerConflictContract.pack());
            inventLedgerConflictContractPerDay.parmInventCostDateCodeContract().parmFromDate(fromDate);
            inventLedgerConflictContractPerDay.parmInventCostDateCodeContract().parmToDate(fromDate);

            ProdWIPLedgerConflictGeneralLedger prodWIPLedgerConflictGeneralLedger = ProdWIPLedgerConflictGeneralLedger::construct();
            prodWIPLedgerConflictGeneralLedger.parmInventLedgerConflictContract(inventLedgerConflictContractPerDay);

            ProdWIPLedgerConflictInventTrans prodWIPLedgerConflictInventTrans = ProdWIPLedgerConflictInventTrans::construct();
            prodWIPLedgerConflictInventTrans.parmInventLedgerConflictContract(inventLedgerConflictContractPerDay);

            ProdWIPLedgerConflictRouteTrans prodWIPLedgerConflictRouteTrans = ProdWIPLedgerConflictRouteTrans::construct();
            prodWIPLedgerConflictRouteTrans.parmInventLedgerConflictContract(inventLedgerConflictContractPerDay);

            ProdWIPLedgerConflictIndirectTrans prodWIPLedgerConflictIndirectTrans = ProdWIPLedgerConflictIndirectTrans::construct();
            prodWIPLedgerConflictIndirectTrans.parmInventLedgerConflictContract(inventLedgerConflictContractPerDay);

            list.addEnd(prodWIPLedgerConflictGeneralLedger);
            list.addEnd(prodWIPLedgerConflictInventTrans);
            list.addEnd(prodWIPLedgerConflictRouteTrans);
            list.addEnd(prodWIPLedgerConflictIndirectTrans);

            fromDate++;
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ProdWIPLedgerConflictInit construct()
    {
        return new ProdWIPLedgerConflictInit();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>