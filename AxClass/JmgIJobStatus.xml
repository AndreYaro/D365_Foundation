<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgIJobStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgIJobStatus</c> interface defines methods required to control jobs in shop floor.
/// </summary>
public interface JmgIJobStatus
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateStartQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reported started quantity for the production job.
    /// </summary>
    /// <param name="_jobId">
    /// Job Id for which quantity should be calculated.
    /// </param>
    /// <returns>
    /// The reported started quantity for the production job.
    /// </returns>
    public ProductQuantity calculateStartQty(JmgJobId _jobId)
    {  
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStartedQtyByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the started quantity for the production job by a worker.
    /// </summary>
    /// <param name="_jobId">
    /// Job Id for which quantity should be calculated.
    /// </param>
    /// <param name = "_worker"> 
    /// Worker recID. 
    /// </param>
    /// <returns>
    /// The started quantity for the production job by the worker.
    /// </returns>
    public ProductQuantity calculateStartedQtyByWorker(JmgJobId _jobId, JmgWorkerRecId _worker)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePdsCWStartedQtyByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the started catch weight quantity for the production job by a worker.
    /// </summary>
    /// <param name="_jobId">
    /// Job Id for which quantity should be calculated.
    /// </param>
    /// <param name = "_worker">
    /// Worker recID.
    /// </param>
    /// <returns>
    /// The started catch weight quantity for the production job by the worker.
    /// </returns>
    public PdsCWBatchStup calculatePdsCWStartedQtyByWorker(JmgJobId _jobId, JmgWorkerRecId _worker)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGoodQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reported good quantity for the production job.
    /// </summary>
    /// <param name="_jobId">
    /// Job Id for which quantity should be calculated.
    /// </param>
    /// <returns>
    /// The reported good quantity for the production job.
    /// </returns>
    public ProdReportedGood calculateGoodQty(JmgJobId _jobId)   
    { 
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateErrorQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reported error quantity for the production job.
    /// </summary>
    /// <param name="_jobId">
    /// Job Id for which quantity should be calculated.
    /// </param>
    /// <param name="_userErrorSpecification">
    /// Idicates whether to use error specification to calculate error quantity.
    /// </param>
    /// <returns>
    /// The reported error quantity for the production job.
    /// </returns>
    public ProdReportedError calculateErrorQty(JmgJobId _jobId, boolean _userErrorSpecification = true)
    {      
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateErrorQtyPerProdRouteJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reported error quantity for the production route job.
    /// </summary>
    /// <param name="_jobId">
    /// Job Id for which quantity should be calculated.
    /// </param>
    /// <returns>
    /// The reported error quantity for the production route job.
    /// </returns>
    public JmgQtyBad calculateErrorQtyPerProdRouteJob(ProdJobId _jobId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateErrorQtyPerProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reported error quantity for the jmg job.
    /// </summary>
    /// <param name="_prodRoute">
    /// The <c>ProdRoute</c> record for which to retrieve the reported error quantity.
    /// </param>
    /// <returns>
    /// The reported error quantity for the jmg job.
    /// </returns>
    public JmgQtyBad calculateErrorQtyPerProdRoute(ProdRoute _prodRoute)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGoodQtyPerProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reported good quantity on the specified production operation.
    /// </summary>
    /// <param name="_prodRoute">
    /// The <c>ProdRoute</c> record for which to retrieve the reported good quantity.
    /// </param>
    /// <returns>
    ///    The reported good quantity for the specified production operation.
    /// </returns>
    public ProdReportedGood calculateGoodQtyPerProdRoute(ProdRoute _prodRoute)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGoodQtyPerProdRouteJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reported good quantity on the specified production route job.
    /// </summary>
    /// <param name="_jobId">
    /// Job Id for which quantity should be calculated.
    /// </param>
    /// <returns>
    ///    The reported good quantity for the specified production route job.
    /// </returns>
    public ProdReportedGood calculateGoodQtyPerProdRouteJob(ProdJobId _jobId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStartQtyPerProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reported started quantity on the specified production operation.
    /// </summary>
    /// <param name="_prodRoute">
    ///    The <c>ProdRoute</c> record for which to retrieve the reported started quantity.
    /// </param>
    /// <returns>
    ///    The started good quantity for the specified production operation.
    /// </returns>
    public ProductQuantity calculateStartQtyPerProdRoute(ProdRoute _prodRoute)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateErrorQtyToReportAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves error Quantity reported on the Production Order.
    /// </summary>
    /// <param name="_prodJob">
    /// Production Job Type.
    /// </param>
    /// <param name="_jmgErrorSpecification">
    /// Error specification description.
    /// </param>
    /// <returns>
    /// Error Quantity Reported on the Production Order.
    /// </returns>
    /// <remarks>
    /// Only post error quantities on the last report as finished journal.
    /// </remarks>
    public ProdReportedError calculateErrorQtyToReportAsFinished(JmgTermJob_Prod _prodJob, JmgErrorSpecification _jmgErrorSpecification)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the job is reported as finished in Shop Floor Control.
    /// </summary>
    /// <param name="_jobId">
    /// Job id to check if it is reported as finished.
    /// </param>
    /// <returns>
    /// True, if an employee has reported the job as finished; otherwise, false.
    /// </returns>
    public boolean reportedFinish(JmgJobId _jobId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the job is reported as started in Shop Floor Control.
    /// </summary>
    /// <param name="_prodRoute">
    /// Production route to check if it is reported as started.
    /// </param>
    /// <param name="_jobId">
    /// Job id to check if it is reported as started.
    /// </param>
    /// <returns>
    /// True, if an employee has reported the job as started; otherwise, false.
    /// </returns>
    public boolean reportedStarted(ProdRoute _prodRoute, JmgJobId _jobId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedWaiting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the job is reported as waiting in Shop Floor Control.
    /// </summary>
    /// <param name="_prodRoute">
    /// Production route job to check if it is reported as started.
    /// </param>
    /// <param name="_jobId">
    /// Job id to check if it is reported as started.
    /// </param>
    /// <returns>
    /// True, if an employee has reported the job as waiting; otherwise, false.
    /// </returns>
    public boolean reportedWaiting(ProdRouteJob _prodRouteJob, JmgJobId _jobId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReportedErrorQtyAtAndBeforeOpr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds reported error quantities at the specified operation and at previous operations.
    /// </summary>
    /// <param name = "_prodId">
    /// The production Id for which calculation must be done.
    /// </param>
    /// <param name="_oprNum">
    /// The operation number of a job.
    /// </param>
    /// <returns>
    /// Reported error quantities at the specified operation and at previous operations.
    /// </returns>
    public ProdReportedError calculateReportedErrorQtyAtAndBeforeOpr(ProdId _prodId, OprNum _oprNum)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCWReportedErrorQtyAtAndBeforeOpr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds reported CW error quantities at the specified operation and at previous operations.
    /// </summary>
    /// <param name = "_prodId">
    /// The production Id for which calculation must be done.
    /// </param>
    /// <param name="_oprNum">
    /// The operation number of a job.
    /// </param>
    /// <returns>
    /// Reported CW error quantities at the specified operation and at previous operations.
    /// </returns>
    public PdsCWInventQty calculateCWReportedErrorQtyAtAndBeforeOpr(ProdId _prodId, OprNum _oprNum)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReportedErrorQtyBeforeOpr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds reported error quantities at previous operations.
    /// </summary>
    /// <param name = "_prodId">
    /// The production Id for which calculation must be done.
    /// </param>
    /// <param name="_oprNum">
    /// The operation number of a job.
    /// </param>
    /// <returns>
    /// Reported error quantities at previous operations.
    /// </returns>
    public ProdReportedError calculateReportedErrorQtyBeforeOpr(ProdId _prodId, OprNum _oprNum)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>