<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchQuantity_PurchOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactory(DocumentStatus::None)]
[DocumentStatusFactory(DocumentStatus::ConfirmationRequest)]
[DocumentStatusFactory(DocumentStatus::PurchaseOrder)]
public  class       PurchQuantity_PurchOrder
        extends     PurchQuantity
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateInventDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for inventory.
    /// </summary>
    /// <param name = "_purchLine">The purchase order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventDelegate(PurchLine _purchLine, PurchUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    protected container calcQtyInvent(PurchLine     _purchLine,
                                      PurchUpdate   _specQty             = PurchUpdate::All,
                                      InventQty     _qty                 = naReal(),
                                      boolean       _creditRemaining     = false,
                                      boolean       _calcRemaining       = true)
    {
        InventQty           qtyUpdate;
        InventQty           numOfRemainOri;
        InventQty           qtyRemainNew;

        if (!_purchLine.isStocked())
        {
            return [0,0,0];
        }

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchUpdate::ReceiveNow:
                    qtyUpdate = _purchLine.InventReceivedNow;
                    break;

                case PurchUpdate::All:
                    qtyUpdate = _purchLine.QtyOrdered;
                    break;
                
                case PurchUpdate::RegisteredAndServices:

                case PurchUpdate::Recorded:
                    qtyUpdate = InventTransIdSumSingleStatus::qtyRegistered(InventTransOriginPurchLine::findInventTransOriginId(_purchLine.DataAreaId, _purchLine.InventTransId));
                    break;

                case PurchUpdate::PackingSlip:
                    qtyUpdate = InventTransIdSum::newTransOriginId(InventTransOriginPurchLine::findInventTransOriginId(_purchLine.DataAreaId, _purchLine.InventTransId)).physical();
                    break;

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateInventDelegate(_purchLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    break;
            }
        }

        if (_calcRemaining)
        {
            numOfRemainOri = _purchLine.RemainInventPhysical;
            qtyRemainNew   = _purchLine.RemainInventPhysical;
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdatePurchDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for purchase.
    /// </summary>
    /// <param name = "_purchLine">The purchase order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdatePurchDelegate(PurchLine _purchLine, PurchUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyPurch</Name>
				<Source><![CDATA[
    protected container calcQtyPurch(PurchLine      _purchLine,
                                     PurchUpdate    _specQty             = PurchUpdate::All,
                                     PurchQty       _qty                 = naReal(),
                                     boolean        _creditRemaining     = false,
                                     boolean        _calcRemaining       = true)
    {
        PurchQty            qtyUpdate;
        PurchQty            numOfRemainOri;
        PurchQty            qtyRemainNew;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchUpdate::ReceiveNow:
                    qtyUpdate = _purchLine.PurchReceivedNow;
                    break;

                case PurchUpdate::All:
                    if (PurchExcludeCancelledLinesFromTotalsCalculationFlight::instance().isEnabled()
                        && PurchParameters::find().ExcludeCancelledLinesFromTotalsCalculation == NoYes::Yes)
                    {
                        qtyUpdate = _purchLine.calculateRemainingPurchaseQuantity(_purchLine);
                    }
                    else
                    {
                        qtyUpdate = _purchLine.PurchQty;
                    }
                    break;

                case PurchUpdate::RegisteredAndServices:
                    if (!_purchLine.isStocked())
                    {
                        qtyUpdate = _purchLine.RemainPurchPhysical;
                        break;
                    }

                case PurchUpdate::Recorded:
                    qtyUpdate = _purchLine.registeredInPurchUnit();
                    break;

                case PurchUpdate::PackingSlip:
                    qtyUpdate = _purchLine.RemainPurchFinancial;
                    break;

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdatePurchDelegate(_purchLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    break;
            }
        }

        if (_calcRemaining)
        {
            numOfRemainOri = _purchLine.RemainPurchPhysical;

            if (qtyUpdate * _purchLine.PurchQty < 0  &&  !_creditRemaining)
            {
                qtyRemainNew = _purchLine.RemainPurchPhysical;
            }
            else
            {
                qtyRemainNew = _purchLine.RemainPurchPhysical - qtyUpdate;

                if (qtyRemainNew * _purchLine.PurchQty < 0)
                {
                    qtyRemainNew = 0;
                }
            }
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateInventCWDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for catch weight.
    /// </summary>
    /// <param name = "_purchLine">The purchase order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventCWDelegate(PurchLine _purchLine, PurchUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the <c>PdsCWReceiveNow</c>, <c>PdsCWRemainBefore</c> and <c>PdsCWRemainAfter</c> quantities.
    /// </summary>
    /// <param name="_purchLine">
    ///     The <c>PurchLine</c> record used in the calculation.
    /// </param>
    /// <param name="_specQty">
    ///     The quantity qualifier used to determine the quantity; optional.
    /// </param>
    /// <param name="_qty">
    ///     The catch weight quantity update; optional.
    /// </param>
    /// <param name="_creditRemaining">
    ///     A Boolean value that determines whether the remaining quantity should be credited; optional.
    /// </param>
    /// <param name="_calcRemaining">
    ///     A Boolean value that determines whether the remaining quantity should be calculated; optional.
    /// </param>
    /// <returns>
    ///     The calculated values for <c>PdsCWReceiveNow</c>, <c>PdsCWRemainBefore</c> and <c>PdsCWRemainAfter</c>.
    /// </returns>
    protected container pdsCWCalcQtyInvent(
        PurchLine      _purchLine,
        PurchUpdate    _specQty             = PurchUpdate::All,
        PdsCWInventQty  _qty                = naReal(),
        boolean        _creditRemaining     = false,
        boolean        _calcRemaining       = true)
    {
        PdsCWInventQty      qtyUpdate;
        PdsCWInventQty      qtyRemainNew;
        PdsCWInventQty      numOfRemainOri;

        EventHandlerResult result = EventHandlerResult::newSingleResponse();
        this.calculateQtyUpdateInventCWDelegate(_purchLine, _specQty, result);
        if (result.hasResult())
        {
            qtyUpdate = result.result();
        }
        else
        {
            qtyUpdate = _purchLine.PdsCWQty;
        }

        if (_calcRemaining)
        {
            numOfRemainOri = _purchLine.PdsCWRemainInventPhysical;
            qtyRemainNew   = _purchLine.PdsCWRemainInventPhysical;
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>