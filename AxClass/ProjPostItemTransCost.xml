<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemTransCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostItemTransCost extends ProjPost
{
    ProjItemTransCost   projItemTransCost;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costEnterCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have a credit amount for the cost account.
    /// </summary>
    /// <returns>
    /// true if the posting should have a credit amount; otherwise, false.
    /// </returns>
    protected boolean costEnterCredit()
    {
        if (projItemTransCost.projTable().Type == ProjType::Investment || ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            if (this.parmElimination())
            {
                if (this.parmLedgerStatusCost() == ProjLedgerStatus::BalanceSheet) // reverse
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEnterDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have a debit amount for the cost account.
    /// </summary>
    /// <returns>
    /// true if the posting should have a debit amount; otherwise, false.
    /// </returns>
    protected boolean costEnterDebit()
    {
        if (projItemTransCost.projTable().Type == ProjType::Investment || ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            if (this.parmElimination())
            {
                if (this.parmLedgerStatusCost() != ProjLedgerStatus::BalanceSheet) //  not reverse
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValueCUR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost amount for the transaction.
    /// </summary>
    /// <returns>
    /// The cost amount for the transaction.
    /// </returns>
    protected AmountCur costValueCUR()
    {
        if (projTrans.ledgerStatusCost() == ProjLedgerStatus::None)
        {
            return super();
        }

        return projTrans.ledgerCostAmountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionDefaultAccount   ledgerDimension;

        switch (projTrans.ledgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    ledgerDimension = projTrans.statusAccountItemLedgerDimension(_fundingSourceId);
                }
                else
                {
                    ledgerDimension = projTrans.offsetAccountItemLedgerDimension(_fundingSourceId);
                }
                break;

            case ProjLedgerStatus::Operations   :
                ledgerDimension = projTrans.offsetAccountItemLedgerDimension(_fundingSourceId);
                break;
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        switch (projTrans.ledgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                return projTrans.offsetAccountItemLedgerDimension(_fundingSourceId);

            case ProjLedgerStatus::Operations   :
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    return projTrans.statusAccountItemLedgerDimension(_fundingSourceId);
                }
                else
                {
                    return projTrans.offsetAccountItemLedgerDimension(_fundingSourceId);
                }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjOffsetAccountItem</Name>
				<Source><![CDATA[
    private LedgerPostingType getProjOffsetAccountItem()
    {
        if (projTrans.itemId() && InventTable::find(projTrans.itemId()).isStocked())
        {
            return LedgerPostingType::ProjOffsetAccountItem;
        }
        else
        {
            return LedgerPostingType::ProjCost;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer,
                    ProjProposalItem _tProjProposal = null) /*kmy*/
    {
        projItemTransCost   = _buffer;
        projTrans           = ProjTrans::newProjItemTransCost(projItemTransCost);
                                                          //    _tProjProposal); /*kmy*/  C.I.

        this.parmTransIdCost(projTrans.transId());
        this.parmTransIdSales(projTrans.transId());

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type that is associated with posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        if (projTrans.ledgerStatusCost()    == ProjLedgerStatus::BalanceSheet)
        {
            return this.getProjOffsetAccountItem();
        }

        if (projTrans.projLineProperty().ToBeCapitalize)
        {
            return LedgerPostingType::ProjStatusAccountItem;
        }
        else
        {
            return this.getProjOffsetAccountItem();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for project offset cost posting based on the current ledger status of
    /// the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        LedgerPostingType   ledgerPostingType;

        switch (projTrans.ledgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    ledgerPostingType = LedgerPostingType::ProjStatusAccountItem;
                }
                else
                {
                    ledgerPostingType = this.getProjOffsetAccountItem();
                }
                break;

            case ProjLedgerStatus::Operations   :
                ledgerPostingType = this.getProjOffsetAccountItem();
                break;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility in creating a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the method <c>parmUpdateTrans</c> is true.
    /// </remarks>
    public void projTransUpdate()
    {
        boolean mustUpdate = this.mustUpdateProjItemTransCost();

        this.initializeProjItemTransCost();

        if (mustUpdate)
        {
            projItemTransCost.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjItemTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the item cost transaction record of the class instance.
    /// </summary>
    protected void initializeProjItemTransCost()
    {
        projItemTransCost.selectForUpdate(true);

        if (this.parmLedgerStatusCost())
        {
            if (this.parmcheckCreditNoteItem())
            {
                projItemTransCost.LedgerStatusCost         = ProjLedgerStatus::BalanceSheet;
            }
            else if (projTrans.projLineProperty().ToBeCapitalize)
            {
                projItemTransCost.LedgerStatusCost         = this.parmLedgerStatusCost();
            }
            else
            {
                projItemTransCost.LedgerStatusCost         = ProjLedgerStatus::Operations;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateProjItemTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item cost transaction record must be updated.
    /// </summary>
    /// <returns>
    /// true if it must be updated; otherwise, false.
    /// </returns>
    protected boolean mustUpdateProjItemTransCost()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>