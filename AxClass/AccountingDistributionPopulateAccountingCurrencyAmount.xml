<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccountingDistributionPopulateAccountingCurrencyAmount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class will calculate the accounting currency field on the accounting distribution table
/// </summary>
[
    SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice),
    SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ProductReceipt), SourceDocument_ProductReceipt::ProductReceipt)
]
internal final class AccountingDistributionPopulateAccountingCurrencyAmount extends AccDistProcessorExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAndUpdateAccountingDistributionInAccountingCurrency</Name>
				<Source><![CDATA[
    public void createAndUpdateAccountingDistributionInAccountingCurrency(
        AccountingDistribution _accountingDistribution,
        SourceDocumentLineItem _currentSourceDocumentLineItem,
        SourceDocumentLine _currentSourceDocumentLine)
    {
        if (AccountingCurrencyAmountCalculationPerformanceFlight::instance().isEnabled())
        {
            LegalEntityRecId legalEntityRecId = _currentSourceDocumentLineItem.parmLegalEntityRecId();

            CurrencyCode accountingCurrencyCode = Ledger::accountingCurrency(legalEntityRecId);

            if (accountingCurrencyCode != _accountingDistribution.TransactionCurrency && accountingCurrencyCode != '')
            {
                LedgerRecId ledgerRecId = Ledger::findByLegalEntity(legalEntityRecId).RecId;
                CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(ledgerRecId, _currentSourceDocumentLine.ExchangeRateDate);

                currencyExchangeHelper.parmExchangeRate1(_accountingDistribution.getExchangeRate1(_currentSourceDocumentLineItem));
                currencyExchangeHelper.parmExchangeRate2(_accountingDistribution.getExchangeRate2(_currentSourceDocumentLineItem));

                _accountingDistribution.AccountingCurrencyAmount = currencyExchangeHelper.calculateTransactionToAccounting(
                _accountingDistribution.TransactionCurrency,
                _accountingDistribution.TransactionCurrencyAmount,
                true);

                _accountingDistribution.AccountingCurrency = accountingCurrencyCode;
            }
            else
            {
                _accountingDistribution.AccountingCurrency = accountingCurrencyCode;
                _accountingDistribution.AccountingCurrencyAmount = _accountingDistribution.TransactionCurrencyAmount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the accounting distribution processor events.
    /// </summary>
    protected void subscribe()
    {   
        accountingDistributionProcessor.createAndUpdateAccountingDistributionInAccountingCurrency += eventhandler(this.createAndUpdateAccountingDistributionInAccountingCurrency);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>