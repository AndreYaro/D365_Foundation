<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdjustAccounting_PostServiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service controller class for <c>ProjAdjustAccounting_PostService</c>
/// </summary>
public class ProjAdjustAccounting_PostServiceController extends SysOperationServiceController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
	//<summary>
	//   Initializes and creates a new <c>ProjAdjustAccounting_PostServiceController</c> object.
	//   </summary>
	//   <param name = "_mode">
	//   Mode of batch processing.
	//</param>
	//   <returns>
	//   Initialized <c>ProjAdjustAccounting_PostServiceController</c> object.
	//</returns>
    public static ProjAdjustAccounting_PostServiceController construct(SysOperationExecutionMode _mode = SysOperationExecutionMode::Synchronous)
    {
		ProjAdjustAccounting_PostServiceController controller = new ProjAdjustAccounting_PostServiceController(classstr(ProjAdjustAccounting_PostService),
  																										methodStr(ProjAdjustAccounting_PostService, postAccounting),
																												_mode);

		controller.parmDialogCaption("@ProjAdjustment:ProjAdjBatchDescription");
		controller.parmShowDialog(true);
		controller.parmShowProgressForm(false);

		return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tempDbtoRecordSet</Name>
				<Source><![CDATA[
	/// <summary>
    /// Packs all records of <c>ProjTmpAdjustVoucher</c> into a set.
    /// </summary>
    /// <param name = "_projTmpAdjustVoucher">
    /// <c>ProjTmpAdjustVoucher</c> table buffer.
	/// </param>
    /// <returns>Packed set containg table records.</returns>
	public static Set tempDbtoRecordSet(ProjTmpAdjustVoucher _projTmpAdjustVoucher)
    {
        Set recordSet = new Set(Types::Record);
        ProjTmpAdjustVoucher projTmpAdjustVoucher;
        projTmpAdjustVoucher.linkPhysicalTableInstance(_projTmpAdjustVoucher);

		while select projTmpAdjustVoucher
        {
            recordSet.add(projTmpAdjustVoucher);
        }

        return recordSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
	/// <summary>
    /// Entry point of this controller. Runs the accounting adjustment service. 
    /// </summary>
    /// <param name = "_args">
    /// <c>Args</c> object passed by menu item <c>ProjAdjustAccounting_PostService</c>.
	/// </param>
	public static void main(Args _args)
    {
		if (_args.caller().name() != formStr(ProjAdjustAccounting))
		{
  			throw error("@SYS22996"); // Form was called incorrectly
		}

        TransDate adjustmentDate;
        Common projBuffer;

		if(formHasMethod(_args.caller(), identifierStr(getAdjustmentDate)) && formHasMethod(_args.caller(), identifierStr(parmPostedTransBuffer)))
		{
			adjustmentDate = _args.caller().getAdjustmentDate();
			projBuffer = _args.caller().parmPostedTransBuffer();
		}
        
        ProjAdjustAccounting_PostServiceController controller = ProjAdjustAccounting_PostServiceController::construct();
		ProjAdjustAccountingPostDataContract dataContract = controller.getBaseDataContract() as ProjAdjustAccountingPostDataContract;
		dataContract.parmAdjustmentDate(adjustmentDate);
		dataContract.parmProjTransPostedBuffer(projBuffer);

        ProjTmpAdjustVoucher projTmpAdjustVoucher = _args.record() as ProjTmpAdjustVoucher;
        Set recordSet = ProjAdjustAccounting_PostServiceController::tempDbtoRecordSet(projTmpAdjustVoucher);
        dataContract.parmRecordSetContainer(recordSet.pack());
        
        SetEnumerator se = recordSet.getEnumerator();
        se.moveNext();
        ProjTmpAdjustVoucher tmp = se.current();
        DimensionDefault mergedDefDim = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(tmp.LedgerDimension);

        while (se.moveNext())
        {
            tmp = se.current();
            DimensionDefault dim2 = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(tmp.LedgerDimension);
            if (mergedDefDim && dim2 && mergedDefDim != dim2)
            {
                str overlappingSeg = ProjAdjustAccounting_PostServiceController::getOverlappingSegment(mergedDefDim, dim2);
                if (overlappingSeg)
                {
                    throw error(strFmt('@Proj:AdjustAccountingOverlappingSegmentError', overlappingSeg));
                }
            }
            mergedDefDim = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(mergedDefDim, dim2);
        }

        dataContract.parmMergedDimension(mergedDefDim);
        
		controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverlappingSegment</Name>
				<Source><![CDATA[
    private static str getOverlappingSegment(DimensionDefault _dim1, DimensionDefault _dim2)
    {
        str ret = '';
        DimensionAttributeValueSetItem davsi;
        DimensionAttributeValue dav;
        DimensionAttribute da;

        // Key value pair with key as the segment name and value as the value of the segment in this dimension.
        Map attrValMap = new Map(Types::String, Types::String);

        while select davsi
            where davsi.DimensionAttributeValueSet == _dim1
            join DimensionAttribute, DisplayValue from dav
                where davsi.DimensionAttributeValue == dav.RecId
            join Name from da
                where da.RecId == dav.DimensionAttribute
        {
            attrValMap.insert(da.Name, dav.DisplayValue);
        }
        while select davsi
            where davsi.DimensionAttributeValueSet == _dim2
            join DimensionAttribute, DisplayValue from dav
                where davsi.DimensionAttributeValue == dav.RecId
            join Name from da
                where da.RecId == dav.DimensionAttribute
        {
            if (attrValMap.exists(da.Name) && attrValMap.lookup(da.Name) != dav.DisplayValue)
            {
                ret = da.Name;
                break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBatch</Name>
				<Source><![CDATA[
	/// <summary>
    /// Batch processing method.
    /// </summary>
    /// <returns>
    /// <c>Batch</c> object.
	/// </returns>
    public Batch doBatch()
    {
        Batch ret;

        if (executionMode == SysOperationExecutionMode::ScheduledBatch)
        {
            BatchHeader batchheader = this.batchInfo().parmBatchHeader();
            batchheader.clearAllAlerts();

            batchheader.addUserAlerts(curUserId(), NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::No);
        }

        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>