<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanQuantityMaintainKanbanRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanQuantityMaintainKanbanRule</c> class updates a selected kanban rule or creates a replacement kanban rule.
/// </summary>
class KanbanQuantityMaintainKanbanRule
{
    // input variables
    KanbanQuantityCalculationProposal   kanbanQuantityCalculationProposal;

    // cached variables
    KanbanQuantityCalculation           kanbanQuantityCalculation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcNumOfDaysInCompanyTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the number of days between two specified UTC date time variables.
    /// </summary>
    /// <param name="_startDateTime">
    ///    A date time value in UTC that represents the starting point of a period.
    /// </param>
    /// <param name="_endDateTime">
    ///    A date time value in UTC that represents the ending point of a period.
    /// </param>
    /// <returns>
    ///    The number of days, according to the company time zone.
    /// </returns>
    protected Days calcNumOfDaysInCompanyTimeZone(
        utcdatetime     _startDateTime,
        utcdatetime     _endDateTime)
    {
        TransDateTime   startDateTime   = DateTimeUtil::applyTimeZoneOffset(_startDateTime,DateTimeUtil::getCompanyTimeZone());
        TransDateTime   endDateTime     = DateTimeUtil::applyTimeZoneOffset(_endDateTime ? _endDateTime : DateTimeUtil::maxValue(),DateTimeUtil::getCompanyTimeZone());

        return DateTimeUtil::date(endDateTime)-DateTimeUtil::date(startDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new kanban rule based on the selected kanban rule.
    /// </summary>
    /// <param name="_leanRuleDataExistingRule">
    ///    A <c>LeanRuleData</c> object that represents the selected kanban rule.
    /// </param>
    /// <param name="_calculationProposal">
    ///    A <c>KanbanQuantityCalculationProposal</c> record that contains new values that applies to the new
    ///    kanban rule.
    /// </param>
    /// <param name="_creationMode">
    ///    A <c>KanbanRuleDuplicateFormMode</c> enumeration value that determines the creation principle.
    /// </param>
    /// <param name="_newRuleValidFrom">
    ///    A date time value in UTC representing the starting point of the new kanban rule.
    /// </param>
    protected void createNewKanbanRule(
        LeanRuleData                        _leanRuleDataExistingRule,
        KanbanQuantityCalculationProposal   _calculationProposal,
        KanbanRuleDuplicateFormMode         _creationMode,
        utcdatetime                         _newRuleValidFrom = kanbanQuantityCalculation.KanbanRuleNewValidFrom)
    {
        // create a leanRuleData object used for the new rule
        LeanRuleData leanRuleDataNewRule = _leanRuleDataExistingRule.duplicate(false);

        KanbanRule kanbanRuleNew = leanRuleDataNewRule.parmKanbanRule();
        kanbanRuleNew.RuleId     = NumberSeq::newGetNumFromId(ProdParameters::numRefKanbanRuleId().NumberSequenceId).num();
        kanbanRuleNew.Quantity   = _calculationProposal.KanbanProductQuantity;

        KanbanRuleFixed kanbanRuleFixedNew = leanRuleDataNewRule.parmKanbanRuleFixed();
        kanbanRuleFixedNew.Level = _calculationProposal.KanbanQuantityProposal;

        LeanCoverageKanbanRule leanCoverageKanbanRuleNew = leanRuleDataNewRule.parmLeanCoverageKanbanRule();
        leanCoverageKanbanRuleNew.ValidFrom = _newRuleValidFrom;

        if (_creationMode == KanbanRuleDuplicateFormMode::Duplicate)
        {
            leanCoverageKanbanRuleNew.ValidTo = _leanRuleDataExistingRule.kanbanFlow().validTo();
        }

        // trigger the replacement
        LeanRulesEngine::duplicateRule(_leanRuleDataExistingRule,
                                        leanRuleDataNewRule,
                                        _creationMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements logic to determine whether a new replacement kanban rule must be created or the selected kanban rule must be updated.
    /// </summary>
    protected void enableProposal()
    {
        #define.minimumEffectiveDays(1)

        utcdatetime                         newRuleValidFrom;

        KanbanRuleFixed kanbanRuleFixed = KanbanRuleFixed::find(kanbanQuantityCalculationProposal.KanbanRuleFixed);
        LeanRuleData leanRuleData = kanbanRuleFixed.ruleData();

        if (  ! kanbanRuleFixed
            ||! leanRuleData)
        {
            return;
        }

        // calculate the number of days the selected rule will be active - but according to company timezone
        Days numOfEffectiveDaysSelectedRule = this.calcNumOfDaysInCompanyTimeZone(leanRuleData.validFrom(), kanbanQuantityCalculation.KanbanRuleNewValidFrom);

        if (numOfEffectiveDaysSelectedRule < 0)
        {
            warning(strFmt("@SYS318739",leanRuleData.parmKanbanRule().RuleId));
        }
        else if (numOfEffectiveDaysSelectedRule >= 0 && numOfEffectiveDaysSelectedRule < #minimumEffectiveDays)
        {
            if (this.isProposalChangingKanbanQuantities(leanRuleData))
            {
                // update kanban rule, but do not change it's replaced rule id
                var kanbanRule = leanRuleData.parmKanbanRule();
                var leanRuleDataUpdate = LeanRuleDataUpdate::newStandard(leanRuleData, kanbanRule.replacedRule().RuleId);
                this.updateKanbanRule(leanRuleDataUpdate);
            }
        }
        else if (numOfEffectiveDaysSelectedRule >= #minimumEffectiveDays)
        {
            Days numOfEffectiveDaysNewRule = this.calcNumOfDaysInCompanyTimeZone(kanbanQuantityCalculation.KanbanRuleNewValidFrom, leanRuleData.validTo());

            if ( numOfEffectiveDaysNewRule >= #minimumEffectiveDays)
            {
                if (this.isProposalChangingKanbanQuantities(leanRuleData))
                {
                    // close current rule and create new replacing rule
                    this.createNewKanbanRule(leanRuleData,kanbanQuantityCalculationProposal,KanbanRuleDuplicateFormMode::Replace);
                }
            }
            else
            {
                LeanReplenishmentRuleId laterRuleId = this.findLaterKanbanRuleId(leanRuleData);
                if (laterRuleId)
                {
                    warning(strFmt("@SYS313360",leanRuleData.parmKanbanRule().RuleId,laterRuleId));
                }
                else
                {
                    if (kanbanQuantityCalculation.KanbanRuleNewValidFrom > leanRuleData.validTo())
                    {
                        newRuleValidFrom = kanbanQuantityCalculation.KanbanRuleNewValidFrom;
                    }
                    else
                    {
                        newRuleValidFrom = leanRuleData.validTo() < DateTimeUtil::maxValue() ? DateTimeUtil::addSeconds(leanRuleData.validTo(),1) : DateTimeUtil::maxValue();
                    }
                    this.createNewKanbanRule(leanRuleData,kanbanQuantityCalculationProposal,KanbanRuleDuplicateFormMode::Duplicate,newRuleValidFrom);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLaterKanbanRuleId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a later kanban rule ID based on the selected kanban rule.
    /// </summary>
    /// <param name="_leanRuleDataSelectedRule">
    /// A <c>LeanRuleData</c> object that represents the selected kanban rule.
    /// </param>
    /// <returns>
    /// A string value that holds a kanban rule ID.
    /// </returns>
    protected LeanReplenishmentRuleId findLaterKanbanRuleId(
        LeanRuleData    _leanRuleDataSelectedRule)
    {
        LeanCoverage            leanCoverage;
        KanbanRule              kanbanRule;
        LeanCoverageKanbanRule  leanCoverageKanbanRule;

        LeanCoverage leanCoverageSelectedRule = _leanRuleDataSelectedRule.parmLeanCoverage();

        select firstonly RuleId from kanbanRule
            where kanbanRule.RecId != _leanRuleDataSelectedRule.parmKanbanRule().RecId
            exists join leanCoverageKanbanRule
            where  leanCoverageKanbanRule.KanbanRule    == kanbanRule.RecId
                && ( leanCoverageKanbanRule.ValidTo     >= kanbanQuantityCalculation.KanbanRuleNewValidFrom
                || ! leanCoverageKanbanRule.ValidTo )
            exists join leanCoverage
                where  leanCoverage.RecId                   == leanCoverageKanbanRule.Coverage
                    && leanCoverage.RuleCoverageType        == leanCoverageSelectedRule.RuleCoverageType
                    && leanCoverage.AllocationId            == leanCoverageSelectedRule.AllocationId
                    && leanCoverage.AllocationDataAreaId    == leanCoverageSelectedRule.AllocationDataAreaId
                    && leanCoverage.ItemId                  == leanCoverageSelectedRule.ItemId
                    && leanCoverage.ItemDataAreaId          == leanCoverageSelectedRule.ItemDataAreaId
                    && leanCoverage.InventDimId             == leanCoverageSelectedRule.InventDimId
                    && leanCoverage.InventDimDataAreaId     == leanCoverageSelectedRule.InventDimDataAreaId;

        return kanbanRule.RuleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes internal variables.
    /// </summary>
    /// <returns>
    ///    true if internal variables were successfully initialized; otherwise, false.
    /// </returns>
    protected boolean init()
    {
        kanbanQuantityCalculation = KanbanQuantityCalculation::find(kanbanQuantityCalculationProposal.KanbanQuantityCalculation);

        if (! kanbanQuantityCalculation)
        {
            return checkFailed(strFmt("@SYS113080",kanbanQuantityCalculationProposal.KanbanQuantityCalculation, tableId2pname(kanbanQuantityCalculation.TableId)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProposalChangingKanbanQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the quantities for the kanban rule is different from the proposal quantities.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    A <c>LeanRuleData</c> object that represents the kanban rule.
    /// </param>
    /// <returns>
    ///    true if the quantities are different; otherwise, false.
    /// </returns>
    protected boolean isProposalChangingKanbanQuantities(
        LeanRuleData    _leanRuleData)
    {
        if (   _leanRuleData.parmKanbanRule().Quantity   == kanbanQuantityCalculationProposal.KanbanProductQuantity
            && _leanRuleData.parmKanbanRuleFixed().Level == kanbanQuantityCalculationProposal.KanbanQuantityProposal)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanQuantityCalculationProposal</Name>
				<Source><![CDATA[
    public KanbanQuantityCalculationProposal parmKanbanQuantityCalculationProposal(KanbanQuantityCalculationProposal _kanbanQuantityCalculationProposal = kanbanQuantityCalculationProposal)
    {
        kanbanQuantityCalculationProposal = _kanbanQuantityCalculationProposal;

        return kanbanQuantityCalculationProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements main logic for creation of a new replacing kanban rule or for updating the selected
    ///    kanban rule.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The related setup is missing, is wrong, or the specified <c>KanbanQuantityCalculationProposal</c>
    ///    record is not in the right state.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            if (   ! this.init()
                || ! this.validate())
            {
                throw error("@SYS18447");
            }

            this.enableProposal();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the selected kanban rule.
    /// </summary>
    /// <param name="_leanRuleDataSelectedRule">
    /// A <c>LeanRuleData</c> object that represents the selected kanban rule.
    /// </param>
    protected void updateKanbanRule(
        LeanRuleData                        _leanRuleDataSelectedRule)
    {
        KanbanRule kanbanRule = _leanRuleDataSelectedRule.parmKanbanRule();
        kanbanRule.Quantity = kanbanQuantityCalculationProposal.KanbanProductQuantity;

        KanbanRuleFixed kanbanRuleFixed = _leanRuleDataSelectedRule.parmKanbanRuleFixed();
        kanbanRuleFixed.Level = kanbanQuantityCalculationProposal.KanbanQuantityProposal;

        LeanRulesEngine::updateRule(_leanRuleDataSelectedRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the <c>KanbanQuantityCalculationProposal</c> record is locked for update.
    /// </summary>
    /// <returns>
    ///    true if the <c>KanbanQuantityCalculationProposal</c> record is valid and is locked for update;
    ///    otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        boolean result = true;

        if (kanbanQuantityCalculationProposal.KanbanQuantityProposal <= 0)
        {
            KanbanRuleFixed kanbanRuleFixed = KanbanRuleFixed::find(kanbanQuantityCalculationProposal.KanbanRuleFixed);
            LeanRuleData leanRuleData = kanbanRuleFixed.ruleData();

            result = checkFailed(strFmt("@SYS343724", leanRuleData.parmKanbanRule().RuleId));
        }

        if (result)
        {
            result = kanbanQuantityCalculationProposal.selectForUpdate();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanQuantityMaintainKanbanRule</c> class.
    /// </summary>
    /// <returns>
    /// A <c>KanbanQuantityMaintainKanbanRule</c> object.
    /// </returns>
    private static KanbanQuantityMaintainKanbanRule construct()
    {
        return new KanbanQuantityMaintainKanbanRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanQuantityMaintainKanbanRule</c> class.
    /// </summary>
    /// <param name="_kanbanQuantityCalculationProposal">
    /// A <c>KanbanQuantityCalculationProposal</c> record.
    /// </param>
    /// <returns>
    /// A <c>KanbanQuantityMaintainKanbanRule</c> object.
    /// </returns>
    public static KanbanQuantityMaintainKanbanRule newStandard(
        KanbanQuantityCalculationProposal   _kanbanQuantityCalculationProposal)
    {
        KanbanQuantityMaintainKanbanRule kanbanQuantityMaintainKanbanRule = KanbanQuantityMaintainKanbanRule::construct();
        kanbanQuantityMaintainKanbanRule.parmKanbanQuantityCalculationProposal(_kanbanQuantityCalculationProposal);

        return kanbanQuantityMaintainKanbanRule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
