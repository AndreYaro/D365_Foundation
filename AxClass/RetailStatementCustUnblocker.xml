<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStatementCustUnblocker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Save the current blocked status of the customers to restore it later and then unblock the customers.
/// </summary>
class RetailStatementCustUnblocker
{
    Map customersToRestore;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>restoreBlockedCustomers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterate the saved customers previously to restore their blocked status.
    /// </summary>
    /// <remarks>
    /// Update the <c>CustTable</c> table with the previous blocked status.
    /// </remarks>
    void restoreBlockedCustomers()
    {
        MapEnumerator       me;
        CustAccount         custAccount;
        CustBlocked         prevBlockedStatus;
        CustTable           custTable;
        ;

        if (! customersToRestore)
        {
            return;
        }

        // Iterate over saved customers and restore their blocked status to what it was before we set it to "No".
        me = customersToRestore.getEnumerator();

        while (me.moveNext())
        {
            custAccount         = me.currentKey();
            prevBlockedStatus   = me.currentValue();

            custTable = CustTable::find(custAccount, true);
            custTable.Blocked = prevBlockedStatus;
            custTable.doUpdate();
        }

        customersToRestore = null; // Clear out the map.
    }

]]></Source>
			</Method>
			<Method>
				<Name>unblockCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the current blocked status of the customers to restore it later and then unblock the customers.
    /// </summary>
    /// <param name="_custAccount">
    /// The Account number of the customer who will be unblocked.
    /// </param>
    /// <remarks>
    /// The customer with the account number passed as the parameter and the invoiced customer (if both are not same) will be unblocked.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If the customer with the account number specified does not exist.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If the customer with the Invoice account spcified does not exist.
    /// </exception>
    void unblockCustomer(CustAccount _custAccount)
    {
        CustBlocked         prevBlockedStatus, prevInvoiceCustBlockedStatus;
        CustAccount         custAccount;
        CustTable           custTable, invoiceCustTable;
        CustVendAC          invoiceAccount;

        custAccount = _custAccount;
        custTable = CustTable::find(custAccount);

        if (!custTable)
        {
            throw error(strfmt("@RET4160", custAccount));
        }

        if (custTable.InvoiceAccount)
        {
            if (!CustTable::find(custTable.InvoiceAccount))
                throw error(strfmt("@RET4161",custTable.InvoiceAccount));
            else
            {
                invoiceCustTable = CustTable::find(custTable.InvoiceAccount);
                invoiceAccount = custTable.InvoiceAccount;
            }
        }
        else
        {
            invoiceCustTable = custTable;
            invoiceAccount = custTable.AccountNum;
        }

        if (! customersToRestore)
        {
            customersToRestore = new Map(Types::String, Types::Enum);
        }

        if (custTable.Blocked != CustVendorBlocked::No || invoiceCustTable.Blocked != CustVendorBlocked::No)
        {
            custTable = CustTable::find(custAccount,true);
            prevBlockedStatus = custTable.Blocked;
            custTable.Blocked = CustVendorBlocked::No;
            custTable.doUpdate();

            // Save the customer's account-num so that we can restore the blocked status later.
            if (! customersToRestore.exists(custTable.AccountNum))
            {
                customersToRestore.insert(custTable.AccountNum, prevBlockedStatus);
            }

            if (custTable.AccountNum != invoiceCustTable.AccountNum)
            {
                invoiceCustTable = CustTable::find(invoiceAccount,true);
                prevInvoiceCustBlockedStatus = invoiceCustTable.Blocked;
                invoiceCustTable.Blocked = CustVendorBlocked::No;
                invoiceCustTable.doUpdate();

                // Save the customer's account-num so that we can restore the blocked status later.
                if (! customersToRestore.exists(invoiceCustTable.AccountNum))
                {
                    customersToRestore.insert(invoiceCustTable.AccountNum, prevInvoiceCustBlockedStatus);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomerBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if a customer or the invoice account mentioned on the customer is blocked or not.
    /// </summary>
    /// <param name = "_custAccount">The customer account.</param>
    /// <returns>true, if the customer is blocked; otherwise, false.</returns>
    public static boolean isCustomerBlocked(CustAccount _custAccount)
    {
        CustTable custTable, invoiceCustTable;
        custTable = CustTable::find(_custAccount);

        if (!custTable)
        {
            throw error(strfmt("@RET4160", _custAccount));
        }

        if (custTable.InvoiceAccount)
        {
            if (!CustTable::find(custTable.InvoiceAccount))
            {
                throw error(strfmt("@RET4161",custTable.InvoiceAccount));
            }
            else
            {
                invoiceCustTable = CustTable::find(custTable.InvoiceAccount);
            }
        }
        else
        {
            invoiceCustTable = custTable;
        }

        return (custTable.Blocked != CustVendorBlocked::No || invoiceCustTable.Blocked != CustVendorBlocked::No);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>