<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPriceDiscAdmCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRPriceDiscAdmCopy</c> copies price
/// discount records.
/// </summary>
class MCRPriceDiscAdmCopy extends RunBase
{
    PriceDiscJournalNum         journalNum;

    QueryRun                    queryRun;
    QueryRun                    inventQueryRun, custQueryRun, vendQueryRun;

    PriceType                   agreementType;

    FromDate                    fromDate;
    ToDate                      toDate;

    InventVendCustId            selectionCriterion;
    InventVendCustId            oldType;

    boolean                     firstTime;
    NoYesId                     checkAll;
    NoYesId                     checkGroup;
    NoYesId                     checkTable;

    DialogGroup                 agreementGroup;

    DialogField                 dlgType;
    DialogField                 dlgFromDate;
    DialogField                 dlgToDate;
    DialogField                 dialogCheckMarkAll;
    DialogField                 dialogCheckMarkGroup;
    DialogField                 dialogCheckMarkTable;

    DialogField                 dialogInventVendCust;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        agreementType,
        fromDate,
        toDate,
        selectionCriterion,
        checkAll,
        checkGroup,
        checkTable
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog = super();

        DialogGroup         dateGroup;
        DialogGroup         fromGroup;
        DialogGroup         toGroup;

        DialogGroup         chooseGroup;
        DialogGroup         selectGroup;
        DialogGroup         checkBoxGroup;
        dialog.caption("@SYS58997");
        dialog.allowUpdateOnSelectCtrl(true);

        dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(RunBaseQueryDialog), DialogMenuItemGroup::BottomGrp);

        agreementGroup  = dialog.addGroup("@SYS93993");
        dlgType         = dialog.addFieldValue(enumStr(PriceType), agreementType, "@SYS9114");

        dateGroup       = dialog.addGroup('');
        dateGroup.columns(2);
        dateGroup.frameType(FormFrameType::None);

        fromGroup       = dialog.addGroup("@SYS4083", dateGroup);
        dlgFromDate     = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate, "@SYS7402");

        if (toDate == dateMax())
            toDate = dateNull();

        toGroup         = dialog.addGroup("@SYS53942", dateGroup);
        dlgToDate       = dialog.addFieldValue(extendedTypeStr(ToDate), toDate, "@SYS7402");

        chooseGroup             = dialog.addGroup('');
        chooseGroup.columns(2);
        chooseGroup.frameType(FormFrameType::None);

        selectGroup             = dialog.addGroup("@SYS59029", chooseGroup);
        dialogInventVendCust    = dialog.addFieldValue(enumStr(InventVendCust), selectionCriterion, "@SYS26386");

        checkBoxGroup           = dialog.addGroup("@MCR35609", chooseGroup);
        dialogCheckMarkAll      = dialog.addFieldValue(enumStr(NoYes), checkAll, "@SYS14437");
        dialogCheckMarkGroup    = dialog.addFieldValue(enumStr(NoYes), checkGroup, "@SYS3815");
        dialogCheckMarkTable    = dialog.addFieldValue(enumStr(NoYes), checkTable, "@SYS24500");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        agreementType   = dlgType.value();

        fromDate        = dlgFromDate.value();
        toDate          = dlgToDate.value();

        if (!fromDate)
            fromDate = dateNull();

        if (!toDate)
            toDate  = dateMax();

        selectionCriterion = dialogInventVendCust.value();
        checkAll     = dialogCheckMarkAll.value();
        checkGroup   = dialogCheckMarkGroup.value();
        checkTable   = dialogCheckMarkTable.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values for the <c>MCRPriceDiscAdmCopy</c> class.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean init()
    {
        firstTime = true;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal number.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number used to initialize the class variable journal numnber.
    /// </param>
    private void  initJournalNum(PriceDiscJournalNum  _journalNum)
    {
        journalNum = _journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        custQueryRun    = new QueryRun(this.queryCust());
        vendQueryRun    = new QueryRun(this.queryVend());
        inventQueryRun  = new QueryRun(this.queryInvent());

        agreementType   = PriceType::PriceSales;

        selectionCriterion = InventVendCust::Customer;
        checkAll = NoYes::Yes;
        checkGroup = NoYes::Yes;
        checkTable = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, custQueryRun.pack(), vendQueryRun.pack(), inventQueryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscSort</Name>
				<Source><![CDATA[
    private void  priceDiscSort()
    {
        PriceDiscAdmTrans       priceDiscAdmTrans;
        LineNum                 lineNum;

        while select forupdate * from priceDiscAdmTrans
            order by ItemCode, ItemRelation, UnitId, Relation, AccountCode, FromDate
            where priceDiscAdmTrans.JournalNum == journalNum
        {
            priceDiscAdmTrans.LineNum = lineNum;
            priceDiscAdmTrans.doUpdate();
            lineNum++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCust</Name>
				<Source><![CDATA[
    private void  processCust()
    {
        CustTable  custTable;

        if (checkAll)
        {
            this.searchCustVendPriceDiscAll();
        }

        while (queryRun.next())
        {
            custTable = queryRun.get(tableNum(CustTable));

            if (checkGroup)
            {
                this.searchCustGroups(custTable);
            }

            if (checkTable)
            {
                this.searchCustVendPriceDiscAccount(custTable.AccountNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvent</Name>
				<Source><![CDATA[
    private void  processInvent()
    {
        InventTable  inventTable;

        this.searchInventPriceDiscAll();

        while (queryRun.next())
        {
            inventTable = queryRun.get(tableNum(InventTable));

            this.searchInventGroups(inventTable);
            this.searchInventPriceDiscItem(inventTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processVend</Name>
				<Source><![CDATA[
    private void  processVend()
    {
        VendTable  vendTable;

        if (checkAll)
        {
            this.searchCustVendPriceDiscAll();
        }

        while (queryRun.next())
        {
            vendTable = queryRun.get(tableNum(VendTable));

            if (checkGroup)
            {
                this.searchVendGroups(vendTable);
            }

            if (checkTable)
            {
                this.searchCustVendPriceDiscAccount(vendTable.AccountNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCust</Name>
				<Source><![CDATA[
    private Query queryCust()
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        queryBuildDataSource = query.addDataSource(tableNum(CustTable));
        queryBuildDataSource.addRange(fieldNum(CustTable, AccountNum));
        queryBuildDataSource.addRange(fieldNum(CustTable, CustGroup));
        queryBuildDataSource.addRange(fieldNum(CustTable, PriceGroup));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInvent</Name>
				<Source><![CDATA[
    private Query queryInvent()
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSourceInventTable, queryBuildDataSourceInventItemGroupItem;

        queryBuildDataSourceInventTable = query.addDataSource(tableNum(InventTable));
        queryBuildDataSourceInventTable.addRange(fieldNum(InventTable, ItemId));
        queryBuildDataSourceInventItemGroupItem = queryBuildDataSourceInventTable.addDataSource(tableNum(InventItemGroupItem));
        queryBuildDataSourceInventItemGroupItem.addLink(fieldNum(InventTable, ItemId), fieldNum(InventItemGroupItem, ItemId));
        queryBuildDataSourceInventItemGroupItem.addLink(fieldNum(InventTable, DataAreaId), fieldNum(InventItemGroupItem, DataAreaId));
        queryBuildDataSourceInventItemGroupItem.addRange(fieldNum(InventItemGroupItem, ItemGroupId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        if (selectionCriterion != oldType || firstTime)
        {
            switch (selectionCriterion)
            {
                case InventVendCust::Invent:
                    queryRun = inventQueryRun;
                    break;

                case InventVendCust::Vendor:
                    queryRun = vendQueryRun;
                    break;

                case InventVendCust::Customer:
                    queryRun = custQueryRun;
                    break;
            }

            queryRun.title("@SYS58997");

            firstTime = false;
            oldType   = selectionCriterion;
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryVend</Name>
				<Source><![CDATA[
    private Query queryVend()
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        queryBuildDataSource = query.addDataSource(tableNum(VendTable));
        queryBuildDataSource.addRange(fieldNum(VendTable, AccountNum));
        queryBuildDataSource.addRange(fieldNum(VendTable, VendGroup));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Integer         deleteJournal;
        this.queryRun();

        if (!PriceDiscAdmTable::emptyJournal(journalNum))
        {
            deleteJournal = Box::yesNoCancel(strFmt("@SYS58999", journalNum), 1);
            switch (deleteJournal)
            {
                case DialogButton::Yes:   PriceDiscAdmTable::deleteJournal(journalNum);
                                                break;

                case DialogButton::Cancel:   return;
            }
        }

        ttsBegin;

        switch (selectionCriterion)
        {
            case InventVendCust::Invent:   this.processInvent();
                                                      break;
            case InventVendCust::Vendor:   this.processVend();
                                                      break;
            case InventVendCust::Customer:   this.processCust();
                                                      break;
        }

        this.priceDiscSort();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchCustGroups</Name>
				<Source><![CDATA[
    private void  searchCustGroups(CustTable  _custTable)
    {
        this.searchCustVendPriceDiscGroup(PriceType::PriceSales, _custTable.PriceGroup);
        this.searchCustVendPriceDiscGroup(PriceType::LineDiscSales, _custTable.LineDisc);
        this.searchCustVendPriceDiscGroup(PriceType::MultiLineDiscSales, _custTable.MultiLineDisc);
        this.searchCustVendPriceDiscGroup(PriceType::EndDiscSales, _custTable.EndDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchCustVendPriceDiscAccount</Name>
				<Source><![CDATA[
    private void  searchCustVendPriceDiscAccount(PriceDiscAccountRelation   accountRelation)
    {
        PriceDiscTable  priceDiscTable;
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(PriceDiscAdmTrans));

        if (accountRelation)
        {
            while select priceDiscTable
                where   priceDiscTable.AccountCode      == PriceDiscPartyCodeType::Table
                   &&   priceDiscTable.AccountRelation  == accountRelation
                   &&  (priceDiscTable.FromDate         >= fromDate || !priceDiscTable.FromDate)
                   &&  (priceDiscTable.ToDate           <= toDate || !priceDiscTable.ToDate)
                   &&  (priceDiscTable.Relation         == agreementType)
            {
                this.write(priceDiscTable, recordInsertList);
            }

            recordInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchCustVendPriceDiscAll</Name>
				<Source><![CDATA[
    private void  searchCustVendPriceDiscAll()
    {
        PriceDiscTable  priceDiscTable;
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(PriceDiscAdmTrans));

        while select priceDiscTable
            where  priceDiscTable.Relation      == agreementType
               && (priceDiscTable.FromDate      <= toDate && (priceDiscTable.ToDate >= fromDate || !priceDiscTable.ToDate))
               && (priceDiscTable.AccountCode   == PriceDiscPartyCodeType::All && checkAll)
        {
            this.write(priceDiscTable, recordInsertList);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchCustVendPriceDiscGroup</Name>
				<Source><![CDATA[
    private void  searchCustVendPriceDiscGroup(PriceType                    priceType,
                                       PriceDiscAccountRelation     accountRelation)
    {
        PriceDiscTable  priceDiscTable;
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(PriceDiscAdmTrans));

        if (accountRelation && (priceType == agreementType))
        {
            while select priceDiscTable
                where  priceDiscTable.AccountCode       == PriceDiscPartyCodeType::GroupId
                   &&  priceDiscTable.Relation          == priceType
                   &&  priceDiscTable.AccountRelation   == accountRelation
                   && (priceDiscTable.FromDate          <= toDate && (priceDiscTable.ToDate >= fromDate || !priceDiscTable.ToDate))
            {
                this.write(priceDiscTable, recordInsertList);
            }

            recordInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchInventGroups</Name>
				<Source><![CDATA[
    private void  searchInventGroups(InventTable  _inventTable)
    {
        InventTableModule   inventTableModule;

        while select ModuleType, LineDisc, MultiLineDisc from inventTableModule
            where  inventTableModule.ItemId     == _inventTable.ItemId
               && (inventTableModule.ModuleType == ModuleInventPurchSales::Purch
               ||
                   inventTableModule.ModuleType == ModuleInventPurchSales::Sales)
               && (inventTableModule.LineDisc   || inventTableModule.MultiLineDisc)
        {
            if (inventTableModule.ModuleType == ModuleInventPurchSales::Purch)
            {
                if (inventTableModule.LineDisc && (PriceType::LineDiscPurch == agreementType))
                {
                    this.searchInventPriceDiscGroup(PriceType::LineDiscPurch, inventTableModule.LineDisc);
                }

                if (inventTableModule.MultiLineDisc && (PriceType::MultiLineDiscPurch == agreementType))
                {
                    this.searchInventPriceDiscGroup(PriceType::MultiLineDiscPurch, inventTableModule.MultiLineDisc);
                }
            }

            if (inventTableModule.ModuleType == ModuleInventPurchSales::Sales)
            {
                if (inventTableModule.LineDisc && (PriceType::LineDiscSales == agreementType))
                {
                    this.searchInventPriceDiscGroup(PriceType::LineDiscSales, inventTableModule.LineDisc);
                }

                if (inventTableModule.MultiLineDisc && (PriceType::MultiLineDiscSales == agreementType))
                {
                    this.searchInventPriceDiscGroup(PriceType::MultiLineDiscSales, inventTableModule.MultiLineDisc);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchInventPriceDiscAll</Name>
				<Source><![CDATA[
    private void  searchInventPriceDiscAll()
    {
        PriceDiscTable  priceDiscTable;
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(PriceDiscAdmTrans));

        while select priceDiscTable
            where  priceDiscTable.ItemCode     == PriceDiscProductCodeType::All
               &&  priceDiscTable.Relation     == agreementType
               && (priceDiscTable.FromDate     <= toDate && (priceDiscTable.ToDate >= fromDate || !priceDiscTable.ToDate))
               &&
                  (
                      (priceDiscTable.AccountCode == PriceDiscPartyCodeType::All   && checkAll)

                      ||

                      (
                          (priceDiscTable.AccountCode == PriceDiscPartyCodeType::GroupId && checkGroup)
                      )

                      ||

                      (
                          (priceDiscTable.AccountCode == PriceDiscPartyCodeType::Table && checkTable)
                      )
                  )
        {
            this.write(priceDiscTable, recordInsertList);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchInventPriceDiscGroup</Name>
				<Source><![CDATA[
    private void  searchInventPriceDiscGroup(PriceType              priceType,
                                     PriceDiscItemRelation  itemRelation)
    {
        PriceDiscTable  priceDiscTable;
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(PriceDiscAdmTrans));

        while select priceDiscTable
            where  priceDiscTable.ItemCode      == PriceDiscProductCodeType::GroupId
               &&  priceDiscTable.Relation      == priceType
               &&  priceDiscTable.ItemRelation  == itemRelation
               &&
                  (
                       priceDiscTable.FromDate      <= toDate
                   && (priceDiscTable.ToDate        >= fromDate || !priceDiscTable.ToDate)
                  )

                  &&

                  (
                  (priceDiscTable.AccountCode == PriceDiscPartyCodeType::All && checkAll)

                  ||

                  (
                  (priceDiscTable.AccountCode     == PriceDiscPartyCodeType::GroupId && checkGroup)
                  )

                  ||

                  (
                  (priceDiscTable.AccountCode == PriceDiscPartyCodeType::Table && checkTable)
                  ))
        {
            this.write(priceDiscTable, recordInsertList);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchInventPriceDiscItem</Name>
				<Source><![CDATA[
    private void  searchInventPriceDiscItem(InventTable  _inventTable)
    {
        PriceDiscTable      priceDiscTable;
        RecordInsertList    recordInsertList = new RecordInsertList(tableNum(PriceDiscAdmTrans));

        while select priceDiscTable
            where  priceDiscTable.ItemCode      == PriceDiscProductCodeType::Table
               &&  priceDiscTable.ItemRelation  == _inventTable.ItemId
               &&  priceDiscTable.Relation      == agreementType
               && (priceDiscTable.FromDate      <= toDate && (priceDiscTable.ToDate >= fromDate || !priceDiscTable.ToDate))
               &&
                  (
                  (priceDiscTable.AccountCode   == PriceDiscPartyCodeType::All       && checkAll) ||
                  (priceDiscTable.AccountCode   == PriceDiscPartyCodeType::GroupId   && checkGroup) ||
                  (priceDiscTable.AccountCode   == PriceDiscPartyCodeType::Table     && checkTable)
                  )
        {
            this.write(priceDiscTable, RecordInsertList);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchVendGroups</Name>
				<Source><![CDATA[
    private void  searchVendGroups(VendTable  _vendTable)
    {
        this.searchCustVendPriceDiscGroup(PriceType::PricePurch, _vendTable.PriceGroup);
        this.searchCustVendPriceDiscGroup(PriceType::LineDiscPurch, _vendTable.LineDisc);
        this.searchCustVendPriceDiscGroup(PriceType::MultiLineDiscPurch, _vendTable.MultiLineDisc);
        this.searchCustVendPriceDiscGroup(PriceType::EndDiscPurch, _vendTable.EndDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = RunBase::getVersion(packedClass);
        container   packedCustQueryRun, packedVendQueryRun, packedInventQueryRun;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedCustQueryRun, packedVendQueryRun, packedInventQueryRun] = packedClass;

                if (SysQuery::isPackedOk(packedCustQueryRun) && SysQuery::isPackedOk(packedVendQueryRun) && SysQuery::isPackedOk(packedInventQueryRun))
                {
                    custQueryRun   = new QueryRun(packedCustQueryRun);
                    vendQueryRun   = new QueryRun(packedVendQueryRun);
                    inventQueryRun = new QueryRun(packedInventQueryRun);
                }
                else
                    return false;

                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    private void  write(PriceDiscTable  _priceDiscTable, RecordInsertList _recordInsertList)
    {
        PriceDiscAdmTrans  priceDiscAdmTrans;

        priceDiscAdmTrans = PriceDiscAdmTrans::findRefRecId(_priceDiscTable.RecId, journalNum);

        if (!priceDiscAdmTrans.RecId)
        {
            priceDiscAdmTrans.AccountCode       = _priceDiscTable.AccountCode;
            priceDiscAdmTrans.AccountRelation   = _priceDiscTable.AccountRelation;
            priceDiscAdmTrans.Agreement         = _priceDiscTable.Agreement;
            priceDiscAdmTrans.AllocateMarkup    = _priceDiscTable.AllocateMarkup;
            priceDiscAdmTrans.Amount            = _priceDiscTable.Amount;
            priceDiscAdmTrans.Currency          = _priceDiscTable.Currency;
            priceDiscAdmTrans.DeliveryTime      = _priceDiscTable.DeliveryTime;
            priceDiscAdmTrans.FromDate          = _priceDiscTable.FromDate;
            priceDiscAdmTrans.ItemCode          = _priceDiscTable.ItemCode;
            priceDiscAdmTrans.ItemRelation      = _priceDiscTable.ItemRelation;
            priceDiscAdmTrans.JournalNum        = journalNum;

            priceDiscAdmTrans.Markup            = _priceDiscTable.Markup;
            priceDiscAdmTrans.Module            = _priceDiscTable.Module;
            priceDiscAdmTrans.Percent1          = _priceDiscTable.Percent1;
            priceDiscAdmTrans.Percent2          = _priceDiscTable.Percent2;
            priceDiscAdmTrans.PriceDiscTableRef = _priceDiscTable.RecId;
            priceDiscAdmTrans.PriceUnit         = _priceDiscTable.PriceUnit;
            priceDiscAdmTrans.QuantityAmountFrom    = _priceDiscTable.QuantityAmountFrom;
            priceDiscAdmTrans.QuantityAmountTo    = _priceDiscTable.QuantityAmountTo;
            priceDiscAdmTrans.Relation          = _priceDiscTable.Relation;
            priceDiscAdmTrans.SearchAgain       = _priceDiscTable.SearchAgain;
            priceDiscAdmTrans.ToDate            = _priceDiscTable.ToDate;
            priceDiscAdmTrans.UnitId            = _priceDiscTable.UnitId;

            priceDiscAdmTrans.InventDimId       = _priceDiscTable.InventDimId;

            _recordInsertList.add(priceDiscAdmTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>MCRPriceDiscAdmCopy</c> class.
    /// </summary>
    /// <returns>
    /// The new instance of the <c>MCRPriceDiscAdmCopy</c> class.
    /// </returns>
    public static MCRPriceDiscAdmCopy construct()
    {
        return new MCRPriceDiscAdmCopy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        PriceDiscAdmTrans               priceDiscAdmTrans;
        PriceDiscAdmTable               priceDiscAdmTable;
        MCRPriceDiscAdmCopy              priceDiscCopy = MCRPriceDiscAdmCopy::construct();

        FormRun                 priceDiscTransForm;
        FormRun                 priceDiscTableForm;
        FormDataSource          tableDataSource;
        if (!(args.dataset() == tableNum(PriceDiscAdmTrans)))
        {
            throw error("@SYS18626");
        }

        priceDiscAdmTrans = args.record();

        if (!priceDiscAdmTrans.JournalNum)
        {
            priceDiscTransForm = args.caller();
            priceDiscTableForm = priceDiscTransForm.args().caller();
            tableDataSource    = priceDiscTableForm.dataSource();

            if (tableDataSource.table() != tableNum(PriceDiscAdmTable))
            {
                throw error("@SYS18626");
            }
            else
            {
                priceDiscAdmTable = tableDataSource.cursor();
                priceDiscCopy.initJournalNum(priceDiscAdmTable.JournalNum);
            }
        }
        else
        {
            priceDiscCopy.initJournalNum(priceDiscAdmTrans.JournalNum);
        }

        if (priceDiscCopy.prompt())
            priceDiscCopy.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>