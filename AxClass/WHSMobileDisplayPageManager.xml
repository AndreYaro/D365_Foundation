<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDisplayPageManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileDisplayPageManager</c> class controls the paging of the work list in the mobile device.
/// </summary>
[SysObsoleteAttribute('This class is no longer supported. Avoid paging in the mobile application.', false, 18\5\2021)]
public class WHSMobileDisplayPageManager
{
    #WHSRF

    int pageIndex;
    int64 totalRecords;
    int pageSize;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>consumePassthrough</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the class parameters based on the values of the pass.
    /// </summary>
    /// <param name = "_pass">The current <c>WHSRFPassthrough</c> object</param>
    public void consumePassthrough(WHSRFPassthrough _pass)
    {
        if (_pass.exists(#PageIndex))
        {
            this.parmPageIndex(_pass.lookup(#PageIndex));
        }
        else
        {
            this.parmPageIndex(1);
        }

        WHSRFMenuItemTable menuItemTable = WHSRFMenuItemTable::find(_pass.lookup(#MenuItem));

        if (_pass.exists(#TotalRecords))
        {
            this.parmTotalRecords(_pass.lookup(#TotalRecords));
        }
        this.ensureTotalRecordsDisplayedDoesNotExceedMax(menuItemTable);

        pageSize = menuItemTable.PageSize <= 0 ? #DefaultPageSize : menuItemTable.PageSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureTotalRecordsDisplayedDoesNotExceedMax</Name>
				<Source><![CDATA[
    private void ensureTotalRecordsDisplayedDoesNotExceedMax(WHSRFMenuItemTable _menuItemTable)
    {
        if (_menuItemTable.WorkListMaximumDisplayedRecords > 0 && _menuItemTable.WorkListMaximumDisplayedRecords < this.parmTotalRecords())
        {
            this.parmTotalRecords(_menuItemTable.WorkListMaximumDisplayedRecords);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPageEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the index of the last record in the current page.
    /// </summary>
    /// <returns>The index of the last record in the current page</returns>
    public int getPageEnd()
    {
        return min(this.parmPageIndex() * this.parmPageSize(), this.parmTotalRecords());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPageStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the index of the first record in the current page.
    /// </summary>
    /// <returns>The index of the first record in the current page</returns>
    public int getPageStart()
    {
        return ((this.parmPageIndex() - 1) * this.parmPageSize()) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workFitsIntoCurrentPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a work with specified index fits into the current page.
    /// </summary>
    /// <param name = "_workIndex">An index of the work.</param>
    /// <returns>true if work fits into the current page; otherwise false.</returns>
    public boolean workFitsIntoCurrentPage(int _workIndex)
    {
        return _workIndex >= this.getPageStart()
            && _workIndex <= this.parmPageIndex() * this.parmPageSize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPagingButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the clicked button is a page navigation one (previous or next).
    /// </summary>
    /// <param name = "_buttonClicked">The name of the button which is currently clicked</param>
    /// <returns>True if the clicked button is a list page navigation one; otherwise false</returns>
    public boolean isPagingButton(str _buttonClicked)
    {
        return (_buttonClicked == WHSMobileAppControlNames::RFPrev || _buttonClicked == WHSMobileAppControlNames::RFNext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPageIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the index of the current page which is displayed.
    /// </summary>
    /// <param name = "_pageIndex">The page index to be set</param>
    /// <returns></returns>
    public int parmPageIndex(int _pageIndex = pageIndex)
    {
        pageIndex = _pageIndex;
        return pageIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPageSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the size of the page to be displayed.
    /// </summary>
    /// <param name = "_pageSize">The size of the page to be set</param>
    /// <returns></returns>
    public int parmPageSize(int _pageSize = pageSize)
    {
        pageSize = _pageSize;
        return pageSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the total number of records.
    /// </summary>
    /// <param name = "_totalRecords">The total number of records to be set</param>
    /// <returns></returns>
    public int64 parmTotalRecords(int64 _totalRecords = totalRecords)
    {
        totalRecords = _totalRecords;
        return totalRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the page index parameter, based on the current page index
    /// and the navigation button that was clicked (previous, next).
    /// </summary>
    /// <param name = "_buttonClicked">The current navigation (previous or next) button name which was clicked</param>
    public void processPage(str _buttonClicked)
    {
        if ( _buttonClicked == WHSMobileAppControlNames::RFPrev)
        {
            this.parmPageIndex(max(1, this.parmPageIndex() - 1));
        }
        else if (_buttonClicked == WHSMobileAppControlNames::RFNext)
        {
            int currentPageIndex = this.parmPageIndex();

            if (currentPageIndex + 1 < ((this.parmTotalRecords() / this.parmPageSize()) + 1))
            {
                currentPageIndex = currentPageIndex + 1;
            }

            this.parmPageIndex(currentPageIndex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPageAndUpdatePassthrough</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the values of the pass object related to the paging of the list and
    /// updates it accordingly.
    /// </summary>
    /// <param name = "_pass">The current <c>WHSRFPassthrough</c> object</param>
    /// <param name = "_buttonClicked">The field name of the clicked control</param>
    public void processPageAndUpdatePassthrough(WHSRFPassthrough _pass, str _buttonClicked)
    {
        this.consumePassthrough(_pass);
        this.processPage(_buttonClicked);
        this.updatePassthrough(_pass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePassthrough</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the page index and the total number of record of that page key values of the pass object.
    /// </summary>
    /// <param name = "_pass">The current <c>WHSRFPassthrough</c> object</param>
    public void updatePassthrough(WHSRFPassthrough _pass)
    {
        _pass.insert(#PageIndex, this.parmPageIndex());
        _pass.insert(#TotalRecords, this.parmTotalRecords());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSMobileDisplayPageManager construct()
    {
        WHSMobileDisplayPageManager pageManager = new WHSMobileDisplayPageManager();

        return pageManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>