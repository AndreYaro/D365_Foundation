<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqInternalOrgManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchReqInternalOrgManager
{
    container       requisitionerContainer;
    HcmWorkerRecId  currentRequisitioner;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentRequisitioner</Name>
				<Source><![CDATA[
        public HcmWorkerRecId currentRequisitioner()
    {
        return currentRequisitioner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteStaleRecords</Name>
				<Source><![CDATA[
        protected void deleteStaleRecords(HcmWorkerRecId _hcmWorkerRecId)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
        public Common getData()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRequisitioner</Name>
				<Source><![CDATA[
        public void insertRequisitioner(HcmWorkerRecId _requisitioner)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRequisitionerInMemory</Name>
				<Source><![CDATA[
        public boolean isRequisitionerInMemory(HcmWorkerRecId _requisitioner)
    {
        boolean ret = true;

        #Define.MaxContainerSize(10)

        int conPos;

        conpos = confind(requisitionerContainer, _requisitioner);

        if (conpos)
        {
            requisitionerContainer = condel(requisitionerContainer, conpos,1);
        }
        else
        {
            ret = false;
        }

        requisitionerContainer = conins(requisitionerContainer, 1, _requisitioner);

        if (conlen(requisitionerContainer) > #MaxContainerSize)
        {
            this.deleteStaleRecords(conpeek(requisitionerContainer, conlen(requisitionerContainer)));

            requisitionerContainer = condel(requisitionerContainer, conlen(requisitionerContainer), 1);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
        public Common lookup(HcmWorkerRecId _requisitioner, FormControl _callingControl)
    {
        Args                        args;
        FormRun                     formRun;
        FormReferenceGroupControl   callingReferenceGroupControl;
        FormStringControl           callingStringControl;
        FormInt64Control            callingInt64Control;
        Common                      common                          = null;

        if (!this.validateRequisitioner(_requisitioner))
        {
            throw Exception::Error;
        }

        this.insertRequisitioner(_requisitioner);

        currentRequisitioner = _requisitioner;

        args = new Args();
        args.name(formstr(PurchReqInternalOrganizationLookup));
        args.caller(this);

        if (_callingControl.handle() == classnum(FormReferenceGroupControl))
        {
            args.parmEnum(NoYes::Yes);
        }
        else
        {
            args.parmEnum(NoYes::No);
        }

        formRun = classfactory.formRunClass(args);
        formRun.init();

        switch (_callingControl.handle())
        {
            case classnum(FormStringControl):
                callingStringControl = _callingControl;
                callingStringControl.performFormLookup(formRun);
                break;
            case classnum(FormInt64Control):
                callingInt64Control = _callingControl;
                callingInt64Control.performFormLookup(formRun);
                break;
            case classnum(FormReferenceGroupControl):
                callingReferenceGroupControl = _callingControl;
                callingReferenceGroupControl.performFormLookup(formRun);

                common = formRun.selectRecordModeSelectedRecord();
                break;
            default:
                throw(error(strfmt("@SYS137393", Error::wrongUseOfFunction(funcname())) ));
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
        public tableId tableId()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequisitioner</Name>
				<Source><![CDATA[
        protected boolean validateRequisitioner(HcmWorkerRecId _requisitionerRecId)
    {
        boolean ret = true;

        if (!_requisitionerRecId)
        {
            ret = false;

            error("@SYS311072");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>