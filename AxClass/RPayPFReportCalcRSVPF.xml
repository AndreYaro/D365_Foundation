<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportCalcRSVPF</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportCalcRSVPF extends RPayPFReportCalc
{
    ReportPeriod_RU payPeriodStart, payPeriodEnd;
    boolean         groupByPayPeriod;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        crossPeriods = new Set(Types::Enum);
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcPlainData</Name>
				<Source><![CDATA[
    protected container calcPlainData(ReportPeriod_RU _calcPeriod = datenull())
    {
        container       ret;
        Range           corrPeriodRange = SysQuery::range(corPeriodStart, corPeriodEnd);
        Range           payPeriodRange = SysQuery::range(payPeriodStart, payPeriodEnd);
        ReportPeriod_RU corrPeriod, payPeriod;

        qrSum.reset();
        this.modifyQuery(qrSum.query(),
                         payPeriodRange,
                         corrPeriodRange);

        while (qrSum.next())
        {
            fundEmplSum = qrSum.get(tablenum(RPayFundEmplSum));

            corrPeriod      = fundEmplSum.CorrectedPeriod;
            payPeriod       = fundEmplSum.PayPeriod;
            fundTotalAmount = fundEmplSum.RpayFundTotalAmount;
            baseAmount      = fundEmplSum.BaseAmount;
            fundAmount      = fundEmplSum.FundAmount;

            this.calcDeductions(payPeriod ? queryValue(payPeriod) : payPeriodRange, queryValue(corrPeriod));
            this.calcDeductionsPercentBase(payPeriod ? queryvalue(payPeriod) : payPeriodRange, queryValue(corrPeriod));

            ret += [[[fundTotalAmount, baseAmount, fundAmount], conDeductionAmount, conDeductionAmountPctBase, corrPeriod, payPeriod]];
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    protected void modifyQuery(Query _query, Range _payPeriodRange, Range _corPeriodRange)
    {
        QueryBuildDatasource qbds;

        super(_query, _payPeriodRange, _corPeriodRange);

        qbds = _query.dataSourceTable(tablenum(RPayFundEmplSum));
        qbds.orderMode(OrderMode::GroupBy);
        qbds.addSortField(fieldnum(RPayFundEmplSum, CorrectedPeriod));

        if (groupByPayPeriod)
        {
            qbds.addSortField(fieldnum(RPayFundEmplSum, PayPeriod));
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmGroupByPayPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Boolean parmGroupByPayPeriod(Boolean _groupByPayPeriod = groupByPayPeriod)
    {
        groupByPayPeriod = _groupByPayPeriod;

        return groupByPayPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payReportPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void payReportPeriod(ReportPeriod_RU _payPeriodStart, ReportPeriod_RU _payPeriodEnd)
    {
        payPeriodStart = _payPeriodStart;
        payPeriodEnd   = _payPeriodEnd;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>