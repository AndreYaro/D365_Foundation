<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventoryServiceClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net.Http;

public class InventoryServiceClient
{
    private const str base64HmacKey                     = '';
    private const int MaxAutomaticRedirections          = 5;
    private const int RequestTimeoutMinutes             = 2;
    private const str InventoryServiceName              = 'inventoryservice';
    private const str CorrelationIdKey                  = 'x-ms-correlation-id';
    private SysHttpCommunicationClient httpClient;
    private SysInstrumentationLogger logger;

    private Microsoft.Dynamics.ApplicationPlatform.Environment.IApplicationEnvironment applicationEnvironment;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(boolean _throwOnNonSuccess = true)
    {
        applicationEnvironment = Microsoft.Dynamics.ApplicationPlatform.Environment.EnvironmentFactory::GetApplicationEnvironment();
        logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(InventoryServiceClient));

        var factory = SysHttpCommunicationClientFactory::construct();

        var timeout = new System.TimeSpan(0, RequestTimeoutMinutes, 0);
        var httpClientOptions = this.createHttpClientOptions(timeout, MaxAutomaticRedirections, _throwOnNonSuccess);
        
        SysHttpCommunicationClientBuilder clientBuilder = SysHttpCommunicationClientBuilder::construct(factory);

        clientBuilder
            .setIsCorrelated(true)
            .setIsMonitored(true)
            .setOptions(httpClientOptions);

        httpClient = clientBuilder.createClient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegistrationInfo</Name>
				<Source><![CDATA[
    internal str getRegistrationInfo()
    {
        var baseEndpoint = this.dropSlashInEnd(applicationEnvironment.Infrastructure.IslandUri) + '/InventoryService';
        return this.getRegistration(baseEndpoint);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegistration</Name>
				<Source><![CDATA[
    internal str getRegistration(str _baseEndpoint)
    {
        logger.logInformation(strFmt('BaseEndpoint to GetRegistration: %1', _baseEndpoint));

        var url = this.createUrl(_baseEndpoint, '/registration');
        var request = this.createHttpRequestMessageWithURL('GET', url, null, null);
        var response = httpClient.send(request);
        return response.Content.ReadAsStringAsync().Result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfiguration</Name>
				<Source><![CDATA[
    internal str getConfiguration()
    {
        var request = this.createHttpRequestMessage('GET', null, null, '/configuration');
        var response = httpClient.send(request);
        return response.Content.ReadAsStringAsync().Result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialPushLimit</Name>
				<Source><![CDATA[
    internal str getInitialPushLimit()
    {
        var request = this.createHttpRequestMessage('GET', null, null, '/onHandRecordLimit');
        var response = httpClient.send(request);
        return response.Content.ReadAsStringAsync().Result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartitionSchemaVersion</Name>
				<Source><![CDATA[
    internal str getPartitionSchemaVersion()
    {
        var request = this.createHttpRequestMessage('GET', null, null, '/partitionSchema');
        var response = httpClient.send(request);
        return response.Content.ReadAsStringAsync().Result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPartitionSchemaVersion</Name>
				<Source><![CDATA[
    internal str setPartitionSchemaVersion(int newVersion)
    {
        var request = this.createHttpRequestMessage('POST', null, null, '/UpdatepartitionSchema?newVersion=' + int2Str(newVersion));
        var response = httpClient.send(request);
        return response.Content.ReadAsStringAsync().Result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventSums</Name>
				<Source><![CDATA[
    public container postInventSums(List _inventSumList)
    {
        var request = this.createHttpRequestMessage('POST', _inventSumList, null, '/setonhand/inventorySystem/bulk');
        var response = httpClient.send(request);
        return [response.Content.ReadAsStringAsync().Result, response.headers.GetValues("x-ms-correlation-id")];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventSumsV2</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceSetOnHandBulkResponse postInventSumsV2(List _inventSumList)
    {
        str body;
        InventInventoryDataServiceSetOnHandBulkResponse response;

        var request = this.createHttpRequestMessage('POST', _inventSumList, null, '/setonhand/inventorySystem/bulk');
        var httpResponseMessage = httpClient.send(request);

        // Todo: reuse as a private method.
        if (httpResponseMessage.StatusCode == System.Net.HttpStatusCode::OK)
        {
            body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = FormJSONSerializer::deserializeObjectStrict(classIdGet(response), body);
        }

        response.takeCorrelationId(httpResponseMessage.headers);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postOnhandChangeSchedule</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceBulkPostingResponse postOnhandChangeSchedule(List _onhandChangeSchedule)
    {
        str body;
        InventInventoryDataServiceBulkPostingResponse response;

        var request = this.createHttpRequestMessage('POST', _onhandChangeSchedule, null, '/onhand/changeschedule/bulk');
        var httpResponseMessage = httpClient.send(request);

        if (httpResponseMessage.StatusCode == System.Net.HttpStatusCode::OK)
        {
            body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = FormJSONSerializer::deserializeObjectStrict(classIdGet(response), body);
        }

        response.takeCorrelationId(httpResponseMessage.headers);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventAdjustments</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceBulkPostingResponse postInventAdjustments(List _inventAdjustmentList)
    {
        str body;
        InventInventoryDataServiceBulkPostingResponse response;
        
        var request = this.createHttpRequestMessage('POST', _inventAdjustmentList, null, '/onhand/bulk');
        var httpResponseMessage = httpClient.send(request);
        
        if (httpResponseMessage.StatusCode == System.Net.HttpStatusCode::OK)
        {
            body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = FormJsonSerializer::deserializeObjectStrict(classIdGet(response), body);
        }

        response.takeCorrelationId(httpResponseMessage.headers);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournalTransStatus</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceBulkPostingResponse postJournalTransStatus(List _eventList)
    {
        InventInventoryDataServiceBulkPostingResponse response;
        
        var request = this.createHttpRequestMessage('POST', _eventList, null, '/transaction/aggregated/adjustment/bulk/update');
        var httpResponseMessage = httpClient.send(request);
        
        if (httpResponseMessage.StatusCode == System.Net.HttpStatusCode::OK)
        {
            str body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = FormJsonSerializer::deserializeObjectStrict(classIdGet(response), body);
        }

        response.takeCorrelationId(httpResponseMessage.headers);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSoftReserveList</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceSoftReserveBulkPostingResponse postSoftReserveList(List _inventSoftReserveList)
    {
        str body;
        InventInventoryDataServiceSoftReserveBulkPostingResponse response;
        
        var request = this.createHttpRequestMessage('POST', _inventSoftReserveList, null, '/onhand/reserve/bulk');
        request = this.addFeatureRequestHeaders(request, 'soft-reservation-v2');

        var httpResponseMessage = httpClient.send(request);

        if (httpResponseMessage.StatusCode != System.Net.HttpStatusCode::OK)
        {
            body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = new InventInventoryDataServiceSoftReserveBulkPostingResponse();
            response.parmRawStatusCode(httpResponseMessage.StatusCode);
            response.parmRawBodyMessage(body);
        }
        else
        {
            body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = FormJSONSerializer::deserializeObjectStrict(classIdGet(response), body);
        }

        response.takeCorrelationId(httpResponseMessage.headers);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSoftReserve</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceSoftReservePostingResponse postSoftReserve(InventOnHandSoftReserveEvent _event)
    {
        str body;
        InventInventoryDataServiceSoftReservePostingResponse response;

        var request = this.createHttpRequestMessage('POST', _event, null, '/onhand/reserve');
        request = this.addFeatureRequestHeaders(request, 'soft-reservation-v2');
        var httpResponseMessage = httpClient.send(request);
        
        if (httpResponseMessage.StatusCode != System.Net.HttpStatusCode::OK)
        {
            body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = new InventInventoryDataServiceSoftReservePostingResponse();
            response.parmRawStatusCode(httpResponseMessage.StatusCode);
            response.parmRawBodyMessage(body);
        }
        else
        {
            body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = FormJSONSerializer::deserializeObjectStrict(classIdGet(response), body);
        }
        
        response.takeCorrelationId(httpResponseMessage.headers);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postExactQuery</Name>
				<Source><![CDATA[
    internal InventInventoryDataServiceQueryResponses postExactQuery(InventOnHandExactQueryEvent _event)
    {
        str body;
        InventInventoryDataServiceQueryResponses responses = new InventInventoryDataServiceQueryResponses();

        var request = this.createHttpRequestMessage('POST', _event, null, '/onhand/exactQuery');
        var httpResponseMessage = httpClient.send(request);
        
        body = httpResponseMessage.Content.ReadAsStringAsync().Result;
        responses.parmRawStatusCode(httpResponseMessage.StatusCode);
        responses.parmRawBodyMessage(body);
        List res;

        if (httpResponseMessage.StatusCode == System.Net.HttpStatusCode::OK)
        {
            if (InventInventoryDataServiceIndexQueryDeserializeFlight::instance().isEnabled())
            {
                res =  FormJSONSerializer::deserializeCollectionStrict(classNum(List), body, Types::Class, classStr(InventInventoryDataServiceQueryResponse)) as List;
            }
            else
            {
                res =  FormJSONSerializer::deserializeCollection(classNum(List), body, Types::Class, classStr(InventInventoryDataServiceQueryResponse)) as List;
            }
            responses.parmQueryResponses(res);
        }
        
        responses.takeCorrelationId(httpResponseMessage.headers);

        return responses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postIndexQuery</Name>
				<Source><![CDATA[
    internal InventInventoryDataServiceQueryResponses postIndexQuery(InventOnHandIndexQueryEvent _event)
    {
        str body;
        InventInventoryDataServiceQueryResponses responses = new InventInventoryDataServiceQueryResponses();

        var request = this.createHttpRequestMessage('POST', _event, null, '/onhand/indexQuery');
        var httpResponseMessage = httpClient.send(request);
        
        body = httpResponseMessage.Content.ReadAsStringAsync().Result;
        responses.parmRawStatusCode(httpResponseMessage.StatusCode);
        responses.parmRawBodyMessage(body);

        if (httpResponseMessage.StatusCode == System.Net.HttpStatusCode::OK)
        {
            var res =  FormJSONSerializer::deserializeCollection(classNum(List), body, Types::Class, classStr(InventInventoryDataServiceQueryResponse)) as List;
            responses.parmQueryResponses(res);
        }
        
        responses.takeCorrelationId(httpResponseMessage.headers);

        return responses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resync</Name>
				<Source><![CDATA[
    public container resync(str _ivDataSource = "fno")
    {
        var queryParameters = new Map(Types::String, Types::String);
        queryParameters.insert('dataSource', _ivDataSource);

        var request = this.createHttpRequestMessage('POST', null, queryParameters, '/resync');
        var response = httpClient.send(request);
        return [response.Content.ReadAsStringAsync().Result, response.headers.GetValues("x-ms-correlation-id")];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postResyncJob</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceJobInitiateResponse postResyncJob()
    {
        return this.postJob('/resyncjob');
    }

]]></Source>
			</Method>
			<Method>
				<Name>postResetAtpDataJob</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceJobInitiateResponse postResetAtpDataJob()
    {
        return this.postJob('/onhand/changeschedule/v2/fno/resyncJob');
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJob</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceJobInitiateResponse postJob(str _jobUrl)
    {
        str body;
        InventInventoryDataServiceJobInitiateResponse response;

        var request = this.createHttpRequestMessage('POST', null, null, _jobUrl);

        if (_jobUrl == '/resyncjob')
        {
            str _ivDataSource = "fno";
            var queryParameters = new Map(Types::String, Types::String);
            queryParameters.insert('dataSource', _ivDataSource);
            request = this.createHttpRequestMessage('POST', null, queryParameters, '/resyncjob');
        }

        HttpResponseMessage httpResponseMessage = this.sendRequestWithRetry(request);

        if (httpResponseMessage.StatusCode == System.Net.HttpStatusCode::OK || httpResponseMessage.StatusCode == System.Net.HttpStatusCode::Conflict)
        {
            body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = FormJSONSerializer::deserializeObjectStrict(classIdGet(response), body);
            response.parmRawStatusCode(httpResponseMessage.StatusCode);
        }
        else
        {
            body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = new InventInventoryDataServiceJobInitiateResponse();
            response.parmRawStatusCode(httpResponseMessage.StatusCode);
            response.parmRawBodyMessage(body);
        }

        response.takeCorrelationId(httpResponseMessage.headers);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOngoingResyncJob</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceOngoingJobQueryResponse getOngoingResyncJob()
    {
        return this.getOngoingJob('ResyncJob');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOngoingResyncOnHandScheduleV2Job</Name>
				<Source><![CDATA[
    internal InventInventoryDataServiceOngoingJobQueryResponse getOngoingResyncOnHandScheduleV2Job()
    {
        return this.getOngoingJob('ResyncOnHandScheduleV2Job');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOngoingJob</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceOngoingJobQueryResponse getOngoingJob(str _jobType)
    {
        str body;
        InventInventoryDataServiceOngoingJobQueryResponse response;
        Map queryParameterMap = new Map(Types::String, Types::String);
        queryParameterMap.insert('jobType', _jobType);
        var request = this.createHttpRequestMessage('GET', null, queryParameterMap, '/getOngoingJob');

        HttpResponseMessage httpResponseMessage = this.sendRequestWithRetry(request);

        if (httpResponseMessage.StatusCode == System.Net.HttpStatusCode::OK)
        {
            body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = FormJSONSerializer::deserializeObjectStrict(classIdGet(response), body);
        }
        else
        {
            body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = new InventInventoryDataServiceOngoingJobQueryResponse();
            response.parmRawStatusCode(httpResponseMessage.StatusCode);
            response.parmRawBodyMessage(body);
        }

        response.takeCorrelationId(httpResponseMessage.headers);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureStatus</Name>
				<Source><![CDATA[
    internal boolean getFeatureStatus(str _featureType)
    {
        var request = this.createHttpRequestMessage('GET', null, null, '/configuration');

        HttpResponseMessage httpResponseMessage = this.sendRequestWithRetry(request);

        if (httpResponseMessage.StatusCode == System.Net.HttpStatusCode::OK)
        {
            str body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            Newtonsoft.Json.Linq.JObject response = Newtonsoft.Json.JsonConvert::DeserializeObject(body);

            if (_featureType == 'scheduleConfiguration')
            {
                Newtonsoft.Json.Linq.JObject scheduleConfiguration = response.GetValue('scheduleConfiguration');
                Newtonsoft.Json.Linq.JValue isEnabled = scheduleConfiguration.GetValue('isEnabled');

                return isEnabled.Value;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJobProgress</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceJobProgressResponse getJobProgress(str _jobId)
    {
        str body;
        InventInventoryDataServiceJobProgressResponse response;
        Map queryParameterMap = new Map(Types::String, Types::String);
        queryParameterMap.insert('jobId', _jobId);
        var request = this.createHttpRequestMessage('GET', null, queryParameterMap, '/getJobProgress');

        HttpResponseMessage httpResponseMessage = this.sendRequestWithRetry(request);

        if (httpResponseMessage.StatusCode == System.Net.HttpStatusCode::OK)
        {
            body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = FormJSONSerializer::deserializeObjectStrict(classIdGet(response), body);
        }
        else
        {
            body = httpResponseMessage.Content.ReadAsStringAsync().Result;
            response = new InventInventoryDataServiceJobProgressResponse();
            response.parmRawStatusCode(httpResponseMessage.StatusCode);
            response.parmRawBodyMessage(body);
        }

        response.takeCorrelationId(httpResponseMessage.headers);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postWHSInventReserves</Name>
				<Source><![CDATA[
    public container postWHSInventReserves(List _whsInventReserveList)
    {
        var request = this.createHttpRequestMessage('POST', _whsInventReserveList, null, '/setonhand/inventorySystem/WHS/bulk');
        var response = httpClient.send(request);
        return [response.Content.ReadAsStringAsync().Result, response.headers.GetValues("x-ms-correlation-id")];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCommerceIntegration</Name>
				<Source><![CDATA[
    public container initializeCommerceIntegration()
    {
        var request = this.createHttpRequestMessage('POST', null, null, '/configuration/initializeCommerce');
        var response = httpClient.send(request);

        return [response.Content.ReadAsStringAsync().Result, response.headers.GetValues("x-ms-correlation-id")];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTransactionConfiguration</Name>
				<Source><![CDATA[
    public container initializeTransactionConfiguration(str activityId)
    {
        var queryParameters = new Map(Types::String, Types::String);
        queryParameters.insert('adjustmentActivityId', activityId);
        var request = this.createHttpRequestMessage('POST', null, queryParameters, '/configuration/initializeTransaction');
        var response = httpClient.send(request);

        return [response.Content.ReadAsStringAsync().Result, response.headers.GetValues("x-ms-correlation-id")];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConfiguration</Name>
				<Source><![CDATA[
    public container updateConfiguration()
    {
        var request = this.createHttpRequestMessage('POST', null, null, '/configuration/update');
        var response = httpClient.send(request);

        return [response.Content.ReadAsStringAsync().Result, response.headers.GetValues("x-ms-correlation-id")];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFeatureInService</Name>
				<Source><![CDATA[
    public container updateFeatureInService(str _featureType, boolean _isEnabled)
    {
        var queryParameters = new Map(Types::String, Types::String);
        queryParameters.insert('featureType', _featureType);
        queryParameters.insert('isEnabled', strFmt("%1", _isEnabled ? 'true' : 'false'));

        var request = this.createHttpRequestMessage('POST', null, queryParameters, '/configuration/feature');
        var response = httpClient.send(request);

        return [response.Content.ReadAsStringAsync().Result, response.headers.GetValues("x-ms-correlation-id")];
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropSlashInEnd</Name>
				<Source><![CDATA[
    internal str dropSlashInEnd(str _url)
    {
        if (strFind(_url, '/', strLen(_url), 1) == strLen(_url))
        {
            return subStr(_url, 1, strLen(_url)-1);
        }
        return _url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHttpRequestMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected HttpRequestMessage createHttpRequestMessage(str _httpMethod, object _requestContract, Map _queryParameters, str _apiName)
    {
        var url =  this.createUrl(InventInventoryDataServiceParameters::find().InventoryServiceEndpoint, _apiName);
        var request = this.createHttpRequestMessageWithURL(_httpMethod, url, _requestContract, _queryParameters);

        return request;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendRequestWithRetry</Name>
				<Source><![CDATA[
    protected HttpResponseMessage sendRequestWithRetry(HttpRequestMessage request)
    {
        HttpResponseMessage httpResponseMessage;

        try
        {
            httpResponseMessage = httpClient.send(request);
        }
        catch
        {
            if (InventInventoryDataServiceRetryHelper::retryTransientError())
            {
                retry;
            }
        }

        return httpResponseMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHttpRequestMessageWithURL</Name>
				<Source><![CDATA[
    private HttpRequestMessage createHttpRequestMessageWithURL(str _httpMethod, str _url, object _requestContract, Map _queryParameters)
    {
        var requestMessage = this.createRequest(_httpMethod, _url, _queryParameters);
        requestMessage = this.addRequestHeaders(requestMessage);

        str json = '';

        System.Net.Http.Headers.HttpRequestHeaders httpRequestHeaders = requestMessage.Headers;
        if (_httpMethod == 'POST' || _httpMethod == 'PUT')
        {
            httpRequestHeaders.Add('ContentType', 'application/json');

            if (_requestContract)
            {
                json = JsonSerializerExtension::serializeClass(_requestContract);
            }

            requestMessage.Content = new StringContent(json, System.Text.Encoding::UTF8, "application/json");
        }
        return requestMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequest</Name>
				<Source><![CDATA[
    private HttpRequestMessage createRequest(str _requestMethod, str _requestUri, Map _queryParameters)
    {
        System.Net.Http.HttpMethod httpMethod = new System.Net.Http.HttpMethod(_requestMethod);
        
        if (_queryParameters != null && !_queryParameters.empty())
        {
            var enumerator = _queryParameters.getEnumerator();
            _requestUri = _requestUri + "?";
            while (enumerator.moveNext())
            {
                var encodedValue = System.Web.HttpUtility::UrlEncode(enumerator.currentValue());
                _requestUri = _requestUri + enumerator.currentKey() + '=' + encodedValue + '&';
            }
        }

        var httpRequestMessage = new System.Net.Http.HttpRequestMessage(httpMethod, _requestUri);

        return HttpRequestMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHttpClientOptions</Name>
				<Source><![CDATA[
    private SysHttpClientOptions createHttpClientOptions(System.TimeSpan _timeout, int _maxAutomaticRedirections, boolean _throwOnNonSuccess)
    {
        var options = SysHttpClientOptions::construct();
        options.parmTimeout(_timeout);
        options.parmMaxAutomaticRedirections(_maxAutomaticRedirections);
        options.parmThrowOnNonSuccessResponse(_throwOnNonSuccess);

        return options;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRequestHeaders</Name>
				<Source><![CDATA[
    private HttpRequestMessage addRequestHeaders(HttpRequestMessage httpRequestMessage)
    {
        System.Net.Http.Headers.HttpRequestHeaders httpRequestHeaders = httpRequestMessage.Headers;
        httpRequestHeaders.Add('api-version', '1.0');
        httpRequestHeaders.Add('x-ms-environment-id', applicationEnvironment.LCS.LCSEnvironmentId);
        httpRequestHeaders.Add('x-ms-client-tenant-id', applicationEnvironment.Aad.TenantDomainGUID);
        httpRequestHeaders.Add('x-ms-iv-request-source', 'fno');

        if (!this.tryAddSecurityTokenToRequest(httpRequestMessage))
        {
            throw error("@SCM:InventoryServiceFailedToAcquireToken");
        }

        return httpRequestMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFeatureRequestHeaders</Name>
				<Source><![CDATA[
    private HttpRequestMessage addFeatureRequestHeaders(HttpRequestMessage httpRequestMessage, str feature)
    {
        System.Net.Http.Headers.HttpRequestHeaders httpRequestHeaders = httpRequestMessage.Headers;
        httpRequestHeaders.Add('x-ms-iv-feature', feature);
        return httpRequestMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryAddSecurityTokenToRequest</Name>
				<Source><![CDATA[
    private boolean tryAddSecurityTokenToRequest(HttpRequestMessage _httpRequestMessage)
    {
        List scopes = new List(Types::String);
        scopes.addEnd(InventoryServiceName);
        
        boolean isSecurityServiceTokenAddedToRequest;

        try
        {
            isSecurityServiceTokenAddedToRequest = SysHttpCommunicationSecurityServiceClient::addSecurityServiceTokenToRequest(_httpRequestMessage, scopes);
        }
        catch (Exception::Error)
        {
            // because we are passing doNotThrowOnUnsuccessful response underneath
            // if we land here then it means that we parsed the error response from
            // security service then threw Global::error, so we have that OMS telemetry.
         
            if (InventInventoryDataServiceRetryHelper::retryTransientError())
            {
                retry;
            }
            else
            {
                logger.logError('Received an x++ error when fetching security service token.');
                error("Received an x++ error when fetching security service token.");
            }
        }
        catch (Exception::CLRError)
        {
            // meaning we received some .net exception before reaching security service,
            // from System.Net, or aad token retrieval, or certificate loading.
   
            System.Exception clrException = CLRInterop::getLastException();

            if (clrException)
            {
                ApplicationUnhandledExceptionLogger::logCLRException(clrException);
                if (InventInventoryDataServiceRetryHelper::retryTransientError())
                {
                    retry;
                }
                else
                {
                    logger.logError(strFmt('Received a CLR error when fetching security service token. Exception: %1', clrException.ToString()));
                    error(strFmt("Received a CLR error when fetching security service token. Exception: %1", clrException.ToString()));
                }
            }
        }
        catch
        {
            // should not happen
            logger.logError('Received an error when fetching security service token.');
        }

        return isSecurityServiceTokenAddedToRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUrl</Name>
				<Source><![CDATA[
    private str createUrl(str _baseEndpoint, str _apiName)
    {
        var environmentId = applicationEnvironment.LCS.LCSEnvironmentId;
        var endpoint = strFmt('%1/api/environment/%2%3', _baseEndpoint, environmentId, _apiName);

        return endpoint;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>