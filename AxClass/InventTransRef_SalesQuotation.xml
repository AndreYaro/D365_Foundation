<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransRef_SalesQuotation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransRef_SalesQuotation extends InventTransReference
{
    CustInvoiceTrans        custInvoiceTrans;
    CustInvoiceJour         custInvoiceJour;

    SalesQuotationLine      salesQuotationLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
        public CurrencyCode currencyCode()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            return custInvoiceTrans.CurrencyCode;
        }

        return salesQuotationLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
        public Amount discAmount()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            return custInvoiceTrans.DiscAmount;
        }

        return salesQuotationLine.discAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
        public Percent discPercent()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            return custInvoiceTrans.DiscPercent;
        }

        return salesQuotationLine.discPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventVendCust</Name>
				<Source><![CDATA[
        public InventVendCust inventVendCust()
    {
        return InventVendCust::Customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
        public Amount lineAmount()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            return -custInvoiceTrans.LineAmount * factor;
        }

        return -salesQuotationLine.lineAmountExclTax() * factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPrice</Name>
				<Source><![CDATA[
        public Price pcsPrice()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            if (!custInvoiceTrans.RecId)
            {
                return 0;
            }

            return (custInvoiceTrans.Qty * custInvoiceTrans.SalesPrice /
                   (custInvoiceTrans.PriceUnit ? custInvoiceTrans.PriceUnit : 1) +
                    custInvoiceTrans.SalesMarkup) /
                   (custInvoiceTrans.Qty ? custInvoiceTrans.Qty : 1);
        }

        if (!salesQuotationLine.RecId)
        {
            return 0;
        }

        return (salesQuotationLine.SalesQty * salesQuotationLine.SalesPrice /
               (salesQuotationLine.PriceUnit ? salesQuotationLine.PriceUnit : 1) +
                salesQuotationLine.SalesMarkup) /
               (salesQuotationLine.SalesQty ? salesQuotationLine.SalesQty : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
        public Qty qtyUnit()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            return -custInvoiceTrans.Qty * factor;
        }

        return -salesQuotationLine.SalesQty * factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefTrans</Name>
				<Source><![CDATA[
        protected void setRefTrans()
    {
        super();

        if (inventTrans.isUpdatedFinancial())
        {
            select firstonly custInvoiceTrans
                where custInvoiceTrans.InventTransId    == inventTransOrigin.InventTransId
                   && custInvoiceTrans.InvoiceDate      == inventTrans.DateFinancial
                   && custInvoiceTrans.InvoiceId        == inventTrans.InvoiceId
                outer join custInvoiceJour
                    where custInvoiceJour.InvoiceId           == custInvoiceTrans.InvoiceId
                       && custInvoiceJour.InvoiceDate         == custInvoiceTrans.InvoiceDate
                       && custInvoiceJour.SalesId             == custInvoiceTrans.SalesId
                       && custInvoiceJour.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup;
        }
        else
        {
            salesQuotationLine = InventTransOriginSalesQuotationLine::salesQuotationLine(inventTransOrigin.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitId</Name>
				<Source><![CDATA[
        public UnitOfMeasureSymbol unitId()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            return custInvoiceTrans.SalesUnit;
        }

        return salesQuotationLine.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventTransRef_SalesQuotation construct()
    {
        return new InventTransRef_SalesQuotation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>