<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerInquirySum_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the ledger inquiry sum.
/// </summary>
class LedgerInquirySum_CN extends RunBaseBatch implements BatchRetryable
{
    #MacroLib.Admin
    #MacroLib.File
    DialogField         dialogFromMainAccount;
    DialogField         dialogToMainAccount;
    DialogField         dialogFiscalYear;
    DialogField         dialogFiscalPeriod;
    DialogField         dialogFromLevel;
    DialogField         dialogToLevel;

    MainAccountNum      fromAccountNum;
    MainAccountNum      toAccountNum;
    FiscalYearName      fiscalYearName;
    PeriodName          fiscalPeriodName;
    Level               fromAccountLevel;
    Level               toAccountLevel;

    TmpSummarizedGL_CN  tmpSummarizedGL_CN;
    PeriodStart         periodStart;
    PeriodEnd           periodEnd;
    TransDate           startDate;
    TransDate           endDate;
    TempStr             dateStr;
    LedgerAccount       accountStart;

    Counter             numOfLines;
    NoYes               summaryExistTrans;
    NoYes               totalExistTrans;
    NoYes               displayFinalSum;
    QueryRun            queryRun;
    CurrencyCode        companyCurrencyCode;
    LedgerParameters    ledgerParameters;
    boolean             isTreeStructureEnabled;

    recId                           ledgerChartOfAccountsRecId;
    LedgerAccountUtility_CN         accountUtility;
    LedgerSeparator_CN              ledgerSeparator;
    TempStr                         ledgerSeparatorChar;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        fromAccountNum,
        toAccountNum,
        fiscalYearName,
        fiscalPeriodName
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convetMonthToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert month to string.
    /// </summary>
    /// <param name="_periodName">
    /// The period name of fiscalCalendarPeriod table.
    /// </param>
    /// <returns>
    /// Period month.
    /// </returns>
    public MonthName convetMonthToStr(PeriodName _periodName)
    {
        MonthName               periodMonth;
        FiscalCalendarPeriod    fiscalCalendarPeriod;

        select firstonly StartDate from fiscalCalendarPeriod
            where fiscalCalendarPeriod.Name == _periodName;

        periodMonth = date2str(
            fiscalCalendarPeriod.StartDate,
            32,
            0,
            0,
            2,
            0,
            0,
            DateFlags::None);

        return periodMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convetYearToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Coverts year to string.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date of generaljournal line.
    /// </param>
    /// <returns>
    /// year of period string.
    /// </returns>
    public DateDayName convetYearToStr(TransDate _transDate)
    {
        DateDayName periodYear;

        periodYear = int2str(year(_transDate));

        return periodYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create period balance for all general journal lines.
    /// </summary>
    public void createPeriodBalances()
    {
        MainAccount                         mainAccount;
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        DimensionAttributeLevelValueView    dimensionAttributeLevelValueView;
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        Counter                 accountTypeNum;

        AmountMST               totalSummaryBegin;
        AmountMST               totalSummaryEnd;
        AmountMST               totalSummaryDRPeriod;
        AmountMST               totalSummaryCRPeriod;
        AmountMST               totalSummaryDRYear;
        AmountMST               totalSummaryCRYear;
        AmountMST               totalAmountBegin;
        AmountMST               totalAmountEnd;
        AmountMST               totalAmountDRPeriod;
        AmountMST               totalAmountCRPeriod;
        AmountMST               totalAmountDRYear;
        AmountMST               totalAmountCRYear;

        Level                   levelMin;
        Level                   accountLevel;
        NoYes                   firstAccount;
        NoYes                   noTrans;
        NoYes                   isEnd;
        RefRecId                oldRecId;
        MainAccountNum          accountMin;
        MainAccountNum          tempMainAccount;
        Integer                 accountMinLen = accountUtility.getAccountLengthByLevel(1, ledgerChartOfAccountsRecId);

        RecId                   dimensionAttributeMainAccount = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        dateStr = date2str(periodStart, 32, 0, 2, 2, 0, 4, DateFlags::None);

        dateStr = dateStr
            + #delimiterSpace
            + #UserNameSeparator
            + #delimiterSpace
            + date2str(periodEnd, 32, 0, 2, 2, 0, 4, DateFlags::None);

        displayFinalSum = NoYes::No;
        firstAccount    = NoYes::Yes;
        queryRun.reset();

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(MainAccount)))
            {
                mainAccount = queryRun.get(tablenum(MainAccount));
                tempMainAccount = this.removeSeparatorChar(mainAccount.MainAccountId);
                accountLevel = accountUtility.getAccountLevelbyAccountNum(tempMainAccount, ledgerChartOfAccountsRecId);

                if (isTreeStructureEnabled
                    && (accountLevel < fromAccountLevel
                        || (toAccountLevel
                            && accountLevel > toAccountLevel)))
                {
                    // Skip invalid account;
                    continue;
                }

                if (firstAccount == NoYes::Yes)
                {
                    firstAccount    = NoYes::No;
                    accountStart    = mainAccount.MainAccountId;
                    accountTypeNum  = str2int(substr(accountStart, 1, 1));

                    if (isTreeStructureEnabled)
                    {
                        levelMin   = accountLevel;
                        accountMin = substr(accountStart, 1, accountMinLen);
                    }
                }
                noTrans = NoYes::Yes;
                if (mainAccount.RecId
                    && oldRecId != mainAccount.RecId
                    && periodStart != dateNull()
                    && periodEnd != dateNull())
                {
                    oldRecId = mainAccount.RecId;

                    if (isTreeStructureEnabled)
                    {
                        this.insertSumary(
                            accountTypeNum,
                            totalSummaryBegin,
                            totalSummaryEnd,
                            totalSummaryDRPeriod,
                            totalSummaryCRPeriod,
                            totalSummaryDRYear,
                            totalSummaryCRYear,
                            mainAccount);

                        if (accountMin != substr(mainAccount.MainAccountId, 1, accountMinLen))
                        {
                            levelMin = accountLevel;
                        }
                    }

                    if (accountTypeNum != 0
                        && accountTypeNum != str2int(substr(mainAccount.MainAccountId, 1, 1)))
                    {
                        totalSummaryBegin    = 0;
                        totalSummaryEnd      = 0;
                        totalSummaryDRPeriod = 0;
                        totalSummaryCRPeriod = 0;
                        totalSummaryDRYear   = 0;
                        totalSummaryCRYear   = 0;
                        accountTypeNum = str2int(substr(mainAccount.MainAccountId, 1, 1));
                    }

                    tmpSummarizedGL_CN.clear();

                    tmpSummarizedGL_CN.TransDate       = dateStr;
                    tmpSummarizedGL_CN.TransYear       = this.convetYearToStr(periodEnd);
                    tmpSummarizedGL_CN.AccountNum      = mainAccount.MainAccountId;
                    tmpSummarizedGL_CN.AccountName     = mainAccount.localizedName();

                    tmpSummarizedGL_CN.CurrencyCode    = companyCurrencyCode;
                    tmpSummarizedGL_CN.IsPrimary       = NoYes::Yes;

                    select sum(AccountingCurrencyAmount) from generaljournalAccountEntry
                        join RecId from generaljournalEntry
                            where generalJournalEntry.RecId == generaljournalAccountEntry.GeneralJournalEntry
                                && generalJournalEntry.AccountingDate >= startDate
                                && generalJournalEntry.Ledger == Ledger::current()
                        exists join RecId, Type from fiscalCalendarPeriod
                            where fiscalCalendarPeriod.RecId     == generaljournalEntry.FiscalCalendarPeriod
                                && ((generalJournalEntry.AccountingDate <= periodStart && fiscalCalendarPeriod.Type == FiscalPeriodType::Opening)
                                    || (generalJournalEntry.AccountingDate < periodStart && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating))
                        exists join RecId from dimensionAttributeLevelValueView
                            where dimensionAttributeLevelValueView.ValueCombinationRecId == generaljournalAccountEntry.LedgerDimension
                                && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttributeMainAccount
                                && dimensionAttributeLevelValueView.DisplayValue like mainAccount.MainAccountId + #AllFilesName;

                    tmpSummarizedGL_CN.BeginningAmountMST = generaljournalAccountEntry.AccountingCurrencyAmount;

                    if (tmpSummarizedGL_CN.BeginningAmountMST == 0)
                    {
                        tmpSummarizedGL_CN.BeginningBalanceStatus = LedgerBalanceStatus_CN::Balance;
                    }
                    else if (tmpSummarizedGL_CN.BeginningAmountMST < 0)
                    {
                        tmpSummarizedGL_CN.BeginningBalanceStatus = LedgerBalanceStatus_CN::CR;
                        noTrans                                   = NoYes::No;
                        displayFinalSum                           = NoYes::Yes;
                    }
                    else
                    {
                        tmpSummarizedGL_CN.BeginningBalanceStatus = LedgerBalanceStatus_CN::DR;
                        noTrans                                   = NoYes::No;
                        displayFinalSum                           = NoYes::Yes;
                    }
                    tmpSummarizedGL_CN.EndingBalance = tmpSummarizedGL_CN.BeginningAmountMST;

                    while select AccountingCurrencyAmount, TransactionCurrencyAmount, IsCredit from generalJournalAccountEntry
                        join RecId from generalJournalEntry
                            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                                && generalJournalEntry.AccountingDate >= periodStart
                                && generalJournalEntry.AccountingDate <= periodEnd
                                && generalJournalEntry.Ledger == Ledger::current()
                        exists join RecId, Type from fiscalCalendarPeriod
                            where fiscalCalendarPeriod.RecId     == generaljournalEntry.FiscalCalendarPeriod
                                && fiscalCalendarPeriod.Type     == FiscalPeriodType::Operating
                        exists join recId from dimensionAttributeLevelValueView
                            where dimensionAttributeLevelValueView.ValueCombinationRecId == generalJournalAccountEntry.LedgerDimension
                                && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttributeMainAccount
                                && dimensionAttributeLevelValueView.DisplayValue like mainAccount.MainAccountId + #AllFilesName
                    {
                        tmpSummarizedGL_CN.DebitPeriodAmountMST  += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.AccountingCurrencyAmount;
                        tmpSummarizedGL_CN.CreditPeriodAmountMST += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.AccountingCurrencyAmount : 0;
                        tmpSummarizedGL_CN.EndingBalance         += generalJournalAccountEntry.AccountingCurrencyAmount;
                        noTrans         = NoYes::No;
                        displayFinalSum = NoYes::Yes;
                    }

                    if (accountTypeNum == str2int(substr(mainAccount.MainAccountId, 1, 1))
                        && noTrans == NoYes::No)
                    {
                        summaryExistTrans = NoYes::Yes;
                    }

                    accountTypeNum = str2int(substr(mainAccount.MainAccountId, 1, 1));

                    if (isTreeStructureEnabled)
                    {
                        accountMin = substr(mainAccount.MainAccountId, 1, accountMinLen);

                        if (accountLevel == levelMin)
                        {
                            totalSummaryBegin    += tmpSummarizedGL_CN.BeginningAmountMST;
                            totalAmountBegin     += tmpSummarizedGL_CN.BeginningAmountMST;
                            totalSummaryDRPeriod += tmpSummarizedGL_CN.DebitPeriodAmountMST;
                            totalSummaryCRPeriod += tmpSummarizedGL_CN.CreditPeriodAmountMST;
                            totalSummaryEnd      += tmpSummarizedGL_CN.EndingBalance;
                            totalAmountDRPeriod  += tmpSummarizedGL_CN.DebitPeriodAmountMST;
                            totalAmountCRPeriod  += tmpSummarizedGL_CN.CreditPeriodAmountMST;
                            totalAmountEnd       += tmpSummarizedGL_CN.EndingBalance;
                        }
                    }

                    if (ledgerParameters.ExcludeUnusedAccounts_CN == NoYes::Yes
                        && noTrans == NoYes::Yes)
                    {
                        continue;
                    }

                    if (tmpSummarizedGL_CN.EndingBalance == 0)
                    {
                        tmpSummarizedGL_CN.EndingBalanceStatus = LedgerBalanceStatus_CN::Balance;
                    }
                    else if (tmpSummarizedGL_CN.EndingBalance < 0)
                    {
                        tmpSummarizedGL_CN.EndingBalanceStatus = LedgerBalanceStatus_CN::CR;
                    }
                    else
                    {
                        tmpSummarizedGL_CN.EndingBalanceStatus = LedgerBalanceStatus_CN::DR;
                    }

                    tmpSummarizedGL_CN.BeginningAmountMST = abs(tmpSummarizedGL_CN.BeginningAmountMST);
                    tmpSummarizedGL_CN.EndingBalance      = abs(tmpSummarizedGL_CN.EndingBalance);

                    while select AccountingCurrencyAmount, TransactionCurrencyAmount, IsCredit from generalJournalAccountEntry
                        join RecId from generalJournalEntry
                            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                                && generalJournalEntry.AccountingDate >= endDate
                                && generalJournalEntry.AccountingDate <= periodEnd
                                && generalJournalEntry.Ledger == Ledger::current()
                        exists join RecId, Type from fiscalCalendarPeriod
                            where fiscalCalendarPeriod.RecId     == generaljournalEntry.FiscalCalendarPeriod
                                && fiscalCalendarPeriod.Type     == FiscalPeriodType::Operating
                        exists join recId from dimensionAttributeLevelValueView
                            where dimensionAttributeLevelValueView.ValueCombinationRecId == generalJournalAccountEntry.LedgerDimension
                                && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttributeMainAccount
                                && dimensionAttributeLevelValueView.DisplayValue like mainAccount.MainAccountId + #AllFilesName
                    {
                        tmpSummarizedGL_CN.DebitYearAmountMST  += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.AccountingCurrencyAmount;
                        tmpSummarizedGL_CN.CreditYearAmountMST += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.AccountingCurrencyAmount : 0;
                    }

                    if (isTreeStructureEnabled)
                    {
                        if (accountLevel == levelMin)
                        {
                            totalSummaryDRYear += tmpSummarizedGL_CN.DebitYearAmountMST;
                            totalSummaryCRYear += tmpSummarizedGL_CN.CreditYearAmountMST;
                            totalAmountDRYear  += tmpSummarizedGL_CN.DebitYearAmountMST;
                            totalAmountCRYear  += tmpSummarizedGL_CN.CreditYearAmountMST;
                        }
                    }

                    tmpSummarizedGL_CN.insert();
                    if (ledgerParameters.ExcludeUnusedAccounts_CN == NoYes::No)
                    {
                        displayFinalSum = NoYes::Yes;
                    }
                    numOfLines += 1;

                    this.insertGeneralLedger(mainAccount.MainAccountId);
                }
                else
                {
                    isEnd = NoYes::Yes;
                }
            }
        }

        if (displayFinalSum == NoYes::Yes
            && isTreeStructureEnabled)
        {
            this.insertSumary(
                accountTypeNum,
                totalSummaryBegin,
                totalSummaryEnd,
                totalSummaryDRPeriod,
                totalSummaryCRPeriod,
                totalSummaryDRYear,
                totalSummaryCRYear,
                mainAccount,
                NoYes::No,
                isEnd);

            this.insertSumary(
                accountTypeNum,
                totalAmountBegin,
                totalAmountEnd,
                totalAmountDRPeriod,
                totalAmountCRPeriod,
                totalAmountDRYear,
                totalAmountCRYear,
                mainAccount,
                NoYes::Yes,
                isEnd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query statement for running.
    /// </summary>
    protected void createQueryRun()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         range;
        MainAccountNum          fromMainAccountNumModified;
        MainAccountNum          toMainAccountNumModified;

        query = new Query();

        qbds = query.addDataSource(tablenum(MainAccount));
        qbds.allowAdd(QueryAllowAdd::NoFields);
        qbds.addOrderByField(fieldnum(MainAccount, MainAccountId));

        [fromMainAccountNumModified, toMainAccountNumModified] =
            LedgerInquirySum_CN::getModifiedMainAccountParameters(fromAccountNum, toAccountNum);

        range = qbds.addRange(fieldnum(MainAccount, MainAccountId));

        range.value(queryRange(fromMainAccountNumModified, toMainAccountNumModified));

        range = qbds.addRange(fieldNum(MainAccount, LedgerChartOfAccounts));
        range.status(RangeStatus::Hidden);
        range.value(queryValue(LedgerChartOfAccounts::current()));

        qbds = query.addDataSource(tablenum(FiscalCalendarPeriod));
        qbds.allowAdd(QueryAllowAdd::NoFields);
        range = qbds.addRange(fieldnum(FiscalCalendarPeriod, Name));
        if (fiscalPeriodName)
        {
            range.value(queryValue(fiscalPeriodName));
        }

        qbds = qbds.addDataSource(tablenum(FiscalCalendarYear));
        qbds.relations(true);
        range = qbds.addRange(fieldnum(FiscalCalendarYear, Name));
        if (fiscalYearName)
        {
            range.value(queryValue(fiscalYearName));
        }
        qbds.addRange(fieldNum(FiscalCalendarYear, FiscalCalendar)).value(queryValue(CompanyInfoHelper::fiscalCalendarRecId()));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        LedgerInquiryDialogHelper_CN    ledgerInquiryDialogHelperCN = new LedgerInquiryDialogHelper_CN();

        dialog.caption("@SYS319419");

        dialogFromMainAccount = dialog.addFieldValue(extendedtypestr(MainAccountNum), fromAccountNum, "@SYS4081511");
        dialogToMainAccount = dialog.addFieldValue(extendedtypestr(MainAccountNum), toAccountNum, "@SYS4081512");

        dialogFiscalYear = dialog.addFieldValue(extendedTypeStr(FiscalYearName), fiscalYearName, "@SYS127885");
        dialogFiscalPeriod = dialog.addFieldValue(extendedTypeStr(PeriodName), fiscalPeriodName, "@SYS127887");

        ledgerInquiryDialogHelperCN.parmDialogFieldFiscalPeriod(dialogFiscalPeriod);
        ledgerInquiryDialogHelperCN.parmDialogFieldFiscalYear(dialogFiscalYear);

        dialogFiscalPeriod.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(LedgerInquiryDialogHelper_CN, fiscalCalendarPeriodLookUp),
            ledgerInquiryDialogHelperCN);

        dialogFiscalYear.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(LedgerInquiryDialogHelper_CN, yearNameModified),
            ledgerInquiryDialogHelperCN);

        dialogFiscalPeriod.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(LedgerInquiryDialogHelper_CN, periodNameModified),
            ledgerInquiryDialogHelperCN);

        if (isTreeStructureEnabled)
        {
            dialogFromLevel = dialog.addFieldValue(extendedtypestr(Level), fromAccountLevel, "@GLS222747");
            dialogFromLevel.value(1);

            dialogToLevel = dialog.addFieldValue(extendedtypestr(Level), toAccountLevel, "@GLS222748");
            dialogToLevel.value(1);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalPeriodNameAndYearName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Fiscal period name and year name.
    /// </summary>
    /// <returns>
    /// Contianer includes fiscal period name and year name.
    /// </returns>
    public container getFiscalPeriodNameAndYearName()
    {
        return [fiscalPeriodName, fiscalYearName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from dialog.
    /// </summary>
    /// <returns>
    /// Returns true if the operation succeed.
    /// </returns>
    public boolean getFromDialog()
    {
        fromAccountNum = dialogFromMainAccount.value();
        toAccountNum = dialogToMainAccount.value();
        fiscalYearName = dialogFiscalYear.value();
        fiscalPeriodName = dialogFiscalPeriod.value();

        if (isTreeStructureEnabled)
        {
            fromAccountLevel = dialogFromLevel.value();
            toAccountLevel = dialogToLevel.value();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ledger inquiry sum level information.
    /// </summary>
    /// <returns>
    /// Returns the ledger inquiry sum level information.
    /// </returns>
    public container getLevel()
    {
        return [fromAccountLevel, toAccountLevel];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets main account parameters.
    /// </summary>
    /// <returns>
    /// The main account parameters information.
    /// </returns>
    public container getMainAccountParameters()
    {
        return [fromAccountNum, toAccountNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create summary general ledger.
    /// </summary>
    /// <param name="_accountNum">
    /// Account number.
    /// </param>
    public void insertGeneralLedger(MainAccountNum _accountNum)
    {
        GeneralJournalEntry                 generalJournalEntry;
        generaljournalEntry                 generalJournalEntry2;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry2;
        GeneralJournalAccountEntry          generalJournalAccountEntryDetail;
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        DimensionAttributeLevelValueView    dimensionAttributeLevelValueView;
        DimensionAttributeLevelValueView    dimensionAttributeLevelValueView2;

        RecId                               dimensionAttributeMainAccount = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        select firstonly generalJournalAccountEntry
            join recId from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.AccountingDate >= startDate
                    && generalJournalEntry.AccountingDate <= periodEnd
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalAccountEntry.TransactionCurrencyCode != companyCurrencyCode
            exists join RecId, Type from fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId     == generaljournalEntry.FiscalCalendarPeriod
                    && (fiscalCalendarPeriod.Type     == FiscalPeriodType::Opening
                    || fiscalCalendarPeriod.Type     == FiscalPeriodType::Operating)
            exists join recId from dimensionAttributeLevelValueView
                where dimensionAttributeLevelValueView.ValueCombinationRecId == generalJournalAccountEntry.LedgerDimension
                    && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttributeMainAccount
                    && dimensionAttributeLevelValueView.DisplayValue like _accountNum + #AllFilesName;

        if (generalJournalAccountEntry.RecId)
        {
            while select generalJournalAccountEntry2
                    group by TransactionCurrencyCode
                join RecId from generalJournalEntry2
                    where generalJournalEntry2.RecId == generalJournalAccountEntry2.GeneralJournalEntry
                        && generalJournalEntry2.AccountingDate >= startDate
                        && generalJournalEntry2.AccountingDate <= periodEnd
                        && generalJournalEntry2.Ledger == Ledger::current()
                        && generalJournalAccountEntry2.TransactionCurrencyCode != companyCurrencyCode
                exists join RecId, Type from fiscalCalendarPeriod
                    where fiscalCalendarPeriod.RecId     == generalJournalEntry2.FiscalCalendarPeriod
                        && (fiscalCalendarPeriod.Type     == FiscalPeriodType::Opening
                        || fiscalCalendarPeriod.Type     == FiscalPeriodType::Operating)
                exists join recId from dimensionAttributeLevelValueView2
                    where dimensionAttributeLevelValueView2.ValueCombinationRecId == generalJournalAccountEntry2.LedgerDimension
                        && dimensionAttributeLevelValueView2.DimensionAttribute == dimensionAttributeMainAccount
                        && dimensionAttributeLevelValueView2.DisplayValue like _accountNum + #AllFilesName
            {
                tmpSummarizedGL_CN.CurrencyCode          = generalJournalAccountEntry2.TransactionCurrencyCode;
                tmpSummarizedGL_CN.IsPrimary             = NoYes::No;
                tmpSummarizedGL_CN.BeginningAmountCur    = 0;
                tmpSummarizedGL_CN.BeginningAmountMST    = 0;
                tmpSummarizedGL_CN.DebitPeriodAmountCur  = 0;
                tmpSummarizedGL_CN.CreditPeriodAmountCur = 0;
                tmpSummarizedGL_CN.DebitPeriodAmountMST  = 0;
                tmpSummarizedGL_CN.CreditPeriodAmountMST = 0;
                tmpSummarizedGL_CN.DebitYearAmountCur    = 0;
                tmpSummarizedGL_CN.CreditYearAmountCur   = 0;
                tmpSummarizedGL_CN.DebitYearAmountMST    = 0;
                tmpSummarizedGL_CN.CreditYearAmountMST   = 0;
                tmpSummarizedGL_CN.EndingBalanceCur      = 0;
                tmpSummarizedGL_CN.EndingBalance         = 0;

                while select AccountingCurrencyAmount, TransactionCurrencyAmount, IsCredit from generalJournalAccountEntryDetail
                    join RecId from generalJournalEntry
                        where generalJournalEntry.RecId == generalJournalAccountEntryDetail.GeneralJournalEntry
                            && generalJournalAccountEntryDetail.TransactionCurrencyCode == tmpSummarizedGL_CN.CurrencyCode
                            && generalJournalEntry.AccountingDate  >= startDate
                            && generalJournalEntry.Ledger == Ledger::current()
                    exists join RecId, Type from fiscalCalendarPeriod
                        where fiscalCalendarPeriod.RecId     == generalJournalEntry.FiscalCalendarPeriod
                            && ((generalJournalEntry.AccountingDate <= periodStart && fiscalCalendarPeriod.Type == FiscalPeriodType::Opening)
                                || (generalJournalEntry.AccountingDate < periodStart && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating))
                    exists join RecId from dimensionAttributeLevelValueView
                        where dimensionAttributeLevelValueView.ValueCombinationRecId == generalJournalAccountEntryDetail.LedgerDimension
                            && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttributeMainAccount
                            && dimensionAttributeLevelValueView.DisplayValue like _accountNum + #AllFilesName
                {
                    tmpSummarizedGL_CN.BeginningAmountCur += generalJournalAccountEntryDetail.TransactionCurrencyAmount;
                    tmpSummarizedGL_CN.BeginningAmountMST += generalJournalAccountEntryDetail.AccountingCurrencyAmount;
                }
                if (tmpSummarizedGL_CN.BeginningAmountMST == 0)
                {
                    tmpSummarizedGL_CN.BeginningBalanceStatus = LedgerBalanceStatus_CN::Balance;
                }
                else if (tmpSummarizedGL_CN.BeginningAmountMST < 0)
                {
                    tmpSummarizedGL_CN.BeginningBalanceStatus = LedgerBalanceStatus_CN::CR;
                }
                else
                {
                    tmpSummarizedGL_CN.BeginningBalanceStatus = LedgerBalanceStatus_CN::DR;
                }
                tmpSummarizedGL_CN.EndingBalanceCur = tmpSummarizedGL_CN.BeginningAmountCur;
                tmpSummarizedGL_CN.EndingBalance    = tmpSummarizedGL_CN.BeginningAmountMST;

                while select TransactionCurrencyAmount, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntryDetail
                    join RecId from generalJournalEntry
                        where generalJournalEntry.RecId == generalJournalAccountEntryDetail.GeneralJournalEntry
                            && generalJournalEntry.AccountingDate >= periodStart
                            && generalJournalEntry.AccountingDate <= periodEnd
                            && generalJournalEntry.Ledger == Ledger::current()
                            && generalJournalAccountEntryDetail.TransactionCurrencyCode == tmpSummarizedGL_CN.CurrencyCode
                    exists join RecId, Type from fiscalCalendarPeriod
                        where fiscalCalendarPeriod.RecId     == generalJournalEntry.FiscalCalendarPeriod
                            && fiscalCalendarPeriod.Type     == FiscalPeriodType::Operating
                    exists join RecId from dimensionAttributeLevelValueView
                        where dimensionAttributeLevelValueView.ValueCombinationRecId == generalJournalAccountEntryDetail.LedgerDimension
                            && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttributeMainAccount
                            && dimensionAttributeLevelValueView.DisplayValue like _accountNum + #AllFilesName
                {
                    tmpSummarizedGL_CN.DebitPeriodAmountCur  += generalJournalAccountEntryDetail.IsCredit ? 0 : generalJournalAccountEntryDetail.TransactionCurrencyAmount;
                    tmpSummarizedGL_CN.CreditPeriodAmountCur += generalJournalAccountEntryDetail.IsCredit ? -generalJournalAccountEntryDetail.TransactionCurrencyAmount : 0;
                    tmpSummarizedGL_CN.DebitPeriodAmountMST  += generalJournalAccountEntryDetail.IsCredit ? 0 : generalJournalAccountEntryDetail.AccountingCurrencyAmount;
                    tmpSummarizedGL_CN.CreditPeriodAmountMST += generalJournalAccountEntryDetail.IsCredit ? -generalJournalAccountEntryDetail.AccountingCurrencyAmount : 0;

                    tmpSummarizedGL_CN.EndingBalanceCur      += generalJournalAccountEntryDetail.TransactionCurrencyAmount;
                    tmpSummarizedGL_CN.EndingBalance         += generalJournalAccountEntryDetail.AccountingCurrencyAmount;
                }

                while select TransactionCurrencyAmount, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntryDetail
                    join RecId from generalJournalEntry
                        where generalJournalEntry.RecId == generalJournalAccountEntryDetail.GeneralJournalEntry
                            && generalJournalEntry.AccountingDate >= endDate
                            && generalJournalEntry.AccountingDate <= periodEnd
                            && generalJournalEntry.Ledger == Ledger::current()
                            && generalJournalAccountEntryDetail.TransactionCurrencyCode == tmpSummarizedGL_CN.CurrencyCode
                    exists join RecId, Type from fiscalCalendarPeriod
                        where fiscalCalendarPeriod.RecId     == generalJournalEntry.FiscalCalendarPeriod
                            && fiscalCalendarPeriod.Type     == FiscalPeriodType::Operating
                    exists join RecId from dimensionAttributeLevelValueView
                        where dimensionAttributeLevelValueView.ValueCombinationRecId == generalJournalAccountEntryDetail.LedgerDimension
                            && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttributeMainAccount
                            && dimensionAttributeLevelValueView.DisplayValue like _accountNum + #AllFilesName

                {
                    tmpSummarizedGL_CN.DebitYearAmountCur  += generalJournalAccountEntryDetail.IsCredit ? 0 : generalJournalAccountEntryDetail.TransactionCurrencyAmount;
                    tmpSummarizedGL_CN.CreditYearAmountCur += generalJournalAccountEntryDetail.IsCredit ? -generalJournalAccountEntryDetail.TransactionCurrencyAmount : 0;
                    tmpSummarizedGL_CN.DebitYearAmountMST  += generalJournalAccountEntryDetail.IsCredit ? 0 : generalJournalAccountEntryDetail.AccountingCurrencyAmount;
                    tmpSummarizedGL_CN.CreditYearAmountMST += generalJournalAccountEntryDetail.IsCredit ? -generalJournalAccountEntryDetail.AccountingCurrencyAmount : 0;
                }

                if (tmpSummarizedGL_CN.EndingBalance == 0)
                {
                    tmpSummarizedGL_CN.EndingBalanceStatus = LedgerBalanceStatus_CN::Balance;
                }
                else if (tmpSummarizedGL_CN.EndingBalance < 0)
                {
                    tmpSummarizedGL_CN.EndingBalanceStatus = LedgerBalanceStatus_CN::CR;
                }
                else
                {
                    tmpSummarizedGL_CN.EndingBalanceStatus = LedgerBalanceStatus_CN::DR;
                }
                tmpSummarizedGL_CN.BeginningAmountCur = abs(tmpSummarizedGL_CN.BeginningAmountCur);
                tmpSummarizedGL_CN.BeginningAmountMST = abs(tmpSummarizedGL_CN.BeginningAmountMST);
                tmpSummarizedGL_CN.EndingBalanceCur   = abs(tmpSummarizedGL_CN.EndingBalanceCur);
                tmpSummarizedGL_CN.EndingBalance      = abs(tmpSummarizedGL_CN.EndingBalance);

                tmpSummarizedGL_CN.insert();
                numOfLines += 1;
            }

            tmpSummarizedGL_CN.CurrencyCode          = companyCurrencyCode;
            tmpSummarizedGL_CN.IsPrimary             = NoYes::No;
            tmpSummarizedGL_CN.BeginningAmountCur    = 0;
            tmpSummarizedGL_CN.BeginningAmountMST    = 0;
            tmpSummarizedGL_CN.DebitPeriodAmountCur  = 0;
            tmpSummarizedGL_CN.CreditPeriodAmountCur = 0;
            tmpSummarizedGL_CN.DebitPeriodAmountMST  = 0;
            tmpSummarizedGL_CN.CreditPeriodAmountMST = 0;
            tmpSummarizedGL_CN.DebitYearAmountCur    = 0;
            tmpSummarizedGL_CN.CreditYearAmountCur   = 0;
            tmpSummarizedGL_CN.DebitYearAmountMST    = 0;
            tmpSummarizedGL_CN.CreditYearAmountMST   = 0;
            tmpSummarizedGL_CN.EndingBalanceCur      = 0;
            tmpSummarizedGL_CN.EndingBalance         = 0;

            while select TransactionCurrencyAmount, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntryDetail
                join RecId from generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntryDetail.GeneralJournalEntry
                        && generalJournalAccountEntryDetail.TransactionCurrencyCode == tmpSummarizedGL_CN.CurrencyCode
                        && generalJournalEntry.AccountingDate  >= startDate
                        && generalJournalEntry.Ledger == Ledger::current()
                exists join RecId, Type from fiscalCalendarPeriod
                    where fiscalCalendarPeriod.RecId     == generalJournalEntry.FiscalCalendarPeriod
                        && ((generalJournalEntry.AccountingDate <= periodStart && fiscalCalendarPeriod.Type == FiscalPeriodType::Opening)
                            || (generalJournalEntry.AccountingDate < periodStart && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating))
                exists join RecId from dimensionAttributeLevelValueView
                    where dimensionAttributeLevelValueView.ValueCombinationRecId == generalJournalAccountEntryDetail.LedgerDimension
                        && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttributeMainAccount
                        && dimensionAttributeLevelValueView.DisplayValue like _accountNum + #AllFilesName
            {
                tmpSummarizedGL_CN.BeginningAmountCur += generalJournalAccountEntryDetail.TransactionCurrencyAmount;
                tmpSummarizedGL_CN.BeginningAmountMST += generalJournalAccountEntryDetail.AccountingCurrencyAmount;
            }
            if (tmpSummarizedGL_CN.BeginningAmountMST == 0)
            {
                tmpSummarizedGL_CN.BeginningBalanceStatus = LedgerBalanceStatus_CN::Balance;
            }
            else if (tmpSummarizedGL_CN.BeginningAmountMST < 0)
            {
                tmpSummarizedGL_CN.BeginningBalanceStatus = LedgerBalanceStatus_CN::CR;
            }
            else
            {
                tmpSummarizedGL_CN.BeginningBalanceStatus = LedgerBalanceStatus_CN::DR;
            }
            tmpSummarizedGL_CN.EndingBalanceCur = tmpSummarizedGL_CN.BeginningAmountCur;
            tmpSummarizedGL_CN.EndingBalance    = tmpSummarizedGL_CN.BeginningAmountMST;

            while select TransactionCurrencyAmount, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
                join RecId from generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                        && generalJournalEntry.AccountingDate >= periodStart
                        && generalJournalEntry.AccountingDate <= periodEnd
                        && generalJournalEntry.Ledger == Ledger::current()
                        && generalJournalAccountEntry.TransactionCurrencyCode == tmpSummarizedGL_CN.CurrencyCode
                exists join RecId, Type from fiscalCalendarPeriod
                    where fiscalCalendarPeriod.RecId     == generalJournalEntry.FiscalCalendarPeriod
                        && fiscalCalendarPeriod.Type     == FiscalPeriodType::Operating
                exists join RecId from dimensionAttributeLevelValueView
                    where dimensionAttributeLevelValueView.ValueCombinationRecId == generalJournalAccountEntry.LedgerDimension
                        && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttributeMainAccount
                        && dimensionAttributeLevelValueView.DisplayValue like _accountNum + #AllFilesName
            {
                tmpSummarizedGL_CN.DebitPeriodAmountCur  += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.TransactionCurrencyAmount;
                tmpSummarizedGL_CN.CreditPeriodAmountCur += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.TransactionCurrencyAmount : 0;
                tmpSummarizedGL_CN.DebitPeriodAmountMST  += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.AccountingCurrencyAmount;
                tmpSummarizedGL_CN.CreditPeriodAmountMST += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.AccountingCurrencyAmount : 0;

                tmpSummarizedGL_CN.EndingBalanceCur      += generalJournalAccountEntry.TransactionCurrencyAmount;
                tmpSummarizedGL_CN.EndingBalance         += generalJournalAccountEntry.AccountingCurrencyAmount;
            }

            while select TransactionCurrencyAmount, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntryDetail
                join RecId from generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntryDetail.GeneralJournalEntry
                        && generalJournalEntry.AccountingDate >= endDate
                        && generalJournalEntry.AccountingDate <= periodEnd
                        && generalJournalEntry.Ledger == Ledger::current()
                        && generalJournalAccountEntryDetail.TransactionCurrencyCode ==   tmpSummarizedGL_CN.CurrencyCode
                exists join RecId, Type from fiscalCalendarPeriod
                    where fiscalCalendarPeriod.RecId     == generalJournalEntry.FiscalCalendarPeriod
                        && fiscalCalendarPeriod.Type     == FiscalPeriodType::Operating
                exists join recId from dimensionAttributeLevelValueView
                    where dimensionAttributeLevelValueView.ValueCombinationRecId == generalJournalAccountEntryDetail.LedgerDimension
                        && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttributeMainAccount
                        && dimensionAttributeLevelValueView.DisplayValue like _accountNum + #AllFilesName
            {
                tmpSummarizedGL_CN.DebitYearAmountCur  += generalJournalAccountEntryDetail.IsCredit ? 0 : generalJournalAccountEntryDetail.TransactionCurrencyAmount;
                tmpSummarizedGL_CN.CreditYearAmountCur += generalJournalAccountEntryDetail.IsCredit ? -generalJournalAccountEntryDetail.TransactionCurrencyAmount : 0;
                tmpSummarizedGL_CN.DebitYearAmountMST  += generalJournalAccountEntryDetail.IsCredit ? 0 : generalJournalAccountEntryDetail.AccountingCurrencyAmount;
                tmpSummarizedGL_CN.CreditYearAmountMST += generalJournalAccountEntryDetail.IsCredit ? -generalJournalAccountEntryDetail.AccountingCurrencyAmount : 0;
            }

            if (tmpSummarizedGL_CN.EndingBalance == 0)
            {
                tmpSummarizedGL_CN.EndingBalanceStatus = LedgerBalanceStatus_CN::Balance;
            }
            else if (tmpSummarizedGL_CN.EndingBalance < 0)
            {
                tmpSummarizedGL_CN.EndingBalanceStatus = LedgerBalanceStatus_CN::CR;
            }
            else
            {
                tmpSummarizedGL_CN.EndingBalanceStatus = LedgerBalanceStatus_CN::DR;
            }
            tmpSummarizedGL_CN.BeginningAmountCur = abs(tmpSummarizedGL_CN.BeginningAmountCur);
            tmpSummarizedGL_CN.BeginningAmountMST = abs(tmpSummarizedGL_CN.BeginningAmountMST);
            tmpSummarizedGL_CN.EndingBalanceCur   = abs(tmpSummarizedGL_CN.EndingBalanceCur);
            tmpSummarizedGL_CN.EndingBalance      = abs(tmpSummarizedGL_CN.EndingBalance);

            tmpSummarizedGL_CN.insert();
            numOfLines += 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSumary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts summary of the ledger inquiry sum.
    /// </summary>
    /// <param name="_accountTypeNum">
    /// The account type number.
    /// </param>
    /// <param name="_totalBegin">
    /// The total begin amount.
    /// </param>
    /// <param name="_totalEnd">
    /// The total end amount.
    /// </param>
    /// <param name="_totalDRPeriod">
    /// The total DR period amount.
    /// </param>
    /// <param name="_totalCRPeriod">
    /// The total CR period amount.
    /// </param>
    /// <param name="_totalDRYear">
    /// The toatl DR Year.
    /// </param>
    /// <param name="_totalCRYear">
    /// The total CR year.
    /// </param>
    /// <param name="_mainAccount">
    /// The main account information.
    /// </param>
    /// <param name="_isTotal">
    /// The is total flag.
    /// </param>
    /// <param name="_isEnd">
    /// The is end flag.
    /// </param>
    public void insertSumary(
        Counter         _accountTypeNum,
        AmountMST       _totalBegin,
        AmountMST       _totalEnd,
        AmountMST       _totalDRPeriod,
        AmountMST       _totalCRPeriod,
        AmountMST       _totalDRYear,
        AmountMST       _totalCRYear,
        MainAccount     _mainAccount,
        NoYes           _isTotal = NoYes::No,
        NoYes           _isEnd   = NoYes::No)
    {
        MainAccount     mainAccount;

        if (_isTotal == NoYes::Yes
            && totalExistTrans == NoYes::No)
        {
            return;
        }

        if (_accountTypeNum != 0
            && (_isEnd
                || _accountTypeNum != str2int(substr(_mainAccount.MainAccountId, 1, 1)))
            && (summaryExistTrans == NoYes::Yes
                || _isTotal == NoYes::Yes
                || LedgerParameters::find().ExcludeUnusedAccounts_CN == NoYes::No))
        {
            tmpSummarizedGL_CN.clear();

            tmpSummarizedGL_CN.TransDate =
                date2str(periodStart, 32, 0, 2, 2, 0, 4, DateFlags::None)
                + #delimiterSpace
                + #UserNameSeparator
                + #delimiterSpace
                + date2str(periodEnd, 32, 0, 2, 2, 0, 4, DateFlags::None);
            tmpSummarizedGL_CN.TransYear = this.convetYearToStr(periodStart);
            tmpSummarizedGL_CN.IsPrimary = NoYes::Yes;

            if (_isTotal)
            {
                tmpSummarizedGL_CN.AccountName = "@SYS809";
            }
            else
            {
                mainAccount = this.getMainAccountIdAndType(_accountTypeNum);

                boolean isSummary = this.getSummary(mainAccount);

                if (!isSummary)
                {
                    tmpSummarizedGL_CN.AccountName = "@SYS15560";
                }
            }

            tmpSummarizedGL_CN.BeginningAmountMST       = _totalBegin;
            tmpSummarizedGL_CN.DebitPeriodAmountMST     = _totalDRPeriod;
            tmpSummarizedGL_CN.CreditPeriodAmountMST    = _totalCRPeriod;
            tmpSummarizedGL_CN.EndingBalance            = _totalEnd;
            tmpSummarizedGL_CN.DebitYearAmountMST       = _totalDRYear;
            tmpSummarizedGL_CN.CreditYearAmountMST      = _totalCRYear;

            if (tmpSummarizedGL_CN.BeginningAmountMST == 0)
            {
                tmpSummarizedGL_CN.BeginningBalanceStatus = LedgerBalanceStatus_CN::Balance;
            }
            else if (tmpSummarizedGL_CN.BeginningAmountMST < 0)
            {
                tmpSummarizedGL_CN.BeginningBalanceStatus = LedgerBalanceStatus_CN::CR;
            }
            else
            {
                tmpSummarizedGL_CN.BeginningBalanceStatus = LedgerBalanceStatus_CN::DR;
            }

            if (tmpSummarizedGL_CN.EndingBalance == 0)
            {
                tmpSummarizedGL_CN.EndingBalanceStatus = LedgerBalanceStatus_CN::Balance;
            }
            else if (tmpSummarizedGL_CN.EndingBalance < 0)
            {
                tmpSummarizedGL_CN.EndingBalanceStatus = LedgerBalanceStatus_CN::CR;
            }
            else
            {
                tmpSummarizedGL_CN.EndingBalanceStatus = LedgerBalanceStatus_CN::DR;
            }
            tmpSummarizedGL_CN.BeginningAmountMST = abs(tmpSummarizedGL_CN.BeginningAmountMST);
            tmpSummarizedGL_CN.EndingBalance      = abs(tmpSummarizedGL_CN.EndingBalance);
            tmpSummarizedGL_CN.insert();
            numOfLines += 1;
            totalExistTrans   = NoYes::Yes;
            summaryExistTrans = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountIdAndType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account based on account type.
    /// </summary>
    /// <param name = "_accountTypeNum">
    /// The account type number.
    /// </param>
    /// <returns>
    /// The main account.
    /// </returns>
    [Wrappable(true)]
    protected final MainAccount getMainAccountIdAndType(Counter _accountTypeNum)
    {
        MainAccount mainAccount;

        select firstonly mainAccountId, Type from mainAccount
            where mainAccount.mainAccountId like (int2str(_accountTypeNum) + '*')
                && ((mainAccount.Type == DimensionLedgerAccountType::Equity
                    || mainAccount.Type == DimensionLedgerAccountType::Liability
                    || mainAccount.Type == DimensionLedgerAccountType::Asset
                    || mainAccount.Type == DimensionLedgerAccountType::BalanceSheet
                    || mainAccount.Type == DimensionLedgerAccountType::Expense
                    || mainAccount.Type == DimensionLedgerAccountType::Revenue
                    || mainAccount.Type == DimensionLedgerAccountType::ProfitAndLoss)
                    || mainAccount.Type == DimensionLedgerAccountType::Common_CN)
                && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();

        return mainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks and gets the summary based on account type.
    /// </summary>
    /// <param name = "_mainAccount">
    /// The <c>MainAccount</c> record.
    /// </param>
    /// <returns>
    /// true if the summary has been set; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean getSummary(MainAccount _mainAccount)
    {
        boolean isSummary = true;

        switch (_mainAccount.Type)
        {
            case DimensionLedgerAccountType::Asset:
                tmpSummarizedGL_CN.AccountName = "@GLS54650";
                break;
            case DimensionLedgerAccountType::Expense:
                tmpSummarizedGL_CN.AccountName = "@GLS54651";
                break;
            case DimensionLedgerAccountType::Liability:
                tmpSummarizedGL_CN.AccountName = "@GLS54654";
                break;
            case DimensionLedgerAccountType::ProfitAndLoss:
                tmpSummarizedGL_CN.AccountName = "@GLS54658";
                break;
            case DimensionLedgerAccountType::Common_CN:
                if (LedgerParameters::find().CommonAccountType_CN)
                {
                    tmpSummarizedGL_CN.AccountName = "@GLS60462";
                }
                else
                {
                    throw error("@GLS60505");
                }
                break;
            case DimensionLedgerAccountType::Equity:
                tmpSummarizedGL_CN.AccountName = "@GLS54657";
                break;
            default:
                isSummary = false;
        }

        return isSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        companyCurrencyCode = Ledger::accountingCurrency();
        ledgerParameters    = LedgerParameters::find();
        isTreeStructureEnabled = LedgerChartOfAccounts::isTreeStructureEnabled_CN();

        accountUtility  = new LedgerAccountUtility_CN();
        ledgerChartOfAccountsRecId = LedgerChartOfAccounts::current();
        ledgerSeparator = LedgerAccountUtility_CN::findSeparator(ledgerChartOfAccountsRecId);
        ledgerSeparatorChar = LedgerAccountUtility_CN::findSeparatorChar(ledgerSeparator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of lines.
    /// </summary>
    /// <returns>
    /// The number of lines.
    /// </returns>
    public Counter numOfLines()
    {
        return numOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the period balances information.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TmpSummarizedGL_CN</c> class.
    /// </returns>
    public TmpSummarizedGL_CN periodBalances()
    {
        return tmpSummarizedGL_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// The pre process of the ledger inquiry sum.
    /// </summary>
    public void preProcess()
    {
        FiscalCalendarPeriod    fiscalCalendarPeriod;

        NoYes                   firstPeriod = NoYes::Yes;

        this.createQueryRun();

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(FiscalCalendarPeriod)))
            {
                fiscalCalendarPeriod = queryRun.get(tablenum(FiscalCalendarPeriod));

                if (fiscalCalendarPeriod.RecId)
                {
                    if (firstPeriod == NoYes::Yes)
                    {
                        firstPeriod = NoYes::No;
                        periodStart = fiscalCalendarPeriod.StartDate;
                        periodEnd   = fiscalCalendarPeriod.EndDate;
                    }

                    if (periodStart >= fiscalCalendarPeriod.StartDate)
                    {
                        periodStart = fiscalCalendarPeriod.StartDate;
                    }

                    if (periodEnd <= fiscalCalendarPeriod.EndDate)
                    {
                        periodEnd = fiscalCalendarPeriod.EndDate;
                    }
                }
            }
        }

        startDate = LedgerFiscalCalendar::findOpeningStartDateByDate(
            CompanyInfoHelper::fiscalCalendarRecId(),
            periodStart);

        endDate = LedgerFiscalCalendar::findOpeningStartDateByDate(
             CompanyInfoHelper::fiscalCalendarRecId(),
             periodEnd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSeparatorChar</Name>
				<Source><![CDATA[
    private MainAccountNum removeSeparatorChar(MainAccountNum   _accountNum)
    {
        MainAccountNum      tempMainAccountNum;

        if (ledgerSeparator != LedgerSeparator_CN::None)
        {
            tempMainAccountNum = strrem(_accountNum, ledgerSeparatorChar);
        }
        else
        {
            tempMainAccountNum = _accountNum;
        }

        return tempMainAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version    = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the instance of the <c>LedgerInquirySum_CN</c> class.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from information.
    /// </param>
    /// <returns>
    /// Returns true if the validate succeed.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret = true;
        if (fiscalYearName == '')
        {
            // Fiscal year
            ret = checkFailed(strFmt("@SYS39376", "@SYS127885"));
        }

        if (ret
            && fiscalPeriodName == '')
        {
            // Period name
            ret = checkFailed(strFmt("@SYS39376", "@SYS127887"));
        }

        if (ret
            && fromAccountNum
            && toAccountNum
            && fromAccountNum > toAccountNum)
        {
            // From account cannot be greater than To account
            ret = checkFailed(strFmt("@SYS344287", "@SYS4081511", "@SYS4081512"));
        }

        if (ret
            && fromAccountLevel
            && toAccountLevel
            && fromAccountLevel > toAccountLevel)
        {
            // From level cannot be greater than To level
            ret = checkFailed(strFmt("@SYS344287", "@GLS222747", "@GLS222748"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModifiedMainAccountParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets modified main account parameters.
    /// </summary>
    /// <param name="_fromMainAccountNum">
    /// The from account number.
    /// </param>
    /// <param name="_toMainAccountNum">
    /// The to account number.
    /// </param>
    /// <returns>
    /// The modified main account parameters.
    /// </returns>
    public static container getModifiedMainAccountParameters(MainAccountNum _fromMainAccountNum, MainAccountNum _toMainAccountNum)
    {
        MainAccountNum          fromMainAccountNumLocal;
        MainAccountNum          toMainAccountNumLocal;
        MainAccount             mainAccount;

        if (!_fromMainAccountNum)
        {
            select minOf(MainAccountId) from mainAccount
                where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();

            fromMainAccountNumLocal = mainAccount.MainAccountId;
        }
        else
        {
            fromMainAccountNumLocal = _fromMainAccountNum;
        }

        if (!_toMainAccountNum)
        {
            select maxOf(MainAccountId) from mainAccount
                where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();

            toMainAccountNumLocal = mainAccount.MainAccountId;
        }
        else
        {
            toMainAccountNumLocal = _toMainAccountNum;
        }

        return [fromMainAccountNumLocal, toMainAccountNumLocal];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>