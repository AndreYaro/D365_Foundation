<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationOperationValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationOperationValidator</c> class contains the operation validating methods of all the bank reconciliation operations.
/// </summary>
internal final class BankReconciliationOperationValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isAnyBatchJobProcessingOnRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether any batch is processing on record.
    /// </summary>
    /// <param name = "_tableId">The table id of source table.</param>
    /// <param name = "_recId">The record id source table.</param>
    /// <returns>true if the any batch is processing on record, else false.</returns>
    internal static boolean isAnyBatchJobProcessingOnRecord(TableId _tableId, RecId _recId)
    {
        BankBatchProcessingTracking tracking = BankBatchProcessingTracking::findAnyTypeFirstProcessingBySource(_tableId, _recId);
        return tracking.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAnyBatchJobProcessingOnRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether any batch is processing on record and shows warning message.
    /// </summary>
    /// <param name = "_tableId">The table id of source table.</param>
    /// <param name = "_recId">The record id source table.</param>
    /// <returns>true if the any batch is processing on record, else false.</returns>
    internal static boolean validateAnyBatchJobProcessingOnRecord(TableId _tableId, RecId _recId)
    {
        boolean ret = true;
        BankBatchProcessingTracking tracking;

        tracking = BankBatchProcessingTracking::findAnyTypeFirstProcessingBySource(_tableId, _recId);

        if (tracking.RecId)
        {
            switch (_tableId)
            {
                case tableNum(BankStmtISOAccountStatement):
                    BankStmtISOAccountStatement statement = BankStmtISOAccountStatement::find(_recId);
                    ret = checkFailed(strFmt(
                        "@Bank:BankBatchProcessingTrackingOnRecordWarning",
                        tracking.BatchJob,
                        BankStatementPostController::concatenateBatchJobCaption(tracking.BankReconciliationOperationType),
                        statement.Identification));
                    break;
                case tableNum(BankStmtISOReportEntry):
                    BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(_recId);
                    ret = checkFailed(strFmt(
                        "@Bank:BankBatchProcessingTrackingOnRecordWarning",
                        tracking.BatchJob,
                        BankStatementPostController::concatenateBatchJobCaption(tracking.BankReconciliationOperationType),
                        strFmt("@Bank:SpaceConcatenateString", statementLine.BookingDateTime, statementLine.dispBankCurrencyAmount())));
                    break;
                default:
                    throw Error(Error::wrongUseOfFunction(funcName()));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>