<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatCalcMarkupAmount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates Intrastat charges amounts.
/// </summary>
class IntrastatCalcMarkupAmount
{
    AmountMST statisticalAmount;
    private AmountMST statisticalTransactionCurrencyAmount;
    AmountMST invoiceAccountingCurrencyAmount;
    AmountCur invoiceTransactionCurrencyAmount;

    CurrencyCode transactionCurrency;

    boolean isLegalEntityInEEU;
    boolean useFulfillmentDate;
    IntrastatCalcAmountMSTByExchType calcByExchType;
    str exchRateErrorMessage;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates amounts from source header and line.
    /// </summary>
    /// <param name="_headerSource">
    /// <c>CustVendInvoiceJour</c> buffer.
    /// </param>
    /// <param name="_lineSource">
    /// <c>CustVendInvoiceTrans</c> buffer.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws exception if source is not customer, vendor or project invoice.
    /// </exception>
    public void calc(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
        container amounts;

        switch (_headerSource.TableId)
        {
            case tableNum(CustInvoiceJour):
            case tableNum(VendInvoiceJour):
            case tableNum(ProjInvoiceJour):
                amounts = this.calcInvoiceMarkupAmount(_headerSource, _lineSource);
                break;

            case tableNum(CustPackingSlipJour):
            case tableNum(VendPackingSlipJour):
                amounts = this.calcPackingSlipMarkupAmount(_headerSource, _lineSource);
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        [statisticalAmount, statisticalTransactionCurrencyAmount, invoiceAccountingCurrencyAmount, invoiceTransactionCurrencyAmount] = amounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts class instance to the string format.
    /// </summary>
    /// <returns>
    /// Class instance in the string format.
    /// </returns>
    public str toString()
    {
        #define.Prefix ('\%1 = \%2')

        str toString =
            strFmt(#Prefix, methodStr(IntrastatCalcMarkupAmount, parmInvoiceAccountingCurrencyAmount), this.parmInvoiceAccountingCurrencyAmount()) +
            ' ' +
            strFmt(#Prefix, methodStr(IntrastatCalcMarkupAmount, parmTransactionCurrency), this.parmTransactionCurrency()) +
            ' ' +
            strFmt(#prefix, methodStr(IntrastatCalcMarkupAmount, parmInvoiceTransactionCurrencyAmount), this.parmInvoiceTransactionCurrencyAmount()) +
            ' ' +
            strFmt(#prefix, methodStr(IntrastatCalcMarkupAmount, parmStatisticalAmount), this.parmStatisticalAmount());

        if (isLegalEntityInEEU)
        {
            toString += ' ' + strFmt(#Prefix, methodStr(IntrastatCalcMarkupAmount, parmExchRateErrorMessage), this.parmExchRateErrorMessage());
        }

        return toString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IntrastatCalcMarkupAmount construct()
    {
        return new IntrastatCalcMarkupAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchRateErrorMessage</Name>
				<Source><![CDATA[
    public str parmExchRateErrorMessage(str _exchRateErrorMessage = exchRateErrorMessage)
    {
        exchRateErrorMessage = _exchRateErrorMessage;
        return exchRateErrorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    public AmountMST parmInvoiceAccountingCurrencyAmount(AmountMST _invoiceAccountingCurrencyAmount = invoiceAccountingCurrencyAmount)
    {
        invoiceAccountingCurrencyAmount = _invoiceAccountingCurrencyAmount;
        return invoiceAccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    public AmountCur parmInvoiceTransactionCurrencyAmount(AmountCur _invoiceTransactionCurrencyAmount = invoiceTransactionCurrencyAmount)
    {
        invoiceTransactionCurrencyAmount = _invoiceTransactionCurrencyAmount;
        return invoiceTransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatisticalAmount</Name>
				<Source><![CDATA[
    public AmountMST parmStatisticalAmount(AmountMST _statisticalAmount = statisticalAmount)
    {
        statisticalAmount = _statisticalAmount;
        return statisticalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatisticalTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    public AmountMST parmStatisticalTransactionCurrencyAmount(AmountMST _statisticalTransactionCurrencyAmount = statisticalTransactionCurrencyAmount)
    {
        statisticalTransactionCurrencyAmount = _statisticalTransactionCurrencyAmount;
        return statisticalTransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrency(CurrencyCode _transactionCurrency = transactionCurrency)
    {
        transactionCurrency = _transactionCurrency;
        return transactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        IntrastatParameters intrastatParm = IntrastatParameters::find();
        isLegalEntityInEEU = IntrastatParameters::isLegalEntityInEEU();

        if (isLegalEntityInEEU && intrastatParm.IntrastatExchRateType)
        {
            useFulfillmentDate = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU])
                && intrastatParm.IntrastatCalcMethod_HU == IntrastatCalcMethod_HU::FulfillmentOfContract;

            calcByExchType = IntrastatCalcAmountMSTByExchType::newFromParameters(intrastatParm.IntrastatExchRateType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAccountingAmount</Name>
				<Source><![CDATA[
    private AmountMST calcAccountingAmount(MarkupTrans _markupTrans, TransDate _exchRateDate)
    {
        AmountMST amount;

        if (calcByExchType)
        {
            amount = this.calcByExchType(_markupTrans.CalculatedAmount,
                _markupTrans.CurrencyCode,
                _exchRateDate ? _exchRateDate : _markupTrans.TransDate);
        }
        else if (_markupTrans.CalculatedAmountMST_W)
        {
            amount = _markupTrans.CalculatedAmountMST_W;
        }
        else if (_markupTrans.CalculatedAmount)
        {
            amount = CurrencyExchangeHelper::mstAmount(_markupTrans.CalculatedAmount, _markupTrans.CurrencyCode, _markupTrans.TransDate);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcByExchType</Name>
				<Source><![CDATA[
    private AmountMST calcByExchType(AmountCur _amountCur, CurrencyCode _currencyCode, TransDate _transDate)
    {
        AmountMST amount = calcByExchType.calc(_amountCur, _currencyCode, _transDate);

        if (!exchRateErrorMessage)
        {
            exchRateErrorMessage = calcByExchType.exchRateErrorMessage();
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHeaderMarkupAmount</Name>
				<Source><![CDATA[
    private container calcHeaderMarkupAmount(CustVendInvoiceJour _headerSource)
    {
        TransDate exchRateDate;
        container cacheKey, amounts;

        cacheKey = [_headerSource.TableId, _headerSource.RecId, funcName()];
        amounts = this.getCachedValue(cacheKey);

        if (amounts == conNull())
        {
            if (useFulfillmentDate && _headerSource.TableId != tableNum(ProjInvoiceJour)) // No field IntrastatFulfillmentDate_HU in ProjInvoiceJour
            {
                exchRateDate = _headerSource.IntrastatFulfillmentDate_HU;
            }

            amounts = this.calcMarkupAmount(_headerSource.TableId, _headerSource.RecId, exchRateDate);

            this.setCachedValue(cacheKey, amounts);
        }

        return amounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceMarkupAmount</Name>
				<Source><![CDATA[
    private container calcInvoiceMarkupAmount(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
        AmountMST headerStatAmount, lineStatAmount;
        AmountMST headerInvoiceAccAmount, lineInvoiceAccAmount;
        AmountCur headerInvoiceTransAmount, lineInvoiceTransAmount, headerStatTransAmount, lineStatTransAmount;
        real lineDistributionFactor;

        this.initInvoiceTransactionCurrency(_lineSource);

        // Header charges
        [headerStatAmount, headerStatTransAmount, headerInvoiceAccAmount, headerInvoiceTransAmount] = this.calcHeaderMarkupAmount(_headerSource);

        if (!exchRateErrorMessage)
        {
            // Line charges
            [lineStatAmount, lineStatTransAmount, lineInvoiceAccAmount, lineInvoiceTransAmount] = this.calcLineMarkupAmount(_lineSource);
        }

        // Distribute header charges over line
        if (headerStatAmount || headerStatTransAmount || headerInvoiceAccAmount || headerInvoiceTransAmount)
        {
            lineDistributionFactor = this.calcLineDistributionFactor(_headerSource, _lineSource);
        }

        return [lineStatAmount + headerStatAmount * lineDistributionFactor,
            lineStatTransAmount + headerStatTransAmount * lineDistributionFactor,
            lineInvoiceAccAmount + headerInvoiceAccAmount * lineDistributionFactor,
            lineInvoiceTransAmount + headerInvoiceTransAmount * lineDistributionFactor];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDistributionFactor</Name>
				<Source><![CDATA[
    private real calcLineDistributionFactor(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
        CustVendInvoiceTrans invoiceTrans;
        container cacheKey, cachedInvoiceAmount;
        AmountCur invoiceAmount;
        real lineDistributionFactor;

        cacheKey = [_headerSource.TableId, _headerSource.RecId, funcName()];
        cachedInvoiceAmount = this.getCachedValue(cacheKey);

        if (cachedInvoiceAmount == conNull())
        {
            invoiceTrans = new DictTable(_lineSource.TableId).makeRecord();

            select sum(LineAmount) from invoiceTrans
            where invoiceTrans.InvoiceNum == _headerSource.InvoiceNum
                && invoiceTrans.InvoiceDate == _headerSource.InvoiceDate
                && invoiceTrans.LineAmount > 0;

            invoiceAmount = invoiceTrans.LineAmount;

            select sum(LineAmount) from invoiceTrans
            where invoiceTrans.InvoiceNum == _headerSource.InvoiceNum
                && invoiceTrans.InvoiceDate == _headerSource.InvoiceDate
                && invoiceTrans.LineAmount < 0;

            invoiceAmount -= invoiceTrans.LineAmount;

            this.setCachedValue(cacheKey, [invoiceAmount]);
        }
        else
        {
            [invoiceAmount] = cachedInvoiceAmount;
        }

        if (invoiceAmount)
        {
            lineDistributionFactor = abs(_lineSource.LineAmount) / invoiceAmount;
        }

        return lineDistributionFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineMarkupAmount</Name>
				<Source><![CDATA[
    private container calcLineMarkupAmount(CustVendInvoiceTrans _lineSource)
    {
        TransDate exchRateDate;

        if (useFulfillmentDate)
        {
            exchRateDate = _lineSource.IntrastatFulfillmentDate_HU;
        }

        return this.calcMarkupAmount(_lineSource.TableId, _lineSource.RecId, exchRateDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMarkupAmount</Name>
				<Source><![CDATA[
    private container calcMarkupAmount(TableId _transTableId, RecId _transRecId, TransDate _exchRateDate)
    {
        MarkupTable markupTable;
        MarkupTrans markupTrans;
        AmountMST accAmount;
        AmountMST statAmount;
        AmountMST invoiceAccAmount;
        AmountCur statTransAmount;
        AmountCur transAmount;
        AmountCur invoiceTransAmount;

        while select markupTrans
        where markupTrans.TransRecId == _transRecId
            && markupTrans.TransTableId == _transTableId
            && !markupTrans.IsDeleted
        join markupTable
            where markupTable.ModuleType == markupTrans.ModuleType
                && markupTable.MarkupCode == markupTrans.MarkupCode
                && (markupTable.IncludeIntoIntrastatInvoiceValue || markupTable.IncludeIntoIntrastatStatisticalValue)
        {
            accAmount = this.calcAccountingAmount(markupTrans, _exchRateDate);

            if (exchRateErrorMessage)
            {
                return [0, 0, 0, 0]; 
            }

            transAmount = this.calcTransactionAmount(markupTrans);

            if (markupTable.IncludeIntoIntrastatStatisticalValue)
            {
                statAmount += accAmount;
                statTransAmount += transAmount;
            }

            if (markupTable.IncludeIntoIntrastatInvoiceValue)
            {
                invoiceAccAmount += accAmount; 
                invoiceTransAmount += transAmount;
            }
        }

        return [statAmount, statTransAmount, invoiceAccAmount, invoiceTransAmount]; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPackingSlipMarkupAmount</Name>
				<Source><![CDATA[
    private container calcPackingSlipMarkupAmount(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
        CustInvoicePackingSlipQuantityMatch custInvoicePackingSlipQuantityMatch;
        VendInvoicePackingSlipQuantityMatch vendInvoicePackingSlipQuantityMatch;
        AmountMST totalStatAmountInvoiced;
        AmountMST totalStatTransAmountInvoiced;
        AmountMST totalInvoiceAccAmountInvoiced;
        AmountCur totalInvoiceTransAmountInvoiced;

        void calcMarkupAmountInvoiced(SourceDocumentLine _sourceDocumentLine, Qty _qtyMatched)
        {
            AmountMST statAmount, sourceDocLineStatAmount;
            AmountMST invoiceAccAmount, sourceDocLineInvoiceAccAmount;
            AmountCur statTransAmount, invoiceTransAmount, sourceDocLineInvoiceTransAmount, sourceDocLineStatTransAmount;
            Qty qtyInvoiced;
            CustVendInvoiceTrans invoiceTrans = IntrastatAmountCalc::getInvoiceTransImplFromSourceDocLine(_sourceDocumentLine);

            if (invoiceTrans.TableId == tableNum(CustVendInvoiceTrans))
            {
                return;
            }

            while select invoiceTrans
                where invoiceTrans.SourceDocumentLine == _sourceDocumentLine.RecId
            {
                [statAmount, statTransAmount, invoiceAccAmount, invoiceTransAmount] =
                    this.calcInvoiceMarkupAmount(invoiceTrans.CustVendInvoiceTrans::custVendInvoiceJour(), invoiceTrans);

                sourceDocLineStatAmount += statAmount;
                sourceDocLineStatTransAmount += statTransAmount;
                sourceDocLineInvoiceAccAmount += invoiceAccAmount;
                sourceDocLineInvoiceTransAmount += invoiceTransAmount;

                qtyInvoiced += invoiceTrans.StockedProduct ? invoiceTrans.InventQty : invoiceTrans.Qty;
            }

            if (qtyInvoiced)
            {
                totalStatAmountInvoiced += (sourceDocLineStatAmount / qtyInvoiced) * _qtyMatched;
                totalStatTransAmountInvoiced += (sourceDocLineStatTransAmount / qtyInvoiced) * _qtyMatched;
                totalInvoiceAccAmountInvoiced += (sourceDocLineInvoiceAccAmount / qtyInvoiced) * _qtyMatched;
                totalInvoiceTransAmountInvoiced += (sourceDocLineInvoiceTransAmount / qtyInvoiced) * _qtyMatched;
            }
        }

        if (_lineSource.TableId == tableNum(CustPackingSlipTrans))
        {
            SourceDocumentLine sourceDocumentLine;

            sourceDocumentLine.TypeEnumName = enumStr(SourceDocumentLine_CustomerInvoice);
            sourceDocumentLine.TypeEnumValue = SourceDocumentLine_CustomerInvoice::CustomerInvoiceLine;

            while select InvoiceSourceDocumentLine, InventQuantity, Quantity from custInvoicePackingSlipQuantityMatch
                where custInvoicePackingSlipQuantityMatch.PackingSlipSourceDocumentLine == _lineSource.SourceDocumentLine
            {
                sourceDocumentLine.RecId = custInvoicePackingSlipQuantityMatch.InvoiceSourceDocumentLine;
                calcMarkupAmountInvoiced(
                    sourceDocumentLine,
                    _lineSource.StockedProduct ? custInvoicePackingSlipQuantityMatch.InventQuantity : custInvoicePackingSlipQuantityMatch.Quantity);
            }
        }
        else
        {
            while select InvoiceSourceDocumentLine, InventQuantity, Quantity from vendInvoicePackingSlipQuantityMatch
                where vendInvoicePackingSlipQuantityMatch.PackingSlipSourceDocumentLine == _lineSource.SourceDocumentLine
            {
                calcMarkupAmountInvoiced(
                    SourceDocumentLine::find(vendInvoicePackingSlipQuantityMatch.InvoiceSourceDocumentLine),
                    _lineSource.StockedProduct ? vendInvoicePackingSlipQuantityMatch.InventQuantity : vendInvoicePackingSlipQuantityMatch.Quantity);
            }
        }

        return [totalStatAmountInvoiced, totalStatTransAmountInvoiced, totalInvoiceAccAmountInvoiced, totalInvoiceTransAmountInvoiced];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransactionAmount</Name>
				<Source><![CDATA[
    private AmountCur calcTransactionAmount(MarkupTrans _markupTrans)
    {
        AmountCur amount;

        if (_markupTrans.CurrencyCode == transactionCurrency)
        {
            amount = _markupTrans.CalculatedAmount;
        }
        else
        {
            if (_markupTrans.CalculatedAmountMST_W)
            {
                amount = CurrencyExchangeHelper::curAmount(_markupTrans.CalculatedAmountMST_W,
                    transactionCurrency,
                    _markupTrans.TransDate);
            }
            else
            {
                amount = CurrencyExchangeHelper::curAmount2CurAmount(_markupTrans.CalculatedAmount,
                    _markupTrans.CurrencyCode,
                    transactionCurrency,
                    _markupTrans.TransDate);
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCachedValue</Name>
				<Source><![CDATA[
    private container getCachedValue(container _key)
    {
        return classFactory.globalObjectCache().find(this.cacheScope(), _key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceTransactionCurrency</Name>
				<Source><![CDATA[
    private void initInvoiceTransactionCurrency(CustVendInvoiceTrans _lineSource)
    {
        transactionCurrency = _lineSource.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCachedValue</Name>
				<Source><![CDATA[
    private void setCachedValue(container _key, container _value)
    {
        classFactory.globalObjectCache().insert(this.cacheScope(), _key, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>signedValue</Name>
				<Source><![CDATA[
    private Amount signedValue(MarkupTable _markupTable, MarkupTrans _markupTrans, Amount _amount)
    {
        Amount amount;

        if (_markupTrans.TransTableId == tableNum(ProjInvoiceItem) || _markupTrans.TransTableId == tableNum(ProjInvoiceJour))
        {
            if (_markupTable.CustType == MarkupType::CustVend)
            {
                amount = _amount;
            }
            else
            {
                amount = -_amount;
            }
        }
        else
        {
            amount = _markupTrans.signedValue(_amount);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheScope</Name>
				<Source><![CDATA[
    private GlobalObjectCacheScope cacheScope()
    {
        return classId2Name(classIdGet(this)) + '_' + curext();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>