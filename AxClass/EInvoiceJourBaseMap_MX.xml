<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>eInvoiceJourBaseMap_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceJourBaseMap_MX</c> class provides an abstraction to obtain information that is
/// required to create the XML document
/// </summary>
public abstract class eInvoiceJourBaseMap_MX
{
    internal const str ForeignerRFC = 'XEXX010101000';
    internal const str InternalTransferRFC = 'XAXX010101000';
    protected internal EInvoiceCFDIAddressMap transportationAddressMap;
    protected internal EInvoiceCFDIAddressMap unloadedTransportationAddressMap;

    List                    lines;
    ListEnumerator          linesEnumerator;
    List                    negativeTaxAmountList;
    List                    positiveTaxAmountList;
    CustTable               custTable;
    EInvoiceJour_MX         eInvoiceJour;
    EInvoiceCFDIAddressMap  emitentAddressMap;
    EInvoiceCFDIAddressMap  deliveryAddressMap;
    EInvoiceCFDIAddressMap  invoiceAddressMap;
    LogisticsPostalAddress  invoicePostalAddress;
    NoYes                   isPrint;
    Map                     negativeTaxAmountMap;
    Map                     positiveTaxAmountMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a line to the collection of line maps.
    /// </summary>
    /// <param name="_eInvoiceTransBaseMap">An instance of the <c>EInvoiceTransBaseMap_MX</c> concrete class.</param>
    /// <remarks>
    /// Each line of the posted document should be added.
    /// </remarks>
    private void addLine(EInvoiceTransBaseMap_MX _eInvoiceTransBaseMap)
    {
        lines.addEnd(_eInvoiceTransBaseMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>certificateNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the certificate number.
    /// </summary>
    /// <returns>
    /// Certificte number of the document.
    /// </returns>
    public CertificateNumber_MX certificateNumber()
    {
        return eInvoiceJour.CFDICertificateNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the line collection to the next line.
    /// </summary>
    /// <returns>true if the line collection still has elements; otherwise, false.</returns>
    /// <remarks>
    /// Use this method to iterate through the map lines together with the current method.
    /// </remarks>
    public boolean nextLine()
    {
        if (linesEnumerator == null)
        {
            this.resetLines();
        }

        return linesEnumerator.moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current item of the map line collection.
    /// </summary>
    /// <returns>An instance of the <c>EInvoiceTransBaseMap_MX</c> class.</returns>
    /// <remarks>
    /// Use this method to iterate through the map lines.You should call the <c>nextLine</c> method before
    /// the <c>currentLine</c> method to make sure that there is a valid current item.
    /// </remarks>
    public EInvoiceTransBaseMap_MX currentLine()
    {
        return linesEnumerator.current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the map lines enumerator back to the first item.
    /// </summary>
    /// <remarks>
    /// This method is called if the map lines collection must be iterated more than one time.
    /// </remarks>
    public void resetLines()
    {
        linesEnumerator = lines.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxAmountToLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TaxAmounts</c> list.
    /// </summary>
    protected void addTaxAmountToLists()
    {
        TaxTrans    taxTrans;
        QueryRun    queryRun = new QueryRun(this.getTaxTransBaseQuery());

        while (queryRun.next())
        {
            taxTrans =  queryRun.get(tableNum(taxTrans));

            if (!TaxTable::find(taxTrans.TaxCode).NegativeTax)
            {
                negativeTaxAmountList.addEnd(taxTrans); // positive taxValue generate negative taxAmount
            }
            else
            {
                positiveTaxAmountList.addEnd(taxTrans); // negative taxValue generate positive taxAmount
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>eInvoiceDateTimeStamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the CFDIStamp DateTime of the current <c>EInvoicejour_MX</c> record.
    /// </summary>
    /// <returns>The CFDIStamp DateTime of the current <c>EInvoicejour_MX</c> record.</returns>
    public utcdatetime eInvoiceDateTimeStamp()
    {
        return DateTimeUtil::applyTimeZoneOffset(this.eInvoiceJour().CFDIDateTimeStamp, DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>authorizationCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the authorization code of the <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The authorization code.</returns>
    public AuthorizationCode_MX authorizationCode()
    {
        return this.eInvoiceJour().AuthorizationCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>authorizationYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the authorization year of the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The authorization year.</returns>
    public AuthorizationYear_MX authorizationYear()
    {
        return this.eInvoiceJour().AuthorizationYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the series of the EInvoiceJour_MX
    /// </summary>
    /// <returns>Source document serie.</returns>
    /// <remarks>
    /// This is the document series, which complements the document number.
    /// </remarks>
    public InvoiceSeries_MX invoiceSeries()
    {
        return this.eInvoiceJour().Series;
    }

]]></Source>
			</Method>
			<Method>
				<Name>certificateInBase64</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the certificate converted in base 64.
    /// </summary>
    /// <returns>The certificate converted in base 64.</returns>
    public str certificateInBase64()
    {
        System.Security.Cryptography.X509Certificates.X509Certificate2  certificate;
        str                                                             certificateInBase64;

        new InteropPermission(InteropKind::ClrInterop).assert();

        certificate = CertificateHelper_MX::getDigitalCertificate(eInvoiceJour.UseAdvCertificateStore,
                                                                  eInvoiceJour.KeyVaultCertificateRef,
                                                                  eInvoiceJour.CertificateSubject);

        certificateInBase64 =  System.Convert::ToBase64String(certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType::Cert));

        CodeAccessPermission::revertAssert();

        return certificateInBase64;
    }

]]></Source>
			</Method>
			<Method>
				<Name>certificateSerialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the certificate serial number that is used by the posted document.
    /// </summary>
    /// <returns>The certificate serial number that is used by the posted document.</returns>
    public SerialCertificationNumber_MX certificateSerialNumber()
    {
        System.Security.Cryptography.X509Certificates.X509Certificate2  certificate;

        str serialNumberHex;
        str serialNumberStr;

        new InteropPermission(InteropKind::ClrInterop).assert();

        certificate = CertificateHelper_MX::getDigitalCertificate(eInvoiceJour.UseAdvCertificateStore,
                                                                  eInvoiceJour.KeyVaultCertificateRef,
                                                                  eInvoiceJour.CertificateSubject);

        serialNumberHex = certificate.get_SerialNumber();
        serialNumberstr = this.hexa2str(serialNumberHex);

        CodeAccessPermission::revertAssert();

        return serialNumberstr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hexa2str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a hexa string into its number representation.
    /// </summary>
    /// <param name = "hexa">An hexa number as a string.</param>
    /// <returns>A number representing the hexa, in string format.</returns>
    protected str hexa2str(str hexa)
    {
        const int hexaCharSize = 2;
        const int hexaExpectedLen = 40;

        str hexaStr;
        int hexaLength = strLen(hexa);

        if (hexaLength != hexaExpectedLen)
        {
            throw error("@Mexico:InvalidCertificateSerialNumber");
        }

        int pos = 1;
        while (pos < hexaLength)
        {
            str hexaChar = subStr(hexa, pos, hexaCharSize);

            int hexaInt = System.Int32::Parse(hexaChar, System.Globalization.NumberStyles::HexNumber);
            hexaStr += num2char(hexaInt);

            pos += hexaCharSize;
        }

        return hexaStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery street of the current logistics postal address.
    /// </summary>
    /// <returns>The delivery street of the current logistics postal address.</returns>
    public LogisticsAddressStreet deliveryStreet()
    {
        return deliveryAddressMap.parmStreet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryStreetNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the street number of the current logistics postal address.
    /// </summary>
    /// <returns>The street number of the current logistics postal address.</returns>
    public LogisticsAddressStreet deliveryStreetNumber()
    {
        return deliveryAddressMap.parmStreetNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCounty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery county name of the current logistics postal address.
    /// </summary>
    /// <returns>The delivery county name of the current logistics postal address.</returns>
    public LogisticsAddressStateId deliveryCounty()
    {
        return deliveryAddressMap.parmCounty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCountyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery county id of the current logistics postal address.
    /// </summary>
    /// <returns>The delivery county id of the current logistics postal address.</returns>
    public LogisticsAddressCountyId deliveryCountyId()
    {
        return deliveryAddressMap.parmCountyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery country region id of the current logistics postal address.
    /// </summary>
    /// <returns>
    /// The delivery country region id of the current logistics postal address.
    /// </returns>
    public LogisticsAddressCountryRegionId deliveryCountryRegionId()
    {
        return deliveryAddressMap.parmCountryRegionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery state ID of the current logistics postal address.
    /// </summary>
    /// <returns>
    /// The delivery state ID that is related to the current logistics postal address.
    /// </returns>
    public LogisticsAddressStateId deliveryStateId()
    {
        return deliveryAddressMap.parmStateId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery city of the current logistics postal address.
    /// </summary>
    /// <returns>The delivery city of current logistics postal address.</returns>
    public LogisticsAddressCityName deliveryCity()
    {
        return deliveryAddressMap.parmCity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryBuildingComplement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the BuildingComplement of the current logistics postal address.
    /// </summary>
    /// <returns>The BuildingComplement of the current logistics postal address.</returns>
    public LogisticsAddressBuildingCompliment deliveryBuildingComplement()
    {
        return deliveryAddressMap.parmBuildingComplement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCityKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery key city of the current logistics postal address.
    /// </summary>
    /// <returns>The delivery city key of current logistics postal address.</returns>
    public LogisticsAddressCityKey deliveryCityKey()
    {
        return deliveryAddressMap.parmCityKey();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery state ID of the current logistics postal address.
    /// </summary>
    /// <returns>The delivery state ID that is related to the current logistics postal address.</returns>
    public LogisticsAddressStatename deliveryState()
    {
        return deliveryAddressMap.parmState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery country region name of the current logistics postal address.
    /// </summary>
    /// <returns>The delivery country region name of the current logistics postal address.</returns>
    public LogisticsAddressCountryRegionShortName deliveryCountryRegion()
    {
        return deliveryAddressMap.parmCountryRegion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery ZIP code of the current logistics postal address.
    /// </summary>
    /// <returns>The delivery ZIP code of the current logistics postal address.</returns>
    public LogisticsAddressZipCodeId deliveryZipCode()
    {
        return deliveryAddressMap.parmZipCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDistrictName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery district name of the current logistics postal address.
    /// </summary>
    /// <returns>The delivery district name of the current logistics postal address.</returns>
    public LogisticsAddressDistrictName deliveryDistrictName()
    {
        return deliveryAddressMap.parmDistrictName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction dateTime of the current <c>EInvoicejour_MX</c> record.
    /// </summary>
    /// <returns>The transaction dateTime of the current <c>EInvoicejour_MX</c> record.</returns>
    public utcdatetime documentDateTime()
    {
        return DateTimeUtil::applyTimeZoneOffset(this.eInvoiceJour().InvoiceDateTime, this.documentTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the timezone applicable for the current <c>EInvoicejour_MX</c> record.
    /// </summary>
    /// <returns>The timeZone applicable for the current <c>EInvoicejour_MX</c> record.</returns>
    protected TimeZone documentTimeZone()
    {
        TimeZone timezone = emitentAddressMap.parmTimezone();
        timezone = timezone ? timezone : DateTimeUtil::getCompanyTimeZone();

        return timeZone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CFDIConfirmNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the information returned by the PAC when the amount of CFDI exceeds the max limit.
    /// </summary>
    /// <returns>
    /// The information returned by the PAC when the amount of CFDI exceeds the max limit.
    /// </returns>
    public EInvoiceCFDIConfirmNumber_MX CFDIConfirmNumber()
    {
        return this.eInvoiceJour().CFDIConfirmNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eInvoiceCFDISATStamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the original string of a CFDI invoice
    /// </summary>
    /// <returns>Returns the original string of a CFDI invoice only for CFDI invoices.</returns>
    public EInvoiceCFDISATCertificate_MX eInvoiceCFDISATStamp()
    {
        return this.eInvoiceJour().CFDISATStamp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eInvoiceCFDIStamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the original string of a CFDI invoice
    /// </summary>
    /// <returns>Returns the original string of a CFDI invoice only for CFDI invoices.</returns>
    public DigitalCertificateSubject eInvoiceCFDIStamp()
    {
        return this.eInvoiceJour().CFDIStamp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eInvoiceOriginalString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the original string of a CFDI invoice
    /// </summary>
    /// <returns>Returns the original string of a CFDI invoice only for CFDI invoices.</returns>
    public EInvoiceCFDIOriginalString_MX eInvoiceOriginalString()
    {
        return this.eInvoiceJour().CFDIOriginalString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eInvoicePurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the purpose string of a CFDI invoice
    /// </summary>
    /// <returns>Returns the purpose string of a CFDI invoice only for CFDI invoices.</returns>
    public EInvoiceExtCodeId_MX eInvoicePurpose()
    {
        return this.eInvoiceJour().cfdiPurpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsRegime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the customs regime string of a CFDI invoice
    /// </summary>
    /// <returns>Returns the customs regime string of a CFDI invoice only for CFDI invoices.</returns>
    [Hookable(false)]
    public CustomsRegime_MX customsRegime()
    {
        return this.eInvoiceJour().CustomsRegime_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>idCCPValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the IdCCP string of a CFDI invoice
    /// </summary>
    /// <returns>Returns the IdCCP string of a CFDI invoice only for CFDI invoices.</returns>
    [Hookable(false)]
    public IdCCP_MX idCCPValue()
    {
        return this.eInvoiceJour().IdCCP_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eInvoiceSATCertificateNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the SAT certificate number
    /// </summary>
    /// <returns>Returns the SAT certificate number of a CFDI invoice.</returns>
    public EInvoiceCFDISATCertificateNumber_MX eInvoiceSATCertificateNumber()
    {
        return this.eInvoiceJour().CFDISATCertificateNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eInvoiceUUID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the UUID (invoice indentifier) of a CFDI invoice
    /// </summary>
    /// <returns>Returns the UUID (invoice indentifier) of a CFDI invoic.</returns>
    public EInvoiceCFDIUUID_MX eInvoiceUUID()
    {
        return this.eInvoiceJour().CFDIUUID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eInvoiceVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the electronic version of the current <c>EInvoiceJour_MX</c> record.
    /// </summary>
    /// <returns>The electronic version of the current <c>EInvoiceJour_MX</c> record.</returns>
    public EnumId eInvoiceVersion()
    {
        return this.eInvoiceJour().CFDIVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eInvoicePaymMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the method of payment of the current <c>EInvoiceJour_MX</c> record.
    /// </summary>
    /// <returns>The method of payment of the current <c>EInvoiceJour_MX</c> record.</returns>
    public str eInvoicePaymMethod()
    {
        return this.eInvoiceJour().PaymMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the street of the current logistics postal address.
    /// </summary>
    /// <returns>The street of the current logistics postal address.</returns>
    public LogisticsAddressStreet emitentStreet()
    {
        return emitentAddressMap.parmStreet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentStreetNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the streetNumber of the posted document.
    /// </summary>
    /// <returns>The streetNumber of the posted document.</returns>
    public LogisticsAddressStreetNumber emitentStreetNumber()
    {
        return emitentAddressMap.parmStreetNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentBuildingComplement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the BuildingComplement of the posted document.
    /// </summary>
    /// <returns>The BuildingComplement of the posted document.</returns>
    public LogisticsAddressBuildingCompliment emitentBuildingComplement()
    {
        return emitentAddressMap.parmBuildingComplement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentCounty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emitent county name of the current logistics postal address.
    /// </summary>
    /// <returns>The emitent county name of the current logistics postal address.</returns>
    /// <remarks>
    /// The emitent is the issuer of the logistics postal address.
    /// </remarks>
    public LogisticsAddressStateId emitentCounty()
    {
        return emitentAddressMap.parmCounty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentCountyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emitent county name of the current logistics postal address.
    /// </summary>
    /// <returns>The emitent county name of the current logistics postal address.</returns>
    /// <remarks>
    /// The emitent is the issuer of the logistics postal address.
    /// </remarks>
    public LogisticsAddressCountyId emitentCountyId()
    {
        return emitentAddressMap.parmCountyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emitent city of the current logistics postal address.
    /// </summary>
    /// <returns>The emitent city of the current logistics postal address.</returns>
    /// <remarks>
    /// The emitent is the issuer of the logistics postal address.
    /// </remarks>
    public LogisticsAddressCityName emitentCity()
    {
        return emitentAddressMap.parmCity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentCityKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emitent city key of the current logistics postal address.
    /// </summary>
    /// <returns>The emitent city key of the current logistics postal address.
    /// </returns>
    public LogisticsAddressCityKey emitentCityKey()
    {
        return emitentAddressMap.parmCityKey();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emitent state of the current logistics postal address.
    /// </summary>
    /// <returns>The emitent state of the current logistics postal address.</returns>
    /// <remarks>
    /// The emitent is the issuer of the logistics postal address.
    /// </remarks>
    public LogisticsAddressStatename emitentState()
    {
        return emitentAddressMap.parmState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emitent country region name of the current logistics postal address.
    /// </summary>
    /// <returns>The emitent country region name of the current logistics postal address.</returns>
    /// <remarks>
    /// The emitent is the issuer of the logistics postal address.
    /// </remarks>
    public LogisticsAddressCountryRegionShortName emitentCountryRegion()
    {
        return emitentAddressMap.parmCountryRegion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emitent state ID of the current logistics postal address.
    /// </summary>
    /// <returns>
    /// The emitent state ID that is related to the current logistics postal address.
    /// </returns>
    public LogisticsAddressStatename emitentStateId()
    {
        return emitentAddressMap.parmStateId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emitent ZIP code of the current logistics postal address.
    /// </summary>
    /// <returns>The emitent ZIP code of the current logistics postal address.</returns>
    /// <remarks>
    /// The emitent is the issuer of the logistics postal address.
    /// </remarks>
    public LogisticsAddressZipCodeId emitentZipCode()
    {
        return emitentAddressMap.parmZipCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentDistrictName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emitent district name of the current logistics postal address.
    /// </summary>
    /// <returns>The emitent district name of the current logistics postal address.</returns>
    /// <remarks>
    /// The emitent is the issuer of the logistics postal address.
    /// </remarks>
    public LogisticsAddressDistrictName emitentDistrictName()
    {
        return emitentAddressMap.parmDistrictName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emitent postal address from the legal entity.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c> object.</returns>
    public LogisticsPostalAddress emitentPostalAddress()
    {
        return CompanyInfo::find().postalAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentPostalAddressFromInventSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emitent postal address from the Site postal address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c> object.</returns>
    internal LogisticsPostalAddress emitentPostalAddressFromInventSite()
    {
        LogisticsPostalAddress postalAddress;
        QueryRun qr = new QueryRun(this.initInventSiteQuery());

        while (qr.next())
        {
            InventSite inventSite = qr.get(tableNum(InventSite));
            LogisticsPostalAddress postalAddressCur = inventSite.logisticsPostalAddress();

            //If in the order exist several sites with different ZIP codes in the postal address, we are clearing the postal address.
            if (postalAddress && postalAddress.ZipCode != postalAddressCur.ZipCode)
            {
                postalAddress = null;
                break;
            }
            else if (!postaLAddress)
            {
                postalAddress = postalAddressCur;
            }
        }

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSiteQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query for receiving postal address from the Site.
    /// </summary>
    /// <returns>The <c>Query</c> object.</returns>
    internal Query initInventSiteQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsInventSite = query.addDataSource(tableNum(InventSite));

        QueryBuildDataSource qbdsInventDim = qbdsInventSite.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getcertificateSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Certification subject that is used in the current <c>EInvoiceJour_MX</c> record.
    /// </summary>
    /// <returns>The certification subject that is used in the current <c>EInvoiceJour_MX</c> record.</returns>
    public DigitalCertificateSubject getcertificateSubject()
    {
        return this.eInvoiceJour().CertificateSubject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyInfo</Name>
				<Source><![CDATA[
    public CompanyInfo getCompanyInfo()
    {
        return CompanyInfo::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> record of the posted document.
    /// </summary>
    /// <returns>The <c>CustTable</c> record of the posted document.</returns>
    public CustTable getCustTable()
    {
        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElectronicInvoiceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current EInvoice parameters.
    /// </summary>
    /// <returns>The current EInvoice parameters.</returns>
    public EInvoiceParameters_MX getElectronicInvoiceParameters()
    {
        return EInvoiceParameters_MX::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>incotermCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Incoterm code for the invoice.
    /// </summary>
    /// <returns>
    /// Incoterm code.
    /// </returns>
    public EInvoiceExtCodeId_MX incotermCode()
    {
        return eInvoiceJour.CFDIIncotermCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmitentPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>logisticsPostalAddress</c> object.
    /// </summary>
    /// <param name="_emitentPostalAddress">The emitent postal address.</param>
    protected void initEmitentPostalAddress(LogisticsPostalAddress _emitentPostalAddress)
    {
        emitentAddressMap = EInvoiceCFDIAddressMap::constructFromPostalAddress(_emitentPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLogisticsPostalAddressDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>LogisticsPostalAddress</c> record.
    /// </summary>
    /// <param name="_deliveryPostalAddressRecId">The rec id of the delivery address in the <c> LogisticsPostalAddress </c> table.</param>
    protected void  initLogisticsPostalAddressDelivery(LogisticsPostalAddressRecId  _deliveryPostalAddressRecId)
    {
        deliveryAddressMap = EInvoiceCFDIAddressMap::constructFromPostalAddressRecId(_deliveryPostalAddressRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoicePostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>LogisticsPostalAddress</c> record.
    /// </summary>
    /// <param name="_invoicePostalAddressRecId">The rec id of the invoice address in the <c> LogisticsPostalAddress </c> table.</param>
    protected void initInvoicePostalAddress(LogisticsPostalAddressRecId  _invoicePostalAddressRecId)
    {
        invoiceAddressMap = EInvoiceCFDIAddressMap::constructFromPostalAddressRecId(_invoicePostalAddressRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNegativeTaxAmountList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of all tax transactions with negative tax amounts for all lines of the posted document.
    /// </summary>
    /// <returns>A list of tax transactions.</returns>
    public List getNegativeTaxAmountList()
    {
        return negativeTaxAmountList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositveTaxAmountList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of all tax transactions with positive tax amounts for all lines of the posted document.
    /// </summary>
    /// <returns>A list of tax transactions.</returns>
    public List getPositveTaxAmountList()
    {
        return positiveTaxAmountList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransBaseQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query used to get the <c>TaxTrans</c> per Type
    /// </summary>
    /// <param name="_taxType">
    /// Tax Type used as the criteria for the query
    /// </param>
    /// <param name="_sourceTableId">
    /// Table id of the source record.
    /// </param>
    /// <param name="_sourceRecId">
    /// Record id of the source record.
    /// </param>
    /// <returns>
    /// Returns the query used to get the <c>TaxTrans</c> per Type
    /// </returns>
    /// <remarks>
    /// If not taxtype is passed all the Types will be selected
    /// </remarks>
    protected Query getTaxTransBaseQuery(
        TaxType_MX _taxType         = TaxType_MX::Blank,
        RefTableId _sourceTableId   = 0,
        RefRecId   _sourceRecId     = 0)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        queryBuildDataSource = query.addDataSource(tableNum(TaxTrans));
        queryBuildDataSource.addRange(fieldNum(TaxTrans, Voucher)).value(queryValue(this.voucher()));
        queryBuildDataSource.addRange(fieldNum(TaxTrans, TransDate)).value(queryValue(this.invoiceDate()));

        if (_taxType != TaxType_MX::Blank)
        {
            queryBuildDataSource.addRange(fieldNum(TaxTrans, TaxType_MX)).value(queryValue(_taxType));
        }

        if (_sourceTableId)
        {
            queryBuildDataSource.addRange(fieldNum(TaxTrans, SourceTableId)).value(queryValue(_sourceTableId));
        }

        if (_sourceRecId)
        {
            queryBuildDataSource.addRange(fieldNum(TaxTrans, SourceRecId)).value(queryValue(_sourceRecId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>foreignTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the foreign tax registration number of the customer.
    /// </summary>
    /// <returns>
    /// The foreign tax registration number.
    /// </returns>
    public LogisticsAddressCountryRegionId foreignTaxRegistration()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customs name information for the posted document.
    /// </summary>
    /// <returns>
    /// The customs name information from the posted document.
    /// </returns>
    public CustomsName_MX customsName()
    {
        CustomsName_MX ret;

        if (this.isForeignTrade())
        {
            ListEnumerator linesEnumeratorLoc = lines.getEnumerator();

            if (linesEnumeratorLoc.moveNext())
            {
                ret = linesEnumeratorLoc.current().customsName();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransQuerySum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query that is used to get the total tax amount per type.
    /// </summary>
    /// <param name="_taxType">The tax type that is used as the criteria for the query.</param>
    /// <param name="_sourceTableId">Table id of the source record.</param>
    /// <param name="_sourceRecId">Record id of the source record.</param>
    /// <returns>The query that is used to get the total tax amount per type.</returns>
    /// <remarks>
    /// If no tax type is specified, every type will be selected.
    /// </remarks>
    protected Query getTaxTransQuerySum(
        TaxType_MX _taxType         = TaxType_MX::Blank,
        RefTableId _sourceTableId   = 0,
        RefRecId   _sourceRecId     = 0)
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildFieldList     queryBuildFields;

        query = this.getTaxTransBaseQuery(_taxType, _sourceTableId, _sourceRecId);
        queryBuildDataSource = query.dataSourceTable(tableNum(TaxTrans));

        queryBuildFields  = queryBuildDataSource.fields();
        queryBuildFields.dynamic(false);
        queryBuildFields.clearFieldList();

        queryBuildDataSource.addSelectionField(fieldNum(TaxTrans, TaxAmount), SelectionField::Sum);
        queryBuildDataSource.addSelectionField(fieldNum(TaxTrans, SourceTaxAmountCur), SelectionField::Sum);
        queryBuildDataSource.addSelectionField(fieldNum(TaxTrans, SourceRegulateAmountCur), SelectionField::Sum);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the line instances that are related to the posted document.
    /// </summary>
    public void init()
    {
        this.initCustTable(CustTable::find(this.invoiceAccount()));
        this.initEInvoice(EInvoiceJour_MX::findByRef(this.refTableId(), this.refRecId()));
        this.initEmitentPostalAddress(this.emitentPostalAddress());
        this.initLogisticsPostalAddressDelivery(this.deliveryPostalAddressRecId());
        this.initInvoicePostalAddress(this.invoicePostalAddressRecId());

        this.initJournalLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>CustTable</c> record.
    /// </summary>
    /// <param name="_custTable">The name of the record to use.</param>
    protected void initCustTable(CustTable _custTable)
    {
        custTable = _custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>EInvoiceJour</c> object.
    /// </summary>
    /// <param name="_eInvoice">The current <c>EInvoiceJour</c> record.</param>
    protected void initEInvoice(EInvoiceJour_MX _eInvoice)
    {
        eInvoiceJour   = _eInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the map with the posted document journal line.
    /// </summary>
    /// <param name="_originalJournalLine">The invoice journal line that will be mapped to the <c>EInvoiceTransBaseMap_MX</c> class.</param>
    /// <returns>An instance of the <c>EInvoiceTransBaseMap_MX</c> concrete class.</returns>
    private EInvoiceTransBaseMap_MX initJournalLine(Common _originalJournalLine)
    {
        return EInvoiceTransBaseMap_MX::construct(_originalJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates over the query that is provided by the <c>journalLinesQuery</c> method to initialize the
    /// journal line maps.
    /// </summary>
    /// <remarks>
    /// Do not override this method.
    /// </remarks>
    private void initJournalLines()
    {
        EInvoiceTransBaseMap_MX    eInvoiceTransBaseMap;
        ListEnumerator             journalLines;
        Common                     journalLine;

        negativeTaxAmountList = new List(Types::Record);
        positiveTaxAmountList = new List(Types::Record);

        if (this.journalLines() == null
            || this.journalLines().typeId() != Types::Record)
        {
            throw error("@SYS341988");
        }

        lines = new List(Types::Class);

        journalLines = this.journalLines().getEnumerator();

        while (journalLines.moveNext())
        {
            journalLine = journalLines.current();

            eInvoiceTransBaseMap = this.initJournalLine(journalLine);

            this.addLine(eInvoiceTransBaseMap);
        }

        this.addTaxAmountToLists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the street of the current logistics postal address.
    /// </summary>
    /// <returns>The street of the current logistics postal address.</returns>
    public LogisticsAddressStreet invoiceStreet()
    {
        return invoiceAddressMap.parmStreet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceStreetNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the streetNumber of the current logistics postal address.
    /// </summary>
    /// <returns>The streetNumber of the current logistics postal address.</returns>
    public LogisticsAddressStreetNumber invoiceStreetNumber()
    {
        return invoiceAddressMap.parmStreetNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceBuildingComplement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the BuildingComplement of the current logistics postal address.
    /// </summary>
    /// <returns>The BuildingComplement of the current logistics postal address.</returns>
    public LogisticsAddressBuildingCompliment invoiceBuildingComplement()
    {
        return invoiceAddressMap.parmBuildingComplement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceCounty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the county of the current logistics postal address.
    /// </summary>
    /// <returns>The county of the current logistics postal address.</returns>
    public LogisticsAddressStateId invoiceCounty()
    {
        return invoiceAddressMap.parmCounty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceCountyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the county id of the current logistics postal address.
    /// </summary>
    /// <returns>The county id of the current logistics postal address.</returns>
    public LogisticsAddressCountyId invoiceCountyId()
    {
        return invoiceAddressMap.parmCountyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the city of the current logistics postal address.
    /// </summary>
    /// <returns>The city of the current logistics postal address.</returns>
    public LogisticsAddressCityName invoiceCity()
    {
        return invoiceAddressMap.parmCity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceCityKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the city key of the current logistics postal address.
    /// </summary>
    /// <returns>The city key of the current logistics postal address.
    /// </returns>
    public LogisticsAddressCityKey invoiceCityKey()
    {
        return invoiceAddressMap.parmCityKey();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the state of the current logistics postal address.
    /// </summary>
    /// <returns>The state of the current logistics postal address.</returns>
    public LogisticsAddressStatename invoiceState()
    {
        return invoiceAddressMap.parmState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice state ID of the current logistics postal address.
    /// </summary>
    /// <returns>
    /// The invoice state ID that is related to the current logistics postal address.
    /// </returns>
    public LogisticsAddressStatename invoiceStateId()
    {
        return invoiceAddressMap.parmStateId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the country region name of the current logistics postal address.
    /// </summary>
    /// <returns>The country region name of the current logistics postal address.</returns>
    public LogisticsAddressCountryRegionShortName invoiceCountryRegion()
    {
        return invoiceAddressMap.parmCountryRegion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the country region id of the posted document.
    /// </summary>
    /// <returns>
    /// The country region id of the posted document.
    /// </returns>
    public LogisticsAddressCountryRegionId invoiceCountryRegionId()
    {
        return invoiceAddressMap.parmCountryRegionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ZIP code of the current logistics postal address.
    /// </summary>
    /// <returns>The ZIP code of the current logistics postal address.</returns>
    public LogisticsAddressZipCodeId invoiceZipCode()
    {
        return invoiceAddressMap.parmZipCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDistrictName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the district name of the current logistics postal address.
    /// </summary>
    /// <returns>The district name of the current logistics postal address.</returns>
    public LogisticsAddressZipCodeId invoiceDistrictName()
    {
        return invoiceAddressMap.parmDistrictName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceRFC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the RFC of the emitent.
    /// </summary>
    /// <returns>The emitent's RFC of the posted document.</returns>
    public Rfc_MX invoiceRFC()
    {
        Rfc_MX rfc = InternalTransferRFC;

        if (custTable)
        {
            if (custTable.CompanyType_MX == CompanyType_MX::ForeignCompany)
            {
                rfc = ForeignerRFC;
            }
            else
            {
                rfc = custTable.Rfc_MX;
            }
        }

        return rfc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>EInvoiceJour_MX</c> record of the posted document.
    /// </summary>
    /// <returns>
    /// The <c>EInvoiceJour_MX</c> record of the posted document.
    /// </returns>
    public EInvoiceJour_MX eInvoiceJour()
    {
        return eInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignTrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if it's necessary to create a Complemento node.
    /// </summary>
    /// <returns>
    /// Returns true if it is a Foreign trade; otherwise, false.
    /// </returns>
    public boolean isForeignTrade()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTemporaryExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if it is a temporary export.
    /// </summary>
    /// <returns>
    /// true if it is a temporary export; otherwise, false.
    /// </returns>
    public boolean isTemporaryExport()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of <c>MarkupTrans</c> records that are related to the invoice header.
    /// </summary>
    /// <returns>A list of <c>MarkupTrans</c> records.</returns>
    public List markupTransList()
    {
        MarkupTrans markupTrans;
        List list = new List(Types::Record);

        while select markupTrans
            where markupTrans.TransTableId == this.refTableId()
                && markupTrans.TransRecId == this.refRecId()
        {
            list.addEnd(markupTrans);
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>methodOfPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the method of payment that is used by the posted document.
    /// </summary>
    /// <returns>The method of payment that is used by the posted document.</returns>
    public Description methodOfPayment()
    {
        PaymentType_MX paymentType = CustPaymModeTable::find(this.eInvoiceJour().PaymMode).PaymentType_MX;
        const str deferredPaymMethod = 'PPD';

        if (!paymentType || this.orderOfPayment() == deferredPaymMethod)
        {
            paymentType = PaymentType_MX::Other;
        }

        return System.String::Format('{0:D2}', enum2int(paymentType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRegIdTrib</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the identification number or the fiscal number.
    /// </summary>
    /// <returns>
    /// Identification number.
    /// </returns>
    public Curp_MX numRegIdTrib()
    {
        return eInvoiceJour.CFDINumRegIdTrib;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of payments that are used in the posted document.
    /// </summary>
    /// <returns>The number of payments that are used in the posted document.</returns>
    public PositiveNumber numberOfPayments()
    {
        CustPaymSched       custPaymSched;
        CustPaymSchedLine   custPaymSchedLine;

        select count(RecId) from custPaymSched
            where custPaymSched.ExtRecId == this.refRecId()
               && custPaymSched.ExtTableId == this.refTableId()
        join RecId from custPaymSchedLine
            where custPaymSchedLine.ParentRecID == custPaymSched.RecId;

        return int642int(custPaymSched.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderOfPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payment type that are used in the posted document.
    /// </summary>
    /// <returns>
    /// The <c>SATPaymMethod_MX</c> value that are used in the posted document.
    /// </returns>
    public EInvoiceExtCodeId_MX orderOfPayment()
    {
        return this.eInvoiceJour().PaymMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPrint</Name>
				<Source><![CDATA[
    public NoYes parmIsPrint(NoYes _isPrint = isPrint)
    {
        isPrint = _isPrint;
        return isPrint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintInMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that the document is printing in national currency.
    /// </summary>
    /// <returns>
    /// True if the document is printing in national currency; otherwise, false.
    /// </returns>
    protected boolean isPrintInMST()
    {
        return this.parmIsPrint() && this.eInvoiceJour().PrintInMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last four digits of the account number that the payment was made
    /// </summary>
    /// <returns>The last four digits of the account number that the payment was made.</returns>
    public str paymentAccount()
    {
        unchecked (Uncheck::TableSecurityPermission)
        {
            BankAccount bankAccount = CustBankAccount::find(custTable.AccountNum, custTable.BankAccount).AccountNum;

            return substr(bankAccount, strlen(bankAccount)-3, strlen(bankAccount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer account that has been invoiced.
    /// </summary>
    /// <returns>The customer invoiced account.</returns>
    public abstract CustVendAC invoiceAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the order account that has been invoiced.
    /// </summary>
    /// <returns>The order invoiced account.</returns>
    [Hookable(false)]
    public CustVendAC orderAccount()
    {
        return ''; // refer implementation in extended classes
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice ID of the posted document.
    /// </summary>
    /// <returns>The invoice ID of the posted document.</returns>
    public abstract InvoiceId invoiceId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice date that is related to the posted document.
    /// </summary>
    /// <returns>The transaction date of the posted document.</returns>
    public abstract date invoiceDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets customer name preset on the posted document.
    /// </summary>
    /// <returns>The customer invoiced name.</returns>
    public SATRegistrationName_MX invoicingName()
    {
        return this.eInvoiceJour().InvoicingName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the currency code, used in the current CustInvoiceJour
    /// </summary>
    /// <returns>Invoice transaction currency code</returns>
    public abstract CurrencyCode currencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate of the transaction currency code and the company currency code that are used
    /// in the posted document.
    /// </summary>
    /// <returns>The invoice transaction exchange rate.</returns>
    public abstract ExchRate exchangeRate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the voucher number that is used for the posted document in the ledger post.
    /// </summary>
    /// <returns>The voucher number of the invoice.</returns>
    public abstract Voucher voucher()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>refNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RefNum
    /// </summary>
    /// <returns>Returns the RefNum</returns>
    public abstract RefNum refNum()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>residenciaFiscal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the country of the proprietary address.
    /// </summary>
    /// <returns>
    /// ISO code.
    /// </returns>
    public LogisticsAddressCountryRegionISOCode residenciaFiscal()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>shippingReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the shipping reason code for the invoice.
    /// </summary>
    /// <returns>
    /// Shipping reason code.
    /// </returns>
    public EInvoiceExtCodeId_MX shippingReason()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales type of the posted document.
    /// </summary>
    /// <returns>The sales type of the posted document.</returns>
    public abstract SalesType salesType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets if the source certificate exists.
    /// </summary>
    /// <returns>
    /// True, if the source certificate exists; false, otherwise.
    /// </returns>
    public str sourceCertificate()
    {
        return int2str(enum2int(eInvoiceJour.CFDISourceCertificate_MX));
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountForeignTrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of the invoice transaction for foreign trade.
    /// </summary>
    /// <returns>
    /// The invoice transaction total amount for foreign trade.
    /// </returns>
    public Amount totalAmountForeignTrade()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>termOfPaymDesc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the terms of payment description used by the posted invoice.
    /// </summary>
    /// <returns>The terms of payment description used by the posted invoice.</returns>
    public abstract Description termOfPaymDesc()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum.
    /// </summary>
    /// <returns>The sum.</returns>
    /// <remarks>
    /// No taxes or discounts are included in the sum.
    /// </remarks>
    public abstract Amount subTotal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of the invoice transaction.
    /// </summary>
    /// <returns>The invoice transaction total amount.</returns>
    /// <remarks>
    /// The amount that is returned does not include discounts.
    /// </remarks>
    public abstract AmountCur totalAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the total discont amount of the posted document
    /// </summary>
    /// <returns>Invoice total discount amount.</returns>
    /// <remarks>
    /// header discount + discount given on the lines
    /// </remarks>
    public abstract DiscAmount totalDiscountAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount.
    /// </summary>
    /// <returns>The total discount amount of the invoice.</returns>
    public abstract DiscAmount totalDiscountAmountMST()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the discount that is given in the posted document.
    /// </summary>
    /// <returns>The discount amount that is given in the posted document.</returns>
    public abstract SalesEndDiscAmount endDiscMST()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the rec id of the logistics postal address of the delivery address.
    /// </summary>
    /// <returns>Returns the rec id of the logistics postal address of the delivery address.</returns>
    protected abstract LogisticsPostalAddressRecId deliveryPostalAddressRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicePostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the rec id of the logistics postal address of the invoice address.
    /// </summary>
    /// <returns>Returns the rec id of the logistics postal address of the invoice address.</returns>
    protected abstract LogisticsPostalAddressRecId invoicePostalAddressRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>refRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record ID of the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The record ID of the invoice document.</returns>
    public abstract RefRecId refRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>refTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the invoice document.
    /// </summary>
    /// <returns>The table ID of the invoice document.</returns>
    public abstract TableId refTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of original invoice line records to be mapped.
    /// </summary>
    /// <returns>A list of records to be mapped.</returns>
    /// <remarks>
    /// The list should be a list of records of the table that will be mapped in the
    /// <c>EInvoiceTransBaseMap_MX</c> concrete class.
    /// </remarks>
    protected abstract List journalLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    protected TaxAmountCur taxAmount(TaxTrans taxTrans)
    {
        return this.isPrintInMST() ?
           taxTrans.TaxAmount :
           taxTrans.SourceTaxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountRegular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the total Tax Amount by Type
    /// </summary>
    /// <param name="_taxType">Type used to search</param>
    /// <param name="_sourceTableId">
    /// Table id of the source record.
    /// </param>
    /// <param name="_sourceRecId">
    /// Record id of the source record.
    /// </param>
    /// <returns>Return the Tax Amount by Type</returns>
    /// <remarks>
    /// Only Tax Trans Amountes with negative signs are summarized.(Usual sign for Sales Invoices tax amount)
    /// </remarks>
    public TaxAmount totalTaxAmountRegular(
        TaxType_MX _taxType         = TaxType_MX::Blank,
        RefTableId _sourceTableId   = 0,
        RefRecId   _sourceRecId     = 0)
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryRun                queryRun;
        TaxTrans                taxTrans;
        TaxAmountCur            totalTaxAmout;

        query = this.getTaxTransQuerySum(_taxType, _sourceTableId, _sourceRecId);
        queryBuildDataSource = query.dataSourceTable(tableNum(TaxTrans));

        queryBuildDataSource.addRange(fieldNum(TaxTrans, TaxValue)).value(queryvalue('>0'));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            taxTrans       = queryRun.get(tableNum(TaxTrans));
            totalTaxAmout += this.taxAmount(taxTrans);
        }

        return totalTaxAmout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountRetained</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the total Tax Amount by Type
    /// </summary>
    /// <param name="_taxType">Type used to search</param>
    /// <param name="_sourceTableId">
    /// Table id of the source record.
    /// </param>
    /// <param name="_sourceRecId">
    /// Record id of the source record.
    /// </param>
    /// <returns>Return the total Tax Amount by Type</returns>
    /// <remarks>
    /// Only Tax Trans Amounts with positive signs are summarized. (retained tax amounts has positive signs in sales invoice)
    /// </remarks>
    public TaxAmount totalTaxAmountRetained(
        TaxType_MX _taxType         = TaxType_MX::Blank,
        RefTableId _sourceTableId   = 0,
        RefRecId   _sourceRecId     = 0)
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryRun                queryRun;
        TaxTrans                taxTrans;
        TaxAmountCur            totalTaxAmout;

        query = this.getTaxTransQuerySum(_taxType, _sourceTableId, _sourceRecId);
        queryBuildDataSource = query.dataSourceTable(tableNum(TaxTrans));

        queryBuildDataSource.addRange(fieldNum(TaxTrans, TaxValue)).value(queryvalue('<0'));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            taxTrans       = queryRun.get(tableNum(TaxTrans));
            totalTaxAmout += this.taxAmount(taxTrans);
        }

        return totalTaxAmout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EInvoiceJourBaseMap_MX construct(Common _invoiceJour)
    {
        EInvoiceJourBaseMap_MX     eInvoiceJourBaseMap;
        EInvoiceJour_MX            eInvoiceJour;
        CustInvoiceJour            custInvoiceJour;
        ProjInvoiceJour            projInvoiceJour;
        CustTrans                  custTrans;
        CustSettlement             custSettlement;
        CustPackingSlipJour        custPackingSlipJour;
        InventTransferJour         inventTransferJour;

        switch (_invoiceJour.TableId)
        {
            case tableNum(CustInvoiceJour):
                eInvoiceJourBaseMap = CustInvoiceJourEInvoiceJourMap_MX::construct(_invoiceJour);
                break;

            case tableNum(ProjInvoiceJour):
                eInvoiceJourBaseMap = ProjInvoiceJourEInvoiceJourMap_MX::construct(_invoiceJour);
                break;

            case tableNum(RetailStatementJour):
                eInvoiceJourBaseMap = RetailEInvoiceJourMap_MX::construct(_invoiceJour);
                break;

            case tableNum(RetailEInvoiceAggregatedStatement_MX):
                eInvoiceJourBaseMap = RetailEInvoiceJourMap_MX::constructFromAggregatedStatement(_invoiceJour);
                break;

            case tableNum(CustPackingSlipJour):
                eInvoiceJourBaseMap = CustPackingSlipJourEInvoiceJourMap_MX::construct(_invoiceJour);
                break;
            
            case tableNum(InventTransferJour):
                eInvoiceJourBaseMap = InventTransferJourEInvoiceJourMap_MX::construct(_invoiceJour);
                break;

            case tableNum(EInvoiceJour_MX):
                eInvoiceJour = _invoiceJour;
                switch (eInvoiceJour.RefTableId)
                {
                    case tableNum(CustInvoiceJour):
                        custInvoiceJour = CustInvoiceJour::findRecId(eInvoiceJour.RefRecId);
                        eInvoiceJourBaseMap = CustInvoiceJourEInvoiceJourMap_MX::construct(custInvoiceJour);
                        break;

                    case tableNum(ProjInvoiceJour):
                        projInvoiceJour = ProjInvoiceJour::findRecId(eInvoiceJour.RefRecId);
                        eInvoiceJourBaseMap = ProjInvoiceJourEInvoiceJourMap_MX::construct(projInvoiceJour);
                        break;

                    case tableNum(CustTrans):
                        custTrans = CustTrans::find(eInvoiceJour.RefRecId);
                        eInvoiceJourBaseMap = CustPaymentEInvoiceJourMap_MX::construct(custTrans);
                        break;

                    case tableNum(CustSettlement):
                        custSettlement = CustSettlement::find(eInvoiceJour.RefRecId);
                        eInvoiceJourBaseMap = CustPaymentEInvoiceJourMap_MX::construct(custSettlement);
                        break;

                    case tableNum(RetailStatementJour):
                    case tableNum(RetailEInvoiceAggregatedStatement_MX):
                        eInvoiceJourBaseMap = RetailEInvoiceJourMap_MX::constructFromEInvoice(eInvoiceJour);
                        break;

                    case tableNum(CustPackingSlipJour):
                        custPackingSlipJour = CustPackingSlipJour::findRecId(eInvoiceJour.RefRecId);
                        eInvoiceJourBaseMap = CustPackingSlipJourEInvoiceJourMap_MX::construct(custPackingSlipJour);
                        break;
                    
                    case tableNum(InventTransferJour):
                        inventTransferJour = InventTransferJour::findRecId(eInvoiceJour.RefRecId);
                        eInvoiceJourBaseMap = InventTransferJourEInvoiceJourMap_MX::construct(inventTransferJour);
                        break;

                    default:
                        break;
                }
                break;

            case tableNum(CustTrans):
            case tableNum(CustSettlement):
                eInvoiceJourBaseMap = CustPaymentEInvoiceJourMap_MX::construct(_invoiceJour);
                break;

            default :
                throw(error(strFmt("@SYS19306", funcName())));
        }

        eInvoiceJourBaseMap.init();

        return eInvoiceJourBaseMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificate</Name>
				<Source><![CDATA[
    private System.Security.Cryptography.X509Certificates.X509Certificate2 getCertificate()
    {
        System.Security.Cryptography.X509Certificates.X509Certificate2 certificate;

        EInvoiceCFDIParameters_MX eInvoiceCFDIParameters = EInvoiceCFDIParameters_MX::find();

        certificate = CertificateHelper_MX::getDigitalCertificate(eInvoiceJour.UseAdvCertificateStore,
                                                                  eInvoiceJour.KeyVaultCertificateRef,
                                                                  eInvoiceJour.CertificateSubject);

        return certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositiveTaxAmountMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Map of all tax transactions with positive tax amounts for all lines of the posted document.
    /// </summary>
    /// <returns>
    /// A Map of tax transactions.
    /// </returns>
    public Map getPositiveTaxAmountMap()
    {
        return positiveTaxAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNegativeTaxAmountMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Map of all tax transactions with negative tax amounts for all lines of the posted document.
    /// </summary>
    /// <returns>
    /// A Map of tax transactions.
    /// </returns>
    public Map getNegativeTaxAmountMap()
    {
        return negativeTaxAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>egresoSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sign of return operation.
    /// </summary>
    /// <returns>
    /// The E symbol.
    /// </returns>
    public static str egresoSymbol()
    {
        return 'E';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ingresoSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sign of sale operation.
    /// </summary>
    /// <returns>
    /// The I symbol.
    /// </returns>
    public static str ingresoSymbol()
    {
        return 'I';
    }

]]></Source>
			</Method>
			<Method>
				<Name>trasladoSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sign of return operation.
    /// </summary>
    /// <returns>
    /// The T symbol.
    /// </returns>
    public static str trasladoSymbol()
    {
        return 'T';
    }

]]></Source>
			</Method>
			<Method>
				<Name>serieSuffix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets serie suffix.
    /// </summary>
    /// <returns>
    /// Empty string.
    /// </returns>
    public str serieSuffix()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>eInvoiceJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type for the EInvoice journal.
    /// </summary>
    /// <param name = "_isReturn">True if journal contains return operations; otherwise, false.</param>
    /// <returns>The journal type.</returns>
    public static str eInvoiceJournalType(boolean _isReturn)
    {
        return _isReturn ? EInvoiceJourBaseMap_MX::egresoSymbol() : EInvoiceJourBaseMap_MX::ingresoSymbol();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of lines in EInvoice journal.
    /// </summary>
    /// <returns>The number of journal lines.</returns>
    public int64 getLinesCount()
    {
        return lines.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the type of electronic invoice.
    /// </summary>
    /// <returns>
    /// The type of electronic invoice.
    /// </returns>
    public str journalType()
    {
        if (this.totalAmount() >= 0)
        {
            return EInvoiceJourBaseMap_MX::ingresoSymbol();
        }
        else
        {
            return EInvoiceJourBaseMap_MX::egresoSymbol();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCartaPorteUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether transportation card must be added.
    /// </summary>
    /// <returns>true if transportation card must be added to CFDI document; otherwise, false </returns>
    public boolean isCartaPorteUsed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>permissionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns permission type associated with transportation note.
    /// </summary>
    /// <returns>Permission type.</returns>
    public EInvoiceExtCodeId_MX permissionType()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>permissionID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns permission id associated with transportation note.
    /// </summary>
    /// <returns>Permission id.</returns>
    public TransPermissionID_MX permissionID()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>distanceTraveled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns distance of transportation.
    /// </summary>
    /// <returns>Distance in kilometers.</returns>
    public WHSDistance distanceTraveled()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeTraveled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns time of transportation.
    /// </summary>
    /// <returns>Time in hours.</returns>
    public WHSActualTime timeTraveled()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insuranceVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns insurance vendor name.
    /// </summary>
    /// <returns>Account name</returns>
    public DirPartyName insuranceVendor()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>insurancePolicyNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns insurance policy number.
    /// </summary>
    /// <returns>Policy number</returns>
    public AssetInsurancePolicyNum insurancePolicyNum()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>environmentalDamageInsuranceVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns environmental damage insurance vendor name.
    /// </summary>
    /// <returns>Account name.</returns>
    public DirPartyName environmentalDamageInsuranceVendor()
    {
        return eInvoiceJour.EnvironmentalDamageInsuranceVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>environmentalDamageInsurancePolicyNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns insurance policy number.
    /// </summary>
    /// <returns>Policy number.</returns>
    public AssetInsurancePolicyNum environmentalDamageInsurancePolicyNum()
    {
        return eInvoiceJour.EnvironmentalDamageInsurancePolicyNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>truckConfig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns truck configuration.
    /// </summary>
    /// <returns>Truck configuration.</returns>
    public EInvoiceExtCodeId_MX truckConfig()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>truckSerialNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns truck number.
    /// </summary>
    /// <returns>Serial number.</returns>
    public AssetSerialNumber truckSerialNum()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>truckModelYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Truck model year.
    /// </summary>
    /// <returns>Truck model year.</returns>
    public AssetModelYear truckModelYear()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>trailer1Config</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns trailer configuration.
    /// </summary>
    /// <returns>Trailer configuration.</returns>
    public EInvoiceExtCodeId_MX trailer1Config()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>trailer1SerialNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns trailer number.
    /// </summary>
    /// <returns>Serial number.</returns>
    public AssetSerialNumber trailer1SerialNum()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>trailer2Config</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns trailer configuration.
    /// </summary>
    /// <returns>Trailer configuration.</returns>
    public EInvoiceExtCodeId_MX trailer2Config()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>trailer2SerialNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns trailer number.
    /// </summary>
    /// <returns>Serial number.</returns>
    public AssetSerialNumber trailer2SerialNum()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns first worker record.
    /// </summary>
    /// <returns><c>HCMWorker</c> record assigned on transportation.</returns>
    public RefRecId worker1()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker1Name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns first worker name.
    /// </summary>
    /// <returns>Worker name.</returns>
    public Name worker1Name()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker1NationalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns first worker's national id.
    /// </summary>
    /// <returns>First worker's national id.</returns>
    public HcmIdentificationNumber worker1NationalId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker1DriverLicense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns first worker's driver license.
    /// </summary>
    /// <returns>First worker's driver license.</returns>
    public HcmIdentificationNumber worker1DriverLicense()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker1ForeignId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns first worker's foreign id.
    /// </summary>
    /// <returns>First worker's foreign id.</returns>
    public HcmIdentificationNumber worker1ForeignId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker1CountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns first worker's country region code.
    /// </summary>
    /// <returns>First worker's country region code.</returns>
    public LogisticsAddressCountryRegionId worker1CountryRegion()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker2NationalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns second worker's national id.
    /// </summary>
    /// <returns>Second worker's national id.</returns>
    public HcmIdentificationNumber worker2NationalId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker2DriverLicense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns second worker's driver license.
    /// </summary>
    /// <returns>Second worker's driver license.</returns>
    public HcmIdentificationNumber worker2DriverLicense()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker2ForeignId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns second worker's foreign id.
    /// </summary>
    /// <returns>Second worker's foreign id.</returns>
    public HcmIdentificationNumber worker2ForeignId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker2CountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns second worker's country region code.
    /// </summary>
    /// <returns>Second worker's country region code.</returns>
    public LogisticsAddressCountryRegionId worker2CountryRegion()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns second worker record.
    /// </summary>
    /// <returns><c>HCMWorker</c> record assigned on transportation.</returns>
    public RefRecId worker2()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker2Name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns second worker name.
    /// </summary>
    /// <returns>Worker name.</returns>
    public Name worker2Name()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickUpSpot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pick up spot.
    /// </summary>
    /// <returns>Spot id.</returns>
    public EInvoiceSiteID_MX pickUpSpot()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickUpMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns pick up mode.
    /// </summary>
    /// <returns>Spot mode.</returns>
    public EInvoiceExtCodeId_MX pickUpMode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropOffSpot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Drop off spot.
    /// </summary>
    /// <returns>Spot id.</returns>
    public EInvoiceSiteID_MX dropOffSpot()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropOffMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns drop off mode.
    /// </summary>
    /// <returns>Spot mode.</returns>
    public EInvoiceExtCodeId_MX dropOffMode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invoice quantity.
    /// </summary>
    /// <returns>Quantity.</returns>
    public Qty qty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>truckOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Truck owner.
    /// </summary>
    /// <returns>Vendor account.</returns>
    public VendAccount truckOwner()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>trailerOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trailer owner.
    /// </summary>
    /// <returns>Vendor account.</returns>
    public VendAccount trailerOwner()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalTrailerOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Additional trailer owner.
    /// </summary>
    /// <returns>Vendor account.</returns>
    public VendAccount additionalTrailerOwner()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>truckTenant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Truck tenant.
    /// </summary>
    /// <returns>Vendor account.</returns>
    public VendAccount truckTenant()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>trailerTenant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trailer tenant.
    /// </summary>
    /// <returns>Vendor account.</returns>
    public VendAccount trailerTenant()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalTrailerTenant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Additional trailer tenant.
    /// </summary>
    /// <returns>Vendor account.</returns>
    public VendAccount additionalTrailerTenant()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>weightUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the code of the weight unit.
    /// </summary>
    /// <returns>Weight unit.</returns>
    public EInvoiceExtCodeId_MX weightUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientRFC</Name>
				<Source><![CDATA[
    // <summary>
    /// Returns recipient RFC.
    /// </summary>
    /// <returns>Recipient RFC</returns
    internal Rfc_MX recipientRFC()
    {
        if (this.isCartaPorteUsed())
        {
            return this.getCompanyInfo().Rfc_MX;
        }
        else
        {
            return this.invoiceRFC();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientTaxRegimeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns recipient tax regime code.
    /// </summary>
    /// <returns>Recipient tax regime code.</returns>
    internal EInvoiceExtCodeId_MX recipientTaxRegimeCode()
    {
        if (this.isCartaPorteUsed())
        {
            return this.getCompanyInfo().TaxRegimeCode_MX;
        }
        else
        {
            return this.getCustTable().TaxRegimeCode_MX;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>export</Name>
				<Source><![CDATA[
    internal CFDIExport_MX export()
    {
        return this.isForeignTrade() ?
                (this.isTemporaryExport() ? CFDIExport_MX::Temporary : CFDIExport_MX::Definitive) :
                CFDIExport_MX::NotApplicable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transportation date and time.
    /// </summary>
    /// <returns>Date and time of load.</returns>
    [Hookable(false)]
    public utcdatetime transportationDateTime()
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the street of the current logistics postal address.
    /// </summary>
    /// <returns>The street of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressStreet transportationStreet()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationStreetNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the streetNumber of the posted document.
    /// </summary>
    /// <returns>The streetNumber of the posted document.</returns>
    [Hookable(false)]
    public LogisticsAddressStreetNumber transportationStreetNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationBuildingComplement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the BuildingComplement of the posted document.
    /// </summary>
    /// <returns>The BuildingComplement of the posted document.</returns>
    [Hookable(false)]
    public LogisticsAddressBuildingCompliment transportationBuildingComplement()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationCounty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation county name of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation county name of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressStateId transportationCounty()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationCountyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation county name of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation county name of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressCountyId transportationCountyId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation city of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation city of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressCityName transportationCity()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationCityKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation city key of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation city key of the current logistics postal address.
    /// </returns>
    [Hookable(false)]
    public LogisticsAddressCityKey transportationCityKey()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation state of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation state of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressStatename transportationState()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation country region name of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation country region name of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressCountryRegionShortName transportationCountryRegion()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation country region id of the current logistics postal address.
    /// </summary>
    /// <returns>
    /// The transportation country region id of the current logistics postal address.
    /// </returns>
    [Hookable(false)]
    public LogisticsAddressCountryRegionId transportationCountryRegionId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation state ID of the current logistics postal address.
    /// </summary>
    /// <returns>
    /// The transportation state ID that is related to the current logistics postal address.
    /// </returns>
    [Hookable(false)]
    public LogisticsAddressStatename transportationStateId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation ZIP code of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation ZIP code of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressZipCodeId transportationZipCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationDistrictName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation district name of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation district name of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressDistrictName transportationDistrictName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unloadedTransportationStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the street of the unloading postal address.
    /// </summary>
    /// <returns>The street of the unloading postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressStreet unloadedTransportationStreet()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unloadedTransportationStreetNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the street number of the unloading postal address.
    /// </summary>
    /// <returns>The street number of the unloading postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressStreetNumber unloadedTransportationStreetNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unloadedTransportationBuildingComplement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the building complement number of the unloading postal address.
    /// </summary>
    /// <returns>The building complement of the unloading postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressBuildingCompliment unloadedTransportationBuildingComplement()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unloadedTransportationCountyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the county of the unloading postal address.
    /// </summary>
    /// <returns>The county of the unloading postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressCountyId unloadedTransportationCountyId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unloadedTransportationCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the city of the unloading postal address.
    /// </summary>
    /// <returns>The city of the unloading postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressCityName unloadedTransportationCity()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unloadedTransportationCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the country/region of the unloading postal address.
    /// </summary>
    /// <returns>The country/region of the unloading postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressCountryRegionId unloadedTransportationCountryRegionId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unloadedTransportationStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the state of the unloading postal address.
    /// </summary>
    /// <returns>The state of the unloading postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressStatename unloadedTransportationStateId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unloadedTransportationZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ZIP code of the unloading postal address.
    /// </summary>
    /// <returns>The ZIP code of the unloading postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressZipCodeId unloadedTransportationZipCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sum of items amount
    /// </summary>
    /// <returns>The sum of items amount</returns>
    public Amount salesBalance()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get header discount amount
    /// </summary>
    /// <returns>The header discount amount</returns>
    public Amount endDisc()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossVehicleWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns gross vehicle weight of the vehicle for a transportation note.
    /// </summary>
    /// <returns>Gross vehicle weight in tons</returns>
    [Hookable(false)]
    public VehicleGrossWeight_MX grossVehicleWeight()
    {
        VehicleGrossWeight_MX vehicleGrossWeight = 0.00;

        TransportationVehicle transportationVehicle;
        AssetTable assetTable;

        Select firstonly GrossVehicleWeight_MX, RecId from assetTable
            join transportationVehicle
                where assetTable.assetId == transportationVehicle.TruckAssetId
                    && transportationVehicle.TransportationDocument == this.eInvoiceJour().TransportationDocument;

        if (assetTable)
        {
            vehicleGrossWeight = assetTable.GrossVehicleWeight_MX;
        }

        return vehicleGrossWeight;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>