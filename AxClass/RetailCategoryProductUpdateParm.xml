<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCategoryProductUpdateParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to transfer parameters to the product updater class.
/// </summary>
/// <remarks>
/// Some properties may be null as in different update modes (enttytype) some parameters may not be required.
/// </remarks>
public class RetailCategoryProductUpdateParm implements SysPackable
{
    guid updateSessionId;
    RefRecId entityId;
    str entityName;
    RetailProductUpdateMode entityType;
    // when running in product update mode is required
    RefRecId categoryId;
    Set productIds;
    RetailProductAttributesReference oldCategoryAttributes;
    container packedOldAttributes;
    container packedProductIds;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        updateSessionId,
        entityId,
        entityName,
        entityType,
        categoryId,
        packedOldAttributes,
        packedProductIds
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        container pack()
    {
        if (oldCategoryAttributes)
        {
            packedOldAttributes = oldCategoryAttributes.pack();
        }
        if (productIds)
        {
            packedProductIds = productIds.pack();
        }

        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryId</Name>
				<Source><![CDATA[
        public RefRecId parmCategoryId(RefRecId _categoryId = categoryId)
    {
        categoryId = _categoryId;
        return categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEntityId</Name>
				<Source><![CDATA[
        public RefRecId parmEntityId(RefRecId _entityId = entityId)
    {
        entityId = _entityId;
        return entityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEntityName</Name>
				<Source><![CDATA[
        public str parmEntityName(str _entityName = entityName)
    {
        entityName = _entityName;
        return entityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEntityType</Name>
				<Source><![CDATA[
        public RetailProductUpdateMode parmEntityType(RetailProductUpdateMode _entityType = entityType)
    {
        entityType = _entityType;
        return entityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOldCategoryAttributes</Name>
				<Source><![CDATA[
        public RetailProductAttributesReference parmOldCategoryAttributes(RetailProductAttributesReference _oldCategoryAttributes = oldCategoryAttributes)
    {
        oldCategoryAttributes = _oldCategoryAttributes;
        return oldCategoryAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductIds</Name>
				<Source><![CDATA[
        public Set parmProductIds(Set _productIds = productIds)
    {
        productIds = _productIds;
        return productIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        int version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                if (packedOldAttributes)
                {
                    oldCategoryAttributes = RetailProductAttributesReference::create(packedOldAttributes);
                }
                if (packedProductIds)
                {
                    productIds = Set::create(packedProductIds);
                }
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static RetailCategoryProductUpdateParm construct()
    {
        return new RetailCategoryProductUpdateParm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>