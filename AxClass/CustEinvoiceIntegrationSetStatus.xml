<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustEinvoiceIntegrationSetStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustEinvoiceIntegrationSetStatus extends RunBase
{
    CustEinvoiceIntegrationTrans  integrationTrans;
    RecordSortedList            integrationTransList;

    // Packed variables
    CustEinvoiceIntegrationSet set;

    // Dialog fields
    DialogField dialogField;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        set
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase       dialog = super();
        ;

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        ;
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntegrationTransList</Name>
				<Source><![CDATA[
    RecordSortedList parmIntegrationTransList(RecordSortedList _integrationTransList = integrationTransList)
    {
        ;
        integrationTransList = _integrationTransList;
        return integrationTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSet</Name>
				<Source><![CDATA[
    CustEinvoiceIntegrationSet parmSet(CustEinvoiceIntegrationSet _set = set)
    {
        ;
        set = _set;
        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (! this.validate())
            throw error('');

        try
        {
            ttsbegin;

            this.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version      = conpeek(packedClass,1);
        container   q;
        ;
        switch (version)
        {
            case #CurrentVersion :
                [version,q] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void update()
    {
        boolean    found;
        boolean    ok = true;
        ;
        found = integrationTransList.first(integrationTrans);
        while (found)
        {
            integrationTrans = CustEinvoiceIntegrationTrans::find(integrationTrans.RecId, true);

            if (ok)
            {
                switch (this.parmSet())
                {
                    case CustEinvoiceIntegrationSet::AcceptedOff:
                        integrationTrans.Accepted = NoYes::No;
                        break;
                    case CustEinvoiceIntegrationSet::AcceptedOn:
                        integrationTrans.Accepted = NoYes::Yes;
                        break;
                    case CustEinvoiceIntegrationSet::SentOn:
                        integrationTrans.Sent = NoYes::Yes;
                        break;
                    case CustEinvoiceIntegrationSet::SentOff:
                        integrationTrans.Sent = NoYes::No;
                        break;
                    case CustEinvoiceIntegrationSet::PostedOn:
                        integrationTrans.Posted = NoYes::Yes;
                        break;
                    case CustEinvoiceIntegrationSet::PostedOff:
                        integrationTrans.Posted = NoYes::No;
                        break;
                    default :
                        break;
                }
                integrationTrans.update();
            }

            found = integrationTransList.next(integrationTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    // Here goes a description of the class
    static ClassDescription description()
    {
        ;
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        CustEinvoiceIntegrationSetStatus    setStatus;
        CustEinvoiceIntegrationTrans        integrationTrans;
        RecordSortedList                    integrationTransList = new RecordSortedList(tablenum(CustEinvoiceIntegrationTrans));
        FormDataSource                      formDS;
        ;
        integrationTransList.sortOrder(fieldnum(CustEinvoiceIntegrationTrans, RecId));
        formDS = FormDataUtil::getFormDataSource(args.record());
        for (integrationTrans = formDS.getFirst(true)
                ? formDS.getFirst(true)
                : args.record();integrationTrans;integrationTrans=formDS.getNext())
        {
            integrationTransList.ins(integrationTrans);
        }

        setStatus = new CustEinvoiceIntegrationSetStatus();
        setStatus.parmIntegrationTransList(integrationTransList);
        setStatus.parmSet(args.parmEnum());

        setStatus.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>