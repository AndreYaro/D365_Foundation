<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFEventDocMsgFormat_CorrectionLetter_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible to format the XML of electronic invoice to be sent
/// </summary>
class EFEventDocMsgFormat_CorrectionLetter_BR extends EFDocMsgFormat_XMLBase_BR implements IEFEventDocMsgFormat_BR
{
    IEFDocMsgStream_BR                  stream;
    EFEventDocument_CorrectionLetter_BR correctionLetterDocument;
    EFDocMessageType_BR                 messageType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create_detEvento_Element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the detEvento element.
    /// </summary>
    /// <returns>
    /// The detEvento element.
    /// </returns>
    protected XmlElement create_detEvento_Element()
    {
        XmlElement  detEventoElement;

        detEventoElement = this.createElement('detEvento');
        detEventoElement.setAttribute('versao', this.eventVersion());
        detEventoElement.appendChild(this.createElementWithValue('descEvento', this.eventDescription()));
        detEventoElement.appendChild(this.createElementWithValue('xCorrecao', correctionLetterDocument.txt()));
        detEventoElement.appendChild(this.createElementWithValue('xCondUso', this.xCondUso()));

        return detEventoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_evento_Element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the evento element.
    /// </summary>
    /// <returns>
    /// The evento element.
    /// </returns>
    protected XmlElement create_evento_Element()
    {
        XmlElement  eventoElement;

        eventoElement = this.createElement('evento');
        eventoElement.setAttribute('versao', this.eventVersion());

        return eventoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_infEvento_Element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the infEvento element.
    /// </summary>
    /// <returns>
    /// The infEvento element.
    /// </returns>
    protected XmlElement create_infEvento_Element()
    {
        XmlElement  infEventoElement;
        XMLElement  detEventoElement;

        infEventoElement  = this.createElement('infEvento');
        infEventoElement.setAttribute('Id', this.Id());
        infEventoElement.appendChild(this.createElementWithValue('cOrgao', substr(correctionLetterDocument.issuerIBGECode(),1,2)));
        infEventoElement.appendChild(this.createElementWithValue('tpAmb', correctionLetterDocument.fiscalEstablishment().EFDocEnvironment == EFDocEnvironment_BR::Production ? '1' : '2' ));

        if (correctionLetterDocument.issuerCNPJ())
        {
            infEventoElement.appendChild(this.createElementWithValue('CNPJ', this.formatKeepNumbersOnly(correctionLetterDocument.issuerCNPJ())));
        }
        else
        {
            infEventoElement.appendChild(this.createElementWithValue('CPF', this.formatKeepNumbersOnly(correctionLetterDocument.issuerCPF())));
        }

        infEventoElement.appendChild(this.createElementWithValue('chNFe', correctionLetterDocument.accessKey()));
        infEventoElement.appendChild(this.createElementWithValue('dhEvento', this.eventDateTime()));
        infEventoElement.appendChild(this.createElementWithValue('tpEvento', this.eventType()));
        infEventoElement.appendChild(this.createElementWithValue('nSeqEvento', int2str(correctionLetterDocument.sequence())));
        infEventoElement.appendChild(this.createElementWithValue('verEvento', this.eventVersion()));

        detEventoElement = this.create_detEvento_Element();

        infEventoElement.appendChild(detEventoElement);

        return infEventoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXmlDcoumentFromEFDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the xml Document element that represents the correction letter.
    /// </summary>
    /// <returns>
    /// The xml document.
    /// </returns>
    protected XmlElement createXmlDcoumentFromEFDocument()
    {
        XmlElement      eventoElement;

        eventoElement = this.create_evento_Element();
        eventoElement.appendChild(this.create_infEvento_Element());

        return eventoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the correction letter xml document and writes it to a stream.
    /// </summary>
    protected void doFormat()
    {
        XmlElement      eventNFeElement;
        str             signedNfeElementAsString;

        eventNFeElement = this.createXmlDcoumentFromEFDocument();
        signedNFeElementAsString = this.signDocument(correctionLetterDocument.keyVaultCertificateRef(), correctionLetterDocument.digitalCertificateSubject(), eventNFeElement, 'infEvento');

        xmlDoc = XmlDocument::newXml(
            strFmt(
            @'<?xml version="1.0" encoding="UTF-8"?>
            <envEvento versao="%2" xmlns="http://www.portalfiscal.inf.br/nfe">
                <idLote>%3</idLote>
                %1
            </envEvento>',
            signedNFeElementAsString, this.version(), correctionLetterDocument.fiscalDocumentNumber())
            );

        stream.write(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>eFiscalDocVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fiscal document version.
    /// </summary>
    /// <returns>
    /// The fiscal document version.
    /// </returns>
    public EFiscalDocVersion_BR eFiscalDocVersion()
    {
        return EFiscalDocVersion_BR::V4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventDateTime</Name>
				<Source><![CDATA[
        protected str eventDateTime()
    {
        return this.formatDateTime(correctionLetterDocument.eventDateTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a constant that describe the message type.
    /// </summary>
    /// <returns>
    /// A constant that describe the message type.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The message type is not supported.
    /// </exception>
    protected str eventDescription()
    {
        return 'Carta de Correcao';
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a constant that represents the event type.
    /// </summary>
    /// <returns>
    /// A constant that represents the event type.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The message type is not supported.
    /// </exception>
    protected str eventType()
    {
        return '110110';
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the event version.
    /// </summary>
    /// <returns>
    /// The event version.
    /// </returns>
    protected str eventVersion()
    {
        return '1.00';
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatedEventSequence</Name>
				<Source><![CDATA[
        private str formatedEventSequence()
    {
        return strRFix(int2str(correctionLetterDocument.sequence()),2,'0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>Id</Name>
				<Source><![CDATA[
        private str Id()
    {
        return strfmt(
                    "%1%2%3%4",
                    'ID',
                    this.eventType(),
                    correctionLetterDocument.accessKey(),
                    this.formatedEventSequence()
                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>read</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads a return message and write it to a <c>EFiscalDocumentReturnInfo_BR</c>
    /// </summary>
    /// <param name="_stream">
    /// The return message.
    /// </param>
    /// <param name="_returnInfo">
    /// A instance of a <c>EFiscalDocumentReturnInfo_BR</c> class.
    /// </param>
    void read(IEFDocMsgStream_BR _stream, EFiscalDocumentReturnInfo_BR _returnInfo)
    {
        #ExportFiscalDocument_BR

        str             returnCode;
        str             returnCodeDescription;
        str             returnProtocolNumber;
        str             returnDateTime;
        timeOfDay       timeZone;
        utcdatetime     dateTime;
        str             timeZoneSignal;
        ;

        xmlDoc.loadXml(conpeek(_stream.read(),1));

        returnCode              = this.getNodeContent('/x:retEnvEvento/x:retEvento/x:infEvento/x:cStat');
        returnCodeDescription   = this.getNodeContent('/x:retEnvEvento/x:retEvento/x:infEvento/x:xMotivo');
        returnDateTime          = substr(this.getNodeContent('/x:retEnvEvento/x:retEvento/x:infEvento/x:dhRegEvento'),1,19);
        timeZoneSignal          = substr(this.getNodeContent('/x:retEnvEvento/x:retEvento/x:infEvento/x:dhRegEvento'),20,1);
        timeZone                = str2time(substr(this.getNodeContent('/x:retEnvEvento/x:retEvento/x:infEvento/x:dhRegEvento'),21,6));

        if (this.existsNode('/x:retEnvEvento/x:retEvento/x:infEvento/x:nProt'))
        {
            returnProtocolNumber    = this.getNodeContent('/x:retEnvEvento/x:retEvento/x:infEvento/x:nProt');
        }

        if (timeZoneSignal == '-')
        {
            dateTime = DateTimeUtil::addSeconds(DateTimeUtil::parse(returnDateTime),timeZone);
        }
        else
        {
            dateTime = DateTimeUtil::addSeconds(DateTimeUtil::parse(returnDateTime),-timeZone);
        }

        _returnInfo.parmReturnCodeStatus(returnCode);
        _returnInfo.parmReturnCodeDescription(returnCodeDescription);
        _returnInfo.parmProtocolNumber(returnProtocolNumber);
        _returnInfo.parmProcessDateTime(dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>version</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the the version of the current service
    /// </summary>
    /// <returns>
    /// The current version
    /// </returns>
    public str version()
    {
        return '1.00';
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes a xml document to a stream.
    /// </summary>
    /// <param name="_stream">
    /// The stream to be writen
    /// </param>
    /// <param name="_documentList">
    /// The <c>EFiscalDocumentList_BR</c> to generate the xml document.
    /// </param>
    public void write(IEFDocMsgStream_BR _stream, EFEventDocumentList_BR _documentList)
    {
        stream = _stream;

        if (_documentList.moveNext())
        {
            correctionLetterDocument    = _documentList.current();

            this.doFormat();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>xCondUso</Name>
				<Source><![CDATA[
        private str xCondUso()
    {
        str     condUso;

        condUso = 'A Carta de Correcao e disciplinada pelo paragrafo 1o-A do art. 7o do Convenio S/N, de 15 de dezembro de 1970 e pode ser utilizada para regularizacao de erro ocorrido na emissao de documento fiscal, ';
        condUso += 'desde que o erro nao esteja relacionado com: I - as variaveis que determinam o valor do imposto tais como: base de calculo, aliquota, diferenca de preco, quantidade, valor da operacao ou da prestacao;';
        condUso += ' II - a correcao de dados cadastrais que implique mudanca do remetente ou do destinatario; III - a data de emissao ou de saida.';

        return condUso;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EFEventDocMsgFormat_CorrectionLetter_BR</c> class
    /// </summary>
    /// <returns>
    /// An instance of the <c>EFEventDocMsgFormat_CorrectionLetter_BR</c> class
    /// </returns>
    public static EFEventDocMsgFormat_CorrectionLetter_BR construct()
    {
        return new EFEventDocMsgFormat_CorrectionLetter_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>