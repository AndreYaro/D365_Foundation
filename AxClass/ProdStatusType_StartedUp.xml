<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdStatusType_StartedUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdStatusType_StartedUp</c> class encapsulates behavior of a started production order.
/// </summary>
/// <remarks>
/// A production order is said to be started if the class implements the
/// <c>ProdStatusType.currentProdStatus</c> method by returning the <c>ProdStatusAll::StartUp</c>
/// enumeration value.
/// </remarks>
public class ProdStatusType_StartedUp extends ProdStatusType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoAuthorization</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether production order status is legal when firming is made automatically.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean autoAuthorization()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeWMSRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a started production order can be registered in Warehouse Management System.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canBeWMSRegistered()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowEditOperationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the operation status can be modified.
    /// </summary>
    /// <param name="_showInfo">
    ///    A Boolean value that determines whether an Infolog message should be displayed; optional.
    /// </param>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean checkAllowEditOperationStatus(boolean _showInfo = true)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether journal posting is allowed for a started production order.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean checkPostJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentProdStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the specific status of a production order.
    /// </summary>
    /// <returns>
    ///    Always returns the <c>ProdStatusAll::StartUp</c> value.
    /// </returns>
    public ProdStatusAll currentProdStatus()
    {
        return ProdStatusAll::StartUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    public void deleting()
    {
        throw error(strfmt(
            "@SYS22042",
            prodTable.ProdStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertedProdRoute</Name>
				<Source><![CDATA[
    public void insertedProdRoute(ProdRoute _prodRoute)
    {
        super(_prodRoute);

        if (_prodRoute.mustRouteJobsBeCreated())
        {
            ProdJobUpdate prodJobUpdate;

            prodJobUpdate = ProdJobUpdate::newProdIdOprNum(
                _prodRoute.ProdId,
                _prodRoute.OprNum);
            prodJobUpdate.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(ProdTable _prodTable)
    {
        super(_prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCanBeBatchBalanced</Name>
				<Source><![CDATA[
    public boolean pdsCanBeBatchBalanced()
    {
        return #PDSPotencyEnabled
            && !ProdJournalBOM::existsForProdId(prodTable.ProdId)
            && prodTable.isBatchBalancingEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousProdStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the previous status for a started production order.
    /// </summary>
    /// <returns>
    ///    Always returns the <c>ProdStatus::Released</c> value.
    /// </returns>
    public ProdStatus previousProdStatus()
    {
        return ProdStatus::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodNumLookupJournal</Name>
				<Source><![CDATA[
    public boolean prodNumLookupJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAutoUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs an automatic update of a started production order.
    /// </summary>
    public void runAutoUpdate()
    {
        ProdUpdStartUp prodUpdStartUp = ProdUpdStartUp::newProdId(prodTable.ProdId);

        prodUpdStartUp.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSplit</Name>
				<Source><![CDATA[
    public boolean runSplit(
        ProdParmSplit       _prodParmSplit,
        boolean             _ask            = false,
        RunbaseRecsMapable  _multi          = null
        )
    {
        if (_ask && prodTable.CollectRefLevel == 0)
        {
            return this.prodTableType().pmfCanSplit();
        }

        return super(_prodParmSplit, _ask, _multi);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startUpUpdateRouteJobs</Name>
				<Source><![CDATA[
    public void startUpUpdateRouteJobs(ProdUpdStartUp _prodUpdStartUp)
    {
        _prodUpdStartUp.updateJobStart();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a started production order can be deleted.
    /// </summary>
    /// <returns>
    ///    Always returns false because a started production order cannot be deleted.
    /// </returns>
    public boolean validateDelete()
    {
        return checkFailed("@SYS18511");
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether production bills of materials can be deleted from a started production order.
    /// </summary>
    /// <param name="_prodBOM">
    ///    The production bill of materials parameter. This parameter is disregarded by the method.
    /// </param>
    /// <returns>
    ///    Always returns false because production bills of materials cannot be removed from a started
    ///    production order.
    /// </returns>
    public boolean validateDeleteProdBOM(ProdBOM  _prodBOM)
    {
        return checkFailed(strfmt(
            "@SYS22042",
            prodTable.ProdStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a production route can be deleted from a started production order.
    /// </summary>
    /// <param name="_prodRoute">
    ///    The production route parameter. This parameter is disregarded by the method.
    /// </param>
    /// <returns>
    ///    Always returns false because a production route cannot be removed from a started production order.
    /// </returns>
    public boolean validateDeleteProdRoute(ProdRoute _prodRoute)
    {
        return checkFailed(strfmt(
            "@SYS22042",
            prodTable.ProdStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteProdBOM</Name>
				<Source><![CDATA[
    public boolean validateWriteProdBOM(ProdBOM _prodBOM)
    {
        if (_prodBOM.pdsPotencyFieldModified())
        {
            return checkFailed(strfmt("@PSC33", prodTable.ProdStatus));
        }

        return super(_prodBOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProdStatusType_StartedUp construct(ProdTable _prodTable)
    {
        return new ProdStatusType_StartedUp(_prodTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>