<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfImportRPS_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>ConfImportRPS_BR</c> extends the <c>ConfImport_BR</c> to
/// enable the importing of NFe files using the Configurator feature.
/// </summary>
class ConfImportRPS_BR extends ConfImport_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sendToInfolog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to display in the Infolog the
    /// list of records imported from the NFe file
    /// </summary>
    /// <param name="_linesArray">An <c>Array</c> of lines to be displayed.</param>
    /// <param name="_prefixesArray">An <c>Array</c> of prefixes to group the lines displayed.</param>
    /// <remarks>
    /// There should be same number of items on both arrays.
    /// </remarks>
    public void sendToInfolog(  Array   _linesArray,
                                Array   _prefixesArray)
    {
        List                        lines;
        int                         i;

        InvoiceId                   fiscalDocumentNumber;
        InvoiceDate                 fiscalDocumentDate;
        InvoiceId                   rpsNumber;
        InvoiceDate                 rpsDate;
        Name                        custName;
        InvoiceServicesAmount_BR    totalServicesAmount;
        InvoiceServicesAmount_BR    sumServicesAmount;
        int                         countRPSLines;
        ListEnumerator              enumerator;
        boolean                     hasCustomerInfo;

        setPrefix("@GLS62576");

        for (i = 1; i <= _linesArray.lastIndex(); i++)
        {
            sumServicesAmount   = 0;
            countRPSLines       = 0;

            setPrefix(_prefixesArray.value(i));
            lines       = _linesArray.value(i);

            enumerator  = lines.getEnumerator();
            while (enumerator.moveNext())
            {
                [hasCustomerInfo, fiscalDocumentNumber, fiscalDocumentDate, custName, totalServicesAmount, rpsNumber, rpsDate] = enumerator.current();
                countRPSLines++;
                sumServicesAmount += totalServicesAmount;

                if (hasCustomerInfo)
                {
                    info(strFmt("@GLS64126", fiscalDocumentNumber, fiscalDocumentDate, custName, totalServicesAmount, rpsNumber, rpsDate));
                }
                else
                {
                    info(strFmt("@GLS64279", fiscalDocumentNumber, fiscalDocumentDate, rpsNumber, rpsDate));
                }
            }

            info(strFmt("@GLS64130", countRPSLines));
            info(strFmt("@GLS64128", sumServicesAmount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterate through all the imported records and
    /// update the corresponding <c>EFDocumentCity_BR</c> records.
    /// </summary>
    public void updateRecord()
    {
        int                     i, j;
        Array                   line;
        Common                  common;
        FiscalDocument_BR       returnedFiscalDocument;
        EFDocumentCity_BR       returnedEFDocumentCity;
        RPSImportResult_BR      rpsImportResult;
        FiscalDocumentPost_BR   fiscalDocumentPost      = new FiscalDocumentPost_BR(new FiscalDocumentParmData_BR());
        container               infoLogData;

        List    linesImported   = new List(Types::Container);
        List    linesNotFound   = new List(Types::Container);
        List    linesExisting   = new List(Types::Container);
        List    linesInvalid    = new List(Types::Container);
        Array   linesArray      = new Array(Types::Class);
        Array   prefixesArray   = new Array(Types::String);

        ttsBegin;

        for (i = 1; i <= fileLines.lastIndex(); i++)
        {
            line = fileLines.value(i);

            for (j = 1; j <= line.lastIndex(); j++)
            {
                common = line.value(j);

                switch (common.TableId)
                {
                    case tableNum(FiscalDocument_BR):
                        returnedFiscalDocument = common;
                        break;

                    case tableNum(EFDocumentCity_BR):
                        returnedEFDocumentCity = common;
                        break;

                    default:
                        continue;
                }
            }

            rpsImportResult = fiscalDocumentPost.updateImportedEFDocumentCity(returnedFiscalDocument, returnedEFDocumentCity);

            infoLogData     = [ returnedFiscalDocument.FiscalDocumentNumber,
                                returnedFiscalDocument.FiscalDocumentDate,
                                DirPartyTable::findRec(CustTable::find(returnedFiscalDocument.FiscalDocumentAccountNum).Party).Name,
                                returnedFiscalDocument.TotalServicesAmount,
                                returnedEFDocumentCity.RPSNumber,
                                returnedEFDocumentCity.RPSDate];

            switch (rpsImportResult)
            {
                case RPSImportResult_BR::AlreadyImported:
                    linesExisting.addEnd([true] + infoLogData);
                    break;

                case RPSImportResult_BR::Imported:
                    linesImported.addEnd([true] + infoLogData);
                    break;

                case RPSImportResult_BR::Invalid:
                    linesInvalid.addEnd([true] + infoLogData);
                    break;

                case RPSImportResult_BR::NotFound:
                    linesNotFound.addEnd([false] + infoLogData);
                    break;
            }
        }

        ttsCommit;

        linesArray.value(1, linesImported);
        linesArray.value(2, linesNotFound);
        linesArray.value(3, linesExisting);
        linesArray.value(4, linesInvalid);

        prefixesArray.value(1, "@GLS64131");
        prefixesArray.value(2, "@GLS64132");
        prefixesArray.value(3, "@GLS64133");
        prefixesArray.value(4, "@GLS64278");

        this.sendToInfolog(linesArray, prefixesArray);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static ConfImportRPS_BR construct()
    {
        return new ConfImportRPS_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>