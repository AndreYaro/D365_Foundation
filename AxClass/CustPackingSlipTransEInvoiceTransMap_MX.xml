<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPackingSlipTransEInvoiceTransMap_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustPackingSlipTransEInvoiceTransMap_MX extends EInvoiceTransBaseMap_MX
{
    CustPackingSlipJour   custPackingSlipJour;
    CustPackingSlipTrans  custPackingSlipTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amount</Name>
				<Source><![CDATA[
    public LineAmount amount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCur</Name>
				<Source><![CDATA[
    public LineAmount amountCur()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountInReportingCur</Name>
				<Source><![CDATA[
    public LineAmount amountInReportingCur()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>brandCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the brand of the product.
    /// </summary>
    /// <returns>
    /// The Brand code.
    /// </returns>
    public BrandCode_MX brandCode()
    {
        return eInvoiceTrans.BrandCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsDocDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustomsDocNumber</c> value of the posted document line.
    /// </summary>
    /// <returns>
    /// The <c>CustomsDocNumber</c> value of the posted document line.
    /// </returns>
    public CustomsDocDate_MX customsDocDate()
    {
        return eInvoiceTrans.CustomsDocDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCode()
    {
        return custPackingSlipJour.salesTable().CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsDocNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustomsDocNumber</c> value.
    /// </summary>
    /// <returns>
    /// The <c>CustomsDocNumber</c> value.
    /// </returns>
    public CustomsDocNumber_MX customsDocNumber()
    {
        return eInvoiceTrans.CustomsDocNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustomsName</c> value of the posted document line.
    /// </summary>
    /// <returns>
    /// The <c>CustomsName</c> value of the posted document line.
    /// </returns>
    public CustomsName_MX customsName()
    {
        return eInvoiceTrans.CustomsName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SAT customs quantity of posted invoice line.
    /// </summary>
    /// <returns>
    /// The SAT customs quantity of the posted invoice line.
    /// </returns>
    public SalesOrderedQty customsQty()
    {
        return eInvoiceTrans.CustomsQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customUomCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a custom unit of measure code according to SAT classification.
    /// </summary>
    /// <returns>
    /// A custom unit of measure code according to SAT classification.
    /// </returns>
    public EInvoiceExtCodeId_MX customUomCode()
    {
        return eInvoiceTrans.CustomUOMCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noIdentification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets item number of the merchandise.
    /// </summary>
    /// <returns>
    /// The item number.
    /// </returns>
    public str noIdentification()
    {
        if (custPackingSlipTrans.SalesId && this.serialNumber())
        {
            return this.serialNumber();
        }
        else
        {
            return this.productCode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the serial number of the line item.
    /// </summary>
    /// <returns>
    /// Serial number per line.
    /// </returns>
    public InventSerialId serialNumber()
    {
        InventDim inventDim = InventDim::find(custPackingSlipTrans.InventDimId);

        return inventDim.inventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountAmount</Name>
				<Source><![CDATA[
    public AmountCur discountAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountAmountMST</Name>
				<Source><![CDATA[
    public AmountMST discountAmountMST()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tariffFraction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a tariff fraction code according to SAT classification.
    /// </summary>
    /// <returns>
    /// A tariff fraction code according to SAT classification.
    /// </returns>
    public EInvoiceExtCodeId_MX tariffFraction()
    {
        return eInvoiceTrans.TariffFraction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>materialType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a customs material type code according to SAT classification.
    /// </summary>
    /// <returns>
    /// A customs material type code according to SAT classification.
    /// </returns>
    [Hookable(false)]
    public CustomsMaterialType_MX materialType()
    {
        return eInvoiceTrans.CustomsMaterialType_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>materialDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns material description
    /// </summary>
    /// <returns>
    /// Material description
    /// </returns>
    [Hookable(false)]
    public MaterialDescription_MX materialDescription()
    {
        return eInvoiceTrans.MaterialDescription_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a document type code according to SAT classification.
    /// </summary>
    /// <returns>
    /// A document type code according to SAT classification.
    /// </returns>
    [Hookable(false)]
    public DocumentType_MX documentType()
    {
        return eInvoiceTrans.CustomsDocumentType_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>identifierCustomsDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns identifier of customs document.
    /// </summary>
    /// <returns>
    /// Identifier of customs document
    /// </returns>
    [Hookable(false)]
    public IdentifierCustomDocument_MX identifierCustomsDocument()
    {
        return eInvoiceTrans.IdentifierCustomsDocument_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables.
    /// </summary>
    /// <param name="_custPackingSlipTrans">
    /// A <c>CustPackingSlipTrans</c> record.
    /// </param>
    protected void initCustPackingSlipTrans(CustPackingSlipTrans _custPackingSlipTrans)
    {
        custPackingSlipTrans.data(_custPackingSlipTrans);
    
        eInvoiceTrans = EInvoiceTrans_MX::findByRef(custPackingSlipTrans.TableId, custPackingSlipTrans.RecId);
        eInvoiceJour  = EInvoiceJour_MX::find(eInvoiceTrans.RefEInvoiceJourRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs specific initialization code.
    /// </summary>
    /// <param name="_originalJournalLine">
    /// A <c>CustPackingSlipTrans</c> record.
    /// </param>
    protected void initLine(Common _originalJournalLine)
    {
        this.initCustPackingSlipTrans(_originalJournalLine);
    
        custPackingSlipJour = custPackingSlipTrans.custPackingSlipJour();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransId</c> value from the posted document line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransId</c> value of the original document line.
    /// </returns>
    public InventTransId inventTransId()
    {
        return custPackingSlipTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item ID from the posted document line.
    /// </summary>
    /// <returns>
    /// The posted document line item ID.
    /// </returns>
    public ItemId itemId()
    {
        return custPackingSlipTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item name of original posted document.
    /// </summary>
    /// <returns>
    /// The posted document line item name.
    /// </returns>
    public ItemFreeTxt itemName()
    {
        return Global::strLRTrim(custPackingSlipTrans.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of <c>MarkupTrans</c> records that are related to each invoice line.
    /// </summary>
    /// <returns>
    /// A list of <c>MarkupTrans</c> records.
    /// </returns>
    public List markupTransList()
    {
        List list = new List(Types::Record);
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a product code according to SAT classification.
    /// </summary>
    /// <returns>
    /// A product code according to SAT classification.
    /// </returns>
    public EInvoiceExtCodeId_MX productCode()
    {
        return eInvoiceTrans.ProductCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertyNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the property number information about the posted document line.
    /// </summary>
    /// <returns>
    /// The property number information about the posted document line.
    /// </returns>
    public PropertyNumber_MX propertyNumber()
    {
        return eInvoiceTrans.PropertyNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity of posted document line.
    /// </summary>
    /// <returns>
    /// The posted document line quantity.
    /// </returns>
    public Qty qty()
    {
        return custPackingSlipTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public RefRecId sourceRecId()
    {
        return custPackingSlipTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public RefTableId sourceTableId()
    {
        return custPackingSlipTrans.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit ID of the posted document line.
    /// </summary>
    /// <returns>
    /// The posted document line unit ID.
    /// </returns>
    public UnitOfMeasureSymbol unit()
    {
        return custPackingSlipTrans.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPrice</Name>
				<Source><![CDATA[
    public SalesPrice unitPrice()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPriceMST</Name>
				<Source><![CDATA[
    public SalesPrice unitPriceMST()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uomCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a unit of measure code according to SAT classification.
    /// </summary>
    /// <returns>
    /// A unit of measure code according to SAT classification.
    /// </returns>
    public EInvoiceExtCodeId_MX uomCode()
    {
        return eInvoiceTrans.uomCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>CustPackingSlipTransEInvoiceTransMap_MX</c> class.
    /// </summary>
    /// <param name="_custPackingSlipTrans">
    /// The original <c>CustPackingSlipTrans</c> record that will be used as the data source.
    /// </param>
    /// <returns>
    /// A new instance of the <c>CustPackingSlipTransEInvoiceTransMap_MX</c> class.
    /// </returns>
    /// <remarks>
    ///  Use the following procedure to customize or extend the X class.
    ///  <list type="number">
    ///   <item>
    ///    <description>
    ///    Create a new class that derives from the <c>CustPackingSlipTransEInvoiceTransMap_MX</c> class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Overlayer the <c>construct</c> method on the <c>CustPackingSlipTransEInvoiceTransMap_MX</c> class so
    ///    that it returns an instance of the derived class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Override the methods from the <c>CustPackingSlipTransEInvoiceTransMap_MX</c> class that you want to
    ///    customize or extend in your derived class.
    ///    </description>
    ///   </item>
    ///  </list>
    ///   This procedure helps to ensure that your customizations are maintained if the base version of the
    ///  X class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for static construct Methods" />
    /// </remarks>
    public static CustPackingSlipTransEInvoiceTransMap_MX construct(CustPackingSlipTrans _custPackingSlipTrans)
    {
        CustPackingSlipTransEInvoiceTransMap_MX  packingSlipTransMap;

        packingSlipTransMap = new CustPackingSlipTransEInvoiceTransMap_MX();
        packingSlipTransMap.initLine(_custPackingSlipTrans);

        return packingSlipTransMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a description of item.
    /// </summary>
    /// <returns>Item description.</returns>
    public str itemDescription()
    {
        EcoResProduct product = EcoResProduct::find(custPackingSlipTrans.inventTable().Product);
        return product.productDescription();
    }

]]></Source>
			</Method>
			<Method>
				<Name>weight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a weight of item.
    /// </summary>
    /// <returns>Gross weight.</returns>
    public ItemNetWeight weight()
    {
        return custPackingSlipTrans.inventTable().grossWeight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a total weight of the items of the line.
    /// </summary>
    /// <returns>Gross weight.</returns>
    public ItemNetWeight totalWeight()
    {
        return custPackingSlipTrans.inventTable().grossWeight() * custPackingSlipTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropOffSpot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns drop off spot.
    /// </summary>
    /// <returns>Spot id.</returns>
    public EInvoiceSiteID_MX dropOffSpot()
    {
        return eInvoiceTrans.DropOffSpot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickUpSpot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns pick up spot.
    /// </summary>
    /// <returns>Spot id.</returns>
    public EInvoiceSiteID_MX pickUpSpot()
    {
        return eInvoiceTrans.PickUpSpot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHazardous</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if the document is related with hazardous materials' transportation.
    /// </summary>
    /// <returns>
    /// Returns true if hazardous materials are used; otherwise false.
    /// </returns>
    public boolean isHazardous()
    {
        return eInvoiceTrans.IsHazardous == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hazardousMaterialType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the type of hazardous material.
    /// </summary>
    /// <returns>Hazardous material type.</returns>
    public EInvoiceExtCodeId_MX hazardousMaterialType()
    {
        return eInvoiceTrans.HazardousMaterialType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containerType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the type of container.
    /// </summary>
    /// <returns>Container type.</returns>
    public EInvoiceExtCodeId_MX containerType()
    {
        return eInvoiceTrans.ContainerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayHazardous</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether hazardous material tag must be displayed in xml document.
    /// </summary>
    /// <returns><c>NoYes</c> value.</returns>
    public NoYes displayHazardous()
    {
        return custPackingSlipTrans.inventTable().DisplayHazard_MX;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>