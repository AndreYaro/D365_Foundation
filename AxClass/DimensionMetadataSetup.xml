<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionMetadataSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionMetaSetup</c> class populates the dimension metadata tables with data.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
[
SysSetupTableAttribute(tablestr(DimensionAttribute)),
SysSetupTableAttribute(tablestr(DimensionHierarchy)),
SysSetupConfigKeyAttribute(configurationkeystr(LedgerBasic))
]
class DimensionMetadataSetup implements SysSetup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the default data.
    /// </summary>
    void loadData()
    {
        // Skip syncing dimension runtime extensions as part of SysSetup to avoid nested dbsync calls.
        // The runtime expansion process will be invoked by an additional step in the deployment.
        SysGlobalObjectCache sysGlobalObjectCache;

        if (classfactory)
        {
            sysGlobalObjectCache = classfactory.globalObjectCache();
        }
        else
        {
            sysGlobalObjectCache = new SysGlobalObjectCache();
        }

        sysGlobalObjectCache.insert(DimensionMetaDataConstants::DimensionSyncSkipScope, [DimensionMetaDataConstants::DimensionSyncSkipKey], [true]);

        try
        {
            DimensionAttribute::getSystemGeneratedAttributeIds();
            DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

            DimensionHierarchy::getSystemGeneratedHierarchyIds();
            DimensionHierarchy::getMainAccountFocus();

            // Ensure a default delimiter gets saved in DimensionParameters due to direct SQL for data entities
            DimensionParameters::find();
        }
        finally
        {
            // Enable dimension sync
            if (classfactory)
            {
                sysGlobalObjectCache = classfactory.globalObjectCache();
            }
            else
            {
                sysGlobalObjectCache = new SysGlobalObjectCache();
            }

            sysGlobalObjectCache.remove(DimensionMetaDataConstants::DimensionSyncSkipScope, str2con(DimensionMetaDataConstants::DimensionSyncSkipKey));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>