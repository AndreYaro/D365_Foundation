<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountTablePDC_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(BankAccountTable))]
final class BankAccountTablePDC_ApplicationSuite_Extension
{
}

]]></Declaration>
		<Methods>
			<Method>
				<Name>pendingPaymentAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the bridging ledger entries excluding canceled transactions associated with the bank account.
    /// </summary>
    /// <param name = "_accountType">
    /// The account type of the payment entries to sum.
    /// </param>
    /// <param name = "_bankAccountLedgerDimension">
    /// The record ID of a ledger dimension that represents the specified bank account.
    /// </param>
    /// <returns></returns>
    protected AmountCur pendingPaymentAmountMST(CustVendACType _accountType)
    {
        AmountCur pendingPaymentAmountMST = next pendingPaymentAmountMST(_accountType);

        if (isFlightEnabled(CustVendPDCManager::CalculateCanceledPDCPayments))
        {
            DimensionDynamicAccount bankAccountLedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(this.AccountID, LedgerJournalACType::Bank);
            QueryRun queryRun = new QueryRun(this.getPendingPaymentCanceledAmountSumQuery(_accountType, bankAccountLedgerDimension));

            LedgerJournalTrans ledgerJournalTrans;

            if (queryRun.next())
            {
                ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));
            }

            AmountCur cancelledAmount = ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit;

            pendingPaymentAmountMST -= cancelledAmount;
        }

        return pendingPaymentAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPendingPaymentCanceledAmountSumQuery</Name>
				<Source><![CDATA[
    private Query getPendingPaymentCanceledAmountSumQuery(CustVendACType _accountType, DimensionDynamicAccount _bankAccountLedgerDimension)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsLedgerJournalTrans = query.addDataSource(tableNum(LedgerJournalTrans));
        qbdsLedgerJournalTrans.fetchMode(QueryFetchMode::One2One);
        qbdsLedgerJournalTrans.addSelectionField(fieldNum(LedgerJournalTrans, AmountCurDebit), SelectionField::Sum);
        qbdsLedgerJournalTrans.addSelectionField(fieldNum(LedgerJournalTrans, AmountCurCredit), SelectionField::Sum);

        QueryBuildDataSource qbdsCustVendPDCRegister = qbdsLedgerJournalTrans.addDataSource(tableNum(CustVendPDCRegister));
        qbdsCustVendPDCRegister.joinMode(JoinMode::ExistsJoin);
        qbdsCustVendPDCRegister.relations(false);
        qbdsCustVendPDCRegister.fetchMode(QueryFetchMode::One2One);
        qbdsCustVendPDCRegister.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(CustVendPDCRegister, LedgerJournalTrans));
        qbdsCustVendPDCRegister.addRange(fieldNum(CustVendPDCRegister, AccountType)).value(queryValue(_accountType));
        qbdsCustVendPDCRegister.addRange(fieldNum(CustVendPDCRegister, PDCStatus)).value(queryValue(PostDatedCheckStatus::Cancelled));

        QueryBuildDataSource qbdsCustVendPaymModeTable;

        if (_accountType == CustVendACType::Cust)
        {
            qbdsCustVendPaymModeTable = qbdsLedgerJournalTrans.addDataSource(tableNum(CustPaymModeTable));
            qbdsCustVendPaymModeTable.addLink(fieldNum(LedgerJournalTrans, PaymMode), fieldNum(CustPaymModeTable, PaymMode));
            qbdsCustVendPaymModeTable.addRange(fieldNum(CustPaymModeTable, PaymentLedgerDimension)).value(queryValue(_bankAccountLedgerDimension));
        }
        else
        {
            qbdsCustVendPaymModeTable = qbdsLedgerJournalTrans.addDataSource(tableNum(VendPaymModeTable));
            qbdsCustVendPaymModeTable.addLink(fieldNum(LedgerJournalTrans, PaymMode), fieldNum(VendPaymModeTable, PaymMode));
            qbdsCustVendPaymModeTable.addRange(fieldNum(VendPaymModeTable, PaymentLedgerDimension)).value(queryValue(_bankAccountLedgerDimension));
        }

        qbdsCustVendPaymModeTable.joinMode(JoinMode::ExistsJoin);
        qbdsCustVendPaymModeTable.relations(false);
        qbdsCustVendPaymModeTable.fetchMode(QueryFetchMode::One2One);

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>