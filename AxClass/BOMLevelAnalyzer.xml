<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomLevelAnalyzer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMLevelAnalyzer</c> class computes BOM levels for items from a Directed Acyclic Graph (DAG)
///    with is-produced-from dependencies between items.
/// </summary>
/// <remarks>
///    Items that are not used to produce anything else (also known as finished goods) will have a BOM
///    level of 0.Items used to produce other items will have a BOM level that is 1 plus the highest BOM
///    level of the items produced from them.
/// </remarks>
public class BomLevelAnalyzer
{
    Map   graph;
    Array sequence;
    Map   levels;
    Map   endItemGroup;
    Map   endItemMembership;
    private boolean mustClearGraphAfterAnalysis;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDependency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an is-produced-from dependency between two items to the dependency graph.
    /// </summary>
    /// <param name="_used">
    ///    The item used to produce the other item, specified by its <c>RecID</c> in the inventory table.
    /// </param>
    /// <param name="_produced">
    ///    The item produced by using the other item, specified by its <c>RecID</c> in the inventory table.
    /// </param>
    /// <remarks>
    ///    Circular structures should not be created.
    /// </remarks>
    public void addDependency(RecId _used, RecId _produced)
    {
        Set s;

        // get the array of children of the produced item, or create it if it doesn't exist
        if (graph.exists(_produced))
        {
            s = graph.lookup(_produced);
        }
        else
        {
            s = new Set(Types::Int64);

            graph.insert(_produced, s);
        }

        // add the used item to this array
        s.add(_used);
    }

]]></Source>
			</Method>
			<Method>
				<Name>analyze</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyzes the dependency graph and determines the BOM level of each item.
    /// </summary>
    /// <remarks>
    ///    The dependency graph will be erased to reduce memory pressure.
    /// </remarks>
    public void analyze()
    {
        MapEnumerator me;
        SetEnumerator se;
        Set             groupSet;
        SetEnumerator   groupEnum;
        RecId           groupId;

        RecId parent, child;

        int minLevel;
        int i;

        // topological sort using depth-first search
        me = graph.getEnumerator();
        while (me.moveNext())
        {
            this.depthFirstSearch(me.currentKey());
        }

        // determine BOMLevels in reverse finishing order from the topological sort
        for (i = sequence.lastIndex(); i > 0; i--)
        {
            parent = sequence.value(i);

            if (graph.exists(parent))
            {
                minLevel = levels.lookup(parent) + 1;

                se = graph.lookup(parent).getEnumerator();
                while (se.moveNext())
                {
                    child = se.current();

                    if (levels.lookup(child) < minLevel)
                    {
                        levels.insert(child, minLevel);

                        if (endItemMembership.exists(child))
                        {
                            groupId = endItemMembership.lookup(child);
                            levels.insert(groupId,minLevel);
                            groupSet = endItemGroup.lookup(groupId);
                            groupEnum = groupSet.getEnumerator();
                            while (groupEnum.moveNext())
                            {
                                levels.insert(groupEnum.current(),minLevel);
                            }
                        }
                    }
                }
            }
        }

        if (this.parmMustClearGraphAfterAnalysis())
        {
            // free up memory
            sequence = null;
            graph    = null;
            endItemGroup = null;
            endItemMembership = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>depthFirstSearch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the depth first search algorithm on the dependency graph
    /// </summary>
    /// <param name="_item">
    ///    The <c>RecId</c> of the item (node) from which to search.
    /// </param>
    protected void depthFirstSearch(RecId _item)
    {
        RecId           groupId = _item;
        Set             groupSet = null;
        SetEnumerator se;

        if (endItemMembership.exists(_item))
        {
            groupId = endItemMembership.lookup(_item);
            groupSet = endItemGroup.lookup(groupId);
        }
        // don't visit any item twice
        if (!levels.exists(groupId))
        {
            levels.insert(groupId, 0);
            if (groupSet)
            {
                se = groupSet.getEnumerator();
                while (se.moveNext())
                {
                    levels.insert(se.current(),0);
                }
            }

            // visit the item's children
            if (graph.exists(groupId))
            {
                se = graph.lookup(groupId).getEnumerator();
                while (se.moveNext())
                {
                    this.depthFirstSearch(se.current());
                }
            }

            // add the item to the sequence in which we record the order in which we finish visiting the items
            sequence.value(sequence.lastIndex() + 1, groupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the BOM level of the specified item.
    /// </summary>
    /// <param name="_item">
    ///    The <c>RecId</c> of the item, specified by its <c>RecID</c> in the inventory table.
    /// </param>
    /// <returns>
    ///    The BOM level of the specified item.
    /// </returns>
    public BOMLevel getLevel(RecId _item)
    {
        if (levels.exists(_item))
        {
            return levels.lookup(_item);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a map that contains record IDs and their BOM level.
    /// </summary>
    /// <returns>
    ///    A map that contains record IDs and their BOM level.
    /// </returns>
    public Map getLevels()
    {
        return levels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLevels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the map that contains record IDs and their BOM level.
    /// </summary>
    public void clearLevels()
    {
        sequence = new Array(Types::Int64);
        levels = new Map  (Types::Int64, Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMustClearGraphAfterAnalysis</Name>
				<Source><![CDATA[
    public boolean parmMustClearGraphAfterAnalysis(boolean _mustClearGraphAfterAnalysis = mustClearGraphAfterAnalysis)
    {
        mustClearGraphAfterAnalysis = _mustClearGraphAfterAnalysis;
        return mustClearGraphAfterAnalysis;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        graph    = new Map  (Types::Int64, Types::Class);
        endItemMembership   = new Map(Types::Int64, Types::Int64);
        endItemGroup        = new Map(Types::Int64, Types::Class);

        this.clearLevels();

        mustClearGraphAfterAnalysis = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfAddEndItemGroupMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a map from a an item to the item representing the group
    /// </summary>
    /// <param name="_member">
    /// The group member not representing the group.
    /// </param>
    /// <param name="_group">
    /// The item representing the entire group.
    /// </param>
    public void pmfAddEndItemGroupMember(RecId _member, RecId _group)
    {
        Set s;

        if (endItemGroup.exists(_group))
        {
            s = endItemGroup.lookup(_group);
        }
        else
        {
            s = new Set(Types::Int64);

            endItemGroup.insert(_group, s);
        }
        s.add(_member);
        endItemMembership.insert(_member,_group);
        endItemMembership.insert(_group,_group);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMLevelAnalyzer construct()
    {
        return new BOMLevelAnalyzer();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>