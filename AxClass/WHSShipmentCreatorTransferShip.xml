<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipmentCreatorTransferShip</Name>
	<SourceCode>
		<Declaration><![CDATA[
[WHSShipmentCreatorAttribute(InventTransType::TransferOrderShip)]
internal class WHSShipmentCreatorTransferShip extends WHSShipmentCreator
{
    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipments</Name>
				<Source><![CDATA[
    public int createShipments()
    {
        int                             shipmentsCreated;
        WHSShipConsolidationPolicy      shipConsolidationPolicy;
        WHSShipConsolidationPolicyData  shipConsolidationPolicyData;

        using (var activityContext = instrumentationLogger.shipConsolidationPolicyActivities().transferOrderConsolidation())
        {
            while select shipConsolidationPolicy
                order by ShipConsolidationPolicySeqNum asc
                where shipConsolidationPolicy.ShipConsolidationPolicyType == WHSShipConsolidationPolicyType::TransferIssue
                &&    shipConsolidationPolicy.Valid
            {
                shipConsolidationPolicyData = WHSShipConsolidationPolicyData::construct(shipConsolidationPolicy);

                shipmentsCreated += this.createShipmentsForTransferOrderPolicy(shipConsolidationPolicyData);
            }

            // If consolidation policies had not been created, we would mimic the legacy consolidation behaviour
            if (!shipConsolidationPolicyData)
            {
                ListEnumerator listEnumerator = WHSShipConsolidationPolicyProvider::defaultConsolidationPolicyDataListToProcess(WHSShipConsolidationPolicyType::TransferIssue, loadPostEngine ? WHSShipConsolidationPolicyCreateApproach::LoadPostEngine : WHSShipConsolidationPolicyCreateApproach::ReleaseToWarehouse).getEnumerator();

                while (listEnumerator.moveNext())
                {
                    shipmentsCreated += this.createShipmentsForTransferOrderPolicy(listEnumerator.current());
                }
            }
            else
            {
                shipmentsCreated += this.createShipmentsForTransferOrderPolicy(WHSShipConsolidationPolicyProvider::defaultConsolidationPolicyDataToProcess(WHSShipConsolidationPolicyType::TransferIssue));
            }
        }

        return shipmentsCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipmentsForTransferOrderPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates transfer order shipments for the <c>WHSShipmentTable</c>.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">A shipment consolidation policy data object.</param>
    /// <returns>The number of shipments created.</returns>
    private int createShipmentsForTransferOrderPolicy(WHSShipConsolidationPolicyData _shipConsolidationPolicyData)
    {
        int                 numberOfShipmentsCreated;
        InventTransferId    previousTransferId;
        int                 sourceLineUsed;

        Map     shipmentCache = new Map(Types::Container, Types::Record);
        Query   query;
        
        if (loadPostEngine)
        {
            query = this.warehouseReleaseQueryBuilder().buildTransferIssueQueryForLoadIdAndPolicy(_shipConsolidationPolicyData, loadPostEngine.parmLoadTable().LoadId);
        }
        else
        {
            query = this.warehouseReleaseQueryBuilder().buildTransferIssueQueryForReleaseToWarehouseIdAndPolicy(_shipConsolidationPolicyData, releaseToWarehouseId);
        }

        QueryRun queryRun = new QueryRun(query);
        
        using (WHSShipSkipFinalizingConsolidatedTransferShipmentContext context = WHSShipSkipFinalizingConsolidatedTransferShipmentContext::construct())
        {
            while (queryRun.next())
            {
                sourceLineUsed++;

                InventTransferLine inventTransferLine = queryRun.get(tableNum(InventTransferLine));

                if (this.createOrConsolidateShipmentForTransferOrderPolicy(_shipConsolidationPolicyData, queryRun, previousTransferId, shipmentCache))
                {
                    numberOfShipmentsCreated++;
                }

                previousTransferId = inventTransferLine.TransferId;
            }
        }

        if (!shipmentCache.empty())
        {
            MapEnumerator shipmentEnumerator = shipmentCache.getEnumerator();

            while (shipmentEnumerator.moveNext())
            {
                WHSShipmentTable shipmentTable = shipmentEnumerator.currentValue();

                if (shipmentTable.finalizeConsolidatedTransferShipmentForPolicy())
                {
                    shipmentTable.update();
                }
            }
        }
    
        if (sourceLineUsed)
        {
            instrumentationLogger.logAttributeValueInformation(this.createParametersMap(_shipConsolidationPolicyData.parmShipConsolidationPolicy().ShipConsolidationPolicySeqNum,
                                                                                        sourceLineUsed,
                                                                                        numberOfShipmentsCreated));
        }

        return numberOfShipmentsCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrConsolidateShipmentForTransferOrderPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or consolidates shipments based on the records that are selected in the queryrun.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">A shipment consolidation policy data object.</param>
    /// <param name = "_queryRunReleaseLine">A query run that holds the selection of records for a sales line that should be used for the shipment creation.</param>
    /// <param name = "_previousTransferId">The transfer ID of the transfer order that was previously processed.</param>
    /// <param name = "_shipmentCache">A temporary shipment cache used to store the shipments that have previously been created or found.</param>
    /// <returns>true if a new shipment was created; otherwise false.</returns>
    private boolean createOrConsolidateShipmentForTransferOrderPolicy(
        WHSShipConsolidationPolicyData  _shipConsolidationPolicyData,
        QueryRun                        _queryRunReleaseLine,
        SalesId                         _previousTransferId,
        Map                             _shipmentCache)
    {
        WHSLoadLine         loadLine            = _queryRunReleaseLine.get(tableNum(WHSLoadLine));
        InventTransferLine  inventTransferLine  = _queryRunReleaseLine.get(tableNum(InventTransferLine));
        InventTransferTable inventTransferTable = _queryRunReleaseLine.get(tableNum(InventTransferTable));

        container               policyFieldValuesCacheKey;
        boolean                 shipmentCreated;
        WHSShipConsolidationPolicyData shipConsolidationPolicyData;

        if (loadLine.ShipConsolidationPolicy && loadLine.ShipConsolidationPolicy != _shipConsolidationPolicyData.parmShipConsolidationPolicy().RecId)
        {
            WHSShipConsolidationPolicy shipConsolidationPolicy;

            select firstonly shipConsolidationPolicy
                where shipConsolidationPolicy.RecId == loadLine.ShipConsolidationPolicy;

            if (!shipConsolidationPolicy
            ||  !shipConsolidationPolicy.Valid
            ||  shipConsolidationPolicy.ShipConsolidationPolicyType != WHSShipConsolidationPolicyType::TransferIssue)
            {
                throw error("@SYS6144");
            }

            shipConsolidationPolicyData = WHSShipConsolidationPolicyData::construct(shipConsolidationPolicy);
        }
        else
        {
            shipConsolidationPolicyData = _shipConsolidationPolicyData;
        }

        WHSShipmentId           crossDockShipmentId;

        if (this.hasCrossDockWorkBuildId() && WHSWareReleaseUseCrossDockForShipConsPoliciesFlightV3::instance().isEnabled())
        {
            crossDockShipmentId = warehouseRelease.getAtSupplyReceiptCrossDockShipmentId(inventTransferLine);
    
            if (crossDockShipmentId && !shipConsolidationPolicyData.shipConsolidationPolicyFields().empty())
            {
                WHSShipmentTable crossDockShipmentTable = WHSShipmentTable::find(crossDockShipmentId, true);
                policyFieldValuesCacheKey = this.calcPolicyFieldValuesCacheKey(shipConsolidationPolicyData, _queryRunReleaseLine, crossDockShipmentTable);

                if (!_shipmentCache.exists(policyFieldValuesCacheKey))
                {
                    _shipmentCache.insert(policyFieldValuesCacheKey, crossDockShipmentTable);
                }
            }
        }

        var shipmentParameters = WHSWarehouseReleaseTransferOrderParameters::newFromParameters(false, inventTransferTable, inventTransferLine);
        
        shipmentParameters.ShipConsolidationPolicyData = shipConsolidationPolicyData;

        WHSShipmentTable shipmentTable = this.initShipmentWithoutIdForTransferOrder(shipmentParameters);
        WHSShipmentTable shipmentTableFound;

        if (loadPostEngine)
        {
            shipmentTable.LoadId = loadLine.LoadId;
            shipmentTable.tmsInitCarrierServiceFromLoad();
        }

        if (!shipConsolidationPolicyData.shipConsolidationPolicyFields().empty())
        {
            policyFieldValuesCacheKey = this.calcPolicyFieldValuesCacheKey(shipConsolidationPolicyData, _queryRunReleaseLine, shipmentTable);

            if (_shipmentCache.exists(policyFieldValuesCacheKey))
            {
                shipmentTableFound = _shipmentCache.lookup(policyFieldValuesCacheKey);
            }
            else if (shipConsolidationPolicyData.parmShipConsolidationPolicy().ConsolidateWithExistingShipments)
            {
                shipmentTableFound = this.findConsolidationShipmentForTransferOrderAndPolicy(
                    shipConsolidationPolicyData,
                    shipmentTable,
                    shipmentParameters);
            }
        }

        if (shipmentTableFound.RecId)
        {
            shipmentTableFound.consolidateTransferLineShipmentForPolicy2(shipmentTable, shipConsolidationPolicyData.parmShipConsolidationPolicy());
            shipmentTableFound.update();

            if (inventTransferLine.TransferId != _previousTransferId)
            {
                shipmentTableFound.createShipmentNotes(inventTransferTable);
            }

            _shipmentCache.insert(policyFieldValuesCacheKey, shipmentTableFound);

            this.updateLoadLineFromShipment(loadLine, shipmentTableFound);
        }
        else
        {
            shipmentTable.initShipmentId();
            shipmentTable.insert();

            if (!shipConsolidationPolicyData.shipConsolidationPolicyFields().empty())
            {
                _shipmentCache.insert(policyFieldValuesCacheKey, shipmentTable);
            }

            shipmentTable.createShipmentNotes(inventTransferTable);
            shipmentCreated = true;

            this.updateLoadLineFromShipment(loadLine, shipmentTable);
        }

        if (WHSWareReleaseUseCrossDockForShipConsPoliciesFlightV3::instance().isEnabled())
        {
            warehouseRelease.initializeLoadLineFromShipmentForTransferOrderInternal(loadLine, shipmentTableFound.RecId ? shipmentTableFound : shipmentTable, crossDockShipmentId);
            loadLine.update();
        }
    
        return shipmentCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShipmentWithoutIdForTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new shipment for a transfer order. The Shipment Id is not initialized.
    /// </summary>
    /// <param name = "_transferParameters">Transfer order shipment parameters.</param>
    /// <returns>The initialized shipment instance. The Shipment Id is not initialized.</returns>
    private WHSShipmentTable initShipmentWithoutIdForTransferOrder(WHSWarehouseReleaseTransferOrderParameters _transferParameters)
    {
        WHSShipmentTable shipmentTable;

        shipmentTable.initShipmentWithoutIdForTransferOrder(_transferParameters);

        return shipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findConsolidationShipmentForTransferOrderAndPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a consolidation shipment for a transfer order.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">A shipment consolidation policy data object.</param>
    /// <param name = "_shipmentTable">A shipment instance is being consolidated.</param>
    /// <param name = "_consolidationParameters">A transfer order shipment parameters instance.</param>
    /// <returns>The initialized shipment instance if found.</returns>
    private WHSShipmentTable findConsolidationShipmentForTransferOrderAndPolicy(
        WHSShipConsolidationPolicyData              _shipConsolidationPolicyData,
        WHSShipmentTable                            _shipmentTable,
        WHSWarehouseReleaseTransferOrderParameters  _consolidationParameters)
    {
        return this.findConsolidationShipmentForPolicy(
            _shipConsolidationPolicyData,
            _shipmentTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>