<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReport3F_2013</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayReport3F_2013 extends XMLExcelReport_RU implements BatchRetryable
{
    #define.page1('PAGE1')
    #define.page2('PAGE2')
    #define.pageWidth(154)

    date                            end2012, end2011;

    #define.yr2012(2012)
    RPayCounterUnit                 fundSalary, vacationPayment;

    ReportPeriod_RU                 payPeriodStart, payPeriodEnd, overduePeriodEnd, overduePeriodVacation;
    RHRMEmplId                      responsibleId;

    DialogField                     dfPayPeriodStart;
    DialogField                     dfPayPeriodEnd;
    DialogField                     dfResponsibleId;

    Amount                          overdueAmountTotal01,
                                    lastMonthAmount02,
                                    overdueAmountPrev9, //2010
                                    overdueAmountPrev10,//2009
                                    firedDebtAmount11;

    Set                             emplCount;

    date                            end2010, end2009;

    #define.div1000(1000)

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        payPeriodStart,
        payPeriodEnd,
        responsibleId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCurrentVacation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcCurrentVacation()
    {
        RPayTrans                       payTrans;
        RpayAverageEarnEmplPeriodTable  vacationTable;
        RPayAverageEarnValue            avgEarnValue;
        RPaySheetTable                  sheetTable;

        //calc current debt vacations
        select sum(amount) from payTrans
            where payTrans.SourceDate == overduePeriodVacation
            join RecId from avgEarnValue
            where avgEarnValue.RecId == payTrans.SourceRecId
                join vacationTable
                where vacationTable.RecId               == avgEarnValue.AverageEarnEmplPeriodRecid  &&
                      vacationTable.averageEarnCodeType == RPayAverageEarnCodeType::Vacation        &&
                      vacationTable.StartDate           <= payPeriodEnd                             &&
                      vacationTable.EndDate             >= payPeriodStart                           &&
                      vacationTable.SheetTableRecid     != 0                                        &&
                      vacationTable.Included
                    join sheetTable
                        where sheetTable.RecId          == vacationTable.SheetTableRecid &&
                              sheetTable.PaySheetSost   == RPaySheetSost::ForPaid        &&
                              sheetTable.PayPeriod      <= payPeriodEnd;

        lastMonthAmount02 += payTrans.Amount;

        select sum(amount) from payTrans
            where payTrans.SourceDate == overduePeriodVacation
                join RecId from vacationTable
                where vacationTable.RecId               ==  payTrans.SourceRecId                    &&
                      vacationTable.averageEarnCodeType == RPayAverageEarnCodeType::Vacation        &&
                      vacationTable.StartDate           <= payPeriodEnd                             &&
                      vacationTable.EndDate             >= payPeriodStart                           &&
                      vacationTable.SheetTableRecid     != 0                                        &&
                      vacationTable.Included
                    join RecId from sheetTable
                        where sheetTable.RecId          == vacationTable.SheetTableRecid &&
                              sheetTable.PaySheetSost   == RPaySheetSost::ForPaid        &&
                              sheetTable.PayPeriod      <= payPeriodEnd;

        lastMonthAmount02 += payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOverdueDebtAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcOverdueDebtAmount()
    {
        RPaySheetTable                  sheetTable, paySheetTablePeriod;
        RPaySheetTrans                  sheetTrans;
        RHRMEmplTable                   emplTable;

        Amount reportRound(Amount _amount)
        {
            return round (_amount / #div1000, 0.1);
        }

        void amountUpdate(Amount _amount)
        {
            if (sheetTable.payPeriod <= end2011)
                overdueAmountPrev10 += _amount;

            if (year(sheetTable.payPeriod) == #yr2012)
                overdueAmountPrev9 += _amount;

            if (sheetTable.PayPeriod == overduePeriodEnd)
                lastMonthAmount02   += sheetTrans.totalAmount();

            if (year(sheetTable.PayPeriod) <= #yr2012 && empltable.PayResignedDate <= end2012 && empltable.PayResignedDate)
                firedDebtAmount11 += sheetTrans.totalAmount();

            if (sheetTrans.Emplid)
                emplCount.add(sheetTrans.Emplid);

            overdueAmountTotal01 += _amount;
        }

        end2012 = dateEndYr(mkDate(1, 1, #yr2012));
        end2011 = dateEndYr(mkDate(1, 1, #yr2012 - 1));

        while select sheetTable
            order by payPeriod, paySheetType desc
            where sheetTable.PaySheetSost == RPaySheetSost::ForPaid  &&
                  sheetTable.PayPeriod    >= payPeriodStart          &&
                  sheetTable.PayPeriod    <= payPeriodEnd
        {
            while select sheetTrans
                where sheetTrans.sheetTableRecId == sheetTable.RecId
                    join emplTable
                        where emplTable.EmployeeId == sheetTrans.Emplid
            {
                if (sheetTable.PaySheetType == RPaySheetType::Vacation && sheetTable.PayPeriod <= overduePeriodVacation)
                    amountUpdate(sheetTrans.totalAmount());

                if (sheetTable.PayPeriod <= overduePeriodEnd && sheetTable.PaySheetType != RPaySheetType::Vacation)
                {
                    if (sheetTable.PaySheetType == RPaySheetType::Prepayment)
                    {
                        select firstonly paySheetTablePeriod
                            where paySheetTablePeriod.PaySheetType == RPaySheetType::Payment &&
                                  paySheetTablePeriod.PayPeriod    == sheetTable.PayPeriod   &&
                                  paySheetTablePeriod.PaySheetSost != RPaySheetSost::NoPaid;

                        if (paySheetTablePeriod)
                            amountUpdate(sheetTrans.totalAmount());
                    }
                    else
                    {
                        amountUpdate(sheetTrans.totalAmount());
                    }
                }
            }

            if (sheetTable.PaySheetType == RPaySheetType::Payment && sheetTable.PayPeriod <= overduePeriodEnd)
                amountUpdate(this.otherDeductions(sheetTable));
        }

        this.calcCurrentVacation();

        lastMonthAmount02       = reportRound(lastMonthAmount02);
        overdueAmountPrev9      = reportRound(overdueAmountPrev9);
        overdueAmountPrev10     = reportRound(overdueAmountPrev10);
        firedDebtAmount11       = reportRound(firedDebtAmount11);
        overdueAmountTotal01    = reportRound(overdueAmountTotal01);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)

        switch (_bookmark)
        {
            case #Page1:
            case #Page2:
                return this.getRangeHeight(_bookmark);
        }
        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void checkAndPrepareParameters()
    {
        RPayReportParameter get(int _pos, str _msg1, str _msg2)
        {
            RPayReportParameter parameter;

            parameter = RPayReportTuningTable::find(RPayReportName::RPayReport3F_2013, _pos).Parameter;

            if (! parameter)
            {
                checkFailed(strfmt("@SYS76498", _msg1, _msg2));
            }
            return parameter;
        }
        ;

        setprefix("@RUP3114");

        fundSalary      = get(1, "@RUP906", "@RUP2132");
        vacationPayment = get(2, "@RUP906", "@RUP3115");
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        this.initSectionMap();
        this.setCurrentWorksheetNum(1, #pageWidth);
        this.execute(#page1);
        document.insertPageBreak(currentRow);
        this.execute(#page2);
        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionAmountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the deduction amount from payroll line.
    /// </summary>
    /// <returns>
    /// The deduction amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Amount deductionAmountTrans()
    {
        RPayTrans   payTrans;
        RPayTable   payTable;
        RPaySheetTable sheetTable;
        RPaySheetTrans sheetTrans;
        RPayFundMember  fundMember;

        Amount ret;

        select sum(Amount) from payTrans
            where payTrans.PayPeriod >= payPeriodStart &&
                  payTrans.PayPeriod <= overduePeriodEnd
            join payTable
            where payTable.PayCtype      == payTrans.PayCtype       &&
                  payTable.PayChargeType == RPayChargeType::AddSum  &&
                 !payTable.Post;

        select sum(amount), sum(taxAmount) from sheetTrans
            exists join sheetTable
                where sheetTable.RecId        == sheetTrans.sheetTableRecId &&
                      sheetTable.PayPeriod    <= overduePeriodEnd           &&
                      sheetTable.PayPeriod    >= payPeriodStart             &&
                      sheetTable.PaySheetSost == RPaySheetSost::Paid;

        ret = payTrans.Amount - sheetTrans.Amount - sheetTrans.TaxAmount;

        select sum(Amount) from payTrans
            where payTrans.PayPeriod <= payPeriodEnd &&
                  payTrans.PayPeriod > overduePeriodEnd
            join RecId from payTable
                where payTable.PayCtype      == payTrans.PayCtype       &&
                      payTable.PayChargeType == RPayChargeType::AddSum  &&
                     !payTable.Post
            exists join fundMember
                        where fundMember.PayCostType == payTable.PayCtype &&
                              fundMember.CounterUnit == vacationPayment;

         select sum(amount), sum(taxAmount) from sheetTrans
            join RecId from sheetTable
                where sheetTable.RecId        == sheetTrans.sheetTableRecId &&
                      sheetTable.PayPeriod    <= payPeriodEnd               &&
                      sheetTable.PayPeriod    > overduePeriodEnd            &&
                      sheetTable.PaySheetSost == RPaySheetSost::Paid        &&
                      sheetTable.PaySheetType == RPaySheetType::Vacation;

        ret += payTrans.Amount - sheetTrans.Amount - sheetTrans.TaxAmount;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();

        dfPayPeriodStart    = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), payPeriodStart, "@GLS106049", "@RUP3119");
        dfPayPeriodEnd      = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), payPeriodEnd, "@GLS106050", "@RUP3118");
        dfResponsibleId     = dialog.addFieldValue(extendedTypeStr(RHRMEmplId), responsibleId);

        dfResponsibleId.helpText("@RUP2143");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + date2StrUsr(payPeriodEnd, DateFlags::None) + #Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Page1:
                this.fillPage1();
                break;
            case #Page2:
                this.fillPage2();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill page 1.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPage1()
    {
        CompanyInfo         companyInfo = CompanyInfo::find();
        ReportPeriod_RU     reportPeriod = payPeriodEnd + 1;
        str                 companyName = companyInfo.RFullName;

        companyName += ' ' + "@SYS34952" + companyInfo.Name + "@SYS34953";

        this.insertValueToSection('Year',             year(reportPeriod));
        this.insertValueToSection('MonthName',        RNumDateInWordConverter::construct().date2strMonth(reportPeriod));
        this.insertValueToSection('CompanyName',      companyName);
        this.insertValueToSection('CompanyAddress',   companyInfo.postalAddress().Address);
        this.insertValueToSection('CodeOKPO',         CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill page 2.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPage2()
    {
        RHRMEmplTable   emplTable  = RHRMEmplTable::find(responsibleId);
        date            reportDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        this.insertValueToSection('Line01', overdueAmountTotal01);
        this.insertValueToSection('Line02', lastMonthAmount02);
        this.insertValueToSection('Line07', this.wageFundAmount());
        this.insertValueToSection('Line08', emplCount.elements());
        this.insertValueToSection('Line09', overdueAmountPrev9);
        this.insertValueToSection('Line10', overdueAmountPrev10);
        this.insertValueToSection('Line11', firedDebtAmount11);

        this.insertValueToSection('DirectorTitle', OfficialsTable_RU::findDirector().Title);
        this.insertValueToSection('DirectorName',  OfficialsTable_RU::findDirector().Name);

        this.insertValueToSection('RespTitle', emplTable.titleId());
        this.insertValueToSection('RespName',  emplTable.name());
        this.insertValueToSection('RespPhone', emplTable.personTable().hcmWorker().phone());

        this.insertValueToSection('DayNum',    dayofmth(reportDate));
        this.insertValueToSection('DocMonth',  RNumDateInWordConverter::construct(infolog.language()).date2strMonth(reportDate));
        this.insertValueToSection('DocYr',     substr(int2str(year(reportDate)), 3, 2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            payPeriodStart  = endmth(dfPayPeriodStart.value());
            payPeriodEnd    = endmth(dfPayPeriodEnd.value());
            responsibleId   = dfResponsibleId.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report.
    /// </summary>
    /// <returns>
    /// True if initialization passed without errors.
    /// </returns>
    public boolean init()
    {
        RPaySheetTable  sheetTable;
        RPayTrans       payTrans;

        super();

        this.checkAndPrepareParameters();
        overduePeriodEnd        = this.overduePeriod();
        overduePeriodVacation   = endmth(payPeriodEnd);

        while select payTrans
            group by payPeriod
            where payTrans.PayPeriod <= overduePeriodEnd
            notexists join sheetTable
                where sheetTable.PayPeriod    == payTrans.PayPeriod     &&
                      sheetTable.PaySheetType == RPaySheetType::Payment
        {
            Warning(strfmt("@RUP3122", RPaySheetType::Payment, payTrans.PayPeriod));
        }

        this.calcOverdueDebtAmount();

        if (overdueAmountTotal01 == 0.0)
        {
            return checkFailed("@RUP3117");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Page1);
        this.addSection(#Page2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();
        emplCount = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>otherDeductions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the deduction amount from payroll line (deduction other).
    /// </summary>
    /// <param name="_sheetTable">
    /// The pay-sheet table record.
    /// </param>
    /// <returns>
    /// The deduction amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Amount otherDeductions(RPaySheetTable _sheetTable)
    {
        RPayTrans       payTrans;
        RPaySheetTrans  sheetTrans;
        RPaySheetTable  paySheetTablePeriod;
        RPayTable       payTable;

        Amount deductionAmount;

        select sum(amount) from payTrans
                    where payTrans.PayPeriod == _sheetTable.PayPeriod
                    join payTable
                        where payTable.PayCtype         == payTrans.PayCtype                    &&
                              payTable.PayChargeType    == RPayChargeType::Deduction;

        deductionAmount = -1 * payTrans.Amount;

        //calc interim
        select sum(amount) from payTrans
            where payTrans.PayPeriod == _sheetTable.PayPeriod
            join payTable
                where payTable.PayCtype         == payTrans.PayCtype                    &&
                      payTable.PayCtype         == RPayParameters::find().PayCostMrv    &&
                      payTable.PayChargeType    == RPayChargeType::Deduction;

        deductionAmount += payTrans.Amount;

        //calc taxes
        select sum(taxAmount) from sheetTrans
            join paySheetTablePeriod
                where paySheetTablePeriod.RecId         == sheetTrans.sheetTableRecId   &&
                      paySheetTablePeriod.PayPeriod     == _sheetTable.PayPeriod         &&
                      paySheetTablePeriod.PaySheetSost  != RPaySheetSost::NoPaid;

        deductionAmount -= sheetTrans.TaxAmount;

        //calc empl debt
        select sum(amount) from payTrans
            where payTrans.PayPeriod == _sheetTable.PayPeriod
            join RecId from payTable
                where payTable.PayCtype         == payTrans.PayCtype                         &&
                      payTable.PayCtype         == RPayParameters::find().PayCostEmplDebt    &&
                      payTable.PayChargeType    == RPayChargeType::Deduction;

        deductionAmount -= payTrans.Amount;

        //calc advances
        select sum(amount), sum(taxAmount) from sheetTrans
            join RecId from paySheetTablePeriod
                where paySheetTablePeriod.RecId         == sheetTrans.sheetTableRecId &&
                      paySheetTablePeriod.PayPeriod     == _sheetTable.PayPeriod       &&
                      paySheetTablePeriod.PaySheetType  == RPaySheetType::Prepayment;

        deductionAmount -= sheetTrans.Amount + sheetTrans.TaxAmount;

        return deductionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overduePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the overdue period.
    /// </summary>
    /// <returns>
    /// The period.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ReportPeriod_RU overduePeriod()
    {
        return endmth(prevmth(prevmth(payPeriodEnd)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayReport3F_2013);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        #define.page1Cells(15)
        #define.page2Cells(15)

        return #page1Cells + #page2Cells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates parameters of the report
    /// </summary>
    /// <param name="calledFrom">
    /// The called from object.
    /// </param>
    /// <returns>
    /// True if validation passed without errors.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (payPeriodEnd == endmth(datenull()))
            ret = checkFailed("@GLS110794");

        if (payPeriodEnd < payPeriodStart)
            ret = checkFailed(strfmt("@RUP3116", "@GLS106050", "@GLS106049"));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wageFundAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets wage fund amount.
    /// </summary>
    /// <returns>
    /// The wage fund amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Amount wageFundAmount()
    {
        RPayTrans                       payTrans;
        RPayFundMember                  rPayFundMember;
        RpayAverageEarnEmplPeriodTable  vacationTable;
        RPayAverageEarnValue            avgEarnValue;

        Amount          fundAmount;

        select sum(Amount) from payTrans
            where payTrans.SourceDate == overduePeriodEnd
        exists join rPayFundMember
            where rPayFundMember.PayCostType == payTrans.PayCtype &&
                  rPayFundMember.CounterUnit == fundSalary;

        fundAmount = payTrans.Amount;

        select sum(amount) from payTrans
            where payTrans.SourceDate == overduePeriodVacation
            join RecId from avgEarnValue
            where avgEarnValue.RecId == payTrans.SourceRecId
                join vacationTable
                where vacationTable.RecId               == avgEarnValue.AverageEarnEmplPeriodRecid  &&
                      vacationTable.averageEarnCodeType == RPayAverageEarnCodeType::Vacation        &&
                      vacationTable.StartDate           <= payPeriodEnd                             &&
                      vacationTable.EndDate             >= payPeriodStart                           &&
                      vacationTable.SheetTableRecid     != 0                                        &&
                      vacationTable.Included;

        fundAmount += payTrans.Amount;

        select sum(amount) from payTrans
            where payTrans.SourceDate == overduePeriodVacation
                join RecId from vacationTable
                where vacationTable.RecId               ==  payTrans.SourceRecId                    &&
                      vacationTable.averageEarnCodeType == RPayAverageEarnCodeType::Vacation        &&
                      vacationTable.StartDate           <= payPeriodEnd                             &&
                      vacationTable.EndDate             >= payPeriodStart                           &&
                      vacationTable.SheetTableRecid     != 0                                        &&
                      vacationTable.Included;

        fundAmount += payTrans.Amount;

        return round(fundAmount / #div1000, 0.1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP3120";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayReport3F_2013 rPayReport = new RPayReport3F_2013();

        if (rPayReport.prompt() && rPayReport.init())
        {
            rPayReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>