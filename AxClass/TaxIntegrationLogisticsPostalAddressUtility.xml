<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationLogisticsPostalAddressUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationLogisticsPostalAddressUtility</c> is a static utility class for <c>LogisticsPostalAddress</c>.
/// </summary>
public static class TaxIntegrationLogisticsPostalAddressUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>retrieveAddressFromInventoryDimensionOrCompanyInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the address according to the inventory dimension,
    /// or according to the company information.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimension.</param>
    /// <param name = "_companyInfo">The company information.</param>
    /// <param name = "_logisticsLocationRoleType">The preferred location role.</param>
    /// <returns>The address.</returns>
    public static LogisticsPostalAddress retrieveAddressFromInventoryDimensionOrCompanyInformation(
        InventDim _inventDim,
        CompanyInfo _companyInfo,
        LogisticsLocationRoleType _logisticsLocationRoleType)
    {
        return TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromInventoryLocationOrSiteOrCompanyInformation(
            _inventDim.InventLocationId,
            _inventDim.InventSiteId,
            _companyInfo,
            _logisticsLocationRoleType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveAddressFromInventoryLocationOrSiteOrCompanyInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the address according to the inventory location or site,
    /// or according to the company information.
    /// </summary>
    /// <param name = "_inventLocationId">The inventory location id.</param>
    /// <param name = "_inventSiteId">The inventory site id.</param>
    /// <param name = "_companyInfo">The company information.</param>
    /// <param name = "_logisticsLocationRoleType">The preferred location role.</param>
    /// <returns>The address.</returns>
    public static LogisticsPostalAddress retrieveAddressFromInventoryLocationOrSiteOrCompanyInformation(
        InventLocationId _inventLocationId,
        InventSiteId _inventSiteId,
        CompanyInfo _companyInfo,
        LogisticsLocationRoleType _logisticsLocationRoleType)
    {
        LogisticsPostalAddress logisticsPostalAddress;
        TaxIntegrationDataRetrievalEntityId entityId;
        TaxIntegrationDataRetrievalLogisticsEntityType logisticsEntityType;

        //Get the location address first. get location address from cache if the cache isn't null, or get from database.
        if (_inventLocationId)
        {
            logisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::findLogisticsPostalAddress(
                _logisticsLocationRoleType,
                _inventLocationId,
                _companyInfo,
                TaxIntegrationDataRetrievalLogisticsEntityType::Warehouse);
        }

        // Get the site address if the location address is null. get site address from cache if the cache isn't null, or get from database.
        if (!logisticsPostalAddress && _inventSiteId)
        {
            logisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::findLogisticsPostalAddress(
                _logisticsLocationRoleType,
                _inventSiteId,
                _companyInfo,
                TaxIntegrationDataRetrievalLogisticsEntityType::Site);

        }
        // Get the company address if the location and site address is null. get company address from cache if the cache isn't null, or get from database.
        if (!logisticsPostalAddress)
        {
            logisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
                _companyInfo,
                _logisticsLocationRoleType);
        }

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveAddressFromCompanyInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the address according to the inventory location or site,
    /// or according to the company information.
    /// </summary>
    /// <param name = "_companyInfo">The company information.</param>
    /// <param name = "_logisticsLocationRoleType">The preferred location role.</param>
    /// <returns>The address.</returns>
    public static LogisticsPostalAddress retrieveAddressFromCompanyInformation(
        CompanyInfo _companyInfo,
        LogisticsLocationRoleType _logisticsLocationRoleType)
    {
        return TaxIntegrationLogisticsPostalAddressUtility::findLogisticsPostalAddress(
                _logisticsLocationRoleType,
                _companyInfo.DataArea,
                _companyInfo,
                TaxIntegrationDataRetrievalLogisticsEntityType::Company);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveAddressFromLadingAddressOrCompanyInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the address according to the lading address or company information.
    /// </summary>
    /// <param name = "_transportationDocument">The record of <c>TransportationDocument</c>.</param>
    /// <param name = "_companyInfo">The record of <c>CompanyInfo</c>.</param>
    /// <param name = "_logisticsLocationRoleType">The preferred location role.</param>
    /// <returns>The address.</returns>
    public static LogisticsPostalAddress retrieveAddressFromLadingAddressOrCompanyInformation(
        TransportationDocument _transportationDocument,
        CompanyInfo _companyInfo,
        LogisticsLocationRoleType _logisticsLocationRoleType)
    {
        LogisticsPostalAddress logisticsPostalAddress;
        logisticsPostalAddress = LogisticsPostalAddress::findRecId(_transportationDocument.LoadedPostalAddress);
        if (!logisticsPostalAddress)
        {
            logisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(_companyInfo, _logisticsLocationRoleType);
        }

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLogisticsPostalAddress</Name>
				<Source><![CDATA[
    private static LogisticsPostalAddress findLogisticsPostalAddress(
        LogisticsLocationRoleType _logisticsLocationRoleType,
        TaxIntegrationDataRetrievalEntityId _entityId,
        CompanyInfo _companyInfo,
        TaxIntegrationDataRetrievalLogisticsEntityType _logisticsEntityType)
    {
        TaxIntegrationDataRetrievalAddressCacheTable logisticsPostalAddressCache = TaxIntegrationDataRetrievalAddressCache::findCache([_logisticsEntityType, _entityId, _logisticsLocationRoleType]);
        LogisticsLocation logisticsLocation;
        LogisticsPostalAddress logisticsPostalAddress;
        Common entity;

        if (!logisticsPostalAddressCache)
        {
            entity = TaxIntegrationLogisticsPostalAddressUtility::determineLogisticsEntityByType(
                _entityId,
                _companyInfo,
                _logisticsEntityType);

            logisticsLocation = LogisticsLocationDefault::findSimpleDefaultByRoleType(
                entity,
                _logisticsLocationRoleType);

            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
            if (logisticsPostalAddress)
            {
                TaxIntegrationDataRetrievalAddressCache::insertCache([_logisticsEntityType, _entityId, _logisticsLocationRoleType], logisticsPostalAddress.RecId, logisticsPostalAddress.ValidFrom, logisticsPostalAddress.ValidTo);
            }
        }
        else
        {
            logisticsPostalAddress = LogisticsPostalAddress::findRecId(logisticsPostalAddressCache.LogisticsPostalAddress);
        }

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineLogisticsEntityByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the logistics entity according to logistics entity type.
    /// </summary>
    /// <param name = "_entityId">The logistics entity id.</param>
    /// <param name = "_companyInfo">The company information.</param>
    /// <param name = "_logisticsEntityType">The logistics entity type.</param>
    /// <returns>The logistics entity.</returns>
    protected static Common determineLogisticsEntityByType(
        TaxIntegrationDataRetrievalEntityId _entityId,
        CompanyInfo _companyInfo,
        TaxIntegrationDataRetrievalLogisticsEntityType _logisticsEntityType)
    {
        Common entity;
        switch(_logisticsEntityType)
        {
            case TaxIntegrationDataRetrievalLogisticsEntityType::Warehouse:
                entity = InventLocation::find(_entityId);
                break;
            case TaxIntegrationDataRetrievalLogisticsEntityType::Site:
                entity = InventSite::find(_entityId);
                break;
            case TaxIntegrationDataRetrievalLogisticsEntityType::Company:
                entity = _companyInfo;
                break;
        }
        return entity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveAddressFromLadingAddressOrVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the address according to the lading address or vendor.
    /// </summary>
    /// <param name = "_transportationDocument">The recor of <c>TransportationDocument</c>.</param>
    /// <param name = "_vendTable">The record of <c>VendTable</c>.</param>
    /// <param name = "_logisticsLocationRoleType">The preferred location role.</param>
    /// <returns>The address.</returns>
    public static LogisticsPostalAddress retrieveAddressFromLadingAddressOrVendor(
        TransportationDocument _transportationDocument,
        VendTable _vendTable,
        LogisticsLocationRoleType _logisticsLocationRoleType)
    {
        LogisticsPostalAddress logisticsPostalAddress;
        logisticsPostalAddress = LogisticsPostalAddress::findRecId(_transportationDocument.LoadedPostalAddress);
        if (!logisticsPostalAddress)
        {
            logisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(_vendTable, _logisticsLocationRoleType);
        }

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveAddressFromVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the address according to the vendor.
    /// </summary>
    /// <param name = "_vendTable">The record of <c>VendTable</c>.</param>
    /// <param name = "_logisticsLocationRoleType">The preferred location role.</param>
    /// <returns>The address.</returns>
    public static LogisticsPostalAddress retrieveAddressFromVendor(
        VendTable _vendTable,
        LogisticsLocationRoleType _logisticsLocationRoleType)
    {
        return TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustVendTable(
            TaxIntegrationDataRetrievalLogisticsEntityType::Vendor,
            _vendTable,
            _logisticsLocationRoleType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveAddressFromCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the address according to the customer.
    /// </summary>
    /// <param name = "_custTable">The record of <c>CustTable</c>.</param>
    /// <param name = "_logisticsLocationRoleType">The preferred location role.</param>
    /// <returns>The address.</returns>
    public static LogisticsPostalAddress retrieveAddressFromCustomer(
        CustTable _custTable,
        LogisticsLocationRoleType _logisticsLocationRoleType)
    {
        return TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustVendTable(
            TaxIntegrationDataRetrievalLogisticsEntityType::Customer,
            _custTable,
            _logisticsLocationRoleType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveAddressFromCustVendTable</Name>
				<Source><![CDATA[
    private static LogisticsPostalAddress retrieveAddressFromCustVendTable(
        TaxIntegrationDataRetrievalLogisticsEntityType _logisticsEntityType,
        CustVendTable _custVendTable,
        LogisticsLocationRoleType _logisticsLocationRoleType)
    {
        LogisticsPostalAddress logisticsPostalAddress;
        if (_custVendTable)
        {
            TaxIntegrationDataRetrievalAddressCacheTable logisticsPostalAddressCache = TaxIntegrationDataRetrievalAddressCache::findCache(
                [_logisticsEntityType, _custVendTable.AccountNum, _logisticsLocationRoleType]);
            if (!logisticsPostalAddressCache)
            {
                LogisticsLocation logisticsLocation = LogisticsLocationDefault::findSimpleDefaultByRoleType(
                    _custVendTable,
                    _logisticsLocationRoleType);
                logisticsPostalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
                if (logisticsPostalAddress)
                {
                    TaxIntegrationDataRetrievalAddressCache::insertCache(
                        [_logisticsEntityType, _custVendTable.AccountNum, _logisticsLocationRoleType],
                        logisticsPostalAddress.RecId,
                        logisticsPostalAddress.ValidFrom,
                        logisticsPostalAddress.ValidTo);
                }
            }
            else
            {
                logisticsPostalAddress = LogisticsPostalAddress::findRecId(logisticsPostalAddressCache.LogisticsPostalAddress);
            }
        }
        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCacheWhenDefaultAddressChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the tax integration address cache if default address is changed.
    /// </summary>
    /// <param name = "_entity">The common talbe.</param>
    /// <param name = "_entityLocationRole">The RecId of table entry DirPartyLocationRole.</param>
    /// <remarks>
    /// The address cache would be deleted for delivery and invoice purpose default location addresses change,
    /// as they are used in tax integration.
    /// </remarks>
    public static void deleteCacheWhenDefaultAddressChanged(Common _entity, RecId _entityLocationRole)
    {
        if (Tax::isTaxIntegrationEnabledForTaxService())
        {
            LogisticsLocationRole locationRole;
            if (_entity.TableId == tableNum(CompanyInfo)
                || _entity.TableId == tableNum(CustTable)
                || _entity.TableId == tableNum(VendTable))
            {
                DirPartyLocationRole dirPartyLocationRole;
                select firstonly dirPartyLocationRole
                    where dirPartyLocationRole.RecId == _entityLocationRole
                        join Type from locationRole
                            where locationRole.RecId == dirPartyLocationRole.LocationRole
                                && (locationRole.Type == LogisticsLocationRoleType::Delivery
                                    || locationRole.Type == LogisticsLocationRoleType::Invoice);
            }
            else if (_entity.TableId == tableNum(InventLocation))
            {
                InventLocationLogisticsLocationRole inventLocationLogisticsLocationRole;
                select firstonly inventLocationLogisticsLocationRole
                    where inventLocationLogisticsLocationRole.RecId == _entityLocationRole
                        join Type from locationRole
                            where locationRole.RecId == inventLocationLogisticsLocationRole.LocationRole
                                && (locationRole.Type == LogisticsLocationRoleType::Delivery
                                    || locationRole.Type == LogisticsLocationRoleType::Invoice);
            }
            else if (_entity.TableId == tableNum(InventSite))
            {
                InventSiteLogisticslocationRole inventSiteLogisticslocationRole;
                select firstonly inventSiteLogisticslocationRole
                    where inventSiteLogisticslocationRole.RecId == _entityLocationRole
                        join Type from locationRole
                            where locationRole.RecId == inventSiteLogisticslocationRole.LocationRole
                                && (locationRole.Type == LogisticsLocationRoleType::Delivery
                                    || locationRole.Type == LogisticsLocationRoleType::Invoice);
            }

            if (locationRole.Type)
            {
                TaxIntegrationDataRetrievalLogisticsEntityType entityType;
                TaxIntegrationDataRetrievalEntityId entityId;
                LogisticsLocationRoleType roleType = locationRole.Type;

                switch (_entity.TableId)
                {
                    case tableNum(CompanyInfo) :
                        CompanyInfo companyInfo = _entity;
                        entityType = TaxIntegrationDataRetrievalLogisticsEntityType::Company;
                        entityId = companyInfo.DataArea;
                        break;

                    case tableNum(CustTable) :
                        CustTable custTable = _entity;
                        entityType = TaxIntegrationDataRetrievalLogisticsEntityType::Customer;
                        entityId = custTable.AccountNum;
                        break;

                    case tableNum(InventLocation) :
                        InventLocation inventLocation = _entity;
                        entityType = TaxIntegrationDataRetrievalLogisticsEntityType::Warehouse;
                        entityId = inventLocation.InventLocationId;
                        break;

                    case tableNum(InventSite) :
                        InventSite inventSite = _entity;
                        entityType = TaxIntegrationDataRetrievalLogisticsEntityType::Site;
                        entityId = inventSite.SiteId;
                        break;

                    case tableNum(VendTable) :
                        VendTable vendTable = _entity;
                        entityType = TaxIntegrationDataRetrievalLogisticsEntityType::Vendor;
                        entityId = vendTable.AccountNum;
                        break;
                }

                TaxIntegrationDataRetrievalAddressCacheTable taxIntegrationDataRetrievalAddressCacheTable;
                delete_from taxIntegrationDataRetrievalAddressCacheTable
                    where taxIntegrationDataRetrievalAddressCacheTable.EntityType == entityType
                        && taxIntegrationDataRetrievalAddressCacheTable.EntityId == entityId
                        && taxIntegrationDataRetrievalAddressCacheTable.RoleType == roleType;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>