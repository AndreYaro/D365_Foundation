<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteApprove</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RouteApprove extends BOMRouteApprove
{
    RouteId     routeId;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        routeId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blockRemoveOfApproval</Name>
				<Source><![CDATA[
    public NoYes blockRemoveOfApproval()
    {
        return blockRemoveOfApproval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret = super();

        isAlreadyApproved = RouteTable::find(this.parmRouteId()).Approved;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyApproved</Name>
				<Source><![CDATA[
    boolean isAlreadyApproved()
    {
        return isAlreadyApproved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteId</Name>
				<Source><![CDATA[
    RouteId parmRouteId(RouteId _routeId = routeId)
    {
        routeId = _routeId;

        return routeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRouteVersionApproval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the approval of all already approved route versions of the given route ID.
    /// </summary>
    /// <param name="_routeId">
    ///    A route ID.
    /// </param>
    protected void removeRouteVersionApproval(RouteId _routeId)
    {
        RouteVersion            routeVersion;
        BOMRouteVersionApprove  bomRouteVersionApprove;

        while select routeVersion
            where routeVersion.RouteId  == _routeId
               && routeVersion.Approved == NoYes::Yes
        {
            bomRouteVersionApprove = BOMRouteVersionApprove::newRouteVersion(routeVersion);
            bomRouteVersionApprove.parmRemove(NoYes::Yes);
            bomRouteVersionApprove.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        RouteTable  table;

        if (! this.validate())
            throw error("@SYS27040");

        try
        {
            ttsbegin;

            table             = RouteTable::find(routeId,true);
            if (remove)
            {
                this.removeRouteVersionApproval(routeId);
                table.Approved    = false;
                table.Approver    = 0;
            }
            else
            {
                table.updateRoute();
                table.reread();
                table.Approved    = true;
                table.Approver    = approver;
            }
            if (    remove
                &&  this.isAlreadyApproved()
                &&  !this.blockRemoveOfApproval()
                &&  RouteParameters::find().BlockEditing)
            //
            // this is a special case, we are removing the approval
            // so we need to bypass table validation
            //
            {
                table.doUpdate();
            }
            else
            {
                table.update();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super() && RouteTable::checkExist(routeId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BOMRouteApprove construct(Args args)
    {
        switch (args.dataset())
        {
            case tableNum(RouteTable):
                return RouteApprove::newRouteTable(args.record());
            default:
                throw error(strFmt("@SYS29104", classStr(BOMRouteApprove)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS29118";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RouteApprove                    approve;
        FormDataSource                  datasource;
        SIGRouteTableApproveProcedure   procedure; //SIG
        Common                          argsRecord = _args.record();

        //SIG - start
        if (isConfigurationkeyEnabled(configurationKeyNum(SIG)) && argsRecord)
        {
            procedure = SIGRouteTableApproveProcedure::newRouteTable(argsRecord);
            if (procedure.signatureRequired())
            {
                procedure.sign();

                // Needed here because RouteTableListPage doesn't refresh properly.
                datasource = FormDataUtil::getFormDataSource(argsRecord);
                datasource.reread();
                datasource.refresh();

                return;
            }
        }
        //SIG - end
        approve = RouteApprove::construct(_args);

        if (approve.prompt())
        {
            approve.runOperation();

            // Needed here because RouteTableListPage doesn't refresh properly.
            if (argsRecord)
            {
                datasource = FormDataUtil::getFormDataSource(argsRecord);
                datasource.reread();
                datasource.rereadReferenceDataSources();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRouteTable</Name>
				<Source><![CDATA[
    static RouteApprove newRouteTable(RouteTable table)
    {
        RouteApprove approve = new RouteApprove();

        approve.getLast();
        approve.parmRouteId(table.RouteId);
        approve.parmApprover(HcmWorker::userId2Worker(curuserid()));
        approve.init();

        return approve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>