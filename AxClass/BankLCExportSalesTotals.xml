<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCExportSalesTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is used to caculate total amount of Sales order.
/// The class could calculate the amount for partial order lines
/// based on a given delivery date of the order line.
/// </summary>
class BankLCExportSalesTotals extends SalesTotals_Trans
{
    BankLCSalesPurchQtyCategoryType salesPurchQtyCategory;
    TransDate                       deliveryDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The method constructs an instance of the <c>TradeCalcTax</c> class to be used by this class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>TradeCalcTax</c> class.
    /// </returns>
    protected TradeCalcTax constructCalcTax()
    {
        BankLCExportSalesCalcTax bankLCExportSalesCalcTax;

        bankLCExportSalesCalcTax = new BankLCExportSalesCalcTax(salesTable, specQty);
        bankLCExportSalesCalcTax.parmSalesPurchQtyCategory(salesPurchQtyCategory);
        bankLCExportSalesCalcTax.parmDeliveryDate(deliveryDate);

        return bankLCExportSalesCalcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
        protected TradeTotalsIContract  parmContract()
    {
        return BankLCExportSalesTotalsTransContract::newFromSalesTable(salesTable, deliveryDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryDate</Name>
				<Source><![CDATA[
        public TransDate parmDeliveryDate(
        TransDate _deliveryDate = deliveryDate)
    {
        deliveryDate = _deliveryDate;
        return deliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchQtyCategory</Name>
				<Source><![CDATA[
        public BankLCSalesPurchQtyCategoryType parmSalesPurchQtyCategory(
        BankLCSalesPurchQtyCategoryType _salesPurchQtyCategory = salesPurchQtyCategory)
    {
        salesPurchQtyCategory = _salesPurchQtyCategory;
        return salesPurchQtyCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity by using the <c>BankLCExportSalesQuantity</c> class.
    /// </summary>
    /// <returns>
    ///    The calculated quantity.
    /// </returns>
    protected UnitQty qtyUnit()
    {
        return new BankLCExportSalesQuantity(salesPurchQtyCategory).calcSalesQty(salesLine, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a new <see cref="SalesTotals Class" /> object for calculating totals from an associated
    ///    table record.
    /// </summary>
    /// <param name="_source">
    ///    The source table record.
    /// </param>
    /// <param name="_salesPurchQtyCategory">
    ///    Indicates the quantity will be used.
    /// </param>
    /// <returns>
    ///    A <see cref="SalesTotals Class" /> object.
    /// </returns>
    static public SalesTotals construct(
        SalesTable                      _source,
        BankLCSalesPurchQtyCategoryType _salesPurchQtyCategory)
    {
        BankLCExportSalesTotals ret = new BankLCExportSalesTotals(_source, SalesUpdate::All);
        ret.parmSalesPurchQtyCategory(_salesPurchQtyCategory);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>