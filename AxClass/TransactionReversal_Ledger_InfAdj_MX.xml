<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionReversal_Ledger_InfAdj_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TransactionReversal_Ledger_InfAdj_MX extends TransactionReversal_Ledger
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReference</Name>
				<Source><![CDATA[
    TraceNum getReference(TraceNum  _traceNum)
    {
        if (!reversalVoucher)
            reversalVoucher = NumberSeq::newGetNum(LedgerParameters::numRefReverseInflationVoucher_MX(), false).num();

        if (_traceNum)
        {
            return _traceNum;
        }
        else
        {
            return NumberSeq::newGetNum(LedgerParameters::numRefTraceNum(), false).num();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>LedgerVoucher</c> class when it is implemented in a derived class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>LedgerVoucher</c> class when this method is implemented in a derived class.
    /// </returns>
    /// <remarks>
    /// This method must be implemented by derived classes so that the <c>LedgerVoucher</c> class is
    /// created by using the correct <c>SysModule</c> enumeration value, such as the <c>SysModule::Cust</c>
    /// enumeration value. If this method is called directly from the base class, this method will throw an
    /// error that indicates that it must be implemented by a derived class.
    /// </remarks>
    public LedgerVoucher initLedgerVoucher()
    {
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Ledger, LedgerParameters::numRefReverseInflationVoucher_MX().NumberSequenceTable().NumberSequence);
        ledgerVoucher.parmReversal(true);

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversal</Name>
				<Source><![CDATA[
    void reversal(Args args)
    {
        GeneralJournalEntry                 inputGeneralJournalEntry;
        GeneralJournalEntry                 originalGeneralJournalEntry;
        GeneralJournalEntry                 validGeneralJournalEntry;
        InflationAdjJournal_MX              inflationAdjJournal;
        SubledgerVoucherGeneralJournalEntry validSubledgerVoucherGeneralJournalEntry;

        if (args.dataset() != tableNum(InflationAdjJournal_MX))
        {
            throw error(Error::missingFormActiveBuffer(classStr(TransactionReversal_Ledger_InfAdj_MX)));
        }

        inflationAdjJournal = args.record() as InflationAdjJournal_MX;

        select firstonly * from inputGeneralJournalAccountEntry
            where inputGeneralJournalAccountEntry.GeneralJournalEntry ==  inflationAdjJournal.Voucher;

        [originalGeneralJournalAccountEntry, revoke, reversalTraceNum] =
            TransactionReversalTrans::findGeneralJournalOriginal(inputGeneralJournalAccountEntry);

        if (originalGeneralJournalAccountEntry != null)
        {
            select firstonly * from originalGeneralJournalEntry
                where originalGeneralJournalEntry.RecId == originalGeneralJournalAccountEntry.GeneralJournalEntry;
        }

        if (inputGeneralJournalAccountEntry != null)
        {
            select firstonly * from inputGeneralJournalEntry
                where inputGeneralJournalEntry.RecId == inputGeneralJournalAccountEntry.GeneralJournalEntry;
        }

        if (originalGeneralJournalAccountEntry == null)
        {
            validGeneralJournalEntry = inputGeneralJournalEntry;
        }
        else
        {
            validGeneralJournalEntry = originalGeneralJournalEntry;
        }

        if (originalGeneralJournalEntry == null)
        {
            minimumDate = inputGeneralJournalEntry.AccountingDate;
        }
        else
        {
            minimumDate = revoke ? inputGeneralJournalEntry.AccountingDate : originalGeneralJournalEntry.AccountingDate;
        }

        this.saveLast();

        this.parmReversalDate(minimumDate);
        this.parmReversalTraceNum(reversalTraceNum);

        ttsbegin;

        this.initLedgerVoucher();
        this.parmSysModule(SysModule::Ledger);

        while select Voucher, AccountingDate
            from validSubledgerVoucherGeneralJournalEntry
                where validSubledgerVoucherGeneralJournalEntry.GeneralJournalEntry == validGeneralJournalEntry.RecId
        {
            this.createGeneralJournal(
                            validSubledgerVoucherGeneralJournalEntry.Voucher,
                            validSubledgerVoucherGeneralJournalEntry.AccountingDate,
                            ledgerVoucher);

            this.updateOriginal(validSubledgerVoucherGeneralJournalEntry.AccountingDate, validSubledgerVoucherGeneralJournalEntry.Voucher);
        }

        this.postReversal();
        ledgerVoucher.end();

        this.updateInflationAdjJournal(inflationAdjJournal);

        TransactionLog::create(TransactionLogType::TransactionReversal, "@SYS88953");

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>TransactionTxt</c> object, with the chance of using the specified transaction date
    /// and voucher.
    /// </summary>
    /// <param name="_transDate">
    /// The date to set in the <c>TransactionTxt</c> object.
    /// </param>
    /// <param name="_voucher">
    /// The voucher to set in the <c>TransactionTxt</c> object.
    /// </param>
    /// <param name="_formLetterNum">
    ///    The form letter number to set in the <c>TransactionTxt</c> object; optional.
    /// </param>
    /// <param name = "_key1">The first key; optional.</param>
    /// <param name = "_key2">The second key; optional.</param>
    /// <param name = "_key3">The third key; optional.</param>
    public void setTransactionTxt(
        TransDate _transDate,
        Voucher _voucher,
        str 255 _formLetterNum = '',
        str 20 _key1 = '',
        str 20 _key2 = '',
        str 20 _key3 = '')
    {
        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(LedgerTransTxt::ReverseInfAdj_MX);
        transactionTxt.setDate(_transDate);
        transactionTxt.setVoucher(_voucher);
        transactionTxt.setFormLetter(_formLetterNum);
        transactionTxt.setKey1(_key1);
        transactionTxt.setKey2(_key2);
        transactionTxt.setKey3(_key3);
        transactionTxt.setLanguage(currentUserLanguage());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInflationAdjJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>InflationAdjJournal_MX</c> table with the reversal voucher number to which inflation
    ///    adjustment reversal transactions are posted.
    /// </summary>
    /// <param name="_inflationAdjJournal">
    ///    The <c>InflationAdjJournal_MX</c> table buffer to update the values after the inflation adjustment
    ///    reversal is processed.
    /// </param>
    private void updateInflationAdjJournal(InflationAdjJournal_MX _inflationAdjJournal)
    {
        InflationAdjJournal_MX  inflationAdjustmentJournal;

        inflationAdjustmentJournal = InflationAdjJournal_MX::find(_inflationAdjJournal.RecId, true);

        if (inflationAdjustmentJournal)
        {
            inflationAdjustmentJournal.Status           = InflationAdjJournalStatus_MX::Reversed;
            inflationAdjustmentJournal.ReversedVoucher  = GeneralLedgerExtension::findBySubledgerVoucherAccountingDate(reversalVoucher,_inflationAdjJournal.TransDate).RecId;
            inflationAdjustmentJournal.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS313939";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        TransactionReversal_Ledger_InfAdj_MX   transactionReversal_InfAdj = TransactionReversal_Ledger_InfAdj_MX::construct();

        transactionReversal_InfAdj.reversal(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TransactionReversal_Ledger_InfAdj_MX construct()
    {
        return new TransactionReversal_Ledger_InfAdj_MX();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        taxTransRecIdMap = new Map(Types::Int64, Types::Int64);

        super();

        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoMX, GlobalizationConstants::FeatureReferenceMX00002] ],
            funcName()
        );
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>