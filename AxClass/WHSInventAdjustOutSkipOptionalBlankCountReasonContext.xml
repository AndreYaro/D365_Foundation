<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventAdjustOutSkipOptionalBlankCountReasonContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventAdjustOutSkipOptionalBlankCountReasonContext</c> class is used to determine whether to skip setting the Initiation flag
/// for the counting reason code in the adjust out process guide mobile device flow.
/// </summary>
internal final class WHSInventAdjustOutSkipOptionalBlankCountReasonContext implements System.IDisposable
{
    private static WHSInventAdjustOutSkipOptionalBlankCountReasonContext instance;

    private boolean mustSkipCountingReasonCodeInitiation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        instance = this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameter</Name>
				<Source><![CDATA[
    internal static WHSInventAdjustOutSkipOptionalBlankCountReasonContext newFromParameter(boolean _mustSkipCountingReasonCodeInitiation)
    {
        var context = new WHSInventAdjustOutSkipOptionalBlankCountReasonContext();

        context.mustSkipCountingReasonCodeInitiation = _mustSkipCountingReasonCodeInitiation;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentMustSkipCountingReasonCodeInitiation</Name>
				<Source><![CDATA[
    internal static boolean currentMustSkipCountingReasonCodeInitiation()
    {
        return instance ? instance.mustSkipCountingReasonCodeInitiation : false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>