<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAssortmentsOrgHierarchiesEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class RetailAssortmentsOrgHierarchiesEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>OMHierarchyType_validatingDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>OMHierarchyType</c> record <c>validatingDelete</c> event.
    /// </summary>
    /// <param name="_omHierarchyType">The <c>OMHierarchyType</c> record.</param>
    /// <param name="_result">The <c>EventHandlerResult</c> instance to fill with result of the validation.</param>
    [SubscribesTo(tableStr(OMHierarchyType), delegateStr(OMHierarchyType, validatingDelete))]
    public static void OMHierarchyType_validatingDelete(OMHierarchyType _omHierarchyType, EventHandlerResult _result)
    {
        if (RetailAssortmentsOrgHierarchiesEventHandler::canSkipValidations(_omHierarchyType.RecId))
        {
            return;
        }

        if (RetailAssortmentsOrgHierarchiesEventHandler::isHierarchyTypeInUse(_omHierarchyType.RecId))
        {
            Info::addMessage(Exception::Error, "@Retail:AssortmentOrgHierarchyOnDeleteError");
            _result.result(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyDesigner_Pre_performRemoveNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Action triggered before removing nodes of organization hierarchy in Hierarchy Designer form.
    /// </summary>
    /// <param name="args">Arguments provided by the event publisher.</param>
    [PreHandlerFor(formStr(HierarchyDesigner), formMethodStr(HierarchyDesigner, performRemoveNode))]
    public static void HierarchyDesigner_Pre_performRemoveNode(XppPrePostArgs args)
    {
        FormRun hierarchyDesignerForm = args.getThis();
        OMOrganizationHierarchy omOH = hierarchyDesignerForm.args().parmObject();
        RecId hierarchyTypeId = omOH.parmHierarchyRecID();

        if (RetailAssortmentsOrgHierarchiesEventHandler::canSkipValidations(hierarchyTypeId)
            || !RetailAssortmentsOrgHierarchiesEventHandler::isHierarchyTypeInUse(hierarchyTypeId))
        {
            return;
        }

        RecId selectedNodeId = hierarchyDesignerForm.getSelectedNodeId();
        OMOrganizationNode removingNode = omOH.findNode(selectedNodeId);

        // Checking if any nodes in the removing node are referenced in assortments.
        Set descendantNodeIds = OMOrganizationHierarchy::getDescendantNodeIds(removingNode);
        if (RetailAssortmentsOrgHierarchiesEventHandler::isHierarchyNodesInUse(hierarchyTypeId, descendantNodeIds))
        {
            throw Error("@Retail:AssortmentOrgHierarchyNodeOnDeleteError");
        }

        // Checking if any ancestor nodes of the removing node are referenced in assortments.
        Set ancestorNodeIds = OMOrganizationHierarchy::getAncestorNodeIds(omOH, removingNode.parmId());
        if (RetailAssortmentsOrgHierarchiesEventHandler::isHierarchyNodesInUse(hierarchyTypeId, ancestorNodeIds))
        {
            warning("@Retail:AssortmentOrgHierarchyNodeOnDeleteWarning");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHierarchyTypeInUse</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks whether given hierarchy type is referenced in any published assortments.
    /// </summary>
    /// <param name = "_omHierarchyTypeRecId">The <c>OMHierarchyType</c> RecId</param>
    /// <returns>True if the given hierarchy type is used in published assortments; otherwise false</returns>
    private static boolean isHierarchyTypeInUse(RecId _omHierarchyTypeRecId)
    {
        RetailAssortmentChannelLine assortmentChannelLine;

        select firstonly RecId from assortmentChannelLine
            where assortmentChannelLine.OMHierarchyTypeId == _omHierarchyTypeRecId
                && assortmentChannelLine.Status == RetailAssortmentStatusType::Published;

        return assortmentChannelLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHierarchyNodesInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether given hierarchy node ids are referenced in any published assortments.
    /// </summary>
    /// <param name = "_omHierarchyTypeRecId"></param>
    /// <param name = "_nodeIds">Set of Organization hierarchy node Ids</param>
    /// <returns>True if any node Id in the given set referenced in assortments; otherwise false</returns>
    private static boolean isHierarchyNodesInUse(RecId _omHierarchyTypeRecId, Set _nodeIds)
    {
        RetailAssortmentChannelLine assortmentChannelLine;
        SetEnumerator enumerator = _nodeIds.getEnumerator();

        while (enumerator.moveNext())
        {
            select firstonly RecId from assortmentChannelLine
                where assortmentChannelLine.OMInternalOrganizationId == enumerator.current()
                    && assortmentChannelLine.OMHierarchyTypeId == _omHierarchyTypeRecId
                    && assortmentChannelLine.Status == RetailAssortmentStatusType::Published;

            if (assortmentChannelLine.RecId)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSkipValidations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the validations can be skipped.
    /// </summary>
    /// <param name = "_hierarchyTypeId">The <c>OMHierarchyType</c> RecId</param>
    /// <returns>True if the given hierarchy type is not associated with assortments or validations disabled by flighting; otherwise false.</returns>
    private static boolean canSkipValidations(RecId _omHierarchyTypeRecId)
    {
        return (!RetailAssortmentsOrgHierarchiesRestrictDeletionFlight::instance().isEnabled()
            || !OMMultipleHierarchy::isPurposeAssignedToHierarchy(_omHierarchyTypeRecId, HierarchyPurpose::RetailAssortment));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>