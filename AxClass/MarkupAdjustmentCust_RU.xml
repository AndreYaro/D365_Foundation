<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupAdjustmentCust_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class MarkupAdjustmentCust_RU
{
    Voucher                 invoiceVoucher;

    LedgerVoucher           ledgerVoucher;
    CustInvoiceJour         custInvoiceJour;

    NoYes                   storno;
    DlvDate                 postingDate;

    NoYes                   allocateMarkup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCustInvoiceJour</Name>
				<Source><![CDATA[
    CustInvoiceJour parmCustInvoiceJour(CustInvoiceJour _custInvoiceJour = custInvoiceJour)
    {
        custInvoiceJour = _custInvoiceJour;
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void  run()
    {
        MarkupAllocation        markupAllocation;
        NumberSeq               numberSeq;

        LedgerVoucherObject     ledgerVoucherObject;

        TransactionTxt          transactionTxt;

        markupAllocation = MarkupAllocation::newMarkupAllocation(custInvoiceJour);

        if (! markupAllocation.dialog())
            return;

        postingDate = markupAllocation.postingDate() ? markupAllocation.postingDate() : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        storno      = markupAllocation.storno() ? markupAllocation.storno() : NoYes::No;

        ttsbegin;

        numberSeq           = NumberSeq::newGetVoucher(SalesParameters::numRefSalesMarkupVoucher_RU());

        invoiceVoucher      = numberSeq.voucher();

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType          (custInvoiceJour.InvoiceAmount < 0 ? LedgerTransTxt::SalesCreditNoteLedger : LedgerTransTxt::SalesInvoiceLedger);
        transactionTxt.setVoucher       (invoiceVoucher);
        transactionTxt.setFormLetter    (custInvoiceJour.InvoiceId);
        transactionTxt.setKey1          (custInvoiceJour.SalesId);
        transactionTxt.setKey2          (custInvoiceJour.InvoiceAccount);
        transactionTxt.setKey3          (CustTable::groupId(custInvoiceJour.InvoiceAccount));

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                     SysModule::Sales,
                                                     numberSeq.parmVoucherSequenceCode());

        ledgerVoucher.parmCheckBlockedDimensions(false);
        ledgerVoucher.parmCustomDetailLevel(true);  // records are summed according to ledgerVoucherTransObject.parmRecId

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(invoiceVoucher,
                                                              postingDate,
                                                              SysModule::Sales,
                                                              LedgerTransType::Sales,
                                                              storno);
        ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        markupAllocation.runOperation();

        MarkupAdjustmentCust_RU::adjustInvoice(custInvoiceJour, ledgerVoucher);

        ledgerVoucher.end();

        TransactionLog::create(this.transactionLogType(),this.transactionLogTxt());

        ttscommit;

        numberSeq.used();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    TransTxt transactionLogTxt()
    {
        return "@SYS16103";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    TransactionLogType transactionLogType()
    {
        return TransactionLogType::SalesInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustInvoice</Name>
				<Source><![CDATA[
    public static void adjustInvoice(CustInvoiceJour    _custInvoiceJour,
                                     LedgerVoucher      _ledgerVoucher)
    {
        Markup_AdjustCust_RU        markupAdjust;
        markupAdjust = new Markup_AdjustCust_RU(_custInvoiceJour.CurrencyCode);
        markupAdjust.parmCustInvoiceAccount_RU(_custInvoiceJour.InvoiceAccount);
        markupAdjust.parmInvoicePostingType_RU(_custInvoiceJour.custInvoiceJour_RU().InvoicePostingType_RU);

        markupAdjust.postInvoice(1,
                                 _custInvoiceJour.InvoiceAmount,
                                 _custInvoiceJour,
                                 _ledgerVoucher,
                                 _custInvoiceJour.DefaultDimension,
                                 _custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  args)
    {
        MarkupAdjustmentCust_RU markupAdjustment;

        markupAdjustment = new MarkupAdjustmentCust_RU();

        markupAdjustment.parmCustInvoiceJour(args.record());
        markupAdjustment.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>