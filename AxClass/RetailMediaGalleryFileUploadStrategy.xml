<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMediaGalleryFileUploadStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailMediaGalleryFileUploadStrategy</c> class used to upload a Retail media file from the Media Gallery Form to in the Azure Shared Unit Storage.
/// </summary>
class RetailMediaGalleryFileUploadStrategy extends FileUploadStrategyBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowedFileTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the filetypes accepted.
    /// </summary>
    /// <returns>A list of valid file types and extensions.</returns>
    /// <remarks>
    /// The list of the types and extensions should consist of a set of comma-separated tokens, each of which must be an ASCII case-insensitive match for one of the followining.
    /// </remarks>
    public str allowedFileTypes()
    {
        return RetailMediaHelper::SupportedImageFileTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultClassName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class name of the upload result class used in this strategy.
    /// </summary>
    /// <returns>The <c>RetailMediaGalleryFileUploadStrategy</c> class name.</returns>
    public str getResultClassName()
    {
        return classstr(RetailFileUploadMediaStorageResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uploads the file to the blob and returns the <c>RetailMediaGalleryFileUploadStrategy</c>.
    /// </summary>
    /// <param name = "_stream">The stream of the file.</param>
    /// <param name = "_fileName">The name of the file., e.g., "test.txt".</param>
    /// <param name = "_contenType">The MIME type of the file, e.g., "image/jpeg".</param>
    /// <param name = "_fileExtension">The extension of the file, e.g., ".txt".</param>
    /// <param name = "_metaData">Additional information associated with the file.</param>
    /// <returns>The <c>FileUploadResultBase</c> class.</returns>
    public FileUploadResultBase uploadFile(System.IO.Stream _stream, str _fileName, str _contentType = null, str _fileExtension = null, str _metaData = null)
    {
        RetailFileUploadMediaStorageResult result;

        //The below codebase commented as this feature was developed however we will hide it for now and we will uncomment as part of the Deliverable/Task #3687509.

        //Microsoft.WindowsAzure.Storage.StorageException storageException;
        //str imageUrl = "";
        //str thumbnailImageUrl = "";
        //str customImageUrl = "";
        //str thumbnailImageFileName = "";
        //str customImageFileName = "";
        //str errorMessage = "";
        //int imageHeight;
        //int imageWidth;
        //int imageSize;
        //boolean isUploadSuccess = false;
        //guid fileGuid = newGuid();
        //guid customImageGuid = newGuid();
        //guid thumbnailImageGuid = newGuid();
        //System.IO.MemoryStream thumbnailImageInStream = null;
        //System.IO.MemoryStream customImageInStream = null;
        //str fileId = guid2str(fileGuid);
        //RetailFileUploadMediaStorageResult result;
        //str containerName = RetailMediaHelper::AzureStorageCategory;
        //NoYes isSecured;
        //boolean isSecuredImages = false;

        //if(_metaData)
        //{
        //    isSecured = str2Enum(isSecured, _metaData);
        //    if (isSecured == NoYes::Yes)
        //    {
        //        containerName = RetailMediaHelper::AzureStorageSecuredImagesCategory;
        //        isSecuredImages = true;
        //    }
        //}

        //try
        //{
        //    if (_fileName != "")
        //    {
        //        imageUrl = RetailMediaHelper::uploadFileToMediaStore(_stream, _fileName, fileGuid, containerName, isSecuredImages);

        //        //Create Thumbnail image
        //        thumbnailImageInStream = RetailMediaHelper::getResizedImage(_stream, RetailMediaHelper::ThumbnailImageSize);
        //        thumbnailImageFileName = RetailMediaHelper::ThumbnailImageNamePrefix + _fileName;
        //        thumbnailImageUrl = RetailMediaHelper::uploadFileToMediaStore(thumbnailImageInStream, thumbnailImageFileName, thumbnailImageGuid, containerName, isSecuredImages);

        //        //Create Custom image
        //        customImageInStream = RetailMediaHelper::getResizedImage(_stream, RetailMediaHelper::CustomImageSize);
        //        customImageFileName = RetailMediaHelper::CustomImageNamePrefix + _fileName;
        //        customImageUrl = RetailMediaHelper::uploadFileToMediaStore(customImageInStream, customImageFileName, customImageGuid, containerName, isSecuredImages);

        //        if (imageUrl != "" && thumbnailImageUrl != "" && customImageUrl != "")
        //        {
        //            //Now update DB
        //            System.Drawing.Bitmap img = new System.Drawing.Bitmap(_stream);
        //            imageSize = int642int(_stream.Length);
        //            imageHeight = img.Height;
        //            imageWidth = img.Width;
        //            isUploadSuccess = true;
        //        }

        //        result = new RetailFileUploadMediaStorageResult(_fileName, _contentType, isUploadSuccess, errorMessage, imageUrl, fileId);
        //        result.thumbnailUrl(thumbnailImageUrl);
        //        result.customUrl(customImageUrl);
        //        result.imageHeight(imageHeight);
        //        result.imageWidth(imageWidth);
        //        result.imageSize(imageSize);
        //        result.thumbnailFileId(guid2Str(thumbnailImageGuid));
        //        result.customFileId(guid2Str(customImageGuid));
        //        result.fileName(_fileName);
        //    }
        //    else
        //    {
        //        errorMessage = "@ApplicationPlatform:EmptyFileName";
        //        error(errorMessage);
        //    }
        //}
        //catch(storageException)
        //{
        //    errorMessage = "@ApplicationPlatform:FileUploadFailedInStrategy";
        //    error(errorMessage);
        //}
        //catch (Exception::Error)
        //{
        //    errorMessage = "@ApplicationPlatform:FileUploadFailedInStrategy";
        //    error(errorMessage);
        //}
        //finally
        //{
        //    if (thumbnailImageInStream != null )
        //        thumbnailImageInStream.Dispose();

        //    if ( customImageInStream != null)
        //        customImageInStream.Dispose();
        //}

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>