<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostControlPostingItemProduction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostControlPostingItemProduction extends CostControlPostingItem
{
    ProdTable   prodTable;
    InventMov_Virtuel   movementVirtuel;
    InventMov_Virtuel   movementVirtuel_Orig;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costPricePcs</Name>
				<Source><![CDATA[
    public PriceCur costPricePcs()
    {
        PriceCur        retPrice;
        ProdCalcTrans   prodCalcTrans;

        select prodCalcTrans
            where prodCalcTrans.IdRefTableId    == prodTable.TableId
            &&    prodCalcTrans.IdRefRecId      == prodTable.RecId
            &&    prodCalcTrans.CollectRefLevel == 0;

        if (prodCalcTrans)
        {
            retPrice = prodCalcTrans.costPricePcs();
        }

        if (!retPrice)
        {
            retPrice = prodTable.ProjCostPrice;
        }

        return retPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCommittedCost</Name>
				<Source><![CDATA[
    public boolean createCommittedCost(InventQty _qty = this.openInTotal(prodTable), TransDate _transDate=DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (!super(_qty))
            return false;

        if (_qty==0)
            return true;

        CostControlTransCommittedCost costControlTransCommittedCost = this.initializeCostControlTransCommittedCost(_qty, _transDate);
        this.insertCostControlTransCommittedCost(costControlTransCommittedCost);

        if ( ProjTable::find(prodTable.ProjId).UseBudgeting)
        {
            ProjBudgetTransactionLine projBudgetTransactionLine = ProjBudgetTransactionLine::construct(prodTable);
            projBudgetTransactionLine.parmQty(_qty);
            projBudgetTransactionLine.parmCostAmount(costControlTransCommittedCost.AmountMst);

            if (this.mustUpdateBudget(projBudgetTransactionLine.costAmount(),projBudgetTransactionLine.salesAmount()))
            {
                ProjBudgetTransaction projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                this.budgetUpdate(costControlTransCommittedCost.ProjId, projBudgetTransaction, ProjBudgetAdjustmentType::Decrement);
            }
        }
        else
        {
            if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
                this.forecastUpdate(costControlTransCommittedCost, costControlTransCommittedCost.Qty, costControlTransCommittedCost.Amount);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCostControlTransCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CostControlTransCommittedCost</c> record.
    /// </summary>
    /// <param name = "_qty">The quantity to be set on the <c>CostControlTransCommittedCost</c> record.</param>
    /// <param name = "_transDate">The committed date to be set on <c>CostControlTransCommittedCost</c> record.</param>
    /// <returns>A <c>CostControlTransCommittedCost</c> record.</returns>
    protected CostControlTransCommittedCost initializeCostControlTransCommittedCost(InventQty _qty, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CostControlTransCommittedCost costControlTransCommittedCost = super(_qty, _transDate);

        costControlTransCommittedCost.initFromProdTable(prodTable);
        AmountCur amountCur = CurrencyExchangeHelper::amount(costControlTransCommittedCost.Qty * this.costPricePcs());
        costControlTransCommittedCost.Amount = amountCur;
        costControlTransCommittedCost.AmountMst = CurrencyExchangeHelper::mstAmount(amountCur, CompanyInfoHelper::standardCurrency(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        
        return costControlTransCommittedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionType</Name>
				<Source><![CDATA[
    public ProjCommittedCostUpdateAction getActionType()
    {
        ProjCommittedCostUpdateAction   retActionType;
        ProdTable                       prodTable_Orig;
        // No original means create a brand new production order
        if (! movementVirtuel_Orig)
            retActionType = ProjCommittedCostUpdateAction::Create;

        else
        {
            if (movementVirtuel_Orig.parmInventMovReference()
            && movementVirtuel_Orig.parmInventMovReference().transType()==InventTransType::Production
            && movementVirtuel_Orig.parmInventMovReference().buffer().TableId==tablenum(ProdTable))
                prodTable_Orig=movementVirtuel_Orig.parmInventMovReference().buffer();
            else
                throw error ("@SYS22828",funcname());

            // dimension changes, update committed cost without reverse
            if (!DimensionDefaultFacade::areEqual(prodTable_Orig.DefaultDimension, prodTable.DefaultDimension)
              ||prodTable_Orig.ProjCategoryId!=prodTable.ProjCategoryId
              ||prodTable_Orig.ActivityNumber!=prodTable.ActivityNumber)
                retActionType = ProjCommittedCostUpdateAction::UpdateOnly;

            // qty,currency got change, should reverse the old one and recreate committed cost
            if ( this.openInTotal(prodTable_Orig)  != this.openInTotal(prodTable)
               ||(prodTable_Orig.ItemId            != prodTable.ItemId))
                retActionType = ProjCommittedCostUpdateAction::UpdateReverse;
        }
        //no match, return updateOnly
        return retActionType==ProjCommittedCostUpdateAction::Unknown? ProjCommittedCostUpdateAction::UpdateOnly:retActionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        prodTable=buffer;

        movementVirtuel_Orig=movement_Orig;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the cost and sales amount of a transaction.
    /// </summary>
    /// <param name="_costAmount">
    ///    The cost amount of the transaction; optional.
    /// </param>
    /// <param name="_salesAmount">
    ///    The sales amount of the transaction; optional.
    /// </param>
    /// <returns>
    ///    true if the cost and sales amounts can be reduced from the budget; otherwise, false.
    /// </returns>
    public boolean mustUpdateBudget(AmountCur _costAmount = 0, AmountCur _salesAmount = 0)
    {
        boolean ret = true;

        if (actionType== ProjCommittedCostUpdateAction::Post)
            ret = false;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateForecast</Name>
				<Source><![CDATA[
    public boolean mustUpdateForecast(Qty _qty)
    {
        if (actionType== ProjCommittedCostUpdateAction::Post)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(InventMovement _movement)
    {
        super(_movement);

        movementVirtuel = movement;
        movementVirtuel_Orig = movement_Orig;

        if (movementVirtuel.parmInventMovReference()
         && movementVirtuel.parmInventMovReference().transType()==InventTransType::Production
         && movementVirtuel.parmInventMovReference().buffer().TableId == tablenum(ProdTable))
            buffer = movementVirtuel.parmInventMovReference().buffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openInTotal</Name>
				<Source><![CDATA[
    public InventQty openInTotal(ProdTable _prodTable)
    {
        return _prodTable.QtyCalc-_prodTable.historicalCostQtyGood();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdTable</Name>
				<Source><![CDATA[
    public ProdTable parmProdTable(ProdTable _prodTable=prodTable)
    {
        prodTable=_prodTable;
        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransId</Name>
				<Source><![CDATA[
    public TransactionID projTransId()
    {
        return prodTable.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainQty</Name>
				<Source><![CDATA[
    public InventQty remainQty()
    {
        return -(movement.remainFinancial()+movement.remainPhysical());
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCommittedCost</Name>
				<Source><![CDATA[
    public boolean reverseCommittedCost(NoYes isInvoiced)
    {
        CostControlTransCommittedCost   costControlTransCommittedCost;
        Voucher                         voucher;
        TransDate                       ledgerTransDate;

        if (!super(isInvoiced))
            return false;

        if (isInvoiced)
        {
            voucher = this.parmLedgerVoucher().lastVoucher();
            ledgerDimensionDefaultAccount = this.parmMovement().accountOperations();
            ledgerTransDate=this.parmLedgerVoucher().lastTransDate();
        }

        while select forupdate costControlTransCommittedCost
            where costControlTransCommittedCost.ProjTransId == prodTable.ProjTransId
        {
            // Clear the open; if invoiced, set reverse =true
            if (isInvoiced)
            {
                if (!costControlTransCommittedCost.Voucher)
                {
                    costControlTransCommittedCost.Voucher = voucher;
                    costControlTransCommittedCost.LedgerDimension=ledgerDimensionDefaultAccount;
                }
            }

            if (costControlTransCommittedCost.Open ==NoYes::Yes)
            {
                costControlTransCommittedCost.Open = NoYes::No;
                costControlTransCommittedCost.Reverse = NoYes::No;
                costControlTransCommittedCost.update();

                CostControlTransCommittedCost::addNegativeRecord(costControlTransCommittedCost, isInvoiced, voucher, ledgerDimensionDefaultAccount, ledgerTransDate);

                if (this.mustUpdateBudget() && ProjBudgetReductionHistory::existProjTransId(prodTable.ProjTransId))
                {
                    this.budgetUpdate(this.parmProdTable().ProdId,ProjBudgetTransaction::construct(this.parmProdTable()),ProjBudgetAdjustmentType::Increment);
                }

                if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
                    this.forecastUpdate(costControlTransCommittedCost,
                                        -costControlTransCommittedCost.Qty,
                                        -costControlTransCommittedCost.Amount);
            }
            else
                costControlTransCommittedCost.update();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommittedCost</Name>
				<Source><![CDATA[
    public void updateCommittedCost()
    {
        CostControlTransCommittedCost           updateCCTCC;
        CostControlTransCommittedCost           newOpenCCTCC;
        ProjBudgetTransactionLine               projBudgetTransactionLine;
        ProjBudgetTransaction                   projBudgetTransaction;

        CostControlTransCommittedCost oldOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId(),true);
        ProjCategoryId oldCategoryId = oldOpenCCTCC.CategoryId;
        smmActivityNumber oldActivityNum = oldOpenCCTCC.ActivityNumber;

        ProjCategoryId newCategoryId = prodTable.ProjCategoryId;
        smmActivityNumber newActivityNum = prodTable.ActivityNumber;

        boolean useBudgeting = ProjTable::find(prodTable.ProjId).UseBudgeting;

        while select forupdate updateCCTCC
            where updateCCTCC.ProjTransId == prodTable.ProjTransId
        {
            updateCCTCC.DefaultDimension = prodTable.DefaultDimension;
            updateCCTCC.CategoryId = prodTable.ProjCategoryId;
            updateCCTCC.ActivityNumber = prodTable.ActivityNumber;
            updateCCTCC.update();
        }
        Amount newAmount = this.costPricePcs()*oldOpenCCTCC.Qty;
        if (oldOpenCCTCC.Amount==0 && newAmount!=0)
        {
            newOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId(),true);
            newOpenCCTCC.Amount    = newAmount;
            newOpenCCTCC.AmountMst = newOpenCCTCC.Amount;
            newOpenCCTCC.update();

            if (useBudgeting)
            {
                projBudgetTransactionLine = ProjBudgetTransactionLine::construct(prodTable);
                projBudgetTransactionLine.parmQty(newOpenCCTCC.Qty);
                projBudgetTransactionLine.parmCostAmount(newOpenCCTCC.AmountMst);
                projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                this.budgetUpdate(prodTable.ProjId, projBudgetTransaction, ProjBudgetAdjustmentType::Decrement);
            }
            else
            {
                this.forecastUpdate(newOpenCCTCC, newOpenCCTCC.Qty, newAmount);
            }
        }
        else if (oldOpenCCTCC.Amount!=newAmount)
        {
            this.budgetUpdate(oldOpenCCTCC.ProjId, ProjBudgetTransaction::construct(prodTable),ProjBudgetAdjustmentType::Increment);
            this.forecastUpdate(oldOpenCCTCC, -oldOpenCCTCC.Qty, -oldOpenCCTCC.Amount);
            newOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId(),true);
            newOpenCCTCC.Amount    = newAmount;
            newOpenCCTCC.AmountMst = newOpenCCTCC.Amount;
            newOpenCCTCC.update();

            if (useBudgeting)
            {
                projBudgetTransactionLine = ProjBudgetTransactionLine::construct(prodTable);
                projBudgetTransactionLine.parmQty(newOpenCCTCC.Qty);
                projBudgetTransactionLine.parmCostAmount(newOpenCCTCC.AmountMst);
                projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                this.budgetUpdate(prodTable.ProjId, projBudgetTransaction,ProjBudgetAdjustmentType::Decrement);
            }
            else
            {
                this.forecastUpdate(newOpenCCTCC, newOpenCCTCC.Qty, newAmount);
            }
        }
        else if (oldCategoryId != newCategoryId   || oldActivityNum!= newActivityNum || prodTable.ProjSalesPrice != prodTable.orig().ProjSalesPrice)
        {
            this.budgetUpdate(oldOpenCCTCC.ProjId, ProjBudgetTransaction::construct(prodTable),ProjBudgetAdjustmentType::Increment);
            this.forecastUpdate(oldOpenCCTCC, -oldOpenCCTCC.Qty, -oldOpenCCTCC.Amount);
            newOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId(),false);

            if (useBudgeting)
            {
                projBudgetTransactionLine = ProjBudgetTransactionLine::construct(prodTable);
                projBudgetTransactionLine.parmQty(newOpenCCTCC.Qty);
                projBudgetTransactionLine.parmCostAmount(newOpenCCTCC.AmountMst);
                projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                this.budgetUpdate(prodTable.ProjId, projBudgetTransaction,ProjBudgetAdjustmentType::Decrement);
            }
            else
            {
                this.forecastUpdate(newOpenCCTCC,
                                    newOpenCCTCC.Qty,
                                    newOpenCCTCC.Amount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCreate</Name>
				<Source><![CDATA[
    public boolean validateCreate()
    {
        boolean ret = super();
        if (ret)
        {
            if (!ProjParameters::find().TrackCommittedCostProduction)
                ret=false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>