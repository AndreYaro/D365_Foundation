<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAllocationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides access to ledger allocation related methods.
/// </summary>
class LedgerAllocationProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getMainAccountAllocationListFromLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>Retrieves the main account allocations for a ledger dimension.</summary>
    /// <param name = "_companyInfoRecId">The Id of the <c>CompanyInfo</c> record.</param>
    /// <param name = "_ledgerDimensionDefaultAccount">A ledger dimension.</param>
    /// <param name = "_defaultDimension">A default dimension.</param>
    /// <param name = "_sourceDocumentAmount">The <c>SourceDocumentAmount</c> to be allocated.</param>
    /// <param name = "_transactionCurrencyCode">The <c>CurrencyCode</c> of the transaction/</param>
    /// <param name = "_ret">The event handler result.</param>
    /// <returns>A <c>LedgerDimensionAllocation</c> list.</returns>
    [SubscribesTo(classStr(LedgerDimensionProvider), delegateStr(LedgerDimensionProvider, getMainAccountAllocationListFromLedgerDimension))]
    public static void getMainAccountAllocationListFromLedgerDimension(
        RefRecId _companyInfoRecId,
        LedgerDimensionBase _ledgerDimensionDefaultAccount,
        DimensionDefault _defaultDimension,
        Object _sourceDocumentAmount,
        CurrencyCode _transactionCurrencyCode,
        EventHandlerResult _ret)
    {
        MainAccount                                 mainAccount;
        LedgerDimensionAllocationList               allocatedLedgerDimensionAllocationList;
        LedgerAllocationController                  controller;
        LedgerAllocationItem                        baseItem;
        LedgerAllocationItem                        allocationItem;
        LedgerDimensionAllocation                   allocatedLedgerDimensionAllocation;
        List                                        allocationItemList;
        ListEnumerator                              allocationEnumerator;
        LedgerDimensionAccount                      ledgerDimension;
        LedgerDimensionDefaultAccount               ledgerDimensionDefaultAccount;
        MainAccountLegalEntity                      mainAccountLegalEntity;
        RecId                                       companyInfoRecId;
        RecId                                       mainAccountRecId;
        LedgerRecId                                 primaryLedgerRecId;
        AllocationFactor                            allocationFactor;
        CurrencyCode                                transactionCurrencyCode;
        DimensionHierarchyId                        dimensionHierarchyId;
        SourceDocumentAmount                        sourceDocumentAmount;

        if (!_ret.hasResult())
        {
            // Initialize the allocated list
            allocatedLedgerDimensionAllocationList = LedgerDimensionAllocationList::construct();

            mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(_ledgerDimensionDefaultAccount);
            sourceDocumentAmount =  _sourceDocumentAmount as sourceDocumentAmount;

            // For a given main account, try to allocate
            if (mainAccount)
            {
                mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccount.RecId, _companyInfoRecId);
                if (mainAccountLegalEntity.AutoAllocate)
                {
                    baseItem = LedgerAllocationItem::constructFromLedgerDimension(ledgerDimensionDefaultAccount, _defaultDimension);
                    baseItem.setAmounts(sourceDocumentAmount.parmAmount(), 0, 0, 0, 1);
                    controller = LedgerAllocationController::newNetDifference(_transactionCurrencyCode);
                    allocationItemList = controller.allocate(baseItem);

                    if (!allocationItemList.empty())
                    {
                        allocationEnumerator = allocationItemList.getEnumerator();

                        while (allocationEnumerator.moveNext())
                        {
                            allocationItem = allocationEnumerator.current();
                            mainAccountRecId = allocationItem.parmMainAccountId();
                            dimensionHierarchyId = DimensionHierarchy::getAccountStructure(mainAccountRecId, primaryLedgerRecId);

                            if (!dimensionHierarchyId)
                            {
                                throw error(strFmt("@SYS4009834",MainAccount::find(mainAccountRecId).MainAccountId));
                            }

                            ledgerDimension = LedgerDimensionDefaultingEngine::getLedgerDimensionFromAccountAndDim(mainAccountRecId,
                                                        dimensionHierarchyId,
                                                        allocationItem.parmDefaultDimension());

                            allocatedLedgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimension,
                                                                                                         allocationFactor * allocationItem.getPercent(),
                                                                                                         DebitCredit::Credit,
                                                                                                         false);
                            allocatedLedgerDimensionAllocationList.addEnd(allocatedLedgerDimensionAllocation);
                        }
                    }
                }
            }

            _ret.result(allocatedLedgerDimensionAllocationList);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>