<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanUpdReset</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanUpdReset</c> class hierarchy performs status resets for kanbans.
/// </summary>
public abstract class KanbanUpdReset extends UpdateBase
{
    Kanban                  kanban;
    Kanban                  beforeResetKanban;
    KanbanStatusUpdate      kanbanStatusUpdate;
    boolean                 updateJobs;

    ProdJournalVoucherId    voucherId;
    NumberSeq               numberSeq;
    LedgerVoucher           ledgerVoucher;

    LeanConversionCostUpd   costUpd;
    KanbanStatus            kanbanStatus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beginLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the data that is required to update the ledger voucher.
    /// </summary>
    /// <remarks>
    ///    The data is not committed before the <c>commitLedger</c> method is called.
    /// </remarks>
    protected void beginLedger()
    {
        TransactionTxt          transactionTxt = TransactionTxt::construct();
        KanbanType              kanbanType     = kanban.type();
        TransDate               transDate      = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(kanbanStatusUpdate.TransactionDateTime,DateTimeUtil::getCompanyTimeZone()));
        LeanCostingFacadeBase   leanCostingFacade;

        numberSeq      = NumberSeq::newGetNum(ProdParameters::numRefProdJournalVoucherId());
        voucherId      = numberSeq.num();

        ledgerVoucher  = LedgerVoucher::newLedgerPost(DetailSummary::Summary, kanbanType.sysModule(), numberSeq.parmNumberSequenceCode());

        transactionTxt.setType(LedgerTransTxt::Kanban);
        transactionTxt.setDate(transDate);
        transactionTxt.setVoucher(voucherId);
        transactionTxt.setKey1(kanban.KanbanId);

        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucherId,
                                                                                  transDate,
                                                                                  kanbanType.sysModule(),
                                                                                  kanbanType.ledgerTransType());
        ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        if (kanbanStatus)
        {
            leanCostingFacade = kanbanStatus.parmLeanCostingFacade();
        }

        costUpd = LeanConversionCostUpd::newFromParameters(ledgerVoucher, kanban.leanProductionFlowReference(), leanCostingFacade, kanban.currentJob());
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions for a specific status reset.
    /// </summary>
    protected void cleanUp()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commits the voucher.
    /// </summary>
    protected void commitLedger()
    {
        if (ledgerVoucher)
        {
            costUpd.updateNow();
            ledgerVoucher.end();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>Kanban</c> table buffer from the <c>ParmBuffer</c> buffer.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the <c>Kanban</c> class variable for update;
    ///    optional.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The record is not valid; the update was canceled.
    /// </exception>
    protected void initKanban(boolean _forUpdate = false)
    {
        ParmBuffer           parmBuffer  = this.parmParmBuffer();
        KanbanStatusUpdate   statusUpdate;

        statusUpdate.data(parmBuffer);

        kanban = Kanban::find(statusUpdate.Kanban,_forUpdate);

        if (!kanban.checkValid(statusUpdate.RecId))
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanJoUpdReset</c> class.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyRulesEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Notifies the lean rules engine when the kanban status changes.
    /// </summary>
    protected void notifyRulesEngine()
    {
        if (beforeResetKanban.Status != kanban.Status)
        {
            //notify rules engine
            LeanRulesEngine::onKanbanStatusChange(kanban);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanStatus</Name>
				<Source><![CDATA[
    public KanbanStatus parmKanbanStatus(KanbanStatus _kanbanStatus = kanbanStatus)
    {
        kanbanStatus = _kanbanStatus;
        return kanbanStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmBuffer</Name>
				<Source><![CDATA[
    public ParmBuffer parmParmBuffer(ParmBuffer _kanbanStatusUpdate = kanbanStatusUpdate)
    {
        if (!_kanbanStatusUpdate.RecId)
        {
            throw error(strfmt("@SYS134373",tableid2name(tablenum(Kanban))));
        }

        kanbanStatusUpdate = _kanbanStatusUpdate;

        return kanbanStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateJobs</Name>
				<Source><![CDATA[
    public boolean parmUpdateJobs(boolean _updateJobs = updateJobs)
    {
        updateJobs = _updateJobs;
        return updateJobs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Notifies the rules engine that the status has been reset.
    /// </summary>
    /// <remarks>
    ///    This method is called after execution of the status reset.
    /// </remarks>
    protected void postCleanUp()
    {
        this.notifyRulesEngine();
        beforeResetKanban.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preCleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores the data from the specified <c>KanbanJob</c> object.
    /// </summary>
    protected void preCleanUp()
    {
        beforeResetKanban.data(kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets a kanban job related to the kanban that is being reset.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A buffer of the <c>KanbanJob</c> table.
    /// </param>
    /// <param name="_jobStatus">
    ///    The new status.
    /// </param>
    /// <returns>
    ///    true if the status reset for the job was executed; otherwise, false.
    /// </returns>
    protected boolean resetKanbanJob(
        KanbanJob           _kanbanJob,
        LeanKanbanJobStatus _jobStatus)
    {
        KanbanJobStatus kanbanJobStatus = KanbanJobStatus::newKanbanJob(_kanbanJob,false);
        KanbanJobStatusUpdate kanbanJobStatusUpdate = KanbanJobStatusUpdate::makeParameters(kanbanJobStatus,_jobStatus);

        boolean result = kanbanJobStatus.isStatusResetAllowed(_jobStatus);

        result = result && kanbanJobStatus.runStatusReset(kanbanJobStatusUpdate);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the status reset.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The validation failed.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        setprefix(KanbanMultiKanban::description());
        setprefix(#PreFixField(KanbanStatusUpdate,KanbanId));

        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw Exception::Error;
            }

            this.setParameters();
            this.preCleanUp();
            this.cleanUp();
            this.postCleanUp();

            this.updateJobJournal(ParmJobStatus::Executed);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            this.updateJobJournal(ParmJobStatus::ContainErrors);
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets parameters for the status update.
    /// </summary>
    protected void setParameters()
    {
        this.initKanban(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>status</c> field of the <c>Kanban</c> table buffer.
    /// </summary>
    /// <param name="_status">
    ///    The new status.
    /// </param>
    /// <remarks>
    ///    The <c>Kanban</c> object must already be selected for update.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The record validation failed.
    /// </exception>
    protected void setStatus(LeanKanbanStatus _status)
    {
        ttsbegin;
        kanban.Status = _status;
        kanban.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_kanban">
    /// The <c>Kanban</c> table buffer used to instantiate the class.
    /// </param>
    /// <param name="_leanKanbanStatus">
    /// The target kanban  status.
    /// </param>
    /// <param name="_updateJobs">
    /// A Boolean value that specifies if the kanban jobs must be updated.
    /// </param>
    /// <param name="_kanbanStatus">
    /// The <c>KanbanStatus</c> record to retrieve the <c>LeanCostingFacadeBase</c> instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>KanbanUpd_End</c> class.
    /// </returns>
    public static KanbanUpdReset newKanban(
        Kanban           _kanban,
        LeanKanbanStatus _leanKanbanStatus,
        boolean          _updateJobs,
        KanbanStatus     _kanbanStatus)
    {
        return KanbanUpdReset::newParmBuffer(KanbanStatusUpdate::makeParameters(_kanban.status(),_leanKanbanStatus),_updateJobs,_kanbanStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_kanbanStatusUpdate">
    /// The <c>KanbanStatusUpdate</c> table buffer to use to initialize the class.
    /// </param>
    /// <param name="_updateJobs">
    /// A Boolean value that specifies whether to update the kanban jobs.
    /// </param>
    /// <param name="_kanbanStatus">
    /// The <c>KanbanStatus</c> record to retrieve the <c>LeanCostingFacadeBase</c> instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>KanbanUpdReset</c> class.
    /// </returns>
    public static KanbanUpdReset newParmBuffer(
        KanbanStatusUpdate _kanbanStatusUpdate,
        boolean            _updateJobs,
        KanbanStatus       _kanbanStatus)
    {
        KanbanUpdReset    kanbanUpdReset;

        if (!_kanbanStatusUpdate.ParmId)
        {
            _kanbanStatusUpdate.skipTTSCheck(true);
            _kanbanStatusUpdate.ParmBuffer::initParmId();
            _kanbanStatusUpdate.write();
        }

        switch (_kanbanStatusUpdate.kanban().Status)
        {
            case LeanKanbanStatus::Assigned:
                kanbanUpdReset = KanbanUpdResetAssigned::construct();
                break;
            case LeanKanbanStatus::Received:
                kanbanUpdReset = KanbanUpdResetReceived::construct();
                break;
            case LeanKanbanStatus::Emptied:
                kanbanUpdReset = KanbanUpdResetEmptied::construct();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        kanbanUpdReset.parmParmBuffer(_kanbanStatusUpdate);
        kanbanUpdReset.parmUpdateJobs(_updateJobs);
        kanbanUpdReset.parmKanbanStatus(_kanbanStatus);

        return kanbanUpdReset;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
