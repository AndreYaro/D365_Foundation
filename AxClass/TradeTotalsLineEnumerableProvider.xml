<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeTotalsLineEnumerableProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TradeTotalsLineEnumerableProvider</c> class implements the
/// <c>TradeTotalsILineEnumerableProvider</c> interface that returns a <c>TradeCommonIEnumerable</c>
/// object to iterate <c>Common</c> records filtered by the content of a specified contract.
/// </summary>
/// <remarks>
/// The class caches the <c>Common</c> records when the records are not retrieved for update.
/// </remarks>
class TradeTotalsLineEnumerableProvider implements TradeTotalsILineEnumerableProvider
{
    Map                             lineEnumerableMap;
    Map                             lineEnumerableForUpdateMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBuildQueryRun</Name>
				<Source><![CDATA[
        protected TradeTotalsIBuildQueryRun createBuildQueryRun(
        TradeTotalsIContract    _contract)
    {
        return TradeTotalsBuildQueryRun::newFromContract(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineEnumerable</Name>
				<Source><![CDATA[
        protected TradeCommonIEnumerable createLineEnumerable(
        TradeTotalsIContract    _contract,
        boolean                 _forupdate)
    {
        TradeCommonIEnumerable          lineEnumerable;
        boolean                         lineEnumerableForUpdate;
        str                             hashStr = _contract.getHashStr();
        TradeTotalsIBuildQueryRun       buildQueryRun;
        QueryRun                        queryRun;

        if (!lineEnumerableMap)
        {
            lineEnumerableMap = new Map(Types::String, Types::Class);
        }

        if (!lineEnumerableForUpdateMap)
        {
            lineEnumerableForUpdateMap = new Map(Types::String, Types::Enum);
        }

        if (lineEnumerableForUpdateMap.exists(hashStr))
        {
            lineEnumerableForUpdate = lineEnumerableForUpdateMap.lookup(hashStr);
        }

        if (_forupdate || lineEnumerableForUpdate || !lineEnumerableMap.exists(hashStr))
        {
            if (!buildQueryRun)
            {
                buildQueryRun = this.createBuildQueryRun(_contract);
            }

            queryRun = buildQueryRun.buildLineQueryRun();
            queryRun.query().dataSourceNo(buildQueryRun.mainLineDataSourceNumber()).update(_forupdate);

            lineEnumerable = TradeCommonEnumerableQueryRun::newFromQueryRun(queryRun, buildQueryRun.mainLineDataSourceNumber());

            if (!_forupdate)
            {
                lineEnumerable = TradeCommonEnumerableCache::newFromTradeCommonIEnumerable(lineEnumerable);
            }

            lineEnumerableMap.insert(hashStr, lineEnumerable);
            lineEnumerableForUpdateMap.insert(hashStr, _forupdate);
        }
        else
        {
            lineEnumerable = lineEnumerableMap.lookup(hashStr);
        }
        return lineEnumerable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEnumerable</Name>
				<Source><![CDATA[
        public TradeCommonIEnumerable lineEnumerable(
        TradeTotalsIContract    _contract,
        boolean                 _forupdate = false)
    {
        return this.createLineEnumerable(_contract, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static TradeTotalsLineEnumerableProvider construct()
    {
        return new TradeTotalsLineEnumerableProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProvider</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>TradeTotalsLineEnumerableProvider</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>TradeTotalsLineEnumerableProvider</c> class.
    /// </returns>
    static public TradeTotalsLineEnumerableProvider newProvider()
    {
        TradeTotalsLineEnumerableProvider   tradeTotalsLineEnumerableProvider = TradeTotalsLineEnumerableProvider::construct();

        return tradeTotalsLineEnumerableProvider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>