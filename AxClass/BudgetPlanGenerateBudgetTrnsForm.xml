<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateBudgetTrnsForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateBudgetTrnsForm</c> class supports the business logic of the <c>BudgetPlanGenerateBudgetTrns</c> form.
/// </summary>
class BudgetPlanGenerateBudgetTrnsForm
{
    FormDateControl             targetDefaultDateControl;
    FormStringControl           targetBudgetModelIdControl;
    FormStringControl           targetReasonCodeControl;
    FormComboBoxControl         targetBudgetTypeControl;
    FormReferenceControl        targetBudgetTransactionCodeControl;
    FormStringControl           targetReasonCommentControl;
    FormRealControl             targetFactorControl;
    FormRealControl             targetRoundingRuleControl;
    FormCheckBoxControl         targetTargetSummarizeToDimensionControl;

    FormReferenceGroupControl   sourceBudgetPlanningProcessControl;
    FormStringControl           sourceLedgerControl;
    FormReferenceGroupControl   sourceBudgetPlanningDocumentNumberControl;
    FormStringControl           sourceBudgetPlanNameControl;
    FormReferenceControl        sourceBudgetPlanScenarioControl;

    BudgetPlanGenerateBudgetTrnsContract budgetPlanGenerateBudgetTrnsContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>budgetTransactionCodeModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the business logic on the modification of budget transaction code field.
    /// </summary>
    /// <param name="_targetBudgetTransactionCodeControl">
    /// The control of budget transaction code field.
    /// </param>
    /// <returns>
    /// true if validation pass otherwise false.
    /// </returns>
    public boolean budgetTransactionCodeModified(FormReferenceControl _targetBudgetTransactionCodeControl)
    {
        BudgetTransactionCode budgetTransactionCode;
        boolean               isValid = true;

        budgetTransactionCode = BudgetTransactionCode::find(_targetBudgetTransactionCodeControl.value());

        if (budgetTransactionCode)
        {
            switch (budgetTransactionCode.BudgetTransactionType)
            {
                case BudgetTransactionType::Amendment,
                        BudgetTransactionType::OriginalBudget,
                        BudgetTransactionType::Apportionment,
                        BudgetTransactionType::PreliminaryBudget:
                            targetBudgetTypeControl.selection(budgetTransactionCode.BudgetTransactionType);
                            break;
                default:
                    isValid = checkFailed(strFmt("@SYS130664", budgetTransactionCode.Name, budgetTransactionCode.BudgetTransactionType));
            }

            if (isValid && budgetTransactionCode.RecId)
            {
                targetReasonCodeControl.text(budgetTransactionCode.Reason);
                this.setReasonCodeComment(budgetTransactionCode.Reason);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controls with default value.
    /// </summary>
    public void initControls()
    {
        BudgetPlanHeader budgetPlanHeader;

        targetDefaultDateControl.dateValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        targetFactorControl.realValue(1.0);
        sourceLedgerControl.text(Ledger::name());

        // Using BudgetPlan method to find the default organization for current user.
        BudgetPlan::defaultRowForCreate(budgetPlanHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanScenario</c> records.
    /// </summary>
    /// <returns>
    /// The <c>BudgetPlanScenario</c> record selected by the lookup.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public BudgetPlanScenario lookupReferenceBudgetPlanScenario()
    {
        Query                   query;
        QueryBuildDataSource    scenarioDataSource;
        QueryBuildDataSource    budgetPlanLineDataSource;
        SysReferenceTableLookup referenceLookup;

        if (sourceBudgetPlanScenarioControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        referenceLookup = SysReferenceTableLookup::newParameters(tableNum(BudgetPlanScenario), sourceBudgetPlanScenarioControl, true);

        // Add fields that will be shown in the lookup form as columns.
        referenceLookup.addLookupfield(fieldNum(BudgetPlanScenario, Name));
        referenceLookup.addLookupfield(fieldNum(BudgetPlanScenario, Description));

        // Build the query for the lookup form.
        query = new Query();

        scenarioDataSource = query.addDataSource(tableNum(BudgetPlanScenario));

        budgetPlanLineDataSource = scenarioDataSource.addDataSource(tableNum(BudgetPlanLine));
        budgetPlanLineDataSource.relations(true);
        budgetPlanLineDataSource.joinMode(JoinMode::ExistsJoin);

        budgetPlanLineDataSource.addRange(fieldNum(BudgetPlanLine, BudgetPlanHeader)).value(SysQuery::value(sourceBudgetPlanningDocumentNumberControl.value()));

        // Add the query to the lookup form.
        referenceLookup.parmQuery(query);

        // Perform the lookup and return the selected record.
        return referenceLookup.performFormLookup() as BudgetPlanScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceBudgetTransactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup reference on the <c>BudgetTransactionCode</c> table.
    /// </summary>
    /// <param name="_targetBudgetTransactionCodeControl">
    /// The control of budget transaction code field.
    /// </param>
    /// <returns>
    /// The table buffer of <c>BudgetTransactionCode</c> table.
    /// </returns>
    public Common lookupReferenceBudgetTransactionCode(FormReferenceControl _targetBudgetTransactionCodeControl)
    {
        Query                           query;
        QueryBuildDataSource            queryBuildDataSource;
        SysReferenceTableLookup         referenceLookup;

        query = new Query();
        referenceLookup = SysReferenceTableLookup::newParameters(tableNum(BudgetTransactionCode), _targetBudgetTransactionCodeControl, true);

        // Add fields that will be shown in the lookup form as columns
        referenceLookup.addLookupfield(fieldNum(BudgetTransactionCode, Name));
        referenceLookup.addLookupfield(fieldNum(BudgetTransactionCode, Description));
        referenceLookup.addLookupfield(fieldNum(BudgetTransactionCode, BudgetTransactionType));

        queryBuildDataSource = query.addDataSource(tableNum(BudgetTransactionCode));
        queryBuildDataSource.addRange(fieldNum(BudgetTransactionCode, BudgetTransactionType)).value(queryValue(BudgetTransactionType::OriginalBudget));
        queryBuildDataSource.addRange(fieldNum(BudgetTransactionCode, BudgetTransactionType)).value(queryValue(BudgetTransactionType::Amendment));
        queryBuildDataSource.addRange(fieldNum(BudgetTransactionCode, BudgetTransactionType)).value(queryValue(BudgetTransactionType::PreliminaryBudget));
        queryBuildDataSource.addRange(fieldNum(BudgetTransactionCode, BudgetTransactionType)).value(queryValue(BudgetTransactionType::Apportionment));

        // Add the query to the lookup form
        referenceLookup.parmQuery(query);

        // Perform the lookup and return the selected record
        return referenceLookup.performFormLookup() as BudgetTransactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateBudgetTrnsContract</Name>
				<Source><![CDATA[
    public BudgetPlanGenerateBudgetTrnsContract parmBudgetPlanGenerateBudgetTrnsContract(BudgetPlanGenerateBudgetTrnsContract _budgetPlanGenerateBudgetTrnsContract = budgetPlanGenerateBudgetTrnsContract)
    {
        budgetPlanGenerateBudgetTrnsContract = _budgetPlanGenerateBudgetTrnsContract;

        return budgetPlanGenerateBudgetTrnsContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceBudgetPlanNameControl</Name>
				<Source><![CDATA[
    public FormStringControl parmSourceBudgetPlanNameControl(FormStringControl _sourceBudgetPlanNameControl = sourceBudgetPlanNameControl)
    {
        sourceBudgetPlanNameControl = _sourceBudgetPlanNameControl;

        return sourceBudgetPlanNameControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceBudgetPlanningDocumentControl</Name>
				<Source><![CDATA[
    public  FormReferenceGroupControl parmSourceBudgetPlanningDocumentControl(FormReferenceGroupControl _sourceBudgetPlanningDocumentNumberControl = sourceBudgetPlanningDocumentNumberControl)
    {
        sourceBudgetPlanningDocumentNumberControl = _sourceBudgetPlanningDocumentNumberControl;

        return sourceBudgetPlanningDocumentNumberControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceBudgetPlanningProcessControl</Name>
				<Source><![CDATA[
    public  FormReferenceGroupControl parmSourceBudgetPlanningProcessControl(FormReferenceGroupControl _sourceBudgetPlanningProcessControl = sourceBudgetPlanningProcessControl)
    {
        sourceBudgetPlanningProcessControl = _sourceBudgetPlanningProcessControl;

        return sourceBudgetPlanningProcessControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceBudgetPlanScenarioControl</Name>
				<Source><![CDATA[
    public  FormReferenceControl parmSourceBudgetPlanScenarioControl(FormReferenceControl _sourceBudgetPlanScenarioControl = sourceBudgetPlanScenarioControl)
    {
        sourceBudgetPlanScenarioControl = _sourceBudgetPlanScenarioControl;

        return sourceBudgetPlanScenarioControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceLedgerControl</Name>
				<Source><![CDATA[
    public  FormStringControl parmSourceLedgerControl(FormStringControl _sourceLedgerControl = sourceLedgerControl)
    {
        sourceLedgerControl = _sourceLedgerControl;

        return sourceLedgerControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetBudgetModelIdControl</Name>
				<Source><![CDATA[
    public  FormStringControl parmTargetBudgetModelIdControl(FormStringControl _targetBudgetModelIdControl = targetBudgetModelIdControl)
    {
        targetBudgetModelIdControl = _targetBudgetModelIdControl;

        return targetBudgetModelIdControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetBudgetTransactionCodeControl</Name>
				<Source><![CDATA[
    public  FormReferenceControl parmTargetBudgetTransactionCodeControl(FormReferenceControl _targetBudgetTransactionCodeControl = targetBudgetTransactionCodeControl)
    {
        targetBudgetTransactionCodeControl = _targetBudgetTransactionCodeControl;

        return targetBudgetTransactionCodeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetBudgetTypeControl</Name>
				<Source><![CDATA[
    public  FormComboBoxControl parmTargetBudgetTypeControl(FormComboBoxControl _targetBudgetTypeControl = targetBudgetTypeControl)
    {
        targetBudgetTypeControl = _targetBudgetTypeControl;

        return targetBudgetTypeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetDefaultDateControl</Name>
				<Source><![CDATA[
    public  FormDateControl parmTargetDefaultDateControl(FormDateControl _targetDefaultDateControl = targetDefaultDateControl)
    {
        targetDefaultDateControl = _targetDefaultDateControl;

        return targetDefaultDateControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetFactorControl</Name>
				<Source><![CDATA[
    public  FormRealControl parmTargetFactorControl(FormRealControl _targetFactorControl = targetFactorControl)
    {
        targetFactorControl = _targetFactorControl;

        return targetFactorControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetReasonCodeControl</Name>
				<Source><![CDATA[
    public  FormStringControl parmTargetReasonCodeControl(FormStringControl _targetReasonCodeControl = targetReasonCodeControl)
    {
        targetReasonCodeControl = _targetReasonCodeControl;

        return targetReasonCodeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetReasonCommentControl</Name>
				<Source><![CDATA[
    public  FormStringControl parmTargetReasonCommentControl(FormStringControl _targetReasonCommentControl = targetReasonCommentControl)
    {
        targetReasonCommentControl = _targetReasonCommentControl;

        return targetReasonCommentControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetRoundingRuleControl</Name>
				<Source><![CDATA[
    public  FormRealControl parmTargetRoundingRuleControl(FormRealControl _targetRoundingRuleControl = targetRoundingRuleControl)
    {
        targetRoundingRuleControl = _targetRoundingRuleControl;

        return targetRoundingRuleControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetSummarizeToDimensionControl</Name>
				<Source><![CDATA[
    public  FormCheckBoxControl parmTargetSummarizeToDimensionControl(FormCheckBoxControl _targetTargetSummarizeToDimensionControl = targetTargetSummarizeToDimensionControl)
    {
        targetTargetSummarizeToDimensionControl = _targetTargetSummarizeToDimensionControl;

        return targetTargetSummarizeToDimensionControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOverloadMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the control events to this class methods.
    /// </summary>
    public void registerOverloadMethods()
    {
        this.initControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreLastSavedControlValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value on all controls to the values stored on the contract.
    /// </summary>
    public void restoreLastSavedControlValues()
    {
        Ledger  ledger;

        ledger = Ledger::find(budgetPlanGenerateBudgetTrnsContract.parmSourceLedgerRecId());

        // Setting the values for source controls.
        sourceBudgetPlanningProcessControl.value(budgetPlanGenerateBudgetTrnsContract.parmSourceBudgetPlanningProcess());
        sourceLedgerControl.text(ledger.Name);
        sourceBudgetPlanningDocumentNumberControl.value(budgetPlanGenerateBudgetTrnsContract.parmSourceBudgetPlanDocumentNumber());
        sourceBudgetPlanNameControl.text(budgetPlanGenerateBudgetTrnsContract.parmSourceBudgetPlanName());
        sourceBudgetPlanScenarioControl.value(budgetPlanGenerateBudgetTrnsContract.parmSourceBudgetPlanScenario());

        // Setting the values for target controls.
        targetDefaultDateControl.dateValue(budgetPlanGenerateBudgetTrnsContract.parmTargetTransDate());
        targetBudgetModelIdControl.text(budgetPlanGenerateBudgetTrnsContract.parmTargetBudgetModelId());
        targetBudgetTypeControl.selection(budgetPlanGenerateBudgetTrnsContract.parmTargetBudgetTransactionType());
        targetReasonCodeControl.text(budgetPlanGenerateBudgetTrnsContract.parmTargetReasonCode());
        targetReasonCommentControl.text(budgetPlanGenerateBudgetTrnsContract.parmTargetReasonComment());
        targetTargetSummarizeToDimensionControl.value(budgetPlanGenerateBudgetTrnsContract.parmTargetSummarizeToDimension());

        // Change the company because the budget transaction code belongs to the legal entity of the process.
        changeCompany (CompanyInfo::getDataArea(ledger.PrimaryForLegalEntity))
        {
            targetBudgetTransactionCodeControl.value(budgetPlanGenerateBudgetTrnsContract.parmTargetBudgetTransactionCodeId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContractParmFromFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the setting of contract parm method from respective control values.
    /// </summary>
    public void setContractParmFromFormControl()
    {
        budgetPlanGenerateBudgetTrnsContract.parmSourceBudgetPlanningProcess(sourceBudgetPlanningProcessControl.value());
        budgetPlanGenerateBudgetTrnsContract.parmSourceLedgerRecId(BudgetPlanningProcess::find(sourceBudgetPlanningProcessControl.value()).Ledger);
        budgetPlanGenerateBudgetTrnsContract.parmSourceBudgetPlanDocumentNumber(sourceBudgetPlanningDocumentNumberControl.value());
        budgetPlanGenerateBudgetTrnsContract.parmSourceBudgetPlanName(sourceBudgetPlanNameControl.valueStr());
        budgetPlanGenerateBudgetTrnsContract.parmSourceBudgetPlanScenario(sourceBudgetPlanScenarioControl.value());

        budgetPlanGenerateBudgetTrnsContract.parmTargetTransDate(targetDefaultDateControl.dateValue());
        budgetPlanGenerateBudgetTrnsContract.parmTargetBudgetModelId(targetBudgetModelIdControl.valueStr());
        budgetPlanGenerateBudgetTrnsContract.parmTargetBudgetTransactionCodeId(targetBudgetTransactionCodeControl.value());
        budgetPlanGenerateBudgetTrnsContract.parmTargetBudgetTransactionType(targetBudgetTypeControl.selection());
        budgetPlanGenerateBudgetTrnsContract.parmTargetReasonCode(targetReasonCodeControl.valueStr());
        budgetPlanGenerateBudgetTrnsContract.parmTargetReasonComment(targetReasonCommentControl.valueStr());
        budgetPlanGenerateBudgetTrnsContract.parmTargetFactor(targetFactorControl.realValue());
        budgetPlanGenerateBudgetTrnsContract.parmTargetRoundOff(targetRoundingRuleControl.realValue());
        budgetPlanGenerateBudgetTrnsContract.parmTargetSummarizeToDimension(targetTargetSummarizeToDimensionControl.checked());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReasonCodeComment</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets the default value of reason comment on the modification of reason code field.
    /// </summary>
    /// <param name="_reasonCode">
    ///  The control of reason code field.
    /// </param>
    public void setReasonCodeComment(ReasonCode _reasonCode)
    {
        ReasonTable reasonTable;

        reasonTable = ReasonTable::find(_reasonCode);

        if (reasonTable)
        {
            targetReasonCommentControl.text(reasonTable.Description);
        }
        else
        {
            targetReasonCommentControl.text('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceBudgetPlanningProcessModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of ledger control on the modification of budget planning process.
    /// </summary>
    /// <param name="_sourceBudgetPlanningProcessControl">
    /// The control of budget planning process field.
    /// </param>
    /// <returns>
    /// true when no error found; otherwise, false.
    /// </returns>
    public boolean sourceBudgetPlanningProcessModified(FormReferenceGroupControl _sourceBudgetPlanningProcessControl)
    {
        BudgetPlanningProcess               budgetPlanningProcess;
        BudgetPlanHeader                    budgetPlanHeader;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;
        boolean                             isValid = true;

        budgetPlanningProcess = BudgetPlanningProcess::find(_sourceBudgetPlanningProcessControl.value());

        if (budgetPlanningProcess)
        {
            sourceLedgerControl.text(Ledger::name(budgetPlanningProcess.Ledger));

            if (sourceBudgetPlanningDocumentNumberControl.value() != 0)
            {
                select firstonly RecId from budgetPlanHeader
                    where budgetPlanHeader.BudgetPlanningProcess == budgetPlanningProcess.RecId
                        && budgetPlanHeader.RecId == sourceBudgetPlanningDocumentNumberControl.value();

                isValid =  isValid && budgetPlanHeader.RecId ? true : false;
                sourceBudgetPlanningDocumentNumberControl.value(budgetPlanHeader.RecId);
            }
        }

        if (!isValid)
        {
            checkFailed("@GLS150154");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceBudgetPlanScenarioModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the validation on the modfication of budget plan scenario control.
    /// </summary>
    /// <param name="_sourceBudgetPlanScenarioControl">
    /// The control of budget plan scenario field.
    /// </param>
    /// <returns>
    /// true when no error found; otherwise, false.
    /// </returns>
    public boolean sourceBudgetPlanScenarioModified(FormReferenceGroupControl _sourceBudgetPlanScenarioControl)
    {
        boolean          isValid = true;

        if (sourceBudgetPlanningProcessControl.value() == 0 || sourceBudgetPlanningDocumentNumberControl.value() == 0)
        // budget planning process and budget plan must be specified before selecting budget scenario
        {
            isValid = false;
            _sourceBudgetPlanScenarioControl.value(0);
        }

        if (!isValid)
        {
            checkFailed("@GLS150157");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>targetBudgetPlanDocumentModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of budget plan name on the modification of budget planning document number.
    /// </summary>
    /// <param name="_budgetPlanningDocumentNumberControl">
    /// The control of budget planning document number field.
    /// </param>
    /// <param name="_budgetingOrganizationRecId">
    /// The record Id of budget planning organization.
    /// </param>
    /// <returns>
    /// true when no error found; otherwise, false.
    /// </returns>
    public boolean targetBudgetPlanDocumentModified(FormReferenceGroupControl _budgetPlanningDocumentNumberControl, BudgetingOrganizationRecId _budgetingOrganizationRecId)
    {
        BudgetPlanHeader budgetPlanHeader;
        boolean          isValidDocumentNumber = true;

        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanningDocumentNumberControl.value());

        if (budgetPlanHeader.BudgetingOrganization != _budgetingOrganizationRecId
            && _budgetingOrganizationRecId != 0)
        {
            isValidDocumentNumber = checkFailed("@GLS150133");
            _budgetPlanningDocumentNumberControl.value(0);
        }
        else
        {
            sourceBudgetPlanNameControl.text(budgetPlanHeader.Name);
        }

        return isValidDocumentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the validation on the form object.
    /// </summary>
    /// <returns>
    /// true if the contract is valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (!sourceBudgetPlanningProcessControl.value())
        {
            isValid = checkFailed(strFmt("@SYS304394", "@GLS70076"));
        }
        if (!sourceBudgetPlanningDocumentNumberControl.value())
        {
            isValid = checkFailed(strFmt("@SYS304394", "@GLS70131"));
        }

        if (!sourceBudgetPlanScenarioControl.value())
        {
            isValid = checkFailed(strFmt("@SYS304394", "@GLS70093"));
        }

        if (!targetBudgetModelIdControl.valueStr())
        {
            isValid = checkFailed(strFmt("@SYS304394", "@SYS16138"));
        }

        if (!targetBudgetTransactionCodeControl.value())
        {
            isValid = checkFailed(strFmt("@SYS304394", "@SYS339265"));
        }

        if (!targetFactorControl.realValue())
        {
            isValid = checkFailed("@SYS16901");
        }

        BudgetPlanHeader currentBudgetPlanHeader = BudgetPlanHeader::find(sourceBudgetPlanningDocumentNumberControl.value());

        isValid = isValid
                    && this.sourceBudgetPlanningProcessModified(sourceBudgetPlanningProcessControl)
                    && this.sourceBudgetPlanScenarioModified(sourceBudgetPlanScenarioControl)
                    && this.targetBudgetPlanDocumentModified(sourceBudgetPlanningDocumentNumberControl, currentBudgetPlanHeader.BudgetingOrganization);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the budget planning document number control.
    /// </summary>
    /// <returns>
    /// true when no error found; otherwise, false.
    /// </returns>
    public boolean validateBudgetPlanDocumentNumber()
    {
        boolean                 isValid;
        Query                   query;
        QueryRun                queryRun;
        BudgetPlanHeader        budgetPlanHeader;
        OMInternalOrganization  omInternalOrganization;

        query = BudgetPlan::getBudgetPlanHeaderReferenceQuery(
                    sourceBudgetPlanningProcessControl.value(),
                    sourceBudgetPlanningDocumentNumberControl.value());

        queryRun = new QueryRun(query);

        if (!queryRun.next())
        {
            select firstOnly Name from omInternalOrganization
                exists join budgetPlanHeader
                    where omInternalOrganization.RecId == budgetPlanHeader.BudgetingOrganization
                          && budgetPlanHeader.RecId    == sourceBudgetPlanningDocumentNumberControl.value();

            isValid = checkFailed(strFmt("@SYS4020045", omInternalOrganization.Name));
        }
        else
        {
            budgetPlanHeader = queryRun.get(tableNum(BudgetPlanHeader));

            sourceBudgetPlanScenarioControl.value(0);

            isValid = this.targetBudgetPlanDocumentModified(
                                      sourceBudgetPlanningDocumentNumberControl,
                                      budgetPlanHeader.BudgetingOrganization);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the budget plan process control.
    /// </summary>
    /// <param name="_sourceBudgetPlanningProcessControl">
    /// The control of budget planning process field.
    /// </param>
    /// <returns>
    /// true when no error found; otherwise, false.
    /// </returns>
    public boolean validateBudgetPlanningProcess(FormReferenceGroupControl _sourceBudgetPlanningProcessControl)
    {
        boolean               isValid = true;
        BudgetPlanningProcess budgetPlanningProcess;

        if (_sourceBudgetPlanningProcessControl.value())
        {
            budgetPlanningProcess = BudgetPlanningProcess::find(_sourceBudgetPlanningProcessControl.value());
        }

        if (budgetPlanningProcess.Ledger != Ledger::current())
        {
            isValid = checkFailed(strFmt("@SYS4020049", budgetPlanningProcess.Name));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the budget plan scenario control.
    /// </summary>
    /// <returns>
    /// true when no error found; otherwise, false.
    /// </returns>
    public boolean validateBudgetPlanScenario()
    {
        boolean            isValid = true;
        BudgetPlanLine     budgetPlanLine;
        BudgetPlanScenario budgetPlanScenario;

        select firstOnly RecId from budgetPlanScenario
            where budgetPlanScenario.RecId == sourceBudgetPlanScenarioControl.value()
                exists join budgetPlanLine
                    where budgetPlanLine.BudgetPlanScenario  == budgetPlanScenario.RecId
                          && budgetPlanLine.BudgetPlanHeader == sourceBudgetPlanningDocumentNumberControl.value();

        if (!budgetPlanScenario)
        {
            isValid = checkFailed(strFmt("@SYS316757", "@GLS150049"));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the object of <c>BudgetPlanGenerateBudgetTrnsForm</c> class.
    /// </summary>
    /// <returns>
    /// An object of <c>BudgetPlanGenerateBudgetTrnsForm</c> class.
    /// </returns>
    public static BudgetPlanGenerateBudgetTrnsForm construct()
    {
        return new BudgetPlanGenerateBudgetTrnsForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanHeader</c> records.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control to perform the lookup for.
    /// </param>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record Id of budget planning process which documents should be display.
    /// </param>
    /// <param name="_budgetingOrganizationRecId">
    /// The record Id of budget planning organization which documents should be display.
    /// </param>
    /// <param name="_budgetPlanPreparerRecId">
    /// The record Id of budget planning prepare which documents should be display.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanHeader</c> record selected by the lookup.
    /// </returns>
    public static BudgetPlanHeader lookupBudgetPlanHeader(FormReferenceControl _formReferenceControl,
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId,
        BudgetingOrganizationRecId _budgetingOrganizationRecId = 0,
        BudgetPlanPreparerRecId    _budgetPlanPreparerRecId = 0)
    {
        Query                   query;
        QueryBuildDataSource    processDataSource;
        QueryBuildRange         processRange;
        SysReferenceTableLookup referenceLookup;

        if (_formReferenceControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        referenceLookup = SysReferenceTableLookup::newParameters(tableNum(BudgetPlanHeader), _formReferenceControl, true);

        // Add fields that will be shown in the lookup form as columns
        referenceLookup.addLookupfield(fieldNum(BudgetPlanHeader, DocumentNumber));
        referenceLookup.addLookupfield(fieldNum(BudgetPlanHeader, Name));

        // Build the query for the lookup form
        query = new Query();

        processDataSource = query.addDataSource(tableNum(BudgetPlanHeader));

        // Filter by active processes
        processRange = processDataSource.addRange(fieldNum(BudgetPlanHeader, BudgetPlanningProcess));
        processRange.value(SysQuery::value(_budgetPlanningProcessRecId));

        if (_budgetPlanPreparerRecId != 0)
        {
            processDataSource.addRange(fieldNum(BudgetPlanHeader, BudgetPlanPreparer)).value(SysQuery::value(_budgetPlanPreparerRecId));
        }

        if (_budgetingOrganizationRecId != 0)
        {
            processDataSource.addRange(fieldNum(BudgetPlanHeader, BudgetingOrganization)).value(SysQuery::value(_budgetingOrganizationRecId));
        }

        // Add the query to the lookup form
        referenceLookup.parmQuery(query);

        // Perform the lookup and return the selected record
        return referenceLookup.performFormLookup() as BudgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanningProcess</c> records.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control to perform the lookup for.
    /// </param>
    /// <param name="_budgetPlanningApprovalProcessState">
    /// The state of budget planning process which should not be display.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanningProcess</c> record selected by the lookup.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static BudgetPlanningProcess lookupBudgetPlanningProcess(FormReferenceControl _formReferenceControl,
        BudgetPlanningApprovalProcessState _budgetPlanningApprovalProcessState = BudgetPlanningApprovalProcessState::InProcess)
    {
        Query                   query;
        QueryBuildRange         processRange;
        QueryBuildRange         ledgerRange;
        QueryBuildDataSource    processDataSource;
        SysReferenceTableLookup referenceLookup;

        if (_formReferenceControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        referenceLookup = SysReferenceTableLookup::newParameters(tableNum(BudgetPlanningProcess), _formReferenceControl, true);

        // Add fields that will be shown in the lookup form as columns
        referenceLookup.addLookupfield(fieldNum(BudgetPlanningProcess, Name));
        referenceLookup.addLookupfield(fieldNum(BudgetPlanningProcess, Ledger));

        // Build the query for the lookup form
        query = new Query();

        //Add data source
        processDataSource = query.addDataSource(tableNum(BudgetPlanningProcess));

        // Filter by active processes
        processRange = processDataSource.addRange(fieldNum(BudgetPlanningProcess, ApprovalProcessState));
        processRange.value(SysQuery::valueNot(_budgetPlanningApprovalProcessState));

        // Filter by current ledger
        ledgerRange = processDataSource.addRange(fieldNum(BudgetPlanningProcess, Ledger));
        ledgerRange.value(SysQuery::value(Ledger::current()));

        // Add the query to the lookup form
        referenceLookup.parmQuery(query);

        // Perform the lookup and return the selected record
        return referenceLookup.performFormLookup() as BudgetPlanningProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanPreparer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>HcmWorker</c> records.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control to perform the lookup for.
    /// </param>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record Id of budget planning process which documents should be display.
    /// </param>
    /// <param name="_budgetingOrganizationRecId">
    /// The record Id of budget planning organization which documents should be display.
    /// </param>
    /// <returns>
    /// The <c>HcmWorker</c> record selected by the lookup.
    /// </returns>
    public static HcmWorker lookupBudgetPlanPreparer(FormReferenceControl _formReferenceControl,
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId,
        BudgetingOrganizationRecId _budgetingOrganizationRecId
        )
    {
        Query                   query;
        QueryBuildDataSource    hcmWorkerDataSource;
        QueryBuildDataSource    budgetPlanHeaderDataSource;
        SysReferenceTableLookup referenceLookup;

        if (_formReferenceControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        referenceLookup = SysReferenceTableLookup::newParameters(tableNum(HcmWorker), _formReferenceControl, true);

        // Add fields that will be shown in the lookup form as columns
        referenceLookup.addLookupfield(fieldNum(HcmWorker, Person));
        referenceLookup.addLookupfield(fieldNum(HcmWorker, PersonnelNumber));

        // Build the query for the lookup form
        query = new Query();

        hcmWorkerDataSource = query.addDataSource(tableNum(HcmWorker));

        // Filter by active processes
        budgetPlanHeaderDataSource = hcmWorkerDataSource.addDataSource(tableNum(BudgetPlanHeader));
        budgetPlanHeaderDataSource.joinMode(JoinMode::ExistsJoin);
        budgetPlanHeaderDataSource.addLink(fieldNum(HcmWorker, RecId), fieldNum(BudgetPlanHeader, BudgetPlanPreparer));

        if (_budgetPlanningProcessRecId != 0)
        {
            budgetPlanHeaderDataSource.addRange(fieldNum(BudgetPlanHeader, BudgetPlanningProcess)).value(SysQuery::value(_budgetPlanningProcessRecId));
        }

        if (_budgetingOrganizationRecId != 0)
        {
            budgetPlanHeaderDataSource.addRange(fieldNum(BudgetPlanHeader, BudgetingOrganization)).value(SysQuery::value(_budgetingOrganizationRecId));
        }

        // Add the query to the lookup form
        referenceLookup.parmQuery(query);

        // Perform the lookup and return the selected record
        return referenceLookup.performFormLookup() as HcmWorker;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>