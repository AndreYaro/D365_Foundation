<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgJobRefCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgJobRefCost</c> class is used to calculate the cost for a single job reference, that is a
///    production, a project, or an indirect category.
/// </summary>
/// <remarks>
///    The cost is calculated by using the pay for the workers generated in time and attendance.
/// </remarks>
class JmgJobRefCost
{
    JmgJobRef       jobRef;
    boolean         costsCalculated;
    JmgStampTrans   calculatedCosts;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCosts</Name>
				<Source><![CDATA[
/// <summary>
///    Calculates the costs for the job reference.
/// </summary>
private void calculateCosts()
{
    JmgStampTrans   jmgStampTrans;

    calculatedCosts.setTmp();

    while select Worker, JobId, CostAbsence, CostBreak, CostFlexAdd, CostFlexSub, CostNormTime, CostOverTime, CostPayAdd, CostPayAddManual, Seconds
        from jmgStampTrans
        where jmgStampTrans.JobRef == jobRef
    {
        select firstonly calculatedCosts
            where calculatedCosts.Worker    == jmgStampTrans.Worker
                && calculatedCosts.JobId    == jmgStampTrans.JobId;

        calculatedCosts.Worker  = jmgStampTrans.Worker;
        calculatedCosts.JobId   = jmgStampTrans.JobId;
        calculatedCosts.Seconds += jmgStampTrans.Seconds;
        calculatedCosts.CostNormTime +=
            (jmgStampTrans.CostAbsence  +
            jmgStampTrans.CostBreak     +
            jmgStampTrans.CostFlexAdd   +
            jmgStampTrans.CostFlexSub   +
            jmgStampTrans.CostNormTime  +
            jmgStampTrans.CostOverTime  +
            jmgStampTrans.CostPayAdd    +
            jmgStampTrans.CostPayAddManual) * jmgStampTrans.Seconds / 3600;
        calculatedCosts.write();
    }
    costsCalculated = true;
}

]]></Source>
			</Method>
			<Method>
				<Name>getProdRouteTransCost</Name>
				<Source><![CDATA[
/// <summary>
///    Returns the cost to associate with the specified <c>ProdRouteTrans</c> record.
/// </summary>
/// <param name="_prodRouteTrans">
///    The <c>ProdRouteTrans</c> record for which to calculate cost.
/// </param>
/// <returns>
///    The cost calculated for the <c>ProdRouteTrans</c> record.
/// </returns>
public Amount getProdRouteTransCost(ProdRouteTrans _prodRouteTrans)
{
    if (!costsCalculated)
    {
        this.calculateCosts();
    }

    select firstonly CostNormTime, Seconds
        from calculatedCosts
        where calculatedCosts.Worker    == _prodRouteTrans.Worker
            && calculatedCosts.JobId    == this.prodRouteTransToJobId(_prodRouteTrans);
    if (calculatedCosts)
    {
        return calculatedCosts.CostNormTime / (calculatedCosts.Seconds / 3600) * _prodRouteTrans.Hours;
    }

    return _prodRouteTrans.Amount;
}

]]></Source>
			</Method>
			<Method>
				<Name>getProjAdjustmentTransCreateCost</Name>
				<Source><![CDATA[
/// <summary>
///    Returns the cost to associate to the specified <c>TmpProjAdjustmentCreate</c> record.
/// </summary>
/// <param name="_tmpProjAdjustmentCreate">
///    The <c>TmpProjAdjustmentCreate</c> record for which to calculate cost.
/// </param>
/// <returns>
///    The cost calculated for the <c>TmpProjAdjustmentCreate</c> record.
/// </returns>
public Amount getProjAdjustmentTransCreateCost(TmpProjAdjustmentCreate _tmpProjAdjustmentCreate)
{
    if (!costsCalculated)
    {
        this.calculateCosts();
    }

    select sum(CostNormTime), sum(Seconds)
        from calculatedCosts
        where calculatedCosts.Worker    == ResourceFacade::getWorker(_tmpProjAdjustmentCreate.Resource) &&
              calculatedCosts.JobId     == this.tmpProjAdjustmentCreateToJobId(_tmpProjAdjustmentCreate);

    if (calculatedCosts.Seconds != 0)
    {
        ProjQtyCost tmpProjAdjustCreateQty = _tmpProjAdjustmentCreate.priceQty();
        return calculatedCosts.CostNormTime / (calculatedCosts.Seconds / 3600) * (tmpProjAdjustCreateQty ? tmpProjAdjustCreateQty : 1);
    }
    return 0.0;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmJobRef</Name>
				<Source><![CDATA[
public JmgJobRef parmJobRef(JmgJobRef _value = jobRef)
{
    jobRef = _value;
    return jobRef;
}

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteTransToJobId</Name>
				<Source><![CDATA[
/// <summary>
///    Retrieves the job identification referred to by the specified <c>ProdRouteTrans</c> record.
/// </summary>
/// <param name="_prodRouteTrans">
///    The <c>ProdRouteTrans</c> record for which a job identification is found.
/// </param>
/// <returns>
///    The job identification to which the <c>ProdRouteTrans</c> record refers
/// </returns>
private JmgJobId prodRouteTransToJobId(ProdRouteTrans _prodRouteTrans)
{
    JmgJobId        jobId;
    ProdRouteJob    prodRouteJob;
    if (JmgProdParameters::find().StampLevel    == JmgStampLevel::Route)
    {
        if (_prodRouteTrans.JobType == RouteJobType::Setup)
        {
            jobId = _prodRouteTrans.prodRoute().JobIdSetup;
        }
        else if (_prodRouteTrans.JobType == RouteJobType::Process)
        {
            jobId = _prodRouteTrans.prodRoute().JobIdProcess;
        }
    }
    else
    {
        select firstonly JobId
            from prodRouteJob
            where prodRouteJob.ProdId       == _prodRouteTrans.TransRefId
                && prodRouteJob.OprNum      == _prodRouteTrans.OprNum
                && prodRouteJob.OprPriority == _prodRouteTrans.OprPriority
                && prodRouteJob.JobType     == _prodRouteTrans.JobType;
        jobId = prodRouteJob.JobId;
    }
    return jobId;
}

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjAdjustmentCreateToJobId</Name>
				<Source><![CDATA[
/// <summary>
///    Retrieves the job identification that is referred to by the specified
///    <c>TmpProjAdjustmentCreate</c> record.
/// </summary>
/// <param name="_tmpProjAdjustmentCreate">
///    The <c>TmpProjAdjustmentCreate</c> record for which a job identification is found.
/// </param>
/// <returns>
///    The job identification to which the <c>TmpProjAdjustmentCreate</c> record refers.
/// </returns>
private JmgJobId tmpProjAdjustmentCreateToJobId(TmpProjAdjustmentCreate _tmpProjAdjustmentCreate)
{
    JmgJobTable     jmgJobTable;
    if (_tmpProjAdjustmentCreate.ActivityNumber)
    {
        select firstonly JobId
            from jmgJobTable
            where jmgJobTable.ModuleRefId   == _tmpProjAdjustmentCreate.ProjId
                && jmgJobTable.OprActId     == _tmpProjAdjustmentCreate.ActivityNumber
                && jmgJobTable.Type         == JmgJobTableType::ProjActivity;
    }
    else
    {
        select firstonly jmgJobTable
            where jmgJobTable.ModuleRefId   == _tmpProjAdjustmentCreate.ProjId
                && jmgJobTable.Type         == JmgJobTableType::ProjProject;
    }
    return jmgJobTable.JobId;
}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
/// <summary>
/// Initializes a new instance of the <c>JmgJobRefCost</c> class.
/// </summary>
/// <param name="_jobRef">
/// The Job reference which is assigned to the <c>JmgJobRefCost</c> object.
/// </param>
/// <returns>
/// A new instance of the <c>JmgJobRefCost</c> class.
/// </returns>
/// <remarks>
///  Use the following procedure to customize or extend the
///  <c>
///  JmgJobRefCost
///  </c>
///   class.
///  <list type="number">
///   <item>
///    <description>
///    Create a new class that derives from the <c>JmgJobRefCost</c> class.
///    </description>
///   </item>
///   <item>
///    <description>
///    Overlayer the <c>construct</c> method on the <c>JmgJobRefCost</c> class so that it returns an
///    instance of the derived class.
///    </description>
///   </item>
///   <item>
///    <description>
///    Override the methods from the <c>JmgJobRefCost</c> class that you want to customize or extend in
///    your derived class.
///    </description>
///   </item>
///  </list>
///
///  This procedure helps make sure that your customizations are maintained if the base version of the
///  <c>
///  JmgJobRefCost
///  </c>
///   class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for static construct Methods" />
///  .
/// </remarks>
public static JmgJobRefCost construct(JmgJobRef _jobRef)
{
    JmgJobRefCost jmgJobRefCost = new JmgJobRefCost();
    jmgJobRefCost.parmJobRef(_jobRef);

    return jmgJobRefCost;
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>