<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostClosingRecalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostClosingRecalc</c> class is used to start a recalculation.
/// </summary>
/// <remarks>
///    The class is an inheritance of the
///    <c>
///       InventCostClosing
///    </c>
///     class. Items that must be calculated can be limited by a query. The class does the same tasks as
///    the super
///    <c>
///          InventCostClosing
///    </c>
///     class. The class does the following:
///    <list type="bullet">
///       <item>
///          <description>Creates the dialog concerning the inventory recalculation.</description>
///       </item>
///       <item>
///          <description>
///             Creates a record in the <c>InventCostList</c> table for each item that has to be calculated.
///          </description>
///       </item>
///       <item>
///          <description>
///             Creates a record in the <c>InventClosing</c> table to control that an inventory recalculation is
///             under progress.
///          </description>
///       </item>
///       <item>
///          <description>
///              Starts an instance of <c>inventCostHelp</c> class in order to calculate items in the
///             <c>InventCostList</c> table.
///          </description>
///       </item>
///    </list>
/// </remarks>
public class InventCostClosingRecalc extends InventCostClosing implements BatchRetryable
{
    // Parameters
    QueryRun                queryRun;

    #DEFINE.CurrentVersion(2)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkStdCostConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the closing date complies with incomplete standard cost conversions.
    /// </summary>
    /// <param name="_transDate">
    /// The inventory closing date.
    /// </param>
    /// <returns>
    /// true if the closing date is valid according to any incomplete standard cost conversions; otherwise,
    /// false.
    /// </returns>
    protected boolean checkStdCostConversion(TransDate _transDate)
    {
        boolean ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventCostListRecordSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the initial work list for the recalculation.
    /// </summary>
    protected void createInventCostListRecordSet()
    {
        // If the query contains ranges or filters we need to create the InventCostList based on executing the query
        // Filters could exist if the user has changed the query in the query form UI
        if (SysQuery::queryHasRangesOrFilters(queryRun.query()))
        {
            // Build InventCostList using query with ranges
            this.createInventCostList();
        }
        else
        {
            // Build InventCostList using insert_recordset
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCancelRecalculation</Name>
				<Source><![CDATA[
    protected boolean enableCancelRecalculation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record is found by the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        runRecalculation    = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        queryRun = new QueryRun(queryStr(InventAdj_ClosingRecalc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion, queryRun.pack(), super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a <c>QueryRun</c>, which is used by the query prompt.
    /// </summary>
    /// <returns>
    ///    A <c>QueryRun</c>, which is used by the query prompt.
    /// </returns>
    /// <remarks>
    ///    This method is used when a query prompt is the dialog and when a Select_@SYS2245 menu item is added
    ///    to a dialog.Do not instantiate the <c>queryRun</c> whenever the method is called. This should be
    ///    done in the <c>unpack</c>, <c>initParmDefault</c>, or <c>init</c> methods (if this is used) or in
    ///    the method only when it is not instantiated.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCancelRecalculation</Name>
				<Source><![CDATA[
    protected boolean showCancelRecalculation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    true.
    /// </returns>
    /// <remarks>
    ///    If you press this button it will show the query form. Therefore the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c>.
    /// </remarks>
    boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showRunRecalculation</Name>
				<Source><![CDATA[
    protected boolean showRunRecalculation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        Integer         version     = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedQuery, base] = packedClass;
                if (packedQuery && conLen(packedQuery) == 1)
                {
                    queryRun = new QueryRun(packedQuery);
                }

                return super(base);

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventCostClosing construct(InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        var factoryAttr = new InventTransCurrencyFactoryAttribute(_inventTransCurrency);
        var instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(InventCostClosingRecalc), factoryAttr);

        if (instance == null)
        {
            instance = new InventCostClosingRecalc();
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    static ClassDescription description()
    {
        return "@SYS63288";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        ItemId                      itemId;
        InventCostClosingRecalc     closingRecalc;
        InventTransCurrency_RU      inventTransCurrency = InventCostClosing::callerInventTransCurrency_RU(args);

        if (args && args.caller() && args.dataset())
        {
            FieldId id = fieldName2id(args.dataset(),fieldStr(InventTable,ItemId));
            if (id)
            {
                itemId = args.record().(id);
            }
            else
            {
                itemId = '';
            }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            closingRecalc = InventCostClosingRecalc::newParameters(itemId,dateNull(), "", inventTransCurrency);
        }
        else
        {
            closingRecalc = InventCostClosingRecalc::newParameters(itemId,dateNull(),"");
        }

        if (! closingRecalc.prompt())
        {
            return;
        }

        closingRecalc.runOperation();

        if (args && args.caller() && args.dataset() == tableNum(InventClosing))
        {
            InventClosing inventClosing = args.record();
            FormDataSource fd = FormDataUtil::getFormDataSource(inventClosing);

            if (fd)
            {
                args.lookupRecord(closingRecalc.inventClosing());
                fd.research(false);
                InventClosingLog::showLog(inventClosing.TransDate,inventClosing.Voucher);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventClosing</Name>
				<Source><![CDATA[
    public static InventCostClosingRecalc newInventClosing(InventClosing _inventClosing)
    {
        InventCostClosingRecalc closingRecalc = InventCostClosingRecalc::construct(_inventClosing.InventTransCurrency_RU);

        closingRecalc.initParmDefault();
        closingRecalc.parmAdjustmentType(InventAdjustmentType::Recalculation);
        closingRecalc.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        closingRecalc.parmUpdateLedger(_inventClosing.Ledger);
        closingRecalc.parmCancelRecalculation(_inventClosing.CancelRecalculation);
        closingRecalc.parmSpecification(_inventClosing.AdjustmentSpec);
        closingRecalc.parmProdJournal(_inventClosing.ProdJournal);
        closingRecalc.parmFreeTxt(_inventClosing.Notes);
        closingRecalc.parmMaxIterations(_inventClosing.MaxIterations);
        closingRecalc.parmMinTransferValue(_inventClosing.MinTransferValue);
        closingRecalc.parmInventTransCurrency_RU(_inventClosing.InventTransCurrency_RU);

        return closingRecalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static InventCostClosingRecalc newParameters(
        ItemId                 _itemId          = '',
        TransDate              _dateClose       = dateNull(),
        FreeTxt                _freeTxt         = "",
        InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur
        )
    {
        InventCostClosingRecalc closingRecalc = InventCostClosingRecalc::construct(_inventTransCurrency);

        closingRecalc.getLast();
        closingRecalc.parmAdjustmentType(InventAdjustmentType::Recalculation);
        closingRecalc.parmTransDate(_dateClose ? _dateClose : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        closingRecalc.parmFreeTxt(_freeTxt);

        closingRecalc.parmInventTransCurrency_RU(_inventTransCurrency);

        if (_itemId)
        {
            closingRecalc.queryRun().reset();

            QueryBuildRange qbr = SysQuery::findOrCreateRange(closingRecalc.queryRun().query().dataSourceTable(tableNum(InventTable)), fieldNum(InventTable,ItemId));
            qbr.value(queryValue(_itemId));
        }
        return closingRecalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closingDialogLabel</Name>
				<Source><![CDATA[
    protected str closingDialogLabel()
    {
        return "@SYS7170";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateHelp</Name>
				<Source><![CDATA[
    protected str transDateHelp()
    {
        return "@SYS63290";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateLabel</Name>
				<Source><![CDATA[
    protected str transDateLabel()
    {
        return "@SYS63289";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>