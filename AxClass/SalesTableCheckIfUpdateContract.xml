<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableCheckIfUpdateContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTableCheckIfUpdateContract</c> class is used as the data contract class for the
/// <c>SalesTable.checkIfUpdate</c> method.
/// </summary>
class SalesTableCheckIfUpdateContract
implements SysPackable
{
    boolean checkConfirmation;
    boolean checkPickingList;
    boolean checkPackingSlip;
    boolean checkInvoice;
    boolean checkPickingListRegistration;
    boolean checkProjectPackingSlip;

    // <GEERU>
    boolean checkInvoice4Paym;
    boolean checkFacture;
    boolean checkCommFacture;
    // </GEERU>

    // <GBR>
    boolean checkDeliverySlip_BR;
    boolean checkFiscalDocumentText_BR;
    // </GBR>

    // <GEERU>
    #isoCountryRegionCodes
    // </GEERU>

    // <GBR>
    #localmacro.List1
        checkConfirmation,
        checkPickingList,
        checkPackingSlip,
        checkInvoice,
        checkPickingListRegistration,
        checkProjectPackingSlip
    #endmacro
    // </GBR>

    // <GBR>
    #localmacro.List2
        checkConfirmation,
        checkPickingList,
        checkPackingSlip,
        checkInvoice,
        checkPickingListRegistration,
        checkProjectPackingSlip
        ,checkInvoice4Paym
        ,checkFacture
    #endmacro
    // </GBR>

    #localmacro.List3
        checkConfirmation,
        checkPickingList,
        checkPackingSlip,
        checkInvoice,
        checkPickingListRegistration,
        checkProjectPackingSlip
        // <GEERU>
        ,checkInvoice4Paym
        ,checkFacture
        // </GEERU>
        // <GBR>
        ,checkDeliverySlip_BR
        ,checkFiscalDocumentText_BR
        // </GBR>
    #endmacro

    #define.CurrentVersion(4)

    #localmacro.CurrentList
        checkConfirmation,
        checkPickingList,
        checkPackingSlip,
        checkInvoice,
        checkPickingListRegistration,
        checkProjectPackingSlip
        // <GEERU>
        ,checkInvoice4Paym
        ,checkFacture
        // </GEERU>
        // <GBR>
        ,checkDeliverySlip_BR
        ,checkFiscalDocumentText_BR
        // </GBR>
        // <GEERU>
        ,checkCommFacture
        // <GEERU>
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckCommFacture_RU</Name>
				<Source><![CDATA[
    public boolean parmCheckCommFacture_RU(boolean _checkCommFacture = checkCommFacture)
    {
        checkCommFacture = _checkCommFacture;
        return checkCommFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckConfirmation</Name>
				<Source><![CDATA[
    public  boolean parmCheckConfirmation(boolean _checkConfirmation = checkConfirmation)
    {
        checkConfirmation = _checkConfirmation;
        return checkConfirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckDeliverySlip_BR</Name>
				<Source><![CDATA[
    public Boolean parmCheckDeliverySlip_BR(Boolean _checkDeliverySlip_BR = checkDeliverySlip_BR)
    {
        checkDeliverySlip_BR = _checkDeliverySlip_BR;
        return checkDeliverySlip_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckFacture_RU</Name>
				<Source><![CDATA[
    public  boolean parmCheckFacture_RU(boolean _checkFacture = checkFacture)
    {
        checkFacture = _checkFacture;
        return checkFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckFiscalDocumentText_BR</Name>
				<Source><![CDATA[
    public Boolean parmCheckFiscalDocumentText_BR(Boolean _checkFiscalDocumentText_BR = checkFiscalDocumentText_BR)
    {
        checkFiscalDocumentText_BR = _checkFiscalDocumentText_BR;
        return checkFiscalDocumentText_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckInvoice</Name>
				<Source><![CDATA[
    public boolean parmCheckInvoice(boolean _checkInvoice = checkInvoice)
    {
        checkInvoice = _checkInvoice;
        return checkInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckInvoice4Paym_RU</Name>
				<Source><![CDATA[
    public  boolean parmCheckInvoice4Paym_RU(boolean _checkInvoice4Paym = checkInvoice4Paym)
    {
        checkInvoice4Paym = _checkInvoice4Paym;
        return checkInvoice4Paym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckPackingSlip</Name>
				<Source><![CDATA[
    public  boolean parmCheckPackingSlip(boolean _checkPackingSlip = checkPackingSlip)
    {
        checkPackingSlip = _checkPackingSlip;
        return checkPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckPickingList</Name>
				<Source><![CDATA[
    public  boolean parmCheckPickingList(boolean _checkPickingList = checkPickingList)
    {
        checkPickingList = _checkPickingList;
        return checkPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckPickingListRegistration</Name>
				<Source><![CDATA[
    public boolean parmCheckPickingListRegistration(boolean _checkPickingListRegistration = checkPickingListRegistration)
    {
        checkPickingListRegistration = _checkPickingListRegistration;
        return checkPickingListRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckProjectPackingSlip</Name>
				<Source><![CDATA[
        public boolean parmCheckProjectPackingSlip(boolean _checkProjectPackingSlip = checkProjectPackingSlip)
    {
        checkProjectPackingSlip = _checkProjectPackingSlip;
        return checkProjectPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            // <GBR>
            case 1:
                [version,#List1] = _packedClass;
                return true;
            case 2:
                [version,#List2] = _packedClass;
                return true;
            // </GBR>
            case 3:
                [version,#List3] = _packedClass;
                return true;
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public SalesTableCheckIfUpdateContract construct()
    {
        return new SalesTableCheckIfUpdateContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>SalesTableCheckIfUpdateContract</c> class that is based on a
    /// container from a prior call to the <c>SalesTableCheckIfUpdate.pack</c> method.
    /// </summary>
    /// <param name="_packedClass">
    /// A container that contains the packed class.
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesTableCheckIfUpdateContract</c> class, which is identical to the one that
    /// was packed into the <paramref name="_packedClass" /> parameter.
    /// </returns>
    static public SalesTableCheckIfUpdateContract create(container _packedClass)
    {
        SalesTableCheckIfUpdateContract salesTableCheckIfUpdateContract = SalesTableCheckIfUpdateContract::construct();
        salesTableCheckIfUpdateContract.unpack(_packedClass);
        return salesTableCheckIfUpdateContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCheckAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>SalesTableCheckIfUpdateContract</c> class and sets all check parameters to true.
    /// </summary>
    /// <returns>
    /// An instance of the <c>SalesTableCheckIfUpdateContract</c> class.
    /// </returns>
    static public SalesTableCheckIfUpdateContract newCheckAll()
    {
        SalesTableCheckIfUpdateContract salesTableCheckIfUpdateContract = SalesTableCheckIfUpdateContract::construct();
        salesTableCheckIfUpdateContract.parmCheckConfirmation(true);
        salesTableCheckIfUpdateContract.parmCheckInvoice(true);
        salesTableCheckIfUpdateContract.parmCheckPackingSlip(true);
        salesTableCheckIfUpdateContract.parmCheckPickingList(true);
        salesTableCheckIfUpdateContract.parmCheckPickingListRegistration(true);
        salesTableCheckIfUpdateContract.parmCheckProjectPackingSlip(true);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            salesTableCheckIfUpdateContract.parmCheckInvoice4Paym_RU(true);
            salesTableCheckIfUpdateContract.parmCheckFacture_RU(true);
             salesTableCheckIfUpdateContract.parmCheckCommFacture_RU(true);
        }
        // </GEERU>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            salesTableCheckIfUpdateContract.parmCheckDeliverySlip_BR(true);
            salesTableCheckIfUpdateContract.parmCheckFiscalDocumentText_BR(true);
        }
        // </GBR>

        return salesTableCheckIfUpdateContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>