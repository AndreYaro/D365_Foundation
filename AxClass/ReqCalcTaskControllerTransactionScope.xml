<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcTaskControllerTransactionScope</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents a transaction in the user connection in ReqCalcTaskController.
/// 
/// Use this in an "using" statement for simplify management of this transaction.
/// </summary>
class ReqCalcTaskControllerTransactionScope implements System.IDisposable
{
    private ReqCalcTaskController parent;
    private boolean markedForRollback = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(ReqCalcTaskController _parent) {
        this.parent = _parent;
        parent.startTransactionInternal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markForCommit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks this transaction as "to be committed", so that it's committed instead of rolled back when this object is disposed.
    /// </summary>
    [Hookable(false)]
    public void markForCommit() {
        this.markedForRollback = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the resources used by the <c>ReqCalcTaskControllerTransactionScope</c> class.
    /// </summary>
    [Hookable(false)]
    public void Dispose()
    {
        if (markedForRollback)
        {
            // We usually rollback only after an exception has happened inside the using statement. 
            // In that case we don't want the abort transaction to be causing further exceptions, we only want to propagate the original one.
            try
            {
                parent.abortTransaction();
            }
            catch
            {
            }
        }
        else
        {
            parent.endTransaction();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>