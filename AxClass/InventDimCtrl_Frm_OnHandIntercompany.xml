<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_OnHandIntercompany</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimCtrl_Frm_OnHandIntercompany</c> class controls inventory dimension controls on the Intercompany on-hand form.
/// </summary>
/// <remarks>All field IDs in this class are based on the <c>IntercompanyInventDim</c> table, whereas base classes uses the <c>InventDim</c> table.</remarks>
class InventDimCtrl_Frm_OnHandIntercompany extends InventDimCtrl_Frm_OnHand
{
    #DEFINE.CompanyFlag(6)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dim2dimParm</Name>
				<Source><![CDATA[
    protected FieldId dim2dimParm(FieldId _fieldId)
    {
        if (_fieldId == fieldNum(InterCompanyInventDim, TableId))
        {
            return _fieldId;
        }
        return InterCompanyInventDim::dim2dimParm(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectControls</Name>
				<Source><![CDATA[
    protected void collectControls(Set _validDataSources = null)
    {
        inventDimControls = InventDimControlsCollect_FrmTmp::newFromFormInterfaceValidDataSources(callingElement, _validDataSources);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFields</Name>
				<Source><![CDATA[
    protected List dimFields()
    {
        if (!dimFields)
        {
            dimFields = InterCompanyInventDim::dimFieldList();
        }
        return dimFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimParmEnabled</Name>
				<Source><![CDATA[
    public InventDimParm initDimParmEnabled()
    {
        this.clearDimParmBuffer(dimParmEnabled);

        if (this.parmProductDimensionGroup())
        {
            InventDimGroupFieldSetupEnumerator enumerator = this.inventDimGroupSetup().getFieldSetupEnumerator();
            while (enumerator.moveNext())
            {
                InventDimGroupFieldSetup inventDimGroupFieldSetup = enumerator.current();
                FieldId inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

                if (inventDimGroupFieldSetup.isActive())
                {
                    FieldId dimParmFieldId = this.dim2dimParm(inventDimFieldId);
                    dimParmEnabled.(dimParmFieldId) = this.mustEnableField(inventDimFieldId);
                }
            }
        }
        return dimParmEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryInventDim</Name>
				<Source><![CDATA[
    public void initQueryInventDim(FormDataSource _inventDim_DS)
    {
        InterCompanyInventDim::formQueryAddDynalink(_inventDim_DS, callingElement.args());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryInventSum</Name>
				<Source><![CDATA[
    public void initQueryInventSum(FormDataSource _inventSum_DS)
    {
        if (this.movement())
        {
            Query query = new Query();
            QueryBuildDataSource qbs = query.addDataSource(tableNum(InterCompanyInventSum));
            qbs.name(_inventSum_DS.name());

            _inventSum_DS.query(query);
            _inventSum_DS.query().dataSourceTable(tableNum(InterCompanyInventSum)).clearLinks();
        }

        if (fieldName2id(callingElement.args().dataset(),fieldStr(InventTrans,ItemId)))
        {
            _inventSum_DS.query().dataSourceTable(tableNum(InterCompanyInventSum)).addDynalink(
                fieldNum(InterCompanyInventSum, ItemId),
                callingElement.args().record(),
                fieldName2id(callingElement.args().dataset(),fieldStr(InventTrans,ItemId)));
        }

        InterCompanyInventSum::queryAddSumFields(_inventSum_DS.query().dataSourceTable(tableNum(InterCompanyInventSum)));
        _inventSum_DS.query().forceNestedLoop(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    public void modifyQuery(
        FormDataSource  _inventSum_DS,
        FormDataSource  _inventDim_DS)
    {
        #Query
        Query                   query        = _inventSum_DS.query();
        InventDimParm           inventDimParmRange;
        xSession                xSession = new xSession();

        QueryBuildDataSource qbsSum = query.dataSourceName(_inventSum_DS.name());

        boolean doHint = InterCompanyInventSum::queryAddHintFromCaller(qbsSum,callingElement.args());

        query.clearGroupBy();

        QueryBuildRange criteriaSession = qbsSum.findRange(fieldNum(InterCompanyInventSum,SessionId));
        if (!criteriaSession)
        {
            criteriaSession = qbsSum.addRange(fieldNum(InterCompanyInventSum,SessionId));
        }
        criteriaSession.value(queryValue(xSession.sessionId()));
        criteriaSession.status(RangeStatus::Hidden);

        qbsSum.addGroupByField(fieldNum(InterCompanyInventSum,ItemId));

        if (dimParmVisibleGrid.CompanyFlag)
        {
            qbsSum.addGroupByField(fieldNum(InterCompanyInventSum,InterCompanyCompanyId));
        }

        QueryBuildRange criteriaClosed = qbsSum.findRange(fieldNum(InterCompanyInventSum,Closed));
        if (!criteriaClosed)
        {
            criteriaClosed = qbsSum.addRange(fieldNum(InterCompanyInventSum,Closed));
        }

        if (dimParmVisibleGrid.ClosedFlag)
        {
            criteriaClosed.value('');
        }
        else
        {
            criteriaClosed.value(queryValue(NoYes::No));
        }

        QueryBuildRange criteriaClosedQty = qbsSum.findRange(fieldNum(InterCompanyInventSum,ClosedQty));
        if (!criteriaClosedQty)
        {
            criteriaClosedQty = qbsSum.addRange(fieldNum(InterCompanyInventSum,ClosedQty));
        }

        if (dimParmVisibleGrid.ClosedQtyFlag)
        {
            criteriaClosedQty.value(queryValue(NoYes::No));
        }
        else
        {
            criteriaClosedQty.value('');
        }

        QueryBuildDataSource qbsDim = query.dataSourceName(_inventDim_DS.name());

        doHint = InterCompanyInventDim::queryAddHintFromCaller(qbsDim,callingElement.args()) && doHint;

        qbsDim.addGroupByField(fieldNum(InterCompanyInventDim,SessionId));

        InventDimParm inventDimParmGroupBy = InventDimParm::orParms(dimParmLockedRightClick, dimParmVisibleGrid);
        inventDimParmGroupBy.queryAddGroupByFieldInterCompany(qbsDim);

        if (! doHint && ! inventDimParmRange.isFlagSelective() && ! dimParmVisibleGrid.ClosedFlag)
        {
            query.forceNestedLoop(true);
            query.forceSelectOrder(true);

            qbsSum.addSortIndex(indexNum(InterCompanyInventSum,ClosedItemDimIdx));
            qbsSum.indexIsHint(true);

            qbsDim.addSortIndex(indexNum(InterCompanyInventDim,DimIdIdx));
            qbsDim.indexIsHint(true);

            doHint = true;
        }

        if (doHint)
        {
            query.literals(#QueryForcePlaceholders);
        }
        else
        {
            query.literals(#QueryLiteralsDefault);
            query.forceSelectOrder(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableDimensionInCurrentCountryContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified inventory dimension can be enabled in the current country context.
    /// </summary>
    /// <param name="_fieldId">The ID of the inventory dimension field.</param>
    /// <returns>true, if the inventory dimension can be enabled; otherwise, false.</returns>
    /// <remarks>This method can be overridden in the child classes to modify the result of the <c>mustEnableField</c> and <c>canEnableField</c> methods.</remarks>
    protected boolean canEnableDimensionInCurrentCountryContext(FieldId _fieldId)
    {
        if (_fieldId == fieldNum(InterCompanyInventDim, InventOwnerId_RU))
        {
            #ISOCountryRegionCodes
            return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentVersion,InventDimCtrl_Frm_OnHandIntercompany::packDimParm(dimParmVisibleGrid)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowCompany</Name>
				<Source><![CDATA[
    public boolean parmShowCompany(boolean _showCompany = dimParmVisibleGrid.CompanyFlag)
    {
        dimParmVisibleGrid.CompanyFlag = _showCompany;

        return dimParmVisibleGrid.CompanyFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container   c;

        if (overRideUserSetup || !_packedClass)
        {
            return false;
        }

        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,c] = _packedClass;
                if (! c)
                {
                    return false;
                }

                InventDimCtrl_Frm_OnHandIntercompany::unpackDimParm(dimParmVisibleGrid,c);
                break;

            default:
                return false;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Frm_OnHandIntercompany construct()
    {
        return new InventDimCtrl_Frm_OnHandIntercompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class that will be used in forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained
    /// </param>
    /// <returns>
    ///    An instance of this class that will be used in a form.
    /// </returns>
    public static InventDimCtrl_Frm_OnHandIntercompany newFromForm(FormRun _formRun)
    {
        InventDimCtrl_Frm_OnHandIntercompany    inventDimCtrl = InventDimCtrl_Frm_OnHandIntercompany::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packDimParm</Name>
				<Source><![CDATA[
    static public container packDimParm(InventDimParm _dimParmVisibleGrid)
    {
        return [#currentVersion,InventDimFixedClass::inventDimParm2InventDimFixed(_dimParmVisibleGrid),
                _dimParmVisibleGrid.ItemIdFlag,
                _dimParmVisibleGrid.ClosedFlag,
                _dimParmVisibleGrid.ClosedQtyFlag,
                _dimParmVisibleGrid.CompanyFlag
                ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackDimParm</Name>
				<Source><![CDATA[
    static public void unpackDimParm(
        InventDimParm   _dimParmVisibleGrid,
        container       _c)
    {
        InventDimFixedClass::inventDimFixed2InventDimParm(conPeek(_c,#FixedDimensions),_dimParmVisibleGrid);
        _dimParmVisibleGrid.ItemIdFlag      = conPeek(_c,#ItemIdFlag);
        _dimParmVisibleGrid.ClosedFlag      = conPeek(_c,#ClosedFlag);
        _dimParmVisibleGrid.ClosedQtyFlag   = conPeek(_c,#ClosedQtyFlag);
        _dimParmVisibleGrid.CompanyFlag     = conPeek(_c,#CompanyFlag);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
