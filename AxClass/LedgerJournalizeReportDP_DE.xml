<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalizeReportDP_DE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report Data Provider class for <c>LedgerJournalizeReport_DE</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the RDP class for the <c>LedgerJournalizeReport_DE</c> SSRS Report.
/// </remarks>
[SRSReportQueryAttribute(queryStr(LedgerJournalizeReport_DE)),
SRSReportParameterAttribute(classStr(LedgerJournalizeReportContract_DE))]
public class LedgerJournalizeReportDP_DE extends SrsReportDataProviderPreProcessTempDB
{
    private LedgerJournalizeReportTmp_DE ledgerJournalizeReportTmp_DE;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerJournalizeReportTmp_DE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>LedgerJournalizeReportTmp_DE</c> temporary table.
    /// </summary>
    /// <returns>
    /// Data from the <c>LedgerJournalizeReportTmp_DE</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(LedgerJournalizeReportTmp_DE))]
    public LedgerJournalizeReportTmp_DE getLedgerJournalizeReportTmp_DE()
    {
        return ledgerJournalizeReportTmp_DE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCodesForAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax codes for a specified account.
    /// </summary>
    /// <param name="_mainAccountNum">
    /// The  account number for the account.
    /// </param>
    /// <param name="_voucherNumber">
    /// The voucher number for the account..
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <returns>
    /// The tax codes for the specified account.
    /// </returns>
    public container getTaxCodesForAccount(MainAccountNum  _mainAccountNum, Num _voucherNumber, TransDate _accountingDate)
    {
        TaxTrans taxTrans;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntryTax;
        GeneralJournalAccountEntry generalJournalAccountEntryTax;
        MainAccount mainAccount;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        container taxTransList = conNull();

        while select TaxCode, TaxDirection, sum(TaxAmount) from taxTrans
            group by taxTrans.TaxCode, taxTrans.TaxDirection
				where taxTrans.Voucher == _voucherNumber
					&& taxTrans.TransDate == _accountingDate
            join GeneralJournalAccountEntry, LedgerDimension from taxTransGeneralJournalAccountEntryTax
                where taxTrans.RecId == taxTransGeneralJournalAccountEntryTax.TaxTrans
					&& (taxTransGeneralJournalAccountEntryTax.TaxTransRelationship == TaxTransRelationshipType::Tax
						|| taxTransGeneralJournalAccountEntryTax.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount)
            outer join LedgerDimension from generalJournalAccountEntryTax
                where generalJournalAccountEntryTax.RecId == taxTransGeneralJournalAccountEntryTax.GeneralJournalAccountEntry
            join MainAccount from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == generalJournalAccountEntryTax.LedgerDimension
					|| dimensionAttributeValueCombination.RecId == taxTransGeneralJournalAccountEntryTax.LedgerDimension
            join RecId from mainAccount
				where mainAccount.MainAccountId == _mainAccountNum
					&& mainAccount.RecId == dimensionAttributeValueCombination.MainAccount

        {
            taxTransList += taxTrans;
        }

        return taxTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic.This method will be called by SSRS at
    /// runtime.The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        LedgerJournalizeReportContract_DE   contract = this.parmDataContract() as LedgerJournalizeReportContract_DE;

        Query query = new Query(this.parmQuery());

        LedgerJournalizeNum journal = contract.parmJournalizeNum();

        if (journal)
        {
            QueryBuildDataSource dataSource = query.dataSourceTable(tableNum(LedgerEntryJournalizing));
            SysQuery::findOrCreateRange(dataSource, fieldNum(LedgerEntryJournalizing, Journal))
                .value(queryValue(journal));
        }

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            GeneralJournalAccountEntry generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry));
            GeneralJournalEntry generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry));
            LedgerEntryJournalizing ledgerEntryJournalizing = queryRun.get(tableNum(LedgerEntryJournalizing));
            SubledgerVoucherGeneralJournalEntry voucherLink = queryRun.get(tableNum(SubledgerVoucherGeneralJournalEntry));
            MainAccountLedgerDimensionView mainAccountLedgerDimensionView = queryRun.get(tableNum(MainAccountLedgerDimensionView));

            this.insertIntoTempTable(
                generalJournalAccountEntry,
                generalJournalEntry,
                ledgerEntryJournalizing,
                voucherLink,
                mainAccountLedgerDimensionView);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into the <c>ledgerJournalizeReportTmp_DE</c> temporary table.
    /// </summary>
    public void insertIntoTempTable(
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        GeneralJournalEntry _generalJournalEntry,
        LedgerEntryJournalizing _ledgerEntryJournalizing,
        SubledgerVoucherGeneralJournalEntry _voucherLink,
        MainAccountLedgerDimensionView _mainAccountLedgerDimensionView)
    {
        ledgerJournalizeReportTmp_DE.clear();
        ledgerJournalizeReportTmp_DE.TransactionCurrencyAmount = _generalJournalAccountEntry.TransactionCurrencyAmount;
        ledgerJournalizeReportTmp_DE.TransactionCurrencyCode = _generalJournalAccountEntry.TransactionCurrencyCode;
        ledgerJournalizeReportTmp_DE.FunctionalCurrencyAmount = _generalJournalAccountEntry.AccountingCurrencyAmount;
        ledgerJournalizeReportTmp_DE.AccountNum = _mainAccountLedgerDimensionView.FullyQualifiedAccount;
        ledgerJournalizeReportTmp_DE.JournalNumber = _voucherLink.Voucher;
        ledgerJournalizeReportTmp_DE.AccountingDate = _generalJournalEntry.AccountingDate;
        ledgerJournalizeReportTmp_DE.Journal = _generalJournalEntry.JournalNumber;
        ledgerJournalizeReportTmp_DE.SequenceNumber = _ledgerEntryJournalizing.SequenceNumber;
        ledgerJournalizeReportTmp_DE.Quantity = _generalJournalAccountEntry.Quantity;
        ledgerJournalizeReportTmp_DE.Text = _generalJournalAccountEntry.Text;
        ledgerJournalizeReportTmp_DE.IsCredit = _generalJournalAccountEntry.IsCredit;
        ledgerJournalizeReportTmp_DE.TaxDirection = -1;

        container taxTransList = this.getTaxCodesForAccount(
            _mainAccountLedgerDimensionView.MainAccount, _voucherLink.Voucher, _generalJournalEntry.AccountingDate);

        if (taxTransList == conNull())
        {
            ledgerJournalizeReportTmp_DE.insert();
        }
        else
        {
            //insert tax code information, first line contains transaction info and first tax code info
            //several lines will be inserted in case of several tax codes - second and rest tax codes are shown on new lines without transaction info
            for (int i = 1; i <= conLen(taxTransList); i++)
            {
                TaxTrans taxTrans = conPeek(taxTransList, i);

                if (LedgerJournalizeReportDP_DEClearForMultipleTaxLinesFlight::instance().isEnabled())
                {
                    if (i > 1)
                    {
                        // When there are multiple tax transaction lines, 
                        // all information except sequence number, accounting date, and tax information are cleared. 
                        ledgerJournalizeReportTmp_DE.clear();
                        ledgerJournalizeReportTmp_DE.SequenceNumber = _ledgerEntryJournalizing.SequenceNumber;
                        ledgerJournalizeReportTmp_DE.AccountingDate = _generalJournalEntry.AccountingDate;

                    }
                }

                ledgerJournalizeReportTmp_DE.TaxCode = taxTrans.TaxCode;
                ledgerJournalizeReportTmp_DE.TaxAmount = taxTrans.TaxAmount;
                ledgerJournalizeReportTmp_DE.TaxDirection = taxTrans.TaxDirection;
                ledgerJournalizeReportTmp_DE.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>