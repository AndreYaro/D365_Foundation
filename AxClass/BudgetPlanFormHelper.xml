<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains methods widely used throughout the budget planning domain.
/// </summary>
public class BudgetPlanFormHelper
{
    BudgetPlanHeader budgetPlanHeader;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBudgetPlanHeader</Name>
				<Source><![CDATA[
    public BudgetPlanHeader parmBudgetPlanHeader(BudgetPlanHeader _budgetPlanHeader = budgetPlanHeader)
    {
        budgetPlanHeader = _budgetPlanHeader;
        return budgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanFormHelper construct()
    {
        return new BudgetPlanFormHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the DocuAttachment form with the context of the object instances' <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <param name = "_attachButton"> The <c>FormCommandButtonControl</c> object that fired the event. </param>
    public void attachButtonClicked(FormCommandButtonControl  _attachButton)
    {
        BudgetPlanFormHelper::openDialogFormByMenuItem(MenuItemType::Display, menuItemDisplayStr(DocuAttachment), this, budgetPlanHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefLookupRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the reference form for the specified lookup record.
    /// </summary>
    /// <param name="_lookupRecord">
    ///    The lookup record that is referenced by the caller.
    /// </param>
    /// <param name="_caller">
    ///    The form object that is calling the reference form.
    /// </param>
    public static void jumpRefLookupRecord(
        Common _lookupRecord,
        Object _caller)
    {
        if (_lookupRecord)
        {
            MenuItemNameDisplay formRef = new DictTable(_lookupRecord.TableId).formRef();

            if (formRef)
            {
                MenuFunction menuFunction = new MenuFunction(formRef, MenuItemType::Display);

                Args args = new Args();
                args.caller(_caller);
                args.lookupRecord(_lookupRecord);

                menuFunction.run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefFilterForecastPosition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Filters the reference form for the specified lookup record.
    /// </summary>
    /// <param name="_lookupRecord">
    ///     The lookup record that is referenced by the caller.
    /// </param>
    /// <param name="_caller">
    ///     The form object that is calling the reference form.
    /// </param>
    /// <param name = "_budgetPlanningProcessRecId">
    ///     The <c>BudgetPlanningProcess</c> record ID to further filter the
    ///     <c>HcmPositionForecast</c> records displayed.
    /// </param>
    public static void jumpRefFilterForecastPosition(
        HcmPositionForecast         _positionForecastLookupRecord,
        Object                      _caller,
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId)
    {
        if (_positionForecastLookupRecord && _caller && _budgetPlanningProcessRecId)
        {
            MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(HcmPositionForecastList), MenuItemType::Display);

            Args args = new Args();
            args.caller(_caller);
            args.record(_positionForecastLookupRecord);
            args.parm(int642str(_budgetPlanningProcessRecId));

            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openDialogForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the dialog form.
    /// </summary>
    /// <param name = "_formName">
    /// The name of the form to open.
    /// </param>
    /// <param name = "_common">
    /// The buffer that is passed as a record in the opening form.
    /// </param>
    /// <param name = "_parameter">
    /// An optional parameter to pass to the calling form.
    /// </param>
    public static void openDialogForm(
        str     _formName,
        Common  _common,
        str     _parameter = BudgetPlanningConstants::emptyString)
    {
        Args    args;
        Form    formToOpen;
        FormRun formRun;

        formToOpen = new Form(_formName);
        args = new Args();
        args.object(formToOpen);
        args.record(_common);
        args.parm(_parameter);

        // Calling the dialog form.
        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openDialogFormByMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the dialog form using the passed-in menu item name.
    /// </summary>
    /// <param name = "_menuItemType">
    /// The type of the menu item to open.
    /// </param>
    /// <param name = "_formName">
    /// The name of the menu item to open.
    /// </param>
    /// <param name="_caller">
    /// The object to pass to the form.
    /// </param>
    /// <param name = "_common">
    /// The buffer that is passed as a record in the opening form; optional.
    /// </param>
    /// <param name = "_create">
    /// Boolean flag to run the record creation task; optional.
    /// </param>
    public static void openDialogFormByMenuItem(
        MenuItemType    _menuItemType,
        MenuItemName    _menuItemName,
        Object          _caller,
        Common          _common = null,
        boolean         _create = false,
        Object          _object = null)
    {
        Args args = new Args();

        if (_object)
        {
            args.parmObject(_object);
        }
        else
        {
            args.parmObject(_caller);
        }

        args.caller(_caller);
        args.record(_common);

        MenuFunction menuFunction = new MenuFunction(_menuItemName, _menuItemType);

        if (menuFunction)
        {
            switch (_menuItemType)
            {
                case MenuItemType::Display:
                case MenuItemType::Action:
                    menuFunction.run(args);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLookupControlFilledIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the given <c>FormControl</c>.
    /// </summary>
    /// <param name = "_formControl">Form control to validate.</param>
    /// <remarks>This method currently only validates <c>FormReferenceGroupControl</c> and <c>FormStringControl</c> lookup object types.</remarks>
    public static void validateLookupControlFilledIn(FormControl _formControl)
    {
        boolean isValid     = true;
        str     classString = Global::classId2Name(classIdGet(_formControl));

        switch (classString)
        {
            case classStr(FormReferenceGroupControl):
                FormReferenceGroupControl referenceGroupControl = _formControl as FormReferenceGroupControl;
                isValid = referenceGroupControl.value() != 0;
                break;

            case classStr(FormStringControl):
                isValid = _formControl.valueStr() != BudgetPlanningConstants::emptyString;
                break;

            default:
                throw error(strFmt("@Budget:BudgetPlanning_Validation_FormControlUnsupported", classString));
        }

        if (!isValid)
        {
            throw error(strFmt("@Budget:FieldMustBeFilledInFirst", _formControl.labelText()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>