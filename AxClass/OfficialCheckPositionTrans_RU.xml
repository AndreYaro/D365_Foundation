<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OfficialCheckPositionTrans_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class OfficialCheckPositionTrans_RU
{
    OffReportType_RU    reportType;
    OffPosition_RU      position;
    OffSessionId_RU     offSessionId;
    InventLocationId    location;
    RecId               recId;

    static int PositionCount = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean  ret;
        OffError_RU  errRet = OffError_RU::OK;

        switch (reportType)
        {
            case OffReportType_RU::General                  :
                errRet = this.checkGeneral();
                break;

            case OffReportType_RU::AdvanceReport,
                 OffReportType_RU::CashBookPage,
                 OffReportType_RU::CashSlip,
                 OffReportType_RU::RTax25Inv17              :
                errRet = this.checkGL();
                break;

            case OffReportType_RU::SalesInvoice,
                 OffReportType_RU::SalesInvoiceCreditNote,
                 OffReportType_RU::SalesInvoice4Paym        :
                errRet = this.checkSales();
                break;

            case OffReportType_RU::PurchInvoice,
                 OffReportType_RU::PurchInvoiceCreditNote,
                 OffReportType_RU::PurchInvoice4Paym        :
                errRet = this.checkPurch();
                break;

            case OffReportType_RU::InventTORG16,
                 OffReportType_RU::InventTORG13,
                 OffReportType_RU::InventM11,
                 OffReportType_RU::InventINV19,
                 OffReportType_RU::InventINV3,
                 OffReportType_RU::InventINV6,
                 OffReportType_RU::InventINV5               :
                errRet = this.checkInvent();
                break;

            case OffReportType_RU::ProdM8                   :
                errRet = this.checkProd();
                break;

            case OffReportType_RU::CustFacture,
                 OffReportType_RU::VendFacture,
                 OffReportType_RU::CustFactureCreditNote,
                 OffReportType_RU::VendFactureCreditNote,
                 OffReportType_RU::EmplAdvanceReportFacture,
                 OffReportType_RU::TaxCorrectionFactureVend,
                 OffReportType_RU::TaxCorrectionFactureCust  :
                errRet = this.checkFacture();
                break;

            case OffReportType_RU::SalesInvoiceM15,
                 OffReportType_RU::PurchM4M7,
                 OffReportType_RU::TransferInvoiceM15        :
                errRet = this.checkInvLocation();
                break;

            case OffReportType_RU::RDeferrals                :
                errRet = this.checkRDeferrals();
                break;
            case OffReportType_RU::RAssetsINV1,
                 OffReportType_RU::RAssetsINV1a              :
                 //this.checkInventoryRAsset();
                 break;
            case OffReportType_RU::CommissionAgentReport     :
                 errRet = this.checkCommissionAgentReport();
                 break;
            default:
                errRet = this.checkDefaultReportTypes();
                break;
        }

        switch (errRet)
        {
            case OffError_RU::OK            :
                ret = true;
                break;
            case OffError_RU::MisuseError   :
                ret = checkFailed(strFmt("@GLS102177", enum2str(reportType), enum2str(position)));
                break;
            case OffError_RU::CanNotDelete  :
                ret = checkFailed("@GLS102178");
                break;
            case OffError_RU::WrongNumber_3 :
                ret = checkFailed("@GLS107035");
                info(strFmt("@GLS107036", PositionCount));
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCommissionAgentReport</Name>
				<Source><![CDATA[
    private OffError_RU checkCommissionAgentReport()
    {
        OffError_RU  errRet;

        switch (position)
        {
            case OffPosition_RU::Filler :
                errRet = OfficialCheckPositionTrans_RU::searchTrans(position, offSessionId, recId) ?
                         OffError_RU::OK                                                           :
                         OffError_RU::CanNotDelete;
                break;
            default :
                errRet = this.checkCommissionAgentReportDefaultPositions();
                break;
        }

        return errRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    public boolean checkDelete()
    {
        boolean ret;

        switch (reportType)
        {
            case OffReportType_RU::InventTORG16,
                 OffReportType_RU::InventTORG13,
                 OffReportType_RU::InventM11,
                 OffReportType_RU::InventINV19  :
                ret = this.checkDeleteInvent();
                break;
            case OffReportType_RU::RTax25Inv17 :
            case OffReportType_RU::RAssetsINV1 :
            case OffReportType_RU::RAssetsINV1a:

                ret = true;
                break;
            default:
                ret = this.checkDeleteDefaultReportType();
                break;
        }

        if (! ret)
        {
            checkFailed("@GLS102178");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeleteInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates deletion for inventory report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    public boolean checkDeleteInvent()
    {
        boolean ret = true;

        switch (reportType)
        {
            case OffReportType_RU::InventTORG16:

                if (position == OffPosition_RU::Director || position == OffPosition_RU::Chairman)
                {
                    ret = false;
                }

                break;
            case OffReportType_RU::InventTORG13:

                if (position == OffPosition_RU::Supplier || position == OffPosition_RU::Taker)
                {
                    ret = false;
                }

                break;
            case OffReportType_RU::InventM11:

                if (position == OffPosition_RU::Requester
                    || position == OffPosition_RU::Manager
                    || position == OffPosition_RU::Supplier
                    || position == OffPosition_RU::Taker)
                {
                    ret = false;
                }

                break;
            case OffReportType_RU::InventINV19:

                if (position == OffPosition_RU::Accountant)
                {
                    ret = false;
                }

                break;
            default:
                ret = this.checkDeleteInventDefaultReport();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for facture report types.
    /// </summary>
    /// <returns>The value of the enum <c>OffError_RU</c>.</returns>
    public OffError_RU checkFacture()
    {
        OffError_RU  errRet;

        boolean ok = false;

        switch (reportType)
        {
            case OffReportType_RU::CustFacture:
            case OffReportType_RU::VendFacture:
            case OffReportType_RU::CustFactureCreditNote:
            case OffReportType_RU::VendFactureCreditNote:
            case OffReportType_RU::EmplAdvanceReportFacture:
            case OffReportType_RU::TaxCorrectionFactureCust:
            case OffReportType_RU::TaxCorrectionFactureVend:
                ok = (position == OffPosition_RU::Director
                    || position == OffPosition_RU::Accountant
                    || position == OffPosition_RU::Responsible)
                    &&OfficialCheckPositionTrans_RU::searchTrans(position, offSessionId, recId);
                break;
            default:
                ok = this.checkFactureDefaultReportTypes();
                break;
        }

        if (ok)
        {
            errRet = OffError_RU::OK;
        }
        else
        {
            errRet = OffError_RU::MisuseError;
        }
        return errRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGeneral</Name>
				<Source><![CDATA[
    private OffError_RU checkGeneral()
    {
        OffError_RU  errRet;
        switch (position)
        {
            case OffPosition_RU::Director, OffPosition_RU::Accountant:
                errRet = OffError_RU::OK;
                break;
            default :
                errRet = OffError_RU::MisuseError;
        }
        return errRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for GL report types.
    /// </summary>
    /// <returns>The value of the enum <c>OffError_RU</c>.</returns>
    public OffError_RU checkGL()
    {
        OffError_RU  errRet;
        boolean ok;

        switch (reportType)
        {
            case OffReportType_RU::CashSlip :
                ok = (position == OffPosition_RU::Director    ||
                      position == OffPosition_RU::Accountant  ||
                      position == OffPosition_RU::Cashier);
                break;

            case OffReportType_RU::AdvanceReport :
                ok = (position == OffPosition_RU::Cashier     ||
                      position == OffPosition_RU::Requester   ||
                      position == OffPosition_RU::Manager     ||
                      position == OffPosition_RU::AccountantJ);
                break;

            case OffReportType_RU::CashBookPage :
                ok = (position == OffPosition_RU::Accountant  ||
                      position == OffPosition_RU::Cashier);
                break;
            case OffReportType_RU::RTax25Inv17  :
                ok = (position == OffPosition_RU::AccountantJ  ||
                      position == OffPosition_RU::Member       ||
                      position == OffPosition_RU::Chairman);
                break;

            default:
                ok = this.checkGLDefaultReportTypes();
                break;
        }

        if (ok)
        {
            errRet = OffError_RU::OK;
        }
        else
        {
            errRet = OffError_RU::MisuseError;
        }
        return errRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for inventory report types.
    /// </summary>
    /// <returns>The value of the enum <c>OffError_RU</c>.</returns>
    public OffError_RU checkInvent()
    {
        OffError_RU  errRet = OffError_RU::OK;
        switch (reportType)
        {
            case OffReportType_RU::InventTORG16               :
                if (position == OffPosition_RU::Member   ||
                    position == OffPosition_RU::InCharge)
                {
                    errRet = OfficialCheckPositionTrans_RU::searchTransInventMulti(position, recId);
                }
                if (position == OffPosition_RU::Director ||
                    position == OffPosition_RU::Chairman)
                {
                    errRet = OfficialCheckPositionTrans_RU::searchTransInvent(position, offSessionId, recId, reportType);
                }
                break;
            case OffReportType_RU::InventTORG13               :
                if (position == OffPosition_RU::Supplier ||
                    position == OffPosition_RU::Taker)
                {
                    errRet = OfficialCheckPositionTrans_RU::searchTransInvent(position, offSessionId, recId, reportType);
                }
                break;
            case OffReportType_RU::InventM11                  :
                if (position == OffPosition_RU::Requester ||
                    position == OffPosition_RU::Manager   ||
                    position == OffPosition_RU::Supplier  ||
                    position == OffPosition_RU::Acceptor)
                {
                    errRet = OfficialCheckPositionTrans_RU::searchTransInvent(position, offSessionId, recId, reportType);
                }
                if (position == OffPosition_RU::InCharge)
                {
                    errRet = OfficialCheckPositionTrans_RU::searchTransInventMulti(position, recId);
                }
                break;
            case OffReportType_RU::InventINV19                :
                if (position == OffPosition_RU::Accountant)
                {
                    errRet = OfficialCheckPositionTrans_RU::searchTransInvent(position, offSessionId, recId, reportType);
                }
                if (position == OffPosition_RU::InCharge)
                {
                    errRet = OfficialCheckPositionTrans_RU::searchTransInventMulti(position, recId);
                }
                break;
            case OffReportType_RU::InventINV3                 :
            if (position != OffPosition_RU::Chairman &&
                position != OffPosition_RU::InCharge &&
                position != OffPosition_RU::Member)
                {
                    errRet = OffError_RU::MisuseError;
                }
            case OffReportType_RU::InventINV5                 :
            if (position != OffPosition_RU::Chairman &&
                position != OffPosition_RU::InCharge &&
                position != OffPosition_RU::Member)
                {
                    errRet = OffError_RU::MisuseError;
                }
                break;
            case OffReportType_RU::InventINV6 :
                if (position != OffPosition_RU::Chairman &&
                    position != OffPosition_RU::Controller &&
                    position != OffPosition_RU::Member)
                {
                    errRet = OffError_RU::MisuseError;
                }
                break;
            default:
                errRet = this.checkInventDefaultReportTypes();
                break;
        }
        return errRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventoryRAsset</Name>
				<Source><![CDATA[
    private OffError_RU checkInventoryRAsset()
    {
        OffError_RU  errRet;
        switch (position)
        {
            case OffPosition_RU::Member    :
            case OffPosition_RU::Chairman  :
                errRet = OffError_RU::OK;
                break;
            default:
                errRet = OffError_RU::MisuseError;
        }
        return errRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for inventory location report types.
    /// </summary>
    /// <returns>The value of the enum <c>OffError_RU</c>.</returns>
    public OffError_RU checkInvLocation()
    {
        OffError_RU  errRet;
        errRet = OffError_RU::MisuseError;

        switch (reportType)
        {
            case OffReportType_RU::PurchM4M7        :
                switch (position)
                {
                    case OffPosition_RU::Member   :
                        errRet = OfficialCheckPositionTrans_RU::searchTransMulti(position,
                                                                                 offSessionId,
                                                                                 recId,
                                                                                 PositionCount);
                        break;
                    case OffPosition_RU::Supplier :
                    case OffPosition_RU::Acceptor :
                    case OffPosition_RU::Accountant :
                    case OffPosition_RU::Chairman :
                        errRet = OfficialCheckPositionTrans_RU::searchTransInventLocation(position,
                                                                                          offSessionId,
                                                                                          location,
                                                                                          recId);
                        break;
                    case OffPosition_RU::Director :
                        errRet = OfficialCheckPositionTrans_RU::searchTrans(position, offSessionId, recId) ?
                                 OffError_RU::OK                                                           :
                                 OffError_RU::MisuseError;
                        break;
                }
                break;
            case OffReportType_RU::SalesInvoiceM15  :
            case OffReportType_RU::TransferInvoiceM15  :
                switch (position)
                {
                    case OffPosition_RU::Director   :
                    case OffPosition_RU::Accountant :
                        errRet = OfficialCheckPositionTrans_RU::searchTrans(position, offSessionId, recId) ?
                                 OffError_RU::OK                                                           :
                                 OffError_RU::MisuseError;
                        break;
                    case OffPosition_RU::Acceptor   :
                    case OffPosition_RU::Supplier   :
                    case OffPosition_RU::Taker      :
                    case OffPosition_RU::TransResp  :
                    case OffPosition_RU::TransRespCarrier :
                    case OffPosition_RU::TransRespCust :

                        errRet = OfficialCheckPositionTrans_RU::searchTransInventLocation(position,
                                                                                          offSessionId,
                                                                                          location,
                                                                                          recId);
                        break;
                }
                break;
            default:
                errRet = this.checkInvLocationDefaultReportTypes();
                break;
        }
        return errRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for production report types.
    /// </summary>
    /// <returns>The value of the enum <c>OffError_RU</c>.</returns>
    public OffError_RU checkProd()
    {
        boolean ok;

        switch (reportType)
        {
            case OffReportType_RU::ProdM8 :
                ok = (position == OffPosition_RU::Manager  ||
                      position == OffPosition_RU::Supplier ||
                      position == OffPosition_RU::Taker);
                break;

            default:
                ok = this.checkProdDefaultReportTypes();
                break;
        }

        OffError_RU  errRet;
        if (ok)
        {
            errRet = OffError_RU::OK;
        }
        else
        {
            errRet = OffError_RU::MisuseError;
        }
        return errRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for purchase report types.
    /// </summary>
    /// <returns>The value of the enum <c>OffError_RU</c>.</returns>
    public OffError_RU checkPurch()
    {
        boolean ok;

        switch (reportType)
        {
            case OffReportType_RU::PurchInvoice             :
            case OffReportType_RU::PurchInvoiceCreditNote   :
                ok = (position == OffPosition_RU::Director      ||
                      position == OffPosition_RU::Accountant    ||
                      position == OffPosition_RU::Acceptor      ||
                      position == OffPosition_RU::Taker         ||
                      position == OffPosition_RU::Supplier      ||
                      position == OffPosition_RU::TransResp     ||
                      position == OffPosition_RU::TransRespVend ||
                      position == OffPosition_RU::TransRespCarrier)&&
                     OfficialCheckPositionTrans_RU::searchTrans(position, offSessionId, recId);
                break;

            case OffReportType_RU::PurchInvoice4Paym        :
                ok = (position == OffPosition_RU::Director      ||
                      position == OffPosition_RU::Accountant    ||
                      position == OffPosition_RU::Filler        ||
                      position == OffPosition_RU::Responsible   ||
                      position == OffPosition_RU::Supplier)     &&
                     OfficialCheckPositionTrans_RU::searchTrans(position, offSessionId, recId);
                break;
            default:
                ok = this.checkPurchDefaultReportTypes();
                break;
        }

        OffError_RU  errRet;
        if (ok)
        {
            errRet = OffError_RU::OK;
        }
        else
        {
            errRet = OffError_RU::MisuseError;
        }
        return errRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRDeferrals</Name>
				<Source><![CDATA[
    private OffError_RU checkRDeferrals()
    {
        OffError_RU  errRet;
        switch (position)
        {
            case OffPosition_RU::AccountantJ :
            case OffPosition_RU::Chairman    :
                errRet = OfficialCheckPositionTrans_RU::searchTrans(position, offSessionId, recId) ?
                         OffError_RU::OK                                                           :
                         OffError_RU::CanNotDelete;
                break;

            case OffPosition_RU::Member      :
            case OffPosition_RU::InCharge    :
                errRet = OfficialCheckPositionTrans_RU::searchTransMulti(position,
                                                                         offSessionId,
                                                                         recId,
                                                                         3);
                break;
            default :
                errRet = this.checkRDeferralsDefaultPositions();
                break;
        }
        return errRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for sales report types.
    /// </summary>
    /// <returns>The value of the enum <c>OffError_RU</c>.</returns>
    public OffError_RU checkSales()
    {
        boolean ok = false;

        switch (reportType)
        {
            case OffReportType_RU::SalesInvoice             :
            case OffReportType_RU::SalesInvoiceCreditNote   :
                ok = (position == OffPosition_RU::Director      ||
                      position == OffPosition_RU::Accountant    ||
                      position == OffPosition_RU::Acceptor      ||
                      position == OffPosition_RU::Taker         ||
                      position == OffPosition_RU::Supplier      ||
                      position == OffPosition_RU::TransResp     ||
                      position == OffPosition_RU::TransRespCust ||
                      position == OffPosition_RU::TransRespCarrier)&&
                     OfficialCheckPositionTrans_RU::searchTrans(position, offSessionId, recId);
                break;
            case OffReportType_RU::SalesInvoice4Paym        :
                ok = (position == OffPosition_RU::Director      ||
                      position == OffPosition_RU::Accountant    ||
                      position == OffPosition_RU::Filler        ||
                      position == OffPosition_RU::Responsible   ||
                      position == OffPosition_RU::Supplier)     &&
                     OfficialCheckPositionTrans_RU::searchTrans(position, offSessionId, recId);
                break;
            default:
                ok = this.checkSalesDefaultReportTypes();
                break;
        }

        OffError_RU  errRet;
        if (ok)
        {
            errRet = OffError_RU::OK;
        }
        else
        {
            errRet = OffError_RU::MisuseError;
        }
        return errRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(OffReportType_RU   _reportType,
                    OffPosition_RU     _position,
                    OffSessionId_RU    _id,
                    InventLocationId   _location,
                    RecId              _recId)
    {
        reportType   = _reportType;
        position     = _position;
        offSessionId = _id;
        location     = _location;
        recId        = _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchTrans</Name>
				<Source><![CDATA[
    public static boolean searchTrans(OffPosition_RU  _position,
                                             OffSessionId_RU _offSessionId,
                                             RecId           _recId)
    {
        int                 counter = 0;
        RecId               tmpRecId;
        OfficialsTrans_RU   officialsTrans;

        while select RecId
        from officialsTrans
            where officialsTrans.Position     == _position     &&
                  officialsTrans.OffSessionId == _offSessionId
        {
            counter ++;
            tmpRecId = officialsTrans.RecId;
            if (counter >1 )
            {
                break;
            }
        }

        return (counter == 1 && _recId == tmpRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchTransInvent</Name>
				<Source><![CDATA[
    public static OffError_RU searchTransInvent(OffPosition_RU   _position,
                                                       OffSessionId_RU  _offSessionId,
                                                       RecId            _recId,
                                                       OffReportType_RU _offReportType)
    {
        int                 counter = 0;
        OffError_RU         ret;
        RecId               tmpRecId;
        OfficialsTrans_RU   officialsTrans;

        while select RecId
        from officialsTrans
           where officialsTrans.Position     == _position     &&
                 officialsTrans.OffSessionId == _offSessionId &&
                 officialsTrans.ReportType   == _offReportType
        {
            counter = counter+1;
            tmpRecId = officialsTrans.RecId;
            if (counter >1 )
            {
                break;
            }
        }

        ret = ((counter == 1 && _recId ==  tmpRecId) || (counter == 0)) ?
              OffError_RU::OK                                                           :
              OffError_RU::MisuseError;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchTransInventLocation</Name>
				<Source><![CDATA[
    private static OffError_RU searchTransInventLocation(OffPosition_RU   _position,
                                                                OffSessionId_RU  _offSessionId,
                                                                InventLocationId _location,
                                                                RecId            _recId)
    {
        int                 counter = 0;
        OffError_RU         ret;
        RecId               tmpRecId;
        OfficialsTrans_RU   officialsTrans;

        while select RecId
            from  officialsTrans
            where officialsTrans.Position     == _position     &&
                  officialsTrans.OffSessionId == _offSessionId &&
                  officialsTrans.InvLocation  == _location
        {
            counter ++;
            tmpRecId = officialsTrans.RecId;
            if (counter >1 )
            {
                break;
            }
        }

        ret = ((counter == 1  && _recId ==  tmpRecId) || (counter == 0)) ?
              OffError_RU::OK                                                           :
              OffError_RU::MisuseError;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchTransInventMulti</Name>
				<Source><![CDATA[
    private static OffError_RU searchTransInventMulti(OffPosition_RU     _position,
                                                             RecId              _recId)
    {
        OfficialsTrans_RU   officialsTrans;

        select firstonly officialsTrans
            where officialsTrans.RecId    == _recId        &&
                  officialsTrans.Position == _position;

        if (! officialsTrans && _recId != 0)
            return OffError_RU::CanNotDelete;

        return OffError_RU::OK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchTransMulti</Name>
				<Source><![CDATA[
    private static OffError_RU searchTransMulti(OffPosition_RU   _position,
                                                       OffSessionId_RU  _sessionId,
                                                       RecId            _recId,
                                                       int              _count = 0)
    {
        OffError_RU         ret = OffError_RU::OK;
        OfficialsTrans_RU   officialsTrans;

        select firstonly officialsTrans
            where officialsTrans.RecId        == _recId     &&
                  officialsTrans.OffSessionId == _sessionId &&
                  officialsTrans.Position     == _position;

        if (! officialsTrans && _recId != 0)
        {
            ret = OffError_RU::CanNotDelete;
        }

        if (ret == OffError_RU::OK &&
            _count)
        {
            select count(RecId) from officialsTrans
                where officialsTrans.OffSessionId == _sessionId &&
                      officialsTrans.Position     == _position;
            if (_count != officialsTrans.RecId)
            {
                switch (_count)
                {
                    case InventParameters::inventReceiptsListMembersNumber_RU() :
                        ret = OffError_RU::WrongNumber_3;
                    default                                                  :
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another report types.
    /// </summary>
    /// <returns>The error type of validation.</returns>
    [Replaceable]
    public OffError_RU checkDefaultReportTypes()
    {
        return OffError_RU::OK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeleteDefaultReportType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates deletion for another report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkDeleteDefaultReportType()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeleteInventDefaultReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates deletion for another inventory report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkDeleteInventDefaultReport()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGLDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another GL report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkGLDefaultReportTypes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another sales report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkSalesDefaultReportTypes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another purchase report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkPurchDefaultReportTypes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another inventory report types.
    /// </summary>
    /// <returns>The error type of validation.</returns>
    [Replaceable]
    public OffError_RU checkInventDefaultReportTypes()
    {
        return OffError_RU::MisuseError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProdDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another production report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkProdDefaultReportTypes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFactureDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another facture report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkFactureDefaultReportTypes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvLocationDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another inventory location report types.
    /// </summary>
    /// <returns>The error type of validation.</returns>
    [Replaceable]
    public OffError_RU checkInvLocationDefaultReportTypes()
    {
        return OffError_RU::MisuseError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRDeferralsDefaultPositions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position of deferrals report for another positions.
    /// </summary>
    /// <returns>The error type of validation.</returns>
    [Replaceable]
    public OffError_RU checkRDeferralsDefaultPositions()
    {
        return OffError_RU::MisuseError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCommissionAgentReportDefaultPositions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position of commission agent report for another positions.
    /// </summary>
    /// <returns>The error type of validation.</returns>
    [Replaceable]
    public OffError_RU checkCommissionAgentReportDefaultPositions()
    {
        return OffError_RU::MisuseError;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>