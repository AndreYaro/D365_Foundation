<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSalesTaxAdjustTrans_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxSalesTaxPayment_IN</c> class is used to generate tax sales and tax adjustment report for India.
/// </summary>
class TaxSalesTaxAdjustTrans_IN extends TaxSalesTaxPayment_IN implements BatchRetryable
{
    // variables that do not need to be packed/unpacked
    TaxVersion  adjustmentVersion[];
    TransDate   adjustmentfromDate[];
    TransDate   adjustmentToDate[];
    Counter     numOfPeriods;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if this class can be executed in batch.
    /// </summary>
    /// <returns>
    ///    True if can run this class in batch; otherwise false.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunBase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase(this.dialogHeader(), this);

        updateNow = false;

        dialogTaxRegistrationGroupName = dialog.addField(extendedtypestr(TaxRegistrationGroupNameRecID_IN));
        dialogTaxRegistrationNumber    = dialog.addField(extendedtypestr(TaxRegistrationNumberRecId_IN));

        dialogTaxRegistrationNumber.control().registerOverrideMethod(
                methodStr(FormInt64Control, lookup),
                methodStr(TaxReport, dialogTaxRegistrationNumber_lookup),
                this);

        dialogTaxPeriod = dialog.addFieldValue(extendedtypestr(TaxPeriod), taxPeriod);
        dialogFromDate  = dialog.addField(extendedtypestr(TaxPeriodDate), "@SYS7402", "@SYS12292");

        dialogTransDate =  dialog.addFieldValue(extendedtypestr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS67", "@SYS60729");
        if (TaxParameters::find().Excise_IN)
        {
            dialogPostToInterimPLA  = dialog.addField(enumstr(NoYes), "@GLS6226", "@GLS6260");
        }

        if (TaxSolutionScopeIntegrationUtil::IsCompanyEnabled() && dialogPostToInterimPLA)
        {
            dialogPostToInterimPLA.visible(false);
        }
        dialogUpdate    = dialog.addField(enumstr(NoYes), "@SYS2934", "@SYS17200");

        dialogPrintReport = dialog.addFieldValue(
            enumStr(NoYes),
            printReport,
            "@Tax_ReportSalesTaxForSettlementPeriod:PrintReport",
            "@Tax_ReportSalesTaxForSettlementPeriod:PrintReportHelpText");
        this.updatePrintReportControl(taxPeriod);

        this.dialogSettlementAccountMenuItem(dialog);

        settlementAccountButton = dialog.dialogForm().control('MnuItm_1');

        dialog.allowUpdateOnSelectCtrl(true);

        dialogCopy = dialog;

        this.dialogSelectCtrl();

        dialog.addMenuItemButton(MenuItemType::Display, menuitemdisplaystr(TaxSalesTaxPayment_IN), DialogMenuItemGroup::RightGrp);
        dialog.addMenuItemButton(MenuItemType::Display, menuitemdisplaystr(TaxRegistrationGroup_IN), DialogMenuItemGroup::RightGrp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header of this dialog.
    /// </summary>
    /// <returns>
    /// Returns the header of this dialog.
    /// </returns>
    protected Caption dialogHeader()
    {
        return "@SYS65243";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        updateNow       = dialogUpdate.value();
        taxPeriod       = dialogTaxPeriod.value();
        fromDate        = dialogFromDate.value();
        transactionDate = dialogTransDate.value();
        taxRepVersion   = TaxRepVersion::Original;
        printReport     = dialogPrintReport.value();

        isCorrections                 = true;
        taxRegistrationGroupName      = dialogTaxRegistrationGroupName.value();
        taxRegistrationNumber         = dialogTaxRegistrationNumber.value();
        if (TaxParameters::find().Excise_IN)
        {
            postToInterimPLA          = dialogPostToInterimPLA.value();
        }
        taxRegistrationDate           = dialogFromDate.value();

        this.checkFields();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxSalesTaxPaymentFacade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the TaxSalesTaxPaymentFacade object based on the profile
    /// </summary>
    public void initTaxSalesTaxPaymentFacade()
    {
        super();
        profile.parmIsCorrections(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report.
    /// </summary>
    void printout()
    {
        Args            args;

        args = new Args();
        args.parmObject(this);
        args.record(taxReportPeriod);

        TaxReportPrintOut::printout_IN(taxPeriod, args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxReported</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the report is set for updating.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> enumeration value if the report is set for updating; otherwise,
    ///    <c>NoYes::No</c> .
    /// </returns>
    NoYes taxReported()
    {
        NoYes taxReported;

        taxReported = super();
        if (!taxReported)
        {
            if (taxReportPeriod.VersionNum > 0)
                taxReported = NoYes::Yes;
        }

        return taxReported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the <c>transactionDate</c> variable.
    /// </summary>
    /// <returns>
    ///    The value of the <c>transactionDate</c> variable.
    /// </returns>
    TransDate transDate()
    {
        TaxReportVoucher    taxReportVoucher;
        TransDate           transDate;

        transDate = super();
        if (this.taxReported())
        {
            select firstonly TransDate from taxReportVoucher
                where taxReportVoucher.TaxPeriod    == this.taxPeriod() &&
                        taxReportVoucher.FromDate     == this.fromDate()  &&
                        taxReportVoucher.ToDate       == this.toDate();
            if (taxReportVoucher)
            {
                transDate = taxReportVoucher.TransDate;
            }
        }
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the voucher variable.
    /// </summary>
    /// <returns>
    ///    The voucher variable.
    /// </returns>
    Voucher voucher()
    {
        TaxReportVoucher    taxReportVoucher;

        voucher = super();
        if (this.taxReported())
        {
            select firstonly Voucher from taxReportVoucher
                where taxReportVoucher.TaxPeriod    == this.taxPeriod() &&
                      taxReportVoucher.FromDate     == this.fromDate()  &&
                      taxReportVoucher.ToDate       == this.toDate();
            if (taxReportVoucher.Voucher)
                voucher = taxReportVoucher.Voucher;
        }
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  _args)
    {
        TaxSalesTaxAdjustTrans_IN   taxSalesTaxAdjustTrans_IN  = new TaxSalesTaxAdjustTrans_IN();

        if (taxSalesTaxAdjustTrans_IN.runDialogParametersAndParseArgs(_args))
        {
            if (taxSalesTaxAdjustTrans_IN.canRunBatch())
            {
                taxSalesTaxAdjustTrans_IN.runBatch();
            }
            else
            {
                taxSalesTaxAdjustTrans_IN.runOperation();

                if (taxSalesTaxAdjustTrans_IN.canDisplayReport())
                {
                    taxSalesTaxAdjustTrans_IN.printout();
                }
            }
        }
        taxSalesTaxAdjustTrans_IN.updateTaxRegistrationGroup_IN(taxSalesTaxAdjustTrans_IN.parmTaxRegistrationGroupName());
        TaxSalesTaxPaymentFacade_IN::clearSalesTaxPaymentHistory();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>