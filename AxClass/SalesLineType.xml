<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class SalesLineType extends InventType implements SalesPurchIModifiedDefaulter, InventDistinctProductOrderDefaulting, SalesPurchIModifiedDefaulterValidator
{
    SalesLine           salesLine;
    SalesTable          salesTable;
    DimensionCopy       dimensionCopy;

    InventDim           preDefaultingInventDim;
    InventDimParm       preDefaultingInventDimParm;
    InventDimId         mergedInventDimId;
    InventRefTransId    interCompanyInventTransId;

    private SalesInstrumentationLogger instrumentationLogger;

    // <GIN>
    #ISOCountryRegionCodes
    // </GIN>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountClearingLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountClearingLedgerDimension(SalesTable _salesTable = salesTable)
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && salesLine.PostingProfile_RU)
        {
            return CustLedgerAccounts::clearingLedgerDimension(_salesTable.InvoiceAccount,
                                                      salesLine.PostingProfile_RU);
        }
        // </GEERU>
        return CustLedgerAccounts::clearingLedgerDimension(_salesTable.InvoiceAccount,
                                                   _salesTable.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountConsumptionLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountConsumptionLedgerDimension(InventTable _inventTable = salesLine.inventTable())
    {
        return this.accountItemLedgerDimension(_inventTable, InventAccountType::SalesConsump);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountCustLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountCustLedgerDimension(SalesTable _salesTable = salesTable)
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
        && salesLine.PostingProfile_RU)
        {
            return CustLedgerAccounts::summaryLedgerDimension(_salesTable.InvoiceAccount,
                                             salesLine.PostingProfile_RU);
        }
        // </GEERU>
        return CustLedgerAccounts::summaryLedgerDimension(_salesTable.InvoiceAccount,
                                          _salesTable.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountDiscLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountDiscLedgerDimension(InventTable _inventTable = salesLine.inventTable())
    {
        return this.accountItemLedgerDimension(_inventTable, InventAccountType::SalesDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountGoodsInRouteOffset_RU</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountGoodsInRouteOffset_RU(InventTable _inventTable = salesLine.inventTable())
    {
        return InventPosting::accountItemLedgerDimensionFromParameters(
            InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(
                salesLine,
                InventAccountType::SalesGoodsInRouteOffsetAccount_RU,
                _inventTable.itemGroupId(),
                salesLine.inventDim()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountIssueLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountIssueLedgerDimension(InventTable _inventTable = salesLine.inventTable())
    {
        // <GCN>
        if (InventPostingExtendParm_CN::checkExtendParmEnabled())
        {
            return this.accountItemExtendParm_CN(_inventTable, InventAccountType::SalesIssue);
        }
        else
        {
            // </GCN>
            return this.accountItemLedgerDimension(_inventTable, InventAccountType::SalesIssue);
            // <GCN>
        }
        // </GCN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemExtendParm_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a posting account for the sales order line with extended parameters.
    /// </summary>
    /// <param name="_inventTable">
    /// The InventTable table record to get the item group from.
    /// </param>
    /// <param name="_inventAccountType">
    /// The posting account type.
    /// </param>
    /// <returns>
    /// The posting account number for the account type for the sales order line.
    /// </returns>
    protected LedgerDimensionDefaultAccount accountItemExtendParm_CN(InventTable _inventTable, InventAccountType _inventAccountType)
    {
        return InventPosting::accountItemExtendParmFromParameter_CN(
            InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(
                salesLine,
                _inventAccountType,
                _inventTable.itemGroupId(),
                null,
                InventPostingExtendParm_CN::constructInventDim(salesLine.inventDim()).parmInventSiteId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemLedgerDimension</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount accountItemLedgerDimension(InventTable _inventTable, InventAccountType _inventAccountType)
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return InventPosting::accountItemLedgerDimensionFromParameters(
                InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(
                    salesLine,
                    _inventAccountType,
                    _inventTable.itemGroupId(),
                    salesLine.inventDim()));
        }
        // </GEERU>
        return InventPosting::accountItemLedgerDimensionFromParameters(
            InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(
                salesLine,
                _inventAccountType,
                _inventTable.itemGroupId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountSalesLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountSalesLedgerDimension(InventTable _inventTable = salesLine.inventTable())
    {
        if (salesLine.LedgerDimension)
        {
            return salesLine.LedgerDimension;
        }
        return this.accountItemLedgerDimension(_inventTable, InventAccountType::SalesRevenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupUponInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether charge transactions should be created when inserting a sales order line.
    /// </summary>
    /// <param name = "_createMarkup">
    /// A Boolean value describing whether the insert operation was called with an indication that charges should be created.
    /// </param>
    /// <returns>
    /// true, if charge transactions should be created; otherwise, false.
    /// </returns>
    public boolean createMarkupUponInsert(boolean _createMarkup)
    {
        return _createMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateWithAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates the sales line with the specified agreement line.
    /// </summary>
    void associateWithAgreementLine()
    {
        if (!salesLine.MatchingAgreementLine)
        {
            return;
        }

        ttsBegin;

        AgreementLineReleasedLine agreementLineReleasedLine = AgreementLineReleasedLine::findBySalesLine(salesLine, true);

        agreementLineReleasedLine.AgreementLine = salesLine.MatchingAgreementLine;

        if (!agreementLineReleasedLine.RecId)
        {
            agreementLineReleasedLine.initFromSalesLine(salesLine);
            agreementLineReleasedLine.insert();
        }
        else
        {
            if (agreementLineReleasedLine.IsDeleted)
            {
                // If we are reusing link that was soft deleted
                // we need resurect it first.
                agreementLineReleasedLine.IsDeleted = NoYes::No;
                agreementLineReleasedLine.IsModified = NoYes::Yes;
            }
            agreementLineReleasedLine.update();
        }

        // Clear existing PriceDiscChangePolicies...
        this.clearAllPriceDiscChangePolicies();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAgreementBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the sales line can be linked to an agreement line.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean canAgreementBeLinked()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    boolean canBeInvoiced()
    {
        if (salesLine.Blocked     == NoYes::No
            && SalesLine.canInvoiceOrderLineFromCurrentSalesStatus()
            && this.canInventUpdPhysical()
            && this.canInventUpdFinancial())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConfirmationBeUpdated</Name>
				<Source><![CDATA[
    boolean  canConfirmationBeUpdated(DocumentStatus _documentStatus = DocumentStatus::Confirmation)
    {
        boolean  ok = true;
        if (_documentStatus == DocumentStatus::Confirmation)
        {
            ok = this.mayConfirmationBeUpdated();
        }

        if (ok)
        {
            ok = this.canPackingslipBeUpdated(_documentStatus);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeliverRemainderBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether the deliver remainder of the sales line can be updated or not.
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    public boolean canDeliverRemainderBeUpdated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canFiscalDocTextBeRegistrated_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if Fiscal document texts can be registered to the Sales line
    /// </summary>
    /// <returns>
    /// True if the Fiscal document text can be registered; false otherwise.
    /// </returns>
    public boolean canFiscalDocTextBeRegistrated_BR()
    {
        return  salesLine.RecId
                &&  (salesLine.SalesType == SalesType::Sales
                    || salesLine.SalesType == SalesType::ReturnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventoriedBeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>StockedProduct</c> value can be changed for the line.
    /// </summary>
    /// <returns>
    /// true if the <c>StockedProduct</c> value can be changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the <c>StockedProduct</c> value can be changed and if the change is from the <c>Yes</c> to
    /// <c>No</c> enumeration value then the corresponding <c>InventTrans</c> records must be deleted.
    /// </remarks>
    public boolean canInventoriedBeChanged()
    {
        boolean ok = true;
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;

        if (salesLine.SalesStatus != SalesStatus::None && salesLine.SalesStatus != SalesStatus::Backorder)
        {
            ok = false;
        }

        if (ok)
        {
            if (salesLine.isStocked())
            {
                //StockedProduct value is being changed from YES to NO
                if (salesLine.isPackingSlipOrInvoiceUpdated())
                {
                    ok = false;
                }
                else
                {
                    //If marking exists on inventTrans, then cannot change StockedProduct
                    //If status is not Open Order, then cannot change StockedProduct
                    select firstonly RecId from inventTransOrigin
                        where inventTransOrigin.InventTransId               ==  salesLine.InventTransId
                        exists join inventTrans
                            where inventTransOrigin.RecId                   ==  inventTrans.InventTransOrigin
                                && (inventTrans.MarkingRefInventTransOrigin != 0
                                || inventTrans.StatusReceipt                != StatusReceipt::Ordered
                                || inventTrans.StatusIssue                  != StatusIssue::OnOrder);

                    if (inventTrans.RecId)
                    {
                        ok = false;
                    }
                }
            }
            else
            {
                //StockedProduct value is being changed from NO to YES
                //If order line is part of an order chain or has been delivered or invoiced, then cannot change StockedProduct
                if (salesLine.InventRefTransId != ''
                || salesLine.InventRefId != ''
                || salesLine.isPackingSlipOrInvoiceUpdated()
                || salesLine.registeredInSalesUnit())
                {
                    ok = false;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInvoice4PaymBeUpdated_RU</Name>
				<Source><![CDATA[
    private boolean canInvoice4PaymBeUpdated_RU(DocumentStatus _documentStatus = DocumentStatus::Invoice4Paym_RU)
    {
        boolean ok = true;

        if (_documentStatus == DocumentStatus::Invoice4Paym_RU)
        {
            ok = this.mayInvoice4PaymBeUpdated_RU();
        }

        ok = ok && salesLine.salesTable().canCustomerBeUpdated(_documentStatus);

        ok = ok && this.checkSalesQty(DocumentStatus::Invoice4Paym_RU);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInvoiceBeUpdated</Name>
				<Source><![CDATA[
    boolean  canInvoiceBeUpdated()
    {
        boolean     ok = true;

        ok = this.mayInvoiceBeUpdated();

        if (ok)
        {
            if (salesLine.SalesType != SalesType::ReturnItem)
            {
                if (!salesTable.canCustomerBeUpdated(DocumentStatus::Invoice))
                {
                    ok = false;
                }
            }
        }

        if (ok)
        {
            ok = this.checkSalesQty(DocumentStatus::Invoice);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLineAmountBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>LineAmount</c> field can be updated.
    /// </summary>
    /// <returns>
    /// true if updating is enabled; otherwise, false.
    /// </returns>
    boolean canLineAmountBeUpdated()
    {
        return salesLine.PriceDiscResultFields::canLineAmountBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLineAmountBeUpdatedWithNonInteractiveSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>LineAmount</c> field can be updated without dialogs.
    /// </summary>
    /// <returns>
    ///    true if update is enabled; otherwise, false.
    /// </returns>
    public boolean canLineAmountBeUpdatedWithNonInteractiveSession()
    {
        return salesLine.PriceDiscResultFields::canLineAmountBeUpdatedWithNonInteractiveSession();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPackingslipBeUpdated</Name>
				<Source><![CDATA[
    boolean  canPackingslipBeUpdated(DocumentStatus _documentStatus = DocumentStatus::PackingSlip)
    {
        boolean  ok = true;

        if (_documentStatus == DocumentStatus::PackingSlip)
        {
            ok = this.mayPackingSlipBeUpdated();
        }

        if (ok)
        {
            if (!salesTable.canCustomerBeUpdated(_documentStatus))
            {
                ok = false;
            }
        }

        if (ok)
        {
            ok = this.checkSalesQty(DocumentStatus::PackingSlip);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPickingListBeRegistrated</Name>
				<Source><![CDATA[
    boolean  canPickingListBeRegistrated(boolean _mayBeRegistrated = false)
    {
        boolean     ok = true;

        if (!_mayBeRegistrated)
        {
            ok = this.mayPickingListBeRegistered();
        }

        if (ok)
        {
            Ok = this.canWMSOrderBePicked();
        }

        if (ok)
        {
            ok = this.canPackingslipBeUpdated(DocumentStatus::PickingList);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWMSOrderBePicked</Name>
				<Source><![CDATA[
    protected boolean canWMSOrderBePicked()
    {
        WMSOrder    wmsOrder;

        select firstonly RecId from wmsOrder
                where wmsOrder.InventTransRefId == salesLine.SalesId
                    &&    wmsOrder.InventTransId    == salesLine.InventTransId
                    &&    wmsOrder.Type             == WMSOrderType::OrderPick;

        if (!wmsOrder.RecId)
        {
            if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
            {
                return this.kittingCanPickingListBeRegistrated(salesLine, false);
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPickingListBeUpdated</Name>
				<Source><![CDATA[
    boolean  canPickingListBeUpdated(boolean _mayBeRegistrated = false)
    {
        boolean  ok = true;

        if (!_mayBeRegistrated)
        {
            ok = this.mayPickingListBeRegistered();
        }

        if (ok)
        {
            ok = this.checkSalesQty(DocumentStatus::PickingList);
        }

        if (ok)
        {
            ok = this.canPackingslipBeUpdated(DocumentStatus::PickingList);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProjectPackingslipBeUpdated</Name>
				<Source><![CDATA[
    boolean  canProjectPackingslipBeUpdated(DocumentStatus _documentStatus = DocumentStatus::ProjectPackingSlip)
    {
        boolean  ok = true;

        if (_documentStatus == DocumentStatus::ProjectPackingSlip)
        {
            ok = this.mayProjectPackingSlipBeUpdated();
        }

        if (ok)
        {
            ok = this.canPackingslipBeUpdated(_documentStatus);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProjectPickingListBeUpdated</Name>
				<Source><![CDATA[
    boolean canProjectPickingListBeUpdated(boolean _mayBeRegistrated = false)
    {
        boolean  ok = true;

        ok = !_mayBeRegistrated && this.mayPickingListBeRegistered();

        ok = ok && this.checkSalesQty(DocumentStatus::ProjectPickingList);

        ok = ok && this.canPackingslipBeUpdated(DocumentStatus::ProjectPickingList);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreementDimension_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates an agreement dimension in the sales line.
    /// </summary>
    /// <returns>
    ///     true if an agreement dimension in the sales line is blank or equals to the header agreement dimension; otherwise, false.
    /// </returns>
    protected boolean checkAgreementDimension_RU()
    {
        RecId dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();
        boolean ok = true;

        if (salesLine.DefaultDimension && dimAttrRecId)
        {
            DimensionAttributeValueSetStorage dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(salesLine.DefaultDimension);
            DimensionAttributeValue dimAttrValue = DimensionAttributeValue::find(dimAttrValueSetStorage.getValueByDimensionAttribute(dimAttrRecId));

            SalesTable_RU salesTableRU = salesTable.salesTable_RU();

            if (dimAttrValue &&
                dimAttrValue.EntityInstance != salesTableRU.AgreementHeaderExt_RU)
            {
                ok = checkFailed(strFmt("@GLS220871",
                    dimAttrValue.getValue(), SalesAgreementHeaderExt_RU::find(salesTableRU.AgreementHeaderExt_RU).AgreementId));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAssociatedLineConstraints</Name>
				<Source><![CDATA[
    public void checkAssociatedLineConstraints()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether it is allowed to delete the sales order line.
    /// </summary>
    /// <param name = "_useWarning">
    /// A boolean value that indicates whether the user must be notified about the reasons why the changes are not allowed; optional.
    /// </param>
    /// <param name = "_treatInvoicedOrderUpdateWarningAsError">
    /// A boolean value that indicates whether the "Warning" access level to invoiced orders must be treated as "Locked".
    /// </param>
    /// <returns>true, if it is allowed to delete the sales order line; otherwise, false.</returns>
    public boolean checkDelete(
        boolean _useWarning = true,
        boolean _treatInvoicedOrderUpdateWarningAsError = false)
    {
        boolean     ok = true;
        Qty         invoicedInTotal = this.invoicedInTotal();

        if (this.isSalesLineInvoiced(invoicedInTotal))
        {
            ok = this.checkDeleteInvoicedSalesLine(invoicedInTotal, _useWarning, _treatInvoicedOrderUpdateWarningAsError) && ok;
        }

        if (salesLine.RecId)
        {
            if (salesTable.isInterCompanyOrder()
                && salesLine.InterCompanyOrigin == InterCompanyOrigin::Derived)
            {
                ok = false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesLineInvoiced</Name>
				<Source><![CDATA[
    protected boolean isSalesLineInvoiced(Qty _invoicedInTotal)
    {
        return _invoicedInTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeleteInvoicedSalesLine</Name>
				<Source><![CDATA[
    protected boolean checkDeleteInvoicedSalesLine(
        Qty _invoicedInTotal,
        boolean _useWarning,
        boolean _treatInvoicedOrderUpdateWarningAsError)
    {
        boolean ok = true;

        switch (SalesParameters::find().accesLevelInvoiced(_treatInvoicedOrderUpdateWarningAsError))
        {
            case SalesPurchAccesLevel::Warning:
                if (_useWarning)
                {
                    boolean isFullyInvoiced = (salesLine.SalesQty == _invoicedInTotal);
                    str message = isFullyInvoiced ? "@SYS78816" : "@SYS78814";
                    ok = Box::yesNo(message, DialogButton::Yes) == DialogButton::Yes;
                }
                break;

            case SalesPurchAccesLevel::Locked:
                if (_useWarning)
                {
                    warning("@SCM:SalesLineIsInvoicedAndCannotBeDeleted");
                }
                ok = false;
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEInvoiceAdditionalInfo_MX</Name>
				<Source><![CDATA[
    protected boolean checkEInvoiceAdditionalInfo_MX()
    {
        boolean ok = true;

        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled())
        {
            if (salesLine.PropertyNumber_MX
                && (salesLine.CustomsName_MX || salesLine.CustomsDocDate_MX || salesLine.CustomsDocNumber_MX))
            {
                ok = checkFailed(strFmt("@SYS341180", fieldPName(SalesLine, PropertyNumber_MX)));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfUpdate</Name>
				<Source><![CDATA[
    container checkIfUpdate()
    {
        container c;

        c = conIns(c, SalesLineType::posQuotation()              , false);
        c = conIns(c, SalesLineType::posConfirmation()           , this.canConfirmationBeUpdated());
        c = conIns(c, SalesLineType::posPickingList()            , this.canPickingListBeUpdated());
        c = conIns(c, SalesLineType::posPackingSlip()            , this.canPackingslipBeUpdated());
        c = conIns(c, SalesLineType::posInvoice()                , this.canInvoiceBeUpdated());
        c = conIns(c, SalesLineType::posPickingListRegistration(), this.canPickingListBeRegistrated());
        c = conIns(c, SalesLineType::posProjectPackingSlip()     , this.canProjectPackingslipBeUpdated());
        // <GEERU>
        c = conIns(c, SalesLineType::posInvoice4Paym_RU()        , this.canInvoice4PaymBeUpdated_RU());
        // </GEERU>

        return c;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventOwner_RU</Name>
				<Source><![CDATA[
    protected boolean checkInventOwner_RU(InventDim _inventDim = salesLine.inventDim())
    {
        if (_inventDim.InventOwnerId_RU &&
        _inventDim.inventProfile_RU().InventOwnerIdCheckSalesOrder &&
        ! InventOwner_RU::checkSalesOrder(_inventDim.InventOwnerId_RU, salesTable))
        {
            return checkFailed(strFmt("@GLS115657", _inventDim.InventOwnerId_RU, fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU))));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventProfile_RU</Name>
				<Source><![CDATA[
    protected boolean checkInventProfile_RU(InventDim _inventDim = salesLine.inventDim())
    {
        boolean ok = true;
        SalesTable_RU salesTableRU = salesTable.salesTable_RU();

        if (!_inventDim.InventProfileId_RU)
        {
            if (salesLine.isCategoryBased())
            {
                if (salesTableRU.InventProfileType_RU != InventProfileType_RU::NotSpecified &&
                    salesTableRU.InventProfileType_RU != InventProfileType_RU::General)
                {
                    ok = checkFailed(strFmt("@GLS220092", salesTableRU.InventProfileType_RU));
                }
                if (salesTableRU.InventProfileType_RU == InventProfileType_RU::General &&
                    InventProfile_RU::find(salesTableRU.InventProfileId_RU).StockInTransit == StockInTransit_RU::BoughtInTransit)
                {
                    ok = checkFailed(strFmt("@GLS220091", salesTableRU.InventProfileId_RU));
                }
            }

            return ok;
        }

        if (salesTableRU.InventProfileType_RU &&
            salesTableRU.InventProfileType_RU != InventProfile_RU::find(_inventDim.InventProfileId_RU).InventProfileType)
        {
            ok = checkFailed(strFmt("@GLS113738",
                                    _inventDim.InventProfileId_RU,
                                    salesTableRU.InventProfileType_RU));
        }
        if (salesTableRU.InventProfileId_RU &&
            salesTableRU.InventProfileId_RU != _inventDim.InventProfileId_RU)
        {
            if (salesTableRU.InventProfileUseRelated_RU == NoYes::Yes)
            {
                if (!InventProfileRelation_RU::find(salesTableRU.InventProfileId_RU, _inventDim.InventProfileId_RU))
                {
                    ok = checkFailed(strFmt("@GLS113732",
                                            _inventDim.InventProfileId_RU,
                                            salesTableRU.InventProfileId_RU));
                }
            }
            else
            {
                ok = checkFailed(strFmt("@GLS113735",
                                        _inventDim.InventProfileId_RU,
                                        salesTableRU.InventProfileId_RU));
            }
        }

        InventProfile_RU inventProfile = _inventDim.inventProfile_RU();

        if (inventProfile.LockMarkupCustVend
            && !this.canUseMiscChargesOnCustomerVendor())
        {
            ok = checkFailed("@GLS115688");
        }

        if (!salesLine.isStocked())
        {
            if (inventProfile.InventProfileType != InventProfileType_RU::NotSpecified &&
                inventProfile.InventProfileType != InventProfileType_RU::General)
            {
                ok = checkFailed(strFmt("@GLS220092", inventProfile.InventProfileType));
            }
            else if (inventProfile.InventProfileType == InventProfileType_RU::General &&
                     inventProfile.StockInTransit    == StockInTransit_RU::BoughtInTransit)
            {
                ok = checkFailed(strFmt("@GLS220091", inventProfile.InventProfileId));
            }
        }

        if (salesTableRU.InvoicePostingType_RU == SalesInvoicePostingType_RU::GoodsInRoute)
        {
            inventProfile = InventProfile_RU::find(_inventDim.InventProfileId_RU);

            ok = ok && InventProfile_RU::checkGITProfileType(inventProfile.InventProfileType);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseMiscChargesOnCustomerVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether misc. charges can be used on customer/vendor.
    /// </summary>
    /// <returns>true if misc. charges can be used; otherwise, false.</returns>
    protected boolean canUseMiscChargesOnCustomerVendor()
    {
        MarkupTable markupTable;
        MarkupTrans markupTrans;

        select firstonly RecId from markupTrans
                where markupTrans.TransTableId  == salesLine.TableId
                   && markupTrans.TransRecId    == salesLine.RecId
                   && ! markupTrans.Voucher
            exists join markupTable
                where markupTable.MarkupCode    == markupTrans.MarkupCode
                   && markupTable.ModuleType    == MarkupModuleType::Cust
                   && (markupTable.CustType == MarkupType::CustVend ||
                       markupTable.VendType == MarkupType::CustVend);

        return !markupTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsInventDimChangeValidNonStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether any non-changeable inventory dimensions are changed for already updated lines.
    /// </summary>
    /// <param name="_salesLineOrig">
    /// The original sales order line which is updated.
    /// </param>
    /// <returns>
    /// true if inventory dimension changes are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// For non-inventoried lines this check is performed from the <c>inventMovement</c> class.
    /// </remarks>
    protected boolean checkIsInventDimChangeValidNonStocked(SalesLine _salesLineOrig)
    {
        boolean                         ok              = true;

        if ( !salesLine.isStocked())
        {
            InventDim newInventDim = salesLine.inventDim();
            InventDim origInventDim = _salesLineOrig.inventDim();

            if (newInventDim.InventDimId != origInventDim.InventDimId
            && !salesLine.isDropShipment()
            && (salesLine.isPackingSlipOrInvoiceUpdated() || salesLine.registeredInSalesUnit()))
            {
                if (salesLine.isCategoryBased())
                {
                    //Only the dimension site is applicable for category based lines and cannot be modified.
                    List dimFields = new List(Types::Integer);
                    dimFields.addEnd(fieldNum(InventDim, InventSiteId));
                    if (!InventDim::isInventDimEqual(origInventDim, newInventDim, dimFields))
                    {
                        ok = checkFailed(strFmt("@SYS301592", fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventSiteId))));
                    }
                }
                else
                {
                    //Dimensions which are marked as consistent cannot be modified.
                    InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(salesLine.ItemId);
                    if (!InventDim::isInventDimEqualConsistent(inventDimGroupSetup, newInventDim, origInventDim))
                    {
                        ok = InventDim::checkUpdateConsistent(inventDimGroupSetup, newInventDim, origInventDim, salesLine.isStocked());
                    }
                }
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantityUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line quantity that is to be updated is valid.
    /// </summary>
    /// <returns>
    /// true if the line quantity that is to be updated is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The checks are performed for lines that are not inventoried. Line quantity cannot be changed to be
    /// lower than the invoiced or received quantity.
    /// </remarks>
    private boolean checkQuantityUpdate()
    {
        boolean     ok = true;

        if (!salesLine.isStocked())
        {
            SalesLine salesLineOrig = salesLine.orig();

            if (salesLineOrig)
            {
                //Quantity cannot be reduced if the remaining update quantity changes sign.
                if (abs(salesLine.SalesQty)  <  abs(salesLineOrig.SalesQty) && salesLine.SalesQty * salesLineOrig.SalesQty >= 0 )
                {
                    if ((salesLineOrig.RemainSalesPhysical == 0 && salesLineOrig.RemainSalesFinancial == 0)
                    || salesLine.RemainSalesPhysical * salesLineOrig.RemainSalesPhysical   < 0
                    || salesLine.RemainSalesPhysical * salesLineOrig.RemainSalesFinancial  < 0)
                    {
                        ok = checkFailed("@SYS25508");
                    }
                }

                //Quantity may not change sign if the line is partially received or invoiced
                if (salesLine.SalesQty * salesLineOrig.SalesQty < 0)
                {
                    if (salesLine.RemainSalesPhysical  !=  salesLine.SalesQty || salesLine.RemainSalesFinancial != 0)
                    {
                        ok = checkFailed("@SYS25506");
                    }
                }
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantityUpdateNonStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line quantity that is being updated is valid.
    /// </summary>
    /// <returns>
    /// true if line quantity that is being updated is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The checks are performed for non-inventoried lines. Line quantity cannot be changed to be lower
    /// than the invoiced or received quantity.
    /// </remarks>
    public boolean checkQuantityUpdateNonStocked()
    {
        boolean     ok = true;

        if (!salesLine.isStocked())
        {
            SalesLine salesLineOrig = salesLine.orig();
            UnitQty qtyRegistered = salesLine.registeredInSalesUnit();

            if (salesLineOrig)
            {
                //Quantity cannot be reduced if the remaining update quantity changes sign.
                if ((abs(salesLine.SalesQty)  <  abs(salesLineOrig.SalesQty) && salesLine.SalesQty * salesLineOrig.SalesQty >= 0 )
                || (abs(salesLine.RemainSalesPhysical)  <  abs(salesLineOrig.RemainSalesPhysical) && salesLine.RemainSalesPhysical * salesLineOrig.RemainSalesPhysical >= 0 ))
                {
                    if ((salesLineOrig.RemainSalesPhysical == 0 && salesLineOrig.RemainSalesFinancial == 0)
                    || salesLine.RemainSalesPhysical * salesLineOrig.RemainSalesPhysical   < 0
                    || salesLine.RemainSalesPhysical * salesLineOrig.RemainSalesFinancial  < 0
                    || abs(salesLine.SalesQty) < qtyRegistered
                    || abs(salesLine.RemainSalesPhysical) < qtyRegistered)
                    {
                        ok = checkFailed("@SYS25508");
                    }
                }

                //Quantity may not change sign if the line is partially received or invoiced
                if (salesLine.SalesQty * salesLineOrig.SalesQty < 0)
                {
                    if (salesLine.RemainSalesPhysical  !=  salesLine.SalesQty
                    || salesLine.RemainSalesFinancial != 0
                    || qtyRegistered != 0)
                    {
                        ok = checkFailed("@SYS25506");
                    }
                }
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesQty</Name>
				<Source><![CDATA[
    boolean  checkSalesQty(DocumentStatus  documentStatus)
    {
        boolean         ok = false;
        SalesQty        salesQty;

        SalesQuantity salesQuantity = SalesQuantity::construct(documentStatus);

        if (salesLine.canInvoiceOrderLineFromCurrentSalesStatus())
        {
            [salesQty] = salesQuantity.qtySales(salesLine, SalesUpdate::All);

            if (salesQty)
            {
                ok = true;
            }

            [salesQty] = salesQuantity.qtySales(salesLine, SalesUpdate::DeliverNow);

            if (salesQty)
            {
                ok = true;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesUnit</Name>
				<Source><![CDATA[
    boolean  checkSalesUnit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkShipCarrierAddress</Name>
				<Source><![CDATA[
    public boolean checkShipCarrierAddress()
    {
        return LogisticsLocationAppUtil::shipCarrierCheck(salesLine.TableId,
                LogisticsLocation::find(salesLine.shipCarrierLocation()),
                salesLine.DlvMode,
                salesTable.DlvTerm,
                salesLine.ShipCarrierAccount,
                salesLine.CustAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies the parameter values of the update method to ensure the update operation will be correctly executed.
    /// </summary>
    /// <param name="_dropInvent">
    /// A Boolean value that indicates whether the inventory movement that is associated with the line must
    /// be updated; optional.
    /// </param>
    /// <param name="_childBuffer">
    /// The child record that is associated with the line; optional.
    /// </param>
    /// <returns>
    /// true, if the parameters are valid for the given update; otherwise, false.
    /// </returns>
    public boolean checkUpdateParameters(boolean  _dropInvent, Common _childBuffer)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllPriceDiscChangePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all previously set price discount change policies from the corresponding <c>SalesLine</c>
    /// record.
    /// </summary>
    /// <remarks>
    /// Removes policies from both groups manual and system.
    /// </remarks>
    void clearAllPriceDiscChangePolicies()
    {
        salesLine.ManualEntryChangepolicy = 0;
        salesLine.SystemEntryChangePolicy = 0;
        salesLine.SystemEntrySource       = PriceDiscSystemSource::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNoteLine</Name>
				<Source><![CDATA[
    boolean  creditNoteLine()
    {
        if (salesLine.SalesQty < 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventUpd_Estimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an instance of the <c>InventUpd_Estimated</c>.
    /// </summary>
    /// <param name = "_childBuffer">A <c>Common</c> record.</param>
    /// <param name = "_inventMovSubType">An <c>InventMovSubType</c> value.</param>
    /// <returns>An <c>InventUpd_Estimated</c> instance.</returns>
    public InventUpd_Estimated instantiateInventUpd_Estimated(Common _childBuffer, InventMovSubType _inventMovSubType)
    {
        return InventUpd_Estimated::newInventMovement(this.instantiateInventMovement(_inventMovSubType, _childBuffer));
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventUpd_DeleteMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an instance of the <c>InventUpd_DeleteMovement</c>.
    /// </summary>
    /// <param name = "_childBuffer">A <c>Common</c> record.</param>
    /// <param name = "_inventMovSubType">An <c>InventMovSubType</c> value.</param>
    /// <returns>An <c>InventUpd_DeleteMovement</c> instance.</returns>
    protected InventUpd_DeleteMovement instantiateInventUpd_DeleteMovement(Common _childBuffer, InventMovSubType _inventMovSubType)
    {
        return InventUpd_DeleteMovement::newMovement(this.instantiateInventMovement(_inventMovSubType, _childBuffer));
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an instance of the <c>InventMovement</c> class.
    /// </summary>
    /// <param name = "_inventMovSubType">An <c>InventMovSubType</c> value.</param>
    /// <param name = "_childBuffer">A <c>Common</c> record.</param>
    /// <returns>An <c>InventMovement</c> instance.</returns>
    protected InventMovement instantiateInventMovement(InventMovSubType _inventMovSubType, Common _childBuffer)
    {
        return InventMovement::construct(salesLine, _inventMovSubType, _childBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a sales order line record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a sales order line record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryOnDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the inventory on deletion of a sales order line record.
    /// </summary>
    /// <param name="_childBuffer">Child buffer for creating the inventory movement.</param>
    /// <returns>An instance of the <c>InventUpd_DeleteMovement</c> class.</returns>
    public InventUpd_DeleteMovement updateInventoryOnDelete(Common _childBuffer)
    {
        InventUpd_DeleteMovement deleteMovement = this.instantiateInventUpd_DeleteMovement(_childBuffer, InventMovSubType::None);
        if (deleteMovement)
        {
            deleteMovement.updateNow();
        }

        return deleteMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePendingRegistrationsNonStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the pending registration records for the line.
    /// </summary>
    public void deletePendingRegistrationsNonStocked()
    {
        if (this.skipDeletePendingRegistrationsNonStocked())
        {
            // do nothing if this is stocked item and creation of SDL and SDH is disabled because only none-stocked item has pending registration records
            return;
        }
            
        //Delete the pending registration records for the purchase line.
        SalesNonStockedRegistrationHelper salesNonStockedRegistrationHelper = TradeNonStockedRegistrationHelper::newFromSalesPurchLine(salesLine);
        salesNonStockedRegistrationHelper.deletePendingRegistration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchLine</Name>
				<Source><![CDATA[
    void  deletePurchLine(SalesLine _salesLine)
    {
        if (salesLine.SkipUpdate == InterCompanySkipUpdate::Internal
        ||  salesLine.SkipUpdate == InterCompanySkipUpdate::Both
        || !SalesTableType::construct(salesTable).canCreatePurchOrder())
        {
            return;
        }

        PurchLine purchLine = PurchLine::findInventTransId(_salesLine.InventRefTransId, true);

        if (purchLine)
        {
            if (purchLine.RemainPurchFinancial != 0 && purchLine.isDropShipment())
            {
                throw error ("@SYS191052");
            }

            purchLine.SkipUpdate = InterCompanySkipUpdate::Internal;
            purchLine.delete();

            PurchTable purchTable = purchLine.purchTable(true);

            if (purchTable.InterCompanyOrder
                && !purchTable.existPurchLine()
                && !PurchTableVersion::findLatest(purchTable.PurchId, purchTable.dataAreaId))
            {
                purchTable.SkipUpdate = InterCompanySkipUpdate::Internal;
                purchTable.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveredInTotalDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating delivered in total quantity.
    /// </summary>
    /// <param name = "_salesLineType">An instance of the <c>SalesLineType</c> class calling the delegate.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> object for returning the delivered in total quantity.</param>
    delegate void deliveredInTotalDelegate(SalesLineType _salesLineType, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveredInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates delivered in total quantity.
    /// </summary>
    /// <returns>A total delivered quantity.</returns>
    /// <remarks>Can bypass standard logic of this method by subscribing to <c>deliveredInTotalDelegate</c> delegate and providing its own result.</remarks>
    public SalesQty deliveredInTotal()
    {
        SalesQty qtySales = 0;

        EventHandlerResult result = EventHandlerResult::newSingleResponse();
        this.deliveredInTotalDelegate(this, result);
        
        if (result.hasResult())
        {
            qtySales = result.result();
        }
        else if (salesLine.InventTransId)
        {
            qtySales        = (select sum(QtyPhysical) from custInvoiceTrans
                                  where custInvoiceTrans.InventTransId == salesLine.InventTransId).QtyPhysical;

            qtySales       += (select sum(Qty) from custPackingSlipTrans
                                  where custPackingSlipTrans.InventTransId == salesLine.InventTransId).Qty;
        }

        return qtySales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionCopy</Name>
				<Source><![CDATA[
    protected DimensionCopy dimensionCopy()
    {
        if (!dimensionCopy)
        {
            dimensionCopy = DimensionCopy::newFromTable(salesLine, CompanyInfo::findDataArea(curext()).RecId);
        }

        return dimensionCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDeliveryDateControl</Name>
				<Source><![CDATA[
    boolean doDeliveryDateControl()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doScrap</Name>
				<Source><![CDATA[
    boolean doScrap()
    {
        return (salesLine.Scrap == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventNotificationUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales order line responsible user ID that is used for notification.
    /// </summary>
    /// <returns>
    /// A string value that represents a user ID.
    /// </returns>
    public UserId eventNotificationUserId()
    {
        UserId                  userId;

        WorkerSalesResponsible workerSalesResponsible = salesTable.WorkerSalesResponsible;

        if ( ! workerSalesResponsible
        && salesLine.MatchingAgreementLine)
        {
            AgreementLine agreementLine = AgreementLine::find(salesLine.MatchingAgreementLine);
            workerSalesResponsible    = SalesAgreementHeaderDefault::findSalesAgreementHeader(agreementLine.Agreement).WorkerSalesResponsible;
        }

        if ( ! workerSalesResponsible
        && salesTable.MatchingAgreement)
        {
            workerSalesResponsible    = SalesAgreementHeaderDefault::findSalesAgreementHeader(salesTable.MatchingAgreement).WorkerSalesResponsible;
        }

        if (workerSalesResponsible)
        {
            userId = DirPersonUserEx::findWorker(workerSalesResponsible).User;
        }

        if (! userId)
        {
            // send at least notification to current user
            userId = curUserId();
        }

        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formProduction</Name>
				<Source><![CDATA[
    void formProduction(Object element)
    {
        Args         args;
        FormRun      formProduction;

        if (!salesLine.RecId || !salesLine.InventTransId)
        {
            throw error("@SYS24669");
        }

        if (!salesLine.inventTable().inventItemType().canBeProduced())
        {
            throw error("@SYS24822");
        }

        if (!InventItemOrderSetupMap::find(salesLine.ItemId, InventItemOrderSetupMap::module2SetupType(ModuleInventPurchSales::Invent), salesLine.InventDimId).checkNotStopped())
        {
            return;
        }

        if (!ProdTableReferences::hasSalesLineProductions(salesLine))
        {
            if (salesLine.SalesType == SalesType::ItemReq && !salesLine.RemainInventPhysical)
            {
                if (salesLine.inventTable().isFormulaAllowed())
                {
                    throw error("@SCM:ErrorBatchOrderDeliveryRemainderQtyZero");
                }
                throw error("@SYS122589");
            }

            formProduction = this.openProductionOrderForm(formStr(ProdTableCreate), salesLine, element);

            if (FormDataUtil::getFormDataSource(salesLine))
            {
                FormDataUtil::getFormDataSource(salesLine).reread();
                FormDataUtil::getFormDataSource(salesLine).refresh();
            }
        }
        if (formProduction && formProduction.closedOk() || !formProduction)
        {
            formProduction = this.openProductionOrderForm(formStr(ProdTable), salesLine, element);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createArgumentsForProductionOrderForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the arguments for the form initialization.
    /// </summary>
    /// <param name = "_formName">The form name.</param>
    /// <param name = "_salesLine">The <c>SalesLine</c> record.</param>
    /// <param name = "_element">The parent form reference.</param>
    /// <returns>The arguments for the form initialization.</returns>
    protected Args createArgumentsForProductionOrderForm(FormName _formName, SalesLine _salesLine, Object _element)
    {
        Args args = new Args();
        args.name(_formName);
        args.caller(_element);
        args.record(_salesLine);

        return Args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProductionOrderForm</Name>
				<Source><![CDATA[
    private FormRun openProductionOrderForm(FormName _formName, SalesLine _salesLine, Object _element)
    {
        Args args = this.createArgumentsForProductionOrderForm(_formName, _salesLine, _element);

        FormRun formProduction = classfactory.formRunClass(args);
        formProduction.init();
        formProduction.run();
        formProduction.wait();

        return formProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteWarning</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the alternative warning message for deleting the order line.
    /// </summary>
    /// <returns>
    ///     The alternative warning message. If an empty string is returned the standard message should be used.
    /// </returns>
    str getDeleteWarning()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPendingRegistrationQuantityToUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the pending registration quantity to update.
    /// </summary>
    /// <param name="_isPendingRegistrationsToBeCreated">
    /// A Boolean value that specifies whether to create or to update the pending registrations.
    /// </param>
    /// <returns>
    /// The line quantity that is to be updated in the <c>InventPendingQuantity</c> table as pending
    /// registration.
    /// </returns>
    public SalesQty getPendingRegistrationQuantityToUpdate(boolean _isPendingRegistrationsToBeCreated)
    {
        SalesQty lineQty = salesLine.SalesQty != 0? salesLine.RemainSalesPhysical: salesLine.ExpectedRetQty;
        SalesQty origLineQty = salesLine.SalesQty != 0? salesLine.orig().RemainSalesPhysical: salesLine.orig().ExpectedRetQty;

        if (_isPendingRegistrationsToBeCreated)
        {
            return lineQty < 0? abs(lineQty): 0;
        }
        else
        {
            return lineQty <= 0? abs(lineQty) - abs(origLineQty) : 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPriceDiscChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether price discount policies exist for the current record.
    /// </summary>
    /// <returns>
    /// true if price discount policies exist; otherwise, false.
    /// </returns>
    public boolean hasPriceDiscChangePolicy()
    {
        return salesLine.SystemEntryChangePolicy
           || salesLine.SystemEntrySource
           || salesLine.ManualEntryChangepolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailVariantId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the product variant <c>RetailVariantId</c> value by the <c>InventTransId</c> source document line reference; otherwise - by specified sales line product dimensions.
    /// </summary>
    /// <param name = "_inventTransId">A reference to source document line</param>
    /// <returns>A product variant <c>RetailVariantId</c> value</returns>
    protected RetailVariantId getRetailVariantId(InventTransId _inventTransId)
    {
        RetailVariantId retailVariantId;
        SalesLine       originSalesLine = SalesLine::findInventTransId(_inventTransId);

        if (originSalesLine)
        {
            retailVariantId = originSalesLine.RetailVariantId;
        }
        else
        {
            salesLine.initRetailVariantId(salesLine.inventDim());
            retailVariantId = salesLine.RetailVariantId;
        }

        return retailVariantId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesLine</c> record by using an <c>AgreementLine</c> record.
    /// </summary>
    /// <param name="_agreementLine">
    /// The <c>AgreementLine</c> record from which to initialize the <c>SalesLine</c> record.
    /// </param>
    public void  initFromAgreementLine(AgreementLine _agreementLine)
    {
        InventDim                       inventDim            = salesLine.inventDim();
        InventDim                       agreementInventDim   = _agreementLine.inventDim();
        AgreementLineDefault            agreementLineDefault = AgreementLineDefault::findAgreementLine(_agreementLine.RecId);
        List                            dimFields            = InventDim::dimAgreementFieldList();
        ListEnumerator                  enumerator           = dimFields.getEnumerator();

        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            if (agreementInventDim.(inventDimFieldId))
            {
                inventDim.(inventDimFieldId) = agreementInventDim.(inventDimFieldId);
            }
        }
        inventDim.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;

        salesLine.setInventDimId(inventDim.InventDimId, inventDim);

        salesLine.SalesGroup = agreementLineDefault.SalesCommissionGroup;

        salesLine.ProjId = _agreementLine.ProjectProjId ? _agreementLine.ProjectProjId : salesLine.ProjId;
        if (agreementLineDefault.ProjectCategory)
        {
            salesLine.ProjCategoryId = agreementLineDefault.ProjectCategory;
            if (agreementLineDefault.ProjectActivityNumber)
            {
                salesLine.ActivityNumber = agreementLineDefault.ProjectActivityNumber;
            }
        }

        salesLine.salesPurchLineInterface().setAgreementQtyAndPrice(_agreementLine);

        salesLine.DefaultDimension = salesLine.mergeDimension(_agreementLine.DefaultDimension, salesLine.DefaultDimension);

        salesLine.calcPackingUnit(inventDim);
        salesLine.calcPackingUnitQty(inventDim);

        if (agreementLineDefault.SalesModeOfDelivery)
        {
            salesLine.DlvMode = agreementLineDefault.SalesModeOfDelivery;
        }

        salesLine.MatchingAgreementLine = _agreementLine.RecId;

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            salesLine.PostingProfile_RU = AgreementLineExt_RU::findByAgreementLine(_agreementLine.RecId).PostingProfile;
            salesLine.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(salesTable.salesTable_RU().AgreementHeaderExt_RU, salesLine.DefaultDimension);
        }
        // </GEERU>

        salesLine.PdsExcludeFromRebate = agreementLineDefault.PdsExcludeFromRebate;

        if (salesLine.inventTable().pdsBaseAttributeId)
        {
            PDSSalesLinePricingCalculation salesLinePricingCalculation = salesLine.pdsSalesLinePricingCalculation();
            salesLinePricingCalculation.PriceCalculation = PDSAgreementLinePricingCalculation::findByAgreementLine(_agreementLine.RecId).PriceCalculation;
            salesLine.SysExtensionSerializerMap::packExtensionTable(salesLinePricingCalculation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustConfirmTrans</Name>
				<Source><![CDATA[
    void  initFromCustConfirmTrans(CustConfirmTrans custConfirmTrans,
                               boolean          copyPrecisely,
                               boolean          copyPriceDisc,
                               boolean          copyQty,
                               Qty              qty,
                               PdsCWInventQty   _cwQty = 0
                               )
    {
        this.initFromItemOrCategory(custConfirmTrans.ItemId, custConfirmTrans.SalesCategory, custConfirmTrans.Name);

        if (copyQty)
        {
            salesLine.setInventDimId(custConfirmTrans.InventDimId);
            if (#PdsCatchWeightEnabled)
            {
                salesLine.PdsCWQty       = _cwQty;
            }
            salesLine.SalesQty           = qty;
            salesLine.SalesUnit          = custConfirmTrans.SalesUnit;
            salesLine.QtyOrdered         = salesLine.calcQtyOrdered();
        }
        else
        {
            InventDim inventDim = salesLine.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(salesLine.ItemId, custConfirmTrans.inventDim(), inventDim);
            salesLine.setInventDimIdFromInventDim(inventDim);
        }

        if (copyPriceDisc)
        {
            salesLine.SalesPrice         = custConfirmTrans.SalesPrice;
            salesLine.PriceUnit          = custConfirmTrans.PriceUnit;
            salesLine.LinePercent        = custConfirmTrans.LinePercent;
            salesLine.LineDisc           = custConfirmTrans.LineDisc;
            salesLine.MultiLnDisc        = custConfirmTrans.MultiLnDisc;
            salesLine.MultiLnPercent     = custConfirmTrans.MultiLnPercent;
            salesLine.SalesMarkup        = custConfirmTrans.SalesMarkup;
            salesLine.LineAmount         = custConfirmTrans.LineAmount;
        }

        if (copyPrecisely)
        {
            salesLine.Name              = custConfirmTrans.Name;
            salesLine.ExternalItemId    = custConfirmTrans.ExternalItemId;
            salesLine.TaxGroup          = custConfirmTrans.TaxGroup;
            salesLine.OverrideSalesTax  = custConfirmTrans.OverrideSalesTax;
            this.setTaxItemGroup(custConfirmTrans.TaxItemGroup);
            salesLine.DefaultDimension  = salesLine.copyDimension(custConfirmTrans.DefaultDimension, this.dimensionCopy());
            salesLine.SalesGroup        = custConfirmTrans.SalesGroup;
            salesLine.DlvTerm           = custConfirmTrans.DlvTerm;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoice4PaymTrans_RU</Name>
				<Source><![CDATA[
    final public void initFromCustInvoice4PaymTrans_RU(CustInvoice4PaymTrans_RU _custInvoice4PaymTrans,
                                                   boolean                  _copyPrecisely,
                                                   boolean                  _copyPriceDisc,
                                                   boolean                  _copyQty,
                                                   Qty                      _qty,
                                                   PdsCWInventQty           _pdsCWQty = 0
                                                   )
    {
        this.initFromItemOrCategory(_custInvoice4PaymTrans.ItemId, _custInvoice4PaymTrans.Category, _custInvoice4PaymTrans.Name);

        if (_copyQty)
        {
            salesLine.setInventDimId(_custInvoice4PaymTrans.InventDimId);
            salesLine.SalesQty          = _qty;
            salesLine.SalesUnit         = _custInvoice4PaymTrans.SalesUnit;
            salesLine.PdsCWQty          = _pdsCWQty;
            salesLine.QtyOrdered        = salesLine.calcQtyOrdered();
        }
        else
        {
            InventDim inventDim = salesLine.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(salesLine.ItemId, _custInvoice4PaymTrans.inventDim(), inventDim);
            salesLine.setInventDimIdFromInventDim(inventDim);
        }

        if (_copyPriceDisc)
        {
            salesLine.SalesPrice        = _custInvoice4PaymTrans.SalesPrice;
            salesLine.PriceUnit         = _custInvoice4PaymTrans.PriceUnit;
            salesLine.LinePercent       = _custInvoice4PaymTrans.LinePercent;
            salesLine.LineDisc          = _custInvoice4PaymTrans.LineDisc;
            salesLine.MultiLnDisc       = _custInvoice4PaymTrans.MultiLnDisc;
            salesLine.MultiLnPercent    = _custInvoice4PaymTrans.MultiLnPercent;
            salesLine.SalesMarkup       = _custInvoice4PaymTrans.SalesMarkup;
            salesLine.LineAmount        = _custInvoice4PaymTrans.LineAmount;
        }

        if (_copyPrecisely)
        {
            salesLine.Name              = _custInvoice4PaymTrans.Name;
            salesLine.ExternalItemId    = _custInvoice4PaymTrans.ExternalItemId;
            salesLine.TaxGroup          = _custInvoice4PaymTrans.TaxGroup;
            salesLine.setTaxItemGroup(_custInvoice4PaymTrans.TaxItemGroup);
            salesLine.DefaultDimension  = salesLine.copyDimension(_custInvoice4PaymTrans.DefaultDimension, this.dimensionCopy());
            salesLine.SalesGroup        = _custInvoice4PaymTrans.SalesGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    void  initFromCustInvoiceTrans(CustInvoiceTrans custInvoiceTrans,
                                   boolean          copyPrecisely,
                                   boolean          copyPriceDisc,
                                   boolean          copyQty,
                                   Qty              qty,
                                   PdsCWInventQty   _pdsCWQty = 0
                                   )
    {
        CustInvoiceTrans_RU custInvoiceTrans_RU;
        SalesLine_IN        salesLine_IN;
        CustInvoiceJour     custInvoiceJourLoc;
        CustInvoiceTrans_IN custInvoiceTrans_IN;
        EInvoiceTrans_MX    eInvoiceTrans;

        if (copyPrecisely)
        {
            using (CostMovingAverageUseActiveCostThenItemPriceContext context = new CostMovingAverageUseActiveCostThenItemPriceContext())
            {
                this.initFromItemOrCategory(custInvoiceTrans.ItemId, custInvoiceTrans.SalesCategory, custInvoiceTrans.Name);
            }
        }
        else
        {
            this.initFromItemOrCategory(custInvoiceTrans.ItemId, custInvoiceTrans.SalesCategory, custInvoiceTrans.Name);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            custInvoiceTrans_RU = custInvoiceTrans.custInvoiceTrans_RU();
        }

        if (copyQty || custInvoiceTrans_RU.InventTransIdDelivery_RU)
        {
            this.initializeSalesLineQuantitiesFromCustInvoiceTrans(custInvoiceTrans, qty, _pdsCWQty);
        }
        else
        {
            InventDim inventDim = salesLine.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(salesLine.ItemId, custInvoiceTrans.inventDim(), inventDim);
            salesLine.setInventDimIdFromInventDim(inventDim);
        }

        if (copyPriceDisc)
        {
            if (custInvoiceTrans.inventTable().pdsBaseAttributeId)
            {
                salesLine.SalesPrice     = PDSCustInvoiceTransPricingCalculation::findByCustInvoiceTrans(custInvoiceTrans.RecId).OriginalSalesPrice;
            }
            else
            {
                salesLine.SalesPrice     = custInvoiceTrans.SalesPrice;
            }

            salesLine.PriceUnit          = custInvoiceTrans.PriceUnit;
            salesLine.LinePercent        = custInvoiceTrans.LinePercent;
            salesLine.LineDisc           = custInvoiceTrans.LineDisc;
            salesLine.MultiLnDisc        = custInvoiceTrans.MultiLnDisc;
            salesLine.MultiLnPercent     = custInvoiceTrans.MultiLnPercent;
            salesLine.SalesMarkup        = custInvoiceTrans.SalesMarkup;

            if (custInvoiceTrans.custInvoiceJour().InclTax && !salesLine.SalesPrice)
            {
                if (this.returnItem() || !salesLine.SalesQty)
                {
                    salesLine.LineAmount = custInvoiceTrans.lineAmountInclTax();
                }
                else
                {
                    salesLine.LineAmount = PriceDisc::price2Amount(custInvoiceTrans.SalesPrice,
                                                                 custInvoiceTrans.PriceUnit,
                                                                 custInvoiceTrans.DiscAmount,
                                                                 salesLine.SalesQty,
                                                                 custInvoiceTrans.Qty,
                                                                 custInvoiceTrans.SalesMarkup,
                                                                 custInvoiceTrans.DiscPercent,
                                                                 custInvoiceTrans.CurrencyCode,
                                                                 custInvoiceTrans.lineAmountInclTax(),
                                                                 false);
                }
            }
            else
            {
                if (this.returnItem() || !salesLine.SalesQty)
                {
                    salesLine.LineAmount = custInvoiceTrans.LineAmount;
                }
                else
                {
                    salesLine.LineAmount = PriceDisc::price2Amount(custInvoiceTrans.SalesPrice,
                                                                 custInvoiceTrans.PriceUnit,
                                                                 custInvoiceTrans.DiscAmount,
                                                                 salesLine.SalesQty,
                                                                 custInvoiceTrans.Qty,
                                                                 custInvoiceTrans.SalesMarkup,
                                                                 custInvoiceTrans.DiscPercent,
                                                                 custInvoiceTrans.CurrencyCode,
                                                                 custInvoiceTrans.LineAmount,
                                                                 false);
                }
            }
        }

        if (copyPrecisely)
        {
            salesLine.setInventDimId(custInvoiceTrans.InventDimId);
            salesLine.Name               = custInvoiceTrans.Name;
            salesLine.ExternalItemId     = custInvoiceTrans.ExternalItemId;
            
            salesLine.initBarcode();

            if (CustParameters::isReturnAlternativePostingProfileEnabled() && salesLine.SalesType == SalesType::ReturnItem)
            {
                salesLine.LedgerDimension = this.ledgerDimensionItem(salesLine.inventTable(), InventAccountType::SalesReturn);
            }
            else
            {
                salesLine.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(custInvoiceTrans.LedgerDimension);
            }

            if (salesLine.QtyOrdered)
            {
                salesLine.CostPrice      = -custInvoiceTrans.inventCostAmount() / (qty ? -custInvoiceTrans.inventQty() : salesLine.QtyOrdered);
            }

            salesLine.TaxGroup           = custInvoiceTrans.TaxGroup;
            salesLine.OverrideSalesTax   = custInvoiceTrans.OverrideSalesTax;
            this.setTaxItemGroup(custInvoiceTrans.TaxItemGroup);

            salesLine.DefaultDimension   = salesLine.copyDimension(custInvoiceTrans.DefaultDimension, this.dimensionCopy());
            salesLine.SalesGroup         = custInvoiceTrans.SalesGroup;
            salesLine.Transport          = custInvoiceTrans.Transport;
            salesLine.Port               = custInvoiceTrans.Port;
            salesLine.StatProcId         = custInvoiceTrans.StatProcId;
            salesLine.IntrastatCommodity = custInvoiceTrans.IntrastatCommodity;
            salesLine.OrigCountryRegionId = custInvoiceTrans.OrigCountryRegionId;
            salesLine.OrigStateId        = custInvoiceTrans.OrigState;
            salesLine.AssetId_RU         = custInvoiceTrans_RU.AssetId_RU;
        }

        if (copyPrecisely
            && (TaxWithholdParameters_IN::checkTaxParameters() || TaxParameters::checkTaxParameters_IN()))
        {
            custInvoiceTrans_IN = custInvoiceTrans.custInvoiceTrans_IN();
            salesLine_IN = salesLine.salesLine_IN();
        }

        if (copyPrecisely
            && TaxWithholdParameters_IN::checkTaxParameters())
        {
            salesLine.InventRefId                      = custInvoiceTrans.SalesId;
            salesLine_IN.tdsGroup                   = custInvoiceTrans_IN.tdsGroup_IN;
            salesLine_IN.tcsGroup                   = custInvoiceTrans_IN.tcsGroup_IN;
            salesLine_IN.CreditNoteDate             = custInvoiceTrans.InvoiceDate;
            salesLine_IN.TaxWithholdLineNum         = custInvoiceTrans.LineNum;
        }
        if (copyPrecisely
            && (TaxWithholdParameters_IN::checkTaxParameters() || TaxParameters::checkTaxParameters_IN()))
        {
            select custInvoiceJourLoc
                where custInvoiceJourLoc.InvoiceId              == custInvoiceTrans.InvoiceId
                   && custInvoiceJourLoc.SalesId                == custInvoiceTrans.OrigSalesId
                   && custInvoiceJourLoc.InvoiceDate            == custInvoiceTrans.InvoiceDate
                   && custInvoiceJourLoc.NumberSequenceGroup    == custInvoiceTrans.NumberSequenceGroup;

            if (custInvoiceJourLoc)
            {
                salesLine_IN.TaxWithholdVoucher = custInvoiceJourLoc.LedgerVoucher;
            }

            SalesLine    salesLineLoc       = SalesLine::findInventTransId(custInvoiceTrans.InventTransId);
            SalesLine_IN salesLineLoc_IN    = salesLineLoc.salesLine_IN();
            salesLine_IN.MaximumRetailPrice = salesLineLoc_IN.MaximumRetailPrice;

            if (salesLineLoc_IN.CustomsMaxRetailPrice        &&
                salesLineLoc.salesTable().CustomsExportOrder_IN)
            {
                salesLine_IN.CustomsMaxRetailPrice      = salesLineLoc_IN.CustomsMaxRetailPrice;
                salesLine_IN.MaximumRetailPrice         = CurrencyHelper_IN::customsCurAmount_IN(salesLine_IN.CustomsMaxRetailPrice, salesLineLoc.CurrencyCode, Direction_IN::Export);
            }
            if (custInvoiceTrans.Qty != qty)
            {
                RealBase factor = custInvoiceTrans_IN.AssessableValue_IN / custInvoiceTrans.Qty;
                salesLine_IN.AssessableValueTransactionCurrency = factor * qty;
            }
            else
            {
                salesLine_IN.AssessableValueTransactionCurrency = custInvoiceTrans_IN.AssessableValue_IN;
            }

            salesLine.packSalesLine_IN(salesLine_IN);
        }

        if (copyPrecisely
            && (TaxWithholdParameters_IN::checkTaxParameters() || TaxParameters::checkTaxParameters_IN()))
        {
            salesLine.packSalesLine_IN(salesLine_IN);
        }

        if (BrazilParameters::isEnabled())
        {
            this.postInitFromCustInvoiceTrans_BR(custInvoiceTrans, copyPrecisely, copyPriceDisc, copyQty, qty);
        }

        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled() || EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            eInvoiceTrans = EInvoiceTrans_MX::findByRef(custInvoiceTrans.TableId, custInvoiceTrans.RecId);
            if (eInvoiceTrans)
            {
                salesLine.satProductCode_MX = eInvoiceTrans.ProductCode;
                salesLine.satUnitCode_MX    = eInvoiceTrans.uomCode;
            }
        }

        salesLine.RetailVariantId = this.getRetailVariantId(custInvoiceTrans.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustPackingSlipTrans</Name>
				<Source><![CDATA[
    void  initFromCustPackingSlipTrans(CustPackingSlipTrans custPackingSlipTrans,
                                   boolean              copyPrecisely,
                                   boolean              copyPriceDisc,
                                   boolean              copyQty,
                                   Qty                  qty,
                                   PdsCWInventQty       _cwQty = 0
                                   )
    {
        this.initFromItemOrCategory(custPackingSlipTrans.ItemId, custPackingSlipTrans.SalesCategory, custPackingSlipTrans.Name);

        if (copyQty)
        {
            salesLine.setInventDimId(custPackingSlipTrans.InventDimId);
            if (#PdsCatchWeightEnabled)
            {
                salesLine.PdsCWQty       = _cwQty;
            }
            salesLine.SalesQty           = qty;
            salesLine.SalesUnit          = custPackingSlipTrans.SalesUnit;
            salesLine.QtyOrdered         = custPackingSlipTrans.Qty == qty ? -custPackingSlipTrans.inventQty() : salesLine.calcQtyOrdered();
        }
        else
        {
            InventDim inventDim = salesLine.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(salesLine.ItemId, custPackingSlipTrans.inventDim(), inventDim);
            salesLine.setInventDimIdFromInventDim(inventDim);
        }

        if (copyPrecisely)
        {
            salesLine.Name               = custPackingSlipTrans.Name;
            salesLine.ExternalItemId     = custPackingSlipTrans.ExternalItemId;
            salesLine.DefaultDimension   = salesLine.copyDimension(custPackingSlipTrans.DefaultDimension, this.dimensionCopy());

            if (salesLine.QtyOrdered)
            {
                salesLine.CostPrice      = -custPackingSlipTrans.inventCostAmountPhysical() / (qty ? -custPackingSlipTrans.inventQty() : salesLine.QtyOrdered);
            }

            salesLine.SalesGroup         = custPackingSlipTrans.SalesGroup;
            salesLine.Transport          = custPackingSlipTrans.Transport;
            salesLine.Port               = custPackingSlipTrans.Port;
            salesLine.StatProcId         = custPackingSlipTrans.StatProcId;
            salesLine.IntrastatCommodity = custPackingSlipTrans.IntrastatCommodity;
            salesLine.OrigCountryRegionId = custPackingSlipTrans.OrigCountryRegionId;
            salesLine.OrigStateId        = custPackingSlipTrans.OrigStateId;
            salesLine.DlvTerm            = custPackingSlipTrans.DlvTerm;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustQuotationTrans</Name>
				<Source><![CDATA[
    void  initFromCustQuotationTrans(CustQuotationTrans custQuotationTrans,
                                 boolean            copyPrecisely,
                                 boolean            copyPriceDisc,
                                 boolean            copyQty,
                                 Qty                qty)
    {
        // <GIN>
        // </GIN>

        this.initFromItemOrCategory(custQuotationTrans.ItemId, custQuotationTrans.SalesCategory, custQuotationTrans.Name);

        if (copyQty)
        {
            salesLine.setInventDimId(custQuotationTrans.InventDimId);
            salesLine.SalesQty           = qty;
            salesLine.SalesUnit          = custQuotationTrans.SalesUnit;
            salesLine.QtyOrdered         = salesLine.calcQtyOrdered();
        }
        else
        {
            InventDim inventDim = salesLine.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(salesLine.ItemId, custQuotationTrans.inventDim(), inventDim);
            salesLine.setInventDimIdFromInventDim(inventDim);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            salesLine.initRetailVariantId();
        }

        if (copyPriceDisc)
        {
            salesLine.SalesPrice         = custQuotationTrans.SalesPrice;
            salesLine.PriceUnit          = custQuotationTrans.PriceUnit;
            salesLine.LinePercent        = custQuotationTrans.LinePercent;
            salesLine.LineDisc           = custQuotationTrans.LineDisc;
            salesLine.MultiLnDisc        = custQuotationTrans.MultiLnDisc;
            salesLine.MultiLnPercent     = custQuotationTrans.MultiLnPercent;
            salesLine.SalesMarkup        = custQuotationTrans.SalesMarkup;
            salesLine.LineAmount         = custQuotationTrans.LineAmount;
        }

        if (copyPrecisely)
        {
            salesLine.Name               = custQuotationTrans.Name;
            salesLine.ExternalItemId     = custQuotationTrans.ExternalItemId;
            salesLine.TaxGroup           = custQuotationTrans.TaxGroup;
            salesLine.OverrideSalesTax   = custQuotationTrans.OverrideSalesTax;
            this.setTaxItemGroup(custQuotationTrans.TaxItemGroup);
            salesLine.DefaultDimension   = salesLine.copyDimension(custQuotationTrans.DefaultDimension, this.dimensionCopy());
            salesLine.SalesGroup         = custQuotationTrans.SalesGroup;
            salesLine.DlvTerm            = custQuotationTrans.DlvTerm;
        }

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            SalesLine_IN salesLine_IN = salesLine.salesLine_IN();
            salesLine_IN.AssessableValueTransactionCurrency        = custQuotationTrans.AssessableValue_IN;
            salesLine_IN.MaximumRetailPrice     = custQuotationTrans.MaximumRetailPrice_IN;
            salesLine.packSalesLine_IN(salesLine_IN);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesLine</c> object, based on the <c>SalesCategory</c> record.
    /// </summary>
    /// <param name="_salesCategory">
    /// The <c>SalesCategory</c> record with which to initialize the sales line.
    /// </param>
    /// <param name="_name">
    /// The name to assign to the line.
    /// </param>
    protected void initFromEcoResCategory(SalesCategory _salesCategory, ItemFreeTxt _name)
    {
        salesLine.SalesCategory = _salesCategory;
        salesLine.Name          = _name;
        salesLine.PriceUnit     = 1.00; //default value for description based lines
        this.setStockedProduct();

        salesLine.setDeliveryDateControlType();
        TaxItemGroupHeading taxItemGroupHeading = SalesCategoryItemTaxGroup::getSalesCategoryItemTaxGroup(_salesCategory, CompanyInfo::current());

        if (taxItemGroupHeading)
        {
            salesLine.TaxItemGroup = taxItemGroupHeading.TaxItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDimensionsSpecificSalesQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the <c>SalesQty</c> of the <c>SalesLine</c>.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record.</param>
    /// <returns>
    ///     The <c>SalesQty</c> of the <c>SalesLine</c>.
    /// </returns>
    protected SalesQty calcDimensionsSpecificSalesQty(InventTable _inventTable)
    {
        salesLine.SalesQty = salesLine.SalesQty ? salesLine.SalesQty : _inventTable.salesStandardQty(salesLine.InventDimId);

        if (!salesLine.SalesQty && PdsGlobal::pdsIsCWItem(salesLine.ItemId))
        {
            // Multiply with CW qty in case it has been prepopulated
            PdsNominalQty nominalQty = PdsCatchWeightItem::find(salesLine.ItemId).nominalQty() * minOne(salesLine.PdsCWQty);

            return salesLine.unitConvertInvent2Sales(nominalQty);
        }

        return salesLine.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDimensionsSpecificPdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>PdsCWQty</c> of the <c>SalesLine</c>.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record.</param>
    /// <returns>
    ///     The <c>PdsCWQty</c> of the <c>SalesLine</c>.
    /// </returns>
    private PdsCWQty calcDimensionsSpecificPdsCWQty(InventTable _inventTable)
    {
        if (!salesLine.PdsCWQty && PdsGlobal::pdsIsCWItem(salesLine.ItemId))
        {
            return PdsCatchWeight::convertQtyToCWQty(salesLine.ItemId, salesLine.SalesQty, salesLine.SalesUnit);
        }

        return salesLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes product dimension specific order defaulting.
    /// </summary>
    /// <param name = "_inventDistinctProductDimensionSpecificDefaultingArgs">Product dimension specific order defaulting arguments.</param>
    public void initDimensionsSpecificDefaulting(InventDistinctProductDimensionSpecificDefaultingArgs _inventDistinctProductDimensionSpecificDefaultingArgs)
    {
        InventDistinctProductDimensionSpecificDefaultingArgsSalesLine arguments = _inventDistinctProductDimensionSpecificDefaultingArgs as InventDistinctProductDimensionSpecificDefaultingArgsSalesLine;
        InventDim inventDim = this.initDimensionsSpecificDefaultingInventDim(arguments);

        inventDim = InventDim::findOrCreate(inventDim);

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesOrderTypeActivities().initDimensionsSpecificDefaulting(salesLine, inventDim, arguments))
        {
            salesLine.setInventDimId(inventDim.InventDimId, inventDim);

            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                salesLine.initRetailVariantId(inventDim);
            }

            salesLine.initFromCustExternalItemDescription();

            if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
            {
                if (PdsGlobal::pdsIsCWItem(arguments.InventTable.ItemId))
                {
                    if (!salesLine.PdsCWQty)
                    {
                        salesLine.PdsCWQty = PdsCatchWeight::convertQtyToCWQty(
                                                salesLine.ItemId,
                                                arguments.InventTable.salesStandardQty(inventDim.InventDimId),
                                                salesLine.SalesUnit);

                        if (!salesLine.PdsCWQty)
                        {
                            salesLine.PdsCWQty = 1;
                        }
                    }

                    salesLine.SalesQty = PdsCatchWeight::inventQty(
                                            salesLine.ItemId,
                                            salesLine.PdsCWQty,
                                            salesLine.SalesUnit);
                }
                else
                {
                    salesLine.SalesQty  = salesLine.SalesQty
                                        ? salesLine.SalesQty
                                        : arguments.InventTable.salesStandardQty(inventDim.InventDimId);
                }
            }
            else
            {
                salesLine.SalesQty  = this.calcDimensionsSpecificSalesQty(arguments.InventTable);
                salesLine.PdsCWQty  = this.calcDimensionsSpecificPdsCWQty(arguments.InventTable);
            }


            salesLine.QtyOrdered        = salesLine.calcQtyOrdered();
            salesLine.CostPrice         = arguments.InventTable.costPcsPrice(salesLine.InventDimId, inventDim);

            MCRSalesLinePriceOverride mcrSalesLinePriceOverride = salesLine.mcrSalesLinePriceOverride();
            InventTableModule inventTableModule = InventTableModule::find(arguments.InventTable.ItemId, ModuleInventPurchSales::Sales);

            if (EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled()
                && _inventDistinctProductDimensionSpecificDefaultingArgs.parmIsProductDimensionModified()
                && (!EcoResProductVariantItemSalesTaxGroupNoBRFlight::instance().isEnabled() || !(BrazilParameters::isEnabled() && salesLine.salesLine_BR().CFOPTable_BR)))
            {
                this.setTaxItemGroup(InventTable::getTaxItemGroupId(ModuleInventPurchSales::Sales, arguments.InventTable.ItemId, inventDim.InventDimId));
            }

            if (!arguments.ExecuteOnlyIfProductIsFullySpecified && mcrSalesLinePriceOverride.PriceOverride == NoYes::No)
            {
                salesLine.PriceUnit         = inventTableModule.getPriceUnit();
                salesLine.LineAmount        = 0;
                salesLine.lineAmountModified();
            }

            salesLine.setDeliveryDateControlType(inventDim.InventDimId);

            // Only set price if not trying to overrride it.
            if (this.mustResetPriceForDimensionsSpecificDefaulting(arguments, mcrSalesLinePriceOverride))
            {
                PriceDiscPriceAgreementParameters parameters = this.instantiatePriceDiscPriceAgreementParametersForDimensionsSpecificDefaulting();
                this.setPriceDiscForDimensionsSpecificDefaulting(inventDim, true, parameters);
            }

            if (!salesLine.BarCode)
            {
                salesLine.initBarcode(inventDim);
            }

            salesLine.calcPackingUnit(inventDim);
            salesLine.calcPackingUnitQty(inventDim);

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                this.postInitFromInventTable_BR(arguments.InventTable);
            }
            // </GBR>

            this.setPdsSameLot();

            if (arguments.ExecuteOnlyIfProductIsFullySpecified)
            {
                boolean useRetailPricing = RetailParameters::isRetailEnabledAndInUse() && RetailPricingEngine::useRetailPricing(salesLine);

                if (!useRetailPricing)
                {
                    salesLine.salesPurchLineInterface().autoMatchAgreementLine(arguments.AgreementHeaderId);
                }

                RetailPricingCacheManager::cacheSalesLineModifySalesQtyFieldId(
                    salesLine.SalesId, salesLine.LineNum, fieldNum(SalesLine, InventDimId));

                using (SysInstrumentationActivityContext nestedActivityContext = this.instrumentationLogger().salesOrderTypeActivities().modifySalesQty(salesLine, inventDim, !salesLine.MatchingAgreementLine))
                {
                    SalesLine::modifySalesQty(salesLine, InventDim, !salesLine.MatchingAgreementLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustResetPriceForDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the price should be set during product dimension specific defaulting.
    /// </summary>
    /// <param name = "_arguments">An instance of the <c>InventDistinctProductDimensionSpecificDefaultingArgsSalesLine</c> class.</param>
    /// <param name = "_mcrSalesLinePriceOverride">An instance of the <c>MCRSalesLinePriceOverride</c> class.</param>
    /// <returns>true if the price must be reset during product dimensions specific defaulting.</returns>
    protected boolean mustResetPriceForDimensionsSpecificDefaulting(
        InventDistinctProductDimensionSpecificDefaultingArgsSalesLine _arguments,
        MCRSalesLinePriceOverride _mcrSalesLinePriceOverride)
    {
        return (_arguments.ResetPrice && _mcrSalesLinePriceOverride.PriceOverride == NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiatePriceDiscPriceAgreementParametersForDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscPriceAgreementParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscPriceAgreementParameters</c> class.</returns>
    protected PriceDiscPriceAgreementParameters instantiatePriceDiscPriceAgreementParametersForDimensionsSpecificDefaulting()
    {
        return PriceDiscPriceAgreementParameters::createInstance(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscForDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets price and discount on the <c>SalesLine</c>.
    /// </summary>
    /// <param name = "_inventDim">An <c>InventDim</c> record.</param>
    /// <param name = "_initDateFields">A <c>boolean</c> value.</param>
    /// <param name = "_parameters">An instance of the <c>PriceDiscPriceAgreementParameters</c> class.</param>
    protected void setPriceDiscForDimensionsSpecificDefaulting(InventDim _inventDim, boolean _initDateFields, PriceDiscPriceAgreementParameters _parameters)
    {
        salesLine.setPriceDisc(_inventDim, _initDateFields, _parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaultingInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventDim</c> record used to initialize product dimension specific order defaulting.
    /// </summary>
    /// <param name = "_arguments">Product dimension specific order defaulting arguments.</param>
    /// <returns>The initialized <c>InventDim</c> record.</returns>
    protected InventDim initDimensionsSpecificDefaultingInventDim(InventDistinctProductDimensionSpecificDefaultingArgsSalesLine _arguments)
    {
        InventDim inventDim = salesLine.inventDim();

        // For drop shipments, populate the line with the drop ship warehouse.
        MCRInventTable mcrInventTable = _arguments.InventTable.mcrInventTable();
        if (mcrInventTable.DropShipment && mcrInventTable.DefaultDropShipmentWarehouse)
        {
            inventDim.InventLocationId = mcrInventTable.DefaultDropShipmentWarehouse;
            inventDim.InventSiteId = InventLocation::find(inventDim.InventLocationId).InventSiteId;
        }

        // Default Status
        if (!inventDim.InventStatusId && WHSInventEnabled::exist(salesLine.ItemId))
        {
            inventDim.InventStatusId = WHSInvent::getDefaultStatus(inventDim, null, salesLine);
        }

        inventDim.setInventoryOwner(_arguments.InventTable);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default dimension on the <c>SalesLine</c>.
    /// </summary>
    /// <param name = "_defaultDimension">The <c>DimensionDefault</c> value that will be merged.</param>
    [Replaceable]
    protected void initializeDefaultDimension(DimensionDefault _defaultDimension)
    {
        salesLine.DefaultDimension    = salesLine.mergeDimension(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesUnitFromItem</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setSalesUnitFromItem()
    {
        var inventTableModule = InventTableModule::find(salesLine.ItemId, ModuleInventPurchSales::Sales);
        if (inventTableModule)
        {
            salesLine.SalesUnit   = this.releasedProductSalesUnit(inventTableModule);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReleasedProductSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes settings that are based on the released product.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record buffer.</param>
    public void initReleasedProductSpecificDefaulting(InventTable _inventTable)
    {
        #isoCountryRegionCodes
        // Set the financial dimensions using class MCRDefaultDimensions
        MCRSalesLinePriceOverride   mcrSalesLinePriceOverride = salesLine.mcrSalesLinePriceOverride();
        MCRSalesLine                mcrSalesLine = salesLine.mcrSalesLine();

        // <GIN>
        // </GIN>

        // If this is not an item based (but category based) line then we should not initialize from inventTable.
        if (!_inventTable)
        {
            return;
        }

        InventDim inventDimDefaultProductDimension = _inventTable.getDefaultProductDimensions(salesLine.inventDim());

        salesLine.setInventDimId(inventDimDefaultProductDimension.InventDimId, inventDimDefaultProductDimension);

        salesLine.SalesCategory     = EcoResProductCategory::findByItemIdCategoryHierarchyRole(
                                            _inventTable.ItemId,
                                            EcoResCategoryNamedHierarchyRole::Sales).Category;
        this.setStockedProduct();

        var inventTableModule       = this.findReleasedProductInventTableModule(_inventTable, ModuleInventPurchSales::Sales);

        if (salesLine.ProjId)
        {
            salesLine.ProjCategoryId = this.releasedProductProjectCategoryId(_inventTable);
        }

        this.setTaxItemGroup(inventTableModule.TaxItemGroupId);

        salesLine.SalesUnit         = this.releasedProductSalesUnit(inventTableModule);

        salesLine.OverDeliveryPct   = inventTableModule.OverDeliveryPct;
        salesLine.UnderDeliveryPct  = inventTableModule.UnderDeliveryPct;

        salesLine.initName(_inventTable);

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            if (salesTable.SalesType != SalesType::ReturnItem)
            {
                MCRSalesTable mcrSalesTable = salesTable.mcrSalesTable();
                if ((mcrSalesTable.SourceId
                    && mcrSalesTable.SourceId != mcrSalesLine.SourceId)
                        && (MCROrderParameters::find().mcrAllowExpiredSourceCode
                            || !salesTable.mcrReturnSalesTable().IsExchange
                            || MCRSourceCodeSetup::validateSourceEffective(mcrSalesTable.SourceId)))
                {
                    mcrSalesLine.SourceId         = mcrSalesTable.SourceId;
                    salesLine.mcrPackMCRSalesLine(mcrSalesLine);

                    // When updating SourceId MCRSalesLine, updating Catalog of RetailSalesLine too.
                    // Otherwise sales line discount will be calculated by the old source instead of new source.
                    mcrSalesLine.setCatalog();

                    // Set the financial dimensions using class MCRDefaultDimensions
                    MCRDefaultDimensions mcrDefaultDimensions = MCRDefaultDimensions::construct(salesLine);
                    mcrDefaultDimensions.setDefaultDimensions();
                }
            }
        }

        this.initializeDefaultDimension(_inventTable.DefaultDimension);

        if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled() || BrazilParameters::isEnabled())
        {
            salesLine.TaxWithholdItemGroupHeading_TH = inventTableModule.TaxWithholdItemGroupHeading_TH;
        }

        this.initForeignTradeFromInventTable(_inventTable);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            SalesLine_IN salesLine_IN = salesLine.salesLine_IN();

            if (TaxParameters::checkTaxParameters_IN())
            {
                if (AddDefaultCurrencyCodeforSalesPriceFlight_ProjectPurch::instance().isEnabled())
                {
                    CurrencyCode currencyCode = salesTable.CurrencyCode? salesTable.CurrencyCode : Ledger::reportingCurrency();
                    salesLine_IN.MaximumRetailPrice = CurrencyExchangeHelper::curAmount(inventTableModule.MaximumRetailPrice_IN, currencyCode);
                }
                else
                {
                    salesLine_IN.MaximumRetailPrice = CurrencyExchangeHelper::curAmount(inventTableModule.MaximumRetailPrice_IN, salesTable.CurrencyCode);
                }
            }

            if (TaxParameters::isCustomsEnable_IN()
                && salesTable.CustomsExportOrder_IN)
            {
                salesLine_IN.CustomsMaxRetailPrice  = inventTableModule.MaximumRetailPrice_IN;
                salesLine_IN.MaximumRetailPrice     = CurrencyHelper_IN::customsCurAmount_IN(salesLine_IN.CustomsMaxRetailPrice,
                                                                                    salesTable.CurrencyCode,
                                                                                    Direction_IN::Export);
            }

            salesLine.packSalesLine_IN(salesLine_IN);
        }
        // </GIN>

        // Initialize reservation flag if set on inventory model group.
        salesLine.Reservation = this.retrieveSalesReservation(salesLine.inventTable().modelGroup().mcrReservation,salesLine.Reservation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReleasedProductInventTableModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an inventory table module for a released product.
    /// </summary>
    /// <param name = "_inventTable">An inventory table record.</param>
    /// <param name = "_inventPurchaseSalesType">An inventory purchase sales type.</param>
    /// <returns>An inventory table module.</returns>
    protected InventTableModule findReleasedProductInventTableModule(InventTable _inventTable, ModuleInventPurchSales _inventPurchaseSalesType)
    {
        return InventTableModule::find(_inventTable.ItemId, _inventPurchaseSalesType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>releasedProductProjectCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a project category ID for a released product.
    /// </summary>
    /// <param name = "_inventTable">An inventory table.</param>
    /// <returns>A project category ID.</returns>
    protected ProjCategoryId releasedProductProjectCategoryId(InventTable _inventTable)
    {
        return _inventTable.ProjCategoryId ? _inventTable.ProjCategoryId  : salesLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releasedProductSalesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a sales unit for a released product.
    /// </summary>
    /// <param name = "_inventTableModule">An inventory table module.</param>
    /// <returns>A project category ID.</returns>
    protected SalesUnit releasedProductSalesUnit(InventTableModule _inventTableModule)
    {
        return !salesLine.SalesUnit ? _inventTableModule.UnitId : salesLine.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales line with the given <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record that is used to initialize the sales record.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates whether the price should be reset; optional.
    /// </param>
    /// <param name="_matchingAgreement">
    /// The record ID of the agreement header that is associated with the sales order. Used for the
    /// automatic association with an agreement line.
    /// </param>
    /// <param name="_executeOnlyIfProductIsFullySpecified">
    /// A Boolean value that indicates whether product variant validation should be performed and pass before executing variant specific defaulting; optional.
    /// </param>
    void initFromInventTable(InventTable _inventTable, boolean _resetPrice = true, AgreementHeaderRecId _matchingAgreement = 0, boolean _executeOnlyIfProductIsFullySpecified = false)
    {
        InventDistinctProductOrderDefaultingController::itemIdModified(this, InventDistinctProductDimensionSpecificDefaultingArgsSalesLine::construct(_inventTable, _resetPrice, _matchingAgreement, _executeOnlyIfProductIsFullySpecified));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromItemOrCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes current record's values, e.g. quantity or inventory dimensions, based on item or sales category.
    /// </summary>
    /// <param name="_itemId">
    /// ID of the item.
    /// </param>
    /// <param name="_salesCategory">
    /// The sales category.
    /// </param>
    /// <param name="_name">
    /// Product name.
    /// </param>
    /// <param name="searchPriceDisc">
    /// Specifies whether price and discount should be searched or not; Optional.
    /// </param>
    public void initFromItemOrCategory(ItemId _itemId, SalesCategory _salesCategory, ItemFreeTxt _name
, boolean searchPriceDisc = true)
    {
        salesLine.ItemId = _itemId;
        if (salesLine.ItemId)
        {
            this.initFromInventTable(salesLine.inventTable(), searchPriceDisc);
        }
        else
        {
            this.initFromEcoResCategory(_salesCategory, _name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceItem</Name>
				<Source><![CDATA[
    public void  initFromProjInvoiceItem(ProjInvoiceItem  projInvoiceItem,
                              boolean          copyPrecisely,
                              boolean          copyPriceDisc,
                              boolean          copyQty,
                              Qty              qty)
    {
        ProjInvoiceItemDetail   projInvoiceItemDetail;

        salesLine.ItemId = projInvoiceItem.ItemId;

        if (salesLine.ItemId)
        {
            this.initFromInventTable(salesLine.inventTable());
        }
        else
        {
            this.initFromSalesLine(projInvoiceItem.salesLine(), copyPrecisely, copyPriceDisc, copyQty, qty);
        }

        if (copyQty)
        {
            salesLine.setInventDimId(projInvoiceItem.InventDimId);
            salesLine.SalesQty           = qty;
            salesLine.SalesUnit          = projInvoiceItem.SalesUnit;
            salesLine.QtyOrdered         = projInvoiceItem.Qty == qty ?  -projInvoiceItem.inventQty() : salesLine.calcQtyOrdered();
        }
        else
        {
            InventDim inventDim = salesLine.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(salesLine.ItemId, projInvoiceItem.inventDim(), inventDim);
            salesLine.setInventDimIdFromInventDim(inventDim);
        }

        if (copyPriceDisc)
        {
            select SalesPrice from projInvoiceItemDetail
                where projInvoiceItemDetail.InvoiceRefRecId == projInvoiceItem.RecId;

            if (projInvoiceItemDetail.RecId)
            {
                salesLine.SalesPrice     = projInvoiceItemDetail.SalesPrice;
            }
            else
            {
                salesLine.SalesPrice     = projInvoiceItem.salesPrice();
            }

            salesLine.PriceUnit          = projInvoiceItem.PriceUnit;
            salesLine.LinePercent        = projInvoiceItem.LinePercent;
            salesLine.LineDisc           = projInvoiceItem.LineDisc;
            salesLine.SalesMarkup        = projInvoiceItem.SalesMarkup;
            salesLine.LineAmount         = projInvoiceItem.lineAmountDetailSum();
        }

        if (copyPrecisely)
        {
            ProjItemTrans projItemTrans = ProjItemTrans::find(projInvoiceItem.ProjTransId);

            salesLine.setInventDimId(projInvoiceItem.InventDimId);

            salesLine.Name               = projInvoiceItem.Txt;
            salesLine.ExternalItemId     = projInvoiceItem.ExternalItemId;
            salesLine.LedgerDimension    = projItemTrans.LedgerDimension;

            if (salesLine.QtyOrdered)
            {
                salesLine.CostPrice      = -projInvoiceItem.inventCostAmount() / (qty ? -projInvoiceItem.inventQty() : salesLine.QtyOrdered);
            }

            salesLine.TaxGroup           = projInvoiceItem.TaxGroupId;
            salesLine.OverrideSalesTax   = projInvoiceItem.OverrideSalesTax;
            
            if (ProjCreditNoteInheritOriginalSOLineTaxItemGroupFlight::instance().isEnabled())
            {
                salesLine.TaxItemGroup       = projInvoiceItem.TaxItemGroupId;
            }
            else
            {
                this.setTaxItemGroup(projInvoiceItem.TaxItemGroupId);
            }

            salesLine.ActivityNumber     = projInvoiceItem.ActivityNumber;
            salesLine.ProjCategoryId     = projInvoiceItem.CategoryId;
            salesLine.ProjLinePropertyId = projItemTrans.LinePropertyId;
            salesLine.DefaultDimension   = salesLine.copyDimension(projInvoiceItem.DefaultDimension);
            salesLine.SalesGroup         = projInvoiceItem.SalesGroup;
            salesLine.Transport          = projInvoiceItem.Transport;
            salesLine.Port               = projInvoiceItem.Port;
            salesLine.StatProcId         = projInvoiceItem.StatProcId;
            salesLine.IntrastatCommodity = projInvoiceItem.IntrastatCommodity;
            salesLine.OrigCountryRegionId = projInvoiceItem.OrigCountryRegionId;
            salesLine.OrigStateId        = projInvoiceItem.OrigState;

            if (TaxWithholdParameters_IN::checkTaxParameters()
                && projInvoiceItem.ItemType == ProjItemType::SalesOrder)
            {
                SalesLine_IN salesLine_INTo = salesLine.salesLine_IN();
                TaxWithholdTrans_IN taxWithholdTrans;
                select firstonly LineNum, TaxType, TaxWithholdGroup from taxWithholdTrans
                    where taxWithholdTrans.SourceTableId == projInvoiceItem.TableId
                        && taxWithholdTrans.SourceRecId == projInvoiceItem.RecId;
                if (taxWithholdTrans.LineNum)
                {
                    salesLine_INTo.TaxWithholdLineNum = taxWithholdTrans.LineNum;
                    if (taxWithholdTrans.TaxType == TaxWithholdCodeType_IN::TCS)
                    {
                        salesLine_INTo.TCSGroup = taxWithholdTrans.TaxWithholdGroup;
                        salesLine_INTo.TDSGroup = '';
                    }
                    else if (taxWithholdTrans.TaxType == TaxWithholdCodeType_IN::TDS)
                    {
                        salesLine_INTo.TDSGroup = taxWithholdTrans.TaxWithholdGroup;
                        salesLine_INTo.TCSGroup = '';
                    }

                    ProjInvoiceJour projInvoiceJournal = projInvoiceItem.projInvoiceJour();
                    if (projInvoiceJournal)
                    {
                        salesLine_INTo.TaxWithholdVoucher = projInvoiceJournal.LedgerVoucher;
                    }
                }
                salesLine.packSalesLine_IN(salesLine_INTo);
            }
        }

        salesLine.RetailVariantId = this.getRetailVariantId(projInvoiceItem.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    void  initFromPurchLine(PurchLine purchLine)
    {
        // <GIN>
        DirPartyLocation        dirPartyLocation;
        TaxInformation_IN       taxInformation;
        SalesLine               salesLineLoc;
        SalesLine_IN            salesLineLoc_IN;
        // </GIN>

        // ProcurementCategory cannot be used for sales so we only parse in itemid.
        this.initFromItemOrCategory(purchLine.ItemId, 0, purchLine.Name);

        InventDim inventDim = salesLine.inventDim();
        EcoResProductDimGroupSetup::copyProductDimensionsForItem(salesLine.ItemId, purchLine.inventDim(), inventDim);
        salesLine.setInventDimIdFromInventDim(inventDim);

        if (SalesLineTypeProdDimSetUpdateRetailVariantIdFlight::instance().isEnabled()
            && isConfigurationkeyEnabled(configurationKeyNum(Retail))) 
        { 
            salesLine.initRetailVariantId();
        }

        salesLine.initFromCustExternalItemDescription();

        salesLine.SalesQty           =   EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                               salesLine.InventDimId,
                                                                                                               purchLine.RemainPurchPhysical,
                                                                                                               purchLine.PurchUnit,
                                                                                                               salesLine.SalesUnit,
                                                                                                               NoYes::Yes);

        salesLine.QtyOrdered         = salesLine.calcQtyOrdered();

        if (salesLine.ProjId)
        {
            salesLine.ProjCategoryId     = purchLine.ProjCategoryId;
        }

        salesLine.ActivityNumber     = purchLine.ActivityNumber;

        salesLine.InventRefType      = InventRefType::Purch;
        salesLine.InventRefId        = purchLine.PurchId;
        salesLine.InventRefTransId   = purchLine.InventTransId;
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            CompanyInfo  companyInfoLoc = CompanyInfo::find();
            SalesLine_IN salesLine_IN   = salesLine.salesLine_IN();
            PurchLine_IN purchLine_IN   = purchLine.purchLine_IN();

            select Party, Location from dirPartyLocation
            where  dirPartyLocation.Party           == companyInfoLoc.RecId
                && dirPartyLocation.IsPrimary       == true
                && dirPartyLocation.IsPostalAddress == true
            join * from taxInformation
                where taxInformation.RegistrationLocation == dirPartyLocation.Location;

            salesLine_IN.AssessableValueTransactionCurrency     = purchLine_IN.AssessableValueTransactionCurrency;
            salesLine_IN.MaximumRetailPrice 			= purchLine_IN.MaximumRetailPrice;

            if ((TaxParameters::isExciseEnable_IN() || TaxParameters::isVATEnable_IN())
                && ReturnDispositionCode::find(purchLine.ReturnDispositionCodeId).DispositionAction == DispositionAction::ReturnToCust)
            {
                salesLine_IN.TaxAsPerOriginalInvoice = purchLine_IN.TaxAsPerOriginalInvoice;

                select firstonly InventTransIdReturn from salesLineLoc
                    where salesLineLoc.InventRefId == purchLine.PurchId
                outer join * from salesLineLoc_IN
                    where salesLineLoc_IN.SalesLine == salesLineLoc.RecId;
                if (salesLineLoc)
                {
                    salesLine.InventTransIdReturn      = salesLineLoc.InventTransIdReturn;
                }
            }

            salesLine.packSalesLine_IN(salesLine_IN);
        }
        // </GIN>

        // Foreign trade
        salesLine.IntrastatCommodity = purchLine.IntrastatCommodity;
        salesLine.OrigCountryRegionId = purchLine.OrigCountryRegionId;
        salesLine.OrigStateId = purchLine.OrigStateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLineInterCompany_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>salesLine</c> record.
    /// </summary>
    /// <param name="_purchLine">
    /// This is used to find the record.
    /// </param>
    public void  initFromPurchLineInterCompany_IN(PurchLine _purchLine)
    {
        PurchLine_IN            purchLine_IN = _purchLine.purchLine_IN();

        SalesLine_IN salesLine_IN = salesLine.salesLine_IN();
        salesLine_IN.AssessableValueTransactionCurrency = purchLine_IN.AssessableValueTransactionCurrency;
        salesLine_IN.MaximumRetailPrice 		= purchLine_IN.MaximumRetailPrice;

        salesLine.packSalesLine_IN(salesLine_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRetailChannelTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits India tax information of sales line from retail channel table.
    /// </summary>
    /// <param name="_retailChannelTable">
    /// The specified <c>RetailChannelTable</c>.
    /// </param>
    internal void initFromRetailChannelTable_IN(RetailChannelTable _retailChannelTable)
    {
        if (_retailChannelTable)
        {
            PriceDisc_Price priceDiscPrice = PriceDisc_Price::construct();
            priceDiscPrice.parmModuleType(ModuleInventPurchSales::Sales);
            priceDiscPrice.parmItemId(salesLine.ItemId);
            priceDiscPrice.parmInventDim(salesLine.inventDim());
            priceDiscPrice.parmUnitID(salesLine.SalesUnit);
            priceDiscPrice.parmPriceDate(salesLine.priceDate());
            priceDiscPrice.parmQty(salesLine.SalesQty);
            priceDiscPrice.parmAccountNum(salesLine.CustAccount);
            priceDiscPrice.parmCurrencyCode(salesLine.CurrencyCode);
            priceDiscPrice.parmPriceGroupId(salesLine.priceGroupId());

            SalesLine_IN salesLine_IN = salesLine.salesLine_IN();
            salesLine_IN.MaximumRetailPrice  = priceDiscPrice.maxRetailPrice_IN();
            salesLine.packSalesLine_IN(salesLine_IN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRetailStoreTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits India tax information of sales line from retail store table.
    /// </summary>
    /// <param name="_retailStoreTable">
    /// The specified <c>RetailStoreTable</c>.
    /// </param>
    public void initFromRetailStoreTable_IN(RetailStoreTable _retailStoreTable)
    {
        RetailChannelTable retailChannelTable = _retailStoreTable as RetailChannelTable;

        this.initFromRetailChannelTable_IN(retailChannelTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPriceDiscLineAmountFromSalesLine</Name>
				<Source><![CDATA[
    protected void copyPriceDiscLineAmountFromSalesLine(SalesLine _salesLine)
    {
        salesLine.SalesPrice         = _salesLine.SalesPrice;
        salesLine.PriceUnit          = _salesLine.PriceUnit;
        salesLine.LinePercent        = _salesLine.LinePercent;
        salesLine.LineDisc           = _salesLine.LineDisc;
        salesLine.MultiLnDisc        = _salesLine.MultiLnDisc;
        salesLine.MultiLnPercent     = _salesLine.MultiLnPercent;
        salesLine.SalesMarkup        = _salesLine.SalesMarkup;
        salesLine.LineAmount         = _salesLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesBasketLine</Name>
				<Source><![CDATA[
    void  initFromSalesBasketLine(SalesBasketLine salesBasketLine)
    {
        salesLine.ItemId             = salesBasketLine.ItemId;
        this.initFromInventTable(salesLine.inventTable());

        InventDim inventDim = this.initInventDimForSaleslBasketLine(salesBasketLine);

        salesLine.setInventDimIdFromInventDim(inventDim);

        salesLine.initFromCustExternalItemDescription();

        salesLine.SalesQty           = salesBasketLine.SalesQty;
        salesLine.QtyOrdered         = salesLine.calcQtyOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    void  initFromSalesLine(SalesLine       _salesLine,
                            boolean         copyPrecisely,
                            boolean         copyPriceDisc,
                            boolean         copyQty,
                            Qty             qty,
                            PdsCWInventQty  _cwQty = 0
                            )
    {
        boolean                     mcrCallCenterEnabled = isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter));
        // <GIN>
        // </GIN>
        // <GEECZ>
        // </GEECZ>

        if (!salesLine.SysExtensionSerializerMap::hasExtensionTableRecord()) // only copy if no buffer is set
        {
            salesLine.SysExtensionSerializerMap::copyExtensionTableData(_salesLine);
        }

        boolean searchPriceDisc = !copyPriceDisc;
        this.initFromItemOrCategory(_salesLine.ItemId, _salesLine.SalesCategory, _salesLine.Name, searchPriceDisc);

        salesLine.Name            = _salesLine.Name;
        salesLine.RetailVariantId = _salesLine.RetailVariantId;

        if (copyQty)
        {
            this.initSalesLineQtyForInitFromSalesLine(_salesLine, Qty, _cwQty);
        }
        else
        {
            if (salesLine.isCategoryBased())
            {
                salesLine.setInventDimId(_salesLine.InventDimId);
                salesLine.SalesUnit          = _salesLine.SalesUnit;
            }
            else
            {
                InventDim inventDim = salesLine.inventDim();
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(salesLine.ItemId, _salesLine.inventDim(), inventDim);
                salesLine.setInventDimIdFromInventDim(inventDim);
            }
        }

        if (!copyPrecisely)
        {
            salesLine.initBarcode();
        }

        if (copyPriceDisc)
        {
            this.copyPriceDiscLineAmountFromSalesLine(_salesLine);

            MCRSalesLinePriceOverride mcrSalesLinePriceOverrideParameter = _salesLine.mcrSalesLinePriceOverride();
            if (mcrCallCenterEnabled
                && (mcrSalesLinePriceOverrideParameter.ListPrice
                    || mcrSalesLinePriceOverrideParameter.ListPriceCurrencyCode
                    || mcrSalesLinePriceOverrideParameter.PriceOverride) )
            {
                MCRSalesLinePriceOverride mcrSalesLinePriceOverride = salesLine.mcrSalesLinePriceOverride();
                mcrSalesLinePriceOverride.ListPrice = mcrSalesLinePriceOverrideParameter.ListPrice;
                mcrSalesLinePriceOverride.ListPriceCurrencyCode     = mcrSalesLinePriceOverrideParameter.ListPriceCurrencyCode;
                mcrSalesLinePriceOverride.PriceOverride             = mcrSalesLinePriceOverrideParameter.PriceOverride;
                salesLine.mcrPackMCRSalesLinePriceOverride(mcrSalesLinePriceOverride);
            }
        }

        if (copyPrecisely)
        {
            salesLine.setInventDimId(_salesLine.InventDimId);
            salesLine.Name               = _salesLine.Name;
            salesLine.ExternalItemId     = _salesLine.ExternalItemId;
            salesLine.CustomerLineNum    = _salesLine.CustomerLineNum;
            salesLine.LedgerDimension    = _salesLine.LedgerDimension;
            salesLine.Blocked            = _salesLine.Blocked;
            salesLine.Complete           = _salesLine.Complete;
            salesLine.CostPrice          = _salesLine.CostPrice;
            salesLine.TaxGroup           = _salesLine.TaxGroup;
            this.setTaxItemGroup(_salesLine.TaxItemGroup);
            salesLine.AccountingDistributionTemplate = _salesLine.AccountingDistributionTemplate;
            salesLine.DefaultDimension   = salesLine.copyDimension(_salesLine.DefaultDimension , this.dimensionCopy());
            salesLine.OverDeliveryPct    = _salesLine.OverDeliveryPct;
            salesLine.UnderDeliveryPct   = _salesLine.UnderDeliveryPct;
            salesLine.SalesGroup         = _salesLine.SalesGroup;
            salesLine.BarCode            = _salesLine.BarCode;
            salesLine.BarCodeType        = _salesLine.BarCodeType;
            salesLine.Transport          = _salesLine.Transport;
            salesLine.Port               = _salesLine.Port;
            salesLine.StatProcId         = _salesLine.StatProcId;
            salesLine.ProjCategoryId     = _salesLine.ProjCategoryId;
            salesLine.ActivityNumber     = _salesLine.ActivityNumber;
            salesLine.setAddressFromSalesLine(_salesLine);
            salesLine.DlvMode            = _salesLine.DlvMode;
            salesLine.DlvTerm            = _salesLine.DlvTerm;
            salesLine.PackingUnit        = _salesLine.PackingUnit;
            salesLine.PackingUnitQty     = _salesLine.PackingUnitQty;
            salesLine.TransactionCode    = _salesLine.TransactionCode;
            salesLine.ItemBOMId          = _salesLine.ItemBOMId;
            salesLine.ItemRouteId        = _salesLine.ItemRouteId;
            salesLine.CountyOrigDest     = _salesLine.CountyOrigDest;
            salesLine.IntrastatCommodity = _salesLine.IntrastatCommodity;
            salesLine.OrigCountryRegionId = _salesLine.OrigCountryRegionId;
            salesLine.OrigStateId        = _salesLine.OrigStateId;
            salesLine.OverrideSalesTax   = _salesLine.OverrideSalesTax;

            MCRSalesLineDropShipment mcrSalesLineDropShipmentParameter = _salesLine.mcrSalesLineDropShipment();
            if (mcrSalesLineDropShipmentParameter)
            {
                MCRSalesLineDropShipment mcrSalesLineDropShipment = salesLine.mcrSalesLineDropShipment();
                mcrSalesLineDropShipment.DropShipComment = mcrSalesLineDropShipmentParameter.DropShipComment;
                salesLine.mcrPackMCRSalesLineDropShipment(mcrSalesLineDropShipment);
            }
            salesLine.copyShipCarrierInformation(_salesLine);
            // <GEERU>
            salesLine.PostingProfile_RU  = _salesLine.PostingProfile_RU;
            // </GEERU>

            if (SalesOrderFinTagFeature::isEnabled())
            {
                salesLine.FinTag = _salesLine.FinTag;
            }

        }

        if (mcrCallCenterEnabled)
        {
            MCRSalesLine mcrSalesLineParameter = _salesLine.mcrSalesLine();
            MCRSalesLine mcrSalesLine = salesLine.mcrSalesLine();
            if (mcrSalesLineParameter.Expedite != mcrSalesLine.Expedite)
            {
                mcrSalesLine.Expedite           = mcrSalesLineParameter.Expedite;
                salesLine.mcrPackMCRSalesLine(mcrSalesLine);
            }

            // clear workflow state for new sales line
            if (mcrSalesLine.RetailPriceOverrideWorkflowState == RetailPriceOverrideWorkflowState::Rejected)
            {
                mcrSalesLine.RetailPriceOverrideWorkflowState = RetailPriceOverrideWorkflowState::NotSubmitted;
                salesLine.mcrPackMCRSalesLine(mcrSalesLine);
            }
        }

        SalesTable salesTableLocal = salesLine.salesTable();

        if (salesTableLocal.mcrIsCallCenter() || salesTableLocal.isRetailSale())
        {
            RetailSalesLine retailSalesLine = salesLine.retailSalesLine();
            retailSalesLine.QuantityInvoiced = 0;
            retailSalesLine.QuantityPacked = 0;
            retailSalesLine.QuantityPicked = 0;
            retailSalesLine.PickupStartTime = 0;
            retailSalesLine.PickupEndTime = 0;
            retailSalesLine.QuantityNotProcessed = 0;
            retailSalesLine.QuantityPhysicallyReserved = 0;
            retailSalesLine.IsPriceOverridden = NoYes::No;
            retailSalesLine.IsPriceKeyedIn = NoYes::No;
            retailSalesLine.PriceOverrideReasonCode = '';
            retailSalesLine.FulfillmentStatus = RetailFulfillmentLineStatus::Unknown;
            retailSalesLine.QuantityColumnsVersion = RetailSalesLineQuantityColumnsVersion::V0;
            salesLine.retailPackRetailSalesLine(retailSalesLine);
        }

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            SalesLine_IN salesLine_IN          = salesLine.salesLine_IN();
            SalesLine_IN salesLineParameter_IN = _salesLine.salesLine_IN();
            salesLine_IN.tdsGroup              = salesLineParameter_IN.tdsGroup;
            salesLine_IN.tcsGroup              = salesLineParameter_IN.tcsGroup;
            salesLine_IN.CreditNoteDate        = salesLineParameter_IN.CreditNoteDate;
            if (salesLine_IN.CustomsMaxRetailPrice        &&
                salesLine.salesTable().CustomsExportOrder_IN)
            {
                salesLine_IN.CustomsMaxRetailPrice  = salesLineParameter_IN.CustomsMaxRetailPrice;
                salesLine_IN.MaximumRetailPrice     = CurrencyHelper_IN::customsCurAmount_IN(salesLine_IN.CustomsMaxRetailPrice,
                                                                                           SalesTable::find(_salesLine.SalesId).CurrencyCode,
                                                                                           Direction_IN::Export);
            }

            salesLine_IN.AssessableValueTransactionCurrency            = salesLineParameter_IN.AssessableValueTransactionCurrency;
            salesLine.packSalesLine_IN(salesLine_IN);
        }
        // </GIN>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.postInitFromSalesLine_BR(_salesLine, copyPrecisely);
        }
        // </GBR>
        // <GEECZ>
        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(SalesLine_Intrastat)))
        {
            SalesLine_Intrastat salesLine_Intrastat          = salesLine.salesLine_Intrastat();
            SalesLine_Intrastat salesLine_IntrastatParameter = _salesLine.salesLine_Intrastat();
            salesLine_Intrastat.SpecialMovement_CZ           = salesLine_IntrastatParameter.SpecialMovement_CZ;
            salesLine.packSalesLine_Intrastat(salesLine_Intrastat);
        }
        // </GEECZ>

        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled() || EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            salesLine.satProductCode_MX = _salesLine.satProductCode_MX;
            salesLine.satUnitCode_MX    = _salesLine.satUnitCode_MX;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    void  initFromSalesTable(SalesTable _salesTable, boolean _ignoreInventDim = false)
    {
        #ISOCountryRegionCodes
        // <GEERU>
        SalesTable_RU salesTableRU;
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        // <GIN>
        SalesLine_IN  salesLine_IN;
        // </GIN>

        SalesLine_Intrastat salesLine_Intrastat;

        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(SalesLine_Intrastat)))
        {
            salesLine_Intrastat = salesLine.salesLine_Intrastat();
        }

        this.initMcrSalesLine(_salesTable);

        salesLine.AccountingDistributionTemplate = salesTable.AccountingDistributionTemplate;
        salesLine.DefaultDimension         = salesLine.copyDimension(_salesTable.DefaultDimension, this.dimensionCopy());
        salesLine.SalesId                  = _salesTable.SalesId;
        salesLine.SalesType                = _salesTable.SalesType;
        salesLine.Reservation              = _salesTable.Reservation;
        if (#PdsBatchAttribEnabled)
        {
            salesLine.PdsBatchAttribAutoRes = _salesTable.PdsBatchAttribAutoRes;
        }
        salesLine.SalesGroup               = _salesTable.SalesGroup;
        salesLine.CurrencyCode             = _salesTable.CurrencyCode;
        salesLine.DeliveryDateControlType   = _salesTable.DeliveryDateControlType;
        salesLine.ReceiptDateRequested     = _salesTable.ReceiptDateRequested;
        salesLine.ShippingDateRequested    = _salesTable.ShippingDateRequested;

        if (this.shouldInitConfirmDatesFromSalesTable())
        {
            salesLine.ShippingDateConfirmed    = _salesTable.ShippingDateConfirmed;
            salesLine.ReceiptDateConfirmed     = _salesTable.ReceiptDateConfirmed;
        }

        salesLine.ConfirmedDlv             = salesLine.ShippingDateConfirmed ? salesLine.ShippingDateConfirmed : salesLine.ShippingDateRequested;
        salesLine.ProjId                   = _salesTable.ProjId;
        salesLine.TaxGroup                 = _salesTable.TaxGroup;
        salesLine.OverrideSalesTax         = _salesTable.OverrideSalesTax;
        salesLine.CustomerRef              = _salesTable.CustomerRef;
        salesLine.PurchorderFormNum        = _salesTable.PurchOrderFormNum;

        // <GEERU>
        if (countryRegion_RU)
        {
            salesTableRU = _salesTable.salesTable_RU();
        }
        // </GEERU>

        if (!_ignoreInventDim)
        {
            this.initStorageDimensionsFromSalesTable(_salesTable);
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            salesLine.PriceAgreementDate_RU = salesTableRU.PriceAgreementDate_RU;
        }
        // </GEERU>

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            boolean isCallFromSalesTableForm = false;
            if (FormDataUtil::isFormDataSource(salesLine))
            {
                FormDataSource salesLineDataSource = FormDataUtil::getFormDataSource(salesLine);
                isCallFromSalesTableForm = salesLineDataSource ? 
                    (salesLineDataSource.formRun().name() == formStr(SalesTable) || salesLineDataSource.formRun().name() == formStr(ProjSalesItemReq)):
                    false;
            }

            salesLine_IN                       = salesLine.salesLine_IN();
            if (!isCallFromSalesTableForm)
            {
                salesLine_IN.tcsGroup           = _salesTable.tcsGroup_IN;
                salesLine_IN.tdsGroup           = _salesTable.tdsGroup_IN;
            }
            salesLine.packSalesLine_IN(salesLine_IN);
        }
        // </GIN>

        salesLine.CustAccount              = _salesTable.CustAccount;
        salesLine.setAddressFromSalesTable(_salesTable);

        this.setTaxGroup(TaxSales::custTaxGroup(_salesTable.DlvTerm, _salesTable.TaxGroup));

        salesLine.CustGroup                = _salesTable.CustGroup;
        salesLine.TransactionCode          = _salesTable.TransactionCode;
        salesLine.Transport                = _salesTable.Transport;
        salesLine.Port                     = _salesTable.Port;
        salesLine.StatProcId               = _salesTable.StatProcId;
        salesLine.DlvMode                  = _salesTable.DlvMode;
        salesLine.DlvTerm                  = _salesTable.DlvTerm;
        salesLine.CountyOrigDest           = _salesTable.CountyOrigDest;
        salesLine.ShipCarrierId            = _salesTable.ShipCarrierId;
        salesLine.ShipCarrierAccountCode   = _salesTable.ShipCarrierAccountCode;
        salesLine.ShipCarrierDlvType       = _salesTable.ShipCarrierDlvType;
        salesLine.ShipCarrierAccount       = _salesTable.ShipCarrierAccount;
        salesLine.ReturnDeadline           = _salesTable.ReturnDeadline;
        salesLine.ShipCarrierName          = _salesTable.ShipCarrierName;
        salesLine.setThirdPartyAddressFromSalesTable(_salesTable);

        if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled() || BrazilParameters::isEnabled())
        {
            salesLine.TaxWithholdGroup = _salesTable.custTable_CustAccount().TaxWithholdGroup_TH;
        }

        if (_salesTable.ProjId && CustTable::isCustPublic_NO(_salesTable.InvoiceAccount))
        {
            if (_salesTable.EInvoiceAccountCode)
            {
                salesLine.EInvoiceAccountCode = _salesTable.EInvoiceAccountCode;
            }
            else
            {
                ProjFundingSource projFundingSource = ProjFundingSource::findCustAccount(ProjTable::find(_salesTable.ProjId).ProjInvoiceProjId);
                ProjFundingSourceEInvoice_NO eInvoiceData = projFundingSource.getEInvoiceData(_salesTable.ProjId);
                salesLine.EInvoiceAccountCode = eInvoiceData.EInvoiceAccountCode;
            }
        }

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            salesLine.IntrastatFulfillmentDate_HU = _salesTable.IntrastatFulfillmentDate_HU;
        }
        // </GEEHU>

        // <GEECZ>
        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(SalesLine_Intrastat)))
        {
            salesLine_Intrastat.SpecialMovement_CZ = _salesTable.salesTable_Intrastat().SpecialMovement_CZ;
            salesLine.packSalesLine_Intrastat(salesLine_Intrastat);
        }
        // </GEECZ>

        // <GIN>
        if (TaxParameters::isExciseEnable_IN() && salesLine.salesTable().returnItem())
        {
            salesLine_IN                       = salesLine.salesLine_IN();
            salesLine_IN.ReturnReasonCodeId    = _salesTable.ReturnReasonCodeId;
            salesLine.packSalesLine_IN(salesLine_IN);
        }
        // </GIN>

        salesLine.MpsExcludeSalesLine = _salesTable.MpsExcludeSalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInitConfirmDatesFromSalesTable</Name>
				<Source><![CDATA[
    private boolean shouldInitConfirmDatesFromSalesTable()
    {
        if (salesLine.isDeliveryDateControlTypeMpsCTP())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStorageDimensionsFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes storage dimensions from header.
    /// </summary>
    public void initStorageDimensionsFromHeader()
    {
        this.initStorageDimensionsFromSalesTable(salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an <c>InventDim</c> relation.
    /// </summary>
    /// <param name = "_inventDim">A <c>InventDim</c> record buffer.</param>
    public void setInventDim(InventDim _inventDim)
    {
        salesLine.setInventDimIdFromInventDim(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated <c>InventDim</c> record.
    /// </summary>
    /// <returns>the associated <c>InventDim</c> record.</returns>
    public InventDim inventDim()
    {
        return salesLine.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStorageDimensionsFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized storage dimensions from header.
    /// </summary>
    /// <param name = "_salesTable">A <c>SalesTable</c> record buffer.</param>
    public void initStorageDimensionsFromSalesTable(SalesTable _salesTable)
    {
        #ISOCountryRegionCodes

        // <GEERU>
        SalesTable_RU salesTableRU;
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        // <GEERU>
        if (countryRegion_RU)
        {
            salesTableRU = _salesTable.salesTable_RU();
        }
        // </GEERU>

        InventDim inventDim = this.initInventDimForInitStorageDimensionsFromSalesTable(_salesTable);

        // <GEERU>
        if (countryRegion_RU && salesTableRU.InventProfileId_RU && !inventDim.InventProfileId_RU)
        {
            inventDim.InventProfileId_RU = salesTableRU.InventProfileId_RU;
        }
        // </GEERU>

        salesLine.setInventDimIdFromInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSMAServiceOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>SalesLine</c> table with data from the <c>SMAServiceOrderTable</c> table.
    /// </summary>
    /// <param name="_serviceOrderTable">
    ///    A <c>SMAServiceOrderTable</c> record buffer.
    /// </param>
    public void initFromSMAServiceOrderTable(SMAServiceOrderTable _serviceOrderTable)
    {
        salesLine.ServiceOrderId            = _serviceOrderTable.ServiceOrderId;

        salesLine.CustAccount               = _serviceOrderTable.CustAccount;

        // init service address
        salesLine.DeliveryName              = _serviceOrderTable.ServiceAddressName;
        salesLine.DeliveryPostalAddress     = _serviceOrderTable.ServicePostalAddress;

        salesLine.AddressRefRecId           = _serviceOrderTable.AddressRefRecId;
        salesLine.AddressRefTableId         = _serviceOrderTable.AddressRefTableId;

        date preferredDate = DateTimeUtil::date(
        DateTimeUtil::applyTimeZoneOffset(_serviceOrderTable.ServiceDateTime, DateTimeUtil::getUserPreferredTimeZone()));

        if (preferredDate > DateTimeUtil::date(DateTimeUtil::getSystemDateTime()))
        {
            // init dates with preferredDate since it is in future
            salesLine.ConfirmedDlv          = preferredDate;
            salesLine.ReceiptDateRequested  = preferredDate;
            salesLine.ShippingDateRequested = preferredDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpSuppItem</Name>
				<Source><![CDATA[
    void  initFromTmpSuppItem(TmpSuppItem _tmpSuppItem)
    {
        SalesDeliverySchedule   salesDeliverySchedule;

        salesLine.ItemId = _tmpSuppItem.ItemId;
        salesLine.initFromInventTable(InventTable::find(_tmpSuppItem.ItemId));
        InventDim inventDim = salesLine.inventDim();
        inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(salesLine.ItemId), InventDim::find(_tmpSuppItem.InventDimId));
        salesLine.setInventDimIdFromInventDim(inventDim);
        this.initFromInventTable(salesLine.inventTable());
        salesLine.initFromCustExternalItemDescription();

        salesLine.SalesQty           = _tmpSuppItem.Qty;
        salesLine.QtyOrdered         = salesLine.calcQtyOrdered();

        if (SalesPurchInitCWSuppItemFlight::instance().isEnabled()
            && PdsGlobal::pdsIsCWItem(salesLine.ItemId))
        {
            salesLine.PdsCWQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                salesLine.InventDimId,
                salesLine.SalesQty,
                salesLine.SalesUnit,
                salesLine.pdsCWUnitId(),
                NoYes::Yes);
        }

        if (_tmpSuppItem.SuppItemFree)
        {
            salesLine.SalesPrice     = 0.0;
            salesLine.LinePercent    = 0.0;
            salesLine.LineDisc       = 0.0;
            salesLine.MultiLnDisc    = 0.0;
            salesLine.MultiLnPercent = 0.0;
            salesLine.SalesMarkup    = 0.0;
            salesLine.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(SalesLine, SalesPrice));
        }
        else if (salesTable.MatchingAgreement)
        {
            salesLine.salesPurchLineInterface().autoMatchAgreementLine(salesTable.MatchingAgreement);
        }

        salesLine.LineAmount         = salesLine.calcLineAmountForced();

        if (_tmpSuppItem.AttachRecId)
        {
            select firstonly salesDeliverySchedule
            where salesDeliverySchedule.DeliveryLine == _tmpSuppItem.InventTransId;

            if (salesDeliverySchedule)
            {
                salesLine.LineNum = SalesLine::lastDeliveryScheduleLineNum(salesDeliverySchedule.OrderLine);
            }
            else
            {
                salesLine.LineNum = SalesLine::findRecId(_tmpSuppItem.AttachRecId).LineNum;
            }

            LineNum lineNum = salesLine.nextLineNum();
            if (lineNum)
            {
                salesLine.LineNum  += (lineNum - salesLine.LineNum) / 2;
            }
            else
            {
                salesLine.LineNum  += 1.0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesQty</Name>
				<Source><![CDATA[
    void initSalesQty()
    {
        salesLine.QtyOrdered = salesLine.calcQtyOrdered();

        if (!this.creditNoteLine() && !this.returnItem())
        {
            salesLine.InventTransIdReturn   = '';
            salesLine.Scrap                 = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourcingOrigin</Name>
				<Source><![CDATA[
    public void initSourcingOrigin()
    {
        if (salesLine.DeliveryType == TradeLineDlvType::None && !salesLine.SourcingVendAccount)
        {
            salesLine.SourcingOrigin = SalesSourcingOrigin::Inventory;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void  initValue()
    {
        salesLine.SalesStatus   = SalesStatus::Backorder;
        this.initSourcingOrigin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a sales order line record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a sales order line record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCalcDisc</Name>
				<Source><![CDATA[
    void interCompanyCalcDisc()
    {
        //
        // Perform discount calculation on intercompany PO, when PriceDiscountSearch is enabled
        //         for the AIF endpoint related to the intercompany vendor
        //
        if (salesTable.InterCompanyCompanyId
        &&  salesTable.InterCompanyPurchId
        &&  salesLine.InterCompanyInventTransId)
        {
            changecompany(salesTable.InterCompanyCompanyId)
            {
                ttsBegin;
                PurchTable purchTableLocal = PurchTable::find(salesTable.InterCompanyPurchId,true);
                InterCompanyEndpointActionPolicy purchEndpointActionPolicy = purchTableLocal.interCompanyEndpointActionPolicy();
                if (purchEndpointActionPolicy.PriceDiscountSearch)
                {
                    PurchLine purchLineLocal = PurchLine::findInventTransId(salesLine.InterCompanyInventTransId);
                    purchTableLocal.PriceDiscHeading::updateMultiLineDiscount(purchLineLocal);
                    if (!purchTableLocal.isInvoiceMatched())
                    {
                        purchTableLocal.PriceDiscHeading::updateFinalDiscount(purchLineLocal);
                    }
                }
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCalcDiscInternal</Name>
				<Source><![CDATA[
    void interCompanyCalcDiscInternal()
    {
        PurchLine                           purchLineLocal;
        if (salesLine.InventRefId
    &&  salesLine.InventRefTransId
    &&  salesLine.InventRefType  == InventRefType::Purch)
        {
            PurchTable purchTableLocal = PurchTable::find(salesLine.InventRefId);
            InterCompanyEndpointActionPolicy purchEndpointActionPolicy = purchTableLocal.interCompanyEndpointActionPolicy();
            //
            // Perform discount calculation on ordinary PO, when Direct delivery      Or
            // Perform discount calculation on intercompany PO, when PriceDiscountSearch is enabled
            //         for the AIF endpoint related to the intercompany vendor
            //
            if (purchEndpointActionPolicy.PriceDiscountSearch
        || (salesLine.DeliveryType == TradeLineDlvType::DropShip && !purchEndpointActionPolicy))
            {
                ttsBegin;
                purchLineLocal = PurchLine::findInventTransId(salesLine.InventRefTransId);
                if (!purchTableLocal.isInvoiceMatched())
                {
                    purchTableLocal.PriceDiscHeading::updateMultiLineDiscount(purchLineLocal);
                    purchTableLocal.PriceDiscHeading::updateFinalDiscount(purchLineLocal);
                }
                ttsCommit;
            }
            //
            // Perform discount calculation on intercompany SO, when PriceDiscountSearch is enabled
            //         for the AIF endpoint related to the intercompany customer
            //
            purchLineLocal = PurchLine::findInventTransId(salesLine.InventRefTransId);
            if (purchTableLocal.InterCompanyOrder
        &&  purchTableLocal.InterCompanySalesId
        &&  purchLineLocal.InterCompanyInventTransId
        && !purchTableLocal.isInvoiceMatched())
            {
                changecompany(purchTableLocal.InterCompanyCompanyId)
                {
                    ttsBegin;
                    SalesTable salesTableLocal = SalesTable::find(purchTableLocal.InterCompanySalesId,true);
                    InterCompanyEndpointActionPolicy salesEndpointActionPolicy = salesTableLocal.interCompanyEndpointActionPolicy();
                    if (salesEndpointActionPolicy.PriceDiscountSearch)
                    {
                        SalesLine salesLineLocal = SalesLine::findInventTransId(purchLineLocal.InterCompanyInventTransId);
                        salesTableLocal.PriceDiscHeading::updateMultiLineDiscount(salesLineLocal);
                        salesTableLocal.PriceDiscHeading::updateFinalDiscount(salesLineLocal);
                    }
                    ttsCommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCalcSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sales price for an intercompany sales line.
    /// </summary>
    /// <returns>
    /// The calculated sales price for an intercompany sales line.
    /// </returns>
    public CostPrice interCompanyCalcSalesPrice()
    {
        InventMovement      movement        = InventMovement::construct(salesLine);
        InventTrans         inventTrans;
        SalesPrice          salesPrice      = salesLine.SalesPrice;
        Qty                 qty;
        CostAmountPosted    value;

        if (salesLine.InterCompanyInventTransId
         && salesLine.SalesQty > 0
         && salesLine.isStocked())
        {
            if (salesTable.InterCompanyCompanyId
             && salesTable.interCompanyEndpointActionPolicy().UnitPriceEqualsCostPrice)
            {
                while select forupdate inventTrans
                order by InventDimId
                where inventTrans.InventTransOrigin    == movement.inventTransOriginId()
                    && inventTrans.Qty                  < 0
                    && inventTrans.PackingSlipReturned == NoYes::No
                {
                    InventOnhand inventOnhand = InventOnhand::newFinancialUpdate(movement, inventTrans.inventDim());

                    CostAmount financialIssueCostValue = movement.financialIssueCostValue(inventTrans, inventOnhand);
                    if (financialIssueCostValue)
                    {
                        qty   += inventTrans.Qty;
                        value += financialIssueCostValue;
                    }
                }

                UnitOfMeasureSymbol inventUnitId = movement.inventTable().inventUnitId();
                if (salesLine.SalesUnit != inventUnitId)
                {
                    qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                salesLine.InventDimId,
                                                                                                qty,
                                                                                                inventUnitId,
                                                                                                salesLine.SalesUnit,
                                                                                                NoYes::Yes);
                }

                if (qty)
                {
                    salesPrice = CurrencyExchangeHelper::price(value * salesLine.PriceUnit / qty);
                }
                else
                {
                    salesPrice = 0;
                }

                salesPrice = ExchangeRateHelper::curPrice2CurPrice(salesPrice, Ledger::accountingCurrency(CompanyInfo::current()), salesLine.CurrencyCode, salesLine.deliveryDate());
            }
        }

        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDelete</Name>
				<Source><![CDATA[
    void  interCompanyDelete()
    {
        if (salesLine.SkipUpdate == InterCompanySkipUpdate::InterCompany
            ||  salesLine.SkipUpdate == InterCompanySkipUpdate::Both
            || !salesTable.isInterCompanyOrder()
            || !SalesTableType::construct(salesTable).interCompanyCreateAllowed())
        {
            return;
        }

        if (! TradeInterCompany::checkDataAreaAccess(salesTable.InterCompanyCompanyId))
        {
            return;
        }

        changecompany(salesTable.InterCompanyCompanyId)
        {
            setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

            PurchLine purchLine = PurchLine::findInventTransId(salesLine.InterCompanyInventTransId, true);

            if (purchLine)
            {
                purchLine.SkipUpdate = InterCompanySkipUpdate::InterCompany;
                purchLine.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDropPurchLine</Name>
				<Source><![CDATA[
    void interCompanyDropPurchLine(SalesLine _salesLine, SalesLine  _salesLineOrig)
    {
        if (!_salesLine)
        {
            return;
        }

        if (_salesLine.SkipUpdate == InterCompanySkipUpdate::Internal
            ||  _salesLine.SkipUpdate == InterCompanySkipUpdate::Both)
        {
            return;
        }

        PurchLine purchLine = PurchLine::findInventTransId(_salesLineOrig.InventRefTransId,true);

        if (!purchLine.purchTable().InterCompanyOrder)
        {
            return;
        }

        if (purchLine)
        {
            if (!purchLine.validateDelete())
            {
                throw error("@SYS93835");
            }

            purchLine.SkipUpdate = InterCompanySkipUpdate::Internal;
            purchLine.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyIsPriceDiscSearchNeeded</Name>
				<Source><![CDATA[
    public boolean interCompanyIsPriceDiscSearchNeeded()
    {
        boolean       ret = false;

        if (FormDataUtil::getFormDataSource(salesLine))
        {
            Object callerFormRun = FormDataUtil::getFormDataSource(salesLine).formRun();

            if (callerFormRun && formHasMethod(callerFormRun, identifierStr(interCompanyIsPriceDiscSearchNeeded)))
            {
                ret = (salesLine.RecId == callerFormRun.interCompanyIsPriceDiscSearchNeeded());
            }
        }

        ret = ret || salesLine.fieldChanged(fieldNum(SalesLine, SalesQty))
            || salesLine.fieldChanged(fieldNum(SalesLine, SalesUnit))
            || salesLine.fieldChanged(fieldNum(SalesLine, MatchingAgreementLine))
            || salesLine.fieldChanged(fieldNum(SalesLine, LineDisc))
            || salesLine.fieldChanged(fieldNum(SalesLine, LinePercent));
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyMarkupMirror</Name>
				<Source><![CDATA[
    void  interCompanyMarkupMirror()
    {
        MarkupTrans markupTrans;

        changecompany(salesTable.InterCompanyCompanyId)
        {
            setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

            PurchLine purchLine = PurchLine::findInventTransId(salesLine.InterCompanyInventTransId);
            if (purchLine)
            {
                while select forupdate markupTrans
                  index hint TableRecIdIdx
                  where markupTrans.TransTableId == purchLine.TableId
                  &&    markupTrans.TransRecId   == purchLine.RecId
                  &&   !markupTrans.IsDeleted
                {
                    markupTrans.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySyncEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line-level synchronization engine for intercompany trade.
    /// </summary>
    /// <returns>A new instance of <c>InterCompanySyncSalesLineType</c> or one of its subclasses.</returns>
    public InterCompanySyncSalesLineType interCompanySyncEngine()
    {
        return InterCompanySyncSalesLineType::newFromSalesLineType(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyResetDeliverNow</Name>
				<Source><![CDATA[
    void interCompanyResetDeliverNow()
    {
        if (salesLine.SalesDeliverNow == 0 && salesTable.InterCompanyCompanyId)
        {
            ttsBegin;
            changecompany(salesTable.InterCompanyCompanyId)
            {
                setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

                PurchLine purchLineLocal = PurchLine::findInventTransId(salesLine.InterCompanyInventTransId,true);
                if (purchLineLocal.RecId
                    && (purchLineLocal.PurchReceivedNow  == 0 || purchLineLocal.InventReceivedNow == 0))
                {
                    this.resetPurchReceivedNow(purchLineLocal);

                    if (purchLineLocal.InventRefTransId)
                    {
                        SalesLine salesLineLocal = SalesLine::findInventTransId(purchLineLocal.InventRefTransId,true);
                        if (salesLineLocal.RecId
                            && (salesLineLocal.SalesDeliverNow  == 0 || salesLineLocal.InventDeliverNow == 0))
                        {
                            this.resetSalesDeliverNow(salesLineLocal);
                        }
                    }
                }
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPurchReceivedNow</Name>
				<Source><![CDATA[
    protected void resetPurchReceivedNow(PurchLine _purchLine)
    {
        _purchLine.PurchReceivedNow  = 0;
        _purchLine.InventReceivedNow = 0;
        _purchLine.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSalesDeliverNow</Name>
				<Source><![CDATA[
    protected void resetSalesDeliverNow(SalesLine _salesLine)
    {
        _salesLine.SalesDeliverNow  = 0;
        _salesLine.InventDeliverNow = 0;
        _salesLine.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyValidateDelete</Name>
				<Source><![CDATA[
    protected boolean interCompanyValidateDelete(PurchLine _purchLine)
    {
        boolean ret = true;
        setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

        if (_purchLine)
        {
            setPrefix(#PreFixField(_purchLine,PurchId));

            _purchLine.SkipUpdate = InterCompanySkipUpdate::InterCompany;
            ret = _purchLine.validateDelete();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyValidateDeleteQty</Name>
				<Source><![CDATA[
    protected boolean interCompanyValidateDeleteQty(PurchLine _purchLine)
    {
        boolean ok = true;
        if (_purchLine)
        {
            if (ok  &&  salesLine.RemainSalesPhysical  != _purchLine.RemainPurchPhysical)
            {
                ok = checkFailed("@SYS2288");
            }

            if (ok  &&  salesLine.RemainSalesFinancial != _purchLine.RemainPurchFinancial)
            {
                ok = checkFailed("@SYS2288");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedInTotal</Name>
				<Source><![CDATA[
    SalesQty invoicedInTotal()
    {
        SalesQty qty = 0;

        if (salesLine.InventTransId)
        {
            qty = (select sum(Qty) from custInvoiceTrans
                        where custInvoiceTrans.InventTransId == salesLine.InventTransId).Qty;
        }
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPendingRegistrationsToBeCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the pending registrations for non-stocked lines are to be newly created.
    /// </summary>
    /// <returns>
    /// A Boolean value that specifies whether to create pending registrations.
    /// </returns>
    public boolean isPendingRegistrationsToBeCreated()
    {
        boolean             isPendingRegistrationsToBeCreated;

        if (salesLine.SalesQty != 0)
        {
            SalesLine salesLineOrig = salesLine.orig();
            isPendingRegistrationsToBeCreated = (salesLine.SalesQty <0 && salesLineOrig.SalesQty > 0)
                                            || (salesLine.SalesType == SalesType::Sales && salesLineOrig.SalesType != SalesType::Sales);
        }
        else
        {
            DispositionAction dispositionAction = ReturnDispositionCode::find(salesLine.orig().ReturnDispositionCodeId).DispositionAction;

            //If the disposition code CreditOnly has been removed for the line, then the pending registrations need to be created.
            isPendingRegistrationsToBeCreated = !salesLine.ReturnDispositionCodeId && dispositionAction == DispositionAction::CreditOnly;
        }

        return isPendingRegistrationsToBeCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a ledger dimension for the sales order line.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record from which to get the item group.
    /// </param>
    /// <param name="_inventAccountType">
    /// The posting account type.
    /// </param>
    /// <returns>
    /// The posting ledger dimension for the account type for the sales order line.
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDimensionItem(InventTable _inventTable, InventAccountType _inventAccountType)
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return InventPosting::accountItemLedgerDimensionFromParameters(
                InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(
                    salesLine,
                    _inventAccountType,
                    _inventTable.itemGroupId(),
                    salesLine.inventDim()));
        }
        // </GEERU>
        return InventPosting::accountItemLedgerDimensionFromParameters(
           InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(
                salesLine,
                _inventAccountType,
                _inventTable.itemGroupId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionSales</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount ledgerDimensionSales(InventTable _inventTable = salesLine.inventTable())
    {
        if (salesLine.LedgerDimension)
        {
            return salesLine.LedgerDimension;
        }
        return this.ledgerDimensionItem(_inventTable, InventAccountType::SalesRevenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionSales_IT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>LedgerDimensionDefaultAccount</c> value that is used to specify the main account.
    /// </summary>
    /// <param name="_inventTable">The inventory table cursor.</param>
    /// <param name="_creditNote">Determines if the invoice is credit note.</param>
    /// <returns>The <c>LedgerDimensionDefaultAccount</c> value.</returns>
    public LedgerDimensionDefaultAccount ledgerDimensionSales_IT(InventTable _inventTable = salesLine.inventTable(), boolean _creditNote = false)
    {
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;
        
        if (salesLine.LedgerDimension)
        {
            ledgerDimensionDefaultAccount = salesLine.LedgerDimension;
        }
        else if (_creditNote)
        {
            ledgerDimensionDefaultAccount = this.ledgerDimensionItem(_inventTable, InventAccountType::SalesCreditNote_IT);
        }

        if (!ledgerDimensionDefaultAccount)
        {
            ledgerDimensionDefaultAccount = this.ledgerDimensionItem(_inventTable, InventAccountType::SalesRevenue);
        }
                
        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    public boolean markupAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayConfirmationBeUpdated</Name>
				<Source><![CDATA[
    boolean mayConfirmationBeUpdated()
    {
        return salesTable.mayConfirmationBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayInvoice4PaymBeUpdated_RU</Name>
				<Source><![CDATA[
    final public boolean mayInvoice4PaymBeUpdated_RU()
    {
        return this.mayConfirmationBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayInvoiceBeUpdated</Name>
				<Source><![CDATA[
    boolean mayInvoiceBeUpdated()
    {
        return salesTable.mayInvoiceBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPackingSlipBeUpdated</Name>
				<Source><![CDATA[
    boolean mayPackingSlipBeUpdated()
    {
        return salesTable.mayPackingSlipBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPickingListBeRegistered</Name>
				<Source><![CDATA[
    boolean  mayPickingListBeRegistered()
    {
        return salesTable.mayPickingListBeRegistered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPickingListBeUpdated</Name>
				<Source><![CDATA[
    boolean mayPickingListBeUpdated()
    {
        return salesTable.mayPickingListBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayProjectPackingSlipBeUpdated</Name>
				<Source><![CDATA[
    boolean mayProjectPackingSlipBeUpdated()
    {
        return salesTable.mayProjectPackingSlipBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayProjectPickingListBeUpdated</Name>
				<Source><![CDATA[
    boolean mayProjectPickingListBeUpdated()
    {
        return salesTable.mayProjectPickingListBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayScrapBeExpected</Name>
				<Source><![CDATA[
    boolean mayScrapBeExpected()
    {
        return this.creditNoteLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHaveDlvAddressFieldsChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the delivery address changed.
    /// </summary>
    /// <param name="_origSalesLine">
    /// The original <c>SalesLine</c> record to check against the newly created record.
    /// </param>
    /// <param name="_salesLine">
    /// The newly created <c>SalesLine</c> record for which to validate the delivery address.
    /// </param>
    /// <returns>
    /// true if the delivery address has changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The delivery address may affect what delivery modes are valid on the
    /// continuity schedule attached.
    /// </remarks>
    protected boolean mcrHaveDlvAddressFieldsChanged(SalesLine _origSalesLine, SalesLine _salesLine)
    {
        boolean addressChanged = false;

        if (_origSalesLine.DeliveryPostalAddress        != _salesLine.DeliveryPostalAddress
        || _origSalesLine.DeliveryName              != _salesLine.DeliveryName
        || _origSalesLine.DlvMode                   != _salesLine.DlvMode
        || _origSalesLine.mcrSalesLine().Expedite   != _salesLine.mcrSalesLine().Expedite
        || _origSalesLine.ShippingDateRequested     != _salesLine.ShippingDateRequested)
        {
            addressChanged = true;
        }

        return addressChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHaveDlvModeFieldsChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the delivery fields that affect delivery modes have changed.
    /// </summary>
    /// <param name="_origSalesLine">
    /// The original <c>SalesLine</c> record to check against the newly created record.
    /// </param>
    /// <param name="_salesLine">
    /// The newly created <c>SalesLine</c> record for which to validate the delivery address.
    /// </param>
    /// <returns>
    /// true if the address fields have changed; otherwise, false.
    /// </returns>
    protected boolean mcrHaveDlvModeFieldsChanged(SalesLine _origSalesLine, SalesLine _salesLine)
    {
        boolean changed = false;

        if (_origSalesLine.mcrSalesLine().SourceId != _salesLine.mcrSalesLine().SourceId)
        {
            changed = true;
        }

        return changed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetDropShipStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines and sets the status for drop ship orders.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record for the drop ship order.
    /// </param>
    /// <param name="_inventTransIdSum">
    /// The <c>InventTransIdSum</c> associated with the sales order; optional.
    /// </param>
    public void  mcrSetDropShipStatus(SalesLine     _salesLine,
                            InventTransIdSum    _inventTransIdSum = null)
    {
        InventTransIdSum            inventTransIdSum = _inventTransIdSum;

        ttsBegin;
        MCRSalesLineDropShipment mcrSalesLineDropShipment = MCRSalesLineDropShipment::findSalesLine(_salesLine.RecId, true);
        if (mcrSalesLineDropShipment.DropShipment)
        {
            if (_salesLine.RemainSalesPhysical  == 0
            && _salesLine.RemainSalesFinancial == 0)
            {
                InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(_salesLine.InventTransId);
                if (!inventTransIdSum)
                {
                    inventTransIdSum = InventTransIdSum::newTransOriginId(inventTransOrigin.RecId);
                }

                if (inventTransOrigin.RecId != 0
                    && !(_salesLine.SalesStatus == SalesStatus::Canceled
                        && inventTransIdSum.physical() == 0
                        && inventTransIdSum.financial() == 0))
                {
                    if (inventTransIdSum.physical() == 0
                    && inventTransIdSum.financial() == 0)
                    {
                        mcrSalesLineDropShipment.DropShipStatus = MCRDropShipStatus::ToBeDropShipped;
                        mcrSalesLineDropShipment.update();
                    }
                    else
                    {
                        if (inventTransIdSum.financial() == 0)
                        {
                            mcrSalesLineDropShipment.DropShipStatus = MCRDropShipStatus::ToBeDropShipped;
                        }
                        else
                        {
                            mcrSalesLineDropShipment.DropShipStatus = MCRDropShipStatus::POShipped;
                        }
                        mcrSalesLineDropShipment.update();
                    }
                }
            }
            else
            {
                if (_salesLine.RemainSalesPhysical == 0)
                {
                    mcrSalesLineDropShipment.DropShipStatus = MCRDropShipStatus::POShipped;
                    mcrSalesLineDropShipment.update();
                }
                else
                {
                    // Added check for when the status has not been set yet.  This
                    // happens when using MSFT functionality to create the drop ship
                    // from the salestable menu exit.
                    MCRSalesLineDropShipment mcrSalesLineDropShipmentOrig = _salesLine.orig().mcrSalesLineDropShipment();

                    if (salesLine.InventRefId
                    && (mcrSalesLineDropShipmentOrig.DropShipStatus ==  MCRDropShipStatus::ToBeDropShipped
                        || mcrSalesLineDropShipmentOrig.DropShipStatus ==  MCRDropShipStatus::None))
                    {
                        mcrSalesLineDropShipment.DropShipStatus = MCRDropShipStatus::POCreated;
                        mcrSalesLineDropShipment.update();
                    }
                    else if (!salesLine.InventRefId
                    && mcrSalesLineDropShipmentOrig.DropShipStatus != MCRDropShipStatus::ToBeDropShipped)
                    {
                        mcrSalesLineDropShipment.DropShipStatus = MCRDropShipStatus::ToBeDropShipped;
                        mcrSalesLineDropShipment.update();
                    }
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether it is per default an issue or a receipt transaction.
    /// </summary>
    /// <returns>
    /// The default inventory direction.
    /// </returns>
    public InventDirection defaultInventDirection()
    {
        return InventDirection::Issue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>positiveInventDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether it is an issue or a receipt transaction for a positive quantity ordered amount.
    /// </summary>
    /// <returns>
    /// The inventory direction for positive quantities.
    /// </returns>
    public InventDirection positiveInventDirection()
    {
        return InventDirection::Issue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustConfirmDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether requested dates must be confirmed.
    /// </summary>
    /// <param name="_strategy">
    /// A <c>SalesConfirmDatesStrategy</c> object that contains specific logic to set confirmed dates.
    /// </param>
    /// <returns>
    /// true if dates must be confirmed; otherwise, false.
    /// </returns>
    public boolean mustConfirmDates(SalesConfirmDatesStrategy   _strategy)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventUpdEstimated</Name>
				<Source><![CDATA[
    boolean  mustInventUpdEstimated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSalesQtyBeNegative</Name>
				<Source><![CDATA[
    boolean mustSalesQtyBeNegative()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetProjAdjustRefInventTrans</Name>
				<Source><![CDATA[
    public boolean mustSetProjAdjustRefInventTrans(InvoiceId _invoiceId = '')
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(SalesLine _salesLine, SalesTable _salesTable = _salesLine.salesTable())
    {
        salesLine      = _salesLine;
        salesTable     = _salesTable;

        super(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderEntryStatistics</Name>
				<Source><![CDATA[
    public boolean orderEntryStatistics()
    {
        return SalesParameters::find().OrderEntryStatistics;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWDeliveredInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight total delivered quantity for a default sales order line type.
    /// </summary>
    /// <returns>
    /// The catch weight delivered quantity.
    /// </returns>
    public PdsCWDelivered pdsCWDeliveredInTotal()
    {
        PdsCWDelivered    pdsCWDelivered = 0;

        if (salesLine.InventTransId)
        {
            //Check if user has security access
            if (hasFieldAccess(tableNum(CustInvoiceTrans),
                           fieldNum(CustInvoiceTrans, PdsCWQtyPhysical),
                           AccessType::View)
            && hasFieldAccess(tableNum(CustInvoiceTrans),
                              fieldNum(CustInvoiceTrans, PdsCWQty),
                              AccessType::View))
            {
                pdsCWDelivered =
                (select sum(PdsCWQtyPhysical)
                    from custInvoiceTrans
                    where custInvoiceTrans.InventTransId
                            == salesLine.InventTransId).PdsCWQtyPhysical;

                pdsCWDelivered +=
                (select sum(PdsCWQty)
                    from custPackingSlipTrans
                    where custPackingSlipTrans.InventTransId
                            == salesLine.InventTransId).PdsCWQty;
            }
        }

        return pdsCWDelivered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWInvoicedInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight total invoiced quantity for a default sales order line type.
    /// </summary>
    /// <returns>
    /// The catch weight invoiced quantity.
    /// </returns>
    public PdsCWInvoiced pdsCWInvoicedInTotal()
    {
        PdsCWInvoiced pdsCWInvoiced = 0;

        if (salesLine.InventTransId)
        {
            //Check if user has security access
            if (hasFieldAccess(tableNum(CustInvoiceTrans),
                           fieldNum(CustInvoiceTrans, PdsCWQty),
                           AccessType::View))
            {
                pdsCWInvoiced = (select sum(PdsCWQty)
                                from custInvoiceTrans
                                where custInvoiceTrans.InventTransId
                                        == salesLine.InventTransId).PdsCWQty;
            }
        }

        return pdsCWInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWIsValidQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the specified combination of quantities for the item are valid.
    /// </summary>
    /// <param name="_itemId">
    ///     The ID of the item to use in the validation.
    /// </param>
    /// <param name="_qty">
    ///     The inventory quantity to validate.
    /// </param>
    /// <param name="_cwQty">
    ///     The catch-weight quantity to validate.
    /// </param>
    /// <returns>
    ///     true if the quantities are valid for the specified item.
    /// </returns>
    /// <remarks>
    ///     It is a wrapper for <c>PdsCatchWeightItem</c> table method <c>pdsCWIsValidQty</c>.
    /// </remarks>
    protected boolean pdsCWIsValidQty(
        ItemId          _itemId,
        InventQty       _qty,
        PdsCWInventQty  _cwQty)
    {
        return PdsCatchWeightItem::pdsCWIsValidQty(_itemId, _qty, _cwQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWPickedInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight total picked quantity for a default sales order line type.
    /// </summary>
    /// <returns>
    /// The catch weight picked quantity.
    /// </returns>
    public PdsCWPicked pdsCWPickedInTotal()
    {
        return -InventTransIdSumSingleStatus::pdsCWQtyPicked(InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the catch weight quanity entered is valid.
    /// </summary>
    /// <param name="_inventTable">
    /// An optional <c>InventTable</c> record linked with the line.
    /// </param>
    /// <returns>
    /// true if CW quantity is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Checks that catch weight quantity is not negative, and that it is within the range set
    /// up for the item.
    /// </remarks>
    public boolean pdsCWQtyValidation(InventTable _inventTable = null)
    {
        boolean         ret = true;
        boolean         isNegative = false;
        InventTable     inventTable = prmisDefault(_inventTable) ? salesLine.inventTable() : _inventTable;
        InventQty       inventDeliverNowQty;
        PdsCWInventQty  cwInventDeliverNowQty;

        if (this.pdsIsCWItem())
        {
            if (salesLine.Scrap
            || this.returnItem()
            || salesLine.PdsCWQty < 0)
            {
                isNegative = true;
            }

            if (!salesLine.PdsCWQty
            && !isNegative)
            {
                ret = checkFailed("@PDS113");
            }

            if (ret && !this.returnItem())
            {
                if (salesLine.PdsCWInventDeliverNow)
                {
                    inventDeliverNowQty     = salesLine.InventDeliverNow;
                    cwInventDeliverNowQty   = salesLine.PdsCWInventDeliverNow;
                }
                else
                {
                    inventDeliverNowQty     = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                                    salesLine.InventDimId,
                                                                                                                    salesLine.SalesQty,
                                                                                                                    salesLine.SalesUnit,
                                                                                                                    inventTable.inventUnitId(),
                                                                                                                    NoYes::No);

                    cwInventDeliverNowQty   = salesLine.PdsCWQty;
                }

                if (!this.pdsCWIsValidQty(salesLine.ItemId, inventDeliverNowQty, cwInventDeliverNowQty))
                {
                    ret = checkFailed(
                    PdsCatchWeightItem::pdsCWErrorMsgForUnit(
                        salesLine.ItemId,
                        cwInventDeliverNowQty,
                        salesLine.SalesUnit));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetInvoiceRemainOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the remaining catch weight quantity for a default sales order line type after invoicing.
    /// </summary>
    /// <param name="_qtyUpdate">
    /// The catch weight updated quantity.
    /// </param>
    /// <param name="_creditRemain">
    /// A Boolean value that indicates whether there is any credit that remains.
    /// </param>
    /// <param name="_numOfRemainOri">
    /// The catch weight remaining quantity.
    /// </param>
    /// <returns>
    /// true if validation passes; otherwise, false .
    /// </returns>
    public boolean pdsCWSetInvoiceRemainOk(PdsCWInventQty    _qtyUpdate,
                                        boolean          _creditRemain,
                                        PdsCWInventQty   _numOfRemainOri)
    {
        if (_qtyUpdate * salesLine.PdsCWQty < 0
        && _creditRemain == false)
        {
            if (_qtyUpdate * _numOfRemainOri <= 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetPackingSlipRemainOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the catch weight remaining quantity for a default sales order line type after posting
    /// packing slip.
    /// </summary>
    /// <param name="_qtyUpdate">
    /// The catch weight updated quantity.
    /// </param>
    /// <param name="_creditRemain">
    /// A Boolean value that indicates whether there is any credit that remains.
    /// </param>
    /// <returns>
    /// true if validation passes; otherwise, false .
    /// </returns>
    public boolean pdsCWSetPackingSlipRemainOk(PdsCWInventQty   _qtyUpdate,
                                            boolean         _creditRemain)
    {
        if (_qtyUpdate * salesLine.PdsCWQty < 0
        && _creditRemain == false)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIsCWItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the item is a catch weight enabled item
    /// </summary>
    /// <returns>
    /// true, if the item is catch weight enabled;
    /// </returns>
    /// <remarks>
    /// It is a wrapper for <c>Global</c> class method <c>pdsIsCWItem</c>.
    /// </remarks>
    protected boolean pdsIsCWItem()
    {
        return PdsGlobal::pdsIsCWItem(salesLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIsCWItemAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a user can specify a catch weight item on the sales line.
    /// </summary>
    /// <returns>
    /// true if a catch weight item can be specified on the sales line; otherwise, false .
    /// </returns>
    /// <remarks>
    /// We do not enable catch weight items on sales lines that are related to projects. We do not support
    /// that module currently.This method should be overridden for sales line types that will not allow for
    /// catch weight items generally or that have a more specific way to determine whether catch weight
    /// items are allowed.
    /// </remarks>
    public boolean pdsIsCWItemAllowed()
    {
        return salesLine.ProjId == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMRCCheckRestricted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns false.
    /// </summary>
    /// <returns>
    /// Always returns false .
    /// </returns>
    /// <remarks>
    /// This method is overwritten in derived classes.
    /// </remarks>
    public boolean pdsMRCCheckRestricted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickedInTotalInventUnit</Name>
				<Source><![CDATA[
    SalesQty pickedInTotalInventUnit()
    {
        return -InventTransIdSumSingleStatus::qtyPicked(InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickedInTotalSalesUnit</Name>
				<Source><![CDATA[
    SalesQty pickedInTotalSalesUnit()
    {
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                     salesLine.InventDimId,
                                                                                     this.pickedInTotalInventUnit(),
                                                                                     InventTableModule::find(salesLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                                                     salesLine.SalesUnit,
                                                                                     NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfValidateBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a batch can be specified on the sales line.
    /// </summary>
    /// <param name="_inventBatchId">
    /// A batch ID.
    /// </param>
    /// <returns>
    /// true if a batch can be specified on the sales line; otherwise, false .
    /// </returns>
    protected boolean pmfValidateBatchId(InventBatchId _inventBatchId)
    {
        boolean ret = true;

        if (!this.creditNoteLine())
        {
            // Only validate WHS enabled Items if batch is above location.
            if (!WHSInventEnabled::exist(salesLine.ItemId)
                ||  WHSReservationHierarchyInventDimUtil::isBatchAboveLocation(salesLine.inventTable()))
            {
                if (#PdsShelfEnabled && this.mustValidateBatch(_inventBatchId))
                {
                    ret = ret
                            && InventBatch::pdsCheckExpiryDate(
                                _inventBatchId,
                                salesLine.ItemId,
                                salesLine.ReceiptDateRequested,
                                true,
                                salesLine.CustAccount,
                                false,
                                salesLine.inventDim());
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the batch must be validated.
    /// </summary>
    /// <param name = "_inventBatchId">An invent batch id</param>
    /// <returns>true if the batch must be validated; otherwise, false.</returns>
    protected boolean mustValidateBatch(InventBatchId _inventBatchId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingGoodsInRouteOffset_RU</Name>
				<Source><![CDATA[
    public LedgerPostingType postingGoodsInRouteOffset_RU()
    {
        return LedgerPostingType::SalesGoodsInRouteOffset_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    LedgerPostingType postingOperations()
    {
        // Specific posting type for returns.
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            if ((salesLine.SalesType   == SalesType::ReturnItem
            || salesLine.SalesQty <  0)
            && salesTable.mcrIsCallCenter())
            {
                return LedgerPostingType::MCRReturnsConsump;
            }
        }

        return LedgerPostingType::SalesConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingSales</Name>
				<Source><![CDATA[
    LedgerPostingType postingSales()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // Specific posting type for returns.
            if ((salesLine.SalesType   == SalesType::ReturnItem
            || salesLine.SalesQty <  0)
            && salesTable.mcrIsCallCenter())
            {
                return LedgerPostingType::MCRReturns;
            }
        }

        return LedgerPostingType::SalesRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingSales_IT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the Ledger posting type.
    /// </summary>
    /// <param name="_creditNote">Determines if the invoice is credit note.</param>
    /// <returns>The ledger posting type.</returns>
    public LedgerPostingType postingSales_IT(boolean _creditNote = false)
    {
        LedgerPostingType ledgerPostingType;

        if (this is SalesLineType_Project)
        {
            SalesLineType_Project salesLineType_Project = this;
            ledgerPostingType = salesLineType_Project.postingSales_IT(_creditNote);
        }
        else
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter))
                && (salesLine.SalesType == SalesType::ReturnItem || salesLine.SalesQty < 0)
                    && salesTable.mcrIsCallCenter())
            {
                ledgerPostingType = LedgerPostingType::MCRReturns;
            }
            else if (_creditNote)
            {
                ledgerPostingType = LedgerPostingType::SalesCreditNote_IT;
            }
            else
            {
                ledgerPostingType = LedgerPostingType::SalesRevenue;
            }
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyInventTransId</Name>
				<Source><![CDATA[
    public InventRefTransId parmInterCompanyInventTransId(InventRefTransId _interCompanyInventTransId = interCompanyInventTransId)
    {
        interCompanyInventTransId = _interCompanyInventTransId;
        return interCompanyInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    public SalesLine parmSalesLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    public SalesTable parmSalesTable()
    {
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInitFromCustInvoiceTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Brazilian configuration on a SalesLine record based on a CustInvoiceTrans record.
    /// </summary>
    /// <param name="custInvoiceTrans">
    /// The <c>custInvoiceTrans</c> record to initialize.
    /// </param>
    /// <param name="copyPrecisely">
    /// Indicates if line will be copied exactly.
    /// </param>
    /// <param name="copyPriceDisc">
    /// Indicates if price will be copied or re-initialized.
    /// </param>
    /// <param name="copyQty">
    /// Indicates if quantity will be copied exactly or re-initialized.
    /// </param>
    /// <param name="qty">
    /// Quantity to be copied.
    /// </param>
    public void postInitFromCustInvoiceTrans_BR(
                                   CustInvoiceTrans custInvoiceTrans,
                                   boolean          copyPrecisely,
                                   boolean          copyPriceDisc,
                                   boolean          copyQty,
                                   Qty              qty)
    {
        FiscalDocumentLine_BR   fiscalDocumentLine;

        // For returned orders the CFOP will be different from the original sales order.
        // The new CFOP code needs to be determined.
        if (salesLine.SalesType == SalesType::ReturnItem
                || salesLine.salesTable().isCancellingSalesReturn_BR())
        {
            salesLine.setCFOP_BR();
        }
        else
        {
            select cfop from fiscalDocumentLine
                where   fiscalDocumentLine.RefRecId == custInvoiceTrans.RecId       &&
                        fiscalDocumentLine.RefTableId  == custInvoiceTrans.TableId;

            SalesLine_BR salesLine_BR = salesLine.salesLine_BR();
            salesLine_BR.cfopTable_BR           = CFOPTable_BR::findByCFOPId(fiscalDocumentLine.cfop).RecId;
            salesLine_BR.FiscalDocumentType_BR  = custInvoiceTrans.custInvoiceJour().custInvoiceJour_BR().FiscalDocumentType_BR;
            salesLine.packSalesLine_BR(salesLine_BR);
        }

        if (CustParameters::isCancelAlternativePostingProfileEnabled() && salesLine.isCancellingSalesOrder_BR() && salesLine.salesTable().isCancellingFiscalDocApproved_BR())
        {
            salesLine.LedgerDimension = this.ledgerDimensionItem(salesLine.inventTable(), InventAccountType::SalesCancel);
        }

        salesLine.onTaxChange_BR(fieldNum(salesLine, TaxGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInitFromInventTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Brazilian configuration on a SalesLine record based on a InventTable record.
    /// </summary>
    /// <param name="_inventTable">
    /// The InventTable record where SalesLine will be based on.
    /// </param>
    public void postInitFromInventTable_BR(InventTable _inventTable)
    {
        SalesLine       lastSalesLine;
        SalesLine_BR    lastSalesLine_BR;

        salesLine.initFiscalDocumentType_BR(salesLine.inventDim(), _inventTable);

        select firstonly DeliveryPostalAddress from lastSalesLine
            order by LineNum desc
            where lastSalesLine.SalesId == salesLine.SalesId
                  && lastSalesLine.LineNum <= salesLine.LineNum
            outer join cfopTable_BR, DeliveryCFOPTable_BR from lastSalesLine_BR
                where lastSalesLine_BR.SalesLine == lastSalesLine.RecId;

        SalesLine_BR salesLine_BR = salesLine.salesLine_BR();

        if (lastSalesLine)
        {
            salesLine_BR.cfopTable_BR           = lastSalesLine_BR.cfopTable_BR;
            salesLine_BR.DeliveryCFOPTable_BR   = lastSalesLine_BR.DeliveryCFOPTable_BR;

            salesLine.packSalesLine_BR(salesLine_BR);

            if (!CFOPValidation_BR::construct(salesLine).checkCFOP(false)
                || salesLine.inventTable().ItemType == ItemType::Service)
            {
                salesLine_BR.cfopTable_BR = 0;
            }
        }
        else
        {
            salesLine_BR.cfopTable_BR = CFOPValidation_BR::construct(salesLine).getDefaultCFOP();
        }

        // Pack before calling onCFOChange_BR as it will trigger a read and pack.
        salesLine.packSalesLine_BR(salesLine_BR);
        salesLine.onCFOPChange_BR();

        salesLine_BR = salesLine.salesLine_BR();

        LogisticsPostalAddress deliveryAddress = salesTable.salesTable_BR().ServiceCodeOnDlvAddress_BR == NoYes::Yes ? salesLine.deliveryAddress() : null;
        salesLine_BR.TaxServiceCode_BR = _inventTable.serviceCode_BR(deliveryAddress).ServiceCodeId;
        salesLine.packSalesLine_BR(salesLine_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInitFromSalesLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Brazilian configuration on a SalesLine record based on another SalesLine record.
    /// </summary>
    /// <param name="_salesLine">The SalesLine record where the new SalesLine will be based ond.</param>
    /// <param name="copyPrecisely">A boolean value that indicated whether to copy precisely specific values.</param>
    public void postInitFromSalesLine_BR(SalesLine _salesLine, boolean copyPrecisely)
    {
        if (copyPrecisely)
        {
            SalesLine_BR salesLine_BR = salesLine.salesLine_BR();
            salesLine_BR.cfopTable_BR           = _salesLine.salesLine_BR().cfopTable_BR;
            salesLine_BR.DeliveryCFOPTable_BR   = _salesLine.salesLine_BR().DeliveryCFOPTable_BR;
            salesLine_BR.FiscalDocumentType_BR  = _salesLine.salesLine_BR().FiscalDocumentType_BR;
            salesLine.packSalesLine_BR(salesLine_BR);
        }
        else
        {
            salesLine.setCFOP_BR();
        }
        this.updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInsert_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes after insert is executed on original method.
    /// </summary>
    public void postInsert_BR()
    {
        this.updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSetStockedProduct_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines SalesLine Stocked Product field for Brazilian localization.
    /// </summary>
    public void postSetStockedProduct_BR()
    {
        if (salesLine.StockedProduct)
        {
            salesLine.StockedProduct = salesTable.createInventTrans_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateDeliveryScheduleOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the <c>Quantity</c> field as a sum of the <c>Quantity</c> fields on all the delivery
    /// lines and Delivery dates and as a minimum of corresponding dates on delivery lines.
    /// </summary>
    /// <param name = "_salesLineOrig">
    /// The original sales order line which is updated.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value indicates whether the price should be recalculated.
    /// </param>
    /// <remarks>
    /// If the <c>Quantity</c> field has to be changed and the line does not have an agreement reference,
    /// it resets the commercial attributes by looking for trade agreements.
    /// </remarks>
    public void recalculateDeliveryScheduleOrderLine(SalesLine _salesLineOrig, boolean _resetPrice)
    {
        throw error(error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this is a return item.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This base class method always returns false.The <c>SalesLineType_ReturnItem</c> child class
    /// overrides this method to return true.
    /// </remarks>
    public boolean returnItem()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQtyAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the <c>SalesQty</c> field is to be updated.
    /// </summary>
    /// <returns>
    /// true if the field must be updated; otherwise, false.
    /// </returns>
    boolean salesQtyAllowEdit()
    {
        return PriceDiscPolicyRule::createInstance(salesLine).launchPolicyDialogForAllPolicyFields(false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableSelectForupdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects a <c>SalesTable</c> record for update when the class member Boolean update value is true.
    /// </summary>
    /// <returns>
    /// A <c>SalesTable</c> record that is selected for update.
    /// </returns>
    protected SalesTable salesTableSelectForupdate()
    {
        if (!salesTable.selectForUpdate())
        {
            salesTable = salesLine.salesTable(true);
        }
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements logic to calculate and update the confirmed dates of the <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_strategy">
    /// A <c>SalesConfirmDatesStrategy</c> object that contains specific logic to set confirmed dates.
    /// </param>
    /// <returns>
    /// true if the confirmed dates are set; otherwise, false.
    /// </returns>
    public boolean setConfirmedDates(SalesConfirmDatesStrategy  _strategy)
    {
        if (_strategy
        && this.mustConfirmDates(_strategy))
        {
            return salesLine.SalesDeliveryDateControlMap::setConfirmedDates(_strategy);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceRemainOk</Name>
				<Source><![CDATA[
    boolean  setInvoiceRemainOk(SalesQty    qtyUpdate,
                            boolean     creditRemain,
                            Qty         numOfRemainOri)
    {
        if (qtyUpdate     * salesLine.SalesQty < 0  &&  creditRemain == false)
        {
            if (qtyUpdate * numOfRemainOri <= 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPackingSlipRemainOk</Name>
				<Source><![CDATA[
    boolean  setPackingSlipRemainOk(SalesQty    qtyUpdate,
                                boolean     creditRemain)
    {
        if (qtyUpdate * salesLine.SalesQty < 0  &&  creditRemain == false)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsSameLot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the same batch parameter for the sales line.
    /// </summary>
    public void setPdsSameLot()
    {
        if (#PdsSameLotEnabled
        && salesLine.SalesQty > 0
        && this.canInventBeReserved()
        && salesLine.isStocked()
        && salesLine.inventTable().pdsCheckSameLot())
        {
            salesLine.PdsSameLot = NoYes::Yes;
        }
        else
        {
            salesLine.PdsSameLot = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscChangePolicyMultiLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies a multi line discount related price discount change policy to the related header record.
    /// </summary>
    public void setPriceDiscChangePolicyMultiLine()
    {
        if (PriceDiscPolicyMakePolicy::construct().checkPolicyParmSetup(PriceDiscSystemSource::ManualEntry, ModuleSalesPurch::Sales)
        && !salesLine.salesTable().PriceDiscResultFields::multiLineDiscPolicyExist())
        {
            ttsbegin;

            SalesTable salesTableLocal = this.salesTableSelectForupdate();
            salesTableLocal.setPriceDiscChangePolicyMultiLine();
            salesTableLocal.write();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reservation type for the sales line.
    /// </summary>
    /// <remarks>
    /// Non-inventoried lines cannot have item reservation and are always set to <c>None</c> .
    /// </remarks>
    public void setReservation()
    {
        if (!salesLine.isStocked())
        {
            this.setReservationForNonStockedLine();
        }
        else
        {
            this.setReservationForStockedLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReservationForNonStockedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reservation type for the non stocked sales line.
    /// </summary>
    private void setReservationForNonStockedLine()
    {
        salesLine.Reservation = ItemReservation::None;
        if (#PdsBatchAttribEnabled)
        {
            salesLine.PdsBatchAttribAutoRes = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReservationForStockedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reservation type for the stocked sales line.
    /// </summary>
    [Replaceable]
    protected void setReservationForStockedLine()
    {
        this.setReservationFromKanbanRule(true);

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && salesLine.Reservation != ItemReservation::Automatic
            && RetailSalesTable::find(salesLine.SalesId).RetailChannel
            && RetailKit::findByProductmaster(InventTable::find(salesLine.ItemId).Product).RecId)
        {
            salesLine.Reservation = ItemReservation::Automatic;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReservationFromKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reservation type for the sales line from a kanban rule.
    /// </summary>
    /// <param name="_includeManualKanbanRules">
    /// A Boolean value that indicates whether kanban rules with manual setting are included in the search.
    /// </param>
    public void setReservationFromKanbanRule(boolean _includeManualKanbanRules = false)
    {
        if (   salesLine.isStocked()
        && KanbanFindRules::ruleMayExist(salesLine.ItemId,LeanReplenishmentStrategy::Event))
        {
            KanbanFindRulesEvent kanbanFindRulesEvent = KanbanFindRulesEvent::newStandard(salesLine.ItemId,
                                                                                         salesLine.RemainInventPhysical,
                                                                                         KanbanEventType::SalesLine,
                                                                                         _includeManualKanbanRules,
                                                                                         false,
                                                                                         true,
                                                                                         DateTimeUtil::getSystemDateTime(),
                                                                                         salesLine.InventDimId);
            kanbanFindRulesEvent.parmSkipRuleMayExistCheck(true);
            KanbanRule kanbanRule = kanbanFindRulesEvent.first();
            if (kanbanRule)
            {
                KanbanRuleEvent kanbanRuleEvent = KanbanRuleEvent::findKanbanRule(kanbanRule.RecId);

                //override line settings?
                if (   kanbanRuleEvent
                && kanbanRuleEvent.SourceRequirementReservation)
                {
                    switch (kanbanRuleEvent.InventoryReservationPolicy)
                    {
                        case LeanInventoryReservationPolicy::Always:
                            switch (kanbanRuleEvent.SalesLineReservationMethod)
                            {
                                case LeanSalesLineReservationMethod::Automatic:
                                    salesLine.Reservation = ItemReservation::Automatic;
                                    break;
                                case LeanSalesLineReservationMethod::Explosion:
                                    salesLine.Reservation = ItemReservation::Explosion;
                                    break;
                            }
                            break;
                        case LeanInventoryReservationPolicy::Never:
                            salesLine.Reservation = ItemReservation::None;
                            break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesStatus</Name>
				<Source><![CDATA[
    void  setSalesStatus(SalesLine  _salesLine, InventTransIdSum  _inventTransIdSum = null)
    {
        SalesLine origSalesLine;
        origSalesLine.data(_salesLine);

        if (_salesLine.isStocked())
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                if (_salesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
                {
                    _salesLine.mcrSetShipToParentStatus();
                    return;
                }
            }

            if (_salesLine.SalesStatus == SalesStatus::Canceled && _salesLine.RemainSalesPhysical == 0 && _salesLine.RemainSalesFinancial == 0)
            {
                if (!_inventTransIdSum)
                {
                    _inventTransIdSum = this.inventTransIdSumFromSalesLine(_salesLine);
                }

                if (_inventTransIdSum.physical() == 0 && _inventTransIdSum.financial() == 0)
                {
                    return;
                }
            }

            if (this.isDefaultLogicSetSalesStatusForStockedLinesEnabled(_salesLine, _inventTransIdSum))
            {
                this.setSalesStatusForStockedLines(_salesLine, _inventTransIdSum);
            }
        }
        else
        {
            if (this.isDefaultLogicSetSalesStatusNonInventoriedEnabled(_salesLine, _inventTransIdSum))
            {
                this.setSalesStatusNonInventoried(_salesLine);
            }
        }

        if (!_salesLine.checkStatusChange(origSalesLine))
        {
            throw error("@SYS18738");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultLogicSetSalesStatusForStockedLinesEnabled</Name>
				<Source><![CDATA[
    protected boolean isDefaultLogicSetSalesStatusForStockedLinesEnabled(SalesLine _salesLine, InventTransIdSum _inventTransIdSum)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultLogicSetSalesStatusNonInventoriedEnabled</Name>
				<Source><![CDATA[
    protected boolean isDefaultLogicSetSalesStatusNonInventoriedEnabled(SalesLine _salesLine, InventTransIdSum _inventTransIdSum)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory when a sales line is inserted into the database.
    /// </summary>
    /// <param name="_childBuffer">Child buffer for creating the inventory movement.</param>
    /// <returns>A new instance of <c>InventUpd_Estimated</c> class.</returns>
    public InventUpd_Estimated updateInventoryOnInsert(Common _childBuffer)
    {
        InventUpd_Estimated estimated = this.instantiateInventUpd_Estimated(_childBuffer, InventMovSubType::None);
        if (estimated)
        {
            estimated.updateNow();
        }

        return estimated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory when a sales line is updated.
    /// </summary>
    /// <param name="_childBuffer">Child buffer for updating the inventory movement.</param>
    /// <returns>A new instance of the <c>InventUpd_Estimated</c> class.</returns>
    public InventUpd_Estimated updateInventoryOnUpdate(Common _childBuffer)
    {
        InventUpd_Estimated estimated = this.instantiateInventUpd_Estimated(_childBuffer, InventMovSubType::None);
        if (estimated)
        {
            estimated.updateNow();
        }

        return estimated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needUpdateSalesOrderStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales status on the header needs to be updated.
    /// </summary>
    /// <returns>true, if the sales order status needs to be updated; otherwise false.</returns>
    public boolean needUpdateSalesOrderStatus()
    {
        return salesLine.SalesStatus != salesTable.SalesStatus && !this.isMcrCallCenterReturn();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMcrCallCenterReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the order is a call center return order.
    /// </summary>
    /// <returns>true, if the order is a return and is associated with a call center; otherwise, false.</returns>
    protected boolean isMcrCallCenterReturn()
    {
        return salesTable.SalesType == SalesType::ReturnItem && salesTable.mcrIsCallCenter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesStatusToInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status on the given sales line to invoiced.
    /// </summary>
    /// <param name = "_salesLine">A <c>SalesLine</c> record.</param>
    protected void setSalesStatusToInvoiced(SalesLine _salesLine)
    {
        _salesLine.SalesStatus = SalesStatus::Invoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesStatusToCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status on the given sales line to canceled.
    /// </summary>
    /// <param name = "_salesLine">A <c>SalesLine</c> record.</param>
    protected void setSalesStatusToCanceled(SalesLine _salesLine)
    {
        _salesLine.SalesStatus = SalesStatus::Canceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesStatusToDelivered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status on the given sales line to delivered.
    /// </summary>
    /// <param name = "_salesLine">A <c>SalesLine</c> record.</param>
    protected void setSalesStatusToDelivered(SalesLine _salesLine)
    {
        _salesLine.SalesStatus = SalesStatus::Delivered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesStatusToBackOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status on the given sales line to back order.
    /// </summary>
    /// <param name = "_salesLine">A <c>SalesLine</c> record.</param>
    protected void setSalesStatusToBackOrder(SalesLine _salesLine)
    {
        _salesLine.SalesStatus = SalesStatus::Backorder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesStatusForStockedLines</Name>
				<Source><![CDATA[
    protected void setSalesStatusForStockedLines(SalesLine  _salesLine, InventTransIdSum  _inventTransIdSum)
    {
        if (_salesLine.QtyOrdered == 0)
        {
            this.setSalesStatusToBackOrder(_salesLine);
        }
        else
        {
            if (_salesLine.RemainSalesPhysical  == 0 &&
                    _salesLine.RemainSalesFinancial == 0)
            {
                if (!_inventTransIdSum)
                {
                    _inventTransIdSum = this.inventTransIdSumFromSalesLine(_salesLine);
                }

                if (_inventTransIdSum.financial() == 0)
                {
                    if (_salesLine.ProjId && _salesLine.SalesType == SalesType::ItemReq &&
                            PurchLine::findInventTransId(_salesLine.InventRefTransId).RemainInventFinancial != 0)
                    {
                        this.setSalesStatusToBackOrder(_salesLine);
                    }
                    else
                    {
                        this.setSalesStatusToCanceled(_salesLine);
                    }
                }
                else
                {
                    this.setSalesStatusToInvoiced(_salesLine);
                }
            }
            else
            {
                if (_salesLine.RemainSalesPhysical == 0)
                {
                    this.setSalesStatusToDelivered(_salesLine);
                }
                else
                {
                    this.setSalesStatusToBackOrder(_salesLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdSumFromSalesLine</Name>
				<Source><![CDATA[
    protected InventTransIdSum inventTransIdSumFromSalesLine(SalesLine _salesLine)
    {
        return InventTransIdSum::newTransOriginId(InventTransOriginSalesLine::findInventTransOriginId(_salesLine.DataAreaId, _salesLine.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesStatusNonInventoried</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sales status for a non inventoried sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line for which the status should be set.
    /// </param>
    void  setSalesStatusNonInventoried(SalesLine  _salesLine)
    {
        CustPackingSlipTrans    custPackingSlipTrans;
        SalesQty                invoicedInTotal;

        if (_salesLine.SalesStatus == SalesStatus::Canceled && _salesLine.RemainSalesPhysical == 0 && _salesLine.RemainSalesFinancial == 0)
        {
            invoicedInTotal = _salesLine.invoicedInTotal();

            select sum(Qty) from custPackingSlipTrans
            where custPackingSlipTrans.InventTransId == _salesLine.InventTransId;

            if (custPackingSlipTrans.Qty == 0 && invoicedInTotal == 0)
            {
                return;
            }
        }

        if (_salesLine.SalesQty == 0)
        {
            this.setSalesStatusToBackOrder(_salesLine);
        }
        else
        {
            if (_salesLine.RemainSalesPhysical  == 0 && _salesLine.RemainSalesFinancial == 0)
            {
                if (!invoicedInTotal)
                {
                    invoicedInTotal = _salesLine.invoicedInTotal();
                }

                CustPackingSlipTrans custPackingSlipTransLocal;

                if (_salesLine.SalesType == SalesType::ItemReq && invoicedInTotal == 0)
                {
                    select firstonly RecId from custPackingSlipTransLocal
                        where custPackingSlipTransLocal.InventTransId == _salesLine.InventTransId;
                }
                    
                if (custPackingSlipTransLocal.RecId)
                {
                    this.setSalesStatusToDelivered(_salesLine);
                }
                else if (this.canBeCanceled(invoicedInTotal, _salesLine))
                {
                    this.setSalesStatusToCanceled(_salesLine);
                }
                else
                {
                    this.setSalesStatusToInvoiced(_salesLine);
                }
            }
            else
            {
                if (_salesLine.RemainSalesPhysical == 0)
                {
                    this.setSalesStatusToDelivered(_salesLine);
                }
                else
                {
                    this.setSalesStatusToBackOrder(_salesLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStockedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>StockedProduct</c> field for the line based on the line type and item model group for
    /// the associated item.
    /// </summary>
    public void setStockedProduct()
    {
        if (salesLine.isCategoryBased())
        {
            salesLine.StockedProduct = NoYes::No;
        }
        else
        {
            InventModelGroup inventModelGroup = InventTable::modelGroupByItemId(salesLine.ItemId);
            salesLine.StockedProduct = inventModelGroup.isStocked()? NoYes::Yes : NoYes::No;
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.postSetStockedProduct_BR();
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    void setTaxGroup(TaxGroup  _taxGroup)
    {
        salesLine.TaxGroup = _taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxItemGroup</Name>
				<Source><![CDATA[
    void setTaxItemGroup(TaxItemGroup _taxItemGroup)
    {
        salesLine.TaxItemGroup = _taxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncPurchLine</Name>
				<Source><![CDATA[
    AxPurchLine syncPurchLine(SalesLine _salesLine, PurchLine _purchLine = null, boolean _create = false)
    {
        PurchLine           purchLine = PurchLine::findInventTransId(_salesLine.InventRefTransId, true);
                       
        boolean create = _create;

        AxPurchLine axPurchLine = this.constructAxPurchLine(_salesLine, _purchLine);

        if (!create &&  axPurchLine.purchLine().RecId == 0)
        {
            create = true;
        }

        if (create || _salesLine.fieldChanged(fieldNum(SalesLine, ReturnDispositionCodeId)))
        {
            axPurchLine.parmReturnDispositionCodeId(salesLine.ReturnDispositionCodeId);
        }

        InterCompanyEndpointActionPolicyTransfer interCompanyEndpointActionPolicyTransfer = axPurchLine.purchLine().purchTable().interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::Internal);
        if (interCompanyEndpointActionPolicyTransfer.PriceDiscount)
        {
            axPurchLine.initFromSalesLine(_salesLine);

            if (!create)
            {
                axPurchLine.purchLine().setManualEntryChangePolicyFromSalesLine(_salesLine);
            }
        }
        else
        {
            if ((create || _salesLine.fieldChanged(fieldNum(SalesLine, InventTransIdReturn)))
                && (_salesLine.SalesQty < 0 || _salesLine.ExpectedRetQty < 0))
            {
                if (_salesLine.interCompanyReturnItemInventTransId())
                {
                    VendInvoiceTrans vendInvoiceTrans = VendInvoiceTrans::findInventTransId(_salesLine.interCompanyReturnItemInventTransId());
                    axPurchLine.initFromVendInvoiceTrans(vendInvoiceTrans);
                    if (ReturnSalesLinePurchSyncPriceAsInvoicedFlight::instance().isEnabled())
                    {
                        axPurchLine.parmSkipPriceDiscCalc(true);
                        
                    }
                }
                else
                {
                    axPurchLine.initPricingFieldsFromSalesLine(_salesLine);
                    axPurchLine.clearMarkupAndDiscountFields();
                }
            }
            else
            {
                axPurchLine.initValue();
            }
        }

        if (_salesLine.isDropShipment() && _salesLine.fieldChanged(fieldNum(SalesLine, InventDimId)))
        {
            axPurchLine.parmInventDimId(_salesLine.InventDimId);
        }
        else if (axPurchLine.axInventDim().parmInventDimId())
        {
            axPurchLine.parmInventDimId(axPurchLine.axInventDim().parmInventDimId());
        }

        if (_salesLine.DeliveryType == TradeLineDlvType::DropShip &&
            _salesLine.fieldChanged(fieldNum(SalesLine, SalesUnit)))
        {
            axPurchLine.parmPurchUnit(_salesLine.SalesUnit);
        }

        if (_salesLine.fieldChanged(fieldNum(SalesLine, SalesQty))
            || _salesLine.fieldChanged(fieldNum(SalesLine, SalesUnit))
            || _salesLine.fieldChanged(fieldNum(SalesLine, PdsCWQty))
            || (_salesLine.SalesQty == 0 && _salesLine.InventRefId))
        {
            SalesQty updatingSalesQty = _salesLine.SalesQty - _salesLine.orig().SalesQty;
            if (_salesLine.DeliveryType == TradeLineDlvType::DropShip)
            {
                axPurchLine.parmPurchQty(axPurchLine.parmPurchQty() + updatingSalesQty);
            }
            else
            {
                axPurchLine.parmPurchQty(this.getPurchQuantity(_salesLine, axPurchLine.parmPurchQty(), updatingSalesQty, axPurchLine.parmPurchUnit()));
            }

            if (PdsGlobal::pdsIsCWItem(_salesLine.ItemId))
            {
                PdsCWQty updatingPdsCWSalesQty = _salesLine.PdsCWQty - _salesLine.orig().PdsCWQty;
                axPurchLine.parmPdsCWQty(axPurchLine.parmPdsCWQty() + updatingPdsCWSalesQty);
            }

            if (axPurchLine.purchLine().PurchQty > 0
            && (!axPurchLine.purchLine().purchTable().interCompanyEndpointActionPolicy()
                || axPurchLine.purchLine().purchTable().interCompanyEndpointActionPolicy().PriceDiscountSearch))
            {
                PurchLine purchLineLocal;
                buf2Buf(axPurchLine.purchLine(),purchLineLocal);
                purchLineLocal.initFromPurchTable(axPurchLine.purchLine().purchTable());
                purchLineLocal.initFromSalesLine(_salesLine);

                if (this.mustSetPriceDisc())
                {
                    purchLineLocal.setPriceDisc(axPurchLine.purchLine().inventDim());
                }

                axPurchLine.initFromPurchLine(purchLineLocal);

                if (interCompanyEndpointActionPolicyTransfer.PriceDiscount)
                {
                    _salesLine.SalesPrice     = ExchangeRateHelper::curPrice2CurPrice(purchLineLocal.PurchPrice, purchLineLocal.CurrencyCode, _salesLine.CurrencyCode);
                    _salesLine.PriceUnit      = purchLineLocal.PriceUnit;
                    _salesLine.SalesMarkup    = ExchangeRateHelper::curPrice2CurPrice(purchLineLocal.PurchMarkup, purchLineLocal.CurrencyCode, _salesLine.CurrencyCode);
                    _salesLine.LinePercent    = purchLineLocal.LinePercent;
                    _salesLine.LineDisc       = ExchangeRateHelper::curPrice2CurPrice(purchLineLocal.LineDisc, purchLineLocal.CurrencyCode, _salesLine.CurrencyCode);
                    _salesLine.MultiLnPercent = purchLineLocal.MultiLnPercent;
                    _salesLine.MultiLnDisc    = ExchangeRateHelper::curPrice2CurPrice(purchLineLocal.MultiLnDisc, purchLineLocal.CurrencyCode, _salesLine.CurrencyCode);
                    _salesLine.LineAmount     = _salesLine.calcLineAmount();
                }
            }
        }

        if (interCompanyEndpointActionPolicyTransfer.PriceDiscount
            &&  axPurchLine.isPriceDisc_FieldsEmpty()
            && (create || _salesLine.fieldChanged(fieldNum(SalesLine, LineAmount))))
        {
            axPurchLine.parmLineAmount(CurrencyExchangeHelper::curAmount2CurAmount(_salesLine.LineAmount, _salesLine.CurrencyCode, axPurchLine.purchLine().CurrencyCode));
        }
        else
        {
            axPurchLine.parmLineAmount(axPurchLine.purchLine().calcLineAmount());
        }

        if (_salesLine.fieldChanged(fieldNum(SalesLine, DeliveryType)))
        {
            axPurchLine.parmDeliveryType(_salesLine.DeliveryType);

            if (_salesLine.DeliveryType == TradeLineDlvType::DropShip)
            {
                axPurchLine.parmCustomerRef             (salesTable.CustomerRef);
                axPurchLine.parmCustPurchaseOrderFormNum(salesTable.PurchOrderFormNum);
            }
            else
            {
                axPurchLine.parmCustomerRef             ('');
                axPurchLine.parmCustPurchaseOrderFormNum('');
            }
        }

        SalesLineType::syncDeliveryAddress(_salesLine, axPurchLine, _salesLine.DeliveryType == TradeLineDlvType::DropShip);

        if (axPurchLine.parmDeliveryType() == TradeLineDlvType::DropShip)
        {
            axPurchLine = this.syncPurchLineDatesDirectDelivery(axPurchLine, _salesLine);

            if (create || _salesLine.fieldChanged(fieldNum(SalesLine, OverDeliveryPct)))
            {
                axPurchLine.parmOverDeliveryPct(_salesLine.OverDeliveryPct);
            }

            if (create || _salesLine.fieldChanged(fieldNum(SalesLine, UnderDeliveryPct)))
            {
                axPurchLine.parmUnderDeliveryPct(_salesLine.UnderDeliveryPct);
            }

            if (create || _salesLine.fieldChanged(fieldNum(SalesLine, RemainInventPhysical)))
            {
                axPurchLine.parmRemainInventPhysical(_salesLine.RemainInventPhysical);
            }

            if (create || _salesLine.fieldChanged(fieldNum(SalesLine, RemainSalesPhysical)))
            {
                axPurchLine.parmRemainPurchPhysical(_salesLine.RemainSalesPhysical);
            }

            if (create || _salesLine.fieldChanged(fieldNum(SalesLine, Complete)))
            {
                axPurchLine.parmComplete(_salesLine.Complete);
            }

            if (create || _salesLine.fieldChanged(fieldNum(SalesLine, Blocked)))
            {
                axPurchLine.parmBlocked(_salesLine.Blocked);
            }

            // Keep integrity for the drop ship comment from sales order to purchase order.
            MCRSalesLineDropShipment mcrSalesLineDropShipment = _salesLine.mcrSalesLineDropShipment();
            if (create || mcrSalesLineDropShipment.fieldChanged(fieldNum(MCRSalesLineDropShipment, DropShipComment)))
            {
                axPurchLine.parmMCRDropShipComment(mcrSalesLineDropShipment.DropShipComment);
            }
        }
        else
        {
            axPurchLine = this.syncPurchLineDates(axPurchLine, _salesLine, create);
        }

        if (_salesLine.SourcingOrigin == SalesSourcingOrigin::Intercompany)
        {
            if (create
                || _salesLine.fieldChanged(fieldNum(SalesLine, SourcingInventSiteId))
                || _salesLine.fieldChanged(fieldNum(SalesLine, SourcingInventLocationId)))
            {
                axPurchLine.parmIntercompanyOSOSourcingInventSiteId(_salesLine.SourcingInventSiteId);
                axPurchLine.parmIntercompanyOSOSourcingInventLocationId(_salesLine.SourcingInventLocationId);
            }
        }

        if (create || _salesLine.fieldChanged(fieldNum(SalesLine, PlanningPriority)))
        {
            axPurchLine.parmPlanningPriority(_salesLine.PlanningPriority);
        }

        return axPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncPurchLineSave</Name>
				<Source><![CDATA[
    void syncPurchLineSave(SalesLine _salesLine, boolean _create = false)
    {
        if (this.isPurchaseLineUpdateAllowed(_salesLine))
        {
            return;
        }

        AxPurchLine axPurchLine = this.syncPurchLine(_salesLine, null, _create);
        if (axPurchLine.purchLine() || _create)
        {
            axPurchLine.parmSkipUpdate(InterCompanySkipUpdate::Internal);
            axPurchLine.validateInput(true);
            axPurchLine.save();

            if (axPurchLine.purchLine().purchTable().interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::Internal).PriceDiscount)
            {
                _salesLine.SalesPrice     = ExchangeRateHelper::curPrice2CurPrice(axPurchLine.purchLine().PurchPrice, axPurchLine.purchLine().CurrencyCode, _salesLine.CurrencyCode);
                _salesLine.PriceUnit      = axPurchLine.purchLine().PriceUnit;
                _salesLine.SalesMarkup    = ExchangeRateHelper::curPrice2CurPrice(axPurchLine.purchLine().PurchMarkup, axPurchLine.purchLine().CurrencyCode, _salesLine.CurrencyCode);
                _salesLine.LinePercent    = axPurchLine.purchLine().LinePercent;
                _salesLine.LineDisc       = ExchangeRateHelper::curPrice2CurPrice(axPurchLine.purchLine().LineDisc, axPurchLine.purchLine().CurrencyCode, _salesLine.CurrencyCode);
                _salesLine.MultiLnPercent = axPurchLine.purchLine().MultiLnPercent;
                _salesLine.MultiLnDisc    = ExchangeRateHelper::curPrice2CurPrice(axPurchLine.purchLine().MultiLnDisc, axPurchLine.purchLine().CurrencyCode, _salesLine.CurrencyCode);
                _salesLine.LineAmount     = _salesLine.calcLineAmount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchaseLineUpdateAllowed</Name>
				<Source><![CDATA[
    protected boolean isPurchaseLineUpdateAllowed(SalesLine _salesLine)
    {
        if (!_salesLine)
        {
            return true;
        }

        if (_salesLine.SkipUpdate == InterCompanySkipUpdate::Internal
            ||  _salesLine.SkipUpdate == InterCompanySkipUpdate::Both
            || !SalesTableType::construct(salesTable).canCreatePurchOrder())
        {
            return true;
        }

        PurchTable localPurchTable = PurchTable::find(_salesLine.InventRefId);
        if (_salesLine.InventRefId
            && localPurchTable .isInvoiced()
            && localPurchTable .isInterCompanyOrder())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAxPurchLine</Name>
				<Source><![CDATA[
    internal AxPurchLine constructAxPurchLine(SalesLine _salesLine, PurchLine _purchLine)
    {
        PurchLine   purchLine = PurchLine::findInventTransId(_salesLine.InventRefTransId, true);
        AxPurchLine axPurchLine;

        if (purchLine)
        {
            if (purchLine.RecId == _purchLine.RecId)
            {
                // Uses _purchLine buffer because its field value may have been changed outside but not updated
                // into database yet, For example, intercompany related fields value is changed in firming planned purchase order.
                if (!_purchLine.selectForUpdate())
                {
                    _purchLine.selectForUpdate(true);
                }

                axPurchLine = AxPurchLine::newPurchLine(_purchLine);
            }
            else
            {
                axPurchLine = AxPurchLine::newPurchLine(purchLine);
            }
        }
        else
        {
            if (_purchLine)
            {
                axPurchLine = AxPurchLine::newPurchLine(PurchLine::findRecId(_purchLine.RecId,true));
            }
            else
            {
                axPurchLine = AxPurchLine::newPurchLine(_purchLine);
            }
        }

        return axPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncPurchLineDatesDirectDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes dates from the sales line to the direct delivery purchase line.
    /// </summary>
    /// <param name = "_axPurchLine">The <c>AxPurchLine</c> instance to synchronize</param>
    /// <param name = "_salesLine">The <c>SalesLine</c> buffer to synchronize from</param>
    /// <returns>The updated <c>AxPurchLine</c> instance</returns>
    private AxPurchLine syncPurchLineDatesDirectDelivery(AxPurchLine _axPurchLine, SalesLine _salesLine)
    {
        boolean isShippingDateConfirmed = false;

        if (isConfigurationkeyEnabled(configurationKeyNum(SalesDeliveryDateControl)))
        {
            if (_salesLine.fieldChanged(fieldNum(SalesLine, ReceiptDateRequested))
                && _salesLine.ReceiptDateRequested != dateNull()
                && _salesLine.ReceiptDateRequested  < _axPurchLine.parmDeliveryDate() )
            {
                warning(strFmt("@SYS94308", date2StrUsr(_salesLine.ReceiptDateRequested, DateFlags::FormatAll) , date2StrUsr(_axPurchLine.parmDeliveryDate(), DateFlags::FormatAll)));
            }

            InterCompanyEndpointActionPolicyTransfer interCompanyEndpointActionPolicyTransfer = _axPurchLine.purchLine().purchTable().interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::Internal);
            
            _axPurchLine.parmDeliveryDate(_salesLine.ReceiptDateConfirmed && (interCompanyEndpointActionPolicyTransfer.UpdateRequestedReceiptDate) ? _salesLine.ReceiptDateConfirmed : _salesLine.ReceiptDateRequested);

            isShippingDateConfirmed = interCompanyEndpointActionPolicyTransfer.UpdateRequestedReceiptDate && _salesLine.ShippingDateConfirmed;
            _axPurchLine.parmShippingDateRequested(isShippingDateConfirmed ? _salesLine.ShippingDateConfirmed : _salesLine.ShippingDateRequested);
        }
        else
        {
            isShippingDateConfirmed = _salesLine.ShippingDateConfirmed != dateNull();
            DlvDate syncDate = isShippingDateConfirmed ? _salesLine.ShippingDateConfirmed : _salesLine.ShippingDateRequested;

            if (_salesLine.fieldChanged(fieldNum(SalesLine, ShippingDateRequested))
                && _salesLine.ShippingDateRequested < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) )
            {
                warning(strFmt("@SYS94306", date2StrUsr(_salesLine.ReceiptDateRequested, DateFlags::FormatAll)));
                syncDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }

            _axPurchLine.parmDeliveryDate(syncDate);
        }

        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            if (isShippingDateConfirmed)
            {
                _axPurchLine.parmRequestedShipDate(_salesLine.ShippingDateConfirmed);
            }
            else
            {
                this.syncAndCalculateRequestedShipReceiptDates(_axPurchLine, _salesLine);
            }
        }

        return _axPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstOpenReceiptDateBackward</Name>
				<Source><![CDATA[
    private DlvDate findFirstOpenReceiptDateBackward(PurchLine _purchLine, DlvDate _deliveryDate)
    {
        DlvDate adjustedDeliveryDate = _deliveryDate;
        VendTable vendTable = _purchLine.vendTable_OrderAccount();
        var workCalendarSched = new WorkCalendarSched();
        CalendarId receiptCalendarId;

        if (vendTable.interCompanyTradingRelationActive())
        {
            CustTable icCustTable = vendTable.interCompanyTradingPartnerCustomer().custTable();
            LogisticsLocationRecId deliveryLocation = _purchLine.deliveryLocation();
            changecompany (icCustTable.DataAreaId)
            {
                receiptCalendarId = LogisticsLocationExt::find(deliveryLocation).SalesCalendarId;
                receiptCalendarId = receiptCalendarId ? receiptCalendarId : icCustTable.SalesCalendarId;

                if (receiptCalendarId)
                {
                    adjustedDeliveryDate =  workCalendarSched.schedDate(SchedDirection::Backward,
                                                                        _deliveryDate,
                                                                        0,
                                                                        true,
                                                                        receiptCalendarId);
                }
            }
        }
        else
        {
            receiptCalendarId = vendTable.PurchCalendarId;

            if (!receiptCalendarId)
            {
                ReqGroupId reqGroupId = InventTable::find(_purchLine.ItemId).ReqGroupId;
                receiptCalendarId = ReqGroup::find(reqGroupId).CalendarId;
            }

            if (!receiptCalendarId)
            {
                InventLocation receiptInventLocation = InventLocation::find(InventDim::find(_purchLine.InventDimId).InventLocationId);
                receiptCalendarId = receiptInventLocation.ReqCalendarId;
            }

            if (receiptCalendarId)
            {
                adjustedDeliveryDate =  workCalendarSched.schedDate(SchedDirection::Backward,
                                                                        _deliveryDate,
                                                                        0,
                                                                        true,
                                                                        receiptCalendarId);
            }
        }

        return adjustedDeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncPurchLineDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes dates from the sales line to the non-direct delivery purchase line.
    /// </summary>
    /// <param name = "_axPurchLine">The <c>AxPurchLine</c> instance to synchronize</param>
    /// <param name = "_salesLine">The <c>SalesLine</c> buffer to synchronize from</param>
    /// <param name = "_create">boolean indicating if the synchronization is happening during line creation</param>
    /// <returns>The updated <c>AxPurchLine</c> instance</returns>
    private AxPurchLine syncPurchLineDates(AxPurchLine _axPurchLine, SalesLine _salesLine, boolean _create)
    {
        if ( _create
             || _salesLine.fieldChanged(fieldNum(SalesLine, ShippingDateRequested))
             || _salesLine.fieldChanged(fieldNum(SalesLine, DeliveryType)))
        {
            LeadTime leadTimeInternal = IntercompanySalesCalcAvailableDlvDates_SalesLine::safetyMarginLeadTimeForSourcingPurchaseLine(_axPurchLine.purchLine());
            DlvDate syncDate = this.schBackwardSyncDates(_axPurchLine.purchLine(), _salesLine, leadTimeInternal);

            if (syncDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
            {
                warning(strFmt("@SYS98070", date2StrUsr(syncDate, DateFlags::FormatAll)));
                syncDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
            else
            {
                DlvDate purchaseLeadDate = _axPurchLine.purchLine().interCompanyPurchaseLeadDate(syncDate);

                if (purchaseLeadDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    warning(strFmt("@SYS106946", date2StrUsr(syncDate, DateFlags::FormatAll)));
                }

                if (!_create
                    && _axPurchLine.parmDeliveryDate() != dateNull()
                    && syncDate < _axPurchLine.parmDeliveryDate())
                {
                    warning(strFmt("@SYS94304", date2StrUsr(syncDate, DateFlags::FormatAll), date2StrUsr(_axPurchLine.parmDeliveryDate(), DateFlags::FormatAll)));
                }
            }

            _axPurchLine.parmDeliveryDate(syncDate);
        }
        else
        {
            _axPurchLine.parmDeliveryDate(_axPurchLine.parmDeliveryDate());
        }

        this.syncAndCalculateRequestedShipReceiptDates(_axPurchLine, _salesLine);

        return _axPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncAndCalculateRequestedShipReceiptDates</Name>
				<Source><![CDATA[
    private void syncAndCalculateRequestedShipReceiptDates(AxPurchLine _axPurchLine, SalesLine _salesLine)
    {
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            _axPurchLine.parmRequestedShipDate(dateNull());

            PurchLine localPurchLine = _axPurchLine.purchLine();
            localPurchLine.calculateRequestedShipAndReceiptDate(localPurchLine.RequestedShipDate, localPurchLine.DeliveryDate, SchedDirection::Backward);
            localPurchLine.SkipShipReceiptDateCalculation = true;

            _axPurchLine.parmRequestedShipDate(localPurchLine.RequestedShipDate);
                
            boolean isSalesLineUpdated;
            if (localPurchLine.DeliveryDate != _salesLine.ReceiptDateRequested)
            {
                if (localPurchLine.isDropShipment())
                {
                    isSalesLineUpdated = true;
                    _salesLine.ReceiptDateRequested = localPurchLine.DeliveryDate;
                    _salesLine.validateSalesCalculateAvailableDeliveryDateControl(fieldNum(SalesLine, ReceiptDateRequested));

                    _axPurchLine.parmDeliveryDate(_salesLine.ReceiptDateRequested);
                }
                else
                {
                    _axPurchLine.parmDeliveryDate(localPurchLine.DeliveryDate);
                }
            }

            if (localPurchLine.RequestedShipDate != _salesLine.ShippingDateRequested)
            {
                if (localPurchLine.isDropShipment())
                {
                    isSalesLineUpdated = true;
                    _salesLine.ShippingDateRequested = localPurchLine.RequestedShipDate;
                    _salesLine.validateSalesCalculateAvailableDeliveryDateControl(fieldNum(SalesLine, ShippingDateRequested));

                    _axPurchLine.parmShippingDateRequested(_salesLine.ShippingDateRequested);
                }
                else
                {
                    _axPurchLine.parmShippingDateRequested(localPurchLine.RequestedShipDate);
                }
            }

            if (isSalesLineUpdated)
            {
                info(strFmt("@SCM:VendorDispatchDateSalesOrderLineRequestDateUpdateInfoMessage", _salesLine.SalesId, _salesLine.itemName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a sales order line record is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a sales order line record has been updated.
    /// </summary>
    /// <param name="_salesLineOrig">
    /// The original sales order line which is updated.
    /// </param>
    public void updated(SalesLine _salesLineOrig)
    {
        this.additionalUpdteForRetailSalesLine(_salesLineOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalUpdteForRetailSalesLine</Name>
				<Source><![CDATA[
    private void additionalUpdteForRetailSalesLine(SalesLine _salesLineOrig)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && _salesLineOrig.SalesStatus != SalesStatus::Invoiced && _salesLineOrig.SalesStatus != SalesStatus::Canceled)
        {
            RetailSalesTable retailSales;
            retailSales = RetailSalesTable::findSalesTable(_salesLineOrig.salesTable());
            if (retailSales.RetailChannel)
            {
                MCRPriceHistoryUpdate mcrPriceHistoryUpdate = MCRPriceHistoryUpdate::constructNoThrow(_salesLineOrig);
                if (mcrPriceHistoryUpdate)
                {
                    SalesPurchLineInterface tempSalesPurchLine = _salesLineOrig.salesPurchLineInterface();
                    PriceDisc_Price priceDisc_Price = tempSalesPurchLine.priceDisc_PriceCache();
                    PriceDisc_LineDisc priceDisc_LineDisc = tempSalesPurchLine.priceDisc_LineDiscCache();
                    mcrPriceHistoryUpdate.parmUseRetailPricing(true);
                    mcrPriceHistoryUpdate.update(priceDisc_Price, priceDisc_LineDisc);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalDocumentText_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Fiscal document texts of a specific type on the Sales line.
    /// </summary>
    /// <param name="_type">
    /// A <c>FiscalDocumentTextType_BR</c> value indicating the type.
    /// </param>
    /// <remarks>
    /// This method does nothing if the Sales line has not been inserted yet.
    /// </remarks>
    public void updateFiscalDocumentText_BR(FiscalDocumentTextType_BR _type)
    {
        if (salesLine.RecId
            && this.canFiscalDocTextBeRegistrated_BR())
        {
            FiscalDocumentTextUpdate_BR::newFromRecord(salesLine).updateTexts(_type);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderLineOfDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the order line of the delivery schedule to which the delivery line belongs.
    /// </summary>
    /// <remarks>
    /// This private method is used by update and delete methods to trigger the recalculation of the order
    /// line.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The order line of the selected delivery line was deleted.
    /// </exception>
    void updateOrderLineOfDeliverySchedule()
    {
        SalesLine salesLineOrderLine = SalesDeliverySchedule::findOrderLineForDeliveryLine(salesLine.InventTransId, true);
        if (!salesLineOrderLine)
        {
            // The order line of the selected delivery line was deleted.
            throw error("@SYS131419");
        }
        else
        {
            salesLineOrderLine.recalculateDeliveryScheduleOrderLine(true);
            // calling update without updating delivery schedule line to indicate that this is a DS synchronization update
            // and thus SalesQty changes are allowed.
            salesLineOrderLine.updateWithoutUpdatingDeliveryScheduleLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePendingRegistrationsNonStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the pending registrations for non-stocked lines.
    /// </summary>
    /// <param name="_isPendingRegistrationsToBeCreated">
    /// Specifies whether to newly create pending registrations for the line.
    /// </param>
    /// <remarks>
    /// If the line is new then pending registrations will be created. Otherwise, the pending registration
    /// record will be synchronized with the line.
    /// </remarks>
    public void updatePendingRegistrationsNonStocked(boolean _isPendingRegistrationsToBeCreated)
    {
        SalesNonStockedRegistrationHelper salesNonStockedRegistrationHelper = TradeNonStockedRegistrationHelper::newFromSalesPurchLine(salesLine);

        //Synchronize only for non-stocked lines without disposition code set and if the full line quantity has not been registered
        if (salesNonStockedRegistrationHelper.isPendingRegistrationsApplicable(_isPendingRegistrationsToBeCreated))
        {
            if (salesNonStockedRegistrationHelper.shouldPendingRegistrationsBeDeleted())
            {
                this.deletePendingRegistrationsNonStocked();
            }
            else if (salesNonStockedRegistrationHelper.shouldPendingRegistrationsBeSynced(_isPendingRegistrationsToBeCreated))
            {
                salesNonStockedRegistrationHelper.synchronizePendingRegistration(
            this.getPendingRegistrationQuantityToUpdate(_isPendingRegistrationsToBeCreated), _isPendingRegistrationsToBeCreated);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRAssetStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes before an insert or update is executed on the original method.
    /// </summary>
    public void updateRAssetStatus()
    {
        if (!InventTable::find(salesLine.ItemId).AssetGroupId_RU ||
            salesLine.creditNoteLine())
        {
            return;
        }
        if (salesLine.orig().AssetId_RU  && salesLine.orig().AssetId_RU != salesLine.AssetId_RU && ! salesLine.orig().creditNoteLine() &&
            RAssetTable::find(salesLine.orig().AssetId_RU).Status == RAssetStatus::SoldInvoice)
        {
            RAssetTable::updateStatus(salesLine.orig().AssetId_RU, RAssetStatus::Open);
            RAssetTable::updateCustInfo(salesLine.orig().AssetId_RU, '', '', '');
        }
        if (salesLine.AssetId_RU && salesLine.orig().AssetId_RU != salesLine.AssetId_RU)
        {
            RAssetTable::updateStatus(salesLine.AssetId_RU, RAssetStatus::SoldInvoice);
            RAssetTable::updateCustInfo(salesLine.AssetId_RU, salesLine.CustAccount, salesLine.SalesId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLine</Name>
				<Source><![CDATA[
    void updateSalesLine(InventTransIdSum  inventTransIdSum = null)
    {
        salesLine.SalesDeliverNow       = 0;
        salesLine.InventDeliverNow      = 0;
        salesLine.PdsCWInventDeliverNow = 0;

        this.setSalesStatus(salesLine,inventTransIdSum);

        // Set the drop shipment status.
        if (salesLine.mcrSalesLineDropShipment().DropShipment)
        {
            this.mcrSetDropShipStatus(salesLine, inventTransIdSum);
        }

        salesLine.deleteUnusedKanbans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SalesPriceDateType</c>.
    /// </summary>
    /// <returns>A <c>SalesPriceDateType</c> value.</returns>
    protected SalesPriceDateType priceDateType()
    {
        return SalesParameters::find().PriceDateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRunPriceDiscPolicyDialogDuringFieldValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the price discount dialog should be called.
    /// </summary>
    /// <param name = "_priceDateType">A <c>SalesPriceDateType</c> value.</param>
    /// <returns>true if the price discount dialog should be called; otherwise, false.</returns>
    protected boolean mustRunPriceDiscPolicyDialogDuringFieldValidation(SalesPriceDateType _priceDateType)
    {
        if (this.priceDateType() == _priceDateType)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLineUpdateDirectDlvFlagInHeader</Name>
				<Source><![CDATA[
    private boolean canLineUpdateDirectDlvFlagInHeader(SalesLine _salesLineOrig)
    {
        return (   salesLine.SourcingOrigin == SalesSourcingOrigin::Intercompany
                && salesLine.SkipUpdate == InterCompanySkipUpdate::No
                && (salesLine.DeliveryType != _salesLineOrig.DeliveryType || salesLine.SourcingVendAccount != _salesLineOrig.SourcingVendAccount)
               );
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean  validateDelete(boolean _interCompanyForce = false,
                            boolean _mcrCancel = false )
    {
        boolean                 ok = true;

        SalesLine               salesLine_Orig = salesLine.orig();
        PurchLine               purchLine;
        SalesDeliverySchedule   salesDeliverySchedule;
        SalesDeliverySchedule   salesDeliveryScheduleOther;
        SalesLine               salesLineOther;
        WHSLoadLine             whsLoadLine;
        WHSLoadTable            whsLoadTable;

        setPrefix(#PreFixField(salesLine,ItemId));

        if (ok && salesLine.RemainSalesFinancial
            // For order cancellation, let packed lines go through if coming from sales order cancel.
            && (!_mcrCancel || !salesTable.mcrIsCallCenter())
        )
        {
            ok = checkFailed("@SYS13406");
        }

        if (ok && salesLine.interCompanyIsBeingUpdated(true))
        {
            ok = false;
        }

        if (ok && FormDataUtil::isFormDataSource(salesLine))
        {
            ok = salesLine.warningForReference();
        }

        CustParameters custParameters = CustParameters::find();
        if (!custParameters.TaxAllowEditingReturnCreditWithTaxAdj
            && salesLine_Orig.creditNoteLine()
            && TaxWorkRegulation::exist(tableNum(SalesTable), salesTable.RecId))
        {
            if (custParameters.TaxAdjustmentInReturn)
            {
                ok = checkFailed("@Tax:TaxAdjustmentInReturnWarning");
            }
            else
            {
                ok = checkFailed("@SYS53183");
            }
        }

        if (ok && salesLine.isPartOfProjInvoiceProposal())
        {
            ok = checkFailed("@Proj:CantDeleteSalesLineIncludedInProposal");
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (ok && salesLine.hasInventTransToDelivery_RU())
            {
                ok = checkFailed("@GLS114835");
            }
        }
        // </GEERU>

        //
        //  Validation of related intercompany purch line
        //
        if (ok
        &&  salesLine.SkipUpdate != InterCompanySkipUpdate::InterCompany
        &&  salesLine.SkipUpdate != InterCompanySkipUpdate::Both
        &&  salesLine.isInterCompanyOrder())
        {
            purchLine = null;
            changecompany(salesTable.InterCompanyCompanyId)
            {
                purchLine = PurchLine::findInventTransId(salesLine.InterCompanyInventTransId);
                ok = this.interCompanyValidateDelete(purchLine);
            }

            if (ok)
            {
                ok = this.interCompanyValidateDeleteQty(purchLine);
            }
        }

        if (ok
        &&  !_interCompanyForce
        &&  salesLine.isInterCompanyOrder()
        &&  salesLine.SkipUpdate         != InterCompanySkipUpdate::InterCompany
        &&  salesLine.SkipUpdate         != InterCompanySkipUpdate::Both
        &&  salesLine.InterCompanyOrigin == InterCompanyOrigin::Derived)
        {
            ok = checkFailed("@SYS98649");
        }
        //
        //  Validation of related purch line
        //
        if (ok
        &&  salesLine.SkipUpdate != InterCompanySkipUpdate::Internal
        &&  salesLine.SkipUpdate != InterCompanySkipUpdate::Both
        &&  salesLine.InventRefTransId
        &&  salesLine.interCompanySalesLineExist())
        {
            purchLine = null;
            purchLine = PurchLine::findInventTransId(salesLine.InventRefTransId);
            purchLine.SkipUpdate = InterCompanySkipUpdate::Internal;
            ok = purchLine.validateDelete(true);

            if (ok  &&  salesLine.RemainSalesPhysical != purchLine.RemainPurchPhysical)
            {
                ok = checkFailed("@SYS2288");
            }

            if (ok  &&  salesLine.RemainSalesFinancial != purchLine.RemainPurchFinancial)
            {
                ok = checkFailed("@SYS2288");
            }
        }

        if (ok
            && salesLine.LineDeliveryType   == LineDeliveryType::DeliveryLine
            && salesLine.SalesStatus        == SalesStatus::Invoiced)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                RetailGiftCardTable retailGiftCardTable = salesLine.mcrRetailGiftCardTable();
                if (retailGiftCardTable && !retailGiftCardTable.validateDelete())
                {
                    ok = checkFailed("@MCR11023");
                }
            }
            select firstonly salesDeliverySchedule
                where salesDeliverySchedule.DeliveryLine == salesLine.InventTransId
                join RecId from salesDeliveryScheduleOther
                    where salesDeliveryScheduleOther.OrderLine == salesDeliverySchedule.OrderLine
                    exists join RecId from salesLineOther
                        where salesLineOther.InventTransId == salesDeliveryScheduleOther.DeliveryLine
                            && (salesLineOther.SalesStatus   == SalesStatus::None
                                || salesLineOther.SalesStatus == SalesStatus::Backorder
                                || salesLineOther.SalesStatus == SalesStatus::Delivered
                                || salesLineOther.SalesStatus == SalesStatus::Canceled);

            if (salesDeliverySchedule)
            {
                // The invoiced delivery line cannot be deleted unless all delivery lines are invoiced.
                ok = checkFailed("@SYS131425");
            }
        }

        // If the sales line is associated with a load line that is not shipped, then the sales line cannot be deleted.
        if (ok
            && salesLine.SalesStatus == SalesStatus::Invoiced)
        {
            select firstOnly recId from whsLoadLine
                exists join whsLoadTable
                    where whsLoadLine.InventTransId     == salesLine.InventTransId
                        && whsLoadLine.InventTransType  == InventTransType::Sales
                        && whsLoadTable.LoadId          == whsLoadLine.LoadId
                        && whsLoadTable.LoadStatus      != WHSLoadStatus::Shipped;

            if (whsLoadLine.recId)
            {
                ok = checkFailed("@WAX855");
            }
        }

        if (ok
            && (salesLine.SalesStatus == SalesStatus::None
                || salesLine.SalesStatus == SalesStatus::Backorder
                || salesLine.SalesStatus == SalesStatus::Delivered
                || salesLine.SalesStatus == SalesStatus::Canceled)
            && WHSLoadLine::existsForInventTransId(salesLine.InventTransId))     
        {
            if (WHSParameters::find().AutoCleanEmptyLoadManifest)
            {
                ok = this.checkLoadLinesCanBeDeleted(salesLine.InventTransId);
            }
            else
            {
                ok = checkFailed("@WAX2060" + ' ' + strFmt("@WAX:SalesLineDeleteNoAutoCleanEmptyLoadManifestWarning", "@WAX583", "@WAX5406"));
            }
        }
        ok = InventQualityOrderTable::checkNoOpenQualityOrders(salesLine) && ok;

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            ok = ok && this.kittingValidateDelete(salesLine);
        }

        // For retail cash and carry orders, we will only allow the deletion after the retail statement that generates this sales order is posted.
        // To determine whether the retail statement is posted or not, we check whether the RetailStatementTable is already deleted.
        // We cannot rely on whether RetailStatementJour exists to determine because once RetailStatementJour is archived, it's giving us a wrong signal and stopping the sales order to be deleted / archived.
        //isRetailCashAndCarrySales() with cache
        if (ok && salesTable.isRetailCashAndCarrySales())
        {
            if (RetailSalesTableAllowDeleteForCashAndCarryOrdersFlight::instance().isEnabled() && salesTable.isPostedRetailCashAndCarrySales())
            {
                // ok is already true which allows sales line deletion, do nothing
                ok = true;
            }
            else
            {
                ok = checkFailed("@Retail:DeleteCashAndCarrySalesLine");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLoadLinesCanBeDeleted</Name>
				<Source><![CDATA[
    private boolean checkLoadLinesCanBeDeleted(InventTransId _inventTransId)
    {
        if (_inventTransId)
        {
            WHSLoadLine loadLine;

            while select loadLine
                where loadLine.InventTransType == InventTranstype::Sales
                    && loadLine.InventTransId == _inventTransId
            {
                if (!loadLine.validateLoadLineDoesNotHaveNonCanceledWork("@WAX:SalesLineDeleteAutoCleanEmptyLoadManifestWarning"))
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified field is valid.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field to validate.
    /// </param>
    /// <returns>
    /// true if the field is valid; otherwise, false.
    /// </returns>
    public boolean  validateField(FieldId  _fieldId)
    {
        boolean  ok = true;
        // <GIN>
        boolean isIndiaTaxEnabled;
        // </GIN>

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            if (salesTable.InterCompanyPurchId && salesTable.InterCompanyCompanyId)
            {
                changecompany(salesTable.InterCompanyCompanyId)
                {
                    isIndiaTaxEnabled = TaxParameters::checkTaxParameters_IN();
                }
            }
            else
            {
                isIndiaTaxEnabled = TaxParameters::checkTaxParameters_IN();
            }
        }
        // </GIN>
        switch (_fieldId)
        {
            case fieldNum(SalesLine, ItemId):
                ok = salesLine.checkItemId();
                if (!WHSFilter::custFilterMatch(salesLine.CustAccount, salesLine.ItemId))
                {
                    ok = checkFailed(strFmt("@WAX:CustomerFiltersMatchingMessage", salesLine.ItemId));
                }
                break;

            case fieldNum(SalesLine, SalesCategory):
                ok = salesLine.checkSalesCategory();
                break;

            case fieldNum(SalesLine, UnderDeliveryPct):
                ok = salesLine.checkUnderDelivery();
                break;

            case fieldNum(SalesLine, OverDeliveryPct):
                ok = salesLine.checkOverDelivery();
                break;

            case fieldNum(SalesLine, SalesUnit):
                ok = salesLine.checkSalesUnit();
                break;

            case fieldNum(SalesLine, ActivityNumber):
                ok = salesLine.checkActivity();
                break;

            case fieldNum(SalesLine, Reservation):
                ok = salesLine.checkReservationField();
                break;

            case fieldNum(SalesLine, DeliveryDateControlType):
                ok = salesLine.SalesDeliveryDateControlMap::checkDeliveryDateControlType(salesLine.ItemId, salesLine.isStocked());
                break;

            case fieldNum(SalesLine, DeliveryType):
                ok = this.validateDeliveryType(fieldPName(SalesLine, DeliveryType));
                break;

            case fieldNum(SalesLine, SourcingVendAccount):
                ok = this.validateSourcingVendor(fieldPName(SalesLine, SourcingVendAccount));
                break;

            case fieldNum(SalesLine, SalesQty),
                 fieldNum(SalesLine, PdsCWQty):
                ok = this.salesQtyAllowEdit();
                break;

            case fieldNum(SalesLine, SalesPrice),
                 fieldNum(SalesLine, LineDisc),
                 fieldNum(SalesLine, LinePercent),
                 fieldNum(SalesLine, MultiLnDisc),
                 fieldNum(SalesLine, MultiLnPercent),
                 fieldNum(SalesLine, SalesMarkup)   :
                ok = this.canLineAmountBeUpdated();
                break;
            // <GIN>

            case fieldNum(SalesLine_IN, MaximumRetailPrice):
                if (isIndiaTaxEnabled)
                {
                    ok = salesLine.SalesPurchJournalLine::getSalesPurchJournalLineExtension_IN().SalesPurchJournalLineExtension_IN::checkMaximumRetailPrice(salesLine.salesLine_IN().MaximumRetailPrice);
                }
                break;

            case fieldNum(SalesLine_IN, AssessableValueTransactionCurrency):
                if (isIndiaTaxEnabled)
                {
                    ok = salesLine.SalesQty * salesLine.salesLine_IN().AssessableValueTransactionCurrency >= 0;
                    if (!ok)
                    {
                        checkFailed("@GLS5572");
                    }
                }
                break;

            // </GIN>

            case fieldNum(SalesLine, ReceiptDateRequested):
                if (this.mustRunPriceDiscPolicyDialogDuringFieldValidation(SalesPriceDateType::ReceiptDateRequested))
                {
                    ok = PriceDiscPolicyRule::createInstance(salesLine).launchPolicyDialogForAllPolicyFields(false, false);
                }
                break;

            // Need to check sales price in case item on sales line is a gift certificate.
            case fieldNum(SalesLine, SalesPrice)            :
                if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
                {
                    ok = salesLine.mcrCheckSalesPrice();
                }
                break;

            case fieldNum(SalesLine, ShippingDateRequested):
            case fieldNum(SalesLine, ShippingDateConfirmed):
                if (this.mustRunPriceDiscPolicyDialogDuringFieldValidation(SalesPriceDateType::ShippingDateRequested))
                {
                    ok = PriceDiscPolicyRule::createInstance(salesLine).launchPolicyDialogForAllPolicyFields(false, false);
                }
                break;

            //<GMX>
            case fieldNum(SalesLine, PropertyNumber_MX),
                 fieldNum(SalesLine, CustomsName_MX),
                 fieldNum(SalesLine, CustomsDocNumber_MX),
                 fieldNum(SalesLine, CustomsDocDate_MX):
                ok = this.checkEInvoiceAdditionalInfo_MX();
                break;
            //</GMX>

            case fieldNum(SalesLine, InventDimId):
                if (salesLine.isCategoryBased())
                {
                    ok = salesLine.inventDim().validateField(fieldNum(InventDim,InventLocationId));
                }
                else if (!salesLine.isStocked())
                {
                    ok = InventDim::checkUpdateEstimatedMovement(InventMovement::construct(salesLine, InventMovSubType::None,null),null);
                }
                break;
            // <GEERU>
            case fieldNum(SalesLine, PostingProfile_RU) :
                ok = salesLine.checkPostingProfile_RU();
                break;
            // </GEERU>
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldChangeIsNotBlockedByMarking</Name>
				<Source><![CDATA[
    private boolean validateFieldChangeIsNotBlockedByMarking(SalesLine _salesLine, FieldLabel _fieldLabel)
    {
        if (_salesLine.qtyMarked())
        {
            return checkFailed(strFmt("@Intercompany:ErrorChangeSourcingFieldBecauseMarkingExists", _fieldLabel));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNotCategoryOnlyLine</Name>
				<Source><![CDATA[
    private boolean validateNotCategoryOnlyLine(SalesLine _salesLine)
    {
        if (!_salesLine.ItemId && _salesLine.SalesCategory)
        {
            if (!(   _salesLine.DeliveryType == TradeLineDlvType::None
                  && _salesLine.SourcingOrigin == SalesSourcingOrigin::Inventory
                  && _salesLine.SourcingVendAccount == '')
               )
            {
                return checkFailed("@Intercompany:ErrorSourcingCategoryOnlyLines");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeliveryType</Name>
				<Source><![CDATA[
    private boolean validateDeliveryType(FieldLabel _fieldLabel)
    {
        boolean ok = true;

        if (salesline.interCompanyIsBeingUpdated(false, true))
        {
            return checkFailed(strFmt("@SYS99546", fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, DeliveryType))));
        }

        if (salesLine.isPurchLineCreatedFromThisSalesLine(salesLine.referencedPurchLine()))
        {
            if (salesLine.orig().DeliveryType != salesLine.DeliveryType
                && !this.sourcingVendorChanged()) // If this condition is false, the user will be prompted in validateSourcingVendor instead
            {
                ok = salesLine.warningForReference();
            }
        }
        else
        {
            ok = this.validateNotCategoryOnlyLine(salesLine);
            ok = ok && this.validateFieldChangeIsNotBlockedByMarking(salesLine, _fieldLabel);
        }

        if (ok
            && salesLine.DeliveryType == TradeLineDlvType::DropShip
            && ReqPeggingAssignment::existSourceDocumentLine(salesLine.SourceDocumentLine, ReqPeggingAssignmentType::Requirement))
        {
            ok = checkFailed("@Intercompany:DirectDeliveryNotAllowedForSalesLinesSuppliedByEventKanbans");
        }

        if (ok
            && salesLine.RecId
            && salesLine.DeliveryType == TradeLineDlvType::DropShip
            && salesLine.SalesQty > salesLine.RemainSalesPhysical)
        {
            ok = checkFailed("@Intercompany:DirectDeliveryNotAllowedForSalesLinesWithRemainingQtyLessThanSalesQty");
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourcingVendor</Name>
				<Source><![CDATA[
    private boolean validateSourcingVendor(FieldLabel _fieldLabel)
    {
        boolean ok = true;

        if (salesline.interCompanyIsBeingUpdated(false, true))
        {
            return checkFailed(strFmt("@SYS99546", fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, SourcingVendAccount))));
        }

        if (salesLine.isPurchLineCreatedFromThisSalesLine(salesLine.referencedPurchLine()))
        {
            if (this.sourcingVendorChanged())
            {
                ok = salesLine.warningForReference();
            }
        }
        else
        {
            ok = this.validateNotCategoryOnlyLine(salesLine);
            ok = ok && this.validateFieldChangeIsNotBlockedByMarking(salesLine, _fieldLabel);
        }

        if (ok
            && salesLine.SourcingVendAccount
            && ReqPeggingAssignment::existSourceDocumentLine(salesLine.SourceDocumentLine, ReqPeggingAssignmentType::Requirement))
        {
            ok = checkFailed("@Intercompany:SourcingVendorNotAllowedForSalesLinesSuppliedByEventKanbans");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourcingVendorChanged</Name>
				<Source><![CDATA[
    private boolean sourcingVendorChanged()
    {
        VendAccount origSourcingVendAccount = salesLine.orig().SourcingVendAccount;

        if (origSourcingVendAccount
            && origSourcingVendAccount != salesLine.SourcingVendAccount)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether modification of an inventory dimension can be performed.
    /// </summary>
    /// <param name = "_inventDim">The updated dimensions.</param>
    /// <param name = "_dimFieldId">The field that was changed.</param>
    /// <returns>True if the change can be performed, false otherwise.</returns>
    public boolean validateModifyInventDim(
        InventDim           _inventDim,
        FieldId             _dimFieldId)
    {
        Set dimFieldIdSet = new Set(Types::Integer);
        dimFieldIdSet.add(_dimFieldId);

        return this.validateModifyInventDimSet(_inventDim, dimFieldIdSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifyInventDimSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether modification of multiple inventory dimensions can be performed.
    /// </summary>
    /// <param name = "_inventDim">The updated dimensions.</param>
    /// <param name = "_dimFieldIdSet">The set of fields that was changed.</param>
    /// <returns>True if the change can be performed, false otherwise.</returns>
    public boolean validateModifyInventDimSet(
        InventDim           _inventDim,
        Set                 _dimFieldIdSet)
    {
        boolean             ok = true;
        FieldId             dimFieldId;

        SetEnumerator       enumerator = _dimFieldIdSet.getEnumerator();

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();

            //Changes in financial dimensions for marked lines are not allowed
            if (salesLine.InventRefTransId
                && _inventDim.(dimFieldId) != _inventDim.orig().(dimFieldId)
                && (salesLine.DeliveryType  != TradeLineDlvType::DropShip
                    ||  (salesLine.isStocked()
                    ||   dimFieldId == fieldNum(InventDim, InventSiteId)
                    ||   InventDim::isFieldIdProductDimension(dimFieldId))))
            {
                if (InventDimGroupSetup::newItemId(salesLine.ItemId).getFieldSetup(dimFieldId).isFinancialInventoryEnabled())
                {
                    ok = checkFailed("@SYS98272");
                    break;
                }
            }
        }

        if (ok && salesLine.RecId && salesLine.salesTable().MatchingAgreement)
        {
            salesLine.InventDimId = InventDim::findOrCreate(_inventDim).InventDimId;
            if (!salesLine.refreshAgreementLink(new AgreementAutolinkHelperSalesLine()))
            {
                if (_dimFieldIdSet.elements() > 1)
                {
                    ok = salesLine.unLinkAgreementLinePrompt(fieldNum(salesLine, InventDimId));
                }
                else
                {
                    ok = salesLine.unLinkAgreementLinePrompt(dimFieldId,tableNum(InventDim));
                }
            }
        }

        if (ok
            && salesLine.InventTransIdReturn)
        {
            if (_dimFieldIdSet.in(fieldNum(InventDim, InventSerialId)))
            {
                ok = ok || InventLookupReturn::validateInventSerialIdReturn(_inventDim.InventSerialId, _inventDim.InventBatchId, salesLine.InventTransIdReturn, salesLine.ItemId);
            }
            if (_dimFieldIdSet.in(fieldNum(InventDim, InventBatchId)))
            {
                ok = ok || InventLookupReturn::validateInventBatchIdReturn(_inventDim.InventSerialId, _inventDim.InventBatchId, salesLine.InventTransIdReturn, salesLine.ItemId);
            }

            // <GEERU>
            if (_dimFieldIdSet.in(fieldNum(InventDim, InventOwnerId_RU)))
            {
                ok = ok || InventLookupReturn::validateInventOwnerIdReturn(_inventDim.InventOwnerId_RU, salesLine.InventTransIdReturn, salesLine.ItemId);
            }

            if (_dimFieldIdSet.in(fieldNum(InventDim, InventGtdId_RU)))
            {
                ok = ok || InventLookupReturn::validateInventGTDIdReturn(_inventDim.InventGtdId_RU, salesLine.InventTransIdReturn, salesLine.ItemId);
            }
            // </GEERU>
        }

        enumerator.reset();

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();

            if (ok
                && InventDim::mustUseFieldSalesPriceDisc(dimFieldId, InventDimGroupSetup::newItemId(salesLine.ItemId)))
            {
                ok = PriceDiscPolicyRule::createInstance(salesLine).launchPolicyDialogForAllPolicyFields(false, true);
                break;
            }
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (_dimFieldIdSet.in(fieldNum(InventDim, InventProfileId_RU)))
            {
                ok = this.checkInventProfile_RU(_inventDim) && ok;
            }

            if (_dimFieldIdSet.in(fieldNum(InventDim, InventOwnerId_RU)))
            {
                ok = this.checkInventOwner_RU(_inventDim) && ok;
            }
        }
        // </GEERU>

        if (ok && (_dimFieldIdSet.in(fieldNum(InventDim, InventBatchId))))
        {
            ok = this.pmfValidateBatchId(_inventDim.InventBatchId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifyInventDimOrderCommittedReservation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean validateModifyInventDimOrderCommittedReservation(
        SalesLine _salesLineBeforeChange, 
        InventDimId _newInventDimId)
    {
        boolean ok = true;

        if (_salesLineBeforeChange.InventDimId != _newInventDimId)
        {
            InventMovement movement = InventMov_Sales::newFromSalesLine(_salesLineBeforeChange);

            if (movement.canUseFlexibleWarehouseLevelDimensionReservation() && WHSOrderCommittedReservationFacade::orderCommittedReservationExists(movement.transId()))
            {
                ok  = checkFailed("@WAX:OrderCommittedReservationChangingDimensionsWarning");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckProductNotStopped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the check to validate if the product is not stopped, must be done.
    /// </summary>
    /// <returns>true if the check must be done; otherwise, false.</returns>
    public boolean mustCheckProductNotStopped()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean  validateWrite(boolean _skipCreditLimitCheck = false)
    {
        boolean                             ok          = true;
        SalesLine                           salesLine_Orig = salesLine.orig();
        InventTable                         inventTable = salesLine.inventTable();
        MCROrderParameters                  mcrOrderParameters;
        SalesTable                          salesTableLocal;
        MCRReturnSalesTable                 mcrReturnSalesTable;
        boolean                             mcrCallCenterEnabled;
        MCRSalesLine                        mcrSalesLine;
        EGAISAlcoholProduction_RU           eGAISAlcoholProduction;

        mcrCallCenterEnabled = salesTable.mcrIsCallCenter();
        if (mcrCallCenterEnabled)
        {
            mcrOrderParameters = MCROrderParameters::find();
            salesTableLocal = SalesTable::find(salesLine.SalesId);
            mcrReturnSalesTable = salesTableLocal.mcrReturnSalesTable();
            mcrSalesLine = salesLine.mcrSalesLine();

            // If source Id is mandatory, check that it exists.
            // Do not require a source code on an exchange order regardless of the value of the 'source code require' flag.
            if (mcrOrderParameters.mcrSourceCodeRequired
                && mcrSalesLine.SourceId == ''
                && salesTableLocal.SalesType != SalesType::ReturnItem
                && !mcrReturnSalesTable.IsExchange)
            {
                ok = checkFailed("@MCR12005");
            }
        }

        //<GMX>
        #ISOCountryRegionCodes
        //</GMX>

        if (salesLine.ItemId && !inventTable.RecId)
        {
            ok = checkFailed(strFmt("@SYS5307", salesLine.ItemId));
        }

        if (!salesTable.RecId)
        {
            ok = checkFailed("@SYS26869");
        }

        if (salesTable.isInterCompanyOrder())
        {
            ok = this.interCompanySyncEngine().checkProductBlocked() && ok;
        }
        
        if (salesLine.SourcingVendAccount && !salesLine.ItemId)
        {
            ok = checkFailed("@Intercompany:ErrorSourcingCategoryOnlyLines");
        }

        if (SalesLine.SourcingOrigin != SalesSourcingOrigin::Unknown
            && !SalesLine.SourcingVendAccount
            && SalesLine.isDirectDelivery())
        {
            ok = checkFailed("@Intercompany:ErrorDirectDeliveryWithoutSourcingVendor");
        }

        ok = ok && salesLine.checkDeliveryType();

        if (salesLine_Orig.RecId)
        {
            if (salesLine.Blocked && salesLine_Orig.Blocked)
            {
                ok = checkFailed("@SYS1365");
            }

            CustParameters custParameters = CustParameters::find();
            if (!custParameters.TaxAllowEditingReturnCreditWithTaxAdj
                && salesLine_Orig.creditNoteLine(salesTable)
                && TaxWorkRegulation::exist(tableNum(SalesTable), salesTable.RecId))
            {
                if (custParameters.TaxAdjustmentInReturn)
                {
                    ok = checkFailed("@Tax:TaxAdjustmentInReturnWarning");
                }
                else
                {
                    ok = checkFailed("@SYS53183");
                }
            }
        }

        if (!salesLine.checkTaxItemGroup()
            || !salesLine.checkSalesType()
            || !salesLine.checkCurrencyCode()
            || !salesLine.checkItemId()
            || (this.mustCheckProductNotStopped()
                && !this.checkProductNotStopped())
            || (!salesLine.RecId && !salesLine.checkSalesCategory()))
        {
            ok = false;
        }

        if (!salesLine.ItemId && !salesLine.SalesCategory)
        {
            ok = checkFailed("@SYS134349");
        }

        if (!salesLine.RecId
            && EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(salesLine.ItemId, salesLine.inventDim())
            && !EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                             salesLine.InventDimId,
                                                                                             salesLine.SalesUnit,
                                                                                             inventTable.inventUnitId()))
        {
            ok = checkFailed(strFmt("@SCM:ProductVariantConversionMissing", salesLine.SalesUnit, inventTable.inventUnitId(), EcoResProductMaster::find(InventTable.Product).productNumber()));
        }

        if (salesLine.Transport && !salesLine.Port && IntrastatTransportMode::isPortMandatory(salesLine.Transport))
        {
            warning("@SYS26970");
        }

        if (salesLine.BarCodeType)
        {
            if (!BarcodeSetup::find(salesLine.BarCodeType).validateBarcode(salesLine.BarCode))
            {
                ok = false;
            }
        }

        if (!this.validateReturnLotIdCostPrice(salesLine))
        {
            warning("@SYS75759");
        }

        if (salesLine.SalesQty * salesLine.LineAmount < 0)
        {
            ok = checkFailed("@SYS78848");
        }

        if (ok && #PdsCatchWeightEnabled)
        {
            ok = inventTable.pdsCheckCWItemSetup();
        }

        if (ok)
        {
            ok = this.pdsCWQtyValidation(inventTable);
        }

        if (ok && #PdsSameLotEnabled)
        {
            if (salesLine.PdsSameLot && salesLine.Reservation == ItemReservation::Explosion)
            {
                ok = checkFailed("@PDS556");
            }

            if (ok && salesLine.PdsSameLot && salesLine.SalesQty < 0)
            {
                ok = checkFailed("@PDS583");
            }
        }

        if (ok && #PmfEnabled)
        {
            ok = inventTable.pmfInventProductType().validateInventUpd();
        }

        if (!salesLine.checkReqActivity())
        {
            if (salesLine.SalesType == SalesType::ItemReq)
            {
                ok = checkFailed("@Proj:ActivityNumberMissingForItemRequirement");
            }
            else
            {
                ok = checkFailed("@Proj:ActivityNumberMissingForSalesOrder");
            }

        }

        if (mcrCallCenterEnabled)
        {
            // Check for gift card.
            RetailParameters retailParameters = RetailParameters::find();
            if (retailParameters.GiftcardItem
                && inventTable.ItemId == retailParameters.GiftcardItem)
            {
                // Don't allow more than one gift card per sales line,
                // unless it is a parent ship to line.
                if (salesLine.SalesQty > 1 &&
                    salesLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
                {
                    ok = checkFailed("@MCR10867");
                }

                // <GEERU>
                if (retailParameters.ProcessGiftCardsAsPrepayments_RU &&
                    salesLine.LineAmount != 0)
                {
                    ok = checkFailed("@SYP4860105");
                }

                if (!retailParameters.ProcessGiftCardsAsPrepayments_RU &&
                    retailParameters.UseGiftCardPolicies)
                {
                    MCRSalesOrderGiftCardPolicyHelper mcrSalesOrderGiftCardPolicyHelper = MCRSalesOrderGiftCardPolicyHelper::construct(salesTable.CurrencyCode);
                    ok = mcrSalesOrderGiftCardPolicyHelper.checkPolicy(salesLine.LineAmount, mcrSalesLine.GiftCardNumber, mcrSalesLine.GiftCardType) && ok;
                }

                // </GEERU>
            }

            //Do not validate the source Id if allow expired source code
            //is set to true and it is an exchange.
            if (mcrSalesLine.SourceId
                && salesTableLocal.SalesType != SalesType::ReturnItem
                && !(mcrOrderParameters.mcrAllowExpiredSourceCode && mcrReturnSalesTable.IsExchange))
            {
                if (!MCRSourceCodeSetup::validateSourceEffective(mcrSalesLine.SourceId))
                {
                    ok = false;
                }
            }

            ok = salesLine.mcrCheckComplete() && ok;

            // Continuity validation
            if (InventTable::mcrIsItemContinuity(salesLine.ItemId))
            {
                if (!RetailMCRChannelTable::mcrEnableOrderCompletion(salesTable))
                {
                    ok = checkFailed("@MCR4410355");
                }

                // Do not allow continuity items on orders of type return, blanket,
                // subscription, or item requirements.
                if (   salesTable.SalesType == SalesType::ReturnItem
                    || salesTable.SalesType == SalesType::Subscription
                    || salesTable.SalesType == SalesType::ItemReq)
                {
                    ok = checkFailed(strFmt("@MCR24281", salesTable.SalesType));
                }
            }
        }

        ok = ok && this.checkShipCarrierAddress();

        ok = ok && this.checkIsInventDimChangeValidNonStocked(salesLine_Orig);

        SalesNonStockedRegistrationHelper salesNonStockedRegistrationHelper = TradeNonStockedRegistrationHelper::newFromSalesPurchLine(salesLine);
        if (salesNonStockedRegistrationHelper.isPendingRegistrationsApplicable(true))
        {
            ok = ok && salesNonStockedRegistrationHelper.validateOrderLineUpdate();
        }

        ok = ok && salesLine.whsCheckInventDimChange(salesLine_Orig);
        
        //<GMX>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            ok = ok && this.checkEInvoiceAdditionalInfo_MX();
        }
        //</GMX>

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            ok = this.checkAgreementDimension_RU() && ok;
            ok = this.checkInventProfile_RU() && ok;
            ok = this.checkInventOwner_RU() && ok;

            if ((!salesLine.isStocked() ||
                 salesLine.isCategoryBased()) &&
                 salesTable.salesTable_RU().InvoicePostingType_RU == SalesInvoicePostingType_RU::GoodsInRoute)
            {
                ok = checkFailed("@GLS220090");
            }

            eGAISAlcoholProduction = EGAISAlcoholProduction_RU::findByItemInventDim(salesLine.ItemId, salesLine.inventDim());

            if (eGAISAlcoholProduction
                && eGAISAlcoholProduction.Unit != salesLine.SalesUnit)
            {
                ok = checkFailed(strFmt("@EGAIS:UnitInTheSalesOrderLineMustMatchTheEgaisUnit", salesLine.SalesUnit, eGAISAlcoholProduction.Unit));
            }
 
        }
        // </GEERU>

        if (ok && salesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries && salesLine.SourcingVendAccount)
        {
            ok = checkFailed("@Intercompany:SourcingVendorMustBeBlankForSalesLinesWithMultipleDeliveries");
        }

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            ok = ok && this.kittingValidateWrite(salesLine);
        }

        ok = ok && this.checkOrderCommittedReservation();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemOrderSetupType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventItemOrderSetupType</c> corresponding to the sales line.
    /// </summary>
    /// <returns>An enum value from <c>InventItemOrderSetupType</c> base enum.</returns>
    public InventItemOrderSetupType inventItemOrderSetupType()
    {
        return InventItemOrderSetupType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsInWorkTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display how much inventory is in work.
    /// </summary>
    /// <returns>
    /// The amount of inventory in the work transaction.
    /// </returns>
    InventQty whsInWorkTotal()
    {
        InventQty   qty;

        if (salesLine.InventTransId)
        {
            qty = WHSInvent::getQtyInWork(salesLine.InventTransId);
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForeignTradeFromInventTable</Name>
				<Source><![CDATA[
    private void initForeignTradeFromInventTable(InventTable _inventTable)
    {
        salesLine.IntrastatCommodity = _inventTable.IntrastatCommodity;
        salesLine.OrigCountryRegionId = _inventTable.OrigCountryRegionId;
        salesLine.OrigStateId = _inventTable.OrigStateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesLineType construct(SalesLine salesLine, SalesTable salesTable = salesLine.salesTable())
    {
        if (salesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            // order lines with multiple deliveries are handled independently of order type
            return SalesLineType_WithMultipleDeliveries::construct(salesLine, salesTable);
        }

        return SalesLineType::constructBasedOnSalesType(salesLine, salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructBasedOnSalesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate a new <c>SalesLineType</c> derived class for the specified sales order.
    /// </summary>
    /// <param name = "_salesLine">Sales order line record.</param>
    /// <param name = "_salesTable">Sales order header record.</param>
    /// <returns>A new instance of a class deriving from <c>SalesLineType</c> class, depending on the sales order type.</returns>
    public static SalesLineType constructBasedOnSalesType(SalesLine _salesLine, SalesTable _salesTable)
    {
        NoYes                               isProject       = _salesLine.ProjId ? NoYes::Yes : NoYes::No;
        SalesLineTypeFactoryAttribute       attribute       = new SalesLineTypeFactoryAttribute(_salesLine.SalesType, isProject);
        SysExtensionGenericInstantiation    instantiation   = new SysExtensionGenericInstantiation(_salesLine, _salesTable);

        SalesLineType instance = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(SalesLineType), attribute, instantiation) as SalesLineType;

        if (!instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posConfirmation</Name>
				<Source><![CDATA[
    static int  posConfirmation()
    {
        return 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posInvoice</Name>
				<Source><![CDATA[
    static int  posInvoice()
    {
        return 5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posInvoice4Paym_RU</Name>
				<Source><![CDATA[
    public static int  posInvoice4Paym_RU()
    {
        #define.posInvoice4Paym(8)

        return #posInvoice4Paym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posPackingSlip</Name>
				<Source><![CDATA[
    static int  posPackingSlip()
    {
        return 4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posPickingList</Name>
				<Source><![CDATA[
    static int  posPickingList()
    {
        return 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posPickingListRegistration</Name>
				<Source><![CDATA[
    static int  posPickingListRegistration()
    {
        return 6;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posProjectPackingSlip</Name>
				<Source><![CDATA[
    static int  posProjectPackingSlip()
    {
        return 7;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posQuotation</Name>
				<Source><![CDATA[
    static int  posQuotation()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncDeliveryAddress</Name>
				<Source><![CDATA[
    static void syncDeliveryAddress(SalesLine   _salesLine,
                                AxPurchLine _axPurchLine,
                                boolean     _directDelivery,
                                boolean     _create = false)
    {
        if (_create
    ||  _salesLine.fieldChanged(fieldNum(SalesLine, DeliveryType)))
        {
            if (_directDelivery)
            {
                _axPurchLine.parmDeliveryPostalAddress(_salesLine.DeliveryPostalAddress);
                _axPurchLine.parmDeliveryName(_salesLine.DeliveryName);
            }
            else
            {
                AxPurchTable axPurchTable = _axPurchLine.axPurchTable();
                _axPurchLine.parmDeliveryPostalAddress(axPurchTable.parmDeliveryPostalAddress());
                _axPurchLine.parmDeliveryName(axPurchTable.parmDeliveryName());
            }
        }
        else
        {
            if (_directDelivery && _salesLine.fieldChanged(fieldNum(SalesLine, DeliveryPostalAddress)))
            {
                _axPurchLine.parmDeliveryPostalAddress(_salesLine.DeliveryPostalAddress);
            }
            if (_directDelivery && _salesLine.fieldChanged(fieldNum(SalesLine, DeliveryName)))
            {
                _axPurchLine.parmDeliveryName(_salesLine.DeliveryName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>userProvidedInventDimFields</Name>
				<Source><![CDATA[
    private Set userProvidedInventDimFields()
    {
        return InventDim::dimFieldList2Set(preDefaultingInventDimParm.selectedDimFields());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromField</Name>
				<Source><![CDATA[
    public void defaultFromField(FieldId _fieldId, boolean _userInput)
    {
        InventQty originalQtyOrdered = salesLine.QtyOrdered;
        SalesQty  originalSalesQty   = salesLine.SalesQty;

        switch (_fieldId)
        {
            case fieldNum(SalesLine, InventDimId):
                InventDim mergedDim = salesLine.inventDim();

                if (preDefaultingInventDim.InventSiteId && mergedDim.InventSiteId != preDefaultingInventDim.InventSiteId && !preDefaultingInventDim.InventLocationId)
                {
                    preDefaultingInventDim.InventStorageDimMap::modifiedInventSiteFromParent(salesLine);
                    preDefaultingInventDimParm.InventLocationIdFlag = NoYes::Yes;
                }
                if (preDefaultingInventDim.InventLocationId && mergedDim.InventLocationId != preDefaultingInventDim.InventLocationId && !preDefaultingInventDim.InventSiteId)
                {
                    preDefaultingInventDim.InventStorageDimMap::modifiedInventLocationFromParent(salesLine);
                    preDefaultingInventDimParm.InventSiteIdFlag = mergedDim.InventSiteId != preDefaultingInventDim.InventSiteId;
                }

                mergedDim.initFromInventDim(preDefaultingInventDim, preDefaultingInventDimParm.selectedDimFields());
                salesLine.modifyInventDimSet(mergedDim, this.userProvidedInventDimFields(), true);
                mergedInventDimId = salesLine.InventDimId;
                break;
            case fieldNum(SalesLine, SalesId):
                salesLine.initFromSalesTable(SalesTable::find(salesLine.SalesId));
                break;
            case fieldNum(SalesLine, ItemId):
                this.initFromInventTable(salesLine.inventTable(), true);
                // For sales line, default dimension will be affected by itemId, so should check if dimension link exist, then update dimension.
                if (preDefaultingInventDim.InventSiteId)
                {
                    preDefaultingInventDim.InventStorageDimMap::modifiedInventSiteFromParent(salesLine);
                }
                break;
        }

        const boolean uiEnabled = false;
        salesLine.modifyField(_fieldId, _userInput, uiEnabled);
        salesLine.modifiedFieldDDC(_fieldId, uiEnabled);

        if (_fieldId == fieldNum(SalesLine, SalesQty) ||
            originalQtyOrdered != salesLine.QtyOrdered ||
            originalSalesQty != salesLine.SalesQty)
        {
            InventMovement::bufferSetRemainQty(salesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultingFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the list of defaulting fields.
    /// </summary>
    /// <returns>Returns a list containing fields of <c>SalesLine</c> table in the order in which they should be defaulted.</returns>
    public List defaultingFields()
    {
        List result = new List(Types::Integer);

        result.addEnd(fieldNum(SalesLine, SalesId));
        result.addEnd(fieldNum(SalesLine, ProjId));
        result.addEnd(fieldNum(SalesLine, ItemId));
        result.addEnd(fieldNum(SalesLine, SalesCategory));
        result.addEnd(fieldNum(SalesLine, InventDimId));
        result.addEnd(fieldNum(SalesLine, DlvMode));
        result.addEnd(fieldNum(SalesLine, DlvTerm));
        result.addEnd(fieldNum(SalesLine, DeliveryPostalAddress));
        result.addEnd(fieldNum(SalesLine, DeliveryDateControlType));
        result.addEnd(fieldNum(SalesLine, ReceiptDateRequested));
        result.addEnd(fieldNum(SalesLine, ShippingDateRequested));
        result.addEnd(fieldNum(SalesLine, ShippingDateConfirmed));
        result.addEnd(fieldNum(SalesLine, ReceiptDateConfirmed));
        result.addEnd(fieldNum(SalesLine, SalesQty));
        result.addEnd(fieldNum(SalesLine, QtyOrdered));
        result.addEnd(fieldNum(SalesLine, SalesUnit));
        result.addEnd(fieldNum(SalesLine, PriceUnit));
        result.addEnd(fieldNum(SalesLine, SalesDeliverNow));
        result.addEnd(fieldNum(SalesLine, SalesPrice));
        result.addEnd(fieldNum(SalesLine, PdsCWInventDeliverNow));
        result.addEnd(fieldNum(SalesLine, LinePercent));
        result.addEnd(fieldNum(SalesLine, LineDisc));
        result.addEnd(fieldNum(SalesLine, MultiLnDisc));
        result.addEnd(fieldNum(SalesLine, MultiLnPercent));
        result.addEnd(fieldNum(SalesLine, LineAmount));
        result.addEnd(fieldNum(SalesLine, PdsCWQty));
        result.addEnd(fieldNum(SalesLine, Reservation));
        result.addEnd(fieldNum(SalesLine, SalesMarkup));
        result.addEnd(fieldNum(SalesLine, InventTransIdReturn));
        result.addEnd(fieldNum(SalesLine, ProjCategoryId));
        result.addEnd(fieldNum(SalesLine, ActivityNumber));
        result.addEnd(fieldNum(SalesLine, PackingUnit));
        result.addEnd(fieldNum(SalesLine, ReturnDispositionCodeId));
        result.addEnd(fieldNum(SalesLine, ReturnAllowReservation));
        result.addEnd(fieldNum(SalesLine, PdsCWExpectedRetQty));
        result.addEnd(fieldNum(SalesLine, ExpectedRetQty));
        result.addEnd(fieldNum(SalesLine, DeliveryType));
        result.addEnd(fieldNum(SalesLine, SourcingVendAccount));
        result.addEnd(fieldNum(SalesLine, SourcingOrigin));
        result.addEnd(fieldNum(SalesLine, SourcingCompanyId));
        result.addEnd(fieldNum(SalesLine, SourcingInventSiteId));
        result.addEnd(fieldNum(SalesLine, SourcingInventLocationId));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaults</Name>
				<Source><![CDATA[
    public void initDefaults()
    {
        preDefaultingInventDim = salesLine.inventDim();
        preDefaultingInventDimParm = preDefaultingInventDim.toDimParm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeChanges</Name>
				<Source><![CDATA[
    public void mergeChanges()
    {
        if (mergedInventDimId)
        {
            salesLine.InventDimId = mergedInventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergableFields</Name>
				<Source><![CDATA[
    public Set mergableFields()
    {
        Set result = new Set(Types::Integer);
        result.add(fieldNum(SalesLine, InventDimId));
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validationFields</Name>
				<Source><![CDATA[
    public Set validationFields()
    {
        Set result = new Set(Types::Integer);
        result.add(fieldNum(SalesLine, SalesQty));
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIndirectTaxFieldChanged_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>SalesLine</c> table buffer on india fields should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <returns>
    /// True if the associated <c>SourceDocumentDistribution</c> records should be updated, otherwise false.
    /// </returns>
    private boolean hasIndirectTaxFieldChanged_IN()
    {
        boolean         indirectTaxChanged = false;

        if (TaxParameters::checkTaxParameters_IN())
        {
            SalesLine_IN salesLine_IN = salesLine.salesLine_IN();
            SalesLine_IN salesLine_Orig_IN = salesLine.orig().salesLine_IN();

            indirectTaxChanged =
                salesLine_IN.AssessableValueTransactionCurrency != salesLine_Orig_IN.AssessableValueTransactionCurrency
                || salesLine_IN.CustomsMaxRetailPrice           != salesLine_Orig_IN.CustomsMaxRetailPrice
                || salesLine_IN.MaximumRetailPrice              != salesLine_Orig_IN.MaximumRetailPrice;
        }
        return indirectTaxChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do extra updates when updating the <C>SalesLine_IN</C>.
    /// </summary>
    public void update_IN()
    {
        //<GTE>
        if (this.hasIndirectTaxFieldChanged_IN() && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            salesLine.markCurrentTaxDocumentTaxStatusDirty();
        }
        //</GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMcrSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize MCRSalesLine from SalesTabe
    /// </summary>
    /// <param name = "_salesTable">
    /// The SalesTable record which MCRSalesLine will initialize from
    /// </param>
    public void initMcrSalesLine(SalesTable _salesTable)
    {
        MCRSalesLine        mcrSalesLine;
        MCRSalesTable       mcrSalesTable;
        MCRExpedite         mcrExpedite;
        boolean             mcrSalesLineFound = false;

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // If a source code does not exist, populate the sales line price fields.
            if (_salesTable.SalesType != SalesType::ReturnItem)
            {
                mcrSalesTable = _salesTable.mcrSalesTable();

                if (mcrSalesTable.SourceId
                        && (MCROrderParameters::find().mcrAllowExpiredSourceCode
                            || !_salesTable.mcrReturnSalesTable().IsExchange
                            || MCRSourceCodeSetup::validateSourceEffective(mcrSalesTable.SourceId)))
                {
                    mcrSalesLine = salesLine.mcrSalesLine();
                    mcrSalesLineFound = true;
                    if (mcrSalesTable.SourceId != mcrSalesLine.SourceId)
                    {
                        mcrSalesLine.SourceId         = mcrSalesTable.SourceId;
                        salesLine.mcrPackMCRSalesLine(mcrSalesLine);
                    }
                }
            }
            mcrExpedite = _salesTable.mcrSalesTableShipping().Expedite;
            if (mcrExpedite)
            {
                if (!mcrSalesLineFound)
                {
                    mcrSalesLine = salesLine.mcrSalesLine();
                }
                mcrSalesLine.Expedite = mcrExpedite;
                salesLine.mcrPackMCRSalesLine(mcrSalesLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseList</Name>
				<Source><![CDATA[
    private List reverseList(List _list)
    {
        List result = new List(Types::Integer);
        Enumerator enum = _list.getEnumerator();

        while (enum.moveNext())
        {
            result.addStart(enum.current());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPriceDiscTriggeringFieldWithLargestIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the price/discount triggering field that has the largest index in the defaulting fields list.
    /// </summary>
    /// <param name = "_inputFieldsSet">Set containing the fields input by the user during an import.</param>
    /// <returns>The price/discount triggering field that has the largest index in the defaulting fields list</returns>
    /// <remarks>
    /// This method uses 2 sets (_inputFieldsSet and setPriceDiscCalcTriggeringFields) and a list (defaultingFields) to
    /// figure out the best field on <c>SalesLine</c> that SalesLine::setPriceDisc should be called. Because,
    /// we want to guarantee that price/discount calculation always happens at least once, a fallback to ItemId is added.
    /// </remarks>
    public FieldId findPriceDiscTriggeringFieldWithLargestIndex(Set _inputFieldsSet)
    {
        // Get the set of fields that trigger price/discount calculation on the SalesLine table.
        Set setPriceDiscCalcTriggeringFields = SalesLineTypeHelper::instance().getPriceCalcTriggeringFieldsSet();

        // Find the fields that are in the triggering field set that are also in the input field set
        // in order to know if it is necessary to traverse the full list of defaulting fields.
        Set commonPriceDiscCalcTriggeringFields = Set::intersection(_inputFieldsSet, setPriceDiscCalcTriggeringFields);
        if (!commonPriceDiscCalcTriggeringFields.empty())
        {
            // Use the reverse list of defaulting fields to guarantee that we get the last price/discount calculation triggering field to be defaulted.
            List reversedDefaultingFields = this.reverseList(this.defaultingFields());
            Enumerator reversedDefaultingFieldsEnumerator = reversedDefaultingFields.getEnumerator();

            while (reversedDefaultingFieldsEnumerator.moveNext())
            {
                FieldId currentFieldId = reversedDefaultingFieldsEnumerator.current();
                if (commonPriceDiscCalcTriggeringFields.in(currentFieldId))
                {
                    return currentFieldId;
                }
            }
        }

        return fieldNum(SalesLine, ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimForSaleslBasketLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventDim</c> object.
    /// </summary>
    /// <param name = "_salesBasketLine">
    /// A <c>SalesBasketLine</c> buffer record.
    /// </param>
    /// <returns>
    /// The <c>InventDim</c> instance.
    /// </returns>
    [Replaceable]
    protected InventDim initInventDimForSaleslBasketLine(SalesBasketLine _salesBasketLine)
    {
        InventDim inventDim = _salesBasketLine.inventDim();

        inventDim.InventSiteId        = _salesBasketLine.inventTable().inventInventSiteId(inventDim.InventSiteId);
        inventDim.InventLocationId    = _salesBasketLine.inventTable().inventLocationId(inventDim.InventLocationId, inventDim.InventDimId);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReturnLotIdCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates salesline cost price.
    /// </summary>
    /// <param name = "_salesLine">
    /// A <c>SalesLine</c> record buffer.
    /// </param>
    /// <returns>
    /// true if validation succeesd; otherwise, false.
    /// </returns>
    protected boolean validateReturnLotIdCostPrice(SalesLine _salesLine)
    {
        if (this.creditNoteLine() || this.returnItem())
        {
            if (FormDataUtil::isFormDataSource(_salesLine))
            {
                if (_salesLine.isStocked() && !_salesLine.InventTransIdReturn && !_salesLine.CostPrice)
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a sales line can be canceled.
    /// </summary>
    /// <param name = "_invoicedInTotal">
    /// A <c>SalesQty</c> value.
    /// </param>
    /// <param name = "_salesLine">
    /// A <c>SalesLine</c> record buffer
    /// </param>
    /// <returns>
    /// true if salesline can be canceled; otherwise, false.
    /// </returns>
    protected boolean canBeCanceled(SalesQty _invoicedInTotal, SalesLine _salesLine)
    {
        return (_invoicedInTotal == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimForInitStorageDimensionsFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventDim</c>.
    /// </summary>
    /// <param name = "_salesTable">
    /// Parameters used to initialize the <c>SalesTable</c> instance with.
    /// </param>
    /// <returns>
    /// The <c>InventDim</c> instance.
    /// </returns>
    protected InventDim initInventDimForInitStorageDimensionsFromSalesTable(SalesTable _salesTable)
    {
        InventDim inventdim = salesLine.inventDim();

        if (_salesTable.InventLocationId && !inventDim.InventLocationId)
        {
            inventDim.InventLocationId     = _salesTable.InventLocationId;
        }

        if (_salesTable.InventSiteId && !inventDim.InventSiteId)
        {
            inventDim.InventSiteId         = _salesTable.InventSiteId;
        }

        return inventdim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSalesReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the default reservation.
    /// </summary>
    /// <param name = "_mcrItemReservation">
    /// A <c>MCRItemReservation</c> instance.
    /// </param>
    /// <param name = "_salesReservation">
    /// An <c>ItemReservation</c> instance.
    /// </param>
    /// <returns>
    /// The resulted <c>ItemReservation</c> instance.
    /// </returns>
    protected ItemReservation retrieveSalesReservation(MCRItemReservation _mcrItemReservation, ItemReservation _salesReservation)
    {
        return InventModelGroup::mcrDefaultReservation(_mcrItemReservation, _salesReservation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLineQuantitiesFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates the quantities and inventory dimension of the <c>SalesLine</c> record from a <c>CustInvoiceTrans</c> record.
    /// </summary>
    /// <param name = "_custInvoiceTrans">
    /// A <c>CustInvoiceTrans</c> record buffer
    /// </param>
    /// <param name = "_qty">
    /// Quantity for <c>SalesLine</c>
    /// </param>
    /// <param name = "_pdsCWQty">
    /// PdsCWInventQty for <c>SalesLine</c>
    /// </param>
    protected void initializeSalesLineQuantitiesFromCustInvoiceTrans(CustInvoiceTrans _custInvoiceTrans, Qty _qty, PdsCWInventQty _pdsCWQty)
    {
        salesLine.setInventDimId(_custInvoiceTrans.InventDimId);
        salesLine.SalesUnit          = _custInvoiceTrans.SalesUnit;
        salesLine.SalesQty           = decRound(_qty, UnitOfMeasure::unitOfMeasureDecimalPrecision(
                                           UnitOfMeasure::unitOfMeasureIdBySymbol(salesLine.SalesUnit)));

        salesLine.QtyOrdered         = _custInvoiceTrans.Qty == _qty ?  -_custInvoiceTrans.inventQty() : salesLine.calcQtyOrdered();

        if (#PdsCatchWeightEnabled)
        {
            salesLine.PdsCWQty = _pdsCWQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesLineQtyForInitFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates the quantities and inventory dimension of the <c>SalesLine</c> record from another <c>SalesLine</c> record.
    /// </summary>
    /// <param name = "_salesLine">
    /// A Salesline for copyed
    /// </param>
    /// <param name = "_qty">
    /// Quantity for <c>SalesLine</c>
    /// </param>
    /// <param name = "_pdsCWQty">
    /// PdsCWInventQty for <c>SalesLine</c>
    /// </param>
    protected void initSalesLineQtyForInitFromSalesLine(SalesLine _salesLine, Qty _qty, PdsCWInventQty _pdsCWQty)
    {
        salesLine.setInventDimId(_salesLine.InventDimId);
        salesLine.SalesQty           = _qty;
        salesLine.SalesUnit          = _salesLine.SalesUnit;
        salesLine.QtyOrdered         = _salesLine.SalesQty == _qty ? _salesLine.QtyOrdered : salesLine.calcQtyOrdered();

        if (#PdsCatchWeightEnabled)
        {
            salesLine.PdsCWQty       = _pdsCWQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductNotStopped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the product on the associated sales order line is not stopped for the specific order setup type.
    /// </summary>
    /// <returns>true if the product is not stopped or if the product doesn't have product dimensions fully specified; otherwise, false.</returns>
    protected boolean checkProductNotStopped()
    {
        boolean ret = true;

        if (SalesLineCreationPolicy::newFromSalesOrderCreationMethod(salesLine.SalesSalesOrderCreationMethod).mustCheckProductNotStopped())
        {
            ret = InventDistinctProductValidator::checkProductNotStopped(salesLine.ItemId, this.inventItemOrderSetupType(), salesLine.inventDim(), false);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrderCommittedReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs order committed reservation specific checks.
    /// </summary>
    /// <returns>True, if the check succeeded; otherwise, false.</returns>
    private boolean checkOrderCommittedReservation()
    {
        boolean   ret = true;

        if (salesLine.RecId)
        {
            SalesLine salesLineOrig = salesLine.orig();

            ret = this.validateModifyInventDimOrderCommittedReservation(salesLineOrig, salesLine.InventDimId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>schBackwardSyncDates</Name>
				<Source><![CDATA[
    private DlvDate schBackwardSyncDates(PurchLine _purchLine, SalesLine _salesLine, LeadTime _leadTime)
    {
        DlvDate schedDate = _salesLine.ShippingDateConfirmed ? _salesLine.ShippingDateConfirmed : _salesLine.ShippingDateRequested;
        VendTable vendTable = _purchLine.vendTable_OrderAccount();
        var workCalendarSched = new WorkCalendarSched();
        CalendarId receiptCalendarId;

        if (vendTable.interCompanyTradingRelationActive())
        {
            CustTable icCustTable = vendTable.interCompanyTradingPartnerCustomer().custTable();
            LogisticsLocationRecId deliveryLocation = _purchLine.deliveryLocation();
            changecompany (icCustTable.DataAreaId)
            {
                receiptCalendarId = LogisticsLocationExt::find(deliveryLocation).SalesCalendarId;
                receiptCalendarId = receiptCalendarId ? receiptCalendarId : icCustTable.SalesCalendarId;

                if (receiptCalendarId)
                {
                    schedDate =  workCalendarSched.schedDate(SchedDirection::Backward,
                                                          schedDate,
                                                          _leadTime,
                                                          true,
                                                          receiptCalendarId);
                }
            }
        }
        else
        {
            receiptCalendarId = vendTable.PurchCalendarId;

            if (!receiptCalendarId)
            {
                ReqGroupId reqGroupId = InventTable::find(_purchLine.ItemId).ReqGroupId;
                receiptCalendarId = ReqGroup::find(reqGroupId).CalendarId;
            }

            if (!receiptCalendarId)
            {
                InventLocation receiptInventLocation = InventLocation::find(InventDim::find(_purchLine.InventDimId).InventLocationId);
                receiptCalendarId = receiptInventLocation.ReqCalendarId;
            }

            if (receiptCalendarId)
            {
                schedDate =  workCalendarSched.schedDate(SchedDirection::Backward,
                                                          schedDate,
                                                          _leadTime,
                                                          true,
                                                          receiptCalendarId);
            }
        }

        return schedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetPriceDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether price and discount must be set.
    /// </summary>
    /// <returns>
    /// true if price and discount must be set; otherwise, false.
    /// </returns>
    protected boolean mustSetPriceDisc()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingCanPickingListBeRegistrated_delegate</Name>
				<Source><![CDATA[
    delegate void kittingCanPickingListBeRegistrated_delegate(salesLine _salesLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingCanPickingListBeRegistrated</Name>
				<Source><![CDATA[
    protected boolean kittingCanPickingListBeRegistrated(salesLine _salesLine, boolean _default)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingCanPickingListBeRegistrated_delegate(_salesLine, resultValue);
        return resultValue.hasResult() ? resultValue.booleanResult() : _default;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingValidateDelete_delegate</Name>
				<Source><![CDATA[
    delegate void kittingValidateDelete_delegate(salesLine _salesLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingValidateDelete</Name>
				<Source><![CDATA[
    protected boolean kittingValidateDelete(salesLine _salesLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingValidateDelete_delegate(_salesLine, resultValue);
        return !resultValue.hasResult() || resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingValidateWrite_delegate</Name>
				<Source><![CDATA[
    delegate void kittingValidateWrite_delegate(salesLine _salesLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingValidateWrite</Name>
				<Source><![CDATA[
    protected boolean kittingValidateWrite(salesLine _salesLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingValidateWrite_delegate(_salesLine, resultValue);
        return !resultValue.hasResult() || resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPurchQtyRefTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total quantity of the reference lines
    /// </summary>
    /// <param name = "_salesLine">The sales line record</param>
    /// <param name = "_purchUnit">The purchase unit of measure</param>
    /// <returns>The total quantity</returns>
    internal protected PurchOrderedQty calcPurchQtyRefTotal(SalesLine  _salesLine, PurchUnit   _purchUnit)
    {
        SalesLine       salesLineLocal;
        PurchOrderedQty purchQtyTotal;

        while select ItemId, InventDimId, SalesQty, SalesUnit from salesLineLocal
            where salesLineLocal.InventRefId      == _salesLine.InventRefId
               && salesLineLocal.InventRefType    == _salesLine.InventRefType
               && salesLineLocal.InventRefTransId == _salesLine.InventRefTransId
               && salesLineLocal.RecId            != _salesLine.RecId
        {
            purchQtyTotal += EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLineLocal.ItemId,
                                                                                                   salesLineLocal.InventDimId,
                                                                                                   salesLineLocal.SalesQty,
                                                                                                   salesLineLocal.SalesUnit,
                                                                                                   _purchUnit,
                                                                                                   NoYes::Yes);
        }
        return purchQtyTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the purchase quantity value
    /// </summary>
    /// <param name = "_salesLine">The sales line record</param>
    /// <param name = "_purchQuantity">The purchase quantity value</param>
    /// <param name = "_updatingSalesQty">The sales quantity for updating</param>
    /// <param name = "_purchUnit">The unit of measure</param>
    /// <returns>The purchase quantity value</returns>
    internal protected PurchOrderedQty getPurchQuantity(SalesLine  _salesLine,
        PurchOrderedQty _purchQuantity,
        SalesQty        _updatingSalesQty,
        PurchUnit       _purchUnit)
    {
        PurchOrderedQty purchQuantity;

        if (_salesLine.isInterCompanyOrder())
        {
            purchQuantity = _purchQuantity
                        + EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
                                                                                                _salesLine.InventDimId,
                                                                                                _updatingSalesQty,
                                                                                                _salesLine.SalesUnit,
                                                                                                _purchUnit,
                                                                                                NoYes::Yes);
        }
        else
        {
            purchQuantity = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
                                                                                                  _salesLine.InventDimId,
                                                                                                  _salesLine.SalesQty,
                                                                                                  _salesLine.SalesUnit,
                                                                                                  _purchUnit,
                                                                                                  NoYes::Yes);
            // Add the total amount of the reference lines
            if (_salesLine.InventRefId)
            {
                purchQuantity += this.calcPurchQtyRefTotal(_salesLine, _purchUnit);
            }
        }

        return purchQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDeletePendingRegistrationsNonStocked</Name>
				<Source><![CDATA[
    protected boolean skipDeletePendingRegistrationsNonStocked()
    {
        if (salesLine.isStocked() && SalesTable::disableCreationOfSDAFImplementationDataForSalesOrders())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>TaxUncommitted</c> records for the line or for the entire document.
    /// </summary>
    internal void deleteTaxUncommitted()
    {
        if (TaxIntegrationCacheCalculationResultFlight::instance().isEnabled()
            && Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            TaxUncommitted::deleteForDocumentHeader(salesTable.TableId, salesTable.RecId, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal SalesInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = SalesInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>