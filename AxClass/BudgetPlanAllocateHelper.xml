<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocateHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>BudgetPlanAllocateHelper</c> class provides helper methods to use to allocate budget plan data.
/// </summary>
public class BudgetPlanAllocateHelper
{
    Set                      selectedPlanLines;
    BudgetPlanAllocateType   allocationMethod;
    LegalEntityRecId         legalEntityRecId;
    BudgetPlanHeaderRecId    parentBudgetPlanHeaderRecId;
    BudgetPlanHeaderRecId    sourceBudgetPlanHeaderRecId;
    BudgetAllocationTermId   budgetAllocationTermId;
    BudgetPlanScenarioRecId  targetBudgetPlanScenarioRecId;
    BudgetPlanScenarioRecId  sourceBudgetPlanScenarioRecId;
    Factor                   factor;
    LedgerAllocateKeyId      ledgerAllocateKeyId;
    LedgerAllocationRuleID   ledgerAllocationRuleID;
    BudgetPlanScenarioRecId  basisBudgetPlanScenarioRecId;
    boolean                  useSourceEffectiveDateForAllocation;
    boolean                  isCalledFromForm;
    BudgetPlanLayoutRecId    currentLayoutRecId;
    boolean                  appendLines;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBudgetPlanAllocateRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets an instance of the <c>BudgetPlanAllocateRequest</c> class.
    /// </summary>
    /// <returns>
    ///   An instance of the <c>BudgetPlanAllocateRequest</c> class.
    /// </returns>
    public BudgetPlanAllocateRequest getBudgetPlanAllocateRequest()
    {
        BudgetPlanAllocateRequest budgetPlanAllocateRequest;
        BudgetAllocationTerm      budgetAllocationTerm;

        switch (allocationMethod)
        {
            case BudgetPlanAllocateType::AllocateByPeriod:
                budgetPlanAllocateRequest = BudgetPlanAllocateRequest::newForAllocateByPeriod(
                    legalEntityRecId,
                    selectedPlanLines,
                    targetBudgetPlanScenarioRecId,
                    factor,
                    ledgerAllocateKeyId,
                    appendLines);

                break;

            case BudgetPlanAllocateType::AllocateByDimension:
                changecompany(CompanyInfo::getDataArea(legalEntityRecId))
                {
                    // Change company to process the budget allocation term select.
                    budgetAllocationTerm = BudgetAllocationTerm::findByTermId(budgetAllocationTermId);

                    budgetPlanAllocateRequest = BudgetPlanAllocateRequest::newForAllocateByDimension(
                        legalEntityRecId,
                        selectedPlanLines,
                        targetBudgetPlanScenarioRecId,
                        factor,
                        budgetAllocationTerm.RecId,
                        appendLines);
                }

                break;

            case BudgetPlanAllocateType::AllocateByChildren:
                budgetPlanAllocateRequest = BudgetPlanAllocateRequest::newForAllocateByChildren(
                    legalEntityRecId,
                    parentBudgetPlanHeaderRecId,
                    sourceBudgetPlanScenarioRecId,
                    targetBudgetPlanScenarioRecId,
                    factor,
                    appendLines);

                break;

            case BudgetPlanAllocateType::AllocateByParent:
                budgetPlanAllocateRequest = BudgetPlanAllocateRequest::newForAllocateByParent(
                    legalEntityRecId,
                    parentBudgetPlanHeaderRecId,
                    sourceBudgetPlanScenarioRecId,
                    targetBudgetPlanScenarioRecId,
                    factor,
                    appendLines);

                break;

            case BudgetPlanAllocateType::AllocateByLedgerRule:
                budgetPlanAllocateRequest = BudgetPlanAllocateRequest::newForAllocateByLedgerAllocationRule(
                    legalEntityRecId,
                    parentBudgetPlanHeaderRecId,
                    sourceBudgetPlanScenarioRecId,
                    basisBudgetPlanScenarioRecId,
                    targetBudgetPlanScenarioRecId,
                    factor,
                    ledgerAllocationRuleID,
                    useSourceEffectiveDateForAllocation,
                    appendLines);

                break;

            case BudgetPlanAllocateType::AllocateByAncestor:
                budgetPlanAllocateRequest = BudgetPlanAllocateRequest::newForAllocateFromBudgetPlan(
                                                legalEntityRecId,
                                                parentBudgetPlanHeaderRecId,
                                                0,
                                                sourceBudgetPlanScenarioRecId,
                                                targetBudgetPlanScenarioRecId,
                                                factor,
                                                true,
                                                sourceBudgetPlanHeaderRecId,
                                                appendLines);
                break;
        }

        budgetPlanAllocateRequest.parmIsCalledFromForm(this.parmIsCalledFromForm());
        budgetPlanAllocateRequest.parmCurrentLayoutRecId(this.currentLayoutRecId);

        return budgetPlanAllocateRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateByAllocationSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates the budget plan by using the specified allocation schedule.
    /// </summary>
    /// <param name="_legalEntityRecId">
    ///    The legal entity record ID to process the records under.
    /// </param>
    /// <param name="_budgetPlanHeaderRecId">
    ///    The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <param name="_budgetPlanningAllocationSchedule">
    ///    The <c>BudgetPlanningAllocationSchedule</c> record.
    /// </param>
    /// <exception cref="Exception::Error">
    ///    An exception is thrown when any of the specified parameters are not set.
    /// </exception>
    private static void allocateByAllocationSchedule(
        LegalEntityRecId                    _legalEntityRecId,
        BudgetPlanHeaderRecId               _budgetPlanHeaderRecId,
        BudgetPlanningAllocationSchedule    _budgetPlanningAllocationSchedule)
    {
        BudgetPlanAllocateRequest budgetPlanAllocateRequest;
        Set                       selectedPlanLines;

        if (!_legalEntityRecId
            || !_budgetPlanHeaderRecId
            || !_budgetPlanningAllocationSchedule)
        {
            throw error(Error::missingParameter(null));
        }

        switch (_budgetPlanningAllocationSchedule.AllocationMethod)
        {
            case BudgetPlanAllocateType::AllocateByPeriod:
                selectedPlanLines = BudgetPlanAllocateHelper::getBudgetPlanLines(
                    _budgetPlanHeaderRecId,
                    _budgetPlanningAllocationSchedule.SourcePlanScenario);

                budgetPlanAllocateRequest = BudgetPlanAllocateRequest::newForAllocateByPeriod(
                    _legalEntityRecId,
                    selectedPlanLines,
                    _budgetPlanningAllocationSchedule.DestinationPlanScenario,
                    _budgetPlanningAllocationSchedule.Factor,
                    _budgetPlanningAllocationSchedule.LedgerAllocationKey,
                    _budgetPlanningAllocationSchedule.AppendLines);

                break;

            case BudgetPlanAllocateType::AllocateByDimension:
                selectedPlanLines = BudgetPlanAllocateHelper::getBudgetPlanLines(
                    _budgetPlanHeaderRecId,
                    _budgetPlanningAllocationSchedule.SourcePlanScenario);

                budgetPlanAllocateRequest = BudgetPlanAllocateRequest::newForAllocateByDimension(
                    _legalEntityRecId,
                    selectedPlanLines,
                    _budgetPlanningAllocationSchedule.DestinationPlanScenario,
                    _budgetPlanningAllocationSchedule.Factor,
                    _budgetPlanningAllocationSchedule.AllocationTerm,
                    _budgetPlanningAllocationSchedule.AppendLines);

                break;

            case BudgetPlanAllocateType::AllocateByChildren:
                budgetPlanAllocateRequest = BudgetPlanAllocateRequest::newForAllocateByChildren(
                    _legalEntityRecId,
                    _budgetPlanHeaderRecId,
                    _budgetPlanningAllocationSchedule.SourcePlanScenario,
                    _budgetPlanningAllocationSchedule.DestinationPlanScenario,
                    _budgetPlanningAllocationSchedule.Factor,
                    _budgetPlanningAllocationSchedule.AppendLines);

                break;

            case BudgetPlanAllocateType::AllocateByParent:
                budgetPlanAllocateRequest = BudgetPlanAllocateRequest::newForAllocateByParent(
                    _legalEntityRecId,
                    _budgetPlanHeaderRecId,
                    _budgetPlanningAllocationSchedule.SourcePlanScenario,
                    _budgetPlanningAllocationSchedule.DestinationPlanScenario,
                    _budgetPlanningAllocationSchedule.Factor,
                    _budgetPlanningAllocationSchedule.AppendLines);

                break;

            case BudgetPlanAllocateType::AllocateByLedgerRule:
                budgetPlanAllocateRequest = BudgetPlanAllocateRequest::newForAllocateByLedgerAllocationRule(
                    _legalEntityRecId,
                    _budgetPlanHeaderRecId,
                    _budgetPlanningAllocationSchedule.SourcePlanScenario,
                    _budgetPlanningAllocationSchedule.BasisPlanScenario,
                    _budgetPlanningAllocationSchedule.DestinationPlanScenario,
                    _budgetPlanningAllocationSchedule.Factor,
                    _budgetPlanningAllocationSchedule.LedgerAllocationRule,
                    _budgetPlanningAllocationSchedule.UseSourceEffectiveDate,
                    _budgetPlanningAllocationSchedule.AppendLines);

                break;

            case BudgetPlanAllocateType::AllocateByAncestor:
                budgetPlanAllocateRequest = BudgetPlanAllocateRequest::newForAllocateFromBudgetPlan(
                    _legalEntityRecId,
                    _budgetPlanHeaderRecId,
                    _budgetPlanningAllocationSchedule.AncestorLevel,
                    _budgetPlanningAllocationSchedule.SourcePlanScenario,
                    _budgetPlanningAllocationSchedule.DestinationPlanScenario,
                    _budgetPlanningAllocationSchedule.Factor,
                    false,
                    0,
                    _budgetPlanningAllocationSchedule.AppendLines);

                break;
        }

        BudgetPlanAllocate::allocateLines(budgetPlanAllocateRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateByStageAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates the budget plan by using the current workflow stage allocation schedule.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    ///    The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <exception cref="Exception::Error">
    ///    The specified budget plan was null.
    /// </exception>
    public static void allocateByStageAllocation(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanningWorkflowStageRecId budgetPlanningWorkflowStageRecId;
        BudgetPlanningStageAllocation    budgetPlanningStageAllocation;
        BudgetPlanningAllocationSchedule budgetPlanningAllocationSchedule;
        BudgetPlanningProcess            budgetPlanningProcess;
        LegalEntity                      legalEntityRecId;

        if (!_budgetPlanHeaderRecId)
        {
            throw error(Error::missingParameter(null));
        }

        budgetPlanningWorkflowStageRecId = BudgetPlanningWorkflowSetup::getCurrentBudgetPlanningWorkflowStage(_budgetPlanHeaderRecId);
        budgetPlanningProcess            = BudgetPlanningProcess::find(BudgetPlanHeader::find(_budgetPlanHeaderRecId).BudgetPlanningProcess);
        legalEntityRecId                 = Ledger::primaryForLegalEntity(budgetPlanningProcess.Ledger);

        while select budgetPlanningAllocationSchedule
            order by budgetPlanningStageAllocation.Ordinal
            where budgetPlanningAllocationSchedule.Ledger == budgetPlanningProcess.Ledger
            join Ordinal from budgetPlanningStageAllocation
                where budgetPlanningStageAllocation.BudgetPlanningWorkflowStage       == budgetPlanningWorkflowStageRecId
                    && budgetPlanningStageAllocation.BudgetPlanningAllocationSchedule == budgetPlanningAllocationSchedule.RecId
        {
            BudgetPlanAllocateHelper::allocateByAllocationSchedule(
                legalEntityRecId,
                _budgetPlanHeaderRecId,
                budgetPlanningAllocationSchedule);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAppendLines</Name>
				<Source><![CDATA[
    public boolean parmAppendLines(boolean _appendLines = appendLines)
    {
        appendLines = _appendLines;
        return appendLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseSourceEffectiveDateForAllocation</Name>
				<Source><![CDATA[
    public boolean parmUseSourceEffectiveDateForAllocation(boolean _useSourceEffectiveDateForAllocation = useSourceEffectiveDateForAllocation)
    {
        useSourceEffectiveDateForAllocation = _useSourceEffectiveDateForAllocation;

        return useSourceEffectiveDateForAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBasisBudgetPlanScenarioRecId</Name>
				<Source><![CDATA[
    public BudgetPlanScenarioRecId parmBasisBudgetPlanScenarioRecId(BudgetPlanScenarioRecId _basisBudgetPlanScenarioRecId = basisBudgetPlanScenarioRecId)
    {
        basisBudgetPlanScenarioRecId = _basisBudgetPlanScenarioRecId;

        return basisBudgetPlanScenarioRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetAllocationTermId</Name>
				<Source><![CDATA[
    public BudgetAllocationTermId parmBudgetAllocationTermId(BudgetAllocationTermId _budgetAllocationTermId = budgetAllocationTermId)
    {
        budgetAllocationTermId = _budgetAllocationTermId;

        return budgetAllocationTermId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanAllocateType</Name>
				<Source><![CDATA[
    public BudgetPlanAllocateType parmBudgetPlanAllocateType(BudgetPlanAllocateType _allocationMethod = allocationMethod)
    {
        allocationMethod = _allocationMethod;

        return allocationMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactor</Name>
				<Source><![CDATA[
    public Factor parmFactor(Factor _factor = factor)
    {
        factor = _factor;

        return factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerAllocateKeyId</Name>
				<Source><![CDATA[
    public LedgerAllocateKeyId parmLedgerAllocateKeyId(LedgerAllocateKeyId _ledgerAllocateKeyId = ledgerAllocateKeyId)
    {
        ledgerAllocateKeyId = _ledgerAllocateKeyId;

        return ledgerAllocateKeyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerAllocationRuleID</Name>
				<Source><![CDATA[
    public LedgerAllocationRuleID parmLedgerAllocationRuleID(LedgerAllocationRuleID _ledgerAllocationRuleID = ledgerAllocationRuleID)
    {
        ledgerAllocationRuleID = _ledgerAllocationRuleID;

        return ledgerAllocationRuleID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntityRecId</Name>
				<Source><![CDATA[
    public LegalEntityRecId parmLegalEntityRecId(LegalEntityRecId _legalEntityRecId = legalEntityRecId)
    {
        legalEntityRecId = _legalEntityRecId;

        return legalEntityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentBudgetPlanHeaderRecId</Name>
				<Source><![CDATA[
    public BudgetPlanHeaderRecId parmParentBudgetPlanHeaderRecId(BudgetPlanHeaderRecId _parentBudgetPlanHeaderRecId = parentBudgetPlanHeaderRecId)
    {
        parentBudgetPlanHeaderRecId = _parentBudgetPlanHeaderRecId;

        return parentBudgetPlanHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceBudgetPlanHeaderRecId</Name>
				<Source><![CDATA[
    public BudgetPlanHeaderRecId parmSourceBudgetPlanHeaderRecId(BudgetPlanHeaderRecId _sourceBudgetPlanHeaderRecId = sourceBudgetPlanHeaderRecId)
    {
        sourceBudgetPlanHeaderRecId = _sourceBudgetPlanHeaderRecId;

        return sourceBudgetPlanHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedPlanLines</Name>
				<Source><![CDATA[
    public Set parmSelectedPlanLines(Set _selectedPlanLines = selectedPlanLines)
    {
        selectedPlanLines = _selectedPlanLines;

        return selectedPlanLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceBudgetPlanScenarioRecId</Name>
				<Source><![CDATA[
    public BudgetPlanScenarioRecId parmSourceBudgetPlanScenarioRecId(BudgetPlanScenarioRecId _sourceBudgetPlanScenarioRecId = sourceBudgetPlanScenarioRecId)
    {
        sourceBudgetPlanScenarioRecId = _sourceBudgetPlanScenarioRecId;

        return sourceBudgetPlanScenarioRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetBudgetPlanScenarioRecId</Name>
				<Source><![CDATA[
    public BudgetPlanScenarioRecId parmTargetBudgetPlanScenarioRecId(BudgetPlanScenarioRecId _targetBudgetPlanScenarioRecId = targetBudgetPlanScenarioRecId)
    {
        targetBudgetPlanScenarioRecId = _targetBudgetPlanScenarioRecId;

        return targetBudgetPlanScenarioRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCalledFromForm</Name>
				<Source><![CDATA[
    public boolean parmIsCalledFromForm(boolean _isCalledFromForm = isCalledFromForm)
    {
        isCalledFromForm = _isCalledFromForm;

        return isCalledFromForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentLayoutRecId</Name>
				<Source><![CDATA[
    public BudgetPlanLayoutRecId parmCurrentLayoutRecId(BudgetPlanLayoutRecId _currentLayoutRecId = currentLayoutRecId)
    {
        currentLayoutRecId = _currentLayoutRecId;

        return currentLayoutRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContract</Name>
				<Source><![CDATA[
    public static BudgetPlanAllocateHelper newFromContract(BudgetPlanAllocateContract _allocateContract)
    {
        BudgetPlanAllocateHelper allocateHelper = BudgetPlanAllocateHelper::construct();

        allocateHelper.parmIsCalledFromForm(true);
        allocateHelper.parmAppendLines(_allocateContract.parmAppendLines());
        allocateHelper.parmBudgetPlanAllocateType(_allocateContract.parmAllocationMethod());
        allocateHelper.parmFactor(_allocateContract.parmFactor());
        allocateHelper.parmTargetBudgetPlanScenarioRecId(_allocateContract.parmTargetBudgetPlanScenarioRecId());
        allocateHelper.parmSourceBudgetPlanScenarioRecId(_allocateContract.parmSourceBudgetPlanScenarioRecId());
        allocateHelper.parmSelectedPlanLines(Set::create(_allocateContract.parmSelectedPlanLines()));
        allocateHelper.parmLegalEntityRecId(_allocateContract.parmLegalEntityRecId());
        allocateHelper.parmParentBudgetPlanHeaderRecId(_allocateContract.parmParentBudgetPlanHeaderRecId());
        allocateHelper.parmBudgetAllocationTermId(_allocateContract.parmBudgetAllocationTermId());
        allocateHelper.parmLedgerAllocateKeyId(_allocateContract.parmLedgerAllocateKeyId());
        allocateHelper.parmLedgerAllocationRuleID(_allocateContract.parmLedgerAllocationRuleID());
        allocateHelper.parmBasisBudgetPlanScenarioRecId(_allocateContract.parmBasisBudgetPlanScenarioRecId());
        allocateHelper.parmUseSourceEffectiveDateForAllocation(_allocateContract.parmUseSourceEffectiveDateForAllocation());
        allocateHelper.parmCurrentLayoutRecId(_allocateContract.parmCurrentLayoutRecId());
        allocateHelper.parmSourceBudgetPlanHeaderRecId(_allocateContract.parmSourceBudgetPlanHeaderRecId());

        return allocateHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanAllocateHelper construct()
    {
        return new BudgetPlanAllocateHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the budget plan lines for the specified budget plan header and budget plan scenario.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    ///    The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <param name="_budgetPlanScenarioRecId">
    ///    The record ID of the <c>BudgetPlanScenario</c> record.
    /// </param>
    /// <returns>
    ///    A <c>Set</c> of <c>BudgetPlanLine</c> record IDs.
    /// </returns>
    private static Set getBudgetPlanLines(
        BudgetPlanHeaderRecId   _budgetPlanHeaderRecId,
        BudgetPlanScenarioRecId _budgetPlanScenarioRecId)
    {
        Set             budgetPlanLines = new Set(typeName2Type(extendedTypeStr(BudgetPlanLineRecId)));
        BudgetPlanLine  budgetPlanLine;

        if (_budgetPlanHeaderRecId && _budgetPlanScenarioRecId)
        {
            while select RecId from budgetPlanLine
                where budgetPlanLine.BudgetPlanHeader == _budgetPlanHeaderRecId
                    && budgetPlanLine.BudgetPlanScenario == _budgetPlanScenarioRecId
            {
                budgetPlanLines.add(budgetPlanLine.RecId);
            }
        }

        return budgetPlanLines;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>