<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimUniquenessEnabling</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>InventDimUniquenessEnabling</c> class is used to validate and update records in the <c>InventDim</c> table so they can be uniquely identified.
/// </summary>
/// <remarks>
///     If any new inventory dimension fields are added to the <c>InventDim</c> table, they must be included when creating the hash value for the <c>SHA1HashHex</c> field.
/// </remarks>
class InventDimUniquenessEnabling extends RunBaseBatch implements BatchRetryable
{
    NoYes           updateInventDim;        // Should InventDim be updated or is it just metadata validation
    DialogField     fieldUpdateInventDim;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        updateInventDim
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the AOT.
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.addText("@GLS180541");
        fieldUpdateInventDim = dialog.addFieldValue(extendedTypeStr(NoYesId), updateInventDim, "@GLS180543");
        dialog.addText("@GLS180544");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Load the input parameters from dialog.
    /// </summary>
    /// <returns>
    ///     A boolean value that indicates the success of parameters assignment.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        updateInventDim = fieldUpdateInventDim.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when it calls the
    /// <c>SysLastValue.GetLast</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        updateInventDim = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIndexProductSiteIdx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a given index has product dimensions followed by site and warehouse.
    /// </summary>
    /// <param name="_indexId">
    /// The ID of the index in the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    /// true if validation was successful; otherwise, false.
    /// </returns>
    protected boolean isIndexProductSiteIdx(IndexId _indexId)
    {
        List            productDimFields = EcoResProductDimGroupSetup::dimFields();
        ListEnumerator  productDimFieldsEnumerator = productDimFields.getEnumerator();
        Set             indexProductDimensions = new Set(Types::Integer);

        SysDictIndex    dictIndex = new SysDictIndex(tableNum(InventDim), _indexId);
        boolean         siteFieldFound = false;
        Counter         x;

        if (!dictIndex.enabled())
        {
            return false;
        }

        int indexFieldCount = dictIndex.numberOfFields();
        for (x = 1; x <= indexFieldCount; x++)
        {
            FieldId fieldId = dictIndex.field(x);
            if (!InventDim::isFieldIdDimensional(fieldId))
            {
                // Not an inventory dimension field
                return false;
            }
            if (InventDim::isFieldIdProductDimension(fieldId))
            {
                // Found in beginning of index, so no longer remaining
                indexProductDimensions.add(fieldId);
            }
            else
            {
                // Field is not a product dimension, so validate that all active dimensions have been added.
                productDimFieldsEnumerator.reset();
                while (productDimFieldsEnumerator.moveNext())
                {
                    if (!indexProductDimensions.in(productDimFieldsEnumerator.current()))
                    {
                        SysDictField dictField = new SysDictField(tableNum(InventDim), productDimFieldsEnumerator.current());
                        if (dictField.isSql())
                        {
                            return false;   // Found an active product dimension field which is not in front of index
                        }
                    }
                }
                switch (fieldId)
                {
                    case fieldNum(InventDim, InventSiteId):
                        siteFieldFound = true;
                        break;
                    case fieldNum(InventDim, InventLocationId):
                        if (siteFieldFound)
                        {
                            return true;
                        }
                        return false;
                    default:
                        return false;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        super();

        if (!this.validate())
        {
            return;
        }

        if (updateInventDim)
        {
            InventDimUniquenessEnabling::updateAllUniquenessValues();
        }
        else
        {
            info("@SYS104945");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version      = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the hash field for all records for current legal entity.
    /// </summary>
    public void updateCurrentCompany()
    {
        InventDimSHA3HashHexCodeUpdateTask inventDimSHA3HashHexCodeUpdateTask = new InventDimSHA3HashHexCodeUpdateTask();
        if (inventDimSHA3HashHexCodeUpdateTask.hasInventDimFieldWithValueAndConfigKeyDisabled())
        {
            throw Error("@SCM:ErrorForEnablingConfigurationKeyOfInventDim");
        }

        InventDim               inventDimUpdate;

        ttsbegin;
        while select forupdate inventDimUpdate
        {
            try
            {
                inventDimUpdate.update(true);
            }
            catch (Exception::DuplicateKeyException)
            {
                exceptionTextFallThrough();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the job is ready to execute.
    /// </summary>
    /// <param name="calledFrom">
    /// The calling object.
    /// </param>
    /// <returns>
    /// true if validation succeeded; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        ret = ret && this.validateMetadata();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanVerifyUniquenessForField</Name>
				<Source><![CDATA[
    private boolean checkCanVerifyUniquenessForField(FieldId _fieldId)
    {
        if (!InventDimUniquenessEnablingHelpers::canGenerateTwoValuesForField(tableNum(InventDim), _fieldId))
        {
            return checkFailed(strFmt("@SCM:CannotVerifyUniquenessForField", fieldId2PName(tableNum(InventDim), _fieldId)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether metadata is consistent for the <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    /// true if validation succeeded; otherwise, false.
    /// </returns>
    protected boolean validateMetadata()
    {
        return this.validateProductSiteIdx();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductSiteIdx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an index with product dimensions followed by site and warehouse exist if any of
    /// these are removed from the <c>DimIdx</c> index.
    /// </summary>
    /// <returns>
    /// true if validation was successful; otherwise, false.
    /// </returns>
    protected boolean validateProductSiteIdx()
    {
        List            productDimFields = EcoResProductDimGroupSetup::dimFields();
        ListEnumerator  productDimFieldsEnumerator = productDimFields.getEnumerator();
        Set             enabledProductDimensions = new Set(Types::Integer);
        Set             disabledProductDimensions = new Set(Types::Integer);

        // Build a list of enabled product dimensions
        while (productDimFieldsEnumerator.moveNext())
        {
            SysDictField dictField = new SysDictField(tableNum(InventDim), productDimFieldsEnumerator.current());
            if (dictField.isSql())
            {
                enabledProductDimensions.add(productDimFieldsEnumerator.current());
            }
            else
            {
                disabledProductDimensions.add(productDimFieldsEnumerator.current());
            }
        }
        SetEnumerator enabledProductDimensionsEnumerator = enabledProductDimensions.getEnumerator();

        // If a new index is needed then validate if it exists.
        // Examine all indexes on InventDim to find an index with product dimensions followed by site and warehouse
        SysDictTable dictTable = new SysDictTable(tableNum(InventDim));
        IndexId indexId = dictTable.indexNext(0);
        while (indexId)
        {
            if (this.isIndexProductSiteIdx(indexId))
            {
                return true;
            }
            indexId = dictTable.indexNext(indexId);
        }

        return checkFailed("@GLS180547");
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimUniquenessEnabling construct()
    {
        return new InventDimUniquenessEnabling();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS180548";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        InventDimUniquenessEnabling     inventDimUniquenessEnabling = InventDimUniquenessEnabling::construct();

        if (inventDimUniquenessEnabling.prompt())
        {
            inventDimUniquenessEnabling.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllUniquenessValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that records occur in this table for all <c>InventDim</c> records and that the stored key
    /// is correct.
    /// </summary>
    static public void updateAllUniquenessValues()
    {
        InventDimUniquenessEnabling inventDimUniquenessEnabling = InventDimUniquenessEnabling::construct();
        DataArea                    dataArea;

        while select Id from dataArea
            where !dataArea.IsVirtual
        {
            changecompany(dataArea.Id)
            {
                setPrefix(strFmt("@SYS110249", dataArea.Id));
                inventDimUniquenessEnabling.updateCurrentCompany();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>