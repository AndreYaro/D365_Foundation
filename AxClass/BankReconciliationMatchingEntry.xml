<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatchingEntry</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankReconciliationMatchingEntry</c> class is used to get buffers for matching.
/// </summary>
abstract class BankReconciliationMatchingEntry
{
    BankReconciliationMatchingEntryType entryType;

    CompanyBankAccountId                accountId;
    Num                                 documentNum;
    TransDate                           documentDate;
    BankTransactionType                 bankTransType;
    AmountCur                           openAmountCur;
    NoYesId                             isReversal;
    RefRecId                            refRecId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        entryType,
        accountId,
        documentNum,
        documentDate,
        bankTransType,
        openAmountCur,
        isReversal,
        refRecId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountId</Name>
				<Source><![CDATA[
        public CompanyBankAccountId parmAccountId(CompanyBankAccountId _accountId = accountId)
    {
        accountId = _accountId;

        return accountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankTransType</Name>
				<Source><![CDATA[
        public BankTransactionType parmBankTransType(BankTransactionType _bankTransType = bankTransType)
    {
        bankTransType = _bankTransType;

        return bankTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentDate</Name>
				<Source><![CDATA[
        public TransDate parmDocumentDate(TransDate _documentDate = documentDate)
    {
        documentDate = _documentDate;

        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNum</Name>
				<Source><![CDATA[
        public Num parmDocumentNum(Num _documentNum = documentNum)
    {
        documentNum = _documentNum;

        return documentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEntryType</Name>
				<Source><![CDATA[
        public BankReconciliationMatchingEntryType parmEntryType(BankReconciliationMatchingEntryType _entryType = entryType)
    {
        entryType = _entryType;

        return entryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReversal</Name>
				<Source><![CDATA[
        public NoYesId parmIsReversal(NoYesId _isReversal = isReversal)
    {
        isReversal = _isReversal;

        return isReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpenAmountCur</Name>
				<Source><![CDATA[
        public AmountCur parmOpenAmountCur(AmountCur _openAmountCur = openAmountCur)
    {
        openAmountCur = _openAmountCur;

        return openAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefRecId</Name>
				<Source><![CDATA[
        public RecId parmRefRecId(RefRecId _refRecId = refRecId)
    {
        refRecId = _refRecId;

        return refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Contructs the instance of the <c>BankReconciliationMatchingEntry</c> class
    ///     by matching entry type, source table name and source record Id.
    /// </summary>
    /// <param name="_matchingType">
    ///     Given matching entry type.
    /// </param>
    /// <param name="_recId">
    ///     Given source record Id.
    /// </param>
    /// <returns>
    ///     An instance of the <c>BankReconciliationMatchingEntry</c> class.
    /// </returns>
    public static BankReconciliationMatchingEntry construct(
        BankReconciliationMatchingEntryType _matchingType,
        RecId                               _recId)
    {
        BankReconciliationMatchingEntry matchingEntry;

        switch (_matchingType)
        {
            case BankReconciliationMatchingEntryType::BankStatement:
                matchingEntry = BankReconciliationMatchingEntryStatement::construct(_recId);
                break;

            case BankReconciliationMatchingEntryType::BankDocument:
                matchingEntry = BankReconciliationMatchingEntryDocument::construct(_recId);
                break;
        }

        matchingEntry.parmEntryType(_matchingType);
        matchingEntry.parmRefRecId(_recId);

        return matchingEntry;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>