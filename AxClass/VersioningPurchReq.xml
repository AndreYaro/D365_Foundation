<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningPurchReq</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VersioningPurchReq</c> class is the purchase requisition versioning state model
/// implementation.
/// </summary>
public class VersioningPurchReq extends VersioningDocument
{
    recId           purchReqTableRecId;
    recId           purchReqLineRecId;
    recId           sourceDocumentHeaderRecId;
    utcdatetime     purchReqVersionDateTime;
    boolean         versionCreated;
    RefRecId        purchReqVersionRecIdCreated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>archiveAccountingDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the current distributions as part of the version that is being created.
    /// </summary>
    protected void archiveAccountingDistributions()
    {
        AccountingEvent accountingEvent = AccountingEvent::findBySourceDocumentHeader(sourceDocumentHeaderRecId, true);

        if (accountingEvent && !accountingEvent.EventDateTime)
        {
            accountingEvent.EventDateTime = purchReqVersionDateTime;
            accountingEvent.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveCurrentVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all the changed records of the purchase requisition to the history tables.
    /// </summary>
    /// <param name="_sourceRecId">
    /// A <c>PurchReqTable</c> or <c>PurchReqLine</c> record identifier representing the new document
    /// version being created.
    /// </param>
    /// <param name="_sourceTableId">
    /// The table ID of the source table, the <c>PurchReqTable</c> or <c>PurchReqLine</c> table.
    /// </param>
    /// <remarks>
    /// This method creates a new record in the <c>PurchReqTableVersion</c> table that has the current
    /// system date and calls all the archive methods to archive the individual tables. The archive methods
    /// update the <c>ValidTo</c> attribute of the latest archived version to the timestamp of the new
    /// requisition version minus 1 second for changed records and insert the changed records to the
    /// history tables with <c>ValidTo</c> fields set to <c>DateTimeUtil::maxValue</c> method and
    /// <c>ValidFrom</c> fields set to the timestamp of the requisition version just created.
    /// </remarks>
    public void archiveCurrentVersion(recId _sourceRecId = 0, tableId _sourceTableId = 0)
    {
        PurchReqLine            purchReqLine;

        if (_sourceTableId == tableNum(PurchReqLine))
        {
            select firstonly PurchReqTable from purchReqLine
                where purchReqLine.RecId == _sourceRecId;
            purchReqTableRecId = purchReqLine.PurchReqTable;
        }
        this.archivePurchReqTable();
        this.archivePurchReqLine();
        this.archiveAccountingDistributions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all <c>MarkupTrans</c> table records that belong to the purchase requisition and marked as
    /// modified to the history table.
    /// </summary>
    /// <param name="_purchReqLine">
    /// A <c>PurchReqLineVersion</c> record ID that represents the new document version that is created.
    /// </param>
    protected void archiveMarkupTrans(recId _purchReqLine)
    {
        PurchReqTable       purchReqTable;
        PurchReqLine        purchReqLine;
        MarkupTrans         markupTrans;
        MarkupTransHistory  markupTransHistory;

        markupTransHistory.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

        // Line Markup
        while select forupdate markupTrans
            where markupTrans.TransTableId  == purchReqLine.TableId
               && markupTrans.TransRecId    == _purchReqLine
               && markupTrans.IsModified
        {
            this.createPurchReqVersion();

            markupTransHistory.clear();
            markupTransHistory.initFromMarkupTrans(markupTrans);
            markupTransHistory.ValidFrom  = purchReqVersionDateTime;
            markupTransHistory.ValidTo    = DateTimeUtil::maxValue();
            markupTransHistory.insert();
            markupTrans.IsModified = NoYes::No;
            markupTrans.doUpdate();
        }

        // Header Markup
        while select forupdate markupTrans
            where markupTrans.TransTableId  == purchReqTable.TableId
               && markupTrans.TransRecId    == purchReqTableRecId
               && markupTrans.IsModified
        {
            markupTransHistory.clear();
            markupTransHistory.initFromMarkupTrans(markupTrans);
            markupTransHistory.ValidFrom  = purchReqVersionDateTime;
            markupTransHistory.ValidTo    = DateTimeUtil::maxValue();
            markupTransHistory.insert();
            markupTrans.IsModified = NoYes::No;
            markupTrans.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archivePurchReqBusJustification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the <c>PurchReqBusJustification</c> record that is related to the purchase requisition to
    /// the history table if it is marked as modified.
    /// </summary>
    protected void archivePurchReqBusJustification()
    {
        PurchReqBusJustification           purchReqBusJustification;
        PurchReqBusJustificationHistory    purchReqBusJustificationHistory;

        purchReqBusJustificationHistory.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

        while select forupdate purchReqBusJustification
            where purchReqBusJustification.RefRecId     == purchReqTableRecId
               && purchReqBusJustification.RefTableId   == tableNum(PurchReqTable)
               && purchReqBusJustification.IsModified
        {
            this.createPurchReqVersion();

            if (this.isDataChanged(tableNum(PurchReqBusJustification), purchReqBusJustification))
            {
                purchReqBusJustificationHistory.RefTableId              = tableNum(PurchReqTable);
                purchReqBusJustificationHistory.RefRecId                = purchReqTableRecId;
                purchReqBusJustificationHistory.BusinessJustification   = purchReqBusJustification.BusinessJustification;
                purchReqBusJustificationHistory.PurchReqBusJustification= purchReqBusJustification.RecId;
                purchReqBusJustificationHistory.ValidFrom               = purchReqVersionDateTime;
                purchReqBusJustificationHistory.ValidTo                 = DateTimeUtil::maxValue();
                purchReqBusJustificationHistory.insert();
            }
            purchReqBusJustification.IsModified = NoYes::No;
            purchReqBusJustification.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archivePurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all <c>PurchReqLine</c> records that belong to the purchase requisition and marked as
    /// modified to the history table.
    /// </summary>
    protected void archivePurchReqLine()
    {
        PurchReqLine            purchReqLine;
        PurchReqLineHistory     purchReqLineHistory;

        purchReqLineHistory.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

        while select forupdate purchReqLine
            where purchReqLine.PurchReqTable == purchReqTableRecId
        {
            if (purchReqLine.IsModified && this.isDataChanged(tableNum(PurchReqLine), purchReqLine))
            {
                this.createPurchReqVersion();

                purchReqLineHistory.initFromPurchReqLine(purchReqLine);
                purchReqLineHistory.PurchReqLine    = purchReqLine.RecId;
                purchReqLineHistory.ValidFrom       = purchReqVersionDateTime;
                purchReqLineHistory.ValidTo         = DateTimeUtil::maxValue();
                purchReqLineHistory.insert();
                purchReqLineHistory.clear();
                purchReqLine.IsModified = NoYes::No;
                purchReqLine.doUpdate();
            }

            this.archivePurchReqLineBusJustification(purchReqLine.RecId);
            this.archiveMarkupTrans(purchReqLine.RecId);
            this.archivePurchReqLineVendorSuggestion(purchReqLine.RecId);
            this.archivePurchReqLineVendorProposal(purchReqLine.RecId);
            this.archivePurchReqLineQuestionnaire(purchReqLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archivePurchReqLineAnswerLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the <c>PurchReqLineQuestionnaireResponse</c> record that is related to the purchase
    /// requisition to the history table if it is marked as modified.
    /// </summary>
    /// <param name="_purchReqLineQuestionnaireResponse">
    /// A <c>PurchReqLineQuestionnaireResponse</c> record that represents the new document version being
    /// created.
    /// </param>
    protected void archivePurchReqLineAnswerLines(PurchReqLineQuestionnaireResponse _purchReqLineQuestionnaireResponse)
    {
        KMVirtualNetworkAnswerLine kmVirtualNetworkAnswerLine;
        PurchReqQuestionnaireAnswerLineHistory purchReqQuestionnaireAnswerLineHistory;

        purchReqQuestionnaireAnswerLineHistory.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

        while select kmVirtualNetworkAnswerLine
            where kmVirtualNetworkAnswerLine.KmVirtualNetworkAnswerTableId  == _purchReqLineQuestionnaireResponse.kmVirtualNetworkAnswerTableId
        {
            purchReqQuestionnaireAnswerLineHistory.KmVirtualNetworkAnswerTableId = kmVirtualNetworkAnswerLine.KmVirtualNetworkAnswerTableId;
            purchReqQuestionnaireAnswerLineHistory.KmQuestionId                  = kmVirtualNetworkAnswerLine.KmQuestionId;
            purchReqQuestionnaireAnswerLineHistory.Text                          = kmVirtualNetworkAnswerLine.Text;
            purchReqQuestionnaireAnswerLineHistory.Note                          = kmVirtualNetworkAnswerLine.Note;
            purchReqQuestionnaireAnswerLineHistory.Point                         = kmVirtualNetworkAnswerLine.Point;
            purchReqQuestionnaireAnswerLineHistory.CorrectAnswer                 = kmVirtualNetworkAnswerLine.CorrectAnswer;
            purchReqQuestionnaireAnswerLineHistory.AnswerCollectionSequenceNumber= kmVirtualNetworkAnswerLine.AnswerCollectionSequenceNumber;
            purchReqQuestionnaireAnswerLineHistory.QuestionText                  = kmVirtualNetworkAnswerLine.QuestionText;
            purchReqQuestionnaireAnswerLineHistory.KmQuestionResultGroupId       = kmVirtualNetworkAnswerLine.KmQuestionResultGroupId;
            purchReqQuestionnaireAnswerLineHistory.ParentQuestionId              = kmVirtualNetworkAnswerLine.ParentQuestionId;
            purchReqQuestionnaireAnswerLineHistory.SequenceNumber                = kmVirtualNetworkAnswerLine.SequenceNumber;
            purchReqQuestionnaireAnswerLineHistory.KmQuestionRowId               = kmVirtualNetworkAnswerLine.KmQuestionRowId;
            purchReqQuestionnaireAnswerLineHistory.ValidFrom                     = purchReqVersionDateTime;
            purchReqQuestionnaireAnswerLineHistory.ValidTo                       = DateTimeUtil::maxValue();
            purchReqQuestionnaireAnswerLineHistory.kmVirtualNetworkAnswerLine    = kmVirtualNetworkAnswerLine.RecId;

            purchReqQuestionnaireAnswerLineHistory.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archivePurchReqLineAnswerTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the <c>PurchReqLineQuestionnaireResponse</c> record that is related to the purchase
    /// requisition to the history table if it is marked as modified.
    /// </summary>
    /// <param name="_purchReqLineQuestionnaireResponse">
    /// A <c>PurchReqLineQuestionnaireResponse</c> record that represents the new document version being
    /// created.
    /// </param>
    protected void archivePurchReqLineAnswerTable(PurchReqLineQuestionnaireResponse _purchReqLineQuestionnaireResponse)
    {
        PurchReqQuestionnaireAnswerTableHistory     purchReqQuestionnaireAnswerTableHistory;

        purchReqQuestionnaireAnswerTableHistory.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

        purchReqQuestionnaireAnswerTableHistory.initFromKMVirtualNetworkAnsTable(_purchReqLineQuestionnaireResponse.kmVirtualNetworkAnswerTableId);
        purchReqQuestionnaireAnswerTableHistory.ValidFrom    = purchReqVersionDateTime;
        purchReqQuestionnaireAnswerTableHistory.ValidTo      = DateTimeUtil::maxValue();
        purchReqQuestionnaireAnswerTableHistory.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>archivePurchReqLineBusJustification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the <c>PurchReqBusJustification</c> record that is related to the purchase requisition line
    /// to the history table if it is marked as modified.
    /// </summary>
    /// <param name="_purchReqLine">
    /// A <c>PurchReqLine</c> record for which the business justification is modified and version being
    /// created.
    /// </param>
    protected void archivePurchReqLineBusJustification(recId _purchReqLine)
    {
        PurchReqBusJustification           purchReqBusJustification;
        PurchReqBusJustificationHistory    purchReqBusJustificationHistory;

        purchReqBusJustificationHistory.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

        while select forupdate purchReqBusJustification
            where purchReqBusJustification.RefRecId     == _purchReqLine
               && purchReqBusJustification.RefTableId   == tableNum(PurchReqLine)
               && purchReqBusJustification.IsModified
        {
            if (this.isDataChanged(tableNum(PurchReqBusJustification), purchReqBusJustification))
            {
                this.createPurchReqVersion();

                purchReqBusJustificationHistory.RefTableId              = tableNum(PurchReqLine);
                purchReqBusJustificationHistory.RefRecId                = _purchReqLine;
                purchReqBusJustificationHistory.BusinessJustification   = purchReqBusJustification.BusinessJustification;
                purchReqBusJustificationHistory.PurchReqBusJustification= purchReqBusJustification.RecId;
                purchReqBusJustificationHistory.ValidFrom               = purchReqVersionDateTime;
                purchReqBusJustificationHistory.ValidTo                 = DateTimeUtil::maxValue();
                purchReqBusJustificationHistory.insert();
                purchReqBusJustification.IsModified = NoYes::No;
                purchReqBusJustification.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archivePurchReqLineQuestionnaire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the <c>PurchReqLineQuestionnaire</c> record that is related to the purchase requisition line
    /// to the history table if it is marked as modified.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    /// A <c>PurchReqLine</c> record for which the questionnaire is modified and version being created.
    /// </param>
    protected void archivePurchReqLineQuestionnaire(recId _purchReqLineRecId)
    {
        PurchReqLineQuestionnaireResponse           purchReqLineQuestionnaireResponse;
        PurchReqLineQuestionnaireResponseHistory    purchReqLineQuestionnaireResponseHistory;
        PurchReqQuestionnaireAnswerTableHistory     purchReqQuestionnaireAnswerTableHistory;
        PurchReqQuestionnaireAnswerLineHistory      purchReqQuestionnaireAnswerLineHistory;

        purchReqLineQuestionnaireResponseHistory.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
        purchReqQuestionnaireAnswerTableHistory.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
        purchReqQuestionnaireAnswerLineHistory.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

        while select forupdate purchReqLineQuestionnaireResponse
            where purchReqLineQuestionnaireResponse.PurchReqLine == _purchReqLineRecId
               && purchReqLineQuestionnaireResponse.IsModified
        {
            if (this.isDataChanged(tableNum(PurchReqLineQuestionnaireResponse), purchReqLineQuestionnaireResponse))
            {
                this.createPurchReqVersion();

                purchReqLineQuestionnaireResponseHistory.clear();
                purchReqLineQuestionnaireResponseHistory.PurchReqLine                           = _purchReqLineRecId;
                purchReqLineQuestionnaireResponseHistory.kmVirtualNetworkAnswerTableId          = purchReqLineQuestionnaireResponse.kmVirtualNetworkAnswerTableId;
                purchReqLineQuestionnaireResponseHistory.kmVirtualNetworkAnswerTableIdDataArea  = curext();
                purchReqLineQuestionnaireResponseHistory.PurchReqLineQuestionnaireResponse      = purchReqLineQuestionnaireResponse.RecId;
                purchReqLineQuestionnaireResponseHistory.ValidFrom                              = purchReqVersionDateTime;
                purchReqLineQuestionnaireResponseHistory.ValidTo                                = DateTimeUtil::maxValue();
                purchReqLineQuestionnaireResponseHistory.insert();
                purchReqLineQuestionnaireResponse.IsModified = NoYes::No;
                purchReqLineQuestionnaireResponse.doUpdate();

                this.archivePurchReqLineAnswerTable(purchReqLineQuestionnaireResponse);
                this.archivePurchReqLineAnswerLines(purchReqLineQuestionnaireResponse);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archivePurchReqLineVendorProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all <c>PurchReqLineVendorProposal</c> records that belong to the purchase requisition line
    /// and marked as modified to the history table.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    /// A <c>PurchReqTableVersion</c> record representing the new document version being created.
    /// </param>
    protected void archivePurchReqLineVendorProposal(recId _purchReqLineRecId)
    {
        PurchReqLineVendorProposal              purchReqLineVendorProposal;
        PurchReqLineVendorProposalHistory       purchReqLineVendorProposalHistory;

        purchReqLineVendorProposalHistory.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

        while select forupdate purchReqLineVendorProposal
            where purchReqLineVendorProposal.PurchReqLine == _purchReqLineRecId
               && purchReqLineVendorProposal.IsModified
        {
            this.createPurchReqVersion();

            if (this.isDataChanged(tableNum(PurchReqLineVendorProposal), purchReqLineVendorProposal))
            {
                purchReqLineVendorProposalHistory.clear();
                purchReqLineVendorProposalHistory.initFromPurchReqLineVendorProposal(purchReqLineVendorProposal);
                purchReqLineVendorProposalHistory.PurchReqLineVendorProposal    = purchReqLineVendorProposal.RecId;
                purchReqLineVendorProposalHistory.ValidFrom                     = purchReqVersionDateTime;
                purchReqLineVendorProposalHistory.ValidTo                       = DateTimeUtil::maxValue();
                purchReqLineVendorProposalHistory.insert();
            }
            purchReqLineVendorProposal.IsModified = NoYes::No;
            purchReqLineVendorProposal.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archivePurchReqLineVendorSuggestion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all <c>PurchReqLineVendorSuggestion</c> records that belong to the purchase requisition line
    /// and marked as modified to the history table.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    /// A <c>PurchReqTableVersion</c> record that represents the new document version being created.
    /// </param>
    protected void archivePurchReqLineVendorSuggestion(recId _purchReqLineRecId)
    {
        PurchReqLineVendorSuggestion            purchReqLineVendorSuggestion;
        PurchReqLineVendorSuggestionHistory     purchReqLineVendorSuggestionHistory;

        purchReqLineVendorSuggestionHistory.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

        while select forupdate purchReqLineVendorSuggestion
            where purchReqLineVendorSuggestion.PurchReqLine == _purchReqLineRecId
            && purchReqLineVendorSuggestion.IsModified
        {
            this.createPurchReqVersion();

            if (this.isDataChanged(tableNum(PurchReqLineVendorSuggestion), purchReqLineVendorSuggestion))
            {
                this.createPurchReqVersion();
                purchReqLineVendorSuggestionHistory.clear();
                purchReqLineVendorSuggestionHistory.clear();
                purchReqLineVendorSuggestionHistory.initFromPurchReqLineVendorSuggestion(purchReqLineVendorSuggestion);
                purchReqLineVendorSuggestionHistory.PurchReqLineVendorSuggestion    = purchReqLineVendorSuggestion.RecId;
                purchReqLineVendorSuggestionHistory.ValidFrom                       = purchReqVersionDateTime;
                purchReqLineVendorSuggestionHistory.ValidTo                         = DateTimeUtil::maxValue();
                purchReqLineVendorSuggestionHistory.insert();
            }
            purchReqLineVendorSuggestion.IsModified = NoYes::No;
            purchReqLineVendorSuggestion.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archivePurchReqTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the <c>PurchReqTable</c> table record that represents the purchase requisition to the
    ///    history table if it is marked as modified.
    /// </summary>
    protected void archivePurchReqTable()
    {
        PurchReqTable           purchReqTable;
        PurchReqTableHistory    purchReqTableHistory;

        while select forupdate * from purchReqTable
            where purchReqTable.RecId == purchReqTableRecId
               && purchReqTable.IsModified
        {
            this.createPurchReqVersion();

            purchReqTableHistory.initFromPurchReqTable(purchReqTable);
            purchReqTableHistory.PurchReqTable  = purchReqTable.RecId;
            purchReqTableHistory.ValidFrom      = purchReqVersionDateTime;
            purchReqTableHistory.ValidTo        = DateTimeUtil::maxValue();
            purchReqTableHistory.insert();
            purchReqTable.IsModified = NoYes::No;
            purchReqTable.doUpdate();
            this.archivePurchReqBusJustification();
            this.archivePurchReqTableHistoryTotals(purchReqTable);
        }

        // If the buffer is shown in a form, we have to reread it to avoid version conflict
        if (FormDataUtil::getFormDataSource(purchReqTable))
        {
            FormDataUtil::getFormDataSource(purchReqTable).reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archivePurchReqTableHistoryTotals</Name>
				<Source><![CDATA[
    protected void archivePurchReqTableHistoryTotals(PurchReqTable _purchReqTable)
    {
        PurchReqTableHistoryTotals      purchReqTableHistoryTotals;
        PurchtotalsForm                 purchtotalsForm;

        if (_purchReqTable.isConsumption()) //do not create totals history for replensihment
        {
            purchtotalsForm= PurchtotalsForm::newPurchTotalsForm(_purchReqTable);

            purchtotalsForm.setCurrencyCode(SystemParameters::find(false).SystemCurrencyCode);

            purchtotalsForm.calctotals();

            ttsbegin;

            purchReqTableHistoryTotals.clear();

            purchReqTableHistoryTotals.ReqAmountMST         = purchtotalsForm.invoiceAmountValue();
            purchReqTableHistoryTotals.SalesOrderBalance    = purchtotalsForm.sumLinesValue();
            purchReqTableHistoryTotals.SumMarkup            = purchtotalsForm.sumMarkUpValue();
            purchReqTableHistoryTotals.SumTax               = purchtotalsForm.sumTaxValue();
            purchReqTableHistoryTotals.SumLineDisc          = purchtotalsForm.lineDiscValue();
            purchReqTableHistoryTotals.RoundOff             = purchtotalsForm.invoiceRoundOffValue();
            purchReqTableHistoryTotals.CurrencyCode         = purchtotalsForm.currencyCode();
            purchReqTableHistoryTotals.PurchReqTableHistory = PurchReqTableHistory::findByPurchReqTable(_purchReqTable.RecId, purchReqVersionDateTime).RecId;

            purchReqTableHistoryTotals.insert();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareBusinessJustificationAndHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares fields of Purchase requisition business justification
    /// </summary>
    /// <param name="_source">
    /// Source purchase requisition business justification
    /// </param>
    /// <param name="_target">
    /// Target purchase requisition business justification
    /// </param>
    /// <returns>
    /// true if source and target do not have same information, else false.
    /// </returns>
    protected boolean compareBusinessJustificationAndHistory(PurchReqBusJustification _source, PurchReqBusJustificationHistory _target)
    {
        boolean ret = false;

        if (    _source.BusinessJustification   !=  _target.BusinessJustification
             || _source.RefTableId              !=  _target.RefTableId
             || _source.RefRecId                !=  _target.RefRecId
           )
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>comparePurchReqLineAndHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares fields of the purchase requisition line objects.
    /// </summary>
    /// <param name="_source">
    /// The source purchase requisition line.
    /// </param>
    /// <param name="_target">
    /// The target purchase requisition line.
    /// </param>
    /// <returns>
    /// true if the source and target do not have the same information, else false.
    /// </returns>
    protected boolean comparePurchReqLineAndHistory(PurchReqLine _source, PurchReqLineHistory _target)
    {
        boolean ret = false;

        if (    _source.LineNum                         !=  _target.LineNum
             || _source.ItemId                          !=  _target.ItemId
             || _source.InventDimId                     !=  _target.InventDimId
             || _source.Name                            !=  _target.Name
             || _source.LineType                        !=  _target.LineType
             || _source.PurchQty                        !=  _target.PurchQty
             || _source.PurchUnitOfMeasure              !=  _target.PurchUnitOfMeasure
             || _source.PurchPrice                      !=  _target.PurchPrice
             || _source.CurrencyCode                    !=  _target.CurrencyCode
             || _source.VendAccount                     !=  _target.VendAccount
             || _source.url                             !=  _target.url
             || _source.RequisitionStatus               !=  _target.Status
             || _source.PurchRFQCaseId                  !=  _target.PurchRFQCaseId
             || _source.RequiredDate                    !=  _target.RequiredDate
             || _source.LineAmount                      !=  _target.LineAmount
             || _source.DeliveryName                    !=  _target.DeliveryName
             || _source.AddressRefRecId                 !=  _target.AddressRefRecId
             || _source.AddressRefTableId               !=  _target.AddressRefTableId
             || _source.Attention                       !=  _target.Attention
             || _source.LineDisc                        !=  _target.LineDisc
             || _source.LinePercent                     !=  _target.LinePercent
             || _source.PriceUnit                       !=  _target.PriceUnit
             || _source.PurchMarkup                     !=  _target.PurchMarkup
             || _source.TaxGroup                        !=  _target.TaxGroup
             || _source.TaxItemGroup                    !=  _target.TaxItemGroup
             || _source.PurchLineCreated                !=  _target.PurchLineCreated
             || _source.LineRefId                       !=  _target.LineRefId
             || _source.PurchId                         !=  _target.PurchId
             || _source.ProjId                          !=  _target.ProjId
             || _source.ProjCategoryId                  !=  _target.ProjCategoryId
             || _source.ActivityNumber                  !=  _target.ActivityNumber
             || _source.ProjLinePropertyId              !=  _target.ProjLinePropertyId
             || _source.LineComplete                    !=  _target.LineComplete
             || _source.ProjSalesCurrencyId             !=  _target.ProjSalesCurrencyId
             || _source.ProjSalesUnitOfMeasure          !=  _target.ProjSalesUnitOfMeasure
             || _source.ProjSalesPrice                  !=  _target.ProjSalesPrice
             || _source.ProjTaxGroupId                  !=  _target.ProjTaxGroupId
             || _source.ProjTaxItemGroupId              !=  _target.ProjTaxItemGroupId
             || _source.ProjTransId                     !=  _target.ProjTransId
             || _source.ExternalItemId                  !=  _target.ExternalItemId
             || _source.IsSaved                         !=  _target.IsSaved
             || _source.SequenceNumber                  !=  _target.SequenceNumber
             || _source.TransDate                       !=  _target.TransDate
             || _source.VendQuoteNumber                 !=  _target.VendQuoteNumber
             || _source.ProcurementCategory             !=  _target.ProcurementCategory
             || _source.InventLocationId                !=  _target.InventLocationId
             || _source.DeliveryPostalAddress           !=  _target.DeliveryPostalAddress
             || _source.AssetGroup                      !=  _target.AssetGroup
             || _source.ReasonRefRecId                  !=  _target.ReasonRefRecId
             || _source.BusinessJustification           !=  _target.BusinessJustification
             || _source.SourceDocumentLine              !=  _target.SourceDocumentLine
             || _source.AccountingDistributionTemplate  !=  _target.AccountingDistributionTemplate
             || _source.ReceivingOperatingUnit          !=  _target.ReceivingOperatingUnit
             || _source.PurchReqTable                   !=  _target.PurchReqTable
             || _source.BuyingLegalEntity               !=  _target.BuyingLegalEntity
             || _source.AssetGroupDataArea              !=  _target.AssetGroupDataArea
             || _source.InventDimIdDataArea             !=  _target.InventDimIdDataArea
             || _source.InventLocationIdDataArea        !=  _target.InventLocationIdDataArea
             || _source.ItemIdDataArea                  !=  _target.ItemIdDataArea
             || _source.ProjCategoryIdDataArea          !=  _target.ProjCategoryIdDataArea
             || _source.ProjTransIdDataArea             !=  _target.ProjTransIdDataArea
             || _source.ProjLinePropertyIdDataArea      !=  _target.ProjLinePropertyIdDataArea
             || _source.ProjIdDataArea                  !=  _target.ProjIdDataArea
             || _source.ProjTaxGroupIdDataArea          !=  _target.ProjTaxGroupIdDataArea
             || _source.ProjTaxItemGroupIdDataArea      !=  _target.ProjTaxItemGroupIdDataArea
             || _source.PurchRFQCaseIdDataArea          !=  _target.PurchRFQCaseIdDataArea
             || _source.PurchIdDataArea                 !=  _target.PurchIdDataArea
             || _source.ActivityNumberDataArea          !=  _target.ActivityNumberDataArea
             || _source.TaxGroupDataArea                !=  _target.TaxGroupDataArea
             || _source.VendAccountDataArea             !=  _target.VendAccountDataArea
             || _source.TaxItemGroupDataArea            !=  _target.TaxItemGroupDataArea
             || _source.IsPrepayment                    !=  _target.IsPrepayment
             || _source.PrePaymentDetails               !=  _target.PrePaymentDetails
             || _source.PurchAgreement                  !=  _target.PurchAgreement
             || _source.rfqRequirement                  !=  _target.rfqRequirement
             || _source.Requisitioner                   !=  _target.Requisitioner
             || _source.AssetRuleQualifierOption        !=  _target.AssetRuleQualifierOption
             || _source.AssetRuleQualifierOptionLocal   !=  _target.AssetRuleQualifierOptionLocal
             || _source.ItemIdNonCatalog                !=  _target.ItemIdNonCatalog
             || !DimensionDefaultFacade::areEqual(_source.DefaultDimension, _target.DefaultDimension)
           )
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>comparePurchReqTableAndHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares fields of Purchase requisition header.
    /// </summary>
    /// <param name="_source">
    /// The source purchase requisition header.
    /// </param>
    /// <param name="_target">
    /// The target purchase requisition header.
    /// </param>
    /// <returns>
    /// true if the source and target do not have same information, else false.
    /// </returns>
    protected boolean comparePurchReqTableAndHistory(PurchReqTable _source, PurchReqTableHistory _target)
    {
        boolean ret = false;

        if (    _source.PurchReqId              !=  _target.PurchReqId
             || _source.PurchReqName            !=  _target.PurchReqName
             || _source.PurchReqType            !=  _target.PurchReqType
             || _source.RequisitionStatus       !=  _target.Status
             || _source.RequiredDate            !=  _target.RequiredDate
             || _source.ProjId                  !=  _target.ProjId
             || _source.TransDate               !=  _target.TransDate
             || _source.BusinessJustification   !=  _target.BusinessJustification
             || _source.SourceDocumentHeader    !=  _target.SourceDocumentHeader
             || _source.ProjIdDataArea          !=  _target.ProjIdDataArea
             || _source.Originator              !=  _target.Originator
           )
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareVendorProposalAndHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares fields of the vendor proposal.
    /// </summary>
    /// <param name="_source">
    /// The source vendor proposal record.
    /// </param>
    /// <param name="_target">
    /// The target vendor proposal record.
    /// </param>
    /// <returns>
    /// true if the source and target do not have same information, else false.
    /// </returns>
    protected boolean compareVendorProposalAndHistory(PurchReqLineVendorProposal _source, PurchReqLineVendorProposalHistory _target)
    {
        boolean ret = false;

        if (    _source.Name                !=  _target.Name
             || _source.ContactInformation  !=  _target.ContactInformation
           )
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareVendorSuggestionAndHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares fields of the vendor suggestion.
    /// </summary>
    /// <param name="_source">
    /// The source vendor suggestion record.
    /// </param>
    /// <param name="_target">
    /// The target vendor suggestion record.
    /// </param>
    /// <returns>
    /// true if source and target does not have the same information, else false.
    /// </returns>
    protected boolean compareVendorSuggestionAndHistory(PurchReqLineVendorSuggestion _source, PurchReqLineVendorSuggestionHistory _target)
    {
        boolean ret = false;

        if (    _source.VendAccount             !=  _target.VendAccount
             || _source.VendAccountDataArea     !=  _target.VendAccountDataArea
           )
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewVersion</Name>
				<Source><![CDATA[
    protected RefRecId createNewVersion(VersioningTimeStamp _versionTimeStamp = 1900-01-01T00:00:00,
    									 boolean _isProformaVersion = false)
    {
        return this.createPurchReqVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchReqVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a version of the purchase requisition based on the current date and time.
    /// </summary>
    /// <returns>
    /// The record ID of the version created.
    /// </returns>
    protected RefRecId createPurchReqVersion()
    {
        PurchReqTableVersion    purchReqTableVersion;

        if (versionCreated)
        {
            return purchReqVersionRecIdCreated;
        }
        purchReqTableVersion.PurchReqTable      = purchReqTableRecId;
        purchReqTableVersion.VersionDateTime    = this.getPurchReqVersionDateTime(purchReqTableRecId);
        purchReqTableVersion.insert();

        purchReqVersionDateTime = purchReqTableVersion.VersionDateTime;
        versionCreated = true;
        purchReqVersionRecIdCreated = purchReqTableVersion.RecId;
        return purchReqVersionRecIdCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesHistoryExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the purchase requisition has ever been copied to the history tables.
    /// </summary>
    /// <returns>
    /// true if any version of the purchase requisition exists in the history tables; otherwise, false.
    /// </returns>
    public boolean doesHistoryExist()
    {
        return (select firstonly purchReqTableVersion
                    where purchReqTableVersion.PurchReqTable == purchReqTableRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the state of the current purchase requisition version.
    /// </summary>
    /// <returns>
    /// The current versioning state of the document.
    /// </returns>
    public VersioningDocumentState getDocumentState()
    {
        return VersioningDocumentState::Confirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchReqVersionDateTime</Name>
				<Source><![CDATA[
    private utcdatetime getPurchReqVersionDateTime(recId _purchReqTableRecId)
    {
        utcdatetime          lastDateTime;
        PurchReqTableVersion purchReqTableVersion;

        select firstonly VersionDateTime from purchReqTableVersion
            order by VersionDateTime desc
            where purchReqTableVersion.PurchReqTable == _purchReqTableRecId;

        if (purchReqTableVersion.VersionDateTime == DateTimeUtil::minValue() ||
            DateTimeUtil::utcNow() > purchReqTableVersion.VersionDateTime)
        {
            lastDateTime = DateTimeUtil::utcNow();
        }
        else
        {
            lastDateTime = DateTimeUtil::addSeconds(purchReqTableVersion.VersionDateTime, 1);
        }

        return lastDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChangeConfirmationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to a record will require purchase requisition confirmation or not.
    /// </summary>
    /// <param name="_newRecord">
    /// The new version of the record.
    /// </param>
    /// <param name="_oldRecord">
    /// The old version of the record.
    /// </param>
    /// <returns>
    /// true if the change requires confirmation; otherwise, false.
    /// </returns>
    protected boolean isChangeConfirmationRequired(Common _newRecord, Common _oldRecord)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChangeRequestRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change request for the purchase requisition is required.
    /// </summary>
    /// <returns>
    /// true if change request is required; otherwise, false.
    /// </returns>
    protected boolean isChangeRequestRequired()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether data is changed in the table.
    /// </summary>
    /// <param name="tableId">
    /// The ID of the table to be checked for data change.
    /// </param>
    /// <param name="compareTable">
    /// The table to which to compare.
    /// </param>
    /// <returns>
    /// true if data is changed; otherwise, false.
    /// </returns>
    protected boolean isDataChanged(int tableId, Common compareTable)
    {
        boolean retValue = false;

        PurchReqTableHistory                        purchReqTableHistory;
        PurchReqLineHistory                         purchReqLineHistory;
        PurchReqLineVendorSuggestionHistory         purchReqLineVendorSuggestionHistory;
        PurchReqLineVendorProposalHistory           purchReqLineVendorProposalHistory;
        PurchReqLineQuestionnaireResponse           purchReqLineQuestionnaireResponse;
        PurchReqLineQuestionnaireResponseHistory    purchReqLineQuestionnaireResponseHistory;
        PurchReqBusJustificationHistory             purchReqBusJustificationHistory;

        switch (tableId)
        {
            case tableNum(PurchReqTable):
                select firstonly * from purchReqTableHistory where purchReqTableHistory.PurchReqTable == compareTable.RecId;
                retValue = this.comparePurchReqTableAndHistory(compareTable, purchReqTableHistory);
                break;

            case tableNum(PurchReqLine):
                select firstonly * from purchReqLineHistory where purchReqLineHistory.PurchReqLine == compareTable.RecId;
                retValue = this.comparePurchReqLineAndHistory(compareTable, purchReqLineHistory);
                break;

            case tableNum(PurchReqLineVendorSuggestion):
                select firstonly * from purchReqLineVendorSuggestionHistory
                    where purchReqLineVendorSuggestionHistory.PurchReqLineVendorSuggestion == compareTable.RecId;

                retValue = this.compareVendorSuggestionAndHistory(compareTable, purchReqLineVendorSuggestionHistory);
                break;

            case tableNum(PurchReqLineVendorProposal):
                select firstonly * from purchReqLineVendorProposalHistory
                    where purchReqLineVendorProposalHistory.PurchReqLineVendorProposal == compareTable.RecId;

                retValue = this.compareVendorProposalAndHistory(compareTable, purchReqLineVendorProposalHistory);
                break;

            case tableNum(PurchReqLineQuestionnaireResponse):
                select firstonly * from purchReqLineQuestionnaireResponseHistory
                    where purchReqLineQuestionnaireResponseHistory.PurchReqLineQuestionnaireResponse == compareTable.RecId;

                purchReqLineQuestionnaireResponse = compareTable;
                retValue = purchReqLineQuestionnaireResponse.kmVirtualNetworkAnswerTableId != purchReqLineQuestionnaireResponseHistory.kmVirtualNetworkAnswerTableId;
                break;

            case tableNum(PurchReqBusJustification):
                select firstonly * from purchReqBusJustificationHistory
                    where purchReqBusJustificationHistory.PurchReqBusJustification == compareTable.RecId;

                retValue = this.compareBusinessJustificationAndHistory(compareTable, purchReqBusJustificationHistory);
                break;

            default:
                break;
        }
        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastVersionArchived</Name>
				<Source><![CDATA[
    public boolean isLastVersionArchived()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqTable</Name>
				<Source><![CDATA[
    protected recId parmPurchReqTable(recId _purchReqTable = purchReqTableRecId)
    {
        purchReqTableRecId = _purchReqTable;

        return purchReqTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    protected recId parmSourceDocumentHeader(recId _sourceDocumentHeaderRecId = sourceDocumentHeaderRecId)
    {
        sourceDocumentHeaderRecId = _sourceDocumentHeaderRecId;

        return sourceDocumentHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the document state of the purchase requisition.
    /// </summary>
    /// <param name="_versioningState">
    /// The document state to be set.
    /// </param>
    protected void setDocumentState(VersioningDocumentState _versioningState)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static VersioningPurchReq construct()
    {
        return new VersioningPurchReq();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVersioningPurchReq</Name>
				<Source><![CDATA[
    public static VersioningPurchReq newVersioningPurchReq(recId _purchReqTableRecId)
    {
        PurchReqTable                   purchReqTable;
        VersioningPurchReq              versioningPurchReq;

        versioningPurchReq = new VersioningPurchReq();
        versioningPurchReq.parmPurchReqTable(_purchReqTableRecId);

        select firstonly SourceDocumentHeader from purchReqTable
            where purchReqTable.RecId == _purchReqTableRecId;

        versioningPurchReq.parmSourceDocumentHeader(purchReqTable.SourceDocumentHeader);

        return versioningPurchReq;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>