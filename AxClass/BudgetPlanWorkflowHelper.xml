<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanWorkflowHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains commonly used workflow related actions against a <c>BudgetPlan</c> document.
/// </summary>
public class BudgetPlanWorkflowHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approveWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Approves the workflow for the budget plan document.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record to approve the workflow.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static void approveWorkflow(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanWorkflowHelper, approveWorkflow),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }

        BudgetPlanHeader budgetPlanHeader;

        ttsbegin;

        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId, true);
        budgetPlanHeader.WorkflowStatus = BudgetPlanWorkflowStatus::Approved;
        budgetPlanHeader.DocumentStatus = BudgetPlanStatus::Finalized;
        budgetPlanHeader.InUseBy        = BudgetPlanningConstants::emptyString;
        budgetPlanHeader.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the budget plan.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static void cancelWorkflow(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanWorkflowHelper, cancelWorkflow),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }

        BudgetPlanHeader budgetPlanHeader;

        ttsbegin;

        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId, true);

        if (budgetPlanHeader.WorkflowStatus == BudgetPlanWorkflowStatus::PendingRejection)
        {
            budgetPlanHeader.WorkflowStatus = BudgetPlanWorkflowStatus::Rejected;
        }
        else
        {
            budgetPlanHeader.WorkflowStatus = BudgetPlanWorkflowStatus::NotSubmitted;
        }

        budgetPlanHeader.DocumentStatus      = BudgetPlanStatus::Draft;
        budgetPlanHeader.BudgetPlanningStage = BudgetPlanningWorkflowSetup::getFirstPlanningStage(
                                                    budgetPlanHeader.BudgetPlanningProcess,
                                                    budgetPlanHeader.BudgetingOrganization).RecId;
        budgetPlanHeader.Layout              = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                                        budgetPlanHeader.BudgetPlanningProcess,
                                                                        budgetPlanHeader.BudgetingOrganization,
                                                                        budgetPlanHeader.BudgetPlanningStage).Layout;
        budgetPlanHeader.InUseBy             = BudgetPlanningConstants::emptyString;
        budgetPlanHeader.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkflowChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates budget plans for all budget organizations in the hierarchy.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the parent <c>BudgetPlanHeader</c> record to create child budget plans.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static void createWorkflowChildren(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanWorkflowHelper, createWorkflowChildren),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }

        ttsbegin;

        if (BudgetPlan::checkBudgetPlanNumberSequence())
        {
            NumberSeq                           numSeq;
            boolean                             foundChildPlan;
            OMHierarchyRelationship             hierarchyRelationship;
            OMOperatingUnit                     operatingUnit;
            BudgetPlanHeader                    budgetPlanHeaderChild;
            BudgetPlanningProcess               budgetPlanningProcess;
            BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;
            Set                                 childBudgetPlanRecIdSet;
            SetEnumerator                       childBudgetPlanSetEnumerator;

            BudgetPlanHeader    budgetPlanHeaderParent  = BudgetPlanHeader::find(_budgetPlanHeaderRecId);
            RefRecId            numberSequenceID        = BudgetPlan::getBudgetPlanIdBasedOnProcessLedger(budgetPlanHeaderParent.BudgetPlanningProcess);
            UserConnection      userConnection          = new UserConnection();

            try
            {
                budgetPlanHeaderChild.setConnection(userConnection);

                // Get all the child orgs of the current parent org
                // The child orgs being selected should also be part of the budget planning administration
                utcdatetime now = DateTimeUtil::utcNow();
                while select validTimeState(now) ChildOrganization from hierarchyRelationship
                    where hierarchyRelationship.ParentOrganization == budgetPlanHeaderParent.BudgetingOrganization
                    exists join budgetPlanningProcess
                        where budgetPlanningProcess.RecId                      == budgetPlanHeaderParent.BudgetPlanningProcess
                            && budgetPlanningProcess.OrganizationHierarchyType == hierarchyRelationship.HierarchyType
                    exists join budgetPlanningProcessAdministration
                        where budgetPlanningProcessAdministration.BudgetPlanningProcess  == budgetPlanHeaderParent.BudgetPlanningProcess
                            && budgetPlanningProcessAdministration.BudgetingOrganization == hierarchyRelationship.ChildOrganization
                {
                    foundChildPlan = false;

                    childBudgetPlanRecIdSet = new Set(typeName2Type(extendedTypeStr(BudgetPlanHeaderRecId)));

                    userConnection.ttsbegin();

                    // Get the existing child budget plans
                    while select forupdate * from budgetPlanHeaderChild
                        where budgetPlanHeaderChild.BudgetingOrganization   == hierarchyRelationship.ChildOrganization
                            && budgetPlanHeaderChild.ParentBudgetPlanHeader == budgetPlanHeaderParent.RecId
                    {
                        foundChildPlan = true;

                        budgetPlanHeaderChild.WorkflowStatus = BudgetPlanWorkflowStatus::NotSubmitted;
                        budgetPlanHeaderChild.DocumentStatus = BudgetPlanStatus::Draft;
                        budgetPlanHeaderChild.update();

                        childBudgetPlanRecIdSet.add(budgetPlanHeaderChild.RecId);
                    }

                    // Create the child budget plan if one doesn't exist for the child org
                    if (!foundChildPlan)
                    {
                        operatingUnit   = OMOperatingUnit::find(hierarchyRelationship.ChildOrganization, OMOperatingUnitType::OMAnyOU);
                        numSeq          = NumberSeq::newGetNumFromId(numberSequenceID);

                        budgetPlanHeaderChild.clear();
                        budgetPlanHeaderChild.data(budgetPlanHeaderParent);
                        budgetPlanHeaderChild.BudgetingOrganization  = hierarchyRelationship.ChildOrganization;
                        budgetPlanHeaderChild.BudgetPlanningStage    = BudgetPlanningWorkflowSetup::getFirstPlanningStage(budgetPlanHeaderChild.BudgetPlanningProcess, budgetPlanHeaderChild.BudgetingOrganization).RecId;
                        budgetPlanHeaderChild.DocumentNumber         = numSeq.num();
                        budgetPlanHeaderChild.DocumentStatus         = BudgetPlanStatus::Draft;
                        budgetPlanHeaderChild.Name                   = strFmt("@GLS70671", operatingUnit.Name);
                        budgetPlanHeaderChild.ParentBudgetPlanHeader = budgetPlanHeaderParent.RecId;
                        budgetPlanHeaderChild.WorkflowStatus         = BudgetPlanWorkflowStatus::NotSubmitted;
                        budgetPlanHeaderChild.Layout                 = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                                            budgetPlanHeaderChild.BudgetPlanningProcess,
                                                                            budgetPlanHeaderChild.BudgetingOrganization,
                                                                            budgetPlanHeaderChild.BudgetPlanningStage).Layout;
                        budgetPlanHeaderChild.InUseBy                = BudgetPlanningConstants::emptyString;

                        if (operatingUnit.HcmWorker)
                        {
                            // Set the budget plan preparer to the manager of the internal organization.
                            budgetPlanHeaderChild.BudgetPlanPreparer = operatingUnit.HcmWorker;
                        }
                        else
                        {
                            // Set to the current plan preparer.
                            budgetPlanHeaderChild.BudgetPlanPreparer = budgetPlanHeaderParent.BudgetPlanPreparer;
                        }

                        budgetPlanHeaderChild.insert();

                        childBudgetPlanRecIdSet.add(budgetPlanHeaderChild.RecId);
                    }

                    userConnection.ttscommit();

                    // Get all the children budget plans and start workflow for each plan
                    childBudgetPlanSetEnumerator = childBudgetPlanRecIdSet.getEnumerator();

                    while (childBudgetPlanSetEnumerator.moveNext())
                    {
                        BudgetPlanWorkflowHelper::startChildWorkflow(childBudgetPlanSetEnumerator.current());
                    }
                }
            }
            finally
            {
                userConnection.finalize();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowVersionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WorkflowVersionTable</c> record associated to the <c>BudgetPlanningWorkflow</c> record.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// The <c>WorkflowVersionTable</c> record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static WorkflowVersionTable getWorkflowVersionTable(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanWorkflowHelper, getWorkflowVersionTable),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }

        WorkflowVersionTable    workflowVersionTable;
        BudgetPlanHeader        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId);

        if (budgetPlanHeader)
        {
            BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;
            BudgetPlanningWorkflow              budgetPlanningWorkflow;

            select firstonly BudgetPlanningWorkflow from budgetPlanningProcessAdministration
                where budgetPlanningProcessAdministration.BudgetPlanningProcess == budgetPlanHeader.BudgetPlanningProcess
                    && budgetPlanningProcessAdministration.BudgetingOrganization == budgetPlanHeader.BudgetingOrganization
                join firstonly Workflow from budgetPlanningWorkflow
                    where budgetPlanningWorkflow.RecId == budgetPlanningProcessAdministration.BudgetPlanningWorkflow;

            if (budgetPlanningWorkflow)
            {
                workflowVersionTable = WorkflowVersionTable::findSequenceNumber(budgetPlanningWorkflow.Workflow);
            }
        }

        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowWorkItemForCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the pending <c>WorkflowWorkItemTable</c> record for the current <c>BudgetPlanHeader</c> record
    /// and current user.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// The <c>WorkflowWorkItemTable</c> record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static WorkflowWorkItemTable getWorkflowWorkItemForCurrentUser(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanWorkflowHelper, getWorkflowWorkItemForCurrentUser),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }

        WorkflowWorkItemTable   workflowWorkItemTable;
        BudgetPlanHeader        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId);

        if (budgetPlanHeader)
        {
            select firstonly workflowWorkItemTable
                where workflowWorkItemTable.RefTableId == budgetPlanHeader.TableId
                    && workflowWorkItemTable.RefRecId == budgetPlanHeader.RecId
                    && workflowWorkItemTable.UserId == curUserId()
                    && workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending;
        }

        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowUsersForBudgetPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the users assigned to the <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// List of assigned user with pending status.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static Set getWorkflowUsersForBudgetPlan(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        return BudgetWorkflowHelper::getAssignedUsersForPendingWorkItems(tablenum(BudgetPlanHeader), _budgetPlanHeaderRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the workflow status for the budget plan header.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record for which to set the workflow status.
    /// </param>
    /// <param name="_workflowStatus">
    /// The workflow status to set.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static void setWorkflowStatus(
        BudgetPlanHeaderRecId       _budgetPlanHeaderRecId,
        BudgetPlanWorkflowStatus    _workflowStatus)
    {
        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanWorkflowHelper, setWorkflowStatus),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }

        ttsbegin;

        BudgetPlanHeader budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId, true);

        if (budgetPlanHeader
            && budgetPlanHeader.WorkflowStatus != _workflowStatus
            && budgetPlanHeader.DocumentStatus == BudgetPlanStatus::Draft)
        {
            budgetPlanHeader.WorkflowStatus = _workflowStatus;
            budgetPlanHeader.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startChildWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the workflow for the child budget plan document.
    /// </summary>
    /// <param name="_childbudgetPlanHeaderRecId">
    /// The record ID of the child <c>BudgetPlanHeader</c> record to start workflow.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static void startChildWorkflow(BudgetPlanHeaderRecId _childbudgetPlanHeaderRecId)
    {
        if (!_childbudgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanWorkflowHelper, startChildWorkflow),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }

        BudgetPlanHeader childBudgetPlanHeader = BudgetPlanHeader::find(_childbudgetPlanHeaderRecId, true);
        BudgetPlanHeader parentBudgetPlanHeader = BudgetPlanHeader::find(childBudgetPlanHeader.ParentBudgetPlanHeader);

        WorkflowTrackingStatusTable workflowTrackingStatusTable;
        SysWorkflowTable sysWorkflowTable;

        select firstonly Originator from sysWorkflowTable
            exists join workflowTrackingStatusTable
            where sysWorkflowTable.InstanceNumber == workflowTrackingStatusTable.InstanceNumber
                && workflowTrackingStatusTable.ContextTableId == parentBudgetPlanHeader.TableId
                && workflowTrackingStatusTable.ContextRecId == parentBudgetPlanHeader.RecId;

        try
        {
            if (BudgetChildBudgetPlanOriginatorFlight::instance().isEnabled())
            {
                Workflow::activateFromWorkflowConfigurationId(
                    BudgetPlanWorkflowHelper::getWorkflowVersionTable(childBudgetPlanHeader.RecId).ConfigurationId,
                    childBudgetPlanHeader.RecId,
                    "@GLS70558",
                    NoYes::No,
                    sysWorkflowTable.Originator == '' ? curUserId() : sysWorkflowTable.Originator);
            }
            else
            {
                Workflow::activateFromWorkflowConfigurationId(
                    BudgetPlanWorkflowHelper::getWorkflowVersionTable(childBudgetPlanHeader.RecId).ConfigurationId,
                    childBudgetPlanHeader.RecId,
                    "@GLS70558",
                    NoYes::No);
            }

            BudgetPlanWorkflowHelper::startWorkflow(childBudgetPlanHeader.RecId);
        }
        catch(Exception::Error)
        {
            // Workflow error delete the child budget plan
            childBudgetPlanHeader.delete();

            throw error(strFmt("@GLS70673", childBudgetPlanHeader.DocumentNumber));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the workflow for the budget plan document.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record to start workflow.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static void startWorkflow(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanWorkflowHelper, startWorkflow),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }

        BudgetPlanHeader budgetPlanHeader;

        ttsbegin;

        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId, true);
        budgetPlanHeader.WorkflowStatus      = BudgetPlanWorkflowStatus::InReview;
        budgetPlanHeader.DocumentStatus      = BudgetPlanStatus::Draft;
        budgetPlanHeader.BudgetPlanningStage = BudgetPlanningWorkflowSetup::getFirstPlanningStage(
                                                    budgetPlanHeader.BudgetPlanningProcess,
                                                    budgetPlanHeader.BudgetingOrganization).RecId;
        budgetPlanHeader.InUseBy             = BudgetPlanningConstants::emptyString;
        budgetPlanHeader.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rejectWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the workflow status to rejected for the budget plan.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record for which to set the workflow status.
    /// </param>
    /// <param name="_workflowCorrelationId">
    /// The correlation ID of the workflow instance to reject.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static void rejectWorkflow(
        BudgetPlanHeaderRecId _budgetPlanHeaderRecId,
        WorkflowCorrelationId _workflowCorrelationId)
    {
        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanWorkflowHelper, rejectWorkflow),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }

        BudgetPlanHeader    budgetPlanHeader;
        boolean             doCancelWorkflow;

        ttsbegin;

        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId, true);
        budgetPlanHeader.InUseBy    = BudgetPlanningConstants::emptyString;

        if (budgetPlanHeader.WorkflowStatus != BudgetPlanWorkflowStatus::NotSubmitted
            && budgetPlanHeader.WorkflowStatus != BudgetPlanWorkflowStatus::Rejected
            && budgetPlanHeader.WorkflowStatus != BudgetPlanWorkflowStatus::PendingRejection)
        {
            // Update the budget plan to notify it is in the process of being rejected.
            budgetPlanHeader.WorkflowStatus = BudgetPlanWorkflowStatus::PendingRejection;

            doCancelWorkflow = true;
        }

        budgetPlanHeader.update();

        ttscommit;

        if (doCancelWorkflow)
        {
            WorkflowTrackingTable           trackingTable;
            WorkflowTrackingCommentTable    trackingCommentTable;

            // Need to retrieve the "Reject" comment and propagate that to the Cancel
            trackingTable = Workflow::findLastWorkflowTrackingRecord(_workflowCorrelationId);
            if (trackingTable)
            {
                trackingCommentTable = WorkflowTrackingCommentTable::findTrackingRecId(trackingTable.RecId);
            }

            // Upon successful cancelation of the workflow document the budget plan will be set to a Rejected status.
            Workflow::cancelWorkflow(_workflowCorrelationId, trackingCommentTable.Comment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkflowTableSequenceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>WorkflowTableSequenceNumber</c> field is valid.
    /// </summary>
    /// <param name="_workflowSequenceNumber">
    /// A workflow sequence number.
    /// </param>
    /// <returns>
    /// true if the <c>WorkflowTableSequenceNumber</c> field is valid; otherwise, false.
    /// </returns>
    public static boolean validateWorkflowTableSequenceNumber(WorkflowSequenceNumber _workflowSequenceNumber)
    {
        boolean                 isValid = true;
        WorkflowVersionTable    workflowVersionTable;

        workflowVersionTable = WorkflowVersionTable::findSequenceNumber(_workflowSequenceNumber);

        if (!workflowVersionTable
            || !workflowVersionTable.Enabled
            || workflowVersionTable.workflowTable().TemplateName != workFlowTypeStr(BudgetPlanReview))
        {
            // Workflow version is not the active version.
            isValid = checkFailed(strFmt("@SYS323409", _workflowSequenceNumber));
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>