<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportExcel_SPV1_2011</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportExcel_SPV1_2011 extends RPayPFReportExcel_SZV61_2011
{
    #define.ReportTitle("@RUP3083")
    #RPayPFReportSeniority
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmpl</Name>
				<Source><![CDATA[
    protected boolean checkEmpl(RHRMEmplTable   _emplTable,
                                boolean         _displayMessage = true,
                                str 20          _personCategory = '',
                                str 20          _formType       = '')
    {
        boolean ret = true;

        ret = this.checkEmplIsInsured(_emplTable, _displayMessage) && ret;

        if (ret)
        {
            ret = this.checkMainInsuredPersonCat(_emplTable, _displayMessage) && ret;
            ret = this.checkEmplPFNumber(_emplTable, _displayMessage) && ret;
            ret = this.checkEmplPersonalInfo(_emplTable, _displayMessage, false, true) && ret;

            if (! _emplTable.personTable().PensionAssignDate)
            {
                ret = _displayMessage ? checkFailed(strFmt("@RUP3066", _emplTable.EmployeeId, _emplTable.Name())) : false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    protected void fillHeader(int           _workSheetNum,
                              str 20        _personCategory,
                              RHRMEmplTable _emplTable)
    {
        RNumDateInWordConverter converter = new RNumDateInWordConverter(companyInfo::languageId());
        excelDocument.insertValue('DI3',    CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo),                                 _workSheetNum);
        excelDocument.insertValue('AO7',    companyInfo.PFRegNum_RU,                                            _workSheetNum);
        excelDocument.insertValue('AD8',    companyInfo.Name,                                                   _workSheetNum);
        excelDocument.insertValue('H9',     CompanyInfoHelper::partyINN_RU(companyInfo),                                          _workSheetNum);
        excelDocument.insertValue('AU9',    CompanyInfoHelper::partyKPP_RU(companyInfo),                                          _workSheetNum);
        excelDocument.insertValue('AU10',   _personCategory,                                                    _workSheetNum);
        excelDocument.insertValue('AA11',   dayOfMth(_emplTable.personTable().PensionAssignDate),               _workSheetNum);
        excelDocument.insertValue('AI11',   converter.date2strMonth(_emplTable.personTable().PensionAssignDate),_workSheetNum);
        excelDocument.insertValue('BC11',   year(_emplTable.personTable().PensionAssignDate),                   _workSheetNum);

        if (reportYear > #ReportYear2010)
        {
            if (this.periodType() == enumnum(RPayReportSocialTaxPeriod))
            {
                switch (taxPeriod)
                {
                    case RPayReportSocialTaxPeriod::Quarter :
                        excelDocument.insertValue('N15', #CheckSign, _workSheetNum);
                        break;
                    case RPayReportSocialTaxPeriod::HalfYear :
                        excelDocument.insertValue('AI15', #CheckSign, _workSheetNum);
                        break;
                    case RPayReportSocialTaxPeriod::NineMonth :
                        excelDocument.insertValue('BB15', #CheckSign, _workSheetNum);
                        break;
                    case RPayReportSocialTaxPeriod::Year :
                        excelDocument.insertValue('BM15', #CheckSign, _workSheetNum);
                        break;
                }
            }
            else if (this.periodType() == enumnum(RPayPFReportPeriod))
            {
                switch (taxPeriodByQtr)
                {
                    case RPayPFReportPeriod::Quarter1 :
                        excelDocument.insertValue('N15', #CheckSign, _workSheetNum);
                        break;
                    case RPayPFReportPeriod::Quarter2 :
                        excelDocument.insertValue('AI15', #CheckSign, _workSheetNum);
                        break;
                    case RPayPFReportPeriod::Quarter3 :
                        excelDocument.insertValue('BB15', #CheckSign, _workSheetNum);
                        break;
                    case RPayPFReportPeriod::Quarter4 :
                        excelDocument.insertValue('BM15', #CheckSign, _workSheetNum);
                        break;
                }
            }
            excelDocument.insertValue('X16', reportYear, _workSheetNum);
        }
        else
        {
            if (taxPeriod2010 == RPayReportPensionPeriod2010::HalfYear)
            {
                excelDocument.insertValue('AW17', #CheckSign, _workSheetNum);
            }
            else
            {
                excelDocument.insertValue('BH17', #CheckSign, _workSheetNum);
            }
        }

        switch (reportType)
        {
            case RpayPensionFundExportKindOfCorrection::Cancellative:
                 excelDocument.insertValue('DA11', #CheckSign, _workSheetNum);
                break;

            case RpayPensionFundExportKindOfCorrection::None:
                excelDocument.insertValue('DA7', #CheckSign, _workSheetNum);
                break;

            case RpayPensionFundExportKindOfCorrection::Correctional:
                excelDocument.insertValue('DA9', #CheckSign, _workSheetNum);
                break;
        }

        excelDocument.insertValue('B22',    _emplTable.payPFRINN(), _workSheetNum);
        excelDocument.insertValue('Q22',    _emplTable.Name(),      _workSheetNum);

        excelDocument.insertValue('B40',    OfficialsTable_RU::findDirector().Title,    _workSheetNum);
        excelDocument.insertValue('CL40',   OfficialsTable_RU::nameDirector(),          _workSheetNum);

        excelDocument.insertValue('I42',    DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), _workSheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSeniorityPeriods</Name>
				<Source><![CDATA[
    protected void fillSeniorityPeriods(int             _workSheetNum,
                                        str 20          _personCategory,
                                        RHRMEmplTable   _emplTable,
                                        int             _rowStart       = 26,
                                        int             _rowMax         = 38)
    {
        container                       seniorityPeriods;
        StartDate                       seniorityDateFrom;
        EndDate                         seniorityDateTo;
        RPayInsuranceSeniorityTypeId    insuranceTypeId;
        Months                          senMonths;
        Days                            senDays;
        RHRMSpecCond                    specCondition;
        RHRMPositionList                positionList;

        int                             curRow, curRowNum = 1;

        seniorityCommand.parmValue([#SeniorityKey]);
        seniorityIterator = seniorityCommand.iterator();

        curRow = _rowStart;

        while (seniorityIterator.more())
        {
            seniorityPeriods = seniorityIterator.value();
            [#SeniorityValue] = seniorityPeriods;

            excelDocument.insertValue('B'  + int2str(curRow), curRowNum, _workSheetNum);
            excelDocument.insertValue('I'  + int2str(curRow), date2str(seniorityDateFrom, 123, 2, 2, 2, 2, 4, DateFlags::None), _workSheetNum);
            excelDocument.insertValue('Y'  + int2str(curRow), date2str(seniorityDateTo, 123, 2, 2, 2, 2, 4, DateFlags::None), _workSheetNum);
            excelDocument.insertValue('BB' + int2str(curRow), specCondition, _workSheetNum);
            excelDocument.insertValue('CI' + int2str(curRow), insuranceTypeId, _workSheetNum);

            if (positionList)
            {
                curRow++;

                if (curRow > _rowMax)
                {
                    break;
                }

                excelDocument.insertValue('BB' + int2str(curRow), positionList, _workSheetNum);
            }

            curRow++;
            curRowNum++;

            if (curRow > _rowMax)
            {
                break;
            }

            seniorityIterator.moveNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundAmountCells</Name>
				<Source><![CDATA[
    protected container fundAmountCells()
    {
        return ['AR22', 'BP22', 'CM22', 'DK22'];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmployeesData</Name>
				<Source><![CDATA[
    protected void initEmployeesData()
    {
        parmContract = new RPayPFReportParmContract();
        parmContract.reportStartPeriod(reportStartPeriod);
        parmContract.reportEndPeriod(reportEndPeriod);
        parmContract.corrReportStartPeriod(corrReportStartPeriod);
        parmContract.corrReportEndPeriod(corrReportEndPeriod);
        parmContract.seniorityEndPeriod(seniorityEndPeriod);
        parmContract.seniorityStartPeriod(seniorityStartPeriod);
        parmContract.queryRun(queryRun.pack());

        reportData = RPayPFReportCtrl::construct(this);
        reportData.prepareData();
        totalFundCommand = new RPayReportCommandSZV6(reportData.reportData(), [#FundAmountDS]);
        seniorityCommand = new RPayReportCommandSZV6(reportData.reportData(), [#SeniorityDS]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCorrectedPeriod</Name>
				<Source><![CDATA[
    protected boolean needCorrectedPeriod()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportData</Name>
				<Source><![CDATA[
    public RPayPFReportCtrl reportData()
    {
        return new RPayPFReportCtrlSPV1();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>