<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductDimensionsLookupController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductDimensionsLookupController</c> class is responsible for
/// exposing the set of form controls that allow selection of multiple product dimensions
/// as a single logical unit.
/// </summary>
/// <remarks>
/// The product dimension lookup can look differently depending on the number of product dimensions
/// enabled for the item.
/// If no product dimensions are enabled then the control is not visible.
/// When one product dimension is enabled then a single check is added to the form which allows
/// to selected or unselected the enabled dimension.
/// When more than one product dimension is enabled then a string lookup control is added to the form
/// where the drop down allows to select multiple dimensions.
/// </remarks>
class EcoResProductDimensionsLookupController
{
    FormRun             formRun;
    boolean             isSingleDimensionEnabled;

    ItemId              itemId;

    FormGroupControl    parentGroupControl;
    FormStringControl   productDimensionsLookupControl;
    FormCheckBoxControl singleProductDimensionCheckBox;

    str                 label;

    boolean             isInitialized;

    List                activeProductDimFieldIds;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromParentGroupControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EcoResProductDimensionsLookupController</c>.
    /// </summary>
    /// <param name = "_parentGroupControl">The form group control withtin which the dimension lookup controls will be created.</param>
    /// <returns>A new instance of the <c>EcoResProductDimensionsLookupController</c>.</returns>
    public static EcoResProductDimensionsLookupController newFromParentGroupControl(FormGroupControl _parentGroupControl)
    {
        var controller = EcoResProductDimensionsLookupController::construct();
        controller.setParentGroupControl(_parentGroupControl);
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static EcoResProductDimensionsLookupController construct()
    {
        return new EcoResProductDimensionsLookupController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParentGroupControl</Name>
				<Source><![CDATA[
    private void setParentGroupControl(FormGroupControl _parentGroupControl)
    {
        parentGroupControl = _parentGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the label for the lookup control.
    /// </summary>
    /// <param name = "_label">The label for the lookup control.</param>
    public void setLabel(str _label)
    {
        label = _label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        if (!isInitialized)
        {
            productDimensionsLookupControl = parentGroupControl.addControl(FormControlType::String, parentGroupControl.name() + "Multi");

            productDimensionsLookupControl.label(label);

            productDimensionsLookupControl.registerOverrideMethod(
                methodStr(FormStringControl, lookup),
                methodStr(EcoResProductDimensionsLookupController, productDimensionsLookupControl_lookup),
                this);

            productDimensionsLookupControl.registerOverrideMethod(
                methodStr(FormStringControl, textChange),
                methodStr(EcoResProductDimensionsLookupController, productDimensionsLookupControl_textChange),
                this);

            productDimensionsLookupControl.registerOverrideMethod(
                methodStr(FormStringControl, modified),
                methodStr(EcoResProductDimensionsLookupController, productDimensionsLookupControl_modified),
                this);

            singleProductDimensionCheckBox = parentGroupControl.addControl(FormControlType::CheckBox, parentGroupControl.name() + "Single");
            singleProductDimensionCheckBox.label(label);

            singleProductDimensionCheckBox.registerOverrideMethod(
                methodStr(FormCheckBoxControl, modified),
                methodStr(EcoResProductDimensionsLookupController, singleProductDimensionCheckBox_modified),
                this);

            isInitialized = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form controls based on the specified item.
    /// </summary>
    /// <param name = "_itemId">The ID of the item.</param>
    public void initForItemId(ItemId _itemId)
    {
        this.init();

        itemId = _itemId;

        activeProductDimFieldIds = InventDimGroupSetup::newItemIdProductDimensionsOnly(itemId).activeFields();
        int enabledDimensionsCount = activeProductDimFieldIds.elements();
        productDimensionsLookupControl.visible(enabledDimensionsCount > 1);
        singleProductDimensionCheckBox.visible(enabledDimensionsCount == 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedProductDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the set of dimensions selected by the user on the lookup form.
    /// </summary>
    /// <returns>The set of dimensions selected by the user on the lookup form.</returns>
    public InventDimParm selectedProductDimParm()
    {
        InventDimParm selectedProductDimParm;

        if (productDimensionsLookupControl.visible())
        {
            selectedProductDimParm = this.controlTextToProductDimParm(productDimensionsLookupControl.text());
        }

        if (singleProductDimensionCheckBox.visible())
        {
            selectedProductDimParm.(this.singleActiveProductDimFieldId()) = singleProductDimensionCheckBox.value();
        }

        return selectedProductDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>singleActiveProductDimFieldId</Name>
				<Source><![CDATA[
    private FieldId singleActiveProductDimFieldId()
    {
        ListEnumerator enumerator = activeProductDimFieldIds.getEnumerator();
        enumerator.moveNext();
        return InventDim::dim2dimParm(enumerator.current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event that is fired whenever the user modifies the set of the selected dimensions.
    /// </summary>
    delegate void modified() { }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionsLookupControl_modified</Name>
				<Source><![CDATA[
    private boolean productDimensionsLookupControl_modified(FormStringControl _productDimensionsLookupControl)
    {
        this.modified();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>singleProductDimensionCheckBox_modified</Name>
				<Source><![CDATA[
    private boolean singleProductDimensionCheckBox_modified(FormCheckBoxControl _singleProductDimensionCheckBox)
    {
        this.modified();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionsLookupControl_lookup</Name>
				<Source><![CDATA[
    private void productDimensionsLookupControl_lookup(FormStringControl _productDimensionsLookupControl)
    {
        Args args = new Args();

        args.name(formStr(EcoResProductDimensionsMultiSelectLookup));
        args.caller(_productDimensionsLookupControl);

        formRun = classfactory.formRunClass(args);
        formRun.init();

        var productDimSelectControl = formRun as EcoResIProductDimensionsMultiSelectLookupForm;

        productDimSelectControl.initForItemId(itemId);

        InventDimParm selectedProductDimParm = this.controlTextToProductDimParm(_productDimensionsLookupControl.text());
        productDimSelectControl.initSelectionFromProductDimParm(selectedProductDimParm);

        _productDimensionsLookupControl.performFormLookup(formRun);
        formRun.wait();

        if (formRun.closedOk())
        {
            _productDimensionsLookupControl.text(this.convertProductDimParmToControlText(productDimSelectControl.selectedProductDimParm()));
            this.modified();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionsLookupControl_textChange</Name>
				<Source><![CDATA[
    private void productDimensionsLookupControl_textChange(FormStringControl _productDimensionsLookupControl)
    {
        if (formRun)
        {
            var productDimSelectControl = formRun as EcoResIProductDimensionsMultiSelectLookupForm;
            InventDimParm selectedProductDimParm = this.controlTextToProductDimParm(_productDimensionsLookupControl.text());
            productDimSelectControl.initSelectionFromProductDimParm(selectedProductDimParm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertProductDimParmToControlText</Name>
				<Source><![CDATA[
    private str convertProductDimParmToControlText(InventDimParm _productDimParm)
    {
        ListEnumerator enumerator = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();
        str separator;
        str result;

        while (enumerator.moveNext())
        {
            FieldId dimParmFieldId = InventDim::dim2dimParm(enumerator.current());

            if (_productDimParm.(dimParmFieldId))
            {
                result += separator + fieldId2PName(tableNum(InventDim), enumerator.current());
                separator = ', ';
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlTextToProductDimParm</Name>
				<Source><![CDATA[
    private InventDimParm controlTextToProductDimParm(str _selectedProductDimensionsControlText)
    {
        InventDimParm selectedProductDimParm;
        List selectedProductDimStrList = strSplit(_selectedProductDimensionsControlText, ',');
        ListEnumerator labelEnumerator = selectedProductDimStrList.getEnumerator();

        while (labelEnumerator.moveNext())
        {
            ListEnumerator dimFieldIdEnumerator = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();

            while (dimFieldIdEnumerator.moveNext())
            {
                if (strLRTrim(labelEnumerator.current()) == fieldId2PName(tableNum(InventDim), dimFieldIdEnumerator.current()))
                {
                    FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldIdEnumerator.current());
                    selectedProductDimParm.(dimParmFieldId) = true;
                }
            }
        }

        return selectedProductDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSingleProductDimensionCheckBox</Name>
				<Source><![CDATA[
    public FormCheckBoxControl getSingleProductDimensionCheckBox()
    {
        return singleProductDimensionCheckBox;
	}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>