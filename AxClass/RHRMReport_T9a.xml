<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RHRMReport_T9a</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RHRMReport_T9a extends RHRMReport implements BatchRetryable
{
    RHRMOrderTable           orderTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>animationBoxCaption</Name>
				<Source><![CDATA[
    public str animationBoxCaption()
    {
        return "@RUP1752";
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxText</Name>
				<Source><![CDATA[
    public str animationBoxText()
    {
        return "@RUP1626";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    public void initData(Args _args)
    {
        super(_args);
        orderTable = _args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RHRMOrderTrans orderTrans;
        int            countPass = 0;
        RPayHistory    payHistory;
        str            reason;

        void fillOrder()
        {
            wordDocument.insertFieldValue(#Organization,     CompanyInfo::find().Name);
            wordDocument.insertFieldValue(#Code_OKPO,        CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), orderTable.TransDate));
            wordDocument.insertFieldValue(#OrderNum,         orderTable.OrderNum);
            wordDocument.insertFieldValue(#OrderDate,        date2str(orderTable.TransDate,123,2,2,2,2,4, DateFlags::None));

            wordDocument.insertFieldValue(#tripDestination,  this.delimiter(this.delimiter(LogisticsAddressCountryRegionTranslation::find(LogisticsPostalAddress::findByLocation(orderTable.TripLocation).CountryRegionId).LongName,
                                                                                           LogisticsAddressState::find(LogisticsPostalAddress::findByLocation(orderTable.TripLocation).CountryRegionId, LogisticsPostalAddress::findByLocation(orderTable.TripLocation).State).Name),
                                                                                           LogisticsPostalAddress::findByLocation(orderTable.TripLocation).City));
            wordDocument.insertFieldValue(#organizationTrip, orderTable.TripOrganization);

            wordDocument.insertFieldValue(#orderReason,      orderTable.Reason);

            wordDocument.insertFieldValue(#OTR_title,        OfficialsTable_RU::findDirector().Title);
            wordDocument.insertFieldValue(#OTR_name,         OfficialsTable_RU::findDirector().Name);

            wordDocument.insertFieldValue(#reason,           reason);
        }

        while select orderTrans
            where orderTrans.OrderTableRecId == orderTable.RecId
        {
            if (countPass == #Value3)
            {
                fillOrder();

                countPass = 0;
                reason = "";
                wordDocument.unlinkFields();
                wordDocument.setEndDoc();
                wordDocument.insertPageBreak();
                wordDocument.insertDocFile(templateFile);
            }

            if (orderTrans.docArgCode())
            {
                if (reason)
                {
                    reason += "@GLS116882" + strltrim(strfmt("@GLS103885", "", orderTrans.AttachDocNum, orderTrans.AttachDocDate));
                }
                else
                {
                    reason = strfmt("@GLS103885", "@RUP2206", orderTrans.AttachDocNum, orderTrans.AttachDocDate);
                }
            }

            wordDocument.insertFieldValue(#Name_ + int2str(countPass + 1),         RHRMEmplTable::emplId2Name(orderTrans.EmplId));
            wordDocument.insertFieldValue(#Number_ + int2str(countPass + 1),       orderTrans.EmplId);

            payHistory = RPayHistory::findLastSignOnMove(orderTrans.EmplId, orderTrans.StartDate, orderTrans.RecId);

            wordDocument.insertFieldValue(#EmplOrganization_ + int2str(countPass + 1),  RPayHRMOrganization::find(payHistory.HrmOrganizationId).Description);
            wordDocument.insertFieldValue(#Title_ + int2str(countPass + 1),             payHistory.titleId());

            wordDocument.insertFieldValue(#StartDate_ + int2str(countPass + 1),    date2str(orderTrans.StartDate, 123, 2, 2, 2, 2, 4, DateFlags::None));
            wordDocument.insertFieldValue(#EndDate_ + int2str(countPass + 1),      date2str(orderTrans.EndDate, 123, 2, 2, 2, 2, 4, DateFlags::None));

            wordDocument.insertFieldValue(#dayNumberT9a + int2str(countPass + 1),  int2str(orderTrans.EndDate - orderTrans.StartDate + 1));
            wordDocument.insertFieldValue(#Object_ + int2str(countPass + 1),       orderTrans.TripObject);
            wordDocument.insertFieldValue(#AtCost + int2str(countPass + 1),        orderTrans.TripAtCost);

            countPass++;
        }
        fillOrder();

        wordDocument.unlinkFields();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>