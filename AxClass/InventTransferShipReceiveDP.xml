<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferShipReceiveDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransferShipReceiveDP</c> class is a report data provider <c>InventTransferShipReceiveDP</c> class
/// for <c>InventTransferReceive</c> and <c>InventTransferShip</c> reports.
/// </summary>
[
    SRSReportQuery(queryStr(InventTransfer)),
    SRSReportParameterAttribute(classStr(InventTransferShipReceiveContract))
]
public class InventTransferShipReceiveDP extends InventTransferOrderDPBase
{
    protected TmpInventTransfer tmpInventTransfer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpInventTransfer</Name>
				<Source><![CDATA[
    [
        SRSReportDataSet(tableStr(TmpInventTransfer))
    ]
    public TmpInventTransfer getTmpInventTransfer()
    {
        return tmpInventTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// </summary>
    /// <param name = "_inventTransferJour">
    /// The table buffer of the <c>InventTransferJour</c>.
    /// </param>
    /// <param name = "_inventTransferJourLine">
    /// The table buffer of the <c>InventTransferJourLine</c>.
    /// </param>
    /// <param name = "_inventDim">
    /// The table buffer of the <c>InventDim</c>.
    /// </param>
    /// <param name = "_companyinfo">
    /// The table buffer of the <c>CompanyInfo</c>.
    /// </param>
    /// <param name = "_inventTransferTable">
    /// The table buffer of the <c>InventTransferTable</c>.
    /// </param>
    /// <param name = "_inventTransferLine">
    /// The table buffer of the <c>InventTransferLine</c>.
    /// </param>
    protected void createData(
        InventTransferJour _inventTransferJour,
        InventTransferJourLine _inventTransferJourLine,
        InventDim _inventDim,
        CompanyInfo _companyinfo,
        InventTransferTable _inventTransferTable,
        InventTransferLine _inventTransferLine)
    {
        showLine = true;

        if (_inventTransferJour)
        {
            this.processRegistrationNumber(_inventTransferTable.RecId, _inventTransferJour);
        }

        this.insertTaxes(_inventTransferJour, _inventTransferJourLine, _inventDim, _companyinfo, _inventTransferTable, _inventTransferLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice taxes information.
    /// </summary>
    /// <param name = "_inventTransferJour">
    /// The table buffer of the <c>InventTransferJour</c>.
    /// </param>
    /// <param name = "_inventTransferJourLine">
    /// The table buffer of the <c>InventTransferJourLine</c>.
    /// </param>
    /// <param name = "_inventDim">
    /// The table buffer of the <c>InventDim</c>.
    /// </param>
    /// <param name = "_companyinfo">
    /// The table buffer of the <c>CompanyInfo</c>.
    /// </param>
    /// <param name = "_inventTransferTable">
    /// The table buffer of the <c>InventTransferTable</c>.
    /// </param>
    /// <param name = "_inventTransferLine">
    /// The table buffer of the <c>InventTransferLine</c>.
    /// </param>
    protected void insertTaxes(
        InventTransferJour _inventTransferJour,
        InventTransferJourLine _inventTransferJourLine,
        InventDim _inventDim,
        CompanyInfo _companyinfo,
        InventTransferTable _inventTransferTable,
        InventTransferLine _inventTransferLine)
    {
        isNewJournalLine = true;
        if (_inventTransferJourLine)
        {
            this.processTaxCodeSet(_inventTransferTable.RecId, _inventTransferJour.UpdateType);

            TaxTransferOrderJournalSpec taxSpec = new TaxTransferOrderJournalSpec(_inventTransferJourLine.TableId, _inventTransferJourLine.RecId);
            taxSpec.parmLanguageId(languageId);

            // It aims to generate data to table <c>TaxSpecTmp</c>.
            boolean existTaxTrans = taxSpec.parmTaxSpec(false);

            // Traverses the record in table <c>TaxSpecTmp</c>.
            while (taxSpec.parmTaxSpec(false))
            {
                this.processSingleTaxTransRecord(taxSpec, _inventTransferJour.UpdateType);
                this.insertTmpTable(_inventTransferJour, _inventTransferJourLine, _inventDim, _companyinfo, _inventTransferTable, _inventTransferLine);
            }

            if (!existTaxTrans)
            {
                this.insertTmpTable(_inventTransferJour, _inventTransferJourLine, _inventDim, _companyinfo, _inventTransferTable, _inventTransferLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    private void insertTmpTable(
        InventTransferJour _inventTransferJour,
        InventTransferJourLine _inventTransferJourLine,
        InventDim _inventDim,
        CompanyInfo _companyinfo,
        InventTransferTable _inventTransferTable,
        InventTransferLine _inventTransferLine)
    {
        this.initTmpInventTransfer(_inventTransferJour, _inventTransferJourLine, _inventDim, _companyinfo, _inventTransferTable, _inventTransferLine);
        tmpInventTransfer.insert();
        this.initLineAndTaxLineData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpInventTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TmpInventTransfer</c> record.
    /// </summary>
    /// <param name = "_inventTransferJour">
    /// The table buffer of the <c>InventTransferJour</c>.
    /// </param>
    /// <param name = "_inventTransferJourLine">
    /// The table buffer of the <c>InventTransferJourLine</c>.
    /// </param>
    /// <param name = "_inventDim">
    /// The table buffer of the <c>InventDim</c>.
    /// </param>
    /// <param name = "_companyinfo">
    /// The table buffer of the <c>CompanyInfo</c>.
    /// </param>
    /// <param name = "_inventTransferTable">
    /// The table buffer of the <c>InventTransferTable</c>.
    /// </param>
    /// <param name = "_inventTransferLine">
    /// The table buffer of the <c>InventTransferLine</c>.
    /// </param>
    protected void initTmpInventTransfer(
        InventTransferJour _inventTransferJour,
        InventTransferJourLine _inventTransferJourLine,
        InventDim _inventDim,
        CompanyInfo _companyinfo,
        InventTransferTable _inventTransferTable,
        InventTransferLine _inventTransferLine)
    {
        tmpInventTransfer.TransferId = _inventTransferJour.TransferId;
        tmpInventTransfer.TrackingId = _inventTransferJour.TrackingId;
        tmpInventTransfer.TransDate = _inventTransferJour.TransDate;
        tmpInventTransfer.InventLocationIdFrom = _inventTransferJour.InventLocationIdFrom;
        tmpInventTransfer.InventLocationIdTo = _inventTransferJour.InventLocationIdTo;
        tmpInventTransfer.TransferId = _inventTransferJour.TransferId;
        tmpInventTransfer.DlvModeId = _inventTransferJour.DlvModeId;
        tmpInventTransfer.DlvTermId = _inventTransferJour.DlvTermId;
        tmpInventTransfer.VoucherId = _inventTransferJour.VoucherId;
        tmpInventTransfer.FromAddressName = _inventTransferJour.FromAddressName;
        tmpInventTransfer.ToAddressName = _inventTransferJour.ToAddressName;

        tmpInventTransfer.ItemId = _inventTransferJourLine.ItemId;
        tmpInventTransfer.LineNum = _inventTransferJourLine.LineNum;
        tmpInventTransfer.QtyReceived = _inventTransferJourLine.QtyReceived;
        tmpInventTransfer.QtyShipped = _inventTransferJourLine.QtyShipped;
        tmpInventTransfer.QtyScrapped = _inventTransferJourLine.QtyScrapped;
        tmpInventTransfer.UnitId = _inventTransferJourLine.UnitId;
        tmpInventTransfer.ItemName = _inventTransferJourLine.itemName();

        tmpInventTransfer.Giro = _companyinfo.Giro;
        tmpInventTransfer.CoRegNum = _companyinfo.CoRegNum;
        tmpInventTransfer.Phone = _companyinfo.phone();
        tmpInventTransfer.TeleFax = _companyinfo.teleFax();

        tmpInventTransfer.ConfigId = _inventDim.configId;
        tmpInventTransfer.InventBatchId = _inventDim.inventBatchId;
        tmpInventTransfer.InventColorId = _inventDim.InventColorId;
        tmpInventTransfer.InventLocationId = _inventDim.InventLocationId;
        tmpInventTransfer.InventSerialId = _inventDim.inventSerialId;
        tmpInventTransfer.InventSiteId = _inventDim.InventSiteId;
        tmpInventTransfer.InventSizeId = _inventDim.InventSizeId;
        tmpInventTransfer.InventStyleId = _inventDim.InventStyleId;
        tmpInventTransfer.WMSLocationId = _inventDim.wMSLocationId;
        tmpInventTransfer.WMSPalletId = _inventDim.wMSPalletId;

        tmpInventTransfer.FromAddress = _inventTransferTable.fromAddress();
        tmpInventTransfer.ToAddress = _inventTransferTable.toAddress();
        tmpInventTransfer.UnitPrice = _inventTransferLine.UnitPrice;
        tmpInventTransfer.NetAmount = 
            _inventTransferJour.UpdateType == InventTransferUpdateType::Shipment ?
            tmpInventTransfer.QtyShipped * _inventTransferLine.UnitPrice :
            tmpInventTransfer.QtyReceived * _inventTransferLine.UnitPrice;
        tmpInventTransfer.FromCountryRegionId = LogisticsPostalAddress::findRecId(_inventTransferTable.FromPostalAddress).CountryRegionId;
        tmpInventTransfer.ToCountryRegionId = LogisticsPostalAddress::findRecId(_inventTransferTable.ToPostalAddress).CountryRegionId;
        tmpInventTransfer.FromRegistrationNumber = fromRegistrationNumber;
        tmpInventTransfer.ToRegistrationNumber = toRegistrationNumber;
        tmpInventTransfer.ShipmentNetAmount = shipmentTaxBaseAmount;
        tmpInventTransfer.ShipmentSumTax = shipmentTaxAmount;
        tmpInventTransfer.ShipmentCurrencyCode = shipmentCurrencyCode;
        tmpInventTransfer.ReceiptNetAmount = receiptTaxBaseAmount;
        tmpInventTransfer.ReceiptSumTax = receiptTaxAmount;
        tmpInventTransfer.ReceiptCurrencyCode = receiptCurrencyCode;
        tmpInventTransfer.PrintCode = taxWriteCode;
        tmpInventTransfer.TaxExemptDescription = exemptDescription;
        tmpInventTransfer.ShowLine = showLine;
        tmpInventTransfer.ShowTaxTrans = showTaxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        RecId currentHeaderRecId;
        Query query = this.parmQuery();
        QueryRun qr = new QueryRun(query);

        while (qr.next())
        {
            InventTransferJour inventTransferJour = qr.get(tableNum(InventTransferJour));
            InventTransferJourLine inventTransferJourLine = qr.get(tableNum(InventTransferJourLine));
            InventDim inventDim = qr.get(tableNum(InventDim));
            CompanyInfo companyInfo = qr.get(tableNum(Companyinfo));
            InventTransferTable inventTransferTable = InventTransferTable::find(inventTransferJour.TransferId);
            InventTransferLine inventTransferLine = inventTransferJourLine.inventTransferLine();

            if (inventTransferJour.RecId != currentHeaderRecId)
            {
                this.initHeaderData();
                currentHeaderRecId = inventTransferJour.RecId;
            }

            this.createData(
                inventTransferJour,
                inventTransferJourLine,
                inventDim,
                companyInfo,
                inventTransferTable,
                inventTransferLine);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>