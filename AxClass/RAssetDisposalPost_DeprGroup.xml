<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetDisposalPost_DeprGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetDisposalPost_DeprGroup extends RAssetInferiorDisposalPost implements BatchRetryable
{
    #define.v20000(20000)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCanClose</Name>
				<Source><![CDATA[
    protected boolean checkCanClose()
    {
        RAssetSumCalc               sumCalc;
        RAssetInferiorDisposalTrans disposalTrans;
        RAssetAmount                currentNetBook;
        RAssetStandardId            taxStandardId = RAssetParameters::standardTaxIdDefault();
        ;

        while (queryRun.next())
        {
            disposalTrans = queryRun.get(tablenum(RAssetInferiorDisposalTrans));
            sumCalc = RAssetSumCalc_Trans::newAssetPeriod(disposalTrans.AccountNum,
                                                          taxStandardId,
                                                          assetInferiorDisposalTable.TransDate);
            currentNetBook += sumCalc.netBookValue();
        }
        if (currentNetBook >= #v20000)
        {
            return checkFailed("@GLS117097");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTrans</Name>
				<Source><![CDATA[
    protected void createJournalTrans(RAssetInferiorDisposalTrans _assetInferiorDisposalTrans,
                                      LedgerJournalTable          _ledgerJournalTable)
    {
        RAssetProposal            rAssetProposal;
        RAssetTable               rAssetTable     = RAssetTable::find(_assetInferiorDisposalTrans.AccountNum, true);
        RAssetStandards           rAssetStandards;
        ;

        rAssetProposal = RAssetProposal::construct(RAssetTransType::Disposal);

        while select rAssetStandards
            where rAssetStandards.AssetId         == rAssetTable.AccountNum &&
                  rAssetStandards.AssetStandardId == RAssetParameters::standardTaxIdDefault()
        {
            if (this.existPostingProfile(rAssetStandards.postingProfile(assetInferiorDisposalTable.TransDate),
                                         rAssetStandards.AssetStandardId,
                                         rAssetStandards.AssetGroup,
                                         rAssetStandards.AssetId))
            {
                rAssetProposal.initParameters(_ledgerJournalTable.JournalNum,
                                              assetInferiorDisposalTable.TransDate,
                                              rAssetStandards);

                rAssetProposal.createJournalLines(rAssetStandards.AssetStandardId, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>