<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEventNotificationProfile_AppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension class of the <c>RetailEventNotificationProfile</c> form.
/// </summary>
[ExtensionOf(formStr(RetailEventNotificationProfile))]
public final class RetailEventNotificationProfile_AppSuite_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RetailEventNotificationProfile_OnInitializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the status of form controls.
    /// </summary>
    /// <param name="sender">The form publishing the event.</param>
    /// <param name="e">The event arguments.</param>
    [FormEventHandler(formStr(RetailEventNotificationProfile), FormEventType::Initialized)]
    public static void RetailEventNotificationProfile_OnInitializing(xFormRun sender, FormEventArgs e)
    {
        FormControl deliveryModeEditButton = sender.control(sender.controlId(formControlStr(RetailEventNotificationProfile, DeliveryModeEditButton)));
        deliveryModeEditButton.visible(FeatureStateProvider::isFeatureEnabled(RetailEventNotificationPerDeliveryModeFeature::instance()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailEventNotificationSetting_OnSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Edit button enabled property based on current <c>RetailEventNotificationSetting</c> selection.
    /// </summary>
    /// <param name="sender">The data source publishing the event.</param>
    /// <param name="e">The event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(RetailEventNotificationProfile, RetailEventNotificationSetting), FormDataSourceEventType::SelectionChanged)]
    public static void RetailEventNotificationSetting_OnSelectionChanged(FormDataSource sender, FormDataSourceEventArgs e)
    {
        RetailEventNotificationSetting retailEventNotificationSetting = sender.cursor() as RetailEventNotificationSetting;
        boolean isEnabled = RetailEventNotificationAction::isSettingLineSupportedForNotificationType(retailEventNotificationSetting.EventNotificationType);

        FormRun formRun = sender.formRun();
        FormControl deliveryModeEditButton = formRun.control(formRun.controlId(formControlStr(RetailEventNotificationProfile, DeliveryModeEditButton)));
        deliveryModeEditButton.enabled(isEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EventNotificationType_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fails the validation when the original <c>RetailEventNotificationSetting</c> has <c>RetailEventNotificationSettingLine</c> configured.
    /// </summary>
    /// <param name="sender">The form data field publishing the event.</param>
    /// <param name="e">The event arguments.</param>
    [FormDataFieldEventHandler(formDataFieldStr(RetailEventNotificationProfile, RetailEventNotificationSetting, EventNotificationType), FormDataFieldEventType::Validating)]
    public static void EventNotificationType_OnValidating(FormDataObject sender, FormDataFieldEventArgs e)
    {
        RetailEventNotificationSetting retailEventNotificationSetting = sender.datasource().cursor();

        RetailEventNotificationSettingLine retailEventNotificationSettingLine;
        select firstonly retailEventNotificationSettingLine
            where retailEventNotificationSettingLine.EventNotificationSetting == retailEventNotificationSetting.RecId;

        // If there is already SettingLine configured for the Setting, don't allow modifying notification type on the Setting.
        if (retailEventNotificationSettingLine.RecId
            && retailEventNotificationSetting.EventNotificationType != retailEventNotificationSetting.orig().EventNotificationType)
        {
            checkFailed("@Retail:RetailEventNotificationSettingNotificationTypeModifyDisallowed");

            if (e is FormDataFieldCancelEventArgs)
            {
                FormDataFieldCancelEventArgs cancelEvent = e;
                cancelEvent.cancel(true);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>