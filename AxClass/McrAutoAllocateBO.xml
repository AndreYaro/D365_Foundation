<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrAutoAllocateBO</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>McrAutoAllocateBO</c> class handles the auto allocation processing for back ordered sales lines.
/// </summary>
class McrAutoAllocateBO extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>unreserve</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Unreserves the quantity specified for the sales line.
    /// </summary>
    /// <param name="_salesLine">
    ///     The sales line record to be reserved.
    /// </param>
    /// <param name="_inventTrans">
    ///     The quantity to unreserve.
    /// </param>
    /// <param name="_inventDim">
    ///     The inventory dimensions to unreserve.
    /// </param>
    /// <param name="_showMessages">
    ///     Determines if a message is displayed upon completion of the unreserve.
    /// </param>
    /// <returns>
    ///     true if method executes completely, otherwise, false.
    /// </returns>
    public static boolean unreserve(SalesLine _salesLine, InventTrans _inventTrans, InventDim _inventDim, boolean _showMessages = true)
    {
        InventDimParm inventDimParm;
        SalesQty      qty;

        // Setup the inventory dimension parameters.
        inventDimParm.initFromInventDim(_inventDim);
        qty = _inventTrans.Qty;

        // Un-reserve the line.
        InventUpd_Reservation::updateReserveFromForm(_salesLine, _inventDim, inventDimParm, qty);

        // Update the DeliverNow fields on the sales order line.
        MCRAutoallocatebo::updateDeliverNow(_salesLine);

        if (_showMessages)
        {
            info(strFmt("@MCR12660",
                        _salesLine.SalesId,
                        _salesLine.ItemId,
                        num2str(qty,5,0,1,2),
                        _salesLine.CustAccount));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the deliver now field on the sales line.
    /// </summary>
    /// <param name="_salesLine">
    ///     The sales line record to be updated.
    /// </param>
    public static void updateDeliverNow(SalesLine  _salesLine)
    {
        SalesLine           salesLine_upd;
        InventQty           newQuantity;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        select sum(Qty) from inventTrans
            where inventTrans.StatusIssue   == StatusIssue::ReservPhysical 
               && inventTrans.StatusReceipt == StatusReceipt::None
            join InventTransId, RecId from  inventTransOrigin
            where inventTransOrigin.InventTransId  == salesLine_upd.InventTransId
                && inventTransOrigin.RecId          == inventTrans.InventTransOrigin;

        newQuantity = inventTrans.Qty;

        ttsBegin;

        salesLine_upd = SalesLine::findRecId(_salesLine.RecId, true);
        salesLine_upd.InventDeliverNow =  - newQuantity;
        salesLine_upd.SalesDeliverNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine_upd.ItemId,
                                                                                                              salesLine_upd.InventDimId,
                                                                                                              salesLine_upd.InventDeliverNow,
                                                                                                              salesLine_upd.inventTable().inventUnitId(),
                                                                                                              salesLine_upd.SalesUnit,
                                                                                                              NoYes::Yes);

        if (salesLine_upd.validateWrite())
        {
            salesLine_upd.update(true);
        }
        else
        {
            throw error("@SYS104318");
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>McrAutoAllocateBO</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>McrAutoAllocateBO</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>