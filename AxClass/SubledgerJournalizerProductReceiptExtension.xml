<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalizerProductReceiptExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalizerProductReceiptExtension</c> class is an extension for the
/// <c>SublegerJournalizer</c> class that handles accounting during posting product receipt.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ProductReceipt), SourceDocument_ProductReceipt::ProductReceipt)]
public class SubledgerJournalizerProductReceiptExtension extends SubledgerJournalizerExtension
{
    FormLetterJournalPostCaller journalPostCaller;

    private boolean isSubledgerJournalizerProductReceiptNoVoucherFlightEnabled = SubledgerJournalizerProductReceiptNoVoucherFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether to subscribe to the journalizer event.
    /// </summary>
    /// <returns>
    /// True if we can subscribe the journalizer event; otherwise, false.
    /// </returns>
    protected boolean canSubscribe()
    {
        boolean canSubscribe = false;

        journalPostCaller = subledgerJournalizer.parmCaller() as FormLetterJournalPostCaller;

        if (journalPostCaller != null && journalPostCaller.parmLedgerVoucher() != null)
        {
            canSubscribe = true;
        }

        return canSubscribe;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertingDistributedTmpEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>insertingDistributedTmp</c> event.
    /// </summary>
    public void insertingDistributedTmpEventHandler(AccountingDistributionTmp _record)
    {
        if (_record.AccountingCurrencyAmount == 0 && isSubledgerJournalizerProductReceiptNoVoucherFlightEnabled)
        {
            _record.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertingJournalizingTmpEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>insertingJournalizingTmp</c> event.
    /// </summary>
    public void insertingJournalizingTmpEventHandler(AccountingDistributionTmp _record)
    {
        if (_record.AccountingCurrencyAmount == 0 && isSubledgerJournalizerProductReceiptNoVoucherFlightEnabled)
        {
            _record.clear();
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the subledger journalizer extension's insertingJournalizingTmp event.
    /// </summary>
    protected void subscribe()
    {
        if (this.canSubscribe())
        {
            subledgerJournalizer.insertingDistributedTmp += eventhandler(this.insertingDistributedTmpEventHandler);
            subledgerJournalizer.insertingJournalizingTmp += eventhandler(this.insertingJournalizingTmpEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SubledgerJournalizerProductReceiptExtension construct()
    {
        return new SubledgerJournalizerProductReceiptExtension();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>