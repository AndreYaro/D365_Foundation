<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationEmailFinder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustAutomationEmailFinder</c> holds methods to look up emails needed for customer process automations.
/// </summary>
public static class CustAutomationEmailFinder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findEmailAddressesForRoles</Name>
				<Source><![CDATA[
    internal protected static List findEmailAddressesForRoles(CustAutomationBusinessPurposeContact _businessPurposeContact, RefRecId _partyRecId)
    {
        LogisticsElectronicAddress electronicAddress;
        LogisticsElectronicAddressRole electronicAddressRole;
        LogisticsLocationRole role;
        DirPartyLocationIdPartyNumber partyLocation;
        List electronicLocators = new List(Types::String);

        while select partyLocation
            where partyLocation.Party == _partyRecId
            join Locator from electronicAddress
                where electronicAddress.Location == partyLocation.Location
                    && electronicAddress.Type == LogisticsElectronicAddressMethodType::Email
            join electronicAddressRole
                where electronicAddressRole.ElectronicAddress == electronicAddress.RecId
            join role
                where role.RecId == electronicAddressRole.LocationRole
                    && role.Name == _businessPurposeContact
        {
            if (electronicAddress.Locator)
            {
                electronicLocators.addStart(electronicAddress.Locator);
            }
        }

        return electronicLocators;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCollectionsAgentEmail</Name>
				<Source><![CDATA[
    internal protected static LogisticsElectronicAddressLocator findCollectionsAgentEmail(CustAutomationBusinessPurposeContact _businessPurposeContact)
    {
        CustCollectionsAgent collectionsAgent;
        DirPartyRelationship dirPartyRelationship;
        DirPartyTable dirPartyTable;
        LogisticsElectronicAddress electronicAddress;

        select firstonly collectionsAgent
            join dirPartyRelationship
                where dirPartyRelationship.RecId == collectionsAgent.DirPartyRelationship
            join dirPartyTable
                where dirPartyTable.RecId == dirPartyRelationship.ChildParty
                    && dirPartyTable.Name == _businessPurposeContact
            join electronicAddress
                where electronicAddress.RecId == dirPartyTable.PrimaryContactEmail;
        
        return electronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesGroupContactEmail</Name>
				<Source><![CDATA[
    internal protected static List findSalesGroupContactEmail(CustAutomationBusinessPurposeContact _businessPurposeContact)
    {
        CommissionSalesRep salesRep;
        DirPartyTable dirPartyTable;
        LogisticsElectronicAddress electronicAddress;
        List electronicLocators = new List(Types::String);

        while select salesRep
            where salesRep.CustomersContact == NoYes::Yes
                && salesRep.GroupId == _businessPurposeContact
            join dirPartyTable
                where dirPartyTable.RecId == salesRep.Person
            join electronicAddress
                where electronicAddress.RecId == dirPartyTable.PrimaryContactEmail
        {
            if (electronicAddress.Locator)
            {
                electronicLocators.addStart(electronicAddress.Locator);
            }
        }

        return electronicLocators;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>