<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetReservationFiltering_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetReservationFiltering_PSN</c> class handles common logic for filtering budget reservation queries.
/// </summary>
public class BudgetReservationFiltering_PSN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyHeaderPostedRelievingDocDateFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds filters to the specified data source so appropriate records are shown to the user when selecting a budget reservation to associate with a relieving document.
    /// </summary>
    /// <param name="_budgetReservationHeaderQueryBuildDataSource">
    /// The query datasource builder to apply filters to.
    /// </param>
    /// <param name="_budgetReservationRelievingDocument">
    /// The relieving document type that is associated with a budget reservation.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date of the document that is associated with a budget reservation.
    /// </param>
    /// <param name="_doFilterOnAccountingDate">
    /// Indicates whether or not to filter based on an accounting date.
    /// </param>
    public static void applyHeaderPostedRelievingDocDateFilters(
        QueryBuildDataSource                    _budgetReservationHeaderQueryBuildDataSource,
        BudgetReservationRelievingDocument_PSN  _budgetReservationRelievingDocument,
        AccountingDate                          _accountingDate,
        boolean                                 _doFilterOnAccountingDate = true)
    {
        QueryBuildRange queryBuildRangeBudgetReservationFilter;
    
        //
        // If any query filter changes are made in this location then the filters must also be updated for the budget reservation
        // lookup control on the PurchReqLineInfo web control. This can be done in the BudgetReservationLookup_Lookup() method on the web control.
        //
        if (_budgetReservationHeaderQueryBuildDataSource == null
            || _budgetReservationHeaderQueryBuildDataSource.table() != tableNum(BudgetReservationHeader_PSN))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        queryBuildRangeBudgetReservationFilter = SysQuery::findOrCreateRange(
                _budgetReservationHeaderQueryBuildDataSource,
                fieldNum(BudgetReservationHeader_PSN, DocumentStatus));
    
        queryBuildRangeBudgetReservationFilter.value(int2str(enum2int(BudgetReservationDocumentStatus_PSN::Posted)));
    
        queryBuildRangeBudgetReservationFilter = SysQuery::findOrCreateRange(
                _budgetReservationHeaderQueryBuildDataSource,
                fieldNum(BudgetReservationHeader_PSN, WorkflowStatus));
    
        queryBuildRangeBudgetReservationFilter.value(int2str(enum2int(BudgetReservationWorkflowStatus_PSN::Posted)));
    
        queryBuildRangeBudgetReservationFilter = SysQuery::findOrCreateRange(
                _budgetReservationHeaderQueryBuildDataSource,
                fieldNum(BudgetReservationHeader_PSN, RelievingDocumentType));
    
        queryBuildRangeBudgetReservationFilter.value(int2str(enum2int(_budgetReservationRelievingDocument)));
    
        if (_doFilterOnAccountingDate)
        {
            queryBuildRangeBudgetReservationFilter = SysQuery::findOrCreateRange(
                    _budgetReservationHeaderQueryBuildDataSource,
                    fieldNum(BudgetReservationHeader_PSN, StartDate));
    
            queryBuildRangeBudgetReservationFilter.value(
                    strFmt('(%1 <= %2)',
                    fieldStr(BudgetReservationHeader_PSN, StartDate),
                    date2StrXpp(_accountingDate)));
    
            queryBuildRangeBudgetReservationFilter = SysQuery::findOrCreateRange(
                    _budgetReservationHeaderQueryBuildDataSource,
                    fieldNum(BudgetReservationHeader_PSN, EndDate));
    
            queryBuildRangeBudgetReservationFilter.value(
                    strFmt('(%1 >= %2)',
                    fieldStr(BudgetReservationHeader_PSN, EndDate),
                    date2StrXpp(_accountingDate)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyLineFiltersToHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the filters on the specified budget reservation line datasource to the specified budget reservation header datasource.
    /// </summary>
    /// <param name="_budgetReservationHeaderQueryBuildDataSource">
    /// The budget reservation header datasource to copy the filters to.
    /// </param>
    /// <param name="_budgetReservationLineSourceDataSource">
    /// The budget reservation line datasource to copy the filters from.
    /// </param>
    public static void applyLineFiltersToHeader(
        QueryBuildDataSource    _budgetReservationHeaderQueryBuildDataSource,
        QueryBuildDataSource    _budgetReservationLineSourceDataSource)
    {
        QueryBuildDataSource    budgetResLineExistsJoinDataSource;
    
        if (_budgetReservationHeaderQueryBuildDataSource == null
            || _budgetReservationHeaderQueryBuildDataSource.table() != tableNum(BudgetReservationHeader_PSN)
            || _budgetReservationLineSourceDataSource == null
            || _budgetReservationLineSourceDataSource.table() != tableNum(BudgetReservationLine_PSN))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        budgetResLineExistsJoinDataSource = _budgetReservationHeaderQueryBuildDataSource.addDataSource(tableNum(BudgetReservationLine_PSN));
        budgetResLineExistsJoinDataSource.relations(true);
        budgetResLineExistsJoinDataSource.joinMode(JoinMode::ExistsJoin);
    
        BudgetReservationFiltering_PSN::copyDataSourceRanges(_budgetReservationLineSourceDataSource, budgetResLineExistsJoinDataSource);
        BudgetReservationFiltering_PSN::copyChildDataSources(_budgetReservationLineSourceDataSource, budgetResLineExistsJoinDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyLinePostedAndOptionalHeaderFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds filters to the specified data source so appropriate records are shown to the user when selecting a budget reservation to associate with a relieving document.
    /// </summary>
    /// <param name="_budgetReservationLineQueryBuildDataSource">
    /// The query datasource builder to apply filters to.
    /// </param>
    /// <param name="_clearBudgetResLineQueryBuildDataSourceDynalinks">
    /// true if the dynalinks needs to be clear; otherwise, false.
    /// </param>
    /// <param name="_doSortLinesForHeader">
    /// true if the records should be sorted based on the value in the budget reservation header field; otherwise, false.
    /// </param>
    public static void applyLinePostedAndOptionalHeaderFilters(
        QueryBuildDataSource    _budgetReservationLineQueryBuildDataSource,
        boolean                 _clearBudgetResLineQueryBuildDataSourceDynalinks = true,
        boolean                 _doSortLinesForHeader = true)
    {
        QueryBuildDataSource    queryBuildSourceDocumentLine;
        QueryBuildRange         queryBuildRangeBudgetReservationFilter;
    
        //
        // If any query filter changes are made in this location then the filters must also be updated for the budget reservation
        // lookup control on the PurchReqLineInfo web control. This can be done in the BudgetReservationLookup_Lookup() method on the web control.
        //
        if (_budgetReservationLineQueryBuildDataSource == null
            || _budgetReservationLineQueryBuildDataSource.table() != tableNum(BudgetReservationLine_PSN))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        if (_clearBudgetResLineQueryBuildDataSourceDynalinks)
        {
            _budgetReservationLineQueryBuildDataSource.clearDynalinks();
        }
    
        queryBuildSourceDocumentLine = _budgetReservationLineQueryBuildDataSource.addDataSource(tableNum(SourceDocumentLine));
        queryBuildSourceDocumentLine.relations(true);
    
        queryBuildRangeBudgetReservationFilter = SysQuery::findOrCreateRange(
            queryBuildSourceDocumentLine,
            fieldNum(SourceDocumentLine, AccountingStatus));
    
        queryBuildRangeBudgetReservationFilter.value(int2str(enum2int(SourceDocumentLineAccountingStatus::Completed)));
    
        if (_doSortLinesForHeader)
        {
            _budgetReservationLineQueryBuildDataSource.addSortField(fieldNum(BudgetReservationLine_PSN, BudgetReservationHeader_PSN));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyLinePurchaseRequisitionAgreementLineFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a filter to the specified data source so appropriate records are shown to the user when selecting a budget reservation to associate with a
    /// purchase requisition relieving document that has a purchase agreement.
    /// </summary>
    /// <param name="_budgetReservationLineQueryBuildDataSource">
    /// The query datasource builder to apply filters to.
    /// </param>
    /// <param name="_agreementLineRecId">
    /// The agreement line associated with the purchase requisition.
    /// </param>
    public static void applyLinePurchaseRequisitionAgreementLineFilter(
        QueryBuildDataSource                    _budgetReservationLineQueryBuildDataSource,
        AgreementLineRecId                      _agreementLineRecId)
    {
        QueryBuildDataSource        queryBuildSourceDocumentLine;
        QueryBuildRange             queryBuildRangeBudgetReservationFilter;
    
        if (_budgetReservationLineQueryBuildDataSource == null
            || _budgetReservationLineQueryBuildDataSource.table() != tableNum(BudgetReservationLine_PSN))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        if (_agreementLineRecId != 0
            && BudgetResLineAgreementLine_PSN::existsBudgetResLineForAgreementLine(_agreementLineRecId))
        {
            queryBuildSourceDocumentLine = _budgetReservationLineQueryBuildDataSource.addDataSource(tableNum(BudgetResLineAgreementLine_PSN));
            queryBuildSourceDocumentLine.relations(true);
    
            queryBuildRangeBudgetReservationFilter = SysQuery::findOrCreateRange(
                queryBuildSourceDocumentLine,
                fieldNum(BudgetResLineAgreementLine_PSN, AgreementLine));
    
            queryBuildRangeBudgetReservationFilter.value(int642str(_agreementLineRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyChildDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the child datasources on the specified originating query build datasource to the specified destination query build datasource.
    /// </summary>
    /// <param name="_sourceDataSource">
    /// The datasource to copy the child datasources from.
    /// </param>
    /// <param name="_targetDataSource">
    /// The datasource to copy the child datasources to.
    /// </param>
    public static void copyChildDataSources(QueryBuildDataSource _sourceDataSource, QueryBuildDataSource _targetDataSource)
    {
        int                     datasourceIterator;
        QueryBuildDataSource    childDataSource;
        QueryBuildDataSource    childDataSourceCopy;
    
        if (_sourceDataSource == null || _targetDataSource == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        for (datasourceIterator = 1; datasourceIterator <= _sourceDataSource.childDataSourceCount(); datasourceIterator++)
        {
            childDataSource = _sourceDataSource.childDataSourceNo(datasourceIterator);
            childDataSourceCopy = _targetDataSource.addDataSource(childDataSource.table());
            childDataSourceCopy.relations(childDataSource.relations());
            childDataSourceCopy.joinMode(JoinMode::ExistsJoin);
    
            BudgetReservationFiltering_PSN::copyDataSourceRanges(childDataSource, childDataSourceCopy);
            BudgetReservationFiltering_PSN::copyChildDataSources(childDataSource, childDataSourceCopy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDataSourceRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the ranges on the specified origin datasource to the specified destination datasource.
    /// </summary>
    /// <param name="_sourceDataSource">
    /// The datasource to copy ranges from.
    /// </param>
    /// <param name="_targetDataSource">
    /// The datasource to copy ranges to.
    /// </param>
    public static void copyDataSourceRanges(
        QueryBuildDataSource _sourceDataSource,
        QueryBuildDataSource _targetDataSource)
    {
        int rangeIterator;
    
        QueryBuildRange queryBuildRangeSource;
        QueryBuildRange queryBuildRangeAdded;
    
        if (_sourceDataSource == null || _targetDataSource == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        // Copy ranges
        for (rangeIterator = 1; rangeIterator <= _sourceDataSource.rangeCount(); rangeIterator++)
        {
            queryBuildRangeSource = _sourceDataSource.range(rangeIterator);
    
            // If the range is not filtering off header records then copy it.
            if (queryBuildRangeSource.field() != fieldNum(BudgetReservationLine_PSN, BudgetReservationHeader_PSN))
            {
                queryBuildRangeAdded = _targetDataSource.addRange(queryBuildRangeSource.field());
                queryBuildRangeAdded.status(queryBuildRangeSource.status());
                queryBuildRangeAdded.value(queryBuildRangeSource.value());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLineForSelectedHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the specified budget reservation line query build datasource to show only records for the specified budget reservation header.
    /// </summary>
    /// <param name="_budgetReservationLineQueryBuildDataSource">
    /// The budget reservation line query build data source to add filters to.
    /// </param>
    /// <param name="_currentBudgetReservationHeader">
    /// The budget reservation header record to filter the budget reservation line query build datasource on.
    /// </param>
    public static void filterLineForSelectedHeader(
        QueryBuildDataSource        _budgetReservationLineQueryBuildDataSource,
        BudgetReservationRecID_PSN  _currentBudgetReservationHeader = 0)
    {
        if (_budgetReservationLineQueryBuildDataSource == null
            || _budgetReservationLineQueryBuildDataSource.table() != tableNum(BudgetReservationLine_PSN))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        SysQuery::findOrCreateRange(
            _budgetReservationLineQueryBuildDataSource,
            fieldNum(BudgetReservationLine_PSN, BudgetReservationHeader_PSN)).value(queryValue(_currentBudgetReservationHeader));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>