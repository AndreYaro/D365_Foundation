<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedRecord_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>FBSpedRecord_BR</c> class represents a sped record.
/// </summary>
class FBSpedRecord_BR
{
    str recordType;
    List listOfFields;
    List listOfChildRecords;
    Set skipFormatFields;
    FBSpedRecord_BR parentRecord;
    private boolean isCAT4218;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmIsCAT4218</Name>
				<Source><![CDATA[
    public boolean parmIsCAT4218(boolean _isCAT4218 = isCAT4218)
    {
        isCAT4218 = _isCAT4218;

        return isCAT4218;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a <c>FBSpedField_BR</c> to the record.
    /// </summary>
    /// <param name="_spedField">
    ///     An instance of <c>FBSpedField_BR</c> to be added to the record.
    /// </param>
    /// <param name="_skipFormat">
    ///     A flag indicating whether standard formatting should be applied on the field.
    /// </param>
    public void addField(FBSpedField_BR _spedField, boolean _skipFormat = false)
    {
        listOfFields.addEnd(_spedField);

        if (_skipFormat)
        {
            skipFormatFields.add(_spedField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds an instance of <c>FBSpedFieldDate_BR</c> to the current record.
    /// </summary>
    /// <param name="_date">
    ///     The date value that will be used for the field.
    /// </param>
    public void addFieldDate(date _date)
    {
        this.addField(FBSpedField_BR::constructDate(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds an instance of <c>FBSpedField</c> representing an empty field.
    /// </summary>
    public void addFieldEmpty()
    {
        this.addField(FBSpedField_BR::constructEmpty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldEmptyNTimes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds multiple empty fields to the record at once.
    /// </summary>
    /// <param name="_times">
    ///     The number of fields that should be added to the record.
    /// </param>
    public void addFieldEmptyNTimes(int _times)
    {
        int i;
        for (i = 1; i <=_times; i++)
        {
            this.addField(FBSpedField_BR::constructEmpty());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldNumeric</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds an instance of <c>FBSpedFieldNumeric_BR</c> to the current record.
    /// </summary>
    /// <param name="_value">
    ///     The value that will be used for the field.
    /// </param>
    /// <param name="_decimalPlaces">
    ///     The number of decimal places that should be used for the field when it is formatted.
    /// </param>
    /// <param name="_size">
    ///     The maximum size the field should take when formatted.
    /// </param>
    public void addFieldNumeric(anytype _value, int _decimalPlaces = 0, int _size = 0)
    {
        this.addField(FBSpedField_BR::constructNumeric(_value, _decimalPlaces, _size));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldNumericFilledWithZeros</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds an instance of <c>FBSpedFieldNumeric_BR</c> to the current record.
    /// </summary>
    /// <param name="_value">
    ///     The value that will be used for the field.
    /// </param>
    /// <param name="_size">
    ///     The maximum size the field should take when formatted.
    /// </param>
    public void addFieldNumericFilledWithZeros(anyType _value, int _size = 0)
    {
        this.addField(FBSpedField_BR::constructNumericFilledWithZeros(_value, _size));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldNumericAbs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an instance with absolute value of <c>FBSpedFieldNumeric_BR</c> to the current record.
    /// </summary>
    /// <param name="_value">
    /// The value that will be used for the field.
    /// </param>
    /// <param name="_decimalPlaces">
    /// The number of decimal places that should be used for the field when it is formatted.
    /// </param>
    /// <param name="_size">
    /// The maximum size the field should take when formatted.
    /// </param>
    public void addFieldNumericAbs(anytype _value, int _decimalPlaces = 0, int _size = 0)
    {
        this.addField(FBSpedField_BR::constructNumeric(abs(_value), _decimalPlaces, _size));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds an instance of <c>FBSpedFieldString_BR</c> to the current record.
    ///
    /// </summary>
    /// <param name="_str">
    ///     The string value that will be used for the field.
    /// </param>
    /// <param name="_size">
    ///     The maximum size the field should take when formatted.
    /// </param>
    public void addFieldString(str _str, int _size = this.getDefaultMaxStringSize())
    {
        this.addField(FBSpedField_BR::constructString(_str, _size));
    }

]]></Source>
			</Method>
			<Method>
				<Name>content</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the formatted content of the field.
    /// </summary>
    /// <returns>
    ///     A string with the formatted content of the field.
    /// </returns>
    public str content()
    {
        ListEnumerator le;
        FBSpedField_BR spedField;
        str content;
        boolean needFramingRecordSeparators = this.needFramingRecordSeparators();

        if (needFramingRecordSeparators)
        {
            content = this.getOnlyValidChars('|' + this.type() + '|');
        }
        else
        {
            content = this.getOnlyValidChars(this.type());
        }

        le = listOfFields.getEnumerator();
        while (le.moveNext())
        {
            spedField = le.current();

            if (needFramingRecordSeparators)
            {
                content += (skipFormatFields.in(spedField)
                    ? spedField.formattedValue()
                    : this.getOnlyValidChars(spedField.formattedValue())) + '|';
            }
            else
            {
                content += '|' + (skipFormatFields.in(spedField)
                    ? spedField.formattedValue()
                    : this.getOnlyValidChars(spedField.formattedValue()));
            }
        }

        return content;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultMaxStringSize</Name>
				<Source><![CDATA[
    private int getDefaultMaxStringSize()
    {
        return 255;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfChildRecords</Name>
				<Source><![CDATA[
    private List getListOfChildRecords()
    {
        return listOfChildRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnlyValidChars</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Normalizes a string so that it contains only valid characters according to the rules established for sped files.
    /// </summary>
    /// <param name="_text">
    ///     The original string to be normalized.
    /// </param>
    /// <returns>
    ///     The string normalized.
    /// </returns>
    public str getOnlyValidChars(str _text)
    {
        str returnValue = strLRTrim(strupr(_text));

        returnValue = strkeep(_text, ' 0123456789$%*+,-./:;<=>?@[\]{|}_()ABCDEFGHIJKLMNOPQRSTUVXWYZÃÁÀÂÉÊËÍÓÔÕÚÜÇ');

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTopmostParentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the topmost parent record relative to the current record.
    /// </summary>
    /// <returns>
    ///     An instance of <c>FBSpedRecord_BR</c> representing the topmost parent record.
    /// </returns>
    public FBSpedRecord_BR getTopmostParentRecord()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = this;

        while (spedRecord.parmParentRecord())
        {
            spedRecord = spedRecord.parmParentRecord();
        }

        return spedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of <c>FBSpedRecord_BR</c> class.
    /// </summary>
    /// <param name="_recordType">
    ///     A string identifying the type of the record.
    /// </param>
    protected void new(str _recordType)
    {
        recordType          = _recordType;
        listOfFields        = new List(Types::Class);
        listOfChildRecords  = new List(Types::Class);
        skipFormatFields    = new Set(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentRecord</Name>
				<Source><![CDATA[
        public FBSpedRecord_BR parmParentRecord(FBSpedRecord_BR _parentRecord = parentRecord)
    {
        parentRecord = _parentRecord;
        return parentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateListOfDescendantsFrom</Name>
				<Source><![CDATA[
        private void populateListOfDescendantsFrom(FBSpedRecord_BR _spedRecord, List _listOfDescendants)
    {
        ListEnumerator  le;
        FBSpedRecord_BR childRecord;

        le = _spedRecord.getListOFChildRecords().getEnumerator();
        while (le.moveNext())
        {
            childRecord = le.current();
            _listOfDescendants.addEnd(childRecord);
            this.populateListOfDescendantsFrom(childRecord, _listOfDescendants);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the total number of fields existing in the record.
    /// </summary>
    /// <returns>
    ///     An integer representing the number of fields existing in this record.
    /// </returns>
    public int totalFields()
    {
        return listOfFields.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the type of the record. a type is an string that qualifies the record.
    /// </summary>
    /// <returns>
    ///     An string representing the type of the record.
    /// </returns>
    public str type()
    {
        return recordType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Coinstructs an empry record
    /// </summary>
    /// <param name="_recordType">
    ///     The string representing the type of the record.
    /// </param>
    /// <returns>
    ///     An instance of <c>FBSpedRecord_BR</c> without any fields in it.
    /// </returns>
    /// <remarks>
    ///     An empty record is a record that has a type but does not have any fields. Field can be added at any time.
    /// </remarks>
    public static FBSpedRecord_BR constructEmpty(str _recordType)
    {
        return new FBSpedRecord_BR(_recordType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>needFramingRecordSeparators</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether fields separators are needed at the beginning and end of records.
    /// </summary>
    /// <returns>true if this is not CAT4218 report; otherwise, false.</returns>
    protected boolean needFramingRecordSeparators()
    {
        return !isCAT4218;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>