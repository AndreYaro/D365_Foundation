<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxBookSectionVoucherSeries</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxBookSectionVoucherSeries
{
    TaxBookSection     taxBookSection;
    TmpNumberSequence  tmpNumberSequence;
    TaxBookSection     selectedTaxBookSection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillVoucherSeriesList</Name>
				<Source><![CDATA[
    public void fillVoucherSeriesList(
        TaxBookType _taxBookType,
        boolean     _create = false)
    {
        TaxBookSection foundTaxBookSection;
        NumberSequenceTable numberSequenceTable;

        void insertFromReference(int _extendedType)
        {
            NumberSequenceDatatype   numberSequenceDatatype;
            NumberSequenceReference  numberSequenceReference;
            NumberSequenceGroupRef   numberSequenceGroupRef;
            NumberSeqScope scope = NumberSeqScopeFactory::createDefaultScope();

            numberSequenceDatatype = NumberSequenceDatatype::findByDatatypeId(_extendedType);
            numberSequenceReference = NumberSequenceReference::findByDatatypeAndScope(_extendedType, scope.getId());
            if (numberSequenceReference.AllowSameAs)
            {
                numberSequenceDatatype = NumberSequenceDatatype::findByDatatypeId(numberSequenceDatatype.DataTypeSameAsId);
                numberSequenceReference = NumberSequenceReference::findByDatatypeAndScope(numberSequenceDatatype.DatatypeId, scope.getId());
            }
            foundTaxBookSection = TaxBookSection::findVoucherSeries(numberSequenceReference.numberSequenceTable().RecId);
            if (! foundTaxBookSection.RecId ||
                foundTaxBookSection.RecId == taxBookSection.RecId)
            {
                tmpNumberSequence.createFromNumberSequenceTable(numberSequenceReference.numberSequenceTable().NumberSequence);
            }

            while select * from numberSequenceGroupRef
            where numberSequenceGroupRef.NumberSequenceDatatype == numberSequenceDatatype.RecId &&
                  numberSequenceGroupRef.NumberSequenceScope == scope.getId()
            {
                foundTaxBookSection = TaxBookSection::findVoucherSeries(NumberSequenceTable::find(numberSequenceGroupRef.NumberSequenceId).RecId);
                if (! foundTaxBookSection.RecId ||
                    foundTaxBookSection.RecId == taxBookSection.RecId)
                {
                    tmpNumberSequence.createFromNumberSequenceTable(NumberSequenceTable::find(numberSequenceGroupRef.NumberSequenceId).NumberSequence);
                }
            }
        }

        void insertFromJournalName(TaxBookTypeJournal _taxBookTypeJournal)
        {
            LedgerJournalName  ledgerJournalName;
            ProjJournalName    projJournalName;

            while select * from ledgerJournalName
                  where ledgerJournalName.TaxBookTypeJournal == _taxBookTypeJournal
            {
                foundTaxBookSection = TaxBookSection::findVoucherSeries(ledgerJournalName.NumberSequenceTable);
                if (! foundTaxBookSection.RecId ||
                    foundTaxBookSection.RecId == taxBookSection.RecId)
                {
                    tmpNumberSequence.createFromNumberSequenceTable(NumberSequenceTable::find(ledgerJournalName.NumberSequenceTable).NumberSequence);
                }
            }
            while select * from projJournalName
                  where projJournalName.TaxBookTypeJournal == _taxBookTypeJournal
            {
                numberSequenceTable = projJournalName.getNumberSequenceTable();
                foundTaxBookSection = TaxBookSection::findVoucherSeries(numberSequenceTable.RecId);
                if (! foundTaxBookSection.RecId ||
                    foundTaxBookSection.RecId == taxBookSection.RecId)
                {
                    tmpNumberSequence.createFromNumberSequenceTable(numberSequenceTable.NumberSequence);
                }
            }
        }

        if ((_taxBookType == TaxBookType::NotIncluded && _create == false) ||
            (_taxBookType == TaxBookType::Purchase))
        {
            insertFromReference(extendedtypenum(PurchInvoiceVoucher));
            insertFromReference(extendedtypenum(PurchCreditNoteVoucher));
        }

        if ((_taxBookType == TaxBookType::NotIncluded && _create == false) ||
            (_taxBookType == TaxBookType::Sales))
        {
            insertFromReference(extendedtypenum(SalesInvoiceVoucher));
            insertFromReference(extendedtypenum(SalesCreditNoteVoucher));
            insertFromReference(extendedtypenum(CustInvoiceVoucher));
            insertFromReference(extendedtypenum(CustCreditNoteVoucher));
            insertFromReference(extendedtypenum(ProjNormalInvoiceVoucher));
            insertFromReference(extendedtypenum(ProjNormalCreditNoteVoucher));
            insertFromReference(extendedtypenum(ProjOnAccInvoiceVoucher));
            insertFromReference(extendedtypenum(ProjOnAccCreditNoteVoucher));
        }

        switch (_taxBookType)
        {
            case TaxBookType::NotIncluded:
                insertFromJournalName(TaxBookTypeJournal::NotIncluded);
                break;
            case TaxBookType::Sales:
                insertFromJournalName(TaxBookTypeJournal::Sales);
                break;
            case TaxBookType::Purchase:
                insertFromJournalName(TaxBookTypeJournal::Purchase);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inVoucherSeriesList</Name>
				<Source><![CDATA[
    public boolean inVoucherSeriesList(RefRecId _numberSequenceId)
    {
        boolean ret = false;
        NumberSequenceCode numberSequenceCode = NumberSequenceTable::find(_numberSequenceId).NumberSequence;

        while select tmpNumberSequence
        {
            if (tmpNumberSequence.NumberSequence == numberSequenceCode)
            {
                ret = true;
                break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRefVoucherSeries</Name>
				<Source><![CDATA[
    public Common lookupRefVoucherSeries(FormReferenceGroupControl  _callingReferenceGroupControl)
    {
        Args    args;
        FormRun formRun;

        this.reset(taxBookSection);

        if (taxBookSection.TaxBook)
        {
            this.fillVoucherSeriesList(TaxBook::find(taxBookSection.TaxBook).TaxBookType);
        }

        args = new Args();
        args.name(formstr(TaxBookSectionLookupVoucherSeries));
        args.caller(_callingReferenceGroupControl);
        args.record(tmpNumberSequence);

        formRun = classfactory.formRunClass(args);
        formRun.init();

        _callingReferenceGroupControl.performFormLookup(formRun);

        return formRun.selectRecordModeSelectedRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset(TaxBookSection _taxBookSection)
    {
        taxBookSection = _taxBookSection;

        ttsbegin;
        delete_from tmpNumberSequence;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherSeriesList</Name>
				<Source><![CDATA[
    public TmpNumberSequence voucherSeriesList()
    {
        return tmpNumberSequence;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>