<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTransOpen_PaymMode_DPES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>VendTransOpen_PaymMode_DPES</c> class is the report data provider (RDP) class for the
///     associated <c>VendTransOpen_PaymMode_ES</c> SSRS report.
/// </summary>
/// <remarks>
///     This is the RDP class for the associated <c>VendTransOpen_PaymMode_ES</c> SSRS report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(VendTransOpen_PaymModeContract_ES))
]
public class VendTransOpen_PaymMode_DPES extends SRSReportDataProviderBase
{
    VendTransOpen_PaymMode_TmpES    vendTransOpen_PaymMode_TmpES;
    VendTrans                       vendTrans;
    VendTransOpen                   vendTransOpen;
    CompanyBankAccountId            displayBank;
    CompanyBankAccountId            bank;
    BankDiscNoticeDeadline          fromBankDeadLine;
    BankDiscNoticeDeadline          toBankDeadline;
    VendAccount                     fromVendAccount;
    VendAccount                     toVendAccount;
    DueDate                         fromDueDate;
    DueDate                         toDueDate;
    VendPaymMode                    paymMode;
    VendPaymMode                    paymMode2;
    VendPaymMode                    paymMode3;
    VendPaymMode                    paymMode4;
    PaymMode                        totalPaymMode;
    PaymMode                        paymModeUpdate;
    PaymMode                        paymModeLast;
    VendPromissoryNoteID            promissoryNoteId;
    TransDate                       fromTransDate;
    TransDate                       toTransDate;
    Voucher                         voucher;
    VendInvoiceId                   vendInvoiceId;
    AmountMST                       fromAmount;
    AmountMST                       toAmount;
    AmountMST                       totalAmount;
    NoYesId                         enableStatus;
    VendPromissoryNoteStatus        status;
    AmountMST                       totalPaymMode1;
    AmountMST                       totalPaymMode2;
    AmountMST                       totalPaymMode3;
    AmountMST                       totalPaymMode4;
    protected VendPostingProfile postingProfile;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getVendTransOpen_PaymMode_TmpES</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves an instance of the report data provider class for the specified report.
    /// </summary>
    /// <returns>
    ///     An instance of the <c>VendTransOpen_PaymMode_DPES</c> class.
    /// </returns>
    [
        SRSReportDataSet(tableStr(VendTransOpen_PaymMode_TmpES))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendTransOpen_PaymMode_TmpES getVendTransOpen_PaymMode_TmpES()
    {
        select vendTransOpen_PaymMode_TmpES;
        return vendTransOpen_PaymMode_TmpES;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query that is used for business logic.
    /// </summary>
    /// <param name="_newQuery">
    ///     The <c>Query</c> object.
    /// </param>
    /// <returns>
    ///     The query that has been built.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query initQuery(Query _newQuery)
    {
        QueryBuildDataSource vendTransOpenDS = _newQuery.addDataSource(tableNum(VendTransOpen));
        QueryBuildDataSource vendTransDS     = vendTransOpenDS.addDataSource(tableNum(VendTrans));

        vendTransDS.addLink(fieldNum(VendTransOpen, RefRecId), fieldNum(VendTrans, RecId));

        vendTransDS.addSortField(fieldNum(VendTrans, PaymMode));

        if (fromVendAccount || toVendAccount)
        {
            vendTransOpenDS.addRange(fieldNum(VendTransOpen, AccountNum)).value(queryRange(fromVendAccount, toVendAccount));
        }

        if (fromDueDate || toDueDate)
        {
            vendTransOpenDS.addRange(fieldNum(VendTransOpen, DueDate)).value(queryRange(fromDueDate, toDueDate));
        }

        if (fromBankDeadLine || toBankDeadline)
        {
            vendTransOpenDS.addRange(fieldNum(VendTransOpen, BankDiscNoticeDeadline)).value(queryRange(fromBankDeadLine, toBankDeadline));
        }

        if (fromTransDate || toTransDate)
        {
            vendTransOpenDS.addRange(fieldNum(VendTransOpen, TransDate)).value(queryRange(fromTransDate, toTransDate));
        }

        if (postingProfile)
        {
            vendTransDS.addRange(fieldNum(VendTrans, PostingProfile)).value(postingProfile);
        }

        if (bank)
        {
            vendTransDS.addRange(fieldNum(VendTrans, CompanyBankAccountId)).value(bank);
        }

        if (paymMode || paymMode2 || paymMode3 || paymMode4)
        {
            vendTransDS.addRange(fieldNum(VendTrans, PaymMode)).value(paymMode);
            vendTransDS.addRange(fieldNum(VendTrans, PaymMode)).value(paymMode2);
            vendTransDS.addRange(fieldNum(VendTrans, PaymMode)).value(paymMode3);
            vendTransDS.addRange(fieldNum(VendTrans, PaymMode)).value(paymMode4);
        }

        if (promissoryNoteId)
        {
            vendTransDS.addRange(fieldNum(VendTrans, PromissoryNoteID)).value(promissoryNoteId);
        }

        if (voucher)
        {
            vendTransDS.addRange(fieldNum(VendTrans, Voucher)).value(voucher);
        }

        if (vendInvoiceId)
        {
            vendTransDS.addRange(fieldNum(VendTrans, Invoice)).value(vendInvoiceId);
        }

        if (fromAmount || toAmount)
        {
            vendTransOpenDS.addRange(fieldNum(VendTransOpen, AmountMST)).value(queryRange(fromAmount, toAmount));
        }

        if (enableStatus == NoYes::Yes)
        {
            vendTransDS.addRange(fieldNum(VendTrans, PromissoryNoteStatus)).value(enum2str(status));
        }

        return _newQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts data into the <c>VendTransOpen_PaymMode_TmpES</c> report.
    /// </summary>
    private void insert()
    {
        vendTransOpen_PaymMode_TmpES.AccountNum             = vendTransOpen.AccountNum;
        vendTransOpen_PaymMode_TmpES.Voucher                = vendTrans.Voucher;
        vendTransOpen_PaymMode_TmpES.Invoice                = vendTrans.Invoice;
        vendTransOpen_PaymMode_TmpES.Txt                    = vendTrans.Txt;
        vendTransOpen_PaymMode_TmpES.DueDate                = vendTransOpen.DueDate;
        vendTransOpen_PaymMode_TmpES.BankDiscNoticeDeadline = vendTransOpen.BankDiscNoticeDeadline;
        vendTransOpen_PaymMode_TmpES.AmountMST              = vendTransOpen.AmountMST;
        vendTransOpen_PaymMode_TmpES.PaymMode               = vendTrans.PaymMode;
        vendTransOpen_PaymMode_TmpES.PostingProfile         = vendTrans.PostingProfile;
        vendTransOpen_PaymMode_TmpES.PromissoryNoteStatus   = vendTrans.PromissoryNoteStatus;
        vendTransOpen_PaymMode_TmpES.PromissoryNoteID       = vendTrans.PromissoryNoteID;
        vendTransOpen_PaymMode_TmpES.PromissoryNoteSeqNum   = vendTrans.PromissoryNoteSeqNum;
        vendTransOpen_PaymMode_TmpES.CompanyBankAccountId   = displayBank;
        vendTransOpen_PaymMode_TmpES.TransDate              = vendTrans.TransDate;
        vendTransOpen_PaymMode_TmpES.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///     This method provides the ability to write the report business logic.This method will be called by SSRS at runtime.
    ///     The method should compute data and populate the data tables that will be returned to the SSRS.
    /// </remarks>
    public void processReport()
    {
        VendTransOpen_PaymModeContract_ES   vendTransOpen_PaymModeContract_ES = this.parmDataContract();
        VendPromissoryNoteTrans             vendPromissoryNoteTrans;
        VendReport_TransOpenPaymMode_ES     vendReport_TransOpenPaymMode_ES = new VendReport_TransOpenPaymMode_ES();

        status              = vendTransOpen_PaymModeContract_ES.parmStatus();
        paymMode            = vendTransOpen_PaymModeContract_ES.parmPaymMode();
        paymMode2           = vendTransOpen_PaymModeContract_ES.parmPaymMode2();
        paymMode3           = vendTransOpen_PaymModeContract_ES.parmPaymMode3();
        paymMode4           = vendTransOpen_PaymModeContract_ES.parmPaymMode4();
        voucher             = vendTransOpen_PaymModeContract_ES.parmVoucher();
        vendInvoiceId       = vendTransOpen_PaymModeContract_ES.parmVendInvoiceId();
        promissoryNoteId    = vendTransOpen_PaymModeContract_ES.parmPromissoryNoteId();
        enableStatus        = vendTransOpen_PaymModeContract_ES.parmEnableStatus();
        bank                = vendTransOpen_PaymModeContract_ES.parmBank();
        fromAmount          = vendTransOpen_PaymModeContract_ES.parmFromAmount();
        toAmount            = vendTransOpen_PaymModeContract_ES.parmToAmount();
        postingProfile      = vendTransOpen_PaymModeContract_ES.parmPostingProfile();
        fromVendAccount     = vendTransOpen_PaymModeContract_ES.parmFromVendAccount();
        toVendAccount       = vendTransOpen_PaymModeContract_ES.parmToVendAccount();
        fromDueDate         = vendTransOpen_PaymModeContract_ES.parmFromDueDate();
        toDueDate           = vendTransOpen_PaymModeContract_ES.parmToDueDate();
        fromTransDate       = vendTransOpen_PaymModeContract_ES.parmFromTransDate();
        toTransDate         = vendTransOpen_PaymModeContract_ES.parmToTransDate();
        fromBankDeadLine    = vendTransOpen_PaymModeContract_ES.parmFromBankDeadLine();
        toBankDeadline      = vendTransOpen_PaymModeContract_ES.parmToBankDeadline();
        totalPaymMode1      = vendTransOpen_PaymModeContract_ES.parmTotalPaymMode1();
        totalPaymMode2      = vendTransOpen_PaymModeContract_ES.parmTotalPaymMode2();
        totalPaymMode3      = vendTransOpen_PaymModeContract_ES.parmTotalPaymMode3();
        totalPaymMode4      = vendTransOpen_PaymModeContract_ES.parmTotalPaymMode4();

        Query query = new Query();
        query = this.initQuery(query);
        QueryRun queryRun = new QueryRun(query);
        queryRun.setRecord(vendTransOpen);

        while (queryRun.next())
        {
            vendTrans                = queryRun.get(tableNum(VendTrans));
            vendTransOpen            = queryRun.get(tableNum(VendTransOpen));
            vendPromissoryNoteTrans  = vendReport_TransOpenPaymMode_ES.vendPromissoryNoteTrans(vendTrans);
            displayBank              = vendPromissoryNoteTrans.RemittedtoBankAccountId;
            totalPaymMode            = vendTrans.PaymMode;
            this.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>