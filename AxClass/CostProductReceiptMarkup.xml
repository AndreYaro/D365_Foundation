<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostProductReceiptMarkup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostProductRecieptMarkup</c> class provides the markup for the product receipt.
/// </summary>
public class CostProductReceiptMarkup extends CostMarkupProvider
{
    InventQty       remainingQuantity;
    CostAmount      remainingAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the markup.
    /// </summary>
    /// <remarks>
    /// When there are multiple lines on the product receipt related to the same lot, 
    /// the charges will be allocated proportionally to the lines.
    /// </remarks>
    private void load()
    {
        InventTransOrigin           inventTransOrigin;
        VendPackingSlipVersion      vendPackingSlipVersion;
        VendPackingSlipTrans        vendPackingSlipTrans;
        MarkupTable                 markupTable;
        MarkupTrans                 markupTrans;
        Set                         sourceDocumentLines = new Set(Types::Int64);

        this.initMaps();
        date dateFrom = dateNull();
        date dateTo = dateMax();

        while select validTimeState(dateFrom, dateTo) TableId from inventTransOrigin
            where inventTransOrigin.RecId == inventTransOriginId
        join TableId from vendPackingSlipVersion
            where vendPackingSlipVersion.CostLedgerVoucher   == voucher
                && vendPackingSlipVersion.AccountingDate     == transDate
        join TableId, SourceDocumentLine, InventQty from vendPackingSlipTrans
            where vendPackingSlipTrans.InventTransId        == inventTransOrigin.InventTransId
               && vendPackingSlipTrans.CostLedgerVoucher    == voucher
               && vendPackingSlipTrans.AccountingDate       == transDate
               && vendPackingSlipTrans.VendPackingSlipJour  == vendPackingSlipVersion.VendPackingSlipJour
        outer join markupTrans
            where markupTrans.TransTableId  == vendPackingSlipTrans.TableId
               && markupTrans.TransRecId    == vendPackingSlipTrans.RecId
               && markupTrans.Voucher       == vendPackingSlipVersion.LedgerVoucher
               && markupTrans.TransDate     == transDate
        outer join RecId from markupTable
            where markupTable.MarkupCode    == markupTrans.MarkupCode
               && markupTable.CustType      == MarkupType::Item
        {
            if (!sourceDocumentLines.in(vendPackingSlipTrans.SourceDocumentLine))
            {
                sourceDocumentLines.add(vendPackingSlipTrans.SourceDocumentLine);
                remainingQuantity += vendPackingSlipTrans.InventQty;
            }
            if (markupTrans && markupTable)
            {
                CostEntrySource source = CostEntrySource::newCommon(markupTrans);
                CostAmount costAmount = this.markupAmount(this.currencyExchangeHelper(vendPackingSlipTrans), markupTrans);
                remainingAmountMap.insert(source, costAmount);
                remainingAmount += costAmount;
            }
        }

        MapEnumerator sources = remainingAmountMap.getEnumerator();
        while (sources.moveNext())
        {
            remainingQuantityMap.insert(sources.currentKey(), remainingQuantity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductReceiptAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount to distribute to the quantity.
    /// </summary>
    /// <param name="_quantity">
    ///    The quantity.
    /// </param>
    /// <returns>
    ///    The amount to distribute to the quantity.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The quantity is larger than the remaining quantity.
    /// </exception>
    internal CostAmount getProductReceiptAmount(InventQty _quantity)
    {
        CostAmount      amount;

        if (Debug::debugMode())
        {
            Debug::assert(sign(remainingQuantity) == sign(_quantity));
        }

        if (remainingAmountMap.elements())
        {
            if (_quantity == remainingQuantity)
            {
                amount = remainingAmount;
            }
            else if (abs(_quantity) < abs(remainingQuantity))
            {
                amount = CurrencyExchangeHelper::amount(remainingAmount / remainingQuantity * _quantity);
            }
            else
            {
                throw error(strFmt("@SCM:CurrentQtyLargerThanRemainingQty", _quantity, remainingQuantity));
            }

            remainingQuantity -= _quantity;
            remainingAmount -= amount;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountForCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the markup amount for a correction.
    /// </summary>
    /// <param name="_vendPackingSlipTrans">
    /// The <c>VendPackingSlipTrans</c> being corrected.
    /// </param>
    /// <param name="_qty">
    /// The corrected quantity.
    /// </param>
    /// <returns>
    /// The markup amount for a correction.
    /// </returns>
    public static Amount amountForCorrection(
        VendPackingSlipTrans            _vendPackingSlipTrans,
        InventQty                       _qty)
    {
        Amount      amount, totalAmount;

        totalAmount = CostProductReceiptMarkup::newVendPackingSlipTrans(_vendPackingSlipTrans).getTotalRemainingAmount();

        if (totalAmount)
        {
            amount = CurrencyExchangeHelper::amount(totalAmount * _qty / VendPackingSlipTransHistory::findFirstVersion(_vendPackingSlipTrans.RecId).InventQty);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostProductReceiptMarkup construct()
    {
        return new CostProductReceiptMarkup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventoryEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>CostProductRecieptMarkup</c> class.
    /// </summary>
    /// <param name="_event">
    /// An instance of the <c>CostInventoryEvent</c> class to provide the markup for.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostProductRecieptMarkup</c> class.
    /// </returns>
    public static CostProductReceiptMarkup newInventoryEvent(CostInventoryEvent _event)
    {
        return CostProductReceiptMarkup::newKey(_event.parmInventTransOriginId(),
                                                _event.parmVoucher(),
                                                _event.parmTransDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>CostProductReceiptMarkup</c> class.
    /// </summary>
    /// <param name="_inventTransOriginId">
    /// The <c>InventTransOriginId</c> to provide the markup for.
    /// </param>
    /// <param name="_voucher">
    /// The <c>Voucher</c> to provide the markup for.
    /// </param>
    /// <param name="_transDate">
    /// The <c>TransDate</c> to provide the markup for.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostProductReceiptMarkup</c> class.
    /// </returns>
    private static CostProductReceiptMarkup newKey(
        InventTransOriginId _inventTransOriginId,
        Voucher             _voucher,
        TransDate           _transDate)
    {
        CostProductReceiptMarkup   productReceiptMarkup;

        str key = int642str(_inventTransOriginId) + '#' +
          _voucher + '#' +
          date2StrXpp(_transDate);

        productReceiptMarkup = SysTransactionScopeCache::get(classStr(CostProductReceiptMarkup), key, productReceiptMarkup);

        if (!productReceiptMarkup)
        {
            productReceiptMarkup = CostProductReceiptMarkup::construct();
            productReceiptMarkup.parmInventTransOriginId(_inventTransOriginId);
            productReceiptMarkup.parmVoucher(_voucher);
            productReceiptMarkup.parmTransDate(_transDate);
            productReceiptMarkup.load();

            SysTransactionScopeCache::set(classStr(CostProductReceiptMarkup), key, productReceiptMarkup);
        }

        return productReceiptMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>CostProductReceiptMarkup</c> class.
    /// </summary>
    /// <param name="_vendPackingSlipTrans">
    /// The <c>VendPackingSlipTrans</c> to provide the markup for.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostProductReceiptMarkup</c> class.
    /// </returns>
    public static CostProductReceiptMarkup newVendPackingSlipTrans(VendPackingSlipTrans _vendPackingSlipTrans)
    {
        InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(_vendPackingSlipTrans.InventTransId);

        return CostProductReceiptMarkup::newKey(inventTransOrigin.RecId,
                                                _vendPackingSlipTrans.CostLedgerVoucher,
                                                _vendPackingSlipTrans.AccountingDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>