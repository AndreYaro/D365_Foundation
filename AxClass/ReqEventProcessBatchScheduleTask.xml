<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessBatchScheduleTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Updates Kanban scheduling to accommodate for jobs created or deleted within a <c>KanbanJobDeferredSchedulingScope</c>.
/// </summary>
class ReqEventProcessBatchScheduleTask extends RunBaseBatch implements BatchRetryable
{
    KanbanRuleRefRecId      kanbanRuleRefRecId;
    boolean                 scheduleNewKanbans;
    boolean                 cleanUpDeletedKanbans;
    KanbanJobSchedulerLock  kanbanJobSchedulerLock;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        kanbanRuleRefRecId,
        scheduleNewKanbans,
        cleanUpDeletedKanbans
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRuleRefRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRuleRefRecId parmKanbanRuleRefRecId(KanbanRuleRefRecId _kanbanRuleRefRecId = kanbanRuleRefRecId)
    {
        kanbanRuleRefRecId = _kanbanRuleRefRecId;
        return kanbanRuleRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScheduleNewKanbans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmScheduleNewKanbans(KanbanRuleRefRecId _scheduleNewKanbans = scheduleNewKanbans)
    {
        scheduleNewKanbans = _scheduleNewKanbans;
        return scheduleNewKanbans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCleanUpDeletedKanbans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmCleanUpDeletedKanbans(KanbanRuleRefRecId _cleanUpDeletedKanbans = cleanUpDeletedKanbans)
    {
        cleanUpDeletedKanbans = _cleanUpDeletedKanbans;
        return cleanUpDeletedKanbans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessBatchScheduleTask newStandard(boolean _scheduleNewKanbans, boolean _cleanUpDeletedKanbans, KanbanRuleRefRecId _kanbanRuleRefRecId = 0)
    {
        ReqEventProcessBatchScheduleTask  reqEventProcessBatchScheduleTask = new ReqEventProcessBatchScheduleTask();

        reqEventProcessBatchScheduleTask.parmKanbanRuleRefRecId(_kanbanRuleRefRecId);
        reqEventProcessBatchScheduleTask.parmScheduleNewKanbans(_scheduleNewKanbans);
        reqEventProcessBatchScheduleTask.parmCleanUpDeletedKanbans(_cleanUpDeletedKanbans);

        return reqEventProcessBatchScheduleTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockWorkCell</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean lockWorkCell(WrkCtrResourceGroupRefRecId _workCell)
    {
        boolean result = false;

        if (_workCell)
        {
            if (!kanbanJobSchedulerLock)
            {
                kanbanJobSchedulerLock = KanbanJobSchedulerLock::newStandard();
            }
            result = kanbanJobSchedulerLock.acquireOrHoldLockWorkCell(_workCell,true);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseLockWorkCell</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean releaseLockWorkCell(WrkCtrResourceGroupRefRecId _workCell)
    {
        boolean result = false;

        if (_workCell)
        {
            if (kanbanJobSchedulerLock)
            {
                result = kanbanJobSchedulerLock.releaseLockWorkCell(_workCell);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpDeletedKanbans</Name>
				<Source><![CDATA[
    private void cleanUpDeletedKanbans()
    {
        KanbanJobSchedule kanbanJobSchedule;
        KanbanJobCapacitySum kanbanJobCapacitySum;
        KanbanJob         kanbanJob;

        Map minimumSequencesToReschedule = new Map(Types::Container, Types::Real);

        ttsbegin;

        while select forupdate
            kanbanJobSchedule
            notexists join kanbanJob
                where kanbanJobSchedule.Job == kanbanJob.RecId
        {
            if (this.lockWorkCell(kanbanJobSchedule.WorkCell))
            {
                // remove from schedule
                kanbanJobCapacitySum = KanbanJobCapacitySum::findJob(kanbanJobSchedule.Job);
                KanbanJobScheduleCapacitySum::addKanbanJobCapacitySum(kanbanJobCapacitySum,kanbanJobSchedule,false);
                KanbanJobCapacitySum::removeCapacityConsumption(kanbanJobSchedule.Job);
                kanbanJobSchedule.delete();

                container lookupKey = [kanbanJobSchedule.WorkCell, kanbanJobSchedule.PlannedPeriod];

                if (!minimumSequencesToReschedule.exists(lookupKey) || minimumSequencesToReschedule.lookup(lookupKey) > kanbanJobSchedule.Sequence)
                {
                    minimumSequencesToReschedule.insert(lookupKey, kanbanJobSchedule.Sequence);
                }

                // release lock
                this.releaseLockWorkCell(kanbanJobSchedule.WorkCell);
            }
        }

        MapEnumerator enum = minimumSequencesToReschedule.getEnumerator();

        while (enum.moveNext())
        {
            WrkCtrResourceGroupRefRecId workCell;
            KanbanJobSchedulePlannedPeriod plannedPeriod;
            LineNum sequence;

            [workCell, plannedPeriod] = enum.currentKey();
            sequence = enum.currentValue();

            select firstonly kanbanJobSchedule
                order by Sequence
                where kanbanJobSchedule.WorkCell      == workCell
                   && kanbanJobSchedule.PlannedPeriod == plannedPeriod
                   && kanbanJobSchedule.Sequence      >  sequence;

            if (kanbanJobSchedule)
            {
                KanbanJobSchedulerMove::newStandard(KanbanJob::find(kanbanJobSchedule.Job), kanbanJobSchedule).run();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleNewKanbans</Name>
				<Source><![CDATA[
    private void scheduleNewKanbans()
    {
        KanbanRule kanbanRule;

        while select kanbanRule where (!kanbanRuleRefRecId) || (kanbanRule.RecId == kanbanRuleRefRecId)
        {
            LeanCommandAutoPlan leanCommandAutoPlan = LeanCommandAutoPlan::newStandard(kanbanRule, false);
            leanCommandAutoPlan.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (cleanUpDeletedKanbans)
        {
            this.cleanUpDeletedKanbans();
        }
        if (scheduleNewKanbans)
        {
            this.scheduleNewKanbans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Description description()
    {
        return "@SYS327325";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>