<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCImportNumberController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLCImportNumberController</c> class is the controller helper class for the
///    <c>BankLCNumber</c> field of the <c>BankLCImport</c>.
/// </summary>
public class BankLCImportNumberController extends BankLCNumberController
{
    BankLCImportStatus bankLCImportStatus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the query for the lookup.
    /// </summary>
    /// <returns>
    ///    The new query.
    /// </returns>
    protected Query  buildQuery()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        query = new Query();

        if (this.parmReturnAsBankLC())
        {
            queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tablenum(BankLC));
            queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tablenum(BankLCImport), tablenum(BankLC));

            queryBuildDataSource.joinMode(JoinMode::InnerJoin);
            queryBuildDataSource.relations(true);
        }
        else
        {
            queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tablenum(BankLCImport));
        }

        if (!isAllBankLCAllowed)
        {
            queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(BankLCImport, ImportStatus));
            queryBuildRange.value(queryValue(bankLCImportStatus));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSysTableLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>SysTableLookup</c> class.
    /// </summary>
    /// <param name="_control">
    ///    The form control to use to perform the lookup.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>SysTableLookup</c> class.
    /// </returns>
    protected SysTableLookup createSysTableLookup(FormStringControl _control)
    {
        SysTableLookup sysTableLookup;

        sysTableLookup = SysTableLookup::newParameters(tablenum(BankLCImport), _control);
        sysTableLookup.addLookupfield(fieldnum(BankLCImport, BankLCNumber), true);
        sysTableLookup.addLookupfield(fieldnum(BankLCImport, PurchTable));
        sysTableLookup.addLookupfield(fieldnum(BankLCImport, ApplicationDateTime));

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJumpRefForms</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the reference jumper form.
    /// </summary>
    /// <param name="_bankLCRefRecId">
    ///    The record ID of the letter of credit record to jump.
    /// </param>
    /// <returns>
    ///    The created form arguments.
    /// </returns>
    protected Args getJumpRefForms(BankLCRefRecId _bankLCRefRecId)
    {
        Args args;

        args = new Args(formstr(BankLCImport));

        args.menuItemName(menuItemDisplayStr(BankLCImport));

        if (_bankLCRefRecId != 0)
        {
            args.caller(this);
            args.record(BankLCImport::find(_bankLCRefRecId).getPurchTable());
        }

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>TableId</c> value of the subtable of the <c>BankLC</c> table.
    /// </summary>
    /// <returns>
    ///    The <c>TableId</c> value of the subtable.
    /// </returns>
    protected TableId getSubTable()
    {
        return tablenum(BankLCImport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BankLCImportNumberController</c> class.
    /// </summary>
    /// <param name="_isReturnAsBankLC">
    ///    A Boolean value that indicates whether the lookup record should be returned as the super type of
    ///    the letter of credit.
    /// </param>
    /// <param name="_isAllBankLCAllowed">
    ///    A Boolean value that indicates whether all the letter of credit records should be shown in the
    ///    selection list.
    /// </param>
    protected void new(
        boolean _isReturnAsBankLC   = false,
        boolean _isAllBankLCAllowed = false)
    {
        super(_isReturnAsBankLC, _isAllBankLCAllowed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCImportStatus</Name>
				<Source><![CDATA[
    public BankLCImportStatus parmBankLCImportStatus(BankLCImportStatus _bankLCImportStatus = bankLCImportStatus)
    {
        BankLCImportStatus = _bankLCImportStatus;
        return bankLCImportStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the resolving reference.
    /// </summary>
    /// <param name="_formReferenceControl">
    ///    The form control to request the resolve reference.
    /// </param>
    /// <returns>
    ///    The selected record.
    /// </returns>
    public Common resolveReference(FormReferenceGroupControl _formReferenceControl)
    {
        Common ret;
        BankLCImport bankLCImportLocal;

        ret = super(_formReferenceControl);

        if (ret)
        {
            bankLCImportLocal = BankLCImport::find(ret.RecId);
            if (!this.parmAllBankLCAllowed())
            {
                if (bankLCImportLocal.ImportStatus != bankLCImportStatus)
                {
                    bankLCImportLocal.clear();
                    ret.clear();
                }
            }

            if (!this.parmReturnAsBankLC())
            {
                ret = bankLCImportLocal;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BankLCImportNumberController</c> class.
    /// </summary>
    /// <param name="_isReturnAsBankLC">
    ///    A Boolean value that indicates whether the lookup record should be returned as the super type of
    ///    the letter of credit.
    /// </param>
    /// <param name="_isAllBankLCAllowed">
    ///    A Boolean value that indicates whether all letter of credit records should be shown in the
    ///    selection list.
    /// </param>
    /// <param name="_bankLCImportStatus">
    ///    The status of the letter of credit records to be shown in the selection list.
    /// </param>
    /// <returns>
    ///    The instance of the <c>BankLCImportNumberController</c> class.
    /// </returns>
    public static BankLCImportNumberController construct(
        boolean             _isReturnAsBankLC   = false,
        boolean             _isAllBankLCAllowed = false,
        BankLCImportStatus  _bankLCImportStatus = BankLCImportStatusType::Confirmed)
    {
        BankLCImportNumberController bankLCImportNumberController;

        bankLCImportNumberController = new BankLCImportNumberController(_isReturnAsBankLC, _isAllBankLCAllowed);
        bankLCImportNumberController.parmBankLCImportStatus(_bankLCImportStatus);

        return bankLCImportNumberController;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>