<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OXMLInventBaileeReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Executes logic for printing the Storage report to Microsoft Excel via Open XML SDK Framework.
/// </summary>
class OXMLInventBaileeReport_RU extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    protected const str ReportHeader = 'REPORTHEADER';
    protected const str PageHeader = 'PAGEHEADER';
    protected const str PageBody = 'PAGEBODY';
    protected const str GroupHeader = 'GROUPHEADER';
    protected const str GroupBody = 'GROUPBODY';
    protected const str TotalHeader = 'TOTALHEADER';
    protected const str TotalBody = 'TOTALBODY';

    protected const str ReportPeriod = 'ReportPeriod';
    protected const str CustName = 'CustName';
    protected const str WarehouseName = 'WarehouseName';

    protected const str AgreementClassificationName = 'AgreementClassificationName';
    protected const str DocumentTitle = 'DocumentTitle';
    protected const str ProductName = 'ProductName';
    protected const str ItemId = 'ItemId';
    protected const str InventBatchId = 'InventBatchId';
    protected const str FromDate = 'FromDate';
    protected const str ToDate = 'ToDate';
    protected const str CalcFromDate = 'CalcFromDate';
    protected const str LineQty = 'LineQty';
    protected const str UnitId = 'UnitId';
    protected const str Volume = 'Volume';
    protected const str NetWeight = 'NetWeight';
    protected const str GrossWeight = 'GrossWeight';
    protected const str DefaultProductName = 'DefaultProductName';
    protected const str DefaultItemId = 'DefaultItemId';
    protected const str CalcQty = 'CalcQty';
    protected const str CalcUnitId = 'CalcUnitId';
    protected const str CalcPrice = 'CalcPrice';
    protected const str CalcAmount = 'CalcAmount';
    protected const str CalcCurrencyCode = 'CalcCurrencyCode';

    protected const str GroupDefaultProductName = 'GroupDefaultProductName';
    protected const str GroupDefaultItemId = 'GroupDefaultItemId';
    protected const str GroupCalcQty = 'GroupCalcQty';
    protected const str GroupCalcUnitId = 'GroupCalcUnitId';
    protected const str GroupCalcPrice = 'GroupCalcPrice';
    protected const str GroupCalcAmount = 'GroupCalcAmount';
    protected const str GroupCalcCurrencyCode = 'GroupCalcCurrencyCode';

    protected const str TotalCalcAmount = 'TotalCalcAmount';
    protected const str TotalCalcCurrencyCode = 'TotalCalcCurrencyCode';

    int                 bodyLines;
    int                 groupLines;
    int                 totalsLines;

    DialogRunbase       dialog;

    FromDate            fromDateValue;
    DialogField         dialogFromDate;

    ToDate              toDateValue;
    DialogField         dialogToDate;

    InventLocationId    inventLocationId;
    DialogField         dialogInventLocationId;

    CustAccount         custAccount;
    DialogField         dialogCustAccountValue;
    protected const str DialogCustAccount = 'dialogCustAccount';

    SalesAgreementId     salesAgreementId;
    DialogField          dialogSalesAgreementIdValue;
    protected const str DialogSalesAgreementId = 'dialogSalesAgreementId';

    NoYes               summaryReport;
    DialogField         dialogSummaryReport;

    QueryRun            queryRun;

    InventBaileeCalcTable_RU        inventBaileeCalcTable;
    TmpInventBaileeReportTable_RU   tmpReportTable;

    InventTable     inventTable;
    InventTable     calcInventTable;
    InventOwner_RU  inventOwner;
    Counter         lineNum;
    str             lineNumStr;
    AgreementHeader agreementHeader;
    AgreementHeaderExt_RU agreementHeaderExt;

    protected const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of body section
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    /// <returns>
    /// height of body section
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        const real MinHeight = 15.0;

        if (_bookmark == PageBody)
        {
            return max(document.getNamedRangeHeightWrapped(AgreementClassificationName, agreementHeader.agreementClassification_RU().Name),
                       document.getNamedRangeHeightWrapped(DocumentTitle, agreementHeader.DocumentTitle),
                       document.getNamedRangeHeightWrapped(ProductName, inventTable.defaultProductName()),
                       document.getNamedRangeHeightWrapped(ItemId, inventTable.ItemId),
                       document.getNamedRangeHeightWrapped(InventBatchId, tmpReportTable.InventBatchId),
                       document.getNamedRangeHeightWrapped(UnitId, inventTable.inventUnitId()),
                       document.getNamedRangeHeightWrapped(DefaultProductName, calcInventTable.defaultProductName()),
                       document.getNamedRangeHeightWrapped(DefaultItemId, calcInventTable.ItemId),
                       document.getNamedRangeHeightWrapped(CalcUnitId, InventTable.inventUnitId()),
                       MinHeight);
        }
        if (_bookmark == GroupBody)
        {
            return max(document.getNamedRangeHeightWrapped(GroupDefaultProductName, calcInventTable.defaultProductName()),
                       document.getNamedRangeHeightWrapped(GroupDefaultItemId, calcInventTable.ItemId),
                       document.getNamedRangeHeightWrapped(GroupCalcUnitId, calcInventTable.inventUnitId()),
                       MinHeight);
        }
        return MinHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDetailReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes detail report (summaryReport option = false)
    /// </summary>
    protected void createDetailReport()
    {
        const int WidthInCols = 20;
        this.initSectionMap();
        this.setCurrentWorksheetNum(1, WidthInCols);
        this.execute(ReportHeader);
        this.execute(PageHeader);

        while select tmpReportTable
        {
            inventTable     = InventTable::find(tmpReportTable.ItemId);
            calcInventTable = InventTable::find(tmpReportTable.CalcItemId);
            inventOwner     = InventOwner_RU::find(tmpReportTable.InventOwnerId);
            agreementHeaderExt = AgreementHeaderExt_RU::find(inventOwner.RelatedAgreementHeaderExt);
            agreementHeader = AgreementHeader::find(agreementHeaderExt.AgreementHeader);

            if (this.mustCreateNewPage())
            {
                document.insertPageBreak(currentRow, curWorksheetNum);
                currentHeight = 0;
                this.execute(PageHeader);
            }

            this.execute(PageBody);
        }

        this.execute(GroupHeader);

        while select sum(CalcQty), sum(CalcAmountCur) from tmpReportTable
            group by CalcItemId, CalcPrice, CalcCurrencyCode
        {
            calcInventTable = InventTable::find(tmpReportTable.CalcItemId);
            this.execute(GroupBody);
        }

        this.execute(TotalHeader);

        while select sum(CalcAmountCur) from tmpReportTable
            group by CalcCurrencyCode
        {
            this.execute(TotalBody);
        }

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    protected void createReport()
    {
        if (summaryReport)
        {
            this.createSummaryReport();
        }
        else
        {
            this.createDetailReport();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummaryReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes summary report (summaryReport option = true)
    /// </summary>
    protected void createSummaryReport()
    {
        const int WidthInCols = 7;

        this.initSectionMap();
        this.setCurrentWorksheetNum(1, WidthInCols);
        this.execute(ReportHeader);
        this.execute(GroupHeader);

        while select sum(CalcQty), sum(CalcAmountCur) from tmpReportTable
            group by CalcItemId, CalcPrice, CalcCurrencyCode
        {
            calcInventTable = InventTable::find(tmpReportTable.CalcItemId);

            if (this.mustCreateNewPage())
            {
                document.insertPageBreak(currentRow, curWorksheetNum);
                currentHeight = 0;
                this.execute(GroupHeader);
            }

            this.execute(GroupBody);
        }

        this.execute(TotalHeader);

        while select sum(CalcAmountCur) from tmpReportTable
            group by CalcCurrencyCode
        {
            this.execute(TotalBody);
        }

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates dialog
    /// </summary>
    /// <returns>
    /// dialog object
    /// </returns>
    public Object dialog()
    {
        dialog = super();

        dialog.addGroup("@GLS115581");

        dialogInventLocationId = dialog.addFieldValue(extendedTypeStr(InventLocationId), inventLocationId);
        dialogInventLocationId.mandatory_RU(true);

        dialogFromDate = dialog.addFieldValue(extendedTypeStr(FromDate), fromDateValue);
        dialogFromDate.mandatory_RU(true);

        dialogToDate = dialog.addFieldValue(extendedTypeStr(ToDate), toDateValue);
        dialogToDate.mandatory_RU(true);

        dialog.addGroup("@GLS115589");

        dialog.customFieldName_RU(DialogCustAccount);
        dialogCustAccountValue = dialog.addFieldValue(extendedTypeStr(CustAccount), custAccount);
        dialogCustAccountValue.mandatory_RU(true);

        dialog.customFieldName_RU(DialogSalesAgreementId);
        dialogSalesAgreementIdValue = dialog.addFieldValue(extendedTypeStr(SalesAgreementId), salesAgreementId);

        dialog.addGroup("@GLS103250");
        dialogSummaryReport = dialog.addFieldValue(extendedTypeStr(NoYesId), summaryReport, "@GLS115611");

        this.dialogActivateFields();

        dialog.allowControlMethodOverload_RU(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogActivateFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables dialog fields
    /// </summary>
    protected void dialogActivateFields()
    {
        dialogSalesAgreementIdValue.enabled(dialogCustAccountValue.value() != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCustAccount_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes when cust account dialog field is modified
    /// </summary>
    /// <returns>
    /// true, if field value is modified, otherwise false
    /// </returns>
    protected boolean dialogCustAccount_modified()
    {
        boolean ret = dialog.curFormControl_RU().modified();

        dialog.dialogOnClient_RU().updateServer();

        dialogSalesAgreementIdValue.value('');

        this.dialogActivateFields();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSalesAgreementId_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes when sales agreement dialog field is lookuped
    /// </summary>
    protected void dialogSalesAgreementId_lookup()
    {
        SalesTable salesTable;

        dialog.dialogOnClient_RU().updateServer();

        salesTable.CustAccount = dialogCustAccountValue.value();
        SalesAgreementHeader::salesAgreementLookup(dialog.curFormControl_RU(), salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        const str SummaryReportName = 'InventBaileeSummaryReport';
        const str DetailReportName = 'InventBaileeDetailReport';

        if (summaryReport)
        {
            return SummaryReportName;
        }

        return DetailReportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file
    /// </summary>
    /// <returns>
    /// Postfix for a new file
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return '_' + inventBaileeCalcTable.CalcId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'MX2';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    /// fills specified report section with data
    /// </summary>
    /// <param name="_bookmark">
    /// Name of the section
    /// </param>
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case ReportHeader:
                this.fillReportHeader();
                break;
            case PageBody:
                this.fillPageBody();
                break;
            case GroupBody:
                this.fillGroupBody();
                break;
            case TotalBody:
                this.fillTotalBody();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillGroupBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates report group body bookmarks with corresponding values.
    /// </summary>
    private void fillGroupBody()
    {
        this.insertValueToSection(GroupDefaultProductName, calcInventTable.defaultProductName());
        this.insertValueToSection(GroupDefaultItemId, calcInventTable.ItemId);
        this.insertValueToSection(GroupCalcQty, tmpReportTable.CalcQty);
        this.insertValueToSection(GroupCalcUnitId, calcInventTable.inventUnitId());
        this.insertValueToSection(GroupCalcPrice, tmpReportTable.CalcPrice);
        this.insertValueToSection(GroupCalcAmount, tmpReportTable.CalcAmountCur);
        this.insertValueToSection(GroupCalcCurrencyCode, tmpReportTable.CalcCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates report page body bookmarks with corresponding values.
    /// </summary>
    private void fillPageBody()
    {
        this.insertValueToSection(AgreementClassificationName, agreementHeader.agreementClassification_RU().Name);
        this.insertValueToSection(DocumentTitle, agreementHeader.DocumentTitle);
        this.insertValueToSection(ProductName, inventTable.defaultProductName());
        this.insertValueToSection(ItemId, inventTable.ItemId);
        this.insertValueToSection(InventBatchId, tmpReportTable.InventBatchId);
        this.insertValueToSection(FromDate, tmpReportTable.FromDate);
        this.insertValueToSection(ToDate, tmpReportTable.ToDate);
        this.insertValueToSection(CalcFromDate, tmpReportTable.CalcFromDate);
        this.insertValueToSection(LineQty, tmpReportTable.Qty);
        this.insertValueToSection(UnitId, inventTable.inventUnitId());
        this.insertValueToSection(Volume, tmpReportTable.Volume);
        this.insertValueToSection(NetWeight, tmpReportTable.NetWeight);
        this.insertValueToSection(GrossWeight, tmpReportTable.GrossWeight);
        this.insertValueToSection(DefaultProductName, calcInventTable.defaultProductName());
        this.insertValueToSection(DefaultItemId, calcInventTable.ItemId);
        this.insertValueToSection(CalcQty, tmpReportTable.CalcQty);
        this.insertValueToSection(CalcUnitId, InventTable.inventUnitId());
        this.insertValueToSection(CalcPrice, tmpReportTable.CalcPrice);
        this.insertValueToSection(CalcAmount, tmpReportTable.CalcAmountCur);
        this.insertValueToSection(CalcCurrencyCode, tmpReportTable.CalcCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates report header bookmarks with corresponging values.
    /// </summary>
    private void fillReportHeader()
    {
        this.insertValueToSection(ReportPeriod, strFmt("@GLS115663", fromDateValue, toDateValue));
        this.insertValueToSection(CustName, CustTable::find(custAccount).name());
        this.insertValueToSection(WarehouseName, InventLocation::find(inventLocationId).Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotalBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates report total body bookmarks with correspongind bookmarks.
    /// </summary>
    private void fillTotalBody()
    {
        this.insertValueToSection(TotalCalcAmount, tmpReportTable.CalcAmountCur);
        this.insertValueToSection(TotalCalcCurrencyCode, tmpReportTable.CalcCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets values from dialog
    /// </summary>
    /// <returns>
    /// true, if dialog closed ok, otherwise false
    /// </returns>
    public boolean getFromDialog()
    {
        fromDateValue       = dialogFromDate.value();
        toDateValue         = dialogToDate.value();
        inventLocationId    = dialogInventLocationId.value();
        custAccount         = dialogCustAccountValue.value();
        salesAgreementId    = dialogSalesAgreementIdValue.value();
        summaryReport       = dialogSummaryReport.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        InventOwner_RU  inventOwnerCalc;

        super();

        if (! queryRun)
        {
            queryRun = new QueryRun(this.query());
        }

        if (inventBaileeCalcTable)
        {
            inventLocationId = inventBaileeCalcTable.InventLocationId;
            if (inventBaileeCalcTable.prevCalcTable())
            {
                fromDateValue = inventBaileeCalcTable.prevCalcTable().CalcDate + 1;
            }
            else
            {
                fromDateValue = dateNull();
            }
            toDateValue      = inventBaileeCalcTable.CalcDate;
            inventOwnerCalc  = inventBaileeCalcTable.inventOwner();
            custAccount      = inventOwnerCalc.AccountNumRelated;
            salesAgreementId = AgreementHeaderExt_RU::find(inventOwnerCalc.RelatedAgreementHeaderExt).AgreementId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes sections map by report sections
    /// </summary>
    protected void initSectionMap()
    {
        this.addSection(ReportHeader);
        if (!summaryReport)
        {
            this.addSection(PageHeader);
            this.addSection(PageBody, true);
        }
        this.addSection(GroupHeader);
        this.addSection(GroupBody, true);
        this.addSection(TotalHeader);
        this.addSection(TotalBody);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a new page should be created
    /// </summary>
    /// <returns>
    /// true, if new page should be created, otherwise false
    /// </returns>
    private boolean mustCreateNewPage()
    {
        real    requiredHeight;
        real    groupHeight;
        real    totalsHeight;

        if (summaryReport)
        {
            requiredHeight  = this.getRangeHeight(GroupBody);

            totalsHeight    = conPeek(mapSections.lookup(TotalHeader), #posSectionHeight);

            requiredHeight += totalsHeight * (totalsLines + 1);
        }
        else
        {
            requiredHeight  = this.getRangeHeight(PageBody);

            groupHeight     = conPeek(mapSections.lookup(GroupHeader), #posSectionHeight);
            totalsHeight    = conPeek(mapSections.lookup(TotalHeader), #posSectionHeight);

            requiredHeight += groupHeight * (groupLines + 1) + totalsHeight * (totalsLines + 1);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs CurrentList values to container
    /// </summary>
    /// <returns>
    /// packed container with CurrentList values
    /// </returns>
    public container pack()
    {
        return [CurrentVersion, fromDateValue, toDateValue, inventLocationId, custAccount, salesAgreementId, summaryReport, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    public CustAccount parmCustAccount(CustAccount _custAccount = custAccount)
    {
        custAccount = _custAccount;
        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDateValue)
    {
        fromDateValue = _fromDate;
        return fromDateValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBaileeCalcTable</Name>
				<Source><![CDATA[
    public InventBaileeCalcTable_RU parmInventBaileeCalcTable(InventBaileeCalcTable_RU _inventBaileeCalcTable = inventBaileeCalcTable)
    {
        inventBaileeCalcTable = _inventBaileeCalcTable;
        return inventBaileeCalcTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAgreementId</Name>
				<Source><![CDATA[
    public SalesAgreementId parmSalesAgreementId(SalesAgreementId _salesAagreementId = salesAgreementId)
    {
        salesAgreementId = _salesAagreementId;
        return salesAgreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSummaryReport</Name>
				<Source><![CDATA[
    public NoYes parmSummaryReport(NoYes _summaryReport = summaryReport)
    {
        summaryReport = _summaryReport;
        return summaryReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDateValue)
    {
        toDateValue = _toDate;
        return toDateValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perpares data for the report.
    /// </summary>
    /// <returns>
    /// <c>boolean</c> indicating whether data population was successful.
    /// </returns>
    private boolean prepareData()
    {
        container                       packedReportData;
        container                       packedRecordCon;
        int                             i, len;
        TmpInventBaileeReportTable_RU   tmpReportTableLoc;

        // Only one server call is made here. TmpInventBaileeReportTable_RU is a TMP InMemory table and lives on class instance tier (where class was instantiated), so no extra RPC calls are made.
        packedReportData = OXMLInventBaileeReport_RU::populateTmpDataCon(queryRun.pack(), fromDateValue, toDateValue, inventLocationId, custAccount, salesAgreementId);

        len = conLen(packedReportData);

        for (i = 1; i <= len; i++)
        {
            packedRecordCon = conPeek(packedReportData, i);
            tmpReportTable = con2Buf(packedRecordCon, tmpReportTable);
            tmpReportTable.insert();
        }

        tmpReportTableLoc.setTmpData(tmpReportTable);
        select count (RecId) from tmpReportTableLoc;
        bodyLines = any2int(tmpReportTableLoc.RecId);

        groupLines  = 0;
        while select RecId from tmpReportTableLoc
            group by CalcItemId, CalcPrice, CalcCurrencyCode
        {
            groupLines++;
        }

        totalsLines = 0;
        while select RecId from tmpReportTableLoc
            group by CalcCurrencyCode
        {
            totalsLines++;
        }

        return tmpReportTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report query
    /// </summary>
    /// <returns>
    /// Report query
    /// </returns>
    protected Query query()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbdsCalcTrans;
        QueryBuildDataSource    qbdsCalcTable;
        QueryBuildDataSource    qbdsInventOwner;

        qbdsCalcTrans = query.addDataSource(tableNum(InventBaileeCalcTrans_RU));
        qbdsCalcTrans.orderMode(OrderMode::GroupBy);
        qbdsCalcTrans.addGroupByField(fieldNum(InventBaileeCalcTrans_RU, ItemId));
        qbdsCalcTrans.addGroupByField(fieldNum(InventBaileeCalcTrans_RU, InventBatchId));
        qbdsCalcTrans.addGroupByField(fieldNum(InventBaileeCalcTrans_RU, FromDate));
        qbdsCalcTrans.addGroupByField(fieldNum(InventBaileeCalcTrans_RU, ToDate));
        qbdsCalcTrans.addGroupByField(fieldNum(InventBaileeCalcTrans_RU, CalcFreeDays));
        qbdsCalcTrans.addGroupByField(fieldNum(InventBaileeCalcTrans_RU, CalcItemId));
        qbdsCalcTrans.addGroupByField(fieldNum(InventBaileeCalcTrans_RU, CalcPrice));
        qbdsCalcTrans.addSelectionField(fieldNum(InventBaileeCalcTrans_RU, Qty), SelectionField::Sum);
        qbdsCalcTrans.addSelectionField(fieldNum(InventBaileeCalcTrans_RU, NetWeight), SelectionField::Sum);
        qbdsCalcTrans.addSelectionField(fieldNum(InventBaileeCalcTrans_RU, GrossWeight), SelectionField::Sum);
        qbdsCalcTrans.addSelectionField(fieldNum(InventBaileeCalcTrans_RU, Volume), SelectionField::Sum);
        qbdsCalcTrans.addSelectionField(fieldNum(InventBaileeCalcTrans_RU, CalcQty), SelectionField::Sum);
        qbdsCalcTrans.addSelectionField(fieldNum(InventBaileeCalcTrans_RU, CalcAmountCur), SelectionField::Sum);

        qbdsCalcTable = qbdsCalcTrans.addDataSource(tableNum(InventBaileeCalcTable_RU));
        qbdsCalcTable.joinMode(JoinMode::InnerJoin);
        qbdsCalcTable.relations(true);
        qbdsCalcTable.orderMode(OrderMode::GroupBy);
        qbdsCalcTable.addGroupByField(fieldNum(InventBaileeCalcTable_RU, InventOwnerId));
        qbdsCalcTable.addGroupByField(fieldNum(InventBaileeCalcTable_RU, CurrencyCode));

        qbdsInventOwner = qbdsCalcTable.addDataSource(tableNum(InventOwner_RU));
        qbdsInventOwner.joinMode(JoinMode::InnerJoin);
        qbdsInventOwner.relations(true);
        qbdsInventOwner.orderMode(OrderMode::GroupBy);
        qbdsInventOwner.addGroupByField(fieldNum(InventOwner_RU, TableId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs report
    /// </summary>
    public void run()
    {
        try
        {
            if (this.prepareData())
            {
                super();
            }
            else
            {
                info("@GLS101555");
            }
        }
        catch(Exception::Error)
        {
            error("@GLS115651");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of report template
    /// </summary>
    /// <returns>
    /// name of report template
    /// </returns>
    protected Filename templateName()
    {
        if (summaryReport)
        {
            return resourceStr(InventBaileeSummaryReport_RU);
        }

        return resourceStr(InventBaileeDetailReport_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns aproximated number of report cells for progress bar calculation
    /// </summary>
    /// <returns>
    /// aproximated number of report cells
    /// </returns>
    protected Counter totalCells()
    {
        const int FixedCells = 3;
        const int BodyCells = 20;
        const int GroupCells = 7;
        const int TotalCells = 2;

        if (summaryReport)
        {
            return FixedCells + GroupCells * groupLines + TotalCells * totalsLines;
        }

        return FixedCells + BodyCells * bodyLines + GroupCells * groupLines + TotalCells * totalsLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks CurrentList values from container
    /// </summary>
    /// <param name="packedClass">
    /// container with CurrentList values
    /// </param>
    /// <returns>
    /// true, if values unpacked ok, otherwise false
    /// </returns>
    public boolean unpack(container packedClass)
    {
        Integer     version     = conPeek(packedClass,1);
        container   packedQuery;

        switch (version)
        {
            case CurrentVersion:
                [version, fromDateValue, toDateValue, inventLocationId, custAccount, salesAgreementId, summaryReport, packedQuery] = packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates values entered in dialog
    /// </summary>
    /// <param name="calledFrom">
    /// calledFrom object
    /// </param>
    /// <returns>
    /// true, if values validated ok, otherwise false
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ok = true;

        if (! inventLocationId)
        {
            ok = checkFailed("@SYS85069");
        }
        if (! fromDateValue)
        {
            ok = checkFailed("@GLS115677");
        }
        if (! toDateValue)
        {
            ok = checkFailed("@GLS115678");
        }
        if (fromDateValue && toDateValue && fromDateValue > toDateValue)
        {
            ok = checkFailed("@SYS91020");
        }
        if (! custAccount)
        {
            ok = checkFailed("@GLS115671");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static OXMLInventBaileeReport_RU construct()
    {
        return new OXMLInventBaileeReport_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS115550";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        OXMLInventBaileeReport_RU   inventBaileeReport;

        inventBaileeReport = OXMLInventBaileeReport_RU::construct();

        if (args && args.record() && args.record().TableId == tableNum(InventBaileeCalcTable_RU))
        {
            inventBaileeReport.parmInventBaileeCalcTable(args.record());
        }
        if (inventBaileeReport.prompt())
        {
            inventBaileeReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpDataCon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates report data and returns them packed in a container.
    /// </summary>
    /// <param name="_packedQueryRun">
    /// Packed QueryRun to originate the query on.
    /// </param>
    /// <param name="_fromDate">
    /// Rge <c>_fromDate</c> parameter.
    /// </param>
    /// <param name="_toDate">
    /// The <c>_toDate</c> parameter.
    /// </param>
    /// <param name="_inventLocationId">
    /// The <c>_inventLocationId</c> parameter.
    /// </param>
    /// <param name="_custAccount">
    /// The <c>_custAccount</c> parameter.
    /// </param>
    /// <param name="_salesAgreementId">
    /// The <c>_salesAgreementId</c> parameter.
    /// </param>
    /// <returns>
    /// <c>container</c> containing all records packed.
    /// </returns>
    /// <remarks>
    /// This method runs on server to minimize c/s RPC roundtrips.
    /// </remarks>
    private static container populateTmpDataCon(container         _packedQueryRun,
                                                      FromDate          _fromDate,
                                                      ToDate            _toDate,
                                                      InventLocationId  _inventLocationId,
                                                      CustAccount       _custAccount,
                                                      SalesAgreementId  _salesAgreementId)
    {
        QueryRun                        localQueryRun = new QueryRun(_packedQueryRun);
        QueryBuildDataSource            qbdsCalcTrans;
        QueryBuildDataSource            qbdsCalcTable;
        QueryBuildDataSource            qbdsInventOwner;
        QueryBuildRange                 queryBuildRange;
        InventBaileeCalcTable_RU        calcTable;
        InventBaileeCalcTrans_RU        calcTrans;
        TmpInventBaileeReportTable_RU   tmpReportTableLoc;
        container                       recordCon;
        container                       ret;

        qbdsCalcTrans = localQueryRun.query().dataSourceTable(tableNum(InventBaileeCalcTrans_RU));
        queryBuildRange = qbdsCalcTrans.addRange(fieldNum(InventBaileeCalcTrans_RU, FromDate));
        queryBuildRange = qbdsCalcTrans.addRange(fieldNum(InventBaileeCalcTrans_RU, FromDate));
        queryBuildRange.value(strFmt('((%1.%2<=%3) && (%1.%4>=%3))',
                                     qbdsCalcTrans.name(),
                                     fieldStr(InventBaileeCalcTrans_RU, FromDate),
                                     date2StrXpp(_fromDate),
                                     fieldStr(InventBaileeCalcTrans_RU, ToDate)));
        queryBuildRange = qbdsCalcTrans.addRange(fieldNum(InventBaileeCalcTrans_RU, FromDate));
        queryBuildRange.value(strFmt('((%1.%2>=%3) && (%1.%2<=%4))',
                                     qbdsCalcTrans.name(),
                                     fieldStr(InventBaileeCalcTrans_RU, FromDate),
                                     date2StrXpp(_fromDate),
                                     date2StrXpp(_toDate)));

        qbdsCalcTable = localQueryRun.query().dataSourceTable(tableNum(InventBaileeCalcTable_RU));
        qbdsCalcTable.addRange(fieldNum(InventBaileeCalcTable_RU, InventLocationId)).value(_inventLocationId);

        qbdsInventOwner = localQueryRun.query().dataSourceTable(tableNum(InventOwner_RU));
        if (_custAccount)
        {
            qbdsInventOwner.addRange(fieldNum(InventOwner_RU, AccountNumRelated)).value(_custAccount);
        }
        if (_salesAgreementId)
        {
            qbdsInventOwner.addRange(fieldNum(InventOwner_RU, RelatedAgreementHeaderExt)).value(
                queryValue(AgreementHeaderExt_RU::findByAgreementId(_salesAgreementId).RecId));
        }

        while (localQueryRun.next())
        {
            calcTrans = localQueryRun.get(tableNum(InventBaileeCalcTrans_RU));
            calcTable = localQueryRun.get(tableNum(InventBaileeCalcTable_RU));

            tmpReportTableLoc.clear();
            tmpReportTableLoc.InventOwnerId    = calcTable.InventOwnerId;
            tmpReportTableLoc.ItemId           = calcTrans.ItemId;
            tmpReportTableLoc.InventBatchId    = calcTrans.InventBatchId;
            tmpReportTableLoc.FromDate         = max(_fromDate, calcTrans.FromDate);
            tmpReportTableLoc.ToDate           = min(_toDate, calcTrans.ToDate);
            tmpReportTableLoc.CalcFromDate     = max(_fromDate, calcTrans.FromDate + calcTrans.CalcFreeDays);

            tmpReportTableLoc.Qty              = calcTrans.Qty;
            tmpReportTableLoc.NetWeight        = calcTrans.NetWeight;
            tmpReportTableLoc.GrossWeight      = calcTrans.GrossWeight;
            tmpReportTableLoc.Volume           = calcTrans.Volume;
            tmpReportTableLoc.CalcItemId       = calcTrans.CalcItemId;
            tmpReportTableLoc.CalcPrice        = calcTrans.CalcPrice;
            // must recalculate calc qty and amount
            tmpReportTableLoc.CalcQty          = InventBaileeCalcUnitOperation_RU::calc(calcTrans.calcItemUnitId(),
                                                                                     calcTrans.Qty,
                                                                                     calcTrans.NetWeight,
                                                                                     calcTrans.GrossWeight,
                                                                                     calcTrans.Volume,
                                                                                     max(0, tmpReportTableLoc.ToDate - tmpReportTableLoc.CalcFromDate + 1));
            tmpReportTableLoc.CalcAmountCur    = tmpReportTableLoc.CalcQty * tmpReportTableLoc.CalcPrice;
            tmpReportTableLoc.CalcCurrencyCode = calcTable.CurrencyCode;

            recordCon = buf2Con(tmpReportTableLoc);

            ret = conIns(ret, conLen(ret) + 1, recordCon);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>