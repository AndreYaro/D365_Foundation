<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocReceivedXmlMatchingValidation_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class responsible to handle the camparison and validation between different values xml document (that represents a fiscal document)
/// and vendor invoice
/// </summary>
class EFDocReceivedXmlMatchingValidation_BR extends FiscalDocumentValidationBase_BR
{
    EFDocumentReceivedXml_BR                receivedXml;
    EFDocumentReceivedXmlView_BR            receivedXmlView;
    EFDocReceivedXmlApprovedDivergences_BR  approvedAmounts;
    EFDocRecXmlMatchingValidationChecker_BR validationChecker;
    FiscalDocumentParmDataAmountCalc_BR     amountCalculator;
    boolean                                 hasApprovedAmountDivergences;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateFiscalDocumentAmounts</Name>
				<Source><![CDATA[
    private void calculateFiscalDocumentAmounts()
    {
        if (amountCalculator == null)
        {
            amountCalculator = new FiscalDocumentParmDataAmountCalc_BR(this.parmFiscalDocumentParmData());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendorInvoiceDivergences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if there is some divergence between the vendor invoice and the received xml, and with the approved divergences, if they exists.
    /// </summary>
    /// <returns>
    /// True if validation is successful; otherwise, false.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean checkVendorInvoiceDivergences()
    {
        boolean thirdPartyInfoValidation;
        boolean amountValidation;

        receivedXml = this.getReceivedXml();

        if (this.shouldMatchAgainstPo() == false)
        {
            return true;
        }

        this.calculateFiscalDocumentAmounts();

        receivedXmlView = EFDocumentReceivedXmlView_BR::findOrCreate(receivedXml.RecId);

        thirdPartyInfoValidation = this.validateThirdPartyInfo();
        hasApprovedAmountDivergences = receivedXml.hasApprovedDivergences();

        if (hasApprovedAmountDivergences)
        {
            approvedAmounts = EFDocReceivedXmlApprovedDivergences_BR::findReceivedXml(receivedXml.recId);
            amountValidation = this.validateVendInvAgainstApprovedAmounts();
        }
        else
        {
            amountValidation = this.validateVendInvoiceAgainstReceivedXml();
        }

        return thirdPartyInfoValidation && amountValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareApprovedAmount</Name>
				<Source><![CDATA[
    private boolean compareApprovedAmount(real _approvedValue, real _xmlValue, real _actualValue, FieldName _fieldName)
    {
        if (_approvedValue != _actualValue && _xmlValue != _actualValue)
        {
            logger.logError(strFmt("@SYS4004257", _fieldName, _actualValue, _approvedValue));
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareVendorInfo</Name>
				<Source><![CDATA[
    private boolean compareVendorInfo(str _expectedValue, str _actualValue, FieldName _fieldName)
    {
        if (_expectedValue != _actualValue)
        {
            logger.logError(strFmt("@SYS4004087", _fieldName, _actualValue, _expectedValue));
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareXmlAmount</Name>
				<Source><![CDATA[
    private boolean compareXmlAmount(real _xmlValue, real _actualValue, FieldName _fieldName)
    {
        if (_xmlValue != _actualValue)
        {
            logger.logError(strFmt("@SYS4010063", _fieldName, _actualValue, _xmlValue));
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceivedXml</Name>
				<Source><![CDATA[
    private EFDocumentReceivedXml_BR getReceivedXml()
    {
        EFDocumentReceivedXml_BR efDocumentReceivedXml;

        select firstOnly RecId, AccessKey
            from efDocumentReceivedXml
                where efDocumentReceivedXml.Accesskey == this.parmFiscalDocumentParmData().parmFiscalDocumentAccessKey();

        return efDocumentReceivedXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a new instance of the <c>EFDocReceivedXmlMatchingValidation_BR</c> class
    /// </summary>
    /// <param name="_logger">
    /// An <c>ILogger_BR</c> that will be used to log validation errors
    /// </param>
    public void new(ILogger_BR _logger = new InfoLogLogger_BR())
    {
        super(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldMatchAgainstPo</Name>
				<Source><![CDATA[
    private boolean shouldMatchAgainstPo()
    {
        if (validationChecker == null)
        {
            validationChecker = new EFDocRecXmlMatchingValidationChecker_BR(receivedXml.RecId, this.parmFiscalDocumentParmData().parmFiscalEstablishmentID());
        }

        return validationChecker.isRequired();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateThirdPartyInfo</Name>
				<Source><![CDATA[
    private boolean validateThirdPartyInfo()
    {
        boolean         checkResult             = true;

        CNPJCPFNum_BR   thirdPartyCnpjCpfNum    = this.parmFiscalDocumentParmData().parmThirdPartyCNPJCPF();
        IENum_BR        thirdPartyIeNum         = this.parmFiscalDocumentParmData().parmThirdPartyIE();

        checkResult = this.compareVendorInfo(receivedXmlView.ThirdPartyCnpj, thirdPartyCnpjCpfNum, fieldPName(EFDocumentReceivedXmlView_BR, ThirdPartyCnpj)) && checkResult;
        checkResult = this.compareVendorInfo(receivedXmlView.ThirdPartyIE  , thirdPartyIeNum     , fieldPName(EFDocumentReceivedXmlView_BR, ThirdPartyIE))   && checkResult;

        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendInvAgainstApprovedAmounts</Name>
				<Source><![CDATA[
    private boolean validateVendInvAgainstApprovedAmounts()
    {
        boolean checkResult = true;

        checkResult = this.compareApprovedAmount(approvedAmounts.TotalMarkupFreightAmount  , receivedXmlView.TotalMarkupFreightAmount  , amountCalculator.getSumFreight()  , fieldPName(EFDocReceivedXmlApprovedDivergences_BR, TotalMarkupFreightAmount))   && checkResult;
        checkResult = this.compareApprovedAmount(approvedAmounts.TotalMarkupInsuranceAmount, receivedXmlView.TotalMarkupInsuranceAmount, amountCalculator.getSumInsurance(), fieldPName(EFDocReceivedXmlApprovedDivergences_BR, TotalMarkupInsuranceAmount)) && checkResult;
        checkResult = this.compareApprovedAmount(approvedAmounts.TotalMarkupOtherAmount    , receivedXmlView.TotalMarkupOtherAmount    , amountCalculator.getSumOthers()   , fieldPName(EFDocReceivedXmlApprovedDivergences_BR, TotalMarkupOtherAmount))     && checkResult;

        checkResult = this.compareApprovedAmount(approvedAmounts.ICMSAmount      , receivedXmlView.ICMSAmount      , amountCalculator.getSumIcmsTotalAmount()  , fieldPName(EFDocReceivedXmlApprovedDivergences_BR, ICMSAmount))       && checkResult;
        checkResult = this.compareApprovedAmount(approvedAmounts.ICMSSTAmount    , receivedXmlView.ICMSSTAmount    , amountCalculator.getSumIcmsStTotalAmount(), fieldPName(EFDocReceivedXmlApprovedDivergences_BR, ICMSSTAmount))     && checkResult;
        checkResult = this.compareApprovedAmount(approvedAmounts.IPIAmount       , receivedXmlView.IPIAmount       , amountCalculator.getSumIpiTotalAmount()   , fieldPName(EFDocReceivedXmlApprovedDivergences_BR, IPIAmount))        && checkResult;
        checkResult = this.compareApprovedAmount(approvedAmounts.ICMSBaseAmount  , receivedXmlView.ICMSBaseAmount  , amountCalculator.getSumIcmsBaseAmount()   , fieldPName(EFDocReceivedXmlApprovedDivergences_BR, ICMSBaseAmount))   && checkResult;
        checkResult = this.compareApprovedAmount(approvedAmounts.ICMSSTBaseAmount, receivedXmlView.ICMSSTBaseAmount, amountCalculator.getSumIcmsStBaseAmount() , fieldPName(EFDocReceivedXmlApprovedDivergences_BR, ICMSSTBaseAmount)) && checkResult;

        checkResult = this.compareApprovedAmount(approvedAmounts.TotalAmount       , receivedXmlView.TotalAmount       , amountCalculator.getFiscalDocumentTotalAmount()           , fieldPName(EFDocReceivedXmlApprovedDivergences_BR, TotalAmount))        && checkResult;
        checkResult = this.compareApprovedAmount(approvedAmounts.TotalProductAmount, receivedXmlView.TotalProductAmount, amountCalculator.getSumFiscalDocumentTotalProductsAmount(), fieldPName(EFDocReceivedXmlApprovedDivergences_BR, TotalProductAmount)) && checkResult;

        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendInvoiceAgainstReceivedXml</Name>
				<Source><![CDATA[
    private boolean validateVendInvoiceAgainstReceivedXml()
    {
        boolean checkResult = true;

        checkResult = this.compareXmlAmount(receivedXmlView.TotalMarkupFreightAmount  , amountCalculator.getSumFreight()  , fieldPName(EFDocumentReceivedXmlView_BR, TotalMarkupFreightAmount))   && checkResult;
        checkResult = this.compareXmlAmount(receivedXmlView.TotalMarkupInsuranceAmount, amountCalculator.getSumInsurance(), fieldPName(EFDocumentReceivedXmlView_BR, TotalMarkupInsuranceAmount)) && checkResult;
        checkResult = this.compareXmlAmount(receivedXmlView.TotalMarkupOtherAmount    , amountCalculator.getSumOthers()   , fieldPName(EFDocumentReceivedXmlView_BR, TotalMarkupOtherAmount))     && checkResult;

        checkResult = this.compareXmlAmount(receivedXmlView.ICMSAmount      , amountCalculator.getSumIcmsTotalAmount()  , fieldPName(EFDocumentReceivedXmlView_BR, ICMSAmount))       && checkResult;
        checkResult = this.compareXmlAmount(receivedXmlView.ICMSSTAmount    , amountCalculator.getSumIcmsStTotalAmount(), fieldPName(EFDocumentReceivedXmlView_BR, ICMSSTAmount))     && checkResult;
        checkResult = this.compareXmlAmount(receivedXmlView.IPIAmount       , amountCalculator.getSumIpiTotalAmount()   , fieldPName(EFDocumentReceivedXmlView_BR, IPIAmount))        && checkResult;
        checkResult = this.compareXmlAmount(receivedXmlView.ICMSBaseAmount  , amountCalculator.getSumIcmsBaseAmount()   , fieldPName(EFDocumentReceivedXmlView_BR, ICMSBaseAmount))   && checkResult;
        checkResult = this.compareXmlAmount(receivedXmlView.ICMSSTBaseAmount, amountCalculator.getSumIcmsStBaseAmount() , fieldPName(EFDocumentReceivedXmlView_BR, ICMSSTBaseAmount)) && checkResult;

        checkResult = this.compareXmlAmount(receivedXmlView.TotalAmount       , amountCalculator.getFiscalDocumentTotalAmount()           , fieldPName(EFDocumentReceivedXmlView_BR, TotalAmount))        && checkResult;
        checkResult = this.compareXmlAmount(receivedXmlView.TotalProductAmount, amountCalculator.getSumFiscalDocumentTotalProductsAmount(), fieldPName(EFDocumentReceivedXmlView_BR, TotalProductAmount)) && checkResult;

        return checkResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>