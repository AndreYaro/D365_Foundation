<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_OC6</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetReport_OC6 extends RAssetReport implements ERIReportPostProcessingSupported
{
    protected Map mapTrans;
    protected Counter countAqui;
    protected Counter countDisp;
    protected Counter countAdj;
    protected Counter countRev;
    protected int recCount;
    protected int diffCount;
    protected int diffTotal;
    protected MapIterator mi;

    protected RAssetTrans rAssetTrans;
    protected RAssetMoveHist rAssetMoveHist;
    protected RAssetDeprProfile rAssetDeprProfile;

    protected DialogField assetStandardField;
    protected DialogField toDateField;

    protected TransDate toDate;
    protected TransDate lastRevDate;

    protected RAssetReport_ShortDescription shortDescription;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalFields</Name>
				<Source><![CDATA[
    public container additionalFields()
    {
        return super() + [fieldNum(RAssetDocument, StandardId), fieldNum(RAssetDocument, ToDate)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeDocumentWrite</Name>
				<Source><![CDATA[
    public void beforeDocumentWrite(RAssetDocument _document)
    {
        super(_document);

        this.assertNoOtherDocumentWithSameStandardID(_document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInsert</Name>
				<Source><![CDATA[
    // Inserting more than one document OC14 for asset standard per asset is not allowed
    public boolean canInsert(RAssetDocument _document)
    {
        return ! RAssetDocument::existByStandardID(_document.AssetId, _document.Type, _document.StandardId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret = super();

        if (ret)
        {
            if (rAssetTable.Status == RAssetStatus::NoAcquisition
                || rAssetTable.Status == RAssetStatus::PurchInvoice)
            {
                ret = checkFailed(strFmt("@GLS116210", rAssetTable.AccountNum));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>comment</Name>
				<Source><![CDATA[
    protected str comment()
    {
        return "@GLS116444";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateFromBusinessAccounting</Name>
				<Source><![CDATA[
    protected TransDate dateFromBusinessAccounting()
    {
        return rAssetStandards.DisposalDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected Dialog dialog()
    {
        Dialog          dlg = super();

        toDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.documentDate(rAssetTable.InvKartDate ? rAssetTable.InvKartDate : rAssetTable.AcquisitionDate);
        this.documentNumber(rAssetTable.InvKartNumber);

        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    protected boolean getFromDialog()
    {
        super();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocumentValue</Name>
				<Source><![CDATA[
    public void initDocumentValue(RAssetDocument _document)
    {
        super(_document);

        _document.ToDate = toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRAssetDocument</Name>
				<Source><![CDATA[
    public void initFromRAssetDocument(RAssetDocument _document)
    {
        super(_document);

        rAssetStandards = _document.findStandards();
        toDate = _document.ToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReport</Name>
				<Source><![CDATA[
    protected boolean initReport()
    {
        const str colItemName = 'A';
        const str colQty = 'AF';

        int modeSwt;
        boolean ret = super();
        boolean firstAcq;

        if (ret)
        {
            this.employee(this.transDate());

            mapTrans = new Map(Types::Container, Types::Container);

            while select rAssetTrans
                order by TransDate asc, RecId asc
                where rAssetTrans.AccountNum == rAssetTable.AccountNum
                    && rAssetTrans.TransDate <= toDate
                    && rAssetTrans.AssetStandardId == rAssetStandards.AssetStandardId
                    && (rAssetTrans.AssetTransType == RAssetTransType::Acquisition
                        || rAssetTrans.AssetTransType == RAssetTransType::AcquisitionAdj
                        || rAssetTrans.AssetTransType == RAssetTransType::Revaluation
                        || rAssetTrans.AssetTransType == RAssetTransType::DisposalScrap
                        || rAssetTrans.AssetTransType == RAssetTransType::DisposalSale
                        || rAssetTrans.AssetTransType == RAssetTransType::Disposal
                        || rAssetTrans.AssetTransType == RAssetTransType::WriteUpAdj)
                    && !rAssetTrans.StornoRecId
            {
                switch (rAssetTrans.AssetTransType)
                {
                    case RAssetTransType::Acquisition:
                        countAqui++;
                        if (firstAcq)
                        {
                            countRev++;
                            modeSwt = 4;
                        }
                        else
                        {
                            modeSwt = 1;
                            firstAcq = true;
                        }
                        break;

                    case RAssetTransType::AcquisitionAdj:
                    case RAssetTransType::WriteUpAdj:
                        if (rAssetTrans.PostingType == RAssetPostingType::PartialTakeDown)
                        {
                            countRev++;
                            modeSwt = 4;
                        }
                        else
                        {
                            countAdj++;
                            modeSwt = 2;
                        }
                        break;

                    case RAssetTransType::Revaluation:
                        lastRevDate = rAssetTrans.TransDate > lastRevDate ? rAssetTrans.TransDate : lastRevDate;
                        countRev++;
                        modeSwt = 4;
                        break;

                    default:
                        countDisp++;
                        modeSwt = 3;
                        break;
                }

                str operationType = enum2str(rAssetTrans.AssetTransType);

                if (modeSwt == 3)
                {
                    operationType = rAssetTrans.AssetTransType == RAssetTransType::DisposalSale ? "@SYS28382" : "@GLS116449";
                }
                else if (modeSwt == 4)
                {
                    if (rAssetTrans.PostingType == RAssetPostingType::PartialTakeDown)
                    {
                        operationType = "@GLS116960";
                    }
                    else if (rAssetTrans.AssetTransType == RAssetTransType::Acquisition)
                    {
                        operationType = "@GLS116985";
                    }
                }

                mapTrans.insert([rAssetTrans.TransDate, modeSwt, rAssetTrans.RecId],
                    [rAssetTrans.AttachDocumentNumber,
                        date2str(rAssetTrans.AttachDocumentDate ? rAssetTrans.AttachDocumentDate : rAssetTrans.TransDate, 123, 2, 2, 2, 2, 2, DateFlags::None),
                        operationType,
                        num2str(modeSwt == 3 ? abs(rAssetTrans.AmountMST) : rAssetTrans.AmountMST, 12, 2, 2, 0),
                        rAssetTrans.Txt,
                        '']);
            }

            while select rAssetMoveHist
                where rAssetMoveHist.AccountNum == rAssetTable.AccountNum
                    && rAssetMoveHist.MoveType == RAssetMoveType::Transfer
                    && rAssetMoveHist.ChangeDate <= toDate
            {
                countDisp++;

                mapTrans.insert([rAssetMoveHist.ChangeDate, 3, rAssetMoveHist.RecId],
                    [rAssetMoveHist.AttachDocumentNumber,
                        date2str(rAssetMoveHist.AttachDocumentDate, 123, 2, 2, 2, 2, 2, DateFlags::None),
                        '',
                        this.netBookValue(rAssetMoveHist.ChangeDate),
                        "",
                        rAssetMoveHist.NewEmployee]);
            }
        }

        shortDescription = new RAssetReport_ShortDescription(rAssetTable.AccountNum, this.transDate());
        shortDescription.addPrintedField(fieldNum(RAssetScrap, ItemId), colItemName);
        shortDescription.addPrintedField(fieldNum(RAssetScrap, Qty), colQty);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args _args)
    {
        if (_args.dataset() != tableNum(RAssetTable))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        rAssetTable = _args.record();

        super(_args);

    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage01</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs first page of report to excel
    /// </summary>
    /// <remarks>
    /// Analysis dimension value taken from dimension specified at rAssetParameters as default dimension
    /// </remarks>
    protected void printPage01()
    {
        const int aquisitionMax = 3;
        const int aquisitionFirstRow = 35;
        const int adjustmentsMax = 30;
        const int adjustmentsFirstRow = 44;
        const int transfersMax = 4;
        const int transfersFirstRow = 59;

        TransDate curDate;

        DimensionDisplayValue account = this.mainAccountNum(documentDate);
        int adjrowsmax = adjustmentsMax div 3;

        void aquisitionFill(int _i = 1)
        {
            if (recCount == countAqui)
            {
                curDate = toDate;
            }
            else
            {
                curDate = conPeek(mi.key(),1);
            }

            this.insertDateIntoDoc('d' + int2str(_i) + '_1', rAssetTable.GuaranteeDate);
            this.insertDateIntoDoc('d' + int2str(_i) + '_2', recCount == countAqui ? lastRevDate : dateNull());
            this.insertValueIntoDoc('d' + int2str(_i) + '_3', conPeek(mi.value(), 5));
            this.insertValueIntoDoc('d' + int2str(_i) + '_4', conPeek(mi.value(), 1));
            this.insertValueIntoDoc('d' + int2str(_i) + '_5', conPeek(mi.value(), 2));
            this.insertValueIntoDoc('d' + int2str(_i) + '_6', this.dateIntervalAsStr(rAssetStandards.lifeTimePass(curDate - 1)));
            this.insertValueIntoDoc('d' + int2str(_i) + '_7', num2str(-this.depreciation(curDate), 12, 2, 2, 0));
            this.insertValueIntoDoc('d' + int2str(_i) + '_8', this.netBookValue(curDate));
            this.insertValueIntoDoc('d' + int2str(_i) + '_9', num2str(this.acquisition(this.dateToBusinessAccounting()), 12, 2, 2, 0));
            this.insertValueIntoDoc('d' + int2str(_i) + '_10', rAssetStandards.lifetime(toDate));
        }

        str toRC(int _row, int _col)
        {
            return 'R' + int2str(_row) + 'C' + int2str(_col);
        }

        void adjustmentsFill(int _i, int _startrow, int _rowscount)
        {

            int row = (_i-1) mod _rowscount + _startrow;
            int col = (_i-1) div _rowscount + 1;
            int col1;
            int col2;
            int col3;

            curDate = conPeek(mi.key(),1);

            rAssetSumTrans.parmDateTo(curDate-1);
            Amount valueBefore = rAssetSumTrans.acquisitionTotal();
             
            rAssetSumTrans.parmDateTo(curDate);
            Amount valueAfter = valueBefore + rAssetSumTrans.acquisitionAdjValue() - rAssetSumTrans.takeDownAcqAdjValue();
            switch (col)
            {
                case 1:
                    col1 = 1;
                    col2 = 6;
                    col3 = 14;
                    break;

                case 2:
                    col1 = 22;
                    col2 = 28;
                    col3 = 36;
                    break;

                case 3:
                    col1 = 44;
                    col2 = 49;
                    col3 = 57;
                    break;

                default:
                    break;
            }

            this.insertDateIntoDoc(toRC(row,col1),  curDate);
            this.insertValueIntoDoc(toRC(row,col2), valueBefore ? valueAfter/valueBefore : 0);
            this.insertValueIntoDoc(toRC(row,col3), valueAfter);

        }

        void transfersFill(int _i = 1)
        {
            curDate = conPeek(mi.key(),1);
            this.insertValueIntoDoc('b' + int2str(_i) + '_1',  this.mergeStr(strFmt("@GLS106745", curDate), conPeek(mi.value(), 1)));
            this.insertValueIntoDoc('b' + int2str(_i) + '_2',  conPeek(mi.value(), 3));
            this.insertValueIntoDoc('b' + int2str(_i) + '_3',  this.location(curDate));
            this.insertValueIntoDoc('b' + int2str(_i) + '_4',  conPeek(mi.value(), 4));

            EmployeeId_RU employeeId = conPeek(mi.value(), 6);
            HcmWorkerName workerName = employeeId
                ? EmployeeTable_RU::findByEmployeeId(employeeId).worker().getFIO_RU()
                : newEmployee.worker().getFIO_RU();
            this.insertValueIntoDoc('b' + int2str(_i) + '_5', workerName);
        }

        if (rAssetParameters.AnalysisDimensionAttribute)
        {
            account = strFmt("@SYS26868", account, this.getAnalysisCodeFromDefaultDimension(rAssetStandards.DefaultDimension));
        }

        mi = new MapIterator(mapTrans);

        this.insertValueIntoDoc(ConstCompanyName, companyInfo.name());
        this.insertValueIntoDoc(ConstDepartmentName, this.location(this.transDate()));
        this.insertValueIntoDoc(ConstDocumentNumber, documentNumber);
        this.insertValueIntoDoc(ConstOKUD, CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, this.transDate()));
        this.insertValueIntoDoc(ConstOKPO, CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, this.transDate()));
        this.insertDateIntoDoc(ConstDocumentDate, documentDate);

        this.insertValueIntoDoc(ConstDeprGroupName, rAssetStandards.AssetGroup);
        this.insertValueIntoDoc(ConstPassportNum, rAssetTable.PassportNum);
        this.insertValueIntoDoc(ConstFactoryNumber, rAssetTable.SerialNum);
        this.insertValueIntoDoc(ConstInventoryNumber, rAssetTable.AccountNum);
        
        if (this.dateToBusinessAccounting())
        {
            this.insertDateIntoDoc(ConstAcquisitionDate, this.dateToBusinessAccounting());
        }

        this.insertDateIntoDoc(ConstDisposalDate, this.dateFromBusinessAccounting());
        this.insertValueIntoDoc(ConstAccount, account);

        this.insertValueIntoDoc(ConstAssetName, rAssetTable.Name);
        this.insertValueIntoDoc(ConstAssetLocation, RAssetLocation::find(this.location(this.transDate())).Name);
        this.insertValueIntoDoc(ConstAssetMade, rAssetTable.Make);
        this.insertValueIntoDoc(ConstAssetModel, rAssetTable.Model);

        Counter adjustLine = aquisitionFirstRow;
        if (countAqui)
        {
            recCount = 0;
            diffCount = countAqui - aquisitionMax;
            diffCount = diffCount > 0 ? diffCount : 0;
            diffTotal += diffCount;

            mi.begin();
            while (mi.more())
            {
                if (conPeek(mi.key(), 2) == 1)
                {
                    recCount++;
                    if (recCount <= diffCount)
                    {
                        aquisitionFill();
                        excelDocument.insertRow(adjustLine, curWorkSheetNum);
                    }
                    else
                    {
                        aquisitionFill(recCount - diffCount);
                    }
                }
                mi.next();
            }
        }

        adjustLine = adjustmentsFirstRow + diffTotal;
        if (countAdj)
        {
            recCount = 0;
            diffCount = countAdj - adjustmentsMax;

            if (diffCount < 0)
            {
                diffCount = 0;
            }

            if (diffCount > 0)
            {
                diffCount  = diffCount div 3 + 1;
            }

            diffTotal += diffCount;
            
            for (int i = 0; i < diffCount; ++i)
            {
                excelDocument.insertRow(adjustLine, curWorkSheetNum,0);
            }

            mi.begin();
            while (mi.more())
            {
                if (conPeek(mi.key(), 2) == 2)
                {
                    recCount++;
                    adjustmentsFill(recCount, adjustLine, adjrowsmax + diffCount);
                }
                mi.next();
            }
        }

        adjustLine = transfersFirstRow + diffTotal;
        if (countDisp)
        {
            recCount = 0;
            diffCount = countDisp - transfersMax;
            diffCount = diffCount > 0 ? diffCount : 0;
            diffTotal += diffCount;

            mi.begin();
            while (mi.more())
            {
                if (conPeek(mi.key(), 2) == 3)
                {
                    recCount++;
                    if (recCount <= diffCount)
                    {
                        transfersFill();
                        excelDocument.insertRow(adjustLine, curWorkSheetNum);
                    }
                    else
                    {
                        transfersFill(recCount - diffCount);
                    }
                }
                mi.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage02</Name>
				<Source><![CDATA[
    protected void printPage02()
    {
        const int adjustmentsMax = 5;
        const int adjustmentsFirstRow = 7;

        const int scrapMax = 5;
        const int scrapFirstRow = 19;

        void adjustmentsFill(int _i = 1)
        {
            this.insertValueIntoDoc('a' + int2str(_i) + '_1',  conPeek(mi.value(), 3));
            this.insertValueIntoDoc('a' + int2str(_i) + '_2',  conPeek(mi.value(), 5));
            this.insertValueIntoDoc('a' + int2str(_i) + '_3',  conPeek(mi.value(), 2));
            this.insertValueIntoDoc('a' + int2str(_i) + '_4',  conPeek(mi.value(), 1));
            this.insertValueIntoDoc('a' + int2str(_i) + '_5',  abs(conPeek(mi.value(), 4)));
        }

        recCount = 0;

        if (countRev)
        {
            diffCount = countRev - adjustmentsMax;
            diffCount = diffCount > 0 ? diffCount : 0;
            diffTotal += diffCount;

            mi.begin();
            while (mi.more())
            {
                if (conPeek(mi.key(), 2) == 4)
                {
                    recCount++;
                    if (recCount <= diffCount)
                    {
                        adjustmentsFill();
                        excelDocument.insertRow(adjustmentsFirstRow, curWorkSheetNum);
                    }
                    else
                    {
                        adjustmentsFill(recCount - diffCount);
                    }
                }
                mi.next();
            }
        }

        shortDescription.outputIntoExcel(excelDocument, curWorkSheetNum, scrapFirstRow + diffTotal, scrapMax);

        HrmDescription hrmDescription = HcmPosition::findByPosition(newEmployee.worker().primaryPositionId()).description();
        this.insertValueIntoDoc(ConstPosition, hrmDescription
            ? hrmDescription
            : newEmployee.worker().primaryPositionId());
        this.insertValueIntoDoc(ConstResponsible, newEmployee.worker().getFIO_RU());
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    protected void run()
    {
        curWorkSheetNum = 1;
        this.printPage01();

        curWorkSheetNum = 2;
        this.printPage02();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected str templateName()
    {
        return resourceStr(RAsset_6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate()
    {
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocuments</Name>
				<Source><![CDATA[
    protected void updateDocuments()
    {
        super();

        rAssetTable = RAssetTable::findrec(rAssetTable.RecId, true);
        rAssetTable.InvKartDate = documentDate;
        rAssetTable.InvKartNumber = documentNumber;
        rAssetTable.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return documentPath + "@SYS34952" + this.documentNumber() + "@SYS34953";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'FA6';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>