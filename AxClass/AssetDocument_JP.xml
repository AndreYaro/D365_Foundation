<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocument_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>AssetDocument_JP</c> is an asset document.
/// </summary>
class AssetDocument_JP
{
    AssetDocumentEntry_JP   assetDocumentEntry;
    AssetDocumentTable_JP   assetDocumentTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteAssetDocumentEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>AssetDocumentEntry_JP</c> record.
    /// </summary>
    public void deleteAssetDocumentEntry()
    {
        AssetDocumentEntry_JP   assetDocumentEntryLoc;

        if (this.parmAssetDocumentEntry().RecId)
        {
            assetDocumentEntryLoc = AssetDocumentEntry_JP::find(
                this.parmAssetDocumentEntry().RecId,
                true);

            if (assetDocumentEntryLoc)
            {
                ttsBegin;
                assetDocumentEntryLoc.delete();
                ttsCommit;
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>getAssetDocumentMainType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset document main type.
    /// </summary>
    /// <returns>
    /// The asset document main type.
    /// </returns>
    public AssetDocumentMainType_JP getAssetDocumentMainType()
    {
        return assetDocumentTable.MainType;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getAssetDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset document type.
    /// </summary>
    /// <returns>
    /// The asset document type.
    /// </returns>
    public AssetDocumentType_JP getAssetDocumentType()
    {
        return assetDocumentTable.Type;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the asset document instance.
    /// </summary>
    protected void initialize()
    {
        this.parmAssetDocumentTable(AssetDocumentTable_JP::find(assetDocumentEntry.AssetDocumentTable_JP));
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocumentEntry</Name>
				<Source><![CDATA[
    public AssetDocumentEntry_JP parmAssetDocumentEntry(AssetDocumentEntry_JP _assetDocumentEntry = assetDocumentEntry)
    {
        assetDocumentEntry = _assetDocumentEntry;
        return assetDocumentEntry;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocumentTable</Name>
				<Source><![CDATA[
    public AssetDocumentTable_JP parmAssetDocumentTable(AssetDocumentTable_JP _assetDocumentTable = assetDocumentTable)
    {
        assetDocumentTable = _assetDocumentTable;
        return assetDocumentTable;
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateAssetDocumentEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>AssetDocumentEntry_JP</c> record.
    /// </summary>
    public void updateAssetDocumentEntry()
    {
        AssetDocumentEntry_JP   assetDocumentEntryLoc;

        if (this.parmAssetDocumentEntry().RecId)
        {
            ttsBegin;

            assetDocumentEntryLoc = AssetDocumentEntry_JP::find(
                this.parmAssetDocumentEntry().RecId,
                true);

            assetDocumentEntryLoc.AssetDocumentTable_JP = this.parmAssetDocumentEntry().AssetDocumentTable_JP;
            assetDocumentEntryLoc.update();

            ttsCommit;

            this.parmAssetDocumentEntry(assetDocumentEntryLoc);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateAssetDocumentEntryByDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the asset document for specific asset document entry.
    /// </summary>
    /// <param name="_mainType">
    /// The asset document main type.
    /// </param>
    /// <param name="_documentId">
    /// The asset document id.
    /// </param>
    public void updateAssetDocumentEntryByDocument(
        AssetDocumentMainType_JP     _mainType,
        AssetDocumentId_JP           _documentId)
    {
        AssetDocumentTable_JP   documentTable;

        documentTable = AssetDocumentTable_JP::findByDocumentId(_mainType, _documentId);
        if (documentTable)
        {
            assetDocumentEntry.AssetDocumentTable_JP = documentTable.RecId;
            this.updateAssetDocumentEntry();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the asset document.
    /// </summary>
    /// <returns>
    /// True if it passed validation; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateIsRemovable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the document is removable.
    /// </summary>
    /// <returns>
    /// True if the document is removable; otherwise, false.
    /// </returns>
    public boolean validateIsRemovable()
    {
        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an asset document instance.
    /// </summary>
    /// <param name="_assetDocumentEntryRecId">
    /// The asset document entry record id.
    /// </param>
    /// <returns>
    /// The asset document instance.
    /// </returns>
    public static AssetDocument_JP construct(RefRecId _assetDocumentEntryRecId)
    {
        AssetDocument_JP                assetDocumentLoc;
        AssetDocumentEntry_JP           assetDocumentEntryLoc;
        AssetDocumentTable_JP           assetDocumentTableLoc;

        assetDocumentEntryLoc = AssetDocumentEntry_JP::find(_assetDocumentEntryRecId);
        assetDocumentTableLoc = AssetDocumentTable_JP::find(assetDocumentEntryLoc.AssetDocumentTable_JP);

        assetDocumentLoc = AssetDocument_JP::getInstance(assetDocumentTableLoc.Type);

        assetDocumentLoc.parmAssetDocumentEntry(assetDocumentEntryLoc);
        assetDocumentLoc.initialize();

        return assetDocumentLoc;
    }
]]></Source>
			</Method>
			<Method>
				<Name>constructByDocumentEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an asset document instance.
    /// </summary>
    /// <param name="_assetDocumentEntry">
    /// The asset document entry table record.
    /// </param>
    /// <returns>
    /// The asset document instance.
    /// </returns>
    public static AssetDocument_JP constructByDocumentEntry(AssetDocumentEntry_JP _assetDocumentEntry)
    {
        AssetDocument_JP        assetDocumentLoc;
        AssetDocumentTable_JP   assetDocumentTableLoc;

        assetDocumentTableLoc  = AssetDocumentTable_JP::find(_assetDocumentEntry.AssetDocumentTable_JP);

        assetDocumentLoc = AssetDocument_JP::getInstance(assetDocumentTableLoc.Type);

        assetDocumentLoc.parmAssetDocumentEntry(_assetDocumentEntry);
        assetDocumentLoc.initialize();

        return assetDocumentLoc;
    }
]]></Source>
			</Method>
			<Method>
				<Name>createAssetDocumentEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes the <c>AssetDocument_JP</c> instance based on parameters.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The asset book id.
    /// </param>
    /// <param name="_mainType">
    /// The asset document main type.
    /// </param>
    /// <param name="_documentId">
    /// The asset document id.
    /// </param>
    /// <returns>
    /// The asset document instance.
    /// </returns>
    public static AssetDocument_JP createAssetDocumentEntry(
        AssetId                             _assetId,
        AssetBookId                         _bookId,
        AssetDocumentMainType_JP            _mainType,
        AssetDocumentId_JP                  _documentId
        )
    {
        AssetDocument_JP                 document;
        AssetDocumentEntry_JP            entryTable;
        AssetDocumentTable_JP            documentTable;

        documentTable = AssetDocumentTable_JP::findByDocumentId(_mainType, _documentId);
        if (documentTable)
        {
            ttsBegin;
            entryTable = AssetDocumentEntry_JP::create(_assetId, _bookId, documentTable);
            ttsCommit;
            document = AssetDocument_JP::construct(entryTable.RecId);
        }

        return document;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
/// <summary>
    /// Gets an asset document instance.
    /// </summary>
    /// <param name="_assetDocType_JP">
    /// The japan asset document type.
    /// </param>
    /// <returns>
    /// The asset document instance.
    /// </returns>
    protected static AssetDocument_JP getInstance(AssetDocumentType_JP _assetDocType_JP)
    {
        AssetDocument_JP                assetDocument;

        switch (_assetDocType_JP)
        {
            case AssetDocumentType_JP::AssetReductionEntry_DirectOff:
            case AssetDocumentType_JP::AssetReductionEntry_Reserve:
                assetDocument = new AssetDocumentReductionEntry_JP();
                break;
            case AssetDocumentType_JP::AssetImpairment:
                assetDocument = new AssetDocument_JP();
                break;
            case AssetDocumentType_JP::AssetAcceleratedDepreciation:
                assetDocument = new AssetDocumentAcceleratedDep_JP();
                break;
            default:
                assetDocument = new AssetDocument_JP();
                break;
        }

        return assetDocument;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>