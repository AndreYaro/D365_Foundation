<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeTotalsEnumerableFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TradeTotalsEnumerableFactory</c> class provides access to various provider classes that
/// expose enumerable objects that are used in calculation of order totals including the calculation of
/// sales tax.
/// </summary>
class TradeTotalsEnumerableFactory
{
    Map                     interface2ProviderMap;
    TradeTotalsIContract    contract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLineEnumerableProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>TradeTotalsILineEnumerableProvider</c> object that can be used to retrieve and iterate
    /// a collection of <c>Common</c> line records.
    /// </summary>
    /// <returns>
    /// A <c>TradeTotalsILineEnumerableProvider</c> object.
    /// </returns>
    public TradeTotalsILineEnumerableProvider createLineEnumerableProvider()
    {
        TradeTotalsILineEnumerableProvider provider;

        provider = this.createProvider(classId2Name(classIdGet(provider))) as TradeTotalsILineEnumerableProvider;

        return provider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupEnumerableProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>TradeTotalsIMarkupEnumerableProvider</c> object that can be used to retrieve and
    /// iterate a collection of <c>MarkupTrans</c> records.
    /// </summary>
    /// <returns>
    /// A <c>TradeTotalsIMarkupEnumerableProvider</c> object.
    /// </returns>
    public TradeTotalsIMarkupEnumerableProvider createMarkupEnumerableProvider()
    {
        TradeTotalsIMarkupEnumerableProvider provider;

        provider = this.createProvider(classId2Name(classIdGet(provider))) as TradeTotalsIMarkupEnumerableProvider;

        return provider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProvider</Name>
				<Source><![CDATA[
        protected Object createProvider(
        ClassName   _interfaceName)
    {
        Object  provider;
        if (interface2ProviderMap.exists(_interfaceName))
        {
            provider = interface2ProviderMap.lookup(_interfaceName);
        }
        else
        {
            provider = this.createProviderForInterface(_interfaceName);
            interface2ProviderMap.insert(_interfaceName, provider);
        }
        return provider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProviderForInterface</Name>
				<Source><![CDATA[
        protected Object createProviderForInterface(
        ClassName   _interfaceName)
    {
        Object provider;

        switch (_interfaceName)
        {
            case classStr(TradeTotalsIMarkupEnumerableProvider):
                provider = TradeTotalsMarkupEnumerableProvider::newProvider();
                break;
            case classStr(TradeTotalsILineEnumerableProvider):
                provider = TradeTotalsLineEnumerableProvider::newProvider();
                break;
        }

        return provider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        interface2ProviderMap = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
        protected TradeTotalsIContract parmContract(
        TradeTotalsIContract    _contract = contract)
    {
        contract = _contract;

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static TradeTotalsEnumerableFactory construct()
    {
        return new TradeTotalsEnumerableFactory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>TradeTotalsEnumerableFactory</c> class.
    /// </summary>
    /// <param name="_contract">
    /// The contract for which a factory should a created.
    /// </param>
    /// <returns>
    /// An instance of the <c>TradeTotalsEnumerableFactory</c> class.
    /// </returns>
    public static TradeTotalsEnumerableFactory newFromContract(
        TradeTotalsIContract    _contract)
    {
        TradeTotalsEnumerableFactory factory;

        if (_contract)
        {
            factory = TradeTotalsEnumerableFactory::construct();
            factory.parmContract(_contract);
        }
        else
        {
            factory = TradeTotalsNullEnumerableFactory::newFactory();
        }

        return factory;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>