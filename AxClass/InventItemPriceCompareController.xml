<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPriceCompareController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemPriceCompareController</c> class is the controller for the <c>InventItemPriceCompare</c> SSRS report.
/// </summary>
class InventItemPriceCompareController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets fields from the dialog and sets them on the contract.
    /// </summary>
    public void getFromDialog()
    {
        InventItemPriceCompareContract  contract = this.parmReportContract().parmRdpContract() as InventItemPriceCompareContract;

        super();

        contract.parmPrintMediumType(this.parmReportContract().parmPrintSettings().printMediumType());
        contract.parmFileFormat(this.parmReportContract().parmPrintSettings().fileFormat());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controller class.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> object from the caller.
    /// </param>
    protected void initialize(Args _args)
    {
        CostingVersion                  costingVersion;

        this.parmReportName(ssrsReportStr(InventItemPriceCompare, PrecisionDesign));
        this.parmArgs(_args);

        InventItemPriceCompareContract contract = this.parmReportContract().parmRdpContract() as InventItemPriceCompareContract;
        if (_args.record() && _args.record().TableId == costingVersion.TableId)
        {
            contract.parmComparePriceType(CostingVersionPriceType::Cost);
            costingVersion = _args.record();
            contract.parmCompareVersionId(costingVersion.VersionId);
            contract.parmCompareDate(costingVersion.DefaultDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        InventItemPriceCompareContract  contract = this.parmReportContract().parmRdpContract() as InventItemPriceCompareContract;

        contract.parmQuery(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventItemPriceCompareController construct()
    {
        return new InventItemPriceCompareController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventItemPriceCompareController controller = InventItemPriceCompareController::newFromArgs(_args);

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventItemPriceCompareController</c> class.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> object from the caller.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventItemPriceCompareController</c> class.
    /// </returns>
    public static InventItemPriceCompareController newFromArgs(Args _args)
    {
        Box::infoOnce("@SCM:Caption_InventItemPriceCompareStorage", "@SCM:Message_InventItemPriceCompareReportReplaceInfo", classStr(InventItemPriceCompareController));

        InventItemPriceCompareController controller = InventItemPriceCompareController::construct();
        controller.initialize(_args);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>