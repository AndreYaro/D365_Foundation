<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkClusterBreaker</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSWorkClusterBreaker
{ 
    private WHSClusterId clusterId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromClusterId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkClusterBreaker newFromClusterId(WHSClusterId _clusterId)
    {
        WHSWorkClusterBreaker workClusterBreaker = new WHSWorkClusterBreaker();

        workClusterBreaker.clusterId = _clusterId;

        return workClusterBreaker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>breakCluster</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void breakCluster()
    {
        ttsbegin;

        WHSWorkClusterTable workClusterTable = WHSWorkClusterTable::find(clusterId, true);

        if (workClusterTable.RecId)
        {
            if (   workClusterTable.WorkClusterStatus != WHSWorkClusterStatus::Open
                && workClusterTable.WorkClusterStatus != WHSWorkClusterStatus::Passed)
            {
                throw error("@WAX3802");
            }

            if (workClusterTable.LockedUser)
            {
                throw error("@WAX3803");
            }

            if (workClusterTable.ClusterType != WHSClusterType::Putaway)
            {
                this.unassignWorksFromCluster();
            }

            this.deleteWorkClusterLinesRelatedToActiveWork();

            WHSWorkClusterTable::updateClusterStatus(clusterId, WHSWorkClusterStatus::Closed);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWorkClusterLinesRelatedToActiveWork</Name>
				<Source><![CDATA[
    private void deleteWorkClusterLinesRelatedToActiveWork()
    {
        WHSWorkClusterLine      workClusterLine;
        WHSWorkTable            workTable;

        delete_from workClusterLine
            where workClusterLine.ClusterId == clusterId
        exists join workTable
            where workTable.WorkId == workClusterLine.WorkId
                && workTable.WorkStatus <= WHSWorkStatus::InProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unassignWorksFromCluster</Name>
				<Source><![CDATA[
    private void unassignWorksFromCluster()
    {
        WHSWorkClusterLine      workClusterLine;
        WHSWorkTable            workTable;

        while select WorkStatus, WorkId from workTable
            exists join workClusterLine
                where workClusterLine.WorkId == workTable.WorkId
                   && workClusterLine.ClusterId == clusterId
        {
            this.clearTargetLicensePlate(workTable.WorkId);

            this.unlockWork(workTable.WorkId, workTable.WorkStatus);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlockWork</Name>
				<Source><![CDATA[
    private void unlockWork(WHSWorkId _workId, WHSWorkStatus _workStatus)
    {
        if (_workStatus != WHSWorkStatus::Cancelled
            && _workStatus != WHSWorkStatus::Closed)
        {
            WHSWorkTable::lockUnlockWork(_workId, '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTargetLicensePlate</Name>
				<Source><![CDATA[
    private void clearTargetLicensePlate(WHSWorkId _workId)
    {
        if (this.mustClearTargetLicensePlate(_workId))
        {
            WHSWorkTable::setTargetLicensePlate(_workId, '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustClearTargetLicensePlate</Name>
				<Source><![CDATA[
    private boolean mustClearTargetLicensePlate(WHSWorkId _workId)
    {
        WHSWorkLine workLine;
        WHSWorkTable workTable;

        container workTransTypesSupportingInboundCluster = WhsWorkTransactionType::workTransTypesSupportingInboundCluster();

        select firstonly RecId
            from workLine
            where workLine.WorkId == _workId
            && workLine.WorkStatus != WHSWorkStatus::Open
        exists join workTable
            where workTable.WorkId == workLine.WorkId
            && !(workTable.WorkTransType in workTransTypesSupportingInboundCluster);

        return workLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>