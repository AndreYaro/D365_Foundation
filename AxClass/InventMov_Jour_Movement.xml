<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Jour_Movement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMov_Jour_Movement</c> class is used when it works with inventory journals - Movements.
///    It generates inventory receipts or issues from a journal.
/// </summary>
class InventMov_Jour_Movement extends InventMov_Journal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        return inventJournalTrans.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowNegativePhysicalForBlockingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if validation should allow a negative physical available quantity for inventory status blocking.
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    /// <remarks>
    ///     Availability validation must be skipped for issue transactions on certain inventory journal transactions with blocking status.
    /// </remarks>
    public boolean allowNegativePhysicalForBlockingStatus()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateInventStatusBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the movment can update inventory status blocking transactions
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    public boolean canUpdateInventStatusBlocking()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCheckTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>InventJournalTrans</c> transaction is valid.
    /// </summary>
    /// <returns>
    /// false if there is an error in the transaction object; otherwise, true.
    /// </returns>
    public boolean  journalCheckTrans()
    {
        boolean ok = true;

        if (!inventJournalTrans.LedgerDimension)
        {
            ok = checkFailed("@SYS25236");
        }

        if (! super())
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetQty</Name>
				<Source><![CDATA[
    public void journalSetQty(
        NoYes   _transQtySignChangedToNegative = NoYes::No,
        boolean _showUserDialog                = true,
        boolean _doMinQtyCheck                 = true,
        boolean _doMaxQtyCheck                 = true)
    {
        InventMovement::setMinMaxQty(inventJournalTrans, _showUserDialog, false, _doMinQtyCheck, _doMaxQtyCheck);

        super(_transQtySignChangedToNegative, _showUserDialog, _doMinQtyCheck, _doMaxQtyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType ledgerPostingType()
    {
        return LedgerPostingType::LedgerJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!inventJournalTrans.RecId)
        {
            return null;
        }
        return new InventMov_Jour_Movement(inventJournalTrans.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the original transactions.
    /// </summary>
    /// <returns>
    ///    The ID of the original transaction originator, if there is an originator; otherwise, zero.
    /// </returns>
    public InventTransOriginId returnInventTransOrigin()
    {
        if (!inventJournalTrans.InventTransIdReturn)
        {
            return 0;
        }

        if (!this.isReturned(this.transSign() * inventJournalTrans.Qty))
        {
            return 0;
        }

        return InventTransOrigin::findByInventTransId(inventJournalTrans.InventTransIdReturn).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::InventTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_Jour_Movement</c> class based on the specified
    ///    record.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///    The <c>InventJournalTrans</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Jour_Movement</c> class.
    /// </returns>
    public static InventMov_Jour_Movement newFromInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        return new InventMov_Jour_Movement(_inventJournalTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>