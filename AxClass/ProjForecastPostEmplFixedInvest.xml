<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastPostEmplFixedInvest</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjForecastPostEmplFixedInvest extends ProjForecastPostEmpl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCost</Name>
				<Source><![CDATA[
    protected boolean checkCost()
    {
        boolean ret = super();

        if (ret)
        {
            switch (this.forecastUpdateType())
            {
                case ProjForecastUpdateType::Elimination:
                    if (! projTrans.forecastEliminationDate())
                    {
                        ret = checkFailed("@SYS89885");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterCost</Name>
				<Source><![CDATA[
    protected boolean checkEnterCost()
    {
        boolean ret = true;
        boolean isFixedPriceBillingMethod;

        ret = super();

        if (ret)
        {
            switch (this.forecastUpdateType())
            {
                case ProjForecastUpdateType::Journals:
                    ProjLedgerStatus emplLedgerStatus;
                    if (isMultipleContractLineFeatureEnabled)
                    {
                        emplLedgerStatus = this.isIncludedInProjectContractForMultipleContractLines(projTable, ProjTransType::Hour) ?
                            projRevProfile.EmplLedgerStatus : ProjLedgerStatus::Operations;
                    }
                    else
                    {
                        emplLedgerStatus = projGroup.EmplTransCost;
                    }

                    if (emplLedgerStatus == ProjLedgerStatus::Never || emplLedgerStatus == ProjLedgerStatus::None)
                    {
                        ret = false;
                    }
                    break;

                case ProjForecastUpdateType::Invoice:
                    ret = false;
                    break;

                case ProjForecastUpdateType::Estimate:
                    isFixedPriceBillingMethod = ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTable, ProjTransType::Hour);

                    if ((isFixedPriceBillingMethod && ForecastModel::find(HeadingSub::Heading, this.modelId()).ProjForecastWIPFixedPrice == NoYes::No) ||
                        ((projTable.Type == ProjType::Investment || enableProjMultipleContractLinesForProjectFeature) && 
                        ForecastModel::find(HeadingSub::Heading, this.modelId()).ProjForecastWIPInvestment == NoYes::No))
                    {
                        ret = false;
                    }

                    if (! projTrans.projLineProperty().ToBeCapitalize)
                    {
                        ret = false;
                    }

                    if (isFixedPriceBillingMethod)
                    {
                        ProjCompletePrincip complPrinciple = isMultipleContractLineFeatureEnabled ? projRevProfile.CompletePrinciple : projGroup.CompletePrincip;
                        if (complPrinciple != ProjCompletePrincip::CompletedContract)
                        {
                            ret = false;
                        }
                    }
                    break;

                case ProjForecastUpdateType::Elimination:
                    isFixedPriceBillingMethod = ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTable, ProjTransType::Hour);

                    if ((isFixedPriceBillingMethod && ForecastModel::find(HeadingSub::Heading, this.modelId()).ProjForecastWIPFixedPrice == NoYes::No) ||
                        ((projTable.Type == ProjType::Investment || enableProjMultipleContractLinesForProjectFeature) &&
                        ForecastModel::find(HeadingSub::Heading, this.modelId()).ProjForecastWIPInvestment == NoYes::No))
                    {
                        ret = false;
                    }

                    if (! projTrans.projLineProperty().ToBeCapitalize)
                    {
                        ret = false;
                    }

                    if (isFixedPriceBillingMethod)
                    {
                        ProjCompletePrincip complPrinciple = isMultipleContractLineFeatureEnabled ? projRevProfile.CompletePrinciple : projGroup.CompletePrincip;
                        if (ProjRevRecHelper::getCompletePrincipleForProjTable(projTable) != ProjCompletePrincip::CompletedContract)
                        {
                            ret = false;
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterTurnover</Name>
				<Source><![CDATA[
    protected boolean checkEnterTurnover()
    {
        boolean ret = true;

        if (this.forecastUpdateType() != ProjForecastUpdateType::Invoice)
        {
            ret = false;
        }

        if (ret)
        {
            // Test if model is used in project budgeting or standard forecasting
            ForecastModel forecasteodel = ForecastModel::findForecastModelByName(this.modelId());
            if (forecasteodel.ProjBudgetType == ProjBudgetType::None)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCost</Name>
				<Source><![CDATA[
    protected void postCost()
    {
        MapEnumerator   fundingAllocationEnumerator;
        Map             splitTransQty;

        switch (this.forecastUpdateType())
        {
            case ProjForecastUpdateType::Estimate:
                this.postingType(LedgerPostingType::ProjCost);
                this.costSales(ProjCostSales::Cost);
                this.ledgerTransDate(projTrans.transDate());

                fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, -projTrans.transCost(), projTrans.currencyIdCost()).getEnumerator();
                splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, -projTrans.qty());
                while (fundingAllocationEnumerator.moveNext())
                {
                    this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                    this.accountNum(projTrans.costAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                    this.amountMST(fundingAllocationEnumerator.currentValue());
                    this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                }

                if (projTrans.indirectCostAmount())
                {
                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, -projTrans.indirectCostAmount(), projTrans.currencyIdCost()).getEnumerator();
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(0.0);
                        this.accountNum(projTrans.costAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }
                }

                this.postingType(LedgerPostingType::ProjWIPCostvalue);
                this.costSales(ProjCostSales::Cost);
                this.ledgerTransDate(projTrans.transDate());

                fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.transCost(), projTrans.currencyIdCost()).getEnumerator();
                splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, projTrans.qty());
                while (fundingAllocationEnumerator.moveNext())
                {
                    this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                    this.accountNum(projTrans.statusAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                    this.amountMST(fundingAllocationEnumerator.currentValue());
                    this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                }

                if (projTrans.indirectCostAmount())
                {
                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.indirectCostAmount(), projTrans.currencyIdCost()).getEnumerator();
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(0.0);
                        this.accountNum(projTrans.statusAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }
                }
                break;

            case ProjForecastUpdateType::Elimination:
                this.postingType(LedgerPostingType::ProjWIPCostvalue);
                this.costSales(ProjCostSales::Cost);
                this.ledgerTransDate(projTrans.forecastEliminationDate());

                fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions( fundingSourceList,-projTrans.transCost(),projTrans.currencyIdCost()).getEnumerator();
                splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, -projTrans.qty());
                while (fundingAllocationEnumerator.moveNext())
                {
                    this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                    this.accountNum(projTrans.statusAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                    this.amountMST(fundingAllocationEnumerator.currentValue());
                    this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                }

                if (projTrans.indirectCostAmount())
                {
                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions( fundingSourceList,-projTrans.indirectCostAmount(),projTrans.currencyIdCost()).getEnumerator();
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(0.0);
                        this.accountNum(projTrans.statusAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }
                }

                if (ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTrans.projTable(), ProjTransType::Hour))
                {
                    this.postingType(LedgerPostingType::ProjCost);
                    this.costSales(ProjCostSales::Cost);
                    this.ledgerTransDate(projTrans.forecastEliminationDate());

                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.transCost(), projTrans.currencyIdCost()).getEnumerator();
                    splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, projTrans.qty());
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                        this.accountNum(projTrans.costAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }

                    if (projTrans.indirectCostAmount())
                    {
                        fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.indirectCostAmount(), projTrans.currencyIdCost()).getEnumerator();
                        while (fundingAllocationEnumerator.moveNext())
                        {
                            this.qty(0.0);
                            this.accountNum(projTrans.costAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                            this.amountMST(fundingAllocationEnumerator.currentValue());
                            this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                        }
                    }
                }
                break;

            default:
                super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>