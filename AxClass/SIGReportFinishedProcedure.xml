<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SigReportFinishedProcedure</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SIGReportFinishedProcedure</c> class handles the RAF process.
/// </summary>
class SigReportFinishedProcedure extends SIGProcedureProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a document to the end of the list of documents to be signed.
    /// </summary>
    /// <param name="_doc">
    ///    The document to add to the list of documents to be singed.
    /// </param>
    private void addDocument(SIGBaseDocument _doc)
    {
        docList.addEnd(_doc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuditFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of signature-controlled fields for this procedure.
    /// </summary>
    /// <returns>
    ///    The list of fields that are required for this BOM-approval procedure.
    /// </returns>
    public container getAuditFieldList()
    {
        return [
                 [DatabaseLogType::Insert,tablenum(SIGReportFinished)]
               ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdParmReportFinished</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initialize this instance by using a <c>ProdParmReportFinished</c> record.
    /// </summary>
    /// <param name="_prodParmReportFinished">
    ///    The record to use to initialize the instance.
    /// </param>
    public void initProdParmReportFinished(ProdParmReportFinished _prodParmReportFinished)
    {
        SIGReportFinished   reportFinished;

        while (_prodParmReportFinished)
        {
            reportFinished = SIGReportFinishedProcedure::createReportFinishedRecord(_prodParmReportFinished);
            this.addDocument(SIGBaseDocument::newDatabaseLog(
                            DatabaseLogType::Insert,
                            reportFinished));
            next _prodParmReportFinished;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        docList = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the procedure should be included in the signature setup.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean setupAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signatureRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a signature for this procedure is required.
    /// </summary>
    /// <returns>
    ///    True if the built-in signature requirement is enabled or one of the fields requires a signature.
    /// </returns>
    public boolean signatureRequired()
    {
        classId classId = classidget(this);

        return SIGProcSetup::classIdEnabled(classId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SIGReportFinishedProcedure construct()
    {
        return new SIGReportFinishedProcedure();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportFinishedRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create the report-finished signature record from a <c>ProdParmReportFinished</c> record.
    /// </summary>
    /// <param name="_prodParmReportFinished">
    ///    The record to use to create the signature record.
    /// </param>
    /// <returns>
    ///    The created signature record.
    /// </returns>
    public static SIGReportFinished createReportFinishedRecord(
        ProdParmReportFinished _prodParmReportFinished)
    {
        SIGReportFinished   reportFinished;

        reportFinished.clear();
        reportFinished.ProdId = _prodParmReportFinished.ProdId;
        reportFinished.ItemId = _prodParmReportFinished.ItemId;
        reportFinished.ProdReportedError = _prodParmReportFinished.QtyError;
        reportFinished.ProdReportedGood = _prodParmReportFinished.QtyGood;

        return reportFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS138154";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of this class by using a <c>ProdParmReportFinished</c> record.
    /// </summary>
    /// <param name="_prodParmReportFinished">
    ///    The record to use to create the instance.
    /// </param>
    /// <returns>
    ///    The new instance.
    /// </returns>
    public static SIGReportFinishedProcedure newProdParm(ProdParmReportFinished _prodParmReportFinished)
    {
        SIGReportFinishedProcedure  procedure = SIGReportFinishedProcedure::construct();

        procedure.initProdParmReportFinished(_prodParmReportFinished);

        return procedure;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>