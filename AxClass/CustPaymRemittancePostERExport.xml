<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPaymRemittancePostERExport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustPaymRemittancePostERExport</c> class provides methods for updating the customer bill of exchange remittance data
/// after the customer bill of exchange remittance is generated using general electronic report configuration.
/// </summary>
class CustPaymRemittancePostERExport
{
    private BankRemittanceFilesCust bankRemittanceFiles;

    private RecordSortedList trackedPaymModeSequences;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateBankRemittanceFile</Name>
				<Source><![CDATA[
    private void updateBankRemittanceFile(
        LedgerJournalId _ledgerJournalId,
        LedgerJournalTrans _ledgerJournalTrans,
        str _fileName,
        ERFormatMappingId _erFormatMappingId)
    {
        LedgerJournalTrans ledgerJournalTrans;

        BankRemittanceFileId bankRemittanceFileId;

        if (!bankRemittanceFiles)
        {
            select firstonly BankRemittanceFileId from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == _ledgerJournalId
                    && ledgerJournalTrans.BankRemittanceFileId != '';

            bankRemittanceFileId = ledgerJournalTrans.BankRemittanceFileId;

            if (bankRemittanceFileId)
            {
                bankRemittanceFiles = BankRemittanceFilesCust::find(bankRemittanceFileId, true);

                bankRemittanceFiles.AmountMst = 0;
            }
            else
            {
                bankRemittanceFileId = NumberSeq::newGetNum(CustParameters::numRefCustRemittanceFileId()).num();

                bankRemittanceFiles.clear();
                bankRemittanceFiles.JournalId = _ledgerJournalTrans.JournalNum;
                bankRemittanceFiles.FileId = bankRemittanceFileId;
                bankRemittanceFiles.FileName = _fileName;
                bankRemittanceFiles.ERFormatMappingID = _erFormatMappingId;
                bankRemittanceFiles.PaymMode = _ledgerJournalTrans.PaymMode;
                bankRemittanceFiles.Closed = NoYes::No;
                bankRemittanceFiles.Posted = NoYes::No;
                bankRemittanceFiles.Printed = NoYes::No;
                bankRemittanceFiles.PrintingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                bankRemittanceFiles.Received = NoYes::No;
                bankRemittanceFiles.Sent = NoYes::No;

                bankRemittanceFiles = this.setBankAccountId(bankRemittanceFiles, _ledgerJournalTrans);

                bankRemittanceFiles.insert();
            }
        }

        bankRemittanceFiles = this.setBankAccountId(bankRemittanceFiles, _ledgerJournalTrans);

        bankRemittanceFiles.AmountMst -= _ledgerJournalTrans.calcAmountMST();

        bankRemittanceFiles.update();

        _ledgerJournalTrans.BankRemittanceFileId = bankRemittanceFiles.FileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankAccountId</Name>
				<Source><![CDATA[
    private BankRemittanceFilesCust setBankAccountId(
        BankRemittanceFilesCust _bankRemittanceFilesCust,
        LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.BankAccountId)
        {
            _bankRemittanceFilesCust.BankAccountId = _ledgerJournalTrans.BankAccountId;
        }
        else if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            _bankRemittanceFilesCust.BankAccountId = _ledgerJournalTrans.parmOffsetAccount();
        }
        else
        {
            _bankRemittanceFilesCust.BankAccountId = '';
        }

        return _bankRemittanceFilesCust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBillOfExchangeJour</Name>
				<Source><![CDATA[
    private void updateBillOfExchangeJour(LedgerJournalTrans _ledgerJournalTrans)
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustTransOpen custTransOpen;
        CustTrans custTrans;

        QueryRun queryRunOffsetVoucher;

        LedgerJournalTrans ledgerJournalTrans = _ledgerJournalTrans;

        queryRunOffsetVoucher = SpecTrans::createQueryRunToRefTable(
            ledgerJournalTrans.company(),
            ledgerJournalTrans.TableId,
            ledgerJournalTrans.RecId,
            tablenum(CustTransOpen));

        queryRunOffsetVoucher.allowCrossCompany(true);

        while (queryRunOffsetVoucher.next())
        {
            if (queryRunOffsetVoucher.changed(tablenum(CustTransOpen)))
            {
                custTransOpen = queryRunOffsetVoucher.get(tablenum(CustTransOpen));

                if (custTransOpen)
                {
                    changecompany(custTransOpen.company())
                    {
                        custTrans = custTransOpen.custTrans();

                        custBillOfExchangeJour = CustBillOfExchangeJour::find(custTrans.BillOfExchangeID, true);
                        custBillOfExchangeJour.RemittanceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                        custBillOfExchangeJour.update();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void updateLedgerJournalTrans(
        LedgerJournalTrans  _ledgerJournalTrans,
        boolean _generateRemittanceFeeTrans)
    {
        LedgerJournalTrans ledgerJournalTrans = _ledgerJournalTrans;

        ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Sent;
        ledgerJournalTrans.PaymentSequenceNum = this.sequenceNum(CustVendPaymModeTable::findCommon(_ledgerJournalTrans));
        ledgerJournalTrans.FileCreated = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (_generateRemittanceFeeTrans)
        {
            ledgerJournalTrans.generateRemittanceFeeTrans();
        }

        ledgerJournalTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackSequenceOnPaymMode</Name>
				<Source><![CDATA[
    private void trackSequenceOnPaymMode(CustVendPaymModeTable  _paymModeTable)
    {
        const FieldName RecIdFieldName = 'RecId';

        DictTable   dictTable;
        DictField   dictField;

        if (!trackedPaymModeSequences)
        {
            trackedPaymModeSequences = new RecordSortedList(_paymModeTable.TableId);

            dictTable = new DictTable(_paymModeTable.TableId);

            dictField = new DictField(dictTable.id(), dictTable.fieldName2Id(RecIdFieldName));

            trackedPaymModeSequences.sortOrder(dictField.id());
        }

        if (!trackedPaymModeSequences.find(_paymModeTable))
        {
            _paymModeTable.CustVendPaymModeTable::incLastSequenceNum();
            trackedPaymModeSequences.ins(_paymModeTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sequenceNum</Name>
				<Source><![CDATA[
    private Counter sequenceNum(CustVendPaymModeTable   _custVendPaymModeTable)
    {
        Counter sequenceNumber;

        if (!trackedPaymModeSequences)
        {
            sequenceNumber =  0;
        }

        trackedPaymModeSequences.find(_custVendPaymModeTable);

        sequenceNumber = _custVendPaymModeTable.LastSequenceNumber;

        return sequenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateApprovedDrafts</Name>
				<Source><![CDATA[
    private void updateApprovedDrafts(LedgerJournalId _ledgerJournalId)
    {
        LedgerJournalTrans ledgerJournalTrans;
        SpecTrans specTrans;
        CustTransOpen custTransOpen;
        CustTrans custTrans;

        TransDate approvalDate;

        ttsbegin;

        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(_ledgerJournalId);

        while select forupdate ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
               && ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Sent
        {
            while select crosscompany RecId from specTrans
                where specTrans.SpecCompany == ledgerJournalTrans.company()
                    && specTrans.SpecTableId == ledgerJournalTrans.TableId
                    && specTrans.SpecRecId == ledgerJournalTrans.RecId
                join RefRecId from custTransOpen
                    where custTransOpen.DataAreaId == specTrans.RefCompany
                        && custTransOpen.TableId == specTrans.RefTableId
                        && custTransOpen.RecId == specTrans.RefRecId
                join BillOfExchangeID from custTrans
                    where custTrans.RecId == custTransOpen.RefRecId
            {
                changecompany(custTrans.company())
                {
                    approvalDate = CustBillOfExchangeJour::find(custTrans.BillOfExchangeID).ApprovalDate;
                }

                if (approvalDate)
                {
                    ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Confirmed;
                    ledgerJournalTrans.update();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postERExportUpdateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>LedgerJournalTrans</c> table records after the customer bill of exchange remittance is generated
    /// using general electronic report configuration.
    /// </summary>
    /// <param name="_ledgerJournalId">
    /// The ID of the <c>LedgerJournalTable</c> table record.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record to be updated.
    /// </param>
    /// <param name="_fileName">
    /// The name of the file generated using general electronic report configuration when the customer bill of exchange remittance is generated.
    /// </param>
    /// <param name="_erFormatMappingId">
    /// The record ID of the <c>ERFormatMappingTable</c> table record.
    /// </param>
    /// <param name="_generateRemittanceFeeTrans">
    /// true if the <c>RemittanceFeeTrans</c> table records should be generated; otherwise, false.
    /// </param>
    public void postERExportUpdateData(
        LedgerJournalId _ledgerJournalId,
        LedgerJournalTrans _ledgerJournalTrans,
        str _fileName,
        RecId _erFormatMappingId,
        boolean _generateRemittanceFeeTrans)
    {
        ttsbegin;

        this.trackSequenceOnPaymMode(CustVendPaymModeTable::findCommon(_ledgerJournalTrans, true));

        this.updateBankRemittanceFile(
            _ledgerJournalId,
            _ledgerJournalTrans,
            _fileName,
            _erFormatMappingId);

        this.updateLedgerJournalTrans(_ledgerJournalTrans, _generateRemittanceFeeTrans);

        this.updateBillOfExchangeJour(_ledgerJournalTrans);

        this.updateApprovedDrafts(_ledgerJournalId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isERFormatMappingForCustomerBillOfExchangeRemittance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the general electronic reporting configuration used in the process is
    /// the customer bill of exchange remittance for France and Italy format configuration.
    /// </summary>
    /// <param name="_custVendPaymModeTable">
    /// The <c>CustVendPaymModeTable</c> table buffer.
    /// </param>
    /// <returns>true if the customer bill of exchange remittance for France format configuration; otherwise, false.</returns>
    public static boolean isERFormatMappingForCustomerBillOfExchangeRemittance(CustVendPaymModeTable _custVendPaymModeTable)
    {
        boolean isPostERExportDataUpdateRequired;

        #isoCountryRegionCodes
        if (_custVendPaymModeTable.UseGERConfiguration == NoYes::Yes)
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
            {
                const PaymSpec RemittancePaymentSpecification = 'Remittance';
                CustPaymModeSpec custPaymModeSpec;

                select firstonly custPaymModeSpec
                    where custPaymModeSpec.PaymMode == _custVendPaymModeTable.PaymMode
                        && custPaymModeSpec.SpecParameters == RemittancePaymentSpecification
                        && custPaymModeSpec.Specification == RemittancePaymentSpecification;

                isPostERExportDataUpdateRequired = custPaymModeSpec.RecId != 0;
            }
            else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])
                    && CustPaymModeTable::find(_custVendPaymModeTable.PaymMode).PaymentType == CustPaymentType::BillOfExchange)
            {
                isPostERExportDataUpdateRequired = true;
            }
        }

        return isPostERExportDataUpdateRequired;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>