<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ERGlobalizationFeatureExternalAgentsDeployer</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Metadata.MetaModel;
using Microsoft.Dynamics365.LocalizationFramework;
using System.Collections;
using GFContracts = Microsoft.Dynamics365.ElectronicReportingServiceContracts.GlobalizationFeatureDeploymentService.Contracts;
using MessageHandling = Microsoft.Dynamics365.ElectronicReportingServiceContracts.MessageHandling;

public final class ERGlobalizationFeatureExternalAgentsDeployer implements ERIGlobalizationFeatureExternalAgentsDeployer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deployExternalAgents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deploys feature external agents.
    /// </summary>
    /// <param name = "_appSetup">Application setup.</param>
    /// <param name = "_messages">List of messages.</param>
    /// <returns>True if deployed successfully.</returns>
    public boolean deployExternalAgents(GFContracts.AppSetup _appSetup, MessageHandling.MessageWithSeverityList _messages)
    {
        int counter = 0;

        var externalAgents = _appSetup.get_ExternalAgents();
        if (externalAgents)
        {
            var i = externalAgents.GetEnumerator();
            while (i.MoveNext())
            {
                GFContracts.ExternalAgent externalAgent = i.get_Current();
                if (this.createBusinessDocumentExternalAgent(externalAgent, _messages))
                {
                    counter++;
                }
            }
        }

        return !externalAgents || counter == _appSetup.get_ExternalAgents().get_Count();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBusinessDocumentExternalAgent</Name>
				<Source><![CDATA[
    private boolean createBusinessDocumentExternalAgent(
        GFContracts.ExternalAgent _externalAgent,
        MessageHandling.MessageWithSeverityList _messages)
    {
        ERModelMappingTable contextModelMapping = this.getContextModelMappingFromContract(_externalAgent, _messages);
        if (!contextModelMapping)
        {
            return false;
        }

        if (!CompanyInfo::findDataArea(_externalAgent.LegalEntityId))
        {
            _messages.Add(
                new MessageHandling.MessageWithSeverity(
                    strFmt(
                        "@ApplicationSuiteElectronicReportingIntegration:BusinessDocumentCompanyForChannelDoesNotExist", 
                        _externalAgent.LegalEntityId, 
                        _externalAgent.AgentId
                    ),
                    MessageHandling.MessageSeverity::Error
                )
            );

            return false;
        }

        boolean ret = true;

        BusinessDocumentExternalAgents businessDocumentExternalAgents = BusinessDocumentExternalAgents::findByAgentId(_externalAgent.AgentId);
        if (!businessDocumentExternalAgents)
        {
            ttsbegin;
            businessDocumentExternalAgents.AgentId = _externalAgent.AgentId;
            businessDocumentExternalAgents.Description = _externalAgent.Description;
            businessDocumentExternalAgents.LegalEntityId = _externalAgent.LegalEntityId;
            businessDocumentExternalAgents.ERModelMappingContext = contextModelMapping.RecId;
            businessDocumentExternalAgents.insert();
            ttscommit;

            ret = this.createBusinessDocumentImportSources(_externalAgent.ImportSources, businessDocumentExternalAgents, _messages);
        }
        else
        {
            _messages.Add(
                new MessageHandling.MessageWithSeverity(
                    strFmt("@ApplicationSuiteElectronicReportingIntegration:BusinessDocumentChannelNameAlreadyExists", _externalAgent.AgentId),
                    MessageHandling.MessageSeverity::Error
                )
            );

            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBusinessDocumentImportSources</Name>
				<Source><![CDATA[
    private boolean createBusinessDocumentImportSources(
        System.Collections.IEnumerable _businessDocumentImportSources, 
        BusinessDocumentExternalAgents _externalAgent, 
        MessageHandling.MessageWithSeverityList _messages)
    {
        boolean ret = true;
        if (_businessDocumentImportSources)
        {
            var i = _businessDocumentImportSources.GetEnumerator();
            while (i.MoveNext())
            {
                GFContracts.ImportSource importSource = i.get_Current();
                var returnTypeCreated = this.createBusinessDocumentImportSource(importSource, _externalAgent, _messages);
                ret = ret && returnTypeCreated;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBusinessDocumentImportSource</Name>
				<Source><![CDATA[
    private boolean createBusinessDocumentImportSource(
        GFContracts.ImportSource _importSource,
        BusinessDocumentExternalAgents _externalAgents,
        MessageHandling.MessageWithSeverityList _messages)
    {
        if (_importSource.DataEntityName)
        {
            AxDataEntityView dataEntityView;
            dataEntityView = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetDataEntityView(_importSource.DataEntityName) as AxDataEntityView;
            if (!dataEntityView)
            {
                _messages.Add(
                    new MessageHandling.MessageWithSeverity(
                        strFmt("@ApplicationSuiteElectronicReportingIntegration:BusinessDocumentImportSourceDataEntityDoesNotExist",
                            _importSource.DataEntityName,
                            _importSource.Name,
                            _externalAgents.AgentId),
                        MessageHandling.MessageSeverity::Error
                    )
                );
                return false;
            }
        }

        var importSourceModelMappingInfo = _importSource.get_ModelMapping();
        ERModelMappingTable importSourceModelMappingTable = ERModelMappingTable::findByGUID(importSourceModelMappingInfo.get_Guid());
        if (!importSourceModelMappingTable)
        {
            _messages.Add(
                new MessageHandling.MessageWithSeverity(
                    strFmt("@ApplicationSuiteElectronicReportingIntegration:BusinessDocumentImportSourceMMDoesNotExist",
                        importSourceModelMappingInfo.get_Name(),
                        _importSource.Name,
                        _externalAgents.AgentId),
                    MessageHandling.MessageSeverity::Error
                )
            );
            return false;
        }

        BusinessDocumentImportSource ret;
        ret.Name = _importSource.Name;
        ret.Description = _importSource.Description;
        ret.IsOptional = _importSource.IsOptional;
        ret.BusinessDocumentExternalAgents = _externalAgents.RecId;
        ret.ERModelMappingTable = importSourceModelMappingTable.RecId;
        ret.DataEntityName = _importSource.DataEntityName;
        ret.insert();

        return ret.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContextModelMappingFromContract</Name>
				<Source><![CDATA[
    private ERModelMappingTable getContextModelMappingFromContract(
        GFContracts.ExternalAgent _externalAgent,
        MessageHandling.MessageWithSeverityList _messages)
    {
        ERModelMappingTable ret;
        var contextModelMappingInfo = _externalAgent.get_ContextModelMapping();
        if (contextModelMappingInfo)
        {
            ret = ERModelMappingTable::findByGUID(contextModelMappingInfo.get_Guid());
            if (!ret)
            {
                _messages.Add(
                    new MessageHandling.MessageWithSeverity(
                        strFmt("@ApplicationSuiteElectronicReportingIntegration:BusinessDocumentTypeContextMMDoesntExist", contextModelMappingInfo.get_Name()),
                        MessageHandling.MessageSeverity::Error));
            }
        }
        else
        {
            _messages.Add(
                new MessageHandling.MessageWithSeverity(
                    strFmt("@ApplicationSuiteElectronicReportingIntegration:BusinessDocumentChannelContextMMNotInContract", _externalAgent.AgentId),
                    MessageHandling.MessageSeverity::Error));
        }
        
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>