<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetTransactionLine_HourProdLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjBudgetTransactionLine_HourProdLine</c> class is used to hold the budget transaction information associated with the production order line.
/// </summary>
class ProjBudgetTransactionLine_HourProdLine extends ProjBudgetTransactionLine
{
    ProdRouteProj   prodRouteProj;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project activity number of the transaction.
    /// </summary>
    /// <returns>
    /// The project activity number of the transaction.
    /// </returns>
    public ProjActivityNumber activityNumber()
    {
        return prodRouteProj.prodTable().ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project category ID of the project budget transaction line.
    /// </summary>
    /// <returns>
    ///    The project category ID of the project budget transaction line.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        ProjCategoryId ProjCategoryId;

        //flight named ProjUseCategoryDefinedInProdRouteSetupFlight is removed from code as part of 10.0.36 major release;

        if (prodRouteProj.ProjId && prodRouteProj.OprNum)
        {
            ProjCategoryId = ProdRoute::find(prodRouteProj.ProdId,prodRouteProj.OprNum,prodRouteProj.OprPriority).SetUpCategoryId;
        }

        if (!ProjCategoryId)
        {
            ProjCategoryId = prodRouteProj.prodTable().ProjCategoryId;
        }
   
        return ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the cost amount of the project budget transaction line.
    /// </summary>
    /// <returns>
    ///    The total cost amount of the project budget transaction line.
    /// </returns>
    public CostAmount costAmount()
    {
        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code of the cost amount.
    /// </summary>
    /// <returns>
    ///    The currency code of the cost amount.
    /// </returns>
    public CurrencyCode costAmountCurrencyCode()
    {
        return Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project Line Property ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The project Line Property ID of the transaction.
    /// </returns>
    public ProjLinePropertyId linePropertyId()
    {
        return prodRouteProj.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>ProjBudgetTransactionLine_HourProdLine</c> class from the instance
    ///    of the production order line.
    /// </summary>
    /// <param name="_prodRouteProj">
    ///    A table buffer that contains the production order line.
    /// </param>
    void new(ProdRouteProj _prodRouteProj)
    {
        super();
        prodRouteProj = _prodRouteProj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostAmount</Name>
				<Source><![CDATA[
    public CostAmount parmCostAmount(CostAmount _costAmount = costAmount)
    {
        costAmount = _costAmount;

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAmount</Name>
				<Source><![CDATA[
    public SalesAmount parmSalesAmount(SalesAmount _salesAmount = salesAmount)
    {
        salesAmount = _salesAmount;

        return salesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project ID of the project budget transaction line.
    /// </summary>
    /// <returns>
    ///    The project ID of the project budget transaction line.
    /// </returns>
    public ProjId projId()
    {
        return prodRouteProj.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sales amount of the project budget transaction line.
    /// </summary>
    /// <returns>
    ///    The sales amount of the project budget transaction line.
    /// </returns>
    public SalesAmount salesAmount()
    {
        ProdRoute       prodRoute;
        ProdCalcTrans   prodCalcTrans;

        if (!this.parmSalesAmount())
        {
            prodRoute = ProdRoute::find(prodRouteProj.ProjId,prodRouteProj.OprNum,prodRouteProj.OprPriority);

            select prodCalcTrans
            where prodCalcTrans.IdRefTableId    == prodRoute.TableId
            &&    prodCalcTrans.IdRefRecId      == prodRoute.RecId
            &&    prodCalcTrans.CalcType        == prodRouteProj.CalcType;

            if (prodCalcTrans)
            {
                salesAmount = CurrencyExchangeHelper::amount(quantity * prodCalcTrans.salesPriceSum() / prodCalcTrans.consumptionSum(), prodRouteProj.ProjSalesCurrencyId);
            }
        }

        return this.parmSalesAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code of the sales amount.
    /// </summary>
    /// <returns>
    ///    The currency code of the sales amount.
    /// </returns>
    public CurrencyCode salesAmountCurrencyCode()
    {
        return prodRouteProj.ProjSalesCurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction date of the project budget transaction line.
    /// </summary>
    /// <returns>
    ///    The transaction date of the project budget transaction line.
    /// </returns>
    public TransDate transDate()
    {
        return prodRouteProj.ProjTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction ID of the project budget transaction line.
    /// </summary>
    /// <returns>
    ///    The transaction ID of the project budget transaction line.
    /// </returns>
    public ProjTransIdBase transId()
    {
        return prodRouteProj.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction type of the project budget transaction line.
    /// </summary>
    /// <returns>
    ///    An <c>ItemType</c> enumeration value that represents the transaction type of the project budget
    ///    transaction line.
    /// </returns>
    public ProjTransType transType()
    {
        return ProjTransType::Hour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>