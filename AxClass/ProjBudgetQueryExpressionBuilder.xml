<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetQueryExpressionBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using Microsoft.Dynamics.DataverseSdk;
using Microsoft.Dynamics.HttpCommunication;
using Microsoft.Dynamics.HttpCommunication.S2SAuthentication;
using Microsoft.Dynamics.DataverseSdk;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm;
using System.IO;

/// <summary>
/// This class is to build a query expression for project budget integration on top of project budget line entity
///
/// <Entity>  an Entity is a representation of a business object such as a table that encapsulates the data and behavior of the business object.</Entity>
/// <LinkEntity>  a LinkEntity (or QueryBuildLink) represents a relationship or join between two entities, specifying how these entities are connected based on common fields.</LinkEntity>
/// </summary>
internal class ProjBudgetQueryExpressionBuilder
{

    private QueryExpression query;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>builder</Name>
				<Source><![CDATA[
    /// <summary>
    /// A factory method that creates and returns a new instance of the ProjBudgetQueryExpressionBuilder class.
    /// This method is used for implementing the builder pattern.
    /// </summary>
    /// <returns>A new instance of the ProjBudgetQueryExpressionBuilder class.</returns>
    public static ProjBudgetQueryExpressionBuilder builder()
    {
        return new ProjBudgetQueryExpressionBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new QueryExpression with the provided entity name.
    /// This method sets the entity name that will be used for the query.
    /// </summary>
    /// <param name="_entity">The name of the entity to be queried.</param>
    public void setEntity(str _entity)
    {
        query = new QueryExpression(_entity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// To add filters for main Entity of Query Expression
    /// </summary>
    /// <param name="_attributeName">
    /// attribute on which we are placing a condition
    /// <param name="_attributeValue">
    /// attribute value in the condition
    /// <param name="_conditionOperator">
    /// type of operation in the condition
    /// </param>
    public void addCondition(str _attributeName, ConditionOperator _conditionOperator, str _attributeValue)
    {
        var conditionExpression = new ConditionExpression(_attributeName, _conditionOperator, _attributeValue);
        var filterExpression = new FilterExpression();
        filterExpression.AddCondition(conditionExpression);
        query.Criteria = filterExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLinkCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// To add criteria for a perticular LinkEntity
    /// </summary>
    /// <param name="_linkEntity">
    /// Link Entity to which we need to add the condition
    /// <param name="_attributeName">
    /// attribute on which we are placing a condition
    /// <param name="_attributeValue">
    /// attribute value in the condition
    /// <param name="_conditionOperator">
    /// type of operation in the condition
    /// </param>
    public LinkEntity addLinkCriteria(LinkEntity _linkEntity, str _attributeName, ConditionOperator _conditionOperator, int _attributeValue)
    {
        FilterExpression linkCriteria = _linkEntity.LinkCriteria;
        linkCriteria.AddCondition(_attributeName, _conditionOperator, _attributeValue);
        return _linkEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLinkEntityToLinkEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// To add a new Link entity to a perticular Link entity
    /// </summary>
    /// <param name="_linkEntity">
    /// Link Entity to which we need to add 
    /// <param name="_linkToEntityName">
    /// Entity which we are adding
    /// <param name="_linkFromAttributeName">
    /// Column of _linkEntity in the condition
    /// <param name="_linkToAttributeName">
    /// Column of _linkToEntityName in the condition
    /// <param name="joinOperator">
    /// Type of join
    /// </param>
    /// </return>
    /// return new Link Entity
    /// </return>
    public LinkEntity addLinkEntityToLinkEntity(LinkEntity _linkEntity, str _linkToEntityName, str _linkFromAttributeName, str _linkToAttributeName, JoinOperator joinOperator)
    {
        LinkEntity linkEntity = _linkEntity.AddLink(_linkToEntityName, _linkFromAttributeName, _linkToAttributeName, joinOperator);
        linkEntity.EntityAlias = _linkToEntityName;
        return linkEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addColumnSetToLinkEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// To add a new Link entity to a perticular Link entity
    /// </summary>
    /// <param name="_linkEntity">
    /// Link Entity to which we need to add
    /// <param name="_columns">
    /// columns of _linkEntity which we want in Query expression
    /// </param>
    /// </return>
    /// return new Link Entity
    /// </return>
    public LinkEntity addColumnSetToLinkEntity(LinkEntity _linkEntity, ColumnSet _columns)
    {
        _linkEntity.Columns = _columns;
        return _linkEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addColumnSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// To add a new Link entity to a perticular Link entity
    /// </summary>
    /// <param name="_columns">
    /// columns of Entity which we want in Query expression
    /// </param>
    public void addColumnSet(ColumnSet _columns)
    {
        query.ColumnSet = _columns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLinkEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// To add Link Entity to main entity in Query expression
    /// </summary>
    /// <param name="_linkToEntityName">
    /// Entity which we are adding
    /// <param name="_linkFromAttributeName">
    /// Column of Entity in the condition
    /// <param name="_linkToAttributeName">
    /// Column of _linkToEntityName in the condition
    /// <param name="joinOperator">
    /// Type of join
    /// </param>
    /// </return>
    /// return new Link Entity
    /// </return>
    public LinkEntity addLinkEntity(str _linkToEntityName, str _linkFromAttributeName, str _linkToAttributeName, JoinOperator joinOperator)
    {
        LinkEntity linkEntity = query.AddLink(_linkToEntityName, _linkFromAttributeName, _linkToAttributeName, joinOperator);
        linkEntity.EntityAlias = _linkToEntityName;
        return linkEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the QueryExpression object that has been built.
    /// This method is typically called after all required settings have been applied to the query.
    /// </summary>
    /// <returns>The built QueryExpression object.</returns>
    public QueryExpression build()
    {
        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>