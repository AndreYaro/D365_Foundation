<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCNAB_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendCNAB_BR
{
    CustVendSumForPaym      sumForPaym;
    CustVendOutPaym         custVendOutPaym;

    LedgerJournalTrans      ledgerJournalTrans;

    AsciiStreamIo                 file;

    str                     line;

    SequenceNum             internalSequenceNum; // starts at 1 when the class is called
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convert2CorrectFormat</Name>
				<Source><![CDATA[
    str convert2CorrectFormat(DictType _type)
    {
        str ret;

        switch (_type.baseType())
        {
            case Types::Date :
                ret = date2str(_type.getValue(),123,2,1,2,1,2,DateFlags::None);
                ret = strkeep(ret,'0123456789');
                break;
            case Types::Real:
                ret = num2str(abs(_type.getValue()),1,2,1,0);
                ret = strkeep(ret,'0123456789');
                break;
            case Types::String:
                ret = _type.getValue();
                break;
            case Types::Integer:
                ret = int2str(_type.getValue());
                break;

            default :
                ret = '';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSoftLineBreak</Name>
				<Source><![CDATA[
    boolean insertSoftLineBreak(int _p1 = 1)
    {
        boolean ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValue</Name>
				<Source><![CDATA[
    boolean insertValue(str s, int lenght)
    {
        line = line + s;

        if (strlen(s) != lenght)
        {
            error(strfmt("@GLS231",line,s,lenght,strlen(s)));
        }

        return line != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>leftPad</Name>
				<Source><![CDATA[
    str leftPad(str _strValue, int _lenght, str _cmpl)
    {
        int lenght;
        str strAuxCmpl;
        str strAux;

        if (strlen(_strValue)>_lenght)
        {
            _strValue = substr(_strValue,1,_lenght);
        }

        strAux = strrtrim(strltrim(_strValue));
        lenght = strlen(strAux);
        strAuxCmpl = strrep(_cmpl,(_lenght-lenght));

        return substr(strAuxCmpl,1,_lenght-lenght)+strAux;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendOutPaym</Name>
				<Source><![CDATA[
    public CustVendOutPaym parmCustVendOutPaym(CustVendOutPaym _custVendOutPaym = custVendOutPaym)
    {
        custVendOutPaym = _custVendOutPaym;

        return custVendOutPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFile</Name>
				<Source><![CDATA[
    public AsciiStreamIo parmFile(AsciiStreamIo _file = file)
    {
        file = _file;

        return file;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSumForPaym</Name>
				<Source><![CDATA[
    public CustVendSumForPaym parmSumForPaym(CustVendSumForPaym _sumForPaym = sumForPaym)
    {
        sumForPaym = _sumForPaym;

        return sumForPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rightPad</Name>
				<Source><![CDATA[
    str rightPad(str _strValue, int _lenght, str _cmpl)
    {
        int lenght;
        str strAuxCmpl;
        str strAux;

        if (strlen(_strValue)>_lenght)
        {
            _strValue = substr(_strValue,1,_lenght);
        }

        strAux = strrtrim(strltrim(_strValue));
        lenght = strlen(strAux);
        strAuxCmpl = strrep(_cmpl,(_lenght-lenght));

        return strAux + substr(strAuxCmpl,1,_lenght-lenght);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>