<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvJustificationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for expense module that provides utility methods to use and validate justifications functionality.
/// </summary>
static class TrvJustificationHelper
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>otherApproversJustifications</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the justifications entered by the other approvers, excluding the current user.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the transaction.
    /// </param>
    /// <param name="_violationJustificationType">
    /// The violation justification type.
    /// </param>
    /// <returns>
    /// The concatenation of justifications from other approvers, other than the current user.
    /// </returns>
    public static TrvPreviousApproversJustifications otherApproversJustifications(RecId _recId, TrvPolicyViolationJustificationTypeEnum _violationJustificationType)
    {
        TrvPolicyViolationJustification     justification;
        TrvPreviousApproversJustifications  previousJustification;
        HcmWorker                           hcmWorker;
        DirPartyTable                       dirPartyTable;

        while select justification
            where justification.Action == TrvWorkflowAction::Approve
               && justification.JustifyingWorker != HcmWorkerLookup::currentWorker()
               && justification.ViolatingRecord == _recId
               && justification.ViolationJustificationType == _violationJustificationType
                    join Person from hcmWorker
                        where hcmWorker.RecId == justification.JustifyingWorker
                            join Name from dirPartyTable
                                where hcmWorker.Person == dirPartyTable.RecId
        {
            previousJustification += strFmt("@SYS302345", dirPartyTable.Name);
            previousJustification += "\n";
            previousJustification += strFmt("@SYS329595", justification.Justification);
            previousJustification += "\n\n";
        }

        return previousJustification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitterJustification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the justification entered while submitting the document.
    /// </summary>
    /// <param name = "_recId">The record ID of the transaction.</param>
    /// <param name = "_violationJustificationType">The violation justification type.</param>
    /// <returns>Submit justification text.</returns>
    public static TrvSubmitterJustification submitterJustification(RecId _recId, TrvPolicyViolationJustificationTypeEnum _violationJustificationType)
    {
        TrvPolicyViolationJustification     justification;

        select firstonly justification
            where justification.Action == TrvWorkflowAction::Submit
               && justification.ViolatingRecord == _recId
               && justification.ViolationJustificationType == _violationJustificationType;

        return justification.Justification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJustificationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to determine if justification is required to submit or approve a document.
    /// </summary>
    /// <param name = "_recId">Record Id of expense header or line, or requisition header or line, for which we need to find if justification is needed.</param>
    /// <param name = "_type"><c>TrvPolicyViolationJustificationTypeEnum</c> that determines what the record id is pointing to.</param>
    /// <param name = "_level"><c>TrvPolicyViolationLevel::SubmitJustification</c> or <c>TrvPolicyViolationLevel::ApproveJustification</c></param>
    /// <returns>True if justification is required for the given record; otherwise false.</returns>
    public static boolean isJustificationRequired(RefRecId _recId, TrvPolicyViolationJustificationTypeEnum _type, TrvPolicyViolationLevel _level)
    {
        TrvPolicyViolationsCache    cache;
        TrvPolicyViolationsLog      log;
        TrvPolicyRule               policy;
        SysPolicyTypeEnum           policyType;
        utcDateTime                 minValue = DateTimeUtil::minValue();
        utcDateTime                 maxValue = DateTimeUtil::maxValue();

        if (_type == TrvPolicyViolationJustificationTypeEnum::TrvExpHeader || _type == TrvPolicyViolationJustificationTypeEnum::TrvExpLine)
        {
            policyType = SysPolicyTypeEnum::TrvExpensePolicy;
        }
        else if (_type == TrvPolicyViolationJustificationTypeEnum::TrvReqHeader || _type == TrvPolicyViolationJustificationTypeEnum::TrvReqLine)
        {
            policyType = SysPolicyTypeEnum::TrvRequisitionPolicy;
        }

        if (_level == TrvPolicyViolationLevel::SubmitJustification)
        {
            select firstonly validTimeState(minValue, maxValue) * from cache join policy
            where cache.Rule == policy.RecId
                && (policy.Action == _level || policy.Action == TrvPolicyViolationLevel::SubmitApproveJustification)
                && cache.PolicyType == policyType
                && (((_type == TrvPolicyViolationJustificationTypeEnum::TrvExpHeader
                        || _type == TrvPolicyViolationJustificationTypeEnum::TrvReqHeader) && cache.Header == _recId && cache.Line == 0)
                    ||
                    ((_type ==  TrvPolicyViolationJustificationTypeEnum::TrvExpLine
                        || _type == TrvPolicyViolationJustificationTypeEnum::TrvReqLine) && cache.Line == _recId));
        }

        select firstonly validTimeState(minValue, maxValue) * from log join policy
        where log.Rule == policy.RecId
            && (policy.Action == _level || policy.Action == TrvPolicyViolationLevel::SubmitApproveJustification)
            && log.PolicyType == policyType
            && log.Action != TrvWorkflowAction::Return
            && (((_type == TrvPolicyViolationJustificationTypeEnum::TrvExpHeader
                    || _type == TrvPolicyViolationJustificationTypeEnum::TrvReqHeader) && log.Header == _recId && log.Line == 0)
                ||
                ((_type ==  TrvPolicyViolationJustificationTypeEnum::TrvExpLine
                    || _type == TrvPolicyViolationJustificationTypeEnum::TrvReqLine) && log.Line == _recId));

        return cache.RecId || log.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyOverJustifications</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copy the justification from the source expense record into the destination expense record
    ///     when justification is not currently filled on the destination expense.
    /// </summary>
    /// <param name="_destinationExpense">
    ///     The expense to copy the justification to.
    /// </param>
    /// <param name="_sourceExpense">
    ///     The expense to copy the justification from.
    /// </param>
    public static void copyOverJustifications(TrvExpTrans _destinationExpense, TrvExpTrans _sourceExpense)
    {
        TrvPolicyViolationJustification trvPolicyViolationJustification;

        if (!TrvPolicyViolationJustification::justificationExists(_destinationExpense.RecId) &&
                TrvPolicyViolationJustification::justificationExists(_sourceExpense.RecId))
        {
            update_recordset trvPolicyViolationJustification setting ViolatingRecord = _destinationExpense.RecId
                    where trvPolicyViolationJustification.ViolatingRecord == _sourceExpense.RecId
                       && trvPolicyViolationJustification.ViolationJustificationType == TrvPolicyViolationJustificationTypeEnum::TrvExpLine;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>