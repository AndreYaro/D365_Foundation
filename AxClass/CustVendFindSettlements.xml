<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendFindSettlements</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendFindSettlements
{
    LedgerJournalTrans  ledgerJournalTrans;
    TmpCustVendTrans    tmpCustVendTrans;

    CustVendTrans       custVendTrans;
    CustVendSettlement  custVendSettlement;
    CustVendTransOpen   custVendTransOpen;

    ModuleCustVend      module;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findSettledSettlements</Name>
				<Source><![CDATA[
    void findSettledSettlements()
    {
        SpecTrans   specTrans;

        while   select crosscompany RefCompany, Balance01 from specTrans
                where   specTrans.SpecTableId == ledgerJournalTrans.TableId &&
                        specTrans.SpecRecId   == ledgerJournalTrans.RecId &&
                        specTrans.SpecCompany == ledgerJournalTrans.DataAreaId
                join    custVendSettlement
                where   custVendSettlement.TableId  == specTrans.RefTableId
                   &&   custVendSettlement.RecId    == specTrans.RefRecId
                   &&   custVendSettlement.DataAreaId   == specTrans.RefCompany
                join    custVendTrans
                where   custVendTrans.RecId == custVendSettlement.TransRecId
                   &&   custVendTrans.DataAreaId == specTrans.RefCompany
        {
            this.populateSettledSettlement(specTrans);

            tmpCustVendTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSettledSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the settled settlement.
    /// </summary>
    /// <param name = "_specTrans">The current <c>SpecTrans</c> record.</param>
    protected void populateSettledSettlement(SpecTrans _specTrans)
    {
        tmpCustVendTrans.AccountNum             = custVendTrans.AccountNum;
        tmpCustVendTrans.Company                = _specTrans.RefCompany;
        tmpCustVendTrans.AmountCur              = _specTrans.Balance01;
        tmpCustVendTrans.CurrencyCode           = custVendTrans.CurrencyCode;
        tmpCustVendTrans.Invoice                = custVendTrans.Invoice;
        tmpCustVendTrans.NegInstId              = custVendTrans.NegInstId;
        tmpCustVendTrans.NegInstSeqNum          = custVendTrans.NegInstSeqNum;
        tmpCustVendTrans.NegInstStatus          = custVendTrans.NegInstStatus;
        tmpCustVendTrans.BankRemittanceFileId   = custVendTrans.BankRemittanceFileId;
        tmpCustVendTrans.PaymReference          = custVendTrans.PaymReference;
        tmpCustVendTrans.PaymId                 = custVendTrans.PaymId;
        tmpCustVendTrans.PaymMode               = custVendTrans.PaymMode;
        tmpCustVendTrans.PostingProfile         = custVendTrans.PostingProfile;
        tmpCustVendTrans.TransDate              = custVendTrans.TransDate;
        tmpCustVendTrans.DueDate                = custVendSettlement.DueDate;
        tmpCustVendTrans.CashDiscDate           = custVendSettlement.CashDiscDate;
        tmpCustVendTrans.Txt                    = custVendTrans.Txt;
        tmpCustVendTrans.Voucher                = custVendTrans.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSettlements</Name>
				<Source><![CDATA[
    void findSettlements()
    {
        tmpCustVendTrans = CustVendFindSettlements::findMarkedTrans(module, ledgerJournalTrans.company(), ledgerJournalTrans.TableId, ledgerJournalTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendFindSettlements construct(ModuleCustVend _moduleCustVend, LedgerJournalTrans _ledgerJournalTrans)
    {
        CustVendFindSettlements custVendFindSettlements = new CustVendFindSettlements(_moduleCustVend, _ledgerJournalTrans);

        return custVendFindSettlements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(ModuleCustVend     _moduleCustVend,
             LedgerJournalTrans _ledgerJournalTrans)
    {
        module              = _moduleCustVend;
        ledgerJournalTrans  = _ledgerJournalTrans;

        this.setBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer</Name>
				<Source><![CDATA[
    protected void setBuffer()
    {
        CustTrans           custTrans;
        VendTrans           vendTrans;

        CustSettlement      custSettlement;
        VendSettlement      vendSettlement;

        CustTransOpen       custTransOpen;
        VendTransOpen       vendTransOpen;

        switch (module)
        {
            case ModuleCustVend::Cust :
                custVendTrans       = custTrans;
                custVendTransOpen   = custTransOpen;
                custVendSettlement  = custSettlement;
                break;

            case ModuleCustVend::Vend :
                custVendTrans       = vendTrans;
                custVendTransOpen   = vendTransOpen;
                custVendSettlement  = vendSettlement;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpCustVendTrans</Name>
				<Source><![CDATA[
    TmpCustVendTrans tmpCustVendTrans()
    {
        return tmpCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMarkedTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a join on the <c>SpecTrans</c>, <c>CustVendTransOpen</c> and <c>CustVendTrans</c> tables
    ///    and maps and returns all the marked customer or vendor transaction records related to the record ID.
    /// </summary>
    /// <param name="_module">
    ///    The <c>ModuleCustVend</c> module of the <c>CustVendTrans</c> records.
    /// </param>
    /// <param name="_specCompany">
    ///    The spec company of the <c>CustTrans</c> or <c>VendTrans</c> table record.
    /// </param>
    /// <param name="_specTableId">
    ///    The spec table ID of the <c>CustTrans</c> or <c>VendTrans</c> table record.
    /// </param>
    /// <param name="_specRecId">
    ///    The spec record ID of the <c>CustTrans</c> or <c>VendTrans</c> table record.
    /// </param>
    /// <returns>
    ///    The <c>TmpCustVendTrans</c> table that contains marked <c>CustTrans</c> or <c>VendTrans</c> records.
    /// </returns>
    /// <remarks>
    ///    Replaces the <c>findCustSettlements</c> method on the <c>SpecTrans</c> table.
    /// </remarks>
    public static TmpCustVendTrans findMarkedTrans(ModuleCustVend _module, CompanyId _specCompany, tableId _specTableId, RefRecId _specRecId)
    {
        TmpCustVendTrans markedTransactions;
        container packedTransactions;
        int transLoop;

        // Call helper method to get temp table records in container
        packedTransactions = CustVendFindSettlements::getTmpTrans(_module, _specCompany, _specTableId, _specRecId);

        // Loop through container and build temp table instance
        for (transLoop = 1; transLoop <= conlen(packedTransactions); transLoop++)
        {
            markedTransactions.data(conpeek(packedTransactions, transLoop));
            markedTransactions.insert();
        }

        // Return temp table instance
        return markedTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adding values from <c>TmpCustVendTrans</c> table buffer to container.
    /// </summary>
    /// <param name = "_module">
    /// The <c>ModuleCustVend</c> module of the <c>CustVendTrans</c> records.
    /// </param>
    /// <param name = "_specCompany">
    /// The spec company of the <c>CustTrans</c> or <c>VendTrans</c> table record.
    /// </param>
    /// <param name = "_specTableId">
    /// The spec table ID of the <c>CustTrans</c> or <c>VendTrans</c> table record.
    /// </param>
    /// <param name = "_specRecId">
    /// The spec record ID of the <c>CustTrans</c> or <c>VendTrans</c> table record.
    /// </param>
    /// <returns>
    /// A container that contains transactions marked for settlement.
    /// </returns>
    protected static container getTmpTrans(ModuleCustVend _module, CompanyId _specCompany, tableId _specTableId, RefRecId _specRecId)
    {
        CustVendTrans custVendTrans;
        CustTrans custTrans;
        VendTrans vendTrans;
        CustVendTransOpen custVendTransOpen;
        CustTransOpen custTransOpen;
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;
        TmpCustVendTrans markedTransaction;
        container packedTransactions;

        switch (_module)
        {
            case ModuleCustVend::Cust:
                custVendTransOpen = custTransOpen.data();
                custVendTrans = custTrans.data();
                break;
            case ModuleCustVend::Vend:
                custVendTransOpen = vendTransOpen.data();
                custVendTrans = vendTrans.data();
                break;
        }

        // For each SpecTrans, capture the marked transaction information and add record to container
        while select crosscompany RefCompany, Balance01 from specTrans
            where specTrans.SpecCompany == _specCompany &&
                specTrans.SpecTableId == _specTableId &&
                specTrans.SpecRecId == _specRecId
            join custVendTransOpen
                where custVendTransOpen.DataAreaId == specTrans.RefCompany &&
                    custVendTransOpen.TableId == specTrans.RefTableId &&
                    custVendTransOpen.RecId == specTrans.RefRecId
            join custVendTrans
                where custVendTrans.DataAreaId == specTrans.RefCompany &&
                    custVendTrans.RecId == custVendTransOpen.RefRecId

        {
            //populates values to the buffer
            markedTransaction = CustVendFindSettlements::populateTmpCustVendTrans(custVendTrans, specTrans, custVendTransOpen);

            // Add record to container
            packedTransactions += [markedTransaction.data()];

            // Clear buffer
            markedTransaction.clear();
        }

        return packedTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates a new <c>TmpCustVendTrans</c> table buffer with values from the given <c>CustVendTrans</c> map, <c>SpecTrans</c> table buffer, and <c>CustVendTransOpen</c> table buffer.
    /// </summary>
    /// <param name = "_custVendTrans">
    ///     The <c>CustVendTrans</c> buffer to used to populate the new <c>TmpCustVendTrans</c> table buffer.
    /// </param>
    /// <param name = "_specTrans">
    ///     The <c>SpecTrans</c> buffer to used to populate the new <c>TmpCustVendTrans</c> table buffer.
    /// </param>
    /// <param name = "_custVendTransOpen">
    ///     The <c>CustVendTransOpen</c> buffer to used to populate the new <c>TmpCustVendTrans</c> table buffer.
    /// </param>
    /// <returns>
    ///     A newly populated <c>TmpCustVendTrans</c> table buffer.
    /// </returns>
    protected static TmpCustVendTrans populateTmpCustVendTrans(CustVendTrans _custVendTrans, SpecTrans _specTrans, CustVendTransOpen _custVendTransOpen)
    {
        TmpCustVendTrans markedTransaction;

        markedTransaction.AccountNum = _custVendTrans.AccountNum;
        markedTransaction.Company = _specTrans.RefCompany;
        markedTransaction.AmountCur = _specTrans.Balance01;
        markedTransaction.CurrencyCode = _custVendTrans.CurrencyCode;
        markedTransaction.Invoice = _custVendTrans.Invoice;
        markedTransaction.PaymReference = _custVendTrans.PaymReference;
        markedTransaction.PaymMode = _custVendTrans.PaymMode;
        markedTransaction.PostingProfile = _custVendTrans.PostingProfile;
        markedTransaction.TransDate = _custVendTrans.TransDate;
        markedTransaction.Txt = _custVendTrans.Txt;
        markedTransaction.Voucher = _custVendTrans.Voucher;
        markedTransaction.NegInstId = _custVendTrans.NegInstId;
        markedTransaction.NegInstSeqNum = _custVendTrans.NegInstSeqNum;
        markedTransaction.NegInstStatus = _custVendTrans.NegInstStatus;
        markedTransaction.BankRemittanceFileId = _custVendTrans.BankRemittanceFileId;
        markedTransaction.PaymId = _custVendTrans.PaymId;
        markedTransaction.TransType = _custVendTrans.TransType;
        markedTransaction.DueDate = _custVendTransOpen.DueDate;
        markedTransaction.BankDiscNoticeDeadline = _custVendTransOpen.BankDiscNoticeDeadline;
        markedTransaction.CashDiscDate = _custVendTransOpen.CashDiscDate;

        return markedTransaction;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>