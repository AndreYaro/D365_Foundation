<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgRegistrationInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Registration instrumentation activities.
/// </summary>
internal final class JmgRegistrationInstrumentationActivities
{
    public const str JmgRegistrationPrefix               = 'Registration.';

    private const str StartIndirectActivity              = 'StartIndirectActivity';
    private const str EndIndirectActivity                = 'EndIndirectActivity';
    private const str StartBreak                         = 'HaveBreak';
    private const str EndBreak                           = 'EndBreak';
    private const str StartBundle                        = 'StartBundle';
    private const str MakeFeedbackOnActiveJobs           = 'MakeFeedbackOnActiveJobs';
    private const str Bundle                             = 'Bundle';
    private const str MakeRegistrations                  = 'MakeRegistrations';
    private const str ClockIn                            = 'ClockIn';
    private const str ClockOut                           = 'ClockOut';
    private const str CallFromMenuItemStr                = 'JobCardTerminalMenuAction';
    private const str StartJob                           = 'StartJob';
    private const str CorrectFeedback                    = 'CorrectFeedback';
    private const str Login                              = 'Login';
    private const str ReportFeedback                     = 'ReportFeedback';
    private const str ViewAttachmentsOnStart             = 'ViewAttachmentsOnStart';
    private const str MakeRegistrationsIPC               = 'MakeRegistrationsIPC';
    private const str JmgMesLogBook                      = 'JmgMesLogBook';
    private const str JmgEmplSignedIn                    = 'JmgEmplSignedIn';
    private const str JmgMESBalances                     = 'JmgMESBalances';
    private const str RequestFeedbackPrompt              = 'RequestFeedbackPrompt';
    private const str StartDialog                        = 'StartDialog';
    private const str AbsenceDialog                      = 'AbsenceDialog';
    private const str TimeDialog                         = 'TimeDialog';
    private const str AttachmentDialog                   = 'AttachmentDialog';
    private const str LockScreen                         = 'LockScreen';
    private const str LockScreenClosed                   = 'LockScreenClosed';
    private const str CancelProductionPosting            = 'CancelProductionPosting';
    private const str PostProductionJournals             = 'PostProductionJournals';
    private const str AutoPostQtyProdJournal             = 'AutoPostQtyProdJournal';
    private const str AutoPostPicklistJournal            = 'AutoPostPickListJournal';
    private const str AutoPostRafJournal                 = 'AutoPostRafJournal';
    private const str AutoPostMultiLineRafJournal        = 'AutoPostMultiLineRafJournal';
    private const str AutoPostStartUpJournal             = 'AutoPostStartUpJournal';
    private const str CreateMultiLineRAF                 = 'CreateMultiLineRAF';
    private const str BrowserParameters                  = 'BrowserParameters';
    private const str BuildAllTabs                       = 'BuildAllTabs';
    private const str BuildTab                           = 'BuildTab';
    private const str ConstructAction                    = 'ConstructAction';
    private const str ConstructUI                        = 'ConstructUI';
    private const str CreateDefaultConfiguration         = 'CreateDefaultConfiguration';
    private const str CreateDefaultUITabsActions         = 'CreateDefaultUITabsActions';
    private const str ConstructAllActionsForTab          = 'ConstructAllActionsForTab';
    private const str JmgError                           = 'Error';
    private const str Assist                             = 'Assist';
    private const str AssistResource                     = 'AssistResource';
    private const str OpenAttachments                    = 'OpenAttachments';
    private const str OpenGuides                         = 'OpenGuides';
    private const str InitControlsProperties             = 'InitControlsProperties';
    private const str OpenAdjustMaterial                 = 'OpenAdjustMaterial';
    private const str AdjustMaterial                     = 'AdjustMaterial';
    private const str PostPickingListJournals            = 'PostPickingListJournals';
    private const str OpenReserveMaterial                = 'OpenReserveMaterial';
    private const str ReserveMaterial                    = 'ReserveMaterial';
    private const str OpenReserveMaterialWhs             = 'OpenReserveMaterialWhs';
    private const str ReserveMaterialWhs                 = 'ReserveMaterialWhs';
    private const str OpenCoByProduct                    = 'OpenCoByProduct';
    private const str RunPreReportProgress               = 'RunPreReportProgress';

    public const str ParmFormCaller                                      = 'FormCaller';
    public const str ParmMenuItemName                                    = 'MenuItemName';
    public const str ParmJmgBundleType                                   = 'BundleType';
    public const str ParmJmgStampType                                    = 'StampType';
    public const str ParmJmgSignType                                     = 'SignType';
    public const str ParmJmgSignInButtonFunction                         = 'JmgSignInButtonFunction';
    public const str ParmGuid                                            = 'Guid';
    public const str ParmIsBatchRequired                                 = 'IsBatchRequired';
    public const str ParmIsLicensePlateRequired                          = 'IsLicensePlateRequired';
    public const str ParmIsSerialRequired                                = 'IsSerialRequired';
    public const str ParmIncludeBOMJournals                              = 'IsIncludeBOMJournals';
    public const str ParmStatusQtyProdJournalCheckPostList               = 'ProdStatusQtyJournalsPost';
    public const str ParmReportFinishedMultiLineJournalCheckPostList     = 'ProdReportFinishedMultiLineJournalsPost';
    public const str ParmProdMultiReportFinished                         = 'ProdMultiReportFinishedJournalsPost';
    public const str ParmProdMultiStartUpJournals                        = 'ProdMultiStartUpJournalsPost';
    public const str ParmJmgProdParametersDim_StatusQtyPostAutomatically = 'IsPostStatusQtyAutomatically';
    public const str ParmJmgProdParametersDim_BOMPostAutomatically       = 'IsPostBomAutomatically';
    public const str ParmJmgProdParametersDim_ReportFinishStatus         = 'PostReportFinishStatusEnum';
    public const str ParmBrowserName                                     = 'BrowserName';
    public const str ParmScreenWidth                                     = 'ScreenWidth';
    public const str ParmScreenHeight                                    = 'ScreenHeight';
    public const str ParmWindowWidth                                     = 'WindowWidth';
    public const str ParmWindowHeight                                    = 'WindowHeight';
    public const str ParmNumberOfTabs                                    = 'NumberOfTabs';
    public const str ParmNumberOfRightActions                            = 'NumberOfRightPanelActions';
    public const str ParmNumberOfLeftActions                             = 'NumberOfLeftPanelActions';
    public const str ParmJmgProductionFloorExecutionAction               = 'JmgProductionFloorExecutionAction';
    public const str ParmJmgProductionFloorExecutionConfigurationTab     = 'JmgProductionFloorExecutionConfigurationTab';
    public const str ParmJmgProductionFloorExecutionConfiguration        = 'JmgProductionFloorExecutionConfiguration';
    public const str ParmJmgProductionFloorExecutionTab                  = 'JmgProductionFloorExecutionTab';
    public const str ParmActionImage                                     = 'Image';
    public const str ParmActionFormControlType                           = 'ControlType';
    public const str ParmActionClassName                                 = 'ActionClassName';
    public const str ParmActionPanelType                                 = 'ActionPanelType';
    public const str ParmMainMenuItemClassName                           = 'MainMenuItemClassName';
    public const str ParmDetailsMenuItemClassName                        = 'DetailsMenuItemClassName';
    public const str ParmSeqNum                                          = 'SequenceNumber';
    public const str ParmErrorMessage                                    = 'ErrorMessage';
    private const str ParmWorkerRecId                                    = 'WorkerRecId';
    public const str ParmDatasourceName                                  = 'DatasourceName';
    public const str ParmIsCWItem                                        = 'IsCWItem';
    public const str ParmReportProgressViewButtonStatus                  = 'IsListView';
    public const str ParmPostNow                                         = 'PostNow';

    private JmgInstrumentationLogger logger;

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(JmgInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    internal static JmgRegistrationInstrumentationActivities newFromLogger(JmgInstrumentationLogger _logger)
    {
        return new JmgRegistrationInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startIndirectActivity</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext startIndirectActivity()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + StartIndirectActivity);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endIndirectActivity</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext endIndirectActivity()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + EndIndirectActivity);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startBreak</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext startBreak()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + StartBreak);

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endBreak</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext endBreak()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + EndBreak);

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeFeedbackOnActiveJobs</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext makeFeedbackOnActiveJobs()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + MakeFeedbackOnActiveJobs);

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bundle</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext bundle()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + Bundle);

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRegistrations</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext makeRegistrations()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + MakeRegistrations);

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clockIn</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext clockIn(JmgWorkerRecId _workerRecId)
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + ClockIn);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);
        activityContext.addCustomProperty(JmgRegistrationInstrumentationActivities::ParmWorkerRecId, int642Str(_workerRecId));
        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clockOut</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext clockOut(JmgWorkerRecId _workerRecId)
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + ClockOut);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);
        activityContext.addCustomProperty(JmgRegistrationInstrumentationActivities::ParmWorkerRecId, int642Str(_workerRecId));
        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callFromMenuItemStr</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext callFromMenuItemStr()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + CallFromMenuItemStr);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startJob</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext startJob()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + StartJob);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctFeedback</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext correctFeedback()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + CorrectFeedback);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>login</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext login(JmgWorkerRecId _workerRecId)
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + Login);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);
        
        activityContext.addCustomProperty(JmgRegistrationInstrumentationActivities::ParmWorkerRecId, int642Str(_workerRecId));               
        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportFeedback</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext reportFeedback()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + ReportFeedback);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControlsProperties</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext initControlsProperties()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + InitControlsProperties);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewAttachmentsOnStart</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext viewAttachmentsOnStart()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + ViewAttachmentsOnStart);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRegistrationsIPC</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext makeRegistrationsIPC()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + MakeRegistrationsIPC);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jmgMesLogBook</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext jmgMesLogBook()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + JmgMesLogBook);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jmgEmplSignedIn</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext jmgEmplSignedIn()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + JmgEmplSignedIn);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jmgMESBalances</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext jmgMESBalances()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + JmgMESBalances);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestFeedbackPrompt</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext requestFeedbackPrompt()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + RequestFeedbackPrompt);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDialog</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext startDialog()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + StartDialog);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>absenceDialog</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext absenceDialog()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + AbsenceDialog);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeDialog</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext timeDialog()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + TimeDialog);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachmentDialog</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext attachmentDialog()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + AttachmentDialog);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockScreen</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext lockScreen()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + LockScreen);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockScreenClosed</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext lockScreenClosed()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + LockScreenClosed);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerName</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static str callerName(FormName _name)
    {
        return _name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormParms</Name>
				<Source><![CDATA[
    internal static SysInstrumentationActivityContext initFormParms(SysInstrumentationActivityContext _scenario, FormName formName)
    {
        _scenario.addCustomProperty(JmgRegistrationInstrumentationActivities::ParmFormCaller, JmgRegistrationInstrumentationActivities::callerName(formName));

        return _scenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelProductionPosting</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext cancelProductionPosting()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + CancelProductionPosting);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProductionJournals</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext postProductionJournals()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + PostProductionJournals);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoPostQtyProdJournal</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext autoPostQtyProdJournal()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + AutoPostQtyProdJournal);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoPostPickListJournal</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext autoPostPickListJournal()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + AutoPostPickListJournal);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoPostRafJournal</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext autoPostRafJournal()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + AutoPostRafJournal);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoPostMultiLineRafJournal</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext autoPostMultiLineRafJournal()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + AutoPostMultiLineRafJournal);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoPostStartUpJournal</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext autoPostStartUpJournal()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + AutoPostStartUpJournal);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMultiLineRAF</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext createMultiLineRAF()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + CreateMultiLineRAF);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logBrowserParams</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext logBrowserParams()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + BrowserParameters);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProdStatusUpdateReportFinished</Name>
				<Source><![CDATA[
    internal static str ProdStatusUpdateReportFinished(JmgProdStatusUpdateReportFinished _reportFinishStatus)
    {
        switch(_reportFinishStatus)
        {
            case JmgProdStatusUpdateReportFinished::No:
                return 'No';
            case JmgProdStatusUpdateReportFinished::Qty:
                return 'StatusQuantity';
            case JmgProdStatusUpdateReportFinished::QtyOnly:
                return 'Quantity';
            case JmgProdStatusUpdateReportFinished::Status:
                return 'Status';
            default:
                return 'Unknown';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAllTabs</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext buildAllTabs()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + BuildAllTabs);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTab</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext buildTab()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + BuildTab);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAction</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext constructAction()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + ConstructAction);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructUI</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext constructUI()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + ConstructUI);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultConfiguration</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext createDefaultConfiguration()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + CreateDefaultConfiguration);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultUITabsActions</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext createDefaultUITabsActions()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + CreateDefaultUITabsActions);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAllActionsForTab</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext constructAllActionsForTab()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + ConstructAllActionsForTab);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assist</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext assist()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + Assist);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assistResource</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext assistResource()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + AssistResource);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logError</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext logError()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + JmgError);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAttachments</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext openAttachments()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + OpenAttachments);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openGuides</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext openGuides()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + OpenGuides);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAdjustMaterial</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext openAdjustMaterial()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + OpenAdjustMaterial);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustMaterial</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext adjustMaterial()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + AdjustMaterial);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPickingListJournals</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext postPickingListJournals()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + PostPickingListJournals);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openReserveMaterial</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext openReserveMaterial()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + OpenReserveMaterial);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveMaterial</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext reserveMaterial()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + ReserveMaterial);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openReserveMaterialWhs</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext openReserveMaterialWhs()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + OpenReserveMaterialWhs);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveMaterialWhs</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext reserveMaterialWhs()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + ReserveMaterialWhs);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openCoByProduct</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext openCoByProduct()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + OpenCoByProduct);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPreReportProgress</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext runPreReportProgress()
    {
        SysInstrumentationActivity activity = logger.activity(JmgRegistrationPrefix + RunPreReportProgress);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>