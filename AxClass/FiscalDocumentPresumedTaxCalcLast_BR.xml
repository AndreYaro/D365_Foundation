<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentPresumedTaxCalcLast_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the presumed tax information on fiscal document by last purchase order.
/// </summary>
[PresumedTaxAlgorithmCalcFactoryAttribute_BR(PresumedTaxAlgorithm_BR::Last)]
public class FiscalDocumentPresumedTaxCalcLast_BR extends FiscalDocumentPresumedTaxCalc_BR
{
    private FiscalDocumentTaxTransPresumedTemp_BR  presumedTemp;
    private FiscalDocument_BR origFiscalDocument;
    private FiscalDocumentLine_BR purchFDLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustPresumedTaxByQuantity</Name>
				<Source><![CDATA[
    private FiscalDocumentTaxTransPresumed_BR adjustPresumedTaxByQuantity(
        FiscalDocumentTaxTransPresumed_BR _fiscalDocumentTaxTransPresumed,
        UnitQty _refInvQuantity,
        UnitQty _invQuantity,
        TaxType_BR _taxType)
    {
        FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumed = _fiscalDocumentTaxTransPresumed;
        
        if (_refInvQuantity
            && _invQuantity
            && _refInvQuantity != _invQuantity)
        {
            if (_taxType == TaxType_BR::ICMS)
            {
                fiscalDocumentTaxTransPresumed.clear();
                fiscalDocumentTaxTransPresumed.PresumedvICMSSubstituto = fiscalDocumentTaxTransPresumed.PresumedTaxAmountPerInvUnit * _invQuantity;
            }
            else
            {
                fiscalDocumentTaxTransPresumed.PresumedTaxAmount = fiscalDocumentTaxTransPresumed.PresumedTaxAmountPerInvUnit * _invQuantity;
                fiscalDocumentTaxTransPresumed.PresumedTaxBaseAmount = fiscalDocumentTaxTransPresumed.PresumedTaxBaseAmountPerInvUnit * _invQuantity;
                fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmount = fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmountPerInvUnit * _invQuantity;
                fiscalDocumentTaxTransPresumed.PresumedFCPTaxBaseAmount = fiscalDocumentTaxTransPresumed.PresumedFCPTaxBaseAmountPerInvUnit * _invQuantity;
            }
        }

        return fiscalDocumentTaxTransPresumed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPresumedTaxForLine</Name>
				<Source><![CDATA[
    public void createPresumedTaxForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        if (canHavePresumedTaxes
            && (_fiscalDocumentLineParmData.parmInventTransId() 
            || fdPresumedSourceDocumentType == FDPresumedSourceDocumentType_BR::SalesComplement))
        {
            ItemId itemId = _fiscalDocumentLineParmData.parmItemId();
            UnitOfMeasureSymbol salesUnit = _fiscalDocumentLineParmData.parmUnit();
            UnitOfMeasureSymbol invUnit = InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
            UnitQty invQtyFromSalesQty = this.convertQty(itemId, salesUnit, invUnit, _fiscalDocumentLineParmData.parmQuantity());
            purchForLineMap = new Map(Types::Container, Types::Container);

            if (fdPresumedSourceDocumentType == FDPresumedSourceDocumentType_BR::VendInvoice)
            {
                this.setPresumedTaxFromVendInvoice(_fiscalDocumentLineParmData, invQtyFromSalesQty);
            }
            else if (fdPresumedSourceDocumentType == FDPresumedSourceDocumentType_BR::InTransfer)
            {
                this.setPresumedTaxFromIncTransferOrder(_fiscalDocumentLineParmData, invQtyFromSalesQty);
            }
            else
            {
                Enumerator taxEnumerator = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();

                while (taxEnumerator.moveNext())
                {
                    FiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmData = taxEnumerator.current();

                    if ((fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMSST
                        || fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMS)
                        && fiscalDocumentTaxTransParmData.parmTaxationCode() == FiscalBooksConstants_BR::TaxationCode60)
                    {
                        FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumed;
                        fiscalDocumentTaxTransPresumed.clear();

                        switch (fdPresumedSourceDocumentType)
                        {
                            case FDPresumedSourceDocumentType_BR::SalesComplement:
                                [fiscalDocumentTaxTransPresumed] = this.getPresumedTaxFromSaleForLine(_fiscalDocumentLineParmData, fiscalDocumentTaxTransParmData.parmType());
                                break;
                            
                            case FDPresumedSourceDocumentType_BR::SalesOrderReturn:
                                [fiscalDocumentTaxTransPresumed] = this.getPresumedTaxFromOrigSaleForLine(_fiscalDocumentLineParmData, fiscalDocumentTaxTransParmData.parmType());
                                break;
                            
                            case FDPresumedSourceDocumentType_BR::PurchOrderReturn:
                                origFiscalDocument = this.findOrigPurchFiscalDocument(_fiscalDocumentLineParmData);
                                [fiscalDocumentTaxTransPresumed] = this.getPresumedTaxFromDefault(_fiscalDocumentLineParmData, fiscalDocumentTaxTransParmData.parmType(), invUnit, invQtyFromSalesQty);
                                break;
                            
                            default:
                                [fiscalDocumentTaxTransPresumed] = this.getPresumedTaxFromDefault(_fiscalDocumentLineParmData, fiscalDocumentTaxTransParmData.parmType(), invUnit, invQtyFromSalesQty);
                                break;
                        }

                        if (fiscalDocumentTaxTransPresumed.PresumedTaxAmount || fiscalDocumentTaxTransPresumed.PresumedvICMSSubstituto)
                        {
                            this.initPresumedTaxParmData(fiscalDocumentTaxTransParmData, fiscalDocumentTaxTransPresumed);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFBBookingPeriodPresumedIncDocument</Name>
				<Source><![CDATA[
    private void createFBBookingPeriodPresumedIncDocument(
        ItemId _itemId,
        FiscalDocumentTaxTransPresumedTemp_BR _fiscalDocumentTaxTransPresumedTemp)
    {
        if (purchFDLine)
        {
            FBBookingPeriodPresumedIncDocuments_BR fbBookingPeriodPresumedIncDocuments = FBBookingPeriodPresumedIncDocuments_BR::find(fbBookingPeriod.RecId, purchFDLine.RecId);

            if (!fbBookingPeriodPresumedIncDocuments)
            {
                InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(purchFDLine.InventTransId);
                fbBookingPeriodPresumedIncDocuments.FBBookingPeriod_BR = fbBookingPeriod.RecId;
                fbBookingPeriodPresumedIncDocuments.FiscalDocument_BR = purchFDLine.FiscalDocument;
                fbBookingPeriodPresumedIncDocuments.FiscalDocumentLine_BR = purchFDLine.RecId;
                fbBookingPeriodPresumedIncDocuments.ItemId = _itemId;
                fbBookingPeriodPresumedIncDocuments.ProductName = this.getProductName(_itemId, InventTrans::findByInventTransOrigin(inventTransOrigin.RecId).inventDim());
                fbBookingPeriodPresumedIncDocuments.TaxAmountICMS = _fiscalDocumentTaxTransPresumedTemp.TaxAmountICMS;
                fbBookingPeriodPresumedIncDocuments.TaxBaseAmountICMSST = _fiscalDocumentTaxTransPresumedTemp.TaxBaseAmountICMSST;
                fbBookingPeriodPresumedIncDocuments.TaxRateICMSST = _fiscalDocumentTaxTransPresumedTemp.TaxPercentageICMSST;
                fbBookingPeriodPresumedIncDocuments.TaxAmountICMSST = _fiscalDocumentTaxTransPresumedTemp.TaxAmountICMSST;
                fbBookingPeriodPresumedIncDocuments.Unit = purchFDLine.Unit;
                fbBookingPeriodPresumedIncDocuments.Quantity = purchFDLine.Quantity;
                fbBookingPeriodPresumedIncDocuments.insert();
                purchFDLine.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPresumedTax</Name>
				<Source><![CDATA[
    public void createPresumedTax()
    {
        if (fdTaxTransICMSST)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10010, funcName());

            FiscalDocumentTaxTransPresumedTemp_BR fdTaxTransPresumedTempResult;

            ItemId itemId = fdLine.ItemId;
            UnitOfMeasureSymbol salesUnit = fdLine.Unit;
            UnitOfMeasureSymbol invUnit = InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
            real invQtyFromSalesQty = this.convertQty(itemId, salesUnit, invUnit, fdLine.Quantity);
            this.initQueryLinesSPED();
            
            [fdTaxTransPresumedTempResult] = this.getPresumedTaxFromPurch();
            
            if (presumedTemp.TaxAmountICMSST)
            {
                this.updatePresumedTaxForSPED(fdTaxTransICMS.RecId, fdTaxTransICMSST.RecId, fdTaxTransPresumedTempResult, invQtyFromSalesQty);
            }
            
            if (purchFDLine)
            {
                this.createFBBookingPeriodPresumedIncDocument(itemId, fdTaxTransPresumedTempResult);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrigPurchFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets original fiscal document.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> object.
    /// </param>
    /// <returns>
    /// The record of fiscal document.
    /// </returns>
    protected FiscalDocument_BR findOrigPurchFiscalDocument(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        FiscalDocument_BR fiscalDocument;

        Query query = this.initQueryOrigFiscalDocument();
        
        QueryBuildDataSource qbdsVendInvoiceTrans = query.dataSourceTable(tableNum(VendInvoiceTrans));
        qbdsVendInvoiceTrans.addRange(fieldNum(VendInvoiceTrans, RecId)).value(queryValue(_fiscalDocumentLineParmData.parmRefRecId()));
        
        QueryRun queryRun = new QueryRun(query);
        
        if (queryRun.next())
        {
            fiscalDocument = queryRun.get(tableNum(FiscalDocument_BR));
        }

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets presumed tax values by default.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> object.
    /// </param>
    /// <param name="_taxType">
    /// A tax type.
    /// </param>
    /// <param name="_invUnit">
    /// An inventory unit.
    /// </param>
    /// <param name="_invQtyFromSalesQty">
    /// An inventory quantity.
    /// </param>
    /// <returns>
    /// <c>container</c> with presumed tax values.
    /// </returns>
    protected container getPresumedTaxFromDefault(
        FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData,
        TaxType_BR _taxType,
        UnitOfMeasureSymbol _invUnit,
        UnitQty _invQtyFromSalesQty)
    {
        FiscalDocumentTaxTransPresumed_BR       fiscalDocumentTaxTransPresumed;
        
        container result = this.getPresumedTaxfromPurchForLine(_fiscalDocumentLineParmData, _taxType);
        
        if (result != conNull())
        {
            FiscalDocumentLine_BR                   fiscalDocumentLine;
            FiscalDocumentTaxTrans_BR               fiscalDocumentTaxTrans;
            FiscalDocumentTaxTransPovertyFund_BR    fiscalDocumentTaxTransPovertyFund;

            [fiscalDocumentLine, fiscalDocumentTaxTrans, fiscalDocumentTaxTransPovertyFund] = result;
            UnitOfMeasureSymbol purchaseUnit = fiscalDocumentLine.Unit;
            UnitQty purchaseQty = fiscalDocumentLine.Quantity;
            UnitQty invQtyFromPurchQty = this.convertQty(_fiscalDocumentLineParmData.parmItemId(), purchaseUnit, _invUnit, purchaseQty);
            
            if (fbBookingPeriod)
            {
                purchFDLine = fiscalDocumentLine;
            }

            if (invQtyFromPurchQty)
            {
                fiscalDocumentTaxTransPresumed.PresumedTaxAmountPerInvUnit = fiscalDocumentTaxTrans.TaxAmountOther/ invQtyFromPurchQty;
                fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmountPerInvUnit = fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount / invQtyFromPurchQty;
                
                if (_taxType == TaxType_BR::ICMSST)
                {
                    fiscalDocumentTaxTransPresumed.PresumedTaxBaseAmountPerInvUnit = fiscalDocumentTaxTrans.TaxBaseAmountOther / invQtyFromPurchQty;
                    fiscalDocumentTaxTransPresumed.PresumedFCPTaxBaseAmountPerInvUnit = fiscalDocumentTaxTransPovertyFund.TaxPovertyFundBaseAmount / invQtyFromPurchQty;
                }
            }

            fiscalDocumentTaxTransPresumed.FiscalDocumentTaxTrans_BR = fiscalDocumentTaxTrans.RecId;
            
            if (_taxType == TaxType_BR::ICMS)
            {
                fiscalDocumentTaxTransPresumed.PresumedvICMSSubstituto = (fiscalDocumentTaxTransPresumed.PresumedTaxAmountPerInvUnit - fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmountPerInvUnit) * _invQtyFromSalesQty;
            }
            else
            {
                fiscalDocumentTaxTransPresumed.PresumedTaxAmount = (fiscalDocumentTaxTransPresumed.PresumedTaxAmountPerInvUnit - fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmountPerInvUnit) * _invQtyFromSalesQty;
                fiscalDocumentTaxTransPresumed.PresumedTaxBaseAmount = fiscalDocumentTaxTransPresumed.PresumedTaxBaseAmountPerInvUnit * _invQtyFromSalesQty;
                fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmount = fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmountPerInvUnit * _invQtyFromSalesQty;
                fiscalDocumentTaxTransPresumed.PresumedFCPTaxBaseAmount = fiscalDocumentTaxTransPresumed.PresumedFCPTaxBaseAmountPerInvUnit * _invQtyFromSalesQty;
                fiscalDocumentTaxTransPresumed.PresumedTaxPercentage = fiscalDocumentTaxTrans.TaxValue - fiscalDocumentTaxTransPovertyFund.TaxPovertyFundPercentage;
                fiscalDocumentTaxTransPresumed.PresumedFCPTaxPercentage = fiscalDocumentTaxTransPovertyFund.TaxPovertyFundPercentage;
            }
        }
        
        return [fiscalDocumentTaxTransPresumed];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromMiscChargesForLine</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromMiscChargesForLine(RefRecId _fiscalDocumentLineRef, TaxType_BR _taxType)
    {
        Query query = this.initQueryMiscCharges();
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(FiscalDocumentMiscCharge_BR));
        findOrCreateRange_W(qbds, fieldNum(FiscalDocumentMiscCharge_BR, FiscalDocumentLine), queryValue(_fiscalDocumentLineRef));
        qbds = query.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
        findOrCreateRange_W(qbds, fieldNum(FiscalDocumentTaxTrans_BR, Type), queryValue(_taxType));
        qbds.firstOnly(true);

        QueryRun queryRun = new QueryRun(query);

        FiscalDocumentTaxTrans_BR   fiscalDocumentTaxTransMiscCharges;
        if (queryRun.next())
        {
            fiscalDocumentTaxTransMiscCharges = queryRun.get(tableNum(FiscalDocumentTaxTrans_BR));
        }

        return [fiscalDocumentTaxTransMiscCharges];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromOrigSaleForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets presumed tax values for line from original sales order.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> object.
    /// </param>
    /// <param name="_taxType">
    /// A tax type.
    /// </param>
    /// <returns>
    /// <c>container</c> with presumed tax values.
    /// </returns>
    protected container getPresumedTaxFromOrigSaleForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, TaxType_BR _taxType)
    {
        FiscalDocumentTaxTransPresumed_BR   fiscalDocumentTaxTransPresumed;
        ItemId                              itemId = _fiscalDocumentLineParmData.parmItemId();
        UnitOfMeasureSymbol                 invUnit = InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
        UnitOfMeasureSymbol                 salesUnit = _fiscalDocumentLineParmData.parmUnit();
        
        Query query = this.initQueryReferenceDocument();
        QueryBuildDataSource qbdsCustInvoiceTrans = query.dataSourceTable(tableNum(CustInvoiceTrans), 2);
        qbdsCustInvoiceTrans.enabled(true);
        findOrCreateRange_W(qbdsCustInvoiceTrans, fieldNum(CustInvoiceTrans, RecId), queryValue(_fiscalDocumentLineParmData.parmRefRecId()));
        
        QueryBuildDataSource qbdsSalesLine = query.dataSourceTable(tableNum(SalesLine));
        qbdsSalesLine.enabled(true);
        findOrCreateRange_W(qbdsSalesLine, fieldNum(SalesLine, ItemId), queryValue(itemId));
        
        QueryBuildDataSource qbdsCustInvoiceTransRef = query.dataSourceTable(tableNum(CustInvoiceTrans), 1);
        qbdsCustInvoiceTransRef.enabled(true);
        
        QueryBuildDataSource qbdsFiscalDocumentTaxTrans = query.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
        findOrCreateRange_W(qbdsFiscalDocumentTaxTrans, fieldNum(FiscalDocumentTaxTrans_BR, Type), queryValue(_taxType));
        
        QueryRun queryRun = new QueryRun(query);
        
        if (queryRun.next())
        {
            fiscalDocumentTaxTransPresumed = queryRun.get(tableNum(FiscalDocumentTaxTransPresumed_BR));
            FiscalDocumentLine_BR fiscalDocumentLine = queryRun.get(tableNum(FiscalDocumentLine_BR));
            
            UnitQty refInvQuantity = this.convertQty(itemId, salesUnit, invUnit, fiscalDocumentLine.Quantity);
            UnitQty invQuantity = this.convertQty(itemId, salesUnit, invUnit, _fiscalDocumentLineParmData.parmQuantity());
            fiscalDocumentTaxTransPresumed  = this.adjustPresumedTaxByQuantity(fiscalDocumentTaxTransPresumed, refInvQuantity, invQuantity, _taxType);
        }
        
        return [fiscalDocumentTaxTransPresumed];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromOutTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets presumed tax values for line from outgoing transfer order.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> object.
    /// </param>
    /// <param name="_taxType">
    /// A tax type.
    /// </param>
    /// <returns>
    /// <c>container</c> with presumed tax values.
    /// </returns>
    protected container getPresumedTaxFromOutTransferLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, TaxType_BR _taxType)
    {
        FiscalDocumentTaxTransPresumed_BR   fiscalDocumentTaxTransPresumed;
        ItemId                              itemId = _fiscalDocumentLineParmData.parmItemId();
        UnitOfMeasureSymbol                 invUnit = InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
        UnitOfMeasureSymbol                 salesUnit = _fiscalDocumentLineParmData.parmUnit();
        
        Query query = this.initQueryReferenceDocument();
        QueryBuildDataSource qbdsInventTransferJourLineRef = query.dataSourceTable(tableNum(InventTransferJourLine));
        qbdsInventTransferJourLineRef.enabled(true);
        
        QueryBuildDataSource qbdsInventTransferJourRef = query.dataSourceTable(tableNum(InventTransferJour));
        qbdsInventTransferJourRef.enabled(true);
        
        QueryBuildDataSource qbdsInventTransferJour = query.dataSourceTable(tableNum(InventTransferJour), 2);
        qbdsInventTransferJour.enabled(true);
        
        QueryBuildDataSource qbdsInventTransferJourLine = query.dataSourceTable(tableNum(InventTransferJourLine), 2);
        qbdsInventTransferJourLine.enabled(true);
        findOrCreateRange_W(qbdsInventTransferJourLine, fieldNum(InventTransferJourLine, RecId), queryValue(_fiscalDocumentLineParmData.parmRefRecId()));
        
        QueryBuildDataSource qbdsFiscalDocumentTaxTrans = query.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
        findOrCreateRange_W(qbdsFiscalDocumentTaxTrans, fieldNum(FiscalDocumentTaxTrans_BR, Type), queryValue(_taxType));
        
        QueryRun queryRun = new QueryRun(query);
        
        if (queryRun.next())
        {
            fiscalDocumentTaxTransPresumed = queryRun.get(tableNum(FiscalDocumentTaxTransPresumed_BR));
            FiscalDocumentLine_BR fiscalDocumentLine = queryRun.get(tableNum(FiscalDocumentLine_BR));
            
            UnitQty refInvQuantity = this.convertQty(itemId, salesUnit, invUnit, fiscalDocumentLine.Quantity);
            UnitQty invQuantity = this.convertQty(itemId, salesUnit, invUnit, _fiscalDocumentLineParmData.parmQuantity());
            fiscalDocumentTaxTransPresumed  = this.adjustPresumedTaxByQuantity(fiscalDocumentTaxTransPresumed, refInvQuantity, invQuantity, _taxType);
        }
        
        return [fiscalDocumentTaxTransPresumed];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurchForLine</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromPurchForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, TaxType_BR _taxType)
    {
        container result = conNull();
        
        if (purchForLineMap.exists([_fiscalDocumentLineParmData.parmRefRecId(), _fiscalDocumentLineParmData.parmRefTableId(), _taxType]))
        {
            result = purchForLineMap.lookup([_fiscalDocumentLineParmData.parmRefRecId(), _fiscalDocumentLineParmData.parmRefTableId(), _taxType]);
        }
        else
        {
            Query query = this.initQueryLines();
            QueryBuildDataSource qbds = query.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
            qbds.firstOnly(true);
            qbds = query.dataSourceTable(tableNum(InventTrans));
            findOrCreateRange_W(qbds, fieldNum(InventTrans, ItemId), queryValue(_fiscalDocumentLineParmData.parmItemId()));
            
            if (fiscalDocumentDate)
            {
                qbds = query.dataSourceTable(tableNum(FiscalDocument_BR));
                qbds.addRange(fieldNum(FiscalDocument_BR, FiscalDocumentDate)).value(queryRange(dateNull(), fiscalDocumentDate));
            }

            this.addRangesToInventDim(query, _fiscalDocumentLineParmData.parmInventTransId());

            if (origFiscalDocument)
            {
                QueryBuildDataSource qbdsFiscalDocument = query.dataSourceTable(tableNum(FiscalDocument_BR));
                qbdsFiscalDocument.clearRanges();
                qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, RecId)).value(queryValue(origFiscalDocument.RecId));
            }
            
            QueryRun queryRun = new QueryRun(query);
            
            if (queryRun.next())
            {
                FiscalDocument_BR fiscalDocument = queryRun.get(tableNum(FiscalDocument_BR));
                FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMS = queryRun.get(tableNum(FiscalDocumentTaxTransPresumed_BR));
                FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMSST = queryRun.get(tableNum(FiscalDocumentTaxTransPresumed_BR), 2);
                
                if (!origFiscalDocument
                    && !fiscalDocumentTaxTransPresumedICMS
                    && !fiscalDocumentTaxTransPresumedICMSST
                    && fiscalDocument.RefTableId == tableNum(InventTransferJour))
                {
                    result = this.getPresumedTaxFromTransferQueryRun(_fiscalDocumentLineParmData, _taxType, queryRun);
                }
                else
                {
                    container resultICMS = this.getPresumedTaxFromPurchQueryRun(queryRun, TaxType_BR::ICMS);
                    container resultICMSST = this.getPresumedTaxFromPurchQueryRun(queryRun, TaxType_BR::ICMSST);
                    
                    if (_taxType == TaxType_BR::ICMS)
                    {
                        result = resultICMS;
                        purchForLineMap.insert(
                            [_fiscalDocumentLineParmData.parmRefRecId(), 
                            _fiscalDocumentLineParmData.parmRefTableId(), 
                            TaxType_BR::ICMSST],
                            resultICMSST);
                    }
                    else
                    {
                        result = resultICMSST;
                        purchForLineMap.insert(
                            [_fiscalDocumentLineParmData.parmRefRecId(), 
                            _fiscalDocumentLineParmData.parmRefTableId(), 
                            TaxType_BR::ICMS],
                            resultICMS);
                    }
                }
            }
        }
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurchComplementForLine</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromPurchComplementForLine(RefRecId _fiscalDocumentLineRef, TaxType_BR _taxType)
    {
        Query query = this.initQueryPurchComplement();
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(PurchComplementaryInvoiceLine));
        findOrCreateRange_W(qbds, fieldNum(PurchComplementaryInvoiceLine, ComplementedFiscalDocumentLine), queryValue(_fiscalDocumentLineRef));
        qbds.firstOnly(true);
        qbds = query.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
        findOrCreateRange_W(qbds, fieldNum(FiscalDocumentTaxTrans_BR, Type), queryValue(_taxType));
        QueryRun queryRun = new QueryRun(query);

        FiscalDocumentTaxTrans_BR               fiscalDocumentTaxTransComlpement;
        FiscalDocumentTaxTransPovertyFund_BR    fiscalDocumentTaxTransPovertyFundComlpement;
        if (queryRun.next())
        {
            fiscalDocumentTaxTransComlpement = queryRun.get(tableNum(FiscalDocumentTaxTrans_BR));
            fiscalDocumentTaxTransPovertyFundComlpement = queryRun.get(tableNum(FiscalDocumentTaxTransPovertyFund_BR));
        }

        return [fiscalDocumentTaxTransComlpement, fiscalDocumentTaxTransPovertyFundComlpement];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromSaleForLine</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromSaleForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, TaxType_BR _taxType)
    {
        Query query = this.initQuerySalesComplement();
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(SalesComplementaryInvoiceLine));
        findOrCreateRange_W(qbds, fieldNum(SalesComplementaryInvoiceLine, RecId), queryValue(_fiscalDocumentLineParmData.parmRefRecId()));
        qbds.firstOnly(true);
        qbds = query.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
        findOrCreateRange_W(qbds, fieldNum(FiscalDocumentTaxTrans_BR, Type), queryValue(_taxType));
        QueryRun queryRun = new QueryRun(query);

        FiscalDocumentTaxTransPresumed_BR   fiscalDocumentTaxTransPresumed;
        if (queryRun.next())
        {
            fiscalDocumentTaxTransPresumed = queryRun.get(tableNum(FiscalDocumentTaxTransPresumed_BR));
        }

        return [fiscalDocumentTaxTransPresumed];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurchQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets presumed tax values for line from purchase order.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object.
    /// </param>
    /// <param name="_taxType">
    /// A tax type.
    /// </param>
    /// <returns>
    /// <c>container</c> with presumed tax values.
    /// </returns>
    protected container getPresumedTaxFromPurchQueryRun(QueryRun _queryRun, TaxType_BR _taxType)
    {
        FiscalDocumentLine_BR                   fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR               fiscalDocumentTaxTrans;
        FiscalDocumentTaxTrans_BR               fiscalDocumentTaxTransComlpement;
        FiscalDocumentTaxTransPovertyFund_BR    fiscalDocumentTaxTransPovertyFund;
        FiscalDocumentTaxTransPovertyFund_BR    fiscalDocumentTaxTransPovertyFundComlpement;
        
        origFiscalDocument.clear();
        fiscalDocumentLine = _queryRun.get(tableNum(FiscalDocumentLine_BR));
        
        if (_taxType == TaxType_BR::ICMS)
        {
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMS = _queryRun.get(tableNum(FiscalDocumentTaxTrans_BR));
            FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFundICMS = _queryRun.get(tableNum(FiscalDocumentTaxTransPovertyFund_BR));
            FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMS = _queryRun.get(tableNum(FiscalDocumentTaxTransPresumed_BR));
            
            if (fiscalDocumentTaxTransPresumedICMS.RecId != 0)
            {
                fiscalDocumentTaxTrans.TaxAmountOther = fiscalDocumentTaxTransPresumedICMS.PresumedvICMSSubstituto;
            }
            else
            {
                fiscalDocumentTaxTrans.TaxAmountOther = fiscalDocumentTaxTransICMS.TaxAmountOther;
                fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount = fiscalDocumentTaxTransPovertyFundICMS.TaxPovertyFundAmount;
            }

            fiscalDocumentTaxTrans.RecId = fiscalDocumentTaxTransICMS.RecId;
        }
        else
        {
            FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMS = _queryRun.get(tableNum(FiscalDocumentTaxTransPresumed_BR));
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMSST = _queryRun.get(tableNum(FiscalDocumentTaxTrans_BR), 2);
            FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFundICMSST = _queryRun.get(tableNum(FiscalDocumentTaxTransPovertyFund_BR), 2);
            FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMSST = _queryRun.get(tableNum(FiscalDocumentTaxTransPresumed_BR), 2);
            
            if (fiscalDocumentTaxTransPresumedICMSST.PresumedTaxAmount)
            {
                fiscalDocumentTaxTrans.TaxAmountOther = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxAmount;
                fiscalDocumentTaxTrans.TaxBaseAmountOther = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxBaseAmount;
                fiscalDocumentTaxTrans.TaxValue = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxPercentage;
                fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount = fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxAmount;
                fiscalDocumentTaxTransPovertyFund.TaxPovertyFundBaseAmount = fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxBaseAmount;
                fiscalDocumentTaxTransPovertyFund.TaxPovertyFundPercentage = fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxPercentage;
            }
            else if (fiscalDocumentTaxTransICMSST.TaxAmountOther)
            {
                fiscalDocumentTaxTrans = fiscalDocumentTaxTransICMSST;
                fiscalDocumentTaxTransPovertyFund = fiscalDocumentTaxTransPovertyFundICMSST;
            }
            else if (fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmount)
            {
                fiscalDocumentTaxTrans.TaxAmountOther = fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmount;
                fiscalDocumentTaxTrans.TaxBaseAmountOther = fiscalDocumentTaxTransPresumedICMS.PresumedTaxBaseAmount;
                fiscalDocumentTaxTrans.TaxValue = fiscalDocumentTaxTransPresumedICMS.PresumedTaxPercentage;
                fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount = fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxAmount;
                fiscalDocumentTaxTransPovertyFund.TaxPovertyFundBaseAmount = fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxBaseAmount;
                fiscalDocumentTaxTransPovertyFund.TaxPovertyFundPercentage = fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxPercentage;
            }

            fiscalDocumentTaxTrans.RecId = fiscalDocumentTaxTransICMSST.RecId;
        }
        
        [fiscalDocumentTaxTransComlpement, fiscalDocumentTaxTransPovertyFundComlpement] = this.getPresumedTaxFromPurchComplementForLine(fiscalDocumentLine.RecId, _taxType);
    
        fiscalDocumentTaxTrans.TaxAmountOther += fiscalDocumentTaxTransComlpement.TaxAmountOther;
        fiscalDocumentTaxTrans.TaxBaseAmountOther += fiscalDocumentTaxTransComlpement.TaxBaseAmountOther;
        fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount += fiscalDocumentTaxTransPovertyFundComlpement.TaxPovertyFundAmount;
        fiscalDocumentTaxTransPovertyFund.TaxPovertyFundBaseAmount += fiscalDocumentTaxTransPovertyFundComlpement.TaxPovertyFundBaseAmount;
        
        return [fiscalDocumentLine, fiscalDocumentTaxTrans, fiscalDocumentTaxTransPovertyFund];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromTransferQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets presumed tax values for line from transfer order.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> object.
    /// </param>
    /// <param name="_taxType">
    /// A tax type.
    /// </param>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object.
    /// </param>
    /// <returns>
    /// <c>container</c> with presumed tax values.
    /// </returns>
    private container getPresumedTaxFromTransferQueryRun(
        FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData,
        TaxType_BR _taxType,
        QueryRun _queryRun)
    {
        FiscalDocument_BR fiscalDocumentBase = _queryRun.get(tableNum(FiscalDocument_BR));
        FiscalDocument_BR fiscalDocument = fiscalDocumentBase;
        Query query = new Query(_queryRun.query());
        QueryBuildDataSource qbdsFiscalDocument = query.dataSourceTable(tableNum(FiscalDocument_BR));
        QueryBuildDataSource qbdsFiscalDocumentNoExist = qbdsFiscalDocument.addDataSource(tableNum(FiscalDocument_BR));
        boolean existsData = true;
        
        qbdsFiscalDocument.firstOnly(true);
        qbdsFiscalDocumentNoExist.relations(false);
        qbdsFiscalDocumentNoExist.joinMode(JoinMode::NoExistsJoin);
        qbdsFiscalDocumentNoExist.fetchMode(QueryFetchMode::One2One);
        qbdsFiscalDocumentNoExist.addLink(fieldNum(FiscalDocument_BR, RecId), fieldNum(FiscalDocument_BR, RecId));
        
        while (existsData)
        {
            findOrCreateRange_W(qbdsFiscalDocument, fieldNum(FiscalDocument_BR, FiscalEstablishment), queryValue(fiscalDocument.FiscalDocumentAccountNum));
            findOrCreateRange_W(qbdsFiscalDocument, fieldNum(FiscalDocument_BR, FiscalDocumentDate), queryRange(dateNull(), fiscalDocument.FiscalDocumentDate));
            qbdsFiscalDocumentNoExist.addRange(fieldNum(FiscalDocument_BR, RecId)).value(queryValue(fiscalDocument.RecId));
            
            QueryRun queryRun = new QueryRun(query);
            
            if (queryRun.next())
            {
                fiscalDocument = queryRun.get(tableNum(FiscalDocument_BR), 1);
                
                if (fiscalDocument.RefTableId == tableNum(VendInvoiceJour))
                {
                    origFiscalDocument = fiscalDocument;
                    break;
                }
            }
            else
            {
                existsData = false;
            }
        }
        
        origFiscalDocument = origFiscalDocument ? origFiscalDocument : fiscalDocumentBase;
        
        return this.getPresumedTaxFromPurchForLine(_fiscalDocumentLineParmData, _taxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromMiscCharges</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromMiscCharges()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurch</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromPurch()
    {
        InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(fdLine.InventTransId);
        InventDim inventDim = InventTrans::findByInventTransOrigin(inventTransOrigin.RecId).inventDim();
        
        select firstonly presumedTemp
            where presumedTemp.ItemId      == fdLine.ItemId
               && presumedTemp.InventDimId == inventDim.inventDimId;
        
        if (!presumedTemp)
        {
            FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumed;
            FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMSST;
            FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMS;

            FiscalDocumentLineParmData_BR fiscalDocumentLineParmData = new FiscalDocumentLineParmData_BR();
            fiscalDocumentLineParmData.parmItemId(fdLine.ItemId);
            fiscalDocumentLineParmData.parmUnit(fdLine.Unit);
            fiscalDocumentLineParmData.parmRefRecId(fdLine.RefRecId);
            fiscalDocumentLineParmData.parmRefTableId(fdLine.RefTableId);
            fiscalDocumentLineParmData.parmInventTransId(fdLine.InventTransId);
            
            ItemId itemId = fdLine.ItemId;
            UnitOfMeasureSymbol salesUnit = fdLine.Unit;
            UnitOfMeasureSymbol invUnit = InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
            real invQtyFromSalesQty = this.convertQty(itemId, salesUnit, invUnit, fdLine.Quantity);
            
            for (int i = 1; i <= conLen(taxTypes); i++)
            {
                TaxType_BR taxType = conPeek(taxTypes, i);
                fiscalDocumentTaxTransPresumed.clear();
                
                switch (fdPresumedSourceDocumentType)
                {
                    case FDPresumedSourceDocumentType_BR::SalesComplement:
                        [fiscalDocumentTaxTransPresumed] = this.getPresumedTaxFromSaleForLine(fiscalDocumentLineParmData, taxType);
                        break;
                    
                    case FDPresumedSourceDocumentType_BR::PurchOrderReturn:
                        origFiscalDocument = this.findOrigPurchFiscalDocument(fiscalDocumentLineParmData);
                        [fiscalDocumentTaxTransPresumed] = this.getPresumedTaxFromDefault(fiscalDocumentLineParmData, taxType, invUnit, invQtyFromSalesQty);
                        break;
                    
                    default:
                        [fiscalDocumentTaxTransPresumed] = this.getPresumedTaxFromDefault(fiscalDocumentLineParmData, taxType, invUnit, invQtyFromSalesQty);
                        break;
                }
                
                switch (taxType)
                {
                    case TaxType_BR::ICMSST:
                        fiscalDocumentTaxTransPresumedICMSST.data(fiscalDocumentTaxTransPresumed);
                        break;
                    
                    case TaxType_BR::ICMS:
                        fiscalDocumentTaxTransPresumedICMS.data(fiscalDocumentTaxTransPresumed);
                        break;
                }
            }
            
            presumedTemp.Unit = invUnit;
            presumedTemp.Quantity = invQtyFromSalesQty;
            presumedTemp.ItemId = itemId;
            presumedTemp.InventDimId = inventDim.inventDimId;
            presumedTemp.OriginalTaxTransICMS = fiscalDocumentTaxTransPresumedICMS.FiscalDocumentTaxTrans_BR;
            presumedTemp.TaxAmountICMS = fiscalDocumentTaxTransPresumedICMS.PresumedvICMSSubstituto + fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxAmount;
            presumedTemp.OriginalTaxTransICMSST = fiscalDocumentTaxTransPresumedICMSST.FiscalDocumentTaxTrans_BR;
            presumedTemp.TaxBaseAmountICMSST = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxBaseAmount;
            presumedTemp.TaxPercentageICMSST = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxPercentage;
            presumedTemp.TaxAmountICMSST = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxAmount + fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxAmount;
            presumedTemp.FCPTaxAmountICMSST = fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxAmount;
            presumedTemp.insert();
        }
       
        return [presumedTemp];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurchComplement</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromPurchComplement()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromSale</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromSale()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPresumedTaxParmData</Name>
				<Source><![CDATA[
    private void initPresumedTaxParmData(
        FiscalDocumentTaxTransParmData_BR _fiscalDocumentTaxTransParmData,
        FiscalDocumentTaxTransPresumed_BR _fiscalDocumentTaxTransPresumed)
    {
        _fiscalDocumentTaxTransParmData.parmPresumedTaxAmountPerInvUnit(_fiscalDocumentTaxTransPresumed.PresumedTaxAmountPerInvUnit);
        _fiscalDocumentTaxTransParmData.parmPresumedTaxBaseAmountPerInvUnit(_fiscalDocumentTaxTransPresumed.PresumedTaxBaseAmountPerInvUnit);
        _fiscalDocumentTaxTransParmData.parmPresumedTaxAmount(_fiscalDocumentTaxTransPresumed.PresumedTaxAmount);
        _fiscalDocumentTaxTransParmData.parmPresumedTaxBaseAmount(_fiscalDocumentTaxTransPresumed.PresumedTaxBaseAmount);
        _fiscalDocumentTaxTransParmData.parmPresumedTaxPercentage(_fiscalDocumentTaxTransPresumed.PresumedTaxPercentage);
        _fiscalDocumentTaxTransParmData.parmPresumedFCPTaxAmountPerInvUnit(_fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmountPerInvUnit);
        _fiscalDocumentTaxTransParmData.parmPresumedFCPTaxBaseAmountPerInvUnit(_fiscalDocumentTaxTransPresumed.PresumedFCPTaxBaseAmountPerInvUnit);
        _fiscalDocumentTaxTransParmData.parmPresumedFCPTaxAmount(_fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmount);
        _fiscalDocumentTaxTransParmData.parmPresumedFCPTaxBaseAmount(_fiscalDocumentTaxTransPresumed.PresumedFCPTaxBaseAmount);
        _fiscalDocumentTaxTransParmData.parmPresumedFCPTaxPercentage(_fiscalDocumentTaxTransPresumed.PresumedFCPTaxPercentage);
        _fiscalDocumentTaxTransParmData.parmPresumedvICMSSubstituto(_fiscalDocumentTaxTransPresumed.PresumedvICMSSubstituto);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryLinesSPED</Name>
				<Source><![CDATA[
    private void initQueryLinesSPED()
    {
        if (!queryTaxLines)
        {
            this.initQueryLines();
            
            QueryBuildDataSource qbds = queryTaxLines.dataSourceTable(tableNum(FiscalDocument_BR));
            qbds.addRange(fieldNum(FiscalDocument_BR, RefTableId)).value(queryValue(tableNum(CustInvoiceJour)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransAndPovertyFundFromPresumed</Name>
				<Source><![CDATA[
    private void initTaxTransAndPovertyFundFromPresumed(
        FiscalDocumentTaxTrans_BR _fiscalDocumentTaxTrans,
        FiscalDocumentTaxTransPovertyFund_BR _fiscalDocumentTaxTransPovertyFund,
        FiscalDocumentTaxTransPresumed_BR _fiscalDocumentTaxTransPresumed)
    {
        _fiscalDocumentTaxTrans.TaxAmountOther = _fiscalDocumentTaxTransPresumed.PresumedTaxAmount;
        _fiscalDocumentTaxTrans.TaxBaseAmountOther = _fiscalDocumentTaxTransPresumed.PresumedTaxBaseAmount;
        _fiscalDocumentTaxTrans.TaxValue = _fiscalDocumentTaxTransPresumed.PresumedTaxPercentage;
        _fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount = _fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmount;
        _fiscalDocumentTaxTransPovertyFund.TaxPovertyFundBaseAmount = _fiscalDocumentTaxTransPresumed.PresumedFCPTaxBaseAmount;
        _fiscalDocumentTaxTransPovertyFund.TaxPovertyFundPercentage = _fiscalDocumentTaxTransPresumed.PresumedFCPTaxPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPresumedTaxFromIncTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets presumed tax values for line from incoming transfer order.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> object.
    /// </param>
    /// <param name="_invQtyFromSalesQty">
    /// An inventory quantity.
    /// </param>
    protected void setPresumedTaxFromIncTransferOrder(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, UnitQty _invQtyFromSalesQty)
    {
        FiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmDataICMS;
        FiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmDataICMSST;
        ListEnumerator                    taxEnumerator = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();
        
        while (taxEnumerator.moveNext())
        {
            FiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmData;

            fiscalDocumentTaxTransParmData = taxEnumerator.current();
            
            if (fiscalDocumentTaxTransParmData.parmTaxationCode() == FiscalBooksConstants_BR::TaxationCode60)
            {
                if (fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMSST)
                {
                    fiscalDocumentTaxTransParmDataICMSST = fiscalDocumentTaxTransParmData;
                }
                else if (fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMS)
                {
                    fiscalDocumentTaxTransParmDataICMS = fiscalDocumentTaxTransParmData;
                }
            }
        }
        
        if (fiscalDocumentTaxTransParmDataICMS)
        {
            FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMSST;
            FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMS;

            [fiscalDocumentTaxTransPresumedICMS] = this.getPresumedTaxFromOutTransferLine(_fiscalDocumentLineParmData, TaxType_BR::ICMS);
            [fiscalDocumentTaxTransPresumedICMSST] = this.getPresumedTaxFromOutTransferLine(_fiscalDocumentLineParmData, TaxType_BR::ICMSST);
            
            if (fiscalDocumentTaxTransParmDataICMSST)
            {
                this.initPresumedTaxParmData(fiscalDocumentTaxTransParmDataICMSST, fiscalDocumentTaxTransPresumedICMSST);
            }
            else
            {
                fiscalDocumentTaxTransPresumedICMS.PresumedTaxBaseAmountPerInvUnit = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxBaseAmountPerInvUnit;
                fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxAmountPerInvUnit = fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxAmountPerInvUnit;
                fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxBaseAmountPerInvUnit = fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxBaseAmountPerInvUnit;
                fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmount = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxAmount;
                fiscalDocumentTaxTransPresumedICMS.PresumedTaxBaseAmount = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxBaseAmount;
                fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxAmount = fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxAmount;
                fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxBaseAmount = fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxBaseAmount;
                fiscalDocumentTaxTransPresumedICMS.PresumedTaxPercentage = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxPercentage;
                fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxPercentage = fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxPercentage;
            }
            
            this.initPresumedTaxParmData(fiscalDocumentTaxTransParmDataICMS, fiscalDocumentTaxTransPresumedICMS);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPresumedTaxFromVendInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets presumed tax values for line from vendor invoice.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> object.
    /// </param>
    /// <param name="_invQtyFromSalesQty">
    /// An inventory quantity.
    /// </param>
    protected void setPresumedTaxFromVendInvoice(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, UnitQty _invQtyFromSalesQty)
    {
        fiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmDataICMS;
        fiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmDataICMSST;
        ListEnumerator                    taxEnumerator = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();
        
        while (taxEnumerator.moveNext())
        {
            FiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmData;

            fiscalDocumentTaxTransParmData = taxEnumerator.current();
            
            if (fiscalDocumentTaxTransParmData.parmTaxationCode() == FiscalBooksConstants_BR::TaxationCode60)
            {
                if (fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMSST)
                {
                    fiscalDocumentTaxTransParmDataICMSST = fiscalDocumentTaxTransParmData;
                }
                else if (fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMS)
                {
                    fiscalDocumentTaxTransParmDataICMS = fiscalDocumentTaxTransParmData;
                }
            }
        }
        
        if (_invQtyFromSalesQty && fiscalDocumentTaxTransParmDataICMS)
        {
            VendInvoiceTrans vendInvoiceTrans = VendInvoiceTrans::findRecId(_fiscalDocumentLineParmData.parmRefRecId());
            VendInvoiceInfoLine vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(vendInvoiceTrans.SourceDocumentLine);
            FDTaxTransPresumedUncommitted_BR fdTaxTransPresumedUncommittedICMS = FDTaxTransPresumedUncommitted_BR::find(vendInvoiceInfoLine.RecId, vendInvoiceInfoLine.TableId, TaxType_BR::ICMS);
            FDTaxTransPresumedUncommitted_BR fdTaxTransPresumedUncommittedICMSST = FDTaxTransPresumedUncommitted_BR::find(vendInvoiceInfoLine.RecId, vendInvoiceInfoLine.TableId, TaxType_BR::ICMSST);
            fdTaxTransPresumedUncommittedICMSST = fdTaxTransPresumedUncommittedICMSST ? fdTaxTransPresumedUncommittedICMSST : fdTaxTransPresumedUncommittedICMS;
            
            if (fdTaxTransPresumedUncommittedICMS)
            {
                FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMS;

                fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmountPerInvUnit = fdTaxTransPresumedUncommittedICMSST.ICMSSTTaxAmount / _invQtyFromSalesQty;
                fiscalDocumentTaxTransPresumedICMS.PresumedTaxBaseAmountPerInvUnit = fdTaxTransPresumedUncommittedICMSST.ICMSSTTaxBaseAmount / _invQtyFromSalesQty;
                fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxAmountPerInvUnit = fdTaxTransPresumedUncommittedICMSST.FCPSTTaxAmount / _invQtyFromSalesQty;
                fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxBaseAmountPerInvUnit = fdTaxTransPresumedUncommittedICMSST.FCPSTTaxBaseAmount / _invQtyFromSalesQty;
                fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmount = fdTaxTransPresumedUncommittedICMSST.ICMSSTTaxAmount;
                fiscalDocumentTaxTransPresumedICMS.PresumedTaxBaseAmount = fdTaxTransPresumedUncommittedICMSST.ICMSSTTaxBaseAmount;
                fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxAmount = fdTaxTransPresumedUncommittedICMSST.FCPSTTaxAmount;
                fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxBaseAmount = fdTaxTransPresumedUncommittedICMSST.FCPSTTaxBaseAmount;
                fiscalDocumentTaxTransPresumedICMS.PresumedTaxPercentage = fdTaxTransPresumedUncommittedICMSST.ICMSSTTaxValue;
                fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxPercentage = fdTaxTransPresumedUncommittedICMSST.FCPSTTaxValue;
                
                if (fiscalDocumentTaxTransParmDataICMSST)
                {
                    FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMSST;

                    fiscalDocumentTaxTransPresumedICMSST.data(fiscalDocumentTaxTransPresumedICMS);
                    this.initPresumedTaxParmData(fiscalDocumentTaxTransParmDataICMSST, fiscalDocumentTaxTransPresumedICMSST);
                    fiscalDocumentTaxTransPresumedICMS.clear();
                }
                
                fiscalDocumentTaxTransPresumedICMS.PresumedvICMSSubstituto = fdTaxTransPresumedUncommittedICMS.ICMSTaxAmount;
                fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmountPerInvUnit = fdTaxTransPresumedUncommittedICMS.ICMSSTTaxAmount / _invQtyFromSalesQty;
                this.initPresumedTaxParmData(fiscalDocumentTaxTransParmDataICMS, fiscalDocumentTaxTransPresumedICMS);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePresumedTaxForSPED</Name>
				<Source><![CDATA[
    private void updatePresumedTaxForSPED(
        RecId _taxTransICMSRecId,
        RecId _taxTransICMSSTRecId,
        FiscalDocumentTaxTransPresumedTemp_BR _fiscalDocumentTaxTransPresumedTemp,
        UnitQty _qty)
    {
        FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumed;
        
        fiscalDocumentTaxTransPresumed = FiscalDocumentTaxTransPresumed_BR::findByTaxTrans(_taxTransICMSRecId, true);
        fiscalDocumentTaxTransPresumed.SPEDPresumedTaxAmountPerInvUnit = _fiscalDocumentTaxTransPresumedTemp.TaxAmountICMS / _qty;
        fiscalDocumentTaxTransPresumed.SPEDPresumedTaxAmount = _fiscalDocumentTaxTransPresumedTemp.TaxAmountICMS;
        fiscalDocumentTaxTransPresumed.SPEDOriginalTaxTrans = _fiscalDocumentTaxTransPresumedTemp.OriginalTaxTransICMS;
        
        if (fiscalDocumentTaxTransPresumed.RecId)
        {
            fiscalDocumentTaxTransPresumed.update();
        }
        else
        {
            fiscalDocumentTaxTransPresumed.FiscalDocumentTaxTrans_BR = _taxTransICMSRecId;
            fiscalDocumentTaxTransPresumed.insert();
        }

        fiscalDocumentTaxTransPresumed.clear();
        fiscalDocumentTaxTransPresumed = FiscalDocumentTaxTransPresumed_BR::findByTaxTrans(_taxTransICMSSTRecId, true);
        fiscalDocumentTaxTransPresumed.SPEDPresumedTaxAmountPerInvUnit = _fiscalDocumentTaxTransPresumedTemp.TaxAmountICMSST / _qty;
        fiscalDocumentTaxTransPresumed.SPEDPresumedTaxBaseAmountPerInvUnit = _fiscalDocumentTaxTransPresumedTemp.TaxBaseAmountICMSST / _qty;
        fiscalDocumentTaxTransPresumed.SPEDPresumedFCPTaxAmountPerInvUnit = _fiscalDocumentTaxTransPresumedTemp.FCPTaxAmountICMSST / _qty;
        fiscalDocumentTaxTransPresumed.SPEDPresumedTaxPercentage = _fiscalDocumentTaxTransPresumedTemp.TaxPercentageICMSST;
        fiscalDocumentTaxTransPresumed.SPEDPresumedTaxAmount = _fiscalDocumentTaxTransPresumedTemp.TaxAmountICMSST;
        fiscalDocumentTaxTransPresumed.SPEDPresumedTaxBaseAmount = _fiscalDocumentTaxTransPresumedTemp.TaxBaseAmountICMSST;
        fiscalDocumentTaxTransPresumed.SPEDPresumedFCPTaxAmount = _fiscalDocumentTaxTransPresumedTemp.FCPTaxAmountICMSST;
        fiscalDocumentTaxTransPresumed.SPEDOriginalTaxTrans = _fiscalDocumentTaxTransPresumedTemp.OriginalTaxTransICMSST;
        
        if (fiscalDocumentTaxTransPresumed.RecId)
        {
            fiscalDocumentTaxTransPresumed.update();
        }
        else
        {
            fiscalDocumentTaxTransPresumed.FiscalDocumentTaxTrans_BR = _taxTransICMSSTRecId;
            fiscalDocumentTaxTransPresumed.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>