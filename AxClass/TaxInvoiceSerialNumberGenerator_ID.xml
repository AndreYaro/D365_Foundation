<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxInvoiceSerialNumberGenerator_ID</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxInvoiceSerialNumberGenerator_ID</c> provides an ability to generate Tax invoice serial number
/// as per Indonesian requirements.
/// </summary>
public final class TaxInvoiceSerialNumberGenerator_ID
{
    private TaxInvoiceSerialNumberGeneratorContextInterface_ID context;
    private Common common;
    private TaxInvoiceTransactionCode_ID transactionCode;
    private boolean isProforma;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Tax invoice serial number.
    /// </summary>
    /// <param name = "_common">The table buffer of the document.</param>
    /// <param name = "_transactionCode">The transaction code.</param>
    /// <returns>The Tax invoice serial number.</returns>
    public static TaxInvoiceSerialNumber_ID getNumber(
        Common _common,
        TaxInvoiceTransactionCode_ID _transactionCode)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceID00003, funcName());

        TaxInvoiceSerialNumberGenerator_ID instance = new TaxInvoiceSerialNumberGenerator_ID();

        TaxInvoiceSerialNumberGeneratorContextInterface_ID contextInstance =
            TaxInvoiceSerialNumberGeneratorContextFactory_ID::newFromTableName(tableId2Name(_common.TableId));

        instance.context = contextInstance;
        instance.common = _common;
        instance.transactionCode = _transactionCode;

        return instance.doGetNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldGetNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifyes if Tax invoice serial number should be allocated.
    /// </summary>
    /// <param name = "_common">The table buffer of the document.</param>
    /// <param name = "_isProforma">true if the proforma of document; otherwise, false.</param>
    /// <returns>true if Tax invoice serial number should be allocated; otherwise, false.</returns>
    public static boolean shouldGetNumber(Common _common, boolean _isProforma)
    {
        TaxInvoiceSerialNumberGenerator_ID instance = new TaxInvoiceSerialNumberGenerator_ID();

        TaxInvoiceSerialNumberGeneratorContextInterface_ID contextInstance =
            TaxInvoiceSerialNumberGeneratorContextFactory_ID::newFromTableName(tableId2Name(_common.TableId));

        instance.context = contextInstance;
        instance.common = _common;
        instance.isProforma = _isProforma;

        return instance.doShouldGetNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doGetNumber</Name>
				<Source><![CDATA[
    private TaxInvoiceSerialNumber_ID doGetNumber()
    {
        QueryRun queryRun = new QueryRun(this.getCreditInvoicingQuery());

        queryRun.next();

        CustVendCreditInvoicingTable custVendCreditInvoicingTable = queryRun.get(tableNum(CustVendCreditInvoicingTable));
        ReasonTable reasonTable = queryRun.get(tableNum(ReasonTable));

        TaxInvoiceSerialNumber_ID num;

        if (custVendCreditInvoicingTable.RecId != 0)
        {
            num = this.getNumberForCreditInvoicing(custVendCreditInvoicingTable, reasonTable.TaxInvoiceOperation_ID);
        }
        else
        {
            num = this.getNewNumber();
        }

        return num;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doShouldGetNumber</Name>
				<Source><![CDATA[
    private boolean doShouldGetNumber()
    {
        boolean ret;

        ret = !isProforma;
        ret = ret && this.isEInvoiceDocument();
        ret = ret && this.isApplicableForDocument();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewNumber</Name>
				<Source><![CDATA[
    private TaxInvoiceSerialNumber_ID getNewNumber()
    {
        NumberSeq numberSeq = this.allocateNumberSeq(context.getNumberSequenceGroup(common));

        TaxInvoiceSerialNumber_ID num = numberSeq.num();

        num = strFmt('%1%2.%3', transactionCode, '0', num);

        return num;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateNumberSeq</Name>
				<Source><![CDATA[
    private NumberSeq allocateNumberSeq(NumberSequenceGroupId _numberSequenceGroupId)
    {
        NumberSeq numberSeq;

        if (_numberSequenceGroupId != '')
        {
            NumberSequenceDatatype taxInvoiceSerialNumberDatatype = NumberSequenceDatatype::find(CustParameters::numRefTaxInvoiceSerialNumber_ID().NumberSequenceDatatype);
            RefRecId scopeId = NumberSeqScopeFactory::createDefaultScope().getId();
            RefRecId taxInvoiceSerialNumberSeqId = NumberSequenceGroupRef::findNaturalKey(taxInvoiceSerialNumberDatatype.RecId, scopeId, _numberSequenceGroupId).NumberSequenceId;

            if (taxInvoiceSerialNumberSeqId != 0)
            {
                numberSeq = NumberSeq::newGetNumFromId(taxInvoiceSerialNumberSeqId);
            }
        }

        if (!numberSeq)
        {
            numberSeq =  NumberSeq::newGetNum(CustParameters::numRefTaxInvoiceSerialNumber_ID());
        }

        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberForCreditInvoicing</Name>
				<Source><![CDATA[
    private TaxInvoiceSerialNumber_ID getNumberForCreditInvoicing(CustVendCreditInvoicingTable _custVendCreditInvoicingTable, TaxInvoiceOperationType_ID _taxInvoiceOperation)
    {
        TaxInvoiceSerialNumber_ID num;

        switch (_taxInvoiceOperation)
        {
            case TaxInvoiceOperationType_ID::Cancelation:
                num = '';
                break;

            case TaxInvoiceOperationType_ID::Replacement:
                TaxInvoiceSerialNumber_ID correctedTaxInvoiceSerialNumber = context.getCorrectedTaxInvoiceSerialNumber(
                    _custVendCreditInvoicingTable.CustVendCorrectedInvoiceId,
                    _custVendCreditInvoicingTable.CustVendCorrectedInvoiceDate);

                num = this.getReplacementTaxInvoiceNumber(correctedTaxInvoiceSerialNumber);
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        return num;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReplacementTaxInvoiceNumber</Name>
				<Source><![CDATA[
    private TaxInvoiceSerialNumber_ID getReplacementTaxInvoiceNumber(TaxInvoiceSerialNumber_ID _corectedTaxInvoiceSerialNumber)
    {
        const int StatusCodePosition = 3;
        const str ReplacementStatusCode = '1';
        return strIns(strDel(_corectedTaxInvoiceSerialNumber, StatusCodePosition, 1), ReplacementStatusCode, StatusCodePosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditInvoicingQuery</Name>
				<Source><![CDATA[
    private Query getCreditInvoicingQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsCreditInvoicingTable = query.addDataSource(tableNum(CustVendCreditInvoicingTable));

        qbdsCreditInvoicingTable.firstOnly(true);

        qbdsCreditInvoicingTable.addSelectionField(fieldNum(CustVendCreditInvoicingTable, RecId));
        qbdsCreditInvoicingTable.addSelectionField(fieldNum(CustVendCreditInvoicingTable, CustVendCorrectedInvoiceId));
        qbdsCreditInvoicingTable.addSelectionField(fieldNum(CustVendCreditInvoicingTable, CustVendCorrectedInvoiceDate));

        context.addRangeRefCreditInvoicingTable(common, qbdsCreditInvoicingTable);

        QueryBuildDataSource qbdsReasonTableRef = qbdsCreditInvoicingTable.addDataSource(tableNum(ReasonTableRef));
        qbdsReasonTableRef.relations(true);

        qbdsReasonTableRef.addSelectionField(fieldNum(ReasonTableRef, TableId));

        QueryBuildDataSource qbdsReasonTable = qbdsReasonTableRef.addDataSource(tableNum(ReasonTable));
        qbdsReasonTable.relations(true);

        qbdsReasonTable.addSelectionField(fieldNum(ReasonTable, TaxInvoiceOperation_ID));

        qbdsReasonTable.addRange(fieldNum(ReasonTable, TaxInvoiceOperation_ID)).value(SysQuery::valueNot(enum2Int(TaxInvoiceOperationType_ID::None)));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableForDocument</Name>
				<Source><![CDATA[
    private boolean isApplicableForDocument()
    {
        boolean ret = true;
        TaxInvoiceSerialNumberGeneratorContextApplicabilityInterface_ID contextApplicability = context as TaxInvoiceSerialNumberGeneratorContextApplicabilityInterface_ID;

        if (contextApplicability)
        {
            ret = contextApplicability.isApplicable(common);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEInvoiceDocument</Name>
				<Source><![CDATA[
    private boolean isEInvoiceDocument()
    {
        boolean ret = true;
        TaxInvoiceSerialNumberGeneratorContextEInvoiceInterface_ID contextEInvoice = context as TaxInvoiceSerialNumberGeneratorContextEInvoiceInterface_ID;

        if (contextEInvoice)
        {
            ret = contextEInvoice.eInvoice(common) == NoYes::Yes;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTaxInvoiceTransactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default transaction code used for Indonesian Tax invoice serial number.
    /// </summary>
    /// <returns>The default transaction code used for Indonesian Tax invoice serial number.</returns>
    public static TaxInvoiceTransactionCode_ID getDefaultTaxInvoiceTransactionCode()
    {
        return '01';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>