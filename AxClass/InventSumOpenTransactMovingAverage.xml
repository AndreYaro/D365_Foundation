<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumOpenTransactMovingAverage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventSumOpenTransactMovingAverage</c> class finds open transactions to adjust in the
/// inventory available adjustment form.Moving average does not close transaction. Moving average finds
/// the current on-hand quantity.Transactions are adjusted in reverse FIFO order.Financial updated
/// transactions are adjusted before physical transactions.
/// </summary>
class InventSumOpenTransactMovingAverage extends InventSumOpenTransact
{
    Qty             totalQty;
    CostAmount      totalValue;
    NoYes           isTransFetched;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the cost value for the quantity.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> record.
    /// </param>
    public void add(InventTrans _inventTrans)
    {
        if (_inventTrans.Qty || _inventTrans.CostAmountPosted || _inventTrans.CostAmountPhysical || _inventTrans.CostAmountAdjustment)
        {
            transMax += 1;
            transRecId[transMax] = _inventTrans.RecId;
            if (_inventTrans.isUpdatedPhysical())
            {
                transValue[transMax] = _inventTrans.CostAmountPhysical;
            }
            else
            {
                transValue[transMax] = _inventTrans.costValue();
            }
            transQty[transMax] = _inventTrans.Qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds inventory transactions to the array that corresponds to the current balance.
    /// </summary>
    protected void fetchTrans()
    {
        InventDim           inventDim;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        CostAmount          valueFetched;
        Qty                 qtyFetched;

        boolean stopFetch()
        {
            return abs(valueFetched) >= abs(totalValue) && abs(qtyFetched) >= abs(totalQty);
        }

        if (isTransFetched)
        {
            return;
        }

        // Adjust financial transactions first. Adjusting physical transaction can impact valuation on financial update.
        if (!stopFetch())
        {
            while select inventTrans
                order by DateStatus desc
                where inventTrans.ItemId == itemId
                    && inventTrans.ValueOpen == InventTransOpen::Yes
                    && ((inventTrans.StatusReceipt == StatusReceipt::Purchased && inventTrans.StatusIssue == StatusIssue::None && totalQty > 0)
                    || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Sold && totalQty < 0))
                #inventDimExistsJoin(inventTrans.inventDimId, inventDim, inventDimCriteria, inventDimParm)
            exists join inventTransOrigin
                        where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                           && inventTransOrigin.IsExcludedFromInventoryValue == NoYes::No
            {
                this.add(inventTrans);

                valueFetched += inventTrans.costValue();
                qtyFetched += inventTrans.Qty;

                if (stopFetch())
                {
                    break;
                }
            }
        }
        if (!stopFetch())
        {
            while select forupdate inventTrans
                order by DatePhysical desc
                where inventTrans.ItemId == itemId
                    && inventTrans.ValueOpen == InventTransOpen::Yes
                    && ((inventTrans.StatusReceipt == StatusReceipt::Received && inventTrans.StatusIssue == StatusIssue::None && totalQty > 0)
                    || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Deducted && totalQty < 0))
                #inventDimExistsJoin(inventTrans.inventDimId, inventDim, inventDimCriteria, inventDimParm)
            exists join inventTransOrigin
                            where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                               && inventTransOrigin.IsExcludedFromInventoryValue == NoYes::No
            {
                this.add(inventTrans);

                valueFetched += inventTrans.CostAmountPhysical;
                qtyFetched += inventTrans.Qty;

                if (stopFetch())
                {
                    break;
                }
            }
        }
        isTransFetched = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Distributes an adjustment over the receipts among the stored open transactions.
    /// </summary>
    /// <param name="_adjustTotal">
    ///    The adjustment to be distributed over the receipts.
    /// </param>
    void setAdjustment(CostAmount _adjustTotal)
    {
        this.setValueQty();
        this.fetchTrans();
        super(_adjustTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates posted quantity and cost amount.
    /// </summary>
    protected void setValueQty()
    {
        Query           query;
        InventDimParm   inventDimParmCriteria;

        if (isCalc)
        {
            return;
        }

        InventSumAddEmptyRangeValueForFinancialDimContext context = InventSumAddEmptyRangeValueForFinancialDimContext::current();
        InventDimGroupSetup::newItemId(itemId).inventDimParmActiveFinancialInventory(inventDimParm);

        if (context != null)
        {
            inventDimParmCriteria.initFromInventDimParm(inventDimParm);
        }
        else
        {
            inventDimParmCriteria.initFromInventDim(inventDimCriteria);
        }

        inventDimParmCriteria.ItemIdFlag = NoYes::Yes;
        query = InventSum::newQuery(query, itemId, inventDimCriteria, inventDimParmCriteria, inventDimParm);
        query.dataSourceTable(tableNum(InventSum)).addRange(fieldNum(InventSum, IsExcludedFromInventoryValue)).value(queryValue(NoYes::No));
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            InventSum inventSum = queryRun.get(tableNum(InventSum));
            totalQty += inventSum.Received + inventSum.PostedQty - inventSum.Deducted;
            totalValue += inventSum.PostedValue + inventSum.PhysicalValue;
        }
        isCalc     = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of posted quantity and received values.
    /// </summary>
    /// <returns>
    /// The quantity of the item in Inventory unit.
    /// </returns>
    public InventQty sumTransQty()
    {
        this.setValueQty();

        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTransValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of posted quantity and received values.
    /// </summary>
    /// <returns>
    /// Cost amount for the quantity.
    /// </returns>
    public CostAmount sumTransValue()
    {
        this.setValueQty();

        return totalValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>