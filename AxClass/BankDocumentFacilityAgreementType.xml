<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentFacilityAgreementType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The class is the business object class for the <c>BankDocumentFacilityAgreement</c> table.
/// </summary>
class BankDocumentFacilityAgreementType extends Object
{
    #OCCRetryCount
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>extend</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method is used to extend the <c>BankDocumentFacilityAgreement</c>, for both table and lines.
    /// </summary>
    /// <param name="_bankDocumentFacilityAgreementRecId">
    /// The original facility agreement record ID.
    /// </param>
    /// <param name="_newAgreementNumber">
    /// The new agreement number
    /// </param>
    /// <param name="_newValidToDateTime">
    /// The new end dateTime of the agreement period.
    /// </param>
    /// <returns>
    /// The created new facility agreement.
    /// </returns>
    public static BankDocumentFacilityAgreement extend(
        RecId                       _bankDocumentFacilityAgreementRecId,
        BankDocumentAgreementNumber _newAgreementNumber,
        ValidToDateTime             _newValidToDateTime)
    {
        BankDocumentFacilityAgreement     newBankDocumentFacilityAgreement;
        BankDocumentFacilityAgreementLine newBankDocumentFacilityAgreementLine;
        BankDocumentFacilityAgreement     originalBankDocumentFacilityAgreement;
        BankDocumentFacilityAgreementLine originalBankDocumentFacilityAgreementLine;
        BankLGFacilityAgreementLine       bankLGFacilityAgreementLine;

        try
        {
            ttsbegin;

            originalBankDocumentFacilityAgreement = BankDocumentFacilityAgreement::find(_bankDocumentFacilityAgreementRecId);

            newBankDocumentFacilityAgreement.clear();
            newBankDocumentFacilityAgreement.AgreementNumber  = _newAgreementNumber;
            newBankDocumentFacilityAgreement.BankAccountTable = originalBankDocumentFacilityAgreement.BankAccountTable;
            newBankDocumentFacilityAgreement.ValidFrom        = DateTimeUtil::addSeconds(originalBankDocumentFacilityAgreement.ValidTo, 1);
            newBankDocumentFacilityAgreement.ValidTo          = _newValidToDateTime;

            if (newBankDocumentFacilityAgreement.validateWrite())
            {
                newBankDocumentFacilityAgreement.insert();
            }
            else
            {
                // Extension of Bank document facility agreement is cancelled.
                throw error ("@SYS313652");
            }

            while select BankDocumentFacilityType, Limit
                from originalBankDocumentFacilityAgreementLine
                    where originalBankDocumentFacilityAgreementLine.BankDocumentFacilityAgreement == _bankDocumentFacilityAgreementRecId
                        outer join bankLGFacilityAgreementLine
                            where bankLGFacilityAgreementLine.BankDocumentFacilityAgreementLine == originalBankDocumentFacilityAgreementLine.RecId
            {
                newBankDocumentFacilityAgreementLine.clear();
                newBankDocumentFacilityAgreementLine.BankDocumentFacilityAgreement = newBankDocumentFacilityAgreement.RecId;
                newBankDocumentFacilityAgreementLine.BankDocumentFacilityType      = originalBankDocumentFacilityAgreementLine.BankDocumentFacilityType;
                newBankDocumentFacilityAgreementLine.Limit                         = originalBankDocumentFacilityAgreementLine.Limit;
                newBankDocumentFacilityAgreementLine.AmountUsed                    = 0;

                if (newBankDocumentFacilityAgreementLine.validateWrite())
                {
                    newBankDocumentFacilityAgreementLine.insert(bankLGFacilityAgreementLine);
                }
                else
                {
                    // Extension of Bank document facility agreement is cancelled.
                    throw error ("@SYS313652");
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return newBankDocumentFacilityAgreement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>