<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorBatchTaskRunner</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorBatchTaskRunner extends RunBaseBatch
{
    RetailCommerceValidatorId validationId;
    RetailCommerceValidatorTestId testId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        validationId,
        testId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>RetailCommerceValidatorBatchTaskRunner</c> class.
    /// </summary>
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the <c>RetailCommerceValidatorBatchTaskRunner</c> class.
    /// </summary>
    /// <returns>A container that contains the current instance of <c>RetailCommerceValidatorBatchTaskRunner</c>.</returns>
    public container pack()
    {
        container ret;

        ret = [#CurrentVersion,#CurrentList];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="_packedClass"/> parameter to the current instance of <c>RetailCommerceValidatorBatchTaskRunner</c>.
    /// </summary>
    /// <param name = "packedClass">The container from which to deserialize the instance.</param>
    /// <returns>true if deserialization was successful; otherwise, false.</returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTestId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the input parameter Test Id.
    /// </summary>
    /// <param name = "_testId">The test Id.</param>
    /// <returns>The test Id.</returns>
    public RetailCommerceValidatorTestId parmTestId(RetailCommerceValidatorId _testId = testId)
    {
        testId = _testId;

        return testId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the input parameter Validation Id.
    /// </summary>
    /// <param name = "_validationId">The Validation Id.</param>
    /// <returns>The validation Id.</returns>
    public RetailCommerceValidatorId parmValidationId(RetailCommerceValidatorId _validationId = validationId)
    {
        validationId = _validationId;

        return validationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides class description.
    /// </summary>
    /// <returns>The <c>ClassDescription</c>.</returns>
    public static ClassDescription description()
    {
        return "@Retail:RetailCommerceValidatorBatchTaskDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value for the parameter <c>canRunInNewSession</c> indicating if the Job can run in a new session.
    /// </summary>
    /// <returns>A boolean indicating when the job can run in a new session.</returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a validation test.
    /// </summary>
    public void run()
    {
        System.Exception Exception;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(this.parmValidationId());
        RetailCommerceValidatorTests retailCommerceValidatorTests = RetailCommerceValidatorTests::findByTest(this.parmValidationId(), this.parmTestId(), true);
        RetailCommerceValidatorRules RetailCommerceValidatorRules = RetailCommerceValidatorRules::find(retailCommerceValidatorTests.RuleId);
        RetailCommerceValidatorResultStatus resultStatus;
        int64 resultCounter;

        //*************************************************************************************
        //  Telemetry : Validation test execution start event
        //*************************************************************************************
        if (parameters.TelemetryLevel == RetailCommerceValidatorTelemetryLevel::Diagnostic)
        {
            RetailCommerceValidatorTelemetry::addTestExecutionTelemetry(true, retailCommerceValidator, retailCommerceValidatorTests);
        }
        //*************************************************************************************

        // Set Test status to "In Progress"
        RetailCommerceValidatorTests::setTestInProgress(this.parmValidationId(), this.parmTestId());
        retailCommerceValidatorTests.reread();

        // Test "Start time"
        RetailCommerceValidatorTimeStamp::AddStartTimeStamp("@Retail:RetailCommerceValidatorValidationTestExecutionTimestamp", this.parmValidationId(), retailCommerceValidatorTests.TestId);

        // Execute Task in the context of the channel Legal Entity
        // Note:
        // Each Test should report the number of failures.
        // The failures result status type is retrieved from the Rule definition (retailCommerceValidatorRules.ResultStatusType)
        // Counters should be updated based on the test result status type and result count of failures.
        // All tests are wrapped into a single tts transaction
        try
        {
            DataAreaId channelLegalEntity = RetailCommerceValidator::getChannelLegalEntity(retailCommerceValidator.ValidationId);
            
            changecompany(channelLegalEntity)
            {
                // Run Test case with TTS isolation
                ttsbegin;

                ExecutePermission perm;
                perm = new ExecutePermission();
                SysDictClass dictClass;
                dictClass = new SysDictClass(className2Id(retailCommerceValidatorTests.EntityExecutionTestClass));
                [resultCounter] = dictClass.callStatic(retailCommerceValidatorTests.RuleExecutionTestMethod, retailCommerceValidatorTests);
                CodeAccessPermission::revertAssert();

                // refresh datasets
                retailCommerceValidator.reread();
                retailCommerceValidatorTests.reread();

                // Calculate Test result
                resultStatus = resultCounter > 0 ? RetailCommerceValidatorRules.ResultStatusType : RetailCommerceValidatorResultStatus::Passed;

                // Test "End time"
                RetailCommerceValidatorTimeStamp::addEndTimeStamp("@Retail:RetailCommerceValidatorValidationTestExecutionTimestamp", this.parmValidationId(), retailCommerceValidatorTests.TestId);

                // Increment Test Counters
                RetailCommerceValidatorLogType logType = RetailCommerceValidatorLog::convertResultStatusToLogType(resultStatus, (retailCommerceValidatorTests.EntityFunction == RetailCommerceValidatorEntityFunction::Setup));
                RetailCommerceValidatorCounters::incrementTestCounters(this.parmValidationId(), this.parmCurrentBatch().BatchJobId, retailCommerceValidatorTests.RuleId, logType, resultCounter);

                // Set Test status to "Finished"
                RetailCommerceValidatorTests::setTestFinished(this.parmValidationId(), this.parmTestId(), resultStatus, logType, resultCounter, this.parmCurrentBatch().RecId);

                // Increment Validation progress
                retailCommerceValidator::updateValidationProgress(this.parmValidationId(), resultStatus);

                //*************************************************************************************
                //  Telemetry : Validation test execution stop event
                //*************************************************************************************
                if (parameters.TelemetryLevel == RetailCommerceValidatorTelemetryLevel::Diagnostic)
                {
                    RetailCommerceValidatorTelemetry::addTestExecutionTelemetry(false, retailCommerceValidator, retailCommerceValidatorTests);
                }

                ttscommit;
            }
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(this.parmValidationId(), strFmt("@Retail:RetailCommerceValidatorTaskRunnerTest", this.parmTestId()), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(this.parmValidationId(), strFmt("@Retail:RetailCommerceValidatorTaskRunnerTest", this.parmTestId()), xSession::currentRetryCount(), true, exception);
                retry;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>