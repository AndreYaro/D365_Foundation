<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaSubscriptionAccrue</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmaSubscriptionAccrue extends RunBaseBatch implements BatchRetryable
{
    SMASubscriptionId           subscriptionId;
    boolean                     showQtx;
    Args                        args;
    SysQueryRun                 queryRun;
    NoYes                       showInfolog;
    Counter                     numOf;
    List                        createdList;
    List                        errorList;
    ProjPeriodId                accruePeriod;
    TransDate                   fromDate;
    ToDate                      toDate;
    NoYes                       reverseAccrued;
    TransDate                   postingDate;
    FormDataSource              dataSourceRevenue;
    SMAAccruePeriodLine         smaAccruePeriodLine;
    ProjRevenueTrans            projRevenueTrans;
    boolean                     isCalledFromSMAAccruePeriodLine;
    ProjPeriodTo                projPeriodTo;
    ProjPeriodFrom              projPeriodFrom;
    LedgerVoucher               ledgerVoucher;
    private SMAAccruePeriodLine accruePeriodLineTable;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        accruePeriod,
        projPeriodFrom,
        projPeriodTo,
        reverseAccrued,
        postingDate,
        showInfolog,
        showQtx
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>action</Name>
				<Source><![CDATA[
    public void action()
    {
        SMASubscriptionTable    subscriptionTable = SMASubscriptionTable::find(this.smaSubscriptionId(), true);
        ProjId                  projId            = SMASubscriptionTable::find(this.smaSubscriptionId()).ProjId;

        if (ProjTable::find(projId).Status == ProjStatus::InProcess)
        {
            ProjRevenueTrans localProjRevenueTrans;
            while select localProjRevenueTrans
                where localProjRevenueTrans.smaSubscriptionId == subscriptionTable.SubscriptionId
                join forupdate smaAccruePeriodLine
                    where   smaAccruePeriodLine.ProjRevenueTransId  == localProjRevenueTrans.TransId  &&
                            smaAccruePeriodLine.FromDate            >= this.parmProjPeriodFrom()      &&
                            smaAccruePeriodLine.Todate              <= this.parmProjPeriodTo()
            {
                this.doAccrue();
            }
        }
        else
        {
            // The subscription %1 cannot be posted on because of an incorrect project stage on project %2. The project stage must be %3.
            error(strfmt("@SYS89005", this.smaSubscriptionId(), projId, enum2str(ProjStatus::InProcess)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>actionRevenue</Name>
				<Source><![CDATA[
    private void actionRevenue()
    {
        SMAAccruePeriodLine accruePeriodLineLocal;

        ttsbegin;

        if (dataSourceRevenue.anyMarked())
        {
            accruePeriodLineLocal = dataSourceRevenue.getFirst(1, false);
            smaAccruePeriodLine   = SMAAccruePeriodLine::findRecid(accruePeriodLineLocal.RecId, true);

            while (accruePeriodLineLocal)
            {
                this.doAccrue();
                accruePeriodLineLocal = dataSourceRevenue.getNext();
                smaAccruePeriodLine   = SMAAccruePeriodLine::findRecid(accruePeriodLineLocal.RecId, true);
            }
        }
        else
        {
            accruePeriodLineLocal = this.parmArgs().record();
            smaAccruePeriodLine   = SMAAccruePeriodLine::findRecid(accruePeriodLineLocal.RecId, true);

            this.doAccrue();
        }

        ttscommit;

        dataSourceRevenue.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        boolean ret;

        ret = super() && ! this.parmIsCalledFromSMAAccruePeriodLine();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        // Accrue subscription
        return "@SYS84283";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(SMASubscriptionaccrueDialog), this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAccrue</Name>
				<Source><![CDATA[
    private void doAccrue()
    {
        if ((this.parmReverseAccrued() && smaAccruePeriodLine.PostingDate) || (! (this.parmReverseAccrued() || smaAccruePeriodLine.PostingDate)))
        {
            projRevenueTrans = ProjRevenueTrans::find(smaAccruePeriodLine.ProjRevenueTransId, true);

            this.smaSubscriptionId(projRevenueTrans.smaSubscriptionId);

            ProjPost::newEnterSMAAccrued(smaAccruePeriodLine, ledgerVoucher, this.parmReverseAccrued(),this.parmPostingDate()).postTrans();

            if (reverseAccrued)
            {
                // Accrual reversed on subscription %1
                this.showinfoLog(strfmt("@SYS91548", this.smaSubscriptionId()));
            }
            else
            {
                // Subscription %1 accrued
                this.showinfoLog(strfmt("@SYS84289", this.smaSubscriptionId()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstUnpostedDateFromPeriod</Name>
				<Source><![CDATA[
    TransDate findFirstUnpostedDateFromPeriod(ProjPeriodId _projPeriodId)
    {
        SMAAccruePeriodLine     accruePeriodLine;
        ProjRevenueTrans        projRevenue;
        SMASubscriptionTable    subscriptionTable;
        SMASubscriptionGroup    subscriptionGroup;

        select firstonly accruePeriodLine order by FromDate
            where accruePeriodLine.PostingDate == dateNull()
                join TransId from projRevenue
                    where projRevenue.TransId == accruePeriodLine.ProjRevenueTransId
                        join SubscriptionId from subscriptionTable
                            where subscriptionTable.SubscriptionId == projRevenue.smaSubscriptionId
                                join GroupId, AccuedPeriodcode from subscriptionGroup
                                    where subscriptionGroup.GroupId            == subscriptionTable.GroupId &&
                                          subscriptionGroup.AccuedPeriodcode   == _projPeriodId;

        return ProjPeriodLine::findFromPeriod(accruePeriodLine.smaSubscriptionTable().accruedPeriodCode(), accruePeriodLine.FromDate).PeriodFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstUnpostedDateFromSubscription</Name>
				<Source><![CDATA[
    TransDate findFirstUnpostedDateFromSubscription(SMASubscriptionId _subscriptionId)
    {
        SMAAccruePeriodLine accruePeriodLine;
        ProjRevenueTrans    projRevenue;

        select firstonly accruePeriodLine order by FromDate
            where accruePeriodLine.PostingDate == dateNull()
            join TransId, smaSubscriptionId from projRevenue
                where   projRevenue.TransId           == accruePeriodLine.ProjRevenueTransId &&
                        projRevenue.smaSubscriptionId == _subscriptionId;

        return ProjPeriodLine::findFromPeriod(accruePeriodLine.smaSubscriptionTable().accruedPeriodCode(), accruePeriodLine.FromDate).PeriodFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaults</Name>
				<Source><![CDATA[
    public void initDefaults(Args _args)
    {
        if (_args.caller() && _args.caller().name() == formstr(SMAAccruePeriodLine))
        {
            this.parmIsCalledFromSMAAccruePeriodLine(true);
        }

        this.getLast();
        this.parmshowQueryValues(true);
        this.parmArgs(_args);

        this.initQuery();
        this.initFromArgs(_args);

        this.parmReverseAccrued(NoYes::No);
        this.parmshowQueryValues(!this.parmIsCalledFromSMAAccruePeriodLine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDialogFromSMAAccruePeriodLines</Name>
				<Source><![CDATA[
    private void initDialogFromSMAAccruePeriodLines()
    {
        this.parmdataSourceRevenue(FormDataUtil::getFormDataSource(this.parmArgs().record()));
        dataSourceRevenue.query().dataSourceTable(tablenum(SMAAccruePeriodLine)).addSortField(fieldnum(SMAAccruePeriodLine, FromDate), SortOrder::Ascending);

        if (dataSourceRevenue.anyMarked())
        {
            smaAccruePeriodLine = dataSourceRevenue.getFirst(1, false);
            this.parmAccruePeriod(smaAccruePeriodLine.smaSubscriptionTable().accruedPeriodCode());
            this.parmProjPeriodFrom(smaAccruePeriodLine.FromDate);

            while (smaAccruePeriodLine)
            {
                this.parmProjPeriodTo(smaAccruePeriodLine.Todate);
                this.parmSMAAccruePeriodLine(smaAccruePeriodLine);
                smaAccruePeriodLine = dataSourceRevenue.getNext();
            }

            this.parmPostingDate(this.parmProjPeriodTo());
        }
        else
        {
            smaAccruePeriodLine = this.parmArgs().record();

            this.parmSMAAccruePeriodLine(smaAccruePeriodLine);
            this.parmAccruePeriod(smaAccruePeriodLine.smaSubscriptionTable().accruedPeriodCode());
            this.parmProjPeriodFrom(smaAccruePeriodLine.FromDate);
            this.parmProjPeriodTo(smaAccruePeriodLine.Todate);
            this.parmPostingDate(smaAccruePeriodLine.Todate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args _args = this.parmArgs())
    {
        #define.star("*")

        MultiSelectionHelper    multiSelectionHelper;

        SMASubscriptionGroup    subscriptionGroup;
        SMASubscriptionTable    subscriptionTable;
        QueryBuildRange         qBr;
        ProjTable               projTable;

        if (args && args.caller() && args.record())
        {
            multiSelectionHelper = MultiSelectionHelper::createFromCaller(args.caller());

            switch (args.record().TableId)
            {
                case tablenum(SMASubscriptionTable) :
                    multiSelectionHelper.createQueryRanges(this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)), fieldstr(SMASubscriptionTable, SubscriptionId));
                    break;

                case tablenum(SMASubscriptionGroup) :
                    multiSelectionHelper.createQueryRanges(this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionGroup)), fieldstr(SMASubscriptionGroup, GroupId));
                    break;

                case tablenum(ProjInvoiceTable) :
                    multiSelectionHelper.createQueryRanges(this.queryRun().query().dataSourceTable(tablenum(ProjTable)), fieldstr(ProjTable, ProjInvoiceProjId));
                    break;

                case tablenum(ProjCategory) :
                    multiSelectionHelper.createQueryRanges(this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)), fieldstr(SMASubscriptionTable, ProjCategoryId), fieldstr(ProjCategory, CategoryId));
                    break;

                case tablenum(ProjTable) :

                    projTable = multiSelectionHelper.getFirst();
                    while (projTable)
                    {
                        qBr = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)).addRange(fieldnum(SMASubscriptionTable, ProjId));
                        qBr.value(projTable.ProjId + #star);
                        projTable = multiSelectionHelper.getNext();
                    }
                    break;
            }

            if (this.parmIsCalledFromSMAAccruePeriodLine())
            {
                this.initDialogFromSMAAccruePeriodLines();
            }

            if (!multiSelectionHelper.parmDatasource().anyMarked() && this.parmArgs().dataset() == tablenum(SMASubscriptionGroup))
            {
                subscriptionGroup = this.parmArgs().record();

                this.parmAccruePeriod(subscriptionGroup.AccuedPeriodcode);
                this.parmProjPeriodFrom(this.findFirstUnpostedDateFromPeriod(subscriptionGroup.AccuedPeriodcode));
                this.parmProjPeriodTo(ProjPeriodLine::findFromPeriod(this.parmAccruePeriod(), this.parmProjPeriodFrom()).PeriodTo);
                this.parmPostingDate(this.parmProjPeriodTo());
            }
            if (!multiSelectionHelper.parmDatasource().anyMarked() && this.parmArgs().dataset() == tablenum(SMASubscriptionTable))
            {
                subscriptionTable = this.parmArgs().record();

                qBr = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)).findRange(fieldnum(SMASubscriptionTable, CurrencyCode));
                if (!qBr)
                {
                    qBr = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)).addRange(fieldnum(SMASubscriptionTable, CurrencyCode));
                }
                qBr.value(queryValue(subscriptionTable.CurrencyCode));

                this.parmAccruePeriod(subscriptionTable.accruedPeriodCode());
                this.parmProjPeriodFrom(this.findFirstUnpostedDateFromSubscription(subscriptionTable.SubscriptionId));
                this.parmProjPeriodTo(ProjPeriodLine::findFromPeriod(this.parmAccruePeriod(), this.parmProjPeriodFrom()).PeriodTo);
                this.parmPostingDate(this.parmProjPeriodTo());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedger</Name>
				<Source><![CDATA[
    void initLedger()
    {
        Voucher                     voucher;
        TransactionTxt              transactionTxt;
        LedgerVoucherObject         ledgerVoucherObject;
        ProjProposalId              projProposalId;

        numOf = SysQuery::countLoops(queryRun);

        // Creating Subscriptions
        this.progressInit("@SYS84229", numOf, #AviUpdate);

        voucher = NumberSeq::newGetNum(ProjParameters::numRefProjPeriodVoucher()).num();

        projProposalId = ProjRevenueTrans::find(accruePeriodLineTable.ProjRevenueTransId).proposalId();
 
        ProjProposalJour  projProposalJour = ProjProposalJour::find(projProposalId);

        transactionTxt = TransactionTxt::construct(LedgerTransTxt::ProjectInvoiceLedger,
                                                   CompanyInfo::languageId(),
                                                   this.parmPostingDate(),
                                                   projProposalJour.InvoiceAccount,
                                                   projProposalId,
                                                   ProjRevenueTrans::find(accruePeriodLineTable.ProjRevenueTransId).ProjId,
                                                   projProposalJour.InvoiceAccount,
                                                   CustTable::groupId(projProposalJour.InvoiceAccount));
        transactionTxt.setCustVendName(projProposalJour.DeliveryName);


        ledgerVoucher = LedgerVoucher::newLedgerPost(ProjParameters::find().LineTotalSubscription == ProjLineTotal::Line ? DetailSummary::Detail : DetailSummary::Summary,
                                                     SysModule::Project,
                                                     ProjParameters::numRefProjPeriodVoucher().numberSequenceTable().NumberSequence,
                                                     TransactionLogType::SMASubscription,
                                                     transactionTxt.txt());

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                              this.parmPostingDate(),
                                                              SysModule::Project,
                                                              LedgerTransType::Project);
        ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
        ledgerVoucher.addVoucher(ledgerVoucherObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNextDates</Name>
				<Source><![CDATA[
    public container initNextDates(ProjPeriodId _projPeriodId, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TransDate       periodFromDate;
        TransDate       periodToDate;
        ProjPeriodLine  projPeriodLine = ProjPeriodLine::smaFindNextFromDate(_projPeriodId, _transDate);

        if (!projPeriodLine)
        {
            periodFromDate    = dateNull();
            periodToDate      = dateNull();
        }
        else
        {
            periodFromDate    = projPeriodLine.PeriodFrom;
            periodToDate      = projPeriodLine.PeriodTo;
        }

        return [periodFromDate, periodToDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when calling the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        this.initQuery();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    public void initQuery()
    {
        queryRun = SMASubscriptionTable::getQueryRun();
        queryRun.promptShowSorting(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        createdList = new List(Types::String);
        errorList   = new List(Types::String);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccruePeriod</Name>
				<Source><![CDATA[
    public ProjPeriodId parmAccruePeriod(ProjPeriodId _accruePeriod = accruePeriod)
    {
        accruePeriod = _accruePeriod;

        return accruePeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmdataSourceRevenue</Name>
				<Source><![CDATA[
    private FormDataSource parmdataSourceRevenue(FormDataSource _dataSourceRevenue = dataSourceRevenue)
    {
        dataSourceRevenue = _dataSourceRevenue;

        return dataSourceRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCalledFromSMAAccruePeriodLine</Name>
				<Source><![CDATA[
    public NoYes parmIsCalledFromSMAAccruePeriodLine(NoYes _isCalledFromSMAAccruePeriodLine = isCalledFromSMAAccruePeriodLine)
    {
        isCalledFromSMAAccruePeriodLine = _isCalledFromSMAAccruePeriodLine;

        return isCalledFromSMAAccruePeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingDate</Name>
				<Source><![CDATA[
    public TransDate parmPostingDate(TransDate _postingDate = postingDate)
    {
        postingDate = _postingDate;

        return postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjPeriodFrom</Name>
				<Source><![CDATA[
    public ProjPeriodFrom parmProjPeriodFrom(ProjPeriodFrom _projPeriodFrom = projPeriodFrom)
    {
        projPeriodFrom = _projPeriodFrom;

        return projPeriodFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjPeriodTo</Name>
				<Source><![CDATA[
    public ProjPeriodTo parmProjPeriodTo(ProjPeriodTo _projPeriodTo = projPeriodTo)
    {
        projPeriodTo = _projPeriodTo;

        return projPeriodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseAccrued</Name>
				<Source><![CDATA[
    public NoYes parmReverseAccrued(NoYes _reverseAccrued = reverseAccrued)
    {
        reverseAccrued = _reverseAccrued;

        return reverseAccrued;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSMAAccruePeriodLine</Name>
				<Source><![CDATA[
    public SMAAccruePeriodLine parmSMAAccruePeriodLine(SMAAccruePeriodLine _accruePeriodLineTable = accruePeriodLineTable)
    {
        accruePeriodLineTable = _accruePeriodLineTable;
        return accruePeriodLineTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInfoLog</Name>
				<Source><![CDATA[
    public NoYes parmShowInfoLog(NoYes _showInfoLog = showInfoLog)
    {
        showInfoLog = _showInfoLog;

        return showInfoLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmshowQueryValues</Name>
				<Source><![CDATA[
    public NoYes parmshowQueryValues(NoYes _showQtx = showQtx)
    {
        showQtx = _showQtx;

        return showQtx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressSet</Name>
				<Source><![CDATA[
    public void progressSet(Counter _i)
    {
        Counter i = _i;

        i++;

        progress.setCount(i);
        progress.setText(this.progressTransText(this.smaSubscriptionId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressTransText</Name>
				<Source><![CDATA[
    public str progressTransText(SMASubscriptionId _subscriptionId)
    {
        // Processing Subscription %1
        return strfmt("@SYS84228", _subscriptionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        SMASubscriptionTable        subscriptionTable;
        Counter                     i;
        FormDataSource              formDataSource;

        try
        {
            ttsbegin;

            this.initLedger();

            if (this.parmIsCalledFromSMAAccruePeriodLine())
            {
                this.actionRevenue();
            }
            else
            {
                while (queryRun.next())
                {
                    if (queryRun.changed(tablenum(SMASubscriptionTable)))
                    {
                        i++;
                        subscriptionTable  = queryRun.get(tablenum(SMASubscriptionTable));

                        this.smaSubscriptionId(subscriptionTable.SubscriptionId);

                        this.progressSet(i);

                        this.action();
                    }
                }
            }

            ledgerVoucher.end();

            ttscommit;
        }
        catch (Exception::Error)
        {
            // operation %1 has been aborted due to an error on subscription %2.
            error(strfmt("@SYS84225", SMASubscriptionAccrue::description(),this.smaSubscriptionId()));
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        this.showMessageList();

        if (this.parmArgs() && this.parmArgs().record() && FormDataUtil::getFormDataSource(this.parmArgs().record()))
        {
            formDataSource  = FormDataUtil::getFormDataSource(this.parmArgs().record());
            formDataSource.reread();
            formDataSource.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user that created the job.
    /// </summary>
    /// <returns>
    /// true if the batch job is run on the AOS server as the submitting user account; false, if the batch
    /// job will be executed on the client.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRangeFromAccruePeriod</Name>
				<Source><![CDATA[
    public void setQueryRangeFromAccruePeriod()
    {
        QueryBuildRange         qBrAccPeriod;
        QueryBuildDataSource    qBdGroup;

        qBdGroup = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionGroup));

        qBrAccPeriod = qBdGroup.findRange(fieldnum(SMASubscriptionGroup, AccuedPeriodcode));

        if (!qBrAccPeriod)
        {
            qBrAccPeriod = qBdGroup.addRange(fieldnum(SMASubscriptionGroup, AccuedPeriodcode));
            qBrAccPeriod.status(RangeStatus::Locked);
        }

        if (this.parmAccruePeriod())
        {
            qBrAccPeriod.value(queryValue(this.parmAccruePeriod()));
        }
        else
        {
            qBdGroup.clearRange(fieldnum(SMASubscriptionGroup, AccuedPeriodcode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showinfoLog</Name>
				<Source><![CDATA[
    public void showinfoLog(str _infotext)
    {
        if (this.parmShowInfoLog())
        {
            info(_infotext);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showMessageList</Name>
				<Source><![CDATA[
    protected void showMessageList()
    {
        ListIterator                createdIt   = new ListIterator(createdList);
        ListIterator                errorIt     = new ListIterator(errorList);

        if (!this.parmShowInfoLog())
        {
            return;
        }

        if (!createdList.empty())
        {
            setprefix(SMASubscriptionAccrue::description());
        }

        while (createdIt.more())
        {
            info(createdIt.value());
            createdIt.next();
        }

        if (!errorList.empty())
        {
            // Error
            setprefix("@SYS8500");
        }

        while (errorIt.more())
        {
            info(errorIt.value());

            errorIt.next();
        }

        if (!infologLine())
        {
            // No subscription fees were accrued.
            info("@SYS106721");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    /// longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        boolean ret;

        if (!this.parmIsCalledFromSMAAccruePeriodLine())
        {
            ret = true;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaSubscriptionId</Name>
				<Source><![CDATA[
    public SMASubscriptionId smaSubscriptionId(SMASubscriptionId _subscriptionId = subscriptionId)
    {
        subscriptionId = _subscriptionId;

        return subscriptionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = conpeek(_packedClass, 1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new SysQueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjInvoicePeriodFrom</Name>
				<Source><![CDATA[
    public boolean validateProjInvoicePeriodFrom()
    {
        ProjPeriodLine      projPeriodLine;

        if (this.parmAccruePeriod())
        {
            projPeriodLine = ProjPeriodLine::findFromPeriodFrom(this.parmAccruePeriod(), this.parmProjPeriodFrom());

            if (!projPeriodLine)
            {
                // The entered date must follow the Period code.
                return checkFailed("@SYS84221");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjInvoicePeriodTo</Name>
				<Source><![CDATA[
    public boolean validateProjInvoicePeriodTo()
    {
        ProjPeriodLine      projPeriodLine;

        if (this.parmAccruePeriod())
        {
            projPeriodLine = ProjPeriodLine::findFromPeriodTo(this.parmAccruePeriod(), this.parmProjPeriodTo());

            if (!projPeriodLine)
            {
                // The entered date must follow the Period code.
                return checkFailed("@SYS84221");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SMASubscriptionAccrue   subscriptionAccrue = new SMASubscriptionAccrue();

        subscriptionAccrue.initDefaults(args);

        if (subscriptionAccrue.prompt())
        {
            subscriptionAccrue.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>