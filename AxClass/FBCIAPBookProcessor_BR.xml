<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBCIAPBookProcessor_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates the ICMS ciap assessment and ciap transactions
/// </summary>
class FBCIAPBookProcessor_BR
{
    FiscalEstablishmentRecId_BR     fiscalEstablishmentRecId;
    FBTaxAssessment_BR              taxAssessment;
    FBBookingPeriod_BR              bookingPeriod;
    FBCIAPAssessment_BR             ciapAssessment;
    NoYesId                         calculateInstallmentForOutgoing;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>endCIAPAssessment</Name>
				<Source><![CDATA[
        private void endCIAPAssessment()
    {
        this.updateICMSInitialBalance();
        FBCIAPBookProcessor_BR::updateICMSCreditFactor(ciapAssessment);

        ciapAssessment.updateBalances();
        ciapAssessment.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCIAPAssessment</Name>
				<Source><![CDATA[
        private void initCIAPAssessment()
    {
        select forupdate ciapAssessment
            where ciapAssessment.fbTaxAssessment_BR == taxAssessment.RecId;

        if (!ciapAssessment)
        {
            ciapAssessment.initFromTaxAssessment(taxAssessment);
            ciapAssessment.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>FBCIAPBookProcessor_BR</c> class
    /// </summary>
    /// <param name="_taxAssessment">
    /// The <c>FBTaxAssessment_BR</c> record required to instantiate the class
    /// </param>

    public void new(FBTaxAssessment_BR _taxAssessment)
    {
        taxAssessment = _taxAssessment;

        bookingPeriod = taxAssessment.bookingPeriod();

        calculateInstallmentForOutgoing = FBParametersPerState_BR::find(bookingPeriod.fiscalEstablishment().postalAddress()).CIAPCalculateInstallmentForOutgoing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeInvalidAcquisitonAndDisposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes acquisiton and disposal in the same period for each fixed asset
    /// </summary>

    private void removeInvalidAcquisitonAndDisposal()
    {
        FBCIAPAssetTrans_BR ciapAssetTrans;
        FBCIAPAssetTrans_BR incorrecCiapAssetTrans;
        FBCIAPAssetTable_BR ciapAssetTable;
        int countOfAssetTrans;

        while select count(RecId) from ciapAssetTrans
            group by FBCIAPAssetTable_BR
            where ciapAssetTrans.FBCIAPAssessment_BR == ciapAssessment.RecId
                    && (ciapAssetTrans.TransType == FBCIAPAssetTransType_BR::IM
                        || ciapAssetTrans.TransType == FBCIAPAssetTransType_BR::ATSale
                        || ciapAssetTrans.TransType == FBCIAPAssetTransType_BR::ATTransfer)
        {
            countOfAssetTrans = int642int(ciapAssetTrans.RecId);

            if (countOfAssetTrans > 1)
            {
                delete_from incorrecCiapAssetTrans
                    where incorrecCiapAssetTrans.FBCIAPAssetTable_BR == ciapAssetTrans.FBCIAPAssetTable_BR
                        && incorrecCiapAssetTrans.FBCIAPAssessment_BR == ciapAssessment.RecId;

                delete_from ciapAssetTable
                    where ciapAssetTable.RecId == ciapAssetTrans.FBCIAPAssetTable_BR;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Execute the CIAP assessment
    /// </summary>

    public void run()
    {
        fiscalEstablishmentRecId = bookingPeriod.fiscalEstablishment().RecId;

        changeCompany(bookingPeriod.FiscalEstablishmentDataArea)
        {
            ttsBegin;

            setPrefix("@SYS4001705");

            this.initCIAPAssessment();

            this.runAcquisitonAndDisposal();

            this.runFixedAssetTransfer();

            this.runICMSRecoverForOpenFixedAssets();

            this.removeInvalidAcquisitonAndDisposal();

            this.endCIAPAssessment();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAcquisitonAndDisposal</Name>
				<Source><![CDATA[
        private void runAcquisitonAndDisposal()
    {
        AssetTable          assetTable;
        AssetBook           assetBook;
        AssetBookTable      assetBookTable;
        AssetTrans          assetTrans;
        FBCIAPAssetTable_BR ciapAssetTable;

        while select assetTrans
            order by AssetId, BookId, TransType, TransDate
            where (assetTrans.TransDate >= ciapAssessment.FromDate && assetTrans.TransDate <= ciapAssessment.ToDate)
                && (assetTrans.TransType == AssetTransType::Acquisition || assetTrans.TransType == AssetTransType::AcquisitionAdj
                    || assetTrans.TransType == AssetTransType::DisposalSale || assetTrans.TransType == AssetTransType::DisposalScrap)
            // only asset with installments
            exists join assetTable
                where assetTable.AssetId == assetTrans.AssetId
                    && assetTable.ICMSCreditInstallments_BR > 0
                    && assetTable.FiscalEstablishment_BR == fiscalEstablishmentRecId
                    // only assets already acquired
                    exists join assetBook
                        where assetBook.AssetId == assetTrans.AssetId
                            && assetBook.Status != AssetStatus::NoAcquisition
                            && assetBook.BookId == assetTrans.BookId
                        // only assets on current posting layer
                        exists join assetBookTable
                            where assetBookTable.BookId == assetBook.BookId
                            && assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current
        {
            setPrefix(strFmt('%1: %2', "@SYS25653", assetTrans.AssetId));

            switch (assetTrans.TransType)
            {
                case AssetTransType::Acquisition :
                case AssetTransType::AcquisitionAdj :
                    FBCIAPAssetTransCreate_BR::newAcquisition(ciapAssessment, assetTrans)
                        .create();
                    break;

                case AssetTransType::DisposalSale :
                case AssetTransType::DisposalScrap :
                    FBCIAPAssetTransCreate_BR::deleteICMSInstallmentCreditTransaction(assetTrans.AssetId, ciapAssessment);

                    // Dispose all CIAP fixed assets for the current AssetId
                    while select ciapAssetTable
                        where ciapAssetTable.FiscalEstablishment_BR == fiscalEstablishmentRecId
                            && ciapAssetTable.FiscalEstablishmentDataArea == bookingPeriod.FiscalEstablishmentDataArea
                            && ciapAssetTable.AssetTable == assetTrans.AssetId
                            && ciapAssetTable.Status == FBCIAPAssetStatus_BR::Open
                    {
                        FBCIAPAssetTransCreate_BR::newDisposal(ciapAssessment, ciapAssetTable, assetTrans, calculateInstallmentForOutgoing)
                            .create();
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFixedAssetTransfer</Name>
				<Source><![CDATA[
        private void runFixedAssetTransfer()
    {
        CFOPTable_BR                        cfopTable;
        FiscalDocument_BR                   fiscalDocument;
        FiscalDocumentLine_BR               fiscalDocumentLine;
        FBBookingPeriodFiscalDocument_BR    bookingPeriodFiscalDocument;

        while select RecId from bookingPeriodFiscalDocument
            where bookingPeriodFiscalDocument.FBBookingPeriod_BR == bookingPeriod.RecId
            join fiscalDocument
                where fiscalDocument.RecId == bookingPeriodFiscalDocument.FiscalDocument_BR
                join fiscalDocumentLine
                    where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
                        && fiscalDocumentLine.AssetId != ''
                    exists join cfopTable
                        where cfopTable.CFOPId == fiscalDocumentLine.CFOP
                            && cfopTable.Purpose == CFOPPurpose_BR::FiscalEstablishmentTransfer
        {
            FBCIAPAssetTransCreate_BR::newTransfer(ciapAssessment, fiscalDocument, fiscalDocumentLine, calculateInstallmentForOutgoing).create();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runICMSRecoverForOpenFixedAssets</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates ICMS recover transactions for fixed assets not acquired in this period
    /// </summary>

    private void runICMSRecoverForOpenFixedAssets()
    {
        FBCIAPAssetTable_BR ciapAssetTable;
        FBCIAPAssetTrans_BR ciapAssetTrans;

        setPrefix("@SYS4001704");

        while select forUpdate ciapAssetTable
            where ciapAssetTable.Status == FBCIAPAssetStatus_BR::Open
                && ciapAssetTable.FiscalEstablishment_BR == fiscalEstablishmentRecId
                && ciapAssetTable.FiscalEstablishmentDataArea == bookingPeriod.FiscalEstablishmentDataArea
                notExists join ciapAssetTrans
                    where ciapAssetTrans.FBCIAPAssetTable_BR == ciapAssetTable.RecId
                        && ciapAssetTrans.FBCIAPAssessment_BR == ciapAssessment.RecId
        {
            setPrefix(strFmt('%1: %2', "@SYS4001694", ciapAssetTable.CIAPAssetID));

            if (ciapAssetTable.remainingInstallments > 0)
            {
                FBCIAPAssetTransCreate_BR::newICMSRecover(ciapAssessment, ciapAssetTable)
                    .create();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateICMSInitialBalance</Name>
				<Source><![CDATA[
        private void updateICMSInitialBalance()
    {
        FBCIAPAssetTrans_BR ciapAssetTrans;

        select sum(ICMSAmount), sum (ICMSSTAmount), sum(ICMSDiffAmount), sum(ICMSFreightAmount)
            from ciapAssetTrans
                where ciapAssetTrans.FBCIAPAssessment_BR == ciapAssessment.RecId
                    && (ciapAssetTrans.TransType == FBCIAPAssetTransType_BR::SI
                          || ciapAssetTrans.TransType == FBCIAPAssetTransType_BR::SIICMSCredit
                          || ciapAssetTrans.TransType == FBCIAPAssetTransType_BR::PE
                          || ciapAssetTrans.TransType == FBCIAPAssetTransType_BR::ATSale
                          || ciapAssetTrans.TransType == FBCIAPAssetTransType_BR::ATTransfer
                          || ciapAssetTrans.TransType == FBCIAPAssetTransType_BR::OT);

        ciapAssessment.ICMSInitialBalance = ciapAssetTrans.ICMSAmount + ciapAssetTrans.ICMSSTAmount + ciapAssetTrans.ICMSDiffAmount + ciapAssetTrans.ICMSFreightAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateICMSCreditFactor</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the total issues and total taxable issues fields used to calculate CIAP factor
    /// </summary>
    /// <param name="_ciapAssessment">
    ///     The <c>FBCIAPAssessment_BR</c> record
    /// </param>

    public static void updateICMSCreditFactor(FBCIAPAssessment_BR _ciapAssessment)
    {
        FiscalDocumentTaxTrans_BR           taxTrans;
        FiscalDocumentLine_BR               fiscalDocumentline;
        FiscalDocument_BR                   fiscalDocument;
        CFOPTable_BR                        cfopTable;

        AmountMST                           totalTaxableIssuesAmount;
        AmountMST                           totalIssuesAmount;

        FBBookingPeriodFiscalDocument_BR    bookingPeriodFiscalDocument;

        #LOCALMACRO.joinFiscalDocumentBookingPeriod
            exists join fiscalDocument
                where fiscalDocument.RecId == fiscalDocumentline.FiscalDocument
                    && fiscalDocument.Direction == FiscalDocDirection_BR::Outgoing
                    && fiscalDocument.Status == FiscalDocumentStatus_BR::Approved
                    exists join bookingPeriodFiscalDocument
                        where bookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                            && bookingPeriodFiscalDocument.FBBookingPeriod_BR == bookingPeriod.RecId;
        #ENDMACRO
        #LOCALMACRO.joinFiscalDocumentBookingPeriod_SalesReturns
            exists join fiscalDocument
                where fiscalDocument.RecId == fiscalDocumentline.FiscalDocument
                    && fiscalDocument.Direction == FiscalDocDirection_BR::Incoming
                    && fiscalDocument.Status == FiscalDocumentStatus_BR::Approved
                    && fiscalDocument.RefTableId == tableNum(CustInvoiceJour)
            exists join bookingPeriodFiscalDocument
                where bookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                    && bookingPeriodFiscalDocument.FBBookingPeriod_BR == bookingPeriod.RecId;
        #ENDMACRO
        FBBookingPeriod_BR bookingPeriod = FBTaxAssessment_BR::find(_ciapAssessment.FBTaxAssessment_BR).bookingPeriod();

        // Internal outgoing from establishment
        select sum(AccountingAmount) from fiscalDocumentline
            exists join taxTrans
                where taxTrans.FiscalDocumentLine == fiscalDocumentline.RecId
                    && (taxTrans.Type == TaxType_BR::ICMS || taxTrans.Type == TaxType_BR::ICMSST || taxTrans.Type == TaxType_BR::ICMSDiff)
                    && taxTrans.TaxBaseAmount > 0
            exists join cfopTable
                where cfopTable.cfopId == fiscalDocumentline.cfop
                    && cfopTable.ConsiderInCIAP == NoYes::Yes
                    && cfopTable.CustVendLocation != CustVendLocation_BR::OutsideCountry
            #joinFiscalDocumentBookingPeriod()

        totalTaxableIssuesAmount = fiscalDocumentline.AccountingAmount;

        select sum(TaxBaseAmountExempt) from taxTrans
            where (taxTrans.Type == TaxType_BR::ICMS || taxTrans.Type == TaxType_BR::ICMSST || taxTrans.Type == TaxType_BR::ICMSDiff)
                && taxTrans.TaxBaseAmount > 0
            exists join fiscalDocumentline
                where fiscalDocumentline.RecId == taxTrans.FiscalDocumentLine
            exists join cfopTable
                where cfopTable.cfopId == fiscalDocumentline.cfop
                    && cfopTable.ConsiderInCIAP == NoYes::Yes
                    && cfopTable.CustVendLocation != CustVendLocation_BR::OutsideCountry
            #joinFiscalDocumentBookingPeriod()

        totalTaxableIssuesAmount -= taxTrans.TaxBaseAmountExempt;

        if (FBCIAPTaxableOutgoingCST60_BRFlight::instance().isEnabled())
        {
            select sum(TaxBaseAmountOther) from taxTrans
            where (taxTrans.Type == TaxType_BR::ICMS || taxTrans.Type == TaxType_BR::ICMSST || taxTrans.Type == TaxType_BR::ICMSDiff)
                && taxTrans.TaxBaseAmountOther > 0
                && taxTrans.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
            exists join fiscalDocumentline
                where fiscalDocumentline.RecId == taxTrans.FiscalDocumentLine
            exists join cfopTable
                where cfopTable.cfopId == fiscalDocumentline.cfop
                    && cfopTable.ConsiderInCIAP == NoYes::Yes
                    && cfopTable.CustVendLocation != CustVendLocation_BR::OutsideCountry
            #joinFiscalDocumentBookingPeriod()

            totalTaxableIssuesAmount += taxTrans.TaxBaseAmountOther;
        }

        // excluding sales order returns
        select sum(AccountingAmount) from fiscalDocumentline
            exists join taxTrans
                where taxTrans.FiscalDocumentLine == fiscalDocumentline.RecId
                    && (taxTrans.Type == TaxType_BR::ICMS || taxTrans.Type == TaxType_BR::ICMSST || taxTrans.Type == TaxType_BR::ICMSDiff)
                    && taxTrans.TaxBaseAmount > 0
            exists join cfopTable
                where cfopTable.cfopId == fiscalDocumentline.cfop
                    && cfopTable.ConsiderInCIAP == NoYes::Yes
                    && cfopTable.CustVendLocation != CustVendLocation_BR::OutsideCountry
            #joinFiscalDocumentBookingPeriod_SalesReturns

        totalTaxableIssuesAmount -= fiscalDocumentline.AccountingAmount;

        select sum(AccountingAmount) from fiscalDocumentline
            exists join taxTrans
                where taxTrans.FiscalDocumentLine == fiscalDocumentline.RecId
                    && (taxTrans.Type == TaxType_BR::ICMS || taxTrans.Type == TaxType_BR::ICMSST || taxTrans.Type == TaxType_BR::ICMSDiff)
            exists join cfopTable
                where cfopTable.cfopId == fiscalDocumentline.cfop
                    && cfopTable.ConsiderInCIAP == NoYes::Yes
                    && cfopTable.CustVendLocation != CustVendLocation_BR::OutsideCountry
            #joinFiscalDocumentBookingPeriod()

        totalIssuesAmount = fiscalDocumentline.AccountingAmount;

        // Outside country issues from establishment
        select sum(AccountingAmount) from fiscalDocumentline
            exists join taxTrans
                where taxTrans.FiscalDocumentLine == fiscalDocumentline.RecId
                    && (taxTrans.Type == TaxType_BR::ICMS || taxTrans.Type == TaxType_BR::ICMSST || taxTrans.Type == TaxType_BR::ICMSDiff)
                    && taxTrans.TaxBaseAmountExempt > 0
            exists join cfopTable
                where cfopTable.cfopId == fiscalDocumentline.cfop
                    && cfopTable.ConsiderInCIAP == NoYes::Yes
                    && cfopTable.CustVendLocation == CustVendLocation_BR::OutsideCountry
            #joinFiscalDocumentBookingPeriod()

        totalTaxableIssuesAmount += fiscalDocumentline.AccountingAmount;

        select sum(AccountingAmount) from fiscalDocumentline
            exists join taxTrans
                where taxTrans.FiscalDocumentLine == fiscalDocumentline.RecId
                    && (taxTrans.Type == TaxType_BR::ICMS || taxTrans.Type == TaxType_BR::ICMSST || taxTrans.Type == TaxType_BR::ICMSDiff)
            exists join cfopTable
                where cfopTable.cfopId == fiscalDocumentline.cfop
                    && cfopTable.ConsiderInCIAP == NoYes::Yes
                    && cfopTable.CustVendLocation == CustVendLocation_BR::OutsideCountry
            #joinFiscalDocumentBookingPeriod()

        totalIssuesAmount += fiscalDocumentline.AccountingAmount;

        // excluding sales order returns
        select sum(AccountingAmount) from fiscalDocumentline
            exists join taxTrans
                where taxTrans.FiscalDocumentLine == fiscalDocumentline.RecId
                    && (taxTrans.Type == TaxType_BR::ICMS || taxTrans.Type == TaxType_BR::ICMSST || taxTrans.Type == TaxType_BR::ICMSDiff)
            exists join cfopTable
                where cfopTable.cfopId == fiscalDocumentline.cfop
                    && cfopTable.ConsiderInCIAP == NoYes::Yes
                    && cfopTable.CustVendLocation != CustVendLocation_BR::OutsideCountry
            #joinFiscalDocumentBookingPeriod_SalesReturns

        totalIssuesAmount -= fiscalDocumentline.AccountingAmount;

        _ciapAssessment.TotalTaxableOutgoingAmount    = totalTaxableIssuesAmount;
        _ciapAssessment.TotalOutgoingOperationsAmount = totalIssuesAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>