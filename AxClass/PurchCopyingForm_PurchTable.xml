<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCopyingForm_PurchTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysTableNameFactoryAttribute(tableStr(PurchTable))]
class PurchCopyingForm_PurchTable
extends PurchCopyingForm
{
    QueryBuildRange        onlyInvoiceAccount;
    QueryBuildRange        onlyVendInvoiceJour_PurchId;
    QueryBuildRange        onlyVendPackingSlipJour_PurchId;
    QueryBuildRange        onlyVendPurchOrderJour_PurchId;
    QueryBuildRange        onlyVendInvoice4PaymJour_PurchId;
    QueryBuildRange        onlyStandardInvoices;

    PurchTable             callerPurchTable;
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUpdate</Name>
				<Source><![CDATA[
    public boolean checkUpdate()
    {
        return callerPurchTable.checkUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAndInitcopying</Name>
				<Source><![CDATA[
    public void constructAndInitcopying(TmpFrmVirtual   _tmpFrmVirtualLines,
                                        TmpFrmVirtual   _tmpFrmVirtualHeader,
                                        Qty             _qtyFactor         = 1,
                                        NoYes           _reverseSign       = NoYes::No,
                                        NoYes           _recalculateAmount = NoYes::No,
                                        NoYes           _copyMarkup        = NoYes::No,
                                        NoYes           _copyPrecisely     = NoYes::No,
                                        NoYes           _deleteLines       = NoYes::No,
                                        VendInvoiceJour _vendInvoiceJour   = null)
    {
        PurchCopyingPurchTableContract localContract;

        localContract = contract;
        localContract.parmVendInvoiceJour(_vendInvoiceJour);
        localContract.parmCopyExchRate(copyExchRate);
        if (BrazilParameters::isEnabled())
        {
            localContract.parmReasonCode_BR(reasonCode);
        }

        super(_tmpFrmVirtualLines,
              _tmpFrmVirtualHeader,
              _qtyFactor,
              _reverseSign,
              _recalculateAmount,
              _copyMarkup,
              _copyPrecisely,
              _deleteLines,
              _vendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initContract</Name>
				<Source><![CDATA[
    protected void initContract()
    {
        contract = PurchCopyingPurchTableContract::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeControls</Name>
				<Source><![CDATA[
    public void initializeControls(FormRun                _element,
                                   FormRealControl        _qtyFactor,
                                   FormCheckBoxControl    _reverseSign,
                                   FormCheckBoxControl    _copyMarkup,
                                   FormCheckBoxControl    _recalculateAmount,
                                   FormCheckBoxControl    _copyPrecisely,
                                   FormCheckBoxControl    _deleteLines,
                                   FormCheckBoxControl    _copyHeader,
                                   FormTabPageControl     _tabPagePurch,
                                   FormTabPageControl     _tabPagePurchOrder,
                                   FormTabPageControl     _tabPagePackingSlip,
                                   FormTabPageControl     _tabPageInvoice,
                                   FormTabPageControl     _tabPageRFQCaseTable,
                                   FormTabPageControl     _tabPagePurchReqTable,
                                   FormTabPageControl     _tabPageAgreementPO,
                                   FormGroupControl       _groupReasonCode)
    {
        boolean isInvoiceMatched = callerPurchTable.isInvoiceMatched();

        super(_element,
              _qtyFactor,
              _reverseSign,
              _copyMarkup,
              _recalculateAmount,
              _copyPrecisely,
              _deleteLines,
              _copyHeader,
              _tabPagePurch,
              _tabPagePurchOrder,
              _tabPagePackingSlip,
              _tabPageInvoice,
              _tabPageRFQCaseTable,
              _tabPagePurchReqTable,
              _tabPageAgreementPO,
              _groupReasonCode);

        _qtyFactor.realValue(1);

        switch (salesPurchCopy)
        {
            case SalesPurchCopy::CopyAllHeader:
                _copyHeader.value(NoYes::Yes);

            case SalesPurchCopy::CopyAllLines:
                _element.design().caption("@SCM:CopyingForm_FormCaption");
                break;

            case SalesPurchCopy::CopyJournalHeader:
                _copyHeader.value(NoYes::Yes);

            case SalesPurchCopy::CopyJournalLines:
                _element.design().caption("@SYS53044");
                _copyMarkup.value(NoYes::Yes);
                _copyPrecisely.value(NoYes::Yes);
                _tabPagePurch.visible(false);
                break;

            case SalesPurchCopy::CreditNoteHeader:
                _copyHeader.value(NoYes::Yes);

            case SalesPurchCopy::CreditNoteLines:
                _element.design().caption();
                _reverseSign.value(NoYes::Yes);
                _copyMarkup.value(NoYes::Yes);
                _copyPrecisely.value(NoYes::Yes);
                _copyHeader.allowEdit(false);
                _copyHeader.skip(true);

                _qtyFactor.allowEdit(false);
                _qtyFactor.skip(true);
                _reverseSign.allowEdit(false);
                _reverseSign.skip(true);
                _recalculateAmount.allowEdit(false);
                _recalculateAmount.skip(true);
                _copyMarkup.allowEdit(false);
                _copyMarkup.skip(true);
                _copyPrecisely.allowEdit(false);
                _copyPrecisely.skip(true);

                _tabPagePurch.visible(false);
                _tabPagePackingSlip.visible(false);
                _tabPagePurchOrder.visible(false);
                break;

            case SalesPurchCopy::VoidFiscalDocument_BR :
                _element.design().caption("@SYS4000606");
                _reverseSign.value(NoYes::Yes);
                _copyMarkup.value(NoYes::Yes);
                _copyPrecisely.value(NoYes::Yes);
                _copyHeader.allowEdit(false);
                _copyHeader.skip(true);
                _copyHeader.value(NoYes::Yes);

                _qtyFactor.allowEdit(false);
                _qtyFactor.skip(true);
                _reverseSign.allowEdit(false);
                _reverseSign.visible(true);
                _recalculateAmount.allowEdit(false);
                _recalculateAmount.visible(true);
                _copyMarkup.allowEdit(false);
                _copyMarkup.skip(true);
                _copyPrecisely.allowEdit(false);
                _copyPrecisely.skip(true);

                _tabPagePurch.visible(false);
                _tabPagePackingSlip.visible(false);
                _tabPagePurchOrder.visible(false);
                if (BrazilParameters::isEnabled())
                {
                    _groupReasonCode.visible(true);
                }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            _tabPagePurchOrder.caption("@SCM:CopyingForm_PurchaseOrderFastTab");
        }

        if (callerPurchTable.MatchingAgreement || isInvoiceMatched)
        {
            _copyHeader.value(NoYes::No);
            _copyHeader.allowEdit(false);
            _copyHeader.skip(true);
        }

        if (isInvoiceMatched)
        {
            if (!BrazilParameters::isEnabled() || salesPurchCopy != SalesPurchCopy::VoidFiscalDocument_BR)
            {
                _copyMarkup.value(NoYes::No);
            }
            _copyMarkup.allowEdit(false);
            _copyMarkup.skip(true);
            _deleteLines.value(NoYes::No);
            _deleteLines.allowEdit(false);
            _deleteLines.skip(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerTable</Name>
				<Source><![CDATA[
    public Common parmCallerTable(Common _callerTable = callerPurchTable)
    {
        Common ret = super(_callerTable);

        callerPurchTable = _callerTable;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerDatasource</Name>
				<Source><![CDATA[
    public void updateCallerDatasource()
    {
        Object          callerTable_dataSource;

        callerDataSource.reread();
        callerDataSource.refresh();
        callerDataSource.rereadReferenceDataSources();

        callerTable_dataSource = callerDataSource;
        if (formDataSourceHasMethod(callerTable_dataSource, identifierStr(editPurch)))
        {
            callerTable_dataSource.editPurch();
        }

        if (formDataSourceHasMethod(callerTable_dataSource, identifierStr(reReadLines)))
        {
            callerTable_dataSource.reReadLines();
        }
        if (BrazilParameters::isEnabled() &&
            formDataSourceHasMethod(callerTable_dataSource, identifierStr(reread_BR)))
        {
            callerTable_dataSource.reread_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the selected header record is valid.
    /// </summary>
    /// <param name="_header">
    /// A header record.
    /// </param>
    /// <returns>
    /// true if the validation passes; otherwise, false.
    /// </returns>
    public boolean validateHeader(Common _header)
    {
        boolean ret = true;
        PurchCopyingBase purchCopying;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.constructAndInitCopying(null, null);
            purchCopying = PurchCopyingBase::construct(salesPurchCopy, callerTable);
            purchCopying.initParameters(contract);
            ret = purchCopying.checkHeaderAgreement(_header);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLine</Name>
				<Source><![CDATA[
    public boolean validateLine(Common _line, TmpFrmVirtual _tmpFrmVirtualHeader = null)
    {
        boolean ret = true;
        PurchCopyingBase purchCopying;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.constructAndInitCopying(null, null);
            purchCopying = PurchCopyingBase::construct(salesPurchCopy, callerTable);
            purchCopying.initParameters(contract);
            ret = purchCopying.checkLineAgreement(_line);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether all line records are valid.
    /// </summary>
    /// <returns>
    /// true if the validation passes; otherwise, false.
    /// </returns>
    public boolean validateLines()
    {
        boolean ret = true;
        PurchCopying purchCopying;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.constructAndInitCopying(null, null);
            purchCopying = PurchCopyingBase::construct(salesPurchCopy, callerTable);
            purchCopying.initParameters(contract);
            ret = purchCopying.checkLinesAgreement();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoice4PaymJour_ds_executeQuery_RU</Name>
				<Source><![CDATA[
    public void vendInvoice4PaymJour_ds_executeQuery_RU(FormDataSource _vendInvoice4PaymJour_DS)
    {
        if (salesPurchCopy == SalesPurchCopy::CopyJournalLines ||
            salesPurchCopy == SalesPurchCopy::CopyJournalHeader)
        {
            if (onlyVendInvoice4PaymJour_PurchId)
            {
                onlyVendInvoice4PaymJour_PurchId.value(queryValue(callerPurchTable.PurchId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoice4PaymJour_ds_init_RU</Name>
				<Source><![CDATA[
    public void vendInvoice4PaymJour_ds_init_RU(FormDataSource _vendInvoice4PaymJour_DS)
    {
        QueryBuildDataSource qbds;

        if (salesPurchCopy == SalesPurchCopy::CopyJournalLines ||
            salesPurchCopy == SalesPurchCopy::CopyJournalHeader)
        {
            qbds = _vendInvoice4PaymJour_DS.query().dataSourceTable(tableNum(VendInvoice4PaymJour_RU));
            if (qbds)
            {
                onlyVendInvoice4PaymJour_PurchId = qbds.addRange(fieldNum(VendInvoice4PaymJour_RU, PurchId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoice4PaymJour_RU_ds_linkActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the fields on a <c>PurchCopying</c> form when the link to a <c>PurchCopying</c>
    /// form changes.
    /// </summary>
    /// <param name="_vendInvoice4PaymJour_DS">
    /// The data source from the <c>PurchCopying</c> form on which the data modification is enabled or
    /// disabled.
    /// </param>
    public void vendInvoice4PaymJour_RU_ds_linkActive(FormDataSource _vendInvoice4PaymJour_DS)
    {
        _vendInvoice4PaymJour_DS.allowEdit(callerPurchTable.checkUpdate(false, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoice4PaymTrans_RU_ds_linkActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the fields on a <c>PurchCopying</c> form when the link to a <c>PurchCopying</c>
    /// form changes.
    /// </summary>
    /// <param name="_vendInvoice4PaymTrans_DS">
    /// The data source from the <c>PurchCopying</c> form on which the data modification is enabled or
    /// disabled.
    /// </param>
    public void vendInvoice4PaymTrans_RU_ds_linkActive(FormDataSource _vendInvoice4PaymTrans_DS)
    {
        _vendInvoice4PaymTrans_DS.allowEdit(callerPurchTable.checkUpdate(false, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJour_ds_executeQuery</Name>
				<Source><![CDATA[
    public void vendInvoiceJour_ds_executeQuery(FormDataSource _vendInvoiceJour_DS)
    {
        if (salesPurchCopy == SalesPurchCopy::CopyJournalLines ||
            salesPurchCopy == SalesPurchCopy::CopyJournalHeader)
        {
            onlyVendInvoiceJour_PurchId.value(queryValue(callerPurchTable.PurchId));
        }

        if (salesPurchCopy == SalesPurchCopy::CreditNoteLines ||
            salesPurchCopy == SalesPurchCopy::CreditNoteHeader ||
            (BrazilParameters::isEnabled() && salesPurchCopy == SalesPurchCopy::VoidFiscalDocument_BR))
        {
            onlyInvoiceAccount.value(queryValue(callerPurchTable.InvoiceAccount));
            onlyStandardInvoices.value(enum2str(PurchInvoiceType::Standard));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJour_ds_Init</Name>
				<Source><![CDATA[
    public void vendInvoiceJour_ds_Init(FormDataSource _vendInvoiceJour_DS)
    {
        QueryBuildDataSource queryBuildDataSource;

        if (salesPurchCopy == SalesPurchCopy::CopyJournalLines ||
            salesPurchCopy == SalesPurchCopy::CopyJournalHeader)
        {
            onlyVendInvoiceJour_PurchId = _vendInvoiceJour_DS.query().dataSourceTable(tableNum(VendInvoiceJour)).addRange(fieldNum(VendInvoiceJour, PurchId));
        }

        if (salesPurchCopy == SalesPurchCopy::CreditNoteLines ||
            salesPurchCopy == SalesPurchCopy::CreditNoteHeader ||
            (BrazilParameters::isEnabled() && salesPurchCopy == SalesPurchCopy::VoidFiscalDocument_BR))
        {
            onlyInvoiceAccount = _vendInvoiceJour_DS.query().dataSourceTable(tableNum(VendInvoiceJour)).addRange(fieldNum(VendInvoiceJour, InvoiceAccount));
            onlyStandardInvoices = _vendInvoiceJour_DS.query().dataSourceTable(tableNum(VendInvoiceJour)).addRange(fieldNum(VendInvoiceJour, InvoiceType));
        }

        if (BrazilParameters::isEnabled() && salesPurchCopy == SalesPurchCopy::VoidFiscalDocument_BR)
        {
            queryBuildDataSource = _vendInvoiceJour_DS.query().dataSourceTable(tableNum(VendInvoiceJour)).addDataSource(tableNum(FiscalDocument_BR));
            queryBuildDataSource.addLink(fieldNum(VendInvoiceJour, RecId), fieldNum(FiscalDocument_BR, RefRecId));
            queryBuildDataSource.addLink(fieldNum(VendInvoiceJour, TableId), fieldNum(FiscalDocument_BR, RefTableId));
            queryBuildDataSource.addRange(fieldNum(FiscalDocument_BR, Status)).value(strFmt('%1,%2,%3,%4',
                queryValue(FiscalDocumentStatus_BR::Approved),
                queryValue(FiscalDocumentStatus_BR::Created),
                queryValue(FiscalDocumentStatus_BR::Rejected),
                queryValue(FiscalDocumentStatus_BR::RejectedNoFix)));
            queryBuildDataSource.joinMode(JoinMode::InnerJoin);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJour_ds_linkActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the fields on the <c>PurchCopying</c> form when the link to the <c>PurchCopying</c> form changes.
    /// </summary>
    /// <param name="_vendInvoiceJour_DS">
    /// The datasource from the <c>PurchCopying</c> form on which the data modification is enabled or disabled.
    /// </param>
    public void vendInvoiceJour_ds_linkActive(FormDataSource _vendInvoiceJour_DS)
    {
        _vendInvoiceJour_DS.allowEdit(callerPurchTable.checkUpdate(false,false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceTrans_ds_linkActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the fields on the <c>PurchCopying</c> form when the link to the <c>PurchCopying</c> form changes.
    /// </summary>
    /// <param name="_vendInvoiceTrans_DS">
    /// The datasource from the <c>PurchCopying</c> form on which the data modification is enabled or disabled.
    /// </param>
    public void vendInvoiceTrans_ds_linkActive(FormDataSource _vendInvoiceTrans_DS)
    {
        _vendInvoiceTrans_DS.allowEdit(callerPurchTable.checkUpdate(false,false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPackingSlipJour_ds_executeQuery</Name>
				<Source><![CDATA[
    public void vendPackingSlipJour_ds_executeQuery(FormDataSource _vendPackingSlipJour_DS)
    {
        if (salesPurchCopy == SalesPurchCopy::CopyJournalLines ||
            salesPurchCopy == SalesPurchCopy::CopyJournalHeader)
        {
            onlyVendPackingSlipJour_PurchId.value(queryValue(callerPurchTable.PurchId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPackingSlipJour_ds_Init</Name>
				<Source><![CDATA[
    public void vendPackingSlipJour_ds_Init(FormDataSource _vendPackingSlip_DS)
    {
        if (salesPurchCopy == SalesPurchCopy::CopyJournalLines ||
            salesPurchCopy == SalesPurchCopy::CopyJournalHeader)
        {
            onlyVendPackingSlipJour_PurchId = _vendPackingSlip_DS.query().dataSourceTable(tableNum(VendPackingSlipJour)).addRange(fieldNum(VendPackingSlipJour, PurchId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPurchOrderJour_ds_executeQuery</Name>
				<Source><![CDATA[
    public void vendPurchOrderJour_ds_executeQuery(FormDataSource _vendPurchOrderJour_DS)
    {
        if (salesPurchCopy == SalesPurchCopy::CopyJournalLines ||
            salesPurchCopy == SalesPurchCopy::CopyJournalHeader)
        {
            onlyVendPurchOrderJour_PurchId.value(queryValue(callerPurchTable.PurchId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPurchOrderJour_ds_Init</Name>
				<Source><![CDATA[
    public void vendPurchOrderJour_ds_Init(FormDataSource _vendPurchOrderJour_DS)
    {
        if (salesPurchCopy == SalesPurchCopy::CopyJournalLines ||
            salesPurchCopy == SalesPurchCopy::CopyJournalHeader)
        {
            onlyVendPurchOrderJour_PurchId = _vendPurchOrderJour_DS.query().dataSourceTable(tableNum(VendPurchOrderJour)).addRange(fieldNum(VendPurchOrderJour, PurchId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>