<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VATCSFillReportData_CZ</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VATCSFillReportData_CZ</c> class is used to fill the temporary table with tax transaction data
/// which is then used in Czech VAT Control Statement report.
/// </summary>
public class VATCSFillReportData_CZ
{
    private VATCSTransDataTmp_CZ reportData;
    private RecordInsertList reportDataInsList;
    private List selectedVouchers;

    private Map countryTaxCodeCache = new Map(Types::String, Types::String);
    private TaxParameters taxParameters = TaxParameters::find();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        reportDataInsList = new RecordInsertList(tableNum(VATCSTransDataTmp_CZ), true, true, true, false, true, reportData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportData</Name>
				<Source><![CDATA[
    public VATCSTransDataTmp_CZ parmReportData(VATCSTransDataTmp_CZ _reportData = reportData)
    {
        reportData = _reportData;
        return reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static VATCSFillReportData_CZ construct()
    {
        return new VATCSFillReportData_CZ();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedVouchers</Name>
				<Source><![CDATA[
    public List parmSelectedVouchers(List _selectedVouchers = selectedVouchers)
    {
        selectedVouchers = _selectedVouchers;
        return selectedVouchers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>VATCSFillReportData_CZ</c> class with parameters.
    /// </summary>
    /// <param name="_selectedVouchers">
    /// The <c>List</c> object containing <c>TaxReportVoucher</c> records which have to be processed.
    /// </param>
    /// <returns>
    /// An instanciated <c>VATCSFillReportData_CZ</c> object.
    /// </returns>
    public static VATCSFillReportData_CZ newFromParameters(List _selectedVouchers)
    {
        VATCSFillReportData_CZ runClass = VATCSFillReportData_CZ::construct();

        runClass.parmSelectedVouchers(_selectedVouchers);

        return runClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransDataRelatedVoucher</Name>
				<Source><![CDATA[
    private void calcTransDataRelatedVoucher(TaxTrans _taxTrans)
    {
        CustVendSettlement custVendSettlement;
        CustVendTrans custVendTrans;
        TaxTrans taxTrans;
        VATCSTransDataTmp_CZ tmpData;
        
        if (_taxTrans.TaxOrigin != TaxOrigin::TaxReversed)
        {
            return;
        }
        
        if (_taxTrans.SourceTableId == tableNum(CustTrans))
        {
            custVendSettlement = new DictTable(tableNum(CustSettlement)).makeRecord();
            custVendTrans = new DictTable(tablenum(CustTrans)).makeRecord();
        }
        else if (_taxTrans.SourceTableId == tableNum(VendTrans))
        {
            custVendSettlement = new DictTable(tableNum(VendSettlement)).makeRecord();
            custVendTrans = new DictTable(tablenum(VendTrans)).makeRecord();
        }
        else
        {
            return;
        }
        
        select firstonly OffsetRecId from custVendSettlement
            where custVendSettlement.TransRecId == _taxTrans.SourceRecId
                && custVendSettlement.TransDate == _taxTrans.TransDate
                && custVendSettlement.TransCompany == _taxTrans.DataAreaId
                && custVendSettlement.OffsetCompany == _taxTrans.DataAreaId;
        
        if (custVendSettlement)
        {
            tmpData.linkPhysicalTableInstance(reportData);
            select firstonly tmpData
                exists join taxTrans where taxTrans.RecId == tmpData.TaxTransRecId
                    exists join custVendTrans
                        where custVendTrans.RecId == custVendSettlement.OffsetRecId
                            && custVendTrans.Voucher == taxTrans.Voucher
                            && custVendTrans.TransDate == taxTrans.TransDate;
            
            if (tmpData)
            {
                reportData.data(tmpData);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the main logic of the class.
    /// </summary>
    public void run()
    {
        ttsBegin;

        ListEnumerator le = selectedVouchers.getEnumerator();

        TaxReportVoucher currentVoucher;

        currentVoucher.setTmp();

        while (le.moveNext())
        {
            currentVoucher.data(le.current());
            currentVoucher.insert();
        }

        while select TaxRepCounter, TaxRepVersion, TaxPeriod, FromDate, ToDate from currentVoucher order by TaxPeriod, TaxRepCounter
        {
            Counter versionMin, versionMax;
            if (currentVoucher.TaxRepCounter)
            {
                versionMax = currentVoucher.TaxRepCounter;
                versionMin = currentVoucher.TaxRepCounter;
            }
            else
            {
                versionMax = TaxReport::counterMax(currentVoucher.TaxRepVersion, currentVoucher.TaxPeriod, currentVoucher.FromDate);
                versionMin = TaxReport::counterMin(currentVoucher.TaxRepVersion, currentVoucher.TaxPeriod, currentVoucher.FromDate);
            }

            TaxReportLayout taxReportLayout = TaxAuthorityAddress::find(TaxPeriodHead::find(currentVoucher.TaxPeriod).TaxAuthority).TaxReportLayout;

            this.createAndRunCustTransQuery(currentVoucher.FromDate,
                currentVoucher.ToDate,
                currentVoucher.TaxPeriod,
                versionMin,
                versionMax,
                taxReportLayout);

            this.createAndRunVendTransQuery(currentVoucher.FromDate,
                currentVoucher.ToDate,
                currentVoucher.TaxPeriod,
                versionMin,
                versionMax,
                taxReportLayout);

            this.createAndRunLedgerTransQuery(currentVoucher.FromDate,
                currentVoucher.ToDate,
                currentVoucher.TaxPeriod,
                versionMin,
                versionMax,
                taxReportLayout);

            this.updateTransDataDocumentAmount();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransDataDocumentAmount</Name>
				<Source><![CDATA[
    private void updateTransDataDocumentAmount()
    {
        VATCSTransDataTmp_CZ tmpData;
        
        insert_recordset tmpData (DocumentAmountMST, DocumentTableId, DocumentRecId)
            select sum(Amount), DocumentTableId, DocumentRecId from reportData
                group by DocumentTableId, DocumentRecId
                where reportData.DocumentTableId && reportData.DocumentRecId;
        
        update_recordSet reportData setting DocumentAmountMST = tmpData.DocumentAmountMST
            join DocumentAmountMST from tmpData
                where tmpData.DocumentTableId == reportData.DocumentTableId
                    && tmpData.DocumentRecId == reportData.DocumentRecId;
        
        update_recordset reportData setting DocumentAmountMST = reportData.DocumentAmountMST * -1
            where reportData.DocumentAmountMST < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndRunCustTransQuery</Name>
				<Source><![CDATA[
    private void createAndRunCustTransQuery(
        TransDate _fromDate,
        TransDate _toDate,
        TaxPeriod _taxPeriod,
        Counter _versionMin,
        Counter _versionMax,
        TaxReportLayout _taxReportLayout)
    {
        Query query = this.createTaxTransQuery(
            _fromDate,
            _toDate,
            _taxPeriod,
            _versionMin,
            _versionMax);

        QueryBuildDataSource qbdsCustTrans = query.dataSourceTable(tableNum(TaxTrans)).addDataSource(tableNum(CustTrans));
        qbdsCustTrans.joinMode(JoinMode::InnerJoin);
        qbdsCustTrans.fetchMode(QueryFetchMode::One2One);
        qbdsCustTrans.addLink(fieldNum(TaxTrans, Voucher), fieldNum(CustTrans, Voucher));
        qbdsCustTrans.addLink(fieldNum(TaxTrans, TransDate), fieldNum(CustTrans, TransDate));
        qbdsCustTrans.addRange(fieldNum(CustTrans, RecId)).value(VATCSFillReportData_CZ::closedCustVendTransExtRange());

        QueryBuildDataSource qbds = qbdsCustTrans.addDataSource(tableNum(CustInvoiceJour));
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(CustTrans, Invoice), fieldNum(CustInvoiceJour, InvoiceId));
        qbds.addLink(fieldNum(CustTrans, TransDate), fieldNum(CustInvoiceJour, InvoiceDate));
        qbds.addLink(fieldNum(CustTrans, AccountNum), fieldNum(CustInvoiceJour, InvoiceAccount));
        qbds.addLink(fieldNum(CustTrans, Voucher), fieldNum(CustInvoiceJour, LedgerVoucher));

        qbds = qbdsCustTrans.addDataSource(tableNum(ProjInvoiceJour));
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(CustTrans, Invoice), fieldNum(ProjInvoiceJour, ProjInvoiceId));
        qbds.addLink(fieldNum(CustTrans, TransDate), fieldNum(ProjInvoiceJour, InvoiceDate));
        qbds.addLink(fieldNum(CustTrans, AccountNum), fieldNum(ProjInvoiceJour, InvoiceAccount));
        qbds.addLink(fieldNum(CustTrans, Voucher), fieldNum(ProjInvoiceJour, LedgerVoucher));

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(TaxTrans)))
            {
                this.createTransDataFromCustTrans(_taxReportLayout, queryRun);
            }
        }

        reportDataInsList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxTransQuery</Name>
				<Source><![CDATA[
    private Query createTaxTransQuery(TransDate _fromDate,
        TransDate _toDate,
        TaxPeriod _taxPeriod,
        Counter _versionMin,
        Counter _versionMax)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tablenum(TaxTrans));

        if (TaxParameters::reportUseVatDueDate_W())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00041, funcName());
            qbds.addRange(fieldNum(TaxTrans, PostponeVAT)).value(queryValue(NoYes::No));
        }
        else
        {
            qbds.addRange(fieldNum(TaxTrans, TransDate)).value(queryRange(_fromDate, _toDate));
        }

        qbds.addRange(fieldNum(TaxTrans, TaxPeriod)).value(_taxPeriod);
        qbds.addRange(fieldNum(TaxTrans, TaxRepCounter)).value(_versionMin != _versionMax ? queryRange(_versionMin, _versionMax) : queryValue(_versionMin));
        qbds.addRange(fieldNum(TaxTrans, Source)).value(SysQuery::valueNot(TaxModuleType::Tax));

        qbds.addSortField(fieldNum(TaxTrans, RecId));

        if (TaxParameters::reportUseVatDueDate_W())
        {
            qbds = qbds.addDataSource(tableNum(TaxTrans_W));
            qbds.joinMode(JoinMode::InnerJoin);
            qbds.fetchMode(QueryFetchMode::One2One);
            qbds.addLink(fieldNum(taxTrans, RecId), fieldNum(TaxTrans_W, taxTrans));
            qbds.addRange(fieldNum(TaxTrans_W, VatDueDate_W)).value(queryRange(_fromDate, _toDate));

            qbds.addSelectionField(fieldNum(TaxTrans_W, VatDueDate_W));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closedCustVendTransExtRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the extended range for the customer or vendor transaction selection using query object.
    /// </summary>
    /// <returns>
    /// The extended range.
    /// </returns>
    /// <remarks>
    /// To avoid closed transactions that were originated from payment to prepayment transformation.
    /// </remarks>
    private static str closedCustVendTransExtRange()
    {
        return strFmt('((TransType != %1))', enum2int(LedgerTransType::Settlement));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransDataFromCustTrans</Name>
				<Source><![CDATA[
    private void createTransDataFromCustTrans(TaxReportLayout _taxReportLayout, QueryRun _queryRun)
    {
        boolean isFirstRecord = true;

        TaxTrans taxTrans = _queryRun.get(tableNum(TaxTrans));
        boolean isCreditNote = this.isCreditNote(taxTrans);

        TmpTaxReportById tmpTaxReportById;
        tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, isCreditNote, null, _taxReportLayout);

        while select tmpTaxReportById
        {
            if (isFirstRecord)
            {
                reportData.clear();
                reportData.ModuleType = SalesPurch::Sales;
                reportData.IsCreditNote = isCreditNote;
                reportData.initFromTaxTrans(taxTrans);

                if (TaxParameters::reportUseVatDueDate_W())
                {
                    TaxTrans_W taxTrans_W = _queryRun.get(tableNum(TaxTrans_W));
                    reportData.VATDate = taxTrans_W.VATDueDate_W;
                }

                CustTrans custTrans = _queryRun.get(tableNum(CustTrans));
                reportData.initFromCustVendTrans(custTrans);

                CustInvoiceJour custInvoiceJour = _queryRun.get(tableNum(CustInvoiceJour));
                ProjInvoiceJour projInvoiceJour = _queryRun.get(tableNum(ProjInvoiceJour));
                if (custInvoiceJour)
                {
                    reportData.initFromCustVendInvoiceJour(custInvoiceJour);
                }
                else if (projInvoiceJour)
                {
                    reportData.initFromCustVendInvoiceJour(projInvoiceJour);
                }
                else
                {
                    reportData.VATNum = CustTable::find(custTrans.AccountNum).VATNum;

                    reportData.initFromTaxDocumentTable(CzTaxDocumentTable::find(custTrans.Voucher, custTrans.TransDate));
                }

                this.calcTransDataCountryTaxCode(custTrans, custInvoiceJour.InvoicePostalAddress);

                isFirstRecord = false;
            }

            reportData.initFromTmpTaxTransReportId(tmpTaxReportById);

            reportDataInsList.add(reportData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the tax transaction is a credit-note.
    /// </summary>
    /// <param name="_taxTrans">
    /// The tax transaction.
    /// </param>
    /// <returns>
    /// true if the tax transaction is a credit-note; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The credit-note condition is based on the code in the method <c>\Classes\TaxTransReport\taxAmountByRepottId_Table</c>.
    /// </remarks>
    private boolean isCreditNote(TaxTrans _taxTrans)
    {
        boolean ret = true;

        if ((
            (
            (_taxTrans.TaxBaseAmount > 0 || _taxTrans.TaxAmount > 0)    &&
            _taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
            (_taxTrans.TaxDirection  == TaxDirection::IncomingTax       ||
            _taxTrans.TaxDirection   == TaxDirection::UseTax            ||
            _taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||

            ((_taxTrans.TaxBaseAmount < 0 || _taxTrans.TaxAmount < 0)   &&
            _taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
            (_taxTrans.TaxDirection  == TaxDirection::IncomingTax       ||
            _taxTrans.TaxDirection   == TaxDirection::UseTax            ||
            _taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||

            ((_taxTrans.TaxBaseAmount < 0 || _taxTrans.TaxAmount < 0)   &&
            _taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
            (_taxTrans.TaxDirection  == TaxDirection::OutgoingTax       ||
            _taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
            _taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||

            ((_taxTrans.TaxBaseAmount > 0 || _taxTrans.TaxAmount > 0)   &&
            _taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
            (_taxTrans.TaxDirection  == TaxDirection::OutgoingTax       ||
            _taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
            _taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))
        ))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDocumentAmountMST</Name>
				<Source><![CDATA[
    private AmountMST calcDocumentAmountMST(TaxTrans _taxTrans)
    {
        return _taxTrans.TaxBaseAmount + _taxTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransDataCountryTaxCode</Name>
				<Source><![CDATA[
    private void calcTransDataCountryTaxCode(CustVendTrans _custVendTrans, LogisticsPostalAddressRecId _postalAddressRecId = 0)
    {
        EUSalesListTax countryTaxCode;
        LogisticsAddressCountryRegionId countryRegionId;

        str cacheKey = strFmt('%1#%2#%3', (_custVendTrans.TableId == tableNum(CustTrans) ? 'C' : 'V'),
        _custVendTrans.AccountNum,
        _postalAddressRecId);

        if (countryTaxCodeCache.exists(cacheKey))
        {
            countryTaxCode = countryTaxCodeCache.lookup(cacheKey);
        }
        else
        {
            if (_postalAddressRecId)
            {
                countryRegionId = LogisticsPostalAddress::findRecId(_postalAddressRecId).CountryRegionId;
            }
            else
            {
                if (_custVendTrans.TableId == tableNum(CustTrans))
                {
                    countryRegionId = CustTable::find(_custVendTrans.AccountNum).countryRegionId();
                }
                else
                {
                    countryRegionId = VendTable::find(_custVendTrans.AccountNum).countryRegionId();
                }
            }

            countryTaxCode = TaxCountryRegionParameters::find(countryRegionId).SalesTaxCode;
            countryTaxCodeCache.insert(cacheKey, countryTaxCode);
        }

        reportData.CountryTaxCode = countryTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndRunVendTransQuery</Name>
				<Source><![CDATA[
    private void createAndRunVendTransQuery(
        TransDate _fromDate,
        TransDate _toDate,
        TaxPeriod _taxPeriod,
        Counter _versionMin,
        Counter _versionMax,
        TaxReportLayout _taxReportLayout)
    {
        Query query = this.createTaxTransQuery(_fromDate,
            _toDate,
            _taxPeriod,
            _versionMin,
            _versionMax);

        QueryBuildDataSource qbdsVendTrans = query.dataSourceTable(tableNum(TaxTrans)).addDataSource(tableNum(VendTrans));
        qbdsVendTrans.joinMode(JoinMode::InnerJoin);
        qbdsVendTrans.fetchMode(QueryFetchMode::One2One);
        qbdsVendTrans.addLink(fieldNum(TaxTrans, Voucher), fieldNum(VendTrans, Voucher));
        qbdsVendTrans.addLink(fieldNum(TaxTrans, TransDate), fieldNum(VendTrans, TransDate));
        qbdsVendTrans.addRange(fieldNum(VendTrans, RecId)).value(VATCSFillReportData_CZ::closedCustVendTransExtRange());

        QueryBuildDataSource qbds = qbdsVendTrans.addDataSource(tableNum(VendInvoiceJour));
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.addLink(fieldNum(VendTrans, Invoice), fieldNum(VendInvoiceJour, InvoiceId));
        qbds.addLink(fieldNum(VendTrans, TransDate), fieldNum(VendInvoiceJour, InvoiceDate));
        qbds.addLink(fieldNum(VendTrans, AccountNum), fieldNum(VendInvoiceJour, InvoiceAccount));
        qbds.addLink(fieldNum(VendTrans, Voucher), fieldNum(VendInvoiceJour, LedgerVoucher));

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(TaxTrans)))
            {
                this.createTransDataFromVendTrans(_taxReportLayout, queryRun);
            }
        }

        reportDataInsList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransDataFromVendTrans</Name>
				<Source><![CDATA[
    private void createTransDataFromVendTrans(TaxReportLayout _taxReportLayout, QueryRun _queryRun)
    {
        boolean isFirstRecord = true;

        TaxTrans taxTrans = _queryRun.get(tableNum(TaxTrans));
        boolean isCreditNote = this.isCreditNote(taxTrans);

        TmpTaxReportById tmpTaxReportById;
        tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, isCreditNote, null, _taxReportLayout);

        while select tmpTaxReportById
        {
            if (isFirstRecord)
            {
                reportData.clear();
                reportData.ModuleType = SalesPurch::Purch;
                reportData.IsCreditNote = isCreditNote;
                reportData.initFromTaxTrans(taxTrans);

                VendTrans vendTrans = _queryRun.get(tableNum(VendTrans));
                reportData.initFromCustVendTrans(vendTrans);

                VendInvoiceJour vendInvoiceJour = _queryRun.get(tableNum(VendInvoiceJour));
                if (vendInvoiceJour)
                {
                    reportData.initFromCustVendInvoiceJour(vendInvoiceJour);

                    if (!vendTrans.DocumentNum && vendInvoiceJour.DocumentNum)
                    {
                        reportData.DocumentNum = vendInvoiceJour.DocumentNum;
                    }

                    if (vendTrans.DocumentDate)
                    {
                        reportData.VATDate = vendTrans.DocumentDate;
                    }
                    else if (vendInvoiceJour.DocumentDate)
                    {
                        reportData.VATDate = vendInvoiceJour.DocumentDate;
                    }
                }
                else
                {
                    reportData.VATNum = VendTable::find(vendTrans.AccountNum).VATNum;

                    reportData.initFromTaxDocumentTable(CzTaxDocumentTable::find(vendTrans.Voucher, vendTrans.TransDate));
                }

                this.calcTransDataCountryTaxCode(vendTrans);

                isFirstRecord = false;
            }

            reportData.initFromTmpTaxTransReportId(tmpTaxReportById);

            reportDataInsList.add(reportData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndRunLedgerTransQuery</Name>
				<Source><![CDATA[
    private void createAndRunLedgerTransQuery(
        TransDate _fromDate,
        TransDate _toDate,
        TaxPeriod _taxPeriod,
        Counter _versionMin,
        Counter _versionMax,
        TaxReportLayout _taxReportLayout)
    {
        Query query = this.createTaxTransQuery(_fromDate,
            _toDate,
            _taxPeriod,
            _versionMin,
            _versionMax);

        QueryBuildDataSource qbdsTaxTrans = query.dataSourceTable(tableNum(TaxTrans));

        QueryBuildDataSource qbds = qbdsTaxTrans.addDataSource(tableNum(CustTrans));
        qbds.joinMode(JoinMode::NoExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(TaxTrans, Voucher), fieldNum(CustTrans, Voucher));
        qbds.addLink(fieldNum(TaxTrans, TransDate), fieldNum(CustTrans, TransDate));
        qbds.addRange(fieldNum(CustTrans, RecId)).value(VATCSFillReportData_CZ::closedCustVendTransExtRange());

        qbds = qbdsTaxTrans.addDataSource(tableNum(VendTrans));
        qbds.joinMode(JoinMode::NoExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(TaxTrans, Voucher), fieldNum(VendTrans, Voucher));
        qbds.addLink(fieldNum(TaxTrans, TransDate), fieldNum(VendTrans, TransDate));
        qbds.addRange(fieldNum(VendTrans, RecId)).value(VATCSFillReportData_CZ::closedCustVendTransExtRange());

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(TaxTrans)))
            {
                this.createTransDataFromLedgerTrans(_taxReportLayout, queryRun);
            }
        }

        reportDataInsList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransDataFromLedgerTrans</Name>
				<Source><![CDATA[
    private void createTransDataFromLedgerTrans(TaxReportLayout _taxReportLayout, QueryRun _queryRun)
    {
        boolean isFirstRecord = true;

        TaxTrans taxTrans = _queryRun.get(tableNum(TaxTrans));
        boolean isCreditNote = this.isCreditNote(taxTrans);

        TmpTaxReportById tmpTaxReportById;
        tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, isCreditNote, null, _taxReportLayout);

        while select tmpTaxReportById
        {
            if (isFirstRecord)
            {
                reportData.clear();
                reportData.IsCreditNote = isCreditNote;
                reportData.initFromTaxTrans(taxTrans);

                this.calcTransDataRelatedVoucher(taxTrans);

                isFirstRecord = false;
            }

            reportData.initFromTmpTaxTransReportId(tmpTaxReportById);

            reportDataInsList.add(reportData);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>