<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCalcVolume</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendCalcVolume
{
    TmpCustVendVolume tmpCustVendVolume;
    QueryRun qCustVendVolume;

    NoYes custInvoice;
    NoYes vendInvoice;
    NoYes projInvoice;

    boolean separateTaxAmount;
    boolean onlyDomesticInvoices;
    boolean useJournalVATNum;
    boolean useCalculationBE;
    boolean notCheckBillingClassification;

    int num;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accumCustInvoice</Name>
				<Source><![CDATA[
    void accumCustInvoice(CustInvoiceJour _custInvoiceJour)
    {
        throw error(strFmt("@SYS18885", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accumProjInvoice</Name>
				<Source><![CDATA[
    void accumProjInvoice(ProjInvoiceJour _projInvoiceJour)
    {
        throw error(strFmt("@SYS18885", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accumulateVolume</Name>
				<Source><![CDATA[
    TmpCustVendVolume accumulateVolume()
    {
        CustInvoiceJour custInvoiceJour;
        VendInvoiceJour vendInvoiceJour;
        ProjInvoiceJour projInvoiceJour;

        this.findDataSources();

        ttsbegin;
        while (qCustVendVolume.next())
        {
            if (custInvoice && qCustVendVolume.changed(tableNum(CustInvoiceJour)))
            {
                custInvoiceJour = qCustVendVolume.get(tableNum(CustInvoiceJour));
            }

            if (vendInvoice && qCustVendVolume.changed(tableNum(VendInvoiceJour)))
            {
                vendInvoiceJour = qCustVendVolume.get(tableNum(VendInvoiceJour));
            }

            if (projInvoice && qCustVendVolume.changed(tableNum(ProjInvoiceJour)))
            {
                projInvoiceJour = qCustVendVolume.get(tableNum(ProjInvoiceJour));
            }

            if (custInvoiceJour)
            {
                this.accumCustInvoice(custInvoiceJour);
            }

            if (vendInvoiceJour)
            {
                this.accumVendInvoice(vendInvoiceJour);
            }

            if (projInvoiceJour)
            {
                this.accumProjInvoice(projInvoiceJour);
            }

            custInvoiceJour = null;
            vendInvoiceJour = null;
            projInvoiceJour = null;
        }

        ttscommit;

        return tmpCustVendVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accumVendInvoice</Name>
				<Source><![CDATA[
    void accumVendInvoice(VendInvoiceJour _vendInvoiceJour)
    {
        throw error(strFmt("@SYS18885", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNegativeTax</Name>
				<Source><![CDATA[
    TaxAmountCur calcNegativeTax(Voucher _voucher, TransDate _date)
    {
        return Tax::taxNegativeTotalVoucherDate(_voucher,_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNetAmount</Name>
				<Source><![CDATA[
    AmountMST calcNetAmount(CustVendInvoiceJour _custVendInvoiceJour)
    {
        AmountCur netAmountCur;

        if (separateTaxAmount)
        {
            netAmountCur = _custVendInvoiceJour.InvoiceAmount - _custVendInvoiceJour.SumTax;
        }
        else
        {
            netAmountCur = _custVendInvoiceJour.InvoiceAmount;
        }

        return CurrencyExchangeHelper::mstAmount(netAmountCur, _custVendInvoiceJour.CurrencyCode, _custVendInvoiceJour.InvoiceDate, UnknownNoYes::Unknown, _custVendInvoiceJour.ExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalTax</Name>
				<Source><![CDATA[
    TaxAmountCur calcTotalTax(Voucher _voucher, TransDate _date)
    {
        // This method is a dead code now and it needs to be deleted in SYS
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJourEnterpriseNum</Name>
				<Source><![CDATA[
    TaxEnterpriseNumber custInvoiceJourEnterpriseNum(CustInvoiceJour _custInvoiceJour)
    {
        TaxEnterpriseNumber enterpriseNumber = _custInvoiceJour.custTable_InvoiceAccount().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);

        if (useJournalVATNum)
        {
            enterpriseNumber = _custInvoiceJour.EnterpriseNumber;
        }

        return enterpriseNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJourVATNum</Name>
				<Source><![CDATA[
    VATNum custInvoiceJourVATNum(CustInvoiceJour _custInvoiceJour)
    {
        if (useJournalVATNum)
        {
            return _custInvoiceJour.vatNum;
        }
        else
        {
            return _custInvoiceJour.custTable_InvoiceAccount().getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _custInvoiceJour.InvoiceDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceQuery</Name>
				<Source><![CDATA[
    void custInvoiceQuery(str _invoiceDate,
                          str _countryRegionType,
                          str _countryRegionId,
                          str _account,
                          str _vatNum,
                          List _billingClassification = null,
                          NoYes _inclTransWithNoBillingClass = NoYes::No)
    //original custinvoicequery
    {
        QueryBuildDataSource custInvoiceJour_ds;
        QueryBuildDataSource custTableDs;
        QueryBuildDataSource countryRegion_ds;
        QueryBuildDataSource address_ds;
        QueryBuildDataSource intrastatCountryRegionParameters_ds;
        QueryBuildDataSource qbdsCustTrans;

        // Add table
        custInvoiceJour_ds = qCustVendVolume.query().addDataSource(tableNum(CustInvoiceJour));

        // Add sorting order
        custInvoiceJour_ds.addSortField(fieldNum(CustInvoiceJour,InvoiceDate),SortOrder::Ascending);

        // Add ranges
        if (_invoiceDate)
        {
            custInvoiceJour_ds.addRange(fieldNum(CustInvoiceJour,InvoiceDate)).value(_invoiceDate);
        }

        if (_account)
        {
            custInvoiceJour_ds.addRange(fieldNum(CustInvoiceJour,InvoiceAccount)).value(_account);
        }

        if (_vatNum)
        {
            if (useJournalVATNum)
            {
                custInvoiceJour_ds.addRange(fieldNum(CustInvoiceJour,vatNum)).value(_vatNum);
            }
            else
            {
                // Add join table
                custTableDs = custInvoiceJour_ds.addDataSource(tableNum(CustTable));

                // Add relation
                custTableDs.addLink(fieldNum(CustInvoiceJour,InvoiceAccount),fieldNum(CustTable,AccountNum));

                custTableDs.addRange(fieldNum(CustTable,vatNum)).value(_vatNum);
            }
        }

        if (_countryRegionId || _countryRegionType)
        {
            qCustVendVolume.query().validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());

            // Add join table
            address_ds = custInvoiceJour_ds.addDataSource(tableNum(LogisticsPostalAddress));
            address_ds.relations(true);
            address_ds.joinMode(JoinMode::InnerJoin);
            countryRegion_ds = address_ds.addDataSource(tableNum(LogisticsAddressCountryRegion));
            countryRegion_ds.relations(true);

            // Add relation
            countryRegion_ds.addLink(fieldNum(LogisticsPostalAddress, CountryRegionId), fieldNum(LogisticsAddressCountryRegion, CountryRegionId));

            if (_countryRegionId)
            {
                countryRegion_ds.addRange(fieldNum(LogisticsAddressCountryRegion, CountryRegionId)).value(_countryRegionId);
            }

            if (_countryRegionType)
            {
                intrastatCountryRegionParameters_ds = countryRegion_ds.addDataSource(tableNum(IntrastatCountryRegionParameters));
                intrastatCountryRegionParameters_ds.relations(true);

                intrastatCountryRegionParameters_ds.addRange(fieldNum(IntrastatCountryRegionParameters, CountryRegionType)).value(_countryRegionType);
            }
        }

        if (!notCheckBillingClassification &&
            CustParameters::isBillingClassificationEnabled())
        {
            qbdsCustTrans = custInvoiceJour_ds.addDataSource(tableNum(CustTrans));
            qbdsCustTrans.joinMode(JoinMode::InnerJoin);
            qbdsCustTrans.relations(true);

            CustBillingClassificationReportManager::setBillingClassificationRanges(qbdsCustTrans, _billingClassification,
                                                                                    _inclTransWithNoBillingClass, fieldNum(CustTrans, CustBillingClassification));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custWriteRecord</Name>
				<Source><![CDATA[
    void custWriteRecord(CustInvoiceJour _custInvoiceJour, NoYesId _triangularOper = NoYes::No)
    {
        LogisticsPostalAddress postalAddress = LogisticsPostalAddress::findRecId(_custInvoiceJour.InvoicePostalAddress);
        //orginale custvriterecord
        if (!tmpCustVendVolume)
        {
            tmpCustVendVolume.SalesPurch = SalesPurch::Sales;
            tmpCustVendVolume.AccountNum = _custInvoiceJour.InvoiceAccount;
            tmpCustVendVolume.vatNum = this.custInvoiceJourVATNum(_custInvoiceJour);
            tmpCustVendVolume.EnterpriseNumber = this.custInvoiceJourEnterpriseNum(_custInvoiceJour);
            if (useCalculationBE)
            {
                tmpCustVendVolume.CountryRegionId = postalAddress.CountryRegionId;
                tmpCustVendVolume.CountryRegionType = IntrastatCountryRegionParameters::type(postalAddress.CountryRegionId);
                tmpCustVendVolume.CountyId = postalAddress.County;
            }
            else
            {
                 postalAddress = LogisticsPostalAddress::findRecId(_custInvoiceJour.DeliveryPostalAddress);
                tmpCustVendVolume.CountryRegionId = postalAddress.CountryRegionId;
                tmpCustVendVolume.CountryRegionType = IntrastatCountryRegionParameters::type(postalAddress.CountryRegionId);
                tmpCustVendVolume.CountyId = postalAddress.County;
            }

            tmpCustVendVolume.TriangularOperation = _triangularOper;

            tmpCustVendVolume.Name = this.name();
            tmpCustVendVolume.AmountMST = this.calcNetAmount(_custInvoiceJour);

            if (separateTaxAmount)
            {
                if (useCalculationBE)
                {
                    if (_custInvoiceJour.InvoiceAmount>0 && _custInvoiceJour.SumTax<0)
                    {
                        tmpCustVendVolume.TaxAmount = CurrencyExchangeHelper::mstAmount(-_custInvoiceJour.SumTax, _custInvoiceJour.CurrencyCode, _custInvoiceJour.InvoiceDate, UnknownNoYes::Unknown, _custInvoiceJour.ExchRate);
                    }
                    else
                    {
                        tmpCustVendVolume.TaxAmount = CurrencyExchangeHelper::mstAmount(_custInvoiceJour.SumTax, _custInvoiceJour.CurrencyCode, _custInvoiceJour.InvoiceDate, UnknownNoYes::Unknown, _custInvoiceJour.ExchRate);
                    }
                }
                else
                {
                    tmpCustVendVolume.TaxAmount = _custInvoiceJour.SumTax;
                }
            }

            if (!onlyDomesticInvoices || EUSalesListTransfer::isDomesticVATDutableEnterpriseNum_BE(tmpCustVendVolume.EnterpriseNumber))
            {
                tmpCustVendVolume.insert();
            }
        }
        else
        {
            tmpCustVendVolume.AmountMST += this.calcNetAmount(_custInvoiceJour);

            if (separateTaxAmount)
            {
                if (useCalculationBE)
                {
                    if (_custInvoiceJour.InvoiceAmount>0 && _custInvoiceJour.SumTax<0)
                    {
                        tmpCustVendVolume.TaxAmount += CurrencyExchangeHelper::mstAmount(-_custInvoiceJour.SumTax, _custInvoiceJour.CurrencyCode, _custInvoiceJour.InvoiceDate, UnknownNoYes::Unknown, _custInvoiceJour.ExchRate);
                    }
                    else
                    {
                        tmpCustVendVolume.TaxAmount += CurrencyExchangeHelper::mstAmount(_custInvoiceJour.SumTax, _custInvoiceJour.CurrencyCode, _custInvoiceJour.InvoiceDate, UnknownNoYes::Unknown, _custInvoiceJour.ExchRate);
                    }
                }
                else
                {
                    tmpCustVendVolume.TaxAmount += _custInvoiceJour.SumTax;
                }
            }

            tmpCustVendVolume.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDataSources</Name>
				<Source><![CDATA[
    void findDataSources()
    {
        Counter dataSourceCount;
        Counter i = 0;

        dataSourceCount = qCustVendVolume.query().dataSourceCount();

        while (i < dataSourceCount)
        {
            i++;

            switch (qCustVendVolume.query().dataSourceNo(i).table())
            {
                case(tableNum(CustInvoiceJour)):
                    custInvoice = NoYes::Yes;
                    break;

                case(tableNum(VendInvoiceJour)):
                    vendInvoice = NoYes::Yes;
                    break;

                case(tableNum(ProjInvoiceJour)):
                    projInvoice = NoYes::Yes;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    Name name()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(boolean _separateTaxAmount = true)
    {
        qCustVendVolume = new QueryRun(queryStr(CustVendVolume));

        separateTaxAmount = _separateTaxAmount;
        onlyDomesticInvoices = false;
        useJournalVATNum = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onlyDomesticInvoices</Name>
				<Source><![CDATA[
    boolean onlyDomesticInvoices(boolean _onlyDomesticInvoices = onlyDomesticInvoices)
    {
        onlyDomesticInvoices = _onlyDomesticInvoices;
        return onlyDomesticInvoices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceJourVATNum</Name>
				<Source><![CDATA[
    VATNum projInvoiceJourVATNum(ProjInvoiceJour _projInvoiceJour)
    {
        if (useJournalVATNum)
        {
            return _projInvoiceJour.vatNum;
        }

        return CustTable::find(_projInvoiceJour.InvoiceAccount).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _projInvoiceJour.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceQuery</Name>
				<Source><![CDATA[
    void projInvoiceQuery(str _invoiceDate, str _countryRegionType, str _countryRegionId, str _account, str _vatNum)
    {
        QueryBuildDataSource projInvoiceJour_ds;
        QueryBuildDataSource custTable_ds;
        QueryBuildDataSource countryRegion_ds;
        QueryBuildDataSource address_ds;
        QueryBuildDataSource qbd;
        QueryBuildDataSource intrastatCountryRegionParameters_ds;

        // Add table
        projInvoiceJour_ds = qCustVendVolume.query().addDataSource(tableNum(ProjInvoiceJour));

        // Add sorting order
        projInvoiceJour_ds.addSortField(fieldNum(ProjInvoiceJour,InvoiceDate),SortOrder::Ascending);

        // Add ranges
        if (_invoiceDate)
        {
            projInvoiceJour_ds.addRange(fieldNum(ProjInvoiceJour,InvoiceDate)).value(_invoiceDate);
        }
        if (_account)
        {
            projInvoiceJour_ds.addRange(fieldNum(ProjInvoiceJour,InvoiceAccount)).value(_account);
        }

        if (_vatNum && useJournalVATNum)
        {
             projInvoiceJour_ds.addRange(fieldNum(ProjInvoiceJour,vatNum)).value(_vatNum);
        }

        if (_countryRegionId || _countryRegionType || (_vatNum && !useJournalVATNum))
        {
            // Add join table (CustTable)
            custTable_ds = projInvoiceJour_ds.addDataSource(tableNum(CustTable));

            // Add Link
            custTable_ds.addLink(fieldNum(ProjInvoiceJour,InvoiceAccount),fieldNum(CustTable,AccountNum));

            if (_vatNum && !useJournalVATNum)
            {
                custTable_ds.addRange(fieldNum(CustTable, vatNum)).value(_vatNum);
            }

            if (_countryRegionId)
            {
                //Add join table
                qbd = custTable_ds.addDataSource(tableNum(DirPartyLocation));
                qbd.addLink(fieldNum(CustTable, Party), fieldNum(DirPartyLocation, Party));

                address_ds = qbd.addDataSource(tableNum(LogisticsPostalAddress));
                qbd.addLink(fieldNum(DirPartyLocation, Location), fieldNum(LogisticsPostalAddress, Location));
                address_ds.addRange(fieldNum(LogisticsPostalAddress, CountryRegionId)).value(_countryRegionId);
            }

            if (_countryRegionType)
            {
                //Add join table
                qbd = custTable_ds.addDataSource(tableNum(DirPartyLocation));
                qbd.addLink(fieldNum(CustTable, Party), fieldNum(DirPartyLocation, Party));

                address_ds = qbd.addDataSource(tableNum(LogisticsPostalAddress));
                qbd.addLink(fieldNum(DirPartyLocation, Location), fieldNum(LogisticsPostalAddress, Location));

                countryRegion_ds = address_ds.addDataSource(tableNum(LogisticsAddressCountryRegion));

                // Add relation
                countryRegion_ds.addLink(fieldNum(LogisticsPostalAddress, CountryRegionId), fieldNum(LogisticsAddressCountryRegion, CountryRegionId));

                intrastatCountryRegionParameters_ds = countryRegion_ds.addDataSource(tableNum(IntrastatCountryRegionParameters));
                intrastatCountryRegionParameters_ds.relations(true);

                intrastatCountryRegionParameters_ds.addRange(fieldNum(IntrastatCountryRegionParameters, CountryRegionType)).value(_countryRegionType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceQueryV2</Name>
				<Source><![CDATA[
    public void projInvoiceQueryV2(str _invoiceDate, str _countryRegionType, str _countryRegionId, str _account, str _VATNum, boolean _skipCustInvoiceWithSameLedgerVoucher = true)
    {
        // Method %1 must be overridden.
        throw error(strFmt("@SYS18885", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendCalcVolumeQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Query custVendCalcVolumeQuery()
    {
        return qCustVendVolume.query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projWriteRecord</Name>
				<Source><![CDATA[
    void projWriteRecord(ProjInvoiceJour _projInvoiceJour, NoYesId _triangularOper = NoYes::No)
    {
        CustTable custTable;
        LogisticsPostalAddress postalAddress;

        ttsbegin;

            custTable = CustTable::find(_projInvoiceJour.InvoiceAccount);

            if (!tmpCustVendVolume)
            {
                tmpCustVendVolume.SalesPurch = SalesPurch::Sales;
                tmpCustVendVolume.AccountNum = _projInvoiceJour.InvoiceAccount;
                tmpCustVendVolume.vatNum = this.projInvoiceJourVATNum(_projInvoiceJour);
                tmpCustVendVolume.EnterpriseNumber = useJournalVATNum ? 
                                                        _projInvoiceJour.EnterpriseNumber :
                                                        CustTable::find(_projInvoiceJour.InvoiceAccount).getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _projInvoiceJour.InvoiceDate);

                //The country/region and county are taken from the customer table
                postalAddress = custTable.postalAddress();
                tmpCustVendVolume.CountryRegionId = postalAddress.CountryRegionId;
                tmpCustVendVolume.CountryRegionType = IntrastatCountryRegionParameters::type(postalAddress.CountryRegionId);
                tmpCustVendVolume.CountyId = postalAddress.County;
                tmpCustVendVolume.TriangularOperation = _triangularOper;

                tmpCustVendVolume.Name = this.name();

                tmpCustVendVolume.AmountMST = this.calcNetAmount(_projInvoiceJour);

                if (separateTaxAmount)
                {
                    if (useCalculationBE)
                    {
                        tmpCustVendVolume.TaxAmount = CurrencyExchangeHelper::mstAmount(_projInvoiceJour.SumTax, _projInvoiceJour.CurrencyId, _projInvoiceJour.InvoiceDate, UnknownNoYes::Unknown, _projInvoiceJour.ExchRate);
                    }
                    else
                    {
                        tmpCustVendVolume.TaxAmount = _projInvoiceJour.SumTax;
                    }
                }

                if (!onlyDomesticInvoices || EUSalesListTransfer::isDomesticVATDutableEnterpriseNum_BE(tmpCustVendVolume.EnterpriseNumber))
                {
                    tmpCustVendVolume.insert();
                }
            }
            else
            {
                tmpCustVendVolume.AmountMST += this.calcNetAmount(_projInvoiceJour);

                if (separateTaxAmount)
                {
                    if (useCalculationBE)
                    {
                        tmpCustVendVolume.TaxAmount += CurrencyExchangeHelper::mstAmount(_projInvoiceJour.SumTax, _projInvoiceJour.CurrencyId, _projInvoiceJour.InvoiceDate, UnknownNoYes::Unknown, _projInvoiceJour.ExchRate);
                    }
                    else
                    {
                        tmpCustVendVolume.TaxAmount += _projInvoiceJour.SumTax;
                    }
                }

                tmpCustVendVolume.update();
            }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>separateTaxAmount</Name>
				<Source><![CDATA[
    boolean separateTaxAmount(boolean _separateTaxAmount = separateTaxAmount)
    {
        separateTaxAmount = _separateTaxAmount;
        return separateTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCalculationBE</Name>
				<Source><![CDATA[
    boolean useCalculationBE(boolean _useCalculationBE = useCalculationBE)
    {
        useCalculationBE = _useCalculationBE;
        return useCalculationBE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useJournalVATNum</Name>
				<Source><![CDATA[
    boolean useJournalVATNum(boolean _useJournalVATNum = useJournalVATNum)
    {
        useJournalVATNum = _useJournalVATNum;
        return useJournalVATNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notCheckBillingClassification</Name>
				<Source><![CDATA[
    boolean notCheckBillingClassification(boolean _notCheckBillingClassification = notCheckBillingClassification)
    {
        notCheckBillingClassification = _notCheckBillingClassification;
        return notCheckBillingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJourEnterpriseNum</Name>
				<Source><![CDATA[
    TaxEnterpriseNumber vendInvoiceJourEnterpriseNum(VendInvoiceJour _vendInvoiceJour)
    {
        TaxEnterpriseNumber enterpriseNumber = _vendInvoiceJour.vendTable_InvoiceAccount().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _vendInvoiceJour.InvoiceDate);

        if (useJournalVATNum)
        {
            enterpriseNumber = _vendInvoiceJour.EnterpriseNumber;
        }

        return enterpriseNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJourVATNum</Name>
				<Source><![CDATA[
    VATNum vendInvoiceJourVATNum(VendInvoiceJour _vendInvoiceJour)
    {
        if (useJournalVATNum)
        {
            return _vendInvoiceJour.vatNum;
        }

        return _vendInvoiceJour.vendTable_InvoiceAccount().getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _vendInvoiceJour.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceQuery</Name>
				<Source><![CDATA[
    void vendInvoiceQuery(str _invoiceDate, str _countryRegionType, str _countryRegionId, str _account, str _vatNum)
    {
        QueryBuildDataSource vendInvoiceJour_ds;
        QueryBuildDataSource vendTable_ds;
        QueryBuildDataSource countryRegion_ds;
        QueryBuildDataSource address_ds;
        QueryBuildDataSource qbd;
        QueryBuildDataSource intrastatCountryRegionParameters_ds;

        // Add table
        vendInvoiceJour_ds = qCustVendVolume.query().addDataSource(tableNum(VendInvoiceJour));
        // Add sorting order
        vendInvoiceJour_ds.addSortField(fieldNum(VendInvoiceJour,InvoiceDate),SortOrder::Ascending);

        // Add ranges
        if (_invoiceDate)
        {
            vendInvoiceJour_ds.addRange(fieldNum(VendInvoiceJour,InvoiceDate)).value(_invoiceDate);
        }

        if (_account)
        {
            vendInvoiceJour_ds.addRange(fieldNum(VendInvoiceJour,InvoiceAccount)).value(_account);
        }

        if (_vatNum && useJournalVATNum)
        {
             vendInvoiceJour_ds.addRange(fieldNum(VendInvoiceJour,vatNum)).value(_vatNum);
        }

        if (_countryRegionId || _countryRegionType || (_vatNum && !useJournalVATNum))
        {
            // Add join table (VendTable)
            vendTable_ds = vendInvoiceJour_ds.addDataSource(tableNum(VendTable));

            // Add Link
            vendTable_ds.addLink(fieldNum(VendInvoiceJour,InvoiceAccount),fieldNum(VendTable,AccountNum));

            if (_vatNum && !useJournalVATNum)
            {
                 vendTable_ds.addRange(fieldNum(VendTable,vatNum)).value(_vatNum);
            }

            if (_countryRegionId)
            {
                //Add join table
                qbd = vendTable_ds.addDataSource(tableNum(DirPartyLocation));
                qbd.addLink(fieldNum(VendTable, Party), fieldNum(DirPartyLocation, Party));

                address_ds = qbd.addDataSource(tableNum(LogisticsPostalAddress));
                qbd.addLink(fieldNum(DirPartyLocation, Location), fieldNum(LogisticsPostalAddress, Location));

                address_ds.addRange(fieldNum(LogisticsPostalAddress, CountryRegionId)).value(_countryRegionId);
            }

            if (_countryRegionType)
            {
                //Add join table
                qbd = vendTable_ds.addDataSource(tableNum(DirPartyLocation));
                qbd.addLink(fieldNum(VendTable, Party), fieldNum(DirPartyLocation, Party));

                address_ds = qbd.addDataSource(tableNum(LogisticsPostalAddress));
                qbd.addLink(fieldNum(DirPartyLocation, Location), fieldNum(LogisticsPostalAddress, Location));

                countryRegion_ds = address_ds.addDataSource(tableNum(LogisticsAddressCountryRegion));
                // Add relation
                countryRegion_ds.addLink(fieldNum(LogisticsPostalAddress, CountryRegionId), fieldNum(LogisticsAddressCountryRegion, CountryRegionId));

                intrastatCountryRegionParameters_ds = countryRegion_ds.addDataSource(tableNum(IntrastatCountryRegionParameters));
                intrastatCountryRegionParameters_ds.relations(true);

                intrastatCountryRegionParameters_ds.addRange(fieldNum(IntrastatCountryRegionParameters, CountryRegionType)).value(_countryRegionType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendWriteRecord</Name>
				<Source><![CDATA[
    void vendWriteRecord(VendInvoiceJour _vendInvoiceJour, NoYesId _triangularOper = NoYes::No)
    {
        VendTable vendTable;

        ttsbegin;

        vendTable = _vendInvoiceJour.vendTable_InvoiceAccount();

        if (!tmpCustVendVolume)
        {
            tmpCustVendVolume.SalesPurch = SalesPurch::Purch;
            tmpCustVendVolume.AccountNum = _vendInvoiceJour.InvoiceAccount;
            tmpCustVendVolume.vatNum = this.vendInvoiceJourVATNum(_vendInvoiceJour);
            tmpCustVendVolume.EnterpriseNumber = this.vendInvoiceJourEnterpriseNum(_vendInvoiceJour);
            //The country/region and county are taken from the vendor table
            tmpCustVendVolume.CountryRegionId = vendTable.postalAddress().CountryRegionId;
            tmpCustVendVolume.CountryRegionType = IntrastatCountryRegionParameters::type(vendTable.postalAddress().CountryRegionId);
            tmpCustVendVolume.CountyId = vendTable.postalAddress().County;
            tmpCustVendVolume.TriangularOperation = _triangularOper;

            tmpCustVendVolume.Name = this.name();

            tmpCustVendVolume.AmountMST = this.calcNetAmount(_vendInvoiceJour);

            if (separateTaxAmount)
            {
                tmpCustVendVolume.TaxAmount = _vendInvoiceJour.SumTax;
            }

            if (!onlyDomesticInvoices || EUSalesListTransfer::isDomesticVATDutableEnterpriseNum_BE(tmpCustVendVolume.EnterpriseNumber))
            {
                tmpCustVendVolume.insert();
            }
        }
        else
        {
            tmpCustVendVolume.AmountMST += this.calcNetAmount(_vendInvoiceJour);

            if (separateTaxAmount)
            {
                tmpCustVendVolume.TaxAmount += _vendInvoiceJour.SumTax;
            }

            tmpCustVendVolume.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static CustVendCalcVolume construct(AccountVATNum _reportBy, boolean _separateTaxAmount = false)
    {
        CustVendCalcVolume custVendCalcVolume;

        switch (_reportBy)
        {
            case AccountVATNum::AccountNum:
                custVendCalcVolume = new CustVendCalcVolumeAccount(_separateTaxAmount);
                break;

            case AccountVATNum::VATNum:
                custVendCalcVolume = new CustVendCalcVolumeVAT(_separateTaxAmount);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return custVendCalcVolume;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>