<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetProposalAcquisition</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetProposalAcquisition extends RAssetProposal implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    public RAssetTransType assetTransType()
    {
        return RAssetTransType::Acquisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClothsRigging</Name>
				<Source><![CDATA[
    private boolean checkClothsRigging()
    {
        RAssetScrap                 rAssetScrap;
        RAssetInventIssueQuotas     quotas;
        RAssetInventIssueQuotaTypes quotaTypes;
        InventQty                   inventQty;
        InventDimGroupSetup         inventDimGroupSetup;
        DictField                   dictFieldSerialId = new DictField(tableNum(InventDim), fieldNum(InventDim, InventSerialId));
        DictField                   dictFieldBatchId  = new DictField(tableNum(InventDim), fieldNum(InventDim, InventBatchId));

        if (! rAssetTable.isFixedAssetType())
        {
            select firstonly ItemId from rAssetScrap
                where rAssetScrap.AssetId    == rAssetTable.AccountNum &&
                      rAssetScrap.Assembling == NoYes::Yes             &&
                      ! rAssetScrap.StornoRecId                        &&
                      ! rAssetScrap.TransDate;

            if (rAssetTable.Status == RAssetStatus::NoAcquisition)
            {
                if (! rAssetTable.needAssembling())
                {
                    return checkFailed(strFmt("@GLS113992", rAssetTable.AccountNum));
                }

                if (! rAssetTable.employee(runDate))
                {
                    return checkFailed(strFmt("@GLS113993", rAssetTable.AccountNum));
                }

                if (rAssetTable.AssetType == RAssetType::Cloths || rAssetTable.AssetType == RAssetType::Rigging)
                {
                    if (! rAssetTable.QuotaTypesRecId)
                    {
                        return checkFailed(strFmt("@GLS113994", rAssetTable.AccountNum));
                    }

                    quotas = RAssetInventIssueQuotas::findQuotas(rAssetTable.employee(runDate),
                                                                 rAssetTable.QuotaTypesRecId,
                                                                 InventTable::find(rAssetScrap.ItemId).itemGroupId(),
                                                                 rAssetScrap.ItemId);
                    if (quotas)
                    {
                        quotaTypes = RAssetInventIssueQuotaTypes::find(rAssetTable.QuotaTypesRecId);
                        inventQty = RAssetTable::clothAndRiggingQty(rAssetScrap.ItemId, rAssetTable.employee(runDate), rAssetTable.QuotaTypesRecId);
                        if (! quotaTypes.SuperQuota && (quotas.Quota < inventQty + 1))
                        {
                            return checkFailed(strFmt("@GLS113986",
                                               rAssetScrap.ItemId,
                                               rAssetTable.employee(runDate),
                                               EmployeeTable_RU::findByEmployeeId(rAssetTable.employee(runDate)).employeeName()));
                        }
                    }
                    else
                    {
                        return checkFailed(strFmt("@GLS113987", rAssetScrap.ItemId));
                    }
                }
                inventDimGroupSetup = InventDimGroupSetup::newItemId(rAssetScrap.ItemId);

                if (! inventDimGroupSetup.isDimensionActive(dictFieldSerialId.id()))
                {
                    return checkFailed(strFmt("@GLS113981", dictFieldSerialId.label(), rAssetScrap.ItemId));
                }
                if (! inventDimGroupSetup.isDimensionActive(dictFieldBatchId.id()))
                {
                    return checkFailed(strFmt("@GLS113981", dictFieldBatchId.label(), rAssetScrap.ItemId));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDepreciationBonusLine</Name>
				<Source><![CDATA[
    protected void createDepreciationBonusLine(RAssetStandardId   _assetStandardId)
    {
        LedgerJournalTrans          ledgerJournalTrans          = rAssetJournal.ledgerJournalTrans();
        LedgerJournalTrans_RAsset   ledgerJournalTrans_RAsset   = rAssetJournal.ledgerJournalTrans_RAsset();
        RAssetStandardTable         standardTable               = RAssetStandardTable::find(_assetStandardId);
        RAssetGroup                 rAssetGroup;
        TransDate                   transDate                   = ledgerJournalTrans_RAsset.getTransDate(ledgerJournalTrans);
    
        if (rAssetStandards.assetDeprMethod(transDate) != RAssetDeprMethod::StraightLine &&
             rAssetStandards.assetDeprMethod(transDate) != RAssetDeprMethod::TaxNonLinearGroup)
        {
            return;
        }
    
        if (deprBonusId && !rAssetBudgetModelId && standardTable.CurrentOperationsTax == CurrentOperationsTax::Tax)
        {
    
            rAssetGroup = RAssetGroup::find(RAssetStandards::find(rAssetTable.AccountNum, _assetStandardId).AssetGroup);
            if (RAssetBonus::find(deprBonusId).Percentage > rAssetGroup.DepreciationBonusPercent)
            {
                throw error(strFmt("@GLS114350",
                                   rAssetGroup.DepreciationBonusPercent,
                                   rAssetGroup.AssetGroupId));
            }
    
            ttsbegin;
            ledgerJournalTrans_RAsset.selectForUpdate(true);
            ledgerJournalTrans_RAsset.DepreciationBonusId = deprBonusId;
            ledgerJournalTrans_RAsset.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    public void createJournalLines(RAssetStandardId _assetStandardId,
                                   boolean          _runFromBatch = true,
                                   RAssetAmount     _assetAmount  = 0)
    {
        AmountCur           amountCur;
    
        runDate = this.checkFirstDate(runDate ? runDate : rAssetTable.AcquisitionDate,
                                      rAssetTable.AccountNum);
    
        if (correct)
        {
            this.initJournalCorrection();
        }
    
        if (! (rAssetTable.Status == RAssetStatus::NoAcquisition &&
             (select firstonly RecId from rAssetPurchTrans
                  where rAssetPurchTrans.AssetId        == rAssetTable.AccountNum &&
                        rAssetPurchTrans.PurchTransType == RAssetPurchTransType::PurchaseLine).RecId))
        {
            if (rAssetStandards.Depreciation            &&
                rAssetStandards.postingProfile(runDate) &&
                this.checkClothsRigging())
            {
                amountCur = _assetAmount > 0 ? _assetAmount : this.currentAcquisitionValue(_assetStandardId);
    
                if (rAssetTable.needAssembling() ||
                    amountCur                    ||
                    ! _runFromBatch)
                {
                    rAssetJournal.createVoucher();
                    rAssetJournal.createTrans(amountCur,
                                              rAssetTable,
                                              runDate,
                                              rAssetStandards,
                                              rAssetBudgetModelId);
                    this.createDepreciationBonusLine(_assetStandardId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentAcquisitionValue</Name>
				<Source><![CDATA[
    #define.Value2(2)
    public RAssetAmount currentAcquisitionValue(RAssetStandardId _assetStandardId)
    {
        RAssetAmount    rAssetAmount;
        RAssetScrap     rAssetScrap;
        ;

        if (rAssetTable.needAssembling())
        {
            while select * from rAssetScrap
                where rAssetScrap.AssetId    == rAssetTable.AccountNum &&
                      rAssetScrap.Assembling == NoYes::Yes             &&
                      ! rAssetScrap.TransDate
            {
                if (rAssetStandards.CurrencyCode == CompanyInfoHelper::standardCurrency())
                {
                    rAssetAmount += conPeek(InventTrans::calcCostValue(InventTransOriginRAssetScrap_RU::findInventTransOriginId(
                                                                        rAssetScrap.RecId)), #Value2) * -1;
                }
                else if (rAssetStandards.CurrencyCode == CompanyInfoHelper::secondaryCurrency_RU() &&
                         InventModelGroupItem::modelGroupByItemIdLegalEntity(rAssetScrap.ItemId).PostOnhandFinancialSecCur_RU)
                {
                    rAssetAmount += conPeek(InventTrans::calcCostValueSecCur_RU(InventTransOriginRAssetScrap_RU::findInventTransOriginId(
                                                                        rAssetScrap.RecId)), #Value2) * -1;
                }
                else
                {
                    rAssetAmount += CurrencyExchangeHelper::curAmount2CurAmount(conPeek(InventTrans::calcCostValue(InventTransOriginRAssetScrap_RU::findInventTransOriginId(rAssetScrap.RecId)), 2) * -1, CompanyInfoHelper::standardCurrency(), rAssetStandards.CurrencyCode, runDate);
                }

                if (! rAssetAmount &&
                    ! rAssetStandards.puttingIntoOperationDate() &&
                    _assetStandardId != RAssetParameters::standardIdDefault())
                {
                    rAssetAmount = rAssetStandards.AcquisitionPrice;
                }
            }
        }
        else if (! rAssetStandards.puttingIntoOperationDate())
        {
            rAssetAmount = rAssetStandards.AcquisitionPrice;
        }

        rAssetAmount = RAssetProposal::roundAmount(_assetStandardId,
                                                   rAssetTable,
                                                   runDate,
                                                   rAssetAmount,
                                                   rAssetStandards.CurrencyCode);

        return rAssetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deprPeriodCheck</Name>
				<Source><![CDATA[
    protected boolean deprPeriodCheck()
    {
        return RAssetTrans::findFirstType(rAssetTable.AccountNum,
                                          rAssetStandards.AssetStandardId,
                                          RAssetTransType::Acquisition,
                                          false).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@GLS116125");
        dialogAssetStandardId.visible(false);
        dialogRunDate.value("");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();
        if (dialogAssetBudgetModelId)
        {
            rAssetBudgetModelId = dialogAssetBudgetModelId.value();
        }

        runDate          = dialogRunDate.value();

        reasonCode       = dialogReasonCode.value();
        reasonComment    = dialogReasonComment.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(QueryRun _queryRun = queryRun)
    {
        ;
        if (runDate)
        {
            _queryRun.query().dataSourceName(tableStr(RAssetTable)).addRange(fieldNum(RAssetTable, AcquisitionDate)).value(queryRange(dateNull(), runDate));
        }
        super(_queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>