<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTReportSalesPurchListDP_MY</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxGSTReportSalesPurchListDP_MY</c> class is the report data provider class.
/// </summary>
/// <remarks>
/// This is the RDP class for the <c>TaxGSTReportSalesPurchList_MY</c> SSRS Report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(TaxGSTReportSalesPurchListContract_MY))
]
public class TaxGSTReportSalesPurchListDP_MY extends SrsReportDataProviderPreProcessTempDB
{
    TaxGSTReportSalesPurchListTmp_MY taxGSTReportSalesPurchListTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxGSTReportSalesPurchListTmp_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>TaxGSTReportSalesPurchListTmp_MY</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxGSTReportSalesPurchListTmp_MY</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxGSTReportSalesPurchListTmp_MY))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxGSTReportSalesPurchListTmp_MY getTaxGSTReportSalesPurchListTmp_MY()
    {
        return taxGSTReportSalesPurchListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        TaxGSTReportSalesPurchListTmp_MY        taxGSTReportSalesPurchListTmpGruop;
        TaxGSTReportSalesPurchListTmp_MY        taxGSTReportSalesPurchListTmpGruopTmp;
        TaxGSTReportSalesPurchListContract_MY   contract;
        TaxPeriod                               taxPeriod;
        FromDate                                fromDate;
        ToDate                                  toDate;
        TaxDirection                            taxDirection;
        TaxDirection                            taxDirectionDifference;
        TaxTrans                                taxTrans;
        TaxCode                                 taxCodePrevious;
        RecordInsertList                        recordInsertList = new RecordInsertList(
            tableNum(TaxGSTReportSalesPurchListTmp_MY),
            false,
            false,
            false,
            false,
            true,
            taxGSTReportSalesPurchListTmp);

        contract = this.parmDataContract() as TaxGSTReportSalesPurchListContract_MY;

        taxPeriod    = contract.parmTaxPeriod();
        fromDate     = contract.parmFromDate();
        toDate       = contract.parmToDate();
        taxDirection = contract.parmTaxDirection();

        // First, sum UseTax taxTrans and insert into tmpBuffer
        insert_recordset taxGSTReportSalesPurchListTmpGruopTmp (TaxCode, TaxBaseAmount, TaxAmount)
            select TaxCode, sum(TaxBaseAmount), sum(TaxAmount) from taxTrans
                group by TaxCode
                where taxTrans.TaxPeriod        == taxPeriod
                    && taxTrans.TransDate       >= fromDate
                    && taxTrans.TransDate       <= toDate
                    && taxTrans.Source          != TaxModuleType::Tax
                    && taxTrans.TaxDirection    == TaxDirection::UseTax;

        if (taxDirection == TaxDirection::OutgoingTax)
        {
            update_recordSet taxGSTReportSalesPurchListTmpGruopTmp
                setting TaxBaseAmount = taxGSTReportSalesPurchListTmpGruopTmp.TaxBaseAmount*(-1),
                        TaxAmount     = taxGSTReportSalesPurchListTmpGruopTmp.TaxAmount*(-1);

            taxDirectionDifference = TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled() ? TaxDirection::OutgoingTax_W : taxDirection;
        }
        else if (taxDirection == TaxDirection::IncomingTax && TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled())
        {
            taxDirectionDifference = TaxDirection::IncomingTax_W;
        }
        else
        {
            taxDirectionDifference = taxDirection;
        }
        
        // Second, sum incoming or outgoing taxTrans and insert into tmpBuffer
        insert_recordset taxGSTReportSalesPurchListTmpGruopTmp (TaxCode, TaxBaseAmount, TaxAmount)
            select TaxCode, sum(TaxBaseAmount), sum(TaxAmount) from taxTrans
                group by TaxCode
                where taxTrans.TaxPeriod        == taxPeriod
                    && taxTrans.TransDate       >= fromDate
                    && taxTrans.TransDate       <= toDate
                    && taxTrans.Source          != TaxModuleType::Tax
                    && (taxTrans.TaxDirection   == taxDirection
                    || (taxDirectionDifference  != taxDirection
                    &&  taxTrans.TaxDirection   == taxDirectionDifference));

        // At last, group tmpBuffer to get the final buffer
        insert_recordset taxGSTReportSalesPurchListTmpGruop (TaxCode, TaxBaseAmount, TaxAmount)
            select TaxCode, sum(TaxBaseAmount), sum(TaxAmount) from taxGSTReportSalesPurchListTmpGruopTmp
                group by TaxCode;

        while select taxGSTReportSalesPurchListTmpGruop
            join TaxValue from taxTrans
                order by TaxCode, TransDate DESC, RecId DESC
                where taxGSTReportSalesPurchListTmpGruop.TaxCode    == taxTrans.TaxCode
                    && taxTrans.TaxPeriod                           == taxPeriod
                    && taxTrans.TransDate                           >= fromDate
                    && taxTrans.TransDate                           <= toDate
                    && taxTrans.Source                              != TaxModuleType::Tax
        {
            if (taxCodePrevious != taxGSTReportSalesPurchListTmpGruop.TaxCode)
            {
                taxCodePrevious = taxGSTReportSalesPurchListTmpGruop.TaxCode;

                taxGSTReportSalesPurchListTmp.clear();
                taxGSTReportSalesPurchListTmp.TaxCode       = taxGSTReportSalesPurchListTmpGruop.TaxCode;
                taxGSTReportSalesPurchListTmp.TaxBaseAmount = taxGSTReportSalesPurchListTmpGruop.TaxBaseAmount;
                taxGSTReportSalesPurchListTmp.TaxAmount     = taxGSTReportSalesPurchListTmpGruop.TaxAmount;
                taxGSTReportSalesPurchListTmp.TaxValue      = num2str(taxTrans.TaxValue, 1, numOfDec(taxTrans.TaxValue), -1, -1) + "@SYS77046";
                recordInsertList.add(taxGSTReportSalesPurchListTmp);
            }
        }
        
        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>