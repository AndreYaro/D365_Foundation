<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayJournalFormTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayJournalFormTrans extends JournalFormTrans
{
    FormControl               ctrlGrid_Qty;
    FormControl               ctrlGrid_Rate;
    FormControl               ctrlGrid_Amount;
    FormControl               ctrlQty;
    FormControl               ctrlRate;
    FormControl               ctrlAmount;
    FormControl               relative_M_kinName;
    FormFunctionButtonControl ctrlPayReverse;
    FormFunctionButtonControl ctrlUnPostJournal;
    FormFunctionButtonControl ctrlDeleteTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTransFromGroup</Name>
				<Source><![CDATA[
    private void createTransFromGroup(RPayJournalTrans _rPayJournalTrans)
    {
        RPayGroupMember     payGroupMember;
        RPayJournalTrans    rPayJournalTransNew;
        LineNum             lineNum;
        RPayRateCallContext rPayRateCallContext = new RPayRateCallContext();

        lineNum = (select maxof(LineNum) from rPayJournalTrans
            where rPayJournalTrans.JournalId == _rPayJournalTrans.JournalId).LineNum;

        while select PersonEmplId from payGroupMember
            where payGroupMember.PayGroup == _rPayJournalTrans.Number
        {
            lineNum += 1;
            rPayJournalTransNew.data(_rPayJournalTrans);

            rPayJournalTransNew.LineNum = lineNum;
            rPayJournalTransNew.TransType = RPayTypeString::Employee;
            rPayJournalTransNew.Number = payGroupMember.PersonEmplId;

            if (rPayJournalTransNew.TransDate)
            {
                rPayRateCallContext.parmRateDate(rPayJournalTransNew.TransDate);
            }

            rPayRateCallContext.parmEmployeeId(rPayJournalTransNew.Number);

            rPayJournalTransNew.Rate = RPayRateTable::find(RPayTable::find(rPayJournalTransNew.PayCtype).PayRate).getValue(rPayRateCallContext);
            rPayJournalTransNew.calcAmount();

            if (rPayJournalTransNew.validateWrite())
            {
                rPayJournalTransNew.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    public void datasourceActivePost()
    {
        super();
        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePost</Name>
				<Source><![CDATA[
    public void datasourceInitValuePost()
    {
        super();

        this.initFromPayTable();

        journalTrans.TransDate  = RPayParameters::payPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceValidateWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates data valid for posting.
    /// </summary>
    /// <param name="_ret">
    /// The initial result, used for passing the result from previous validation.
    /// </param>
    /// <returns>
    /// True if validation passed without errors.
    /// </returns>
    public boolean datasourceValidateWritePost(boolean _ret)
    {
        RPayJournalTrans    localRPayJournalTrans = journalTrans;
        DialogButton        dialogButton;
        boolean ret;

        ret = super(_ret);

        if (ret &&
            localRPayJournalTrans.RecId == 0 &&
            localRPayJournalTrans.payJournalTable().RatePerEmpl &&
            localRPayJournalTrans.TransType == RPayTypeString::GroupEmpl &&
            localRPayJournalTrans.Number != '')
        {
            dialogButton = Box::yesNo("@RUP6021", DialogButton::No);
            if (dialogButton == DialogButton::Yes)
            {
                this.createTransFromGroup(localRPayJournalTrans);
                this.journalTrans_DS().delete();
                this.journalTrans_DS().executeQuery();
            }
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables active buttons depending on the journal state.
    /// </summary>
    protected void enableButtonsActive()
    {
        boolean enabled = journalTableData.blockLevel() != JournalBlockLevel::System && journalTableData.journalTable().Posted;

        super();

        if (ctrlUnPostJournal)
        {
            ctrlUnPostJournal.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedAmountPost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fieldModifiedAmountPost()
    {
        RPayJournalTrans payJournalTrans = journalTrans;

        payJournalTrans.Amount = CurrencyExchangeHelper::amount(payJournalTrans.Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedNumberPost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fieldModifiedNumberPost()
    {
        this.initFromPayTable();
        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPayCtypePost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fieldModifiedPayCtypePost()
    {
        this.initFromPayTable();
        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPercentPost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fieldModifiedPercentPost()
    {
        RPayJournalTrans payJournalTrans = journalTrans;

        payJournalTrans.calcAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQtyPost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fieldModifiedQtyPost()
    {
        RPayJournalTrans payJournalTrans = journalTrans;

        payJournalTrans.calcAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedRatePost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fieldModifiedRatePost()
    {
        RPayJournalTrans payJournalTrans = journalTrans;

        payJournalTrans.calcAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedTransTypePost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fieldModifiedTransTypePost()
    {
        RPayJournalTrans    payJournalTrans = journalTrans;

        payJournalTrans.Number = "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes buttons.
    /// </summary>
    protected void initButtons()
    {
        boolean enabled = journalTableData.blockLevel() != JournalBlockLevel::System && journalTableData.journalTable().Posted;

        super();

        if (ctrlUnPostJournal)
        {
            ctrlUnPostJournal.enabled(enabled && journalTableData.hasLines());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasourceAllow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes allow delete and allow create for the datasource.
    /// </summary>
    protected void initDatasourceAllow()
    {
        RPayJournalTable rPayJournalTable = journalTableData.journalTable();
        super();

        if (rPayJournalTable.rhrmOrderTable)
        {
            journalTrans_ds.allowDelete(false);
            journalTrans_ds.allowCreate(false);
        }
        else
        {
            journalTrans_ds.allowDelete(!rPayJournalTable.Posted);
            ctrlDeleteTrans.enabled(!rPayJournalTable.Posted);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPayTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromPayTable()
    {
        RPayJournalTrans localRPayJournalTrans = journalTrans;

        localRPayJournalTrans.Qty     = 0;
        localRPayJournalTrans.Amount  = 0;
        localRPayJournalTrans.initFromPayTable(RPayTable::find(localRPayJournalTrans.PayCtype));

        localRPayJournalTrans.calcAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormControl parmCtrlAmount(FormControl _ctrlAmount = ctrlAmount)
    {
        ctrlAmount = _ctrlAmount;
        return ctrlAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlDeleteTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormControl parmCtrlDeleteTrans(FormFunctionButtonControl _ctrlDeleteTrans = ctrlDeleteTrans)
    {
        ctrlDeleteTrans = _ctrlDeleteTrans;
        return ctrlDeleteTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGrid_Amount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormControl parmCtrlGrid_Amount(FormControl _ctrlGrid_Amount = ctrlGrid_Amount)
    {
        ctrlGrid_Amount = _ctrlGrid_Amount;
        return ctrlGrid_Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGrid_Qty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormControl parmCtrlGrid_Qty(FormControl _ctrlGrid_Qty = ctrlGrid_Qty)
    {
        ctrlGrid_Qty = _ctrlGrid_Qty;
        return ctrlGrid_Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGrid_Rate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormControl parmCtrlGrid_Rate(FormControl _ctrlGrid_Rate = ctrlGrid_Rate)
    {
        ctrlGrid_Rate = _ctrlGrid_Rate;
        return ctrlGrid_Rate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlKinName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormControl parmCtrlKinName(FormControl _relative_M_kinName = relative_M_kinName)
    {
        relative_M_kinName = _relative_M_kinName;
        return relative_M_kinName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPayReverse</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormFunctionButtonControl parmCtrlPayReverse(FormFunctionButtonControl _ctrlPayReverse = ctrlPayReverse)
    {
        ctrlPayReverse =  _ctrlPayReverse;
        return  ctrlPayReverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormControl parmCtrlQty(FormControl _ctrlQty = ctrlQty)
    {
        ctrlQty = _ctrlQty;
        return ctrlQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlRate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormControl parmCtrlRate(FormControl _ctrlRate = ctrlRate)
    {
        ctrlRate = _ctrlRate;
        return ctrlRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlUnPostJournal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormFunctionButtonControl parmCtrlUnPostJournal(FormFunctionButtonControl _unPostJournal = ctrlUnPostJournal)
    {
        ctrlUnPostJournal = _unPostJournal;
        return ctrlUnPostJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateDesign()
    {
        RPayJournalTrans    payJournalTrans = journalTrans;
        RPayJournalTable    payJournalTable = payJournalTrans.payJournalTable();

        RPayTable           payTable;

        if (payJournalTable.rhrmOrderTable)
        {
            this.journalTrans_DS().object(fieldNum(RPayJournalTrans, Qty)).allowEdit(false);
            this.journalTrans_DS().object(fieldNum(RPayJournalTrans, Rate)).allowEdit(false);
            this.journalTrans_DS().object(fieldNum(RPayJournalTrans, Percent)).allowEdit(false);
            this.journalTrans_DS().object(fieldNum(RPayJournalTrans, Amount)).allowEdit(false);
            this.journalTrans_DS().object(fieldNum(RPayJournalTrans, Txt)).allowEdit(false);
            this.journalTrans_DS().object(fieldNum(RPayJournalTrans, Qty)).allowEdit(false);
            relative_M_kinName.allowEdit(false);
            ctrlDeleteTrans.enabled(false);
            ctrlPayReverse.enabled(false); //do not allow make reverse by line
        }
        else
        {
            this.journalTrans_DS().object(fieldNum(RPayJournalTrans, TransDate)).allowEdit(payJournalTrans.RecId == 0);
            payTable = RPayTable::find(payJournalTrans.PayCtype);

            payTable.doActiveControls(ctrlGrid_Qty, ctrlGrid_Rate, ctrlGrid_Amount);
            payTable.doActiveControls(ctrlQty, ctrlRate, ctrlAmount);
            ctrlPayReverse.enabled(payJournalTable.Posted &&
                               !TransLink_RU::exist(payJournalTrans.TableId, payJournalTrans.RecId, payJournalTrans.RecId));
            ctrlDeleteTrans.enabled(!payJournalTable.Posted);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>