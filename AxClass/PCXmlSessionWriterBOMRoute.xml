<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCXmlSessionWriterBOMRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCXmlSessionWriterBOMRoute</c> class writes session XML for the BOM and Routes template
/// component records.
/// </summary>
class PcXmlSessionWriterBOMRoute
{
    CompanyInfo legalEntity;

    #PC
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        legalEntity = CompanyInfo::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntity</Name>
				<Source><![CDATA[
    public CompanyInfo parmLegalEntity(CompanyInfo _legalEntity = legalEntity)
    {
        legalEntity = _legalEntity;

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes XML for the conditions of BOM and Routes for a given component in a given legal entity.
    /// </summary>
    /// <param name="_componentRecId">
    /// The record ID of a component.
    /// </param>
    /// <param name="_componentTreeWriter">
    /// An instance of the <c>PCXmlWriter</c> class.
    /// </param>
    public void write(RefRecId _componentRecId, PCXmlWriter _componentTreeWriter)
    {
        PCTemplateComponent templateComponent;

        // BOM and Route templates
        while   select templateComponent
        order   by templateComponent.Requirement
        where   templateComponent.Requirement != PCRequirement::SubComponent
        &&      templateComponent.ComponentClass == _componentRecId
        &&      templateComponent.LegalEntity == legalEntity.RecId
        {
            this.writeSingleBOMRoute(templateComponent, _componentTreeWriter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMRouteXMLStartElementDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the start element of the XML representation of the condition that is associated with a BOM or Route.
    /// </summary>
    /// <param name="_requirement">
    /// An enumeration value that is used to determine the start element
    /// </param>
    /// <param name = "_result">
    /// A <c>EventHandlerResult</c> object where a string representing the start element of the XML representation of the condition that is associated with a BOM or Route can be returned.
    /// </param>
    delegate void getBOMRouteXMLStartElementDelegate(PCRequirement _requirement, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMRouteXMLStartElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the start element of the XML representation of the condition that is associated with a BOM or Route.
    /// </summary>
    /// <param name="_requirement">
    /// An enumeration value that is used to determine the start element.
    /// </param>
    /// <returns>
    /// A string representing the start element of the XML representation of the condition that is associated with a BOM or Route.
    /// </returns>
    private str getBOMRouteXMLStartElement(PCRequirement _requirement)
    {
        switch (_requirement)
        {
            case PCRequirement::ActivityRequirement:
                return #operationLineElement;

            case PCRequirement::ProductRequirement:
                return #subPartElement;

            case PCRequirement::SubComponent:
                throw error(Error::wrongUseOfFunction(funcName()));

            default:
                EventHandlerResult result = new EventHandlerResult();
                this.getBOMRouteXMLStartElementDelegate(_requirement, result);
                
                if (result.hasResult())
                {
                    return result.result();
                }
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSingleBOMRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the XML representation of the condition that is associated with a BOM or Route.
    /// </summary>
    /// <param name="_templateComponent">
    /// A template component record.
    /// </param>
    /// <param name="_xmlWriter">
    /// The XML writer to use to store the XML representation of this record.
    /// </param>
    protected void writeSingleBOMRoute(PCTemplateComponent _templateComponent, PCXmlWriter _xmlWriter)
    {
        PCTemplateComponentConstraint condition;

        _xmlWriter.writeStartElement(this.getBOMRouteXMLStartElement(_templateComponent.Requirement));

        _xmlWriter.writeAttributeString(#nameAttribute, _templateComponent.Name);
        _xmlWriter.writeAttributeString(#ReqIdAttribute, int642str(_templateComponent.RecId));

        condition = PCTemplateComponentConstraint::findByTemplateComponent(_templateComponent.RecId);

        condition.toXML(_xmlWriter);

        _xmlWriter.writeEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCXmlSessionWriterBOMRoute construct()
    {
        return new PCXmlSessionWriterBOMRoute();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>