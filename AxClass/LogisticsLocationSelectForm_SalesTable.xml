<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsLocationSelectForm_SalesTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LogisticsLocationSelectForm_SalesTable extends LogisticsLocationSelectForm
{
    SalesTable salesTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowedSources</Name>
				<Source><![CDATA[
    public Set allowedSources()
    {
        Set ret;

        ret = super();

        ret.add(LogisticsLocationSelectSourceType::SalesOrder);
        ret.add(LogisticsLocationSelectSourceType::SalesLine);
        ret.add(LogisticsLocationSelectSourceType::SalesQuotation);
        ret.add(LogisticsLocationSelectSourceType::SalesQuotationLine);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the selected address to the calling sales order.
    /// </summary>
    /// <param name="_transferFromTable">
    /// The source of the address.
    /// </param>
    /// <param name="_addressRecId">
    /// The selected address.
    /// </param>
    public void copyAddressToCaller(Common _transferFromTable, LogisticsPostalAddressRecId _addressRecId)
    {
        LogisticsPostalAddress address = LogisticsPostalAddress::findRecId(_addressRecId);
        LogisticsLocation locationToCopyFrom = LogisticsLocation::find(address.Location);

        salesTable.DeliveryPostalAddress = _addressRecId;
        salesTable.AddressRefRecId   = _transferFromTable.RecId;
        salesTable.AddressRefTableId = _transferFromTable.TableId;
        salesTable.setDeliveryName(true);

        this.copyShipCarrierInfo(locationToCopyFrom);

        salesTable.TaxGroup = TaxSales::custTaxGroup(salesTable.DlvTerm, salesTable.TaxGroup, salesTable.deliveryLocation());

        // Update VAT number when delivery address changes when tax service is enabled
        if (TaxIntegrationTaxIdUtility::isUpdateTaxExemptNumberFromCustomerAddressEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales)
            && (CustParameters::find().UseFiscalInvoiceAccount != UseFiscalInvoiceAccount::Always || salesTable.CustAccount == salesTable.InvoiceAccount))
        {
            TaxIntegrationTaxIdUtility::updateTaxExemptNumberFromCustomerAddress(
                salesTable as TaxExemptVatNumMap,
                LogisticsPostalAddress::findRecId(salesTable.DeliveryPostalAddress),
                salesTable.CustAccount);
        }

        salesTable.setListCode();

        if (salesTable.mcrIsCallCenter())
        {
            this.formDataSourceRefresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyShipCarrierInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy carrier info from a location to a sales order header.
    /// </summary>
    /// <param name="_locationToCopyFrom">
    /// The location from where to copy carrier info.
    /// </param>
    /// <remarks>
    /// Will only copy from delivery or invoice locations.
    /// </remarks>
    public void copyShipCarrierInfo(LogisticsLocation   _locationToCopyFrom)
    {
        ShipCarrierAddress   shipCarrierAddress;
        DlvMode              dlvMode;

        if (_locationToCopyFrom.isRole(LogisticsLocationRoleType::Delivery) ||
            _locationToCopyFrom.isRole(LogisticsLocationRoleType::Invoice))
        {
            select firstonly DlvTermId, DlvModeId, ShipCarrierAccount, ShipCarrierBlindShipment, ShipCarrierResidentialDest from shipCarrierAddress
                where shipCarrierAddress.Location == _locationToCopyFrom.RecId;

            salesTable.ShipCarrierBlindShipment = shipCarrierAddress.ShipCarrierBlindShipment;
            salesTable.ShipCarrierResidential = shipCarrierAddress.ShipCarrierResidentialDest;

            if (DlvTerm::find(salesTable.DlvTerm).ShipCarrierFreightApplied != ShipCarrierFreightApplied::ThirdParty)
            {
                if (shipCarrierAddress.DlvModeId)
                {
                    salesTable.DlvMode                  = shipCarrierAddress.DlvModeId;
                    dlvMode                             = DlvMode::find(salesTable.DlvMode);
                    salesTable.ShipCarrierId            = dlvMode.ShipCarrierId;
                    salesTable.ShipCarrierAccountCode   = dlvMode.ShipCarrierAccountCode;
                    salesTable.ShipCarrierAccount       = shipCarrierAddress.ShipCarrierAccount;
                    salesTable.Transport                = dlvMode.Transport;
                }
                if (shipCarrierAddress.DlvTermId)
                {
                    salesTable.DlvTerm = shipCarrierAddress.DlvTermId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyThirtyPartyAddressToCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the thirty party address to the calling sales order.
    /// </summary>
    public void copyThirtyPartyAddressToCaller()
    {
        boolean                 isThirdParty;
        LogisticsPostalAddress  address;
        Addressing              oldThirdPartyBillingAddr;
        ShipCarrierAddress      shipCarrierAddress;
        LogisticsLocation       logisticsLocation;

        if (ShipCarrierInterface::interfaceEnabled())
        {
            isThirdParty = DlvTerm::find(salesTable.DlvTerm).ShipCarrierFreightApplied == ShipCarrierFreightApplied::ThirdParty ;
            if (!isThirdParty && salesTable.ShipCarrierPostalAddress)
            {
                if (Box::yesNo("@SYS4002145",DialogButton::No) == DialogButton::Yes)
                {
                    salesTable.ShipCarrierName = "";
                    salesTable.ShipCarrierPostalAddress = 0;
                    salesTable.ShipCarrierAccount = "";
                }
            }

            address = LogisticsPostalAddress::findRecId(salesTable.ShipCarrierPostalAddress);
            oldThirdPartyBillingAddr = address.Address;

            if (isThirdParty)
            {
                address.clear();

                select firstonly shipCarrierAddress
                    where shipCarrierAddress.CustAccount == salesTable.CustAccount
                       && shipCarrierAddress.DlvTermId   == salesTable.DlvTerm
                    join RecId,Description from logisticsLocation
                        where logisticsLocation.RecId == shipCarrierAddress.Location
                    join RecId from address
                        where address.Location == logisticsLocation.RecId;

                salesTable.setShipCarrierFromLogisticsLocation(logisticsLocation, address.RecId, shipCarrierAddress);
            }

            if (salesTable.tpAddress() != oldThirdPartyBillingAddr && SalesLine::exist(salesTable.SalesId))
            {
                salesTable.copyThirdPartyBillingAddressToLine();
            }

            this.formDataSourceRefresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// The initial selected source for addresses on the form.
    /// </summary>
    /// <returns>
    /// LogisticslocationSelectSourceType corresponding to the address source.
    /// </returns>
    public LogisticsLocationSelectSourceType defaultSource()
    {
        LogisticsLocationSelectSourceType   sourceType = super();
        Common                              addressOwner;

        if (salesTable.AddressRefTableId)
        {
            addressOwner = LogisticsLocationSelectForm::findByRecId(
                salesTable.AddressRefTableId,
                salesTable.AddressRefRecId
            );

            if (addressOwner)
            {
                sourceType = LogisticsLocationSelectForm::tableIdToSourceType(
                    salesTable.AddressRefTableId,
                    sourceType
                );
            }
        }

        return sourceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsPostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the record ID of the <c>LogisticsPostalAddress</c> that is currently selected.
    /// </summary>
    /// <returns>
    ///   The <c>LogisticsPostalAddress</c> record ID.
    /// </returns>
    public RecId getLogisticsPostalAddressRecId()
    {
        return salesTable.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLookupRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the record the target form's grid should have selected upon openning.
    /// </summary>
    /// <returns>
    ///   The record to be selected.
    /// </returns>
    public Common getLookupRecord()
    {
        Common addressOwner;

        if (salesTable.AddressRefTableId)
        {
            addressOwner = LogisticsLocationSelectForm::findByRecId(
                salesTable.AddressRefTableId,
                salesTable.AddressRefRecId
            );
        }

        if (!addressOwner)
        {
            if (salesTable.CustAccount)
            {
                addressOwner = CustTable::find(salesTable.CustAccount);
            }
        }

        return addressOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesTable _salesTable)
    {
        salesTable = _salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCopyAddressToCaller_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the caller form datasource.
    /// </summary>
    /// <param name="_transferFromTable">
    /// The source of the address that was copied to the sales order header.
    /// </param>
    /// <param name="_addressRecId">
    /// The selected address that was copied to the sales order header.
    /// </param>
    public void postCopyAddressToCaller_BR(Common _transferFromTable, LogisticsPostalAddressRecId _addressRecId)
    {
        if (FormDataUtil::isFormDataSource(salesTable))
        {
            FormDataUtil::getFormDataSource(salesTable).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>LogisticsLocationSelectForm_SalesTable</c> object.
    /// </summary>
    /// <param name="_buffer">
    ///    A record to use to initialize the <c>LogisticsLocationSelectForm_SalesTable</c> object.
    /// </param>
    /// <returns>
    ///    A new <c>LogisticsLocationSelectForm_SalesTable</c> object.
    /// </returns>
    public static LogisticsLocationSelectForm_SalesTable construct(Common _buffer)
    {
        return new LogisticsLocationSelectForm_SalesTable(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToCallerHandler</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(LogisticsLocationSelectForm_SalesTable), methodStr(LogisticsLocationSelectForm_SalesTable, copyAddressToCaller))]
    /// <summary>
    /// Event handler to run after <c>copyAddressToCaller</c> method.
    /// </summary>
    /// <param name="_args">
    /// <c>XppPrePostArgs</c> with the properties of the call to <c>copyAddressToCaller</c>.
    /// </param>
    public static void copyAddressToCallerHandler(XppPrePostArgs _args)
    {
        LogisticsLocationSelectForm_SalesTable  logisticsLocationSelectForm_SalesTable = _args.getThis();

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        logisticsLocationSelectForm_SalesTable.postCopyAddressToCaller_BR(
                  _args.getArg('_transferFromTable'),
                  _args.getArg('_addressRecId'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDataSourceRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refereshes form datasource of SalesTable.
    /// </summary>
    protected void formDataSourceRefresh()
    {
        formDataSourceRefresh(salesTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>