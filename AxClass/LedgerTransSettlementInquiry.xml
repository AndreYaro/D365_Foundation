<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransSettlementInquiry</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class LedgerTransSettlementInquiry
{
    private LedgerTransOpenTmp ledgerTransOpenTmp;
    private FromDate fromDate;
    private ToDate toDate;
    private str mainAccounts;
    private LedgerSettlementStatus settlementStatus;

    private boolean isLedgerSettlementsEnabled = LedgerTransSettlement::isLedgerSettlementsEnabled();
    private TransDate currentDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runProcess</Name>
				<Source><![CDATA[
    internal void runProcess(LedgerTransSettlementInquiryParameters _parameters)
    {
        fromDate = _parameters.parmFromDate();
        toDate = _parameters.parmToDate();
        mainAccounts = _parameters.parmMainAccounts();
        settlementStatus = _parameters.parmLedgerSettlementStatus();

        ledgerTransOpenTmp.linkPhysicalTableInstance(_parameters.parmLedgerTransOpenTmp());

        delete_from ledgerTransOpenTmp;

        LedgerTransOpenTmp filteredMainAccounts = this.filterByMainAccounts();

        if (settlementStatus == LedgerSettlementStatus::Settled)
        {
            this.populateSettledTransactionData(filteredMainAccounts);
        }
        else if (settlementStatus == LedgerSettlementStatus::Unsettled)
        {
            this.populateUnsettledTransactionData(filteredMainAccounts);
        }
        else
        {
            this.populateSettledTransactionData(filteredMainAccounts);
            this.populateUnsettledTransactionData(filteredMainAccounts);
        }

        this.translateMainAccountName();
        this.fillDebitCreditAmounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterByMainAccounts</Name>
				<Source><![CDATA[
    private LedgerTransOpenTmp filterByMainAccounts()
    {
        #SysOperation

        LedgerTransOpenTmp ledgerTransMainAccounts;

        ListEnumerator listOfMainAccountIds = strSplit(mainAccounts, #CollectionValueSeparator).getEnumerator();

        ttsbegin;

        while (listOfMainAccountIds.moveNext())
        {
            ledgerTransMainAccounts.clear();

            ledgerTransMainAccounts.MainAccountId = listOfMainAccountIds.current();

            ledgerTransMainAccounts.insert();
        }

        ttscommit;

        return ledgerTransMainAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateUnsettledTransactionData</Name>
				<Source><![CDATA[
    private void populateUnsettledTransactionData(LedgerTransOpenTmp _selectedMainAccounts)
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        LedgerTransSettlement ledgerTransSettlement;

        LedgerSettlementStatus unsettledSettlementStatus = LedgerSettlementStatus::Unsettled;

        insert_recordset ledgerTransOpenTmp
                (SettlementStatus, AccountingDate, JournalNumber, SubledgerVoucher, GeneralJournalEntry,
                TransactionCurrencyCode, Text, GeneralJournalAccountEntry, LedgerDimension,
                FullyQualifiedAccount, MainAccountId, Name, Type)
            select unsettledSettlementStatus, AccountingDate, JournalNumber, SubledgerVoucher, RecId from generalJournalEntry
                    where generalJournalEntry.AccountingDate >= fromDate
                        && generalJournalEntry.AccountingDate <= toDate
                        && generalJournalEntry.Ledger == Ledger::current()
            join TransactionCurrencyCode, Text, RecId, LedgerDimension from generalJournalAccountEntry
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join FullyQualifiedAccount, MainAccount, Name, Type from mainAccountLedgerDimensionView
                    where mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension
            exists join _selectedMainAccounts
                    where _selectedMainAccounts.MainAccountId == mainAccountLedgerDimensionView.MainAccount
            notexists join ledgerTransSettlement
                    where isLedgerSettlementsEnabled
                        && ledgerTransSettlement.TransRecId == generalJournalAccountEntry.RecId
                        && (ledgerTransSettlement.SettleDate == dateNull()
                            || (ledgerTransSettlement.SettleDate >= fromDate 
                                && ledgerTransSettlement.SettleDate <= toDate));

        this.fillOriginalTransDateAndTransAge();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSettledTransactionData</Name>
				<Source><![CDATA[
    private void populateSettledTransactionData(LedgerTransOpenTmp _selectedMainAccounts)
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        LedgerTransSettlement ledgerTransSettlement;

        LedgerSettlementStatus settledSettlementStatus = LedgerSettlementStatus::Settled;

        insert_recordset ledgerTransOpenTmp
                (SettlementStatus, AccountingDate, JournalNumber, SubledgerVoucher, GeneralJournalEntry,
                TransactionCurrencyCode, Text, GeneralJournalAccountEntry, LedgerDimension,
                FullyQualifiedAccount, MainAccountId, Name, Type, SettlementId, AutomationRule)
            select settledSettlementStatus, AccountingDate, JournalNumber, SubledgerVoucher, RecId from generalJournalEntry
                    where generalJournalEntry.AccountingDate >= fromDate
                        && generalJournalEntry.AccountingDate <= toDate
                        && generalJournalEntry.Ledger == Ledger::current()
            join TransactionCurrencyCode, Text, RecId, LedgerDimension from generalJournalAccountEntry
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join FullyQualifiedAccount, MainAccount, Name, Type from mainAccountLedgerDimensionView
                    where mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension
            join SettleId, AutomationRule from ledgerTransSettlement
                    where isLedgerSettlementsEnabled
                        && ledgerTransSettlement.TransRecId == generalJournalAccountEntry.RecId
                        && (ledgerTransSettlement.SettleDate == dateNull()
                            || (ledgerTransSettlement.SettleDate >= fromDate 
                                && ledgerTransSettlement.SettleDate <= toDate))
            exists join _selectedMainAccounts
                    where _selectedMainAccounts.MainAccountId == mainAccountLedgerDimensionView.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateMainAccountName</Name>
				<Source><![CDATA[
    private void translateMainAccountName()
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        MainAccountTranslation mainAccountTranslation;

        LanguageId languageId = DimensionCache::currentDimensionValueLanguageId();

        if (languageId)
        {
            update_recordset ledgerTransOpenTmp
                setting 
                    Name = mainAccountTranslation.Name
                join RecId from generalJournalAccountEntry
                    where generalJournalAccountEntry.RecId == ledgerTransOpenTmp.GeneralJournalAccountEntry
                join RecId from dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
                join Name from mainAccountTranslation
                    where mainAccountTranslation.MainAccount == dimensionAttributeValueCombination.MainAccount
                        && mainAccountTranslation.LanguageId == languageId
                        && mainAccountTranslation.Name != '';
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDebitCreditAmounts</Name>
				<Source><![CDATA[
    private void fillDebitCreditAmounts()
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;

        // Fill in the credit amount
        update_recordSet ledgerTransOpenTmp 
            setting
                AccountingCurrencyAmountCredit = generalJournalAccountEntry.AccountingCurrencyAmount * -1,
                TransactionCurrencyAmountCredit = generalJournalAccountEntry.TransactionCurrencyAmount * -1,
                ReportingCurrencyCreditAmount = generalJournalAccountEntry.ReportingCurrencyAmount * -1
            join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == ledgerTransOpenTmp.GeneralJournalAccountEntry
                    && generalJournalAccountEntry.IsCredit == true;

        // Fill in the debit amount
        update_recordSet ledgerTransOpenTmp 
            setting
                AccountingCurrencyAmountDebit = generalJournalAccountEntry.AccountingCurrencyAmount,
                TransactionCurrencyAmountDebit = generalJournalAccountEntry.TransactionCurrencyAmount,
                ReportingCurrencyDebitAmount = generalJournalAccountEntry.ReportingCurrencyAmount
            join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == ledgerTransOpenTmp.GeneralJournalAccountEntry
                    && generalJournalAccountEntry.IsCredit == false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOriginalTransDateAndTransAge</Name>
				<Source><![CDATA[
    private void fillOriginalTransDateAndTransAge()
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry curAccountEntry;
        GeneralJournalAccountEntry prevAccountEntry;

        ttsbegin;

        while select forupdate ledgerTransOpenTmp
            where ledgerTransOpenTmp.SettlementStatus == LedgerSettlementStatus::Unsettled
            join curAccountEntry
                where curAccountEntry.RecId == ledgerTransOpenTmp.GeneralJournalAccountEntry
            join prevAccountEntry
                where prevAccountEntry.RecId == curAccountEntry.OriginalAccountEntry
            join generalJournalEntry
                where generalJournalEntry.RecId == prevAccountEntry.GeneralJournalEntry
        {
            ledgerTransOpenTmp.OriginalAccountingDate = generalJournalEntry.AccountingDate;
            ledgerTransOpenTmp.TransactionAge = this.calculateTransactionAge(generalJournalEntry.AccountingDate);

            ledgerTransOpenTmp.update();
        }

        while select forupdate ledgerTransOpenTmp
            where ledgerTransOpenTmp.SettlementStatus == LedgerSettlementStatus::Unsettled
            join curAccountEntry
                where curAccountEntry.RecId == ledgerTransOpenTmp.GeneralJournalAccountEntry
                    && !curAccountEntry.OriginalAccountEntry
        {
            ledgerTransOpenTmp.TransactionAge = this.calculateTransactionAge(ledgerTransOpenTmp.AccountingDate);
            
            ledgerTransOpenTmp.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransactionAge</Name>
				<Source><![CDATA[
    private NumberOfDays calculateTransactionAge(TransDate _transDate)
    {
        #TimeConstants

        return 1 + (DateTimeUtil::getDifference(DateTimeUtil::date(currentDate), DateTimeUtil::date(_transDate)) div #secondsPerDay);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>