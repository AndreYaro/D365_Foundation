<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionDateManagerFormExtensionPayrollHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the Payroll form extension events for the HcmPositionDateManager form.
/// </summary>
class HcmPositionDateManagerFormExtensionPayrollHandler
{
    boolean initialized;
    FormRun element;

    // Extension controls
    FormStringControl scheduleControl;
    FormReferenceGroupControl defaultGLIBenefitControl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of this form extension event handler class and registers it with the base form.
    /// </summary>
    /// <param name = "_formRunInstance">An instance of the form being extended.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(FormRun _formRunInstance)
    {
        initialized = false;
        element = _formRunInstance;

        // Register this extension with the main form
        element.registerExtensionInstance(classStr(HcmPositionDateManagerFormExtensionPayrollHandler), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this form extension handler instance
    /// </summary>
    private void init()
    {
        if (initialized)
        {
            return;
        }

        initialized = true;

        // Cache of the extension controls
        scheduleControl = element.design().controlName(formControlStr(HcmPositionDateManager, PayrollPositionDetails_Schedule)) as FormStringControl;
        defaultGLIBenefitControl = element.design().controlName(formControlStr(HcmPosition, PayrollPositionDetails_DefaultGeneralLiabilityInsuranceBenefit)) as FormReferenceGroupControl;

        // Register overrides
        scheduleControl.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(HcmPositionDateManagerFormExtensionPayrollHandler, onScheduleLookup), this);
        scheduleControl.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(HcmPositionDateManagerFormExtensionPayrollHandler, onScheduleJumpRef), this);
        defaultGLIBenefitControl.registerOverrideMethod(methodStr(FormReferenceControl, lookupReference), methodStr(HcmPositionDateManagerFormExtensionPayrollHandler, onDefaultGLIBenefitLookupReference), this);
        defaultGLIBenefitControl.registerOverrideMethod(methodStr(FormReferenceControl, resolveReference) , methodStr(HcmPositionDateManagerFormExtensionPayrollHandler, onDefaultGLIBenefitResolveReference), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onScheduleLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollPositionDetails_Schedule control's lookup.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private void onScheduleLookup(FormStringControl _sender)
    {
        FormDataSource payrollPositionDetails_ds = _sender.formRun().dataSource(formDataSourceStr(HcmPositionDateManager, PayrollPositionDetails)) as FormDataSource;
        PayrollPositionDetails payrollPositionDetails = payrollPositionDetails_ds.cursor();

        if (payrollPositionDetails.PaidByLegalEntity)
        {
            CompanyInfo companyInfoLocal = CompanyInfo::find(false, payrollPositionDetails.PaidByLegalEntity);
            changecompany(companyInfoLocal.DataArea)
            {
                // super()
                _sender.lookup();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onScheduleJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollPositionDetails_Schedule control's jumpRef.
    /// </summary>
    /// <param name = "_sender">The control initiating the jumpRef.</param>
    private void onScheduleJumpRef(FormStringControl _sender)
    {
        FormDataSource payrollPositionDetails_ds = _sender.formRun().dataSource(formDataSourceStr(HcmPositionDateManager, PayrollPositionDetails)) as FormDataSource;
        PayrollPositionDetails payrollPositionDetails = payrollPositionDetails_ds.cursor();

        if (payrollPositionDetails.PaidByLegalEntity && payrollPositionDetails.ScheduleDataAreaId && payrollPositionDetails.Schedule)
        {
            changecompany(payrollPositionDetails.ScheduleDataAreaId)
            {
                // super()
                _sender.jumpRef();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDefaultGLIBenefitLookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollPositionDetails_DefaultGeneralLiabilityInsuranceBenefit control's lookupReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private Common onDefaultGLIBenefitLookupReference(FormReferenceGroupControl _sender)
    {
        return HcmBenefit::lookupPayrollCategoryBenefits(_sender, PayrollCategory::GeneralLiabilityInsurance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDefaultGLIBenefitResolveReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollPositionDetails_DefaultGeneralLiabilityInsuranceBenefit control's resolveReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the resolve reference.</param>
    private Common onDefaultGLIBenefitResolveReference(FormReferenceGroupControl _sender)
    {
        return HcmBenefit::resolvePayrollCategoryBenefits(_sender, PayrollCategory::GeneralLiabilityInsurance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionDateManager_OnInitializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnInitializing event handler for the <c>HcmPositionDateManager.ExtensionPayroll</c> form extension.
    /// </summary>
    /// <param name="_sender">The <c>HcmPositionDateManager</c> form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(HcmPositionDateManager), FormEventType::Initializing)]
    public static void HcmPositionDateManager_OnInitializing(xFormRun _sender, FormEventArgs _e)
    {
        HcmPositionDateManagerFormExtensionPayrollHandler extensionInstance = new HcmPositionDateManagerFormExtensionPayrollHandler(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionDateManager_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnInitialized event handler for the <c>HcmPositionDateManager.ExtensionPayroll</c> form extension.
    /// </summary>
    /// <param name="_sender">The <c>HcmPositionDateManager</c> form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(HcmPositionDateManager), FormEventType::Initialized)]
    public static void HcmPositionDateManager_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        // Initialize the instance of this form extension handler now that the controls exist
        FormRun positionDateManagerForm = _sender as FormRun;
        HcmPositionDateManagerFormExtensionPayrollHandler extensionInstance = positionDateManagerForm.getExtensionInstance(classStr(HcmPositionDateManagerFormExtensionPayrollHandler));
        extensionInstance.init();

        if (_sender.args().dataset())
        {
            Common common = _sender.args().record();

            if (common.TableId == tableNum(PayrollPositionDetails))
            {
                PayrollPositionDetails positionPayrollDetailBuffer = common as PayrollPositionDetails;
                positionDateManagerForm.parmPositionBuffer(HcmPosition::find(positionPayrollDetailBuffer.Position));
                positionDateManagerForm.setTabFocusForControl(formControlStr(HcmPositionDateManager, PayrollPositionDetailsTabPage));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollPositionDetails_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnQueryExecuted event handler for the <c>HcmPositionDateManager.ExtensionPayroll</c> form extension's
    /// PayrollPositionDetails data source.
    /// </summary>
    /// <param name="_sender">The form data source whose query is being executed</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPositionDateManager, PayrollPositionDetails), FormDataSourceEventType::QueryExecuted)]
    public static void PayrollPositionDetails_OnQueryExecuted(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        // If a PayrollPositionDetails buffer was passed to the form by the caller, position to that record
        if (_sender.formRun().args().dataset())
        {
            Common common = _sender.formRun().args().record();

            if (common.TableId == tableNum(PayrollPositionDetails))
            {
                PayrollPositionDetails positionPayrollDetailBuffer = common as PayrollPositionDetails;
                _sender.positionToRecord(positionPayrollDetailBuffer);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollPositionDetails_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnActivated event handler for the <c>HcmPositionDateManager.ExtensionPayroll</c> form extension's
    /// PayrollPositionDetails data source.
    /// </summary>
    /// <param name="_sender">The form data source being activated.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPositionDateManager, PayrollPositionDetails), FormDataSourceEventType::Activated)]
    public static void PayrollPositionDetails_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        PayrollPositionDetails payrollPositionDetails = _sender.cursor();
        if (payrollPositionDetails.RecId)
        {
            payrollPositionDetails.setScheduleEnabled();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollPositionDetails_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnQueryExecuted event handler for the <c>HcmPositionDateManager.ExtensionPayroll</c> form extension's
    /// PayrollPositionDetails data source.
    /// </summary>
    /// <param name="_sender">The form data source being init-valued.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPositionDateManager, PayrollPositionDetails), FormDataSourceEventType::InitValue)]
    public static void PayrollPositionDetails_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        PayrollPositionDetails sourcePayrollDetail;
        date minDateValue = dateNull();
        date maxDateValue = dateMax();

        FormDataSource hcmPosition_ds = _sender.formRun().dataSource(formDataSourceStr(HcmPositionDateManager, HcmPosition)) as FormDataSource;
        HcmPosition hcmPosition = hcmPosition_ds.cursor();

        select firstonly ValidTimeState(minDateValue, maxDateValue) sourcePayrollDetail
               order by ValidFrom desc
               where sourcePayrollDetail.Position == hcmPosition.RecId;

        if (sourcePayrollDetail.RecId != 0)
        {
            PayrollPositionDetails payrollPositionDetails = _sender.cursor();

            // Save off the kernel-defaulted values from the super() of the initValue()
            date defaultedValidFrom = payrollPositionDetails.ValidFrom;
            date defaultedValidTo = payrollPositionDetails.ValidTo;

            buf2Buf(sourcePayrollDetail, payrollPositionDetails);

            //
            // Since the original initValue code ran prior to its super, the buff2buff() was not overwriting
            // the kernel-generated default values for ValidFrom and ValidTo. This OnInitValue() event handler
            // runs after the super, so we need to put back those defaulted values that were overwritten by buff2buff().
            //
            payrollPositionDetails.ValidFrom = defaultedValidFrom;
            payrollPositionDetails.ValidTo = defaultedValidTo;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaidByLegalEntity_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnModified event handler for the <c>HcmPositionDateManager.ExtensionPayroll</c> form extension's
    /// PayrollPositionDetails data source's PaidByLegalEntity field.
    /// </summary>
    /// <param name="_sender">The form data source object being modified</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmPositionDateManager, PayrollPositionDetails, PaidByLegalEntity), FormDataFieldEventType::Modified)]
    public static void PaidByLegalEntity_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        PayrollPositionDetails payrollPositionDetails = _sender.datasource().cursor();
        payrollPositionDetails.setScheduleEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>