<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseOrderReceivedBusinessEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchaseOrderReceivedBusinessEvent</c> class extends <c>BusinessEventsBase</c> to provide purchase order change request business event.
/// </summary>
[BusinessEvents(classStr(PurchaseOrderReceivedBusinessEventContract),
    'ProcurementAndSourcing:PurchaseOrderReceivedBusinessEventName',
    'ProcurementAndSourcing:PurchaseOrderReceivedBusinessEventDecription',
    ModuleAxapta::PurchaseOrder)]
public final class PurchaseOrderReceivedBusinessEvent extends BusinessEventsBase
{
    private VendPackingSlipJour vendPackingSlipJour;
    private PurchTable purchTable;  

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new PurchaseOrderReceivedBusinessEvent business event.
    /// </summary>
    /// <param name = "_vendPackingSlipJour">The <c>VendPackingSlipJour</c> record.</param>
    /// <param name = "_purchTable">The <c>PurchTable</c> record.</param>
    /// <returns>A new <c>PurchaseOrderReceivedBusinessEvent</c> business event.</returns>
    public static PurchaseOrderReceivedBusinessEvent construct(
        VendPackingSlipJour _vendPackingSlipJour,
        PurchTable _purchTable)
    {
        var event = new PurchaseOrderReceivedBusinessEvent();
        event.parmVendPackingSlipJour(_vendPackingSlipJour);
        event.parmPurchTable(_purchTable);

        return event;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides to provide purchase order confirmed data.
    /// </summary>
    /// <returns>The <c>PurchaseOrderConfirmdBusinessEventContract</c> of the event.</returns>       
    public BusinessEventsContract buildContract()
    {
        var contract = PurchaseOrderReceivedBusinessEventContract::construct();
        contract.parmLegalEntity(vendPackingSlipJour.DataAreaId);
        contract.parmPurchaseOrderNumber(vendPackingSlipJour.PurchId);
        contract.parmVendorAccount(vendPackingSlipJour.OrderAccount);
        contract.parmJournalId(vendPackingSlipJour.PackingSlipId);
        contract.parmProductReceiptId(vendPackingSlipJour.PackingSlipId);
        contract.parmDocumentDate(vendPackingSlipJour.DocumentDate);
        contract.parmPurchaseType(enum2Symbol(enumNum(PurchaseType), vendPackingSlipJour.PurchaseType));
        contract.parmRequesterPersonnelNumber(this.getPersonnelNumberForWorker(purchTable.Requester));
        contract.parmRequesterName(this.getNameForWorker(purchTable.Requester));
        contract.parmWorkerPurchPlacerPersonnelNumber(this.getPersonnelNumberForWorker(purchTable.WorkerPurchPlacer));
        contract.parmWorkerPurchPlacerName(this.getNameForWorker(purchTable.WorkerPurchPlacer));
        contract.parmContactPersonId(purchTable.ContactPersonId);

        if (purchTable.ContactPersonId)
        {
            contract.parmEmail(purchTable.Email);
            contract.parmPhone(purchTable.contactPersonPhone());
        }
        else
        {
            var vendTable = purchTable.vendTable_OrderAccount();
            contract.parmEmail(vendTable.email());
            contract.parmPhone(vendTable.phone());
        }
        
        contract.parmModifiedDateTime(DateTimeUtil::getSystemDateTime());

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPersonnelNumberForWorker</Name>
				<Source><![CDATA[
    private str getPersonnelNumberForWorker(HcmWorkerRecId _workerRecId)
    {
        return HcmWorker::find(_workerRecId).PersonnelNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNameForWorker</Name>
				<Source><![CDATA[
    private str getNameForWorker(HcmWorkerRecId _workerRecId)
    {
        return HcmWorker::worker2Name(_workerRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPackingSlipJour</Name>
				<Source><![CDATA[
    private VendPackingSlipJour parmVendPackingSlipJour(VendPackingSlipJour _vendPackingSlipJour = vendPackingSlipJour)
    {
        vendPackingSlipJour = _vendPackingSlipJour;

        return vendPackingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTable</Name>
				<Source><![CDATA[
    private PurchTable parmPurchTable(PurchTable _purchTable = purchTable)
    {
        purchTable = _purchTable;

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record context for this event.
    /// </summary>
    /// <returns>The <c>PurchTable</c> buffer for the record context for this event.</returns>
    public Common getContextRecord()
    {
        return this.parmPurchTable();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>