<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqVendorPolicyValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqVendorPolicyValidation</c> class is used to validate purchase requisition policy for vendors.
/// </summary>
public class PurchReqVendorPolicyValidation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkProcCategoryVendors</Name>
				<Source><![CDATA[
    private static boolean checkProcCategoryVendors(VendCategoryStatus _vendCategoryStatus,
                                                    VendAccount _vendAccount,
                                                    EcoResCategoryId _ecoResCategoryId,
                                                    PurchReqRequiredDate _requiredDate, 
                                                    RefRecId _buyingLegalEntity)
    {
        ProcCategoryVendorView  procCategoryVendorView;

        select firstonly RecId from procCategoryVendorView where
            procCategoryVendorView.VendAccountNum == _vendAccount
            && procCategoryVendorView.VendDataAreaId == getCompany(tableNum(VendTable))
            && ((_vendCategoryStatus == VendCategoryStatus::Preferred && procCategoryVendorView.VendCategoryStatus == VendCategoryStatus::Preferred) ||_vendCategoryStatus == VendCategoryStatus::Standard)
            && procCategoryVendorView.Category == _ecoResCategoryId
            && procCategoryVendorView.ValidFrom <= _requiredDate
            && procCategoryVendorView.ValidTo   >= _requiredDate
            && procCategoryVendorView.LegalEntity == _buyingLegalEntity;

        return procCategoryVendorView.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCategoryPolicyForVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if vendor is allowed for the procurement category based on the <c>ProcCategoryPolicyParameter</c>
    /// </summary>
    /// <param name="_procCategoryVendorSelection">Vendor category selection</param>
    /// <param name="_vendAccount">Vendor account</param>
    /// <param name="_ecoResCategoryId">Procurement category</param>
    /// <param name="_requiredDate">Required date of requisition</param>
    /// <param name="_buyingLegalEntity">Buying legal entity</param>
    /// <returns>
    /// true if the validation is successful; otherwise, false
    /// </returns>
    public static boolean validateCategoryPolicyForVendor(ProcCategoryVendorSelection _procCategoryVendorSelection,
                                                          VendAccount _vendAccount,
                                                          EcoResCategoryId _ecoResCategoryId, 
                                                          PurchReqRequiredDate _requiredDate, 
                                                          RefRecId _buyingLegalEntity)
    {
        boolean isVendorFound;
        switch (_procCategoryVendorSelection)
        {
            case ProcCategoryVendorSelection::Approved :
                isVendorFound = PurchReqVendorPolicyValidation::checkProcCategoryVendors(VendCategoryStatus::Standard, _vendAccount, _ecoResCategoryId, _requiredDate, _buyingLegalEntity);
                break;

            case ProcCategoryVendorSelection::PreferredOnly :
                isVendorFound = PurchReqVendorPolicyValidation::checkProcCategoryVendors(VendCategoryStatus::Preferred, _vendAccount, _ecoResCategoryId, _requiredDate, _buyingLegalEntity);
                break;

            case ProcCategoryVendorSelection::SelectionNotAllowed :
                isVendorFound = false;
                break;

            case ProcCategoryVendorSelection::Any :
                isVendorFound = true;
                break;
            
            default :
                isVendorFound = false;
                break;
        }
        return isVendorFound;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>