<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInboundConfigurationWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSInboundConfigurationWizard  extends SysWizard
{
    internal WHSInboundConfigurationWizardContext context;
    private boolean generateLocDirForEachWarehouses = true;
    private Set selectedWarehouseIds = new Set(Types::String);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSInboundConfigurationWizard construct()
    {
        return new WHSInboundConfigurationWizard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        context = WHSInboundConfigurationWizardContext::construct();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInboundWorkTransType</Name>
				<Source><![CDATA[
    internal void setInboundWorkTransType(WHSWorkTransType _inboundWorkTransType)
    {
        context.switchContext(_inboundWorkTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WHSInboundConfigurationWizard wizard = new WHSInboundConfigurationWizard();
        
        wizard.init();
        if (wizard.prompt())
        {
            wizard.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formname</Name>
				<Source><![CDATA[
    internal FormName formname()
    {
        return formStr(WHSInboundConfigurationWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>context</Name>
				<Source><![CDATA[
    public WHSInboundConfigurationWizardContext context()
    {
        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finish</Name>
				<Source><![CDATA[
    public void finish()
    {
        context.saveContext();
        
        ttsbegin;

        if (context.warehouseIds.empty())
        {
            this.fillWarehouseIds();
            generateLocDirForEachWarehouses = false;
        }

        this.generateWorkClass(context.purchaseWorkClassId, context.inboundWorkTransType);
        this.generateWorkTemplate(context.purchaseWorkTemplateCode, context.inboundWorkTransType);

        SetEnumerator warehouseIdsEnumerator = context.warehouseIds.getEnumerator();

        while (warehouseIdsEnumerator.moveNext())
        {
            InventLocationId warehouseId = warehouseIdsEnumerator.current();
            InventLocation warehouse = InventLocation::find(warehouseId, true);
            
            WMSLocationId receivingLoc = this.generateReceivingLocation(context.receivingLocationId, context.receivingProfileId, warehouse);
            this.updateWarehouseReceivingLocation(receivingLoc, warehouse);
            
            if (generateLocDirForEachWarehouses)
            {
                str locDirNameWithPrefix = strFmt("%1 %2", warehouse.InventLocationId, context.poPutLocationDirectiveName); 
                this.generateLocationDirective(locDirNameWithPrefix, warehouse, context.warehouseSelection, context.inboundWorkTransType);
            }
        }  

        if (!generateLocDirForEachWarehouses)
        {
            str locDirNameWithPrefix = context.poPutLocationDirectiveName;
            
            if (context.warehouseSelection == WhsWarehouseGroupAll::Group)
            {
                locDirNameWithPrefix = strFmt("%1 %2", context.warehouseGroupId, context.poPutLocationDirectiveName);
            }

            this.generateLocationDirective(locDirNameWithPrefix, null, context.warehouseSelection, context.inboundWorkTransType);
        }
        
        ttscommit;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillWarehouseIds</Name>
				<Source><![CDATA[
    private void fillWarehouseIds()
    {
        if(context.warehouseSelection == WhsWarehouseGroupAll::All)
        {
            InventLocation inventLocation;
            while select inventLocationId from inventLocation 
                where inventLocation.WHSEnabled == NoYes::Yes
            {
                selectedWarehouseIds.add(inventLocation.InventLocationId);
            }
            
        }
        else if(context.warehouseSelection == WhsWarehouseGroupAll::Group)
        {
            WhsWarehouseGroupLink whsWarehouseGroupLink;
            while select InventLocationId from whsWarehouseGroupLink
                where whsWarehouseGroupLink.WarehouseGroupId == context.warehouseGroupId
            {
                selectedWarehouseIds.add(whsWarehouseGroupLink.InventLocationId);
            }
        }
        context.warehouseIds = selectedWarehouseIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateReceivingLocation</Name>
				<Source><![CDATA[
    private WMSLocationId generateReceivingLocation(WMSLocationId _receivingLocationId, WHSLocProfileId _receivingProfileId, InventLocation _warehouse)
    {
        WMSLocation location;

        if(_receivingLocationId && _receivingProfileId && !WMSLocation::exist(_receivingLocationId, _warehouse.InventLocationId))
        {
            WHSLocationProfile locationProfile = WHSLocationProfile::find(_receivingProfileId);
            
            if (this.validateLocationProfile(locationProfile))
            {
                location.initValue();
                location.inventLocationId = _warehouse.InventLocationId;
                location.wMSLocationId = _receivingLocationId;
                location.LocProfileId = locationProfile.LocProfileId;
            
                location.insert();
            }

        }
        return location.wMSLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarehouseReceivingLocation</Name>
				<Source><![CDATA[
    private void updateWarehouseReceivingLocation(WMSLocationId _receivingLocationId, InventLocation _warehouse)
    {
        if(_receivingLocationId && _warehouse)
        {
            _warehouse.WMSLocationIdDefaultReceipt = _receivingLocationId;
            _warehouse.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationProfile</Name>
				<Source><![CDATA[
    private boolean validateLocationProfile(WHSLocationProfile _locationProfile)
    {
        if (!_locationProfile)
        {
            return false;
        }
        if(!_locationProfile.LPControlled)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWorkClass</Name>
				<Source><![CDATA[
    private void generateWorkClass(WHSWorkClassId _workclassId, WHSWorkTransType _inboundWorkTransType)
    {
        if(_workclassId && !WHSWorkClassTable::exist(_workclassId, _inboundWorkTransType))
        {
            WHSWorkClassTable workClass;
            workClass.WorkClassId = _workclassId;
            workClass.Description = _workclassId;
            workClass.WorkTransType = _inboundWorkTransType;

            workClass.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWorkTemplate</Name>
				<Source><![CDATA[
    private void generateWorkTemplate(WHSWorkTemplateCode _purchaseWorkTemplateCode, WHSWorkTransType _inboundWorkTransType)
    {
        if(_purchaseWorkTemplateCode && !WHSWorkTemplateTable::exist(_purchaseWorkTemplateCode, _inboundWorkTransType))
        {
            WHSWorkTemplateTable workTemplate;

            workTemplate.initFromWorkTransType(_inboundWorkTransType);
            workTemplate.initQuery();
            workTemplate.WorkTemplateCode = _purchaseWorkTemplateCode;
            workTemplate.WorkTemplateValid = NoYes::Yes;
            workTemplate.WorkTemplateDesc = _purchaseWorkTemplateCode;

            if (context.warehouseSelection == WhsWarehouseGroupAll::Group)
            {
                this.addWarehouseGroupRange(workTemplate);
            }
            else if(context.warehouseSelection == WhsWarehouseGroupAll::Warehouse)
            {
                this.addWarehouseRanges(workTemplate);
            }

            workTemplate.insert();

            this.generatedWorkTemplateLine(_inboundWorkTransType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWarehouseGroupRange</Name>
				<Source><![CDATA[
    protected void addWarehouseGroupRange(WHSWorkTemplateTable _workTemplateTable)
    {
        QueryRun queryRun = new QueryRun(_workTemplateTable.WorkTemplateQuery);

        QueryBuildDataSource qbdsWMSLocation = queryRun.query().dataSourceTable(tableNum(WMSLocation));
        qbdsWMSLocation.addDataSource(tableNum(WhsWarehouseGroupLink));
        qbdsWMSLocation.addLink(fieldNum(WMSLocation, InventLocationId), fieldNum(WhsWarehouseGroupLink, InventLocationId));

        QueryBuildDataSource qbdsWarehouseGroupLink = queryRun.query().dataSourceTable(tableNum(WhsWarehouseGroupLink));
        SysQuery::findOrCreateRange(qbdsWarehouseGroupLink, fieldNum(WhsWarehouseGroupLink, WarehouseGroupId)).value(queryValue(context.WarehouseGroupId));

        _workTemplateTable.workTemplateQuery = queryRun.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWarehouseRanges</Name>
				<Source><![CDATA[
    private void addWarehouseRanges(WHSWorkTemplateTable _workTemplateTable)
    {
        QueryRun queryRun = new QueryRun(_workTemplateTable.WorkTemplateQuery);
        QueryBuildDataSource tmpDataSource = queryRun.query().dataSourceTable(tableNum(WHSTmpWorkLine));

        SetEnumerator warehouseIdsEnumerator = context.warehouseIds.getEnumerator();
        str whsRanges;
        while (warehouseIdsEnumerator.moveNext())
        {
            if(whsRanges)
            {
                whsRanges += ',';
            }
            whsRanges += warehouseIdsEnumerator.current();
        }

        tmpDataSource.addRange(fieldNum(WHSTmpWorkLine, InventLocationId)).value(whsRanges);

        _workTemplateTable.workTemplateQuery = queryRun.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatedWorkTemplateLine</Name>
				<Source><![CDATA[
    private WHSWorkTemplateLine generatedWorkTemplateLine(WHSWorkTransType _inboundWorkTransType)
    {
        WHSWorkTemplateLine pickWorkTemplateLine;
        pickWorkTemplateLine.initValue();
        pickWorkTemplateLine.WorkType = WHSWorkType::Pick;
        pickWorkTemplateLine.WorkTransType = _inboundWorkTransType;
        pickWorkTemplateLine.WorkClassId = context.purchaseWorkClassId;
        pickWorkTemplateLine.WorkTemplateCode = context.purchaseWorkTemplateCode;
        pickWorkTemplateLine.LineNum = 1;
        pickWorkTemplateLine.WorkStop = NoYes::No;
        pickWorkTemplateLine.insert();

        WHSWorkTemplateLine putWorkTemplateLine;
        putWorkTemplateLine.initValue();
        putWorkTemplateLine.WorkType = WHSWorkType::Put;
        putWorkTemplateLine.WorkTransType = _inboundWorkTransType;
        putWorkTemplateLine.WorkClassId = context.purchaseWorkClassId;
        putWorkTemplateLine.WorkTemplateCode = context.purchaseWorkTemplateCode;
        putWorkTemplateLine.LineNum = 2;
        putWorkTemplateLine.WorkStop = NoYes::No;
        putWorkTemplateLine.insert();
        
        return putWorkTemplateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateLocationDirective</Name>
				<Source><![CDATA[
    private void generateLocationDirective(
        WHSLocType _poPutLocationDirectiveName,
        InventLocation _warehouse,
        WhsWarehouseGroupAll _warehouseSelection,
        WHSWorkTransType _inboundWorkTransType)
    {
        if(_poPutLocationDirectiveName && !WHSLocDirTable::exist(_poPutLocationDirectiveName, WHSWorkType::Put, _inboundWorkTransType))
        {
            //loc dir insert
            WHSLocDirTable locationDirective;
            locationDirective.WorkType = WHSWorkType::Put;
            locationDirective.WorkTransType = _inboundWorkTransType;
            locationDirective.LocDirName = _poPutLocationDirectiveName;
            locationDirective.LocSeqNum = WHSLocDirTable::getMaxLocSeqNum(_inboundWorkTransType) + 1;
            locationDirective.WarehouseGroupAll = _warehouseSelection;

            if (_warehouseSelection == WhsWarehouseGroupAll::Group)
            {
                locationDirective.WarehouseGroupId = context.warehouseGroupId;
            }
            else if (_warehouseSelection == WhsWarehouseGroupAll::Warehouse)
            {
                locationDirective.InventLocationId = _warehouse.InventLocationId;
                locationDirective.InventSiteId = _warehouse.InventSiteId;
            }
            locationDirective.initQueryFromWorkTransType(_inboundWorkTransType, NoYes::No);
            locationDirective.insert();

            //loc dir line
            WHSLocDirLine locDirLine = this.generateLocationDirectiveLine(locationDirective);

            //loc dir action
            this.generateLocationDirectiveAction(locationDirective, locDirLine, _poPutLocationDirectiveName);
        }
      
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateLocationDirectiveLine</Name>
				<Source><![CDATA[
    private WHSLocDirLine generateLocationDirectiveLine(WHSLocDirTable _locationDirective)
    {
        WHSLocDirLine locationDirectiveLine;
        locationDirectiveLine.LocSeqNum = 1;
        locationDirectiveLine.FromQty = 0;
        locationDirectiveLine.ToQty = 99999;
        locationDirectiveLine.RefRecId = _locationDirective.RecId;
        locationDirectiveLine.insert();

        return locationDirectiveLine;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateLocationDirectiveAction</Name>
				<Source><![CDATA[
    private void generateLocationDirectiveAction(WHSLocDirTable _locationDirective, WHSLocDirLine _locationDirectiveLine, WHSLocType _poPutLocationDirectiveName)
    {
        WHSLocDirAction locationDirectiveAction;
        locationDirectiveAction.LocDirName = _poPutLocationDirectiveName;
        locationDirectiveAction.initLocationQuery(_locationDirective.RecId);
        locationDirectiveAction.RefRecId = _locationDirectiveLine.RecId;
        locationDirectiveAction.LocSeqNum = 1;
        locationDirectiveAction.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>