<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustJournalPrintOutInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustJournalPrintOutInvoice
{
    LedgerJournalTrans ledgerJournalTrans;
    CustInvoiceJour custInvoiceJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUpProforma</Name>
				<Source><![CDATA[
        void cleanUpProforma()
    {
        #ISOCountryRegionCodes
        CustInvoiceTrans custInvoiceTrans;

        delete_from custInvoiceTrans
        index hint InvoiceIdx
        where custInvoiceTrans.SalesId == custInvoiceJour.SalesId &&
              custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId &&
              custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate;
        
        // <GSA>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA, #isoAE]))
        {
            custInvoiceJour.reread();
        }
        //</GSA>

        custInvoiceJour.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProforma</Name>
				<Source><![CDATA[
        void createProforma()
    {
        CustInvoiceTrans custInvoiceTrans;

        ttsbegin;

        custInvoiceJour.clear();
        custInvoiceJour.initValue();
        custInvoiceJour.initFromLedgerJournalTrans(ledgerJournalTrans);
        custInvoiceJour.InvoiceId = ledgerJournalTrans.DocumentNum;
        custInvoiceJour.Proforma = NoYes::Yes;

        if (!custInvoiceJour.InvoiceId)
        {
            custInvoiceJour.InvoiceId = strfmt('#%1', ledgerJournalTrans.RecId);
        }

        custInvoiceJour.insert();

        custInvoiceTrans.clear();
        custInvoiceTrans.initFromCustInvoiceJour(custInvoiceJour);
        custInvoiceTrans.initFromLedgerJournalTrans(ledgerJournalTrans);

        custInvoiceTrans.LineAmount = ledgerJournalTrans.amount();

        if (ledgerJournalTrans.ledgerJournalTable().LedgerJournalInclTax)
        {
            custInvoiceTrans.LineAmount = custInvoiceTrans.LineAmount + custInvoiceJour.SumTax;
        }

        if (ledgerJournalTrans.Prepayment)
        {
            custInvoiceTrans.LineAmount = custInvoiceTrans.LineAmount * -1;
        }

        custInvoiceTrans.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetter</Name>
				<Source><![CDATA[
        protected SalesFormLetter_Invoice initFormLetter()
    {
        return SalesFormLetter::construct(DocumentStatus::Invoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOk</Name>
				<Source><![CDATA[
        boolean printOk(SalesFormLetter _salesFormLetter)
    {
        return SalesFormLetter::callPrinterSettingsFormletter(_salesFormLetter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOut</Name>
				<Source><![CDATA[
        void printOut(NoYes proforma = NoYes::Yes,
                  RecordSortedList recordSortedList = null,
                  NoYes copy = NoYes::No)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        SalesFormLetter_Invoice salesFormLetter_Invoice = this.initFormLetter();
        RecordSortedList journalList;
        FormletterProformaPrint formletterProformaPrint;
        TaxCalculation taxCalculation;
        SalesInvoiceJournalPrint salesInvoiceJournalPrint;

        if (!this.printOk(salesFormLetter_Invoice))
        {
            return;
        }

        if (proforma)
        {
            ttsbegin;
        }

        salesFormLetter_Invoice.proforma(proforma);
        salesFormLetter_Invoice.createParmUpdateFromParmUpdateRecord(SalesFormletterParmData::initSalesParmUpdateFormletter(salesFormLetter_Invoice.documentStatus(),salesFormLetter_Invoice.pack()));
        salesFormLetter_Invoice.initParameters(salesFormLetter_Invoice.salesParmUpdate(), Printout::Current);
        salesFormLetter_Invoice.defaultGiroType(NoYes::No);
        salesInvoiceJournalPrint = FormletterJournalPrint::newFromFormletterContract(salesFormLetter_Invoice.getInvoiceContract());

        journalList = new RecordSortedList(tableNum(CustInvoiceJour));
        journalList.sortOrder(fieldNum(CustInvoiceJour, RecId));

        recordSortedList.first(ledgerJournalTrans);

        while (ledgerJournalTrans)
        {
            this.createProforma();

            taxCalculation = LedgerJournalTrans::getTaxInstance(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice, true);
            formletterProformaPrint = FormletterProformaPrint::construct();

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                formletterProformaPrint.parmExchRate_W (taxCalculation.exchRate());
                formletterProformaPrint.parmExchRateSec_W(taxCalculation.exchRateSecondary());
            }
            // </GEERU>

            formletterProformaPrint.parmTax(taxCalculation);
            formletterProformaPrint.writeTmpTaxWorkTrans(custInvoiceJour.RecId);
            formletterProformaPrint.parmJournalTmpTaxWorkTrans().copyFromTax(
                taxCalculation,
                custInvoiceJour.RecId,
                custInvoiceJour.TableId);
            salesInvoiceJournalPrint.parmFormletterProformaPrintPacked(formletterProformaPrint.pack());
            journalList.ins(custInvoiceJour);

            if (!recordSortedList.next(ledgerJournalTrans))
            {
                break;
            }
        }
        if (journalList.len())
        {
            custInvoiceJour.printJournal(salesInvoiceJournalPrint,
                                         journalList);
        }

        journalList.first(custInvoiceJour);

        while (custInvoiceJour)
        {
            if (custInvoiceJour.isProforma())
            {
                this.cleanUpProforma();
            }
            if (!journalList.next(custInvoiceJour))
            {
                break;
            }
        }

        salesFormLetter_Invoice.endUpdate();

        if (proforma)
        {
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        static void main(Args args)
    {
        LedgerJournalTrans ledgerJournalTrans;
        CustJournalPrintOutInvoice custJournalPrintOutInvoice = new CustJournalPrintOutInvoice();
        RecordSortedList recordSortedList = new RecordSortedList(ledgerJournalTrans.TableId);
        ledgerJournalTrans = args.record();
        recordSortedList.ins(ledgerJournalTrans);

        custJournalPrintOutInvoice.printOut(args.parmEnum(), recordSortedList, NoYes::No);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>