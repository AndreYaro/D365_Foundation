<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCWFormCtrl_BOMTable_BOMStep</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PdsCWFormCtrl_BOMTable_BOMStep extends PdsCWFormCtrl
{
    BOM         bom;
    PmfBOMStep  bomStep;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dataSourceLinkActivePost</Name>
				<Source><![CDATA[
    public void dataSourceLinkActivePost()
    {
        PdsCWValidation_StepConsumption lclValidation = cwValidation as PdsCWValidation_StepConsumption;

        lclValidation.parmItemBuffer(bom);
        lclValidation.parmBuffer(bomStep);
        lclValidation.parmUnitFieldId(fieldNum(BOM, UnitId));
        lclValidation.setQtyEditable(!PdsGlobal::pdsIsCWItem(bom.ItemId));
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the version is a formula.
    /// </summary>
    /// <returns>
    /// True if the version is a formula; otherwise false.
    /// </returns>
    public boolean isFormulaEnabled()
    {
        BOM         callerBOM;
        BOMVersion  callerBOMVersion;
        BOMTable    callerBOMTable;
        PmfBOMStep  callerBOMStep;
        Common      common = this.callerBuffer();
        boolean     ret = false;

        switch (common.TableId)
        {
            case tableNum(PmfBOMStep) :
                callerBOMStep = common;
                ret = PmfBOMStep::findBOM(callerBOMStep.BOMRefRecId).inventTable().isFormulaAllowed();
                break;
            case tablenum(BOM) :
                callerBOM = common;
                ret = callerBOM.inventTable().isFormulaAllowed();
                break;
            case tablenum(BOMVersion) :
                callerBOMVersion = common;
                ret = callerBOMVersion.inventTable().isFormulaAllowed();
                break;
            case tablenum(BOMTable) :
                callerBOMTable = common;
                ret = callerBOMTable.PmfBOMFormula == PmfBOMFormula::Formula;
                break;
            default:
                break;
        }

        ret = ret
            || this.menuItemName() == menuitemdisplaystr(PmfFormulaTable)
            || this.menuItemName() == menuitemdisplaystr(PmfFormulaTableHeader)
            || this.isFormulaEnabledOnCaller();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabledOnCaller</Name>
				<Source><![CDATA[
    private boolean isFormulaEnabledOnCaller()
    {
        FormRun callerForm = this.caller() as FormRun;

        if (callerForm)
        {
            if (callerForm.name() == formstr(BOMConsistOf) || callerForm.name() == formstr(BOMPartOf))
            {
                return callerForm.pmfIsEnabled();
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        cwValidation = PdsCWValidation_StepConsumption::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOM</Name>
				<Source><![CDATA[
    public BOM parmBOM(BOM _bom = bom)
    {
        if (!prmisdefault(_bom))
        {
            bom = _bom;
        }

        return bom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfBOMStep</Name>
				<Source><![CDATA[
    public PmfBOMStep parmPmfBOMStep(PmfBOMStep _bomStep = bomStep)
    {
        if (!prmisdefault(_bomStep))
        {
            bomStep = _bomStep;
        }

        return bomStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(PmfBOMStep)
            || _datasources2.TableId != tablenum(BOM))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.parmBOM(_datasources2);
        this.parmPmfBOMStep(_datasources1);

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form design.
    /// </summary>
    public void updateDesign()
    {
        boolean isCatchWeight;
        boolean allowEdit       = true;

        if (BOMParameters::find().BlockEditing && bom.bomTable().isApproved())
        {
            allowEdit = false;
        }

        isCatchWeight   = PdsGlobal::pdsIsCWItem(bom.ItemId);

        super();

        if (this.isFormulaEnabled())
        {
            this.enableDSField(fieldnum(PmfBOMStep, bomQty), !isCatchWeight && allowEdit);
            this.enableDSField(fieldnum(PmfBOMStep, PdsCWQty), isCatchWeight && allowEdit);
            this.parmFormDataSource(FormDataUtil::getFormDataSource(buffer));
        }
        else
        {
            this.visibleDSField(fieldnum(PmfBOMStep, PdsCWQty), false);
        }

        this.parmFormDataSource(FormDataUtil::getFormDataSource(buffer)).refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsCWFormCtrl_BOMTable_BOMStep construct()
    {
        return new PdsCWFormCtrl_BOMTable_BOMStep();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    public static PdsCWFormCtrl_BOMTable_BOMStep newFromForm(FormRun _formRun)
    {
        PdsCWFormCtrl_BOMTable_BOMStep formCtrl = PdsCWFormCtrl_BOMTable_BOMStep::construct();

        formCtrl.parmFormRun(_formRun);
        formCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
            [[fieldnum(PmfBOMStep,BOMQty),
                  fieldnum(PmfBOMStep,PdsCWQty)]]
            ));
        formCtrl.parmItemFieldId(fieldnum(BOM,ItemId));
        formCtrl.parmUnitFieldId(fieldNum(bom, UnitID));

        return formCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>