<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendJournalPrintOutInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendJournalPrintOutInvoice
{
    LedgerJournalTrans ledgerJournalTrans;
    VendInvoiceJour vendInvoiceJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUpProforma</Name>
				<Source><![CDATA[
    void cleanUpProforma()
    {
        VendInvoiceTrans vendInvoiceTrans;

        delete_from vendInvoiceTrans
        index hint InvoiceIdx
        where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId &&
              vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId &&
              vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate;

        vendInvoiceJour.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProforma</Name>
				<Source><![CDATA[
    void createProforma()
    {
        VendInvoiceTrans vendInvoiceTrans;

        ttsbegin;

        vendInvoiceJour.clear();
        vendInvoiceJour.initValue();
        vendInvoiceJour.initFromLedgerJournalTrans(ledgerJournalTrans);
        vendInvoiceJour.InvoiceId = ledgerJournalTrans.DocumentNum;
        vendInvoiceJour.Proforma = NoYes::Yes;

        if (!vendInvoiceJour.InvoiceId)
        {
            vendInvoiceJour.InvoiceId = strfmt('#%1', ledgerJournalTrans.RecId);
        }

        vendInvoiceJour.insert();

        vendInvoiceTrans.clear();
        vendInvoiceTrans.initFromVendInvoiceJour(vendInvoiceJour);
        vendInvoiceTrans.initFromLedgerJournalTrans(ledgerJournalTrans);

        vendInvoiceTrans.LineAmount = ledgerJournalTrans.amount();

        if (ledgerJournalTrans.ledgerJournalTable().LedgerJournalInclTax)
        {
            vendInvoiceTrans.LineAmount = vendInvoiceTrans.LineAmount - vendInvoiceJour.SumTax;
        }

        if (!ledgerJournalTrans.Prepayment)
        {
            vendInvoiceTrans.LineAmount = vendInvoiceTrans.LineAmount * -1;
        }

        vendInvoiceTrans.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetter</Name>
				<Source><![CDATA[
    protected PurchFormLetter_Invoice initFormLetter()
    {
        return PurchFormLetter_Invoice::newInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOk</Name>
				<Source><![CDATA[
    boolean printOk(PurchFormLetter _purchFormLetter)
    {
        return PurchFormLetter::callPrintersettingsFormletter(_purchFormLetter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOut</Name>
				<Source><![CDATA[
    void printOut(NoYes proforma = NoYes::Yes,
                  RecordSortedList recordSortedList = null,
                  NoYes copy = NoYes::No)
    {
        PurchFormLetter_Invoice purchFormLetter = this.initFormLetter();
        FormletterProformaPrint formletterProformaPrint;
        RecordSortedList journalList;
        PurchInvoiceJournalPrint purchInvoiceJournalPrint;

        // <GEERU>
        TaxCalculation taxCalculation;
        // </GEERU>
        #ISOCountryRegionCodes

        if (!this.printOk(purchFormLetter))
        {
            return;
        }

        if (proforma)
        {
            ttsbegin;
        }

        purchFormLetter.proforma(proforma);
        purchFormLetter.createParmUpdateFromParmUpdateRecord(PurchFormletterParmData::initpurchParmUpdateFormletter(purchFormLetter.documentStatus(),purchFormLetter.pack()));
        purchFormLetter.initParameters(purchFormLetter.purchParmUpdate(), Printout::Current);

        journalList = new RecordSortedList(tablenum(VendInvoiceJour));
        journalList.sortOrder(fieldnum(VendInvoiceJour, RecId));

        recordSortedList.first(ledgerJournalTrans);
        purchInvoiceJournalPrint = FormletterJournalPrint::newFromFormletterContract(purchFormLetter.getContract());

        while (ledgerJournalTrans)
        {
            this.createProforma();
            formletterProformaPrint = FormletterProformaPrint::construct();
            // <GEERU>
            taxCalculation = LedgerJournalTrans::getTaxInstance(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice, false, ledgerJournalTrans);
            formletterProformaPrint.parmTax(taxCalculation);
            formletterProformaPrint.parmExchRate_W (taxCalculation.exchRate());
            formletterProformaPrint.parmExchRateSec_W(taxCalculation.exchRateSecondary());
            // </GEERU>
            formletterProformaPrint.writeTmpTaxWorkTrans(vendInvoiceJour.RecId);
            formletterProformaPrint.parmJournalTmpTaxWorkTrans().copyFromTax(
                taxCalculation,
                vendInvoiceJour.RecId,
                vendInvoiceJour.TableId);
            purchInvoiceJournalPrint.parmFormletterProformaPrintPacked(formletterProformaPrint.pack());

            journalList.ins(vendInvoiceJour);

            if (!recordSortedList.next(ledgerJournalTrans))
            {
                break;
            }
        }

        if (journalList.len())
        {
            vendInvoiceJour.printJournal(purchInvoiceJournalPrint,
                                         journalList);

            if (!proforma
                && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
            {
                using (EInvoiceContext_IT eInvoiceContext = EInvoiceContext_IT::instance())
                {
                    eInvoiceContext.parmCheckERDestinationExists(true);
                    EInvoice_IT::exportXMLToSharePoint(vendInvoiceJour.RecId, tableNum(VendInvoiceJour));
                }
            }
        }

        journalList.first(vendInvoiceJour);

        while (vendInvoiceJour)
        {
            if (vendInvoiceJour.isProforma())
            {
                this.cleanUpProforma();
            }

            if (!journalList.next(vendInvoiceJour))
            {
                break;
            }
        }

        purchFormLetter.endUpdate();

        if (proforma)
        {
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        LedgerJournalTrans ledgerJournalTrans;
        VendJournalPrintOutInvoice vendJournalPrintOutInvoice = new VendJournalPrintOutInvoice();
        RecordSortedList recordSortedList = new RecordSortedList(ledgerJournalTrans.TableId);

        ledgerJournalTrans = args.record();
        recordSortedList.ins(ledgerJournalTrans);

        vendJournalPrintOutInvoice.printOut(args.parmEnum(), recordSortedList, NoYes::No);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>