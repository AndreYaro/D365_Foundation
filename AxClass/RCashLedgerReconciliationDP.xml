<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashLedgerReconciliationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RCashLedgerReconciliationDP</c> class handles
/// the business logic for the <c>RCashLedgerReconciliation</c> report.
/// </summary>
[
    SRSReportQuery(queryStr(RCashLedgerReconciliation)),
    SRSReportParameterAttribute(classStr(RCashLedgerReconciliationContract))
]
public class rCashLedgerReconciliationDP extends SRSReportDataProviderBase
{
    RCashTrans                          rCashTrans;
    RCashTable                          rCashTable;
    DimensionAttributeValueCombination  dimensionAttributeValueCombination;
    MainAccount                         mainAccount;
    LedgerEntry                         ledgerEntry;
    GeneralJournalAccountEntry          accountEntry;
    GeneralJournalEntry                 entry;
    SubledgerVoucherGeneralJournalEntry voucherEntry;
    RCashLedgerReconciliationTmp        rCashLedgerReconciliationTmp;
    RCashAccount                        cashAccount;
    StartDate                           startDate;
    ToDate                              toDate;
    boolean                             specification;
    boolean                             zeroBalance;
    boolean                             mainAccountOnly;
    AmountCur                           ledgerTotal;
    DimensionAttributeLevelValueView    dimAttrLevelValueView;
    Map                                 ledgerBalances;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRCashLedgerReconciliationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>RCashLedgerReconciliationTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// <c>RCashLedgerReconciliationTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSet(tableStr(RCashLedgerReconciliationTmp))
    ]
    public RCashLedgerReconciliationTmp getRCashLedgerReconciliationTmp()
    {
        return rCashLedgerReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRCashLedgerReconciliationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into <c>RCashLedgerReconciliationTmp</c> temporary table.
    /// </summary>
    /// <param name="_specification">
    /// Get and set specification parameter value.
    /// </param>
    /// <param name="_zero">
    /// Get and set zero balance parameter value.
    /// </param>
    private void insertRCashLedgerReconciliationTmp(boolean _specification, boolean _zero)
    {
        DimensionAttributeLevelValueView    dimAttributeLevelValueView;
        MainAccountLedgerDimensionView      mainAccountLedgerDimensionView;

        select MainAccount,
            FullyQualifiedAccount,
            MainAccountRecId
         from mainAccountLedgerDimensionView
            where mainAccountLedgerDimensionView.LedgerDimensionId == rCashTrans.LedgerDimension;

        select sum(AccountingCurrencyAmount)
        from accountEntry
            exists join entry
                where   entry.RecId == accountEntry.GeneralJournalEntry
            exists join voucherEntry
                where voucherEntry.GeneralJournalEntry   == entry.RecId
                    && voucherEntry.Voucher              == rCashTrans.Voucher
                    && voucherEntry.AccountingDate       == rCashTrans.TransDate
            exists join dimAttributeLevelValueView
                where dimAttributeLevelValueView.ValueCombinationRecId == accountEntry.LedgerDimension
                    && dimAttributeLevelValueView.DisplayValue         == dimAttrLevelValueView.DisplayValue
                    && dimAttributeLevelValueView.DimensionAttribute   == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        rCashLedgerReconciliationTmp.MainAccountId          = mainAccountLedgerDimensionView.MainAccount;
        rCashLedgerReconciliationTmp.FullyQualifiedAccount  = mainAccountLedgerDimensionView.FullyQualifiedAccount;
        rCashLedgerReconciliationTmp.AccountName            = MainAccount::getLocalizedName(mainAccountLedgerDimensionView.MainAccountRecId);
        rCashLedgerReconciliationTmp.Name                   = rCashTable.AccountNum;
        rCashLedgerReconciliationTmp.Voucher                = rCashTrans.Voucher;
        rCashLedgerReconciliationTmp.Transdate              = rCashTrans.TransDate;
        rCashLedgerReconciliationTmp.LedgerBalance01        = rCashTrans.AmountMST;
        rCashLedgerReconciliationTmp.LedgerBalance02        = rCashTrans.DocType == RCashDocType::ExchRateDifference ?
                                                              - accountEntry.AccountingCurrencyAmount : accountEntry.AccountingCurrencyAmount;
        rCashLedgerReconciliationTmp.LedgerBalance03        = rCashLedgerReconciliationTmp.LedgerBalance02 - rCashTrans.AmountMST;
        if (ledgerBalances && ledgerBalances.exists(mainAccountLedgerDimensionView.MainAccount))
            rCashLedgerReconciliationTmp.LedgerBalance      = ledgerBalances.lookup(mainAccountLedgerDimensionView.MainAccount);
        else
            rCashLedgerReconciliationTmp.LedgerBalance      = 0.00;
        rCashLedgerReconciliationTmp.LedgerBalanceTotal     = ledgerTotal;

        if (_specification
            || (! _specification
                && (_zero
                    || (! _zero
                        && rCashLedgerReconciliationTmp.LedgerBalance03))))
        {
            rCashLedgerReconciliationTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        RCashLedgerReconciliationContract contract = this.parmDataContract() as RCashLedgerReconciliationContract;

        cashAccount     = contract.parmRCashAccount();
        startDate       = contract.parmStartDate();
        toDate          = contract.parmToDate() ? contract.parmToDate() : dateMax();
        specification   = contract.parmSpecification() == RCashReportSpecification::Balances;
        zeroBalance     = contract.parmZeroBalance();
        mainAccountOnly = contract.parmMainAccountOnly();

        if (specification)
        {
            ledgerBalances = new Map(Types::String, Types::Real);
        }
        QueryRun qr = new QueryRun(this.parmQuery());

        while (qr.next())
        {
            rCashTable = qr.get(tableNum(RCashTable));

            if (specification)
            {
                while select
                        sum(AmountMST),
                        AccountNum,
                        Voucher,
                        TransDate,
                        LedgerDimension
                    from rCashTrans
                        group by AccountNum,
                            TransDate,
                            Voucher,
                            LedgerDimension
                        where rCashTrans.AccountNum   == rCashTable.AccountNum
                            && rCashTrans.TransDate   >= startDate
                            && rCashTrans.TransDate   <= toDate
                            && rCashTrans.TransStatus != RCashTransStatus::Canceled
                    join DisplayValue
                    from dimAttrLevelValueView
                        group by DisplayValue
                        where dimAttrLevelValueView.ValueCombinationRecId == rCashTrans.LedgerDimension
                            && dimAttrLevelValueView.DimensionAttribute   == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                {
                    mainAccount = MainAccount::findByMainAccountId(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(rCashTrans.LedgerDimension));

                    if (mainAccount && !ledgerBalances.exists(mainAccount.MainAccountId))
                    {
                        AmountCur balance = mainAccount.calculateBalance(dateNull(), toDate, FiscalPeriodType::Opening);

                        ledgerBalances.insert(mainAccount.MainAccountId, balance);
                        ledgerTotal += balance;
                    }

                    this.insertRCashLedgerReconciliationTmp(specification, zeroBalance);
                }
            }
            else
            {
                while select
                        sum(AmountMST),
                        AccountNum,
                        Voucher,
                        TransDate,
                        LedgerDimension
                    from rCashTrans
                        where rCashTrans.AccountNum   == rCashTable.AccountNum
                            && rCashTrans.TransDate   >= startDate
                            && rCashTrans.TransDate   <= toDate
                            && rCashTrans.TransStatus != RCashTransStatus::Canceled
                    join DisplayValue
                    from dimAttrLevelValueView
                        group by dimAttrLevelValueView.DisplayValue,
                            rCashTrans.TransDate,
                            rCashTrans.AccountNum,
                            rCashTrans.Voucher,
                            rCashTrans.LedgerDimension
                        where dimAttrLevelValueView.ValueCombinationRecId == rCashTrans.LedgerDimension
                            && dimAttrLevelValueView.DimensionAttribute   == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                {
                    this.insertRCashLedgerReconciliationTmp(specification, zeroBalance);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>