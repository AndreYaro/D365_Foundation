<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDiscountValidationPeriodHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using System.Collections.Generic;

/// <summary>
/// A class provides some helper methods used by RetailDiscountValidationPeriod form.
/// </summary>
internal final class RetailDiscountValidationPeriodHelper
{
    private readonly static int daysPerWeek = 7;
    private readonly static int secondsPerDay = 24 * 60 * 60;
    private readonly static int secondsPerWeek = 7 * 24 * 60 * 60;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDiagnosticsString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a diagnostic string showing details of all active time ranges during a week.
    /// </summary>
    /// <param name = "_retailDiscountValidationPeriod">A record of RetailDiscountValidationPeriod table</param>
    /// <returns>The string</returns>
    internal static str getDiagnosticsString(RetailDiscountValidationPeriod _retailDiscountValidationPeriod)
    {
        List activeTimeRanges = RetailDiscountValidationPeriodHelper::getTimeRanges(_retailDiscountValidationPeriod);
        List orderedActiveTimeRanges = RetailDiscountValidationPeriodHelper::getOrderedTimeRanges(activeTimeRanges);
        return RetailDiscountValidationPeriodHelper::getDiagnosticsStringByTimeRanges(orderedActiveTimeRanges);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimeRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of time ranges (in seconds) from a record of RetailDiscountValidationPeriod table.
    /// </summary>
    /// <param name = "_retailDiscountValidationPeriod">A record of RetailDiscountValidationPeriod table</param>
    /// <returns>A list of time ranges</returns>
    internal static List getTimeRanges(RetailDiscountValidationPeriod _retailDiscountValidationPeriod)
    {
        List activeTimeRanges = new List(Types::AnyType);
        DictTable dictTable = new DictTable(tableNum(RetailDiscountValidationPeriod));
        for (int weekdayTab = 0; weekdayTab < RetailDiscountValidationPeriodHelper::daysPerWeek; weekdayTab++)
        {
            str weekdayName = dayName(weekdayTab+1);
            // Existing typo in column names.
            if (weekdayName == "Tuesday")
            {
                weekdayName = "Thuesday";
            }

            TimeOfDay startTime = _retailDiscountValidationPeriod.(dictTable.Fieldname2id(weekdayName + "StartingTime"));
            TimeOfDay endTime = _retailDiscountValidationPeriod.(dictTable.Fieldname2id(weekdayName + "EndingTime"));
            NoYes endTimeAfterMidnight = _retailDiscountValidationPeriod.(dictTable.Fieldname2id(weekdayName + "EndingTimeAfterMidnight"));
            NoYes timeWithinBounds = _retailDiscountValidationPeriod.(dictTable.Fieldname2id(weekdayName + "TimeWithinBounds"));

            if (startTime || endTime)
            {
                int dayStartTime = RetailDiscountValidationPeriodHelper::secondsPerDay * weekdayTab;
                int dayEndTime = RetailDiscountValidationPeriodHelper::secondsPerDay * (weekdayTab + 1);
                int nextDayEndTime = RetailDiscountValidationPeriodHelper::secondsPerDay * (weekdayTab + 2);
                int periodStartTime = RetailDiscountValidationPeriodHelper::secondsPerDay * weekdayTab + startTime;
                int periodEndTime = RetailDiscountValidationPeriodHelper::secondsPerDay * (weekdayTab + endTimeAfterMidnight) + endTime;
                
                
                if (timeWithinBounds)
                {
                    if (endTimeAfterMidnight == NoYes::Yes)
                    {
                        activeTimeRanges.addEnd([periodStartTime, dayEndTime]);
                        activeTimeRanges.addEnd([dayEndTime mod RetailDiscountValidationPeriodHelper::secondsPerWeek, periodEndTime mod RetailDiscountValidationPeriodHelper::secondsPerWeek]);
                    }
                    else
                    {
                        activeTimeRanges.addEnd([periodStartTime, periodEndTime]);
                    }
                }
                else
                {
                    if (endTimeAfterMidnight == NoYes::Yes)
                    {
                        activeTimeRanges.addEnd([dayStartTime, periodStartTime]);
                        activeTimeRanges.addEnd([periodEndTime mod RetailDiscountValidationPeriodHelper::secondsPerWeek, nextDayEndTime mod RetailDiscountValidationPeriodHelper::secondsPerWeek]);
                    }
                    else
                    {
                        activeTimeRanges.addEnd([dayStartTime, periodStartTime]);
                        activeTimeRanges.addEnd([periodEndTime, dayEndTime]);
                    }
                }
            }
        }

        return activeTimeRanges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderedTimeRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of non-overlapping ordered time ranges from a list of time ranges.
    /// </summary>
    /// <param name = "activeTimeRanges">A list of time ranges</param>
    /// <returns>The list of non-overlapping ordered time ranges</returns>
    internal static List getOrderedTimeRanges(List activeTimeRanges)
    {
        List orderedActiveTimeRanges = new List(Types::AnyType);

        SortedList timePoints = new SortedList();
        ListEnumerator e = activeTimeRanges.getEnumerator();
        while (e.moveNext())
        {
            if (!timePoints.ContainsKey(conPeek(e.current(), 1)))
            {
                timePoints.Add(conPeek(e.current(), 1), conPeek(e.current(), 1));
            }
            if (!timePoints.ContainsKey(conPeek(e.current(), 2)))
            {
                timePoints.Add(conPeek(e.current(), 2), conPeek(e.current(), 2));
            }
        }
        for (int i = 0; i <= RetailDiscountValidationPeriodHelper::daysPerWeek; i++)
        {
            if (!timePoints.ContainsKey(RetailDiscountValidationPeriodHelper::secondsPerDay * i))
            {
                timePoints.Add(RetailDiscountValidationPeriodHelper::secondsPerDay * i, RetailDiscountValidationPeriodHelper::secondsPerDay * i);
            }
        }

        for (int i = 0; i < timePoints.Count - 1; i++)
        {
            int startTime = timePoints.GetByIndex(i);
            int endTime = timePoints.GetByIndex(i + 1);
            boolean isActive = false;
            e = activeTimeRanges.getEnumerator();
            while (e.moveNext())
            {
                if (conPeek(e.current(), 1) <= startTime && endTime <= conPeek(e.current(), 2))
                {
                    isActive = true;
                    break;
                }
            }
            if (isActive)
            {
                orderedActiveTimeRanges.addEnd([startTime, endTime]);
            }
        }
        return orderedActiveTimeRanges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiagnosticsStringByTimeRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a diagnostic string showing details of all active time ranges during a week.
    /// </summary>
    /// <param name = "orderedActiveTimeRanges">A list of non-overlapping ordered time ranges</param>
    /// <returns>The string</returns>
    internal static str getDiagnosticsStringByTimeRanges(List orderedActiveTimeRanges)
    {
        str result = "";
        int currentTimeRangeStartTime = 0;
        int currentTimeRangeEndTime = 0;
        orderedActiveTimeRanges.addEnd([maxInt(), maxInt()]);
        ListEnumerator e = orderedActiveTimeRanges.getEnumerator();
        while (e.moveNext())
        {
            if (conPeek(e.current(), 1) <= currentTimeRangeEndTime)
            {
                currentTimeRangeEndTime = conPeek(e.current(), 2);
            }
            else
            {
                if (currentTimeRangeStartTime < currentTimeRangeEndTime)
                {
                    result +=
                            dayName(currentTimeRangeStartTime div RetailDiscountValidationPeriodHelper::secondsPerDay + 1)
                            + " "
                            + time2Str(currentTimeRangeStartTime mod RetailDiscountValidationPeriodHelper::secondsPerDay, TimeSeparator::Colon, TimeFormat::AMPM)
                            + " - "
                            + dayName(currentTimeRangeEndTime div RetailDiscountValidationPeriodHelper::secondsPerDay + 1)
                            + " "
                            + time2Str(currentTimeRangeEndTime mod RetailDiscountValidationPeriodHelper::secondsPerDay, TimeSeparator::Colon, TimeFormat::AMPM)
                            + "\n";
                }
                currentTimeRangeStartTime = conPeek(e.current(), 1);
                currentTimeRangeEndTime = conPeek(e.current(), 2);
            }
        }
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>