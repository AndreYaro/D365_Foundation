<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqForecastReduceQueryFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>ReqForecastReduceQueryFactory</c> provides queries that can be used by the forecast reduction algorithm to fetch requirement transactions.
/// </summary>
class ReqForecastReduceQueryFactory
{
    ReqTransCache       reqTransCache;
    ForecastTableType   forecastType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateExcludedRefTypes</Name>
				<Source><![CDATA[
    protected void populateExcludedRefTypes(Set _excludedRefTypes)
    {
        _excludedRefTypes.add(ReqRefType::None);
        _excludedRefTypes.add(ReqRefType::SafetyInvent);
        _excludedRefTypes.add(ReqRefType::InventOnHand);
        _excludedRefTypes.add(ReqRefType::BOMPlannedOrder);
        _excludedRefTypes.add(ReqRefType::PmfPlannedProdBatch);
        _excludedRefTypes.add(ReqRefType::ItemPlannedOrder);
        _excludedRefTypes.add(ReqRefType::TransferPlannedOrder);
        _excludedRefTypes.add(ReqRefType::PlannedKanban);
        _excludedRefTypes.add(ReqRefType::SalesForecast);
        _excludedRefTypes.add(ReqRefType::Quarantine);

        if (forecastType == ForecastTableType::Demand)
        {
            _excludedRefTypes.add(ReqRefType::Purch);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilterRefType</Name>
				<Source><![CDATA[
    protected ReqRefType getFilterRefType(ReqSetupDim _setupDim)
    {
        ReqRefType filterRefType;

        if (forecastType == ForecastTableType::Demand)
        {
            filterRefType = ReqRefType::Sales;
        }
        else
        {
            switch (_setupDim.plannedOrderTypeReq())
            {
                case ReqRefType::ItemPlannedOrder:
                    filterRefType = ReqRefType::Purch;
                    break;

                case ReqRefType::BOMPlannedOrder:
                case ReqRefType::PmfPlannedProdBatch:
                    filterRefType = ReqRefType::Production;
                    break;

                case ReqRefType::TransferOrderReceive:
                case ReqRefType::InventTransfer:
                    filterRefType = ReqRefType::TransferPlannedOrder;
                    break;

                case ReqRefType::PlannedKanban:
                    filterRefType = ReqRefType::Kanban;
                    break;
            }
        }

        return filterRefType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReduceTransactionsRanges</Name>
				<Source><![CDATA[
        /// <summary>
        /// Adds ranges so that the query only retrieves transactions that can reduce a given type of forecast
        /// for a specific item/item coverage per dimension pair.
        /// </summary>
        /// <param name="_query">
        /// The <c>Query</c> object to add ranges to.
        /// </param>
        /// <param name="_setupDim">
        /// The <c>ReqSetupDim</c> object that contains the item coverage settings for a given item and inventory dimension.
        /// </param>
        public void addReduceTransactionsRanges(
        Query               _query,
        ReqSetupDim         _setupDim)
    {
        QueryBuildDataSource    reqTrans_ds;
        Set                     excludedRefTypes = new Set(Types::Enum);
        SetEnumerator           setEnumerator;
        str                     excludedRefTypesRange;

        reqTrans_ds = _query.dataSourceTable(tableNum(ReqTrans));

        this.populateExcludedrefTypes(excludedRefTypes);
        setEnumerator = excludedRefTypes.getEnumerator();

        while (setEnumerator.moveNext())
        {
            if (strLen(excludedRefTypesRange) > 0)
            {
                excludedRefTypesRange += ' && ';
            }

            excludedRefTypesRange += strFmt('(%1.%2 != %3)',
                reqTrans_ds.name(),
                fieldStr(ReqTrans, RefType),
                queryValue(enum2int(setEnumerator.current())));
        }
        reqTrans_ds.addRange(fieldNum(ReqTrans, TableId)).value(excludedRefTypesRange);

        if (_setupDim.forecastReducedBy() == ReqForecastReducedBy::All)
        {
            return;
        }

        ReqRefType filterRefType = this.getFilterRefType(_setupDim);

        if (filterRefType == ReqRefType::None)
        {
            return;
        }
        reqTrans_ds.addRange(fieldNum(ReqTrans, RefType)).value(queryValue(filterRefType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransDateRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges so that the query only retrieves transactions within specified dates
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object to add ranges to.
    /// </param>
    /// <param name="_fromDate">
    /// The beggining date of the period
    /// </param>
    /// <param name="_toDate">
    /// The end date of the period
    /// </param>
    /// <returns>
    /// A <c>Query</c> object that only retrieves transactions within specified dates
    /// </returns>
    public Query addTransDateRanges(Query _query, TransDate _fromDate, TransDate _toDate)
    {
        QueryBuildDataSource ds = _query.dataSourceTable(tableNum(ReqTrans));
        ds.addRange(fieldNum(ReqTrans, ReqDate)).value(strFmt('((%3.%4 >= %1) && (%3.%4 <= %2))', Date2StrXpp(_fromDate), Date2StrXpp(_toDate), ds.name(), fieldStr(ReqTrans, ReqDate)));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForecastReqTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a query used to retrieve the forecast requierement trasactions.
    /// </summary>
    /// <param name="_setupDim">
    ///    A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory
    ///    dimension.
    /// </param>
    /// <returns>
    ///    A query that can be used to fetch the forecast requirement transactions.
    /// </returns>
    protected Query getForecastReqTransQuery(ReqSetupDim _setupDim)
    {
        Query result;

        switch (forecastType)
        {
            case ForecastTableType::Supply:
                result = reqTransCache.receiptsQuery(_setupDim.setup().itemId(), _setupDim.parmCovInventDimId());
                break;

            case ForecastTableType::Demand:
                result = reqTransCache.issuesQuery(_setupDim.setup().itemId(), _setupDim.parmCovInventDimId());
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForecastTransactionsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query that can retrieve forecast transactions for the given forecast type and item coverage settings.
    /// </summary>
    /// <param name="_setupDim">
    ///    A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory
    ///    dimension.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object that retrieves the actual requirement transactions from the database.
    /// </returns>
    public Query getForecastTransactionsQuery(ReqSetupDim _setupDim)
    {
        Query query = this.getForecastReqTransQuery(_setupDim);
        QueryBuildDataSource reqTrans_ds = query.dataSourceTable(tableNum(ReqTrans));

        switch (forecastType)
        {
            case ForecastTableType::Supply:
                reqTrans_ds.addRange(fieldNum(ReqTrans, IsForecastPurch)).value(queryValue(NoYes::Yes));
                break;

            case ForecastTableType::Demand:
                reqTrans_ds.addRange(fieldNum(ReqTrans, RefType)).value(queryValue(ReqRefType::SalesForecast));
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReduceTransactionsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query that can retrieve transactions that reduce forecast for the given forecast type and item coverage settings.
    /// </summary>
    /// <param name="_setupDim">
    ///    A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory
    ///    dimension.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object that retrieves the actual requirement transactions from the database.
    /// </returns>
    public Query getReduceTransactionsQuery(ReqSetupDim _setupDim)
    {
        Query query = this.getForecastReqTransQuery(_setupDim);

        // add the ranges so that we only retrieve transactions that can reduce forecast
        this.addReduceTransactionsRanges(query, _setupDim);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastType</Name>
				<Source><![CDATA[
    protected ForecastTableType parmForecastType(ForecastTableType _forecastType = forecastType)
    {
        forecastType = _forecastType;
        return forecastType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqTransCache</Name>
				<Source><![CDATA[
    protected ReqTransCache parmReqTransCache(ReqTransCache _reqTransCache = reqTransCache)
    {
        reqTransCache = _reqTransCache;
        return reqTransCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ReqForecastReduceQueryFactory construct()
    {
        return new ReqForecastReduceQueryFactory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ReqForecastReduceQueryFactory</c> class.
    /// </summary>
    /// <param name="_reqTransCache">
    ///    A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_forecastType">
    ///    A <c>ForecastTableType</c> enumeration value that determines if the forecast reduction is regarding
    ///    a demand forecast or a supply forecast.
    /// </param>
    /// <returns>
    /// A new <c>ReqForecastReduceQueryFactory</c> instance.
    /// </returns>
    public static ReqForecastReduceQueryFactory newStandard(
        ReqTransCache       _reqTransCache,
        ForecastTableType   _forecastType)
    {
        ReqForecastReduceQueryFactory forecastReduceQueryFactory = ReqForecastReduceQueryFactory::construct();

        forecastReduceQueryFactory.parmReqTransCache(_reqTransCache);
        forecastReduceQueryFactory.parmForecastType(_forecastType);

        return forecastReduceQueryFactory;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>