<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCountingReasonCodePolicySearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class performs the search for counting reason code policy for the given item or location.
/// </summary>
public class InventCountingReasonCodePolicySearch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultListOfSearchProcessors</Name>
				<Source><![CDATA[
    protected List defaultListOfSearchProcessors()
    {
        List searchProcessors = new List(Types::Class);

        searchProcessors.addEnd(InventCountingReasonCodePolicySearchProcessorItem::construct());
        searchProcessors.addEnd(InventCountingReasonCodePolicySearchProcessorWarehouse::construct());

        return searchProcessors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the counting reason code policy search.
    /// </summary>
    /// <param name = "_parameters">
    /// The parameters on which the search should be performed.
    /// </param>
    /// <param name = "_listOfSearchProcessors">
    /// The list of search processors.
    /// </param>
    /// <returns>
    /// The <c>InventCountingReasonCodePolicy</c> record, if no record is found an empty buffer is returned.
    /// </returns>
    public InventCountingReasonCodePolicy search(InventCountingReasonCodePolicySearchParameters _parameters, List _listOfSearchProcessors)
    {
        InventCountingReasonCodePolicy inventCountingReasonCodePolicy;
        ListEnumerator                 listEnumerator = _listOfSearchProcessors.getEnumerator();

        while (!inventCountingReasonCodePolicy && listEnumerator.moveNext())
        {
            InventICountingReasonCodePolicySearchProcessor processor = listEnumerator.current();
            inventCountingReasonCodePolicy = processor.search(_parameters);
        }

        return inventCountingReasonCodePolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the counting reason code policy search.
    /// </summary>
    /// <param name = "_parameters">
    /// The parameters on which the search should be performed.
    /// </param>
    /// <returns>
    /// The matching <c>InventCountingReasonCodePolicy</c> record, if no record is found an empty buffer is returned.
    /// </returns>
    public static InventCountingReasonCodePolicy defaultSearch(InventCountingReasonCodePolicySearchParameters _parameters)
    {
        InventCountingReasonCodePolicySearch inventCountingReasonCodePolicySearch = InventCountingReasonCodePolicySearch::construct();
        List                                 processors                           = inventCountingReasonCodePolicySearch.defaultListOfSearchProcessors();

        return inventCountingReasonCodePolicySearch.search(_parameters, processors);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCountingReasonCodePolicySearch construct()
    {
        InventCountingReasonCodePolicySearch inventCountingReasonCodePolicySearch;

        return new inventCountingReasonCodePolicySearch();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>