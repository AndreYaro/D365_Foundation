<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResValidateAndSubmitAssignmentRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to validate and submit hard assignment request submission.
/// </summary>
class ResValidateAndSubmitAssignmentRequest
{
    List                 schedulesList;
    ResTmpRollUpResource tmpSoftAssigned;
    utcdatetime          assignmentCreationTimeIdentifier;
    boolean              rollupRunAsync;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getUserFeedBackOnCreatingResourceRequest</Name>
				<Source><![CDATA[
    private boolean getUserFeedBackOnCreatingResourceRequest(activityresourcerecid _activityResource, utcdatetime _startTime, utcdatetime _endTime)
    {
        // Get user feedback on creating resource request by launching yes no message box.
        boolean hasBookingHours = ActivityResourceFacade::hasBookingByTimeFrame(_activityResource, _startTime, _endTime, ResCommitType::HardBook, AVTimeframeType::Day);
        ResResourceName resourceName = ActivityResourceFacade::getName(_activityResource);
        str message;
        if (hasBookingHours)
        {
            message = strFmt("@Res:InsufficientHardBookingForHardAssignment", resourceName);
        }
        else
        {
            message = strFmt("@Res:NoHardBookingForHardAssignment", resourceName);
        }

        // Ask user if resource request should be created.
        return (Box::yesNo(message, DialogButton::Yes) == DialogButton::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAssignmentRecords</Name>
				<Source><![CDATA[
    private boolean hasAssignmentRecords(activityresourcerecid _activityResource, ActivityRecId _activity,
        utcdatetime _startTime, utcdatetime _endTime, ResCommitType _commitType)
    {
        ResAssignment resAssignment;

        // Verify if this activity resoruce has any hard assigment records.
        select firstOnly RecId from resAssignment
            where resAssignment.ActivityResource == _activityResource
                && resAssignment.Activity == _activity
                && (_commitType ==  ResCommitType::AnyType || resAssignment.CommitType == _commitType)
                && resAssignment.Hour >= _startTime
                && resAssignment.Hour <= _endTime
                && resAssignment.CreatedDateTime >= assignmentCreationTimeIdentifier;

        return resAssignment ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssignmentHardToSoftRecords</Name>
				<Source><![CDATA[
    private void updateAssignmentHardToSoftRecords(activityresourcerecid _activityResource,
        ActivityRecId _activity, utcdatetime _startTime, utcdatetime _endTime)
    {
        ResAssignment   resAssignment;
        ResBooking      resBooking;
        ResUtil::skipDatabaseLogAndEvent(resAssignment);

        // Update resource assignment records to soft reservaton which does not have backing booking records in the same hour.
        ttsbegin;
        update_recordset resAssignment
            setting
                CommitType = ResCommitType::SoftBook
            where resAssignment.ActivityResource == _activityResource
                && resAssignment.Activity == _activity
                && resAssignment.CommitType == ResCommitType::HardBook
                && resAssignment.Hour >= _startTime
                && resAssignment.Hour <= _endTime
                && resAssignment.CreatedDateTime >= assignmentCreationTimeIdentifier
            notexists join resBooking
            where resBooking.ActivityResource == _activityResource
                && resBooking.CommitType == ResCommitType::HardBook
                && resBooking.Hour == resAssignment.Hour;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssignmentRecords</Name>
				<Source><![CDATA[
    private void deleteAssignmentRecords(activityresourcerecid _activityResource,
        ActivityRecId _activity, utcdatetime _startTime, utcdatetime _endTime, ResCommitType _commitType)
    {
        ResAssignment   resAssignment;
        ResUtil::skipDatabaseLogAndEvent(resAssignment);

        // Delete assignment records after these records are added to ResRequestLine table.
        ttsbegin;
        delete_from resAssignment
            where resAssignment.ActivityResource == _activityResource
                && resAssignment.Activity == _activity
                && (_commitType == ResCommitType::AnyType || resAssignment.CommitType == _commitType)
                && resAssignment.Hour >= _startTime
                && resAssignment.Hour <= _endTime
                && resAssignment.CreatedDateTime >= assignmentCreationTimeIdentifier;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHardBookingRecordsToMatchHardAssignmentHours</Name>
				<Source><![CDATA[
    private void updateHardBookingRecordsToMatchHardAssignmentHours(activityresourcerecid _activityResource,
        ActivityRecId _activity, utcdatetime _startTime, utcdatetime _endTime)
    {
        ResBooking resBooking;
        ResAssignment   resAssignment;
        ResUtil::skipDatabaseLogAndEvent(resAssignment);

        ActivityRecId rootActivity = ActivityFacade::getRootProjectActivity(_activity);

        // Update booking end time to match with assignment reservation records if both reservation has reserved the same hours.
        ttsbegin;
        update_recordset resBooking
            setting End = resAssignment.End
        join resAssignment
            where resAssignment.Activity == _activity
                && resAssignment.ActivityResource == _activityResource
                && resAssignment.CommitType == ResCommitType::HardBook
                && resAssignment.Hour >= _startTime
                && resAssignment.Hour <= _endTime
                && resBooking.Activity == rootActivity
                && resBooking.ActivityResource == resAssignment.ActivityResource
                && resBooking.CommitType == ResCommitType::HardBook
                && resBooking.Hour == resAssignment.Hour
                && resBooking.Start == resAssignment.Start
                && resBooking.End < resAssignment.End;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProjectTeamResource</Name>
				<Source><![CDATA[
    private void deleteProjectTeamResource(activityresourcerecid _activityResource)
    {
        PSAProjSchedRole teamMemberToDelete = PSAProjSchedRole::findByRecId(_activityResource, true);
        if (teamMemberToDelete)
        {
            if (teamMemberToDelete.validateDelete())
            {
                // Delete project team member.
                ttsbegin;
                teamMemberToDelete.delete();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndSubmitRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the list of user choosen staffed resource hard assignment records has sufficient backing hard booked hours to this project.
    /// If not, get feedback from user whether to submit resource request for the resources hours which doesn't have sufficient hard booking hours to this project.
    /// Depends on user feedback, it can either create and submit resource request or not revert to no reservation being made.
    /// </summary>
    /// <param name = "_skipResourceFeedback">True will bypass the resoruce request creation confirmation message box and resource request submission feedback.</param>
    /// <param name="_workflowComment">This workflow comment will be applied if _skipComment is set to true.</param>
    public void validateAndSubmitRequest(boolean _skipResourceFeedback = false, WorkflowComment _workflowComment = '')
    {
        // Detect if this is a resource request schedule.
        if (ResUtil::getSchedulesCollectionDateRanges(schedulesList, tmpSoftAssigned, true))
        {
            while select ActivityResourceId, Activity, Start, End, isResourceATeamMember from tmpSoftAssigned
            {
                ActivityResourceRecId activityResource = ResUtil::getActivityResourceRecId(tmpSoftAssigned.ActivityResourceId);

                // Update resource assignment records which does not have booking records in the same hour.
                this.updateAssignmentHardToSoftRecords(activityResource, tmpSoftAssigned.Activity, tmpSoftAssigned.Start, tmpSoftAssigned.End);

                // Verify if there is any soft assignment left for this activity resource.
                boolean hasSoftAssignmentRecords = this.hasAssignmentRecords(activityResource, tmpSoftAssigned.Activity,
                    tmpSoftAssigned.Start, tmpSoftAssigned.End, ResCommitType::SoftBook);

                ResRequest request;
                if (hasSoftAssignmentRecords)
                {
                    boolean createResourceRequest = true;
                    if (!_skipResourceFeedback)
                    {
                        createResourceRequest = this.getUserFeedBackOnCreatingResourceRequest(activityResource, tmpSoftAssigned.Start, tmpSoftAssigned.End);
                    }

                    if (createResourceRequest)
                    {
                        ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResValidateAndSubmitAssignmentRequest));
                        using (SysInstrumentationActivityContext activityContext = logger.projOpsFinActivity()
                            .activityContext(ProjOpsFinancialsInstrumentationActivites::ResRequestWorkflowSubmitForAssignment))
                        {
                            // Add resource request.
                            request = ResRequestHelper::addResourceRequest();

                            // Add resource request lines.
                            ResRequestHelper::addResourceRequestLineForAssignment(request, activityResource, tmpSoftAssigned.Activity,
                                tmpSoftAssigned.Start, tmpSoftAssigned.End, ResCommitType::SoftBook, assignmentCreationTimeIdentifier);

                            // Remove soft assignment records.
                            this.deleteAssignmentRecords(activityResource, tmpSoftAssigned.Activity, tmpSoftAssigned.Start, tmpSoftAssigned.End, ResCommitType::SoftBook);
                        }
                    }
                    else
                    {
                        // Remove all assignment records.
                        this.deleteAssignmentRecords(activityResource, tmpSoftAssigned.Activity, tmpSoftAssigned.Start, tmpSoftAssigned.End, ResCommitType::AnyType);

                        // Remove the team member from this project if this resource was not a member of this project.
                        if (!tmpSoftAssigned.isResourceATeamMember)
                        {
                            this.deleteProjectTeamResource(activityResource);
                        }
                    }
                }
                else
                {
                    this.updateHardBookingRecordsToMatchHardAssignmentHours(activityResource, tmpSoftAssigned.Activity, tmpSoftAssigned.Start, tmpSoftAssigned.End);
                }

                if (request)
                {
                    // Submit workflow.
                    boolean workflowIsSubmitted = ResRequestHelper::submitWorkflow(request.RecId, workflowtypestr(ResRequest), _skipResourceFeedback, _workflowComment);

                    // If workflow is not submitted, revert those hours back to soft assignment which are specified in the request line and remove resoruce request.
                    if (!workflowIsSubmitted)
                    {
                        ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResValidateAndSubmitAssignmentRequest));
                        using (SysInstrumentationActivityContext activityContext = logger.projOpsFinActivity()
                            .activityContext(ProjOpsFinancialsInstrumentationActivites::ResRequestWorkflowRollbackRequest))
                        {
                            ResRequestHelper::rollBackResourceRequest(request, activityResource, tmpSoftAssigned.Activity, tmpSoftAssigned.Start, tmpSoftAssigned.End);

                            // Remove soft assignment records.
                            this.deleteAssignmentRecords(activityResource, tmpSoftAssigned.Activity, tmpSoftAssigned.Start, tmpSoftAssigned.End, ResCommitType::SoftBook);
                        }
                    }
                }

                // Verify if this activity resoruce has any assignment records.
                boolean hasAnyAssignmentRecords = this.hasAssignmentRecords(activityResource, tmpSoftAssigned.Activity,
                    tmpSoftAssigned.Start, tmpSoftAssigned.End, ResCommitType::AnyType);

                // If this activity resource has any assignment records, then update team info and scheduling status.
                if (hasAnyAssignmentRecords)
                {
                    ResUtil::updateTeamInfo(tmpSoftAssigned.Activity);
                }

                // If this activity resource has any assignment records, then update rollup table.
                if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()) && hasAnyAssignmentRecords)
                {
                    utcdatetime start = AVTimeframe::getTimeframe(
                        ActivityResourcefacade::getEarliestAssignmentDateTime(activityResource), AVTimeframeType::Month).start();
                    utcdatetime end = AVTimeframe::getTimeframe(
                        ActivityResourcefacade::getLatestAssignmentDateTime(activityResource), AVTimeframeType::Month).end();

                    // Update rollup records
                    if (rollupRunAsync)
                    {
                        container arguments;
                        arguments = [tmpSoftAssigned.ActivityResourceId, start, end];

                        Global::runAsync(classNum(ResRollUpWriter),
                            staticMethodStr(ResRollUpWriter, updateRollUpForSpecificActivityResourceIdAsync), arguments);
                    }
                    else
                    {
                        ResRollUpWriter::updateRollUpForSpecificActivityResourceId(
                            tmpSoftAssigned.ActivityResourceId, start, end);
                    }
                }

                // Update scheduling status
                ProjActivityCapacity::updateScheduleStatusByActivity(tmpSoftAssigned.Activity);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>ResCancelSoftReservation</c>.
    /// </summary>
    /// <param name = "_schedulesList">The schedules collection.</param>
    /// <param name = "_assignmentCreationTimeIdentifier">Time variable which is used to identifier the newly created assignment records.</param>
    /// <param name = "_rollupRunAsync">Whether to run rollup process in async.</param>
    protected void new (List _schedulesList, utcdatetime _assignmentCreationTimeIdentifier, boolean _rollupRunAsync = false)
    {
        schedulesList = _schedulesList;
        assignmentCreationTimeIdentifier = _assignmentCreationTimeIdentifier;
        rollupRunAsync = _rollupRunAsync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contructs a new instance of the the <c>ResValidateAndSubmitAssignmentRequest</c>.
    /// </summary>
    /// <param name = "_schedulesList">The schedules collection.</param>
    /// <param name = "_assignmentCreationTimeIdentifier">Time variable which is used to identifier the newly created assignment records.</param>
    /// <param name = "_rollupRunAsync">Whether to run rollup process in async.</param>
    /// <returns>Returns an instance of <c>ResValidateAndSubmitAssignmentRequest</c>.</returns>
    public static ResValidateAndSubmitAssignmentRequest construct(List _schedulesList, utcdatetime _assignmentCreationTimeIdentifier, boolean _rollupRunAsync = false)
    {
        ResValidateAndSubmitAssignmentRequest validateHardAssignment = new ResValidateAndSubmitAssignmentRequest(_schedulesList, _assignmentCreationTimeIdentifier, _rollupRunAsync);
        return validateHardAssignment;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>