<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailConnAX62SCClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailConnAX62SCClient</c> class is used to create connection to store connect, add fields and set jobs for AX62.
/// </summary>
class RetailConnAX62SCClient implements RetailConnSCClient
{
    CLRObject scClient;  // store connect client

    #RetailConn
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>AddReceiver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add receiver into store connect client.
    /// </summary>
    /// <param name="_serviceName">
    /// Name of the service used by the receiver.
    /// </param>
    /// <param name="_serverName">
    /// Name of the server to be connected by the receiver.
    /// </param>
    /// <param name="_port">
    /// Port to be used for receiving.
    /// </param>
    /// <param name="_connectionString">
    /// Connection string used for establishing connection to the server.
    /// </param>
    public void AddReceiver(str _serviceName, str _serverName, int _port, str _connectionString)
    {
        scClient.AddReceiver(_serviceName, _serverName, _port, _connectionString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates connection for store connect client.
    /// </summary>
    /// <param name="_serverName">
    /// Name of the server that needs to be connected.
    /// </param>
    /// <param name="_port">
    /// Port used for establishing connection with the Server.
    /// </param>
    /// <param name="_connectionString">
    /// Connection String used for connecting to the server.
    /// </param>
    /// <param name="_interactive">
    /// Checks whether the interactive is enabled.
    /// </param>
    /// <param name="_ipsec">
    /// Checks whether the ip sec is enabled.
    /// </param>
    /// <param name="_preferIPv6">
    /// Checks whether the _preferIPv6 is enabled.
    /// </param>
    /// <param name="_messageGuid">
    /// GUID of the message.
    /// </param>
    public void createConnection(
                str _serverName,
                int _port,
                str _connectionString,
                boolean _interactive,
                boolean _ipsec,
                boolean _preferIPv6,
                guid _messageGuid)
    {
        scClient.CreateConnection(_serverName, _port, _connectionString, _interactive, _ipsec, _preferIPv6, _messageGuid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>disconnect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disconnect connection to the store connect.
    /// </summary>
    public void disconnect()
    {
        scClient.Disconnect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of the last error.
    /// </summary>
    /// <returns>
    /// The last error number.
    /// </returns>
    public int getLastError()
    {
        return scClient.GetLastError();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPkgNo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the package number.
    /// </summary>
    /// <returns>
    /// The package number.
    /// </returns>
    public int getPkgNo()
    {
        return scClient.GetPkgNo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize Store connect client, it set AX62 SC client by default.
    /// </summary>
    void new()
    {
        scClient = new CLRObject(#SCClientCLRType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
    /// <summary>
    /// Send request to the store connect client.
    /// </summary>
    /// <param name="_workingDirectoryPath">
    /// Working directory path to store RECID data files
    /// </param>
    /// <returns>
    /// True if the request is sent succesfully; otherwise false.
    /// </returns>
    public boolean send(
                str _workingDirectoryPath)
    {
        return scClient.Send(null, _workingDirectoryPath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the job Id that needs to be run by store connect client.
    /// </summary>
    /// <param name="_jobId">
    /// The job ID value.
    /// </param>
    public void setJobId(str _jobId)
    {
        scClient.SetJobId(_jobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMsgId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the message id of data director client.
    /// </summary>
    /// <param name="_msgId">
    /// A message to be set.
    /// </param>
    public void setMsgId(str _msgId)
    {
        scClient.SetMsgId(_msgId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>