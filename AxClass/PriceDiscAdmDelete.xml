<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscAdmDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PriceDiscAdmDelete extends RunBase
{
    #DEFINE.CurrentVersion(1)

    QueryRun            queryRun;
    Counter             progressCounter;
    Counter             progressTotal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase  dialogRunbase  = super();

        dialogRunbase.addText("@SYS138664");

        dialogRunbase.addMenuItemButton(MenuItemType::Display,menuitemDisplayStr(RunBaseQueryDialog),DialogMenuItemGroup::BottomGrp);

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    protected void displayProgress(PriceDiscType _relation)
    {
        this.progressUpdate(strFmt("@SYS59007", _relation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        queryRun = new QueryRun(queryStr(PriceDiscAdmTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    protected void progressUpdate(str _text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(_text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        PriceDiscAdmTrans  priceDiscAdmTrans;

        #macrolib.AviFiles

        progressTotal = QueryRun::getQueryRowCount(queryRun.query(), intMax());

        this.progressInit("@SYS28500", progressTotal, #AviFiledelr);
        progress = this.parmProgress();

        ttsbegin;

        while (queryRun.next())
        {
            priceDiscAdmTrans = queryRun.get(priceDiscAdmTrans.TableId);
            this.displayProgress(priceDiscAdmTrans.Relation);

            priceDiscAdmTrans.delete();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer     version     = RunBase::getVersion(_packedClass);
        container   packedQueryRun;

        switch (version)
        {
            case #CurrentVersion :
                [version, packedQueryRun] = _packedClass;

                if (SysQuery::isPackedOk(packedQueryRun))
                {
                    queryRun   = new QueryRun(packedQueryRun);
                }
                else
                {
                    return false;
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void  updateQueryBuild(PriceDiscAdmTrans _priceDiscAdmTrans)
    {
        QueryBuildRange queryBuildRange;

        queryBuildRange = queryRun.query().dataSourceTable(tableNum(PriceDiscAdmTrans)).findRange(fieldNum(PriceDiscAdmTrans,JournalNum));
        queryBuildRange.value(queryValue(_priceDiscAdmTrans.JournalNum));
        queryBuildRange.status(RangeStatus::Hidden);
        queryRun.title(PriceDiscAdmDelete::description());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PriceDiscAdmDelete construct()
    {
        return new PriceDiscAdmDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS28500";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        PriceDiscAdmTrans   priceDiscAdmTrans;
        PriceDiscAdmDelete  priceDiscAdmDelete = PriceDiscAdmDelete::construct();

        if (!(args.dataset() == tableNum(PriceDiscAdmTrans)))
        {
            throw error("@SYS18626");
        }

        priceDiscAdmTrans = args.record();
        if (!priceDiscAdmTrans.JournalNum)
        {
            throw error("@SYS59008");
        }

        priceDiscAdmDelete.getLast();
        priceDiscAdmDelete.updateQueryBuild(priceDiscAdmTrans);
        if (priceDiscAdmDelete.prompt())
        {
            priceDiscAdmDelete.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>