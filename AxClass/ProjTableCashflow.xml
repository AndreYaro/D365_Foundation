<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTableCashflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>ProjTableCashflow</c> class is the implementation between project budget transactions and cash flow.
/// </summary>
[ExportMetadata(classStr(LedgerCovIDocument), tableStr(ProjTable)), ExportAttribute(identifierStr(Dynamics.AX.Application.LedgerCovIDocument))]
public final class ProjTableCashflow implements LedgerCovIDocument, LedgerCovIDocumentSingleTransactionScope
{
    private LedgerCovContext ledgerCovContext;
    private SysInstrumentationProgressLogger progressLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateCashFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates cash flow.
    /// </summary>
    /// <param name = "_allNew">
    /// Identifies when cash flow is generated for only new documents or all documents.
    /// </param>
    public void generateCashFlow(AllNew _allNew)
    {
        this.init();

        if (LedgerCovDocumentSingleTransactionScopeKillSwitchFlight::isEnabled())
        {
            this.generateCashFlowSetBased(_allNew);
        }
        else
        {
            this.deleteExistingRows();

            this.generateCashFlowForProcessSet();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        progressLogger = this.createProgressLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void generateCashFlowForProcessSet()
    {
        const int SetSize = 1000;

        ProjId lastProjId;
        ProjId fromProjId;
        ProjId toProjId;

        Query projIdQuery = this.buildProjIdQuery();
        QueryRun projIdQueryRun = new QueryRun(projIdQuery);
        int i = 0;

        while (projIdQueryRun.next())
        {
            i++;

            ProjTable projTable = projIdQueryRun.get(tableNum(ProjTable));

            ProjId projId = projTable.ProjId;

            if (i == 1)
            {
                fromProjId = projId;
            }

            if (i == SetSize)
            {
                toProjId = projId;

                this.processCashFlowForProcessSet(fromProjId, toProjId);

                i = 0;
                fromProjId = '';
                toProjId = '';
            }

            lastProjId = projId;

        }

        if (i > 0)
        {
            toProjId = lastProjId;

            this.processCashFlowForProcessSet(fromProjId, toProjId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void processCashFlowForProcessSet(ProjId _fromProjId, ProjId _toProjId)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowProject))
        {
            System.Exception exception;
            RecId projTableRecId;
            try
            {
                ProjTable projTable;
                TmpProjCashFlowExcelPivot tmpExcelExport;

                ttsbegin;
                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(projTable, NoYes::Yes);

                Query q = this.buildGenerateCashFlowQueryForSet(_fromProjId, _toProjId);
                QueryRun qr = new QueryRun(q);
                while (qr.next())
                {
                    projTable = qr.get(tableNum(ProjTable));
                    projTableRecId = projTable.RecId;
                    projTable.updateLedgerCov(ledgerCoverage, tmpExcelExport);
                }

                LedgerCov::deleteForTransTableIdAndFilter(tableNum(ProjTable), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                ledgerCoverage.insertDatabase();

                LedgerCovDocument::deleteForTransTableIdAndFilter(tableNum(ProjTable), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(ProjTable), projTableRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(ProjTable), projTableRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQueryForSet</Name>
				<Source><![CDATA[
    private Query buildGenerateCashFlowQueryForSet(ProjId _fromProjId, ProjId _toProjId)
    {
        ProjParameters projParameters = ProjParameters::find();
        Query query = this.buildGenerateCashFlowQuery(projParameters);
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(ProjTable));

        QueryBuildRange qbr = SysQuery::findOrCreateRange(qbds, fieldNum(ProjTable, ProjId));
        qbr.value(_fromProjId + '..' + _toProjId);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjIdQuery</Name>
				<Source><![CDATA[
    private Query buildProjIdQuery()
    {
        ProjParameters parameters = ProjParameters::find();
        Query query = this.buildGenerateCashFlowQuery(parameters);
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(ProjTable));

        qbds.addSelectionField(fieldNum(ProjTable, ProjId));
        qbds.addOrderByField(fieldNum(ProjTable, ProjId), SortOrder::Ascending);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerCovContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initLedgerCovContext(LedgerCovContext _ledgerCovContext)
    {
        this.ledgerCovContext = _ledgerCovContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProgressLogger</Name>
				<Source><![CDATA[
    private SysInstrumentationProgressLogger createProgressLogger()
    {
        return SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashFlowForecasting, CustVendInstrumentationConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessExecutionMessage</Name>
				<Source><![CDATA[
    private void logProcessExecutionMessage(Exception _exceptionType, SysInfoLogStr _message, URL _helpUrl = '', SysInfoAction _sysInfoAction = null)
    {
        if (ledgerCovContext != null && ledgerCovContext.parmProcessExecutionSourceLinkRecId() != 0)
        {
            ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
            messageLogItem.parmException(_exceptionType);
            messageLogItem.parmProcessExecutionSourceLink(ledgerCovContext.parmProcessExecutionSourceLinkRecId());
            messageLogItem.parmMessage(_message);

            ProcessExecutionMessageLog::insertMessage(messageLogItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingRows</Name>
				<Source><![CDATA[
    private void deleteExistingRows()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            LedgerCov::deleteForTransTableId(tableNum(ProjTable));
            LedgerCovDocument::deleteForTransTableId(tableNum(ProjTable));

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                sleep(xSession::currentRetryCount() * backOffWait);
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }

        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowSetBased</Name>
				<Source><![CDATA[
    private void generateCashFlowSetBased(AllNew _allNew)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowProject))
        {
            System.Exception exception;
            RecId projTableRecId;
            try
            {
                ProjTable projTable;
                TmpProjCashFlowExcelPivot tmpExcelExport;

                ttsbegin;

                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(projTable, NoYes::Yes);

                ProjParameters parameters = ProjParameters::find();
                if (this.isSetupConfigurationValid(parameters))
                {
                    Query q = this.buildGenerateCashFlowQuery(parameters);
                    QueryRun qr = new QueryRun(q);
                    while (qr.next())
                    {
                        projTable = qr.get(tableNum(ProjTable));
                        projTableRecId = projTable.RecId;
                        projTable.updateLedgerCov(ledgerCoverage, tmpExcelExport);
                    }
                }

                this.deleteLedgerCovRows();
                ledgerCoverage.insertDatabase();

                this.deleteLedgerCovDocumentRows();
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(ProjTable), projTableRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(ProjTable), projTableRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSetupConfigurationValid</Name>
				<Source><![CDATA[
    private boolean isSetupConfigurationValid(ProjParameters _projParameters)
    {
        boolean isSetupConfigurationValid;
    
        if (this.isProjMultipleContraceLinesFeatureEnabled()
            && this.isOneProjectTransactionTypeEnabled(_projParameters)
            && this.isForecastModelDefined(_projParameters))
        {
            isSetupConfigurationValid = true;
        }
        else if (this.isOneProjectTypeEnabled(_projParameters)
            && this.isOneProjectTransactionTypeEnabled(_projParameters)
            && this.isForecastModelDefined(_projParameters))
        {
            isSetupConfigurationValid = true;
        }

        return isSetupConfigurationValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjMultipleContraceLinesFeatureEnabled</Name>
				<Source><![CDATA[
    private boolean isProjMultipleContraceLinesFeatureEnabled()
    {
        return ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOneProjectTypeEnabled</Name>
				<Source><![CDATA[
    private boolean isOneProjectTypeEnabled(ProjParameters _projParameters)
    {
        boolean isProjectTypeEnabled;

        if (_projParameters.LedgerCovIncludeTimeAndMaterials == NoYes::Yes
            || _projParameters.LedgerCovIncludeFixedPrice == NoYes::Yes
            || _projParameters.LedgerCovIncludeInvestment == NoYes::Yes
            || _projParameters.LedgerCovIncludeInternalAndCost == NoYes::Yes)
        {
            isProjectTypeEnabled = true;
        }
                
        return isProjectTypeEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOneProjectTransactionTypeEnabled</Name>
				<Source><![CDATA[
    private boolean isOneProjectTransactionTypeEnabled(ProjParameters _projParameters)
    {
        boolean isProjectTransactionTypeEnabled;

        if (_projParameters.LedgerCovIncludeExpenses == NoYes::Yes
            || _projParameters.LedgerCovIncludeFee == NoYes::Yes
            || _projParameters.LedgerCovIncludeHour == NoYes::Yes
            || _projParameters.LedgerCovIncludeItem == NoYes::Yes
            || _projParameters.LedgerCovIncludeOnAccount == NoYes::Yes)
        {
            isProjectTransactionTypeEnabled = true;
        }

        return isProjectTransactionTypeEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForecastModelDefined</Name>
				<Source><![CDATA[
    private boolean isForecastModelDefined(ProjParameters _projParameters)
    {
        boolean isForecastModelDefined;

        if (_projParameters.LedgerCovForecastModelId != '')
        {
            isForecastModelDefined = true;
        }

        return isForecastModelDefined;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQuery</Name>
				<Source><![CDATA[
    private Query buildGenerateCashFlowQuery(ProjParameters _projParameters)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(ProjTable));

        qbds.addRange(fieldNum(ProjTable, Status)).value(queryValue(ProjStatus::InProcess));

        if (!this.isProjMultipleContraceLinesFeatureEnabled())
        {
            if (_projParameters.LedgerCovIncludeTimeAndMaterials == NoYes::Yes)
            {
                qbds.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::TimeMaterial));
            }

            if (_projParameters.LedgerCovIncludeFixedPrice == NoYes::Yes)
            {
                qbds.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::FixedPrice));
            }

            if (_projParameters.LedgerCovIncludeInvestment == NoYes::Yes)
            {
                qbds.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Investment));
            }

            if (_projParameters.LedgerCovIncludeInternalAndCost == NoYes::Yes)
            {
                qbds.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Internal));
                qbds.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Cost));
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovRows()
    {
        LedgerCov::deleteForTransTableId(tableNum(ProjTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovDocumentRows()
    {
        LedgerCovDocument::deleteForTransTableId(tableNum(ProjTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void insertLedgerCovDocumentRows(TmpDataAreaRecIdFilter _filter)
    {
        LedgerCovDocument ledgerCovDocument;
        ProjTable projTable;
        CustTable custTable;
        DirPartyTable dirPartyTable;

        TableId projTableId = tableNum(ProjTable);
        LedgerCovDocumentType documentType = LedgerCovDocumentType::Project;
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        insert_recordset ledgerCovDocument
            (TransTableId,
            TransRecId,
            TransDate,
            Type,
            AccountingCurrency,
            Number,
            AccountNumber,
            AccountName)
            select projTableId,
                RecId,
                Created,
                documentType,
                accountingCurrency,
                ProjId,
                CustAccount
                from projTable
            join _filter
                where projTable.TableId == _filter.RefTableId
                    && projTable.RecId == _filter.RefRecId
            join custTable
                where custTable.AccountNum == projTable.CustAccount
                    && projTable.CustAccount != ''
            join Name
                from dirPartyTable
                where dirPartyTable.RecId == custTable.Party;

        insert_recordset ledgerCovDocument
            (TransTableId,
            TransRecId,
            TransDate,
            Type,
            AccountingCurrency,
            Number,
            AccountNumber)
            select projTableId,
                RecId,
                Created,
                documentType,
                accountingCurrency,
                ProjId,
                CustAccount
                from projTable
            join _filter
                where projTable.TableId == _filter.RefTableId
                    && projTable.RecId == _filter.RefRecId
                    && projTable.CustAccount == '';

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The document name.
    /// </summary>
    /// <returns>The document name.</returns>
    public str getDocumentName()
    {
        return "@CashFlowManagement:ProjectForecast";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// The number of the document.
    /// </summary>
    /// <param name = "_tableId">Identifies the document table.</param>
    /// <param name = "_recId">Identifies the row of the document.</param>
    /// <returns>The number of the document.</returns>
    public Name getDocumentNum(TableId _tableId, RecId _recId)
    {
        Name documentNum;

        if (_tableId == tableNum(ProjTable))
        {
            ProjTable projTable = ProjTable::findRecId(_recId);
            documentNum = projTable.ProjId;
        }

        return documentNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>