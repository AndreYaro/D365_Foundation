<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalCalendarDividePeriodEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FiscalCalendarDividePeriodEventHandler</c> class implements an event handler for the <c>FiscalCalendarDividePeriod</c> form.
/// </summary>
public class FiscalCalendarDividePeriodEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doUnpostedRecordsExistPostHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for <c>doUnpostedRecordsExist</c> method.
    /// </summary>
    /// <param name = "_args">
    /// Pre post args.
    /// </param>
    [PostHandlerFor(formstr(FiscalCalendarDividePeriod), formMethodStr(FiscalCalendarDividePeriod, doUnpostedRecordsExist))]
    public static void doUnpostedRecordsExistPostHandler(XppPrePostArgs _args)
    {
        boolean returnValue = _args.getReturnValue();

        FiscalCalendarRecId calendarRecId = _args.getArg('_calendarRecId');
        FiscalCalendarPeriod currentPeriod = _args.getArg('_currentPeriod');

        container companyCnt = LedgerFiscalCalendar::findDataAreaIdCntForFiscalCalendar(calendarRecId);

        if (!returnValue)
        {
            // check unposted transaction in LedgerJournalTrans
            LedgerJournalTrans ledgerJournalTrans = TransactionFiscalCalendar::findUnpostedLedgerJournalTrans(currentPeriod.StartDate, currentPeriod.EndDate, companyCnt);
            if (ledgerJournalTrans.RecId)
            {
                returnValue = true;
            }
        }

        if (!returnValue)
        {
            // check unposted transaction in InventJournalTrans
            InventJournalTrans inventJournalTrans = TransactionFiscalCalendar::findUnpostedInventJournalTrans(currentPeriod.StartDate, currentPeriod.EndDate, companyCnt);
            if (inventJournalTrans.RecId)
            {
                returnValue = true;
            }
        }

        if (!returnValue)
        {
            // check unposted transaction in ProjJournalTrans
            ProjJournalTrans projJournalTrans = TransactionFiscalCalendar::findUnpostedProjJournalTrans(currentPeriod.StartDate, currentPeriod.EndDate, companyCnt);
            if (projJournalTrans.RecId)
            {
                returnValue = true;
            }
        }

        if (!returnValue)
        {
            // check unposted transaction in ProjProposalJour
            ProjProposalJour projProposalJour = TransactionFiscalCalendar::findProjProposalJour(currentPeriod.StartDate, currentPeriod.EndDate, companyCnt);
            if (projProposalJour.RecId)
            {
                returnValue = true;
            }
        }

        if (!returnValue)
        {
            // check unposted transaction in ProjControlPeriodTable
            ProjControlPeriodTable projControlPeriodTable = TransactionFiscalCalendar::findUnpostedProjControlPeriodTable(currentPeriod.StartDate, currentPeriod.EndDate, companyCnt);
            if (projControlPeriodTable.RecId)
            {
                returnValue = true;
            }
        }

        if (!returnValue)
        {
            // check for posted transaction
            if (Ledger::existLedgerForFiscalCalendar(calendarRecId))
            {
                GeneralJournalEntry generalJournalEntry;

                select firstonly RecId from generalJournalEntry
                where generalJournalEntry.FiscalCalendarPeriod == currentPeriod.RecId;

                if (generalJournalEntry != null)
                {
                    returnValue = true;
                }
            }
        }

        _args.setReturnValue(returnValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>