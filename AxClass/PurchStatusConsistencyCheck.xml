<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchStatusConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchStatusConsistencyCheck</c> class is a consistency check that verifies if purchase lines status corresponds to their state 
/// and subsequently if purchase order header status corresponds to the status of its lines.
/// </summary>
public class PurchStatusConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    configurationKeyId configurationKey()
    {
        return configurationkeynum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 50;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        Query purchOrderQuery = this.buildPurchaseOrdersQuery();
        QueryRun purchOrderQueryRun = new QueryRun(purchOrderQuery);

        progress.setTotal(QueryRun::getQueryRowCount(purchOrderQuery, maxInt()));
        
        info(strFmt("@ProcurementAndSourcing:PurchStatusConsistencyCheck_FoundToCheckTotal", int2Str(QueryRun::getQueryRowCount(purchOrderQuery, maxInt()))));

        while (purchOrderQueryRun.next())
        {
            PurchTable purchOrder = purchOrderQueryRun.get(tableNum(PurchTable));
            progress.setText(strFmt("@ProcurementAndSourcing:PurchStatusConsistencyCheck_ProgressUpdateText", purchOrder.PurchId));
            progress.incCount();

            try
            {
                ttsbegin;

                setPrefix(strFmt("@ProcurementAndSourcing:PurchStatusConsistencyCheck_PurchaseOrderLogSectionTitle", purchOrder.PurchId));
                int statusErrorsFixed = this.fixPurchOrderStatus(purchOrder);
                if (statusErrorsFixed > 0
                    && this.checkFix() == CheckFix::Fix)
                {
                    ttscommit;
                    info("@ProcurementAndSourcing:PurchStatusConsistencyCheck_StatusIsFixed");
                    this.updateCorrected(statusErrorsFixed);
                }
                else
                {
                    ttsabort;
                }
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }

        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@ProcurementAndSourcing:PurchStatusConsistencyCheck_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@ProcurementAndSourcing:PurchStatusConsistencyCheck_HelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(PurchRootConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixPurchOrderStatus</Name>
				<Source><![CDATA[
    private int fixPurchOrderStatus(PurchTable _purchOrder)
    {
        int statusErrorsFixed;

        QueryRun purchOrderLinesQueryRun = new QueryRun(this.buildPurchOrderLinesQuery(_purchOrder.PurchId));

        while (purchOrderLinesQueryRun.next())
        {
            PurchLine purchLine = purchOrderLinesQueryRun.get(tableNum(PurchLine));
            PurchStatus originalOrderLineStatus = purchLine.PurchStatus;

            VersioningDocumentState documentState = _purchOrder.DocumentState;

            if (_purchOrder.ChangeRequestRequired && documentState >= VersioningDocumentState::Approved)
            {
                _purchOrder.DocumentState = VersioningDocumentState::Draft;
                _purchOrder.doUpdate();
            }

            purchLine.setPurchStatus(true);

            if (_purchOrder.ChangeRequestRequired && documentState >= VersioningDocumentState::Approved)
            {
                _purchOrder.reread();
                _purchOrder.DocumentState = documentState;
                _purchOrder.doUpdate();
            }

            if (originalOrderLineStatus != purchLine.PurchStatus)
            {
                warning(strFmt(
                    "@ProcurementAndSourcing:PurchStatusConsistencyCheck_InvalidStatusDetectedForLine",
                    purchLine.ItemId,
                    enum2Str(originalOrderLineStatus),
                    enum2Str(purchLine.PurchStatus)));
                statusErrorsFixed++;
            }
        }

        PurchStatus originalOrderStatus = _purchOrder.PurchStatus;
        _purchOrder.reread();
        _purchOrder.updateBackStatus();
        
        if (originalOrderStatus != _purchOrder.PurchStatus)
        {
            warning(strFmt(
                "@ProcurementAndSourcing:PurchStatusConsistencyCheck_InvalidStatusDetectedForOrder",
                enum2Str(originalOrderStatus),
                enum2Str(_purchOrder.PurchStatus)));
            statusErrorsFixed++;
        }

        return statusErrorsFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPurchOrderLinesQuery</Name>
				<Source><![CDATA[
    private Query buildPurchOrderLinesQuery(PurchId _purchId)
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(PurchLine));
        qbds.update(true);

        qbds.addRange(fieldNum(PurchLine, PurchId)).value(queryValue(_purchId));

        this.addPurchStatusQueryRanges(fieldNum(PurchLine, PurchStatus), qbds);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPurchaseOrdersQuery</Name>
				<Source><![CDATA[
    private Query buildPurchaseOrdersQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(PurchTable));
        qbds.update(true);

        this.addPurchStatusQueryRanges(fieldNum(PurchTable, PurchStatus), qbds);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPurchStatusQueryRanges</Name>
				<Source><![CDATA[
    private void addPurchStatusQueryRanges(fieldId _purchStatusFieldId, QueryBuildDataSource _qbds)
    {
        QueryBuildRange purchStatusQueryBuildRange = _qbds.addRange(_purchStatusFieldId);
        purchStatusQueryBuildRange.value(queryValue(PurchStatus::Backorder));

        purchStatusQueryBuildRange = _qbds.addRange(_purchStatusFieldId);
        purchStatusQueryBuildRange.value(queryValue(PurchStatus::Received));
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>