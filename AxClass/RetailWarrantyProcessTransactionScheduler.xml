<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailWarrantyProcessTransactionScheduler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class schedules job to process <c>RetailWarrantyTransactionSales</c>, generate warrantied relation and warranty policy.
/// It schedules one job per channel.
/// </summary>
internal class RetailWarrantyProcessTransactionScheduler
    extends RunBaseBatch implements RetailIOperatingUnitPickerCaller
{
    private BatchHeader batchHeader;
    private Set selectedOMInternalOrgRecIds;
    private RecId oMHierarchyRecId;
    private container packedOMUnits;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        packedOMUnits,
        oMHierarchyRecId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run base batch dialog.
    /// </summary>
    /// <returns>Dialog object.</returns>
    public Object dialog()
    {
        DialogRunbase dialog = Dialog::newFormnameRunbase(formstr(RetailOperatingUnitPicker), this);

        dialog = this.dialogInternal(dialog);
        dialog.caption("@SYS115063");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (selectedOMInternalOrgRecIds)
        {
            packedOMUnits = selectedOMInternalOrgRecIds.pack();
        }

        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOMHierarchyRecId</Name>
				<Source><![CDATA[
    public RecId  parmOMHierarchyRecId(RecId _oMHierarchyRecId = oMHierarchyRecId)
    {
        oMHierarchyRecId = _oMHierarchyRecId;
        return oMHierarchyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedOMInternalOrgRecIds</Name>
				<Source><![CDATA[
    public Set  parmSelectedOMInternalOrgRecIds(Set _selectedOMInternalOrgRecIds = selectedOMInternalOrgRecIds)
    {
        selectedOMInternalOrgRecIds = _selectedOMInternalOrgRecIds;
        return selectedOMInternalOrgRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPickerInitParameters</Name>
				<Source><![CDATA[
    RetailOperatingUnitPickerData getPickerInitParameters()
    {
        RetailOperatingUnitPickerData pickerInitParameter = new RetailOperatingUnitPickerData();
        pickerInitParameter.hierarchyPurpose = HierarchyPurpose::RetailAssortment;

        if (this.parmInBatch())
        {
            pickerInitParameter.omInternalOrganizationRecIds = selectedOMInternalOrgRecIds;
            pickerInitParameter.omHierarchyTypeRecId = this.oMHierarchyRecId;
        }

        return pickerInitParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOperatingUnitPickerData</Name>
				<Source><![CDATA[
    void processOperatingUnitPickerData(RetailOperatingUnitPickerData operatingUnitPickerData)
    {
        this.parmSelectedOMInternalOrgRecIds(operatingUnitPickerData.omInternalOrganizationRecIds);
        this.parmOMHierarchyRecId(operatingUnitPickerData.omHierarchyTypeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a worker to process warranty in the given retail sales transaction.
    /// </summary>
    /// <param name = "_warrantyChannel">The channel.</param>
    /// <param name = "_warrantyStore">The store.</param>
    /// <param name = "_warrantyTerminalId">The terminal.</param>
    /// <param name = "_warrantyTransactionId">The transaction id.</param>
    private void createWorker(
        RetailWarrantyChannelId _warrantyChannel,
        RetailWarrantyStoreId _warrantyStore,
        RetailWarrantyTerminalId _warrantyTerminalId,
        RetailWarrantyTransactionId _warrantyTransactionId)
    {
        RetailWarrantyProcessTransactionTask worker = new RetailWarrantyProcessTransactionTask();

        worker.parmWarrantyChannel(_warrantyChannel);
        worker.parmWarrantyStore(_warrantyStore);
        worker.parmWarrantyTerminalId(_warrantyTerminalId);
        worker.parmWarrantyTransactionId(_warrantyTransactionId);

        if (!batchHeader)
        {
            batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        }
        batchHeader.addRuntimeTask(worker, this.parmCurrentBatch().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates workers each of which processes warranty in a retail sales transaction.
    /// </summary>
    private void createWorkers()
    {
        OMOperatingUnit omOperatingUnit;
        Set omOperatingUnits;
        SetEnumerator selectedEnumerator;
        SetEnumerator operatingUnitEnumerator;
        Set organizationTypes = new Set(Types::Enum);

        // Used to filter the organization model to include only operating units.
        organizationTypes.add(OMInternalOrganizationType::OperatingUnit);

        selectedEnumerator = selectedOMInternalOrgRecIds.getEnumerator();
        while (selectedEnumerator.moveNext())
        {
            omOperatingUnits = OMInternalOrganization::getDescendantsAndSelf(selectedEnumerator.current(), oMHierarchyRecId, DateTimeUtil::utcNow(), organizationTypes);
            operatingUnitEnumerator = omOperatingUnits.getEnumerator();
            while (operatingUnitEnumerator.moveNext())
            {
                omOperatingUnit = OMOperatingUnit::find(operatingUnitEnumerator.current(), OMOperatingUnitType::RetailChannel);
                if (!omOperatingUnit)
                {
                    // The operating unit was not a retail channel. No need to explode it.
                    continue;
                }

                RetailChannelTable retailChannelTable = RetailChannelTable::findByOperatingUnitId(omOperatingUnit.RecId);

                // Proces cash and carry only
                RetailWarrantyTransactionSales warrantyTransaction;
                RetailTransactionTable retailTransactionTable;
                RetailWarrantyTransactionStatus transactionStatus;

                while select WarrantyChannel, WarrantyStore, WarrantyTerminalId, WarrantyTransactionId
                    from warrantyTransaction
                    group by warrantyTransaction.WarrantyChannel, warrantyTransaction.WarrantyStore,
                        warrantyTransaction.WarrantyTerminalId, warrantyTransaction.WarrantyTransactionId
                    where warrantyTransaction.WarrantyChannel == retailChannelTable.RecId
                    // only include cash and carry transaction
                    exists join retailTransactionTable
                        where retailTransactionTable.type == RetailTransactionType::Sales
                            && retailTransactionTable.Channel == warrantyTransaction.WarrantyChannel
                            && retailTransactionTable.store == warrantyTransaction.WarrantyStore
                            && retailTransactionTable.terminal == warrantyTransaction.WarrantyTerminalId
                            && retailTransactionTable.transactionId == warrantyTransaction.WarrantyTransactionId
                    notExists join transactionStatus
                        where transactionStatus.WarrantyChannel == warrantyTransaction.WarrantyChannel
                           && transactionStatus.WarrantyStore == warrantyTransaction.WarrantyStore
                           && transactionStatus.WarrantyTerminalId == warrantyTransaction.WarrantyTerminalId
                           && transactionStatus.WarrantyTransactionId == warrantyTransaction.WarrantyTransactionId
                {
                    this.createWorker(
                        warrantyTransaction.WarrantyChannel,
                        warrantyTransaction.WarrantyStore,
                        warrantyTransaction.WarrantyTerminalId,
                        warrantyTransaction.WarrantyTransactionId);
                }
            }
        }
        if (batchHeader)
        {
            batchHeader.save();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.createWorkers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                if (packedOMUnits)
                {
                    selectedOMInternalOrgRecIds = Set::create(packedOMUnits);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RetailWarranty:ProcessWarrantyTransactions";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailWarrantyProcessTransactionScheduler scheduler = new RetailWarrantyProcessTransactionScheduler();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailWarrantyProcessTransactionScheduler</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailSyncOrdersSchedulerJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether batch task should retry in case of transient errors.
    /// </summary>
    /// <returns>true if task should be retried; otherwise, false.</returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>