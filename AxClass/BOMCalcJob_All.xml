<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcJob_All</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BomCalcJob_All extends BOMCalcJob implements BatchRetryable
{
    QueryRun                        queryRun;
    NoYes                           runPurchCalc;
    NoYes                           runBomCalc;
    guid                            sessionGuid;
    BOMCalcWhereUsedList            bomCalcWhereUsedList;           //allow injection of BOMCalcWhereUsedList
    BOMCalcJobItemTaskBatchManager  bomCalcJobItemTaskBatchManager; //allow injection of BOMCalcJobItemTaskBatchManager

    #define.CurrentVersion(5)
    #LOCALMACRO.CurrentList
        runPurchCalc,
        runBOMCalc,
        sessionGuid
    #ENDMACRO

    #define.Version3(3)
    #LOCALMACRO.Version3List
        inventDimId,
        runPurchCalc,
        runBOMCalc
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAll</Name>
				<Source><![CDATA[
    boolean calculateAll()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructBOMCalcItem</Name>
				<Source><![CDATA[
    protected BOMCalcItem constructBOMCalcItem()
    {
        BOMCalcItem calcItem = super();

        if (    classIdGet(calcItem) == classNum(BOMCalcItem)
            && !this.parmRunBomCalc())
        {
            return null;
        }

        if (    classIdGet(calcItem) == classNum(PurchCalcItem)
            && !this.parmRunPurchCalc())
        {
            return null;
        }

        return calcItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes all <c>BOMCalcItemTask</c> and <c>BOMCalcItemInventoryDimensionTask</c> records that are
    ///    related to the class session guid.
    /// </summary>
    public void deleteTasks()
    {
        BOMCalcItemInventoryDimensionTask   bomCalcItemInventoryDimensionTask;
        BomCalcItemTask                     bomCalcItemTask;

        ttsbegin;
        delete_from bomCalcItemTask
            where bomCalcItemTask.SessionGuid == this.parmSessionGuid();

        delete_from bomCalcItemInventoryDimensionTask
            where bomCalcItemInventoryDimensionTask.SessionGuid == this.parmSessionGuid();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>unpack</c> method returns false, the <c>initParmDefault</c>
    ///    method will be called.This method should not typically be overridden.
    /// </remarks>
    final public void getLast()
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        super();
        //we don't want to use any stored guids
        this.initSessionGuid();
        queryBuildDataSource = queryRun.query().dataSourceNo(1);
        queryBuildRange      = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTable,ItemId));
        queryBuildRange.value('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultBOMCalcJobItemTaskBatchMgr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>BOMCalcJobItemTaskBatchManager</c> class.
    /// </summary>
    protected void initDefaultBOMCalcJobItemTaskBatchMgr()
    {
        BatchHeader batchHeader;

        batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);

        bomCalcJobItemTaskBatchManager = BOMCalcJobItemTaskBatchManager::newFromBatchParameters(batchHeader,this.parmCurrentBatch());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultBOMCalcWhereUsedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>BOMCalcWhereUsedList</c> class.
    /// </summary>
    protected void initDefaultBOMCalcWhereUsedList()
    {
        bomCalcWhereUsedList = BOMCalcWhereUsedList::newParameters(versionId, calcDate, siteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSessionGuid</Name>
				<Source><![CDATA[
    private void initSessionGuid()
    {
        sessionGuid = newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a default record ID for a <c>InventDimId</c> record, which is used in the calculation of
    ///    items without product dimensions.
    /// </summary>
    /// <returns>
    ///    The default record ID of the <c>InventDimId</c> record.
    /// </returns>
    public InventDimId inventDimIdDefault()
    {
        if (this.parmSiteId())
        {
            return this.inventDimIdSite();
        }

        return InventDim::inventDimIdBlank();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        query = new Query(queryStr(BOMCalc));
        queryBuildDataSource = query.dataSourceTable(tableNum(InventTable), 1);
        queryBuildDataSource.addSortField(fieldNum(InventTable, bomLevel), SortOrder::Descending);

        queryRun = new QueryRun(query);

        runPurchCalc    = NoYes::Yes;
        runBomCalc      = NoYes::Yes;
        this.initSessionGuid();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack(), #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomCalcJobItemTaskBatchManager</Name>
				<Source><![CDATA[
    public BOMCalcJobItemTaskBatchManager parmBomCalcJobItemTaskBatchManager(BOMCalcJobItemTaskBatchManager _bomCalcJobItemTaskBatchManager = bomCalcJobItemTaskBatchManager)
    {
        bomCalcJobItemTaskBatchManager = _bomCalcJobItemTaskBatchManager;

        return bomCalcJobItemTaskBatchManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMCalcWhereUsedList</Name>
				<Source><![CDATA[
    public BOMCalcWhereUsedList parmBOMCalcWhereUsedList(BOMCalcWhereUsedList _bomCalcWhereUsedList = bomCalcWhereUsedList)
    {
        bomCalcWhereUsedList = _bomCalcWhereUsedList;

        return bomCalcWhereUsedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCWQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmCWQty(PdsCWInventQty _cwQty = 0)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemQty</Name>
				<Source><![CDATA[
    public Qty parmItemQty(Qty _itemQty = 0)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunBomCalc</Name>
				<Source><![CDATA[
    public NoYes parmRunBomCalc(NoYes _runBomCalc = runBomCalc)
    {
        runBomCalc = _runBomCalc;
        return runBomCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunPurchCalc</Name>
				<Source><![CDATA[
    public NoYes parmRunPurchCalc(NoYes _runPurchCalc = runPurchCalc)
    {
        runPurchCalc = _runPurchCalc;
        return runPurchCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQty</Name>
				<Source><![CDATA[
    public Qty parmSalesQty(Qty _salesQty = 0)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionGuid</Name>
				<Source><![CDATA[
    public SysGuid parmSessionGuid(SysGuid _sessionGuid = sessionGuid)
    {
        sessionGuid = _sessionGuid;

        return sessionGuid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDimCombination</Name>
				<Source><![CDATA[
    protected boolean skipDimCombination(Enumerator _productDims, InventTable _inventTable, InventDim _inventDimCombinationDim)
    {
        if (!_inventTable.ItemDimCostPrice)
        {
            _productDims.reset();
            while (_productDims.moveNext())
            {
                InventProductDimension productDim = _productDims.current() as InventProductDimension;
                anytype defaultValue = productDim.parmDefaultValueForItem(_inventTable);
                if (defaultValue)
                {
                    FieldId fieldId = productDim.parmInventDimFieldId();
                    if (defaultValue != _inventDimCombinationDim.(fieldId))
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTasksForSelectedItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the tasks for the items that will be used for BOM calculation.
    /// </summary>
    /// <returns>
    ///    The number of tasks that were prepared.
    /// </returns>
    protected int64 prepareTasksForSelectedItems()
    {
        InventDimCombination                inventDimCombination;
        InventTable                         localInventTable;
        BOMCalcItemInventoryDimensionTask   bomCalcItemInventoryDimensionTask;
        BomCalcItemTask                     bomCalcItemTask;
        RecordInsertList                    rilBOMCalcItemTask;
        RecordInsertList                    rilBOMCalcItemInventoryDimensionTask;
        int64                               numberOfTasksCreated = 0;
        InventDim                           inventDimCombinationDim;
        InventDim                           inventDimCombinationDimWithSite;
        boolean                             foundAnyWithActiveProductDimensions;
        ItemId                              previousItemId;

        rilBOMCalcItemTask = new RecordInsertList(tableNum(BomCalcItemTask));

        while (queryRun.next())
        {
            localInventTable = queryRun.get(tableNum(InventTable), 1);

            bomCalcItemTask = this.initBomCalcItemTask(localInventTable);

            if (localInventTable.hasProductDimensions())
            {
                //there can be cases where we have an item with active product dimensions and no inventdimcombinations, but for this edge case we accept a small overhead of doing calculations for that item
                bomCalcItemTask.HasActiveProductDimensions  = NoYes::Yes;
                foundAnyWithActiveProductDimensions = true;
            }

            rilBOMCalcItemTask.add(bomCalcItemTask);
            numberOfTasksCreated++;
        }
        //ensure that all bomCalcItemTask are inserted before we create any bomCalcItemInventoryDimensionTask
        rilBOMCalcItemTask.insertDatabase();

        if (foundAnyWithActiveProductDimensions)
        {
            rilBOMCalcItemInventoryDimensionTask = new RecordInsertList(tableNum(BOMCalcItemInventoryDimensionTask));

            InventDistinctProduct inventDistinctProduct;
            Enumerator productDims = InventProductDimension::getEnumeratorForEnabledDimensions();

            while select bomCalcItemTask order by bomCalcItemTask.ItemId, inventDistinctProduct.Level desc
                where bomCalcItemTask.SessionGuid                   == sessionGuid
                &&    bomCalcItemTask.HasActiveProductDimensions    == NoYes::Yes
            join TableId from inventDimCombination
                where inventDimCombination.ItemId == bomCalcItemTask.ItemId
            join inventDimCombinationDim
                where inventDimCombinationDim.InventDimId == inventDimCombination.InventDimId
            join Level from inventDistinctProduct
                where inventDistinctProduct.ItemId == bomCalcItemTask.ItemId
                &&    inventDistinctProduct.ItemId == inventDimCombination.ItemId
                &&    inventDistinctProduct.InventDimId == inventDimCombination.InventDimId
            join localInventTable
                where localInventTable.ItemId == bomCalcItemTask.ItemId                
            {
                if (this.skipDimCombination(productDims, localInventTable, inventDimCombinationDim))
                {
                    continue;
                }

                if (previousItemId == bomCalcItemTask.ItemId)
                {
                    if (localInventTable.ItemDimCostPrice == NoYes::No)
                    {
                        continue;
                    }
                }
                else
                {
                    previousItemId = bomCalcItemTask.ItemId;
                }

                bomCalcItemInventoryDimensionTask.clear();
                bomCalcItemInventoryDimensionTask.initFromBOMCalcItemTask(bomCalcItemTask);
                //create an inventdim with the product dimensions and site
                inventDimCombinationDimWithSite.clear();
                inventDimCombinationDimWithSite.data(inventDimCombinationDim);
                inventDimCombinationDimWithSite.InventSiteId = this.parmSiteId();
                inventDimCombinationDimWithSite = InventDim::findOrCreate(inventDimCombinationDimWithSite);
                bomCalcItemInventoryDimensionTask.InventDimId = inventDimCombinationDimWithSite.InventDimId;
                rilBOMCalcItemInventoryDimensionTask.add(bomCalcItemInventoryDimensionTask);
            }

            rilBOMCalcItemInventoryDimensionTask.insertDatabase();
        }

        return numberOfTasksCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTasksForWhereUsed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the tasks for the items that will be used for BOM calculation when the where used
    ///    principle is used.
    /// </summary>
    /// <returns>
    ///    The number of tasks that were prepared.
    /// </returns>
    protected int64 prepareTasksForWhereUsed()
    {
        Enumerator                          whereUsedListEnumerator;
        InventTable                         localInventTable;
        ItemId                              previousItemId = '';
        RecordInsertList                    rilBOMCalcItemTask;
        RecordInsertList                    rilBOMCalcItemInventoryDimensionTask;
        BOMCalcItemInventoryDimensionTask   bomCalcItemInventoryDimensionTask;
        BomCalcItemTask                     bomCalcItemTask;
        int64                               numberOfTasksCreated = 0;

        rilBOMCalcItemTask                      = new RecordInsertList(tableNum(BomCalcItemTask));
        rilBOMCalcItemInventoryDimensionTask    = new RecordInsertList(tableNum(BOMCalcItemInventoryDimensionTask));

        if (!bomCalcWhereUsedList)
        {
            this.initDefaultBOMCalcWhereUsedList();
        }

        bomCalcWhereUsedList.run();

        // Run through the list of impacted BOMs that consume items with pending costs
        whereUsedListEnumerator = bomCalcWhereUsedList.getEnumerator();
        //assuming that list is ordered by level,itemId so we don't insert the same item,level pair twice
        while (whereUsedListEnumerator.moveNext())
        {
            BOMCalcItemDimData bomCalcItemDimData = whereUsedListEnumerator.current();

            if (previousItemId != bomCalcItemDimData.parmItemId())
            {
                localInventTable    = InventTable::find(bomCalcItemDimData.parmItemId());
            }

            numberOfTasksCreated++;

            if (!localInventTable.hasProductDimensions())
            {
                bomCalcItemTask = this.initBomCalcItemTask(localInventTable);
                bomCalcItemTask.HasActiveProductDimensions = NoYes::No;
                rilBOMCalcItemTask.add(bomCalcItemTask);
            }
            else
            {
                if (previousItemId != bomCalcItemDimData.parmItemId())
                {
                    bomCalcItemTask = this.initBomCalcItemTask(localInventTable);
                    bomCalcItemTask.HasActiveProductDimensions = NoYes::Yes;
                    //we have to insert here since recID is needed as FK
                    bomCalcItemTask.insert();
                }

                InventDim inventDim     = bomCalcItemDimData.parmProductInventDim();
                inventDim.InventSiteId  = bomCalcItemDimData.parmInventSiteId();
                inventDim               = InventDim::findOrCreate(inventDim);

                bomCalcItemInventoryDimensionTask.initFromBOMCalcItemTask(bomCalcItemTask);
                bomCalcItemInventoryDimensionTask.InventDimId     = inventDim.InventDimId;
                rilBOMCalcItemInventoryDimensionTask.add(bomCalcItemInventoryDimensionTask);
            }

            previousItemId =  localInventTable.ItemId;
        }

        rilBOMCalcItemTask.insertDatabase();
        rilBOMCalcItemInventoryDimensionTask.insertDatabase();

        return numberOfTasksCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBomCalcItemTask</Name>
				<Source><![CDATA[
    private BomCalcItemTask initBomCalcItemTask(InventTable _inventTable)
    {
        BomCalcItemTask bomCalcItemTask;

        bomCalcItemTask.initFromInventTable(_inventTable);
        bomCalcItemTask.SessionGuid = sessionGuid;

        if (this.parmUseCostCalculationLevel())
        {
            bomCalcItemTask.BOMLevel = _inventTable.CostBOMLevel;
        }

        return bomCalcItemTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSingleTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs BOM calculation for a single item and the selected combinations.
    /// </summary>
    /// <param name="_taskId">
    /// The ID of the record in the <c>BOMCalcItemTask</c> table.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_hasActiveProductDimensions">
    /// true, if the item has active product dimensions; otherwise false.
    /// </param>
    protected void processSingleTask(RefRecId _taskId, ItemId _itemId, boolean _hasActiveProductDimensions)
    {
        BOMCalcItemInventoryDimensionTask   bomCalcItemInventoryDimensionTask;
        InventDimId                         defaultDimId;
        InventSiteId                        siteIdLocal = this.parmSiteId();

        this.parmItemId(_itemId);       

        defaultDimId = this.inventDimIdDefault();

        if (_hasActiveProductDimensions)
        {
            //run calculation for each variation of the item
            while select InventDimId from bomCalcItemInventoryDimensionTask
                where bomCalcItemInventoryDimensionTask.BomCalcItemTask == _taskId
            {
                try
                {
                    this.setBOMVersionAndRunBOMCalculation(bomCalcItemInventoryDimensionTask.InventDimId);
                }
                catch (Exception::Error)
                {
                    exceptionTextFallThrough();
                }
            }
        }
        else
        {
            if (this.mustRunBOMCalculation())
            {
                this.setBOMVersionAndRunBOMCalculation(defaultDimId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBOMVersionAndRunBOMCalculation</Name>
				<Source><![CDATA[
    private void setBOMVersionAndRunBOMCalculation(InventDimId _inventDimId)
    {
        this.parmPmfBOMVersion(null); // added to correctly calculate co-products
        this.parmInventDimId(_inventDimId);
        this.runBOMCalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRunBOMCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether to run BOM calculation for the selected combination.
    /// </summary>
    /// <returns>
    ///     true if BOM calculation is required; otherwise, false.
    /// </returns>
    protected boolean mustRunBOMCalculation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the <c>bomCalcItemTask</c> tasks for a given level so calculation can be done.
    /// </summary>
    /// <param name="_bomLevelFilter">
    ///    A <c>ItemBomLevel</c> filter that is used to filter the tasks that the instance will process.
    /// </param>
    public void processTasks(ItemBOMLevel _bomLevelFilter)
    {
        #OCCRetryCount

        BomCalcItemTask         bomCalcItemTask;
        boolean                 moreTasksExist = true;
        PmfCostAllocationPct    localPmfCostAllocationPct = this.parmPmfCostAllocationPct();

        try
        {
            bomCalcItemTask.readPast(true);

            //pull a task and process it as long as any remains
            while (moreTasksExist)
            {
                ttsbegin;

                //take a lock on the specific record so other batch tasks does not process the same task
                select firstonly pessimisticlock bomCalcItemTask
                    where bomCalcItemTask.bomLevel      == _bomLevelFilter
                    &&    bomCalcItemTask.SessionGuid   == this.parmSessionGuid();

                if (!bomCalcItemTask.RecId)
                {
                    moreTasksExist = false;
                }

                // Delete the task immediately so that another batch job can pick up the next task.
                bomCalcItemTask.delete();

                // For performance reasons related BOMCalcItemInventoryDimensionTask are not deleted here,
                // but later in one set based operation

                ttscommit;

                if (moreTasksExist)
                {
                    try
                    {
                        // reset cost allocation percent
                        this.parmPmfCostAllocationPct(localPmfCostAllocationPct);

                        this.processSingleTask(bomCalcItemTask.RecId, bomCalcItemTask.ItemId, bomCalcItemTask.HasActiveProductDimensions);
                    }
                    catch (Exception::Error)
                    {
                        // We need to catch errors here to make sure that execution of the loop will not stop.
                        // Any errors have been logged by this point.
                        exceptionTextFallThrough();
                    }
                }
                else
                {
                    moreTasksExist = false;
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        BOMLevelCalc    bomLevelCalc = BOMLevelCalc::construct();
        int64           numberOfTasksToProcess;

        // Make sure that the items will be calculated in the right order
        if (bomLevelCalc.isBOMLevelCalcNeeded() ||
            bomLevelCalc.isCostBOMLevelCalcNeeded())
        {
            bomLevelCalc.calculateCostBOMLevel(this.parmUseCostCalculationLevel());

            bomLevelCalc.runOperation();
        }

        CostSheetCostGroupImpact::generateFromCostSheet(CostSheetTable::defaultCostSheetTable().SheetId);

        this.initQueryRunWithBOMLevelSortField();

        ttsbegin; //the task data has to be committed for the parallel run to work on it
        if (bomCalcWhereUsedUpdate)
        {
            numberOfTasksToProcess = this.prepareTasksForWhereUsed();
        }
        else
        {
            numberOfTasksToProcess = this.prepareTasksForSelectedItems();
        }
        ttscommit;

        if (!numberOfTasksToProcess)
        {
            return;
        }

        if (this.isInBatch())
        {
            this.runBatch();
        }
        else
        {
            this.progressInit("@SYS13118", numberOfTasksToProcess, #AviUpdate);
            progress.setCount(1);

            this.runSequential();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunWithBOMLevelSortField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a query run object including correct CostBOMLevel or BOMLevel sort fields.
    /// </summary>
    /// <remarks>
    /// If a query run object exists:
    ///    All sort fields on inventory item table data sources will be cleared.
    ///    All sort fields from the query run except the CostBOMLevel and BOMLevel fields will be added to the data source again.
    ///    The CostBOMLevel or BOMLevel field will be added as sort field depending on if the cost calculation level should be used.
    ///    
    ///  If no query run object exists:
    ///    The CostBOMLevel or BOMLevel field will be added as sort field depending on if the cost calculation level should be used.
    /// </remarks>
    private void initQueryRunWithBOMLevelSortField()
    {
        Query query;
        QueryBuildDataSource queryBuildDataSource;

        if (queryRun != null)
        {
            query = queryRun.query();

            boolean addBOMLevelSortFields = true;

            for (int dsIdx = 1; dsIdx <= query.dataSourceCount(); dsIdx++)
            {
                queryBuildDataSource = query.dataSourceNo(dsIdx);
                
                if (queryBuildDataSource.table() == tableNum(InventTable))
                {
                    List sortFields = new List(Types::Container);
                    for (int i = 1; i <= queryBuildDataSource.sortFieldCount(); i++)
                    {
                        sortFields.addEnd([queryBuildDataSource.sortField(i), queryBuildDataSource.sortDirection(i)]);
                    }

                    queryBuildDataSource.sortClear();

                    var sortFieldEnumerator = sortFields.getEnumerator();
                    while (sortFieldEnumerator.moveNext())
                    {
                        FieldId extendedField;
                        SortOrder direction;

                        [extendedField, direction] = sortFieldEnumerator.current();

                        if (extendedField != fieldNum(InventTable, BOMLevel) &&
                            extendedField != fieldNum(InventTable, CostBOMLevel))
                        {
                            queryBuildDataSource.addSortField(extendedField, direction);
                        }
                    }

                    if (addBOMLevelSortFields)
                    {
                        queryBuildDataSource.addSortField(this.getBOMLevelFieldId(), SortOrder::Descending);

                        addBOMLevelSortFields = false;
                    }
                }
            }
        }
        else
        {
            query = new Query(queryStr(BOMCalc));
            queryBuildDataSource = query.dataSourceTable(tableNum(InventTable), 1);
            queryBuildDataSource.addSortField(this.getBOMLevelFieldId(), SortOrder::Descending);
        }
        
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates batch tasks when the calculation is run in batch.
    /// </summary>
    protected void runBatch()
    {
        if (!bomCalcJobItemTaskBatchManager)
        {
            this.initDefaultBOMCalcJobItemTaskBatchMgr();
        }

        bomCalcJobItemTaskBatchManager.createBatchTasks(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunBOMCalculationForByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a byproduct can be included in a BOM calculation.
    /// </summary>
    /// <param name = "_inventTable">The byproduct.</param>
    /// <returns>true if a byproduct can be included in a BOM calculation; otherwise, false.</returns>
    protected boolean canRunBOMCalculationForByProduct(InventTable _inventTable)
    {
        return _inventTable.inventItemSetupSupplyType().DefaultOrderType == ReqPOType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunBOMCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an item can be included in a BOM calculation.
    /// </summary>
    /// <returns>true if an item can be included in a BOM calculation; otherwise, false.</returns>
    protected boolean canRunBOMCalculation()
    {
        InventTable inventTable = InventTable::find(this.parmItemId());

        switch (inventTable.PmfProductType)
        {
            case PmfProductType::By_Product:
                return this.canRunBOMCalculationForByProduct(inventTable);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBOMCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the BOM calculation for the class.
    /// </summary>
    protected void runBOMCalculation()
    {
        if (this.canRunBOMCalculation())
        {
            this.updateProgress();

            // Find out item production mode for the next item.
            this.parmFindOutItemProductionMode(true);

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSequential</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the BOM calculation sequentially so each item is calculated one at a time.
    /// </summary>
    protected void runSequential()
    {
        InventDimId                         defaultDimId;
        BomCalcItemTask                     bomCalcItemTask;
        BOMCalcItemInventoryDimensionTask   bomCalcItemInventoryDimensionTask;
        PmfCostAllocationPct                localPmfCostAllocationPct = this.parmPmfCostAllocationPct();

        defaultDimId = this.inventDimIdDefault();

        while select ItemId from bomCalcItemTask
        order by bomLevel desc
            where bomCalcItemTask.SessionGuid   == this.parmSessionGuid()
        outer join RecId, InventDimId from bomCalcItemInventoryDimensionTask
            where bomCalcItemInventoryDimensionTask.BomCalcItemTask == bomCalcItemTask.RecId
        {
            try
            {
                this.parmItemId(bomCalcItemTask.ItemId);
                this.parmPmfBOMVersion(null); //added to correctly calculate co-products

                // reset cost allocation percent
                this.parmPmfCostAllocationPct(localPmfCostAllocationPct);

                //there were InventDimCombinations for the item that has to be processed
                if (bomCalcItemInventoryDimensionTask.RecId)
                {
                    this.parmInventDimId(bomCalcItemInventoryDimensionTask.InventDimId);
                }
                else
                {
                    this.parmInventDimId(defaultDimId);
                }

                this.runBOMCalculation();
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }
        }

        this.deleteTasks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showItem</Name>
				<Source><![CDATA[
    boolean showItem()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog box.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    ///    be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWhereUsedUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines whether BOM calculation dialog box will have a Where used update combo box.
    /// </summary>
    /// <returns>
    ///    true if the combo box should be displayed; otherwise, false.
    /// </returns>
    public boolean showWhereUsedUpdate()
    {
        return CostingVersion::find(versionId).CostingType == CostingVersionCostingType::Standard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version     = RunBase::getVersion(_packedClass);
        container       packedQuery;
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedQuery, #CurrentList, base] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                ret = super(base);
                break;

            case #VERSION3:
                [version, packedQuery, #Version3List, base] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                ret = super(base);

                if (!this.parmSessionGuid())
                {
                    this.initSessionGuid();
                }
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProgress</Name>
				<Source><![CDATA[
    void updateProgress()
    {
        if (    !progress
            || !inventDimId)
        {
            return;
        }

        progress.setText(strFmt("@SYS24300",itemId));

        progress.incCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMCalcJob_All construct()
    {
        return new BOMCalcJob_All();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS343262";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>