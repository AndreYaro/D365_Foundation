<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSACustomerRentionInquiry</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PSACustomerRentionInquiry</c> class initializes data for the customer retention inquiry form.
/// </summary>
class PSACustomerRentionInquiry
{
    CustAccount                     custAccount;
    ProjInvoiceProjId               projInvoiceProjId;
    ProjId                          projId;
    PSAContractLineNum              contractLineNum;
    ProjInvoiceJour                 projInvoiceJour;
    PSATmpRetentionReleaseLine      psaTmpRetentionReleaseLine;
    PSATmpRetentionReleaseTable     psaTmpRetentionReleaseTable;
    PSATmpRetentionInquiryHeader    psaTmpRetentionInquiryHeader;
    PSACustomerInvoiceRetain        psaCustomerInvoiceRetain;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildHeadereQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the summary query for customer retension records.
    /// </summary>
    /// <returns>
    ///     The query containing summary of customer retension records.
    /// </returns>
    public Query buildHeadereQuery()
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildProposalRetain,
                                queryBuildProjInvoiceJour;

        queryBuildProjInvoiceJour = query.addDataSource(tableNum(projInvoiceJour));
        queryBuildProjInvoiceJour.addGroupByField(fieldNum(projInvoiceJour, CurrencyId));

        queryBuildProposalRetain = queryBuildProjInvoiceJour.addDataSource(tableNum(psaCustomerInvoiceRetain));

        // Apply the projId groupby clause only when there are no billing rules are defined
        if ((this.parmContractId() != "" && !PSAContractLineItems::hasBillingRules(this.parmContractId()))
            ||
           (this.parmProjId() != "" && !PSAContractLineItems::hasBillingRules(ProjTable::find(this.parmProjId()).ProjInvoiceProjId)))
        {
            queryBuildProposalRetain.addGroupByField(fieldNum(psaCustomerInvoiceRetain, projId));
        }

        queryBuildProposalRetain.addSelectionField(fieldNum(psaCustomerInvoiceRetain, InvoicedNow), SelectionField::Sum);
        queryBuildProposalRetain.addSelectionField(fieldNum(psaCustomerInvoiceRetain, RetainedAmount), SelectionField::Sum);
        queryBuildProposalRetain.addSelectionField(fieldNum(psaCustomerInvoiceRetain, ReleasedAmount), SelectionField::Sum);
        queryBuildProposalRetain.relations(true);

        if (custAccount)
        {
            queryBuildProjInvoiceJour.addGroupByField(fieldNum(projInvoiceJour, InvoiceAccount));
            queryBuildProjInvoiceJour.addRange(fieldNum(projInvoiceJour, InvoiceAccount)).value(custAccount);
            queryBuildProposalRetain.addGroupByField(fieldNum(psaCustomerInvoiceRetain, FundingSource));
        }

        if (projInvoiceProjId)
        {
            queryBuildProjInvoiceJour.addGroupByField(fieldNum(projInvoiceJour, ProjInvoiceProjId));
            queryBuildProjInvoiceJour.addRange(fieldNum(projInvoiceJour, ProjInvoiceProjId)).value(projInvoiceProjId);
        }

        if ((custAccount || projInvoiceProjId) && !contractLineNum)
        {
            queryBuildProposalRetain.addGroupByField(fieldNum(psaCustomerInvoiceRetain, ContractLineNum));
        }

        if (projId)
        {
            queryBuildProposalRetain.addRange(fieldNum(psaCustomerInvoiceRetain, ProjId)).value(projId);
        }
        if (contractLineNum)
        {
            queryBuildProposalRetain.addGroupByField(fieldNum(psaCustomerInvoiceRetain, ContractLineNum));
            queryBuildProposalRetain.addRange(fieldNum(psaCustomerInvoiceRetain, ContractLineNum)).value(contractLineNum);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLineDetailsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the details query for customer retension records.
    /// </summary>
    /// <param name="_id">
    ///     The project id or billing rule for which the range should occur.
    /// </param>
    /// <param name="_fundingsource">
    ///     The <c> ProjFundingSourceRefId </c> for which the range should occur.
    /// </param>
    /// <returns>
    ///     The query containing customer retension records.
    /// </returns>
    public Query buildLineDetailsQuery(Str _id, ProjFundingSourceRefId _fundingsource)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildProjInvoiceJour,
                                queryBuildProposalRetain;

        queryBuildProjInvoiceJour = query.addDataSource(tableNum(projInvoiceJour));

        queryBuildProposalRetain = queryBuildProjInvoiceJour.addDataSource(tableNum(psaCustomerInvoiceRetain));
        queryBuildProposalRetain.addRange(fieldNum(psaCustomerInvoiceRetain, FundingSource)).value(queryValue(_fundingsource));
        queryBuildProposalRetain.relations(true);

        if (PSAContractLineItems::find(_id).RecId)
        {
            queryBuildProposalRetain.addRange(fieldNum(psaCustomerInvoiceRetain, ContractLineNum)).value(_id);
        }
        else
        {
            queryBuildProposalRetain.addRange(fieldNum(psaCustomerInvoiceRetain, projId)).value(_id);
        }
        if (custAccount)
        {
            queryBuildProjInvoiceJour.addRange(fieldNum(projInvoiceJour, InvoiceAccount)).value(custAccount);
        }

        if (projInvoiceProjId)
        {
            queryBuildProjInvoiceJour.addRange(fieldNum(projInvoiceJour, ProjInvoiceProjId)).value(projInvoiceProjId);
        }

        if (projId)
        {
            queryBuildProposalRetain.addRange(fieldNum(psaCustomerInvoiceRetain, ProjId)).value(projId);
        }
        if (contractLineNum)
        {
            queryBuildProposalRetain.addRange(fieldNum(psaCustomerInvoiceRetain, ContractLineNum)).value(contractLineNum);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query for customer retension records for the specified billing rule.
    /// </summary>
    /// <param name="_projBillingRuleId">
    ///     The billing rule for which the range should occur.
    /// </param>
    /// <returns>
    ///     The query containing customer retension records.
    /// </returns>
    public Query buildLineQuery(str _projBillingRuleId)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildProjInvoiceJour,queryBuildProposalRetain;

        queryBuildProjInvoiceJour = query.addDataSource(tableNum(projInvoiceJour));

        queryBuildProposalRetain = queryBuildProjInvoiceJour.addDataSource(tableNum(psaCustomerInvoiceRetain));
        queryBuildProposalRetain.addGroupByField(fieldNum(psaCustomerInvoiceRetain, FundingSource));
        queryBuildProposalRetain.addSelectionField(fieldNum(psaCustomerInvoiceRetain, InvoicedNow), SelectionField::Sum);
        queryBuildProposalRetain.addSelectionField(fieldNum(psaCustomerInvoiceRetain, RetainedAmount), SelectionField::Sum);
        queryBuildProposalRetain.addSelectionField(fieldNum(psaCustomerInvoiceRetain, ReleasedAmount), SelectionField::Sum);
        queryBuildProposalRetain.relations(true);

        if (PSAContractLineItems::find(_projBillingRuleId).RecId)
        {
            queryBuildProposalRetain.addRange(fieldNum(psaCustomerInvoiceRetain, ContractLineNum)).value(_projBillingRuleId);
        }
        else
        {
            queryBuildProposalRetain.addRange(fieldNum(psaCustomerInvoiceRetain, projId)).value(_projBillingRuleId);
        }
        if (custAccount)
        {
            queryBuildProjInvoiceJour.addGroupByField(fieldNum(projInvoiceJour, InvoiceAccount));
            queryBuildProjInvoiceJour.addRange(fieldNum(projInvoiceJour, InvoiceAccount)).value(custAccount);
        }

        if (projInvoiceProjId)
        {
            queryBuildProjInvoiceJour.addGroupByField(fieldNum(projInvoiceJour, ProjInvoiceProjId));
            queryBuildProjInvoiceJour.addRange(fieldNum(projInvoiceJour, ProjInvoiceProjId)).value(projInvoiceProjId);
        }

        if (projId)
        {
            queryBuildProposalRetain.addGroupByField(fieldNum(psaCustomerInvoiceRetain, projId));
            queryBuildProposalRetain.addRange(fieldNum(psaCustomerInvoiceRetain, ProjId)).value(projId);
        }
        if (contractLineNum)
        {
            queryBuildProposalRetain.addGroupByField(fieldNum(psaCustomerInvoiceRetain, ContractLineNum));
            queryBuildProposalRetain.addRange(fieldNum(psaCustomerInvoiceRetain, ContractLineNum)).value(contractLineNum);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillingRuleId</Name>
				<Source><![CDATA[
        public PSAContractLineNum parmBillingRuleId(PSAContractLineNum _contractLineNum = contractLineNum)
    {
        contractLineNum = _contractLineNum;

        return contractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContractId</Name>
				<Source><![CDATA[
        public ProjInvoiceProjId parmContractId(ProjInvoiceProjId _projInvoiceProjId = projInvoiceProjId)
    {
        projInvoiceProjId = _projInvoiceProjId;

        return projInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
        public CustAccount parmCustAccount(CustAccount _custAccount = custAccount)
    {
        custAccount = _custAccount;

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
        public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSATmpRetentionInquiryHeader</Name>
				<Source><![CDATA[
        public PSATmpRetentionInquiryHeader parmPSATmpRetentionInquiryHeader(PSATmpRetentionInquiryHeader _psaTmpRetentionInquiryHeader = psaTmpRetentionInquiryHeader)
    {
        psaTmpRetentionInquiryHeader = _psaTmpRetentionInquiryHeader;

        return psaTmpRetentionInquiryHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSATmpRetentionReleaseLine</Name>
				<Source><![CDATA[
        public PSATmpRetentionReleaseLine parmPSATmpRetentionReleaseLine(PSATmpRetentionReleaseLine _psaTmpRetentionReleaseLine = psaTmpRetentionReleaseLine)
    {
        psaTmpRetentionReleaseLine = _psaTmpRetentionReleaseLine;

        return psaTmpRetentionReleaseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSATmpRetentionReleaseTable</Name>
				<Source><![CDATA[
        public PSATmpRetentionReleaseTable parmPSATmpRetentionReleaseTable(PSATmpRetentionReleaseTable _psaTmpRetentionReleaseTable = psaTmpRetentionReleaseTable)
    {
        psaTmpRetentionReleaseTable = _psaTmpRetentionReleaseTable;

        return psaTmpRetentionReleaseTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the data for the customer retention inquiry form.
    /// </summary>
    public void run()
    {
        QueryRun    queryRunHeader, queryRunLine, queryRunLineDetails;

        ProjInvoiceRevenue       projInvoiceRevenue;
        ProjInvoiceRevenueDetail projInvoiceRevenueDetail;
        projRevenueTransSale     projRevenueTransSale;
        projRevenueTransSale     projRevenueTransSaleLoc;
        ProjInvoiceRevenueDetail ProjInvoiceRevenueDetailLoc;
        psaCustomerInvoiceRetain psaCustomerInvoiceRetainLoc;

        queryRunHeader = new QueryRun(this.buildHeadereQuery());
        while (queryRunHeader.next())
        {
            psaCustomerInvoiceRetain = queryRunHeader.get(tableNum(psaCustomerInvoiceRetain));
            projInvoiceJour          = queryRunHeader.get(tableNum(ProjInvoiceJour));

            // Insert Header Records
            PSATmpRetentionInquiryHeader.clear();
            PSATmpRetentionInquiryHeader.id = psaCustomerInvoiceRetain.ContractLineNum ? psaCustomerInvoiceRetain.ContractLineNum : psaCustomerInvoiceRetain.ProjId;
            PSATmpRetentionInquiryHeader.TotalRetainedAmount = psaCustomerInvoiceRetain.RetainedAmount;
            PSATmpRetentionInquiryHeader.TotalInvoiceAmount  = psaCustomerInvoiceRetain.InvoicedNow - psaCustomerInvoiceRetain.ReleasedAmount;
            PSATmpRetentionInquiryHeader.TotalReleaseAmount  = psaCustomerInvoiceRetain.ReleasedAmount;
            PSATmpRetentionInquiryHeader.CurrencyId          = projInvoiceJour.CurrencyId;
            PSATmpRetentionInquiryHeader.insert();

            if (PSATmpRetentionInquiryHeader && psaCustomerInvoiceRetain.ProjId && !psaCustomerInvoiceRetain.ContractLineNum)
            {
                select sum(InvoicedNow), sum(RetainedAmount), sum(ReleasedAmount) from psaCustomerInvoiceRetainLoc
                    where psaCustomerInvoiceRetainLoc.ProjId == psaCustomerInvoiceRetain.ProjId;

                PSATmpRetentionInquiryHeader.TotalRetainedAmount = psaCustomerInvoiceRetainLoc.RetainedAmount;
                PSATmpRetentionInquiryHeader.TotalInvoiceAmount  = psaCustomerInvoiceRetainLoc.InvoicedNow - psaCustomerInvoiceRetainLoc.ReleasedAmount;
                PSATmpRetentionInquiryHeader.TotalReleaseAmount  = psaCustomerInvoiceRetainLoc.ReleasedAmount;
                PSATmpRetentionInquiryHeader.update();
            }

            queryRunLine = new queryRun(this.buildLineQuery(PSATmpRetentionInquiryHeader.id));
            while (queryRunLine.next())
            {
                psaCustomerInvoiceRetain = queryRunLine.get(tableNum(psaCustomerInvoiceRetain));
                // Insert Customer Payment retention Records
                psaTmpRetentionReleaseTable.clear();
                psaTmpRetentionReleaseTable.FundingSourceId  = projFundingSource::find(psaCustomerInvoiceRetain.FundingSource).FundingSourceId;
                psaTmpRetentionReleaseTable.TotalInvoiced    = psaCustomerInvoiceRetain.InvoicedNow - psaCustomerInvoiceRetain.ReleasedAmount;
                psaTmpRetentionReleaseTable.RetainedAmount   = psaCustomerInvoiceRetain.RetainedAmount;
                psaTmpRetentionReleaseTable.TotalReleaseAmount = psaCustomerInvoiceRetain.ReleasedAmount;
                psaTmpRetentionReleaseTable.RefRecId         = PSATmpRetentionInquiryHeader.RecId;
                psaTmpRetentionReleaseTable.insert();

                queryRunLineDetails = new queryRun(this.buildLineDetailsQuery(PSATmpRetentionInquiryHeader.id, psaCustomerInvoiceRetain.FundingSource));
                while (queryRunLineDetails.next())
                {
                    psaCustomerInvoiceRetain = queryRunLineDetails.get(tableNum(psaCustomerInvoiceRetain));
                    // Insert Invoice line records

                    if (!psaCustomerInvoiceRetain.ReleasedAmount)
                    {
                        select LineAmount from ProjInvoiceRevenueDetailLoc
                            join RecId from ProjInvoiceRevenueDetail
                            join RecId from projRevenueTransSaleLoc
                                 where ProjInvoiceRevenueDetailLoc.SaleRefRecId == projRevenueTransSaleLoc.RecId
                            join RecId from projRevenueTransSale
                                where projRevenueTransSaleLoc.PSARefREcId == projRevenueTransSale.RecId
                                   && projRevenueTransSale.RecId == projInvoiceRevenueDetail.SaleRefRecId
                            join RecId from projInvoiceRevenue
                                where ProjInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                                    && projInvoiceRevenue.ProjInvoiceId == psaCustomerInvoiceRetain.ProjInvoiceId
                                    && projInvoiceRevenue.InvoiceDate == psaCustomerInvoiceRetain.ProjInvoiceDate
                                    && projInvoiceRevenue.PSAContractLineNum == psaCustomerInvoiceRetain.ContractLineNum;

                        psaTmpRetentionReleaseLine.clear();
                        psaTmpRetentionReleaseLine.InvoiceNumber        = psaCustomerInvoiceRetain.ProjInvoiceId;
                        psaTmpRetentionReleaseLine.TransDate            = psaCustomerInvoiceRetain.ProjInvoiceDate;
                        psaTmpRetentionReleaseLine.InvoiceAmount        = psaCustomerInvoiceRetain.InvoicedNow;
                        psaTmpRetentionReleaseLine.RetainedAmount       = psaCustomerInvoiceRetain.RetainedAmount;
                        psaTmpRetentionReleaseLine.ReleaseAmount        = abs(ProjInvoiceRevenueDetailLoc.LineAmount);
                        psaTmpRetentionReleaseLine.TotalReleaseAmount   = psaTmpRetentionReleaseLine.RetainedAmount - psaTmpRetentionReleaseLine.ReleaseAmount;
                        psaTmpRetentionReleaseLine.RefRecId             = psaTmpRetentionReleaseTable.RecId;
                        psaTmpRetentionReleaseLine.insert();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>