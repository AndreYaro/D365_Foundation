<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEarningStatementSourceDocLineItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollEarningStatSourceDocLineItem</c> class provides the information to handle the distributions and
/// subledger journal account entries for a payroll earning statement line.
/// </summary>

[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_EarningStatement), SourceDocumentLine_EarningStatement::Earnings)]
public class PayrollEarningStatementSourceDocLineItem extends SourceDocumentLineItem
    implements  SourceDocumentIDataProvider,
                SourceDocumentLineItemIProductQuantity,
                SourceDocumentLineItemIProjectRevenue,
                SourceDocumentLineItemIDescription

{
    PayrollEarningStatement     payrollEarningStatement;
    PayrollEarningStatementLine payrollEarningStatementLine;
    VendTable                   orderAccount;
    ProjTransIdBase             projTransId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the legal entity record id from the payroll earning statement line.
    /// </summary>
    /// <returns>
    ///     A legal entity record id.
    /// </returns>
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::findDataArea(payrollEarningStatementLine.DataAreaId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap     sourceDocumentAmountMap;
        SourceDocumentLine          sourceDocumentLineValue;

        // Create map
        sourceDocumentAmountMap = SourceDocumentAmountMap::construct();

        sourceDocumentLineValue = this.parmSourceDocumentLine();

        sourceDocumentAmountMap.insert(SourceDocumentAmount::newFromParameters(sourceDocumentLineValue, payrollEarningStatementLine.AccountingCurrencyAmount, MonetaryAmount::PayrollCost, false));

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SourceDocumentLineItem</c> class documents a business event.
    /// </summary>
    /// <returns>
    /// true if the <c>SourceDocumentLineItem</c> documents a business event; otherwise, false.
    /// </returns>

    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent       businessEvent;

        businessEvent = new BusinessEvent(enumNum(BusinessEvent_PayrollEarningStatement), BusinessEvent_PayrollEarningStatement::GenerateEarningsStatement);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    /// A source document line implementation table.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects needed by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        payrollEarningStatementLine    = _sourceDocumentLineImplementation;

        payrollEarningStatement   = payrollEarningStatementLine.payrollEarningStatement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return payrollEarningStatementLine.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        return payrollEarningStatementLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public Description parmDescription()
    {
        return strFmt("%1: %2 -%3 - %4", "@Payroll:EarningsStatement1",
                    payrollEarningStatement.DocumentNumber,
                    HcmPosition::find(payrollEarningStatementLine.Position).PositionId,
                    PayrollEarningCode::find(payrollEarningStatementLine.EarningCode).EarningCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplateRecId</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplateRecId parmDistributionTemplateRecId()
    {
        return payrollEarningStatementLine.AccountingDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDocumentLineEditable</Name>
				<Source><![CDATA[
    public boolean parmIsDocumentLineEditable()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = (payrollEarningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::None ||
                payrollEarningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::OnHold);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionOverrideAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionOverrideAccount()
    {
        return this.parmLedgerDimensionDefaultAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LegalEntityRecId _legalEntityRecId = this.parmLegalEntityRecId())
    {
        LedgerDimensionDefaultAccount   earningStatmentLedgerDimension;

        earningStatmentLedgerDimension = PayrollEarningCodeAccountingRule::getEarningCodeLedgerDimension(_legalEntityRecId,
                                                    payrollEarningStatementLine.EarningCode,
                                                    payrollEarningStatement.Worker,
                                                    HcmPosition::getDepartment(payrollEarningStatementLine.Position),
                                                    HcmPosition::getJob(payrollEarningStatementLine.Position));

        return earningStatmentLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectActivityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber parmProjectActivityNumber()
    {
        return payrollEarningStatementLine.ProjActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjectCategoryId()
    {
        return payrollEarningStatementLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectFundingSourceRecId</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmProjectFundingSourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectId</Name>
				<Source><![CDATA[
    public ProjId parmProjectId()
    {
        return payrollEarningStatementLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectItemSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxItemGroup parmProjectItemSalesTaxGroup()
    {
        ProjTaxItemGroup    projTaxItemGroup;

        changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
        {
            projTaxItemGroup = ProjCategory::find(this.parmProjectCategoryId()).TaxItemGroupId;
        }

        return projTaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectLineProperty</Name>
				<Source><![CDATA[
    public ProjLinePropertyId parmProjectLineProperty()
    {
        return payrollEarningStatementLine.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceCategoryRecId</Name>
				<Source><![CDATA[
    public ResourceCategoryRecId parmProjectResourceCategoryRecId()
    {
        return ResourceFacade::getResourceCategory(this.parmProjectResourceRecId(), this.parmAccountingDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceRecId</Name>
				<Source><![CDATA[
    public ResourceRecId parmProjectResourceRecId()
    {
        return ResourceFacade::findByWorker(payrollEarningStatementLine.payrollEarningStatement().Worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesCurrencyCode</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode parmProjectSalesCurrencyCode()
    {
        ProjSalesCurrencyCode   projSalesCurrencyCode;

        changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
        {
            projSalesCurrencyCode = ProjTable::find(payrollEarningStatementLine.ProjId).currencyId();
        }

        return projSalesCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesPrice</Name>
				<Source><![CDATA[
    public SalesPrice parmProjectSalesPrice()
    {
        SalesPrice projectSalesPrice;
        ResourceRecId resource;

        changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
        {
            resource = ResourceFacade::findByWorker(payrollEarningStatement.Worker);

            if (this.parmProjectTransType() == ProjTransType::Hour)
            {
                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
					payrollEarningStatementLine.ProjId,
                    resource,
                    payrollEarningStatementLine.ProjCategoryId,
                    payrollEarningStatementLine.ProjLinePropertyId,
                    payrollEarningStatementLine.EarningRate,
                    this.parmProjectSalesCurrencyCode(),
                    payrollEarningStatementLine.EarningDate);
                [projectSalesPrice] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams);
            }
            else
            {
                ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
					payrollEarningStatementLine.ProjId,
                    resource,
                    payrollEarningStatementLine.ProjCategoryId,
                    payrollEarningStatementLine.EarningRate,
                    this.parmTransactionCurrencyCode(),
                    this.parmProjectSalesCurrencyCode(),
                    this.parmAccountingDate()
                    );
                [projectSalesPrice] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);
            }
        }

        return projectSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxGroup parmProjectSalesTaxGroup()
    {
        ProjTaxGroup    projTaxGroup;

        changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
        {
            projTaxGroup = ProjParameters::taxGroupInvoice(this.parmProjectId());
        }

        return projTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesUnit</Name>
				<Source><![CDATA[
    public SalesUnit parmProjectSalesUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectTransactionId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmProjectTransactionId()
    {
        CostControlTransCommittedCost   costControlTransCommittedCost;

        changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
        {
            if (!projTransId)
            {
                select firstonly ProjTransId from costControlTransCommittedCost
                where costControlTransCommittedCost.SourceDocumentLine == this.parmSourceDocumentLine().RecId;

                projTransId = costControlTransCommittedCost.ProjTransId;
                if (!projTransId)
                {
                    projTransId = ProjCostTrans::newTransId();
                }
            }
        }

        return projTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectTransType</Name>
				<Source><![CDATA[
    public ProjTransType parmProjectTransType()
    {
        PayrollEarningCode earningCode = PayrollEarningCode::find(payrollEarningStatementLine.EarningCode);
        ProjTransType projTransType;

        if (earningCode.QuantityUnit == PayrollQuantityUnit::Hours)
        {
            projTransType = ProjTransType::Hour;
        }
        else
        {
            projTransType = ProjTransType::Cost;
        }

        return projTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity()
    {
        return payrollEarningStatementLine.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityDecimalPlaces</Name>
				<Source><![CDATA[
    public Decimals parmQuantityDecimalPlaces()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return Ledger::accountingCurrency(this.parmLegalEntityRecId());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>