<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchTableLedgerCovType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesPurchTableLedgerCovType</c> class updates cash flow forecasts for open orders.
/// </summary>
internal abstract class SalesPurchTableLedgerCovType implements SalesPurchTableLedgerCovIUpdateLedgerCov
{
    protected SalesPurchTableLedgerCovContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cash flow forecasts.
    /// </summary>
    [Wrappable(false)]
    public void updateLedgerCov()
    {
        TransDate invoiceDate = this.determineInvoiceDate();

        int invoiceLineCount = this.processInvoices(invoiceDate);
        if (invoiceLineCount > 0)
        {
            this.processPayments(invoiceDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvoices</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected int processInvoices(
        TransDate _invoiceDate)
    {
        return this.processAllInvoiceLines(_invoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAllInvoiceLines</Name>
				<Source><![CDATA[
    private int processAllInvoiceLines(TransDate _invoiceDate)
    {
        int invoiceLineCount;

        Query q = contract.buildInvoiceLineDetailsQuery();
        QueryRun qr = new QueryRun(q);
        while (qr.next())
        {
            SalesPurchLine salesPurchLine = qr.get(contract.parmSalesPurchLineTableId());

            SalesPurchLineInterface salesPurchLineInterface = salesPurchLine.salesPurchLineInterface();

            this.processInvoiceLine(_invoiceDate, salesPurchLineInterface);

            invoiceLineCount++;
        }

        return invoiceLineCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvoiceLine</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void processInvoiceLine(TransDate _invoiceDate, SalesPurchLineInterface _salesPurchLineInterface)
    {
        UnitQty qty = _salesPurchLineInterface.parmRemainFinancialQty() + _salesPurchLineInterface.parmRemainPhysicalQty();;

        AmountCur lineAmount = _salesPurchLineInterface.calcLineAmountExclTax(qty, _invoiceDate, contract.tax()) * contract.parmSign();
        AmountCur lineDiscountAmount = _salesPurchLineInterface.calcLineDiscExclTax(qty, _invoiceDate) * contract.parmSign();

        this.updateLedgerCovForInvoiceLineSalesReceipt(_invoiceDate, _salesPurchLineInterface, -(lineAmount + lineDiscountAmount));
        this.updateLedgerCovForInvoiceLineDisc(_invoiceDate, _salesPurchLineInterface, lineDiscountAmount);
        this.updateLedgerCovForInvoiceLineMarkup(_invoiceDate, qty, _salesPurchLineInterface, lineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovForInvoiceLineSalesReceipt</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected final void updateLedgerCovForInvoiceLineSalesReceipt(
        TransDate _invoiceDate,
        SalesPurchLineInterface _salesPurchLineInterface,
        AmountCur _invoiceAmount)
    {
        contract.parmLedgerCoverage().updateSum(
            _invoiceDate,
            _salesPurchLineInterface.parmPostingSalesReceipt(),
            LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_salesPurchLineInterface.parmAccountSalesReceiptLedgerDimension()),
            _salesPurchLineInterface.parmDefaultDimension(),
            _salesPurchLineInterface.parmCurrencyCode(),
            _invoiceAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovForInvoiceLineDisc</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected final void updateLedgerCovForInvoiceLineDisc(
        TransDate _invoiceDate,
        SalesPurchLineInterface _salesPurchLineInterface,
        AmountCur _discountValue)
    {
        contract.parmLedgerCoverage().updateSum(
            _invoiceDate,
            _salesPurchLineInterface.parmPostingDisc(),
            LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_salesPurchLineInterface.parmAccountDiscLedgerDimension()),
            _salesPurchLineInterface.parmDefaultDimension(),
            _salesPurchLineInterface.parmCurrencyCode(),
            _discountValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovForInvoiceLineMarkup</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected final void updateLedgerCovForInvoiceLineMarkup(
        TransDate _invoiceDate,
        SalesQty _qtySales,
        SalesPurchLineInterface _salesPurchLineInterface,
        AmountCur _invoiceAmount)
    {
        contract.parmMarkup().cov(
            _invoiceDate,
            _qtySales,
            _invoiceAmount,
            _salesPurchLineInterface.parmSalesPurchLine(),
            contract.parmLedgerCoverage(),
            _salesPurchLineInterface.parmDefaultDimension());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPayments</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected abstract void processPayments(
        TransDate _invoiceDate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineInvoiceDate</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected final TransDate determineInvoiceDate(
        TransDate _deliveryDate = contract.parmSalesPurchTableInterface().parmDeliveryDate())
    {
        TransDate invoiceDate = max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), _deliveryDate);
        TransDate adjustedInvoiceDate;

        if (CashflowInsightsActivation::isActive())
        {
            adjustedInvoiceDate = LedgerCovAvgAverageDaysCalculator::newFromContext(
                LedgerCovAvgExecutionContextFactory::newFromSelector(contract.parmLedgerCovAvgAverageDaysSelectorInvoice()))
                .adjustDateByAverage(contract.parmInvoiceCustVendTable().AccountNum, invoiceDate);
        }
        
        if (adjustedInvoiceDate == dateNull() && contract.parmDelivery2Invoice())
        {
            adjustedInvoiceDate = PaymTerm::advanceDate(contract.parmDelivery2Invoice(), invoiceDate);
        }


        return adjustedInvoiceDate != dateNull() ? adjustedInvoiceDate : invoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void init(
        SalesPurchTableLedgerCovContract _contract)
    {
        contract = _contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDueDate</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected final TransDate determineDueDate(
        TransDate _invoiceDate)
    {
        TransDate dueDate = contract.parmLedgerCoverage().determineDueDate(
            _invoiceDate,
            contract.parmSalesPurchTableInterface().parmPayment(),
            contract.parmSalesPurchTableInterface().parmPaymDayId(),
            contract.parmSalesPurchTableInterface().parmFixedDueDate());

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovForInvoiceSummary</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected final void updateLedgerCovForInvoiceSummary(
        TransDate _transDate,
        AmountCur _invoiceAmount)
    {
        contract.parmLedgerCoverage().updateSum(
            _transDate,
            contract.parmSummaryPostingType(),
            LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(contract.parmSalesPurchTableInterface().summaryLedgerDimension()),
            contract.parmSalesPurchTableInterface().parmDefaultDimension(),
            contract.parmSalesPurchTableInterface().parmCurrencyCode(),
            _invoiceAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovForInvoiceMarkup</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected final void updateLedgerCovForInvoiceMarkup(TransDate _invoiceDate, AmountCur _amount)
    {
        contract.parmMarkup().cov(
            _invoiceDate,
            1,
            _amount,
            contract.parmSalesPurchTableInterface().parmSalesPurchTable(),
            contract.parmLedgerCoverage(),
            contract.parmSalesPurchTableInterface().parmDefaultDimension());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovForInvoiceTaxes</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected final void updateLedgerCovForInvoiceTaxes(TransDate _invoiceDate)
    {
        contract.parmTaxCov().taxLedgerCov(contract.tax().tmpTaxWorkTrans(), _invoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>SalesTableLedgerCovType</c> class from a sales order.
    /// </summary>
    /// <param name = "_ledgerCoverage">The cash flow forecasting calculations.</param>
    /// <param name = "_salesPurchTable">The sales or purchase order.</param>
    /// <returns>A new instance of <c>SalesPurchTableLedgerCovIUpdateLedgerCov</c> interface.</returns>
    [Wrappable(false)]
    internal static SalesPurchTableLedgerCovIUpdateLedgerCov newFromDocument(
        LedgerCoverage _ledgerCoverage,
        SalesPurchTable _salesPurchTable)
    {
        #ISOCountryRegionCodes

        SalesPurchTableLedgerCovContract contract = SalesPurchTableLedgerCovContract::newFromSalesPurchTable(_ledgerCoverage, _salesPurchTable);

        SalesPurchTableLedgerCovIUpdateLedgerCov instance;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES])
            || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR])
            || BankLCExportFeatureChecker::checkBankLCExportEnabled())
        {
            if (contract.parmSalesPurchLineTableId() == tableNum(SalesLine))
            {
                instance = new SalesTableLedgerCovTypeAXL();
            }
            else
            {
                instance = new PurchTableLedgerCovTypeAXL();
            }
        }

        if (instance == null && contract.parmSalesPurchTableInterface().parmPaymentSched() != '')
        {
            if (contract.parmSalesPurchLineTableId() == tableNum(SalesLine))
            {
                instance = new SalesTableLedgerCovTypePaymSched();
            }
            else
            {  
                PurchTable purchTable = contract.parmSalesPurchTableInterface().parmSalesPurchTable();

                if ((purchTable.ChangeRequestRequired == NoYes::No) || (contract.doesPaymentScheduleExist()))
                {
                    instance = new PurchTableLedgerCovTypePaymSched();
                }
            }
        }

        if (instance == null && CashflowInsightsActivation::isActive())
        {
            if (contract.parmSalesPurchLineTableId() == tableNum(SalesLine))
            {
                instance = new SalesTableLedgerCovTypeByLine();
            }
            else
            { 
                instance = new SalesPurchTableLedgerCovTypeByLine();
            }
        }

        if (instance == null)
        {
            instance = new SalesPurchTableLedgerCovTypeByTable();
        }

        instance.init(contract);

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>