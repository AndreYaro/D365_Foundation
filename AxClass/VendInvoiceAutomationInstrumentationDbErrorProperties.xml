<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationInstrumentationDbErrorProperties</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides database error properties for invoice automation.
/// </summary>
internal final class VendInvoiceAutomationInstrumentationDbErrorProperties
{
    // Custom Properties
    private const str InvoiceRecId = 'InvoiceRecId';
    private const str DeadLock = 'DeadLock';
    private const str DuplicateKey = 'DuplicateKey';
    private const str Exception = 'Exception';
    private const str Error = 'Error';
    private const str UpdateConflict = 'UpdateConflict';
    private const str UpdateConflictNotRecovered = 'UpdateConflictNotRecoverd';

    private SysInstrumentationActivityContext activityContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromActivityContext</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationInstrumentationDbErrorProperties constructFromActivityContext(SysInstrumentationActivityContext _activityContext)
    {
        VendInvoiceAutomationInstrumentationDbErrorProperties dbErrorProperties = new VendInvoiceAutomationInstrumentationDbErrorProperties();

        dbErrorProperties.activityContext = _activityContext;

        return dbErrorProperties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deadLockProperty</Name>
				<Source><![CDATA[
    internal void deadLockProperty(RecId _recId)
    {
        activityContext.addCustomProperty(
            VendInvoiceAutomationInstrumentationFormatting::segmentedName(DeadLock, InvoiceRecId), any2Str(_recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateKeyProperty</Name>
				<Source><![CDATA[
    internal void duplicateKeyProperty(RecId _recId)
    {
        activityContext.addCustomProperty(
            VendInvoiceAutomationInstrumentationFormatting::segmentedName(DuplicateKey, InvoiceRecId), any2Str(_recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exceptionProperty</Name>
				<Source><![CDATA[
    internal void exceptionProperty(RecId _recId, str _message)
    {
        activityContext.addCustomProperty(Exception, strFmt('%1 %2: %3', InvoiceRecId, _recId, _message));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConflictProperty</Name>
				<Source><![CDATA[
    internal void updateConflictProperty(RecId _recId, boolean _notRecovered = false)
    {
        if (_notRecovered)
        {
            activityContext.addCustomProperty(
                VendInvoiceAutomationInstrumentationFormatting::segmentedName(UpdateConflictNotRecovered, InvoiceRecId), any2Str(_recId));
        }
        else
        {
            activityContext.addCustomProperty(
                VendInvoiceAutomationInstrumentationFormatting::segmentedName(UpdateConflict, InvoiceRecId), any2Str(_recId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorProperty</Name>
				<Source><![CDATA[
    internal void errorProperty(RecId _recId)
    {
        activityContext.addCustomProperty(Error, strFmt('%1: %2', InvoiceRecId, _recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>customErrorProperty</Name>
				<Source><![CDATA[
    internal void customErrorProperty(str _errorMessage)
    {
        activityContext.addCustomProperty(Error, _errorMessage);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>