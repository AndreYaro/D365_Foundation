<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSMarkupAdjustment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSMarkupAdjustment</c> class is used to run markup adjustment
/// </summary>
class TMSMarkupAdjustment extends MarkupAdjustment
{
    VendInvoiceTrans    invoiceTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
	/// <summary>
	/// Runs markup adjustment.
	/// </summary>
    void  run()
    {
        allocation = MarkupAllocation::newMarkupAllocation(vendInvoiceJour);

        postingDate = allocation.postingDate() ? allocation.postingDate() : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        storno      = allocation.storno() ? allocation.storno() : NoYes::No;

        ttsbegin;

        NumberSeq numberSeq = NumberSeq::newGetVoucher(PurchParameters::numRefPurchMarkupVoucher());

        invoiceVoucher = numberSeq.voucher();
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                              SysModule::Purch,
                                              numberSeq.parmVoucherSequenceCode());

        ledgerVoucher.parmCheckBlockedDimensions(false);
        ledgerVoucher.parmCustomDetailLevel(true);  // records are summed according to ledgerVoucherTransObject.parmRecId

        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(invoiceVoucher,
                                                              postingDate,
                                                              SysModule::Purch,
                                                              LedgerTransType::Purch,
                                                              storno);
        
        TransactionTxt transactionTxt = this.initializeTransactionTxt();
        ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        this.adjustCharges();

        ledgerVoucher.end();

        TransactionLog::create(this.transactionLogType(), this.transactionLogTxt());
        ttscommit;

        numberSeq.used();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>