<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPlannedCrossDockingInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides activities for planned cross docking instrumentation logging.
/// </summary>
internal final class WHSPlannedCrossDockingInstrumentationActivities
{
    private const str ActivityNamePrefix = 'PlannedCrossDocking.';

    private WHSInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        private void new(WHSInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    public static WHSPlannedCrossDockingInstrumentationActivities newFromLogger(WHSInstrumentationLogger _logger)
    {
        return new WHSPlannedCrossDockingInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossDock</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext crossDock()
    {
        return logger.activityContext(logger.activity(ActivityNamePrefix + 'CrossDock'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossDocked</Name>
				<Source><![CDATA[
    public void crossDocked(
        SysInstrumentationActivityContext   _activityContext, 
        boolean                             _crossDockResult, 
        boolean                             _foundTemplate,
        int                                 _templateCount)
    {
        _activityContext.addCustomProperty('CrossDock.Result', any2Str(_crossDockResult));
        _activityContext.addCustomProperty('CrossDock.FoundTemplate', any2Str(_foundTemplate));
        _activityContext.addCustomProperty('CrossDock.TemplateCount', any2Str(_templateCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTemplateFilter</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext checkTemplateFilter()
    {
        return logger.activityContext(logger.activity(ActivityNamePrefix + 'CheckTemplateFilter'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkedTemplateFilter</Name>
				<Source><![CDATA[
    public void checkedTemplateFilter(
        SysInstrumentationActivityContext   _activityContext,
        boolean                             _matchingFilter)
    {
        _activityContext.addCustomProperty('CheckTemplateFilter.Result', any2Str(_matchingFilter));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadLineQty</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext validateLoadLineQty(WHSCrossDockDemandRequirements _demandRequirements)
    {
        var activity = logger.activity(ActivityNamePrefix + 'ValidateLoadLineQty');
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        activityContext.addCustomProperty('ValidateLoadLineQty.DemandRequirements', any2Str(_demandRequirements));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatedLoadLineQty</Name>
				<Source><![CDATA[
    public void validatedLoadLineQty(
        SysInstrumentationActivityContext   _activityContext,
        boolean                             _validQty)
    {
        _activityContext.addCustomProperty('ValidateLoadLineQty.ValidQty', any2Str(_validQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLoadLineQuantities</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext calculateLoadLineQuantities()
    {
        return logger.activityContext(logger.activity(ActivityNamePrefix + 'CalculateLoadLineQuantities'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>planCrossDockingFromMarking</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext planCrossDockingFromMarking()
    {
        return logger.activityContext(logger.activity(ActivityNamePrefix + 'PlanCrossDockingFromMarking'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>plannedCrossDockingFromMarking</Name>
				<Source><![CDATA[
    public void plannedCrossDockingFromMarking(
        SysInstrumentationActivityContext   _activityContext,
        int                                 _markingCount, 
        int                                 _plannedCount,
        int                                 _failedCount)
    {
        _activityContext.addCustomProperty('PlanCrossDockingFromMarking.MarkingCount', any2Str(_markingCount));
        _activityContext.addCustomProperty('PlanCrossDockingFromMarking.PlannedCount', any2Str(_plannedCount));
        _activityContext.addCustomProperty('PlanCrossDockingFromMarking.FailedCount', any2Str(_failedCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>planCrossDockingFromSupplySources</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext planCrossDockingFromSupplySources()
    {
        return logger.activityContext(logger.activity(ActivityNamePrefix + 'PlanCrossDockingFromSupplySources'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>plannedCrossDockingFromSupplySources</Name>
				<Source><![CDATA[
    public void plannedCrossDockingFromSupplySources(
        SysInstrumentationActivityContext   _activityContext,
        int                                 _supplySourceCount,
        int                                 _plannedCount,
        boolean                             _foundEnoughSupply)
    {
        _activityContext.addCustomProperty('PlanCrossDockingFromSupplySources.SupplySourceCount', any2Str(_supplySourceCount));
        _activityContext.addCustomProperty('PlanCrossDockingFromSupplySources.PlannedCount', any2Str(_plannedCount));
        _activityContext.addCustomProperty('PlanCrossDockingFromSupplySources.FoundEnoughSupply', any2Str(_foundEnoughSupply));
    }

]]></Source>
			</Method>
			<Method>
				<Name>planCrossDockingFromSupplySource</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext planCrossDockingFromSupplySource(WHSCrossDockSupplySource _supplySource)
    {
        var activity = logger.activity(ActivityNamePrefix + 'PlanCrossDockingFromSupplySource');
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        activityContext.addCustomProperty('CrossDockTemplate.SupplySource', any2Str(_supplySource));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plannedCrossDockingFromSupplySource</Name>
				<Source><![CDATA[
    public void plannedCrossDockingFromSupplySource(
        SysInstrumentationActivityContext   _activityContext,
        int                                 _supplyCount,
        int                                 _plannedCount)
    {
        _activityContext.addCustomProperty('PlanCrossDockingFromSupplySource.SupplyCount', any2Str(_supplyCount));
        _activityContext.addCustomProperty('PlanCrossDockingFromSupplySource.PlannedCount', any2Str(_plannedCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyPlannedCrossDocking</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext verifyPlannedCrossDocking()
    {
        return logger.activityContext(logger.activity(ActivityNamePrefix + 'VerifyPlannedCrossDocking'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifiedPlannedCrossDocking</Name>
				<Source><![CDATA[
    public void verifiedPlannedCrossDocking(
        SysInstrumentationActivityContext   _activityContext,
        boolean                             _isValid)
    {
        _activityContext.addCustomProperty('VerifyPlannedCrossDocking.IsValid', any2Str(_isValid));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSupplySource</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext validateSupplySource()
    {
        return logger.activityContext(logger.activity(ActivityNamePrefix + 'ValidateSupplySource'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatedSupplySource</Name>
				<Source><![CDATA[
    public void validatedSupplySource(
        SysInstrumentationActivityContext   _activityContext,
        boolean                             _isValid,
        WHSCrossDockSupplySource            _supplySource,
        boolean                             _isSupportedSupplySource)
    {
        _activityContext.addCustomProperty('ValidateSupplySource.IsValid', any2Str(_isValid));
        _activityContext.addCustomProperty('CrossDockTemplate.SupplySource', any2Str(_supplySource));
        _activityContext.addCustomProperty('CrossDockTemplate.IsSupportedSupplySource', any2Str(_isSupportedSupplySource));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMinMaxTimeWindow</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext validateMinMaxTimeWindow(
        WHSCrossDockValidateTimeWindow  _validateTimeWindow,
        WHSCrossDockMaxTimeUnit         _maxTimeUnit,
        WHSCrossDockMinTimeUnit         _minTimeUnit)
    {
        var activity = logger.activity(ActivityNamePrefix + 'ValidateMinMaxTimeWindow');
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        activityContext.addCustomProperty('CrossDockTemplate.ValidateTimeWindow', any2Str(_validateTimeWindow));
        activityContext.addCustomProperty('CrossDockTemplate.MaxTimeUnit', any2Str(_maxTimeUnit));
        activityContext.addCustomProperty('CrossDockTemplate.MinTimeUnit', any2Str(_minTimeUnit));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatedMinMaxTimeWindow</Name>
				<Source><![CDATA[
    public void validatedMinMaxTimeWindow(
        SysInstrumentationActivityContext   _activityContext,
        boolean                             _isValid)
    {
        _activityContext.addCustomProperty('ValidateMinMaxTimeWindow.IsValid', any2Str(_isValid));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>