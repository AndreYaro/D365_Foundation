<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransReportByIdTransactionQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Contains the SQL query calls necessary to select the tax transactions to be processed to find the tax amounts for <c>TaxTransReportById</c>.
/// </summary>
class TaxTransReportByIdTransactionQuery
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create a new instance of the class.
    /// </summary>
    /// <returns>A new instance of the class.</returns>
    public static TaxTransReportByIdTransactionQuery construct()
    {
        return new TaxTransReportByIdTransactionQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTaxTrans</Name>
				<Source><![CDATA[
    private void prepareTaxTrans(TaxTrans _taxTrans, CurrencyCode _taxReportCurrencyCode)
    {
        if (_taxReportCurrencyCode)
        {
            _taxTrans.TaxAmount = _taxTrans.TaxAmountCur;
            _taxTrans.TaxBaseAmount = _taxTrans.TaxBaseAmountCur;
            _taxTrans.TaxInCostPriceMST = _taxTrans.TaxInCostPriceCur;
        }

        // If we have IntracomVAT, then we need to reverse the sign of the TaxBaseAmount in order to calculate the correct report amount. This strategy aligns with the approach
        // taken in the generation of the posted sales tax report
        _taxTrans.TaxBaseAmount = _taxTrans.IntracomVAT ? -_taxTrans.TaxBaseAmount : _taxTrans.TaxBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingAmountsForNonCreditNoteTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Executes a query to loop through all non credit note tax transactions to retrieve the sum of the tax amounts
    ///  for the tax report ids present on the tax code.
    /// </summary>
    /// <param name = "_taxTransReportByIdInsert">
    ///  Instance of the <c>TaxTransReportByIdInsert</c> class that knows how to insert the records into the <c>TmpTaxReportById</c>
    ///  table buffer to get the tax amount by tax direction and report id.
    /// </param>
    /// <param name = "_tmpTaxReportById">
    ///  The temporary table buffer to store the summed tax amounts for the tax report ids on the tax code.
    /// </param>
    /// <param name = "_taxCode">
    ///  The tax code to find tax transactions for.
    /// </param>
    /// <param name = "_taxReportPeriod">
    ///  The tax report period to restrict the tax transactions to.
    /// </param>
    /// <param name = "_taxReportCollection">
    ///  The tax report id record to restrict the summed tax amounts returned in the temporary table buffer.
    ///  If null then all tax report ids on the tax code will have an amount returned if applicable.
    /// </param>
    /// <param name = "_taxReportLayout">
    ///  The tax report layout. It provides additonal rules on how to retrieve the amounts for different tax report codes.
    /// </param>
    /// <returns>
    ///  The temporary table buffer provided. The temporary table buffer will be updated to include records for each tax
    ///  report id based on the restriction of the provided or not provided <c>TaxReportCollection</c> record.
    ///  Any existing records will be summed with any newly added records if they share the same tax report id.
    /// </returns>
    public TmpTaxReportById getReportingAmountsForNonCreditNoteTransactions(
        TaxTransReportByIdTableBuilder  _tableBuilder,
        TmpTaxReportById                _tmpTaxReportById,
        TaxCode                         _taxCode,
        TaxReportPeriod                 _taxReportPeriod,
        TaxReportCollection             _taxReportCollection,
        TaxReportLayout                 _taxReportLayout)
    {
        TaxTrans taxTrans;
        CurrencyCode taxReportCurrencyCode;

        TaxReportByIdContext context = TaxReportByIdContext::current();
        if (context && context.taxReportCurrencyCode)
        {
            taxReportCurrencyCode = context.taxReportCurrencyCode;
        }

        while select    sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST),
                        sum(TaxAmountCur), sum(TaxBaseAmountCur), sum(TaxInCostPriceCur)
                    from      taxTrans
                    group by  TaxDirection, TaxCode, IntracomVAT
                    where     taxTrans.TaxCode        == _taxCode                &&
                            // <GEEU>
                            (taxTrans.TransDate    >= _taxReportPeriod.FromDate       &&
                                taxTrans.TransDate    <= _taxReportPeriod.ToDate)        &&
                            // </GEEU>
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReporting         &&
                            (!taxReportCurrencyCode || taxTrans.CurrencyCode == taxReportCurrencyCode) &&
                            (((taxTrans.TaxBaseAmount  > 0 || (taxTrans.TaxBaseAmount == 0 && TaxTrans.TaxAmount > 0))     &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                            (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                            taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                            ((taxTrans.TaxBaseAmount  < 0 || (taxTrans.TaxBaseAmount == 0 && TaxTrans.TaxAmount < 0))     &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                            (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                            taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                            ((taxTrans.TaxBaseAmount  < 0 || (taxTrans.TaxBaseAmount == 0 && TaxTrans.TaxAmount < 0))     &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                            (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                            ((taxTrans.TaxBaseAmount  > 0 || (taxTrans.TaxBaseAmount == 0 && TaxTrans.TaxAmount > 0))     &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                            (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
        {
            this.prepareTaxTrans(taxTrans, taxReportCurrencyCode);

            _tmpTaxReportById = _tableBuilder.getTaxAmountByTaxDirectionAndReportId(taxTrans,
                                                                                    _tmpTaxReportById,
                                                                                    NoYes::No,
                                                                                    _taxReportCollection,
                                                                                    _taxReportLayout);
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingAmountsForCreditNoteTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Executes a query to loop through all credit note tax transactions to retrieve the sum of the tax amounts
    ///  for the tax report ids present on the tax code.
    /// </summary>
    /// <param name = "_taxTransReportByIdInsert">
    ///  Instance of the <c>TaxTransReportByIdInsert</c> class that knows how to insert the records into the <c>TmpTaxReportById</c>
    ///  table buffer to get the tax amount by tax direction and report id.
    /// </param>
    /// <param name = "_tmpTaxReportById">
    ///  The temporary table buffer to store the summed tax amounts for the tax report ids on the tax code.
    /// </param>
    /// <param name = "_taxCode">
    ///  The tax code to find tax transactions for.
    /// </param>
    /// <param name = "_taxReportPeriod">
    ///  The tax report period to restrict the tax transactions to.
    /// </param>
    /// <param name = "_taxReportCollection">
    ///  The tax report id record to restrict the summed tax amounts returned in the temporary table buffer.
    ///  If null then all tax report ids on the tax code will have an amount returned if applicable.
    /// </param>
    /// <param name = "_taxReportLayout">
    ///  The tax report layout. It provides additonal rules on how to retrieve the amounts for different tax report codes.
    /// </param>
    /// <returns>
    ///  The temporary table buffer provided. The temporary table buffer will be updated to include records for each tax
    ///  report id based on the restriction of the provided or not provided <c>TaxReportCollection</c> record.
    ///  Any existing records will be summed with any newly added records if they share the same tax report id.
    /// </returns>
    public tmpTaxReportById getReportingAmountsForCreditNoteTransactions(
        TaxTransReportByIdTableBuilder  _tableBuilder,
        TmpTaxReportById                _tmpTaxReportById,
        TaxCode                         _taxCode,
        TaxReportPeriod                 _taxReportPeriod,
        TaxReportCollection             _taxReportCollection,
        TaxReportLayout                 _taxReportLayout)
    {
        TaxTrans taxTrans;
        CurrencyCode taxReportCurrencyCode;

        TaxReportByIdContext context = TaxReportByIdContext::current();
        if (context && context.taxReportCurrencyCode)
        {
            taxReportCurrencyCode = context.taxReportCurrencyCode;
        }

        while select    sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST),
                        sum(TaxAmountCur), sum(TaxBaseAmountCur), sum(TaxInCostPriceCur)
                    from      taxTrans
                    group by  TaxDirection, TaxCode, IntracomVAT
                    where     taxTrans.TaxCode        == _taxCode                &&
                            // <GEEU>
                            (taxTrans.TransDate      >= _taxReportPeriod.FromDate       &&
                                taxTrans.TransDate      <= _taxReportPeriod.ToDate)        &&
                            // </GEEU>
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReporting         &&
                            (!taxReportCurrencyCode || taxTrans.CurrencyCode == taxReportCurrencyCode) &&
                            (((taxTrans.TaxBaseAmount  < 0 || (taxTrans.TaxBaseAmount == 0 && taxTrans.TaxAmount < 0))     &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                            (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                            ((taxTrans.TaxBaseAmount  > 0 || (taxTrans.TaxBaseAmount == 0 && taxTrans.TaxAmount > 0))     &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                            (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                            ((taxTrans.TaxBaseAmount  > 0 || (taxTrans.TaxBaseAmount == 0 && taxTrans.TaxAmount > 0))     &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                            (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                            ((taxTrans.TaxBaseAmount  < 0 || (taxTrans.TaxBaseAmount == 0 && taxTrans.TaxAmount < 0))     &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                            (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
        {
            this.prepareTaxTrans(taxTrans, taxReportCurrencyCode);

            _tmpTaxReportById = _tableBuilder.getTaxAmountByTaxDirectionAndReportId(taxTrans,
                                                                                    _tmpTaxReportById,
                                                                                    NoYes::Yes,
                                                                                    _taxReportCollection,
                                                                                    _taxReportLayout);
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>