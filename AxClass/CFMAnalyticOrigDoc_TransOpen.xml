<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticOrigDoc_TransOpen</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class opens a form to show origin documents of Analytic form.
/// </summary>
/// <remarks>
/// The instance of this class initializes from line of aggregated data and show filtered by its values origin documents.
/// </remarks>
[CFMJournalSourceAttribute(CFMJournalTransSourceType::PaymentRequest)]
public abstract class CFMAnalyticOrigDoc_TransOpen extends CFMAnalyticOrigDoc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDirPartyRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add dir party range to the datasource.
    /// </summary>
    /// <param name="_qbds">
    /// Datasource to apply range.
    /// </param>
    /// <param name="_valueFieldId">
    /// Field id of Party field in the data source.
    /// </param>
    protected void addDirPartyRange(QueryBuildDataSource _qbds, FieldId _valueFieldId)
    {
        QueryBuildDataSource qbdsCustVend = _qbds.addDataSource(this.custVendTableId());
        qbdsCustVend.relations(true);
        qbdsCustVend.joinMode(JoinMode::ExistsJoin);
        qbdsCustVend.addRange(this.custVendPartyFieldId()).value(queryValue(analyticalTable.(_valueFieldId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterToQuery</Name>
				<Source><![CDATA[
    public void addFilterToQuery(Query _query, QueryBuildDataSource _qbds)
    {
        boolean setCompanyFilter = true;

        if (!_query || !_qbds || _qbds.table() != this.transOpenTableId())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        _query.allowCrossCompany(true);

        QueryBuildDataSource qbdsTrans = _query.dataSourceTable(this.transTableId());
        if (!qbdsTrans)
        {
            qbdsTrans = _qbds.addDataSource(this.transTableId());
            qbdsTrans.relations(true);
            qbdsTrans.joinMode(JoinMode::ExistsJoin);
        }

        _qbds.addRange(this.transOpenDueDateFieldId()).value(queryValue(transDate));

        for (int i = 1; i <= analyticalTable.Level; i++)
        {
            if (!fieldSourceTargetMap.exists(i))
            {
                throw error(strFmt("@SYS19378",funcName()));
            }

            FieldId sourceFieldId, targetFieldId, targetFieldStrId, targetDisplayFieldId;
            Name attributeName;
        
            [sourceFieldId, attributeName, targetFieldId, targetFieldStrId, targetDisplayFieldId] = fieldSourceTargetMap.lookup(i);

            switch (sourceFieldId)
            {
                case fieldNum(CFMJournalTrans, AccountNumParty):
                    this.addDirPartyRange(_qbds, targetFieldId);
                    break;

                case fieldNum(CFMJournalTrans, CashFlowDirection):

                    if (analyticalTable.(targetFieldId) == CFMCashFlowDirection::Inflow)
                    {
                        _qbds.addRange(this.transOpenAmountCurFieldId()).value(queryValue('>0'));
                    }
                    else
                    {
                        _qbds.addRange(this.transOpenAmountCurFieldId()).value(queryValue('<0'));
                    }
                    break;

                case fieldNum(CFMJournalTrans, CurrencyCode):
                    qbdsTrans.addRange(this.transCurCodeFieldId()).value(queryValue(analyticalTable.(targetFieldId)));
                    break;

                case fieldNum(CFMJournalTrans, SourceDataArea):
                    sourceDataAreaIds = [analyticalTable.(targetFieldId)];
                    _query.addCompanyRange(queryValue(analyticalTable.(targetFieldId)));
                    setCompanyFilter = false;
                    break;

                case fieldNum(CFMJournalTrans, PaymMode):
                    qbdsTrans.addRange(this.transPaymModeFieldId()).value(queryValue(analyticalTable.(targetFieldId)));
                    break;

                case fieldNum(CFMJournalTrans, LedgerDimension):
                    this.addDimAttributeRange(_query, qbdsTrans.name(), this.transDefaultDimensionFieldStr(), targetFieldStrId, attributeName);
                    break;
            }
        }

        this.addCompanyRangeToQuery(_query);

        if (CFMParameters::isPaymentRequestsEnabled())
        {
            QueryBuildDataSource qbdsPaymentRequest = _qbds.addDataSource(tableNum(CFMPaymentRequestTable));
            qbdsPaymentRequest.relations(true);
            qbdsPaymentRequest.joinMode(JoinMode::NoExistsJoin);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendPartyFieldId</Name>
				<Source><![CDATA[
    abstract protected FieldId custVendPartyFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTableId</Name>
				<Source><![CDATA[
    abstract protected TableId custVendTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCurCodeFieldId</Name>
				<Source><![CDATA[
    abstract protected FieldId transCurCodeFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDefaultDimensionFieldStr</Name>
				<Source><![CDATA[
    abstract protected FieldName transDefaultDimensionFieldStr()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpenAmountCurFieldId</Name>
				<Source><![CDATA[
    abstract protected FieldId transOpenAmountCurFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpenDueDateFieldId</Name>
				<Source><![CDATA[
    abstract protected FieldId transOpenDueDateFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpenTableId</Name>
				<Source><![CDATA[
    abstract protected TableId transOpenTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPaymModeFieldId</Name>
				<Source><![CDATA[
    abstract protected FieldId transPaymModeFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    abstract protected TableId transTableId()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>