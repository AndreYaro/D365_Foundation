<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventProductDimension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventProductDimension</c> class is the base class for product dimensions.
/// </summary>
abstract class InventProductDimension extends InventDimension
{
    static private List           productDimensions;
    static private List           enabledProductDimensions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkValueForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the product dimension value for an item.
    /// </summary>
    /// <param name = "_inventTable">The item.</param>
    /// <param name = "_value">The value to check.</param>
    /// <returns>true if valid; otherwise, false.</returns>
    public boolean checkValueForItem(InventTable _inventTable, anytype _value)
    {
        if (this.isActiveForItem(_inventTable))
        {
            if (!_value)
            {
                return checkFailed(strFmt("@SYS73924", this.label(), _inventTable.ItemId));
            }
            
            if (this.hasTableRelation())
            {
                return this.checkExistsValueForItem(_inventTable, _value);
            }
        }
        else if (_value)
        {
            return checkFailed(strFmt("@SYS73923", _inventTable.ItemId, this.label()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistsValueForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the product dimension value exists for an item.
    /// </summary>
    /// <param name = "_inventTable">The item.</param>
    /// <param name = "_value">The value to check.</param>
    /// <param name = "_silence">A Boolean describing if the validation should write to the Infolog.</param>
    /// <returns>true if valid; otherwise, false.</returns>
    public boolean checkExistsValueForItem(InventTable _inventTable, anytype _value, boolean _silence = false)
    {
        if (!this.isActiveForItem(_inventTable) || !this.hasTableRelation())
        {
            return true;
        }

        container       key = [_inventTable.Product, this.parmInventDimFieldId(), _value];
        UnknownNoYes    cache = SysTransactionScopeCache::get(funcName(), key, UnknownNoYes::Unknown);

        switch (cache)
        {
            case UnknownNoYes::Yes:
                return true;

            case UnknownNoYes::Unknown:
                boolean result = EcoResProductVariantDimValue::newEcoResProductVariantDimValue(this.parmInventDimFieldId()).checkExist(_inventTable.Product, any2Str(_value), _silence);

                //Only cache when true, to avoid suppressing error messages for future callers
                if (result)
                {
                    SysTransactionScopeCache::set(funcName(), key, UnknownNoYes::Yes);
                }

                return result;

            default:
                Debug::assert(false); // Should never get here
                break;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the dimension is active for an item.
    /// </summary>
    /// <param name = "_inventTable">The item.</param>
    /// <returns>true if active; otherwise, false.</returns>
    public boolean isActiveForItem(InventTable _inventTable)
    {
        return EcoResProductDimGroupSetup::newItemId(_inventTable.ItemId).getFieldSetup(this.parmInventDimFieldId()).isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultValueForItem</Name>
				<Source><![CDATA[
    public abstract anytype parmDefaultValueForItem(InventTable _inventTable, anytype _value = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAlternativeValueForItem</Name>
				<Source><![CDATA[
    public abstract anytype parmAlternativeValueForItem(InventTable _inventTable, anytype _value = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimensionRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the corresponding record containing the dimension's information; if applicable.
    /// </summary>
    /// <param name = "_value">The value to find the record for.</param>
    /// <returns>The corresponding record. null if not applicable to this dimension.</returns>
    [SysObsolete("Use InventProductDimension.findDimensionByNaturalKey() instead.", true, 30\11\2017)]
    public Common findDimensionRecord(anytype _value)
    {
        return this.findDimensionByNaturalKey(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateDimensionByNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the corresponding record containing the dimension's information; if applicable.
    /// </summary>
    /// <param name = "_value">The value to find the record for.</param>
    /// <returns>The corresponding record. null if not applicable to this dimension.</returns>
    [Hookable(false)]
    public final Common findOrCreateDimensionByNaturalKey(anytype _value)
    {
        Common dimensionFound = this.findDimensionByNaturalKey(_value);

        if (dimensionFound)
        {
            return dimensionFound;
        }

        Common dimensionCreated = this.createDimensionByNaturalKey(_value);

        if (!dimensionCreated && 
            dimensionFound.TableId &&
            dimensionFound.TableId != tableNum(Common))
        {
            // Create the dimension record generically to support dimensions not overriding createDimensionByNaturalKey().
            dimensionCreated = this.createDimensionByNaturalKeyAndTableId(_value, dimensionFound.TableId);
        }

        return dimensionCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDimensionByNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the corresponding record containing the dimension's information; if applicable.
    /// </summary>
    /// <param name = "_value">The value for the dimension.</param>
    /// <returns>The corresponding record. null if not applicable to this dimension.</returns>
    protected Common createDimensionByNaturalKey(anytype _value)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDimensionByNaturalKeyAndTableId</Name>
				<Source><![CDATA[
    private Common createDimensionByNaturalKeyAndTableId(anytype _value, TableId _tableId)
    {
        DictTable dictTable = new DictTable(_tableId);
        if (dictTable)
        {
            DictIndex dictIndex = dictTable.indexObject(dictTable.replacementKey());
            if (dictIndex &&
                dictIndex.numberOfFields() == 1)
            {
                FieldId naturalKeyField = dictIndex.field(1);
                if (naturalKeyField)
                {
                    dictField dictField = dictTable.fieldObject(naturalKeyField);
                    if (dictField &&
                        dictField.baseType() == typeOf(_value))
                    {
                        Common dimension = dictTable.makeRecord();
                        dimension.(naturalKeyField) = _value;
                        dimension.insert();
                        return dimension;
                    }
                }
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimensionByNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the corresponding record for the table containing the dimension's information; if applicable.
    /// </summary>
    /// <param name = "_value">The value to find the record for.</param>
    /// <returns>The corresponding record. null if not applicable to this dimension.</returns>
    public Common findDimensionByNaturalKey(anytype _value)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDimensionNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the corresponding dimension value which is a dimension natural key.
    /// </summary>
    /// <param name = "_id">The record Id to find the key for.</param>
    /// <returns>The dimension natural key.</returns>
    public anytype retrieveDimensionNaturalKey(RecId _id)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDimensionNaturalKeyByProductId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the dimension natural key set for the product with <paramref name="_productRecId" /> Id.
    /// </summary>
    /// <param name = "_productRecId">A product id.</param>
    /// <returns>The dimension natural key.</returns>
    public anytype retrieveDimensionNaturalKeyByProductId(RecId _productRecId)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a dimension record for the variant; if applicable.
    /// </summary>
    /// <param name="_ecoResDistinctProductVariant">
    ///    The ID of a record in the <c>EcoResDistinctProductVariant</c> table.
    /// </param>
    /// <param name="_ecoResProductDimensionAttribute">
    ///    The record in the <c>EcoResProductDimensionAttribute</c> table.
    /// </param>
    /// <param name="_dimensionValue">
    ///    The ID of a dimension record that stores the dimension value.
    /// </param>
    public void createProductDimensionValue(
        EcoResDistinctProductVariant    _ecoResDistinctProductVariant,
        EcoResProductDimensionAttribute _ecoResProductDimensionAttribute,
        RefRecId                        _dimensionValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTranslationByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the translation, if one exists, for a given product master.
    /// </summary>
    /// <param name="_productMasterRecId">
    /// An integer value that represents the product master record id.
    /// </param>
    /// <param name="_dimensionValue">
    /// The dimension value. 
    /// </param>
    /// <param name="_languageId">
    /// The SystemLanguageId to find the translation for.
    /// </param>
    /// <returns>
    /// The translation for the product master.
    /// </returns>
    public abstract EcoResProductMasterDimValueTranslation findTranslationByProduct(EcoResProductRecId _productMasterRecId, anytype _dimensionValue, SystemLanguageId _languageId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveForProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the product dimension is active for the product master with Id <paramref name = "_productMasterId" />.
    /// </summary>
    /// <param name = "_productMasterId">A product master Id.</param>
    /// <returns>true if the product dimension is active for a product master; otherwise, false.</returns>
    public boolean isActiveForProductMaster(RecId _productMasterId)
    {
        RefRecId productDimensionGroupId = EcoResProductDimensionGroupProduct::findByProduct(_productMasterId).ProductDimensionGroup;

        return EcoResProductDimGroupSetup::newDimensionGroup(productDimensionGroupId).getFieldSetup(this.parmInventDimFieldId()).isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAffectingPrice</Name>
				<Source><![CDATA[
    public final boolean isAffectingPrice()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConsistent</Name>
				<Source><![CDATA[
    public final boolean isConsistent()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventItemSetupRelevant</Name>
				<Source><![CDATA[
    public final boolean isInventItemSetupRelevant()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemCoverageDimension</Name>
				<Source><![CDATA[
    public final boolean isItemCoverageDimension()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferReceiptMergeable</Name>
				<Source><![CDATA[
    public final boolean isTransferReceiptMergeable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferTransitReceiptMergeable</Name>
				<Source><![CDATA[
    public final boolean isTransferTransitReceiptMergeable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the current product dimension is supported by retail.
    /// </summary>
    /// <returns>true if the current product dimension is supported by retail; otherwise, false.</returns>
    public boolean isRetailSupported()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator of product dimensions.
    /// </summary>
    /// <returns>An enumerator of product dimensions.</returns>
    [Hookable(false)]
    static public InventDimensionEnumerator getEnumerator()
    {
        return InventDimensionEnumerator::newEnumerator(InventProductDimension::dimensions());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumeratorForEnabledDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator of only enabled product dimensions.
    /// </summary>
    /// <returns>An enumerator of enabled product dimensions.</returns>
    [Hookable(false)]
    static public InventDimensionEnumerator getEnumeratorForEnabledDimensions()
    {
        return InventDimensionEnumerator::newEnumerator(InventProductDimension::enabledDimensions());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumeratorForEnabledOrderedDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator of explicitly ordered product dimensions.
    /// </summary>
    /// <param name = "_inventDimFieldIdsOrder">A list of inventory dimension field Ids that defines the output order.</param>
    /// <returns>An enumerator of ordered product dimensions.</returns>
    [Hookable(false)]
    static public InventDimensionEnumerator getEnumeratorForEnabledOrderedDimensions(List _inventDimFieldIdsOrder = InventDim::dimProductDimFieldList())
    {
        return InventDimensionEnumerator::newEnumerator(InventProductDimension::orderedDimensions(_inventDimFieldIdsOrder));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a collection of product dimensions.
    /// </summary>
    /// <returns>A collection of product dimensions.</returns>
    static private List dimensions()
    {
        if (!productDimensions)
        {
            productDimensions = new List(Types::Class);
            var enum = InventDim::dimProductDimFieldList().getEnumerator();

            while (enum.moveNext())
            {
                InventProductDimension dim = InventDimension::singletonFromInventDimFieldId(enum.current()) as InventProductDimension;
                if (dim)
                {
                    productDimensions.addEnd(dim);
                }
            }
        }

        return productDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDimFromTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>InventDim</c> record with product dimensions set based on a table with product dimension fields.
    /// </summary>
    /// <param name = "_common">The table with product dimension fields.</param>
    /// <returns>An <c>InventDim</c> record with the product dimension set.</returns>
    static public InventDim createInventDimFromTable(Common _common)
    {
        InventDim inventDim;
        InventProductDimension::initInventDimFromTable(_common, inventDim);
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimFromTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an <c>InventDim</c> record with product dimensions from a record.
    /// </summary>
    /// <param name = "_common">The table with dimension values.</param>
    /// <param name = "_inventDim">The <c>InventDim</c> record to initialize.</param>
    static public void initInventDimFromTable(Common _common, InventDim _inventDim)
    {
        TableName tableName = tableId2Name(_common.TableId);
        var productDims = InventProductDimension::getEnumerator();

        while (productDims.moveNext())
        {
            InventProductDimension productDim = productDims.current();
            FieldId inventDimFieldId = productDim.parmInventDimFieldId();
            FieldId commonFieldId = productDim.fieldIdInTable(tableName);
            if (inventDimFieldId && commonFieldId)
            {
                _inventDim.(inventDimFieldId) = _common.(commonFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enabledDimensions</Name>
				<Source><![CDATA[
    static private List enabledDimensions()
    {
        if (!enabledProductDimensions)
        {
            enabledProductDimensions = new List(Types::Class);

            Enumerator enum = InventProductDimension::getEnumerator();

            while (enum.moveNext())
            {
                InventProductDimension dimension = enum.current();

                if (dimension.isEnabled())
                {
                    enabledProductDimensions.addEnd(dimension);
                }
            }
        }

        return enabledProductDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderedDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an ordered list of product dimensions.
    /// </summary>
    /// <param name = "_inventDimFieldIdsOrder">A list of inventory dimension field Ids that defines the output order.</param>
    /// <returns>A list of product dimensions.</returns>
    static private List orderedDimensions(List _inventDimFieldIdsOrder)
    {
        List orderedProductDimensions = new List(Types::Class);

        Set unorderedDimensionFieldIdsSet = InventDim::dimProductDimensionEnabledFieldSet();
        Set unorderedDimensionFieldIdsCopiedSet = new Set(Types::Integer);

        if (unorderedDimensionFieldIdsSet.empty())
        {
            return orderedProductDimensions;
        }

        Enumerator inventDimFieldIdOrderEnumerator = _inventDimFieldIdsOrder.getEnumerator();
        while (inventDimFieldIdOrderEnumerator.moveNext())
        {
            FieldId inventDimFieldId = inventDimFieldIdOrderEnumerator.current();

            orderedProductDimensions.addEnd(InventDimension::singletonFromInventDimFieldId(inventDimFieldId));
            unorderedDimensionFieldIdsCopiedSet.add(inventDimFieldId);
        }

        if (unorderedDimensionFieldIdsSet.elements() > unorderedDimensionFieldIdsCopiedSet.elements())
        {
            Enumerator unorderedDimensionFieldIdsSetLeftToCopyEnumerator = Set::difference(unorderedDimensionFieldIdsSet, unorderedDimensionFieldIdsCopiedSet).getEnumerator();

            while (unorderedDimensionFieldIdsSetLeftToCopyEnumerator.moveNext())
            {
                orderedProductDimensions.addEnd(InventDimension::singletonFromInventDimFieldId(unorderedDimensionFieldIdsSetLeftToCopyEnumerator.current()));
            }
        }

        return orderedProductDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a record with product dimensions based on an <c>InventDim</c> record.
    /// </summary>
    /// <param name = "_common">The table to initialize.</param>
    /// <param name = "_inventDim">The dimension values.</param>
    static public void initTableFromInventDim(Common _common, InventDim _inventDim)
    {
        TableName tableName = tableId2Name(_common.TableId);
        var productDims = InventProductDimension::getEnumerator();

        while (productDims.moveNext())
        {
            InventProductDimension productDim = productDims.current();
            FieldId inventDimFieldId = productDim.parmInventDimFieldId();
            FieldId commonFieldId = productDim.fieldIdInTable(tableName);
            if (inventDimFieldId && commonFieldId)
            {
                _common.(commonFieldId) = _inventDim.(inventDimFieldId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>