<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWHTMainAccDimensionListProvider_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxMainAccDimensionListProvider</c> class is a tax main account dimension list provider for
///    documented monetary amounts.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(MainAccountDimensionListProviderType), MainAccountDimensionListProviderType::WithHoldTax_IN)
]
class TaxWHTMainAccDimensionListProvider_IN extends MainAccountDimensionListProvider
{
    dataAreaId              taxDataAreaId;
    TaxWithholdCode         taxWithholdCode;
    TaxWithholdDirection_IN taxWithholdDirection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWithholdPostingDefaultAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets default account for posting Withholding tax
    /// </summary>
    /// <param name="_taxWithholdTable">
    /// Tax withhold buffer to check whether tax type is TCS or TDS
    /// </param>
    /// <returns>
    /// Returns Ledger dimension based on customer/vendor and Tax type is TCS or TDS and
    /// </returns>
    private LedgerDimensionDefaultAccount getWithholdPostingDefaultAcc(TaxWithholdTable _taxWithholdTable = null)
    {
        LedgerDimensionDefaultAccount       taxAccount;
        TaxWithholdSourceDocSubLineItem_IN  sourceDocumentLine;
        TaxWithholdMap_IN                   taxWithholdMap;

        sourceDocumentLine = accountingRule.parmSourceDocumentLineItem();
        taxWithholdMap = sourceDocumentLine.getTaxWithholdMap();

        switch (taxWithholdMap.SourceTableId)
        {
            // Accounts for Accounting distribution when opened from Purchase order, Vendor invoice form or project advanced journal
            case tablenum(purchLine) :
            case tablenum(VendInvoiceInfoLine) :
            case tableNum(ProjAdvancedJournalLine) :
                switch (_taxWithholdTable.TaxType_IN)
                {
                    case TaxWithholdCodeType_IN::TDS :
                        taxAccount = _taxWithholdTable.LedgerDimension;
                        break;
                    case TaxWithholdCodeType_IN::TCS :
                        taxAccount = _taxWithholdTable.LedgerDimension_IN;
                        break;
                    default :
                        break;
                }
                break;

            // Accounts for Accounting distribution when opened from Free text invoice
            case tablenum(CustInvoiceLine) :
            case tableNum(CustInvoiceTrans) :
                switch (_taxWithholdTable.TaxType_IN)
                {
                    case TaxWithholdCodeType_IN::TDS :
                        taxAccount = _taxWithholdTable.LedgerDimension_IN;
                        break;
                    case TaxWithholdCodeType_IN::TCS :

                        if (TaxWithholdGroupHeading::find(taxWithholdMap.TaxWithholdGroup).TaxLiabilityOnPayment_IN)
                        {
                            taxAccount = _taxWithholdTable.InterimAccount_IN;
                        }
                        else
                        {
                            taxAccount = _taxWithholdTable.LedgerDimension;
                        }
                        break;
                    default :
                        break;
                }
                break;

            default:
            // Ideally tax account is always found from above condition, But for default conditon
            if (!taxAccount)
            {
                throw error("@GLS5582" + "@SYS21533");
            }
        }

        return taxAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the tax main account ledger dimension list provider values.
    /// </summary>
    protected void initValues()
    {
        Object                                  sourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem();
        SourceDocumentLineItemITaxWithhold_IN   iTaxWithhold;

        if (sourceDocumentLineItem is SourceDocumentLineItemITaxWithhold_IN)
        {
            iTaxWithhold            = sourceDocumentLineItem as SourceDocumentLineItemITaxWithhold_IN;
            taxDataAreaId           = iTaxWithhold.parmTaxWithholdDataAreaId();
            taxWithholdCode         = iTaxWithhold.parmTaxWithholdCode();
            taxWithholdDirection    = iTaxWithhold.parmTaxWithholdDirection();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccountDimensionList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the tax main account dimension list.
    /// </summary>
    protected void populateMainAccountDimensionList()
    {
        if (!TaxWithholdParameters_IN::checkTaxParameters())
        {
            // Do not populate the list
            return;
        }

        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        AccountingRuleType              accountingRuleType;
        TaxWithholdTable                taxWithholdTable;
        LedgerPostingType               ledgerPostingType;

        #ISOCountryRegionCodes

        changecompany(taxDataAreaId)
        {
            taxWithholdTable = TaxWithholdTable::find(taxWithholdCode);
        }

        accountingRuleType  = accountingRule.parmAccountingRuleType();
        ledgerPostingType   = accountingRule.parmLedgerPostingType();

        if (ledgerPostingType    != LedgerPostingType::VendBalance
            && ledgerPostingType != LedgerPostingType::CustBalance)
        {
            ledgerDimensionDefaultAccount   = this.getWithholdPostingDefaultAcc(taxWithholdTable);
        }
        else if (accountingRule is AccJourRuleProjAdvancedJournalExtPriceWHT_IN)
        {
            AccJourRuleProjAdvancedJournalExtPriceWHT_IN accJourRuleProjAdvancedJournalExtPriceWHT_IN = accountingRule;
            ledgerDimensionDefaultAccount = accJourRuleProjAdvancedJournalExtPriceWHT_IN.parmLedgerDimensionDefaultAccount();
        }
        this.addToMainAccDimensionList(ledgerDimensionDefaultAccount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>