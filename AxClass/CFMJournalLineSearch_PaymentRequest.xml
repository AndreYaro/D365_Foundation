<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalLineSearch_PaymentRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CFMJournalSourceAttribute(CFMJournalTransSourceType::PaymentRequest)]
class cfmJournalLineSearch_PaymentRequest extends CFMJournalLineSearch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initProtoTransParmContract</Name>
				<Source><![CDATA[
    protected CFMJournalProtoTransParmContract initProtoTransParmContract(QueryRun _queryRun)
    {
        CFMJournalProtoTransParmContractPaymReq parmContract = new CFMJournalProtoTransParmContractPaymReq();
        CFMPaymentRequestTable  paymentRequestTable = _queryRun.get(tableNum(CFMPaymentRequestTable));

        parmContract.parmPaymentRequestTable(paymentRequestTable);
        parmContract.parmPaymentRequestLine(_queryRun.get(tableNum(CFMPaymentRequestLine)));
        parmContract.parmPaymentRequestType(_queryRun.get(tableNum(CFMPaymentRequestType)));
        parmContract.initDirPartyMapFromQueryRun(_queryRun);

        this.initProtoTransParmContractUncommitted(_queryRun, parmContract);

        return parmContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryList</Name>
				<Source><![CDATA[
    protected void initQueryList()
    {
        queryList.addEnd(this.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    protected Query query()
    {
        Query query = new Query();
        query.allowCrossCompany(true);
        QueryBuildDataSource qbdsRequestTable = query.addDataSource(tableNum(CFMPaymentRequestTable));
        qbdsRequestTable.addSelectionField(fieldNum(CFMPaymentRequestTable, PaymentCurrency));
        qbdsRequestTable.addSelectionField(fieldNum(CFMPaymentRequestTable, CurrencyCode));
        qbdsRequestTable.addSelectionField(fieldNum(CFMPaymentRequestTable, PaymentDate));
        qbdsRequestTable.addSelectionField(fieldNum(CFMPaymentRequestTable, PaymentAccountNum));
        qbdsRequestTable.addSelectionField(fieldNum(CFMPaymentRequestTable, PaymentAccountType));
        qbdsRequestTable.addSelectionField(fieldNum(CFMPaymentRequestTable, AccountType));
        qbdsRequestTable.addSelectionField(fieldNum(CFMPaymentRequestTable, SourceDataAreaId));
        qbdsRequestTable.addSelectionField(fieldNum(CFMPaymentRequestTable, PaymentPriority));
        qbdsRequestTable.addSelectionField(fieldNum(CFMPaymentRequestTable, Status));
        qbdsRequestTable.addSelectionField(fieldNum(CFMPaymentRequestTable, PaymMode));
        qbdsRequestTable.addSelectionField(fieldNum(CFMPaymentRequestTable, RecId));

        if (this.parmSourceRefRecId())
        {
            qbdsRequestTable.addRange(fieldNum(CFMPaymentRequestTable, RecId)).value(queryValue(this.parmSourceRefRecId()));
        }

        if (this.parmUseUncommittedValues())
        {
            QueryBuildDataSource qbdsUncommittedValues = qbdsRequestTable.addDataSource(tableNum(CFMAnalyticDataEditUncommitted));
            qbdsUncommittedValues.relations(true);
            qbdsUncommittedValues.fetchMode(QueryFetchMode::One2One);
            filter.setDateInterval(qbdsUncommittedValues, fieldNum(CFMAnalyticDataEditUncommitted, DueDate));
            filter.setPaymentFilter(qbdsUncommittedValues, fieldNum(CFMAnalyticDataEditUncommitted, PaymentAccountNum), fieldNum(CFMAnalyticDataEditUncommitted, PaymentAccountType));
        }
        else
        {
            filter.setDateInterval(qbdsRequestTable, fieldNum(CFMPaymentRequestTable, PaymentDate));
            filter.setPaymentFilter(qbdsRequestTable, fieldNum(CFMPaymentRequestTable, PaymentAccountNum), fieldNum(CFMPaymentRequestTable, PaymentAccountType));
        }

        filter.setOrgUnitFilter(qbdsRequestTable, fieldNum(CFMPaymentRequestTable, SourceDataAreaId));
        filter.setPaymentRequestStatusFilter(qbdsRequestTable, fieldNum(CFMPaymentRequestTable, Status));
        filter.setOnHoldFilter(qbdsRequestTable, fieldNum(CFMPaymentRequestTable, OnHold));
        filter.setWorkflowStatusFilter(qbdsRequestTable, fieldNum(CFMPaymentRequestTable, WorkflowStatus));

        QueryBuildDataSource qbdsRequestLine = qbdsRequestTable.addDataSource(tableNum(CFMPaymentRequestLine));
        qbdsRequestLine.relations(true);
        qbdsRequestLine.fetchMode(QueryFetchMode::One2One);

        qbdsRequestLine.addSelectionField(fieldNum(CFMPaymentRequestLine, LedgerDimension));
        qbdsRequestLine.addSelectionField(fieldNum(CFMPaymentRequestLine, RecId));
        qbdsRequestLine.addSelectionField(fieldNum(CFMPaymentRequestLine, BalanceAmountCur));

        QueryBuildDataSource qbdsRequestType = qbdsRequestTable.addDataSource(tableNum(CFMPaymentRequestType));
        qbdsRequestType.relations(true);
        qbdsRequestType.fetchMode(QueryFetchMode::One2One);
        filter.setCashFlowDirectionFilter(qbdsRequestType, fieldNum(CFMPaymentRequestType, Direction), cashFlowDirection);
        qbdsRequestType.addSelectionField(fieldNum(CFMPaymentRequestType, Direction));

        QueryBuildDataSource qbdsJournalTransLog = qbdsRequestTable.addDataSource(tableNum(CFMJournalTransLog));
        qbdsJournalTransLog.relations(true);
        qbdsJournalTransLog.fetchMode(QueryFetchMode::One2One);
        qbdsJournalTransLog.fields().addField(fieldNum(CFMJournalTransLog, RecId));

        if (this.parmUseUncommittedValues())
        {
            qbdsJournalTransLog.joinMode(JoinMode::ExistsJoin);

        }
        else
        {
            qbdsJournalTransLog.joinMode(JoinMode::NoExistsJoin);
            filter.setTransLogOutdated(NoYes::No);
            filter.setPaymentReqJourOutdated(qbdsJournalTransLog, fieldNum(CFMJournalTransLog, Outdated));
        }

        filter.setPaymentReqNotInJourFilter(qbdsJournalTransLog, fieldNum(CFMJournalTransLog, JournalType));

        QueryBuildDataSource qbdsVendTable = qbdsRequestTable.addDataSource(tableNum(VendTable));
        qbdsVendTable.relations(false);

        DictRelation dictRelation = new DictRelation(tableNum(CFMPaymentRequestTable));
        dictRelation.loadNameRelation(literalStr(Vendor));
        qbdsVendTable.addRelation(dictRelation);
        qbdsVendTable.joinMode(JoinMode::OuterJoin);
        qbdsVendTable.fetchMode(QueryFetchMode::One2One);
        qbdsVendTable.addSelectionField(fieldNum(VendTable, Party));

        QueryBuildDataSource qbdsCustTable = qbdsRequestTable.addDataSource(tableNum(CustTable));
        qbdsCustTable.relations(false);
        dictRelation = new DictRelation(tableNum(CFMPaymentRequestTable));
        dictRelation.loadNameRelation(literalStr(Customer));
        qbdsCustTable.addRelation(dictRelation);
        qbdsCustTable.joinMode(JoinMode::OuterJoin);
        qbdsCustTable.fetchMode(QueryFetchMode::One2One);
        qbdsCustTable.addSelectionField(fieldNum(CustTable, Party));

        QueryBuildDataSource qbdsWorker = qbdsRequestTable.addDataSource(tableNum(HcmWorker));
        qbdsWorker.relations(false);
        dictRelation = new DictRelation(tableNum(CFMPaymentRequestTable));
        dictRelation.loadNameRelation(literalStr(HcmWorker));
        qbdsWorker.addRelation(dictRelation);
        qbdsWorker.joinMode(JoinMode::OuterJoin);
        qbdsWorker.fetchMode(QueryFetchMode::One2One);
        qbdsWorker.addSelectionField(fieldNum(HcmWorker, Person));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>