<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTable2LineField</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesTable2LineField
{
    FieldId                     fieldId;
    // <GEERU>
    TableId                     tableId;
    // </GEERU>
    FieldLabel                  fieldName;
    FieldLabel                  lineUpdateDescription;
    TradeTable2LineUpdate       table2LineUpdate;

    NoYes                       updateSalesLines;

    // <GEEHU>
    #ISOCountryRegionCodes
    // </GEEHU>

    // <GEERU>
    #define.CurrentVersion(2)
    // </GEERU>
    #localmacro.CurrentList
        fieldId,
        // <GEERU>
        tableId,
        // </GEERU>
        fieldName,
        lineUpdateDescription,
        table2LineUpdate,
        updateSalesLines
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldGroupLabel</Name>
				<Source><![CDATA[
    FieldLabel fieldGroupLabel()
    {
        return this.fieldName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId</Name>
				<Source><![CDATA[
    public FieldId fieldId(FieldId _fieldId = fieldId)
    {
        if (_fieldId != fieldId)
        {
            this.initFieldId(
            // <GEERU>
            tableId,
            // </GEERU>
            _fieldId);
        }
        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    FieldLabel fieldName()
    {
        return fieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldId</Name>
				<Source><![CDATA[
    protected void initFieldId(
        TableId _tableId,
        FieldId _fieldId)
    {
        SalesTable2LineParameters   salesTable2LineParameters = SalesTable2LineParameters::find(
            // <GEERU>
            _tableId,
            // </GEERU>
            _fieldId);

        fieldId                     = _fieldId;
        // <GEERU>
        tableId                     = _tableId;
        // </GEERU>
        fieldName                   = salesTable2LineParameters.fieldName();
        lineUpdateDescription       = this.lineUpdateDescription();
        table2LineUpdate            = salesTable2LineParameters.Table2LineUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUpdateDescription</Name>
				<Source><![CDATA[
    FieldLabel lineUpdateDescription()
    {
        FieldLabel              description;

        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        if (lineUpdateDescription)
        {
            return lineUpdateDescription;
        }

        // <GEERU>
        if (tableId == tableNum(SalesTable))
        {
            // </GEERU>
            switch (fieldExt2Id(this.fieldId()))
            {
                case fieldNum(SalesTable, CustAccount)       :
                    if (PriceParameters::find().isSalesPriceCustAccountActive())
                    {
                        description = fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, SalesPrice));
                    }
                    if (PriceParameters::find().isSalesLineDiscCustAccountActive())
                    {
                        if (description)
                        {
                            description= strFmt("@SYS26868", description,
                                         strFmt("@SYS26868", fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, LineDisc)),
                                                             fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, LinePercent))));
                        }
                        else
                        {
                            description= strFmt("@SYS26868", fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, LineDisc)),
                                                             fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, LinePercent)));
                        }
                    }
                    if (description)
                    {
                        description= strFmt("@SYS26868", description, tableId2pname(tableNum(MarkupTable)));
                    }
                    else
                    {
                        description= tableId2pname(tableNum(MarkupTable));
                    }
                    description = strFmt("@SYS62815", description, fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, ExternalItemId)));
                    return description;

                case fieldNum(SalesTable, SalesGroup)       :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, SalesGroup));

                case fieldNum(SalesTable, TaxGroup)         :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, TaxGroup));

                case fieldNum(SalesTable, OverrideSalesTax):
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, OverrideSalesTax));

                case fieldNum(SalesTable, DefaultDimension) :
                    return "@SYS14926";

                case fieldNum(SalesTable, InventLocationId) :
                    return "@SYS108782";

                case fieldNum(SalesTable, tcsGroup_IN)      :
                    return fieldId2pname(tableNum(SalesLine_IN), fieldNum(SalesLine_IN, tcsGroup));

                case fieldNum(SalesTable, tdsGroup_IN)      :
                    return fieldId2pname(tableNum(SalesLine_IN), fieldNum(SalesLine_IN, tdsGroup));

                case fieldNum(SalesTable, Reservation)      :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, Reservation));

                case fieldNum(SalesTable, TransactionCode)  :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, TransactionCode));

                case fieldNum(SalesTable, Transport)        :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, Transport));

                case fieldNum(SalesTable, Port)             :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, Port));

                case fieldNum(SalesTable, StatProcId)       :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, StatProcId));

                case fieldNum(SalesTable, PriceGroupId)     :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, SalesPrice));

                case fieldNum(SalesTable, LineDisc)         :
                    return strFmt("@SYS62815", fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, LineDisc)),
                                               fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, LinePercent)));

                case fieldNum(SalesTable, MarkupGroup)      :
                    return tableId2pname(tableNum(MarkupTable));

                case fieldNum(SalesTable, DeliveryDate)     :
                    if (isConfigurationkeyEnabled(configurationKeyNum(SalesDeliveryDateControl)))
                    {
                        return "@SYS88258";
                    }
                    else
                    {
                        return "@SYS10178";
                    }

                case fieldNum(SalesTable, DlvMode) :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, DlvMode));

                case fieldNum(SalesTable, DlvTerm) :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, DlvTerm));

                case fieldNum(SalesTable, LanguageId)       :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, Name));

                case fieldNum(SalesTable, ShipCarrierId) :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, ShipCarrierId));

                case fieldNum(SalesTable, ShipCarrierAccountCode) :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, ShipCarrierAccountCode));

                case fieldNum(SalesTable, ShipCarrierAccount) :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, ShipCarrierAccount));

                case fieldNum(SalesTable, ShipCarrierDlvType) :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, ShipCarrierDlvType));

                case fieldNum(SalesTable, PdsBatchAttribAutoRes) :
                    return fieldId2pname(
                            tableNum(SalesLine),
                            fieldNum(SalesLine, PdsBatchAttribAutoRes));
                // <GEEHU>
                case fieldNum(SalesTable, IntrastatFulfillmentDate_HU) :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, IntrastatFulfillmentDate_HU));
                // </GEEHU>

                case fieldNum(SalesTable, AccountingDistributionTemplate) :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, AccountingDistributionTemplate));
                case fieldNum(SalesTable, MpsExcludeSalesOrder) :
                    return fieldId2pname(tableNum(SalesLine), fieldNum(SalesLine, MpsExcludeSalesLine));
            }
            // <GEERU>
        }
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && tableId == tableNum(SalesTable_RU))
        {
            switch (fieldExt2Id(this.fieldId()))
            {
                case fieldNum(SalesTable_RU, InventProfileId_RU):
                    return fieldId2pname(tableId, fieldNum(SalesTable_RU, InventProfileId_RU));

                case fieldNum(SalesTable_RU, PriceAgreementDate_RU):
                    return fieldId2pname(tableId, fieldNum(SalesTable_RU, PriceAgreementDate_RU));
            }
        }
        // </GEERU>
        // <GEECZ>
        else if (tableId == tableNum(SalesTable_Intrastat) && SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(SalesTable_Intrastat)))
        {
            switch (fieldExt2Id(this.fieldId()))
            {
                case fieldNum(SalesTable_Intrastat, SpecialMovement_CZ):
                    return fieldId2pname(tableId, fieldNum(SalesTable_Intrastat, SpecialMovement_CZ));
            }
        }
        // </GEECZ>
        else if (tableId == tableNum(MCRSalesTableShipping)
            && isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            switch (fieldExt2Id(this.fieldId()))
            {
                // Add the MCRExpedite field.
                case fieldnum(MCRSalesTableShipping, Expedite)       :
                    return fieldid2pname(tablenum(MCRSalesLine), fieldnum(MCRSalesLine, Expedite));
            }
        }

        EventhandlerResult result = EventHandlerResult::newSingleResponse();
        this.lineUpdateDescriptionDelegate(fieldId, TableId, result);
        if (result.hasResult())
        {
            return result.result();
        }

        throw error(strfmt("@SCM:MessageError_MissingImplementationForField", funcname(), fieldId2Name(tableId, fieldExt2Id(this.fieldId())), tableId2Name(tableId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUpdateDescriptionDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for retrieving the line update description for the given field.
    /// </summary>
    /// <param name="_fieldId">A <c>FieldId</c>.</param>
    /// <param name="_tableId">A <c>TableId</c>.</param>
    /// <param name="_result">An <c>EventHandlerResult</c> for returning the description.</param>
    delegate void lineUpdateDescriptionDelegate(FieldId _fieldId, TableId _tableId, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameterHelp</Name>
				<Source><![CDATA[
    FieldHelp parameterHelp()
    {
        return strFmt("@SYS62834", this.lineUpdateDescription(), this.fieldName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameterLabel</Name>
				<Source><![CDATA[
    FieldLabel parameterLabel()
    {
        return strFmt("@SYS62814", this.lineUpdateDescription());
    }

]]></Source>
			</Method>
			<Method>
				<Name>questionHelp</Name>
				<Source><![CDATA[
    FieldHelp questionHelp()
    {
        return strFmt("@SYS62836", this.lineUpdateDescription());
    }

]]></Source>
			</Method>
			<Method>
				<Name>questionLabel</Name>
				<Source><![CDATA[
    FieldLabel questionLabel()
    {
        return strFmt("@SYS62835", this.lineUpdateDescription());
    }

]]></Source>
			</Method>
			<Method>
				<Name>table2LineUpdate</Name>
				<Source><![CDATA[
    TradeTable2LineUpdate table2LineUpdate(TradeTable2LineUpdate _table2LineUpdate = table2LineUpdate)
    {
        table2LineUpdate = _table2LineUpdate;
        return table2LineUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    TableId tableId(
        TableId _tableId = tableId
        )
    {
        // <GEERU>
        tableId = _tableId;

        return tableId;
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLines</Name>
				<Source><![CDATA[
    NoYes updateSalesLines(NoYes _updateSalesLines = updateSalesLines)
    {
        updateSalesLines = _updateSalesLines;
        return updateSalesLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTable2LineParameters</Name>
				<Source><![CDATA[
    void updateSalesTable2LineParameters()
    {
        SalesTable2LineParameters   salesTable2LineParameters = SalesTable2LineParameters::find(
            // <GEERU>
            this.tableId(),
            // </GEERU>
            this.fieldId(), true);

        if (table2LineUpdate != salesTable2LineParameters.Table2LineUpdate)
        {
            ttsbegin;

            // <GEERU>
            if (salesTable2LineParameters.RecId)
            {
                // </GEERU>
                salesTable2LineParameters.Table2LineUpdate = table2LineUpdate;
                salesTable2LineParameters.update();
                // <GEERU>
            }
            else
            {
                salesTable2LineParameters.setFieldId(this.tableId(), this.fieldId());
                salesTable2LineParameters.Table2LineUpdate = table2LineUpdate;
                salesTable2LineParameters.insert();
            }
            // </GEERU>
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>SalesTable2LineField</c> class.
    /// </summary>
    /// <param name="_tableId">
    /// Sales table ID.
    /// </param>
    /// <param name="_fieldId">
    /// Field ID.
    /// </param>
    /// <returns>
    /// An instance of <c>SalesTable2LineField</c> class.
    /// </returns>
    /// <remarks>
    /// Normally <c>_tableId</c> parameter should be <c>SalesTable</c> table ID. But it can also be any other table related to <c>SalesTable</c>. For example: <c>SalesTable_RU</c>.
    /// </remarks>
    static SalesTable2LineField construct(
        TableId _tableId,
        FieldId _fieldId)
    {
        SalesTable2LineField salesTable2LineField = new SalesTable2LineField();
        salesTable2LineField.initFieldId(
            // <GEERU>
            _tableId,
            // </GEERU>
            _fieldId);
        return salesTable2LineField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    static public SalesTable2LineField create(container packedClass)
    {
        SalesTable2LineField salesTable2LineField = new SalesTable2LineField();

        salesTable2LineField.unpack(packedClass);

        return salesTable2LineField;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>