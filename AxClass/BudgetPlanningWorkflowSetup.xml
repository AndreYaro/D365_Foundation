<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningWorkflowSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanningWorkflowSetup</c> class is used as a utility class for the budget planning workflow,
/// it contains the methods to get different workflow stages and lookup methods.
/// </summary>
public class BudgetPlanningWorkflowSetup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrentBudgetPlanningWorkflowStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current <c>BudgetPlanningWorkflowStage</c> record id that the
    /// budget plan is in.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The <c>BudgetPlanHeader</c> record id whose workflow stage needs to be determined.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanningWorkflowStage</c> record id.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static BudgetPlanningWorkflowStageRecId getCurrentBudgetPlanningWorkflowStage(
        BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanHeader                    budgetPlanHeader;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;
        BudgetPlanningWorkflowStage         budgetPlanningWorkflowStage;

        if (!_budgetPlanHeaderRecId)
        {
            throw error(Error::missingParameter(null));
        }

        select firstonly RecId from budgetPlanningWorkflowStage
            exists join BudgetPlanningWorkflow from budgetPlanningProcessAdministration
                where budgetPlanningProcessAdministration.BudgetPlanningWorkflow == budgetPlanningWorkflowStage.BudgetPlanningWorkflow
                exists join budgetPlanHeader
                    where budgetPlanHeader.RecId                 == _budgetPlanHeaderRecId
                       && budgetPlanHeader.BudgetPlanningProcess == budgetPlanningProcessAdministration.BudgetPlanningProcess
                       && budgetPlanHeader.BudgetingOrganization == budgetPlanningProcessAdministration.BudgetingOrganization
                       && budgetPlanHeader.BudgetPlanningStage   == budgetPlanningWorkflowStage.BudgetPlanningStage;

        return budgetPlanningWorkflowStage.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstPlanningStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first <c>BudgetPlanningStage</c> record for the given <c>BudgetPlanningProcess</c> and
    /// <c>OMInternalOrganization</c> record references.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetingOrganizationRecId">
    /// The ID of the <c>OMInternalOrganization</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningWorkflowStage</c> table; otherwise, an empty record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The <c>Args</c> value is null.
    /// </exception>
    public static BudgetPlanningStage getFirstPlanningStage(
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId,
        BudgetingOrganizationRecId _budgetingOrganizationRecId)
    {
        BudgetPlanningWorkflowStage         budgetPlanningWorkflowStage;
        BudgetPlanningStage                 budgetPlanningStageFirst;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;

        if (!_budgetPlanningProcessRecId || !_budgetingOrganizationRecId)
        {
            throw error(Error::missingParameter(null));
        }

        select firstonly BudgetPlanningWorkflow from budgetPlanningProcessAdministration
            where budgetPlanningProcessAdministration.BudgetPlanningProcess == _budgetPlanningProcessRecId
                && budgetPlanningProcessAdministration.BudgetingOrganization == _budgetingOrganizationRecId
            join firstonly BudgetPlanningStage, BudgetPlanningWorkflow from  budgetPlanningWorkflowStage
                where budgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage == 0
                    && budgetPlanningWorkflowStage.BudgetPlanningWorkflow == budgetPlanningProcessAdministration.BudgetPlanningWorkflow
            join firstonly budgetPlanningStageFirst
                where budgetPlanningStageFirst.RecId == budgetPlanningWorkflowStage.BudgetPlanningStage;

        return budgetPlanningStageFirst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastPlanningStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the Last <c>BudgetPlanningStage</c> record for the given <c>BudgetPlanningProcess</c> and
    /// <c>OMInternalOrganization</c> record references.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetingOrganizationRecId">
    /// The ID of the <c>OMInternalOrganization</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningWorkflowStage</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningStage getLastPlanningStage(
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId,
        BudgetingOrganizationRecId _budgetingOrganizationRecId)
    {
        BudgetPlanningStageRecId budgetPlanningStageLastRecId;
        BudgetPlanningStage      budgetPlanningStage;

        budgetPlanningStage = BudgetPlanningWorkflowSetup::getFirstPlanningStage(_budgetPlanningProcessRecId, _budgetingOrganizationRecId);

        do
        {
            budgetPlanningStageLastRecId = budgetPlanningStage.RecId;

            budgetPlanningStage = BudgetPlanningWorkflowSetup::getNextPlanningStage(budgetPlanningStageLastRecId, _budgetPlanningProcessRecId, _budgetingOrganizationRecId);
        }while (budgetPlanningStage.RecId != 0);

        budgetPlanningStage = BudgetPlanningStage::find(budgetPlanningStageLastRecId);

        return budgetPlanningStage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextPlanningStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the next <c>BudgetPlanningStage</c> record for the given <c>BudgetPlanningStage</c>,
    /// <c>BudgetPlanningProcess</c>, and <c>OMInternalOrganization</c> record references.
    /// </summary>
    /// <param name="_currentBudgetPlanningStageRecId">
    /// The ID of the current <c>BudgetPlanningStage</c> record.
    /// </param>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetingOrganizationRecId">
    /// The ID of the <c>OMInternalOrganization</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningWorkflowStage</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningStage getNextPlanningStage(
        BudgetPlanningStageRecId    _currentBudgetPlanningStageRecId,
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId,
        BudgetingOrganizationRecId  _budgetingOrganizationRecId)
    {
        BudgetPlanningWorkflowStage         budgetPlanningWorkflowStageCurrent;
        BudgetPlanningWorkflowStage         budgetPlanningWorkflowStageNext;
        BudgetPlanningStage                 budgetPlanningStageNext;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;

        if (!_currentBudgetPlanningStageRecId
            || !_budgetPlanningProcessRecId
            || !_budgetingOrganizationRecId)
        {
            throw error(Error::missingParameter(null));
        }

        select firstonly BudgetPlanningWorkflow from budgetPlanningProcessAdministration
            where budgetPlanningProcessAdministration.BudgetPlanningProcess == _budgetPlanningProcessRecId
                && budgetPlanningProcessAdministration.BudgetingOrganization == _budgetingOrganizationRecId
            join firstonly RecId from budgetPlanningWorkflowStageCurrent
                where budgetPlanningWorkflowStageCurrent.BudgetPlanningStage ==_currentBudgetPlanningStageRecId
                    && budgetPlanningWorkflowStageCurrent.BudgetPlanningWorkflow == budgetPlanningProcessAdministration.BudgetPlanningWorkflow
            join firstonly BudgetPlanningStage from budgetPlanningWorkflowStageNext
                where budgetPlanningWorkflowStageNext.PriorBudgetPlanningWorkflowStage == budgetPlanningWorkflowStageCurrent.RecId
                    && budgetPlanningWorkflowStageNext.BudgetPlanningWorkflow == budgetPlanningProcessAdministration.BudgetPlanningWorkflow
            join firstonly budgetPlanningStageNext
                where budgetPlanningStageNext.RecId == budgetPlanningWorkflowStageNext.BudgetPlanningStage;

        return budgetPlanningStageNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousPlanningStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the previous <c>BudgetPlanningStage</c> record for the specified <c>BudgetPlanningStage</c>,
    /// <c>BudgetPlanningProcess</c>, and <c>OMInternalOrganization</c> record IDs.
    /// </summary>
    /// <param name="_currentBudgetPlanningStageRecId">
    /// The record ID of the current <c>BudgetPlanningStage</c> record.
    /// </param>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetingOrganizationRecId">
    /// The record ID of the <c>OMInternalOrganization</c> record.
    /// </param>
    /// <returns>
    /// A record ID of the previous <c>BudgetPlanningStage</c> stage record.
    /// </returns>
    public static BudgetPlanningStageRecId getPreviousPlanningStage(
        BudgetPlanningStageRecId    _currentBudgetPlanningStageRecId,
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId,
        BudgetingOrganizationRecId  _budgetingOrganizationRecId)
    {
        BudgetPlanningWorkflowStage         budgetPlanningWorkflowStageCurrent;
        BudgetPlanningWorkflowStage         budgetPlanningWorkflowStagePrevious;
        BudgetPlanningStage                 budgetPlanningStagePrevious;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;

        if (!_currentBudgetPlanningStageRecId
            || !_budgetPlanningProcessRecId
            || !_budgetingOrganizationRecId)
        {
            throw error(Error::missingParameter(null));
        }

        select firstonly RecId from budgetPlanningStagePrevious
            exists join budgetPlanningProcessAdministration
                where budgetPlanningProcessAdministration.BudgetPlanningProcess  == _budgetPlanningProcessRecId
                    && budgetPlanningProcessAdministration.BudgetingOrganization == _budgetingOrganizationRecId
                exists join budgetPlanningWorkflowStageCurrent
                    where budgetPlanningWorkflowStageCurrent.BudgetPlanningStage     == _currentBudgetPlanningStageRecId
                        && budgetPlanningWorkflowStageCurrent.BudgetPlanningWorkflow == budgetPlanningProcessAdministration.BudgetPlanningWorkflow
                exists join budgetPlanningWorkflowStagePrevious
                    where budgetPlanningWorkflowStagePrevious.RecId                == budgetPlanningWorkflowStageCurrent.PriorBudgetPlanningWorkflowStage
                        && budgetPlanningWorkflowStagePrevious.BudgetPlanningStage == budgetPlanningStagePrevious.RecId;

        return budgetPlanningStagePrevious.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanningWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>BudgetPlanningWorkflow</c> table.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormReferenceControl</c> value for which the lookup is being performed.
    /// </param>
    public static void lookupBudgetPlanningWorkflow(FormStringControl _formControl)
    {
        SysTableLookup       sysTableLookup;
        QueryBuildDataSource qbdsBudgetPlanningworkflow;
        Query                query = new Query();

        // Create an instance of SysTableLookup with the form control passed in
        sysTableLookup = SysTableLookup::newParameters(tableNum(BudgetPlanningWorkflow), _formControl);

        // Create the query datasource
        qbdsBudgetPlanningworkflow = query.addDataSource(tableNum(BudgetPlanningWorkflow));

        // Add fields to be shown in the lookup form.
        sysTableLookup.addLookupfield(fieldNum(BudgetPlanningWorkflow, Name));

        // Add the query to the lookup form
        sysTableLookup.parmQuery(query);

        // Perform the lookup.
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the default behavior of a lookup.
    /// </summary>
    /// <param name="_ctrl">
    /// An instance of the <c>FormStringControl</c> object.
    /// </param>
    public static void lookupWorkflow(FormStringControl _ctrl)
    {
        SysTableLookup       sysTableLookup;
        Query                query = new Query();
        QueryBuildDataSource workflowTableQbds;

        sysTableLookup = SysTableLookup::newParameters(tableNum(WorkflowTable), _ctrl);

        // Add fields to be shown in the lookup form.
        sysTableLookup.addLookupfield(fieldNum(WorkflowTable, SequenceNumber));
        sysTableLookup.addLookupfield(fieldNum(WorkflowTable, Name));
        sysTableLookup.addLookupfield(fieldNum(WorkflowTable, TemplateName));

        // only show Template with the value BudgetPlanReview.
        workflowTableQbds = query.addDataSource(tableNum(WorkflowTable));
        workflowTableQbds.addRange(fieldNum(WorkflowTable, TemplateName)).value(SysQuery::value(workFlowTypeStr(BudgetPlanReview)));

        sysTableLookup.parmQuery(query);

        // Perform the lookup.
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyWorkflowForProcessOperatingUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the workflow can be modified for a given process and operating unit type (department, legal entity, etc).
    /// </summary>
    /// <param name = "_processRecId"> The <c>BudgetPlanningProcessRecId</c> value to filter by. </param>
    /// <param name = "_omOperatingUnitType"> The selected <c>OMOperatingUnitType</c> enum. </param>
    /// <returns> true, if the workflow for that operating unit type can be changed; otherwise, false. </returns>
    public static boolean canModifyWorkflowForProcessOperatingUnit(BudgetPlanningProcessRecId _processRecId, OMOperatingUnitType _omOperatingUnitType)
    {
        boolean                             isValid = true;
        BudgetPlanningProcess               budgetPlanningProcess;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;
        BudgetPlanHeader                    budgetPlanHeader;
        OMOperatingUnit                     operatingUnit;

        switch (_omOperatingUnitType)
        {
            // Legal entity Responsibility center type.
            case OMOperatingUnitType::None:
                select firstonly RecId from budgetPlanHeader
                    where budgetPlanHeader.WorkflowStatus           != BudgetPlanWorkflowStatus::NotSubmitted
                        && budgetPlanHeader.BudgetPlanningProcess   == _processRecId
                    exists join budgetPlanningProcessAdministration
                        where budgetPlanningProcessAdministration.BudgetPlanningProcess     == budgetPlanHeader.BudgetPlanningProcess
                            && budgetPlanningProcessAdministration.BudgetingOrganization    == budgetPlanHeader.BudgetingOrganization
                    exists join budgetPlanningProcess
                        where budgetPlanningProcess.ApprovalProcessState    != BudgetPlanningApprovalProcessState::Draft
                            && budgetPlanningProcess.RecId                  == budgetPlanningProcessAdministration.BudgetPlanningProcess
                    notExists join operatingUnit
                        where operatingUnit.RecId == budgetPlanningProcessAdministration.BudgetingOrganization;

                break;

            // All other Responsibility center types.
            default:
                select firstonly RecId from budgetPlanHeader
                    where budgetPlanHeader.WorkflowStatus           != BudgetPlanWorkflowStatus::NotSubmitted
                        && budgetPlanHeader.BudgetPlanningProcess   == _processRecId
                    exists join budgetPlanningProcessAdministration
                        where budgetPlanningProcessAdministration.BudgetPlanningProcess     == budgetPlanHeader.BudgetPlanningProcess
                            && budgetPlanningProcessAdministration.BudgetingOrganization    == budgetPlanHeader.BudgetingOrganization
                    exists join budgetPlanningProcess
                        where budgetPlanningProcess.ApprovalProcessState    != BudgetPlanningApprovalProcessState::Draft
                            && budgetPlanningProcess.RecId                  == budgetPlanningProcessAdministration.BudgetPlanningProcess
                    join operatingUnit
                        where operatingUnit.RecId                   == budgetPlanningProcessAdministration.BudgetingOrganization
                            && operatingUnit.OMOperatingUnitType    == _omOperatingUnitType;

                break;
        }

        if (budgetPlanHeader)
        {
            isValid = checkFailed("@Budget:BudgetPlanning_Validation_CannotChangeWorkflow");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>