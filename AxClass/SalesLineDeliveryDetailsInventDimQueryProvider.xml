<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineDeliveryDetailsInventDimQueryProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesLineDeliveryDetailsInventDimQueryProvider
{
    Query inventDimQuery;
    str inventDimDataSourceName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyInventDimFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the necessary filters on the <c>InventDim</c> records to be used for CTP based delivery date calculations.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record pointing to the required item.</param>
    /// <param name = "_inventDimSetupObject">Object holding the invent dim setup.</param>
    /// <param name = "_salesLine">The sales order line record.</param>
    public void applyInventDimFilters(InventTable _inventTable, InventDimCtrl_Frm_OnhandItem _inventDimSetupObject, SalesLine _salesLine)
    {
        this.applyInventDimFiltersForDeliveryAlternatives(_inventTable, _inventDimSetupObject.parmDimParmVisibleGrid(), _salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyInventDimFiltersForDeliveryAlternatives</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the necessary filters on the <c>InventDim</c> records for delivery alternatives.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record pointing to the required item.</param>
    /// <param name = "_inventDimSetupObject">Object holding the invent dim setup.</param>
    /// <param name = "_salesLine">The sales order line record.</param>
    public void applyInventDimFiltersForDeliveryAlternatives(InventTable _inventTable, InventDimParm _visibleDimensions, SalesLine _salesLine)
    {
        this.filterBySite(_inventTable);
        this.filterWarehouses(_inventTable, _visibleDimensions, _salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimQuery</Name>
				<Source><![CDATA[
    private void setInventDimQuery(Query _inventDimQuery)
    {
        inventDimQuery = _inventDimQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimDataSourceName</Name>
				<Source><![CDATA[
    private void setInventDimDataSourceName(str _inventDimDataSourceName)
    {
        inventDimDataSourceName = _inventDimDataSourceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of a child class of the <c>SalesLineDeliveryDetailsInventDimQueryProvider</c> class.
    /// </summary>
    /// <param name = "_inventDimQuery">The query used to fetch the invent dim records to be used for delivery date calculations.</param>
    /// <param name = "_inventDimDataSourceName">The name of the datasource which represents the <c>InventDim</c> table.</param>
    /// <param name = "_deliveryDateControlType">The delivery date control type used to decide the right child class.</param>
    /// <returns>A concrete instance of the right child class.</returns>
    public static SalesLineDeliveryDetailsInventDimQueryProvider newFromDeliveryDateControlType(
        Query _inventDimQuery,
        str _inventDimDataSourceName,
        SalesDeliveryDateControlType _deliveryDateControlType)
    {
        if (MpsDeliveryDateControlTypeCTPHelper::isDeliveryDateControlTypeClassicCTP(_deliveryDateControlType))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        else
        {
            SalesLineDeliveryDetailsInventDimQueryProvider inventDimQueryProvider =  new SalesLineDeliveryDetailsInventDimQueryProvider();
            inventDimQueryProvider.setInventDimQuery(_inventDimQuery);
            inventDimQueryProvider.setInventDimDataSourceName(_inventDimDataSourceName);

            return inventDimQueryProvider;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterWarehouses</Name>
				<Source><![CDATA[
    private void filterWarehouses(InventTable _inventTable, InventDimParm _visibleDimensions, SalesLine _salesLine)
    {
        QueryBuildDataSource inventDimQbds = inventDimQuery.dataSourceName(inventDimDataSourceName);
        QueryBuildRange warehouseQbr = SysQuery::findOrCreateRange(inventDimQbds, fieldNum(InventDim, InventLocationId));

        if (_visibleDimensions.(fieldNum(InventDimParm, InventLocationIdFlag)) == NoYes::Yes)
        {
            warehouseQbr.value(SysQuery::valueNotEmptyString());
            this.filterInvalidWareHouses(_inventTable);
        }
        else
        {
            warehouseQbr.value(SysQuery::valueEmptyString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInvalidWareHouses</Name>
				<Source><![CDATA[
    private void filterInvalidWareHouses(InventTable _inventTable)
    {
        System.Collections.SortedList siteMandatoryWarehouseMap =  new System.Collections.SortedList();
        System.Collections.SortedList siteAllWarehousesMap =  new System.Collections.SortedList();

        container wareHouseFilter;

        QueryBuildDataSource inventDimQbds = inventDimQuery.dataSourceName(inventDimDataSourceName);

        QueryBuildDataSource inventLocationQbds = inventDimQbds.addDataSource(tableNum(InventLocation));
        inventLocationQbds.addLink(fieldNum(InventDim, InventLocationId), fieldNum(InventLocation, InventLocationId), inventDimQbds.name());
        QueryBuildRange inventLocationQbr = SysQuery::findOrCreateRange(inventLocationQbds, fieldNum(InventLocation, InventLocationType));
        str inventLocationRange = '';
        inventLocationRange = queryRangeConcat(inventLocationRange, InventLocationType::Quarantine);
        inventLocationRange = queryRangeConcat(inventLocationRange, InventLocationType::Transit);
        inventLocationQbr.value(inventLocationRange);
        inventLocationQbds.joinMode(JoinMode::NoExistsJoin);

        InventItemSalesSetup siteSpecificSetup;

        while select * from siteSpecificSetup
                where siteSpecificSetup.ItemId                  == _inventTable.ItemId
                   && siteSpecificSetup.MandatoryInventLocation == NoYes::Yes
        {
            siteMandatoryWarehouseMap.Add(siteSpecificSetup.inventDim().InventSiteId, [queryValue(siteSpecificSetup.inventLocationId('', _inventTable))]);
        }

        // If siteMandatoryWarehouseMap contains some mandatory warehouses then we need further filtering
        if (siteMandatoryWarehouseMap.Count != 0)
        {
            QueryBuildRange warehouseQbr = SysQuery::findOrCreateRange(inventDimQbds, fieldNum(InventDim, InventLocationId));

            Queryrun qr =  new QueryRun(inventDimQuery);

            while (qr.next())
            {
                InventDim inventDimCurrent = qr.get(tableNum(InventDim), 1);

                if (inventDimCurrent.inventLocationId)
                {
                    var indexOfKey = siteAllWarehousesMap.IndexOfKey(inventDimCurrent.InventSiteId);

                    if (indexOfKey != -1)
                    {
                        container val = siteAllWarehousesMap.GetByIndex(indexOfKey);

                        if (conFind(val, queryValue(inventDimCurrent.InventLocationId)) == 0)
                        {
                            val += queryValue(inventDimCurrent.InventLocationId);
                        }

                        siteAllWarehousesMap.SetByIndex(indexOfKey, val);
                    }
                    else
                    {
                        siteAllWarehousesMap.Add(inventDimCurrent.InventSiteId, [queryValue(inventDimCurrent.InventLocationId)]);
                    }
                }
            }

            System.Collections.IDictionaryEnumerator siteAllWarehousesMapEnumerator = siteAllWarehousesMap.GetEnumerator();

            while (siteAllWarehousesMapEnumerator.MoveNext())
            {
                var currSite = siteAllWarehousesMapEnumerator.Key;

                var siteIndexInMadatoryMap = siteMandatoryWarehouseMap.IndexOfKey(currSite);

                if (siteIndexInMadatoryMap != -1)
                {
                    container val = siteMandatoryWarehouseMap.GetByIndex(siteIndexInMadatoryMap);

                    wareHouseFilter += val;
                }
                else
                {
                    container val = siteAllWarehousesMapEnumerator.Value;
                    wareHouseFilter += val;
                }
            }

            if (wareHouseFilter != conNull())
            {
                warehouseQbr.value(con2str(wareHouseFilter));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterBySite</Name>
				<Source><![CDATA[
    protected void filterBySite(InventTable _inventTable)
    {
        QueryBuildDataSource inventDimQbds = inventDimQuery.dataSourceName(inventDimDataSourceName);

        QueryBuildRange siteQbr = SysQuery::findOrCreateRange(inventDimQbds, fieldNum(InventDim, InventSiteId));

        siteQbr.value(SysQuery::valueNotEmptyString());

        this.filterByMandatorySite(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterByMandatorySite</Name>
				<Source><![CDATA[
    private void filterByMandatorySite(InventTable _inventTable)
    {
        QueryBuildDataSource inventDimQbds = inventDimQuery.dataSourceName(inventDimDataSourceName);

        var defaultOrderSetup = InventItemOrderSetupMap::findDefault(_inventTable.ItemId, InventItemOrderSetupType::Sales);

        if (defaultOrderSetup.MandatoryInventSite)
        {
            var mandatorySiteId = defaultOrderSetup.inventSiteId('', _inventTable);

            SysQuery::findOrCreateRange(inventDimQbds, fieldNum(InventDim, InventSiteId)).value(queryValue(mandatorySiteId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>