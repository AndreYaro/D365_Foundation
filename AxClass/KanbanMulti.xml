<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanMulti</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanMulti</c> class is the base class of other classes that is used to update kanbans and
///    kanban jobs. It is based on the <c>RunbaseMultiParm</c> class.
/// </summary>
public abstract class KanbanMulti extends RunBaseMultiParm
{
    KanbanMultiMode             kanbanMultiMode;
    Common                      callerBuffer;
    container                   callerContainerBuffer;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        kanbanMultiMode,
        callerBuffer,
        callerContainerBuffer
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the last values should be saved.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    The value should not be saved and overwritten by the last value framework as the
    ///    <c>KanbanJobStatusUpdate</c> form is initialized from this class hierarchy by using a <c>parmId</c>
    ///    value that is directly stored by the <c>RunBaseMultiParm</c> class.
    /// </remarks>
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the <c>canGoBatchJournal</c> value for the <c>Runbase</c> framework.
    /// </summary>
    /// <returns>
    ///    true if called through a form; otherwise, false.
    /// </returns>
    public boolean canGoBatchJournal()
    {
        return this.mustUseDialog() &&
               !this.isStatusReset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ParmBuffer</c> buffer and creates records in the status update tables.
    /// </summary>
    /// <remarks>
    ///    This method can be overridden by deriving classes to provide data from other sources.Remember to
    ///    call the super method with false as its parameter in overwritten methods.
    /// </remarks>
    protected void initStatusUpdate()
    {
        ParmBuffer          parmBuffer = this.defaultParmBuffer();
        int                 i;

        if (   !this.parmId()
            && (callerBuffer
            || callerContainerBuffer))
        {
            //initialize parmId
            RunBaseMultiParm::initParm(this);
            this.insertParmUpdate(this.defaultParmUpdate());

            if (callerBuffer)
            {
                //initialize a single record provided by the caller
                parmBuffer.Linenum = 1;
                this.insert(callerBuffer,parmBuffer);
            }
            else
            {
                if (callerContainerBuffer)
                {
                    // iterate over highlighted records in callers datasource
                    for (i=1;i<=conlen(callerContainerBuffer);i++)
                    {
                        if (typeof(conpeek(callerContainerBuffer,i)) == Types::Record)
                        {
                            Common common = conpeek(callerContainerBuffer,i);
                            parmBuffer.Linenum++;
                            this.insert(common,parmBuffer);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStatusReset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified action is a status reset.
    /// </summary>
    /// <returns>
    ///    Always returns false in the base class.
    /// </returns>
    public boolean isStatusReset()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether to use the dialog system or the form created in the <c>dialog</c> method for
    ///    dialog boxes.
    /// </summary>
    /// <returns>
    ///    true if the dialog system should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    By using the dialog system, a batch tab page is added to the form.
    /// </remarks>
    public boolean mustUseDialog()
    {
        return    kanbanMultiMode == KanbanMultiMode::Form
               && !this.isInBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerBuffer</Name>
				<Source><![CDATA[
    public Common parmCallerBuffer(Common _callerBuffer = callerBuffer)
    {
        callerBuffer = _callerBuffer;
        return callerBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerContainerBuffer</Name>
				<Source><![CDATA[
    public container parmCallerContainerBuffer(container _callerContainerBuffer = callerContainerBuffer)
    {
        callerContainerBuffer = _callerContainerBuffer;
        return callerContainerBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmkanbanMultiMode</Name>
				<Source><![CDATA[
    public KanbanMultiMode parmkanbanMultiMode(KanbanMultiMode _kanbanMultiMode = kanbanMultiMode)
    {
        kanbanMultiMode = _kanbanMultiMode;
        return kanbanMultiMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes code after the main processing is executed.
    /// </summary>
    protected void postRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes code before the main processing is executed.
    /// </summary>
    protected void preRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMain</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class and calls the <c>run</c> method.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> object that holds the parameters of the caller.
    /// </param>
    /// <remarks>
    ///    If the calling form has a <c>doFormCache</c> method, that method will be executed to refresh the
    ///    calling form.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The <c>Args</c> object was not provided.
    /// </exception>
    public void runMain(Args _args)
    {
        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
        else
        {
            if (   (_args.parmEnumType() == enumnum(RunChoose)
                &&  _args.parmEnum()     == RunChoose::Run)
                || _args.parmEnumType()  == enumnum(KanbanMultiMode))
            {
                KanbanMessageBoard kanbanMessageBoard = KanbanMessageBoard::newStandard(_args.caller());

                try
                {
                    this.runOnServer();
                    kanbanMessageBoard.displayMessages();
                }
                catch (Exception::Error)
                {
                    kanbanMessageBoard.displayMessages();
                }

                if (_args.caller())
                {
                    FormRun callerForm = _args.caller() as FormRun;
                    if (callerForm && formHasMethod(callerForm, identifierstr(doFormCache)))
                    {
                        callerForm.doFormCache(this.packRecs());
                    }
                }
            }
            else
            {
                if (_args.parmEnumType() == enumnum(RunChoose))
                {
                    RunBaseMultiParm::runSpecial(_args);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>runsImpersonated</c> property for the <c>Runbase</c> framework.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects a <c>ParmBuffer</c> record that matches the current parameter ID.
    /// </summary>
    /// <returns>
    /// The <c>ParmBuffer</c> record.
    /// </returns>
    protected ParmBuffer setParmBuffer()
    {
        ParmBuffer parmBuffer = this.defaultParmBuffer();

        if (this.parmId())
        {
            select parmBuffer
                order by Linenum
                where parmBuffer.ParmId == this.parmId();
        }
        return parmBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version = conpeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,base] = _packedClass;
                ret = super(base);
                break;
            default:
                this.initParmDefault();
                ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanMultiMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>kanbanMultiMode</c> instance variable of the instance of the <c>KanbanMulti</c>
    ///    class.
    /// </summary>
    /// <param name="_args">
    ///    The arguments used to determine the <c>KanbanMultiMode</c> instance variable.
    /// </param>
    /// <returns>
    ///    A <c>KanbanMultiMode</c> enumeration value.
    /// </returns>
    public static KanbanMultiMode kanbanMultiMode(Args _args)
    {
        KanbanMultiMode kanbanMultiMode;

        if (   _args
            && (_args.parmEnumType()  == enumnum(RunChoose)
            ||  (_args.parmEnumType() == enumnum(KanbanMultiMode)
            &&   _args.parmEnum()     == KanbanMultiMode::Form)))
        {
            kanbanMultiMode = KanbanMultiMode::Form;
        }
        else
        {
            kanbanMultiMode = KanbanMultiMode::Silent;
        }

        return kanbanMultiMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the argument for an instance of the <c>KanbanMulti</c> class.
    /// </summary>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether the form to choose state should be opened.
    /// </param>
    /// <param name="_parmId">
    ///    The parameter ID.
    /// </param>
    /// <param name="_caller">
    ///    The caller.
    /// </param>
    /// <returns>
    ///    The arguments created.
    /// </returns>
    public static Args makeArgs(
        boolean _silent = true,
        ParmId  _parmId = '',
        Object  _caller = null)
    {
        Args args = new Args();
        args.parmEnumType(enumnum(KanbanMultiMode));
        args.parmEnum(_silent ? KanbanMultiMode::Silent : KanbanMultiMode::Form);
        args.parm(_parmId);
        args.caller(_caller);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedFormRecordsToContainer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a container that has only the selected records from a form datasource.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> object.
    /// </param>
    /// <returns>
    ///    A container of records or an empty container.
    /// </returns>
    public static container selectedFormRecordsToContainer(Args _args)
    {
        Common              common;
        container           containerRecords = connull();

        if (_args)
        {
            if (   _args.dataset()
                && FormDataUtil::getFormDataSource(_args.record()))
            {
                //iterate selected form records and add to container
                FormDataSource formDataSource = FormDataUtil::getFormDataSource(_args.record());
                for (common=formDataSource.getFirst(true)
                        ? formDataSource.getFirst(true)
                        : _args.record();common;common=formDataSource.getNext())
                {
                    containerRecords += [common];
                }
            }
            else
            {
                if (_args.record())
                {
                    common           = _args.record();
                    containerRecords = [common];
                }
            }
        }

        return containerRecords;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
