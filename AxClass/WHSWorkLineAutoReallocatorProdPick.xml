<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineAutoReallocatorProdPick</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkLineAutoReallocatorProdPick</c> class is responsible for automatically reallocating a production picking work line.
/// </summary>
[
    WHSWorkLineReallocatorAttribute(WHSWorkTransType::ProdPick)
]
public class WHSWorkLineAutoReallocatorProdPick extends WHSWorkLineAutoReallocatorBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSWorkLineAutoReallocatorProdPick construct()
    {
        return new WHSWorkLineAutoReallocatorProdPick();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLine</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the reallocateWorkLineHandlingQty method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty reallocateWorkLine()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());
        
        return this.reallocateWorkLineHandlingQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLineHandlingQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventHandlingQty reallocateWorkLineHandlingQty()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            return this.reallocateWorkLineHandlingQuantity();
        }

        return this.reallocateWorkLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLineHandlingQuantity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected InventHandlingQty reallocateWorkLineHandlingQuantity()
    {
        super();

        WHSProdBOMPool::adjustWavedHandlingQty(workLineToReallocate.InventTransId, reallocatedInventHandlingQty);

        return reallocatedInventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyAvailForWorkCreationAboveLocationDims</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the calculateHandlingQtyAvailForWorkCreationAboveLocationDims method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty calculateQtyAvailForWorkCreationAboveLocationDims()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());

        return this.calculateHandlingQuantityAvailForWorkCreationAboveLocationDims();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHandlingQtyAvailForWorkCreationAboveLocationDims</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventHandlingQty calculateHandlingQtyAvailForWorkCreationAboveLocationDims()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            return this.calculateHandlingQuantityAvailForWorkCreationAboveLocationDims();
        }

        return this.calculateQtyAvailForWorkCreationAboveLocationDims();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHandlingQuantityAvailForWorkCreationAboveLocationDims</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected InventHandlingQty calculateHandlingQuantityAvailForWorkCreationAboveLocationDims()
    {
        InventQty inventQtyPhysicallyReserved = WHSInvent::calculateCommittedHandlingQuantity(workLineToReallocate.InventTransId, workLineToReallocate.inventDim().inventDimId);
        WHSProdBOMPool prodBOMPool = WHSProdBOMPool::find(workLineToReallocate.InventTransId);

        InventQty inventQtyOnDemand = inventQtyPhysicallyReserved - prodBOMPool.WavedQty;
        InventHandlingQty inventQtyLeftToWave = WHSPoolProdBOM::newStandard(prodBOMPool).handlingQtyLeftToWave();

        return min(inventQtyLeftToWave, inventQtyOnDemand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromWorkLineToReallocate</Name>
				<Source><![CDATA[
    protected void initTmpWorkLineFromWorkLineToReallocate()
    {
        tmpWorkLine.WorkId          = workLineToReallocate.WorkId;
        tmpWorkLine.ItemId          = workLineToReallocate.ItemId;
        tmpWorkLine.InventTransId   = workLineToReallocate.InventTransId;
        tmpWorkLine.OrderNum        = workLineToReallocate.OrderNum;
        tmpWorkLine.PackingQty      = WHSInventTable::getDefaultPackingQty(workLineToReallocate.ItemId);

        InventDim inventDim = workLineToReallocate.inventDim();
        inventDim.clearLocationAndBelowDim(workLineToReallocate.ItemId);
        inventDim = InventDim::findOrCreate(inventDim);
        tmpWorkLine.InventDimId = inventDim.inventDimId;

        var prodBOMPool = WHSProdBOMPool::find(workLineToReallocate.InventTransId);
        var prodBOM = ProdBOM::findTransId(prodBOMPool.InventTransId);

        tmpWorkLine.OrderNum        = prodBOM.ProdId;
        tmpWorkLine.ProdBOMOprNum   = prodBOM.OprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpReallocatedWorkLines</Name>
				<Source><![CDATA[
    protected void initTmpReallocatedWorkLines()
    {
        tmpWorkLine.WorkType        = WHSWorkType::Pick;
        tmpWorkLine.WorkTransType   = WHSWorkTransType::ProdPick;
        tmpWorkLine.RefTableId      = tableNum(ProdBOM);

        this.initTmpWorkLineFromWorkLineToReallocate();
        this.initTmpWorkLineFromWaveTable();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>