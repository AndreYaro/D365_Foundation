<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingDimTracingHierarchyTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Class for handling the tree control in the tracking dimension tracing forms.
/// </summary>
class InventTrackingDimTracingHierarchyTree
{
    #define.TreeNodePartSeparator('  ●  ')
    #define.InitialNumberOfExpandedNodes(50)

    FormTreeControl                     tree;
    FormComboBoxControl                 alreadyTracedComboBoxCtrl;
    FormButtonControl                   goToAlreadyTracedButton;
    FormButtonControl                   returnFromGoToAlreadyTracedButton;

    TreeItemIdx                         topNodeId;

    InventTrackingDimTracingHierarchy   inventTrackingDimTracingHierarchy;

    Map                                 treeNodeIdx2HiearchyMap;
    List                                treeNodeList;                   // List of tree nodes - in the order they are added to the tree.
    Set                                 expandedNodes;
    Map                                 tracingRecordPrimaryNode;       // The first/primary node in which a given transaction is shown in the tree
    Map                                 treeNodeAlreadyTracedInNode;    // For tree nodes with transactions which have already been traced this maps to the primary tree node.
    Stack                               lastGoToTracedSourceNode;
    private static boolean              includeWarehouseSpecificInventoryTransactions;    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHierarchyNodeChildren</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Add the hierarchy children for the specified hierarchy node under the specified tree node.
    /// </summary>
    /// <param name="_nodeId">
    ///    The ID of the tree node.
    /// </param>
    /// <param name="_hierarchyNodeId">
    ///    The ID of the hierarchy node.
    /// </param>
    protected void addHierarchyNodeChildren(TreeItemIdx _nodeId, int _hierarchyNodeId)
    {
        FormTreeItem                parentItem              = tree.getItem(_nodeId);
        container                   packedChildNodeRecords;
        TreeItemIdx                 lastChildIdx = 0;

        expandedNodes.add(_hierarchyNodeId);

        if (parentItem)
        {
            parentItem.stateExpanded(true);
            tree.setItem(parentItem);
        }

        List childNodes = inventTrackingDimTracingHierarchy.childNodes(_hierarchyNodeId);
        if (childNodes)
        {
            ListEnumerator le = childNodes.getEnumerator();
            while (le.moveNext())
            {
                int hierarchyChildNodeId = le.current();                
                InventDimTrackingInventTransNode node = this.findInventTransNodeById(hierarchyChildNodeId);
                if (node && node.transactionDTOSet())
                {
                    lastChildIdx = this.createItemTreeNodeFromInventTransTracingNode(node, hierarchyChildNodeId, _nodeId);
                }
                else 
                {
                    throw error(Error::wrongUseOfFunction(funcName())); // Only child nodes of type inventory transaction are supported.
                }
            }
        }

        if (lastChildIdx == 0 && parentItem && parentItem.children())
        {
            parentItem.children(false);
            tree.setItem(parentItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Add second level nodes and expand children if needed.
    /// </summary>
    public void buildTree()
    {
        if (expandedNodes.in(topNodeId))
        {
            return;
        }

        this.addHierarchyNodeChildren(topNodeId, 0);
        this.expandInitialNodes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemTreeNodeFromInventTransTracingNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create a child node in the tree for the specified item transaction under the specified tree node.
    /// </summary>
    /// <param name="_inventTransTracingNode">
    ///    The item tracing node of type inventory transaction.
    /// </param>
    /// <param name="_hierarchyNodeId">
    ///    The hierarchy node for which the tree node is being created.
    /// </param>
    /// <param name="_nodeId">
    ///    The tree node under which the new node is created.
    /// </param>
    /// <param name="_insertAfter">
    ///    The ID of the tree node sibling after which the node is inserted. Optional.
    /// </param>
    /// <returns>
    ///    The ID of the new node.
    /// </returns>
    private TreeItemIdx createItemTreeNodeFromInventTransTracingNode(
        InventDimTrackingInventTransNode        _inventTransTracingNode,
        int                                     _hierarchyNodeId,
        TreeItemIdx                             _nodeId,
        TreeItemIdx                             _insertAfter = 0)
    {
        str inventTransTracingNodeKey;

        if (includeWarehouseSpecificInventoryTransactions)
        {
            inventTransTracingNodeKey = _inventTransTracingNode.tracingNodeKey();
        }
        else
        {
            InventTrackingDimTracingInventTransDTO inventTransDTO = _inventTransTracingNode.parmInventTransDTO();
            inventTransTracingNodeKey = InventTrackingDimTracingRelations::tracingNodeKey(tableNum(InventTrans), inventTransDTO.recId());
        }

        int firstAppearanceTreeNode = 0;

        FormTreeItem item = new FormTreeItem(_inventTransTracingNode.treeNodeTxt());

        if (tracingRecordPrimaryNode.exists(inventTransTracingNodeKey))
        {
            firstAppearanceTreeNode = tracingRecordPrimaryNode.lookup(inventTransTracingNodeKey);
            // Don't allow further expansion
            expandedNodes.add(_hierarchyNodeId);
            item.stateExpanded(true);
            item.children(false);
        }
        else
        {
            if (inventTrackingDimTracingHierarchy.childNodes(_hierarchyNodeId))
            {
                item.stateExpanded(false);
                item.children(true);
            }
            else
            {
                item.stateExpanded(true);
                item.children(false);
            }
        }

        TreeItemIdx childNodeId = tree.addItem(_nodeId,_insertAfter,item);
        treeNodeIdx2HiearchyMap.insert(childNodeId, _hierarchyNodeId);
        treeNodeList.addEnd(childNodeId);

        // Save information about already traced status and relations
        if (firstAppearanceTreeNode != 0)
        {
            // This record has previously been added to the tree - add a reference.
            treeNodeAlreadyTracedInNode.insert(childNodeId, firstAppearanceTreeNode);
        }
        else
        {
            // First time this record is added to the tree control
            tracingRecordPrimaryNode.insert(inventTransTracingNodeKey, childNodeId);
        }

        tree.getItem(childNodeId);

        return childNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTopTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a top tree node based on the used tracing criteria.
    /// </summary>
    /// <param name="_inventTrackingDimTracingCriteria">
    ///    The used tracing criteria.
    /// </param>
    public void createTopTreeNode(
        InventTrackingDimTracingCriteria    _inventTrackingDimTracingCriteria)
    {
        FormTreeItem item = new FormTreeItem(this.criteriaNodeText(_inventTrackingDimTracingCriteria));
        item.stateExpanded(false);
        item.children(true);
        topNodeId = tree.addItem(0,0,item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaNodeText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the tree node text for the top node.
    /// </summary>
    /// <param name="_inventTrackingDimTracingCriteria">
    ///    The search criterias.
    /// </param>
    /// <returns>
    ///    A string.
    /// </returns>
    public str criteriaNodeText(InventTrackingDimTracingCriteria    _inventTrackingDimTracingCriteria)
    {
        InventDim       inventDimCriteria = _inventTrackingDimTracingCriteria.parmInventDimCriteria().data();   // Make a copy as we might modify for testing
        str             res = _inventTrackingDimTracingCriteria.parmItemIdCriteria();
        ListEnumerator  dimFieldListEnumerator = InventDim::dimFieldListEnumerator();

        while (dimFieldListEnumerator.moveNext())
        {
            FieldId dimFieldId = dimFieldListEnumerator.current();
            if (inventDimCriteria.(dimFieldId))
            {
                res += ' / ' +  inventDimCriteria.(dimFieldId);
            }
        }

        if (_inventTrackingDimTracingCriteria.parmPdsVendBatchIdCriteria())
        {
            res += ' / ' +  _inventTrackingDimTracingCriteria.parmPdsVendBatchIdCriteria();
        }

        if (_inventTrackingDimTracingCriteria.parmItemIdCriteria())
        {
            if (PdsGlobal::pdsIsCWItem(_inventTrackingDimTracingCriteria.parmItemIdCriteria()))
            {
                // Catch weight quantity must be integral numbers though it is stored in a real data type; use integer for external data representation.
                res += #TreeNodePartSeparator;
                res += strFmt('%1 %2', real2int(inventTrackingDimTracingHierarchy.parmCurrentOnHandCW()), PdsCatchWeight::cwUnitId(_inventTrackingDimTracingCriteria.parmItemIdCriteria()));
            }

            res += #TreeNodePartSeparator;
            res += strFmt('%1 %2', inventTrackingDimTracingHierarchy.parmCurrentOnHand(), _inventTrackingDimTracingCriteria.inventTable().inventUnitId());
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandInitialNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expand tree nodes when first opening the form, so users don't have to in simple traces.
    /// </summary>
    protected void expandInitialNodes()
    {
        int             remainingNodes = #InitialNumberOfExpandedNodes - expandedNodes.elements();
        boolean         anyExpanded = true;

        while (anyExpanded && remainingNodes > 0)
        {
            anyExpanded = false;

            List initialTreeNodeList = List::create(treeNodeList.pack());
            ListEnumerator  treeNodeEnumerator = initialTreeNodeList.getEnumerator();
            while (treeNodeEnumerator.moveNext())
            {
                if (!expandedNodes.in(treeNodeEnumerator.current()))
                { // not already expanded
                    this.expandNode(treeNodeEnumerator.current());
                    anyExpanded = true;
                    remainingNodes--;
                    if (remainingNodes <= 0)
                    {
                        return;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expand the specified tree node, so children are added.
    /// </summary>
    /// <param name="_nodeId">
    ///    The node to expand.
    /// </param>
    public void expandNode(TreeItemIdx _nodeId)
    {
        if (!treeNodeIdx2HiearchyMap.exists(_nodeId))
        {
            return;
        }

        int hierarchyNodeId = treeNodeIdx2HiearchyMap.lookup(_nodeId);
        if (expandedNodes.in(hierarchyNodeId))
        {
            return;
        }

        this.addHierarchyNodeChildren(_nodeId, hierarchyNodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>goBackFromGotoAlreadyTracedNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Navigate back to the tree node where last goTo... was called.
    /// </summary>
    public void goBackFromGotoAlreadyTracedNode()
    {
        TreeItemIdx     newNodeId;

        [newNodeId] = lastGoToTracedSourceNode.pop();
        if (newNodeId)
        {
            tree.select(newNodeId);
            tree.setFocus();
        }
        returnFromGoToAlreadyTracedButton.enabled(lastGoToTracedSourceNode.qty() > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToAlreadyTracedNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Navigate to the tree node for the already traced line.
    /// </summary>
    /// <param name="_nodeId">
    ///    The ID of the tree node.
    /// </param>
    public void goToAlreadyTracedNode(TreeItemIdx _nodeId)
    {
        if (treeNodeAlreadyTracedInNode.exists(_nodeId))
        {
            // Save information about where we came from
            lastGoToTracedSourceNode.push([_nodeId]);
            returnFromGoToAlreadyTracedButton.enabled(true);

            TreeItemIdx newNodeId = treeNodeAlreadyTracedInNode.lookup(_nodeId);
            tree.select(newNodeId);
            tree.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTrackingDimTracingHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTrackingDimTracingHierarchy</c> used by this hierarchy tree.
    /// </summary>
    /// <returns>
    ///    The <c>InventTrackingDimTracingHierarchy</c> used by this hierarchy tree.
    /// </returns>
    public InventTrackingDimTracingHierarchy inventTrackingDimTracingHierarchy()
    {
        return inventTrackingDimTracingHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        treeNodeIdx2HiearchyMap = new Map(Types::Integer, Types::Integer);
        treeNodeList = new List(Types::Integer);
        expandedNodes = new Set(Types::Integer);
        tracingRecordPrimaryNode = new Map(Types::String, Types::Integer);
        treeNodeAlreadyTracedInNode = new Map(Types::Integer, Types::Integer);
        lastGoToTracedSourceNode = new Stack();
        includeWarehouseSpecificInventoryTransactions = WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a list of records related to the specified hierarchy node.
    /// </summary>
    /// <param name="_hierarchyNodeId">
    ///    The hierarchy node for which records are retrieved.
    /// </param>
    /// <returns>
    ///    A container with records.
    /// </returns>
    public container nodeRecords(int _hierarchyNodeId)
    {
        if (_hierarchyNodeId)
        {
            InventDimTrackingInventTransNode node = inventTrackingDimTracingHierarchy.findInventTransNodeById(_hierarchyNodeId);

            if (includeWarehouseSpecificInventoryTransactions)
            {
                if (node && node.getTransactionType() == InventTrackingTransactionType::InventTrans)
                {
                    InventTrans inventTrans = InventTrans::findRecId(node.parmInventTransDTO().recId());
                    InventTransOrigin inventTransOrigin = inventTrans.inventTransOrigin();
                    return [InventTrackingDimNodeType::InventTrans, [inventTransOrigin, inventTrans]];
                }
                else if (node && node.getTransactionType() == InventTrackingTransactionType::WHSInventoryTransaction)
                {
                    InventDimTrackingWHSInventoryTransactionNode whsInventoryTransactionNode
                        = node as InventDimTrackingWHSInventoryTransactionNode;
                
                    return [InventTrackingDimNodeType::WHSInventoryTransaction, whsInventoryTransactionNode.parmWHSInventoryTransactionDTO().pack()];
                }
            }
            else
            {
                if (node)
                {
                    InventTrans inventTrans = InventTrans::findRecId(node.parmInventTransDTO().recId());
                    InventTransOrigin inventTransOrigin = inventTrans.inventTransOrigin();
                    return [InventTrackingDimNodeType::InventTrans, [inventTransOrigin, inventTrans]];
                }
            }
        }

        return [InventTrackingDimNodeType::Top, conNull()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransNodeById</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an item tracing tree node with the specified node ID and inventory transaction type.
    /// </summary>
    /// <param name = "_hierarchyNodeId">The ID of the node in the item tracing tree.</param>
    /// <returns>An item tracing node with the specified ID if it is of type inventory transaction; otherwise, null.</returns>
    private InventDimTrackingInventTransNode findInventTransNodeById(int _hierarchyNodeId)
    {
        return inventTrackingDimTracingHierarchy.findInventTransNodeById(_hierarchyNodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAlreadyTracedComboBoxCtrl</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmAlreadyTracedComboBoxCtrl(FormComboBoxControl _alreadyTracedComboBoxCtrl = alreadyTracedComboBoxCtrl)
    {
        alreadyTracedComboBoxCtrl = _alreadyTracedComboBoxCtrl;

        return alreadyTracedComboBoxCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGoToAlreadyTracedButton</Name>
				<Source><![CDATA[
    public FormButtonControl parmGoToAlreadyTracedButton(FormButtonControl _goToAlreadyTracedButton = goToAlreadyTracedButton)
    {
        goToAlreadyTracedButton = _goToAlreadyTracedButton;

        return goToAlreadyTracedButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTrackingDimTracingHierarchy</Name>
				<Source><![CDATA[
    public InventTrackingDimTracingHierarchy parmInventTrackingDimTracingHierarchy(InventTrackingDimTracingHierarchy _inventTrackingDimTracingHierarchy = inventTrackingDimTracingHierarchy)
    {
        inventTrackingDimTracingHierarchy = _inventTrackingDimTracingHierarchy;

        return inventTrackingDimTracingHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnFromGoToAlreadyTracedButton</Name>
				<Source><![CDATA[
    public FormButtonControl parmReturnFromGoToAlreadyTracedButton(FormButtonControl _returnFromGoToAlreadyTracedButton = returnFromGoToAlreadyTracedButton)
    {
        returnFromGoToAlreadyTracedButton = _returnFromGoToAlreadyTracedButton;

        return returnFromGoToAlreadyTracedButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTree</Name>
				<Source><![CDATA[
    public FormTreeControl parmTree(FormTreeControl _tree = tree)
    {
        if (tree != _tree)
        {
            tree = _tree;
        }
        return tree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFocusOnTopTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Select the top tree node and set focus to the tree control.
    /// </summary>
    public void setFocusOnTopTreeNode()
    {
        if (topNodeId)
        {
            tree.getItem(topNodeId);
            tree.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeNodeIdx2HierarchyNodeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the hierarchy node ID for the specified tree node ID.
    /// </summary>
    /// <param name="_treeNodeIdx">
    ///    The tree node ID.
    /// </param>
    /// <returns>
    ///    An integer.
    /// </returns>
    public int treeNodeIdx2HierarchyNodeId(TreeItemIdx _treeNodeIdx)
    {
        if (treeNodeIdx2HiearchyMap && treeNodeIdx2HiearchyMap.exists(_treeNodeIdx))
        {
            return treeNodeIdx2HiearchyMap.lookup(_treeNodeIdx);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAlreadyTracedStatusCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Update the control value for with information regarding already tracked nodes.
    /// </summary>
    /// <param name="_nodeId">
    ///    The ID of the tree node.
    /// </param>
    public void updateAlreadyTracedStatusCtrl(TreeItemIdx _nodeId)
    {
        InventTrackingDimNodeDisplayStatus  inventTrackingDimNodeDisplayStatus = InventTrackingDimNodeDisplayStatus::FirstAppearance;
        if (treeNodeAlreadyTracedInNode.exists(_nodeId))
        {
            int firstAppearanceTreeNode = treeNodeAlreadyTracedInNode.lookup(_nodeId);
            if (firstAppearanceTreeNode != _nodeId)
            {
                FormTreeItem firstAppearanceTreeItem = tree.getItem(firstAppearanceTreeNode);
                if (firstAppearanceTreeItem.children())
                {
                    inventTrackingDimNodeDisplayStatus = InventTrackingDimNodeDisplayStatus::TracedWithChildren;
                }
                else
                {
                    inventTrackingDimNodeDisplayStatus = InventTrackingDimNodeDisplayStatus::TracedNoChildren;
                }
            }
        }
        alreadyTracedComboBoxCtrl.selectText(strFmt('%1', inventTrackingDimNodeDisplayStatus));
        goToAlreadyTracedButton.enabled(inventTrackingDimNodeDisplayStatus != InventTrackingDimNodeDisplayStatus::FirstAppearance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTrackingDimTracingHierarchyTree construct()
    {
        return new InventTrackingDimTracingHierarchyTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of this class based on form controls and the tracing hierarchy.
    /// </summary>
    /// <param name="_tree">
    ///    The form tree control.
    /// </param>
    /// <param name="_alreadyTracedComboBoxCtrl">
    ///    The form control for showing already traced status.
    /// </param>
    /// <param name="_goToAlreadyTracedButton">
    ///    The form button control for navigating to the first appearance of the transaction in the trace.
    /// </param>
    /// <param name="_returnFromGoToAlreadyTracedButton">
    ///    The form button control for navigating back to the source of the last goToAlreadyTraced.
    /// </param>
    /// <param name="_inventTrackingDimTracingHierarchy">
    ///    The tracing hierarchy.
    /// </param>
    /// <returns>
    ///    An instance of this class.
    /// </returns>
    static public InventTrackingDimTracingHierarchyTree newFromForm(
        FormTreeControl                     _tree,
        FormComboBoxControl                 _alreadyTracedComboBoxCtrl,
        FormButtonControl                   _goToAlreadyTracedButton,
        FormButtonControl                   _returnFromGoToAlreadyTracedButton,
        InventTrackingDimTracingHierarchy   _inventTrackingDimTracingHierarchy)
    {
        InventTrackingDimTracingHierarchyTree   inventTrackingDimTracingHierarchyTree = InventTrackingDimTracingHierarchyTree::construct();
        inventTrackingDimTracingHierarchyTree.parmTree(_tree);
        inventTrackingDimTracingHierarchyTree.parmAlreadyTracedComboBoxCtrl(_alreadyTracedComboBoxCtrl);
        inventTrackingDimTracingHierarchyTree.parmGoToAlreadyTracedButton(_goToAlreadyTracedButton);
        _goToAlreadyTracedButton.enabled(false);
        inventTrackingDimTracingHierarchyTree.parmReturnFromGoToAlreadyTracedButton(_returnFromGoToAlreadyTracedButton);
        _returnFromGoToAlreadyTracedButton.enabled(false);
        inventTrackingDimTracingHierarchyTree.parmInventTrackingDimTracingHierarchy(_inventTrackingDimTracingHierarchy);
        return inventTrackingDimTracingHierarchyTree;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>