<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFinancialJournalReportControllerBE</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerFinancialJournalReportControllerBE extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcPageNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the page number.
    /// </summary>
    /// <param name="_finalReporting">
    /// A Boolean value that indicates whether the reporting is final.
    /// </param>
    /// <param name="_ledgerPostingJournalIdBE">
    /// The ledger posting journal ID.
    /// </param>
    /// <param name="_fromDate">
    /// A <c>FromDate</c> value.
    /// </param>
    /// <returns>
    /// The page number.
    /// </returns>
    public int calcPageNum(boolean _finalReporting, LedgerPostingJournalIdBE _ledgerPostingJournalIdBE, FromDate _fromDate)
    {
        LedgerJournalPeriodFinalPrintBE journalPeriodFinalPrintBe = null;
        int                             pageNum;

        pageNum = 1;
        if (_finalReporting)
        {
            journalPeriodFinalPrintBe = LedgerJournalPeriodFinalPrintBE::findPrev(_ledgerPostingJournalIdBE, _fromDate-1, false);

            if (journalPeriodFinalPrintBe)
            {
                pageNum  = journalPeriodFinalPrintBe.NumberLastPage + 1;
            }
        }
        return pageNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        LedgerFinancialJournalReportCntrctBE    contract;
        CompanyInfo                             companyInfo = CompanyInfo::find();
        #define.coRegNumDigits('0123456789')

        super();
        contract = this.parmReportContract().parmRdpContract() as LedgerFinancialJournalReportCntrctBE;

        contract.parmEntNum(companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, contract.parmToDate()));
        contract.parmVatNum(strIns(strIns(strKeep(companyInfo.CoRegNum, #coRegNumDigits),'.',5),'.',9));
        contract.parmReportType("@SYS79658");
        contract.parmPageNum(this.calcPageNum(  contract.parmFinalReporting(),
                                                contract.parmFinLedgerPostingJournalId(),
                                                contract.parmFromDate()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        const str FeatureReference = 'BE-00024';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        LedgerFinancialJournalReportControllerBE controller = new LedgerFinancialJournalReportControllerBE();
        controller.parmArgs(_args);
        controller.parmReportName(ssrsReportStr(LedgerFinancialJournalReportBE, ReportFinOth));
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>