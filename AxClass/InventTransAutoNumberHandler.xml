<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransAutoNumberHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>InventTransAutoNumberHandler</c> class handles automatic assignment of owner, batch, serial numbers for <c>InventTrans</c> records.
/// </summary>
public class InventTransAutoNumberHandler
{
    InventMovement  movement;
    InventTrans     inventTrans;
    InventDim       inventDimInitial;
    boolean         isPhysicalUpdate;
    boolean         mustAutoCreateBatch;
    boolean         mustAutoCreateSerial;
    boolean         mustAssignOwnerId;

    boolean         isInitialized;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePopulateAutoInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepopulates dimensions.
    /// </summary>
    protected void prePopulateAutoInventDim()
    {
        InventOwner_RU::createAndAssignOwner(movement, inventDimInitial, isphysicalUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize()
    {
        if (!isInitialized)
        {
            this.prePopulateAutoInventDim();
			InventTransAutoCreateDimCheck inventTransAutoCreateDimCheck = InventTransAutoCreateDimCheck::newFromMovementDim(movement, inventDimInitial, isphysicalUpdate);
            mustAutoCreateBatch = inventTransAutoCreateDimCheck.mustAutoCreateBatch();
            mustAutoCreateSerial = inventTransAutoCreateDimCheck.mustAutoCreateSerial();
            mustAssignOwnerId = this.mustAssignOwnerId();

            isInitialized = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAssignOwnerId</Name>
				<Source><![CDATA[
    private boolean mustAssignOwnerId()
    {
        return InventOwner_RU::mustAssignOwnerId(movement, inventDimInitial, this.parmIsPhysicalUpdate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimInitial</Name>
				<Source><![CDATA[
    protected InventDim parmInventDimInitial(InventDim _inventDimInitial = inventDimInitial)
    {
        inventDimInitial = _inventDimInitial;

        return inventDimInitial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTrans</Name>
				<Source><![CDATA[
    protected InventTrans parmInventTrans(InventTrans _inventTrans = inventTrans)
    {
        inventTrans = _inventTrans;

        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPhysicalUpdate</Name>
				<Source><![CDATA[
    protected boolean parmIsPhysicalUpdate(boolean _isPhysicalUpdate = isPhysicalUpdate)
    {
        isPhysicalUpdate = _isPhysicalUpdate;

        return isPhysicalUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMovement</Name>
				<Source><![CDATA[
    protected InventMovement parmMovement(InventMovement _movement = movement)
    {
        movement = _movement;

        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareInventTransForAutoNumberingTrackingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares auto numbering inventory dimensions for inventory transaction.
    /// </summary>
    /// <param name="_totalQty">
    /// The total inventory quantity which need creating inventory dimensions.
    /// </param>
    /// <param name="_totalCWQty">
    /// The total catch weight quantity which need creating inventory dimensions.
    /// </param>
    /// <returns>
    /// A list which contains the transaction record IDs and the created inventory dimension ID.
    /// </returns>
    [Hookable(false)]
    final public List prepareInventTransForAutoNumberingTrackingDimensions(InventQty _totalQty, PdsCWQty _totalCWQty)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightHandlingWeightLogic(funcName(), inventTrans.ItemId, _totalCWQty))
        {
            return this.prepareInventoryTransactionsForAutoNumbering(_totalQty, _totalCWQty);
        }

        return this.prepareInventTransForAutoNumbering(_totalQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareInventTransForAutoNumbering</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Prepare auto numbering inventory dimensions for inventory transaction.
    /// </summary>
    /// <param name="_totalQty">
    ///  The total quantity which need creating inventory dimensions.
    /// </param>
    /// <returns>
    ///  A list which contains the transaction record IDs and the created inventory dimension ID.
    /// </returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the prepareInventTransForAutoNumberingTrackingDimensions method. Extenders should move their logic to wrap the prepareInventoryTransactionsForAutoNumbering method.', false, 30\9\2019)]
    public List prepareInventTransForAutoNumbering(InventQty _totalQty)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), inventTrans.ItemId);

        return this.prepareInventoryTransactionsForAutoNumbering(_totalQty, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareInventoryTransactionsForAutoNumbering</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares auto numbering inventory dimensions for inventory transaction.
    /// </summary>
    /// <param name="_totalQty">
    /// The total inventory quantity which need creating inventory dimensions.
    /// </param>
    /// <param name="_totalCWQty">
    /// The total catch weight quantity which need creating inventory dimensions.
    /// </param>
    /// <returns>
    /// A list which contains the transaction record IDs and the created inventory dimension ID.
    /// </returns>
    protected List prepareInventoryTransactionsForAutoNumbering(InventQty _totalQty, PdsCWQty _totalCWQty)
    {
        InventNumGroup  inventNumGroupBatch;
        InventNumGroup  inventNumGroupSerial;

        InventDim       inventDimAutoAssign;

        List inventTransList = new List(Types::Container);

        if (inventTrans.Qty > 0)
        {
            this.initialize();

            inventDimAutoAssign.data(inventDimInitial);

            if (mustAutoCreateSerial)
            {
                inventNumGroupSerial = InventNumGroup::find(movement.inventTable().SerialNumGroupId);
            }

            if (mustAutoCreateBatch)
            {
                inventNumGroupBatch = InventNumGroup::find(movement.inventTable().BatchNumGroupId);

                if (PDSGlobal::pdsIsCWItem(inventTrans.ItemId) && inventNumGroupBatch.PerQty > 0)
                {
                    throw error(strFmt("@PDS116", fieldPName(InventTable,BatchNumGroupId)));
                }
            }
        }

        if (mustAutoCreateBatch || mustAutoCreateSerial || inventDimAutoAssign.InventOwnerId_RU)
        {
            RecId     recIdBatch  = inventTrans.RecId;
            RecId     recIdSerial = inventTrans.RecId;
            InventQty qtyBatch    = inventTrans.Qty;

            while (qtyBatch > 0 &&  _totalQty > 0)
            {
                if (mustAutoCreateBatch)
                {
                    recIdBatch = inventTrans.RecId;

                    if (inventTrans.Qty > inventNumGroupBatch.PerQty && inventNumGroupBatch.PerQty > 0)
                    {
                        inventTrans.updateSplit(inventNumGroupBatch.PerQty);
                    }
                    // Only add batch numbers to the quantity currently being updated.
                    else if (inventTrans.Qty > _totalQty)
                    {
                        inventTrans.updateSplit(_totalQty, _totalCWQty);
                    }

                    inventDimAutoAssign.InventBatchId = this.generateBatchNumber(inventNumGroupBatch);

                    if (!inventDimAutoAssign.InventBatchId)
                    {
                        throw error(strFmt("@SYS54023",inventNumGroupBatch.NumGroupId));
                    }

                    InventBatch::createFromMovement(inventDimAutoAssign.InventBatchId, movement, inventTrans);
                }

                InventQty qtySerial = inventTrans.Qty;
                while (qtySerial > 0)
                {
                    if (mustAutoCreateSerial)
                    {
                        if (inventTrans.Qty > inventNumGroupSerial.PerQty && inventNumGroupSerial.PerQty > 0)
                        {
                            recIdSerial = inventTrans.RecId;
                            inventTrans.updateSplit(inventNumGroupSerial.PerQty);
                        }

                        inventDimAutoAssign.InventSerialId = inventNumGroupSerial.buildNumberParameters(movement.serialProdDate(inventTrans), movement.transRefId(), movement.transId(), extendedTypeNum(InventSerialId));
                        if (! inventDimAutoAssign.InventSerialId)
                        {
                            throw error(strFmt("@SYS54023",inventNumGroupSerial.NumGroupId));
                        }
                    }

                    inventTransList.addEnd([inventTrans.RecId, InventDim::findOrCreate(inventDimAutoAssign).InventDimId]);
                    qtyBatch   -= inventTrans.Qty;
                    qtySerial  -= inventTrans.Qty;
                    _totalQty  -= inventTrans.Qty;

                    if (mustAutoCreateSerial &&
                        qtySerial > 0 &&
                        _totalQty > 0)
                    {
                        inventTrans = InventTrans::findRecIdTransOriginId(recIdSerial, inventTrans.InventTransOrigin,true);
                    }
                }

                if (mustAutoCreateBatch &&
                    qtyBatch > 0 &&
                    _totalQty > 0)
                {
                    inventTrans = InventTrans::findRecIdTransOriginId(recIdBatch, inventTrans.InventTransOrigin,true);
                }
            }
        }
        else
        {
            inventTransList.addEnd([inventTrans.RecId, InventDim::findOrCreate(inventDimAutoAssign).InventDimId]);
        }

        return inventTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAutoNumbering</Name>
				<Source><![CDATA[
    public boolean useAutoNumbering()
    {
        this.initialize();

        return mustAutoCreateBatch
            || mustAutoCreateSerial
            || mustAssignOwnerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventTransAutoNumberHandler construct()
    {
        return new InventTransAutoNumberHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static InventTransAutoNumberHandler newParameters(
        InventMovement  _movement,
        InventTrans     _inventTrans,
        InventDim       _inventDimInitial,
        boolean         _isPhysicalUpdate)
    {
        InventTransAutoNumberHandler inventTransAutoNumberHandler = InventTransAutoNumberHandler::construct();

        inventTransAutoNumberHandler.parmInventTrans(_inventTrans);
        inventTransAutoNumberHandler.parmInventDimInitial(_inventDimInitial);
        inventTransAutoNumberHandler.parmMovement(_movement);
        inventTransAutoNumberHandler.parmIsPhysicalUpdate(_isPhysicalUpdate);

        return inventTransAutoNumberHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBatchNumber</Name>
				<Source><![CDATA[
    protected InventBatchId generateBatchNumber(InventNumGroup _inventNumGroupBatch)
    { 
        return _inventNumGroupBatch.buildNumberParameters(
                        movement.batchProdDate(inventTrans),
                        movement.transRefId(),
                        movement.transId(),
                        extendedTypeNum(InventBatchId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>