<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcItemOperPhantom</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMCalcItemOperPhantom</c> class calculates a <c>BOMCalcTrans</c> for a route operation
///    belonging to a line type phantom BOM.
/// </summary>
/// <remarks>
///    This class is part of the <c>BOMCalc</c> class hierarchy. It is instantiated when a route for a
///    phantom BOM line exists.
/// </remarks>

class BomCalcItemOperPhantom extends BOMCalcItemOper
{
    BOMCalcData         bomCalcDataParent;

    ItemId              parentItemId;
    InventDim           parentInventDim;
    Qty                 parentConsumption;
    Qty                 parentSeriesSize;

    BOMRoutePhantomData phantomData;
    Factor              phantomBOMFactor;
    /// <summary>
    ///    Calculates the consumption of the route operation.
    /// </summary>
    /// <remarks>
    ///    Setup time is calculated based on the series size (the quantity for which the BOM calculation is
    ///    performed). Process time is calculated based on the actual quantity. The quantity is based on the
    ///    parent quantity.
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcConsumption</Name>
				<Source><![CDATA[
    public void calcConsumption()
    {
        RouteCalcConsumption    routeCalcConsumption;

        Route                   primaryRoute;
        RouteOpr                primaryRouteOpr;

        Route                   secondaryRoute;
        RouteOpr                secondaryRouteOpr;
        BOMCalcItem             localParentBOMCalcItem = this.parmParentBOMCalc() as BOMCalcItem;

        routeCalcConsumption = RouteCalcConsumption::construct(routeOpr.Formula);

        if (route.OprPriority == RouteOprPriority::Primary)
        {
            primaryRoute        = route;
            primaryRouteOpr     = routeOpr;
            secondaryRoute      = route;
            secondaryRouteOpr   = routeOpr;
        }
        else
        {
            // I need to find the primary operation
            // Due to the fact that this is an expanded route, I can not look it up in the route table directly.
            try
            {
                phantomData.useRouteLevelWhenFindPhantomRoute(true, route.Level);
                phantomData.parmRouteId(route.RouteId); // Find route by level and route Id.
                primaryRoute = phantomData.findPhantomRoute(route.OprNum);
            }
            finally
            {
                phantomData.useRouteLevelWhenFindPhantomRoute(false);
            }
            primaryRouteOpr     = primaryRoute.routeOpr(this.parmParentItemId(),
                                                        this.parmParentInventDim().ConfigId,
                                                        localParentBOMCalcItem.parmSiteId(),
                                                        null);
            secondaryRoute      = route;
            secondaryRouteOpr   = routeOpr;
        }

        // calculate actual consumption
        calcSetupTime   = routeCalcConsumption.calcSetUpTime(BOMCalcData, primaryRoute, primaryRouteOpr, secondaryRoute, secondaryRouteOpr);
        calcProcessTime = routeCalcConsumption.calcProcessTime(bomCalcDataActual, primaryRoute, primaryRouteOpr, secondaryRoute, secondaryRouteOpr);
        calcQty         = routeCalcConsumption.calcOprQty(bomCalcDataParent, primaryRoute, primaryRouteOpr, secondaryRoute, secondaryRouteOpr);

        if (!seriesSize)
        {
            calcSetupTime   = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes parameters for the BOM calculation.
    /// </summary>
    /// <remarks>
    ///    The following items are initialized:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             The <c>BOMCalcData</c> class for the actual consumption
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>BOMCalcData</c> class for the series size
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>BOMCalcData</c> class for the parent-level consumption
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>The route operation </description>
    ///       </item>
    ///       <item>
    ///          <description>The route Group</description>
    ///       </item>
    ///    </list>
    ///     Setup time is calculated based on the series size. Process time is calculated based on the actual
    ///    quantity, and quantity is based on the parent quantity.
    /// </remarks>

    protected void initParameters()
    {
        InventTable     inventTable = InventTable::find(this.parmParentItemId());
        BOMCalcItem     localParentBOMCalcItem = this.parmParentBOMCalc() as BOMCalcItem;

        seriesSize          = this.parmParentSeriesSize();
        actualConsumption   = this.parmParentConsumption();

        BOMCalcData         = BOMCalcData::newInventTable(seriesSize,
                                                          inventTable);

        bomCalcDataActual   = BOMCalcData::newInventTable(actualConsumption,
                                                          inventTable);

        bomCalcDataParent   = BOMCalcData::newInventTable(localParentBOMCalcItem.parmActualConsumptionInventQty(),
                                                          inventTable);

        routeOpr            = route.routeOpr(this.parmParentItemId(),
                                             this.parmParentInventDim().ConfigId,
                                             localParentBOMCalcItem.parmSiteId(),
                                             null);

        routeGroup          = RouteGroup::find(routeOpr.RouteGroupId);

        this.initWrkCtrId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentConsumption</Name>
				<Source><![CDATA[
    protected Qty parmParentConsumption(Qty _parentConsumption = parentConsumption)
    {
        parentConsumption = _parentConsumption;
        return parentConsumption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentInventDim</Name>
				<Source><![CDATA[
    protected InventDim parmParentInventDim(InventDim _parentInventDim = parentInventDim)
    {
        parentInventDim = _parentInventDim;
        return parentInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentItemId</Name>
				<Source><![CDATA[
    protected ItemId parmParentItemId(ItemId _parentItemId = parentItemId)
    {
        parentItemId = _parentItemId;
        return parentItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSeriesSize</Name>
				<Source><![CDATA[
    protected Qty parmParentSeriesSize(Qty _parentSeriesSize = parentSeriesSize)
    {
        parentSeriesSize = _parentSeriesSize;
        return parentSeriesSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPhantomBOMFactor</Name>
				<Source><![CDATA[
    protected Factor parmPhantomBOMFactor(Factor _phantomBOMFactor = phantomBOMFactor)
    {
        phantomBOMFactor = _phantomBOMFactor;
        return phantomBOMFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPhantomData</Name>
				<Source><![CDATA[
    protected BOMRoutePhantomData parmPhantomData(BOMRoutePhantomData _phantomData = phantomData)
    {
        phantomData = _phantomData;

        return phantomData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>phantomBOMFactor</Name>
				<Source><![CDATA[
    Factor phantomBOMFactor()
    {
        return this.parmPhantomBOMFactor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMCalcItemOperPhantom construct()
    {
        return new BOMCalcItemOperPhantom();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRoutePhantom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>BOMCalcItemOperPhantom</c> class.
    /// </summary>
    /// <param name="_route">
    ///    The route for which the BOM calculation transaction should be calculated.
    /// </param>
    /// <param name="_parentBOMCalcItem">
    ///    The <c>BOMCalcItem</c> class belonging to this route.
    /// </param>
    /// <param name="_parentItemId">
    ///    The item ID of the parent level.
    /// </param>
    /// <param name="_parentInventDim">
    ///    The inventory dimension ID of the parent level.
    /// </param>
    /// <param name="_parentConsumption">
    ///    The consumption used by the parent level.
    /// </param>
    /// <param name="_parentSeriesSize">
    ///    The series size for which this calculation is running.
    /// </param>
    /// <param name="_phantomData">
    ///    The phantom data object holding the routes for this phantom.
    /// </param>
    /// <param name="_phantomBOMFactor">
    ///    The factor that the cost price for Qty should be multiplied with due to the use of unit conversion
    /// </param>
    /// <returns>
    ///    A new instance of the <c>BOMCalcItemOperPhantom</c> class.
    /// </returns>
    /// <remarks>
    ///    This method is used during a BOM calculation to trigger the calculation of the route phantom lines.
    /// </remarks>
    public static BOMCalcItemOperPhantom newRoutePhantom(
        Route                   _route,
        BOMCalcItem             _parentBOMCalcItem,
        ItemId                  _parentItemId,
        InventDim               _parentInventDim,
        Qty                     _parentConsumption,
        Qty                     _parentSeriesSize,
        BOMRoutePhantomData     _phantomData,
        Factor                  _phantomBOMFactor
        )
    {
        BOMCalcItemOperPhantom bomCalcItemOper = BOMCalcItemOperPhantom::construct();

        bomCalcItemOper.parmRoute(_route.data());
        bomCalcItemOper.parmParentBOMCalc(_parentBOMCalcItem);

        bomCalcItemOper.parmParentItemId(_parentItemId);
        bomCalcItemOper.parmParentInventDim(_parentInventDim);
        bomCalcItemOper.parmParentConsumption(_parentConsumption);
        bomCalcItemOper.parmParentSeriesSize(_parentSeriesSize);
        bomCalcItemOper.parmPhantomData(_phantomData);
        bomCalcItemOper.parmPhantomBOMFactor(_phantomBOMFactor);

        return bomCalcItemOper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>