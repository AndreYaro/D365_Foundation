<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationWorkflowSubmissionCollector</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Concrete implementation of the <c>VendInvoiceAutomationIWorkflowSubmissionCollector</c> for collecting vendor invoices for workflow submission.
/// </summary>
internal final class VendInvoiceAutomationWorkflowSubmissionCollector implements VendInvoiceAutomationIWorkflowSubmissionCollector
{
    private VendInvoiceAutomationIWorkflowSubmissionCollectionFilterGatherer invoiceCollectionFilterGatherer;
    private VendInvoiceAutomationIWorkflowSubmissionCollectionFilter invoiceCollectionLimitFilter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationWorkflowSubmissionCollector construct(
        VendInvoiceAutomationIWorkflowSubmissionCollectionFilterGatherer _invoiceCollectionFilterGatherer,
        VendInvoiceAutomationIWorkflowSubmissionCollectionFilter _invoiceCollectionLimitFilter)
    {
        VendInvoiceAutomationWorkflowSubmissionCollector invoiceCollector = new VendInvoiceAutomationWorkflowSubmissionCollector();
        invoiceCollector.invoiceCollectionFilterGatherer = _invoiceCollectionFilterGatherer;
        invoiceCollector.invoiceCollectionLimitFilter = _invoiceCollectionLimitFilter;

        return invoiceCollector;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectInvoicesForWorkflowSubmission</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public VendInvoiceAutomationInvoiceTmp collectInvoicesForWorkflowSubmission()
    {
        VendInvoiceAutomationInvoiceTmp invoicesReadyForSubmission;

        if (VendAutomateVendorInvoicesFeature::isEnabled())
        {
            invoicesReadyForSubmission = this.findInvoicesReadyForWorkflowSubmission();
            invoicesReadyForSubmission = this.applyFiltersToInvoicesReadyForSubmission(invoicesReadyForSubmission);
            invoicesReadyForSubmission = this.applyThroughputLimitsToInvoicesReadyForSubmission(invoicesReadyForSubmission);
        }

        return invoicesReadyForSubmission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoicesReadyForWorkflowSubmission</Name>
				<Source><![CDATA[
    private VendInvoiceAutomationInvoiceTmp findInvoicesReadyForWorkflowSubmission()
    {
        VendInvoiceAutomationInvoicesInWorkflowSubmission::removeStaleSubmissionRecords();

        VendParameters vendParameters;
        VendInvoiceAutomationInvoicesInWorkflowSubmission invoicesAlreadyInSubmission;
        VendInvoiceAutomationInvoiceTmp invoicesEligibleForSubmission;

        while select crosscompany DataAreaId, AutomationMatchingPriorToWorkflow, AutomationPrepaymentApplication, BlockAutomationWhenPrepaymentApplicationFailed, AutomationProductReceiptMatching
            from vendParameters
            where vendParameters.AutomationWorkflowSubmission == NoYes::Yes
        {
            NoYes doesCompanyRequireMatchingBeforeWorkflow = vendParameters.AutomationMatchingPriorToWorkflow;
            NoYes automaticPrepaymentApplication = vendParameters.AutomationPrepaymentApplication;
            NoYes blockAutomationWhenPrepaymentFailed = vendParameters.BlockAutomationWhenPrepaymentApplicationFailed;
            NoYes automationProductReceiptMatching = vendParameters.AutomationProductReceiptMatching;

            changecompany(vendParameters.DataAreaId)
            {
                VendInvoiceInfoTable vendorInvoice;
                VendInvoiceInfoLine vendorInvoiceLine;

                if (VendInvoiceIncludeManualCreatedInvoiceIntoAutomationFeature::isEnabled())
                {
                    insert_recordset invoicesEligibleForSubmission(
                        VendInvoiceRecId,
                        VendInvoiceDataAreaId,
                        VendInvoiceTransDate,
                        VendParametersRequireMatchBeforeWorkflowSubmit,
                        VendParametersAutomationPrepaymentApplication,
                        VendParametersBlockAutomationWhenPrepaymentApplicationFailed,
                        VendParametersAutomationProductReceiptMatching)
                        select RecId, DataAreaId, TransDate, doesCompanyRequireMatchingBeforeWorkflow, automaticPrepaymentApplication, blockAutomationWhenPrepaymentFailed, automationProductReceiptMatching
                            from vendorInvoice
                            where vendorInvoice.ParmId == ''
                                && vendorInvoice.RequestStatus == VendInvoiceRequestStatus::Draft
                                && vendorInvoice.AutomationStatus == VendInvoiceAutomationStatus::Included
                                && vendorInvoice.IncludeInAutomatedProcessing == NoYes::Yes
                            exists join vendorInvoiceLine
                                where vendorInvoiceLine.ParmId == vendorInvoice.ParmId
                                    && vendorInvoiceLine.TableRefId == vendorInvoice.TableRefId
                            notexists join invoicesAlreadyInSubmission
                                where invoicesAlreadyInSubmission.VendInvoiceRecId == vendorInvoice.RecId;
                }
                else
                {
                    insert_recordset invoicesEligibleForSubmission(
                        VendInvoiceRecId,
                        VendInvoiceDataAreaId,
                        VendInvoiceTransDate,
                        VendParametersRequireMatchBeforeWorkflowSubmit,
                        VendParametersAutomationPrepaymentApplication,
                        VendParametersBlockAutomationWhenPrepaymentApplicationFailed,
                        VendParametersAutomationProductReceiptMatching)
                        select RecId, DataAreaId, TransDate, doesCompanyRequireMatchingBeforeWorkflow, automaticPrepaymentApplication, blockAutomationWhenPrepaymentFailed, automationProductReceiptMatching
                            from vendorInvoice
                                where vendorInvoice.DocumentOrigin == DocumentOrigin::Service
                                   && vendorInvoice.ParmId == ''
                                   && vendorInvoice.RequestStatus == VendInvoiceRequestStatus::Draft
                                   && vendorInvoice.AutomationStatus == VendInvoiceAutomationStatus::Included
                                   && vendorInvoice.IncludeInAutomatedProcessing == NoYes::Yes
                            exists join vendorInvoiceLine
                                where vendorInvoiceLine.ParmId == vendorInvoice.ParmId
                                   && vendorInvoiceLine.TableRefId == vendorInvoice.TableRefId
                            notexists join invoicesAlreadyInSubmission
                                where invoicesAlreadyInSubmission.VendInvoiceRecId == vendorInvoice.RecId;
                }
            }
        }
            
        return invoicesEligibleForSubmission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFiltersToInvoicesReadyForSubmission</Name>
				<Source><![CDATA[
    private VendInvoiceAutomationInvoiceTmp applyFiltersToInvoicesReadyForSubmission(VendInvoiceAutomationInvoiceTmp _invoicesReadyForSubmission)
    {
        VendInvoiceAutomationInvoiceTmp filteredInvoicesReadyForSubmission = _invoicesReadyForSubmission;

        List invoiceCollectionFilters = invoiceCollectionFilterGatherer.getInvoiceCollectionFilters();
        ListEnumerator invoiceCollectionFilterEnumerator = invoiceCollectionFilters.getEnumerator();
        
        VendInvoiceAutomationInstrumentationWorkflowSubmissionActivities instrumentationWorkflowSubmissionActivities =
            VendInvoiceAutomationInstrumentationWorkflowSubmissionActivities::createFromLoggerName(
            classStr(VendInvoiceAutomationWorkflowSubmissionCollector));

        using (var activityContext = instrumentationWorkflowSubmissionActivities.applyFiltersToInvoicesContext(invoiceCollectionFilters.elements()))
        {
            while (invoiceCollectionFilterEnumerator.moveNext())
            {
                VendInvoiceAutomationIWorkflowSubmissionCollectionFilter invoiceCollectionFilter =
                    invoiceCollectionFilterEnumerator.current() as VendInvoiceAutomationIWorkflowSubmissionCollectionFilter;

                if (invoiceCollectionFilter)
                {
                    System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();
                    stopWatch.Start();

                    VendInvoiceAutomationInvoiceTmp invoicesBeforeFilter = filteredInvoicesReadyForSubmission;

                    filteredInvoicesReadyForSubmission = invoiceCollectionFilter.applyVendorInvoiceFilter(filteredInvoicesReadyForSubmission);

                    stopWatch.Stop();

                    instrumentationWorkflowSubmissionActivities.properties().applyFilterStepProperties(activityContext, invoiceCollectionFilter.GetType().Name, stopWatch.get_ElapsedMilliseconds(), invoicesBeforeFilter, filteredInvoicesReadyForSubmission);
                }
            }
        }

        return filteredInvoicesReadyForSubmission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyThroughputLimitsToInvoicesReadyForSubmission</Name>
				<Source><![CDATA[
    private VendInvoiceAutomationInvoiceTmp applyThroughputLimitsToInvoicesReadyForSubmission(VendInvoiceAutomationInvoiceTmp _invoicesCollectedForSubmission)
    {
        return invoiceCollectionLimitFilter.applyVendorInvoiceFilter(_invoicesCollectedForSubmission);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>