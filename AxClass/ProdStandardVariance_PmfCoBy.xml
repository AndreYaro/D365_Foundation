<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdStandardVariance_PmfCoBy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles the variances for co-products
/// </summary>
class ProdStandardVariance_PmfCoBy extends ProdStandardVariance_Prod
{
    PmfProdCoBy prodCoBy;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToVarianceProdCalcMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Links a tmpProdStandardVariance and prodCalcTrans.
    /// </summary>
    /// <param name="_tmpProdStandardVariance">
    /// The tmpProdStandardVariance record that should be linked.
    /// </param>
    /// <param name="_prodCalcTrans">
    /// The PmfCoByProdCalcTrans record to which the tmpProdStandardVariance record should be linked.
    /// </param>
    protected void addToVarianceProdCalcMap(
        TmpProdStandardVariance     _tmpProdStandardVariance,
        PmfProdCalcTransMap         _prodCalcTrans)
    {
        RecordSortedList    prodCalcTransRSL;

        if (variance2ProdCalcTransMap.exists(_tmpProdStandardVariance.RecId))
        {
            prodCalcTransRSL = variance2ProdCalcTransMap.lookup(_tmpProdStandardVariance.RecId);
        }
        else
        {
            prodCalcTransRSL = new RecordSortedList(tablenum(PmfCoByProdCalcTrans));
            prodCalcTransRSL.sortOrder(fieldnum(PmfCoByProdCalcTrans, RecId));
        }

        prodCalcTransRSL.ins(_prodCalcTrans);
        variance2ProdCalcTransMap.insert( _tmpProdStandardVariance.RecId, prodCalcTransRSL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blankProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new empty buffer of a type that is mapped in the <c>PmfProdCalcTransMap</c>.
    /// </summary>
    /// <returns>
    /// A new empty buffer.
    /// </returns>
    protected PmfProdCalcTransMap blankProdCalcTrans()
    {
        PmfCoByProdCalcTrans prodCalcTrans;
        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActualQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the query to use to load for actual cost.
    /// </summary>
    /// <returns>
    ///    The query for loading actual cost.
    /// </returns>
    protected Query buildActualQuery()
    {
        // Roll up actual
        Query query = new Query();
        QueryBuildDataSource qbdsPmfCoByProdCalcTrans = query.addDataSource(tableNum(PmfCoByProdCalcTrans));
        SysQuery::findOrCreateRange(qbdsPmfCoByProdCalcTrans, fieldNum(PmfCoByProdCalcTrans, CollectRefProdId)).value(queryValue(collectRefId));
        SysQuery::findOrCreateRange(qbdsPmfCoByProdCalcTrans, fieldNum(PmfCoByProdCalcTrans, TransRefId)).value(queryValue(transRefId));
        SysQuery::findOrCreateRange(qbdsPmfCoByProdCalcTrans, fieldNum(PmfCoByProdCalcTrans, TransRefType)).value(queryValue(transRefType));
        SysQuery::findOrCreateRange(qbdsPmfCoByProdCalcTrans, fieldNum(PmfCoByProdCalcTrans, PmfIdRefCoByRecId)).value(queryValue(prodCoBy.RecId));

        if (!isCostBreakdownActivated)
        {
            QueryBuildRange qbrLevel = SysQuery::findOrCreateRange(qbdsPmfCoByProdCalcTrans, fieldNum(PmfCoByProdCalcTrans, CollectRefLevel));
            qbrLevel.value(queryValue(collectRefLevel + 1));
        }
        else
        {
            QueryBuildRange qbrOrCondition = SysQuery::findOrCreateRange(qbdsPmfCoByProdCalcTrans, fieldNum(PmfCoByProdCalcTrans, Resource));

            // Add an or Condition:
            // Everything that is level single or not bom
            int subProdSingleLevel = collectRefLevel + InventCostLevel::Single;

            qbrOrCondition.value(strFmt('((%1.%2 == %3) || (%1.%4 == %5))',
                                        qbdsPmfCoByProdCalcTrans.name(),   // ProdCalcTrans %1
                                        fieldStr(PmfCoByProdCalcTrans, CollectRefLevel),                // CollectRefLevel %2
                                        any2int(subProdSingleLevel),                                    // 1 (= Level Single) %3
                                        fieldStr(PmfCoByProdCalcTrans, bom),                            // BOM %4
                                        any2int(NoYes::No)));                                           // No %5
            qbrOrCondition.status(RangeStatus::Hidden);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFinishedItemQuery</Name>
				<Source><![CDATA[
        protected Query buildFinishedItemQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsPmfCoByProdCalcTrans = query.addDataSource(tableNum(PmfCoByProdCalcTrans));
        qbdsPmfCoByProdCalcTrans.addRange(fieldNum(PmfCoByProdCalcTrans, collectRefLevel)).value(queryValue(collectRefLevel));
        qbdsPmfCoByProdCalcTrans.addRange(fieldNum(PmfCoByProdCalcTrans, CalcType)).value(queryValue(ItemCalcType::Production));
        qbdsPmfCoByProdCalcTrans.addRange(fieldNum(PmfCoByProdCalcTrans, TransRefId)).value(queryValue(transRefId));
        qbdsPmfCoByProdCalcTrans.addRange(fieldNum(PmfCoByProdCalcTrans, TransRefType)).value(queryValue(transRefType));
        qbdsPmfCoByProdCalcTrans.addRange(fieldNum(PmfCoByProdCalcTrans, PmfIdRefCoByRecId)).value(queryValue(prodCoBy.RecId));

        QueryBuildDataSource qbdsInventTable = qbdsPmfCoByProdCalcTrans.addDataSource(tableNum(InventTable));
        qbdsInventTable.addLink(fieldNum(PmfCoByProdCalcTrans, Resource), fieldNum(InventTable, ItemId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        public boolean calc(
        InventTransRefId        _transRefId,
        ProdTransRefType        _transRefType,
        Level                   _collectRefLevel,
        InventTransRefId        _collectRefId,
        TransDate               _transDate)
    {
        if (!prodCoBy)
        {
            return false;
        }

        boolean ret = super(_transRefId,_transRefType,_collectRefLevel,_collectRefId,_transDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default dimension of the primary record.
    /// </summary>
    /// <returns>
    /// The default dimension of the primary record.
    /// </returns>
    protected DimensionDefault defaultDimension()
    {
        return prodCoBy.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdCalcTransTotal</Name>
				<Source><![CDATA[
        protected void initProdCalcTransTotal()
    {
        prodCalcTransTotal = PmfCoByProdCalcTrans::findIdRef(prodTable.TableId, prodTable.RecId, prodCoBy.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the default dimension of the primary record with a new dimension.
    /// </summary>
    /// <param name="_defaultDimension">The dimension to merge with.</param>
    protected void mergeDimension(DimensionDefault _defaultDimension)
    {
        prodCoBy.mergeDimension(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// object is created
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfProdCoBy</Name>
				<Source><![CDATA[
        public PmfProdCoBy parmPmfProdCoBy(PmfProdCoBy _prodCoBy = prodCoBy)
    {
        prodCoBy = _prodCoBy;
        prodTable = prodCoBy.prodTable();
        return prodCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>
    /// returns instance
    /// </returns>
    public static ProdStandardVariance_PmfCoBy construct()
    {
        return new ProdStandardVariance_PmfCoBy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs new instance of the <c>ProdStandardVariance_PmfCoBy</c> class.
    /// </summary>
    /// <param name="_prodCoBy">
    /// The <c>PmfProdCoBy</c> record.
    /// </param>
    /// <returns>
    /// The <c>ProdStandardVariance_PmfCoBy</c> class instance.
    /// </returns>
    public static ProdStandardVariance_PmfCoBy newFromProdCoBy(PmfProdCoBy  _prodCoBy)
    {
        ProdStandardVariance_PmfCoBy    prodStandardVariance;

        if (_prodCoBy.ProductType == PmfProductType::By_Product &&
            _prodCoBy.BurdenType == PmfBurdenType::Recycled)
        {
            prodStandardVariance = ProdStandardVariance_PmfCoByRecycledBp::construct();
        }
        else
        {
            prodStandardVariance = ProdStandardVariance_PmfCoBy::construct();
        }

        prodStandardVariance.parmPmfProdCoBy(_prodCoBy);

        return prodStandardVariance;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
