<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ASOHOrderManagement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ASOHOrderManagement</c> class contains advanced order hold specific functionality.
/// </summary>
public class ASOHOrderManagement
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mcrHoldCodeTransWithOrderClassHoldCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record for table <c>MCRHoldCodeTrans</c> with table <c>ASOHOrderClassHold</c> MCRHoldCode field value.
    /// </summary>
    /// <param name = "_salesTable">The record of table <c>SalesTable</c>.</param>
    [Hookable(false)]
    public static void mcrHoldCodeTransWithOrderClassHoldCode(SalesTable _salesTable)
    {        
        RecordInsertList recordList = new RecordInsertList(tableNum(MCRHoldCodeTrans));

        ASOHOrderClassHold orderClassHold;

        while select MCRHoldCode from orderClassHold
            where orderClassHold.OrderClass == _salesTable.ASOHOrderClass
        {
            recordList = ASOHOrderManagement::initMCRHoldCodeTrans(recordList, orderClassHold.MCRHoldCode, _salesTable.SalesId);
            
            if (!ASOHHoldRelatedDocument::firstDocByHoldCodeAndRelatedDoc(orderClassHold.MCRHoldCode, ASOHRelatedDocuments::SalesOrderConfirmation).EnableDocument)
            {
                ASOHOrderManagement::SetStoppedFlag(_salesTable.SalesId, NoYes::No);
            }
        }
        recordList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHoldCodeTransWithHoldEventHoldCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record for table <c>MCRHoldCodeTrans</c> with table <c>ASOHHoldEvent</c> MCRHoldCode field value.
    /// </summary>
    /// <param name = "_salesTable">The record of table <c>SalesTable</c>.</param>
    [Hookable(false)]
    public static void mcrHoldCodeTransWithHoldEventHoldCode(SalesTable _salesTable)
    {
        RecordInsertList recordList = new RecordInsertList(tableNum(MCRHoldCodeTrans));

        ASOHHoldEvent holdEvent;
        ASOHHoldEvent holdEventFirst = ASOHHoldEvent::firstHoldEventByEventType(MCROrderEventType::CreateSalesOrder);
        MCRHoldCodeTrans mcrHoldCodeTrans;

        //avoiding duplicated hold code events
        select firstonly mcrHoldCodeTrans 
            where mcrHoldCodeTrans.MCRHoldCode == holdEventFirst.MCRHoldCode 
               && mcrHoldCodeTrans.InventRefId == _salesTable.salesId;
        if (!mcrHoldCodeTrans)
            holdEventFirst.clear();

        while select MCRHoldCode from holdEvent
            where holdEvent.MCROrderEventType == MCROrderEventType::CreateSalesOrder
               && holdEvent.RecId != holdEventFirst.RecId
        {
            recordList = ASOHOrderManagement::initMCRHoldCodeTrans(recordList, holdEvent.MCRHoldCode, _salesTable.SalesId);

            if (!ASOHHoldRelatedDocument::firstDocByHoldCodeAndRelatedDoc(holdEvent.MCRHoldCode, ASOHRelatedDocuments::SalesOrderConfirmation).EnableDocument)
            {
                ASOHOrderManagement::SetStoppedFlag(_salesTable.SalesId, NoYes::No);
            }
        }
        recordList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMCRHoldCodeTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize values of table <c>MCRHoldCodeTrans</c>.
    /// </summary>
    /// <param name = "_recordList">A recordInsertList.</param>
    /// <param name = "_mcrHoldCode">The value of mcrHoldCode.</param>
    /// <param name = "_salesId">The sales id.</param>
    /// <returns></returns>
    [Hookable(false)]
    public static RecordInsertList initMCRHoldCodeTrans(RecordInsertList _recordList, MCRHoldCode _mcrHoldCode, SalesId _salesId)
    {
        MCRHoldCodeTrans holdTrans;
        holdTrans.initValue();
        holdTrans.MCRHoldCode = _mcrHoldCode;
        holdTrans.InventRefId = _salesId;
        _recordList.add(holdTrans);

        return _recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHoldTransDeletedWithHoldRemoveHoldCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records of table <c>MCRHoldCodeTrans</c> according to table <c>ASOHHoldRemove</c> MCRHoldCode field value..
    /// </summary>
    /// <param name = "_holdTrans">The record of table <c>MCRHoldCodeTrans</c>.</param>
    [Hookable(false)]
     public static void mcrHoldTransDeletedWithHoldRemoveHoldCode(MCRHoldCodeTrans _holdTrans)
    {
        ASOHHoldRemove holdRemove;

        while select RemoveHold from holdRemove
            where holdRemove.MCRHoldCode == _holdTrans.MCRHoldCode
        {
            ttsbegin;

            MCRHoldCodeTrans holdTrans;
            
            select firstonly forupdate holdTrans
                where holdTrans.MCRHoldCode == holdRemove.RemoveHold &&
                      holdTrans.InventRefId == _holdTrans.InventRefId;

            holdTrans.delete();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStoppedFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets orderStopped status.
    /// </summary>
    /// <param name = "_salesId">The value of sales id.</param>
    /// <param name = "_start">The status of orderStopped.</param>
    [Hookable(false)]
     public static void setStoppedFlag(SalesId _salesId, NoYes _start)
    {
        ttsbegin;
        SalesTable salesUpdate = SalesTable::find(_salesId, true);
        salesUpdate.MCROrderStopped = _start;
        salesUpdate.doUpdate();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearHoldCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears MCRHoldCode field.
    /// </summary>
    /// <param name = "_holdCodeTrans">The record of table <c>MCRHoldCodeTrans</c>.</param>
    [Hookable(false)]
    public static void clearHoldCode(MCRHoldCodeTrans _holdCodeTrans)
    {
        if (!RetailMCRChannelTable::mcrEnableOrderCompletion(SalesTable::find(_holdCodeTrans.InventRefId)))
        {
            ASOHOrderManagement::setStoppedFlag(_holdCodeTrans.InventRefId, NoYes::No);
        }
        
        ttsbegin;

        MCRHoldCodeTable holdCodeTable = MCRHoldCodeTable::find(_holdCodeTrans.MCRHoldCode);

        if (holdCodeTable.ASOHAutoFollowingHold || _holdCodeTrans.ASOHFollowingHold)
        {
            MCRHoldCodeTrans holdCodeTrans;
            if (holdCodeTable.ASOHAutoFollowingHold)
            {
                holdCodeTrans.MCRHoldCode = holdCodeTable.ASOHAutoFollowingHold;
            }
            else
            {
                holdCodeTrans.MCRHoldCode = _holdCodeTrans.ASOHFollowingHold;
            }
            holdCodeTrans.InventRefId = _holdCodeTrans.InventRefId;
            holdCodeTrans.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderStopped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value for orderStopped according to the related document.
    /// </summary>
    /// <param name = "_common">The related table buffer.</param>
    /// <param name = "_relatedDoc">The related document.</param>
    /// <returns>The value of orderStopped.</returns>
    [Hookable(false)]
    public static MCROrderStopped setOrderStopped(Common _common, ASOHRelatedDocuments _relatedDoc)
    {
        Num commonField;
        
        // Set initial state.
        MCROrderStopped orderStopped = NoYes::No;

        switch(_common.TableId)
        {
            case tableNum(WHSLoadLine):
                WHSLoadLine loadLine = _common;
                commonField = loadLine.OrderNum;
                break;

            case tableNum(SalesLine):
                SalesLine salesLine = _common;
                commonField = salesLine.SalesId;
                break;

            case tableNum(SalesTable):
                SalesTable salesTable = _common;
                commonField = salesTable.SalesId;
                break;

            default:
                break;
        }

        // Look up the related document blocking for any of the hold codes.
        MCRHoldCodeTrans holdTrans;
        while select MCRHoldCode from holdTrans
            where commonField 
               && holdTrans.InventRefId == commonField
        {
            if (ASOHHoldRelatedDocument::firstDocByHoldCodeAndRelatedDoc(holdTrans.MCRHoldCode, _relatedDoc).EnableDocument)
            {
                orderStopped = NoYes::Yes;
                break;
            }
        }

        return orderStopped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMandatoryFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the mandatory fields of <c>SalesTable</c>.
    /// </summary>
    /// <param name = "_salesTable">The record of <c>SalesTable</c>.</param>
    [Hookable(false)]
    public static void checkMandatoryFields(SalesTable _salesTable)
    {
        if (_salesTable.ASOHOrderClass)
        {
            SalesParameters salesParm = SalesParameters::find();

            if (salesParm.ASOHMandatoryCheck)
            {
                ASOHClassDefault classDefault;
                while select classDefault
                    where classDefault.OrderClass == _salesTable.ASOHOrderClass &&
                          classDefault.Mandatory  == NoYes::Yes
                {
                    DictField dictField = new DictField(tableNum(SalesTable), classDefault.RefFieldId);
                    anytype fieldvalue  = _salesTable.(classDefault.RefFieldId);

                    if (!fieldvalue)
                    {
                        info(strFmt("@SCM:TheFieldIsMandatory", dictField.label(), _salesTable.ASOHOrderClass));
                    }
                }

                info("@SCM:MandatoryCheckCompleted");

                if (salesParm.AsohMandatoryHold)
                {
                    ASOHOrderManagement::AddMandatoryHold(_salesTable);
                }

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMandatoryHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds mandatory hold code for table <c>MCRHoldCodeTrans</c>.
    /// </summary>
    /// <param name = "_salesTable">The record of <c>SalesTable</c>.</param>
    [Hookable(false)]
    public static void addMandatoryHold(SalesTable _salesTable)
    {
        RecordInsertList recordList = new RecordInsertList(tableNum(MCRHoldCodeTrans));

        ASOHHoldEvent holdEvent;
        while select holdEvent
            where holdEvent.MCROrderEventType == MCROrderEventType::ASOHMandatoryFieldsCheck
        {
            recordList = ASOHOrderManagement::initMCRHoldCodeTrans(recordList, holdEvent.MCRHoldCode, _salesTable.SalesId);
        }

        recordList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDefaultFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks default fields for table <c>SalesTable</c>.
    /// </summary>
    /// <param name = "_salesTable">The record of <c>SalesTable</c>.</param>
    [Hookable(false)]
    public static void checkDefaultFields(SalesTable _salesTable)
    {
        if (_salesTable.ASOHOrderClass)
        {
            SalesParameters salesParm = SalesParameters::find();

            // Check if the default check enables in the AR parameters.
            if (salesParm.ASOHDefaultCheck)
            {
                ttsbegin;

                SalesTable salesTable = SalesTable::find(_salesTable.SalesId, true);

                // Update the order with the default value and need to test on look up and field validation.
                ASOHClassDefault classDefault;
                while select classDefault
                    where classDefault.OrderClass   == _salesTable.ASOHOrderClass 
                       && classDefault.DefaultField == NoYes::Yes
                {
                    DictField dictField = new DictField(tableNum(SalesTable), classDefault.RefFieldId);
                    anytype fieldvalue = _salesTable.(classDefault.RefFieldId);

                    salesTable.(classDefault.RefFieldId) = classDefault.FieldValue;
                    
                }

                salesTable.update();

                ttscommit;

                info("@SCM:DefaultFieldsUpdated");

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderHoldInsertOrderEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes an event for salesTable.
    /// </summary>
    /// <param name = "_salesTable">The record of table <c>SalesTable</c>.</param>
    [Hookable(false)]
    public static void orderHoldInsertOrderEvent(SalesTable _salesTable)
    {
        ASOHOrderManagement::mcrHoldCodeTransWithOrderClassHoldCode(_salesTable);

        if (!ASOHFeatureVisibilityManager::isEnabled())
        {
            ASOHOrderManagement::mcrHoldCodeTransWithHoldEventHoldCode(_salesTable);
        }
        
        ASOHOrderManagement::checkDefaultFields(_salesTable);
        ASOHOrderManagement::checkMandatoryFields(_salesTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>