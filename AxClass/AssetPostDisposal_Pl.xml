<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetPostDisposal_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class AssetPostDisposal_PL extends AssetPostDisposal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateNetBookAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates Net Book Value based asset transaction.
    /// </summary>
    /// <returns>
    /// Net book value amount.
    /// </returns>
    protected AssetAmount calculateNetBookAmount()
    {
        return this.calculateNetBookAmountByCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNetBookAmountReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates Net Book Value based asset transaction.
    /// </summary>
    /// <returns>
    /// Net book value amount.
    /// </returns>
    protected AssetAmount calculateNetBookAmountReportingCurrency()
    {
        return this.calculateNetBookAmountByCurrency(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNetBookAmountByCurrency</Name>
				<Source><![CDATA[
    private AssetAmount calculateNetBookAmountByCurrency(boolean _isReporting = false)
    {
        AssetAmount returnValue;
        AssetBookTable assetBookTable = AssetBookTable::find(assetTrans.BookId);

        // Polish disposal allows partial disposal.
        if (_isReporting)
        {
            returnValue = assetBookTable.roundOffDepreciationReportingCurrency(
                this.postValueByCurrency(AssetPostValue::NBV, true) * assetSaleFactor / 100);
        }
        else
        {
            returnValue = assetBookTable.roundOffDepreciation(this.postValue(AssetPostValue::NBV) * assetSaleFactor / 100);
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProfitLossAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a profit or loss associated with the disposal
    /// </summary>
    /// <returns>
    /// The amount of the profit or loss.
    /// </returns>
    protected AssetAmount calculateProfitLossAmount()
    {
        return this.calculateProfitLossAmountByCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProfitLossAmountByCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a profit or loss associated with the disposal
    /// </summary>
    /// <param name = "_isReporting">If true, calculates the values based on reporting currency, otherwise, accounting currency</param>
    /// <returns>
    /// The amount of the profit or loss.
    /// </returns>
    protected AssetAmount calculateProfitLossAmountByCurrency(boolean _isReporting = false)
    {
        AssetAmount profitLossAmount;

        // Overwrites the SYS code to allow partial disposal.
        if (assetSaleFactor != 100)
        {
            if (_isReporting)
            {
                profitLossAmount = CurrencyExchangeHelper::amount(assetSumAllYearsReportingCurrency.netBookValue() * assetSaleFactor / 100);
                profitLossAmount = -profitLossAmount - assetTrans.ReportingCurrencyAmount;
            }
            else
            {
                profitLossAmount = CurrencyExchangeHelper::amount(assetSumAllYears.netBookValue() * assetSaleFactor / 100);
                profitLossAmount = -profitLossAmount - assetTrans.AmountMST;
            }
        }

        else
        {
            profitLossAmount = super(_isReporting);
        }

        return profitLossAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummaryAssetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>AssetTrans</c> records for available asset transactions of this year and prior years for disposal.
    /// </summary>
    protected void createSummaryAssetTrans()
    {
        super();

        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::AccDeprPriorYears_PL),   AssetTransType::AccDepreciationPriorYears_PL,
                -this.postValueByCurrency(AssetPostValue::AccDeprPriorYears_PL, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::AccDeprThisYear_PL),     AssetTransType::AccDepreciationThisYear_PL,
                -this.postValueByCurrency(AssetPostValue::AccDeprThisYear_PL, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::PostOffAccDPriorYears_PL), AssetTransType::PostOffAccDeprPriorYears_PL,
                -this.postValueByCurrency(AssetPostValue::PostOffAccDPriorYears_PL, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::PostOffAccDThisYear_PL), AssetTransType::PostOffAccDeprThisYear_PL,
                -this.postValueByCurrency(AssetPostValue::PostOffAccDThisYear_PL, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::DepNotCostPriorYears_PL), AssetTransType::DepNotCostPriorYears_PL,
                -this.postValueByCurrency(AssetPostValue::DepNotCostPriorYears_PL, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::DepNotCostThisYear_PL),  AssetTransType::DeprNotCostThisYear_PL,
                -this.postValueByCurrency(AssetPostValue::DepNotCostThisYear_PL, true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSummaryAssetTransV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes creation of a disposal summary asset transaction.
    /// </summary>
    /// <param name="_assetAmount">
    /// Asset transaction in accounting currency.
    /// </param>
    /// <param name="_assetTransType">
    /// Asset transaction type.
    /// </param>
    /// <param name="_assetAmountReporting">
    /// Asset reporting currency amount.
    /// </param>
    protected void insertSummaryAssetTransV2(
        AssetAmount      _assetAmount,
        AssetTransType   _assetTransType,
        AssetAmount      _assetAmountReporting = 0)
    {
        AssetAmount assetAmount = _assetAmount;
        AssetAmount assetAmountReporting = _assetAmountReporting;
        AssetBookTable assetBookTable = AssetBookTable::find(assetTrans.BookId);

        if (assetSaleFactor != 100)
        {
            assetAmount = assetBookTable.roundOffDepreciation(assetAmount * assetSaleFactor / 100);
            assetAmountReporting = assetBookTable.roundOffDepreciationReportingCurrency(
                assetAmountReporting * assetSaleFactor / 100);
        }

        super(assetAmount, _assetTransType, assetAmountReporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(LedgerVoucher  _ledgerVoucher,
                    AssetTrans     _assetTrans)
    {
        if (!AssetTable::isAssetForSale(_assetTrans.AssetId))
        {
            throw error(strFmt("@GLS110194", _assetTrans.AssetId));
        }

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00038, funcName());

        super(_ledgerVoucher, _assetTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a summary amount of the prior years for a given disposal transaction type.
    /// </summary>
    /// <param name="_postValue">
    /// Disposal transaction type.
    /// </param>
    /// <returns>
    /// Amount of the dispoal transaction type.
    /// </returns>
    public AssetAmount postValue(AssetPostValue _postValue)
    {
        return this.postValueByCurrency(_postValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValueByCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a summary amount of the prior years for a given disposal transaction type.
    /// </summary>
    /// <param name="_postValue">
    /// Disposal transaction type.
    /// </param>
    /// <param name="_isReporting">
    /// Disposal transaction type.
    /// </param>
    /// <returns>
    /// Amount of the dispoal transaction type.
    /// </returns>
    public AssetAmount postValueByCurrency(AssetPostValue _postValue, boolean _isReporting = false)
    {
        AssetAmount returnValue;
        AssetSumCalc_Trans  assetSumPriorYearsLocal;
        AssetSumCalc_Trans  assetSumAllYearsLocal;

        if (_isReporting)
        {
            assetSumPriorYearsLocal = assetSumPriorYearsReportingCurrency;
            assetSumAllYearsLocal = assetSumAllYearsReportingCurrency;
        }
        else
        {
            assetSumPriorYearsLocal = assetSumPriorYears;
            assetSumAllYearsLocal = assetSumAllYears;
        }

        returnValue = super(_postValue, _isReporting);

        switch (_postValue)
        {
            case AssetPostValue::AcqPriorYears:
                returnValue  = returnValue +
                    assetSumPriorYearsLocal.acquisitionValue_thisYear() +
                    assetSumAllYearsLocal.acquisitionValue_priorYears();
                break;

            case AssetPostValue::AcqAdjPriorYears:
                returnValue  = returnValue +
                    assetSumPriorYearsLocal.acquisitionAdjValue_thisYear() +
                    assetSumAllYearsLocal.acquisitionAdjValue_priorYears();
                break;

            case AssetPostValue::DepPriorYears:
                returnValue  = returnValue +
                    assetSumPriorYearsLocal.depreciationValue_thisYear() +
                    assetSumAllYearsLocal.depreciationValue_priorYears() -
                    this.postValueByCurrency(AssetPostValue::DepNotCostPriorYears_PL, _isReporting);
                break;

            case AssetPostValue::DepAdjPriorYears:
                returnValue  = returnValue +
                    assetSumPriorYearsLocal.depreciationAdjValue_thisYear() +
                    assetSumAllYearsLocal.depreciationAdjValue_priorYears();
                break;

            case AssetPostValue::ExtraDepPriorYears:
                returnValue  = returnValue +
                    assetSumPriorYearsLocal.extraDepreciationValue_thisYear() +
                    assetSumAllYearsLocal.extraDepreciationValue_priorYears();
                break;

            case AssetPostValue::AccDeprPriorYears_PL:
                returnValue  = assetSumPriorYearsLocal.openingAccumulatedDepreciation_PL()  +
                    assetSumPriorYearsLocal.openingAccDepreciation_thisYear_PL() +
                    assetSumAllYearsLocal.openingAccDepreciation_priorYears_PL();
                break;

            case AssetPostValue::DepNotCostPriorYears_PL:
                returnValue  = assetSumPriorYearsLocal.depreciationValueNotCost_PL()          +
                    assetSumPriorYearsLocal.depreciationValueNotCost_thisYear_PL() +
                    assetSumAllYearsLocal.depreciationValueNotCost_priorYears_PL();
                break;

            case AssetPostValue::PostOffAccDPriorYears_PL:
                returnValue  = assetSumPriorYearsLocal.postOffAccDepreciation_PL();
                break;

            case AssetPostValue::AcqThisYear:
                returnValue  = returnValue +
                    assetSumAllYearsLocal.acquisitionValue_thisYear() - assetSumPriorYearsLocal.acquisitionValue_thisYear();
                break;

            case AssetPostValue::AcqAdjThisYear:
                returnValue  = returnValue +
                    assetSumAllYearsLocal.acquisitionAdjValue_thisYear() - assetSumPriorYearsLocal.acquisitionAdjValue_thisYear();
                break;

            case AssetPostValue::DepThisYear:
                returnValue  = returnValue +
                    assetSumAllYearsLocal.depreciationValue_thisYear() - assetSumPriorYearsLocal.depreciationValue_thisYear() -
                    this.postValueByCurrency(AssetPostValue::DepNotCostThisYear_PL, _isReporting);
                break;

            case AssetPostValue::DepAdjThisYear:
                returnValue  = returnValue +
                    assetSumAllYearsLocal.depreciationAdjValue_thisYear() - assetSumPriorYearsLocal.depreciationAdjValue_thisYear();
                break;

            case AssetPostValue::ExtraDepThisYear:
                returnValue  = returnValue +
                    assetSumAllYearsLocal.extraDepreciationValue_thisYear() - assetSumPriorYearsLocal.extraDepreciationValue_thisYear();
                break;

            case AssetPostValue::AccDeprThisYear_PL:
                returnValue = assetSumAllYearsLocal.openingAccumulatedDepreciation_PL() - assetSumPriorYearsLocal.openingAccumulatedDepreciation_PL() +
                    assetSumAllYearsLocal.openingAccDepreciation_thisYear_PL() - assetSumPriorYearsLocal.openingAccDepreciation_thisYear_PL();
                break;

            case AssetPostValue::DepNotCostThisYear_PL:
                returnValue = assetSumAllYearsLocal.depreciationValueNotCost_PL() - assetSumPriorYearsLocal.depreciationValueNotCost_PL() +
                    assetSumAllYearsLocal.depreciationValueNotCost_thisYear_PL() - assetSumPriorYearsLocal.depreciationValueNotCost_thisYear_PL();
                break;

            case AssetPostValue::PostOffAccDThisYear_PL:
                returnValue = assetSumAllYearsLocal.postOffAccDepreciation_PL() - assetSumPriorYearsLocal.postOffAccDepreciation_PL();
                break;

            case AssetPostValue::WriteUpAdjThisYear:
                returnValue = assetSumAllYearsLocal.writeUpAdjValue() - assetSumPriorYearsLocal.writeUpAdjValue() +
                    assetSumAllYearsLocal.writeUpAdjValue_thisYear() - assetSumPriorYearsLocal.writeUpAdjValue_thisYear();
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisposalAmountBySaleFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the disposal amount based on the given percentage and multiplies it by the current net
    /// book value of the value model.
    /// </summary>
    /// <param name="_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name="_bookId">
    /// The ID of the value model.
    /// </param>
    /// <param name="_assetDate">
    /// The date for which the calculation is finished.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code used for calculation.
    /// </param>
    /// <param name="_saleFactor">
    /// The percentage amount used for the calculation.
    /// </param>
    /// <returns>
    /// The disposal value, depending on the factor value.
    /// </returns>
    public static AmountMST getDisposalAmountBySaleFactor(
        AssetId             _assetId,
        AssetBookId         _bookId,
        TransDate           _assetDate,
        CurrencyCode        _currencyCode,
        PlAssetSaleFactor   _saleFactor)
    {
        AmountMST returnValue;
        AmountMST netBookValue;
        AssetBook assetBook;
        CurrencyExchangeHelper currencyExchHelper;

        if (_assetId && _bookId && _saleFactor)
        {
            netBookValue = AssetSumCalc_Trans::newAssetYear(_assetId,
                                                            _bookId,
                                                            _assetDate).netBookValue();

            // The netbook value is always in accounting currency.  However,
            // the disposal amount is always in transactional currency,
            // and the currencies can differ.
            currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(
                    Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                    _assetDate);

            netBookValue = currencyExchHelper.calculateAccountingToTransaction(_currencyCode, netBookValue, true);

            assetBook = AssetBook::find(_assetId, _bookId);
            if (assetBook)
            {
                returnValue = assetBook.roundOffDepreciation(_saleFactor * netBookValue / 100);
            }
            else
            {
               returnValue = CurrencyExchangeHelper::amount(_saleFactor * netBookValue / 100);
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisposalWithPolishDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value that indicates whether the combination of the asset and its value model uses a
    /// Polish deprecation method.
    /// </summary>
    /// <param name="_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name="_assetBookId">
    /// The ID of the value model of the asset.
    /// </param>
    /// <returns>
    /// true if the combination of the asset and its value model uses a Polish deprecation method;
    /// otherwise, false.
    /// </returns>
    public static boolean isDisposalWithPolishDepreciation(AssetId _assetId, AssetBookId _assetBookId)
    {
        AssetBook assetBook;

        assetBook = AssetBook::find(_assetId, _assetBookId);

        return assetBook.isPrimaryProfilePolishDepreciationMethod();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>