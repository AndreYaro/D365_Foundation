<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdCoByCostAlloc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler production CoBy cost allocation on ProdCoBy form
/// </summary>
class PmfFormCtrl_ProdCoByCostAlloc extends PmfFormCtrl
{
    FormComboBoxControl costAllocationCombo;
    InventDimCtrl_Frm   inventDimFormSetup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canClosePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns if the form can close
    /// </summary>
    /// <returns>
    /// allow create
    /// </returns>
    public boolean canClosePost()
    {
        PmfProdCoBy prodCoBy = buffer;
        ProdTable   prodTable = prodCoBy.prodTable();
        boolean     ret = true;

        #define.RoundDecimal(4)
        #define.CharNo(7)

        if (prodTable.ItemId
            && decround(prodTable.pmfRemainCostAlloc(),#RoundDecimal))
        {
            if (InventTable::find(prodTable.ItemId).PmfProductType
                == PmfProductType::MainItem)
            {
                warning("@PRO997");
                warning("@PRO1000"
                    + num2str(decround(
                        prodTable.pmfTotalCostAlloc(),
                        #RoundDecimal),
                        #CharNo,
                        #RoundDecimal,
                        1,
                        0));

                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// validates the datasource write method
    /// </summary>
    /// <returns>
    /// returns flag if valid
    /// </returns>
    public boolean dataSourceValidateWrite()
    {
        boolean     ret;
        PmfProdCoBy pmfProdCoBy = this.parmBuffer();

        ret = pmfProdCoBy.checkBurdenAmount(false);

        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReRead</Name>
				<Source><![CDATA[
    /// <summary>
    /// refreshes the form's data source
    /// </summary>
    public void doReRead()
    {
        formDS.reread();
        formDS.refresh();
        formDS.active();

        if (this.caller())
        {
            this.caller().doReread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doResearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Research's the forms datasource
    /// </summary>
    public void doResearch()
    {
        if (this.caller())
        {
            this.caller().doReread();
        }

        formDS.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdBurdenType</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns fieldId of the BurdenType field
    /// </summary>
    /// <returns>
    /// Field id
    /// </returns>
    protected fieldId fieldIdBurdenType()
    {
        return fieldnum(PmfProdCoBy, BurdenType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdCostAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns fieldId of the cost allocation field
    /// </summary>
    /// <returns>
    /// Field id
    /// </returns>
    protected fieldId fieldIdCostAllocation()
    {
        return fieldnum(PmfProdCoBy,CostAllocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle the modification of fields
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field that has changed
    /// </param>
    public void fieldModified(fieldId _fieldId)
    {
        PmfProdCoBy pmfProdCoByProduct;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(PmfProdCoBy, BurdenType):
                pmfProdCoByProduct = this.pmfProdCoByProduct();
                if (pmfProdCoByProduct.BurdenType == PmfBurdenType::None)
                {
                    pmfProdCoByProduct.OverheadAmt = 0;
                }
                else
                {
                    pmfProdCoByProduct.CostAllocation = PmfCostAllocationMethod::None;
                    pmfProdCoByProduct.CostAllocationPct = 0;
                }
                this.updateDesign();
                break;

            case fieldnum(PmfProdCoBy, CostAllocation):
                pmfProdCoByProduct = this.pmfProdCoByProduct();
                if (pmfProdCoByProduct.CostAllocation == PmfCostAllocationMethod::None)
                {
                    pmfProdCoByProduct.CostAllocationPct = 0;
                }
                else
                {
                    pmfProdCoByProduct.BurdenType = PmfBurdenType::None;
                    pmfProdCoByProduct.OverheadAmt = 0;
                }
                this.updateDesign();
                break;

            case fieldnum(PmfProdCoBy, CostAllocationPct),
                fieldnum(PmfProdCoBy, OverheadAmt) :
                formDS.refresh();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called after the form has been initialized
    /// </summary>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();
        
        inventDimFormSetup = PmfInventDimCtrl_Frm_ProdCoByCostAlloc::newFromForm(this.parmFormRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called before the form has been initialized
    /// </summary>
    public void initPre()
    {
        super();

        if (!this.caller()
            && (this.args().dataset() != tablenum(ProdTable)
                || this.args().dataset() != tablenum(PmfProdCoBy)))
        {
            throw error("@PRO2314");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns the inventDimCtrl class
    /// </summary>
    /// <returns>
    /// InventDimCtrl class
    /// </returns>
    public InventDimCtrl inventDimSetupObject()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The object is created
    /// </summary>
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostAllocationCombo</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the combo for the cost allocation
    /// </summary>
    /// <param name="_combo">
    /// combo box control
    /// </param>
    /// <returns>
    /// returns combo control
    /// </returns>
    public FormComboBoxControl parmCostAllocationCombo(
        FormComboBoxControl _combo = costAllocationCombo)
    {
        if (!prmisdefault(_combo))
        {
            costAllocationCombo = _combo;
        }

        return costAllocationCombo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfProdCoByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the buffer as a typed <c>PmfProdCoBy</c> record
    /// </summary>
    /// <returns>
    /// The buffer as a <c>PmfProdCoBy</c> record
    /// </returns>
    public PmfProdCoBy pmfProdCoByProduct()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the production id
    /// </summary>
    /// <returns>
    /// The production id
    /// </returns>
    public ProdId prodId()
    {
        ProdTable prodTable;

        prodTable = this.callerBuffer();

        return prodTable.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(PmfProdCoBy))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    public void setCaption()
    {
        this.parmFormRun().design().caption(
            strfmt(
                "@PRO2315",
                this.pmfProdCoByProduct().ProdId,
                this.pmfProdCoByProduct().prodTable().Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form design
    /// </summary>
    public void updateDesign()
    {
        PmfProdCoBy         pmfProdCoByProduct = this.pmfProdCoByProduct();
        boolean             isCo = pmfProdCoByProduct.ProductType == PmfProductType::Co_Product;
        PmfBurdenType       burdenType;
        NoYes               allocate;
        InventDimParm       inventDimParm;

        super();

        if (pmfProdCoByProduct.prodTable().status().isBefore(ProdStatus::Completed))
        {
            burdenType = buffer.(this.fieldIdBurdenType());
            allocate = buffer.(this.fieldIdCostAllocation()) == PmfCostAllocationMethod::Manual;

            formDS.object(fieldnum(PmfProdCoBy, CostAllocation))
                .allowEdit(burdenType == PmfBurdenType::None);
            formDS.object(fieldnum(PmfProdCoBy, CostAllocationPct))
                .allowEdit(allocate && burdenType == PmfBurdenType::None);
            formDS.object(fieldnum(PmfProdCoBy, BurdenType))
                .allowEdit(!isCo);
            formDS.object(fieldnum(PmfProdCoBy, OverheadAmt))
                .allowEdit(!isCo && burdenType != PmfBurdenType::None);
        }
        else
        {
            formDS.object(
                fieldnum(PmfProdCoBy,CostAllocation)).allowEdit(false);
            formDS.object(
                fieldnum(PmfProdCoBy,CostAllocationPct)).allowEdit(false);
            formDS.object(
                fieldnum(PmfProdCoBy,BurdenType)).allowEdit(false);
            formDS.object(
                fieldnum(PmfProdCoBy,OverheadAmt)).allowEdit(false);
            formRun.design().viewEditMode(ViewEditMode::View);
        }

        inventDimParm.initCovDimAllGrp();
        inventDimFormSetup.parmDimParmVisibleGrid(inventDimParm.data());
        inventDimFormSetup.formSetControls(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>returns instance</returns>
    public static PmfFormCtrl_ProdCoByCostAlloc construct()
    {
        return new PmfFormCtrl_ProdCoByCostAlloc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PmfFormCtrl_ProdCoByCostAlloc</c>
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// returns instance
    /// </returns>
    public static PmfFormCtrl_ProdCoByCostAlloc newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_ProdCoByCostAlloc::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>