<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoicePostWorkflowTaskHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoicePostWorkflowTaskHandler</c> class performs the workflow automated task for queuing an approved vendor invoice for posting.
/// </summary>
internal class VendInvoicePostWorkflowTaskHandler implements WorkflowElementExecutionEventHandler, WorkflowElementExternalExecutionEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the <c>execute</c> method of the <c>WorkflowElementExecutionEventHandler</c>.
    /// </summary>
    /// <param name="_workflowElementEventArgs">An instance of the <c>WorkflowElementEventArgs</c> class.</param>
    public void execute(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendInvoiceWorkflowAutomatedTaskDataContract vendInvoiceWorkflowAutomatedTaskDataContract = VendInvoiceWorkflowAutomatedTaskDataContract::initFromWorkflowEventArgs(_workflowElementEventArgs);
        VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(vendInvoiceWorkflowAutomatedTaskDataContract.parmWorkflowContextRecId());

        if (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Executed)
        {
            // The invoice was already posted. Do not process it again.
            throw error(strFmt("@AccountsPayable:VendInvoicePostWorkflowTaskHandler_InvoiceAlreadyPosted", vendInvoiceInfoTable.Num));
        }

        if (!vendInvoiceInfoTable.isHeaderReadyForPost())
        {
            throw error(strFmt("@SYS319867", vendInvoiceInfoTable.Num));
        }

        boolean isEnqueueSuccessful;

        try
        {
            isEnqueueSuccessful = VendInvoiceQueueFactory::getVendInvoiceQueue().enqueue(vendInvoiceWorkflowAutomatedTaskDataContract);
        }
        catch
        {
        }
        finally
        {
            if (isEnqueueSuccessful)
            {
                info(strFmt("@AccountsPayable:VendInvoiceQueue_Enqueue_Success", vendInvoiceInfoTable.Num));

                VendInstrumentation::logTelemetry(
                    VendInvoicePostTaskConstants::InstrumentationNamespace,
                    this.toString(),
                    VendInvoicePostTaskConstants::EnqueueSuccess,
                    this.toString(),
                    strFmt("Invoice RecId '%1'", int642Str(vendInvoiceInfoTable.RecId)));
            }
            else
            {
                info(strFmt("@AccountsPayable:VendInvoiceQueue_Enqueue_Failure", vendInvoiceInfoTable.Num));

                VendInstrumentation::logTelemetry(
                    VendInvoicePostTaskConstants::InstrumentationNamespace,
                    this.toString(),
                    VendInvoicePostTaskConstants::EnqueueFailure,
                    this.toString(),
                    strFmt("Invoice RecId '%1'", int642Str(vendInvoiceInfoTable.RecId)));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>