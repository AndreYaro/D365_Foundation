<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransType_Ledger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalTransType</c> class provides the ledger account and offset account type
///    defaulting and validation.
/// </summary>
public class LedgerJournalTransType_Ledger extends LedgerJournalTransType
{
    MainAccount mainAccount;
    MainAccount offsetMainAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>crossValidateAccountNumCurrency</Name>
				<Source><![CDATA[
    protected boolean crossValidateAccountNumCurrency()
    {
        CurrencyCodeISO             currencyCodeISO;
        boolean                     isValid = true;

        this.initializeMainAccount();

        if (mainAccount.RecId != 0)
        {
            //
            //  Services communicate in terms of ISO 4217 Currency Codes, so we have to have different
            //  currency codes in the messages.  Similar logic in LedgerTable.checkAccountCurrency
            //
            if (mainAccount.ValidateCurrency)
            {
                if (this.isConsumerStateTracked())
                {
                    switch (mainAccount.ValidateCurrency)
                    {
                        case FieldControl::Table:
                            if (ledgerJournalTrans.CurrencyCode != mainAccount.CurrencyCode)
                            {
                                changecompany (ledgerJournalTrans.Company)
                                {
                                    currencyCodeISO = Currency::currencyCodeISO(mainAccount.CurrencyCode);
                                }

                                isValid = checkFailed(strFmt("@SYS25210", currencyCodeISO, this.getAccountNum()));
                            }
                            break;

                        case FieldControl::List:
                            if (ledgerJournalTrans.CurrencyCode && !MainAccountControlCurrencyCode::exist(
                                LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(ledgerJournalTrans.LedgerDimension),
                                ledgerJournalTrans.CurrencyCode))
                            {
                                changecompany (ledgerJournalTrans.Company)
                                {
                                    currencyCodeISO = Currency::currencyCodeISO(ledgerJournalTrans.CurrencyCode);
                                }
                                isValid = checkFailed(strFmt("@SYS25211", currencyCodeISO, this.getAccountNum()));
                            }

                            break;
                    }
                }
            }

            if (isValid)
            {
                isValid = mainAccount.checkAccountCurrency(ledgerJournalTrans.CurrencyCode);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossValidateOffsetAccountCurrency</Name>
				<Source><![CDATA[
    protected boolean crossValidateOffsetAccountCurrency()
    {
        CurrencyCodeISO currencyCodeISO;
        boolean isValid = true;

        this.initializeOffsetMainAccount();

        if (offsetMainAccount.RecId != 0 )
        {
            //
            //  Services communicate in terms of ISO 4217 Currency Codes, so we have to have different
            //  currency codes in the messages.  Similar logic in LedgerTable.checkAccountCurrency
            //
            if (offsetMainAccount.ValidateCurrency)
            {
                if (this.isConsumerStateTracked())
                {
                    switch (offsetMainAccount.ValidateCurrency)
                    {
                        case FieldControl::Table:
                            if (ledgerJournalTrans.CurrencyCode != offsetMainAccount.CurrencyCode)
                            {
                                changecompany (ledgerJournalTrans.OffsetCompany)
                                {
                                    currencyCodeISO = Currency::currencyCodeISO(offsetMainAccount.CurrencyCode);
                                }
                                isValid = checkFailed(strFmt("@SYS25210", currencyCodeISO, this.getOffsetAccountNum()));
                            }
                            break;

                        case FieldControl::List:
                            if (ledgerJournalTrans.CurrencyCode && !MainAccountControlCurrencyCode::exist(
                                LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension),
                                ledgerJournalTrans.CurrencyCode))
                            {
                                changecompany (ledgerJournalTrans.OffsetCompany)
                                {
                                    currencyCodeISO = Currency::currencyCodeISO(ledgerJournalTrans.CurrencyCode);
                                }
                                isValid = checkFailed(strFmt("@SYS25211", currencyCodeISO, this.getOffsetAccountNum()));
                            }
                            break;
                    }
                }
            }

            if (isValid)
            {
                isValid = offsetMainAccount.checkAccountCurrency(ledgerJournalTrans.CurrencyCode);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode determineDefaultCurrencyCode()
    {
        CurrencyCode    currencyCode;

        // Chart of Accounts
        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
        {
            if (ledgerJournalTrans.LedgerDimension != 0)
            {
                this.initializeMainAccount();
                if (mainAccount.RecId != 0 && mainAccount.CurrencyCode)
                {
                    currencyCode = mainAccount.CurrencyCode;
                }
            }
        }

        if (!currencyCode)
        {
            currencyCode = super();
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault determineDefaultDimension()
    {
        DimensionDefault        defaultdimension;
        DimensionDefault        dimensionMainAccount;
        DimensionDefault        dimensionOffsetMainAccount;
        MainAccountLegalEntity  mainAccountLegalEntity, offsetMainAccountLegalEntity;

        defaultdimension = super();

        // Ledger
        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
        {
            // Chart of Accounts
            this.initializeMainAccount();
            CompanyInfo companyInfo = ledgerJournalTrans.Company ? CompanyInfo::findDataArea(ledgerJournalTrans.Company) : CompanyInfo::findDataArea(curExt());
            mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccount.RecId, companyInfo.RecId);
            if (mainAccountLegalEntity.RecId != 0 && mainAccountLegalEntity.DefaultDimension)
            {
                dimensionMainAccount = mainAccountLegalEntity.DefaultDimension;
                defaultdimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultdimension, dimensionMainAccount);
            }
        }

        if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            // Offset Account
            this.defaultOffsetCompany();
            this.validateOffsetCompany();
            this.defaultOffsetAccount();
            this.initializeOffsetMainAccount();
            CompanyInfo companyInfo = ledgerJournalTrans.OffsetCompany ? CompanyInfo::findDataArea(ledgerJournalTrans.OffsetCompany) : CompanyInfo::findDataArea(curExt());
            offsetMainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(offsetMainAccount.RecId, companyInfo.RecId);

            if (offsetMainAccountLegalEntity.RecId != 0 && offsetMainAccountLegalEntity.DefaultDimension)
            {
                dimensionOffsetMainAccount = offsetMainAccountLegalEntity.DefaultDimension;
                defaultdimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultdimension, dimensionOffsetMainAccount);
            }
        }

        return defaultdimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOffsetDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault determineDefaultOffsetDefaultDimension()
    {
        DimensionDefault        defaultDimension;
        MainAccountLegalEntity  offsetMainAccountLegalEntity;
        // Ledger
        if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            // Chart of Accounts
            this.defaultCompany();
            this.validateCompany();
            this.defaultOffsetCompany();
            this.validateOffsetCompany();

            if (this.isInterCompany())
            {
                this.defaultOffsetAccount();
                this.initializeOffsetMainAccount();
                CompanyInfo companyInfo = ledgerJournalTrans.OffsetCompany ? CompanyInfo::findDataArea(ledgerJournalTrans.OffsetCompany) : CompanyInfo::findDataArea(curExt());
                offsetMainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(offsetMainAccount.RecId, companyInfo.RecId);

                if (offsetMainAccountLegalEntity.RecId != 0 && offsetMainAccountLegalEntity.DefaultDimension)
                {
                    defaultDimension = offsetMainAccountLegalEntity.DefaultDimension;
                }
            }
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxGroup</Name>
				<Source><![CDATA[
    protected TaxGroupJournal determineDefaultTaxGroup()
    {
        TaxGroupJournal taxGroup;

        // Account - Chart of Accounts
        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
        {
            this.initializeMainAccount();

            if (mainAccount.RecId != 0)
            {
                taxGroup = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccount.RecId, CompanyInfo::current()).TaxGroup;
            }
        }

        // OffsetAccount - Chart of Accounts
        if (!taxGroup)
        {
            if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
            {
                this.initializeOffsetMainAccount();
                if (offsetMainAccount.RecId != 0)
                {
                    taxGroup = MainAccountLegalEntity::findByMainAccountLegalEntity(offsetMainAccount.RecId, CompanyInfo::current()).TaxGroup;
                }
            }
        }

        return taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxItemGroup</Name>
				<Source><![CDATA[
    protected TaxGroupJournal determineDefaultTaxItemGroup()
    {
        TaxGroupJournal       taxGroup;

        // Chart of Accounts
        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
        {
            this.initializeMainAccount();
            if (mainAccount.RecId != 0)
            {
                taxGroup = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccount.RecId, CompanyInfo::current()).TaxItemGroup;
            }
        }

        // OffsetAccount - Chart of Accounts
        if (!taxGroup)
        {
            if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
            {
                this.initializeOffsetMainAccount();
                if (offsetMainAccount.RecId != 0)
                {
                    taxGroup = MainAccountLegalEntity::findByMainAccountLegalEntity(offsetMainAccount.RecId, CompanyInfo::current()).TaxItemGroup;
                }
            }
        }

        return taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountNum</Name>
				<Source><![CDATA[
    private AccountNum getAccountNum()
    {
        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
        {
            return LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerJournalTrans.LedgerDimension);
        }
        else
        {
            return ledgerJournalTrans.parmAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetAccountNum</Name>
				<Source><![CDATA[
    private AccountNum getOffsetAccountNum()
    {
        if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            return LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension);
        }
        else
        {
            return ledgerJournalTrans.parmOffsetAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMainAccount</Name>
				<Source><![CDATA[
    protected void initializeMainAccount()
    {
        MainAccount mainAccountLocal;

        if (ledgerJournalTrans.LedgerDimension != 0)
        {
            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
            {
                mainAccountLocal = ledgerJournalTrans.findMainAccount();
                if (mainAccount.MainAccountId != mainAccountLocal.MainAccountId)
                {
                    this.defaultCompany();
                    this.validateCompany();
                    mainAccount = mainAccountLocal;
                }
            }
            else
            {
                mainAccount.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeOffsetMainAccount</Name>
				<Source><![CDATA[
    protected void initializeOffsetMainAccount()
    {
        if (ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
            {
                if (offsetMainAccount.OffsetLedgerDimension != ledgerJournalTrans.parmOffsetLedgerDimension())
                {
                    this.defaultOffsetCompany();
                    this.validateOffsetCompany();
                    offsetMainAccount = ledgerJournalTrans.findMainAccountForOffset();
                }
            }
            else
            {
                offsetMainAccount.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>LedgerJournalTransType_Ledger</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    An instance of the <c>LedgerJournalTrans</c> table that is defaulted and validated.
    /// </param>
    /// <param name="_operation">
    ///    A <c>LedgerJournalOperation</c> enumeration value that indicates the callers operation.
    /// </param>
    /// <param name="_isInteractiveContext">
    ///    A Boolean value that indicates the caller context.
    /// </param>
    protected void new(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalOperation _operation, boolean _isInteractiveContext)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        operation = _operation;
        isInteractiveContext = _isInteractiveContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerDimension</Name>
				<Source><![CDATA[
    protected boolean validateLedgerDimension(boolean logFault = true)
    {
        boolean isValid = true;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger && ledgerJournalTrans.parmLedgerDimension())
        {
            this.initializeMainAccount();

            if (mainAccount.RecId == 0 )
            {
                isValid = false;

                if (logFault)
                {
                    checkFailed(strFmt("@SYS16935", LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerJournalTrans.LedgerDimension)));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOffsetLedgerDimension</Name>
				<Source><![CDATA[
    protected boolean validateOffsetLedgerDimension(boolean logFault = true)
    {
        boolean isValid = true;

        isValid = super();

        if (isValid)
        {
            if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger && ledgerJournalTrans.parmOffsetLedgerDimension())
            {
                this.initializeOffsetMainAccount();

                if (offsetMainAccount.RecId == 0 )
                {
                    isValid = false;
                    if (logFault)
                    {
                        checkFailed(strFmt("@SYS16935", LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension)));
                    }
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cross validates field values for a <c>LedgerJournalTrans</c> row.
    /// </summary>
    /// <returns>
    ///    true if the field values are valid; otherwise, false.
    /// </returns>
    public boolean validateRow()
    {
        boolean isValid;

        isValid = super();

        if (isValid)
        {
            isValid = this.crossValidateAccountNumCurrency();
        }

        if (isValid)
        {
            isValid = this.crossValidateOffsetAccountCurrency();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an initialized instance of the <c>LedgerJournalTransType_Ledger</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    An instance of the <c>LedgerJournalTrans</c> table that is applied and validated.
    /// </param>
    /// <param name="_operation">
    ///    A <c>LedgerJournalOperation</c> enumeration value that indicates the callers operation.
    /// </param>
    /// <param name="_isInteractiveContext">
    ///    A Boolean value that indicates the caller context.
    /// </param>
    /// <returns>
    ///    A <c>LedgerJournalTableType_Ledger</c> instance.
    /// </returns>
    public static LedgerJournalTransType_Ledger construct(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalOperation _operation, boolean _isInteractiveContext)
    {
        return new LedgerJournalTransType_Ledger(_ledgerJournalTrans, _operation, _isInteractiveContext);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>