<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAutomationStatementFormViewWorksheetCaller</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankAutomationStatementFormViewWorksheetCaller</c> class is the class to initilizing the
/// form view class <c>BankReconciliationWorksheetFormView</c> of the <c>BankReconciliationWorksheet</c> form.
/// </summary>
internal final class BankAutomationStatementFormViewWorksheetCaller implements BankReconciliationWorksheetFormCaller
{
    private JournalTableMap journalTable;
    private JournalTableData journalTableData;
    private FormDataSource dsReconciliation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initJournalTableData</Name>
				<Source><![CDATA[
    public void initJournalTableData(JournalTableMap _journalTable)
    {
        journalTable = _journalTable;
        journalTableData = JournalTableData::newTable(_journalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTableData</Name>
				<Source><![CDATA[
    public JournalTableData parmJournalTableData(JournalTableData _data = journalTableData)
    {
        journalTableData = _data;
        return journalTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inUseBlockReconciliation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or gets the block status of the journal table.
    /// </summary>
    /// <param name = "_set">Indicates whether to set or get the block status.</param>
    /// <param name = "_journalTable">Journal table mapped record.</param>
    /// <param name = "_value">The block status to set.</param>
    /// <returns>Returns the block status of the journal table.</returns>
    public JournalMarkInUseBlock inUseBlockReconciliation(boolean _set, JournalTableMap _journalTable, JournalMarkInUseBlock _value)
    {
        if (_set)
        {
            if (!_value && _journalTable.SessionId)
            {
                journalTableData.updateBlock(JournalBlockLevel::None, JournalBlockLevel::None);
            }
        }

        if (_journalTable.SessionId)
        {
            return NoYes::Yes;
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormCacheCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form cache with the current journal table record.
    /// </summary>
    /// <param name = "_journalTable">Journal table mapped record.</param>
    /// <param name = "_doRefresh">Indicates whether to refresh the form data source.</param>
    public void updateFormCacheCurrent(JournalTableMap _journalTable, boolean _doRefresh = false)
    {
        journalTable.data(_journalTable);

        if (dsReconciliation)
        {
            dsReconciliation.setCurrent();

            if (_doRefresh)
            {
                dsReconciliation.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of <c>BankAutomationStatementFormViewWorksheetCaller</c>.
    /// </summary>
    /// <param name="_formRun">The form run instance of <c>BankAutomationStatementForm</c>.</param>
    /// <returns>Returns instance of <c>BankAutomationStatementFormViewWorksheetCaller</c>.</returns>
    internal static BankAutomationStatementFormViewWorksheetCaller construct(FormRun _formRun)
    {
        return new BankAutomationStatementFormViewWorksheetCaller(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(FormRun _formRun)
    {
        dsReconciliation = _formRun.dataSource(formDataSourceStr(BankAutomationStatementForm, BankReconciliationHeader));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>