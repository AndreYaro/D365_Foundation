<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_Reg_CZ</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// To calculate Depreciation using Regular CZ method based on  Value Model.
/// </summary>
public final class AssetTableMethod_Reg_CZ extends AssetTableMethod_CZ
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the depreciation.
    /// </summary>
    /// <returns>
    /// DepreciationAmount.
    /// </returns>
    public AssetAmount calc()
    {
        AssetAmount periodAmount;
        real thisPercentage;

        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();

            this.setAmountToDepreciate();
            AssetTransDate firstYearEndDate = deprYearInterval.endPeriod(assetBook.DepreciationStartDate);
            AssetDepreciationRate_W assetRate = AssetDepreciationGroup_W::findRate(assetBook.DepreciationGroupId_W, this.depDate());

            if (assetRate)
            {
                AssetTrans assetTrans;
                TransactionReversalTrans transactionReversalTrans;
                select firstonly RecId from assetTrans
					where assetTrans.AssetId == assetBook.AssetId
						&& assetTrans.BookId == assetBook.BookId
						&& assetTrans.TransDate <= this.depDate()
						&& assetTrans.TransDate > firstYearEndDate
						&& assetTrans.TransType == AssetTransType::AcquisitionAdj
						&& assetTrans.PostingType_W != RAssetPostingType::Split
                    notexists join transactionReversalTrans
                        where transactionReversalTrans.RefTableId == tableNum(AssetTrans)
                            && transactionReversalTrans.RefRecId == assetTrans.RecId;

                if (assetTrans.RecId)
                {
                    thisPercentage = assetRate.FactorExt;
                }
                else
                {
                    if (this.depDate() <= firstYearEndDate)
                    {
                        thisPercentage = assetRate.Factor;
                    }
                    else
                    {
                        thisPercentage = assetRate.FactorAlt;
                    }
                }
                periodAmount = amountToDepreciate * thisPercentage * currentPeriod / periodsInCurrentYear / 100;
                if (currentPeriod > 1)
                {
                    periodAmount = periodAmount - prevYearlyAmount;
                }

                // If half depreciation is run , then halve the amount
                if (halfDepreciation && (depreciationDate == parmRunDate))
                {
                    periodAmount=periodAmount / 2;
                }

                periodAmount = assetBook.roundOffDepreciation(periodAmount);
            }
            else
            {
                warning(strfmt("@GLS108281", this.depDate()));
                periodAmount = 0;
            }

            periodEnd++;
            periodstart = periodEnd;
            periodEnd = deprInterval.endPeriod(periodstart);

            // Half depreciation is run the end the period
            if (periodEnd > parmRunDate && halfDepreciation)
            {
                periodEnd = parmRunDate;
            }
            if (periodAmount > amountToDepreciate - prevDepAmount - prevDepAmountExternal)
            {
                periodAmount = amountToDepreciate - prevDepAmount - prevDepAmountExternal;
            }

            prevDepAmount    += periodAmount;
            prevYearlyAmount += periodAmount;

            if (amountToDepreciate <= prevDepAmount + prevDepAmountExternal || periodAmount <= 0)
            {
                theEnd = true;
            }
        }

        return periodAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>