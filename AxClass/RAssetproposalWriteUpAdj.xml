<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetproposalWriteUpAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetproposalWriteUpAdj extends RAssetProposal implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    public RAssetTransType assetTransType()
    {
        return RAssetTransType::WriteUpAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    public void createJournalLines(RAssetStandardId _assetStandardId,
                                   boolean          _runFromBatch = true,
                                   RAssetAmount     _assetAmount  = 0)
    {
        RAssetSumCalc   rassetSumTrans;
        RAssetAmount    amountCur;
        ;

        if (rAssetStandards.Depreciation                                    &&
            rAssetStandards.CurrencyCode != CompanyInfoHelper::standardCurrency() &&
            rAssetStandards.postingProfile(runDate))
        {
            rassetSumTrans = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum,
                                                                 _assetStandardId,
                                                                 runDate);

            amountCur = rassetSumTrans.acquisitionTotal();

            amountCur = CurrencyExchangeHelper::amountCur2MST(amountCur, rAssetStandards.CurrencyCode, 0, runDate) -
                rassetSumTrans.acquisitionTotalMST();

            amountCur = RAssetProposal::roundAmount(_assetStandardId,
                                                    rAssetTable,
                                                    runDate,
                                                    amountCur,
                                                    CompanyInfoHelper::standardCurrency());

            if (amountCur != 0)
            {
                rAssetJournal.createVoucher();
                rAssetJournal.createTrans(amountCur,
                                          rAssetTable,
                                          runDate,
                                          rAssetStandards,
                                          "");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@GLS116212");
        dialogAssetStandardId.visible(false);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(QueryRun _queryRun = queryRun)
    {
        boolean             addLineFromAllModels;
        QueryRun            runProposal        = _queryRun;
        RAssetProposal      assetWriteDownAdj  = new RAssetproposalWriteDownAdj();
        DictEnum            assetTransTypeEnum = new DictEnum(enumNum(RAssetTransType));
        TransDate           originRunDate = runDate;
    
        rAssetJournal        = new RAssetJournal(ledgerJournalId, this.assetTransType());
        rAssetStandardId     = RAssetParameters::find().StandardIdDefault;
        addLineFromAllModels = RAssetProposal::addLineFromAllModels(this.assetTransType()) || ! rAssetStandardId;
        runProposal.query(RAssetStatusType::allowStatusRangeValue(runProposal.query(),this.assetTransType()));
        assetWriteDownAdj = new RAssetproposalWriteDownAdj();
        assetWriteDownAdj.parmCorrect(correct);
        assetWriteDownAdj.parmCorrectedPeriod(correctedPeriod);
    
        ttsbegin;
    
        while (runProposal.next())
        {
            rAssetTable = runProposal.get(tableNum(RAssetTable));
    
            while select rAssetStandards
                where rAssetStandards.AssetId == rAssetTable.AccountNum
            {
                if (addLineFromAllModels ||
                    rAssetStandards.AssetStandardId == rAssetStandardId ||
                    RAssetStandardTableDerived::existDerived(rAssetStandardId,
                                                             rAssetStandards.AssetStandardId,
                                                             assetTransTypeEnum.index2Value(this.assetTransType())))
                {
                    if (!reasonRefRecID && (reasonCode != '' || reasonComment != ''))
                    {
                        rAssetJournal.parmReasonRefRecId(reasonRefRecID);
                        rAssetJournal.parmReasonCode(reasonCode);
                        rAssetJournal.parmReasonComment(reasonComment);
                    }
    
                    if (correct)
                    {
                        this.initJournalCorrection();
                    }
    
                    this.createJournalLines(rAssetStandards.AssetStandardId);
    
                    assetWriteDownAdj.initParameters(ledgerJournalId, originRunDate, rAssetStandards);
    
                    if (assetWriteDownAdj.parmCorrect())
                    {
                        assetWriteDownAdj.initJournalCorrection();
                    }
    
                    assetWriteDownAdj.createJournalLines(rAssetStandards.AssetStandardId);
                }
            }
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
