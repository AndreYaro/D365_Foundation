<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoiceJournalCreate_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesInvoiceJournalCreate))]
public final class SalesInvoiceJournalCreate_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPricingCalculation</Name>
				<Source><![CDATA[
    protected void addPricingCalculation(SalesLine _salesLine)
    {
        if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()) && !this.checkUsualExporterBeforePosting_IT())
        {
            throw error(StrFmt("@ExtendedItallianLocalization:ExemptionTaxGroupCannotBeUsed", salesLine.TaxGroup));
        }
        next addPricingCalculation(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    protected void initJournalHeader()
    {
        if (FeatureStateProvider::isFeatureEnabled(ChronologicalNumberingFeature::instance()))
        {
            ChronologicalNumberSequenceGroupEngine::applyChronologicalNumberSequenceGroup(salesTable, this.updateDate());
        }

        next initJournalHeader();

        if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            this.initUsualExporter_IT();
        }

        if (FeatureStateProvider::isFeatureEnabled(SplitPaymentMandatoryRuleFeature_PL::instance()))
        {
            SplitPaymentMandatoryRuleEngine::analyseAndUpdateSplitPaymMode(this.salesTable, true);
        }

        if (FeatureStateProvider::isFeatureEnabled(TaxInvoiceSerialNumberGenerateIndonesiaFeature::instance())
            && TaxInvoiceSerialNumberGenerator_ID::shouldGetNumber(salesParmTable, this.proforma()))
        {
            custInvoiceJour.TaxInvoiceSalesId = TaxInvoiceSerialNumberGenerator_ID::getNumber(
                salesParmTable,
                salesParmTable.TaxInvoiceTransactionCode_ID);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUsualExporterBeforePosting_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if tax group is properly used.
    /// </summary>
    /// <returns>true if no inconsistency was found; false otherwise.</returns>
    protected boolean checkUsualExporterBeforePosting_IT()
    {
        boolean ret = true;
        TaxGroup usExpExemptionTaxGroup = CustParameters::find().UsualExporterExemptionTaxGroup_IT;

        // If UsExpExemptionTaxGroup in CustParameters is not set up, skip this check and allow posting
        //Usual exporter tax group cannot be used if the customer is not an usual exporter or without an active intent letter
        if (usExpExemptionTaxGroup
            && salesLine.TaxGroup == usExpExemptionTaxGroup
            && (!isUsualExporterCustomer_IT
                || !custIntentLetter_IT))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUsualExporter_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is only one intent letter for each invoice.
    /// </summary>
    /// <exception>Throws exception if more than one intent letter is used.</exception>
    protected void initUsualExporter_IT()
    {
        isUsualExporterCustomer_IT = CustTable::find(salesTable.InvoiceAccount).UsualExporter_IT;
        isIntentLetterUsed_IT = false;

        if (isUsualExporterCustomer_IT)
        {
            SalesParmSubtable salesParmSubtable;
            SalesTable salesTableLocal;
            IntentLetterInternalId_IT prevIntentLetterId;
            TaxGroup usExpExemptionTaxGroup = CustParameters::find().UsualExporterExemptionTaxGroup_IT;

            while select IntentLetterId_IT, TaxGroup from salesTableLocal
                where salesTableLocal.IntentLetterId_IT
                exists join salesParmSubtable
                    where salesTableLocal.SalesId == salesParmSubtable.OrigSalesId
                        && salesParmSubtable.ParmId == this.parmCustInvoiceJour_W().ParmId
                        && salesParmSubtable.TableRefId == this.parmSalesParmTable_W().TableRefId
            {
                custIntentLetter_IT = CustIntentLetter_IT::findInternalId(salesTableLocal.IntentLetterId_IT);
                
                if (prevIntentLetterId && prevIntentLetterId != custIntentLetter_IT.InternalLetterId)
                {
                    throw error("@ExtendedItallianLocalization:OneLetterPerInvoice");
                }

                prevIntentLetterId = custIntentLetter_IT.InternalLetterId;
                isIntentLetterUsed_IT = (custIntentLetter_IT.RecId != 0) && (salesTableLocal.TaxGroup == usExpExemptionTaxGroup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceJour_W</Name>
				<Source><![CDATA[
    public CustInvoiceJour parmCustInvoiceJour_W(CustInvoiceJour _custInvoiceJour = custInvoiceJour)
    {
        this.custInvoiceJour = _custInvoiceJour;
        return this.custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesParmTable_W</Name>
				<Source><![CDATA[
    public SalesParmTable parmSalesParmTable_W(SalesParmTable _salesParmTable = salesParmTable)
    {
        this.salesParmTable = _salesParmTable;
        return this.salesParmTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>