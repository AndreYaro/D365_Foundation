<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPurchaseJournalReportDPBE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerPurchaseJournalReportDPBE</c> class is the Report Data Provider class for the
///    <c>LedgerPurchaseJournalReportBE</c> report.
/// </summary>
[
    SRSReportQueryAttribute     (queryStr(LedgerPurchaseJournalReportBE)),
    SRSReportParameterAttribute (classStr(LedgerPurchaseJournalReportCntrctBE))
]
public class LedgerPurchaseJournalReportDPBE extends SrsReportDataProviderPreprocessTempDB
{
    private const str FeatureReference = 'BE-00024';

    LedgerPurchaseJournalReportTmpBE    ledgerPurchaseJournalReportTmpBE;
    CompanyInfo                         companyInfo;
    GeneralJournalEntry                 generalJournalEntry;
    SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
    GeneralJournalAccountEntry          generalJournalAccountEntry;
    MainAccountLedgerDimensionView      mainAccountLedgerDimensionView;
    TmpAccountTotalsBE                  tmpAccountTotalsBE;
    TmpTaxJournalReport_BE              tmpTaxJournalReport_BE;
    TmpTaxTransTotalsBE                 tmpTaxTransTotals_BE;
    TmpTaxPurchLedger                   tmpTaxPurchLedger;
    TmpTaxPurchLedger                   tmpTaxSumPurchLedger;
    TaxEnterpriseNumber                 companyEnterpriseNumber;
    CompanyName                         companyName;
    VATNum                              companyVATNum;
    PageNo                              pageNumStart;

    boolean                             firstVoucherLine;
    boolean                             newPageNum;
    boolean                             finalReporting;
    boolean                             compression;
    LedgerPostingJournalId              ledgerPostingJournalId;
    FromDate                            fromDate;
    FromDate                            periodFromDate;
    FromDate                            periodOpeningDate;
    ToDate                              toDate;
    ToDate                              periodToDate;
    ToDate                              periodClosingDate;
    real                                totDeb;
    real                                totCred;
    str                                 currencyCode;
    str                                 vchrTansDtvisibility;
    boolean                             isCreditNote;
    Voucher                             prevVoucher;
    TransDate                           prevTransdate;

    #define.maxLinesOnPage              (52)
    #define.coRegNumDigits              ('0123456789')
    #taxReportingCodesBE

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>AccountName</c> value that is based on the <c>LedgerPostingType</c> enumeration
    /// value.
    /// </summary>
    /// <returns>
    /// An <c>AccountName</c> value.
    /// </returns>
    private AccountName accountName()
    {
        str accountName;

        if (generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance)
        {
            accountName = this.findVendTransByVoucherDate(subledgerVoucherGeneralJournalEntry.Voucher, subledgerVoucherGeneralJournalEntry.AccountingDate).vendTableName();
        }
        else
        {
            accountName = MainAccount::getLocalizedName(mainAccountLedgerDimensionView.MainAccountRecId);
        }

        return accountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxBoxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>TmpTaxPurchLedger</c> record that is based on the <c>TaxReportField</c> value.
    /// </summary>
    /// <param name="_tmpTaxPurchLedger">
    /// A <c>TmpTaxPurchLedger</c> table buffer.
    /// </param>
    /// <param name="_taxReportField">
    /// A <c>TaxReportField</c> field value.
    /// </param>
    /// <param name="_amountMST">
    /// An <c>AmountMST</c> field value.
    /// </param>
    /// <param name="_taxInCostPriceMST">
    /// A <c>TaxAmount</c> field value.
    /// </param>
    /// <returns>
    /// A <c>TmpTaxPurchLedger</c> record.
    /// </returns>
    protected TmpTaxPurchLedger addTaxBoxAmount(TmpTaxPurchLedger _tmpTaxPurchLedger,
                                                TaxReportField    _taxReportField,
                                                AmountMST         _amountMST,
                                                TaxAmount         _taxInCostPriceMST = 0)
    {
        TmpTaxPurchLedger taxPurchLedger = _tmpTaxPurchLedger;

        switch (_taxReportField)
        {
            case #field_81 : taxPurchLedger.TaxBaseAmountMSTBox81 += (_amountMST + _taxInCostPriceMST);
                             break;

            case #field_82 : taxPurchLedger.TaxBaseAmountMSTBox82 += (_amountMST + _taxInCostPriceMST);
                             break;

            case #field_83 : taxPurchLedger.TaxBaseAmountMSTBox83 += (_amountMST + _taxInCostPriceMST);
                             break;

            case #field_86 : taxPurchLedger.TaxExemptAmountMSTBox86 += _amountMST;
                             break;

            case #field_87 : taxPurchLedger.TaxExemptAmountMSTBox87 += _amountMST;
                             break;

            case #field_88 : taxPurchLedger.TaxExemptAmountMSTBox88 += _amountMST;
                             break;

            case #field_84 : taxPurchLedger.CreditNoteAmountMSTBox84 -= (_amountMST + _taxInCostPriceMST);
                             break;

            case #field_85 : taxPurchLedger.CreditNoteAmountMSTBox85 -= _amountMST;
                             break;

            case #field_55 : taxPurchLedger.TaxAmountMSTBox55 += _amountMST;
                             break;

            case #field_56 : taxPurchLedger.TaxAmountMSTBox56 += _amountMST;
                             break;

            case #field_57 : taxPurchLedger.TaxAmountMSTBox57 += _amountMST;
                             break;

            case #field_61 : taxPurchLedger.TaxAmountMSTBox61 -= _amountMST;
                             break;

            case #field_62 : taxPurchLedger.TaxAmountMSTBox62 -= _amountMST;
                             break;

            case #field_63 : taxPurchLedger.TaxAmountMSTBox63 -= (_amountMST - _taxInCostPriceMST);
                             break;

            case #field_59 : taxPurchLedger.DeductibleAmountMSTBox59 += (_amountMST - _taxInCostPriceMST);
                             break;

            case #field_8184 : taxPurchLedger.TaxBaseAmountMSTBox81 += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.CreditNoteAmountMSTBox84 -= _amountMST;
                             break;

            case #field_8185 : taxPurchLedger.TaxBaseAmountMSTBox81 += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.CreditNoteAmountMSTBox85 -= _amountMST;
                             break;

            case #field_8285 : taxPurchLedger.TaxBaseAmountMSTBox82 += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.CreditNoteAmountMSTBox85 -= _amountMST;   
                             break;

            case #field_8384 : taxPurchLedger.TaxBaseAmountMSTBox83 += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.CreditNoteAmountMSTBox84 -= _amountMST;
                             break;

            case #field_8385 : taxPurchLedger.TaxBaseAmountMSTBox83 += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.CreditNoteAmountMSTBox85 -= _amountMST;
                             break;

            case #field_8287 : taxPurchLedger.TaxBaseAmountMSTBox82 += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.TaxExemptAmountMSTBox87 += (_amountMST + _taxInCostPriceMST);
                             break;

            case #field_828785 : taxPurchLedger.TaxBaseAmountMSTBox82 += (_amountMST + _taxInCostPriceMST);
                                 taxPurchLedger.TaxExemptAmountMSTBox87 -= (_amountMST + _taxInCostPriceMST);
                                 taxPurchLedger.CreditNoteAmountMSTBox85 -= _amountMST;
                             break;

            case #field_8284 : taxPurchLedger.TaxBaseAmountMSTBox82 += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.CreditNoteAmountMSTBox84 -= _amountMST;
                             break;

            case #field_8187 : taxPurchLedger.TaxBaseAmountMSTBox81 += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.TaxExemptAmountMSTBox87 -= (_amountMST + _taxInCostPriceMST);
                             break;

            case #field_8387 : taxPurchLedger.TaxBaseAmountMSTBox83 += (_amountMST + _taxInCostPriceMST);
                               taxPurchLedger.TaxExemptAmountMSTBox87 -= (_amountMST + _taxInCostPriceMST);
                             break;
        }
        return taxPurchLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total tax amounts and inserts it into the <c>TmpTaxTransTotals_BE</c> table.
    /// </summary>
    private void calcTaxTotals()
    {
        select tmpTaxTransTotals_BE
            where tmpTaxTransTotals_BE.TaxCode == tmpTaxJournalReport_BE.TaxCode;

        if (isCreditNote)
        {
            if (tmpTaxTransTotals_BE)
            {
                tmpTaxTransTotals_BE.TaxCnAmount  += -(tmpTaxJournalReport_BE.TaxAmountGoods+ tmpTaxJournalReport_BE.TaxAmountInvest+tmpTaxJournalReport_BE.TaxAmountServices);
                tmpTaxTransTotals_BE.TaxCnBase    += -(tmpTaxJournalReport_BE.TaxBaseAMount);
                tmpTaxTransTotals_BE.TaxCnAmCharge+= -(tmpTaxJournalReport_BE.TaxAmountCharge);
                tmpTaxTransTotals_BE.update();
            }
            else
            {
                tmpTaxTransTotals_BE.TaxCode       = tmpTaxJournalReport_BE.TaxCode;
                tmpTaxTransTotals_BE.TaxName       = TaxTable::find(tmpTaxJournalReport_BE.TaxCode).TaxName;
                tmpTaxTransTotals_BE.TaxCnAmount  += -(tmpTaxJournalReport_BE.TaxAmountGoods+ tmpTaxJournalReport_BE.TaxAmountInvest+tmpTaxJournalReport_BE.TaxAmountServices);
                tmpTaxTransTotals_BE.TaxCnBase    += -(tmpTaxJournalReport_BE.TaxBaseAMount);
                tmpTaxTransTotals_BE.TaxCnAmCharge+= -(tmpTaxJournalReport_BE.TaxAmountCharge);
                tmpTaxTransTotals_BE.insert();
            }
        }
        else
        {
            if (tmpTaxTransTotals_BE)
            {
                tmpTaxTransTotals_BE.TaxInvAmount   += (tmpTaxJournalReport_BE.TaxAmountGoods + tmpTaxJournalReport_BE.TaxAmountInvest + tmpTaxJournalReport_BE.TaxAmountServices);
                tmpTaxTransTotals_BE.TaxInvBase     += tmpTaxJournalReport_BE.TaxBaseAMount;
                tmpTaxTransTotals_BE.TaxInvAmCharge += tmpTaxJournalReport_BE.TaxAmountCharge;
                tmpTaxTransTotals_BE.update();
            }
            else
            {
                tmpTaxTransTotals_BE.TaxCode         = tmpTaxJournalReport_BE.TaxCode;
                tmpTaxTransTotals_BE.TaxName         = TaxTable::find(tmpTaxJournalReport_BE.TaxCode).TaxName;
                tmpTaxTransTotals_BE.TaxInvAmount   += (tmpTaxJournalReport_BE.TaxAmountGoods + tmpTaxJournalReport_BE.TaxAmountInvest + tmpTaxJournalReport_BE.TaxAmountServices);
                tmpTaxTransTotals_BE.TaxInvBase     += tmpTaxJournalReport_BE.TaxBaseAMount;
                tmpTaxTransTotals_BE.TaxInvAmCharge += tmpTaxJournalReport_BE.TaxAmountCharge;
                tmpTaxTransTotals_BE.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeJournalReport</Name>
				<Source><![CDATA[
/// <summary>
    /// Calls the methods that fetch records for <c>TmpTaxTransTotals_BE</c> table.
    /// </summary>
    private void closeJournalReport()
    {
        this.findTaxTransactions();
        this.printTaxInfoPerVoucher(); //print splitted tax info
        this.printTaxTotals(); //print tax totals
        this.taxBoxCalc();
        this.printTaxBoxInfo(); //print taxbox info

        if (finalReporting)
        {
            this.updateJournalPeriodFinalPrint();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerPostingJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records of the <c>GeneralJournalEntry</c> table, depending on the
    /// <c>AccountingDate</c> and <c>ReferenceNumber</c> fields.
    /// </summary>
    /// <param name="_accountingDate">
    /// A <c>AccountingDate</c> field value.
    /// </param>
    /// <param name="_voucher">
    /// A <c>Voucher</c> field value.
    /// </param>
    /// <returns>
    /// A <c>GeneralJournalEntry</c> table record.
    /// </returns>
    public LedgerPostingJournalId findLedgerPostingJournalId(TransDate  _accountingDate,
                                                             Voucher    _voucher)
    {
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntryLoc;
        GeneralJournalEntry generalJournalEntryLoc;

        select firstonly LedgerPostingJournal from generalJournalEntryLoc
            exists join subledgerVoucherGeneralJournalEntryLoc
                where generalJournalEntryLoc.RecId == subledgerVoucherGeneralJournalEntryLoc.GeneralJournalEntry
                    && subledgerVoucherGeneralJournalEntryLoc.Voucher == _voucher
                    && subledgerVoucherGeneralJournalEntryLoc.AccountingDate == _accountingDate
                    && subledgerVoucherGeneralJournalEntryLoc.VoucherDataAreaId == curExt();

        return generalJournalEntryLoc.LedgerPostingJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxTransactions</Name>
				<Source><![CDATA[
/// <summary>
    /// Retrieves the <c>TaxTrans</c> records and inserts them into the temporary table, depending on
    /// <c>LedgerPostingJournal</c> and <c>AccountingDate</c> values.
    /// </summary>
    private void findTaxTransactions()
    {
        TaxTrans            taxTrans                    = null;
        GeneralJournalEntry generalJournalEntryBuffer   = null;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntryBuffer = null;

        while select Voucher, AccountingDate from subledgerVoucherGeneralJournalEntryBuffer
            group by Voucher, AccountingDate
            where subledgerVoucherGeneralJournalEntryBuffer.AccountingDate >= periodFromDate
               && subledgerVoucherGeneralJournalEntryBuffer.AccountingDate <= periodToDate
               && subledgerVoucherGeneralJournalEntryBuffer.VoucherDataAreaId == curext()
            exists join generalJournalEntryBuffer
                where generalJournalEntryBuffer.RecId == subledgerVoucherGeneralJournalEntryBuffer.GeneralJournalEntry &&
                      generalJournalEntryBuffer.LedgerPostingJournal == ledgerPostingJournalId

        {
            if (! compression)
            {
                while select taxTrans
                    where taxTrans.Voucher   == subledgerVoucherGeneralJournalEntryBuffer.Voucher
                       && taxTrans.TransDate == subledgerVoucherGeneralJournalEntryBuffer.AccountingDate
                {
                    this.insertTmpTaxJournalReport_BE(taxTrans);
                }
            }
            else
            {
                while select Voucher, TransDate, TaxCode, TaxItemGroup, sum (TaxBaseAmount), sum(TaxAmount), sum(TaxInCostPriceMST)
                    from taxTrans
                    index hint VoucherDateIdx
                    group by Voucher, TransDate, TaxCode, TaxItemGroup
                    where taxTrans.Voucher   == subledgerVoucherGeneralJournalEntryBuffer.Voucher
                       && taxTrans.TransDate == subledgerVoucherGeneralJournalEntryBuffer.AccountingDate
                {
                    this.insertTmpTaxJournalReport_BE(taxTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records of the <c>GeneralJournalEntry</c> table, depending on <c>AccountingDate</c>
    /// and <c>ReferenceNumber</c> values.
    /// </summary>
    /// <param name="_voucher">
    /// A <c>ReferenceNumber</c> field value.
    /// </param>
    /// <param name="_transDate">
    /// An <c>AccountingDate</c> field value.
    /// </param>
    /// <returns>
    /// A <c>GeneralJournalEntry</c> record.
    /// </returns>
    public GeneralJournalEntry findVoucherDate(Voucher   _voucher,
                                               TransDate _transDate)
    {
        GeneralJournalEntry                 generalJournalEntlyLocal;
        SubledgerVoucherGeneralJournalEntry subLedgerVoucherJournalEntryLocal;

        select firstonly generalJournalEntlyLocal
            exists join subLedgerVoucherJournalEntryLocal
                where subLedgerVoucherJournalEntryLocal.GeneralJournalEntry == generalJournalEntlyLocal.RecId 
                    && subLedgerVoucherJournalEntryLocal.Voucher == _voucher 
                    && subLedgerVoucherJournalEntryLocal.AccountingDate == _transDate
                    && subLedgerVoucherJournalEntryLocal.VoucherDataAreaId == curExt();

        return generalJournalEntlyLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPurchaseJournalReportTmpBE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetching the data from the <c>LedgerPurchaseJournalReportTmpBE</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>LedgerPurchaseJournalReportTmpBE</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(LedgerPurchaseJournalReportTmpBE))]
    public LedgerPurchaseJournalReportTmpBE getLedgerPurchaseJournalReportTmpBE()
    {
        select ledgerPurchaseJournalReportTmpBE;
        return ledgerPurchaseJournalReportTmpBE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxPurchLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>TmpTaxPurchLedger</c> table if no record exists; otherwise, updates the
    /// table.
    /// </summary>
    /// <param name="_tmpTaxPurchLedger">
    /// A <c>TmpTaxPurchLedger</c> table buffer.
    /// </param>
    protected void insertInTmpTaxPurchLedger(TmpTaxPurchLedger _tmpTaxPurchLedger)
    {
        select tmpTaxPurchLedger
        where tmpTaxPurchLedger.LedgerPostingJournalId == _tmpTaxPurchLedger.LedgerPostingJournalId &&
              tmpTaxPurchLedger.Voucher                == _tmpTaxPurchLedger.Voucher                &&
              tmpTaxPurchLedger.TransDate              == _tmpTaxPurchLedger.TransDate;
        if (tmpTaxPurchLedger)
        {
            tmpTaxPurchLedger.TaxBaseAmountMSTBox81    += _tmpTaxPurchLedger.TaxBaseAmountMSTBox81;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox82    += _tmpTaxPurchLedger.TaxBaseAmountMSTBox82;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox83    += _tmpTaxPurchLedger.TaxBaseAmountMSTBox83;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox86  += _tmpTaxPurchLedger.TaxExemptAmountMSTBox86;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox87  += _tmpTaxPurchLedger.TaxExemptAmountMSTBox87;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox88  += _tmpTaxPurchLedger.TaxExemptAmountMSTBox88;
            tmpTaxPurchLedger.CreditNoteAmountMSTBox84 += _tmpTaxPurchLedger.CreditNoteAmountMSTBox84;
            tmpTaxPurchLedger.CreditNoteAmountMSTBox85 += _tmpTaxPurchLedger.CreditNoteAmountMSTBox85;
            tmpTaxPurchLedger.TaxAmountMSTBox55        += _tmpTaxPurchLedger.TaxAmountMSTBox55;
            tmpTaxPurchLedger.TaxAmountMSTBox56        += _tmpTaxPurchLedger.TaxAmountMSTBox56;
            tmpTaxPurchLedger.TaxAmountMSTBox57        += _tmpTaxPurchLedger.TaxAmountMSTBox57;
            tmpTaxPurchLedger.TaxAmountMSTBox61        += _tmpTaxPurchLedger.TaxAmountMSTBox61;
            tmpTaxPurchLedger.TaxAmountMSTBox62        += _tmpTaxPurchLedger.TaxAmountMSTBox62;
            tmpTaxPurchLedger.TaxAmountMSTBox63        += _tmpTaxPurchLedger.TaxAmountMSTBox63;
            tmpTaxPurchLedger.DeductibleAmountMSTBox59 += _tmpTaxPurchLedger.DeductibleAmountMSTBox59;
            tmpTaxPurchLedger.AmountMSTInclTax         += _tmpTaxPurchLedger.AmountMSTInclTax;

            tmpTaxPurchLedger.update();
        }
        else
        {
            tmpTaxPurchLedger.LedgerPostingJournalId   = _tmpTaxPurchLedger.LedgerPostingJournalId;
            tmpTaxPurchLedger.Voucher                  = _tmpTaxPurchLedger.Voucher;
            tmpTaxPurchLedger.TransDate                = _tmpTaxPurchLedger.TransDate;
            tmpTaxPurchLedger.VendAccount              = _tmpTaxPurchLedger.VendAccount;
            tmpTaxPurchLedger.InvoiceId                = _tmpTaxPurchLedger.InvoiceId;
            tmpTaxPurchLedger.AmountMSTInclTax         = _tmpTaxPurchLedger.AmountMSTInclTax;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox81    = _tmpTaxPurchLedger.TaxBaseAmountMSTBox81;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox82    = _tmpTaxPurchLedger.TaxBaseAmountMSTBox82;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox83    = _tmpTaxPurchLedger.TaxBaseAmountMSTBox83;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox86  = _tmpTaxPurchLedger.TaxExemptAmountMSTBox86;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox87  = _tmpTaxPurchLedger.TaxExemptAmountMSTBox87;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox88  = _tmpTaxPurchLedger.TaxExemptAmountMSTBox88;
            tmpTaxPurchLedger.CreditNoteAmountMSTBox84 = _tmpTaxPurchLedger.CreditNoteAmountMSTBox84;
            tmpTaxPurchLedger.CreditNoteAmountMSTBox85 = _tmpTaxPurchLedger.CreditNoteAmountMSTBox85;
            tmpTaxPurchLedger.TaxAmountMSTBox55        = _tmpTaxPurchLedger.TaxAmountMSTBox55;
            tmpTaxPurchLedger.TaxAmountMSTBox56        = _tmpTaxPurchLedger.TaxAmountMSTBox56;
            tmpTaxPurchLedger.TaxAmountMSTBox57        = _tmpTaxPurchLedger.TaxAmountMSTBox57;
            tmpTaxPurchLedger.TaxAmountMSTBox61        = _tmpTaxPurchLedger.TaxAmountMSTBox61;
            tmpTaxPurchLedger.TaxAmountMSTBox62        = _tmpTaxPurchLedger.TaxAmountMSTBox62;
            tmpTaxPurchLedger.TaxAmountMSTBox63        = _tmpTaxPurchLedger.TaxAmountMSTBox63;
            tmpTaxPurchLedger.DeductibleAmountMSTBox59 = _tmpTaxPurchLedger.DeductibleAmountMSTBox59;
            tmpTaxPurchLedger.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits data in the <c>LedgerPurchaseJournalReportTmpBE</c> temporary table.
    /// </summary>
    protected void initTempTable()
    {
        GeneralJournalAccountEntry generalJournalAccountEntryLoc;
        VendTrans vendTrans = this.findVendTransByVoucherDate(prevVoucher, prevTransdate);
        ledgerPurchaseJournalReportTmpBE.clear();
        //PageTitleHeader
        ledgerPurchaseJournalReportTmpBE.CompanyEnterpriseNumber            = companyEnterpriseNumber;
        ledgerPurchaseJournalReportTmpBE.CompanyVATNum                      = companyVATNum;
        ledgerPurchaseJournalReportTmpBE.CompanyName                        = companyName;
        ledgerPurchaseJournalReportTmpBE.PeriodFromDate                     = periodOpeningDate;
        ledgerPurchaseJournalReportTmpBE.PeriodToDate                       = periodClosingDate;

        //LedgerTrans
        ledgerPurchaseJournalReportTmpBE.LdgrTrnsVoucher                    = subledgerVoucherGeneralJournalEntry.Voucher;
        ledgerPurchaseJournalReportTmpBE.LdgrTrnsAccountNum                 = mainAccountLedgerDimensionView.MainAccount;
        ledgerPurchaseJournalReportTmpBE.LdgrTrnsAccountName                = this.accountName();
        ledgerPurchaseJournalReportTmpBE.LdgrTrnsAmountMST                  = generalJournalAccountEntry.AccountingCurrencyAmount;
        ledgerPurchaseJournalReportTmpBE.LedgerTransRecId                   = generalJournalEntry.RecId;
        ledgerPurchaseJournalReportTmpBE.LdgrTrnsMainAccountName            = MainAccount::getLocalizedName(mainAccountLedgerDimensionView.MainAccountRecId);

        //DateInvoiceLine
        ledgerPurchaseJournalReportTmpBE.LdgrTrnsTransdate                  = subledgerVoucherGeneralJournalEntry.AccountingDate;
        ledgerPurchaseJournalReportTmpBE.AmountCur                          = currencyCode;
        ledgerPurchaseJournalReportTmpBE.InvoiceNo                          = vendTrans.Invoice;
        ledgerPurchaseJournalReportTmpBE.VendName                           = vendTrans.vendTableName();
        ledgerPurchaseJournalReportTmpBE.DocumentDate                       = vendTrans.DocumentDate;

        if (firstVoucherLine && ledgerPurchaseJournalReportTmpBE.InvoiceNo)
        {
            firstVoucherLine = false;
            select firstOnly AccountingCurrencyAmount from generalJournalAccountEntryLoc
                where generalJournalAccountEntryLoc.PostingType == LedgerPostingType::VendBalance
                    && generalJournalAccountEntryLoc.GeneralJournalEntry == generalJournalEntry.RecId;

            if (generalJournalAccountEntryLoc.AccountingCurrencyAmount > 0)
            {
                ledgerPurchaseJournalReportTmpBE.IdentificationType = "@SYS79668";
            }
            else
            {
                ledgerPurchaseJournalReportTmpBE.IdentificationType = "@SYS79667";
            }
        }

        //TmpTaxJournalReport_BE
        ledgerPurchaseJournalReportTmpBE.TmpTxJrnlBEVoucher                 = tmpTaxJournalReport_BE.Voucher;
        ledgerPurchaseJournalReportTmpBE.TmpTxJrnlBETransdate               = tmpTaxJournalReport_BE.Transdate;
        ledgerPurchaseJournalReportTmpBE.TmpTxJrnlBETaxCode                 = tmpTaxJournalReport_BE.TaxCode;
        ledgerPurchaseJournalReportTmpBE.TmpTxJrnlBETaxBaseAmount           = tmpTaxJournalReport_BE.TaxBaseAMount;
        ledgerPurchaseJournalReportTmpBE.TmpTxJrnlBETaxAmountGoods          = tmpTaxJournalReport_BE.TaxAmountGoods;
        ledgerPurchaseJournalReportTmpBE.TmpTxJrnlBETaxAmountInvest         = tmpTaxJournalReport_BE.TaxAmountInvest;
        ledgerPurchaseJournalReportTmpBE.TmpTxJrnlBETaxAmountServices       = tmpTaxJournalReport_BE.TaxAmountServices;
        ledgerPurchaseJournalReportTmpBE.TmpTxJrnlBETaxBaseAmountGoods      = tmpTaxJournalReport_BE.TaxBaseAmountGoods;
        ledgerPurchaseJournalReportTmpBE.TmpTxJrnlBETaxBaseAmountInvest     = tmpTaxJournalReport_BE.TaxBaseAmountInvest;
        ledgerPurchaseJournalReportTmpBE.TmpTxJrnlBETaxBaseAmountServices   = tmpTaxJournalReport_BE.TaxBaseAmountServices;

        //TaxBoxInfo
        ledgerPurchaseJournalReportTmpBE.DeductibleAmountMSTBox59           = tmpTaxSumPurchLedger.DeductibleAmountMSTBox59;
        ledgerPurchaseJournalReportTmpBE.TaxBaseAmountMSTBox81              = tmpTaxSumPurchLedger.TaxBaseAmountMSTBox81;
        ledgerPurchaseJournalReportTmpBE.TaxBaseAmountMSTBox82              = tmpTaxSumPurchLedger.TaxBaseAmountMSTBox82;
        ledgerPurchaseJournalReportTmpBE.TaxBaseAmountMSTBox83              = tmpTaxSumPurchLedger.TaxBaseAmountMSTBox83;
        ledgerPurchaseJournalReportTmpBE.TaxExemptAmountMSTBox86            = tmpTaxSumPurchLedger.TaxExemptAmountMSTBox86;
        ledgerPurchaseJournalReportTmpBE.TaxExemptAmountMSTBox87            = tmpTaxSumPurchLedger.TaxExemptAmountMSTBox87;
        ledgerPurchaseJournalReportTmpBE.TaxExemptAmountMSTBox88            = tmpTaxSumPurchLedger.TaxExemptAmountMSTBox88;
        ledgerPurchaseJournalReportTmpBE.CreditNoteAmountMSTBox84           = tmpTaxSumPurchLedger.CreditNoteAmountMSTBox84;
        ledgerPurchaseJournalReportTmpBE.CreditNoteAmountMSTBox85           = tmpTaxSumPurchLedger.CreditNoteAmountMSTBox85;
        ledgerPurchaseJournalReportTmpBE.TaxAmountMSTBox55                  = tmpTaxSumPurchLedger.TaxAmountMSTBox55;
        ledgerPurchaseJournalReportTmpBE.TaxAmountMSTBox56                  = tmpTaxSumPurchLedger.TaxAmountMSTBox56;
        ledgerPurchaseJournalReportTmpBE.TaxAmountMSTBox57                  = tmpTaxSumPurchLedger.TaxAmountMSTBox57;
        ledgerPurchaseJournalReportTmpBE.TaxAmountMSTBox61                  = tmpTaxSumPurchLedger.TaxAmountMSTBox61;
        ledgerPurchaseJournalReportTmpBE.TaxAmountMSTBox62                  = tmpTaxSumPurchLedger.TaxAmountMSTBox62;
        ledgerPurchaseJournalReportTmpBE.TaxAmountMSTBox63                  = tmpTaxSumPurchLedger.TaxAmountMSTBox63;
        ledgerPurchaseJournalReportTmpBE.VchrTansDtvisibility               = vchrTansDtvisibility;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>LedgerPurchaseJournalReportTmpBE</c> temporary table.
    /// </summary>
    private void insertIntoTempTable()
    {
        this.initTempTable();
        ledgerPurchaseJournalReportTmpBE.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTaxJournalReport_BE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>TmpTaxJournalReport_BE</c> table if a voucher is in the <c>TaxTrans</c>
    /// table.
    /// </summary>
    /// <param name="_taxTrans">
    /// A <c>TaxTrans</c> table buffer.
    /// </param>
    private void insertTmpTaxJournalReport_BE(TaxTrans _taxTrans)
    {
        TaxAmount taxAmount;

        if (_taxTrans.Voucher)
        {
            tmpTaxJournalReport_BE.Voucher         = _taxTrans.Voucher;
            tmpTaxJournalReport_BE.Transdate       = _taxTrans.TransDate;
            tmpTaxJournalReport_BE.TaxBaseAMount   = _taxTrans.TaxBaseAmount;
            tmpTaxJournalReport_BE.TaxCode         = _taxTrans.TaxCode;
            tmpTaxJournalReport_BE.TaxAmountCharge = _taxTrans.TaxInCostPriceMST;

            tmpTaxJournalReport_BE.TaxAmountGoods    = 0;
            tmpTaxJournalReport_BE.TaxAmountInvest   = 0;
            tmpTaxJournalReport_BE.TaxAmountServices = 0;

            tmpTaxJournalReport_BE.TaxBaseAmountGoods    = 0;
            tmpTaxJournalReport_BE.TaxBaseAmountInvest   = 0;
            tmpTaxJournalReport_BE.TaxBaseAmountServices = 0;

            taxAmount = _taxTrans.TaxAmount - _taxTrans.TaxInCostPriceMST;

            switch (TaxItemGroupHeading::find(_taxTrans.TaxItemGroup).euSalesListType)
            {
                case EUSalesListType::Item:
                    tmpTaxJournalReport_BE.TaxAmountGoods    = taxAmount;
                    tmpTaxJournalReport_BE.TaxBaseAmountGoods = _taxTrans.TaxBaseAmount;
                    break;

                case EUSalesListType::Service:
                    tmpTaxJournalReport_BE.TaxAmountServices = taxAmount;
                    tmpTaxJournalReport_BE.TaxBaseAmountServices = _taxTrans.TaxBaseAmount;
                    break;

                case EUSalesListType::Investment:
                    tmpTaxJournalReport_BE.TaxAmountInvest   = taxAmount;
                     tmpTaxJournalReport_BE.TaxBaseAmountInvest = _taxTrans.TaxBaseAmount;
                     break;

                default:
                     break;
            }
            tmpTaxJournalReport_BE.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalPeriodFinalPrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>LedgerJournalPeriodFinalPrintBE</c> table if no record exists; otherwise,
    /// updates the table.
    /// </summary>
    private void journalPeriodFinalPrint()
    {
        LedgerJournalPeriodFinalPrintBE jpFinalPrintBE      = null;
        LedgerJournalPeriodFinalPrintBE jpFinalPrintBEPrev  = null;
        LedgerJournalTableTypeBE        lpJournal           = null;

        if (ledgerPostingJournalId)
        {
            jpFinalPrintBEPrev = LedgerJournalPeriodFinalPrintBE::findPrev(ledgerPostingJournalId,periodFromDate-1,false);

            if ((jpFinalPrintBEPrev) && (!newPageNum))
            {
                jpFinalPrintBE.NumberLastPage = jpFinalPrintBEPrev.NumberLastPage;
            }

            jpFinalPrintBE.LedgerPostingJournalId = ledgerPostingJournalId;
            jpFinalPrintBE.Name = LedgerPostingJournal::find(ledgerPostingJournalId).Name;
            jpFinalPrintBE.PeriodStart = periodFromDate;
            jpFinalPrintBE.PeriodEnd = periodToDate;
            jpFinalPrintBE.Compressed = compression;
            jpFinalPrintBE.insert();
        }
        else
        {
            while select LedgerPostingJournalId from lpJournal
                where lpJournal.JournalTypeBE == LedgerJournalTypeBE::Purchase
            {
                jpFinalPrintBEPrev = LedgerJournalPeriodFinalPrintBE::findPrev(lpJournal.LedgerPostingJournalId,periodFromDate-1,false);

                if ((jpFinalPrintBEPrev) && (!newPageNum))
                {
                    jpFinalPrintBE.NumberLastPage = jpFinalPrintBEPrev.NumberLastPage;
                }

                jpFinalPrintBE.LedgerPostingJournalId = lpJournal.LedgerPostingJournalId;
                jpFinalPrintBE.Name = LedgerPostingJournal::find(lpJournal.LedgerPostingJournalId).Name;
                jpFinalPrintBE.PeriodStart = periodFromDate;
                jpFinalPrintBE.PeriodEnd = periodToDate;
                jpFinalPrintBE.Compressed = compression;
                jpFinalPrintBE.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTaxBoxInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records in the <c>TmpTaxPurchLedger</c> table.
    /// </summary>
    private void printTaxBoxInfo()
    {
        tmpTaxSumPurchLedger = tmpTaxPurchLedger;

        select sum(TaxAmountMSTBox55), sum(TaxAmountMSTBox56),
               sum(TaxAmountMSTBox57), sum(DeductibleAmountMSTBox59),
               sum(TaxBaseAmountMSTBox81), sum(TaxBaseAmountMSTBox82),
               sum(TaxBaseAmountMSTBox83), sum(CreditNoteAmountMSTBox84),
               sum(CreditNoteAmountMSTBox85), sum(TaxAmountMSTBox63),
               sum(TaxAmountMSTBox61), sum(TaxAmountMSTBox62),
               sum(TaxExemptAmountMSTBox86), sum(TaxExemptAmountMSTBox87),
               sum(TaxExemptAmountMSTBox88)
            from tmpTaxPurchLedger;

        this.insertIntoTempTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTaxInfoPerVoucher</Name>
				<Source><![CDATA[
/// <summary>
    /// Calculates the <c>Amount</c> totals.
    /// </summary>
    private void printTaxInfoPerVoucher()
    {
        Counter  ctr = 0;
        TaxTrans taxTrans = null;
        boolean  firstLine = true;
        int      taxTotJourPage  = 1;

        prevVoucher ='';

        while select tmpTaxJournalReport_BE
            order by  Voucher, Transdate, TaxCode
        {
            if (firstLine)
            {
                firstLine     = false;
                prevVoucher   = tmpTaxJournalReport_BE.Voucher;
                prevTransdate = tmpTaxJournalReport_BE.Transdate;
            }
            else
            {
                if (tmpTaxJournalReport_BE.Voucher != prevVoucher && ctr != 0)
                {
                    prevVoucher          = tmpTaxJournalReport_BE.Voucher;
                    prevTransdate        = tmpTaxJournalReport_BE.Transdate;
                    vchrTansDtvisibility = 'true';
                }
                else
                {
                    vchrTansDtvisibility = 'false';
                }
            }

            select sum(TaxBaseAmount) from taxTrans
                index hint VoucherDateIdx
                group by Voucher, TransDate
                where taxTrans.Voucher   == tmpTaxJournalReport_BE.Voucher
                   && taxTrans.TransDate == tmpTaxJournalReport_BE.Transdate;

            isCreditNote = (taxTrans.TaxBaseAmount < 0);

            if (isCreditNote)
            {
                tmpTaxJournalReport_BE.IsCN                     = NoYes::Yes;
                tmpTaxJournalReport_BE.TaxBaseAmountCN          = tmpTaxJournalReport_BE.TaxBaseAMount;
                tmpTaxJournalReport_BE.TaxAmountGoodsCN         = tmpTaxJournalReport_BE.TaxAmountGoods;
                tmpTaxJournalReport_BE.TaxAmountInvestCN        = tmpTaxJournalReport_BE.TaxAmountInvest;
                tmpTaxJournalReport_BE.TaxAmountServicesCN      = tmpTaxJournalReport_BE.TaxAmountServices;
                tmpTaxJournalReport_BE.TaxBaseAmountServicesCN  = tmpTaxJournalReport_BE.TaxBaseAmountServices;
                tmpTaxJournalReport_BE.TaxBaseAmountInvestCN    = tmpTaxJournalReport_BE.TaxBaseAmountInvest;
                tmpTaxJournalReport_BE.TaxBaseAmountGoodsCN     = tmpTaxJournalReport_BE.TaxBaseAmountGoods;
            }
            else
            {
                tmpTaxJournalReport_BE.IsCN  = NoYes::No;
            }

            this.calcTaxTotals();

            if (#maxLinesOnPage - ctr <= 0)
            {
                taxTotJourPage++;
                ctr = 0;
            }
            tmpTaxJournalReport_BE.PageNum  = taxTotJourPage;
            tmpTaxJournalReport_BE.update();

            ctr++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTaxTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records of <c>TmpTaxTransTotalsBE</c> table and insert data into <c>LedgerPurchaseJournalReportTmpBE</c> temporary table
    /// </summary>
    private void printTaxTotals()
    {
        while select tmpTaxTransTotals_BE
        {
            ledgerPurchaseJournalReportTmpBE.clear();
            ledgerPurchaseJournalReportTmpBE.TaxTransBETotalTaxName             = tmpTaxTransTotals_BE.TaxName;
            ledgerPurchaseJournalReportTmpBE.TaxTransBETotalTaxCode             = tmpTaxTransTotals_BE.TaxCode;
            ledgerPurchaseJournalReportTmpBE.TaxTransBETotalTaxInvBase          = tmpTaxTransTotals_BE.TaxInvBase;
            ledgerPurchaseJournalReportTmpBE.TaxTransBETotalTaxInvAmount        = tmpTaxTransTotals_BE.TaxInvAmount;
            ledgerPurchaseJournalReportTmpBE.TaxTransBETotalTaxCnBase           = tmpTaxTransTotals_BE.TaxCnBase;
            ledgerPurchaseJournalReportTmpBE.TaxTransBETotalTaxCnAmount         = tmpTaxTransTotals_BE.TaxCnAmount;
            ledgerPurchaseJournalReportTmpBE.TaxTransBETotalTaxInvAmCharge      = tmpTaxTransTotals_BE.TaxInvAmCharge;
            ledgerPurchaseJournalReportTmpBE.TaxTransBETotalTaxCnAmCharge       = tmpTaxTransTotals_BE.TaxCnAmCharge;
            ledgerPurchaseJournalReportTmpBE.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
/// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method is called by SSRS at runtime.
    /// The method computes data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun        queryRun;
        RecId           calendarRecId;

        Query           query               = null;
        QueryBuildRange qbrPostingJournal   = null;
        QueryBuildRange qbrFromToDate       = null;
        Counter         ctr                 = 0;
        Counter         lineCnt             = 0;
        boolean         printInvoice        = false;

        LedgerPurchaseJournalReportCntrctBE contract = this.parmDataContract() as LedgerPurchaseJournalReportCntrctBE;

        fromDate                = contract.parmFromDate();
        toDate                  = contract.parmToDate();
        ledgerPostingJournalId  = contract.parmLedgerPostingJournalId();
        finalReporting          = contract.parmFinalReporting();
        compression             = contract.parmCompression();
        calendarRecId           = CompanyInfoHelper::fiscalCalendarRecId();

        periodFromDate          = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId,fromDate);
        periodToDate            = LedgerFiscalCalendar::findPeriodEndDateByDate(calendarRecId,toDate);
        periodClosingDate       = LedgerFiscalCalendar::findClosingPeriodStartDateByDate(calendarRecId,periodFromDate);
        periodOpeningDate       = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,periodFromDate);

        companyInfo             = CompanyInfo::find();
        companyEnterpriseNumber = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, periodToDate);
        companyName             = companyInfo.name();
        companyVATNum           = strIns(strIns(strKeep(companyInfo.CoRegNum, #CoRegNumDigits),'.',5),'.',9);
        query                   = this.parmQuery();

        tmpTaxJournalReport_BE.skipTTSCheck(true);
        tmpTaxTransTotals_BE.skipTTSCheck(true);
        tmpTaxPurchLedger.skipTTSCheck(true);

        if (ledgerPostingJournalId)
        {
            qbrPostingJournal = query.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, LedgerPostingJournal));
            qbrPostingJournal.value(ledgerPostingJournalId);
        }

        query.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(SysQuery::range(periodFromDate, periodToDate));
        query.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));

        if (finalReporting)
        {
            this.journalPeriodFinalPrint();
        }
        queryRun                = new QueryRun(query);

        while (queryRun.next())
        {
            generalJournalEntry             = queryRun.get(tableNum(GeneralJournalEntry));
            subledgerVoucherGeneralJournalEntry = queryRun.get(tableNum(SubledgerVoucherGeneralJournalEntry));
            generalJournalAccountEntry      = queryRun.get(tableNum(GeneralJournalAccountEntry));
            mainAccountLedgerDimensionView  = queryRun.get(tableNum(MainAccountLedgerDimensionView));

            // if new voucher block
            if (subledgerVoucherGeneralJournalEntry.Voucher != prevVoucher)
            {
                lineCnt = 0;
                firstVoucherLine = false;

                // if not first record
                if (ctr != 0)
                {
                    // print date/invoice line
                    ctr++;
                }
                currencyCode = generalJournalAccountEntry.TransactionCurrencyCode;
                printInvoice = true;
                prevVoucher = subledgerVoucherGeneralJournalEntry.Voucher;
                prevTransdate = subledgerVoucherGeneralJournalEntry.AccountingDate;
            }

            // Start new page if no more empty lines left (end of page)
            if (#maxLinesOnPage - ctr <= 0)
            {
                ctr = 0;
            }

            //if it's a line with posting type VendBalance
            if (generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance)
            {
                currencyCode = generalJournalAccountEntry.TransactionCurrencyCode;
            }

            ctr++;
            lineCnt++;
            if (lineCnt == 1)
            {
                firstVoucherLine = true;
            }

            //print invoice number on second line of each voucher block
            if ((printInvoice) && (lineCnt == 1))
            {
                printInvoice = false;
            }
            this.insertIntoTempTable();

            //update debit and credit totals
            this.calcDebCredTotals();
        }
        //close journal report
        if (ctr != 0)
        {
            this.closeJournalReport();
        }
        else
        {
            ledgerPurchaseJournalReportTmpBE.clear();
            ledgerPurchaseJournalReportTmpBE.CompanyEnterpriseNumber = companyEnterpriseNumber;
            ledgerPurchaseJournalReportTmpBE.CompanyVATNum = companyVATNum;
            ledgerPurchaseJournalReportTmpBE.CompanyName = companyName;
            ledgerPurchaseJournalReportTmpBE.PeriodFromDate = periodOpeningDate;
            ledgerPurchaseJournalReportTmpBE.PeriodToDate = periodClosingDate;
            ledgerPurchaseJournalReportTmpBE.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBoxCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates Belgian calculations.
    /// </summary>
    /// <remarks>
    /// There has to be a difference made between an invoice and a credit note. An invoice must be handled
    /// in complete and not line per line because an invoice can have lines with negative amounts.
    /// Partially deducted VAT has to be considered.
    /// </remarks>
    protected void taxBoxCalc()
    {
        TaxTrans            taxTrans;
        TaxTrans            taxTransTotal;
        VendTrans           vendTrans = null;
        TaxTable            taxTable = null;
        Voucher             oldVoucher = '';
        TransDate           oldTransDate = mkDate(0,0,0);
        TmpTaxPurchLedger   tmpTaxPurchLedgerLocal = null;
        boolean             isInvoice = false;
        AmountMST           amountInclTax = 0;

        while select sum(TaxBaseAmount), sum(TaxAmount) from taxTransTotal
        group by Voucher, TransDate, TaxDirection
        where taxTransTotal.TransDate >= fromDate &&
              taxTransTotal.TransDate <= toDate   &&
              taxTransTotal.TaxOrigin != TaxOrigin::TaxReporting &&
              taxTransTotal.TaxRepCounter == TaxRepVersion::Original &&
              (taxTransTotal.TaxDirection == TaxDirection::IncomingTax ||
              (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled() &&
              taxTransTotal.TaxDirection == TaxDirection::IncomingTax_W) ||
              taxTransTotal.TaxDirection == TaxDirection::UseTax ||
              taxTransTotal.TaxDirection == TaxDirection::TaxExemptPurchase)
        {
            if (ledgerPostingJournalId ==  this.findLedgerPostingJournalId(taxTransTotal.TransDate, taxTransTotal.Voucher))
            {
                if (taxTransTotal.TaxBaseAmount > 0)
                {
                    isInvoice = true;
                }
                else
                {
                     isInvoice = (taxTransTotal.TaxBaseAmount == 0 && taxTransTotal.TaxAmount >= 0) ? true : false;
                }
                while select sum(TaxBaseAmount), sum(TaxAmount), sum(TaxInCostPriceMST)
                from taxTrans
                group by Voucher, TransDate, TaxCode, TaxDirection
                where taxTrans.Voucher      == taxTransTotal.Voucher &&
                      taxTrans.TransDate    == taxTransTotal.TransDate &&
                      taxTrans.TaxDirection == taxTransTotal.TaxDirection &&
                      taxTrans.TaxRepCounter == taxTransTotal.TaxRepCounter
                {
                    amountInclTax = 0;
                    tmpTaxPurchLedgerLocal.clear();
                    taxTable = TaxTable::find(taxTrans.TaxCode);
                    if (taxTrans.Voucher != oldVoucher || taxTrans.TransDate != oldTransDate)
                    {
                        generalJournalEntry  = this.findVoucherDate(taxTrans.Voucher, taxTrans.TransDate);
                        vendTrans = VendTrans::findVoucherDate(taxTrans.Voucher, taxTrans.TransDate);
                        if (vendTrans)
                        {
                            tmpTaxPurchLedgerLocal.VendAccount = vendTrans.AccountNum;
                            tmpTaxPurchLedgerLocal.AmountMSTInclTax = vendTrans.AmountMST;
                        }
                        oldVoucher   = taxTrans.Voucher;
                        oldTransDate = taxTrans.TransDate;
                    }
                    tmpTaxPurchLedgerLocal.LedgerPostingJournalId = generalJournalEntry.LedgerPostingJournal;
                    tmpTaxPurchLedgerLocal.Voucher = taxTrans.Voucher;
                    tmpTaxPurchLedgerLocal.TransDate = taxTrans.TransDate;
                    if (taxTrans.TaxDirection == TaxDirection::IncomingTax || taxTrans.TaxDirection == TaxDirection::IncomingTax_W) // Domestic purchase
                    {
                        if (isInvoice)
                        {                        
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldTaxIncoming,(taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST)) ;
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseIncoming, (taxTrans.TaxBaseAmount + taxTrans.TaxInCostPriceMST));                            
                        }
                        else // creditNote
                        {
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseIncomingCreditNote, taxTrans.TaxBaseAmount, taxTrans.TaxInCostPriceMST);
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldTaxIncomingCreditNote, (taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST));                            
                        }
                        amountInclTax += (taxTrans.TaxBaseAmount + taxTrans.TaxAmount);
                    }
                    if (taxTrans.TaxDirection == TaxDirection::UseTax)  // Import from EU country/region or when an import license exist
                    {
                        if (isInvoice)
                        {
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseUseTax, taxTrans.TaxBaseAmount, taxTrans.TaxInCostPriceMST);
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseUseTaxOffset, taxTrans.TaxBaseAmount, taxTrans.TaxInCostPriceMST);
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldUseTax, taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldUseTaxOffset, taxTrans.TaxAmount );                            
                        }
                        else // creditNote
                        {
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseUseTaxCreditNote, taxTrans.TaxBaseAmount, taxTrans.TaxInCostPriceMST);
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseUseTaxOffsetCreditNote, taxTrans.TaxBaseAmount, taxTrans.TaxInCostPriceMST);
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldUseTaxCreditNote, taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldUseTaxOffsetCreditNote, taxTrans.TaxAmount);                            
                        }
                        amountInclTax += taxTrans.TaxBaseAmount;
                    }
                    if (taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase)  // Import
                    {
                        if (isInvoice)
                        {
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldTaxFreeBuy, taxTrans.TaxBaseAmount);
                        }
                        else // creditNote
                        {
                            tmpTaxPurchLedgerLocal = this.addTaxBoxAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldTaxFreeBuyCreditNote, taxTrans.TaxBaseAmount);
                        }
                        amountInclTax += taxTrans.TaxBaseAmount;
                    }

                    tmpTaxPurchLedgerLocal.InvoiceId        =  vendTrans.Invoice;
                    tmpTaxPurchLedgerLocal.AmountMSTInclTax = amountInclTax;
                    this.insertInTmpTaxPurchLedger(tmpTaxPurchLedgerLocal);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalPeriodFinalPrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>LedgerJournalPeriodFinalPrintBE</c> record based on UI parameter values.
    /// </summary>
    private void updateJournalPeriodFinalPrint()
    {
        LedgerJournalPeriodFinalPrintBE journalPeriodFinalPrintBe;

        ttsbegin;
        journalPeriodFinalPrintBe = LedgerJournalPeriodFinalPrintBE::findByJournalIdPeriod(
            ledgerPostingJournalId, periodFromDate, periodToDate, true);

        if (journalPeriodFinalPrintBe)
        {
            journalPeriodFinalPrintBe.DebitTotal     = totDeb;
            journalPeriodFinalPrintBe.CreditTotal    = totCred;
            journalPeriodFinalPrintBe.Compressed     = compression;
            journalPeriodFinalPrintBe.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDebCredTotals</Name>
				<Source><![CDATA[
    private void calcDebCredTotals()
    {
        if (generalJournalAccountEntry.AccountingCurrencyAmount > 0)
        {
            totDeb += generalJournalAccountEntry.AccountingCurrencyAmount;
        }
        else
        {
            totCred += abs(generalJournalAccountEntry.AccountingCurrencyAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTaxJournalReport_BE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>TmpTaxJournalReport_BE</c> table.
    /// </summary>
    /// <returns>
    ///    A populated instance of the <c>TmpTaxJournalReport_BE</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpTaxJournalReport_BE))
    ]
    public TmpTaxJournalReport_BE getTmpTaxJournalReport_BE()
    {
        select tmpTaxJournalReport_BE;
        return tmpTaxJournalReport_BE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendTransByVoucherDate</Name>
				<Source><![CDATA[
    private VendTrans findVendTransByVoucherDate(Voucher _voucher, TransDate _transDate)
    {
        VendTrans vendTrans = VendTrans::findVoucherDate(_voucher, _transDate);

        if (!vendTrans)
        {
            LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
            select firstOnly FromVoucher, FromDate from ledgerJournalVoucherChanged
                where ledgerJournalVoucherChanged.ToVoucher == _voucher
                    && ledgerJournalVoucherChanged.ToDate == _transDate;

            if (ledgerJournalVoucherChanged)
            {
                vendTrans = VendTrans::findVoucherDate(ledgerJournalVoucherChanged.FromVoucher, ledgerJournalVoucherChanged.FromDate);
            }
        }

        return vendTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>