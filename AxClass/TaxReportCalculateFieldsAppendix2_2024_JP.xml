<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportCalculateFieldsAppendix2_2024_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class TaxReportCalculateFieldsAppendix2_2024_JP extends TaxReportCalculateFieldsAppendix2_JP
{
    private const container Item11Fields = [#field_209, #field_8209];
    private const container Item11CreditFields = [#field_9209, #field_7209];
    private const container Item12Fields = [#field_8209];
    private const container Item12CreditFields = [#field_7209];

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTaxValueType</Name>
				<Source><![CDATA[
    protected void calculateTaxValueType(TaxValue _taxValue, TaxType_JP _taxType, TaxReportAmounts_JP _amounts)
    {
        LedgerConsumptionTaxCalcTrans_JP taxCalcTrans = this.inititializeTaxCalcTrans(_taxValue, _taxType);

        if (_taxValue)
        {
            this.calculateTaxReportLine2024(taxCalcTrans, _amounts);
        }
        else
        {
            this.calculateTaxFreeReportLine(taxCalcTrans, _amounts);
        }

        taxCalcTrans.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxReportLine2024</Name>
				<Source><![CDATA[
    private void calculateTaxReportLine2024(LedgerConsumptionTaxCalcTrans_JP _taxCalcTrans, TaxReportAmounts_JP _amounts)
    {
        _taxCalcTrans.RatioOfTaxableSales = ratioOfTaxableSales;

        _taxCalcTrans.CalcItem1 = trunc(_amounts.amount1() - _amounts.amount9001());
        _taxCalcTrans.CalcItem4 = _taxCalcTrans.CalcItem1;
        _taxCalcTrans.CalcItem5 = _taxCalcTrans.CalcItem4;
        _taxCalcTrans.CalcItem7 = _taxCalcTrans.CalcItem5;
        _taxCalcTrans.CalcItem8 = ratioOfTaxableSales;

        _taxCalcTrans.CalcItem9 = trunc(_amounts.sumFields(Item9Fields) - _amounts.sumFields(Item9CreditFields));
        _taxCalcTrans.CalcItem10 = trunc(_amounts.sumNationalFields(Item10Fields) - _amounts.sumNationalFields(Item10CreditFields));

        _taxCalcTrans.CalcItem11 = trunc(_amounts.sumFields(Item11Fields) - _amounts.sumFields(Item11CreditFields));
        _taxCalcTrans.CalcItem12 = trunc(_amounts.sumNationalFields(Item12Fields) - _amounts.sumNationalFields(Item12CreditFields));

        if (_taxCalcTrans.RatioOfTaxableSales < RatioTreshold)
        {
            if (_taxCalcTrans.TaxValue == 10)
            {
                _taxCalcTrans.CalcItem13 = trunc(_amounts.amount12() - _amounts.amount9012());
                _taxCalcTrans.CalcItem14 = trunc(_taxCalcTrans.CalcItem13 * 7.8 / 100);
            }
            else if (_taxCalcTrans.TaxValue == 8 && _taxCalcTrans.TaxType != TaxType_JP::Reduced)
            {
                _taxCalcTrans.CalcItem13 = trunc(_amounts.amount12() - _amounts.amount9012());
                _taxCalcTrans.CalcItem14 = trunc(_taxCalcTrans.CalcItem13 * 6.3 / 100);
            }
        }

        if (_taxCalcTrans.TaxValue == 10 || _taxCalcTrans.TaxValue == 8)
        {
            _taxCalcTrans.CalcItem15 = trunc(_amounts.nationalAmount8210() - _amounts.nationalAmount7210());
        }

        _taxCalcTrans.CalcItem16 = trunc(_amounts.nationalAmount8014() - _amounts.nationalAmount7014());
        _taxCalcTrans.CalcItem17 = _taxCalcTrans.CalcItem10 + _taxCalcTrans.CalcItem14 + _taxCalcTrans.CalcItem15 + _taxCalcTrans.CalcItem16;

        if (compensationAmount <= SalesTreshold || _taxCalcTrans.RatioOfTaxableSales >= RatioTreshold)
        {
            _taxCalcTrans.CalcItem18 = _taxCalcTrans.CalcItem17;
            _taxCalcTrans.CalcItem26 = _taxCalcTrans.CalcItem18;
        }
        else if (_taxCalcTrans.CalcMethod == CalcMethod_JP::IndividualMethod)
        {
            _taxCalcTrans.CalcItem19 = trunc(_amounts.nationalAmount8208() - _amounts.nationalAmount7208());
            _taxCalcTrans.CalcItem20 = trunc(_amounts.nationalAmount8215() - _amounts.nationalAmount7215());

            _taxCalcTrans.CalcItem21 = _taxCalcTrans.CalcItem19 + trunc(_taxCalcTrans.CalcItem20 * _taxCalcTrans.RatioOfTaxableSales);
            _taxCalcTrans.CalcItem26 = _taxCalcTrans.CalcItem21;
        }
        else
        {
            _taxCalcTrans.CalcItem22 = trunc(_taxCalcTrans.CalcItem17 * _taxCalcTrans.RatioOfTaxableSales);
            _taxCalcTrans.CalcItem26 = _taxCalcTrans.CalcItem22;
        }

        _taxCalcTrans.CalcItem23 = trunc(_amounts.nationalAmount8221() - _amounts.nationalAmount7221());
        _taxCalcTrans.CalcItem24 = trunc(_amounts.nationalAmount8222() - _amounts.nationalAmount7222());
        _taxCalcTrans.CalcItem25 = trunc(_amounts.nationalAmount8223());
        _taxCalcTrans.CalcItem26 += _taxCalcTrans.CalcItem23 + _taxCalcTrans.CalcItem24 + _taxCalcTrans.CalcItem25;

        if (_taxCalcTrans.CalcItem26 < 0)
        {
            _taxCalcTrans.CalcItem27 = -_taxCalcTrans.CalcItem26;
            _taxCalcTrans.CalcItem26 = 0;
        }

        Amount amount8310 = _amounts.nationalAmount8310();

        if (!amount8310)
        {
            amount8310 = TaxReportCalculateFields_JP::calculateNationalTaxAmount(
                _taxCalcTrans.TaxValue,
                _taxCalcTrans.TaxType, 
                -this.getTaxAmountForMainAccount(collectedBadDebtAccountNum, _taxCalcTrans.TaxValue, _taxCalcTrans.TaxType));
        }

        _taxCalcTrans.CalcItem28 = trunc(amount8310);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    internal static TaxReportCalculateFieldsAppendix2_2024_JP newFromParameters(
        TaxPeriod _taxPeriod,
        FromDate _fromDate,
        ToDate _toDate,
        TypeOfDeclaration_JP _typeOfDeclaration,
        boolean _amendment,
        Map _taxTypeValues,
        CalcMethod_JP _calcMethod,
        TaxReportDataLayout_JP _dataLayout)
    {
        if (!_taxTypeValues)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        TaxReportCalculateFieldsAppendix2_2024_JP instance = new TaxReportCalculateFieldsAppendix2_2024_JP();

        instance.taxPeriod = _taxPeriod;
        instance.fromDate = _fromDate;
        instance.toDate = _toDate;
        instance.typeOfDeclaration = _typeOfDeclaration;
        instance.amendment = _amendment;
        instance.taxTypeValues = _taxTypeValues;
        instance.calcMethod = _calcMethod;
        instance.dataLayout = _dataLayout;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    internal static void calculate(
        TaxPeriod _taxPeriod,
        FromDate _fromDate,
        ToDate _toDate,
        TypeOfDeclaration_JP _typeOfDeclaration,
        boolean _amendment,
        Map _taxTypeValues,
        CalcMethod_JP _calcMethod,
        TaxReportDataLayout_JP _dataLayout)
    {
        TaxReportCalculateFieldsAppendix2_2024_JP::newFromParameters(
            _taxPeriod,
            _fromDate,
            _toDate,
            _typeOfDeclaration,
            _amendment,
            _taxTypeValues,
            _calcMethod,
            _dataLayout).calculateTaxReportSheet();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>