<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostObjectWithLowestKPICacheEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostObjectWithLowestKPICacheEventHandler</c> class handles events related to data set caching for inventory turn
/// and inventory accuracy KPI lists on the cost analysis workspace.
/// </summary>
public final class CostObjectWithLowestKPICacheEventHandler
{
    FormRun                     formRun;
    TableName                   dataSetTableName;

    SysIDataConsumer            dataConsumer;
    SysIDataCacheContextManager cacheContextManager;
    SysIDataCacheContext        cacheContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>onCostMonthlyInventoryCostObjectCacheUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the updates of the costing monthly inventory cost object cache and invalidates the inventory KPIs
    /// data set caches affected by the update.
    /// </summary>
    /// <param name = "_transDate">The date the cache is updated after.</param>
    [SubscribesTo(tablestr(CostMonthlyInventoryCostObjectCache), staticDelegateStr(CostMonthlyInventoryCostObjectCache, cacheUpdated))]
    public static void onCostMonthlyInventoryCostObjectCacheUpdate(TransDate _transDate)
    {
        if (CostObjectWithLowestKPICacheEventHandler::mustInvalidateCaches(_transDate))
        {
            CostObjectWithLowestKPICacheEventHandler::invalidateCache(_transDate, classStr(CostObjectWithLowestTurnDataSet));
            CostObjectWithLowestKPICacheEventHandler::invalidateCache(_transDate, classStr(CostObjectWithLowestAccuracyDataSet));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInvalidateCaches</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the caches should be invalidated, i.e. whether the date corresponds to the end of
    /// the current period or the end of the previous period.
    /// </summary>
    /// <param name = "_transDate">The date at which to invalidate the caches.</param>
    /// <returns>true if the caches must be invalidated; otherwise, false.</returns>
    private static boolean mustInvalidateCaches(TransDate _transDate)
    {
        date endDateOfCurrentPeriod     = dateEndMth(DateTimeUtil::getToday(DateTimeUtil::getCompanyTimeZone()));
        date endDateOfPreviousPeriod    = dateStartMth(DateTimeUtil::getToday(DateTimeUtil::getCompanyTimeZone()))-1;

        return (_transDate == endDateOfCurrentPeriod || _transDate == endDateOfPreviousPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDummyFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a dummy filter with a minimum balance and a date.
    /// </summary>
    /// <returns>The created filter.</returns>
    /// <remarks>
    /// This dummy filter can be used to create a data context with a filter structure similar to the one
    /// used by the filter defined by the inventory KPIs form parts.
    /// </remarks>
    private static SysIFilter createDummyFilter()
    {
        SysIFilter filter = SysFilterFactory::createEmptyFilter();

        SysIFilterValue filterValue = SysFilterValueFactory::createFilterValueForInteger(0, extendedTypeNum(CostObjectBalanceEnding));
        filter.addItem(filterValue, SysFilterOperator::GreaterEqual, SysFilterValueResolutionMethod::None);

        filterValue = SysFilterValueFactory::createFilterValueForDate(dateNull(), extendedTypeNum(TransDate));
        filter.addItem(filterValue, SysFilterOperator::Equal, SysFilterValueResolutionMethod::None);

        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastCacheUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last update of the associated inventory KPI cache for a specific date.
    /// </summary>
    /// <param name = "_transDate">
    /// The date for which to check the last update.
    /// </param>
    /// <returns>The last update of the monthly cache.</returns>
    public SysDataCacheLastUpdate getLastCacheUpdate()
    {
        this.initializeConsumerAndCacheContext();

        return cacheContextManager.getLastUpdate(cacheContext.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeConsumerAndCacheContext</Name>
				<Source><![CDATA[
    private void initializeConsumerAndCacheContext()
    {
        SysIDataSet                         dataSet = SysDataSetFactory::newFromDataSetTable(dataSetTableName);

        dataConsumer = SysDataConsumerFactory::newFromType(SysDataConsumerTypeEnum::DataSet, dataSet.parmIdentifier());

        SysIDataCacheConfigurationManager   manager = SysDataCacheConfigurationManagerFactory::newFromType(dataConsumer.parmType());
        SysIDataCacheConfiguration          cacheConfiguration = manager.getConfigurationForConsumer(dataConsumer.parmIdentifier());
        SysIDataContext                     dataContext = SysDataContextBuilder::newContextWithFilter(formRun.parmSourceFilter(), cacheConfiguration.parmFilteringEnabled());

        cacheContextManager = SysDataCacheContextManagerFactory::newManager();
        cacheContext = cacheContextManager.findOrCreateCacheContext(dataConsumer.parmType(), dataConsumer.parmIdentifier(), dataContext.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidateCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invalidates all data cache contexts in an inventory KPIs data set cache for the specified date.
    /// </summary>
    /// <param name = "_transDate">The date for which to invalidates the data cache contexts.</param>
    /// <param name = "_dataSetIdentifier">The identifier of the inventory KPI data set for which to invalidate the data cache contexts.</param>
    private static void invalidateCache(TransDate _transDate, SysDataConsumerIdentifier _dataSetIdentifier)
    {
        SysIDataConsumer                        dataConsumer = SysDataConsumerFactory::newFromType(SysDataConsumerTypeEnum::DataSet, _dataSetIdentifier);
        SysIDataCacheConfigurationManager       manager = SysDataCacheConfigurationManagerFactory::newFromType(dataConsumer.parmType());
        SysIDataCacheConfiguration              cacheConfiguration = manager.getConfigurationForConsumer(dataConsumer.parmIdentifier());
        SysIDataContext                         dataContext = SysDataContextBuilder::newContextWithFilter(CostObjectWithLowestKPICacheEventHandler::createDummyFilter(), cacheConfiguration.parmFilteringEnabled());
        SysIDataCacheContextStructureManager    cacheContextStructureManager = SysDataCacheContextStructureManagerFactory::newManager();
        SysDataCacheContextStructureId          cacheContextStructureId = cacheContextStructureManager.getCacheContextStructureId(dataConsumer.parmType(), dataConsumer.parmIdentifier(), dataContext.parmStructure().parmId());
        SysIDataCacheContextManager             cacheContextManager = SysDataCacheContextManagerFactory::newManager();

        CostObjectWithLowestKPICacheEventHandler::invalidateCacheContextsForDateAndStructure(_transDate, cacheContextStructureId, cacheContextManager);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidateCacheContextsForDateAndStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invalidate data cache contexts for the specified date and cache context structure.
    /// </summary>
    /// <param name = "_transDate">
    /// The date for which to invalidate the data cache contexts.
    /// </param>
    /// <param name="_structureId">
    /// The <c>SysDataCacheContextStructureId</c> value to retrieve the cache contexts for.
    /// </param>
    /// <param name="_cacheContextManager">
    /// The data cache context manager that will be used to invalidate the cache contexts.
    /// </param>
    private static void invalidateCacheContextsForDateAndStructure(
        TransDate                       _transDate,
        SysDataCacheContextStructureId  _structureId,
        SysIDataCacheContextManager     _cacheContextManager)
    {
        SysIDataCacheContextMetadata    cacheContextMetadata = SysDataCacheContextMetadataFactory::newMetadata();
        DictTable                       dictTable = new DictTable(cacheContextMetadata.parmTypeId());
        Common                          cacheContextTable = dictTable.makeRecord();

        ttsbegin;

        while select forupdate cacheContextTable
            where cacheContextTable.(cacheContextMetadata.parmCacheContextStructureId()) == _structureId
        {
            SysDataConsumerTypeEnum   consumerType = cacheContextTable.(cacheContextMetadata.parmConsumerType());
            SysDataConsumerIdentifier consumer = cacheContextTable.(cacheContextMetadata.parmConsumer());
            SysDataContextId dataContextId = cacheContextTable.(cacheContextMetadata.parmDataContextId());
            SysDataCacheContextId cacheContextId = cacheContextTable.(cacheContextMetadata.parmId());
            SysDataCacheContextStructureId cacheContextStructureId = cacheContextTable.(cacheContextMetadata.parmCacheContextStructureId());

            SysIDataCacheContext cacheContext = SysDataCacheContextFactory::newFromParameters(consumerType,
                                                                                              consumer,
                                                                                              dataContextId,
                                                                                              cacheContextId,
                                                                                              cacheContextStructureId);

            if (CostObjectWithLowestKPICacheEventHandler::isCacheContextContainingDate(cacheContext, _transDate))
            {
                cacheContextTable.(cacheContextMetadata.parmState()) = SysDataCacheContextState::Active;
                cacheContextTable.update();

                _cacheContextManager.setLastUpdate(cacheContext.parmCacheContextStructureId(), cacheContext.parmId(), DateTimeUtil::minValue());
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCacheContextContainingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified date is part of the provided data cache context.
    /// </summary>
    /// <param name = "_cacheContext">The data cache context to look into.</param>
    /// <param name = "_transDate">The date to match.</param>
    /// <returns>true if the data cache context contains a filter on the specified date; otherwise, false.</returns>
    private static boolean isCacheContextContainingDate(SysIDataCacheContext _cacheContext, TransDate _transDate)
    {
        boolean result = false;

        SysDataContextValueMapEnumerator enumerator = _cacheContext.parmContextValueMapEnumerator();

        while (enumerator.moveNext())
        {
            SysIDataContextValue currentValue = enumerator.currentValue();

            if (currentValue.parmValueType().parmType() == SysDataContextValueTypeEnum::Filter)
            {
                SysDataContextValueFilter dataContextValueFilter = currentValue as SysDataContextValueFilter;

                if (dataContextValueFilter)
                {
                    result = (SysFilterValueHelper::getFirstValueRecordFromFilterForType(dataContextValueFilter.parmSourceFilter(), SysFilterValueTypeEnum::Date, extendedTypeNum(TransDate))
                                == _transDate);
                }
                break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostObjectWithLowestKPICacheEventHandler construct()
    {
        return new CostObjectWithLowestKPICacheEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>CostObjectWithLowestKPICacheEventHandler</c> event handler class from a <c>FormRun</c> object and
    /// a data set.
    /// </summary>
    /// <param name = "_formRun">The form instance for which to create the event handler.</param>
    /// <param name = "_dataSetTableName">The name of the data set table for which to create the event handler.</param>
    /// <returns>A new <c>CostObjectWithLowestKPICacheEventHandler</c> object.</returns>
    public static CostObjectWithLowestKPICacheEventHandler newFromFormRun(FormRun _formRun, TableName _dataSetTableName)
    {
        CostObjectWithLowestKPICacheEventHandler CostObjectWithLowestKPICacheEventHandler = CostObjectWithLowestKPICacheEventHandler::construct();
        CostObjectWithLowestKPICacheEventHandler.initialize(_formRun, _dataSetTableName);

        return CostObjectWithLowestKPICacheEventHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(FormRun _formRun, TableName _dataSetTableName)
    {
        formRun = _formRun;
        dataSetTableName = _dataSetTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDataSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the data set cache on a data source event and handles the data source filtering.
    /// </summary>
    /// <param name="sender">
    /// The form datasource that triggered the event.
    /// </param>
    /// <param name="e">
    /// The detailed event args for the event.
    /// </param>
    /// <remarks>
    /// This method refreshes the data set manually since the high data set refresh threshold prevents
    /// the framework to do it by itself.
    /// </remarks>
    public void prepareDataSet(FormDataSource sender, FormDataSourceEventArgs e)
    {
        this.initializeConsumerAndCacheContext();

        SysIDataCacheManager cacheManager = SysDataCacheManagerFactory::newFromType(dataConsumer.parmType(), dataConsumer.parmIdentifier());

        if (!cacheManager.isCacheValid(cacheContextManager.getLastUpdate(cacheContext.parmId())))
        {
            SysDataCacheInstrumentation::cacheMissEvent(dataConsumer.parmType(), dataConsumer.parmIdentifier());
            cacheManager.forceRefreshCacheNoFetch(cacheContext);
        }

        formRun.parmDataSetFormQueryEventHandler().prepareDataSet(sender, e);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>