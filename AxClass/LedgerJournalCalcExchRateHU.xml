<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCalcExchRateHU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class calculates the daily or average exchange rates for HU
/// journal lines based on the posted transactions and the already
/// existing ones in the journal.
/// </summary>
class LedgerJournalCalcExchRateHU extends RunBaseBatch implements BatchRetryable
{
    private const str FeatureReference = 'HU-00001';

    LedgerDimensionAccount outflowLedgerAccount;
    LedgerDimensionAccount outflowAccount;
    LedgerJournalACType outflowType;
    TransDate fromDate;
    HuLedgerJournalExchRateCalculation calcMethod;
    LedgerJournalId journalNum;
    QueryRun queryRun;
    DialogField dialogFromDate, dialogCalcMethod;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        fromDate,
        calcMethod,
        journalNum
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>averageMstExchRate</Name>
				<Source><![CDATA[
    private ExchRate averageMstExchRate(LedgerJournalTrans _ledgerJournalTrans)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        MainAccountRecId outflowMainAccountRecId = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(outflowLedgerAccount);

        select sum(AccountingCurrencyAmount), sum(TransactionCurrencyAmount) from generalJournalAccountEntry
            where generalJournalAccountEntry.MainAccount == outflowMainAccountRecId
                && generalJournalAccountEntry.TransactionCurrencyCode == _ledgerJournalTrans.CurrencyCode
        join RecId from generalJournalEntry
            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                && generalJournalEntry.AccountingDate >= fromDate
                && generalJournalEntry.AccountingDate <= _ledgerJournalTrans.TransDate;

        AmountCur sumOutflowLedgerAmountCur;
        AmountMST sumOutflowLedgerAmountMst;
        LedgerJournalTrans ledgerJournalTrans;
        while select ledgerJournalTrans
            order by TransDate, RecId
            where ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum
                && ledgerJournalTrans.CurrencyCode == _ledgerJournalTrans.CurrencyCode
                && ((ledgerJournalTrans.AccountType == outflowType && ledgerJournalTrans.LedgerDimension == outflowAccount)
                    || (ledgerJournalTrans.OffsetAccountType == outflowType && ledgerJournalTrans.OffsetLedgerDimension == outflowAccount))
                && ledgerJournalTrans.TransDate <= _ledgerJournalTrans.TransDate
        {
            if (ledgerJournalTrans.TransDate != _ledgerJournalTrans.TransDate
                || ledgerJournalTrans.RecId < _ledgerJournalTrans.RecId)
            {
                sumOutflowLedgerAmountCur += this.journalAccountAmountCur(ledgerJournalTrans, outflowAccount);
                sumOutflowLedgerAmountMst += CurrencyExchangeHelper::amountCur2MST(this.journalAccountAmountCur(ledgerJournalTrans, outflowAccount), ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.ExchRate, ledgerJournalTrans.TransDate, ledgerJournalTrans.ExchRateSecond, ledgerJournalTrans.Triangulation);
            }
        }

        sumOutflowLedgerAmountMst += generalJournalAccountEntry.AccountingCurrencyAmount;
        sumOutflowLedgerAmountCur += generalJournalAccountEntry.TransactionCurrencyAmount;

        if (sumOutflowLedgerAmountMst * sumOutflowLedgerAmountCur < 0
            || (sumOutflowLedgerAmountMst * sumOutflowLedgerAmountCur == 0
                && sumOutflowLedgerAmountMst + sumOutflowLedgerAmountCur != 0))
        {
            error(strfmt(
                "@GLS111027",
                _ledgerJournalTrans.Voucher,
                LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(outflowLedgerAccount),
                this.journalAccountAmountCur(_ledgerJournalTrans, outflowAccount),
                _ledgerJournalTrans.CurrencyCode,
                _ledgerJournalTrans.ExchRate));

            error(strfmt(
                "@GLS111028",
                sumOutflowLedgerAmountCur,
                _ledgerJournalTrans.CurrencyCode,
                sumOutflowLedgerAmountMst));

            info("@GLS107754");
        }

        return sumOutflowLedgerAmountCur ? sumOutflowLedgerAmountMst * 100 / sumOutflowLedgerAmountCur : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    private boolean check()
    {
        if (LedgerJournalTable::find(journalNum).Posted)
        {
            return checkFailed("@SYS21497");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogFromDate = dialog.addFieldValue(extendedTypeStr(TransDate), fromDate, "@SYS5209");
        dialogCalcMethod = dialog.addFieldValue(enumStr(HuLedgerJournalExchRateCalculation), calcMethod);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            fromDate = dialogFromDate.value();
            calcMethod = dialogCalcMethod.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default parameters, which is query in this case.
    /// </summary>
    public void initParmDefault()
    {
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tablenum(LedgerJournalTrans));
        qbds.update(true);
        qbds.orderMode(OrderMode::OrderBy);
        qbds.addSortField(fieldnum(LedgerJournalTrans, TransDate));
        qbds.addSortField(fieldnum(LedgerJournalTrans, RecId));
        qbds.clearRanges();

        findOrCreateRange_W(qbds, fieldnum(LedgerJournalTrans, JournalNum), journalNum).status(RangeStatus::Locked);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalAccountAmountCur</Name>
				<Source><![CDATA[
    private AmountCur journalAccountAmountCur(LedgerJournalTrans _ledgerJournalTrans, LedgerDimensionAccount _ledgerAccount)
    {
        AmountCur amountCur;

        if (_ledgerJournalTrans.LedgerDimension == _ledgerAccount)
        {
            amountCur = _ledgerJournalTrans.AmountCurDebit - _ledgerJournalTrans.AmountCurCredit;
        }
        else if (_ledgerJournalTrans.OffsetLedgerDimension == _ledgerAccount)
        {
            amountCur = _ledgerJournalTrans.AmountCurCredit - _ledgerJournalTrans.AmountCurDebit;
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCalcAverageExchRate</Name>
				<Source><![CDATA[
    private void journalCalcAverageExchRate()
    {
        LedgerJournalTrans ledgerJournalTrans;
        ExchRate oldExchRate;

        ttsbegin;

        while (queryRun.next())
        {
            ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));

            this.setOutflow(ledgerJournalTrans);

            if (ledgerJournalTrans.CurrencyCode != CompanyInfoHelper::standardCurrency()
                && outflowLedgerAccount
                && (outflowType == LedgerJournalACType::Bank
                    || outflowType == LedgerJournalACType::RCash))
            {
                oldExchRate = ledgerJournalTrans.ExchRate;
                ledgerJournalTrans.ExchRate = this.averageMstExchRate(ledgerJournalTrans);

                if (ledgerJournalTrans.ExchRate > 0 && ledgerJournalTrans.ExchRate != oldExchRate)
                {
                    ledgerJournalTrans.doUpdate();

                    this.resultInfo(
                        ledgerJournalTrans.Voucher,
                        outflowAccount,
                        this.journalAccountAmountCur(ledgerJournalTrans, outflowAccount),
                        ledgerJournalTrans.CurrencyCode,
                        oldExchRate,
                        ledgerJournalTrans.ExchRate);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCalcDailyExchRate</Name>
				<Source><![CDATA[
    private void journalCalcDailyExchRate()
    {
        LedgerJournalTrans ledgerJournalTrans;
        ExchRate oldExchRate;

        ttsbegin;

        while (queryRun.next())
        {
            ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));

            oldExchRate = ledgerJournalTrans.ExchRate;

            ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate, Currency::noYes2UnknownNoYes(Currency::triangulation(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate)));

            ledgerJournalTrans.ExchRateSecond = ExchangeRateHelper::exchRateSecond(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate, Currency::noYes2UnknownNoYes(Currency::triangulation(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate)));

            if (ledgerJournalTrans.ExchRate != oldExchRate)
            {
                ledgerJournalTrans.doUpdate();

                this.resultInfo(
                    ledgerJournalTrans.Voucher,
                    ledgerJournalTrans.LedgerDimension,
                    this.journalAccountAmountCur(ledgerJournalTrans, ledgerJournalTrans.LedgerDimension),
                    ledgerJournalTrans.CurrencyCode,
                    oldExchRate,
                    ledgerJournalTrans.ExchRate);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNum</Name>
				<Source><![CDATA[
    private LedgerJournalId parmJournalNum(LedgerJournalId _journalNum = journalNum)
    {
        journalNum = _journalNum;

        return journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resultInfo</Name>
				<Source><![CDATA[
    private void resultInfo(
        Voucher _voucher,
        LedgerDimensionAccount _accountNum,
        AmountCur _amountCur,
        CurrencyCode _currencyCode,
        ExchRate _oldExchRate,
        ExchRate _newExchRate)

    {
        info(strfmt("@GLS111026", _voucher, LedgerDimensionFacade::getDisplayValueForLedgerDimension(_accountNum), _amountCur, _currencyCode, _oldExchRate, _newExchRate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The run method calls the average or daily rate calculation routines.
    /// </summary>
    public void run()
    {
        if (!this.check())
        {
            throw error("@SYS93835");
        }

        switch (calcMethod)
        {
            case HuLedgerJournalExchRateCalculation::AverageRate:
                this.journalCalcAverageExchRate();
                break;

            case HuLedgerJournalExchRateCalculation::DailyRate:
                this.journalCalcDailyExchRate();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutflow</Name>
				<Source><![CDATA[
    private void setOutflow(LedgerJournalTrans _ledgerJournalTrans)
    {
        PostingProfile outflowPostingProfile;
        DimensionDefault outflowDefaultDimension;

        outflowLedgerAccount = 0;

        if (_ledgerJournalTrans.AmountCurDebit < 0
            || _ledgerJournalTrans.AmountCurCredit > 0)
        {
            outflowType = _ledgerJournalTrans.AccountType;
            outflowAccount = _ledgerJournalTrans.LedgerDimension;
            outflowPostingProfile = _ledgerJournalTrans.PostingProfile;
            outflowDefaultDimension = _ledgerJournalTrans.DefaultDimension;
        }
        else
        {
            outflowType = _ledgerJournalTrans.OffsetAccountType;
            outflowAccount = _ledgerJournalTrans.OffsetLedgerDimension;
            outflowPostingProfile = _ledgerJournalTrans.OffsetPostingProfile_RU;
            outflowDefaultDimension = _ledgerJournalTrans.OffsetDefaultDimension;
        }

        switch (outflowType)
        {
            case LedgerJournalACType::Ledger:
                outflowLedgerAccount = outflowAccount;
                break;

            case LedgerJournalACType::Bank:
                BankAccountTable bankAccountTable = BankAccountTable::findByLedgerDimension(outflowAccount);
                outflowLedgerAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(bankAccountTable.LedgerDimension, bankAccountTable.DefaultDimension);
                break;

            case LedgerJournalACType::RCash:
                outflowLedgerAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(RCashLedgerAccount::summaryLedgerDimension(LedgerDimensionFacade::getDisplayValueForLedgerDimension(outflowAccount), outflowPostingProfile), outflowDefaultDimension);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    public boolean showDefaultButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                LedgerJournalId journalNumNew = this.parmJournalNum();
                container conQueryRun;
                [version, #CurrentList, conQueryRun] = packedClass;
                queryRun = new QueryRun(conQueryRun);

                if (journalNumNew)
                {
                    this.parmJournalNum(journalNumNew);
                    this.initParmDefault();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The description method on the class.
    /// </summary>
    /// <returns>
    ///    Returns the class description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@GLS107760";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        const IdentifierName FormMethodName = 'ledgerJournalEngine';

        LedgerJournalCalcExchRateHU calcExchRate = new LedgerJournalCalcExchRateHU();

        LedgerJournalTrans ledgerJournalTrans = _args.record();
        if (!ledgerJournalTrans)
        {
            error("@SYS4080202");
            return;
        }

        calcExchRate.parmJournalNum(ledgerJournalTrans.JournalNum);
        calcExchRate.initParmDefault();

        if (calcExchRate.prompt())
        {
            calcExchRate.runOperation();

            if (_args.caller() && formHasMethod(_args.caller(), FormMethodName))
            {
                LedgerJournalEngine ledgerJournalEngine = _args.caller().ledgerJournalEngine();
                ledgerJournalEngine.newJournalActive(ledgerJournalEngine.ledgerJournalTable());
                ledgerJournalEngine.ledgerJournalTableUpdateTotals(ledgerJournalEngine.ledgerJournalTable());
            }

            FormObjectSet dataSource = FormDataUtil::getFormDataSource(ledgerJournalTrans);
            if (dataSource)
            {
                dataSource.research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>