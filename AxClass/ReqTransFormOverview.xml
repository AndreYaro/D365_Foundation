<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransFormOverview</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqTransFormOverview extends ReqTransForm
{
    Map                         mapReqDate;
    Map                         mapReqDateDlvOrig;
    Map                         mapActionDate;
    Map                         mapFuturesDate;

    ReqTransCalc                reqTransCalc;

    ReqSetup                    reqSetup;

    // Parameters

    ItemId                      itemId;
    ReqSorting                  reqSorting;

    TmpReqInventDim             tmpReqInventDim;

    FormDateControl             ctrlGridReqDate;
    FormTabControl              ctrlTabSum;
    FormTabControl              ctrlTabTrans;

    FormGridControl             ctrlGridPeriod;
    SysChart                    ctrlGraphPeriod;

    FormTabPageControl          ctrlTabPagePeriod;
    ReqTmpPeriodQty             reqTmpPeriodQty;
    boolean                     showPeriodGraph;
    Graphics                    graphics;
    container                   lastPeriodCalcParameters;

    // query ranges
    QueryBuildRange             rangeItemId;

    Integer                     tabPageTrans;
    Integer                     tabPageSum;

    // form selections for visualization

    FormStringControl           planFilterControl;
    FormMenuButtonControl       periodTemplateMenuButtonGroup;
    FormMenuButtonControl       periodChartTypeMenuButtonGroup;
    
    SysChartType                selectedGraphType;
    WorkPeriodTemplateRecId     selectedWorkPeriodTemplate;
    boolean                     initGraphics;


    // global objects

    Map                         mapReqSetupDim;
    InventDimCtrl_Frm           inventDimFormSetup;

    ItemId                      lastItemId;

    FormDataSource             batchReqTrans_ds;
    QueryBuildRange            batchPlanVersion;
    QueryBuildRange            batchReqRefType;
    QueryBuildRange            batchReqRefId;
    QueryBuildRange            batchReqRecId;
    boolean                    isBatch;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateTabPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quantities according to the specified period template.
    /// </summary>
    /// <remarks>
    /// This method should be called when the period tab page is activated or recalculation should be forced.
    /// </remarks>
    public void activateTabPeriod()
    {
        if (lastPeriodCalcParameters != this.periodCalcParameters())
        {
            this.calcPeriods();
            initGraphics = true;
            lastPeriodCalcParameters = this.periodCalcParameters();
        }

        if ( ctrlGridPeriod && ctrlGraphPeriod && periodChartTypeMenuButtonGroup )
        {
            if (showPeriodGraph)
            {
                this.showGraphics();
                initGraphics = false;

                ctrlGridPeriod.visible(false);
                ctrlGraphPeriod.visible(true);
            }
            else
            {
                ctrlGridPeriod.visible(true);
                ctrlGraphPeriod.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateTabTransAction</Name>
				<Source><![CDATA[
    void activateTabTransAction()
    {
        this.activateTabTransStandard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateTabTransFutures</Name>
				<Source><![CDATA[
    void activateTabTransFutures()
    {
        this.activateTabTransStandard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateTabTransGeneral</Name>
				<Source><![CDATA[
    void activateTabTransGeneral()
    {
        this.activateTabTransStandard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateTabTransOverview</Name>
				<Source><![CDATA[
    void activateTabTransOverview()
    {
        this.activateTabTransStandard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateTabTransStandard</Name>
				<Source><![CDATA[
    void activateTabTransStandard()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchReqTransDSExecuteQueryPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called before the executequery on the form.
    /// it builds a query related to batch reqtrans for a formula
    /// or by recid if its a non-formula
    /// </summary>
    public void batchReqTransDSExecuteQueryPre()
    {
        #define.comma(',')

        if (#PmfEnabled
            && (    reqTrans.RefType == ReqRefType::PmfPlannedProdBatch
                ||  reqTrans.RefType == ReqRefType::PmfCoProduct
                ||  reqTrans.RefType == ReqRefType::Production)
            &&  InventTable::find(reqTrans.ItemId).isFormulaAllowed())
        {
            batchPlanVersion.value(queryValue(reqTrans.PlanVersion));
            batchReqRefType.value(
                queryValue(ReqRefType::PmfPlannedProdBatch)
                        + #comma
                        + queryValue(ReqRefType::Production)
                        + #comma
                        + queryValue(ReqRefType::PmfCoProduct));
            batchReqRefId.value(queryValue(reqTrans.RefId));
            batchReqRecId.value(SysQuery::valueUnlimited());
            isBatch = true;
        }
        else
        {
            batchReqRecId.value(queryValue(reqTrans.RecId));
            batchPlanVersion.value(SysQuery::valueUnlimited());
            batchReqRefType.value(SysQuery::valueUnlimited());
            batchReqRefId.value(SysQuery::valueUnlimited());
            isBatch = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchReqTransDSInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initilized the datasource for the form.
    /// Here querybuildranges are added.
    /// </summary>
    /// <param name="_reqTrans">The current reqtrans to use. </param>
    public void batchReqTransDSInitPost(ReqTrans _reqTrans)
    {
        QueryBuildDataSource    qbs;

        batchReqTrans_ds    = FormDataUtil::getFormDataSource(_reqTrans);
        qbs = batchReqTrans_ds.query().dataSourceTable(tablenum(ReqTrans));
        batchPlanVersion    = qbs.addRange(fieldnum(ReqTrans,PlanVersion));
        batchReqRefType     = qbs.addRange(fieldnum(ReqTrans,RefType));
        batchReqRefId       = qbs.addRange(fieldnum(ReqTrans,RefId));
        batchReqRecId       = qbs.addRange(fieldnum(ReqTrans,RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quantities according to the specified period template and ensures the associated form selects the result.
    /// </summary>
    protected void calcPeriods()
    {
        FormDataSource reqTmpPeriodQty_ds;

        reqTmpPeriodQty.setTmpData(ReqPeriodTemplateCalculate::calcReqTmpPeriodQty(selectedWorkPeriodTemplate,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),reqPlanId,itemId,tmpReqInventDim.CovInventDimId));
        reqTmpPeriodQty_ds = FormDataUtil::getFormDataSource(reqTmpPeriodQty);
        reqTmpPeriodQty_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpReqInventDim</Name>
				<Source><![CDATA[
    public void createTmpReqInventDim(
        TmpReqInventDim     _tmpReqInventDim,
        ReqPeriodCode       _periodCode,
        ReqSorting          _sorting,
        ReqCovInventDimId   _covInventDimId = ''
        )
    {
        TmpReqInventDim     tmp;

        container           reqInventDimContainer;
        Map                 mapReqInventDim;
        MapIterator         iterator;

        reqInventDimContainer = reqTransCalc.packMapReqInventDim(_periodCode,_sorting,_covInventDimId);
        if (!reqInventDimContainer)
        {
            return;
        }

        mapReqInventDim = Map::create(reqInventDimContainer);
        iterator = new MapIterator(mapReqInventDim);

        iterator.begin();

        while (iterator.more())
        {
            tmp = mapReqInventDim.lookup(iterator.key());
            tmp.setTmpData(_tmpReqInventDim);
            tmp.insert();

            iterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTmpReqInventDim</Name>
				<Source><![CDATA[
    public void deleteTmpReqInventDim(TmpReqInventDim _tmpReqInventDim)
    {
        TmpReqInventDim tmp;

        if (_tmpReqInventDim.RecId)
        {
            tmp.setTmpData(_tmpReqInventDim);

            delete_from tmp;

            _tmpReqInventDim.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransAccumQty</Name>
				<Source><![CDATA[
    public ReqQty displayTransAccumQty(
        ReqTrans    _reqTrans
        )
    {
        container   packedMap;
        switch (reqSorting)
        {
            case ReqSorting::ReqDate :
                if (! mapReqDate)
                {
                    packedMap = reqTransCalc.packMapReqTrans(ReqSorting::ReqDate);
                    mapReqDate = (packedMap) ? Map::create(packedMap) : new Map(typeName2Type(extendedtypestr(recId)), Types::Real);
                }
                if (mapReqDate.exists(_reqTrans.RecId))
                {
                    return mapReqDate.lookup(_reqTrans.RecId);
                }

                break;

            case ReqSorting::ReqDateDlvOrig :
                if (! mapReqDateDlvOrig)
                {
                    packedMap = reqTransCalc.packMapReqTrans(ReqSorting::ReqDateDlvOrig);
                    mapReqDateDlvOrig = (packedMap) ? Map::create(packedMap) : new Map(typeName2Type(extendedtypestr(recId)), Types::Real);
                }
                if (mapReqDateDlvOrig.exists(_reqTrans.RecId))
                {
                    return mapReqDateDlvOrig.lookup(_reqTrans.RecId);
                }

                break;

            case ReqSorting::FuturesDate :
                if (! mapFuturesDate)
                {
                    packedMap = reqTransCalc.packMapReqTrans(ReqSorting::FuturesDate);
                    mapFuturesDate = (packedMap) ? Map::create(packedMap) : new Map(typeName2Type(extendedtypestr(recId)), Types::Real);
                }
                if (mapFuturesDate.exists(_reqTrans.RecId))
                {
                    return mapFuturesDate.lookup(_reqTrans.RecId);
                }

                break;

            case ReqSorting::ActionDate :
                if (! mapActionDate)
                {
                    packedMap = reqTransCalc.packMapReqTrans(ReqSorting::ActionDate);
                    mapActionDate = (packedMap) ? Map::create(packedMap) : new Map(typeName2Type(extendedtypestr(recId)), Types::Real);
                }
                if (mapActionDate.exists(_reqTrans.RecId))
                {
                    return mapActionDate.lookup(_reqTrans.RecId);
                }

                break;

            default:
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransdate</Name>
				<Source><![CDATA[
    public TransDate displayTransdate(ReqTrans _reqTrans)
    {
        switch (reqSorting)
        {
            case ReqSorting::ReqDate        :
                return _reqTrans.ReqDate;
            case ReqSorting::ReqDateDlvOrig :
                return _reqTrans.ReqDateDlvOrig;
            case ReqSorting::ActionDate     :
                return _reqTrans.ActionDate;
            case ReqSorting::FuturesDate    :
                return _reqTrans.FuturesDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransQty</Name>
				<Source><![CDATA[
    public ReqQty  displayTransQty(ReqTrans _reqTrans)
    {
        switch (reqSorting)
        {
            case ReqSorting::ReqDate:
                return _reqTrans.Qty;
            case ReqSorting::ReqDateDlvOrig:
                return _reqTrans.Qty;
            case ReqSorting::ActionDate:
                return _reqTrans.actionSum();
            case ReqSorting::FuturesDate:
                return _reqTrans.Qty;
            default:
        }

        return _reqTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doResearch</Name>
				<Source><![CDATA[
    public void doResearch()
    {
        FormDataSource  tmpReq_DS = FormDataUtil::getFormDataSource(tmpReqInventDim);

        this.initReqTransCalc(true);

        this.initTmpReq();

        if (ReqTransFormOverviewResearchFlight::instance().isEnabled())
        {
            tmpReq_DS.research(true);
        }
        else
        {
            tmpReq_DS.executeQuery();
        }

        this.initTabTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReqSetupDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>ReqSetupDim</c> object for the specified <c>TmpReqInventDim</c> record.
    /// </summary>
    /// <param name="_tmp">
    ///    A record buffer of type <c>TmpReqInventDim</c>.
    /// </param>
    /// <returns>
    ///    A <c>ReqSetupDim</c> object.
    /// </returns>
    ReqSetupDim findReqSetupDim(TmpReqInventDim _tmp)
    {
        ReqSetupDim     reqSetupDim;

        str mapKey()
        {
            return strfmt('%1#%2',this.reqSetup().itemId(),_tmp.CovInventDimId);
        }

        if (! mapReqSetupDim)
        {
            mapReqSetupDim = new Map(Types::String,Types::Class);
        }

        if (! mapReqSetupDim.exists(mapKey()))
        {
            reqSetupDim = ReqSetupDim::newCovInventDimId(this.reqSetup(),_tmp.CovInventDimId);
            mapReqSetupDim.insert(mapKey(),reqSetupDim);
        }

        return mapReqSetupDim.lookup(mapKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this object after init method is called on the associated form.
    /// </summary>
    public void formInitPost()
    {
        super();

        this.normalizeLookupArgs();
        this.initSortingLabel();
        this.initPeriodTemplate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalizeLookupArgs</Name>
				<Source><![CDATA[
    private void normalizeLookupArgs()
    {
        // opening from the selection list will set the lookup record as a ReqTrans record. needs to be cleared
        if (formRun.args() && formRun.args().lookupRecord())
        {
            formRun.args().record(formRun.args().lookupRecord());
            formRun.args().lookupRecord(null);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formUpdateDesign</Name>
				<Source><![CDATA[
    void formUpdateDesign(InventDimFormDesignUpdate mode)
    {
        InventDimParm       inventDimParm;

        switch (mode)
        {
            case InventDimFormDesignUpdate::Init          :
                if (! inventDimFormSetup)
                {
                    inventDimFormSetup  = InventDimCtrl::newFromForm(formRun);
                }

            case InventDimFormDesignUpdate::Active        :
                if (this.reqSetup() && this.reqSetup().itemId())
                {
                    if (lastItemId != this.reqSetup().itemId())
                    {
                        inventDimParm.initCovPrDimension(InventDimGroupSetup::newItemId(this.reqSetup().itemId()));

                        inventDimFormSetup.parmDimParmVisibleGrid(inventDimParm);
                        inventDimFormSetup.parmDimParmEnabled(inventDimParm);

                        inventDimFormSetup.formSetControls(true);

                        lastItemId = this.reqSetup().itemId();
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the caption of the form based on the setup and context loaded.
    /// </summary>
    public void initCaption()
    {
        str captionText;

        if (tmpReqInventDim && reqSetup && reqSetup.itemId() == itemId)
        {
            InventTable inventTable = InventTable::find(itemId);
            if (this.isMasterPlan())
            {
                captionText = strfmt("@SCM:ReqTransOverviewCaptionNet", itemId, inventTable.itemName(), enum2str(reqSorting));
            }
            else
            {
                captionText = strfmt("@SCM:ReqTransOverviewCaptionGross", itemId, inventTable.itemName(), enum2str(reqSorting));
            }
        }
        else
        {
            if (this.isMasterPlan())
            {
                captionText = strfmt("@SYS25333",reqPlanId);
            }
            else
            {
                captionText = strfmt("@SYS25334",reqPlanId);
            }
        }

        formRun.design().caption(captionText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    public void initFromCaller()
    {
        if (formRun.args().parmEnumType())
        {
            reqPlanType = formRun.args().parmEnum();
        }
        else
        {
            reqPlanType = ReqPlanType::SchedPlan;
        }

        super();

        this.setSortingFromPlanId();

        itemId = ReqCalc::argsItemId(formRun.args());

        if (! itemId)
        {
            throw error("@SYS59363");
        }

        if (! reqSetup || reqSetup.itemId() != itemId)
        {
            if (reqPlanId == ReqPlanSched::defaultDynamicId())
            {
                ReqTransUpdate::runItemId(itemId);
            }

            reqSetup = ReqSetup::newItemId(itemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        tabPageTrans = 1;
        tabPageSum   = 1;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPeriodTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the period template field on the form.
    /// </summary>
    protected void initPeriodTemplate()
    {
        if (!selectedWorkPeriodTemplate)
        {
            selectedWorkPeriodTemplate = this.findReqSetupDim(tmpReqInventDim).periodTemplateRecId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReqTransCalc</Name>
				<Source><![CDATA[
    public void initReqTransCalc(boolean _force)
    {
        if (! reqTransCalc || _force || reqTransCalc.parmItemId() != itemId || reqTransCalc.parmReqPlanId() != reqPlanId)
        {
            reqTransCalc    = ReqTransCalc::newStandard(reqPlanId,itemId);

            mapReqDate      = null;
            mapFuturesDate  = null;
            mapActionDate   = null;
            mapReqDateDlvOrig   = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSortingLabel</Name>
				<Source><![CDATA[
    public void initSortingLabel()
    {
        switch (reqSorting)
        {
            case ReqSorting::ReqDate:
                ctrlGridReqDate.label("@SYS18075");
                break;
            case ReqSorting::ReqDateDlvOrig:
                ctrlGridReqDate.label("@SYS27057");
                break;
            case ReqSorting::ActionDate:
                ctrlGridReqDate.label("@SYS22951");
                break;
            case ReqSorting::FuturesDate:
                ctrlGridReqDate.label("@SYS22952");
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTabTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tab pages.
    /// </summary>
    /// <param name="activatePage">
    /// A boolean that determines if the tab pages should be activated.
    /// </param>
    public void initTabTrans(boolean activatePage = false)
    {
        if (   this.isTabPeriod()
            && activatePage)
        {
            this.activateTabPeriod();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpReq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates temporary <c>TmpReqInventDim</c> records.
    /// </summary>
    public void initTmpReq()
    {
        this.deleteTmpReqInventDim(tmpReqInventDim);

        this.createTmpReqInventDim(
            tmpReqInventDim,ReqPeriodCode::Total,
            reqSorting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTabPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the period tab page is selected.
    /// </summary>
    /// <returns>
    /// true if the period tab page is selected; otherwise, false.
    /// </returns>
    boolean isTabPeriod()
    {
        return (ctrlTabPagePeriod.isActivePage());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifierName lastValueDesignName()
    {
        if (formRun.args().caller())
        {
            return formRun.args().caller().name();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>list2Value</Name>
				<Source><![CDATA[
    public void list2Value()
    {
        super();

        if (ctrlTabTrans)
        {
            ctrlTabTrans.tab(tabPageTrans);
        }

        if (ctrlTabSum)
        {
            ctrlTabSum.tab(tabPageSum);
        }

        if (ReqTransOverviewRequestedDateSortingFeature::instance().isEnabled()
            && conLen(formList) > 0)
        {
            reqSorting = conPeek(formList, conLen(formList));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodChartTypeMenuButtonGroup</Name>
				<Source><![CDATA[
    [SysObsolete('PeriodModeGraphType control is not used anymore', false, 15\01\2021)]
    public FormMenuButtonControl parmPeriodChartTypeMenuButtonGroup(FormMenuButtonControl _periodChartTypeMenuButtonGroup = periodChartTypeMenuButtonGroup)
    {
        periodChartTypeMenuButtonGroup = _periodChartTypeMenuButtonGroup;
        return periodChartTypeMenuButtonGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodTemplateMenuButtonGroup</Name>
				<Source><![CDATA[
    public FormMenuButtonControl parmPeriodTemplateMenuButtonGroup(FormMenuButtonControl _periodTemplateMenuButtonGroup = periodTemplateMenuButtonGroup)
    {
        periodTemplateMenuButtonGroup = _periodTemplateMenuButtonGroup;
        return periodTemplateMenuButtonGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanFilterControl</Name>
				<Source><![CDATA[
    public FormStringControl parmPlanFilterControl(FormStringControl _planFilterControl = planFilterControl)
    {
        planFilterControl = _planFilterControl;
        return planFilterControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGraphPeriod</Name>
				<Source><![CDATA[
    public SysChart parmCtrlGraphPeriod(SysChart _ctrlGraphPeriod = ctrlGraphPeriod)
    {
        ctrlGraphPeriod = _ctrlGraphPeriod;
        return ctrlGraphPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGridPeriod</Name>
				<Source><![CDATA[
    FormGridControl  parmCtrlGridPeriod(FormGridControl _ctrlGridPeriod = ctrlGridPeriod)
    {
        ctrlGridPeriod = _ctrlGridPeriod;
        return ctrlGridPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGridReqDate</Name>
				<Source><![CDATA[
    public FormDateControl parmCtrlGridReqDate(FormDateControl _ctrlGridReqDate = ctrlGridReqDate)
    {
        ctrlGridReqDate = _ctrlGridReqDate;
        return ctrlGridReqDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTabPagePeriod</Name>
				<Source><![CDATA[
    public FormTabPageControl parmCtrlTabPagePeriod(FormTabPageControl _ctrlTabPagePeriod = ctrlTabPagePeriod)
    {
        ctrlTabPagePeriod = _ctrlTabPagePeriod;
        return ctrlTabPagePeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTabSum</Name>
				<Source><![CDATA[
    public FormTabControl parmCtrlTabSum(FormTabControl _ctrlTabSum = ctrlTabSum)
    {
        ctrlTabSum = _ctrlTabSum;
        return ctrlTabSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTabTrans</Name>
				<Source><![CDATA[
    public FormTabControl parmCtrlTabTrans(FormTabControl _ctrlTabTrans = ctrlTabTrans)
    {
        ctrlTabTrans = _ctrlTabTrans;
        return ctrlTabTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId    _itemId = itemId)
    {
        itemId  = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqSorting</Name>
				<Source><![CDATA[
    public ReqSorting parmReqSorting(ReqSorting _reqSorting = reqSorting)
    {
        reqSorting = _reqSorting;
        return reqSorting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqTmpPeriodQty</Name>
				<Source><![CDATA[
    public ReqTmpPeriodQty parmReqTmpPeriodQty(ReqTmpPeriodQty _reqTmpPeriodQty = reqTmpPeriodQty)
    {
        reqTmpPeriodQty = _reqTmpPeriodQty;
        return reqTmpPeriodQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPeriodGraph</Name>
				<Source><![CDATA[
    boolean parmShowPeriodGraph(boolean _showPeriodGraph = showPeriodGraph)
    {
        showPeriodGraph = _showPeriodGraph;
        return showPeriodGraph;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpReqInventDim</Name>
				<Source><![CDATA[
    public TmpReqInventDim parmTmpReqInventDim(TmpReqInventDim _tmpReqInventDim = tmpReqInventDim)
    {
        tmpReqInventDim = _tmpReqInventDim;
        return tmpReqInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodCalcParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes a container of variables used for calculation of periods.
    /// </summary>
    /// <returns>
    /// A container that contains variables used for calculations of periods.
    /// </returns>
    /// <remarks>
    /// The variables inside the container are used to determine if a new calculation of the periods should be performed.
    /// </remarks>
    protected container periodCalcParameters()
    {
        return [selectedWorkPeriodTemplate,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),reqPlanId,itemId,tmpReqInventDim.CovInventDimId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqSetup</Name>
				<Source><![CDATA[
    public ReqSetup    reqSetup()
    {
        return reqSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransCovDSExecuteQueryPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called before the executequery on the form.
    /// this builds a comma delimited query of recid for the reqtrans datasource to use
    ///  by looping the batchReqTrans datasource
    /// </summary>
    /// <param name="_recId">The recId of the reqtrans to use. </param>
    public void reqTransCovDSExecuteQueryPre(RecId _recId = reqTrans.RecId)
    {
        ReqTrans    tmpReqTrans;
        str         qStr = '';
        RecId       lclRecId = _recId;
        #define.Or(',')

        if (isBatch)
        {
            tmpReqTrans = batchReqTrans_ds.getFirst(0,false);
            while (tmpReqTrans.RecId)
            {
                if (qStr)
                {
                    qStr += #Or;
                }

                qStr += queryValue(tmpReqTrans.RecId);
                tmpReqTrans = batchReqTrans_ds.getNext();
            }
            rangeReceiptRecId.value(
                reqTrans.Qty >= 0
                    ? qStr
                    : SysQuery::valueUnlimited());
            rangeIssueRecId.value(
                reqTrans.Qty >= 0
                    ? SysQuery::valueUnlimited()
                    : qStr);
        }
        else
        {
            if (lclRecId == 0)
            {
                lclRecId = reqTrans.RecId;
            }
            rangeReceiptRecId.value(
                reqTrans.Qty >= 0
                    ? queryValue(lclRecId)
                    : SysQuery::valueUnlimited());
            rangeIssueRecId.value(
                reqTrans.Qty >= 0
                    ? SysQuery::valueUnlimited()
                    : queryValue(lclRecId));
        }

        reqTransCov_ds.query().dataSourceTable(tablenum(ReqTrans)).clearLinks();

        if (reqTrans.Qty >= 0)
        {
            reqTransCov_ds.query().dataSourceTable(
                tablenum(ReqTrans)).addLink(
                    fieldnum(ReqTransCov,IssueRecId),
                    fieldnum(ReqTrans,RecId));
        }
        else
        {
            reqTransCov_ds.query().dataSourceTable(
                tablenum(ReqTrans)).addLink(
                    fieldnum(ReqTransCov,ReceiptRecId),
                    fieldnum(ReqTrans,RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransDSExecuteQueryPost</Name>
				<Source><![CDATA[
    public void reqTransDSExecuteQueryPost()
    {
        this.initTabTrans(true);
        this.initCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransDSExecuteQueryPre</Name>
				<Source><![CDATA[
    public void reqTransDSExecuteQueryPre()
    {
        QueryBuildDataSource    qbsTrans = reqTrans_ds.query().dataSourceTable(tablenum(ReqTrans));

        super();

        rangeItemId.value(queryValue(itemId));

        qbsTrans.sortClear();

        switch (reqSorting)
        {
            case ReqSorting::ReqDate:
                qbsTrans.addSortField(fieldnum(ReqTrans,ReqDate));
                break;
            case ReqSorting::ReqDateDlvOrig:
                qbsTrans.addSortField(fieldnum(ReqTrans,ReqDateDlvOrig));
                break;
            case ReqSorting::ActionDate:
                qbsTrans.addSortField(fieldnum(ReqTrans,ActionDate));
                break;
            case ReqSorting::FuturesDate:
                qbsTrans.addSortField(fieldnum(ReqTrans,FuturesDate));
                break;
        }
        qbsTrans.addSortField(fieldnum(ReqTrans,Direction));
        qbsTrans.addSortField(fieldnum(ReqTrans,RecId));

        qbsTrans.addSortIndex(indexnum(ReqTrans,ItemIdx));
        qbsTrans.indexIsHint(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransDSInitPost</Name>
				<Source><![CDATA[
    public void reqTransDSInitPost(ReqTrans _reqTrans)
    {
        super(_reqTrans);

        rangePlanVersion  = reqTrans_ds.query().dataSourceTable(tablenum(ReqTrans)).addRange(fieldnum(ReqTrans,PlanVersion));

        rangeItemId     = reqTrans_ds.query().dataSourceTable(tablenum(ReqTrans)).addRange(fieldnum(ReqTrans,ItemId));

        reqTrans_ds.query().dataSourceTable(tablenum(ReqTrans)).addRange(fieldnum(ReqTrans,RefType)).value('!'+queryValue(ReqRefType::SafetyInvent));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPlanType</Name>
				<Source><![CDATA[
    public void setPlanType(ReqPlanType _reqPlanType)
    {
        Object object = formRun;
        reqPlanType = _reqPlanType;

        object.initDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortingFromPlanId</Name>
				<Source><![CDATA[
    private void setSortingFromPlanId()
    {
        if (reqPlanType == ReqPlanType::ForecastPlan && reqSorting != ReqSorting::ReqDate)
        {
            this.setSorting(ReqSorting::ReqDate, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSorting</Name>
				<Source><![CDATA[
    public void setSorting(ReqSorting _reqSorting, boolean _findRecord)
    {
        ReqTrans    reqTransFind;
        reqSorting = _reqSorting;

        this.initSortingLabel();
        this.initCaption();

        if (_findRecord)
        {
            reqTransFind.data(reqTrans);

            reqTrans_ds.executeQuery();

            reqTrans_ds.findRecord(reqTransFind);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showGraphics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and fills the graph component with data.
    /// </summary>
    [SysObsolete('PeriodModeGraphType control is not used anymore', false, 15\01\2021)]
    void showGraphics()
    {
        List            measuresList;
        ListEnumerator  measuresListEnumerator;
        SysChartMeasure dataMeasure;
        SysChartType    chartType;

        if (!ctrlGraphPeriod || !initGraphics)
        {
            return;
        }

        chartType    = selectedGraphType;
        measuresList = ctrlGraphPeriod.Measures();
        measuresListEnumerator = measuresList.getEnumerator();

        while (measuresListEnumerator.moveNext())
        {
            dataMeasure = measuresListEnumerator.current();
            dataMeasure.parmChartType(chartType);
        }

        ctrlGraphPeriod.Measures(measuresList);
        ctrlGraphPeriod.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>value2List</Name>
				<Source><![CDATA[
    public void value2List()
    {
        super();

        if (ctrlTabTrans)
        {
            tabPageTrans = ctrlTabTrans.tab();
        }

        if (ctrlTabSum)
        {
            tabPageSum = ctrlTabSum.tab();
        }

        if (ReqTransOverviewRequestedDateSortingFeature::instance().isEnabled())
        {
            formList += [reqSorting];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormRun</Name>
				<Source><![CDATA[
    public static ReqTransFormOverview newFormRun(FormRun _formRun)
    {
        ReqTransFormOverview reqTransFormOverview;
        reqTransFormOverview = new ReqTransFormOverview(_formRun);

        return reqTransFormOverview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormRun _formRun)
    {
        selectedGraphType = SysChartType::Column;
        super(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSelectionFilters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the menu controls that enables filter selections.
    /// </summary>
    public void initSelectionFilters()
    {
        this.initPlanVersionSelection();
        this.initPeriodTemplateSelection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlanVersionSelection</Name>
				<Source><![CDATA[
    public void updatePlanVersionSelection()
    {
        if (planFilterControl && planFilterControl.text() != reqPlanId)
        {
            planFilterControl.extendedDataType(extendedTypeNum(ReqPlanId));
            planFilterControl.text(reqPlanId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPlanVersionSelection</Name>
				<Source><![CDATA[
    private void initPlanVersionSelection()
    {
        if (planFilterControl)
        {
            planFilterControl.extendedDataType(extendedTypeNum(ReqPlanId));
            planFilterControl.text(reqPlanId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPeriodTemplateSelection</Name>
				<Source><![CDATA[
    private void initPeriodTemplateSelection()
    {
        FormButtonControl   workPeriodTemplateButton;
        WorkPeriodTemplate  workPeriodTemplate;

        this.initPeriodTemplate();
        while select RecId, Name from workPeriodTemplate
            where workPeriodTemplate.LegalEntity == CompanyInfo::current()
        {
            workPeriodTemplateButton = periodTemplateMenuButtonGroup.addControl(FormControlType::Button, tablestr(WorkPeriodTemplate)+workPeriodTemplate.Name);
            workPeriodTemplateButton.text(workPeriodTemplate.Name);

            if (workPeriodTemplate.RecId == selectedWorkPeriodTemplate)
            {
                periodTemplateMenuButtonGroup.text(workPeriodTemplate.Name);
            }
            workPeriodTemplateButton.registerOverrideMethod(methodstr(FormButtonControl, clicked), methodstr(ReqTransFormOverview, workPeriodTemplateSelectionChanged), this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>planIdSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Event method that occurs when a plan is selected in the form.
    /// </summary>
    /// <param name = "_planFilterControl">The plan filter string control.</param>
    public void planIdSelectionChanged(FormStringControl _planFilterControl)
    {
        if (_planFilterControl && _planFilterControl.valueStr())
        {
            this.setReqPlanId(_planFilterControl.valueStr());

            this.setSortingFromPlanId();

            this.updateReqPlanData(_planFilterControl.valueStr());

            this.doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>chartTypeSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Event method that occurs on a button when a chart type is selected in the form.
    /// </summary>
    /// <param name = "_selectedControl">The button clicked.</param>
    [SysObsoleteAttribute('PeriodModeGraphType control is not used anymore', false, 15\01\2021)]
    public void chartTypeSelectionChanged(FormButtonControl _selectedControl)
    {
        SysDictEnum sysDictEnum = new SysDictEnum(enumnum(SysChartType));

        if (_selectedControl && _selectedControl.text())
        {
            selectedGraphType = sysDictEnum.symbol2Value(_selectedControl.text());
            periodChartTypeMenuButtonGroup.text(_selectedControl.text());

            initGraphics = true;
            this.showGraphics();
            initGraphics = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workPeriodTemplateSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Event method that occurs on a button when a work calendar template is selected in the form.
    /// </summary>
    /// <param name = "_selectedControl">The button clicked.</param>
    public void workPeriodTemplateSelectionChanged(FormButtonControl _selectedControl)
    {
        if (_selectedControl && _selectedControl.text())
        {
            selectedWorkPeriodTemplate = WorkPeriodTemplate::findName(_selectedControl.text()).RecId;
            periodTemplateMenuButtonGroup.text(_selectedControl.text());
            this.activateTabPeriod();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>