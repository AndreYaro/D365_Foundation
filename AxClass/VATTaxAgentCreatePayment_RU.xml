<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VatTaxAgentCreatePayment_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VatTaxAgentCreatePayment_RU
{
    LedgerJournalTrans payment;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(LedgerJournalTrans _ledgerJournalTrans)
    {
        payment = _ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTable          ledgerJournalTable;
        TaxCode                     taxCode = TaxTable::vatCode_RU(payment.TaxGroup,
                                                                   payment.TaxItemGroup);
        TmpTaxWorkTrans             tmpTaxWorkTrans;
        CalcTaxes_RU                calcTaxes;
        TaxCalculation              taxCalculation;
        AmountMST                   vatAmount;
        CustVendPaymModeTable       custVendPaymModeTable;
        ;

        select firstonly forupdate ledgerJournalTrans
            where ledgerJournalTrans.vatPaymRefRecId_RU == payment.RecId;

        ledgerJournalTable = LedgerJournalTable::find(payment.JournalNum);

        ttsbegin;

        ledgerJournalTrans.initValue();
        ledgerJournalTrans.JournalNum                = payment.JournalNum;
        ledgerJournalTrans.Voucher                   = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);
        ledgerJournalTrans.Approved                  = payment.Approved;
        ledgerJournalTrans.Approver                  = payment.Approver;
        ledgerJournalTrans.DefaultDimension          = payment.DefaultDimension;
        ledgerJournalTrans.DocumentNum               = payment.DocumentNum;
        ledgerJournalTrans.TransDate                 = payment.TransDate;
        ledgerJournalTrans.DocumentDate              = payment.DocumentDate;
        ledgerJournalTrans.Due                       = payment.Due;
        ledgerJournalTrans.TransactionType           = payment.TransactionType;
        ledgerJournalTrans.PostingProfile            = payment.PostingProfile;
        ledgerJournalTrans.Company                   = payment.Company;
        ledgerJournalTrans.AccountType               = payment.AccountType;
        ledgerJournalTrans.parmAccount(TaxAuthorityAddress::find(TaxPeriodHead::find(TaxTable::find(taxCode).TaxPeriod).TaxAuthority).AccountNum);
        ledgerJournalTrans.TaxCode                   = taxCode;
        ledgerJournalTrans.CurrencyCode              = CompanyInfoHelper::standardCurrency();
        ledgerJournalTrans.vatPaymRefRecId_RU        = payment.RecId;
        ledgerJournalTrans.vatOperationCode_RU       = payment.vatOperationCode_RU;
        ledgerJournalTrans.vatTaxAgentVendAccount_RU = payment.parmAccount();
        ledgerJournalTrans.SettleVoucher             = SettlementType::None;
        ledgerJournalTrans.PaymentStatus             = CustVendPaymStatus::None;

        if (VendTable::find(ledgerJournalTrans.parmAccount()).PaymMode)
        {
            ledgerJournalTrans.PaymMode = VendTable::find(ledgerJournalTrans.parmAccount()).PaymMode;
            custVendPaymModeTable = CustVendPaymModeTable::findModule(ModuleCustVend::Vend,
                                                                      VendTable::find(ledgerJournalTrans.parmAccount()).PaymMode);
            ledgerJournalTrans.OffsetAccountType = custVendPaymModeTable.paymACType();
            ledgerJournalTrans.OffsetLedgerDimension = custVendPaymModeTable.offsetLedgerDimension();
        }

        taxCalculation = LedgerJournalTrans::getTaxInstance(payment.JournalNum, payment.Voucher, payment.Invoice, true);

        tmpTaxWorkTrans.setTmpData(taxCalculation.tmpTaxWorkTrans());
        select tmpTaxWorkTrans;
        calcTaxes = CalcTaxes_RU::construct(tmpTaxWorkTrans);
        calcTaxes.calc();
        vatAmount = abs(CurrencyExchangeHelper::mstAmount(calcTaxes.taxAmountCur_VAT(), payment.CurrencyCode, payment.TransDate));
        if (payment.AmountCurDebit)
        {
            ledgerJournalTrans.AmountCurCredit = 0;
            ledgerJournalTrans.AmountCurDebit  = sign(payment.AmountCurDebit) * vatAmount;
        }
        else
        {
            ledgerJournalTrans.AmountCurDebit  = 0;
            ledgerJournalTrans.AmountCurCredit = sign(payment.AmountCurCredit) * vatAmount;
        }
        ledgerJournalTrans.TaxBase_W = CurrencyExchangeHelper::mstAmount(calcTaxes.totalTaxBaseAmountCur(), payment.CurrencyCode, payment.TransDate);
        ledgerJournalTrans.BankCentralBankPurposeText = strFmt("@GLS112886", payment.parmAccount(), VendTable::find(payment.parmAccount()).postalAddress().Address);
        ledgerJournalTrans.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VATTaxAgentCreatePayment_RU createPayment = new VATTaxAgentCreatePayment_RU();
        ;

        createPayment.initValue(_args.record());
        createPayment.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
