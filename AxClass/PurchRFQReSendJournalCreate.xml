<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQReSendJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQReSendJournalCreate extends FormletterJournalCreate
{
    VendRFQJour                 vendRFQJour;
    VendRFQTrans                vendRFQTrans;

    PurchRFQCaseTable           purchRFQCaseTable;
    PurchRFQCaseLine            purchRFQCaseLine;
    PurchRFQParmTable           purchRFQParmTable;
    PurchRFQParmUpdate          purchRFQParmUpdate;
    PurchRFQLine                purchRFQLine;
    PurchRFQTable               purchRFQTable;

    PurchRFQTotals              purchRFQTotals;
    boolean                     printReplySheet;
    boolean                     printPriceAmount;
    Dimension                   dimension;
    PurchRFQReplyTable          purchRFQReplyTable;
    PurchRFQReplyLine           purchRFQReplyLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates a journal and voucher number from the corresponding number sequences.
    /// </summary>
    /// <returns>
    /// A <c>NumberSeq</c> object.
    /// </returns>
    NumberSeq allocateNumAndVoucher()
    {
        NumberSequenceDatatype  numberDatatype = NumberSequenceDatatype::find(this.numberSequenceReferenceNum().NumberSequenceDatatype);
        RefRecId                scopeId = NumberSeqScopeFactory::createDefaultScope().getId();
        RefRecId                internalRFQId;
        NumberSeq               tmpNumberSeq;
        if (purchRFQTable.NumberSequenceGroup)
        {
            internalRFQId = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, purchRFQTable.NumberSequenceGroup).NumberSequenceId;

            if (internalRFQId)
            {
                tmpNumberSeq = NumberSeq::newGetNumFromId(internalRFQId);
            }
        }
        else
        {
            if (this.numberSequenceReferenceNum().NumberSequenceId)
            {
                tmpNumberSeq = NumberSeq::newGetNum(this.numberSequenceReferenceNum());
            }
        }

        return tmpNumberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal header when either the sales order, the purchase order, or the request for
    /// quote is updated.
    /// </summary>
    protected void createJournalHeader()
    {
        PurchRFQCaseTable rfqCaseTable;

        this.getJournalNumber();

        if (!journalNumber)
            throw error("@SYS71652");

        if (purchRFQParmTable.rfqId )
        {
            purchRFQTable      = purchRFQParmTable.purchRFQTable();
            purchRFQReplyTable = purchRFQTable.purchRFQReplyTable();
        }

        vendRFQJour.clear();
        vendRFQJour.initValue();

        vendRFQJour.ParmId              = purchRFQParmUpdate.ParmId;
        vendRFQJour.rfqId               = purchRFQParmTable.rfqId;
        vendRFQJour.InternalRFQId       = journalNumber;
        vendRFQJour.rfqDate             = this.updateDate();
        vendRFQJour.rfqUpdateType       = PurchRFQUpdateType::Resent;
        vendRFQJour.Status              = this.purchRFQStatus();
        vendRFQJour.initFromPurchRFQTable(purchRFQTable);

        if (purchRFQReplyTable && vendRFQJour.Status != PurchRFQStatus::Sent)
        {
            vendRFQJour.initFromPurchRFQReplyTable(purchRFQReplyTable);
        }
        if (purchRFQCaseTable)
        {
            vendRFQJour.initFromPurchRFQCaseTable(purchRFQCaseTable);
        }
        else
        {
            rfqCaseTable = PurchRFQCaseTable::find(purchRFQTable.rfqCaseId);
            vendRFQJour.initFromPurchRFQCaseTable(rfqCaseTable);
        }

        if (purchRFQParmUpdate.ReasonId)
        {
            vendRFQJour.editReasonCode(true,purchRFQParmUpdate.ReasonId);
            vendRFQJour.editReasonComment(true,purchRFQParmUpdate.ReasonComment);
        }
        vendRFQJour.initFromPurchRFQTotals(purchRFQTotals);
        vendRFQJour.PrintPriceAmount = printPriceAmount;
        vendRFQJour.PrintReplySheet  = printReplySheet;

        vendRFQJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    protected void createJournalLine(Common _purchRFQParmLine)
    {
        PurchRFQParmLine purchRFQParmLine = _purchRFQParmLine as PurchRFQParmLine;
        purchRFQLine        = this.getPurchRFQLine(purchRFQParmLine, false);
        purchRFQReplyLine   = PurchRFQReplyLine::findRFQLine(purchRFQLine.RecId);
        lineValue           = purchRFQParmLine.lineAmountExclTax();
        lineValueInclTax    = purchRFQParmLine.LineAmount;

        vendRFQTrans.clear();
        vendRFQTrans.initValue();
        vendRFQTrans.initFromVendRFQJour(vendRFQJour);
        vendRFQTrans.initFromPurchRFQLine(purchRFQLine);
        vendRFQTrans.initFromPurchRFQReplyLine(purchRFQReplyLine);
        vendRFQTrans.PurchQty       = purchRFQParmLine.PurchQty;
        vendRFQTrans.QtyOrdered     = purchRFQParmLine.QtyOrdered;
        vendRFQTrans.LineAmount     = lineValue;
        vendRFQTrans.LineAmountTax  = lineValueInclTax - lineValue;
        vendRFQTrans.Status         = this.purchRFQStatus();
        this.insertJournalLine(vendRFQTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    protected void createJournalLink(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmLine_OrigOrderId</Name>
				<Source><![CDATA[
    protected fieldId fieldIdParmLine_OrigOrderId()
    {
        return fieldNum(PurchRFQParmLine,rfqCaseId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current journal header.
    /// </summary>
    /// <returns>
    /// A journal header record.
    /// </returns>
    public Common getJournal()
    {
        return vendRFQJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchRFQLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the corresponding <c>PurchRFQLine</c> record buffer of a <c>PurchRFQParmLine</c> record.
    /// </summary>
    /// <param name="_purchRFQParmLine">
    /// The record buffer of a <c>PurchRFQParmLine</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to select the <c>PurchRFQLine</c> record for update.
    /// </param>
    /// <returns>
    /// A <c>PurchRFQLine</c> record buffer.
    /// </returns>
    protected PurchRFQLine getPurchRFQLine(PurchRFQParmLine    _purchRFQParmLine,
                                           boolean             _forupdate = false)
    {
        PurchRFQLine  localPurchRFQLine;

        localPurchRFQLine.selectForUpdate(_forupdate);

        select firstonly localPurchRFQLine
            where localPurchRFQLine.RecId == _purchRFQParmLine.rfqLineRecId;

        return localPurchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the total calculation.
    /// </summary>
    protected void initTotals()
    {
        purchRFQParmTable  = this.parmParmTable();
        purchRFQParmUpdate = this.parmParmUpdate();

        purchRFQTotals = PurchRFQTotals::construct(purchRFQParmTable,
                                                   purchRFQParmUpdate.SpecQty);
        purchRFQTotals.calc();
        this.parmTax(purchRFQTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal line table.
    /// </returns>
    protected tableId journalLineTableId()
    {
        return tableNum(VendRFQTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal link table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal link table.
    /// </returns>
    protected tableId linksTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSequenceReference</c> object for the journal number.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> object.
    /// </returns>
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        return PurchParameters::numRefPurchInternalRFQId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQStatus</Name>
				<Source><![CDATA[
    protected PurchRFQStatus purchRFQStatus()
    {
        return PurchRFQStatus::Sent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordListParmLine()
    {
        return purchRFQTotals.recordSortedListLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table for the journal.
    /// </summary>
    /// <returns>
    /// A record.
    /// </returns>
    protected Common sourceTable()
    {
        Common ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total object.
    /// </summary>
    /// <returns>
    /// A total object.
    /// </returns>
    protected Object totals()
    {
        return purchRFQTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the posting parameter line table.
    /// </summary>
    /// <returns>
    /// A record.
    /// </returns>
    protected Common typeParmLine()
    {
        PurchRFQParmLine   purchRFQParmLine;
        return purchRFQParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate updateDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQReSendJournalCreate construct()
    {
        return new PurchRFQReSendJournalCreate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>