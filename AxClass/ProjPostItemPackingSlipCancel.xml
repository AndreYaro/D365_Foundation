<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemPackingSlipCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class ProjPostItemPackingSlipCancel extends ProjPost
{
    ProjItemTrans projItemTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                // Fetch the correct account type for a non-project posting type, non-stocked item,
                // and item requirement related scenario.
                if (this.isItemReqNonStockItemSalesLine())
                {
                    return InventPosting::accountItemLedgerDimensionFromParameters(
                        InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(salesLine,
                        InventoryMainAccDimensionListProvider::ledgerPostingType2InventAccountType(LedgerPostingType::PurchExpense),
                        InventTable::find(salesLine.ItemId).itemGroupId()));
                        
                }
                return projTrans.offsetAccountItemLedgerDimension(_fundingSourceId);
            case ProjLedgerStatus::Operations:
                // Fetch ledger account of purchase expenditure for expense from inventory posting setup
                // when posting project item requirement packing slip or purchase order item consumption for non-stocked item.
                if (FeatureStateProvider::isFeatureEnabled(ProjEnableProfitAndLossItemReqConsumptionFlight::instance()) && this.isItemReqNonStockItemSalesLine())
                {
                    return InventPosting::accountItemLedgerDimensionFromParameters(
                        InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(salesLine,
                        InventoryMainAccDimensionListProvider::ledgerPostingType2InventAccountType(LedgerPostingType::PurchExpense),
                        InventTable::find(salesLine.ItemId).itemGroupId()));
                }
            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                return projTrans.statusAccountItemLedgerDimension(_fundingSourceId);
            case ProjLedgerStatus::Operations:
                if (FeatureStateProvider::isFeatureEnabled(ProjEnableProfitAndLossItemReqConsumptionFlight::instance()) && this.isItemReqNonStockItemSalesLine())
                {
                    return projTrans.offsetAccountItemLedgerDimension(_fundingSourceId);
                }
            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRefTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the reference transaction ID that is associated with the project transaction.
    /// </summary>
    /// <returns>
    /// The reference transaction ID.
    /// </returns>
    protected ProjTransIdBase getRefTransId()
    {
        return projItemTrans.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projFundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId projFundingSource()
    {
        return salesLine.ProjFundingSource ? salesLine.ProjFundingSource : SalesTable::find(salesLine.SalesId).FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transIdPackSlip</Name>
				<Source><![CDATA[
    public ProjTransIdPackSlip transIdPackSlip()
    {
        return projItemTrans.TransIdPackSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        if (_buffer.TableId == tableNum(ProjItemTrans))
        {
            projItemTrans = _buffer;
            projTrans = new ProjTransItemTrans(projItemTrans);
            salesLine = SalesLine::findInventTransId(projItemTrans.InventTransId);
        }

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTrans</Name>
				<Source><![CDATA[
    public Common newTrans()
    {
        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type that is associated with posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                return LedgerPostingType::ProjStatusAccountItem;
            case ProjLedgerStatus::Operations:
                if (FeatureStateProvider::isFeatureEnabled(ProjEnableProfitAndLossItemReqConsumptionFlight::instance()) && this.isItemReqNonStockItemSalesLine())
                {
                    return LedgerPostingType::ProjOffsetAccountItem;
                }
            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for the project offset cost posting based on the current ledger status
    /// of the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                // Set posting type to Purchase expenditure for a non-stocked scenario when created from an item requirement.
                if (this.isItemReqNonStockItemSalesLine())
                {
                    return LedgerPostingType::PurchExpense;
                }
                return LedgerPostingType::ProjOffsetAccountItem;
            case ProjLedgerStatus::Operations:
                if (FeatureStateProvider::isFeatureEnabled(ProjEnableProfitAndLossItemReqConsumptionFlight::instance()) && this.isItemReqNonStockItemSalesLine())
                {
                    return LedgerPostingType::PurchExpense;
                }
            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemReqNonStockItemSalesLine</Name>
				<Source><![CDATA[
    private boolean isItemReqNonStockItemSalesLine()
    {
        if (salesLine && salesLine.SalesType == SalesType::ItemReq && !salesLine.isStocked())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    public void projTransCreate()
    {
        projTrans.parmProjAdjustRefId(this.parmAdjustRefId());

        ProjItemTrans projItemTransLoc = ProjItemTrans::find(projItemTrans.ProjTransId, true);
        
        // <GEEU>
        if (LedgerParameters::isStornoEnabledEE())
        {
            projItemTransLoc.IsCorrection = this.isTransCorrection();
            projItemTransLoc.update();
        }
        // </GEEU>
        
        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(salesLine, projItemTrans);
        }
        // </GTE>

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            TaxServiceTariff::insertTaxServiceTariffForNewParent(salesLine.TableId, salesLine.RecId, projItemTrans.TableId, projItemTrans.RecId);
        }
        // </GEEPL>

        if (this.parmLedgerOrigin() != ProjOrigin::Adjustment)
        {
            if (projTrans.qty() != 0)
            {
                // For cancellation the transaction is created in SalesPackingSlipJournalPostProj 
                // Hence this method only takes care of allocation to update funding limit
                if (ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled())
                {
                    ProjFundingSourceRefId projFundingSourceId = ProjPost::projFundingSourceRefIdForSalesLine(salesLine);
                    if (projFundingSourceId)
                    {
                        this.createCostSalesDistributionsForSingleFS(projFundingSourceId, projTrans.transCost(), projTrans.transTurnover());
                    }
                    else
                    {
                        // For project without contract, there will be no funding source.
                        this.createCostSalesDistributions(projTrans.transCost(), projTrans.transTurnover());
                    }
                }
                else
                {
                    this.createCostSalesDistributions(projTrans.transCost(), projTrans.transTurnover());
                }
            }
            ProjPost::postItemReverseTransaction(this);
        }   

        if (salesLine.isStocked())
        {
            this.updateProjAdjustRefIdInProjLedgerUpdate(LedgerPostingType::ProjCost);
        }

        this.parmTransIdCost(projItemTrans.ProjTransId);
        
        this.parmTransIdSales(projItemTrans.ProjTransId);

        // Execute the logic only if sales line contain stocked product.
        // For stocked product, cost record is created in <c>ProjLedgerUpdate</c> class <c>insertProjItemTransCost</c> method.
        if (salesLine.isStocked() && ProjPost::checkCreateProjCost(projItemTrans.ItemId, projItemTrans.ProjId))
        {
            this.updateProjItemTransCost(projItemTrans, ledgerVoucher.lastVoucher());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjAdjustRefIdInProjLedgerUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancellation of packing slip adds ProjLedger to the voucher with the same ProjAdjustRefId as the original packing slip posting.
    /// To associate the project subledger transaction to the return InventTrans record which has a different ProjAdjustRefId,
    /// this method updates the ProjAdjustRefId in the voucher to the desired value.
    /// </summary>
    /// <param name = "_ledgerPostingType">Posting type of the ledger object</param>
    private void updateProjAdjustRefIdInProjLedgerUpdate(LedgerPostingType _ledgerPostingType)
    {
        ListEnumerator listEnumerator = this.parmLedgerVoucher().findLedgerVoucherObject().getTransactionsForPostingType(_ledgerPostingType).getEnumerator();
        LedgerVoucherTransObject ledgerVoucherTransObject;
        List toDelete = new List(Types::Class);
        List toAdd = new List(Types::Class);

        while (listEnumerator.moveNext())
        {
            ledgerVoucherTransObject = listEnumerator.current();
            if (ledgerVoucherTransObject.parmProjLedger().parmInventTransId() == projItemTrans.InventTransId)
            {
                LedgerVoucherTransObject ledgerVoucherTransObjectNew = ledgerVoucherTransObject.clone();
                ProjLedger projLedgerNew = ledgerVoucherTransObjectNew.parmProjLedger().clone();
                projLedgernew.parmProjAdjustRefId(projItemTrans.ProjAdjustRefId);
                ledgerVoucherTransObjectNew.parmProjLedger(projLedgerNew);

                toDelete.addEnd(ledgerVoucherTransObject);
                toAdd.addEnd(ledgerVoucherTransObjectNew);
            }
        }

        listEnumerator = toDelete.getEnumerator();
        while (listEnumerator.moveNext())
        {
            ledgerVoucherTransObject = listEnumerator.current();
            this.parmLedgerVoucher().findLedgerVoucherObject().removeTrans(ledgerVoucherTransObject);
        }

        listEnumerator = toAdd.getEnumerator();
        while (listEnumerator.moveNext())
        {
            ledgerVoucherTransObject = listEnumerator.current();
            this.parmLedgerVoucher().findLedgerVoucherObject().addTrans(ledgerVoucherTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
       // Update ProjItemTransCost and ProjItemTransSale to adjusted state
       ProjItemTrans projItemTransLoc;
       ProjItemTransCost projItemTransCost;

       update_recordset projItemTransCost
           setting TransStatus = ProjTransStatus::Adjusted
        join projItemTransLoc
           where projItemTransLoc.TransIdPackSlip == this.transIdPackSlip()
                && projItemTransLoc.InventTransId == projItemTransCost.InventTransId
                && projItemTransLoc.ProjAdjustRefId == projItemTransCost.ProjAdjustRefId;
            
       ProjItemTransSale projItemTransSale;

       update_recordset projItemTransSale
           setting TransStatus = ProjTransStatus::Adjusted
        join projItemTransLoc
           where projItemTransLoc.ProjTransId == projItemTransSale.ProjTransId
                && projItemTransLoc.TransIdPackSlip == this.transIdPackSlip();
            
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>