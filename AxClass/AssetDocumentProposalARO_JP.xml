<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentProposalARO_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Asset retirement obligation proposal.
/// </summary>
[AssetDocumentProposalTypeAttribute_JP(AssetDocumentProposalType_JP::CapitalizedAssetRetirementObligation)]
class AssetDocumentProposalARO_JP extends AssetDocumentProposal_JP implements BatchRetryable
{
    DialogField         dialogToDate;
    AssetTransDate      toDate;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        toDate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAssetJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the asset journal instance.
    /// </summary>
    /// <returns>
    /// The asset journal instance.
    /// </returns>
    protected AssetJournal createAssetJournal()
    {
        AssetJournal assetJournal;

        assetJournal = new AssetJournal(journalNum, AssetTransTypeJournal::AcquisitionAdj);

        return assetJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactionFromEstimationResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the transaction from the estimation.
    /// </summary>
    /// <param name="_assetJournal">
    /// The asset journal instance.
    /// </param>
    /// <param name="_assetBook">
    /// The asset book.
    /// </param>
    /// <param name="_documentEntry">
    /// The document entry.
    /// </param>
    /// <param name="_document">
    /// The document.
    /// </param>
    /// <param name="_result">
    /// The estimation result.
    /// </param>
    protected void createTransactionFromEstimationResult(
        AssetJournal _assetJournal,
        AssetBook _assetBook,
        AssetDocumentEntry_JP _documentEntry,
        AssetDocumentTable_JP _document,
        AssetDocumentPresentValueResult_JP _result)
    {
        AssetAmount     transAmount;

        transAmount = _result.parmAdjustmentAmount();
        if (transAmount != 0)
        {
            _assetJournal.createTrans(
                transAmount,
                _assetBook,
                _result.parmTransactionDate(),
                '',
                0,
                0,
                false,
                0,
                0,
                dateNull(),
                false,
                false,
                _document.Type,
                _documentEntry.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase  dialog = super();

        dialog.caption("@SYS4004970");
        dialog.addGroup("@SYS22526");
        dialogToDate = dialog.addFieldValue(extendedTypeStr(AssetTransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS14656", "@SYS4005512");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets values from the dialog fields
    /// </summary>
    /// <returns>
    /// True if succeeds
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            toDate = dialogToDate.value();
            ret = this.checkDateIsValid(toDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastPostingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last posting date.
    /// </summary>
    /// <param name="_documentEntry">
    /// The document entry.
    /// </param>
    /// <returns>
    /// The last posting date.
    /// </returns>
    protected TransDate getLastPostingDate(AssetDocumentEntry_JP _documentEntry)
    {
        return AssetRetirementObligation_JP::getLastTransactionOfTypePostingDate(_documentEntry.RecId, AssetTransType::Acquisition, AssetTransType::AcquisitionAdj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        Query                query = new Query(queryStr(AssetProposalRetirementObligation_JP));
        QueryBuildRange      qr;

        super();

        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00018] ],
            funcName()
        );

        qr = query.dataSourceTable(tableNum(AssetBookTable)).findRange(fieldNum(AssetBookTable, CurrentOperationsTax));
        qr.value(queryValue(CurrentOperationsTax::Current));
        qr.status(RangeStatus::Locked);
        qr = query.dataSourceTable(tableNum(AssetBook)).addRange(fieldNum(AssetBook, Status));
        qr.value(queryValue(AssetStatus::Open));
        qr.status(RangeStatus::Locked);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmToDate(AssetTransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        AssetJournal                        assetJournal;
        AssetBook                           assetBook;
        AssetTransDate                      transDate, fromDate;
        AssetDocumentEntry_JP               documentEntry;
        AssetDocumentTable_JP               document;
        AssetDocumentPresentValueResult_JP  result;

        Query                   query;
        QueryBuildDataSource    qbdsDocument;
        Array                   results;
        int                     idx;
        int                     len;

        query = queryRun.query();

        qbdsDocument = query.dataSourceTable(tableNum(AssetDocumentTable_JP));
        SysQuery::findOrCreateRange(qbdsDocument, FieldNum(AssetDocumentTable_JP, Type)).value(queryValue(AssetDocumentType_JP::AssetRetirementObligation));

        // Always use Acquisition adjustment for async ARO acquisition
        assetJournal = this.createAssetJournal();

        ttsbegin;

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(AssetBook)))
            {
                assetBook = queryRun.get(tableNum(AssetBook)) as AssetBook;
                document = queryRun.get(tableNum(AssetDocumentTable_JP)) as AssetDocumentTable_JP;
                documentEntry = queryRun.get(tableNum(AssetDocumentEntry_JP)) as AssetDocumentEntry_JP;
                fiscalCalendarPeriod = null;
                fromDate = this.getLastPostingDate(documentEntry);

                if (document && document.MainType == AssetDocumentMainType_JP::AssetRetirementObligation)
                {
                    results = AssetRetirementPresentValueProvider_JP::calculate(documentEntry.RecId, toDate);

                    len = results.lastIndex();
                    for (idx=1; idx<=len; idx++)
                    {
                        result = results.value(idx);
                        transDate = result.parmTransactionDate();
                        if (transDate <= fromDate || transDate > toDate)
                        {
                            continue;
                        }

                        this.createTransactionFromEstimationResult(assetJournal, assetBook, documentEntry, document, result);
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version    = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
        }

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>