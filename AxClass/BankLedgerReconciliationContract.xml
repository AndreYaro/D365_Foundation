<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLedgerReconciliationContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
#define.FromGroupName('From')
#define.ToGroupName('To')

/// <summary>
/// Data contract class for BankLedgerReconciliation SSRS report
/// </summary>
/// <remarks>
/// This is the data contract class for the BankLedgerReconciliation SSRS report.
/// </remarks>
[DataContract]
[SysOperationGroup(#FromGroupName, "@SYS181135", '1')]
[SysOperationGroup(#ToGroupName, "@SYS53942", '2')]
[SysOperationContractProcessingAttribute(classStr(BankLedgerReconciliationUIBuilder))]
public class BankLedgerReconciliationContract implements SysOperationValidatable
{
    public const str FromGroupName = #FromGroupName;
    public const str ToGroupName = #ToGroupName;

    private TransDate fromDate;
    private TransDate toDate;
    private Voucher fromVoucher;
    private Voucher toVoucher;
    private MainAccountNum fromLedger;
    private MainAccountNum toLedger;
    private boolean includeDetails;
    private boolean showDifferencesOnly;
    private LedgerCurrencySelection ledgerCurrencySelection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the From date parameter.
    /// </summary>
    /// <param name="_fromDate">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the From date parameter.
    /// </returns>
    [
        DataMember('FromDate'),
        SysOperationLabel(literalStr("@SYS7402")),
        SysOperationGroupMember(#FromGroupName),
        SysOperationDisplayOrder('1')
    ]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the From ledger parameter.
    /// </summary>
    /// <param name="_fromLedger">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the From ledger parameter.
    /// </returns>
    [
        DataMember('FromLedger'),
        SysOperationLabel(literalStr("@SYS135766")),
        SysOperationGroupMember(#FromGroupName),
        SysOperationDisplayOrder('3')
    ]
    public MainAccountNum parmFromLedger(MainAccountNum _fromLedger = fromLedger)
    {
        fromLedger = _fromLedger;
        return fromLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the From voucher parameter.
    /// </summary>
    /// <param name="_fromVoucher">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the From voucher parameter.
    /// </returns>
    [
        DataMember('FromVoucher'),
        SysOperationLabel(literalStr("@SYS12371")),
        SysOperationGroupMember(#FromGroupName),
        SysOperationDisplayOrder('2')
    ]
    public Voucher parmFromVoucher(Voucher _fromVoucher = fromVoucher)
    {
        fromVoucher = _fromVoucher;
        return fromVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the Include details parameter.
    /// </summary>
    /// <param name="_includeDetails">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the Include details parameter.
    /// </returns>
    [
        DataMember('IncludeDetails'),
        SysOperationLabel(literalStr("@SYS316360")),
        SysOperationDisplayOrder('3')
    ]
    public boolean parmIncludeDetails(boolean _includeDetails = includeDetails)
    {
        includeDetails = _includeDetails;
        return includeDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDifferencesOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the Differences only parameter.
    /// </summary>
    /// <param name="_showDifferencesOnly">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the Differences only parameter.
    /// </returns>
    [
        DataMember('ShowDifferencesOnly'),
        SysOperationLabel(literalStr("@SYS57830")),
        SysOperationDisplayOrder('4')
    ]
    public boolean parmShowDifferencesOnly(boolean _showDifferencesOnly = showDifferencesOnly)
    {
        showDifferencesOnly = _showDifferencesOnly;
        return showDifferencesOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencySelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>ledgerCurrencySelection</c> parameter.
    /// </summary>
    /// <param name="_ledgerCurrencySelection">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>ledgerCurrencySelection</c> parameter.
    /// </returns>
    [
        DataMemberAttribute('CurrencySelection'),
        SysOperationLabelAttribute(literalstr("@SYS129076")),
        SysOperationHelpTextAttribute(literalstr("@CashManagement:CurrencySelectionText")),
        SysOperationDisplayOrderAttribute('5')
    ]
    public LedgerCurrencySelection parmCurrencySelection(LedgerCurrencySelection _ledgerCurrencySelection = ledgerCurrencySelection)
    {
        ledgerCurrencySelection = _ledgerCurrencySelection;
        return ledgerCurrencySelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the To date parameter.
    /// </summary>
    /// <param name="_toDate">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the To date parameter.
    /// </returns>
    [
        DataMember('ToDate'),
        SysOperationLabel(literalStr("@SYS7402")),
        SysOperationGroupMember(#ToGroupName),
        SysOperationDisplayOrder('1')
    ]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the To ledger parameter.
    /// </summary>
    /// <param name="_toLedger">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the To ledger parameter.
    /// </returns>
    [
        DataMember('ToLedger'),
        SysOperationLabel(literalStr("@SYS135766")),
        SysOperationGroupMember(#ToGroupName),
        SysOperationDisplayOrder('3')
    ]
    public MainAccountNum parmToLedger(MainAccountNum _toLedger = toLedger)
    {
        toLedger = _toLedger;
        return toLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the To voucher parameter.
    /// </summary>
    /// <param name="_toVoucher">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the To voucher parameter.
    /// </returns>
    [
        DataMember('ToVoucher'),
        SysOperationLabel(literalStr("@SYS12371")),
        SysOperationGroupMember(#ToGroupName),
        SysOperationDisplayOrder('2')
    ]
    public Voucher parmToVoucher(Voucher _toVoucher = toVoucher)
    {
        toVoucher = _toVoucher;
        return toVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (!this.parmFromDate() || !this.parmToDate())
        {
            isValid = checkFailed("@SYS4000789");
        }
        else if (this.parmFromDate() > this.parmToDate())
        {
            isValid = checkFailed("@CashManagement:InvalidDateRange");
        }

        if (this.parmFromLedger()
            && this.parmToLedger()
            && this.parmFromLedger() > this.parmToLedger())
        {
            isValid = checkFailed("@CashManagement:InvalidLedgerRange");
        }

        if (this.parmFromVoucher()
            && this.parmToVoucher()
            && this.parmFromVoucher() > this.parmToVoucher())
        {
            isValid = checkFailed("@CashManagement:InvalidVoucherRange");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>