<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStoreInventory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailStoreInventory</c> class performs store inventory operations such as stock count, picking and receiving.
/// </summary>
public class RetailStoreInventory
{
    #define.MyRecId('MyRecId')
    #define.UpdatedInAx('UpdatedInAx')
    #define.TrueStr('true')
    #define.RunTimeInSeconds(60)
    #define.BlankString(' ')
    #define.Message('Message')
    #define.InventJournalSourceEP('EnterprisePortal')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createStockCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Journal number from the Xml document.
    /// </summary>
    /// <param name="storeInventLocationId">
    /// Identification of Warehouse.
    /// </param>
    /// <param name="description">
    /// Description for the journal.
    /// </param>
    /// <returns>
    /// Identification number of the journal.
    /// </returns>
    public static JournalId createStockCount(InventLocationId storeInventLocationId, JournalDescription description = '')
    {
        InventJournalId journalId;
        XmlElement              xmlRoot;

        str createInventJournalXmlStr;
        XmlDocument createInventJournalXml;
        container response = RetailTransactionService::CreateInventoryJournal(storeInventLocationId, description, #InventJournalSourceEP);

        createInventJournalXmlStr = conPeek(response, 3);
        if (createInventJournalXmlStr)
        {
            createInventJournalXml = new XmlDocument();
            createInventJournalXml.loadXml(createInventJournalXmlStr);

            xmlRoot = createInventJournalXml.getNamedElement(tableStr(InventJournalTable));
            journalId = xmlRoot.getAttribute(fieldStr(InventJournalTable, JournalId));
        }

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePickingTableNotOpenInHQ</Name>
				<Source><![CDATA[
        private static void deletePickingTableNotOpenInHQ(RetailInvPickingType pickingType, utcdatetime beginTime)
    {
        RetailInvTransferPickingListTable pickingTable;
        RetailInvTransferPickingLine pickingLine;

        // delete picking orders that are no longer open in HQ, as much as time allows.
        while select forUpdate pickingTable
            where pickingTable.OrderType == pickingType && pickingTable.IsOpenInHQ == NoYes::No
        {
            if (DateTimeUtil::utcNow() > DateTimeUtil::addSeconds(beginTime, #RunTimeInSeconds))
            {
                break;
            }
            delete_from pickingLine where pickingLine.OrderNumber == pickingTable.Ordernumber && pickingLine.OrderType == pickingType;
            pickingTable.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReceivingTableNotOpenInHQ</Name>
				<Source><![CDATA[
        private static void deleteReceivingTableNotOpenInHQ(RetailInvReceivingType receivingType, utcdatetime beginTime)
    {
        RetailInvReceivingListTable receivingTable;
        RetailInvReceivingLine receivingLine;

        // delete receiving orders that are no longer open in HQ, as much as time allows.
        while select forUpdate receivingTable
            where receivingTable.Type == receivingType && receivingTable.IsOpenInHQ == NoYes::No
        {
            if (DateTimeUtil::utcNow() > DateTimeUtil::addSeconds(beginTime, #RunTimeInSeconds))
            {
                break;
            }
            delete_from receivingLine where receivingLine.OrderNumber == receivingTable.Ordernumber && receivingLine.OrderType == receivingType;
            receivingTable.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSuccessFullyUpdatedPickingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete successfully updated picking line.
    /// </summary>
    /// <param name="xmlRecordList">
    /// Xml record list.
    /// </param>
    /// <returns>
    /// True: has failures in xml.
    /// </returns>
    private static boolean deleteSuccessFullyUpdatedPickingLine(XmlNodeList xmlRecordList)
    {
        boolean hasFailuresInXml = false;
        RetailInvTransferPickingLine pickingLine;
        int i;
        RecId recId;
        str message;
        ItemId itemId;
        XmlElement              xmlRecord;
        str result;

        ttsBegin;
        for (i = 0; i < xmlRecordList.length(); i++)
        {
            xmlRecord = xmlRecordList.item(i);
            result = xmlRecord.getAttribute(#UpdatedInAx);
            if (result == #TrueStr || i == 2)
            {
                recId = str2int64(xmlRecord.getAttribute(#MyRecId));
                pickingLine = RetailInvTransferPickingLine::findByRecId(recId, true);
                pickingLine.delete();
            }
            else
            {
                message = xmlRecord.getAttribute(#Message);
                itemId = xmlRecord.getAttribute(fieldStr(InventTransferLine, ItemId));
                warning(message + #BlankString + itemId);
                hasFailuresInXml = true;
            }
        }

        ttsCommit;

        return hasFailuresInXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSuccessFullyUpdatedReceivingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete successfully updated receiving line.
    /// </summary>
    /// <param name="xmlRecordList">
    /// Xml record list.
    /// </param>
    /// <returns>
    /// True: has failures in xml.
    /// </returns>
    private static boolean deleteSuccessFullyUpdatedReceivingLine(XmlNodeList xmlRecordList)
    {
        boolean hasFailuresInXml = false;
        RetailInvReceivingLine receivingLine;
        int i;
        str message;
        ItemId itemId;
        RecId recId;
        XmlElement              xmlRecord;
        str result;

        ttsBegin;
        for (i = 0; i < xmlRecordList.length(); i++)
        {
            xmlRecord = xmlRecordList.item(i);
            result = xmlRecord.getAttribute(#UpdatedInAx);
            if (result == #TrueStr)
            {
                recId = str2int64(xmlRecord.getAttribute(#MyRecId));
                receivingLine = RetailInvReceivingLine::findByRecId(recId, true);
                receivingLine.delete();
            }
            else
            {
                message = xmlRecord.getAttribute(#Message);
                itemId = xmlRecord.getAttribute(fieldStr(PurchLine, ItemId));
                warning(message + #BlankString + itemId);
                hasFailuresInXml = true;
            }
        }
        ttsCommit;

        return hasFailuresInXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemNameByItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Product name for the given item.
    /// </summary>
    /// <param name="itemId">
    /// Identification of the item.
    /// </param>
    /// <returns>
    /// Description of the Item.
    /// </returns>
    public static ItemName getItemNameByItemId(ItemId itemId)
    {
        ItemName itemName;
        InventTable inventTable;
        if (itemId)
        {
            inventTable = InventTable::find(itemId);
            itemName = inventTable.itemName();
        }

        return itemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailUserStoreInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the warehouse for the given store.
    /// </summary>
    /// <returns>
    /// Warehouse for the Store.
    /// </returns>
    public static InventLocationId getRetailUserStoreInventLocationId()
    {
        RetailStoreId      storeId;
        InventLocationId storeInventLocationId;

        storeId = RetailUsers::find().EPDefaultStore;
        if (storeId)
        {
            storeInventLocationId = RetailStoreTable::find(storeId).inventLocation;
        }

        return storeInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTimeToRefreshLines</Name>
				<Source><![CDATA[
        private static boolean isTimeToRefreshLines(utcDateTime lastRefreshedDateTime, boolean isForceRefresh)
    {
        int refreshIntervalInSeconds = 15;

        RetailSharedParameters retailParams = RetailSharedParameters::find();

        boolean isTimeToRefresh;

        if (isForceRefresh || !lastRefreshedDateTime)
        {
            isTimeToRefresh = true;
        }
        else
        {
            if (retailParams && retailParams.EPRefreshIntervalInSeconds > 0)
            {
                refreshIntervalInSeconds = retailParams.EPRefreshIntervalInSeconds;
            }

            isTimeToRefresh = DateTimeUtil::addSeconds(lastRefreshedDateTime, refreshIntervalInSeconds) < DateTimeUtil::utcNow();
        }

        return isTimeToRefresh;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Picks all the quantity available for invent transfer line.
    /// </summary>
    /// <param name="storeInventLocationId">
    /// The given store invent location Id.
    /// </param>
    /// <param name="ordernumber">
    /// The given reference number.
    /// </param>
    /// <param name="pickingType">
    /// The current value of invent picking type.
    /// </param>
    /// <returns>
    /// true if the picking quantity is success
    /// </returns>
    public static boolean pickAll(InventLocationId storeInventLocationId, RetailReferenceNo ordernumber, RetailInvPickingType pickingType)
    {
        RetailInvTransferPickingLine pickingLine;

        boolean isSuccess = true;

        ttsBegin;

        while select forUpdate pickingLine
            where pickingLine.Ordernumber == ordernumber
               && pickingLine.OrderType == pickingType
        {
            if (pickingLine.Ordered != pickingLine.QtyPickNow + pickingLine.Picked)
            {
                if (pickingLine.Ordered > pickingline.Picked)
                {
                    pickingLine.QtyPickNow = pickingLine.Ordered - pickingline.Picked;
                }
                else
                {
                    pickingLine.QtyPickNow = 0;
                }

                pickingLine.update();
            }
        }

        ttsCommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiveAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Receives all the quantity available for invent transfer line.
    /// </summary>
    /// <param name="storeInventLocationId">
    /// The given store invent location Id.
    /// </param>
    /// <param name="ordernumber">
    /// The given reference number.
    /// </param>
    /// <param name="receivingType">
    /// The current value of invent receiving type.
    /// </param>
    /// <returns>
    /// true if the receiving quantity is success.
    /// </returns>
    public static boolean receiveAll(InventLocationId storeInventLocationId, RetailReferenceNo ordernumber, RetailInvReceivingType receivingType)
    {
        RetailInvReceivingLine receivingLine;

        boolean isSuccess = true;

        ttsBegin;

        while select forUpdate receivingLine
            where receivingLine.Ordernumber == ordernumber && receivingLine.OrderType == receivingType
        {
            if (receivingLine.Ordered != receivingLine.Received + receivingLine.QtyReceiveNow)
            {
                if (receivingLine.Ordered > receivingLine.Received)
                {
                    receivingLine.QtyReceiveNow = receivingLine.Ordered - receivingLine.Received;
                }
                else
                {
                    receivingLine.QtyReceiveNow = 0;
                }
            }

            receivingLine.update();
        }

        ttsCommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshInventJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory journals for stock counting and update stock count table accordingly
    /// </summary>
    /// <param name="storeInventLocationId">
    /// The given value for store invent location Id.
    /// </param>
    public static void refreshInventJournalTable(InventLocationId storeInventLocationId)
    {
        RetailStockCountTable  stockCount;
        RetailStockCountLine  stockCountLine;
        container openInventJournals;
        str openInventJournalsXmlStr;
        XmlDocument openInventJournalsXml;
        XmlElement xmlRoot;
        XmlNodeList xmlRecordList;
        XmlElement xmlRecord;

        RefRecId refRecId;
        RetailReferenceNo journalId;
        JournalDescription description;
        InventJournalSource source;

        int i;
        Map referenceNumberMap;
        MapEnumerator mapen;
        TransDateTime beginTime;

        #define.InventJournalTables('InventJournalTables')

        if (!storeInventLocationId)
        {
            return;
        }

        beginTime = DateTimeUtil::utcNow();
        openInventJournals = RetailTransactionService::GetInventJournals(storeInventLocationId);
        openInventJournalsXmlStr = conPeek(openInventJournals, 3);

        if (openInventJournalsXmlStr)
        {
            ttsBegin;
            openInventJournalsXml = new XmlDocument();
            openInventJournalsXml.loadXml(openInventJournalsXmlStr);

            xmlRoot = openInventJournalsXml.getNamedElement(#InventJournalTables);
            xmlRecordList = xmlRoot.childNodes();

            // Build the map from xml: journalId ==> index in xml
            referenceNumberMap = new Map(typeOf(journalId), typeOf(i));
            for (i = 0; i < xmlRecordList.length(); i++)
            {
                xmlRecord = xmlRecordList.item(i);
                journalId = xmlRecord.getAttribute(fieldStr(InventJournalTable, JournalId));

                referenceNumberMap.insert(journalId, i);
            }

            // Update RetailStockCount if they are in Xml, or else set IsNotOpenInHQ = true if the count is from HQ (RefRecId > 0)
            // so they can be deleted later.
            // In addition, remove the refRecId from the map. In the end, what's left in the map are new records.
            while select forupdate stockCount
                where stockCount.storeId == storeInventLocationId && stockCount.RefRecId > 0
            {
                if (referenceNumberMap.exists(stockCount.ReferenceNumber))
                {
                    stockCount.IsOpenInHQ = NoYes::Yes;
                    stockCount.update();
                    referenceNumberMap.remove(stockCount.ReferenceNumber);
                }
                else
                {
                    if (stockCount.IsOpenInHQ == NoYes::Yes)
                    {
                        stockCount.LinesLastRefreshedFromHQ = DateTimeUtil::utcNow();
                        stockCount.IsOpenInHQ = NoYes::No;
                        stockCount.update();
                    }
                }
            }

            // Insert new stock counts.
            mapen = new MapEnumerator(referenceNumberMap);
            while (mapen.moveNext())
            {
                i = mapen.currentValue();
                xmlRecord = xmlRecordList.item(i);

                stockCount = null;

                refRecId = str2int64(xmlRecord.getAttribute(fieldStr(InventJournalTable, RecId)));
                journalId = xmlRecord.getAttribute(fieldStr(InventJournalTable, JournalId));
                description = xmlRecord.getAttribute(fieldStr(InventJournalTable, Description));
                source = xmlRecord.getAttribute(fieldStr(InventJournalTable, Source));

                stockCount = null;
                stockCount.ReferenceNumber = journalId;
                stockCount.Description = description;
                if (source)
                {
                    stockCount.Type = RetailStockCountType::Manual;
                }
                else
                {
                    stockCount.Type = RetailStockCountType::Scheduled;
                }
                stockCount.RefRecId = refRecId;
                stockCount.storeId = storeInventLocationId;
                stockCount.IsOpenInHQ = NoYes::Yes;
                stockCount.insert();
            }

            // delete stock counts that are no longer open in HQ, as much as time allows.
            delete_from stockCount
                where stockCount.storeId == storeInventLocationId && stockCount.RefRecId > 0 && stockCount.IsOpenInHQ == NoYes::No;
            while select forUpdate stockCount
                where stockCount.RefRecId > 0 && stockCount.IsOpenInHQ == NoYes::No
            {
                if (DateTimeUtil::utcNow() > DateTimeUtil::addSeconds(beginTime, #RunTimeInSeconds))
                {
                    break;
                }
                delete_from stockCountLine where stockCountLine.ReferenceNumber == stockCount.ReferenceNumber;
                stockCount.delete();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory journal transactions for stock counting and update stock count line accordingly
    /// </summary>
    /// <param name="storeInventLocationId">
    /// The given value for store invent location Id.
    /// </param>
    /// <param name="journalId">
    /// The given value for Journal Id.
    /// </param>
    /// <param name="linesLastRefreshedFromHQ">
    /// The current value for number of lines last refreshed from HQ.
    /// </param>
    /// <param name="forceRefresh">
    /// A boolean value to indicate if the force refresh happen.
    /// </param>
    public static void refreshInventJournalTrans(InventLocationId storeInventLocationId, InventJournalId journalId, TransDateTime linesLastRefreshedFromHQ, boolean forceRefresh = true)
    {
        RetailStockCountLine  stockCountLine;
        container inventJournal;
        str inventJournalXmlStr;
        XmlDocument inventJournalXml;
        XmlElement xmlRoot;
        XmlNodeList xmlRecordList;
        XmlElement xmlRecord;

        RefRecId refRecId;

        int i;

        Map lineRefRecIdMap;
        MapEnumerator mapen;

        void loadInventJournalTransXmlRecord(XmlElement record, RetailStockCountLine countLine)
        {
            countLine.ReferenceNumber = journalId;
            countLine.RefRecId = str2int64(record.getAttribute(fieldStr(InventJournalTrans, RecId)));
            countLine.Itemnumber = record.getAttribute(fieldStr(InventJournalTrans, ItemId));
            countLine.ItemName = record.getAttribute(extendedTypeStr(EcoResProductName));
            countLine.Barcode = record.getAttribute(fieldStr(InventItemBarcode, itemBarCode));
            countLine.Color = record.getAttribute(fieldStr(InventDim, InventColorId));
            countLine.Configuration = record.getAttribute(fieldStr(InventDim, ConfigId));
            countLine.Size = record.getAttribute(fieldStr(InventDim, InventSizeId));
            countLine.Style = record.getAttribute(fieldStr(InventDim, InventStyleId));
            countLine.Version = record.getAttribute(fieldStr(InventDim, InventVersionId));
            countLine.Serialnumber = record.getAttribute(fieldStr(InventDim, InventSerialId));
            countLine.Counted = str2num(record.getAttribute(fieldStr(InventJournalTrans, Counted)));
        }
        ;

        if (!storeInventLocationId || !journalId)
        {
            return;
        }

        if (!RetailStoreInventory::isTimeToRefreshLines(linesLastRefreshedFromHQ, forceRefresh))
        {
            return;
        }

        inventJournal = RetailTransactionService::GetInventJournal(journalId, storeInventLocationId);
        inventJournalXmlStr = conPeek(inventJournal, 3);
        if (inventJournalXmlStr)
        {
            inventJournalXml = new XmlDocument();
            inventJournalXml.loadXml(inventJournalXmlStr);

            xmlRoot = inventJournalXml.getNamedElement(tableStr(InventJournalTable));
            if (xmlRoot)
            {
                ttsBegin;
                xmlRecordList = xmlRoot.childNodes();

                // Build map from xml: RefRecId ==> index in xml
                lineRefRecIdMap = new Map(typeOf(refRecId), typeOf(i));
                for (i = 0; i < xmlRecordList.length(); i++)
                {
                    xmlRecord = xmlRecordList.item(i);
                    refRecId = str2int64(xmlRecord.getAttribute(fieldStr(InventJournalTrans, RecId)));

                    lineRefRecIdMap.insert(refRecId, i);
                }

                // Update RetailStockCountLine if they are in Xml, or else delete them if the line is from HQ (RefRecId > 0).
                // In addition, remove the refRecId from the map. In the end, what's left in the map are new records.
                while select forupdate stockCountLine
                    where stockCountLine.ReferenceNumber == journalId && stockCountLine.RefRecId > 0
                {
                    if (lineRefRecIdMap.exists(stockCountLine.RefRecId))
                    {
                        i = lineRefRecIdMap.lookup(stockCountLine.RefRecId);
                        xmlRecord = xmlRecordList.item(i);
                        loadInventJournalTransXmlRecord(xmlRecord, stockCountLine);
                        stockCountLine.update();
                        lineRefRecIdMap.remove(stockCountLine.RefRecId);
                    }
                    else
                    {
                        stockCountLine.delete();
                    }
                }

                // Insert new lines.
                mapen = new MapEnumerator(lineRefRecIdMap);
                while (mapen.moveNext())
                {
                    i = mapen.currentValue();
                    xmlRecord = xmlRecordList.item(i);

                    stockCountLine = null;
                    loadInventJournalTransXmlRecord(xmlRecord, stockCountLine);
                    stockCountLine.insert();
                }

                RetailStoreInventory::updateStockCountLinesLastRefreshedFromHQ(journalId);
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshRetailInvPickingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory transfer order for inventory transfer picking and update <c>RetailInvTransferPickingLine</c> table accordingly
    /// </summary>
    /// <param name="storeInventLocationId">
    /// The given value for store invent location Id.
    /// </param>
    /// <param name="orderNumber">
    /// The current value for order number.
    /// </param>
    /// <param name="pickingType">
    /// The current value of picking type.
    /// </param>
    /// <param name="linesLastRefreshedFromHQ">
    /// The current value for number of lines last refreshed from HQ.
    /// </param>
    /// <param name="forceRefresh">
    /// A boolean value to indicate if the force refresh happen.
    /// </param>
    public static void refreshRetailInvPickingLines(InventLocationId storeInventLocationId, RetailReferenceNo orderNumber, RetailInvPickingType pickingType, TransDateTime linesLastRefreshedFromHQ, boolean forceRefresh = true)
    {
        RetailInvTransferPickingLine pickingLine;

        container transferOrderLines, salesOrderPickingSlipLines;
        str transferOrderLinesXmlStr, salesOrderPickingSlipLinesXmlStr;
        XmlDocument transferOrderLinesXml, salesOrderPickingSlipLinesXml;
        XmlElement xmlRoot;
        XmlNodeList xmlRecordList;
        XmlElement xmlRecord;

        int i;

        RefRecId refRecId;

        Map lineRefRecIdMap;
        MapEnumerator mapen;

        void loadInventTransferLineXmlRecordIntoPickingLine(XmlElement record, RetailInvTransferPickingLine pickLine)
        {
            InventTransferQtyShipped quantityShipped, quantityShipNow;
            quantityShipped = str2num(record.getAttribute(fieldStr(InventTransferLine, QtyShipped)));
            quantityShipNow = str2num(record.getAttribute(fieldStr(InventTransferLine, QtyShipNow)));

            pickLine.RefRecId = str2int64(record.getAttribute(fieldStr(InventTransferLine, RecId)));
            pickLine.Ordernumber = orderNumber;
            pickLine.OrderType = pickingType;
            pickLine.Itemnumber = record.getAttribute(fieldStr(InventTransferLine, ItemId));
            pickLine.ItemName = record.getAttribute(extendedTypeStr(EcoResProductName));
            pickLine.Barcode = record.getAttribute(fieldStr(InventItemBarcode, itemBarCode));
            pickLine.Color = record.getAttribute(fieldStr(InventDim, InventColorId));
            pickLine.Configuration = record.getAttribute(fieldStr(InventDim, ConfigId));
            pickLine.Size = record.getAttribute(fieldStr(InventDim, InventSizeId));
            pickLine.Style = record.getAttribute(fieldStr(InventDim, InventStyleId));
            pickLine.Version = record.getAttribute(fieldStr(InventDim, InventVersionId));
            pickLine.Ordered = str2num(record.getAttribute(fieldStr(InventTransferLine, QtyTransfer)));
            pickLine.Serialnumber = record.getAttribute(fieldStr(InventDim, InventSerialId));
            pickLine.Picked = quantityShipped + quantityShipNow;
            pickLine.Unit = record.getAttribute(fieldStr(InventTransferLine, UnitId));
        }
        ;

        if (!storeInventLocationId || !orderNumber)
        {
            return;
        }

        if (!RetailStoreInventory::isTimeToRefreshLines(linesLastRefreshedFromHQ, forceRefresh))
        {
            return;
        }

        if (RetailStoreInventory::isPickingTypeInventoryTransfer(pickingType))
        {
            transferOrderLines = RetailTransactionService::GetTransferOrder(orderNumber);

            transferOrderLinesXmlStr = conPeek(transferOrderLines, 3);

            if (transferOrderLinesXmlStr)
            {
                transferOrderLinesXml = new XmlDocument();
                transferOrderLinesXml.loadXml(transferOrderLinesXmlStr);

                xmlRoot = transferOrderLinesXml.getNamedElement(tableStr(InventTransferTable));
                if (xmlRoot)
                {
                    xmlRecordList = xmlRoot.childNodes();

                    // Build map from xml: RefRecId ==> index in xml
                    lineRefRecIdMap = new Map(typeOf(refRecId), typeOf(i));
                    for (i = 0; i < xmlRecordList.length(); i++)
                    {
                        xmlRecord = xmlRecordList.item(i);
                        refRecId = str2int64(xmlRecord.getAttribute(fieldStr(InventTransferLine, RecId)));

                        lineRefRecIdMap.insert(refRecId, i);
                    }

                    ttsbegin;

                    // Update picking line if they are in Xml, or else delete them if the line is from HQ (RefRecId > 0).
                    // In addition, remove the refRecId from the map. In the end, what's left in the map are new records.
                    while select forupdate pickingLine
                        where pickingLine.Ordernumber == orderNumber && pickingLine.OrderType == pickingType && pickingLine.RefRecId > 0
                    {
                        if (lineRefRecIdMap.exists(pickingLine.RefRecId))
                        {
                            i = lineRefRecIdMap.lookup(pickingLine.RefRecId);
                            xmlRecord = xmlRecordList.item(i);
                            loadInventTransferLineXmlRecordIntoPickingLine(xmlRecord, pickingLine);
                            pickingLine.update();

                            lineRefRecIdMap.remove(pickingLine.RefRecId);
                        }
                        else
                        {
                            pickingLine.delete();
                        }
                    }

                    // Insert new lines.
                    mapen = new MapEnumerator(lineRefRecIdMap);
                    while (mapen.moveNext())
                    {
                        i = mapen.currentValue();
                        xmlRecord = xmlRecordList.item(i);

                        pickingLine = null;
                        loadInventTransferLineXmlRecordIntoPickingLine(xmlRecord, pickingLine);
                        pickingLine.doInsert();
                    }

                    RetailStoreInventory::updatePickingLinesLastRefreshedFromHQ(orderNumber, pickingType);

                    ttscommit;
                }
            }
        }
        else if (RetailStoreInventory::isPickingTypeSalesOrder(pickingType))
        {
            salesOrderPickingSlipLines = RetailTransactionService::GetPickingList(orderNumber,storeInventLocationId);

            salesOrderPickingSlipLinesXmlStr = conPeek(salesOrderPickingSlipLines, 3);

            if (salesOrderPickingSlipLinesXmlStr)
            {
                salesOrderPickingSlipLinesXml = new XmlDocument();
                salesOrderPickingSlipLinesXml.loadXml(salesOrderPickingSlipLinesXmlStr);

                xmlRoot = salesOrderPickingSlipLinesXml.getNamedElement(tableStr(WMSOrderTrans));
                if (xmlRoot)
                {
                    xmlRecordList = xmlRoot.childNodes();

                    // Build map from xml: RefRecId ==> index in xml
                    lineRefRecIdMap = new Map(typeOf(refRecId), typeOf(i));
                    for (i = 0; i < xmlRecordList.length(); i++)
                    {
                        xmlRecord = xmlRecordList.item(i);
                        refRecId = str2int64(xmlRecord.getAttribute(fieldStr(WMSOrderTrans, RecId)));

                        lineRefRecIdMap.insert(refRecId, i);
                    }
                    ttsbegin;

                    // Update picking line if they are in Xml, or else delete them if the line is from HQ (RefRecId > 0).
                    // In addition, remove the refRecId from the map. In the end, what's left in the map are new records.
                    while select forupdate pickingLine
                        where pickingLine.Ordernumber == orderNumber && pickingLine.OrderType == pickingType && pickingLine.RefRecId > 0
                    {
                        if (lineRefRecIdMap.exists(pickingLine.RefRecId))
                        {
                            i = lineRefRecIdMap.lookup(pickingLine.RefRecId);
                            xmlRecord = xmlRecordList.item(i);

                            pickingLine.RefRecId = str2int64(xmlRecord.getAttribute(fieldStr(WMSOrderTrans, RecId)));
                            pickingLine.Ordernumber = orderNumber;
                            pickingLine.OrderType = pickingType;
                            pickingLine.Itemnumber = xmlRecord.getAttribute(fieldStr(WMSOrderTrans, ItemId));
                            pickingLine.Color = xmlRecord.getAttribute(fieldStr(InventDim, InventColorId));
                            pickingLine.Configuration = xmlRecord.getAttribute(fieldStr(InventDim, ConfigId));
                            pickingLine.Version = xmlRecord.getAttribute(fieldStr(InventDim, InventVersionId));
                            pickingLine.Ordered = str2num(xmlRecord.getAttribute(fieldStr(WMSOrderTrans, Qty)));
                            pickingLine.Serialnumber = xmlRecord.getAttribute(fieldStr(InventDim, InventSerialId));
                            pickingLine.Picked = 0;
                            pickingLine.update();

                            lineRefRecIdMap.remove(pickingLine.RefRecId);
                        }
                        else
                        {
                            pickingLine.delete();
                        }
                    }

                    // Insert new lines.
                    mapen = new MapEnumerator(lineRefRecIdMap);
                    while (mapen.moveNext())
                    {
                        i = mapen.currentValue();
                        xmlRecord = xmlRecordList.item(i);

                        pickingLine = null;
                        pickingLine.RefRecId = str2int64(xmlRecord.getAttribute(fieldStr(WMSOrderTrans, RecId)));
                        pickingLine.Ordernumber = orderNumber;
                        pickingLine.OrderType = pickingType;
                        pickingLine.Itemnumber = xmlRecord.getAttribute(fieldStr(WMSOrderTrans, ItemId));
                        pickingLine.Color = xmlRecord.getAttribute(fieldStr(InventDim, InventColorId));
                        pickingLine.Configuration = xmlRecord.getAttribute(fieldStr(InventDim, ConfigId));
                        pickingLine.Version = xmlRecord.getAttribute(fieldStr(InventDim, InventVersionId));
                        pickingLine.Ordered = str2num(xmlRecord.getAttribute(fieldStr(WMSOrderTrans, Qty)));
                        pickingLine.Serialnumber = xmlRecord.getAttribute(fieldStr(InventDim, InventSerialId));
                        pickingLine.Picked = 0;

                        pickingLine.doInsert();
                    }

                    RetailStoreInventory::updatePickingLinesLastRefreshedFromHQ(orderNumber, pickingType);

                    ttsCommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshRetailInvPickingListTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the open inventory transfer orders for inventory transfer picking and update <c>RetailInvTransferPickingTable</c> table accordingly
    /// </summary>
    /// <param name="storeInventLocationId">
    /// The given value for store invent location Id.
    /// </param>
    public static void refreshRetailInvPickingListTable(InventLocationId storeInventLocationId)
    {
        RetailInvTransferPickingListTable   pickingOrder;
        RetailInvPickingType pickingType;

        container openTransferOrders;
        str openTransferOrdersXmlStr;
        XmlDocument openTransferOrdersXml;
        XmlElement xmlRoot;
        XmlNodeList xmlRecordList;
        XmlElement xmlRecord;

        int i;

        InventTransferId transferId;
        str transferFrom;
        str transferTo;

        Map referenceNumberMap;
        MapEnumerator mapen;
        TransDateTime beginTime;

        #define.RunTimeInSeconds(60)
        #define.InventTransferTables('InventTransferTables')

        if (!storeInventLocationId)
        {
            return;
        }

        beginTime = DateTimeUtil::utcNow();
        pickingType = RetailInvPickingType::InventoryTransfer;

        openTransferOrders = RetailTransactionService::GetOpenTransferOrders(storeInventLocationId);

        openTransferOrdersXmlStr = conPeek(openTransferOrders, 3);

        if (openTransferOrdersXmlStr)
        {
            openTransferOrdersXml = new XmlDocument();
            openTransferOrdersXml.loadXml(openTransferOrdersXmlStr);

            xmlRoot = openTransferOrdersXml.getNamedElement(#InventTransferTables);
            xmlRecordList = xmlRoot.childNodes();

            // Build the map from xml: transferId ==> index in xml
            referenceNumberMap = new Map(typeOf(transferId), typeOf(i));
            for (i = 0; i < xmlRecordList.length(); i++)
            {
                xmlRecord = xmlRecordList.item(i);
                transferId = xmlRecord.getAttribute(fieldStr(InventTransferTable, TransferId));

                referenceNumberMap.insert(transferId, i);
            }

            ttsBegin;

            // Update picking table if they are in Xml, or else set IsNotOpenInHQ = true so they can be deleted later.
            // In addition, remove the refRecId from the map. In the end, what's left in the map are new records.
            while select forupdate pickingOrder
                where pickingOrder.storeId == storeInventLocationId && pickingOrder.OrderType == pickingType
            {
                if (referenceNumberMap.exists(pickingOrder.OrderNumber))
                {
                    pickingOrder.IsOpenInHQ = NoYes::YES;
                    pickingOrder.update();
                    referenceNumberMap.remove(pickingOrder.OrderNumber);
                }
                else
                {
                    if (pickingOrder.IsOpenInHQ == NoYes::Yes)
                    {
                        pickingOrder.LinesLastRefreshedFromHQ = DateTimeUtil::utcNow();
                        pickingOrder.IsOpenInHQ = NoYes::No;
                        pickingOrder.update();
                    }
                }
            }

            // Insert TO into picking order.
            mapen = new MapEnumerator(referenceNumberMap);
            while (mapen.moveNext())
            {
                i = mapen.currentValue();
                xmlRecord = xmlRecordList.item(i);
                transferId = xmlRecord.getAttribute(fieldStr(InventTransferTable, TransferId));
                transferFrom = xmlRecord.getAttribute(fieldStr(InventTransferTable, InventLocationIdFrom));
                transferTo = xmlRecord.getAttribute(fieldStr(InventTransferTable, InventLocationIdTo));

                if (transferFrom == storeInventLocationId)
                {
                    pickingOrder = null;
                    pickingOrder.Ordernumber = transferId;
                    pickingOrder.storeId = storeInventLocationId;
                    pickingOrder.OrderType = pickingType;
                    pickingOrder.IsOpenInHQ = NoYes::YES;

                    pickingOrder.doInsert();
                }
            }

            RetailStoreInventory::deletePickingTableNotOpenInHQ(pickingType, beginTime);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshRetailInvPickingListTable4SO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the store picking lists for sales order and update <c>RetailInvTransferPickingListTable</c> table accordingly.
    /// </summary>
    /// <param name="storeInventLocationId">
    /// The given value for store invent location Id.
    /// </param>
    private static void refreshRetailInvPickingListTable4SO(InventLocationId storeInventLocationId)
    {
        RetailInvTransferPickingListTable   pickingOrder;
        RetailInvPickingType pickingType;

        container openSalesPickingSlips;
        str openSalesPickingSlipsStr;
        XmlDocument openSalesPickingSlipsXml;
        XmlElement xmlRoot;
        XmlNodeList xmlRecordList;
        XmlElement xmlRecord;

        int i;

        WMSPickingRouteID pickingRouteId;
        WMSDlvDate deliveryDate;

        Map referenceNumberMap;
        MapEnumerator mapen;
        TransDateTime beginTime;

        #define.WmsPickingRoutes('WmsPickingRoutes');

        beginTime = DateTimeUtil::utcNow();
        pickingType = RetailInvPickingType::SalesOrder;

        openSalesPickingSlips = RetailTransactionService::GetPickingLists(storeInventLocationId);

        openSalesPickingSlipsStr = conPeek(openSalesPickingSlips, 3);

        if (openSalesPickingSlipsStr)
        {
            openSalesPickingSlipsXml = new XmlDocument();
            openSalesPickingSlipsXml.loadXml(openSalesPickingSlipsStr);

            xmlRoot = openSalesPickingSlipsXml.getNamedElement(#WmsPickingRoutes);
            xmlRecordList = xmlRoot.childNodes();

            // Build the map from xml: pickingRouteId ==> index in xml
            referenceNumberMap = new Map(typeOf(pickingRouteId), typeOf(i));
            for (i = 0; i < xmlRecordList.length(); i++)
            {
                xmlRecord = xmlRecordList.item(i);
                pickingRouteId = xmlRecord.getAttribute(fieldStr(WmsPickingRoute, PickingRouteId));

                referenceNumberMap.insert(pickingRouteId, i);
            }

            ttsBegin;

            // Update picking table if they are in Xml, or else set IsNotOpenInHQ = true so they can be deleted later.
            // In addition, remove the refRecId from the map. In the end, what's left in the map are new records.
            while select forupdate pickingOrder
                where pickingOrder.OrderType == pickingType
            {
                if (referenceNumberMap.exists(pickingOrder.OrderNumber))
                {
                    pickingOrder.IsOpenInHQ = NoYes::Yes;
                    pickingOrder.update();
                    referenceNumberMap.remove(pickingOrder.OrderNumber);
                }
                else
                {
                    if (pickingOrder.IsOpenInHQ == NoYes::Yes)
                    {
                        pickingOrder.LinesLastRefreshedFromHQ = DateTimeUtil::utcNow();
                        pickingOrder.IsOpenInHQ = NoYes::No;
                        pickingOrder.update();
                    }
                }
            }

            // Insert TO into picking order.
            mapen = new MapEnumerator(referenceNumberMap);
            while (mapen.moveNext())
            {
                i = mapen.currentValue();
                xmlRecord = xmlRecordList.item(i);
                pickingRouteId = xmlRecord.getAttribute(fieldStr(WMSPickingRoute, PickingRouteId));
                deliveryDate = str2Date(xmlRecord.getAttribute(fieldStr(WMSPickingRoute, DlvDate)), 321);

                pickingOrder = null;
                pickingOrder.Ordernumber = pickingRouteId;
                pickingOrder.storeId = storeInventLocationId;
                pickingOrder.OrderType = pickingType;

                pickingOrder.doInsert();
            }

            RetailStoreInventory::deletePickingTableNotOpenInHQ(pickingType, beginTime);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshRetailInvReceivingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the store receiving lists for purchase order and update <c>RetailInvReceivingLine</c> table accordingly.
    /// </summary>
    /// <param name="storeInventLocationId">
    /// The given value for store invent location Id.
    /// </param>
    /// <param name="orderNumber">
    /// The current value for order number.
    /// </param>
    /// <param name="receivingType">
    /// The current value of receiving type.
    /// </param>
    /// <param name="linesLastRefreshedFromHQ">
    /// The current value for number of lines last refreshed from HQ.
    /// </param>
    /// <param name="forceRefresh">
    /// A boolean value to indicate if the force refresh happen.
    /// </param>
    public static void refreshRetailInvReceivingLines(InventLocationId storeInventLocationId, RetailReferenceNo orderNumber, RetailInvReceivingType receivingType, TransDateTime linesLastRefreshedFromHQ, boolean forceRefresh = true)
    {
        RetailInvReceivingLine    receivingLine;

        container purchaseOrderLines, transferOrderLines;
        str purchaseOrderLinesXmlStr, transferOrderLinesXmlStr;
        XmlDocument purchaseOrderLinesXml, transferOrderLinesXml;
        XmlElement xmlRoot;
        XmlNodeList xmlRecordList;
        XmlElement xmlRecord;

        int i;

        RefRecId refRecId;

        Map lineRefRecIdMap;
        MapEnumerator mapen;

        void loadPurchLineXmlRecordIntoReceivingLine(XmlElement record, RetailInvReceivingLine receiveLine)
        {
            PurchQty purchaseReceivedNow = str2num(record.getAttribute(fieldStr(PurchLine, PurchReceivedNow)));
            receiveLine.Ordernumber = orderNumber;
            receiveLine.OrderType = receivingType;
            receiveLine.RefRecId = str2int64(record.getAttribute(fieldStr(PurchLine, RecId)));
            receiveLine.Itemnumber = record.getAttribute(fieldStr(PurchLine, ItemId));
            receiveLine.ItemName = record.getAttribute(extendedTypeStr(EcoResProductName));
            receiveLine.Barcode = record.getAttribute(fieldStr(PurchLine, BarCode));
            receiveLine.Color = record.getAttribute(fieldStr(InventDim, InventColorId));
            receiveLine.Configuration = record.getAttribute(fieldStr(InventDim, ConfigId));
            receiveLine.Size = record.getAttribute(fieldStr(InventDim, InventSizeId));
            receiveLine.Style = record.getAttribute(fieldStr(InventDim, InventStyleId));
            receiveLine.Version = record.getAttribute(fieldStr(InventDim, InventVersionId));
            receiveLine.Ordered = str2num(record.getAttribute(fieldStr(PurchLine, QtyOrdered)));
            receiveLine.Serialnumber = record.getAttribute(fieldStr(InventDim, InventSerialId));
            receiveLine.Unit = record.getAttribute(fieldStr(PurchLine, PurchUnit));
            receiveLine.Received = purchaseReceivedNow;
        }

        void loadInventTransferLineXmlRecordIntoReceivingLine(XmlElement record, RetailInvReceivingLine receiveLine)
        {
            InventTransferQtyReceived quantityReceived = str2num(record.getAttribute(fieldStr(InventTransferLine, QtyReceived)));
            InventTransferQtyReceived quantityReceiveNow = str2num(record.getAttribute(fieldStr(InventTransferLine, QtyReceiveNow)));

            receiveLine.RefRecId = str2int64(record.getAttribute(fieldStr(InventTransferLine, RecId)));
            receiveLine.Ordernumber = orderNumber;
            receiveLine.OrderType = receivingType;
            receiveLine.Itemnumber = record.getAttribute(fieldStr(InventTransferLine, ItemId));
            receiveLine.ItemName = record.getAttribute(extendedTypeStr(EcoResProductName));
            receivingLine.Barcode = record.getAttribute(fieldStr(InventItemBarcode, itemBarCode));
            receiveLine.Color = record.getAttribute(fieldStr(InventDim, InventColorId));
            receiveLine.Configuration = record.getAttribute(fieldStr(InventDim, ConfigId));
            receiveLine.Size = record.getAttribute(fieldStr(InventDim, InventSizeId));
            receiveLine.Style = record.getAttribute(fieldStr(InventDim, InventStyleId));
            receiveLine.Version = record.getAttribute(fieldStr(InventDim, InventVersionId));
            receiveLine.Ordered = str2num(record.getAttribute(fieldStr(InventTransferLine, QtyTransfer)));
            receiveLine.Serialnumber = record.getAttribute(fieldStr(InventDim, InventSerialId));
            receiveLine.Received = quantityReceived + quantityReceiveNow;
            receiveLine.Unit = record.getAttribute(fieldStr(InventTransferLine, UnitId));
        }
        ;

        if (!storeInventLocationId || !orderNumber)
        {
            return;
        }

        if (!RetailStoreInventory::isTimeToRefreshLines(linesLastRefreshedFromHQ, forceRefresh))
        {
            return;
        }

        if (receivingType == RetailInvReceivingType::Purchaseorder)
        {
            purchaseOrderLines = RetailTransactionService::GetPurchaseOrder(orderNumber, storeInventLocationId);

            purchaseOrderLinesXmlStr = conPeek(purchaseOrderLines, 3);

            if (purchaseOrderLinesXmlStr)
            {
                purchaseOrderLinesXml = new XmlDocument();
                purchaseOrderLinesXml.loadXml(purchaseOrderLinesXmlStr);

                xmlRoot = purchaseOrderLinesXml.getNamedElement(tableStr(PurchTable));
                if (xmlRoot)
                {
                    xmlRecordList = xmlRoot.childNodes();

                    // Build map from xml: RefRecId ==> index in xml
                    lineRefRecIdMap = new Map(typeOf(refRecId), typeOf(i));
                    for (i = 0; i < xmlRecordList.length(); i++)
                    {
                        xmlRecord = xmlRecordList.item(i);
                        refRecId = str2int64(xmlRecord.getAttribute(fieldStr(PurchLine, RecId)));

                        lineRefRecIdMap.insert(refRecId, i);
                    }

                    ttsBegin;

                    // Update receiving line if they are in Xml, or else delete them if the line is from HQ (RefRecId > 0).
                    // In addition, remove the refRecId from the map. In the end, what's left in the map are new records.
                    while select forupdate receivingLine
                        where receivingLine.Ordernumber == orderNumber && receivingLine.OrderType == receivingType && receivingLine.RefRecId > 0
                    {
                        if (lineRefRecIdMap.exists(receivingLine.RefRecId))
                        {
                            i = lineRefRecIdMap.lookup(receivingLine.RefRecId);
                            xmlRecord = xmlRecordList.item(i);

                            loadPurchLineXmlRecordIntoReceivingLine(xmlRecord, receivingLine);

                            receivingLine.update();
                            lineRefRecIdMap.remove(receivingLine.RefRecId);
                        }
                        else
                        {
                            receivingLine.delete();
                        }
                    }

                    // Insert new lines.
                    mapen = new MapEnumerator(lineRefRecIdMap);
                    while (mapen.moveNext())
                    {
                        i = mapen.currentValue();
                        xmlRecord = xmlRecordList.item(i);

                        receivingLine = null;

                        loadPurchLineXmlRecordIntoReceivingLine(xmlRecord, receivingLine);

                        receivingLine.doInsert();
                    }

                    RetailStoreInventory::updateReceivingLinesLastRefreshedFromHQ(orderNumber, receivingType);

                    ttsCommit;
                }
            }
        }
        else if (receivingType == RetailInvReceivingType::InventoryTransfer)
        {
            transferOrderLines = RetailTransactionService::GetTransferOrder(orderNumber);

            transferOrderLinesXmlStr = conPeek(transferOrderLines, 3);

            if (transferOrderLinesXmlStr)
            {
                transferOrderLinesXml = new XmlDocument();
                transferOrderLinesXml.loadXml(transferOrderLinesXmlStr);

                xmlRoot = transferOrderLinesXml.getNamedElement(tableStr(InventTransferTable));
                if (xmlRoot)
                {
                    xmlRecordList = xmlRoot.childNodes();

                    // Build map from xml: RefRecId ==> index in xml
                    lineRefRecIdMap = new Map(typeOf(refRecId), typeOf(i));
                    for (i = 0; i < xmlRecordList.length(); i++)
                    {
                        xmlRecord = xmlRecordList.item(i);
                        refRecId = str2int64(xmlRecord.getAttribute(fieldStr(InventTransferLine, RecId)));

                        lineRefRecIdMap.insert(refRecId, i);
                    }

                    ttsBegin;

                    // Update receiving line if they are in Xml, or else delete them if the line is from HQ (RefRecId > 0).
                    // In addition, remove the refRecId from the map. In the end, what's left in the map are new records.
                    while select forupdate receivingLine
                        where receivingLine.Ordernumber == orderNumber && receivingLine.OrderType == receivingType && receivingLine.RefRecId > 0
                    {
                        if (lineRefRecIdMap.exists(receivingLine.RefRecId))
                        {
                            i = lineRefRecIdMap.lookup(receivingLine.RefRecId);
                            xmlRecord = xmlRecordList.item(i);

                            loadInventTransferLineXmlRecordIntoReceivingLine(xmlRecord, receivingLine);

                            receivingLine.update();

                            lineRefRecIdMap.remove(receivingLine.RefRecId);
                        }
                        else
                        {
                            receivingLine.delete();
                        }
                    }

                    // Insert new lines.
                    mapen = new MapEnumerator(lineRefRecIdMap);
                    while (mapen.moveNext())
                    {
                        i = mapen.currentValue();
                        xmlRecord = xmlRecordList.item(i);

                        receivingLine = null;
                        loadInventTransferLineXmlRecordIntoReceivingLine(xmlRecord, receivingLine);

                        receivingLine.doInsert();
                    }

                    RetailStoreInventory::updateReceivingLinesLastRefreshedFromHQ(orderNumber, receivingType);

                    ttsCommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshRetailInvReceivingListTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the open store receiving lists for purchase order and update <c>RetailInvReceivingListTable</c> table accordingly.
    /// </summary>
    /// <param name="storeInventLocationId">
    /// The given value for store invent location Id.
    /// </param>
    public static void refreshRetailInvReceivingListTable(InventLocationId storeInventLocationId)
    {
        RetailInvReceivingListTable    receivingOrder;

        RetailInvReceivingType receivingType;

        container openPurchaseOrders, openTransferOrders;
        str openPurchaseOrdersXmlStr, openTransferOrdersXmlStr;
        XmlDocument openPurchaseOrdersXml, openTransferOrdersXml;
        XmlElement xmlRoot;
        XmlNodeList xmlRecordList;
        XmlElement xmlRecord;

        int i;

        PurchId purchId;
        PurchName purchName;
        PurchStatus purchStatus;
        date deliveryDate;

        InventTransferId transferId;
        InventLocationId transferFrom;
        InventLocationId transferTo;
        date shipDate;

        Map referenceNumberMap;
        MapEnumerator mapen;
        TransDateTime beginTime;

        #define.RunTimeInSeconds(60)
        #define.PurchaseTables('PurchTables')
        #define.InventTransferTables('InventTransferTables')

        if (!storeInventLocationId)
        {
            return;
        }

        beginTime = DateTimeUtil::utcNow();
        receivingType = RetailInvReceivingType::Purchaseorder;
        openPurchaseOrders = RetailTransactionService::GetOpenPurchaseOrders(storeInventLocationId);

        openPurchaseOrdersXmlStr = conPeek(openPurchaseOrders, 3);

        if (openPurchaseOrdersXmlStr)
        {
            ttsbegin;

            openPurchaseOrdersXml = new XmlDocument();
            openPurchaseOrdersXml.loadXml(openPurchaseOrdersXmlStr);

            xmlRoot = openPurchaseOrdersXml.getNamedElement(#PurchaseTables);
            xmlRecordList = xmlRoot.childNodes();

            // Build the map from xml: purchId ==> index in xml
            referenceNumberMap = new Map(typeOf(purchId), typeOf(i));
            for (i = 0; i < xmlRecordList.length(); i++)
            {
                xmlRecord = xmlRecordList.item(i);
                purchId = xmlRecord.getAttribute(fieldStr(PurchTable, PurchId));

                referenceNumberMap.insert(purchId, i);
            }

            // Update receiving table if they are in Xml, or else set IsNotOpenInHQ = true so they can be deleted later.
            // In addition, remove the refRecId from the map. In the end, what's left in the map are new records.
            while select forupdate receivingOrder
                where receivingOrder.storeId == storeInventLocationId && receivingOrder.Type == receivingType
            {
                if (referenceNumberMap.exists(receivingOrder.Ordernumber))
                {
                    receivingOrder.IsOpenInHQ = NoYes::Yes;
                    receivingOrder.update();
                    referenceNumberMap.remove(receivingOrder.Ordernumber);
                }
                else
                {
                    if (receivingOrder.IsOpenInHQ == NoYes::Yes)
                    {
                        receivingOrder.LinesLastRefreshedFromHQ = DateTimeUtil::utcNow();
                        receivingOrder.IsOpenInHQ = NoYes::No;
                        receivingOrder.update();
                    }
                }
            }

            // Insert PO into receiving order.
            mapen = new MapEnumerator(referenceNumberMap);
            while (mapen.moveNext())
            {
                i = mapen.currentValue();
                xmlRecord = xmlRecordList.item(i);

                purchId = xmlRecord.getAttribute(fieldstr(PurchTable, PurchId));
                purchName = xmlRecord.getAttribute(fieldstr(PurchTable, PurchName));
                purchStatus = str2enum(PurchStatus, xmlRecord.getAttribute(fieldstr(PurchTable, PurchStatus)));
                deliveryDate = str2Date(xmlRecord.getAttribute(fieldstr(PurchTable, DeliveryDate)), 321);

                receivingOrder = null;
                receivingOrder.Ordernumber = purchId;
                receivingOrder.Type = receivingType;
                receivingOrder.storeId = storeInventLocationId;
                receivingOrder.IsOpenInHQ = NoYes::Yes;

                receivingOrder.doInsert();
            }

            RetailStoreInventory::deleteReceivingTableNotOpenInHQ(receivingType, beginTime);

            ttsCommit;
        }

        beginTime = DateTimeUtil::utcNow();
        receivingType = RetailInvReceivingType::InventoryTransfer;
        openTransferOrders = RetailTransactionService::GetOpenTransferOrders(storeInventLocationId);
        openTransferOrdersXmlStr = conPeek(openTransferOrders, 3);

        if (openTransferOrdersXmlStr)
        {
            openTransferOrdersXml = new XmlDocument();
            openTransferOrdersXml.loadXml(openTransferOrdersXmlStr);

            xmlRoot = openTransferOrdersXml.getNamedElement(#InventTransferTables);
            xmlRecordList = xmlRoot.childNodes();

            // Build the map from xml: transferId ==> index in xml
            referenceNumberMap = new Map(typeOf(transferId), typeOf(i));
            for (i = 0; i < xmlRecordList.length(); i++)
            {
                xmlRecord = xmlRecordList.item(i);
                transferId = xmlRecord.getAttribute(fieldStr(InventTransferTable, TransferId));

                referenceNumberMap.insert(transferId, i);
            }

            ttsBegin;

            // Update receiving table if they are in Xml, or else set IsOpenInHQ = No so they can be deleted later.
            // In addition, remove the refRecId from the map. In the end, what's left in the map are new records.
            while select forupdate receivingOrder
                where receivingOrder.storeId == storeInventLocationId && receivingOrder.Type == receivingType
            {
                if (referenceNumberMap.exists(receivingOrder.Ordernumber))
                {
                    receivingOrder.IsOpenInHQ = NoYes::Yes;
                    receivingOrder.update();
                    referenceNumberMap.remove(receivingOrder.Ordernumber);
                }
                else
                {
                    if (receivingOrder.IsOpenInHQ == NoYes::Yes)
                    {
                        receivingOrder.LinesLastRefreshedFromHQ = DateTimeUtil::utcNow();
                        receivingOrder.IsOpenInHQ = NoYes::No;
                        receivingOrder.update();
                    }
                }
            }

            // Insert TO into receiving order.
            mapen = new MapEnumerator(referenceNumberMap);
            while (mapen.moveNext())
            {
                i = mapen.currentValue();
                xmlRecord = xmlRecordList.item(i);
                transferId = xmlRecord.getAttribute(fieldStr(InventTransferTable, TransferId));
                transferFrom = xmlRecord.getAttribute(fieldStr(InventTransferTable, InventLocationIdFrom));
                transferTo = xmlRecord.getAttribute(fieldStr(InventTransferTable, InventLocationIdTo));
                shipDate = str2Date(xmlRecord.getAttribute(fieldStr(InventTransferTable, ShipDate)), 321);

                if (transferTo == storeInventLocationId)
                {
                    receivingOrder = null;
                    receivingOrder.Ordernumber = transferId;
                    receivingOrder.Type = RetailInvReceivingType::InventoryTransfer;
                    receivingOrder.storeId = storeInventLocationId;
                    receivingOrder.IsOpenInHQ = NoYes::Yes;

                    receivingOrder.doInsert();
                }
            }

            RetailStoreInventory::deleteReceivingTableNotOpenInHQ(receivingType, beginTime);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitInventoryJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an Xml Document with inventory dimension values and deletes the line .
    /// </summary>
    /// <param name="storeInventLocationId">
    /// Identification of Warehouse.
    /// </param>
    /// <param name="journalId">
    /// Identification of the journal.
    /// </param>
    /// <returns>
    /// A boolean value, true if the line is updated; otherwise false.
    /// </returns>
    public static boolean submitInventoryJournal(InventLocationId storeInventLocationId, InventJournalId journalId)
    {
        RetailStockCountLine retailStockCountLine;
        container updateInventoryJournalResponse;
        XmlDocument             xmlDoc;
        XmlElement              xmlRoot;
        XmlElement              xmlRecord;

        str updateInventJournalXmlStr;
        XmlDocument updateInventJournalXml;
        XmlNodeList xmlRecordList;

        RefRecId recId;
        ItemId itemId;
        str message;
        int i;
        str result;

        InventLocation storeInventLocation = InventLocation::find(storeInventLocationId);

        boolean ret = true;

        ttsBegin;

        xmlDoc = XmlDocument::newBlank();
        xmlRoot = xmlDoc.createElement(tableStr(InventJournalTable));
        xmlRoot.setAttribute(fieldStr(InventJournalTable, JournalId), journalId);

        while select RefRecId, CountNow, ItemNumber, Size, Color, Style, Version, Configuration, SerialNumber, RecId
            from RetailStockCountLine
            where retailStockCountLine.ReferenceNumber == journalId && retailStockCountLine.CountNow > 0
        {
            xmlRecord = xmlDoc.createElement(tableStr(InventJournalTrans));
            xmlRecord.setAttribute(fieldStr(InventJournalTrans, RecId), int642str(retailStockCountLine.RefRecId));
            xmlRecord.setAttribute(fieldStr(InventJournalTrans, Counted), num2str(retailStockCountLine.CountNow, 0, 2, 1, 0));
            xmlRecord.setAttribute(fieldStr(InventJournalTrans, ItemId), retailStockCountLine.ItemNumber);
            xmlRecord.setAttribute(fieldStr(InventDim, InventSiteId), storeInventLocation.InventSiteId);
            xmlRecord.setAttribute(fieldStr(InventDim, InventSizeId), retailStockCountLine.Size);
            xmlRecord.setAttribute(fieldStr(InventDim, InventColorId), retailStockCountLine.Color);
            xmlRecord.setAttribute(fieldStr(InventDim, InventStyleId), retailStockCountLine.Style);
            xmlRecord.setAttribute(fieldStr(InventDim, InventVersionId), retailStockCountLine.Version);
            xmlRecord.setAttribute(fieldStr(InventDim, ConfigId), retailStockCountLine.Configuration);
            xmlRecord.setAttribute(fieldStr(InventDim, InventSerialId), retailStockCountLine.SerialNumber);
            xmlRecord.setAttribute(fieldStr(InventDim, InventLocationId), storeInventLocationId);

            xmlRecord.setAttribute(#MyRecId, int642str(retailStockCountLine.RecId));

            xmlRoot.appendChild(xmlRecord);
        }

        xmlDoc.appendChild(xmlRoot);

        updateInventoryJournalResponse = RetailTransactionService::UpdateInventoryJournal(xmlDoc.toString());

        updateInventJournalXmlStr = conPeek(updateInventoryJournalResponse, 3);
        ret = conPeek(updateInventoryJournalResponse, 1);

        if (ret)
        {
            // If a line is updaed successfully, delete it from RetailStockCountLine.
            if (updateInventJournalXmlStr)
            {
                updateInventJournalXml = new XmlDocument();
                updateInventJournalXml.loadXml(updateInventJournalXmlStr);

                xmlRoot = updateInventJournalXml.getNamedElement(tableStr(InventJournalTable));

                xmlRecordList = xmlRoot.childNodes();

                for (i = 0; i < xmlRecordList.length(); i++)
                {
                    xmlRecord = xmlRecordList.item(i);
                    result = xmlRecord.getAttribute(#UpdatedInAx);
                    if (result == #TrueStr)
                    {
                        recId = str2int64(xmlRecord.getAttribute(#MyRecId));
                        retailStockCountLine = RetailStockCountLine::findByRecId(journalId, recId, true);
                        retailStockCountLine.delete();
                    }
                    else
                    {
                        message = xmlRecord.getAttribute(#Message);
                        itemId = xmlRecord.getAttribute(fieldStr(InventJournalTrans, ItemId));
                        warning(message + #BlankString + itemId);
                        ret = false;
                    }
                }
            }
        }
        else
        {
            message = conPeek(updateInventoryJournalResponse, 2);
            warning(message);
        }

        ttsCommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitRetailInvPickingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an Xml Document with inventory dimension values and deletes the line .
    /// </summary>
    /// <param name="storeInventLocationId">
    /// Identification of Warehouse.
    /// </param>
    /// <param name="ordernumber">
    /// Reference number of the order.
    /// </param>
    /// <param name="pickingType">
    /// Type of the picking.
    /// </param>
    /// <returns>
    /// A boolean value, true if the line is updated successfully; otherwise false.
    /// </returns>
    public static boolean submitRetailInvPickingLines(InventLocationId storeInventLocationId, RetailReferenceNo ordernumber, RetailInvPickingType pickingType)
    {
        RetailInvTransferPickingLine pickingLine;
        container updateTransferOrderResponse;
        XmlDocument             xmlDoc;
        XmlElement              xmlRoot;
        XmlElement              xmlRecord;

        str transferOrderLinesXmlStr;
        XmlDocument transferOrderLinesXml;
        XmlNodeList xmlRecordList;

        InventLocation storeInventLocation = InventLocation::find(storeInventLocationId);

        boolean ret = true;

        xmlDoc = XmlDocument::newBlank();

        if (RetailStoreInventory::isPickingTypeInventoryTransfer(pickingType))
        {
            xmlRoot = xmlDoc.createElement(tableStr(InventTransferTable));
            xmlRoot.setAttribute(fieldStr(InventTransferTable, TransferId), ordernumber);

            while select RefRecId, QtyPickNow, ItemNumber, Size, Color, Style, Version, Configuration, SerialNumber, RecId, Unit
                 from pickingLine
                where pickingLine.Ordernumber == ordernumber
                   && pickingLine.OrderType == pickingType
                   && pickingLine.QtyPickNow > 0
            {
                xmlRecord = xmlDoc.createElement(tableStr(InventTransferLine));
                xmlRecord.setAttribute(fieldStr(InventTransferLine, RecId), int642str(pickingLine.RefRecId));
                xmlRecord.setAttribute(fieldStr(InventTransferLine, QtyShipNow), num2str(pickingLine.QtyPickNow, 0, 2, 1, 0));
                xmlRecord.setAttribute(fieldStr(InventTransferLine, UnitId), pickingLine.Unit);
                xmlRecord.setAttribute(fieldStr(InventTransferLine, ItemId), pickingLine.ItemNumber);
                xmlRecord.setAttribute(fieldStr(InventDim, InventSiteId), storeInventLocation.InventSiteId);
                xmlRecord.setAttribute(fieldStr(InventDim, InventLocationId), storeInventLocationId);
                xmlRecord.setAttribute(fieldStr(InventDim, InventSizeId), pickingLine.Size);
                xmlRecord.setAttribute(fieldStr(InventDim, InventColorId), pickingLine.Color);
                xmlRecord.setAttribute(fieldStr(InventDim, InventStyleId), pickingLine.Style);
                xmlRecord.setAttribute(fieldStr(InventDim, InventVersionId), pickingLine.Version);
                xmlRecord.setAttribute(fieldStr(InventDim, ConfigId), pickingLine.Configuration);
                xmlRecord.setAttribute(fieldStr(InventDim, InventSerialId), pickingLine.SerialNumber);

                xmlRecord.setAttribute(#MyRecId, int642str(pickingLine.RecId));

                xmlRoot.appendChild(xmlRecord);
            }

            xmlDoc.appendChild(xmlRoot);

            updateTransferOrderResponse = RetailTransactionService::UpdateTransferOrder(xmlDoc.toString());

            transferOrderLinesXmlStr = conPeek(updateTransferOrderResponse, 3);
            ret = conPeek(updateTransferOrderResponse, 1);

            if (ret)
            {
                if (transferOrderLinesXmlStr)
                {
                    transferOrderLinesXml = new XmlDocument();
                    transferOrderLinesXml.loadXml(transferOrderLinesXmlStr);

                    xmlRoot = transferOrderLinesXml.getNamedElement(tableStr(InventTransferTable));
                    xmlRecordList = xmlRoot.childNodes();

                    if (RetailStoreInventory::deleteSuccessFullyUpdatedPickingLine(xmlRecordList))
                    {
                        ret = false;
                    }
                }
            }
            else
            {
                warning(conPeek(updateTransferOrderResponse, 2));
            }
        }

        if (RetailStoreInventory::isPickingTypeSalesOrder(pickingType))
        {
            xmlRoot = xmlDoc.createElement(tableStr(WMSPickingRoute));
            xmlRoot.setAttribute(fieldStr(WMSPickingRoute, PickingRouteId), ordernumber);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitRetailReceivingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an Xml Document with inventory dimension values and deletes the line .
    /// </summary>
    /// <param name="storeInventLocationId">
    /// Identification of Warehouse.
    /// </param>
    /// <param name="ordernumber">
    /// Reference number of the order.
    /// </param>
    /// <param name="receivingType">
    /// Type of the receiving.
    /// </param>
    /// <returns>
    /// A boolean value, true if the line is updated successfully; otherwise false.
    /// </returns>
    public static boolean submitRetailReceivingLines(InventLocationId storeInventLocationId, RetailReferenceNo ordernumber, RetailInvReceivingType receivingType)
    {
        RetailInvReceivingListTable receivingOrder;
        RetailInvReceivingLine receivingLine;
        container updatePurchaseOrderResponse;
        container updateTransferOrderResponse;
        XmlDocument             xmlDoc;
        XmlElement              xmlRoot;
        XmlElement              xmlRecord;

        str purchaseOrderLinesXmlStr, transferOrderLinesXmlStr;
        XmlDocument purchaseOrderLinesXml, transferOrderLinesXml;
        XmlNodeList xmlRecordList;

        InventLocation storeInventLocation = InventLocation::find(storeInventLocationId);

        boolean ret = true;

        xmlDoc = XmlDocument::newBlank();
        receivingOrder = RetailInvReceivingListTable::find(ordernumber, receivingType);
        if (receivingType == RetailInvReceivingType::Purchaseorder)
        {
            xmlRoot = xmlDoc.createElement(tableStr(PurchTable));
            xmlRoot.setAttribute(fieldStr(PurchTable, PurchId), ordernumber);
            xmlRoot.setAttribute(fieldStr(PurchTable, RetailDriverDetails), receivingOrder.DriverDetails);
            xmlRoot.setAttribute(fieldStr(PurchTable, VendorRef), receivingOrder.Deliverynotenumber);

            while select RefRecId, QtyReceiveNow, ItemNumber, Size, Color, Style, Version, Configuration, SerialNumber, RecId, Unit
                 from receivingLine
                where receivingLine.Ordernumber == ordernumber
                   && receivingLine.OrderType == receivingType
                   && receivingLine.QtyReceiveNow > 0
            {
                xmlRecord = xmlDoc.createElement(tableStr(PurchLine));
                xmlRecord.setAttribute(fieldStr(PurchLine, RecId), int642str(receivingLine.RefRecId));
                xmlRecord.setAttribute(fieldStr(PurchLine, PurchReceivedNow), num2str(receivingLine.QtyReceiveNow, 0, 2, 1, 0));
                xmlRecord.setAttribute(fieldStr(PurchLine, ItemId), receivingLine.ItemNumber);
                xmlRecord.setAttribute(fieldStr(PurchLine, PurchUnit), receivingLine.Unit);
                xmlRecord.setAttribute(fieldStr(InventDim, InventSiteId), storeInventLocation.InventSiteId);
                xmlRecord.setAttribute(fieldStr(InventDim, InventLocationId), storeInventLocationId);
                xmlRecord.setAttribute(fieldStr(InventDim, InventSizeId), receivingLine.Size);
                xmlRecord.setAttribute(fieldStr(InventDim, InventColorId), receivingLine.Color);
                xmlRecord.setAttribute(fieldStr(InventDim, InventStyleId), receivingLine.Style);
                xmlRecord.setAttribute(fieldStr(InventDim, InventVersionId), receivingLine.Version);
                xmlRecord.setAttribute(fieldStr(InventDim, ConfigId), receivingLine.Configuration);
                xmlRecord.setAttribute(fieldStr(InventDim, InventSerialId), receivingLine.SerialNumber);

                xmlRecord.setAttribute(#MyRecId, int642str(receivingLine.RecId));

                xmlRoot.appendChild(xmlRecord);
            }

            xmlDoc.appendChild(xmlRoot);

            updatePurchaseOrderResponse = RetailTransactionService::UpdatePurchaseOrder(xmlDoc.toString());

            purchaseOrderLinesXmlStr = conPeek(updatePurchaseOrderResponse, 3);
            ret = conPeek(updatePurchaseOrderResponse, 1);

            if (ret)
            {
                if (purchaseOrderLinesXmlStr)
                {
                    purchaseOrderLinesXml = new XmlDocument();
                    purchaseOrderLinesXml.loadXml(purchaseOrderLinesXmlStr);

                    xmlRoot = purchaseOrderLinesXml.getNamedElement(tableStr(PurchTable));
                    xmlRecordList = xmlRoot.childNodes();

                    if (RetailStoreInventory::deleteSuccessFullyUpdatedReceivingLine(xmlRecordList))
                    {
                        ret = false;
                    }
                }
            }
            else
            {
                warning(conPeek(updatePurchaseOrderResponse, 2));
            }
        }
        else if (receivingType == RetailInvReceivingType::InventoryTransfer)
        {
            xmlRoot = xmlDoc.createElement(tableStr(InventTransferTable));
            xmlRoot.setAttribute(fieldStr(InventTransferTable, TransferId), ordernumber);

            while select RefRecId, QtyReceiveNow, ItemNumber, Size, Color, Style, Version, Configuration, SerialNumber, RecId, Unit
                 from receivingLine
                where receivingLine.Ordernumber == ordernumber
                   && receivingLine.OrderType == receivingType
                   && receivingLine.QtyReceiveNow > 0
            {
                xmlRecord = xmlDoc.createElement(tableStr(InventTransferLine));
                xmlRecord.setAttribute(fieldStr(InventTransferLine, RecId), int642str(receivingLine.RefRecId));
                xmlRecord.setAttribute(fieldStr(InventTransferLine, QtyReceiveNow), num2str(receivingLine.QtyReceiveNow, 0, 2, 1, 0));
                xmlRecord.setAttribute(fieldStr(InventTransferLine, ItemId), receivingLine.ItemNumber);
                xmlRecord.setAttribute(fieldStr(InventTransferLine, UnitId), receivingLine.Unit);
                xmlRecord.setAttribute(fieldStr(InventDim, InventSiteId), storeInventLocation.InventSiteId);
                xmlRecord.setAttribute(fieldStr(InventDim, InventLocationId), storeInventLocationId);
                xmlRecord.setAttribute(fieldStr(InventDim, InventSizeId), receivingLine.Size);
                xmlRecord.setAttribute(fieldStr(InventDim, InventColorId), receivingLine.Color);
                xmlRecord.setAttribute(fieldStr(InventDim, InventStyleId), receivingLine.Style);
                xmlRecord.setAttribute(fieldStr(InventDim, InventVersionId), receivingLine.Version);
                xmlRecord.setAttribute(fieldStr(InventDim, ConfigId), receivingLine.Configuration);
                xmlRecord.setAttribute(fieldStr(InventDim, InventSerialId), receivingLine.SerialNumber);

                xmlRecord.setAttribute(#MyRecId, int642str(receivingLine.RecId));

                xmlRoot.appendChild(xmlRecord);
            }

            xmlDoc.appendChild(xmlRoot);

            updateTransferOrderResponse = RetailTransactionService::UpdateTransferOrder(xmlDoc.toString());

            transferOrderLinesXmlStr = conPeek(updateTransferOrderResponse, 3);
            ret = conPeek(updateTransferOrderResponse, 1);

            if (ret)
            {
                if (transferOrderLinesXmlStr)
                {
                    transferOrderLinesXml = new XmlDocument();
                    transferOrderLinesXml.loadXml(transferOrderLinesXmlStr);

                    xmlRoot = transferOrderLinesXml.getNamedElement(tableStr(InventTransferTable));
                    xmlRecordList = xmlRoot.childNodes();

                    if (RetailStoreInventory::deleteSuccessFullyUpdatedReceivingLine(xmlRecordList))
                    {
                        ret = false;
                    }
                }
            }
            else
            {
                warning(conPeek(updateTransferOrderResponse, 2));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPickingTypeSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <paramref name="pickingType"/> parameter represents the <see cref="RetailInvPickingType::SalesOrder"> picking type.
    /// </summary>
    /// <param name = "pickingType">
    /// Type of the picking.
    /// </param>
    /// <returns>
    /// A boolean value, true if the <paramref name="pickingType"/> parameter represents the <see cref="RetailInvPickingType::SalesOrder"> value; false otherwise.
    /// </returns>
    /// <remarks>
    /// This method can be wrapped using a chain of command pattern to leverage existing functionality in the <see cref="RetailStoreInventory::submitRetailInvPickingLines">
    /// and <see cref="RetailStoreInventory::refreshRetailInvPickingLines"> methods when extending the the <see cref="RetailInvPickingType"/> extensible enum.
    /// </remarks>
    protected static boolean isPickingTypeSalesOrder(RetailInvPickingType pickingType)
    {
        return (pickingType == RetailInvPickingType::SalesOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPickingTypeInventoryTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <paramref name="pickingType"/> parameter represents the <see cref="RetailInvPickingType::InventoryTransfer"> picking type.
    /// </summary>
    /// <param name = "pickingType">
    /// Type of the picking.
    /// </param>
    /// <returns>
    /// A boolean value, true if the <paramref name="pickingType"/> parameter represents the <see cref="RetailInvPickingType::InventoryTransfer"> value; false otherwise.
    /// </returns>
    /// <remarks>
    /// This method can be wrapped using a chain of command pattern to leverage existing functionality in the <see cref="RetailStoreInventory::submitRetailInvPickingLines">
    /// and <see cref="RetailStoreInventory::refreshRetailInvPickingLines"> methods when extending the the <see cref="RetailInvPickingType"/> extensible enum.
    /// </remarks>
    protected static boolean isPickingTypeInventoryTransfer(RetailInvPickingType pickingType)
    {
        return (pickingType == RetailInvPickingType::InventoryTransfer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePickingLinesLastRefreshedFromHQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the picking lines last refreshed value in the table <c>RetailInvTransferPickingListTable</c>.
    /// </summary>
    /// <param name="orderNumber">
    /// The given value for order number.
    /// </param>
    /// <param name="pickingType">
    /// The given value for picking type.
    /// </param>
    private static void updatePickingLinesLastRefreshedFromHQ(RetailReferenceNo orderNumber, RetailInvPickingType pickingType)
    {
        RetailInvTransferPickingListTable    pickingOrder;
        pickingOrder = RetailInvTransferPickingListTable::find(orderNumber, pickingType, true);
        pickingOrder.LinesLastRefreshedFromHQ = DateTimeUtil::utcNow();
        pickingOrder.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReceivingLinesLastRefreshedFromHQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the receiving lines last refreshed value in the table <c>RetailInvReceivingListTable</c>.
    /// </summary>
    /// <param name="orderNumber">
    /// The given value for order number.
    /// </param>
    /// <param name="receivingType">
    /// The given value for receiving type.
    /// </param>
    private static void updateReceivingLinesLastRefreshedFromHQ(RetailReferenceNo orderNumber, RetailInvReceivingType receivingType)
    {
        RetailInvReceivingListTable    receivingOrder;
        receivingOrder = RetailInvReceivingListTable::find(orderNumber, receivingType, true);
        receivingOrder.LinesLastRefreshedFromHQ = DateTimeUtil::utcNow();
        receivingOrder.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStockCountLinesLastRefreshedFromHQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the stock count last refreshed value in the table <c>RetailStockCountTable</c>.
    /// </summary>
    /// <param name="journalId">
    /// The given value for Journal Id.
    /// </param>
    private static void updateStockCountLinesLastRefreshedFromHQ(RetailReferenceNo journalId)
    {
        RetailStockCountTable    stockCount;
        stockCount = RetailStockCountTable::find(journalId, true);
        stockCount.LinesLastRefreshedFromHQ = DateTimeUtil::utcNow();
        stockCount.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>