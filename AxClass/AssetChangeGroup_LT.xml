<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetChangeGroup_LT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetChangeGroup_LT extends AssetChangeGroup
{
    private LedgerJournalNameId journalName;
    private AssetTransDate transDate;
    private LedgerJournalTable journal;
    private LedgerJournalTable journalTo;
    private AssetJournal assetJournal;
    private AssetJournal assetJournalTo;
    private LedgerDimensionDefaultAccount offsetAccount;

    private const Version CurrentVersion = 4;
    #LOCALMACRO.CurrentList
        assetGroupId,
        journalName,
        transDate,
        offsetAccount
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays current information regarding the journal object used in the process and then sets the journal object to null.
    /// </summary>
    public void clearJournal()
    {
        this.showJournalInfo();

        journal.clear();
        journalTo.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewJournal</Name>
				<Source><![CDATA[
    private LedgerJournalTable createNewJournal(LtAssetTransferType _journalType)
    {
        LedgerJournalTable     journalTmp;
        LedgerJournalTableData journalTableData  = JournalTableData::newTable(journalTmp);

        journalTmp.JournalNum = journalTableData.nextJournalId();
        journalTmp.JournalType = LedgerJournalType::Assets;
        journalTmp.JournalName = journalName;
        journalTmp.AssetTransferType_LT = _journalType;
        journalTmp.OffsetLedgerDimension = offsetAccount;

        journalTableData.initFromJournalName(journalTableData.journalStatic().findJournalName(journalTmp.JournalName));

        journalTmp.insert();

        return journalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        FormRun dialogForm;
        Args    args = new Args(formstr(LtAssetGroupChange));

        args.record(assetTable);

        args.caller(this);

        dialogForm = classfactory.formRunClass(args);
        dialogForm.init();

        return dialogForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDialogControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the properties of the controls of the form used by this class.
    /// </summary>
    /// <param name="_assetGroupIdFrom">
    /// Form control control representing AssetGroupIdFrom.
    /// </param>
    /// <param name="_existingGroup">
    /// Form group representing ExistingGroup
    /// </param>
    /// <param name="_parametersGroup">
    /// Form control control representing ParametersGroup
    /// </param>
    public void initDialogControls(
        FormStringControl _assetGroupIdFrom,
        FormGroupControl  _existingGroup,
        FormGroupControl  _parametersGroup
        )
    {
        _assetGroupIdFrom.text(assetTable.AssetGroup);

        _existingGroup.visible(true);
        _parametersGroup.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ CurrentVersion, #CurrentList ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTable</Name>
				<Source><![CDATA[
    public AssetTable parmAssetTable(AssetTable _assetTable = assetTable)
    {
        assetTable = _assetTable;
        return assetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmOffsetAccount(LedgerDimensionDefaultAccount _offsetAccount = offsetAccount)
    {
        offsetAccount = _offsetAccount;
        return offsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmDate(AssetTransDate _date = transDate)
    {
        transDate = _date;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalName</Name>
				<Source><![CDATA[
    public LedgerJournalNameId parmJournalName(LedgerJournalNameId _journalName = journalName)
    {
        journalName = _journalName;
        return journalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showJournalInfo</Name>
				<Source><![CDATA[
    private void showJournalInfo()
    {
        if (journal)
        {
            info(strfmt("@SYS62960", journal.JournalNum, journal.AssetTransferType_LT));
        }

        if (journalTo)
        {
            info(strfmt("@SYS62960", journalTo.JournalNum, journalTo.AssetTransferType_LT));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass, 1);
        boolean ret     = false;

        switch (version)
        {
            case CurrentVersion:
                [ version, #CurrentList ] = _packedClass;
                ret                       = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetGroupInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates fixed asset journal with a record for each transaction type used for the given asset.
    /// Updates <c>AssetBook</c>, <c>AssetDepBook</c>, <c>AssetTrans</c>, and <c>AssetDepBookTrans</c>
    /// tables with a new group.
    /// </summary>
    protected void updateAssetGroupInfo()
    {
        // Transfer journal
        if (assetTable.AssetGroup != assetGroupId)
        {
            if (!journal)
            {
                journal         = this.createNewJournal(LtAssetTransferType::ReverseJour);
                assetJournal    = new AssetJournal(journal.JournalNum, AssetTransTypeJournal::Acquisition);

                journalTo         = this.createNewJournal(LtAssetTransferType::TransferJour);
                assetJournalTo    = new AssetJournal(journalTo.JournalNum, AssetTransTypeJournal::Acquisition);
            }

            this.updateTransferJour(assetTable, assetJournal, assetJournalTo);
        }

        if (assetTable.AssetGroup == assetGroupId)
        {
            info(strfmt("@GLS113511", assetTable.orig().AssetId));
        }
        else
        {
            assetTable.update();

            if (assetIdNumberSeq)
            {
                assetIdNumberSeq.onNumberUsed(assetTable.AssetId, assetIdAllocated);
            }
        }

        if (journal.numOfLines())
        {
            setPrefix("@SYS9265");
            info(strfmt("@GLS113512", assetTable.AssetId));
            this.showJournalInfo();
        }
        else
        {
            // Clear journal with no lines.
            journal.delete();
            journalTo.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransferJour</Name>
				<Source><![CDATA[
    private void updateTransferJour(
        AssetTable         _assetTable,
        AssetJournal       _assetJournal,
        AssetJournal       _assetJournalTo)
    {
        AssetTrans     assetTrans;
        AssetBookTable assetBookTable;
        AssetBook      assetBook;

        while select AssetId, BookId, TransType, sum(AmountCur) from assetTrans
            group by AssetId, BookId, TransType
            where assetTrans.AssetId == _assetTable.AssetId
                && assetTrans.TransType != AssetTransType::AssetTransfer
        exists join assetBookTable
            where assetBookTable.BookId == assetTrans.BookId
                && assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current
        {
            assetBook = assetTrans.assetBook();
            _assetJournal.parmLedgerJournalOffsetLedgerDimension(offsetAccount);
            _assetJournal.parmAssetTransType(AssetPost::assetTransType2AssetTransTypeJournal(assetTrans.TransType));
            _assetJournal.createTrans(
                -assetTrans.AmountCur,
                assetBook,
                transDate);

            LedgerJournalTrans_Asset ledgerJournalTransAsset = LedgerJournalTrans_Asset::find(_assetJournal.parmLedgerJournalTrans().RecId, true);
            ledgerJournalTransAsset.AssetGroup_LT = _assetTable.AssetGroup;
            ledgerJournalTransAsset.doUpdate();

            LedgerJournalTable_W journalTo_W = journalTo.ledgerJournalTable_W();
            journalTo_W.setReverseJournal_LT(journal);
            journalTo.packLedgerJournalTable_W(journalTo_W);
            journalTo.update();

            _assetJournalTo.parmLedgerJournalOffsetLedgerDimension(offsetAccount);
            _assetJournalTo.parmAssetTransType(AssetPost::assetTransType2AssetTransTypeJournal(assetTrans.TransType));
            _assetJournalTo.createTrans(
                assetTrans.AmountCur,
                assetBook,
                transDate);

            ledgerJournalTransAsset = LedgerJournalTrans_Asset::find(_assetJournalTo.parmLedgerJournalTrans().RecId, true);
            ledgerJournalTransAsset.AssetGroup_LT = assetGroupId;
            ledgerJournalTransAsset.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value entered by the user.
    /// </summary>
    /// <param name="calledFrom">
    /// The object that called this method.  Optional parameter
    /// </param>
    /// <returns>
    /// True is entered values are correct, otherwise false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean             ret = true;
        LedgerJournalName   ledgerJournalName;

        ret = super();

        if (ret)
        {
            if (journalName)
            {
                ledgerJournalName = LedgerJournalName::find(journalName);

                if (! ledgerJournalName)
                {
                    ret = checkFailed(strfmt("@SYS22462", journalName));
                }

                if (ledgerJournalName.JournalType != LedgerJournalType::Assets)
                {
                    ret = checkFailed(strfmt("@SYS27049", enum2Str(LedgerJournalType::Assets)));
                }
            }
            else
            {
                ret = checkFailed("@GLS113516");
            }

            if (offsetAccount)
            {
                MainAccount mainAccount = MainAccount::findByLedgerDimension(offsetAccount);
                Name mainAccountName = DimensionAttributeValueCombination::find(offsetAccount).MainAccountValue;

                if (!mainAccount)
                {
                    ret = checkFailed("@SYS16935", mainAccountName);
                }
                else if (!mainAccount.transactionAccount())
                {
                    ret = checkFailed(strfmt("@SYS19247", mainAccountName, mainAccount.Type));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>