<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurgeLoyaltyLinesForOtherActivitiesBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurgeLoyaltyLinesForOtherActivitiesBatch</c> class is used to purge non-transactional loyalty activity lines.
/// </summary>
class PurgeLoyaltyLinesForOtherActivitiesBatch extends RunBaseBatch implements BatchRetryable
{
    // Packed variables
    protected RetailLoyaltyCardRewardPointNonTransactionalActivityStatus cleanUpStatus;
    protected TransDate               cleanUpDate;
    protected Integer                 cleanUpAged;

    // Dialog fields
    protected DialogField             dialogCleanUpStatus;
    protected DialogField             dialogCleanUpAged;
    protected DialogField             dialogCleanUpDate;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        cleanUpStatus,
        cleanUpAged,
        cleanupDate
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmPurge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the user to confirm they want to perform the purging of <c>RetailLoyaltyCardRewardPointNonTransactionalActivity</c> records.
    /// </summary>
    /// <param name="_activity">
    /// A <c>RetailLoyaltyCardRewardPointNonTransactionalActivity</c> record buffer.
    /// </param>
    /// <returns>
    /// A <c>DialogButton</c> enum indicating the button the user selected.
    /// </returns>
    public DialogButton confirmPurge(RetailLoyaltyCardRewardPointNonTransactionalActivity _activity)
    {
        return Box::yesNo(strFmt("@Retail:LoyaltyLinePurgeConfirmation", int642str(_activity.RecId)), DialogButton::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog = super();
        #resAppl;

        dialogCleanUpStatus = dialog.addFieldValue(enumStr(RetailLoyaltyCardRewardPointNonTransactionalActivityStatus), cleanUpStatus, "@Retail:NonTransactionalActivityStatus", "@Retail:NonTransactionalActivityStatusPurgeToolTip");
        dialogCleanUpStatus.value(RetailLoyaltyCardRewardPointNonTransactionalActivityStatus::All);
        dialogCleanUpAged = dialog.addFieldValue(extendedTypeStr(Integer), cleanUpAged, "@Retail:AgedDays", "@Retail:NonTransactionalActivityStatusPurgeToolTip");
        dialogCleanUpDate = dialog.addFieldValue(extendedTypeStr(TransDate), cleanUpDate, "@Retail:LastEnteredThrough", "@Retail:DeleteUpUntil");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the dialog posting logic.
    /// </summary>
    /// <param name="_dialog">
    /// The <c>DialogRunbase</c> object to be run.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        cleanUpStatus   = dialogCleanUpStatus.value();
        cleanUpAged     = dialogCleanUpAged.value();
        cleanUpDate     = dialogCleanUpDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variable for the <c>PurgeLoyaltyLinesForOtherActivitiesBatch</c> class.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the <c>PurgeLoyaltyLinesForOtherActivitiesBatch</c> class.
    /// </summary>
    /// <returns>
    /// A container containing the current instance of the <c>PurgeLoyaltyLinesForOtherActivitiesBatch</c> class.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompt the user to run the batch job.
    /// </summary>
    public boolean prompt()
    {
        if (!super())
        {
            if (dialogCanceled
            && this.batchInfo())
            {
                this.batchInfo().parmBatchExecute(false);
            }
            return false;
        }

        if (this.batchInfo()
        && (this.batchInfo().parmBatchExecute()
        ||  this.mustGoBatch()))
        {
            this.batchInfo().doBatch();
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the batch job.
    /// </summary>
    public void run()
    {
        int purgeCount = 0;
        RetailLoyaltyCardRewardPointNonTransactionalActivity retailLoyaltyCardRewardPointNonTransactionalActivity;
        RetailLoyaltyCardRewardPointNonTransactionalActivity activity;
        DialogButton dialogButton;

        #OCCRetryCount

        if (!cleanUpDate)
        {
            cleanUpDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (cleanUpAged)
        {
            cleanUpDate = cleanUpDate - cleanUpAged;
        }

        select count(RecId) from retailLoyaltyCardRewardPointNonTransactionalActivity
            where (cleanUpStatus == RetailLoyaltyCardRewardPointNonTransactionalActivityStatus::All ||
                retailLoyaltyCardRewardPointNonTransactionalActivity.Status == cleanUpStatus)
                && retailLoyaltyCardRewardPointNonTransactionalActivity.EntryDate <= cleanUpDate;

        if (retailLoyaltyCardRewardPointNonTransactionalActivity.RecId)
        {
            dialogButton = this.confirmPurge(retailLoyaltyCardRewardPointNonTransactionalActivity);
            if (dialogButton == DialogButton::Yes)
            {
                try
                {
                    // Purge non-transactional activities
                    while select forupdate retailLoyaltyCardRewardPointNonTransactionalActivity
                        where (cleanUpStatus == RetailLoyaltyCardRewardPointNonTransactionalActivityStatus::All ||
                            retailLoyaltyCardRewardPointNonTransactionalActivity.Status == cleanUpStatus)
                            && retailLoyaltyCardRewardPointNonTransactionalActivity.EntryDate <= cleanUpDate
                    {
                        delete_from activity where activity.RecId == retailLoyaltyCardRewardPointNonTransactionalActivity.RecId;
                        purgeCount++;
                    }

                    // Notify the user on how many loyalty lines were purged
                    if (purgeCount > 0)
                    {
                        info(strFmt("@Retail:LoyaltyLinesPurged", int2str(purgeCount))); 
                    }
                    // Notify user that there was nothing to purge
                    else
                    {
                        info("@MCR33610");
                    }
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
            }
        }
        // Notify user that there was nothing to purge
        else
        {
            info("@MCR33610");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="packedClass" /> parameter value to an instance of the
    /// <c>PurgeLoyaltyLinesForOtherActivitiesBatch</c> class.
    /// </summary>
    /// <param name="packedClass">
    /// The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    /// true if deserialization was successful; otherwise, false.
    /// </returns>
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the class.
    /// </summary>
    /// <returns>
    /// The description of the class.
    /// </returns>
    public static ClassDescription description()
    {
        return "@Retail:PurgeLoyaltyLinesForOtherActivitiesBatchJob";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        PurgeLoyaltyLinesForOtherActivitiesBatch purgeLoyaltyLinesForOtherActivitiesBatch = new PurgeLoyaltyLinesForOtherActivitiesBatch();
        purgeLoyaltyLinesForOtherActivitiesBatch.getLast();
        if (purgeLoyaltyLinesForOtherActivitiesBatch.prompt())
        {
            purgeLoyaltyLinesForOtherActivitiesBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>