<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalStatic</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysTableNameFactoryAttribute(tableStr(InventJournalTable))]
public class InventJournalStatic extends JournalStatic
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>journalName</Name>
				<Source><![CDATA[
    public JournalNameMap journalName()
    {
        InventJournalName   inventJournalName;
        return inventJournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTable</Name>
				<Source><![CDATA[
    public JournalTableMap  journalTable()
    {
        InventJournalTable  inventJournalTable;
        return inventJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the journal lines record mapped onto <c>JournalTransMap</c> table map.
    /// </summary>
    /// <returns>A record map.</returns>
    /// <remarks>
    /// Add a post-method handler for returning the right record when extending the <c>InventJournalType</c> enumeration.
    /// </remarks>
    public JournalTransMap journalTrans()
    {
        InventJournalTable      inventJournalTable = journalTable;
        InventJournalTrans      inventJournalTrans;
        InventJournalTrans_Tag  inventJournalTrans_Tag;

        switch (inventJournalTable.JournalType)
        {
            case InventJournalType::Movement:
            case InventJournalType::LossProfit:
            case InventJournalType::Transfer:
            case InventJournalType::BOM:
            case InventJournalType::Count:
            case InventJournalType::project:
            case InventJournalType::Asset:
            case InventJournalType::OwnershipChange:
                return inventJournalTrans;
            case InventJournalType::TagCounting:
                return inventJournalTrans_Tag;
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTypeIdToEnum</Name>
				<Source><![CDATA[
    InventJournalType journalTypeIdToEnum(Integer _journalTypeId)
    {
        InventJournalType journalType = any2Enum(_journalTypeId);

        return journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemStrLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the display menu item to use for the specified journal type.
    /// </summary>
    /// <param name = "_journalTypeId">Integer value for the <c>InventJournalType</c> enumeration value.</param>
    /// <returns>The name of the display menu item.</returns>
    /// <remarks>
    /// In case of extending the <c>InventJournalType</c> enumeration, add a post-method handler to return the needed display menu item name.
    /// </remarks>
    public str menuItemStrLines(Integer _journalTypeId = enum2int(journalTable.JournalType))
    {
        InventJournalType journalTypeEnumValue = any2Enum(_journalTypeId);
        switch (journalTypeEnumValue)
        {
            case InventJournalType::Movement:
                return menuItemDisplayStr(InventJournalTransMovement);
            case InventJournalType::LossProfit:
                return menuItemDisplayStr(InventJournalTransLossProfit);
            case InventJournalType::Transfer:
                return menuItemDisplayStr(InventJournalTransTransfer);
            case InventJournalType::BOM:
                return menuItemDisplayStr(InventJournalTransBOM);
            case InventJournalType::Count:
                return menuItemDisplayStr(InventJournalTransCount);
            case InventJournalType::project:
                return menuItemDisplayStr(InventJournalTransProject);
            case InventJournalType::TagCounting:
                return menuItemDisplayStr(InventJournalTransCountTag);
            case InventJournalType::Asset:
                return menuItemDisplayStr(InventJournalTransAsset);
            case InventJournalType::OwnershipChange:
                return menuItemDisplayStr(InventJournalOwnershipChange);
        }
        return menuItemDisplayStr(InventJournalTransMovement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalTransData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of <c>JournalTransData</c> class for the specified arguments.
    /// </summary>
    /// <param name = "_journalTrans">A journal line record mapped to <c>JournalTransMap</c> map.</param>
    /// <param name = "_journalTableData">An instance of <c>JournalTableData</c> that corresponds to the journal header.</param>
    /// <returns>A new instance of the specific type extending from <c>JournalTransData</c> class.</returns>
    /// <remarks>
    /// In case of extending the <c>InventJournalType</c> enumeration, add a post-method handler to return the needed sub-class instance.
    /// </remarks>
    public JournalTransData newJournalTransData(
        JournalTransMap     _journalTrans,
        JournalTableData    _journalTableData)
    {
        InventJournalTable  inventJournalTable = _journalTableData.journalTable();

        switch (inventJournalTable.JournalType)
        {
            case InventJournalType::TagCounting:
                return new InventJournalTransTagData(_journalTrans,_journalTableData);
            default:
                return new InventJournalTransData(_journalTrans,_journalTableData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalVoucherObject</Name>
				<Source><![CDATA[
    public JournalVoucherObject newJournalVoucherObject(JournalVoucherList _journalVoucherList)
    {
        return new InventJournalVoucherObject(_journalVoucherList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefJournalId</Name>
				<Source><![CDATA[
    public NumberSequenceReference numRefJournalId()
    {
        if (!numberSequenceRefJourIdCached.RecId)
        {
            numberSequenceRefJourIdCached = InventParameters::numRefInventJournalId();
        }

        return numberSequenceRefJourIdCached;
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardJournalNameId</Name>
				<Source><![CDATA[
    public InventJournalNameId standardJournalNameId(Integer _journalTypeId)
    {
        return InventJournalName::standardJournalName(any2Enum(_journalTypeId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrongJournalTypeMessage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds an error message based on the specified <c>journalTypeId</c> value.
    /// </summary>
    /// <param name="_journalTypeId">
    ///    The ID of the journal type that is considered the wrong journal type.
    /// </param>
    /// <returns>
    ///    A string that is built from the @SYS22977 label and the journal type that was found.
    /// </returns>
    public str wrongJournalTypeMessage(int _journalTypeId)
    {
        return strFmt("@SYS22977", this.journalTypeIdToEnum(_journalTypeId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>