<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormulaMultiplesQtyValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PmfFormulaMultiplesQtyValidation</c> class is the helper class to validate production
/// quantities against the formula multiples.
/// </summary>
class PmfFormulaMultiplesQtyValidation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildPromptText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the text for a prompt to adjust for the quantity planned for production based on multiples.
    /// </summary>
    /// <param name="_qty">
    /// The specified quantity planned for production.
    /// </param>
    /// <param name="_multiples">
    /// A predefined multiple unit size.
    /// </param>
    /// <param name="_qtySuggested">
    /// A suggested adjusted quantity.
    /// </param>
    /// <returns>
    /// The string produced that is used to compose a dialog box.
    /// </returns>
    protected static str buildPromptText(
        Qty         _qty,
        Qty         _multiples,
        Qty         _qtySuggested)
    {
        return InventTable::buildMultipleDialogStr(
            _multiples,
            _qty,
            _qtySuggested,
            true);   //show "Insert rounded quantity?"
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWarningText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the text for a warning that the quantity planned for production does not satisfy the multiplicity constraint.
    /// </summary>
    /// <param name="_qty">
    /// The specified quantity planned for production.
    /// </param>
    /// <param name="_multiples">
    /// A predefined multiple unit size.
    /// </param>
    /// <param name="_qtySuggested">
    /// A suggested adjusted quantity.
    /// </param>
    /// <returns>
    /// The text for a warning.
    /// </returns>
    protected static str buildWarningText(
        Qty         _qty,
        Qty         _multiples,
        Qty         _qtySuggested)
    {
        return InventTable::buildMultipleDialogStr(
            _multiples,
            _qty,
            _qtySuggested,
            false);   //show "Insert rounded quantity?"
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptForValidMultiple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts a user for the appropriate adjustment for a quantity planned for production.
    /// </summary>
    /// <param name="_qty">
    /// The specified quantity planned for production.
    /// </param>
    /// <param name="_multiples">
    /// A predefined multiple unit size.
    /// </param>
    /// <param name="_qtySuggested">
    /// A suggested adjusted quantity.
    /// </param>
    /// <returns>
    /// The quantity suggested if the user clicks the yes button in the dialog box; otherwise, the original
    /// quantity.
    /// </returns>
    protected static Qty promptForValidMultiple(
        Qty         _qty,
        Qty         _multiples,
        Qty         _qtySuggested)
    {
        str promptText = PmfFormulaMultiplesQtyValidation::buildPromptText(_qty, _multiples, _qtySuggested);

        if (Box::yesNo(promptText, DialogButton::Yes) == DialogButton::Yes)
        {
            return _qtySuggested;
        }
        else
        {
            return _qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQtyMultiple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified quantity is a multiple of a predefined production size.
    /// </summary>
    /// <param name="_qty">
    /// The specified quantity planned for production.
    /// </param>
    /// <param name="_multiples">
    /// A predefined multiple unit size.
    /// </param>
    /// <param name="_inventTable">
    /// An item planned for production.
    /// </param>
    /// <param name="_showUsrDialog">
    /// A Boolean value that indicates whether a prompt to a user who proposes the correct quantity should
    /// be shown.
    /// </param>
    /// <returns>
    /// The closest rounded-up quantity of the quantity planned for production that is a multiple of the
    /// predefined production size.
    /// </returns>
    public static Qty validateQtyMultiple(
        Qty         _qty,
        Qty         _multiples,
        InventTable _inventTable,
        boolean     _showUsrDialog)
    {
        InventMovementQuantityErrorCorrectionMethod errorCorrectionMethod;

        errorCorrectionMethod = _showUsrDialog ?
            InventMovementQuantityErrorCorrectionMethod::PromptUser :
            InventMovementQuantityErrorCorrectionMethod::AutoCorrectUserInput;

        return PmfFormulaMultiplesQtyValidation::quantityWithAcceptableMultiplicity(_qty, _multiples, _inventTable, errorCorrectionMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityWithAcceptableMultiplicity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the acceptable quantity given the requested quantity, multiplicity constraint
    /// and the error correction method.
    /// </summary>
    /// <param name="_requestedQty">The specified quantity planned for production.</param>
    /// <param name="_multiples">A predefined multiple unit size.</param>
    /// <param name="_inventTable">An item planned for production.</param>
    /// <param name="_errorCorrectionMethod">The error correction method.</param>
    /// <returns>
    /// The acceptable quantity given the multiplicity constraint and the error correction method.
    /// </returns>
    public static Qty quantityWithAcceptableMultiplicity(
        Qty                                         _requestedQty,
        Qty                                         _multiples,
        InventTable                                 _inventTable,
        InventMovementQuantityErrorCorrectionMethod _errorCorrectionMethod)
    {
        Qty quantityRoundedUp;
        Qty quantityRoundedUpStdPrecision;

        #define.MaxDecimals(10)

        if (    !_inventTable.RecId
            ||  !_multiples
            ||  _errorCorrectionMethod == InventMovementQuantityErrorCorrectionMethod::AcceptUserInput
            ||  !#PmfEnabled
            ||  !_inventTable.isFormulaAllowed())
        {
            //return the quantity unaltered
            return _requestedQty;
        }

        //is the quantity valid per multiples, per allowed precision
        quantityRoundedUp = roundUp(_requestedQty, _multiples);
        if (quantityRoundedUp == decround((_requestedQty), #MaxDecimals))
        {
            return _requestedQty;
        }

        //is the quantity valid per multiples, per standard precision
        quantityRoundedUpStdPrecision = UnitOfMeasureConverter::convert(
                    quantityRoundedUp,
                    UnitOfMeasure::unitOfMeasureIdBySymbol( _inventTable.inventUnitId()),
                    UnitOfMeasure::unitOfMeasureIdBySymbol( _inventTable.inventUnitId()),
                    NoYes::Yes);

        if (_requestedQty == quantityRoundedUpStdPrecision)
        {
            return _requestedQty;
        }

        switch (_errorCorrectionMethod)
        {
            case InventMovementQuantityErrorCorrectionMethod::AutoCorrectUserInput:
                return quantityRoundedUp;

            case InventMovementQuantityErrorCorrectionMethod::AutoCorrectUserInputWithWarning:
                warning(PmfFormulaMultiplesQtyValidation::buildWarningText(_requestedQty, _multiples, quantityRoundedUp));
                return quantityRoundedUp;

            case InventMovementQuantityErrorCorrectionMethod::AutoCorrectuserInputWithInfoBox:
                Box::info(PmfFormulaMultiplesQtyValidation::buildWarningText(_requestedQty, _multiples, quantityRoundedUp));
                return quantityRoundedUp;

            case InventMovementQuantityErrorCorrectionMethod::AcceptUserInputWithWarning:
                warning(PmfFormulaMultiplesQtyValidation::buildWarningText(_requestedQty, _multiples, quantityRoundedUp));
                return _requestedQty;

            case InventMovementQuantityErrorCorrectionMethod::PromptUser:
                return PmfFormulaMultiplesQtyValidation::promptForValidMultiple(_requestedQty, _multiples, quantityRoundedUp);

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>