<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransDistribution</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendTransDistribution</c> class acts as a container for the values defining a posting
/// distribution for a <c>CustVendTrans</c> record.
/// </summary>
/// <remarks>
/// Basically, this class acts like a struct.There is nothing about the implementation which makes this
/// specific to <c>CustVendTrans</c> records.
/// </remarks>
public class CustVendTransDistribution
{
    private LedgerDimensionAccount ledgerDimension;
    private Money transactionAmount;
    private Money accountingAmount;
    private Money reportingAmount;
    private RefRecId taxTransRecId;
    private str accountingDistributions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountingAmount</Name>
				<Source><![CDATA[
    public Money accountingAmount()
    {
        return accountingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of current instance of class.
    /// </summary>
    /// <param name="_transactionAmount">
    /// Transaction amount. Optional.
    /// </param>
    /// <param name="_accountingAmount">
    /// Accounting amount. Optional.
    /// </param>
    /// <param name="_reportingAmount">
    /// Reporting amount. Optional.
    /// </param>
    /// <returns>
    /// New instance of <c>CustVendTransDistribution</c>
    /// </returns>

    public CustVendTransDistribution clone(Money _transactionAmount = this.transactionAmount(),
                                           Money _accountingAmount = this.accountingAmount(),
                                           Money _reportingAmount = this.reportingAmount())
    {
        return new CustVendTransDistribution(this.ledgerDimension(), this.transactionAmount(), this.accountingAmount(), this.reportingAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionAccount ledgerDimension()
    {
        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>CustVendDistribution</c> class.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The <c>LedgerDimensionAccount</c> value that is associated with the distribution.
    /// </param>
    /// <param name="_transactionAmount">
    /// The transaction currency amount of the distribution; optional.
    /// </param>
    /// <param name="_accountingAmount">
    /// The accounting currency amount of the distribution; optional.
    /// </param>
    /// <param name="_reportingAmount">
    /// The reporting currency amount of the distribution; optional.
    /// </param>
    /// <remarks>
    /// The names of the amount values are only indicative of what value would typically be held. The
    /// consumer can use the amount fields for any desired value.
    /// </remarks>
    public void new(
            LedgerDimensionAccount _ledgerDimension,
            Money _transactionAmount = 0.0,
            Money _accountingAmount = 0.0,
            Money _reportingAmount = 0.0)
    {
        ledgerDimension = _ledgerDimension;
        transactionAmount = _transactionAmount;
        accountingAmount = _accountingAmount;
        reportingAmount = _reportingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingAmount</Name>
				<Source><![CDATA[
    public Money reportingAmount()
    {
        return reportingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionAmount</Name>
				<Source><![CDATA[
    public Money transactionAmount()
    {
        return transactionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxTransRecId</Name>
				<Source><![CDATA[
    public RefRecId parmTaxTransRecId(RecId _taxTransRecId = taxTransRecId)
    {
        taxTransRecId = _taxTransRecId;
        return taxTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountingDistributions</Name>
				<Source><![CDATA[
    internal void setAccountingDistributions(str _accountingDistributions)
    {
        accountingDistributions = _accountingDistributions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDistributions</Name>
				<Source><![CDATA[
    internal str getAccountingDistributions()
    { 
        return accountingDistributions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTaxTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the <c>TaxTrans</c> record ID to a list of <c>CustVendTransDistribution</c>.
    /// </summary>
    /// <param name = "_custVendTransDistributions">The list of customer/vendor transaction distributions.</param>
    /// <param name = "_taxTransRecid">The record ID of the <c>TaxTrans</c> record.</param>
    /// <returns>A list of customer/vendor transaction distributions with the applied <c>TaxTrans</c> record ID to each. </returns>
    public static List applyTaxTransRecId(List _custVendTransDistributions, RefRecId _taxTransRecid)
    {
        if (_custVendTransDistributions)
        {
            ListEnumerator listEnumerator = _custVendTransDistributions.getEnumerator();
            while (listEnumerator.moveNext())
            {
                CustVendTransDistribution currentDistribution = listEnumerator.current();
                currentDistribution.parmTaxTransRecId(_taxTransRecid);
            }
        }

        return _custVendTransDistributions;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>