<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateFormHcm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateFormHcm</c> class handles the form events and business logic
/// for the <c>BudgetPlanGenerate</c> form.
/// </summary>
/// <remarks>
/// The <c>BudgetPlanGenerateFormHcm</c> class also handles the business logic for source
/// records from <c>HcmPositionForecast</c> table.
/// </remarks>
public class BudgetPlanGenerateFormHcm extends BudgetPlanGenerateForm
{
    SegmentedEntryControl                   targetBudgetPlanScenarioMainAccount;
    FormGroupControl                        targetBudgetPlanScenarioMainAccountGroup;
    FormCheckBoxControl                     targetBudgetPlanLineIncludePosition;
    FormReferenceGroupControl               sourcePositionForecastBudgetPlanningProcess;
    FormStringControl                       sourceBudgetPlanScenario;
    FormGroupControl                        sourcePositionForecastBudgetPlanGroup;
    BudgetingOrganizationRecId              budgetingOrganizationRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initControlSet</Name>
				<Source><![CDATA[
    protected void initControlSet()
    {
        super();

        // Target tab controls
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetBudgetPlanScenarioMainAccountGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetBudgetPlanLineIncludePosition));

        // Source group controls
        controlSet.add(formControlStr(BudgetPlanGenerate, SourcePositionForecastBudgetPlanGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourcePositionForecastBudgetPlanningProcess));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourcePositionForecastBudgetPlanScenario));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForm</Name>
				<Source><![CDATA[
    public void initForm(FormRun _formRun)
    {
        super(_formRun);
        targetBudgetPlanScenario.allowEdit(false);
        targetBudgetPlanningProcess.allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTargetBudgetPlanScenarioMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the segmented entry control from the dialog form.
    /// </summary>
    /// <remarks>
    /// The control is dynamically added by the <c>BudgetPlanGenerateController</c> class.
    /// </remarks>
    protected void initTargetBudgetPlanScenarioMainAccount()
    {
        targetBudgetPlanScenarioMainAccount = budgetPlanGenerateController.parmLedgerDimDefaultAcctDialogField().control() as SegmentedEntryControl;
        targetBudgetPlanScenarioMainAccount.allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSourceBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the budget scenario control.
    /// </summary>
    /// <returns>
    /// The selected <c>BudgetPlanScenario</c> record.
    /// </returns>
    public void lookupSourceBudgetPlanScenario()
    {
        BudgetPlanLookupHelper::lookupBudgetPlanTranslatedScenarios(sourceBudgetPlanScenario, UnitOfMeasureClass::Monetary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceTargetBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanScenario</c> records of <c>UnitOfMeasureClass</c> type monetary.
    /// </summary>
    /// <returns>
    /// The <c>BudgetPlanScenario</c> record selected by the lookup.
    /// </returns>
    public void lookupReferenceTargetBudgetPlanScenario()
    {
        this.lookupTargetScenario(targetBudgetPlanScenario, UnitOfMeasureClass::Monetary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedBudgetPlanningProcess</Name>
				<Source><![CDATA[
    public boolean modifiedBudgetPlanningProcess()
    {
        boolean isModified;

        isModified = super();

        if (isModified && targetBudgetPlanningProcess.value())
        {
            targetBudgetPlanScenarioMainAccount.parmDataAreaId(budgetPlanningProcessDataAreaId);
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedResponsibilityCenter</Name>
				<Source><![CDATA[
    public boolean modifiedResponsibilityCenter()
    {
        boolean isModified;

        isModified = super();

        if (isModified)
        {
            targetBudgetPlanScenarioQuantity.text(BudgetPlanningConstants::emptyString);
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedSourceBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of ledger control on the modification of budget planning process
    /// and resets the values of scenario, document number and name conditionally on the basis of the update.
    /// </summary>
    /// <param name="_isModified">
    /// true if the control has been modified; otherwise, false.
    /// </param>
    /// <returns>
    /// returns the boolean value that is passed in.
    /// </returns>
    public boolean modifiedSourceBudgetPlanningProcess(boolean _isModified)
    {
        BudgetPlanningProcessRecId  currentBudgetPlanningProcessRecId;

        currentBudgetPlanningProcessRecId = currentBudgetPlanningProcess.RecId;
        currentBudgetPlanningProcess      = BudgetPlanningProcess::find(sourcePositionForecastBudgetPlanningProcess.value());

        if (_isModified)
        {
            if (currentBudgetPlanningProcess)
            {
                sourceLedger.value(currentBudgetPlanningProcess.Ledger);
            }

            if (currentBudgetPlanningProcessRecId && (currentBudgetPlanningProcessRecId != currentBudgetPlanningProcess.RecId))
            {
                sourceBudgetPlanScenario.text(BudgetPlanningConstants::emptyString);
            }
            this.setProcessScenarioControls();
        }
        return _isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedSourceBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions upon modification of the source budget plan scenario.
    /// </summary>
    /// <param name="_isModified">
    /// true if the control has been modified; otherwise, false.
    /// </param>
    /// <returns>
    /// returns the boolean value that is passed in.
    /// </returns>
    public boolean modifiedSourceBudgetPlanScenario(boolean _isModified)
    {
        // Defaults the modified process and scenario values to the target controls
        if (_isModified && sourceBudgetPlanScenario.text() != BudgetPlanningConstants::emptyString)
        {
            this.setProcessScenarioControls();
        }

        return _isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedTargetBudgetPlanScenarioQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional control values and states based on the modified <c>TargetBudgetPlanScenarioQuantity</c> control value.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean modifiedTargetBudgetPlanScenarioQuantity()
    {
        if (targetBudgetPlanScenarioQuantity.text())
        {
            targetBudgetPlanScenarioMainAccount.allowEdit(true);
        }
        else
        {
            targetBudgetPlanScenarioMainAccount.allowEdit(false);
            targetBudgetPlanScenarioMainAccount.value(0);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveControlValue</Name>
				<Source><![CDATA[
    protected void saveControlValue(FormControl _formControl)
    {
        BudgetPlanGenerateContractHcm budgetPlanGenerateContractHcm = budgetPlanGenerateContract as BudgetPlanGenerateContractHcm;

        super(_formControl);

        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanScenarioMainAccountGroup) :
                budgetPlanGenerateContractHcm.parmTargetBudgetPlanScenarioMainAccount(targetBudgetPlanScenarioMainAccount.value());
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanLineIncludePosition) :
                budgetPlanGenerateContractHcm.parmTargetBudgetPlanLineIncludePosition(targetBudgetPlanLineIncludePosition.value());
                break;

            case formControlStr(BudgetPlanGenerate, SourcePositionForecastBudgetPlanScenario) :
                budgetPlanGenerateContractHcm.parmSourceBudgetPlanScenarioRecId(BudgetPlanScenario::findByLocalizedName(sourceBudgetPlanScenario.text()).RecId);
                break;

            case formControlStr(BudgetPlanGenerate, SourcePositionForecastBudgetPlanningProcess) :
                budgetPlanGenerateContractHcm.parmSourceBudgetPlanProcess(sourcePositionForecastBudgetPlanningProcess.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlValue</Name>
				<Source><![CDATA[
    public void setControlValue(FormControl _formControl)
    {
        BudgetPlanGenerateContractHcm budgetPlanGenerateContractHcm = budgetPlanGenerateContract as BudgetPlanGenerateContractHcm;

        super(_formControl);

        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanScenarioMainAccountGroup) :
                targetBudgetPlanScenarioMainAccount.value(budgetPlanGenerateContractHcm.parmTargetBudgetPlanScenarioMainAccount());
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanLineIncludePosition) :
                targetBudgetPlanLineIncludePosition.value(budgetPlanGenerateContractHcm.parmTargetBudgetPlanLineIncludePosition());
                break;

            case formControlStr(BudgetPlanGenerate, SourcePositionForecastBudgetPlanScenario) :
                sourceBudgetPlanScenario.text(BudgetPlanScenarioTranslation::getLocalizedName(budgetPlanGenerateContractHcm.parmSourceBudgetPlanScenarioRecId()));
                break;

            case formControlStr(BudgetPlanGenerate, sourcePositionForecastBudgetPlanningProcess) :
                sourcePositionForecastBudgetPlanningProcess.value(budgetPlanGenerateContractHcm.parmSourceBudgetPlanProcess());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultControlValues</Name>
				<Source><![CDATA[
    public void setDefaultControlValues()
    {
        super();

        this.setDefaultTargetBudgetPlanLineIncludePos();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultTargetBudgetPlanLineIncludePos</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for the <c>TargetBudgetPlanLineIncludePosition</c> form control.
    /// </summary>
    protected void setDefaultTargetBudgetPlanLineIncludePos()
    {
        targetBudgetPlanLineIncludePosition.value(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormControl</Name>
				<Source><![CDATA[
    protected void setFormControl(FormControl _formControl)
    {
        super(_formControl);

        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanScenarioMainAccountGroup):
                targetBudgetPlanScenarioMainAccountGroup = _formControl;

                this.initTargetBudgetPlanScenarioMainAccount();

                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanLineIncludePosition):
                targetBudgetPlanLineIncludePosition = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourcePositionForecastBudgetPlanningProcess):
                sourcePositionForecastBudgetPlanningProcess = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourcePositionForecastBudgetPlanScenario):
                sourceBudgetPlanScenario = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourcePositionForecastBudgetPlanGroup) :
                sourcePositionForecastBudgetPlanGroup = _formControl;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInstructionText</Name>
				<Source><![CDATA[
    protected void setInstructionText()
    {
        str temporaryInstruction = strFmt("@GLS150301", "@SYS2163");
        instruction.text(temporaryInstruction);
        budgetPlanTransferTypeControl.helpText("@SYS4020014");
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMandatoryControls</Name>
				<Source><![CDATA[
    protected void setMandatoryControls()
    {
        sourceBudgetPlanScenario.mandatory(true);
        sourcePositionForecastBudgetPlanningProcess.mandatory(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcessScenarioControls</Name>
				<Source><![CDATA[
    private void setProcessScenarioControls()
    {
        TargetBudgetPlanningProcess.value(sourcePositionForecastBudgetPlanningProcess.value());
        TargetBudgetPlanScenario.text(sourceBudgetPlanScenario.text());

        this.modifiedBudgetPlanningProcess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
    protected void setVisibleControls()
    {
        super();

        // Enable controls on the target tab
        targetBudgetPlanScenarioQuantity.visible(true);
        targetBudgetPlanScenarioMainAccountGroup.visible(true);
        targetBudgetPlanLineIncludePosition.visible(true);
        targetminimum.visible(false);
        sourcePositionForecastBudgetPlanGroup.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanClose</Name>
				<Source><![CDATA[
    public boolean validateCanClose()
    {
        boolean canClose;

        canClose = super();

        // Validate FTE account has been set when a FTE scenario was selected
        if (targetBudgetPlanScenarioQuantity.text() && !targetBudgetPlanScenarioMainAccount.value())
        {
            error(strFmt("@SYS84753", targetBudgetPlanScenarioMainAccount.label()));
            canClose = false;
        }
        else if (!this.validateTargetBudgetPlanScenarioQuantity())
        {
            // Clear the invalid value
            targetBudgetPlanScenarioQuantity.text(BudgetPlanningConstants::emptyString);
            canClose = false;
        }

        return canClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of budget planning process control.
    /// </summary>
    /// <returns>
    /// true if no error found; otherwise, false.
    /// </returns>
    public boolean validateSourceBudgetPlanningProcess()
    {
        boolean                isValid = true;
        BudgetPlanHeader       budgetPlanHeader;
        BudgetPlanningProcess  budgetPlanningProcess;

        if (sourcePositionForecastBudgetPlanningProcess.value())
        {
            budgetPlanHeader.BudgetPlanningProcess = sourcePositionForecastBudgetPlanningProcess.value();

            budgetPlanningProcess = BudgetPlanningProcess::find(budgetPlanHeader.BudgetPlanningProcess);

            if (budgetPlanTransferTypeControl.selection() == BudgetPlanGenerateType::NewBudgetPlan)
            {
                budgetPlan.parmBudgetPlanHeader(budgetPlanHeader);
                isValid = budgetPlan.validateField(fieldNum(BudgetPlanHeader, BudgetPlanningProcess));
            }

            if (budgetPlanningProcess.Ledger != Ledger::current())
            {
                isValid = checkFailed(strFmt("@SYS4020049", budgetPlanningProcess.Name));
            }
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the source budget plan scenario control.
    /// </summary>
    /// <returns>
    /// true if the control value is valid; otherwise, false.
    /// </returns>
    public boolean validateSourceBudgetPlanScenario()
    {
        return BudgetPlanScenario::verifyIsMonetaryUnitOfMeasureClass(BudgetPlanScenario::findByLocalizedName(sourceBudgetPlanScenario.text()).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTargetBudgetPlanScenario</Name>
				<Source><![CDATA[
    public boolean validateTargetBudgetPlanScenario()
    {
        boolean             isValid;

        isValid = super();

        if (isValid)
        {
            isValid = BudgetPlanScenario::verifyIsMonetaryUnitOfMeasureClass(BudgetPlanScenario::findByLocalizedName(targetBudgetPlanScenario.text()).RecId);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanGenerateFormHcm construct()
    {
        return new BudgetPlanGenerateFormHcm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>