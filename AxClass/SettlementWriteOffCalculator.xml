<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// The <c>SettlementWriteOffCalculator</c> class manages the calculation of settlement amounts for write off.
/// </summary>
[ExportInterfaceAttribute()]
internal abstract class SettlementWriteOffCalculator
{
    protected CustVendOpenTransManager manager;
    protected SettlementWriteOffQueryGenerator queryGenerator;
    protected SettlementWriteOffDefaults defaults;
    protected SpecTransWriteOffTmp specTransWriteOffTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatePotentialAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the potential adjustment amount that should be applied for the current set of marked documents
    /// should the write off be accepted.
    /// </summary>
    /// <param name = "_transactionContext">The transaction context for the originating record against which to calculate write off amounts.</param>
    /// <returns>The potential adjustment transactions.</returns>
    internal abstract SettlementWriteOffCalculatedTransactions calculatePotentialAdjustment(SettlementWriteOffTransactionContext _transactionContext)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSettlementWriteOffDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the module-specific defaults for use in calculation.
    /// </summary>
    /// <param name = "_defaults">The module defaults.</param>
    /// <returns>The module defaults.</returns>
    internal SettlementWriteOffDefaults parmSettlementWriteOffDefaults(SettlementWriteOffDefaults _defaults = defaults)
    {
        defaults = _defaults;
        return defaults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePotentialAdjustmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the potential adjustment amount based on the balance information collated in the <c>SpecTransWriteOffTmp</c> temp buffer.
    /// </summary>
    /// <param name = "_specReference">The spec reference.</param>
    /// <returns></returns>
    internal protected AmountCur calculatePotentialAdjustmentAmount(Common _specReference)
    {
        AmountCur potentialAdjustmentAmount;

        SpecTrans specTrans;
        CustVendTransOpen custVendTransOpen = CustVendTransOpen::getEmptyTableBuffer(defaults.getModuleCustVend());

        while select crosscompany custVendTransOpen
            join specTrans
                where custVendTransOpen.DataAreaId == specTrans.RefCompany
                    && custVendTransOpen.TableId == specTrans.RefTableId
                    && custVendTransOpen.RecId == specTrans.RefRecId
                    && specTrans.SpecCompany == _specReference.company()
                    && specTrans.SpecTableId == _specReference.TableId
                    && specTrans.SpecRecId == _specReference.RecId
            join specTransWriteOffTmp
                where specTrans.RecId == specTransWriteOffTmp.SpecTransRecId
        {
            potentialAdjustmentAmount += manager.convertAmountTransCurToAmountPaymCur(custVendTransOpen, specTransWriteOffTmp.PossibleSettleAmount)
                - manager.convertAmountTransCurToAmountPaymCur(custVendTransOpen, specTransWriteOffTmp.Balance01)
                - manager.convertAmountTransCurToAmountPaymCur(custVendTransOpen, specTransWriteOffTmp.CashDiscToTake);
        }

        return potentialAdjustmentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesPaymentCoverDocumentBalance</Name>
				<Source><![CDATA[
    private boolean doesPaymentCoverDocumentBalance(AmountCur _paymentAmount, AmountCur _specTransBalance)
    {
        return abs(_paymentAmount) >= abs(_specTransBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the state of the calculator before calculating adjustment amounts.
    /// </summary>
    /// <param name = "_common">The originating table record.</param>
    /// <param name = "_currency">The currency of the adjustment.</param>
    internal protected void initForCalculation(Common _common, CurrencyCode _currency)
    {
        manager = CustVendOpenTransManager::newForSettlementWriteOff(_common, _currency);
        queryGenerator = SettlementWriteOffQueryGeneratorFactory::constructQueryGenerator(defaults.getModuleCustVend());

        delete_from specTransWriteOffTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyAvailablePaymentToDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Matches the amounts marked for settlement against the available payment amount. Once exhausted, further settlement
    /// records will be given a potential adjustment for the full document amount.
    /// </summary>
    /// <param name = "_paymentReference">The payment line reference.</param>
    /// <param name = "_totalPaymentAmount">The payment amount available for settlement.</param>
    /// <param name = "_adjustmentDate">The date for adjustment calculations.</param>
    internal protected void applyAvailablePaymentToDocuments(
        Common _paymentReference,
        AmountCur _totalPaymentAmount,
        TransDate _adjustmentDate)
    {
        AmountCur paymentAmountAvailable = _totalPaymentAmount;

        Query matchSettleQuery = this.getQueryForApplyingPaymentsToDocuments(_paymentReference);
        QueryRun queryRun = new QueryRun(matchSettleQuery);

        SpecTrans specTrans;
        CustVendTransOpen custVendTransOpen;
        while (queryRun.next())
        {
            specTrans = queryRun.get(tableNum(SpecTrans));
            custVendTransOpen = queryRun.get(defaults.getOpenTransactionTableId());

            AmountCur paymentAmountMatched = this.applyAvailablePaymentToDocument(
                specTrans,
                custVendTransOpen,
                paymentAmountAvailable,
                _adjustmentDate);

            paymentAmountAvailable = paymentAmountAvailable - paymentAmountMatched;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForApplyingPaymentsToDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query over settlement for applying payments to documents.
    /// </summary>
    /// <param name = "_paymentReference">The payment line reference.</param>
    /// <returns>The settlement query.</returns>
    internal abstract Query getQueryForApplyingPaymentsToDocuments(Common _paymentReference)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyAvailablePaymentToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Matches the payment amount against a document. The amount for payment may be adjusted if the payment cannot cover
    /// the document open amount.
    /// </summary>
    /// <param name = "_specTrans">The marked link between payment and document.</param>
    /// <param name = "_custVendTransOpen">The transaction record.</param>
    /// <param name = "_paymentAmountAvailable">The total payment amount available for this document.</param>
    /// <param name = "_adjustmentDate">The adjustment date for write off.</param>
    /// <returns>The matched settlement amount in the payment currency.</returns>
    private AmountCur applyAvailablePaymentToDocument(
        SpecTrans _specTrans,
        CustVendTransOpen _custVendTransOpen,
        AmountCur _paymentAmountAvailable,
        TransDate _adjustmentDate)
    {
        AmountCur specTransBalanceInPaymCur = manager.convertAmountTransCurToAmountPaymCur(_custVendTransOpen, _specTrans.Balance01);

        boolean doesPaymentCoverDocumentBalance = this.doesPaymentCoverDocumentBalance(_paymentAmountAvailable, specTransBalanceInPaymCur);

        if (doesPaymentCoverDocumentBalance)
        {
            // When sufficient funds exist, preserve the existing amounts on SpecTrans
            this.saveUpdatedBalancesForSpecTrans(
                _specTrans,
                _specTrans.Balance01,
                _specTrans.CashDiscToTake,
                manager.determinePossibleSettleAmountWithoutCashDiscount(_custVendTransOpen));
        }
        else
        {
            specTransBalanceInPaymCur = this.applyInsufficientPaymentToDocument(
                _specTrans,
                _custVendTransOpen,
                specTransBalanceInPaymCur,
                _paymentAmountAvailable);
        }

        return -specTransBalanceInPaymCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyInsufficientPaymentToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies an insufficient payment to a document balance. The balance and cash discount for the document will
    /// be adjusted based on the amount of payment and the available cash discount, if any.
    /// </summary>
    /// <param name = "_specTrans">The current marked balance record.</param>
    /// <param name = "_custVendTransOpen">The document open record.</param>
    /// <param name = "_specTransBalanceInPaymCur">The current balance in the payment currency.</param>
    /// <param name = "_paymentAvailable">The current payment amount available.</param>
    /// <returns>The marked balance taken in the payment currency.</returns>
    private AmountCur applyInsufficientPaymentToDocument(
        SpecTrans _specTrans,
        CustVendTransOpen _custVendTransOpen,
        AmountCur _specTransBalanceInPaymCur,
        AmountCur _paymentAvailable)
    {
        AmountCur balanceToTake;
        AmountCur cashDiscountToTake;

        if (_paymentAvailable == 0.0)
        {
            _specTransBalanceInPaymCur = 0.0;
        }
        else
        {
            AmountCur remainingPaymentAmountInTransCur = manager.convertAmountPaymCurToAmountTransCur(_custVendTransOpen, _paymentAvailable);

            balanceToTake = manager.calculateUpdatedAmountForSettlement(_custVendTransOpen, -remainingPaymentAmountInTransCur);

            cashDiscountToTake = manager.calculateCashDiscountForSettleAmount(_custVendTransOpen, balanceToTake);

            _specTransBalanceInPaymCur = manager.convertAmountTransCurToAmountPaymCur(_custVendTransOpen, balanceToTake);
        }

        this.saveUpdatedBalancesForSpecTrans(
            _specTrans,
            balanceToTake,
            cashDiscountToTake,
            manager.determinePossibleSettleAmountWithoutCashDiscount(_custVendTransOpen));

        return _specTransBalanceInPaymCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveUpdatedBalancesForSpecTrans</Name>
				<Source><![CDATA[
    private void saveUpdatedBalancesForSpecTrans(
        SpecTrans _specTrans,
        AmountCur _balanceToTake,
        AmountCur _cashDiscToTake,
        AmountCur _possibleSettleAmount)
    {
        specTransWriteOffTmp.clear();
        specTransWriteOffTmp.Balance01 = _balanceToTake;
        specTransWriteOffTmp.CashDiscToTake = _cashDiscToTake;
        specTransWriteOffTmp.CurrencyCode = _specTrans.Code;
        specTransWriteOffTmp.PossibleSettleAmount = _possibleSettleAmount;
        specTransWriteOffTmp.SpecTransRecId = _specTrans.RecId;
        specTransWriteOffTmp.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>