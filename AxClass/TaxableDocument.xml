<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxableDocument</c> class is an interface that represents a transaction document that
///    supports tax calculations. Transactions that require taxes to be calculated must implement this
///    interface.
/// </summary>
public interface TaxableDocument
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if tax group are set on any line of the document.
    /// </summary>
    /// <returns>
    ///  true if tax groups exist on any line; otherwise, false.
    /// </returns>
    public boolean doTaxGroupExistsForDocument()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an object that implements the <c>TaxableLine</c> interface that represents the current
    ///    transaction line.
    /// </summary>
    /// <returns>
    ///    An object that represents the current transaction line.
    /// </returns>
    /// <remarks>
    ///    If there is no current line, null may be returned.
    /// </remarks>
    public TaxableLine getCurrentLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentMiscellaneousCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an object which implements the <c>TaxableLine</c> interface that represents the current
    ///    miscellaneous charge line.
    /// </summary>
    /// <returns>
    ///    An object that represents the current miscellaneous charge line.
    /// </returns>
    /// <remarks>
    ///    If there is no current miscellaneous charge line or if miscellaneous charges are not supported,
    ///    then null may be returned.
    /// </remarks>
    public TaxableLine getCurrentMiscellaneousCharge()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Reads the first transaction line.
    /// </summary>
    /// <returns>
    ///   true if the first transaction line was found; otherwise false.
    /// </returns>
    public boolean getFirstLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstMiscellaneousCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Reads the first miscellaneous charge line.
    /// </summary>
    /// <returns>
    ///   true if the first miscellaneous charge line was found; otherwise, false.
    /// </returns>
    /// <remarks>
    ///   Transactions which do not support Miscellaneous Charges may return false.
    /// </remarks>
    public boolean getFirstMiscellaneousCharge()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the Invoice ID.
    /// </summary>
    /// <returns>
    ///   The invoice ID if an invoice ID exists; otherwise, blank.
    /// </returns>
    public InvoiceId getInvoiceId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalizedDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the table buffer that represents the journalized document header for the transaction.
    /// </summary>
    /// <returns>
    ///    The table buffer for the journalized document header.
    /// </returns>
    /// <remarks>
    ///    For example, this would typically be the <c>VendInvoiceJour</c> table if the transaction is
    ///    Purchase Order Invoice. This is used to set the grandparent of the <c>TaxTrans</c> record.The table
    ///    buffer must have a record ID assigned to it.
    /// </remarks>
    public Common getJournalizedDocument()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an object that implements the <c>TaxableLine</c> interface that represents the transaction
    ///    line that is specified by the specified parameter.
    /// </summary>
    /// <param name="_recId">
    ///    The ID of the transaction line.
    /// </param>
    /// <returns>
    ///    An object that represents the transaction line.
    /// </returns>
    public TaxableLine getLineByRecId(RefRecId _recId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the module type.
    /// </summary>
    /// <returns>
    ///   The module type.
    /// </returns>
    public TaxModuleType getModuleType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Reads the next transaction line.
    /// </summary>
    /// <returns>
    ///   true if a transaction line was found; otherwise, false.
    /// </returns>
    public boolean getNextLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextMiscellaneousCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Reads the next miscellaneous charge line.
    /// </summary>
    /// <returns>
    ///   true if a miscellaneous charge line was found; otherwise, false.
    /// </returns>
    public boolean getNextMiscellaneousCharge()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the reference number.
    /// </summary>
    /// <returns>
    ///   The reference number for the current document.
    /// </returns>
    public Voucher getReferenceNumber()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines the source company in an intercompany document.
    /// </summary>
    /// <returns>
    ///   The source company.
    /// </returns>
    /// <remarks>
    ///   The source company is the company where the payable to the vendor or receivable to the customer is recorded.
    /// </remarks>
    public SelectableDataArea getSourceCompany()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the table buffer that represents the source document header for the transaction.
    /// </summary>
    /// <returns>
    ///    The table buffer for the source document header.
    /// </returns>
    /// <remarks>
    ///    For example, for Purchase Order, the source document header is a <c>PurchTable</c> record.This
    ///    method is used before the document is journalized to determine the grandparent of the
    ///    <c>TaxUncommitted</c> record.The table buffer must have a record ID assigned to it.
    /// </remarks>
    public Common getSourceHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a flag that indicates whether the line amounts include taxes.
    /// </summary>
    /// <returns>
    ///    true if the line amounts include taxes; otherwise, false.
    /// </returns>
    public boolean getTaxIncluded()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxObligationCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the company for which we have a tax obligation.
    /// </summary>
    /// <returns>
    ///   The <c>TaxObligationCompany</c> setting for the document.
    /// </returns>
    public TaxObligationCompany getTaxObligationCompany()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the document that is being taxed is a payment.
    /// </summary>
    /// <returns>
    ///    true if the current document is a payment; otherwise, false.
    /// </returns>
    public boolean isPayment()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSourceDocumentFramework</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current transaction supports the Source Document Framework.
    /// </summary>
    /// <returns>
    ///    true if the current transaction supports the Source Document Framework; otherwise, false.
    /// </returns>
    public boolean useSourceDocumentFramework()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether taxes should allow the use of the <c>TaxUncommitted</c> table to store taxes
    ///    which have not yet been journalized.
    /// </summary>
    /// <returns>
    ///    true if taxes should let the user use of the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>