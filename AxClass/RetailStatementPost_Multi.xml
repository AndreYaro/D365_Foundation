<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStatementPost_Multi</Name>
	<SourceCode>
		<Declaration><![CDATA[
using EventLogger = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;

/// <summary>
/// Validates and posts all the statement for the storeID selected and posts related sales orders.
/// </summary>
[SysObsolete('This class is obsolete. Use RetailEodStatementPostBatchScheduler instead.', true, 30\11\2019)]
class RetailStatementPost_Multi extends RunBaseBatch implements RetailIOperatingUnitPickerCaller, BatchRetryable
{
    Set         selectedOMInternalOrgRecIds;
    RecId       oMHierarchyRecId;
    container   packedOMUnits;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        packedOMUnits,
        oMHierarchyRecId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    //Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    public Object dialog()
    {
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(RetailOperatingUnitPicker), this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        if (selectedOMInternalOrgRecIds)
        {
            packedOMUnits = selectedOMInternalOrgRecIds.pack();
        }

        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOMHierarchyRecId</Name>
				<Source><![CDATA[
    public RecId  parmOMHierarchyRecId(RecId _oMHierarchyRecId = oMHierarchyRecId)
    {
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        oMHierarchyRecId = _oMHierarchyRecId;

        return oMHierarchyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedOMInternalOrgRecIds</Name>
				<Source><![CDATA[
    public Set parmSelectedOMInternalOrgRecIds(Set _selectedOMInternalOrgRecIds = selectedOMInternalOrgRecIds)
    {
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        if (!prmIsDefault(_selectedOMInternalOrgRecIds))
        {
            selectedOMInternalOrgRecIds = _selectedOMInternalOrgRecIds;
        }

        return selectedOMInternalOrgRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPickerInitParameters</Name>
				<Source><![CDATA[
    RetailOperatingUnitPickerData getPickerInitParameters()
    {
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        RetailOperatingUnitPickerData pickerInitParameter = new RetailOperatingUnitPickerData();
        pickerInitParameter.hierarchyPurpose = HierarchyPurpose::RetailPOSPosting;

        if (this.parmInBatch())
        {
            pickerInitParameter.omInternalOrganizationRecIds = selectedOMInternalOrgRecIds;            
            pickerInitParameter.omHierarchyTypeRecId = this.oMHierarchyRecId;
        }

        return pickerInitParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOperatingUnitPickerData</Name>
				<Source><![CDATA[
    void processOperatingUnitPickerData(RetailOperatingUnitPickerData operatingUnitPickerData)
    {
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        this.parmSelectedOMInternalOrgRecIds(operatingUnitPickerData.omInternalOrganizationRecIds);
        this.parmOMHierarchyRecId(operatingUnitPickerData.omHierarchyTypeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and posts all the statement for the storeID selected and related sales orders.
    /// </summary>
    /// <remarks>
    /// Initializes and calls the methods of the classes <c>RetailStatementPostChecker</c>, <c>RetailStatementPostSalesOrders</c>
    /// and <c>RetailStatementPost</c>.
    /// </remarks>
    public void run()
    {
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        RetailStoreTable        storeTable;
        RetailStatementTable    statementTable;
        SetEnumerator           selectedStoreEnumerator;
        SetEnumerator           oMInternalOrgRecIds;
        RetailChannelTable      retailChannelTable;
        Set selectedStoreRecIds = new Set(Types::Int64);
        Set operatingUnitType = new Set(Types::Enum);
        Set                     descendants;
        SetEnumerator           descendantsEnumerator;
        str                     unPostedStatementList;
        Counter                 posted, unPosted;

        System.Exception exception;

        try
        {
            EventLogger::EventWriteRetailStatementPostBatchJobMultiStart('RetailStatementPost_Multi:run', 'Start of execution of retail post statement batch job.');

            oMInternalOrgRecIds = selectedOMInternalOrgRecIds.getEnumerator();

            // Used to filter the OMOperating unit type to include only Retail channel.
            operatingUnitType.add(OMOperatingUnitType::RetailChannel);

            while (oMInternalOrgRecIds.moveNext())
            {
                //get all the descendents for selected hierarchy node.
                descendants = OMOperatingUnit::getDescendantsAndSelf(
                                            oMInternalOrgRecIds.current(),
                                            oMHierarchyRecId,
                                            DateTimeUtil::utcNow(),
                                            operatingUnitType
                                            );

                // start traversing on the descendants.
                descendantsEnumerator = descendants.getEnumerator();
                while (descendantsEnumerator.moveNext())
                {
                    retailChannelTable = RetailChannelTable::findByOperatingUnitId(descendantsEnumerator.current());

                    if (retailChannelTable.RecId &&
                        retailChannelTable.ChannelType == RetailChannelType::RetailStore &&
                        !selectedStoreRecIds.in(retailChannelTable.RecId))
                    {
                        selectedStoreRecIds.add(retailChannelTable.RecId);
                    }
                }
            }

            // start processing for selected Stores.
            selectedStoreEnumerator = selectedStoreRecIds.getEnumerator();
            while (selectedStoreEnumerator.moveNext())
            {
                storeTable = RetailStoreTable::findRecId(selectedStoreEnumerator.current());

                // Create a RetailStatementPost task for each open statement belonging to the store.
                while select statementId from statementTable
                where   statementTable.storeId == storeTable.StoreNumber
                {
                    try
                    {
                        this.checkStatement(statementTable.statementId);

                        RetailStoreOrderSynchronizer::CreateStoreSalesorders(statementTable.statementId, true);
                        posted++;
                    }
                    catch (exception)
                    {
                        unPosted++;

                        if (unPostedStatementList)
                        {
                            unPostedStatementList = unPostedStatementList + ', ' + statementTable.statementId;
                        }
                        else
                        {
                            unPostedStatementList = statementTable.statementId;
                        }
                        
                        continue; //Although this statement is post failed, we can still post others.
                    }
                }
            }

            if (this.isInBatch())
            {
                if (unPosted)
                {
                    throw Global::error(strFmt('%1 of %2 statements are posted failed: %3', unPosted, posted + unPosted, unPostedStatementList));
                }
                else if (!posted)
                {
                    throw Global::error('No statement is posted');
                }
            }
        
            EventLogger::EventWriteRetailStatementPostBatchJobMultiStop('RetailStatementPost_Multi:run', 'End of execution of retail post statement batch job.');
        }
        catch (exception)
        {
            if (this.isInBatch())
            {
                EventLogger::EventWriteRetailStatementPostBatchJobError('Exception raised during Retail Post Statement execution.', exception.Message, exception.StackTrace);
                throw Global::error('Retail Post statement job failed.');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the statement before posting.
    /// </summary>
    /// <param name = "_statementId">Statement id.</param>
    /// <remarks>
    /// Calls the class <c>RetailStatementPostChecker</c> to validate the statement.
    /// </remarks>
    private void checkStatement(RetailStatementId _statementId)
    {
        RetailStatementPostChecker statementChecker;

        statementChecker = new RetailStatementPostChecker();
        statementChecker.parmStatementId(_statementId);
        statementChecker.parmInBatch(this.isInBatch());

        statementChecker.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        Integer     version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                if (packedOMUnits)
                {
                    selectedOMInternalOrgRecIds = Set::create(packedOMUnits);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RET3865";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        RetailStatementPost_Multi   retailStatementPost_Multi  = new RetailStatementPost_Multi();

        if (RetailEodStatementFeatureHelper::isNewEodEnabled())
        {
            str dictMenuLabel = "@Retail:RetailEodRetailPostBatchLabel";

            // Your system is configured to use the new statement posting process. Please use the menu item "Open statement" to execute using the new process.
            throw error (strFmt("@Retail:RetailEodKeyEnabledMenuItemError", dictMenuLabel));
        }

        if (retailStatementPost_Multi.prompt())
        {
            retailStatementPost_Multi.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>