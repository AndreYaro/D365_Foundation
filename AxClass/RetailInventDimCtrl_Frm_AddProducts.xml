<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInventDimCtrl_Frm_AddProducts</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailInventDimCtrl_Frm_AddProducts</c> class checks whether the specified dimension setup is valid and active
/// and gets information about which dimensions are active.
/// </summary>
public class RetailInventDimCtrl_Frm_AddProducts extends inventDimCtrl_Frm_Editable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustEnableField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified dimension setup is valid and active.
    /// </summary>
    /// <param name="_dimFieldId">
    /// Specifies a dimension field ID for which record is to be found.
    /// </param>
    /// <returns>
    /// true if the dimension is valid and active; otherwise, false.
    /// </returns>
    NoYes mustEnableField(fieldId _dimFieldId)
    {
        if (!super(_dimFieldId))
        {
            return NoYes::No;
        }

        FormRun callerForm = callingElement.args().caller();

        if (callerForm.name() == menuitemDisplayStr(RetailPackage))
        {
            return RetailPackageLines::mustEnableDimField(this.getFieldSetup(_dimFieldId), _dimFieldId);
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowGridField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets information about which dimensions are active.
    /// </summary>
    /// <param name="_dimFieldId">
    /// Specifies a dimension field ID for which record is to be found.
    /// </param>
    /// <returns>
    /// true if the dimension is valid and active; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Information is gathered from all product dimension groups in the system. It is enough that a
    /// dimension is active in just one product dimension group to be returned as active.
    /// </remarks>
    NoYes mustShowGridField(fieldId _dimFieldId)
    {
        InventDimParm   inventDimParm;
        fieldId         dimParmFieldId = InventDim::dim2dimParm(_dimFieldId);

        inventDimParm.initProductDimensionsAllGroups();
        return inventDimParm.(dimParmFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static RetailInventDimCtrl_Frm_AddProducts construct()
    {
        return new RetailInventDimCtrl_Frm_AddProducts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of this class to be used in Forms.
    /// </summary>
    /// <param name="_formRun">
    /// The Form where controls are maintained
    /// </param>
    /// <returns>
    /// A instance of this class to be used in a Form
    /// </returns>
    public static RetailInventDimCtrl_Frm_AddProducts newFromForm(FormRun _formRun)
    {
        RetailInventDimCtrl_Frm_AddProducts      inventDimCtrl = RetailInventDimCtrl_Frm_AddProducts::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.init();
        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>