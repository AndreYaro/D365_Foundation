<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetproposalLendingRet</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetproposalLendingRet extends RAssetProposal implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
public RAssetTransType assetTransType()
{
    return RAssetTransType::LendingRet;
}

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
public void createJournalLines(RAssetStandardId _assetStandardId,
                               boolean          _runFromBatch = true,
                               RAssetAmount     _assetAmount  = 0)
{
    RAssetStatusType rAssetStatusType = RAssetStatusType::construct(rAssetTable);
    RAssetTransDate  rAssetTransDate = runDate;

    if (! rAssetStatusType.allowLendingRet(_assetStandardId))
        return;

    runDate = RAssetLending::findLastLent(rAssetTable.AccountNum).AssetLendActRet;

    if (! runDate || runDate > rAssetTransDate)
    {
        if (singleOperation)
        {
            if (runDate)
            {
                throw error("@GLS220508");
            }
            else
            {
                throw error("@GLS220509");
            }
        }
        return;
    }

    if (rAssetStandards.Depreciation)
    {
        rAssetJournal.createVoucher();
        this.createDisposalTrans(RAssetDisposalType::LendRet, _assetStandardId);
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
public Object dialog()
{
    DialogRunbase dialog = super();
    ;

    dialog.caption("@GLS116477");
    dialogRunDate.label("@GLS116508");
    dialogAssetStandardId.visible(false);

    return dialog;
}

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
public void run(QueryRun _queryRun = queryRun)
{
    ;
    _queryRun.query().dataSourceName(tableStr(RAssetTable)).addRange(fieldNum(RAssetTable, AssetType)).value(queryRange(RAssetType::Tangible, RAssetType::Other));
    super(_queryRun);
}

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>