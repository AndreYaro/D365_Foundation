<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegParametersEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25RegParametersEngine
{
    RTax25RegisterParameters registerParameters;
    FormDataSource           registerParametersDs;
    RTax25RegType            regType;
    container                regCalcParameters;
    FormRun                  formRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void init()
    {
        int i;

        select count(RecId) from registerParameters
            where registerParameters.RegisterId == regType.registerId();

        if (registerParameters.RecId == conLen(regCalcParameters))
            return;

        delete_from registerParameters
            where registerParameters.RegisterId == regType.registerId();

        for (i = 1; i <= conLen(regCalcParameters); i++)
        {
            registerParameters.RegisterId    = regType.registerId();
            registerParameters.ParameterName = conPeek(regCalcParameters, i);
            registerParameters.ParameterCode = i;

            registerParameters.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies visibility of the dimension control on the parameter form.
    /// </summary>
    /// <returns>
    /// true if the dimension control should be visible; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ledgerDimensionVisible()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void lookup(FormStringControl _lookupCtrl)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupEnabled</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean lookupEnabled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void new(FormRun       _formRun,
                    RTax25RegType _rTax25RegType)
    {
        ;
        formRun                 = _formRun;
        registerParametersDs    = formRun.dataSource(tableStr(RTax25RegisterParameters));
        registerParameters      = registerParametersDs.cursor();
        regType                 = _rTax25RegType;
        regCalcParameters       = regType.calcParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameterAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies possibility of editing of the register parameter.
    /// </summary>
    /// <returns>
    /// true if the register parameter can be edited; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parameterAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specificParm</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean specificParm()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specificParmCall</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void specificParmCall()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>specificParmText</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public str specificParmText()
    {
        return "@SYS19922";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean validateWrite()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegParametersEngine construct(RTax25RegisterType _rTax25RegisterType, FormRun _formRun)
    {
        RTax25RegType regType = RTax25RegType::construct(_rTax25RegisterType);
        RTax25RegParametersEngine ret;

        switch (_rTax25RegisterType)
        {
            case RTax25RegisterType::InventReceipt:
                ret = new RTax25RegParametersEngine_InventReceipt(_formRun, regType);
                break;
            case RTax25RegisterType::NonInventReceipt,
                 RTax25RegisterType::PaymentConsumption,
                 RTax25RegisterType::PaymentReceipt,
                 RTax25RegisterType::Income,
                 RTax25RegisterType::NonInventIssue:
                ret = new RTax25RegParametersEngine_Ledger(_formRun, regType);
                break;
            case RTax25RegisterType::AssetsCost,
                 RTax25RegisterType::AssetsDisposal,
                 RTax25RegisterType::TangibleAssetInfo,
                 RTax25RegisterType::TangibleDepreciation,
                 RTax25RegisterType::TangibleGroupDepreciation,
                 RTax25RegisterType::IntangibleAssetInfo,
                 RTax25RegisterType::IntangibleDepreciation,
                 RTax25RegisterType::IntangibleGroupDepreciation,
                 RTax25RegisterType::AssetDeprBonusRecovery:
                ret = new RTax25RegParametersEngine_Assets(_formRun, regType);
                break;
            case RTax25RegisterType::StdCurrentRate,
                 RTax25RegisterType::StdDeferralsRate,
                 RTax25RegisterType::StdCurrentExpense:
                ret = new RTax25RegParametersEngine_Std(_formRun, regType);
                break;
            case RTax25RegisterType::DebtCreditInventory,
                 RTax25RegisterType::DebtDebitInventory,
                 RTax25RegisterType::DebtDebitInventoryRAP,
                 RTax25RegisterType::DebtCreditMovement,
                 RTax25RegisterType::DebtDebitMovement,
                 RTax25RegisterType::DebtDebitMovementRAP:
                ret = new RTax25RegParametersEngine_Debt(_formRun, regType);
                break;
            case RTax25RegisterType::TemporaryDifferences,
                 RTax25RegisterType::TemporaryDifferencesByBalance:
                ret = new RTax25RegParametersEngine_TempDifference(_formRun, regType);
                break;
            case RTax25RegisterType::ConstantDifferences:
                ret = new RTax25RegParametersEngine_ConstDiff(_formRun, regType);
                break;
            case RTax25RegisterType::ExchangeAdj,
                 RTax25RegisterType::AmountDifference:
                ret = new RTax25RegParametersEngine_ExchangeAdj(_formRun, regType);
                break;
            case RTax25RegisterType::TaxRemainGoods:
                ret = new RTax25RegParametersEngine_TaxRemainGoods(_formRun, regType);
                break;
            case RTax25RegisterType::ProfitAllocation:
                ret = new RTax25RegParametersEngine_ProfitAlloc(_formRun, regType);
                break;
            default:
                ret = RTax25RegParametersEngine::constructDefault(_rTax25RegisterType, _formRun);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method provides the extension point for adding a new RTax25 register into the part of RTax25 framework.
    /// </summary>
    /// <param name = "_rTax25RegisterType">A main register type.</param>
    /// <param name = "_formRun">A form run object.</param>
    /// <returns>An instance of a class <c>RTax25RegParametersEngine</c>.</returns>
    protected static RTax25RegParametersEngine constructDefault(RTax25RegisterType _rTax25RegisterType, FormRun _formRun)
    {
        return new RTax25RegParametersEngine(_formRun, RTax25RegType::construct(_rTax25RegisterType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameters2Con</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        static public container parameters2Con(Range _parameters)
    {
        container   ret;
        int         pos1 = 1, pos2, len = strLen(_parameters);
        str         tmp;

        do
        {
            pos2 = strScan(_parameters, ',', pos1, len);
            if (pos2 == 0)
            {
                pos2 = len + 1;
            }
            tmp = subStr(_parameters, pos1, pos2 - pos1);
            if (tmp)
            {
                ret += tmp;
            }
            pos1 = pos2 + 1;
        }
        while (pos2 < len);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void write()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>