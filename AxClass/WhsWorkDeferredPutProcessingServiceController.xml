<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkDeferredPutProcessingServiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is responsible for acting as controller for the <c>WHSWorkDeferredPutProcessingService</c> service class.
/// </summary>
public class WHSWorkDeferredPutProcessingServiceController extends SysOperationServiceController implements BatchRetryable
{
    private WHSInstrumentationLogger logger;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger logger()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WHSWorkDeferredPutProcessingServiceController));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a new sessions can be created.
    /// </summary>
    /// <returns>True since it is allowed to run the operation in a new session.</returns>
    protected boolean canRunInNewSession()
    {
        return true;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromExecutionMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the related controller class
    /// with the specified execution mode.
    /// </summary>
    /// <param name = "_executionMode">The execution mode.</param>
    /// <returns>
    /// A new instance of the related controller class.
    /// </returns>
    private static WHSWorkDeferredPutProcessingServiceController newFromExecutionMode(SysOperationExecutionMode _executionMode)
    {
        var controller = new WHSWorkDeferredPutProcessingServiceController(
                classStr(WHSWorkDeferredPutProcessingService),
                methodStr(WHSWorkDeferredPutProcessingService, processPutWork),
                _executionMode);

        //No need to save anything 
        controller.parmLoadFromSysLastValue(false);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOperationFromDeferredPutProcessingTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the operation based on the task.
    /// </summary>
    /// <param name = "_deferredPutProcessingTask">The deferred put operation processing task.</param>
    [Hookable(false)]
    internal void startOperationFromDeferredPutProcessingTask(WHSWorkDeferredPutProcessingTask _deferredPutProcessingTask)
    {
        
        using (var activityContext = this.logger().workDeferredPut().startOperationFromTask())
        {
            this.logger().logRecordInformation(_deferredPutProcessingTask);
            if (!_deferredPutProcessingTask.RecId)
            {
                throw error(Error::missingRecord(tableStr(WHSWorkDeferredPutProcessingTask)));
            }
        
            this.parmShowDialog(false);
            this.parmShowProgressForm(false);
        
            this.parmDialogCaption(strFmt("@WAX:WHSWorkDeferredPutProcessingControllerCaption", _deferredPutProcessingTask.WorkId,  _deferredPutProcessingTask.WorkLineNumber, _deferredPutProcessingTask.WorkInventLocationId, _deferredPutProcessingTask.PutWMSLocationId));
            this.getDataContractObject().initFromWorkDeferredPutProcessingTask(_deferredPutProcessingTask);
            this.startOperation();

            //create the relationship so we can filter on the batch jobs from the UI
            if (this.batchInfo().parmBatch().RecId)
            {
                WHSWorkDeferredPutProcessingTaskBatch::create(_deferredPutProcessingTask, this.batchInfo().parmBatch().RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOperationFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the deferred operation based on the parameters.
    /// </summary>
    /// <param name = "_parameters">The instance of <c>WHSWorkPutOperationParameters</c>.</param>
    /// <param name = "_processingRule">The processing rule used for the deferred put.</param>
    [Hookable(false)]
    internal static void startOperationFromParameters(
        WHSWorkPutOperationParameters   _parameters,
        WHSWorkOperationProcessingRule  _processingRule)
    {
        var staticLogger = WHSInstrumentationLogger::createLogger(classStr(WHSWorkDeferredPutProcessingServiceController));
        
        using (var activityContext = staticLogger.workDeferredPut().startOperationFromContract())
        {
            ttsbegin;

            var blockingResult = WHSWorkBlocking::newFromWorkIdSkipInProgressWorkLineWithNoPreviousPutCheck(_parameters.parmWorkId()).tryBlockWorkWithReasonType(WHSWorkBlockingReasonType::DeferredPutOperation);

            if (!blockingResult.parmCanBlockResult())
            {
                throw error(blockingResult.errorMessage());
            }

            var task = WHSWorkDeferredPutProcessingTask::createFromPutOperationParameters(_parameters);

            var controller = WHSWorkDeferredPutProcessingServiceController::newFromExecutionMode(SysOperationExecutionMode::ReliableAsynchronous);
            controller.parmReliableAsyncBatchGroupId(_processingRule.DeferredProcessingBatchGroupId);
            controller.startOperationFromDeferredPutProcessingTask(task);
        
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WHSWorkDeferredPutProcessingTask workDeferredPutProcessingTask = _args.record() as WHSWorkDeferredPutProcessingTask;

        if (workDeferredPutProcessingTask && FormDataUtil::isFormDataSource(workDeferredPutProcessingTask))
        {
            var controller = WHSWorkDeferredPutProcessingServiceController::newFromExecutionMode(SysOperationExecutionMode::Synchronous);
            
            FormDataSource dataSource = FormDataUtil::getFormDataSource(workDeferredPutProcessingTask) as FormDataSource;

            var multiSelect = MultiSelectionHelper::construct();
            multiSelect.parmDatasource(dataSource);

            WHSWorkDeferredPutProcessingTask workDeferredPutProcessingTaskProcess = multiSelect.getFirst() as WHSWorkDeferredPutProcessingTask;
            Counter processedRecords; 
            Counter nonProcessedRecords;

            while (workDeferredPutProcessingTaskProcess)
            {
                if (workDeferredPutProcessingTaskProcess.checkStatusAllowsProcessing(true))
                {
                    try
                    {
                        controller.startOperationFromDeferredPutProcessingTask(workDeferredPutProcessingTaskProcess);
                        
                        processedRecords++;
                    }
                    catch
                    {
                        //we catch so we can continue to process the next record
                        nonProcessedRecords++;
                    }
                }
                else
                {
                    nonProcessedRecords++;
                }
                workDeferredPutProcessingTaskProcess = multiSelect.getNext();
            }     
                
            dataSource.research();
            dataSource.refresh();
            
            if (processedRecords > 0)
            {
                info(strFmt("@WAX:WHSWorkDeferredPutProcessingControllerOperationSummary", processedRecords, nonProcessedRecords));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>