<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSalesTaxPaymentFormController_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controls the form action for <c>TaxSalesTaxPaymentDetailsTrans_IN</c>.
/// </summary>
class TaxSalesTaxPaymentFormController_IN
{
    Object                          sdForm;
    TaxSalesTaxPaymentFacade_IN     facade;
    TaxSalesTaxPaymentFormCtrl_IN   controls;
    TaxReportHierarchyNode_IN       selectedNode;

    Map                         treeItem2DetailNode;
    ImageListAppl               imageList;
    ImageRes                    imageRes;

    #define.RootImageID(10052)
    #define.TaxTypeImageID(10053)
    #define.TaxComponentImageID(10524)
    #define.ExciseRecordTypeImageID(10054)
    #define.ServAcctCodeImageID(10055)
    #define.DefaultImageID(10901)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add node to the tree view
    /// </summary>
    /// <param name="_parentItemIdx">
    /// The parent tree item index
    /// </param>
    /// <param name="_parentNode">
    /// The parent tree node
    /// </param>
    private void addTreeNode(TreeItemIdx _parentItemIdx, TaxReportHierarchyNode_IN _parentNode)
    {
        boolean                     isLeafNode;
        TreeItemIdx                 nodeItemIdx;
        TaxReportHierarchyNode_IN   tableNode;

        while select tableNode
            order by tableNode.ComboDisplayValueStr
            where tableNode.TaxReportHierarchyVersion_IN == _parentNode.TaxReportHierarchyVersion_IN
            &&    tableNode.ParentId == _parentNode.NodeId
        {
            isLeafNode = (tableNode.RightId - tableNode.LeftId == 1);
            nodeItemIdx = SysFormTreeControl::addTreeItem(
                            controls.parmTreeControl(),
                            tableNode.DisplayValue,
                            _parentItemIdx,
                            tableNode,
                            imageList.image(TaxReportHierarchyDesignExtClass_IN::getNodeTypeImageID(tableNode.RefClassId)),
                            !isLeafNode);

            treeItem2DetailNode.insert(nodeItemIdx, tableNode.recId);

            if (!isLeafNode)
            {
                this.addTreeNode(nodeItemIdx, tableNode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initImageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the image list
    /// </summary>
    private void initImageList()
    {
        imageList = new ImageListAppl();
        imageList.add(#RootImageID);
        imageList.add(#TaxTypeImageID);
        imageList.add(#TaxComponentImageID);
        imageList.add(#ExciseRecordTypeImageID);
        imageList.add(#ServAcctCodeImageID);
        imageList.add(#DefaultImageID);

        controls.parmTreeControl().setImagelist(imageList.imageList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTreeControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the Tree control
    /// </summary>
    public void initTreeControl()
    {
        TreeItemIdx                 rootItemIdx;
        TaxReportHierarchyNode_IN   tableNode;

        if (controls.parmPaymentHistoryDetailsDataSource() && controls.parmTreeControl())
        {
            select firstOnly tableNode
                    where tableNode.TaxReportHierarchyVersion_IN == facade.parmTaxSalesTaxPaymentProfile().parmSetOffHierarchyVersion().RecId
                       && tableNode.NodeId == 1;

            if (tableNode.RecId)
            {
                rootItemIdx = SysFormTreeControl::addTreeItem(
                    controls.parmTreeControl(),
                    tableNode.DisplayValue,
                    FormTreeAdd::Root,
                    tableNode,
                    imageList.image(TaxReportHierarchyDesignExtClass_IN::getNodeTypeImageID(tableNode.RefClassId)),
                    true);

                treeItem2DetailNode.insert(rootItemIdx, tableNode.recId);
            }

            this.addTreeNode(rootItemIdx, tableNode);
            SysFormTreeControl::expandTree(controls.parmTreeControl(), rootItemIdx, 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c> TaxSalesTaxPaymentFormController_IN </c>.
    /// </summary>
    /// <param name="_sdForm">
    /// The instance of <c> Form </c>.
    /// </param>
    /// <param name="_facade">
    /// The instance of <c> TaxSalesTaxPaymentFacade_IN </c>.
    /// </param>
    /// <param name="_controls">
    /// The instance of <c> TaxSalesTaxPaymentFormCtrl_IN </c>.
    /// </param>
    protected void new(Object                       _sdForm,
                       TaxSalesTaxPaymentFacade_IN  _facade,
                       TaxSalesTaxPaymentFormCtrl_IN _controls)
    {
        treeItem2DetailNode = new Map(Types::Integer, Types::Int64);

        sdForm = _sdForm;
        facade = _facade;
        controls = _controls;

        controls.parmViewTransactionsButtonControl().registerOverrideMethod(methodStr(FormButtonControl, clicked), methodStr(TaxSalesTaxPaymentFormController_IN, viewTransactionsEventHandler), this);

        this.initImageList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxSalesTaxPaymentFacade</Name>
				<Source><![CDATA[
        public TaxSalesTaxPaymentFacade_IN parmTaxSalesTaxPaymentFacade(TaxSalesTaxPaymentFacade_IN _facade = facade)
    {
        if (facade == null || _facade != null)
        {
            facade = _facade;
        }
        return facade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh grid in the form
    /// </summary>
    public void refreshGrid()
    {
        TaxReportHierarchyNode_IN   tableNode;
        QueryBuildRange             range;

        if (selectedNode)
        {
            controls.parmNodeValueDataSource().query().dataSourceNo(1).clearRanges();
            range = controls.parmNodeValueDataSource().query().
                    dataSourceName(tableStr(TaxReportHierarchyNode_IN)).addRange(fieldNum(TaxReportHierarchyNode_IN, RecId));
            range.value(int642str(0));

            while select RecId from tableNode
                order by tableNode.NodeId, tableNode.ComboDisplayValueStr
                where tableNode.TaxReportHierarchyVersion_IN == selectedNode.TaxReportHierarchyVersion_IN
                &&  tableNode.LeftId >= selectedNode.LeftId
                &&  tableNode.RightId <= selectedNode.RightId
                &&  tableNode.CanSettle == NoYes::Yes
            {
                range = controls.parmNodeValueDataSource().query().
                    dataSourceName(tableStr(TaxReportHierarchyNode_IN)).addRange(fieldNum(TaxReportHierarchyNode_IN, RecId));
                range.value(int642str(tableNode.RecId));
            }
            controls.parmNodeValueDataSource().executeQuery();
        }
        controls.parmPaymentHistoryDetailsDataSource().refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectedNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the selected tree node
    /// </summary>
    /// <param name="_newItem">
    /// The selected tree node
    /// </param>
    protected void setSelectedNode(FormTreeItem _newItem = null)
    {
        RecId   taxReportHierarchyNodeRecId;

        taxReportHierarchyNodeRecId = treeItem2DetailNode.lookup(_newItem.idx());
        if (taxReportHierarchyNodeRecId)
        {
            selectedNode = TaxReportHierarchyNode_IN::find(taxReportHierarchyNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the grid
    /// </summary>
    /// <param name="_newItem">
    /// The selected tree node
    /// </param>
    public void updateGrid(FormTreeItem _newItem)
    {
        this.setSelectedNode(_newItem);
        this.refreshGrid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentHistoryDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the history node's amount and balance
    /// </summary>
    public void updatePaymentHistoryDetails()
    {
        facade.calculateNodeBalance();
        facade.processSalesTaxSetOffRules();
        this.refreshGrid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewTransactionsEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// View transactions event handler
    /// </summary>
    /// <param name="_control">
    /// The button control
    /// </param>
    protected void viewTransactionsEventHandler(FormButtonControl _control)
    {
        Args                                args;
        FormRun                             formRun;

        args = new Args();
        args.caller(sdForm);
        args.record(selectedNode);
        args.parm(int642str(facade.parmTaxSalesTaxPaymentHistory().RecId));

        if (facade.parmTaxSalesTaxPaymentHistory().TaxReportVoucher)
        {
            formRun = new MenuFunction(menuitemDisplayStr(TaxSalesTaxPymHistoryDetailsTrans_IN), MenuItemType::Display).create(args);
        }
        else
        {
            formRun = new MenuFunction(menuitemDisplayStr(TaxSalesTaxPaymentDetailsTrans_IN), MenuItemType::Display).create(args);
        }
        formRun.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c> TaxSalesTaxPaymentFormController_IN </c>.
    /// </summary>
    /// <param name="_sdForm">
    /// The instance of <c> Form </c>.
    /// </param>
    /// <param name="_facade">
    /// The instance of <c> TaxSalesTaxPaymentFacade_IN </c>.
    /// </param>
    /// <param name="_controls">
    /// The instance of <c> TaxSalesTaxPaymentFormCtrl_IN </c>.
    /// </param>
    /// <returns>
    /// A new instance of <c> TaxSalesTaxPaymentFormController_IN </c>.
    /// </returns>
    public static TaxSalesTaxPaymentFormController_IN construct(Object _sdForm,
                                                                TaxSalesTaxPaymentFacade_IN _facade,
                                                                TaxSalesTaxPaymentFormCtrl_IN _controls)
    {
        TaxSalesTaxPaymentFormController_IN controller = new TaxSalesTaxPaymentFormController_IN(_sdForm, _facade, _controls);

        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>