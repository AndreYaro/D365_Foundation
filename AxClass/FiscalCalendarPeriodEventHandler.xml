<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalCalendarPeriodEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FiscalCalendarPeriodEventHandler</c> class implements event handlers for the <c>FiscalCalendarPeriod</c> table.
/// </summary>
public class FiscalCalendarPeriodEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDeletePeriodPostHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post event handler for the canDeletePeriod method on the <c>FiscalCalendarPeriod</c> table.
    /// </summary>
    /// <param name = "_args">
    /// The <c>XppPrePostArgs</c> instance.
    /// </param>
    [PostHandlerFor(tableStr(FiscalCalendarPeriod), tableMethodStr(FiscalCalendarPeriod, canDeletePeriod))]
    public static void canDeletePeriodPostHandler(XppPrePostArgs _args)
    {
        FiscalCalendarPeriod fiscalCalendarPeriod = _args.getThis() as FiscalCalendarPeriod;
        boolean returnValue = _args.getReturnValue();

        container companyCnt = LedgerFiscalCalendar::findDataAreaIdCntForFiscalCalendar(fiscalCalendarPeriod.FiscalCalendar);

        if (returnValue)
        {
            // checking unposted transaction in LedgerJournalTrans
            LedgerJournalTrans ledgerJournalTrans = TransactionFiscalCalendar::findUnpostedLedgerJournalTrans(
                fiscalCalendarPeriod.StartDate,
                fiscalCalendarPeriod.EndDate,
                companyCnt);

            if (ledgerJournalTrans != null)
            {
                CompanyInfo companyInfo = ledgerJournalTrans.companyInfo();
                Ledger ledger = Ledger::findByLegalEntity(companyInfo.RecId);
                warning(strfmt("@SYS328958", ledger.Name, strFmt("@SYS191501", companyInfo.DataArea, companyInfo.Name), fiscalCalendarPeriod.Name));
                returnValue = false;
            }
        }

        if (returnValue)
        {
            // checking unposted transaction in InventJournalTrans
            InventJournalTrans inventJournalTrans = TransactionFiscalCalendar::findUnpostedInventJournalTrans(
                fiscalCalendarPeriod.StartDate,
                fiscalCalendarPeriod.EndDate,
                companyCnt);

            if (inventJournalTrans != null)
            {
                CompanyInfo companyInfo = inventJournalTrans.companyInfo();
                Ledger ledger = Ledger::findByLegalEntity(companyInfo.RecId);
                warning(strfmt("@SYS328958", ledger.Name, strFmt("@SYS191501", companyInfo.DataArea, companyInfo.Name), fiscalCalendarPeriod.Name));
                returnValue = false;
            }
        }

        if (returnValue)
        {
            // checking unposted transaction in ProjJournalTrans
            ProjJournalTrans projJournalTrans = TransactionFiscalCalendar::findUnpostedProjJournalTrans(
                fiscalCalendarPeriod.StartDate,
                fiscalCalendarPeriod.EndDate,
                companyCnt);

            if (projJournalTrans != null)
            {
                CompanyInfo companyInfo = projJournalTrans.companyInfo();
                Ledger ledger = Ledger::findByLegalEntity(companyInfo.RecId);
                warning(strfmt("@SYS328958", ledger.Name, strFmt("@SYS191501", companyInfo.DataArea, companyInfo.Name), fiscalCalendarPeriod.Name));
                returnValue = false;
            }
        }

        if (returnValue)
        {
            //checking unposted transaction in ProjProposalJour.
            ProjProposalJour projProposalJour = TransactionFiscalCalendar::findProjProposalJour(
                fiscalCalendarPeriod.StartDate,
                fiscalCalendarPeriod.EndDate,
                companyCnt);

            if (projProposalJour != null)
            {
                CompanyInfo companyInfo = projProposalJour.companyInfo();
                Ledger ledger = Ledger::findByLegalEntity(companyInfo.RecId);
                warning(strfmt("@SYS328958", ledger.Name, strFmt("@SYS191501", companyInfo.DataArea, companyInfo.Name), fiscalCalendarPeriod.Name));
                returnValue = false;
            }
        }

        if (returnValue)
        {
            // checking unposted transaction in ProjControlPeriodTable
            ProjControlPeriodTable projControlPeriodTable = TransactionFiscalCalendar::findUnpostedProjControlPeriodTable(
                fiscalCalendarPeriod.StartDate,
                fiscalCalendarPeriod.EndDate,
                companyCnt);

            if (projControlPeriodTable != null)
            {
                CompanyInfo companyInfo = projControlPeriodTable.companyInfo();
                Ledger ledger = Ledger::findByLegalEntity(companyInfo.RecId);
                warning(strfmt("@SYS328958", ledger.Name, strFmt("@SYS191501", companyInfo.DataArea, companyInfo.Name), fiscalCalendarPeriod.Name));
                returnValue = false;
            }
        }

        if (returnValue)
        {
            GeneralJournalEntry generalJournalEntry;

            //checking posted transactions and budget association
            select firstonly RecId, Ledger from generalJournalEntry
                where generalJournalEntry.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId;

            if (generalJournalEntry != null)
            {
                Ledger ledger = Ledger::find(generalJournalEntry.Ledger);
                CompanyInfo companyInfo = CompanyInfo::findRecId(ledger.PrimaryForLegalEntity);
                warning(strfmt("@SYS328958", ledger.Name, strFmt("@SYS191501", companyInfo.DataArea, companyInfo.Name), fiscalCalendarPeriod.Name));
                returnValue = false;
            }
        }

        if (returnValue)
        {
            BudgetCycle budgetCycle;

            select firstonly RecId, Name from budgetCycle
                    where budgetCycle.StartFiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                        || budgetCycle.EndFiscalCalendarPeriod == fiscalCalendarPeriod.RecId;

            if (budgetCycle != null)
            {
                warning(strfmt("@SYS328960", fiscalCalendarPeriod.Name, budgetCycle.Name));
                returnValue = false;
            }
        }

        if (returnValue)
        {
            returnValue = !FiscalCalendarPeriodEventHandler::existsNotTransferredJournalEntry(fiscalCalendarPeriod.RecId);

            if (!returnValue)
            {
                warning("@GeneralLedger:DeleteFiscalCalendarPeriodFailedDueToNotTransferred");
            }
        }

        _args.setReturnValue(returnValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNotTransferredJournalEntry</Name>
				<Source><![CDATA[
    private static boolean existsNotTransferredJournalEntry(RecId _fiscalCalendarPeriodRecId)
    {
        SubledgerJournalEntry subledgerJournalEntry;

        select RecId from subledgerJournalEntry
            where subledgerJournalEntry.FiscalCalendarPeriod == _fiscalCalendarPeriodRecId
                && (subledgerJournalEntry.Status == SubledgerJournalEntryStatus::NotTransferred
                || subledgerJournalEntry.Status == SubledgerJournalEntryStatus::TransferInProcess);

        return subledgerJournalEntry.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePostHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for <c>delete</c> method.
    /// </summary>
    /// <param name="_sender">The <c>FiscalCalendarPeriod</c> record that is being deleted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(FiscalCalendarPeriod), DataEventType::Deleted)]
    public static void deletePostHandler(Common _sender, DataEventArgs _e)
    {
        FiscalCalendarPeriodEventHandler::clearBudgetCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPostHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for <c>insert</c> method.
    /// </summary>
    /// <param name="_sender">The <c>FiscalCalendarPeriod</c> record that is being inserted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(FiscalCalendarPeriod), DataEventType::Inserted)]
    public static void insertPostHandler(Common _sender, DataEventArgs _e)
    {
        FiscalCalendarPeriodEventHandler::clearBudgetCache();

        // <GIN>
        if (AssetParameters::isDepreciationCompaniesActEnable_IN())
        {
            FiscalCalendarPeriod    fiscalCalendarPeriod = _sender as FiscalCalendarPeriod;
            FiscalCalendarPeriod_IN fiscalCalendarPeriod_IN;

            if (fiscalCalendarPeriod.RecId)
            {
                ttsbegin;
                fiscalCalendarPeriod_IN.FiscalCalendarPeriod = fiscalCalendarPeriod.RecId;
                fiscalCalendarPeriod_IN.Days = fiscalCalendarPeriod.Type == FiscalPeriodType::Operating ?
                    fiscalCalendarPeriod.EndDate - fiscalCalendarPeriod.StartDate + 1 : 0;
                fiscalCalendarPeriod_IN.insert();
                ttscommit;
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePostHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for <c>update</c> method.
    /// </summary>
    /// <param name="_sender">The <c>FiscalCalendarPeriod</c> record that is being updated.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(FiscalCalendarPeriod), DataEventType::Updated)]
    public static void updatePostHandler(Common _sender, DataEventArgs _e)
    {
        FiscalCalendarPeriodEventHandler::clearBudgetCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBudgetCache</Name>
				<Source><![CDATA[
    private static void clearBudgetCache()
    {
        BudgetCache::clearScope(BudgetCacheScope::BudgetCycleByTimeSpanDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>