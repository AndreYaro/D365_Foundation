<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PsaCustomerRetention</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PsaCustomerRetention extends ProjInvoiceChoose implements BatchRetryable
{
    ProjProposalJour    projProposalJour;
    ProjRevenueTrans    revenueTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignTables</Name>
				<Source><![CDATA[
    public void assignTables()
    {
        super();

        if (queryRevenue && queryRun.changed(tableNum(ProjRevenueTrans)))
        {
            pProjRevenueTrans = queryRun.get(tableNum(ProjRevenueTrans));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFeeTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a fee transaction in the PSAProjProposalProj table.
    /// </summary>
    public void createFeeTransaction()
    {
        PSAProjProposalProj psaProjProposalProj;

        while select ProjId, RetainedNow, FundingSource, ContractLineNum, RetainedPercent from psaProjProposalProj
            where psaProjProposalProj.ProjProposalId == projProposalJour.ProposalId
               && psaProjProposalProj.RetainedNow != 0
        {
            this.createFeeTransactionForProposal(psaProjProposalProj);		
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFeeTransactionForProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a fee transaction per tax group and tax item group combination.
    /// </summary>
    /// <param name="_psaProjProposalProj">
    /// A record in <c>PSAProjProposalProj</c> table.
    /// </param>
    [Replaceable]
    protected void createFeeTransactionForProposal(PSAProjProposalProj	_psaProjProposalProj)
    {
        ProjTaxGroup     projTaxGroup;
        ProjTaxItemGroup projTaxItemGroup;

		Map taxGroupsMap = this.getRetentionTaxGroups(projProposalJour.ProposalId, _psaProjProposalProj.ContractLineNum, _psaProjProposalProj.ProjId);
        MapEnumerator taxGroupsMapEnumerator = taxGroupsMap.getEnumerator(); 

		while (taxGroupsMapEnumerator.moveNext())
        {
            [projTaxGroup, projTaxItemGroup] = taxGroupsMapEnumerator.currentKey();           
            AmountMST perFeeTransactionRetainedNow;
             
            if (_psaProjProposalProj.RetainedPercent)
            {
                perFeeTransactionRetainedNow = this.getCreateFeeJournalPercent(taxGroupsMapEnumerator.currentValue(), _psaProjProposalProj.RetainedPercent);
            }
            else if (_psaProjProposalProj.RetainedNow)
            {
                perFeeTransactionRetainedNow = _psaProjProposalProj.RetainedNow;
            }

            revenueTrans = this.createFeeJournal(_psaProjProposalProj.ProjId,
                                                 perFeeTransactionRetainedNow * -1,
                                                 _psaProjProposalProj.FundingSource,
                                                 _psaProjProposalProj.ContractLineNum,
                                                 true,
                                                 '',
                                                 projProposalJour.InvoiceDate,
                                                 '',
                                                 projTaxGroup,
                                                 projTaxItemGroup);

            select tmpProjProposalJour
                where tmpProjProposalJour.ProjInvoiceProjId == revenueTrans.projTable().ProjInvoiceProjId
                    && tmpProjProposalJour.FundingSource    == projProposalJour.FundingSource
                    && tmpProjProposalJour.TaxGroupId       == ProjParameters::taxGroupInvoice(revenueTrans.ProjId)
                    && tmpProjProposalJour.CurrencyId       == revenueTrans.CurrencyId;

            if (!tmpProjProposalJour)
            {
                tmpProjProposalJour.ProjInvoiceProjId   = revenueTrans.projTable().ProjInvoiceProjId;
                tmpProjProposalJour.FundingSource       = projProposalJour.FundingSource;
                tmpProjProposalJour.CurrencyId          = revenueTrans.CurrencyId;
                tmpProjProposalJour.TaxGroupId          = ProjParameters::taxGroupInvoice(revenueTrans.ProjId);
                tmpProjProposalJour.RefProjProposalJour = projProposalJour.RecId;
                tmpProjProposalJour.insert();
            }

            // Add a filter to the query for every transaction
            this.initQuery();
	    }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    public void initQuery()
    {
        revenueDataSource = queryRun.query().dataSourceTable(tableNum(ProjRevenueTrans));
        revenueSaleDataSource = queryRun.query().dataSourceTable(tableNum(ProjRevenueTransSale));

        if (queryRevenue)
        {
            revenueDataSource.enabled(true);
            revenueDataSource.addRange(fieldNum(ProjRevenueTrans, TransId)).value(queryValue(revenueTrans.TransId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreateFeeJournalPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the retained amount for the invoice amount grouped by sales tax groups.
    /// </summary>
    /// <param name="taxGroupTotalAmount">
    /// Invoice amount grouped by sales tax groups.
    /// </param>
    /// <param name="retainedPercent">
    /// Retained percent on the invoice.
    /// </param>
    /// <returns>
    /// Retained amount for the invoice amount grouped by sales tax group.
    /// </returns>
    public AmountMST getCreateFeeJournalPercent(AmountMST _taxGroupTotalAmount, Percent _retainedPercent)
    {
        AmountMST ret;

        ret = (_taxGroupTotalAmount * _retainedPercent) /  100;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetentionTaxGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax groups for the transactions in the invoice proposal.
    /// </summary>
    /// <param name="_proposalId">
    /// Proposal identifier.
    /// </param>
    /// <param name="_contractLineNum">
    /// Billing Rule identifier.
    /// </param>
    /// <param name="_projId">
    /// Invoice proposal project ID.
    /// </param>
    /// <returns>
    /// A map with key as tax group, tax item group and value is the total sales amount for the transactions in the proposal.
    /// </returns>
    public Map getRetentionTaxGroups(ProjProposalId _proposalId, PSAContractLineNum _contractLineNum, ProjId _projId = '')
    {
        ProjProposalEmpl            projProposalEmpl;
        ProjProposalEmplDetail      projProposalEmplDetail;
        ProjEmplTransSale           projEmplTransSale;
        ProjEmplTrans               projEmplTrans;

        ProjProposalRevenue         projProposalRevenue;
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        ProjRevenueTransSale        projRevenueTransSale;
        ProjRevenueTrans            projRevenueTrans;

        ProjProposalCost            projProposalCost;
        ProjProposalCostDetail      projProposalCostDetail;
        ProjCostTransSale           projCostTransSale;
        ProjCostTrans               projCostTrans;

        ProjItemTransSale           projItemTransSale;
        ProjItemTrans               projItemTrans;
        ProjProposalItem            projProposalItem;
        ProjProposalItemDetail      projProposalItemDetail;
        SalesLine                   salesLine;

        ProjProposalOnAccDetail     projProposalOnAccDetail;
        ProjOnAccTrans              projOnAccTrans;
        Map                         taxGroupsMap = new Map(Types::Container, Types::AnyType);
        ProjProposalJour            projProposalJourLocal;
        AmountMST                   currentAmount = 0;

	    boolean includeTaxAmount = this.canIncludeTaxAmountInRetetention();
        AmountCur perFeeTaxAmount = 0;
        
	    while select AmountCur from projProposalEmplDetail
            join RecId, PSAIndirectInvoice from projEmplTransSale
                where projEmplTransSale.RecId == projProposalEmplDetail.SaleRefRecId
            join ProposalId, FundingSource from projProposalJourLocal
                where projProposalJourLocal.ProposalId == _proposalId
                    && projProposalJourLocal.FundingSource == projEmplTransSale.FundingSource
            join TaxGroupId, TaxItemGroupId, CurrencyId, TransDate from projEmplTrans
                where projEmplTrans.TransId == projEmplTransSale.TransId
                    && projEmplTrans.ProjId == _projId
            join TransId, ProposalId, RecId from projProposalEmpl
                where projProposalEmplDetail.ProposalRefRecId == projProposalEmpl.RecId
                    && projProposalEmpl.ProposalId == _proposalId
                    && projProposalEmpl.PSAContractLineNum == _contractLineNum
        {
            // Makes sure tax amount is calculated and added for each line before retention calculation when retention is calculated based on gross amount.
            if (includeTaxAmount)
            {
                perFeeTaxAmount = Tax::calcTaxAmount(projEmplTrans.TaxGroupId, projEmplTrans.TaxItemGroupId, projEmplTrans.TransDate, projEmplTrans.CurrencyId, projProposalEmplDetail.AmountCur, TaxModuleType::Project);
            }

            if (!taxGroupsMap.exists([projEmplTrans.TaxGroupId, projEmplTrans.TaxItemGroupId]))
            {
                taxGroupsMap.insert([projEmplTrans.TaxGroupId, projEmplTrans.TaxItemGroupId] , projProposalEmplDetail.AmountCur + projEmplTransSale.PSAIndirectInvoice + perFeeTaxAmount);
            }
            else
            {
                currentAmount = taxGroupsMap.lookup([projEmplTrans.TaxGroupId, projEmplTrans.TaxItemGroupId]);
                currentAmount = currentAmount + projProposalEmplDetail.AmountCur + perFeeTaxAmount;
                taxGroupsMap.insert([projEmplTrans.TaxGroupId, projEmplTrans.TaxItemGroupId],currentAmount);
            }
        }

        perFeeTaxAmount = 0;
        while select AmountCur from projProposalRevenueDetail
            join RecId from projRevenueTransSale
                where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
            join ProposalId, FundingSource from projProposalJourLocal
                where projProposalJourLocal.ProposalId == _proposalId
                    && projProposalJourLocal.FundingSource == projRevenueTransSale.FundingSource
            join TaxGroupId, TaxItemGroupId, TransDate, CurrencyId from projRevenueTrans
                where projRevenueTrans.TransId == projRevenueTransSale.TransId
                    && projRevenueTrans.ProjId == _projId
            join ProposalId, RecId from projProposalRevenue
                where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                    && projProposalRevenue.ProposalId == _proposalId
                     && projProposalRevenue.PSAContractLineNum == _contractLineNum
       {
           // Makes sure tax amount is calculated and added for each line before retention calculation when retention is calculated based on gross amount.
           if (includeTaxAmount)
           {
               perFeeTaxAmount = Tax::calcTaxAmount(projRevenueTrans.TaxGroupId, projRevenueTrans.TaxItemGroupId, projRevenueTrans.TransDate, projRevenueTrans.CurrencyId, projProposalRevenueDetail.AmountCur, TaxModuleType::Project);
           }

            if (!taxGroupsMap.exists([projRevenueTrans.TaxGroupId, projRevenueTrans.TaxItemGroupId]))
            {
                taxGroupsMap.insert([projRevenueTrans.TaxGroupId, projRevenueTrans.TaxItemGroupId] , projProposalRevenueDetail.AmountCur + perFeeTaxAmount);
            }
            else
            {
                currentAmount = taxGroupsMap.lookup([projRevenueTrans.TaxGroupId, projRevenueTrans.TaxItemGroupId]);
                currentAmount = currentAmount + projProposalRevenueDetail.AmountCur + perFeeTaxAmount;
                taxGroupsMap.insert([projRevenueTrans.TaxGroupId, projRevenueTrans.TaxItemGroupId], currentAmount);
            }
        }

        perFeeTaxAmount = 0;
        while select AmountCur from projProposalCostDetail
            join RecId from projCostTransSale
                where projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId
            join ProposalId, FundingSource from projProposalJourLocal
                where projProposalJourLocal.ProposalId == _proposalId
                    && projProposalJourLocal.FundingSource == projCostTransSale.FundingSource
            join TaxGroupId, TaxItemGroupId, CurrencyId, TransDate from projCostTrans
                where projCostTrans.TransId == projCostTransSale.TransId
                    && projCostTrans.ProjId == _projId
            join ProposalId, RecId from projProposalCost
                where projProposalCostDetail.ProposalRefRecId == projProposalCost.RecId
                    && projProposalCost.ProposalId == _proposalId
                    && projProposalCost.PSAContractLineNum == _contractLineNum
        {
            // Makes sure tax amount is calculated and added for each line before retention calculation when retention is calculated based on gross amount.
            if (includeTaxAmount)
            {
                perFeeTaxAmount = Tax::calcTaxAmount(projCostTrans.TaxGroupId, projCostTrans.TaxItemGroupId, projCostTrans.TransDate, projCostTrans.CurrencyId, projProposalCostDetail.AmountCur, TaxModuleType::Project);
            }

            if (!taxGroupsMap.exists([projCostTrans.TaxGroupId, projCostTrans.TaxItemGroupId]))
            {
                taxGroupsMap.insert([projCostTrans.TaxGroupId, projCostTrans.TaxItemGroupId] , projProposalCostDetail.AmountCur + perFeeTaxAmount);
            }
            else
            {
                currentAmount = taxGroupsMap.lookup([projCostTrans.TaxGroupId, projCostTrans.TaxItemGroupId]);
                currentAmount = currentAmount + projProposalCostDetail.AmountCur + perFeeTaxAmount;
                taxGroupsMap.insert([projCostTrans.TaxGroupId, projCostTrans.TaxItemGroupId], currentAmount);
            }
        }

        perFeeTaxAmount = 0;

        // This additional check applies to sales orders scenario:
        // When project UseBudgeting = true, it would create new ProjTransId for item transaction record in AxClass\ProjPostItemProposal\createProjItemTrans() during invoicing,
        //     we need to proceed in this loop as it won't find any record in the loop after when joining SalesLine with ProjTransId
        // When project UseBudgeting = false, it would not create new ProjTransId for item transaction record,
        //     so we skip this loop and only filter by SalesLine transaction id to avoid doubling the amount from a same sales line.
        boolean searchItemTransForSalesLine = !ProjInvoiceSOCreditNoteWithRetentionFixFlight::instance().isEnabled() || ProjTable::find(_projId).UseBudgeting;

        while select AmountCur from projProposalItemDetail
            join RecId from projItemTransSale
                where projItemTransSale.RecId == projProposalItemDetail.SaleRefRecId
            join ProposalId, FundingSource from projProposalJourLocal
                where projProposalJourLocal.ProposalId == _proposalId
                    && projProposalJourLocal.FundingSource == projItemTransSale.FundingSource
            join TaxGroupId, TaxItemGroupId, CurrencyId, TransDate from projItemTrans
                where projItemTrans.ProjTransId == projItemTransSale.ProjTransId
                    && projItemTrans.ProjId == _projId
            join ProposalId, RecId from projProposalItem
                where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
                    && projProposalItem.ProposalId == _proposalId
                    && projProposalItem.PSAContractLineNum == _contractLineNum
                    && (projProposalItem.ItemType != ProjItemType::SalesOrder || searchItemTransForSalesLine)
        {
            // Makes sure tax amount is calculated and added for each line before retention calculation when retention is calculated based on gross amount.
            if (includeTaxAmount)
            {
                perFeeTaxAmount = Tax::calcTaxAmount(projItemTrans.TaxGroupId, projItemTrans.TaxItemGroupId, projItemTrans.TransDate, projItemTrans.CurrencyId, projProposalItemDetail.AmountCur, TaxModuleType::Project);
            }
            if (!taxGroupsMap.exists([projItemTrans.TaxGroupId, projItemTrans.TaxItemGroupId]))
            {
                taxGroupsMap.insert([projItemTrans.TaxGroupId, projItemTrans.TaxItemGroupId] , projProposalItemDetail.AmountCur + perFeeTaxAmount);
            }
            else
            {
                currentAmount = taxGroupsMap.lookup([projItemTrans.TaxGroupId, projItemTrans.TaxItemGroupId]);
                currentAmount = currentAmount + projProposalItemDetail.AmountCur + perFeeTaxAmount;
                taxGroupsMap.insert([projItemTrans.TaxGroupId, projItemTrans.TaxItemGroupId], currentAmount);
            }
        }

        while select LineAmount from projProposalItemDetail
            join ProposalId, psaContractLineNum, RecId from projProposalItem
                where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
            join TaxGroup, TaxItemGroup from salesLine
                where salesLine.ProjTransId == projProposalItem.ProjTransId
                    && salesLine.ProjId == _projId
                    && projProposalItem.ProposalId == _proposalId
                    && projProposalItem.PSAContractLineNum == _contractLineNum
                    && projProposalItem.ItemType == ProjItemType::SalesOrder
        {
            Amount salesAmount = includeTaxAmount ? ProjProposalJour::find(projProposalItem.ProposalId).InvoiceAmount : projProposalItemDetail.LineAmount;

            if (!taxGroupsMap.exists([salesLine.TaxGroup, salesLine.TaxItemGroup]))
            {
                taxGroupsMap.insert([salesLine.TaxGroup, salesLine.TaxItemGroup], salesAmount);
            }
            else
            {
                currentAmount = taxGroupsMap.lookup([salesLine.TaxGroup, salesLine.TaxItemGroup]);
                currentAmount = currentAmount + salesAmount;
                taxGroupsMap.insert([salesLine.TaxGroup, salesLine.TaxItemGroup], currentAmount);
            }
        }

        Query query = this.buildQueryForRetentionTaxGroupsForOnAcctTransactions(_proposalId, _contractLineNum, _projId);
        QueryRun queryRunLocal = new QueryRun(query);

        perFeeTaxAmount = 0;
        while(queryRunLocal.next())
        {
            projOnAccTrans = queryRunLocal.get(tableNum(ProjOnAccTrans));
            projProposalOnAccDetail = queryRunLocal.get(tableNum(ProjProposalOnAccDetail));

            // Makes sure tax amount is calculated and added for each line before retention calculation when retention is calculated based on gross amount.
            if (includeTaxAmount)
            {
                perFeeTaxAmount = Tax::calcTaxAmount(projOnAccTrans.TaxGroupId, projOnAccTrans.TaxItemGroupId, projOnAccTrans.TransDate, projOnAccTrans.CurrencyId, projProposalOnAccDetail.AmountCur, TaxModuleType::Project);
            }

            if (!taxGroupsMap.exists([projOnAccTrans.TaxGroupId, projOnAccTrans.TaxItemGroupId]))
            {
                taxGroupsMap.insert([projOnAccTrans.TaxGroupId, projOnAccTrans.TaxItemGroupId], projProposalOnAccDetail.AmountCur + perFeeTaxAmount);
            }
            else
            {
                currentAmount = taxGroupsMap.lookup([projOnAccTrans.TaxGroupId, projOnAccTrans.TaxItemGroupId]);
                currentAmount = currentAmount + projProposalOnAccDetail.AmountCur + perFeeTaxAmount;
                taxGroupsMap.insert([projOnAccTrans.TaxGroupId, projOnAccTrans.TaxItemGroupId], currentAmount);
            }
        }

        return taxGroupsMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForRetentionTaxGroupsForOnAcctTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to get the tax groups for the on account transactions in the invoice proposal.
    /// </summary>
    /// <param name="_proposalId">
    /// Proposal identifier.
    /// </param>
    /// <param name="_contractLineNum">
    /// Billing Rule identifier.
    /// </param>
    /// <param name="_projId">
    /// Invoice proposal project ID.
    /// </param>
    /// <returns>
    /// Query to get the tax groups for on account transactions.
    /// </returns>
    protected Query buildQueryForRetentionTaxGroupsForOnAcctTransactions(ProjProposalId _proposalId, PSAContractLineNum _contractLineNum, ProjId _projId)
    {
        Query                   query   = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildDataSource    projProposalOnAcctDetailDataSource;
        QueryBuildDataSource    projOnAccTransSaleDataSource;

        projProposalOnAcctDetailDataSource = query.addDataSource(tableNum(ProjProposalOnAccDetail));
       
        projOnAccTransSaleDataSource = projProposalOnAcctDetailDataSource.addDataSource(tableNum(ProjOnAccTransSale));
        projOnAccTransSaleDataSource.joinMode(JoinMode::InnerJoin);
        projOnAccTransSaleDataSource.addLink(fieldNum(ProjProposalOnAccDetail, SaleRefRecId), fieldNum(ProjOnAccTransSale, RecId));
        projOnAccTransSaleDataSource.fetchMode(QueryFetchMode::One2One);

        queryBuildDataSource = projOnAccTransSaleDataSource.addDataSource(tableNum(ProjProposalJour));
        queryBuildDataSource.joinMode(JoinMode::InnerJoin);
        queryBuildDataSource.addLink(fieldNum(ProjOnAccTransSale, FundingSource), fieldNum(ProjProposalJour, FundingSource));
        queryBuildDataSource.addRange(fieldNum(ProjProposalJour, ProposalId)).value(_proposalId);
        queryBuildDataSource.fetchMode(QueryFetchMode::One2One);
       
        queryBuildDataSource = projProposalOnAcctDetailDataSource.addDataSource(tableNum(ProjProposalOnAcc));
        queryBuildDataSource.joinMode(JoinMode::InnerJoin);
        queryBuildDataSource.addLink(fieldNum(ProjProposalOnAccDetail, ProposalRefRecId), fieldNum(ProjProposalOnAcc, RecId));
        queryBuildDataSource.addRange(fieldNum(ProjProposalOnAcc, ProposalId)).value(_proposalId);
        queryBuildDataSource.addRange(fieldNum(ProjProposalOnAcc, PSAContractLineNum)).value(_contractLineNum);
        queryBuildDataSource.fetchMode(QueryFetchMode::One2One);
        
        queryBuildDataSource = projOnAccTransSaleDataSource.addDataSource(tableNum(ProjOnAccTrans));
        queryBuildDataSource.joinMode(JoinMode::InnerJoin);
        queryBuildDataSource.relations(true);
        queryBuildDataSource.addRange(fieldNum(ProjOnAccTrans, ProjID)).value(_projId);
        queryBuildDataSource.addRange(fieldNum(ProjOnAccTrans, TransactionOrigin)).value(SysQuery::valueNot(ProjOrigin::Deduction));
        queryBuildDataSource.fetchMode(QueryFetchMode::One2One);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetentionTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that the record in <c>ProjRevenueTrans</c> table is not of type retention.
    /// </summary>
    /// <param name="_projRevenueTrans">
    /// A record in <c>ProjRevenueTrans</c> table.
    /// </param>
    /// <returns>
    /// Returns a false value indicating that the record in <c>ProjRevenueTrans</c> table is not of type retention.
    /// </returns>
    protected boolean isRetentionTrans(ProjRevenueTrans _projRevenueTrans)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjProposalJour</Name>
				<Source><![CDATA[
    ProjProposalJour parmProjProposalJour(ProjProposalJour _projProposalJour = projProposalJour)
    {
        projProposalJour = _projProposalJour;

        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    QueryRun queryBuild()
    {
        queryRun = new QueryRun(queryStr(ProjInvoiceNormal));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.progressInit("@SYS54552", progressTotal, #AviFormLetter);
            progress.setText("@SYS26577");

            this.parmprojInvoiceProjId(this.parmProjInvoiceTable().ProjInvoiceProjId);
            this.setQueryRange();
            this.createFeeTransaction();

            if (BrazilParameters::isEnabled())
            {
                this.initProjInvoiceProposalSplit_BR();
            }

            while (queryRun.next())
            {
                this.assignTables();

                this.doRevenue();
            }

            this.parmShowMessages(false);
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        catch (Exception::Error)
        {
            // Update has been canceled.
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canIncludeTaxAmountInRetetention</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether tax amount to be added to each line before retention calculation when retention is calculated based on gross amount.
    /// </summary>
    /// <returns>
    /// Returns true if retention is based on gross amount else false.
    /// </returns>
    private boolean canIncludeTaxAmountInRetetention()
    {
        if (!TaxCalculationForFullProjectInvoiceAmountFeatureExposure::enableTaxCalculationForFullProjectInvoiceAmountFeatureForSAUDI()
                && ProjParameters::find().CustomerRetentionOptions == ProjDefaultRetentionOptions::BasedOnGrossAmount)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>