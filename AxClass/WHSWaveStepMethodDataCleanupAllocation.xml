<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveStepMethodDataCleanupAllocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveStepMethodDataCleanupAllocation</c> implements the wave data cleanup logic for the
/// wave allocation wave step method.
/// </summary>
[WHSWaveStepMethodDataCleanupAttribute(methodStr(WhsPostEngineBase, allocateWave))]
internal final class WHSWaveStepMethodDataCleanupAllocation extends WHSWaveStepMethodDataCleanup
{
    private boolean erroredWave = false;
    private WHSWaveStepMethodDataCleanupReplenishment dataCleanupImmediateReplenishment;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanupErroredRun</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void cleanupErroredRun()
    {
        erroredWave = true;
        
        if (this.shouldCleanupImmediateReplenishment())
        {
            dataCleanupImmediateReplenishment = WHSWaveStepMethodDataCleanupFactory::createInstanceFromParameters(this.parmWaveId(), this.parmWaveExecutionId(), methodStr(WhsPostEngineBase, replenish), this.parmPerfTask());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupWaveStepTrackingData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void cleanupWaveStepTrackingData()
    {
        //Always cleanup temporary work lines - this is a hardening fix - for a succesfull wave we should never have any left behind
        var numberOfWHSTmpWorkLinesDeleted = WHSWaveProcessingDataCleanup::deleteTmpWorkLines(this.parmWaveId());
        
        if (numberOfWHSTmpWorkLinesDeleted && !erroredWave)
        {
            //we surface this as a warning to allow us to do trouble shooting later
            warning(strfmt("@WAX:WaveUnexpectedTmpWorkLinesDeletedForWave", numberOfWHSTmpWorkLinesDeleted, tableStr(WHSTmpWorkLine), this.parmWaveId(), this.parmWaveExecutionId()));
            WHSPostEngine::createWaveExecutionHistoryLine(this.parmWaveId(), this.parmWaveExecutionId(), strFmt("@WAX:WaveUnexpectedTmpWorkLinesDeletedForWave", numberOfWHSTmpWorkLinesDeleted, tableStr(WHSTmpWorkLine), this.parmWaveId(), this.parmWaveExecutionId()), false);
        }

        this.parmPerfTask().setDeleteWaveUpdatedLoadLineRecords(WHSWaveProcessingDataCleanup::deleteWaveUpdatedLoadLineRecords(this.parmWaveId()));
        this.parmPerfTask().setDeleteWaveCreatedQualityOrderRecords(WHSWaveProcessingDataCleanup::deleteWaveCreatedQualityOrderRecords(this.parmWaveId()));
        this.parmPerfTask().setDeleteWaveProcessingStatusRecords(WHSWaveProcessingDataCleanup::deleteWaveProcessingStatusRecords(this.parmWaveId(), this.parmIsInitialWaveCleanUp()));
        this.parmPerfTask().setDeleteWavePendingAllocationRecords(WHSWaveProcessingDataCleanup::deleteWavePendingAllocationRecords(this.parmWaveId(), this.parmWaveExecutionId()));
        this.parmPerfTask().setDeleteWaveFailedShipments(WHSWaveProcessingDataCleanup::deleteWaveFailedShipments(this.parmWaveId()));

        if (dataCleanupImmediateReplenishment)
        {
            dataCleanupImmediateReplenishment.cleanupWaveStepTrackingData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupWaveStepCommittedData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void cleanupWaveStepCommittedData()
    {
        this.parmPerfTask().setAdjustLoadLineDeltaQuantity(WHSWaveProcessingDataCleanup::adjustLoadLineDeltaQuantity(this.parmWaveId()));
        this.parmPerfTask().setDeleteQualityOrders(WHSWaveProcessingDataCleanup::deleteQualityOrders(this.parmWaveId()));

        if (dataCleanupImmediateReplenishment)
        {
            dataCleanupImmediateReplenishment.cleanupWaveStepCommittedData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCleanUpImmediateReplenishment</Name>
				<Source><![CDATA[
    private boolean shouldCleanUpImmediateReplenishment()
    {        
        return erroredWave
               && !WHSWaveTable::find(this.parmWaveId()).waveTemplate().hasReplenishmentStep();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>