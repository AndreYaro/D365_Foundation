<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendBankPrenoteGeneration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendBankPrenote</c> class is used to generate customer specific prenotes.
/// </summary>
public class VendBankPrenoteGeneration extends BankPrenoteBase
{
    private VendSumForPaymPrenote vendSumForPaymPrenote;

    private DialogField dialogVendType;
    private DialogField dialogVend;
    private DialogField dialogPrenote;
    private DialogGroup dialogGroup;

    private QueryRun queryRun;

    #DEFINE.dialogPrenoteFieldNo(901)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildVendorBankAccountsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets vendor bank account information.
    /// </summary>
    /// <param name="_accountNum">
    /// The account ID of vendor.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query buildVendorBankAccountsQuery(CustVendAC _accountNum='')
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tablenum(VendBankAccount));

        if (_accountNum != '')
        {
           QueryBuildRange qbr = qbds.addRange(fieldnum(VendBankAccount, VendAccount));
           qbr.value(queryValue(_accountNum));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrenoteTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BankPrenoteJournalList</c> class instance and adds it to the list.
    /// </summary>
    /// <param name="_vendAccount">
    /// A vendor account ID.
    /// </param>
    /// <param name="_vendBankAccountId">
    /// A vendor bank account ID to generate prenote for.
    /// </param>
    /// <param name="_lineNum">
    /// The line number of the transaction.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createPrenoteTrans(
        VendAccount _vendAccount,
        VendBankAccountId _vendBankAccountId,
        int _lineNum)
    {
        BankPrenoteJournalList prenoteJournalList = new BankPrenoteJournalList();

        prenoteJournalList.parmAccountNum(_vendAccount);
        prenoteJournalList.parmBankAccountId(_vendBankAccountId);
        prenoteJournalList.parmLineNum(_lineNum);

        prenoteTrans.addEnd(prenoteJournalList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds fields to the vendor prenotes dialog box.
    /// </summary>
    /// <returns>
    /// A <c>DialogRunBase</c> object.
    /// </returns>
    public Object dialog()
    {
        Set enumSet = new Set(Types::Enum);

        dialog = super();

        dialogGroup = dialog.addGroup('');
        dialogGroup.columns(2);
        dialogGroup.frameType(FormFrameType::None);

        dialogVendType = new DialogField(dialog, enumstr(PrenoteAccountType), #dialogPrenoteFieldNo);
        dialog.addCtrlDialogField(dialogVendType.name());
        dialogVendType.init(dialog);
        dialogVendType.label("@SYS111239");
        dialogVendType.helpText("@SYS128487");
        dialogVendType.value();

        dialogVend = dialog.addField(extendedtypestr(VendAccount), "@SYS24500", "@SYS128526");

        dialogVend.fieldControl().enabled(false);

        enumSet.add(PrenoteAccountType::AllVendors);
        enumSet.add(PrenoteAccountType::Vendors);

        dialogEnumComboBox = DialogEnumComboBox::newParameters(null, dialogVendType.control().id(), enumnum(PrenoteAccountType), enumSet,dialog.form());

        this.addEffectiveEntryDateToDialog(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a <c>FormRun</c> object of the dialog on the enumeration combo box and selects an item in it.
    /// </summary>
    /// <param name="_dialog">
    /// An instance of <c>DialogRunbase</c> dialog.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(dialog);

        if (dialogEnumComboBox)
        {
            // Specify the formRun (at this point the formRun is already available)
            // This is needed to track selection in the comboBox
            dialogEnumComboBox.parmFormRun(dialog.dialogForm().formRun());

            // Select a specific entry in the comboBox, if needed
            dialogEnumComboBox.select(PrenoteAccountType::AllVendors);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the prenote generation.
    /// </summary>
    public void execute()
    {
        int lineNum = 0;
        VendPrenote vendPrenote;
        VendBankAccount vendBankAccount;

        bankAccountTable = this.findBankAccountTable();
        prenoteTrans = new List(Types::Class);

        if (bankAccountTable.IsBankPrenote == NoYes::Yes)
        {
            queryRun = new QueryRun(this.buildVendorBankAccountsQuery(accountNum));

            if (queryRun)
            {
                while (queryRun.next())
                {
                    vendBankAccount = queryRun.get(tablenum(VendBankAccount));

                    if (!VendPrenote::exist(companyBankAccount, vendBankAccount.VendAccount, vendBankAccount.AccountID))
                    {
                        lineNum++;
                        this.createPrenoteTrans(vendBankAccount.VendAccount, vendBankAccount.AccountID, lineNum);
                    }
                }

                if (lineNum > 0)
                {
                    vendSumForPaymPrenote = VendSumForPaymPrenote::construct(prenoteTrans, prenoteFilename, prenoteExportFormats, companyBankAccount);
                    vendSumForPaymPrenote.parmFile(prenoteFile);
                    vendSumForPaymPrenote.parmEffectiveEntryDate(effectiveEntryDate);
                    vendSumForPaymPrenote.runOperation();
                    prenoteFile = vendSumForPaymPrenote.parmFile();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld901_1_selectionChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables and disables the vendor account field on the selection of vendor type.
    /// </summary>
    private void fld901_1_selectionChange()
    {
        Object control;
        boolean isModified;

        control = dialog.formRun().controlCallingMethod();
        isModified = control.modified();

        if (isModified)
        {
            if (dialogVendType.value() == 0)
            {
                dialogVend.fieldControl().enabled(false);
            }
            else if (dialogVendType.value() == 1)
            {
                dialogVend.fieldControl().enabled(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fields from the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (dialogEnumComboBox)
        {
            prenoteAccountType = dialogEnumComboBox.selection();
            if (prenoteAccountType == PrenoteAccountType::Vendors)
            {
                accountNum = dialogVend.value();
            }
            else
            {
                accountNum = '';
            }
        }

        effectiveEntryDate = dialogEffectiveEntryDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the prenotes.
    /// </summary>
    public void run()
    {
        super();

        this.execute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the combination of account type and account number.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object which calls this method.
    /// </param>
    /// <returns>
    /// true if the combination of account type and account number is valid; otherwise false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean isValid;

        isValid = super(_calledFrom);

        if (!this.validateAccount())
        {
            isValid = checkFailed(strfmt("@SYS116347", "@SYS24500"));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the combination of account type and account number.
    /// </summary>
    /// <returns>
    /// true if the combination of account type and account number is valid; otherwise false.
    /// </returns>
    private boolean validateAccount()
    {
        boolean isValid = true;

        if (prenoteAccountType == PrenoteAccountType::Vendors && accountNum == '')
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS128497";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VendBankPrenoteGeneration vendBankPrenoteGeneration;
        vendBankPrenoteGeneration = new VendBankPrenoteGeneration();

        if (vendBankPrenoteGeneration.prompt())
        {
            vendBankPrenoteGeneration.runOperation();

            vendBankPrenoteGeneration.sendFileToUser();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>