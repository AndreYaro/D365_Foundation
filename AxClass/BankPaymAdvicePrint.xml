<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymAdvicePrint</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPaymAdvicePrint</c> class provides the ability to generate and print payment advice reports.
/// </summary>
[SysObsolete('This class is obsolete. Please use the BankPaymAdviceCustControllerV2 or BankPaymAdviceVendControllerV2 classes.', true, 10\5\2023)]
public abstract class BankPaymAdvicePrint extends RunBase
{
    private LedgerJournalId ledgerJournalId;
    private PaymMode paymMode;
    private CompanyBankAccountId bankAccountId;
    protected NoYes printPaymAdvicePrintMgmt;
    private PrinterName printerName;
    protected SRSPrintMediumType printMedium;
    protected CustVendPaymPrinterSettings custVendPaymPrinterSettings;
    private container packedPrintSettings;

    protected DialogRunbase dialog;
    private DialogField dialogPaymStatus;
    private DialogField dialogPaymMode;
    private DialogField dialogBank;
    private DialogField dialogPrintPaymAdvicePrintMgmt;
    private DialogGroup dialogGroupPrinterSetting;
    private DialogField dialogPrinterName;
    protected DialogField dialogPrintMedium;

    private const int DialogBankFieldNo = 900;
    private LedgerJournalACType accountType;
    private const int DialogPaymModeFieldNo = 800;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        packedPrintSettings
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, [custVendPaymPrinterSettings.getAllPrinterSettingsPacked()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);
        container packedValues;

        switch (version)
        {
            case #CurrentVersion:
                [Version, packedValues] = _packedClass;
                [#CurrentList] = packedValues;

                if (packedPrintSettings != conNull())
                {
                    // Recreate the object from the packed values.
                    custVendPaymPrinterSettings = CustVendPaymPrinterSettings::newForPackedPrinterSettings(packedPrintSettings);
                }
                else
                {
                    custVendPaymPrinterSettings = new CustVendPaymPrinterSettings();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        dialogPaymStatus = dialog.addFieldValue(enumStr(CustVendPaymStatus), CustVendPaymStatus::Sent);
        dialogPaymStatus.allowEdit(false);

        this.dialogAddAccount();

        dialogPaymMode = new DialogField(dialog, extendedTypeStr(VendPaymMode), DialogPaymModeFieldNo);
        dialog.addCtrlDialogField(dialogPaymMode.name());
        dialogPaymMode.init(dialog);
        dialogPaymMode.value(paymMode);
        dialogPaymMode.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(BankPaymAdvicePrint, paymMode_lookup),
            this);

        dialogBank = new DialogField(dialog, extendedTypeStr(CompanyBankAccountId), DialogBankFieldNo);
        dialog.addCtrlDialogField(dialogBank.name());
        dialogBank.init(dialog);
        dialogBank.value(bankAccountId);
        dialogBank.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(BankPaymAdvicePrint, bank_lookup),
            this);

        dialogBank.control().registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(BankPaymAdvicePrint, bank_modified),
            this);

        dialog.addMenuItemButton(MenuItemType::Action, this.getPaymentAdviceMenuItemActionStr(), DialogMenuItemGroup::CurrentGrp);
        dialogGroupPrinterSetting = dialog.addGroup("@SYS77551");
        dialogPrinterName = dialog.addFieldValue(extendedTypeStr(PrinterName), printerName, "@SYS62708", "@SYS73208");
        dialogPrintMedium = dialog.addFieldValue(enumStr(SRSPrintMediumType), printMedium, "@SYS28144", "@SYS73207");
        dialogPrintMedium.allowEdit(false);
        dialogPrinterName.allowEdit(false);

        dialogPrintPaymAdvicePrintMgmt = dialog.addFieldValue(enumStr(NoYes), printPaymAdvicePrintMgmt, "@SYS70782", "@SYS70782");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        xSysLastValue::getLast(this);

        if (custVendPaymPrinterSettings == null)
        {
            custVendPaymPrinterSettings = new CustVendPaymPrinterSettings();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountType</Name>
				<Source><![CDATA[
    internal LedgerJournalACType parmAccountType(LedgerJournalACType _accountType = accountType)
    {
        accountType = _accountType;
       
        return accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymMode_lookup</Name>
				<Source><![CDATA[
    private void paymMode_lookup(FormControl _formcontrol)
    {
        if (accountType == ledgerJournalACType::Vend)
        {
            VendPaymModeTable::lookupPaymMethod(_formcontrol, dialogPaymMode.value(), '');
        }
        else
        {
            CustPaymModeTable::lookupPaymMethod(_formcontrol, dialogPaymMode.value(), '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentAdviceMenuItemActionStr</Name>
				<Source><![CDATA[
    protected abstract str getPaymentAdviceMenuItemActionStr()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the account field to the payment advice dialog.
    /// </summary>
    protected abstract void dialogAddAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>bank_lookup</Name>
				<Source><![CDATA[
    private void bank_lookup(FormControl _formControl)
    {
        CustVendPaymDialogUtility::bank_lookup(dialog, _formControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bank_modified</Name>
				<Source><![CDATA[
    private boolean bank_modified(FormStringControl _formControl)
    {
        return CustVendPaymDialogUtility::bank_modified(dialogBank, _formControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@SYS55191";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        paymMode = dialogPaymMode.value();
        bankAccountId = dialogBank.value();
        printPaymAdvicePrintMgmt = dialogPrintPaymAdvicePrintMgmt.value();
        printerName = dialogPrinterName.value();
        printMedium = dialogPrintMedium.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalId</Name>
				<Source><![CDATA[
    public LedgerJournalId parmLedgerJournalId(LedgerJournalId _ledgerJournalId = ledgerJournalId)
    {
        ledgerJournalId = _ledgerJournalId;
        return ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode(PaymMode _paymMode = paymMode)
    {
        paymMode = _paymMode;
        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccountId</Name>
				<Source><![CDATA[
    public CompanyBankAccountId parmBankAccountId(CompanyBankAccountId _bankAccountId = bankAccountId)
    {
        bankAccountId = _bankAccountId;
        return bankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintPaymAdvicePrintMgmt</Name>
				<Source><![CDATA[
    public NoYes parmPrintPaymAdvicePrintMgmt(NoYes _printPaymAdvicePrintMgmt = printPaymAdvicePrintMgmt)
    {
        printPaymAdvicePrintMgmt = _printPaymAdvicePrintMgmt;
        return printPaymAdvicePrintMgmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentsAndGenerateReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payments and generates the payment advice report.
    /// </summary>
    public void getPaymentsAndGenerateReport()
    {
        List outPaymRecords = this.getPayments();
        this.generateReport(outPaymRecords);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayments</Name>
				<Source><![CDATA[
    protected abstract List getPayments()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve the list of payments.
    /// </summary>
    /// <returns>
    /// A query to retrieve the list of payments.
    /// </returns>
    protected Query buildQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds;
        QueryBuildRange qbr;

        qbds = query.addDataSource(tableNum(LedgerJournalTrans));
        qbr = qbds.addRange(fieldNum(LedgerJournalTrans, JournalNum));
        qbr.value(queryValue(ledgerJournalId));
        qbr.status(RangeStatus::Locked);

        qbr = qbds.addRange(fieldNum(LedgerJournalTrans, PaymentStatus));
        qbr.value(queryValue(CustVendPaymStatus::Sent));
        qbr.status(RangeStatus::Locked);

        if (paymMode)
        {
            qbr = qbds.addRange(fieldNum(LedgerJournalTrans, PaymMode));
            qbr.value(queryValue(paymMode));
        }

        if (bankAccountId)
        {
            SysQuery::addDimensionAttributeRange(query, qbds.name(), fieldStr(LedgerJournalTrans, OffsetLedgerDimension), DimensionComponent::LedgerDimensionDisplayValue, bankAccountId);
        }

        qbds = query.dataSourceTable(tableNum(LedgerJournalTrans)).addDataSource(tableNum(DimensionCombinationValueNameTmp));
        qbds.relations(false);
        qbds.addLink(fieldNum(LedgerJournalTrans, LedgerDimension), fieldNum(DimensionCombinationValueNameTmp, DimensionAttributeValueCombination));
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.update(false);
        qbds.enabled(true);

        qbds.addSortField(fieldNum(DimensionCombinationValueNameTmp, Name));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLineAccountNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the payment line account names.
    /// </summary>
    /// <returns>
    /// The payment line account names.
    /// </returns>
    protected DimensionCombinationValueNameTmp generatePaymentLineAccountNames()
    {
        return CustVendPaymDialogUtility::generatePaymentLineAccountNames(ledgerJournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the payment advice report for the given payments.
    /// </summary>
    /// <param name = "_outPaymRecords">
    /// A list of payments.
    /// </param>
    protected abstract void generateReport(List _outPaymRecords)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the printer settings dialog.
    /// </summary>
    protected void callPrinterSettings()
    {
        custVendPaymPrinterSettings.callPrinterSettings(PaymDocumentType::PaymAdvice, dialogPrinterName, dialogPrintMedium);
        
        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get printer settings
    /// </summary>
    /// <param name = "_paymentDocumentType">Identifies the payment document</param>
    /// <returns>The printer settings</returns>
    public container getPrinterSettings(PaymDocumentType _paymentDocumentType)
    {
        return custVendPaymPrinterSettings.getPrinterSettings(_paymentDocumentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update printer settings
    /// </summary>
    /// <param name = "_paymentDocumentType">Identifies the payment document</param>
    /// <param name = "_printerSettings">The printer settings</param>
    public void updatePrinterSettings(PaymDocumentType _paymentDocumentType, container _printerSettings)
    {
        custVendPaymPrinterSettings.updatePrinterSettings(_paymentDocumentType, _printerSettings);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>