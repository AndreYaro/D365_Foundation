<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsEntityPostalAddressFormHandlerExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LogisticsEntityPostalAddressFormHandlerExt
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>onCanDeleteAddress_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsEntityPostalAddressFormHandler), delegatestr(LogisticsEntityPostalAddressFormHandler, canDeleteAddress_delegate))]
    public static void onCanDeleteAddress_delegate(Common _callerRecord, LogisticsLocationRecId _locationRecId, EventHandlerResult _res)
    {
        _res.result(true);

        if (LogisticsLocationDefault::implementsDefaultLocations(_callerRecord))
        {
            if (LogisticsLocationDefault::isAddressDefault(LogisticsPostaladdress::findByLocation(_locationRecId).RecId, _callerRecord))
            {
                if (Box::yesNo("@SYS344641", DialogButton::No) == DialogButton::Yes)
                {
                    _res.result(true);
                }
            }
            else
            {
                _res.result(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onShowSalesTax_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsEntityPostalAddressFormHandler), delegatestr(LogisticsEntityPostalAddressFormHandler, showSalesTax_delegate))]
    public static void onShowSalesTax_delegate(TableId _callerTableId, EventHandlerResult _res)
    {
        switch (_callerTableId)
        {
            case tableNum(CustTable):
            case tableNum(VendTable):
            case tableNum(smmBusRelTable):
            case tableNum(CompanyInfo):
            case tableNum(InventSite):
            case tableNum(InventLocation):
            case tableNum(HcmWorker):
                _res.result(true);
                break;

            default :
                _res.result(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRefreshCallerDatasource_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsEntityPostalAddressFormHandler), delegatestr(LogisticsEntityPostalAddressFormHandler, refreshCallerDatasource_delegate))]
    public static void onRefreshCallerDatasource_delegate(FormRun _callerForm)
    {
        FormDataSource  formDataSource = _callerForm.dataSource(tablestr(LogisticsEntityPostalAddressView));

        if (formDataSource)
        {
            formDataSource.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNewParameters_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls methods to display the combined view or the <c>LogisticsPostalAddress</c> table.
    /// </summary>
    /// <param name="_callerDS">
    /// The caller datasource passed into the method.
    /// </param>
    /// <param name="_callerAddressDS">
    /// The caller address datasource passed into the method.
    /// </param>
    /// <returns>
    /// An instance of the class <c>LogisticsEntityPostalAddressFormHandler</c>.
    /// </returns>
    public static LogisticsEntityPostalAddressFormHandler postNewParameters_BR(FormDataSource _callerDS, FormDataSource _callerAddressDS)
    {
        LogisticsEntityPostalAddressFormHandler postalAddressForm = LogisticsEntityPostalAddrFormHandler_BR::construct();

        postalAddressForm.datasourceCaller(_callerDS);
        postalAddressForm.callerDatasourceAddressView(_callerAddressDS);

        return postalAddressForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNewParametersHandler_BR</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(LogisticsEntityPostalAddressFormHandler), staticMethodStr(LogisticsEntityPostalAddressFormHandler, newParameters))]
    /// <summary>
    /// Calls method postNewParameters_BR, if the country region is Brazil.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object that is passed from the menu item.
    /// </param>
    public static void postNewParametersHandler_BR(XppPrePostArgs _args)
    {
        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        _args.setReturnValue(
            LogisticsEntityPostalAddressFormHandlerExt::postNewParameters_BR(_args.getArg('_callerDS'),
                                                                          _args.getArg('_callerAddressDS')));
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnableRoles_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsEntityPostalAddressFormHandler), delegatestr(LogisticsEntityPostalAddressFormHandler, enableRoles_delegate))]
    public static void onEnableRoles_delegate(TableId _callerTableId, RecId _callerRecId, LogisticsLocationRecId _locationRecId, EventHandlerResult _res)
    {
        if (_callerTableId == tableNum(HRMApplicationBasket))
        {
            RecId personRecId = HRMApplicationBasket::find(_callerRecId).Person;
            _res.result(DirPartyLocation::findByPartyLocation(personRecId, _locationRecId).RecId != 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterCanClose_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsEntityPostalAddressFormHandler), delegatestr(LogisticsEntityPostalAddressFormHandler, afterCanClose_delegate))]
    public static void afterCanClose_delegate(FormRun _form, boolean _checkParameters, EventHandlerResult _res)
    {
        #ISOCountryRegionCodes

        FormStringcontrol rolesControl = _form.design().controlName(formControlStr(LogisticsPostalAddress, Roles)) as FormStringControl;

        // <GIN>
        if (_checkParameters && _form.closedOk())
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                str roleString = rolesControl.text();
                str name = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Consignment_IN).Name;
                if (strScan(roleString,name,1, strLen(roleString)))
                {
                    if (!TaxParameters::checkParameter_IN(TaxType_IN::Excise))
                    {
                        _res.result(false);
                    }
                }
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCloseOk</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(LogisticsEntityLocationFormHandler), methodstr(LogisticsEntityLocationFormHandler, AfterCloseOk))]
    public static void postCloseOk(XppPrePostArgs _args)
    {
        DirPartyFormHandler_Entity  partyForm;
        FormDataSource              formDataSource;
        Object                      formObject;
        int                         i;
        DirPartyTable               dirPartyTable;

        FormRun form = _args.getArg('_form');

        if (form.args().record().TableId == tableNum(CustTable) || form.args().record().TableId == tableNum(smmBusRelTable))
        {
            partyForm = new DirPartyFormHandler_Entity(form);

            formObject = form.args().caller();

            for (i=1; i<= formObject.dataSourceCount(); i++)
            {
                formDataSource = formObject.dataSource(i);
                if (formDataSource.name()==tableStr(DirPartyTable))
                {
                    partyForm.setDatasourceParty(formDataSource);
                    dirPartyTable = (formDataSource.cursor() as DirPartyTable);
                    partyForm.parmPartyType(dirPartyTable.partyType());
                }
                if (formDataSource.name()==tableStr(DirPersonName))
                {
                    partyForm.setDatasourcePartyName(formDataSource);
                }
                if (formDataSource.name()==tableStr(CustTable))
                {
                    partyForm.setDatasourceCaller(formDataSource);
                }
                if (formDataSource.name()==tableStr(smmBusRelTable))
                {
                    partyForm.setDatasourceCaller(formDataSource);
                }
            }

            //Party was found
            if (dirPartyTable)
            {
                partyForm.parmForceDuplicateCheck(true);
                // Removed call to set the visible property of the form to false
                partyForm.validateWriteName();  //will ultimately open duplicate checking form
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onValidatePostalAddress_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsEntityPostalAddressFormHandler), delegatestr(LogisticsEntityPostalAddressFormHandler, validatePostalAddress_delegate))]
    public static void onValidatePostalAddress_delegate(LogisticsPostalAddress _postalAddressOrig, LogisticsPostalAddress _postalAddress,
                                                        TableId _callerTableId, boolean _isPrimary, RecId _callerRecId)
    {
        MCRAutoTaxSearch    autoTaxSearch;
        CustTable           custTable;
        SysDictTable        dictTable = SysDictTable::newTableId(_callerTableId);
        DirPartyMap         entityParty = dictTable.makeRecord();

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            autoTaxSearch = new MCRAutoTaxSearch();

            if (_postalAddressOrig.City != _postalAddress.City ||
                _postalAddressOrig.State != _postalAddress.State ||
                _postalAddressOrig.County != _postalAddress.County ||
                _postalAddressOrig.ZipCode != _postalAddress.ZipCode ||
                _postalAddressOrig.CountryRegionId != _postalAddress.CountryRegionId &&
                _isPrimary &&
                autoTaxSearch.autoSearchActive())
            {
                ttsBegin;
                select firstOnly entityParty where entityParty.RecId == _callerRecId
                    join forUpdate custTable where custTable.Party == entityParty.Party;
                if (custTable.RecId)
                {
                    custTable.TaxGroup = autoTaxSearch.setSalesTaxGroup(_postalAddress.City,
                                                               _postalAddress.State,
                                                               _postalAddress.County,
                                                               _postalAddress.ZipCode,
                                                               _postalAddress.CountryRegionID);
                    custTable.update();
                }
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAddEntityLocationDataSource_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsEntityPostalAddressFormHandler), delegatestr(LogisticsEntityPostalAddressFormHandler, addEntityLocationDataSource_delegate))]
    public static void onAddEntityLocationDataSource_delegate(FormDataSource _locationDS, TableId _callerTableId, RecId _callerRecId, boolean _isPostalAddress)
    {
        LogisticsLocationAppUtil::updateQuery(_locationDS.query(), _callerTableId, _callerRecId, _isPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCheckIsAddressDefault_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsEntityPostalAddressFormHandler), delegatestr(LogisticsEntityPostalAddressFormHandler, checkIsAddressDefault_delegate))]
    public static void onCheckIsAddressDefault_delegate(Common _callerRecord, LogisticsPostalAddressRecId _postalAddressRecId, EventHandlerResult _res)
    {
        _res.result(false);

        if (LogisticsLocationDefault::implementsDefaultLocations(_callerRecord) &&
                LogisticsLocationDefault::isAddressDefault(_postalAddressRecId, _callerRecord))
        {
            _res.result(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>