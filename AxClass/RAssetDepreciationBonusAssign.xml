<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetDepreciationBonusAssign</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetDepreciationBonusAssign extends RunBaseBatch implements BatchRetryable
{
    QueryRun                     queryRun;

    RAssetStandardId                rAssetStandardId;
    RAssetDeprBonusId               deprBonusId;

    DialogField                     rassetStandardIdField;
    DialogField                     percentField;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        rassetStandardId,
        deprBonusId
    #ENDMACRO

          
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase  dialog =   super();
        ;

        dialog.caption("@GLS116840");
        rassetStandardIdField = dialog.addFieldValue(extendedTypeStr(RAssetStandardId), rAssetStandardId);
        percentField          = dialog.addFieldValue(extendedTypeStr(RAssetDeprBonusId), deprBonusId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ret = super();
        rAssetStandardId = rassetStandardIdField.value();
        deprBonusId      = percentField.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        this.initQuery();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    void initQuery()
    {
        QueryBuildDataSource    qbdS;
        QueryBuildRange         qbr;
        Query                   query = new Query();
        ;

        qbdS = query.addDataSource(tableNum(RAssetTrans));
        qbdS.addRange(fieldNum(RAssetTrans, AccountNum));
        qbdS.addRange(fieldNum(RAssetTrans, AssetStandardId));
        qbdS.addRange(fieldNum(RAssetTrans, TransDate));

        qbr = qbdS.addRange(fieldNum(RAssetTrans, AssetTransType));
        qbr.value(queryValue(RAssetTransType::Acquisition) + "," + queryValue(RAssetTransType::Revaluation));
        qbr.status(RangeStatus::Locked);

        qbr = qbdS.addRange(fieldNum(RAssetTrans, StornoRecId));
        qbr.value(queryValue(0));
        qbr.status(RangeStatus::Locked);

        qbr = qbdS.addRange(fieldNum(RAssetTrans, LinkedTransRecId));
        qbr.value(queryValue(0));
        qbr.status(RangeStatus::Locked);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeprBonusId</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetDeprBonusId parmDeprBonusId(RAssetDeprBonusId _deprBonusId = deprBonusId)
    {
        deprBonusId = _deprBonusId;

        return deprBonusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardId</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetStandardId parmStandardId(RAssetStandardId _rAssetStandardId = rAssetStandardId)
    {
        rAssetStandardId = _rAssetStandardId;

        return rAssetStandardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        RAssetTrans         rAssetTrans;
        RAssetStandards     rAssetStandards;
        RAssetGroup         rassetGroupCheck;
        Counter             progressTotal;
        Counter             progressCounter;
        container           standards;

        ttsbegin;

        if (rAssetStandardId)
        {
            queryRun.query().dataSourceTable(tableNum(RAssetTrans)).findRange(fieldNum(RAssetTrans, AssetStandardId)).value(queryValue(rAssetStandardId));
        }

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@GLS116839", progressTotal, #AviFindFile);

        queryRun.query().dataSourceTable(tableNum(RAssetTrans)).update(true);

        while (queryRun.next())
        {
            rAssetTrans         = queryRun.get(tableNum(RAssetTrans));
            rAssetStandards     = rAssetTrans.assetStandards();

            progressCounter++;
            progress.setCount(progressCounter);
            progress.setText(strFmt("@GLS104079", rAssetTrans.AccountNum));

            rassetGroupCheck = RAssetGroup::find(RAssetStandards::find(rAssetTrans.AccountNum, rAssetTrans.AssetStandardId).AssetGroup);
            if (RAssetBonus::find(deprBonusId).Percentage > rassetGroupCheck.DepreciationBonusPercent)
            {
                checkFailed(strFmt("@GLS114350",
                                   rassetGroupCheck.DepreciationBonusPercent,
                                   rassetGroupCheck.AssetGroupId));
                standards = conIns(standards, conLen(standards) + 1, rAssetTrans.AssetStandardId);
                continue;
            }

            if (nextMth(rAssetTrans.TransDate) <= rAssetStandards.LastDepDate ||
                (rAssetStandards.assetDeprMethod(rAssetTrans.TransDate) != RAssetDeprMethod::StraightLine &&
                 rAssetStandards.assetDeprMethod(rAssetTrans.TransDate) != RAssetDeprMethod::TaxNonLinearGroup))
            {
                continue;
            }

            rAssetTrans.DepreciationBonusCost = RAssetBonus::bonusAmountCur(deprBonusId,
                                                                            rAssetTrans.AssetStandardId,
                                                                            RAssetTable::find(rAssetTrans.AccountNum),
                                                                            rAssetTrans.TransDate,
                                                                            rAssetTrans.AmountCur,
                                                                            rAssetTrans.CurrencyCode);
            rAssetTrans.DeprBonusId           = deprBonusId;
            rAssetTrans.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   queryCon;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,queryCon] = packedClass;
                if (SysQuery::isPackedOk(queryCon))
                    queryRun = new QueryRun(queryCon);
                else
                    this.initQuery();
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@GLS116805";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RAssetDepreciationBonusAssign  bonusAssign = new RAssetDepreciationBonusAssign();
        ;

        if (bonusAssign.prompt())
        {
            bonusAssign.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>