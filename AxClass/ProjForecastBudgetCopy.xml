<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastBudgetCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjForecastBudgetCopy extends ProjForecastBudget implements BatchRetryable
{
    ForecastModelId fromForecastModel;
    ForecastModelId toForecastModel;
    ProjForecastBudgetType projForecastBudgetType;

    DialogField dialogFromForecastModel;
    DialogField dialogToForecastModel;

    #define.CurrentVersion(3)

    #localmacro.CurrentList
        includeHour,
        includeExpenses,
        includeItem,
        includeFee,
        includeOnAccount,
        projectFromDate,
        projectToDate,
        fromForecastModel,
        toForecastModel
     #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the AOT.
    /// </remarks>
    public Object dialog()
    {
        Dialog      dialogRunBase;

        dialogRunBase = super();

        dialogRunBase.addGroup("@SYS86808");
        dialogFromForecastModel = dialogRunBase.addFieldValue(extendedTypeStr(ForecastModelId), fromForecastModel, "@SYS86813", "@SYS90579");
        dialogToForecastModel   = dialogRunBase.addFieldValue(extendedTypeStr(ForecastModelId), toForecastModel,   "@SYS86815", "@SYS90661");

        return dialogRunBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_Cost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the <c>ProjCostForecast</c> records with the specified transaction ID.
    /// </summary>
    /// <param name="transId">
    ///    The ID of the transactions to copy.
    /// </param>
    /// <returns>
    ///    The ID of the last newly created transaction.
    /// </returns>
    public Num do_Cost(Num transId)
    {
        ProjForecastCost        projForecastCost;
        Num                     newTransId;

        if (includeExpenses)
        {
            QueryRun qr = new QueryRun(this.buildProjForecastCostQuery(transId));

            while(qr.next())
            {
                projForecastCost = qr.get(tableNum(ProjForecastCost)) as ProjForecastCost;

                this.initCost(projForecastCost);
                projForecastCost.insert();
                newTransId = projForecastCost.TransId;
            }
        }
        return newTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjForecastCostQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query to get expense forecast records.
    /// </summary>
    /// <param name = "_transId">
    ///     The ID of the transactions to copy.
    /// </param>
    /// <returns>
    ///     The query for expense forecast records.
    /// </returns>
    protected Query buildProjForecastCostQuery(Num _transId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsProjForecastCost = query.addDataSource(tableNum(ProjForecastCost));
        qbdsProjForecastCost.addRange(fieldNum(ProjForecastCost, TransId)).value(queryValue(_transId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes project cost forecast fields.
    /// </summary>
    /// <param name = "_projForecastCost">A <c>ProjForecastCost</c> record.</param>
    public void initCost(ProjForecastCost _projForecastCost)
    {
        if (toForecastModel)
        {
            _projForecastCost.ModelId = toForecastModel;
            _projForecastCost.ProjForecastBudgetType = projForecastBudgetType;
        }
        _projForecastCost.TransId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_empl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the <c>ProjEmplForecast</c> records with the specified transaction ID.
    /// </summary>
    /// <param name="transId">
    ///    The ID of the transactions to copy.
    /// </param>
    /// <returns>
    ///    The ID of the last newly created transaction.
    /// </returns>
    public Num do_empl(Num transId)
    {
        ProjForecastEmpl        projForecastEmpl;
        Num                     newTransId;
        RefRecId                origActivity;

        if (includeHour)
        {
            QueryRun qr =  new QueryRun(this.buildProjForecastEmplQuery(transId));

            while(qr.next())
            {
                projForecastEmpl = qr.get(tableNum(ProjForecastEmpl)) as ProjForecastEmpl;

                origActivity = projForecastEmpl.activity();

                this.initEmpl(projForecastEmpl);
                projForecastEmpl.insert();
                newTransId = projForecastEmpl.TransId;

                //Also copy the activity requirements
                WrkCtrActivityRequirementSet::copyRequirements(origActivity, projForecastEmpl.activity());
            }
        }
        return newTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjForecastEmplQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query to get hour forecast records.
    /// </summary>
    /// <param name = "_transId">
    ///     The ID of the transactions to copy.
    /// </param>
    /// <returns>
    ///     The query for hour forecast records.
    /// </returns>
    protected Query buildProjForecastEmplQuery(Num _transId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsProjForecastEmpl = query.addDataSource(tableNum(ProjForecastEmpl));
        qbdsProjForecastEmpl.addRange(fieldNum(ProjForecastEmpl, TransId)).value(queryValue(_transId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes project hour forecast fields.
    /// </summary>
    /// <param name = "_projForecastEmpl">A <c>ProjForecastEmpl</c> record.</param>
    public void initEmpl(ProjForecastEmpl _projForecastEmpl)
    {
        if (toForecastModel)
        {
            _projForecastEmpl.ModelId = toForecastModel;
            _projForecastEmpl.ProjForecastBudgetType = projForecastBudgetType;
        }
        _projForecastEmpl.TransId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_onAcc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the <c>ProjOnAccForecast</c> records with the specified transaction ID.
    /// </summary>
    /// <param name="transId">
    ///    The ID of the transactions to copy.
    /// </param>
    /// <returns>
    ///    The ID of the last newly created transaction.
    /// </returns>
    public Num do_onAcc(Num transId)
    {
        ProjForecastOnAcc       projForecastOnAcc;
        Num                     newTransId;

        if (includeOnAccount)
        {
            QueryRun qr = new QueryRun(this.buildProjForecastOnAccQuery(transId));

            while (qr.next())
            {
                projForecastOnAcc = qr.get(tableNum(ProjForecastOnAcc)) as ProjForecastOnAcc;

                this.initonAcc(projForecastOnAcc);
                projForecastOnAcc.insert();
                newTransId = projForecastOnAcc.TransId;
            }
        }
        return newTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjForecastOnAccQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query to get on account forecast records.
    /// </summary>
    /// <param name = "_transId">
    ///     The ID of the transactions to copy.
    /// </param>
    /// <returns>
    ///     The query for on account forecast records.
    /// </returns>
    protected Query buildProjForecastOnAccQuery(Num _transId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsProjForecastOnAcc = query.addDataSource(tableNum(ProjForecastOnAcc));
        qbdsProjForecastOnAcc.addRange(fieldNum(ProjForecastOnAcc, TransId)).value(queryValue(_transId));

        return Query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes project onaccount forecast fields.
    /// </summary>
    /// <param name = "_projForecastOnAcc">A <c>ProjForecastOnAcc</c> record.</param>
    public void initOnAcc(ProjForecastOnAcc _projForecastOnAcc)
    {
        if (toForecastModel)
        {
            _projForecastOnAcc.ModelId = toForecastModel;
            _projForecastOnAcc.ProjForecastBudgetType = projForecastBudgetType;
        }
        _projForecastOnAcc.TransId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_Revenue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the <c>ProjRevenueForecast</c> records with the specified transaction ID.
    /// </summary>
    /// <param name="transId">
    ///    The ID of the transactions to copy.
    /// </param>
    /// <returns>
    ///    The ID of the last newly created transaction.
    /// </returns>
    public Num do_Revenue(Num transId)
    {
        ProjForecastRevenue projForecastRevenue;
        Num                 newTransId;

        if (includeFee)
        {
            QueryRun qr = new QueryRun(this.buildProjForecastRevenueQuery(transId));

            while (qr.next())
            {
                projForecastRevenue = qr.get(tableNum(ProjForecastRevenue)) as ProjForecastRevenue;

                this.initRevenue(projForecastRevenue);
                projForecastRevenue.insert();
                newTransId = projForecastRevenue.TransId;
            }
        }
        return newTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjForecastRevenueQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query to get fee forecast records.
    /// </summary>
    /// <param name = "_transId">
    ///     The ID of the transactions to copy.
    /// </param>
    /// <returns>
    ///     The query for fee forecast records.
    /// </returns>
    protected Query buildProjForecastRevenueQuery(Num _transId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsProjForecastRevenue = query.addDataSource(tableNum(ProjForecastRevenue));
        qbdsProjForecastRevenue.addRange(fieldNum(ProjForecastRevenue, TransId)).value(queryValue(_transId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes project revenue forecast fields.
    /// </summary>
    /// <param name = "_projForecastRevenue">A <c>ProjForecastRevenue</c> record.</param>
    public void initRevenue(ProjForecastRevenue _projForecastRevenue)
    {
        if (toForecastModel)
        {
            _projForecastRevenue.ModelId = toForecastModel;
            _projForecastRevenue.ProjForecastBudgetType = projForecastBudgetType;
        }
        _projForecastRevenue.TransId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_sales</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the <c>ProjTrans</c> records with the specified transaction ID.
    /// </summary>
    /// <param name="transId">
    ///    The ID of the transactions to copy.
    /// </param>
    /// <returns>
    ///    The ID of the last newly created transaction.
    /// </returns>
    public Num do_sales(Num transId)
    {
        ForecastSales   forecastSales;
        Num             newTransId;

        if (includeItem)
        {
            QueryRun qr = new QueryRun(this.buildForecastSalesQuery(transId));

            while (qr.next())
            {
                forecastSales = qr.get(tableNum(forecastSales)) as forecastSales;

                this.initSales(forecastSales);
                forecastSales.insert();
                newTransId  = forecastSales.ProjTransId;
            }
        }
        return newTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildForecastSalesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query to get demand forecast records.
    /// </summary>
    /// <param name = "_transId">
    ///     The ID of the transactions to copy.
    /// </param>
    /// <returns>
    ///     The query for demand forecast records.
    /// </returns>
    protected Query buildForecastSalesQuery(Num _transId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsForecastSales = query.addDataSource(tableNum(ForecastSales));
        qbdsForecastSales.addRange(fieldNum(ForecastSales, ProjTransId)).value(queryValue(_transId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes forecast sales fields.
    /// </summary>
    /// <param name = "_forecastSales">A <c>ForecastSales</c> record.</param>
    public void initSales(ForecastSales _forecastSales)
    {
        if (toForecastModel)
        {
            _forecastSales.ModelId = toForecastModel;
            _forecastSales.ProjForecastBudgetType = projForecastBudgetType;
        }
        _forecastSales.ProjTransId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdCategoryId</Name>
				<Source><![CDATA[
    public FieldId fieldIdCategoryId()
    {
        return fieldNum(ProjForecastUnion, CategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdItemId</Name>
				<Source><![CDATA[
    protected FieldId fieldIdItemId()
    {
        return fieldNum(ProjForecastUnion, ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdProjId</Name>
				<Source><![CDATA[
    public FieldId fieldIdProjId()
    {
        return fieldNum(ProjForecastUnion, ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdProjTransType</Name>
				<Source><![CDATA[
    public FieldId fieldIdProjTransType()
    {
        return fieldNum(ProjForecastUnion, ProjTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdResource</Name>
				<Source><![CDATA[
    protected FieldId fieldIdResource()
    {
        return fieldNum(ProjForecastUnion, Resource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdResourceCategory</Name>
				<Source><![CDATA[
    protected FieldId fieldIdResourceCategory()
    {
        return fieldNum(ProjForecastUnion, ResourceCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdTransId</Name>
				<Source><![CDATA[
    public FieldId fieldIdTransId()
    {
        return fieldNum(ProjForecastUnion, TransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmFromForecastModel(dialogFromForecastModel.value());
        this.parmToForecastModel(dialogToForecastModel.value());
        projForecastBudgetType = ProjForecastBudgetCopy::getProjForecastBudgetType(ForecastModel::find(HeadingSub::Heading, toForecastModel).ProjBudgetType);

        this.parmIncludeHour(dialogIncludeHour.value());
        this.parmIncludeExpenses(dialogIncludeExpenses.value());
        this.parmIncludeItem(dialogIncludeItem.value());
        this.parmIncludeFee(dialogIncludeFee.value());
        this.parmIncludeOnAccount(dialogIncludeOnAccount.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    void initQuery()
    {
        str transTypeRange;

        if (projectFromDate || projectToDate)
        {
            this.setRange(tableNum(ProjForecastUnion)  ,fieldNum(ProjForecastUnion, SchedFromDate)  , queryRange(projectFromDate, projectToDate), RangeStatus::Locked);
        }

        transTypeRange = this.setTransTypeRange();

        this.setRange(tableNum(ProjForecastUnion)  ,fieldNum(ProjForecastUnion,ProjTransType) , transTypeRange, RangeStatus::Locked);
        this.setRange(tableNum(ProjForecastUnion)  ,fieldNum(ProjForecastUnion,ModelId)       , fromForecastModel, RangeStatus::Locked);

        QueryBuildDataSource qbdsDimensions = this.queryRun().query().dataSourceTable(tableNum(DimensionAttributeValueSet));

        if (qbdsDimensions)
        {
            // By default, outer join is being considered from <c>SysQueryForm</c> object but to apply specified filters it must be inner join.
            qbdsDimensions.joinMode(JoinMode::InnerJoin);
        }

        this.checkAndDisableDatasource(queryRun.query(),queryRun.query().dataSourceNo(1));

        this.queryRun().query().dataSourceTable(tableNum(ProjForecastUnion)).sortClear();
        this.queryRun().query().dataSourceTable(tableNum(ProjForecastUnion)).addSortField(fieldNum(ProjForecastUnion,ProjId));
        this.queryRun().query().dataSourceTable(tableNum(ProjForecastUnion)).addSortField(fieldNum(ProjForecastUnion,ProjTransType));
        this.queryRun().query().dataSourceTable(tableNum(ProjForecastUnion)).addSortField(fieldNum(ProjForecastUnion,TransId));
        this.queryRun().query().dataSourceTable(tableNum(ProjForecastUnion)).orderMode(OrderMode::GroupBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack = conNull();
        container ret;

        if (queryRun)
        {
            pack = queryRun.pack();
        }

        ret =  [#CurrentVersion, #CurrentList] + [pack];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromForecastModel</Name>
				<Source><![CDATA[
    public ForecastModelId parmFromForecastModel(ForecastModelId _fromForecastModel = fromForecastModel)
    {
        fromForecastModel  = _fromForecastModel;

        return fromForecastModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToForecastModel</Name>
				<Source><![CDATA[
    public ForecastModelId parmToForecastModel(ForecastModelId _toForecastModel = toForecastModel)
    {
        toForecastModel  = _toForecastModel;

        return toForecastModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressTitle</Name>
				<Source><![CDATA[
    str progressTitle()
    {
        return "@SYS86823";
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    protected QueryRun queryBuild()
    {
        queryRun = new QueryRun(queryStr(ProjForecastPeriodic));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    public TableId tableId()
    {
        return tableNum(ProjForecastUnion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>title</Name>
				<Source><![CDATA[
    str title()
    {
        return "@SYS342503";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version         = RunBase::getVersion(packedClass);
        container       packedQuery;
        boolean         ret = true;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }

                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (!this.checkIsTransactionTypeSelected())
        {
            // No transactions selected
            ret = checkFailed("@SYS91027");
        }

        if (!this.checkAreForecastModelsSelected())
        // Forecast models must be selected
        {
            ret = checkFailed("@SYS87707");
        }
        else
        {
            if (ret)
            {
                ret = ForecastModel::checkModel(toForecastModel);
            }

            if (ret)
            {
                if (fromForecastModel == toForecastModel)
                {
                    if (Box::yesNo("@SYS87708",DialogButton::No) == DialogButton::No)
                    {
                        ret = false;
                        return ret;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsTransactionTypeSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a transaction type is selected.
    /// </summary>
    /// <returns>
    /// true if a transaction type is selected; otherwise, false.
    /// </returns>
    protected boolean checkIsTransactionTypeSelected()
    {
        return (includeHour || includeExpenses || includeItem || includeFee || includeOnAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAreForecastModelsSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if both forecast models are selected.
    /// </summary>
    /// <returns>
    /// true if both forecast models are selected; otherwise, false.
    /// </returns>
    protected boolean checkAreForecastModelsSelected()
    {
        return (fromForecastModel && toForecastModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    protected static ClassDescription description()
    {
        return "@SYS342503";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjForecastBudgetType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the <c>ProjForecastBudgetType</c> enumeration value to the corresponding <c>ProjBudgetType</c> enumeration value.
    /// </summary>
    /// <param name="_projBudgetType">
    ///    The <c>ProjBudgetType</c> that is used to determine the enumeration value
    /// </param>
    /// <returns>
    ///    The <c>ProjForecastBudgetType</c> enumeration value
    /// </returns>
    public static ProjForecastBudgetType getProjForecastBudgetType(ProjBudgetType   _projBudgetType = ProjBudgetType::None)
    {
        ProjForecastBudgetType  projForecastBudgetTypeLoc;

        switch (_projBudgetType)
        {
            case ProjBudgetType::None :
                projForecastBudgetTypeLoc = ProjForecastBudgetType::None;
                break;

            case ProjBudgetType::OriginalBudget :
                projForecastBudgetTypeLoc = ProjForecastBudgetType::OriginalBudget;
                break;

            case ProjBudgetType::RemainingBudget :
                projForecastBudgetTypeLoc = ProjForecastBudgetType::RemainingBudget;
                break;

            case ProjBudgetType::CarryForward :
                projForecastBudgetTypeLoc = ProjForecastBudgetType::CarryForward;
                break;

            default :
                break;
        }

        return projForecastBudgetTypeLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ProjForecastBudgetCopy  pfcb;

        pfcb = new ProjForecastBudgetCopy();

        if (pfcb.prompt())
        {
            pfcb.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>