<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoicePost_CustInvoiceJour_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoicePost_CustInvoiceJour_MX</c> class handles the posting of the EInvoice for CFDI
/// </summary>
public class EInvoicePost_CustInvoiceJour_MX extends EInvoicePost_MX
{
    CustInvoiceJour custInvoiceJour;
    CustInvoiceTable custInvoiceTable;
    SalesTable salesTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createElectronicInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates electronic invoice lines that are related to the posted document.
    /// </summary>
    /// <remarks>
    /// Depending on the origin of the posted document, it is necessary to search for lines to get the
    /// following information: <c>customsName</c>, <c>customsDocNumber</c>, <c>customsDocDate</c>, and
    /// <c>PropertyNumber</c>.
    /// </remarks>
    public void createElectronicInvoiceTrans()
    {
        CustInvoiceTrans    localCustInvoiceTrans;
        CustInvoiceTable    localCustInvoiceTable;
        CustInvoiceLine     localCustInvoiceLine;

        while select localCustInvoiceTrans
            where localCustInvoiceTrans.SalesId             == custInvoiceJour.SalesId
               && localCustInvoiceTrans.InvoiceId           == custInvoiceJour.invoiceId
               && localCustInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate
               && localCustInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup
        {
            eInvoiceTrans.clear();
            eInvoiceTrans.initValue();
            eInvoiceTrans.RefTableId           = localCustInvoiceTrans.TableId;
            eInvoiceTrans.RefRecId             = localCustInvoiceTrans.RecId;

            if (localCustInvoiceTrans.SalesId)
            {
                SalesLine salesLine = localCustInvoiceTrans.salesLine();

                eInvoiceTrans.CustomsDocNumber      = salesLine.CustomsDocNumber_MX;
                eInvoiceTrans.CustomsDocDate        = salesLine.CustomsDocDate_MX;
                eInvoiceTrans.CustomsName           = salesLine.CustomsName_MX;
                eInvoiceTrans.PropertyNumber        = salesLine.PropertyNumber_MX;
                eInvoiceTrans.ProductCode           = salesLine.satProductCode_MX;
                eInvoiceTrans.uomCode               = salesLine.satUnitCode_MX;
                eInvoiceTrans.TariffFraction        = salesLine.SATTariffFraction_MX;
                eInvoiceTrans.CustomUOMCode         = salesLine.SATCustomUnitOfMeasure_MX;
                eInvoiceTrans.BrandCode             = salesLine.inventTable().BrandCodeId_MX;
                eInvoiceTrans.CustomsQty            = salesLine.SATCustomsQty_MX;
            }
            else
            {
                localCustInvoiceTable = custInvoiceJour.custInvoiceTable();

                select PropertyNumber_MX, satProductCode_MX, satUnitCode_MX, satTariffFraction_MX, SATCustomUnitOfMeasure_MX, Brand_MX, SATCustomsQty_MX, CustomsDocNumber_MX, CustomsDocDate_MX, CustomsName_MX from localCustInvoiceLine
                    where localCustInvoiceLine.ParentRecId  == localCustInvoiceTable.RecId
                    &&    localCustInvoiceLine.LineNum      == localCustInvoiceTrans.LineNum;

                eInvoiceTrans.PropertyNumber       = localCustInvoiceLine.PropertyNumber_MX;
                eInvoiceTrans.ProductCode          = localCustInvoiceLine.satProductCode_MX;
                eInvoiceTrans.uomCode              = localCustInvoiceLine.satUnitCode_MX;
                eInvoiceTrans.TariffFraction       = localCustInvoiceLine.SATTariffFraction_MX;
                eInvoiceTrans.CustomUOMCode        = localCustInvoiceLine.SATCustomUnitOfMeasure_MX;
                eInvoiceTrans.BrandCode            = localCustInvoiceLine.Brand_MX;
                eInvoiceTrans.CustomsQty           = localCustInvoiceLine.SATCustomsQty_MX;
                eInvoiceTrans.CustomsDocNumber     = localCustInvoiceLine.CustomsDocNumber_MX;
                eInvoiceTrans.CustomsDocDate       = localCustInvoiceLine.CustomsDocDate_MX;
                eInvoiceTrans.CustomsName          = localCustInvoiceLine.CustomsName_MX;
            }

            eInvoiceTrans.RefEInvoiceJourRecId = eInvoiceJour.RecId;

            eInvoiceTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignTrade</Name>
				<Source><![CDATA[
    protected ForeignTrade_MX getForeignTrade()
    {
        boolean isForeignTrade;

        if (custInvoiceJour.SalesId)
        {
            isForeignTrade = salesTable.ForeignTrade_MX;
        }
        else
        {
            isForeignTrade = custInvoiceTable.ForeignTrade_MX;
        }

        return isForeignTrade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemporaryExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if the e-invoice is for temporary export.
    /// </summary>
    /// <returns>
    /// true if the e-invoice is for temporary export; otherwise, false.
    /// </returns>
    protected CFDITemporaryExport_MX getTemporaryExport()
    {
        boolean isTemporaryExport;

        if (custInvoiceJour.SalesId)
        {
            isTemporaryExport = salesTable.CFDITemporaryExport_MX;
        }
        else
        {
            isTemporaryExport = custInvoiceTable.CFDITemporaryExport_MX;
        }

        return isTemporaryExport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the foreign tax regostration number.
    /// </summary>
    /// <returns>
    /// The foreign tax registration number.
    /// </returns>
    protected numRegIdTrib_MX getForeignTaxRegistration()
    {
        return custInvoiceJour.custTable_InvoiceAccount().ForeignTaxRegistration_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncotermCode</Name>
				<Source><![CDATA[
    protected EInvoiceExtCodeId_MX getIncotermCode()
    {
        EInvoiceExtCodeId_MX incotermCode;

        if (custInvoiceJour.SalesId)
        {
            incotermCode = salesTable.SATIncotermCode_MX;
        }
        else
        {
            incotermCode = custInvoiceTable.SATIncotermCode_MX;
        }

        return incotermCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificateNumber</Name>
				<Source><![CDATA[
    protected CertificateNumber_MX getCertificateNumber()
    {
        CertificateNumber_MX certificateNumber;

        if (custInvoiceJour.SalesId)
        {
            certificateNumber = salesTable.CertificateNumber_MX;
        }
        else
        {
            certificateNumber = custInvoiceTable.CertificateNumber_MX;
        }

        return certificateNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceCertificate</Name>
				<Source><![CDATA[
    protected SourceCertificate_MX getSourceCertificate()
    {
        boolean isSourceCertificate;

        if (custInvoiceJour.SalesId)
        {
            isSourceCertificate = salesTable.SourceCertificate_MX;
        }
        else
        {
            isSourceCertificate = custInvoiceTable.SourceCertificate_MX;
        }

        return isSourceCertificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumRegIdTrib</Name>
				<Source><![CDATA[
    protected NumRegIdTrib_MX getNumRegIdTrib()
    {
        NumRegIdTrib_MX numReg;

        if (custInvoiceJour.SalesId)
        {
            numReg = salesTable.NumRegIdTrib_MX;
        }
        else
        {
            numReg = custInvoiceTable.NumRegIdTrib_MX;
        }

        return numReg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNumberSeq</Name>
				<Source><![CDATA[
    protected RefRecId getInvoiceNumberSeq()
    {
        return EInvoicePost_CustInvoiceJour_MX::getInvoiceNumberSequence(custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicingName</Name>
				<Source><![CDATA[
    protected SATRegistrationName_MX getInvoicingName()
    {
        SATRegistrationName_MX regName = CustTable::find(custInvoiceJour.OrderAccount).SATRegistrationName_MX;
        return regName ? regName : custInvoiceJour.InvoicingName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides number sequence used for customer invoice that corresponds to electronic invoice being posted.
    /// </summary>
    /// <param name = "_custInvoiceJour">
    /// Invoice journal record.
    /// </param>
    /// <returns>
    /// Number sequence record.
    /// </returns>
    internal static RefRecId getInvoiceNumberSequence(CustInvoiceJour _custInvoiceJour)
    {
        RefRecId invoiceNumberSeqId;
        NumberSequenceDatatype numberDatatype;
        NumberSequenceReference numberSequenceReference;
        boolean creditNote = _custInvoiceJour.InvoiceAmountMST < 0;
        RefRecId scopeId = NumberSeqScopeFactory::createDefaultScope().getId();

        if (_custInvoiceJour.SalesId)
        {
            numberSequenceReference = creditNote ? SalesParameters::numRefSalesCreditNoteId() : SalesParameters::numRefInvoiceId();
        }
        else
        {
            numberSequenceReference = creditNote ? CustParameters::numRefCustCreditNoteId() : CustParameters::numRefCustInvoiceId();
        }

        if (_custInvoiceJour.NumberSequenceGroup)
        {
            numberDatatype = NumberSequenceDatatype::find(numberSequenceReference.NumberSequenceDatatype);

            invoiceNumberSeqId = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, _custInvoiceJour.NumberSequenceGroup).NumberSequenceId;
            if (!invoiceNumberSeqId && !_custInvoiceJour.SalesId)
            {
                invoiceNumberSeqId = NumberSequenceReference::findNaturalKey(numberDatatype.RecId, scopeId).NumberSequenceId;
            }
        }

        if (!invoiceNumberSeqId)
        {
            invoiceNumberSeqId = numberSequenceReference.NumberSequenceId;
        }

        return invoiceNumberSeqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfirmNumber</Name>
				<Source><![CDATA[
    protected EInvoiceCFDIConfirmNumber_MX getConfirmNumber()
    {
        EInvoiceCFDIConfirmNumber_MX confirmNumber;

        if (custInvoiceJour.SalesId)
        {
            confirmNumber = salesTable.eInvoiceCFDIConfirmNumber_MX;
        }
        else
        {
            confirmNumber = custInvoiceTable.eInvoiceCFDIConfirmNumber_MX;
        }

        return confirmNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode getCurrencyCode()
    {
        return custInvoiceJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRate</Name>
				<Source><![CDATA[
    protected ExchRate getExchRate()
    {
        return custInvoiceJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEInvoicePeriod</Name>
				<Source><![CDATA[
    protected RetailEInvoicePeriod_MX getEInvoicePeriod()
    {
        RetailEInvoicePeriod_MX ret;

        if (parmTable is SalesParmTable)
        {
            SalesParmTable salesParmTable = parmTable as SalesParmTable;
            ret = salesParmTable.CFDIEInvoicePeriod_MX;
        }
        else if (parmTable is CustInvoiceTable)
        {
            CustInvoiceTable custInvoiceTableLocal = parmTable as CustInvoiceTable;
            ret = custInvoiceTableLocal.CFDIEInvoicePeriod_MX;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMethod</Name>
				<Source><![CDATA[
    protected EInvoiceExtCodeId_MX getPaymMethod()
    {
        EInvoiceExtCodeId_MX satCode;

        if (custInvoiceJour.SalesId)
        {
            satCode = salesTable.satPaymMethod_MX;
        }
        else
        {
            satCode = custInvoiceTable.satPaymMethod_MX;
        }

        return satCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurpose</Name>
				<Source><![CDATA[
    protected EInvoiceExtCodeId_MX getPurpose()
    {
        EInvoiceExtCodeId_MX satCode;

        if (custInvoiceJour.SalesId)
        {
            satCode = salesTable.satPurpose_MX;
        }
        else
        {
            satCode = custInvoiceTable.satPurpose_MX;
        }

        return satCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmount</Name>
				<Source><![CDATA[
    protected InvoiceAmountMST getTotalAmount()
    {
        return custInvoiceJour.InvoiceAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the original invoice journal.
    /// </summary>
    /// <returns>Returns the original invoice journal.</returns>
    protected Common invoiceJour()
    {
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceJourMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the electronic invoice mapping that is based on a <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>Returns the <c>EInvoiceJourBaseMap_MX</c> based on a <c>CustInvoiceJour</c>.</returns>
    public EInvoiceJourBaseMap_MX createInvoiceJourMapping()
    {
        invoiceJourMapping = EInvoiceJourBaseMap_MX::construct(custInvoiceJour);

        return invoiceJourMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice date of the <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The invoice date of the <c>CustInvoiceJour</c> record.</returns>
    public Date getInvoiceDate()
    {
        return custInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice ID of the <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The invoice ID of the <c>CustInvoiceJour</c> record.</returns>
    public InvoiceId getInvoiceId()
    {
        return custInvoiceJour.invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The record ID of the <c>CustInvoiceJour</c> record.    /// </returns>
    /// <remarks>
    /// An <c>EInvoiceJour_MX</c> electronic invoice always originates from another document.To keep track
    /// of the original document, the <c>RefTableId</c> and <c>RefRecId</c> values are persisted.
    /// </remarks>
    public RefRecId getInvoiceJourRecId()
    {
        return custInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The table ID of the <c>CustInvoiceJour</c> record.</returns>
    /// <remarks>
    /// An <c>EInvoiceJour_MX</c> electronic invoice always originates from another document.To keep track
    /// of the original document, the <c>RefTableId</c> and <c>RefRecId</c> values are persisted.
    /// </remarks>
    public RefTableId getInvoiceJourTableId()
    {
        return custInvoiceJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment mode of the <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>The payment mode of the <c>CustInvoiceJour</c> record.</returns>
    public CustPaymMode getPaymMode()
    {
        CustPaymMode custPaymMode;

        if (custInvoiceJour.SalesId)
        {
            custPaymMode = salesTable.PaymMode;
        }
        else
        {
            custPaymMode = custInvoiceTable.PaymMode;
        }

        return custPaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EInvoicePost_MX</c> class.
    /// </summary>
    /// <param name="_custInvoiceJour">A <c>CustInvoiceJour</c> record.</param>
    public void new(CustInvoiceJour _custInvoiceJour)
    {

        custInvoiceJour = _custInvoiceJour;
        custInvoiceTable = custInvoiceJour.custInvoiceTable();
        salesTable = custInvoiceJour.salesTable();
        
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    protected Voucher getVoucher()
    {
        return custInvoiceJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean ret;
    
        ret = super();
    
        return this.validateExemptTax() && ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesToProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity of lines for processing.
    /// </summary>
    /// <returns>The quantity of lines for processing.</returns>
    protected int64 linesToProcess()
    {
        CustInvoiceTrans custInvoiceTrans;

        select firstonly count(RecId) from custInvoiceTrans
            where custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId
                && custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate
                && custInvoiceTrans.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup
                && custInvoiceTrans.SalesId == custInvoiceJour.SalesId;

        return custInvoiceTrans.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>