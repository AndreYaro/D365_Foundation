<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransList</c> class represents a linked list of <c>InventTrans</c> table records.
/// </summary>
class InventTransList implements InventTransEnumerable
{
    List    recordList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an <c>InventTrans</c> table record to the end of the list.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> table record.
    /// </param>
    public void addEnd(InventTrans _inventTrans)
    {
        recordList.addEnd(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an <c>InventTrans</c> table record to the beginning of the list.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> table record.
    /// </param>
    public void addStart(InventTrans _inventTrans)
    {
        recordList.addStart(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends a list to the end of the current list.
    /// </summary>
    /// <param name="_inventTransList">
    /// A list of <c>InventTrans</c> table records.
    /// </param>
    public void appendList(InventTransList _inventTransList)
    {
        recordList.appendList(_inventTransList.getRecordList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of elements in the collection.
    /// </summary>
    /// <returns>
    /// The number of elements in the collection.
    /// </returns>
    public int elements()
    {
        return recordList.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>empty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the list is empty.
    /// </summary>
    /// <returns>
    /// true if the list is empty; otherwise, false.
    /// </returns>
    public boolean empty()
    {
        return recordList.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an enumarator that iterates through the collection.
    /// </summary>
    /// <returns>
    /// An enumerator that iterates through the collection.
    /// </returns>
    public Enumerator getEnumerator()
    {
        return InventTransListEnumerator::newFromInventTransList(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the internal type-unsafe list collection that is used to store <c>InventTrans</c> table records.
    /// </summary>
    /// <returns>
    /// The internal type-unsafe list collection that is used to store <c>InventTrans</c> table records.
    /// </returns>
    public List getRecordList()
    {
        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        recordList = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventTransList construct()
    {
        return new InventTransList();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>