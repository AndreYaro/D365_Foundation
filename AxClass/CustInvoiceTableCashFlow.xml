<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceTableCashFlow</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>CustInvoiceTableCashFlow</c> class is the implementation between open customer free text transactions and cash flow.
/// </summary>
[ExportMetadata(classStr(LedgerCovIDocument), 'CustInvoiceTable'), ExportAttribute('Dynamics.AX.Application.LedgerCovIDocument')]
public class CustInvoiceTableCashFlow implements LedgerCovIDocument, LedgerCovIDocumentSingleTransactionScope
{
    private LedgerCovContext ledgerCovContext;
    private SysInstrumentationProgressLogger progressLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateCashFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates cash flow.
    /// </summary>
    /// <param name = "_allNew">
    /// Identifies when cash flow is generated for only new documents or all documents.
    /// </param>
    public void generateCashFlow(AllNew _allNew)
    {
        this.init();

        if (LedgerCovDocumentSingleTransactionScopeKillSwitchFlight::isEnabled())
        {
            this.generateCashFlowSetBased(_allNew);
        }
        else
        {
            this.generateCashFlowForProcessSet(_allNew);
            this.deleteCompletedRows();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        progressLogger = this.createProgressLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void generateCashFlowForProcessSet(AllNew _allNew)
    {
        const int SetSize = 1000;

        int64 nextSetSize;
        int64 numberOfRecordsForCustAccountNum;
        AccountNum lastCustAccountNum;
        AccountNum fromCustAccountNum;
        AccountNum toCustAccountNum;

        Query countByCustomerQuery = this.buildAccountNumCountQuery(_allNew);
        QueryRun countByCustomerQueryRun = new QueryRun(countByCustomerQuery);
        int i = 0;

        while (countByCustomerQueryRun.next())
        {
            i++;

            CustInvoiceTable custInvoiceTable = countByCustomerQueryRun.get(tableNum(CustInvoiceTable));

            AccountNum custAccountNum = custInvoiceTable.InvoiceAccount;
            numberOfRecordsForCustAccountNum = custInvoiceTable.RecId;

            if (i == 1)
            {
                fromCustAccountNum = custAccountNum;
            }

            nextSetSize +=  numberOfRecordsForCustAccountNum;
            if (nextSetSize >= SetSize)
            {
                toCustAccountNum = custAccountNum;

                this.processCashFlowForProcessSet(_allNew, fromCustAccountNum, toCustAccountNum);

                i = 0;
                nextSetSize = 0;
                fromCustAccountNum = '';
                toCustAccountNum = '';
            }

            lastCustAccountNum = custAccountNum;
        }

        // The last set is smaller than SetSize
        if (i > 0)
        {
            toCustAccountNum = lastCustAccountNum;

            this.processCashFlowForProcessSet(_allNew, fromCustAccountNum, toCustAccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountNumCountQuery</Name>
				<Source><![CDATA[
    private Query buildAccountNumCountQuery(AllNew _allNew)
    {
        Query query = this.buildGenerateCashFlowQuery(_allNew);
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(CustInvoiceTable));

        qbds.addSelectionField(fieldNum(CustInvoiceTable, InvoiceAccount));
        qbds.addSelectionField(fieldNum(CustTransOpen, RecId), SelectionField::Count);
        qbds.addGroupByField(fieldNum(CustInvoiceTable, InvoiceAccount));
        qbds.addOrderByField(fieldNum(CustInvoiceTable, InvoiceAccount), SortOrder::Ascending);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void processCashFlowForProcessSet(AllNew _allNew,  AccountNum _fromCustAccountNum, AccountNum _toCustAccountNum)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowFreeTextInvoice))
        {
            System.Exception exception;
            RecId custInvoiceTableRecId;
            try
            {
                CustInvoiceTable custInvoiceTable;

                ttsbegin;

                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(custInvoiceTable, NoYes::Yes);

                Query q = this.buildGenerateCashFlowQueryForSet(_allNew, _fromCustAccountNum, _toCustAccountNum);
                QueryRun qr = new QueryRun(q);
                while (qr.next())
                {
                    custInvoiceTable = qr.get(tableNum(CustInvoiceTable));
                    custInvoiceTableRecId = custInvoiceTable.RecId;
                    custInvoiceTable.updateLedgerCov(ledgerCoverage);
                }

                LedgerCov::deleteForTransTableIdAndFilter(tableNum(CustInvoiceTable), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                ledgerCoverage.insertDatabase();

                LedgerCovDocument::deleteForTransTableIdAndFilter(tableNum(CustInvoiceTable), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                this.updateCustInvoiceTableCovStatus(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(CustInvoiceTable), custInvoiceTableRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(CustInvoiceTable), custInvoiceTableRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQueryForSet</Name>
				<Source><![CDATA[
    private Query buildGenerateCashFlowQueryForSet(AllNew _allNew, AccountNum _fromCustAccountNum, AccountNum _toCustAccountNum)
    {
        Query query = this.buildGenerateCashFlowQuery(_allNew);
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(CustInvoiceTable));

        QueryBuildRange qbr = SysQuery::findOrCreateRange(qbds, fieldNum(CustInvoiceTable, InvoiceAccount));
        qbr.value(_fromCustAccountNum + '..' + _toCustAccountNum);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerCovContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initLedgerCovContext(LedgerCovContext _ledgerCovContext)
    {
        this.ledgerCovContext = _ledgerCovContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProgressLogger</Name>
				<Source><![CDATA[
    private SysInstrumentationProgressLogger createProgressLogger()
    {
        return SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashFlowForecasting, CustVendInstrumentationConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessExecutionMessage</Name>
				<Source><![CDATA[
    private void logProcessExecutionMessage(Exception _exceptionType, SysInfoLogStr _message, URL _helpUrl = '', SysInfoAction _sysInfoAction = null)
    {
        if (ledgerCovContext != null && ledgerCovContext.parmProcessExecutionSourceLinkRecId() != 0)
        {
            ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
            messageLogItem.parmException(_exceptionType);
            messageLogItem.parmProcessExecutionSourceLink(ledgerCovContext.parmProcessExecutionSourceLinkRecId());
            messageLogItem.parmMessage(_message);

            ProcessExecutionMessageLog::insertMessage(messageLogItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedRows</Name>
				<Source><![CDATA[
    private void deleteCompletedRows()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;
            
            this.deleteCompletedLedgerCovRows();
            this.deleteCompletedLedgerCovDocumentRows();
            this.deletePostedRecordsFromPayPred();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                sleep(xSession::currentRetryCount() * backOffWait);
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }

        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovRows()
    {
        CustInvoiceTable custInvoiceTable;
        LedgerCov ledgerCov = LedgerCov::initializeForSetBasedDelete();

        delete_from ledgerCov
            where ledgerCov.TransTableId == tableNum(CustInvoiceTable)
                exists join custInvoiceTable
                    where custInvoiceTable.Posted == NoYes::Yes
                        && ledgerCov.TransRecId == custInvoiceTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovDocumentRows()
    {
        CustInvoiceTable custInvoiceTable;
        LedgerCovDocument ledgerCovDocument = LedgerCovDocument::initializeForSetBasedDelete();

        delete_from ledgerCovDocument
            where ledgerCovDocument.TransTableId == tableNum(CustInvoiceTable)
                exists join custInvoiceTable
                    where custInvoiceTable.Posted == NoYes::Yes
                        && ledgerCovDocument.TransRecId == custInvoiceTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowSetBased</Name>
				<Source><![CDATA[
    private void generateCashFlowSetBased(AllNew _allNew)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowFreeTextInvoice))
        {
            System.Exception exception;
            RecId custInvoiceTableRecId;
            try
            {
                CustInvoiceTable custInvoiceTable;
                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(custInvoiceTable, NoYes::Yes);

                ttsbegin;

                Query q = this.buildGenerateCashFlowQuery(_allNew);
                QueryRun qr = new QueryRun(q);
                while (qr.next())
                {
                    custInvoiceTable = qr.get(tableNum(CustInvoiceTable));
                    custInvoiceTableRecId = custInvoiceTable.RecId;
                    custInvoiceTable.updateLedgerCov(ledgerCoverage);
                }

                this.deleteLedgerCovRows(_allNew, ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                ledgerCoverage.insertDatabase();

                this.deleteLedgerCovDocumentRows(_allNew, ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                this.deletePostedRecordsFromPayPred();

                this.updateCustInvoiceTableCovStatus(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(CustInvoiceTable), custInvoiceTableRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(CustInvoiceTable), custInvoiceTableRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQuery</Name>
				<Source><![CDATA[
    private Query buildGenerateCashFlowQuery(AllNew _allNew)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(CustInvoiceTable));

        qbds.addRange(fieldNum(CustInvoiceTable, Posted)).value(queryValue(NoYes::No));

        if (_allNew == AllNew::New)
        {
            qbds.addRange(fieldNum(CustInvoiceTable, CovStatus)).value(queryValue(0));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustInvoiceTableCovStatus</Name>
				<Source><![CDATA[
    private void updateCustInvoiceTableCovStatus(TmpDataAreaRecIdFilter _filter)
    {
        CustInvoiceTable custInvoiceTable;

        custInvoiceTable.skipDatabaseLog(true);
        custInvoiceTable.skipDataMethods(true);
        custInvoiceTable.skipEvents(true);

        update_recordset custInvoiceTable
            setting CovStatus = 1
            exists join _filter
                where custInvoiceTable.RecId == _filter.RefRecId
                    && _filter.RefTableId == tableNum(CustInvoiceTable)
                    && _filter.RefDataAreaId == curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovRows(AllNew _allNew, TmpDataAreaRecIdFilter _filter)
    {
        if (_allNew == AllNew::Total)
        {
            LedgerCov::deleteForTransTableId(tableNum(CustInvoiceTable));
        }
        else
        {
            LedgerCov::deleteForTransTableIdAndFilter(tableNum(CustInvoiceTable), _filter);

            CustInvoiceTable custInvoiceTable;
            LedgerCov ledgerCov = LedgerCov::initializeForSetBasedDelete();

            delete_from ledgerCov
                where ledgerCov.TransTableId == tableNum(CustInvoiceTable)
                exists join custInvoiceTable
                    where custInvoiceTable.Posted == NoYes::Yes
                        && ledgerCov.TransRecId == custInvoiceTable.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovDocumentRows(AllNew _allNew, TmpDataAreaRecIdFilter _filter)
    {
        if (_allNew == AllNew::Total)
        {
            LedgerCovDocument::deleteForTransTableId(tableNum(CustInvoiceTable));
        }
        else
        {
            LedgerCovDocument::deleteForTransTableIdAndFilter(tableNum(CustInvoiceTable), _filter);

            CustInvoiceTable custInvoiceTable;
            LedgerCovDocument ledgerCovDocument = LedgerCovDocument::initializeForSetBasedDelete();

            delete_from ledgerCovDocument
                where ledgerCovDocument.TransTableId == tableNum(CustInvoiceTable)
                exists join custInvoiceTable
                    where custInvoiceTable.Posted == NoYes::Yes
                        && ledgerCovDocument.TransRecId == custInvoiceTable.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePostedRecordsFromPayPred</Name>
				<Source><![CDATA[
    private void deletePostedRecordsFromPayPred()
    {
        if (CashflowInsightsActivation::isPayPredIntegrationActive())
        {
            Query::delete_from(this.buildDeleteRecordsRelatedToPostedInvoicesQuery(tableNum(PayPredProjectedInvoice),
                fieldNum(PayPredProjectedInvoice, SourceTableId),
                fieldNum(PayPredProjectedInvoice, SourceRecId)), true, true, true);

            Query::delete_from(this.buildDeleteRecordsRelatedToPostedInvoicesQuery(tableNum(PayPredPredictionResult),
                fieldNum(PayPredPredictionResult, SourceTableId),
                fieldNum(PayPredPredictionResult, SourceRecId)), true, true, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeleteRecordsRelatedToPostedInvoicesQuery</Name>
				<Source><![CDATA[
    private Query buildDeleteRecordsRelatedToPostedInvoicesQuery(TableId _deleteTable, FieldId _sourceTablId, FieldId _sourceRecid)
    {
        Query q = new Query();
        QueryBuildDataSource qbdsProjectedInvoice = q.addDataSource(_deleteTable);
        qbdsProjectedInvoice.addRange(_sourceTablId).value(queryValue(tableNum(CustInvoiceTable)));

        QueryBuildDataSource qbdsSalesTable = qbdsProjectedInvoice.addDataSource(tableNum(CustInvoiceTable));
        qbdsSalesTable.addLink(_sourceRecid, fieldNum(CustInvoiceTable, RecId));
        qbdsSalesTable.joinMode(JoinMode::ExistsJoin);

        qbdsSalesTable.addRange(fieldNum(CustInvoiceTable, Posted)).value(queryValue(NoYes::Yes));

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void insertLedgerCovDocumentRows(TmpDataAreaRecIdFilter _filter)
    {
        LedgerCovDocument ledgerCovDocument;
        CustInvoiceTable custInvoiceTable;
        CustTrans custTrans;
        CustTable custTable;
        DirPartyTable dirPartyTable;

        TableId custInvoiceTableTableId = tableNum(CustInvoiceTable);
        LedgerCovDocumentType type = LedgerCovDocumentType::CustInvoiceTable;
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();
        Voucher voucher;

        insert_recordset ledgerCovDocument
            (TransTableId,
            TransRecId,
            TransDate,
            Type,
            AccountingCurrency,
            Number,
            Voucher,
            AccountNumber,
            DueDate,
            AccountName)
            select custInvoiceTableTableId,
                RecId,
                InvoiceDate,
                type,
                accountingCurrency,
                InvoiceId,
                voucher,
                OrderAccount,
                DueDate
                from custInvoiceTable
            join _filter
                where custInvoiceTable.TableId == _filter.RefTableId
                    && custInvoiceTable.RecId == _filter.RefRecId
            join custTable
                 where custTable.AccountNum == custInvoiceTable.OrderAccount
            outer join Name
                from dirPartyTable
                    where dirPartyTable.RecId == custTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The document name.
    /// </summary>
    /// <returns>The document name.</returns>
    public str getDocumentName()
    {
        return "@SYS98630";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// The number of the document.
    /// </summary>
    /// <param name = "_tableId">Identifies the document table.</param>
    /// <param name = "_recId">Identifies the row of the document.</param>
    /// <returns>The number of the document.</returns>
    public Name getDocumentNum(TableId _tableId, RecId _recId)
    {
        Name documentNum;

        if (_tableId == tableNum(CustInvoiceTable))
        {
            CustInvoiceTable custInvoiceTable = CustInvoiceTable::findRecId(_recId);
            documentNum = custInvoiceTable.InvoiceId;
        }

        return documentNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>