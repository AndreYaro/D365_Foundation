<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_KanbanJobPickingList</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventMovementFactoryAttribute(tableStr(KanbanJobPickingList))]
class InventMov_KanbanJobPickingList extends InventMovement
{
    KanbanJobPickingList        kanbanJobPickingList;
    KanbanJobPickingListType    kanbanJobPickingListType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the balance sheet account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the inventory production issue accounts for posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (!cacheAccountBalanceSheet)
        {
            ProdGroup prodGroup = kanbanJobPickingList.kanban().prodGroup();

            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (prodGroup)
                {
                    cacheAccountBalanceSheet = prodGroup.IssueLedgerDimension;
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::ProdIssue,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().itemGroupId());
                }
            }
            else
            {
                cacheAccountBalanceSheet = prodGroup &&
                                        (prodGroup.IssueLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                        prodGroup.IssueLedgerDimension :
                                        InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdIssue));
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the operations account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use a value of
    ///    <c>InventAccountType::ProdIssueOffsetAccount</c> for posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (!cacheAccountOperations)
        {
            ProdGroup prodGroup = kanbanJobPickingList.kanban().prodGroup();

            cacheAccountOperations = prodGroup &&
                                    (prodGroup.IssueOffsetLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                        prodGroup.IssueOffsetLedgerDimension :
                                        InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdIssueOffsetAccount));
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the physical account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use a value of <c>InventAccountType::ProdPicklist</c>
    ///    for posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountPhysical()
    {
        if (!cacheAccountPhysical)
        {
            ProdGroup prodGroup = kanbanJobPickingList.kanban().prodGroup();

            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (prodGroup)
                {
                    cacheAccountPhysical = prodGroup.PicklistLedgerDimension;
                }
                else
                {
                    cacheAccountPhysical = InventPosting::itemExtendParm_CN(
                        InventAccountType::ProdPicklist,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().itemGroupId());
                }
            }
            else
            {
                cacheAccountPhysical = prodGroup &&
                                (prodGroup.PicklistLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                prodGroup.PicklistLedgerDimension :
                                InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdPicklist));
            }
        }

        return cacheAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assemblyInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the assembly inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <returns>
    ///    The ID of the assembly inventory transaction originator that corresponds to the movement.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventTransOriginId assemblyInventTransOriginId()
    {
        InventTransOriginId assemblyInventTransOriginId;

        KanbanJob kanbanJob = kanbanJobPickingList.kanbanJob();

        if (kanbanJob.type().mustBeInventoryControlled())
        {
            assemblyInventTransOriginId = InventTransOriginKanbanJobProcess::findInventTransOriginId(kanbanJob.RecId);
        }

        return assemblyInventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnSupermarket</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a movement can have an <c>InventDimId</c> value that represents a kanban supermarket.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public boolean canBeOnSupermarket()
    {
        return kanbanJobPickingList.FlushingPrinciple == FlushingPrincipKanban::Empty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveReservedWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the movement type can have WHS work created that takes over reserving the lower levels of the hierarchy.
    /// </summary>
    /// <returns>
    /// This method return true for this type of movement if the movement item is WHS enabled.
    /// </returns>
    public boolean canHaveReservedWork()
    {
        return this.isItemWHSEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && kanbanJobPickingList.RecId)
        {
            InventTransOriginKanbanJobPickList::writeOriginOwnerRelationship(kanbanJobPickingList.RecId, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public void deleteOriginOwnerRelationship()
    {
        if (kanbanJobPickingList)
        {
            InventTransOriginKanbanJobPickList::deleteOwnerRelationship(kanbanJobPickingList.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the postal delivery address of the inventory movement.
    /// </summary>
    /// <returns>
    /// An ID of a <c>LogisticsPostalAddress</c> record; otherwise, 0.
    /// </returns>
    /// <remarks>
    /// Only used for shipping deliveries such as sales orders and transfer orders.
    /// </remarks>
    protected LogisticsPostalAddressRecId deliveryPostalAddress()
    {
        return kanbanJobPickingList.inventDim().inventLocation().logisticsPostalAddress().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an <c>InventDimId</c> value.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimId</c> value.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base method. Use the <c>InventDimId</c> field from the
    ///    <c>KanbanJoPickingListb</c> table.
    /// </remarks>
    public InventDimId inventDimId()
    {
        return kanbanJobPickingList.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginKanbanJobPickList::findInventTransOriginId(kanbanJobPickingList.RecId);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>ItemId</c> value of a movement value.
    /// </summary>
    /// <returns>
    ///    An item number.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base method. Use the <c>ItemId</c> field from the
    ///    <c>KanbanJobPickingList</c> table.
    /// </remarks>
    public ItemId itemId()
    {
        return kanbanJobPickingList.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the quarantine control is required.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(
        KanbanJobPickingList    _kanbanJobPickingList,
        InventType              _inventType = KanbanJobPickingListType::construct(_kanbanJobPickingList))
    {
        kanbanJobPickingList     = _kanbanJobPickingList;
        kanbanJobPickingListType = _inventType as KanbanJobPickingListType;

        if (!kanbanJobPickingListType)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super(kanbanJobPickingList,_inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an inventory movement from the original <c>KanbanJobPickingList</c> table buffer.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventMovement</c> class if the specified record is in the database;
    ///    otherwise, null.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventMovement newMovement_Orig()
    {
            return kanbanJobPickingList.RecId
                ? new InventMov_KanbanJobPickingList(kanbanJobPickingList.orig(),kanbanJobPickingList.orig().type())
                : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the physical offset account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use a value of
    ///    <c>InventAccountType::ProdPicklistOffsetAccount</c> for posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount offsetAccountPhysical()
    {
        if (!cacheOffsetAccountPhysical)
        {
            ProdGroup prodGroup = kanbanJobPickingList.kanban().prodGroup();

            cacheOffsetAccountPhysical = prodGroup &&
                                        (prodGroup.PickListOffsetLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                            prodGroup.PickListOffsetLedgerDimension :
                                            InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdPicklistOffsetAccount));
        }

        return cacheOffsetAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the balance sheet ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use a value of <c>LedgerPostingType::ProdIssue</c> for
    ///    posting.
    /// </remarks>
    public LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::ProdIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOffsetPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the physical offset ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use a value of
    ///    <c>LedgerPostingType::ProdPicklistOffsetAccount</c> for posting.
    /// </remarks>
    public LedgerPostingType postingOffsetPhysical()
    {
        return LedgerPostingType::ProdPicklistOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the operations ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use a value of
    ///    <c>LedgerPostingType::ProdIssueOffsetAccount</c> for posting.
    /// </remarks>
    public LedgerPostingType postingOperations()
    {
        return LedgerPostingType::ProdIssueOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the physical ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the <c>LedgerPostingType::ProdPicklist</c> for
    ///    posting.
    /// </remarks>
    public LedgerPostingType postingPhysical()
    {
        return LedgerPostingType::ProdPicklist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the physical quantity that remains.
    /// </summary>
    /// <returns>
    ///    The physical quantity that remains.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventQty remainPhysical()
    {
        return this.transQty() - this.transIdSum().physical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the inventory dimension of the <c>KanbanJobPickingList</c> table.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The new <c>InventDimId</c> value.
    /// </param>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public void setInventDimId(InventDimId _inventDimId)
    {
        kanbanJobPickingList.setInventDimId(_inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the transaction quantity in the <c>KanbanJobPickingList</c> table.
    /// </summary>
    /// <param name="_qtyInvent">
    ///    The new transaction quantity stated in the inventory unit.
    /// </param>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public void setTransQty(InventQty _qtyInvent)
    {
        kanbanJobPickingList.Quantity = -_qtyInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction date for the movement.
    /// </summary>
    /// <returns>
    ///    The transaction date.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public TransDate transDate()
    {
        return DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(kanbanJobPickingList.MaterialDateTime,DateTimeUtil::getCompanyTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the issue transaction ID from the <c>KanbanJobPickingList</c> table.
    /// </summary>
    /// <returns>
    ///    The issue inventory blocking transaction ID.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventTransId transId()
    {
        return kanbanJobPickingList.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory transaction quantity.
    /// </summary>
    /// <returns>
    ///    The inventory transaction quantity.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventQty transQty()
    {
        return -kanbanJobPickingList.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction reference for the specified <c>KanbanJob</c> record.
    /// </summary>
    /// <returns>
    ///    A transaction reference.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventTransRefId transRefId()
    {
        return kanbanJobPickingList.kanban().KanbanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the transaction type of the movement.
    /// </summary>
    /// <returns>
    ///    An <c>InventTransType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventTransType transType()
    {
        return InventTransType::KanbanJobPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsShipmentGroupingRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the grouping reference ID to be used with output orders.
    /// </summary>
    /// <returns>
    ///    The grouping reference ID.
    /// </returns>
    public WMSShipmentGroupingRefId wmsShipmentGroupingRefId()
    {
        InventMovement  inventMovement = kanbanJobPickingListType.wmsGroupingSourceRequirementMovement();

        return inventMovement ? inventMovement.transRefId() : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsShipmentGroupingTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the grouping transaction type to be used with output orders.
    /// </summary>
    /// <returns>
    ///    The grouping transaction type.
    /// </returns>
    public WMSShipmentGroupingTransType wmsShipmentGroupingTransType()
    {
        InventMovement  inventMovement = kanbanJobPickingListType.wmsGroupingSourceRequirementMovement();

        return inventMovement ? inventMovement.transType() : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromKanbanJobPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_KanbanJobPickingList</c> class based on the
    ///    specified record.
    /// </summary>
    /// <param name="_kanbanJobPickingList">
    ///    The <c>KanbanJobPickingList</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_KanbanJobPickingList</c> class.
    /// </returns>
    public static InventMov_KanbanJobPickingList newFromKanbanJobPickingList(KanbanJobPickingList _kanbanJobPickingList)
    {
        return new InventMov_KanbanJobPickingList(_kanbanJobPickingList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>