<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanBoardTransferJobList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanBoardTransferJobList</c> class is a helper class that manages the kanban transfer
///    jobs list in kanban board forms.
/// </summary>
public class KanbanBoardTransferJobList
{
    FormRun     formRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCancelEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether one or more of the selected kanban jobs can be canceled.
    /// </summary>
    /// <returns>
    ///    true if all the selected jobs can be canceled; otherwise, false.
    /// </returns>
    public boolean checkCancelEnabled()
    {
        return this.checkStatusReset(LeanKanbanJobStatus::NotPlanned);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompleteTransferEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the selected transfer kanban jobs can be changed to completed status.
    /// </summary>
    /// <param name="_selectedJobs">
    ///    A <c>container</c> object that holds the <c>KanbanBoardTmpTransportJob</c> or <c>KanbanJob</c>
    ///    records; optional.
    /// </param>
    /// <returns>
    ///    true if the selected kanban jobs are in not planned or in progress status; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The container has elements that are neither <c>KanbanBoardTmpTransportJob</c> or <c>KanbanJob</c>
    ///    records.
    /// </exception>
    public boolean checkCompleteTransferEnabled(container _selectedJobs = conNull())
    {
        boolean                         result;
        container                       selectedJobs;

        if (prmisDefault(_selectedJobs))
        {
            FormDataSource kanbanBoardTmpTransferJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));
            selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpTransferJob_ds);
        }
        else
        {
            selectedJobs = _selectedJobs;
        }

        if (selectedJobs)
        {
            result = true;
            int i = 1;

            while (   i <= conLen(selectedJobs)
                   && result)
            {
                Common common = conPeek(selectedJobs,i);
                switch (common.TableId)
                {
                    case tableNum(KanbanBoardTmpTransferJob):
                        KanbanBoardTmpTransferJob kanbanBoardTmpTransferJob = common;
                        result = result
                                                                              && kanbanBoardTmpTransferJob
                                                                              && (kanbanBoardTmpTransferJob.Status == LeanKanbanJobStatus::NotPlanned
                                                                              ||  kanbanBoardTmpTransferJob.Status == LeanKanbanJobStatus::InProgress);
                        break;
                    case tableNum(KanbanJob):
                        KanbanJob kanbanJob = common;
                        result = result
                                              && kanbanJob
                                              && (kanbanJob.Status == LeanKanbanJobStatus::NotPlanned
                                              ||  kanbanJob.Status == LeanKanbanJobStatus::InProgress);
                        break;
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
                i++;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmptyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that one or more of the selected transfer kanban jobs can be emptied.
    /// </summary>
    /// <param name="_selectedJobs">
    ///    A container that holds the <c>KanbanBoardTmpTransportJob</c> or <c>KanbanJob</c> records; optional.
    /// </param>
    /// <returns>
    ///    true if the selected kanban jobs can be emptied; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The container has elements that are neither <c>KanbanBoardTmpTransportJob</c> nor <c>KanbanJob</c>
    ///    records.
    /// </exception>
    public boolean checkEmptyEnabled(container _selectedJobs = conNull())
    {
        KanbanJob                       kanbanJob;
        boolean                         result;
        container                       selectedJobs;
        int                             i;

        if (prmisDefault(_selectedJobs))
        {
            FormDataSource kanbanBoardTmpTransferJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));
            selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpTransferJob_ds);
        }
        else
        {
            selectedJobs = _selectedJobs;
        }

        if (selectedJobs)
        {
            result = true;

            for (i=1;i<=conLen(selectedJobs);i++)
            {
                Common common = conPeek(selectedJobs,i);
                switch (common.TableId)
                {
                    case tableNum(KanbanBoardTmpTransferJob):
                        KanbanBoardTmpTransferJob kanbanBoardTmpTransferJob = common;
                        kanbanJob = KanbanJob::find(kanbanBoardTmpTransferJob.Job);
                        break;
                    case tableNum(KanbanJob):
                        kanbanJob                 = common;
                        break;
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }

                Kanban kanban = kanbanJob.kanban();
                result = kanban.RecId  != 0
                         && kanban.Status == LeanKanbanStatus::Received;

                if (!result)
                {
                    break;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoPendingPeggedJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are no pending pegged kanban jobs.
    /// </summary>
    /// <returns>
    /// True if there are no pegged jobs or all of the pegged jobs are completed, otherwise false.
    /// </returns>
    public boolean checkNoPendingPeggedJobs()
    {
        FormDataSource kanbanJobTmpPegging_ds = formRun.dataSource(tableStr(KanbanJobTmpPegging));

        return !kanbanJobTmpPegging_ds.findValue(fieldnum(KanbanJobTmpPegging, JobStatus), SysQuery::valueNot(LeanKanbanJobStatus::Completed));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrioritizeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the priority of one or more of the selected kanban jobs can be toggled.
    /// </summary>
    /// <returns>
    ///    true if all the selected jobs can be canceled; otherwise, false.
    /// </returns>
    public boolean checkPrioritizeEnabled()
    {
        FormDataSource kanbanBoardTmpTransferJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));
        container selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpTransferJob_ds,
                                                                                       fieldNum(KanbanBoardTmpTransferJob,Job));

        return (selectedJobs != conNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRegistrationMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a specified kanban card can be used with the specified registration mode.
    /// </summary>
    /// <param name="_kanbanCardId">
    ///    A <c>KanbanCardId</c> string value.
    /// </param>
    /// <param name="_registrationMode">
    ///    A <c>KanbanScanMode</c> enumeration value.
    /// </param>
    /// <param name="_messageBoard">
    ///    The message board to use to show error messages.
    /// </param>
    /// <returns>
    ///    true if the card can be used with the registration mode; otherwise, false.
    /// </returns>
    public boolean checkRegistrationMode(
        KanbanCardId               _kanbanCardId,
        KanbanScanMode             _registrationMode,
        KanbanBoardTmpMessageBoard _messageBoard)
    {
        Kanban      kanban    = Kanban::findKanbanCardId(_kanbanCardId);
        KanbanJob   kanbanJob = kanban.currentJob();
        boolean     result    = kanban.RecId != 0 && kanbanJob.RecId != 0;

        if (result)
        {
            switch (_registrationMode)
            {
                case KanbanScanMode::StartTransfer:
                    result = result && this.checkStartTransferEnabled([kanbanJob]);
                    break;
                case KanbanScanMode::EndTransfer:
                    result = result && this.checkCompleteTransferEnabled([kanbanJob]);
                    break;
                case KanbanScanMode::Empty:
                    result = result && this.checkEmptyEnabled([kanbanJob]);
                    break;
                case KanbanScanMode::SelectKanban:
                    result = true;
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        if (!result)
        {
            _messageBoard.error(strFmt("@SYS314195",_kanbanCardId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRevertStatusEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates that the kanban job status for one or more of the selected kanban jobs that can be
    ///    reverted.
    /// </summary>
    /// <returns>
    ///    true if the kanban job status can be reverted; otherwise, false.
    /// </returns>
    public boolean checkRevertStatusEnabled()
    {
        return this.checkStatusReset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSelectedJobWithShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the selected transfer kanban job has a shipment.
    /// </summary>
    /// <returns>
    ///    true if the selected kanban job has a shipment; otherwise, false.
    /// </returns>
    public boolean checkSelectedJobWithShipment()
    {
        boolean                         result;

        FormDataSource kanbanBoardTmpTransferJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));
        container selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpTransferJob_ds,
                                                                                       fieldNum(KanbanBoardTmpTransferJob,ShipmentId));
        // There is one selected job with shipment (retrieved field)
        if (   selectedJobs
            && conLen(selectedJobs) == 1
            && conPeek(selectedJobs,1))
        {
            result = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSendShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the selected transfer kanban job has a shipment that can be shipped.
    /// </summary>
    /// <returns>
    ///    true if the selected kanban job has a shipment that can be shipped; otherwise, false.
    /// </returns>
    public boolean checkSendShipment()
    {
        boolean                         result;

        FormDataSource kanbanBoardTmpTransferJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));
        container selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpTransferJob_ds,
                                                                                       fieldNum(KanbanBoardTmpTransferJob,ShipmentId));
        // There is one selected job with shipment (retrieved field)
        if (   selectedJobs
            && conLen(selectedJobs) == 1)
        {
            WMSShipmentId wmsShipmentId = conPeek(selectedJobs,1);
            if (wmsShipmentId)
            {
                WMSShipment wmsShipment = WMSShipment::find(wmsShipmentId);

                if (wmsShipment.canShipFromStatus())
                {
                    result = true;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStartTransferEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the selected transfer kanban jobs can be changed to in progress status.
    /// </summary>
    /// <param name="_selectedJobs">
    ///    A <c>container</c> object that holds <c>kanbanBoardTmpTransferJob</c> or <c>KanbanJob</c> records;
    ///    optional.
    /// </param>
    /// <returns>
    ///    true if the selected kanban jobs are in not planned status; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The container has elements that are neither <c>kanbanBoardTmpTransferJob</c> or <c>KanbanJob</c>
    ///    records.
    /// </exception>
    public boolean checkStartTransferEnabled(container _selectedJobs = conNull())
    {
        boolean                         result;
        container                       selectedJobs;
        int                             i;

        if (prmisDefault(_selectedJobs))
        {
            FormDataSource kanbanBoardTmpTransferJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));
            selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpTransferJob_ds);
        }
        else
        {
            selectedJobs = _selectedJobs;
        }

        if (selectedJobs)
        {
            result = true;

            for (i=1;i<=conLen(selectedJobs);i++)
            {
                Common common = conPeek(selectedJobs,i);
                switch (common.TableId)
                {
                    case tableNum(KanbanBoardTmpTransferJob):
                        KanbanBoardTmpTransferJob kanbanBoardTmpTransferJob = common;
                        result = result && kanbanBoardTmpTransferJob.Status == LeanKanbanJobStatus::NotPlanned;
                        break;
                    case tableNum(KanbanJob):
                        KanbanJob kanbanJob = common;
                        result = result && kanbanJob.Status == LeanKanbanJobStatus::NotPlanned;
                        break;
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }

                if (!result)
                {
                    break;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatusReset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the status of one or more of the selected jobs can be reset to the specified
    ///    status.
    /// </summary>
    /// <param name="_leanKanbanJobStatus">
    ///    The target status; optional.
    /// </param>
    /// <returns>
    ///    true if the status can be reset; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Call this method without a parameter to reset each job by one step.
    /// </remarks>
    protected boolean checkStatusReset(LeanKanbanJobStatus _leanKanbanJobStatus = LeanKanbanJobStatus::Completed)
    {
        boolean                         result;
        int                             i;

        FormDataSource kanbanBoardTmpTransferJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));
        container selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpTransferJob_ds,
                                                                                       fieldNum(KanbanBoardTmpTransferJob,Job));

        if (selectedJobs)
        {
            result = true;
            for (i=1;i<=conLen(selectedJobs);i++)
            {
                KanbanJob           kanbanJob           = KanbanJob::find(conPeek(selectedJobs,i));
                KanbanJobStatus     kanbanJobStatus     = kanbanJob.status();
                LeanKanbanJobStatus leanKanbanJobStatus = prmisDefault(_leanKanbanJobStatus) ? kanbanJobStatus.prevStatus() : _leanKanbanJobStatus;
                result = result
                                                         && kanbanJob
                                                         && kanbanJob.status().isStatusResetAllowed(leanKanbanJobStatus,true);
                if (!result)
                {
                    break;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePickingListEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>InventTransPick</c> form can be opened for the selected transfer kanban
    ///    jobs.
    /// </summary>
    /// <returns>
    ///    true if the form can be opened; otherwise, false.
    /// </returns>
    public boolean checkUpdatePickingListEnabled()
    {
        boolean                         result;
        int                             i;

        FormDataSource kanbanBoardTmpTransferJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));
        container selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpTransferJob_ds,
                                                                                       fieldNum(KanbanBoardTmpTransferJob,Job));

        if (selectedJobs)
        {
            result = true;
            for (i=1;i<=conLen(selectedJobs);i++)
            {
                KanbanJob kanbanJob = KanbanJob::find(conPeek(selectedJobs,i));
                result   =    result
                           && kanbanJob.Status != LeanKanbanJobStatus::Completed
                           && kanbanJob.type().mustBeInventoryControlledIssue();
                if (!result)
                {
                    break;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateRegistrationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the <c>InventTransRegister</c> form can be opened for the selected transfer kanban jobs.
    /// </summary>
    /// <returns>
    ///    true if the form can be opened; otherwise, false.
    /// </returns>
    public boolean checkUpdateRegistrationEnabled()
    {
        boolean                         result;

        FormDataSource kanbanBoardTmpTransferJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));
        container selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpTransferJob_ds,
                                                                                       fieldNum(KanbanBoardTmpTransferJob,Job));

        if (selectedJobs)
        {
            if (conLen(selectedJobs) == 1)
            {
                KanbanJob kanbanJob = KanbanJob::find(conPeek(selectedJobs,1));
                result   =    kanbanJob.Status != LeanKanbanJobStatus::Completed
                           && kanbanJob.type().mustBeInventoryControlledReceipt();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEventKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates event kanbans for selected kanban jobs.
    /// </summary>
    public void createEventKanbans()
    {
        FormDataSource kanbanBoardTmpTransferJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));

        // Get the first multi selection or single selection record
        KanbanBoardTmpTransferJob kanbanBoardTmpTransferJob = kanbanBoardTmpTransferJob_ds.getFirst(1)
                                                                  ? kanbanBoardTmpTransferJob_ds.getFirst(1)
                                                                  : kanbanBoardTmpTransferJob_ds.cursor();

        while (kanbanBoardTmpTransferJob)
        {
            // create event kanbans as required
            ReqEventProcessKanban::newStandard(kanbanBoardTmpTransferJob.kanbanJob(), true).runOperation();
            kanbanBoardTmpTransferJob = kanbanBoardTmpTransferJob_ds.getNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    private FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printKanbanCards</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints kanban cards for the selected jobs in the transfer job list.
    /// </summary>
    /// <param name="_showDialog">
    /// A Boolean value that indicates whether the print dialog box must be displayed.
    /// </param>
    public void printKanbanCards(boolean _showDialog = true)
    {
        int             i;
        container       selectedJobs  = this.selectedJobs();

        List            kanbanIdList  = new List(Types::String);
        KanbanPrinter   kanbanPrinter = KanbanPrinter::construct();

        if (selectedJobs)
        {
            for (i = 1; i <= conLen(selectedJobs); i++)
            {
                container selectedJob = conPeek(selectedJobs,i);
                Kanban kanban = Kanban::findKanbanJobRecId(conPeek(
                                                                           selectedJob,1
                                                                           ));
                kanbanIdList.addEnd(kanban.KanbanId);
            }

            kanbanPrinter.printKanbans(kanbanIdList,'',_showDialog,KanbanPrintLocation::Default);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints kanban cards for the selected jobs in the transfer job list.
    /// </summary>
    /// <param name="_showDialog">
    /// A Boolean value that indicates whether the print dialog box must be displayed.
    /// </param>
    public void printPickingList(boolean _showDialog = true)
    {
        int             i;
        container       selectedJobs  = this.selectedJobs();
        List            jobsRecIdList = new List(Types::Int64);
        KanbanPrinter   kanbanPrinter = KanbanPrinter::construct();

        if (selectedJobs)
        {
            for (i = 1; i <= conLen(selectedJobs); i++)
            {
                container selectedJob = conPeek(selectedJobs,i);
                jobsRecIdList.addEnd(conPeek(
                                             selectedJob,1
                                             ));
            }

            kanbanPrinter.printPickingList(jobsRecIdList,'',_showDialog,KanbanPrintLocation::Default);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a container that contains selected kanban job record IDs.
    /// </summary>
    /// <returns>
    /// A container of containers that contain selected kanban job and kanban record IDs.
    /// </returns>
    public container selectedJobs()
    {
        FormDataSource kanbanBoardTmpTransferJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));

        return KanbanBoardForm::selectedRecords(
                                                kanbanBoardTmpTransferJob_ds,
                                                0,
                                                [
                                                fieldNum(KanbanBoardTmpTransferJob,Job)
                                                ,
                                                fieldNum(KanbanBoardTmpTransferJob,Kanban)
                                                ]
                                                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanBoardTransferJobList construct()
    {
        return new KanbanBoardTransferJobList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a helper class for the <c>KanbanBoardForm</c> class that manages the kanban transfer jobs
    ///    list.
    /// </summary>
    /// <param name="_formRun">
    ///    A <c>FormRun</c> object that represents the kanban board form.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>KanbanBoardTransportJobList</c> class.
    /// </returns>
    public static KanbanBoardTransferJobList newForm(FormRun _formRun)
    {
        if (!_formRun)
        {
            return null;
        }

        KanbanBoardTransferJobList kanbanBoardTransferJobList = KanbanBoardTransferJobList::construct();
        kanbanBoardTransferJobList.parmFormRun(_formRun);

        return kanbanBoardTransferJobList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
