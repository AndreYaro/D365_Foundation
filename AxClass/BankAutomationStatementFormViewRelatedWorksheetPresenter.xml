<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAutomationStatementFormViewRelatedWorksheetPresenter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankAutomationStatementFormViewRelatedWorksheetPresenter</c> class is the helper class for controlling the
/// form contrls of RelatedWorksheetTabPage of the <c>BankAutomationStatementForm</c> form.
/// </summary>
internal final class BankAutomationStatementFormViewRelatedWorksheetPresenter
{
    private FormRun formRun;
    private FormDataSource dsReconciliationHeader;
    private boolean isToExpandTabPage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(FormRun _formRun)
    {
        formRun = _formRun;
        dsReconciliationHeader = formRun.dataSource(formDataSourceStr(BankAutomationStatementForm, BankReconciliationHeader));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of <c>BankAutomationStatementFormViewRelatedWorksheetPresenter</c>.
    /// </summary>
    /// <param name="_formRun">The form run instance of <c>BankAutomationStatementForm</c>.</param>
    /// <returns>Returns instance of <c>BankAutomationStatementFormViewRelatedWorksheetPresenter</c>.</returns>
    internal static BankAutomationStatementFormViewRelatedWorksheetPresenter construct(FormRun _formRun)
    {
        return new BankAutomationStatementFormViewRelatedWorksheetPresenter(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshRelatedWorksheetQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the related worksheet query for <c>BankAutomationStatementForm</c> statement selection changing.
    /// </summary>
    /// <param name="_statement">The statement to refresh related worksheet query.</param>
    internal void refreshRelatedWorksheetQuery(BankStmtISOAccountStatement _statement)
    {
        QueryBuildDataSource qbds = dsReconciliationHeader.queryBuildDataSource();
        qbds.clearRanges();
        qbds.clearLinks();

        List statementIncludeReconciliationHeaderList = BankAutomationStatementFormViewRelatedWorksheetPresenter::getAllReconciliationHeaderListByStatement(_statement);
        if (statementIncludeReconciliationHeaderList.empty())
        {
            isToExpandTabPage = false;
            qbds.addRange(fieldNum(BankReconciliationHeader, RecId)).value(queryValue(0));
        }
        else
        {
            isToExpandTabPage = true;
            ListEnumerator enumerator = statementIncludeReconciliationHeaderList.getEnumerator();
            while (enumerator.moveNext())
            {
                RecId reconciliationHeaderRecId = enumerator.current();
                qbds.addRange(fieldNum(BankReconciliationHeader, RecId)).value(queryValue(reconciliationHeaderRecId));
            }
        }

        dsReconciliationHeader.executeQuery();
        dsReconciliationHeader.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandCollapseTabPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expands or collapses the RelatedWorksheetTabPage of the <c>BankAutomationStatementForm</c> form.
    /// </summary>
    internal void expandCollapseTabPage()
    {
        FormTabPageControl relatedWorksheetTabPageControl = formRun.design().controlName(formControlStr(BankAutomationStatementForm, RelatedWorksheetTabPag));
        if (isToExpandTabPage)
        {
            relatedWorksheetTabPageControl.expand();
        }
        else
        {
            relatedWorksheetTabPageControl.collapse();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllReconciliationHeaderListByStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reconciliation header list that the statement is reconcilied or included within.
    /// </summary>
    /// <param name = "_statement">The statement to get the reconciliation header list.</param>
    /// <returns>The reconciliation header list that the statement is reconcilied or included within.</returns>
    internal static List getAllReconciliationHeaderListByStatement(BankStmtISOAccountStatement _statement)
    {
        List reconciliationHeaderList = BankAutomationStatementFormViewRelatedWorksheetPresenter::getReconciledHeaderListByStatementHeader(_statement);
        BankReconciliationHeader openReconciliationHeader = BankReconciliationHeader::findActiveHeaderByAccountId(_statement.BankAccountTable);

        TransDateTime cutoffDateTime = openReconciliationHeader.getCutOffDateTime();
        boolean isFromDateTimeCoveredByOpenWorksheet = cutoffDateTime >= _statement.FromDateTime;

        if (_statement.Status != BankStatementStatus::Reconciled && isFromDateTimeCoveredByOpenWorksheet)
        {
            reconciliationHeaderList.addStart(openReconciliationHeader.RecId);
        }
        return reconciliationHeaderList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReconciledHeaderListByStatementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reconciliation header list that the statement line is reconcilied within, open reconciliation header is excluded.
    /// </summary>
    /// <param name = "_statement">The statement to get the reconciliation header list.</param>
    /// <returns>The reconciled reconciliation header list.</returns>
    internal static List getReconciledHeaderListByStatementHeader(BankStmtISOAccountStatement _statement)
    {
        BankReconciliationHeader reconciliationHeader;
        BankReconciliationMatching reconciliationMatching;
        BankReconciliationMatchingItem reconciliationMatchingItem;
        BankStmtISOReportEntry statementLine;

        List reconciliationHeaderList = new List(Types::Int64);

        while select RecId from reconciliationHeader
            where reconciliationHeader.IsReconciled == NoYes::Yes
                && reconciliationHeader.AccountId == _statement.BankAccountTable
            join BankReconciliationHeader from reconciliationMatching
            group by reconciliationMatching.BankReconciliationHeader
            where reconciliationMatching.BankReconciliationHeader == reconciliationHeader.RecId
                && reconciliationMatching.Cancelled == NoYes::No
            join RecId from reconciliationMatchingItem
                where reconciliationMatchingItem.BankReconciliationMatching == reconciliationMatching.RecId
            join RecId from statementLine
                where reconciliationMatchingItem.BankStmtISOReportEntry == statementLine.RecId
                    && statementLine.BankStmtISOAccountStatement == _statement.RecId
        {
            reconciliationHeaderList.addEnd(reconciliationMatching.BankReconciliationHeader);
        }

        return reconciliationHeaderList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReconciliedLineNumberInReconciliationHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reconcilied line number of the statement in the reconciliation header.
    /// </summary>
    /// <param name = "_reconciliationHeader">The reconciliation header to fetch reconcilied statement line. </param>
    /// <param name = "_statement">The statement to fetch reconcilied statement line. </param>
    /// <returns>The reconcilied line number of the statement in the reconciliation header. </returns>
    internal static int64 getReconciliedLineNumberInReconciliationHeader(BankReconciliationHeader _reconciliationHeader, BankStmtISOAccountStatement _statement)
    {
        BankReconciliationMatching reconciliationMatching;
        BankReconciliationMatchingItem reconciliationMatchingItem;
        BankStmtISOReportEntry statementLine;

        select count(RecId) from statementLine
            where statementLine.BankStmtISOAccountStatement == _statement.RecId
                && statementLine.Reconciled == NoYes::Yes
            join RecId from reconciliationMatchingItem
                where reconciliationMatchingItem.BankStmtISOReportEntry == statementLine.RecId
            join RecId from reconciliationMatching
                where reconciliationMatchingItem.BankReconciliationMatching == reconciliationMatching.RecId
                    && reconciliationMatching.BankReconciliationHeader == _reconciliationHeader.RecId
                    && reconciliationMatching.Cancelled == NoYes::No;

        return statementLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncludedLineNumberInOpenReconciliationHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the included line number of the statement in the open reconciliation header.
    /// </summary>
    /// <param name = "_statement">The statement to fetch included statement line.</param>
    /// <returns>ture if any statement line of this statement is involved in the current open reconciliation; otherwise, false</returns>
    internal static int64 getIncludedLineNumberInOpenReconciliationHeader(BankStmtISOAccountStatement _statement)
    {
        BankReconciliationHeader openReconciliationHeader = BankReconciliationHeader::findActiveHeaderByAccountId(_statement.BankAccountTable);
        TransDateTime cutoffDateTime = openReconciliationHeader.getCutOffDateTime();

        BankStmtISOReportEntry statementLine;

        select count(RecId) from statementLine
            where statementLine.BankStmtISOAccountStatement == _statement.RecId
                && statementLine.BookingDateTime <= cutoffDateTime
                && statementLine.Reconciled == NoYes::No;

        return statementLine.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>