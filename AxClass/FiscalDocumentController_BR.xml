<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller class to print fiscal documents.
/// </summary>
public class FiscalDocumentController_BR extends SrsPrintMgmtFormLetterController implements BatchRetryable
{
    #NFPrinting_BR
    #ISOCountryRegionCodes

    PrintCopyOriginal               printCopyOriginal;
    RecordSortedList                journalList;
    FiscalDocumentContract_BR       fiscalDocumentContract;
    FiscalDocument_BR               fiscalDocument;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        FiscalDocumentPrintJob_BR printJob;
        printCopyOriginal = this.parmArgs().parmEnum();

        if (this.parmArgs().object())
        {
            journalList = this.parmArgs().object();
        }
        else if (this.parmArgs().record())
        {
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }

        journalList.first(fiscaldocument);

        switch (fiscaldocument.RefTableId)
        {
            case tableNum(SalesComplementaryInvoiceHeader):
                GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes(
                    [ [#isoBR, GlobalizationConstants::FeatureReferenceBR00038] ],
                    funcName()
                );
                formLetterReport = new FormLetterReport_SalesComplInvoice();
                break;
            case tableNum(PurchComplementaryInvoiceHeader):
                GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes(
                    [ [#isoBR, GlobalizationConstants::FeatureReferenceBR00024] ],
                    funcName()
                );
                formLetterReport = new FormLetterReport_PurchComplInvoice();
                break;
            case tableNum(InventTransferJour):
                formLetterReport = new InventFormLetterReport_TransfOrderFDoc();
                break;
            case tableNum(TaxFiscalDocument_BR):
                formLetterReport = new FormLetterReport_TaxFiscalDocument_BR();
                break;
        }

        formLetterReport.parmPrintType(printCopyOriginal);

        if (this.parmArgs().caller() && this.parmArgs().caller() is FiscalDocumentPrintJob_BR)
        {
            printJob = this.parmArgs().caller();
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(printJob.parmPrinterSettingsCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(printJob.parmPrinterSettingsOriginal()));
            formLetterReport.parmUsePrintMgmtDestinations(printJob.parmUsePrintManagementDest());
        }
        else
        {
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SRSReportParameters</c> values to the report contract.
    /// </summary>
    protected void preRunModifyContract()
    {
        FiscalEstablishment_BR fiscalEstablishment;

        fiscalDocumentContract = this.parmReportContract().parmRdpContract() as FiscalDocumentContract_BR;

        fiscalEstablishment = FiscalEstablishment_BR::findById(fiscalDocument.FiscalEstablishment);

        if (fiscalEstablishment.EFDocEnvironment == EFDocEnvironment_BR::Testing)
        {
            fiscalDocumentContract.parmEFDocEnvironment(true);
        }
        else
        {
            fiscalDocumentContract.parmEFDocEnvironment(false);
        }

        fiscalDocumentContract.parmRecordId(fiscalDocument.RecId);
        fiscalDocumentContract.parmPrePrintedSecurityForm(fiscalEstablishment.EFDocPrePrintedSecurityForm);
        fiscalDocumentContract.parmMaxDescSizeAdditionaInfFirstPage(#MaxDescSizeAdditionaInfFirstPage);

        if (fiscalDocument.isElectronic())
        {
            fiscalDocumentContract.parmMaxDescSizeAdditionalInformation(#MaxDescSizeAdditionalInformation);
        }
        else
        {
            fiscalDocumentContract.parmMaxDescSizeAdditionalInformation(#MaxNFMemoLines * #MaxNFMemoDescriptionSize);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        PrintMgmtPrintSettingDetail     printSettingDetail;
        Common                          printMgmtReferencedTable;
        boolean                         hasMore;

        if (!journalList)
        {
            throw error("@SYS26348");
        }

        for (hasMore = journalList.first(fiscalDocument);
             hasMore && !this.parmCancelRun();
             hasMore = journalList.next(fiscalDocument))
        {
            if (fiscalDocument.FiscalDocumentAccountType == CustVendType_BR::Vendor)
            {
                printMgmtReferencedTable = VendTable::find(fiscalDocument.FiscalDocumentAccountNum);
            }
            else if (fiscalDocument.FiscalDocumentAccountType == CustVendType_BR::Customer)
            {
                printMgmtReferencedTable = CustTable::find(fiscalDocument.FiscalDocumentAccountNum);
            }

            formLetterReport.loadPrintSettings(fiscalDocument, printMgmtReferencedTable, #FiscalDocumentLanguageID);
            if (formLetterReport.moveNextPrintSetting())
            {
                printSettingDetail = formLetterReport.getCurrentPrintSetting();

                if (fiscalDocument.isElectronic())
                {
                    this.parmReportName(ssrsReportStr(EFDocDANFE_BR, Report));
                }
                else
                {
                    this.parmReportName(ssrsReportStr(FiscalDocument_BR, Report));
                }
                // Reset the data contract so it is created for each document
                contractsInitialized = false;
                this.parmReportRun(null);
                this.parmReportContract(null);

                printSettingDetail.parmReportFormatName(this.parmReportName());
                formLetterReport.parmReportRun().loadSettingDetail(printSettingDetail);
            }
            this.outputReports();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        SrsReportRunController      formLetterController;

        formLetterController = new FiscalDocumentController_BR();

        formLetterController.parmArgs(_args);
        formLetterController.parmReportName(ssrsReportStr(FiscalDocument_BR, Report));
        formLetterController.parmShowDialog(false);
        formLetterController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>