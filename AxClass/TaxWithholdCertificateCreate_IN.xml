<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCertificateCreate_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to create Withhold tax certificate.
/// </summary>
public final class TaxWithholdCertificateCreate_IN extends RunBase
{
    NumberSequenceFormat              format;

    TaxWithholdPrefix_IN              prefix;
    TaxWithholdStartNum_IN            startNum;
    TaxWithholdQty_IN                 qty;
    TaxWithholdComponentGroupRecId_IN componentGroup;

    DialogField                       dialogStartNum;
    DialogField                       dialogQty;
    DialogField                       dialogPrefix;
    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        prefix,
        startNum,
        qty
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates certificate documents.
    /// </summary>
    /// <param name="_certificateNumber">
    /// For Certificate number certificate will be generated.
    /// </param>
    /// <param name="_prefix">
    /// Prefix using in certificate.
    /// </param>
    /// <param name="_startNum">
    /// Start number of certificate documents.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createDocument(
        TaxWithholdCertificateNumber_IN     _certificateNumber,
        TaxWithholdPrefix_IN                _prefix,
        TaxWithholdStartNum_IN              _startNum)
    {
        TaxWithholdCertificatesTable_IN::createCertificate(_certificateNumber,
                                                           this.parmTaxWithholdComponentGroup(),
                                                           _prefix,
                                                           _startNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the dialog fields to <c> DialogRunbase </c>
    /// </summary>
    /// <returns>
    /// An instance of <c>DialogRunbase </c>
    /// </returns>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogPrefix    = dialog.addFieldValue(extendedtypestr(TaxWithholdPrefix_IN), prefix);
        dialogStartNum  = dialog.addFieldValue(extendedtypestr(TaxWithholdStartNum_IN), startNum, "@SYS4083");
        dialogStartNum.lookupButton(0);

        dialogQty       = dialog.addFieldValue(extendedtypestr(TaxWithholdQty_IN), qty, "@SYS14578");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// To get the value from dialog.
    /// </summary>
    /// <returns>
    /// Return true
    /// </returns>
    public boolean getFromDialog()
    {
        prefix      = dialogPrefix.value();
        startNum    = dialogStartNum.value();
        qty         = dialogQty.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdComponentGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdComponentGroupRecId_IN parmTaxWithholdComponentGroup(TaxWithholdComponentGroupRecId_IN _componentGroup = componentGroup)
    {
        componentGroup = _componentGroup;
        return componentGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdPrefix</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdPrefix_IN parmTaxWithholdPrefix(TaxWithholdPrefix_IN _prefix = prefix)
    {
        prefix = _prefix;
        return prefix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdQty_IN parmTaxWithholdQty(TaxWithholdQty_IN _qty = qty)
    {
        qty = _qty;
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdStartNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdStartNum_IN parmTaxWithholdStartNum(TaxWithholdStartNum_IN _startNum = startNum)
    {
        startNum = _startNum;
        return startNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the certificate documents from starting number to given number.
    /// </summary>
    public void run()
    {
        TaxWithholdStartNum_IN  toNumber;
        str                     finalCertificateNumber;
        str                     certificateNumber;
        boolean                 ret = true;

        if (!this.parmTaxWithholdComponentGroup())
        {
            ret = checkFailed(strfmt("@SYS26332", "@GLS5350"));
        }
        toNumber = startNum + qty - 1;

        if (ret)
        {
            while (startNum <= toNumber)
            {
                certificateNumber       = int2str(startNum);
                finalCertificateNumber  = prefix + certificateNumber;
                this.createDocument(finalCertificateNumber, prefix, startNum);
                startNum ++;
            }
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS5486";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        TaxWithholdCertificateCreate_IN    certificateCreate;

        switch (args.dataset())
        {
            case tablenum(TaxWithholdComponentGroupTable_IN) :
                certificateCreate = TaxWithholdCertificateCreate_IN::newCertificateCreate(args.record());
                break;
        }

        if (certificateCreate.prompt())
        {
            certificateCreate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCertificateCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes the  to parm() methods .
    /// </summary>
    /// <param name="_componentGroupTable">
    /// Withhold tax component group.
    /// </param>
    /// <returns>
    /// Instance of <c> TaxWithholdCertificateCreate_IN </c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdCertificateCreate_IN newCertificateCreate(TaxWithholdComponentGroupTable_IN _componentGroupTable)
    {
        TaxWithholdCertificateCreate_IN     taxWithholdCertificateCreateLoc;
        TaxWithholdCertificatesTable_IN     taxWithholdCertificatesTable,
                                            taxWithholdCertificatesTableLoc;

        select maxof (RecId) from taxWithholdCertificatesTable
            where taxWithholdCertificatesTable.TaxWithholdComponentGroup == _componentGroupTable.RecId;

        select Prefix, StartNum from taxWithholdCertificatesTableLoc
            where taxWithholdCertificatesTableLoc.RecId == taxWithholdCertificatesTable.RecId;

        taxWithholdCertificateCreateLoc = new TaxWithholdCertificateCreate_IN();
        taxWithholdCertificateCreateLoc.getLast();

        taxWithholdCertificateCreateLoc.parmTaxWithholdComponentGroup(_componentGroupTable.RecId);
        taxWithholdCertificateCreateLoc.parmTaxWithholdPrefix(taxWithholdCertificatesTableLoc.Prefix);
        taxWithholdCertificateCreateLoc.parmTaxWithholdStartNum(taxWithholdCertificatesTableLoc.StartNum + 1);
        taxWithholdCertificateCreateLoc.parmTaxWithholdQty(0);

        return taxWithholdCertificateCreateLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>