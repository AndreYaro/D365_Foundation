<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPlanVersionDataMigration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Detects and performs table data modifications required to support ProjWorkBreakdownStructureV2.
/// </summary>
class ProjPlanVersionDataMigration
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setEndNode</Name>
				<Source><![CDATA[
    private static void setEndNode(
		HierarchyIdBase _hierarchyId)
    {
        ProjPlanVersion wbsTableParent;
        ProjPlanVersion wbsTableChild;

        update_recordset wbsTableChild
            setting
                EndNode = FalseTrue::True
            where wbsTableChild.HierarchyId == _hierarchyId
            notexists join wbsTableParent
            where wbsTableParent.HierarchyId == _hierarchyId
                && wbsTableParent.ParentHierarchyTaskId == wbsTableChild.HierarchyTaskId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSortingRecords</Name>
				<Source><![CDATA[
	private static void createSortingRecords(
		HierarchyIdBase _hierarchyId,
		int _currentMaxHierarchyLevel)
	{
        str currentPartition = int642Str(getCurrentPartitionRecId());
        str currentCompany = curExt();

		// Delete all ProjHierarhySorting records for the current hierarchy
        str deleteSortSQL = strFmt(@"DELETE Sort FROM ProjHierarchySorting Sort WHERE
                                        Sort.Partition = %1 AND Sort.DataAreaId = '%2'
                                        AND Sort.Type = %3 AND Sort.RefId = '%4'",
                                    currentPartition,
                                    currentCompany,
                                    enum2int(ProjHierarchySortingType::ProjWBS),
                                    _hierarchyId);

		// Create query string for inserting ProjPlanVersion record references into the ProjHierarchySorting table
		// Should look something like this:
		// INSERT INTO ProjHierarchySorting (
		//		Partition,
		//		DataAreaId,
		//		RefTableId,
		//		Type,
        //      RefId,
		//		RefNodeId,
		//		HierarchyLevel1,
		//		HierarchyLevel2,
		//		...
		// ) SELECT 
		//		@currentPartition,
		//		@currentCompany,
		//		@ProjHierarchySortingType::ProjWBS,
		//		@_hierarchyId,
        //      HierachyTaskId,
		//		dbo.ProjSplitIntegerByDelimiter(PathId, '.', 1),
		//		dbo.ProjSplitIntegerByDelimiter(PathId, '.', 2),
		//		...
		// FROM ProjPlanVersion WHERE Partition = @currentPartition AND DataAreaId = @currentCompany AND HierarchyId = @_projPlanVersionDetail.HierarchyId
		str insertSortSQL = 'INSERT INTO ProjHierarchySorting (Partition, DataAreaId, Type, RefId, RefNodeId';
        for (int i = 1; i <= _currentMaxHierarchyLevel; ++i)
        {
            insertSortSQL += strFmt(', HierarchyLevel%1', i);
        }

        insertSortSQL += strFmt(') SELECT %1,\'%2\',%3,\'%4\',HierarchyTaskId', currentPartition, currentCompany, enum2int(ProjHierarchySortingType::ProjWBS), _hierarchyId);
        for (int i = 1; i <= _currentMaxHierarchyLevel; ++i)
        {
            insertSortSQL += strFmt(', dbo.%1(PathId, \'.\', %2)', ProjHierarchySQLObjects::getSplitByIntegerFuncName(), i);
        }

        insertSortSQL += strFmt(' FROM ProjPlanVersion WHERE Partition = %1 AND DataAreaId = \'%2\' AND HierarchyId = \'%3\'',
            currentPartition,
            currentCompany,
            _hierarchyId);

		// Run the SQL query
        Connection userConnection = new Connection();
        Statement stmt = userConnection.createStatement();
        
        new SqlStatementExecutePermission(deleteSortSQL).assert();
        int status = stmt.executeUpdateWithParameters(deleteSortSQL, SqlParams::create());
        Debug::assert(status == 0);
        CodeAccessPermission::revertAssert();

		new SqlStatementExecutePermission(insertSortSQL).assert();
        status = stmt.executeUpdateWithParameters(insertSortSQL, SqlParams::create());
        Debug::assert(status == 0);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTasksEffort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the task efforts and related fields in parent tasks of the hierarchy with aggregated data from child tasks.
    /// </summary>
    /// <param name = "_hierarchyId">The ID of the hierarchy to migrate.</param>
    /// <param name = "_maxHierarchyLevel">Deepest level in the hierarchy.</param>
    private static void updateTasksEffort(HierarchyIdBase _hierarchyId, int _maxHierarchyLevel)
    {
        int maxParentHierarchyLevel = _maxHierarchyLevel-1;
        
        if (ProjPlanVersionDetail::isTemplateHierarchy(_hierarchyId))
        {
            ProjPlanVersionDataMigration::updateTasksEffortForTemplate(_hierarchyId, maxParentHierarchyLevel);
        }
        else
        {
            ProjPlanVersionDataMigration::updateTasksEffortForNonTemplate(_hierarchyId, maxParentHierarchyLevel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTasksEffortForTemplate</Name>
				<Source><![CDATA[
    private static void updateTasksEffortForTemplate(HierarchyIdBase _hierarchyId, int currentLevel)
    {
        ProjPlanVersion parentPlanVersion;
        ProjPlanVersionAggByParentTemplateView childPlanVersionAggregation;
        
        ProjPlanVersionDataMigration::skipDatabaseLogAndEvent(parentPlanVersion);

        ttsbegin;
        while(currentLevel >= 0)
        {
            update_recordset parentPlanVersion
                setting TaskEffort = childPlanVersionAggregation.TaskEffort
                where parentPlanVersion.HierarchyId == _hierarchyId && parentPlanVersion.HierarchyLevel == currentLevel
                    join childPlanVersionAggregation 
                        where childPlanVersionAggregation.HierarchyId == parentPlanVersion.HierarchyId
                            && childPlanVersionAggregation.ParentHierarchyTaskId == parentPlanVersion.HierarchyTaskId;
            
            currentLevel--;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTasksEffortForNonTemplate</Name>
				<Source><![CDATA[
    private static void updateTasksEffortForNonTemplate(HierarchyIdBase _hierarchyId, int currentLevel)
    {
        ProjPlanVersion parentPlanVersion;
        ProjPlanVersionAggByParentUnionView childPlanVersionAggregation;

        ProjPlanVersionDataMigration::skipDatabaseLogAndEvent(parentPlanVersion);

        ttsbegin;
        while(currentLevel >= 0)
        {
            update_recordset parentPlanVersion
                setting TaskEffort = childPlanVersionAggregation.TaskEffort,
                    TaskStartDate = childPlanVersionAggregation.TaskStartDate,
                    TaskDuration = childPlanVersionAggregation.TaskDuration,
                    TaskFinishDate = childPlanVersionAggregation.TaskFinishDate,
                    TaskEffortAtComplete = childPlanVersionAggregation.TaskEffortAtComplete,
                    TaskEffortToComplete = childPlanVersionAggregation.TaskEffortToComplete,
                    TaskCostAtComplete = childPlanVersionAggregation.TaskCostAtComplete
                where parentPlanVersion.HierarchyId == _hierarchyId && parentPlanVersion.HierarchyLevel == currentLevel
                    join childPlanVersionAggregation 
                        where childPlanVersionAggregation.HierarchyId == parentPlanVersion.HierarchyId
                            && childPlanVersionAggregation.ParentHierarchyTaskId == parentPlanVersion.HierarchyTaskId;
            
            currentLevel--;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMigrationForProject</Name>
				<Source><![CDATA[
	/// <summary>
    /// Performs changes required to update all hierarchies in the given project to support the new WBS.
    /// </summary>
    /// <param name = "_company">The company the Project belongs to.</param>
    /// <param name = "_projectId">The ID of the project to migrate.</param>
	public static void performMigrationForProject(
		DataAreaId _company,
		ProjId _projectId)
    {
        boolean wbsFormLaunchEnhanceFlight = ProjWBSFormLaunchEnhancementFlight::instance().isEnabled();

        if (wbsFormLaunchEnhanceFlight)
        {
            ProjPlanVersionDetail projPlanVersionDetail;

            while select HierarchyId from projPlanVersionDetail
                where projPlanVersionDetail.ProjId == _projectId
                    && projPlanVersionDetail.VersionType != ProjPlanVersionType::PublishedOld
            {
                ProjPlanVersionDataMigration::performMigrationForHierarchy(ProjPlanVersionDetail.HierarchyId);
            }
        }
        else
        {
            ProjPlanVersionDetail projPlanVersionDetail;

            while select projPlanVersionDetail
                where projPlanVersionDetail.DataAreaId == _company
                    && projPlanVersionDetail.ProjId == _projectId
            {
                ProjPlanVersionDataMigration::performMigrationForHierarchy(ProjPlanVersionDetail.HierarchyId);
            }
        }
	}

]]></Source>
			</Method>
			<Method>
				<Name>hierarchyRequiresMigration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the given HierarchyId requires a migration (via performMigrationForHierarchy) to be used with the new WBS.
    /// </summary>
    /// <param name = "_hierarchyId">Id of the hierarchy to check.</param>
    /// <returns>True if the hierarchy requires migration; otherwise false.</returns>
    public static boolean hierarchyRequiresMigration(
        HierarchyIdBase _hierarchyId)
    {
        ProjHierarchySorting projHierarchySorting;
        ProjPlanVersion projPlanVersion;

        // Validate if there are more project plan version records then hierarchy sorting records.
        // If so migration is required.

		select firstonly RecId from projPlanVersion
		    where projPlanVersion.HierarchyId == _hierarchyId
		notexists join projHierarchySorting 
            where projHierarchySorting.Type == ProjHierarchySortingType::ProjWBS
                && projHierarchySorting.RefId == projPlanVersion.HierarchyId
                && ProjHierarchySorting.RefNodeId == projPlanVersion.HierarchyTaskId;

        return projPlanVersion != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMigrationForHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs changes required to update the given hierarchy to support the new WBS
    /// </summary>
    /// <param name = "_hierarchyId">The Id of the hierarchy to migrate.</param>
    public static void performMigrationForHierarchy(
        HierarchyIdBase _hierarchyId)
    {
        if (ProjPlanVersionDataMigration::hierarchyRequiresMigration(_hierarchyId))
        {
            int64 rootTaskId = ProjPlanVersion::getRootTaskId(_hierarchyId);

            // Update hierarchy levels and path ids for all tasks in this hierarchy
		    try
            {
                ProjHierarchy::updateHierarchyLevelAndPathId(
                    _hierarchyId,
                    tableNum(ProjPlanVersion),
                    fieldNum(ProjPlanVersion, HierarchyId),
                    fieldNum(ProjPlanVersion, HierarchyTaskId),
                    fieldNum(ProjPlanVersion, ParentHierarchyTaskId),
                    fieldNum(ProjPlanVersion, TaskSiblingNumber),
                    fieldNum(ProjPlanVersion, HierarchyLevel),
                    fieldNum(ProjPlanVersion, PathId),
                    int642Str(rootTaskId));
            }
            catch
            {
                System.Exception ex = CLRInterop::getLastException();
			    throw error("@ProjPlan:WBSV2DataMigrationFailed");
            }

            // Update end-node status for all tasks in this hierarchy
            ProjPlanVersionDataMigration::setEndNode(_hierarchyId);

            // Create ProjHierarchySorting records for all records in this hierarchy
            ProjHierarchyLevel currentMaxLevel = ProjPlanVersion::getMaxHierarchyLevel(_hierarchyId);
            ProjPlanVersionDataMigration::createSortingRecords(_hierarchyId, currentMaxLevel);
            ProjPlanVersionDataMigration::updateTasksEffort(_hierarchyId, currentMaxLevel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDatabaseLogAndEvent</Name>
				<Source><![CDATA[
    private static void skipDatabaseLogAndEvent(Common _table)
    {
        // Skip database log and event to improve performance.
        _table.skipDatabaseLog(true);
        _table.skipEvents(true);
        _table.skipDataMethods(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>