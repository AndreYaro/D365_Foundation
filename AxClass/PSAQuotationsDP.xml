<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAQuotationsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report Data Provider class for <c>Project Quotations</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(PSAQuotationsQuery)),
    SRSReportParameterAttribute(classStr(PSAQuotationsContract))
]
class PsaQuotationsDP extends SrsReportDataProviderPreProcess
{
    CustQuotationJour           custQuotationJour;
    CustQuotationTrans          custQuotationTransTmp;
    CustQuotationConfirmJour    custQuotationConfirmJour;
    CustQuotationConfirmTrans   custQuotationConfirmTransTmp;
    RecId                       custQuotationJourRecId;
    RecId                       custQuotationConfirmJourRecId;
    PSAQuotationsTmp            m_tPSAQuotationsTmp;
    SysDocuBrandDetailsRegular  docuBrandDetails;
    SalesQuotationLine          salesQuotationLineTmp;
    SalesQuotationTable         salesQuotationTable;
    SalesQuotationTotals        salesQuotationTotals;
    TmpTaxWorkTrans             tmpTaxWorkTrans;
    Tax                         tax;
    TaxAmountCur                taxAmountCur;
    PSAQuotationsContract       contract;
    CurrencyCode                m_eCurrency;
    boolean                     m_bPrintNonCharge;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPSAQuotationsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects all records from table <c>PSAQuotationsTmp</c>.
    /// </summary>
    /// <returns>
    /// The table <c>PSAQuotationsTmp</c> object.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PSAQuotationsTmp))]
    public PSAQuotationsTmp getPSAQuotationsTmp()
    {
        return m_tPSAQuotationsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDocuBrandDetailsRegular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SysDocuBrandDetailsRegular</c> table.
    /// </summary>
    /// <returns>
    /// The <c>SysDocuBrandDetailsRegular</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SysDocuBrandDetailsRegular))
    ]
    public SysDocuBrandDetailsRegular getSysDocuBrandDetailsRegular()
    {
        select docuBrandDetails;
        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPSAQuotationsConfirmTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into temporary table <c>PSAQuotationTmp</c>.
    /// </summary>
    public void insertPSAQuotationsConfirmTmp()
    {
        TaxJournalTrans     taxJournalTrans;

        m_tPSAQuotationsTmp.QuotationId             = salesQuotationTable.QuotationId;
        m_tPSAQuotationsTmp.QuotationName           = salesQuotationTable.QuotationName;
        m_tPSAQuotationsTmp.DeliveryPostalAddress   = salesQuotationTable.DeliveryPostalAddress;
        m_tPSAQuotationsTmp.CurrencyCode            = salesQuotationTable.CurrencyCode;
        m_tPSAQuotationsTmp.CustomerName            = salesQuotationTable.customerName();
        m_tPSAQuotationsTmp.ProjTransType           = custQuotationConfirmTransTmp.ProjTransType;
        m_tPSAQuotationsTmp.SalesQty                = custQuotationConfirmTransTmp.Qty;
        m_tPSAQuotationsTmp.ProjCategoryId          = custQuotationConfirmTransTmp.ProjCategoryId;
        m_tPSAQuotationsTmp.ProjDescription         = custQuotationConfirmTransTmp.ProjDescription;

        if (ProjLineProperty::find(custQuotationConfirmTransTmp.LinePropertyId).ToBeInvoiced == NoYes::Yes)
        {
            m_tPSAQuotationsTmp.LineAmount          = custQuotationConfirmTransTmp.LineAmount;
            taxAmountCur = 0;

            while select SourceTaxAmountCur,TaxDirection, TransTableId, TransRecId, TaxGroup from taxJournalTrans
                where taxJournalTrans.TransTableId  == custQuotationConfirmJour.TableId &&
                    taxJournalTrans.TransRecId    == custQuotationConfirmJour.RecId   &&
                    taxJournalTrans.InventTransId == custQuotationConfirmTransTmp.InventTransId
            {
                taxAmountCur += taxJournalTrans.SourceTaxAmountCur * Tax::changeDisplaySign(taxJournalTrans.TaxDirection);
            }

            m_tPSAQuotationsTmp.TaxAmountCur        = taxAmountCur;
        }
        else
        {
            m_tPSAQuotationsTmp.LineAmount          = 0;
            m_tPSAQuotationsTmp.TaxAmountCur        = 0;
        }

        m_tPSAQuotationsTmp.psaExternalDescription  = salesQuotationTable.psaExternalDescription;

        if (salesQuotationTable.DeliveryPostalAddress)
        {
            m_tPSAQuotationsTmp.PostalAddress       =   LogisticsPostalAddress::addressFromRecId(salesQuotationTable.DeliveryPostalAddress);
        }

        // set Document Branding Header;
        this.setSysDocuBrandDetails();

        m_tPSAQuotationsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SysDocuBrandDetailsRegular</c> table with header details.
    /// </summary>
    private void setSysDocuBrandDetails()
    {
        SysDocuBrandDetailsRegular bufferTable = SysDocuBrandDetails::getDocuBrandDetailsRegular(this);
        docuBrandDetails.clear();
        docuBrandDetails.data(bufferTable.data());
        docuBrandDetails.CurrencySymbol    = Currency::find(m_tPSAQuotationsTmp.CurrencyCode).Symbol;
        docuBrandDetails.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPSAQuotationsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into temporary table <c>PSAQuotationTmp</c>.
    /// </summary>
    public void insertPSAQuotationsTmp()
    {
        TaxJournalTrans     taxJournalTrans;

        m_tPSAQuotationsTmp.QuotationId             = salesQuotationTable.QuotationId;
        m_tPSAQuotationsTmp.QuotationName           = salesQuotationTable.QuotationName;
        m_tPSAQuotationsTmp.DeliveryPostalAddress   = salesQuotationTable.DeliveryPostalAddress;
        m_tPSAQuotationsTmp.CurrencyCode            = salesQuotationTable.CurrencyCode;
        m_tPSAQuotationsTmp.ProjTransType           = custQuotationTransTmp.ProjTransType;
        m_tPSAQuotationsTmp.SalesQty                = custQuotationTransTmp.Qty;
        m_tPSAQuotationsTmp.ProjCategoryId          = custQuotationTransTmp.ProjCategoryId;
        m_tPSAQuotationsTmp.CustomerName            = salesQuotationTable.customerName();
        m_tPSAQuotationsTmp.ProjDescription         = custQuotationTransTmp.ProjDescription;

        if (this.shouldCalculateTaxAmount())
        {
            if (salesQuotationTable.DiscPercent)
            {
                m_tPSAQuotationsTmp.LineAmount          = custQuotationTransTmp.LineAmount - ((custQuotationTransTmp.LineAmount * salesQuotationTable.DiscPercent)/100);
            }
            else
            {
                m_tPSAQuotationsTmp.LineAmount          = custQuotationTransTmp.LineAmount;
            }
            taxAmountCur = 0;

            while select SourceTaxAmountCur,TaxDirection, TransTableId, TransRecId, TaxGroup from taxJournalTrans
                where taxJournalTrans.TransTableId  == custQuotationJour.TableId &&
                    taxJournalTrans.TransRecId    == custQuotationJour.RecId   &&
                    taxJournalTrans.InventTransId == custQuotationTransTmp.InventTransId
            {
                taxAmountCur += taxJournalTrans.SourceTaxAmountCur * Tax::changeDisplaySign(taxJournalTrans.TaxDirection);
            }

            m_tPSAQuotationsTmp.TaxAmountCur        = taxAmountCur;
        }
        else
        {
            m_tPSAQuotationsTmp.LineAmount          = 0;
            m_tPSAQuotationsTmp.TaxAmountCur        = 0;
        }
        m_tPSAQuotationsTmp.psaExternalDescription  = salesQuotationTable.psaExternalDescription;

        if (salesQuotationTable.DeliveryPostalAddress)
        {
            m_tPSAQuotationsTmp.PostalAddress       =   LogisticsPostalAddress::addressFromRecId(salesQuotationTable.DeliveryPostalAddress);
        }

        m_tPSAQuotationsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalculateTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the tax amount should be calculated for the <c>PSAQuotationsTmp</c> record.
    /// </summary>
    /// <returns>
    /// true if the tax amount should be calculated; otherwise, false.
    /// </returns>
    protected boolean shouldCalculateTaxAmount()
    {
        return ProjLineProperty::find(custQuotationTransTmp.LinePropertyId).ToBeInvoiced == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        QuotationIdBase         m_eQuotation;
        QueryRun                tradeLoopTrans;

        m_tPSAQuotationsTmp.setConnection(this.parmUserConnection());

        contract    = this.parmDataContract() as PSAQuotationsContract;

        m_eQuotation = contract.parmQuotations();
        m_bPrintNonCharge = contract.parmM_bPrintNonCharge();

        salesQuotationTable  =  SalesQuotationTable::find(m_eQuotation);
        salesQuotationTotals =  SalesQuotationTotals::construct(salesQuotationTable);
        salesQuotationTotals.calc();
        tax = salesQuotationTotals.tax();
        tmpTaxWorkTrans.setTmpData(tax.tmpTaxWorkTrans());

        custQuotationJourRecId          = contract.parmCustQuotationRecId();
        custQuotationConfirmJourRecId   = contract.parmCustQuotationConfirmRecId();
        if (custQuotationJourRecId)
        {
            custQuotationJour           = CustQuotationJour::findRecId(custQuotationJourRecId);

            tradeLoopTrans = new TradeLoopTrans(custQuotationJour, tableNum(CustQuotationTrans)).buildQueryRun();
            while (tradeLoopTrans.next())
            {
                custQuotationTransTmp = tradeLoopTrans.get(tableNum(CustQuotationTrans));
                if (this.shouldInsertDataForSalesQuotationLine())
                {
                    this.insertPSAQuotationsTmp();
                }
            }
        }
        else if (custQuotationConfirmJourRecId)
        {
            custQuotationConfirmJour    = CustQuotationConfirmJour::findRecId(custQuotationConfirmJourRecId);

            tradeLoopTrans = new TradeLoopTrans(custQuotationConfirmJour, tableNum(CustQuotationConfirmTrans)).buildQueryRun();
            while (tradeLoopTrans.next())
            {
                custQuotationConfirmTransTmp = tradeLoopTrans.get(tableNum(CustQuotationConfirmTrans));
                if (this.shouldInsertDataForSalesQuotationConfirmationLine())
                {
                    this.insertPSAQuotationsConfirmTmp();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInsertDataForSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>PSAQuotationsTmp</c> record should be created for the sales quotation line.
    /// </summary>
    /// <returns>
    /// true if the <c>PSAQuotationsTmp</c> record should be created; otherwise, false.
    /// </returns>
    protected boolean shouldInsertDataForSalesQuotationLine()
    {
        return (ProjLineProperty::find(custQuotationTransTmp.LinePropertyId).ToBeInvoiced == NoYes::Yes ||
            m_bPrintNonCharge == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInsertDataForSalesQuotationConfirmationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>PSAQuotationsTmp</c> record should be created for the sales quotation confirmation line.
    /// </summary>
    /// <returns>
    /// true if the <c>PSAQuotationsTmp</c> record should be created; otherwise, false.
    /// </returns>
    protected boolean shouldInsertDataForSalesQuotationConfirmationLine()
    {
        return (ProjLineProperty::find(custQuotationConfirmTransTmp.LinePropertyId).ToBeInvoiced == NoYes::Yes ||
            m_bPrintNonCharge == NoYes::Yes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>