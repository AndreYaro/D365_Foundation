<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetEnabledDimensionStructureSynchronizationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetDimensionStructureSynchronizationProvider</c> is the dimension structure synchronization provider for budget enabled dimensions data.
/// </summary>
/// <remarks>
/// The <c>BudgetDimensionStructureSynchronizationProvider</c> is not a registered provider for all dimension structure synchronization processes
/// and only supports the budget enabled dimensions change process.
/// </remarks>
public class BudgetEnabledDimensionStructureSynchronizationProvider implements DimensionStructureISynchronizationTransactionProvider
{
    private const str InstrumentationNamespace = classStr(BudgetEnabledDimensionStructureSynchronizationProvider);
    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertDimensionSynchronize</Name>
				<Source><![CDATA[
    public void insertDimensionSynchronize(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetEnabledDimensionStructureSynchronizationProvider, insertDimensionSynchronize));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            BudgetDimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as BudgetDimensionStructureSynchronizationRequest;

            if (synchronizationRequest)
            {
                LedgerRecId                             ledgerId = synchronizationRequest.getLedgerId();
                RecId                                   disabledBudgetDimensions = synchronizationRequest.getDisabledBudgetDimensionsSetId();

                DimensionSynchronize                    dimSynchronize;
                DimensionSynchronizeLedger              dimSynchronizeLedger;
                DimensionSynchronizeAccountStructure    dimSynchronizeAccountStructure;

                dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
                dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

                DimensionHierarchy                      dimHierarchy;
                DimensionHierarchyLevel                 dimHierarchyLevel;
                DimensionAttributeSetItem               dimAttrSetItem;
                LedgerStructure                         ledgerStructure;
                Ledger                                  ledger;
                DimensionAttributeValueCombination      dimAttrValueCombination;
                CompanyInfo                             companyInfo;
                BudgetTransactionLine                   budgetTransactionLine;
                BudgetTransactionHeader                 budgetTransactionHeader;

                unchecked(Uncheck::XDS)
                {
                    // Get all account structures that match the ledger and dimension attributes
                    insert_recordset dimSynchronizeAccountStructure (DimensionHierarchy)
                    select RecId from dimHierarchy
                            group by dimHierarchy.RecId
                        join ledgerStructure
                            where ledgerStructure.DimensionHierarchy == dimHierarchy.RecId &&
                                ledgerStructure.Ledger == ledgerId
                        exists join dimHierarchyLevel
                            where dimHierarchyLevel.DimensionHierarchy == dimHierarchy.RecId
                        exists join dimAttrSetItem
                            where dimAttrSetItem.DimensionAttribute == dimHierarchyLevel.DimensionAttribute &&
                                dimAttrSetItem.DimensionAttributeSet == disabledBudgetDimensions;

                    companyInfo.skipPostLoad(true);

                    // Extract LedgerDimension's from unposted budget lines

                    insert_recordset dimSynchronize (OriginalLedgerDimension, DataArea)
                    select LedgerDimension from budgetTransactionLine
                            group by budgetTransactionLine.LedgerDimension, companyInfo.DataArea
                        join budgetTransactionHeader
                            where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                                budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft &&
                                budgetTransactionHeader.PrimaryLedger == ledgerId
                        join ledger
                            where ledger.RecId == budgetTransactionHeader.PrimaryLedger
                        join DataArea from companyInfo
                            where companyInfo.RecId == ledger.PrimaryForLegalEntity
                        join dimAttrValueCombination
                            where dimAttrValueCombination.RecId == budgetTransactionLine.LedgerDimension
                        join dimSynchronizeAccountStructure
                            where dimSynchronizeAccountStructure.DimensionHierarchy == dimAttrValueCombination.AccountStructure;

                    activityContext.addCustomProperty('MethodName', 'insertDimensionSynchronize');
                    activityContext.addCustomProperty('WereRecordsInserted', int2str(dimSynchronize.rowCount() > 0));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChanges</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChanges(DimensionSynchronize _dimensionSynchronize)
    {
        return DimensionStructureChangeSynchronize::synchronizeStructureChanges(_dimensionSynchronize.OriginalLedgerDimension, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferences</Name>
				<Source><![CDATA[
    public void updateProviderReferences(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        BudgetDimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as BudgetDimensionStructureSynchronizationRequest;        
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetEnabledDimensionStructureSynchronizationProvider, updateProviderReferences));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            if (synchronizationRequest)
            {
                LedgerRecId             ledgerId = synchronizationRequest.getLedgerId();

                DimensionSynchronize    dimSynchronize;
                dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());

                BudgetTransactionLine   budgetTransactionLine;
                BudgetTransactionHeader budgetTransactionHeader;

                unchecked(Uncheck::XDS)
                {
                    // Update unposted budget transactions with the new ledger dimension values

                    update_recordset budgetTransactionLine
                    setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                    join budgetTransactionHeader
                        where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                            budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft &&
                            budgetTransactionHeader.PrimaryLedger == ledgerId
                    join dimSynchronize
                        where dimSynchronize.OriginalLedgerDimension == budgetTransactionLine.LedgerDimension &&
                            dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension;

                    activityContext.addCustomProperty('MethodName', 'updateProviderReferences');
                    activityContext.addCustomProperty('WereRecordsUpdated', int2str(budgetTransactionLine.rowCount() > 0));
                }
            }
         }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>