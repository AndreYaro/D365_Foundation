<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandJournalTransStatusEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContract]
public class InventOnHandJournalTransStatusEvent
{
    private str id;
    private str organizationId;
    private str productId;
    private Map dimensions;
    private str recId;
    private str fnoInventTransId;
    private str fnoVoucher;
    private str fnoTransactionStatus;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFnoInventTransId</Name>
				<Source><![CDATA[
    [DataMember('fnoInventTransId')]
    public str parmFnoInventTransId(str _fnoInventTransId = fnoInventTransId)
    {
        fnoInventTransId = _fnoInventTransId;
        return fnoInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFnoVoucher</Name>
				<Source><![CDATA[
    [DataMember('fnoVoucher')]
    public str parmFnoVoucher(str _fnoVoucher = fnoVoucher)
    {
        fnoVoucher = _fnoVoucher;
        return fnoVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFnoTransactionStatus</Name>
				<Source><![CDATA[
    [DataMember('transactionStatus')]
    public str parmFnoTransactionStatus(str _fnoTransactionStatus = fnoTransactionStatus)
    {
        fnoTransactionStatus = _fnoTransactionStatus;
        return fnoTransactionStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrganizationId</Name>
				<Source><![CDATA[
    [DataMember('organizationId')]
    public str parmOrganizationId(str _organizationId = organizationId)
    {
        organizationId = _organizationId;
        return organizationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductId</Name>
				<Source><![CDATA[
    [DataMember('productId')]
    public str parmProductId(str _productId = productId)
    {
        productId = _productId;
        return productId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensions</Name>
				<Source><![CDATA[
    [DataMember('dimensions')]
    public Map parmDimensions(Map _dimensions = dimensions)
    {
        dimensions = _dimensions;
        return dimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    [DataMember('id')]
    public str parmId(str _id = id)
    {
        id = _id;
        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    [DataMember('recId')]
    public str parmRecId(str _recId = recId)
    {
        recId = _recId;
        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFromQueue</Name>
				<Source><![CDATA[
    public static InventOnHandJournalTransStatusEvent buildFromQueue(InventInventoryDataServiceJournalTransStatusQueue queue)
    {
        var event = new InventOnHandJournalTransStatusEvent();
        var inventDim = InventDim::findInLegalEntity(queue.InventDimId, queue.Company);

        if (inventDim)
        {
            event.parmId(int642str(queue.RecId));
            event.parmProductId(queue.ItemId);
            event.parmOrganizationId(queue.Company);
            var dimensions = InventOnHandChangeEventDimensionSet::BuildNonEmptyDimensionMapFromInventDim(inventDim);
            event.parmDimensions(dimensions);
            event.parmRecId(queue.InventoryServiceTransactionId);
            event.parmFnoInventTransId(queue.InventTransId);
            event.parmFnoVoucher(queue.Voucher);
            if (queue.Posted)
            {
                event.parmFnoTransactionStatus('FnoTransPosted');
            }
            else
            {
                event.parmFnoTransactionStatus('FnoTransPostError');
            }
        }

        return event;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>