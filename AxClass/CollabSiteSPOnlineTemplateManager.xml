<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CollabSiteSPOnlineTemplateManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Platform.Integration.SharePoint;

/// <summary>
/// The <c>CollabSiteSPOnlineTemplateManager</c> class provides information about
/// site templates stored in SharePoint Online.
/// </summary>
[SysObsolete('Project Collaboration Workspace is deprecated.', false, 20\09\2022)]
class CollabSiteSPOnlineTemplateManager
{
    TmpCollabSiteTemplates  tmpCollabSiteTemplates;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadTemplates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads templates from SharePoint online.
    /// </summary>
    /// <param name="_url">
    /// The URl of the SharePoint site templates.
    /// </param>
    public void loadTemplates(str _url)
    {
        try
        {
            ISharePointProxy proxy = CollabSiteSPOnlineTemplateManager::createSharePointProxy(_url);
            if (proxy)
            {
                SPWebTemplateResponse response = SharePointHelper::GetWebTemplates(proxy);
                if (response)
                {
                    SPWebTemplate[] templates = response.results;

                    ttsBegin;
                    for (int i = 0; i < templates.Length; i++)
                    {
                        SPWebTemplate template = templates.get_Item(i);
                        tmpCollabSiteTemplates.clear();
                        tmpCollabSiteTemplates.initValue();
                        tmpCollabSiteTemplates.Name = template.Name;
                        tmpCollabSiteTemplates.Description = template.Title;
                        tmpCollabSiteTemplates.insert();
                    }
                    ttsCommit;
                }
            }
        }
        catch
        {
            CollabSiteSharePointOnlineProxy::processCLRErrorException();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpCollabSiteTemplates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>TmpCollabSiteTemplates</c> stores in this instance.
    /// </summary>
    /// <returns>
    /// A <c>TmpCollabSiteTemplates</c> object.
    /// </returns>
    public TmpCollabSiteTemplates tmpCollabSiteTemplates()
    {
        return tmpCollabSiteTemplates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a template is valid.
    /// </summary>
    /// <param name="_url">
    /// The URL of the SharePoint site used to validate the template.
    /// </param>
    /// <param name="_templateName">
    /// The template to validate.
    /// </param>
    /// <returns>
    /// True if the template is valid; otherwise, false.
    /// </returns>
    public static boolean validTemplate(CollabSiteURL _url, CollabSiteTemplateName _templateName)
    {
        try
        {
            ISharePointProxy proxy = CollabSiteSPOnlineTemplateManager::createSharePointProxy(_url);
            if (proxy)
            {
                SPWebTemplate template = SharePointHelper::GetWebTemplateByName(proxy, _templateName);
                return template != null;
            }
        }
        catch
        {
            CollabSiteSharePointOnlineProxy::processCLRErrorException();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSharePointProxy</Name>
				<Source><![CDATA[
    private static ISharePointProxy createSharePointProxy(str _url)
    {
        ProxyConfiguration config = new ProxyConfiguration(_url);
        ISharePointProxy proxy = SharePointHelper::CreateProxyForConfig(config, xUserInfo::getExternalId());
        return proxy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>