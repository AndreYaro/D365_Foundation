<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodPostingSelectSales_Menu</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjPeriodPostingSelectSales_Menu extends ProjPeriodPostingSelectSales
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the AOT.
    /// </remarks>
    public Object dialog()
    {
        #define.two(2)

        DialogRunbase  dialogRunbase = super();

        dialogRunbase.caption("@SYS87008");
        dialogRunbase.addGroup("@SYS90565");
        if (reverseTurnover)
        {
            dialogReverseTurnover   = dialogRunbase.addFieldValue(enumStr(ProjRevenueDirection), ProjRevenueDirection::ReverseRevenue);
        }
        else
        {
            dialogReverseTurnover   = dialogRunbase.addFieldValue(enumStr(ProjRevenueDirection), ProjRevenueDirection::AccrueRevenue);
        }
        dialogRunbase.addGroup("@SYS78373",dialogGroupCostSale);

        dialogEmplSalesPrice    = dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionHours),      queryEmpl,    "@SYS5269",  "@SYS78368");
        dialogCostSalesPrice    = dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionCost),       queryCost,  "@SYP4882014", "@SYS78369");
        dialogItemSalesPrice    = dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionItem),       queryItem,  "@SYS7407",  "@SYS78372");
        dialogRevenueSalesPrice = dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionRevenue),    queryRevenue, "@SYS9154", "@SYS78371");

        dialogRunbase.addGroup("@SYS54242");
        dialogFromDate      = dialogRunbase.addFieldValue(extendedTypeStr(TransDate), fromDate, "@SYS5209",  "@SYS90467");
        dialogToDate        = dialogRunbase.addFieldValue(extendedTypeStr(TransDate), toDate,   "@SYS14656", "@SYS90468");

        dialogRunbase.addGroup("@SYS23410");
        dialogTransDate = dialogRunbase.addFieldValue(extendedTypeStr(TransDate), transActionDate, "@SYS14475", "@SYS90567");

        dialogGroupCostSale = dialogRunbase.addGroup('');
        dialogGroupCostSale.frameType(1);
        dialogGroupCostSale.columns(#two);

        this.initQuery();
        dialogRunbase.useConfigKey(true);
        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ProjRevenueDirection projRevenueDirection;

        ret = super();

        projRevenueDirection = dialogReverseTurnover.value();
        if (projRevenueDirection == ProjRevenueDirection::ReverseRevenue)
        {
            this.parmReverseTurnover(true);
        }
        else
        {
            this.parmReverseTurnover(false);
        }

        this.parmTransActionDate(dialogTransDate.value());

        this.parmQueryCost(dialogCostSalesPrice.value());
        this.parmQueryEmpl(dialogEmplSalesPrice.value());
        this.parmQueryRevenue(dialogRevenueSalesPrice.value());
        this.parmQueryItem(dialogItemSalesPrice.value());

        this.parmFromDate(dialogFromDate.value());
        this.parmToDate(dialogToDate.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    void initQuery()
    {
        projGroupDataSource   = queryRun.query().dataSourceTable(tableNum(ProjGroup));
        SysQuery::findOrCreateRange(projGroupDataSource, fieldNum(ProjGroup, ProjGroupId));
        projTableDataSource   = queryRun.query().dataSourceTable(tableNum(ProjTable));
        SysQuery::findOrCreateRange(projTableDataSource, fieldNum(ProjTable, ProjId));

        if (!this.enableProjMultipleContractLinesForProjectFeature)
        {
            QueryBuildRange queryRangeTimeMaterial = queryRun.query().dataSourceTable(tableNum(ProjTable)).addRange(fieldNum(ProjTable,Type));
            queryRangeTimeMaterial.status(RangeStatus::Hidden);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            emplDataSource          = queryRun.query().dataSourceTable(tableNum(ProjEmplTrans));
            emplDataSourceSale      = queryRun.query().dataSourceTable(tableNum(ProjEmplTransSale));
            SysQuery::findOrCreateRange(emplDataSource, fieldNum(ProjEmplTrans, TransId));
            this.initQueryEmpl();
        }
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            costDataSource          = queryRun.query().dataSourceTable(tableNum(ProjCostTrans));
            costDataSourceSale      = queryRun.query().dataSourceTable(tableNum(ProjCostTransSale));
            SysQuery::findOrCreateRange(costDataSource, fieldNum(ProjCostTrans, TransId));
            this.initQueryCost();
        }
        if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
        {
            itemDataSource          = queryRun.query().dataSourceTable(tableNum(ProjItemTrans));
            itemDataSourceSale      = queryRun.query().dataSourceTable(tableNum(ProjItemTransSale));
            SysQuery::findOrCreateRange(itemDataSource, fieldNum(ProjItemTrans, InventTransId));
            this.initQueryItem();
        }
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            revenueDataSource       = queryRun.query().dataSourceTable(tableNum(ProjRevenueTrans));
            revenueDataSourceSale   = queryRun.query().dataSourceTable(tableNum(ProjRevenueTransSale));
            SysQuery::findOrCreateRange(revenueDataSource, fieldNum(ProjRevenueTrans, TransId));
            this.initQueryRevenue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public QueryRun queryBuild()
    {
        Query                   query = new Query();
        QueryBuildDataSource    dsProjGroup, dsProjTable, dsProjEmplTrans, dsProjCostTrans, dsProjItemTrans, dsProjRevenueTrans;
        QueryBuildDataSource    dsProjEmplTransSale, dsProjCostTransSale, dsProjItemTransSale, dsProjRevenueTransSale;

        dsProjGroup         = query.addDataSource(tableNum(ProjGroup));

        dsProjTable         = dsProjGroup.addDataSource(tableNum(ProjTable));
        dsProjTable.addLink(fieldNum(ProjGroup,ProjGroupId),fieldNum(ProjTable,ProjGroupId));

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            dsProjEmplTrans     = dsProjTable.addDataSource(tableNum(ProjEmplTrans));
            dsProjEmplTrans.addLink(fieldNum(ProjTable,ProjId),fieldNum(ProjEmplTrans,ProjId));

            dsProjEmplTransSale = dsProjEmplTrans.addDataSource(tableNum(ProjEmplTransSale));
            dsProjEmplTransSale.relations(true);
            dsProjEmplTransSale.joinMode(JoinMode::ExistsJoin);
        }
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            dsProjCostTrans     = dsProjTable.addDataSource(tableNum(ProjCostTrans));
            dsProjCostTrans.addLink(fieldNum(ProjTable,ProjId),fieldNum(ProjCostTrans,ProjId));

            dsProjCostTransSale = dsProjCostTrans.addDataSource(tableNum(ProjCostTransSale));
            dsProjCostTransSale.relations(true);
            dsProjCostTransSale.joinMode(JoinMode::ExistsJoin);
        }
        if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
        {
            dsProjItemTrans     = dsProjTable.addDataSource(tableNum(ProjItemTrans));
            dsProjItemTrans.addLink(fieldNum(ProjTable,ProjId),fieldNum(ProjItemTrans,ProjId));

            dsProjItemTransSale = dsProjItemTrans.addDataSource(tableNum(ProjItemTransSale));
            dsProjItemTransSale.relations(true);
            dsProjItemTransSale.joinMode(JoinMode::ExistsJoin);
        }
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            dsProjRevenueTrans     = dsProjTable.addDataSource(tableNum(ProjRevenueTrans));
            dsProjRevenueTrans.addLink(fieldNum(ProjTable,ProjId),fieldNum(ProjRevenueTrans,ProjId));

            dsProjRevenueTransSale = dsProjRevenueTrans.addDataSource(tableNum(ProjRevenueTransSale));
            dsProjRevenueTransSale.relations(true);
            dsProjRevenueTransSale.joinMode(JoinMode::ExistsJoin);
        }
        queryRun = new SysQueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showIndexFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for the first enabled index when you are adding query range fields to the dialog box for a
    /// data source that does not have any specified ranges and displays the visible fields from that index.
    /// </summary>
    /// <param name="id">
    /// The table ID of the table in the test.
    /// </param>
    /// <returns>
    /// A Boolean value.
    /// </returns>
    public boolean showIndexFields(TableId id)
    {
        boolean ret = true;
        switch (id)
        {
            case tableNum(ProjEmplTransSale):
            case tableNum(ProjCostTransSale):
            case tableNum(ProjItemTransSale):
            case tableNum(ProjRevenueTransSale):
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version         = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        Args args;
        boolean ret = true;
        FormRun callerForm;

        if (_calledFrom && _calledFrom is FormRun)
        {
            callerForm = _calledFrom;
            args = callerForm.args();
            if (args && args.caller() && SysDictClass::isEqualOrSuperclass(classIdGet(args.caller()), classNum(DialogRunbase)))
            {
                ret = super();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS87008";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>