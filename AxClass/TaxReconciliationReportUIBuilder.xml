<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReconciliationReportUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxReconciliationReportUIBuilder</c> class is the UI builder class for the
/// <c>TaxReconciliation</c>Reporting Services report.
/// </summary>
class TaxReconciliationReportUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField                         dialogFromAccount, dialogToAccount;
    DialogField                         dialogDetails, dialogTransVAT;
    DialogField                         dialogFromPeriod, dialogToPeriod;
    DialogField                         dialogPeriod;
    DialogField                         dialogFromTaxCode, dialogToTaxCode;
    DialogField                         dialogSplitTaxCode;
    DialogField                         dialogGroupTaxCode;
    DialogField                         dialogPrintWithoutTax;

    TaxReconciliationReportContract     taxReconciliationReportContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    public void build()
    {
        boolean isIcelandicReport;
        taxReconciliationReportContract = this.dataContractObject();
        isIcelandicReport = taxReconciliationReportContract.parmReportForCountry() == TaxReconciliationReportCountry::Iceland;

        dialog.addGroup("@SYS8344");
        dialogFromAccount = dialog.addFieldValue(extendedtypestr(LedgerAccount), taxReconciliationReportContract.parmFromAccount(), "@SYS9379");
        dialogToAccount   = dialog.addFieldValue(extendedtypestr(LedgerAccount), taxReconciliationReportContract.parmToAccount(), "@SYS5714");

        dialog.addGroup("@SYS59539");
        dialogPeriod      = dialog.addFieldValue(extendedtypestr(TaxPeriod), taxReconciliationReportContract.parmTaxPeriod());
        dialogFromPeriod  = dialog.addFieldValue(extendedtypestr(TaxPeriodDate), taxReconciliationReportContract.parmFromDate(), "@SYS24050");
        dialogToPeriod    = dialog.addFieldValue(extendedtypestr(TaxPeriodDate), taxReconciliationReportContract.parmToDate(), "@SYS14656");

        dialog.addGroup("@SYS8811");
        dialogDetails     = dialog.addFieldValue(enumstr(boolean), taxReconciliationReportContract.parmDetails(), "@SYS60132", "@SYS100565");

        dialog.addGroup("@SYS22350");
        dialogSplitTaxCode = dialog.addFieldValue(enumstr(boolean), taxReconciliationReportContract.parmSplitTaxCode(),"@SYS28730","@SYS28730");
        dialogGroupTaxCode = dialog.addFieldValue(enumstr(boolean), taxReconciliationReportContract.parmGroupTaxCode(), "@SYS100500");

        // For Iceland add Print totals per tax code
        dialogPrintWithoutTax = dialog.addFieldValue(enumstr(boolean), taxReconciliationReportContract.parmPrintWithoutTax() && isIcelandicReport, "@SYS115830");//set to false in case report is not Icelandic
        dialogPrintWithoutTax.visible(isIcelandicReport);

        dialog.addGroup("@SYS55726");
        dialogTransVAT    = dialog.addFieldValue(enumstr(boolean), taxReconciliationReportContract.parmTransVAT(), "@SYS100560", "@SYS100570");

        dialog.allowUpdateOnSelectCtrl(true);
        this.dialogSelectCtrl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Monitors when a control is selected in the dialog box of the report.
    /// </summary>
    public void dialogSelectCtrl()
    {
        if (dialogGroupTaxCode.value() == NoYes::Yes && dialogSplitTaxCode.value() == NoYes::No)
        {
            dialogGroupTaxCode.value(NoYes::No);
        }
        if (dialogTransVAT.value() == NoYes::Yes && (dialogGroupTaxCode.value() == NoYes::Yes || dialogSplitTaxCode.value() == NoYes::Yes))
        {
            dialogTransVAT.value(NoYes::No);
        }
        if (dialogPeriod.value() && dialogFromPeriod.value())
        {
            if (! dialogToPeriod.value())
            {
                dialogToPeriod.value(TaxReportPeriod::find(dialogPeriod.value(), dialogFromPeriod.value()).ToDate);
            }
        }

        // Verify if the TaxFree column needs to be selected/unselected
        if (dialogPrintWithoutTax.value()== NoYes::Yes)
        {
            if (dialogTransVAT.value() == NoYes::Yes || dialogGroupTaxCode.value() == NoYes::Yes || dialogDetails.value() == NoYes::Yes)
            {
                dialogPrintWithoutTax.value(NoYes::No);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers data from the dialog box to the data contract object.
    /// </summary>
    public void getFromDialog()
    {
        super();
        taxReconciliationReportContract.parmDetails(dialogDetails.value());
        taxReconciliationReportContract.parmFromAccount(dialogFromAccount.value());
        taxReconciliationReportContract.parmToAccount(dialogToAccount.value());
        taxReconciliationReportContract.parmFromDate(dialogFromPeriod.value());
        taxReconciliationReportContract.parmToDate(dialogToPeriod.value());
        taxReconciliationReportContract.parmGroupTaxCode(dialogGroupTaxCode.value());
        taxReconciliationReportContract.parmSplitTaxCode(dialogSplitTaxCode.value());
        taxReconciliationReportContract.parmTaxPeriod(dialogPeriod.value());
        taxReconciliationReportContract.parmTransVAT(dialogTransVAT.value());
        taxReconciliationReportContract.parmPrintWithoutTax(dialogPrintWithoutTax.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method registers the dialog field methods to capture events.
    /// </summary>
    public void postRun()
    {
        super();

        // Override the methods of start account field.
        dialogFromAccount.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(TaxReconciliationReportUIBuilder, lookupMainAccount), this);

        // Override the methods of end account field.
        dialogToAccount.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(TaxReconciliationReportUIBuilder, lookupMainAccount), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for the main account field.
    /// </summary>
    /// <param name="_mainAccountControl">
    /// The <c>FormStringControl</c> for which the lookup fields need to be associated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookupMainAccount(FormStringControl _mainAccountControl)
    {
        MainAccount::lookupMainAccount(_mainAccountControl);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>