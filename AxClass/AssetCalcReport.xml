<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCalcReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetCalcReport
{
    AssetSumCalc  pyAssetSumCalc_Trans;   // Amounts regarding prior years;
    AssetSumCalc  tyAssetSumCalc_Trans;   // Amounts regarding reporting year;

    StartDate           startDate;
    EndDate             endDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>balanceEndPeriod</Name>
				<Source><![CDATA[
    AssetBalance_BalanceEndPeriod balanceEndPeriod()
    {
        return (this.columnAcquisitionEndPeriod()
                + this.columnDepreciationEndPeriod()
                + this.columnDerogatoryEndPeriod()
                + this.columnAdjEndPeriod());
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceStartPeriod</Name>
				<Source><![CDATA[
    AssetBalance_BalanceStartPeriod balanceStartPeriod()
    {
        return (this.columnAcquisitionStartPeriod()
                + this.columnDepreciationStartPeriod()
                + this.columnDerogatoryStartPeriod()
                + this.columnAdjStartPeriod());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAsset</Name>
				<Source><![CDATA[
    public void calcAsset(AssetBook _assetBook)
    {
        // Sum up prior year;
        pyAssetSumCalc_Trans = AssetSumCalc_Trans::newAssetPeriod(_assetBook.AssetId,_assetBook.BookId,dateNull(),startDate-1);

        pyAssetSumCalc_Trans.calc();

        // Sum up reporting year;
        tyAssetSumCalc_Trans = AssetSumCalc_Trans::newAssetPeriod(_assetBook.AssetId,_assetBook.BookId,startDate,endDate);

        tyAssetSumCalc_Trans.calc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAssetByCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>AssetSumCalc_Trans</c> class for the given asset values by currency.
    /// </summary>
    /// <param name = "_assetBook"></param>
    /// <param name = "_assetSumCalcType"></param>
    public void calcAssetByCurrency(AssetBook _assetBook, AssetSumCalcType _assetSumCalcType = AssetSumCalcType::MST)
    {
        // Sum up prior year;
        pyAssetSumCalc_Trans = AssetSumCalc_Trans::newAssetPeriodByCurrency(_assetBook.AssetId, _assetBook.BookId, dateNull(), startDate-1, _assetSumCalcType);
        pyAssetSumCalc_Trans.calc();

        // Sum up reporting year;
        tyAssetSumCalc_Trans = AssetSumCalc_Trans::newAssetPeriodByCurrency(_assetBook.AssetId, _assetBook.BookId, startDate, endDate, _assetSumCalcType);

        tyAssetSumCalc_Trans.calc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAccumulatedDepreciation</Name>
				<Source><![CDATA[
    AmountMST columnAccumulatedDepreciation()
    {
        return (tyAssetSumCalc_Trans.depreciationValue()                 +
                tyAssetSumCalc_Trans.depreciationValue_thisYear()        +
                tyAssetSumCalc_Trans.depreciationValue_priorYears()      +
                tyAssetSumCalc_Trans.depreciationAdjValue()              +
                tyAssetSumCalc_Trans.depreciationAdjValue_thisYear()     +
                tyAssetSumCalc_Trans.depreciationAdjValue_priorYears()   +
                tyAssetSumCalc_Trans.writeUpAdjValue()                   +
                tyAssetSumCalc_Trans.writeUpAdjValue_thisYear()          +
                tyAssetSumCalc_Trans.writeUpAdjValue_priorYears()        +
                tyAssetSumCalc_Trans.writeDownAdjValue()                 +
                tyAssetSumCalc_Trans.writeDownAdjValue_thisYear()        +
                tyAssetSumCalc_Trans.writeDownAdjValue_priorYears()      +
                tyAssetSumCalc_Trans.extraDepreciationValue()            +
                tyAssetSumCalc_Trans.extraDepreciationValue_thisYear()   +
                tyAssetSumCalc_Trans.extraDepreciationValue_priorYears() +
                tyAssetSumCalc_Trans.revaluationValue()                  +
                tyAssetSumCalc_Trans.revaluationValue_thisYear()         +
                tyAssetSumCalc_Trans.revaluationValue_priorYears()       +

                pyAssetSumCalc_Trans.depreciationValue()                 +
                pyAssetSumCalc_Trans.depreciationValue_thisYear()        +
                pyAssetSumCalc_Trans.depreciationValue_priorYears()      +
                pyAssetSumCalc_Trans.depreciationAdjValue()              +
                pyAssetSumCalc_Trans.depreciationAdjValue_thisYear()     +
                pyAssetSumCalc_Trans.depreciationAdjValue_priorYears()   +
                pyAssetSumCalc_Trans.writeUpAdjValue()                   +
                pyAssetSumCalc_Trans.writeUpAdjValue_thisYear()          +
                pyAssetSumCalc_Trans.writeUpAdjValue_priorYears()        +
                pyAssetSumCalc_Trans.writeDownAdjValue()                 +
                pyAssetSumCalc_Trans.writeDownAdjValue_thisYear()        +
                pyAssetSumCalc_Trans.writeDownAdjValue_priorYears()      +
                pyAssetSumCalc_Trans.extraDepreciationValue()            +
                pyAssetSumCalc_Trans.extraDepreciationValue_thisYear()   +
                pyAssetSumCalc_Trans.extraDepreciationValue_priorYears() +
                pyAssetSumCalc_Trans.revaluationValue()                  +
                pyAssetSumCalc_Trans.revaluationValue_thisYear()         +
                pyAssetSumCalc_Trans.revaluationValue_priorYears());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAcquisitionCurrentYear</Name>
				<Source><![CDATA[
    public AmountMST columnAcquisitionCurrentYear()
    {
        // Calculate the total acquisition cost, subtracting any reclassification amount,
        // since that's broken out into an extra field.
        return (tyAssetSumCalc_Trans.acquisitionValue()             +
                tyAssetSumCalc_Trans.acquisitionAdjValue()          +
                tyAssetSumCalc_Trans.capitalReserveTransferValue()  -
                tyAssetSumCalc_Trans.acquisitionReclassificationAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAcquisitionEndPeriod</Name>
				<Source><![CDATA[
    AssetBalance_AcquisitionEndPeriod columnAcquisitionEndPeriod()
    {
        return (this.columnAcquisitionStartPeriod() +
                this.columnAcquisitionReceiptRepYear()   +
                this.columnAcquisitionIssueRepYear());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAcquisitionIssueRepYear</Name>
				<Source><![CDATA[
    AssetBalance_AcquisitionIssueRepYear columnAcquisitionIssueRepYear()
    {
        return (tyAssetSumCalc_Trans.acquisitionValue_priorYears()      +
                tyAssetSumCalc_Trans.acquisitionValue_thisYear()        +
                tyAssetSumCalc_Trans.acquisitionAdjValue_priorYears()   +
                tyAssetSumCalc_Trans.acquisitionAdjValue_thisYear());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAcquisitionPriorYears</Name>
				<Source><![CDATA[
    AmountMST columnAcquisitionPriorYears()
    {
        return (pyAssetSumCalc_Trans.acquisitionValue()             +
                pyAssetSumCalc_Trans.acquisitionAdjValue()          +
                pyAssetSumCalc_Trans.capitalReserveTransferValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAcquisitionReceiptRepYear</Name>
				<Source><![CDATA[
    AssetBalance_AcquisitionReceiptRepYear columnAcquisitionReceiptRepYear()
    {
        return (tyAssetSumCalc_Trans.acquisitionValue()             +
                tyAssetSumCalc_Trans.capitalReserveTransferValue()  +
                tyAssetSumCalc_Trans.acquisitionAdjValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAcquisitionStartPeriod</Name>
				<Source><![CDATA[
    AssetBalance_AcquisitionStartPeriod columnAcquisitionStartPeriod()
    {
        return (pyAssetSumCalc_Trans.acquisitionValue()                     +
                pyAssetSumCalc_Trans.acquisitionAdjValue()                  +
                pyAssetSumCalc_Trans.capitalReserveTransferValue()          +
                pyAssetSumCalc_Trans.acquisitionValue_priorYears()          +
                pyAssetSumCalc_Trans.acquisitionValue_thisYear()            +
                pyAssetSumCalc_Trans.acquisitionAdjValue_priorYears()       +
                pyAssetSumCalc_Trans.acquisitionAdjValue_thisYear());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAdjEndPeriod</Name>
				<Source><![CDATA[
    AssetBalance_AdjEndPeriod columnAdjEndPeriod()
    {
        return (this.columnAdjStartPeriod()          +
                this.columnAdjWriteUpRepYear()       +
                this.columnAdjWriteDownRepYear()     +
                this.columnAdjRevaluationRepYear()   +
                this.columnAdjVoidedRepYear());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAdjRevaluationRepYear</Name>
				<Source><![CDATA[
    AssetBalance_AdjRevaluationRepYear columnAdjRevaluationRepYear()
    {
        return (tyAssetSumCalc_Trans.revaluationValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAdjStartPeriod</Name>
				<Source><![CDATA[
    AssetBalance_AdjStartPeriod columnAdjStartPeriod()
    {
        return (pyAssetSumCalc_Trans.revaluationValue()                 +
                pyAssetSumCalc_Trans.writeUpAdjValue()                  +
                pyAssetSumCalc_Trans.writeDownAdjValue()                +
                pyAssetSumCalc_Trans.writeUpAdjValue_priorYears()       +
                pyAssetSumCalc_Trans.writeDownAdjValue_priorYears()     +
                pyAssetSumCalc_Trans.revaluationValue_priorYears()      +
                pyAssetSumCalc_Trans.revaluationValue_thisYear()        +
                pyAssetSumCalc_Trans.writeUpAdjValue_thisYear()         +
                pyAssetSumCalc_Trans.writeDownAdjValue_thisYear());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAdjVoidedRepYear</Name>
				<Source><![CDATA[
    AssetBalance_AdjVoidedRepYear columnAdjVoidedRepYear()
    {
        return (tyAssetSumCalc_Trans.revaluationValue_priorYears()      +
                tyAssetSumCalc_Trans.revaluationValue_thisYear()        +
                tyAssetSumCalc_Trans.writeUpAdjValue_priorYears()       +
                tyAssetSumCalc_Trans.writeUpAdjValue_thisYear()         +
                tyAssetSumCalc_Trans.writeDownAdjValue_priorYears()     +
                tyAssetSumCalc_Trans.writeDownAdjValue_thisYear());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAdjWriteDownRepYear</Name>
				<Source><![CDATA[
    AssetBalance_AdjWriteDownRepYear columnAdjWriteDownRepYear()
    {
        return (tyAssetSumCalc_Trans.writeDownAdjValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAdjWriteUpReclassificationRepYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates adjustment write up reclassification reporting year.
    /// </summary>
    /// <returns>The calculated adjustment write up reclassification reporting year.</returns>
    public AmountMST columnAdjWriteUpReclassificationRepYear()
    {
        return tyAssetSumCalc_Trans.writeUpAdjReclassificationAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnAdjWriteUpRepYear</Name>
				<Source><![CDATA[
    AssetBalance_AdjWriteUpRepYear columnAdjWriteUpRepYear()
    {
        return tyAssetSumCalc_Trans.writeUpAdjValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnBonusDepreciationRepYear</Name>
				<Source><![CDATA[
    AssetBalance_DepreciationRepYear columnBonusDepreciationRepYear()
    {
        return (tyAssetSumCalc_Trans.bonusDepreciationValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnDepreciationAdjCurrentYear</Name>
				<Source><![CDATA[
    AmountMST columnDepreciationAdjCurrentYear()
    {
        return tyAssetSumCalc_Trans.depreciationAdjValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnDepreciationCurrentYear</Name>
				<Source><![CDATA[
    AmountMST columnDepreciationCurrentYear()
    {
        return (tyAssetSumCalc_Trans.depreciationValue()      +
                tyAssetSumCalc_Trans.bonusDepreciationValue() +
                tyAssetSumCalc_Trans.writeUpAdjValue()        +
                tyAssetSumCalc_Trans.writeDownAdjValue()      +
                tyAssetSumCalc_Trans.extraDepreciationValue() +
                tyAssetSumCalc_Trans.revaluationValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnDepreciationEndPeriod</Name>
				<Source><![CDATA[
    AssetBalance_DepreciationEndPeriod columnDepreciationEndPeriod()
    {
        return (this.columnDepreciationStartPeriod()    +
                this.columnDepreciationRepYear()        +
                this.columnDepreciationVoidedRepYear()  +
                this.columnBonusDepreciationRepYear());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnDepreciationRepYear</Name>
				<Source><![CDATA[
    AssetBalance_DepreciationRepYear columnDepreciationRepYear()
    {
        return (tyAssetSumCalc_Trans.depreciationValue()    +
                tyAssetSumCalc_Trans.depreciationAdjValue() +
                tyAssetSumCalc_Trans.extraDepreciationValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnDepreciationStartPeriod</Name>
				<Source><![CDATA[
    AssetBalance_DepreciationStartPeriod columnDepreciationStartPeriod()
    {
        return (pyAssetSumCalc_Trans.bonusDepreciationValue()           +
                pyAssetSumCalc_Trans.bonusDepreciationValue_priorYears() +
                pyAssetSumCalc_Trans.bonusDepreciationValue_thisYear()  +
                pyAssetSumCalc_Trans.extraDepreciationValue()           +
                pyAssetSumCalc_Trans.extraDepreciationValue_priorYears() +
                pyAssetSumCalc_Trans.extraDepreciationValue_thisYear()  +
                pyAssetSumCalc_Trans.depreciationValue()                +
                pyAssetSumCalc_Trans.depreciationAdjValue()             +
                pyAssetSumCalc_Trans.depreciationValue_priorYears()     +
                pyAssetSumCalc_Trans.depreciationValue_thisYear()       +
                pyAssetSumCalc_Trans.depreciationAdjValue_priorYears()  +
                pyAssetSumCalc_Trans.depreciationAdjValue_thisYear());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnDepreciationVoidedRepYear</Name>
				<Source><![CDATA[
    AssetBalance_DepreciationVoidedRepYear columnDepreciationVoidedRepYear()
    {
        return (tyAssetSumCalc_Trans.depreciationValue_priorYears()     +
                tyAssetSumCalc_Trans.depreciationValue_thisYear()       +
                tyAssetSumCalc_Trans.depreciationAdjValue_priorYears()  +
                tyAssetSumCalc_Trans.depreciationAdjValue_thisYear()    +
                tyAssetSumCalc_Trans.bonusDepreciationValue_priorYears() +
                tyAssetSumCalc_Trans.bonusDepreciationValue_thisYear()  +
                tyAssetSumCalc_Trans.extraDepreciationValue_priorYears() +
                tyAssetSumCalc_Trans.extraDepreciationValue_thisYear());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnDeprReclassificationRepYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates depreciation reclassification reporting year.
    /// </summary>
    /// <returns>The depreciation reclassification reporting year.</returns>
    public AmountMST columnDeprReclassificationRepYear()
    {
        return tyAssetSumCalc_Trans.depreciationReclassificationAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnDerogatoryDecrease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the derogatory decrease depreciation amount.
    /// </summary>
    /// <returns>The derogatory decrease depreciation amount.</returns>
    AmountMST columnDerogatoryDecrease()
    {
        return (tyAssetSumCalc_Trans.derogatoryDecreaseValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnDerogatoryEndPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarizes the derogatory depreciation amounts.
    /// </summary>
    /// <returns>The sum of the derogatory depreciation amounts.</returns>
    AssetBalance_DerogatoryEndPeriod_FR columnDerogatoryEndPeriod()
    {
        return (this.columnDerogatoryStartPeriod()
               + this.columnDerogatoryDecrease()
               + this.columnDerogatoryIncrease());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnDerogatoryIncrease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the derogatory increase depreciation amount.
    /// </summary>
    /// <returns>The derogatory increase depreciation amount.</returns>
    AssetBalance_DerogatoryIncrease_FR columnDerogatoryIncrease()
    {
        return (tyAssetSumCalc_Trans.derogatoryIncreaseValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnDerogatoryStartPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the derogatory depreciation amount.
    /// </summary>
    /// <returns>The derogatory depreciation amount.</returns>
    AssetBalance_DerogatoryStartPeriod_FR columnDerogatoryStartPeriod()
    {
        return (pyAssetSumCalc_Trans.derogatoryIncreaseValue()
               + pyAssetSumCalc_Trans.derogatoryDecreaseValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnDisposalsCurrentYear</Name>
				<Source><![CDATA[
    AmountMST columnDisposalsCurrentYear()
    {
        return (tyAssetSumCalc_Trans.acquisitionValue_thisYear()      +
                tyAssetSumCalc_Trans.acquisitionValue_priorYears()    +
                tyAssetSumCalc_Trans.acquisitionAdjValue_thisYear()   +
                tyAssetSumCalc_Trans.acquisitionAdjValue_priorYears() -
                tyAssetSumCalc_Trans.capitalReserveTransferValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnInterestRepYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates interest reporting year.
    /// </summary>
    /// <returns>The interest reporting year.</returns>
    public AmountMST columnInterestRepYear()
    {
        return tyAssetSumCalc_Trans.interestValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnInterestStartPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates interest start period.
    /// </summary>
    /// <returns>The interest start period.</returns>
    public AmountMST columnInterestStartPeriod()
    {
        return pyAssetSumCalc_Trans.interestValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnLowCostAssetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the low cost asset amount for the current year.
    /// </summary>
    /// <returns>
    ///    The calculated low cost asset amount for the current year.
    /// </returns>

    public AmountMST columnLowCostAssetAmount()
    {
        return (tyAssetSumCalc_Trans.lowCostAssetAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnLowValueAssetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the low value asset amount for the current year.
    /// </summary>
    /// <returns>
    ///    The calculated low value asset amount for the current year.
    /// </returns>

    public AmountMST columnLowValueAssetAmount()
    {
        return (tyAssetSumCalc_Trans.lowValueAssetAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnNetBookValueEndCurrentYear</Name>
				<Source><![CDATA[
    AmountMST columnNetBookValueEndCurrentYear()
    {
        return (tyAssetSumCalc_Trans.netBookValue()  +

                pyAssetSumCalc_Trans.netBookValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnNetBookValueEndLastYear</Name>
				<Source><![CDATA[
    AmountMST columnNetBookValueEndLastYear()
    {
        return (pyAssetSumCalc_Trans.netBookValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnReclassificationCurrentYear</Name>
				<Source><![CDATA[
    public AmountMST columnReclassificationCurrentYear()
    {
        return tyAssetSumCalc_Trans.acquisitionReclassificationAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnSecondElementCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the second element cost amount for the current year.
    /// </summary>
    /// <returns>
    ///    The calculated second element cost amount for the current year.
    /// </returns>

    public AmountMST columnSecondElementCostAmount()
    {
        return (tyAssetSumCalc_Trans.secondElementCostAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnSoldAndScrappedCurrentYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the sold and scrapped amount for the current year.
    /// </summary>
    /// <returns>
    ///    The calculated sold and scrapped amount for the current year.
    /// </returns>

    public AmountMST columnSoldAndScrappedCurrentYear()
    {
        return (tyAssetSumCalc_Trans.disposalValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(StartDate  _startDate,
             EndDate    _endDate)
    {
        startDate = _startDate;
        endDate = _endDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>