<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceGenerationService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The service of e-Invoice generation
/// </summary>
class EInvoiceGenerationService extends SysOperationServiceBase
{
    #ISOCountryRegionCodes

    const Caption formatMappingRunJobCaption = "@SYP4881730";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs full process of generating e-Invoice file.
    /// </summary>
    /// <param name="_contract">
    /// The contract instance.
    /// </param>
    public void generateEInvoice(EInvoiceGenerationDataContract _contract)
    {
        RecId invoiceRecId = _contract.parmInvoiceRecId();
        TableId tableId = _contract.parmInvoiceTableId();

        if (this.validateExistInvoiceRecord(tableId, invoiceRecId))
        {
            FieldId recIdfieldNum;
            OIOUBLReportController OIOUBLReportController = new OIOUBLReportController();
            str refNotes;

            switch (tableId)
            {
                case tableNum(CustInvoiceJour):
                    refNotes = this.getCustInvoiceNote(invoiceRecId);
                    recIdfieldNum = fieldNum(CustInvoiceJour, RecId);
                    break;

                case tableNum(ProjInvoiceJour):
                    refNotes = this.getProjInvoiceNote(invoiceRecId);
                    recIdfieldNum = fieldNum(ProjInvoiceJour, RecId);
                    OIOUBLReportController.parmPaymentIdEinvoice(this.findPaymentIdEinvoice(invoiceRecId));
                    break;

                default:
                    refNotes = DocuRef::findTableIdRecId(curExt(), tableId, invoiceRecId).Notes;
                    break;
            }

            OIOUBLReportController.parmDocuRefNote(refNotes);
            OIOUBLReportController.parmCopyIndicator(_contract.parmCopyIndicator() == PrintCopyOriginal::Copy ? true : false);

            ERModelDefinitionDatabaseContext context = new ERModelDefinitionDatabaseContext();
            context.addValue(tableId, recIdfieldNum, invoiceRecId);
            context.addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curExt());

            ERModelDefinitionParamsUIActionComposite parameters = new ERModelDefinitionParamsUIActionComposite();
            parameters.add(context);
            parameters.add(new ERModelDefinitionInputParametersAction());

            ERIFormatMappingRun formatMappingRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(_contract.parmERFormatMappingId())
                .withParameter(parameters)
                .withCreatingObjectParameter(EInvoiceConstants::ERModelNameInvoice, 'O_' + classStr(OIOUBLReportController), OIOUBLReportController)
                .withFileDestination(_contract.getFileDestination())
                .withFormatMappingRunJobCaption(formatMappingRunJobCaption)
                .withRunInBatchMode(true)
                .withIntegrationPoint(new ERIntegrationPointFactory().WithTableRecordsIntegrationPoint(tableId2Name(tableId)).ToIntegrationPoint());

            if (formatMappingRun is ERIFormatMappingRunWithController)
            {
                ERIFormatMappingRunWithController mappingRunWithController = formatMappingRun;
                ERIFormatMappingRunController controller = formatMappingRun.getController();
                mappingRunWithController.runWithController(controller);

                ERFormatMappingRunBaseContract contract = controller.getDataContractObject();

                EInvoiceGenerationBatchLink_W::findOrCreate(
                    contract.parmFormatMappingRunJobId(),
                    tableId,
                    invoiceRecId,
                    curExt());
            }
            else
            {
                formatMappingRun.run();

                EInvoiceGenerationService::setSentElectronicallyInvoiceRecord(
                    tableId,
                    invoiceRecId,
                    NoYes::Yes);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymentIdEinvoice</Name>
				<Source><![CDATA[
    private str findPaymentIdEinvoice(RecId _recId)
    {
        ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::findRecId(_recId);
        CustTable custTable = CustTable::find(projInvoiceJour.InvoiceAccount);
        PaymMoneyTransferSlip moneyTransferSlip = PaymMoneyTransferSlip::construct(custTable.GiroTypeProjInvoice);

        moneyTransferSlip.init(custTable.GiroTypeProjInvoice);
        return moneyTransferSlip.paymentId(projInvoiceJour.InvoiceAccount, projInvoiceJour.ProjInvoiceId, this.getNumberSeqHighestLen());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSeqHighestLen</Name>
				<Source><![CDATA[
    private int getNumberSeqHighestLen()
    {
        return strLen(int2str(NumberSeq::highest(ProjParameters::numRefProjNormalInvoiceId().NumberSequenceId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentRefForFormular</Name>
				<Source><![CDATA[
    private DocuRef getDocumentRefForFormular(DocuOnFormular _formular, DocuOnFormularTypeId _type, Common _invoiceTable)
    {
        DocuRef docRef;

        if (_formular == DocuOnFormular::Head || _formular == DocuOnFormular::All)
        {
            DocuRefSearch docRefSearch = DocuRefSearch::newTypeIdAndRestriction(_invoiceTable, _type, DocuRestriction::External);

            if (docRefSearch.next())
            {
                docRef = docRefSearch.docuRef();
            }
        }

        return docRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceNote</Name>
				<Source><![CDATA[
    private str getCustInvoiceNote(RecId _invoiceRecId)
    {
        CustFormletterDocument custFormletterDocument = CustFormletterDocument::find();
        CustInvoiceJour custInvoiceJourLoc;
        DocuRef documentRefLoc;
            
        custInvoiceJourLoc = CustInvoiceJour::findRecId(_invoiceRecId);

        if (custInvoiceJourLoc.SalesId)
        {
            documentRefLoc = this.getDocumentRefForFormular(custFormletterDocument.DocuOnInvoice,
                     custFormletterDocument.DocuTypeInvoice, custInvoiceJourLoc);
        }
        else
        {
            documentRefLoc = this.getDocumentRefForFormular(custFormletterDocument.DocuOnFreeTextInvoice,
                     custFormletterDocument.DocuTypeFreeTextInvoice, custInvoiceJourLoc);
        }

        return documentRefLoc.Notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceNote</Name>
				<Source><![CDATA[
    private str getProjInvoiceNote(RecId _invoiceRecId)
    {
        ProjFormletterDocument projFormLetterDocument = ProjFormletterDocument::find();
        ProjInvoiceJour projInvoiceJourLoc;
        DocuRef documentRefLoc;

        projInvoiceJourLoc = ProjInvoiceJour::findRecId(_invoiceRecId);

        documentRefLoc = this.getDocumentRefForFormular(projFormLetterDocument.DocuOnInvoice,
                projFormLetterDocument.DocuTypeOnInvoice, projInvoiceJourLoc);

        return documentRefLoc.Notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSentElectronicallyInvoiceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// The function sets SentElectronically for the invoice record.
    /// </summary>
    /// <param name = "_refTableId"> Reference of invoice table.</param>
    /// <param name = "_refRecId"> Reference of record.</param>
    /// <param name = "_value"> New value.</param>
    internal static void setSentElectronicallyInvoiceRecord(
        RefTableId _refTableId,
        RefRecId _refRecId,
        NoYes _value = NoYes::Yes)
    {
        if (SysDictField::findMappedFieldId(tableNum(CustVendInvoiceJour), fieldNum(CustVendInvoiceJour, SentElectronically), _refTableId))
        {
            CustVendInvoiceJour invoiceJour = new DictTable(_refTableId).makeRecord();

            ttsbegin;
            select firstonly forupdate invoiceJour
                where invoiceJour.RecId == _refRecId
                    && invoiceJour.SentElectronically != _value;

            if (invoiceJour.RecID)
            {
                invoiceJour.SentElectronically = _value;
                invoiceJour.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExistInvoiceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates data.
    /// </summary>
    /// <param name = "_refTableId"> Table reference id.</param>
    /// <param name = "_refRecId"> Record reference id.</param>
    /// <returns>Returns true if data is valid; otherwise, false.</returns>
    private boolean validateExistInvoiceRecord(
        RefTableId _refTableId,
        RefRecId _refRecId)
    {
        boolean ret = true;

        if (!_refTableId || !_refRecId)
        {
            ret = CheckFailed(strFmt("@SYS54195", funcName()));
        }

        if (ret)
        {
            Common record = new DictTable(_refTableId).makeRecord();

            select firstonly RecId from record
                where record.RecId == _refRecId;

            if (!record.RecId)
            {
                ret = checkFailed("@SYS303332");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>