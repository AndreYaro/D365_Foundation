<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTermJob_HRMAbsence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgTermJob_HRMAbsence</c> class represents jobs of type absence, which originate either from
///    the <see cref="T:HRMAbsenceCodeGroup" /> or the <see cref="T:HRMAbsenceCode" />.
/// </summary>
/// <remarks>
///    Instances of the <c>JmgTermJob_HRMAbsence</c> class represent jobs of type <c>Absence</c>. These
///    jobs originate from either the <c>HRMAbsenceCodeGroup</c> table or the <c>HRMAbsenceCode</c> table.
/// </remarks>
class JmgTermJob_HRMAbsence extends JmgTermJob
{
    HRMAbsenceCodeGroup hrmAbsenceCodeGroup;
    HRMAbsenceCode      hrmAbsenceCode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actOprId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the absence code of the absence job.
    /// </summary>
    /// <returns>
    ///    The absence code of the job.
    /// </returns>
    /// <remarks>
    ///    If the absence job is based on a <c>HRMAbsenceCode</c> record, the value of the <c>hrmAbsenceCodeId</c> field is returned. If the job is based on a <c>HRMAbsenceCodeGroup</c> record, an empty string
    ///    is returned.
    /// </remarks>
    public JmgActOprID actOprId()
    {
        JmgActOprID ret;

        ret = super();

        if (hrmAbsenceCode)
        {
            ret = hrmAbsenceCode.HrmAbsenceCodeId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether employees can create registrations on the absence job.
    /// </summary>
    /// <returns>
    ///    true if employees can create registrations on the absence job; otherwise, false.
    /// </returns>
    boolean allow()
    {
        boolean ret;

        ret = super();

        if (hrmAbsenceCode)
        {
            ret = hrmAbsenceCode.JmgSignIn;
        }
        else
        {
            ret = hrmAbsenceCodeGroup.JmgSignIn;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes source data for the absence job that the job is based on and loads either the
    ///    <c>HRMAbsenceCode</c> record or the <c>HRMAbsenceCodeGroup</c> record into memory.
    /// </summary>
    /// <param name="_jmgJobTable">
    ///    The <c>JmgJobTable</c> record with the corresponding job ID.
    /// </param>
    /// <param name="_sourceData">
    ///    If the source data has already been fetched from the database, the source data can be supplied as a
    ///    parameter. Optional.
    /// </param>
    /// <remarks>
    ///    This method is invoked from the <see cref="M:JmgTermJob.init" />.
    /// </remarks>
    protected void initSourceData(JmgJobTable _jmgJobTable, Common _sourceData = null)
    {
        if (_sourceData && _sourceData.TableId == tablenum(HRMAbsenceCode))
        {
            hrmAbsenceCode      = _sourceData;
            hrmAbsenceCodeGroup = HRMAbsenceCodeGroup::find(hrmAbsenceCode.HrmAbsenceCodeGroupId, selectSourceDataForUpdate);
        }
        else if (_sourceData && _sourceData.TableId == tablenum(HRMAbsenceCodeGroup))
        {
            hrmAbsenceCodeGroup = _sourceData;
        }
        else
        {
            if (_jmgJobTable.Type   == JmgJobTableType::HRMAbsenceCode)
            {
                hrmAbsenceCode      = HRMAbsenceCode::find(_jmgJobTable.OprActId, selectSourceDataForUpdate);
                hrmAbsenceCodeGroup = HRMAbsenceCodeGroup::find(hrmAbsenceCode.HrmAbsenceCodeGroupId, selectSourceDataForUpdate);
            }
            else if (_jmgJobTable.Type  == JmgJobTableType::HRMAbsenceCodeGroup)
            {
                hrmAbsenceCodeGroup = HRMAbsenceCodeGroup::find(_jmgJobTable.ModuleRefId, selectSourceDataForUpdate);
            }
            else
            {
                throw error(strfmt("@SYS22828", funcname()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the job description of the absence job.
    /// </summary>
    /// <returns>
    ///    The description associated with the absence job.
    /// </returns>
    public JmgDescription jobDescription()
    {
        JmgDescription ret;

        ret = super();

        if (hrmAbsenceCode)
        {
            ret = hrmAbsenceCode.Description;
        }
        else
        {
            ret = hrmAbsenceCodeGroup.Description;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobRef</Name>
				<Source><![CDATA[
    JmgJobRef jobRef()
    {
        if (hrmAbsenceCode)
        {
            return hrmAbsenceCode.HrmAbsenceCodeGroupId;
        }

        return hrmAbsenceCodeGroup.HrmAbsenceCodeGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourRegType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the journal registration type for absence jobs, which is
    ///    <c>JmgJourRegTypeEnum::Absence</c>.
    /// </summary>
    /// <returns>
    ///    The type of journal line to create when registrations are created on this kind of job. For absence
    ///    jobs, the return value is <c>JmgJourRegTypeEnum::Absence</c>.
    /// </returns>
    public JmgJourRegType jourRegType()
    {
        JmgJourRegType ret;
        ret = JmgJourRegTypeEnum::Absence;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeFeedback</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes feedback on a started job.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker who is making the feedback.
    /// </param>
    /// <param name="_regParameters">
    /// An instance of the <see cref="T:JmgRegistrationParameters" />, which encapsulates the parameters to
    /// the registration.
    /// </param>
    /// <param name="_regDate">
    /// The date when the feedback is made.
    /// </param>
    /// <param name="_regTime">
    /// The time when the feedback is made.
    /// </param>
    /// <remarks>
    /// This method does nothing when it is invoked on absence jobs.
    /// </remarks>
    public void makeFeedback(JmgWorkerRecId _worker, JmgRegistrationParameters _regParameters, JmgDate _regDate, JmgTime _regTime)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Makes a start or a stop job registration on this job.
    /// </summary>
    /// <param name="_worker">
    ///    The ID of the Worker who is making the registration.
    /// </param>
    /// <param name="_date">
    ///    The date of the registration.
    /// </param>
    /// <param name="_time">
    ///    The time of the registration.
    /// </param>
    /// <param name="_start">
    ///    false if it is a stop registration; otherwise, the default value of true indicates that it is a
    ///    start registration.
    /// </param>
    /// <param name="_registrationParameters">
    ///    Additional registration parameters that should be used to make the registration; optional.
    /// </param>
    /// <param name="_autoStamp">
    ///    A <c>NoYes::No</c> enumeration value if the registration is made by some function that is started
    ///    by a supervisor; otherwise the default value of a <c>NoYes::Yes</c> enumeration value indicates
    ///    that this registration is made by an employee.
    /// </param>
    /// <remarks>
    ///    An error is thrown if this method is invoked on absence jobs.It is impossible register directly on
    ///    absence jobs. Instead, specify these jobs in the <paramref name="_registrationParameters" />
    ///    parameter when you make a clock-in or clock-out registration.
    /// </remarks>
    public void makeRegistration(JmgWorkerRecId _worker, JmgDate _date, JmgTime _time, boolean _start = false, JmgRegistrationParameters _registrationParameters = null, NoYes _autoStamp = NoYes::No)
    {
        this.registrationError("@SYS39897");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the module that the job originates from. For absence jobs, this module is <c>JmgModuleEnum::IPC</c>.
    /// </summary>
    /// <returns>
    ///    The <c>JmgModuleEnum::IPC</c> module that the job originated from.
    /// </returns>
    JmgModuleEnum module()
    {
        return JmgModuleEnum::IPC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <see cref="T:JmgTermJob_HRMAbsence" />.
    /// </summary>
    /// <param name="_forUpdate">
    ///    Denotes whether the <c>HRMAbsencecode</c> record or <c>HRMAbsencecodeGroup</c> record should be
    ///    selected for update. Optional.
    /// </param>
    /// <remarks>
    ///    Don't use the <c>new</c> method to instantiate an instance of the <c>JmgTermJob_HRMAbsence</c>
    ///    class. Instead, use the <see cref="M:JmgTermJob::construct" /> or the <see
    ///    cref="M:JmgTermJob::constructJobTable" />.
    /// </remarks>
    void new(boolean _forUpdate = false)
    {
        super();
        selectSourceDataForUpdate = _forUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedStarted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether an absence job is reported as started. An absence job is always considered started.
    /// </summary>
    /// <returns>
    ///    true.
    /// </returns>
    public boolean reportedStarted()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireFeedbackInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether additional feedback is needed. Absence jobs never require additional feedback.
    /// </summary>
    /// <param name="_regParameters">
    ///    The registration parameters already given. Optional.
    /// </param>
    /// <returns>
    ///    false.
    /// </returns>
    public boolean requireFeedbackInfo(JmgRegistrationParameters _regParameters = null)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireStartupInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether additional startup information is needed. Absence jobs never require such information.
    /// </summary>
    /// <param name="_regParameters">
    ///    The registration parameters already given. Optional.
    /// </param>
    /// <returns>
    ///    false.
    /// </returns>
    public boolean requireStartupInfo(JmgRegistrationParameters _regParameters = null)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides access to the source data record that the job originates from, which is either an
    ///    <c>HRMAbsenceCode</c> record or an <c>HRMAbsenceCodeGroup</c> record.
    /// </summary>
    /// <returns>
    ///    Either an <c>HRMAbsenceCode</c> record or an <c>HRMAbsenceCodeGroup</c> record, depending on where
    ///    the job originates.
    /// </returns>
    /// <remarks>
    ///    If the returned record should be selected for update, the <see cref="M:JmgTermJob::construct" /> or
    ///    the <see cref="M:JmgTermJob::constructJobTable" /> should be invoked with the <paramref
    ///    name="_forUpdate" /> parameter set to true.
    /// </remarks>
    public Common sourceData()
    {
        if (hrmAbsenceCode)
        {
            return hrmAbsenceCode;
        }
        return hrmAbsenceCodeGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stampType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the stamp type associated with the job. For absence jobs, this is
    ///    <c>JmgStampTypeEnum::Absence</c>.
    /// </summary>
    /// <returns>
    ///    <c>JmgStampTypeEnum::Absence</c>.
    /// </returns>
    public JmgStampTypeEnum stampType()
    {
        return JmgStampTypeEnum::Absence;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>