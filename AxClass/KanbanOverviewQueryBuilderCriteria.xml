<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanOverviewQueryBuilderCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanOverviewQueryBuilderCriteria</c> class is the base class for the filter criteria that
///    is based on the overview controls the AIF Query Builders.
/// </summary>
public abstract class KanbanOverviewQueryBuilderCriteria extends AifQueryBuilder
{
    #define.argsPositionLegalEntity(1)
    #define.argsPositionKanbanBoardTmpFilterCriteria(2)     // must be last part of container

    KanbanOverviewQueryBuilderArgs args;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildItemRelationQueryBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to fetch the products for the kanban quantity overview control.
    /// </summary>
    /// <returns>
    /// The query for the products.
    /// </returns>
    protected Query buildItemRelationQueryBase()
    {
        Query                   queryBase = new Query();
        LegalEntity             legalEntity = this.legalEntity();
        CompanyInfo             companyInfo = CompanyInfo::findRecId(legalEntity);
        List                    productDimFields = InventDim::dimProductDimFieldList();
        ListEnumerator          enumerator = (productDimFields) ? productDimFields.getEnumerator() : null;

        queryBase.allowCrossCompany(true);

        // Lean Coverage
        QueryBuildDataSource qbdsLeanCoverage = queryBase.addDataSource(tableNum(LeanCoverage));
        qbdsLeanCoverage.fields().clearFieldList();
        qbdsLeanCoverage.fields().addField(fieldNum(LeanCoverage,RecId));
        qbdsLeanCoverage.fields().addField(fieldNum(LeanCoverage,AllocationId));
        qbdsLeanCoverage.fields().addField(fieldNum(LeanCoverage,ItemId));
        qbdsLeanCoverage.fields().addField(fieldNum(LeanCoverage,ItemDataAreaId));
        qbdsLeanCoverage.fields().addField(fieldNum(LeanCoverage,InventDimId));
        qbdsLeanCoverage.fields().addField(fieldNum(LeanCoverage,InventDimDataAreaId));
        qbdsLeanCoverage.fields().addField(fieldNum(LeanCoverage,RuleCoverageType));

        QueryBuildDataSource qbdsInventDim = qbdsLeanCoverage.addDataSource(tableNum(InventDim));
        qbdsInventDim.fields().clearFieldList();
        qbdsInventDim.fields().addField(fieldNum(InventDim,RecId));
        qbdsInventDim.fields().addField(fieldNum(InventDim,InventDimId));
        qbdsInventDim.fields().addField(fieldNum(InventDim,DataAreaId));
        if (enumerator)
        {
            while (enumerator.moveNext())
            {
                qbdsInventDim.fields().addField(enumerator.current());
            }
        }

        qbdsInventDim.fetchMode(QueryFetchMode::One2One);
        qbdsInventDim.joinMode(JoinMode::OuterJoin);
        qbdsInventDim.addLink(fieldNum(LeanCoverage,InventDimId),fieldNum(InventDim,InventDimId));
        qbdsInventDim.addLink(fieldNum(LeanCoverage,InventDimDataAreaId),fieldNum(InventDim,DataAreaId));

        // InventTable
        QueryBuildDataSource qbdsInventTable = qbdsLeanCoverage.addDataSource(tableNum(InventTable));
        qbdsInventTable.fields().clearFieldList();
        qbdsInventTable.fields().addField(fieldNum(InventTable,RecId));
        qbdsInventTable.fields().addField(fieldNum(InventTable,Product));
        qbdsInventTable.fields().addField(fieldNum(InventTable,ItemId));
        qbdsInventTable.fields().addField(fieldNum(InventTable,DataAreaId));

        qbdsInventTable.fetchMode(QueryFetchMode::One2One);
        qbdsInventTable.joinMode(JoinMode::OuterJoin);
        qbdsInventTable.addLink(fieldNum(LeanCoverage,ItemId),fieldNum(InventTable,ItemId));
        qbdsInventTable.addLink(fieldNum(LeanCoverage,ItemDataAreaId),fieldNum(InventTable,DataAreaId));

        // Translation
        // EcoResProductTranslation for product
        QueryBuildDataSource qbdsEcoResProductTranslation = qbdsLeanCoverage.addDataSource(tableNum(EcoResProductTranslation));
        qbdsEcoResProductTranslation.fields().clearFieldList();
        qbdsEcoResProductTranslation.fields().addField(fieldNum(EcoResProductTranslation, RecId));
        qbdsEcoResProductTranslation.fields().addField(fieldNum(EcoResProductTranslation, Product));
        qbdsEcoResProductTranslation.fields().addField(fieldNum(EcoResProductTranslation, Name));

        qbdsEcoResProductTranslation.fetchMode(QueryFetchMode::One2One);
        qbdsEcoResProductTranslation.joinMode(JoinMode::OuterJoin);
        qbdsEcoResProductTranslation.addLink(fieldNum(InventTable, Product), fieldNum(EcoResProductTranslation, Product), qbdsInventTable.name());
        qbdsEcoResProductTranslation.addRange(fieldNum(EcoResProductTranslation, LanguageId)).value(queryValue(companyInfo.LanguageId));

        // Lean Coverage Kanban Rule
        QueryBuildDataSource qbdsLeanCoverageKanbanRule = qbdsLeanCoverage.addDataSource(tableNum(LeanCoverageKanbanRule));
        qbdsLeanCoverageKanbanRule.fields().clearFieldList();
        qbdsLeanCoverageKanbanRule.fields().addField(fieldNum(LeanCoverageKanbanRule,RecId));
        qbdsLeanCoverageKanbanRule.fields().addField(fieldNum(LeanCoverageKanbanRule,KanbanRule));
        qbdsLeanCoverageKanbanRule.fields().addField(fieldNum(LeanCoverageKanbanRule,Coverage));

        qbdsLeanCoverageKanbanRule.fetchMode(QueryFetchMode::One2One);
        qbdsLeanCoverageKanbanRule.joinMode(JoinMode::InnerJoin);
        qbdsLeanCoverageKanbanRule.addLink(fieldNum(LeanCoverage,RecId), fieldNum(LeanCoverageKanbanRule,Coverage));

        // Kanban Rule
        QueryBuildDataSource qbdsKanbanRule = qbdsLeanCoverageKanbanRule.addDataSource(tableNum(KanbanRule));
        qbdsKanbanRule.fields().clearFieldList();
        qbdsKanbanRule.fields().addField(fieldNum(KanbanRule,RecId));
        qbdsKanbanRule.fields().addField(fieldNum(KanbanRule,MinimumAlertLevel));
        qbdsKanbanRule.fields().addField(fieldNum(KanbanRule,MaximumAlertLevel));
        qbdsKanbanRule.fields().addField(fieldNum(KanbanRule,RuleId));
        qbdsKanbanRule.fields().addField(fieldNum(KanbanRule,ReplenishmentStrategy));
        qbdsKanbanRule.fields().addField(fieldNum(KanbanRule,KanbanFlow));
        qbdsKanbanRule.fields().addField(fieldNum(KanbanRule,KanbanType));
        qbdsKanbanRule.addRange(fieldNum(KanbanRule, LegalEntity)).value(queryValue(legalEntity));

        qbdsKanbanRule.fetchMode(QueryFetchMode::One2One);
        qbdsKanbanRule.joinMode(JoinMode::InnerJoin);
        qbdsKanbanRule.addLink(fieldNum(LeanCoverageKanbanRule,KanbanRule),fieldNum(KanbanRule,RecId));

        // Kanban Rule Fixed
        QueryBuildDataSource qbdsKanbanRuleFixed = qbdsKanbanRule.addDataSource(tableNum(KanbanRuleFixed));
        qbdsKanbanRuleFixed.fetchMode(QueryFetchMode::One2One);
        qbdsKanbanRuleFixed.fields().clearFieldList();
        qbdsKanbanRuleFixed.fields().addField(fieldNum(KanbanRuleFixed,RecId));
        qbdsKanbanRuleFixed.fields().addField(fieldNum(KanbanRuleFixed,ReplenishmentLeadTime));
        qbdsKanbanRuleFixed.fields().addField(fieldNum(KanbanRuleFixed,ParentRecId));
        qbdsKanbanRuleFixed.fields().addField(fieldNum(KanbanRuleFixed,Level));

        qbdsKanbanRuleFixed.fetchMode(QueryFetchMode::One2One);
        qbdsKanbanRuleFixed.joinMode(JoinMode::OuterJoin);
        qbdsKanbanRuleFixed.addLink(fieldNum(KanbanRule, RecId),fieldNum(KanbanRuleFixed,ParentRecId));

        // add ordering
        qbdsKanbanRule.addOrderByField(fieldNum(KanbanRule,UrgencyLevel),SortOrder::Descending);

        return queryBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query arguments.
    /// </summary>
    /// <returns>
    /// A <c>KanbanOverviewQueryBuilderArgs</c> object.
    /// </returns>
    protected KanbanOverviewQueryBuilderArgs getArgs()
    {
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanBoardTmpFilterCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves filter criteria from query arguments.
    /// </summary>
    /// <returns>
    ///    The applicable filter criteria.
    /// </returns>
    protected KanbanBoardTmpFilterCriteria kanbanBoardTmpFilterCriteria()
    {
        container                       argsContainer = this.getArgs().parmQueryArgs();

        if (#argsPositionKanbanBoardTmpFilterCriteria  > 1)
        {
            [argsContainer] = condel(argsContainer,1,#argsPositionKanbanBoardTmpFilterCriteria-1);
        }

        KanbanBoardTmpFilterCriteria kanbanBoardTmpFilterCriteria = KanbanBoardTmpFilterCriteria::container2Record(argsContainer);

        return kanbanBoardTmpFilterCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>legalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a legal entity from query arguments.
    /// </summary>
    /// <returns>
    ///    The applicable legal entity.
    /// </returns>
    protected LegalEntity legalEntity()
    {
        container argsContainer = this.getArgs().parmQueryArgs();
        LegalEntity legalEntity = conpeek(argsContainer,#argsPositionLegalEntity);

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query arguments.
    /// </summary>
    /// <param name="_args">
    ///    A <c>KanbanOverviewQueryBuilderArgs</c> object.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The arguments are of the wrong type.
    /// </exception>
    public void setArgs(AifQueryBuilderArgs _args)
    {
        // Returns an error if this method is called and the args are NULL or if the
        // args class that is passed is not the correct class type.
        if (   _args == null
            || classidget(_args) != classnum(KanbanOverviewQueryBuilderArgs))
        {
            throw error("@SYS95118");
        }

        args = _args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateTimeNull2Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a string representation of the null datetime value.
    /// </summary>
    /// <returns>
    /// A string representation of the null datetime value.
    /// </returns>
    public static str dateTimeNull2Str()
    {
        utcdatetime     dateTime = DateTimeUtil::newDateTime(mkdate(1,1,2000),0);

        // toStr normally returns blank for utcDateTimeNull(),
        // return a correctly formatted string instead
        return strReplace(DateTimeUtil::toStr(dateTime),'2000','1900');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
