<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStatusReportSummaryCalc_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class calculates the data for InventStatus_CN report
/// </summary>
public abstract class InventStatusReportSummaryCalc_CN
{
    UserConnection userConnection;
    InventStatusContract_CN contract;
    InventDim inventDim;
    InventDimParm inventDimParm;
    createdTransactionId transactionID;

    Set setItemDim;

    // Display all fields list of grouping by for the <c>InventValueReportTmpLine</c>
    #define.InventValueReportTmpLineGroupBy(group by %1.LineType, %1.ResourceGroupId, %1.ResourceId, %1.ConfigId, %1.InventSizeId, %1.InventColorId,
        %1.InventStyleId, %1.InventVersionId, %1.InventStatusId, %1.InventSiteId, %1.InventLocationId, %1.WMSLocationId, %1.LicensePlateId, %1.InventBatchId,
        %1.InventSerialId, %1.ReferenceCategory, %1.TransBeginTime, %1.TransDate)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcBalanceQtyAmountByItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Qty and Amount of the Inventory status report by item group, item, inventory dimension, transaction type and transaction date
    /// </summary>
    /// <param name = "_lineType">
    /// The line type was used
    /// </param>
    /// <param name = "_itemGroupId">
    /// The item group was used
    /// </param>
    /// <param name = "_itemId">
    /// The item number was used
    /// </param>
    /// <param name = "_inventDim">
    /// The <c>InventDim</c> was used
    /// </param>
    /// <param name = "_inventDimParm">
    /// The <c>InventDimParm</c> was used
    /// </param>
    /// <param name = "_isTransType">
    /// If the '_isTransType' = Yes, calculate the report qty and amount by the transaction type
    /// </param>
    /// <param name = "_inventTransType">
    /// The transaction type was used
    /// </param>
    /// <param name = "_isRecevied">
    /// If the '_isRecevied' = Yes, calculate the report qty and amount based on the transaction type: Recevied
    /// </param>
    /// <param name = "_isIssued">
    /// If the '_isIssued' = Yes, calculate the report qty and amount based on the transaction type: Issued
    /// </param>
    /// <param name = "_isTransDate">
    /// If the '_isTransDate' = Yes, calculate the report qty and amount by transaction date time
    /// </param>
    /// <param name = "_transDate">
    /// The transaction date time was used
    /// </param>
    /// <returns>
    /// The Qty and Amount of the Inventory status report
    /// </returns>
    public container calcBalanceQtyAmountByItemDim(
        InventValueReportLineType   _lineType,
        ItemGroupId                 _itemGroupId,
        ItemId                      _itemId,
        InventDim                   _inventDim,
        InventDimParm               _inventDimParm,
        boolean                     _isTransType = false,
        InventTransType             _inventTransType = InventTransType::Sales,
        boolean                     _isRecevied = false,
        boolean                     _isIssued = false,
        boolean                     _isTransDate = false,
        TransDate                   _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
        )
    {
        InventValueReportTmpLine inventValueReportTmpLine;
        inventValueReportTmpLine.setConnection(userConnection);
        boolean isCalcWithAdjustFlightEnabled = InventStatusReportCalcWithAdjustmentFlight_CN::instance().isEnabled();

        select sum(InventoryPhysicalNonPostedQty), sum(InventoryPhysicalPostedQty), sum(InventoryPhysicalNonPostedAmount), sum(InventoryPhysicalPostedAmount),
                sum(InventoryFinancialQty), sum(InventoryFinancialAmount) from inventValueReportTmpLine
            where inventValueReportTmpLine.CreatedTransactionId == transactionID
                && inventValueReportTmpLine.ResourceType == InventValueReportResourceType::Material
                && inventValueReportTmpLine.LineType            == _lineType
                && inventValueReportTmpLine.ResourceGroupId     == _itemGroupId
                &&  inventValueReportTmpLine.ResourceId         == _itemId
                &&  (inventValueReportTmpLine.ConfigId          == _inventDim.ConfigId              || ! _inventDimParm.ConfigIdFlag)
                &&  (inventValueReportTmpLine.InventSizeId      == _inventDim.InventSizeId          || ! _inventDimParm.InventSizeIdFlag)
                &&  (inventValueReportTmpLine.InventColorId     == _inventDim.InventColorId         || ! _inventDimParm.InventColorIdFlag)
                &&  (inventValueReportTmpLine.InventStyleId     == _inventDim.InventStyleId         || ! _inventDimParm.InventStyleIdFlag)
                &&  (inventValueReportTmpLine.InventVersionId   == _inventDim.InventVersionId       || ! _inventDimParm.InventVersionIdFlag)
                &&  (inventValueReportTmpLine.InventStatusId    == _inventDim.InventStatusId        || ! _inventDimParm.InventStatusFlag)
                &&  (inventValueReportTmpLine.InventSiteId      == _inventDim.InventSiteId          || ! _inventDimParm.InventSiteIdFlag)
                &&  (inventValueReportTmpLine.InventLocationId  == _inventDim.InventLocationId      || ! _inventDimParm.InventLocationIdFlag)
                &&  (inventValueReportTmpLine.WMSLocationId     == _inventDim.WMSLocationId         || ! _inventDimParm.WMSLocationIdFlag)
                &&  (inventValueReportTmpLine.LicensePlateId    == _inventDim.LicensePlateId        || ! _inventDimParm.LicensePlateFlag)
                &&  (inventValueReportTmpLine.InventBatchId     == _inventDim.InventBatchId         || ! _inventDimParm.InventBatchIdFlag)
                &&  (inventValueReportTmpLine.InventSerialId    == _inventDim.InventSerialId        || ! _inventDimParm.InventSerialIdFlag)
                &&  (inventValueReportTmpLine.ReferenceCategory ==  _inventTransType                || !_isTransType)
                &&  (inventValueReportTmpLine.TransDate         ==  _transDate                      || !_isTransDate)
                //Receive
                && (((inventValueReportTmpLine.InventoryFinancialQty == 0 && (inventValueReportTmpLine.InventoryPhysicalPostedQty > 0 || inventValueReportTmpLine.InventoryPhysicalNonPostedQty > 0))
                    || (inventValueReportTmpLine.InventoryFinancialQty == 0 && inventValueReportTmpLine.InventoryPhysicalPostedQty == 0 && inventValueReportTmpLine.InventoryPhysicalNonPostedQty == 0
                        && (!isCalcWithAdjustFlightEnabled || inventValueReportTmpLine.ReferenceCategory == InventTransType::Purch))
                    || inventValueReportTmpLine.InventoryFinancialQty > 0)
                    || !_isRecevied)
                //Issue
                &&  (((inventValueReportTmpLine.InventoryFinancialQty == 0 && (inventValueReportTmpLine.InventoryPhysicalPostedQty < 0 || inventValueReportTmpLine.InventoryPhysicalNonPostedQty < 0)) 
                    || (inventValueReportTmpLine.InventoryFinancialQty == 0 && inventValueReportTmpLine.InventoryPhysicalPostedQty == 0 && inventValueReportTmpLine.InventoryPhysicalNonPostedQty == 0
                        && isCalcWithAdjustFlightEnabled && inventValueReportTmpLine.ReferenceCategory == InventTransType::Sales)
                    || inventValueReportTmpLine.InventoryFinancialQty < 0)
                    || !_isIssued);
                ;

        return [inventValueReportTmpLine.InventoryPhysicalNonPostedQty + inventValueReportTmpLine.InventoryPhysicalPostedQty + inventValueReportTmpLine.InventoryFinancialQty,
                inventValueReportTmpLine.InventoryPhysicalNonPostedAmount + inventValueReportTmpLine.InventoryPhysicalPostedAmount + inventValueReportTmpLine.InventoryFinancialAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>InventDimParm</c>
    /// </summary>
    public void initInventDimParm()
    {
        inventDimParm.ConfigIdFlag = contract.parmIsViewConfigId();
        inventDimParm.InventSizeIdFlag = contract.parmIsViewInventSizeId();
        inventDimParm.InventColorIdFlag = contract.parmIsViewInventColorId();
        inventDimParm.InventStyleIdFlag = contract.parmIsViewInventStyleId();
        inventDimParm.InventVersionIdFlag = contract.parmIsViewInventVersionId();
        inventDimParm.InventStatusFlag = contract.parmIsViewInventStatus();
        inventDimParm.InventSiteIdFlag = contract.parmIsViewInventSiteId();
        inventDimParm.InventLocationIdFlag = contract.parmIsViewInventLocationId();
        inventDimParm.InventBatchIdFlag = contract.parmIsViewInventBatchId();
        inventDimParm.WMSLocationIdFlag = contract.parmIsViewWMSLocationId();
        inventDimParm.InventSerialIdFlag = contract.parmIsViewInventSerialId();

        inventDimParm.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the <c>InventDim</c>
    /// </summary>
    public void initInventDim(InventValueReportTmpLine _inventValueReportLine)
    {
        inventDim.configId = inventDimParm.ConfigIdFlag ? _inventValueReportLine.configId : '';
        inventDim.InventSizeId = inventDimParm.InventSizeIdFlag ? _inventValueReportLine.InventSizeId : '';
        inventDim.InventColorId = inventDimParm.InventColorIdFlag ? _inventValueReportLine.InventColorId : '';
        inventDim.InventStyleId = inventDimParm.InventStyleIdFlag ? _inventValueReportLine.InventStyleId : '';
        inventDim.InventVersionId = inventDimParm.InventVersionIdFlag ? _inventValueReportLine.InventVersionId : '';
        inventDim.InventStatusId = inventDimParm.InventStatusFlag ? _inventValueReportLine.InventStatusId : '';
        inventDim.inventSiteId = inventDimParm.InventSiteIdFlag ? _inventValueReportLine.InventSiteId : '';
        inventDim.inventLocationId = inventDimParm.InventLocationIdFlag ? _inventValueReportLine.InventLocationId : '';
        inventDim.wmsLocationId = inventDimParm.WMSLocationIdFlag ? _inventValueReportLine.WMSLocationId : '';
        inventDim.inventBatchId = inventDimParm.InventBatchIdFlag ? _inventValueReportLine.InventBatchId : '';
        inventDim.inventSerialId = inventDimParm.InventSerialIdFlag ? _inventValueReportLine.InventSerialId : '';

        inventDim = InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventStatusReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits the item group, item and inventory dimension for the <c>InventStatusReportTmp</c>
    /// </summary>
    public void initInventStatusReport(InventStatusReportTmp_CN _inventStatusReportTmp, InventValueReportTmpLine _inventValueReportLine)
    {
        _inventStatusReportTmp.ResourceGroupId = _inventValueReportLine.ResourceGroupId;
        _inventStatusReportTmp.ResourceId = _inventValueReportLine.ResourceId;
        _inventStatusReportTmp.configId = _inventValueReportLine.configId;
        _inventStatusReportTmp.InventSizeId = _inventValueReportLine.InventSizeId;
        _inventStatusReportTmp.InventColorId = _inventValueReportLine.InventColorId;
        _inventStatusReportTmp.InventStyleId = _inventValueReportLine.InventStyleId;
        _inventStatusReportTmp.InventVersionId = _inventValueReportLine.InventVersionId;
        _inventStatusReportTmp.InventSiteId = _inventValueReportLine.InventSiteId;
        _inventStatusReportTmp.InventLocationId = _inventValueReportLine.InventLocationId;
        _inventStatusReportTmp.WMSLocationId = _inventValueReportLine.WMSLocationId;
        _inventStatusReportTmp.InventStatusId = _inventValueReportLine.InventStatusId;
        _inventStatusReportTmp.LicensePlateId = _inventValueReportLine.LicensePlateId;
        _inventStatusReportTmp.InventBatchId = _inventValueReportLine.InventBatchId;
        _inventStatusReportTmp.InventSerialId = _inventValueReportLine.InventSerialId;

        InventTable inventTable = InventTable::find(_inventValueReportLine.ResourceId);
        if (inventTable)
        {
            _inventStatusReportTmp.ProductName = inventTable.productName(CompanyInfo::languageId());
            _inventStatusReportTmp.InventUnit = inventTable.inventUnitId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits the default values
    /// </summary>
    public void init()
    {
        setItemDim = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic
    /// </summary>
    public void calcReportData()
    {
        this.initInventDimParm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    public UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    public InventStatusContract_CN parmContract(InventStatusContract_CN _contract = contract)
    {
        contract = _contract;
        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        inventDim = _inventDim;
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionID</Name>
				<Source><![CDATA[
    public createdTransactionId parmTransactionID(createdTransactionId _transactionID = transactionID)
    {
        transactionID = _transactionID;
        return transactionID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventStatusReportSummaryCalc_CN construct(
        UserConnection _userConnection,
        InventStatusContract_CN _contract,
        InventSumReportType_CN _inventSumReportType,
        createdTransactionId _transactionID)
    {
        InventStatusReportSummaryCalc_CN instance;

        switch (_inventSumReportType)
        {
            case InventSumReportType_CN::Period :
                instance = InventStatusReportSummaryCalcByperiod_CN::construct(_userConnection, _contract, _transactionID);
                break;
            case InventSumReportType_CN::ByType :
                instance = InventStatusReportSummaryCalcByTransType_CN::construct(_userConnection, _contract, _transactionID);
                break;
            case InventSumReportType_CN::ByItem :
                instance = InventStatusReportSummaryCalcBySingleItem_CN::construct(_userConnection, _contract, _transactionID);
                break;
            default:
                throw Exception::FunctionArgument;
        }

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>