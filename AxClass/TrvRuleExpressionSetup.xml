<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvRuleExpressionSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TrvRuleExpressionSetup</c> class is used for policy expressions on the expense line.
/// </summary>
[
ExpressionCurrencyFieldMapAttribute(methodStr(TrvRuleExpressionSetup, parmTotalAmount), methodStr(TrvRuleExpressionSetup, parmAccountingCurrencyCode)),
ExpressionCurrencyFieldMapAttribute(methodStr(TrvRuleExpressionSetup, parmAmountForDayPerCategory), methodStr(TrvRuleExpressionSetup, parmAccountingCurrencyCode)),
ExpressionCurrencyLEAttribute(tableStr(TrvPolicyExpBuildView), fieldStr(TrvPolicyExpBuildView, LegalEntity)),
ExpressionCurrExchRateDateAttribute(tableStr(TrvPolicyExpBuildView), fieldStr(TrvPolicyExpBuildView, TransDate))
]
class TrvRuleExpressionSetup extends WorkflowDocument
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the query name for this workflow document.
    /// </summary>
    /// <returns>
    ///    The query name from the AOT.
    /// </returns>
    QueryName getQueryName()
    {
        if (TrvExprBuilderForInterCompanyProjFeature::isEnabled())
        {
            return queryStr(TrvRuleExpressionSetupProject);
        }
        return queryStr(TrvRuleExpressionSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the accounting currency code from the ledger associated with the legal entity of the
    /// record.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The accounting currency code from the ledger associated with the legal entity of the record.
    /// </returns>
    [ExpressionFieldHideAttribute]
    public CurrencyCode parmAccountingCurrencyCode(
            CompanyId _companyId,
            TableId   _tableId,
            RecId     _recId)
    {
        TrvExpTrans trvExpTrans = TrvExpTrans::find(_recId);

        return Ledger::accountingCurrency(trvExpTrans.LegalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountForDayPerCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives the total expense amount for the date and the category in the ledger accounting currency.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The total expense amount for the date and the category
    /// </returns>
    public TrvAmountForDayPerCategory parmAmountForDayPerCategory(
            CompanyId _companyId,
            TableId   _tableId,
            RecId     _recId)
    {
        TrvExpTrans currTrvExpTrans;
        TrvExpTrans trvExpTrans;

        currTrvExpTrans = TrvExpTrans::find(_recId);

        // Do not consider those lines
        if (currTrvExpTrans.SplitLineType != TrvExpSplitLineType::SplitHeader)
        {
            select sum(AmountMST) from trvExpTrans where
                trvExpTrans.ExpNumber == currTrvExpTrans.ExpNumber &&
                trvExpTrans.CostType  == currTrvExpTrans.CostType  &&
                trvExpTrans.TransDate == currTrvExpTrans.TransDate &&
                trvExpTrans.LineType  != TrvExpLineType::ItemizedHeader &&
                trvExpTrans.SplitLineType != TrvExpSplitLineType::SplitHeader;
        }

        return trvExpTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives the city on the expense line.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The city on the expense line.
    /// </returns>
    public LogisticsAddressCityName parmCity(
            CompanyId _companyId,
            TableId   _tableId,
            RecId     _recId)
    {
        TrvExpTrans trvExpTrans;

        select AddressCity from trvExpTrans where trvExpTrans.RecId == _recId;
        return trvExpTrans.editCity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasReceiptsAttached</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the expense report has any receipts attached to it.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// true if the expense report has attached receipts; otherwise, false.
    /// </returns>
    public TrvHasReceiptsAttached parmHasReceiptsAttached(
                                        CompanyId _companyId,
                                        TableId   _tableId,
                                        RecId     _recId)
    {
        TrvExpTrans trvExpTrans;
        TrvReceiptsHelper trvReceiptsHelper = new TrvReceiptsHelper();

        select firstonly TrvExpTable from trvExpTrans where trvExpTrans.RecId == _recId;

        return trvReceiptsHelper.isDocumentAttachedToExpenseReport(trvExpTrans.TrvExpTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInternational</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the expense is an international expense.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// true if it is international expense; otherwise, false.
    /// </returns>
    public TrvIsExpenseInternational parmInternational(
            CompanyId _companyId,
            TableId   _tableId,
            RecId     _recId)
    {
        TrvExpTrans trvExpTrans;
        NoYes       isInternational;

        select CountryRegion, LegalEntity from trvExpTrans where trvExpTrans.RecId == _recId;

        if (trvExpTrans.CountryRegion == ''
            || trvExpTrans.CountryRegion == SysCountryRegionCode::getCountryRegionIdByIsoCode(SysCountryRegionCode::partyCountryInfo(trvExpTrans.LegalEntity)))
        {
            isInternational = NoYes::No;
        }
        else
        {
            isInternational = NoYes::Yes;
        }

        return isInternational;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTaxRecoverable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the expense line tax is recoverable.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The Table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The Record ID of the record.
    /// </param>
    /// <returns>
    /// true if the expense line tax is recoverable; otherwise, false.
    /// </returns>
    public TrvTaxRecoverable parmIsTaxRecoverable(
            CompanyId _companyId,
            TableId   _tableId,
            RecId     _recId)
    {
        TrvExpTrans trvExpTrans;

        select firstonly SubCategoryRecId, LineType from trvExpTrans where trvExpTrans.RecId == _recId;

        return trvExpTrans.isTaxRecoverable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreferredMerchant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the expense is made with a preferred merchant.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the <c>TrvExpTrans</c> record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the <c>TrvExpTrans</c> record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the <c>TrvExpTrans</c> record.
    /// </param>
    /// <returns>
    /// true if it is a preferred merchant; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A merchant that is not in the <c>TrvExpMerchant</c> table is considered not to be a preferred
    /// merchant.
    /// </remarks>
    public TrvIsPreferredMerchant parmPreferredMerchant(
            CompanyId _companyId,
            TableId   _tableId,
            RecId     _recId)
    {
        TrvExpTrans     trvExpTrans;
        TrvExpMerchant  trvExpMerchant;
        NoYes           isPreferred;

        // This would be very bad and cause undefined behavior in many places
        Debug::assert(_tableId == tableNum(TrvExpTrans));

        select firstonly MerchantId from trvExpTrans where trvExpTrans.RecId == _recId;

        // If the user has not entered a merchant, the absence of a merchant is considered "preferred"
        // since the reason this parm method is here is to handle the case when the user free-text
        // enters a merchant (rather than chooses one from the lookup that is in the table) and we want
        // that particular case to be considered NOT preferred.
        // Do note that this will set off false-positive policy violations if anyone ever tries to
        // create a rule to fire when Merchant.Preferred == Yes
        if (trvExpTrans.MerchantId == '')
        {
            return NoYes::Yes;
        }

        select firstonly RecId, Preferred from trvExpMerchant where trvExpMerchant.MerchantId == trvExpTrans.MerchantId;

        // If there is no record in TrvExpMerchant for this merchant, then the user must have entered
        // a custom merchant and we want to consider such an entry as NOT preferred
        if (trvExpMerchant.RecId == 0)
        {
            isPreferred = NoYes::No;
        }
        // Otherwise the merchant IS in the table, so just go ahead and return their Preferred value
        else
        {
            isPreferred = trvExpMerchant.Preferred;
        }

        return isPreferred;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount for the expense report in the ledger accounting currency.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The total amount for the expense report.
    /// </returns>
    public TrvTotalExpenseAmount parmTotalAmount(
            CompanyId _companyId,
            TableId   _tableId,
            RecId     _recId)
    {
        TrvExpTrans trvExpTrans;
        TrvExpTable trvExpTable;

        select ExpNumber, RecId from trvExpTable
            join AmountMST, ExpNumber, LineType, LegalEntity, TrvExpTable from trvExpTrans
                where trvExpTrans.RecId == _recId && trvExpTrans.TrvExpTable == trvExpTable.RecId;

        return trvExpTable.total();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ZIP code on the expense line.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The ZIP code on the expense line.
    /// </returns>
    public LogisticsAddressZipCodeId parmZipCode(
            CompanyId _companyId,
            TableId   _tableId,
            RecId     _recId)
    {
        TrvExpTrans trvExpTrans;

        select AddressZipCode from trvExpTrans where trvExpTrans.RecId == _recId;
        return trvExpTrans.editZipCode();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>