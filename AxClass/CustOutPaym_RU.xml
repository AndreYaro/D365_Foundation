<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustOutPaym_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustOutPaym_RU extends CustOutPaym
{
    BankPaymentOrderJour_RU      paymentOrderJour;
    NoYes                        printWarrantText;
    DialogField                  dialogPrintWarrantText;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        printWarrantText
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBankAccountNumber</Name>
				<Source><![CDATA[
        public boolean checkBankAccountNumber()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
        public void close()
    {
        if (outPaymRecordList.elements())
        {
            this.printDocument();
        }
        else
        {
            info(strFmt("@GLS106940", this.interfaceName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPaymentOrder</Name>
				<Source><![CDATA[
        protected void fillPaymentOrder(LedgerJournalTrans    _ledgerJournalTrans,
                                    CustVendOutPaymRecord _custOutPaymRecord)
    {
        BankGroup       bankGroup;
        BankAccountMap  bankAccountMap      = _custOutPaymRecord.parmCustVendPaym().bankAccountMap();
        AccountNum      accountNum          = _custOutPaymRecord.parmCustVendPaym().ledgerJournalTrans().parmAccount();
        AccountNum      bankPrintAccountNum = _custOutPaymRecord.parmCustVendPaym().ledgerJournalTrans().BankPrintAccountNum_RU;
        ;

        paymentOrderJour.PaymentOrderNum     = this.paymentOrderNum(_ledgerJournalTrans);

        paymentOrderJour.initFromLedgerJournalTrans(_ledgerJournalTrans);

        paymentOrderJour.AmountCur           = -1 * _custOutPaymRecord.parmCustVendPaym().paymAmountInForeignCurrency();
        paymentOrderJour.CurrencyCode        = Currency::findCurrencyCodeISO(_custOutPaymRecord.parmCustVendPaym().paymCurrencyCode()).CurrencyCode;

        paymentOrderJour.BankIdPayer         = _custOutPaymRecord.parmCustVendPaym().bankAccountTable().AccountID;

        paymentOrderJour.AccountNumRecipient = bankPrintAccountNum;
        paymentOrderJour.CompanyRecipient    = _custOutPaymRecord.parmCustVendPaym().ledgerJournalTrans().Company;

        paymentOrderJour.CustVendPaymAccount = accountNum;
        paymentOrderJour.PurposeOfPayment    = _ledgerJournalTrans.BankCentralBankPurposeText;
        paymentOrderJour.ElectronicPayment   = this.parmClientBank_RU();

        if (printWarrantText && ! this.parmClientBank_RU())
        {
            if (paymentOrderJour.CompanyRecipient != curext())
            {
                changecompany(paymentOrderJour.CompanyRecipient)
                {
                    paymentOrderJour.PurposeOfPayment += strfmt("@GLS112132", CompanyInfo::find().Name);
                }
            }
            else if (bankPrintAccountNum)
            {
                paymentOrderJour.PurposeOfPayment += strfmt("@GLS112132", CustTable::find(accountNum).name());
            }
        }

        if (! paymentOrderJour.AccountNumRecipient)
        {
            paymentOrderJour.AccountNumRecipient = accountNum;
        }

        if (bankAccountMap.ForeignBank_RU)
        {
            paymentOrderJour.AccountNumForeignRecipient = accountNum;

            bankGroup = BankGroup::findByCompany_W(bankAccountMap.company(), bankAccountMap.ForeignBank_RU);
            paymentOrderJour.CorrBankRecipient = paymentOrderJour.AccountNumRecipient == CustTable::findByPartyRecId(VendTable::findByCompany(bankAccountMap.company(), bankGroup.VendAccountNum_RU).Party).AccountNum;

            if (bankPrintAccountNum && ! paymentOrderJour.CorrBankRecipient)
            {
                paymentOrderJour.AccountNumForeignRecipient = bankPrintAccountNum;
            }
        }

        paymentOrderJour.BankIdRecipient = bankAccountMap.AccountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            printWarrantText  = dialogPrintWarrantText.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numSeqTypeId</Name>
				<Source><![CDATA[
        abstract public int numSeqTypeId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
        public void open()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentOrderNum</Name>
				<Source><![CDATA[
        private BankPaymentOrder_RU paymentOrderNum(LedgerJournalTrans _ledgerJournalTrans)
    {
        NumberSeq           numberSeq;
        BankAccountTable    bankAccountTable;
        BankPaymentOrder_RU paymentOrderNum;

        if (! _ledgerJournalTrans.DocumentNum)
        {
            bankAccountTable = BankAccountTable::find(_ledgerJournalTrans.parmOffsetAccount());
            if (bankAccountTable.PaymOrderNumSeqId_W)
            {
                numberSeq = NumberSeq::newGetNumFromCode(bankAccountTable.PaymOrderNumSeqId_W);
            }
            else
            {
                numberSeq = NumberSeq::newGetNum(NumberSeqReference::findReference(this.numSeqTypeId()));
            }
            paymentOrderNum = numberSeq.num();
        }
        else
        {
            paymentOrderNum = _ledgerJournalTrans.DocumentNum;
        }

        return paymentOrderNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument</Name>
				<Source><![CDATA[
        public void printDocument()
    {
        ;

        if (printDocument)
        {
            this.runReport(menuitemOutputStr(CustVendOutPaymReport_RU));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releasePaymentOrderNum_RU</Name>
				<Source><![CDATA[
        public void releasePaymentOrderNum_RU(LedgerJournalTrans _ledgerJournalTrans, BankPaymentOrder_RU _orderNum)
    {
        NumberSequenceCode  numberSequenceCode;
        BankAccountTable    bankAccountTable;

        super(_ledgerJournalTrans, _orderNum);

        if (!_ledgerJournalTrans.DocumentNum)
        {
            bankAccountTable = BankAccountTable::find(_ledgerJournalTrans.parmOffsetAccount());
            if (bankAccountTable.PaymOrderNumSeqId_W)
            {
                numberSequenceCode = bankAccountTable.PaymOrderNumSeqId_W;
            }
            else
            {
                numberSequenceCode = NumberSeqReference::findReference(this.numSeqTypeId()).numberSequenceTable().NumberSequence;
            }

            try
            {
                NumberSeq::release(numberSequenceCode, _orderNum);
            }
            catch (Exception::Error)
            {
                error(strFmt("@GLS105137", numberSequenceCode, _orderNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container packedClass)
    {
        Integer   version = RunBase::getVersion(packedClass);
        container con;

        switch (version)
        {
            case #CurrentVersion :

                [version, #CurrentList, con] = packedClass;
                super(con);

                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTrans</Name>
				<Source><![CDATA[
        protected void updateLedgerJournalTrans(LedgerJournalTrans    _ledgerJournalTrans,
                                            CustVendOutPaymRecord _custOutPaymRecord,
                                            boolean               _generateRemittanceFeeTrans)
    {
        LedgerJournalTrans  ledgerJournalTrans = _ledgerJournalTrans;
        ;

        this.fillPaymentOrder(ledgerJournalTrans, _custOutPaymRecord);
        paymentOrderJour.insert();

        if (! ledgerJournalTrans.PaymReference)
        {
            ledgerJournalTrans.PaymReference    = paymentOrderJour.PaymentOrderNum;
        }

        if (! ledgerJournalTrans.BankChequeNum)
        {
            ledgerJournalTrans.BankChequeNum    = paymentOrderJour.PaymentOrderNum;
        }

        ledgerJournalTrans.DocumentDate = paymentOrderJour.PaymentTransDate;
        ledgerJournalTrans.DocumentNum  = paymentOrderJour.PaymentOrderNum;

        super (ledgerJournalTrans, _custOutPaymRecord, _generateRemittanceFeeTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        boolean validate(Object _calledFrom = null)
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>