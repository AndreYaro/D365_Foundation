<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblDimensionFillerOrgTitle</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Fills hcm organization and org title dimensions.
/// </summary>
class RPayTblDimensionFillerOrgTitle implements RPayTblIDimensionFiller
{
    #define.OrgPos(1)
    #define.StartPos(2)
    #define.EndPos(3)
    #define.HistoryIdPos(4)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fill</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill the time dimensions.
    /// </summary>
    /// <param name="_list">
    /// The list of dimensinos.
    /// </param>
    /// <param name="_context">
    /// The time context.
    /// </param>
    /// <returns>
    /// The time list entity.
    /// </returns>
    public RPayTblTimeList fill(RPayTblTimeList _list, RPayTblContext _context)
    {
        RPayTblTimeList     ret = new RPayTblTimeList();
        container           historyDates;
        ListEnumerator      le;
        RPayTblTime         tmpTime;
        RPayTblTime         curTime;
        int                 i;
        RHRMEmplTable       emplTable;

        RpayHRMOrganizationId orgId, lastOrgId;
        RecId                 historyRecId;
        RHRMTitleRecId        lastTitle;
        TransDate             start, end;

        historyDates = RPayHistory::getOrganizationByDateInterval(_context.parmEmpId(), _context.parmStartDate(), _context.parmEndDate());
        le = _list.periods().getEnumerator();

        emplTable = RHRMEmplTable::find(_context.parmEmpId());
        lastOrgId = emplTable.PayHRMOrganizationId;
        lastTitle = emplTable.HcmTitle;

        while (le.moveNext())
        {
            curTime = le.current();
            if (conLen(historyDates) == 0)
            {
                tmpTime = curTime.clone();
                tmpTime.dimension().parmOrganizationId(lastOrgId);
                tmpTime.dimension().parmHcmTitleId(lastTitle);
                ret.addEnd(tmpTime);
            }
            else
            {
                for (i = 1; i <= conLen(historyDates); i++)
                {
                    orgId = conPeek(conPeek(historyDates, i), #OrgPos);
                    start = conPeek(conPeek(historyDates, i), #StartPos);
                    end   = conPeek(conPeek(historyDates, i), #EndPos);
                    historyRecId = conPeek(conPeek(historyDates, i), #HistoryIdPos);

                    tmpTime = curTime.clone();
                    tmpTime.dimension().parmOrganizationId(orgId);
                    tmpTime.dimension().parmHcmTitleId(RPayHistory::findByRecId(historyRecId).HcmTitle);
                    tmpTime.parmStartDate(max(curTime.parmStartDate(), start));
                    tmpTime.parmEndDate(min(curTime.parmEndDate(), end));

                    if (tmpTime.parmStartDate() <= tmpTime.parmEndDate())
                    {
                        ret.addEnd(tmpTime);
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>