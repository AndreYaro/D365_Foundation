<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTRReportDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>TaxGSTRReportDP_IN</c> is used to operate with tax model.
/// </summary>
/// <remarks>
/// All manipulations with model must be done via this class.
/// </remarks>
public class TaxGSTRReportDP_IN
{
    Const str FeatureVersionTwo = "2";

    private TaxGSTRReportContractHeader_IN  taxGSTRReportContractHeader = new TaxGSTRReportContractHeader_IN();
    private boolean                         isForOfflineTool;
    private boolean                         isNewOfflineTool;
    private TmpTaxGSTRReportTaxLine_IN      tmpTaxGSTRReportTaxLine;
    private TaxGSTRReturnFilingMonth_IN     returnFilingMonth;
    private TaxGSTRReturnFilingQuarter_IN   returnFilingQuarter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFeatureVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get feature version.
    /// </summary>
    /// <returns>Feature version</returns>
    /// <remarks>Return FeatureVersionTwo to use the new DP solution</remarks>
    [Replaceable(true)]
    protected str getFeatureVersion()
    {
        if (TaxGSTRReportPreview_IN::isPreviewEnabled())
        {
            return FeatureVersionTwo;
        }
        else
        {
            return GlobalizationInstrumentationHelper::DefaultFeatureVersion;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills in model lines
    /// </summary>
    /// <param name = "_fromDate">From date</param>
    /// <param name = "_toDate">To date</param>
    /// <param name = "_regNum">Registration number</param>
    /// <param name = "_taxInwardOutward">Tax direction</param>
    private void fillModel(FromDate _fromDate, ToDate _toDate, TaxRegistrationNumber_IN _regNum, TaxInwardOutward_IN _taxInwardOutward)
    {
        str featureVersion = this.getFeatureVersion();

        System.Diagnostics.Stopwatch sw = System.Diagnostics.Stopwatch::StartNew();

        this.fillModelParameters(_fromDate, _toDate, _regNum);
        
        TaxDirection taxDirection = this.taxInwardOutward2TaxDirection(_taxInwardOutward);
        TaxGSTRReportDPHelper_IN helper = new TaxGSTRReportDPHelper_IN(this);
        switch (featureVersion)
        {
            case FeatureVersionTwo:
                helper.fillModelLines(_fromDate, _toDate, _regNum, taxDirection);
                break;
            default:
                featureVersion = GlobalizationInstrumentationHelper::DefaultFeatureVersion;
                helper.fillModelLines(_fromDate, _toDate, _regNum, taxDirection);
                break;
        }

        sw.Stop();

        int numOfLines;

        if (this.parmIsForOfflineTool())
        {
            TmpTaxGSTRReportTaxLine_IN tmpTaxGSTRReportTaxLineLocal = this.parmTmpTaxGSTRReportTaxLine();

            select count(RecId) from tmpTaxGSTRReportTaxLineLocal;

            numOfLines = int642int(tmpTaxGSTRReportTaxLineLocal.RecId);
        }
        else
        {
            numOfLines = this.parmTaxGSTRReportContractHeader().getNumOfLines();
        }

        str eventInfo = new SysInstrumentationEventDetails()
            .add('NumOfLines', int2Str(numOfLines))
            .add('FromDate', date2StrUsr(_fromDate))
            .add('ToDate', date2StrUsr(_toDate))
            .toJson();

        GlobalizationInstrumentationHelper::featureProcessingFinishEvent(
            GlobalizationConstants::FeatureReferenceIN00145,
            eventInfo,
            funcName(),
            featureVersion,
            SysCountryRegionCode::countryInfo(),
            sw.ElapsedMilliseconds,
            false,
            true,
            numOfLines ? sw.ElapsedMilliseconds/numOfLines : 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillModelLineExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is customizationthe extension method for filling more model line fields.
    /// </summary>
    /// <param name = "_taxGSTRReportContractLine">
    /// <c>TaxGSTRReportContractLine_IN</c> instance
    /// </param>
    /// <param name = "_taxDocumentRowTransaction">
    /// <c>TaxDocumentRowTransaction</c> record
    /// </param>
    /// <param name = "_taxDocumentRowTransactionIN">
    /// <c>TaxDocumentRowTransaction_IN</c> record
    /// </param>
    /// <param name = "_taxDocumentExtension">
    /// <c>TaxDocumentExtension_IN</c> record of the document
    /// </param>
    /// <param name = "_taxDocumentExtensionRef">
    /// <c>TaxDocumentExtension_IN</c> record of the referenced document
    /// </param>
    /// <param name = "_taxDocumentExtensionRevisedOriginal">
    /// <c>TaxDocumentExtension_IN</c> record of the revised original document
    /// </param>
    protected void fillModelLineExtension(
        TaxGSTRReportContractLine_IN    _taxGSTRReportContractLine,
        TaxDocumentRowTransaction       _taxDocumentRowTransaction,
        TaxDocumentRowTransaction_IN    _taxDocumentRowTransactionIN,
        TaxDocumentExtension_IN         _taxDocumentExtension,
        TaxDocumentExtension_IN         _taxDocumentExtensionRef,
        TaxDocumentExtension_IN         _taxDocumentExtensionRevisedOriginal)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillModelLineFromTaxCompTransExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is customizationthe extension method for filling more model line fields from
    /// tax component transaction.
    /// </summary>
    /// <param name = "_taxGSTRReportContractLine">
    /// <c>TaxGSTRReportContractLine_IN</c> instance
    /// </param>
    /// <param name = "_taxDocumentRowTransaction">
    /// <c>TaxDocumentRowTransaction</c> record
    /// </param>
    /// <param name = "_taxDocumentRowTransactionIN">
    /// <c>TaxDocumentRowTransaction_IN</c> record
    /// </param>
    /// <param name = "_taxDocumentExtension">
    /// <c>TaxDocumentExtension_IN</c> record of the document
    /// </param>
    /// <param name = "_taxDocumentExtensionRef">
    /// <c>TaxDocumentExtension_IN</c> record of the referenced document
    /// </param>
    /// <param name = "_taxDocumentExtensionRevisedOriginal">
    /// <c>TaxDocumentExtension_IN</c> record of the revised original document
    /// </param>
    /// <param name = "_taxDocumentComponentTransaction">
    /// <c>TaxDocumentComponentTransaction</c> record
    /// </param>
    /// <param name = "_taxDocumentComponentTransactionIn">
    /// <c>TaxDocumentComponentTransaction_IN</c> record
    /// </param>
    protected void fillModelLineFromTaxCompTransExtension(
        TaxGSTRReportContractLine_IN        _taxGSTRReportContractLine,
        TaxDocumentRowTransaction           _taxDocumentRowTransaction,
        TaxDocumentRowTransaction_IN        _taxDocumentRowTransactionIN,
        TaxDocumentExtension_IN             _taxDocumentExtension,
        TaxDocumentExtension_IN             _taxDocumentExtensionRef,
        TaxDocumentExtension_IN             _taxDocumentExtensionRevisedOriginal,
        TaxDocumentComponentTransaction     _taxDocumentComponentTransaction,
        TaxDocumentComponentTransaction_IN  _taxDocumentComponentTransactionIn)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillModelParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill model parameters.
    /// </summary>
    /// <param name="_fromDate">
    /// From date.
    /// </param>
    /// <param name="_toDate">
    /// To date.
    /// </param>
    /// <param name="_regNum">
    /// Company registration number.
    /// </param>
    private void fillModelParameters(FromDate _fromDate, ToDate _toDate, TaxRegistrationNumber_IN _regNum)
    {
        TaxInformation_IN companyTaxInformation = TaxInformation_IN::findDefaultByLocation(DirParty::primaryPostalAddressLocationRecId(CompanyInfo::current()));
        TaxRegistrationNumbers_IN taxRegistrationNumbers = TaxRegistrationNumbers_IN::find(companyTaxInformation.GSTIN);

        taxGSTRReportContractHeader.parmCompanyTaxRegistrationNumber(taxRegistrationNumbers.RegistrationNumber);
        taxGSTRReportContractHeader.parmFromDate(_fromDate);
        taxGSTRReportContractHeader.parmToDate(_toDate);
        taxGSTRReportContractHeader.parmReportYear(year(_fromDate));
        taxGSTRReportContractHeader.parmAddress(LogisticsPostalAddress::findByLocation(companyTaxInformation.RegistrationLocation).Address);
        taxGSTRReportContractHeader.parmAggregateTurnover(taxRegistrationNumbers.TurnOver);
        taxGSTRReportContractHeader.parmTaxablePerson(taxRegistrationNumbers.NameOfTaxablePerson);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillModelWithInwardSupplies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill model with inward supplies for given period and company.
    /// </summary>
    /// <param name="_fromDate">
    /// From date.
    /// </param>
    /// <param name="_toDate">
    /// To date.
    /// </param>
    /// <param name="_regNum">
    /// Company registration number.
    /// </param>
    public void fillModelWithInwardSupplies(FromDate _fromDate, ToDate _toDate, TaxRegistrationNumber_IN _regNum)
    {
        this.fillModel(_fromDate, _toDate, _regNum, TaxInwardOutward_IN::Inward);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillModelWithOutwardSupplies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill model with outward supplies for given period and company.
    /// </summary>
    /// <param name="_fromDate">
    /// From date.
    /// </param>
    /// <param name="_toDate">
    /// To date.
    /// </param>
    /// <param name="_regNum">
    /// Company registration number.
    /// </param>
    public void fillModelWithOutwardSupplies(FromDate _fromDate, ToDate _toDate, TaxRegistrationNumber_IN _regNum)
    {
        this.fillModel(_fromDate, _toDate, _regNum, TaxInwardOutward_IN::Outward);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGSTRReportContractHeader</Name>
				<Source><![CDATA[
    public TaxGSTRReportContractHeader_IN parmTaxGSTRReportContractHeader(TaxGSTRReportContractHeader_IN _taxGSTRReportContractHeader = taxGSTRReportContractHeader)
    {
        taxGSTRReportContractHeader = _taxGSTRReportContractHeader;
        return taxGSTRReportContractHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpTaxGSTRReportTaxLine</Name>
				<Source><![CDATA[
    public TmpTaxGSTRReportTaxLine_IN parmTmpTaxGSTRReportTaxLine(TmpTaxGSTRReportTaxLine_IN _tmpTaxGSTRReportTaxLine = tmpTaxGSTRReportTaxLine)
    {
        tmpTaxGSTRReportTaxLine = _tmpTaxGSTRReportTaxLine;
        return tmpTaxGSTRReportTaxLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsForOfflineTool</Name>
				<Source><![CDATA[
    public boolean parmIsForOfflineTool(boolean _isForOfflineTool = isForOfflineTool)
    {
        isForOfflineTool = _isForOfflineTool;
        return isForOfflineTool;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsNewOfflineTool</Name>
				<Source><![CDATA[
    public boolean parmIsNewOfflineTool(boolean _isNewOfflineTool = isNewOfflineTool)
    {
        isNewOfflineTool = _isNewOfflineTool;
        return isNewOfflineTool;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipForGSTRReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// If should skip for GSTRReporting
    /// </summary>
    /// <param name = "taxDocumentRowTransaction">TaxDocumentRowTransaction table</param>
    /// <param name = "taxDocumentExtension">TaxDocumentExtension_IN table</param>
    /// <param name = "taxDocumentRowTransactionIN">TaxDocumentRowTransaction_IN table</param>
    /// <returns>
    /// true if shouldPostTaxTrans is false; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Once updated, please update TaxGSTRReportDPHelper_IN::filterShouldSkipForGSTRReporting() 
    /// as well to keep the logic aligned.
    /// </remarks>
    public boolean shouldSkipForGSTRReporting(
        TaxDocumentRowTransaction taxDocumentRowTransaction,
        TaxDocumentExtension_IN taxDocumentExtension,
        TaxDocumentRowTransaction_IN taxDocumentRowTransactionIN)
    {
        boolean ret;
        TaxDocumentComponentTransaction taxDocumentComponentTransaction;

        select firstonly RecId from taxDocumentComponentTransaction
            where taxDocumentComponentTransaction.TaxDocumentRowTransactionRecId == taxDocumentRowTransaction.RecId;

        if (!taxDocumentComponentTransaction.RecId)
        {
            ret = (taxDocumentRowTransaction.TaxExemptTax || taxDocumentRowTransactionIN.NonGST) ? false : true;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxInwardOutward2TaxDirection</Name>
				<Source><![CDATA[
    private TaxDirection taxInwardOutward2TaxDirection(TaxInwardOutward_IN _taxInwardOutward)
    {
        TaxDirection ret;
  
        switch (_taxInwardOutward)
        {
            case TaxInwardOutward_IN::Inward:
                ret = TaxDirection::IncomingTax;
                break;
            case TaxInwardOutward_IN::Outward:
                ret = TaxDirection::OutgoingTax;
                break;
            default:
                throw error("@SYS104799");
        }
  
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get transaction unit
    /// </summary>
    /// <param name = "_unitOfMeasureSymbol">UnitOfMeasureTranslation table</param>
    /// <returns>UnitOfMeasureTranslation</returns>
    [Hookable]
    protected UnitOfMeasureTranslation getUnit(UnitOfMeasureSymbol _unitOfMeasureSymbol)
    {
        UnitOfMeasure                           unitOfMeasure;
        UnitOfMeasureTranslation                unitOfMeasureTranslation;

        select firstonly Description from unitOfMeasureTranslation
            where unitOfMeasureTranslation.LanguageId == SystemParameters::getSystemLanguageId()
                join RecId from unitOfMeasure
                where unitOfMeasure.Symbol == _unitOfMeasureSymbol
                    && unitOfMeasure.RecId == unitOfMeasureTranslation.UnitOfMeasure;

        return unitOfMeasureTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportContractData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill report contract data with report run contract.
    /// </summary>
    /// <param name = "_dataContract">Report run contract</param>
    public void fillReportContractData(TaxGSTRReportRunContract_IN _dataContract)
    {
        taxGSTRReportContractHeader.fillReportContractData(_dataContract);
        this.parmReturnFilingMonth(_dataContract.parmReturnFilingMonth());
        this.parmReturnFilingQuarter(_dataContract.parmReturnFilingQuarter());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnFilingMonth</Name>
				<Source><![CDATA[
    public TaxGSTRReturnFilingMonth_IN parmReturnFilingMonth(TaxGSTRReturnFilingMonth_IN _returnFilingMonth = returnFilingMonth)
    {
        returnFilingMonth = _returnFilingMonth;
        return returnFilingMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnFilingQuarter</Name>
				<Source><![CDATA[
    public TaxGSTRReturnFilingQuarter_IN parmReturnFilingQuarter(TaxGSTRReturnFilingQuarter_IN _returnFilingQuarter = returnFilingQuarter)
    {
        returnFilingQuarter = _returnFilingQuarter;
        return returnFilingQuarter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>