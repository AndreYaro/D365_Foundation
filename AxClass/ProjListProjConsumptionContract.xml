<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjConsumptionContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for ProjListProjConsumption SSRS report
/// </summary>
/// <remarks>
/// This is the Data Contract class for the ProjListProjConsumption SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classstr(ProjListProjConsumptionUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
public class ProjListProjConsumptionContract implements SysOperationValidatable,SysOperationInitializable
{
    boolean                 timeMaterial;
    boolean                 fixedPrice;
    boolean                 timeMaterialBillingMethod;
    boolean                 fixedPriceBillingMethod;
    boolean                 investment;
    boolean                 internalCost;
    boolean                 time;
    boolean                 hour;
    boolean                 expenses;
    boolean                 item;
    TransDate               projFromDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    TransDate               ledgerFromDate1;
    TransDate               ledgerToDate1;
    TransDate               projBreakDate;
    TransDate               ledgerBreakDate;
    ProjListColumnData      actualVsBudget;
    projActualVsBudget      actualVsBudget2Col;
    ForecastModelId         forecastModelId;
    ProjListStateProjType   stateProjType;
    Level                   level;
    boolean                 skipBlankId;
    boolean                 skipZero;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;
    Integer                 reportType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values for the parameters of a <c>ProjListProjConsumptionContract</c> object.
    /// </summary>
    public void initialize()
    {
        this.parmLevel(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActualVsBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter actualVsBudget.
    /// </summary>
    /// <param name="_actualVsBudget">
    /// The new value of the datacontract parameter actualVsBudget; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter actualVsBudget
    /// </returns>
    [
        DataMemberAttribute('ActualVsBudget'),
        SysOperationLabelAttribute(literalStr("@SYS82685")),
        SysOperationHelpTextAttribute(literalStr("@SYS90657"))
    ]
    public ProjListColumnData parmActualVsBudget(ProjListColumnData _actualVsBudget = actualVsBudget)
    {
        actualVsBudget = _actualVsBudget;
        return actualVsBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActualVsBudget2Col</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter actualVsBudget2Col.
    /// </summary>
    /// <param name="_actualVsBudget2Col">
    /// The new value of the datacontract parameter actualVsBudget2Col; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter actualVsBudget2Col
    /// </returns>
    [
        DataMemberAttribute('ActualVsBudget2Col'),
        SysOperationLabelAttribute(literalStr("@SYS82685")),
        SysOperationHelpTextAttribute(literalStr("@SYS90657"))
    ]
    public projActualVsBudget parmActualVsBudget2Col(projActualVsBudget _actualVsBudget2Col = actualVsBudget2Col)
    {
        actualVsBudget2Col = _actualVsBudget2Col;
        return actualVsBudget2Col;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter amountQty.
    /// </summary>
    /// <param name="_amountQty">
    /// The new value of the datacontract parameter amountQty; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter amountQty
    /// </returns>
    [
        DataMemberAttribute('AmountQty'),
        SysOperationLabelAttribute(literalStr("@SYS91943")),
        SysOperationHelpTextAttribute(literalStr("@SYS91207"))
    ]
    public ProjAmountQty parmAmountQty(ProjAmountQty _amountQty = amountQty)
    {
        amountQty = _amountQty;
        return amountQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter expenses.
    /// </summary>
    /// <param name="_expenses">
    /// The new value of the datacontract parameter expenses; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter expenses
    /// </returns>
    [
        DataMemberAttribute('Expenses'),
        SysOperationLabelAttribute(literalStr("@SYP4882014")),
        SysOperationHelpTextAttribute(literalStr("@SYS78369"))
    ]
    public boolean parmExpenses(boolean _expenses = expenses)
    {
        expenses = _expenses;
        return expenses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter fixedPrice.
    /// </summary>
    /// <param name="_fixedPrice">
    /// The new value of the datacontract parameter fixedPrice; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter fixedPrice
    /// </returns>
    [
        DataMemberAttribute('FixedPrice'),
        SysOperationLabelAttribute(literalStr("@SYS3237")),
        SysOperationHelpTextAttribute(literalStr("@SYS78361"))
    ]
    public boolean parmFixedPrice(boolean _fixedPrice = fixedPrice)
    {
        fixedPrice = _fixedPrice;
        return fixedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedPriceBillingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FixedPriceBillingMethod.
    /// </summary>
    /// <param name="_fixedPriceBillingMethod">
    /// The new value of the datacontract parameter FixedPriceBillingMethod; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter FixedPriceBillingMethod
    /// </returns>
    [
        DataMemberAttribute('FixedPriceBillingMethod'),
        SysOperationLabelAttribute(literalStr("@SYS3237")),
        SysOperationHelpTextAttribute(literalStr("@Proj:FixedPriceBillingMethodHelp"))
    ]
    public boolean parmFixedPriceBillingMethod(boolean _fixedPriceBillingMethod = fixedPriceBillingMethod)
    {
        fixedPriceBillingMethod = _fixedPriceBillingMethod;
        return fixedPriceBillingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastModelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter forecastModelId.
    /// </summary>
    /// <param name="_forecastModelId">
    /// The new value of the datacontract parameter forecastModelId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter forecastModelId
    /// </returns>
    [SysObsolete('This method is replaced by parmForecastModelIdV2 to set a different return type.', false, 09\07\2018)]
    public ProjForecastModelId parmForecastModelId(ProjForecastModelId _forecastModelId = forecastModelId)
    {
        throw error(strFmt("@SYS68910", classStr(ProjListProjConsumptionContract), '.', 
            methodStr(ProjListProjConsumptionContract, parmForecastModelId), 
            methodStr(ProjListProjConsumptionContract, parmForecastModelIdV2)));

        forecastModelId = _forecastModelId;
        return forecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastModelIdV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter forecastModelId.
    /// </summary>
    /// <param name="_forecastModelId">
    /// The new value of the datacontract parameter forecastModelId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter forecastModelId
    /// </returns>
    [
        DataMemberAttribute('ForecastModelId'),
        SysOperationLabelAttribute(literalStr("@SYS82923")),
        SysOperationHelpTextAttribute(literalStr("@SYS90481"))
    ]
    public ForecastModelId parmForecastModelIdV2(ForecastModelId _forecastModelId = forecastModelId)
    {
        forecastModelId = _forecastModelId;
        return forecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter hour.
    /// </summary>
    /// <param name="_hour">
    /// The new value of the datacontract parameter hour; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter hour
    /// </returns>
    [
        DataMemberAttribute('Hour'),
        SysOperationLabelAttribute(literalStr("@SYS5269")),
        SysOperationHelpTextAttribute(literalStr("@SYS78368"))
    ]
    public boolean parmHour(boolean _hour = hour)
    {
        hour = _hour;
        return hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInternalCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter internalCost.
    /// </summary>
    /// <param name="_internalCost">
    /// The new value of the datacontract parameter internalCost; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter internalCost
    /// </returns>
    [
        DataMemberAttribute('InternalCost'),
        SysOperationLabelAttribute(literalStr("@SYS78366")),
        SysOperationHelpTextAttribute(literalStr("@SYS78363"))
    ]
    public boolean parmInternalCost(boolean _internalCost = internalCost)
    {
        internalCost = _internalCost;
        return internalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvestment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter investment.
    /// </summary>
    /// <param name="_investment">
    /// The new value of the datacontract parameter investment; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter investment
    /// </returns>
    [
        DataMemberAttribute('Investment'),
        SysOperationLabelAttribute(literalStr("@SYS78353")),
        SysOperationHelpTextAttribute(literalStr("@SYS78364"))
    ]
    public boolean parmInvestment(boolean _investment = investment)
    {
        investment = _investment;
        return investment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter item.
    /// </summary>
    /// <param name="_item">
    /// The new value of the datacontract parameter item; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter item
    /// </returns>
    [
        DataMemberAttribute('Item'),
        SysOperationLabelAttribute(literalStr("@SYS7407")),
        SysOperationHelpTextAttribute(literalStr("@SYS78372"))
    ]
    public boolean parmItem(boolean _item = item)
    {
        item = _item;
        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerBreakDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ledgerBreakDate.
    /// </summary>
    /// <param name="_ledgerBreakDate">
    /// The new value of the datacontract parameter ledgerBreakDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ledgerBreakDate
    /// </returns>
    [
        DataMemberAttribute('LedgerBreakDate'),
        SysOperationLabelAttribute(literalStr("@SYS83773")),
        SysOperationHelpTextAttribute(literalStr("@SYS90526"))
    ]
    public TransDate parmLedgerBreakDate(TransDate _ledgerBreakDate = ledgerBreakDate)
    {
        ledgerBreakDate = _ledgerBreakDate;
        return ledgerBreakDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ledgerFromDate.
    /// </summary>
    /// <param name="_ledgerFromDate">
    /// The new value of the datacontract parameter ledgerFromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ledgerFromDate
    /// </returns>
    [
        DataMemberAttribute('LedgerFromDate'),
        SysOperationLabelAttribute(literalStr("@SYS24050")),
        SysOperationHelpTextAttribute(literalStr("@SYS90469"))
    ]
    public TransDate parmLedgerFromDate(TransDate _ledgerFromDate = ledgerFromDate)
    {
        ledgerFromDate = _ledgerFromDate;
        return ledgerFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerFromDate1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ledgerFromDate1.
    /// </summary>
    /// <param name="_ledgerFromDate1">
    /// The new value of the datacontract parameter ledgerFromDate1; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ledgerFromDate1
    /// </returns>
    [
        DataMemberAttribute('LedgerFromDate1'),
        SysOperationLabelAttribute(literalStr("@SYS24050")),
        SysOperationHelpTextAttribute(literalStr("@SYS90469"))
    ]
    public TransDate parmLedgerFromDate1(TransDate _ledgerFromDate1 = ledgerFromDate1)
    {
        ledgerFromDate1 = _ledgerFromDate1;
        return ledgerFromDate1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ledgerToDate.
    /// </summary>
    /// <param name="_ledgerToDate">
    /// The new value of the datacontract parameter ledgerToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ledgerToDate
    /// </returns>
    [
        DataMemberAttribute('LedgerToDate'),
        SysOperationLabelAttribute(literalStr("@SYS80934")),
        SysOperationHelpTextAttribute(literalStr("@SYS90470"))
    ]
    public TransDate parmLedgerToDate(TransDate _ledgerToDate = ledgerToDate)
    {
        ledgerToDate = _ledgerToDate;
        return ledgerToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerToDate1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ledgerToDate1.
    /// </summary>
    /// <param name="_ledgerToDate1">
    /// The new value of the datacontract parameter ledgerToDate1; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ledgerToDate1
    /// </returns>
    [
        DataMemberAttribute('LedgerToDate1'),
        SysOperationLabelAttribute(literalStr("@SYS80934")),
        SysOperationHelpTextAttribute(literalStr("@SYS90470"))
    ]
    public TransDate parmLedgerToDate1(TransDate _ledgerToDate1 = ledgerToDate1)
    {
        ledgerToDate1 = _ledgerToDate1;
        return ledgerToDate1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter level.
    /// </summary>
    /// <param name="_level">
    /// The new value of the datacontract parameter level; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter level
    /// </returns>
    [
        DataMemberAttribute('Level'),
        SysOperationLabelAttribute(literalStr("@SYS90474")),
        SysOperationHelpTextAttribute(literalStr("@SYS90477"))
    ]
    public Level parmLevel(Level _level = level)
    {
        level = _level;
        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjBreakDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter projBreakDate.
    /// </summary>
    /// <param name="_projBreakDate">
    /// The new value of the datacontract parameter projBreakDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter projBreakDate
    /// </returns>
    [
        DataMemberAttribute('ProjBreakDate'),
        SysOperationLabelAttribute(literalStr("@SYS83773")),
        SysOperationHelpTextAttribute(literalStr("@SYS90526"))
    ]
    public TransDate parmProjBreakDate(TransDate _projBreakDate = projBreakDate)
    {
        projBreakDate = _projBreakDate;
        return projBreakDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter projFromDate.
    /// </summary>
    /// <param name="_projFromDate">
    /// The new value of the datacontract parameter projFromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter projFromDate
    /// </returns>
    [
        DataMemberAttribute('ProjFromDate'),
        SysOperationLabelAttribute(literalStr("@SYS24050")),
        SysOperationHelpTextAttribute(literalStr("@SYS90467"))
    ]
    public TransDate parmProjFromDate(TransDate _projFromDate = projFromDate)
    {
        projFromDate = _projFromDate;
        return projFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter projToDate.
    /// </summary>
    /// <param name="_projToDate">
    /// The new value of the datacontract parameter projToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter projToDate
    /// </returns>
    [
        DataMemberAttribute('ProjToDate'),
        SysOperationLabelAttribute(literalStr("@SYS80934")),
        SysOperationHelpTextAttribute(literalStr("@SYS90468"))
    ]
    public TransDate parmProjToDate(TransDate _projToDate = projToDate)
    {
        projToDate = _projToDate;
        return projToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter reportType.
    /// </summary>
    /// <param name="_reportType">
    /// The new value of the datacontract parameter reportType; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter reportType
    /// </returns>
    [
        DataMemberAttribute('ReportType'),
        SysOperationLabelAttribute(literalStr("@SYS74853")),
        SysOperationHelpTextAttribute(literalStr("@SYS74853"))
    ]
    public Integer parmReportType(Integer _reportType = reportType)
    {
        reportType = _reportType;

        return reportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter showAmount.
    /// </summary>
    /// <param name="_showAmount">
    /// The new value of the datacontract parameter showAmount; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter showAmount
    /// </returns>
    [
        DataMemberAttribute('ShowAmount'),
        SysOperationLabelAttribute(literalStr("@SYS91075")),
        SysOperationHelpTextAttribute(literalStr("@SYS91339"))
    ]
    public ProjShowAmount parmShowAmount(ProjShowAmount _showAmount = showAmount)
    {
        showAmount = _showAmount;
        return showAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipBlankId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter skipBlankId.
    /// </summary>
    /// <param name="_skipBlankId">
    /// The new value of the datacontract parameter skipBlankId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter skipBlankId
    /// </returns>
    [
        DataMemberAttribute('SkipBlankId'),
        SysOperationLabelAttribute(literalStr("@SYS91206")),
        SysOperationHelpTextAttribute(literalStr("@SYS91208"))
    ]
    public boolean parmSkipBlankId(boolean _skipBlankId = skipBlankId)
    {
        skipBlankId = _skipBlankId;
        return skipBlankId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipZero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter skipZero.
    /// </summary>
    /// <param name="_skipZero">
    /// The new value of the datacontract parameter skipZero; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter skipZero
    /// </returns>
    [
        DataMemberAttribute('SkipZero'),
        SysOperationLabelAttribute(literalStr("@SYS19052")),
        SysOperationHelpTextAttribute(literalStr("@SYS90472"))
    ]
    public boolean parmSkipZero(boolean _skipZero = skipZero)
    {
        skipZero = _skipZero;
        return skipZero;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStateProjType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter stateProjType.
    /// </summary>
    /// <param name="_stateProjType">
    /// The new value of the datacontract parameter stateProjType; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter stateProjType
    /// </returns>
    [
        DataMemberAttribute('StateProjType'),
        SysOperationLabelAttribute(literalStr("@SYS75799")),
        SysOperationHelpTextAttribute(literalStr("@SYS90476"))
    ]
    public ProjListStateProjType parmStateProjType(ProjListStateProjType _stateProjType = stateProjType)
    {
        stateProjType = _stateProjType;
        return stateProjType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter time.
    /// </summary>
    /// <param name="_time">
    /// The new value of the datacontract parameter time; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter time
    /// </returns>
    [
        DataMemberAttribute('Time'),
        SysOperationLabelAttribute(literalStr("@SYS8827")),
        SysOperationHelpTextAttribute(literalStr("@SYS78365"))
    ]
    public boolean parmTime(boolean _time = time)
    {
        time = _time;
        return time;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter timeMaterial.
    /// </summary>
    /// <param name="_timeMaterial">
    /// The new value of the datacontract parameter timeMaterial; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter timeMaterial
    /// </returns>
    [
        DataMemberAttribute('TimeMaterial'),
        SysOperationLabelAttribute(literalStr("@SYS53874")),
        SysOperationHelpTextAttribute(literalStr("@SYS78362"))
    ]
    public boolean parmTimeMaterial(boolean _timeMaterial = timeMaterial)
    {
        timeMaterial = _timeMaterial;
        return timeMaterial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeMaterialBillingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter TimeMaterialBillingMethod.
    /// </summary>
    /// <param name="_timeMaterialBillingMethod">
    /// The new value of the datacontract parameter TimeMaterialBillingMethod; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter TimeMaterialBillingMethod
    /// </returns>
    [
        DataMemberAttribute('TimeMaterialBillingMethod'),
        SysOperationLabelAttribute(literalStr("@SYS53874")),
        SysOperationHelpTextAttribute(literalStr("@Proj:TimeMaterialBillingMethodHelp"))
    ]
    public boolean parmTimeMaterialBillingMethod(boolean _timeMaterialBillingMethod = timeMaterialBillingMethod)
    {
        timeMaterialBillingMethod = _timeMaterialBillingMethod;
        return timeMaterialBillingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the parameters.
    /// </summary>
    /// <returns>
    /// true if the parameter values are all valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        // Check if level is positive
        if (this.parmLevel() < 0)
        {
            error("@SYS104023");
            isValid = false;
        }

        // Check if project type has been selected
        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() &&
            !(this.parmFixedPrice() ||
              this.parmTimeMaterial() ||
              this.parmInternalCost() ||
              this.parmInvestment() ||
              this.parmTime()))
        {
            error("@SYS91026");
            isValid = false;
        }

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()
            && !(this.parmTimeMaterialBillingMethod() ||
                this.parmFixedPriceBillingMethod()))
        {
            isValid = checkFailed("@Proj:BillingMethodIsEmptyError");
        }

        // Check if trx type has been selected
        if (!(this.parmHour() || this.parmExpenses() || this.parmItem()))
        {
            error("@SYS91027");
            isValid = false;
        }

        // Check if date interval is valid
        if ((this.parmProjFromDate() > this.parmProjToDate() && this.parmProjToDate()) ||
            (this.parmLedgerFromDate() > this.parmLedgerToDate() && this.parmLedgerToDate()) ||
            (this.parmLedgerFromDate1() > this.parmLedgerToDate1() && this.parmLedgerToDate1()))
        {
            error("@SYS91020");
            isValid = false;
        }

        // Check if forecast model is entered
        if (this.parmActualVsBudget() == ProjListColumnData::Budget ||
            this.parmReportType() == 2)
        {
            if (!this.parmForecastModelIdV2())
            {
                error("@SYS87707");
                isValid = false;
            }
        }

        // Break date falls outside date interval and actualvsbudget::sum is selected.
        if ((this.parmActualVsBudget2Col() == projActualVsBudget::Sum_)
            && ((this.parmProjBreakDate() < this.parmProjFromDate() ||
                (this.parmProjToDate() && this.parmProjBreakDate() > this.parmProjToDate())) ||
                (this.parmLedgerBreakDate() < ledgerFromDate ||
                (this.parmLedgerToDate() && this.parmLedgerBreakDate() > this.parmLedgerToDate()))))
        {
            error("@SYS90850");
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>