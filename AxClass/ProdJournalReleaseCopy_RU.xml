<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalReleaseCopy_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJournalReleaseCopy_RU extends RunBaseBatch implements BatchRetryable
{
    ProdId                  prodId;
    ProdJournalNameId       journalNameId;
    ProdJournalIdRelease_RU journalId;
    JournalDescription      description;
    boolean                 fullReversal;
    NoYes                   stornoPhysical;

    DialogField             dlgProdId;
    DialogField             dlgDescription;
    DialogField             dlgJournalNameId;
    DialogField             dlgJournalId;
    DialogField             dlgStornoPhysical;

    ProdJournalTable        sourceJournalTable;
    ProdJournalIdRelease_RU newJournalId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        prodId,
        journalNameId,
        journalId,
        description,
        fullReversal,
        stornoPhysical
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        dlgProdId           = dialog.addFieldValue(extendedTypeStr(ProdId),                  prodId);
        dlgJournalNameId    = dialog.addFieldValue(extendedTypeStr(ProdJournalNameId),       journalNameId);
        dlgJournalId        = dialog.addFieldValue(extendedTypeStr(ProdJournalIdRelease_RU), journalId);
        dlgDescription      = dialog.addFieldValue(extendedTypeStr(JournalDescription),      description);
        dlgStornoPhysical   = dialog.addFieldValue(extendedTypeStr(NoYesId),
                                                   InventParameters::find().StornoPhysicalPosting_RU,
                                                   "@GLS114774",
                                                   "@GLS115798");
        dlgStornoPhysical.visible(fullReversal);

        dlgJournalId.control().mandatory(true);

        this.updateJournalId();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase dialog)
    {
        super(dialog);

        dialog.formRun().controlMethodOverload(true);
        dialog.formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld1_1_modified</Name>
				<Source><![CDATA[
    public boolean fld1_1_modified()
    {
        boolean ret = dlgProdId.control().modified();

        if (ret && prodId != dlgProdId.value())
        {
            prodId = dlgProdId.value();
            this.parmJournalId('');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld2_1_lookup</Name>
				<Source><![CDATA[
    public void fld2_1_lookup()
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tablenum(ProdJournalName));

        QueryBuildRange queryBuildRange = query.dataSourceNo(1).addRange(fieldnum(ProdJournalName, JournalType));
        queryBuildRange.value(SysQuery::value(ProdJournalType::ReleaseFromProduction_RU));
        queryBuildRange.status(RangeStatus::Hidden);

        SysTableLookup tableLookup = SysTableLookup::newParameters(tablenum(ProdJournalName), dlgJournalNameId.control());
        tableLookup.addLookupfield(fieldnum(ProdJournalName, JournalNameId));
        tableLookup.addLookupfield(fieldnum(ProdJournalName, Description));
        tableLookup.addLookupfield(fieldnum(ProdJournalName, JournalType));
        tableLookup.parmQuery(query);

        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld2_1_modified</Name>
				<Source><![CDATA[
    public boolean fld2_1_modified()
    {
        boolean ret = dlgJournalNameId.control().modified();

        if (ret && journalNameId != dlgJournalNameId.value())
        {
            journalNameId = dlgJournalNameId.value();
            this.parmJournalId('');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld3_1_lookup</Name>
				<Source><![CDATA[
    public void fld3_1_lookup()
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tablenum(ProdJournalTable));

        QueryBuildRange queryBuildRange = query.dataSourceNo(1).addRange(fieldnum(ProdJournalTable, JournalType));
        queryBuildRange.value(SysQuery::value(ProdJournalType::ReleaseFromProduction_RU));
        queryBuildRange.status(RangeStatus::Hidden);

        if (prodId)
        {
            queryBuildRange = query.dataSourceNo(1).addRange(fieldnum(ProdJournalTable, ProdId));
            queryBuildRange.value(SysQuery::value(prodId));
            queryBuildRange.status(RangeStatus::Hidden);
        }

        if (journalNameId)
        {
            queryBuildRange = query.dataSourceNo(1).addRange(fieldnum(ProdJournalTable, JournalNameId));
            queryBuildRange.value(SysQuery::value(journalNameId));
            queryBuildRange.status(RangeStatus::Hidden);
        }

        if (fullReversal)
        {
            queryBuildRange = query.dataSourceNo(1).addRange(fieldnum(ProdJournalTable, Posted));
            queryBuildRange.value(SysQuery::value(NoYes::Yes));
            queryBuildRange.status(RangeStatus::Hidden);
        }

        SysTableLookup tableLookup = SysTableLookup::newParameters(tablenum(ProdJournalTable), dlgJournalId.control());
        tableLookup.addLookupfield(fieldnum(ProdJournalTable, JournalId));
        tableLookup.addLookupfield(fieldnum(ProdJournalTable, Description));
        tableLookup.addLookupfield(fieldnum(ProdJournalTable, JournalNameId));
        tableLookup.addLookupfield(fieldnum(ProdJournalTable, ProdId));
        tableLookup.addLookupfield(fieldnum(ProdJournalTable, Posted));
        tableLookup.parmQuery(query);

        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld3_1_modified</Name>
				<Source><![CDATA[
    public boolean fld3_1_modified()
    {
        boolean ret = dlgJournalId.control().modified();

        if (ret)
        {
            this.parmJournalId(dlgJournalId.value());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        prodId          = dlgProdId.value();
        journalNameId   = dlgJournalNameId.value();
        journalId       = dlgJournalId.value();
        description     = dlgDescription.value();
        stornoPhysical  = dlgStornoPhysical.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args _args)
    {
        this.getLast();

        if (_args)
        {
            fullReversal = _args.parmEnum();
            if (_args.dataset() == tablenum(ProdJournalTable))
            {
                sourceJournalTable  = _args.record();
                this.parmJournalId(sourceJournalTable.JournalId);
                journalNameId       = sourceJournalTable.JournalNameId;
                prodId              = sourceJournalTable.ProdId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        stornoPhysical      = InventParameters::find().StornoPhysicalPosting_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalId</Name>
				<Source><![CDATA[
    public ProdJournalIdRelease_RU newJournalId()
    {
        return newJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public JournalDescription parmDescription(JournalDescription _description = description)
    {
        description = _description;

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFullReversal</Name>
				<Source><![CDATA[
    public boolean parmFullReversal(boolean _fullReversal = fullReversal)
    {
        fullReversal = _fullReversal;

        return fullReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public ProdJournalIdRelease_RU parmJournalId(ProdJournalIdRelease_RU _journalId = journalId)
    {
        if (journalId != _journalId)
        {
            journalId = _journalId;
            this.updateJournalId();
        }

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStornoPhysical</Name>
				<Source><![CDATA[
    public NoYes parmStornoPhysical(NoYes _stornoPhysical = stornoPhysical)
    {
        stornoPhysical = _stornoPhysical;
        return stornoPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ProdJournalTable        targetJournalTable;
        ProdJournalRelease_RU   targetJournalTrans;
        ProdJournalRelease_RU   sourceJournalTrans;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00124,funcName());

        #OCCRetryCount
        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsbegin;

            targetJournalTable.data(sourceJournalTable.data());
            JournalTableData journalTableData = JournalTableData::newTable(targetJournalTable);
            newJournalId = journalTableData.nextJournalId();
            targetJournalTable.JournalId      = newJournalId;
            targetJournalTable.Posted         = NoYes::No;
            targetJournalTable.PostedDateTime = utcDateTimeNull();
            targetJournalTable.PostedUserId   = '';
            targetJournalTable.SystemBlocked  = NoYes::No;
            targetJournalTable.BlockUserId    = '';
            targetJournalTable.SessionId      = 0;

            if (description)
            {
                targetJournalTable.Description = description;
            }

            targetJournalTable.insert();

            JournalTransData journalTransData = journalTableData.journalStatic().newJournalTransData(targetJournalTrans, journalTableData);
            while select sourceJournalTrans
                where sourceJournalTrans.JournalId == journalId
            {
                targetJournalTrans.clear();
                targetJournalTrans.initFromProdJournalTable(targetJournalTable);
                targetJournalTrans.initFromProdJournalRelease(sourceJournalTrans);

                if (fullReversal)
                {
                    targetJournalTrans.ReleaseQty           = -targetJournalTrans.ReleaseQty;
                    targetJournalTrans.OffsetTransRefRecId  = ProdReleaseTrans_RU::find(sourceJournalTrans.JournalId, sourceJournalTrans.LineNum).RecId;
                    targetJournalTrans.Storno               = stornoPhysical;
                }

                targetJournalTrans.insert();
            }

            info(strfmt("@SYS62960", targetJournalTable.JournalId, targetJournalTable.JournalType));

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalId</Name>
				<Source><![CDATA[
    private void updateJournalId()
    {
        sourceJournalTable = ProdJournalTable::find(journalId);

        description = sourceJournalTable.Description;

        if (dlgJournalId)
        {
            dlgJournalId.value(journalId);
        }

        if (dlgDescription)
        {
            dlgDescription.value(description);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        sourceJournalTable = ProdJournalTable::find(journalId);
        if (sourceJournalTable)
        {
            if (fullReversal && !sourceJournalTable.Posted)
            {
                ret = checkFailed(strfmt("@GLS115799", journalId));
            }
        }
        else
        {
            ret = checkFailed(strfmt("@SYS17145", journalId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdJournalReleaseCopy_RU construct()
    {
        return new ProdJournalReleaseCopy_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS115800";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        ProdJournalReleaseCopy_RU   journalCopy = ProdJournalReleaseCopy_RU::construct();
        journalCopy.initFromArgs(_args);

        if (journalCopy.prompt())
        {
            journalCopy.runOperation();

            if (_args && FormDataUtil::getFormDataSource(_args.record()))
            {
                FormDataSource formDataSource = FormDataUtil::getFormDataSource(_args.record());
                formDataSource.executeQuery();
                formDataSource.positionToRecord(ProdJournalTable::find(journalCopy.newJournalId()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>