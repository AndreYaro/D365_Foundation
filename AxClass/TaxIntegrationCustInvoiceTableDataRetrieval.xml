<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationCustInvoiceTableDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationCustInvoiceTableDataRetrieval</c> class retrieves data from <c>CustInvoiceTable</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(CustInvoiceTable))]
public class TaxIntegrationCustInvoiceTableDataRetrieval
    extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected CustInvoiceTable custInvoiceTable;
    protected CustInvoiceLine custInvoiceLine;

    protected TransportationDocument transportationDocument;
    protected CustTable custTableOrder, custTableInvoice;
    protected CustInvoiceLineInterProj custInvoiceLineInterProj;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (this.document.getLocalRecord())
        {
            this.custInvoiceTable = this.document.getLocalRecord();

            return SysDaQueryObjectBuilder::from(this.custTableOrder)
                .where(this.custTableOrder, fieldStr(CustTable, AccountNum))
                    .isEqualToLiteral(this.custInvoiceTable.OrderAccount)
                .outerJoin(this.custTableInvoice)
                    .where(this.custTableInvoice, fieldStr(CustTable, AccountNum))
                        .isEqualToLiteral(this.custInvoiceTable.InvoiceAccount)
                .outerJoin(this.transportationDocument)
                    .where(this.transportationDocument, fieldStr(TransportationDocument, RecId))
                        .isEqualTo(this.custInvoiceTable, fieldStr(CustInvoiceTable, TransportationDocument))
                .toSysDaQueryObject();
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.custInvoiceTable)
                .where(this.custInvoiceTable, fieldStr(CustInvoiceTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .outerJoin(this.custTableOrder)
                    .where(this.custTableOrder, fieldStr(CustTable, AccountNum))
                        .isEqualTo(this.custInvoiceTable, fieldStr(CustInvoiceTable, OrderAccount))
                .outerJoin(this.custTableInvoice)
                    .where(this.custTableInvoice, fieldStr(CustTable, AccountNum))
                        .isEqualTo(this.custInvoiceTable, fieldStr(CustInvoiceTable, InvoiceAccount))
                .outerJoin(this.transportationDocument)
                    .where(this.transportationDocument, fieldStr(TransportationDocument, RecId))
                        .isEqualTo(this.custInvoiceTable, fieldStr(CustInvoiceTable, TransportationDocument))
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.custInvoiceLine)
            .where(this.custInvoiceLine, fieldStr(CustInvoiceLine, ParentRecId))
                .isEqualToLiteral(this.custInvoiceTable.RecId)
            .outerJoin(this.custInvoiceLineInterProj)
                .where(this.custInvoiceLineInterProj, fieldStr(custInvoiceLineInterProj, CustInvoiceLine))
                    .isEqualTo(this.custInvoiceLine, fieldStr(CustInvoiceLine, RecId))
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.custInvoiceTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.custInvoiceTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.custInvoiceLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.custInvoiceLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        return TaxIntegrationLineObject::constructOnDocument(
            this.custInvoiceLine.TableId,
            this.custInvoiceLine.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();

        document.setDirection(TaxIntegrationDirection::Sales);
        document.setInvoiceId('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>CustInvoiceTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        super();

        document.setIncludingTax(this.custInvoiceTable.InclTax);
        document.setOrderAccount(this.custInvoiceTable.OrderAccount);
        document.setOrderAccountGroup(this.custTableOrder.CustGroup);
        document.setInvoiceAccount(this.custInvoiceTable.InvoiceAccount);
        document.setInvoiceAccountGroup(this.custTableInvoice.CustGroup);
        document.setTransactionCurrencyCode(this.custInvoiceTable.CurrencyCode);
        document.setDeliveryTerm(this.custInvoiceTable.DlvTerm);
        document.setListCode(this.custInvoiceTable.Listcode);
        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            document.setInvoiceDate(this.custInvoiceTable.InvoiceDate);
            document.setDocumentDate(this.custInvoiceTable.DocumentDate);
            document.setVATRegisterDate(this.custInvoiceTable.VatDueDate_W);
        }
        this.copyToDocumentFromVATNum(
            this.custInvoiceTable.VATNum,
            this.custInvoiceTable.VATNumTableType,
            this.custInvoiceTable.VATNumRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
        super();
        
        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromLadingAddressOrCompanyInformation(
            this.transportationDocument,
            CompanyInfo::find(),
            LogisticsLocationRoleType::Delivery);
        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress;
        if (this.custInvoiceTable.DeliveryLocation)
        {
            shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findByLocation(this.custInvoiceTable.DeliveryLocation);
        }
        else
        {
            shipmentDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(
                this.custTableOrder,
                LogisticsLocationRoleType::Delivery);
        }

        this.copyToDocumentFromShipmentAddressWithCountryRegionType(
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);

        LogisticsPostalAddress invoiceOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
            CompanyInfo::find(),
            LogisticsLocationRoleType::Invoice);

        LogisticsPostalAddress invoiceDestinationLogisticsPostalAddress;
        if (this.custInvoiceTable.PostalAddress)
        {
            invoiceDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(this.custInvoiceTable.PostalAddress);
        }
        else
        {
            invoiceDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(
                this.custTableInvoice,
                LogisticsLocationRoleType::Invoice);
        }

        this.copyToDocumentFromInvoiceAddressWithCountryRegionType(
            invoiceOriginLogisticsPostalAddress,
            invoiceDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>CustInvoiceLine</c>, <c>MCRSalesLineDropShipment</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        this.copyToLineFromSalesPurchJournalLine(_line, this.custInvoiceLine);

        _line.setIntrastatCommodityId(this.custInvoiceLine.IntrastatCommodity);
        if (_line.getIntrastatCommodityId())
        {
            EcoResCategory ecoResCategory = EcoResCategory::find(_line.getIntrastatCommodityId());
            _line.setIntrastatCommodityCode(EcoResCategory.Code);
        }

        _line.setLedgerDimension(this.custInvoiceLine.DefaultDimension);
        _line.setOperationLedgerDimension(LedgerDimensionFacade::serviceCreateLedgerDimension(
            this.custInvoiceLine.LedgerDimension,
            this.custInvoiceLine.DefaultDimension));
        _line.setLedgerPostingType(TaxIntegrationCustInvoiceCalcTaxCommon::getLedgerPostingTypeOfCustInvoiceLine());
        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _line.setGeneralLedgerAccount(LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.custInvoiceLine.LedgerDimension).MainAccountId);
        }

        if (custInvoiceLineInterProj.RecId)
        {
            _line.setProjectId(custInvoiceLineInterProj.ProjId);
            _line.setProjectCategory(custInvoiceLineInterProj.ProjCategoryId);
        }
        else
        {
            _line.setProjectId(this.custInvoiceLine.ProjId);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromSalesPurchJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to line from SalesPurchJournalLine.
    /// </summary>
    /// <param name = "_destination">The current line of the document.</param>
    /// <param name = "_source">The <c>SalesPurchJournalLine</c> record.</param>
    protected void copyToLineFromSalesPurchJournalLine(
        TaxIntegrationLineObject _destination,
        SalesPurchJournalLine _source)
    {
        _destination.setTransactionCurrencyCode(_source.CurrencyCode);

        _destination.setTaxGroup(_source.TaxGroup);
        _destination.setTaxItemGroup(_source.TaxItemGroup);
        _destination.setOverrideSalesTax(_source.OverrideSalesTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quatity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        _line.setQuantity(this.custInvoiceLine.Quantity);
        _line.setLineAmount(this.custInvoiceLine.AmountCur);
        _line.setTransactionAmount(_line.getLineAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets transaction quantity.
    /// The logic is similar as SalesCalcTax_Sales::transQty().
    /// </summary>
    /// <returns>The quantity.</returns>
    private SalesQty getTransactionQuantity()
    {
        return this.custInvoiceLine.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's address.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyAddressToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        TaxIntegrationAddressObject originAddress = document.getShipmentOriginAddress();
        TaxIntegrationAddressObject destinationAddress = document.getShipmentDestinationAddress();

        _line.getShipmentOriginAddress().copyFromAddress(originAddress);
        _line.getShipmentDestinationAddress().copyFromAddress(destinationAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>CustInvoiceTable</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromHeaderTable(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentCharge(TaxIntegrationLineObject _charge)
    {
        super(_charge);
        this.copyToDocumentChargeFromDocumentChargeTable(_charge);
        this.copyToDocumentChargeFromHeaderTable(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentChargeFromDocumentChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document from <c>MarkupTrans</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentChargeFromDocumentChargeTable(TaxIntegrationLineObject _charge)
    {
        this.copyToChargeFromChargeTable(_charge, this.markupTransOfDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentChargeFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document from <c>CustInvoiceTable</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentChargeFromHeaderTable(TaxIntegrationLineObject _charge)
    {
        _charge.setLedgerDimension(this.custInvoiceTable.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineCharge(TaxIntegrationLineObject _charge)
    {
        super(_charge);
        this.copyToLineChargeFromLineChargeTable(_charge);
        this.copyToLineChargeFromLineTable(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>MarkupTrans</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineChargeTable(TaxIntegrationLineObject _charge)
    {
        this.copyToChargeFromChargeTable(_charge, this.markupTransOfLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>CustInvoiceLine</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineTable(TaxIntegrationLineObject _charge)
    {
        _charge.setLedgerDimension(TaxIntegrationCustInvoiceCalcTaxCommon::getLedgerDimensionOfMarkup(this.custInvoiceLine, this.custInvoiceTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToChargeFromChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the currenct charge from <c>MarkupTable</c>.
    /// </summary>
    /// <param name = "_charge">The currenct charge.</param>
    /// <param name = "_markupTrans">The record of <c>MarkupTrans</c>.</param>
    protected void copyToChargeFromChargeTable(TaxIntegrationLineObject _charge, MarkupTrans _markupTrans)
    {
        _charge.setOperationLedgerDimension(TaxIntegrationCustInvoiceCalcTaxCommon::getOperationLedgerDimensionOfMarkup(this.custInvoiceLine, _markupTrans));
        _charge.setLedgerPostingType(TaxIntegrationCustInvoiceCalcTaxCommon::getLedgerPostingTypeOfMarkup(this.custInvoiceLine, _markupTrans));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>