<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmsTransactionFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Xml;
using System.Xml.Linq;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;

public class TmsTransactionFacade
{
    private System.Xml.Linq.XDocument       requestXml;
    private TMSCommunicationType            communicationType;
    private boolean                         communicationTypeInitialized;
    private System.DateTime                 currentDateTime;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromXml</Name>
				<Source><![CDATA[
    public static TmsTransactionFacade newFromXml(System.String _requestXml)
    {
        TmsTransactionFacade ret = new TmsTransactionFacade();
        ret.parmRequestXml(XDocExtensions::CreateXDocFromXml(_requestXml));
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        currentDateTime = utcDateTime2SystemDateTime(DateTimeUtil::utcNow());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentDateTime</Name>
				<Source><![CDATA[
    public System.DateTime getCurrentDateTime()
    {
        return currentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestXml</Name>
				<Source><![CDATA[
    public XDocument parmRequestXml(XDocument _requestXml = requestXml)
    {
        if (!prmIsDefault(_requestXml))
        {
            requestXml = _requestXml;
        }
        return requestXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmXTransaction</Name>
				<Source><![CDATA[
    public XElement parmXTransaction()
    {
        return this.parmRequestXml().Element(ElementXmlConstants::Transaction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequest</Name>
				<Source><![CDATA[
    public XElement parmRequest()
    {
        return this.parmXTransaction().Element(ElementXmlConstants::Request);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventoryLocationId()
    {
        return this.parmXTransaction().GetString(ElementXmlConstants::InventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId()
    {
        return this.parmXTransaction().GetString(ElementXmlConstants::InventorySiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccount</Name>
				<Source><![CDATA[
    private XElement parmAccount()
    {
        return this.parmXTransaction().Element(AccountXmlConstants::AccountNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorCode</Name>
				<Source><![CDATA[
    public str parmVendorCode()
    {
        return this.parmAccount().GetString(AccountXmlConstants::VendorCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorInvoiceCode</Name>
				<Source><![CDATA[
    public str parmVendorInvoiceCode()
    {
        return this.parmAccount().GetString(AccountXmlConstants::VendorInvoiceCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerCode</Name>
				<Source><![CDATA[
    public str parmCustomerCode()
    {
        return this.parmAccount().GetString(AccountXmlConstants::CustomerCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerInvoiceCode</Name>
				<Source><![CDATA[
    public str parmCustomerInvoiceCode()
    {
        return this.parmAccount().GetString(AccountXmlConstants::CustomerInvoiceCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommunicationType</Name>
				<Source><![CDATA[
    public TMSCommunicationType parmCommunicationType()
    {
        if (!communicationTypeInitialized)
        {
            System.String xmlCommunicationType = this.parmXTransaction().GetString(ElementXmlConstants::CommunicationType).Trim();

            if (System.String::IsNullOrEmpty(xmlCommunicationType))
            {
                throw error("@TRX:CommunicationTypeMustBeSet");
            }

            communicationType = symbol2Enum(enumNum(TMSCommunicationType), xmlCommunicationType);
            communicationTypeInitialized = true;
        }

        return communicationType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>