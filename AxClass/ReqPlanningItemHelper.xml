<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPlanningItemHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqPlanningItemHelper</c> class contains logic for handling planning item receipts during requirement calculations.
/// </summary>
class ReqPlanningItemHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanupByRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes requirement transactions for planning items.
    /// </summary>
    /// <param name="_planVersion">
    /// The plan version reference.
    /// </param>
    /// <param name="_refId">
    /// The reference ID.
    /// </param>
    public void cleanupByRefId(RefRecId _planVersion, InventTransRefId _refId)
    {
        ReqTrans        reqTrans;
        InventTable     inventTable;

        new SkipAOSValidationPermission().assert();

        this.skipAll(reqTrans);

        delete_from reqTrans
            where reqTrans.PlanVersion == _planVersion
                && reqTrans.RefType    == ReqRefType::Production
                && reqTrans.RefId      == _refId
        exists join inventTable
            where reqTrans.ItemId == inventTable.ItemId
                && inventTable.PmfProductType == PmfProductType::MainItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupUsingReqProcessItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes requirement transactions for planning items.
    /// </summary>
    /// <param name="_planVersion">
    /// The plan version reference.
    /// </param>
    /// <param name="_processId">
    /// The process ID.
    /// </param>
    public void cleanupUsingReqProcessItem(RefRecId _planVersion, ReqProcessId _processId)
    {
        ReqTrans        reqTrans;
        InventTable     inventTable;
        ReqProcessItem  reqProcessListItem;

        new SkipAOSValidationPermission().assert();

        this.skipAll(reqTrans);

        delete_from reqTrans
            where reqTrans.PlanVersion == _planVersion
                && reqTrans.RefType    == ReqRefType::Production
            exists join reqProcessListItem
                where reqTrans.ItemId == reqProcessListItem.ItemId
                    && reqProcessListItem.ProcessId == _processId
            exists join inventTable
            where reqTrans.ItemId == inventTable.ItemId
                && inventTable.PmfProductType == PmfProductType::MainItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSupplyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for finding planning item supply.
    /// </summary>
    /// <returns>
    /// The constructed query.
    /// </returns>
    public Query createSupplyQuery()
    {
        Query                   q               = new Query();
        QueryBuildDataSource    prodTableDs     = q.addDataSource(tableNum(ProdTable));
        QueryBuildDataSource    inventTableDs   = prodTableDs.addDataSource(tableNum(InventTable));
        QueryBuildDataSource    inventDimDs     = prodTableDs.addDataSource(tableNum(InventDim));

        List            prodStatusList = ProdStatusOrderedList::newFromOrder().retrieveStatusesBetween(ProdStatus::CostEstimated, ProdStatus::StartedUp);
        ListEnumerator  prodStatusEnumerator = prodStatusList.getEnumerator();
        str             prodStatusRange;

        while (prodStatusEnumerator.moveNext())
        {
            prodStatusRange = queryRangeConcat(prodStatusRange, queryValue(prodStatusEnumerator.current()));
        }
        prodTableDs.addRange(fieldNum(ProdTable, ProdStatus)).value(prodStatusRange);

        prodTableDs.fields().clearFieldList();
        prodTableDs.fields().addField(fieldNum(ProdTable, RecId));
        prodTableDs.fields().addField(fieldNum(ProdTable, InventDimId));
        prodTableDs.fields().addField(fieldNum(ProdTable, ItemId));
        prodTableDs.fields().addField(fieldNum(ProdTable, QtySched));
        prodTableDs.fields().addField(fieldNum(ProdTable, ProdId));
        prodTableDs.fields().addField(fieldNum(ProdTable, DlvDate));
        prodTableDs.fields().addField(fieldNum(ProdTable, DlvTime));

        inventTableDs.joinMode(JoinMode::InnerJoin);
        inventTableDs.fetchMode(QueryFetchMode::One2One);
        inventTableDs.addLink(fieldNum(ProdTable, ItemId), fieldNum(InventTable, ItemId));
        inventTableDs.addRange(fieldNum(InventTable, PmfProductType)).value(SysQuery::value(PmfProductType::MainItem));
        inventTableDs.fields().clearFieldList();
        inventTableDs.fields().addField(fieldNum(InventTable, RecId));
        inventTableDs.fields().addField(fieldNum(InventTable, ItemId));
        inventTableDs.fields().addField(fieldNum(InventTable, Product));

        inventDimDs.joinMode(JoinMode::InnerJoin);
        inventDimDs.fetchMode(QueryFetchMode::One2One);
        inventDimDs.addLink(fieldNum(ProdTable, InventDimId), fieldNum(InventDim, InventDimId));

        prodTableDs.addSortField(fieldnum(ProdTable, ItemId));
        prodTableDs.addSortField(fieldnum(ProdTable, InventDimId));

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureProductionReqTransExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that a requirement transaction exists for a given production order.
    /// </summary>
    /// <param name="_prodTable">
    /// The production order.
    /// </param>
    /// <returns>
    /// The requirement transaction.
    /// </returns>
    public ReqTrans ensureProductionReqTransExists(ProdTable _prodTable)
    {
        RefRecId planVersion = ReqPlanVersion::findActiveReqPlanIdDynamic().RecId;
        ReqTrans reqTrans = this.findProductionReqTrans(_prodTable, planVersion);

        if (!reqTrans)
        {
            reqTrans = this.initProductionReqTrans(_prodTable, planVersion);
            reqTrans.insert(ReqPlanData::newReqPlanVersion(planVersion));
        }

        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProductionReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the requirement transaction for a given production order.
    /// </summary>
    /// <param name="_prodTable">
    /// The production order.
    /// </param>
    /// <param name="_planVersion">
    /// The plan version.
    /// </param>
    /// <returns>
    /// The requirement transaction.
    /// </returns>
    public ReqTrans findProductionReqTrans(ProdTable _prodTable, RefRecId  _planVersion)
    {
        ReqTrans reqTrans;

        select firstOnly RecId from reqTrans
            where reqTrans.PlanVersion == _planVersion
                && reqTrans.RefType == ReqRefType::Production
                && reqTrans.RefId == _prodTable.ProdId;

        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductionReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the requirement transaction.
    /// </summary>
    /// <param name="_prodTable">
    /// The production order.
    /// </param>
    /// <param name="_planVersion">
    /// The plan version.
    /// </param>
    /// <param name="_inventTable">
    /// The item reference; optional.
    /// </param>
    /// <param name="_reqSetupDim">
    /// The object with master planning setup; optional.
    /// </param>
    /// <returns>
    /// The requirement transaction.
    /// </returns>
    public ReqTrans initProductionReqTrans(
        ProdTable   _prodTable,
        RefRecId    _planVersion,
        InventTable _inventTable = null,
        ReqSetupDim _reqSetupDim = null)
    {
        ReqTrans reqTrans;

        if (!_inventTable)
        {
            _inventTable = _prodTable.inventTable();
        }
        if (!_reqSetupDim)
        {
            _reqSetupDim = ReqSetupDim::newCovInventDimId(ReqSetup::newItemId(_prodTable.ItemId, _inventTable),
                _prodTable.inventDim().reqCovDimId(InventDimGroupSetup::newInventTable(_inventTable)));
        }

        reqTrans.PlanVersion                    = _planVersion;
        reqTrans.ItemId                         = _prodTable.ItemId;
        reqTrans.CovInventDimId                 = _reqSetupDim.parmCovInventDimId();
        reqTrans.Qty                            = _prodTable.QtySched;
        reqTrans.RefType                        = ReqRefType::Production;
        reqTrans.InventTransOrigin              = InventTransOriginProdTable::findInventTransOriginId(_prodTable.dataAreaId, _prodTable.ProdId);
        reqTrans.RefId                          = _prodTable.ProdId;
        reqTrans.ReqDate                        = _prodTable.DlvDate;
        reqTrans.ReqTime                        = _prodTable.DlvTime;
        reqTrans.Level                          = _reqSetupDim.itemLevel();

        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Skips relevant data methods on the buffer for set-based operations.
    /// </summary>
    /// <param name="_record">
    /// The buffer reference.
    /// </param>
    private void skipAll(Common _record)
    {
        _record.skipDataMethods(true);
        _record.skipAosValidation(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqPlanningItemHelper construct()
    {
        return new ReqPlanningItemHelper();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>