<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionAutoCompleteVendDefaultFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DimensionAutoCompleteVendDefaultFilter</c> class is used to add more restrictions to
///    autocomplete data for the default accounts setup for vendors.
/// </summary>
public class DimensionAutoCompleteVendDefaultFilter implements DimensionAutoCompleteFilterable
{
    FormDataSource dataSource;
    fieldName accountTypeFieldName;
    fieldName accountFieldName;
    FormDataSource vendAccountDataSource;
    FieldName vendAccountFieldName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>filterQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds additional restrictions to the current query for autocomplete data.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> instance that is used to retrieve autocomplete data.
    /// </param>
    /// <param name="__autocompleteMode">
    /// The type of filtering that should be applied.
    /// </param>
    /// <param name="_filterValue">
    /// The value by which results should be filtered.
    /// </param>
    /// <param name="_dimensionAttributeId">
    /// The record ID of the <c>DimensionAttribute</c> record for which autocomplete data is being
    /// requested.
    /// </param>
    /// <param name="_currentValues">
    /// A <c>DimensionStorage</c> instance that contains the current values of the combination.
    /// </param>
    public void filterQuery(Query _query, AutoCompleteDataMode _autocompleteMode, str _filterValue, RecId _dimensionAttributeId, DimensionStorage _currentValues)
    {
        QueryBuildDataSource qbds;

        Common common;
        LedgerJournalACType accountType;
        RecId ledgerDimensionId;
        VendTable vendTable;
        VendAccount vendAccount;
        DimensionAttributeViewContract dimensionAttributeViewContract;

        common = dataSource.cursor();

        if (typeof(common) != typeof(null) && _dimensionAttributeId == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount) && _autocompleteMode == AutoCompleteDataMode::ValidValues)
        {
            accountType = common.getFieldValue(accountTypeFieldName);
            ledgerDimensionId = common.getFieldValue(accountFieldName);

            if (ledgerDimensionId)
            {
                vendTable = VendTable::findByLedgerDimension(ledgerDimensionId);
            }
            else if (vendAccountDataSource && vendAccountFieldName)
            {
                // The primary filter was not set but a secondary filter option was provided.
                common = vendAccountDataSource.cursor();
                vendAccount = common.getFieldValue(vendAccountFieldName);

                if (vendAccount)
                {
                    vendTable = VendTable::find(vendAccount);
                }
            }

            if (vendTable.AccountNum && VendDefaultAccounts::existDefaultForType(vendTable.AccountNum, LedgerJournalACType::Ledger))
            {
                dimensionAttributeViewContract = DimensionAttribute::getViewContract(_dimensionAttributeId);

                qbds = _query.dataSourceTable(dimensionAttributeViewContract.parmViewId());

                qbds = qbds.addDataSource(tableNum(DimensionAttributeValueCombination));
                qbds.joinMode(JoinMode::ExistsJoin);
                qbds.addLink(dimensionAttributeViewContract.parmKeyFieldId(), fieldNum(DimensionAttributeValueCombination, MainAccount));

                qbds = qbds.addDataSource(tableNum(VendDefaultAccounts));
                qbds.addLink(fieldNum(DimensionAttributeValueCombination, RecId), fieldNum(VendDefaultAccounts, LedgerDimension));

                qbds.addRange(fieldNum(VendDefaultAccounts, LedgerJournalACType)).value(QueryValue(LedgerJournalACType::Ledger));

                if (VendDefaultAccounts::existVendAccountForType(vendTable.AccountNum, LedgerJournalACType::Ledger))
                {
                    qbds.addRange(fieldNum(VendDefaultAccounts, VendAccount)).value(queryValue(vendTable.AccountNum));
                }
                else if (VendDefaultAccounts::existVendGroupForType(vendTable.VendGroup, LedgerJournalACType::Ledger))
                {
                    qbds.addRange(fieldNum(VendDefaultAccounts, VendGroup)).value(queryValue(vendTable.VendGroup));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>DimensionAutocompleteVendDefaultFilter</c> class.
    /// </summary>
    /// <param name="_dataSource">
    /// The <c>FormDataSource</c> instance that contains information about the current account.
    /// </param>
    /// <param name="_accountFieldName">
    /// The name of the account field on the specified <c>FormDataSource</c> instance.
    /// </param>
    /// <param name="_accountTypeFieldName">
    /// The name of the account type field on the specified <c>FormDataSource</c> instance.
    /// </param>
    /// <remarks>
    /// This class is intended to manage the autocomplete data of the field related to the account
    /// specified. For example, if data for the account field must be managed, the information for the
    /// offset account should be specified in the call to the constructor.
    /// </remarks>
    public void new(FormDataSource _dataSource, fieldName _accountFieldName, fieldName _accountTypeFieldName)
    {
        dataSource = _dataSource;
        accountTypeFieldName = _accountTypeFieldName;
        accountFieldName = _accountFieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendorAccountNumFilterSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the vendor account number from which to filter the query.
    /// </summary>
    /// <param name="_dataSource">
    /// The <c>FormDataSource</c> instance that contains information about the current account.
    /// </param>
    /// <param name="_vendAccountFieldName">
    /// The name of the account field on the specified <c>FormDataSource</c> instance.
    /// </param>
    /// <remarks>
    /// This is a secondary filter that will only be applied when the primary filter does not find a vendor account.
    /// </remarks>
    public void setVendorAccountNumFilterSource(FormDataSource _dataSource, fieldName _vendAccountFieldName)
    {
        vendAccountDataSource = _dataSource;
        vendAccountFieldName = _vendAccountFieldName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>