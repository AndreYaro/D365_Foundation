<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransDeclarationViewHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTransDeclarationViewHelper</c> class is the helper class for common logic in tax transaction declaration views.
/// </summary>
internal final class TaxTransDeclarationViewHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the credit note flag to the view transaction based on the data of the current tax transaction's original document
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; returns 'Yes' if the view transaction's original document belongs to the credit note; 'No' otherwise.</returns>
    internal static str isCreditNote(TableName _viewName)
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_Reporting, fieldStr(TaxTrans_Reporting, IsOriginalDocumentCreditNote)),
                SysComputedColumn::comparisonLiteral(SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes))),
            SysComputedColumn::returnLiteral(enum2int(NoYes::Yes)),
            SysComputedColumn::returnLiteral(enum2int(NoYes::No)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxTransCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the credit note flag to the view transaction based on the data of the current tax transaction.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; returns 'Yes' if the tax transaction belongs to the credit note; 'No' otherwise.</returns>
    internal static str isTaxTransCreditNote(TableName _viewName)
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_Reporting, fieldStr(TaxTrans_Reporting, IsTaxTransCreditNote)),
                SysComputedColumn::comparisonLiteral(SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes))),
            SysComputedColumn::returnLiteral(enum2int(NoYes::Yes)),
            SysComputedColumn::returnLiteral(enum2int(NoYes::No)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the invoice number found in cust/vend/ledger transaction.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the invoice number.</returns>
    internal static str invoice(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str custTransInvoiceNumField_Tax = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, Invoice));
        str vendTransInvoiceNumField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, Invoice));
        str ledgerTransInvoiceNumField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSLedgerJournalTrans, fieldStr(LedgerJournalTrans, Invoice));

        str emptyStrLiteral = SysComputedColumn::comparisonLiteral('');

        str custCreditMemoDocNumField_CZ, custTaxDocNumField_CZ, vendCreditMemoDocNumField_CZ, vendTaxDocNumField_CZ;
        boolean isCzAdvanceInvoicesConfigKeyEnabled = isConfigurationkeyEnabled(configurationKeyNum(CzCustVendAdvanceInvoices));
        if (isCzAdvanceInvoicesConfigKeyEnabled)
        {
            custCreditMemoDocNumField_CZ = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCzTaxCreditMemo_Cust, fieldStr(CzTaxCreditMemo, TaxCreditMemoNum));
            custTaxDocNumField_CZ = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCzTaxDocumentTable_Cust, fieldStr(CzTaxDocumentTable, TaxDocumentNum));
            vendCreditMemoDocNumField_CZ = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCzTaxCreditMemo_Vend, fieldStr(CzTaxCreditMemo, TaxCreditMemoNum));
            vendTaxDocNumField_CZ = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCzTaxDocumentTable_Vend, fieldStr(CzTaxDocumentTable, TaxDocumentNum));
        }

        //cust CZ prepayment invoice
        if (isCzAdvanceInvoicesConfigKeyEnabled)
        {
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(custCreditMemoDocNumField_CZ, Types::String),
                custCreditMemoDocNumField_CZ]);

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(custTaxDocNumField_CZ, Types::String),
                custTaxDocNumField_CZ]);
        }

        //cust or proj invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransInvoiceNumField_Tax, Types::String),
            custTransInvoiceNumField_Tax]);

        //vend CZ prepayment invoice
        if (isCzAdvanceInvoicesConfigKeyEnabled)
        {
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(vendCreditMemoDocNumField_CZ, Types::String),
                vendCreditMemoDocNumField_CZ]);

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(vendTaxDocNumField_CZ, Types::String),
                vendTaxDocNumField_CZ]);
        }

        //vend invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransInvoiceNumField, Types::String),
            vendTransInvoiceNumField]);

        //ledger invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(ledgerTransInvoiceNumField, Types::String),
            ledgerTransInvoiceNumField]);

        //tax trans
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            str taxTransInvoiceNumField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, InvoiceId));
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(taxTransInvoiceNumField, Types::String),
                taxTransInvoiceNumField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, emptyStrLiteral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the invoice which has been settled by the current settlment transaction (if the tax trans belongs to such transaction)
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the settled invoice number.</returns>
    internal static str settledInvoice(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str custTransInvoiceField_SettledInvoice = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_SettledInvoice, fieldStr(CustTrans, Invoice));
        str vendTransInvoiceField_SettledInvoice = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans_SettledInvoice, fieldStr(VendTrans, Invoice));
        str custTransInvoiceField_Source = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Source, fieldStr(CustTrans, Invoice));
        str vendTransInvoiceField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, Invoice));
        str custTransInvoiceField_SettledInvoice_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_SettledInvoice_LedgerJournalTrans, fieldStr(CustTrans, Invoice));
        str vendSettlementRecIdField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendSettlement, fieldStr(VendSettlement, RecId));
        str vendTransInvoiceField_SettledInvoicePrepayment = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans_Prepayment, fieldStr(VendTrans, Invoice));

        str emptyStrLiteral = SysComputedColumn::comparisonLiteral('');

        //cust settled invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransInvoiceField_SettledInvoice, Types::String),
            custTransInvoiceField_SettledInvoice]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransInvoiceField_SettledInvoice_LedgerJournalTrans, Types::String),
            custTransInvoiceField_SettledInvoice_LedgerJournalTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransInvoiceField_Source, Types::String),
            custTransInvoiceField_Source]);

        //vend settled invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransInvoiceField_SettledInvoice, Types::String),
            vendTransInvoiceField_SettledInvoice]);

        comparisonExpressionList.addEnd([
            SysComputedColumn::and2(
                ViewComputedColumnUtil::isNotEmptyOrNull(vendTransInvoiceField, Types::String),
                ViewComputedColumnUtil::isNotEmptyOrNull(vendSettlementRecIdField, Types::Int64)),
            vendTransInvoiceField]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransInvoiceField_SettledInvoicePrepayment, Types::String),
            vendTransInvoiceField_SettledInvoicePrepayment]);

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, emptyStrLiteral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledInvoiceTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines TransDate of any TaxTrans record related to the invoice which has been settled by the current settlment transaction (if the tax trans belongs to such transaction)
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; TransDate of TaxTrans related to the settled invoice.</returns>
    internal static str settledInvoiceTransDate(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str transDateField_SettledCustTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, TransDate));
        str transDateField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, TransDate));
        str transDateField_SettledVendTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledVendTrans, fieldStr(TaxTransVoucherDatesView, TransDate));
        str transDateField_SettledVendTransPrepayment = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledVendTransPrepayment, fieldStr(TaxTransVoucherDatesView, TransDate));

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(transDateField_SettledCustTrans, Types::Date),
            transDateField_SettledCustTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(transDateField_SettledCustTrans_LedgerJournalTrans, Types::Date),
            transDateField_SettledCustTrans_LedgerJournalTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(transDateField_SettledVendTrans, Types::Date),
            transDateField_SettledVendTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(transDateField_SettledVendTransPrepayment, Types::Date),
            transDateField_SettledVendTransPrepayment]);

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledInvoiceVatDueDate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines VatDueDate_W of any TaxTrans record related to the invoice which has been settled by the current settlment transaction (if the tax trans belongs to such transaction)
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; VatDueDate_W of TaxTrans related to the settled invoice.</returns>
    internal static str settledInvoiceVatDueDate_W(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str vatDueDateField_SettledCustTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, VatDueDate_W));
        str vatDueDateField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, VatDueDate_W));
        str vatDueDateField_SettledVendTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledVendTrans, fieldStr(TaxTransVoucherDatesView, VatDueDate_W));
        str vatDueDateField_SettledVendTransPrepayment = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledVendTransPrepayment, fieldStr(TaxTransVoucherDatesView, VatDueDate_W));

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vatDueDateField_SettledCustTrans, Types::Date),
            vatDueDateField_SettledCustTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vatDueDateField_SettledCustTrans_LedgerJournalTrans, Types::Date),
            vatDueDateField_SettledCustTrans_LedgerJournalTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vatDueDateField_SettledVendTrans, Types::Date),
            vatDueDateField_SettledVendTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vatDueDateField_SettledVendTransPrepayment, Types::Date),
            vatDueDateField_SettledVendTransPrepayment]);

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledInvoiceInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines InvoiceDate of any TaxTrans record related to the invoice which has been settled by the current settlment transaction (if the tax trans belongs to such transaction)
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; InvoiceDate of TaxTrans related to the settled invoice.</returns>
    internal static str settledInvoiceInvoiceDate(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str custInvoiceDateField_SettledCustTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, CustInvoiceDate));
        str custInvoiceDateField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, CustInvoiceDate));
        str vendInvoiceDateField_SettledVendTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledVendTrans, fieldStr(TaxTransVoucherDatesView, VendInvoiceDate));
        str taxTransTransDateField_SettledVendTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledVendTrans, fieldStr(TaxTransVoucherDatesView, TransDate));
        str vendTransRecIdField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, RecId));
        str vendInvoiceDateField_SettledVendTransPrepayment = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledVendTransPrepayment, fieldStr(TaxTransVoucherDatesView, VendInvoiceDate));

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceDateField_SettledCustTrans, Types::Date),
            custInvoiceDateField_SettledCustTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceDateField_SettledCustTrans_LedgerJournalTrans, Types::Date),
            custInvoiceDateField_SettledCustTrans_LedgerJournalTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceDateField_SettledVendTrans, Types::Date),
            vendInvoiceDateField_SettledVendTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceDateField_SettledVendTransPrepayment, Types::Date),
            vendInvoiceDateField_SettledVendTransPrepayment]);

        //proj invoice
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            str projInvoiceDateField_SettledCustTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, ProjInvoiceDate));
            str projInvoiceDateField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, ProjInvoiceDate));
            str projInvoiceDateField_SettledVendTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledVendTrans, fieldStr(TaxTransVoucherDatesView, ProjInvoiceDate));
                    
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(projInvoiceDateField_SettledCustTrans, Types::Date),
                projInvoiceDateField_SettledCustTrans]);

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(projInvoiceDateField_SettledCustTrans_LedgerJournalTrans, Types::Date),
                projInvoiceDateField_SettledCustTrans_LedgerJournalTrans]);

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(projInvoiceDateField_SettledVendTrans, Types::Date),
                projInvoiceDateField_SettledVendTrans]);
            
        }

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransRecIdField, Types::Int64),
            taxTransTransDateField_SettledVendTrans]);

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledInvoiceDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines DocumentDate of any TaxTrans record related to the invoice which has been settled by the current settlment transaction (if the tax trans belongs to such transaction)
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; DocumentDate of TaxTrans related to the settled invoice.</returns>
    internal static str settledInvoiceDocumentDate(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str dsTaxTrans_SettledCustTrans = TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans;
        str dsSTaxTrans_SettledCustTrans_LedgerJournalTrans = TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans_LedgerJournalTrans;
        str dsTaxTrans_SettledVendTrans = TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledVendTrans;
        
        str custTransDocDateField_SettledCustTrans = SysComputedColumn::returnField(_viewName, dsTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, CustTransDocumentDate));
        str custInvoiceDocDateField_SettledCustTrans = SysComputedColumn::returnField(_viewName, dsTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, CustInvoiceDocumentDate));
        str custLedgerDocDateField_SettledCustTrans = SysComputedColumn::returnField(_viewName, dsTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, CustTrans_LedgerDocumentDate));

        str custTransDocDateField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, dsSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, CustTransDocumentDate));
        str custInvoiceDocDateField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, dsSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, CustInvoiceDocumentDate));
        str custLedgerDocDateField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, dsSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, CustTrans_LedgerDocumentDate));

        str vendTransDocDateField_SettledVendTrans = SysComputedColumn::returnField(_viewName, dsTaxTrans_SettledVendTrans, fieldStr(TaxTransVoucherDatesView, VendTransDocumentDate));
        str vendInvoiceDocDateField_SettledVendTrans = SysComputedColumn::returnField(_viewName, dsTaxTrans_SettledVendTrans, fieldStr(TaxTransVoucherDatesView, VendInvoiceDocumentDate));
        str vendTransDocDateField_SettledVendTransPrepayment = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledVendTransPrepayment, fieldStr(TaxTransVoucherDatesView, VendTransDocumentDate));

        str ledgerJourTransDocDateField_SettledCustTrans = SysComputedColumn::returnField(_viewName, dsTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, LedgerJournalTransDocumentDate));
        str ledgerJourTransDocDateField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, dsSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, LedgerJournalTransDocumentDate));
        str ledgerJourTransDocDateField_SettledVendTrans = SysComputedColumn::returnField(_viewName, dsTaxTrans_SettledVendTrans, fieldStr(TaxTransVoucherDatesView, LedgerJournalTransDocumentDate));
                
        boolean isCzAdvanceInvoicesConfigKeyEnabled = isConfigurationkeyEnabled(configurationKeyNum(CzCustVendAdvanceInvoices));
        
        //cust CZ prepayment invoice
        if (isCzAdvanceInvoicesConfigKeyEnabled)
        {
            str custCreditMemoDateField_SettledCustTrans = SysComputedColumn::returnField(_viewName, dsTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, CzCustTaxCreditMemoDate));
            str custTaxDocDateField_SettledCustTrans = SysComputedColumn::returnField(_viewName, dsTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, CzCustTaxDocumentDate));
            str custCreditMemoDateField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, dsSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, CzCustTaxCreditMemoDate));
            str custTaxDocDateField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, dsSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, CzCustTaxDocumentDate));

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(custCreditMemoDateField_SettledCustTrans, Types::Date),
                custCreditMemoDateField_SettledCustTrans]);

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(custTaxDocDateField_SettledCustTrans, Types::Date),
                custTaxDocDateField_SettledCustTrans]);

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(custCreditMemoDateField_SettledCustTrans_LedgerJournalTrans, Types::Date),
                custCreditMemoDateField_SettledCustTrans_LedgerJournalTrans]);

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(custTaxDocDateField_SettledCustTrans_LedgerJournalTrans, Types::Date),
                custTaxDocDateField_SettledCustTrans_LedgerJournalTrans]);
        }

        //cust or proj invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransDocDateField_SettledCustTrans, Types::Date),
            custTransDocDateField_SettledCustTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceDocDateField_SettledCustTrans, Types::Date),
            custInvoiceDocDateField_SettledCustTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custLedgerDocDateField_SettledCustTrans, Types::Date),
            custLedgerDocDateField_SettledCustTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransDocDateField_SettledCustTrans_LedgerJournalTrans, Types::Date),
            custTransDocDateField_SettledCustTrans_LedgerJournalTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceDocDateField_SettledCustTrans_LedgerJournalTrans, Types::Date),
            custInvoiceDocDateField_SettledCustTrans_LedgerJournalTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custLedgerDocDateField_SettledCustTrans_LedgerJournalTrans, Types::Date),
            custLedgerDocDateField_SettledCustTrans_LedgerJournalTrans]);

        //vend CZ prepayment invoice
        if (isCzAdvanceInvoicesConfigKeyEnabled)
        {
            str vendCreditMemoDateField_SettledVendTrans = SysComputedColumn::returnField(_viewName, dsTaxTrans_SettledVendTrans, fieldStr(TaxTransVoucherDatesView, CzVendTaxCreditMemoDate));
            str vendTaxDocDateField_SettledVendTrans = SysComputedColumn::returnField(_viewName, dsTaxTrans_SettledVendTrans, fieldStr(TaxTransVoucherDatesView, CzVendTaxDocumentDate));

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(vendCreditMemoDateField_SettledVendTrans, Types::Date),
                vendCreditMemoDateField_SettledVendTrans]);

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(vendTaxDocDateField_SettledVendTrans, Types::Date),
                vendTaxDocDateField_SettledVendTrans]);
        }

        //vend invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransDocDateField_SettledVendTrans, Types::Date),
            vendTransDocDateField_SettledVendTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceDocDateField_SettledVendTrans, Types::Date),
            vendInvoiceDocDateField_SettledVendTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransDocDateField_SettledVendTransPrepayment, Types::Date),
            vendTransDocDateField_SettledVendTransPrepayment]);

        //ledger invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(ledgerJourTransDocDateField_SettledCustTrans, Types::Date),
            ledgerJourTransDocDateField_SettledCustTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(ledgerJourTransDocDateField_SettledCustTrans_LedgerJournalTrans, Types::Date),
            ledgerJourTransDocDateField_SettledCustTrans_LedgerJournalTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(ledgerJourTransDocDateField_SettledVendTrans, Types::Date),
            ledgerJourTransDocDateField_SettledVendTrans]);

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            str transferOrderDateField_SettledCustTrans = SysComputedColumn::returnField(_viewName, dsTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, InventTransferJourDate));
            str transferOrderDateField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, dsSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, InventTransferJourDate));
            str transferOrderDateField_SettledVendTrans = SysComputedColumn::returnField(_viewName, dsTaxTrans_SettledVendTrans, fieldStr(TaxTransVoucherDatesView, InventTransferJourDate));

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderDateField_SettledCustTrans, Types::Date),
                transferOrderDateField_SettledCustTrans]);

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderDateField_SettledCustTrans_LedgerJournalTrans, Types::Date),
                transferOrderDateField_SettledCustTrans_LedgerJournalTrans]);

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderDateField_SettledVendTrans, Types::Date),
                transferOrderDateField_SettledVendTrans]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the document number found in cust/vend/ledger transaction or in a linked document.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the document number.</returns>
    internal static str documentNum(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str custInvoiceDocNumField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceJour, fieldStr(CustInvoiceJour, DocumentNum));
        str vendInvoiceDocNumField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceJour, fieldStr(VendInvoiceJour, DocumentNum));
        str custTransDocNumField_Tax = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, DocumentNum));
        str vendTransDocNumField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, DocumentNum));
        str custTransDocNumField_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_LedgerJournalTrans, fieldStr(CustTrans, DocumentNum));
        str ledgerTransDocNumField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSLedgerJournalTrans, fieldStr(LedgerJournalTrans, DocumentNum));

        str emptyStrLiteral = SysComputedColumn::comparisonLiteral('');

        //cust or proj invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransDocNumField_Tax, Types::String),
            custTransDocNumField_Tax]);
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceDocNumField, Types::String),
            custInvoiceDocNumField]);
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransDocNumField_LedgerJournalTrans, Types::String),
            custTransDocNumField_LedgerJournalTrans]);

        //vend invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransDocNumField, Types::String),
            vendTransDocNumField]);
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceDocNumField, Types::String),
            vendInvoiceDocNumField]);

        //ledger invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(ledgerTransDocNumField, Types::String),
            ledgerTransDocNumField]);

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            str transferOrderDocNumField = SysComputedColumn::returnField(_viewName, identifierStr(InventTransferJour), fieldStr(InventTransferJour, TransferId));
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderDocNumField, Types::String),
                transferOrderDocNumField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, emptyStrLiteral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the document type which the tax transaction is linked to.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the value of <c>TaxDeclarationDocumentType</c> type.</returns>
    internal static str documentType(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str custInvoiceJourRecIdField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceJour, fieldStr(CustInvoiceJour, RecId));
        str vendInvoiceJourRecIdField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceJour, fieldStr(VendInvoiceJour, RecId));
        str custTransTransTypeField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, TransType));
        str vendTransTransTypeField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, TransType));
        str custSettlementRecIdField_Source = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustSettlement, fieldStr(CustSettlement, RecId));
        str vendSettlementRecIdField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendSettlement, fieldStr(VendSettlement, RecId));
        str custSettlementRecIdField_LedgerJournalTrans = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustSettlement_LedgerJournalTrans, fieldStr(CustSettlement, RecId));
        str ledgerJournalTypeField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_Reporting, fieldStr(TaxTrans_Reporting, LedgerJournalType));
        str taxTransTaxOriginField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxOrigin));
        
        str taxOriginReportingLiteral = SysComputedColumn::comparisonLiteral(enum2int(TaxOrigin::TaxReporting));
        str transTypePaymentLiteral = SysComputedColumn::comparisonLiteral(enum2int(LedgerTransType::Payment));
        str invoiceRegisterLiteral = SysComputedColumn::comparisonLiteral(enum2int(LedgerJournalType::PurchaseLedger));
        str invoiceApprovalLiteral = SysComputedColumn::comparisonLiteral(enum2int(LedgerJournalType::Approval));

        // cz prepayment
        if (isConfigurationkeyEnabled(configurationKeyNum(CzCustVendAdvanceInvoices)))
        {
            str custCZTaxDocumentRecIdField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCzTaxDocumentTable_Cust, fieldStr(CzTaxDocumentTable, RecId));
            str vendCZTaxDocumentRecIdField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCzTaxDocumentTable_Vend, fieldStr(CzTaxDocumentTable, RecId));

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(vendCZTaxDocumentRecIdField, Types::Int64),
                SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::VendInvoiceOnPrepayment)))]);
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(custCZTaxDocumentRecIdField, Types::Int64),
                SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::CustInvoiceOnPrepayment)))]);
        }

        // invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceJourRecIdField, Types::Int64),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::VendInvoice)))]);
        comparisonExpressionList.addEnd([
            SysComputedColumn::equalExpression(ledgerJournalTypeField, invoiceRegisterLiteral),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::VendInvoice)))]);
        comparisonExpressionList.addEnd([
            SysComputedColumn::equalExpression(ledgerJournalTypeField, invoiceApprovalLiteral),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::VendInvoice)))]);

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            str projInvoiceJourRecIdField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSProjInvoiceJour, fieldStr(ProjInvoiceJour, RecId));

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(projInvoiceJourRecIdField, Types::Int64),
                SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::ProjInvoice)))]);
        }

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceJourRecIdField, Types::Int64),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::CustInvoice)))]);
        
        // settlement
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custSettlementRecIdField_Source, Types::Int64),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::CustSettlement)))]);
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custSettlementRecIdField_LedgerJournalTrans, Types::Int64),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::CustSettlement)))]);
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendSettlementRecIdField, Types::Int64),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::VendSettlement)))]);

        // payment
        comparisonExpressionList.addEnd([
            SysComputedColumn::equalExpression(custTransTransTypeField, transTypePaymentLiteral),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::CustPayment)))]);
        comparisonExpressionList.addEnd([
            SysComputedColumn::equalExpression(vendTransTransTypeField, transTypePaymentLiteral),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::VendPayment)))]);

        // tax settlement
        comparisonExpressionList.addEnd([
            SysComputedColumn::equalExpression(taxTransTaxOriginField, taxOriginReportingLiteral),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::TaxReporting)))]);

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            str transferOrderTypeField = SysComputedColumn::returnField(_viewName, identifierStr(InventTransferJour), fieldStr(InventTransferJour, UpdateType));
            comparisonExpressionList.addEnd([
                SysComputedColumn::equalExpression(transferOrderTypeField, SysComputedColumn::comparisonLiteral(enum2int(InventTransferUpdateType::Shipment))),
                SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::TransferOrderShipment)))]);
            comparisonExpressionList.addEnd([
                SysComputedColumn::equalExpression(transferOrderTypeField, SysComputedColumn::comparisonLiteral(enum2int(InventTransferUpdateType::Receive))),
                SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::TransferOrderReceive)))]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, SysComputedColumn::returnLiteral(enum2int(TaxDeclarationDocumentType::LedgerJournal)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the invoice date.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the invoice date.</returns>
    internal static str invoiceDate(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str custInvoiceDateField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceJour, fieldStr(CustInvoiceJour, InvoiceDate));
        str vendInvoiceDateField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceJour, fieldStr(VendInvoiceJour, InvoiceDate));
        str vendTransDateField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, TransDate));
        str emptyDateLiteral = SysComputedColumn::comparisonLiteral(dateNull());

        //cust invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceDateField, Types::Date),
            custInvoiceDateField]);

        //vend invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceDateField, Types::Date),
            vendInvoiceDateField]);
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransDateField, Types::Date),
            vendTransDateField]);

        //proj invoice
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            str projInvoiceDateField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSProjInvoiceJour, fieldStr(ProjInvoiceJour, InvoiceDate));
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(projInvoiceDateField, Types::Date),
                projInvoiceDateField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, emptyDateLiteral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the document date.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the document date.</returns>
    internal static str documentDate(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str custInvoiceDocDateField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceJour, fieldStr(CustInvoiceJour, DocumentDate));
        str vendInvoiceDocDateField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceJour, fieldStr(VendInvoiceJour, DocumentDate));
        str custTransDocDateField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, DocumentDate));
        str vendTransDocDateField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, DocumentDate));
        str custTransDocDateField_LedgerJournalTrans = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_LedgerJournalTrans, fieldStr(CustTrans, DocumentDate));
        str ledgerJourTransDocDateField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSLedgerJournalTrans, fieldStr(LedgerJournalTrans, DocumentDate));
        str emptyDateLiteral = SysComputedColumn::comparisonLiteral(dateNull());

        boolean isCzAdvanceInvoicesConfigKeyEnabled = isConfigurationkeyEnabled(configurationKeyNum(CzCustVendAdvanceInvoices));
        str custCreditMemoDocDateField_CZ, custTaxDocDateField_CZ, vendCreditMemoDocDateField_CZ, vendTaxDocDateField_CZ;
        if (isCzAdvanceInvoicesConfigKeyEnabled)
        {
            custCreditMemoDocDateField_CZ = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCzTaxCreditMemo_Cust, fieldStr(CzTaxCreditMemo, TaxCreditMemoDate));
            custTaxDocDateField_CZ = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCzTaxDocumentTable_Cust, fieldStr(CzTaxDocumentTable, TaxDocumentDate));
            vendCreditMemoDocDateField_CZ = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCzTaxCreditMemo_Vend, fieldStr(CzTaxCreditMemo, TaxCreditMemoDate));
            vendTaxDocDateField_CZ = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCzTaxDocumentTable_Vend, fieldStr(CzTaxDocumentTable, TaxDocumentDate));
        }

        //cust CZ prepayment invoice
        if (isCzAdvanceInvoicesConfigKeyEnabled)
        {
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(custCreditMemoDocDateField_CZ, Types::Date),
                custCreditMemoDocDateField_CZ]);
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(custTaxDocDateField_CZ, Types::Date),
                custTaxDocDateField_CZ]);
        }

        //cust or proj invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransDocDateField, Types::Date),
            custTransDocDateField]);
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceDocDateField, Types::Date),
            custInvoiceDocDateField]);
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransDocDateField_LedgerJournalTrans, Types::Date),
            custTransDocDateField_LedgerJournalTrans]);

        //vend CZ prepayment invoice
        if (isCzAdvanceInvoicesConfigKeyEnabled)
        {
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(vendCreditMemoDocDateField_CZ, Types::Date),
                vendCreditMemoDocDateField_CZ]);
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(vendTaxDocDateField_CZ, Types::Date),
                vendTaxDocDateField_CZ]);
        }

        //vend invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransDocDateField, Types::Date),
            vendTransDocDateField]);
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceDocDateField, Types::Date),
            vendInvoiceDocDateField]);

        //ledger invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(ledgerJourTransDocDateField, Types::Date),
            ledgerJourTransDocDateField]);

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            str transferOrderDateField = SysComputedColumn::returnField(_viewName, identifierStr(InventTransferJour), fieldStr(InventTransferJour, TransDate));
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderDateField, Types::Date),
                transferOrderDateField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, emptyDateLiteral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductibleTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates deductible tax amount in accounting currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the deductible tax amount.</returns>
    internal static str deductibleTaxAmount(TableName _viewName)
    {
        str taxAmountField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxAmount));
        str taxInCostPriceField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxInCostPriceMST));

        return SysComputedColumn::subtract(taxAmountField, taxInCostPriceField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductibleTaxAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates deductible tax amount in tax currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the deductible tax amount.</returns>
    internal static str deductibleTaxAmountCur(TableName _viewName)
    {
        str taxAmountField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxAmountCur));
        str taxInCostPriceField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxInCostPriceCur));

        return SysComputedColumn::subtract(taxAmountField, taxInCostPriceField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductibleTaxAmountRep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates deductible tax amount in reporting currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the deductible tax amount.</returns>
    internal static str deductibleTaxAmountRep(TableName _viewName)
    {
        str taxAmountField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxAmountRep));
        str taxInCostPriceField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxInCostPriceRep));

        return SysComputedColumn::subtract(taxAmountField, taxInCostPriceField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductibleSourceTaxAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates deductible tax amount in transaction currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the deductible tax amount.</returns>
    internal static str deductibleSourceTaxAmountCur(TableName _viewName)
    {
        str taxAmountField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, SourceTaxAmountCur));
        str taxInCostPriceField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxInCostPrice));

        return SysComputedColumn::subtract(taxAmountField, taxInCostPriceField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductibleSourceTaxAmountCurRegulated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates adjusted deductible tax amount in transaction currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the adjusted deductible tax amount.</returns>
    internal static str deductibleSourceTaxAmountCurRegulated(TableName _viewName)
    {
        str taxAmountField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, SourceRegulateAmountCur));
        str taxInCostPriceField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxInCostPriceRegulated));

        return SysComputedColumn::subtract(taxAmountField, taxInCostPriceField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductibleTaxBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates deductible tax base amount.
    /// </summary>
    /// <param name = "_taxBaseFieldExpression">An expression for TaxBase View field.</param>
    /// <param name = "_viewName">The view name.</param>
    /// <returns>A calculated field expression; the deductible tax base amount.</returns>
    /// <remarks>
    /// The formula for deductible tax base is:
    ///     Deductible tax base = Tax base – (Tax base * Tax exempt percent / 100)
    /// </remarks>
    private static str deductibleTaxBase(str _taxBaseFieldExpression, TableName _viewName)
    {
        str taxExemptPctField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, VATExemptPct));
        str hundredPctLiteral = SysComputedColumn::returnLiteral(100);

        str deductibleTaxBaseExpression = SysComputedColumn::subtract(
            _taxBaseFieldExpression,
            SysComputedColumn::divide(SysComputedColumn::multiply(_taxBaseFieldExpression, taxExemptPctField), hundredPctLiteral));

        return deductibleTaxBaseExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductibleTaxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates deductible tax base amount in accounting currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the deductible tax base amount.</returns>
    internal static str deductibleTaxBaseAmount(TableName _viewName)
    {
        return TaxTransDeclarationViewHelper::deductibleTaxBase(
            SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxBaseAmount)), _viewName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductibleTaxBaseAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates deductible tax base amount in tax currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the deductible tax base amount.</returns>
    internal static str deductibleTaxBaseAmountCur(TableName _viewName)
    {
        return TaxTransDeclarationViewHelper::deductibleTaxBase(
            SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxBaseAmountCur)), _viewName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductibleTaxBaseAmountRep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates deductible tax base amount in reporting currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the deductible tax base amount.</returns>
    internal static str deductibleTaxBaseAmountRep(TableName _viewName)
    {
        return TaxTransDeclarationViewHelper::deductibleTaxBase(
            SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxBaseAmountRep)), _viewName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductibleSourceTaxBaseAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates deductible tax base amount in transaction currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the deductible tax base amount.</returns>
    internal static str deductibleSourceTaxBaseAmountCur(TableName _viewName)
    {
        return TaxTransDeclarationViewHelper::deductibleTaxBase(
            SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, SourceBaseAmountCur)), _viewName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductibleSourceTaxBaseAmountCurRegulated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates adjusted deductible tax base amount in transaction currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the adjusted deductible tax base amount.</returns>
    internal static str deductibleSourceTaxBaseAmountCurRegulated(TableName _viewName)
    {
        return TaxTransDeclarationViewHelper::deductibleTaxBase(
            SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, SourceBaseAmountCurRegulated)), _viewName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonDeductibleTaxBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates non-deductible tax base amount.
    /// </summary>
    /// <param name = "_taxBaseFieldExpression">An expression for TaxBase View field.</param>
    /// <param name = "_viewName">The view name.</param>
    /// <returns>A calculated field expression; the non-deductible tax base amount.</returns>
    /// <remarks>
    /// The formula for non-deductible tax base is:
    ///     Non-deductible tax base = Tax base * Tax exempt percent / 100
    /// </remarks>
    private static str nonDeductibleTaxBase(str _taxBaseFieldExpression, TableName _viewName)
    {
        str taxExemptPctField = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, VATExemptPct));
        str hundredPctLiteral = SysComputedColumn::returnLiteral(100);

        return SysComputedColumn::divide(SysComputedColumn::multiply(_taxBaseFieldExpression, taxExemptPctField), hundredPctLiteral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonDeductibleTaxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates non-deductible tax base amount in accounting currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the non-deductible tax base amount.</returns>
    internal static str nonDeductibleTaxBaseAmount(TableName _viewName)
    {
        return TaxTransDeclarationViewHelper::nonDeductibleTaxBase(
            SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxBaseAmount)), _viewName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonDeductibleTaxBaseAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates non-deductible tax base amount in tax currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the non-deductible tax base amount.</returns>
    internal static str nonDeductibleTaxBaseAmountCur(TableName _viewName)
    {
        return TaxTransDeclarationViewHelper::nonDeductibleTaxBase(
            SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxBaseAmountCur)), _viewName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonDeductibleTaxBaseAmountRep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates non-deductible tax base amount in reporting currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the non-deductible tax base amount.</returns>
    internal static str nonDeductibleTaxBaseAmountRep(TableName _viewName)
    {
        return TaxTransDeclarationViewHelper::nonDeductibleTaxBase(
            SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxBaseAmountRep)), _viewName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonDeductibleSourceTaxBaseAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates non-deductible tax base amount in transaction currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the non-deductible tax base amount.</returns>
    internal static str nonDeductibleSourceTaxBaseAmountCur(TableName _viewName)
    {
        return TaxTransDeclarationViewHelper::nonDeductibleTaxBase(
            SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, SourceBaseAmountCur)), _viewName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonDeductibleSourceTaxBaseAmountCurRegulated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates adjusted non-deductible tax base amount in transaction currency.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the adjusted non-deductible tax base amount.</returns>
    internal static str nonDeductibleSourceTaxBaseAmountCurRegulated(TableName _viewName)
    {
        return TaxTransDeclarationViewHelper::nonDeductibleTaxBase(
            SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, SourceBaseAmountCurRegulated)), _viewName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>counterpartyParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates counterparty record id from DirParty table.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; party record id</returns>
    internal static str counterpartyParty(TableName _viewName)
    {
        List expressionList = SysComputedColumn::comparisionExpressionList();

        //master data
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTable_Source, fieldStr(CustTable, Party)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTable_Tax, fieldStr(CustTable, Party)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendTable, fieldStr(VendTable, Party)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTable_LedgerJournalTrans, fieldStr(CustTable, Party)));

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(DirPartyLocation), fieldStr(DirPartyLocation, Party)));
        }

        return ViewComputedColumnUtil::isNotEmptyOrNullSwitch(expressionList, Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>counterpartyVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes VAT number from customer or vendor card.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the VAT number.</returns>
    internal static str counterpartyVATNum(TableName _viewName)
    {
        List expressionList = SysComputedColumn::comparisionExpressionList();

        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTable_Source, fieldStr(CustTable, VATNum)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTable_Tax, fieldStr(CustTable, VATNum)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendTable, fieldStr(VendTable, VATNum)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustTable_LedgerJournalTrans, fieldStr(CustTable, VATNum)));

        return ViewComputedColumnUtil::isNotEmptyOrNullSwitch(expressionList, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTaxRegistrationNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches registration num from document.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the tax registration number.</returns>
    internal static str documentTaxRegistrationNum(TableName _viewName)
    {
        List expressionList = SysComputedColumn::comparisionExpressionList();

        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceJour, fieldStr(CustInvoiceJour, VATNum)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceJour, fieldStr(VendInvoiceJour, VATNum)));
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSProjInvoiceJour, fieldStr(ProjInvoiceJour, VATNum)));
        }
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSLedgerJournalTrans, fieldStr(LedgerJournalTrans, VATNumJournal)));

        return ViewComputedColumnUtil::isNotEmptyOrNullSwitch(expressionList, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commodityCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches commodity code from the document line.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the commodity code.</returns>
    internal static str commodityCode(TableName _viewName)
    {
        List expressionList = SysComputedColumn::comparisionExpressionList();

        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSIntrastatCommodity_CustTrans, fieldStr(EcoResCategory, Code)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSIntrastatCommodity_VendTrans, fieldStr(EcoResCategory, Code)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSIntrastatCommodity_VendIntrastat, fieldStr(EcoResCategory, Code)));
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSIntrastatCommodity_ProjTrans, fieldStr(EcoResCategory, Code)));
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(IntrastatCommodity_TransferJourLine), fieldStr(EcoResCategory, Code)));
        }

        return ViewComputedColumnUtil::isNotEmptyOrNullSwitch(expressionList, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commodityDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches commodity code description for the commodity code from the document line.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the commodity code description.</returns>
    internal static str commodityDescription(TableName _viewName)
    {
        List expressionList = SysComputedColumn::comparisionExpressionList();

        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSIntrastatCommodity_CustTrans, fieldStr(EcoResCategory, Name)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSIntrastatCommodity_VendTrans, fieldStr(EcoResCategory, Name)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSIntrastatCommodity_VendIntrastat, fieldStr(EcoResCategory, Name)));
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSIntrastatCommodity_ProjTrans, fieldStr(EcoResCategory, Name)));
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(IntrastatCommodity_TransferJourLine), fieldStr(EcoResCategory, Name)));
        }

        return ViewComputedColumnUtil::isNotEmptyOrNullSwitch(expressionList, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseChargeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches reverse charge code from the document line.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the reverse charge code.</returns>
    internal static str reverseChargeCode(TableName _viewName)
    {
        List expressionList = SysComputedColumn::comparisionExpressionList();

        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSReverseChargeItemGroup_Sales_Table, fieldStr(ReverseChargeItemGroup_W, Name)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSReverseChargeItemGroup_Sales_Group, fieldStr(ReverseChargeItemGroup_W, Name)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSReverseChargeItemGroup_Sales_Category, fieldStr(ReverseChargeItemGroup_W, Name)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSReverseChargeItemGroup_Sales_All, fieldStr(ReverseChargeItemGroup_W, Name)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSReverseChargeItemGroup_Purch_Table, fieldStr(ReverseChargeItemGroup_W, Name)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSReverseChargeItemGroup_Purch_Group, fieldStr(ReverseChargeItemGroup_W, Name)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSReverseChargeItemGroup_Purch_Category, fieldStr(ReverseChargeItemGroup_W, Name)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSReverseChargeItemGroup_Purch_All, fieldStr(ReverseChargeItemGroup_W, Name)));
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSReverseChargeItemGroup_Proj_Table, fieldStr(ReverseChargeItemGroup_W, Name)));
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSReverseChargeItemGroup_Proj_Group, fieldStr(ReverseChargeItemGroup_W, Name)));
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSReverseChargeItemGroup_Proj_Category, fieldStr(ReverseChargeItemGroup_W, Name)));
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSReverseChargeItemGroup_Proj_All, fieldStr(ReverseChargeItemGroup_W, Name)));
        }

        return ViewComputedColumnUtil::isNotEmptyOrNullSwitch(expressionList, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the itemId found in customer/vendor/project transaction.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the item ID.</returns>
    internal static str itemId(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str custTransInvoiceField_ItemId = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceTrans, fieldStr(CustInvoiceTrans, ItemId));
        str vendTransInvoiceField_ItemId = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceTrans, fieldStr(VendInvoiceTrans, ItemId));
        str projTransInvoiceField_ItemId = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSProjInvoiceItem, fieldStr(ProjInvoiceItem, ItemId));

        str emptyStrLiteral = SysComputedColumn::comparisonLiteral('');

        //customer invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransInvoiceField_ItemId, Types::String),
            custTransInvoiceField_ItemId]);

        //vendor invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransInvoiceField_ItemId, Types::String),
            vendTransInvoiceField_ItemId]);

        //project invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(projTransInvoiceField_ItemId, Types::String),
            projTransInvoiceField_ItemId]);

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            str transferOrderLineItemIdField = SysComputedColumn::returnField(_viewName, identifierStr(InventTransferJourLine), fieldStr(InventTransferJourLine, ItemId));
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderLineItemIdField, Types::String),
                transferOrderLineItemIdField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, emptyStrLiteral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the inventory dimension of itemId found in customer/vendor/project transaction.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the inventory dimension.</returns>
    internal static str inventDimId(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str custTransInvoiceField_InvDimId = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceTrans, fieldStr(CustInvoiceTrans, InventDimId));
        str vendTransInvoiceField_InvDimId = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceTrans, fieldStr(VendInvoiceTrans, InventDimId));
        str projTransInvoiceField_InvDimId = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSProjInvoiceItem, fieldStr(ProjInvoiceItem, InventDimId));

        str emptyStrLiteral = SysComputedColumn::comparisonLiteral('');

        //customer invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransInvoiceField_InvDimId, Types::String),
            custTransInvoiceField_InvDimId]);

        //vendor invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransInvoiceField_InvDimId, Types::String),
            vendTransInvoiceField_InvDimId]);

        //project invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(projTransInvoiceField_InvDimId, Types::String),
            projTransInvoiceField_InvDimId]);

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            str transferOrderLineInvDimIdField = SysComputedColumn::returnField(_viewName, identifierStr(InventTransferJourLine), fieldStr(InventTransferJourLine, InventDimId));
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderLineInvDimIdField, Types::String),
                transferOrderLineInvDimIdField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, emptyStrLiteral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the unit of measure of item found in customer/vendor/project transaction.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the unit of measure of item.</returns>
    internal static str unitOfMeasure(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str custTransInvoiceField_UnitOfMeasure = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceTrans, fieldStr(CustInvoiceTrans, SalesUnit));
        str vendTransInvoiceField_UnitOfMeasure = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceTrans, fieldStr(VendInvoiceTrans, PurchUnit));
        str projTransInvoiceField_UnitOfMeasure = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSProjInvoiceItem, fieldStr(ProjInvoiceItem, SalesUnit));

        str emptyStrLiteral = SysComputedColumn::comparisonLiteral('');

        //customer invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransInvoiceField_UnitOfMeasure, Types::String),
            custTransInvoiceField_UnitOfMeasure]);

        //vendor invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransInvoiceField_UnitOfMeasure, Types::String),
            vendTransInvoiceField_UnitOfMeasure]);

        //project invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(projTransInvoiceField_UnitOfMeasure, Types::String),
            projTransInvoiceField_UnitOfMeasure]);

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            str transferOrderLineUnitOfMeasureField = SysComputedColumn::returnField(_viewName, identifierStr(InventTransferJourLine), fieldStr(InventTransferJourLine, UnitId));
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderLineUnitOfMeasureField, Types::String),
                transferOrderLineUnitOfMeasureField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, emptyStrLiteral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the unit price of item found in customer/vendor/project transaction.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the unit price of item.</returns>
    internal static str unitPrice(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str custTransInvoiceField_PriceUnit = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceTrans, fieldStr(CustInvoiceTrans, SalesPrice));
        str vendTransInvoiceField_PriceUnit = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceTrans, fieldStr(VendInvoiceTrans, PurchPrice));
        str projTransInvoiceField_PriceUnit = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSSalesLine_ProjItem, fieldStr(SalesLine, SalesPrice));

        str emptyStrLiteral = SysComputedColumn::comparisonLiteral(0.00);

        //customer invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransInvoiceField_PriceUnit, Types::Real),
            custTransInvoiceField_PriceUnit]);

        //vendor invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransInvoiceField_PriceUnit, Types::Real),
            vendTransInvoiceField_PriceUnit]);

        //project invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(projTransInvoiceField_PriceUnit, Types::Real),
            projTransInvoiceField_PriceUnit]);

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            str transferOrderLinePriceUnitField = SysComputedColumn::returnField(_viewName, identifierStr(InventTransferJourLine), fieldStr(InventTransferJourLine, UnitPrice));
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderLinePriceUnitField, Types::Real),
                transferOrderLinePriceUnitField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, emptyStrLiteral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the quantity of item found in customer/vendor/project transaction.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the quantity of found item.</returns>
    internal static str quantity(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str custTransInvoiceField_Qty = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceTrans, fieldStr(CustInvoiceTrans, Qty));
        str vendTransInvoiceField_Qty = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceTrans, fieldStr(VendInvoiceTrans, Qty));
        str projTransInvoiceField_Qty = SysComputedColumn::returnField(_viewName, TaxTransDeclarationDetailsViewConstants::DSProjInvoiceItem, fieldStr(ProjInvoiceItem, Qty));

        str emptyStrLiteral = SysComputedColumn::comparisonLiteral(0.00);

        //customer invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransInvoiceField_Qty, Types::Real),
            custTransInvoiceField_Qty]);

        //vendor invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransInvoiceField_Qty, Types::Real),
            vendTransInvoiceField_Qty]);

        //project invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(projTransInvoiceField_Qty, Types::Real),
            projTransInvoiceField_Qty]);

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            str transferOrderLineQtyShippedField = SysComputedColumn::returnField(_viewName, identifierStr(InventTransferJourLine), fieldStr(InventTransferJourLine, QtyShipped));
            str transferOrderLineQtyReceivedField = SysComputedColumn::returnField(_viewName, identifierStr(InventTransferJourLine), fieldStr(InventTransferJourLine, QtyReceived));
            comparisonExpressionList.addEnd([
                SysComputedColumn::or2(ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderLineQtyShippedField, Types::Real), ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderLineQtyReceivedField, Types::Real)),
                SysComputedColumn::add(transferOrderLineQtyShippedField, transferOrderLineQtyReceivedField)]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, emptyStrLiteral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxInvoiceSalesId_ID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches a tax invoice serial number found in customer/project journal.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the tax invoice serial number.</returns>
    internal static str taxInvoiceSalesId_ID(TableName _viewName)
    {
        List expressionList = SysComputedColumn::comparisionExpressionList();

        expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(CustInvoiceJour), fieldStr(CustInvoiceJour, TaxInvoiceSalesId)));
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(ProjInvoiceJour), fieldStr(ProjInvoiceJour, TaxInvoiceSalesId_ID)));
        }

        return ViewComputedColumnUtil::isNotEmptyOrNullSwitch(expressionList, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates an invoice journal rec id.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the invoice journal rec id</returns>
    internal static str invoiceJourRecId(TableName _viewName)
    {
        List expressionList = SysComputedColumn::comparisionExpressionList();

        expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(CustInvoiceJour), fieldStr(CustInvoiceJour, RecId)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(VendInvoiceJour), fieldStr(VendInvoiceJour, RecId)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(LedgerJournalTable), fieldStr(LedgerJournalTable, RecId)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(PurchTable), fieldStr(PurchTable, RecId)));

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(ProjInvoiceJour), fieldStr(ProjInvoiceJour, RecId)));
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(InventTransferJour), fieldStr(InventTransferJour, RecId)));
        }

        return ViewComputedColumnUtil::isNotEmptyOrNullSwitch(expressionList, Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates an invoice journal table id.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the invoice journal table id</returns>
    internal static str invoiceJourTableId(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);
        str custInvoiceRecIdField = SysComputedColumn::returnField(_viewName, identifierStr(CustInvoiceJour), fieldStr(CustInvoiceJour, RecId));
        str vendInvoiceRecIdField = SysComputedColumn::returnField(_viewName, identifierStr(VendInvoiceJour), fieldStr(VendInvoiceJour, RecId));
        str ledgerJournalRecIdField = SysComputedColumn::returnField(_viewName, identifierStr(LedgerJournalTable), fieldStr(LedgerJournalTable, RecId));
        str purchTableRecIdField = SysComputedColumn::returnField(_viewName, identifierStr(PurchTable), fieldStr(PurchTable, RecId));

        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceRecIdField, Types::Int64), int2Str(tableNum(CustInvoiceJour))]);
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceRecIdField, Types::Int64), int2Str(tableNum(VendInvoiceJour))]);
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(ledgerJournalRecIdField, Types::Int64), int2Str(tableNum(LedgerJournalTable))]);
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(purchTableRecIdField, Types::Int64), int2Str(tableNum(PurchTable))]);

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            str projInvoiceRecIdField = SysComputedColumn::returnField(_viewName, identifierStr(ProjInvoiceJour), fieldStr(ProjInvoiceJour, RecId));
            comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(projInvoiceRecIdField, Types::Int64), int2Str(tableNum(ProjInvoiceJour))]);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            str transferOrderRecIdField = SysComputedColumn::returnField(_viewName, identifierStr(InventTransferJour), fieldStr(InventTransferJour, RecId));
            comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderRecIdField, Types::Int64), int2Str(tableNum(InventTransferJour))]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, SysComputedColumn::comparisonLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>origInvoiceTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates an original invoice trans rec id.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the original invoice trans rec id</returns>
    internal static str origInvoiceTransRecId(TableName _viewName)
    {
        List expressionList = SysComputedColumn::comparisionExpressionList();

        expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(CustInvoiceTrans_W), fieldStr(CustInvoiceTrans_W, RefReturnInvoiceTrans_W)));
        expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(VendInvoiceTrans), fieldStr(VendInvoiceTrans, RefReturnInvoiceTrans_W)));
        
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            expressionList.addEnd(SysComputedColumn::returnField(_viewName, identifierStr(ProjInvoiceItem), fieldStr(ProjInvoiceItem, RefReturnInvoiceTrans_W)));
        }

        return ViewComputedColumnUtil::isNotEmptyOrNullSwitch(expressionList, Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingClassifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the reporting classifier.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the reporting classifier.</returns>
    internal static str reportingClassifier(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);

        str isOriginalDocumentCreditNoteField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_Reporting, fieldStr(TaxTrans_Reporting, IsOriginalDocumentCreditNote));
        str exemptTaxField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, ExemptTax));
        str taxDirectionField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxDirection));
        str reverseChargeField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, ReverseCharge_W));
        str intracomVATField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, IntracomVAT));

        List expListAND01 = SysComputedColumn::comparisionExpressionList();
        expListAND01.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::No)));
        expListAND01.addEnd(SysComputedColumn::equalExpression(exemptTaxField, SysComputedColumn::comparisonLiteral(NoYes::Yes)));
        expListAND01.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::IncomingTax)),
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::IncomingTax_W))));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND01), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::PurchaseExempt))]);

        List expListAND02 = SysComputedColumn::comparisionExpressionList();
        expListAND02.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes)));
        expListAND02.addEnd(SysComputedColumn::equalExpression(exemptTaxField, SysComputedColumn::comparisonLiteral(NoYes::Yes)));
        expListAND02.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::IncomingTax)),
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::IncomingTax_W))));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND02), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::PurchaseExemptCreditNote))]);

        List expListAND03 = SysComputedColumn::comparisionExpressionList();
        expListAND03.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::No)));
        expListAND03.addEnd(SysComputedColumn::equalExpression(exemptTaxField, SysComputedColumn::comparisonLiteral(NoYes::Yes)));
        expListAND03.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax)),
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax_W))));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND03), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::SalesExempt))]);

        List expListAND04 = SysComputedColumn::comparisionExpressionList();
        expListAND04.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes)));
        expListAND04.addEnd(SysComputedColumn::equalExpression(exemptTaxField, SysComputedColumn::comparisonLiteral(NoYes::Yes)));
        expListAND04.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax)),
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax_W))));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND04), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::SalesExemptCreditNote))]);

        List expListAND05 = SysComputedColumn::comparisionExpressionList();
        expListAND05.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::No)));
        expListAND05.addEnd(SysComputedColumn::equalExpression(reverseChargeField, SysComputedColumn::comparisonLiteral(NoYes::Yes)));
        expListAND05.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::IncomingTax)),
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::IncomingTax_W))));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND05), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::PurchaseReverseCharge))]);

        List expListAND06 = SysComputedColumn::comparisionExpressionList();
        expListAND06.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes)));
        expListAND06.addEnd(SysComputedColumn::equalExpression(reverseChargeField, SysComputedColumn::comparisonLiteral(NoYes::Yes)));
        expListAND06.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::IncomingTax)),
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::IncomingTax_W))));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND06), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::PurchaseReverseChargeCreditNote))]);

        List expListAND07 = SysComputedColumn::comparisionExpressionList();
        expListAND07.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::No)));
        expListAND07.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(reverseChargeField, SysComputedColumn::comparisonLiteral(NoYes::Yes)),
            SysComputedColumn::equalExpression(intracomVATField, SysComputedColumn::comparisonLiteral(NoYes::Yes))));
        expListAND07.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax)),
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax_W))));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND07), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::SalesReverseCharge))]);

        List expListAND08 = SysComputedColumn::comparisionExpressionList();
        expListAND08.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes)));
        expListAND08.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(reverseChargeField, SysComputedColumn::comparisonLiteral(NoYes::Yes)),
            SysComputedColumn::equalExpression(intracomVATField, SysComputedColumn::comparisonLiteral(NoYes::Yes))));
        expListAND08.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax)),
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax_W))));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND08), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::SalesReverseChargeCreditNote))]);

        List expListAND09 = SysComputedColumn::comparisionExpressionList();
        expListAND09.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::No)));
        expListAND09.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::IncomingTax)),
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::IncomingTax_W))));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND09), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::Purchase))]);

        List expListAND10 = SysComputedColumn::comparisionExpressionList();
        expListAND10.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes)));
        expListAND10.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::IncomingTax)),
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::IncomingTax_W))));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND10), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::PurchaseCreditNote))]);

        List expListAND11 = SysComputedColumn::comparisionExpressionList();
        expListAND11.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::No)));
        expListAND11.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax)),
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax_W))));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND11), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::Sales))]);

        List expListAND12 = SysComputedColumn::comparisionExpressionList();
        expListAND12.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes)));
        expListAND12.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax)),
            SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax_W))));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND12), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::SalesCreditNote))]);

        List expListAND13 = SysComputedColumn::comparisionExpressionList();
        expListAND13.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::No)));
        expListAND13.addEnd(SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::TaxExemptPurchase)));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND13), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::PurchaseExempt))]);

        List expListAND14 = SysComputedColumn::comparisionExpressionList();
        expListAND14.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes)));
        expListAND14.addEnd(SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::TaxExemptPurchase)));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND14), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::PurchaseExemptCreditNote))]);

        List expListAND15 = SysComputedColumn::comparisionExpressionList();
        expListAND15.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::No)));
        expListAND15.addEnd(SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::TaxExemptSales)));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND15), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::SalesExempt))]);

        List expListAND16 = SysComputedColumn::comparisionExpressionList();
        expListAND16.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes)));
        expListAND16.addEnd(SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::TaxExemptSales)));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND16), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::SalesExemptCreditNote))]);

        List expListAND17 = SysComputedColumn::comparisionExpressionList();
        expListAND17.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::No)));
        expListAND17.addEnd(SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::UseTax)));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND17), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::UseTax))]);

        List expListAND18 = SysComputedColumn::comparisionExpressionList();
        expListAND18.addEnd(SysComputedColumn::equalExpression(isOriginalDocumentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes)));
        expListAND18.addEnd(SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::UseTax)));
        comparisonExpressionList.addEnd([SysComputedColumn::and(expListAND18), SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::UseTaxCreditNote))]);

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, SysComputedColumn::returnLiteral(enum2int(TaxTransReportingClassifier::Undefined)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the tax amounts sign due to the tax direction.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the tax amounts sign.</returns>
    internal static str taxAmountSign(TableName _viewName)
    {
        str taxDirectionField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxDirection));

        List expListOR = SysComputedColumn::comparisionExpressionList();
        expListOR.addEnd(SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax)));
        expListOR.addEnd(SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::OutgoingTax_W)));
        expListOR.addEnd(SysComputedColumn::equalExpression(taxDirectionField, SysComputedColumn::comparisonLiteral(TaxDirection::TaxExemptSales)));

        return SysComputedColumn::if(SysComputedColumn::or(expListOR), SysComputedColumn::returnLiteral(-1), SysComputedColumn::returnLiteral(1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustmentVoucherTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the trans date of tax trans adjustment voucher.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the trans date of tax trans adjustment voucher.</returns>
    internal static str adjustmentVoucherTransDate(TableName _viewName)
    {
        str transDateField = SysComputedColumn::returnField(_viewName, identifierStr(TaxReportAdjustmentTrans), fieldStr(TaxReportAdjustmentTrans, TransDate));
        str emptyDateLiteral = SysComputedColumn::comparisonLiteral(dateNull());
        List comparisonExpressionList = new List(Types::Container);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(transDateField, Types::Date),
            transDateField]);

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, emptyDateLiteral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxOriginInt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the integer representation of the tax transation origin.
    /// </summary>
    /// <param name="_viewName">The view name.</param>
    /// <returns>A calculated field expression; the integer representation of the tax transation origin.</returns>
    internal static str taxOriginInt(TableName _viewName)
    {
        List comparisonExpressionList = new List(Types::Container);
        str taxTransTaxOriginField = SysComputedColumn::comparisonField(_viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxOrigin));

        comparisonExpressionList.addEnd([
            SysComputedColumn::equalExpression(taxTransTaxOriginField, SysComputedColumn::comparisonLiteral(enum2int(TaxOrigin::Tax))),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxOrigin::Tax)))]);

        comparisonExpressionList.addEnd([
            SysComputedColumn::equalExpression(taxTransTaxOriginField, SysComputedColumn::comparisonLiteral(enum2int(TaxOrigin::TaxReporting))),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxOrigin::TaxReporting)))]);

        comparisonExpressionList.addEnd([
            SysComputedColumn::equalExpression(taxTransTaxOriginField, SysComputedColumn::comparisonLiteral(enum2int(TaxOrigin::CashDisc))),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxOrigin::CashDisc)))]);

        comparisonExpressionList.addEnd([
            SysComputedColumn::equalExpression(taxTransTaxOriginField, SysComputedColumn::comparisonLiteral(enum2int(TaxOrigin::TaxReversed))),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxOrigin::TaxReversed)))]);

        comparisonExpressionList.addEnd([
            SysComputedColumn::equalExpression(taxTransTaxOriginField, SysComputedColumn::comparisonLiteral(enum2int(TaxOrigin::Transfer))),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxOrigin::Transfer)))]);

        comparisonExpressionList.addEnd([
            SysComputedColumn::equalExpression(taxTransTaxOriginField, SysComputedColumn::comparisonLiteral(enum2int(TaxOrigin::Payment))),
            SysComputedColumn::comparisonLiteral(SysComputedColumn::returnLiteral(enum2int(TaxOrigin::Payment)))]);

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, SysComputedColumn::comparisonLiteral(-1));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>