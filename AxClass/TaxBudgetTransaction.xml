<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxBudgetTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxBudgetTransaction</c> class calculates and post tax information for budget transactions.
/// </summary>
class TaxBudgetTransaction extends Tax
{
    BudgetTransactionLine   budgetTransactionLine;
    LedgerAccountCov        ledgerAccountCov;
    TaxCov                  taxCov;
    TaxItemGroup            taxItemGroup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTaxTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and posts the tax transactions.
    /// </summary>
    /// <returns>
    /// The calculated tax amount.
    /// </returns>
    public TaxAmount createTaxTransactions()
    {
        if (budgetTransactionLine.TaxGroup)
        {
            this.insertLineInInternal(budgetTransactionLine.TransactionCurrencyAmount * ledgerAccountCov.Value / 100,
                                      budgetTransactionLine.Quantity * ledgerAccountCov.Value / 100,
                                      '',
                                      '',
                                      0,
                                      0,
                                      budgetTransactionLine.LedgerDimension);

            if (this.checkTaxCodesInTotal() == false)
            {
                throw error("@SYS18447");
            }

            if (taxCalculateLine)
            {
                this.calcTax();
                this.saveInProcessTransaction();
            }

            if (taxCalculateTotal)
            {
                this.insertTotalInInternal(0);
                this.calcTax();

                this.saveTotalInProcessTransaction();
            }
        }

        taxCov.taxLedgerCov(taxWorkTrans);

        return this.totalTaxAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDirection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the <c>TaxDirection</c> enumeration value for the <c>BudgetTransactionLine</c> record
    ///    that is involved in the tax calculation.
    /// </summary>
    /// <param name="_taxGroupData">
    ///    The <c>TaxGroupData</c> record that contains the tax code that will be used for the tax calculation.
    /// </param>
    /// <returns>
    ///    A <c>TaxDirection</c> enumeration value.
    /// </returns>
    protected TaxDirection determineDirection(TaxGroupData _taxGroupData)
    {
        SalesPurch      salesPurch;
        TaxDirection    taxDirection;
        MainAccountLegalEntity  mainAccountLegalEntity;

        mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(LedgerDimensionFacade::getMainAccountFromLedgerDimension(budgetTransactionLine.LedgerDimension).RecId,
                                                                                    CompanyInfo::findDataArea(curext()).RecId);
        salesPurch = mainAccountLegalEntity.TaxDirection;

        if (salesPurch == SalesPurch::Sales)
        {
            if (_taxGroupData.ExemptTax == NoYes::No)
            {
                taxDirection = TaxDirection::OutgoingTax;
            }
            else
            {
                taxDirection = TaxDirection::TaxExemptSales;
            }
        }
        else
        {
            if (_taxGroupData.UseTax == NoYes::Yes)
            {
                taxDirection = TaxDirection::UseTax;
            }
            else
            {
                if (_taxGroupData.ExemptTax == NoYes::No)
                {
                    if (_taxGroupData.IntracomVAT == NoYes::Yes && VendParameters::find().IntracomVAT)
                    {
                        taxDirection = TaxDirection::OutgoingTax;
                    }
                    else
                    {
                        taxDirection = TaxDirection::IncomingTax;
                    }
                }
                else
                {
                    taxDirection = TaxDirection::TaxExemptPurchase;
                }
            }
        }

        return taxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>TaxBudgetTransaction</c> class.
    /// </summary>
    /// <param name="_budgetTransactionLine">
    ///    The <c>BudgetTransactionLine</c> record that is involved in the tax calculation.
    /// </param>
    /// <param name="_ledgerCoverage">
    ///    An instance of the <c>LedgerCoverage</c> class that will be used to update cash flow forecasts.
    /// </param>
    /// <param name="_ledgerAccountCov">
    ///    The <c>LedgerAccountCov</c> record that contains the cash flow forecasting definition.
    /// </param>
    void new(BudgetTransactionLine _budgetTransactionLine, LedgerCoverage _ledgerCoverage, LedgerAccountCov _ledgerAccountCov)
    {
        super();

        budgetTransactionLine   = _budgetTransactionLine;
        ledgerAccountCov        = _ledgerAccountCov;
        taxCov                  = new TaxCov(_ledgerCoverage);
        taxItemGroup            = this.taxParameters().TaxItemGroup;

        // Set fields on the base class
        triangulation       = NoYes::Yes;
        headingTableId      = budgetTransactionLine.TableId;
        headingRecId        = budgetTransactionLine.RecId;
        taxModuleType       = TaxModuleType::Voucher;
        sourceCurrencyCode  = budgetTransactionLine.TransactionCurrency;
        taxDate             = PaymTerm::advanceDate(ledgerAccountCov.Payment, budgetTransactionLine.Date);

        if (!taxDate)
        {
            taxDate = budgetTransactionLine.Date;
        }

        if (!headingTableId || !headingRecId)
        {
            throw error("@SYS18447");
        }

        if (budgetTransactionLine.TaxGroup)
        {
            this.insertIntersection(budgetTransactionLine.TaxGroup,
                                    taxItemGroup,
                                    '',
                                    budgetTransactionLine.Comment,
                                    taxDate);

            if (this.checkTaxCodesByLine() == false)
            {
                throw error("@SYS18447");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record ID of the transaction line to calculate.
    /// </summary>
    /// <returns>
    ///    The record ID of the <c>BudgetTransactionLine</c> record that is involved in the tax calculation.
    /// </returns>
    public recId sourceRecId()
    {
        return budgetTransactionLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    ///    The table ID of the <c>BudgetTransactionLine</c> record that is involved in the tax calculation.
    /// </returns>
    public RefTableId sourceTableId()
    {
        return budgetTransactionLine.TableId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>