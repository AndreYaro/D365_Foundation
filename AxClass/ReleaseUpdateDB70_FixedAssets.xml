<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB70_FixedAssets</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReleaseUpdateDB70_FixedAssets extends ReleaseUpdateDB
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>skipDepreciationBookToValueModelUpgrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the upgrade from depreciation books to value models needs to be executed.
    /// </summary>
    /// <returns>true if it can be skipped; false, otherwise.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean skipDepreciationBookToValueModelUpgrade()
    {
        ResultSet assetDepBookTableResultSet = this.executeSqlQueryWithResults(this.getAssetDepbookTableRecord());
        boolean skip = false;

        if (assetDepBookTableResultSet && !assetDepBookTableResultSet.next())
        {
            skip = true;
        }

        return skip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepbookTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs sql statement for determining if depreciation books exist in the company.
    /// </summary>
    /// <returns>The sql statement.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str getAssetDepbookTableRecord()
    {
        str sqlStatement = strFmt(@"
                SELECT TOP 1 [DEPRECIATIONBOOKID] FROM [dbo].[ASSETDEPBOOKTABLE]
                    WHERE [ASSETDEPBOOKTABLE].DATAAREAID = '%1'
                      and [ASSETDEPBOOKTABLE].PARTITION = %2",
                curExt(),
                getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipAssetDepBookJournalTransToLedgerJournalTransUpgrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the upgrade from depreciation book transactions to ledger journal transactions needs to be executed.
    /// </summary>
    /// <returns>true if it can be skipped; false, otherwise.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean skipAssetDepBookJournalTransToLedgerJournalTransUpgrade()
    {
        ResultSet assetDepBookTableResultSet = this.executeSqlQueryWithResults(this.getAssetDepBookJournalTransTableRecord());
        boolean skip = false;

        if (assetDepBookTableResultSet && !assetDepBookTableResultSet.next())
        {
            skip = true;
        }

        return skip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepBookJournalTransTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs sql statement for determining if depreciation book transactions exist in the company.
    /// </summary>
    /// <returns>The sql statement.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str getAssetDepBookJournalTransTableRecord()
    {
        str sqlStatement = strFmt(@"
                SELECT TOP 1 [JOURNALID] FROM [dbo].[ASSETDEPBOOKJOURNALTRANS]
                    WHERE [ASSETDEPBOOKJOURNALTRANS].DATAAREAID = '%1'
                      and [ASSETDEPBOOKJOURNALTRANS].PARTITION = %2",
                curExt(),
                getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleName</Name>
				<Source><![CDATA[
    public ReleaseUpdateModule moduleName()
    {
        return "@FixedAssets:FA_ModuleName";
    }

]]></Source>
			</Method>
			<Method>
				<Name>myVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// The script runs in any system with the source version earlier than Unknown.
    /// </summary>
    /// <returns>The script version.</returns>
    public sysReleasedVersion myVersion()
    {
        return sysReleasedVersion::R1Update3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSqlStatement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void executeSqlStatement(str _sqlStatement)
    {
        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(_sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSqlQueryWithResults</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ResultSet executeSqlQueryWithResults(str _sqlStatement)
    {
        return ReleaseUpdateDB70_FixedAssets::executeSqlQueryWithResultsStatic(_sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResult</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getResult(ResultSet _set)
    {
        return ReleaseUpdateDB70_FixedAssets::resultSetToString(_set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSqlStatementStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the specified SQL statement.
    /// </summary>
    /// <param name = "_sqlStatement">
    /// The SQL statement.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void executeSqlStatementStatic(str _sqlStatement)
    {
        Connection sessionConn = new Connection();

        Statement statement = sessionConn.createStatement();

        new SqlStatementExecutePermission(_sqlStatement).assert();
        statement.executeUpdateWithParameters(_sqlStatement, SqlParams::create());

        CodeAccessPermission::revertAssert();

        statement.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSqlQueryWithResultsStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the specified SQL statement.
    /// </summary>
    /// <param name = "_sqlStatement">
    /// The SQL statement.
    /// </param>
    /// <returns>
    /// The result of execution.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ResultSet executeSqlQueryWithResultsStatic(str _sqlStatement)
    {
        ResultSet  resultSet;
        Connection sessionConn = new Connection();

        Statement statement = sessionConn.createStatement();

        new SqlStatementExecutePermission(_sqlStatement).assert();

        resultSet = statement.executeQueryWithParameters(_sqlStatement, SqlParams::create());

        CodeAccessPermission::revertAssert();

        statement.close();

        return resultSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resultSetToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts <c>ResultSet</c> to string based on the field names and values.
    /// </summary>
    /// <param name = "_set">
    /// The <c>ResultSet</c> instance.
    /// </param>
    /// <returns>
    /// Container with the number of records and string values.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container resultSetToString(resultSet _set)
    {
        int rowCount = 0;
        str result;
        boolean addComma = false;
        ResultSetMetaData metaData = _set.getMetaData();

        while (_set.next())
        {
            for (int i = 1; i <= metaData.getColumnCount(); i++)
            {
                addComma = false;

                if (metaData.getColumnName(i) != 'PARTITION'
                    && metaData.getColumnName(i) != 'RESERVETRANSID'
                    && metaData.getColumnName(i) != 'REVALUEDTRANSID'
                    && metaData.getColumnName(i) != 'DATAAREAID'
                    && metaData.getColumnName(i) != 'MODIFIEDDATETIME'
                    && metaData.getColumnName(i) != 'MODIFIEDBY'
                    && metaData.getColumnName(i) != 'RECVERSION'
                    && !strContains(metaData.getColumnName(i), 'RECID')
                    && !strContains(metaData.getColumnName(i), 'TABLEID'))
                {
                    result += metaData.getColumnName(i) + ":" + _set.getString(i) + ' ';
                }
            }

            rowCount++;
        }

        return [rowCount, result];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>