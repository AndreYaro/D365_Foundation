<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionTextContextProdCard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TransactionTextContextCust</c> class enables additional parameter value functionality for
/// <c>ProdJobCard</c> and <c>ProdRouteCard</c> documents.
/// </summary>
[
SourceDocumentEnumLiteralExtension(enumStr(LedgerTransTxt), enumLiteralStr(LedgerTransTxt, ProdJobCard)),
SourceDocumentEnumLiteralExtension(enumStr(LedgerTransTxt), enumLiteralStr(LedgerTransTxt, ProdRouteCard))
]
class TransactionTextContextProdCard extends TransactionTextContext
{
    ProdJournalRoute    prodJournalRoute;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSupportedTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a list of tables that are supported for use with the specified transaction type.
    /// </summary>
    /// <returns>
    /// A container that contains the <c>TableId</c> collection of tables supported by specified
    /// transaction type.
    /// </returns>
    /// <remarks>
    /// The container contains only those tables associated with the specified transaction type.
    /// </remarks>
    public container getSupportedTables()
    {
        container   tableList;

        tableList += tableNum(ProdJournalRoute);

        return tableList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the parameter variable of the object to contain the table buffers that are used with the
    /// specified transaction type.
    /// </summary>
    /// <remarks>
    /// This must be called before attempting to map the table fields and values for the transaction text
    /// setup parameters.
    /// </remarks>
    public void setParameters()
    {
        parameters = [prodJournalRoute];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a particular table buffer for the specified transaction type.
    /// </summary>
    /// <param name="_common">
    /// The <c>Common</c> table record buffer that is passed in and then set based upon the <c>TableId</c>
    /// of the buffer.
    /// </param>
    /// <returns>
    /// If the table is supported and buffer is saved, true; otherwise false.
    /// </returns>
    /// <remarks>
    /// The common record buffer is cast to the appropriate table through switch logic. This method can be
    /// called repeatedly to assign multiple buffers.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// Thrown if table is not supported by this transaction type.
    /// </exception>
    public boolean setTableBuffer(Common _common)
    {
        boolean tableBufferSet;

        switch (_common.TableId)
        {
            case tableNum(ProdJournalRoute):
                prodJournalRoute = _common as ProdJournalRoute;
                tableBufferSet = true;
                break;
        }

        return tableBufferSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>