<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCatalogProductAttributeFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for the <c>RetailCatalogProductAttributeValue</c> form.
/// </summary>
class RetailCatalogProductAttributeFormHelper
{
    FormRun formRun; // form instance using this object

    RetailTmpCatalogProductAttributes retailTmpCatalogProductAttributes; // temp table used by the form as datasource
    str retailTmpCatalogProductAttributesPhysicalTableName;

    RetailTmpProductAttributeValue tmpProductAttributeValue;
    str tmpProductAttributeValuePhysicalTableName;

    Catalog catalog;
    CatalogProduct catalogProduct; // CatalogProduct for which attributes are displayed
    CatalogProductInstanceValue catalogProductInstanceValue; // instance value of the CatalogProduct if exists
    EcoResProduct product;  // product from Internal org assortment exploded

    RetailTmpInternalOrg retailTmpInternalOrg; // Internal org list
    str retailTmpInternalOrgPhysicalTableName;

    RefRecId internalOrgRecId; // internal org
    Map controlMap; // RetailTmpCatalogProductAttributes.RecId -> FormControl
    Map channelInstanceValues; // RetailChannelTable.RecId -> RetailCatalogProductChannelInstanceValue.RecId
    Map snapshotMap;
    RetailSharedParameters sharedParams;
    utcDateTime channelHierarchyDateTime;
    boolean readOnlyMode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProductAttributeControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to a <c>FormGroupControl</c> based on <c>RetailTmpCatalogProductAttributes</c> records.
    /// </summary>
    /// <param name="_groupControl">
    /// The <c>FormGroupControl</c> to add the controls to.
    /// </param>
    /// <param name="_attributeSourceType">
    /// Type of attribute source for which controls are to be created - filter on RetailTmpCatalogProductAttributes.AttributeSourceType.
    /// </param>
    /// <param name="_internalOrgRefRecId">
    /// Internal org ref rec id to add the controls.
    /// </param>
    /// <remarks>
    /// The created controls are initialized according to RetailTmpCatalogProductAttributes.Value.
    /// </remarks>
    public void addProductAttributeControls(FormGroupControl _groupControl, RetailProductAttributeRelationType _attributeSourceType, RetailInternalOrgRefRecId _internalOrgRefRecId = 0)
    {
        RetailTmpCatalogProductAttributes localTmpAttributes;
        EcoResAttribute ecoResAttribute;
        EcoResAttributeType ecoResAttributeType;
        EcoResAttributeTypeUnitOfMeasure ecoResAttributeTypeUnitOfMeasure;
        EcoResCategoryName currentAttributeSource;

        FormStringControl formStringControl;
        FormCheckBoxControl formCheckBoxControl;
        FormDateTimeControl formDateTimeControl;
        FormRealControl formRealControl;
        FormIntControl formIntControl;
        FormGroupControl formGroupControl;
        FormGroupControl intDecCurFormGroupControl;

        EcoResBooleanValue ecoResBooleanValue;
        EcoResCurrencyValue ecoResCurrencyValue;
        EcoResDateTimeValue ecoResDateTimeValue;
        EcoResFloatValue ecoResFloatValue;
        EcoResIntValue ecoResIntValue;
        EcoResValue ecoResValue;

        localTmpAttributes.linkPhysicalTableInstance(retailTmpCatalogProductAttributes);

        while select localTmpAttributes
            order by localTmpAttributes.AttributeSource, ecoResAttribute.Name
            where localTmpAttributes.AttributeSourceType == _attributeSourceType
                && (!_internalOrgRefRecId || localTmpAttributes.InternalOrganization == _internalOrgRefRecId)
            join RecId, Name from ecoResAttribute
                where ecoResAttribute.RecId == localTmpAttributes.Attribute
            join DataType, IsEnumeration from ecoResAttributeType
                where ecoResAttributeType.RecId == localTmpAttributes.AttributeType
                    && ecoResAttributeType.RecId != sharedParams.HtmlAttributeType
                    && ecoResAttributeType.RecId != sharedParams.ImagesAttributeType
                    && ecoResAttributeType.RecId != sharedParams.VideosAttributeType
            outer join DefaultUnitOfMeasure from ecoResAttributeTypeUnitOfMeasure
                where ecoResAttributeTypeUnitOfMeasure.AttributeType == ecoResAttributeType.RecId
            outer join ecoResValue
                where ecoResValue.RecId == localTmpAttributes.Value
            outer join tmpProductAttributeValue
                where tmpProductAttributeValue.Attribute == localTmpAttributes.Attribute
                    && tmpProductAttributeValue.InternalOrganization == localTmpAttributes.InternalOrganization
        {
            if (localTmpAttributes.AttributeSource != currentAttributeSource)
            {
                currentAttributeSource = localTmpAttributes.AttributeSource;
                formGroupControl = _groupControl.addControl(FormControlType::Group, strFmt('AttributeSourceGroup:%1', int642Str(localTmpAttributes.RecId)));
                formGroupControl.caption(currentAttributeSource);
            }

            if (formGroupControl == null)
            {
                formGroupControl = _groupControl.addControl(FormControlType::Group, strFmt('AttributeSourceGroup:%1', int642Str(localTmpAttributes.RecId)));
                formGroupControl.caption("@RET1373"); // Generic field group
            }

            switch (ecoResAttributeType.DataType)
            {
                case AttributeDataType::TrueFalse:
                    if (this.useSnapshot())
                    {
                        ecoResBooleanValue.BooleanValue = tmpProductAttributeValue.IntValue;
                    }
                    else if (ecoResValue)
                    {
                        ecoResBooleanValue = ecoResValue;
                    }
                    else
                    {
                        ecoResBooleanValue = null;
                    }
                    formCheckBoxControl = RetailCatalogProductAttributeFormHelper::addControl(formGroupControl, FormControlType::CheckBox, 'CheckBox_', localTmpAttributes.RecId);
                    formCheckBoxControl.label(ecoResAttribute.Name);
                    formCheckBoxControl.value(ecoResBooleanValue.BooleanValue);
                    controlMap.insert(localTmpAttributes.RecId, formCheckBoxControl);
                    break;

                case AttributeDataType::DateTime:
                    if (this.useSnapshot())
                    {
                        ecoResDateTimeValue.DateTimeValue = tmpProductAttributeValue.DateTimeValue;
                    }
                    else if (ecoResValue)
                    {
                        ecoResDateTimeValue = ecoResValue;
                    }
                    else
                    {
                        ecoResDateTimeValue = null;
                    }
                    formDateTimeControl = RetailCatalogProductAttributeFormHelper::addControl(formGroupControl, FormControlType::DateTime, 'DateTime_', localTmpAttributes.RecId);
                    formDateTimeControl.label(ecoResAttribute.Name);
                    formDateTimeControl.dateTimeValue(DateTimeUtil::applyTimeZoneOffset(ecoResDateTimeValue.DateTimeValue, DateTimeUtil::getUserPreferredTimeZone()));
                    controlMap.insert(localTmpAttributes.RecId, formDateTimeControl);
                    break;

                case AttributeDataType::Decimal:
                    if (this.useSnapshot())
                    {
                        ecoResFloatValue.FloatValue = tmpProductAttributeValue.FloatValue;
                        ecoResFloatValue.FloatUnitOfMeasure = tmpProductAttributeValue.UnitOfMeasure;
                    }
                    else if (ecoResValue)
                    {
                        ecoResFloatValue = ecoResValue;
                    }
                    else
                    {
                        ecoResFloatValue = null;
                        ecoResFloatValue.FloatUnitOfMeasure = ecoResAttributeTypeUnitOfMeasure.DefaultUnitOfMeasure;
                    }
                    intDecCurFormGroupControl = RetailCatalogProductAttributeFormHelper::addControl(formGroupControl, FormControlType::Group, 'Group_', localTmpAttributes.RecId);
                    formRealControl = RetailCatalogProductAttributeFormHelper::addControl(intDecCurFormGroupControl, FormControlType::Real, 'Group_Real_', localTmpAttributes.RecId);
                    formRealControl.label(ecoResAttribute.Name);
                    formRealControl.realValue(ecoResFloatValue.FloatValue);
                    controlMap.insert(localTmpAttributes.RecId, formRealControl);
                    if (ecoResFloatValue.FloatUnitOfMeasure)
                    {
                        intDecCurFormGroupControl.columns(2);
                        formStringControl = RetailCatalogProductAttributeFormHelper::addControl(intDecCurFormGroupControl, FormControlType::String, 'Group_Unit_', localTmpAttributes.RecId);
                        formStringControl.allowEdit(false);
                        formStringControl.label('@SYS96151');
                        formStringControl.text(UnitOfMeasure::find(ecoResFloatValue.FloatUnitOfMeasure).Symbol);
                    }
                    break;

                case AttributeDataType::Currency:
                    if (this.useSnapshot())
                    {
                        ecoResCurrencyValue.CurrencyValue = tmpProductAttributeValue.FloatValue;
                        ecoResCurrencyValue.CurrencyCode = tmpProductAttributeValue.TextValue;
                    }
                    else if (ecoResValue)
                    {
                        ecoResCurrencyValue = ecoResValue;
                    }
                    else
                    {
                        ecoResCurrencyValue = null;
                    }
                    intDecCurFormGroupControl = RetailCatalogProductAttributeFormHelper::addControl(formGroupControl, FormControlType::Group, 'Group_', localTmpAttributes.RecId);
                    intDecCurFormGroupControl.columns(2);
                    formRealControl = RetailCatalogProductAttributeFormHelper::addControl(intDecCurFormGroupControl, FormControlType::Real, 'Group_Real_', localTmpAttributes.RecId);
                    formRealControl.label(ecoResAttribute.Name);
                    formRealControl.realValue(ecoResCurrencyValue.CurrencyValue);
                    formStringControl = RetailCatalogProductAttributeFormHelper::addControl(intDecCurFormGroupControl, FormControlType::String, 'Group_CurrencyCode_', localTmpAttributes.RecId);
                    formStringControl.extendedDataType(extendedtypenum(CurrencyCode));
                    formStringControl.text(ecoResCurrencyValue.CurrencyCode);
                    controlMap.insert(localTmpAttributes.RecId, intDecCurFormGroupControl);
                    break;

                case AttributeDataType::Integer:
                    if (this.useSnapshot())
                    {
                        ecoResIntValue.IntValue = tmpProductAttributeValue.IntValue;
                        ecoResIntValue.IntUnitOfMeasure = tmpProductAttributeValue.UnitOfMeasure;
                    }
                    else if (ecoResValue)
                    {
                        ecoResIntValue = ecoResValue;
                    }
                    else
                    {
                        ecoResIntValue = null;
                        ecoResIntValue.IntUnitOfMeasure = ecoResAttributeTypeUnitOfMeasure.DefaultUnitOfMeasure;
                    }
                    intDecCurFormGroupControl = RetailCatalogProductAttributeFormHelper::addControl(formGroupControl, FormControlType::Group, 'Group_', localTmpAttributes.RecId);
                    formIntControl = RetailCatalogProductAttributeFormHelper::addControl(intDecCurFormGroupControl, FormControlType::Integer,  'Group_Integer_', localTmpAttributes.RecId);
                    formIntControl.label(ecoResAttribute.Name);
                    formIntControl.value(ecoResIntValue.IntValue);
                    controlMap.insert(localTmpAttributes.RecId, formIntControl);
                    if (ecoResIntValue.IntUnitOfMeasure)
                    {
                        intDecCurFormGroupControl.columns(2);
                        formStringControl = RetailCatalogProductAttributeFormHelper::addControl(intDecCurFormGroupControl, FormControlType::String, 'Group_Unit_', localTmpAttributes.RecId);
                        formStringControl.allowEdit(false);
                        formStringControl.label('@SYS96151');
                        formStringControl.text(UnitOfMeasure::find(ecoResIntValue.IntUnitOfMeasure).Symbol);
                    }
                    break;

                case AttributeDataType::Text:
                    this.addTextTypeAttributeControls(formGroupControl, ecoResAttributeType, ecoResAttribute, localTmpAttributes, ecoResValue);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTextTypeAttributeControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>FormStringControl</c> or <c>FormComboBoxControl</c> to a <c>FormGroupControl</c> based on the <c>EcoResAttributeType</c>.
    /// </summary>
    /// <param name="_formGroupControl">
    /// The <c>FormGroupControl</c> that will have a <c>FormStringControl</c> or <c>FormComboBoxControl</c> add to it.
    /// </param>
    /// <param name="_ecoResAttributeType">
    /// The type <c>EcoResAttributeType</c> for checking whether a <c>FormStringControl</c> or <c>FormComboBoxControl</c> will be add.
    /// </param>
    /// <param name="_ecoResAttribute">
    /// The attribute <c>EcoResAttribute</c> which RecId will be added to control and Name will be set as the control's label.
    /// </param>
    /// <param name="_localTmpAttributes">
    /// The <c>RetailTmpCatalogProductAttributes</c> local temporary product attributes.
    /// </param>
    /// <param name="_ecoResValue">
    /// Will be set as the <c>FormStringControl</c> or <c>FormComboBoxControl</c> text.
    /// </param>
    protected void addTextTypeAttributeControls(FormGroupControl _formGroupControl, EcoResAttributeType _ecoResAttributeType, EcoResAttribute _ecoResAttribute,
         RetailTmpCatalogProductAttributes _localTmpAttributes, EcoResValue _ecoResValue)
    {
        FormStringControl formStringControl;
        FormComboBoxControl formComboBoxControl;

        EcoResAttributeDefaultValue attributeReference;
        EcoResEnumerationAttributeTypeValue enumerationAttributeTypeValue;
        EcoResTextValue enumerationValue;
        EcoResTextValue ecoResTextValue;
        EcoResReferenceValue ecoResReferenceValue;

        RetailStandardAttribute retailStandardAttribute;

        if (this.useSnapshot())
        {
            ecoResTextValue.TextValue = tmpProductAttributeValue.TextValue;
        }
        else if (_ecoResValue)
        {
            ecoResTextValue = _ecoResValue;
        }
        else
        {
            ecoResTextValue = null;
        }
        if (_ecoResAttributeType.IsEnumeration == NoYes::Yes)
        {
            formComboBoxControl = RetailCatalogProductAttributeFormHelper::addControl(_formGroupControl, FormControlType::ComboBox, 'ComboBox_', _localTmpAttributes.RecId);
            formComboBoxControl.label(_ecoResAttribute.Name);

            if (!ecoResTextValue)
            {
                formComboBoxControl.add('');
            }

            while select TextValue from enumerationValue
                            exists join enumerationAttributeTypeValue
                            where enumerationAttributeTypeValue.Value == enumerationValue.RecId
                               && enumerationAttributeTypeValue.AttributeType == _ecoResAttributeType.RecId
            {
                formComboBoxControl.add(enumerationValue.TextValue);
            }
            formComboBoxControl.selectText(ecoResTextValue.TextValue);
            controlMap.insert(_localTmpAttributes.RecId, formComboBoxControl);
        }
        else
        {
            formStringControl = RetailCatalogProductAttributeFormHelper::addControl(_formGroupControl, FormControlType::String, 'String_', _localTmpAttributes.RecId);
            formStringControl.extendedDataType(extendedTypeNum(AttributeValueText));
            formStringControl.limitText(formStringControl.limitText());
            formStringControl.label(_ecoResAttribute.Name);
            formStringControl.text(ecoResTextValue.TextValue);
            if (!ecoResTextValue.RecId && _localTmpAttributes.StandardAttributeTextValue)
            {
                formStringControl.text(_localTmpAttributes.StandardAttributeTextValue);
            }

            //disable specific standard attributes
            select retailStandardAttribute
                         where (retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::Color ||
                                retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::Style ||
                                retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::Size ||
                                retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::Config ||
                                retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::SalesTaxGroup ||
                                retailStandardAttribute.StandardAttributeID == RetailStandardAttributeID::NavigationCategory)
                        exists join attributeReference
                              where attributeReference.Attribute == _ecoResAttribute.RecId
                        join RecId from ecoResReferenceValue
                             where ecoResReferenceValue.RecId == attributeReference.Value
                                && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
                                && ecoResReferenceValue.RefRecId == retailStandardAttribute.Attribute;

            if (retailStandardAttribute)
            {
                formStringControl.enabled(false);
            }

            controlMap.insert(_localTmpAttributes.RecId, formStringControl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addControl</Name>
				<Source><![CDATA[
    private static FormControl addControl(FormGroupControl _formGroupControl, FormControlType _formControlType, str _controlNamePrefix, RecId _attributeRecId)
    {
        return _formGroupControl.addControl(_formControlType, strFmt('%1_%2', _controlNamePrefix, _attributeRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>editButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles media attribute value editing.
    /// </summary>
    /// <param name="_retailTmpCatalogProductAttributes">
    /// The media attribute for which to edit the value.
    /// </param>
    /// <param name="_attributeType">
    /// The type of the media attribute.
    /// </param>
    /// <param name="_catalog">
    /// The Catalog Record identifier.
    /// </param>
    /// <param name="_internalOrgRecId">
    /// The InternalOrganization RecId.
    /// </param>
    /// <remarks>
    /// It launches the media editor appropriate to the type and when the return value is different than original updates the database with the new value.
    /// </remarks>
    public void editButtonClicked(
        RetailTmpCatalogProductAttributes _retailTmpCatalogProductAttributes,
        RefRecId _attributeType, RefRecId _catalog = 0, RetailInternalOrgRefRecId _internalOrgRecId = 0)
    {
        EcoResAttributeValue ecoResAttributeValue;
        EcoResTextValue editorTextValue, ecoResTextValue;
        EcoResTextValue origEcoResTextValue = EcoResTextValue::find(_retailTmpCatalogProductAttributes.Value, true);
        str origTextValue;

        if (this.useSnapshot())
        {
            select firstOnly TextValue from tmpProductAttributeValue
                where tmpProductAttributeValue.Attribute == _retailTmpCatalogProductAttributes.Attribute
                    && tmpProductAttributeValue.InternalOrganization == _retailTmpCatalogProductAttributes.InternalOrganization;
            editorTextValue.TextValue = tmpProductAttributeValue.TextValue;
        }
        else
        {
            editorTextValue.TextValue = origEcoResTextValue.TextValue;
        }

        origTextValue = editorTextValue.TextValue;

        // launch the appropriate editor for editorTextValue
        if (RetailAttributeHelper::isAttributeTypeHtml(_attributeType))
        {
            RetailAttributeHelper::editHtmlAttributeValue(formRun, editorTextValue);
        }
        else if (RetailAttributeHelper::isAttributeTypeVideos(_attributeType))
        {
            RetailAttributeHelper::editMediaAttributeValue(formRun, editorTextValue, RetailRichMediaType::Videos, RetailRichMediaHelper::getUrlTemplateMapByProduct(EcoResProduct::find(catalogProduct.Product? catalogProduct.Product: product.RecId)));
        }

        // if the value changed update the database
        if (!readOnlyMode && editorTextValue.TextValue != origTextValue)
        {
            ttsBegin;

            if (_retailTmpCatalogProductAttributes.HasCatalogValue)
            {
                ecoResTextValue = origEcoResTextValue;
            }
            ecoResTextValue.TextValue = editorTextValue.TextValue;
            ecoResTextValue.write();

            if (!_retailTmpCatalogProductAttributes.HasCatalogValue)
            {
                ecoResAttributeValue.Value = ecoResTextValue.RecId;
                ecoResAttributeValue.InstanceValue = this.findOrCreateInstanceValue(_retailTmpCatalogProductAttributes);
                ecoResAttributeValue.Attribute = _retailTmpCatalogProductAttributes.Attribute;
                ecoResAttributeValue.insert();

                _retailTmpCatalogProductAttributes.Value = ecoResTextValue.RecId;
                _retailTmpCatalogProductAttributes.HasCatalogValue = NoYes::Yes;
                _retailTmpCatalogProductAttributes.update();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateInstanceValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a catalog instance value for an attribute.
    /// </summary>
    /// <param name="_retailTmpCatalogProductAttributes">
    /// The attribute for which to find or create an instance value.
    /// </param>
    /// <returns>
    /// The found of created instance value.
    /// </returns>
    public RefRecId findOrCreateInstanceValue(RetailTmpCatalogProductAttributes _retailTmpCatalogProductAttributes)
    {
        RetailInternalOrgProduct retailInternalOrgProduct;
        RetailInternalOrgProductInstanceValue retailInternalOrgProductInstanceValue;
        RetailCatalogProdInternalOrgInstanceVal retailCatalogProdInternalOrgInstanceVal;
        RefRecId instanceValueRecId;

        if (catalogProduct)
        {
            if (_retailTmpCatalogProductAttributes.InternalOrganization)
            {
                if (!channelInstanceValues.exists(_retailTmpCatalogProductAttributes.InternalOrganization))
                {
                    retailCatalogProdInternalOrgInstanceVal = RetailCatalogProdInternalOrgInstanceVal::findByCatalogProductInternalOrg(
                        catalogProduct.RecId, _retailTmpCatalogProductAttributes.InternalOrganization);

                    if (!retailCatalogProdInternalOrgInstanceVal.RecId)
                    {
                        retailCatalogProdInternalOrgInstanceVal.CatalogProd = catalogProduct.RecId;
                        retailCatalogProdInternalOrgInstanceVal.InternalOrganization = _retailTmpCatalogProductAttributes.InternalOrganization;
                        retailCatalogProdInternalOrgInstanceVal.insert();
                    }
                    channelInstanceValues.insert(_retailTmpCatalogProductAttributes.InternalOrganization, retailCatalogProdInternalOrgInstanceVal.RecId);
                }
                instanceValueRecId = channelInstanceValues.lookup(_retailTmpCatalogProductAttributes.InternalOrganization);
            }
            else
            {
                if (!catalogProductInstanceValue)
                {
                    catalogProductInstanceValue = CatalogProductInstanceValue::findByCatalogProduct(catalogProduct.RecId);
                    if (!catalogProductInstanceValue.RecId)
                    {
                        catalogProductInstanceValue.CatalogProduct = catalogProduct.RecId;
                        catalogProductInstanceValue.insert();
                    }
                }
                instanceValueRecId = catalogProductInstanceValue.RecId;
            }
        }
        else
        {
            if (!channelInstanceValues.exists(internalOrgRecId))
            {
                retailInternalOrgProduct = RetailInternalOrgProduct::findOrCreateByInternalOrgProduct(internalOrgRecId, product.RecId);
                retailInternalOrgProductInstanceValue = RetailInternalOrgProductInstanceValue::findOrCreateByInternalOrgProduct(retailInternalOrgProduct.RecId);
                channelInstanceValues.insert(internalOrgRecId, retailInternalOrgProductInstanceValue.RecId);
            }
            instanceValueRecId = channelInstanceValues.lookup(internalOrgRecId);
        }

        return instanceValueRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSnapshotValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets snapshotted attribute value string.
    /// </summary>
    /// <param name="_retailTmpCatalogProductAttributesRecId">
    /// The <c>RetailTmpCatalogProductAttributes</c> temporary table record.
    /// </param>
    /// <returns>
    /// The snapshotted attribute value string.
    /// </returns>
    public str getSnapshotValue(RefRecId _retailTmpCatalogProductAttributesRecId)
    {
        if (!snapshotMap.exists(_retailTmpCatalogProductAttributesRecId))
        {
            return '';
        }

        return snapshotMap.lookup(_retailTmpCatalogProductAttributesRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        sharedParams = RetailSharedParameters::find();
        controlMap = new Map(Types::Int64, Types::Class);
        snapshotMap = new Map(Types::Int64, Types::String);
        channelInstanceValues = new Map(Types::Int64, Types::Int64);
        channelHierarchyDateTime = DateTimeUtil::utcNow();

        tmpProductAttributeValuePhysicalTableName = RetailUtilities::getPhysicalTableName(tmpProductAttributeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCatalogProduct</Name>
				<Source><![CDATA[
    protected CatalogProduct parmCatalogProduct(CatalogProduct _catalogProduct = catalogProduct)
    {
        catalogProduct = _catalogProduct;
        return catalogProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChannelHierarchyDateTime</Name>
				<Source><![CDATA[
    private utcDateTime parmChannelHierarchyDateTime(utcDateTime _channelHierarchyDateTime = channelHierarchyDateTime)
    {
        channelHierarchyDateTime = _channelHierarchyDateTime;
        return channelHierarchyDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    protected FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInternalOrg</Name>
				<Source><![CDATA[
    protected RetailTmpInternalOrg parmInternalOrg(RetailTmpInternalOrg _retailTmpInternalOrg = retailTmpInternalOrg)
    {
        retailTmpInternalOrg = _retailTmpInternalOrg;
        retailTmpInternalOrgPhysicalTableName = RetailUtilities::getPhysicalTableName(retailTmpInternalOrg);
        return retailTmpInternalOrg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProduct</Name>
				<Source><![CDATA[
    protected EcoResProduct parmProduct(EcoResProduct _product = product)
    {
        product = _product;
        return product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReadOnlyMode</Name>
				<Source><![CDATA[
    protected boolean parmReadOnlyMode(boolean _readOnlyMode = readOnlyMode)
    {
        readOnlyMode = _readOnlyMode;
        return readOnlyMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpCatalogProductAttributes</Name>
				<Source><![CDATA[
    protected RetailTmpCatalogProductAttributes parmTmpCatalogProductAttributes(RetailTmpCatalogProductAttributes _retailTmpCatalogProductAttributes = retailTmpCatalogProductAttributes)
    {
        retailTmpCatalogProductAttributes = _retailTmpCatalogProductAttributes;
        retailTmpCatalogProductAttributesPhysicalTableName = RetailUtilities::getPhysicalTableName(retailTmpCatalogProductAttributes);
        return retailTmpCatalogProductAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>RetailTmpCatalogProductAttributes</c> temporary table given on object contruction
    /// with attributes and current values for the <c>CatalogProduct</c> given on object contruction.
    /// </summary>
    public void populateTempTable()
    {
        EcoResCategoryAttributeLookup ecoResCategoryAttributeLookup;
        EcoResCategory ecoResCategory;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;
        EcoResProductCategory ecoResProductCategory;
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        EcoResCategoryName attributeSource = "@RET490406";
        RetailTmpCatalogProductAttributes existsTmpAttributes;
        EcoResAttributeValue ecoResAttributeValue;
        RetailProductAttributeRelationType attributeSourceType;
        EcoResDistinctProductVariant ecoResDistinctProductVariant;
        EcoResProduct ecoResProduct;
        CatalogProduct catalogProductMaster;
        RetailCatalogProductAttributeMaxCategory retailCatalogProductAttributeMaxCategory;

        EcoResValue ecoResValue;
        EcoResProductInstanceValue ecoResProductInstanceValue;
        EcoResAttributeDefaultValue ecoResAttributeDefaultValue;
        EcoResAttributeDefaultValue attributeReference;
        EcoResReferenceValue ecoResReferenceValue;
        EcoResAttribute ecoResAttribute;
        RetailStandardAttribute retailStandardAttribute;

        RetailInternalOrganization retailInternalOrganization;
        RetailInternalOrgCatHierarchyCollapsed retailInternalOrgCatHierarchyCollapsed;
        RetailInternalOrgAttributeGroupCollapsed retailInternalOrgAttributeGroupCollapsed;
        omInternalOrganization omInternalOrganization;

        RetailCatalogAttributeGroup retailCatalogAttributeGroup;
        RetailCatalogInternalOrg retailCatalogInternalOrg;
        CatalogTranslation catalogTranslation;

        boolean isVariant;
        AttributeValueText attributeValueText;

        boolean previousRecordLevelSecurity;
        boolean isMultipleCatalogsFeatureEnabled = FeatureStateProvider::isFeatureEnabled(ChannelMultipleCatalogsFeature::instance());

        existsTmpAttributes.linkPhysicalTableInstance(retailTmpCatalogProductAttributes);

        if (catalogProduct)
        {
            ecoResProduct = EcoResProduct::find(catalogProduct.Product);
            catalog = Catalog::find(catalogProduct.Catalog);
        }
        else
        {
            ecoResProduct = EcoResProduct::find(product.RecId);
            select firstOnly retailTmpInternalOrg;
            internalOrgRecId = retailTmpInternalOrg.InternalOrganization;
        }

        if (ecoResProduct is EcoResDistinctProductVariant)
        {
            isVariant = true;
            ecoResDistinctProductVariant = ecoResProduct;
            ecoResProduct = ecoResProduct::find(ecoResDistinctProductVariant.ProductMaster);
            catalogProductMaster = catalogProduct::findByProduct(catalogProduct.Catalog, ecoResProduct.RecId);
        }

        ttsBegin;

        // Temporarily turns off record level security to avoid row-by-row downgrade.
        previousRecordLevelSecurity = retailTmpCatalogProductAttributes.recordLevelSecurity();
        retailTmpCatalogProductAttributes.recordLevelSecurity(false);

        delete_from retailTmpCatalogProductAttributes;

        // 1. attributes from channel and catalog navigation hierarchies
        attributeSourceType = RetailProductAttributeRelationType::Category;

        if (isMultipleCatalogsFeatureEnabled && catalogProduct && catalog.CatalogTarget == RetailCatalogTarget::B2B)
        {
            // Product's own attributes
            insert_recordset retailTmpCatalogProductAttributes (Attribute, AttributeGroupAttribute, AttributeSource, AttributeSourceType)
                select Attribute, AttributeGroupAttribute from ecoResCategoryAttributeLookup
                    join Name, attributeSourceType from ecoResCategory
                        where ecoResCategory.CategoryHierarchy == catalog.CategoryHierarchy
                            && ecoResCategory.RecId == ecoResCategoryAttributeLookup.Category
                    join retailCatalogProductAttributeMaxCategory
                        where retailCatalogProductAttributeMaxCategory.Catalog == catalogProduct.Catalog
                            && retailCatalogProductAttributeMaxCategory.Product == catalogProduct.Product
                            && retailCatalogProductAttributeMaxCategory.Attribute == ecoResCategoryAttributeLookup.Attribute
                            && retailCatalogProductAttributeMaxCategory.Category == ecoResCategory.RecId
                    notExists join existsTmpAttributes
                        where existsTmpAttributes.Attribute == ecoResCategoryAttributeLookup.Attribute
                            && !existsTmpAttributes.InternalOrganization;

            // Variant inherits attributes from master
            insert_recordset retailTmpCatalogProductAttributes (Attribute, AttributeGroupAttribute, AttributeSource, AttributeSourceType)
                        select Attribute, AttributeGroupAttribute from ecoResCategoryAttributeLookup
                            join Name, attributeSourceType from ecoResCategory
                                where ecoResCategory.CategoryHierarchy == catalog.CategoryHierarchy
                                    && ecoResCategory.RecId == ecoResCategoryAttributeLookup.Category
                            join retailCatalogProductAttributeMaxCategory
                                where retailCatalogProductAttributeMaxCategory.Catalog == catalogProduct.Catalog
                                 && retailCatalogProductAttributeMaxCategory.Product == ecoResProduct.RecId
                                 && retailCatalogProductAttributeMaxCategory.Attribute == ecoResCategoryAttributeLookup.Attribute
                                 && retailCatalogProductAttributeMaxCategory.Category == ecoResCategory.RecId
                            notExists join existsTmpAttributes
                                where existsTmpAttributes.Attribute == ecoResCategoryAttributeLookup.Attribute
                                    && !existsTmpAttributes.InternalOrganization;

            // Catalog attributes
            insert_recordset retailTmpCatalogProductAttributes(Attribute, AttributeGroupAttribute, AttributeSourceType, AttributeSource)
                select Attribute, RecId, attributeSourceType from ecoResAttributeGroupAttribute
                join retailCatalogAttributeGroup
                    where retailCatalogAttributeGroup.AttributeGroup == ecoResAttributeGroupAttribute.AttributeGroup
                        && retailCatalogAttributeGroup.CatalogRefRecId == catalog.RecId
                outer join FriendlyName from catalogTranslation
                    where catalogTranslation.Catalog == catalog.RecId
                        && catalogTranslation.Language == systemparameters::getsystemlanguageid()
                notExists join existsTmpAttributes
                    where existsTmpAttributes.Attribute == ecoResAttributeGroupAttribute.Attribute
                        && !existsTmpAttributes.InternalOrganization;
        }
        else
        {
            while select validTimeState(channelHierarchyDateTime) CategoryHierarchy from retailInternalOrgCatHierarchyCollapsed
                group by CategoryHierarchy
                exists join InternalOrganization from RetailTmpInternalOrg
                where retailTmpInternalOrg.InternalOrganization == retailInternalOrgCatHierarchyCollapsed.InternalOrganization
            {
                if (!catalogProduct)
                {
                    insert_recordset retailTmpCatalogProductAttributes (Attribute, AttributeGroupAttribute, AttributeSource, AttributeSourceType)
                        select Attribute, AttributeGroupAttribute from ecoResCategoryAttributeLookup
                            join Name, attributeSourceType from ecoResCategory
                                where ecoResCategory.CategoryHierarchy == retailInternalOrgCatHierarchyCollapsed.CategoryHierarchy
                                    && ecoResCategory.RecId == ecoResCategoryAttributeLookup.Category
                            exists join ecoResProductCategory
                                where ecoResProductCategory.Product == ecoResProduct.RecId
                                    && ecoResProductCategory.Category == ecoResCategory.RecId
                            notExists join existsTmpAttributes
                                where existsTmpAttributes.Attribute == ecoResCategoryAttributeLookup.Attribute
                                    && !existsTmpAttributes.InternalOrganization;
                }
                else
                {
                    // Product's own attributes
                    insert_recordset retailTmpCatalogProductAttributes (Attribute, AttributeGroupAttribute, AttributeSource, AttributeSourceType)
                        select Attribute, AttributeGroupAttribute from ecoResCategoryAttributeLookup
                            join Name, attributeSourceType from ecoResCategory
                                where ecoResCategory.CategoryHierarchy == retailInternalOrgCatHierarchyCollapsed.CategoryHierarchy
                                    && ecoResCategory.RecId == ecoResCategoryAttributeLookup.Category
                            join retailCatalogProductAttributeMaxCategory
                                where retailCatalogProductAttributeMaxCategory.Catalog == catalogProduct.Catalog
                                 && retailCatalogProductAttributeMaxCategory.Product == catalogProduct.Product
                                 && retailCatalogProductAttributeMaxCategory.Attribute == ecoResCategoryAttributeLookup.Attribute
                                 && retailCatalogProductAttributeMaxCategory.Category == ecoResCategory.RecId
                            notExists join existsTmpAttributes
                                where existsTmpAttributes.Attribute == ecoResCategoryAttributeLookup.Attribute
                                    && !existsTmpAttributes.InternalOrganization;

                    // Variant inherits attributes from master
                    insert_recordset retailTmpCatalogProductAttributes (Attribute, AttributeGroupAttribute, AttributeSource, AttributeSourceType)
                        select Attribute, AttributeGroupAttribute from ecoResCategoryAttributeLookup
                            join Name, attributeSourceType from ecoResCategory
                                where ecoResCategory.CategoryHierarchy == retailInternalOrgCatHierarchyCollapsed.CategoryHierarchy
                                    && ecoResCategory.RecId == ecoResCategoryAttributeLookup.Category
                            join retailCatalogProductAttributeMaxCategory
                                where retailCatalogProductAttributeMaxCategory.Catalog == catalogProduct.Catalog
                                 && retailCatalogProductAttributeMaxCategory.Product == ecoResProduct.RecId
                                 && retailCatalogProductAttributeMaxCategory.Attribute == ecoResCategoryAttributeLookup.Attribute
                                 && retailCatalogProductAttributeMaxCategory.Category == ecoResCategory.RecId
                            notExists join existsTmpAttributes
                                where existsTmpAttributes.Attribute == ecoResCategoryAttributeLookup.Attribute
                                    && !existsTmpAttributes.InternalOrganization;
                }
            }
        }

        // 2. attributes from retail product hierarchy
        insert_recordset retailTmpCatalogProductAttributes (Attribute, AttributeGroupAttribute, AttributeSource, AttributeSourceType)
            select Attribute, AttributeGroupAttribute from ecoResCategoryAttributeLookup
                join Name, attributeSourceType from ecoResCategory
                    where ecoResCategoryAttributeLookup.Category == ecoResCategory.RecId
                exists join ecoResCategoryHierarchyRole
                    where ecoResCategoryHierarchyRole.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                       && ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Retail
                exists join ecoResProductCategory
                    where ecoResProductCategory.Product == ecoResProduct.RecId
                       && ecoResProductCategory.Category == ecoResCategory.RecId
                notExists join existsTmpAttributes
                    where existsTmpAttributes.Attribute == ecoResCategoryAttributeLookup.Attribute
                       && !existsTmpAttributes.InternalOrganization;

        // 3. attributes from default product attribute group
        attributeSourceType = RetailProductAttributeRelationType::StandardProduct;
        insert_recordset retailTmpCatalogProductAttributes (Attribute, AttributeGroupAttribute, AttributeSource, AttributeSourceType)
            select Attribute, RecId, attributeSource, attributeSourceType from ecoResAttributeGroupAttribute
                where ecoResAttributeGroupAttribute.AttributeGroup == sharedParams.ProductDefaultAttributeGroup
                notExists join existsTmpAttributes
                    where existsTmpAttributes.Attribute == ecoResAttributeGroupAttribute.Attribute
                       && !existsTmpAttributes.InternalOrganization;

        // 4. channel specific product attributes
        attributeSourceType = RetailProductAttributeRelationType::Channel;

        // 4a. Internal Org product attributes
        insert_recordset retailTmpCatalogProductAttributes(Attribute, AttributeGroupAttribute, AttributeSourceType, InternalOrganization, AttributeSource)
            select Attribute, maxof(RecId), attributeSourceType from ecoResAttributeGroupAttribute
                group by ecoResAttributeGroupAttribute.Attribute, retailInternalOrganization.RecId, omInternalOrganization.Name
                join retailInternalOrgAttributeGroupCollapsed
                    where retailInternalOrgAttributeGroupCollapsed.AttributeGroup == ecoResAttributeGroupAttribute.AttributeGroup
                        && retailInternalOrgAttributeGroupCollapsed.Modifier == RetailChannelAttributeModifier::Product
                        && retailInternalOrgAttributeGroupCollapsed.ValidFrom <= channelHierarchyDateTime
                        && retailInternalOrgAttributeGroupCollapsed.ValidTo >= channelHierarchyDateTime
                join RecId from retailInternalOrganization
                    where retailInternalOrganization.RecId == retailInternalOrgAttributeGroupCollapsed.InternalOrganization
                join Name from omInternalOrganization
                    where omInternalOrganization.RecId == retailInternalOrganization.InternalOrganization
                exists join retailTmpInternalOrg
                    where retailTmpInternalOrg.InternalOrganization == retailInternalOrgAttributeGroupCollapsed.InternalOrganization
                notExists join existsTmpAttributes
                    where existsTmpAttributes.Attribute == ecoResAttributeGroupAttribute.Attribute
                        && !existsTmpAttributes.InternalOrganization;

        // set record level security to false for retailTmpCatalogProductAttributes.
        // which temporarily turns off record level security to avoid row-by-row downgrade.
        // For details see TFS#1700881
        boolean prevRLS = retailTmpCatalogProductAttributes.recordLevelSecurity();
        retailTmpCatalogProductAttributes.recordLevelSecurity(false);

        // ********** Setting the AttributeType field **********
        update_recordSet retailTmpCatalogProductAttributes
            setting AttributeType = ecoResAttribute.AttributeType
            join ecoResAttribute
                where ecoResAttribute.RecId == retailTmpCatalogProductAttributes.Attribute;

        update_recordSet retailTmpCatalogProductAttributes
            setting AttributeType = ecoResAttribute.AttributeType
            join attributeReference
                where attributeReference.Attribute == retailTmpCatalogProductAttributes.Attribute
            join ecoResReferenceValue
                where ecoResReferenceValue.RecId == attributeReference.Value
                   && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
            join ecoResAttribute
                where ecoResAttribute.RecId == ecoResReferenceValue.RefRecId;

        // ********** Setting the Value field ***********

        if (catalogProduct)
        {
            this.updateCatalogProductAttributeValue(catalogProduct, NoYes::Yes);

            if (isVariant)
            {
                if (catalogProductMaster)
                {
                    this.updateCatalogProductAttributeValue(catalogProductMaster, NoYes::No);
                }
                else
                {
                    this.updateInternalOrgProductAttributeValue(ecoResProduct, NoYes::No);
                }
            }
        }
        else
        {
            this.updateInternalOrgProductAttributeValue(product, NoYes::Yes);

            if (isVariant)
            {
                this.updateInternalOrgProductAttributeValue(ecoResProduct, NoYes::No);
            }
        }

        // 3. based on product values
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            exists join ecoResProductInstanceValue
                where ecoResProductInstanceValue.Product == ecoResProduct.RecId
            join ecoResAttributeValue
                where ecoResAttributeValue.Value == ecoResValue.RecId
                    && ecoResAttributeValue.Attribute == retailTmpCatalogProductAttributes.Attribute
                    && ecoResAttributeValue.InstanceValue == ecoResProductInstanceValue.RecId;

        // 3.b based on product value of a referenced attribute
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            exists join ecoResProductInstanceValue
                where ecoResProductInstanceValue.Product == ecoResProduct.RecId
            join attributeReference
                where attributeReference.Attribute == retailTmpCatalogProductAttributes.Attribute
            join ecoResReferenceValue
                where ecoResReferenceValue.RecId == attributeReference.Value
                   && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
            join ecoResAttributeValue
                where ecoResAttributeValue.Value == ecoResValue.RecId
                    && ecoResAttributeValue.Attribute == ecoResReferenceValue.RefRecId
                    && ecoResAttributeValue.InstanceValue == ecoResProductInstanceValue.RecId;

        // 4. based on group default values
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            exists join ecoResAttributeGroupAttribute
                where ecoResAttributeGroupAttribute.RecId == retailTmpCatalogProductAttributes.AttributeGroupAttribute
                    && ecoResAttributeGroupAttribute.DefaultValue == ecoResValue.RecId;

        // 4.b based on group default value of a referenced attribute
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            exists join attributeReference
                where attributeReference.Attribute == retailTmpCatalogProductAttributes.Attribute
            join ecoResReferenceValue
                where ecoResReferenceValue.RecId == attributeReference.Value
                   && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
            join existsTmpAttributes
                where existsTmpAttributes.Attribute == ecoResReferenceValue.RefRecId
                   && existsTmpAttributes.Channel == retailTmpCatalogProductAttributes.Channel
            join ecoResAttributeGroupAttribute
                where ecoResAttributeGroupAttribute.RecId == existsTmpAttributes.AttributeGroupAttribute
                    && ecoResAttributeGroupAttribute.DefaultValue == ecoResValue.RecId;

        // 5. based on attribute default values
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            where ecoResValue.InstanceRelationType != tableNum(EcoResReferenceValue)
            exists join ecoResAttributeDefaultValue
                where ecoResAttributeDefaultValue.Attribute == retailTmpCatalogProductAttributes.Attribute
                    && ecoResAttributeDefaultValue.Value == ecoResValue.RecId;

        // 5.b based on attribute default value of a referenced attribute
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            exists join attributeReference
                where attributeReference.Attribute == retailTmpCatalogProductAttributes.Attribute
            join ecoResReferenceValue
                where ecoResReferenceValue.RecId == attributeReference.Value
                   && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
            join ecoResAttributeDefaultValue
                where ecoResAttributeDefaultValue.Attribute == ecoResReferenceValue.RefRecId
                    && ecoResAttributeDefaultValue.Value == ecoResValue.RecId;

        // ********** Setting the StandardAttributeTextValue field ***********
        while select forUpdate existsTmpAttributes
            where !existsTmpAttributes.Value
            join StandardAttributeID from retailStandardAttribute
            exists join attributeReference
                where attributeReference.Attribute == existsTmpAttributes.Attribute
            join ecoResReferenceValue
                    where ecoResReferenceValue.RecId == attributeReference.Value
                       && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
                       && ecoResReferenceValue.RefRecId == retailStandardAttribute.Attribute
        {
            attributeValueText = RetailAttributeHelper::getStandardAttributeValue(
                retailStandardAttribute.StandardAttributeID, product.RecId, existsTmpAttributes.InternalOrganization, catalog.RecId);

            // Variant inherits standard property from product master
            if (!attributeValueText && ecoResProduct.RecId != product.RecId)
            {
                attributeValueText = RetailAttributeHelper::getStandardAttributeValue(retailStandardAttribute.StandardAttributeID, ecoResProduct.RecId, existsTmpAttributes.InternalOrganization, catalog.RecId);
            }

            existsTmpAttributes.StandardAttributeTextValue = attributeValueText;
            existsTmpAttributes.update();
        }

        if (this.useSnapshot())
        {
            this.updateSnapshotProductAttributeValue();
        }

        retailTmpCatalogProductAttributes.recordLevelSecurity(previousRecordLevelSecurity);
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveProductAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current values of product attributes from the controls added by <c>addProductAttributeControls</c> method to the database.
    /// </summary>
    public void saveProductAttributeValues()
    {
        RetailTmpCatalogProductAttributes localRetailTmpCatalogProductAttributes;
        EcoResAttributeType ecoResAttributeType;
        EcoResAttributeValue ecoResAttributeValue;
        EcoResAttributeTypeUnitOfMeasure ecoResAttributeTypeUnitOfMeasure;

        FormStringControl formStringControl;
        FormComboBoxControl formComboBoxControl;
        FormCheckBoxControl formCheckBoxControl;
        FormDateTimeControl formDateTimeControl;
        FormRealControl formRealControl;
        FormIntControl formIntControl;
        FormGroupControl formGroupControl;
        FormControl formControl;

        EcoResTextValue ecoResTextValue, origEcoResTextValue;
        EcoResBooleanValue ecoResBooleanValue, origEcoResBooleanValue;
        EcoResCurrencyValue ecoResCurrencyValue, origEcoResCurrencyValue;
        EcoResDateTimeValue ecoResDateTimeValue, origEcoResDateTimeValue;
        EcoResFloatValue ecoResFloatValue, origEcoResFloatValue;
        EcoResIntValue ecoResIntValue, origEcoResIntValue;
        EcoResValue newEcoResValue;
        AttributeValueText newTextValue;

        boolean hasChange;

        if (readOnlyMode)
        {
            return;
        }

        localRetailTmpCatalogProductAttributes.linkPhysicalTableInstance(retailTmpCatalogProductAttributes);

        ttsBegin;

        while select forUpdate localRetailTmpCatalogProductAttributes
            join DataType, IsEnumeration from ecoResAttributeType
                where ecoResAttributeType.RecId == localRetailTmpCatalogProductAttributes.AttributeType
                   && ecoResAttributeType.RecId != sharedParams.HtmlAttributeType
                   && ecoResAttributeType.RecId != sharedParams.ImagesAttributeType
                   && ecoResAttributeType.RecId != sharedParams.VideosAttributeType
            outer join DefaultUnitOfMeasure from ecoResAttributeTypeUnitOfMeasure
                where ecoResAttributeTypeUnitOfMeasure.AttributeType == ecoResAttributeType.RecId
            outer join forUpdate origEcoResTextValue
                where origEcoResTextValue.RecId == localRetailTmpCatalogProductAttributes.Value
            outer join forUpdate origEcoResBooleanValue
                where origEcoResBooleanValue.RecId == localRetailTmpCatalogProductAttributes.Value
            outer join forUpdate origEcoResCurrencyValue
                where origEcoResCurrencyValue.RecId == localRetailTmpCatalogProductAttributes.Value
            outer join forUpdate origEcoResDateTimeValue
                where origEcoResDateTimeValue.RecId == localRetailTmpCatalogProductAttributes.Value
            outer join forUpdate origEcoResFloatValue
                where origEcoResFloatValue.RecId == localRetailTmpCatalogProductAttributes.Value
            outer join forUpdate origEcoResIntValue
                where origEcoResIntValue.RecId == localRetailTmpCatalogProductAttributes.Value
        {
            newEcoResValue.clear();
            if (controlMap.exists(localRetailTmpCatalogProductAttributes.RecId))
            {
                formControl = controlMap.lookup(localRetailTmpCatalogProductAttributes.RecId);
                switch (ecoResAttributeType.DataType)
                {
                    case AttributeDataType::TrueFalse:
                        formCheckBoxControl = formControl;
                        if (formCheckBoxControl.value() != origEcoResBooleanValue.BooleanValue)
                        {
                            hasChange = true;

                            if (localRetailTmpCatalogProductAttributes.HasCatalogValue)
                            {
                                origEcoResBooleanValue.BooleanValue = formCheckBoxControl.value();
                                origEcoResBooleanValue.update();
                            }
                            else
                            {
                                ecoResBooleanValue.clear();
                                ecoResBooleanValue.BooleanValue = formCheckBoxControl.value();
                                ecoResBooleanValue.insert();
                                newEcoResValue = ecoResBooleanValue;
                            }
                        }
                        break;

                    case AttributeDataType::DateTime:
                        formDateTimeControl = formControl;
                        if (formDateTimeControl.dateTimeValue() != DateTimeUtil::applyTimeZoneOffset(origEcoResDateTimeValue.DateTimeValue, DateTimeUtil::getUserPreferredTimeZone()))
                        {
                            hasChange = true;

                            if (localRetailTmpCatalogProductAttributes.HasCatalogValue)
                            {
                                origEcoResDateTimeValue.DateTimeValue = DateTimeUtil::removeTimeZoneOffset(formDateTimeControl.dateTimeValue(), DateTimeUtil::getUserPreferredTimeZone());
                                origEcoResDateTimeValue.update();
                            }
                            else
                            {
                                ecoResDateTimeValue.clear();
                                ecoResDateTimeValue.DateTimeValue = DateTimeUtil::removeTimeZoneOffset(formDateTimeControl.dateTimeValue(), DateTimeUtil::getUserPreferredTimeZone());
                                ecoResDateTimeValue.insert();
                                newEcoResValue = ecoResDateTimeValue;
                            }
                        }
                        break;

                    case AttributeDataType::Decimal:
                        formRealControl = formControl;
                        if (formRealControl.realValue() != origEcoResFloatValue.FloatValue)
                        {
                            hasChange = true;

                            if (localRetailTmpCatalogProductAttributes.HasCatalogValue)
                            {
                                origEcoResFloatValue.FloatValue = formRealControl.realValue();
                                origEcoResFloatValue.update();
                            }
                            else
                            {
                                ecoResFloatValue.clear();
                                ecoResFloatValue.FloatValue = formRealControl.realValue();
                                ecoResFloatValue.FloatUnitOfMeasure = ecoResAttributeTypeUnitOfMeasure.DefaultUnitOfMeasure;
                                ecoResFloatValue.insert();
                                newEcoResValue = ecoResFloatValue;
                            }
                        }
                        break;

                    case AttributeDataType::Currency:
                        formGroupControl = formControl;
                        formRealControl = formGroupControl.controlNum(1);
                        formStringControl = formGroupControl.controlNum(2);

                        if (formRealControl.realValue() != origEcoResCurrencyValue.CurrencyValue
                            || formStringControl.text() != origEcoResCurrencyValue.CurrencyCode)
                        {
                            hasChange = true;

                            if (localRetailTmpCatalogProductAttributes.HasCatalogValue)
                            {
                                origEcoResCurrencyValue.CurrencyValue = formRealControl.realValue();
                                origEcoResCurrencyValue.update();
                            }
                            else
                            {
                                ecoResCurrencyValue.clear();
                                ecoResCurrencyValue.CurrencyValue = formRealControl.realValue();
                                ecoResCurrencyValue.CurrencyCode = formStringControl.text();
                                ecoResCurrencyValue.insert();
                                newEcoResValue = ecoResCurrencyValue;
                            }
                        }
                        break;

                    case AttributeDataType::Integer:
                        formIntControl = formControl;
                        if (formIntControl.value() != origEcoResIntValue.IntValue)
                        {
                            hasChange = true;

                            if (localRetailTmpCatalogProductAttributes.HasCatalogValue)
                            {
                                origEcoResIntValue.IntValue = formIntControl.value();
                                origEcoResIntValue.update();
                            }
                            else
                            {
                                ecoResIntValue.clear();
                                ecoResIntValue.IntValue = formIntControl.value();
                                ecoResIntValue.IntUnitOfMeasure = ecoResAttributeTypeUnitOfMeasure.DefaultUnitOfMeasure;
                                ecoResIntValue.insert();
                                newEcoResValue = ecoResIntValue;
                            }
                        }
                        break;

                    case AttributeDataType::Text:
                        if (ecoResAttributeType.IsEnumeration == NoYes::Yes)
                        {
                            formComboBoxControl = formControl;
                            newTextValue = formComboBoxControl.getText(formComboBoxControl.selection());
                        }
                        else
                        {
                            formStringControl = formControl;
                            newTextValue = formStringControl.text();
                        }

                        if ((newTextValue != origEcoResTextValue.TextValue && !localRetailTmpCatalogProductAttributes.StandardAttributeTextValue)
                            || (newTextValue != localRetailTmpCatalogProductAttributes.StandardAttributeTextValue && localRetailTmpCatalogProductAttributes.StandardAttributeTextValue))
                        {
                            hasChange = true;

                            if (localRetailTmpCatalogProductAttributes.HasCatalogValue)
                            {
                                origEcoResTextValue.TextValue = newTextValue;
                                origEcoResTextValue.update();
                            }
                            else
                            {
                                ecoResTextValue.clear();
                                ecoResTextValue.TextValue = newTextValue;
                                ecoResTextValue.insert();
                                newEcoResValue = ecoResTextValue;
                            }
                        }
                        break;
                }

                if (newEcoResValue)
                {
                    ecoResAttributeValue.Value = newEcoResValue.RecId;
                    ecoResAttributeValue.InstanceValue = this.findOrCreateInstanceValue(localRetailTmpCatalogProductAttributes);
                    ecoResAttributeValue.Attribute = localRetailTmpCatalogProductAttributes.Attribute;
                    ecoResAttributeValue.insert();

                    localRetailTmpCatalogProductAttributes.Value = newEcoResValue.RecId;
                    localRetailTmpCatalogProductAttributes.HasCatalogValue = NoYes::Yes;
                    localRetailTmpCatalogProductAttributes.StandardAttributeTextValue = '';
                    localRetailTmpCatalogProductAttributes.update();
                }
            }
        }

        if (hasChange && catalogProduct)
        {
            RetailCatalogProductStatus::setHasUnpublishedChange(catalogProduct.RecId, NoYes::Yes);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCatalogProductAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates catalog product attribute value.
    /// </summary>
    /// <param name="_catalogProduct">
    /// A record buffer for table <c>CatalogProduct</c>.
    /// </param>
    /// <param name="_hasCatalogValue">
    /// A boolean to mark if this is a catalog product attribute value.
    /// </param>
    private void updateCatalogProductAttributeValue(CatalogProduct _catalogProduct, NoYesId _hasCatalogValue)
    {
        EcoResAttributeValue ecoResAttributeValue;
        EcoResValue ecoResValue;
        EcoResAttributeDefaultValue attributeReference;
        EcoResReferenceValue ecoResReferenceValue;
        RetailIntOrgProdAttribValCollapsed retailIntOrgProdAttribValCollapsed;
        RetailCatalogProdInternalOrgInstanceVal retailCatalogProdInternalOrgInstanceVal;
        RetailCatProdIntOrgAttribValInherited retailCatProdIntOrgAttribValInherited;

        // 1.a based on catalog product internal org values
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId, HasCatalogValue = _hasCatalogValue
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            exists join retailCatalogProdInternalOrgInstanceVal
                where retailCatalogProdInternalOrgInstanceVal.CatalogProd == _catalogProduct.RecId
                    && retailCatalogProdInternalOrgInstanceVal.InternalOrganization == retailTmpCatalogProductAttributes.InternalOrganization
            join ecoResAttributeValue
                where ecoResAttributeValue.InstanceValue == retailCatalogProdInternalOrgInstanceVal.RecId
                    && ecoResAttributeValue.Attribute == retailTmpCatalogProductAttributes.Attribute
                    && ecoResAttributeValue.Value == ecoResValue.RecId;

        // 1.b based on catalog product internal org value of a referenced attribute
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            exists join retailCatalogProdInternalOrgInstanceVal
                where retailCatalogProdInternalOrgInstanceVal.CatalogProd == _catalogProduct.RecId
                    && retailCatalogProdInternalOrgInstanceVal.InternalOrganization == retailTmpCatalogProductAttributes.InternalOrganization
            join attributeReference
                where attributeReference.Attribute == retailTmpCatalogProductAttributes.Attribute
            join ecoResReferenceValue
                where ecoResReferenceValue.RecId == attributeReference.Value
                    && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
            join ecoResAttributeValue
                where ecoResAttributeValue.InstanceValue == retailCatalogProdInternalOrgInstanceVal.RecId
                    && ecoResAttributeValue.Attribute == ecoResReferenceValue.RefRecId
                    && ecoResAttributeValue.Value == ecoResValue.RecId;

        // 2.a Update value from Catalog inheritance.
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            join retailCatProdIntOrgAttribValInherited
                where retailCatProdIntOrgAttribValInherited.CatalogProd == _catalogProduct.RecId
                    && retailCatProdIntOrgAttribValInherited.ValidFrom <= channelHierarchyDateTime
                    && retailCatProdIntOrgAttribValInherited.ValidTo >= channelHierarchyDateTime
                    && retailCatProdIntOrgAttribValInherited.Attribute == retailTmpCatalogProductAttributes.Attribute
                    && retailCatProdIntOrgAttribValInherited.Value == ecoResValue.RecId
                    && retailCatProdIntOrgAttribValInherited.InternalOrganization == retailTmpCatalogProductAttributes.InternalOrganization;

        // 2.b Update value from Catalog inheritance based on reference value;
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            join retailCatProdIntOrgAttribValInherited
                where retailCatProdIntOrgAttribValInherited.CatalogProd == _catalogProduct.RecId
                    && retailCatProdIntOrgAttribValInherited.ValidFrom <= channelHierarchyDateTime
                    && retailCatProdIntOrgAttribValInherited.ValidTo >= channelHierarchyDateTime
                    && retailCatProdIntOrgAttribValInherited.Value == ecoResValue.RecId
                    && retailCatProdIntOrgAttribValInherited.InternalOrganization == retailTmpCatalogProductAttributes.InternalOrganization
            join attributeReference
                where attributeReference.Attribute == retailTmpCatalogProductAttributes.Attribute
            join ecoResReferenceValue
                where ecoResReferenceValue.RecId == attributeReference.Value
                    && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
                    && ecoResReferenceValue.RefRecId == retailCatProdIntOrgAttribValInherited.Attribute;

        // 3.a based on catalog product values
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId, HasCatalogValue = _hasCatalogValue
            where !retailTmpCatalogProductAttributes.InternalOrganization
                && !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            exists join catalogProductInstanceValue
                where catalogProductInstanceValue.CatalogProduct == _catalogProduct.RecId
            join ecoResAttributeValue
                where ecoResAttributeValue.InstanceValue == catalogProductInstanceValue.RecId
                    && ecoResAttributeValue.Attribute == retailTmpCatalogProductAttributes.Attribute
                    && ecoResAttributeValue.Value == ecoResValue.RecId;

        // 3.b based on catalog product value of a referenced attribute
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            exists join retailCatalogProdInternalOrgInstanceVal
                where retailCatalogProdInternalOrgInstanceVal.CatalogProd == _catalogProduct.RecId
                    && retailCatalogProdInternalOrgInstanceVal.InternalOrganization == retailTmpCatalogProductAttributes.InternalOrganization
            join attributeReference
                where attributeReference.Attribute == retailTmpCatalogProductAttributes.Attribute
            join ecoResReferenceValue
                where ecoResReferenceValue.RecId == attributeReference.Value
                    && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
            join ecoResAttributeValue
                where ecoResAttributeValue.InstanceValue == retailCatalogProdInternalOrgInstanceVal.RecId
                    && ecoResAttributeValue.Attribute == ecoResReferenceValue.RefRecId
                    && ecoResAttributeValue.Value == ecoResValue.RecId;

        // 4.a update value from channel inheritance
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            join retailIntOrgProdAttribValCollapsed
                where retailIntOrgProdAttribValCollapsed.Product == _catalogProduct.Product
                    && retailIntOrgProdAttribValCollapsed.ValidFrom <= channelHierarchyDateTime
                    && retailIntOrgProdAttribValCollapsed.ValidTo >= channelHierarchyDateTime
                    && retailIntOrgProdAttribValCollapsed.Attribute == retailTmpCatalogProductAttributes.Attribute
                    && retailIntOrgProdAttribValCollapsed.Value == ecoResValue.RecId
                    && retailIntOrgProdAttribValCollapsed.InternalOrganization == retailTmpCatalogProductAttributes.InternalOrganization;

        // 4.b update value from channel inheritance based on reference value.
        update_recordSet retailTmpCatalogProductAttributes
        setting Value = ecoResValue.RecId
        where !retailTmpCatalogProductAttributes.Value
        join ecoResValue
        join retailIntOrgProdAttribValCollapsed
            where retailIntOrgProdAttribValCollapsed.InternalOrganization == retailTmpCatalogProductAttributes.InternalOrganization
                && retailIntOrgProdAttribValCollapsed.Product == _catalogProduct.Product
                && retailIntOrgProdAttribValCollapsed.Value == ecoResValue.RecId
                && retailIntOrgProdAttribValCollapsed.ValidFrom <= channelHierarchyDateTime
                && retailIntOrgProdAttribValCollapsed.ValidTo >= channelHierarchyDateTime
        join attributeReference
            where attributeReference.Attribute == retailTmpCatalogProductAttributes.Attribute
        join ecoResReferenceValue
            where ecoResReferenceValue.RecId == attributeReference.Value
                && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
                && ecoResReferenceValue.RefRecId == retailIntOrgProdAttribValCollapsed.Attribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInternalOrgProdAttributeGroupCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the internal organization product attribute controls.
    /// </summary>
    /// <param name="_formRun">
    /// A formRun of the caller form.
    /// </param>
    /// <param name="_channelProductAttributeGroup">
    /// A FormControlGroup of caller form.
    /// </param>
    /// <param name="_retailCatalogInternalOrg">
    /// A record of table <c>RetailCatalogInternalOrg</c> to update the control.
    /// </param>
    public void updateInternalOrgProdAttributeGroupCtrl(FormRun _formRun,
                                                FormGroupControl _channelProductAttributeGroup,
                                                RetailCatalogInternalOrg _retailCatalogInternalOrg)
    {
        int formGroupControlNum;
        retailcatalogInternalOrg catalogInternalOrg;

        if (catalogProduct.RecId)
        {
            this.saveProductAttributeValues();// save Product attribute value before deleting controls.

            delete_from  retailTmpInternalOrg;

            insert_recordset retailTmpInternalOrg (InternalOrganization)
                select InternalOrganization from catalogInternalOrg
                    where catalogInternalOrg.Catalog == CatalogProduct.Catalog;
            this.parmInternalOrg(retailTmpInternalOrg);
            this.populateTempTable();

            formGroupControlNum = _channelProductAttributeGroup.controlCount();
            if (formGroupControlNum)
            {
                _formRun.design().removeControl(_channelProductAttributeGroup.controlNum(formGroupControlNum).id());
            }
            this.addProductAttributeControls(_channelProductAttributeGroup, RetailProductAttributeRelationType::Channel, _retailCatalogInternalOrg.InternalOrganization);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInternalOrgProductAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates product attribute value for internal organization i.e. channel.
    /// </summary>
    /// <param name="_product">
    ///  A record buffer of EcoResProduct table.
    /// </param>
    /// <param name="_hasCatalogValue">
    /// A boolean value if this is a catalog attribute value.
    /// </param>
    private void updateInternalOrgProductAttributeValue(EcoResProduct _product, NoYesId _hasCatalogValue)
    {
        EcoResAttributeValue ecoResAttributeValue;

        EcoResValue ecoResValue;
        EcoResAttributeDefaultValue attributeReference;
        EcoResReferenceValue ecoResReferenceValue;

        RetailInternalOrgProductInstanceValView retailProdIntOrgInstValue;
        RetailIntOrgProdAttribValCollapsed retailIntOrgProdAttribValCollapsed;

        // 1. update value flag if  attribute has value
        // based on Internal org values
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId, HasCatalogValue = _hasCatalogValue
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            join ecoResAttributeValue
                where ecoResAttributeValue.Attribute == retailTmpCatalogProductAttributes.Attribute
                    && ecoResAttributeValue.Value == ecoResValue.RecId
            exists join retailProdIntOrgInstValue
                where retailProdIntOrgInstValue.InstanceValue == ecoResAttributeValue.InstanceValue
                    && retailProdIntOrgInstValue.Product == _product.RecId
                    && ((internalOrgRecId && retailProdIntOrgInstValue.InternalOrganization == internalOrgRecId)
                        || (!internalOrgRecId && retailProdIntOrgInstValue.InternalOrganization == retailTmpCatalogProductAttributes.InternalOrganization));

        // 1.b based on referenced attribute
        update_recordSet retailTmpCatalogProductAttributes
        setting Value = ecoResValue.RecId
        where !retailTmpCatalogProductAttributes.Value
        join ecoResValue
        join attributeReference
            where attributeReference.Attribute == retailTmpCatalogProductAttributes.Attribute
        join ecoResReferenceValue
            where ecoResReferenceValue.RecId == attributeReference.Value
                && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
        join ecoResAttributeValue
            where ecoResAttributeValue.Attribute == ecoResReferenceValue.RefRecId
                && ecoResAttributeValue.Value == ecoResValue.RecId
        exists join retailProdIntOrgInstValue
            where retailProdIntOrgInstValue.InstanceValue == ecoResAttributeValue.InstanceValue
                && retailProdIntOrgInstValue.Product == _product.RecId
                && ((internalOrgRecId && retailProdIntOrgInstValue.InternalOrganization == internalOrgRecId)
                    || (!internalOrgRecId && retailProdIntOrgInstValue.InternalOrganization == retailTmpCatalogProductAttributes.InternalOrganization));

        // 2. update value from inheritance
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            join retailIntOrgProdAttribValCollapsed
                where retailIntOrgProdAttribValCollapsed.Product == _product.RecId
                    && retailIntOrgProdAttribValCollapsed.ValidFrom <= channelHierarchyDateTime
                    && retailIntOrgProdAttribValCollapsed.ValidTo >= channelHierarchyDateTime
                    && retailIntOrgProdAttribValCollapsed.Attribute == retailTmpCatalogProductAttributes.Attribute
                    && retailIntOrgProdAttribValCollapsed.Value == ecoResValue.RecId
                    && ((internalOrgRecId && retailIntOrgProdAttribValCollapsed.InternalOrganization == internalOrgRecId)
                        || (!internalOrgRecId
                            && retailIntOrgProdAttribValCollapsed.InternalOrganization == retailTmpCatalogProductAttributes.InternalOrganization));

        // 2.b based on refrence attribute
        update_recordSet retailTmpCatalogProductAttributes
            setting Value = ecoResValue.RecId
            where !retailTmpCatalogProductAttributes.Value
            join ecoResValue
            join retailIntOrgProdAttribValCollapsed
                where ((internalOrgRecId && retailIntOrgProdAttribValCollapsed.InternalOrganization == internalOrgRecId)
                        || (!internalOrgRecId
                            && retailIntOrgProdAttribValCollapsed.InternalOrganization == retailTmpCatalogProductAttributes.InternalOrganization))
                    && retailIntOrgProdAttribValCollapsed.Product == _product.RecId
                    && retailIntOrgProdAttribValCollapsed.Value == ecoResValue.RecId
                    && retailIntOrgProdAttribValCollapsed.ValidFrom <= channelHierarchyDateTime
                    && retailIntOrgProdAttribValCollapsed.ValidTo >= channelHierarchyDateTime
            join attributeReference
                where attributeReference.Attribute == retailTmpCatalogProductAttributes.Attribute
            join ecoResReferenceValue
                where ecoResReferenceValue.RecId == attributeReference.Value
                    && ecoResReferenceValue.RefTableId == tableNum(EcoResAttribute)
                    && ecoResReferenceValue.RefRecId == retailIntOrgProdAttribValCollapsed.Attribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSnapshotProductAttributeValue</Name>
				<Source><![CDATA[
    private void updateSnapshotProductAttributeValue()
    {
        RetailTmpCatalogProductAttributes localRetailTmpCatalogProductAttributes;

        RetailTmpPubProductAttributeValue tmpPubProductAttributeValue;
        str tmpPubProductAttributeValuePhysicalTableName = RetailUtilities::getPhysicalTableName(tmpPubProductAttributeValue);

        RetailTmpCatalogProduct tmpCatalogProduct;
        str tmpCatalogProductPhysicalTableName = RetailUtilities::getPhysicalTableName(tmpCatalogProduct);

        RetailTmpCatalogInternalOrgAttribute tmpCatalogInternalOrgAttribute;
        str tmpCatalogInternalOrgAttributePhysicalTableName = RetailUtilities::getPhysicalTableName(tmpCatalogInternalOrgAttribute);

        RetailTmpInternalOrgLanguage tmpInternalOrgLanguage;
        str tmpInternalOrgLanguagePhysicalTableName = RetailUtilities::getPhysicalTableName(tmpInternalOrgLanguage);

        RetailTmpProductAttributeValue checkTmpProductAttributeValue;
        RetailTmpProductAttributeValue existingTmpProductAttributeValue;

        RetailCatalogInternalOrg catalogInternalOrg;
        EcoResDistinctProductVariant distinctProductVariant;

        EcoResAttributeType ecoResAttributeType;
        EcoResTextValue ecoResTextValue;
        EcoResBooleanValue ecoResBooleanValue;
        EcoResCurrencyValue ecoResCurrencyValue;
        EcoResDateTimeValue ecoResDateTimeValue;
        EcoResFloatValue ecoResFloatValue;
        EcoResIntValue ecoResIntValue;

        RetailCatalogManager catalogManager = RetailCatalogManager::newCatalogId(catalogProduct.Catalog);

        LanguageId sysLanguage = SystemParameters::getSystemLanguageId();

        CatalogRefRecId catalogId = catalogProduct.Catalog;

        // Link physical table
        localRetailTmpCatalogProductAttributes.linkPhysicalTableInstance(retailTmpCatalogProductAttributes);
        checkTmpProductAttributeValue.linkPhysicalTableInstance(tmpProductAttributeValue);
        existingTmpProductAttributeValue.linkPhysicalTableInstance(tmpProductAttributeValue);

        ttsBegin;

        // Ensure set based operations to not be downgraded to record-by-record operations
        tmpPubProductAttributeValue.skipDatabaseLog(true);
        tmpPubProductAttributeValue.skipEvents(true);

        // Remove this once the TempDB bug is fixed. The TempDB table instance is not cleared when it is recylced
        delete_from tmpPubProductAttributeValue;

        // Ensure set based operations to not be downgraded to record-by-record operations
        tmpCatalogProduct.skipDatabaseLog(true);
        tmpCatalogProduct.skipEvents(true);

        // Remove this once the TempDB bug is fixed. The TempDB table instance is not cleared when it is recylced
        delete_from tmpCatalogProduct;

        // Product explicitly added to the catalog
        tmpCatalogProduct.Catalog = catalogProduct.Catalog;
        tmpCatalogProduct.Product = catalogProduct.Product;
        tmpCatalogProduct.CatalogProduct = catalogProduct.RecId;
        tmpCatalogProduct.insert();

        // Product master implicitly added to the catalog
        distinctProductVariant = EcoResDistinctProductVariant::find(catalogProduct.Product);
        if (distinctProductVariant)
        {
            tmpCatalogProduct.Catalog = catalogProduct.Catalog;
            tmpCatalogProduct.Product = distinctProductVariant.ProductMaster;
            tmpCatalogProduct.CatalogProduct = CatalogProduct::findByProduct(catalogProduct.Catalog, distinctProductVariant.ProductMaster).RecId;
            tmpCatalogProduct.insert();
        }

        // Ensure set based operations to not be downgraded to record-by-record operations
        tmpCatalogInternalOrgAttribute.skipDatabaseLog(true);
        tmpCatalogInternalOrgAttribute.skipEvents(true);

        // Remove this once the TempDB bug is fixed. The TempDB table instance is not cleared when it is recylced
        delete_from tmpCatalogInternalOrgAttribute;

        // Attributes for all the internal orgs in the catalog
        insert_recordset tmpCatalogInternalOrgAttribute(Catalog, InternalOrganization, Attribute)
            select catalogId, InternalOrganization, Attribute from retailTmpCatalogProductAttributes;

        // Ensure set based operations to not be downgraded to record-by-record operations
        tmpInternalOrgLanguage.skipDatabaseLog(true);
        tmpInternalOrgLanguage.skipEvents(true);

        // Remove this once the TempDB bug is fixed. The TempDB table instance is not cleared when it is recylced
        delete_from tmpInternalOrgLanguage;

        // Languages for all the internal orgs in the catalog
        insert_recordset tmpInternalOrgLanguage(InternalOrganization, LanguageId)
            select InternalOrganization, sysLanguage from catalogInternalOrg
                where catalogInternalOrg.Catalog == catalogProduct.Catalog;

        // Caculate product attribute values
        catalogManager.calculateSelectedProductAttributeValues(
            tmpPubProductAttributeValue,
            tmpCatalogProduct,
            tmpCatalogInternalOrgAttribute,
            tmpInternalOrgLanguage,
            false,  // _requiredCheckOnly
            true);  // _usePublished

        // Ensure set based operations to not be downgraded to record-by-record operations
        tmpProductAttributeValue.skipDatabaseLog(true);
        tmpProductAttributeValue.skipEvents(true);

        // Remove this once the TempDB bug is fixed. The TempDB table instance is not cleared when it is recylced
        delete_from tmpProductAttributeValue;

        // Most specific attribute values win.

        // Product && InternalOrganization && LanguageId
        insert_recordset tmpProductAttributeValue(InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
            select InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from tmpPubProductAttributeValue
                where tmpPubProductAttributeValue.Product == catalogProduct.Product
                    && tmpPubProductAttributeValue.InternalOrganization
                    && tmpPubProductAttributeValue.LanguageId == sysLanguage;

        // Product && InternalOrganization && !LanguageId
        insert_recordset tmpProductAttributeValue(InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
            select InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from tmpPubProductAttributeValue
                where tmpPubProductAttributeValue.Product == catalogProduct.Product
                    && tmpPubProductAttributeValue.InternalOrganization
                    && !tmpPubProductAttributeValue.LanguageId
            notExists join checkTmpProductAttributeValue
                where checkTmpProductAttributeValue.InternalOrganization == tmpPubProductAttributeValue.InternalOrganization
                    && checkTmpProductAttributeValue.Attribute == tmpPubProductAttributeValue.Attribute;

        // Product && !InternalOrganization && LanguageId
        insert_recordset tmpProductAttributeValue(Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
            select Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from tmpPubProductAttributeValue
                where tmpPubProductAttributeValue.Product == catalogProduct.Product
                    && !tmpPubProductAttributeValue.InternalOrganization
                    && tmpPubProductAttributeValue.LanguageId == sysLanguage
            notExists join checkTmpProductAttributeValue
                where !checkTmpProductAttributeValue.InternalOrganization
                    && checkTmpProductAttributeValue.Attribute == tmpPubProductAttributeValue.Attribute;

        // Product && !InternalOrganization && !LanguageId
        insert_recordset tmpProductAttributeValue(Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
            select Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from tmpPubProductAttributeValue
                where tmpPubProductAttributeValue.Product == catalogProduct.Product
                    && !tmpPubProductAttributeValue.InternalOrganization
                    && !tmpPubProductAttributeValue.LanguageId
            notExists join checkTmpProductAttributeValue
                where !checkTmpProductAttributeValue.InternalOrganization
                    && checkTmpProductAttributeValue.Attribute == tmpPubProductAttributeValue.Attribute;

        if (distinctProductVariant)
        {
            // ProductMaster && InternalOrganization && LanguageId
            insert_recordset tmpProductAttributeValue(InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                select InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from tmpPubProductAttributeValue
                    where tmpPubProductAttributeValue.Product == distinctProductVariant.ProductMaster
                        && tmpPubProductAttributeValue.InternalOrganization
                        && tmpPubProductAttributeValue.LanguageId == sysLanguage
                notExists join checkTmpProductAttributeValue
                    where checkTmpProductAttributeValue.InternalOrganization == tmpPubProductAttributeValue.InternalOrganization
                        && checkTmpProductAttributeValue.Attribute == tmpPubProductAttributeValue.Attribute;

            // ProductMaster && InternalOrganization && !LanguageId
            insert_recordset tmpProductAttributeValue(InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                select InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from tmpPubProductAttributeValue
                    where tmpPubProductAttributeValue.Product == distinctProductVariant.ProductMaster
                        && tmpPubProductAttributeValue.InternalOrganization
                        && !tmpPubProductAttributeValue.LanguageId
                notExists join checkTmpProductAttributeValue
                    where checkTmpProductAttributeValue.InternalOrganization == tmpPubProductAttributeValue.InternalOrganization
                        && checkTmpProductAttributeValue.Attribute == tmpPubProductAttributeValue.Attribute;

            // ProductMaster && !InternalOrganization && LanguageId
            insert_recordset tmpProductAttributeValue(Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                select Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from tmpPubProductAttributeValue
                    where tmpPubProductAttributeValue.Product == distinctProductVariant.ProductMaster
                        && !tmpPubProductAttributeValue.InternalOrganization
                        && tmpPubProductAttributeValue.LanguageId == sysLanguage
                notExists join checkTmpProductAttributeValue
                    where !checkTmpProductAttributeValue.InternalOrganization
                        && checkTmpProductAttributeValue.Attribute == tmpPubProductAttributeValue.Attribute;

            // ProductMaster && !InternalOrganization && !LanguageId
            insert_recordset tmpProductAttributeValue(Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                select Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from tmpPubProductAttributeValue
                    where tmpPubProductAttributeValue.Product == distinctProductVariant.ProductMaster
                        && !tmpPubProductAttributeValue.InternalOrganization
                        && !tmpPubProductAttributeValue.LanguageId
                notExists join checkTmpProductAttributeValue
                    where !checkTmpProductAttributeValue.InternalOrganization
                        && checkTmpProductAttributeValue.Attribute == tmpPubProductAttributeValue.Attribute;
        }

        // !Product && InternalOrganization && LanguageId
        insert_recordset tmpProductAttributeValue(InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
            select InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from tmpPubProductAttributeValue
                where !tmpPubProductAttributeValue.Product
                    && tmpPubProductAttributeValue.InternalOrganization
                    && tmpPubProductAttributeValue.LanguageId == sysLanguage
            notExists join checkTmpProductAttributeValue
                where checkTmpProductAttributeValue.InternalOrganization == tmpPubProductAttributeValue.InternalOrganization
                    && checkTmpProductAttributeValue.Attribute == tmpPubProductAttributeValue.Attribute;

        // !Product && InternalOrganization && !LanguageId
        insert_recordset tmpProductAttributeValue(InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
            select InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from tmpPubProductAttributeValue
                where !tmpPubProductAttributeValue.Product
                    && tmpPubProductAttributeValue.InternalOrganization
                    && !tmpPubProductAttributeValue.LanguageId
            notExists join checkTmpProductAttributeValue
                where checkTmpProductAttributeValue.InternalOrganization == tmpPubProductAttributeValue.InternalOrganization
                    && checkTmpProductAttributeValue.Attribute == tmpPubProductAttributeValue.Attribute;

        // !Product && !InternalOrganization && LanguageId
        insert_recordset tmpProductAttributeValue(Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
            select Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from tmpPubProductAttributeValue
                where !tmpPubProductAttributeValue.Product
                    && !tmpPubProductAttributeValue.InternalOrganization
                    && tmpPubProductAttributeValue.LanguageId == sysLanguage
            notExists join checkTmpProductAttributeValue
                where !checkTmpProductAttributeValue.InternalOrganization
                    && checkTmpProductAttributeValue.Attribute == tmpPubProductAttributeValue.Attribute;

        // !Product && !InternalOrganization && !LanguageId
        insert_recordset tmpProductAttributeValue(Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
            select Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from tmpPubProductAttributeValue
                where !tmpPubProductAttributeValue.Product
                    && !tmpPubProductAttributeValue.InternalOrganization
                    && !tmpPubProductAttributeValue.LanguageId
            notExists join checkTmpProductAttributeValue
                where !checkTmpProductAttributeValue.InternalOrganization
                    && checkTmpProductAttributeValue.Attribute == tmpPubProductAttributeValue.Attribute;

        // Explode tmpProductAttributeValue to match retailTmpCatalogProductAttributes
        insert_recordset tmpProductAttributeValue(Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure, InternalOrganization)
            select Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from existingTmpProductAttributeValue
                where !existingTmpProductAttributeValue.InternalOrganization
            join InternalOrganization from retailTmpCatalogProductAttributes
                where retailTmpCatalogProductAttributes.InternalOrganization
                    && retailTmpCatalogProductAttributes.Attribute == existingTmpProductAttributeValue.Attribute
            notExists join checkTmpProductAttributeValue
                where checkTmpProductAttributeValue.InternalOrganization == retailTmpCatalogProductAttributes.InternalOrganization
                    && checkTmpProductAttributeValue.Attribute == existingTmpProductAttributeValue.Attribute;

        // Populate snapshot attribute value string map
        snapshotMap = new Map(Types::Int64, Types::String);
        while select RecId from localRetailTmpCatalogProductAttributes
            join DataType from ecoResAttributeType
                where ecoResAttributeType.RecId == localRetailTmpCatalogProductAttributes.AttributeType
            join tmpProductAttributeValue
                where tmpProductAttributeValue.Attribute == localRetailTmpCatalogProductAttributes.Attribute
                    && tmpProductAttributeValue.InternalOrganization == localRetailTmpCatalogProductAttributes.InternalOrganization
        {
            switch (ecoResAttributeType.DataType)
            {
                case AttributeDataType::TrueFalse:
                    ecoResBooleanValue.BooleanValue = tmpProductAttributeValue.IntValue;
                    snapshotMap.insert(localRetailTmpCatalogProductAttributes.RecId, ecoResBooleanValue.value());
                    break;

                case AttributeDataType::DateTime:
                    ecoResDateTimeValue.DateTimeValue = tmpProductAttributeValue.DateTimeValue;
                    snapshotMap.insert(localRetailTmpCatalogProductAttributes.RecId, ecoResDateTimeValue.value());
                    break;

                case AttributeDataType::Decimal:
                    ecoResFloatValue.FloatValue = tmpProductAttributeValue.FloatValue;
                    ecoResFloatValue.FloatUnitOfMeasure = tmpProductAttributeValue.UnitOfMeasure;
                    snapshotMap.insert(localRetailTmpCatalogProductAttributes.RecId, ecoResBooleanValue.value());
                    break;

                case AttributeDataType::Currency:
                    ecoResCurrencyValue.CurrencyValue = tmpProductAttributeValue.FloatValue;
                    ecoResCurrencyValue.CurrencyCode = tmpProductAttributeValue.TextValue;
                    snapshotMap.insert(localRetailTmpCatalogProductAttributes.RecId, ecoResCurrencyValue.value());
                    break;

                case AttributeDataType::Integer:
                    ecoResIntValue.IntValue = tmpProductAttributeValue.IntValue;
                    ecoResIntValue.IntUnitOfMeasure = tmpProductAttributeValue.UnitOfMeasure;
                    snapshotMap.insert(localRetailTmpCatalogProductAttributes.RecId, ecoResIntValue.value());
                    break;

                case AttributeDataType::Text:
                    ecoResTextValue.TextValue = tmpProductAttributeValue.TextValue;
                    snapshotMap.insert(localRetailTmpCatalogProductAttributes.RecId, ecoResTextValue.value());
                    break;

                default:
                    break;
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSnapshot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether to use snapshotted attribute values.
    /// </summary>
    /// <returns>
    /// Whether to use snapshotted attribute values.
    /// </returns>
    public boolean useSnapshot()
    {
        return catalog && catalog.EnableSnapshot == NoYes::Yes && catalog.State == CatalogState::Published;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCatalogProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an object of the class.
    /// </summary>
    /// <param name="_formRun">
    /// Form using this helper object.
    /// </param>
    /// <param name="_catalogProduct">
    /// Catalog product for which the attributes will be edited.
    /// </param>
    /// <param name="_retailTmpCatalogProductAttributes">
    /// The <c>RetailTmpCatalogProductAttributes</c> temporary table where the set of catalog product attributes will be cached.
    /// </param>
    /// <param name="_readOnlyMode">
    /// Whether the form is opened in read only mode.
    /// </param>
    /// <returns>
    /// An object of the helper class.
    /// </returns>
    public static RetailCatalogProductAttributeFormHelper newFromCatalogProduct(
        formRun _formRun,
        CatalogProduct _catalogProduct,
        RetailTmpCatalogProductAttributes _retailTmpCatalogProductAttributes,
        boolean _readOnlyMode = false)
    {
        RetailCatalogInternalOrg catalogInternalOrg;
        RetailTmpInternalOrg tmpInternalOrg;
        RetailCatalogProductAttributeFormHelper helper;
        helper = new RetailCatalogProductAttributeFormHelper();
        helper.parmFormRun(_formRun);
        helper.parmCatalogProduct(_catalogProduct);
        helper.parmProduct(EcoResProduct::find(_catalogProduct.Product));
        helper.parmTmpCatalogProductAttributes(_retailTmpCatalogProductAttributes);
        helper.parmProduct(EcoResProduct::find(_catalogProduct.Product));
        helper.parmChannelHierarchyDateTime(Catalog::getChannelHierarchyDateTime(_catalogProduct.Catalog));
        helper.parmReadOnlyMode(_readOnlyMode);

        delete_from tmpInternalOrg;

        insert_recordset tmpInternalOrg (InternalOrganization)
            select InternalOrganization from catalogInternalOrg
                where catalogInternalOrg.Catalog == _catalogProduct.Catalog;

        helper.parmInternalOrg(tmpInternalOrg);

        return helper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInternalOrgProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an object of the class.
    /// </summary>
    /// <param name="_formRun">
    /// Form using this helper object.
    /// </param>
    /// <param name="_internalOrgRecId">
    /// Record ID of internal organization.
    /// </param>
    /// <param name="_product">
    /// Assortmented product for which attribute will be edited.
    /// </param>
    /// <param name="_retailTmpCatalogProductAttributes">
    /// The <c>RetailTmpCatalogProductAttributes</c> temporary table where the product attributes will be cached.
    /// </param>
    /// <param name="_readOnlyMode">
    /// Whether the form is opened in read only mode.
    /// </param>
    /// <returns>
    /// An object of the helper class.
    /// </returns>
    /// <remarks>
    /// This constructor is called from <c>RetailInternalOrganization</c> form
    /// </remarks>
    public static RetailCatalogProductAttributeFormHelper newFromInternalOrgProduct(
        formRun _formRun,
        RetailInternalOrgRefRecId _internalOrgRecId,
        EcoResProduct _product,
        RetailTmpCatalogProductAttributes _retailTmpCatalogProductAttributes,
        boolean _readOnlyMode = false)
    {
        RetailTmpInternalOrg tmpInternalOrg;
        RetailCatalogProductAttributeFormHelper helper;
        helper = new RetailCatalogProductAttributeFormHelper();
        helper.parmFormRun(_formRun);
        helper.parmProduct(_product);
        helper.parmTmpCatalogProductAttributes(_retailTmpCatalogProductAttributes);
        helper.parmReadOnlyMode(_readOnlyMode);

        delete_from  tmpInternalOrg;
        tmpInternalOrg.InternalOrganization = _internalOrgRecId;
        tmpInternalOrg.insert();
        helper.parmInternalOrg(tmpInternalOrg);

        return helper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>