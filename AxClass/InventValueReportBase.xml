<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReportBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventValueReportBase</c> class represents behavior that is common for the classes that
///    collect data for and print the inventory value report.
/// </summary>
abstract class InventValueReportBase
{
    InventValueReportContract   inventValueReportContract;
    createdTransactionId        transactionId;

    #DEFINE.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActualFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines which date must be used in the report as a from date.
    /// </summary>
    /// <returns>
    /// The actual from date.
    /// </returns>
    /// <remarks>
    /// This method must be used in the routines that collect transaction data for the report.The
    /// <c>InventValueReportContract.parmFromDate</c> method should never be used for that purpose.
    /// </remarks>
    public FromDate getActualFromDate()
    {
        FromDate fromDate;

        if (inventValueReportContract.parmFromDate() == dateNull())
        {
            fromDate = this.getActualToDate();
        }
        else
        {
            fromDate = inventValueReportContract.parmFromDate();
        }

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines which date must be used in the report as a to date.
    /// </summary>
    /// <returns>
    /// The actual to date.
    /// </returns>
    /// <remarks>
    /// This method must be used in the routines that collect transaction data for the report.The
    /// <c>InventValueReportContract.parmToDate</c> method should never be used for that purpose.
    /// </remarks>
    public ToDate getActualToDate()
    {
        ToDate toDate;

        if (inventValueReportContract.parmToDate() == dateNull())
        {
            toDate = dateMax()
            - 1
            ;
        }
        else
        {
            toDate = inventValueReportContract.parmToDate();
        }

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, inventValueReportContract.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventValueReportContract</Name>
				<Source><![CDATA[
    public InventValueReportContract parmInventValueReportContract(InventValueReportContract _inventValueReportContract = inventValueReportContract)
    {
        container   packed = _inventValueReportContract.pack();

        inventValueReportContract = new InventValueReportContract();

        inventValueReportContract.unpack(packed);

        return inventValueReportContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        container   packedInventValueReportContract;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedInventValueReportContract] = _packedClass;
                if (packedInventValueReportContract)
                {
                    inventValueReportContract = InventValueReportContract::construct();
                    return inventValueReportContract.unpack(packedInventValueReportContract);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreatedTransactionId</Name>
				<Source><![CDATA[
    public createdTransactionId parmCreatedTransactionId(createdTransactionId _transactionId = transactionId)
    {
        transactionId = _transactionId;
        return transactionId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>