<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResProjectResourceEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ResProjectResourceEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HcmEmployment_onInsertedUpdatedDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>HcmEmployment</c> record on inserted or updated or deleted event.
    /// </summary>
    /// <param name="_sender">The <c>HcmEmployment</c> record that was inserted or updated or deleted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(HcmEmployment), DataEventType::Inserted),
     DataEventHandler(tableStr(HcmEmployment), DataEventType::Updated),
     DataEventHandler(tableStr(HcmEmployment), DataEventType::Deleted)]
    public static void HcmEmployment_onInsertedUpdatedDeleted(Common _sender, DataEventArgs _e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && ResUtil::isPerformanceEnhancementFeatureEnabled(true))
        {
            HcmEmployment hcmEmployment = _sender as HcmEmployment;

            ResourceRecId resourceRecId = ResProjectResourceEventHandler::getProjectResourceByEmployment(hcmEmployment);
            if (resourceRecId)
            {
                ResProjectResourceEventHandler::deleteByResource(resourceRecId);
                ResProjectResourceEventHandler::insertByResource(resourceRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WorkCalendarEmployment_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>WorkCalendarEmployment</c> record on inserted event.
    /// </summary>
    /// <param name="_sender">The <c>WorkCalendarEmployment</c> record that was Inserted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(WorkCalendarEmployment), DataEventType::Inserted)]
    public static void WorkCalendarEmployment_onInserted(Common _sender, DataEventArgs _e)
    {
        WorkCalendarEmployment workCalendarEmployment = _sender as WorkCalendarEmployment;

        if (workCalendarEmployment.CalendarId && isConfigurationkeyEnabled(configurationKeyNum(Project)) && ResUtil::isPerformanceEnhancementFeatureEnabled(true))
        {
            HcmEmployment hcmEmployment = HcmEmployment::find(WorkCalendarEmployment.Employment);

            ResourceRecId resourceRecId = ResProjectResourceEventHandler::getProjectResourceByEmployment(hcmEmployment);
            if (resourceRecId)
            {
                ResProjectResourceEventHandler::deleteByResource(resourceRecId);
                ResProjectResourceEventHandler::insertByResource(resourceRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WorkCalendarEmployment_onUpdatedDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>WorkCalendarEmployment</c> record on updated  and deleted event.
    /// </summary>
    /// <param name="_sender">The <c>WorkCalendarEmployment</c> record that was updated or deleted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(WorkCalendarEmployment), DataEventType::Updated),
     DataEventHandler(tableStr(WorkCalendarEmployment), DataEventType::Deleted)]
    public static void WorkCalendarEmployment_onUpdatedDeleted(Common _sender, DataEventArgs _e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && ResUtil::isPerformanceEnhancementFeatureEnabled(true))
        {
            WorkCalendarEmployment workCalendarEmployment = _sender as WorkCalendarEmployment;

            HcmEmployment hcmEmployment = HcmEmployment::find(WorkCalendarEmployment.Employment);

            ResourceRecId resourceRecId = ResProjectResourceEventHandler::getProjectResourceByEmployment(hcmEmployment);
            if (resourceRecId)
            {
                ResProjectResourceEventHandler::deleteByResource(resourceRecId);
                ResProjectResourceEventHandler::insertByResource(resourceRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WrkCtrResourceCalendar_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>WrkCtrResourceCalendar</c> record on inserted event.
    /// </summary>
    /// <param name="_sender">The <c>WrkCtrResourceCalendar</c> record that was Inserted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(WrkCtrResourceCalendar), DataEventType::Inserted)]
    public static void WrkCtrResourceCalendar_onInserted(Common _sender, DataEventArgs _e)
    {
        WrkCtrResourceCalendar wrkCtrResourceCalendar = _sender as WrkCtrResourceCalendar;

        if (wrkCtrResourceCalendar.CalendarId && isConfigurationkeyEnabled(configurationKeyNum(Project)) && ResUtil::isPerformanceEnhancementFeatureEnabled(true))
        {
            ResourceRecId resourceRecId = ResourceFacade::findByResourceId(wrkCtrResourceCalendar.WrkCtrId);
            
            if (resourceRecId)
            {
                ResProjectResourceEventHandler::deleteByResource(resourceRecId);
                ResProjectResourceEventHandler::insertByResource(resourceRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WrkCtrResourceCalendar_onInsertedUpdatedDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>WrkCtrResourceCalendar</c> record on updated and deleted event.
    /// </summary>
    /// <param name="_sender">The <c>WrkCtrResourceCalendar</c> record that was updated or deleted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(WrkCtrResourceCalendar), DataEventType::Updated),
     DataEventHandler(tableStr(WrkCtrResourceCalendar), DataEventType::Deleted)]
    public static void WrkCtrResourceCalendar_onInsertedUpdatedDeleted(Common _sender, DataEventArgs _e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && ResUtil::isPerformanceEnhancementFeatureEnabled(true))
        {
            WrkCtrResourceCalendar wrkCtrResourceCalendar = _sender as WrkCtrResourceCalendar;

            ResourceRecId resourceRecId = ResourceFacade::findByResourceId(wrkCtrResourceCalendar.WrkCtrId);
            
            if (resourceRecId)
            {
                ResProjectResourceEventHandler::deleteByResource(resourceRecId);
                ResProjectResourceEventHandler::insertByResource(resourceRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertByResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert <c>ResProjectResource</c> table and relevant tables records by resource record identifier.
    /// </summary>
    /// <param name = "_resource">Resource record identifier.</param>
    [Hookable(false), Wrappable(false)]
    public static void insertByResource(ResourceRecId _resource)
    {
        if (_resource)
        {
            ResProjectResourceEventHandler::insertRecordsOperation(_resource);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAllResourceRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert <c>ResProjectResource</c> table and relevant tables records for all resources.
    /// </summary>
    [Hookable(false), Wrappable(false)]
    public static void insertAllResourceRecords()
    {
        // Remove legacy ResRollup tables data.
        str deleteResRollupTablesSQLStatement = ResSchedulingSQLObjects::getDeleteResRollupTablesSQLStatement();
        ResProjectResourceEventHandler::executeSQLStatement(deleteResRollupTablesSQLStatement);
        
        if (ResRemoveTruncateDeleteFlight::instance().isEnabled())
        {
            ResProjectResource projectResource;
            ResProjectResourceEventHandler::skipDatabaseLogAndEvent(projectResource);
            delete_from projectResource;

            ResEffectiveDateTimeRange effectiveDateTimeRange;
            ResProjectResourceEventHandler::skipDatabaseLogAndEvent(effectiveDateTimeRange);
            delete_from effectiveDateTimeRange;

            ResCalendarDateTimeRange calendarDateTimeRange;
            ResProjectResourceEventHandler::skipDatabaseLogAndEvent(calendarDateTimeRange);
            delete_from calendarDateTimeRange;
        }
        else
        {
            // Remove existing ResProjectResource tables data.
            str deleteResProjectResourcesSqlStatement = ResSchedulingSQLObjects::getDeleteResProjectResourceTablesSQLStatement();
            ResProjectResourceEventHandler::executeSQLStatement(deleteResProjectResourcesSqlStatement);
        }

        ResProjectResourceEventHandler::insertRecordsOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete <c>ResProjectResource</c> table and relevant tables records by resource record identifier.
    /// </summary>
    /// <param name = "_resource">Resource record identifier.</param>
    [Hookable(false), Wrappable(false)]
    public static void deleteByResource(ResourceRecId _resource)
    {
        if (_resource)
        {
            ResProjectResource projectResource;
            
            delete_from projectResource
                where projectResource.resource == _resource;

            ResEffectiveDateTimeRange resEffectiveDateTimeRange;

            delete_from resEffectiveDateTimeRange
                where resEffectiveDateTimeRange.resource == _resource;

            ResCalendarDateTimeRange resCalendarDateTimeRange;

            delete_from resCalendarDateTimeRange
                where resCalendarDateTimeRange.resource == _resource;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectResourceByEmployment</Name>
				<Source><![CDATA[
    private static ResourceRecId getProjectResourceByEmployment(HcmEmployment _hcmEmployment)
    {
        ResourceRecId resourceRecId;

        if (_hcmEmployment)
        {
            ResourceWorkerView resourceWorkerView;
            CompanyInfo companyInfo;

            select firstonly RecId from resourceWorkerView
                where resourceWorkerView.Worker == _hcmEmployment.Worker
            exists join companyInfo
                where companyInfo.RecId == _hcmEmployment.LegalEntity &&
                    companyInfo.DataArea == resourceWorkerView.ResourceCompanyId;

            resourceRecId = resourceWorkerView.RecId;
        }

        return resourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordsOperation</Name>
				<Source><![CDATA[
    private static void insertRecordsOperation(ResourceRecId _resource = 0)
    {
        ResProjectResource projectResource;
        ResProjectResource projectResourceNotExists;
        ResCompanyResourceView resourceCompanyView;

        ResProjectResourceEventHandler::skipDatabaseLogAndEvent(projectResource);
        
        insert_recordset projectResource (Name, RecipientCompany, Resource, ResourceId, SourceCompany, SourceLegalEntity, Type)
            select Name, RecipientCompany, Resource, ResourceId, SourceCompany, SourceLegalEntity, Type
                from resourceCompanyView
            group by Name, RecipientCompany, Resource, ResourceId, SourceCompany, SourceLegalEntity, Type
                where (_resource == 0 || resourceCompanyView.Resource == _resource)
            notexists join projectResourceNotExists
                where projectResourceNotExists.SourceCompany == resourceCompanyView.SourceCompany &&
                    projectResourceNotExists.RecipientCompany == resourceCompanyView.RecipientCompany &&
                    projectResourceNotExists.ResourceId == resourceCompanyView.ResourceId;

        ResourceLegalEntityView resLegaleEntityView;
        ResEffectiveDateTimeRange resEffectiveDateTimeRange;
        ResEffectiveDateTimeRange resEffectiveDateTimeRangeNoExists;
        
        ResProjectResourceEventHandler::skipDatabaseLogAndEvent(resEffectiveDateTimeRange);

        insert_recordset resEffectiveDateTimeRange (Resource, ValidFromDateTime, ValidToDateTime)
            select Resource, ValidFrom, ValidTo from resLegaleEntityView
            group by Resource, ValidFrom, ValidTo
                where (_resource == 0 || resLegaleEntityView.Resource == _resource)
            notexists join resEffectiveDateTimeRangeNoExists
                where resEffectiveDateTimeRangeNoExists.Resource == resLegaleEntityView.Resource &&
                    resEffectiveDateTimeRangeNoExists.ValidFromDateTime == resLegaleEntityView.ValidFrom &&
                    resEffectiveDateTimeRangeNoExists.ValidToDateTime == resLegaleEntityView.ValidTo;

        ResCalendarDateTimeRange resCalendarDateTimeRange;
        ResCalendarDateTimeRange resCalendarDateTimeRangeNoExists;
        
        ResProjectResourceEventHandler::skipDatabaseLogAndEvent(resCalendarDateTimeRange);

        insert_recordset resCalendarDateTimeRange (Resource, Calendar, ValidFromDateTime, ValidToDateTime)
            select Resource, Calendar, CalendarValidFrom, CalendarValidTo from resLegaleEntityView
            group by Resource, Calendar, CalendarValidFrom, CalendarValidTo
            where (_resource == 0 || resLegaleEntityView.Resource == _resource) &&
                resLegaleEntityView.Calendar != 0
            notexists join resCalendarDateTimeRangeNoExists
                where resCalendarDateTimeRangeNoExists.Resource == resLegaleEntityView.Resource &&
                    resCalendarDateTimeRangeNoExists.ValidFromDateTime == resLegaleEntityView.CalendarValidFrom &&
                    resCalendarDateTimeRangeNoExists.ValidToDateTime == resLegaleEntityView.CalendarValidTo;

        ResResourcesCalendarView resourceCalendarView;
        update_recordset projectResource
        setting
            Schedulable = NoYes::Yes
        where (_resource == 0 || projectResource.Resource == _resource)
        exists join resourceCalendarView
            where resourceCalendarView.Resource == projectResource.Resource;
                
        update_recordset projectResource
        setting
            Schedulable = NoYes::No
        where (_resource == 0 || projectResource.Resource == _resource)
        notexists join resourceCalendarView
            where resourceCalendarView.Resource == projectResource.Resource;

    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeActivityTeamTableRootActivityAcrossAllCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Data upgrade script to populate root activity to the <c>PSAProjSchedRole</c> table for resource scheduling performance enhancement feature.
    /// </summary>
    [Hookable(false), Wrappable(false)]
    public static void upgradeActivityTeamTableRootActivityAcrossAllCompanies()
    {
        PSAProjSchedRole projTeamTableAcrossCompanies;

        while select crossCompany projTeamTableAcrossCompanies
            group by projTeamTableAcrossCompanies.DataAreaId
        {
            changecompany(projTeamTableAcrossCompanies.dataAreaId)
            {
                ResProjectResourceEventHandler::updateRootActivityForProject();
                if (isConfigurationkeyEnabled(configurationKeyNum(ProjQuotation)))
                {
                    ResProjectResourceEventHandler::updateRootActivityForQuotation();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRootActivityForProject</Name>
				<Source><![CDATA[
    private static void updateRootActivityForProject()
    {
        PSAProjSchedRole projTeamTable;
        ProjTable projTable;
        HierarchyLinkTable hierarchyLinkTable;
        HierarchyTreeTable hierarchyTreeTable;

        update_recordset projTeamTable
                setting RootActivity = hierarchyTreeTable.RefRecId
            join projTable
                where projTable.ProjId == projTeamTable.ProjId
            join hierarchyLinkTable
                where hierarchyLinkTable.RefRecId == projTable.RecId &&
                    hierarchyLinkTable.RefTableId == projTable.TableId
            join hierarchyTreeTable
                where hierarchyTreeTable.HierarchyId == hierarchyLinkTable.HierarchyId &&
                    hierarchyTreeTable.ParentElementNumber == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRootActivityForQuotation</Name>
				<Source><![CDATA[
    private static void updateRootActivityForQuotation()
    {
        PSAProjSchedRole projTeamTable;
        SalesQuotationTable salesQuotationTable;
        HierarchyLinkTable hierarchyLinkTable;
        HierarchyTreeTable hierarchyTreeTable;

        update_recordset projTeamTable
                setting RootActivity = hierarchyTreeTable.RefRecId
            join salesQuotationTable
                where salesQuotationTable.QuotationId == projTeamTable.QuotationId
            join hierarchyLinkTable
                where hierarchyLinkTable.RefRecId == salesQuotationTable.RecId &&
                    hierarchyLinkTable.RefTableId == salesQuotationTable.TableId
            join hierarchyTreeTable
                where hierarchyTreeTable.HierarchyId == hierarchyLinkTable.HierarchyId &&
                    hierarchyTreeTable.ParentElementNumber == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePerfEnhancementStatusField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update resource scheduling data upgrade status field to the specified status.
    /// </summary>
    /// <param name = "_status">Target status to be updated.</param>
    [Hookable(false), Wrappable(false)]
    public static void updatePerfEnhancementStatusField(ProjDataUpgradeStatus _status)
    {
        ttsbegin;
        ProjParameters crossCompaniesParameters;
        while select crosscompany crossCompaniesParameters
        {
            changecompany (crossCompaniesParameters.DataAreaId)
            {
                crossCompaniesParameters.selectForUpdate(true);
                crossCompaniesParameters.ResPerfDataUpgradeStatus = _status;
                crossCompaniesParameters.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDatabaseLogAndEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Skip data base log and event to improve performance.
    /// </summary>
    /// <param name = "_table">The specify table buffer.</param>
    private static void skipDatabaseLogAndEvent(Common _table)
    {
        // Skip database log is set to true in code. These are performance cache data which
        // are neither master or transaction data. There is no value for our user to log it.
        _table.skipDatabaseLog(true);
        _table.skipEvents(true);
        _table.skipDataMethods(true);
        _table.skipDeleteMethod(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQLStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute SQL statement.
    /// </summary>
    /// <param name = "_statement">SQL statement string.</param>
    private static void executeSQLStatement(str _statement)
    {
        Connection connection = new Connection();

        if (connection)
        {
            try
            {
                Statement stmt = connection.createStatement();
                new SqlStatementExecutePermission(_statement).assert();
                stmt.executeUpdate(_statement);
                CodeAccessPermission::revertAssert();
                stmt.close();
            }
            catch
            {
                throw error(strFmt("@SYS93289"));  // Operation canceled
            }
            finally
            {
                connection.finalize();
            }
        }
        else
        {
            throw error(strFmt("@SYS73525"));  // Connection not established
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>