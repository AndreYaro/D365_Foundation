<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXJobUploadTargetContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net;
using Microsoft.Dynamics.Retail.CommerceDataExchange;

/// <summary>
/// Represents the <c>RetailCDXJobUploadTargetContext</c> class which is used to process upload packages.
/// </summary>
internal class RetailCDXJobUploadTargetContext
{
    internal Microsoft.Dynamics.Retail.CommerceDataExchange.DataPackage dataPackage;

    RetailCDXPacketFilePath      uploadFilePath;
    RetailCdxCheckSum            checkSumExpected;
    RetailCDXUploadSessionStatus status;
    RetailCDXScheduleRefRecId    scheduleRecId;
    RetailCDXDataGroupRefRecId   dataGroupRecId;
    RefRecId                     uploadSessionRecId;
    RetailCDXSessionNumber       session;
    str                          dataStoreName;
    str                          Message;
    utcdatetime                  dateUploaded;
    int                          rowsAffected;
    int                          maxTryCount;
    int                          currentTryCount;
    str                          jobId;
    internal str                 baseWorkDirPath;
    int64                        fileSize;
    guid                         packageId;

    RetailCDXJobUploadTargetLogger logger;
    guid correlationId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>RetailCDXJobUploadTargetContext</c> class.
    /// </summary>
    /// <param name = "_scheduleRecId">The distribution schedule record Id.</param>
    /// <param name = "_uploadSessionRecId">The upload session record Id.</param>
    /// <param name = "_dataStoreName">The datastore name.</param>
    /// <param name = "_correlationId">The event correlation identifier.</param>
    internal void new(RefRecId _scheduleRecId, RefRecId _uploadSessionRecId, str _dataStoreName, guid _correlationId = newGuid())
    {
        this.paramCorrelationId(_correlationId);
        logger = new RetailCDXJobUploadTargetLogger(this);

        this.scheduleRecId =_scheduleRecId;
        this.uploadSessionRecId = _uploadSessionRecId;
        this.dataStoreName = _dataStoreName;
        this.maxTryCount = RetailConnParameters::getCDXTryCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramDataGroupRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of data group record Id.
    /// </summary>
    /// <param name="_dataGroupRecID">The value of <c>DataGroupRecId</c>; optional.</param>
    /// <returns>Data group record Id.</returns>
    internal RetailCDXDataGroupRefRecId paramDataGroupRecID(RetailCDXDataGroupRefRecId _dataGroupRecID = dataGroupRecID)
    {
        this.dataGroupRecID = _dataGroupRecID;

        return this.dataGroupRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramJobID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value for job ID in <c>RetailConnJobID</c>.
    /// </summary>
    /// <param name="_jobID">The value of <c>RetailConnJobID</c>; optional.</param>
    /// <returns>Job ID.</returns>
    internal RetailConnJobID paramJobID(RetailConnJobID _jobID = jobID)
    {
        this.jobID = _jobID;

        return this.jobID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramScheduleRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of schedule record Id.
    /// </summary>
    /// <param name="_scheduleRecID">The value of <c>RetailScheduleRecID</c>.</param>
    /// <returns>Schedule record Id.</returns>
    internal RefRecId paramScheduleRecID(RefRecId _scheduleRecID = scheduleRecID)
    {
        this.scheduleRecID = _scheduleRecID;

        return this.scheduleRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of session.
    /// </summary>
    /// <param name="_session">The value of <c>RetailCDXSessionNumber</c>; optional.</param>
    /// <returns>Session number.</returns>
    internal RetailCDXSessionNumber paramSession(RetailCDXSessionNumber _session = session)
    {
        this.session = _session;

        return this.session;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramSessionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the upload session status.
    /// </summary>
    /// <param name="_status">The value of <c>RetailCDXUploadSessionStatus</c>; optional.</param>
    /// <returns>The upload session status.</returns>
    internal RetailCDXUploadSessionStatus paramSessionStatus(RetailCDXUploadSessionStatus _status = status)
    {
        this.status = _status;

        return this.status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramRowsAffected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the number of rows affected.
    /// </summary>
    /// <param name = "_rowsAffected">The number of rows affected.</param>
    /// <returns>The number of rows affected.</returns>
    internal int paramRowsAffected(int _rowsAffected = rowsAffected)
    {
        this.rowsAffected = _rowsAffected;

        return this.rowsAffected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramDataStoreName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the dataStore name.
    /// </summary>
    /// <param name="_dataStoreName">The dataStore name.</param>
    /// <returns>The dataStore name.</returns>
    internal str paramDataStoreName(str _dataStoreName = dataStoreName)
    {
        this.dataStoreName = _dataStoreName;

        return this.dataStoreName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramFileSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the package file size.
    /// </summary>
    /// <param name = "_fileSize">The file size.</param>
    /// <returns>The file size.</returns>
    internal int64 paramFileSize(int64 _fileSize = fileSize)
    {
        this.fileSize = _fileSize;

        return this.fileSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramCurrentTryCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the current try count.
    /// </summary>
    /// <param name = "_currentTryCount">The curent try count.</param>
    /// <returns>The current try count.</returns>
    internal int paramCurrentTryCount(int _currentTryCount = currentTryCount)
    {
        this.currentTryCount = _currentTryCount;

        return this.currentTryCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramPackageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the package Id.
    /// </summary>
    /// <param name = "_packageId">The package Id.</param>
    /// <returns>The package Id.</returns>
    internal guid paramPackageId(guid _packageId = packageId)
    {
        this.packageId = _packageId;

        return this.packageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramCorrelationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the correlation Id..
    /// </summary>
    /// <param name="_correlationId">The correlation Id.</param>
    /// <returns>The correlation Id.</returns>
    internal guid paramCorrelationId(guid _correlationId = correlationId)
    {
        this.correlationId = _correlationId;

        return this.correlationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the context from the specified upload session record object.
    /// </summary>
    private void initialize()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;

        try
        {
            logger.logCDXJobUploadTargetCtxInitializationStart();

            RetailCDXUploadSession uploadSessionTable;
            RetailConnDatabaseProfile dataStore;

            select RecId, UploadPath, JobId, Schedule, UploadSessionId, CheckSum, Status
            from uploadSessionTable
            where uploadSessionTable.RecId == this.uploadSessionRecId;

            select Name, DataGroup from dataStore where dataStore.Name == this.dataStoreName;

            this.uploadSessionRecId = uploadSessionTable.RecId;
            this.uploadFilePath = uploadSessionTable.UploadPath;
            this.checkSumExpected = uploadSessionTable.CheckSum;
            this.jobId = uploadSessionTable.JobId;
            this.scheduleRecId = uploadSessionTable.Schedule;
            this.session = uploadSessionTable.UploadSessionId;
            this.status = uploadSessionTable.Status;

            this.dataGroupRecId = dataStore.DataGroup;
            this.dataStoreName = dataStore.Name;

            System.Exception ex;
            try
            {
                str workDirBase = System.IO.Path::GetTempPath();
                // scheduleRecID_dataGroupId_randomName
                str workDirName = strFmt('%1_%2_%3', this.scheduleRecId, this.dataGroupRecId, System.IO.Path::GetRandomFileName());
                this.baseWorkDirPath = System.IO.Path::Combine(workDirBase, workDirName);

                if (!System.IO.Directory::Exists(this.baseWorkDirPath))
                {
                    System.IO.Directory::CreateDirectory(this.baseWorkDirPath);
                }
            }
            catch (ex)
            {

                throw error(strFmt("@REX4040267",
                this.scheduleRecId,
                this.jobId,
                this.dataGroupRecId,
                ex.ToString()));
            }
        }
        catch(xppEx)
        {
            logger.logCDXJobUploadTargetCtxInitializationFailure(xppEx);
            throw error(strFmt("@Retail:CDXJobUpoadTargetCtxInitErrMsg", this.paramJobID()));
        }
        finally
        {
            logger.logCDXJobUploadTargetCtxInitializationStop(xppEx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the upload package and applies it to the target.
    /// </summary>
    internal void execute()
    {
        System.Exception ex;

        int infologLine = infologLine();

        try
        {
            logger.logCDXJobUploadTargetProcessingStart();

            if (!RetailCDXFeatureControl::IsSkipExecutionWhenSameUploadSessionAlreadyInProgressDisabled())
            {
                using (ReqReaderWriterLock uploadSessionLock = ReqReaderWriterLock::construct())
                {
                    str uploadSessionLockName = strFmt(RetailCDXConstants::UploadSessionLockName, this.uploadSessionRecId);

                    if (!uploadSessionLock.tryEnterWriterLock(uploadSessionLockName) || !this.canSessionBeApplied())
                    {
                        logger.logCDXJobUploadTargetProcessingSkipped();
                        return;
                    }

                    this.executeInternal();
                }
            }
            else
            {
                this.executeInternal();
            }
        }
        catch (ex)
        {
            logger.logCDXJobUploadTargetProcessingFailure(ex);
            throw error(strFmt("@REX4161330", this.session, ex.Message));
        }
        finally
        {
            if (ex != null)
            {
                try
                {
                    str errMsg = RetailUtilities::getInfologMessages(infoLogLine);
                    this.updateUploadSession(false /*success*/, errMsg);
                }
                catch (Exception::Error)
                {
                    //swallow - already logged in updateUploadSession()
                }
            }

            this.cleanUp();

            logger.logCDXJobUploadTargetProcessingStop(ex);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeInternal</Name>
				<Source><![CDATA[
    private void executeInternal()
    {
        this.initialize();

        this.retrieveDataPackage();

        this.applyDataPackage();

        this.updateUploadSession();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDataPackage</Name>
				<Source><![CDATA[
    private void retrieveDataPackage()
    {
        System.Exception ex;
        RetailConnParameters schedulerParameter = RetailConnParameters::find();

        try
        {
            logger.logCDXJobUploadTargetRetrieveDataPackageStart();

            str workDirPath = this.getWorkDirPath();

            str stagingDataFilePath = System.IO.Path::Combine(workDirPath, RetailCDXConstants::PackageFileName);

            RetailCDXFilePathOrGuid uri = RetailCDXPackageStore::getPackageLink(
                                                this.dataGroupRecId,
                                                RetailCDXDownloadUpload::Upload,
                                                this.uploadFilePath,
                                                schedulerParameter.getSasTokenTimeout());

            this.downloadFile(uri, stagingDataFilePath);

            boolean isDataPackageValid = Microsoft.Dynamics.Retail.SynchLibrary.Utility.FileCheck::ValidateFile(stagingDataFilePath, this.checkSumExpected);

            if (!isDataPackageValid)
            {
                throw error("@Retail:RetailCdxCheckSumValidationFailed");
            }

            // decompress
            Microsoft.Dynamics.Retail.CommerceDataExchange.DataPackage::DecompressDataPackage(stagingDataFilePath, workDirPath);
            
            this.dataPackage = new Microsoft.Dynamics.Retail.CommerceDataExchange.DataPackage(workDirPath);
            dataPackage.LoadManifest();

            this.paramPackageId(this.dataPackage.PackageId);
        }
        catch (ex)
        {
            logger.logCDXJobUploadTargetRetrieveDataPackageFailure(ex);
            throw error(strFmt("@Retail:retrieveUploadDataPkgErrMsg", this.jobId));
        }
        finally
        {
            logger.logCDXJobUploadTargetRetrieveDataPackageStop(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadFile</Name>
				<Source><![CDATA[
    private void downloadFile(str _uri, str _stagingFilePath)
    {
        WebClient webClient;
        try
        {
            webClient = new WebClient();
            webClient.DownloadFile(_uri, _stagingFilePath);
            this.dateUploaded = DateTimeUtil::utcNow();
        }
        finally
        {
            if (webClient)
            {
                webClient.Dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkDirPath</Name>
				<Source><![CDATA[
    private str getWorkDirPath()
    {
        str workDirSuffix = System.IO.Path::GetRandomFileName();
        str workDirName = strFmt('%1_%2', this.uploadSessionRecId, workDirSuffix);
        str workDirPath = System.IO.Path::Combine(this.baseWorkDirPath, workDirName);

        if (!System.IO.Directory::Exists(workDirPath))
        {
            System.IO.Directory::CreateDirectory(workDirPath);
        }

        return workDirPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    private void cleanUp()
    {
        System.Exception ex;
        try
        {
            if (this.baseWorkDirPath && System.IO.Directory::Exists(this.baseWorkDirPath))
            {
                System.IO.Directory::Delete(this.baseWorkDirPath, true);
            }
        }
        catch (ex)
        {
            logger.logCDXResourceCleanUpFailureWarning(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDataPackage</Name>
				<Source><![CDATA[
    private void applyDataPackage()
    {
        System.Exception ex;

        try
        {
            logger.logCDXJobUploadTargetApplyDataPackageStart();

            CLRObject dataFileCollection = this.dataPackage.get_DataFiles();
            int dataFileCount = dataFileCollection.get_Count();

            for (int i = 0; i < dataFileCount; ++i)
            {
                CLRObject dataFile_t = dataFileCollection.get_Item(i);
                Microsoft.Dynamics.Retail.CommerceDataExchange.DataFile dataFile = dataFile_t as Microsoft.Dynamics.Retail.CommerceDataExchange.DataFile;

                RetailCDXSubjobUploadTargetContext subjobContext = new RetailCDXSubjobUploadTargetContext(dataFile, this);

                subjobContext.execute();

                this.rowsAffected += subjobContext.paramRowsAffected();
            }
        }
        catch (ex)
        {
            logger.logCDXJobUploadTargetApplyDataPackageFailure(ex);
            throw error(strFmt("@Retail:ApplyUploadSessionErrMsg", this.paramJobID(), this.paramSession()));
        }
        finally
        {
            logger.logCDXJobUploadTargetApplyDataPackageStop(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUploadSession</Name>
				<Source><![CDATA[
    private void updateUploadSession(boolean _sessionStatus = true, str _message = '')
    {
        System.Exception ex;

        try
        {
            logger.logCDXJobUploadTargetUpdateSessionStart();

            RetailCDXUploadSession uploadSessionTable;

            ttsBegin;
            select forUpdate uploadSessionTable where uploadSessionTable.RecId == this.uploadSessionRecId;

            uploadSessionTable.Message = _message;
            uploadSessionTable.Schedule = this.scheduleRecId;
            this.paramCurrentTryCount(uploadSessionTable.TryCount + 1);
            uploadSessionTable.TryCount = this.paramCurrentTryCount();

            if (_sessionStatus)
            {
                uploadSessionTable.Status = RetailCDXUploadSessionStatus::Applied;
                uploadSessionTable.RowsAffected = int642int(this.rowsAffected);
                uploadSessionTable.DateUploaded = this.dateUploaded;
            }
            else
            {
                // only set status when the current status is not "Canceled"
                if (uploadSessionTable.Status != RetailCDXUploadSessionStatus::Canceled)
                {
                    if (uploadSessionTable.TryCount >= this.maxTryCount)
                    {
                        uploadSessionTable.Status = RetailCDXUploadSessionStatus::Canceled;
                    }
                    else
                    {
                        uploadSessionTable.Status = RetailCDXUploadSessionStatus::ApplyFailed;
                    }
                }
            }

            uploadSessionTable.update();

            ttsCommit;

            this.status = uploadSessionTable.Status;
        }
        catch (ex)
        {
            logger.logCDXJobUploadTargetUpdateSessionFailure(ex);
            throw error(strFmt("@Retail:CDXUploadTargetUpdateSessionErrMsg", this.paramJobID(), this.paramSession()));
        }
        finally
        {
            logger.logCDXJobUploadTargetUpdateSessionStop(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSessionBeApplied</Name>
				<Source><![CDATA[
    private boolean canSessionBeApplied()
    {
        RetailCDXUploadSession retailCDXUploadSession;

        select firstonly Status, RecId from retailCDXUploadSession
            where retailCDXUploadSession.RecId == this.uploadSessionRecId;

        if (retailCDXUploadSession.RecId == 0)
        {
            throw error(strFmt('@Retail:UploadSessionRecordNotFound', this.uploadSessionRecId));
        }

        this.status = retailCDXUploadSession.Status;

        return this.status == RetailCDXUploadSessionStatus::Uploaded || this.status == RetailCDXUploadSessionStatus::ApplyFailed;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>