<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationProcessorFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailDocumentOperationProcessorFactory</c> class is the factory class which is responsible for creating instance which extends RetailDocumentOperationProcessorBase.
/// </summary>
internal class RetailDocumentOperationProcessorFactory
{
    // Operation names
    internal const str EmptyOperationName = 'EmptyOperation';
    internal const str ReceivePurchaseOrderOperationName = 'ReceivePurchaseOrder';
    internal const str ReceiveTransferOrderOperationName = 'ReceiveTransferOrder';
    internal const str ShipTransferOrderOperationName = 'ShipTransferOrder';
    internal const str CreateTransferOrderOperationName = 'CreateTransferOrder';
    internal const str PickupCustomerOrderOperationName = 'PickupCustomerOrder';
    internal const str SaveInventoryAdjustmentOperationName = 'SaveInventoryAdjustment';
    internal const str PostInventoryAdjustmentOperationName = 'PostInventoryAdjustment';
    internal const str PostInventoryTransferOperationName = 'PostInventoryTransfer';
    internal const str CreateStockCountingOperationName = 'CreateStockCounting';
    internal const str SaveStockCountingOperationName = 'SaveStockCounting';
    internal const str PostStockCountingOperationName = 'PostStockCounting';
    internal const str CreatePurchaseOrderOperationName = 'CreatePurchaseOrder';
    internal const str SavePurchaseOrderOperationName = 'SavePurchaseOrder';
    internal const str CreateCustomerOrderOperationName = 'CreateCustomerOrder';
    internal const str CancelCustomerOrderOperationName = 'CancelCustomerOrder';
    internal const str AdjustInventoryServiceOperationName = 'AdjustInventoryService';
    internal const str UpdateProductWarehouseAvailabilityOperationName = 'UpdateProductWarehouseAvailability';

    private static Map namedOperationNameProcessorClassNumberMap = RetailDocumentOperationProcessorFactory::getDefaultNamedOperationNameProcessorClassNumberMap();
    private const str StaticConstructMethodName = 'construct';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create processor instance
    /// </summary>
    /// <param name = "_params">
    /// Params of operation
    /// </param>
    /// <param name = "_processorClassNumber">
    /// The class number of processor
    /// </param>
    /// <returns>
    /// An instance of the processor specified by the class number. 
    /// </returns>
    internal static RetailDocumentOperationProcessorBase createProcessor(RetailDocumentOperationProcessorParameters _params, Integer _processorClassNumber)
    {   
        RetailDocumentOperationProcessorBase retailDocumentOperationProcessorBase = RetailDocumentOperationProcessorFactory::callStaticConstruct(
                _processorClassNumber,
                _params
                ) as RetailDocumentOperationProcessorBase;

        return retailDocumentOperationProcessorBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOperationRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if operation is registered
    /// </summary>
    /// <param name = "_operationName">
    /// Name of the operation
    /// </param>
    /// <returns>
    /// true if operation is registered, otherwise false
    /// </returns>
    /// <remarks>
    /// This method is used to check if the operation is registered.
    /// </remarks>
    internal static boolean isOperationRegistered(str _operationName)
    {
        return RetailDocumentOperationProcessorFactory::namedOperationNameProcessorClassNumberMap.exists(_operationName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessorClassNumberByOperationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get class number from operation name
    /// </summary>
    /// <param name = "_operationName">
    /// Name of the operation
    /// </param>
    /// <returns>
    /// Class number if operation is registered. Otherwise throw exception.
    /// </returns>
    /// <remarks>
    /// This method is used to get class number from operation name.
    /// </remarks>
    internal static Integer getProcessorClassNumberByOperationName(RetailDocumentOperationOperationName _operationName)
    {
        if (RetailDocumentOperationProcessorFactory::isOperationRegistered(_operationName))
        {
            return RetailDocumentOperationProcessorFactory::namedOperationNameProcessorClassNumberMap.lookup(_operationName);
        }
        else
        {
            throw error("@RetailDocumentOperationLabels:ErrorProcessorClassDoesNotExist");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RegisterOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Register operation with operation name and class number
    /// </summary>
    /// <param name = "_operationName">
    /// Name of the operation
    /// </param>
    /// <param name = "_operationClassNum">
    /// Class number of the operation
    /// </param>
    /// <remarks>
    /// This method is used to register operation with operation name and class number.
    /// </remarks>
    internal static void RegisterOperation(RetailDocumentOperationOperationName _operationName, Integer _operationClassNum)
    {
        Map _namedOperationNameProcessorClassNumberMap = RetailDocumentOperationProcessorFactory::namedOperationNameProcessorClassNumberMap;

        if (RetailDocumentOperationProcessorFactory::isOperationRegistered(_operationName))
        {
            throw error("@RetailDocumentOperationLabels:ErrorOperationAlreadyRegistered");
        }
        else
        {
            _namedOperationNameProcessorClassNumberMap.insert(_operationName, _operationClassNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callStaticConstruct</Name>
				<Source><![CDATA[
    private static RetailDocumentOperationProcessorBase callStaticConstruct(Integer _classNumber, RetailDocumentOperationProcessorParameters _retailDocumentOperationProcessorParameters)
    {
        DictClass                                       dict;
        RetailDocumentOperationProcessorBase            retailDocumentOperationProcessorBase;

        dict = new DictClass(_classNumber);
        if (dict == null)
        {
            throw error(enum2Str(RetailDocumentOperationProcessingErrorCode::ProcessorClassDoesNotExist));
        }

        try
        {
            retailDocumentOperationProcessorBase = dict.callStatic(StaticConstructMethodName, _retailDocumentOperationProcessorParameters) as RetailDocumentOperationProcessorBase;
        }
        catch (Exception::MethodNotFound)
        {
            throw error(enum2Str(RetailDocumentOperationProcessingErrorCode::ProcessorMissingStaticConstructor));
        }

        return retailDocumentOperationProcessorBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultNamedOperationNameProcessorClassNumberMap</Name>
				<Source><![CDATA[
    private static Map getDefaultNamedOperationNameProcessorClassNumberMap()
    {
        Map defaultNamedOperationNameProcessorClassNumberMap = new Map(Types::String, Types::Integer);

        defaultNamedOperationNameProcessorClassNumberMap.insert(EmptyOperationName, classNum(RetailDocumentOperationProcessorEmptyProcessor));
        defaultNamedOperationNameProcessorClassNumberMap.insert(ReceivePurchaseOrderOperationName, classNum(RetailDocumentOperationProcessorReceivePurchaseOrder));
        defaultNamedOperationNameProcessorClassNumberMap.insert(ReceiveTransferOrderOperationName, classNum(RetailDocumentOperationProcessorReceiveTransferOrder));
        defaultNamedOperationNameProcessorClassNumberMap.insert(ShipTransferOrderOperationName, classNum(RetailDocumentOperationProcessorShipTransferOrder));
        defaultNamedOperationNameProcessorClassNumberMap.insert(CreateTransferOrderOperationName, classNum(RetailDocumentOperationProcessorCreateTransferOrder));
        defaultNamedOperationNameProcessorClassNumberMap.insert(CreatePurchaseOrderOperationName, classNum(RetailDocumentOperationProcessorCreatePurchaseOrder));
        defaultNamedOperationNameProcessorClassNumberMap.insert(SavePurchaseOrderOperationName, classNum(RetailDocumentOperationProcessorSavePurchaseOrder));
        defaultNamedOperationNameProcessorClassNumberMap.insert(PickupCustomerOrderOperationName, classNum(RetailDocumentCustomerOrderPickupProcessor));
        defaultNamedOperationNameProcessorClassNumberMap.insert(SaveInventoryAdjustmentOperationName, classNum(RetailDocumentOperationProcessorSaveInventoryAdjustment));
        defaultNamedOperationNameProcessorClassNumberMap.insert(PostInventoryAdjustmentOperationName, classNum(RetailDocumentOperationProcessorPostInventoryAdjustment));
        defaultNamedOperationNameProcessorClassNumberMap.insert(PostInventoryTransferOperationName, classNum(RetailDocumentOperationProcessorPostInventoryTransfer));
        defaultNamedOperationNameProcessorClassNumberMap.insert(CreateStockCountingOperationName, classNum(RetailDocumentOperationProcessorSaveStockCounting));
        defaultNamedOperationNameProcessorClassNumberMap.insert(SaveStockCountingOperationName, classNum(RetailDocumentOperationProcessorSaveStockCounting));
        defaultNamedOperationNameProcessorClassNumberMap.insert(PostStockCountingOperationName, classNum(RetailDocumentOperationProcessorPostStockCounting));
        defaultNamedOperationNameProcessorClassNumberMap.insert(CreateCustomerOrderOperationName, classNum(RetailOperationProcessorCreateCustomerOrder));
        defaultNamedOperationNameProcessorClassNumberMap.insert(CancelCustomerOrderOperationName, classNum(RetailOperationProcessorCancelCustomerOrder));
        defaultNamedOperationNameProcessorClassNumberMap.insert(AdjustInventoryServiceOperationName, classNum(RetailOperationProcessorAdjustInventoryService));
        defaultNamedOperationNameProcessorClassNumberMap.insert(UpdateProductWarehouseAvailabilityOperationName, classNum(RetailOperationProcessorUpdateProductWarehouseAvailabilityService));

        return defaultNamedOperationNameProcessorClassNumberMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>