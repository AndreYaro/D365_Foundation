<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EuSalesListCopyLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>EuSalesListCopyLines</c> class implements different ways of copying <c>EUSalesList</c> records.
/// </summary>
class EuSalesListCopyLines extends RunBase
{
    EUSalesList euSalesList;
    NoYes                           correction;
    EUSalesListCopyLinesFunction    function;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes

        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEUR00011, funcName());

        str featureReference = GlobalizationInstrumentationHelper::getFeatureRefByLegalEntityCountryRegion([
            [#isoPL, GlobalizationConstants::FeatureReferencePL00035],
            [#isoCZ, GlobalizationConstants::FeatureReferenceCZ00020],
            [#isoHU, GlobalizationConstants::FeatureReferenceHU00020],
            [#isoLV, GlobalizationConstants::FeatureReferenceLV00007]
        ]);
        if (featureReference)
        {
            GlobalizationInstrumentationHelper::featureRun(featureReference, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDuplicateEUSalesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of an <c>EUSalesList</c> buffer, optionally marking it as correction and optionally reversing the amounts.
    /// </summary>
    /// <param name="_euSalesList">
    /// The <c>EUSalesList</c> buffer from which to make the copy.
    /// </param>
    /// <param name="_dispatchId">
    /// The <c>ListDispatchId</c> used for the new copy.
    /// </param>
    /// <param name="_seqNum">
    /// The <c>ListSeqNum</c> used for the new copy.
    /// </param>
    /// <param name="_correction">
    /// The <c>Correct</c> value used for the new copy.
    /// If <c>NoYes::Yes</c> is passed, the new copy also is set to status <c>Included</c>.
    /// </param>
    /// <param name="_reverse">
    /// A Boolean value that indicates whether to inverse the amounts on the new copy; optional.
    /// </param>
    /// <returns>
    /// A copy of the supplied buffer.
    /// </returns>
    /// <remarks>
    /// The caller of this method is responsible for calling <c>insert()</c> on the newly copied buffer.
    /// </remarks>
    protected EUSalesList getDuplicateEUSalesList(EUSalesList _euSalesList, ListDispatchId _dispatchId, ListSeqNum _seqNum, Correct _correction, boolean _reverse = false)
    {
        #ISOCountryRegionCodes
        EUSalesList euSalesListNew;

        euSalesListNew.data(_euSalesList);
        euSalesListNew.DispatchId   = _dispatchId;
        euSalesListNew.SeqNum       = _seqNum;
        euSalesListNew.Corrected    = _correction;
        if (_correction)
        {
            euSalesListNew.Status   = ListStatus::Include;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            euSalesListNew.OriginalRecId = _euSalesList.RecId;
            euSalesListNew.ClosingDate   = dateNull();
        }

        if (_reverse)
        {
            euSalesListNew.AmountMST = -euSalesListNew.AmountMST;
            euSalesListNew.ServiceAmountMST = -euSalesListNew.ServiceAmountMST;
            euSalesListNew.InvestmentAmountMST = -euSalesListNew.InvestmentAmountMST;
            euSalesListNew.NotAssignedAmountMST = -euSalesListNew.NotAssignedAmountMST;
        }

        return euSalesListNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEUSalesList</Name>
				<Source><![CDATA[
    EUSalesList parmEUSalesList(EUSalesList _euSalesList = euSalesList)
    {
        euSalesList = _euSalesList;
        return euSalesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFunction</Name>
				<Source><![CDATA[
    EUSalesListCopyLinesFunction parmFunction(EUSalesListCopyLinesFunction _function = function)
    {
        function = _function;
        return function;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        FormDataSource  formDataSource = FormDataUtil::getFormDataSource(euSalesList);
        EUSalesList     euSalesListLocal;
        ListDispatchId  dispatchId;
        ListSeqNum      seqNum;

        correction = function == EUSalesListCopyLinesFunction::ToIncluded || function == EUSalesListCopyLinesFunction::ToIncludedWithReversal;

        ttsbegin;
        dispatchId = NumberSeq::newGetNum(IntrastatParameters::numRefListDispatchId(),true).num();
        seqNum     = EUSalesList::maxNum(dispatchId);

        for (euSalesListLocal = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : formDataSource.cursor(); euSalesListLocal; euSalesListLocal = formDataSource.getNext())
        {
            seqNum++;
            this.getDuplicateEUSalesList(euSalesListLocal, dispatchId, seqNum, correction).insert();

            if (function == EUSalesListCopyLinesFunction::ToIncludedWithReversal)
            {
                seqNum++;
                this.getDuplicateEUSalesList(euSalesListLocal, dispatchId, seqNum, correction, true).insert();
            }
        }

        formDataSource.research();
        ttscommit;

        info("@GLS221159");
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        // Does not support or need pack/unpack
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns label description of the <c>EUSalesListCopyLines</c> class.
    /// </summary>
    /// <returns>
    /// The string type value.
    /// </returns>
    public static Name description()
    {
        return "@SYS24020";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        EUSalesListCopyLines euSalesListCopyLines = new EUSalesListCopyLines();

        if (! _args || ! _args.record() || _args.dataset() != tableNum(EUSalesList))
        {
            throw error(Error::missingRecord(funcName()));
        }
        euSalesListCopyLines.parmEUSalesList(_args.record());
        euSalesListCopyLines.parmFunction(_args.parmEnum());

        euSalesListCopyLines.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>