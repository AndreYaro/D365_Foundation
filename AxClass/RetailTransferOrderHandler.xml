<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransferOrderHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransferOrderHandler</c> class creates a transfer order.
/// </summary>
class RetailTransferOrderHandler
{
    InventTransferTable inventTransferTable;
    InventTransferLine  inventTransferLine;
    InventTransferLine_IN inventTransferLineIN;
    InventLocation      inventLocationFrom;
    InventLocation      inventLocationTo;
    Qty                 qty;

    Common              common;
    ItemId              itemId;
    InventDim           inventDim;
    InventTransferCombinedLineDlvCreator inventTransferCombinedLineDlvCreator;
    Map                 packageLinkedLines;

    RetailBuyersPushLine retailBuyersPushLine;

    // <GIN>
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTransferLine</Name>
				<Source><![CDATA[
    // </GIN>

    /// <summary>
    /// Inserts a record in <c>InventTransferLine</c> table.
    /// </summary>
    /// <param name="_isCrossDock">
    /// A boolean parameter that indicates whether the transfer line
    /// should be marked with the cross-dock flag.
    /// </param>
    public void createTransferLine(boolean _isCrossDock = false)
    {
        if (!InventTransferCombinedLineDlvCreator)
        {
            inventTransferCombinedLineDlvCreator = InventTransferCombinedLineDlvCreator::construct();
            inventTransferCombinedLineDlvCreator.parmPackageLinkedLines(packageLinkedLines);
        }

        inventTransferCombinedLineDlvCreator.createOrUpdatePackageLinkOnTransferLine(inventTransferLine);

        inventTransferLine.insert();

        if (_isCrossDock)
        {
            inventTransferLine.whsMarkAsCrossDock();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]))
        {
            this.setTransferLineFiscalInfo_BR();
        }

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.createTransferLine_IN(_isCrossDock);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts an <c>InventTransferLine_IN</c> record for the current <c>InventTransferLine</c> record.
    /// </summary>
    /// <remarks>
    /// The <c>InventTransferLine_IN</c> table is India-specific.
    /// </remarks>
    private void createTransferLine_IN(boolean _isCrossDock = false)
    {
        this.setTransferLine_IN(_isCrossDock);

        TaxModelDocLineExtensionController_IN::insertTaxExtensionRecord(inventTransferLineIN, inventTransferLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates a transfer order.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Upadte Cancelation error.
    /// </exception>
    public void createTransferTable()
    {
        if (! inventTransferTable.validateWrite())
            throw error("@SYS18447");

        // <GBR>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]))
        {
            inventTransferTable.packInventTransferTableFiscalInfo_BR(
                inventTransferTable.inventTransferTableFiscalInfo_BR());
        }
        // </GBR>

        inventTransferTable.insert();

        info(strfmt("@RET1352", inventTransferTable.TransferId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transfer price.
    /// </summary>
    /// <returns>
    /// Transfer price.
    /// </returns>
    /// <remarks>
    /// This method is used to set the InventTransferLine.QtyTransfer field when
    /// PriceType_IN is set to "Transfer price".
    /// </remarks>
    public TransferPrice_IN  getTransferPrice_IN()
    {
        return TransferPrice_IN::getTransferPrice_IN(inventTransferLine.TransferId,
                                                     inventTransferLine.ItemId,
                                                     inventTransferLine.InventDimId,
                                                     inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransferLine</Name>
				<Source><![CDATA[
    [SysObsolete('Unused method removed in AX 2012 R3', false, 31\01\2016)]
    public InventTransferLine inventTransferLine()
    {
        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemCostPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item cost price.
    /// </summary>
    /// <returns>
    /// Cost price of the item.
    /// </returns>
    /// <remarks>
    /// This method is used to set the InventTransferLine.UnitPrice_IN field when
    /// PriceType_IN is set to "Cost price".
    /// </remarks>
    private CostPrice itemCostPrice_IN()
    {
        CostPrice    priceLoc;
        CostPrice    costPrice;

        priceLoc    = InventSum::find(inventTransferLine.ItemId, inventTransferLine.InventDimId).costPricePcs();
        costPrice   = CurrencyExchangeHelper::price(priceLoc, inventTransferLine.inventTransferLine_IN().CurrencyCode);

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemTransferPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item transfer price.
    /// </summary>
    /// <returns>
    /// Transfer price of the item.
    /// </returns>
    /// <remarks>
    /// This method is used to set the InventTransferLine.UnitPrice_IN field when
    /// PriceType_IN is set to "Transfer price".
    /// </remarks>
    private Price itemTransferPrice_IN()
    {
        TransferPrice_IN          transPrice;
        Price                     itemPrice;
        CostPrice                 costPrice;
        ExchRate                  exchRate;
        UnitOfMeasureSymbol       unitIDFrom;
        Price                     transferPrice;
        real                      convfactor;
        CurrencyCode              currencyCode;
        ExchangeRateType          exchangeRateType;
        ExchangeRateTypeRecId     exchangeRateTypeRecId;
        ExchangeRateDisplayFactor exchangeRateDisplayFactor;

        transPrice    = this.getTransferPrice_IN();
        transferPrice = transPrice.Price;
        convfactor    = 1;
        if (transPrice)
        {
            unitIDFrom = transPrice.Unit;

            EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(inventTransferLine.ItemId,
                                                                                                                                      inventTransferLine.InventDimId,
                                                                                                                                      unitIDFrom,
                                                                                                                                      inventTransferLineIN.UnitId);

            if (unitIDFrom != inventTransferLineIN.UnitId)
            {
                if (!ecoResProductUnitConverter.canValueBeConverted())
                {
                    throw error(strFmt("@SYS28690", unitIDFrom, inventTransferLineIN.UnitId));
                }

            }

            costPrice = this.itemCostPrice_IN();
            exchRate  = 1;

            if (transPrice && transPrice.Currency != Ledger::accountingCurrency())
            {
                currencyCode = Ledger::accountingCurrency();

                exchangeRateTypeRecId = Ledger::defaultExchangeRateType(CompanyInfo::findDataArea(curext()).RecId);

                exchangeRateType = ExchangeRateType::find(exchangeRateTypeRecId);

                exchangeRateDisplayFactor = ExchangeRateCurrencyPair::getExchangeRateDisplayFactor(transPrice.Currency, currencyCode, exchangeRateType.RecId, true);

                exchRate = ExchangeRateHelper::exchRate(transPrice.Currency) / InventTransferLine::getNumericDisplayFactor(exchangeRateDisplayFactor);

                inventTransferLineIN.CurrencyCode = transPrice.Currency;
            }

            if (transPrice.MethodPriceTrans_IN == MethodPriceTrans_IN::FixedPrice)
            {
                itemPrice = transferPrice * exchRate;
            }
            else if (transPrice.MethodPriceTrans_IN == MethodPriceTrans_IN::CostPlus)
            {
                itemPrice = (costPrice + (costPrice * transferPrice / 100)) * exchRate ;
            }

            itemPrice = CurrencyExchangeHelper::price(itemPrice, inventTransferLineIN.CurrencyCode);
            itemPrice = ecoResProductUnitConverter.convertValue(itemPrice);
        }

        return itemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    public Common parmCommon(Common _common = common)
    {
        common = _common;

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim(InventDim    _inventDim = inventDim)
    {
        inventDim = _inventDim;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationFrom</Name>
				<Source><![CDATA[
    public InventLocation parmInventLocationFrom(InventLocation _inventLocationFrom = inventLocationFrom)
    {
        inventLocationFrom = _inventLocationFrom;

        return inventLocationFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationTo</Name>
				<Source><![CDATA[
    public InventLocation parmInventLocationTo(InventLocation _inventLocationTo = inventLocationTo)
    {
        inventLocationTo = _inventLocationTo;

        return inventLocationTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferTable</Name>
				<Source><![CDATA[
    public InventTransferTable parmInventTransferTable(InventTransferTable _inventTransferTable = inventTransferTable)
    {
        inventTransferTable = _inventTransferTable;

        return inventTransferTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = ItemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public Qty parmQty(Qty _qty = qty)
    {
        qty = _qty;

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ShipDate and ReceiveDate for a transfer order and initialises the transferorder line.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Processing cancellation error.
    /// </exception>
    public void setTransferLine()
    {
        InventTable             inventTable         = InventTable::find(itemId);

        inventTransferLine.initValue();
        inventTransferLine.ItemId           = inventTable.ItemId;

        if (!inventTransferLine.validateField(fieldnum(InventTransferLine, ItemId)))
        {
            throw error("@SYS107513");
        }

        inventTransferLine.initFromInventTable(inventTable);

        inventTransferLine.InventDimId              = inventDim.inventDimId;

        inventTransferLine.initFromInventTransferTable(inventTransferTable, true);
        inventTransferLine.LineNum                  = InventTransferLine::lastLineNum(inventTransferLine.TransferId) + 1.0;
        inventTransferLine.QtyTransfer              = qty;

        inventTransferLine.RetailReplenishRefTableId   = common.TableId;
        inventTransferLine.RetailReplenishRefRecId     = common.RecId;

        inventTransferTable                         = inventTransferTable::find(inventTransferLine.TransferId, true);

        if (inventTransferLine.ShipDate < inventTransferTable.ShipDate)
        {
            inventTransferTable.ShipDate    = inventTransferLine.ShipDate;
            inventTransferTable.update();
        }

        if (inventTransferLine.ReceiveDate > inventTransferTable.ReceiveDate)
        {
            inventTransferTable.ReceiveDate = inventTransferLine.ReceiveDate;
            inventTransferTable.update();
        }

        InventMovement::bufferSetRemainQty(inventTransferLine,InventMovSubType::None);
        InventMovement::bufferSetRemainQty(inventTransferLine,InventMovSubType::TransferOrderTransitFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransferLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets InventTransferLine_IN
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Processing cancellation error.
    /// </exception>
    public void setTransferLine_IN(boolean _isCrossDock = false)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer)
        {
            inventTransferLineIN = inventTransferLine.inventTransferLine_IN();
            inventTransferLineIN.initValue();
            inventTransferLineIN.UnitId       = InventTableModule::find(inventTransferLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
            inventTransferLineIN.PriceType    = RetailParameters::find().DefaultPriceType_IN;
            inventTransferLineIN.VATPriceType = inventTransferLineIN.PriceType;

            if (_isCrossDock && retailBuyersPushLine)
            {
                inventTransferLineIN.UnitPrice = PurchLine::findRecId(retailBuyersPushLine.RefRecId).PurchPrice;
            }
            else if (inventTransferLine.inventTransferTable().StockTransferCostPriceHandlingImprovement_IN)
            {
                inventTransferLineIN.recalculateStockTransferValue(inventTransferLine, inventTransferLine.inventDim());
            }
            else if (inventTransferLineIN.PriceType == PriceType_IN::CostPrice)
            {
                inventTransferLineIN.UnitPrice = this.itemCostPrice_IN();
            }
            else if (inventTransferLineIN.PriceType == PriceType_IN::TransferPrice)
            {
                inventTransferLineIN.UnitPrice = this.itemTransferPrice_IN();
            }

            inventTransferLineIN.NetAmount = InventTransferLineIN.netAmount(inventTransferLine);
            inventTransferLineIN.AssessableValueTransactionCurrency = inventTransferLineIN.NetAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransferLineFiscalInfo_BR</Name>
				<Source><![CDATA[
    private void setTransferLineFiscalInfo_BR()
    {
        InventTransferTableFiscalInfo_BR inventTransferTableFiscalInfo_BR;
        InventTransferLineFiscalInfo_BR  inventTransferLineFiscalInfo_BR;

        select inventTransferTableFiscalInfo_BR
            where inventTransferTableFiscalInfo_BR.InventTransferTable == inventTransferTable.RecId;

        if (inventTransferTableFiscalInfo_BR.InventTransferOrderType != InventTransferOrderType_BR::WarehouseTransfer)
        {
            select inventTransferLineFiscalInfo_BR
                where inventTransferLineFiscalInfo_BR.InventTransferLine == inventTransferLine.RecId;

            ttsBegin;

            // Set the transfer order additional values needed by Brazil
            inventTransferLineFiscalInfo_BR.selectForUpdate(true);
            inventTransferLineFiscalInfo_BR.setShipDefaultCFOP_BR();
            inventTransferLineFiscalInfo_BR.setShipTaxGroupsFromCFOP();
            inventTransferLineFiscalInfo_BR.setPriceFromInventDim();

            // Check if it's a transfer order between Fiscal establishments
            if (inventTransferTableFiscalInfo_BR.isFiscalEstablishmentOrder())
            {
                // Adjust the CFOP, tax groups and price accordingly to the Fiscal establishments
                inventTransferLineFiscalInfo_BR.ReceiveCFOPTable_BR = InventTransferOrderCFOPMapping_BR::getReceiveCFOP(inventTransferLineFiscalInfo_BR.ShipCFOPTable_BR);
                inventTransferLineFiscalInfo_BR.setReceiveTaxGroupsFromCFOP();
                inventTransferLineFiscalInfo_BR.ReceivePrice = inventTransferLineFiscalInfo_BR.ShipPrice;
            }

            inventTransferLineFiscalInfo_BR.update();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransferTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialises the transfer order with location and date fields.
    /// </summary>
    public void setTransferTable()
    {
        RefTableId      refTableId;
        RefRecId        refRecId;
        PurchTable      purchTable;
        RetailBuyersPushTable retailBuyersPushTable;

        inventTransferTable.initValue();
        inventTransferTable.TransferId                  = InventTransferTable::numberSeq().num();
        inventTransferTable.InventLocationIdTo          = inventLocationTo.InventLocationId;
        inventTransferTable.InventLocationIdFrom        = inventLocationFrom.InventLocationId;
        inventTransferTable.InventLocationIdTransit     = InventLocation::find(inventTransferTable.InventLocationIdFrom).InventLocationIdTransit;

        inventTransferTable.initDeliveryMode();

        switch (common.TableId)
        {
            case tablenum(PurchLine) :
                refTableId  = tablenum(PurchTable);
                purchTable  = PurchTable::find(common.(fieldnum(PurchLine, PurchId)));
                refRecId    = purchTable.RecId;
                break;
    
            case tablenum(RetailBuyersPushLineQty) :
                refTableId  = tablenum(RetailBuyersPushTable);
                retailBuyersPushTable  = RetailBuyersPushTable::find(common.(fieldnum(RetailBuyersPushLineQty, BuyersPushId)));
                purchTable  = PurchTable::find(retailBuyersPushTable.PurchId);
                refRecId    = retailBuyersPushTable.RecId;
                break;
    
            default :
                break;
        }
    
        if (purchTable.CrossDockingDate != dateNull())
        {
            inventTransferTable.ShipDate        = purchTable.CrossDockingDate;

            if (inventTransferTable.ShipDate > inventTransferTable.ReceiveDate)
            {
                inventTransferTable.ReceiveDate = inventTransferTable.ShipDate;
            }
        }

        inventTransferTable.RetailReplenishRefTableId  = refTableId;
        inventTransferTable.RetailReplenishRefRecId    = refRecId;

        inventTransferTable.initFromAddress();
        inventTransferTable.initToAddress();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            inventTransferTable.TransferType_IN = RetailParameters::find().DefaultTransferType_IN;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailTransferOrderHandler construct()
    {
        return new RetailTransferOrderHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialises the <c>RetailTransferOrderHandler</c> class with fromLocation, toLocation and item details.
    /// </summary>
    /// <param name="_common">
    /// An instance of Table object.
    /// </param>
    /// <param name="_inventLocationFrom">
    /// An instance of <c>InventLocation</c> table.
    /// </param>
    /// <param name="_inventLocationTo">
    /// An instance of <c>InventLocation</c> table.
    /// </param>
    /// <param name="_itemId">
    /// Reference for the Item number.
    /// </param>
    /// <param name="_inventDim">
    /// An instance of <c>InventDim</c> table.
    /// </param>
    /// <param name="_qty">
    /// Value for the quantity.
    /// </param>
    /// <param name="_packageLinkedLines">
    /// A map holding the transfer lines that have already been linked to a package
    /// </param>
    /// <returns>
    /// An instance of <c>RetailTransferOrderHandler</c> class.
    /// </returns>
    public static RetailTransferOrderHandler newTransfer(Common            _common,
                                                      InventLocation    _inventLocationFrom,
                                                      InventLocation    _inventLocationTo,
                                                      ItemId            _itemId,
                                                      InventDim         _inventDim,
                                                      Qty               _qty,
                                                      Map               _packageLinkedLines = null)
    {
        RetailTransferOrderHandler     fSHTransferOrderHandler = RetailTransferOrderHandler::construct();

        fSHTransferOrderHandler.parmCommon(_common);
        fSHTransferOrderHandler.parmInventLocationFrom(_inventLocationFrom);
        fSHTransferOrderHandler.parmInventLocationTo(_inventLocationTo);
        fSHTransferOrderHandler.parmItemId(_itemId);
        fSHTransferOrderHandler.parmInventDim(_inventDim);
        fSHTransferOrderHandler.parmQty(_qty);

        fSHTransferOrderHandler.parmPackageLinkedLines(_packageLinkedLines);

        return fSHTransferOrderHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferLine</Name>
				<Source><![CDATA[
    public InventTransferLine parmInventTransferLine(InventTransferLine _inventTransferLine = inventTransferLine)
    {
        inventTransferLine = _inventTransferLine;

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackageLinkedLines</Name>
				<Source><![CDATA[
    public Map parmPackageLinkedLines(Map _packageLinkedLines = packageLinkedLines)
    {
        packageLinkedLines = _packageLinkedLines;

        return packageLinkedLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailBuyersPushLine</Name>
				<Source><![CDATA[
    public RetailBuyersPushLine parmRetailBuyersPushLine(RetailBuyersPushLine _retailBuyersPushLine = retailBuyersPushLine)
    {
        retailBuyersPushLine = _retailBuyersPushLine;

        return retailBuyersPushLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiveTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles receipt of transfer line.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// The inventory transfer line.
    /// </param>
    /// <param name="_inventDimReceive">
    /// The inventory dimension for receving transfer line.
    /// </param>
    /// <param name="_qtyReceive">
    /// The quantity to receive.
    /// </param>
    public static void receiveTransferLine(
        InventTransferLine  _inventTransferLine,
        InventDim           _inventDimReceive,
        InventQty           _qtyReceive)
    {
        ttsbegin;
        InventTransferMultiReceive inventTransferMultiReceive = InventTransferMultiReceive::construct();
        RunBaseMultiParm::initParm(inventTransferMultiReceive);
        InventTransferParmTable         inventTransferParmTable;

        inventTransferParmTable.TransferId       = _inventTransferLine.TransferId;
        inventTransferParmTable.ParmId = inventTransferMultiReceive.parmId();
        inventTransferMultiReceive.initParmBuffer(inventTransferParmTable);

        inventTransferParmTable.ShipUpdateQty    = InventTransferShipUpdateQty::All;
        inventTransferParmTable.ReceiveUpdateQty = InventTransferReceiveUpdateQty::Registered;
        inventTransferParmTable.LineNum          = inventTransferParmTable::lastLineNum(inventTransferParmTable.ParmId) + 1;
        inventTransferParmTable.JobStatus        = ParmJobStatus::Executed;
        inventTransferParmTable.ExecutedDateTime = DateTimeUtil::utcNow();
        inventTransferParmTable.insert(false);

        InventTransferParmLine inventTransferParmLine;

        inventTransferParmLine.initFromInventTransferLine(_inventTransferLine);
        inventTransferParmLine.ParmId               = inventTransferParmTable.ParmId;
        inventTransferParmLine.TransferId           = _inventTransferLine.TransferId;
        inventTransferParmLine.InventTransId        = _inventTransferLine.InventTransIdReceive;
        inventTransferParmLine.LineNum              = InventTransferParmTable::lastLineNum(inventTransferParmTable.ParmId) + 1;
        inventTransferParmLine.InventTransIdTransit = _inventTransferLine.InventTransIdTransitFrom;
        inventTransferParmLine.QtyReceiveNow           = _qtyReceive;

        InventDim inventDimReceive;
        inventDimReceive.data(_inventDimReceive);
        if (WHSInventEnabled::exist(_inventTransferLine.ItemId) && inventDimReceive.wmsLocation().isWHSEnabled())
        {
            //clear lp if we are on non-lp location - we don't need to opposite combination since registration should have added the lp
            if (inventDimReceive.LicensePlateId && !inventDimReceive.wmsLocation().whsLocationIsLPControlled())
            {
                inventDimReceive.LicensePlateId = '';
                inventDimReceive = InventDim::findOrCreate(inventDimReceive);
            }
        }
        inventTransferParmLine.InventDimId = inventDimReceive.inventDimId;

        inventTransferParmLine.insert();

        inventTransferMultiReceive.runUpdate(inventTransferParmTable);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles registration of the retail purchase/transfer line.
    /// </summary>
    /// <param name="_line">
    /// The inventory purchase/transfer line.
    /// </param>
    /// <param name="_inventDimRegister">
    /// The new inventory dimensions.
    /// </param>
    /// <param name="_registerQty">
    /// The quantity of the transfer line.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Inventory transaction is changed.
    /// </exception>
    public static void registerTransferLine(
        Common             _line,
        InventDim          _inventDimRegister,
        InventQty          _registerQty,
        ItemId             _itemId)
    {
        PurchLine purchLine;
        if (_line is PurchLine)
        {
            purchLine = _line as PurchLine;
        }

        // For the non-stocked items, inventory transactions are not applicable, should register as non-stocked product with purchase unit.
        if (purchLine && !purchLine.isStocked())
        {
            PurchQty purchQty = _registerQty;
            InventUnitId inventUnit = purchLine.inventTable().inventUnitId();
            if (purchLine.PurchUnit != inventUnit)
            {
                purchQty = InventTableModule::unitConvert(purchLine.ItemId, ModuleInventPurchSales::Purch, inventUnit, _registerQty, purchLine.InventDimId);
            }
            PurchNonStockedRegistrationHelper purchNonStockedRegistrationHelper = PurchNonStockedRegistrationHelper::newFromPurchLine(purchLine);
            purchNonStockedRegistrationHelper.synchronizePendingRegistration(purchQty, false);
            purchNonStockedRegistrationHelper.register(purchQty);
            return;
        }

        InventDim                       inventDimRegister;
        InventDimParm                   inventDimParmTransferDim;

        ttsbegin;
        InventMovement inventMovement = InventMovement::construct(_line, InventMovSubType::TransferOrderTo);
        inventDimRegister.data(_inventDimRegister);

        //we must create a license plate if we are receiving into a licensePlate controlled location
        if (WHSInventEnabled::exist(_itemId) && inventDimRegister.wmsLocation().isWHSEnabled())
        {
            inventDimRegister = RetailTransferOrderHandler::ensureValidLPAndLocationCombination(inventDimRegister);
        }

        //used for searching out the transactions to update
        inventDimParmTransferDim.initDimTransferReceipt(_inventDimRegister);

        //clear lp since we don't know if we have it in the transactions we select to update
        inventDimParmTransferDim.LicensePlateFlag   = NoYes::No;

        //registration will select transactions to update
        InventUpd_Registered inventUpd_Registered = InventUpd_Registered::newParameters(inventMovement,
                                                                  inventDimRegister,
                                                                  inventDimParmTransferDim,
                                                                  inventDimRegister,
                                                                  inventDimParmTransferDim,
                                                                  _registerQty);
        inventUpd_Registered.updateNow();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureValidLPAndLocationCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures valid license plate and location profile combination.
    /// </summary>
    /// <param name = "_inventDim">The dimensions to validate.</param>
    /// <returns>The valid inventory dimensions.</returns>
    internal static InventDim ensureValidLPAndLocationCombination(InventDim _inventDim)
    {
        InventDim inventDimValid;

        inventDimValid.data(_inventDim);

        //we must create a license plate since we are receiving into a licensePlate controlled location
        //create a on-the-fly lp if one is not passed and needed
        if (!inventDimValid.LicensePlateId && inventDimValid.wmsLocation().whsLocationIsLPControlled())
        {
            WHSLicensePlate licensePlate = WHSLicensePlate::createLicensePlate(WHSLicensePlate::generateLicensePlateIdNoItem(), true);
            inventDimValid.LicensePlateId = licensePlate.LicensePlateId;
            inventDimValid = InventDim::findOrCreate(inventDimValid);
        }

        //clear lp if we are on non-lp location
        else if (inventDimValid.LicensePlateId && !inventDimValid.wmsLocation().whsLocationIsLPControlled())
        {
            inventDimValid.LicensePlateId = '';
            inventDimValid = InventDim::findOrCreate(inventDimValid);
        }

        return inventDimValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDimForReceivingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles registration of the new inventory dimensions record for receiving transfer/purchase order line.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// The inventory transfer line.
    /// </param>
    /// <param name="_inventStatus">
    /// The quantity of the transfer line.
    /// </param>
    /// <param name="_receivingLocationId">
    /// The WHS receiving location id.
    /// </param>
    /// <param name="_licensePlateId">
    /// The license plate id.
    /// </param>
    /// <returns>
    /// Inventory dimensions.
    /// </returns>
    public static InventDim createInventDimForReceivingLine(
            ItemId _itemId,
            InventTransId _inventTransIdReceive,
            WHSInventStatusId _inventStatusId = '',
            WMSLocationId _receivingLocationId = '',
            WHSLicensePlateId _licensePlateId = ''
        )
    {
        InventTrans             inventTrans;
        InventTrans             tmpInventTrans;
        InventTransOrigin       inventTransOrigin;
        InventDim               inventDim;
        boolean                 isItemWhsEnabled = WHSInventEnabled::exist(_itemId);

        select firstonly InventDimId from inventTrans
            where inventTrans.StatusReceipt             == StatusReceipt::Ordered
            &&    inventTrans.StatusIssue               == StatusIssue::None
            exists join  InventTransId, RecId from inventTransOrigin
            where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
            &&    inventTransOrigin.InventTransId       == _inventTransIdReceive;

        // If all InventTrans have been moved out of Ordered status, try to find one with Registered instead.
        if (inventTrans.inventDimId == '')
        {
            select firstonly InventDimId from inventTrans
                where inventTrans.StatusReceipt             == StatusReceipt::Registered
                &&    inventTrans.StatusIssue               == StatusIssue::None
                exists join  InventTransId, RecId from inventTransOrigin
                where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
                &&    inventTransOrigin.InventTransId       == _inventTransIdReceive;
        }
        
        InventDim tmpInventDim = InventDim::find(inventTrans.InventDimId);

        if (!isItemWhsEnabled)
        {
            // clear out non-supported dimensions
            tmpInventDim.InventStatusId = '';
            tmpInventDim.LicensePlateId = '';
        }
        else
        {
            // If the item and location is licensePlate controlled, double check if there exist InventDim with licensePlate
            if (RetailTransferOrderInventDimLicensePlateValidFlight::instance().isEnabled()
                && RetailTransferOrderHandler::isItemLicensePlateEnabled(_itemId, tmpInventDim.DataAreaId)
                && tmpInventDim.wmsLocation().whsLocationIsLPControlled()
                && tmpInventDim.LicensePlateId == '')
            {
                select firstonly InventDimId from tmpInventTrans
                    where tmpInventTrans.StatusReceipt          == StatusReceipt::Ordered
                    &&    tmpInventTrans.StatusIssue            == StatusIssue::None
                    exists join  InventTransId, RecId from inventTransOrigin
                    where tmpInventTrans.InventTransOrigin      == inventTransOrigin.RecId
                    &&    inventTransOrigin.InventTransId       == _inventTransIdReceive
                    exists join InventDimId, LicensePlateId from inventDim
                    where inventDim.InventDimId                 == tmpInventTrans.InventDimId
                    &&    inventDim.LicensePlateId              != '';

                if (tmpInventTrans.inventDimId != '')
                {
                    tmpInventDim = InventDim::find(tmpInventTrans.InventDimId);
                }
            }
            
            tmpInventDim.wmsLocationId = _receivingLocationId != '' ? _receivingLocationId : InventLocation::find(tmpInventDim.InventLocationId).wmsLocationIdDefaultReceipt;

            if (_licensePlateId != '')
            {
                tmpInventDim.LicensePlateId = _licensePlateId;
            }
            if (_inventStatusId != '')
            {
                tmpInventDim.InventStatusId = _inventStatusId;
            }
        }

        tmpInventDim = InventDim::findOrCreate(tmpInventDim);

        return tmpInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemLicensePlateEnabled</Name>
				<Source><![CDATA[
    private static boolean isItemLicensePlateEnabled(ItemId _itemId, DataAreaId _dataAreaId)
    {
        EcoResStorageDimensionGroupItem     ecoResStorageDimensionGroupItem;
        EcoResStorageDimensionGroupFldSetup ecoResStorageDimensionGroupFldSetup;
        int                                 fieldNumLicensePlateId = fieldNum(InventDim,LicensePlateId);

        select firstonly ItemId from ecoResStorageDimensionGroupItem
            where ecoResStorageDimensionGroupItem.ItemId            == _itemId
                && ecoResStorageDimensionGroupItem.ItemDataAreaId   == _dataAreaId
            join  RecId from ecoResStorageDimensionGroupFldSetup
            where ecoResStorageDimensionGroupFldSetup.StorageDimensionGroup         == ecoResStorageDimensionGroupItem.StorageDimensionGroup
                && ecoResStorageDimensionGroupFldSetup.DimensionFieldId             == fieldNumLicensePlateId
                && ecoResStorageDimensionGroupFldSetup.IsActive                     == NoYes::Yes
                && ecoResStorageDimensionGroupFldSetup.IsPhysicalInventoryEnabled   == NoYes::Yes;
        
        return ecoResStorageDimensionGroupItem.ItemId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBaseInventDimForTransferOrderReceivingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create base inventory dimensions record for receiving transfer order line.
    /// </summary>
    /// <param name="_inventTranferOrder">
    /// The inventory transfer order.
    /// </param>
    /// <param name="_inventTransferOrderLine">
    /// The inventory transfer order line.
    /// </param>
    /// <param name="_rtsTransferLine">
    /// The rts transfer order line object.
    /// </param>
    /// <returns>
    /// The inventory dimensions.
    /// </returns>
    public static InventDim createBaseInventDimForTransferOrderReceivingLine(
        InventTransferTable _inventTranferOrder,
        InventTransferLine _inventTransferOrderLine,
        RetailRTSTransferOrderLine _rtsTransferLine
        )
    {
        InventDim regInventDim;

        InventDim baseInventDim = _inventTransferOrderLine.inventDim();
        regInventDim.configId = baseInventDim.configId;
        regInventDim.InventColorId = baseInventDim.InventColorId;
        regInventDim.InventSizeId = baseInventDim.InventSizeId;
        regInventDim.InventStyleId = baseInventDim.InventStyleId;

        regInventDim.InventLocationId = _inventTranferOrder.InventLocationIdTo;
        regInventDim.inventSiteId = InventLocation::find(regInventDim.InventLocationId).InventSiteId;

        EcoResStorageDimensionGroupRecId storageTrackingDimensionGroup = InventTable::find(_rtsTransferLine.paramItemId()).storageDimensionGroup();
        EcoResStorageDimensionGroupFldSetup storageDimensionGroupFldSetup = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(storageTrackingDimensionGroup, fieldNum(InventDim, WMSLocationId));
        boolean isItemLocationActive = storageDimensionGroupFldSetup.IsActive;
        if (isItemLocationActive)
        {
            // If the item is storage tracking dimension location active, we set wmsLocationId for it. Otherwise leave it blank.
            regInventDim.wmsLocationId = _rtsTransferLine.paramWMSLocationId() != '' ? _rtsTransferLine.paramWMSLocationId() : InventLocation::find(regInventDim.InventLocationId).wmsLocationIdDefaultReceipt;
        }

        boolean isItemWhsEnabled = WHSInventEnabled::exist(_rtsTransferLine.paramItemId());
        if (isItemWhsEnabled)
        {
            regInventDim.LicensePlateId = _rtsTransferLine.paramLicensePlateId();
            regInventDim.InventStatusId = _rtsTransferLine.paramInventoryStatusId();
        }

        regInventDim.inventBatchId = _rtsTransferLine.paramInventBatchId();
        return InventDim::findOrCreate(regInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles pick of transfer line.
    /// </summary>
    /// <param name="_line">
    /// The inventory transfer line.
    /// </param>
    /// <param name="_pickQty">
    /// The inventory pick quantity.
    /// </param>
    public static void pickTransferLine(
        InventTransferLine _line,
        InventDim          _pickInventDim,
        InventQty          _pickQty)
    {
        ttsbegin;
        InventMovement inventMovement = InventMovement::construct(_line);
        InventDim inventDimPicker;

        // Now pick
        inventDimPicker = inventDimPicker.data(_pickInventDim);
        //we must create a license plate if we are shipping from licensePlate controlled location
        if (WHSInventEnabled::exist(_line.ItemId) && inventDimPicker.wmsLocation().isWHSEnabled())
        {
            inventDimPicker = RetailTransferOrderHandler::ensureValidLPAndLocationCombination(inventDimPicker);
        }

        InventDimParm           inventDimParmSelectTrans;
        inventDimParmSelectTrans.initFromInventDim(inventDimPicker);

        InventUpd_Picked picked = InventUpd_Picked::newParameters(inventMovement, inventDimPicker, inventDimParmSelectTrans, inventDimPicker, inventDimParmSelectTrans, -_pickQty);
        picked.updateNow();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles shipment of transfer line.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// The inventory transfer line.
    /// </param>
    /// <param name="_shipQty">
    /// The inventory transfer quantity.
    /// </param>
    public static void shipTransferLine(
        InventTransferLine _inventTransferLine,
        InventQty   _shipQty,
        InventDim   _inventDimShip)
    {
        ttsbegin;
        boolean shipBasedOnPicked = false;
        //if the item is whsenabled and we are on a whs enabled warehouse we might need to pick to get all dimensions on the transactions
        if (WHSInventEnabled::exist(_inventTransferLine.ItemId)
            && _inventDimShip.inventLocation().WHSEnabled)
        {
            RetailTransferOrderHandler::pickTransferLine(_inventTransferLine, _inventDimShip, _shipQty);
            shipBasedOnPicked = true;
        }

        // ship a transfer order
        InventTransferMultiShip multiShip = InventTransferMultiShip::construct();

        // Id of transfer order to ship
        InventTransferId transferId = _inventTransferLine.TransferId;

        //framework stuff to set parmId
        RunBaseMultiParm::initParm(multiShip);

        //get general values related to shipping set
        InventTransferParmTable inventTransferParmTable;
        inventTransferParmTable.TransferId = transferId;
        inventTransferParmTable.ParmId = multiShip.parmId();
        multiShip.initParmBuffer(inventTransferParmTable);
        inventTransferParmTable.ShipUpdateQty = (shipBasedOnPicked ? InventTransferShipUpdateQty::PickedQty : InventTransferShipUpdateQty::All);

        InventTransferParmLine inventTransferParmLine;
        inventTransferParmLine.initFromInventTransferLine(_inventTransferLine);
        inventTransferParmLine.ParmId               = inventTransferParmTable.ParmId;
        inventTransferParmLine.TransferId           = _inventTransferLine.TransferId;
        inventTransferParmLine.InventTransId        = _inventTransferLine.InventTransId;
        inventTransferParmLine.LineNum              = InventTransferParmTable::lastLineNum(inventTransferParmTable.ParmId) + 1;
        inventTransferParmLine.InventTransIdTransit = _inventTransferLine.InventTransIdTransitFrom;
        inventTransferParmLine.QtyShipNow           = _shipQty;
        inventTransferParmLine.insert();

        inventTransferParmTable.insert(false); //will create parmLines by default

        //now do the update
        multiShip.runUpdate(inventTransferParmTable);

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>