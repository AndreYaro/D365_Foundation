<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchInvoice4PaymNonSSRSPrintMgmtAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchInvoice4PaymNonSSRSPrintMgmtAdapter</c> class used to allow use of print management
/// for non-SSRS (for example, Microsoft Office Excel) invoice for payment report.
/// </summary>
[NonSSRSPrintMgmtAdapterAttribute(PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU)]
class PurchInvoice4PaymNonSSRSPrintMgmtAdapter extends FormLetterNonSSRSPrintMgmtAdapter
{
    PurchInvoice4PaymJournalPrint_RU    purchInvoice4PaymJournalPrint;
    RecordSortedList                    journalList;
    VendInvoice4PaymJour_RU             vendInvoice4PaymJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
        protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(PurchInvoice4PaymJournalPrint_RU))
        {
            // Set the caller
            purchInvoice4PaymJournalPrint = this.parmArgs().caller();
        }

        if (this.parmArgs().record())
        {
            // Get journal list from the selected record/s
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            journalList = this.parmArgs().object();
        }

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU);

        formLetterReport.parmPrintType(printCopyOriginal);

        if (purchInvoice4PaymJournalPrint)
        {
            // Get the print settings
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(purchInvoice4PaymJournalPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(purchInvoice4PaymJournalPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(purchInvoice4PaymJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for print management settings and then executes them
    /// for each record in list of invoices for payment being printed.
    /// </summary>
    protected void runPrintMgmt()
    {
        Common              printMgmtReferencedTable;

        if (!journalList)
        {
            throw error("@SYS26348");
        }

        journalList.first(vendInvoice4PaymJour);

        do
        {
            if (!vendInvoice4PaymJour)
            {
                throw error("@SYS26348");
            }

            printMgmtReferencedTable = vendInvoice4PaymJour.purchTable();

            formLetterReport.parmSSRS(PrintMgmtSSRS::NonSSRS);
            formLetterReport.parmPrintType(printCopyOriginal);
            formLetterReport.loadPrintSettings(vendInvoice4PaymJour, printMgmtReferencedTable, vendInvoice4PaymJour.LanguageId);

            this.outputReports();
        } while (journalList.next(vendInvoice4PaymJour));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to set up recId of invoice for payment being printed.
    /// </summary>
    protected void setRecordId()
    {
        recordId = vendInvoice4PaymJour.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>