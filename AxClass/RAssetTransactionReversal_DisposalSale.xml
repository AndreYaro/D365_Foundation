<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTransactionReversal_DisposalSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetTransactionReversal_DisposalSale extends RAssetTransactionReversal_Disposal
{
    }
]]></Declaration>
		<Methods>
			<Method>
				<Name>reverseLedgerVoucher</Name>
				<Source><![CDATA[
protected void reverseLedgerVoucher()
    {
        LedgerVoucherTransObject            ledgerVoucherTransObject;
        GeneralJournalAccountEntry          accountEntry, accountEntryOffset;
        GeneralJournalAccountEntry_W        accountEntryW;
        GeneralJournalEntry                 generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;
        LedgerEntry                         ledgerEntry;
        LedgerBondClient_RU                 ledgerBondClient;
        Set                                 accountEntrySet = new Set(typeName2Type(extendedTypeStr(RecId)));
    
        if (! rAssetTable.CustInvoiceId)
        {
            super();
            return;
        }

        if (this.parmAssetTransReversedSet()
            && this.parmAssetTransReversedSet().in([rAssetTrans.Voucher,
                rAssetTrans.DataAreaId,
                rAssetTrans.getAccountingDate()]))
        {
            return;
        }

        ledgerBondClient = ledgerVoucherObject.ledgerBondClient_RU();
    
        while select RecId from subledgerVoucherLink
            where subledgerVoucherLink.Voucher              == rAssetTrans.Voucher
               && subledgerVoucherLink.VoucherDataAreaId    == rAssetTrans.DataAreaId
               && subledgerVoucherLink.AccountingDate       == rAssetTrans.getAccountingDate()
        join RecId, PostingLayer, JournalCategory from generalJournalEntry
            where generalJournalEntry.RecId  == subledgerVoucherLink.GeneralJournalEntry &&
                  generalJournalEntry.Ledger == Ledger::current()
        join accountEntry
            where accountEntry.GeneralJournalEntry == generalJournalEntry.RecId
               && (  accountEntry.PostingType      == LedgerPostingType::FixedAssetsDebit_RU
                  || accountEntry.PostingType      == LedgerPostingType::FixedAssetsCredit_RU
                  || accountEntry.PostingType      == LedgerPostingType::LedgerJournal)
        outer join * from accountEntryW
            where accountEntryW.GeneralJournalAccountEntry == accountEntry.RecId
               && accountEntryW.GeneralJournalEntry == generalJournalEntry.RecId
        outer join ledgerEntry
            where ledgerEntry.GeneralJournalAccountEntry == accountEntry.RecId
        {
            if (accountEntrySet.add(accountEntry.RecId))
            {
                ledgerVoucherTransObject = LedgerVoucherTransObject::newGeneralJournal(accountEntry, ledgerEntry);
                ledgerVoucherTransObject.parmSourceTableId(accountEntry.TableId);
                ledgerVoucherTransObject.parmSourceRecId(accountEntry.RecId);
                ledgerVoucherTransObject.invertAmounts();
                ledgerVoucherTransObject.parmIsCorrection(! accountEntry.IsCorrection);
                ledgerVoucherObject.parmPostingLayer(generalJournalEntry.PostingLayer);
                ledgerVoucherObject.parmJournalCategory(generalJournalEntry.JournalCategory);
                ledgerVoucherObject.addTrans(ledgerVoucherTransObject);
    
                if (ledgerBondClient && accountEntryW.hasBond_RU())
                {
                    accountEntryOffset = accountEntryW.bondedLine_RU();
                    accountEntrySet.add(accountEntryOffset.RecId);
    
                    ledgerVoucherTransObject = LedgerVoucherTransObject::newGeneralJournal(accountEntryOffset,
                                                                                           LedgerEntry::findByGeneralJournalAccountEntry(accountEntryOffset.RecId));
                    ledgerVoucherTransObject.parmSourceTableId(accountEntryOffset.TableId);
                    ledgerVoucherTransObject.parmSourceRecId(accountEntryOffset.TableId);
                    ledgerVoucherTransObject.invertAmounts();
                    ledgerVoucherTransObject.parmIsCorrection(! accountEntryOffset.IsCorrection);
                    ledgerVoucherObject.parmPostingLayer(generalJournalEntry.PostingLayer);
                    ledgerVoucherObject.parmJournalCategory(generalJournalEntry.JournalCategory);
                    ledgerVoucherObject.addTrans(ledgerVoucherTransObject);
                    ledgerBondClient.bondLast2();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseRAssetTrans</Name>
				<Source><![CDATA[
/// <summary>
    ///    Performs the reversal of the depreciation bonus recovery transactions linked to the
    ///    current FA transaction and the reversal of the FA transaction itself.
    /// </summary>
    protected void reverseRAssetTrans()
    {
        void reverseBonusRecoveryTrans()
        {
            RAssetTrans bonusRecoveryTrans, tmpAssetTrans;
    
            while select forupdate bonusRecoveryTrans
                where bonusRecoveryTrans.LinkedTransRecId == rassetTrans.RecId &&
                      !bonusRecoveryTrans.StornoRecId
            {
                //Set bonus recovery trans as current trans for reversal
                tmpAssetTrans = rassetTrans;
                rassetTrans = bonusRecoveryTrans;
                this.initTransLinkReversal(rassetTrans);
                super();
                //Restore current trans for reversal
                rassetTrans = tmpAssetTrans;
                this.initTransLinkReversal(rassetTrans);
            }
        }
    
        reverseBonusRecoveryTrans();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypes</Name>
				<Source><![CDATA[
    protected container ledgerPostingTypes()
    {
        return rAssetTable.CustInvoiceId ? [LedgerPostingType::FixedAssetsCredit, LedgerPostingType::FixedAssetsDebit, LedgerPostingType::LedgerJournal] : super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>