<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RHRMWorkCondClassUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RHRMWorkCondClassUpdater extends RunBase
{
    RHRMStaffListHistory    rhrmStaffListHistory;
    RHRMOrderTrans          rhrmOrderTrans;
    RHRMParameters          rhrmParameters;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean check(boolean _checkJournalName = false)
    {
        boolean                     ret = false;
        RHRMStaffListHistory        rhrmStaffListHistoryLast;
        SysInfoAction_FormName_RU   action;

        if (RHRMParameters::find().WorkCondClassRate)
        {
            rhrmStaffListHistoryLast = RHRMStaffListHistory::findLast(
                rhrmStaffListHistory.StaffListRefRecId,
                rhrmStaffListHistory.StartDate,
                rhrmStaffListHistory.OrderTransRecId);

            if (rhrmStaffListHistoryLast &&
                rhrmStaffListHistoryLast.WorkCondClass != rhrmStaffListHistory.WorkCondClass)
            {
                ret = true;
            }

            if (ret && _checkJournalName)
            {
                if (!rhrmParameters.WorkCondClassOrderNameId)
                {
                    action = new SysInfoAction_FormName_RU(rHRMParameters, formstr(RHRMParameters));
                    ret = checkFailed("@RUP2479", '', action);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RHRMOrderTable createOrderTable(TransDate _transDate, RHRMWorkCondClass _workCondClass)
    {
        RHRMOrderName       rHRMOrderName;
        RHRMOrderTable      rHRMOrderTable;
        NumberSequenceCode  numberSequenceCode;

        rHRMOrderName = RHRMOrderName::find(rHRMParameters.WorkCondClassOrderNameId);

        numberSequenceCode = rHRMOrderName.OrderNumberSequence ?
            rHRMOrderName.OrderNumberSequence :
            RHRMParameters::numRefOrderNum(RHRMJournalType::Transfer).numberSequenceTable().NumberSequence;

        rHRMOrderTable.initValue();
        rHRMOrderTable.initFromRHRMJournalName(rHRMOrderName);

        rhrmOrderTable.TransDate    = _transDate;
        rhrmOrderTable.Reason       = strFmt("@SYP4881302",
            _workCondClass,
            RPayRateEnumValue::find(RHRMParameters::workCondClassRateRefRecId(), _workCondClass).Description);

        rhrmOrderTable.JournalId = JournalTableData::newTable(rhrmOrderTable).nextJournalId();

        rhrmOrderTable.OrderNum  = NumberSeq::newGetNumFromCode(numberSequenceCode).num();

        if (! rhrmOrderTable.validateWrite())
        {
            throw error("@RUP2020");
        }

        rhrmOrderTable.insert();

        return rHRMOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createOrderTrans(
        RHRMEmplId      _emplId,
        RHRMOrderTable  _rHRMOrderTable,
        LineNum         _lineNum,
        StartDate       _startDate)
    {
        RHRMOrderTrans rHRMOrderTransLoc, rhrmOrderTransLastOperation;
        RPayHistory    rPayHistoryLast;

        rHRMOrderTransLoc.initValue();

        rpayHistoryLast = RPayHistory::findLastSignOnMove(_emplId, _startDate);
        rhrmOrderTransLastOperation = RHRMOrderTrans::find(rpayHistoryLast.OrderTransRecId);

        rHRMOrderTransLoc.data(rhrmOrderTransLastOperation);
        rHRMOrderTransLoc.RecId                      = 0;
        rHRMOrderTransLoc.JournalId                  = _rHRMOrderTable.JournalId;
        rHRMOrderTransLoc.OrderTableRecId            = _rHRMOrderTable.RecId;

        rHRMOrderTransLoc.StartDate                  = _startDate;

        rHRMOrderTransLoc.LineNum = _lineNum;

        if (!rHRMOrderTransLoc.validateWrite())
        {
            throw error(strfmt("@RUP2478", _emplId, RHRMEmplTable::emplId2Name(_emplId)));
        }

        rHRMOrderTransLoc.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRateValues</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createRateValues(
        RHRMEmplId      _emplId,
        StartDate       _startDate,
        RefRecId        _stafflistRefRecId,
        RHRMOrderTable  _rHRMOrderTable)
    {
        RHRMStaffListHistory    rhrmStaffListHistoryLoc;
        RHRMWorkCondClass       prevClass;

        void initRate(StartDate _startDateRate)
        {
            RPayRateTrans::initRateFromPersonnel(rhrmParameters.WorkCondClassRate,
                                                 rhrmStaffListHistoryLoc.WorkCondClass,
                                                 _startDateRate,
                                                 _emplId,
                                                 strfmt("@RUP1865", _rHRMOrderTable.OrderNum, _rHRMOrderTable.TransDate));
        }

        rhrmStaffListHistoryLoc = RHRMStaffListHistory::findLast(_stafflistRefRecId, _startDate);

        if (rhrmStaffListHistoryLoc.WorkCondClass != RHRMParameters::workCondClassDefValue() ||
            RPayRateTable::find(rhrmParameters.WorkCondClassRate).getValue(RPayRateCallContext::construct(_startDate - 1, _emplId)) != rhrmStaffListHistoryLoc.WorkCondClass)
        {
            initRate(_startDate);
        }

        prevClass = rhrmStaffListHistoryLoc.WorkCondClass;

        while select WorkCondClass, StartDate from rhrmStaffListHistoryLoc
            order by StartDate asc
            where rhrmStaffListHistoryLoc.StaffListRefRecId == _stafflistRefRecId &&
                  rhrmStaffListHistoryLoc.StartDate > _startDate
        {
            if (rhrmStaffListHistoryLoc.WorkCondClass != prevClass)
            {
                initRate(rhrmStaffListHistoryLoc.StartDate);

                prevClass = rhrmStaffListHistoryLoc.WorkCondClass;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferOrder</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void createTransferOrder()
    {
        #OCCRetryCount
        RHRMStaffListHistoryCheck   rhrmStaffListHistoryCheck;
        RHRMOrderTable              rHRMOrderTable;
        Set                         emplsByPositionSet;
        SetEnumerator               se;
        LineNum                     lineNum;
        SysInfoAction_FormName_RU   action;

        try
        {
            setprefix("@SYP4881300");

            if (this.check(true))
            {
                rhrmStaffListHistoryCheck = new RHRMStaffListHistoryCheck(rHRMStaffListHistory.StaffListRefRecId, rHRMStaffListHistory.StartDate, true);

                emplsByPositionSet = Set::create(rhrmStaffListHistoryCheck.getStaffListEmploySet());

                if (emplsByPositionSet.elements())
                {
                    ttsbegin;
                    rHRMOrderTable = this.createOrderTable(
                        rHRMStaffListHistory.StartDate,
                        rHRMStaffListHistory.WorkCondClass);

                    se = emplsByPositionSet.getEnumerator();

                    while (se.moveNext())
                    {
                        lineNum ++;
                        this.createOrderTrans(
                            se.current(),
                            rHRMOrderTable,
                            lineNum,
                            rHRMStaffListHistory.StartDate);
                    }

                    this.updateOrderLineNum(rHRMOrderTable, lineNum);

                    action = new SysInfoAction_FormName_RU(rhrmOrderTable, formstr(RHRMOrderTable));

                    info(strfmt("@RUP2480", rhrmOrderTable.OrderNum, rhrmOrderTable.TransDate), '', action);
                    ttscommit;
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRateValues</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteRateValues(RHRMEmplId _emplId, StartDate _startDate)
    {
        RPayRateTrans   rPayRateTrans;

        if (rhrmParameters.WorkCondClassRate)
        {
            delete_from rPayRateTrans
                where rPayRateTrans.PayRate     == rhrmParameters.WorkCondClassRate &&
                      rPayRateTrans.RateTypeAC  == _emplId &&
                      rPayRateTrans.RateDate    >= _startDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteStaffListHistory</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void deleteStaffListHistory()
    {
        #OCCRetryCount
        RHRMStaffListHistoryCheck   rhrmStaffListHistoryCheck;
        Set                         emplsByPositionSet;
        SetEnumerator               se;

        try
        {
            if (this.check())
            {
                rhrmStaffListHistoryCheck = new RHRMStaffListHistoryCheck(rHRMStaffListHistory.StaffListRefRecId, rHRMStaffListHistory.StartDate, true);

                emplsByPositionSet = Set::create(rhrmStaffListHistoryCheck.getStaffListEmploySet());

                if (emplsByPositionSet.elements())
                {
                    ttsbegin;
                    se = emplsByPositionSet.getEnumerator();

                    while (se.moveNext())
                    {
                        this.deleteWorkCondClass(se.current(), rHRMStaffListHistory.StartDate, rHRMStaffListHistory.OrderTransRecId);
                    }

                    ttscommit;
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWorkCondClass</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteWorkCondClass(
        RHRMEmplId  _emplId,
        StartDate   _startDate,
        RefRecId    _excludeOrder)
    {
        RPayHistory rPayHistory;

        this.deleteRateValues(_emplId, _startDate);
        rPayHistory = RPayHistory::findLastSignOnMove(_emplId, _startDate, _excludeOrder);

        if (rPayHistory && rPayHistory.HRMStaffListRefRecId)
        {
            this.createRateValues(
                _emplId,
                rPayHistory.StartDate,
                rPayHistory.HRMStaffListRefRecId,
                RHRMOrderTable::find(RHRMOrderTrans::find(_excludeOrder).OrderTableRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWorkCondClassFromOrderTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deleteWorkCondClassFromOrderTrans()
    {
        this.deleteWorkCondClass(
            rhrmOrderTrans.EmplId,
            rhrmOrderTrans.StartDate,
            rhrmOrderTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillWorkCondClass</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fillWorkCondClass()
    {
        RHRMOrderTable rHRMOrderTable = RHRMOrderTable::find(rhrmOrderTrans.OrderTableRecId);

        this.deleteRateValues(rhrmOrderTrans.emplId, rhrmOrderTrans.StartDate);

        if (rhrmOrderTrans.StaffListRefRecId)
        {
            this.createRateValues(
                rhrmOrderTrans.emplId,
                rhrmOrderTrans.StartDate,
                rhrmOrderTrans.StaffListRefRecId,
                rHRMOrderTable);
        }
        else
        {
            RPayRateTrans::initRateFromPersonnel(rhrmParameters.WorkCondClassRate,
                                                 RHRMParameters::workCondClassDefValue(),
                                                 rhrmOrderTrans.StartDate,
                                                 rhrmOrderTrans.EmplId,
                                                 strfmt("@RUP1865", rHRMOrderTable.OrderNum, rHRMOrderTable.TransDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret;

        ret = super();
        rhrmParameters  = RHRMParameters::find();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRHRMOrderTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RHRMOrderTrans parmRHRMOrderTrans(RHRMOrderTrans _rhrmOrderTrans = rhrmOrderTrans)
    {
        rhrmOrderTrans = _rhrmOrderTrans;
        return rhrmOrderTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRHRMStaffListHistory</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RHRMStaffListHistory parmRHRMStaffListHistory(RHRMStaffListHistory _rHRMStaffListHistory = rHRMStaffListHistory)
    {
        rHRMStaffListHistory = _rHRMStaffListHistory;
        return rHRMStaffListHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderLineNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateOrderLineNum(RHRMOrderTable _orderTable, LineNum _lineNum)
    {
        RHRMOrderTable rhrmOrderTableLocal;

        rhrmOrderTableLocal = RHRMOrderTable::find(_orderTable.RecId, true);

        rhrmOrderTableLocal.NumOfLines = any2int(_lineNum);
        rhrmOrderTableLocal.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newOrderTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RHRMWorkCondClassUpdater newOrderTrans(RHRMOrderTrans _orderTrans)
    {
        RHRMWorkCondClassUpdater rhrmWorkCondClassUpdater = new RHRMWorkCondClassUpdater();

        rhrmWorkCondClassUpdater.parmRHRMOrderTrans(_orderTrans);

        rhrmWorkCondClassUpdater.init();

        return rhrmWorkCondClassUpdater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStaffListHistory</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RHRMWorkCondClassUpdater newStaffListHistory(RHRMStaffListHistory _rHRMStaffListHistory)
    {
        RHRMWorkCondClassUpdater rhrmWorkCondClassUpdater = new RHRMWorkCondClassUpdater();

        rhrmWorkCondClassUpdater.parmRHRMStaffListHistory(_rHRMStaffListHistory);

        rhrmWorkCondClassUpdater.init();

        return rhrmWorkCondClassUpdater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>