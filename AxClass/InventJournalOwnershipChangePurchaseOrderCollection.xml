<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalOwnershipChangePurchaseOrderCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventJournalOwnershipChangePurchaseOrderCollection</c> class holds a collection of information about the purchase order creation as part of an inventory ownership change journal posting.
/// </summary>
public class InventJournalOwnershipChangePurchaseOrderCollection
{
    Map purchaseOrders;
    MapEnumerator purchaseOrdersEnumerator;
    InventJournalOwnershipChangePurchaseOrder currentPurchaseOrder;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getVendAccountFromOwner</Name>
				<Source><![CDATA[
    private VendAccount getVendAccountFromOwner(InventOwnerId _inventOwnerId)
    {
        return VendTable::findByPartyRecId(InventOwner_RU::find(_inventOwnerId).Party).AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseOrderKey</Name>
				<Source><![CDATA[
    private str purchaseOrderKey(VendAccount _vendorAccountNumber, JournalTransDate _journalDate)
    {
        return strFmt('%1~%2', _vendorAccountNumber, _journalDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the information about the purchase order creation to the collection.
    /// </summary>
    /// <param name = "_inventJournalTrans">The inventory ownership change journal line to add.</param>
    public void addPurchaseOrder(InventJournalTrans _inventJournalTrans)
    {
        if (!_inventJournalTrans)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        VendAccount vendorAccountNumber = this.getVendAccountFromOwner(_inventJournalTrans.inventDim().InventOwnerId_RU);

        if (vendorAccountNumber)
        {
            var key = this.purchaseOrderKey(vendorAccountNumber, _inventJournalTrans.TransDate);

            if (!purchaseOrders.exists(key))
            {
                purchaseOrders.insert(key, InventJournalOwnershipChangePurchaseOrder::newFromParameters(vendorAccountNumber, _inventJournalTrans.TransDate));
            }

            InventJournalOwnershipChangePurchaseOrder purchaseOrder = purchaseOrders.lookup(key);

            purchaseOrder.getOwnershipChangeLines().addOwnershipChangeLine(_inventJournalTrans);
        }
        else
        {
            throw error(strfmt("@Consignment:MessageValidation_CannotRetrieveVendorAccountForOwner", _inventJournalTrans.inventDim().InventOwnerId_RU));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventJournalOwnershipChangePurchaseOrder</c> class instance for the specified purchase order.
    /// </summary>
    /// <param name = "_purchaseOrder">The purchase order for which to find the <c>InventJournalOwnershipChangePurchaseOrder</c> class instance.</param>
    /// <returns>An <c>InventJournalOwnershipChangePurchaseOrder</c> class instance.</returns>
    public InventJournalOwnershipChangePurchaseOrder getPurchaseOrder(PurchTable _purchaseOrder)
    {
        var key = this.purchaseOrderKey(_purchaseOrder.OrderAccount, _purchaseOrder.AccountingDate);

        if (purchaseOrders.exists(key))
        {
            return purchaseOrders.lookup(key);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventJournalOwnershipChangePurchaseOrder</c> class instance that the enumerator currently positions in the collection.
    /// </summary>
    /// <returns>An <c>InventJournalOwnershipChangePurchaseOrder</c> class instance.</returns>
    public InventJournalOwnershipChangePurchaseOrder currentPurchaseOrder()
    {
        return currentPurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of <c>InventJournalOwnershipChangePurchaseOrder</c> class instances in the collection.
    /// </summary>
    /// <returns>An integer that indicates the number of <c>InventJournalOwnershipChangePurchaseOrder</c> class instances in the collection.</returns>
    public int elements()
    {
        return purchaseOrders.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the enumerator of the collection.
    /// </summary>
    /// <remarks>The enumerator can be used to enumerate through the collection.</remarks>
    public void initializeEnumerator()
    {
        purchaseOrdersEnumerator = purchaseOrders.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the enumerator to the next <c>InventJournalOwnershipChangePurchaseOrder</c> class instance in the collection.
    /// </summary>
    /// <returns>A Boolean that indicates whether the enumerator successfully advances to the next <c>InventJournalOwnershipChangePurchaseOrder</c> class instance in the collection.</returns>
    public boolean moveNext()
    {
        boolean hasItem;

        if (purchaseOrdersEnumerator)
        {
            hasItem = purchaseOrdersEnumerator.moveNext();
        }
        else
        {
            hasItem = false;
        }

        if (hasItem)
        {
            currentPurchaseOrder = purchaseOrdersEnumerator.currentValue();
        }

        return hasItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the enumerator to the first <c>InventJournalOwnershipChangePurchaseOrder</c> class instance in the collection.
    /// </summary>
    public void reset()
    {
        if (purchaseOrdersEnumerator)
        {
            purchaseOrdersEnumerator.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        purchaseOrders = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventJournalOwnershipChangePurchaseOrderCollection construct()
    {
        return new InventJournalOwnershipChangePurchaseOrderCollection();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>