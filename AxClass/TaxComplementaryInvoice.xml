<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxComplementaryInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Performs tax calculations for the complementary invoices.
/// </summary>
class TaxComplementaryInvoice extends TaxCalculation
{
    ComplementaryInvoiceCalcTax calcTax;
    Common                      currentLine;
    TaxCalculationDateType      taxCalculationDateType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Steps through sales complementary invoice lines to calculate tax for a complementary invoice.
    /// </summary>
    /// <returns>
    ///    The tax amount excluding Use tax.
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        TaxAmount       taxAmount;
        TaxAmountCur    baseAmount;
        Common complLine;

        if (!headingRecId)
        {
            return 0;
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        this.initializeCalculation();

        calcTax.initCursor();

        complLine = calcTax.nextLine();

        while (complLine)
        {
            currentLine = complLine;
            this.configureTaxForComplementaryLine();

            if (calcTax.transTaxGroup() && calcTax.transTaxItemGroup())
            {
                if (BrazilParameters::isEnabled())
                {
                    useAndConsumption_BR  = calcTax.useAndConsumption();
                }
                baseAmount = calcTax.baseAmount();
                this.setCashDiscount(0, 0);
                baseAmount = this.initializeTaxForLine(false,
                                        baseAmount,
                                        baseAmount,
                                        calcTax.defaultDimension(),
                                        calcTax.operationAccount(),
                                        calcTax.operationPosting(),
                                        0,
                                        '',
                                        0
                                        );
                taxAmount = this.calculateLineSpecificTaxCodes();

                this.updateTaxationOriginOnTaxWorkTrans_BR(calcTax.taxationOrigin());
            }

            complLine = calcTax.nextLine();
        }

        taxAmount = this.calculateTotalTaxCodes();
        this.loadTaxCorrection();
        taxAmount = this.finalizeCalculation();
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForComplementaryLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Configures tax to calculate a complementary invoice line.
    /// </summary>
    /// <param name="_complLine">
    ///    The transaction line for complementary invoice.
    /// </param>
    private void configureTaxForComplementaryLine()
    {
        TransDate               taxCalculationDate;

        taxDate = calcTax.invoiceDate();

        switch (taxCalculationDateType)
        {
            case TaxCalculationDateType::DeliveryDate:
            case TaxCalculationDateType::DocumentDate:
            case TaxCalculationDateType::InvoiceDate:
                taxCalculationDate = calcTax.invoiceDate();
                break;
        }

        this.insertIntersection(calcTax.transTaxGroup(),
                                calcTax.transTaxItemGroup(),
                                '',
                                calcTax.description(),
                                taxCalculationDate);

        if (! this.checkTaxCodesByLine())
        {
            throw error("@SYS22772");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance of the <c>TaxComplementaryInvoice</c> class.
    /// </summary>
    /// <param name="_initializationClass">
    ///    The complementary invoice specific class which contains the transaction lines and other information that
    ///    is required to calculate taxes.
    /// </param>
    public void init(Object _initializationClass)
    {
        calcTax = _initializationClass;
        if (calcTax == null)
        {
            throw error("@SYS95118");
        }

        taxCalculationDateType      = this.taxParameters().TaxCalculationDateType;
        taxDate = calcTax.invoiceDate();

        taxModuleType               = calcTax.taxModuleType();
        headingTableId              = calcTax.tableId();
        headingRecId                = calcTax.recID();

        this.setExchRates(calcTax.currencyCode(),
                          calcTax.exchRate(taxDate),
                          calcTax.exchRateSecondary(taxDate));

        super(_initializationClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts tax settings for tax complementary invoices
    /// </summary>
    protected void loadTaxCorrection()
    {
        Common complLine;

        void adjustTaxWorkTrans(TmpTaxWorkTrans _taxWorkTrans, AmountMST _additionalAmount)
        {
            switch (_taxWorkTrans.FiscalValue_BR)
            {
                case TaxFiscalValue_BR::WithCreditDebit:
                    _taxWorkTrans.TaxAmount = _additionalAmount;
                    _taxWorkTrans.TaxAmountCur = _additionalAmount;
                    _taxWorkTrans.SourceTaxAmountCur = _additionalAmount;
                    _taxWorkTrans.TaxBaseAmount = _additionalAmount;
                    _taxWorkTrans.TaxBaseAmountCur = _additionalAmount;
                    break;

                case TaxFiscalValue_BR::WithoutCreditDebitOther:
                    _taxWorkTrans.SourceOtherBaseAmount_BR = _additionalAmount;
                    _taxWorkTrans.SourceOtherBaseAmountMST_BR = _additionalAmount;
                    _taxWorkTrans.SourceOtherBaseTaxAmount_BR = _additionalAmount;
                    _taxWorkTrans.SourceOtherTaxAmountMST_BR = _additionalAmount;
                    if (_taxWorkTrans.Source == TaxModuleType::PurchInvoice)
                    {
                        _taxWorkTrans.TaxInCostPrice = _additionalAmount;
                        _taxWorkTrans.TaxInCostPriceCur = _additionalAmount;
                        _taxWorkTrans.TaxInCostPriceMST = _additionalAmount;
                        _taxWorkTrans.TaxInCostPriceRegulated = _additionalAmount;
                        _taxWorkTrans.TaxAmount = _additionalAmount;
                        _taxWorkTrans.TaxAmountCur = _additionalAmount;
                        _taxWorkTrans.SourceTaxAmountCur = _additionalAmount;
                        _taxWorkTrans.TaxBaseAmount = _additionalAmount;
                        _taxWorkTrans.TaxBaseAmountCur = _additionalAmount;
                    }
                    break;

                default:
                    break;
            }
            _taxWorkTrans.update();
        }

        calcTax.initCursor();
        complLine = calcTax.nextLine();
        while (complLine)
        {
            if (calcTax.AdditionalICMSAmount() || calcTax.AdditionalIPIAmount())
            {
                while select forUpdate taxWorkTrans
                    where taxWorkTrans.SourceTableId == complLine.TableId
                       && taxWorkTrans.SourceRecId == complLine.RecId
                {
                    taxWorkTrans.TaxAmount = 0;
                    taxWorkTrans.TaxAmountCur = 0;
                    taxWorkTrans.TaxAmountRep = 0;
                    taxWorkTrans.SourceTaxAmountCur = 0;
                    taxWorkTrans.TaxBaseAmount = 0;
                    taxWorkTrans.TaxBaseAmountRep = 0;
                    taxWorkTrans.TaxInCostPrice = 0;
                    taxWorkTrans.TaxInCostPriceCur = 0;
                    taxWorkTrans.TaxInCostPriceRep = 0;
                    taxWorkTrans.TaxInCostPriceMST = 0;
                    taxWorkTrans.TaxInCostPriceRegulated = 0;
                    taxWorkTrans.TaxReductionPct_BR = 0;
                    taxWorkTrans.SourceRegulateAmountCur = 0;
                    taxWorkTrans.update();
                }
                if (calcTax.AdditionalICMSAmount())
                {
                    select forUpdate firstOnly taxWorkTrans
                        where taxWorkTrans.SourceTableId == complLine.TableId
                        && taxWorkTrans.SourceRecId == complLine.RecId
                        && taxWorkTrans.TaxType_BR == TaxType_BR::ICMS;

                    if (!taxWorkTrans)
                    {
                        throw error("@GLS221020");
                    }
                    adjustTaxWorkTrans(taxWorkTrans, calcTax.AdditionalICMSAmount());
                }
                if (calcTax.AdditionalIPIAmount())
                {
                    select forUpdate firstOnly taxWorkTrans
                        where taxWorkTrans.SourceTableId == complLine.TableId
                        && taxWorkTrans.SourceRecId == complLine.RecId
                        && taxWorkTrans.TaxType_BR == TaxType_BR::IPI;

                    if (!taxWorkTrans)
                    {
                        throw error("@GLS221021");
                    }
                    adjustTaxWorkTrans(taxWorkTrans, calcTax.AdditionalIPIAmount());
                }
            }
            complLine = calcTax.nextLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the transaction line that is currently being calculated.
    /// </summary>
    /// <returns>
    /// The record ID of the transaction line being calculated.
    /// </returns>
    /// <remarks>
    /// This method is overridden by derived classes.
    /// </remarks>
    public recId sourceRecId()
    {
        return currentLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table ID of the transaction that is to be taxed.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived classes.
    /// </remarks>
    public RefTableId sourceTableId()
    {
        return currentLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current transaction supports SubLedger distributions or SubLedger journal
    ///    lines.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    By default, the base implementation is that they do not support SubLedger distributions or
    ///    SubLedger journal lines. As the individual transaction supports the SubLedger, it will override
    ///    this and return true.
    /// </remarks>
    public boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    /// true if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>