<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVoucher</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendVoucher extends CustVendVoucher
{
    boolean isDueDateSet;
    private boolean isCancellationForApproval;

    // <GBR>
    FiscalEstablishmentRecId_BR fiscalEstablishmentRecId;
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInvoice</Name>
				<Source><![CDATA[
    protected boolean checkInvoice(VendAccount _vendAccount, InvoiceId _invoiceId, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        boolean ret;

        if (negotiableInstrumentStatus == CustVendNegInstStatus::InvoiceRemitted)
        {
            ret = true;
        }
        else
        {
            ret = VendTable::find(_vendAccount).checkInvoice(_invoiceId, _transDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCashDisc</Name>
				<Source><![CDATA[
    protected void copyCashDisc(tableId _fromTableId, recId _fromRecId, tableId _toTableId, recId _toRecId)
    {
        VendTransCashDisc::copyCashDisc(_fromTableId, _fromRecId, _toTableId, _toRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a <c>VendInvoiceJour</c> record from the vendor invoice transaction.
    /// </summary>
    /// <param name="_vendTrans">
    ///     The Map object that contains the value of vendor transaction.
    /// </param>
    protected void createInvoiceJournal(CustVendTrans _vendTrans)
    {
        #ISOCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        
        RefRecId origVendInvoiceJourRecId = this.populateVendInvoiceJour(_vendTrans);

        vendInvoiceJour.insert();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            EInvoice_IT::newVendInvoice(vendInvoiceJour);
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            VendInvoicePurchLink::newFromInvoiceJour_RU(vendInvoiceJour);
            AmountAdjustEngineVendInvoice_W::adjustInvoiceJour(vendInvoiceJour);
        }
        // </GEERU>
        /* Not until purchaseorder create invoicejournal here as well
        this.CopyCashDisc(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId,
                          vendInvoiceJour.TableId, vendInvoicejour.RecId);
        */
        LedgerJournalTrans ledgerJournalTrans;
        if (common.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = common;
        }

        if (ledgerJournalTrans)
        {
            // If a registered invoice is cancelled in the approval journal, reverse the intrastat line.
            if (isCancellationForApproval)
            {
                VendInvoiceIntrastatType::reverseTrans(_vendTrans.Voucher, _vendTrans.TransDate, origVendInvoiceJourRecId, vendInvoiceJour.RecId);
            }
            else // update the vendor invoice intrastat record with VendInvoiceJour recId.
            {
                VendInvoiceIntrastatType::updateVendInvoiceJourRecId(ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate, vendInvoiceJour.RecId);
            }

            this.insertVendCreditInvoicingJour(ledgerJournalTrans);

            if (isItalyEnabled)
            {
                this.createInvoiceJournal_IT(vendInvoiceJour, ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populate <c>VendInvoiceJour</c>.
    /// </summary>
    /// <param name = "_vendTrans">
    ///     The vendor transaction used to initialize <c>VendInvoiceJour</c>.
    /// </param>
    /// <returns>
    ///     The original vend invoice journal record ID.
    /// </returns>
    protected RefRecId populateVendInvoiceJour(CustVendTrans _vendTrans)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        RefRecId origVendInvoiceJourRecId;
        #ISOCountryRegionCodes
        // <GEERU>
        #EECountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        if (countryRegion_RU && common.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = common;

            vendInvoiceJour.Correct_RU = ledgerJournalTrans.Correct_RU;
            vendInvoiceJour.CorrectedInvoiceId_RU = ledgerJournalTrans.CorrectedInvoiceId_RU;
            vendInvoiceJour.CorrectedInvoiceDate_RU = ledgerJournalTrans.CorrectedInvoiceDate_RU;
            VendInvoiceJour.CorrectionType_RU = LedgerJournalTrans.CorrectionType_RU;
        }
        // </GEERU>

        vendInvoiceJour.initValue();

        // <GEERU>
        if (!countryRegion_RU || common.TableId == tableNum(LedgerJournalTrans))
        {
            // </GEERU>
            vendInvoiceJour.initFromVendTrans(_vendTrans);
            // <GEERU>
        }
        // </GEERU>

        if (isDueDateSet || !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            vendInvoiceJour.FixedDueDate = dueDate;
            vendInvoiceJour.DueDate = dueDate;
        }

        vendInvoiceJour.CashDiscDate = cashDiscDate;
        vendInvoiceJour.CashDisc = -cashDiscAmount;
        vendInvoiceJour.ExchRate = exchRate;
        vendInvoiceJour.ExchRateSecondary = exchRateSecondary;
        vendInvoiceJour.ReportingCurrencyExchangeRate = reportingCurrencyExchRate;
        vendInvoiceJour.Triangulation = triangulation;
        vendInvoiceJour.DefaultDimension = defaultDimension;
        vendInvoiceJour.CashDiscCode = cashDiscCode;
        vendInvoiceJour.Payment = paymTermId;
        vendInvoiceJour.PostingProfile = postingProfile;

        if (common != null && common.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = common;

            if (isCancellationForApproval)
            {
                vendInvoiceJour.SumTax = Tax::taxTotalVoucherDateRecId(ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate, ledgerJournalTrans.RecId, true, false, false);

                select firstonly FromDate from ledgerJournalVoucherChanged
                    where ledgerJournalVoucherChanged.ToDate == _vendTrans.TransDate
                       && ledgerJournalVoucherChanged.ToVoucher == _vendTrans.Voucher;

                origVendInvoiceJourRecId = VendInvoiceJour::findFromVendTrans(_vendTrans.Invoice,
                                                                              ledgerJournalVoucherChanged.FromDate ? ledgerJournalVoucherChanged.FromDate : _vendTrans.TransDate,
                                                                              _vendTrans.AccountNum).RecId;
            }
            else
            {
                vendInvoiceJour.SumTax = Tax::taxTotal(ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate);
            }

            if (ReverseChargeParameters_W::find().Enabled || TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                vendInvoiceJour.ReverseChargeAmount = Tax::reverseChargeTotal_W(ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate);
            }

            if (InvoiceJournalPaymentScheduleFeature::isEnabled()
                && ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::VendInvoiceRegister)
            {
                vendInvoiceJour.PaymentSched = ledgerJournalTrans.PaymSched;
            }
            vendInvoiceJour.vatNum = ledgerJournalTrans.vatNumJournal;
            LedgerJournalTransTaxExtension taxExtension = ledgerJournalTrans.ledgerJournalTransTaxExtension();
            vendInvoiceJour.PartyTaxID = taxExtension.VATNumRecId;
            if (TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(ledgerJournalTrans.ledgerJournalTable().JournalType))
            {
                vendInvoiceJour.TaxID = TaxTransactionTaxID::getTaxIDByVoucher(ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate, ledgerJournalTrans.JournalNum);
            }

            vendInvoiceJour.EnterpriseNumber = ledgerJournalTrans.EnterpriseNumber;
            vendInvoiceJour.TaxGroup = ledgerJournalTrans.TaxGroup;
            vendInvoiceJour.RemittanceAddress = ledgerJournalTrans.RemittanceAddress;
            vendInvoiceJour.Listcode = ledgerJournalTrans.Listcode;
            vendInvoiceJour.DeliveryDate_ES = ledgerJournalTrans.LedgerJournalDlvDate_ES ? ledgerJournalTrans.LedgerJournalDlvDate_ES : _vendTrans.TransDate;
            // <GEERU>
            vendInvoiceJour.vatOnPayment_RU = ledgerJournalTrans.vatOnPayment_RU;
            // </GEERU>
        }
        else if (common != null && common.TableId == tableNum(TrvExpTable))
        {
            TaxTrans taxTrans;

            select firstonly TaxGroup from taxTrans
                where taxTrans.TransDate == this.parmTransDate()
                    && taxTrans.Voucher == this.parmTransVoucher();

            if (taxTrans)
            {
                vendInvoiceJour.SumTax =  Tax::taxTotal(this.parmTransVoucher(), this.parmTransDate());
                vendInvoiceJour.TaxGroup = this.existMultipleTaxGroups(taxTrans.TaxGroup) ? "@SYS342615" : taxTrans.TaxGroup;
            }
        }

        vendInvoiceJour.SalesBalance = vendInvoiceJour.InvoiceAmount - vendInvoiceJour.SumTax;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIS]))
        {
            vendInvoiceJour.VendInvoiceDeclaration_IS = ledgerJournalTrans.VendInvoiceDeclaration_IS;
        }
        // <GEERU>
        if (countryRegion_RU)
        {
            vendInvoiceJour.Qty = this.createInvoiceTrans_RU(vendInvoiceJour);
        }
        // </GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            vendInvoiceJour.OperationType_MX = ledgerJournalTrans.OperationType_MX;
            vendInvoiceJour.CFDIUUID_MX = ledgerJournalTrans.CFDIUUID_MX;
            vendInvoiceJour.InvoiceSeries_MX = ledgerJournalTrans.InvoiceSeries_MX;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB, #isoSA, #isoTH])
            || TaxWithholdingGlobalFeature::isFeatureAndParamEnabled())
        {
            this.createInvoiceTrans_GB(vendInvoiceJour);
            this.createInvoiceJourExtension(vendInvoiceJour);
        }

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            vendInvoiceJour.PurchReceiptDate_W = ledgerJournalTrans.ReceiptDate_W;
        }
        // </GEEU>

        if (! isDueDateSet && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            vendInvoiceJour.calcDue();
            _vendTrans.DueDate = vendInvoiceJour.DueDate;
        }

        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            vendInvoiceJour.WhoIsAuthor_LT = LtDocOriginator::Vendor;
        }
        // </GEELT>
        return origVendInvoiceJourRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existMultipleTaxGroups</Name>
				<Source><![CDATA[
    private boolean existMultipleTaxGroups(TaxGroup _taxGroup)
    {
        TaxTrans taxTrans;

        select firstonly RecId from taxTrans
            where taxTrans.TransDate == this.parmTransDate()
                && taxTrans.Voucher == this.parmTransVoucher()
                && taxTrans.TaxGroup != _taxGroup;

        return taxTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSettleCashPayment</Name>
				<Source><![CDATA[
    internal boolean shouldSettleCashPayment(
        CustVendTrans _custVendTrans,
        PaymTermId _paymTermId,
        EmplAccount_RU _emplAccount)
    {
        boolean shouldSettleCashPayment = super(_custVendTrans, _paymTermId, _emplAccount);

        if (isCancellationForApproval)
        {
            shouldSettleCashPayment = false;
        }

        return shouldSettleCashPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCancellationForApproval</Name>
				<Source><![CDATA[
    internal boolean parmIsCancellationForApproval(boolean _isCancellationForApproval = isCancellationForApproval)
    {
        isCancellationForApproval = _isCancellationForApproval;
        return isCancellationForApproval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceJournal_IT</Name>
				<Source><![CDATA[
    private void createInvoiceJournal_IT(VendInvoiceJour _vendInvoiceJour, LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::CustomsDeclaration_IT)
        {
            VendInvoiceJour_Customs_IT vendInvoiceJour_Customs;
            LedgerJournalTrans_Customs_IT localLedgerJournalTrans_Customs;
            LedgerJournalTrans_CustomsPayment_IT localLedgerJournalTrans_CustomsPayment;
            LedgerJournalTrans localLedgerJournalTrans;

            vendInvoiceJour_Customs.initFromLedgerJournalTable(_ledgerJournalTrans.ledgerJournalTable());
            vendInvoiceJour_Customs.VendInvoiceJour = _vendInvoiceJour.RecId;
            vendInvoiceJour_Customs.insert();

            update_recordset localLedgerJournalTrans_Customs setting VendInvoiceJour = _vendInvoiceJour.RecId
            where localLedgerJournalTrans_Customs.GoodsValue != 0
            exists join localLedgerJournalTrans
                where localLedgerJournalTrans.RecId == localLedgerJournalTrans_Customs.LedgerJournalTrans
                    && localLedgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum
                    && localLedgerJournalTrans.Voucher == _ledgerJournalTrans.Voucher;

            update_recordset localLedgerJournalTrans_Customs setting VendInvoiceJour = _vendInvoiceJour.RecId
            where localLedgerJournalTrans_Customs.VendInvoiceJour == 0
            exists join localLedgerJournalTrans_CustomsPayment
                where localLedgerJournalTrans_CustomsPayment.LedgerJournalTrans_Customs == localLedgerJournalTrans_Customs.RecId
                    && localLedgerJournalTrans_CustomsPayment.PaymentAmount != 0
            exists join localLedgerJournalTrans
                where localLedgerJournalTrans.RecId == localLedgerJournalTrans_Customs.LedgerJournalTrans
                    && localLedgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum
                    && localLedgerJournalTrans.Voucher == _ledgerJournalTrans.Voucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceTrans_GB</Name>
				<Source><![CDATA[
    private void createInvoiceTrans_GB(VendInvoiceJour _invoiceJour)
    {
        VendInvoiceTrans vendInvoiceTrans;
        LedgerJournalTrans lineLedgerJournalTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans sourceLedgerJournalTrans;
        AmountCur totalAmountCur, totalTaxAmountCur;
        Counter lineNum = 0;
        NoYes journalInclTax;
        NoYes amountInclTax;
        DebitCredit debCred;
        TaxAmount taxAmountAdd;
        TaxAmount lineAmountTax;
        TaxTrans taxTrans;
        TaxCalculation taxCalculation;
        Sign sign;
        boolean ok = true;
        VendInvoiceTransRef vendInvoiceTransRef;

        if (common == null || common.TableId != tableNum(LedgerJournalTrans))
        {
            return;
        }

        ledgerJournalTrans = common;
        journalInclTax = LedgerJournalTable::find(ledgerJournalTrans.JournalNum).LedgerJournalInclTax ? NoYes::Yes : NoYes::No;

        _invoiceJour.InclTax = journalInclTax;

        while select lineLedgerJournalTrans
            where lineLedgerJournalTrans.JournalNum == ledgerJournalTrans.JournalNum &&
                  lineLedgerJournalTrans.Voucher == ledgerJournalTrans.Voucher
        {
            if ((ledgerJournalTrans.orig().AccountType == LedgerJournalACType::Vend && !ledgerJournalTrans.orig().parmOffsetAccount()) ||
                (ledgerJournalTrans.orig().OffsetAccountType == LedgerJournalACType::Vend && !ledgerJournalTrans.orig().parmAccount())) // No offset account found, a multiline invoice
            {
                if (lineLedgerJournalTrans.RecId == ledgerJournalTrans.RecId)
                {
                    continue; // Exclude header record on a multiline invoice
                }

                if (lineLedgerJournalTrans.parmAccount() && lineLedgerJournalTrans.parmOffsetAccount())
                {
                    continue; // Corresponds to another account, it's not an invoice line
                }

                debCred = lineLedgerJournalTrans.parmAccount() ? DebitCredit::Debit : DebitCredit::Credit;
            }
            else
            {
                if (lineLedgerJournalTrans.RecId != ledgerJournalTrans.RecId)
                {
                    continue; // It isn't the only line which belongs to the invoice
                }

                debCred = lineLedgerJournalTrans.AccountType == LedgerJournalACType::Vend ? DebitCredit::Credit : DebitCredit::Debit;
            }

            if (vendInvoiceJour.CurrencyCode != lineLedgerJournalTrans.CurrencyCode)
            {
                ok = checkFailed(strFmt("@GLS106867", vendInvoiceJour.InvoiceId));
            }

            if (! lineLedgerJournalTrans.Txt)
            {
                ok = checkFailed("@SYS13103");
            }

            lineNum++;
            vendInvoiceTrans.clear();
            vendInvoiceTrans.LineNum = lineNum;
            vendInvoiceTrans.initFromInvoiceJour_RU(vendInvoiceJour);
            vendInvoiceTrans.initFromLedgerJournalTrans_GB(lineLedgerJournalTrans, journalInclTax, debCred);

            taxTrans = TaxTrans::findByLedgerJournalTrans(lineLedgerJournalTrans);

            if (!taxTrans.RecId)
            {
                if (lineLedgerJournalTrans.ForeignCompany)
                {
                    changecompany(lineLedgerJournalTrans.ForeignCompany)
                    {
                        sign = (debCred == DebitCredit::Credit ? -1 : 1);

                        select firstonly sourceLedgerJournalTrans
                            where sourceLedgerJournalTrans.Voucher == lineLedgerJournalTrans.ForeignVoucher
                                && sourceLedgerJournalTrans.TransDate == lineLedgerJournalTrans.TransDate;

                        amountInclTax = LedgerJournalTable::find(sourceLedgerJournalTrans.JournalNum).LedgerJournalInclTax ? NoYes::Yes : NoYes::No;

                        lineAmountTax = Tax::taxTotalVoucherDateRecId_RU(sourceLedgerJournalTrans.Voucher, sourceLedgerJournalTrans.TransDate, sourceLedgerJournalTrans.RecId);
                        
                        taxTrans      = TaxTrans::findByLedgerJournalTrans(sourceLedgerJournalTrans);

                        if (taxTrans.RecId)
                        {
                            changecompany(sourceLedgerJournalTrans.Company)
                            {
                                vendInvoiceTrans.TaxGroup = taxTrans.TaxGroup;
                                vendInvoiceTrans.TaxItemGroup = taxTrans.TaxItemGroup;

                                vendInvoiceTrans.initFromTaxTrans_RU(taxTrans);
                            }
                        }
                        else
                        {
                            taxCalculation = LedgerJournalTrans::getTaxInstance(sourceLedgerJournalTrans.JournalNum,
                                                                                sourceLedgerJournalTrans.Voucher,
                                                                                sourceLedgerJournalTrans.Invoice,
                                                                                false,
                                                                                sourceLedgerJournalTrans);

                            lineAmountTax = taxCalculation.totalTaxAmountSingleLine(sourceLedgerJournalTrans.TableId, sourceLedgerJournalTrans.RecId, false, false);

                            changecompany(sourceLedgerJournalTrans.Company)
                            {
                                vendInvoiceTrans.TaxGroup = taxCalculation.tmpTaxWorkTrans().TaxGroup;
                                vendInvoiceTrans.TaxItemGroup = taxCalculation.tmpTaxWorkTrans().TaxItemGroup;
                            }
                        }

                        if (!amountInclTax)
                        {
                            taxAmountAdd = lineAmountTax;
                            lineAmountTax = 0;
                        }

                        vendInvoiceTrans.TaxAmount = lineAmountTax + taxAmountAdd;
                        vendInvoiceTrans.LineAmountTax = lineAmountTax;
                        vendInvoiceTrans.LineAmount = vendInvoiceTrans.LineAmount - lineAmountTax;
                        vendInvoiceTrans.LineAmountMST = _invoiceJour.amountMST(vendInvoiceTrans.LineAmount);
                    }
                }
            }

            vendInvoiceTrans.insert();

            vendInvoiceTransRef.VendInvoiceTransRecId = vendInvoiceTrans.RecId;
            vendInvoiceTransRef.LedgerJournalTransRecId = lineLedgerJournalTrans.RecId;
            vendInvoiceTransRef.insert();

            totalAmountCur += vendInvoiceTrans.LineAmount + vendInvoiceTrans.TaxAmount;
            totalTaxAmountCur += vendInvoiceTrans.TaxAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceTrans_RU</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    #define.Blank(' ')
    private Qty createInvoiceTrans_RU(VendInvoiceJour _invoiceJour)
    {
        VendInvoiceTrans vendInvoiceTrans;
        LedgerJournalTrans lineLedgerJournalTrans;
        LedgerJournalTrans ledgerJournalTrans;
        VendInvoiceJour correctedInvoiceJour;
        VendInvoiceTrans correctedInvoiceTrans;
        VendInvoiceTransCorrLink_RU corrTransLink;
        VendInvoiceJourCorrLink_RU corrJourLink;
        LedgerJournalTrans sourceLedgerJournalTrans;
        AmountCur totalAmountCur, totalTaxAmountCur;
        Qty totalQty;
        Counter lineNum = 0;
        UnknownNoYes journalInclTax;
        UnknownNoYes amountInclTax;
        DebitCredit debCred;
        TaxAmount taxAmountAdd;
        TaxAmount lineAmountTax;
        TaxTrans taxTrans;
        TaxCalculation taxCalculation;
        Sign sign;
        RefRecId refOriginalInvoice;
        boolean ok = true;

        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            return 0;
        }

        setPrefix("@SYS3179" + #Blank + _invoiceJour.InvoiceAccount);

        if (common != null && common.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = common;
            journalInclTax = LedgerJournalTable::find(ledgerJournalTrans.JournalNum).LedgerJournalInclTax ? UnknownNoYes::Yes : UnknownNoYes::No;

            while select lineLedgerJournalTrans
                where lineLedgerJournalTrans.JournalNum == ledgerJournalTrans.JournalNum &&
                      lineLedgerJournalTrans.Voucher == ledgerJournalTrans.Voucher
            {
                if ((ledgerJournalTrans.orig().AccountType == LedgerJournalACType::Vend && !ledgerJournalTrans.orig().parmOffsetAccount()) ||
                    (ledgerJournalTrans.orig().OffsetAccountType == LedgerJournalACType::Vend && !ledgerJournalTrans.orig().parmAccount())) // No offset account found, a multiline invoice
                {
                    if (lineLedgerJournalTrans.RecId == ledgerJournalTrans.RecId)
                    {
                        continue; // Exclude header record on a multiline invoice
                    }

                    if (lineLedgerJournalTrans.parmAccount() && lineLedgerJournalTrans.parmOffsetAccount())
                    {
                        continue; // Corresponds to another account, it's not an invoice line
                    }

                    debCred = lineLedgerJournalTrans.parmAccount() ? DebitCredit::Debit : DebitCredit::Credit;
                }
                else
                {
                    if (lineLedgerJournalTrans.RecId != ledgerJournalTrans.RecId)
                    {
                        continue; // It isn't the only line which belongs to the invoice
                    }

                    debCred = lineLedgerJournalTrans.AccountType == LedgerJournalACType::Vend ? DebitCredit::Credit : DebitCredit::Debit;
                }

                if (vendInvoiceJour.CurrencyCode != lineLedgerJournalTrans.CurrencyCode)
                {
                    ok = checkFailed(strFmt("@GLS106867", vendInvoiceJour.InvoiceId));
                }

                if (! lineLedgerJournalTrans.Txt)
                {
                    ok = checkFailed("@SYS13103");
                }

                lineNum++;
                vendInvoiceTrans.clear();
                vendInvoiceTrans.LineNum = lineNum;
                vendInvoiceTrans.initFromInvoiceJour_RU(vendInvoiceJour);
                vendInvoiceTrans.initFromLedgerJournalTrans_RU(lineLedgerJournalTrans, journalInclTax, debCred);
                
                taxTrans = TaxTrans::findByLedgerJournalTrans(lineLedgerJournalTrans);

                if (!taxTrans.RecId)
                {
                    if (lineLedgerJournalTrans.ForeignCompany)
                    {
                        changecompany(lineLedgerJournalTrans.ForeignCompany)
                        {
                            sign = (debCred == DebitCredit::Credit ? -1 : 1);

                            select firstonly sourceLedgerJournalTrans
                                where sourceLedgerJournalTrans.Voucher == lineLedgerJournalTrans.ForeignVoucher
                                   && sourceLedgerJournalTrans.TransDate == lineLedgerJournalTrans.TransDate;

                            amountInclTax = LedgerJournalTable::find(sourceLedgerJournalTrans.JournalNum).LedgerJournalInclTax ? UnknownNoYes::Yes : UnknownNoYes::No;

                            lineAmountTax = Tax::taxTotalVoucherDateRecId_RU(sourceLedgerJournalTrans.Voucher, sourceLedgerJournalTrans.TransDate, sourceLedgerJournalTrans.RecId);
                            
                            taxTrans = TaxTrans::findByLedgerJournalTrans(sourceLedgerJournalTrans);

                            if (taxTrans.RecId)
                            {
                                changecompany(sourceLedgerJournalTrans.Company)
                                {
                                    vendInvoiceTrans.TaxGroup = taxTrans.TaxGroup;
                                    vendInvoiceTrans.TaxItemGroup = taxTrans.TaxItemGroup;
                                    vendInvoiceTrans.initFromTaxTrans_RU(taxTrans);
                                }
                            }
                            else
                            {
                                taxCalculation = LedgerJournalTrans::getTaxInstance(sourceLedgerJournalTrans.JournalNum,
                                                                                    sourceLedgerJournalTrans.Voucher,
                                                                                    sourceLedgerJournalTrans.Invoice,
                                                                                    false,
                                                                                    sourceLedgerJournalTrans);

                                lineAmountTax = taxCalculation.totalTaxAmountSingleLine(sourceLedgerJournalTrans.TableId, sourceLedgerJournalTrans.RecId, false, false);

                                changecompany(sourceLedgerJournalTrans.Company)
                                {
                                    vendInvoiceTrans.TaxGroup = taxCalculation.tmpTaxWorkTrans().TaxGroup;
                                    vendInvoiceTrans.TaxItemGroup = taxCalculation.tmpTaxWorkTrans().TaxItemGroup;

                                    vendInvoiceTrans.initFromTaxWorkTrans_RU(taxCalculation.tmpTaxWorkTrans(), sourceLedgerJournalTrans.TableId, sourceLedgerJournalTrans.RecId);
                                }
                            }

                            if (amountInclTax == UnknownNoYes::No)
                            {
                                taxAmountAdd = lineAmountTax;
                                lineAmountTax = 0;
                            }

                            vendInvoiceTrans.vatAmount_RU = vendInvoiceTrans.vatAmount_RU * sign;
                            vendInvoiceTrans.vatAmountMST_RU = vendInvoiceTrans.vatAmountMST_RU * sign;
                            vendInvoiceTrans.ExciseAmount_RU = vendInvoiceTrans.ExciseAmount_RU * sign;
                            vendInvoiceTrans.ExciseAmountMST_RU = vendInvoiceTrans.ExciseAmountMST_RU * sign;

                            vendInvoiceTrans.TaxAmount = lineAmountTax + taxAmountAdd;
                            vendInvoiceTrans.LineAmountTax = lineAmountTax;

                            vendInvoiceTrans.LineAmount = vendInvoiceTrans.LineAmount - lineAmountTax;
                        }
                    }
                }
                if (_invoiceJour.CorrectedInvoiceId_RU && _invoiceJour.CorrectedInvoiceDate_RU)
                {
                    correctedInvoiceJour = VendInvoiceJour::findFromVendTrans(_invoiceJour.CorrectedInvoiceId_RU,_invoiceJour.CorrectedInvoiceDate_RU, _invoiceJour.InvoiceAccount);

                    refOriginalInvoice = correctedInvoiceJour.refOriginalInvoiceRecId_RU();
                    if (!refOriginalInvoice)
                    {
                        refOriginalInvoice = correctedInvoiceJour.RecId;
                    }

                    select firstonly correctedInvoiceTrans
                        where correctedInvoiceTrans.Name == vendInvoiceTrans.Name &&
                              correctedInvoiceTrans.TaxGroup == vendInvoiceTrans.TaxGroup &&
                              correctedInvoiceTrans.TaxItemGroup == vendInvoiceTrans.TaxItemGroup
                    join TableId from correctedInvoiceJour
                        where correctedInvoiceTrans.PurchID == correctedInvoiceJour.PurchId &&
                              correctedInvoiceTrans.InvoiceId == correctedInvoiceJour.InvoiceId &&
                              correctedInvoiceTrans.InvoiceDate == correctedInvoiceJour.InvoiceDate &&
                              correctedInvoiceTrans.NumberSequenceGroup == correctedInvoiceJour.NumberSequenceGroup &&
                              correctedInvoiceTrans.InternalInvoiceId == correctedInvoiceJour.InternalInvoiceId
                    outer join TableId from corrJourLink
                        where correctedInvoiceJour.RecId == refOriginalInvoice || (corrJourLink.JourRecId == correctedInvoiceJour.RecId && corrJourLink.CorrJourRecId == refOriginalInvoice)
                    notexists join corrTransLink
                        where corrTransLink.TransRecId == correctedInvoiceTrans.RecId;

                    VendInvoiceTransCorrLink_RU::createLink(vendInvoiceTrans.RecId, correctedInvoiceTrans.RecId);
                }

                vendInvoiceTrans.insert();

                totalAmountCur += vendInvoiceTrans.LineAmount + vendInvoiceTrans.TaxAmount;
                totalTaxAmountCur += vendInvoiceTrans.TaxAmount;
                totalQty += vendInvoiceTrans.Qty;
            }

            _invoiceJour.SumTax = totalTaxAmountCur;
            _invoiceJour.InvoiceAmount = totalAmountCur;
        }

        if (_invoiceJour.InvoiceAmount != totalAmountCur || abs(_invoiceJour.SumTax) != abs(totalTaxAmountCur))
        {
            ok = checkFailed(strFmt("@GLS106868", totalAmountCur, totalTaxAmountCur, vendInvoiceJour.InvoiceId));
        }

        ok = ok && _invoiceJour.checkVATTaxAgentChargeType_RU();

        if (! ok)
        {
            throw error("@SYS18447");
        }

        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymScheduleSpecifications</Name>
				<Source><![CDATA[
    void createPaymScheduleSpecifications(CustVendTrans _custVendTrans)
    {
        SpecTransManager specTransManager;
        VendTransOpen vendTransOpen;

        while select DataAreaId, RecId, AmountCur, RefRecId from vendTransOpen
            where vendTransOpen.RefRecId == _custVendTrans.RecId
        {
            specTransManager = SpecTransManager::newFromSpec(common, false);
            specTransManager.insert(vendTransOpen.DataAreaId, vendTransOpen.TableId, vendTransOpen.RecId, vendTransOpen.AmountCur, _custVendTrans.CurrencyCode, _custVendTrans.Invoice ? NoYes::No : NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransOpen</Name>
				<Source><![CDATA[
    protected CustVendTransOpen createTransOpen(CustVendTrans _custVendTrans)
    {
        VendTransOpen vendTransOpen;
        VendTrans vendTransLocal;

        // <GIN>
        CustVendTrans_W custVendTrans_W;
        #isoCountryRegionCodes
        // </GIN>

        vendTransOpen.AmountCur = _custVendTrans.AmountCur;
        vendTransOpen.AmountMST = _custVendTrans.AmountMST;
        vendTransOpen.ReportingCurrencyAmount = _custVendTrans.ReportingCurrencyAmount;
        vendTransOpen.DueDate = ! isDueDateSet && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]) ? _custVendTrans.DueDate : dueDate;
        vendTransOpen.BankDiscNoticeDeadline = bankDiscNoticeDeadline;
        vendTransOpen.TransDate = _custVendTrans.TransDate;
        vendTransOpen.RefRecId = _custVendTrans.RecId;
        vendTransOpen.AccountNum = _custVendTrans.AccountNum;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            vendTransOpen.ThirdPartyBankAccountId = _custVendTrans.ThirdPartyBankAccountId;
        }

        // <GIN>
        vendTransOpen = this.initVendTransOpenWHTAmount_IN(_custVendTrans, vendTransOpen);
        if (TaxParameters::checkTaxParameters_IN())
        {
            custVendTrans_W = _custVendTrans.CustVendTrans::getCustVendTrans_W();
            vendTransOpen.gtaRecoverableAmount_IN = custVendTrans_W.gtaAmount_IN;
            vendTransOpen.Settlement_IN = custVendTrans_W.Settlement_IN;
            vendTransOpen.TaxComponentTable_IN = custVendTrans_W.TaxComponentTable_IN;
        }
        // </GIN>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            vendTransOpen.InterestCode_BR = interestCode;
            vendTransOpen.FineCode_BR = fineCode;
        }
        // </GBR>

        if (BankLCImportFeatureChecker::checkBankLCImportEnabled())
        {
            if (_custVendTrans.TableId == tableNum(VendTrans))
            {
                vendTransLocal = _custVendTrans;
                vendTransOpen.BankLCImportLine = vendTransLocal.BankLCImportLine;
            }
        }

        return vendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTable</Name>
				<Source><![CDATA[
    public CustVendTable custVendTable()
    {
        return VendTable::find(accountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendName</Name>
				<Source><![CDATA[
    protected Name getCustVendName()
    {
        return VendTable::find(accountNum).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentLedgerTransactionTxt</Name>
				<Source><![CDATA[
    protected LedgerTransTxt getPaymentLedgerTransactionTxt()
    {
        return LedgerTransTxt::VendPaymentLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentTransactionTxt</Name>
				<Source><![CDATA[
    protected LedgerTransTxt getPaymentTransactionTxt()
    {
        return LedgerTransTxt::VendPaymentVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTrans</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    protected void initCustVendTrans(
        CustVendTrans _custVendTrans,
        LedgerVoucher _ledgerPostingJournal,
        boolean _useSubLedger = false)
    {
        FactureTrans_RU factureTrans;
        LedgerJournalTrans ledgerJournalTrans;
        CustVendTrans_W custVendTrans_W;
        VendTransPayment_BR payment_BR;
        VendTrans vendTransLocal;

        super(_custVendTrans, _ledgerPostingJournal, _useSubLedger);

        if (common && common.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = common;

            if (_custVendTrans.Prepayment && SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
            {
                factureTrans = FactureTrans_RU::findLedgerJournalTrans('', 0, ledgerJournalTrans.RecId, false);

                custVendTrans_W = _custVendTrans.CustVendTrans::getCustVendTrans_W();
                custVendTrans_W.PrepaymentFactureId_W = factureTrans.FactureId;
                _custVendTrans.CustVendTrans::packCustVendTrans_W(custVendTrans_W);
            }
        }
        if (_custVendTrans.TableId == tableNum(VendTrans))
        {
            custVendTrans_W = _custVendTrans.CustVendTrans::getCustVendTrans_W();
            custVendTrans_W.BankCurrencyTransferId_RU = currencyTransferId;
            _custVendTrans.CustVendTrans::packCustVendTrans_W(custVendTrans_W);
        }

        if (BrazilParameters::isEnabled())
        {
            vendTransLocal = _custVendTrans;
            payment_BR = vendTransLocal.getPaymentExtension_BR();
            payment_BR.VendInterestSetup_BR = interestCode;
            payment_BR.VendFineSetup_BR = fineCode;
            payment_BR.FiscalEstablishment_BR = this.parmFiscalEstablishmentRecId_BR();
            vendTransLocal.SysExtensionSerializerMap::packExtensionTable(payment_BR);
        }

        if (isItalyEnabled)
        {
            this.initCustVendTrans_IT(_custVendTrans);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTrans_IT</Name>
				<Source><![CDATA[
    private void initCustVendTrans_IT(CustVendTrans _custVendTrans)
    {
        Amount vendorGoodsValue;

        if (customsTrans && !customsTrans.ledgerJournalTable_Customs().SkipGoodsTrans)
        {
            vendorGoodsValue = customsTrans.calcVendorGoodsValue();
            _custVendTrans.AmountCur += vendorGoodsValue;
            _custVendTrans.AmountMST += CurrencyExchangeHelper::amountCur2MST(
				vendorGoodsValue,
				currencyCode,
				exchRate,
				transDate,
				exchRateSecondary,
				triangulation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPostingProfile</Name>
				<Source><![CDATA[
    protected void initFromPostingProfile(CustVendTrans vendTrans, PostingProfile _vendPostingProfile)
    {
        vendTrans.initFromPostingProfile(_vendPostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendCreditInvoicingJour</Name>
				<Source><![CDATA[
    protected void insertVendCreditInvoicingJour(LedgerJournalTrans _ledgerJournalTrans)
    {
        CustVendCreditInvoicingTable custVendCreditInvoicingTable;
        CustVendCreditInvoicingJour custVendCreditInvoicingJour;
        #ISOCountryRegionCodes

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES, #isoSE, #isoPL])
                || FeatureStateProvider::isFeatureEnabled(CreditInvoicingForVendorInvoicesFeature::instance()))
            {
                if (_ledgerJournalTrans)
                {
                    custVendCreditInvoicingTable = CustVendCreditInvoicingTable::findRefId(_ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId, true);
                    if (custVendCreditInvoicingTable)
                    {
                        custVendCreditInvoicingJour.insertFromCustVendCreditInvoicingTable(custVendCreditInvoicingTable, vendInvoiceJour);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAmountBelowCreditMax</Name>
				<Source><![CDATA[
    protected boolean isAmountBelowCreditMax(TypeOfCreditmaxCheck _typeOfCreditmaxCheck = TypeOfCreditmaxCheck::Balance)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDueDate</Name>
				<Source><![CDATA[
    public DueDate parmDueDate(DueDate _dueDate = dueDate)
    {
        DueDate ret;

        ret = super(_dueDate);

        if (ret)
        {
            isDueDateSet = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentRecId_BR</Name>
				<Source><![CDATA[
    public FiscalEstablishmentRecId_BR parmFiscalEstablishmentRecId_BR(FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId = fiscalEstablishmentRecId)
    {
        fiscalEstablishmentRecId = _fiscalEstablishmentRecId;

        return fiscalEstablishmentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTCSApplicable_IN</Name>
				<Source><![CDATA[
    public boolean parmIsTCSApplicable_IN(boolean _isTCSApplicable = isTCSApplicable)
    {
        isTCSApplicable = _isTCSApplicable;

        return isTCSApplicable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTDSApplicable_IN</Name>
				<Source><![CDATA[
    public boolean parmIsTDSApplicable_IN(boolean _isTDSApplicable = isTDSApplicable)
    {
        isTDSApplicable = _isTDSApplicable;

        return isTDSApplicable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdTAN_IN</Name>
				<Source><![CDATA[
    public TaxWithholdRegNumberRecId_IN parmTaxWithholdTAN_IN(TaxWithholdRegNumberRecId_IN _tanNumber = tanNumber)
    {
        tanNumber = _tanNumber;
        return tanNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(
        LedgerVoucher _ledgerPostingJournal,
        CustVendTrans _vendTrans,
        NoYes _approval = NoYes::No,
        UnknownNoYes _euroTriangulation = Currency::noYes2UnknownNoYes(triangulation),
        boolean _withHoldTaxType = false,
        boolean _useSubLedger = false)
    {
        ttsbegin;

        // this call is required for the call to UpdateCashDiscount below
        this.initLedgerPosting(_ledgerPostingJournal);

        if (_approval)
        {
            this.updateCashDiscount();
        }

        super(_ledgerPostingJournal, _vendTrans, _approval, _euroTriangulation, _withHoldTaxType, _useSubLedger);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postForSettlement</Name>
				<Source><![CDATA[
    public void postForSettlement(LedgerVoucher _ledgerPostingJournal, VendTrans vendTrans, recId recId = 0)
    {
        int doInsert;
        SpecTrans lspecTrans;
        VendTrans lvendTrans;

        ttsbegin;

        // Check to see if the InvoiceProject flag is set
        if (vendTrans.InvoiceProject == NoYes::No)
        {
            doInsert = 1;
        }
        else
        {
            doInsert = 0;
        }

        // Call the original post
        this.post(_ledgerPostingJournal, vendTrans);

        // We need to insert a new row in the projtransposting corresponding to the entry in the
        // CustTrans
        // We need to enter this row only if the request comes from the settlement - not from
        // Purchase order
        // Get the original voucher number from the queries
        while select crossCompany lspecTrans
            where lspecTrans.SpecTableId == tableNum(LedgerJournalTrans)
            && lspecTrans.SpecRecId == recId
            && lspecTrans.SpecCompany == curext()
            && lspecTrans.RefTableId == tableNum(VendTransOpen)
        {
            lvendTrans = lspecTrans.vendTrans();

            // Insert into the projtransposting
            if (doInsert == 1)
            {
                //VendVoucher::updateProjTransPosting(vendTrans.TransDate, vendTrans.Voucher, ProjPaymentStatus::Paid);
                // We need to give the voucher of the record present in the ProjTransPosting
                VendVoucher::updateProjTransPosting(vendTrans.TransDate, lvendTrans.Voucher, ProjPaymentStatus::Paid);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer</Name>
				<Source><![CDATA[
    protected void setBuffer()
    {
        custVendInvoiceJour = vendInvoiceJour;
        custVendPaymSched = vendPaymSched;
        custVendPaymSchedLine = vendPaymSchedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryLedgerDimension</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount summaryLedgerDimension()
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalType ledgerJournalType;
        LedgerDimensionDefaultAccount ledgerDimDefaultAccount;

        if (common != null && common.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = common;
            ledgerJournalType = ledgerJournalTrans.ledgerJournalTable().JournalType;
        }

        if (ledgerJournalType == LedgerJournalType::PurchaseLedger)
        {
            ledgerDimDefaultAccount = VendLedgerAccounts::purchasingLedgerDimension(accountNum, postingProfile);
        }
        else
        {
            if (! ledgerDimDefaultAccount)
            {
                ledgerDimDefaultAccount = VendLedgerAccounts::summaryLedgerDimension(accountNum, postingProfile);
            }
        }
        return ledgerDimDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashDiscount</Name>
				<Source><![CDATA[
    void updateCashDiscount()
    {
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        VendTransCashDisc vendTransCashDisc;
        AmountCur cashDiscBase;

        select firstonly RecId, AccountNum, Voucher, TransDate, AmountCur, DocumentDate from vendTrans
        where vendTrans.AccountNum == custVendInvoiceJour.InvoiceAccount &&
              vendTrans.Voucher == custVendInvoiceJour.LedgerVoucher &&
              vendTrans.TransDate == custVendInvoiceJour.InvoiceDate;

        using (TaxIntegrationTaxJurisdictionParametersContext taxIntegrationTaxJurisdictionParametersContext = TaxIntegrationTaxJurisdictionParametersContext::construct(custVendInvoiceJour.TableId, custVendInvoiceJour.RecId))
        {
            cashDiscBase = LedgerJournalCashDiscService::baseAmountCashDisc(ModuleCustVend::Vend,
                                                                           CustVendTransCashDisc::amountExclTax(amountCur, -custVendInvoiceJour.SumTax),
                                                                           -custVendInvoiceJour.SumTax,
                                                                            CashDisc::find(cashDiscCode).Percent);
        }

        while select forupdate vendTransOpen
            where vendTransOpen.RefRecId == vendTrans.RecId
        {
            vendTransCashDisc = vendTransCashDisc.calcCashDisc(vendTransOpen.company(),
                                                                   currencyCode,
                                                                   cashDiscBase * vendTransOpen.AmountCur / vendTrans.AmountCur,
                                                                   dueDate,
                                                                   vendTrans.DocumentDate ? vendTrans.DocumentDate : vendTransOpen.TransDate,
                                                                   cashDiscCode,
                                                                   vendTransOpen.TableId,
                                                                   vendTransOpen.RecId);
            if (vendTransCashDisc)
            {
                vendTransCashDisc.CashDiscAmount = CurrencyExchangeHelper::amount(cashDiscAmount * vendTransOpen.AmountCur / vendTrans.AmountCur, currencyCode);
                vendTransCashDisc.CashDiscdate = cashDiscDate;
                vendTransCashDisc.update();
            }

            // VendTransOpen is updated in vendTransCashDisc.update(), so reread it here
            vendTransOpen.reread();
            vendTransOpen.setCashDisc(cashDiscDate);
            vendTransOpen.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendVoucherAdvanceApplication</Name>
				<Source><![CDATA[
    public static VendVoucherPurch newVendVoucherAdvanceApplication(
        LedgerTransTxt _ledgerTransTxt,
        VendInvoiceJour _vendInvoiceJour,
        VendInvoiceTrans _vendInvoiceTrans,
        boolean _isReversePrepayApplication = false)
    {
        VendVoucherPurch vendVoucherPurch;
        SettlementType settlementType;
        VendTrans vendTransLocal;
        VendInvoiceJour vendInvoiceJour_Advance;

        vendVoucherPurch = new VendVoucherPurch();

        if (_isReversePrepayApplication)
        {
            // when reverse prepayment application, the voucher for prepayment application line which is being reversed is passed
            VendInvoiceTrans vendInvoiceTransAdvance = VendInvoiceTrans::findRecId(_vendInvoiceTrans.AdvanceApplicationId);

            vendTransLocal = VendTrans::findAccountVoucherDate(_vendInvoiceJour.InvoiceAccount, vendInvoiceTransAdvance.InternalInvoiceId, vendInvoiceTransAdvance.InvoiceDate);

            // reverse prepayment application should not perform any automatic settlement
            settlementType = SettlementType::None;
        }
        else
        {
            vendTransLocal = VendTrans::findAccountVoucherDate(_vendInvoiceJour.InvoiceAccount, _vendInvoiceJour.LedgerVoucher, _vendInvoiceJour.InvoiceDate);
            settlementType = SettlementType::SelectedTransact;
        }

        vendVoucherPurch.init(_vendInvoiceJour.InvoiceAccount,
            -_vendInvoiceTrans.LineAmount,
            _vendInvoiceJour.CurrencyCode,
            _ledgerTransTxt,
            _vendInvoiceJour.DefaultDimension,
            _vendInvoiceJour.PostingProfile,
            LedgerPostingType::VendBalance,
            _vendInvoiceJour.Payment,
            settlementType,
            0,
            0,
            _vendInvoiceJour.InvoiceId,
            _vendInvoiceJour.CashDiscDate,
            -_vendInvoiceJour.CashDisc,
            _vendInvoiceJour.DueDate,
            vendTransLocal,
            TypeOfCreditmaxCheck::Balance,
            _vendInvoiceJour.CashDiscCode);

        if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
        {
            vendVoucherPurch.parmModule(SysModule::Vend);
        }

        if (_isReversePrepayApplication)
        {
            vendVoucherPurch.parmExchRateSecondary(vendTransLocal.ExchRateSecond);
            vendVoucherPurch.parmExchRate(vendTransLocal.ExchRate);
        }
        else
        {
            // Use the exchange rate information from the original prepayment invoice in order to calculate any gain or loss during settlement
            vendInvoiceJour_Advance = VendInvoiceJour::findRecId(_vendInvoiceTrans.AdvanceApplicationId);

            vendVoucherPurch.parmExchRateSecondary(vendInvoiceJour_Advance.ExchRateSecondary);
            vendVoucherPurch.parmExchRate(vendInvoiceJour_Advance.ExchRate);
            vendVoucherPurch.parmReportingCurrencyExchRate(vendInvoiceJour_Advance.ReportingCurrencyExchangeRate);
        }

        vendVoucherPurch.setInvoiceJournal(_vendInvoiceJour);
        vendVoucherPurch.parmFormLetter(_vendInvoiceJour.InvoiceId);
        vendVoucherPurch.parmTransType(LedgerTransType::PurchAdvanceApplication);

        return vendVoucherPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendVoucherCustom_RU</Name>
				<Source><![CDATA[
    public static VendVoucher newVendVoucherCustom_RU(AmountCur _amountCur,
                                                      CustomJournalTable_RU _customJournalTable,
                                                      Voucher _voucher,
                                                      Num _num,
                                                      TransDate _transDate,
                                                      CustVendAC _accountNum,
                                                      PostingProfile _postingProfile,
                                                      CurrencyCode _currencyCode = CompanyInfoHelper::standardCurrency())
    {
        VendVoucher vendVoucher;
        ExchangeRateHelper helper;

        helper = ExchangeRateHelper::newExchangeDate(Ledger::current(), _currencyCode, _transDate);
        vendVoucher = new VendVoucher();

        vendVoucher.init(_accountNum, _amountCur, _currencyCode, LedgerTransTxt::None, _customJournalTable.DefaultDimension);

        if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
        {
            vendVoucher.parmModule(SysModule::Vend);
        }

        vendVoucher.parmLedgerPostingType(LedgerPostingType::VendBalance);
        vendVoucher.parmTransDate(_transDate);
        vendVoucher.parmTransVoucher(_voucher);
        vendVoucher.parmInvoiceId(_num);
        vendVoucher.parmLanguageId(VendTable::find(_accountNum).languageId());
        vendVoucher.parmTransType(LedgerTransType::Vend);
        vendVoucher.parmCommon_RU(_customJournalTable);
        vendVoucher.parmPostingProfile(_postingProfile);
        vendVoucher.parmExchRate(helper.getExchangeRate1());
        vendVoucher.parmExchRateSecondary(helper.getExchangeRate2());

        return vendVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendVoucherJournal</Name>
				<Source><![CDATA[
    public static VendVoucher newVendVoucherJournal(
        LedgerJournalTrans _ledgerJournalTrans,
        AmountCur _amountCur,
        LedgerTransTxt _ledgerTransTxt = LedgerTransTxt::None,
        AmountCur _taxAgentVATAmount = 0)

    {
        VendVoucher vendVoucher;
        LedgerJournalTable ledgerJournalTable = _ledgerJournalTrans.ledgerJournalTable();
        LedgerJournalType ledgerJournalType = ledgerJournalTable.JournalType;
        LedgerJournalType originalJournalType = ledgerJournalTable.findOriginalJournalType();
        Amount amount;
        Approved approved;
        HcmApprover hcmApprover;
        #ISOCountryRegionCodes

        switch (ledgerJournalType)
        {
            case LedgerJournalType::Approval:
                if (_ledgerJournalTrans.Cancel == NoYes::Yes)
                {
                    vendVoucher = new VendVoucherJournalCancel();

                    vendVoucher.init(_ledgerJournalTrans.parmAccount(),
                        _ledgerJournalTrans.amount() + _amountCur,
                        _ledgerJournalTrans.CurrencyCode,
                        _ledgerTransTxt,
                        _ledgerJournalTrans.DefaultDimension,
                        _ledgerJournalTrans.PostingProfile,
                        LedgerPostingType::VendBalance,
                        _ledgerJournalTrans.Payment,
                        _ledgerJournalTrans.SettleVoucher,
                        HcmWorker::userId2Worker(curUserId()),
                        NoYes::Yes,
                        '',
                        dateNull(),
                        0,
                        dateNull(),
                        _ledgerJournalTrans);
                    
                    vendVoucher.parmIsCancellationForApproval(true);
                }
                else
                {
                    vendVoucher = new VendVoucherJournalApproval();

                    vendVoucher.init(_ledgerJournalTrans.parmAccount(),
                        _ledgerJournalTrans.amount() + _amountCur,
                        _ledgerJournalTrans.CurrencyCode,
                        _ledgerTransTxt,
                        _ledgerJournalTrans.DefaultDimension,
                        _ledgerJournalTrans.PostingProfile,
                        LedgerPostingType::VendBalance,
                        _ledgerJournalTrans.Payment,
                        _ledgerJournalTrans.SettleVoucher,
                        HcmWorker::userId2Worker(curUserId()),
                        NoYes::Yes,
                        '',
                        dateNull(),
                        0,
                        dateNull(),
                        _ledgerJournalTrans);
                }
                break;

            default :
                if (TaxParameters::canApplyCashDiscOnInvoice_ES() && (ledgerJournalType == LedgerJournalType::Daily || ledgerJournalType == LedgerJournalType::VendInvoiceRegister))
                {
                    amount = _ledgerJournalTrans.amount() + _amountCur - _ledgerJournalTrans.CashDiscAmount;
                    approved = NoYes::Yes;
                    hcmApprover = HcmWorker::userId2Worker(curUserId());
                }
                else
                {
                    amount = _ledgerJournalTrans.amount() + _amountCur;
                    approved = _ledgerJournalTrans.Approved;
                    hcmApprover = _ledgerJournalTrans.Approver;
                }

                vendVoucher = new VendVoucherJournal();

                vendVoucher.init(_ledgerJournalTrans.parmAccount(),
                    amount,
                    _ledgerJournalTrans.CurrencyCode,
                    _ledgerTransTxt,
                    _ledgerJournalTrans.DefaultDimension,
                    _ledgerJournalTrans.PostingProfile,
                    LedgerPostingType::VendBalance,
                    ledgerJournalType == LedgerJournalType::VendInvoiceRegister ||
                    ledgerJournalType == LedgerJournalType::PurchaseLedger ||
                       (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]) && ledgerJournalType == LedgerJournalType::Daily && _ledgerJournalTrans.Invoice)  ?
                    _ledgerJournalTrans.Payment : '',
                    _ledgerJournalTrans.SettleVoucher,
                    hcmApprover,
                    approved,
                    '',
                    dateNull(),
                    0,
                    dateNull(),
                    _ledgerJournalTrans);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
        {
            vendVoucher.parmModule(SysModule::Vend);
        }

        vendVoucher.parmExchRate(_ledgerJournalTrans.ExchRate);
        vendVoucher.parmExchRateSecondary(_ledgerJournalTrans.ExchRateSecond);
        vendVoucher.parmTriangulation(_ledgerJournalTrans.Triangulation);
        vendVoucher.parmReportingCurrencyExchRate(_ledgerJournalTrans.ReportingCurrencyExchRate);
        vendVoucher.parmReportingCurrencyExchRateSecondary(_ledgerJournalTrans.ReportingCurrencyExchRateSecondary);        
        vendVoucher.parmCashDiscCode(_ledgerJournalTrans.CashDiscCode);
        vendVoucher.parmCashDiscBaseDate(_ledgerJournalTrans.CashDiscBaseDate);
        vendVoucher.parmCashDiscDate(_ledgerJournalTrans.DateCashDisc);
        vendVoucher.parmCashDiscAmount(_ledgerJournalTrans.CashDiscAmount);
        vendVoucher.parmDueDate(_ledgerJournalTrans.Due);
        vendVoucher.parmPaymMode(_ledgerJournalTrans.PaymMode);
        vendVoucher.parmPaymSpec(_ledgerJournalTrans.PaymSpec);
        vendVoucher.parmPaymTermId(_ledgerJournalTrans.Payment);
        vendVoucher.parmTransDate(_ledgerJournalTrans.TransDate);
        vendVoucher.parmTransVoucher(_ledgerJournalTrans.Voucher);
        vendVoucher.parmTransTxt(_ledgerJournalTrans.Txt);
        vendVoucher.parmDocumentDate(_ledgerJournalTrans.DocumentDate);
        vendVoucher.parmDocumentNum(_ledgerJournalTrans.DocumentNum);
        vendVoucher.parmPaymReference(_ledgerJournalTrans.PaymReference);
        vendVoucher.parmInvoiceId(_ledgerJournalTrans.Invoice);
        vendVoucher.parmThirdPartyBankAccountId(_ledgerJournalTrans.CustVendBankAccountId);
        vendVoucher.parmPrePayment(_ledgerJournalTrans.Prepayment);
        // <GEERU>
        vendVoucher.parmCommProfileType_RU(_ledgerJournalTrans.CommProfileType_RU);
        // </GEERU>
        vendVoucher.parmTypeOfCreditmaxCheck(VendParameters::find().CreditMaxCheck);
        vendVoucher.parmCustVendNegInstStatus(CustVendNegInstStatus::Invoiced);
        vendVoucher.parmLanguageId(VendTable::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension).languageId());
        vendVoucher.parmTransType(_ledgerJournalTrans.TransactionType);
        vendVoucher.parmReasonRefRecID(_ledgerJournalTrans.ReasonRefRecID);
        // <GEERU>
        vendVoucher.parmTaxAgentVATAmount_RU(_taxAgentVATAmount);
        vendVoucher.parmFinTag(_ledgerJournalTrans.FinTag);
        // </GEERU>

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt = _ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();
            vendVoucher.parmIsTDSApplicable_IN(ledgerJournalTransTaxExt.TDSGroup != '');
            vendVoucher.parmIsTCSApplicable_IN(ledgerJournalTransTaxExt.TCSGroup != '');
        }
        // </GIN>

        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank && !_ledgerJournalTrans.isOffsetCompanyIntercompany())
        {
            vendVoucher.parmCompanyBankAccountId(_ledgerJournalTrans.parmOffsetAccount());
        }

        switch (ledgerJournalType)
        {
            case LedgerJournalType::Daily:

                vendVoucher.parmApproved(approved);
                if (approved)
                {
                    vendVoucher.parmApprover(_ledgerJournalTrans.Approver ? _ledgerJournalTrans.Approver : HcmWorker::userId2Worker(curUserId()));
                }
                break;

            case LedgerJournalType::BankChequeReversal,
                 LedgerJournalType::BankDepositPaymCancel,
                 LedgerJournalType::Assets:

                vendVoucher.parmApproved(NoYes::Yes);
                vendVoucher.parmApprover(_ledgerJournalTrans.Approver ? _ledgerJournalTrans.Approver : HcmWorker::userId2Worker(curUserId()));
                break;

            case LedgerJournalType::VendPromissoryNoteDraw,
                 LedgerJournalType::VendPromissoryNoteRedraw,
                 LedgerJournalType::VendPromissoryNoteSettle,
                 LedgerJournalType::VendPaymRemittance:

                vendVoucher.parmCompanyBankAccountId(_ledgerJournalTrans.BankAccountId);
                break;
        }

        if (originalJournalType == LedgerJournalType::BankChequeReversal || originalJournalType == LedgerJournalType::BankDepositPaymCancel)
        {
            vendVoucher.parmApproved(NoYes::Yes);
            vendVoucher.parmApprover(_ledgerJournalTrans.Approver ? _ledgerJournalTrans.Approver : HcmWorker::userId2Worker(curUserId()));
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            vendVoucher.parmBankCentralBankPurposeCode(_ledgerJournalTrans.BankCentralBankPurposeCode);
            vendVoucher.parmBankCentralBankPurposeText(_ledgerJournalTrans.BankCentralBankPurposeText);
        }

        if (ledgerJournalType == LedgerJournalType::CustomsDeclaration_IT && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            vendVoucher.parmCustomsTrans_IT(LedgerJournalTrans_Customs_IT::findByLedgerJournalTrans(_ledgerJournalTrans.RecId, true));
        }

        return vendVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendVoucherPurch</Name>
				<Source><![CDATA[
    public static VendVoucherPurch newVendVoucherPurch(
        LedgerTransTxt _ledgerTransTxt,
        VendInvoiceJour _vendInvoiceJour,
        VendInvoiceInfoTable _vendInvoiceInfoTable,
        PurchTable _purchTable)
    {
        VendVoucherPurch vendVoucherPurch;
        SettlementType settlementType;
        Common common;
        #ISOCountryRegionCodes
        // <GBR>
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W;
        // </GBR>

        if (_vendInvoiceInfoTable.isNonPO())
        {
            settlementType = _vendInvoiceInfoTable.SettleVoucher;
            common = _vendInvoiceInfoTable;
        }
        else
        {
            settlementType = _purchTable.SettleVoucher;
            common = _purchTable;
        }

        vendVoucherPurch = new VendVoucherPurch();

        vendVoucherPurch.init(_vendInvoiceJour.InvoiceAccount,
            -_vendInvoiceJour.InvoiceAmount,
            _vendInvoiceJour.CurrencyCode,
            _ledgerTransTxt,
            _vendInvoiceJour.DefaultDimension,
            _vendInvoiceJour.PostingProfile,
            LedgerPostingType::VendBalance,
            _vendInvoiceJour.Payment,
            settlementType,
            _vendInvoiceInfoTable.Approver,
            _vendInvoiceInfoTable.Approved,
            _vendInvoiceJour.InvoiceId,
            _vendInvoiceJour.CashDiscDate,
            -_vendInvoiceJour.CashDisc,
            _vendInvoiceJour.DueDate,
            common,
            TypeOfCreditmaxCheck::Balance,
            _vendInvoiceJour.CashDiscCode);

        if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
        {
            vendVoucherPurch.parmModule(SysModule::Vend);
        }

        vendVoucherPurch.setInvoiceJournal(_vendInvoiceJour);
        vendVoucherPurch.parmFormLetter(_vendInvoiceJour.InvoiceId);
        vendVoucherPurch.parmPaymMode(_vendInvoiceInfoTable.PaymMode);
        vendVoucherPurch.parmPaymSpec(_vendInvoiceInfoTable.PaymSpec);
        vendVoucherPurch.parmThirdPartyBankAccountId(_vendInvoiceInfoTable.VendBankAccountID);
        vendVoucherPurch.parmCustVendNegInstStatus(CustVendNegInstStatus::Invoiced);
        vendVoucherPurch.parmFixedExchRate(_vendInvoiceInfoTable.FixedExchRate);

        if (FinTagConfiguration::isFinTagConfigurationSet(_vendInvoiceJour.DataAreaId) && PurchaseOrderFinTagFeature::isEnabled())
        {
            vendVoucherPurch.parmFinTag(_vendInvoiceJour.FinTag);
        }

        if (_vendInvoiceInfoTable.FixedExchRate == NoYes::Yes && _vendInvoiceInfoTable.ReportingCurrencyExchangeRate != 0.0)
        {
            vendVoucherPurch.parmReportingCurrencyExchRate(_vendInvoiceInfoTable.ReportingCurrencyExchangeRate);
        }

        vendVoucherPurch.parmPaymTermId(_vendInvoiceJour.Payment);
        vendVoucherPurch.parmCashDiscCode(_vendInvoiceJour.CashDiscCode);
        vendVoucherPurch.parmTransTxt(_vendInvoiceJour.Description);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            vendVoucherPurch.parmBankCentralBankPurposeCode(_purchTable.BankCentralBankPurposeCode);
            vendVoucherPurch.parmBankCentralBankPurposeText(_purchTable.BankCentralBankPurposeText);
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            vendInvoiceInfoTable_W = _vendInvoiceInfoTable.vendInvoiceInfoTable_W();

            vendVoucherPurch.parmFineCode_BR(vendInvoiceInfoTable_W.VendFineSetup_BR);
            vendVoucherPurch.parmInterestCode_BR(vendInvoiceInfoTable_W.VendInterestSetup_BR);
        }
        // </GBR>

        return vendVoucherPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendVoucherPurchComplInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>VendVoucher</c> class.
    /// </summary>
    /// <param name="_complementaryInvoice">
    /// The <c>PurchComplementaryInvoiceHeader</c> table buffer containing the purchase complementary invoice header.
    /// </param>
    /// <param name="_ledgerTransTxt">
    /// A text describing the transaction.
    /// </param>
    /// <param name="_totalAmount">
    /// The total amount of the transaction.
    /// </param>
    /// <returns>
    /// An instance of the <c>VendVoucher</c> class.
    /// </returns>
    public static VendVoucher newVendVoucherPurchComplInvoice(PurchComplementaryInvoiceHeader _complementaryInvoice, LedgerTransTxt _ledgerTransTxt, AmountMST _totalAmount)
    {
        VendVoucher vendVoucher;
        VendTable vendTable;

        vendVoucher = new VendVoucher();

        vendVoucher.init(
            _complementaryInvoice.VendTable,
            -_totalAmount,
            _complementaryInvoice.Currency,
            _ledgerTransTxt,
            _complementaryInvoice.DefaultDimension,
            _complementaryInvoice.PostingProfile,
            LedgerPostingType::VendBalance,
            _complementaryInvoice.Payment,
            _complementaryInvoice.SettleVoucher,
            HcmWorker::userId2Worker(curUserId()),
            NoYes::Yes,
            _complementaryInvoice.Number,
            _complementaryInvoice.CashDiscDate,
            -_complementaryInvoice.CashDiscAmount,
            _complementaryInvoice.FixedDueDate,
            _complementaryInvoice,
            TypeOfCreditmaxCheck::Balance,
            _complementaryInvoice.CashDisc);

        vendVoucher.parmPaymMode(_complementaryInvoice.VendPaymModeTable);
        vendVoucher.parmPaymSpec(_complementaryInvoice.VendPaymModeSpec);
        vendVoucher.parmThirdPartyBankAccountId(_complementaryInvoice.VendBankAccount);
        vendVoucher.parmCustVendNegInstStatus(CustVendNegInstStatus::Invoiced);
        vendVoucher.parmFormLetter(_complementaryInvoice.Number);
        vendVoucher.parmDocumentDate(_complementaryInvoice.DocumentDate);
        VendVoucher.parmCashDiscCode(_complementaryInvoice.CashDisc);
        VendVoucher.parmPaymTermId(_complementaryInvoice.Payment);

        vendTable = VendTable::find(_complementaryInvoice.VendTable);
        vendVoucher.parmFineCode_BR(vendTable.FineCode_BR);
        vendVoucher.parmInterestCode_BR(vendTable.InterestCode_BR);

        return vendVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendVoucherTaxWithhold</Name>
				<Source><![CDATA[
    public static VendVoucherTaxWithhold newVendVoucherTaxWithhold(TaxWithholdTrans _taxWithholdTrans,
                                                                          DimensionDefault _defaultDimension,
                                                                          PostingProfile _postingProfile,
                                                                          ExchRate _exchRate,
                                                                          ExchrateSecondary _exchRateSecond,
                                                                          LedgerTransTxt _ledgerTransTxt = LedgerTransTxt::None)
    {
        VendVoucherTaxWithhold vendVoucherTaxWithhold;

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            _ledgerTransTxt = LedgerTransTxt::VendWithholdingTax;
        }
        // </GBR>

        vendVoucherTaxWithhold = new VendVoucherTaxWithhold();

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
        {
            vendVoucherTaxWithhold.init(
                _taxWithholdTrans.VendAccount,
                _taxWithholdTrans.displayInvoiceCurDeductableAmount(),
                _taxWithholdTrans.InvoiceCurrency,
                _ledgerTransTxt,
                _defaultDimension,
                _postingProfile,
                LedgerPostingType::VendBalance);
        }
        else
        {
            // </GTH>
            vendVoucherTaxWithhold.init(_taxWithholdTrans.VendAccount,
                _taxWithholdTrans.InvoiceTaxWithholdAmount,
                _taxWithholdTrans.InvoiceCurrency,
                _ledgerTransTxt,
                _defaultDimension,
                _postingProfile,
                LedgerPostingType::VendBalance);
            // <GTH>
        }
        // </GTH>

        if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
        {
            vendVoucherTaxWithhold.parmModule(SysModule::Vend);
        }

        vendVoucherTaxWithhold.parmExchRate(_exchRate);
        vendVoucherTaxWithhold.parmExchRateSecondary(_exchRateSecond);
        vendVoucherTaxWithhold.parmTransDate(_taxWithholdTrans.TransDate);
        vendVoucherTaxWithhold.parmTransVoucher(_taxWithholdTrans.SettlementVoucher);
        vendVoucherTaxWithhold.setTaxWithholdTrans(_taxWithholdTrans);

        return vendVoucherTaxWithhold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjTransPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will add rows (partial payment) or update (full payment) the ProjTransPosting
    /// corresponding to the vend transaction
    /// </summary>
    /// <param name = "_paymentDate">
    /// The payment date for the invoice.
    /// </param>
    /// <param name = "_voucherNo">
    /// The voucher number of the invoice.
    /// </param>
    /// <param name = "_paymentStatus">
    /// The payment status of the invoice.
    /// </param>
    /// <param name = "_partialPayment">
    /// Whether or not this is a partial payment. Optional value whose default is false.</param>.
    /// </param>
    /// <param name = "_amount">
    /// The amount to invoice.
    /// </param>
    /// <param name = "percentagePayment">
    /// If this is a partial payment, the percentage to be paid.
    /// </param>
    public static void updateProjTransPosting(
            TransDate _paymentDate,
            Voucher _voucherNo,
            ProjPaymentStatus _paymentStatus,
            boolean _partialPayment = false,
            AmountMST _amount = 0,
            real percentagePayment = 0)
    {
        ttsbegin;

        QueryRun queryRun = new QueryRun(VendVoucher::getProjTransPostingQuery(_voucherNo));

        while(queryRun.next())
        {
            ProjTransPosting projTransPosting = queryRun.get(tableNum(ProjTransPosting));
            // Check to see if the partial payment needs to be done
            if (_partialPayment)
            {
                VendVoucher::createProjTransPostingWithAmountAndPaymentStatus(projTransPosting, percentagePayment);
                // We need to edit the existing record to reflect the partial payment
                projTransPosting.AmountMst = projTransPosting.AmountMst * (percentagePayment / 100);
            }

            projTransPosting.PaymentStatus = _paymentStatus;
            projTransPosting.PaymentDate = _paymentDate;
            projTransPosting.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjTransPostingWithAmountAndPaymentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record in <c>ProjTransPosting</c> with updated amount and payment status.
    /// </summary>
    /// <param name = "_projTransPostingOrig">
    /// A record of <c>ProjTransPosting</c> buffer.
    /// </param>
    /// <param name = "percentagePayment">
    /// The value of percentage payment.
    /// </param>
    protected static void createProjTransPostingWithAmountAndPaymentStatus(ProjTransPosting _projTransPostingOrig, real percentagePayment)
    {
        // Copy the row to be inserted
        ProjTransPosting projTransPostingInsert = _projTransPostingOrig;
        // Change the payment amount and payment status
        // Difference of amount
        AmountMST partialAmount = _projTransPostingOrig.AmountMst * ((100 - percentagePayment) / 100);
        projTransPostingInsert.AmountMst = partialAmount;
        projTransPostingInsert.PaymentStatus = ProjPaymentStatus::ExpectedPayment;
        projTransPostingInsert.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjTransPostingQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the base query for select <c>ProjTransPosting</c> with update mode.
    /// </summary>
    /// <param name = "_voucherNo">
    /// The voucher number of the invoice.
    /// </param>
    /// <returns>
    /// Returns the query instance to select all project posted transaction of given voucher and payment status is expected payment.
    /// </returns>
    protected static Query getProjTransPostingQuery(Voucher _voucherNo)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(ProjTransPosting));
        qbds.addRange(fieldNum(ProjTransPosting, Voucher)).value(queryValue(_voucherNo));
        qbds.addRange(fieldNum(ProjTransPosting, PaymentStatus)).value(queryValue(ProjPaymentStatus::ExpectedPayment));
        qbds.update(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessEvent</Name>
				<Source><![CDATA[
    protected BusinessEventsBase getBusinessEvent()
    {
        BusinessEventsBase businessEvent;

        if (common.TableId == tableNum(LedgerJournalTrans))
        {
            LedgerJournalTrans ledgerJournalTransLocal = common;
            businessEvent = this.createBusinessEvent(ledgerJournalTransLocal);
        }

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundedOffAmount</Name>
				<Source><![CDATA[
    protected AmountCur roundedOffAmount(AmountCur _amount)
    {
        return CurrencyExchange::roundWithRuleType(
            _amount,
            this.parmCurrencyCode(),
            CurrencyRoundingRuleType::PurchaseOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBusinessEvent</Name>
				<Source><![CDATA[
    private BusinessEventsBase createBusinessEvent(LedgerJournalTrans _ledgerJournalTrans)
    {
        BusinessEventsBase businessEvent;
        LedgerJournalType ledgerJournalType = _ledgerJournalTrans.ledgerJournalTable().JournalType;
        
        if (vendInvoiceJour)
        {
            // vendor invoice register
            if  (ledgerJournalType == LedgerJournalType::PurchaseLedger)
            {
                businessEvent = VendorInvoiceRegisterPostedBusinessEvent::newFromVendInvoiceJour(vendInvoiceJour);
            }
            // vendor invoice journal
            else if  (ledgerJournalType == LedgerJournalType::VendInvoiceRegister)
            {
                businessEvent = VendorInvoiceJournalPostedBusinessEvent::newFromVendInvoiceJour(vendInvoiceJour);
            }
        }

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceJourExtension</Name>
				<Source><![CDATA[
    private void createInvoiceJourExtension(VendInvoiceJour _vendInvoiceJour)
    {
        if (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
        {
            VendInvoiceJourExtensionTH vendInvoiceJourExtensionTH = _vendInvoiceJour.vendInvoiceJourExtensionTH();
            _vendInvoiceJour.SysExtensionSerializerMap::packExtensionTable(vendInvoiceJourExtensionTH);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>