<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMatrix</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>RetailMatrix</c> constitutes the runtime component of the matrix control. The matrix control consists of grid of input elements,
/// which is backed by data matrix on the server side where each cell can be accessed and modified to reflect on the client side.
/// The input elements can either all be checkboxes, or integer text inputs. Additionally, column headings
/// and row labels can be specified.
///
/// Illustration with labels for different parts of the matrix.
/// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/// | RowLabelColumnHeading(1) | RowLabelColumnHeading(2) | DataColumnHeading(1) | DataColumnHeading(2) |
/// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/// |----RowLabel(1,1)---------|----RowLabel(1,2)---------|----DataCell(1,1)-----|---DataCell(1,2)------|
/// |----RowLabel(2,1)---------|----RowLabel(2,2)---------|----DataCell(2,1)-----|---DataCell(2,2)------|
/// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/// </summary>
[FormControlAttribute('RetailMatrix', '', classStr(BuildRetailMatrix))]
class RetailMatrix extends FormTemplateControl
{
    FormProperty isReadOnly;
    FormProperty inputType;
    FormProperty rowLabelColumnHeadings;
    FormProperty dataColumnHeadings;
    FormProperty rowLabelsMatrix;
    FormProperty dataMatrixValue;
    FormProperty dataMatrixDisabled;
    FormProperty selectedColumn;
    FormProperty selectedRow;
    int activeCellRow;
    int activeCellColumn;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the matrix.
    /// </summary>
    public void clear()
    {
        activeCellRow = 0;
        activeCellColumn = 0;
        this.selectedColumn(0);
        this.selectedRow(0);
        this.rowLabelColumnHeadings(new Array(Types::String));
        this.dataColumnHeadings(new Array(Types::String));
        this.rowLabelsMatrix(new Array(Types::Class));
        this.dataMatrixValue(new Array(Types::Class));
        this.dataMatrixDisabled(new Array(Types::Class));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataColumnHeading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the column heading for column containing the controls.
    /// </summary>
    /// <param name = "_column">The column number of the heading.</param>
    /// <param name = "_value">The value to set for the heading.</param>
    /// <returns>The value.</returns>
    public str parmDataColumnHeading(int _column, str _value = '')
    {
        str ret;

        if (!prmisDefault(_value))
        {
            ret = this.parmHeading(this.dataColumnHeadings(), _column, _value);
            this.properties().notifyChange(dataColumnHeadings);
        }
        else
        {
            ret = this.parmHeading(this.dataColumnHeadings(), _column);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowLabelColumnHeading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the column heading for column containing the row labels.
    /// </summary>
    /// <param name = "_column">The column number of the heading.</param>
    /// <param name = "_value">The value to set for the heading.</param>
    /// <returns>The value.</returns>
    public str parmRowLabelColumnHeading(int _column, str _value = '')
    {
        str ret;

        if (!prmIsDefault(_value))
        {
            ret = this.parmHeading(this.rowLabelColumnHeadings(), _column, _value);
            this.properties().notifyChange(rowLabelColumnHeadings);
        }
        else
        {
            ret = this.parmHeading(this.rowLabelColumnHeadings(), _column);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the row labels. A row can have more than one static label each in a different column.
    /// </summary>
    /// <param name = "_row">The row number.</param>
    /// <param name = "_column">The column number of the label.</param>
    /// <param name = "_value">The label value.</param>
    /// <returns>The label value.</returns>
    public str parmRowLabel(int _row, int _column, str _value = '')
    {
        str ret;

        if (!prmisDefault(_value))
        {
            this.setMatrixCell(this.rowLabelsMatrix(), _row, _column, Types::String, _value);
            ret = _value;
            this.properties().notifyChange(rowLabelsMatrix);
        }
        else
        {
            anytype returnVal = this.getMatrixCell(this.rowLabelsMatrix(), _row, _column);
            ret = (typeOf(returnVal) == Types::AnyType ? "" : returnVal);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataCellValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cell data.
    /// </summary>
    /// <param name = "_row">The row number of the cell.</param>
    /// <param name = "_column">The column number of the cell.</param>
    /// <returns>The value.</returns>
    public int getDataCellValue(int _row, int _column)
    {
        anytype returnVal = this.getMatrixCell(this.dataMatrixValue(), _row, _column);
        return typeOf(returnVal) == Types::AnyType ? 0 : returnVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataCellValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the cell.
    /// </summary>
    /// <param name = "_row">The row number of the cell.</param>
    /// <param name = "_column">The column number of the cell.</param>
    /// <param name = "_value">The value to set for the cell.</param>
    public void setDataCellValue(int _row, int _column, int _value)
    {
        this.setMatrixCell(this.dataMatrixValue(), _row, _column, Types::Integer, _value);
        this.properties().notifyChange(dataMatrixValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataCellDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the cell.
    /// </summary>
    /// <param name = "_row">The row number of the cell.</param>
    /// <param name = "_column">The column number of the cell.</param>
    /// <param name = "_disabled">True will disable the cell and false will enable the cell.</param>
    /// <returns>If the cell is enabled or not.</returns>
    public void setDataCellDisabled(int _row, int _column, boolean _disabled)
    {
        this.setMatrixCell(this.dataMatrixDisabled(), _row, _column, Types::Integer, _disabled);
        this.properties().notifyChange(dataMatrixDisabled);

        // If the cell being disabled is the currently active cell, then make it inactive.
        if (_disabled && activeCellRow == _row && activeCellColumn == _column)
        {
            activeCellRow = 0;
            activeCellColumn = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataCellDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if cell is disabled, and false if the cell is enabled.
    /// </summary>
    /// <param name = "_row">The row number of the cell.</param>
    /// <param name = "_column">The column number of the cell.</param>
    /// <returns>True, if disabled; otherwise, false.</returns>
    public boolean getDataCellDisabled(int _row, int _column)
    {
        anytype returnVal = this.getMatrixCell(this.dataMatrixDisabled(), _row, _column);
        return typeOf(returnVal) == Types::AnyType ? false : returnVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataRowCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of rows excluding the column headings row.
    /// </summary>
    /// <returns>Number of rows.</returns>
    public int getDataRowCount()
    {
        return max(this.dataMatrixValue().lastIndex(), this.rowLabelsMatrix().lastIndex());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataColumnCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of columns containing input controls in the first row after the column headings.
    /// </summary>
    /// <returns>Number of columns.</returns>
    public int getDataColumnCount()
    {
        if (this.dataMatrixValue().lastIndex() == 0)
        {
            return 0;
        }

        return this.dataMatrixValue().value(1).lastIndex();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRowLabelColumnCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of columns in the row labels.
    /// </summary>
    /// <param name = "_row">The row number for which the column count is needed.</param>
    /// <returns>Number of columns in the row labels.</returns>
    public int getRowLabelColumnCount(int _row = 1)
    {
        return this.rowLabelsMatrix().value(_row).lastIndex();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedColumnIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currently selected column's index.
    /// </summary>
    /// <returns>The index of the column that is currently selected. 0 when no column is selected.</returns>
    public int getSelectedColumnIndex()
    {
        return this.selectedColumn();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedRowIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currently selected row's index.
    /// </summary>
    /// <returns>The index of the row that is currently selected. 0 when no row is selected.</returns>
    public int getSelectedRowIndex()
    {
        return this.selectedRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currently active cell.
    /// </summary>
    /// <returns>A container container the row index, column index and cell value in that order.</returns>
    public container getActiveCell()
    {
        return [activeCellRow, activeCellColumn, this.getDataCellValue(activeCellRow, activeCellColumn)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveRowIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currently active row's index. A row can be active if either a cell in the row is in focus or the row is selected.
    /// </summary>
    /// <returns>The index of the row that is currently active. 0 when no row is active.</returns>
    public int getActiveRowIndex()
    {
        if (!activeCellRow)
        {
            return this.selectedRow();
        }
        else
        {
            return activeCellRow;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveColumnIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currently active column's index. A column can be active if either a cell in the column is in focus or the column is selected.
    /// </summary>
    /// <returns>The index of the column that is currently active. 0 when no column is active.</returns>
    public int getActiveColumnIndex()
    {
        if (!activeCellColumn)
        {
            return this.selectedColumn();
        }
        else
        {
            return activeCellColumn;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInputType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the input type.
    /// </summary>
    /// <param name = "inputType">The input type.</param>
    public void setInputType(RetailMatrixInputType _inputType)
    {
        this.inputType(enum2Int(_inputType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyCellActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if any cell is active.
    /// </summary>
    /// <returns>True, if a cell is active; Otherwise, false</returns>
    public boolean isAnyCellActive()
    {
        if (activeCellRow >= 1 && activeCellColumn >= 1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cellModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when a cell is modified. It should be overridden by the form to receive updates.
    /// </summary>
    /// <param name = "_row">The row index of cell.</param>
    /// <param name = "_column">The column index of cell.</param>
    /// <param name = "_value">The new cell value.</param>
    public void cellModified(int _row, int _column, int _value)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>cellActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when a cell is made active. It should be overridden by the form to receive updates.
    /// </summary>
    /// <param name = "_row">The row index of cell.</param>
    /// <param name = "_column">The column index of cell.</param>
    public void cellActivated(int _row, int _column)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the RetailMatrix type.
    /// </summary>
    /// <param name = "_build">The build control object</param>
    /// <param name = "_formRun">The formRun object</param>
    public void new(FormBuildControl _build, FormRun _formRun)
    {
        super(_build, _formRun);

        this.setTemplateId("RetailMatrix");
        this.setResourceBundleName("/resources/html/RetailMatrix");

        // Create properties for the control
        rowLabelColumnHeadings = this.addProperty(methodStr(RetailMatrix, rowLabelColumnHeadings), Types::Class);
        dataMatrixDisabled = this.addProperty(methodStr(RetailMatrix, dataMatrixDisabled), Types::Class);
        dataColumnHeadings = this.addProperty(methodStr(RetailMatrix, dataColumnHeadings), Types::Class);
        rowLabelsMatrix = this.addProperty(methodStr(RetailMatrix, rowLabelsMatrix), Types::Class);
        dataMatrixValue = this.addProperty(methodStr(RetailMatrix, dataMatrixValue), Types::Class);
        selectedColumn = this.addProperty(methodStr(RetailMatrix, selectedColumn), Types::Integer);
        selectedRow = this.addProperty(methodStr(RetailMatrix, selectedRow), Types::Integer);
        inputType = this.addProperty(methodStr(RetailMatrix, inputType), Types::Integer);

        this.rowLabelColumnHeadings(new Array(Types::String));
        this.dataColumnHeadings(new Array(Types::String));
        this.dataMatrixDisabled(new Array(Types::Class));
        this.rowLabelsMatrix(new Array(Types::Class));
        this.dataMatrixValue(new Array(Types::Class));
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes the design time property values to the control.
    /// </summary>
    public void applyBuild()
    {
        super();
        BuildRetailMatrix build = this.build();

        if (build)
        {
            this.setInputType(build.matrixInputType());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inputType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies what type of input control is shown in the matrix.
    /// </summary>
    /// <param name = "_value">The input type.</param>
    /// <returns>The input type.</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "InputType", true)]
    private int inputType(int _value = inputType.parmValue())
    {
        if (!prmisDefault(_value))
        {
            inputType.setValueOrBinding(_value);
        }

        return inputType.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataColumnHeadings</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, "DataColumnHeadings", true)]
    private Array dataColumnHeadings(Array _value = dataColumnHeadings.parmValue())
    {
        if (!prmisDefault(_value))
        {
            dataColumnHeadings.setValueOrBinding(_value);
        }

        return dataColumnHeadings.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rowLabelColumnHeadings</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, "RowLabelColumnHeadings",true)]
    private Array rowLabelColumnHeadings(Array _value = rowLabelColumnHeadings.parmValue())
    {
        if (!prmisDefault(_value))
        {
            rowLabelColumnHeadings.setValueOrBinding(_value);
        }

        return rowLabelColumnHeadings.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rowLabelsMatrix</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, "RowLabelsMatrix",true)]
    private Array rowLabelsMatrix(Array _value = rowLabelsMatrix.parmValue())
    {
        if (!prmisDefault(_value))
        {
            rowLabelsMatrix.setValueOrBinding(_value);
        }

        return rowLabelsMatrix.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataMatrixValue</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, "DataMatrixValue", true)]
    private Array dataMatrixValue(Array _value = dataMatrixValue.parmValue())
    {
        if (!prmisDefault(_value))
        {
            dataMatrixValue.setValueOrBinding(_value);
        }

        return dataMatrixValue.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataMatrixDisabled</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, "DataMatrixDisabled", true)]
    private Array dataMatrixDisabled(Array _value = dataMatrixDisabled.parmValue())
    {
        if (!prmisDefault(_value))
        {
            dataMatrixDisabled.setValueOrBinding(_value);
        }

        return dataMatrixDisabled.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedColumn</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, "SelectedColumn", false)]
    private int selectedColumn(int _column = selectedColumn.parmValue())
    {
        if (this.canProcessUpdates())
        {
            if (!prmisDefault(_column))
            {
                if (_column < 0 || _column > this.getDataColumnCount())
                {
                    throw Global::error("@RET9001");
                }

                selectedColumn.setValueOrBinding(_column);
            }
        }

        return selectedColumn.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedRow</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, "SelectedRow", false)]
    private int selectedRow(int _row = selectedRow.parmValue())
    {
        if (this.canProcessUpdates())
        {
            if (!prmisDefault(_row))
            {
                if (_row < 0 || _row > this.getDataRowCount())
                {
                    throw Global::error("@RET9001");
                }

                selectedRow.setValueOrBinding(_row);
            }
        }

        return selectedRow.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCell</Name>
				<Source><![CDATA[
    [FormCommandAttribute("UpdateCell")]
    private str updateCell(int _row, int _column, str _value)
    {
        str ret = "false";

        if (this.canProcessUpdates() && !this.getDataCellDisabled(_row, _column))
        {
            if (isInteger(_value))
            {
                if (SysTaskRecorder::isRecording())
                {
                    LabelId instructionMsg;

                    if (this.inputType() == RetailMatrixInputType::CheckBox)
                    {
                        instructionMsg = _value == "0"? strFmt("@Retail:MatrixUnmarkedCellMessage", _row, _column) : strFmt("@Retail:MatrixMarkedCellMessage", _row, _column);
                    }
                    else
                    {
                        instructionMsg = strFmt("@Retail:RetailMatrixUpdateCellValueTaskRecorderMessage",_value, _row, _column);
                    }

                    using (var scope = SysTaskRecorder::addCommandUserAction("UpdateCell", this, [_row, _column, _value], instructionMsg))
                    {
                        // Show the value on the variant matrix control.
                        this.properties().notifyChange(dataMatrixValue);
                    }
                }

                int value = str2Int(_value);
                this.dataMatrixValue().value(_row).value(_column, value);
                this.cellModified(_row, _column, value);
                ret = "true";
            }
            else
            {
                checkFailed("@Retail:MatrixValidationMessage");
                ret = "false";
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActiveCell</Name>
				<Source><![CDATA[
    [FormCommandAttribute("UpdateActiveCell")]
    private void updateActiveCell(int _row, int _column)
    {
        if (this.canProcessUpdates())
        {
            this.activeCellRow = _row;
            this.activeCellColumn = _column;
            this.cellActivated(_row, _column);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatrixCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value.
    /// </summary>
    /// <param name = "_matrix">The matrix (Two dimensional array)</param>
    /// <param name = "_row">Row index.</param>
    /// <param name = "_column">Column index.</param>
    /// <returns>The value in the cell.</returns>
    private anytype getMatrixCell(Array _matrix, int _row, int _column)
    {
        anytype value;

        if (_row <= 0 || _column <= 0 || _matrix.lastIndex() < _row)
        {
            return value;
        }

        Array row = _matrix.value(_row);

        if (row == null || row.lastIndex() < _column)
        {
            return value;
        }

        return row.value(_column);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatrixCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value.
    /// </summary>
    /// <param name = "_matrix">The matrix (Two dimensional array)</param>
    /// <param name = "_row">Row index.</param>
    /// <param name = "_column">Column index.</param>
    /// <param name = "_type">Type of value.</param>
    /// <param name = "_value">The value to set.</param>
    private void setMatrixCell(Array _matrix, int _row, int _column, Types _type, anytype _value)
    {
        if (_row <= 0 || _column <= 0)
        {
            return;
        }

        Array row;

        if (_matrix.lastIndex() < _row)
        {
            row = new Array(_type);
            _matrix.value(_row, row);
        }
        else
        {
            row = _matrix.value(_row);
        }

        row.value(_column, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the heading array.
    /// </summary>
    /// <param name = "headingArray">The heading array.</param>
    /// <param name = "_column">column index.</param>
    /// <param name = "_value">The value.</param>
    /// <returns>The value.</returns>
    private str parmHeading(Array headingArray, int _column, str _value = "")
    {
        if (_column <= 0)
        {
            return "";
        }

        if (prmIsDefault(_value))
        {
            if (headingArray.lastIndex() < _column)
            {
                return "";
            }
            else
            {
                return headingArray.value(_column);
            }
        }
        else
        {
            headingArray.value(_column, _value);
            return _value;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessUpdates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the runtime should recieve updates from the client.
    /// </summary>
    /// <returns>True, if control is in valid state and can process updates; Otherwise, false.</returns>
    private boolean canProcessUpdates()
    {
        if (this.isVisible())
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>