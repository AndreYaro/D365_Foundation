<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjUnpostedTransListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjUnpostedTransListPageInteraction extends ListPageInteraction
{
    #define.ProcessButton('ProcessButton')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    public void initialized()
    {
        super();

        if (this.listPage().listPageArgs() &&
            this.listPage().listPageArgs().menuItemName() ==  menuitemDisplayStr(ProjUnpostedTransInfoPartMoreAction))
        {
            this.listPage().caption("@SYS326333");
        }

        boolean isProjProjectOperationsIntegrationFeatureEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();
        this.listPage().actionPaneControlVisible(formControlStr(projUnpostedTransactionsListPage, Modify), !isProjProjectOperationsIntegrationFeatureEnabled);
        this.listPage().actionPaneControlVisible(formControlStr(projUnpostedTransactionsListPage, FormActionPaneTabControl), !isProjProjectOperationsIntegrationFeatureEnabled);

        this.updateProjSubcontractLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjSubcontractLine</Name>
				<Source><![CDATA[
    private void updateProjSubcontractLine()
    {
        if (FeatureStateProvider::isFeatureEnabled(ProjEnableSubcontractActualsPostingFeature::instance()))
        {
            Common currentRecord= this.listPage().activeRecord('ProjUnpostedTransView');
            FormDataSource frmDs   = currentRecord.dataSource();
            FormRun formRun = frmDs.formRun();
            FormStringControl subcontractLineCtrl = formRun.control(formRun.controlId("ProjUnpostedTransView_SubcontractLine"));
            subcontractLineCtrl.visible(true);
            subcontractLineCtrl.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(ProjUnpostedTransListPageInteraction, jumpRefSubcontractLine), this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefSubcontractLine</Name>
				<Source><![CDATA[
    private void jumpRefSubcontractLine(FormControl _formControl)
    {
        ProjectOperationsDWHelper dw = ProjectOperationsDWHelper::construct();
        dw.openProjectSubcontractLineDetailsInCE(_formControl.valueStr(), curExt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        ProjInvoiceTable    projInvoiceTable;
        Common              externalRecord;
        ProjTable           projTable;
        QueryBuildDataSource    queryBuildDataSource;

        if (this.listPage().listPageArgs() &&
            this.listPage().listPageArgs().externalRecord() &&
            this.listPage().listPageArgs().menuItemName() ==  menuitemDisplayStr(ProjUnpostedProjectTransactions))
        {
            externalRecord = this.listPage().listPageArgs().externalRecord();
            if (externalRecord.TableId == tableNum(ProjInvoiceTable))
            {
                projInvoiceTable = externalRecord as ProjInvoiceTable;
                _query.dataSourceTable(tableNum(ProjTable)).addRange(fieldNum(ProjTable,ProjInvoiceProjId)).value(queryValue(projInvoiceTable.ProjInvoiceProjId));
            }
            else if (externalRecord.TableId == tableNum(ProjTable))
            {
                projTable = externalRecord as ProjTable;
                queryBuildDataSource = _query.dataSourceTable(tableNum(ProjUnpostedTransView));
                queryBuildDataSource.clearDynalinks();
                SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(ProjUnpostedTransView,ProjId)).value(SysQuery::valueLikeAfter(projTable.ProjId));
            }
        }

        if (this.listPage().listPageArgs() &&
            this.listPage().listPageArgs().externalRecord() &&
            (this.listPage().listPageArgs().menuItemName() ==  menuitemDisplayStr(ProjProjectsListPage) ||
             this.listPage().listPageArgs().menuItemName() ==  menuitemDisplayStr(ProjProjectsListPage_MyProjects)))
        {
            _query.allowCrossCompany(true);
        }
        else
        {
            _query.allowCrossCompany(false);
        }

        super(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the process button, based on the type of active record.
    /// </summary>
    public void selectionChanged()
    {
        ProjUnpostedTransView unpostedTransView;

        unpostedTransView = this.listPage().activeRecord(tableStr(ProjUnpostedTransView));
        switch (unpostedTransView.unionAllBranchId)
        {
            case 11: // Intercompany unposted expenses
            case 12: // Non-Intercompany unposted timesheets
            case 13: // Intercompany unposted timesheets
            case 14: // Intercompany vendor invoice lines
                this.listPage().actionPaneControlEnabled(#ProcessButton, false);
                break;

            default:
                this.listPage().actionPaneControlEnabled(#ProcessButton, true);
                break;
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>