<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPRPeriodicCreateContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data contract for the <c>CFMPRPeriodicCreateContract</c> operation.
/// </summary>
[DataContractAttribute, SysOperationAlwaysInitializeAttribute, SysOperationContractProcessingAttribute(classStr(CFMPRPeriodicCreateUIBuilder))]
public class CFMPRPeriodicCreateContract implements SysPackable, SysOperationInitializable, SysOperationValidatable
{
    FromDate dateFrom;
    ToDate dateTo;
    CFMBatchThreadsNumber threadsNumber;
    container paymentRequestSources;
    container paymentRequestDataAreas;

    DataAreaId dataArea;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        dateFrom,
        dateTo,
        threadsNumber,
        paymentRequestSources,
        paymentRequestDataAreas
    #endmacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the data contract values.
    /// </summary>
    public void initialize()
    {
        dateFrom = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        dateTo   = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateFrom</Name>
				<Source><![CDATA[
    [DataMemberAttribute, SysOperationHelpTextAttribute(literalStr("@CashFlowManagement:SelectStartDateRangeForPaymReqSources2PeriodOpProcess")), SysOperationDisplayOrderAttribute('0')]
    public FromDate parmDateFrom(FromDate _dateFrom = dateFrom)
    {
        dateFrom = _dateFrom;
        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTo</Name>
				<Source><![CDATA[
    [DataMemberAttribute, SysOperationHelpTextAttribute(literalStr("@CashFlowManagement:SelectEndDateRangeForPaymReqSources2PeriodOpProcess")), SysOperationDisplayOrderAttribute('1')]
    public ToDate parmDateTo(ToDate _dateTo = dateTo)
    {
        dateTo = _dateTo;
        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentRequestDataAreas</Name>
				<Source><![CDATA[
    [DataMemberAttribute, SysOperationDisplayOrderAttribute('3')]
    public container parmPaymentRequestDataAreas(container _paymentRequestDataAreas = paymentRequestDataAreas)
    {
        paymentRequestDataAreas = _paymentRequestDataAreas;

        return paymentRequestDataAreas;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentRequestSources</Name>
				<Source><![CDATA[
    [DataMemberAttribute, SysOperationDisplayOrderAttribute('2')]
    public container parmPaymentRequestSources(container _paymentRequestSources = paymentRequestSources)
    {
        paymentRequestSources = _paymentRequestSources;

        return paymentRequestSources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThreadsNumber</Name>
				<Source><![CDATA[
    [DataMemberAttribute, SysOperationHelpTextAttribute(literalStr("@CashFlowManagement:SelectParalTaskNumPerOrigForPaymRequestCreation")), SysOperationDisplayOrderAttribute('4')]
    public CFMBatchThreadsNumber parmThreadsNumber(CFMBatchThreadsNumber _threadsNumber = threadsNumber)
    {
        threadsNumber = _threadsNumber;
        return threadsNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = SysOperationHelper::getVersion(_packedClass);
        boolean ret = false;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates data contract values.
    /// </summary>
    /// <returns>
    /// True if data contract values are correct; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (!dateTo)
        {
            ret = checkFailed("@CashFlowManagement:DateIsMandatory");
        }

        if (dateFrom > dateTo)
        {
            ret = checkFailed("@SYP4861264");
        }

        if (!con2Str(paymentRequestSources))
        {
            ret = checkFailed("@CashFlowManagement:AtLeastOneDataSourceOfPeriodOperationMustSelected");
        }

        if (!con2Str(paymentRequestDataAreas))
        {
            ret = checkFailed("@CashFlowManagement:LegalEntityNotSelected");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>