<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgTransaction</c> class provides an interface for time and attendance to read time
///    registrations from other modules and post changes to time registrations in other modules.
/// </summary>
/// <remarks>
///    Each subclass to this class allows the time and attendance calculation engine to handle time
///    transactions from other modules. This means that reading registrations from other modules, and
///    posting changes that were made in time and attendance back to the originating modules. To allow the
///    time and attendance calculation engine to handle time registrations from other modules, the
///    following must be done:
///    <list type="number">
///       <item>
///          <description>
///             Create a new subclass of the <c>JmgTransaction</c> class.
///          </description>
///       </item>
///       <item>
///          <description>
///             Override the methods <c>addTransactionsToJmgStampJournalTrans</c> and <c>postChanges</c>.
///          </description>
///       </item>
///       <item>
///          <description>
///             Add an entry in the list returned by the <c>getListOfTransactionTypes</c> method in the
///             <c>JmgTransaction</c> class.
///          </description>
///       </item>
///    </list>
/// </remarks>
public abstract class JmgTransaction
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts changes that were made in time and attendance back to the originating modules.
    /// </summary>
    /// <param name="_jmgChangeLog">
    ///    A <c>JmgChangeLog</c> record, that contains the changes to post.
    /// </param>
    /// <param name="_jmgPostStandardSystem">
    ///    A reference to a <c>JmgPostStandardSystem</c> object, that can be used in the posting of changed
    ///    transactions.
    /// </param>
    /// <remarks>
    ///    This method must be overridden to post changes that were made in time and attendance back to the
    ///    module.
    /// </remarks>
    public abstract void postChange(JmgChangeLog _jmgChangeLog, JmgPostStandardSystem _jmgPostStandardSystem)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructJourRegType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an instance of a <c>JmgTransaction</c> subclass based on the specified type.
    /// </summary>
    /// <param name="_type">
    ///    The type of transaction to construct an instance.
    /// </param>
    /// <returns>
    ///    An instance of a <c>JmgTransaction</c> subclass.
    /// </returns>
    public static JmgTransaction constructJourRegType(JmgJourRegType _type)
    {
        JmgTransaction ret;

        switch (_type)
        {
            case JmgJourRegTypeEnum::Absence:
                ret = JmgTransaction_Absence::construct();
                break;
            case JmgJourRegTypeEnum::IndActivity:
                ret = JmgTransaction_IPC::construct();
                break;
            case JmgJourRegTypeEnum::MrpOverlap:
            case JmgJourRegTypeEnum::MrpProcess:
            case JmgJourRegTypeEnum::MrpQueueAfter:
            case JmgJourRegTypeEnum::MrpQueueBefore:
            case JmgJourRegTypeEnum::MrpSetup:
            case JmgJourRegTypeEnum::MrpTransport:
                ret = JmgTransaction_Prod::construct();
                break;
            case JmgJourRegTypeEnum::PrjActivity:
            case JmgJourRegTypeEnum::PrjProject:
                ret = JmgTransaction_Proj::construct();
                break;
            case JmgJourRegTypeEnum::SignIn:
            case JmgJourRegTypeEnum::SignOut:
            case JmgJourRegTypeEnum::StartTeam:
            case JmgJourRegTypeEnum::StopTeam:
            case JmgJourRegTypeEnum::BreakReg:
                ret = JmgTransaction_TAA::construct();
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipChangeLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///  check if the change log should be skipped.
    /// </summary>
    /// <param name="stampJournalTrans">
    ///  The <c> JmgStampJournalTrans </c> to check.
    /// </param>
    /// <returns>
    ///  true if the change log should be skpped; else false.
    /// </returns>
    public boolean skipChangeLog(JmgStampJournalTrans stampJournalTrans)    
    {
        return false;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>postChanges</Name>
				<Source><![CDATA[
/// <summary>
    ///    Posts changes to time transactions made in time and attendance back to originating modules.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    ///    A <c>JmgStampJournalTable</c> buffer which represents the set of changes to post back.
    /// </param>
    /// <remarks>
    ///    This method goes over all changes that were made to time transactions for a given worker and
    ///    profile date, and posts them back to the originating modules. The changes are stored in the
    ///    <c>JmgChangeLog</c> table.
    /// </remarks>
    public static void postChanges(JmgStampJournalTable _jmgStampJournalTable)
    {
        JmgTransaction::postChangesForSpecifiedWorkerAndDate(_jmgStampJournalTable.Worker, _jmgStampJournalTable.ProfileDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postChangesForSpecifiedWorkerAndDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts changes to time transactions made in time and attendance back to originating modules.
    /// </summary>
    /// <param name="_worker">
    ///   The specified worker.
    /// </param>
    /// <param name="_profileDate">
    ///    The specified profile date.
    /// </param>
    /// <remarks>
    ///    This method goes over all changes that were made to time transactions for a specified worker and
    ///    profile date, and posts them back to the originating modules. The changes are stored in the
    ///    <c>JmgChangeLog</c> table.
    /// </remarks>
    public static void postChangesForSpecifiedWorkerAndDate(JmgWorkerRecId _worker, JmgProfileDate _profileDate)
    {
        JmgPostStandardSystem   jmgPostStandardSystem;
        JmgChangeLog            jmgChangeLog;
        JmgStampJournalTrans    originalTrans;
        JmgStampJournalTrans    changedTrans;
        JmgTransaction          jmgTransaction;
        JmgTransaction          changedTransaction;

        jmgPostStandardSystem   = JmgPostStandardSystem::construct();
        jmgPostStandardSystem.parmWorker(_worker);
        jmgPostStandardSystem.parmProfileDate(_profileDate);

        while select forupdate jmgChangeLog
        where jmgChangeLog.Worker       == _worker         &&
              jmgChangeLog.ProfileDate  == _profileDate    &&
              jmgChangeLog.Posted       == NoYes::No
        {
            changedTrans.clear();
            originalTrans.clear();
            con2Buf(jmgChangeLog.ChangedTransaction, changedTrans);
            con2Buf(changedTrans.OriginalTransaction, originalTrans);
            switch (jmgChangeLog.ChangeLogType)
            {
                case JmgChangeLogType::Insert:
                    jmgTransaction = JmgTransaction::constructJourRegType(changedTrans.JourRegType);
                    if (jmgTransaction)
                    {
                        jmgTransaction.postChange(jmgChangeLog, jmgPostStandardSystem);
                    }
                    break;
                case JmgChangeLogType::Update:
                    jmgTransaction      = JmgTransaction::constructJourRegType(originalTrans.JourRegType);
                    if (jmgTransaction)
                    {
                        jmgTransaction.postChange(jmgChangeLog, jmgPostStandardSystem);
                    }
                    changedTransaction  = JmgTransaction::constructJourRegType(changedTrans.JourRegType);
                    if (changedTransaction && classIdGet(jmgTransaction) != classIdGet(changedTransaction))
                    {
                        changedTransaction.postChange(jmgChangeLog, jmgPostStandardSystem);
                    }
                    break;
                case JmgChangeLogType::Delete:
                    if (originalTrans)
                    {
                        jmgTransaction = JmgTransaction::constructJourRegType(originalTrans.JourRegType);
                        if (jmgTransaction)
                        {
                            jmgTransaction.postChange(jmgChangeLog, jmgPostStandardSystem);
                        }
                    }
                    break;
            }
            jmgChangeLog.Posted = NoYes::Yes;
            jmgChangeLog.update();
        }
        jmgPostStandardSystem.postTime();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>