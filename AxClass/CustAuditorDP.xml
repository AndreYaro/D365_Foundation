<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAuditorDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustAuditorDP</c> class is the Report Data Provider class that supports the
///    <c>CustAuditor</c> report.
/// </summary>
/// <remarks>
///    This class provides the methods that are used by the <c>CustAuditor</c> report.
/// </remarks>
[
    SRSReportQueryAttribute(querystr(CustAuditor)),
    SRSReportParameterAttribute(classstr(CustAuditorContract))
]
public class CustAuditorDP extends SRSReportDataProviderPreProcessTempDB
{
    CustAuditorTmp custAuditorTmp;
    CustAuditorTmpLookup custAuditorTmpLookup;
    Map cacheByAccountNumAndPostingProfile;
    Query query;

    TransDate fromDate;
    TransDate toDate;
    NoYes showDetails;
    DateCode periodCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustAuditorTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to query the temporary table and returns data table to the calling method.
    /// </summary>
    /// <returns>
    ///     The required report data.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustAuditorTmp))
    ]
    public CustAuditorTmp getCustAuditorTmp()
    {
        select custAuditorTmp;
        return custAuditorTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccBalancesAccName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>container</c> from customer account name, main account ID, starting balance, ending balance.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account value for which to calculate customer account name, main account ID, starting balance, ending balance.
    /// </param>
    /// <param name="_custPostingProfile">
    /// The customer posting profile value for which to calculate customer account name, main account ID, starting balance, ending balance.
    /// </param>
    /// <returns>
    /// The ending balance <c>AmountMST</c> value.
    /// </returns>
    private container getMainAccBalancesAccName(CustAccount _custAccount, CustPostingProfile _custPostingProfile)
    {
        Container cachedValues;
        
        Container key = [_custAccount, _custPostingProfile];

        if (cacheByAccountNumAndPostingProfile.exists(key))
        {
            // When the starting balance or any other cached fields have already been obtained.
            cachedValues = cacheByAccountNumAndPostingProfile.lookup(key);
        }
        else
        {
            // Get the starting balance and other cached fields and insert it in to the map.
            LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount = CustLedgerAccounts::summaryLedgerDimension(_custAccount, _custPostingProfile);
            MainAccountNum mainAccountId = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimensionDefaultAccount);
            AmountMST startingBalanceMST = CustTrans::custStartBalanceMSTPostingProfile(_custAccount, _custPostingProfile, fromDate);
            AmountMST endingBalanceMST = CustTrans::custEndBalanceMSTPostingProfile(_custAccount, _custPostingProfile, toDate ? toDate : dateMax());
            Name accountName = CustTable::find(custAuditorTmpLookup.AccountNum).name();
            cachedValues = [accountName, mainAccountId, startingBalanceMST, endingBalanceMST];
            cacheByAccountNumAndPostingProfile.insert(key, cachedValues);
        }

        return cachedValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustAuditorTmpLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves customer account name, main account id, starting balance and ending balance to <c>CustAuditorTmpLookup</c> table
    /// </summary>
    protected void insertCustAuditorTmpLookup()
    {
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;
        Container cachedValues;

        insert_recordset custAuditorTmpLookup ( AccountNum, PostingProfile )
            select AccountNum, PostingProfile from custAuditorTmp group by AccountNum, PostingProfile;

        if (showDetails)
        {
            ttsBegin;
            while select forUpdate custAuditorTmpLookup
            {
               cachedValues = this.getMainAccBalancesAccName(custAuditorTmpLookup.AccountNum, custAuditorTmpLookup.PostingProfile);
               custAuditorTmpLookup.AccountName = conPeek(cachedValues, 1);
               custAuditorTmpLookup.MainAccountId = conPeek(cachedValues, 2);
               custAuditorTmpLookup.StartBalance = conPeek(cachedValues, 3);
               custAuditorTmpLookup.EndBalance = conPeek(cachedValues, 4);
               custAuditorTmpLookup.update();
            }
            ttsCommit;
        }
        else
        {
            ttsBegin;
            while select forUpdate custAuditorTmpLookup
            {
               custAuditorTmpLookup.AccountName = CustTable::find(custAuditorTmpLookup.AccountNum).name();
               ledgerDimensionDefaultAccount = CustLedgerAccounts::summaryLedgerDimension(custAuditorTmpLookup.AccountNum, custAuditorTmpLookup.PostingProfile);
               custAuditorTmpLookup.MainAccountId = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimensionDefaultAccount);
               custAuditorTmpLookup.StartBalance = CustTrans::custStartBalanceMSTPostingProfile(custAuditorTmpLookup.AccountNum, custAuditorTmpLookup.PostingProfile, fromDate);
               custAuditorTmpLookup.EndBalance = CustTrans::custEndBalanceMSTPostingProfile(custAuditorTmpLookup.AccountNum, custAuditorTmpLookup.PostingProfile, toDate ? toDate : dateMax());
               custAuditorTmpLookup.update();
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustTransRecordsInDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into a temp table when the show details option is selected.
    /// </summary>
    private void insertCustTransRecordsInDetail()
    {
        Debug::assert(query != null);

        query.dataSourceTable(tablenum(CustTrans)).orderMode(OrderMode::OrderBy);

        QueryRun queryRun = new QueryRun(query);

        CustTrans custTrans;

        while (queryRun.next())
        {
            custTrans = queryRun.get(tablenum(CustTrans));

            this.setCustAuditorTmp(custTrans);

            // Set values for these extra fields for show details option.
            custAuditorTmp.TransDate = custTrans.TransDate;
            custAuditorTmp.InvoiceId = custTrans.Invoice;
            custAuditorTmp.Voucher = custTrans.Voucher;

            custAuditorTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGroupedByCustTransRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into temp table when the show details option is not selected.
    /// </summary>
    private void insertGroupedByCustTransRecords()
    {
        Debug::assert(query != null);

        query.dataSourceTable(tablenum(CustTrans)).addGroupByField(fieldnum(CustTrans, AccountNum));
        query.dataSourceTable(tablenum(CustTrans)).addGroupByField(fieldnum(CustTrans, PostingProfile));
        query.dataSourceTable(tablenum(CustTrans)).addSelectionField(fieldnum(CustTrans, AmountMST), SelectionField::Sum);

        QueryRun queryRun = new QueryRun(query);

        CustTrans custTrans;

        while (queryRun.next())
        {
            custTrans = queryRun.get(tablenum(CustTrans));

            this.setCustAuditorTmp(custTrans);

            custAuditorTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method is used to process the report business logic that is used by the <c>CustAuditor</c>
    /// report.
    /// </remarks>
    public void processReport()
    {
        if (this.parmUserConnection())
        {
            custAuditorTmp.setConnection(this.parmUserConnection());
            custAuditorTmpLookup.setConnection(this.parmUserConnection());
        }

        CustAuditorContract contract = this.parmDataContract() as CustAuditorContract;

        // This maps is used to improve the performance of the report when show details parameter is checked
        // in order to avoid unncessary database calls.
        cacheByAccountNumAndPostingProfile = new Map(Types::Container, Types::Container);

        showDetails = contract.parmShowDetails();
        periodCode = contract.parmPeriodCode();

        query = this.parmQuery();

        if (periodCode)
        {
            LedgerPeriodCode ledgerPeriodCode = LedgerPeriodCode::find(periodCode);
            fromDate = ledgerPeriodCode.fromDate();
            toDate = ledgerPeriodCode.toDate();
        }
        else
        {
            fromDate = contract.parmFromDate();
            toDate = contract.parmToDate();
        }

        if (fromDate || toDate)
        {
            query.dataSourceTable(tablenum(CustTrans)).addRange(fieldnum(CustTrans, TransDate)).value(queryRange(fromDate, toDate));
        }

        if (showDetails)
        {
            this.insertCustTransRecordsInDetail();
        }
        else
        {
            this.insertGroupedByCustTransRecords();
        }

        this.insertCustAuditorTmpLookup();
        this.updateCustAuditorTmpFromLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustAuditorTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates fields in <c>CustAuditorTmp</c> from <c>CustTrans</c> table buffer.
    /// </summary>
    /// <param name = "_custTrans">
    /// CustTrans table buffer used to populate CustAuditorTmp table fields.
    /// </param>
    protected void setCustAuditorTmp(custTrans _custTrans)
    {
        custAuditorTmp.clear();
        custAuditorTmp.AccountNum = _custTrans.AccountNum;
        custAuditorTmp.PostingProfile = _custTrans.PostingProfile;
        custAuditorTmp.AmountMst = _custTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustAuditorTmpFromLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates fields in <c>CustAuditorTmp</c> from <c>CustAuditorTmpLookup</c> table
    /// </summary>
    protected void updateCustAuditorTmpFromLookup()
    {
        update_recordSet custAuditorTmp
            setting
                AccountName = custAuditorTmpLookup.AccountName,
                MainAccountId = custAuditorTmpLookup.MainAccountId,
                StartBalance = custAuditorTmpLookup.StartBalance,
                EndBalance = custAuditorTmpLookup.EndBalance
            join custAuditorTmpLookup
                where custAuditorTmpLookup.AccountNum == custAuditorTmp.AccountNum &&
                      custAuditorTmpLookup.PostingProfile == custAuditorTmp.PostingProfile;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>