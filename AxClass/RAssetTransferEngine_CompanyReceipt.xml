<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTransferEngine_CompanyReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetTransferEngine_CompanyReceipt extends RAssetTransferEngine
{
    protected FormTabPageControl tabPageMoveStandard;
    protected FormButtonControl buttonCreateAsset;
    protected FormButtonControl buttonAutoCreate;
    protected FormStringControl assetId;
    protected FormStringControl accountNum;
    protected FormStringControl company;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoCreateLine</Name>
				<Source><![CDATA[
    public void autoCreateLine(RAssetTransferTrans _rAssetTransferTrans)
    {
        RAssetMoveStandard  rAssetMoveStandard;

        ttsbegin;

        rAssetTransferTrans.clear();
        rAssetTransferTrans.TransferTableRecId = rAssetTransferTable.RecId;
        rAssetTransferTrans.AccountNum = _rAssetTransferTrans.AssetId;
        rAssetTransferTrans.AssetId = _rAssetTransferTrans.AccountNum;
        rAssetTransferTrans.Company = _rAssetTransferTrans.DataAreaId;

        if (this.validateWriteTrans())
        {
            rAssetTransferTrans.insert();
            this.writeTrans();
        }

        ttscommit;

        if (rAssetTransferTrans.RecId)
        {
            select sum(BalanceAcquisition) from rAssetMoveStandard
                where rAssetMoveStandard.RefRecId == rAssetTransferTrans.RecId
                    && rAssetMoveStandard.RefTableId == rAssetTransferTrans.TableId;

            if (!rAssetMoveStandard.BalanceAcquisition)
            {
                warning("@GLS3800136");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public void create()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAcountNum</Name>
				<Source><![CDATA[
    public void lookupAcountNum(FormStringControl _ctrl)
    {
        RAssetTable::lookupAccountNum(_ctrl, curext(), RAssetTransType::CompanyReceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAssetId</Name>
				<Source><![CDATA[
    public void lookupAssetId(FormStringControl _ctrl, CompanyId _companyId)
    {
        RAssetTable::lookUpReceipt(_ctrl, _companyId, rAssetTransferTable.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetTransferTrans</Name>
				<Source><![CDATA[
    public RAssetTransferTrans rAssetTransferTrans(RAssetTransferTrans _rAssetTransferTrans = rAssetTransferTrans)
    {
        rAssetTransferTrans = super(_rAssetTransferTrans);

        if (formRunTrans)
        {
            tabPageMoveStandard = formRunTrans.design().controlName(TabPageAssetMoveStandardName);
            buttonCreateAsset = formRunTrans.design().controlName(ButtonCreateAssetName);
            buttonAutoCreate = formRunTrans.design().controlName(ButtonAutoCreateName);
            assetId = formRunTrans.design().controlName(AssetIdName);
            accountNum = formRunTrans.design().controlName(AccountNumName);
            company = formRunTrans.design().controlName(CompanyTableName);
        }

        return rAssetTransferTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTableDesign</Name>
				<Source><![CDATA[
    public void updateTableDesign()
    {
        rAssetTransferTable_ds.object(fieldnum(RAssetTransferTable, OldEmployee)).visible(false);
        rAssetTransferTable_ds.object(fieldnum(RAssetTransferTable, OldLocation)).visible(false);
        rAssetTransferTable_ds.object(fieldnum(RAssetTransferTable, NewEmployee)).visible(false);
        rAssetTransferTable_ds.object(fieldnum(RAssetTransferTable, NewLocation)).visible(false);
        buttonPrint.visible(false);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransDesign</Name>
				<Source><![CDATA[
    public void updateTransDesign()
    {
        super();

        tabPageMoveStandard.visible(true);
        buttonCreateAsset.visible(true);
        buttonAutoCreate.visible(true);
        tabPageMoveStandard.allowEdit(! rAssetTransferTable.Posted);
        buttonCreateAsset.enabled(! rAssetTransferTrans.AccountNum && rAssetTransferTrans.AssetId && ! rAssetTransferTable.Posted);
        buttonAutoCreate.enabled(! rAssetTransferTable.Posted);
        assetId.label("@SYS27472");
        accountNum.label("@GLS116709");
        company.label("@GLS116718");

        boolean allowEdit = rAssetTransferTrans.AccountNum && rAssetTransferTrans.AssetId && rAssetTransferTrans.findConcerned(true) ? false : true;
        FormDataObject formDataObject = rAssetTransferTrans_ds.object(fieldnum(RAssetTransferTrans, AssetId));
        formDataObject.allowEdit(allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteTrans</Name>
				<Source><![CDATA[
    public boolean validateWriteTrans()
    {
        boolean ret = super();

        if (! rAssetTransferTrans.AssetId)
        {
            ret = ret && checkFailed("@GLS116712");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTrans</Name>
				<Source><![CDATA[
    public void writeTrans()
    {
        rAssetTransferTrans.updateMoveStandard();

        RAssetMoveHist rAssetMoveHistLocal = rAssetTransferTrans.findConcerned();
        
        if (!rAssetMoveHistLocal)
        {
            return;
        }

        ttsbegin;
        
        CurrencyCode currencyIssue;
        RAssetMoveStandard rAssetMoveStandard;
        while select forupdate rAssetMoveStandard
            where rAssetMoveStandard.RefRecId == rAssetTransferTrans.RecId
                && rAssetMoveStandard.RefTableId == rAssetTransferTrans.TableId
        {
            RAssetStandardInterCompany rAssetStandardInterCompany = RAssetStandardInterCompany::find(rAssetMoveStandard.rAssetStandardId, rAssetTransferTrans.Company);
            if (!rAssetStandardInterCompany)
            {
                continue;
            }

            RAssetMoveStandard rAssetMoveStandardLocal;
            if (SysDataArea::checkAccessible(rAssetTransferTrans.Company))
            {
                changecompany(rAssetTransferTrans.Company)
                {
                    rAssetMoveStandardLocal = rAssetMoveHistLocal.rAssetMoveStandard(rAssetStandardInterCompany.AssetInterCompanyStandardId);
                    currencyIssue = RAssetStandards::findInCompany(rAssetMoveHistLocal.AccountNum, rAssetMoveStandardLocal.rAssetStandardId, rAssetTransferTrans.Company).CurrencyCode;
                    currencyIssue = Currency::currencyCodeISO(currencyIssue);
                }
            }
            currencyIssue = Currency::findCurrencyCodeISO(currencyIssue).CurrencyCode;
            if (! currencyIssue)
            {
                checkFailed("@SYS109642");
            }

            rAssetMoveStandard.BalanceAcquisition = CurrencyExchangeHelper::curAmount2CurAmount(rAssetMoveStandardLocal.BalanceAcquisition, currencyIssue, RAssetStandards::find(rAssetTransferTrans.AccountNum, rAssetMoveStandard.rAssetStandardId).CurrencyCode, rAssetTransferTable.TransDate);
            rAssetMoveStandard.BalanceDepreciation = CurrencyExchangeHelper::curAmount2CurAmount(rAssetMoveStandardLocal.BalanceDepreciation, currencyIssue, RAssetStandards::find(rAssetTransferTrans.AccountNum, rAssetMoveStandard.rAssetStandardId).CurrencyCode, rAssetTransferTable.TransDate);
            rAssetMoveStandard.rAssetLifeTimePass = rAssetMoveStandardLocal.rAssetLifeTimePass;
            rAssetMoveStandard.update();
        }

        ttscommit;

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>