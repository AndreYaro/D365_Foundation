<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPostWaveStepMethodDataCleanup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSPostWaveStepMethodDataCleanup</c> class provides cleanup logic to finalize the wave cleanup.
/// </summary>
internal final class WHSPostWaveStepMethodDataCleanup
{
    private WHSWaveId waveId;
    private WHSWaveExecutionID waveExecutionId;
    private WHSInstrumentationWaveProcessingDataCleanupPerformanceTask perfTask;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSPostWaveStepMethodDataCleanup construct(WHSWaveId _waveId, WHSWaveExecutionID _waveExecutionId, WHSInstrumentationWaveProcessingDataCleanupPerformanceTask _perfTask)
    {
        WHSPostWaveStepMethodDataCleanup postWaveStepCleanup = new WHSPostWaveStepMethodDataCleanup();
        postWaveStepCleanup.waveId = _waveId;
        postWaveStepCleanup.waveExecutionId = _waveExecutionId;
        postWaveStepCleanup.perfTask = _perfTask;

        if (_perfTask == null)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        return postWaveStepCleanup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTtsLevelIsNotZeroForMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tts level is not 0 and if it is throws an error.
    /// </summary>
    /// <param name = "_methodName">The name of the method whose tts level is checked.</param>
    private void checkTtsLevelIsNotZeroForMethod(str _methodName)
    {
        // we want to ensure we are the outermost tts so we can deal with errors correctly
        if (appl.ttsLevel() == 0)
        {
            throw Error(Error::wrongUseOfFunction(_methodName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeCleanupForSuccessfulRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalizes the cleanup for a successful wave.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true), Replaceable(true)]
    internal void finalizeCleanupForSuccessfulRun()
    {
        this.checkTtsLevelIsNotZeroForMethod(funcName());

        this.cleanupWaveTrackingData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeCleanupForErroredRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalizes the wave cleanup for an errored wave.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true), Replaceable(true)]
    internal void finalizeCleanupForErroredRun()
    {
        this.checkTtsLevelIsNotZeroForMethod(funcName());

        perfTask.setResetWaveTable(WHSWaveProcessingDataCleanup::resetWaveTable(waveId));
        this.cleanupWaveTrackingData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupWaveTrackingData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true)]
    internal void cleanupWaveTrackingData()
    {
        perfTask.setDeleteWaveStepControllerRecords(WHSWaveProcessingDataCleanup::deleteWaveStepControllerRecords(waveId, waveExecutionId));
        perfTask.setDeleteWaveErroredIndicatorRecords(WHSWaveProcessingDataCleanup::deleteWaveErroredIndicatorRecords(waveId, waveExecutionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveId parmWaveId()
    {
        return waveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveExecutionId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveId parmWaveExecutionId()
    {
        return waveExecutionId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>