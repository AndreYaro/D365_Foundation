<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalData_BOMReq_Proforma_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventJournalData_BOMReq_Proforma_RU extends InventJournalData_BOMReq_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getToMainAccountAndDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines to main account  and dimension value.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// <c>InventJournalTrans</c> record.
    /// </param>
    /// <param name="_analysisCode">
    /// Dimension Code, which was set in parameters as analysis code
    /// </param>
    /// <returns>
    /// container with To main account and dimension value.
    /// </returns>
    protected container getToMainAccountAndDim(InventJournalTrans _inventJournalTrans,
                                               RefRecId           _analysisCode)
    {
        LedgerDimensionDefaultAccount       ledgerDimension;
        DimensionAttributeValueSetItemView  dimAttrValueSetItemView;

        switch (_inventJournalTrans.JournalType)
        {
            case InventJournalType::BOM:
                ledgerDimension = InventPosting::itemLedgerDimensionFromParameter(
                    this.itemLedgerDimensionFromParameter(InventAccountType::ProdIssueOffsetAccount, _inventJournalTrans));
                break;

            case InventJournalType::Movement:
                ledgerDimension = _inventJournalTrans.LedgerDimension;
                break;

            case InventJournalType::Transfer:
                ledgerDimension = InventPosting::itemLedgerDimensionFromParameter(
                    this.itemLedgerDimensionFromParameter(InventAccountType::InventInterUnitReceivable, _inventJournalTrans));
                break;

            default:
                ledgerDimension = InventPosting::itemLedgerDimensionFromParameter(
                    this.itemLedgerDimensionFromParameter(InventAccountType::InventLoss, _inventJournalTrans));
        }

        select DisplayValue from dimAttrValueSetItemView
            where dimAttrValueSetItemView.DimensionAttributeValueSet == _inventJournalTrans.DefaultDimension &&
                    dimAttrValueSetItemView.DimensionAttribute       == _analysisCode;

        return [LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimension), dimAttrValueSetItemView.DisplayValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTableSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills lines section of xml document with data
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// InventJournalTrans which will be printed
    /// </param>
    /// <param name="_analysisCode">
    /// Dimension Code, which was set in parameters as analysis code
    /// </param>
    /// <remarks>
    /// ItemName initialized from inventTable.ItemName and inventDimCombination.Name
    /// </remarks>
    protected void initInventTableSection(InventJournalTrans _inventJournalTrans, RefRecId _analysisCode)
    {
        DimensionAttributeValueSetItemView      dimAttrValueSetItemView;

        XmlElement                  xmlElement      = xmlDocument.createElement(#InventTableSection);
        InventTable                 inventTable     = _inventJournalTrans.inventTable();
        LedgerDimensionAccount      ledgerDimension;

        InventDimParm               inventDimParm;

        if (_inventJournalTrans.JournalType == InventJournalType::BOM)
        {
            ledgerDimension = InventPosting::itemLedgerDimensionFromParameter(
                this.itemLedgerDimensionFromParameter(InventAccountType::ProdIssue, _inventJournalTrans));
        }
        else
        {
            ledgerDimension = InventPosting::itemLedgerDimensionFromParameter(
                this.itemLedgerDimensionFromParameter(InventAccountType::InventIssue, _inventJournalTrans));
        }

        InventDimGroupSetup::newItemId(_inventJournalTrans.ItemId).inventDimParmActiveFinancialInventory(inventDimParm);
        InventOnhand inventOnhand = InventOnhand::newParameters(_inventJournalTrans.ItemId, _inventJournalTrans.inventDim(), inventDimParm);

        Price costPrice = inventOnhand.costPricePcs(false, _inventJournalTrans.TransDate);

        select firstonly DisplayValue from dimAttrValueSetItemView
            where dimAttrValueSetItemView.DimensionAttributeValueSet == _inventJournalTrans.DefaultDimension &&
                  dimAttrValueSetItemView.DimensionAttribute         == _analysisCode;

        xmlElement.setAttribute(#FromLedgerAccount, LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimension));
        xmlElement.setAttribute(#FromAnalysisCode,  dimAttrValueSetItemView.DisplayValue);
        xmlElement.setAttribute(#ItemName,          _inventJournalTrans.itemName());
        xmlElement.setAttribute(#ItemId,            inventTable.ItemId);
        xmlElement.setAttribute(#CodeOkei,          UnitOfMeasure_RU::codeOKEI_RU(UnitOfMeasure::findBySymbol(inventTable.bomUnitId)));
        xmlElement.setAttribute(#BOMUnitId,         inventTable.inventUnitId());
        xmlElement.setAttribute(#QtyNeed,           strFmt("@GLS106745", abs(_inventJournalTrans.Qty)));
        xmlElement.setAttribute(#Qty,               strFmt("@GLS106745", abs(_inventJournalTrans.Qty)));
        xmlElement.setAttribute(#Price,             strFmt("@GLS106745", costPrice));
        xmlElement.setAttribute(#LineAmount,        strFmt("@GLS106745", abs(_inventJournalTrans.Qty * costPrice)));
        xmlElement.setAttribute(#InventoryNum,      strFmt("@GLS106745", _inventJournalTrans.RecId > 0 ?
                                                                        _inventJournalTrans.RecId :
                                                                        -_inventJournalTrans.RecId));

        xmlRootElement.appendChild(xmlElement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>