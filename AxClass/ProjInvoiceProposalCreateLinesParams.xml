<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalCreateLinesParams</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class maintains the parameters used to create invoice proposal.
/// </summary>
/// <remarks>
/// This class is initialized on client and sent to server in a packed form.
/// Hence all variables need to be included in currentList.
/// </remarks>
class ProjInvoiceProposalCreateLinesParams
{
    ProjInvoiceProjId           projInvoiceProjId;
    ProjId                      projId;

    ProjInvoiceTypeSelection    invoiceTypeSelection;

    ProjFundingSourceId         fundingSourceId;

    TransDate                   invoiceDate;

    SMAServiceOrderTable        serviceOrderTable;

    TransDate                   startDate;
    TransDate                   endDate;

    SalesUpdate                 salesUpdate;

    CurrencyCode                currencyCodeFixed;

    boolean                     isQuerySalesLine;
    boolean                     isQueryEmpl;
    boolean                     isQueryCost;
    boolean                     isQueryRevenue;
    boolean                     isQuerySubscription;
    boolean                     isQueryItem;
    boolean                     isQueryOnAcc;
    boolean                     reverseMarking;
    boolean                     isDebitNote;
    RecId                       invoiceToBeCanceledRedId_BR;
    ProjInvPendingType          projInvPendingType;
    boolean                     periodicProposal;
    ReasonRefRecID              reasonRefRecID;
    boolean                     lateSelection;

    ProjCategoryId              projCategoryItem;
    ProjCategoryId              projCategoryFee;
    ProjCategoryId              projCategoryEmpl;
    ProjCategoryId              projCategoryExp;

    private container containerFundingSources;
    private container containerProjIds;
    private boolean isBatch;
    private boolean includeSubProjects = true;

    #define.CurrentVersion(8)
    #LOCALMACRO.CurrentList
        projId,
        projInvoiceProjId,
        invoiceTypeSelection,
        fundingSourceId,
        invoiceDate,
        serviceOrderTable,
        startDate,
        endDate,
        salesUpdate,
        currencyCodeFixed,
        isQuerySalesLine,
        isQueryEmpl,
        isQueryCost,
        isQueryRevenue,
        isQuerySubscription,
        isQueryItem,
        isQueryOnAcc,
        reverseMarking,
        isDebitNote,
        invoiceToBeCanceledRedId_BR,
        reasonRefRecID,
        ProjInvPendingType,
        PeriodicProposal,
        lateSelection,
        projCategoryItem,
        projCategoryFee,
        projCategoryEmpl,
        projCategoryExp,
        containerFundingSources,
        containerProjIds,
        isBatch,
        includeSubProjects
    #ENDMACRO

    #define.Version7(7)
    #LOCALMACRO.Version7List
        projId,
        projInvoiceProjId,
        invoiceTypeSelection,
        fundingSourceId,
        invoiceDate,
        serviceOrderTable,
        startDate,
        endDate,
        salesUpdate,
        currencyCodeFixed,
        isQuerySalesLine,
        isQueryEmpl,
        isQueryCost,
        isQueryRevenue,
        isQuerySubscription,
        isQueryItem,
        isQueryOnAcc,
        reverseMarking,
        isDebitNote,
        invoiceToBeCanceledRedId_BR,
        reasonRefRecID,
        ProjInvPendingType,
        PeriodicProposal,
        lateSelection,
        projCategoryItem,
        projCategoryFee,
        projCategoryEmpl,
        projCategoryExp,
        containerFundingSources,
        containerProjIds,
        isBatch
    #ENDMACRO

    #define.Version6(6)
    #LOCALMACRO.Version6List
        projId,
        projInvoiceProjId,
        invoiceTypeSelection,
        fundingSourceId,
        invoiceDate,
        serviceOrderTable,
        startDate,
        endDate,
        salesUpdate,
        currencyCodeFixed,
        isQuerySalesLine,
        isQueryEmpl,
        isQueryCost,
        isQueryRevenue,
        isQuerySubscription,
        isQueryItem,
        isQueryOnAcc,
        reverseMarking,
        isDebitNote,
        invoiceToBeCanceledRedId_BR,
        reasonRefRecID,
        ProjInvPendingType,
        PeriodicProposal,
        lateSelection,
        projCategoryItem,
        projCategoryFee,
        projCategoryEmpl,
        projCategoryExp,
        containerFundingSources,
        containerProjIds
    #ENDMACRO

    #define.Version5(5)
    #LOCALMACRO.Version5List
        projId,
        projInvoiceProjId,
        invoiceTypeSelection,
        fundingSourceId,
        invoiceDate,
        serviceOrderTable,
        startDate,
        endDate,
        salesUpdate,
        currencyCodeFixed,
        isQuerySalesLine,
        isQueryEmpl,
        isQueryCost,
        isQueryRevenue,
        isQuerySubscription,
        isQueryItem,
        isQueryOnAcc,
        reverseMarking,
        isDebitNote,
        invoiceToBeCanceledRedId_BR,
        reasonRefRecID,
        ProjInvPendingType,
        PeriodicProposal,
        lateSelection,
        projCategoryItem,
        projCategoryFee,
        projCategoryEmpl,
        projCategoryExp,
        containerFundingSources
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCodeFixed</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCodeFixed(CurrencyCode _currencyCode = currencyCodeFixed)
    {
        currencyCodeFixed = _currencyCode;

        return currencyCodeFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public TransDate parmEndDate(TransDate _endDate = endDate)
    {
        endDate = _endDate;

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceId parmFundingSource(ProjFundingSourceId _fundingSourceId = fundingSourceId)
    {
        fundingSourceId = _fundingSourceId;

        return fundingSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDate</Name>
				<Source><![CDATA[
    public TransDate parmInvoiceDate(TransDate _invoiceDate = invoiceDate)
    {
        invoiceDate = _invoiceDate;

        return invoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceToBeCanceledId_BR</Name>
				<Source><![CDATA[
    public RecId parmInvoiceToBeCanceledId_BR(RecId _invoiceToBeCanceledRedId_BR = invoiceToBeCanceledRedId_BR)
    {
        invoiceToBeCanceledRedId_BR = _invoiceToBeCanceledRedId_BR;

        return invoiceToBeCanceledRedId_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceTypeSelection</Name>
				<Source><![CDATA[
    public ProjInvoiceTypeSelection parmInvoiceTypeSelection(ProjInvoiceTypeSelection _invoiceTypeSelection = invoiceTypeSelection)
    {
        invoiceTypeSelection  = _invoiceTypeSelection;

        return invoiceTypeSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDebitNote</Name>
				<Source><![CDATA[
    public boolean parmIsDebitNote(boolean _isDebitNote = isDebitNote)
    {
        isDebitNote = _isDebitNote;

        return isDebitNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsQueryCostTrans</Name>
				<Source><![CDATA[
    public boolean parmIsQueryCostTrans(boolean _isQueryCost = isQueryCost)
    {
        isQueryCost = _isQueryCost;

        return isQueryCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsQueryEmplTrans</Name>
				<Source><![CDATA[
    public boolean parmIsQueryEmplTrans(boolean _isQueryEmpl = isQueryEmpl)
    {
        isQueryEmpl = _isQueryEmpl;

        return isQueryEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsQueryItemTrans</Name>
				<Source><![CDATA[
    public boolean parmIsQueryItemTrans(boolean _isQueryItem = isQueryItem)
    {
        isQueryItem = _isQueryItem;

        return isQueryItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsQueryOnAccTrans</Name>
				<Source><![CDATA[
    public boolean parmIsQueryOnAccTrans(boolean _isQueryOnAcc = isQueryOnAcc)
    {
        isQueryOnAcc = _isQueryOnAcc;

        return isQueryOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsQueryRevenueTrans</Name>
				<Source><![CDATA[
    public boolean parmIsQueryRevenueTrans(boolean _isQueryRevenue = isQueryRevenue)
    {
        isQueryRevenue = _isQueryRevenue;

        return isQueryRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsQuerySalesLine</Name>
				<Source><![CDATA[
    public boolean parmIsQuerySalesLine(boolean _isQuerySalesLine = isQuerySalesLine)
    {
        isQuerySalesLine = _isQuerySalesLine;

        return isQuerySalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsQuerySubscriptionTrans</Name>
				<Source><![CDATA[
    public boolean parmIsQuerySubscriptionTrans(boolean _isQuerySubscription = isQuerySubscription)
    {
        isQuerySubscription = _isQuerySubscription;

        return isQuerySubscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;

        //On using SysQuery if ProjId has empty string return '*' otherwise projId.
        if (projId == '""*')
        {
            return "*";
        }
        else
        {
            return projId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeSubProjects</Name>
				<Source><![CDATA[
    public boolean parmIncludeSubProjects(boolean _includeSubProjects = includeSubProjects)
    {
        includeSubProjects = _includeSubProjects;

        return includeSubProjects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceProjId</Name>
				<Source><![CDATA[
    public ProjInvoiceProjId parmProjInvoiceProjId(ProjInvoiceProjId _invoiceProjId = projInvoiceProjId)
    {
        projInvoiceProjId = _invoiceProjId;

        return projInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonRefRecID</Name>
				<Source><![CDATA[
    public ReasonRefRecID parmReasonRefRecID(ReasonRefRecID _reasonRefRecID = reasonRefRecID)
    {
        reasonRefRecID = _reasonRefRecID;
        return reasonRefRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseMarking_BR</Name>
				<Source><![CDATA[
    public boolean parmReverseMarking_BR(boolean _reverseMarking = reverseMarking)
    {
        reverseMarking = _reverseMarking;
        return _reverseMarking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesUpdate</Name>
				<Source><![CDATA[
    public SalesUpdate parmSalesUpdate(SalesUpdate _salesUpdate = salesUpdate)
    {
        salesUpdate = _salesUpdate;

        return salesUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceOrderTable</Name>
				<Source><![CDATA[
    public SMAServiceOrderTable parmServiceOrderTable(SMAServiceOrderTable _serviceOrderTable = serviceOrderTable)
    {
        serviceOrderTable = _serviceOrderTable;

        return serviceOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public TransDate parmStartDate(TransDate _startDate = startDate)
    {
        startDate = _startDate;

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container  _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            case #Version7:
                [version, #Version7List] = _packedClass;
                break;

            case #Version6:
                [version, #Version6List] = _packedClass;
                break;

            case #Version5:
                [version, #Version5List] = _packedClass;
                break;

            default :
                throw error(strFmt("@SYS19306", funcName()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjInvoiceProposalCreateLinesParams construct()
    {
        return new ProjInvoiceProposalCreateLinesParams();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPeriodicProposal</Name>
				<Source><![CDATA[
    public boolean parmIsPeriodicProposal(boolean _isPeriodicProposal = periodicProposal)
    {
        periodicProposal = _isPeriodicProposal;

        return periodicProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvPendingType</Name>
				<Source><![CDATA[
    public ProjInvPendingType parmProjInvPendingType(ProjInvPendingType _projInvPendingType = projInvPendingType)
    {
        projInvPendingType = _projInvPendingType;

        return projInvPendingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLateSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the lateselection control value.
    /// </summary>
    /// <param name="_lateSelection">
    /// A lateSelection control value.
    /// </param>
    /// <returns>
    /// True if mark; otherwise false.
    /// </returns>
    public boolean parmLateSelection(boolean _lateSelection = lateSelection)
    {
        lateSelection = _lateSelection;

        return lateSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryIdItem</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjCategoryIdItem(ProjCategoryId _projCategoryId = projCategoryItem)
    {
        projCategoryItem = _projCategoryId;

        return projCategoryItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryIdFee</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjCategoryIdFee(ProjCategoryId _projCategoryId = projCategoryFee)
    {
        projCategoryFee = _projCategoryId;

        return projCategoryFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryIdEmpl</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjCategoryIdEmpl(ProjCategoryId _projCategoryId = projCategoryEmpl)
    {
        projCategoryEmpl = _projCategoryId;

        return projCategoryEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryIdExp</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjCategoryIdExp(ProjCategoryId _projCategoryId = projCategoryExp)
    {
        projCategoryExp = _projCategoryId;

        return projCategoryExp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerFundingSources</Name>
				<Source><![CDATA[
    public container parmContainerFundingSources(container _containerFundingSources = containerFundingSources)
    {
        containerFundingSources = _containerFundingSources;

        return containerFundingSources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerProjIds</Name>
				<Source><![CDATA[
    public container parmContainerProjIds(container _containerProjIds = containerProjIds)
    {
        containerProjIds = _containerProjIds;

        return containerProjIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBatch</Name>
				<Source><![CDATA[
    public boolean parmIsBatch(boolean _isBatch = isBatch)
    {
        isBatch = _isBatch;

        return isBatch;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>