<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVATDeclReportFactures_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class LedgerVATDeclReportFactures_RU extends LedgerVATDeclReport_RU
{
    FactureOutReportMethod_RU   outReportMethod;
    NoYes                       useReportingDate;
    RecordSortedList            rslFactures;
    QueryRun                    queryRun;
    Set                         userFilterSet;
    TransDate                   startDate;
    TransDate                   endDate;

    protected const str defaultBookDateNumDelimiter = ';';
    protected const str zeroVAT = '0';
    protected const str rangeValue = '((\%1.ExportProcessing == 0) || (\%1.FactureType == 1))';
    
    #FactureHeader_RU

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyUserFilterSet</Name>
				<Source><![CDATA[
    protected void applyUserFilterSet(RecordSortedList _rsl)
    {
        FactureJour_RU  factureJourLocal;
        SetEnumerator   setEnumerator;
        Set             setToRemove = new Set(Types::Record);

        while (_rsl.next(factureJourLocal))
        {
            if (! userFilterSet.in(factureJourLocal.RecId))
            {
                setToRemove.add(factureJourLocal);
            }
        }

        setEnumerator = setToRemove.getEnumerator();
        while (setEnumerator.moveNext())
        {
            _rsl.del(setEnumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDiffAmounts</Name>
				<Source><![CDATA[
    private container calcDiffAmounts(FactureJour_RU _factureJour)
    {
        Map                 mapFactureTransGroup;
        container           key;
        MapEnumerator       mapEnumerator;
        ListEnumerator      listEnumerator;

        FactureTrans_RU     factureTrans;
        FactureTrans_RU     factureTransOrig;

        TaxAmount           taxAmount1, taxAmount2,
                            amountWithVAT1, amountWithVAT2,
                            taxAmountDiff1  = 0,
                            taxAmountDiff2  = 0,
                            amountWTaxDiff1 = 0,
                            amountWTaxDiff2 = 0;
        ;

        mapFactureTransGroup = new Map(Types::Container, Types::Container);

        listEnumerator   = this.getCorrOrigTrans(_factureJour).getEnumerator();
        while (listEnumerator.moveNext())
        {
            factureTransOrig.clear();
            [factureTransOrig, factureTrans] = listEnumerator.current();

            key = [factureTrans.FactureId,
                   factureTrans.Price,
                   factureTrans.FactureLineType,
                   factureTrans.Module,
                   factureTrans.ItemName,
                   factureTrans.Unit,
                   factureTrans.vatValue,
                   factureTrans.CountryRegionName,
                   factureTrans.ItemId,
                   factureTrans.InventGTDId,
                   factureTrans.InventDimId,
                   factureTrans.ExchRate];

            if (mapFactureTransGroup.exists(key))
            {
                [amountWithVAT1, amountWithVAT2, taxAmount1, taxAmount2] = mapFactureTransGroup.lookup(key);
            }
            else
            {
                amountWithVAT1 = 0;
                amountWithVAT2 = 0;
                taxAmount1     = 0;
                taxAmount2     = 0;
            }

            amountWithVAT1 += this.getTransAmountWithVAT(factureTransOrig, _factureJour);
            amountWithVAT2 += this.getTransAmountWithVAT(factureTrans, _factureJour);
            taxAmount1     += this.getTransVATAmount(factureTransOrig, _factureJour);
            taxAmount2     += this.getTransVATAmount(factureTrans, _factureJour);

            mapFactureTransGroup.insert(key, [amountWithVAT1, amountWithVAT2, taxAmount1, taxAmount2]);
        }

        mapEnumerator = mapFactureTransGroup.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            [amountWithVAT1, amountWithVAT2, taxAmount1, taxAmount2] = mapEnumerator.currentValue();

            taxAmount2 -= taxAmount1;
            taxAmountDiff1 += taxAmount2 < 0 ? abs(taxAmount2) : 0;
            taxAmountDiff2 += taxAmount2 < 0 ? 0 : abs(taxAmount2);

            amountWithVAT2 -= amountWithVAT1;
            amountWTaxDiff1 += amountWithVAT2 < 0 ? abs(amountWithVAT2) : 0;
            amountWTaxDiff2 += amountWithVAT2 < 0 ? 0 : abs(amountWithVAT2);
        }

        return [amountWTaxDiff1, amountWTaxDiff2, taxAmountDiff1, taxAmountDiff2];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOrigRevisionAmounts</Name>
				<Source><![CDATA[
    private container calcOrigRevisionAmounts(FactureJour_RU _factureJour)
    {
        FactureTrans_RU         tmpTrans;
        AmountMST               amountRevisionWTax;
        TaxAmount               amountRevisionVAT;
        ;

        //BP deviation documented
        tmpTrans.setTmp();

        tmpTrans.setTmpData(_factureJour.getTmpTrans());

        select
        sum(LineAmountMST)
        , sum(LineAmount)
        , sum(vatAmountMST)
        , sum(vat)
        , sum(ExciseAmountMST)
        , sum(Excise)
    from tmpTrans;

        if (_factureJour.PrintInMST)
        {
            amountRevisionVAT = tmpTrans.vatAmountMST;
            amountRevisionWTax = tmpTrans.LineAmountMST + amountRevisionVAT + tmpTrans.ExciseAmountMST;
        }
        else
        {
            amountRevisionVAT = tmpTrans.vat;
            amountRevisionWTax = tmpTrans.LineAmount + amountRevisionVAT + tmpTrans.Excise;
        }

        return [amountRevisionWTax, amountRevisionVAT];
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCommissionAgentFields</Name>
				<Source><![CDATA[
    protected TmpLedgerVATDeclaratoinLine_RU copyCommissionAgentFields(
    TmpLedgerVATDeclaratoinLine_RU _from,
    TmpLedgerVATDeclaratoinLine_RU _to)
    {
        _to.AgentCompanyINN = _from.AgentCompanyINN;
        _to.AgentCompanyKPP = _from.AgentCompanyKPP;
        _to.AgentPersonINN = _from.AgentPersonINN;
        _to.AgentName = _from.AgentName;
        _to.AgentParty = _from.AgentParty;
        _to.FactureNumSeller = _from.FactureNumSeller;
        _to.FactureDateSeller = _from.FactureDateSeller;
        _to.CurrencyCodeOKV = _from.CurrencyCodeOKV;
        _to.AmountInclVAT = _from.AmountInclVAT;
        _to.TaxAmountVAT = _from.TaxAmountVAT;
        _to.AmountDiffMinus = _from.AmountDiffMinus;
        _to.AmountDiffPlus = _from.AmountDiffPlus;
        _to.TaxAmountDiffMinus = _from.TaxAmountDiffMinus;
        _to.TaxAmountDiffPlus = _from.TaxAmountDiffPlus;

        _to.AmountInclVATStr = _from.AmountInclVATStr;
        _to.TaxAmountVATStr = _from.TaxAmountVATStr;
        _to.AmountDiffMinusStr = _from.AmountDiffMinusStr;
        _to.AmountDiffPlusStr = _from.AmountDiffPlusStr;
        _to.TaxAmountDiffMinusStr = _from.TaxAmountDiffMinusStr;
        _to.TaxAmountDiffPlusStr = _from.TaxAmountDiffPlusStr;

        return _to;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCorrFactureFields</Name>
				<Source><![CDATA[
    protected void fillCorrFactureFields(
        TmpLedgerVATDeclaratoinLine_RU  _line,
        FactureHeaderData_RU            _headerData,
        FactureJour_RU                  _factureJour)
    {
        TaxAmount                   amountWTaxDiffMinus, amountWTaxDiffPlus,
                                    taxAmountDiffMinus, taxAmountDiffPlus;
        CustVendCorrFactureCalc_RU  corrFactureReport;

        [amountWTaxDiffMinus,
         amountWTaxDiffPlus,
         taxAmountDiffMinus,
         taxAmountDiffPlus] = this.calcDiffAmounts(_factureJour);

        _line.AmountDiffMinus = abs(amountWTaxDiffMinus);
        _line.AmountDiffPlus = abs(amountWTaxDiffPlus);

        _line.AmountDiffMinusStr = strFmt("@GLS106745", _line.AmountDiffMinus);
        _line.AmountDiffPlusStr = strFmt("@GLS106745", _line.AmountDiffPlus);

        _line.AmountInclVATStr = '';
        _line.TaxAmountVATStr = '';

        if (_factureJour.hasVAT())
        {
            _line.TaxAmountDiffMinus = abs(taxAmountDiffMinus);
            _line.TaxAmountDiffPlus = abs(taxAmountDiffPlus);
            _line.TaxAmountDiffMinusStr = strFmt("@GLS106745", _line.TaxAmountDiffMinus);
            _line.TaxAmountDiffPlusStr = strFmt("@GLS106745", _line.TaxAmountDiffPlus);
        }
        else
        {
            _line.TaxAmountDiffMinus = amountWTaxDiffMinus > 0 ? 0 : abs(taxAmountDiffMinus);
            _line.TaxAmountDiffPlus = amountWTaxDiffPlus > 0 ? 0 : abs(taxAmountDiffPlus);
            _line.TaxAmountDiffMinusStr = amountWTaxDiffMinus > 0 ? #withoutVAT : strFmt("@GLS106745", abs(taxAmountDiffMinus));
            _line.TaxAmountDiffPlusStr = amountWTaxDiffPlus > 0 ? #withoutVAT : strFmt("@GLS106745", abs(taxAmountDiffPlus));
        }

        corrFactureReport = CustVendCorrFactureCalc_RU::newCalc(_factureJour, true);
        corrFactureReport.calc();

        _line.FactureNum = con2str(corrFactureReport.getOrigFactureNums(), defaultBookDateNumDelimiter);
        _line.FactureDate = conlen(corrFactureReport.getOrigFactureDates()) ? str2date(conpeek(corrFactureReport.getOrigFactureDates(), 1), -1) : datenull();

        _line.FactureCorrRevision = any2int(conpeek(corrFactureReport.getOrigFactureRevisionNum(), 1));
        _line.FactureCorrDate = conlen(corrFactureReport.getOrigFactureRevisionDate()) ? str2date(conpeek(corrFactureReport.getOrigFactureRevisionDate(), 1), -1) : datenull();

        _line.CorrFactureNum = _headerData.getHeaderAttribute(#SeparateDivisionId)                                                     ?
                        strfmt("@GLS111217", _factureJour.FactureExternalId, _headerData.getHeaderAttribute(#SeparateDivisionId)) :
                        _factureJour.FactureExternalId;
        _line.CorrFactureDate = _factureJour.FactureDate_External ?
                        _factureJour.FactureDate_External :
                        _factureJour.FactureDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLine</Name>
				<Source><![CDATA[
    protected void fillLine(
    boolean                         _outgoing,
    TmpLedgerVATDeclaratoinLine_RU  _line,
    FactureJour_RU                  _factureJour)
    {
        FactureHeaderData_RU    headerData;
        boolean                 swapAttr;
        FieldId                 fieldINN, fieldKPP, fieldName, fieldParty;

        headerData = FactureHeaderData_RU::newFromCaller(FactureJourParm_RU::newParameters(_factureJour, true));

        swapAttr = _factureJour.amount() < 0             &&
               headerData.isNonCreditNoteAttrOrder() &&
               _factureJour.rev0().CorrectionType != FactureCorrectionType_RU::Correction;

        if (_outgoing ^ swapAttr)
        {
            fieldINN   = #ContragentINN;
            fieldKPP   = #ContragentKPP;
            fieldName  = #ContragentName;
            fieldParty = #ContragentParty;
        }
        else
        {
            fieldINN   = #CompanyINN;
            fieldKPP   = #CompanyKPP;
            fieldName  = #CompanyName;
            fieldParty = #CompanyParty;
        }

        if (headerData.getHeaderAttribute(fieldKPP))
        {
            _line.CompanyINN = headerData.getHeaderAttribute(fieldINN);
            _line.CompanyKPP = headerData.getHeaderAttribute(fieldKPP);
        }
        else
        {
            _line.PersonINN = headerData.getHeaderAttribute(fieldINN);
        }

        _line.SellerBuyerINN   = headerData.getHeaderAttribute(fieldINN);
        _line.SellerBuyerKPP   = headerData.getHeaderAttribute(fieldKPP);
        _line.SellerBuyerName  = headerData.getHeaderAttribute(fieldName);
        _line.SellerBuyerParty = headerData.getHeaderAttribute(fieldParty);

        if (_factureJour.PrintInMST)
        {
            _line.CurrencyCode = CompanyInfoHelper::standardCurrency();
        }
        else
        {
            _line.CurrencyCode = _factureJour.CurrencyCode;
        }

        _line.CurrencyCodeOKV = this.currencyCode(_line.CurrencyCode);

        if (_factureJour.CorrectedFactureExternalId)
        {
            switch (_factureJour.CorrectionType)
            {
                case FactureCorrectionType_RU::Revision:
                this.fillRevisionFactureFields(
                    _line,
                    headerData,
                    _factureJour);
                    break;

                default:
                this.fillCorrFactureFields(
                    _line,
                    headerData,
                    _factureJour);
                    break;
            }
        }
        else
        {
            this.fillOrigFactureFields(
            _line,
            headerData,
            _factureJour);
        }

        if (! _outgoing                                                              &&
        (_factureJour.InventProfileType == InventProfileType_RU::CommissionAgent ||
         _factureJour.InventProfileType == InventProfileType_RU::CommissionPrincipalAgent))
        {
            if (_factureJour.factureHeader().AgencyAgreement == AgencyAgreement_RU::None)
            {
                _line.DealTypeCode = _factureJour.Module == FactureModule_RU::Vend ? '1' : '4';
            }
            else
            {
                _line.DealTypeCode = _factureJour.Module == FactureModule_RU::Vend ? '2' : '3';
            }
        }

        if (this.outgoing())
        {
            _line.FactureJourRefRecId = _factureJour.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOrigFactureFields</Name>
				<Source><![CDATA[
    protected void fillOrigFactureFields(
        TmpLedgerVATDeclaratoinLine_RU  _line,
        FactureHeaderData_RU            _headerData,
        FactureJour_RU                  _factureJour)
    {
        TaxAmount               amountWithTax, taxAmount;

        _line.FactureNum = _headerData.getHeaderAttribute(#SeparateDivisionId)                                                     ?
                    strfmt("@GLS111217", _factureJour.FactureExternalId, _headerData.getHeaderAttribute(#SeparateDivisionId)) :
                    _factureJour.FactureExternalId;
        _line.FactureDate =  _factureJour.FactureDate_External ?
                    _factureJour.FactureDate_External :
                    _factureJour.FactureDate;
        [amountWithTax, taxAmount] = this.getFactureAmounts(_factureJour);

        if (_factureJour.hasVAT())
        {
            _line.TaxAmountVAT = abs(taxAmount);
            _line.TaxAmountVATStr = _line.TaxAmountVAT ? strFmt("@GLS106745", abs(_line.TaxAmountVAT)) : zeroVAT;

        }
        else
        {
            _line.TaxAmountVATStr = #withoutVAT;
        }

        _line.AmountInclVAT = abs(amountWithTax);
        _line.AmountInclVATStr = strFmt("@GLS106745", _line.AmountInclVAT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRevisionFactureFields</Name>
				<Source><![CDATA[
    protected void fillRevisionFactureFields(
    TmpLedgerVATDeclaratoinLine_RU  _line,
    FactureHeaderData_RU            _headerData,
    FactureJour_RU                  _factureJour)
    {
        FactureJour_RU              factureJourRevised;
        CustVendCorrFactureCalc_RU  corrFactureReport;
        str                         factureNum, factureSepDivId;
        TaxAmount                   amountWTaxDiffMinus, amountWTaxDiffPlus,
                                taxAmountDiffMinus, taxAmountDiffPlus;
        SeparateDivisionId_RU       origFactureSepDivId;

        factureJourRevised = FactureJour_RU::findRecId(_factureJour.RefRevisedFacture);

        if (factureJourRevised.CorrectedFactureExternalId)
        {
            corrFactureReport = CustVendCorrFactureCalc_RU::newCalc(_factureJour);
            corrFactureReport.calc();

            factureNum = corrFactureReport.getFactureNum();
            factureSepDivId = corrFactureReport.getFactureSepDivId();

            _line.CorrFactureNum = factureSepDivId ? strfmt("@GLS111217", factureNum, factureSepDivId)
                                                : factureNum;

            _line.CorrFactureDate = corrFactureReport.getFactureDate();

            _line.FactureNum = con2str(corrFactureReport.getOrigFactureNums(), defaultBookDateNumDelimiter);
            _line.FactureDate = conlen(corrFactureReport.getOrigFactureDates()) ? str2date(conpeek(corrFactureReport.getOrigFactureDates(), 1), -1) : datenull();

            _line.FactureCorrRevision = any2int(conpeek(corrFactureReport.getOrigFactureRevisionNum(), 1));
            _line.FactureCorrDate = conlen(corrFactureReport.getOrigFactureRevisionDate()) ? str2date(conpeek(corrFactureReport.getOrigFactureRevisionDate(), 1), -1) : datenull();

            amountWTaxDiffMinus = corrFactureReport.getTotalAmountWTaxMinus();
            amountWTaxDiffPlus = corrFactureReport.getTotalAmountWTaxPlus();
            taxAmountDiffMinus = corrFactureReport.getTotalTaxAmountMinus();
            taxAmountDiffPlus = corrFactureReport.getTotalTaxAmountPlus();

            if (_factureJour.hasVAT())
            {
                _line.TaxAmountDiffMinus = abs(taxAmountDiffMinus);
                _line.TaxAmountDiffPlus = abs(taxAmountDiffPlus);
                _line.TaxAmountDiffMinusStr = strFmt("@GLS106745", _line.TaxAmountDiffMinus);
                _line.TaxAmountDiffPlusStr = strFmt("@GLS106745", _line.TaxAmountDiffPlus);
            }
            else
            {
                _line.TaxAmountDiffMinus = amountWTaxDiffMinus > 0 ? 0 : abs(taxAmountDiffMinus);
                _line.TaxAmountDiffPlus = amountWTaxDiffPlus > 0 ? 0 : abs(taxAmountDiffPlus);
                _line.TaxAmountDiffMinusStr = amountWTaxDiffMinus > 0 ? #withoutVAT : strFmt("@GLS106745", abs(taxAmountDiffMinus));
                _line.TaxAmountDiffPlusStr = amountWTaxDiffPlus > 0 ? #withoutVAT : strFmt("@GLS106745", abs(taxAmountDiffPlus));
            }

            _line.AmountDiffMinus = abs(amountWTaxDiffMinus);
            _line.AmountDiffPlus = abs(amountWTaxDiffPlus);
            _line.AmountDiffMinusStr = strFmt("@GLS106745", _line.AmountDiffMinus);
            _line.AmountDiffPlusStr = strFmt("@GLS106745", _line.AmountDiffPlus);

            _line.AmountInclVATStr = '';
            _line.TaxAmountVATStr = '';
        }
        else
        {
            [_line.AmountInclVAT,
            _line.TaxAmountVAT] = this.calcOrigRevisionAmounts(_factureJour);
            _line.AmountInclVAT = abs(_line.AmountInclVAT);
            _line.TaxAmountVAT = abs(_line.TaxAmountVAT);

            _line.AmountInclVATStr = strFmt("@GLS106745", _line.AmountInclVAT);
            _line.TaxAmountVATStr = strFmt("@GLS106745", _line.TaxAmountVAT);

            _line.AmountDiffMinusStr = '';
            _line.AmountDiffPlusStr = '';

            _line.TaxAmountDiffMinusStr = '';
            _line.TaxAmountDiffPlusStr = '';

            origFactureSepDivId = _headerData.getHeaderAttribute(#SeparateDivisionId);

            _line.FactureNum      = origFactureSepDivId                                                         ?
                               strfmt("@GLS111217", factureJourRevised.FactureExternalId, origFactureSepDivId) :
                               factureJourRevised.FactureExternalId;

            _line.FactureDate = factureJourRevised.FactureDate_External  ?
                           factureJourRevised.FactureDate_External  :
                           factureJourRevised.FactureDate;

            _line.FactureCorrRevision = _factureJour.RevisionNum;
            _line.FactureCorrDate = _factureJour.FactureDate_External ?
                               _factureJour.FactureDate_External :
                               _factureJour.FactureDate;
        }

        if (factureJourRevised.CorrectedFactureExternalId && _factureJour.RevisionNum)
        {
            _line.CorrFactureCorrRevision = _factureJour.RevisionNum;
            _line.CorrFactureCorrDate = _factureJour.FactureDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommissionAgentMap</Name>
				<Source><![CDATA[
    protected Map getCommissionAgentMap(FactureJour_RU _factureJour)
    {
        FactureTrans_RU              factureTrans;
        FactureJour_RU               factureJourLocal;
        FactureJour_RU               factureJourRevision;
        CommReportTransItem_RU       commReportTransItem;
        CommReportTransPrepayment_RU commReportTransPrepayment;
        Map                          map = new Map(Types::Container, Types::Record);

        void addSetElement()
        {
            container key;
            TmpLedgerVATDeclaratoinLine_RU lineElement, lineVendElement;
            FactureJour_RU tmpFactureJour = factureJourRevision ?
                                        factureJourRevision :
                                        _factureJour;

            this.fillLine(true,
                      lineElement,
                      abs(factureJourLocal.amount()) <= abs(tmpFactureJour.amount()) ?
                        factureJourLocal :
                        tmpFactureJour);

            this.fillLine(false, lineVendElement, factureJourLocal);

            lineElement.AgentCompanyINN = lineVendElement.CompanyINN;
            lineElement.AgentCompanyKPP = lineVendElement.CompanyKPP;
            lineElement.AgentPersonINN  = lineVendElement.PersonINN;
            lineElement.AgentName       = lineVendElement.SellerBuyerName;
            lineElement.AgentParty      = lineVendElement.SellerBuyerParty;

            if (lineVendElement.CorrFactureNum)
            {
                lineElement.FactureNumSeller = lineVendElement.CorrFactureNum;
                lineElement.FactureDateSeller = lineVendElement.CorrFactureDate;
            }
            else
            {
                lineElement.FactureNumSeller = lineVendElement.FactureNum;
                lineElement.FactureDateSeller = lineVendElement.FactureDate;
            }

            key = [lineElement.AgentCompanyINN,
                   lineElement.AgentCompanyKPP,
                   lineElement.AgentPersonINN,
                   lineElement.FactureNumSeller,
                   lineElement.FactureDateSeller];

            map.insert(key, lineElement);
        }
        ;

        switch (_factureJour.FactureType)
        {
            case FactureType_RU::Invoice :
            while select factureJourRevision
                order by RevisionNum
                where (_factureJour.RefRevisedFacture
                   &&  ((factureJourRevision.RefRevisedFacture == _factureJour.RefRevisedFacture
                   &&    factureJourRevision.RevisionNum       <= _factureJour.RevisionNum)
                   ||  factureJourRevision.RecId == _factureJour.RefRevisedFacture))
                   || factureJourRevision.RecId  == _factureJour.RecId
                {
                    while select factureJourLocal
                    where (!useReportingDate
                        && factureJourLocal.FactureDate >= fromDate
                        && factureJourLocal.FactureDate <= toDate)
                        || (useReportingDate
                        && factureJourLocal.FactureReportDate >= fromDate
                        && factureJourLocal.FactureReportDate <= toDate)
                    exists join factureTrans
                        where factureTrans.FactureId == factureJourLocal.FactureId
                           && factureTrans.Module    == factureJourLocal.Module
                    exists join commReportTransItem
                        where commReportTransItem.RecId          == factureTrans.RefCommReportTrans
                           && commReportTransItem.RefFactureJour == factureJourRevision.RecId
                           && commReportTransItem.Approved
                    {
                        addSetElement();
                    }

                    while select factureJourLocal
                    exists join commReportTransItem
                        where commReportTransItem.RefFactureJour == factureJourLocal.RecId
                           && commReportTransItem.Approved
                    exists join factureTrans
                        where factureTrans.RefCommReportTrans == commReportTransItem.RecId
                           && factureTrans.FactureId          == factureJourRevision.FactureId
                           && factureTrans.Module             == factureJourRevision.Module
                    {
                        addSetElement();
                    }
                }
                break;

            case FactureType_RU::Prepayment :
            while select factureJourLocal
                where (!useReportingDate
                    && factureJourLocal.FactureDate >= fromDate
                    && factureJourLocal.FactureDate <= toDate)
                    || (useReportingDate
                    && factureJourLocal.FactureReportDate >= fromDate
                    && factureJourLocal.FactureReportDate <= toDate)
                exists join commReportTransPrepayment
                    where commReportTransPrepayment.RecId          == factureJourLocal.RefCommReportTrans
                       && commReportTransPrepayment.RefFactureJour == _factureJour.RecId
                       && commReportTransPrepayment.Approved
                {
                    addSetElement();
                }

                while select factureJourLocal
                exists join commReportTransPrepayment
                    where commReportTransPrepayment.RecId          == _factureJour.RefCommReportTrans
                       && commReportTransPrepayment.RefFactureJour == factureJourLocal.RecId
                       && commReportTransPrepayment.Approved
                {
                    addSetElement();
                }
                break;
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrOrigTrans</Name>
				<Source><![CDATA[
    private List getCorrOrigTrans(FactureJour_RU _factureJour)
    {
        int                             idx;
        fieldId                         fieldId;
        boolean                         isLineCorrected;
        FactureTaxCorrectionEngine_RU   factureTaxCorrectionEngine;
        List                            listFactureTrans;
        FactureTrans_RU                 factureTransCorr;
        FactureTrans_RU                 factureTransOrig;
        FactureTrans_RU                 factureTrans;
        ;

        //BP deviation documented
        factureTransOrig.setTmp();
        //BP deviation documented
        factureTransCorr.setTmp();

        listFactureTrans = new List(Types::Container);

        factureTaxCorrectionEngine = FactureTaxCorrectionEngine_RU::newParameters(_factureJour);
        factureTransOrig.setTmpData(factureTaxCorrectionEngine.getFactureTransOrig());

        factureTaxCorrectionEngine = FactureTaxCorrectionEngine_RU::newParameters(_factureJour, false, false, false, true);
        factureTransCorr.setTmpData(factureTaxCorrectionEngine.getFactureTransOrig());

        while select factureTransCorr
        order by FactureId, LineNum
        {
            select firstonly factureTransOrig
            where factureTransOrig.FactureId == factureTransCorr.FactureId &&
                  factureTransOrig.Module    == factureTransCorr.Module    &&
                  factureTransOrig.LineNum   == factureTransCorr.LineNum;

            isLineCorrected = false;
            if (factureTransOrig)
            {
                if (factureTransOrig.Qty != factureTransCorr.Qty)
                {
                    isLineCorrected = true;
                }
                else
                {
                    for (idx = 1; idx <= conlen(FactureTaxCorrectionEngine_RU::amountFields()); idx++)
                    {
                        fieldId = conpeek(FactureTaxCorrectionEngine_RU::amountFields(), idx);
                        if (factureTransOrig.(fieldId) != factureTransCorr.(fieldId))
                        {
                            isLineCorrected = true;
                        }
                    }
                }
            }

            if (! factureTransOrig || isLineCorrected)
            {
                listFactureTrans.addEnd([factureTransOrig, factureTransCorr]);
            }
        }

        if (! listFactureTrans.elements())
        {
            factureTransOrig.clear();
            while select factureTrans
            where factureTrans.FactureId == _factureJour.FactureId &&
                  factureTrans.Module    == _factureJour.Module
            {
                listFactureTrans.addEnd([factureTransOrig, factureTrans]);
            }
        }

        return listFactureTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureAmounts</Name>
				<Source><![CDATA[
    private container getFactureAmounts(FactureJour_RU _factureJour)
    {
        FactureTrans_RU     factureTrans;
        ;

        select sum(LineAmount),
               sum(LineAmountMST),
               sum(TaxAmount),
               sum(TaxAmountMST),
               sum(vat),
               sum(vatAmountMST) from factureTrans
        where factureTrans.FactureId == _factureJour.FactureId
               && factureTrans.Module    == _factureJour.Module;

        return _factureJour.PrintInMST                                                             ?
               [factureTrans.LineAmountMST + factureTrans.TaxAmountMST, factureTrans.vatAmountMST] :
               [factureTrans.LineAmount + factureTrans.TaxAmount, factureTrans.vat];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransAmountWithVAT</Name>
				<Source><![CDATA[
    protected TaxAmount getTransAmountWithVAT(FactureTrans_RU _factureTrans, FactureJour_RU _factureJour)
    {
        return _factureJour.PrintInMST                                  ?
           _factureTrans.LineAmountMST + _factureTrans.TaxAmountMST :
           _factureTrans.LineAmount    + _factureTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransVATAmount</Name>
				<Source><![CDATA[
    protected TaxAmount getTransVATAmount(FactureTrans_RU _factureTrans, FactureJour_RU _factureJour)
    {
        return _factureJour.PrintInMST ? _factureTrans.vatAmountMST : _factureTrans.vat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedList</Name>
				<Source><![CDATA[
    protected void initRecordSortedList()
    {
        userFilterSet = new Set(Types::Int64);
        rslFactures = new RecordSortedList(tableNum(FactureJour_RU));

        rslFactures.sortOrder(fieldNum(FactureJour_RU, RecId));

        this.loopQuery(this.qrCustFactures(), true);

        if (outReportMethod == FactureOutReportMethod_RU::ByConfirmDate)
        {
            this.loopQuery(this.qrCustCommItemFacturesSales(),    true);
            this.loopQuery(this.qrCustCommItemFacturesPurch(),    true);
            this.loopQuery(this.qrCustCommPrepaymFacturesSales(), true);
            this.loopQuery(this.qrCustCommPrepaymFacturesPurch(), true);
        }

        this.loopQuery(this.qrVendFactures(), false);

        this.initUserFilterSet();
        this.applyUserFilterSet(rslFactures);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUserFilterSet</Name>
				<Source><![CDATA[
    private void initUserFilterSet()
    {
        FactureJour_RU       jour;
        QueryBuildDataSource qbds = queryRun.query().dataSourceTable(tableNum(FactureJour_RU));

        userFilterSet = new Set(typeof(jour.RecId));

        findOrCreateRange_W(qbds, useReportingDate                             ?
                              fieldNum(FactureJour_RU, FactureReportDate)  :
                              fieldNum(FactureJour_RU, FactureDate), queryRange(startDate, endDate));

        while (queryRun.next())
        {
            jour = queryRun.get(tableNum(FactureJour_RU));

            userFilterSet.add(jour.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCommissionAgent</Name>
				<Source><![CDATA[
    protected void insertCommissionAgent(
    TmpLedgerVATDeclaratoinLine_RU  _line,
    FactureJour_RU                  _factureJour)
    {
        boolean                         isFirstLine = true;
        MapEnumerator                   me;
        TmpLedgerVATDeclaratoinLine_RU  lineLoc;
        ;

        me = this.getCommissionAgentMap(_factureJour).getEnumerator();

        while (me.moveNext())
        {
            lineLoc = me.currentValue();

            if (isFirstLine)
            {
                _line = this.copyCommissionAgentFields(lineLoc, _line);
                _line.update();
                isFirstLine = false;
            }
            else
            {
                lineLoc.setTmpData(_line);
                lineLoc.FactureJourRefRecId = _factureJour.RecId;
                lineLoc.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIncoming</Name>
				<Source><![CDATA[
    protected void insertIncoming(FactureJour_RU _factureJour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLine</Name>
				<Source><![CDATA[
    protected void insertLine(FactureJour_RU _factureJour, counter _lineNum)
    {
        line.clear();
        line.LineNumber = _lineNum;
        line.FactureDateIssueReceive = _factureJour.FactureDate;
        line.OperationTypeCodes = _factureJour.OperationTypeCodes;
        this.fillLine(this.outgoing(), line, _factureJour);
        line.insert();

        if (this.outgoing() &&
        (_factureJour.InventProfileType == InventProfileType_RU::CommissionAgent ||
         _factureJour.InventProfileType == InventProfileType_RU::CommissionPrincipalAgent))
        {
            this.insertCommissionAgent(line, _factureJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOutgoing</Name>
				<Source><![CDATA[
    protected void insertOutgoing(FactureJour_RU _factureJour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopQuery</Name>
				<Source><![CDATA[
    private void loopQuery(QueryRun _qr, boolean _outgoing)
    {
        QueryRun            qr = _qr;
        FactureJour_RU      factureJourLocal;
        FactureDate_RU      factureDate;

        if (qr == null)
        {
            return;
        }

        while (qr.next())
        {
            factureJourLocal = qr.get(tableNum(FactureJour_RU));

            factureDate = useReportingDate                   ?
                      factureJourLocal.FactureReportDate :
                      factureJourLocal.FactureDate;

            if (! startDate)
            {
                startDate = factureDate;
            }

            startDate   = min(startDate, factureDate);
            endDate     = max(endDate,   factureDate);

            if (factureJourLocal.amount() >= 0 || factureJourLocal.rev0().CorrectionType == FactureCorrectionType_RU::Correction)
            {
                if (_outgoing)
                {
                    this.insertOutgoing(factureJourLocal);
                }
                else
                {
                    this.insertIncoming(factureJourLocal);
                }
            }
            else
            {
                if (_outgoing)
                {
                    this.insertIncoming(factureJourLocal);
                }
                else
                {
                    this.insertOutgoing(factureJourLocal);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outgoing</Name>
				<Source><![CDATA[
    abstract protected boolean outgoing()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    protected void prepareData()
    {
        FactureJour_RU      factureJour;
        counter             lineNum;
        boolean             run;

        this.initRecordSortedList();

        header.insert();

        for (run = rslFactures.first(factureJour);
        run;
        run = rslFactures.next(factureJour))
        {
            lineNum++;
            this.insertLine(factureJour, lineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrCustCommItemFacturesPurch</Name>
				<Source><![CDATA[
    private QueryRun qrCustCommItemFacturesPurch()
    {
        Query                   q;
        QueryBuildDataSource    qbds;

        q = new Query();

        qbds = q.addDataSource(tableNum(FactureJour_RU));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, Module), con2Str([FactureModule_RU::Cust,
                                                                         FactureModule_RU::TaxCorrectionSales,
                                                                         FactureModule_RU::TaxCorrectionPurch_Cust]));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, FactureType), queryValue(FactureType_RU::Invoice));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, InventProfileType), con2Str([InventProfileType_RU::CommissionAgent,
                                                                                    InventProfileType_RU::CommissionPrincipalAgent]));
        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, TableId), strFmt(rangeValue, qbds.name()));

        findOrCreateRange_W(qbds, useReportingDate                             ?
                              fieldNum(FactureJour_RU, FactureReportDate)  :
                              fieldNum(FactureJour_RU, FactureDate), queryRange(fromDate, toDate));

        qbds = qbds.addDataSource(tableNum(FactureTrans_RU));
        qbds.addLink(fieldNum(FactureJour_RU, FactureId),   fieldNum(FactureTrans_RU, FactureId));
        qbds.addLink(fieldNum(FactureJour_RU, Module),      fieldNum(FactureTrans_RU, Module));
        qbds.joinMode(JoinMode::ExistsJoin);

        findOrCreateRange_W(qbds, fieldNum(FactureTrans_RU, RefCommReportTrans), SysQuery::valueNot(0));

        return new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrCustCommItemFacturesSales</Name>
				<Source><![CDATA[
    private QueryRun qrCustCommItemFacturesSales()
    {
        Query                   q;
        QueryBuildDataSource    qbds;

        q = new Query();

        qbds = q.addDataSource(tableNum(FactureJour_RU));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, Module), con2Str([FactureModule_RU::Cust,
                                                                             FactureModule_RU::TaxCorrectionSales,
                                                                             FactureModule_RU::TaxCorrectionPurch_Cust]));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, FactureType), queryValue(FactureType_RU::Invoice));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, InventProfileType), con2Str([InventProfileType_RU::CommissionAgent,
                                                                                    InventProfileType_RU::CommissionPrincipalAgent]));
        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, TableId), strFmt(rangeValue, qbds.name()));

        qbds = qbds.addDataSource(tableNum(CommReportTransItem_RU));
        qbds.addLink(fieldNum(FactureJour_RU, RecId), fieldNum(CommReportTransItem_RU, RefFactureJour));
        qbds.joinMode(JoinMode::ExistsJoin);

        findOrCreateRange_W(qbds, fieldNum(CommReportTransItem_RU, Approved), queryValue(NoYes::Yes));

        qbds = qbds.addDataSource(tableNum(FactureTrans_RU));
        qbds.addLink(fieldNum(CommReportTransItem_RU, RecId), fieldNum(FactureTrans_RU, RefCommReportTrans));
        qbds.joinMode(JoinMode::ExistsJoin);

        qbds = qbds.addDataSource(tableNum(FactureJour_RU));
        qbds.addLink(fieldNum(FactureTrans_RU, FactureId), fieldNum(FactureJour_RU, FactureId));
        qbds.addLink(fieldNum(FactureTrans_RU, Module),    fieldNum(FactureJour_RU, Module));
        qbds.joinMode(JoinMode::ExistsJoin);

        findOrCreateRange_W(qbds, useReportingDate                             ?
                              fieldNum(FactureJour_RU, FactureReportDate)  :
                              fieldNum(FactureJour_RU, FactureDate), queryRange(fromDate, toDate));

        return new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrCustCommPrepaymFacturesPurch</Name>
				<Source><![CDATA[
    private QueryRun qrCustCommPrepaymFacturesPurch()
    {
        Query                   q;
        QueryBuildDataSource    qbds;

        q = new Query();

        qbds = q.addDataSource(tableNum(FactureJour_RU));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, Module), con2Str([FactureModule_RU::Cust,
                                                                         FactureModule_RU::TaxCorrectionSales,
                                                                         FactureModule_RU::TaxCorrectionPurch_Cust]));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, FactureType), queryValue(FactureType_RU::Prepayment));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, InventProfileType), con2Str([InventProfileType_RU::CommissionAgent,
                                                                                    InventProfileType_RU::CommissionPrincipalAgent]));
        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, TableId), strFmt(rangeValue, qbds.name()));

        findOrCreateRange_W(qbds, useReportingDate                             ?
                              fieldNum(FactureJour_RU, FactureReportDate)  :
                              fieldNum(FactureJour_RU, FactureDate), queryRange(fromDate, toDate));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, RefCommReportTrans), SysQuery::valueNot(0));

        return new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrCustCommPrepaymFacturesSales</Name>
				<Source><![CDATA[
    private QueryRun qrCustCommPrepaymFacturesSales()
    {
        Query                   q;
        QueryBuildDataSource    qbds;

        q = new Query();

        qbds = q.addDataSource(tableNum(FactureJour_RU));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, Module), con2Str([FactureModule_RU::Cust,
                                                                         FactureModule_RU::TaxCorrectionSales,
                                                                         FactureModule_RU::TaxCorrectionPurch_Cust]));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, FactureType), queryValue(FactureType_RU::Prepayment));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, InventProfileType), con2Str([InventProfileType_RU::CommissionAgent,
                                                                                    InventProfileType_RU::CommissionPrincipalAgent]));
        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, TableId), strFmt(rangeValue, qbds.name()));

        qbds = qbds.addDataSource(tableNum(CommReportTransPrepayment_RU));
        qbds.addLink(fieldNum(FactureJour_RU, RecId), fieldNum(CommReportTransPrepayment_RU, RefFactureJour));
        qbds.joinMode(JoinMode::ExistsJoin);

        findOrCreateRange_W(qbds, fieldNum(CommReportTransPrepayment_RU, Approved), queryValue(NoYes::Yes));

        qbds = qbds.addDataSource(tableNum(FactureJour_RU));
        qbds.addLink(fieldNum(CommReportTransPrepayment_RU, RecId), fieldNum(FactureJour_RU, RefCommReportTrans));
        qbds.joinMode(JoinMode::ExistsJoin);

        findOrCreateRange_W(qbds, useReportingDate                             ?
                              fieldNum(FactureJour_RU, FactureReportDate)  :
                              fieldNum(FactureJour_RU, FactureDate), queryRange(fromDate, toDate));

        return new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrCustFactures</Name>
				<Source><![CDATA[
    private QueryRun qrCustFactures()
    {
        Query                   q;
        QueryBuildDataSource    qbds;

        q = new Query();

        qbds = q.addDataSource(tableNum(FactureJour_RU));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, Module), con2Str([FactureModule_RU::Cust,
                                                                         FactureModule_RU::TaxCorrectionSales,
                                                                         FactureModule_RU::TaxCorrectionPurch_Cust]));

        if (outReportMethod == FactureOutReportMethod_RU::ByConfirmDate)
        {
            findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, InventProfileType), queryNotValueCon_W([InventProfileType_RU::CommissionAgent,
                                                                                                   InventProfileType_RU::CommissionPrincipalAgent]));
        }

        findOrCreateRange_W(qbds, useReportingDate                             ?
                              fieldNum(FactureJour_RU, FactureReportDate)  :
                              fieldNum(FactureJour_RU, FactureDate), queryRange(fromDate, toDate));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, TableId), strFmt(rangeValue, qbds.name()));

        return new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrVendFactures</Name>
				<Source><![CDATA[
    private QueryRun qrVendFactures()
    {
        Query                   q;
        QueryBuildDataSource    qbds;

        q = new Query();

        qbds = q.addDataSource(tableNum(FactureJour_RU));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, Module), con2Str([FactureModule_RU::Vend,
                                                                         FactureModule_RU::Empl,
                                                                         FactureModule_RU::TaxCorrectionPurch,
                                                                         FactureModule_RU::TaxCorrectionSales_Vend]));

        findOrCreateRange_W(qbds, useReportingDate                             ?
                              fieldNum(FactureJour_RU, FactureReportDate)  :
                              fieldNum(FactureJour_RU, FactureDate), queryRange(fromDate, toDate));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, FactureType), queryNotValueCon_W([FactureType_RU::GTD,
                                                                                         FactureType_RU::CustomCorrection]));
        return new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContract</Name>
				<Source><![CDATA[
    public void setContract(container _contractPack)
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();

        super(_contractPack);
        contract.unpack(_contractPack);

        queryRun = new QueryRun(contract.parmFactureJourQueryRun());
        outReportMethod = contract.parmOutReportMethod();
        useReportingDate = contract.parmUseReportingDate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>