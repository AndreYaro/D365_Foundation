<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximAuthorization_ExportOrder_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim authorization export order class.
/// </summary>
class EximAuthorization_ExportOrder_IN extends EximAuthorization_IN implements BatchRetryable
{
    TmpEximExportOrderTable_IN tmpExportOrderTable;
    TmpEximExportOrderLines_IN tmpExportOrderLines;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applySion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply the sion method.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void applySion()
    {
        CustomsShippingBillTrans_IN      customsShippingBillTrans;
        EximShippingBillTrans_IN         eximShippingBillTrans;
        CustInvoiceTrans                 custInvoiceTrans;
        EximSionTableRecID_IN            sionTableRecId;
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        ;

        authorizationSchemesTable = EximAuthorizationSchemesTable_IN::find(authorizationSchemesTableRecId);

        sionTableRecId = EximSionTable_IN::findPeriod(authorizationSchemesTable.EximProductGroupTable,
                                                      authorizationSchemesTable.AuthorizationDateTime).RecId;

        if (sionTableRecId)
        {
            tmpImportableItems = null;

            while select RecId, ExportOrderTableRecId, CustomsShippingBillTransRecId
                from tmpExportOrderLines
                where tmpExportOrderLines.Mark == NoYes::Yes
                join tmpExportOrderTable
                    where tmpExportOrderTable.RecId                          == tmpExportOrderLines.ExportOrderTableRecId
                       && tmpExportOrderTable.AuthorizationSchemesTableRecId == authorizationSchemesTable.RecId
                join InventTransId, InvoiceId, InvoiceDate, ItemId, ShippingBillQty, ShippingBillDate, RecId
                    from customsShippingBillTrans
                    where customsShippingBillTrans.RecId == tmpExportOrderLines.CustomsShippingBillTransRecId
                join AssessableValue
                    from eximShippingBillTrans
                    where eximShippingBillTrans.ShippingBillTransRecId == customsShippingBillTrans.RecId
                join SalesUnit, CurrencyCode
                    from custInvoiceTrans
                    where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
                       && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
                       && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate
            {
                this.insertTmpImportableItems(sionTableRecId,
                                              tmpExportOrderLines.RecId,
                                              eximShippingBillTrans.AssessableValue,
                                              customsShippingBillTrans.ItemId,
                                              custInvoiceTrans.SalesUnit,
                                              customsShippingBillTrans.ShippingBillQty,
                                              custInvoiceTrans.CurrencyCode,
                                              customsShippingBillTrans.ShippingBillDate);
            }
        }

        this.parmTmpEximImportableItems(tmpImportableItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cumulativeAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get cumulative assessable value.
    /// </summary>
    /// <returns>
    /// The isntance of the <c>AmountMST</c> class.
    /// </returns>
    public AmountMST cumulativeAssessableValue()
    {
        AmountMST                   assessableValue;
        CustomsShippingBillJour_IN  customsShippingBillJour;
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        EximShippingBillTrans_IN    eximShippingBillTrans;
        EximExportOrderTable_IN     exportOrderTable;
        EximExportOrderLines_IN     exportOrderLines;
        ;

        while select ExportOrderTableRecId, CustomsShippingBillTransRecId
            from exportOrderLines
            where exportOrderLines.Mark == NoYes::Yes
            join exportOrderTable
                where exportOrderTable.RecId                          == exportOrderLines.ExportOrderTableRecId
                   && exportOrderTable.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId
           join SalesId, InvoiceId, InvoiceDate, LedgerVoucher
                from customsShippingBillTrans
                where customsShippingBillTrans.RecId == exportOrderLines.CustomsShippingBillTransRecId
            join sum(AssessableValue)
                from eximShippingBillTrans
                where eximShippingBillTrans.ShippingBillTransRecId == customsShippingBillTrans.RecId
            join CurrencyCode, ShippingBillDate
                from customsShippingBillJour
                group by CurrencyCode, ShippingBillDate
                where customsShippingBillJour.LedgerVoucher     == customsShippingBillTrans.LedgerVoucher
                   && customsShippingBillJour.InvoiceDate       == customsShippingBillTrans.InvoiceDate
                  && customsShippingBillJour.InvoiceId          == customsShippingBillTrans.InvoiceId
                   && customsShippingBillJour.SalesId           == customsShippingBillTrans.SalesId

        {
            assessableValue += CurrencyHelper_IN::customsMSTAmount_IN(eximShippingBillTrans.AssessableValue,
                                                             customsShippingBillJour.CurrencyCode,
                                                             Direction_IN::Export,
                                                             customsShippingBillJour.ShippingBillDate);
        }

        return assessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes table records.
    /// </summary>
    public void deleteRecords()
    {
        EximExportOrderTable_IN exportOrderTable;

        delete_from exportOrderTable
            where exportOrderTable.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExportOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert new export order.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertExportOrder()
    {
        EximExportOrderTable_IN exportOrderTable;
        EximExportOrderLines_IN exportOrderLines;
        EximImportableItems_IN  importableItems;

        while select tmpExportOrderTable
        {
            exportOrderTable.AuthorizationSchemesTableRecId = authorizationSchemesTableRecId;
            exportOrderTable.CustomsShippingBillNumberTable = tmpExportOrderTable.CustomsShippingBillNumberTable;
            exportOrderTable.insert();

            while select tmpExportOrderLines
                where tmpExportOrderLines.ExportOrderTableRecId == tmpExportOrderTable.RecId
            {
                exportOrderLines.Mark                          = tmpExportOrderLines.Mark;
                exportOrderLines.BankCertificateNum            = tmpExportOrderLines.BankCertificateNum;
                exportOrderLines.BankCertificateDateTime       = tmpExportOrderLines.BankCertificateDateTime;
                exportOrderLines.CustomsShippingBillTransRecId = tmpExportOrderLines.CustomsShippingBillTransRecId;
                exportOrderLines.CustInvoiceTransRecId         = tmpExportOrderLines.CustInvoiceTransRecId;
                exportOrderLines.ExportOrderTableRecId         = exportOrderTable.RecId;
                exportOrderLines.insert();

                while select tmpImportableItems
                    where tmpImportableItems.SourceRecId == tmpExportOrderLines.RecId
                {
                    importableItems.ItemId                         = tmpImportableItems.ItemId;
                    importableItems.Unit                           = tmpImportableItems.Unit;
                    importableItems.Qty                            = tmpImportableItems.Qty;
                    importableItems.Value                          = tmpImportableItems.Value;
                    importableItems.SourceRecId                    = exportOrderLines.RecId;
                    importableItems.AuthorizationBasis             = EximAuthorizationBasis_IN::ExportOrder;
                    importableItems.AuthorizationSchemesTableRecId = authorizationSchemesTableRecId;
                    importableItems.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpExportOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert temporary confirmed order.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertTmpExportOrder()
    {
        EximExportOrderTable_IN    exportOrderTable;
        EximExportOrderLines_IN    exportOrderLines;
        EximImportableItems_IN     importableItems;
        TmpEximExportOrderTable_IN tmpExportOrderTableLoc;
        TmpEximExportOrderLines_IN tmpExportOrderLinesLoc;
        TmpEximImportableItems_IN  tmpImportableItemsLoc;

        ttsbegin;
        while select exportOrderTable
            where exportOrderTable.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId
        {
            tmpExportOrderTableLoc.clear();
            tmpExportOrderTableLoc.AuthorizationSchemesTableRecId = exportOrderTable.AuthorizationSchemesTableRecId;
            tmpExportOrderTableLoc.CustomsShippingBillNumberTable = exportOrderTable.CustomsShippingBillNumberTable;
            tmpExportOrderTableLoc.insert();

            while select exportOrderLines
                where exportOrderLines.ExportOrderTableRecId == exportOrderTable.RecId
            {
                tmpExportOrderLinesLoc.clear();
                tmpExportOrderLinesLoc.Mark                          = exportOrderLines.Mark;
                tmpExportOrderLinesLoc.BankCertificateNum            = exportOrderLines.BankCertificateNum;
                tmpExportOrderLinesLoc.BankCertificateDateTime       = exportOrderLines.BankCertificateDateTime;
                tmpExportOrderLinesLoc.CustomsShippingBillTransRecId = exportOrderLines.CustomsShippingBillTransRecId;
                tmpExportOrderLinesLoc.CustInvoiceTransRecId         = exportOrderLines.CustInvoiceTransRecId;
                tmpExportOrderLinesLoc.ExportOrderTableRecId         = tmpExportOrderTableLoc.RecId;
                tmpExportOrderLinesLoc.insert();

                while select importableItems
                    where importableItems.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId
                       && importableItems.AuthorizationBasis             == EximAuthorizationBasis_IN::ExportOrder
                       && importableItems.SourceRecId                    == exportOrderLines.RecId
                {
                    tmpImportableItemsLoc.clear();
                    tmpImportableItemsLoc.ItemId      = importableItems.ItemId;
                    tmpImportableItemsLoc.Unit        = importableItems.Unit;
                    tmpImportableItemsLoc.Qty         = importableItems.Qty;
                    tmpImportableItemsLoc.Value       = importableItems.Value;
                    tmpImportableItemsLoc.SourceRecId = tmpExportOrderLinesLoc.RecId;
                    tmpImportableItemsLoc.insert();
                }
            }
        }
        ttscommit;

        this.parmTmpEximExportOrderTable(tmpExportOrderTableLoc);
        this.parmTmpEximExportOrderLines(tmpExportOrderLinesLoc);
        this.parmTmpEximImportableItems(tmpImportableItemsLoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpEximExportOrderLines</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximExportOrderLines_IN parmTmpEximExportOrderLines(TmpEximExportOrderLines_IN _tmpExportOrderLines = tmpExportOrderLines)
    {
        tmpExportOrderLines = _tmpExportOrderLines;

        return tmpExportOrderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpEximExportOrderTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximExportOrderTable_IN parmTmpEximExportOrderTable(TmpEximExportOrderTable_IN _tmpExportOrderTable = tmpExportOrderTable)
    {
        tmpExportOrderTable = _tmpExportOrderTable;

        return tmpExportOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        ;

        try
        {
            ttsbegin;
            this.deleteRecords();

            this.insertExportOrder();

            this.insertSummaryImportableItems();

            this.updateScheme();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show confirmed order data.
    /// </summary>
    /// <param name="_fromDate">
    /// The instance of the <c>FromDate</c> class.
    /// </param>
    /// <param name="_toDate">
    /// The isntance of the <c>ToDate</c> class.
    /// </param>
    /// <param name="_realizedInvoice">
    /// If 'True', the invoice is realized.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void showData(
        FromDate _fromDate,
        ToDate   _toDate,
        NoYesId  _realizedInvoice = false)
    {
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        CustomsShippingBillTrans_IN      customsShippingBillTrans;
        EximShippingBillTrans_IN         eximShippingBillTrans;
        InventTable                      inventTableLoc;
        CustInvoiceJour                  custInvoiceJour;
        CustInvoiceTrans                 custInvoiceTrans;
        CustTrans                        custTrans;
        TmpEximExportOrderTable_IN       tmpExportOrderTableLoc;
        TmpEximExportOrderLines_IN       tmpExportOrderLinesLoc;
        EximExportOrderTable_IN          exportOrderTable;
        EximExportOrderLines_IN          exportOrderLines;
        EximAuthorizationSchemesTable_IN authorizationSchemesTableLoc;
        InventItemSetupSupplyType        inventItemSetupSupplyTypeLoc;

        authorizationSchemesTable = EximAuthorizationSchemesTable_IN::find(authorizationSchemesTableRecId);

        ttsbegin;
        if (this.validateExchangeRates(_fromDate, _toDate))
        {
            tmpImportableItems = null;

            while select RecId, SalesId, InvoiceId, ItemId, ShippingBillDate, InventTransId, InvoiceDate, CustomsShippingBillNumberTable
                from customsShippingBillTrans
                where (customsShippingBillTrans.ShippingBillDate >= _fromDate
                   && customsShippingBillTrans.ShippingBillDate  <= _toDate)
                join EximPorts, EximProductGroupTable, ShippingBillTransRecId from eximShippingBillTrans
                     where eximShippingBillTrans.EximPorts               == authorizationSchemesTable.EximPorts
                       &&  eximShippingBillTrans.EximProductGroupTable    == authorizationSchemesTable.EximProductGroupTable
                       &&  eximShippingBillTrans.ShippingBillTransRecId   == customsShippingBillTrans.RecId
                join ItemId, ItemType
                    from inventTableLoc
                    where inventTableLoc.ItemId == customsShippingBillTrans.ItemId
                join ItemId, ItemDataAreaId, DefaultOrderType from inventItemSetupSupplyTypeLoc
                    where inventItemSetupSupplyTypeLoc.ItemId           == inventTableLoc.ItemId
                       && inventItemSetupSupplyTypeLoc.ItemDataAreaId   == inventTableLoc.DataAreaId
                       && inventItemSetupSupplyTypeLoc.DefaultOrderType == ReqPOType::Production
                join  RecId, InventTransId, InvoiceId, InvoiceDate
                    from custInvoiceTrans
                    where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
                       && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
                       && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate
                join InvoiceId, InvoiceAccount, InvoiceDate
                    from custInvoiceJour
                    where custInvoiceJour.SalesId             == custInvoiceTrans.SalesId
                       && custInvoiceJour.InvoiceId           == custInvoiceTrans.InvoiceId
                       && custInvoiceJour.InvoiceDate         == custInvoiceTrans.InvoiceDate
                       && custInvoiceJour.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup
            {
                if (_realizedInvoice)
                {
                    select firstonly RecId
                        from custTrans
                        where custTrans.Invoice    == custInvoiceJour.InvoiceId
                           && custTrans.AccountNum == custInvoiceJour.InvoiceAccount
                           && custTrans.TransDate  == custInvoiceJour.InvoiceDate;

                    if (custTrans.RecId && CustTransOpen::findRefId(custTrans.RecId))
                    {
                        continue;
                    }
                }

                exportOrderLines.clear();

                select firstonly RecId from exportOrderLines
                        where exportOrderLines.CustomsShippingBillTransRecId == customsShippingBillTrans.RecId
                    join AuthorizationSchemesTableRecId
                        from exportOrderTable
                        where exportOrderTable.RecId == exportOrderLines.ExportOrderTableRecId
                    join RecId, AuthorizationType, AuthorizationId
                        from authorizationSchemesTableLoc
                        where authorizationSchemesTableLoc.RecId             == exportOrderTable.AuthorizationSchemesTableRecId
                           && authorizationSchemesTableLoc.AuthorizationType == authorizationSchemesTable.AuthorizationType
                           && authorizationSchemesTableLoc.RecId             != authorizationSchemesTable.RecId;

                if (exportOrderLines.RecId)
                {
                    continue;
                }

                select firstonly RecId from tmpExportOrderTableLoc
                    where tmpExportOrderTableLoc.CustomsShippingBillNumberTable == customsShippingBillTrans.CustomsShippingBillNumberTable;

                if (!tmpExportOrderTableLoc)
                {
                    tmpExportOrderTableLoc.AuthorizationSchemesTableRecId = authorizationSchemesTable.RecId;
                    tmpExportOrderTableLoc.CustomsShippingBillNumberTable = customsShippingBillTrans.CustomsShippingBillNumberTable;
                    tmpExportOrderTableLoc.insert();
                }

                tmpExportOrderLinesLoc.Mark                          = NoYes::Yes;
                tmpExportOrderLinesLoc.CustomsShippingBillTransRecId = customsShippingBillTrans.RecId;
                tmpExportOrderLinesLoc.CustInvoiceTransRecId         = custInvoiceTrans.RecId;
                tmpExportOrderLinesLoc.ExportOrderTableRecId         = tmpExportOrderTableLoc.RecId;
                tmpExportOrderLinesLoc.insert();
            }

            this.parmTmpEximExportOrderTable(tmpExportOrderTableLoc);
            this.parmTmpEximExportOrderLines(tmpExportOrderLinesLoc);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExchangeRates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the exchange rates.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validateExchangeRates(
        FromDate _fromDate,
        ToDate   _toDate)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        CustomsShippingBillJour_IN  customsShippingBillJour;
        InventTable                 inventTable;
        CurrencyCode                currencyCode;
        boolean                     ret = true;
        InventItemSetupSupplyType   inventItemSetupSupplyTypeLoc;

        while select minof(ShippingBillDate), ItemId, LedgerVoucher, InvoiceDate, InvoiceId, SalesId
            from customsShippingBillTrans
            group by ItemId, LedgerVoucher, InvoiceDate, InvoiceId, SalesId
            where customsShippingBillTrans.ShippingBillDate >= _fromDate
               && customsShippingBillTrans.ShippingBillDate <= _toDate
            join ItemId, ItemType from inventTable
            where inventTable.ItemId   == customsShippingBillTrans.ItemId
            join  inventItemSetupSupplyTypeLoc
            where inventItemSetupSupplyTypeLoc.ItemId           == inventTable.ItemId
               && inventItemSetupSupplyTypeLoc.ItemDataAreaId   == inventTable.DataAreaId
               && inventItemSetupSupplyTypeLoc.DefaultOrderType == ReqPOType::Production
            join CurrencyCode from customsShippingBillJour
            group by CurrencyCode
            where customsShippingBillJour.LedgerVoucher == customsShippingBillTrans.LedgerVoucher
               && customsShippingBillJour.InvoiceDate   == customsShippingBillTrans.InvoiceDate
               && customsShippingBillJour.InvoiceId     == customsShippingBillTrans.InvoiceId
               && customsShippingBillJour.SalesId       == customsShippingBillTrans.SalesId

        {
            if (customsShippingBillJour.CurrencyCode  && customsShippingBillJour.CurrencyCode != currencyCode)
            {
                if (!TaxExchangeRateHelper::getCustomsExchangeRate_IN(
                                                customsShippingBillJour.CurrencyCode,
                                                Direction_IN::Export,
                                                customsShippingBillTrans.ShippingBillDate))
                {
                    throw error(strfmt("@GLS62271",
                                Direction_IN::Export,
                                customsShippingBillJour.CurrencyCode,
                                customsShippingBillTrans.ShippingBillDate));
                }

                currencyCode = customsShippingBillJour.CurrencyCode;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>