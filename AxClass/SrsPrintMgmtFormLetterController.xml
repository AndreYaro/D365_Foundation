<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SrsPrintMgmtFormLetterController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SrsPrintMgmtFormLetterController</c> class is the base controller class that should be
/// extended by reports that need to use the form letter style of print management.
/// </summary>
/// <remarks>
/// Print management can be implemented by directly using the <c>PrintMgmtReportRun</c> class or using
/// the <c>FormLetter</c> approach. Use this base class for the <c>FormLetter</c> scenario.
/// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
/// </remarks>
public abstract class SrsPrintMgmtFormLetterController extends SrsPrintMgmtController
{
    FormLetterReport formLetterReport;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes form letter controller.
    /// </summary>
    /// <remarks>
    /// This method is called during <c>startOperation</c> when the dialog is prompted and run.
    /// This is also called from <c>run</c> for the case where controller is running in batch. In batch scenario
    /// <c>startOperation</c> is not called, since no dialog needs to be created.
    /// </remarks>
    protected void init()
    {
        if (!isInitialized)
        {
            // initialize formletter report instance.
            this.initFormLetterReport();

            super();

            this.parmPrintDestinationTokens().parmParameters(enum2Symbol(enumNum(PrintMgmtDocumentType), enum2int(formLetterReport.getPrintMgmtDocumentType())));

            isInitialized = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes instance of form letter object.
    /// </summary>
    /// <remarks>
    /// This method is called by framework from startOperation(). It provides the necessary construction of Form letter class.
    /// IMPORTANT: Implementation class should override this method to create the correct instance AND call super() to invoke the base class implementation.
    /// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
    /// </remarks>
    protected void initFormLetterReport()
    {
        if (formLetterReport)
        {
            formLetterReport.parmReportRunController(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the report for the print management setting currently loaded.
    /// </summary>
    /// <remarks>
    /// outReports() loops over print management settings and calls this method for each print management setting loaded.
    /// DO override this method to modify parameters for each print settings.
    /// E.g. if you want to provide different footer text for each print settings loaded for a given report.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if print management object has not been initialized.
    /// </exception>
    protected void outputReport()
    {
        // execute report.
        if (formLetterReport)
        {
            formLetterReport.execute();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOutputReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loops through each record in print management for the document and prints the report.
    /// </summary>
    /// <remarks>
    /// DO NOT override this method.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if <c>FormLetterReport</c> instance variable is not initialized as part of <c>initPrintMgmtReportRun</c> method.
    /// </exception>
    protected void runOutputReports()
    {
        SrsPrintMgmtExecutionInfo executionInfo = reportContract.parmReportExecutionInfo();

        // if formLetterReport is initialized run it.
        if (!formLetterReport)
        {
            throw error("@SYS328343");
        }

        // keep count of print settings for each document. Will be used for raising the rendered complete event.
        executionInfo.parmPrintSettingsCount(formLetterReport.parmReportRun().getPrintSettingsCount());
        documentPrintCountMap.insert(executionInfo.parmDocumentId(), executionInfo.parmPrintSettingsCount());
        documentCloseCountMap.insert(executionInfo.parmDocumentId(), conNull());

        while (formLetterReport.moveNextPrintSetting() && !this.parmCancelRun())
        {
            this.outputReport();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the controller operation.
    /// </summary>
    /// <returns>
    /// <c>SysOperationStartResult</c> based on starting operation.
    /// </returns>
    /// <remarks>
    /// This is a framework method, DO NOT override this.
    /// </remarks>
    public SysOperationStartResult startOperation()
    {
        this.init();

        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>