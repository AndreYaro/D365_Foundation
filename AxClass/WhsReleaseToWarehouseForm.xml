<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsReleaseToWarehouseForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsReleaseToWarehouseForm</c> class contains the business logic of the <c>WhsReleaseToWarehouse</c> form.
/// </summary>
public class WhsReleaseToWarehouseForm
{
    AmountMST                   totalAmount;
    int                         totalOrders;
    int                         totalOrderLines;
    WHSReleaseToWarehouseId     releaseToWarehouseId;
    str                         filter;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventSumDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quantity left to release to warehouse for an order line.
    /// </summary>
    /// <param name="_inventTransSumDim">
    /// <c>WHSInventTransSumDim</c> view.
    /// </param>
    /// <param name="_releaseToWarehouse">
    /// Temporary <c>WHSTmpReleaseToWarehouse</c> record.
    /// </param>
    /// <param name="_module">
    /// Module of the order.
    /// </param>
    /// <param name="_skipWHSTmpReleaseToWarehouseValidation">
    /// Determines whether to skip validation or not.
    /// </param>
    public void addInventSumDim(
        WHSInventTransSumDim        _inventTransSumDim,
        WHSTmpReleaseToWarehouse    _releaseToWarehouse,
        WHSModule                   _module,
        boolean                     _skipWHSTmpReleaseToWarehouseValidation = false)
    {
        this.addInventSumDimFromTransIdDimensionHandlingQty(_inventTransSumDim.InventTransId,
                                                    _inventTransSumDim.InventDimId,
                                                    _inventTransSumDim.ItemId,
                                                    PdsGlobal::pdsIsCWItem(_inventTransSumDim.ItemId)
                                                        ? _inventTransSumDim.SumOfPdsCWQty : _inventTransSumDim.SumOfQty,
                                                    _releaseToWarehouse,
                                                    _module,
                                                    _skipWHSTmpReleaseToWarehouseValidation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSumDimFromTransIdDimension</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the addInventSumDimFromTransIdDimensionHandlingQty method. Extenders should move their logic to wrap or override the addInventSumDimFromTransIdDimensionHandlingQuantities method.', false, 30\9\2019)]
    public void addInventSumDimFromTransIdDimension(
        InventTransId               _inventTransId,
        InventDimId                 _inventDimId,
        ItemId                      _itemId,
        InventQTy                   _sumOfQty,
        WHSTmpReleaseToWarehouse    _releaseToWarehouse,
        WHSModule                   _module,
        boolean                     _skipWHSTmpReleaseToWarehouseValidation = false)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _itemId);

        this.addInventSumDimFromTransIdDimensionHandlingQuantities(_inventTransId, _inventDimId, _itemId, _sumOfQty, _releaseToWarehouse, _module, _skipWHSTmpReleaseToWarehouseValidation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSumDimFromTransIdDimensionHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quantity left to release to warehouse for an order line.
    /// </summary>
    /// <param name = "_inventTransId">The transaction to be released.</param>
    /// <param name = "_inventDimId">The inventory dimensions being released.</param>
    /// <param name = "_itemId">The item being released.</param>
    /// <param name = "_sumOfHandlingQty">The sum of the handling quantity.</param>
    /// <param name = "_releaseToWarehouse">Temporary <c>WHSTmpReleaseToWarehouse</c> record.</param>
    /// <param name = "_module">Module of the order.</param>
    /// <param name = "_skipWHSTmpReleaseToWarehouseValidation">Determines whether to skip validation or not.</param>
    [Hookable(false)]
    final public void addInventSumDimFromTransIdDimensionHandlingQty(
        InventTransId               _inventTransId,
        InventDimId                 _inventDimId,
        ItemId                      _itemId,
        InventHandlingQty           _sumOfHandlingQty,
        WHSTmpReleaseToWarehouse    _releaseToWarehouse,
        WHSModule                   _module,
        boolean                     _skipWHSTmpReleaseToWarehouseValidation = false)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), _itemId))
        {
            this.addInventSumDimFromTransIdDimensionHandlingQuantities(_inventTransId, _inventDimId, _itemId, _sumOfHandlingQty, _releaseToWarehouse, _module, _skipWHSTmpReleaseToWarehouseValidation);
        }
        else
        {
            this.addInventSumDimFromTransIdDimension(_inventTransId, _inventDimId, _itemId, _sumOfHandlingQty, _releaseToWarehouse, _module, _skipWHSTmpReleaseToWarehouseValidation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSumDimFromTransIdDimensionHandlingQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quantity left to release to warehouse for an order line.
    /// </summary>
    /// <param name = "_inventTransId">The transaction to be released.</param>
    /// <param name = "_inventDimId">The inventory dimensions being released.</param>
    /// <param name = "_itemId">The item being released.</param>
    /// <param name = "_sumOfHandlingQty">The sum of the handling quantity.</param>
    /// <param name = "_releaseToWarehouse">Temporary <c>WHSTmpReleaseToWarehouse</c> record.</param>
    /// <param name = "_module">Module of the order.</param>
    /// <param name = "_skipWHSTmpReleaseToWarehouseValidation">Determines whether to skip validation or not.</param>
    /// <remarks>
    /// The method is an extension point and is not meant to be called directly. Callers should call the addInventSumDimFromTransIdDimensionHandlingQty method.
    /// </remarks>
    [Wrappable(true)]
    protected void addInventSumDimFromTransIdDimensionHandlingQuantities(
        InventTransId               _inventTransId,
        InventDimId                 _inventDimId,
        ItemId                      _itemId,
        InventHandlingQty           _sumOfHandlingQty,
        WHSTmpReleaseToWarehouse    _releaseToWarehouse,
        WHSModule                   _module,
        boolean                     _skipWHSTmpReleaseToWarehouseValidation)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        SalesLine           locSalesLine;
        InventTable         inventTable;
        WHSReleasedQtyView  releasedQtyView;
        WHSOrderNum         orderNum;

        if (_module == WHSModule::Sales)
        {
            locSalesLine = SalesLine::findInventTransId(_inventTransId);
        }

        var reservedOrOnOrderQty = -_sumOfHandlingQty;
        var releasedNotPickedQty = WHSWarehouseRelease::getReleasedNotPickedQty(_inventTransId, _inventDimId);

        InventHandlingQty qtyToRelease = 0;

        if (reservedOrOnOrderQty > releasedNotPickedQty)
        {
            inventTable = InventTable::find(_itemId);
            var reservedPhysicalQty = WHSWarehouseRelease::getReservedPhysicalHandlingQty(inventTable, _inventTransId, _inventDimId);

            // Reserve missing quantity for allow-negative items
            if (reservedOrOnOrderQty > reservedPhysicalQty)
            {
                if (inventTable.whsAllowPhysNeg())
                {
                    WhsWarehouseRelease::reserve(_inventTransId, _inventDimId, true);
                    // InventDimId of InventTrans might have changed during reservation. So we have to get the new InventDimId and pass on.
                    // Reservation won't split transaction record when it allows negative physical.
                    _inventDimId = InventTrans::findTransId(_inventTransId).inventDimId;
                    reservedPhysicalQty = reservedOrOnOrderQty;
                }
            }
           
            qtyToRelease = WHSTmpReleaseToWarehouse::calcQtyLeftToReleaseDelta(_releaseToWarehouse, _inventTransId, _inventDimId, reservedPhysicalQty - releasedNotPickedQty);
        }

        if (qtyToRelease > 0)
        {
            WHSTmpReleaseToWarehouseCreateNewLineContext tmpReleaseToWarehouseCreateNewLineContext;

            try
            {
                tmpReleaseToWarehouseCreateNewLineContext = WHSTmpReleaseToWarehouseCreateNewLineContext::construct();
                tmpReleaseToWarehouseCreateNewLineContext.populateShipmentConsolidationPolicy = true;

                WHSTmpReleaseToWarehouse::createLineFromInventTransIdInventDimId(_releaseToWarehouse,
                                                                                 releaseToWarehouseId,
                                                                                 _inventTransId,
                                                                                 _inventDimId,
                                                                                 _module,
                                                                                 qtyToRelease,
                                                                                 _skipWHSTmpReleaseToWarehouseValidation,
                                                                                 true);
            }
            finally
            {
                if (tmpReleaseToWarehouseCreateNewLineContext)
                {
                    tmpReleaseToWarehouseCreateNewLineContext.dispose();
                }
            }

            if (locSalesLine.RecId > 0)
            {
                if (qtyToRelease > 0)
                {
                    totalAmount += this.calculateTotalAmount(locSalesLine, qtyToRelease);
                }
            }
        }
        else
        {
            warning(this.cannotReleaseBecauseOfQtyErrorMessage(_itemId, _inventTransId, _module));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an order to be released to warehouse.
    /// </summary>
    /// <param name="_orderNum">
    /// Order number.
    /// </param>
    /// <param name="_releaseToWarehouse">
    /// Temporary <c>WHSTmpReleaseToWarehouse</c> record.
    /// </param>
    /// <param name="_module">
    /// Module of the order.
    /// </param>
    public void addOrder(
        WHSOrderNum                 _orderNum,
        WHSTmpReleaseToWarehouse    _releaseToWarehouse,
        WHSModule                   _module)
    {
        // Skipping the validation since correct inventory transactions have been filtered out by the query
        #define.SkipWHSTmpReleaseToWarehouseValidaton(true)

        var inventTransSumDimEnumerator = this.newInventTransSumDimQuery().forWHSModuleOrder(_module, _orderNum)
                                            .fromWHSEnabledWarehouse()
                                            .notFullyReleased()
                                            .getEnumerator();

        while (inventTransSumDimEnumerator.moveNext())
        {
            if (this.checkLineReserved(inventTransSumDimEnumerator.inventTransSumDim(), _releaseToWarehouse, _module))
            {
                this.addInventSumDim(inventTransSumDimEnumerator.inventTransSumDim(), _releaseToWarehouse, _module, #SkipWHSTmpReleaseToWarehouseValidaton);
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonRelease_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases orders to warehouse when Release button is clicked.
    /// </summary>
    /// <param name="_whsReleaseToWarehouse">
    /// Temporary <c>WHSTmpReleaseToWarehouse</c> table object.
    /// </param>
    void buttonRelease_clicked(WHSTmpReleaseToWarehouse _whsReleaseToWarehouse)
    {
        WHSOrderNum                 lastOrderNum;
        boolean                     lastTmpReleaseRecordDeleted = false;

        this.validateFulFillmentPolicyForReleaseLines(_whsReleaseToWarehouse);
        
        this.validateOrderCanBeReleased(_whsReleaseToWarehouse);

        if (this.canReleaseToWarehouse())
        {
            using (var perfTask = WHSInstrumentationReleaseToWarehousePerformanceTask::newFromReleaseToWarehouseId(this.parmReleaseToWarehouseId(), 'releaseFromReleaseToWarehouseForm'))
            {
                WHSWarehouseRelease::releaseToWarehouse(_whsReleaseToWarehouse, this.parmReleaseToWarehouseId(), false, true);
            }

            this.parmReleaseToWarehouseId(WHSTmpReleaseToWarehouse::getNextReleaseToWarehouseId());

            delete_from _whsReleaseToWarehouse;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReleaseToWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether order can be released to warehouse.
    /// </summary>
    /// <returns>
    ///     true if order can be released to warehouse; otherwise, false.
    /// </returns>
    protected boolean canReleaseToWarehouse()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOrderCanBeReleased</Name>
				<Source><![CDATA[
    private void validateOrderCanBeReleased(WHSTmpReleaseToWarehouse _whsReleaseToWarehouse)
    {
        WHSTmpReleaseToWarehouse    currentTmpReleaseToWarehouse;
        
        currentTmpReleaseToWarehouse.linkPhysicalTableInstance(_whsReleaseToWarehouse);
        
        SalesTable salesTable;
        while select OrderNum, CreditMaxCheck from currentTmpReleaseToWarehouse
            group by OrderNum, CreditMaxCheck
            where currentTmpReleaseToWarehouse.Module == WHSModule::Sales
        {
            salesTable = SalesTable::find(currentTmpReleaseToWarehouse.OrderNum);

            if (!salesTable.canReleaseToWarehouse())
            {
                this.deleteTmpReleaseToWarehouse(_whsReleaseToWarehouse, currentTmpReleaseToWarehouse.OrderNum);
            }
            else if (!WHSWarehouseRelease::creditLimitCheck(salesTable, true, currentTmpReleaseToWarehouse.CreditMaxCheck))
            {
                this.deleteTmpReleaseToWarehouse(_whsReleaseToWarehouse, currentTmpReleaseToWarehouse.OrderNum);
                warning(strFmt('@WAX:SalesOrderLineNotReleased', currentTmpReleaseToWarehouse.OrderNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTmpReleaseToWarehouse</Name>
				<Source><![CDATA[
    private void deleteTmpReleaseToWarehouse(WHSTmpReleaseToWarehouse _whsReleaseToWarehouse,
                                             WHSOrderNum              _orderNum)
    {
        WHSTmpReleaseToWarehouse    releaseToWarehouse;

        releaseToWarehouse.linkPhysicalTableInstance(_whsReleaseToWarehouse);
        
        delete_from releaseToWarehouse
                where  releaseToWarehouse.OrderNum == _orderNum
                    && releaseToWarehouse.Module   == WHSModule::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total order and order lines to be released.
    /// </summary>
    /// <param name="_whsReleaseToWarehouse">
    /// Temporary <c>WHSTmpReleaseToWarehouse</c> record.
    /// </param>
    void calculateTotals(WHSTmpReleaseToWarehouse _whsReleaseToWarehouse)
    {
        WHSTmpReleaseToWarehouse    releaseToWarehouse;
        WHSOrderNum                 prevOrderNum;

        totalOrderLines = 0;
        totalOrders     = 0;
        releaseToWarehouse.linkPhysicalTableInstance(_whsReleaseToWarehouse);

        while select OrderNum from releaseToWarehouse
            order by OrderNum
            where releaseToWarehouse.ReleaseToWarehouseId == this.parmReleaseToWarehouseId()
        {
            ++totalOrderLines;

            if (releaseToWarehouse.OrderNum != prevOrderNum)
            {
                ++totalOrders;
            }

            prevOrderNum = releaseToWarehouse.OrderNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total net amount to be released.
    /// </summary>
    /// <param name="_whsReleaseToWarehouse">
    /// Temporary <c>WHSTmpReleaseToWarehouse</c> record.
    /// </param>
    void calculateTotalNetAmount(WHSTmpReleaseToWarehouse _whsReleaseToWarehouse)
    {
        WHSTmpReleaseToWarehouse    releaseToWarehouse;
        WHSOrderNum                 prevOrderNum;        
        
        AmountMST oldTotalAmount = totalAmount;
        totalAmount = 0;

        releaseToWarehouse.linkPhysicalTableInstance(_whsReleaseToWarehouse);

        while select ReleasedQty, InventTransId from releaseToWarehouse
            where releaseToWarehouse.ReleaseToWarehouseId == this.parmReleaseToWarehouseId()
                && releaseToWarehouse.Module == WHSModule::Sales
        {
            SalesLine salesLine = SalesLine::findInventTransId(releaseToWarehouse.InventTransId);

            if (salesLine.QtyOrdered)
            {
                totalAmount += this.calculateTotalAmount(salesLine, releaseToWarehouse.ReleasedQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransIdFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates InventTrans id filter.
    /// </summary>
    /// <param name="_filter">
    /// Filter to be generated.
    /// </param>
    /// <param name="_releaseToWarehouse">
    /// Temporary <c>WHSTmpReleaseToWarehouse</c> record.
    /// </param>
    /// <returns>
    /// Filter string.
    /// </returns>
    str getInventTransIdFilter(str _filter, WHSTmpReleaseToWarehouse _releaseToWarehouse)
    {
        if (!_filter)
        {
            _filter = '!' + _releaseToWarehouse.InventTransId;
        }
        else
        {
            _filter += ',!' + _releaseToWarehouse.InventTransId;
        }

        return _filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTransSumDimQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the query for searching <c>WHSInventTransSumDim</c> records.
    /// </summary>
    /// <returns>
    /// A new instance of the query for searching <c>WHSInventTransSumDim</c> records.
    /// </returns>
    protected WHSInventTransSumDimQuery newInventTransSumDimQuery()
    {
        return new WHSInventTransSumDimQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseToWarehouseId</Name>
				<Source><![CDATA[
    public WHSReleaseToWarehouseId parmReleaseToWarehouseId(WHSReleaseToWarehouseId _releaseToWarehouseId = releaseToWarehouseId)
    {
        releaseToWarehouseId = _releaseToWarehouseId;

        return releaseToWarehouseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalAmount</Name>
				<Source><![CDATA[
    public AmountMST parmTotalAmount(AmountMST _totalAmount = totalAmount)
    {
        totalAmount = _totalAmount;

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalOrderLines</Name>
				<Source><![CDATA[
    public int parmTotalOrderLines(int _totalOrderLines = totalOrderLines)
    {
        totalOrderLines = _totalOrderLines;

        return totalOrderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalOrders</Name>
				<Source><![CDATA[
    public int parmTotalOrders(int _totalOrders = totalOrders)
    {
        totalOrders = _totalOrders;

        return totalOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reduces sales line amount from total amount.
    /// </summary>
    /// <param name="_releaseToWarehouse">
    /// Temporary <c>WHSTmpReleaseToWarehouse</c> record.
    /// </param>
    void reduceTotalAmount(WHSTmpReleaseToWarehouse _releaseToWarehouse)
    {
        SalesLine   salesLine;

        if (_releaseToWarehouse.Module == WHSModule::Sales)
        {
            salesLine = SalesLine::findInventTransId(_releaseToWarehouse.InventTransId);

            if (salesLine.QtyOrdered)
            {
                totalAmount -= this.calculateTotalAmount(salesLine, _releaseToWarehouse.ReleasedQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRelease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes selected lines from releasing to warehouse.
    /// </summary>
    /// <param name="_whsReleaseToWarehouseDS">
    /// Form data source.
    /// </param>
    /// <param name="_whsReleaseToWarehouse">
    /// Temporary <c>WHSTmpReleaseToWarehouse</c> record.
    /// </param>
    /// <param name="_onlySelected">
    /// Determines whether only selected records are removed or not.
    /// </param>
    void removeRelease(FormDataSource           _whsReleaseToWarehouseDS,
                       WHSTmpReleaseToWarehouse _whsReleaseToWarehouse,
                       boolean                  _onlySelected)
    {
        WHSTmpReleaseToWarehouse    releaseToWarehouse;
        WHSTmpReleaseToWarehouse    releaseToWarehouse2;

        ttsbegin;

        releaseToWarehouse.linkPhysicalTableInstance(_whsReleaseToWarehouse);
        releaseToWarehouse2.linkPhysicalTableInstance(_whsReleaseToWarehouse);
        releaseToWarehouse2.ttsbegin();

        for (releaseToWarehouse = _whsReleaseToWarehouseDS.getFirst(_onlySelected) ? _whsReleaseToWarehouseDS.getFirst(_onlySelected) : _whsReleaseToWarehouseDS.cursor();
        releaseToWarehouse;
        releaseToWarehouse = _whsReleaseToWarehouseDS.getNext())
        {
            this.reduceTotalAmount(releaseToWarehouse);

            delete_from releaseToWarehouse2
                where releaseToWarehouse2.RecId == releaseToWarehouse.RecId;
        }

        releaseToWarehouse2.ttscommit();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsTmpReleaseToWarehouse_write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles when a sales line is released to warehouse.
    /// </summary>
    /// <param name="_whsReleaseToWarehouse">
    /// Temporary <c>WHSTmpReleaseToWarehouse</c> record.
    /// </param>
    void whsTmpReleaseToWarehouse_write(WHSTmpReleaseToWarehouse   _whsReleaseToWarehouse)
    {
        SalesLine   locSalesLine;
        AmountMST   totalAmountToAdd;

        if (_whsReleaseToWarehouse.Module == WHSModule::Sales)
        {
            locSalesLine = SalesLine::findInventTransId(_whsReleaseToWarehouse.InventTransId);

            totalAmountToAdd -= this.calculateTotalAmount(locSalesLine, (_whsReleaseToWarehouse.orig().ReleasedQty - _whsReleaseToWarehouse.ReleasedQty));
        }

        this.parmTotalAmount(totalAmount + totalAmountToAdd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditCheckAllSalesOrderLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all lines for a sales order to have the same credit limit validation parameter.
    /// </summary>
    /// <param name="_tmpReleaseToWarehouse">
    /// The temporary warehouse release records.
    /// </param>
    /// <param name="_salesId">
    /// The order number on the record that has been updated.
    /// </param>
    /// <param name="_creditMaxCheck">
    /// The new credit limit parameter to update other records with.
    /// </param>
    public void updateCreditCheckAllSalesOrderLines(
        WHSTmpReleaseToWarehouse _tmpReleaseToWarehouse,
        SalesId                  _salesId,
        CustCreditMaxCheck       _creditMaxCheck)
    {
        WHSTmpReleaseToWarehouse releaseToWarehouse;
        SalesLine                releaseSalesLine;

        releaseToWarehouse.linkPhysicalTableInstance(_tmpReleaseToWarehouse);

        ttsbegin;
        while select forUpdate releaseToWarehouse
            where releaseToWarehouse.Module                == WHSModule::Sales
        exists join releaseSalesLine
            where releaseSalesLine.SalesId                 == _salesId
                && releaseSalesLine.InventTransId          == releaseToWarehouse.InventTransId
        {
            releaseToWarehouse.CreditMaxCheck = _creditMaxCheck;
            releaseToWarehouse.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFulFillmentPolicyForReleaseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the selected set of release lines meets the fulfillment requirements
    /// for releasing to warehouse.
    /// </summary>
    /// <param name="_whsReleaseToWarehouse">
    /// The temporary warehouse release records.
    /// </param>
    public void validateFulFillmentPolicyForReleaseLines(WHSTmpReleaseToWarehouse _whsReleaseToWarehouse)
    {
        WHSTmpReleaseToWarehouse    currentTmpReleaseToWarehouse;

        currentTmpReleaseToWarehouse.linkPhysicalTableInstance(_whsReleaseToWarehouse);

        Map map = new Map(Types::Container, Types::Int64);

        while select OrderNum, FulfillmentPolicyRecId, Module from currentTmpReleaseToWarehouse
            group by Module, OrderNum, FulfillmentPolicyRecId
        {
            container key = [currentTmpReleaseToWarehouse.Module, currentTmpReleaseToWarehouse.OrderNum];
            
            if (!map.exists(key))
            {
                map.insert(key, currentTmpReleaseToWarehouse.FulfillmentPolicyRecId);
            }
            else
            {
                throw error(strFmt("@WAX:WHSFulfillmentPolicy_ReleaseFormDefaultPolicyErrorText", currentTmpReleaseToWarehouse.OrderNum));
            }
        }

        MapEnumerator orderNumberEnumerator = map.getEnumerator();

        while (orderNumberEnumerator.moveNext())
        {
            this.checkFulFillmentPolicy(orderNumberEnumerator.currentKey(), orderNumberEnumerator.currentValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFulFillmentPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the temporary warehouse release records passes the fulfillment 
    /// rate validation.
    /// </summary>
    /// <param name="_key">
    /// Contains information regarding both the order number and the module type 
    /// of temporary warehouse release records.
    /// </param>
    /// <param name="_policyRecId">
    /// Fulfillment policy of the corresponding temporary warehouse release record.
    /// </param>
    /// <returns>
    /// true if the all the release lines meets the fulfillment rate requirements; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    internal boolean checkFulFillmentPolicy(container _key, WHSFulfillmentPolicyRecId _policyRecId)
    {
        boolean valid = true;

        WHSModule   module;
        WHSOrderNum orderNum;

        [module, orderNum] = _key;

        WHSFulfillmentPolicy policy = WHSFulfillmentPolicy::find(_policyRecId);

        if (module == WHSModule::Transfer)
        {
            InventTransferTable transferTable = InventTransferTable::find(orderNum);

            valid = WHSFulfillmentRateValidator::checkTransferFulfillmentRateFromPolicy(transferTable, policy);
        }
        else if (module == WHSModule::Sales)
        {
            SalesTable salesTable = SalesTable::find(orderNum);

            valid = WHSFulfillmentRateValidator::checkSalesFulfillmentRateFromPolicy(salesTable, policy);
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalAmount</Name>
				<Source><![CDATA[
    private AmountMST calculateTotalAmount(SalesLine _salesLine, InventHandlingQty _qtyToRelease)
    {
        if (PdsGlobal::pdsIsCWItem(_salesLine.ItemId))
        {
            return _salesLine.PdsCWQty ? ((_qtyToRelease / _salesLine.PdsCWQty) * _salesLine.LineAmount) : 0;
        }

        return _salesLine.QtyOrdered ? ((_qtyToRelease / _salesLine.QtyOrdered) * _salesLine.LineAmount) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrderLine</Name>
				<Source><![CDATA[
    public void addOrderLine(
        InventTransId               _inventTransId,
        WHSTmpReleaseToWarehouse    _releaseToWarehouse,
        WHSModule                   _module)
    {
        const boolean SkipWHSTmpReleaseToWarehouseValidaton = true;

        WHSInventTransSumDimEnumerator  inventTransSumDimEnumerator = this.newInventTransSumDimQuery().forInventTransId(_inventTransId)
                                                                      .fromWHSEnabledWarehouse()
                                                                      .notFullyReleased()
                                                                      .getEnumerator();

        while (inventTransSumDimEnumerator.moveNext())
        {
            if (this.checkLineReserved(inventTransSumDimEnumerator.inventTransSumDim(), _releaseToWarehouse, _module))
            {
                this.addInventSumDim(inventTransSumDimEnumerator.inventTransSumDim(), _releaseToWarehouse, _module, SkipWHSTmpReleaseToWarehouseValidaton);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineReserved</Name>
				<Source><![CDATA[
    private boolean checkLineReserved(WHSInventTransSumDim  _inventTransSumDim, WHSTmpReleaseToWarehouse _releaseToWarehouse, WHSModule _module)
    {
        InventTransOrigin inventTransOrigin;
        InventTrans       inventTrans;
        boolean           ret;

        Qty qtyLeftToReleaseDelta = WHSTmpReleaseToWarehouse::calcQtyLeftToReleaseDelta(_releaseToWarehouse, _inventTransSumDim.InventTransId, _inventTransSumDim.inventDimId);

        if (WHSReleaseToWarehouseFormNonPositiveQtyFailLineReservationCheckFlight::instance().isEnabled()
                ? qtyLeftToReleaseDelta > 0
                : qtyLeftToReleaseDelta)
        {
            select firstonly RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == _inventTransSumDim.InventTransId
                exists join inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                          inventTrans.inventDimId       == _inventTransSumDim.inventDimId &&
                          inventTrans.StatusIssue       == StatusIssue::ReservPhysical    &&
                          inventTrans.StatusReceipt     == StatusReceipt::None;

            if (inventTransOrigin.RecId)
            {
                ret = true;
            }
        }
        else
        {
            ret = checkFailed(this.cannotReleaseBecauseOfQtyErrorMessage(_inventTransSumDim.ItemId, _inventTransSumDim.InventTransId, _module));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotReleaseBecauseOfQtyErrorMessage</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal str cannotReleaseBecauseOfQtyErrorMessage(ItemId _itemId, InventTransId _inventTransId, WHSModule _module)
    {
        return strFmt("@WAX5596", _itemId,
                                  _module == WHSModule::Sales ?
                                  SalesLine::findInventTransId(_inventTransId).SalesId :
                                  InventTransferLine::findTransIdShip(_inventTransId).TransferId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyLeftToRelease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity left to be released to the warehouse
    /// </summary>
    /// <param name="_releaseToWarehouse">
    /// The <c>WHSTmpReleaseToWarehouse</c> table object
    /// </param>
    /// <returns>
    /// Returns the quantity that remains to be released to the warehouse
    /// </returns>
    [Hookable(false)]
    public Qty qtyLeftToRelease(
        WHSTmpReleaseToWarehouse    _releaseToWarehouse,
        InventTransId               _inventTransId)
    {
        Qty                         ret;
        WHSTmpReleaseToWarehouse    releaseToWarehouse;
        WHSReleasedQtyView          releasedQtyView;
        InventHandlingQty           quantityLeftToRelease;

        releaseToWarehouse.linkPhysicalTableInstance(_releaseToWarehouse);

        select sum(SumOfInventQty) from releasedQtyView
            where releasedQtyView.InventTransId == _inventTransId;
           
        quantityLeftToRelease = WHSInvent::calculateCommittedHandlingQuantity(_inventTransId, '') - releasedQtyView.SumOfInventQty;

        select sum(ReleasedQty) from releaseToWarehouse
            where releaseToWarehouse.InventTransId  == _inventTransId;

        ret = quantityLeftToRelease - releaseToWarehouse.ReleasedQty;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>