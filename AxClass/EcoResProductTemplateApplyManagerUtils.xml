<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductTemplateApplyManagerUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EcoResProductTemplateApplyManagerUtils
{
    ItemId                                  itemId;
    container                               recordTemplateValues;

    SysRecordTemplateFactory                recordTemplateFactory;
    EcoResProductTemplateManager            productTemplateManager;

    EcoResProductTemplateApplyBufferFactory productTemplateApplyBufferFactory;
    EcoResReleasedProductFactory            releasedProductFactory;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyBuffersMap2BuffersMap</Name>
				<Source><![CDATA[
    private Map applyBuffersMap2BuffersMap(Map _applyBuffersMap)
    {
        Map             buffersMap = new Map(_applyBuffersMap.keyType(), Types::Record);
        MapEnumerator   applyBuffersMapEnumerator = _applyBuffersMap.getEnumerator();

        while (applyBuffersMapEnumerator.moveNext())
        {
            EcoResProductTemplateApplyBuffer productTemplateApplyBuffer = applyBuffersMapEnumerator.currentValue();
            buffersMap.insert(applyBuffersMapEnumerator.currentKey(), productTemplateApplyBuffer.parmBuffer());
        }

        return buffersMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies product per company template to a single product.
    /// </summary>
    /// <param name="_recordTemplateValues">
    /// A container that contains the data for the template to be applied.
    /// </param>
    /// <param name="_itemId">
    /// The item for which the template will be applied.
    /// </param>
    public void applyTemplate(
        container                           _recordTemplateValues,
        ItemId                              _itemId)
    {
        boolean                             requiresTemplateValuesSpecification = true;

        if (!_itemId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        itemId                  = _itemId;
        recordTemplateValues    = _recordTemplateValues;

        this.productTemplateManager().parmSysRecordTemplateData(_recordTemplateValues);

        List dataSourcesNameList = this.productTemplateManager().dataSourcesNameList();
        ListEnumerator dataSourcesNameListEnumerator = dataSourcesNameList.getEnumerator();

        Map applyBuffersMap = new Map(Types::String, Types::Class);

        ttsbegin;

        while (dataSourcesNameListEnumerator.moveNext())
        {
            Common recordBuffer = this.getBufferByDataSourceName(dataSourcesNameListEnumerator.current());
            Common recordBufferOrig = recordBuffer.data();

            this.applyTemplateValueForRecordBuffer(recordBuffer, requiresTemplateValuesSpecification);
            requiresTemplateValuesSpecification = false;

            Common recordBufferForUpdate = this.getBufferByDataSourceName(dataSourcesNameListEnumerator.current(), true);
            buf2Buf(recordBuffer, recordBufferForUpdate);

            EcoResProductTemplateApplyBuffer productTemplateApplyBuffer = this.productTemplateApplyBufferFactory().getTemplateApplyBufferFromCommon(recordBufferForUpdate);
            EcoResProductTemplateApplyManagerUtils::preApplyTemplateToProduct(recordBufferOrig,recordBufferForUpdate);

            applyBuffersMap.insert(dataSourcesNameListEnumerator.current(), productTemplateApplyBuffer);
        }

        this.validateReleasedProduct(applyBuffersMap);
        this.validateAndWriteAll(applyBuffersMap);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTemplateValueForRecordBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies template values to the specified record buffer.
    /// </summary>
    /// <param name="_recordBuffer">
    /// A record buffer to which the template values will be applied.
    /// </param>
    /// <param name="_requiresTemplateValuesSpecification">
    /// A Boolean value that indicates whether the template values specification is to be defined.
    /// </param>
    protected void applyTemplateValueForRecordBuffer(Common _recordBuffer, boolean _requiresTemplateValuesSpecification)
    {
        SysRecordTemplate recordTemplate = this.recordTemplateFactory().newRecordTemplateFromCommon(_recordBuffer);
        recordTemplate.parmStopOnFailedValidateField(true);
        if (_requiresTemplateValuesSpecification)
        {
            recordTemplate.parmRecordTemplateValues(recordTemplateValues);
        }

        LedgerDefaultDimensionValueSet inventTableDefaultDimensionBeforeApplyingTemplate;
        if (recordTemplate.parmCommon().TableId == tableNum(InventTable))
        {
            InventTable inventTable = recordTemplate.parmCommon();
            inventTableDefaultDimensionBeforeApplyingTemplate = inventTable.DefaultDimension;
        }

        if (recordTemplate.parmCommon().TableId == tableNum(WHSInventTable))
        {
            this.applyTemplateValueForWHSInventTable(recordTemplate);
        }

        if (!recordTemplate.createRecord())
        {
            throw error(strFmt("@SYS339635", itemId));
        }

        if (inventTableDefaultDimensionBeforeApplyingTemplate
            && recordTemplate.parmCommon().TableId == tableNum(InventTable))
        {
            this.mergeDefaultDimensionTemplateValueForInventTable(recordTemplate, inventTableDefaultDimensionBeforeApplyingTemplate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTemplateForWHSInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the template values for the fields FilterCode and FilterGroup of WHSInventTable.
    /// </summary>
    /// <param name="_recordTemplate">
    /// The <c>SysRecordTemplate</c> class that creates records from the template.
    /// </param>
    /// <remarks>
    /// The type of fields FilterCode and FilterGroup of table <c>WHSInventTable</c> are array,
    /// but the SysRecordTemplate does not support this type of fields.
    /// </remarks>
    internal static void applyTemplateForWHSInventTable(SysRecordTemplate _recordTemplate)
    {
        EcoResProductTemplateApplyManagerUtils instance = EcoResProductTemplateApplyManagerUtils::construct();

        instance.applyTemplateValueForWHSInventTable(_recordTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTemplateValueForWHSInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the template values for the fields FilterCode and FilterGroup of WHSInventTable.
    /// </summary>
    /// <param name="_recordTemplate">
    /// The <c>SysRecordTemplate</c> class that creates records from the template.
    /// </param>
    /// <remarks>
    /// The type of fields FilterCode and FilterGroup of table <c>WHSInventTable</c> are array,
    /// but the SysRecordTemplate does not support this type of fields.
    /// </remarks>
    private void applyTemplateValueForWHSInventTable(SysRecordTemplate _recordTemplate)
    {
        container cacheRecordTemplateValues = _recordTemplate.getCache();

        if (cacheRecordTemplateValues)
        {
            container tableValue = conpeek(cacheRecordTemplateValues, 1);

            WHSInventTable whsInventTable = _recordTemplate.parmCommon();
            container fieldValues = conpeek(tableValue, 2);

            int filterCodesIndex   = 1;
            int filterGroupsIndex  = 1;
            int filterCodeLength   = dimOf(whsInventTable.FilterCode);
            int filterGroupLength  = dimOf(whsInventTable.FilterGroup);
            int fieldValuesLength = conLen(fieldValues);

            for (int fieldIndex = 1; fieldIndex <= fieldValuesLength; fieldIndex++)
            {
                container currentFieldValue = conPeek(fieldValues, fieldIndex);

                if (conLen(currentFieldValue) > 0)
                {
                    if (filterCodesIndex <= filterCodeLength && conPeek(currentFieldValue, 1) == fieldStr(WHSInventTable, FilterCode))
                    {
                        whsInventTable.FilterCode[filterCodesIndex] = conPeek(currentFieldValue, 2);
                        filterCodesIndex++;
                    }
                    else if (filterGroupsIndex <= filterGroupLength && conPeek(currentFieldValue, 1) == fieldStr(WHSInventTable, filterGroup))
                    {
                        whsInventTable.FilterGroup[filterGroupsIndex] = conPeek(currentFieldValue, 2);
                        filterGroupsIndex++;
                    }
                    else if (filterCodesIndex > filterCodeLength && filterGroupsIndex > filterGroupLength)
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDefaultDimensionTemplateValueForInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges default financial dimensions of <c>InventTable</c> record with the specified financial dimension set.
    /// </summary>
    /// <param name = "_recordTemplate">The template record containing the <c>InventTable</c> record.</param>
    /// <param name = "_mergeInventTableDefaultDimension">The financial dimension set to merge with existing dimensions.</param>
    private void mergeDefaultDimensionTemplateValueForInventTable(SysRecordTemplate _recordTemplate, LedgerDefaultDimensionValueSet _mergeInventTableDefaultDimension)
    {
        InventTable inventTable = _recordTemplate.parmCommon();

        if (inventTable)
        {
            inventTable.DefaultDimension = inventTable.mergeDimension(_mergeInventTableDefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBufferByDataSourceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record that corresponds to the specified <c>EcoResProductDetailsExtended</c> form data
    /// source and is related to the specified item ID.
    /// </summary>
    /// <param name="_formDataSourceName">
    /// An <c>EcoResProductDetailsExtended</c> form data source name.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record that corresponds to the specified <c>EcoResProductDetailsExtended</c> form data source and
    /// that is related to the specified item ID.
    /// </returns>
    protected Common getBufferByDataSourceName(str _formDataSourceName, boolean _forUpdate = false)
    {
        return this.productTemplateManager().getBufferByDataSourceName(_formDataSourceName, itemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductTemplateApplyBufferFactory</Name>
				<Source><![CDATA[
    public EcoResProductTemplateApplyBufferFactory parmProductTemplateApplyBufferFactory(EcoResProductTemplateApplyBufferFactory _productTemplateApplyBufferFactory = productTemplateApplyBufferFactory)
    {
        productTemplateApplyBufferFactory = _productTemplateApplyBufferFactory;

        return productTemplateApplyBufferFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductTemplateManager</Name>
				<Source><![CDATA[
    public EcoResProductTemplateManager parmProductTemplateManager(EcoResProductTemplateManager _productTemplateManager = productTemplateManager)
    {
        productTemplateManager = _productTemplateManager;

        return productTemplateManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordTemplateFactory</Name>
				<Source><![CDATA[
    public SysRecordTemplateFactory parmRecordTemplateFactory(SysRecordTemplateFactory _recordTemplateFactory = recordTemplateFactory)
    {
        recordTemplateFactory = _recordTemplateFactory;

        return recordTemplateFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleasedProductFactory</Name>
				<Source><![CDATA[
    public EcoResReleasedProductFactory parmReleasedProductFactory(EcoResReleasedProductFactory _releasedProductFactory = releasedProductFactory)
    {
        releasedProductFactory = _releasedProductFactory;

        return releasedProductFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productTemplateApplyBufferFactory</Name>
				<Source><![CDATA[
    protected EcoResProductTemplateApplyBufferFactory productTemplateApplyBufferFactory()
    {
        if (!productTemplateApplyBufferFactory)
        {
            throw error(Error::missingParameter(this));
        }
        return productTemplateApplyBufferFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productTemplateManager</Name>
				<Source><![CDATA[
    protected EcoResProductTemplateManager productTemplateManager()
    {
        if (!productTemplateManager)
        {
            throw error(Error::missingParameter(this));
        }
        return productTemplateManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordTemplateFactory</Name>
				<Source><![CDATA[
    protected SysRecordTemplateFactory recordTemplateFactory()
    {
        if (!recordTemplateFactory)
        {
            throw error(Error::missingParameter(this));
        }
        return recordTemplateFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releasedProductFactory</Name>
				<Source><![CDATA[
    protected EcoResReleasedProductFactory releasedProductFactory()
    {
        if (!releasedProductFactory)
        {
            throw error(Error::missingParameter(this));
        }
        return releasedProductFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a buffer specific validation.
    /// </summary>
    /// <param name="_productTemplateApplyBuffer">
    /// An instance of the <c>EcoResProductTemplateApplyBuffer</c> class that is used for validation of the
    /// buffer.
    /// </param>
    protected void validateBuffer(EcoResProductTemplateApplyBuffer _productTemplateApplyBuffer)
    {
        if (!_productTemplateApplyBuffer.validateBuffer())
        {
            throw error(strFmt("@SYS339635", itemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReleasedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all the buffers.
    /// </summary>
    /// <param name="_mapApplyBuffers">
    /// A map that contains all the buffers to be validated.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// Validation of the buffers failed.
    /// </exception>
    protected void validateReleasedProduct(Map _mapApplyBuffers)
    {
        boolean                 productVariantUnitConversionValidation = true;

        Map buffersMap = this.applyBuffersMap2BuffersMap(_mapApplyBuffers);
        EcoResReleasedProduct releasedProduct =
            this.releasedProductFactory().getReleasedProductFromMap(buffersMap);

        releasedProduct.checkAndUpdateNonStockedDependencies();

        InventTable inventTable = releasedProduct.parmInventTable();

        if (inventTable && inventTable.isProductVariantUnitConversionEnabled())
        {
            productVariantUnitConversionValidation = inventTable.validateProductVariantUnitConversion(releasedProduct.parmInventTableModuleInvent().UnitId,
                                                                                                      releasedProduct.parmInventTableModulePurch().UnitId,
                                                                                                      releasedProduct.parmInventTableModuleSales().UnitId);
        }

        if (!productVariantUnitConversionValidation
            || !releasedProduct.validateWrite())
        {
            throw error(strFmt("@SYS339635", itemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndWriteAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves all buffers to the database if the validation passes.
    /// </summary>
    /// <param name="_applyBuffersMap">
    /// A map that contains all buffers to be written.
    /// </param>
    protected void validateAndWriteAll(Map _applyBuffersMap)
    {
        #EcoResProductDetailsExtended

        List dataSourcesNameForSaveList = this.productTemplateManager().dataSourcesNameForSaveList();
        ListEnumerator dataSourcesNameForSaveListEnumerator = dataSourcesNameForSaveList.getEnumerator();

        while (dataSourcesNameForSaveListEnumerator.moveNext())
        {
            IdentifierName datasourceName = dataSourcesNameForSaveListEnumerator.current();
            if (_applyBuffersMap.exists(datasourceName))
            {
                EcoResProductTemplateApplyBuffer productTemplateApplyBuffer = _applyBuffersMap.lookup(dataSourcesNameForSaveListEnumerator.current());

                if (datasourceName == #InventTableDS)
                {
                    this.validateInventTableBuffer(productTemplateApplyBuffer, true);
                }
                else
                {
                    this.validateBuffer(productTemplateApplyBuffer);
                }

                this.writeBuffer(productTemplateApplyBuffer);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes a buffer.
    /// </summary>
    /// <param name="_productTemplateApplyBuffer">
    /// The instance of the <c>EcoResProductTemplateApplyBuffer</c> class that is used to update the buffer.
    /// </param>
    protected void writeBuffer(EcoResProductTemplateApplyBuffer _productTemplateApplyBuffer)
    {
        _productTemplateApplyBuffer.writeBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductTemplateApplyManagerUtils construct()
    {
        return new EcoResProductTemplateApplyManagerUtils();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EcoResProductTemplateApplyManagerUtils</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>EcoResProductTemplateApplyManagerUtils</c> class.
    /// </returns>
    public static EcoResProductTemplateApplyManagerUtils newDefault()
    {
        EcoResProductTemplateApplyManagerUtils ecoResProductTemplateApplyManagerUtils = EcoResProductTemplateApplyManagerUtils::construct();

        ecoResProductTemplateApplyManagerUtils.parmRecordTemplateFactory(SysRecordTemplateFactory::construct());
        ecoResProductTemplateApplyManagerUtils.parmProductTemplateManager(EcoResProductTemplateManager::construct());
        ecoResProductTemplateApplyManagerUtils.parmProductTemplateApplyBufferFactory(EcoResProductTemplateApplyBufferFactory::construct());
        ecoResProductTemplateApplyManagerUtils.parmReleasedProductFactory(EcoResReleasedProductFactory::construct());

        return ecoResProductTemplateApplyManagerUtils;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preApplyTemplateToProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements logic before a template has been applied.
    /// </summary>
    /// <param name="_commonOrig">
    /// A record buffer that represents the original record before template values are applied.
    /// </param>
    /// <param name="_commonUpdated">
    /// A record buffer of the update record after the template values are applied.
    /// </param>
    private static void preApplyTemplateToProduct(
        Common      _commonOrig,
        Common      _commonUpdated)
    {
        if (   _commonOrig is InventTable
            && _commonUpdated is InventTable)
        {
            InventTable inventTableOrig = _commonOrig as InventTable;
            InventTable inventTableUpdated = _commonUpdated as InventTable;

            if (inventTableOrig.PmfProductType != inventTableUpdated.PmfProductType)
            {
                BOMVersion::deleteVersions(inventTableUpdated.ItemId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the <c>InventTable</c> buffer specific validation.
    /// </summary>
    /// <param name="_productTemplateApplyBuffer">
    /// An instance of the <c>EcoResProductTemplateApplyBuffer</c> class that is used for validation of the
    /// buffer.
    /// </param>
    /// <param name="_skipProductVariantUnitConversionValidation">
    /// A boolean parameter to determine whether the product variant unit conversion validation must be executed or not.
    /// </param>
    protected void validateInventTableBuffer(EcoResProductTemplateApplyBuffer _productTemplateApplyBuffer, boolean _skipProductVariantUnitConversionValidation = false)
    {
        if (!_productTemplateApplyBuffer.validateInventTableBuffer(_skipProductVariantUnitConversionValidation))
        {
            throw error(strFmt("@SYS339635", itemId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>