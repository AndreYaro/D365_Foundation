<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyCheckOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InterCompanyCheckOrder</c> class checks the totals of the intercompany purchase orders
///    versus the intercompany sales order, and shows when the totals differ.
/// </summary>
/// <remarks>
///    The total of each order is calculated as the invoices already posted, and the lines that are not
///    yet invoiced.
/// </remarks>
class InterCompanyCheckOrder
{
    PurchTable      purchTable;
    PurchTotals     purchTotals;
    AmountCur       purchTotal;
    SalesTable      salesTable;
    SalesTotals     salesTotals;
    AmountCur       salesTotal;
    CustInvoiceJour custInvoiceJour;
    VendInvoiceJour vendInvoiceJour;
    boolean         discrepancyFound;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <see cref="M:InterCompanyCheckOrder.checkPurchTable" /> and <see
    /// cref="M:InterCompanyCheckOrder.checkSalesTable" /> methods for the intercompany orders.
    /// </summary>
    public void checkOrder()
    {
        setprefix("@SYS98726");
        this.checkPurchTable();
        this.checkSalesTable();

        if (!discrepancyFound)
        {
            info("@SCM:IntercompanyNoDiscrepanciesFound");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method checks the intercompany purchase orders in the current company against the
    ///    corresponding intercompany sales order.
    /// </summary>
    protected void checkPurchTable()
    {
        setprefix("@SYS75319");
        salesTable = null;
        while select purchTable
              where purchTable.InterCompanyOrder
              &&    purchTable.InterCompanyCompanyId
        {
            // PurchTotals will return remaining amount for invoicing when PurchQuantity is constructed for DocumentStatus invoice
            purchTotals = PurchTotals::newPurchTable(purchTable,PurchUpdate::All);
            purchTotals.parmPurchQuantity(PurchQuantity::construct(DocumentStatus::Invoice, false));
            purchTotals.calc();
            purchTotal  = purchTotals.purchTotalAmount();

            // Add already invoiced amount to get the full total for the order
            vendInvoiceJour = null;
            select sum(InvoiceAmount) from vendInvoiceJour
                where vendInvoiceJour.PurchId == purchTable.PurchId;
            purchTotal += vendInvoiceJour.InvoiceAmount;

            changecompany(purchTable.InterCompanyCompanyId)
            {
                salesTable = null;
                salesTable = SalesTable::find(purchTable.InterCompanySalesId);
                salesTotals = SalesTotals::construct(salesTable,SalesUpdate::All,AccountOrder::None,'','',DocumentStatus::Invoice);
                salesTotal  = salesTotals.totalAmount();

                // SalesTotals only returns un-invoiced amounts, so need to add the invoiced amounts
                custInvoiceJour = null;
                select sum(InvoiceAmount) from custInvoiceJour
                       index hint SalesIdDateIdx
                       where custInvoiceJour.SalesId == salesTable.SalesId;
                salesTotal += custInvoiceJour.InvoiceAmount;
            }

            if (purchTotal != salesTotal)
            {
                discrepancyFound = true;
                info(strfmt("@SYS98727",purchTable.PurchId,purchTable.CurrencyCode,purchTotal,salesTable.SalesId,salesTable.CurrencyCode,salesTotal),'',SysInfoAction_TableField::newBuffer(purchTable));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method checks the intercompany sales orders in the current company against the corresponding
    ///    intercompany purchase order.
    /// </summary>
    protected void checkSalesTable()
    {
        setprefix("@SYS93291");
        salesTable = null;
        while select salesTable
              where salesTable.InterCompanyOrder
              &&    salesTable.InterCompanyCompanyId
        {
            salesTotals = SalesTotals::construct(salesTable,SalesUpdate::All,AccountOrder::None,'','',DocumentStatus::Invoice);
            salesTotal  = salesTotals.totalAmount();

            // SalesTotals only returns un-invoiced amounts, so need to add the invoiced amounts
            custInvoiceJour = null;
            select sum(InvoiceAmount) from custInvoiceJour
                   index hint SalesIdDateIdx
                   where custInvoiceJour.SalesId == salesTable.SalesId;
            salesTotal += custInvoiceJour.InvoiceAmount;

            changecompany(salesTable.InterCompanyCompanyId)
            {
                // PurchTotals will return remaining amount for invoicing when PurchQuantity is constructed for DocumentStatus invoice
                purchTable  = null;
                purchTable  = PurchTable::find(salesTable.InterCompanyPurchId);
                purchTotals = PurchTotals::newPurchTable(purchTable,PurchUpdate::All);
                purchTotals.parmPurchQuantity(PurchQuantity::construct(DocumentStatus::Invoice, false));
                purchTotals.calc();
                purchTotal  = purchTotals.purchTotalAmount();

                // Add already invoiced amount to get the full total for the order
                select sum(InvoiceAmount) from vendInvoiceJour
                    where vendInvoiceJour.PurchId == purchTable.PurchId;
                purchTotal += vendInvoiceJour.InvoiceAmount;
            }

            if (salesTotal != purchTotal)
            {
                discrepancyFound = true;
                info(strfmt("@SYS98728",salesTable.SalesId,salesTable.CurrencyCode,salesTotal,purchTable.PurchId,purchTable.CurrencyCode,purchTotal),'',SysInfoAction_TableField::newBuffer(salesTable));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>