<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCancelOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>SalesCancelOrder</c> class is used to create a prompt to confirm if the user wishes to cancel line items for the selected sales order(s) and upon confirmation it cancels them.
/// </summary>
public class SalesCancelOrder
{
    FormRun             callerForm;
    FormDataSource      salesTableFormDataSource;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        List ordersToUpdate = new List(Types::Int64);
        MultiSelectionHelper selection = MultiSelectionHelper::construct();
        selection.parmDatasource(salesTableFormDataSource);
        SalesTable salesTable = selection.getFirst();
        SalesLine salesLine;
        ProdTable prodTable;
        FormDataSource formDataSource;

        if (!this.mustCancelSalesOrder())
        {
            return;
        }

        while (salesTable)
        {
            if (SalesCancelOrderSkipProductionOrderDialogFlight::instance().isEnabled())
            {
                ordersToUpdate.addEnd(salesTable.RecId);
            }
            else
            {
                this.showProdOrderCancelDialog(salesTable, ordersToUpdate);
            }

            salesTable = selection.getNext();
        }

        if (this.canMultipleOrdersDeliveryRemainderBeCanceled(ordersToUpdate))
        {
            SalesUpdateRemain salesUpdateRemain = SalesUpdateRemain::construct();

            salesUpdateRemain.parmFormDataSource(salesTableFormDataSource);

            salesUpdateRemain.cancelMultipleOrdersDeliveryRemainder(ordersToUpdate);
        }

        this.researchDataSource(tablenum(SalesTable));
        this.researchDataSource(tablenum(SalesLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCancelSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether sales order can be cancelled.
    /// </summary>
    /// <returns>
    ///     true if sales order can be cancelled; otherwise, false.
    /// </returns>
    protected boolean mustCancelSalesOrder()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMultipleOrdersDeliveryRemainderBeCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the cancellation of delivery remainder on the given sales orders list.
    /// </summary>
    /// <param name = "_ordersToUpdate">
    /// The list of sales orders to be updated.
    /// </param>
    /// <returns>
    /// true if the cancellation of delivery remainder on the sales orders is valid; otherwise, false.
    /// </returns>
    protected boolean canMultipleOrdersDeliveryRemainderBeCanceled(List _ordersToUpdate)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchDataSource</Name>
				<Source><![CDATA[
    private void researchDataSource(TableId _tableId)
    {
        FormDataSource formDataSource = callerForm.dataSource(tableid2name(_tableId));
        if (formDataSource)
        {
            formDataSource.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SalesCancelOrder salesCancelOrder = new SalesCancelOrder();

        if (Box::yesNo("@SYS4004581", DialogButton::No) == DialogButton::Yes)
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(args))
            {
                salesCancelOrder.salesTableFormDataSource = FormDataUtil::getFormDataSource(args.record());
                salesCancelOrder.callerForm = args.caller() as FormRun;
                salesCancelOrder.run();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProdOrderCancelDialog</Name>
				<Source><![CDATA[
    private void showProdOrderCancelDialog(SalesTable _salesTable, List _ordersToUpdate)
    {
        SalesLine salesLine;
        ProdTable prodTable;

        select firstonly Recid from salesLine
            where salesLine.SalesId         == _salesTable.SalesId &&
                    salesLine.InventRefType == InventRefType::Production
                join ProdId,ProdStatus from prodTable
                    where salesLine.InventRefId    == prodTable.ProdId &&
                        salesLine.InventRefTransId == prodTable.InventTransId;

        if (!salesLine.RecId ||
                (salesLine.RecId &&
                 Box::yesNo(strFmt("@SCM:CancelSalesOrder", prodTable.ProdId, prodTable.ProdStatus, _salesTable.SalesId),
                           DialogButton::No) == DialogButton::Yes))
        {
            _ordersToUpdate.addEnd(_salesTable.RecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>