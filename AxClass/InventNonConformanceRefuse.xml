<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventNonConformanceRefuse</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventNonConformanceRefuse</c> class marks a nonconformance as refused.
/// </summary>
class InventNonConformanceRefuse extends InventNonConformanceUpdate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the standard <c>run</c> method and marks the nonconformance as refused.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The nonconformance either does not exist or has already been refused.
    /// </exception>
    public void run()
    {       
        super();
        ttsbegin;
        
        InventNonConformanceTable   inventNonConformanceTable;
        int rowCount;
        while select forupdate inventNonConformanceTable
            where inventNonConformanceTable.InventNonConformanceID        == inventNonConformanceID
                && inventNonConformanceTable.InventNonConformanceApproval != InventNonConformanceApproval::Refused
        
        {
            inventNonConformanceTable.InventNonConformanceApproval = InventNonConformanceApproval::Refused;
            inventNonConformanceTable.update();
            rowCount++;            
        }

        if (rowCount != 1)
        {
            throw error(strFmt("@SYS114045", inventNonConformanceID));
        }
        InventNonConformanceHistory::insertRefuse(inventNonConformanceID, worker);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the nonconformance exists and is not already refused.
    /// </summary>
    /// <param name="calledFrom">
    ///    This parameter is not used in this class. See the base class, <c>RunBase</c>, for a description.
    /// </param>
    /// <returns>
    ///    true if the validation succeeded; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (inventNonConformanceID)
        {
            InventNonConformanceTable inventNonConformanceTable = InventNonConformanceTable::find(inventNonConformanceID);
            if (!inventNonConformanceTable
              || inventNonConformanceTable.InventNonConformanceApproval == InventNonConformanceApproval::Refused)
            {
                return checkFailed(strFmt("@SYS114045", inventNonConformanceID));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventNonConformanceRefuse construct()
    {
        return new InventNonConformanceRefuse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS114059";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        InventNonConformanceRefuse  inventNonConformanceRefuse = InventNonConformanceRefuse::construct();

        inventNonConformanceRefuse.initFromArgs(args);

        if (Box::yesNo("@SYS114058", DialogButton::No) == DialogButton::Yes)
        {
            inventNonConformanceRefuse.runOperation();

            if (args && args.record() && args.dataset() == tableNum(InventNonConformanceTable))
            {
                InventNonConformanceUpdate::refreshCaller(args.record());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
