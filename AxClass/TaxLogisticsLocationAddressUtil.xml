<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxLogisticsLocationAddressUtil</Name>
	<SourceCode>
		<Declaration>
      <![CDATA[
/// <summary>
/// Tax logistics location address handling with effective date time.
/// </summary>
public class TaxLogisticsLocationAddressUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLogisticsPostalAddress</Name>
				<Source>
          <![CDATA[
    /// <summary>
    /// Gets the logistics postal address at effective date time.
    /// </summary>
    /// <param name="_locationRecId">
    /// The given value f <c>LogisticsLocationRecId</c>.
    /// </param>
    /// <param name="_effectiveDateTime">
    /// The given value of <c>EffectiveDateTime</c>.
    /// </param>
    /// <param name="_lineNum">
    /// Line number used for warning message.
    /// </param>
    /// <param name="_suppressMessage">
    /// Whether to suppress the warning message.
    /// </param>
    /// <returns>
    /// Logistics postal address at effective date time.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LogisticsPostalAddress getLogisticsPostalAddress(LogisticsLocationRecId _locationRecId, EffectiveDateTime _effectiveDateTime, LineNum _lineNum = 0, boolean _suppressMessage = false)
    {
        LogisticsPostalAddress logisticsPostalAddress;
        if (_locationRecId)
        {
            logisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(_locationRecId, _effectiveDateTime);
            if (logisticsPostalAddress == null)
            {
                str messageText = TaxLogisticsLocationAddressUtil::getWarningMessageForInvalidAddress(_locationRecId, _effectiveDateTime, _lineNum);
                if (!_suppressMessage)
                {
                    Message::Add(MessageSeverity::Warning, messageText);
                }
                TaxLogisticsLocationAddressUtil::logMessage(messageText);
            }
        }
        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLogisticsPostalAddress</Name>
				<Source>
          <![CDATA[
    /// <summary>
    /// Checks the logistics postal address at effective date time.
    /// </summary>
    /// <param name="_locationRecId">
    /// The given value of <c>LogisticsLocationRecId</c>.
    /// </param>
    /// <param name="_effectiveDateTime">
    /// The given value of <c>EffectiveDateTime</c>.
    /// </param>
    /// <param name="_lineNum">
    /// Line number used for warning message.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void checkLogisticsPostalAddress(LogisticsLocationRecId _locationRecId, EffectiveDateTime _effectiveDateTime, LineNum _lineNum = 0)
    {
        LogisticsPostalAddress logisticsPostalAddress;
        if (_locationRecId)
        {
            logisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(_locationRecId, _effectiveDateTime);
            if(logisticsPostalAddress == null)
            {
                TaxLogisticsLocationAddressUtil::logMessage(TaxLogisticsLocationAddressUtil::getWarningMessageForInvalidAddress(_locationRecId, _effectiveDateTime, _lineNum));
            }
        }
    }

]]></Source>
			</Method>
      <Method>
        <Name>getWarningMessageForInvalidAddress</Name>
        <Source>
          <![CDATA[
    /// <summary>
    /// Prepares the warning message for invalid address with effective date time.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    private static str getWarningMessageForInvalidAddress(LogisticsLocationRecId _locationRecId, EffectiveDateTime _effectiveDateTime, LineNum _lineNum = 0)
    {
        date dateFrom = 01\01\1900;
        date dateTo = 31\12\2154;
        logisticsPostalAddress logisticsPostalAddressForMessage;
        select firstonly validtimestate(dateFrom, dateTo) * from logisticsPostalAddressForMessage
            where logisticsPostalAddressForMessage.location == _locationRecId;
        logisticsPostalAddressView logisticsPostalAddressView;
        select firstonly validtimestate(dateFrom, dateTo) LocationName from logisticsPostalAddressView
            where logisticsPostalAddressView.RecId == logisticsPostalAddressForMessage.RecId;
        if (_lineNum)
        {
            return strFmt("@TaxGST:TaxAddressInvalid", _lineNum, logisticsPostalAddressView.LocationName, DateTimeUtil::applyTimeZoneOffset(_effectiveDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        }
        else
        {
            return strFmt("@TaxGST:TaxAddressInvalidWithoutLineNumber", logisticsPostalAddressView.LocationName, DateTimeUtil::applyTimeZoneOffset(_effectiveDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        }
    }

]]>
        </Source>
      </Method>
      <Method>
        <Name>logMessage</Name>
        <Source>
          <![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    private static void logMessage(str _messageText)
    {
        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(TaxLogisticsLocationAddressUtil));
        using(var activity = logger.activityContext(classStr(TaxLogisticsLocationAddressUtil), classStr(TaxLogisticsLocationAddressUtil)))
        {
            logger.logWarning(_messageText);
        }
    }

]]>
        </Source>
      </Method>
		</Methods>
	</SourceCode>
</AxClass>