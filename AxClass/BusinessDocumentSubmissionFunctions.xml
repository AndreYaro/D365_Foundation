<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentSubmissionFunctions</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using Microsoft.Dynamics365.LocalizationFramework;
using Newtonsoft.Json.Linq;
using System.IO;
using MM = Microsoft.Dynamics365.LocalizationFramework.ModelMapping;

/// <summary>
/// The class implements service functions for the e-Invoicing service.
/// </summary>
internal static class BusinessDocumentSubmissionFunctions
{
    const str TypeNameFile = 'file';
    const int FileRefConLen = 2;
    const int DateTimeKindUTC = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertSerializedProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method performs replacement of document properties with serialized values.
    /// </summary>
    /// <param name = "_jTokenArray">The JSON array to be updated.</param>
    [Hookable(false)]
    public static void convertSerializedProperties(JToken _jTokenArray)
    {
        const str dateTimeTypeName = 'dateTime';
        const str stringTypeName = 'string';
        const str fileTypeName = 'compressedFile';
            
        if (_jTokenArray && _jTokenArray is JArray)
        {
            JArray propertyArray = _jTokenArray as JArray;

            for (int idx = 0; idx < propertyArray.Count; idx++)
            {
                JToken variable = propertyArray.get_Item(idx);
                JToken typeName = variable.SelectToken('ValueTypeName');
                JValue value = variable.SelectToken('Value');

                switch (typeName.ToString())
                {
                    case dateTimeTypeName :
                        System.DateTime dt = new System.DateTime(0);
                        dt = value.ToObject(dt.GetType());
                        System.DateTime epoch = new System.DateTime(1970, 1, 1, 0, 0, 0, System.DateTimeKind::Utc);
                        System.TimeSpan timeSpan = dt.ToUniversalTime().Subtract(epoch);

                        System.Int64 unixDateTime = System.Convert::ToInt64(timeSpan.TotalSeconds);
                        value.Replace(new JValue(unixDateTime.ToString()));
                        break;
                    case stringTypeName :
                    case fileTypeName :
                        value.Replace(new JValue(Newtonsoft.Json.JsonConvert::SerializeObject(value.ToString())));
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createModelMappingRunToJson</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method executes a model mapping referenced by the input parameter and generates a JSON structure.
    /// </summary>
    /// <param name = "_erModelMappingTable">A reference to a GER model mapping.</param>
    /// <param name = "_documentTableId">Document table id.</param>
    /// <param name = "_documentRecId">Document record id.</param>
    /// <param name = "_activityCategory">Activity category.</param>
    /// <param name = "_dataModelUsageSpecification">Data model usage specification</param>
    /// <returns>A <c>JObject</c> containing JSON structure as a result of the model mapping.</returns>
    [Hookable(false)]
    public static JObject createModelMappingRunToJson(
        ERModelMappingTable _erModelMappingTable,
        RefTableId _documentTableId,
        RefRecId _documentRecId,
        str _activityCategory,
        MM.DataModelUsageSpecification _dataModelUsageSpecification)
    {
        JObject ret;
        boolean isSuccess;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(_activityCategory);
        using (var activityContext = activities.createModelMappingRunToJson())
        {
            try
            {
                var context = new ERModelDefinitionDatabaseContext();
                if (_documentTableId && _documentRecId)
                {
                    context.addValue(_documentTableId, fieldName2Id(_documentTableId, 'RecId'), _documentRecId);
                }

                context.addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curExt());

                ret = JObject::Parse(BusinessDocumentSubmissionFunctions::getModelMappingRunToJson(context, _erModelMappingTable, _dataModelUsageSpecification));
                isSuccess = true;
            }
            catch (Exception::CLRError)
            {
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createModelMappingRunToJsonFromQueryContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method executes a model mapping referenced by the input parameter and generates a JSON structure.
    /// </summary>
    /// <param name = "_erModelMappingTable">A reference to a GER model mapping.</param>
    /// <param name = "_tableId">The source table id.</param>
    /// <param name = "_query">The source query.</param>
    /// <param name = "_activityCategory">Activity category.</param>
    /// <param name = "_dataModelUsageSpecification">Data model usage specification</param>
    /// <returns>A <c>JObject</c> containing JSON structure as a result of the model mapping.</returns>
    [Hookable(false)]
    public static JObject createModelMappingRunToJsonFromQueryContext(
        ERModelMappingTable _erModelMappingTable,
        TableId _tableId,
        Query _query,
        str _activityCategory,
        MM.DataModelUsageSpecification _dataModelUsageSpecification)
    {
        JObject ret;
        boolean isSuccess;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(_activityCategory);
        using (var activityContext = activities.createModelMappingRunToJson())
        {
            try
            {
                var context = new ERModelDefinitionDatabaseContext();
                if (_tableId && _query)
                {
                    context.addQuery(_tableId, _query);
                }

                context.addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curExt());

                ret = JObject::Parse(BusinessDocumentSubmissionFunctions::getModelMappingRunToJson(context, _erModelMappingTable, _dataModelUsageSpecification));
                isSuccess = true;
            }
            catch (Exception::CLRError)
            {
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModelMappingRunToJson</Name>
				<Source><![CDATA[
    private static str getModelMappingRunToJson(
        ERModelDefinitionDatabaseContext _context,
        ERModelMappingTable _erModelMappingTable,
        MM.DataModelUsageSpecification _dataModelUsageSpecification)
    {
        str jsonText;

        var parameters = new ERModelDefinitionParamsUIActionComposite();
        parameters.add(_context);

        using (var stream = new MemoryStream())
        {
            ERIModelMappingRunWithUsageSpecification erModelMappingRun = ERObjectsFactory::createModelMappingRunToJson(_erModelMappingTable, stream);
            erModelMappingRun.setUsageSpecification(_dataModelUsageSpecification);
            erModelMappingRun.withParameter(parameters);
            erModelMappingRun.init();
            erModelMappingRun.getParameters();
            erModelMappingRun.runUnattendedAndReturnResult();
        
            stream.Seek(0, SeekOrigin::Begin);
            using (var streamReader = new StreamReader(stream))
            {
                jsonText = streamReader.ReadToEnd();
            }
        }

        return jsonText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutgoingVariableValueByDocInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves outgoing variable value by its name from document info.
    /// </summary>
    /// <param name = "documentInfo">Document info.</param>
    /// <param name = "variableName">Name of the variable.</param>
    /// <returns>The value of the variable.</returns>
    [Hookable(false)]
    public static str getOutgoingVariableValueByDocInfo(
        BusinessDocumentInfo documentInfo, 
        str variableName)
    {
        BusinessDocumentOutgoingVariablesTmp outVariables = documentInfo.getOutgoingVariables();
        BusinessDocumentExecutionTmp executions = documentInfo.getExecutions();
        BusinessDocumentExecutionActionTmp executionActions = documentInfo.getExecutionActions();

        return BusinessDocumentSubmissionFunctions::getOutgoingVariableValue(
            variableName, 
            outVariables, 
            executions, 
            executionActions, 
            documentInfo.getId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutgoingVariableValueByBusinessDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves outgoing variable value by its name from document info.
    /// </summary>
    /// <param name = "_businessDocument">Document.</param>
    /// <param name = "_variableName">Name of the variable.</param>
    /// <returns>The value of the variable.</returns>
    internal static str getOutgoingVariableValueByBusinessDocument(
        BusinessDocument _businessDocument,
        str _variableName)
    {
        str variableValue;
        BusinessDocumentExecutionRequest businessDocumentExecutionRequest;
        BusinessDocumentExecutionRequestVariable businessDocumentExecutionRequestVariable;

        select firstonly RecId from businessDocumentExecutionRequest
                order by businessDocumentExecutionRequest.CreatedDateTime desc
                where businessDocumentExecutionRequest.BusinessDocument == _businessDocument.RecId
            join businessDocumentExecutionRequestVariable
                where businessDocumentExecutionRequestVariable.BusinessDocumentExecutionRequest == businessDocumentExecutionRequest.RecId
                    && businessDocumentExecutionRequestVariable.Name == _variableName;

        if (businessDocumentExecutionRequestVariable)
        {
            variableValue = BusinessDocumentServiceController::getExecutionVariableV2(
                businessDocumentExecutionRequestVariable.RecId);
        }
        else
        {
            throw error(strFmt("@BusinessDocumentSubmissionService:VariableNotFoundInExecution", _variableName));
        }

        return variableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutgoingVariableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves variables value from provided execution info.
    /// </summary>
    /// <param name = "_variableName">Name of the variable to retrieve value of.</param>
    /// <param name = "_variables">Collection of outgoing variables infos.</param>
    /// <param name = "_executions">Collection of document executions.</param>
    /// <param name = "_executionActions">Collection of action executions.</param>
    /// <param name = "_documentId">GUID of the document.</param>
    /// <returns>Value of the variable.</returns>
    [Hookable(false)]
    public static str getOutgoingVariableValue(
        str _variableName, 
        BusinessDocumentOutgoingVariablesTmp _variables, 
        BusinessDocumentExecutionTmp _executions, 
        BusinessDocumentExecutionActionTmp _executionActions, 
        str _documentId)
    {
        str variableValue;
        BusinessDocumentOutgoingVariablesTmp variables;
        BusinessDocumentExecutionTmp executions;

        variables.setTmpData(_variables);
        executions.setTmpData(_executions);

        select firstonly ID from executions
            order by Timestamp desc;

        select firstonly variables
            where variables.ExecutionID == executions.ID
                && variables.Name == _variableName;
        
        if (variables)
        {
            variableValue = BusinessDocumentServiceController::getExecutionVariable(
                variables.ExecutionID,
                variables.Name);
        }
        else
        {
            throw error(strFmt("@BusinessDocumentSubmissionService:VariableNotFoundInExecution", _variableName));
        }

        return variableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogFromErrorCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts collection of ER errors to container of error messages.
    /// </summary>
    /// <param name = "_errors">Collection of errors.</param>
    /// <returns><c>Container</c> with an error messages.</returns>
    [Hookable(false)]
    public static container getLogFromErrorCollection(IEnumerable _errors)
    {
        container log;

        if (_errors)
        {
            IEnumerator enumerator = _errors.GetEnumerator();
        
            while (enumerator.MoveNext())
            {
                ERIRuntimeError error = enumerator.Current;
                log += [ error.Message ];
            }
        }
 
        return log;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimestampUtcFromTicks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts ticks to UTC timestamp string with CosmosDB-compaitble format.
    /// </summary>
    /// <param name = "_ticks">Date representation as elapsed ticks.</param>
    /// <returns>The timestamp in appropriate format.</returns>
    [Hookable(false)]
    public static str getTimestampUtcFromTicks(int64 _ticks)
    {
        System.DateTime timestamp = new System.DateTime(_ticks, DateTimeKindUTC);
        str timestampStr = timestamp.ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
        return timestampStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUtcsDatetimeFromTicks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts ticks to utcdatetime.
    /// </summary>
    /// <param name = "_ticks">Date representation as elapsed ticks.</param>
    /// <returns>The timestamp as xpp utcdatetime type.</returns>
    internal static utcdatetime getUtcsDatetimeFromTicks(int64 _ticks)
    {
        System.DateTime timestamp = new System.DateTime(_ticks, DateTimeKindUTC);
        utcdatetime ret = Global::CLRSystemDateTime2UtcDateTime(timestamp);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if JObject contains one or more exception(s).
    /// </summary>
    /// <param name = "_object">The <c>JObject</c> to check.</param>
    /// <returns><c>True</c> if <c>jobject</c> contain at least one exception. Otherwise, <c>false</c>.</returns>
    [Hookable(false)]
    public static boolean hasException(JObject _object)
    {
        boolean bRes = false;
        JToken exception = _object.SelectToken(BusinessDocumentWebHelper::ExceptionToken);
        if (exception)
        {
            bRes = true;
        }

        return bRes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFlowVariable</Name>
				<Source><![CDATA[
    internal static void addFlowVariable(
        str _variableName,
        str _valueTypeName,
        str _value,
        JArray _flowVariables)
    {
        JObject variable = new JObject();
        variable.Add(new JProperty('Name', _variableName));
        variable.Add(new JProperty('ValueTypeName', _valueTypeName));
        variable.Add(new JProperty('Value', _value));

        _flowVariables.Add(variable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInputParametersForCDS</Name>
				<Source><![CDATA[
    internal static void addInputParametersForCDS(
        JToken _inputParameters,
        JArray _flowVariables)
    {
        if (_inputParameters is JArray)
        {
            JArray parameters = _inputParameters as JArray;
            
            JObject variableValue = new JObject();

            for (int idx = 0; idx < parameters.Count; idx++)
            {
                JToken parameter = parameters.get_Item(idx);
                JValue name = parameter.SelectToken('Name');
                JValue value = parameter.SelectToken('Value');

                variableValue.Add(new JProperty(name.ToString(), value.ToString()));
            }

            BusinessDocumentSubmissionFunctions::addFlowVariable(
                'InputParameters',
                'keyvaluepairs',
                variableValue.ToString(),
                _flowVariables);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalFlowVariablesFromContext</Name>
				<Source><![CDATA[
    internal static void addAdditionalFlowVariablesFromContext(
        JToken _additionalVariables,
        JArray _flowVariables)
    {
        if (_additionalVariables is JArray)
        {
            JArray variables = _additionalVariables as JArray;

            for (int idx = 0; idx < variables.Count; idx++)
            {
                JToken parameter = variables.get_Item(idx);
                JValue name = parameter.SelectToken('Name');
                JValue value = parameter.SelectToken('Value');
                JValue valueType = parameter.SelectToken('ValueTypeName');

                BusinessDocumentSubmissionFunctions::addFlowVariable(
                    name.ToString(),
                    valueType.ToString(),
                    value.ToString(),
                    _flowVariables);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>