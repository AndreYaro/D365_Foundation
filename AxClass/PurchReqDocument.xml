<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchReqDocument</c> class is used for purchase requisition workflow.
/// </summary>
/// <remarks>
///    This class inherits from the <c>WorkflowDocument</c> class and is used as the underlying query for purchase requisition workflow.
/// </remarks>
[
WorkflowDocIsQueueEnabledAttribute(true,"@SYS152689"),
ExpressionHierarchyProviderAttribute(classStr(PurchReqExpressionProvider), tableStr(PurchReqLine), fieldStr(PurchReqLine,ProcurementCategory)),
ExpressionCurrencyFieldMapAttribute('parmApprovalAmount', 'parmCurrencyCode'),
ExpressionCurrencyFieldMapAttribute('parmApprovalAmountExclTax', 'parmCurrencyCode'),
ExpressionCurrencyFieldMapAttribute('parmSpendingLimit', 'parmCurrencyCode'),
ExpressionCurrencyFieldMapAttribute('parmSpendingLimitPreparer', 'parmCurrencyCode')
]
class PurchReqDocument extends WorkflowDocument implements SysErrorMessageHelpScopeIWorkflow
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkContext</Name>
				<Source><![CDATA[
    protected void checkContext(TableId    _tableId,
                                RecId      _recId)
    {
        if (_tableId != tableNum(PurchReqTable))
        {
            // Workflow context table id reference: %1 is not valid
            throw error(strFmt("@SYS107963", _tableId));
        }

        if (_recId == 0)
        {
            // Workflow context record id is zero.
            throw error("@SYS107964");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the underlying query.
    /// </summary>
    /// <returns>
    /// The name of the underlying query.
    /// </returns>

    QueryName getQueryName()
    {
        return queryStr(PurchReqDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApprovalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calulates the total amount for the purchase requisition.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// the total amount of the purchase requisition.
    /// </returns>

    public PurchReqAmountApproval parmApprovalAmount(CompanyId _companyId,
                                                     TableId   _tableId,
                                                     RecId     _recId)
    {
        this.checkContext(_tableId, _recId);

        changecompany(PurchReqTable::workflowContextDataAreaId(_tableId, _recId))
        {
            return PurchReqDocument::approvalAmountStatic(_recId, this.parmCurrencyCode(_companyId, _tableId, _recId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApprovalAmountExclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount exclusive of tax for the purchase requisition.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The total amount exclusive of tax of the purchase requisition.
    /// </returns>

    public PurchReqAmountApprovalExclTax parmApprovalAmountExclTax(CompanyId _companyId,
                                                                   TableId   _tableId,
                                                                   RecId     _recId)
    {
        this.checkContext(_tableId, _recId);

        changecompany(PurchReqTable::workflowContextDataAreaId(_tableId, _recId))
        {
            return PurchReqDocument::approvalAmountExclTaxStatic(_recId, this.parmCurrencyCode(_companyId, _tableId, _recId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetSourceCheckResult</c> for the purchase requisition workflow instance.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// The <c>BudgetSourceCheckResult</c>.
    /// </returns>
    public BudgetSourceCheckResult parmBudgetCheckResult(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        PurchReqTable           purchReqTable;
        BudgetSourceCheckResult budgetCheckResult;

        this.checkContext(_tableId, _recId);

        purchReqTable       = PurchReqTable::find(_recId);
        budgetCheckResult   = purchReqTable.getBudgetCheckResult();
        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a system currency code.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// A system currency code.
    /// </returns>

    public CurrencyCode parmCurrencyCode(CompanyId _companyId,
                                         TableId   _tableId,
                                         RecId     _recId)
    {
        return SystemParameters::find().SystemCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSingleRequester</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the purchase requisition has a single requester.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// A Boolean value that indicates whether the purchase requisition has a single requester.
    /// </returns>
    public PurchReqIsSingleRequester parmIsSingleRequester(CompanyId _companyId,
                                                           TableId   _tableId,
                                                           RecId     _recId)
    {
        PurchReqLine    purchReqLine;
        PurchReqLine    purchReqLineRequisitioner;

        this.checkContext(_tableId, _recId);

        select firstonly Requisitioner from purchReqLine where purchReqLine.PurchReqTable == _recId;

        select firstonly RecId from purchReqLineRequisitioner where purchReqLineRequisitioner.PurchReqTable == _recId && purchReqLineRequisitioner.Requisitioner != purchReqLine.Requisitioner;

        if (purchReqLineRequisitioner)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequester</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Return the requester on the first purchase requisition line associated with the <c>PurchReqTable</c> record.
    /// </summary>
    /// <param name="_companyId">
    ///    Company ID of the record.
    /// </param>
    /// <param name="_tableId">
    ///    Table ID of the record.
    /// </param>
    /// <param name="_recId">
    ///    Record ID of the record.
    /// </param>
    /// <returns>
    ///    Requester on the first purchase requisition line associated with the <c>PurchReqTable</c> record.
    /// </returns>
    /// <remarks>
    ///    This function is intended to be used when all purchase requisition lines in a purchase requisition have the same requester.
    /// </remarks>
    public PurchReqRequesterRefRecId parmRequester(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        this.checkContext(_tableId, _recId);

        PurchReqLine purchReqLine;
        select firstonly Requisitioner from purchReqLine where purchReqLine.PurchReqTable == _recId;

        return purchReqLine.Requisitioner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>placeholderMethodInt64Delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(WorkflowDocumentField), delegatestr(WorkflowDocumentField, placeholderMethodInt64Delegate))]
    static void placeholderMethodInt64Delegate(extendedTypeId typeId, int64 longValue, EventHandlerResult stringValue)
    {
        if (SysDictType::isEqualOrExtending(typeId, extendedTypeNum(PurchReqRequesterRefRecId)))
        {
            stringValue.result(HcmWorker::find(longValue).name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpendingLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the spending limit for the requester.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The spending limit of the requester.
    /// </returns>

    public PurchReqSpendingLimitValueMST parmSpendingLimit(CompanyId _companyId,
                                                           TableId   _tableId,
                                                           RecId     _recId)
    {
        PurchReqLine    purchReqLine;

        this.checkContext(_tableId, _recId);

        select firstonly Requisitioner from purchReqLine where purchReqLine.PurchReqTable == _recId;

        changecompany(PurchReqTable::workflowContextDataAreaId(_tableId, _recId))
        {
            return PurchReqDocument::spendingLimitStatic(purchReqLine.Requisitioner, this.parmCurrencyCode(_companyId, _tableId, _recId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpendingLimitPreparer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the spending limit for the preparer.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The spending limit of the preparer.
    /// </returns>

    public PurchReqSpendingLimitValueMSTPreparer parmSpendingLimitPreparer(CompanyId _companyId,
                                                                           TableId   _tableId,
                                                                           RecId     _recId)
    {
        this.checkContext(_tableId, _recId);

        changecompany(PurchReqTable::workflowContextDataAreaId(_tableId, _recId))
        {
            return PurchReqDocument::spendingLimitStatic(PurchReqTable::find(_recId).Originator, this.parmCurrencyCode(_companyId, _tableId, _recId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendCategoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the minimum <c>VendCategoryStatus</c> enumeration value of the purchase requisition lines.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The <c>VendCategoryStatus</c> enumeration value.
    /// </returns>

    public VendCategoryStatus parmVendCategoryStatus(CompanyId _companyId,
                                                     TableId   _tableId,
                                                     RecId     _recId)
    {
        PurchReqLine        purchReqLine;
        VendCategoryStatus  vendCategoryStatus;

        this.checkContext(_tableId, _recId);

        while select purchReqLine where purchReqLine.PurchReqTable == _recId
        {
            vendCategoryStatus = purchReqLine.vendCategoryStatus();

            if (vendCategoryStatus == VendCategoryStatus::Standard)
            {
                break;
            }
        }

        return vendCategoryStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvalAmountExclTaxStatic</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calulates toal amount excl of tax for the purchase requisition.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    ///    Record ID of the <c>PurchReqTable</c> record.
    /// </param>
    /// <param name="_currencyCode">
    ///    Currency code in which the amount is to be calculated.
    /// </param>
    /// <returns>
    ///    Total amount of the purchase requisition.
    /// </returns>

    public static PurchReqAmountApprovalExclTax approvalAmountExclTaxStatic(RecId     _purchReqTableRecId, CurrencyCode _currencyCode)
    {
        PurchReqTable purchReqTable = PurchReqTable::find(_purchReqTableRecId);
        PurchtotalsForm totalsForm;

        if (purchReqTable.isConsumption())
        {
            totalsForm = PurchTotalsForm_PurchReq::construct();

            totalsForm.parmCallingTable(purchReqTable);
            totalsForm.calctotals();

            return CurrencyExchangeHelper::curAmount2CurAmount(totalsForm.sumLinesValue(), totalsForm.currencyCode(), _currencyCode);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvalAmountStatic</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calulates toal amount for the purchase requisition.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    ///    Record ID of the <c>PurchReqTable</c> record.
    /// </param>
    /// <param name="_currencyCode">
    ///    Currency code in which the amount is to be calculated.
    /// </param>
    /// <returns>
    ///    Total amount of the purchase requisition.
    /// </returns>

    public static PurchReqAmountApproval approvalAmountStatic(RecId     _purchReqTableRecId, CurrencyCode _currencyCode)
    {
        PurchReqTable purchReqTable = PurchReqTable::find(_purchReqTableRecId);
        PurchtotalsForm totalsForm;

        if (purchReqTable.isConsumption())
        {
            totalsForm = PurchTotalsForm_PurchReq::construct();

            totalsForm.parmCallingTable(purchReqTable);
            totalsForm.calctotals();

            return CurrencyExchangeHelper::curAmount2CurAmount(totalsForm.sumLinesValue() + totalsForm.sumTaxValue(), totalsForm.currencyCode(), _currencyCode);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    creates an instance of the <c>PurchReqDocument</c> class.
    /// </summary>
    /// <returns>
    ///    an instance of the <c>PurchReqDocument</c> class.
    /// </returns>
    /// <remarks>
    ///    Use the following procedure to customize or extend the
    ///    <c>
    ///       PurchReqDocument
    ///    </c>
    ///     class.
    ///    <list type="number">
    ///       <item>
    ///          <description>
    ///             Create a new class that derives from <c>PurchReqDocument</c>.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Overlayer the <c>construct</c> method on <c>PurchReqDocument</c> so that it returns an instance of
    ///             the derived class.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Override the methods from the <c>PurchReqDocument</c> class that you want to customize or extend in
    ///             your derived class.
    ///          </description>
    ///       </item>
    ///    </list>
    ///     This procedure helps to ensure that your customizations are maintained if the base version of the
    ///    <c>
    ///       PurchReqDocument
    ///    </c>
    ///     class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for Static Construct Methods" />
    ///    .
    /// </remarks>

    public static PurchReqDocument construct()
    {
        return new PurchReqDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>spendingLimitStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the spending limit for the worker.
    /// </summary>
    /// <param name="_hcmWorkerRecId">
    /// The record Id of the <c>HcmWorker</c> record.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code in which the amount is to be calculated.
    /// </param>
    /// <returns>
    /// The spending limit of the worker.
    /// </returns>

    public static PurchReqSpendingLimitValueMST spendingLimitStatic(RecId _hcmWorkerRecId, CurrencyCode _currencyCode)
    {
        AmountMST                      limitValue;
        HRPWorkerLimit                 workerLimit;
        HcmWorker                      hcmWorker;
        container                      limitAmount;
        HcmPositionWorkerAssignment    positionWorkerAssignment;
        HcmPosition                    position;

        select RecId from hcmWorker where hcmWorker.RecId == _hcmWorkerRecId
            join Position from positionWorkerAssignment
                where positionWorkerAssignment.Worker == hcmWorker.RecId
            join PositionId from position
                where position.RecId == positionWorkerAssignment.Position;

        workerLimit = new HRPWorkerLimit();
        limitAmount = workerLimit.getWorkerSigningLimit(hcmWorker.RecId, SourceDocumentRelationType::PurchaseRequest, HRPLimitType::Spending,position.PositionId);
        limitValue = max(limitValue,CurrencyExchangeHelper::curAmount2CurAmount(conPeek(limitAmount, 1), conPeek(limitAmount, 2), _currencyCode));

        return limitValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableErrorMessageHelpScopeAndShowLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean enableErrorMessageHelpScopeAndShowLink()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>