<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLabelPrintCommandGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class WhsLabelPrintCommandGenerator implements WhsDocumentRoutingTemplateTranslatorLabelCollector
{
    protected WHSLabelLayout labelLayout;
    protected WHSPrinterName printer;

    private WhsDocumentRoutingTranslator translator;

    private List labelsFromTemplateTranslator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>withLabelLayout</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected WhsLabelPrintCommandGenerator withLabelLayout(WHSLabelLayout _labelLayout)
    {
        labelLayout = _labelLayout;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withPrinter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected WhsLabelPrintCommandGenerator withPrinter(WHSPrinterName _printer)
    {
        printer = _printer;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateTranslator</Name>
				<Source><![CDATA[
    private void instantiateTranslator()
    {
        translator = WhsDocumentRoutingTranslator::construct();

        if (labelLayout.LabelLocale)
        {
            translator.withLanguage(labelLayout.LabelLocale);
        }

        this.configureTranslator(translator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTranslator</Name>
				<Source><![CDATA[
    protected abstract void configureTranslator(WhsDocumentRoutingTranslator _translator)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabels</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected int printLabels()
    {
        int labelCount;

        this.instantiateTranslator();

        if (labelLayout.EnableTemplateTranslator)
        {
            List labelsList = this.translateLabelTemplate();
            WhsDocumentRouting::printLabelPrintCommandsToPrinter(printer, labelsList);

            labelCount += labelsList.elements();
        }
        else
        {
            WhsLabelPrintCommand finalLabel = this.translateLabelLayout();
            WhsDocumentRouting::printLabelPrintCommandToPrinter(printer, finalLabel);

            labelCount++;
        }

        return labelCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateLabelTemplate</Name>
				<Source><![CDATA[
    private List translateLabelTemplate()
    {
        QueryRun queryRun = this.queryRunForLabelLayout();
        
        labelsFromTemplateTranslator = new List(Types::Class);

        WhsDocumentRoutingTemplateTranslator::newFromTemplateAndQueryRun(labelLayout.getLayoutSource(printer), queryRun)
            .withTranslator(translator)
            .translateTemplateToLabelCollector(this);

        return labelsFromTemplateTranslator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectLabel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void collectLabel(str _generatedLabel)
    {
        labelsFromTemplateTranslator.addEnd(
            new WhsLabelPrintCommand(
                this.determineWhsLabelPrintCommandTypeFromLayoutDefinitionType(),
                _generatedLabel));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunForLabelLayout</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected QueryRun queryRunForLabelLayout()
    {
        Query query = labelLayout.getLayoutQuery();
        
        this.configureQuery(query);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureQuery</Name>
				<Source><![CDATA[
    protected abstract void configureQuery(Query _query)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateLabelLayout</Name>
				<Source><![CDATA[
    private WhsLabelPrintCommand translateLabelLayout()
    {
        if (!labelLayout.LabelLayoutDataSource)
        {
            this.configureTranslatorForDefaultDataSource(translator);
        }
        else
        {
            QueryRun queryRun = this.queryRunForLabelLayout();
            if (!queryRun.next())
            {
                return null;
            }

            translator.withRecordsFromQueryRun(queryRun);
        }
        
        return this.translateToLabelPrintCommand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTranslatorForDefaultDataSource</Name>
				<Source><![CDATA[
    protected abstract void configureTranslatorForDefaultDataSource(WhsDocumentRoutingTranslator _translator)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateToLabelPrintCommand</Name>
				<Source><![CDATA[
    internal WhsLabelPrintCommand translateToLabelPrintCommand()
    {
        WHSZPL layoutSource = labelLayout.getLayoutSource(printer);
        WHSZPL outputLabel = translator.translate(layoutSource);
        
        return new WhsLabelPrintCommand(this.determineWhsLabelPrintCommandTypeFromLayoutDefinitionType(), outputLabel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineWhsLabelPrintCommandTypeFromLayoutDefinitionType</Name>
				<Source><![CDATA[
    private WhsLabelPrintCommandType determineWhsLabelPrintCommandTypeFromLayoutDefinitionType()
    {
        switch (labelLayout.DefinitionType)
        {
            case WHSLabelLayoutDefinitionType::ZPL:
                return WhsLabelPrintCommandType::ZPL;

            case WHSLabelLayoutDefinitionType::VariablesScript:
            case WHSLabelLayoutDefinitionType::Variables:
                return WhsLabelPrintCommandType::ExternalLabelPrintServiceCommand;
        }

        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>