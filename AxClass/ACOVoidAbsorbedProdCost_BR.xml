<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ACOVoidAbsorbedProdCost_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ACOVoidAbsorbedProdCost_BR</c> class absorbed product costs.
/// </summary>
class ACOVoidAbsorbedProdCost_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>absorbedProdCosts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the absorption cost journal status
    /// </summary>
    /// <param name="_voidMonthClosingDate">
    /// The closing date of the month
    /// </param>
    public void absorbedProdCosts(ACOVoidCostMonthClosingDate   _voidMonthClosingDate)
    {
        TransDate fromDate = mkDate(1, mthOfYr(_voidMonthClosingDate), year(_voidMonthClosingDate));
        TransDate toDate = endmth(fromDate);

        ttsbegin;
        boolean existsAbsorbedCostsInPeriod = this.existsAbsorbedCostsInPeriod(fromDate, toDate);

        if (existsAbsorbedCostsInPeriod)
        {
            Map settingsMap = new Map(Types::String, Types::String);
            settingsMap.insert(fieldStr(ACOProdCostTable_BR, CostStatus), any2Str(ACOCostStatus_BR::Cancelled));

            Query::update_recordset(settingsMap, this.absorbedProdCostQuery(fromDate, toDate), false, false);
        }

        this.voidNotLinkedProdCost(fromDate, toDate);
        ttscommit;
        
        info(existsAbsorbedCostsInPeriod ? "@GLS223615" : "@GLS223631");
    }

]]></Source>
			</Method>
			<Method>
				<Name>absorbedProdCostQuery</Name>
				<Source><![CDATA[
    private Query absorbedProdCostQuery(TransDate _fromDate, TransDate _toDate)
    {
        Query query = new Query();
        QueryBuildDataSource  qbds = query.addDataSource(tableNum(ACOProdCostTable_BR));
        qbds.addRange(fieldNum(ACOProdCostTable_BR, CostStatus)).value(strFmt(
            '((%1 != %2) && (%1 != %3))',
            fieldstr(ACOProdCostTable_BR, CostStatus),
            any2Int(ACOCostStatus_BR::Cancelled),
            any2Int(ACOCostStatus_BR::Posted)));
        qbds.addRange(fieldNum(ACOProdCostTable_BR, TransDate)).value(SysQuery::range(_fromDate, _toDate));

        qbds = qbds.addDataSource(tableNum(ACOProdOverHeadCostTrans_BR));
        qbds.relations(false);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(ACOProdCostTable_BR, Voucher), fieldNum(ACOProdOverHeadCostTrans_BR, Voucher));
        qbds.addLink(fieldNum(ACOProdCostTable_BR, ProdId), fieldNum(ACOProdOverHeadCostTrans_BR, ProdId));
        qbds.addRange(fieldNum(ACOProdOverHeadCostTrans_BR, TransDate)).value(SysQuery::range(_fromDate, _toDate));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAbsorbedCostsInPeriod</Name>
				<Source><![CDATA[
    private boolean existsAbsorbedCostsInPeriod(TransDate _fromDate, TransDate _toDate)
    {
        Query query= this.absorbedProdCostQuery(_fromDate, _toDate);

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(ACOProdCostTable_BR));
        qbds.addSelectionField(fieldNum(ACOProdCostTable_BR, RecId));
        qbds.firstOnly(true);

        QueryRun qr = new QueryRun(query);
        return qr.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidNotLinkedProdCost</Name>
				<Source><![CDATA[
    private void voidNotLinkedProdCost(TransDate _fromDate, TransDate _toDate)
    {
        ACOProdCostTable_BR         prodCostTable;
        ACOProdOverHeadCostTrans_BR prodOverHeadTrans;

        update_recordset prodCostTable
             setting CostStatus = ACOCostStatus_BR::Cancelled
            where prodCostTable.TransDate         >= _fromDate                     &&
                  prodCostTable.TransDate         <= _toDate                       &&
                  prodCostTable.CostStatus        == ACOCostStatus_BR::Created
            notexists join prodOverHeadTrans
            where   prodCostTable.ProdId            == prodOverHeadTrans.ProdId     &&
                    prodCostTable.Voucher           == prodOverHeadTrans.Voucher    &&
                    prodOverHeadTrans.TransDate     >= _fromDate                    &&
                    prodOverHeadTrans.TransDate     <= _toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00051, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ACOVoidAbsorbedProdCost_BR  voidAbsorbedProdCost    = new ACOVoidAbsorbedProdCost_BR();
        ACOChooseMonth_BR           chooseMonth             = new ACOChooseMonth_BR();

        if (chooseMonth.prompt())
        {
            voidAbsorbedProdCost.absorbedProdCosts(chooseMonth.parmCostMonthClosingDate());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>