<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GBTDataProvider_FA_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GBTDataProvider_FA_CN</c> class provides data for GBT generating FA xml.
/// </summary>
class GBTDataProvider_FA_CN extends GBTDataProvider_CN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAssetBalanceByAssetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>AssetSumCalc_Trans</c> for the given asset values.
    /// </summary>
    /// <param name="_assetId">
    /// The id of the asset.
    /// </param>
    /// <param name="_bookId">
    /// The book id to which the asset belongs.
    /// </param>
    /// <param name="_dateFrom">
    /// The start of the date range.
    /// </param>
    /// <param name="_dateTo">
    /// The end of the date range.
    /// </param>
    /// <returns>
    /// An instance of the <c>AssetSumCalc_Trans</c> class
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AssetSumCalc_Trans calcAssetBalanceByAssetTrans(
        AssetId _assetId,
        AssetBookId _bookId,
        TransDate _dateFrom = dateNull(),
        TransDate _dateTo = endFiscalCalendarPeriod.EndDate)
    {
        AssetSumCalc_Trans assetSumTrans = new AssetSumCalc_Trans();

        assetSumTrans = AssetSumCalc_Trans::newAssetPeriod(_assetId, _bookId, _dateFrom, _dateTo);

        return assetSumTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDepreciationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Depreciation method dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_DepreciationMethod), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillDepreciationMethod(System.Data.DataTable _dt)
    {
        AssetDepreciationProfile assetDepProfile;

        drc = _dt.get_Rows();
        while select Profile, Name, Method from assetDepProfile
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #Columnname_DepreciationMethodCode, assetDepProfile.Profile);
            this.setValue(newRow, #Columnname_DepreciationMethodName, assetDepProfile.Name);
            this.setValue(newRow, #Columnname_DepreciationFormula, this.getDepMethodFormular(assetDepProfile.Method));
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Fixed asset card dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_FixedAssetCard), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFixedAssetCard(System.Data.DataTable _dt)
    {
        AssetTable              assetTable;
        FiscalCalendarPeriod    tmpFiscalCalendarPeriod;
        RefRecId                fiscalPeriodRecId;
        int                     i;
        AssetBook               assetBookTmp;
        AssetBookTable          assetBookTableTmp;

        drc = _dt.get_Rows();
        i = 1;
        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            fiscalPeriodRecId = conPeek(fiscalPeriodRecIdCon, i);
            while select AssetId, Barcode, Location, Model, NameAlias from assetTable
                order by assetTable.NameAlias, assetTable.AssetId
                join Status, DisposalDate from assetBookTmp
                where assetBookTmp.AssetId  == assetTable.AssetId
                    join Name, EndDate from tmpFiscalCalendarPeriod
                        where ((tmpFiscalCalendarPeriod.EndDate < assetBookTmp.DisposalDate)
                                || (!assetBookTmp.DisposalDate
                                && (assetBookTmp.Status == AssetStatus::Closed ||
                                    assetBookTmp.Status == AssetStatus::Suspended ||
                                    assetBookTmp.Status == AssetStatus::Open ||
                                    assetBookTmp.Status == AssetStatus::NoAcquisition)))
                            && tmpFiscalCalendarPeriod.RecId == fiscalPeriodRecId
                    exists join assetBookTableTmp
                    where assetBookTableTmp.BookId == assetBookTmp.BookId
                       && assetBookTableTmp.CurrentOperationsTax == CurrentOperationsTax::Current
            {
                newRow = _dt.NewRow();
                this.setValue(newRow, #Columnname_FixedAssetCardNumber, assetTable.NameAlias);
                this.setValue(newRow, #Columnname_FiscalPeriod, tmpFiscalCalendarPeriod.Name);
                this.setValue(newRow, #Columnname_FixedAssetTagNumber, assetTable.Barcode);
                this.setValue(newRow, #Columnname_FixedAssetLocaltion, GBTFileGenerationHelper_CN::getAssetLocationIdByDate(assetTable, tmpFiscalCalendarPeriod.EndDate));
                this.setValue(newRow, #Columnname_FixedAssetModel, assetTable.Model);
                drc.Add(newRow);
            }

            i++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetCardInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Fixed asset card info dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_FixedAssetCardInfo), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFixedAssetCardInfo(System.Data.DataTable _dt)
    {
        AssetTable              assetTable;
        AssetBook               assetBookCurrent;
        AssetBook               assetBookTmp;
        AssetBookTable          assetBookTableTmp;
        AssetTrans              assetTranslatest;
        AssetTrans              depAssetTranslatest;
        AssetSumCalc_Trans      assetSumTrans;
        AssetId                 assetId;
        AssetBookId             bookId;
        FiscalCalendarPeriod    tmpFiscalCalendarPeriod;
        RefRecId                fiscalPeriodRecId;
        int                     i;
        AmountMST               acquisitionValue;

        LedgerDimensionDefaultAccount   acquisitionAccount;
        LedgerDimensionDefaultAccount   writeUpDownAccount;
        LedgerDimensionDefaultAccount   depreciationAccount;

        drc = _dt.get_Rows();
        i = 1;
        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            fiscalPeriodRecId = conPeek(fiscalPeriodRecIdCon, i);
            while select AssetId, AssetGroup, Name, UnitOfMeasure, Quantity, Condition, NameAlias from assetTable
                order by assetTable.NameAlias, assetTable.AssetId
                join Status, DisposalDate from assetBookTmp
                where assetBookTmp.AssetId  == assetTable.AssetId
                    join Name, EndDate from tmpFiscalCalendarPeriod
                        where ((tmpFiscalCalendarPeriod.EndDate < assetBookTmp.DisposalDate)
                                || (!assetBookTmp.DisposalDate
                                && (assetBookTmp.Status == AssetStatus::Closed ||
                                    assetBookTmp.Status == AssetStatus::Suspended ||
                                    assetBookTmp.Status == AssetStatus::Open ||
                                    assetBookTmp.Status == AssetStatus::NoAcquisition)))
                            && tmpFiscalCalendarPeriod.RecId == fiscalPeriodRecId
                    exists join assetBookTableTmp
                    where assetBookTableTmp.BookId == assetBookTmp.BookId
                       && assetBookTableTmp.CurrentOperationsTax == CurrentOperationsTax::Current
            {
                newRow  = _dt.NewRow();
                assetId = assetTable.AssetId;

                this.setValue(newRow, #Columnname_FixedAssetCardNumber, assetTable.NameAlias);
                this.setValue(newRow, #Columnname_FixedAssetGroupID, assetTable.AssetGroup);
                this.setValue(newRow, #Columnname_FixedAssetID, assetId);
                this.setValue(newRow, #Columnname_FixedAssetName, assetTable.Name);

                //gets current asset book with asset table's assetId
                assetBookCurrent    = this.getCurrentAssetBookByAssetId(assetId);
                bookId              = assetBookCurrent.BookId;

                this.setValue(newRow, #Columnname_FixedAssetAcquisitionDate, assetBookCurrent.AcquisitionDate);
                this.setValue(newRow, #Columnname_FiscalPeriod, tmpFiscalCalendarPeriod.Name);
                this.setValue(newRow, #Columnname_FixedAssetUnitOfMeasure, assetTable.UnitOfMeasure);
                this.setValue(newRow, #Columnname_FixedAssetQuantity, assetTable.Quantity);

                this.setValue(newRow, #Columnname_FixedAssetTransactionType, GBTFileGenerationHelper_CN::getAssetChangeTypeCode(AssetTransType::Acquisition));
                this.setValue(newRow, #Columnname_FixedAssetDepreciationMethodCode, assetBookCurrent.DepreciationProfile);
                this.setValue(newRow, #Columnname_FixedAssetStatus, assetTable.Condition);
                this.setValue(newRow, #Columnname_FixedAssetLifeMonths, assetBookCurrent.LifeTime);
                this.setValue(newRow, #Columnname_FixedAssetDepreciatedMonths, GBTFileGenerationHelper_CN::calcDepreciatedMonths(assetBookCurrent.DepreciationStartDate, tmpFiscalCalendarPeriod.EndDate));
                this.setValue(newRow, #Columnname_AccountingCurrency, companyCurrencyName);

                //calculates fixed asset balance
                assetSumTrans = this.calcAssetBalanceByAssetTrans(assetId, bookId, dateNull(), tmpFiscalCalendarPeriod.EndDate);
                acquisitionValue =  assetSumTrans.acquisitionValue();
                this.setValue(newRow, #Columnname_FixedAssetAcquisitionValue, acquisitionValue);
                this.setValue(newRow, #Columnname_FixedAssetDepreciatedValue, abs(assetSumTrans.depreciationValue()));
                this.setValue(newRow, #Columnname_FixedAssetNetBookValue, assetSumTrans.netBookValue());
                this.setValue(newRow, #Columnname_FixedAssetWritedownValue, assetSumTrans.writeUpDownAdjValue());

                this.setValue(newRow, #Columnname_FixedAssetSalvageRate, GBTDataElementTypeInfo_CN::trimTrailingZeros(num2Str((acquisitionValue ? assetBookCurrent.ScrapValue / acquisitionValue : 0), 0, 2, 1, 0)));
                this.setValue(newRow, #Columnname_FixedAssetSalvageVale, assetBookCurrent.ScrapValue);

                //gets lastest depreciation asset trans
                select firstOnly AmountMST from depAssetTranslatest
                    order by RecId desc
                    where depAssetTranslatest.AssetId == assetId
                        && depAssetTranslatest.BookId == bookId
                        && depAssetTranslatest.TransType == AssetTransType::Depreciation
                        && depAssetTranslatest.TransDate <= tmpFiscalCalendarPeriod.EndDate
                        && depassettranslatest.TransDate >= tmpFiscalCalendarPeriod.StartDate;

                //Fixed asset depreciation rate
                this.setValue(newRow, #Columnname_FixedAssetDepreciationRate, GBTDataElementTypeInfo_CN::trimTrailingZeros(num2Str((acquisitionValue ? abs(depAssetTranslatest.AmountMST) / acquisitionValue : 0), 0, 4, 1, 0)));
                this.setValue(newRow, #Columnname_FixedAssetDepreciationValue, abs(depAssetTranslatest.AmountMST));

                this.setValue(newRow, #Columnname_FixedAssetConsumptionUnit, assetBookCurrent.ConsumptionUnitId);
                this.setValue(newRow, #Columnname_EstimatedConsumption, assetBookCurrent.ConsumptionQtyEstimated);
                this.setValue(newRow, #Columnname_PostedConsumption, assetBookCurrent.consumptionQtyPosted());

                acquisitionAccount = AssetLedgerAccounts::assetLedgerDimension(
                    assetId,
                    bookId,
                    AssetTransType::Acquisition,
                    assetTable.postingProfile(bookId));
                writeUpDownAccount = AssetLedgerAccounts::assetLedgerDimension(
                    assetId,
                    bookId,
                    AssetTransType::WriteDownAdj,
                    assetTable.postingProfile(bookId));
                depreciationAccount = AssetLedgerAccounts::assetLedgerDimension(
                    assetId,
                    bookId,
                    AssetTransType::Depreciation,
                    assetTable.postingProfile(bookId));

                this.setValue(newRow, #Columnname_LedgerAccountForAcquisition, LedgerDimensionFacade::getMainAccountFromLedgerDimension(acquisitionAccount).MainAccountId);
                this.setValue(newRow, #Columnname_LedgerAccountForWriteUpDown, LedgerDimensionFacade::getMainAccountFromLedgerDimension(writeUpDownAccount).MainAccountId);
                this.setValue(newRow, #Columnname_LedgerAccountForDepreciation, LedgerDimensionFacade::getMainAccountFromLedgerDimension(depreciationAccount).MainAccountId);
                drc.Add(newRow);
            }
            i++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetChangeHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Fixed asset change history dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_FixedAssetChangeHistory), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFixedAssetChangeHistory(System.Data.DataTable _dt)
    {
        AssetChangesHistory ach;
        AssetTable          assetTable;
        ReasonTableRef      reasonTableRef;

        AssetLocationTransferHistory_CN assetLocationTransferHistoryCN;

        int i = 1;

        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            FiscalCalendarPeriod fiscalCalendarPeriodLocal = FiscalCalendarPeriod::find(conPeek(fiscalPeriodRecIdCon, i));

            int         transactionNumber = 1;
            utcDateTime fcpEndDateTime = DateTimeUtil::newDateTime(fiscalCalendarPeriodLocal.EndDate, timeMax());
            utcDateTime fcpStartDateTime = DateTimeUtil::newDateTime(fiscalCalendarPeriodLocal.StartDate, 0);

            drc = _dt.get_Rows();

            while select Assetid, ReasonRefRecId, ChangeDateTime, OldValue, NewValue, FieldChanged from ach
                where ach.ChangeDateTime <= fcpEndDateTime
                    && ach.ChangeDateTime >= fcpStartDateTime
                outer join Name, Barcode, NameAlias from assetTable
                    where assetTable.AssetId == ach.Assetid
                outer join Reason, ReasonComment from reasonTableRef
                    where reasonTableRef.RecId == ach.ReasonRefRecId
            {
                newRow = _dt.NewRow();
                this.setValue(newRow, #Columnname_TransactionNumber, transactionNumber);
                this.setValue(newRow, #Columnname_FixedAssetChangeDate, ach.ChangeDateTime);
                this.setValue(newRow, #Columnname_FiscalPeriod, fiscalCalendarPeriodLocal.Name);
                this.setValue(newRow, #Columnname_FixedAssetCardNumber, assetTable.NameAlias);
                this.setValue(newRow, #Columnname_FixedAssetID, ach.Assetid);
                this.setValue(newRow, #Columnname_FixedAssetName, assetTable.Name);
                this.setValue(newRow, #Columnname_FixedAssetTransactionTypeCode, ach.FieldChanged);
                this.setValue(newRow, #Columnname_FixedAssetTagNumber, assetTable.Barcode);
                this.setValue(newRow, #Columnname_ValueBeforeTheTransaction, ach.OldValue);
                this.setValue(newRow, #Columnname_ValueAfterTransaction, ach.NewValue);
                this.setValue(newRow, #Columnname_Reason, reasonTableRef.Reason + ', ' + reasonTableRef.ReasonComment);
                drc.Add(newRow);

                transactionNumber++;
            }

            while select assetLocationTransferHistoryCN
                where assetLocationTransferHistoryCN.TransferDate <= fiscalCalendarPeriodLocal.EndDate
                    && assetLocationTransferHistoryCN.TransferDate >= fiscalCalendarPeriodLocal.StartDate
                outer join Name, Barcode, NameAlias from assetTable
                    where assetTable.AssetId == assetLocationTransferHistoryCN.AssetId
            {
                newRow = _dt.NewRow();
                this.setValue(newRow, #Columnname_TransactionNumber, transactionNumber);
                this.setValue(newRow, #Columnname_FixedAssetChangeDate, assetLocationTransferHistoryCN.TransferDate);
                this.setValue(newRow, #Columnname_FiscalPeriod, fiscalCalendarPeriodLocal.Name);
                this.setValue(newRow, #Columnname_FixedAssetCardNumber, assetTable.NameAlias);
                this.setValue(newRow, #Columnname_FixedAssetID, assetLocationTransferHistoryCN.AssetId);
                this.setValue(newRow, #Columnname_FixedAssetName, assetTable.Name);
                this.setValue(newRow, #Columnname_FixedAssetTransactionTypeCode, GBTFileGenerationHelper_CN::getAssetChangeTypeCode(#LocationChangeTypeValue));
                this.setValue(newRow, #Columnname_FixedAssetTagNumber, assetTable.Barcode);
                this.setValue(newRow, #Columnname_ValueBeforeTheTransaction, assetLocationTransferHistoryCN.FromLocation);
                this.setValue(newRow, #Columnname_ValueAfterTransaction, assetLocationTransferHistoryCN.ToLocation);
                this.setValue(newRow, #Columnname_Reason, assetLocationTransferHistoryCN.TransferComment);
                drc.Add(newRow);

                transactionNumber++;
            }

            i++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetChangeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Fixed asset change type dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_FixedAssetChangeType), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFixedAssetChangeType(System.Data.DataTable _dt)
    {
        DictField  dictField;

        drc = _dt.get_Rows();

        //BD01: 资产购入
        newRow = _dt.NewRow();
        this.setValue(newRow, #Columnname_FixedAssetTransactionTypeCode, #FixedAssetTransactionTypeCode1);
        this.setValue(newRow, #Columnname_FixedAssetTransactionTypeName, #FixedAssetTransactionTypeName1);
        drc.Add(newRow);

        //BD02: 资产处置
        newRow = _dt.NewRow();
        this.setValue(newRow, #Columnname_FixedAssetTransactionTypeCode, #FixedAssetTransactionTypeCode2);
        this.setValue(newRow, #Columnname_FixedAssetTransactionTypeName, #FixedAssetTransactionTypeName2);
        drc.Add(newRow);

        //BD03: 资产减值
        newRow = _dt.NewRow();
        this.setValue(newRow, #Columnname_FixedAssetTransactionTypeCode, #FixedAssetTransactionTypeCode3);
        this.setValue(newRow, #Columnname_FixedAssetTransactionTypeName, #FixedAssetTransactionTypeName3);
        drc.Add(newRow);

        //BD04: 资产重估
        newRow = _dt.NewRow();
        this.setValue(newRow, #Columnname_FixedAssetTransactionTypeCode, #FixedAssetTransactionTypeCode4);
        this.setValue(newRow, #Columnname_FixedAssetTransactionTypeName, #FixedAssetTransactionTypeName4);
        drc.Add(newRow);

        //BD05: 资产原值变更
        newRow = _dt.NewRow();
        this.setValue(newRow, #Columnname_FixedAssetTransactionTypeCode, #FixedAssetTransactionTypeCode5);
        this.setValue(newRow, #Columnname_FixedAssetTransactionTypeName, #FixedAssetTransactionTypeName5);
        drc.Add(newRow);

        //BD06: 资产位置变更
        newRow = _dt.NewRow();
        this.setValue(newRow, #Columnname_FixedAssetTransactionTypeCode, #FixedAssetTransactionTypeCode6);
        this.setValue(newRow, #Columnname_FixedAssetTransactionTypeName, #FixedAssetTransactionTypeName6);
        drc.Add(newRow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Fixed asset status dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_FixedAssetStatus), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFixedAssetCondition(System.Data.DataTable _dt)
    {
        AssetCondition assetCondition;

        drc = _dt.get_Rows();
        while select * from assetCondition
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #Columnname_FixedAssetStatusCode, assetCondition.Condition);
            this.setValue(newRow, #Columnname_FixedAssetStatusName, assetCondition.Description);
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetDisposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Fixed asset disposal dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_FixedAssetDisposal), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFixedAssetDisposal(System.Data.DataTable _dt)
    {
        AssetTable              assetTable;
        FiscalCalendarPeriod    fiscalCalendarPeriodTmp;
        RefRecId                fiscalPeriodRecId;
        int                     i;
        AssetBook               assetBookTmp;
        AssetBookTable          assetBookTableTmp;

        drc = _dt.get_Rows();
        i = 1;
        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            fiscalPeriodRecId = conPeek(fiscalPeriodRecIdCon, i);
            while select AssetId, Name, Barcode, Location, Model, Quantity, NameAlias from assetTable
                order by assetTable.NameAlias, assetTable.AssetId
                join Status, DisposalDate, BookId, ScrapValue from assetBookTmp
                    where assetBookTmp.AssetId  == assetTable.AssetId
                join Name, StartDate, EndDate from fiscalCalendarPeriodTmp
                    where fiscalCalendarPeriodTmp.RecId == fiscalPeriodRecId
                        && (assetBookTmp.DisposalDate >= fiscalCalendarPeriodTmp.StartDate
                            && assetBookTmp.DisposalDate <= fiscalCalendarPeriodTmp.EndDate)
                exists join assetBookTableTmp
                    where assetBookTableTmp.BookId == assetBookTmp.BookId
                        && assetBookTableTmp.CurrentOperationsTax == CurrentOperationsTax::Current
            {
                newRow = _dt.NewRow();

                AssetTrans  assetTransDisposal = GBTFileGenerationHelper_CN::findAssetDisposalTrans(assetTable.AssetId, assetBookTmp.BookId, assetBookTmp.DisposalDate);

                this.setValue(newRow, #Columnname_DisposalNumber, assetTransDisposal.Voucher);
                this.setValue(newRow, #Columnname_FixedAssetTransactionDate, assetTransDisposal.TransDate);
                this.setValue(newRow, #Columnname_FiscalPeriod, fiscalCalendarPeriodTmp.Name);
                this.setValue(newRow, #Columnname_DisposalTransactionType, GBTFileGenerationHelper_CN::getAssetChangeTypeCode(assetTransDisposal.TransType));
                this.setValue(newRow, #Columnname_FixedAssetCardNumber, assetTable.NameAlias);
                this.setValue(newRow, #Columnname_FixedAssetName, assetTable.Name);
                this.setValue(newRow, #Columnname_FixedAssetID, assetTable.AssetId);
                this.setValue(newRow, #Columnname_DeductedQuantity, assetTable.Quantity);
                this.setValue(newRow, #Columnname_WriteUpDownSalvageValue, assetBookTmp.ScrapValue);
                this.setValue(newRow, #Columnname_DisposalReason, ReasonTableRef::find(assetTransDisposal.ReasonRefRecId).Reason);

                AmountMST deductedValue = AssetTrans::amountMSTPerDateTransTypes(
                    assetTable.AssetId,
                    assetBookTmp.BookId,
                    [AssetTransType::AcqAdjPriorYears,
                        AssetTransType::AcqAdjThisYear,
                        AssetTransType::AcqPriorYears,
                        AssetTransType::AcqThisYear],
                    assetTransDisposal.TransDate,
                    assetTransDisposal.TransDate);

                AmountMST depreciatedValue = AssetTrans::amountMSTPerDateTransTypes(
                    assetTable.AssetId,
                    assetBookTmp.BookId,
                    [AssetTransType::DepAdjPriorYears,
                        AssetTransType::DepAdjThisYear,
                        AssetTransType::DepPriorYears,
                        AssetTransType::DepThisYear,
                        AssetTransType::ExtraDepPriorYears,
                        AssetTransType::ExtraDepThisYear],
                    assetTransDisposal.TransDate,
                    assetTransDisposal.TransDate);

                AmountMST writeUpDownValue = AssetTrans::amountMSTPerDateTransTypes(
                    assetTable.AssetId,
                    assetBookTmp.BookId,
                    [AssetTransType::WriteUpAdjPriorYears,
                        AssetTransType::WriteUpAdjThisYear,
                        AssetTransType::WriteDownAdjPriorYears,
                        AssetTransType::WriteDownAdjThisYear],
                    assetTransDisposal.TransDate,
                    assetTransDisposal.TransDate);

                AmountMST profitLoss = AssetTrans::amountMSTPerDateTransTypes(
                    assetTable.AssetId,
                    assetBookTmp.BookId,
                    [AssetTransType::ProfitLoss],
                    assetTransDisposal.TransDate,
                    assetTransDisposal.TransDate);

                this.setValue(newRow, #Columnname_DeductedValue, abs(deductedValue));
                this.setValue(newRow, #Columnname_DepreciatedValue, depreciatedValue);
                this.setValue(newRow, #Columnname_WriteUpDownValue, writeUpDownValue);
                if (profitLoss >= 0)
                {
                    this.setValue(newRow, #Columnname_DisposalValue, profitLoss);
                    this.setValue(newRow, #Columnname_DisposalCost, #Real_Zero);
                }
                else
                {
                    this.setValue(newRow, #Columnname_DisposalValue, #Real_Zero);
                    this.setValue(newRow, #Columnname_DisposalCost, profitLoss);
                }
                drc.Add(newRow);
            }
            i++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetDisposalAddition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Fixed asset disposal addition dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_FixedAssetDisposalAddition), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFixedAssetDisposalAddition(System.Data.DataTable _dt)
    {
        AssetTable              assetTable;
        FiscalCalendarPeriod    fiscalCalendarPeriodTmp;
        RefRecId                fiscalPeriodRecId;
        int                     i;
        AssetBook               assetBookTmp;
        AssetBookTable          assetBookTableTmp;
        AssetTrans              assetTrans;

        drc = _dt.get_Rows();
        i = 1;
        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            fiscalPeriodRecId = conPeek(fiscalPeriodRecIdCon, i);
            while select AssetId, Barcode, Location, Model, NameAlias from assetTable
                order by assetTable.NameAlias, assetTable.AssetId
                join Status, DisposalDate, BookId from assetBookTmp
                    where assetBookTmp.AssetId  == assetTable.AssetId
                join Name from fiscalCalendarPeriodTmp
                    where fiscalCalendarPeriodTmp.RecId == fiscalPeriodRecId
                        && (assetBookTmp.DisposalDate >= fiscalCalendarPeriodTmp.StartDate
                            && assetBookTmp.DisposalDate <= fiscalCalendarPeriodTmp.EndDate)
                exists join assetBookTableTmp
                    where assetBookTableTmp.BookId == assetBookTmp.BookId
                        && assetBookTableTmp.CurrentOperationsTax == CurrentOperationsTax::Current
            {
                newRow = _dt.NewRow();
                AssetTrans  assetTransDisposal = GBTFileGenerationHelper_CN::findAssetDisposalTrans(assetTable.AssetId, assetBookTmp.BookId, assetBookTmp.DisposalDate);
                this.setValue(newRow, #Columnname_DisposalNumber, assetTransDisposal.Voucher);
                this.setValue(newRow, #Columnname_FixedAssetCardNumber, assetTable.NameAlias);
                this.setValue(newRow, #Columnname_FiscalPeriod, fiscalCalendarPeriodTmp.Name);
                this.setValue(newRow, #Columnname_FixedAssetTagNumber, assetTable.Barcode);
                drc.Add(newRow);
            }

            i++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Fixed asset group dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_FixedAssetGroup), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFixedAssetGroup(System.Data.DataTable _dt)
    {
        AssetGroup  assetGroup;

        drc = _dt.get_Rows();
        while select GroupId, Name from assetGroup
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #Columnname_FormatOfFixedAssetGroupCode, GBTParameters.FixedAssetGroupCodeFormat);
            this.setValue(newRow, #Columnname_FixedAssetGroupCode, assetGroup.GroupId);
            this.setValue(newRow, #Columnname_FixedAssetGroupName, assetGroup.Name);
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetUsage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Fixed asset usage dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_FixedAssetUsage), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFixedAssetUsage(System.Data.DataTable _dt)
    {
        FiscalCalendarPeriod        tmpFiscalCalendarPeriod;
        RefRecId                    fiscalPeriodRecId;
        int                         i;
        AssetTable                  assetTable;
        AssetBook                   assetBookTmp;
        AssetBookTable              assetBookTableTmp;
        AssetAllocationRule_CN      assetAllocationRule;
        AssetAllocationRuleLine_CN  assetAllocationRuleline;
        AssetLedgerAccounts         assetLedgerAccountsDep, assetLedgerAccountsExDep;

        drc = _dt.get_Rows();
        i = 1;
        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            fiscalPeriodRecId = conPeek(fiscalPeriodRecIdCon, i);
            while select AssetId, Barcode, Location, Department, NameAlias from assetTable
                order by assetTable.NameAlias, assetTable.AssetId
                join BookId, PostingProfile, Status, DisposalDate from assetBookTmp
                where assetBookTmp.AssetId  == assetTable.AssetId
                    join Name from tmpFiscalCalendarPeriod
                        where ((tmpFiscalCalendarPeriod.EndDate < assetBookTmp.DisposalDate)
                                || (!assetBookTmp.DisposalDate
                                && (assetBookTmp.Status == AssetStatus::Closed ||
                                    assetBookTmp.Status == AssetStatus::Suspended ||
                                    assetBookTmp.Status == AssetStatus::Open ||
                                    assetBookTmp.Status == AssetStatus::NoAcquisition)))
                            && tmpFiscalCalendarPeriod.RecId == fiscalPeriodRecId
                    exists join assetBookTableTmp
                    where assetBookTableTmp.BookId == assetBookTmp.BookId
                       && assetBookTableTmp.CurrentOperationsTax == CurrentOperationsTax::Current
            {
                assetLedgerAccountsDep = AssetLedgerAccounts::findForAllocationRule_CN(
                    assetTable.AssetId,
                    assetBookTmp.BookId,
                    AssetTransType::Depreciation,
                    assetBookTmp.PostingProfile);
                assetLedgerAccountsExDep = AssetLedgerAccounts::findForAllocationRule_CN(
                    assetTable.AssetId,
                    assetBookTmp.BookId,
                    AssetTransType::ExtraordinaryDepreciation,
                    assetBookTmp.PostingProfile);

                while select LocalizedValue, Percentage from assetAllocationRuleline
                    order by assetAllocationRuleline.AssetAllocationRule
                    where assetAllocationRuleline.AssetAllocationRule == assetLedgerAccountsDep.AssetAllocationRule
                        || assetAllocationRuleline.AssetAllocationRule == assetLedgerAccountsExDep.AssetAllocationRule
                    exists join assetAllocationRule
                        where assetAllocationRule.RecId == assetAllocationRuleLine.AssetAllocationRule
                {
                    newRow = _dt.NewRow();
                    this.setValue(newRow, #Columnname_FixedAssetCardNumber, assetTable.NameAlias);
                    this.setValue(newRow, #Columnname_FixedAssetTagNumber, assetTable.Barcode);
                    this.setValue(newRow, #Columnname_FiscalPeriod, tmpFiscalCalendarPeriod.Name);
                    this.setValue(newRow, #Columnname_Department, assetAllocationRuleline.LocalizedValue);
                    this.setValue(newRow, #Columnname_ProportionOfDepreciatOnAlloation, assetAllocationRuleline.Percentage / 100);
                    drc.Add(newRow);
                }
            }
            i++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPostingProfileOfFixedAssets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Posting profile of fixed assets dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_PostingProfileOfFixedAssets), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPostingProfileOfFixedAssets(System.Data.DataTable _dt)
    {
        drc     = _dt.get_Rows();
        newRow  = _dt.NewRow();

        this.setValue(newRow, #Columnname_FAAcquisitionAcct, LedgerDimensionFacade::getMainAccountFromLedgerDimension(GBTParameters.AcquisitionLedgerDimension).MainAccountId);
        this.setValue(newRow, #Columnname_FADisposalAcct, LedgerDimensionFacade::getMainAccountFromLedgerDimension(GBTParameters.DisposalLedgerDimension).MainAccountId);
        this.setValue(newRow, #Columnname_FADepreciationAcct, LedgerDimensionFacade::getMainAccountFromLedgerDimension(GBTParameters.DepreciationLedgerDimension).MainAccountId);
        drc.Add(newRow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentAssetBookByAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// For the current asset, returns the first asset book having a current posting layer.
    /// </summary>
    /// <param name="_assetId">
    /// A AssetId value that is used for select current asset book.
    /// </param>
    /// <returns>
    /// An asset book in the current posting layer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AssetBook getCurrentAssetBookByAssetId(AssetId   _assetId)
    {
        AssetBook      assetBook;
        AssetBookTable assetBookTable;

        select firstonly assetBook
            where assetBook.AssetId == _assetId
            exists join assetBookTable
                where assetBookTable.BookId == assetBook.BookId
                   && assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current;

        return assetBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepMethodFormular</Name>
				<Source><![CDATA[
    /// <summary>
    /// For the current Depreciation method, returns the formula.
    /// </summary>
    /// <param name="_depMethod">
    /// The Depreciation method which is used to find the Formula.
    /// </param>
    /// <returns>
    /// The formula for the given Depreciation method.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str getDepMethodFormular(AssetDepreciationMethod _depMethod)
    {
        str formular;

        switch (_depMethod)
        {
            case AssetDepreciationMethod::StraightLine:
                //Monthly depreciation amount = Acquisition amount * (1- expected scrap value %) / Service life
                formular = "@GLS222938";
                break;

            case AssetDepreciationMethod::ReducingBalance:
                //Monthly depreciation amount = Asset net book value at year beginning * reduce rate% / 12
                formular = "@GLS222949";
                break;

            case AssetDepreciationMethod::Manual:
                //Manual
                formular = '';
                break;

            case AssetDepreciationMethod::Factor:
                //Monthly depreciation amount = (Acquisition amount * (1- expected scrap value %) / Service life) * (Interval number Exp Factor)
                formular = "@GLS222960";
                break;

            case AssetDepreciationMethod::Consumption:
                //Monthly depreciation amount = Quantity * Asset acquisition amount / Estimated consumption
                formular = "@GLS222971";
                break;
            case AssetDepreciationMethod::StraightLineLifeRemaining:
                //Monthly depreciation amount = Acquisition amount * (1- expected scrap value %) / Service life
                formular = "@GLS222938";
                break;

            case AssetDepreciationMethod::ReducingBalance200:
                //Monthly depreciation amount = Asset net book value at year beginning * 200%  / (Service life * 12)
                formular = "@GLS222982";
                break;

            case AssetDepreciationMethod::ReducingBalance175:
                //Monthly depreciation amount = Asset net book value at year beginning * 175%  / (Service life * 12)
                formular = "@GLS222993";
                break;

            case AssetDepreciationMethod::ReducingBalance150:
                //Monthly depreciation amount = Asset net book value at year beginning * 150%  / (Service life * 12)
                formular = "@GLS223004";
                break;

            case AssetDepreciationMethod::ReducingBalance125:
                //Monthly depreciation amount = Asset net book value at year beginning * 125%  / (Service life * 12)
                formular = "@GLS223015";
                break;

            case AssetDepreciationMethod::SumYearDigits_CN:
                //standard formula
                formular = "@GLS223022";
                break;

            case AssetDepreciationMethod::DoubleReduceBalance_CN:
                //standard formula
                formular = "@GLS223022";
                break;

            default:
                formular = '';
                break;
        }

        return formular;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>