<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMDesignerBOMVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>BOMDesignerBOMVersion</c>
/// </summary>
class PmfFormCtrl_BOMDesignerBOMVersion
    extends PmfFormCtrl
{
    ItemId curItemId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {            
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, GridVersion)),
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, BOMVersion_PmfYieldPct)),
                methodstr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Visible);
            
        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, GridVersion)),
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, BOMVersion_PmfBatchSize)),
                methodstr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Visible);
            
        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, GridVersion)),
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, BOMVersion_PmfBatchUnit)),
                methodstr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, GridVersion)),
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, BOMVersion_BOMNum)),
                methodstr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@SYS672");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, ButtonGroup)),
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, CreateBOM)),
                methodstr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PRO240");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, ButtonGroup)),
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, CreateBOM)),
                methodstr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Text,
                "@PRO242");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, GridVersion)),
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, BOMVersion_FromQty)),
                methodstr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO1978");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, GridVersion)),
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, BOMVersion_PmfFormulaChangeDate)),
                methodstr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, GridVersion)),
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, BOMVersion_PmfCoByVarAllow)),
                methodstr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, GridVersion)),
                formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, BOMVersion_PmfFormulaMultiple)),
                methodstr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        if (this.isCatchWeightEnabled())
        {
            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, GridVersion)),
                    formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, BOMVersion_PdsCWSize)),
                    methodstr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, GridVersion)),
                    formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, BOMVersion_PdsCWFromQty)),
                    methodstr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, GridVersion)),
                    formRun.design().controlName(formControlStr(BOMDesignerBOMVersion, BOMVersion_PdsCWUnit)),
                    methodstr(PmfFormCtrl_BOMDesignerBOMVersion, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the version is a formula.
    /// </summary>
    /// <returns>
    /// True if the version is a formula; otherwise false.
    /// </returns>
    public boolean isFormulaEnabled()
    {
        boolean     ret = false;

        if (InventTable::find(curItemId).isFormulaAllowed())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        PdsCWFormCtrl   cwFormCtrl;

        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);

        if (this.isCatchWeightEnabled())
        {
            cwFormCtrl = PdsCWFormCtrl_Std::construct();

            cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                [[fieldnum(BOMVersion,PmfBatchSize),
                    fieldnum(BOMVersion,PdsCWSize),
                    false],
                    [fieldnum(BOMVersion,FromQty),
                    fieldnum(BOMVersion,PdsCWFromQty),
                    false]]
                ));
            cwFormCtrl.parmItemFieldId(fieldnum(BOMVersion,ItemId));
            cwFormCtrl.parmUnitMethodStr(tablemethodstr(BOMVersion,pdsCWUnitId));

            this.addSubFormCtrl(cwFormCtrl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = curItemId)
    {
        curItemId = _itemId;
        return curItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called before the actual run method of the form element
    /// </summary>
    public void runPre()
    {
        if (this.isFormulaEnabled())
        {
            this.parmFormRun().design().caption("@PRO85");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMDesignerBOMVersion construct()
    {
        return new PmfFormCtrl_BOMDesignerBOMVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_formRun">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_BOMDesignerBOMVersion newFromForm(FormRun _formRun)
    {
        PmfFormCtrl_BOMDesignerBOMVersion frmCtrl;

        frmCtrl = PmfFormCtrl_BOMDesignerBOMVersion::construct();
        frmCtrl.parmFormRun(_formRun);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>