<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTablePhysicalDimensionsImplementation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTablePhysicalDimensionsImplementation</c> class provides access to physical dimensions
/// retrieved from the <c>InventTable</c> table.
/// </summary>
internal final class InventTablePhysicalDimensionsImplementation implements EcoResIPhysicalDimensions
{
    private InventTable             inventTable;
    private InventHandlingUnitId    handlingUnitId;
    private InventParameters        inventParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(EcoResProductKey _productKey)
    {
        inventTable = _productKey.instanceItemKey().inventTable();
        handlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId);
        inventParameters = InventParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPhysicalUnitSymbol</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public UnitOfMeasureSymbol parmPhysicalUnitSymbol()
    {
        return handlingUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWeight</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public Weight parmWeight()
    {
        return inventTable.grossWeight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMassUnitSymbol</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public UnitOfMeasureSymbol parmMassUnitSymbol()
    {
        return inventParameters.MassUnitSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWidth</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventWidth parmWidth()
    {
        return inventTable.grossWidth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDepth</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventDepth parmDepth()
    {
        return inventTable.grossDepth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeight</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventHeight parmHeight()
    {
        return inventTable.grossHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLengthUnitSymbol</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public UnitOfMeasureSymbol parmLengthUnitSymbol()
    {
        return inventParameters.LengthUnitSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVolume</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public Volume parmVolume()
    {
        return inventTable.grossVolume();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVolumeUnitSymbol</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public UnitOfMeasureSymbol parmVolumeUnitSymbol()
    {
        return inventParameters.VolumeUnitSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a physical dimension object based on a product key object.
    /// </summary>
    /// <param name = "_productKey">
    /// A <c>EcoResProductKey</c> object.
    /// </param>
    /// <returns>
    /// The <c>EcoResIPhysicalDimensions</c> object.
    /// </returns>
    [Hookable(false)]
    static internal EcoResIPhysicalDimensions createInstance(EcoResProductKey _productKey)
    {
        return new InventTablePhysicalDimensionsImplementation(_productKey);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>