<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsOnlineCountingServer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WmsOnlineCountingServer
{
    TmpWMSOnlineCounting    tmpWMSOnlineCounting;

    NumberSeq               numberSeq;
    InventJournalVoucherId  voucherId;

    LedgerVoucher           ledgerVoucher;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCostAmount</Name>
				<Source><![CDATA[
    private CostAmount calcCostAmount(TmpWMSOnlineCounting _tmpWMSOnlineCounting)
    {
        InventPriceMap      inventPriceMap      = InventTable::find(_tmpWMSOnlineCounting.ItemId).inventCostPriceMap(_tmpWMSOnlineCounting.InventDimId);
        InventQty           quantity            = _tmpWMSOnlineCounting.QtyCounted - _tmpWMSOnlineCounting.QtyOnHand;

        return PriceDisc::price2Amount(inventPriceMap.price(),
                                       inventPriceMap.priceUnit(),
                                       0,
                                       quantity,
                                       quantity,
                                       inventPriceMap.markup(),
                                       0,
                                       '',
                                       0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInventTransOriginFieldValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the <c>InventTransOrigin</c> field of all records in the <c>TmpWMSOnlineCounting</c> table.
    /// </summary>
    /// <remarks>
    ///    Should be called if update of the <c>TmpWMSOnlineCounting</c> table has failed.
    /// </remarks>
    private void clearInventTransOriginFieldValues()
    {
        ttsbegin;

        update_recordset tmpWMSOnlineCounting
            setting InventTransOrigin   = 0
            where   tmpWMSOnlineCounting.InventTransOrigin  != 0;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMovement</Name>
				<Source><![CDATA[
    internal InventMov_Vir_Counting getMovement(TmpWMSOnlineCounting _tmpWMSOnlineCounting)
    {
        InventQty quantity = _tmpWMSOnlineCounting.QtyCounted - _tmpWMSOnlineCounting.QtyOnHand;
        InventQty catchWeightQuantity = _tmpWMSOnlineCounting.PdsCWQtyCounted - _tmpWMSOnlineCounting.PdsCWQtyOnHand;

        InventMov_Vir_Counting inventMovCounting = this.createMovement(_tmpWMSOnlineCounting, quantity, catchWeightQuantity);
        inventMovCounting.parmCountingReasonCode(_tmpWMSOnlineCounting.CountingReasonCode);

        return inventMovCounting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventMov_Vir_Counting</c> class.
    /// </summary>
    /// <param name = "_tmpWMSOnlineCounting">A <c>TmpWMSOnlineCounting</c> record.</param>
    /// <param name = "_quantity">The quantity for which the class is instantiated.</param>
    /// <param name = "_catchWeightQuantity">The catch weight quantity for which the class is instantiated.</param>
    /// <returns>An instance of the <c>InventMov_Vir_Counting</c> class.</returns>
    protected InventMov_Vir_Counting createMovement(TmpWMSOnlineCounting _tmpWMSOnlineCounting, InventQty _quantity, InventQty _catchWeightQuantity)
    {
        return InventMov_Vir_Counting::newParameters(
                _tmpWMSOnlineCounting.InventTransOrigin,
                _tmpWMSOnlineCounting.ItemId,
                _tmpWMSOnlineCounting.InventDimId,
                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                _quantity,
                _catchWeightQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVoucher</Name>
				<Source><![CDATA[
    private void initVoucher(TmpWMSOnlineCounting _tmpWMSOnlineCounting)
    {
        TransactionTxt transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(LedgerTransTxt::InventJournalCount);
        transactionTxt.setDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        transactionTxt.setVoucher(voucherId);

        TransactionTextContext::setTransactionTextContext(transactionTxt, LedgerTransTxt::InventJournalCount, _tmpWMSOnlineCounting);

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                        SysModule::Invent,
                                                        numberSeq.parmVoucherSequenceCode());
        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucherId,
                                                                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                    SysModule::Invent,
                                                                    LedgerTransType::Invent);
        ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
        ledgerVoucher.addVoucher(ledgerVoucherObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPhysical</Name>
				<Source><![CDATA[
    private void postPhysical(InventMov_Vir_Counting_OwnerEnabled _movement, LedgerVoucher _ledgerVoucher)
    {
        var physical = InventUpd_Physical::newCheckPostOwnerEnabledInventJournalTrans(_movement);

        physical.updateNow(_ledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFinancialLite</Name>
				<Source><![CDATA[
    private void postFinancialLite(InventMov_Vir_Counting_OwnerEnabled _movement)
    {
        var inventUpd_FinancialLite = InventUpd_FinancialLite::newOwnerEnabledInventJournal(_movement);

        inventUpd_FinancialLite.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFinancial</Name>
				<Source><![CDATA[
    private boolean postFinancial(InventMov_Vir_Counting _movement, TmpWMSOnlineCounting _tmpWMSOnlineCounting, NoYes _check)
    {
        InventUpd_Financial financial = InventUpd_Financial::newVirtuelCounting(_movement, ledgerVoucher, abs(this.calcCostAmount(_tmpWMSOnlineCounting)) * _movement.transSign());

        if (_check)
        {
            if (!financial.checkUpdateMovement())
            {
                return false;
            }
        }
        else
        {
            using (WHSSkipLPControlledCheckForInventoryCleanupContext context = WHSSkipLPControlledCheckForInventoryCleanupContext::construct())
            {
                context.parmSkipCheck(_tmpWMSOnlineCounting.qtyCounted == 0);

                financial.updateNow();
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLine</Name>
				<Source><![CDATA[
    protected boolean postLine(TmpWMSOnlineCounting _tmpWMSOnlineCounting, NoYes _check)
    {
        boolean ret = true;
        InventMov_Vir_Counting movement = this.getMovement(_tmpWMSOnlineCounting);

        if (movement is InventMov_Vir_Counting_OwnerEnabled)
        {
            this.postPhysical(movement, ledgerVoucher);
            this.postFinancialLite(movement);
        }
        else
        {
            ret = this.postFinancial(movement, _tmpWMSOnlineCounting, _check);
        }

        if (ret
            && !_tmpWMSOnlineCounting.InventTransOrigin)
        {
            _tmpWMSOnlineCounting.InventTransOrigin = movement.inventTransOriginId();
            _tmpWMSOnlineCounting.update();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleLine</Name>
				<Source><![CDATA[
    private boolean handleLine(TmpWMSOnlineCounting _tmpWMSOnlineCounting, NoYes _check = NoYes::No)
    {
        boolean                 ret = true;
        InventMov_Vir_Counting  movement;

        InventQty               quantity = _tmpWMSOnlineCounting.QtyCounted - _tmpWMSOnlineCounting.QtyOnHand;

        setPrefix(strFmt("@SYS14077", _tmpWMSOnlineCounting.ItemId));
        setPrefix(InventDim::find(_tmpWMSOnlineCounting.InventDimId).preFix());

        if (quantity != 0)
        {
            if (!numberSeq)
            {
                // <GLS>
                numberSeq = NumberSeq::newGetVoucher(InventParameters::numRefInventJournalVoucherId());
                // </GLS>
            }

            if (!voucherId)
            {
                // <GLS>
                voucherId = numberSeq.voucher();
                // </GLS>
            }

            if (!ledgerVoucher)
            {
                this.initVoucher(_tmpWMSOnlineCounting);
            }

            ret = this.postLine(_tmpWMSOnlineCounting, _check);
        }

        if (!_check)
        {
            this.createInventCountJour(quantity);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventCountJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>InventCountJour</c> record. 
    /// </summary>
    /// <param name="_quantity">
    ///     Quantity difference between counted and on-hand quantity.
    /// </param>
    /// <returns>
    ///     Instance of <c>InventCountJour</c>
    /// </returns>
    protected InventCountJour initializeInventCountJour(InventQty _quantity)
    {
        InventCountJour inventCountJour;
        inventCountJour.initFromTmpWMSOnlineCounting(tmpWMSOnlineCounting);
        inventCountJour.CountDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        inventCountJour.Worker      = DirPersonUserEx::findUserWorkerReference();
        inventCountJour.Ok          = (_quantity == 0) ? NoYes::Yes : NoYes::No;
        return inventCountJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventCountJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates instance of <c>InventCountJour</c>.
    /// </summary>
    /// <param name="_quantity">
    ///     Quantity difference between counted and on-hand quantity.
    /// </param>
    protected void createInventCountJour(InventQty _quantity)
    {
        InventCountJour inventCountJour = this.initializeInventCountJour(_quantity);
        inventCountJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOnHandItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes <c>tmpWMSOnlineCounting</c> records based on the on-hand quantity that matches the
    ///    passed parameters.
    /// </summary>
    /// <param name="_itemId">
    /// The item that is being counted.
    /// </param>
    /// <param name="_inventLocationId">
    ///    The warehouse where counting is performed. If left blank, the warehouse is not used as criteria
    ///    when initializing records.
    /// </param>
    /// <param name="_wmsLocationId">
    ///    The location where counting is performed. If left blank, the location is not used as criteria when
    ///    initializing records.
    /// </param>
    private void initOnHandItem(ItemId _itemId, InventLocationId _inventLocationId, WMSLocationId _wmsLocationId)
    {
        InventSum   inventSum;

        if (!_itemId)
        {
            return;
        }
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            while select ItemId, PhysicalInvent, PdsCWPhysicalInvent, InventDimId
            from inventSum
            where inventSum.ItemId          == _itemId
                && inventSum.ClosedQty       == NoYes::No    
                && inventSum.PhysicalInvent  != 0                                        
                && (!_inventLocationId || inventSum.InventLocationId == _inventLocationId)
                && (!_wmsLocationId    ||  inventSum.wmsLocationId   == _wmsLocationId)
            {
                tmpWMSOnlineCounting.ItemId         = inventSum.ItemId;
                tmpWMSOnlineCounting.InventDimId    = inventSum.InventDimId;

                tmpWMSOnlineCounting.QtyOnHand      = inventSum.PhysicalInvent;
                tmpWMSOnlineCounting.QtyCounted     = inventSum.PhysicalInvent;

                tmpWMSOnlineCounting.PdsCWQtyOnHand     = inventSum.PdsCWPhysicalInvent;
                tmpWMSOnlineCounting.PdsCWQtyCounted    = inventSum.PdsCWPhysicalInvent;

                tmpWMSOnlineCounting.insert();
            }
        }
        else
        {
            InventDim   inventDim;

            while select ItemId, PhysicalInvent, PdsCWPhysicalInvent, InventDimId
            from inventSum
            where inventSum.ItemId          == _itemId      &&
                  inventSum.ClosedQty       == NoYes::No    &&
                  inventSum.PhysicalInvent  != 0
            exists join InventDimId, InventLocationId, wmsLocationId from inventDim
                where inventDim.InventDimId == inventSum.InventDimId
                  && (!_inventLocationId || inventDim.InventLocationId == _inventLocationId)
                  && (!_wmsLocationId    ||  inventDim.wmsLocationId   == _wmsLocationId)
            {
                tmpWMSOnlineCounting.ItemId         = inventSum.ItemId;
                tmpWMSOnlineCounting.InventDimId    = inventSum.InventDimId;

                tmpWMSOnlineCounting.QtyOnHand      = inventSum.PhysicalInvent;
                tmpWMSOnlineCounting.QtyCounted     = inventSum.PhysicalInvent;

                tmpWMSOnlineCounting.PdsCWQtyOnHand     = inventSum.PdsCWPhysicalInvent;
                tmpWMSOnlineCounting.PdsCWQtyCounted    = inventSum.PdsCWPhysicalInvent;

                tmpWMSOnlineCounting.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOnHandLocation</Name>
				<Source><![CDATA[
    private void initOnHandLocation(
        InventLocationId    _inventLocationId,
        WMSLocationId       _wmsLocationId)
    {
        InventSum   inventSum;

        if (!_inventLocationId && !_wmsLocationId)
        {
            return;
        }
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            while select ItemId, InventDimId, PhysicalInvent, PdsCWPhysicalInvent from inventSum
            where inventSum.InventLocationId    == _inventLocationId
                && inventSum.wmsLocationId       == _wmsLocationId
                && inventSum.ClosedQty   == NoYes::No                    
                && inventSum.PhysicalInvent != 0
            {
                tmpWMSOnlineCounting.ItemId         = inventSum.ItemId;
                tmpWMSOnlineCounting.InventDimId    = inventSum.InventDimId;

                tmpWMSOnlineCounting.QtyOnHand      = inventSum.PhysicalInvent;
                tmpWMSOnlineCounting.QtyCounted     = inventSum.PhysicalInvent;

                tmpWMSOnlineCounting.PdsCWQtyOnHand     = inventSum.PdsCWPhysicalInvent;
                tmpWMSOnlineCounting.PdsCWQtyCounted    = inventSum.PdsCWPhysicalInvent;

                tmpWMSOnlineCounting.insert();
            }
        }
        else
        {
            InventDim   inventDim;

            while select InventLocationId, wmsLocationId, InventDimId from inventDim
            where inventDim.InventLocationId    == _inventLocationId
               && inventDim.wmsLocationId       == _wmsLocationId
            join ItemId, InventDimId, PhysicalInvent, PdsCWPhysicalInvent
                from inventSum
                where inventSum.InventDimId == inventDim.InventDimId        &&
                      inventSum.ClosedQty   == NoYes::No                    &&
                      inventSum.PhysicalInvent != 0
            {
                tmpWMSOnlineCounting.ItemId         = inventSum.ItemId;
                tmpWMSOnlineCounting.InventDimId    = inventSum.InventDimId;

                tmpWMSOnlineCounting.QtyOnHand      = inventSum.PhysicalInvent;
                tmpWMSOnlineCounting.QtyCounted     = inventSum.PhysicalInvent;

                tmpWMSOnlineCounting.PdsCWQtyOnHand     = inventSum.PdsCWPhysicalInvent;
                tmpWMSOnlineCounting.PdsCWQtyCounted    = inventSum.PdsCWPhysicalInvent;

                tmpWMSOnlineCounting.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            // we have to reinitialize voucher object before reprocessing lines to make sure that
            // there are no leftovers from previous retries
            ledgerVoucher = null;

            while select forupdate tmpWMSOnlineCounting
                order by QtyCounted desc   // to get bigger chance of winning items before loosing items (avoid negative inventory)
            {
                this.handleLine(tmpWMSOnlineCounting, NoYes::No);
            }

            if (ledgerVoucher)
            {
                ledgerVoucher.end();
            }

            ttscommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.cleanUp();
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                this.cleanUp();
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            this.cleanUp();
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    private void cleanUp()
    {
        this.clearInventTransOriginFieldValues();
        numberSeq.abort();
        voucherId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpWMSOnlineCounting</Name>
				<Source><![CDATA[
    public TmpWMSOnlineCounting tmpWMSOnlineCounting()
    {
        return tmpWMSOnlineCounting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        #OCCRetryCount
        boolean     ret = true;

        try
        {
            ttsbegin;

            while select forupdate tmpWMSOnlineCounting
                order by QtyCounted desc   // to get bigger chance of winning items before loosing items (avoid negative inventory)
            {
                if (!this.handleLine(tmpWMSOnlineCounting, NoYes::Yes))
                {
                    ret = false;
                }
            }

            if (ledgerVoucher)
            {
                ledgerVoucher.end();
            }
            ttscommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRun</Name>
				<Source><![CDATA[
    public boolean validateRun()
    {
        this.run();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSOnlineCountingServer construct()
    {
        return new WMSOnlineCountingServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructItem</Name>
				<Source><![CDATA[
    public static WMSOnlineCountingServer constructItem(
        ItemId              _itemId,
        InventLocationId    _inventLocationId,
        WMSLocationId       _wmsLocationId)
    {
        WMSOnlineCountingServer wmsOnlineCountingServer = WMSOnlineCountingServer::construct();

        wmsOnlineCountingServer.initOnHandItem(_itemId,_inventLocationId, _wmsLocationId);
        return wmsOnlineCountingServer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLocation</Name>
				<Source><![CDATA[
    public static WMSOnlineCountingServer constructLocation(
        InventLocationId    _inventLocationId,
        WMSLocationId       _wmsLocationId)
    {
        WMSOnlineCountingServer wmsOnlineCountingServer = WMSOnlineCountingServer::construct();

        wmsOnlineCountingServer.initOnHandLocation(_inventLocationId, _wmsLocationId);
        return wmsOnlineCountingServer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packTmpLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Packs the <c>TmpWMSOnlineCounting</c> lines to a container for sandbox pack
    /// </summary>
    /// <returns>
    ///     Returns a container of <c>TmpWMSOnlineCounting</c> lines
    /// </returns>
    [Hookable(false)]
    internal container packTmpLines()
    {
        List list = new List(Types::Record);
        while select tmpWMSOnlineCounting
        {
            list.addEnd(tmpWMSOnlineCounting.data());
        }

        return list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackTmpLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Unpacks the <c>TmpWMSOnlineCounting</c> lines
    /// </summary>
    /// <param name="_packedTmpLines">
    ///     A container containing packed  <c>TmpWMSOnlineCounting</c> lines
    /// </param>
    [Hookable(false)]
    internal void unpackTmpLines(container _packedTmpLines)
    {
        ListEnumerator le;
        Common    common;
        tmpWMSOnlineCounting = null;
        le = List::create(_packedTmpLines).getEnumerator();

        while (le.moveNext())
        {
            common = le.current();
            tmpWMSOnlineCounting.data(common.data());
            tmpWMSOnlineCounting.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>