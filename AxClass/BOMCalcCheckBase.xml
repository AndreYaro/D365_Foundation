<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcCheckBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMCalcCheckBase</c> class is the base class for BOM calculation check logic.
/// </summary>
abstract class BomCalcCheckBase
{
    int                 numOfMessages;
    int                 startLine;

    Exception           exceptionType;

    TransDate           calcDate;

    NoYes               checkNoBOM;
    NoYes               checkNoRoute;
    NoYes               checkNoResource;
    NoYes               checkNoConsump;
    NoYes               checkNoCostPrice;
    int                 checkAgeCostPrice;
    real                checkMinContribution;
    NoYes               checkMissingUpdates;
    NoYes               checkUseFallBack;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getMessages</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds messages that appeared in the information log during the check of a calculated BOM.
    /// </summary>
    /// <returns>
    ///    A container with information log messages.
    /// </returns>
    public container getMessages()
    {
        int         currentLine = infologLine();
        container   conMessages;

        if (startLine == currentLine)
        {
            return connull();
        }

        conMessages = infolog.cut(startLine + 1, currentLine);

        return conMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMessages</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether any warnings or errors were found during the check of a calculated BOM.
    /// </summary>
    /// <returns>
    ///    true if warnings or errors exist; otherwise, false.
    /// </returns>
    public boolean hasMessages()
    {
        return numOfMessages != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>incNumOfMessages</Name>
				<Source><![CDATA[
    protected void incNumOfMessages()
    {
        numOfMessages++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBOMCalcBase</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables from an instance of the base calculation class.
    /// </summary>
    /// <param name="_bomCalcBase">
    ///    The instance of the base calculation class from which to initialize.
    /// </param>
    protected void initBOMCalcBase(BOMCalcBase _bomCalcBase)
    {
        BOMCalcGroup bomCalcGroup;

        if (_bomCalcBase.parmOverrideGroupWarnings())
        {
            checkNoBOM              = _bomCalcBase.parmCheckNoBOM();
            checkNoRoute            = _bomCalcBase.parmCheckNoRoute();
            checkNoResource         = _bomCalcBase.parmCheckNoResource();
            checkNoConsump          = _bomCalcBase.parmCheckNoConsump();
            checkNoCostPrice        = _bomCalcBase.parmCheckNoCostPrice();
            checkAgeCostPrice       = _bomCalcBase.parmCheckAgeCostPrice();
            checkMinContribution    = _bomCalcBase.parmCheckMinContribution();
        }
        else
        {
            bomCalcGroup = _bomCalcBase.bomCalcGroup();

            checkNoBOM              = bomCalcGroup.CheckNoBOM;
            checkNoRoute            = bomCalcGroup.CheckNoRoute;
            checkNoResource         = bomCalcGroup.CheckNoResource;
            checkNoConsump          = bomCalcGroup.CheckNoConsump;
            checkNoCostPrice        = bomCalcGroup.CheckNoCostPrice;
            checkAgeCostPrice       = bomCalcGroup.CheckAgeCostPrice;
            checkMinContribution    = bomCalcGroup.CheckMinContribution;
        }

        checkMissingUpdates = _bomCalcBase.parmCheckMissingUpdates();
        checkUseFallBack = _bomCalcBase.parmCheckUseFallBack();
        calcDate =_bomCalcBase.parmCalcDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        checkNoBOM              = NoYes::No;
        checkNoRoute            = NoYes::No;
        checkNoResource         = NoYes::No;
        checkNoConsump          = NoYes::No;
        checkNoCostPrice        = NoYes::No;
        checkAgeCostPrice       = 0;
        checkMinContribution    = 0;
        checkMissingUpdates     = NoYes::No;
        checkUseFallBack        = NoYes::No;

        startLine       = infologLine();
        exceptionType   = Exception::Warning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcDate</Name>
				<Source><![CDATA[
    TransDate parmCalcDate(TransDate _calcDate = calcDate)
    {
        calcDate = _calcDate;
        return calcDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckAgeCostPrice</Name>
				<Source><![CDATA[
    int parmCheckAgeCostPrice(int _checkAgeCostPrice = checkAgeCostPrice)
    {
        checkAgeCostPrice = _checkAgeCostPrice;
        return checkAgeCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckMinContribution</Name>
				<Source><![CDATA[
    real parmCheckMinContribution(real _checkMinContribution = checkMinContribution)
    {
        checkMinContribution = _checkMinContribution;
        return checkMinContribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckMissingUpdates</Name>
				<Source><![CDATA[
    NoYes parmCheckMissingUpdates(NoYes _checkMissingUpdates = checkMissingUpdates)
    {
        checkMissingUpdates = _checkMissingUpdates;
        return checkMissingUpdates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckNoBOM</Name>
				<Source><![CDATA[
    NoYes parmCheckNoBOM(NoYes _checkNoBOM = checkNoBOM)
    {
        checkNoBOM = _checkNoBOM;
        return checkNoBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckNoConsump</Name>
				<Source><![CDATA[
    NoYes parmCheckNoConsump(NoYes _checkNoConsump = checkNoConsump)
    {
        checkNoConsump = _checkNoConsump;
        return checkNoConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckNoCostPrice</Name>
				<Source><![CDATA[
    NoYes parmCheckNoCostPrice(NoYes _checkNoCostPrice = checkNoCostPrice)
    {
        checkNoCostPrice = _checkNoCostPrice;
        return checkNoCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckNoResource</Name>
				<Source><![CDATA[
    NoYes parmCheckNoResource(NoYes _checkNoResource = checkNoResource)
    {
        checkNoResource = _checkNoResource;
        return checkNoResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckNoRoute</Name>
				<Source><![CDATA[
    NoYes parmCheckNoRoute(NoYes _checkNoRoute = checkNoRoute)
    {
        checkNoRoute = _checkNoRoute;
        return checkNoRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckUseFallBack</Name>
				<Source><![CDATA[
    NoYes parmCheckUseFallBack(NoYes _checkUseFallBack = checkUseFallBack)
    {
        checkUseFallBack = _checkUseFallBack;
        return checkUseFallBack;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infologMsgAdd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays a message in the Infolog.
    /// </summary>
    /// <param name="_exceptionType">
    ///    The type of message to display.
    /// </param>
    /// <param name="_message">
    ///    The message to present.
    /// </param>
    /// <param name="_helpUrl">
    ///    The help link for the message that is displayed; optional.
    /// </param>
    /// <param name="_sysInfoAction">
    ///    The layout type of the Infolog; optional.
    /// </param>
    /// <remarks>
    ///    This message is always run on the client.
    /// </remarks>
    public static void infologMsgAdd(
        Exception       _exceptionType,
        str             _message,
        str             _helpUrl = '',
        SysInfoAction   _sysInfoAction = null)
    {
        infolog.add(_exceptionType, _message, _helpUrl, _sysInfoAction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>infologWarningImage</Name>
				<Source><![CDATA[
    static ImageRes infologWarningImage()
    {
        #resAppl

        return #ImageWarning;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>