<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerTurnoverSheetDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>RLedgerTurnoverSheetDP</c> class fetches records for the <c>RLedgerTurnoverSheet</c>
///    report.
/// </summary>
[
SRSReportParameterAttribute(classstr(RLedgerTurnoverSheetContract))
]
class RLedgerTurnoverSheetDP extends SRSReportDataProviderBase
{
    RLedgerTurnoverSheetContract contract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRLedgerTurnoverSheetHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the data for the report in the temporary table.
    /// </summary>
    /// <returns>
    /// The data for the report in the temporary table.
    /// </returns>
    [
    SRSReportDataSetAttribute(tablestr(RLedgerTurnoverSheetHeader))
    ]
    public RLedgerTurnoverSheetHeader getRLedgerTurnoverSheetHeader()
    {
        RLedgerTurnoverSheetHeader header, headerTmp;
        RLedgerTurnoverSheet       reportTable = RLedgerTurnoverSheet::findRecId(str2int64(contract.parmReportTableRecId()));

        headerTmp.setTmp();

        while select header where header.RefRecId == reportTable.RecId
        {
            buf2Buf(header, headerTmp);
            headerTmp.insert();
        }

        select headerTmp;
        return headerTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRLedgerTurnoverSheetLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the data for the report in the temporary table.
    /// </summary>
    /// <returns>
    /// The data for the report in the temporary table.
    /// </returns>
    [
    SRSReportDataSetAttribute(tablestr(RLedgerTurnoverSheetLine))
    ]
    public RLedgerTurnoverSheetLine getRLedgerTurnoverSheetLine()
    {
        RLedgerTurnoverSheetLine   line, lineTmp;
        RLedgerTurnoverSheet       reportTable = RLedgerTurnoverSheet::findRecId(str2int64(contract.parmReportTableRecId()));

        lineTmp.setTmp();

        while select line where line.RefRecId == reportTable.RecId
        {
            buf2Buf(line, lineTmp);
            lineTmp.doInsert();
        }

        select lineTmp;
        return lineTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic. For this report, only data in pseudo-temporary tables are
    ///    transferred to SSRS.
    /// </summary>
    public void processReport()
    {
        Args                  args;
        RLedgerTurnoverSheet  reportTable;
        RLedgerTurnoverEngine RLedgerTurnoverEngine;

        contract = this.parmDataContract() as RLedgerTurnoverSheetContract;
        reportTable = RLedgerTurnoverSheet::findRecId(str2int64(contract.parmReportTableRecId()));

        if (contract.parmFromDate() == 01\01\1901)
        {
           contract.parmFromDate(dateNull());
        }

        if (reportTable.FromDate            != contract.parmFromDate()          ||
            reportTable.ToDate              != contract.parmToDate()            ||
            reportTable.MainAccountNum      != contract.parmMainAccountId()     ||
            reportTable.PrintRanges         != contract.parmPrintRanges()       ||
            reportTable.DeleteZero          != contract.parmDeleteZero()        ||
            reportTable.ShowSumAccount      != contract.parmShowSumAccount()    ||
            reportTable.ShowTrans           != contract.parmShowTrans()         ||
            reportTable.ShowBalanceTrans    != contract.parmShowBalanceTrans()  ||
            reportTable.ShowBalance         != contract.parmShowBalance())
        {
            args = new Args();
            args.parmEnum(reportTable.ReportType);

            RLedgerTurnoverEngine = RLedgerTurnoverEngine::construct(args);
            RLedgerTurnoverEngine.getLast();
            RLedgerTurnoverEngine.parmFromDate(contract.parmFromDate());
            RLedgerTurnoverEngine.parmToDate(contract.parmToDate());
            RLedgerTurnoverEngine.parmMainAccountNum(contract.parmMainAccountId());
            RLedgerTurnoverEngine.parmPrintRanges(contract.parmPrintRanges());
            RLedgerTurnoverEngine.parmDeleteZero(contract.parmDeleteZero());
            RLedgerTurnoverEngine.parmShowSumAccount(contract.parmShowSumAccount());
            RLedgerTurnoverEngine.parmShowTrans(contract.parmShowTrans());
            RLedgerTurnoverEngine.parmShowBalanceTrans(contract.parmShowBalanceTrans());
            RLedgerTurnoverEngine.parmShowBalance(contract.parmShowBalance());
            RLedgerTurnoverEngine.unpack(RLedgerTurnoverEngine.pack());
            RLedgerTurnoverEngine.runReport();
            contract.parmReportTableRecId(int642str(RLedgerTurnoverEngine.getReportTableRecId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static RLedgerTurnoverSheetDP construct()
    {
        return new RLedgerTurnoverSheetDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
