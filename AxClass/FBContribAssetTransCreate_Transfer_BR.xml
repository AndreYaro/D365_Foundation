<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBContribAssetTransCreate_Transfer_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FBContribAssetTransCreate_Transfer_BR extends FBContribAssetTransCreate_BR
{
    FiscalDocument_BR   fiscalDocument;
    AssetId             assetId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public void create()
    {
        if (!fiscalDocument || !assetId)
        {
            return;
        }

        if (fiscalDocument.Direction == FiscalDocDirection_BR::Outgoing)
        {
            this.processTransferOutgoing();
        }
        else
        {
            this.processTransferAcquisiton();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromContribAssetTable</Name>
				<Source><![CDATA[
    private FBContribAssetTable_BR createFromContribAssetTable(FBContribAssetTable_BR _origContribAssetTable)
    {
        AssetTable              assetTable;
        FBContribAssetTable_BR  contribAssetTable;

        setPrefix(strFmt('%1:%2', "@SYS25653", assetTable.AssetId));

        assetTable = AssetTable::find(_origContribAssetTable.AssetTable);

        if (assetTable.FiscalEstablishment_BR != fiscalEstablishment.RecId)
        {
            throw error(strFmt("@SYS4006724", FiscalEstablishment_BR::find(assetTable.FiscalEstablishment_BR).FiscalEstablishmentId));
        }

        contribAssetTable.initFromAssetTable(assetTable);

        contribAssetTable.Status                = FBCIAPAssetStatus_BR::Open;
        contribAssetTable.DefaultDimension      = _origContribAssetTable.DefaultDimension;
        contribAssetTable.LedgerDimension       = _origContribAssetTable.LedgerDimension;
        contribAssetTable.Installments          = _origContribAssetTable.Installments;
        contribAssetTable.RemainingInstallments = _origContribAssetTable.RemainingInstallments;
        contribAssetTable.PISAmount             = _origContribAssetTable.PISAmount;
        contribAssetTable.PISTaxationCode       = _origContribAssetTable.PISTaxationCode;
        contribAssetTable.PISTaxBaseAmount      = _origContribAssetTable.PISTaxBaseAmount;
        contribAssetTable.COFINSAmount          = _origContribAssetTable.COFINSAmount;
        contribAssetTable.COFINSTaxationCode    = _origContribAssetTable.COFINSTaxationCode;
        contribAssetTable.COFINSTaxBaseAmount   = _origContribAssetTable.COFINSTaxBaseAmount;

        contribAssetTable.write();

        return contribAssetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferAcquisitionTrans</Name>
				<Source><![CDATA[
    private void createTransferAcquisitionTrans(FBContribAssetTable_BR _contribAssetTable)
    {
        FBContribAssetTrans_BR  contribAssetTrans;

        select RecId from contribAssetTrans
            where   contribAssetTrans.TransType                 == FBContribAssetTransType_BR::Acquisition
                &&  contribAssetTrans.FBContribAssetTable_BR    == _contribAssetTable.RecId;

        // Do not process if already acquired
        if (contribAssetTrans.RecId)
        {
            return;
        }

        _contribAssetTable.selectForUpdate(true);
        _contribAssetTable.RemainingInstallments--;
        _contribAssetTable.update();

        contribAssetTrans.FBBookingPeriod_BR        = bookingPeriod.RecId;
        contribAssetTrans.FBContribAssetTable_BR    = _contribAssetTable.RecId;
        contribAssetTrans.TransType                 = FBContribAssetTransType_BR::Acquisition;
        contribAssetTrans.TransDate                 = fiscaldocument.AccountingDate;

        CurrencyCode currencyCode = Ledger::accountingCurrency();

        contribAssetTrans.PISTaxationCode = _contribAssetTable.PISTaxationCode;
        contribAssetTrans.PISInstallmentBaseAmount = CurrencyExchange::round(_contribAssetTable.PISTaxBaseAmount /_contribAssetTable.Installments, currencyCode);
        contribAssetTrans.COFINSTaxationCode = _contribAssetTable.COFINSTaxationCode;
        contribAssetTrans.COFINSInstallmentBaseAmount = CurrencyExchange::round(_contribAssetTable.COFINSTaxBaseAmount /_contribAssetTable.Installments, currencyCode);

        contribAssetTrans.InstallmentNum = 1;
        contribAssetTrans.PISInstallmentAmount = FBCIAPCreditCalc_BR::calcInstallment(_contribAssetTable.PISAmount, _contribAssetTable.Installments);
        contribAssetTrans.COFINSInstallmentAmount = FBCIAPCreditCalc_BR::calcInstallment(_contribAssetTable.COFINSAmount, _contribAssetTable.Installments);

        contribAssetTrans.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
    public AssetId parmAssetId(AssetId _assetId = assetId)
    {
        assetId = _assetId;

        return assetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocument</Name>
				<Source><![CDATA[
    public FiscalDocument_BR parmFiscalDocument(FiscalDocument_BR _fiscalDocument = fiscalDocument)
    {
        fiscalDocument = _fiscalDocument;

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTransferAcquisiton</Name>
				<Source><![CDATA[
    private void processTransferAcquisiton()
    {
        FiscalEstablishment_BR  outgoingFiscalEstablishment;
        FiscalDocument_BR       outgoingFiscalDocument, originalFiscalDocument;
        FiscalDocumentLine_BR   originalFiscalDocumentLine;
        FBContribAssetTable_BR  originalContribAssetTable;
        FBContribAssetTable_BR  acquisitonContribAssetTable;
        CFOPTable_BR            cfop;
        FBContribAssetOrigin_BR assetOrigin;
        container               acquisitionDocumentAndLine;
        AssetTrans              originalAcquisitionAssetTrans;
        ListEnumerator          originalAcquisitionAssetTransEnumerator;

        select dataAreaId, RecId from outgoingFiscalEstablishment
            exists join outgoingFiscalDocument
                where   outgoingFiscalEstablishment.FiscalEstablishmentId   == outgoingFiscalDocument.FiscalEstablishment
                    &&  outgoingFiscalDocument.FiscalDocumentNumber         == fiscaldocument.FiscalDocumentNumber
                    &&  outgoingFiscalDocument.FiscalDocumentSeries         == fiscaldocument.FiscalDocumentSeries
                    &&  outgoingFiscalDocument.FiscalEstablishmentCNPJCPF   == fiscaldocument.ThirdPartyCNPJCPF;

        select count(RecId) from originalContribAssetTable
            where   originalContribAssetTable.FiscalEstablishment_BR        == outgoingFiscalEstablishment.RecId
                &&  originalContribAssetTable.FiscalEstablishmentDataArea   == outgoingFiscalEstablishment.dataAreaId
                &&  originalContribAssetTable.AssetTable                    == assetId;

        if (originalContribAssetTable.RecId > 0)
        {
            // There is an existing contrib asset table
            while select originalContribAssetTable
                where   originalContribAssetTable.FiscalEstablishment_BR        == outgoingFiscalEstablishment.RecId
                    &&  originalContribAssetTable.FiscalEstablishmentDataArea   == outgoingFiscalEstablishment.dataAreaId
                    &&  originalContribAssetTable.AssetTable                    == assetId
            {
                acquisitonContribAssetTable = this.createFromContribAssetTable(originalContribAssetTable);
                this.createTransferAcquisitionTrans(acquisitonContribAssetTable);
            }
        }
        else
        {
            // There is not an existing contrib asset table
            // Scenario: buy and transfer in the same month
            originalAcquisitionAssetTransEnumerator = FBContribAssetTransCreate_Transfer_BR::findAcquisitionAssetTrans(assetId, bookingPeriod.periodFrom(), bookingPeriod.periodTo(), outgoingFiscalEstablishment.RecId).getEnumerator();

            while (originalAcquisitionAssetTransEnumerator.moveNext())
            {
                originalAcquisitionAssetTrans   = originalAcquisitionAssetTransEnumerator.current();
                acquisitionDocumentAndLine      = FBContribAssetTransCreate_Transfer_BR::findAcquisitionFiscalDocument(originalAcquisitionAssetTrans.Voucher, originalAcquisitionAssetTrans.TransDate, assetId);
                originalFiscalDocument          = conPeek(acquisitionDocumentAndLine, 1);
                originalFiscalDocumentLine      = conPeek(acquisitionDocumentAndLine, 2);

                if (originalFiscalDocument)
                {
                    cfop                        = CFOPTable_BR::findByCFOPId(originalFiscalDocumentLine.CFOP);
                    assetOrigin                 = (cfop && cfop.CustVendLocation == CustVendLocation_BR::OutsideCountry) ? FBContribAssetOrigin_BR::ExternalMarket : FBContribAssetOrigin_BR::InternalMarket;

                    // Create contrib asset table
                    assetTrans                  = originalAcquisitionAssetTrans;
                    acquisitonContribAssetTable = this.findOrCreateContribAssetTable(assetOrigin);
                    FBContribAssetTransCreate_Acquisition_BR::updateContribAssetTableAmounts(acquisitonContribAssetTable, originalFiscalDocumentLine.RecId);

                    // Create contrib asset trans
                    this.createTransferAcquisitionTrans(acquisitonContribAssetTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTransferOutgoing</Name>
				<Source><![CDATA[
    private void processTransferOutgoing()
    {
        FBContribAssetTable_BR  contribAssetTable;
        FBContribAssetTrans_BR  contribAssetTrans;

        FBContribAssetTransCreate_BR::deleteInstallmentCreditTransaction(bookingPeriod, assetId);

        while select RecId from contribAssetTable
            where   contribAssetTable.AssetTable                    == assetId
                &&  contribAssetTable.FiscalEstablishment_BR        == fiscalEstablishment.RecId
                &&  contribAssetTable.FiscalEstablishmentDataArea   == fiscalEstablishment.dataAreaId
                && (contribAssetTable.Status                        == FBCIAPAssetStatus_BR::Open
                    ||  (contribAssetTable.Status                   == FBCIAPAssetStatus_BR::Closed
                      && contribAssetTable.Installments             == 1))
        {
            contribAssetTrans.clear();

            contribAssetTrans.FBBookingPeriod_BR        = bookingPeriod.RecId;
            contribAssetTrans.FBContribAssetTable_BR    = contribAssetTable.RecId;
            contribAssetTrans.TransDate                 = fiscalDocument.FiscalDocumentDate;
            contribAssetTrans.TransType                 = FBContribAssetTransType_BR::Transfer;

            contribAssetTrans.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAcquisitionAssetTrans</Name>
				<Source><![CDATA[
    private static List findAcquisitionAssetTrans(  AssetId                     _assetId,
                                                    TransDate                   _periodFrom,
                                                    TransDate                   _periodTo,
                                                    FiscalEstablishmentRecId_BR _originalFiscalEsttablishmentRecId)
    {
        AssetTrans      acquisitionAssetTrans;
        AssetTable      assetTable;
        AssetBook       assetBook;
        AssetBookTable  assetBookTable;
        List            assetTransList = new List(Types::Record);

        while select acquisitionAssetTrans
            order by TransDate
            where   acquisitionAssetTrans.AssetId      == _assetId
                && (acquisitionAssetTrans.TransType    == AssetTransType::Acquisition
                 || acquisitionAssetTrans.TransType    == AssetTransType::AcquisitionAdj)
                && (acquisitionAssetTrans.TransDate    >= _periodFrom
                 && acquisitionAssetTrans.TransDate    <= _periodTo)
            // only asset with installments
            exists join assetTable
                where   assetTable.AssetId  == acquisitionAssetTrans.AssetId
                    &&  assetTable.PISCOFINSCreditInstallments_BR   > 0
                    &&  assetTable.PISCOFINSAppropriationMethod_BR  == FBPISCOFINSFixedAssetAppropMethod_BR::Acquisition
            // only assets already acquired
            exists join assetBook
                where   assetBook.AssetId   == acquisitionAssetTrans.AssetId
                    &&  assetBook.Status    != AssetStatus::NoAcquisition
            // only assets on current posting layer
            exists join assetBookTable
                where   assetBookTable.BookId               == assetBook.BookId
                    &&  assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current
        {
            assetTransList.addEnd(acquisitionAssetTrans);
        }

        return assetTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAcquisitionFiscalDocument</Name>
				<Source><![CDATA[
    private static container findAcquisitionFiscalDocument( Voucher     _voucher,
                                                            TransDate   _transDate,
                                                            AssetId     _assetId)
    {
        FiscalDocument_BR       fiscalDocument;
        FiscalDocumentLine_BR   fiscalDocumentLine;
        container               acquisitionDocumentAndLine;

        select RecId from fiscalDocument
            where   fiscalDocument.Direction            == FiscalDocDirection_BR::Incoming
                &&  (fiscalDocument.InventoryVoucher    == _voucher || fiscalDocument.Voucher == _voucher)
                &&  fiscalDocument.AccountingDate       == _transDate
            join fiscalDocumentLine
                where   fiscalDocumentLine.FiscalDocument   == fiscalDocument.RecId
                    &&  fiscalDocumentLine.AssetId          == _assetId;

        acquisitionDocumentAndLine = conIns(acquisitionDocumentAndLine, 1, fiscalDocument);
        acquisitionDocumentAndLine = conIns(acquisitionDocumentAndLine, 2, fiscalDocumentLine);

        return acquisitionDocumentAndLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>