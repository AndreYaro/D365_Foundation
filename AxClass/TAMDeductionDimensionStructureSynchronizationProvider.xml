<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMDeductionDimensionStructureSynchronizationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>TAMDeductionDimensionStructureSynchronizationProvider</c> is the dimension structure synchronization provider for deduction data.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.DimensionStructureISynchronizationTransactionProvider))]
[DimensionStructureSynchronizationProviderCaption("@Tax:TAMDeductionDimensionStructureSynchronizationProviderCaption")]
[DimensionStructureSynchronizationProviderInterface(true)]
[DimensionStructureSynchronizationProviderV2Flight(classStr(TAMDeductionDimensionStructureSynchronizationProviderV2Flight))]
public class TAMDeductionDimensionStructureSynchronizationProvider implements DimensionStructureISynchronizationTransactionProvider, DimensionStructureISynchronizationTransactionProviderV2
{
    private const str InstrumentationNamespace = classStr(TAMDeductionDimensionStructureSynchronizationProvider);
    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);
    private const int MaxRetryCount = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfStuctureRemovalFromLedgerIsPrevented</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the account structure is prevented from being removed from the ledger.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// The account structure being removed.
    /// </param>
    /// <param name="_ledger">
    /// The <c>Ledger</c> record from which the structure is being removed.
    /// </param>
    /// <param name = "_ret">
    /// The event handler result.
    /// </param>
    [SubscribesTo(classStr(LedgerStructureDelegates), delegateStr(LedgerStructureDelegates, checkIfStuctureRemovalFromLedgerIsPrevented))]
    public static void checkIfStuctureRemovalFromLedgerIsPrevented(DimensionHierarchy _dimensionHierarchy, Ledger _ledger, EventHandlerResult _ret)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(classStr(TAMDeductionDimensionStructureSynchronizationProvider),
            staticMethodStr(TAMDeductionDimensionStructureSynchronizationProvider, checkIfStuctureRemovalFromLedgerIsPrevented));
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(TAMDeductionDimensionStructureSynchronizationProvider));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            activityContext.addCustomProperty('MethodName', staticMethodStr(TAMDeductionDimensionStructureSynchronizationProvider, checkIfStuctureRemovalFromLedgerIsPrevented));

            TAMDeduction tamDeduction;
            DimensionAttributeValueCombination dimAttrValueCombination;
            DimensionAttributeValueGroupCombination dimAttrValueGroupCombination;
            DimensionAttributeValueGroup dimAttrValueGroup;

            unchecked (Uncheck::XDS)
            {
                CompanyInfo companyInfo = CompanyInfo::find(_ledger.PrimaryForLegalEntity);

                changecompany (companyInfo.DataArea)
                {
                    // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                    tamDeduction.clear();

                    // Locate any LedgerDimension from unposted customer invoice distribution templates
                    select firstonly RecId from tamDeduction
                        exists join dimAttrValueCombination
                            where dimAttrValueCombination.RecId == tamDeduction.DeductOffLedgerDimension
                                && dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                        exists join dimAttrValueGroupCombination
                            where dimAttrValueGroupCombination.DimensionAttributeValueCombination == dimAttrValueCombination.RecId
                        exists join dimAttrValueGroup
                            where dimAttrValueGroup.RecId == dimAttrValueGroupCombination.DimensionAttributeValueGroup
                                && dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchy.RecId;
                }
            }

            if (tamDeduction.RecId)
            {
                _ret.booleanResult(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronize</Name>
				<Source><![CDATA[
    public void insertDimensionSynchronize(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest)
        {
            DimensionSynchronize                dimSynchronize;
            DimensionSynchronize                dimSynchronizeNotExists;
            DimensionSynchronizeLedger          dimSynchronizeLedger;

            dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeNotExists.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

            TAMDeduction                        tamDeduction;
            DimensionAttributeValueCombination  dimAttrValueCombination;
            DataArea                            company;
            DataAreaId                          companyId;

            SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(TAMDeductionDimensionStructureSynchronizationProvider, insertDimensionSynchronize));

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked (Uncheck::XDS)
                {
                    while select Id from company
                        where company.IsVirtual == NoYes::No
                    {
                        companyId = company.Id;

                        select firstonly RecId from dimSynchronizeLedger where dimSynchronizeLedger.DataArea == companyId;

                        if (dimSynchronizeLedger.RecId)
                        {
                            changecompany (companyId)
                            {
                                // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                                tamDeduction.clear();

                                // Extract LedgerDimension's from deductions
                                insert_recordset dimSynchronize (OriginalLedgerDimension, LedgerDimensionType, DataArea)
                                    select DeductOffLedgerDimension from tamDeduction
                                        group by tamDeduction.DeductOffLedgerDimension, dimAttrValueCombination.LedgerDimensionType, dimSynchronizeLedger.DataArea
                                        join LedgerDimensionType from dimAttrValueCombination
                                            where dimAttrValueCombination.RecId == tamDeduction.DeductOffLedgerDimension
                                               && dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                                        join DataArea from dimSynchronizeLedger
                                            where dimSynchronizeLedger.DataArea == companyId
                                        notexists join dimSynchronizeNotExists
                                            where dimSynchronizeNotExists.OriginalLedgerDimension == tamDeduction.DeductOffLedgerDimension;

                                activityContext.addCustomProperty('MethodName', methodStr(TAMDeductionDimensionStructureSynchronizationProvider, insertDimensionSynchronize));
                                activityContext.addCustomProperty('WereRecordsInserted', int2str(dimSynchronize.rowCount() > 0));
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronizeV2</Name>
				<Source><![CDATA[
    public RefRecId insertDimensionSynchronizeV2(DimensionStructureSynchronizationRequestV2 _synchronizationRequest)
    {
        RefRecId correlationId;

        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(TAMDeductionDimensionStructureSynchronizationProvider, insertDimensionSynchronizeV2));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();

            unchecked (Uncheck::XDS)
            {
                DimensionStructureSyncProviderStatusTracking dimensionStructureSyncProviderStatusTracking;

                select forupdate firstonly RecId from dimensionStructureSyncProviderStatusTracking
                    where dimensionStructureSyncProviderStatusTracking.BatchJobId == batchJobId &&
                        dimensionStructureSyncProviderStatusTracking.ProviderName == _synchronizationRequest.parmProviderName();

                if (!dimensionStructureSyncProviderStatusTracking)
                {
                    ttsbegin;

                    dimensionStructureSyncProviderStatusTracking.BatchJobId = batchJobId;
                    dimensionStructureSyncProviderStatusTracking.ProviderName = _synchronizationRequest.parmProviderName();
                    dimensionStructureSyncProviderStatusTracking.insert();

                    correlationId = dimensionStructureSyncProviderStatusTracking.RecId;

                    DataArea company;

                    while select Id from company
                        where company.IsVirtual == NoYes::No
                    {
                        changecompany (company.Id)
                        {
                            DimensionSynchronizeDetail dimSynchronizeDetail;
                            DimensionSynchronizeDetail dimSynchronizeDetailNotExists;
                            DimensionSynchronizeLedgerDetail dimSynchronizeLedgerDetail;
                            DimensionAttributeValueCombination dimAttrValueCombination;
                            TAMDeduction tamDeduction;

                            // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                            tamDeduction.clear();

                            // Extract LedgerDimension's from deductions
                            insert_recordset dimSynchronizeDetail (ProviderStatusTrackingId, OriginalLedgerDimension, LedgerDimensionType, DataArea)
                                select correlationId, DeductOffLedgerDimension from tamDeduction
                                    group by tamDeduction.DeductOffLedgerDimension, dimAttrValueCombination.LedgerDimensionType, dimSynchronizeLedgerDetail.DataArea
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == tamDeduction.DeductOffLedgerDimension
                                            && dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                                    join DataArea from dimSynchronizeLedgerDetail
                                        where dimSynchronizeLedgerDetail.DataArea == tamDeduction.DataAreaId
                                    notexists join dimSynchronizeDetailNotExists
                                        where dimSynchronizeDetailNotExists.OriginalLedgerDimension == tamDeduction.DeductOffLedgerDimension
                                            && dimSynchronizeDetailNotExists.ProviderStatusTrackingId == correlationId;

                            activityContext.addCustomProperty('MethodName', methodStr(TAMDeductionDimensionStructureSynchronizationProvider, insertDimensionSynchronizeV2));
                            activityContext.addCustomProperty('WereRecordsInserted', int2str(dimSynchronizeDetail.rowCount() > 0));
                        }
                    }

                    dimensionStructureSyncProviderStatusTracking.Status = DimensionStructureSyncProviderStatus::Inserted;
                    dimensionStructureSyncProviderStatusTracking.update();

                    ttscommit;
                }
                else
                {
                    correlationId = dimensionStructureSyncProviderStatusTracking.RecId;
                }
            }
        }

        return correlationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChanges</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChanges(DimensionSynchronize _dimensionSynchronize)
    {
        return DimensionStructureChangeSynchronize::synchronizeStructureChanges(_dimensionSynchronize.OriginalLedgerDimension, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChangesV2</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChangesV2(DimensionSynchronizeDetail _dimensionSynchronize)
    {
        return DimensionStructureChangeSynchronize::synchronizeStructureChanges(_dimensionSynchronize.OriginalLedgerDimension, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferences</Name>
				<Source><![CDATA[
    public void updateProviderReferences(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest)
        {
            DimensionSynchronize            dimSynchronize;
            DimensionSynchronizeLedger      dimSynchronizeLedger;

            dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

            TAMDeduction                    tamDeduction;
            DataArea                        company;
            DataAreaId                      companyId;

            SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(TAMDeductionDimensionStructureSynchronizationProvider, updateProviderReferences));

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked (Uncheck::XDS)
                {
                    while select Id from company
                        where company.IsVirtual == NoYes::No
                    {
                        companyId = company.Id;

                        select firstonly RecId from dimSynchronizeLedger where dimSynchronizeLedger.DataArea == companyId;

                        if (dimSynchronizeLedger.RecId)
                        {
                            changecompany (companyId)
                            {
                                // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                                tamDeduction.clear();

                                // Update deduction with the new ledger dimension values
                                update_recordset tamDeduction
                                    setting DeductOffLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                    join UpdatedLedgerDimension from dimSynchronize
                                        where dimSynchronize.OriginalLedgerDimension == tamDeduction.DeductOffLedgerDimension
                                            && dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension;

                                info(strFmt("@Dimension:StructureSynchronizationProviderLogPerCompany", tamDeduction.rowCount(), tableId2PName(tamDeduction.TableId), companyId));

                                activityContext.addCustomProperty('MethodName', methodStr(TAMDeductionDimensionStructureSynchronizationProvider, updateProviderReferences));
                                activityContext.addCustomProperty('WereRecordsUpdated', int2str(tamDeduction.rowCount() > 0));
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferencesV2</Name>
				<Source><![CDATA[
    public void updateProviderReferencesV2(DimensionStructureSynchronizationRequestV2 _synchronizationRequest)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(TAMDeductionDimensionStructureSynchronizationProvider, updateProviderReferencesV2));

        try
        {
            ttsbegin;

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked (Uncheck::XDS)
                {
                    DataArea company;
                    RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();

                    while select Id from company
                        where company.IsVirtual == NoYes::No
                    {
                        changecompany (company.Id)
                        {
                            DimensionSynchronizeDetail dimSynchronizeDetail;
                            DimensionSynchronizeLedgerDetail dimSynchronizeLedgerDetail;
                            TAMDeduction tamDeduction;

                            // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                            tamDeduction.clear();

                            // Update deduction with the new ledger dimension values
                            update_recordset tamDeduction
                                setting DeductOffLedgerDimension = dimSynchronizeDetail.UpdatedLedgerDimension
                                join UpdatedLedgerDimension from dimSynchronizeDetail
                                    where dimSynchronizeDetail.OriginalLedgerDimension == tamDeduction.DeductOffLedgerDimension
                                        && dimSynchronizeDetail.OriginalLedgerDimension != dimSynchronizeDetail.UpdatedLedgerDimension
                                        && dimSynchronizeDetail.ProviderStatusTrackingId == _synchronizationRequest.parmProviderStatusTrackingId()
                                exists join dimSynchronizeLedgerDetail
                                    where dimSynchronizeLedgerDetail.DataArea == tamDeduction.DataAreaId
                                        && dimSynchronizeLedgerDetail.BatchJobId == batchJobId;

                            info(strFmt("@Dimension:StructureSynchronizationProviderLogPerCompany", tamDeduction.rowCount(), tableId2PName(tamDeduction.TableId), company.Id));

                            activityContext.addCustomProperty('MethodName', methodStr(TAMDeductionDimensionStructureSynchronizationProvider, updateProviderReferencesV2));
                            activityContext.addCustomProperty('WereRecordsUpdated', int2str(tamDeduction.rowCount() > 0));
                        }
                    }
                }
            }

            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() > MaxRetryCount)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>