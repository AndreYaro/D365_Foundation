<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransLink_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class populates reporting date information for a correction transaction.
/// </summary>

class LedgerTransLink_RU
{
    Common           transOriginal;
    Common           transCorrection;
    ReportingDate_RU reportingDate;
    boolean          isOrigPassed;

    FieldId          voucherField;
    FieldId          accountingDateField;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _original, Common _correction)
    {
        transOriginal   = _original.data();
        transCorrection = _correction.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDateField</Name>
				<Source><![CDATA[
    public FieldId parmAccountingDateField(FieldId _accountingDateField = accountingDateField)
    {
        accountingDateField = _accountingDateField;
        return accountingDateField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsOrigPassed</Name>
				<Source><![CDATA[
    public boolean parmIsOrigPassed(boolean _isOrigPassed = isOrigPassed)
    {
        isOrigPassed = _isOrigPassed;
        return isOrigPassed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingDate</Name>
				<Source><![CDATA[
    public ReportingDate_RU parmReportingDate(ReportingDate_RU _reportingDate = reportingDate)
    {
        reportingDate = _reportingDate;
        return reportingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucherField</Name>
				<Source><![CDATA[
    public FieldId parmVoucherField(FieldId _voucherField = voucherField)
    {
        voucherField = _voucherField;
        return voucherField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseRefFields</Name>
				<Source><![CDATA[
    #define.Voucher('Voucher')
    #define.AccountingDate('AccountingDate')
    private container parseRefFields(Common _trans)
    {
        TransLink_RU    transLink;
        Voucher         voucher;
        TransDate       transDate;

        voucherField        = voucherField          ? voucherField          : fieldname2id(_trans.TableId, #Voucher);
        accountingDateField = accountingDateField   ? accountingDateField   : fieldname2id(_trans.TableId, #AccountingDate);

        if (! voucherField)
        {
            throw error(strfmt("@GLS105522", "@SYS12371"));
        }

        if (! accountingDateField)
        {
            throw error(strfmt("@GLS105522", "@SYS7402"));
        }

        voucher     = _trans.(voucherField);
        transDate   = _trans.(accountingDateField);

        transLink = TransLink_RU::findSec(_trans.TableId, _trans.RecId);
        if (transLink.AccountingDate)
        {
            transDate = transLink.AccountingDate;
        }

        return [voucher, transDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTrans</Name>
				<Source><![CDATA[
    private void processTrans()
    {
        Voucher                     voucherCorr,
                                    voucherOrig;
        TransDate                   transDateCorr,
                                    transDateOrig;
        FieldId                     reportingDateFieldId;
        LedgerVoucherReportDate_RU  ledgerVoucherReportDate;

        [voucherCorr, transDateCorr] = this.parseRefFields(transCorrection);

        if (LedgerVoucherReportDate_RU::exist(voucherCorr, transDateCorr))
        {
            return;
        }

        if (isOrigPassed)
        {
            [voucherOrig, transDateOrig] = this.parseRefFields(transOriginal);

            ledgerVoucherReportDate = LedgerVoucherReportDate_RU::find(voucherOrig, transDateOrig);
        }

        if (! reportingDate)
        {
            switch (transCorrection.TableId)
            {
                case tablenum(RAssetTrans) :
                    reportingDateFieldId = fieldnum(RAssetTrans, TransDate);
                    break;
                case tablenum(RDeferralsTrans) :
                    reportingDateFieldId = fieldnum(RDeferralsTrans, TransDate);
                    break;
            }

            if (reportingDateFieldId)
            {
                reportingDate = transCorrection.(reportingDateFieldId);
            }
        }

        if (! ledgerVoucherReportDate)
        {
            ledgerVoucherReportDate.ReportingDate = reportingDate ? reportingDate : (transDateOrig ? transDateOrig : transDateCorr);
        }

        ledgerVoucherReportDate.Voucher         = voucherCorr;
        ledgerVoucherReportDate.AccountingDate  = transDateCorr;
        ledgerVoucherReportDate.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.processTrans();

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static LedgerTransLink_RU construct(Common _originalTrans, Common _correctionTrans)
    {
        return new LedgerTransLink_RU(_originalTrans, _correctionTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct and initializes the class instance based on passed correction and original transactions.
    /// </summary>
    /// <param name="_correctionTrans">
    /// A table buffer containing correction transaction.
    /// </param>
    /// <param name="_originalTrans">
    /// A table buffer containing original transaction.
    /// </param>
    /// <returns>
    /// The class instance.
    /// </returns>

    public static LedgerTransLink_RU newTrans(Common _correctionTrans, Common _originalTrans = null)
    {
        LedgerTransLink_RU ledgerTransLink;

        if ((! prmIsDefault(_originalTrans) && _correctionTrans.TableId != _originalTrans.TableId))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ledgerTransLink = LedgerTransLink_RU::construct(_originalTrans, _correctionTrans);
        ledgerTransLink.parmIsOrigPassed(! prmIsDefault(_originalTrans));

        switch (_correctionTrans.TableId)
        {
            case tableNum(RAssetTrans):
                ledgerTransLink.parmAccountingDateField(fieldNum(RAssetTrans, TransDate));
                break;

            case tableNum(RDeferralsTrans):
                ledgerTransLink.parmAccountingDateField(fieldNum(RDeferralsTrans, TransDate));
                break;
        }

        return ledgerTransLink;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>