<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationDirectiveAcceptanceTestContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLocationDirectiveAcceptanceTestContext</c> class is used to indicate the current code is running in the scope of a location directive acceptance test.
/// </summary>
internal final class WHSLocationDirectiveAcceptanceTestContext implements System.IDisposable
{
    private static WHSLocationDirectiveAcceptanceTestContext instance;
    private WHSLocationDirectiveAcceptanceTestResultContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        instance = this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContract</Name>
				<Source><![CDATA[
    internal static WHSLocationDirectiveAcceptanceTestContext newFromContract(WHSLocationDirectiveAcceptanceTestResultContract _contract)
    {
        Debug::assert(_contract != null);

        var context = WHSLocationDirectiveAcceptanceTestContext::construct();
        context.contract = _contract;
        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSLocationDirectiveAcceptanceTestContext construct()
    {
        return new WHSLocationDirectiveAcceptanceTestContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean isActive()
    {
        return instance != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logIfActive</Name>
				<Source><![CDATA[
    public static void logIfActive(str _message)
    {
        if (instance)
        {
            var contract = instance.contract;
            contract.appendToLog(_message);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>