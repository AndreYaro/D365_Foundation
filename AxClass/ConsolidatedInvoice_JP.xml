<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConsolidatedInvoice_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ConsolidatedInvoice_JP</c> class provides a dialog to create consolidated invoice.
/// </summary>
public class ConsolidatedInvoice_JP extends RunBaseBatch implements BatchRetryable
{
    protected DialogField dialogExecutionDate;
    protected DialogField dialogConsDateSpecified;
    protected DialogField dialogIsConsDateSpecified;
    protected QueryRun queryRun;
    protected CustVendExecutionDate_JP executionDate;
    protected CustVendConsDate_JP consDateSpecified;
    protected NoYesId isConsDateSpecified;
    protected CurrencyCode consCurrency;
    private DialogField dialogConsCurrencySpecified;
    private boolean isTaxDifferencePostingOnJapanConsInvoiceEnabled = TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(false);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase dialog;
        FormBuildTabPageControl queryTab;

        dialog = super();

        dialog.caption("@GLS60235");
        dialogExecutionDate = dialog.addFieldValue(extendedTypeStr(CustVendExecutionDate_JP), executionDate, "@SYS78201");

        if (!executionDate)
        {
            dialogExecutionDate.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        if (isTaxDifferencePostingOnJapanConsInvoiceEnabled)
        {
            dialogConsCurrencySpecified = dialog.addFieldValue(extendedTypeStr(CurrencyCode), consCurrency, "@AccountsReceivable:ConsolidationCurrency");
            dialogConsCurrencySpecified.value(Ledger::accountingCurrency());
            dialogConsCurrencySpecified.allowEdit(false);
        }

        dialog.addGroup("@GLS60065");
        dialogIsConsDateSpecified = dialog.addFieldValue(extendedTypeStr(NoYesId), isConsDateSpecified, "@AccountsReceivable:UseConsolidationDateSpecifiedBelow");
        dialogIsConsDateSpecified.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(ConsolidatedInvoice_JP, modifiedIsConsDateSpecified),
            this);

        dialogConsDateSpecified = dialog.addFieldValue(extendedTypeStr(CustVendConsDate_JP), consDateSpecified, "@GLS60065");
        if (!dialogIsConsDateSpecified.value())
        {
            dialogConsDateSpecified.allowEdit(false);
            dialogConsDateSpecified.value('');
        }

        queryTab = dialog.formBuildDesign().control("@SYS13579");
        if (queryTab)
        {
            queryTab.fastTabExpanded(true);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedIsConsDateSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the modified method for control specify a consolidation day.
    /// </summary>
    /// <param name="_control">
    /// Control for specify a consolidation day.
    /// </param>
    /// <returns>
    /// True if control value is modified; otherwise, false.
    /// </returns>
    public boolean modifiedIsConsDateSpecified(Object _control)
    {
        // Default consolidation day as Execution date when the user checked Specify a consolidation day.
        // Set consolidation day as empty when the user clears Specify a consolidation day.
        if (!dialogIsConsDateSpecified.value())
        {
            dialogConsDateSpecified.allowEdit(false);
            dialogConsDateSpecified.value('');
        }
        else
        {
            dialogConsDateSpecified.allowEdit(true);
            dialogConsDateSpecified.value(dialogExecutionDate.value());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets data from dialog.
    /// </summary>
    /// <returns>
    /// False if CustVendConsInvoiceTaxDifferencePosting feature is enabled
    /// and consolidation currency is not specified; otherwise true.
    /// </returns>
    public boolean getFromDialog()
    {
        super();

        executionDate = dialogExecutionDate.value();
        isConsDateSpecified = dialogIsConsDateSpecified.value();
        consDateSpecified = dialogConsDateSpecified.value();

        if (isTaxDifferencePostingOnJapanConsInvoiceEnabled)
        {
            consCurrency = dialogConsCurrencySpecified.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is in the dialog and if a select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Filter button to the dialog box.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid instance of the <c>QueryRun</c> class. If you change the return value to false, the
    ///    button will no longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showIndexFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    If this method returns false, it will not look for the first enabled index when you are adding query
    ///    range fields to the dialog.
    /// </summary>
    /// <param name = "id">The table id of the table in the query</param>
    /// <returns>If return false then hidden index fields on the dialog</returns>
    public boolean showIndexFields(tableId id)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method for validate consolidation date and execution date.
    /// </summary>
    /// <param name = "calledFrom">The called from</param>
    /// <returns>If consolidation date be greater than execution Date,Then return false.</returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (dialogExecutionDate.value() < dialogConsDateSpecified.value())
        {
            return checkFailed("@AccountsReceivable:ValidateConsolidationDateAndExecutionDate");
        }

        if (isTaxDifferencePostingOnJapanConsInvoiceEnabled)
        {
            if(dialogConsCurrencySpecified.value() == '')
            {
                return checkFailed("@AccountsReceivable:ConsolidationCurrencyMissingError");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>