<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EPaymentXMLFormatComplement_V4_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EPaymentXMLFormatComplement_V4_MX extends ePaymentXMLFormatComplement_MX
{
    private boolean isImpuestosPProcessing;
    private boolean isImpuestosDRProcessing;
    private boolean isRetencionesPProcessing;
    private Map mapTaxAmountsRetencionesTotal;
    private Map mapTaxAmountsTrasladosTotal;
    private boolean isAdjustBaseAndTaxRatioFlightEnabled;
    private int impuestosPDecimals;
    private const str ExemptRateType = 'Exento';
    private const str StandardRateType = 'Tasa';
    private const str CuotaRateType = 'Cuota';
    private str taxRateType;
    private ExchRate paymentExchangeRate;

    private AmountMST totalRetencionesIVA;
    private AmountMST totalRetencionesISR;
    private AmountMST totalRetencionesIEPS;
    private AmountMST totalTrasladosBaseIVA16;
    private AmountMST totalTrasladosImpuestoIVA16;
    private AmountMST totalTrasladosBaseIVA8;
    private AmountMST totalTrasladosImpuestoIVA8;
    private AmountMST totalTrasladosBaseIVA0;
    private AmountMST totalTrasladosImpuestoIVA0;
    private AmountMST totalTrasladosBaseIVAExento;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCfdiNameSpace</Name>
				<Source><![CDATA[
    protected str getCfdiNameSpace()
    {
        return 'http://www.sat.gob.mx/cfd/4';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPagoNamespace</Name>
				<Source><![CDATA[
    protected str getPagoNamespace()
    {
        return 'http://www.sat.gob.mx/Pagos20';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPagoPrefix</Name>
				<Source><![CDATA[
    protected str getPagoPrefix()
    {
        return 'pago20';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchemaLocation</Name>
				<Source><![CDATA[
    protected str getSchemaLocation()
    {
        return 'http://www.sat.gob.mx/cfd/4 http://www.sat.gob.mx/sitio_internet/cfd/4/cfdv40.xsd';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComprobanteVersion</Name>
				<Source><![CDATA[
    protected str getComprobanteVersion()
    {
        return '4.0';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVersion</Name>
				<Source><![CDATA[
    protected str getVersion()
    {
        return '2.0';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPagosSchemaLocation</Name>
				<Source><![CDATA[
    protected str getPagosSchemaLocation()
    {
        return 'http://www.sat.gob.mx/Pagos20 http://www.sat.gob.mx/sitio_internet/cfd/Pagos/Pagos20.xsd';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createComprobanteElement</Name>
				<Source><![CDATA[
    protected XmlElement createComprobanteElement()
    {
        XmlElement comprobanteElement = super();

        comprobanteElement.setAttribute('Exportacion', '01');

        return comprobanteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReceptorElement</Name>
				<Source><![CDATA[
    protected XmlElement createReceptorElement()
    {
        XmlElement receptorElement = super();

        CustTable custTable = CustTable::find(payment.AccountNum);
        Rfc_MX recipientRfc = this.getRecipientRfc();

        receptorElement.setAttribute(
            'DomicilioFiscalReceptor',
            recipientRfc == EPaymentXMLFormat_MX::ForeignerRFC ?
                this.getLugarExpedicion() :
                custTable.postalAddress().ZipCode);

        receptorElement.setAttribute('RegimenFiscalReceptor', custTable.TaxRegimeCode_MX);

        return receptorElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConceptoElement</Name>
				<Source><![CDATA[
    protected XmlElement createConceptoElement(Common _conceptoSource = null)
    {
        XmlElement conceptoElement = super(_conceptoSource);
        XMLElement impuestosElement = conceptoElement.getNamedElement('cfdi:Impuestos');
        conceptoElement.setAttribute('ObjetoImp', impuestosElement ? '02' : '01');

        return conceptoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendPaymentsElement</Name>
				<Source><![CDATA[
    protected void appendPaymentsElement(XmlElement _comprobanteElement)
    {
        if (this.isComplementoNeeded())
        {
            XmlElement paymentsElement, singlePaymentElement, complementoElement, totalsElement;

            this.changePrefixAndXmlns(this.getPagoPrefix(), this.getPagoNamespace());
            this.setXmlNsAttribute(_comprobanteElement);
            paymentsElement = this.createElement('Pagos');
            paymentsElement.setAttribute('Version', this.getVersion());
            singlePaymentElement = this.createPaymentElement();
            totalsElement = this.createTotalsElement();
            paymentsElement.appendChild(totalsElement);
            paymentsElement.appendChild(singlePaymentElement);

            this.changePrefixAndXmlns(cfdiPrefix, this.getCfdiNameSpace());
            complementoElement = this.createElement('Complemento');
            complementoElement.appendChild(paymentsElement);
            _comprobanteElement.appendChild(complementoElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotalsElement</Name>
				<Source><![CDATA[
    private XMLElement createTotalsElement()
    {
        XmlElement totalsElement = this.createElement('Totales');
        Currency accountingCurrency = Currency::find(Ledger::accountingCurrency(CompanyInfo::current()));
        
        this.setTotalsAttribute(totalsElement, 'TotalRetencionesISR', totalRetencionesISR, accountingCurrency.DecimalsCount_MX);
        this.setTotalsAttribute(totalsElement, 'TotalRetencionesIVA', totalRetencionesIVA, accountingCurrency.DecimalsCount_MX);
        this.setTotalsAttribute(totalsElement, 'TotalRetencionesIEPS', totalRetencionesIEPS, accountingCurrency.DecimalsCount_MX);
        this.setTotalsAttribute(totalsElement, 'TotalTrasladosBaseIVA16', totalTrasladosBaseIVA16, accountingCurrency.DecimalsCount_MX);
        this.setTotalsAttribute(totalsElement, 'TotalTrasladosImpuestoIVA16', totalTrasladosImpuestoIVA16, accountingCurrency.DecimalsCount_MX);
        this.setTotalsAttribute(totalsElement, 'TotalTrasladosBaseIVA8', totalTrasladosBaseIVA8, accountingCurrency.DecimalsCount_MX);
        this.setTotalsAttribute(totalsElement, 'TotalTrasladosImpuestoIVA8', totalTrasladosImpuestoIVA8, accountingCurrency.DecimalsCount_MX);
        this.setTotalsAttribute(totalsElement, 'TotalTrasladosBaseIVA0', totalTrasladosBaseIVA0, accountingCurrency.DecimalsCount_MX);
        this.setTotalsAttribute(totalsElement, 'TotalTrasladosImpuestoIVA0', totalTrasladosImpuestoIVA0, accountingCurrency.DecimalsCount_MX, totalTrasladosBaseIVA0 != 0);
        this.setTotalsAttribute(totalsElement, 'TotalTrasladosBaseIVAExento', totalTrasladosBaseIVAExento, accountingCurrency.DecimalsCount_MX);

        AmountMST paymentsTotal = FeatureStateProvider::isFeatureEnabled(IncludeOnlyPPDAmountsInSettlementTotal_MXFeature::instance()) ?
            payment.SettleAmount_MX * decRound(payment.ExchRate / 100, 6) :
            payment.AmountMST;

        totalsElement.setAttribute(
            'MontoTotalPagos',
            this.formatXmlAmountCheckDecimal(abs(paymentsTotal), accountingCurrency.DecimalsCount_MX));

        return totalsElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceElement</Name>
				<Source><![CDATA[
    protected XmlElement createInvoiceElement(EInvoiceJourBaseMap_MX _eInvoice, CustTrans _invoice)
    {
        XmlElement invoiceElement = super(_eInvoice, _invoice);

        List positiveTaxesList = new List(Types::Record);
        List negativeTaxesList = new List(Types::Record);
        conceptoTaxesMap = new Map(Types::Container, Types::Class);

        CustTable custTable = CustTable::find(payment.AccountNum);
        TaxTable taxTable;
        TaxTrans taxTrans;
        CustSettlement settlement;

        while select taxTrans
            where taxTrans.TaxOrigin == TaxOrigin::TaxReversed
                && !(taxTrans.TaxType_MX == TaxType_MX::IEPS && custTable.CFDISkipIEPSTaxes_MX == NoYes::Yes)
        join NegativeTax from taxTable
            where taxTable.TaxCode == taxTrans.TaxCode
        exists join settlement
            where settlement.TransRecId == _invoice.RecId
               && settlement.TransCompany == _invoice.DataAreaId
               && settlement.OffsetRecid == payment.RecId
               && settlement.OffsetCompany == payment.DataAreaId
               && settlement.SettlementVoucher == taxTrans.Voucher
        {
            if (taxTable.NegativeTax)
            {
                positiveTaxesList.addEnd(taxTrans);
                regularPositiveTaxExists = true;
            }
            else
            {
                negativeTaxesList.addEnd(taxTrans);
                regularNegativeTaxExists = true;
            }
        }

        conceptoTaxesMap.insert([_invoice.RecId, 'positive'], positiveTaxesList);
        conceptoTaxesMap.insert([_invoice.RecId, 'negative'], negativeTaxesList);

        currencyCode = _invoice.CurrencyCode;
        isImpuestosDRProcessing = true;
        XmlElement impuestosDRElement = this.createImpuestosElement(_invoice);
        isImpuestosDRProcessing = false;
        this.appendChildIfNotNull(invoiceElement, impuestosDRElement);
        invoiceElement.setAttribute('ObjetoImpDR', impuestosDRElement ? '02' : '01');

        if (!invoiceElement.getAttribute(this.invoiceExchangeRateAttributeName()))
        {
            invoiceElement.setAttribute(this.invoiceExchangeRateAttributeName(), '1');
        }

        return invoiceElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentElement</Name>
				<Source><![CDATA[
    protected XmlElement createPaymentElement()
    {
        mapTaxAmountsRetencionesTotal = new Map(Types::Container, Types::Container);
        mapTaxAmountsTrasladosTotal = new Map(Types::Container, Types::Container);

        XmlElement paymentElement = super();

        if (!paymentElement.getAttribute('TipoCambioP'))
        {
            paymentElement.setAttribute('TipoCambioP', '1');
        }

        if (regularPositiveTaxExists || regularNegativeTaxExists)
        {
            isImpuestosPProcessing = true;
            currencyCode = payment.CurrencyCode;
            XmlElement impuestosPElement = this.createElement(this.impuestosElementName());

            isRetencionesPProcessing = true;
            XmlElement retencionesPElement = this.createElement(this.retencionesElementName());
            MapEnumerator me = mapTaxAmountsRetencionesTotal.getEnumerator();
            while (me.moveNext())
            {
                TaxTrans taxTrans;
                [taxTrans.TaxType_MX, taxTrans.TaxValue, taxRateType] = me.currentKey();
                [taxTrans.SourceBaseAmountCur, taxTrans.SourceTaxAmountCur, taxTrans.TaxBaseQty] = me.currentValue();
                this.processTaxSection(retencionesPElement, taxTrans, false);
            }
            this.appendChildIfNotNull(impuestosPElement, retencionesPElement.hasChildNodes() ? retencionesPElement : null);
            isRetencionesPProcessing = false;

            XmlElement trasladosPElement = this.createElement(this.trasladosElementName());
            me = mapTaxAmountsTrasladosTotal.getEnumerator();
            while (me.moveNext())
            {
                TaxTrans taxTrans;
                [taxTrans.TaxType_MX, taxTrans.TaxValue, taxRateType] = me.currentKey();
                [taxTrans.SourceBaseAmountCur, taxTrans.SourceTaxAmountCur, taxTrans.TaxBaseQty] = me.currentValue();
                this.processTaxSection(trasladosPElement, taxTrans, true);
            }
            this.appendChildIfNotNull(impuestosPElement, trasladosPElement.hasChildNodes() ? trasladosPElement : null);

            this.appendChildIfNotNull(paymentElement, impuestosPElement.hasChildNodes() ? impuestosPElement : null);
            isImpuestosPProcessing = false;
        }

        return paymentElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetMetodoDePagoDR</Name>
				<Source><![CDATA[
    protected boolean shouldSetMetodoDePagoDR()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceExchangeRateAttributeName</Name>
				<Source><![CDATA[
    protected str invoiceExchangeRateAttributeName()
    {
        return 'EquivalenciaDR';
    }

]]></Source>
			</Method>
			<Method>
				<Name>impuestosElementName</Name>
				<Source><![CDATA[
    protected str impuestosElementName()
    {
        return isImpuestosPProcessing ? 'ImpuestosP' : 'ImpuestosDR';
    }

]]></Source>
			</Method>
			<Method>
				<Name>trasladosElementName</Name>
				<Source><![CDATA[
    protected str trasladosElementName()
    {
        return isImpuestosPProcessing ? 'TrasladosP' : 'TrasladosDR';
    }

]]></Source>
			</Method>
			<Method>
				<Name>trasladoElementName</Name>
				<Source><![CDATA[
    protected str trasladoElementName()
    {
        return isImpuestosPProcessing ? 'TrasladoP' : 'TrasladoDR';
    }

]]></Source>
			</Method>
			<Method>
				<Name>retencionesElementName</Name>
				<Source><![CDATA[
    protected str retencionesElementName()
    {
        return isImpuestosPProcessing ? 'RetencionesP' : 'RetencionesDR';
    }

]]></Source>
			</Method>
			<Method>
				<Name>retencionElementName</Name>
				<Source><![CDATA[
    protected str retencionElementName()
    {
        return isImpuestosPProcessing ? 'RetencionP' : 'RetencionDR';
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAttributeName</Name>
				<Source><![CDATA[
    protected str baseAttributeName()
    {
        return isImpuestosPProcessing ? 'BaseP' : 'BaseDR';
    }

]]></Source>
			</Method>
			<Method>
				<Name>impuestoAttributeName</Name>
				<Source><![CDATA[
    protected str impuestoAttributeName()
    {
        return isImpuestosPProcessing ? 'ImpuestoP' : 'ImpuestoDR';
    }

]]></Source>
			</Method>
			<Method>
				<Name>tipoFactorAttributeName</Name>
				<Source><![CDATA[
    protected str tipoFactorAttributeName()
    {
        return isImpuestosPProcessing ? 'TipoFactorP' : 'TipoFactorDR';
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasaOCuotaAttributeName</Name>
				<Source><![CDATA[
    protected str tasaOCuotaAttributeName()
    {
        return isImpuestosPProcessing ? 'TasaOCuotaP' : 'TasaOCuotaDR';
    }

]]></Source>
			</Method>
			<Method>
				<Name>importeAttributeName</Name>
				<Source><![CDATA[
    protected str importeAttributeName()
    {
        return isImpuestosPProcessing ? 'ImporteP' : 'ImporteDR';
    }

]]></Source>
			</Method>
			<Method>
				<Name>usoCFDI</Name>
				<Source><![CDATA[
    protected str usoCFDI()
    {
        return 'CP01';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isImpuestosDRProcessing</Name>
				<Source><![CDATA[
    protected boolean isImpuestosDRProcessing()
    {
        return isImpuestosDRProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isImpuestosPProcessing</Name>
				<Source><![CDATA[
    protected boolean isImpuestosPProcessing()
    {
        return isImpuestosPProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotalsAttribute</Name>
				<Source><![CDATA[
    private void setTotalsAttribute(
        XmlElement _totalsElement,
        str _attributeName,
        AmountMST _attributeValue,
        int _decimalsCount,
        boolean _skipValueCheck = false)
    {
        if (_attributeValue || _skipValueCheck)
        {
            _totalsElement.setAttribute(_attributeName, this.formatXmlAmountCheckDecimal(abs(_attributeValue), _decimalsCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxSection</Name>
				<Source><![CDATA[
    protected void processTaxSection(XmlElement _conceptoRelatedElement, TaxTrans _taxTrans, boolean _isTraslado)
    {
        if (this.isImpuestosDRProcessing() && taxRateType == StandardRateType)
        {
            [_taxTrans.SourceBaseAmountCur, _taxTrans.SourceTaxAmountCur] = this.adjustBaseAndTaxRatio(
                _taxTrans.SourceBaseAmountCur,
                _taxTrans.SourceTaxAmountCur,
                _taxTrans.TaxValue);
        }

        super(_conceptoRelatedElement, _taxTrans, _isTraslado);

        if (this.isImpuestosDRProcessing())
        {
            ExchRate exchRateRounded = str2Num(this.formatExchangeRateTenDecimals(exchangeRate));
            _taxTrans.SourceBaseAmountCur = _taxTrans.SourceBaseAmountCur / exchRateRounded;
            _taxTrans.SourceTaxAmountCur = _taxTrans.SourceTaxAmountCur / exchRateRounded;

            this.groupTaxAmounts(_isTraslado ? mapTaxAmountsTrasladosTotal : mapTaxAmountsRetencionesTotal, _taxTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustBaseAndTaxRatio</Name>
				<Source><![CDATA[
    private container adjustBaseAndTaxRatio(TaxBase _taxBase, TaxAmount _taxAmount, TaxValue _taxValue)
    {
        TaxBase newTaxBase = _taxBase;
        TaxAmount newTaxAmount = _taxAmount;

        if (_taxValue && isAdjustBaseAndTaxRatioFlightEnabled)
        {
            newTaxAmount = (_taxBase + _taxAmount) * _taxValue / (100 + _taxValue);
            newTaxAmount = str2Num(this.formatXmlAmount(newTaxAmount, currencyCode)) * sign(_taxAmount);
            newTaxBase = (_taxBase + _taxAmount) - newTaxAmount;
        }

        return [newTaxBase, newTaxAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTaxSection</Name>
				<Source><![CDATA[
    protected void fillTaxSection(
        XmlElement _taxSection,
        TaxTrans _taxTrans,
        boolean _exportTaxBase = true,
        boolean _exportRateType = true,
        boolean _exportTaxRate = true)
    {
        AmountCur baseAmount = _taxTrans.SourceBaseAmountCurRegulated ?
                               _taxTrans.SourceBaseAmountCurRegulated :
                               _taxTrans.SourceBaseAmountCur;

        AmountCur taxAmount = _taxTrans.SourceRegulateAmountCur ?
                              _taxTrans.SourceRegulateAmountCur :
                              _taxTrans.SourceTaxAmountCur;

        if (this.isImpuestosPProcessing())
        {
            baseAmount = roundDownDec(baseAmount, impuestosPDecimals);
            taxAmount = roundDownDec(taxAmount, impuestosPDecimals);
            this.updateTotals(baseAmount, taxAmount, _taxTrans);
        }

        if (_exportTaxBase)
        {
            baseAmount = (taxRateType == CuotaRateType) ? abs(_taxTrans.TaxBaseQty) : baseAmount;

            str baseAmountStr = this.isImpuestosPProcessing()
                ? this.formatXmlAmountCheckDecimal(baseAmount, impuestosPDecimals)
                : this.formatXmlAmount(baseAmount, currencyCode);

            _taxSection.setAttribute(this.baseAttributeName(), baseAmountStr);
        }

        _taxSection.setAttribute(this.impuestoAttributeName(), this.formatTaxType(_taxTrans.TaxType_MX));

        if (_exportRateType)
        {
            _taxSection.setAttribute(this.tipoFactorAttributeName(), taxRateType);
        }

        if (taxRateType != ExemptRateType)
        {
            if (_exportTaxRate)
            {
                TaxValue taxValue = (taxRateType == CuotaRateType) ? _taxTrans.TaxValue : _taxTrans.TaxValue / 100;
                _taxSection.setAttribute(this.tasaOCuotaAttributeName(), num2str(abs(taxValue), 1, 6, 1, 0));
            }

            str taxAmountStr = this.isImpuestosPProcessing()
                ? this.formatXmlAmountCheckDecimal(taxAmount, impuestosPDecimals)
                : this.formatXmlAmount(taxAmount, currencyCode);

            _taxSection.setAttribute(this.importeAttributeName(), taxAmountStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupTaxAmounts</Name>
				<Source><![CDATA[
    protected void groupTaxAmounts(Map _mapTransAmounts, TaxTrans _taxTrans)
    {
        AmountCur baseAmount;
        AmountCur taxAmount;
        Qty baseQty;

        container key = _taxTrans.RecId
            ? [_taxTrans.TaxType_MX, this.getTaxValue(_taxTrans), this.formatRateType(_taxTrans)]
            : [_taxTrans.TaxType_MX, _taxTrans.TaxValue, taxRateType];

        if (_mapTransAmounts.exists(key))
        {
            [baseAmount, taxAmount, baseQty] = _mapTransAmounts.lookup(key);
        }

        baseAmount += _taxTrans.SourceBaseAmountCurRegulated ?
                      _taxTrans.SourceBaseAmountCurRegulated :
                      _taxTrans.SourceBaseAmountCur;

        taxAmount += _taxTrans.SourceRegulateAmountCur ?
                     _taxTrans.SourceRegulateAmountCur :
                     _taxTrans.SourceTaxAmountCur;

        baseQty += _taxTrans.TaxBaseQty;

        _mapTransAmounts.insert(key, [baseAmount, taxAmount, baseQty]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxValue</Name>
				<Source><![CDATA[
    private TaxValue getTaxValue(TaxTrans _taxTrans)
    {
        return TaxTable::find(_taxTrans.TaxCode).TaxOnTax
            ? TaxData::find(_taxTrans.TaxCode, _taxTrans.TransDate, _taxTrans.TaxBaseAmount).TaxValue
            : _taxTrans.TaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatRateType</Name>
				<Source><![CDATA[
    protected str formatRateType(TaxTrans _taxTrans)
    {
        str rateType = StandardRateType;

        if (_taxTrans.ExemptTax || _taxTrans.TaxDirection == TaxDirection::TaxExemptSales)
        {
            rateType = ExemptRateType;
        }
        else if (TaxTable::find(_taxTrans.TaxCode).TaxBase == TaxBaseType::AmountByUnit)
        {
            rateType = CuotaRatetype;
        }

        return rateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetencionesElement</Name>
				<Source><![CDATA[
    protected XmlElement createRetencionesElement(RecId _sourceRecId)
    {
        XmlElement retenciones = this.createElement(this.retencionesElementName());

        if (conceptoTaxesMap.exists([_sourceRecId, 'positive']))
        {
            TaxTrans taxTrans;
            Map mapTaxAmounts = new Map(Types::Container, Types::Container);

            List positiveTaxesList = conceptoTaxesMap.lookup([_sourceRecId, 'positive']);
            ListEnumerator enumerator = positiveTaxesList.getEnumerator();
            while (enumerator.moveNext())
            {
                taxTrans = enumerator.current();
                this.groupTaxAmounts(mapTaxAmounts, taxTrans);
            }

            MapEnumerator me = mapTaxAmounts.getEnumerator();
            while (me.moveNext())
            {
                taxTrans.clear();

                [taxTrans.TaxType_MX, taxTrans.TaxValue, taxRateType] = me.currentKey();
                [taxTrans.SourceBaseAmountCur, taxTrans.SourceTaxAmountCur, taxTrans.TaxBaseQty] = me.currentValue();

                this.processTaxSection(retenciones, taxTrans, false);
            }

            if (mapTaxAmounts.elements())
            {
                return retenciones;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrasladosElement</Name>
				<Source><![CDATA[
    protected XmlElement createTrasladosElement(RecId _sourceRecId)
    {
        XmlElement traslados = this.createElement(this.trasladosElementName());

        if (conceptoTaxesMap.exists([_sourceRecId, 'negative']))
        {
            TaxTrans taxTrans;
            Map mapTaxAmounts = new Map(Types::Container, Types::Container);

            List negativeTaxesList = conceptoTaxesMap.lookup([_sourceRecId, 'negative']);
            ListEnumerator enumerator = negativeTaxesList.getEnumerator();
            while (enumerator.moveNext())
            {
                taxTrans = enumerator.current();
                this.groupTaxAmounts(mapTaxAmounts, taxTrans);
            }

            MapEnumerator me = mapTaxAmounts.getEnumerator();
            while (me.moveNext())
            {
                taxTrans.clear();

                [taxTrans.TaxType_MX, taxTrans.TaxValue, taxRateType] = me.currentKey();
                [taxTrans.SourceBaseAmountCur, taxTrans.SourceTaxAmountCur, taxTrans.TaxBaseQty] = me.currentValue();

                this.processTaxSection(traslados, taxTrans, true);
            }

            if (mapTaxAmounts.elements())
            {
                return traslados;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    private void updateTotals(TaxBase _baseAmount, TaxAmount _taxAmount, TaxTrans _taxTrans)
    {
        if (isRetencionesPProcessing)
        {
            switch (_taxTrans.TaxType_MX)
            {
                case TaxType_MX::IVA:
                    totalRetencionesIVA += _taxAmount * paymentExchangeRate;
                    break;

                case TaxType_MX::ISR:
                    totalRetencionesISR += _taxAmount * paymentExchangeRate;
                    break;

                case TaxType_MX::IEPS:
                    totalRetencionesIEPS += _taxAmount * paymentExchangeRate;
                    break;

                default:
                    break;
            }
        }
        else if (_taxTrans.TaxType_MX == TaxType_MX::IVA)
        {
            if (taxRateType == ExemptRateType)
            {
                totalTrasladosBaseIVAExento += _baseAmount * paymentExchangeRate;
            }
            else
            {
                switch (abs(_taxTrans.TaxValue))
                {
                    case 0:
                        totalTrasladosBaseIVA0 += _baseAmount * paymentExchangeRate;
                        totalTrasladosImpuestoIVA0 += _taxAmount * paymentExchangeRate;
                        break;

                    case 8:
                        totalTrasladosBaseIVA8 += _baseAmount * paymentExchangeRate;
                        totalTrasladosImpuestoIVA8 += _taxAmount * paymentExchangeRate;
                        break;

                    case 16:
                        totalTrasladosBaseIVA16 += _baseAmount * paymentExchangeRate;
                        totalTrasladosImpuestoIVA16 += _taxAmount * paymentExchangeRate;
                        break;

                    default:
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXML</Name>
				<Source><![CDATA[
    public XmlDocument generateXML()
    {
        isAdjustBaseAndTaxRatioFlightEnabled = CFDIAdjustBaseAndTaxRatioInPaymComplementFlight::instance().isEnabled();
        impuestosPDecimals = 6;
        paymentExchangeRate = str2num(this.formatExchangeRateAmount(payment.ExchRate / 100));

        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>