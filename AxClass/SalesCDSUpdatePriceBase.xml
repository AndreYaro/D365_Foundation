<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCDSUpdatePriceBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class SalesCDSUpdatePriceBase
{
    private SalesTotalsCalculateInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updatePrices</Name>
				<Source><![CDATA[
    internal abstract List updatePrices()
    {   
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    internal abstract List updateTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromRecord</Name>
				<Source><![CDATA[
    internal static SalesCDSUpdatePriceBase newFromRecord(Common _common)
    {
        switch (_common.TableId)
        {
            case tableNum(SalesOrderHeaderD365SalesEntity):
                return SalesOrderD365SalesEntityUpdatePrice::newFromRecord(_common);

            case tableNum(SalesQuotationHeaderD365SalesEntity):
                return SalesQuotationD365SalesEntityUpdatePrice::newFromRecord(_common);

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    internal SalesTotalsCalculateInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = SalesTotalsCalculateInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>