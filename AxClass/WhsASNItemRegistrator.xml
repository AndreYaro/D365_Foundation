<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsASNItemRegistrator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WhsASNItemRegistrator
{
    protected WhsWorkCreateLP    workCreate;

    private WHSUOMStructure     locStructure;
    private WHSASNItem          asnItem;
    private InventDim           inventDim;
    private InventDim           previousInventDim;
    private InventHandlingQty   handlingQty;
    private WHSLoadLine         loadLine;
    private WHSLicensePlateId   registerLP;
    private WHSLicensePlateId   previousRegisterLP;
    private WHSLoadLineRefRecId previousLoadLineRecId;
    private WHSTransWeight      catchWeight;
    private ItemId              currentItemInRegisterASNItem;

    private WHSTransferOrderReceivingProcess transferOrderReceivingProcess;

    private WHSInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WhsASNItemRegistrator construct()
    {
        return new WhsASNItemRegistrator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentItemInRegisterASNItem</Name>
				<Source><![CDATA[
    internal ItemId parmCurrentItemInRegisterASNItem()
    {
        return currentItemInRegisterASNItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWhsWorkCreateLP</Name>
				<Source><![CDATA[
    internal void initFromWhsWorkCreateLP(WhsWorkCreateLP _whsWorkCreateLP)
    {
        workCreate = _whsWorkCreateLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupingValues</Name>
				<Source><![CDATA[
    private void setGroupingValues()
    {
        if (previousLoadLineRecId != asnItem.LoadLineRefRecId)
        {
            loadLine = WHSLoadLine::findbyRecId(asnItem.LoadLineRefRecId);
            previousLoadLineRecId = asnItem.LoadLineRefRecId;
        }
        
        previousRegisterLP = registerLP;

        if (previousInventDim.InventDimId != inventDim.InventDimId)
        {
            previousInventDim.data(inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasGroupingChanged</Name>
				<Source><![CDATA[
    private boolean hasGroupingChanged()
    {
        return previousRegisterLP &&
                (previousLoadLineRecId          != asnItem.LoadLineRefRecId ||
                 previousRegisterLP             != registerLP               ||
                 previousInventDim.InventDimId  != inventDim.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSums</Name>
				<Source><![CDATA[
    private void updateSums()
    {
        handlingQty += WHSCatchWeightHelper::convertInventQuantity(
                                                  asnItem.ItemId,
                                                  asnItem.UOM,
                                                  asnItem.Qty,
                                                  asnItem.InventDimId);
        catchWeight += asnItem.CapturedWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSums</Name>
				<Source><![CDATA[
    private void resetSums()
    {
        handlingQty = 0.0;
        catchWeight = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>licensePlateToRegister</Name>
				<Source><![CDATA[
    protected WHSLicensePlateId licensePlateToRegister(WHSUOMStructure _locStructure)
    {
        return locStructure.LicensePlateParent ? locStructure.LicensePlateParent : locStructure.LicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchForASNUsingParentLicensePlate</Name>
				<Source><![CDATA[
    protected boolean searchForASNUsingParentLicensePlate(WHSUOMStructure _uomStructure)
    {
        if (_uomStructure.HasPacks)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerASNItems</Name>
				<Source><![CDATA[
    public void registerASNItems()
    {
        this.initTransferOrderReceivingProcess();
        currentItemInRegisterASNItem = '';
        WHSLicensePlateId licensePlateId = workCreate.parmStructure().LicensePlateId;

        using (var asnItemsRegistrationContext = this.activities().registerAsnItems(WHSLicensePlate::find(licensePlateId).RecId))
        {
            Counter registeredAsnItemsCount;

            if (WhsASNItemRegistratorSearchOnEitherLPorParentLPFlight::instance().isEnabled())
            {
                boolean searchForASNUsingParentLicensePlate =  this.searchForASNUsingParentLicensePlate(workCreate.parmStructure());

                //we should never have a condition where the licenseplate is both used as parent AND as non-parent
                while select forupdate asnItem
                order by asnItem.LoadLineRefRecId, asnItem.InventDimId
                join locStructure
                    where locStructure.LicensePlateId       == asnItem.LicensePlateId
                        && locStructure.Module              == asnItem.Module
                        && locStructure.ShipmentId          == asnItem.ShipmentId
                        && ((!searchForASNUsingParentLicensePlate && locStructure.LicensePlateId    == LicensePlateId)
                        || (searchForASNUsingParentLicensePlate && locStructure.LicensePlateParent  == LicensePlateId))
                        && locStructure.Module              == workCreate.parmModule()
                {
                    // Call back to workCreate for backwards compatibility
                    if (workCreate.mustRegisterASNItem(asnItem))
                    {
                        inventDim = inventDim::find(asnItem.inventdimid);
                        if (workCreate.isReceiptFromWarehouseAllowed(inventDim.InventLocationId))
                        {
                            registerLP = this.licensePlateToRegister(locStructure);

                            if (this.hasGroupingChanged())
                            {
                                using (var asnItemRegistrationContext = this.activities().registerAsnItem(loadLine.RecId, loadLine.InventTransType))
                                {
                                    // Call back to workCreate for backwards compatibility
                                    workCreate.registerASNItem(loadLine, previousRegisterLP, previousInventDim, handlingQty, catchWeight);
                                }
                                registeredAsnItemsCount ++;
                
                                this.resetSums();
                            }

                            this.setGroupingValues();
            
                            this.updateSums();
            
                            if (!workCreate.parmInventBatchId())
                            {
                                workCreate.parmInventBatchId(inventDim.InventBatchId);
                            }
                        }
                    }
                }
            }
            else
            {
                while select forupdate asnItem
                order by asnItem.LoadLineRefRecId, asnItem.InventDimId
                join locStructure
                    where locStructure.LicensePlateId       == asnItem.LicensePlateId
                        && locStructure.Module              == asnItem.Module
                        && locStructure.ShipmentId          == asnItem.ShipmentId
                        && (locStructure.LicensePlateId     == LicensePlateId
                        ||  locStructure.LicensePlateParent == LicensePlateId)
                        && locStructure.Module              == workCreate.parmModule()
                {
                    // Call back to workCreate for backwards compatibility
                    if (workCreate.mustRegisterASNItem(asnItem))
                    {
                        inventDim = inventDim::find(asnItem.inventdimid);
                        if (workCreate.isReceiptFromWarehouseAllowed(inventDim.InventLocationId))
                        {
                            registerLP = this.licensePlateToRegister(locStructure);

                            if (this.hasGroupingChanged())
                            {
                                using (var asnItemRegistrationContext = this.activities().registerAsnItem(loadLine.RecId, loadLine.InventTransType))
                                {
                                    // Call back to workCreate for backwards compatibility
                                    workCreate.registerASNItem(loadLine, previousRegisterLP, previousInventDim, handlingQty, catchWeight);
                                }
                                registeredAsnItemsCount ++;
                
                                this.resetSums();
                            }

                            this.setGroupingValues();
            
                            this.updateSums();
            
                            if (!workCreate.parmInventBatchId())
                            {
                                workCreate.parmInventBatchId(inventDim.InventBatchId);
                            }
                        }
                    }
                }
            }
            if (previousRegisterLP)
            {
                // Call back to workCreate for backwards compatibility
                workCreate.registerASNItem(loadLine, previousRegisterLP, previousInventDim, handlingQty, catchWeight);
                registeredAsnItemsCount ++;
            }
            
            this.activities().parmRegisteredAsnItemsCount(asnItemsRegistrationContext, registeredAsnItemsCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRegisterASNItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the ASN item must be registered.
    /// </summary>
    /// <param name = "_asnItem">The ASN item.</param>
    /// <returns>true if the ASN item must be registered; otherwise, false.</returns>
    internal protected boolean mustRegisterASNItem(WHSASNItem _asnItem)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerASNItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers an ASN Item.
    /// </summary>
    /// <param name = "_loadLine">The load line.</param>
    /// <param name = "_registerLP">The license plate.</param>
    /// <param name = "_registerInventDim">The inventory dimensions.</param>
    /// <param name = "_totalHandlineQty">The quantity.</param>
    /// <param name = "_totalCatchWeight">The transaction weight.</param>
    internal protected void registerASNItem(
        WHSLoadLine         _loadLine,
        WHSLicensePlateId   _registerLP,
        InventDim           _registerInventDim,
        InventHandlingQty   _totalHandlineQty,
        WHSTransWeight      _totalCatchWeight)
    {
        currentItemInRegisterASNItem = _loadLine.ItemId;

        switch (workCreate.parmModule())
        {
            case WHSModule::Purch:
                if (_loadLine.InventTransType == InventTransType::Purch)
                {
                    boolean isCWItem = PdsGlobal::pdsIsCWItem(_loadLine.ItemId);

                    using (var receivingLoadContext = WHSWorkCreateReceivingLoadContext::constructWithReceivingLoadId(_loadLine.LoadId))
                    {
                        workCreate.registerPurchLineHandlingQty(
                                    _loadLine.InventTransId,
                                    isCWItem ? _totalCatchWeight : _totalHandlineQty,
                                    workCreate.mustIncludeLicensePlate(_registerInventDim, _loadLine.ItemId) ? _registerLP : '',
                                    _registerInventDim.InventDimId,
                                    isCWItem ? _totalHandlineQty : 0);
                    }
                }
                break;

            case WHSModule::Transfer:
                if (_loadLine.InventTransType == InventTransType::TransferOrderShip)
                {
                    this.registerTransferOrderLine(_loadLine, _registerLP, _registerInventDim, _totalHandlineQty, _totalCatchWeight);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerTransferOrderLine</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void registerTransferOrderLine(
        WHSLoadLine         _loadLine,
        WHSLicensePlateId   _registerLP,
        InventDim           _registerInventDim,
        InventHandlingQty   _totalHandlineQty,
        WHSTransWeight      _totalCatchWeight)
    {
        if (this.mustRegisterTransferOrderLine())
        {
            var inventTransferLine = _loadLine.getOrderCommonFromLoadLine() as InventTransferLine;
            boolean isCWItem = PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId);

            workCreate.registerInventTransferLineHandlingQty(
                    inventTransferLine,
                    _registerLP,
                    isCWItem ? _totalCatchWeight : _totalHandlineQty,
                    _registerInventDim,
                    isCWItem ? _totalHandlineQty : 0);
             
            if (this.mustReceiveTransferOrderLine(transferOrderReceivingProcess))
            {
                workCreate.receiveTransferLine(inventTransferLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRegisterTransferOrderLine</Name>
				<Source><![CDATA[
    [Wrappable(true)]   
    internal boolean mustRegisterTransferOrderLine()
    {
        return true; // Used as an extension point.
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransferOrderReceivingProcess</Name>
				<Source><![CDATA[
    private void initTransferOrderReceivingProcess()
    {
        transferOrderReceivingProcess = WHSTransferOrderReceivingProcess::CombineRegistrationAndReceiving;

        if (workCreate.parmModule() == WHSModule::Transfer)
        {
            transferOrderReceivingProcess = WHSParameters::find().TransferOrderReceivingProcess;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustReceiveTransferOrderLine</Name>
				<Source><![CDATA[
    private boolean mustReceiveTransferOrderLine(WHSTransferOrderReceivingProcess _transferOrderReceivingProcess)
    {
        return _transferOrderReceivingProcess == WHSTransferOrderReceivingProcess::CombineRegistrationAndReceiving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activities</Name>
				<Source><![CDATA[
    private WhsASNItemRegistratorInstrumentationActivities activities()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WhsASNItemRegistrator));
        }

        return logger.asnItemRegistration();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>