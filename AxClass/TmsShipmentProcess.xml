<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSShipmentProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[/// <summary>
/// The <c>TmsShipmentProcess</c> is used to execute rating and void operations on a shipment.
/// </summary>
class TmsShipmentProcess
{
    WHSContainerTable       shipContainer;
    WHSShipmentTable        shipment;
    WHSShipmentId           shipmentId;
    container               errors;
    WHSAccountNum           accountNum;
    WHSMasterTrackingNum    masterTrackingNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[	/// <summary>
	/// Executes rate operation on shipment.
	/// </summary>
	/// <remarks>
	/// Shipment must have a carrier and service assigned for transportation manifesting.
	/// </remarks>
    void execute()
    {
        shipment = WHSShipmentTable::find(shipmentId);

        // Shipment must have a carrier and service assigned for transportation manifesting
        if (shipment.CarrierCode && shipment.CarrierServiceCode)
        {
            this.rateShipment(shipmentId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrors</Name>
				<Source><![CDATA[
    container parmErrors(container _errors = errors)
    {
        if (conLen(_errors) > 0)
        {
            errors = _errors;
        }

        return errors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMasterTrackingNum</Name>
				<Source><![CDATA[
    WHSMasterTrackingNum parmMasterTrackingNum(WHSMasterTrackingNum _masterTrackingNum = masterTrackingNum)
    {
        if (_masterTrackingNum)
        {
            masterTrackingNum = _masterTrackingNum;
        }

        return masterTrackingNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmshipmentId</Name>
				<Source><![CDATA[
    WHSShipmentId parmshipmentId(WHSShipmentId _shipmentId = shipmentId)
    {
        if (_shipmentId)
        {
            shipmentId = _shipmentId;
        }

        return shipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rateShipment</Name>
				<Source><![CDATA[
    private void rateShipment(WHSShipmentId _shipmentId)
    {
        TMSProcessXML_Shipment      processXML  = TMSProcessXML_Shipment::construct();
        TMSAddressPhone             fromAddress = shipment.getPickUpAddress();
        WHSLoadLine                 loadLine;

        if (TMSCarrier::find(shipment.CarrierCode).RatingEnabled == NoYes::Yes)
        {
            processXML.parmRecordType(TMSRecordType::Shipment);
            processXML.parmId(_shipmentId);
            processXML.parmCommunicationType(TMSCommunicationType::Ship);

            select firstonly loadLine
                where loadLine.ShipmentId == shipment.ShipmentId;

            accountNum  = loadLine.whsLoadTable().AccountNum;

            processXML.initFromShipment(shipment);
            processXML.parmWeight(shipContainer.Weight);

            processXML.execute();

            errors              = processXML.parmErrors();
            masterTrackingNum   = processXML.parmMasterTrackingNum();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidAllContainer</Name>
				<Source><![CDATA[	/// <summary>
	/// Executes void operation in shipment.
	/// </summary>
    void voidAllContainer()
    {
        TMSProcessXML_Shipment      processXML  = new TMSProcessXML_Shipment();
        TMSAddressPhone             fromAddress;
        TMSAddressPhone             toAddress;

        shipment    = WHSShipmentTable::find(shipmentId);
        fromAddress = shipment.getPickUpAddress();
        toAddress   = shipment.getDropOffAddress();

        processXML.parmCommunicationType(TMSCommunicationType::Void);

        processXML.parmWeight(shipContainer.Weight);
        processXML.parmFromAddress(fromAddress);
        processXML.parmToAddress(toAddress);
        processXML.parmId(shipmentId);
        processXML.parmRecordType(TMSRecordType::Container);
        processXML.initCarrierFields(shipment.CarrierCode, shipment.CarrierServiceCode, shipment.CarrierGroupCode, shipment.ModeCode, '');
        processXML.parmFreightTerm(shipment.DlvTermId);
        processXML.parmMasterTrackingNum(masterTrackingNum);

        processXML.execute();

        errors = processXML.parmErrors();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>