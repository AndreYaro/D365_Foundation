<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSInvoiceApprovalElementHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSInvoiceApprovalElementHandler</c> class is used to handle different workflow element events:
/// cancelled, requestChange, completed, returned, started, denied, workitemsCreated.
/// </summary>
class TMSInvoiceApprovalElementHandler implements    WorkflowElementCanceledEventHandler,  WorkflowElemChangeRequestedEventHandler,
                                                        WorkflowElementCompletedEventHandler, WorkflowElementReturnedEventHandler,
                                                        WorkflowElementStartedEventHandler, WorkflowElementDeniedEventHandler,
                                                        WorkflowWorkItemsCreatedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles canceled event of a workflow element.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// Arguments of workflow element event.
    /// </param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        TMSInvoiceTable         invoiceTable;
        TMSInvoiceLine          invoiceLine;
        TMSFBInvMatch           fbMatch;
        TMSInvoiceLineReconcile invoiceRec;

        ttsBegin;

        select forupdate invoiceTable
            where invoiceTable.RecId == _workflowElementEventArgs.parmWorkflowContext().parmRecId();

        invoiceTable.InvoiceStatus = TMSInvoiceStatus::Open;

        invoiceTable.update();

        while select forUpdate invoiceLine
                where invoiceLine.InternalInvNumber     == invoiceTable.InternalInvNumber       &&
                      (invoiceLine.InvoiceLineStatus    == TMSInvoiceLineStatus::Resubmitted    ||
                      invoiceLine.InvoiceLineStatus     == TMSInvoiceLineStatus::Submitted)
        {
            while select forUpdate invoiceRec
                where invoiceRec.InvoiceLineRecId   == invoiceLine.RecId &&
                  invoiceRec.WorkflowStatus         == TMSWorkflowStatus::Submitted
            {
                invoiceRec.WorkflowStatus = TMSWorkflowStatus::None;
                invoiceRec.update();
            }

            while select forUpdate fbMatch
                where fbMatch.InvoiceLineRecId   == invoiceLine.RecId &&
                      fbMatch.WorkflowStatus     == TMSWorkflowStatus::Submitted
            {
                fbMatch.WorkflowStatus = TMSWorkflowStatus::None;
                fbMatch.update();
            }

            invoiceLine.InvoiceLineStatus = TMSInvoiceLineStatus::Open;
            invoiceLine.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeRequested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles change requested event of a workflow element.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// Arguments of workflow element event.
    /// </param>
    public void changeRequested(WorkflowElementEventArgs _workflowElementEventArgs)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles completed event of a workflow element.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// Arguments of workflow element event.
    /// </param>
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        TMSInvoiceTable invoiceTable;

        ttsBegin;

        invoiceTable = TMSInvoiceTable::findByRecId(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        TMSInvoiceApproval::approveInvoice(invoiceTable);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>created</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles created event of a workflow element.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// Arguments of workflow element event.
    /// </param>
    public void created(WorkflowWorkItemsEventArgs _workflowWorkItemsEventArgs)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles denied event of a workflow element.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// Arguments of workflow element event.
    /// </param>
    public void denied(WorkflowElementEventArgs _workflowElementEventArgs)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles returned event of a workflow element.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// Arguments of workflow element event.
    /// </param>
    public void returned(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        TMSInvoiceTable         invoiceTable;

        ttsbegin;

        invoiceTable = TMSInvoiceTable::findByRecId(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        TMSInvoiceApproval::rejectInvoice(invoiceTable, true);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles started event of a workflow element.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// Arguments of workflow element event.
    /// </param>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        TMSInvoiceTable         invoiceTable;

        ttsbegin;

        invoiceTable = TMSInvoiceTable::findByRecId(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        if (invoiceTable.InvoiceStatus != TMSInvoiceStatus::Submitted &&
            invoiceTable.InvoiceStatus != TMSInvoiceStatus::Resubmitted)
        {
            TMSInvoiceApproval::submitInvoice(invoiceTable);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>