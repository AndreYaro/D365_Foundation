<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rLedgerSheetEngine_GeneralLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rLedgerSheetEngine_GeneralLedger extends RLedgerSheetEngine implements BatchRetryable
{
    Map             ledgerMap;
    Map             mainMap;
    Amount          initialBalance;
    Map             ledgerTransCredit, ledgerTransDebit;
    DialogField     dialogDebitTurnover;
    DialogField     dialogCreditTurnover;
    DialogField     dialogCreateByPeriod;
    boolean         showDebitTurnover,showCreditTurnover,createByPeriod;
    MapEnumerator     ledgerMapEnumerator;
    DebCredProposal sortDebCredProposal;
    MainAccountNum  mainAccountNumFrom;
    MainAccountNum  mainAccountNumTo;
    Map             debitActivityMap;
    Map             creditActivityMap;
    Map             AccountLinesMap;
    protected const str dialogMainAccountNumFrom = "MainAccountNumFrom";
    protected const str dialogMainAccountNumTo = "MainAccountNumTo";
    protected const int staticColumnNumber = 4;
    protected const int value145 = 145;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAccountRow</Name>
				<Source><![CDATA[
    private void addAccountRow()
    {
        FormListItem  formListItem;
        formListItem = new FormListItem(mainAccountNum, 2);
        formListItem.idx(listControl.getCount() + 1);
        listControl.addItem(formListItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalRow</Name>
				<Source><![CDATA[
    public void addTotalRow()
    {
        FormListItem  formListItem;
        int           subItem,idx;
        Amount        amount,currentBalance;
        Amount        amountDebit,amountCredit;
        MapEnumerator   mapEnumerator;

        formListItem = new FormListItem("@SYS58659", value3);
        formListItem.idx(listControl.getCount() + 1);
        idx = listControl.addItem(formListItem);
        subItem++;
        formListItem = new FormListItem("");
        formListItem.subItem(subItem);
        formListItem.idx(idx);
        listControl.setItem(formListItem);
        subItem++;
        amount = initialBalance > 0 ? initialBalance : 0;
        this.addAmountItemToFormListControl(amount, subItem, idx);

        subItem++;
        amount = initialBalance < 0 ? - initialBalance : 0;
        this.addAmountItemToFormListControl(amount, subItem, idx);

        mapEnumerator = debitActivityMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            if (ledgerTransDebit.exists(mapEnumerator.currentKey()))
            {
                amount = ledgerTransDebit.lookup(mapEnumerator.currentKey());
                amountDebit = this.getCreditDebitAmount(amountDebit, mapEnumerator, amount);
            }
            if (conFind(visibleRow,mapEnumerator.currentKey()))
            {
                subItem++;
                this.addAmountItemToFormListControl(amount, subItem, idx);
            }
            amount = 0;
        }
        subItem++;
        this.addAmountItemToFormListControl(amountDebit, subItem, idx);

        mapEnumerator = creditActivityMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            if (ledgerTransCredit.exists(mapEnumerator.currentKey()))
            {
                amount = ledgerTransCredit.lookup(mapEnumerator.currentKey());
                amountCredit = this.getCreditDebitAmount(amountCredit, mapEnumerator, amount);
            }
            if (conFind(visibleCol,mapEnumerator.currentKey()))
            {
                subItem++;
                this.addAmountItemToFormListControl(amount, subItem, idx);
            }
            amount = 0;
        }
        subItem++;
        this.addAmountItemToFormListControl(amountCredit, subItem, idx);

        currentBalance = initialBalance + amountDebit - amountCredit;
        subItem++;
        amount = currentBalance > 0 ? currentBalance : 0;
        this.addAmountItemToFormListControl(amount, subItem, idx);

        subItem++;
        amount = currentBalance < 0 ? - currentBalance : 0;
        this.addAmountItemToFormListControl(amount, subItem, idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the debit or credit amount.
    /// </summary>
    /// <param name = "_amountCreditOrDebit">
    /// The amount to add.
    /// </param>
    /// <param name = "_mapEnumerator">
    /// The enumerator.
    /// </param>
    /// <param name = "_amount">
    /// The total amount.
    /// </param>
    /// <returns>
    /// The updated credit or debit amount.
    /// </returns>
    [Wrappable(true)]
    protected final Amount getCreditDebitAmount(Amount _amountCreditOrDebit, MapEnumerator _mapEnumerator, Amount _amount)
    {
        Amount amountCreditOrDebit = _amountCreditOrDebit;
        amountCreditOrDebit += MainAccount::findByMainAccountId(_mapEnumerator.currentKey()).Type == DimensionLedgerAccountType::Total ? 0 : _amount;

        return amountCreditOrDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSumAccount</Name>
				<Source><![CDATA[
    public void calcSumAccount()
    {
        MainAccount             heading;
        MainAccount             mainAccount;
        DimensionAttributeValue dimensionAttributeValue;
        DimensionAttributeValueTotallingCriteria dimAttrValueTotCrit;

        container           con;
        Map                 map;
        Amount              amountCredit,amountDebit;
        boolean             addCredit,addDebit;

        Map mapInsert(Map _map)
        {
            Amount amount;

            if (_map.exists(mainAccount.MainAccountId))
            {
                if (_map.exists(heading.MainAccountId))
                {
                    amount = _map.lookup(heading.MainAccountId);
                }
                _map.insert(heading.MainAccountId, _map.lookup(mainAccount.MainAccountId) + amount);
            }
            return _map;
        }

        map = Map::create(ledgerMap.pack());

        while select MainAccountId, RecId from heading
            where heading.Type == DimensionLedgerAccountType::Total
               && heading.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
        {
            addCredit = false;
            addDebit = false;
            amountDebit = 0;
            amountCredit = 0;

            while select TableId from dimensionAttributeValue
                 where dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                   && dimensionAttributeValue.EntityInstance == heading.RecId
                join InvertTotalSign, FromValue, ToValue from dimAttrValueTotCrit
                    where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
            {
                SysDaSearchObject searchObject = RLedgerSheetCalcSumAccountQuery::createSearchObject(dimAttrValueTotCrit, LedgerChartOfAccounts::current(), mainAccount);

                SysDaSearchStatement searchStatement = new SysDaSearchStatement();

                while (searchStatement.next(searchObject))
                {
                    ledgerMapEnumerator.reset();
                    while (ledgerMapEnumerator.moveNext())
                    {
                        con = [mapInsert(Map::create(conPeek(map.lookup(ledgerMapEnumerator.currentKey()), 1))).pack(),
                               mapInsert(Map::create(conPeek(map.lookup(ledgerMapEnumerator.currentKey()), value2))).pack()];
                        map.remove(ledgerMapEnumerator.currentKey());
                        map.insert(ledgerMapEnumerator.currentKey(), con);
                    }
                    if (ledgerTransCredit.exists(mainAccount.MainAccountId))
                    {
                        addCredit = true;
                        amountCredit += ledgerTransCredit.lookup(mainAccount.MainAccountId);
                    }

                    if (ledgerTransDebit.exists(mainAccount.MainAccountId))
                    {
                        addDebit = true;
                        amountDebit += ledgerTransDebit.lookup(mainAccount.MainAccountId);
                    }
                }
            }
            if (addCredit)
            {
                ledgerTransCredit.insert(heading.MainAccountId, amountCredit);
            }
            if (addDebit)
            {
                ledgerTransDebit.insert(heading.MainAccountId, amountDebit);
            }
        }

        ledgerMap = map;
        ledgerMapEnumerator = ledgerMap.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contextMenu</Name>
				<Source><![CDATA[
    public void contextMenu(HWND _hwnd,int _idx,int _col)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExcelReport</Name>
				<Source><![CDATA[
    protected OXMLExcelReport_LedgerSheet_RU createExcelReport()
    {
        OXMLExcelReport_GeneralLedger_RU report = OXMLExcelReport_GeneralLedger_RU::construct();

        report.setParameters(listControl, this);

        return report;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debCredProposal</Name>
				<Source><![CDATA[
    private DebCredProposal debCredProposal(int _col)
    {
        if (_col > staticColumnNumber + conLen(visibleRow) && _col <= conLen(visibleRow) +conLen(visibleCol) + staticColumnNumber)
        {
            return DebCredProposal::Credit;
        }

        if (_col >= staticColumnNumber && _col < conLen(visibleRow) + staticColumnNumber)
        {
            return DebCredProposal::Debit;
        }
        return DebCredProposal::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteColumn</Name>
				<Source><![CDATA[
    public void deleteColumn(int _col)
    {
        listControl.deleteColumn(_col + conLen(visibleRow) +staticColumnNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRow</Name>
				<Source><![CDATA[
    public void deleteRow(int _col)
    {
        listControl.deleteColumn(_col + staticColumnNumber - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteZeroFromMap</Name>
				<Source><![CDATA[
    private void deleteZeroFromMap(Set _deleteSet, Map _map)
    {
        SetEnumerator setEnumerator;

        if (!_deleteSet.empty())
        {
            setEnumerator = _deleteSet.getEnumerator();
            setEnumerator.reset();
            while (setEnumerator.moveNext())
            {
                _map.remove(setEnumerator.current());
            }

            ledgerMapEnumerator = ledgerMap.getEnumerator();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteZeroLine</Name>
				<Source><![CDATA[
    public void deleteZeroLine()
    {
        MapEnumerator mapEnumerator;
        boolean     deleteLine;
        Map         map;
        Set         deleteSet = new Set(Types::Container);

        ledgerMapEnumerator.reset();
        while (ledgerMapEnumerator.moveNext())
        {
            deleteLine = true;
            map = Map::create(conPeek(ledgerMapEnumerator.currentValue(),1));
            mapEnumerator = map.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                if (mapEnumerator.currentValue())
                {
                    deleteLine = false;
                    break;
                }
            }
            if (deleteLine)
            {
                map = Map::create(conPeek(ledgerMapEnumerator.currentValue(),value2));
                mapEnumerator = map.getEnumerator();
                while (mapEnumerator.moveNext())
                {
                    if (mapEnumerator.currentValue())
                    {
                        deleteLine = false;
                        break;
                    }
                }
            }
            if (deleteLine)
            {
                deleteSet.add(ledgerMapEnumerator.currentKey());
            }
        }
        this.deleteZeroFromMap(deleteSet, ledgerMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogDebitTurnover  = dialog.addFieldValue(extendedTypeStr(NoYesId), showDebitTurnover,"@GLS105006","@GLS105007");
        dialogCreditTurnover = dialog.addFieldValue(extendedTypeStr(NoYesId), showCreditTurnover,"@GLS105008","@GLS105009");
        dialogCreateByPeriod = dialog.addFieldValue(extendedTypeStr(NoYesId), createByPeriod,"@GLS105059","@GLS105060");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogUpdateDesign</Name>
				<Source><![CDATA[
    protected void dialogUpdateDesign(Dialog _dialog)
    {
        FormDesign            formDesign;

        super(_dialog);
        formDesign = dialogFormRun.design();
        formDesign.controlName(dialogMainAccountNum).visible(false);
        formDesign.controlName(dialogMainAccountNumFrom).visible(true);
        formDesign.controlName(dialogMainAccountNumTo).visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogUpdateQuery</Name>
				<Source><![CDATA[
    public void dialogUpdateQuery(Dialog _dialog,boolean _update = false)
    {
        Object formRun;

        if (_dialog)
        {
            formRun = _dialog.formRun();
            [periodCode, FromDate, ToDate, mainAccountNum, currencyType, currencyCode, crediting, selectedFieldsOrder, currencyTypeBrief, contragent, custVendAC, custVendDetailBalans, dimensionCriteria, mainAccountNumFrom, mainAccountNumTo] = formRun.getControlValue();
            this.updateQuery(_update);
        }
        super(_dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandColAccount</Name>
				<Source><![CDATA[
    protected void expandColAccount(MainAccount _mainAccount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandRowAccount</Name>
				<Source><![CDATA[
    protected void expandRowAccount(MainAccount _mainAccount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRows</Name>
				<Source><![CDATA[
    public void fetchNextRows()
    {
        FormListItem    formListItem;
        int             subItem,idx;
        Amount          amount,currentBalance;
        Amount          amountDebit,amountCredit;
        Map             map;
        MapEnumerator     mapEnumerator;
        anytype         anyZero = 0;
        int             rowCount = 1;
        boolean         addAccount = true;
        boolean         addTotal = false;

        currentBalance = initialBalance;
        ledgerMapEnumerator.reset();

        while (ledgerMapEnumerator.moveNext())
        {
            if (addAccount)
            {
                this.addAccountRow();
                addAccount = false;
                addTotal = true;
            }
            amountDebit  = 0;
            amountCredit = 0;
            subItem = 0;
            formListItem = new FormListItem(strRFix(strFmt("%1", rowCount),7));
            rowCount++;
            formListItem.idx(listControl.getCount() + 1);

            idx = listControl.addItem(formListItem);
            AccountLinesMap.insert(idx, mainAccountNum);
            subItem++;
            formListItem = new FormListItem(conPeek(ledgerMapEnumerator.currentKey(),3));
            formListItem.subItem(subitem);
            formListItem.data(mainAccountNum);
            formListItem.idx(idx);
            listControl.setItem(formListItem);
            subItem++;
            amount = currentBalance > 0 ? currentBalance : 0;
            this.addAmountItemToFormListControl(amount, subItem, idx);

            subItem++;
            amount = currentBalance < 0 ? - currentBalance : 0;
            this.addAmountItemToFormListControl(amount, subItem, idx);

            map = Map::create(conPeek(ledgerMapEnumerator.currentValue(),1));
            mapEnumerator = debitActivityMap.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                if (ledgerTransDebit.exists(mapEnumerator.currentKey()))
                {
                    amount = map.exists(mapEnumerator.currentKey()) ? map.lookup(mapEnumerator.currentKey()) : anyZero;
                    amountDebit = this.getCreditDebitAmount(amountDebit, mapEnumerator, amount);
                }
                else
                {
                    amount = 0;
                }
                if (showDebitTurnover)
                {
                    subItem++;
                    this.addAmountItemToFormListControl(amount, subItem, idx);
                }
            }
            subItem++;
            this.addAmountItemToFormListControl(amountDebit, subItem, idx);

            map = Map::create(conPeek(ledgerMapEnumerator.currentValue(), value2));
            mapEnumerator = creditActivityMap.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                if (ledgerTransCredit.exists(mapEnumerator.currentKey()))
                {
                    amount = map.exists(mapEnumerator.currentKey()) ? map.lookup(mapEnumerator.currentKey()) : anyZero;
                    amountCredit = this.getCreditDebitAmount(amountCredit, mapEnumerator, amount);
                }
                else
                {
                    amount = 0;
                }
                if (showCreditTurnover)
                {
                    subItem++;
                    this.addAmountItemToFormListControl(amount, subItem, idx);
                }
            }
            subItem++;
            this.addAmountItemToFormListControl(amountCredit, subItem, idx);

            currentBalance += amountDebit - amountCredit;
            subItem++;
            amount = currentBalance > 0 ? currentBalance : 0;
            this.addAmountItemToFormListControl(amount, subItem, idx);

            subItem++;
            amount = currentBalance < 0 ? - currentBalance : 0;
            this.addAmountItemToFormListControl(amount, subItem, idx);
        }
        if (addTotal)
        {
            this.addTotalRow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterValues</Name>
				<Source><![CDATA[
    public container filterValues(container _con)
    {
        container excludeCon = ["@GLS103859", "@GLS101101", "@GLS105014", "@GLS105015", "@GLS101655", "@GLS101654", "@GLS105016", "@GLS105017", "@SYS58659"];
        container filteredCon;
        for (int idx = 1; idx <= conLen(_con); idx++)
        {
            str currentColumn = conPeek(_con, idx);
            filteredColumnsMap.insert(currentColumn, idx-1);

            if (conFind(excludeCon, currentColumn) == 0)
            {
                filteredCon += currentColumn;
            }
        }
        return filteredCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDesignCaption</Name>
				<Source><![CDATA[
    public str formDesignCaption(int _idx = -1)
    {
        if (fromDate)
        {
            return strFmt("@SYS4081976", fromDate, toDate);
        }
        else
        {
            return strFmt("@SYS4081977", toDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitCreditActivity</Name>
				<Source><![CDATA[
    private void getDebitCreditActivity()
    {
        SysQueryRun             runQuery;
        MainAccount             mainAccount;
        MapEnumerator             mapEnumerator;

        debitActivityMap    = new Map(Types::String, typeOf(initialBalance));
        creditActivityMap   = new Map(Types::String, typeOf(initialBalance));
        mainMap             = new Map(typeOf(MainAccountNum), Types::Container);

        while select MainAccountId from mainAccount
            where mainAccount.MainAccountId >= mainAccountNumFrom &&
                  mainAccount.MainAccountId <= mainAccountNumTo &&
                  mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current() &&
                  ((mainAccountNumFrom == mainAccountNumTo) ||
                  (mainAccount.Type != DimensionLedgerAccountType::Total))
        {
            mainAccountNum = mainAccount.MainAccountId;
            this.updateQuery();
            this.initAccounts();
            runQuery = new SysQueryRun(this.initRunQuery());
            while (runQuery.next())
            {
                this.loopAction(runQuery);
            }
            if (deleteZero)
            {
                this.deleteZeroLine();
            }

            if (showSumAccount)
            {
                 this.calcSumAccount();
            }

            mainMap.insert(mainAccountNum, [ledgerTransDebit.pack(), ledgerTransCredit.pack(), ledgerMap.pack(), initialBalance]);

            mapEnumerator = ledgerTransDebit.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                if (!debitActivityMap.exists(mapEnumerator.currentKey()))
                {
                    debitActivityMap.insert(mapEnumerator.currentKey(), mapEnumerator.currentValue());
                }
            }
            mapEnumerator =ledgerTransCredit.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                if (!creditActivityMap.exists(mapEnumerator.currentKey()))
                {
                    creditActivityMap.insert(mapEnumerator.currentKey(), mapEnumerator.currentValue());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();
        [periodCode, FromDate, ToDate, mainAccountNum, currencyType, currencyCode, crediting, selectedFieldsOrder, currencyTypeBrief, contragent, custVendAC, custVendDetailBalans, dimensionCriteria, mainAccountNumFrom, mainAccountNumTo] = dialogFormRun.getControlValue();

        if (! mainAccountNumTo)
        {
            return checkFailed("@SYS25151");
        }
        if (mainAccountNumFrom > mainAccountNumTo)
        {
            return checkFailed("@SYS4081978");
        }
        showDebitTurnover  = dialogDebitTurnover.value();
        showCreditTurnover = dialogCreditTurnover.value();
        createByPeriod     = dialogCreateByPeriod.value();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHelpText</Name>
				<Source><![CDATA[
    public str getHelpText(int _idx, int _col)
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastValue</Name>
				<Source><![CDATA[
    public container getLastValue()
    {
        return [periodCode, FromDate, ToDate, mainAccountNum, currencyType, currencyCode, crediting, selectedFieldsOrder, currencyTypeBrief, contragent, custVendAC, custVendDetailBalans, dimensionCriteria, mainAccountNumFrom, mainAccountNumTo];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccounts</Name>
				<Source><![CDATA[
    protected void initAccounts()
    {
        TransDate            currentDate, periodStartDate, periodEndDate;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        FiscalCalendarYear   fiscalCalendarYear;

        TransDate startDate(TransDate _currentDate = currentDate)
        {
            TransDate dateStart;
            dateStart = periodStartDate ? periodStartDate : dateStartMth(_currentDate);
            return dateStart;
        }
        TransDate endDate(TransDate _currentDate = currentDate)
        {
            TransDate dateEnd;
            dateEnd = periodEndDate ? periodEndDate : _currentDate;
            return dateEnd;
        }

        sortedColumnText        = "";
        sortOrder               = true;
        this.createLedgerBalance();

        ledgerMap         = new Map(Types::Container, Types::Container);
        ledgerTransCredit = new Map(Types::String, typeOf(initialBalance));
        ledgerTransDebit  = new Map(Types::String, typeOf(initialBalance));
        ledgerMapEnumerator = ledgerMap.getEnumerator();

        initialBalance = this.calcBalance();

        if (createByPeriod)
        {
            while select Type, EndDate, StartDate, Description from fiscalCalendarPeriod
                where fiscalCalendarPeriod.StartDate    <  toDate               &&
                      fiscalCalendarPeriod.EndDate      >= fromDate             &&
                      fiscalCalendarPeriod.Type         == FiscalPeriodType::Operating
            exists join fiscalCalendarYear
                where fiscalCalendarYear.RecId          == fiscalCalendarPeriod.FiscalCalendarYear &&
                      fiscalCalendarYear.FiscalCalendar == CompanyInfoHelper::fiscalCalendarRecId()
            {
                periodStartDate = dateNull();
                periodEndDate   = dateNull();
                if (fromDate >= fiscalCalendarPeriod.StartDate && fromDate <= fiscalCalendarPeriod.EndDate && fromDate != fiscalCalendarPeriod.StartDate)
                {
                    periodStartDate = fromDate;
                }
                if (toDate >= fiscalCalendarPeriod.StartDate && toDate <= fiscalCalendarPeriod.EndDate &&  toDate != fiscalCalendarPeriod.EndDate)
                {
                    periodEndDate = toDate;
                }
                if (periodStartDate || periodEndDate || !fiscalCalendarPeriod.Description)
                {
                    ledgerMap.insert([startDate(fiscalCalendarPeriod.StartDate), endDate(fiscalCalendarPeriod.EndDate), strFmt("@GLS103994", startDate(fiscalCalendarPeriod.StartDate), endDate(fiscalCalendarPeriod.EndDate))],
                                     [ledgerTransDebit.pack(), ledgerTransCredit.pack()]);
                }
                else
                {
                    ledgerMap.insert([startDate(fiscalCalendarPeriod.StartDate), endDate(fiscalCalendarPeriod.EndDate), fiscalCalendarPeriod.Description],
                                     [ledgerTransDebit.pack(), ledgerTransCredit.pack()]);
                }
            }
        }
        else
        {
            for (currentDate = endmth(fromDate); currentDate <= endmth(toDate); currentDate = endmth(nextMth(currentDate)))
            {
                periodStartDate = dateNull();
                periodEndDate   = dateNull();
                if (endmth(fromDate) == currentDate && dateStartMth(fromDate) != fromDate)
                {
                    periodStartDate = fromDate;
                }
                if (endmth(toDate) == currentDate &&  endmth(toDate) != toDate)
                {
                    periodEndDate = toDate;
                }
                if (periodStartDate || periodEndDate)
                {
                    ledgerMap.insert([startDate(),endDate(),strFmt("@GLS103994", startDate(), endDate())],[ledgerTransDebit.pack(),ledgerTransCredit.pack()]);
                }
                else
                {
                    ledgerMap.insert([startDate(),endDate(),strFmt("@GLS105048", mthName(mthOfYr(currentDate)),year(currentDate))],[ledgerTransDebit.pack(),ledgerTransCredit.pack()]);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListView</Name>
				<Source><![CDATA[
    public void initListView()
    {
        FormListColumn  listColumn;
        SetEnumerator     setEnumerator;

        visibleRow = conNull();
        visibleCol = conNull();
        listControl.columnHeaderButton(false);
        listColumn = new FormListColumn("@GLS103859",0);
        listControl.addColumn(0, listColumn);

        listColumn = new FormListColumn("@GLS101101", 0,value145);
        listControl.addColumn(1, listColumn);

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@GLS105014");
        listControl.addColumn(value2, listColumn);

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@GLS105015");
        listControl.addColumn(value3, listColumn);

        if (showDebitTurnover)
        {
            setEnumerator = debitActivityMap.keySet().getEnumerator();
            while (setEnumerator.moveNext())
            {
                listColumn = new FormListColumn();
                listColumn.format(FormListFormat::Right);
                listColumn.text(setEnumerator.current());
                visibleRow += setEnumerator.current();

                if (showSumAccount)
                {
                    listColumn.image(MainAccount::findByMainAccountId(setEnumerator.current()).Type == DimensionLedgerAccountType::Total);
                }

                listControl.addColumn(listControl.getColumnCount()+1,listColumn);
            }
        }

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@GLS101655");
        listControl.addColumn(listControl.getColumnCount()+1,listColumn);

        if (showCreditTurnover)
        {
            setEnumerator = creditActivityMap.keySet().getEnumerator();
            while (setEnumerator.moveNext())
            {
                listColumn = new FormListColumn();
                listColumn.format(FormListFormat::Right);
                listColumn.text(setEnumerator.current());
                visibleCol += setEnumerator.current();

                if (showSumAccount)
                {
                    listColumn.image(MainAccount::findByMainAccountId(setEnumerator.current()).Type == DimensionLedgerAccountType::Total);
                }

                listControl.addColumn(listControl.getColumnCount()+1,listColumn);
            }
        }

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@GLS101654");
        listControl.addColumn(listControl.getColumnCount()+1,listColumn);

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@GLS105016");
        listControl.addColumn(listControl.getColumnCount()+1,listColumn);

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@GLS105017");
        listControl.addColumn(listControl.getColumnCount()+1,listColumn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRunQuery</Name>
				<Source><![CDATA[
    protected Query initRunQuery()
    {
        Query                query =  new Query(queryRun.query());
        QueryBuildDataSource qBd;
        QueryBuildRange      qBr;

        qBd = query.dataSourceTable(tableNum(GeneralJournalEntry));

        qBr = findOrCreateRange_W(qBd,fieldNum(GeneralJournalEntry, AccountingDate));
        qBr.value(SysQuery::range(fromDate, toDate));

        qBd = query.dataSourceTable(tableNum(GeneralJournalAccountEntry), 1);
        qBd.clearRange(fieldNum(GeneralJournalAccountEntry, IsCredit));

        qBd = query.dataSourceTable(tableNum(GeneralJournalAccountEntry), value2);

        qBd.clearRange(fieldNum(GeneralJournalAccountEntry, IsCredit));

        this.setDimensionRange(query);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmptyReport</Name>
				<Source><![CDATA[
    private boolean isEmptyReport()
    {
        MapEnumerator             mapEnumerator;
        container               mapValue;
        boolean ret = true;

        mapEnumerator = mainMap.getEnumerator();
        while (mapEnumerator.moveNext() && ret)
        {
            mapValue = mapEnumerator.currentValue();
            ledgerTransDebit    = Map::create(conPeek(mapValue,1));
            if (ledgerTransDebit.elements())
            {
                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proceedDisplayingVouchers</Name>
				<Source><![CDATA[
    public void proceedDisplayingVouchers(int _col)
    {
        DebCredProposal debCredProposal = this.debCredProposal(_col);
        TransDate       startDate;
        TransDate       endDate;
        int             i = 1;
        MainAccountNum  mAccount;

        if (listControl.getItem(row) && debCredProposal != DebCredProposal::None)
        {
            ledgerMapEnumerator.reset();
            while (ledgerMapEnumerator.moveNext())
            {
                if (i == str2int(listControl.getItem(row).text()))
                {
                    startDate = fromDate;
                    endDate   = toDate;
                    fromDate = conPeek(ledgerMapEnumerator.currentKey(),1);
                    toDate = conPeek(ledgerMapEnumerator.currentKey(),value2);
                    if (AccountLinesMap.exists(row))
                        mAccount = AccountLinesMap.lookup(row);
                    this.showOriginalDocuments(mAccount, listControl.getColumn(_col).text(),debCredProposal);

                    fromDate = startDate;
                    toDate   = endDate;
                    break;
                }
                i++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, periodCode, FromDate, ToDate, deleteZero, showSumAccount, mainAccountNum, currencyType, currencyCode, operationsTax, dimensionCriteria, selectedFieldsOrder, currencyTypeBrief, printRanges, contragent, custVendAC, custVendDetailBalans, showDebitTurnover, showCreditTurnover, createByPeriod, mainAccountNumFrom, mainAccountNumTo, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreSortOrder</Name>
				<Source><![CDATA[
    protected void restoreSortOrder(int _startColumn = 0, int _endColumn = listControl.getColumnCount())
    {
        switch (sortDebCredProposal)
        {
            case DebCredProposal::Debit:
                super (staticColumnNumber,conLen(visibleRow) + staticColumnNumber + 1);
                break;
            case DebCredProposal::Credit:
                super (staticColumnNumber + conLen(visibleRow) + 1 ,conLen(visibleRow) +conLen(visibleCol) + staticColumnNumber + 1);
                break;
            default:
               super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        MapEnumerator             mapEnumerator;
        container               mapValue;

        AccountLinesMap = new map(Types::Integer, Types::String);
        this.getDebitCreditActivity();
        this.initListView();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00012, funcName());

        if (!this.isEmptyReport())
        {
            mapEnumerator = mainMap.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                mainAccountNum = mapEnumerator.currentKey();
                mapValue = mapEnumerator.currentValue();
                ledgerTransDebit    = Map::create(conPeek(mapValue,1));
                ledgerTransCredit   = Map::create(conPeek(mapValue,2));
                ledgerMap           = Map::create(conPeek(mapValue,3));
                ledgerMapEnumerator   = ledgerMap.getEnumerator();
                initialBalance      = conPeek(mapValue,4);

                this.fetchNextRows();
            }
            this.setItem();
        }
        else
        {
            this.addTotalRow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortedColumn</Name>
				<Source><![CDATA[
    public void setSortedColumn(int _sortedColumn)
    {
        super(_sortedColumn);
        sortDebCredProposal = this.debCredProposal(_sortedColumn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer   version = conPeek(packedClass,1);
        container con;
        switch (version)
        {
            case currentVersion:
                [version, periodCode, FromDate, ToDate, deleteZero, showSumAccount, mainAccountNum, currencyType, currencyCode, operationsTax, dimensionCriteria, selectedFieldsOrder, currencyTypeBrief, printRanges, contragent, custVendAC, custVendDetailBalans, showDebitTurnover, showCreditTurnover, createByPeriod, mainAccountNumFrom, mainAccountNumTo, con] = packedClass;
                super(con);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccounts</Name>
				<Source><![CDATA[
    public void updateAccounts(GeneralJournalAccountEntry _parentEntry,
                               GeneralJournalAccountEntry _childEntry)
    {
        Amount    transAmount;
        container con;
        Map       map;
        Amount    amount;
        GeneralJournalEntry generlaJournalEntry = GeneralJournalEntry::find(_childEntry.GeneralJournalEntry);
        MainAccountNum accountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(_childEntry.LedgerDimension);

        map = new Map(Types::String, typeOf(initialBalance));
        ledgerMapEnumerator.reset();
        while (ledgerMapEnumerator.moveNext())
        {
            if (generlaJournalEntry.AccountingDate >= conPeek(ledgerMapEnumerator.currentKey(), 1) &&
                generlaJournalEntry.AccountingDate <= conPeek(ledgerMapEnumerator.currentKey(), value2))
            {
                con = ledgerMapEnumerator.currentValue();
                break;
            }
        }
        if (conLen(con) == 0)
        {
            return;
        }
        transAmount = this.getTransAmount(_childEntry);
        amount = transAmount;
        map = Map::create(conPeek(con, _childEntry.IsCredit ? 1:value2));
        if (map.exists(accountNum))
        {
            amount += map.lookup(accountNum);
        }
         map.insert(accountNum, amount);
        con = conPoke(con, _childEntry.IsCredit ? 1 : value2, map.pack());
        ledgerMap.insert(ledgerMapEnumerator.currentKey(),con);
        if (_childEntry.IsCredit)
        {
            if (ledgerTransDebit.exists(accountNum))
            {
                transAmount += ledgerTransDebit.lookup(accountNum);
            }
            ledgerTransDebit.insert(accountNum, transAmount);
        }
        else
        {
            if (ledgerTransCredit.exists(accountNum))
            {
                transAmount += ledgerTransCredit.lookup(accountNum);
            }
            ledgerTransCredit.insert(accountNum, transAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static str description()
    {
        return "@SYS24097";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>