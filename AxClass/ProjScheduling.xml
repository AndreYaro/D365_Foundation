<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjScheduling</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjScheduling extends RunBase
{
    DialogRunbase               dialog;

    DialogField                 dialogProjId;
    DialogField                 dialogModelId;
    DialogField                 dialogSchedDate;
    DialogField                 dialogSchedTime;
    DialogField                 dialogSchedDirection;
    DialogField                 dialogSchedMethod;
    DialogField                 dialogSchedLimitCap;
    DialogField                 dialogSchedSyncRef;
    DialogField                 dialogSchedReference;
    DialogField                 dialogSort;
    DialogField                 dialogKeepProductionUnit;
    DialogField                 dialogPrimaryResourceSelection;

    ProjId                      projId;
    ForecastModelId             modelId;

    SchedDate                   schedDate;
    SchedTime                   schedTime;
    SchedDirection              schedDirection;

    SchedMethod                 schedMethod;
    SchedLimitCap               schedLimitCap;

    SchedSyncRef                schedSyncRef;
    SchedReference              schedReference;

    ProjSchedSort               schedSort;

    KeepProductionUnit          keepProductionUnit;

    WrkCtrSchedulerPrimaryResourceSelection primaryResourceSelection;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        projId,
        modelId,
        schedDate,
        schedTime,
        schedDirection,
        schedMethod,
        schedLimitCap,
        schedSyncRef,
        schedReference,
        schedSort,
        keepProductionUnit,
        primaryResourceSelection
    #ENDMACRO

    #LOCALMACRO.Version2List
        projId,
        modelId,
        schedDate,
        schedTime,
        schedDirection,
        schedMethod,
        schedLimitCap,
        schedSyncRef,
        schedReference,
        schedSort
    #ENDMACRO

    #LOCALMACRO.Version1List
        projId,
        modelId,
        schedDate,
        schedTime,
        schedDirection,
        schedMethod,
        schedLimitCap,
        schedSyncRef,
        schedReference
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dialog.addGroup("@SYS5711");
        dialogProjId                    = dialog.addFieldValue(extendedTypeStr(ProjId), projId);
        dialogModelId                   = dialog.addFieldValue(extendedTypeStr(ForecastModelId), modelId);

        dialog.addGroup("@SYS21838");
        dialogSchedDirection            = dialog.addFieldValue(enumStr(SchedDirection), schedDirection, "@SYS15281", "@SYS27636");
        dialogSchedDate                 = dialog.addFieldValue(extendedTypeStr(SchedDate), schedDate, "@SYS7402");
        dialogSchedTime                 = dialog.addFieldValue(extendedTypeStr(SchedTime), schedTime, "@SYS8758", "@SYS50938");
        dialogSchedMethod               = dialog.addFieldValue(enumStr(SchedMethod), schedMethod, "@SYS15097");
        dialogSort                      = dialog.addFieldValue(enumStr(ProjSchedSort), schedSort);
        dialogPrimaryResourceSelection  = dialog.addFieldValue(enumStr(WrkCtrSchedulerPrimaryResourceSelection), primaryResourceSelection, "@SYS303221", "@SYS303222");

        dialog.addGroup("@SYS22835");
        dialogSchedLimitCap             = dialog.addFieldValue(extendedTypeStr(SchedLimitCap), schedLimitCap);
        dialogKeepProductionUnit        = dialog.addFieldValue(extendedTypeStr(KeepProductionUnit), keepProductionUnit);

        dialog.addGroup("@SYS14018");
        dialogSchedReference            = dialog.addFieldValue(extendedTypeStr(SchedReference), schedReference);
        dialogSchedSyncRef              = dialog.addFieldValue(extendedTypeStr(SchedSyncRef), schedSyncRef);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        this.enableFields();

        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables dialog box fields.
    /// </summary>
    protected void enableFields()
    {
        dialogSchedSyncRef.enabled(dialogSchedReference.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld11_1_modified</Name>
				<Source><![CDATA[
    public boolean fld11_1_modified()
    {
        boolean ret;
        Object  control = dialog.formRun().controlCallingMethod();

        ret = control.modified();

        if (ret)
        {
            this.enableFields();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();
        this.parmProjId(dialogProjId.value());
        this.parmModelId(dialogModelId.value());
        this.parmSchedDate(dialogSchedDate.value());
        this.parmSchedTime(dialogSchedTime.value());
        this.parmSchedDirection(dialogSchedDirection.value());
        this.parmSchedMethod(dialogSchedMethod.value());
        this.parmSchedLimitCap(dialogSchedLimitCap.value());
        this.parmSchedSyncRef(dialogSchedSyncRef.value());
        this.parmSchedReference(dialogSchedReference.value());
        this.parmKeepProductionUnit(dialogKeepProductionUnit.value());
        this.parmPrimaryResourceSelection(dialogPrimaryResourceSelection.value());

        this.parmSchedSort(dialogSort.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when it calls the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        schedDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeepProductionUnit</Name>
				<Source><![CDATA[
    public KeepProductionUnit parmKeepProductionUnit(KeepProductionUnit _keepProductionUnit = keepProductionUnit)
    {
        keepProductionUnit = _keepProductionUnit;
        return keepProductionUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModelId</Name>
				<Source><![CDATA[
    public ForecastModelId parmModelId(ForecastModelId _modelId = modelId)
    {
        modelId = _modelId;

        return modelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrimaryResourceSelection</Name>
				<Source><![CDATA[
    public WrkCtrSchedulerPrimaryResourceSelection parmPrimaryResourceSelection(WrkCtrSchedulerPrimaryResourceSelection  _primaryResourceSelection = primaryResourceSelection)
    {
        primaryResourceSelection = _primaryResourceSelection;
        return primaryResourceSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchedDate</Name>
				<Source><![CDATA[
    public SchedDate parmSchedDate(SchedDate _schedDate = schedDate)
    {
        schedDate = _schedDate;

        return schedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchedDirection</Name>
				<Source><![CDATA[
    public SchedDirection parmSchedDirection(SchedDirection _schedDirection = schedDirection)
    {
        schedDirection = _schedDirection;

        return schedDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchedLimitCap</Name>
				<Source><![CDATA[
    public SchedLimitCap parmSchedLimitCap(SchedLimitCap _schedLimitCap = schedLimitCap)
    {
        schedLimitCap = _schedLimitCap;

        return schedLimitCap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchedMethod</Name>
				<Source><![CDATA[
    public SchedMethod parmSchedMethod(SchedMethod _schedMethod = schedMethod)
    {
        schedMethod = _schedMethod;

        return schedMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchedReference</Name>
				<Source><![CDATA[
    public SchedReference parmSchedReference(SchedReference _schedReference = schedReference)
    {
        schedReference = _schedReference;

        return schedReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchedSort</Name>
				<Source><![CDATA[
    public ProjSchedSort parmSchedSort(ProjSchedSort _schedSort = schedSort)
    {
        schedSort = _schedSort;

        return schedSort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchedSyncRef</Name>
				<Source><![CDATA[
    public SchedSyncRef parmSchedSyncRef(SchedSyncRef _schedSyncRef = schedSyncRef)
    {
        schedSyncRef = _schedSyncRef;

        return schedSyncRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchedTime</Name>
				<Source><![CDATA[
    public SchedTime parmSchedTime(SchedTime _schedTime = schedTime)
    {
        schedTime = _schedTime;

        return schedTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        WrkCtrParmSchedule      wrkCtrParmSchedule;
        WrkCtrScheduler_Proj    wrkCtrScheduler;

        this.progressInit("@SYS21838", 1, '');
        this.parmProgress().update(true);

        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            wrkCtrParmSchedule  = WrkCtrParmSchedule::newProjParmScheduling(this);

            wrkCtrScheduler = WrkCtrScheduler_Proj::newCheckLockingTTSLevel(false);

            wrkCtrParmSchedule.schedMethod(schedMethod);
            wrkCtrScheduler.addWrkCtrParmSchedule(wrkCtrParmSchedule);

            wrkCtrScheduler.run();

            wrkCtrScheduler.dispose();

            this.parmProgress().incCount();

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        this.progressKill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveProjForecastEmpl</Name>
				<Source><![CDATA[
    private void saveProjForecastEmpl(ProjForecastEmpl _projForecastEmpl)
    {
        _projForecastEmpl.reread();
        _projForecastEmpl.selectForUpdate(true);
        _projForecastEmpl.initFromTransDate();
        _projForecastEmpl.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;

            case 2:
                [version, #Version2List] = _packedClass;
                break;

            case 1:
                [version, #Version1List] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        if (! projId)
        {
            return checkFailed("@SYS53238");
        }

        if (ProjTable::find(projId).StartDate > schedDate)
        {
            return checkFailed("@SYS107206");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription description()
    {
        return "@SYS21838";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        ProjScheduling      projScheduling;
        FormRun             callerForm;
        FormDataSource      fds;

        switch (_args.dataset())
        {
            case tablenum(ProjTable):
                projScheduling = ProjScheduling::newProjTable(_args.record());
                break;
            case tablenum(ProjForecastEmpl):
                projScheduling = ProjScheduling::newProjForecastEmpl(_args.record());
                break;

            default:
                throw error(strfmt("@SYS25516",funcname()));
        }

        if (projScheduling.prompt())
        {
            projScheduling.runOperation();
        }

        if (_args.dataset() == tablenum(ProjForecastEmpl))
        {
            // save schedFromDate to ProjForecastEmpl
            projScheduling.saveProjForecastEmpl(_args.record());

            callerForm  = _args.caller();
            callerForm.doResearch();
            if (callerForm.args().caller())
            {
                fds = callerForm.args().caller().datasource();
                fds.reread();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjForecastEmpl</Name>
				<Source><![CDATA[
    private static ProjScheduling newProjForecastEmpl(ProjForecastEmpl _projForecastEmpl)
    {
        ProjScheduling  projScheduling = new ProjScheduling();

        projScheduling.getLast();

        projScheduling.parmProjId(_projForecastEmpl.ProjId);
        projScheduling.parmModelId(_projForecastEmpl.ModelId);

        return projScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjTable</Name>
				<Source><![CDATA[
    private static ProjScheduling newProjTable(ProjTable _projTable)
    {
        ProjScheduling  projScheduling = new ProjScheduling();

        projScheduling.getLast();
        projScheduling.parmProjId(_projTable.ProjId);

        return projScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>