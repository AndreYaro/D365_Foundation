<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqAddItemForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReqAddItemForm
{
    PurchReqTable           purchReqTableCaller;

    FormDataSource          line_ds;

    Set                     vendorProposalSet;
    Set                     vendorSuggestionSet;
    Map                     vendorProposalMap;
    Map                     vendorSuggestionMap;
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addVendorProposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores a temporary record that can later be retrieved.
    /// </summary>
    /// <param name="_purchReqLineVendorProposal">
    ///    A <c>PurchReqLineVendorProposal</c> record to retain in the memory.
    /// </param>
    public void addVendorProposal(PurchReqLineVendorProposal _purchReqLineVendorProposal)
    {
        vendorProposalSet.add(_purchReqLineVendorProposal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendorSuggestion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores a temporary record that can later be retrieved.
    /// </summary>
    /// <param name="_purchReqLineVendorSuggestion">
    ///    A <c>PurchReqLineVendorSuggestion</c> record to retain in memory.
    /// </param>
    public void addVendorSuggestion(PurchReqLineVendorSuggestion _purchReqLineVendorSuggestion)
    {
        vendorSuggestionSet.add(_purchReqLineVendorSuggestion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOK</Name>
				<Source><![CDATA[
    void closeOK()
    {
        PurchReqLine                    purchReqLine;
        container                       con;

        purchReqLine = line_ds.getFirst();

        while (purchReqLine.RecId != 0)
        {
            con = conIns(con, conLen(con) +1, buf2Con(purchReqLine));

            purchReqLine = line_ds.getNext();
        }

        PurchReqAddItemForm::closeOKServer(con,
                                           vendorProposalMap   ? vendorProposalMap.pack()   : conNull(),
                                           vendorSuggestionMap ? vendorSuggestionMap.pack() : conNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteVendorProposalSuggestion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the temporary record from the memory.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>PurchReqLine</c> record.
    /// </param>
    public void deleteVendorProposalSuggestion(RecId _recId)
    {
        if (vendorSuggestionMap && vendorSuggestionMap.exists(_recId))
        {
            vendorSuggestionMap.remove(_recId);
        }

        if (vendorProposalMap && vendorProposalMap.exists(_recId))
        {
            vendorProposalMap.remove(_recId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorProposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Called when a user creates a record with the <c>PurchReqAddItem</c> form.
    /// </summary>
    /// <returns>
    ///    The <c>PurchReqVendorProposal</c> records.
    /// </returns>
    public Set getVendorProposal()
    {
        return vendorProposalSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorSuggestion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Called when a user creates a record with the <c>PurchReqAddItem</c> form.
    /// </summary>
    /// <returns>
    ///    The <c>PurchReqVendorSuggestion</c> records.
    /// </returns>
    public Set getVendorSuggestion()
    {
        return vendorSuggestionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        vendorProposalSet = new Set(Types::Record);

        vendorSuggestionSet = new Set(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqLineDS</Name>
				<Source><![CDATA[
    FormDataSource  parmPurchReqLineDS(FormDataSource _line_ds= line_ds)
    {
        line_ds = _line_ds;
        return line_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqTableCaller</Name>
				<Source><![CDATA[
    public PurchReqTable parmPurchReqTableCaller(PurchReqTable _purchReqTableCaller = purchReqTableCaller)
    {
        purchReqTableCaller = _purchReqTableCaller;
        return purchReqTableCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeVendor</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes the record identified by the <c>RecId</c> from the passed set.
    /// </summary>
    /// <param name="_vendorSet">
    ///     The <c>Set</c> from where the record will be removed.
    /// </param>
    /// <param name="_vendorRecId">
    ///     The <c>RecId</c> of the record to be removed.
    /// </param>
    protected void removeVendor(Set _vendorSet, RecId _vendorRecId)
    {
        SetEnumerator   enumerator = _vendorSet.getEnumerator();
        Common          currentVendor;

        while (enumerator.moveNext())
        {
            currentVendor = enumerator.current();
            if (currentVendor.RecId == _vendorRecId)
            {
                _vendorSet.remove(currentVendor);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeVendorProposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Called when a user creates a record with the <c>PurchReqAddItem</c> form and removed the
    ///    <c>PurchReqLineVendorProposal</c> record that was stored in memory.
    /// </summary>
    /// <param name="_purchReqLineVendorProposal">
    ///    The <c>_purchReqLineVendorProposal</c> record to remove.
    /// </param>
    public void removeVendorProposal(PurchReqLineVendorProposal _purchReqLineVendorProposal)
    {
        this.removeVendor(vendorProposalSet, _purchReqLineVendorProposal.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeVendorSuggestion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Called when a user creates a record with the <c>PurchReqAddItem</c> form and removed the
    ///    <c>PurchReqLineVendorSuggestion</c> record that was stored in memory.
    /// </summary>
    /// <param name="_purchReqLineVendorSuggestion">
    ///    The <c>_purchReqLineVendorSuggestion</c> record to remove.
    /// </param>
    public void removeVendorSuggestion(PurchReqLineVendorSuggestion _purchReqLineVendorSuggestion)
    {
        this.removeVendor(vendorSuggestionSet, _purchReqLineVendorSuggestion.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveVendorProposalSuggestion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Called when a user creates a record with the <c>PurchReqAddItem</c> form and assigns the sets of
    ///    the <c>PurchReqVendorSuggestion</c> and <c>PurchReqLineVendorPropsal</c> records against the
    ///    <c>RecId</c> field of the <c>PurchReqLine</c> record.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>RecId</c> field of the <c>PurchReqLine</c> record.
    /// </param>
    public void saveVendorProposalSuggestion(RecId _recId)
    {
        if (!vendorProposalMap)
        {
            vendorProposalMap = new Map(Types::Int64, Types::Class);
        }

        vendorProposalMap.insert(_recId, vendorProposalSet);

        if (!vendorSuggestionMap)
        {
            vendorSuggestionMap = new Map(Types::Int64, Types::Class);
        }

        vendorSuggestionMap.insert(_recId, vendorSuggestionSet);

        if (!PurchReqAddItemAddVendorSuggestionsFlight::instance().isEnabled())
        { 
            vendorProposalSet = new Set(Types::Record);
            vendorSuggestionSet = new Set(Types::Record);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcurementCategoryForRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the procurement category data source for root category.
    /// </summary>
    /// <param name = "_root">Root category node.</param>
    /// <param name = "_ecoResCategoryTreeDatasource">An <c>EcoResCategoryTreeDatasource</c> instance.</param>
    [Hookable(false)]
    public void setProcurementCategoryForRoot(EcoResCategory _root, EcoResCategoryTreeDatasource _ecoResCategoryTreeDatasource)
    {        
        if (_root.RecId)
        {
            _ecoResCategoryTreeDatasource.initRoot(_root.Name, _root.RecId, _ecoResCategoryTreeDatasource.image());
            _ecoResCategoryTreeDatasource.setFocusOnFirstMatch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOKServer</Name>
				<Source><![CDATA[
    private static void closeOKServer(container _purchReqLineCon, container _vendorProposalMapCon, container _vendorSuggestionMapCon)
    {
        PurchReqTable                   purchReqTable;
        PurchReqLine                    purchReqLine;
        PurchReqLine                    purchReqLineCreate;
        PurchReqLineTaxExtensionIN      purchReqLineTaxExtensionIN;
        LineNum                         lineNum                          = -1;
        SequenceNumber                  sequenceNumber;
        PurchReqLineVendorProposal      purchReqLineVendorProposal;
        PurchReqLineVendorSuggestion    purchReqLineVendorSuggestion;
        Map                             vendorProposalMap                = _vendorProposalMapCon   ? Map::create(_vendorProposalMapCon)   : null;
        Map                             vendorSuggestionMap              = _vendorSuggestionMapCon ? Map::create(_vendorSuggestionMapCon) : null;
        SetEnumerator                   se;
        Set                             set;
        int                             i;

        ttsbegin;

        for (i = 1; i <= conLen(_purchReqLineCon); i++)
        {
            con2Buf(conPeek(_purchReqLineCon, i), purchReqLine);

            changecompany(purchReqLine.buyingLegalEntity2DataArea())
            {
                purchReqLineCreate.data(purchReqLine);

                if (lineNum == -1)
                {
                    lineNum        = PurchReqLine::lastLineNum(purchReqLineCreate.PurchReqTable) + 1;
                    sequenceNumber = PurchReqLine::lastSequenceNumber(purchReqLineCreate.PurchReqTable) + 1;
                }
                else
                {
                    lineNum++;
                    sequenceNumber ++;
                }

                purchReqLineCreate.LineNum          = lineNum;
                purchReqLineCreate.SequenceNumber   = sequenceNumber;

                if (!purchReqLineCreate.validateWrite())
                {
                    //Item number '%1' cannot be added to purchase requisition.
                    throw error(strFmt("@SYS113352", purchReqLineCreate.ItemId));
                }

                //Clear sourceDocumentLine if it is a temporary record
                //otherwise, use the same sourceDocumentLine
                //Permanent sourceDocumentLine record would be created when purchase requisition line is inserted.
                if (!SourceDocumentLine::find(purchReqLineCreate.SourceDocumentLine))
                {
                    purchReqLineCreate.SourceDocumentLine = 0;
                }

                purchReqLineCreate.initAssetGroup();
                
                purchReqLineCreate.setAddressFromInventDim(purchReqLineCreate.inventDim());

                purchReqLineCreate.insert();

                purchReqLineCreate.performBudgetCheck();

                purchReqTable = purchReqLineCreate.purchReqTable();

                if (PurchReqTableForm::isPurchReqLineBudgetControlEnabled() || PurchReqTableForm::isProjectBudgetControlEnabled())
                {
                    PurchReqTable::createAccountingDistributions(purchReqTable.RecId);
                }

                if (vendorProposalMap && vendorProposalMap.exists(purchReqLine.RecId))
                {
                    set = vendorProposalMap.lookup(purchReqLine.RecId);
                    se = set.getEnumerator();

                    while (se.moveNext())
                    {
                        purchReqLineVendorProposal.data(se.current());
                        purchReqLineVendorProposal.PurchReqLine = purchReqLineCreate.RecId;
                        purchReqLineVendorProposal.insert();
                    }
                }

                if (vendorSuggestionMap && vendorSuggestionMap.exists(purchReqLine.RecId))
                {
                    set = vendorSuggestionMap.lookup(purchReqLine.RecId);
                    se = set.getEnumerator();

                    while (se.moveNext())
                    {
                        purchReqLineVendorSuggestion.data(se.current());
                        purchReqLineVendorSuggestion.PurchReqLine = purchReqLineCreate.RecId;
                        purchReqLineVendorSuggestion.insert();
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchReqAddItemForm construct()
    {
        return new PurchReqAddItemForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchReqAddItemForm</Name>
				<Source><![CDATA[
    static PurchReqAddItemForm newPurchReqAddItemForm(PurchReqTable  _purchReqTableCaller)
    {
        PurchReqAddItemForm purchReqAddItemForm;
        if (!_purchReqTableCaller)
        {
            throw error("@SYS30498");
        }
        purchReqAddItemForm = PurchReqAddItemForm::construct();
        purchReqAddItemForm.parmPurchReqTableCaller(_purchReqTableCaller);

        return purchReqAddItemForm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>