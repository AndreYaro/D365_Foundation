<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalTransferRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalTransferRequest</c> class is used as a data contract for the
/// <c>SubLedgerJournalTransferOperation</c> class.
/// </summary>
[DataContractAttribute]
[SysOperationContractProcessingAttribute(classstr(SubLedgerJournalTransferUIBuilder))]
class SubledgerJournalTransferRequest
{
    NoYes doSummarization;
    NoYes waitInAsyncMode;
    FiscalCalendarPeriodRecId fiscalCalendarPeriod;
    LedgerRecid ledgerId;
    RefTableId sourceDocumentRelationType;
    AccountingEventRecId accountingEventId;
    SourceDocumentClassId sourceDocumentClassId;
    str sourceDocumentTypeEnumTranslatedName;
    SubledgerJournalTransferMode subledgerJournalTransferMode;
    RecId sourceLinkRecId;
    RefRecId scheduleOccurrenceRecId;
    RefRecId scheduleSeriesPatternRecId;
    ProcessExecutionId executionId;
    private int transferBundleSize;
    private int transferLineLimit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFiscalCalendarYearPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fiscal calendar year and period name based on a fiscal calendar period.
    /// </summary>
    /// <returns>
    /// The container that contains the fiscal year name and period name.
    /// </returns>
    public container getFiscalCalendarYearPeriod()
    {
        FiscalCalendarYear          fyear;
        FiscalCalendarPeriod        fperiod;

        select RecId,FiscalCalendarYear,Name from fperiod
                where fperiod.RecId == fiscalCalendarPeriod
            join RecId,Name from fyear
                where fyear.RecId == fperiod.FiscalCalendarYear;

        return [fyear.Name,fperiod.Name];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        SourceDocumentParameters sourceDocumentParameters = SubledgerJournalTransferOperation::findOrCreateTransferProcessParameterValues();

        doSummarization=NoYes::No;
        fiscalCalendarPeriod=0;
        ledgerId =0;
        sourceDocumentRelationType =0;
        waitInAsyncMode = false;
        subledgerJournalTransferMode = subledgerJournalTransferMode::ScheduledBatch;
        sourceLinkRecId = 0;
        transferBundleSize = sourceDocumentParameters.TransferProcessTaskBundleSize;
        transferLineLimit = sourceDocumentParameters.TransferProcessTaskLineLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingEventId</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public AccountingEventRecId parmAccountingEventId(AccountingEventRecId _accountingEventId = accountingEventId)
    {
        accountingEventId = _accountingEventId;
        return accountingEventId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoSummarization</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmDoSummarization(NoYes _doSummarization = doSummarization)
    {
        doSummarization = _doSummarization;
        return doSummarization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public FiscalCalendarPeriodRecId parmFiscalCalendarPeriod(FiscalCalendarPeriodRecId _fiscalCalendarPeriod = fiscalCalendarPeriod)
    {
        fiscalCalendarPeriod = _fiscalCalendarPeriod;
        return fiscalCalendarPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmledgerId</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public LedgerRecid parmledgerId(LedgerRecid _ledgerId = ledgerId)
    {
        ledgerId = _ledgerId;
        return ledgerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentRelationType</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public RefTableId parmSourceDocumentRelationType(RefTableId _sourceDocumentRelationType = sourceDocumentRelationType)
    {
        sourceDocumentRelationType = _sourceDocumentRelationType;
        return sourceDocumentRelationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentType</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public SourceDocumentClassId parmSourceDocumentType(SourceDocumentClassId _sourceDocumentClassId = sourceDocumentClassId)
    {
        sourceDocumentClassId = _sourceDocumentClassId;
        return sourceDocumentClassId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaitInAsyncMode</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmWaitInAsyncMode(NoYes _waitInAsyncMode = waitInAsyncMode)
    {
        waitInAsyncMode = _waitInAsyncMode;
        return waitInAsyncMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentTypeEnumTranslatedName</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmSourceDocumentTypeEnumTranslatedName(str _sourceDocumentTypeEnumTranslatedName = sourceDocumentTypeEnumTranslatedName)
    {
        sourceDocumentTypeEnumTranslatedName = _sourceDocumentTypeEnumTranslatedName;
        return sourceDocumentTypeEnumTranslatedName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubledgerJournalTransferMode</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public SubledgerJournalTransferMode parmSubledgerJournalTransferMode(SubledgerJournalTransferMode _subledgerJournalTransferMode = subledgerJournalTransferMode)
    {
        subledgerJournalTransferMode = _subledgerJournalTransferMode;
        return subledgerJournalTransferMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceLinkRecid</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute,
        SysOperationControlVisibility(false)
    ]
    public RecId parmSourceLinkRecid(RecId _sourceLinkRecId = sourceLinkRecId)
    {
        sourceLinkRecId = _sourceLinkRecId;
        return sourceLinkRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExecutionId</Name>
				<Source><![CDATA[
    [DataMember, Hookable(false)]
    public ProcessExecutionId parmExecutionId(ProcessExecutionId _executionId = executionId)
    {
        executionId = _executionId;

        return executionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessScheduleOccurrenceRecId</Name>
				<Source><![CDATA[
    [DataMember, Hookable(false)]
    public RefRecId parmProcessScheduleOccurrenceRecId(RefRecId _scheduleOccurrenceRecId = scheduleOccurrenceRecId)
    {
        scheduleOccurrenceRecId = _scheduleOccurrenceRecId;

        return scheduleOccurrenceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessScheduleSeriesPatternRecId</Name>
				<Source><![CDATA[
    [DataMember, Hookable(false)]
    public RefRecId parmProcessScheduleSeriesPatternRecId(RefRecId _scheduleSeriesPatternRecId = scheduleSeriesPatternRecId)
    {
        scheduleSeriesPatternRecId = _scheduleSeriesPatternRecId;

        return scheduleSeriesPatternRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferProcessBundleSize</Name>
				<Source><![CDATA[
    [DataMember, Hookable(false)]
    public int parmTransferProcessBundleSize(int _transferBundleSize = transferBundleSize)
    {
        transferBundleSize = _transferBundleSize;

        return transferBundleSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferProcessLineLimit</Name>
				<Source><![CDATA[
    [DataMember, Hookable(false)]
    public int parmTransferProcessLineLimit(int _transferLineLimit = transferLineLimit)
    {
        transferLineLimit = _transferLineLimit;

        return transferLineLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fiscal calendar period based on the fiscal year and period name.
    /// </summary>
    /// <param name="_fiscalYearName">
    /// The fiscal year name.
    /// </param>
    /// <param name="_periodName">
    /// The fiscal period name.
    /// </param>
    public void setFiscalCalendarPeriod(FiscalYearName _fiscalYearName,PeriodName _periodName)
    {
        FiscalCalendarYear          fyear;
        FiscalCalendarPeriod        fperiod;
        Ledger                      ledger;
        CompanyInfo                 companyInfo;

        select DataArea,RecId from companyInfo
                where companyInfo.DataArea == curext()
            join PrimaryForLegalEntity from ledger
                where ledger.PrimaryForLegalEntity == companyInfo.RecId
            join RecId,FiscalCalendar,Name from fyear
                where fyear.FiscalCalendar == ledger.FiscalCalendar &&
                      fyear.Name == _fiscalYearName
            join RecId,Name,FiscalCalendarYear from fperiod
                where fperiod.FiscalCalendarYear == fyear.RecId &&
                      fperiod.Name == _periodName;

        fiscalCalendarPeriod = fperiod.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>