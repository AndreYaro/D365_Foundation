<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgResourceJobsForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgResourceJobsForm</c> class supports the <c>JmgResourceJobs</c> form.
/// </summary>
/// <remarks>
///    All functions made available through the <c>JmgResourceJobs</c> form are implemented by using this
///    class.The class contains a temporary buffer of <c>JmgJobTable</c> records, which are the records
///    manipulated by the user in the UI. The user selects several jobs from the temporary buffer and
///    executes one or more functions on them.The <c>selectedJobs</c> map contains the currently selected
///    jobs by the user.
/// </remarks>
class JmgResourceJobsForm
{
    JmgJobTable     temporaryBuffer;
    FormDataSource  formDataSource;
    WrkCtrId        currentResource;
    ProdUnitId      currentProdUnit;
    boolean         isGroup;
    boolean         showOnlyTodayNotCompleted;
    Map             selectedJobs;
    boolean         isPendingSave;

    JmgJobPriority  maxPriority;

    FormControl     moveUpBtn;
    FormControl     moveDwnBtn;
    FormControl     moveLnBtn;
    FormControl     moveResBtn;
    FormControl     makeMandBtn;
    FormControl     remMandBtn;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addJobsToResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds specified jobs to the selected resource.
    /// </summary>
    /// <param name="_jobs">
    ///    A map of jobs which is added to the selected resource.
    /// </param>
    /// <remarks>
    ///    Before invoking the <c>addJobsToResource</c> method, a resource must be specified by using the
    ///    <c>parmResource</c> method.
    /// </remarks>
    public void addJobsToResource(Map _jobs)
    {
        JmgJobTable     jobToAdd;
        MapEnumerator   mapEnumerator;
        mapEnumerator   = _jobs.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            jobToAdd    = mapEnumerator.currentValue();

            jobToAdd.WrkCtrId   = currentResource;
            jobToAdd.PriorityResource   = maxPriority + 1;
            maxPriority++;

            select firstonly temporaryBuffer
                where temporaryBuffer.JobId == jobToAdd.JobId;

            if (temporaryBuffer != null)
            {
                temporaryBuffer.data(jobToAdd);
                temporaryBuffer.update();
            }
            else
            {
                temporaryBuffer.data(jobToAdd);
                temporaryBuffer.insert();
            }

            selectedJobs.insert(jobToAdd.JobId, jobToAdd);
        }
        this.refreshDatasource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSelectedJobs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the selected jobs.
    /// </summary>
    /// <remarks>
    ///    This method clears the selected jobs.
    /// </remarks>
    public void clearSelectedJobs()
    {
        selectedJobs = new Map(Types::String, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables buttons in the Edit job list form, when the active record is changed.
    /// </summary>
    /// <param name="_jobTable">
    /// The <c>JmgJobTable</c> record, which is set as the active button.
    /// </param>
    void dataSourceActive(JmgJobTable _jobTable)
    {
        MapEnumerator mapEnumerator;
        JmgJobTable     selectedJob;
        boolean enableBtns = selectedJobs.elements();

        this.handleButton(moveUpBtn,enableBtns);
        this.handleButton(moveDwnBtn,enableBtns);
        this.handleButton(moveLnBtn,enableBtns);
        this.handleButton(moveResBtn,enableBtns);

        mapEnumerator = selectedJobs.getEnumerator();
        enableBtns = false;
        while (mapEnumerator.moveNext())
        {
            selectedJob = mapEnumerator.currentValue();
            enableBtns = !selectedJob.Locked ? true : enableBtns;
        }
        this.handleButton(makeMandBtn,enableBtns);
        mapEnumerator = selectedJobs.getEnumerator();
        enableBtns = false;
        while (mapEnumerator.moveNext())
        {
            selectedJob = mapEnumerator.currentValue();
            enableBtns = selectedJob.Locked ? true : enableBtns;
        }
        this.handleButton(remMandBtn,enableBtns);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSequence</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the sequence for the selected resource.
    /// </summary>
    /// <remarks>
    ///    A resource must be specified by using the <c>parmResource</c> method before the
    ///    <c>deleteSequence</c> method is called.
    /// </remarks>
    public void deleteSequence()
    {
        JmgJobTable jmgJobTable;

        JmgJobPriority maxPrio = maxint();

        this.saveChanges();
        update_recordset jmgJobTable
            setting PriorityResource = maxPrio
            where jmgJobTable.WrkCtrId == currentResource;

        this.initJmgJobTableBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumSelectedPriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the largest priority of the selected jobs.
    /// </summary>
    /// <returns>
    ///    The largest priority of the selected jobs.
    /// </returns>
    /// <remarks>
    ///    This method iterates the <c>selectedJobs</c> map and retrieves the highest priority in the selected
    ///    jobs.
    /// </remarks>
    public JmgJobPriority getMaximumSelectedPriority()
    {
        JmgJobPriority  ret = 0;
        MapEnumerator   mapEnumerator;
        JmgJobTable     currentJob;

        mapEnumerator = selectedJobs.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            currentJob = mapEnumerator.currentValue();
            if (ret == 0 || currentJob.PriorityResource > ret)
            {
                ret = currentJob.PriorityResource;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinimumSelectedPriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the lowest priority of the selected jobs.
    /// </summary>
    /// <returns>
    ///    The lowest priority of the selected jobs.
    /// </returns>
    /// <remarks>
    ///    This method iterates the <c>selectedJobs</c> map and retrieves the lowest priority in the selected
    ///    jobs.
    /// </remarks>
    public JmgJobPriority getMinimumSelectedPriority()
    {
        JmgJobPriority  ret = 0;
        MapEnumerator   mapEnumerator;
        JmgJobTable     currentJob;

        mapEnumerator = selectedJobs.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            currentJob = mapEnumerator.currentValue();
            if (ret == 0 || currentJob.PriorityResource < ret)
            {
                ret = currentJob.PriorityResource;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedJobIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the job IDs that the worker has currently selected.
    /// </summary>
    /// <returns>
    ///    A container that has job IDs that the worker has currently selected.
    /// </returns>
    public container getSelectedJobIds()
    {
        container jobIds;
        MapEnumerator mapEnumerator = selectedJobs.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            jobIds += mapEnumerator.currentKey();
        }

        return jobIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables a specific button.
    /// </summary>
    /// <param name="_btn">
    ///    The button to enable.
    /// </param>
    /// <param name="_enable">
    ///    true if the button must be enabled; otherwise, false.
    /// </param>
    private void handleButton(FormControl _btn, boolean _enable)
    {
        if (_btn != null)
        {
            _btn.enabled(_enable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJmgJobTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal temporary buffer of <c>JmgJobTable</c> records.
    /// </summary>
    /// <remarks>
    ///    This method initializes the temporary <c>JmgJobTable</c> buffer with records from the
    ///    <c>JmgJobTable</c> table.The records added to the temporary buffer are selected based on the
    ///    resourced specified by using the <c>parmResource</c> method
    /// </remarks>
    public void initJmgJobTableBuffer()
    {
        JmgJobTable                 clearTempBuffer;
        JmgJobTable                 jobsToInsert;
        JmgJobPriority              currentPriority;
        Query                       q;
        QueryBuildDataSource        qbds;
        QueryRun                    qr;
        str                         wrkCtrRange = '';
        WrkCtrResourceGroup         resGrp;
        WrkCtrResourceGroupResource resGrpRes;

        clearTempBuffer.setTmp();
        temporaryBuffer.setTmp();
        temporaryBuffer.setTmpData(clearTempBuffer);
        currentPriority = 0;

        q       = new Query();
        q.recordLevelSecurity(true);
        qbds    = q.addDataSource(tablenum(JmgJobTable));
        qbds.addRange(fieldnum(JmgJobTable, Type)).value(queryRange(JmgJobTableType::ProdQueueBefore, JmgJobTableType::ProdQueueAfter));
        qbds.addRange(fieldnum(JmgJobTable, ReportedFinished)).value(queryValue(NoYes::No));

        if (isGroup)
        {
            while select recid, wrkCtrId from resGrp
            where resGrp.WrkCtrId == currentResource
            join resourceGroup, wrkCtrId from resGrpRes
            where resGrpRes.ResourceGroup == resGrp.RecId
            {
                wrkCtrRange = queryRangeConcat(wrkCtrRange, queryValue(resGrpRes.WrkCtrId));
            }

            wrkCtrRange = queryRangeConcat(wrkCtrRange, currentResource);
        }
        else if (currentResource != '')
        {
            wrkCtrRange = currentResource;
        }
        else if (currentProdUnit != '')
        {
            WrkCtrResourceAndGroupView resourceAndGrp;
            while select WrkCtrId from resourceAndGrp
                where resourceAndGrp.ProdUnitId == currentProdUnit
            {
                wrkCtrRange = queryRangeConcat(wrkCtrRange, queryValue(resourceAndGrp.WrkCtrId));
            }
        }

        if (wrkCtrRange != '')
        {
            qbds.addRange(fieldnum(JmgJobTable, WrkCtrId)).value(wrkCtrRange);
        }

        qbds.addSortField(fieldnum(JmgJobTable, PriorityResource));
        qbds.addSortField(fieldnum(JmgJobTable, FromDate));
        qbds.addSortField(fieldnum(JmgJobTable, FromTime));

        qr = new QueryRun(q);
        while (qr.next())
        {
            jobsToInsert = qr.get(tablenum(JmgJobTable));

            if (showOnlyTodayNotCompleted && (jobsToInsert.jobStatus() == JmgJobStatus::Completed || jobsToInsert.FromDate > DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())))
            {
                continue;
            }

            currentPriority++;
            temporaryBuffer.data(jobsToInsert);
            temporaryBuffer.PriorityResource    = currentPriority;
            temporaryBuffer.insert();

            if (selectedJobs.exists(temporaryBuffer.JobId))
            {
                selectedJobs.insert(temporaryBuffer.JobId, temporaryBuffer);
            }
        }

        maxPriority = currentPriority;

        if (formDataSource)
        {
            formDataSource.cursor().setTmp();
            formDataSource.cursor().setTmpData(temporaryBuffer);
            formDataSource.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJobSelected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether the specified job is currently selected.
    /// </summary>
    /// <param name="_jobId">
    ///    The job ID to test whether it is selected.
    /// </param>
    /// <returns>
    ///    true if the specified job ID is currently selected; otherwise, false.
    /// </returns>
    public boolean isJobSelected(JmgJobId _jobId)
    {
        return selectedJobs.exists(_jobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockSequence</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>Locked</c> field to a <c>NoYes::Yes</c> enumeration value on selected jobs.
    /// </summary>
    /// <remarks>
    ///    This method iterates through the selected jobs and updates the <c>Locked</c> field to a
    ///    <c>NoYes::Yes</c> enumeration value.
    /// </remarks>
    public void lockSequence()
    {
        MapEnumerator mapEnumerator;

        mapEnumerator = selectedJobs.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            select firstonly temporaryBuffer
                where temporaryBuffer.JobId == mapEnumerator.currentKey();
            temporaryBuffer.Locked  = NoYes::Yes;
            temporaryBuffer.update();
            selectedJobs.insert(temporaryBuffer.JobId, temporaryBuffer);
        }
        // Move all selected jobs to the top.
        this.moveToLine(1);

        this.refreshDatasource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the selected jobs one position down in the sequence.
    /// </summary>
    /// <remarks>
    ///    This method rearranges the sequence of jobs in the temporary buffer, so that that the selected jobs
    ///    are moved one position down in the sequence. If a selected job is already at the buttom of the
    ///    sequence, no rearrangement will be done.
    /// </remarks>
    public void moveDown()
    {
        JmgJobId previousJobId;
        JmgJobTable previousJob;

        previousJob.setTmp();
        previousJob.setTmpData(temporaryBuffer);

        while select temporaryBuffer
            order by PriorityResource desc
        {
            if (selectedJobs.exists(temporaryBuffer.JobId))
            {
                if (previousJobId)
                {
                    select firstonly previousJob
                        where previousJob.JobId == previousJobId;

                    previousJob.PriorityResource -= 1;
                    previousJob.update();

                    temporaryBuffer.PriorityResource += 1;
                    temporaryBuffer.update();
                    selectedJobs.insert(temporaryBuffer.JobId, temporaryBuffer);

                    this.parmIsPendingSave(true);
                }
            }
            else
            {
                previousJobId = temporaryBuffer.JobId;
            }
        }
        this.refreshDatasource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the selected jobs to a specified position in the sequence
    /// </summary>
    /// <param name="_lineNum">
    ///    The line number to which to move the selected jobs.
    /// </param>
    /// <remarks>
    ///    This method rearranges jobs in the temporary buffer, so that the selected job is positioned at the
    ///    specified line number. If more than one job is selected, the second job will be positioned at the
    ///    <c>_lineNum</c> parameter plus one, the third job at the <c>_lineNum</c> parameter plus two, and so
    ///    on.
    /// </remarks>
    public void moveToLine(JmgJobPriority _lineNum)
    {
        JmgJobPriority  newLineNumNotSelected;
        JmgJobPriority  newLineNumSelected;
        JmgJobPriority  minSelected;
        JmgJobPriority  maxSelected;
        JmgJobPriority  minReorder;
        JmgJobPriority  maxReorder;
        int             noOfSelectedJobs;

        minSelected = this.getMinimumSelectedPriority();
        maxSelected = this.getMaximumSelectedPriority();
        noOfSelectedJobs = selectedJobs.elements();

        if (_lineNum > maxPriority - noOfSelectedJobs)
        {
            _lineNum = maxPriority - noOfSelectedJobs + 1;
        }
        else if (_lineNum == 0)
        {
            return;
        }

        minReorder = min(_lineNum, minSelected);
        maxReorder = max(_lineNum + noOfSelectedJobs, maxSelected);
        newLineNumNotSelected = minReorder;
        newLineNumSelected    = _lineNum;

        while select temporaryBuffer
            order by PriorityResource asc
            where   temporaryBuffer.PriorityResource    >= minReorder &&
                    temporaryBuffer.PriorityResource    <= maxReorder
        {
            if (!selectedJobs.exists(temporaryBuffer.JobId))
            {
                if (newLineNumNotSelected == _lineNum)
                {
                    newLineNumNotSelected = _lineNum + noOfSelectedJobs;
                }
                temporaryBuffer.PriorityResource    = newLineNumNotSelected;
                temporaryBuffer.update();
                newLineNumNotSelected++;
            }
            else
            {
                temporaryBuffer.PriorityResource = newLineNumSelected;
                temporaryBuffer.update();
                newLineNumSelected++;
                selectedJobs.insert(temporaryBuffer.JobId, temporaryBuffer);
            }

            this.parmIsPendingSave(true);
        }

        this.refreshDatasource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Select all jobs with same operation number and priority and moves the selected jobs to the specified resource.
    /// </summary>
    /// <param name="_newResource">
    ///    The resource to which to move the jobs.
    /// </param>
    public void moveToResource(WrkCtrId _newResource)
    {
        MapEnumerator   mapEnumerator;
        ListEnumerator  listEnumerator;
        JmgJobTable     selectedJob;
        List            tempSelectedJobs = new List(Types::Record);
        
        // Copy the values of the map
        mapEnumerator = selectedJobs.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            selectedJob = mapEnumerator.currentValue();
            tempSelectedJobs.addEnd(selectedJob);
        }

        // Select all jobs within the same operation number and priority
        listEnumerator = tempSelectedJobs.getEnumerator();

        while (listEnumerator.moveNext())
        {
            selectedJob = listEnumerator.current();

            while select temporaryBuffer
                where temporaryBuffer.ModuleRefId   == selectedJob.ModuleRefId  &&
                      temporaryBuffer.OprNum        == selectedJob.OprNum       &&
                      temporaryBuffer.Priority      == selectedJob.Priority     &&
                      temporaryBuffer.WrkCtrId      == selectedJob.WrkCtrId     &&
                      temporaryBuffer.JobId         != selectedJob.JobId
            {
                if (!selectedJobs.exists(temporaryBuffer.JobId))
                {
                    selectedJobs.insert(temporaryBuffer.JobId, temporaryBuffer);
                }
            }
        }
        this.saveChanges();

        // Move jobs to resource.
        JmgResourceJobsForm moveJobsToResourceForm = new JmgResourceJobsForm();
        moveJobsToResourceForm.parmResource(_newResource);
        moveJobsToResourceForm.addJobsToResource(selectedJobs);
        moveJobsToResourceForm.saveChanges();

        // Re-initialize internal buffer.
        this.initJmgJobTableBuffer();

        this.refreshDatasource();

        if ((isGroup && WrkCtrTable::resourceGroup(_newResource).WrkCtrId != currentResource)
            || (!isGroup && currentResource != _newResource))
        {
            this.clearSelectedJobs();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the selected jobs one position up in the sequence.
    /// </summary>
    /// <remarks>
    ///    This method rearranges the sequence of jobs in the temporary buffer, so that the selected jobs are
    ///    moved one position up in the sequence. If a selected job is already at the top of the sequence, no
    ///    rearrangement will be done.
    /// </remarks>
    public void moveUp()
    {
        JmgJobId previousJobId;
        JmgJobTable previousJob;

        previousJob.setTmp();
        previousJob.setTmpData(temporaryBuffer);

        while select temporaryBuffer
            order by PriorityResource asc
        {
            if (selectedJobs.exists(temporaryBuffer.JobId))
            {
                if (previousJobId)
                {
                    select firstonly previousJob
                        where previousJob.JobId == previousJobId;

                    previousJob.PriorityResource += 1;
                    previousJob.update();

                    temporaryBuffer.PriorityResource -= 1;
                    temporaryBuffer.update();
                    selectedJobs.insert(temporaryBuffer.JobId, temporaryBuffer);

                    this.parmIsPendingSave(true);
                }
            }
            else
            {
                previousJobId = temporaryBuffer.JobId;
            }
        }
        this.refreshDatasource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        selectedJobs = new Map(Types::String, Types::Record);
        temporaryBuffer.setTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentProdUnit</Name>
				<Source><![CDATA[
    public ProdUnitId parmCurrentProdUnit(ProdUnitId _currentProdUnit = currentProdUnit)
    {
        currentProdUnit = _currentProdUnit;

        return currentProdUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResource</Name>
				<Source><![CDATA[
    public WrkCtrId parmResource(WrkCtrId _value = currentResource)
    {
        if (!prmisdefault(_value))
        {
            currentResource = _value;
            isGroup = WrkCtrTable::find(currentResource).IsIndividualResource == NoYes::No;
            this.initJmgJobTableBuffer();
        }
        return currentResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowOnlyTodayNotCompleted</Name>
				<Source><![CDATA[
    public boolean parmShowOnlyTodayNotCompleted(boolean _showOnlyTodayNotCompleted = showOnlyTodayNotCompleted)
    {
        showOnlyTodayNotCompleted = _showOnlyTodayNotCompleted;
        return showOnlyTodayNotCompleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPendingSave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are any unsaved pending changes.
    /// </summary>
    /// <param name = "_isPendingSave">Marks if there are any pending changes.</param>
    /// <returns>true if there are pending unsaved changes; false - otherwise.</returns>
    public boolean parmIsPendingSave(boolean _isPendingSave = isPendingSave)
    {
        isPendingSave = _isPendingSave;
        return isPendingSave;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the form data source set in the <c>setFormDataSource</c> method.
    /// </summary>
    /// <remarks>
    ///    This method is invoked whenever a function has manipulated the temporary buffer to update the form
    ///    data source that displays data from the temporary buffer.
    /// </remarks>
    protected void refreshDatasource()
    {
        if (formDataSource)
        {
            formDataSource.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers buttons internally, which allows them to be enabled.
    /// </summary>
    /// <param name="_moveUpBtn">
    /// A reference to the Move up button.
    /// </param>
    /// <param name="_moveDwnBtn">
    /// A reference to the move down button.
    /// </param>
    /// <param name="_moveLnBtn">
    /// A reference to the move to line button.
    /// </param>
    /// <param name="_moveResBtn">
    /// A reference to the move to resource button.
    /// </param>
    /// <param name="_makeMandBtn">
    /// A reference to the High priority button
    /// </param>
    /// <param name="_remMandBtn">
    /// A reference to the Remove high priority button.
    /// </param>
    void registerButtons(FormControl _moveUpBtn, FormControl _moveDwnBtn, FormControl _moveLnBtn, FormControl _moveResBtn, FormControl _makeMandBtn, FormControl _remMandBtn)
    {
        moveUpBtn = _moveUpBtn;
        moveDwnBtn = _moveDwnBtn;
        moveLnBtn = _moveLnBtn;
        moveResBtn = _moveResBtn;
        makeMandBtn = _makeMandBtn;
        remMandBtn = _remMandBtn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveChanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves any changes that were made to the temporary buffer
    /// </summary>
    /// <remarks>
    ///    This method saves any changes that were made to records in the temporary buffer to the
    ///    <c>JmgJobTable</c> table.
    /// </remarks>
    public void saveChanges()
    {
        JmgJobTable  saveToJobTable;
        WrkCtrCapRes wrkCtrCapRes;
        ProdRouteJob prodRouteJob;

        ttsbegin;
        while select temporaryBuffer
            join forupdate saveToJobTable
            where temporaryBuffer.JobId == saveToJobTable.JobId
               && (saveToJobTable.PriorityResource  != temporaryBuffer.PriorityResource
                   || saveToJobTable.Locked         != temporaryBuffer.Locked
                   || saveToJobTable.WrkCtrId       != temporaryBuffer.WrkCtrId)
        {
            saveToJobTable.PriorityResource = temporaryBuffer.PriorityResource;
            saveToJobTable.Locked           = temporaryBuffer.Locked;
            saveToJobTable.WrkCtrId         = temporaryBuffer.WrkCtrId;
            saveToJobTable.update();
        }

        while select temporaryBuffer
            join forupdate wrkCtrCapRes
            where temporaryBuffer.JobId == wrkCtrCapRes.JobId
               && (wrkCtrCapRes.WrkCtrId     != temporaryBuffer.WrkCtrId
                   || wrkCtrCapRes.Locked    != temporaryBuffer.Locked)
        {
            wrkCtrCapRes.Locked   = temporaryBuffer.Locked;
            wrkCtrCapRes.WrkCtrId = temporaryBuffer.WrkCtrId;
            wrkCtrCapRes.update();
        }

        while select temporaryBuffer
            join forupdate prodRouteJob
            where temporaryBuffer.JobId == prodRouteJob.JobId
               && prodRouteJob.WrkCtrId != temporaryBuffer.WrkCtrId
        {
            prodRouteJob.WrkCtrId = temporaryBuffer.WrkCtrId;
            prodRouteJob.update();
        }

        ttscommit;

        this.parmIsPendingSave(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified job is selected.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether the status should be set.
    /// </param>
    /// <param name="_jmgJobTable">
    ///    A reference to a <c>JmgJobTable</c> record to set as selected or not selected.
    /// </param>
    /// <param name="_selected">
    ///    A <c>NoYes::Yes</c> enumeration value if the specified job should be set as selected; otherwise, a
    ///    <c>NoYes::No</c> enumeration value
    /// </param>
    /// <returns>
    ///    A <c>NoYes::Yes</c> enumeration value if the specified job is selected; otherwise, a
    ///    <c>NoYes::No</c> enumeration value
    /// </returns>
    public NoYes selectJob(boolean _set, JmgJobTable _jmgJobTable, NoYes _selected)
    {
        if (_set)
        {
            if (_selected == NoYes::Yes)
            {
                selectedJobs.insert(_jmgJobTable.JobId, _jmgJobTable);
            }
            else if (selectedJobs.exists(_jmgJobTable.JobId))
            {
                selectedJobs.remove(_jmgJobTable.JobId);
            }
            this.dataSourceActive(_jmgJobTable);
        }
        if (selectedJobs.exists(_jmgJobTable.JobId))
        {
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the form data source that displays the contents of the temporary buffer.
    /// </summary>
    /// <param name="_formDataSource">
    ///    A reference to the form data source that currently displays the contents of the temporary buffer.
    /// </param>
    /// <remarks>
    ///    Whenever the internal temporary buffer is updated, the form data source set by this method will be
    ///    refreshed.
    /// </remarks>
    public void setFormDataSource(FormDataSource _formDataSource)
    {
        formDataSource = _formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlockSequence</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>Locked</c> field to a <c>NoYes::No</c> enumeration value on the selected jobs.
    /// </summary>
    /// <remarks>
    ///    This method iterates through the selected jobs and updates the <c>Locked</c> field to a
    ///    <c>NoYes::No</c> enumeration value.
    /// </remarks>
    public void unlockSequence()
    {
        MapEnumerator mapEnumerator;

        mapEnumerator = selectedJobs.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            select firstonly temporaryBuffer
                where temporaryBuffer.JobId == mapEnumerator.currentKey();
            temporaryBuffer.Locked = NoYes::No;
            temporaryBuffer.update();
            selectedJobs.insert(temporaryBuffer.JobId, temporaryBuffer);
        }
        this.refreshDatasource();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>