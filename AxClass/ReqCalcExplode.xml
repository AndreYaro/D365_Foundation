<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcExplode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqCalcExplode extends ReqCalc implements BatchRetryable
{
    InventTransRefId            refId;
    ReqRefType                  refType;
    InventTransOriginId         inventTransOriginId;
    ReqDeleteExplosionCoverage  deleteCoverage;
    InventDeleteMarking         deleteMarking;
    boolean                     runInNewSession = false;
    boolean                     reservationExplosion;
    boolean                     marking;

    // this reference is necessary because PurchReqLine does not have InventTrans,
    // thus the corresponding ReqTrans has InventTransOrigin = 0.
    RecId                       purchReqLineRecId;

    DialogField                 dialogDeleteCoverage;
    DialogField                 dialogDeleteMarking;
    DialogField                 dialogAutoReserveCoverage;
    DialogField                 dialogEnableTraceLog;
    DialogField                 dialogRecalculateBomLevels;

    #DEFINE.CurrentVersion(4)
    #LOCALMACRO.CurrentList
        refId,
        refType,
        InventTransOriginId,
        deleteCoverage,
        purchReqLineRecId,
        deleteMarking
    #ENDMACRO

    #DEFINE.CurrentPromptVersion(1)
    #LOCALMACRO.CurrentPromptList
        recalculateBomLevels
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actionQtyUpdate</Name>
				<Source><![CDATA[
    protected boolean actionQtyUpdate(ReqTrans _reqTrans)
    {
        if (_reqTrans.isPlannedOrder())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>covCalcItem</Name>
				<Source><![CDATA[
    protected void covCalcItem(BOMLevel _level, ItemId _itemId)
    {
        ttsBegin;
        this.updateItemLock(_itemId);
        this.updateReqTransUpdate(_itemId);
        ttsCommit;

        super(_level, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentDaySchedFrom</Name>
				<Source><![CDATA[
    public ReqCurrentDaySchedFrom currentDaySchedFrom()
    {
        return reqParameters.CurrentDaySchedFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteData</Name>
				<Source><![CDATA[
    public void deleteData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return runInNewSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReservationExplosion</Name>
				<Source><![CDATA[
    public boolean parmReservationExplosion(boolean _reservationExplosion = reservationExplosion)
    {
        reservationExplosion = _reservationExplosion;
        return reservationExplosion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarking</Name>
				<Source><![CDATA[
    public boolean parmMarking(boolean _marking = marking)
    {
        marking = _marking;
        return marking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunInNewSession</Name>
				<Source><![CDATA[
    public boolean parmRunInNewSession(boolean _runInNewSession = runInNewSession)
    {
        runInNewSession = _runInNewSession;
        return runInNewSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <param name="_dialog">
    ///     A dialog represents rescheduling dialog, optional.
    /// </param>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog(Dialog _dialog = null)
    {
        dialog = _dialog == null ? super() : _dialog;

        dialog.addGroup("@GLS3800046");
        dialogEnableTraceLog = dialog.addFieldValue(extendedTypeStr(NoYesId), enableTableTraceLog, "@GLS3800047");

        dialog.addGroup("@SYS328111");
        dialogRecalculateBomLevels = dialog.addFieldValue(extendedTypeStr(NoYesId), false, "@SYS112515");

        dialog.addGroup("@SYS86125");
        dialogDeleteCoverage = dialog.addFieldValue(extendedTypeStr(ReqDeleteExplosionCoverage),deleteCoverage);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (dialogDeleteCoverage)
        {
            deleteCoverage = dialogDeleteCoverage.value();
        }
        else
        {
            deleteCoverage = NoYes::Yes;
        }

        if (dialogDeleteMarking)
        {
            deleteMarking = dialogDeleteMarking.value();
        }
        else
        {
            deleteMarking = NoYes::No;
        }

        if (dialogAutoReserveCoverage)
        {
            autoReserveCoverage = dialogAutoReserveCoverage.value();
        }
        else
        {
            autoReserveCoverage = NoYes::No;
        }

        if (dialogEnableTraceLog)
        {
            enableTableTraceLog = dialogEnableTraceLog.value();
        }
        else
        {
            enableTableTraceLog = false;
        }

        recalculateBomLevels = dialogRecalculateBomLevels.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeIntercompanyDemand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a value that indicates whether to include intercompany demand or not.
    /// </summary>
    /// <returns>
    ///    A Boolean value that indicates whether to include intercompany demand or not.
    /// </returns>
    public boolean includeIntercompanyDemand()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when the system calls the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        deleteCoverage = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReqLog</Name>
				<Source><![CDATA[
    protected void initReqLog()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the <c>ReqTrans</c> records into the internal cache.
    /// </summary>
    /// <remarks>
    ///    Records in the internal cache will be coverage-planned.
    /// </remarks>
    protected void insertData()
    {
        ReqTrans    reqTrans;
        ReqTrans    reqTransDerived;

        select firstonly forupdate RecId, ItemId from reqTrans
            where  reqTrans.PlanVersion            == this.reqPlanVersionRefRecId()
                && reqTrans.RefType                == refType
                && reqTrans.RefId                  == refId
                && reqTrans.InventTransOrigin      == inventTransOriginId;

        if (reqTrans.RecId)
        {
            this.updateItemLock(reqTrans.ItemId);

            this.updateReqTransUpdate(reqTrans.ItemId);

            // reselect the record as changes could have been applied by previous line
            reqTrans = ReqTrans::findRecId(reqTrans.RecId,true);

            if (reqTrans.RecId)
            {
                if (deleteCoverage)
                {
                    reqTrans.deleteExplosionCoverage(reqPlanData);
                }

                reqTransDerived = reqTrans.selectDerived();

                while (reqTransDerived.RecId)
                {
                    this.addReqTrans2ReqTransCache(reqTransDerived,false);
                    next reqTransDerived;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReqProcessTransFilterForInventJournalReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creating missed requirement transactions process filter for <c>ReqTrans</c> with inventory journal type.
    /// </summary>
    /// <param name="_itemId">
    ///     An item ID that will be used to find reqTrans.
    /// </param>
    protected void createReqProcessTransFilterForInventJournalReqTrans(ItemId _itemId)
    {
        ReqTrans reqTrans;
        while select reqTrans
                where reqTrans.PlanVersion == this.reqPlanVersionRefRecId()
                   && reqTrans.ItemId      == _itemId
                   && reqTrans.OpenStatus  == ReqOpenStatus::Neg
                   && reqTrans.RefType     == ReqRefType::InventJournal
        {
            reqPlanData.addReqTransCache(reqTrans);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseCacheDuringUpdate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustUseCacheDuringUpdate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustExplodeNonPlannedReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if non-planned receipts should also be exploded.
    /// </summary>
    /// <returns>
    /// true when non-planned receipts should be exploded; otherwise, false.
    /// </returns>
    protected boolean mustExplodeNonPlannedReceipt()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteCoverage</Name>
				<Source><![CDATA[
    ReqDeleteExplosionCoverage parmDeleteCoverage(ReqDeleteExplosionCoverage _deleteCoverage = deleteCoverage)
    {
        deleteCoverage = _deleteCoverage;

        return deleteCoverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteMarking</Name>
				<Source><![CDATA[
    public InventDeleteMarking parmDeleteMarking(InventDeleteMarking _deleteMarking = deleteMarking)
    {
        deleteMarking = _deleteMarking;

        return deleteMarking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOriginId</Name>
				<Source><![CDATA[
    public InventTransOriginId parmInventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        inventTransOriginId = _inventTransOriginId;

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqLineRecId</Name>
				<Source><![CDATA[
    public RecId parmPurchReqLineRecId(RecId _purchReqLineRecId = purchReqLineRecId)
    {
        purchReqLineRecId = _purchReqLineRecId;
        return purchReqLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefId</Name>
				<Source><![CDATA[
    public InventTransRefId parmRefId(InventTransRefId _refId = refId)
    {
        refId = _refId;

        return refId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefType</Name>
				<Source><![CDATA[
    public ReqRefType parmRefType(ReqRefType _refType = refType)
    {
        refType = _refType;

        return refType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptPack</Name>
				<Source><![CDATA[
    protected container promptPack(boolean promptRet = true)
    {
        return [#CurrentPromptVersion,#CurrentPromptList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptUnpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpack packed prompt.
    /// </summary>
    /// <param name="packedClass">
    /// The packed data.
    /// </param>
    /// <param name="promptRet">
    /// The prompt status
    /// </param>
    /// <returns>
    /// true if unpack succeeds; otherwise, false.
    /// </returns>
    public boolean promptUnpack(container packedClass, boolean promptRet = true)
    {
        Integer         version        = conPeek(packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentPromptVersion:
                [version,#CurrentPromptList,base] = packedClass;
                super(base);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshUpdatedReqPo</Name>
				<Source><![CDATA[
    public void refreshUpdatedReqPo(ReqPO _reqPO)
    {
        _reqPO.data(ReqPO::find(_reqPO.PlanVersion,_reqPO.RefId,true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshUpdatedReqTrans</Name>
				<Source><![CDATA[
    public void refreshUpdatedReqTrans(ReqTrans _reqTrans)
    {
        // Always go to the database to make sure the record with the correct recVersion is retrieved
        _reqTrans.data(ReqTrans::findRecId(_reqTrans.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        setPrefix(this.caption());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    public void setParameters()
    {
        super();

        reqTransCache.parmUseReqTransFilter(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsbegin</Name>
				<Source><![CDATA[
    protected void ttsbegin()
    {
        if (!multiUserConcurrencyAllowed)
        {
            ttsbegin;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttscommit</Name>
				<Source><![CDATA[
    protected void ttscommit()
    {
        if (!multiUserConcurrencyAllowed)
        {
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version        = conPeek(packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,base] = packedClass;
                super(base);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCache</Name>
				<Source><![CDATA[
    public ReqUseCache useCache()
    {
        return ReqUseCache::Maximum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (!refId)
        {
            return checkFailed("@SYS24743");
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the explosion can be performed.
    /// </summary>
    /// <param name="_reqRefType">
    ///    A <c>ReqRefType</c> enumeration value that represents the requirement type.
    /// </param>
    /// <returns>
    ///    true if the explosion can be performed; otherwise, false.
    /// </returns>
    static boolean canRunReqTrans(ReqRefType _reqRefType)
    {
        if (   _reqRefType == ReqRefType::Sales
            || _reqRefType == ReqRefType::Production
            || _reqRefType == ReqRefType::PmfCoProduct
            || _reqRefType == ReqRefType::RequisitionLine
            || ReqTrans::refTypeIsPlannedOrder(_reqRefType)
            || ReqTrans::derivedRefType(_reqRefType) != ReqRefType::None)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ReqCalcExplode</c> class.
    /// </summary>
    /// <returns>
    /// A <c>ReqCalcExplode</c> object.
    /// </returns>
    public static ReqCalcExplode newInstance()
    {
        return new ReqCalcExplode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use ReqCalcExplodeFactory instead.', true, 30\11\2017)]
    public static ReqCalcExplode construct(ReqRefType _refType)
    {
        return ReqCalcExplodeFactory::construct()
            .withReqRefType(_refType)
            .createInstance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS9304";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCommonDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for creating a <c>ReqCalcExplode</c> instance from a common.
    /// </summary>
    /// <param name = "_common">The common</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> class where the instantiated <c>ReqCalcExplode</c> class can be returned.</param>
    static delegate void newFromCommonDelegate(Common _common, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateInstrumentationContext</Name>
				<Source><![CDATA[
    protected SysInstrumentationActivityContext initiateInstrumentationContext()
    {
        return this.reqInstrumentationLogger().calc().explode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqInstrumentationLoggerClassName</Name>
				<Source><![CDATA[
    protected ClassName reqInstrumentationLoggerClassName()
    {
        return classStr(ReqCalcExplode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ReqCalcExplode</c> class.
    /// </summary>
    /// <param name="_common">A buffer representing the entity to explode.</param>
    /// <returns>A <c>ReqCalcExplode</c> object.</returns>
    private static ReqCalcExplode newFromCommon(Common _common)
    {
        switch (_common.TableId)
        {
            case tableNum(ReqTrans):
                ReqTrans reqTrans = _common;
                return ReqCalcExplode::newReqTransPrompt(_common);

            case tableNum(SalesLine):
                SalesLine salesLine = _common;
                return ReqCalcExplodeSales::newSalesIdPrompt(salesLine.SalesId, salesLine.InventTransId);

            case tableNum(ProdTable):
                ProdTable prodTable = _common;
                return ReqCalcExplodeProd::newProdTablePrompt(prodTable);

            case tableNum(PurchReqLine):
                PurchReqLine purchReqLine = _common;
                return ReqCalcExplodePurchReqLine::newPurchReqLine(purchReqLine);

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                ReqCalcExplode::newFromCommonDelegate(_common, result);

                if (result.hasResult())
                {
                    return result.result() as ReqCalcExplode;
                }
                break;
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        #OCCRetryCount
        ReqCalcExplode          reqCalcExplode;
        ReqTransForm            reqTransForm;

        FormRun                 callerForm;
        Object                  formRunObject;

        Common                  common;

        if (!args.caller())
        {
            throw error(strFmt("@SYS22828", funcName()));
        }

        if (args.record().RecId)
        {
            common = args.record();
        }
        else
        {
            callerForm = args.caller();

            if (callerForm && 
                callerForm.args() && 
                callerForm.args().dataset() && 
                callerForm.args().record().RecId)
            {
                common = callerForm.args().record();
            }
        }

        if (common.RecId)
        {
            reqCalcExplode = ReqCalcExplode::newFromCommon(common);
        }

        if (!reqCalcExplode)
        {
            throw error("@SYS82775");
        }

        if (!reqCalcExplode.prompt())
        {
            return;
        }

        try
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(args))
            {
                reqCalcExplode.parmRunInNewSession(true);
                reqCalcExplode.runOperation();
            }        
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            var currentRetryCount = xSession::currentRetryCount();     
            if (currentRetryCount >= #RetryNum || !ReqTransientSqlConnectionErrorHandlingHelper::isReqTransientSqlConnectionErrorHandlingToggleEnabled())
            {
                reqCalcExplode.cleanUp();
                throw;
            }
            else
            {
                ReqTransientSqlConnectionErrorHandlingHelper::delayRetry(currentRetryCount);
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    reqCalcExplode.cleanUp();
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                reqCalcExplode.cleanUp();
                throw Exception::UpdateConflict;
            }
        }
        catch
        {
            reqCalcExplode.cleanUp();
        }

        if (args.caller() && formHasMethod(args.caller(), identifierStr(reqTransForm)))
        {
            formRunObject = args.caller();
            reqTransForm  = formRunObject.reqTransForm();
            reqTransForm.doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventoryMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new <c>ReqCalcExplode</c> object.
    /// </summary>
    /// <param name="_inventMovement">
    /// An <c>InventMovement</c> object.
    /// </param>
    /// <param name="_autoReserveCoverage">
    /// A Boolean value that determines whether reservation must be performed; optional.
    /// </param>
    /// <param name="_applyFuturesEventKanban">
    /// A Boolean value that determines if futures dates should be applied to Event Kanbans; optional.
    /// </param>
    /// <returns>
    /// A <c>ReqCalcExplode</c> object.
    /// </returns>
    public static ReqCalcExplode newInventoryMovement(
        InventMovement  _inventMovement,
        NoYes           _autoReserveCoverage = NoYes::No,
        NoYes           _applyFuturesEventKanban = NoYes::No)
    {
        ReqCalcExplode      reqCalcExplode;
        ReqRefType          reqRefType = ReqTrans::transType2RefType(_inventMovement.transType(),_inventMovement.transSign());

        reqCalcExplode = ReqCalcExplodeFactory::construct()
            .withReqRefType(reqRefType)
            .withInventTransRefId(_inventMovement.transRefId())
            .withInventTransOriginId(_inventMovement.inventTransOriginId())
            .createInstance();

        if (reqCalcExplode)
        {
            reqCalcExplode.parmReqPlanId(ReqPlanSched::defaultDynamicId());
            reqCalcExplode.parmReqCalcUpdate(ReqCalcUpdate::NetChangeMinimized);
            reqCalcExplode.parmDeleteCoverage(false);
            reqCalcExplode.parmDeleteMarking(false);
            reqCalcExplode.parmAutoReserveCoverage(_autoReserveCoverage);
            reqCalcExplode.parmReqPlanData(null);
            reqCalcExplode.parmApplyFuturesToEventKanban(_applyFuturesEventKanban);
        }

        return reqCalcExplode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReqTrans</Name>
				<Source><![CDATA[
    public static ReqCalcExplode newReqTrans(
        ReqTrans        _reqTrans,
        ReqPlanData     _reqPlanData // May be NULL
        )
    {
        ReqCalcExplode      reqCalcExplode;
        ReqPlanId           reqPlanId           = ReqPlanVersion::find(_reqTrans.PlanVersion).ReqPlanId;

        reqCalcExplode = ReqCalcExplodeFactory::construct()
            .withReqRefType(_reqTrans.RefType)
            .createInstance();

        reqCalcExplode.getLast();
        reqCalcExplode.parmRefId(_reqTrans.RefId);
        reqCalcExplode.parmRefType(_reqTrans.RefType);
        reqCalcExplode.parmReqPlanId(reqPlanId);
        reqCalcExplode.parmInventTransOriginId(_reqTrans.InventTransOrigin);
        reqCalcExplode.parmReqCalcUpdate(ReqCalcUpdate::NetChangeMinimized);
        reqCalcExplode.parmDeleteCoverage(true);
        reqCalcExplode.parmAutoReserveCoverage(false);
        reqCalcExplode.parmDeleteMarking(false);

        if (_reqPlanData && _reqPlanData.reqTransCache())
        {
            reqCalcExplode.parmReqPlanData(_reqPlanData);
        }

        return reqCalcExplode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReqTransPrompt</Name>
				<Source><![CDATA[
    public static ReqCalcExplode newReqTransPrompt(ReqTrans _reqTrans)
    {
        ReqCalcExplode reqCalcExplode = ReqCalcExplodeFactory::construct()
            .withSysLastValue()
            .withReqRefType(_reqTrans.RefType)
            .withInventTransRefId(_reqTrans.RefId)
            .withInventTransOriginId(_reqTrans.InventTransOrigin)
            .createInstance();

        if (reqCalcExplode)
        {
            ReqPlanId reqPlanId = ReqPlanVersion::find(_reqTrans.PlanVersion).ReqPlanId;
            reqCalcExplode.parmPurchReqLineRecId(_reqTrans.RequisitionLine);
            reqCalcExplode.parmReqPlanId(reqPlanId);
            reqCalcExplode.parmReqCalcUpdate(ReqCalcUpdate::NetChangeMinimized);
        }

        return reqCalcExplode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>