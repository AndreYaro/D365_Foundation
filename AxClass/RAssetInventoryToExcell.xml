<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetInventoryToExcell</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetInventoryToExcell extends RunBaseBatch implements BatchRetryable, ERIReportPostProcessingSupported
{
    private const str LocalizationFeatureReference = 'EEU-00025';
    XMLExcelDocument_RU  excellDocument;

    RAssetInventoryTable assetInventoryTable;
    RAssetStandardId     assetStandardId;
    DialogField          dialogStandardId;
    DialogField          dialogTransDate;
    RAssetTransDate      assetTransDate;

    boolean              createdOffsessionId;
    Filename             newFileName;

    protected const Version CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    private boolean check()
    {
        RAssetInventoryTrans    assetInventoryTrans;
        ;

        select firstonly assetInventoryTrans
            where assetInventoryTrans.InventoryTableRecId == assetInventoryTable.RecId &&
                  assetInventoryTrans.AssetStandardId     == assetStandardId;

        return assetInventoryTrans ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearOffsession</Name>
				<Source><![CDATA[
    protected void clearOffsession()
    {
        if(createdOffsessionId)
        {
            OfficialsTrans_RU::deleteWithoutUpdate(this.getOffSessionId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@GLS116494");
        dialogStandardId = dialog.addFieldValue(extendedTypeStr(RAssetStandardId), assetStandardId);
        dialogTransDate  = dialog.addFieldValue(extendedTypeStr(RAssetTransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS23896", "@GLS102130");
        dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(RAssetOfficials_RU), DialogMenuItemGroup::BottomGrp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();
        assetStandardId = dialogStandardId.value();
        assetTransDate  = dialogTransDate.value();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffSessionId</Name>
				<Source><![CDATA[
    OffSessionId_RU getOffSessionId()
    {
        return assetInventoryTable.OffSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportType</Name>
				<Source><![CDATA[
    OffReportType_RU getReportType()
    {
        return OffReportType_RU::RAssetsINV1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficials</Name>
				<Source><![CDATA[
    protected void initOfficials()
    {
        OfficialsTrans_RU   officialTrans;

        if(assetInventoryTable.OffSessionId)
        {
            select firstonly RecId from officialTrans
                where officialTrans.OffSessionId == this.getOffSessionId() &&
                      officialTrans.ReportType   == this.getReportType();

            createdOffsessionId = !officialTrans.RecId;

            if(createdOffsessionId)
            {
                assetInventoryTable.initOfficialsDefault(this.getReportType());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(Args _args)
    {
        if (! _args || _args.dataset() != tableNum(RAssetInventoryTable))
        {
            throw(error(strFmt("@SYS19306", funcName())));
        }

        assetInventoryTable = _args.record();
        this.initOfficials();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPageBreakBefore</Name>
				<Source><![CDATA[
    private void insertPageBreakBefore(int _row)
    {
        excellDocument.insertPageBreak(_row -  1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens an XMLExcelDocument to work with
    /// </summary>
    /// <returns>
    /// true, if document was opened
    /// </returns>
    /// <remarks>
    /// File first copied to subfolder of current user temp path, if subfolder doesn't exist, it's created
    /// </remarks>
    public boolean makeDocument()
    {
        const str fileExtension = '.xlsx';
        boolean     ret = true;

        try
        {
            newFileName = this.templateName() + fileExtension;

            excellDocument =  XMLExcelDocument_RU::newFromResource(this.templateName(), false);
        }
        catch
        {
            ret = checkFailed(strFmt("@SYS72245", newFileName));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, assetStandardId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageHeight</Name>
				<Source><![CDATA[
    protected real pageHeight(int _workSheet = 1)
    {
        Enumerator  i = excellDocument.workbook().getWorksheet(_workSheet).rowBreaks().getEnumerator();
        int         row;
        int         start = 1;
        real        ret;
        while (i.moveNext())
        {
            row = i.current();
            ret = max(ret, this.rangeHeight(start, row));
            start = row+1;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOfficials</Name>
				<Source><![CDATA[
    protected void printOfficials()
    {
        const str Chairman = 'Chairman';
        const str ChairmanName = 'ChairmanName';
        const str Member = 'Member\%1';
        const str MemberName = 'MemberName\%1';
        const int MemberCnt = 3;

        int cnt;

        OfficialsTrans_RU offTrans = OfficialsTrans_RU::find(this.getOffSessionId(), this.getReportType(), OffPosition_RU::Chairman);

        excellDocument.insertValue(Chairman, offTrans.Title);
        excellDocument.insertValue(ChairmanName, offTrans.Name);

        while select offTrans
            where offTrans.OffSessionId == this.getOffSessionId() &&
                  offTrans.ReportType   == this.getReportType()   &&
                  offTrans.Position     == OffPosition_RU::Member
        {
            ++cnt;
            excellDocument.insertValue(strFmt(Member, cnt), offTrans.Title);
            excellDocument.insertValue(strFmt(MemberName, cnt), offTrans.Name);
            if (cnt == MemberCnt)
            {
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeHeight</Name>
				<Source><![CDATA[
    protected real rangeHeight(int _startingRow, int _endingRow = _startingRow, int _workSheet = 1)
    {
        real ret;

        for (int i=_startingRow; i<= _endingRow; i++)
        {
            ret += this.rowHeight(i, _workSheet);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAllPageBreaks</Name>
				<Source><![CDATA[
    private void removeAllPageBreaks()
    {
        Set breaks = excellDocument.workbook().getWorksheet(1).rowBreaks();
        Set clone = Set::union(new Set(Types::Integer), breaks);
        Enumerator i = clone.getEnumerator();
        while (i.moveNext())
        {
            breaks.remove(i.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rowHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets height of specified row.
    /// </summary>
    /// <param name="_row">
    /// A row index.
    /// </param>
    /// <param name="_worksheet">
    /// A number of the excel worksheet.
    /// </param>
    /// <returns>
    /// Height of a row.
    /// </returns>
    protected real rowHeight(int _row, int _worksheet = 1)
    {
        return excellDocument.workbook().getWorksheet(_worksheet).getRowHeight(_row);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    #macrolib.RAssetMSOfficeConstant
    public void run()
    {
        const int Value10 = 10;
        const int Value2 = 2;
        const int Value3 = 3;
        const int Value4 = 4;
        const int EmptyRow = 42;
        const int StartDataRow = 43;
        const int Value7 = 7;
        const int Value5 = 5;
        const int Value8 = 8;
        const int Value9 = 9;
        const str space = " ";
        const str comma = ", ";
        const int shapePageHeaderRow = 34;
        const int shapePageHeaderHeight = 8;
        const int shapePageFooterRow = 1;
        const int shapePageFooterHeight = 7;
        const int shapeTotalFooterRow = 44;
        const int footerShapeWorkSheet = 2;
        const int startPageNum = 3;

        int                     j = StartDataRow,
                                rowCount;
        int                     remainRows;
        CurrencyCode            currencyCode;
        RAssetInventoryTrans    assetInventoryTrans;
        RAssetTable             assetTable;
        EmployeeTable_RU        employee1,
                                employee2;
        str                     curCurrency1,
                                curCurrency2;
        HrmDescription          positionDescr1;
        HrmDescription          positionDescr2;
        RNumDateInWordConverter converter = RNumDateInWordConverter::construct();

        int                     pageCount;
        real                    pageHeight;
        real                    pageDataHeight;
        real                    rowHeight;
        real                    remainHeight;
        real                    totalRowHeight;

        Qty                     pageItemQty;
        Qty                     pageFactQty;
        Amount                  pageNetBookValue;

        void outPageTotals(int _pageRow)
        {
            excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(4, _pageRow + 2), converter.numeralsToTxt(pageItemQty));
            excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(4, _pageRow + 4), converter.numeralsToTxt(pageFactQty));
            excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(4, _pageRow + 6), converter.numeralsToCurrency(pageNetBookValue,
                                                                        RAssetStandardTable::find(assetStandardId).CurrencyCode));

        }

        if (this.makeDocument())
        {
            select count(RecId) from assetInventoryTrans
                where assetInventoryTrans.InventoryTableRecId == assetInventoryTable.RecId &&
                      assetInventoryTrans.AssetStandardId     == assetStandardId;

            remainRows = int642int(assetInventoryTrans.RecId);
            excellDocument.insertValue(#FactOrderQtyTxt, converter.numeralsToTxt(remainRows));
            excellDocument.insertValue(#FA2_RU, remainRows);

            this.progressInit("@GLS116502", remainRows + 1, #AviTransfer);

            currencyCode = RAssetStandardTable::find(assetStandardId).CurrencyCode;

            GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());

            curCurrency1 = CurrencyNameDeclension_RU::find(currencyCode, CompanyInfo::languageId()).ShortName;
            curCurrency2 = CurrencyNameDeclension_RU::find(currencyCode, CompanyInfo::languageId()).ShortNamePenny;

            if (curCurrency1)
                curCurrency1 += curCurrency2 ? comma + curCurrency2 : "";
            else
                curCurrency1 = currencyCode;

            employee1 = EmployeeTable_RU::findByEmployeeId(assetInventoryTable.EmployeeTable1);
            employee2 = EmployeeTable_RU::findByEmployeeId(assetInventoryTable.EmployeeTable2);

            positionDescr1 = HcmPosition::findByPosition(employee1.worker().primaryPositionId()).description();
            positionDescr1 = positionDescr1 ? positionDescr1 : employee1.worker().primaryPositionId();
            positionDescr2 = HcmPosition::findByPosition(employee2.worker().primaryPositionId()).description();
            positionDescr2 = positionDescr2 ? positionDescr2 : employee2.worker().primaryPositionId();

            this.printOfficials();

            excellDocument.insertValue(#RegNum_RU,             assetInventoryTable.InventoryOrder);
            excellDocument.insertValue(#Num2_RU,               assetInventoryTable.InventoryOrder);
            excellDocument.insertValue(#Location_RU,           assetInventoryTable.Location + space + RAssetLocation::find(assetInventoryTable.Location).Name);
            excellDocument.insertValue(#Location2_RU,          assetInventoryTable.Location + space + RAssetLocation::find(assetInventoryTable.Location).Name);
            excellDocument.insertValue(#Company_RU,            CompanyInfo::find().name());
            excellDocument.insertValue(#CodeOKPO_RU,           CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), assetInventoryTable.StartDate));
            excellDocument.insertValue(#DocDate_RU,            date2str(assetTransDate, 123, 2, 2, 2, 2, 2,DateFlags::None));
            excellDocument.insertValue(#DocDate1_RU,           date2str(assetInventoryTable.StartDate, 123, 2, 2, 2, 2, 2,DateFlags::None));
            excellDocument.insertValue(#EndDate_RU,            date2str(assetInventoryTable.EndDate, 123, 2, 2, 2, 2, 2,DateFlags::None));
            excellDocument.insertValue(#Currency1_RU,          curCurrency1);
            excellDocument.insertValue(#Currency2_RU,          curCurrency1);
            excellDocument.insertValue(#Currency3_RU,          curCurrency1);
            excellDocument.insertValue(#Empl1_RU,              employee1.employeeName());
            excellDocument.insertValue(#Empl2_RU,              employee2.employeeName());
            excellDocument.insertValue(#Empl3_RU,              employee1.employeeName());
            excellDocument.insertValue(#Empl4_RU,              employee2.employeeName());
            excellDocument.insertValue(#Title1_RU,             positionDescr1);
            excellDocument.insertValue(#Title2_RU,             positionDescr2);
            excellDocument.insertValue(#Title3_RU,             positionDescr1);
            excellDocument.insertValue(#Title4_RU,             positionDescr2);
            excellDocument.insertValue(#FA1_RU,                1);

            select sum(FactQty), sum(AccountingQty) from assetInventoryTrans
                where assetInventoryTrans.InventoryTableRecId == assetInventoryTable.RecId &&
                      assetInventoryTrans.AssetStandardId     == assetStandardId;

            excellDocument.insertValue(#FactQtyTotal,        assetInventoryTrans.FactQty);
            excellDocument.insertValue(#AccountingQtyTotal,  assetInventoryTrans.AccountingQty);
            excellDocument.insertValue(#FactQtyTxt,          converter.numeralsToTxt(assetInventoryTrans.FactQty));

            select sum(NetBookValue) from assetInventoryTrans
                where assetInventoryTrans.InventoryTableRecId == assetInventoryTable.RecId &&
                      assetInventoryTrans.AssetStandardId     == assetStandardId           &&
                      assetInventoryTrans.FactQty             >  0;

            excellDocument.insertValue(#FactCostTotal,       assetInventoryTrans.NetBookValue);
            excellDocument.insertValue(#FactCostTxt,         converter.numeralsToCurrency(assetInventoryTrans.NetBookValue,
                                                                                RAssetStandardTable::find(assetStandardId).CurrencyCode));

            select sum(NetBookValue) from assetInventoryTrans
                where assetInventoryTrans.InventoryTableRecId == assetInventoryTable.RecId &&
                      assetInventoryTrans.AssetStandardId     == assetStandardId           &&
                      assetInventoryTrans.AccountingQty       >  0;

            excellDocument.insertValue(#AccountingCostTotal, assetInventoryTrans.NetBookValue);

            pageHeight      = this.pageHeight();
            this.removeAllPageBreaks();
            pageDataHeight  = pageHeight  -
                                            this.rangeHeight(shapePageHeaderRow, shapePageHeaderRow + shapePageHeaderHeight - 1)
                                          - this.rangeHeight(shapePageFooterRow, shapePageFooterRow + shapePageFooterHeight - 1, footerShapeWorkSheet);
            remainHeight    = pageDataHeight;
            pageCount       = startPageNum;

            totalRowHeight  = this.rangeHeight(shapeTotalFooterRow);

            this.insertPageBreakBefore(shapePageHeaderRow);

            while select assetInventoryTrans
                where assetInventoryTrans.InventoryTableRecId == assetInventoryTable.RecId &&
                      assetInventoryTrans.AssetStandardId     == assetStandardId
            {
                assetTable = RAssetTable::find(assetInventoryTrans.AccountNum);

                progress.incCount();
                progress.setText(assetTable.Name);

                rowCount++;

                excellDocument.insertRow(j);
                excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(1, j), rowCount);
                excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(Value2, j), assetTable.Name);

                if (assetTable.GuaranteeDate)
                {
                    excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(Value3, j),
                                               year(assetTable.GuaranteeDate));
                }

                excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(Value4, j), assetTable.AccountNum);
                excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(Value5, j), assetTable.SerialNum);
                excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(Value7, j), assetInventoryTrans.FactQty);

                excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(Value8, j),
                                           num2str(assetInventoryTrans.NetBookValue, 12, Value2, Value2, 0));
                excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(Value9, j), assetInventoryTrans.AccountingQty);
                excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(Value10, j),
                                           num2str(assetInventoryTrans.NetBookValue, 12, Value2, Value2, 0));

                remainRows--;
                rowHeight       = this.rangeHeight(j);
                remainHeight   -= rowHeight;

                if (remainHeight < 0 || (!remainRows && remainHeight < totalRowHeight))
                {
                    j--;
                    // Insert page footer
                    excellDocument.insertRows(shapePageFooterRow, shapePageFooterRow + shapePageFooterHeight - 1, footerShapeWorkSheet, j);
                    outpageTotals(j);

                    j += shapePageFooterHeight + 1;

                    // Insert a new page header
                    excellDocument.insertRows(shapePageHeaderRow, shapePageHeaderRow + shapePageHeaderHeight - 1, 1, j - shapePageHeaderRow);

                    // Insert page break
                    this.insertPageBreakBefore(j - ((j > EmptyRow) ? 1 : 0));
                    excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(Value10, j), strFmt(#PageNumStr, pageCount));

                    j += shapePageHeaderHeight;

                    pageCount++;
                    remainHeight        = pageDataHeight - rowHeight;
                    pageItemQty         = 0;
                    pageFactQty         = 0;
                    pageNetBookValue    = 0;
                }

                // Increment page totals
                pageItemQty++;
                pageFactQty += assetInventoryTrans.FactQty;
                if (assetInventoryTrans.FactQty > 0)
                {
                    pageNetBookValue += assetInventoryTrans.NetBookValue;
                }

                j++;
            }

            excellDocument.deleteRow(j);
            excellDocument.deleteRow(EmptyRow);
            j--;

            // Last page with page totals
            outpageTotals(j);

            j += shapePageFooterHeight + 1;

            this.insertPageBreakBefore(j);
            excellDocument.insertValue(ComExcelDocument_RU::numToNameCell(Value10, j), strFmt(#PageNumStr, pageCount));

            // Clear page footer shape
            j = shapePageFooterHeight;
            while (j)
            {
                excellDocument.deleteRow(shapePageFooterRow, footerShapeWorkSheet);
                j--;
            }

            progress.incCount();
            excellDocument.closeDocument(true);
            this.showDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes the counting report visible.
    /// </summary>
    protected void showDocument()
    {
        System.IO.Stream stream = excellDocument.parmStream();

        if (AccountingDocumentsERPostProcessingToggle::isEnabled())
        {
            ERBinaryContentService binaryContentService = new ERBinaryContentService();
            binaryContentService.parmERFormatMappingId(DocuParameters::find().AccountingDocumentsERFormatMapping);
            binaryContentService.initBinaryDataFromStream(stream);
            binaryContentService.processReportInER(this as ERIReportPostProcessingSupported);
        }
        else
        {
            var destination = ERObjectsFactory::createFileDestinationBrowser();

            destination.saveFile(stream, newFileName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    private Filename templateName()
    {
        return resourceStr(RAssetInventory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return newFileName + "@SYS34952" + assetInventoryTable.InventoryOrder + "@SYS34953";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'INV1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version     = conPeek(_packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, assetStandardId] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (! assetStandardId)
                ret = checkFailed("@GLS116616");

            if (assetTransDate == dateNull())
                ret = checkFailed("@SYS24455");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RAssetInventoryToExcell construct()
    {
        return new RAssetInventoryToExcell();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        RAssetInventoryToExcell  rassetInventory = RAssetInventoryToExcell::construct();
        ;

        rassetInventory.initValue(_args);

        if (rassetInventory.prompt())
        {
            if (rassetInventory.check())
            {
                rassetInventory.runOperation();
            }
        }
        else
        {
            rassetInventory.clearOffsession();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>