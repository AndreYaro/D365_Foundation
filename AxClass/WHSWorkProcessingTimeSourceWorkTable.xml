<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkProcessingTimeSourceWorkTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is an implementation for <c>WHSWorkTable</c> work to support calculation of work processing times.
/// </summary>
[WHSWorkProcessingTimeSourceAttribute(tableStr(WHSWorkTable))]
internal class WHSWorkProcessingTimeSourceWorkTable extends WHSWorkProcessingTimeSource
{
    private WHSWorkTable workTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    internal void initFromBuffer(Common _source)
    {
        workTable = _source as WHSWorkTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workStatus</Name>
				<Source><![CDATA[
    public WHSWorkStatus workStatus()
    {
        return workTable.WorkStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workInProcessDateTime</Name>
				<Source><![CDATA[
    public utcdatetime workInProcessDateTime()
    {
        return workTable.WorkInProcessUTCDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workClosedDateTime</Name>
				<Source><![CDATA[
    public utcdatetime workClosedDateTime()
    {
        return workTable.WorkClosedUTCDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkDeferredPutProcessingTask</Name>
				<Source><![CDATA[
    public WHSWorkDeferredPutProcessingTask findWorkDeferredPutProcessingTask()
    {
        return this.findStartedWorkDeferredPutProcessingTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStartedWorkDeferredPutProcessingTask</Name>
				<Source><![CDATA[
    private WHSWorkDeferredPutProcessingTask findStartedWorkDeferredPutProcessingTask()
    {
        WHSWorkDeferredPutProcessingTask    workDeferredPutProcessingTask;
        WHSWorkLine                         workLine;

        //assumption is that there is only one started for a work but we cannot enforce this in the datamodel
        select firstonly workDeferredPutProcessingTask
            where workDeferredPutProcessingTask.WorkId      == workTable.WorkId
                && workDeferredPutProcessingTask.Status     == WHSWorkDeferredOperationStatus::Started;

        return workDeferredPutProcessingTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>