<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStatusBlockingQOBlockingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>InventStatusBlockingQOBlockingHelper</c> class handles inventory status blocking
///     synchronization for quality order blockings.
/// </summary>
class InventStatusBlockingQOBlockingHelper extends InventStatusBlockingHelper
{
    InventQualityOrderTable qualityOrder;
    InventBlocking          qualityOrderBlocking;
    InventQty               updateQty;
    PdsCWQty                updateCWQty;
    UnknownNoYes            needsStatusBlockingUpdate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromMovement</Name>
				<Source><![CDATA[
        protected void initFromMovement(InventMovement _movement)
    {
        super(_movement);

        Common buffer = _movement.buffer();
        if (buffer.TableId != tableNum(InventBlocking))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        InventBlocking inventBlocking = buffer;
        if (inventBlocking.BlockingType != InventBlockingType::QualityOrder)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        qualityOrderBlocking    = inventBlocking;
        qualityOrder            = InventBlockingQualityOrder::findQualityOrderByItemBlocking(
                                    qualityOrderBlocking.RecId);
        updateQty               = qualityOrderBlocking.RecId == 0   ?
                                    qualityOrderBlocking.Qty        :
                                    qualityOrderBlocking.Qty - qualityOrderBlocking.orig().Qty;
        updateCWQty             = qualityOrderBlocking.RecId == 0   ?
                                    qualityOrderBlocking.PdsCWQty   :
                                    qualityOrderBlocking.PdsCWQty - qualityOrderBlocking.orig().PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needsStatusBlockingUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if inventory status blocking is needed.
    /// </summary>
    /// <returns>
    ///     true if inventory status blocking is needed; otherwise, false.
    /// </returns>
    private boolean needsStatusBlockingUpdate()
    {
        if (needsStatusBlockingUpdate == UnknownNoYes::Unknown)
        {
            // Perform updates only for issue transactions
            boolean needsUpdate = movement.inventMovSubType() == InventMovSubType::None;

            if (needsUpdate)
            {
                InventDim inventDim = InventDim::find(qualityOrderBlocking.InventDimId);
                needsUpdate = WHSInventEnabled::exist(qualityOrderBlocking.ItemId)
                              && WHSInventStatus::isBlockingStatus(inventDim.InventStatusId);
            }

            needsStatusBlockingUpdate = needsUpdate ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return needsStatusBlockingUpdate == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDelete</Name>
				<Source><![CDATA[
        public void postDelete()
    {
        // Increase status blocking after deleting QO blocking
        if (this.needsStatusBlockingUpdate())
        {
            this.increaseInventoryStatusBlocking(qualityOrderBlocking.Qty, qualityOrderBlocking.PdsCWQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdate</Name>
				<Source><![CDATA[
        public void postUpdate()
    {
        // Restore status blocking qty if QO blocking qty is being reduced
        if (updateQty < 0
            && this.needsStatusBlockingUpdate())
        {
            this.increaseInventoryStatusBlocking(-updateQty, -updateCWQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdate</Name>
				<Source><![CDATA[
        public void preUpdate()
    {
        // Reduce status blocking prior to increasing QO blocking qty
        if (updateQty > 0
            && this.needsStatusBlockingUpdate())
        {
            this.reduceInventoryStatusBlocking(updateQty, updateCWQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventStatusBlockingQOBlockingHelper</c> class for the specified quality order inventory blocking movement.
    /// </summary>
    /// <param name="_movement">
    /// A quality order inventory blocking movement.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventStatusBlockingQOBlockingHelper</c> class.
    /// </returns>
    public static InventStatusBlockingQOBlockingHelper construct(
        InventMov_Blocking _movement)
    {
        InventStatusBlockingQOBlockingHelper ret = new InventStatusBlockingQOBlockingHelper();

        ret.initFromMovement(_movement);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>