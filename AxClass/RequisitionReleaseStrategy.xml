<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RequisitionReleaseStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The base class for releasing different types of the requisition lines.
/// </summary>
abstract class RequisitionReleaseStrategy extends RunBaseBatch
{
    boolean                         isRunningInAutoMode;
    container                       purchReqLineRecIdCon;
    RequisitionDocumentGeneration   requisitionDocumentGeneration;
    RequisitionPurpose              requisitionPurpose;
    RequisitionReleaseType          requisitionReleaseType;

    private PurchReqInstrumentationLogger instrumentationLogger;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        requisitionPurpose,
        requisitionReleaseType,
        isRunningInAutoMode,
        purchReqLineRecIdCon
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRequisitionLineToReleaseContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a requisition line to the container of the requisition line IDs that should be released.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The requisition line to be added.
    /// </param>
    public void addRequisitionLineToReleaseContainer(PurchReqLine _purchReqLine)
    {
        purchReqLineRecIdCon = conIns(purchReqLineRecIdCon, 1, _purchReqLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that the class can be executed in batch.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the container that identifies the purpose and type of the <c>RequisitionReleaseStrategy</c> object.
    /// </summary>
    /// <returns>
    /// The container that contains a requisition purpose and requisition release type.
    /// </returns>
    public container getKey()
    {
        return [requisitionPurpose, requisitionReleaseType];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRequisitionDocumentGenerationObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates an instance of <c>RequisitionDocumentGeneration</c> object based on requisition release type.
    /// </summary>
    /// <returns>
    /// An instance of <c>RequisitionDocumentGeneration</c> object
    /// </returns>
    protected abstract RequisitionDocumentGeneration initRequisitionDocumentGenerationObject()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRunningInAutoMode</Name>
				<Source><![CDATA[
    public boolean parmIsRunningInAutoMode(boolean _autoMode = isRunningInAutoMode)
    {
        isRunningInAutoMode = _autoMode;
        return isRunningInAutoMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqLineRecIdContainer</Name>
				<Source><![CDATA[
    public container parmPurchReqLineRecIdContainer(container _con = purchReqLineRecIdCon)
    {
        purchReqLineRecIdCon = _con;
        return purchReqLineRecIdCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the requisition lines.
    /// </summary>
    public void run()
    {
        if (requisitionDocumentGeneration)
        {
            using (var activityContext = this.instrumentationLogger().requisitionRelease().run())
            {
                if (this.parmIsRunningInAutoMode())
                {
                    PurchReqTable purchReqTable = this.purchReqTable();

                    if (purchReqTable.RecId
                        && purchReqTable.notPostedLineExists())
                    {
                        this.runRecordBudgetFundReservation(purchReqTable);
                    }
                    else
                    {
                        this.runRequisitionDocumentGeneration();
                    }
                }
                else
                {
                    this.runRequisitionDocumentGeneration();
                }
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRequisitionDocumentGeneration</Name>
				<Source><![CDATA[
    private void runRequisitionDocumentGeneration()
    {
        requisitionDocumentGeneration.parmPurchReqLineRecIdContainer(this.parmPurchReqLineRecIdContainer());
        requisitionDocumentGeneration.parmIsRunningInAutoMode(this.parmIsRunningInAutoMode());
        requisitionDocumentGeneration.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRecordBudgetFundReservation</Name>
				<Source><![CDATA[
    private void runRecordBudgetFundReservation(PurchReqTable _purchReqTable)
    {
        using (var activityContextBudget = this.instrumentationLogger().requisitionRelease().recordBudgetFundReservation(_purchReqTable))
        {
            _purchReqTable.recordBudgetFundReservation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqTable</Name>
				<Source><![CDATA[
    private PurchReqTable purchReqTable()
    {
        PurchReqTable purchReqTable;

        if (conLen(this.parmPurchReqLineRecIdContainer()) > 0)
        {
            PurchReqLine purchReqLine = PurchReqLine::find(conPeek(this.parmPurchReqLineRecIdContainer(), 1));

            purchReqTable = purchReqLine.purchReqTable();
        }

        return purchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequisitionPurpose</Name>
				<Source><![CDATA[
    private void setRequisitionPurpose(RequisitionPurpose _requisitionPurpose)
    {
        requisitionPurpose = _requisitionPurpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequisitionReleaseType</Name>
				<Source><![CDATA[
    private void setRequisitionReleaseType(RequisitionReleaseType _requisitionReleaseType)
    {
        requisitionReleaseType = _requisitionReleaseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version;

        version = conPeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                this.setRequisitionReleaseType(requisitionReleaseType);
                this.initRequisitionDocumentGenerationObject();
                requisitionDocumentGeneration.parmPurchReqLineRecIdContainer(this.parmPurchReqLineRecIdContainer());
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateReleaseStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an appropriate instance of <c>RequisitionReleaseStrategy</c> class in the map for a requisition line.
    /// </summary>
    /// <param name="_releaseStrategies">
    /// A map containing <c>RequisitionReleaseStrategy</c> objects.
    /// </param>
    /// <param name="_purchReqLine">
    /// A requisition line to find a <c>RequisitionReleaseStrategy</c> for.
    /// </param>
    /// <returns>
    /// An instance of <c>RequisitionReleaseStrategy</c> class.
    /// </returns>
    /// <remarks>
    /// A key for the map is a container that consists of requisition purpose and requisition release type.
    /// </remarks>
    public static RequisitionReleaseStrategy findOrCreateReleaseStrategy(Map _releaseStrategies, PurchReqLine _purchReqLine)
    {
        RequisitionReleaseStrategy requisitionReleaseStrategy;
        RequisitionReleaseType     requisitionReleaseType = RequisitionReleaseStrategy::getRequisitionReleaseType(_purchReqLine);

        if (_releaseStrategies.exists([_purchReqLine.RequisitionPurpose, requisitionReleaseType]))
        {
            requisitionReleaseStrategy = _releaseStrategies.lookup([_purchReqLine.RequisitionPurpose, requisitionReleaseType]);
        }
        else
        {
            requisitionReleaseStrategy = RequisitionReleaseStrategy::newRequisitionPurposeAndReleaseType(_purchReqLine.RequisitionPurpose, requisitionReleaseType);
            _releaseStrategies.insert([_purchReqLine.RequisitionPurpose, requisitionReleaseType], requisitionReleaseStrategy);
        }

        return requisitionReleaseStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequisitionReleaseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the release document type for the specified requisition line.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The requisition line to check.
    /// </param>
    /// <returns>
    /// <c>RequisitionReleaseType</c> for the specified requisition line.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Occurs for unsupported requisition purpose.
    /// </exception>
    public static RequisitionReleaseType getRequisitionReleaseType(PurchReqLine _purchReqLine)
    {
        switch (_purchReqLine.RequisitionPurpose)
        {
            case RequisitionPurpose::Consumption:
                return RequisitionConsumptionRelease::getRequisitionReleaseType(_purchReqLine);
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        Map                             releaseStrategies = new Map(Types::Container, Types::Class);
        FormDataSource                  fds = FormDataUtil::getFormDataSource(_args.record());

        if (!_args && !(_args.dataset() == tableNum(PurchReqLine) || _args.dataset() == tableNum(PurchReqConsolidation)))
        {   //Function %1 has been incorrectly called.
            throw error(strFmt("@SYS22828", funcName()));
        }

        boolean isConsolidation = _args.parm() == identifierStr('CalledFromHeader');

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            using (var activityContext = PurchReqInstrumentationLogger::createLogger(classStr(RequisitionReleaseStrategy)).requisitionRelease().main(isConsolidation))
            {
                if (isConsolidation)
                {
                    PurchReqConsolidation purchReqConsolidation = _args.record();
                    PurchReqConsolidationLine purchReqConsolidationLine;

                    while select * from purchReqConsolidationLine 
                        where purchReqConsolidationLine.PurchReqConsolidationId == purchReqConsolidation.RecId
                    {
                        RequisitionReleaseStrategy::pushRequisitionLineToReleaseStartegy(PurchReqLine::find(purchReqConsolidationLine.PurchReqLineID), releaseStrategies);
                    }
                }
                else
                {
                    for (PurchReqLine purchReqLine = fds.getFirst(true) ? fds.getFirst(true) : _args.record(); purchReqLine; purchReqLine = fds.getNext())
                    {
                        RequisitionReleaseStrategy::pushRequisitionLineToReleaseStartegy(purchReqLine, releaseStrategies);
                    }
                }

                try
                {
                    RequisitionReleaseStrategy::runReleaseStartegies(releaseStrategies, false);

                    if (_args.caller() && SysFormRun::hasMethod(_args.caller(), identifierStr('formUpdate')))
                    {
                        _args.caller().formUpdate();
                        _args.caller().refreshDatasource();
                    }
                }
                catch(Exception::Error)
                {
                    exceptionTextFallThrough();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRequisitionPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>RequisitionReleaseStrategy</c> subclass based on the requisition purpose.
    /// </summary>
    /// <param name="_requisitionPurpose">
    /// A requisition purpose.
    /// </param>
    /// <returns>
    /// An instance of <c>RequisitionReleaseStrategy</c> subclass.
    /// </returns>
    public static RequisitionReleaseStrategy newRequisitionPurpose(RequisitionPurpose _requisitionPurpose)
    {
        RequisitionReleaseStrategy requisitionReleaseStrategy;

        switch (_requisitionPurpose)
        {
            case RequisitionPurpose::Consumption:
                requisitionReleaseStrategy = RequisitionConsumptionRelease::construct();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        requisitionReleaseStrategy.setRequisitionPurpose(_requisitionPurpose);

        return requisitionReleaseStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRequisitionPurposeAndReleaseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>RequisitionReleaseStrategy</c> subclass based on the requisition purpose and release type.
    /// </summary>
    /// <param name="_requisitionPurpose">
    /// A requisition purpose.
    /// </param>
    /// <param name="_requisitionReleaseType">
    /// A requisition release type.
    /// </param>
    /// <returns>
    /// An instance of <c>RequisitionReleaseStrategy</c> subclass.
    /// </returns>
    public static RequisitionReleaseStrategy newRequisitionPurposeAndReleaseType(RequisitionPurpose     _requisitionPurpose,
                                                                                 RequisitionReleaseType _requisitionReleaseType)
    {
        RequisitionReleaseStrategy requisitionReleaseStrategy = RequisitionReleaseStrategy::newRequisitionPurpose(_requisitionPurpose);
        requisitionReleaseStrategy.setRequisitionReleaseType(_requisitionReleaseType);
        requisitionReleaseStrategy.initRequisitionDocumentGenerationObject();

        return requisitionReleaseStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pushRequisitionLineToReleaseStartegy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a requisition line to the appropriate release startegy object.
    /// </summary>
    /// <param name="_purchReqLine">
    /// A requisition line to add.
    /// </param>
    /// <param name="_releaseStrategies">
    /// A map of the existing release startegy objects.
    /// </param>
    /// <returns>
    /// An instance of <c>RequisitionReleaseStrategy</c> for specified requisition line.
    /// </returns>
    public static RequisitionReleaseStrategy pushRequisitionLineToReleaseStartegy(PurchReqLine _purchReqLine, Map _releaseStrategies)
    {
        using (var activityContext = PurchReqInstrumentationLogger::createLogger(classStr(RequisitionReleaseStrategy)).requisitionRelease().pushRequisitionLineToReleaseStartegy(_purchReqLine, _releaseStrategies))
        {
            RequisitionReleaseStrategy requisitionReleaseStrategy = RequisitionReleaseStrategy::findOrCreateReleaseStrategy(_releaseStrategies, _purchReqLine);
            requisitionReleaseStrategy.addRequisitionLineToReleaseContainer(_purchReqLine);

            return requisitionReleaseStrategy;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAutoPurchOrderGeneration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the requisition lines of specific requisition.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    /// The record ID of the <c>PurchReqTable</c> record.
    /// </param>
    public static void runAutoPurchOrderGeneration(RecId _purchReqTableRecId)
    {
        Map releaseStrategies = new Map(Types::Container, Types::Class);

        PurchReqInstrumentationLogger instrumentationLogger = PurchReqInstrumentationLogger::createLogger(classStr(RequisitionReleaseStrategy));

        using (var activityContext = instrumentationLogger.requisitionRelease().runAutoPurchOrderGeneration(_purchReqTableRecId))
        {
            Query query = RequisitionReleaseStrategy::buildAutoOrderGenerationPurchReqLineQuery(_purchReqTableRecId);
            QueryRun queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                PurchReqLine purchReqLine = queryRun.get(tableNum(PurchReqLine));
            
                PurchReqSourcingPolicyRule policyRule = PurchReqPurchaseOrderGenerationRule::purchReqSourcingPolicyRuleStatic(purchReqLine);

                using (var activityContextPolicyRule = instrumentationLogger.requisitionRelease().runAutoPurchOrderGenerationPolicyRule(purchReqLine, policyRule))
                {
                    if (!policyRule.IsBatchGenerationEnabled)
                    {
                        RequisitionReleaseStrategy::pushRequisitionLineToReleaseStartegy(purchReqLine, releaseStrategies);
                    }
                }
            }

            RequisitionReleaseStrategy::runReleaseStartegies(releaseStrategies, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAutoOrderGenerationPurchReqLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for requisition lines of specific requisition.
    /// </summary>
    /// <returns>The query.</returns>
    protected static Query buildAutoOrderGenerationPurchReqLineQuery(RecId _purchReqTableRecId)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(PurchReqLine));
        qbds.addRange(fieldNum(PurchReqLine, PurchReqTable)).value(queryValue(_purchReqTableRecId));
        qbds.addRange(fieldNum(PurchReqLine, PurchLineCreated)).value(queryValue(NoYes::No));
        qbds.addRange(fieldNum(PurchReqLine, RequisitionStatus)).value(queryValue(PurchReqRequisitionStatus::Approved));
        qbds.addRange(fieldNum(PurchReqLine, IsPurchaseOrderGenerationManual)).value(queryValue(NoYes::No));
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReleaseStartegies</Name>
				<Source><![CDATA[
    private static void runReleaseStartegies(Map _releaseStrategies, boolean _runInAutomode)
    {
        PurchReqInstrumentationLogger instrumentationLogger = PurchReqInstrumentationLogger::createLogger(classStr(RequisitionReleaseStrategy));

        using (var activityContext = instrumentationLogger.requisitionRelease().runReleaseStartegies(_releaseStrategies, _runInAutomode))
        {
            MapEnumerator enumerator = _releaseStrategies.getEnumerator();
            while (enumerator.moveNext())
            {
                RequisitionReleaseStrategy requisitionReleaseStrategy = enumerator.currentValue();

                int recordCount = conLen(requisitionReleaseStrategy.parmPurchReqLineRecIdContainer());

                instrumentationLogger.logInformation(strFmt('Type: %1 - Purpose: %2 - RecordCount: %3', requisitionReleaseStrategy.requisitionReleaseType, requisitionReleaseStrategy.requisitionPurpose, recordCount));

                if (recordCount > 0)
                {
                    requisitionReleaseStrategy.parmIsRunningInAutoMode(_runInAutomode);
                    requisitionReleaseStrategy.runOperation();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateManaulDocumentGeneration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates 'isPurchaseOrderGeneration' flag for all <c>PurchReqLine</c> records in a requisition.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    ///    The record ID of the <c>PurchReqTable</c> record.
    /// </param>
    public static void updateManaulDocumentGeneration(RecId _purchReqTableRecId)
    {
        PurchReqInstrumentationLogger instrumentationLogger = PurchReqInstrumentationLogger::createLogger(classStr(RequisitionReleaseStrategy));

        using (var activityContext = instrumentationLogger.requisitionRelease().updateManaulDocumentGeneration(_purchReqTableRecId))
        {
            PurchReqLine                    purchReqLine;

            while select forupdate purchReqLine where
                purchReqLine.PurchReqTable                   == _purchReqTableRecId                 &&
                purchReqLine.PurchLineCreated                == false                               &&
                purchReqLine.RequisitionStatus               == PurchReqRequisitionStatus::Approved &&
                //we need the below predicate since if a PO line is cancelled then the purchase order generation is forced to be manual.
                purchReqLine.IsPurchaseOrderGenerationManual == false
            {
                if (!purchReqLine.VendAccount || PurchReqPurchaseOrderGenerationRule::isManualCreatePurchaseOrderStatic(purchReqLine))
                {
                    using (var activityContextLine = instrumentationLogger.requisitionRelease().updateManaulDocumentGenerationLine(purchReqLine))
                    {
                        purchReqLine.IsPurchaseOrderGenerationManual = true;
                        purchReqLine.update(false);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validate all lines in a single purchReqTable table record
    /// </summary>
    /// <param name="_purchReqTable">
    ///    The PurchReqTable table object from the <c>PurchReqTable</c> table to retrieve.
    /// </param>
    /// <returns>
    ///    true if passes all validation; Otherwise, false.
    /// </returns>
    public static boolean validateAllLines(PurchReqTable _purchReqTable)
    {
        switch (_purchReqTable.RequisitionPurpose)
        {
            case RequisitionPurpose::Consumption:
                return RequisitionConsumptionRelease::validateAllLines(_purchReqTable);

            case RequisitionPurpose::Replenishment:
                // Replenishment requisitions are released from master planning
                return true;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal PurchReqInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchReqInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>