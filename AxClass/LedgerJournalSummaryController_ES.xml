<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalSummaryController_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalSummaryController_ES</c> class is a controller class for the <c>LedgerJournalSummary_ES</c> report.
/// </summary>
class LedgerJournalSummaryController_ES extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before running the report.
    /// </summary>
    Protected void preRunModifyContract()
    {
        this.setJournalizeNum(this.parmReportContract().parmRdpContract());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    protected container preRunValidate()
    {
        if (DimensionFocusBalanceUpdateByLedgerFlight::instance().isEnabled())
        {
            MainAccountEventArgs mainAccountArgs = MainAccountEventArgs::construct();
            mainAccountArgs.parmBalanceLedgerRecId(Ledger::current());

            MainAccount::updateBalancesWithArgs(mainAccountArgs);
        }
        else
        {
            MainAccount::updateBalances();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalizeNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Method sets the value for the <c>JournalizeNum</c> value.
    /// </summary>
    /// <param name="_ledgerJournalSummaryContract_ES">
    ///    A <c>LedgerJournalSummaryContract_ES</c> object.
    /// </param>
    public void setJournalizeNum(LedgerJournalSummaryContract_ES _ledgerJournalSummaryContract_ES)
    {
        LedgerJournalizeReport ledgerJournalizeReport;

        if (this.parmArgs() && this.parmArgs().record() && this.parmArgs().dataset()
             == tablenum(LedgerJournalizeReport))
        {
            ledgerJournalizeReport = this.parmArgs().record();
            _ledgerJournalSummaryContract_ES.parmJournalizeNum(ledgerJournalizeReport.JournalizeNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoES, GlobalizationConstants::FeatureReferenceES00022] ],
            funcName()
        );

        LedgerJournalSummaryController_ES ledgerJournalSummaryController_ES = new LedgerJournalSummaryController_ES();
        ledgerJournalSummaryController_ES.parmReportName(ssrsReportStr(LedgerJournalSummary_ES, Report));
        ledgerJournalSummaryController_ES.parmArgs(_args);
        ledgerJournalSummaryController_ES.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>