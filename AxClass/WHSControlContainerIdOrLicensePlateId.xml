<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSControlContainerIdOrLicensePlateId</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSControlContainerIdOrLicensePlateId</c> class is responsible for handling the container or license plate ID controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#SortConOrLP)]
public class WHSControlContainerIdOrLicensePlateId extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        WHSContainerTable containerTable = WHSContainerTable::findByContainerId(this.parmData()); 
       
        if (containerTable
            && WHSCloseContainerProfile::find(containerTable.CloseContainerProfileId).ContainerClosingWorkCreationProcess == WHSWarehouseContainerClosingWorkCreationProcess::AssignContainerToSortPosition)
        {
            if (!this.validateInventLocation(InventDim::find(containerTable.InventDimId).InventLocationId))
            {
                return false;
            }

            if (containerTable.ContainerStatus == WHSContainerStatus::Open)
            {                     
                return this.fail(strFmt("@WAX:WHSPreventOutboundSortingForOpenContainers", containerTable.ContainerId));
            }         
  
            if (pass && !pass.exists(#CloseSortPosition))
            {
                WHSOutboundSortPosition::validateContainerNotAssignedToClosedSortPosition(containerTable.ContainerId);
            }

            fieldValues.insert(#SortConOrLP, this.parmData());

            return true;
        }

        WHSOutboundSortPosition outboundSortPosition = WHSOutboundSortPosition::findForAssignedLicensePlateId(this.parmData());

        if (outboundSortPosition)
        {
            if (!this.validateInventLocation(outboundSortPosition.InventLocationId))
            {
                return false;
            }

            fieldValues.insert(#SortConOrLP, this.parmData());
            fieldValues.insert(#SortLicensePlateId, this.parmData());
            fieldValues.insert(#LicensePlateId, this.parmData());
            
            return true;
        }

        WHSOutboundSortTemplate outboundSortTemplate = WHSOutboundSortTemplate::find(WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).SortTemplateId);
       
        if (outboundSortTemplate.SortTemplateType == WHSOutboundSortTemplateType::WaveDemand
            && WHSLicensePlate::exist(this.parmData()))
        {
            if (!this.validateOutboundSortTemplateWarehouseMatchesCurrentOrGroup(outboundSortTemplate))
            {
                return false;
            }
            else if (!this.existClosedWorkByLicensePlate(this.parmData()))
            {
                return this.fail(strFmt("@WAX:WHSOutboundSortMissingRelatedClosedWorkOnLPError", this.parmData()));
            }

            fieldValues.insert(#SortConOrLP, this.parmData());
            fieldValues.insert(#LicensePlateId, this.parmData());

            return true;
        }

        return this.fail(strFmt("@WAX:WHSContainerOrLPNotValidError"));
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>existClosedWorkByLicensePlate</Name>
				<Source><![CDATA[
    private boolean existClosedWorkByLicensePlate(WHSLicensePlateId _licensePlateId)
    {
        WHSWorkTable workTable;
        
        select firstonly RecId from workTable
            where workTable.TargetLicensePlateId == _licensePlateId
            && workTable.WorkStatus == WHSWorkStatus::Closed;

        return workTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventLocation</Name>
				<Source><![CDATA[
    private boolean validateInventLocation(InventLocationId _inventLocationId)
    {    
        WHSRFMenuItemTable  menuItemTable                   = WHSRFMenuItemTable::find(pass.lookup(#MenuItem));
        WHSOutboundSortTemplate sortTemplate                =  WHSOutboundSortTemplate::find(menuItemTable.SortTemplateId);
        InventLocationId    sortTemplateInventLocationId    = sortTemplate.InventLocationId;                                                                                                                                    

        switch (sortTemplate.WarehouseGroupAll)
        {
            case WhsWarehouseGroupAll::Warehouse:
                if (sortTemplateInventLocationId
                    && sortTemplateInventLocationId != _inventLocationId)
                {
                    return this.fail(strFmt("@WAX:WHSNotSignedInAtCorrectMenuItemWarehouse",
                                            menuItemTable.MenuItemName,
                                            sortTemplateInventLocationId,
                                            _inventLocationId));
                }
                break;
            case WhsWarehouseGroupAll::Group:
                if (!WhsWarehouseGroup::containsWarehouse(sortTemplate.WarehouseGroupId, _inventLocationId))
                {
                    return this.fail(strFmt("@WAX:WHSNotSignedInAtCorrectMenuItemWarehouseGroup",
                                            menuItemTable.MenuItemName,
                                            sortTemplate.WarehouseGroupId,
                                            _inventLocationId));
                }
                break;
        }
              
        if (pass.lookupStr(#InventLocationId) != _inventLocationId)         
        {
            return this.fail("@WAX1239");
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOutboundSortTemplateWarehouseMatchesCurrentOrGroup</Name>
				<Source><![CDATA[
    private boolean validateOutboundSortTemplateWarehouseMatchesCurrentOrGroup(WHSOutboundSortTemplate _sortTemplate)
    {
        switch (_sortTemplate.WarehouseGroupAll)
        {
            case WhsWarehouseGroupAll::Warehouse:
                if (pass.lookupStr(#InventLocationId) != _sortTemplate.InventLocationId)
                {
                    return this.fail("@WAX1239");
                }
                break;
            case WhsWarehouseGroupAll::Group:
                if (!WhsWarehouseGroup::containsWarehouse(_sortTemplate.WarehouseGroupId, pass.lookupStr(#InventLocationId)))
                {
                    return this.fail(strFmt("@WAX:WHSNotSignedInAtCorrectWarehouseGroup",
                                            _sortTemplate.WarehouseGroupId));
                }
                break;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>