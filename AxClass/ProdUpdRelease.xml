<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdUpdRelease</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdUpdRelease</c> class is used for releasing the production order.
/// </summary>
/// <remarks>
///    You can release a production order by using this class. You can choose whether you want to print
///    job card, route job or route card.
/// </remarks>
public class ProdUpdRelease extends ProdUpd
{
    ProdParmRelease prodParmRelease;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>endUpdateProduction</Name>
				<Source><![CDATA[
    void endUpdateProduction()
    {
        prodTable.reread();

        prodTable.ProdStatus = prodTable.status().isBefore(ProdStatus::Released) ? ProdStatus::Released : prodTable.ProdStatus;

        if (prodTable.ReleasedDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            prodTable.ReleasedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        prodTable.update();

        this.addUpdateRec(prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmBuffer</Name>
				<Source><![CDATA[
    public ParmBuffer parmParmBuffer(ParmBuffer _prodParmRelease = prodParmRelease)
    {
        if (!_prodParmRelease.RecId)
        {
            throw error("@SYS25332");
        }

        prodParmRelease = _prodParmRelease;

        return prodParmRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    [Wrappable(true), Replaceable(true)]
    void printout()
    {
        ProdRoute       prodRoute;

        if (prodParmRelease.PrintJob == NoYes::Yes)
        {
            if (prodTable.RouteJobs == NoYes::Yes)
            {
                ProdUpd::printoutReportFromMenuItem(menuitemOutputStr(ProdJobCard), this, this.parmParmBuffer());
            }
            else
            {
                info(strFmt("@SYS26351",prodParmRelease.ProdId));
            }
        }

        if (prodParmRelease.PrintRouteJob == NoYes::Yes)
        {
            if (prodTable.RouteJobs == NoYes::Yes)
            {
                ProdUpd::printoutReportFromMenuItem(menuitemOutputStr(ProdRouteJob), this, this.parmParmBuffer());
            }
            else
            {
                info(strFmt("@SYS26352",prodParmRelease.ProdId));
            }
        }

        if (prodParmRelease.PrintRouteCard == NoYes::Yes)
        {
            select firstonly RecId from prodRoute
                where prodRoute.ProdId == prodTable.ProdId;

            if (prodRoute.RecId)
            {
                ProdUpd::printoutReportFromMenuItem(menuitemOutputStr(ProdRouteCard), this, this.parmParmBuffer());
            }
            else
            {
                info(strFmt("@SYS28728",prodParmRelease.ProdId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRelease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a production order can be released.
    /// </summary>
    /// <param name = "_prodTableRef">The production order reference</param>
    /// <param name = "_prodParmRelease">The production order release parameters reference</param>
    /// <returns>true, if a production order can be released; otherwise, false.</returns>
    protected boolean canRelease(ProdTable _prodTableRef, ProdParmRelease _prodParmRelease)
    {
        return (_prodTableRef.InventRefType  == InventRefType::ProdLine &&
                _prodTableRef.InventRefId    == prodTable.ProdId        &&
                _prodTableRef.status().runRelease(_prodParmRelease,true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseReferences</Name>
				<Source><![CDATA[
    void releaseReferences()
    {
        ProdParmRelease           prodParmReleaseLocal;

        setPrefix("@SYS28547");

        if (prodParmRelease.References == NoYes::Yes)
        {
            ProdTable prodTableRef = prodTable.referenceProdSearch(prodTable.CollectRefLevel+1,true);

            while (prodTableRef)
            {
                setPrefix(#PreFixField(ProdTableRef,ProdId));

                if (this.canRelease(prodTableRef, prodParmReleaseLocal))
                {
                    prodParmReleaseLocal            = prodParmRelease.data();
                    prodParmReleaseLocal.AutoUpdate = NoYes::Yes;
                    prodParmReleaseLocal.ProdId     = prodTableRef.ProdId;
                    prodParmReleaseLocal.ParmId     = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
                    prodParmReleaseLocal.LineNum    = 1;
                    prodParmReleaseLocal.insert();

                    prodTableRef.status().runRelease(prodParmReleaseLocal,false,null,this);
                }
                next prodTableRef;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendBusinessEvent</Name>
				<Source><![CDATA[
    protected internal void sendBusinessEvent()
    {
        if (BusinessEventsConfigurationReader::isBusinessEventEnabled(classStr(ProductionOrderReleasedBusinessEvent)))
        {
            ProductionOrderReleasedBusinessEvent::newFromProductionOrder(ProdTable::find(prodParmRelease.ProdId), prodParmRelease).send();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        #OCCRetryCount

        setPrefix(ProdMultiRelease::description());
        setPrefix(#PreFixField(ProdParmRelease,ProdId));

        try
        {
            using (var m = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::UpdateReleaseRun, prodParmRelease.RecId))
            {
                ttsbegin;

                if (! this.validate())
                {
                    throw error("@SYS18447");
                }

                this.setParameters();

                if (isProdUpdProductionTypeTelemetryFlightEnabled)
                {
                    this.addInstrumentationAdditionalParametersToStopEvent(m);
                }

                this.updateProdBOM();

                this.releaseReferences();

                this.endUpdateProduction();

                this.updateJobJournal(ParmJobStatus::Executed);

                // Shop Floor Control begin
                if (this.mustSynchronizeProdTable())
                {
                    JmgJobTable::synchronizeProdTable(prodTable);
                }
                // Shop Floor Control end

                if (WHSReleaseOnlyWhenFullReservationFeature::instance().isFeatureAndConfigurationkeyEnabled())
                {
                    this.releaseToWarehouse();
                }

                this.sendBusinessEvent();

                ttscommit;

                this.printout();
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            this.updateJobJournal(ParmJobStatus::ContainErrors);
            throw (Exception::Error);
        }

        if (!WHSReleaseOnlyWhenFullReservationFeature::instance().isFeatureAndConfigurationkeyEnabled())
        {
            this.releaseToWarehouse();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    void setParameters()
    {
        this.initProdTable(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProdBOM</Name>
				<Source><![CDATA[
    void updateProdBOM()
    {
        ProdBOM  prodBOM;

        while select forupdate prodBOM
            where prodBOM.ProdId == prodParmRelease.ProdId
        {
            if (prodBOM.Reservation == ProdReservation::Release)
            {
                InventMovement::construct(prodBOM).updateReservation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdUpdRelease construct()
    {
        ProdUpdRelease prodUpdRelease = new ProdUpdRelease();

        return prodUpdRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBufferFromStartUp</Name>
				<Source><![CDATA[
    static ProdParmRelease initParmBufferFromStartUp(ProdParmStartUp prodParmStartUp)
    {
        ProdParmRelease   prodParmRelease;

        prodParmRelease.ParmBuffer::initParmId();
        prodParmRelease.initParmDefault();
        prodParmRelease.ProdId          = prodParmStartUp.ProdId;
        prodParmRelease.AutoUpdate      = NoYes::Yes;

        if (prodParmStartUp.References)
        {
            prodParmRelease.References = NoYes::Yes;
        }
        else
        {
            prodParmRelease.References = NoYes::No;
        }

        return prodParmRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    public static ProdUpdRelease newParmBuffer(ProdParmRelease _prodParmRelease)
    {
        if (!_prodParmRelease.ParmId)
        {
            _prodParmRelease.skipTTSCheck(true);
            _prodParmRelease.ParmBuffer::initParmId();
            _prodParmRelease.write();
        }

        ProdUpdRelease prodUpdRelease = ProdUpdRelease::construct();
        prodUpdRelease.parmParmBuffer(_prodParmRelease);

        return prodUpdRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdId</Name>
				<Source><![CDATA[
    public static ProdUpdRelease newProdId(
        ProdId  _prodId,
        NoYes   _references         = NoYes::Yes,
        NoYes   _printJob           = NoYes::No,
        NoYes   _printRouteJob      = NoYes::No,
        NoYes   _printRouteCard     = NoYes::No
        )
    {
        ProdParmRelease     prodParmRelease;

        if (!ProdTable::find(_prodId))
        {
            throw error(strFmt("@SYS12725",_prodId));
        }

        prodParmRelease.ParmBuffer::initParmId();
        prodParmRelease.initParmDefault();
        prodParmRelease.ProdId         = _prodId;
        prodParmRelease.References      = _references;
        prodParmRelease.PrintJob        = _printJob;
        prodParmRelease.PrintRouteJob   = _printRouteJob;
        prodParmRelease.PrintRouteCard  = _printRouteCard;
        prodParmRelease.insert();

        ProdUpdRelease prodUpdRelease = ProdUpdRelease::construct();
        prodUpdRelease.parmParmBuffer(prodParmRelease);

        return prodUpdRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSynchronizeProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if <c>ProdTable</c> should be synchronized
    /// </summary>
    /// <returns>
    ///    true if <c>ProdTable</c> should be synchronized; otherwise, false.
    /// </returns>
    protected boolean mustSynchronizeProdTable()
    {
        return Global::isConfigurationkeyEnabled(configurationkeynum(Jmgjob));
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseToWarehouse</Name>
				<Source><![CDATA[
    private void releaseToWarehouse()
    {
        prodTable.reread();

        if (ProdParametersDim::find(prodTable.InventDimId).ProductionLineRelease == WHSProductionLineRelease::OnProdOrderRelease)
        {
            ProdWHSRelease::newFromProdParmRelease(prodParmRelease).whsReleaseSingleOrder(prodTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPreviousJob</Name>
				<Source><![CDATA[
    static void runPreviousJob(
        ProdParmRelease     prodParmRelease,
        ProdPurch           _prodPurch  = null,
        RunbaseRecsMapable  _multi      = null
        )
    {
        using (var m = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::UpdateReleaseRunPreviousJobs, prodParmRelease.RecId))
        {
            ProdParmScheduling  prodParmScheduling;
            ProdTable           prodTable = prodParmRelease.prodTable();

            ProdSchedMethod schedMethod = prodTable.prodParametersDim().SchedMethod;
            ProdMultiScheduling prodMultiScheduling = ProdMultiScheduling::construct(schedMethod);

            container packedValue = ProdUpdRelease::getDefaultSchedulingParametersLastValue(prodMultiScheduling);

            if (packedValue != conNull())
            {
                prodMultiScheduling.unpack(packedValue);
                ProdParmScheduling standardProdParmScheduling = prodMultiScheduling.parmStandardParm();
                standardProdParmScheduling.SchedMethod = schedMethod;
                prodParmScheduling = ProdUpdScheduling::initParmBufferFromRelease(prodParmRelease, standardProdParmScheduling);
            }
            else
            {
                prodParmScheduling = ProdUpdScheduling::initParmBufferFromRelease(prodParmRelease);
            }

            prodParmScheduling.insert();

            if (schedMethod == ProdSchedMethod::OperationScheduling)
            {
                prodTable.status().runOperationScheduling(prodParmScheduling,false,_prodPurch,_multi,null,true);
            }
            else
            {
                prodTable.status().runJobScheduling(prodParmScheduling,false,_prodPurch,_multi,null,true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultSchedulingParametersLastValue</Name>
				<Source><![CDATA[
    private static container getDefaultSchedulingParametersLastValue(ProdMultiScheduling _prodMultiScheduling)
    {
        container packedValue = xSysLastValue::getValue(_prodMultiScheduling.lastValueDataAreaId(),
                                                        _prodMultiScheduling.lastValueUserId(),
                                                        _prodMultiScheduling.lastValueType(),
                                                        _prodMultiScheduling.lastValueElementName(),
                                                        _prodMultiScheduling.lastValueDesignName());

        if (packedValue == conNull())
        {
            packedValue = xSysLastValue::getValue(_prodMultiScheduling.lastValueDataAreaId(),
                                                    '',
                                                    _prodMultiScheduling.lastValueType(),
                                                    _prodMultiScheduling.lastValueElementName(),
                                                    _prodMultiScheduling.lastValueDesignName());

        }

        return packedValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>