<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConfirm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsShipConfirm</c> class is used for shipment confirmation.
/// </summary>
public class WhsShipConfirm
{
    private boolean performIsSendASNEnabledForLoadCheck = true;

    boolean     skipLoadTender;
    boolean     skipActualShipDate;
    boolean     createMasterBOL;
    container   loadsWithInvoicedOrders;
    Map         loadsShippedDates;
    
    private WHSInstrumentationLogger instrumentationLogger;
    private const str PrintBillOfLadingZipFileName = 'PrintBillOfLadingFileCollection';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canShipTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if posting a transfer shipment should be enabled for a load.
    /// </summary>
    /// <param name = "_loadTable">
    /// Load we want to post a transfer shipment.
    /// </param>
    /// <returns>
    /// true if post transfer shipment should be enabled; otherwise, false
    /// </returns>
    public static boolean canShipTransferOrder(WHSLoadTable _loadTable)
    {
        WHSLoadLine loadLine;

        if (_loadTable.LoadStatus			== WHSLoadStatus::Shipped
            && _loadTable.LoadingStrategy	== WHSLoadingStrategy::FullLoadShippingOnly)
        {
            InventTransferTable transfer;

            select firstonly RecId from loadLine
                where loadLine.LoadId          == _loadTable.LoadId
                &&    loadLine.InventTransType == InventTransType::TransferOrderShip
                exists join transfer
                    where transfer.TransferId      == loadLine.OrderNum
                    &&    transfer.TransferStatus  == InventTransferStatus::Created;
        }

        return loadLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateAndSendASN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates and sends ASN for a load.
    /// </summary>
    /// <param name="_loadId">
    /// Load for which we want to generate and send ASN.
    /// </param>
    private void generateAndSendASN(WHSLoadId _loadId)
    {
        WHSShipmentTable    shipmentTable;
        WHSLoadLine         loadLine;

        ttsbegin;

        while select ShipmentId, AccountNum from shipmentTable
            where shipmentTable.LoadId == _loadId
            exists join loadLine
                where shipmentTable.ShipmentId == loadLine.ShipmentId
        {
            if (WHSCustTable::find(shipmentTable.AccountNum).GenerateASN)
            {
                this.WHSShipmentASNCreator().generateASN(shipmentTable.ShipmentId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createASNItems</Name>
				<Source><![CDATA[
    [SysObsolete('Please use WHSShipmentASNCreator class instead', false, 31\03\2018)]
    public container createASNItems(WHSLicensePlateId _licensePlateId, WHSWorkLine _workLine, WHSModule _whsModule)
    {
        return this.WHSShipmentASNCreator().generateASNItems(_licensePlateId, _workLine, _whsModule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTransferShip</Name>
				<Source><![CDATA[
    [SysObsolete('The WHSShipConfirmationAction class must be used instead', false, 31\03\2018)]
    public void runTransferShip(
        WHSLoadId          _loadId,
        TMSApptUTCDateTime _shipDateConfirmed,
        boolean            _overrideSplitTrans = false)
    {
        WHSShipConfirmationAction::newFromBuffer(WHSLoadTable::find(_loadId)).runTransferShip(_shipDateConfirmed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSShipmentASNCreator</Name>
				<Source><![CDATA[
    private WHSShipmentASNCreator WHSShipmentASNCreator()
    {
        return WHSShipmentASNCreator::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    private IdentifierName name()
    {
        return classStr(WHSShipConfirm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipActualShipDate</Name>
				<Source><![CDATA[
    public boolean parmSkipActualShipDate(boolean _skipActualShipDate = skipActualShipDate)
    {
        if (_skipActualShipDate)
        {
            skipActualShipDate = _skipActualShipDate;
        }

        return skipActualShipDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadsShippedDates</Name>
				<Source><![CDATA[
    public Map parmLoadsShippedDates(Map _loadsShippedDates = loadsShippedDates)
    {
        loadsShippedDates = _loadsShippedDates;
        return loadsShippedDates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractDatesForLoads</Name>
				<Source><![CDATA[
    private Map extractDatesForLoads(container _loads)
    {
        Map resultingMap = new Map(Types::String, Types::UtcDateTime);

        for (int i = 1; i <= conLen(_loads); i++)
        {
            WHSLoadId loadId = conPeek(_loads, i);
            if (!loadsShippedDates.exists(loadId))
            {
                throw Error(strFmt("@WAX:Error_ShipmentDateIsRequiredForLoad", loadId));
            }

            resultingMap.insert(loadId, loadsShippedDates.lookup(loadId));
        }

        return resultingMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipLoadTender</Name>
				<Source><![CDATA[
    public boolean parmSkipLoadTender(boolean _skipLoadTender = skipLoadTender)
    {
        if (_skipLoadTender)
        {
            skipLoadTender = _skipLoadTender;
        }

        return skipLoadTender;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPerformIsSendASNEnabledForLoadCheck</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmPerformIsSendASNEnabledForLoadCheck(boolean _performIsSendASNEnabledForLoadCheck = performIsSendASNEnabledForLoadCheck)
    {
        performIsSendASNEnabledForLoadCheck = _performIsSendASNEnabledForLoadCheck;

        return performIsSendASNEnabledForLoadCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts packing slip for a load.
    /// </summary>
    /// <param name="_loadId">
    /// Load for which we want to post packing slip
    /// </param>
    public void postPackingSlip(WHSLoadId _loadId)
    {
        WHSLoadTable loadTable = WHSLoadTable::find(_loadId);
        WHSLoadTable multiLoadTable;

        if (!this.isPackingSlipEnabledForLoad(loadTable))
        {
            warning(strFmt("@WAX5703", _loadId));
            return;
        }

        if (TMSRoute::find(loadTable.RouteCode).numOfLoads() > 1)
        {
            while select multiLoadTable
                where multiLoadTable.RouteCode == loadTable.RouteCode
            {
                if (!WHSShipConfirm::isPackingSlipEnabledForBuffer(multiLoadTable))
                {
                    warning(strFmt("@WAX5704", loadTable.RouteCode, multiLoadTable.LoadId));
                    return;
                }
            }

            while select multiLoadTable
                where multiLoadTable.RouteCode == loadTable.RouteCode
            {
                this.runPackingSlip(multiLoadTable.LoadId);
            }
        }
        else
        {
            this.runPackingSlip(_loadId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowDialogToOverrideShipConfirmDate</Name>
				<Source><![CDATA[
    private static boolean mustShowDialogToOverrideShipConfirmDate()
    {
        return ((!WhsShipConfirmPreventDialogInTTSFlight::instance().isEnabled() || (appl.ttsLevel() == 0 && hasGUI()))
            && TMSParameters::find().OverrideShipConfirmDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTransferShip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post transfer orders for a load.
    /// </summary>
    /// <param name = "_loadId">
    /// The load Id.
    /// </param>
    public static void postTransferShip(WHSLoadId _loadId)
    {
        utcdatetime shipDateTime;

        if (WhsShipConfirm::mustShowDialogToOverrideShipConfirmDate())
        {
            Dialog      dialog = new Dialog("@TRX661");
            DialogField dlgField = dialog.addFieldValue(extendedTypeStr(WHSShipConfirmUTCDateTime), utcDateTimeNull(), "@TRX1572");

            dialog.run();

            if (dialog.closedOk())
            {
                shipDateTime = DateTimeUtil::removeTimeZoneOffset(dlgField.value(), DateTimeUtil::getUserPreferredTimeZone());
            }
            else
            {
                warning(strFmt("@WAX:LoadProcessCancel", _loadId));
            }
        }
        else
        {
            shipDateTime = DateTimeUtil::getSystemDateTime();
        }

        if (shipDateTime)
        {
            WhsShipConfirmationAction shipConfirmationAction = WhsShipConfirmationAction::newFromBuffer(WHSLoadTable::find(_loadId));
            shipConfirmationAction.runTransferShip(shipDateTime, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBOLForLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints Bill of lading for a load
    /// </summary>
    /// <param name="_loadId">
    /// Load for which we want to print Bill of lading
    /// </param>
    public void printBOLForLoad(WHSLoadId _loadId)
    {
        WHSLoadTable loadTable = WHSLoadTable::find(_loadId);
        WHSLoadTable multiLoadTable;

        if (!WHSShipConfirm::isBOLEnabledForLoad(loadTable))
        {
            warning(strFmt("@WAX1967", loadTable.LoadId, loadTable.LoadStatus));
            return;
        }

        if (TMSRoute::find(loadTable.RouteCode).numOfLoads() > 1)
        {
            while select multiLoadTable
                where multiLoadTable.RouteCode == loadTable.RouteCode
            {
                if (WHSShipConfirm::isBOLEnabledForLoad(multiLoadTable))
                {
                    this.runBOLForLoad(multiLoadTable.LoadId);
                }
                else
                {
                    warning(strFmt("@WAX1967", multiLoadTable.LoadId, multiLoadTable.LoadStatus));
                }
            }
        }
        else
        {
            this.runBOLForLoad(_loadId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBOLForShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints Bill of lading for a shipment
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment for which we want to print Bill of lading
    /// </param>
    public void printBOLForShipment(WHSShipmentId _shipmentId)
    {
        if (!WHSShipConfirm::isBOLEnabledForShipment(WHSShipmentTable::find(_shipmentId)))
        {
            warning(strFmt("@WAX1966", _shipmentId, WHSShipmentTable::find(_shipmentId).ShipmentStatus));
        }
        else
        {
            this.runBOLForShipment(_shipmentId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvTransferParmTableFiscalInfo_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the Brazilian fiscal information and shipment parm record in the database so that the fiscal document post engine
    /// can retrieve the values.
    /// </summary>
    /// <param name="_inventTransferParmTableRecId">
    /// RecId of the <c>InventTransferParmTable</c> record that should be linked with the <c>InventTransferParmTableFiscalInfo_BR</c>
    /// that will be inserted into the database.
    /// </param>
    /// <param name="_loadId">
    /// The load ID that contains the information which will be used to initialize the <c>InventTransferParmTableFiscalInfo_BR</c>.
    /// </param>
    /// <param name="_transferOrderId">
    /// The transfer order ID that contains the information which will be used to initialize the <c>InventTransferParmTableFiscalInfo_BR</c>.
    /// </param>
    public void insertInvTransferParmTableFiscalInfo_BR(
        RefRecId    _inventTransferParmTableRecId,
        WHSLoadId   _loadId,
        WHSOrderNum _transferOrderId)
    {
        InventTransferParmTableFiscalInfo_BR::insertFromLoad(_loadId, _transferOrderId, _inventTransferParmTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveLoads</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates a map with all loads that have to be ship confirmed at the same time and that can be actually ship confirmed.
    /// </summary>
    /// <param name="_loadTable">
    ///     The <c>WHSLoadTable</c> record of the load which user asked to ship confirm.
    /// </param>
    /// <returns>
    ///     A container with the loads that have to be ship confirmed.
    /// </returns>
    /// <remarks>
    ///     If load belongs to a route then we want to ship confirm all the loads on the route together.
    ///     If load doesn't belong to a route then we ship confirm only the load that user asked us to ship confirm.
    ///     If at least one of the loads doesn't match ship confirm criteria then we don't ship confirm loads at all.
    /// </remarks>
    public container retrieveLoads(WHSLoadTable _loadTable)
    {
        TMSRouteSegmentLoad	segmentLoad;
        container			loads;

        if (_loadTable.RouteCode)
        {
            while select Id from segmentLoad
                group by Id
                where segmentLoad.RouteCode == _loadTable.RouteCode
            {
                WHSShipConfirmationAction shipConfirmationAction = WHSShipConfirmationAction::newFromBuffer(WHSLoadTable::find(segmentLoad.Id));

                shipConfirmationAction.parmSkipLoadTender(skipLoadTender);

                if (!shipConfirmationAction.canShipConfirm())
                {
                    loads = conNull();
                    break;
                }

                loads += segmentLoad.Id;

                if (shipConfirmationAction.parmAnyInvoicedLines())
                {
                    loadsWithInvoicedOrders += segmentLoad.Id;
                }
            }

            if (!this.validateRouteOnLoad(_loadTable, loads))
            {
                loads = conNull();
            }
        }
        else
        {
            WHSShipConfirmationAction shipConfirmationAction = WHSShipConfirmationAction::newFromBuffer(_loadTable);

            shipConfirmationAction.parmSkipLoadTender(skipLoadTender);

            if (shipConfirmationAction.canShipConfirm())
            {
                loads += _loadTable.LoadId;
            }

            if (shipConfirmationAction.parmAnyInvoicedLines())
            {
                loadsWithInvoicedOrders += _loadTable.LoadId;
            }
        }

        return loads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retriveShipDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generate a map with actual ship date per load. Prompts a dynamically generated dialog if necessary.
    /// </summary>
    /// <param name="_loadTable">
    ///     The <c>WHSLoadTable</c> record of the load to retrieve actual ship date.
    /// </param>
    /// <returns>
    ///     A map with actual ship date per load.
    /// </returns>
    private Map retriveShipDateTime(WHSLoadTable _loadTable)
    {
        Map shipDateMap;

        container   loads       = this.retrieveLoads(_loadTable);
        int         numOfLoads  = conLen(loads);

        if (numOfLoads > 0)
        {
            if (this.parmLoadsShippedDates())
            {
                shipDateMap = this.extractDatesForLoads(loads);
            }
            else if (!this.parmSkipActualShipDate()
                && _loadTable.canUseTMSActions()
                && WhsShipConfirm::mustShowDialogToOverrideShipConfirmDate())
            {
                shipDateMap = this.runShipDateDialog(loads, _loadTable.RouteCode);
            }
            else
            {
                shipDateMap = new Map(Types::String, Types::UtcDateTime);

                for (int i = 1; i <= numOfLoads; ++i)
                {
                    shipDateMap.insert(conPeek(loads, i), DateTimeUtil::getSystemDateTime());
                }
            }

            if (!shipDateMap || numOfLoads != shipDateMap.elements())
            {
                shipDateMap = null;
                warning(numOfLoads > 1 ? strFmt("@TRX1864", _loadTable.LoadId, _loadTable.RouteCode) : strFmt("@TRX2706", _loadTable.LoadId));
            }
        }

        return shipDateMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>billOfLadingReport</Name>
				<Source><![CDATA[
    protected SRSCatalogItemName billOfLadingReport()
    {
        return ssrsReportStr(WHSBillOfLading, Report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBOLForLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs print BOL for a particular load
    /// </summary>
    /// <param name="_loadId">
    /// Load that will run through the print BOL process
    /// </param>
    private void runBOLForLoad(WHSLoadId _loadId)
    {
        WHSBillOfLading     masterBOL;
        boolean             printMasterBOL; // Need to print master BOL report after all shipment BOLs have been created.

        List shipments = this.printBOLShipments(_loadId);

        if (TMSParameters::find().CreateMasterBOL)
        {
            if (shipments.elements() > 1)
            {
                createMasterBOL = true;
                printMasterBOL  = true;
            }
        }

        str printBillOfLadingCollectionId;
        if (shipments.elements() > 1)
        {
            printBillOfLadingCollectionId = guid2Str(newGuid());
        }

        using (WHSBillOfLadingPrintMultipleShipmentsContext context = WHSBillOfLadingPrintMultipleShipmentsContext::newFromPrintBillOfLadingCollectionId(printBillOfLadingCollectionId))
        {
            ListEnumerator shipmentEnumerator = shipments.getEnumerator();
            while (shipmentEnumerator.moveNext())
            {
                this.printBOLForShipment(shipmentEnumerator.current());

                // Only need to create the master BOL once per load.
                createMasterBOL = false;
            }
        }
        
        if (printMasterBOL)
        {
            masterBOL = WHSBillOfLading::find(WHSLoadTable::find(_loadId).BillOfLadingId);

            Args args = new Args(this.billOfLadingReport());
            args.caller(this);
            args.record(masterBOL);
            args.menuItemName(menuItemOutputStr(WHSBillofLading));
            args.menuItemType(MenuItemType::Output);

            WHSBillofLadingController srsReportRun = new WHSBillofLadingController();
            srsReportRun.parmReportName(this.billOfLadingReport());
            srsReportRun.parmArgs(args);
            srsReportRun.parmShowDialog(false);

            if (printBillOfLadingCollectionId)
            {
                srsReportRun.parmFileURLsCollectionId(printBillOfLadingCollectionId);
            }
            srsReportRun.startOperation();
        }

        if (printBillOfLadingCollectionId && WhsShipConfirm::existPrintBillOfLadingCollectionIdInFileCache(printBillOfLadingCollectionId))
        {
            SrsReportRunUtil::downloadAndCompressFilesFromCollection(printBillOfLadingCollectionId, PrintBillOfLadingZipFileName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBOLForShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs print BOL for a particular shipment
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment that we will run through the print BOL process
    /// </param>
    private void runBOLForShipment(WHSShipmentId _shipmentId)
    {
        WHSShipmentTable            shipmentTable;
        WHSBillOfLading             billOfLading;
        WHSBillOfLadingDataUtil     billOfLadingDataUtil;
        boolean                     updateShipmentTable = false;
        boolean                     constructBOLData    = false;

        shipmentTable = WHSShipmentTable::find(_shipmentId, true);

        if (shipmentTable.RecId != 0)
        {
            if (!shipmentTable.BillOfLadingId)
            {
                shipmentTable.setBillOfLadingId();
                updateShipmentTable = true;
            }

            if (WHSBillOfLading::exist(shipmentTable.BillOfLadingId))
            {
                if (Box::yesNo(strFmt("@WAX:BillOfLadingRegenerateConfirm", shipmentTable.ShipmentId), DialogButton::No, "@WAX:BillOfLadingRegenerate") == DialogButton::Yes)
                {
                    constructBOLData = true;
                }
            }
            else
            {
                constructBOLData = true;
            }
        }

        ttsbegin;

        if (updateShipmentTable)
        {
            shipmentTable.update();
            TMSFreightBillDetail::setBillOfLadingId(shipmentTable);
        }

        if (constructBOLData)
        {
            billOfLadingDataUtil = WHSBillOfLadingDataUtil::construct();
            billOfLadingDataUtil.parmShipmentCriteria(shipmentTable);
            billOfLadingDataUtil.parmCreateMasterBOL(createMasterBOL);
            billOfLadingDataUtil.populateBillOfLadingTables();
        }

        ttscommit;

        if (shipmentTable.RecId != 0)
        {
            // It is possible to manually create multiple Bill of Lading reports on the same shipment
            while select billOfLading
                where billOfLading.ShipmentId       == shipmentTable.ShipmentId
                &&    billOfLading.MasterBOLFlag    == NoYes::No
            {
                MenuFunction billOfLadingController = this.initializeBillOfLadingReportMenuFunction();
                Args args = this.initializeArgumentsForBillOfLadingReport(billOfLading);
                billOfLadingController.run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBillOfLadingReportMenuFunction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes menu function for bill of lading report.
    /// </summary>
    /// <returns>A new instance of bill of lading menu function.</returns>
    [Replaceable]
    protected MenuFunction initializeBillOfLadingReportMenuFunction()
    {
        return new MenuFunction(menuitemOutputStr(WHSBillOfLading), MenuItemType::Output);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeArgumentsForBillOfLadingReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes arguments for bill of lading report.
    /// </summary>
    /// <param name = "_billOfLading">The bill of lading record.</param>
    /// <returns>A new instance of arguments for the bill of lading report.</returns>
    protected Args initializeArgumentsForBillOfLadingReport(WHSBillOfLading _billOfLading)
    {
        Args args = new Args();
        args.caller(this);
        args.parmEnum(NoYes::No); // do not show the print dialog
        args.record(_billOfLading);
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the packing slip process for a given outbound load.
    /// </summary>
    /// <param name="_loadId">
    /// Load that will run through the packing slip process.
    /// </param>
    /// <param name="_caller">
    /// The form that is calling the method.
    /// </param>
    public void runPackingSlip(WHSLoadId _loadId, FormRun _caller = null)
    {
        this.runPackingSlipWithBuffer(WHSLoadTable::find(_loadId), _caller, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPackingSlipWithParametersForLoad</Name>
				<Source><![CDATA[
    public void runPackingSlipWithParametersForLoad(WHSLoadId _loadId, WHSPackingSlipPostingParametersId _packingSlipPostingParametersId)
    {
        WHSSalesPackingSlipPostArgs salesPackingSlipPostArgs = new WHSSalesPackingSlipPostArgs();
        salesPackingSlipPostArgs.packingSlipPostingParametersId = _packingSlipPostingParametersId;

        this.runPackingSlipWithBuffer(WHSLoadTable::find(_loadId), null, salesPackingSlipPostArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPackingSlipForContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the packing slip process for a container.
    /// </summary>
    /// <param name="_whsContainerTable">
    /// Container that will run through the packing slip process.
    /// </param>
    /// <param name="_caller">
    /// The form that is calling the method.
    /// </param>
    public void runPackingSlipForContainer(WHSContainerTable _whsContainerTable, FormRun _caller = null)
    {
        WHSSalesPackingSlipPostArgs salesPackingSlipPostArgs = this.initPackingSlipPostArgs(_whsContainerTable);

        this.runPackingSlipWithBuffer(WHSShipmentTable::find(_whsContainerTable.ShipmentId).whsLoadTable(), _caller, salesPackingSlipPostArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPackingSlipWithParametersForContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the packing slip process for a container using <c>WHSPackingSlipPostingParameters</c>.
    /// Posting the packing slip process will not prompt for parameters using this flow.
    /// </summary>
    /// <param name = "_whsContainerTable">Container that will run through the packing slip process.</param>
    /// <param name = "_packingSlipPostingParametersId">Packing slip posting parameters.</param>
    internal void runPackingSlipWithParametersForContainer(WHSContainerTable _whsContainerTable, WHSPackingSlipPostingParametersId _packingSlipPostingParametersId)
    {
        WHSSalesPackingSlipPostArgs salesPackingSlipPostArgs = this.initPackingSlipPostArgs(_whsContainerTable);
        salesPackingSlipPostArgs.packingSlipPostingParametersId = _packingSlipPostingParametersId;

        this.runPackingSlipWithBuffer(WHSShipmentTable::find(_whsContainerTable.ShipmentId).whsLoadTable(), null, salesPackingSlipPostArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPackingSlipPostArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>WHSSalesPackingSlipPostArgs</c> to be used during posting.
    /// </summary>
    /// <param name = "_containerTable">The container table which has just been closed.</param>
    /// <returns>The <c>WHSSalesPackingSlipPostArgs</c>.</returns>
    protected WHSSalesPackingSlipPostArgs initPackingSlipPostArgs(WHSContainerTable _containerTable)
    {
        WHSSalesPackingSlipPostArgs salesPackingSlipPostArgs = new WHSSalesPackingSlipPostArgs();
        salesPackingSlipPostArgs.allowPostPackingSlipForLoadedLoad = true;
        return salesPackingSlipPostArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPackingSlipWithBuffer</Name>
				<Source><![CDATA[
    private void runPackingSlipWithBuffer(Common _buffer, FormRun _caller, WHSSalesPackingSlipPostArgs _salesPackingSlipPostArgs)
    {
        Args args = new Args();
        args.record(_buffer);
        args.parmObject(_salesPackingSlipPostArgs);

        if (_caller == null)
        {
            args.caller(this);
        }
        else
        {
            args.caller(_caller);
        }

        MenuFunction menuFunction = this.initializePackingSlipMenuFunction();
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePackingSlipMenuFunction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes menu function for packing slip.
    /// </summary>
    /// <returns>A new instance of packing slip menu function.</returns>
    [Replaceable]
    protected MenuFunction initializePackingSlipMenuFunction()
    {
        return new MenuFunction(menuitemActionStr(WHSSalesPackingSlipPost), MenuItemType::Action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runShipDateDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prompts a dynamically generated dialog to enter in actual ship date per load.
    /// </summary>
    /// <param name="_loads">
    ///     Loads to enter ship dates.
    /// </param>
    /// <param name="_routeCode">
    ///     Route code to which loads belong to.
    /// </param>
    /// <returns>
    ///     A map with actual ship date per load.
    /// </returns>
    Map runShipDateDialog(container _loads, TMSRouteCode _routeCode)
    {
        return TMSRouteHelper::getShipDates(_loads, _routeCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendASN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates and sends ASN for a load.
    /// </summary>
    /// <param name="_loadId">
    /// Load for which we want to generate and send ASN.
    /// </param>
    public void sendASN(WHSLoadId _loadId)
    {
        WHSLoadTable loadTable = WHSLoadTable::find(_loadId);
        
        if (this.parmPerformIsSendASNEnabledForLoadCheck()
            && !WHSShipConfirm::isSendASNEnabledForLoad(loadTable))
        {
            warning(strFmt("@WAX5703", _loadId));
            return;
        }

        ttsbegin;

        if (TMSRoute::find(loadTable.RouteCode).numOfLoads() > 1)
        {
            WHSLoadId unconfirmedLoadId = this.findUnconfirmedLoadId(loadTable.RouteCode);
            if (unconfirmedLoadId)
            {
                warning(strFmt("@WAX5704", loadTable.RouteCode, unconfirmedLoadId));
            }
            else
            {
                WHSLoadTable multiLoadTable;
                while select multiLoadTable
                    where multiLoadTable.RouteCode == loadTable.RouteCode
                {
                    this.generateAndSendASN(multiLoadTable.LoadId);
                }
            }
        }
        else
        {
            this.generateAndSendASN(_loadId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnconfirmedLoadId</Name>
				<Source><![CDATA[
    private WHSLoadId findUnconfirmedLoadId(TMSRouteCode _routeCode)
    {
        WHSLoadTable multiLoadTable;
        
        while select multiLoadTable
            where multiLoadTable.RouteCode == _routeCode
        {
            if (!WHSShipConfirm::isSendASNEnabledForLoad(multiLoadTable))
            {
                return multiLoadTable.LoadId;
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCLRException</Name>
				<Source><![CDATA[
    private void handleCLRException()
    {
        System.Exception ex;

        ex = CLRInterop::getLastException();

        if (ex != null)
        {
            ApplicationUnhandledExceptionLogger::logCLRException(ex);
            TMSErrorLog::createLogEntry(ex);

            Message::AddAction(MessageSeverity::Error, "@SYP4861434", "@TRX2562", MessageActionType::DisplayMenuItem, MenuItemMessageActionProvider::createMenuItemActionData(MenuItemType::Display, menuitemDisplayStr(TMSErrorLog)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the ship confirm process for a load or shipment
    /// </summary>
    /// <param name="_loadId">
    /// Load to be ship confirmed
    /// </param>
    public void shipConfirm(WHSLoadId _loadId)
    {
        WHSLoadTable    loadTable = WHSLoadTable::find(_loadId);
        boolean         routeConfirmed;
        Map             loadsShipDateMap;
        container       confirmedLoads;

        void handleGeneralError()
        {
            if (routeConfirmed || loadsShipDateMap.elements() > 1)
            {
                TMSRoute::unConfirm(loadTable.RouteCode);
            }
            
            error(strFmt("@WAX2543", _loadId));
        }

        if (loadTable.LoadStatus == WHSLoadStatus::Shipped)
        {
            return;
        }

        if (this.mustSplitLoadShipConfirm(loadTable))
        {
            WHSSplitShipConfirmResult splitResult = WHSSplitShipConfirm::splitLoadShipConfirmNoPrompt(loadTable, WHSSplitShipConfirm::deterimineSplitLoadShipConfirmMethod(loadTable.LoadSplitShipConfirmPolicy));
            if (!splitResult.canContinueShipConfirm())
            {
                return;
            }
            //Reread loadTable needed after split, otherwise the loadShipDateMap returns null.
            loadTable.reread();
        }

        loadsShipDateMap = this.retriveShipDateTime(loadTable);

        if (loadsShipDateMap == null || loadsShipDateMap.empty())
        {
            return;
        }

        try
        {                
            ttsbegin;

            if (WHSUseLockForShipConfirmAndReducePickedQtyV3Flight::instance().isEnabled())
            {
                this.acquireApplicationLockForLoadTable(_loadId);

                this.validateCanShipConfirm(_loadId);
            }                      

            this.deleteUnusedContainers(_loadId);
            
            if (TMSConfirmRouteBeforeConfirmShipmentToggle::instance().isEnabled())
            {
                // The method tmsMultiLoadshipConfirm() does not use any tms specific logic.
                confirmedLoads = this.tmsMultiLoadShipConfirm(loadsShipDateMap);

                if (loadTable.canUseTMSActions())
                {
                    routeConfirmed = this.tmsRouteConfirmation(loadTable, loadsShipDateMap);
                }
            }
            else
            {
                if (loadTable.canUseTMSActions())
                {
                    routeConfirmed = this.tmsRouteConfirmation(loadTable, loadsShipDateMap);
                }

                // The method tmsMultiLoadshipConfirm() does not use any tms specific logic.
                confirmedLoads = this.tmsMultiLoadShipConfirm(loadsShipDateMap);
            }

            this.onShipConfirm(_loadId);

            ttscommit;                
                
            this.instrumentationLogger().shipConfirmActivities().numberOfConfirmedLoads(conLen(confirmedLoads));

            this.shipConfirmLoadMessage(confirmedLoads);

            this.shipConfirmLoadWithInvoicedOrderMessage();
        }
        catch (Exception::CLRError)
        {
            this.handleCLRException();
            handleGeneralError();
        }
        catch (Exception::Internal)
        {
            this.handleCLRException();
            handleGeneralError();
        }
        catch
        {
            handleGeneralError();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onShipConfirm</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void onShipConfirm(WHSLoadId _loadId)
    {
        if (WHSLoadPackingSlipBackgroundPostingStatusFlight::instance().isEnabled())
        {
            WHSLoadTable load = WHSLoadTable::find(_loadId, true);

            if (WHSLoadPackingSlipPostingService::canScheduleForBackgroundPosting(load))
            {
                load.PackingSlipBackgroundPostingStatus = WHSLoadPackingSlipBackgroundPostingStatus::Queued;
                load.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanShipConfirm</Name>
				<Source><![CDATA[
   [Wrappable(true)]
   internal void validateCanShipConfirm(WHSLoadId _loadId)
   {
       // For extensibility purposes
   }

]]></Source>
			</Method>
			<Method>
				<Name>acquireApplicationLockForLoadTable</Name>
				<Source><![CDATA[
    private void acquireApplicationLockForLoadTable(WHSLoadId _loadId)
    {
        if (!_loadId)
        {
            return;
        }

        Connection connection;       
        
        try
        {
            // It is a connection class that uses current connection, not creates any new connections
            connection = new Connection();

            // lock is held until the transaction for current connection is alive
            boolean lockAquired = WHSShipConfirmAndReducePickedQtyLoadLockManager::tryAcquireWriterLockForLoadId(_loadId, connection);
        
            if (!lockAquired)
            {               
                throw Error(strFmt("@WAX:WHSShipConfirmCouldNotAcquireLockError", _loadId));
            }
        }
        finally
        {
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipConfirmLoadMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show shipment message for confirmed loads.
    /// </summary>
    /// <param name = "_loads">The confirmed loads.</param>
    protected void shipConfirmLoadMessage(container _loads)
    {
        if (conLen(_loads) > 1)
        {
            info(strFmt("@TRX1681", con2Str(_loads, ', ')));
        }
        else if (conLen(_loads) == 1)
        {
            info(strFmt("@WAX2544", conPeek(_loads, 1)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipConfirmLoadWithInvoicedOrderMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show message for loads with invoiced orders.
    /// </summary>
    protected void shipConfirmLoadWithInvoicedOrderMessage()
    {
        if (conLen(loadsWithInvoicedOrders) > 1)
        {
            info(strFmt("@TRX2710", con2Str(loadsWithInvoicedOrders, ', ')));
        }
        else if (conLen(loadsWithInvoicedOrders) == 1)
        {
            info(strFmt("@TRX2639", conPeek(loadsWithInvoicedOrders, 1)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipConfirmAllLoads</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the ship confirm process for all loads.
    /// </summary>
    /// <param name="_loadIdList">
    /// List of loadIds to be ship confirmed.
    /// </param>
    public void shipConfirmAllLoads(List _loadIdList)
    {
        using (var activityContext = this.instrumentationLogger().shipConfirmActivities().allLoadsShipConfirm())
        {
            ListEnumerator loadIdEnumerator = _loadIdList.getEnumerator();

            while (loadIdEnumerator.moveNext())
            {
                WHSLoadId loadId = loadIdEnumerator.current();
                this.shipConfirm(loadId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsLoadConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the load using TMS
    /// </summary>
    /// <param name="_loadId">
    /// Load id that is being processed
    /// </param>
    /// <param name="_shipDateMap">
    /// Map containing shipment dates
    /// </param>
    /// <returns>
    /// true if route was ship confirmed; otherwise, false
    /// </returns>
    public boolean tmsLoadConfirmation(WHSLoadId _loadId, Map _shipDateMap)
    {
        return WHSLoadTable::tmsLoadConfirmation(_loadId, _shipDateMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsMultiLoadShipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ship confirms multiple loads with TMS processes integrated
    /// </summary>
    /// <param name="_shipDateMap">
    /// Map containing shipment dates
    /// </param>
    /// <returns>
    /// Container of loads that were ship confirmed
    /// </returns>
    public container tmsMultiLoadShipConfirm(Map _shipDateMap)
    {
        container loads;

        MapEnumerator me = _shipDateMap.getEnumerator();

        while (me.moveNext())
        {
            WHSLoadId loadId = me.currentKey();
            WHSLoadShipConfirmUTCDateTime shipDateTime = me.currentValue();

            WHSLoadTable loadTable = WHSLoadTable::find(loadId);
            if (!loadTable)
            {
                throw error(strFmt("@WAX:Error_LoadDoesNotExist", loadId));
            }

            var whsShipConfirmationAction = WhsShipConfirmationAction::newFromBuffer(loadTable);
            this.runShipConfirmAction(whsShipConfirmationAction, shipDateTime);

            if (!WHSLoadLine::preventZeroQuantity()
                || WHSLoadTable::find(loadId).LoadStatus == WHSLoadStatus::Shipped)
            {
                loads += loadId;
            }
        }

        return loads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runShipConfirmAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the ship confirm process for specified ship date time.
    /// </summary>
    /// <param name = "_whsShipConfirmationAction">The <c>WHSShipConfirmationAction</c> instance.</param>
    /// <param name = "_shipDateTime">Load shipped confirmation date and time.</param>
    protected void runShipConfirmAction(WHSShipConfirmationAction _whsShipConfirmationAction, WHSLoadShipConfirmUTCDateTime _shipDateTime)
    {
        _whsShipConfirmationAction.shipConfirm(_shipDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsRouteConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms the route for the given load
    /// </summary>
    /// <param name = "_loadTable">
    /// The load record.
    /// </param>
    /// <param name = "_loadsShipDateMap">
    /// Map containing shipment dates.
    /// </param>
    /// <returns>
    /// true if route was ship confirmed; otherwise, false.
    /// </returns>
    protected boolean tmsRouteConfirmation(WHSLoadTable _loadTable, Map _loadsShipDateMap)
    {
        TMSRoute route;
        boolean routeConfirmed;

        if (_loadsShipDateMap.elements() > 1)
        {
            route = TMSRoute::find(_loadTable.RouteCode);

            routeConfirmed = this.tmsRouteConfirmationMultiLoad(route, _loadsShipDateMap);
        }
        else
        {
            // Only capture freight if the Pays Freight on the dlvTerms is not none
            // Method WHSLoadTable::evaluateLoadPaysFreight can update LoadPaysFreight of WHSLoadTable, so we need to reread load table
            _loadTable.reread();
            if (_loadTable.LoadPaysFreight)
            {
                if (_loadTable.RouteCode != '')
                {
                    route = TMSRoute::find(_loadTable.RouteCode);

                    routeConfirmed = route.routeConfirmation(_loadsShipDateMap);
                }
                else if (_loadTable.CarrierCode != '')
                {
                    routeConfirmed = this.tmsLoadConfirmation(_loadTable.LoadId, _loadsShipDateMap);
                }
            }
        }

        return routeConfirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsRouteConfirmationMultiLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms multiple loads with routes.
    /// </summary>
    /// <param name="_route">
    /// The route to be used in confirmation.
    /// </param>
    /// <param name="_loadsShipDateMap">
    /// Map containing shipment dates.
    /// </param>
    /// <returns>
    /// true if route was ship confirmed; otherwise, false.
    /// </returns>
    public boolean tmsRouteConfirmationMultiLoad(TMSRoute _route, Map _loadsShipDateMap)
    {
        WHSLoadTable loadTable;
        boolean ret;

        // If one load pays freight, they all pay freight
        select firstonly RecId from loadTable
            where loadTable.RouteCode == _route.RouteCode &&
                  loadTable.LoadPaysFreight == true;

        if (loadTable.RecId)
        {
            while select LoadId from loadTable
                where loadTable.RouteCode == _route.RouteCode
            {
                if (_route.loadRouteConfirmation(loadTable.LoadId, _loadsShipDateMap.lookup(loadTable.LoadId)))
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsRouteUnConfirm</Name>
				<Source><![CDATA[
    private void tmsRouteUnConfirm(WHSLoadId _loadId)
    {
        TMSRoute::unConfirm(WHSLoadTable::find(_loadId).RouteCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRouteOnLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that all <c>WHSLoadTable</c> records connected with
    /// <c>TMSRoute</c> record have the same setup for freight payments.
    /// </summary>
    /// <param name="_whsLoadTable">
    /// The current Load.
    /// </param>
    /// <param name="_loads">
    /// Loads on the same route.
    /// </param>
    /// <returns>
    /// True, if all <c>WHSLoadTable</c> records connected with
    /// <c>TMSRoute</c> record have the same setup for freight payments, otherwise False.
    /// </returns>
    protected boolean validateRouteOnLoad(WHSLoadTable _whsLoadTable, container _loads)
    {
        WHSLoadTable otherLoadTable;
        TMSRouteSegmentLoad segmentLoad;
        int numOfLoads;
        boolean ret = true;

        numOfLoads = conLen(_loads);

        if (numOfLoads > 1)
        {
            // If one load pays freight, they all pay freight
            // Method WHSLoadTable::evaluateLoadPaysFreight can update LoadPaysFreight of WHSLoadTable, so we need to reread load table
            _whsLoadTable.reread();

            while select LoadPaysFreight from otherLoadTable
                exists join segmentLoad
                where segmentLoad.RouteCode == _whsLoadTable.RouteCode
                   && otherLoadTable.LoadId == segmentLoad.id
            {
                if (otherLoadTable.LoadPaysFreight != _whsLoadTable.LoadPaysFreight)
                {
                    ret = checkFailed(strFmt("@TRX2713", _whsLoadTable.LoadId, _whsLoadTable.RouteCode, otherLoadTable.LoadId));
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>WHSShipConfirm </c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>WHSShipConfirm</c> class.
    /// </returns>
    public static WHSShipConfirm construct()
    {
        return new WHSShipConfirm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPackingSlipEnabledForLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if post packing slip button should be enabled for the load.
    /// </summary>
    /// <param name = "_loadTable">The load record.</param>
    /// <returns>true if post packing slip is enabled for load ; otherwise, false</returns>
    protected boolean isPackingSlipEnabledForLoad(WHSLoadTable _loadTable)
    {
        return WHSShipConfirm::isPackingSlipEnabledForBuffer(_loadTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOLEnabledForLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if print Bill of lading button should be enabled for the load
    /// </summary>
    /// <param name="_whsLoadTable">
    /// Load for which we want to print Bill of lading
    /// </param>
    /// <returns>
    /// true if Bill of lading button should be enabled; otherwise, false
    /// </returns>
    public static boolean isBOLEnabledForLoad(WHSLoadTable _whsLoadTable)
    {
        return  _whsLoadTable.LoadId
            &&  _whsLoadTable.LoadingStrategy   == WHSLoadingStrategy::FullLoadShippingOnly
            && (_whsLoadTable.LoadStatus        == WHSLoadStatus::Shipped
            || InventLocation::find(_whsLoadTable.InventLocationId).PrintBOLBeforeShipConfirm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOLEnabledForShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if print Bill of lading button should be enabled for the Shipment
    /// </summary>
    /// <param name="_whsShipmentTable">
    /// Shipment for which we want to print Bill of Lading
    /// </param>
    /// <returns>
    /// true if Bill of lading button should be enabled; otherwise, false
    /// </returns>
    public static boolean isBOLEnabledForShipment(WHSShipmentTable _whsShipmentTable)
    {
        return _whsShipmentTable.ShipmentId
            && (InventLocation::find(_whsShipmentTable.InventLocationId).PrintBOLBeforeShipConfirm
                || _whsShipmentTable.ShipmentStatus == WHSShipmentStatus::Shipped);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPackingSlipEnabledForContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if post packing slip button should be enabled for the container
    /// </summary>
    /// <param name="_whsContainerTable">
    /// Container for which we want to generate packing slip
    /// </param>
    /// <returns>
    /// true if post packing slip button should be enabled; otherwise, false
    /// </returns>
    public static boolean isPackingSlipEnabledForContainer(WHSContainerTable _whsContainerTable)
    {
        return _whsContainerTable.ContainerId
            && WHSShipConfirm::isPackingSlipEnabledForShipment(WHSShipmentTable::find(_whsContainerTable.ShipmentId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPackingSlipEnabledForBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if post packing slip button should be enabled.
    /// </summary>
    /// <param name="_common">
    /// <c>Common</c> buffer for which we want to generate packing slip.
    /// </param>
    /// <returns>
    /// true if post packing slip button should be enabled; otherwise, false
    /// </returns>
    public static boolean isPackingSlipEnabledForBuffer(Common _common)
    {
        return WHSPostPackingSlipAction::newFromBuffer(_common).canPackingSlipBePosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPackingSlipEnabledForShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if post packing slip button should be enabled for the shipment
    /// </summary>
    /// <param name="_whsShipmentTable">
    /// Shipment for which we want to generate packing slip
    /// </param>
    /// <returns>
    /// true if post packing slip button should be enabled; otherwise, false
    /// </returns>
    public static boolean isPackingSlipEnabledForShipment(WHSShipmentTable _whsShipmentTable)
    {
        return _whsShipmentTable.ShipmentId
            && WHSLoadTable::find(_whsShipmentTable.LoadId).displayShipment() != ''
            && WHSShipConfirm::isPackingSlipEnabledForBuffer(WHSLoadTable::find(_whsShipmentTable.LoadId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSendASNEnabledForLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if send ASN button should be enabled for the load
    /// </summary>
    /// <param name="_whsLoadTable">
    /// Load for which we want to send ASN
    /// </param>
    /// <returns>
    /// true if send ASN button should be enabled; otherwise, false
    /// </returns>
    public static boolean isSendASNEnabledForLoad(WHSLoadTable _whsLoadTable)
    {
        return _whsLoadTable.LoadId
            && _whsLoadTable.LoadStatus			== WHSLoadStatus::Shipped
            && _whsLoadTable.LoadDirection		!= WHSLoadDirection::Inbound
            && _whsLoadTable.LoadingStrategy	== WHSLoadingStrategy::FullLoadShippingOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSendASNEnabledForShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if send ASN button should be enabled for the load.
    /// </summary>
    /// <param name="_whsShipmentTable">
    /// Shipment for which we want to send ASN
    /// </param>
    /// <returns>
    /// true if send ASN button should be enabled; otherwise, false
    /// </returns>
    public static boolean isSendASNEnabledForShipment(WHSShipmentTable _whsShipmentTable)
    {
        return _whsShipmentTable.ShipmentId
            && WHSLoadTable::find(_whsShipmentTable.LoadId).displayShipment() != ''
            && WHSShipConfirm::isSendASNEnabledForLoad(WHSLoadTable::find(_whsShipmentTable.LoadId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipConfirmEnabledForBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if ship confirm button should be enabled.
    /// </summary>
    /// <param name="_common">
    /// <c>Common</c> buffer for which we want to ship confirm.
    /// </param>
    /// <returns>
    /// true if ship confirm button should be enabled; otherwise, false
    /// </returns>
    [SysObsolete('The WHSShipConfirmationAction class must be used instead', false, 31\03\2018)]
    public static boolean isShipConfirmEnabledForBuffer(Common _common)
    {
        if (!_common)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return WHSShipConfirmationAction::newFromBuffer(_common).canEnableShipConfirm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipConfirmEnabledForShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if ship confirm button should be enabled for the load
    /// </summary>
    /// <param name="_whsShipmentTable">
    /// Shipment to be ship confirmed
    /// </param>
    /// <returns>
    /// true if ship confirm button should be enabled; otherwise, false
    /// </returns>
    public static boolean isShipConfirmEnabledForShipment(WHSShipmentTable _whsShipmentTable)
    {
        return _whsShipmentTable.ShipmentId
            && WHSLoadTable::find(_whsShipmentTable.LoadId).displayShipment() != ''
            && WHSShipConfirmationAction::newFromBuffer(WHSLoadTable::find(_whsShipmentTable.LoadId)).canEnableShipConfirm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBOLForAllLoads</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints Bill of lading for a list of loads.
    /// </summary>
    /// <param name="_loadIdList">
    /// List of loads for which we want to print Bill of lading.
    /// </param>
    public static void printBOLForAllLoads(List _loadIdList)
    {
        ListEnumerator loadIdEnumerator;
        WHSLoadId loadId;
        WHSShipConfirm whsShipConfirm;

        whsShipConfirm = WHSShipConfirm::construct();
        loadIdEnumerator = _loadIdList.getEnumerator();

        while (loadIdEnumerator.moveNext())
        {
            loadId = loadIdEnumerator.current();
            whsShipConfirm.printBOLForLoad(loadId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performActionOnLoad</Name>
				<Source><![CDATA[
    private static void performActionOnLoad(WHSShipConfirmAction _action, WHSLoadId _loadId)
    {
        WHSShipConfirm shipConfirm = WHSShipConfirm::construct();

        switch (_action)
        {
            case WHSShipConfirmAction::ConfirmShipment:
                shipConfirm.shipConfirm(_loadId);
                break;

            case WHSShipConfirmAction::SendASN:
                shipConfirm.sendAsn(_loadId);
                break;

            case WHSShipConfirmAction::PrintBOLForShipment:
                shipConfirm.runBOLForLoad(_loadId);
                break;

            case WHSShipConfirmAction::PostPackingSlip:
                shipConfirm.postPackingSlip(_loadId);
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performActionOnBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs specified ship confirmation action.
    /// </summary>
    /// <param name = "_action">Ship confirmation action</param>
    /// <param name = "_common"><c>Common</c> buffer for which we want to ship confirm.</param>
    [Hookable(false)]
    public static void performActionOnBuffer(WHSShipConfirmAction _action, Common _common)
    {
        if (!_common)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (_common is WHSShipmentTable)
        {
            WHSShipmentTable shipmentTable = _common as WHSShipmentTable;
            WHSShipConfirm shipConfirm = WHSShipConfirm::construct();

            switch (_action)
            {
                case WHSShipConfirmAction::PrintBOLForShipment:
                    shipConfirm.printBOLForShipment(shipmentTable.ShipmentId);
                    break;

                default:
                    WHSShipConfirm::performActionOnLoad(_action, shipmentTable.LoadId);
            }
        }
        else if (_common is WHSLoadTable)
        {
            WHSLoadTable loadTable = _common as WHSLoadTable;
            WHSShipConfirm::performActionOnLoad(_action, loadTable.LoadId);
        }
        else
        {
            switch (_action)
            {
                case WHSShipConfirmAction::ConfirmShipment:
                    WhsShipConfirmationAction::newFromBuffer(_common).shipConfirm(DateTimeUtil::getSystemDateTime());
                    break;

                default:
                    throw error(error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args _args)
    {
        Debug::assert(_args.parmEnumType() == enumNum(WHSShipConfirmAction));

        WHSShipConfirmAction action = _args.parmEnum();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            switch (_args.record().TableId)
            {
                case tableNum(WHSWorkTable):
                    WhsWorkTable whsWorkTable = _args.record() as WhsWorkTable;
                    WHSShipConfirm::performActionOnBuffer(action, WHSLoadTable::find(whsWorkTable.LoadId));
                    break;

                case tableNum(WHSShipmentTable):
                    WHSShipmentTable shipmentTable = _args.record() as WHSShipmentTable;
                    if (FormDataUtil::isFormDataSource(shipmentTable))
                    {
                        FormDataSource datasource = FormDataUtil::getFormDataSource(shipmentTable) as FormDataSource;
                    
                        List shipments = new List(Types::Record);
                        for (shipmentTable = datasource.getFirst(true) ? datasource.getFirst(true) : datasource.cursor();
                             shipmentTable;
                             shipmentTable = datasource.getNext())
                        {
                            shipments.addEnd(shipmentTable);
                        }

                        str printBillOfLadingCollectionId;
                        if (shipments.elements() > 1)
                        {
                            printBillOfLadingCollectionId = guid2Str(newGuid());
                        }

                        using (WHSBillOfLadingPrintMultipleShipmentsContext context = WHSBillOfLadingPrintMultipleShipmentsContext::newFromPrintBillOfLadingCollectionId(printBillOfLadingCollectionId))
                        {
                            Map     loadResults = new Map(Types::String, Types::Enum);
                            boolean canContinueShipConfirm;
                            ListEnumerator shipmentEnumerator = shipments.getEnumerator();
                            while (shipmentEnumerator.moveNext())
                            {
                                shipmentTable = shipmentEnumerator.current();
                                if (loadResults.exists(shipmentTable.LoadId))
                                {
                                    canContinueShipConfirm = loadResults.lookup(shipmentTable.LoadId);
                                }
                                else
                                {
                                    WHSSplitShipConfirmResult splitShipConfirmResult = WHSSplitShipConfirm::splitLoadShipConfirm(WHSLoadTable::find(shipmentTable.LoadId));

                                    canContinueShipConfirm = splitShipConfirmResult.canContinueShipConfirm();

                                    loadResults.insert(shipmentTable.LoadId, canContinueShipConfirm);
                                }

                                if (canContinueShipConfirm)
                                {
                                    WHSShipConfirm::performActionOnBuffer(action, shipmentTable);
                                }
                            }

                            if (printBillOfLadingCollectionId && WhsShipConfirm::existPrintBillOfLadingCollectionIdInFileCache(printBillOfLadingCollectionId))
                            {
                                SrsReportRunUtil::downloadAndCompressFilesFromCollection(printBillOfLadingCollectionId, PrintBillOfLadingZipFileName);
                            }
                        }
                        datasource.research(true);
                        
                    }
                    else
                    {
                        WHSShipConfirm::performActionOnBuffer(action, shipmentTable);
                    }
                    break;

                case tableNum(WHSLoadTable):
                    WHSLoadTable loadTable = _args.record() as WHSLoadTable;

                    if (FormDataUtil::isFormDataSource(loadTable))
                    {
                        FormDataSource datasource = FormDataUtil::getFormDataSource(loadTable) as FormDataSource;
                        int            loadNumber;

                        for (loadTable = datasource.getFirst(true) ? datasource.getFirst(true) : datasource.cursor();
                        loadTable;
                        loadTable = datasource.getNext())
                        {
                            loadTable.reread();

                            WHSSplitShipConfirmResult splitShipConfirmResult = WHSSplitShipConfirm::splitLoadShipConfirm(loadTable);

                            if (splitShipConfirmResult.canContinueShipConfirm())
                            {
                                WHSShipConfirm::performActionOnBuffer(action, loadTable);
                            }

                            loadNumber++;
                        }

                        FormLetter::reFreshCallerDataSource(datasource, true, loadNumber > 1);
                    }
                    else if (loadTable.LoadId)
                    {
                        WHSShipConfirm::performActionOnBuffer(action, loadTable);
                    }
                    break;

                default:
                    WHSShipConfirm::performActionOnBuffer(action, _args.record());
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnusedContainers</Name>
				<Source><![CDATA[
    private void deleteUnusedContainers(WHSLoadId _loadId)
    {
        WHSLoadLine             loadLine;

        while select ShipmentId from loadLine
            group by ShipmentId
            where loadLine.LoadId == _loadId
        {
            WHSContainerTable::cleanupShipmentContainers(loadLine.ShipmentId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPrintBillOfLadingCollectionIdInFileCache</Name>
				<Source><![CDATA[
    private static boolean existPrintBillOfLadingCollectionIdInFileCache(str _printBillOfLadingCollectionId)
    {
        SysGlobalObjectCache globalCache = classfactory.globalObjectCache();
        container collectionIdContainer = [guidFromString(_printBillOfLadingCollectionId)];
        container cacheValueContainer = globalCache.find(classStr(Dynamics.AX.Application.File), collectionIdContainer);
        
        if(!cacheValueContainer)
        {
            return false;
        }

        container fileCollectionContainer = conPeek(cacheValueContainer, 1);
        if(fileCollectionContainer && conLen(fileCollectionContainer) > 1)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBOLShipments</Name>
				<Source><![CDATA[
    private List printBOLShipments(WHSLoadId _loadId)
    {
        List shipmentIds = new List(Types::String);
        WHSShipmentTable    shipmentTable;
        WHSLoadLine         loadLine;

        while select ShipmentId, LoadId from shipmentTable
            where shipmentTable.LoadId == _loadId
            exists join loadLine
                where shipmentTable.ShipmentId == loadLine.ShipmentId
        {
            shipmentIds.addEnd(shipmentTable.ShipmentId);
        }

        return shipmentIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSplitLoadShipConfirm</Name>
				<Source><![CDATA[
    private boolean mustSplitLoadShipConfirm(WHSLoadTable _load)
    {
        return _load.AllowLoadSplitShipConfirm &&
               (_load.LoadSplitShipConfirmPolicy == WHSLoadSplitShipConfirmPolicy::CancelUnfulfilledQuantity ||
               _load.LoadSplitShipConfirmPolicy == WHSLoadSplitShipConfirmPolicy::SplitQtyToNewLoad) &&
               WHSShipConfirmServiceImplementsSplitShipmentInBatchFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>