<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkExecuteDisplayMenu</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to display menu screen.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::Menu)]
public class WhsWorkExecuteDisplayMenu extends WHSWorkExecuteDisplay
{
    #define.SystemChangesWarningLabelName('navigationResetWarning')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildMenu</Name>
				<Source><![CDATA[
    public container buildMenu(WHSMenuName _menuName, boolean _includeNavigationResetWarning = false)
    {
        container ret;

        container each = this.buildControl(#RFLabel, _menuName, WHSRFMenuTable::find(_menuName).menuLabel(), 1, '', #WHSRFUndefinedDataType, '', 0, true, '');
        ret += [each];

        boolean mustCheckIfMenuLineCanBeAddedToMenu = this.mustCheckIfMenuLineCanBeAddedToMenu();

        WHSRFMenuLine menuLine;
        boolean menuLineHiddenFlightEnabled = WHSRFMenuLineHiddenFlight::instance().isEnabled();

        while select menuLine
            where menuLine.RefMenuName == _menuName
               && (!menuLineHiddenFlightEnabled || menuLine.Hidden == NoYes::No)
        {
            if (!mustCheckIfMenuLineCanBeAddedToMenu
                || this.canMenuLineBeAddedToMenu(menuLine))
            {
                each = this.buildControl(#RFButton, menuLine.menuLineName(), menuLine.menuLineLabel(), 1, '', #WHSRFUndefinedDataType, '', 0);
                ret += [each];
            }
        }

        if (_includeNavigationResetWarning)
        {
            each = this.buildControl(#RFLabel, #SystemChangesWarningLabelName, "@WAX5709", 1, '', #WHSRFUndefinedDataType, '', 0, true, '');
            ret += [each];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMenuLineBeAddedToMenu</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the passed <c>WHSRFMenuLine</c> record can be added to the menu.
    /// The menu line represents both menu lines and menu items. Menu lines build the menu structure, while menu items represent actions.
    /// </summary>
    /// <param name = "_menuLine">A <c>WHSRFMenuLine</c> record to be checked.</param>
    /// <returns>true if the menu line can be added to the menu; otherwise, false.</returns>
    [Wrappable(true)]
    internal boolean canMenuLineBeAddedToMenu(WHSRFMenuLine _menuLine)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckIfMenuLineCanBeAddedToMenu</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method determines if the check for adding menu line to the menu must be done.
    /// If it must be done, then by default it is not possible to add any menu line or item to the menu.
    /// The extensions need to explicitly enable them (an opt-in principle is followed) by extending the canMenuLineBeAddedToMenu method.
    /// </summary>
    /// <returns>true if the check for adding menu line to the menu must be done; otherwise, false.</returns>
    [Wrappable(true)]
    internal boolean mustCheckIfMenuLineCanBeAddedToMenu()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonClicked = '')
    {
        container           breadCrumbs;
        container           ret;
        container           con = _con;
        boolean             updateBreadCrumbs = true;
        str                 buttonText = _buttonClicked;
        boolean             navigationReset = false;

        mode = WHSWorkExecuteMode::Menu;
        pass = WHSRFPassthrough::create(conPeek(_con, #PassthroughInfo));

        if (!pass.parmUserId())
        {
            // This situation should not happen - user Id is always needed
            // to view the menu. This will redirect user to the login screen.
            return WHSWorkExecuteDisplay::getNextForm(conNull());
        }

        ttsbegin;
            
        WHSWorkUserSession userSession = WHSWorkUserSession::find(pass.parmUserId(), true);
        var sessionState = userSession.sessionState(true);

        if (userSession.ResetNavigation == NoYes::No)
        {
            breadCrumbs = userSession.MenuBreadcrumbs;
        }
        else
        {
            // We have to reset navigation (there have been menu structure changes)
            // user will be redirected to the default menu.
            pass.remove(#MenuItem);
            buttonText = '';
            breadCrumbs = conNull();
            navigationReset = true;

            userSession.MenuBreadcrumbs = conNull();
            userSession.ResetNavigation = NoYes::No;
            userSession.update();

            sessionState.parmMode(WHSWorkExecuteMode::Menu);
            sessionState.createOrUpdate();
        }

        if (buttonText == #Login)  // Login
        {
            buttonText = WHSWorkUser::getDefaultMenu(pass.parmUserId());
        }

        if (buttonText == #RFBack || buttonText == #RFCancel)     // Back || Cancel
        {
            mode = WHSWorkExecuteMode::Menu;
            
            // If we were already in the Menu, we want to go one level up; otherwise, we want to stay on the last opened menu.
            if (buttonText == #RFBack && sessionState.parmMode() == WHSWorkExecuteMode::Menu)
            {
                breadCrumbs = conDel(breadCrumbs, conLen(breadCrumbs), conLen(breadCrumbs));
            }
            buttonText = conPeek(breadCrumbs, conLen(breadCrumbs));
            if (buttonText == '0')
            {
                buttonText = '';
            }
        }

        if (buttonText && !WHSRFMenuTable::find(buttonText))
        {
            var menuItemTable = WHSRFMenuItemTable::find(buttonText);
            pass.insert(#MenuItem, menuItemTable.MenuItemName);

            WHSWorkExecuteMode workMode = WHSRFMenuItemTable::getWHSWorkExecuteMode(menuItemTable);

            container tmp = conPoke(conPeek(con, 1), 1, workMode);
            ret = conPoke(con, 1, tmp);
            ret = conPoke(ret, 2, pass.pack());
            ret = WHSWorkExecuteDisplay::getNextForm(ret);
        }
        else
        {
            WHSMenuName menuName;

            if (buttonText != #RFBack)  // Back
            {
                menuName = buttonText ? buttonText : WHSWorkUser::getDefaultMenu(pass.parmUserId());
            }
            else
            {
                menuName = conPeek(breadCrumbs, conLen(breadCrumbs) - 1);
            }

            ret = this.buildMenu(menuName, navigationReset);

            if (ret == conNull())
            {
                ret = this.addErrorLabel(ret, "@WAX1053");
                updateBreadCrumbs = false;
            }
            else if (buttonText)
            {
                if (conPeek(breadCrumbs, conLen(breadCrumbs)) != buttonText)
                {
                    breadCrumbs = conIns(breadCrumbs, conLen(breadCrumbs) + 1, buttonText);
                }

                if (conLen(breadCrumbs) > 1)
                {
                    ret = this.addBackButton(ret);
                }
            }
            else
            {
                breadCrumbs = conIns(breadCrumbs, 1, menuName);
            }

            if (updateBreadCrumbs)
            {
                userSession.MenuBreadcrumbs = breadCrumbs;
                userSession.update();
            }

            ret = this.updateModeStepPass(ret, mode, 0, pass);
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>