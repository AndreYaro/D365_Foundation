<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvSubmitCashAdvanceToWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class to handle the submission of cash advance records to workflow.
/// </summary>
class TrvSubmitCashAdvanceToWorkflow extends TrvSubmitToWorkflow
{
    private ExpenseInstrumentationLogger logger;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateApprovalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current status of the entity in the system with the workflow submitted record.
    /// </summary>
    /// <returns>
    /// False if the status is different from the workflow submitted record. Otherwise, true.
    /// </returns>
    protected boolean validateApprovalStatus()
    {
        TrvCashAdvance  trvCashAdvanceLocal;
        TrvCashAdvance  trvCashAdvanceInstance = this.parmEntity();
        boolean         canSubmit = true;

        trvCashAdvanceLocal.disableCache(true);
        select firstonly CashAdvanceStatus from trvCashAdvanceLocal where trvCashAdvanceLocal.RecId == trvCashAdvanceInstance.RecId;

        // To check whether cash advance is already submitted.
        return trvCashAdvanceLocal.CashAdvanceStatus == trvCashAdvanceInstance.CashAdvanceStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubmitterUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets workflow submitter user id of the entity in the system with the workflow submitted record.
    /// </summary>
    /// <returns>
    /// The submitter user id of the workflow
    /// </returns>
    protected WorkflowUser getSubmitterUserId()
    {
        TrvCashAdvance  trvCashAdvanceInstance = this.parmEntity();
        WorkflowUser    submittingUserId;

        submittingUserId = DirPersonUserEx::worker2UserId(trvCashAdvanceInstance.RequestingWorker);

        return submittingUserId ? submittingUserId : curuserid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of <c>TrvSubmitCashAdvanceToWorkflow</c>.
    /// </summary>
    /// <param name = "_entity">Cash advance record that will be submitted.</param>
    /// <param name = "_workflowVersionTable">An instance of <c>WorkflowVersionTable</c>.</param>
    /// <param name = "_workflowComment">Workflow comments.</param>
    /// <returns>Created instance of <c>TrvSubmitCashAdvanceToWorkflow</c></returns>
    public static TrvSubmitCashAdvanceToWorkflow construct(Common _entity, WorkflowVersionTable _workflowVersionTable = null, WorkflowComment _workflowComment = '')
    {
        TrvSubmitCashAdvanceToWorkflow submitToWorkflow = new TrvSubmitCashAdvanceToWorkflow();
        submitToWorkflow.initialize(_entity, _workflowVersionTable, _workflowComment);
        submitToWorkflow.logger = ExpenseInstrumentationLogger::createLogger(classStr(TrvSubmitCashAdvanceToWorkflow));
        return submitToWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitCashAdvance</Name>
				<Source><![CDATA[
    private TrvCashAdvance submitCashAdvance()
    {
        TrvCashAdvance trvCashAdvanceInstance = this.parmEntity();
        
        this.submitToWorkflow();
        trvCashAdvanceInstance.CashAdvanceStatus = TrvWorkflowCashAdvanceStatus::Submitted;
        ttsbegin;
        trvCashAdvanceInstance.selectForUpdate(true);
        trvCashAdvanceInstance.doUpdate();
        ttscommit;
        
        return trvCashAdvanceInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submit the cash advance.
    /// </summary>
    /// <returns>True if successful, otherwise false.</returns>
    protected boolean submit()
    {
        ExpenseInstrumentationSubmitActivities submitActivities = ExpenseInstrumentationSubmitActivities::construct(logger);
        ExpenseInstrumentationLoggerProperties properties = logger.properties();

        using (var cashAdvanceContext = submitActivities.cashAdvanceContext())
        {
            TrvCashAdvance trvCashAdvanceInstance = this.submitCashAdvance();
            submitActivities.addCustomProperty(cashAdvanceContext, properties.propertyByTableRecord(trvCashAdvanceInstance));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submit validation logic for cash advance.
    /// </summary>
    /// <returns>True if the main account is part of account structure; otherwise, false.</returns>
    protected boolean validateSubmit()
    {
        boolean isValid = true;
        TrvCashAdvance  trvCashAdvanceInstance = this.parmEntity();
        TrvExchSetup    trvExchSetup = TrvExchSetup::find(trvCashAdvanceInstance.CurrencyCode);
        
        if(trvExchSetup && trvExchSetup.AdvanceAccountLedgerDimension)
        {
            DimensionHierarchyId accountStructureId;

            LedgerDimensionAccount  ledgerDimension = TrvExpTransSourceDocLineItem::convertToLedgerDimension(trvExchSetup.AccountType, trvExchSetup.AdvanceAccountLedgerDimension);
            
            // Find account structure from ledger dimension
            MainAccountRecId mainAccountRecId = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(ledgerDimension);
            
            if (mainAccountRecId)
            {
                accountStructureId = DimensionHierarchy::getAccountStructure(mainAccountRecId, Ledger::current());
            }
        
            if (!accountStructureId)
            {
                MainAccount mainAccount = MainAccount::find(mainAccountRecId);
                isValid = checkFailed(strFmt("@Ledger:InvalidMainAccountForLedger", mainAccount.MainAccountId, Ledger::name(Ledger::current())));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAsyncValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do the submit validation asynchronously.
    /// </summary>
    /// <returns>The async task object.</returns>
    protected System.Threading.Tasks.Task doAsyncValidation(System.Threading.CancellationTokenSource _tokenSource)
    {
        System.Threading.Tasks.Task task = runAsync(classnum(TrvSubmitCashAdvanceToWorkflow),
                                            "handleValidationAsync",
                                            [this.parmEntity()],
                                            _tokenSource.Token);
        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleValidationAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle submit validations. This is a wrapper method suitable for being called asynchronously.
    /// </summary>
    /// <param name = "params">A <c>TrvCashAdvance</c> record in a container.</param>
    /// <param name = "cancellationToken">A cancellation token to request cancellation of async method's execution.</param>
    /// <returns>A container with a single value: True.</returns>
    public static container handleValidationAsync(container _params, System.Threading.CancellationToken _cancellationToken)
    {
        // No validations for cash advance.
        return [true];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>