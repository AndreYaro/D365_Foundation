<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxScenarioUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxScenarioUtil</c> class is an util class for some complex scenario class.
/// </summary>
public final class TaxScenarioUtil extends Tax
{
    private TaxCalculationInterimResult taxCalculationInterimResult;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        this.taxCalculationInterimResult = new TaxCalculationInterimResult();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCalculationInterimResult</Name>
				<Source><![CDATA[
    public TaxCalculationInterimResult getTaxCalculationInterimResult()
    {
        return this.taxCalculationInterimResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossUnitTaxAmounts</Name>
				<Source><![CDATA[
    public container getGrossUnitTaxAmounts()
    {
        return this.grossUnitTaxAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmountExclTax</Name>
				<Source><![CDATA[
    public TaxCalculationInterimResult baseAmountExclTax(TaxGroup                 _taxGroup,
                                                        TaxItemGroup             _taxItemGroup,
                                                        TransDate                _taxDate,
                                                        CurrencyCode             _sourceCurrencyCode,
                                                        AmountCur                _baseAmountCur,
                                                        TaxModuleType            _taxModuleType,
                                                        TaxBase                  _baseQty                = 0,
                                                        UnitOfMeasureSymbol      _baseUnit               = '',
                                                        ItemId                   _itemId                 = '',
                                                        TaxDirection             _taxDirection           = TaxDirection::OutgoingTax,
                                                        Percent                  _cashDiscPercent        = 0,
                                                        boolean                  _rounding               = true,
                                                        AmountCur                _cashDiscAmount         = 0,
                                                        ExchRatesTriangulation   _exchRatesTriangulation = UnknownNoYes::Unknown,
                                                        ExchRate                 _exchRate               = 0,
                                                        ExchRate                 _exchRateSecond         = 0,
                                                        boolean                  _calculateAmountByUnit  = true)
    {
        TaxGroupData    taxGroupData;
        TaxOnItem       taxOnItem;
        TmpTaxWorkTrans tmpTaxWorkTrans;
        TaxBase         baseAmountExclTax;

        // <GIN>
        boolean         taxesMarked = TaxParameters::checkTaxParameters_IN();
        // </GIN>

        if (_taxDate == dateNull())
        {
            _taxDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        while select TaxGroup, TaxCode, ExemptTax, UseTax, IntracomVAT from taxGroupData
            where taxGroupData.TaxGroup     == _taxGroup
            join TaxItemGroup, TaxCode from taxOnItem
            where taxOnItem.TaxItemGroup    == _taxItemGroup     &&
                  taxOnItem.TaxCode         == taxGroupData.TaxCode
        {
            // <GIN>
            if (taxesMarked)
            {
                tmpTaxWorkTrans.CompanyId_IN        = curext();
            }
            // </GIN>

            tmpTaxWorkTrans.TransDate           = _taxDate;
            tmpTaxWorkTrans.CalculationDate     = _taxDate;
            tmpTaxWorkTrans.TaxCode             = taxGroupData.TaxCode;
            tmpTaxWorkTrans.TaxDirection        = Tax::determineTaxDirection(_taxModuleType, taxGroupData, _taxDirection);
            tmpTaxWorkTrans.Source              = _taxModuleType;
            tmpTaxWorkTrans.SourceCurrencyCode  = _sourceCurrencyCode;
            tmpTaxWorkTrans.ExemptTax           = taxGroupData.ExemptTax;
            tmpTaxWorkTrans.Company             = this.getCompany();

            tmpTaxWorkTrans.insert();
        }

        this.tmpTaxWorkTrans(tmpTaxWorkTrans);
        this.parmTaxDate(_taxDate);
        this.setCashDiscount(_cashDiscPercent, _cashDiscAmount);
        this.setExchRates(_sourceCurrencyCode, _exchRate, _exchRateSecond, _exchRatesTriangulation);

        baseAmountExclTax = this.amountExclTax(_baseAmountCur,
                                                _rounding,
                                                _calculateAmountByUnit,
                                                _baseQty,
                                                _baseUnit,
                                                _itemId);

        this.getTaxCalculationInterimResult().setTaxObject(this);

        this.getTaxCalculationInterimResult().setTaxTotalWithTaxAmountByUnit(conPeek(this.getGrossUnitTaxAmounts(),1));
        this.getTaxCalculationInterimResult().setGrossTaxAmountForTaxAmountByUnit(conPeek(this.getGrossUnitTaxAmounts(),2));
        this.getTaxCalculationInterimResult().setTaxAmountByUnit(conPeek(this.getGrossUnitTaxAmounts(),3));
        this.getTaxCalculationInterimResult().setBaseAmountExclTax(baseAmountExclTax);

        return this.getTaxCalculationInterimResult();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>