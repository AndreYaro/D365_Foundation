<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplBalanceClose_Pay_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplBalanceClose_Pay_RU extends EmplBalanceClose_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoPosting</Name>
				<Source><![CDATA[
    protected void autoPosting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerEmplTrans</Name>
				<Source><![CDATA[
    private RecId createLedgerEmplTrans(RPayTrans _payTrans)
    {
        EmplVoucher_RU            emplVoucher;
        EmplTrans_RU              emplTrans;
        LedgerVoucher             ledgerVoucher;
        LedgerBondClient_RU       ledgerBondClient;
        TransactionTxt            transactionTxt;
        NumberSeq                 numberSeq;
        LedgerVoucherTransObject  ledgerVoucherTransObject;
        CurrencyExchangeHelper    exchangeRateHelper;

        numberSeq  = NumberSeq::newGetVoucher(EmplParameters_RU::numRefEmplClosingVoucher());

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                     SysModule::Employee_RU,
                                                     numberSeq.parmVoucherSequenceCode());

        ledgerVoucher.addVoucher(LedgerVoucherObject::newVoucher(numberSeq.voucher(),
                                                                 transDate,
                                                                 SysModule::Employee_RU,
                                                                 LedgerTransType::Payroll,
                                                                 NoYes::No,
                                                                 CurrentOperationsTax::Current));

        ledgerBondClient = ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();

        transactionTxt = TransactionTxt::construct(LedgerTransTxt::PayrollUpdateLedger,
                                            CompanyInfo::languageId(),
                                            transDate,
                                            "",
                                            ledgerVoucher.lastVoucher(),
                                            _payTrans.Emplid,
                                            _payTrans.PayCtype);

        ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transactionTxt.txt());

        emplVoucher = new EmplVoucher_RU(ledgerVoucher,
                                         emplId,
                                         -totalAmount,
                                         currencyCode,
                                         LedgerTransTxt::PayrollUpdateLedger,
                                         0,
                                         postingProfile ? postingProfile : emplParameters.PostingProfile);

        emplVoucher.setSourceTable(_payTrans);

        emplVoucher.post(emplTrans,
                         NoYes::No,
                         UnknownNoYes::Unknown,
                         NoYes::Yes);

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                     ledgerVoucher.findLedgerVoucherObject().parmAccountingDate());

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucher.findLedgerVoucherObject(),
                                                                                                LedgerPostingType::PayrollDebitAccount,
                                                                                                _payTrans. OffsetLedgerDimension,
                                                                                                currencyCode,
                                                                                                totalAmount,
                                                                                                exchangeRateHelper);

        ledgerVoucherTransObject.parmSourceTableId(_payTrans.TableId);
        ledgerVoucherTransObject.parmSourceRecId(_payTrans.RecId);
        ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
        ledgerVoucher.addTrans(ledgerVoucherTransObject);

        if (ledgerBondClient)
        {
            ledgerBondClient.bondLastVRef2CurrentLog();
            ledgerBondClient.removeCurrentLogObject();
        }

        ledgerVoucher.end();

        info(strfmt("@SYS9799", ledgerVoucher.lastVoucher()));

        return emplVoucher.parmEmplRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTable</Name>
				<Source><![CDATA[
    protected boolean createTable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected boolean createTrans()
    {
        RPayTrans       payTrans;
        EmplTrans_RU    emplTrans;
        ReportPeriod_RU payPeriod = RPayParameters::payPeriod();
        RPayCostType    costType  = totalAmount < 0                    ?
                                    emplParameters.PayCloseCostTypeAdd :
                                    emplParameters.PayCloseCostTypeDeduct;

        super();

        if (! costType || ! RPayTable::exist(costType))
            throw error("@RUP32");

        payTrans.clear();

        payTrans.Amount             = CurrencyExchangeHelper::amountCur2MST(-totalAmount, currencyCode, 0, transDate);
        payTrans.Emplid                 = emplId;
        payTrans.PayCtype               = costType;
        payTrans.PayPeriod              = payPeriod > transDate ? payPeriod : endmth(transDate);
        payTrans.SourceDate             = payPeriod;
        payTrans.CorrectedPeriod        = payPeriod;
        payTrans.CorrectedPeriod        = payPeriod;
        payTrans.TransDate              = transDate;
        payTrans.OffsetAccountType      = LedgerJournalACType::Ledger;
        payTrans.OffsetDefaultDimension = RPayTrans::createEmployeeDefaultDimension(0, emplId);
        payTrans.OffsetLedgerDimension  = RPayTrans::createEmployeeLedgerDimension(emplParameters.PayCloseLedgerDimension, 0, emplId);
        payTrans.AccountType            = LedgerJournalACType::Ledger;
        payTrans.HrmOrganisationId      = RPayHistory::getHistoryLineByDate(payTrans.Emplid, payTrans.TransDate).HrmOrganizationId;
        payTrans.insert();

        emplTrans = EmplTrans_RU::findRecId(this.createLedgerEmplTrans(payTrans));

        payTrans.DefaultDimension = RPayTrans::createEmployeeDefaultDimension(0, emplId);
        payTrans.LedgerDimension  = RPayTrans::createEmployeeLedgerDimension(emplTrans.LedgerDimension, 0, emplId);
        payTrans.SourceTableId    = emplTrans.TableId;
        payTrans.SourceRecId      = emplTrans.RecId;

        payTrans.update();

        return payTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialogAutoPosting.enabled(false);
        dialogAutoPosting.value(NoYes::Yes);
        dialogAutoPosting.allowEdit(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfo</Name>
				<Source><![CDATA[
    protected void showInfo()
    {
        info("@RUP379");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RUP58";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EmplBalanceClose_RU::execute(_args, new EmplBalanceClose_Pay_RU());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
