<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatTransferEngineByTaxId</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Tyhe class <c>IntrastatTransferEngineByTaxId</c> represents the functionality of intrastat transfer by multiple tax id.
/// </summary>
public class IntrastatTransferEngineByTaxId extends IntrastatTransfer
{
    #ISOCountryRegionCodes

    private const str IntrastatByMultipleTaxIdFeatureReference = 'EUR-00029';

    private TaxRegistrationRecId taxRegistrationRecId;
    private IntrastatTransferTaxIdCurrencyRule currencyRule  = IntrastatTransferTaxIdCurrencyRule::construct();
    private LogisticsAddressCountryRegionISOCode taxRegistrationAddressISOCode;
    private LogisticsPostalAddress taxRegistrationAddress;
    private TaxRegistration taxRegistration;
    private TaxRegistrationTypeApplicabilityRule applicabilityRule;
    protected CurrencyCode companyStandardCurrency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>featureRun</Name>
				<Source><![CDATA[
    protected void featureRun(str _funcName)
    {
        GlobalizationInstrumentationHelper::featureRun(IntrastatByMultipleTaxIdFeatureReference, _funcName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompanyInfoCountryRegion</Name>
				<Source><![CDATA[
    protected boolean validateCompanyInfoCountryRegion(LogisticsAddressCountryRegionId _countryRegion)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRegistrationRecID</Name>
				<Source><![CDATA[
    public TaxRegistrationRecId parmTaxRegistrationRecID(TaxRegistrationRecId _taxRegistrationRecId = taxRegistrationRecId)
    {
        if (taxRegistrationRecId != _taxRegistrationRecId)
        {
            this.inititalizeFromTaxRegistrationRecId(_taxRegistrationRecId);

            if (LogisticsAddressCountryRegion::find(applicabilityRule.CountryRegionId).ISOcode != this.taxRegistrationAddressISOCode)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        return taxRegistrationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRanges</Name>
				<Source><![CDATA[
    protected void addRanges(QueryBuildDataSource _qbds, TableId _tableId)
    {
        switch (_tableId)
        {
            case tableNum(CustInvoiceJour):
                this.addRange(_qbds, fieldNum(CustInvoiceJour, TaxId));
                break;

            case tableNum(CustPackingSlipJour):
                this.addRange(_qbds, fieldNum(CustPackingSlipJour, TaxId));;
                break;

            case tableNum(InventTransferJour):
                this.addRange(_qbds, fieldNum(InventTransferJour, TaxId));
                break;

            case tableNum(ProjInvoiceJour):
                this.addRange(_qbds, fieldNum(ProjInvoiceJour, TaxId));
                break;

            case tableNum(VendInvoiceJour):
                this.addRange(_qbds, fieldNum(VendInvoiceJour, TaxId));
                break;

            case tableNum(VendPackingSlipJour):
                this.addRange(_qbds, fieldNum(VendPackingSlipJour, TaxId));
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRange</Name>
				<Source><![CDATA[
    private void addRange(QueryBuildDataSource _qbds, RefFieldId _fieldId)
    {
        _qbds.allowAdd(QueryAllowAdd::NoFields);
        QueryBuildRange qbr = findOrCreateRange_W(_qbds, _fieldId);
        qbr.value(queryValue(taxRegistrationRecId));
        qbr.status(RangeStatus::Hidden);
        _qbds.name('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IntrastatTransferEngineByTaxId construct(LogisticsAddressCountryRegionISOCode _countryISOCode)
    {
        IntrastatTransferEngineByTaxId intrastatTransferEngineByTaxId = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(IntrastatTransferEngineByTaxId),
            new IntrastatCountryRegionByTaxIdAttribute(_countryISOCode));

        intrastatTransferEngineByTaxId.taxRegistrationAddressISOCode = _countryISOCode;
        intrastatTransferEngineByTaxId.companyStandardCurrency = CompanyInfoHelper::standardCurrency();

        return intrastatTransferEngineByTaxId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTaxRegistrationRecId</Name>
				<Source><![CDATA[
    internal static IntrastatTransferEngineByTaxId newFromTaxRegistrationRecId(TaxRegistrationRecId _taxRegistrationRecId)
    {
        if (!_taxRegistrationRecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return IntrastatTransferEngineByTaxId::newFromTaxRegistration(TaxRegistration::find(_taxRegistrationRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTaxRegistration</Name>
				<Source><![CDATA[
    internal static IntrastatTransferEngineByTaxId newFromTaxRegistration(TaxRegistration _taxRegistration)
    {
        if (!_taxRegistration)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        TaxRegistrationTypeApplicabilityRule applicabilityRule = TaxRegistrationTypeApplicabilityRule::find(_taxRegistration.TaxRegistrationTypeApplicabilityRule);

        IntrastatTransferEngineByTaxId intrastatTransferEngineByTaxId = IntrastatTransferEngineByTaxId::construct(
            LogisticsAddressCountryRegion::find(applicabilityRule.CountryRegionId).ISOcode);

        intrastatTransferEngineByTaxId.inititalizeFromTaxRegistration(_taxRegistration, applicabilityRule);

        return intrastatTransferEngineByTaxId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCompanyCurrencyAmounts</Name>
				<Source><![CDATA[
    protected void updateCompanyCurrencyAmounts(Intrastat _intrastat)
    {
        CurrencyCode transactionCurrencyCode = _intrastat.CurrencyCode;

        CurrencyCode intrastatCurrencyCode = currencyRule.getCurrencyFromTaxRegistration(taxRegistrationRecId, transactionCurrencyCode);

        intrastatCurrencyCode = intrastatCurrencyCode ? intrastatCurrencyCode : companyStandardCurrency;
        
        if (intrastatCurrencyCode != companyStandardCurrency)
        {
            _intrastat.CompanyIntrastatReportCurrencyCode = intrastatCurrencyCode;

            IntrastatTransferUpdateAmounts intrastatTransferUpdateAmounts = IntrastatTransferUpdateAmounts::constructFromIntrastat(_intrastat);

            if (_intrastat.DebCredType == ModuleInventCustVend::Invent)
            {
                intrastatTransferUpdateAmounts.recalcCompanyAmountsFromMST();
            }
            else
            {
                intrastatTransferUpdateAmounts.recalcCompanyAmountsFromCur();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preserveOrigValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicate values into dedicated fields.
    /// </summary>
    /// <param name = "_intrastat"></param>
    protected void preserveOrigValues(Intrastat _intrastat)
    {
        IntrastatTransferUpdateAmounts::presaveOrigValues(_intrastat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postIntrastatInit</Name>
				<Source><![CDATA[
    protected void postIntrastatInit(Intrastat _intrastat)
    {
        this.initCounty(_intrastat);
        this.preserveOrigValues(_intrastat);
        this.updateCompanyCurrencyAmounts(_intrastat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the currency amount for an Intrastat record.
    /// </summary>
    /// <param name = "_intrastat">An Intrastat record.</param>
    protected void updateTransactionCurrencyAmount(Intrastat _intrastat)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustInvoiceTrans(
        CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        CustInvoiceJour_Intrastat _custInvoiceJour_Intrastat = null,
        CustInvoiceTrans_Intrastat _custInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_custInvoiceJour, _custInvoiceTrans, _custInvoiceJour_Intrastat, _custInvoiceTrans_Intrastat);

        intrastat.TaxId = _custInvoiceJour.TaxId;
        intrastat.IntrastatSpecMove_CZ = _custInvoiceTrans_Intrastat.SpecialMovement_CZ;

        this.postIntrastatInit(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustPckSlpTrans(
        CustPackingSlipJour _custPackingSlipJour,
        CustPackingSlipTrans _custPackingSlipTrans,
        CustPackingSlipJour_Intrastat _custPackingSlipJour_Intrastat = null,
        CustPackingSlipTrans_Intrastat _custPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_custPackingSlipJour, _custPackingSlipTrans, _custPackingSlipJour_Intrastat, _custPackingSlipTrans_Intrastat);

        intrastat.TaxId = _custPackingSlipJour.TaxId;
        intrastat.IntrastatSpecMove_CZ = _custPackingSlipTrans_Intrastat.SpecialMovement_CZ;

        this.postIntrastatInit(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromFreeCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromFreeCustInvoiceTrans(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        Intrastat intrastat = super(_custInvoiceJour, _custInvoiceTrans);

        intrastat.TaxId = _custInvoiceJour.TaxId;
        
        if (taxRegistrationAddressISOCode == #isoDE && intrastat.OrderType == IntrastatOrderType::Return)
        {
            intrastat.StatisticalAdjustmentAmount = intrastat.AmountMST;
            intrastat.AmountMST  = 0;
            intrastat.InvoiceMarkupMST = 0;
        }

        this.postIntrastatInit(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromProjInvoiceItem</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromProjInvoiceItem(ProjInvoiceJour _projInvoiceJour, ProjInvoiceItem _projInvoiceItem)
    {
        Intrastat intrastat = super(_projInvoiceJour, _projInvoiceItem);

        intrastat.TaxId = _projInvoiceJour.TaxId;

        this.postIntrastatInit(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendInvoiceIntrastat</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendInvoiceIntrastat(VendInvoiceJour _vendInvoiceJour, VendInvoiceIntrastat _vendInvoiceIntrastat)
    {
        Intrastat intrastat = super(_vendInvoiceJour, _vendInvoiceIntrastat);

        intrastat.TaxId = _vendInvoiceJour.TaxId;

        this.postIntrastatInit(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendInvoiceTrans(
        VendInvoiceJour _vendInvoiceJour,
        VendInvoiceTrans _vendInvoiceTrans,
        VendInvoiceJour_Intrastat _vendInvoiceJour_Intrastat = null,
        VendInvoiceTrans_Intrastat _vendInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_vendInvoiceJour, _vendInvoiceTrans, _vendInvoiceJour_Intrastat, _vendInvoiceTrans_Intrastat);

        intrastat.TaxId = _vendInvoiceJour.TaxId;
        intrastat.IntrastatSpecMove_CZ = _vendInvoiceTrans_Intrastat.SpecialMovement_CZ;
        intrastat.State = _vendInvoiceTrans.DestState;

        this.postIntrastatInit(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendPckSlpTrans(
        VendPackingSlipJour _vendPackingSlipJour,
        VendPackingSlipTrans _vendPackingSlipTrans,
        VendPackingSlipJour_Intrastat vendPackingSlipJour_Intrastat = null,
        VendPackingSlipTrans_Intrastat vendPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_vendPackingSlipJour, _vendPackingSlipTrans, vendPackingSlipJour_Intrastat, vendPackingSlipTrans_Intrastat);

        intrastat.TaxId = _vendPackingSlipJour.TaxId;
        intrastat.IntrastatSpecMove_CZ = vendPackingSlipTrans_Intrastat.SpecialMovement_CZ;

        this.postIntrastatInit(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromInventTransferJour</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromInventTransferJour(
        IntrastatDirection      _direction,
        InventTransferJour      _inventTransferJour,
        InventTransferJourLine  _inventTransferJourLine)
    {
        Intrastat intrastat = super(_direction, _inventTransferJour, _inventTransferJourLine);

        intrastat.TaxId = _inventTransferJour.TaxId;
        intrastat.IntrastatSpecMove_CZ = _inventTransferJourLine.IntrastatSpecMove_CZ;
        intrastat.VATNum = TaxRegistration::find(_inventTransferJour.PartyTaxID).RegistrationNumber;

        this.postIntrastatInit(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInEU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the relationship between delivery country and current country is valid for intrastat transfer.
    /// </summary>
    /// <param name="_countryRegionId">
    /// The <c>LogisticsAddressCountryRegionId</c> string, that identifies the Country/region to which the address is related.
    /// </param>
    /// <returns>
    /// true, if the country region type is EU; otherwise, false.
    /// </returns>
    protected boolean isInEU(LogisticsAddressCountryRegionId _countryRegionId)
    {
        return super(_countryRegionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsInEU</Name>
				<Source><![CDATA[
    protected boolean getIsInEU(LogisticsAddressCountryRegionId _countryRegionId)
    {
        return (applicabilityRule.CountryRegionId != _countryRegionId && 
            IntrastatCountryRegionParameters::isInEU(_countryRegionId) && 
            IntrastatCountryRegionParameters::isInEU(applicabilityRule.CountryRegionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountryRegionStateInEU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the relationship between delivery country and state and current country and state is valid for intrastat transfer.
    /// </summary>
    /// <param name = "_deliveryAddress">
    /// The delivery logistics postal address.
    /// </param>
    /// <returns>
    /// true,  if the country region type is EU; otherwise, false.
    /// </returns>
    protected boolean isCountryRegionStateInEU(LogisticsPostalAddress _deliveryAddress)
    {
        return super(_deliveryAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsCountryRegionStateInEU</Name>
				<Source><![CDATA[
    protected boolean getIsCountryRegionStateInEU(LogisticsPostalAddress _deliveryAddress)
    {
        if (FeatureStateProvider::isFeatureEnabled(IntrastatCountryRegionStateFeature::instance()))
        {
            LogisticsPostalAddress taxRegistrationAddressLocal = this.taxRegistrationAddress();

            return (taxRegistrationAddressLocal.CountryRegionId != _deliveryAddress.CountryRegionId
                && IntrastatCountryRegionParameters::isCountryRegionStateInEU(_deliveryAddress)
                && IntrastatCountryRegionParameters::isCountryRegionStateInEU(taxRegistrationAddressLocal));
        }

        return this.isInEU(_deliveryAddress.CountryRegionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importToBeIncludedInventTransferJour</Name>
				<Source><![CDATA[
    protected boolean importToBeIncludedInventTransferJour(InventTransferJour _inventTransferJour, InventTransferJourLine _inventTransferJourLine)
    {
        if (_inventTransferJourLine.QtyReceived < _inventTransferJourLine.QtyScrapped)
        {
            return false;
        }

        LogisticsPostalAddress postalAddressTo = this.postalAddress(_inventTransferJour.ToPostalAddress);
        LogisticsPostalAddress postalAddressFrom = this.postalAddress(_inventTransferJour.FromPostalAddress);
        VendTable vendTable = this.getVendTable(this.getVendAccountFromInventLocationCache(_inventTransferJour.InventLocationIdFrom));

        transportDocumentPostalAddress = postalAddressTo;
        boolean importToBeIncludedTo = this.importToBeIncluded(vendTable.AccountNum, postalAddressTo.CountryRegionId);
        transportDocumentPostalAddress = postalAddressFrom;
        boolean importToBeIncludedFrom = this.importToBeIncluded(vendTable.AccountNum, postalAddressFrom.CountryRegionId);

        transportDocumentPostalAddress = null;

        if ((!importToBeIncludedTo && _inventTransferJour.UpdateType == InventTransferUpdateType::Shipment)
            || (!importToBeIncludedFrom && _inventTransferJour.UpdateType == InventTransferUpdateType::Receive)
            || postalAddressFrom.CountryRegionId == postalAddressTo.CountryRegionId)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToBeIncludedInventTransferJour</Name>
				<Source><![CDATA[
    protected boolean exportToBeIncludedInventTransferJour(InventTransferJour _inventTransferJour, InventTransferJourLine _inventTransferJourLine)
    {
        if (_inventTransferJourLine.QtyShipped == 0)
        {
            return false;
        }

        LogisticsPostalAddress postalAddressTo = this.postalAddress(_inventTransferJour.ToPostalAddress);
        LogisticsPostalAddress postalAddressFrom = this.postalAddress(_inventTransferJour.FromPostalAddress);

        transportDocumentPostalAddress = postalAddressTo;
        boolean exportToBeIncludedTo = this.exportToBeIncluded(postalAddressTo.CountryRegionId);
        transportDocumentPostalAddress = postalAddressFrom;
        boolean exportToBeIncludedFrom = this.exportToBeIncluded(postalAddressFrom.CountryRegionId);

        transportDocumentPostalAddress = null;

        if ((!exportToBeIncludedTo && _inventTransferJour.UpdateType == InventTransferUpdateType::Shipment)
            || (!exportToBeIncludedFrom && _inventTransferJour.UpdateType == InventTransferUpdateType::Receive)
            || postalAddressFrom.CountryRegionId == postalAddressTo.CountryRegionId)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToBeIncludedCustPckSlipTrans</Name>
				<Source><![CDATA[
    protected boolean exportToBeIncludedCustPckSlipTrans(CustPackingSlipJour _custPackingSlipJour, CustPackingSlipTrans _custPackingSlipTrans)
    {
        boolean ret;

        SalesTable salestable = SalesTable::find(_custPackingSlipTrans.SalesId);

        if(!(salestable.InterCompanyDirectDeliveryOrig && salestable.InterCompanyOrder)
            || !(taxRegistrationAddressISOCode == #isoFR))
        {
            ret = super(_custPackingSlipJour, _custPackingSlipTrans);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToBeIncludedDropShip</Name>
				<Source><![CDATA[
    protected boolean exportToBeIncludedDropShip(LogisticsAddressCountryRegionId _countryRegionOfShipment, LogisticsAddressCountryRegionId _dlvCountryRegion)
    {
        if (taxRegistrationAddressISOCode == #isoFR)
        {
            return (this.isDomesticCache(_countryRegionOfShipment)
                || IntrastatCountryRegionParameters::isCountryRegionStateInEUByCountryAndStateId(_countryRegionOfShipment, stateIdOfShipment))
                    && this.isCountryRegionStateInEU(deliveryPostalAddress);
        }

        return super(_countryRegionOfShipment, _dlvCountryRegion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTransferJournalExport</Name>
				<Source><![CDATA[
    protected boolean validateInventTransferJournalExport(InventTransferJour _inventTransferJour, IntrastatDirection _direction)
    {
        boolean export = IntrastatTransfer::isInventTransferJourUpdateTypeForExport(_inventTransferJour.UpdateType);
        
        if (export != (_direction == IntrastatDirection::Export) ||
            !export != (_direction == IntrastatDirection::Import))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCounty</Name>
				<Source><![CDATA[
    private void initCounty(Intrastat _intrastat)
    {
        InventLocation inventLocation;

        switch (_intrastat.TransTableId)
        {
            case tablenum(CustInvoiceTrans):
                _intrastat.County = CustInvoiceTrans::findRecId(_intrastat.TransRecId).OrigCountryRegionId;
                if (!_intrastat.County)
                {
                    inventLocation = InventLocation::find(InventDim::find(CustInvoiceTrans::findRecId(_intrastat.TransRecId).InventDimId).InventLocationId);
                }
                break;

            case tablenum(CustPackingSlipTrans):
                _intrastat.County = CustPackingSlipTrans::findRecId(_intrastat.TransRecId).OrigCountryRegionId;
                if (!_intrastat.County)
                {
                    inventLocation = InventLocation::find(InventDim::find(CustPackingSlipTrans::findRecId(_intrastat.TransRecId).InventDimId).InventLocationId);
                }
                break;

            case tablenum(VendInvoiceTrans):
                _intrastat.County = VendInvoiceTrans::findRecId(_intrastat.TransRecId).DestCounty;
                if (!_intrastat.County)
                {
                    inventLocation = InventLocation::find(InventDim::find(VendInvoiceTrans::findRecId(_intrastat.TransRecId).InventDimId).InventLocationId);
                }
                break;

            case tablenum(VendPackingSlipTrans):
                _intrastat.County = VendPackingSlipTrans::findRecId(_intrastat.TransRecId).DestCounty;
                if (!_intrastat.County)
                {
                    inventLocation = InventLocation::find(InventDim::find(VendPackingSlipTrans::findRecId(_intrastat.TransRecId).InventDimId).InventLocationId);
                }
                break;

            case tableNum(InventTransferJourLine):
                _intrastat.County = InventTransferJourLine::findRecId(_intrastat.TransRecId).OrigCountyId;
                if (!_intrastat.County)
                {
                    InventTransferJourLine inventTransferJourLine = InventTransferJourLine::findRecId(_intrastat.TransRecId);
                    InventTransferJour inventTransferJour = InventTransferJour::find(inventTransferJourLine.TransferId, inventTransferJourLine.VoucherId);

                    if (inventTransferJour.UpdateType == InventTransferUpdateType::Receive)
                    {
                        _intrastat.County = this.postalAddress(inventTransferJour.ToPostalAddress).County;
                    }
                    else
                    {
                        _intrastat.County = this.postalAddress(inventTransferJour.FromPostalAddress).County;;
                    }
                }
                break;
        }

        if (!_intrastat.County && inventLocation)
        {
            _intrastat.County = inventLocation.logisticsPostalAddress().County;
        }
        
        if (!_intrastat.County)
        {
            _intrastat.County = this.taxRegistrationAddress().County;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRegistrationAddress</Name>
				<Source><![CDATA[
    protected LogisticsPostalAddress taxRegistrationAddress()
    {
        if (!taxRegistrationAddress)
        {
            DirPartyLocation partyLocation = DirPartyLocation::findRec(taxRegistration.DirPartyLocation);
            taxRegistrationAddress = LogisticsPostalAddress::findByLocation(partyLocation.Location);
        }

        return taxRegistrationAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inititalizeFromTaxRegistrationRecId</Name>
				<Source><![CDATA[
    private void inititalizeFromTaxRegistrationRecId(TaxRegistrationRecId _taxRegistrationRecId)
    {
        if (!_taxRegistrationRecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.inititalizeFromTaxRegistration(TaxRegistration::find(_taxRegistrationRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inititalizeFromTaxRegistration</Name>
				<Source><![CDATA[
    private void inititalizeFromTaxRegistration(
        TaxRegistration _taxRegistration, 
        TaxRegistrationTypeApplicabilityRule _applicabilityRule = TaxRegistrationTypeApplicabilityRule::find(_taxRegistration.TaxRegistrationTypeApplicabilityRule))
    {
        if (!_taxRegistration)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        taxRegistration = _taxRegistration;
        taxRegistrationRecId = taxRegistration.RecId;
        applicabilityRule = _applicabilityRule;

        taxRegistrationAddress.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMiscChargesPerKgEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isMiscChargesPerKgEnabled(Intrastat _intrastat)
    {
        return super(_intrastat) &&
            EUSalesListReportingParameter::findByCountryRegionIdAndReport(
                this.taxRegistrationAddress().CountryRegionId, 
                ReportingParameterReportCallerName::Intrastat).MiscellaneousChargesPerKilogram;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>