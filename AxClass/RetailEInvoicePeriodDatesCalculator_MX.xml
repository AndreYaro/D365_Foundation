<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEInvoicePeriodDatesCalculator_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEInvoicePeriodDatesCalculator_MX</c> class calculates dates for the period.
/// </summary>
internal final class RetailEInvoicePeriodDatesCalculator_MX
{
    private RetailEInvoicePeriod_MX period;
    private Date baseDate;
    private PreferredLocale preferredLocale;
    private PeriodStart periodStart;
    private PeriodEnd periodEnd;
    private RetailEInvoiceMonth_MX month;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs calculator.
    /// </summary>
    /// <param name = "_period">The period.</param>
    /// <param name = "_baseDate">The base date.</param>
    /// <returns>The class instance.</returns>
    internal static RetailEInvoicePeriodDatesCalculator_MX calculate(RetailEInvoicePeriod_MX _period, Date _baseDate)
    {
        RetailEInvoicePeriodDatesCalculator_MX calculator = new RetailEInvoicePeriodDatesCalculator_MX();
        calculator.period = _period;
        calculator.preferredLocale = (new xSession()).PreferredLocale();
        calculator.baseDate = _baseDate ? _baseDate : DateTimeUtil::getToday(DateTimeUtil::getCompanyTimeZone());

        return calculator.calculatePeriodDates();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodStart</Name>
				<Source><![CDATA[
    internal PeriodStart getPeriodStart()
    {
        return periodStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodEnd</Name>
				<Source><![CDATA[
    internal PeriodEnd getPeriodEnd()
    {
        return periodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonth</Name>
				<Source><![CDATA[
    internal RetailEInvoiceMonth_MX getMonth()
    {
        return month;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePeriodDates</Name>
				<Source><![CDATA[
    private RetailEInvoicePeriodDatesCalculator_MX calculatePeriodDates()
    {
        switch (period)
        {
            case RetailEInvoicePeriod_MX::Daily:
                return this.calculateDaily();

            case RetailEInvoicePeriod_MX::Weekly:
                return this.calculateWeekly();

            case RetailEInvoicePeriod_MX::BiWeekly:
                return this.calculateBiWeekly();

            case RetailEInvoicePeriod_MX::Monthly:
                return this.calculateMonthly();

            case RetailEInvoicePeriod_MX::BiMonthly:
                return this.calculateBiMonthly();

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDaily</Name>
				<Source><![CDATA[
    private RetailEInvoicePeriodDatesCalculator_MX calculateDaily()
    {
        periodStart = baseDate;
        periodEnd = baseDate;

        month = mthOfYr(baseDate);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWeekly</Name>
				<Source><![CDATA[
    private RetailEInvoicePeriodDatesCalculator_MX calculateWeekly()
    {
        periodStart = DateTimeUtil::getStartOfWeekDate(preferredLocale, baseDate);
        periodEnd = DateTimeUtil::getEndOfWeekDate(preferredLocale, baseDate);

        month = mthOfYr(baseDate);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBiWeekly</Name>
				<Source><![CDATA[
    private RetailEInvoicePeriodDatesCalculator_MX calculateBiWeekly()
    {
        periodStart = DateTimeUtil::getStartOfWeekDate(preferredLocale, baseDate);
        periodEnd = DateTimeUtil::getEndOfWeekDate(preferredLocale,
            DateTimeUtil::date(
                DateTimeUtil::addDays(
                    DateTimeUtil::newDateTime(periodStart, 0),
                    7)));

        month = mthOfYr(baseDate);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMonthly</Name>
				<Source><![CDATA[
    private RetailEInvoicePeriodDatesCalculator_MX calculateMonthly()
    {
        periodStart = dateStartMth(baseDate);
        periodEnd = dateEndMth(baseDate);

        month = mthOfYr(baseDate);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBiMonthly</Name>
				<Source><![CDATA[
    private RetailEInvoicePeriodDatesCalculator_MX calculateBiMonthly()
    {
        int monthOfYear = mthOfYr(baseDate);

        if (monthOfYear mod 2)
        {
            periodStart = dateStartMth(baseDate);
            periodEnd = dateEndMth(dateMthFwd(periodStart, 1));
        }
        else
        {
            periodStart = dateMthFwd(dateStartMth(baseDate), -1);
            periodEnd = dateEndMth(baseDate);
        }

        int monthShift = 12 - (monthOfYear div 2);
        month = any2Enum(monthOfYear + monthShift);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>