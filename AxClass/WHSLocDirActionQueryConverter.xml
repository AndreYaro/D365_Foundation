<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocDirActionQueryConverter</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSLocDirActionQueryConverter
{
    private Query query;
    private QueryName queryName;
    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertLocDirActionQueryByQueryName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query convertLocDirActionQueryByQueryName()
    {
        QueryName newQueryName = this.queryNameUseDimOfInventSum(queryName);

        if (newQueryName)
        {

            using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().locationDirectiveActivities().LocationDirectiveActionConverter(queryName, newQueryName, true))
            {
                if (this.canConvertLocDirActionQueryByQueryName())
                {
                    try
                    {
                        Query convertedQuery = this.convertQuery(newQueryName);

                        activityContext.addCustomProperty('IsQueryConverted', any2Str(true));

                        return convertedQuery;
                    }
                    catch
                    {
                        this.writeQueryLog(activityContext, WHSLocDirActionQueryConverterLogType::Exception);
                    }
                }
                else
                {
                    this.writeQueryLog(activityContext, WHSLocDirActionQueryConverterLogType::CannotConvert);
                }
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQuery</Name>
				<Source><![CDATA[
    private Query convertQuery(QueryName _newQueryName)
    {
        boolean isWHSLocDirActionQueryConverterCopyLinksFlightEnabled = WHSLocDirActionQueryConverterServiceV2Flight::instance().isEnabled();

        Query convertedQuery = this.createQueryWithoutRangeAndOrderByFields(_newQueryName);
        int dataSourceCount = query.dataSourceCount();
        for (int dataSourceNo = 1; dataSourceNo <= dataSourceCount; dataSourceNo++)
        {
            QueryBuildDataSource dataSource = query.dataSourceNo(dataSourceNo);
            int dataSourceTable = dataSource.table();

            if (dataSourceTable == tableNum(InventDim))
            {
                this.copyRanges(query.dataSourceTable(tableNum(InventDim)), convertedQuery.dataSourceTable(tableNum(InventSum)));
                this.copyOrderByFields(query, query.dataSourceTable(tableNum(InventDim)), convertedQuery.dataSourceTable(tableNum(InventSum)));
            }
            else
            {
                QueryBuildDataSource convertedDataSource = convertedQuery.dataSourceTable(dataSourceTable);

                if (convertedDataSource)
                {
                    this.setJoinMode(dataSource, convertedDataSource);
                    this.copyRanges(dataSource, convertedDataSource);
                    this.copyOrderByFields(query, dataSource, convertedDataSource);
                }
                else
                {
                    if (this.addAdditionalDataSourceAllowed(dataSource))
                    {
                        QueryBuildDataSource convertedLocationDataSource = convertedQuery.dataSourceTable(tableNum(WMSLocation));
                        QueryBuildDataSource copyToDataSource = convertedLocationDataSource.addDataSource(dataSource.table());

                        this.setJoinMode(dataSource, copyToDataSource);
                        this.setRelationsAndFetchMode(dataSource, copyToDataSource);

                        if (isWHSLocDirActionQueryConverterCopyLinksFlightEnabled)
                        {
                            this.copyLinks(dataSource, copyToDataSource);
                        }

                        this.copyRanges(dataSource, copyToDataSource);
                    }
                }
            }
        }

        this.copyQueryFilterFields(query, convertedQuery);

        return convertedQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryWithoutRangeAndOrderByFields</Name>
				<Source><![CDATA[
    private Query createQueryWithoutRangeAndOrderByFields(QueryName _queryName)
    {
        Query convertedQuery = new Query(_queryName);

        int dataSourceCount = convertedQuery.dataSourceCount();
        for (int dataSourceNo = 1; dataSourceNo <= dataSourceCount; dataSourceNo++)
        {
            convertedQuery.dataSourceNo(dataSourceNo).clearRanges();
        }

        convertedQuery.clearOrderBy();

        return convertedQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLinks</Name>
				<Source><![CDATA[
    private void copyLinks(QueryBuildDataSource _fromDataSource, QueryBuildDataSource _toDataSource)
    {
        int     targetCount = _toDataSource.linkCount();
        int     sourceCount = _fromDataSource.linkCount();      
        Set     sourceLinkExistsOnTarget = new Set(Types::Integer);

        for (int targetCounter = 1; targetCounter <= targetCount; targetCounter++)
        {
            QueryBuildLink targetLink = _toDataSource.link(targetCounter);

            for (int sourceCounter = 0; sourceCounter < sourceCount; sourceCounter++)
            {
                int actual = ((targetCounter + sourceCounter - 1) mod sourceCount) + 1;
                QueryBuildLink sourceLink = _fromDataSource.link(actual);

                if (targetLink.joinRelation() == sourceLink.joinRelation()
                 && targetLink.table() == sourceLink.table()
                 && targetLink.field() == sourceLink.field()
                 && targetLink.relatedTable() == sourceLink.relatedTable()
                 && targetLink.relatedField() == sourceLink.relatedField())
                {
                    sourceLinkExistsOnTarget.add(actual);

                    break;
                }
            }
        }

        for (int sourceCounter = 1; sourceCounter <= sourceCount; sourceCounter++)
        {
            if (!sourceLinkExistsOnTarget.in(sourceCounter))
            {
                this.addLinkToDataSource(_toDataSource, _fromDataSource.link(sourceCounter));
            }
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLinkToDataSource</Name>
				<Source><![CDATA[
    private void addLinkToDataSource(QueryBuildDataSource _target, QueryBuildLink _link)
    {
        if (_link.field() && _link.relatedField())
        {
            _target.addLink(_link.field(), _link.relatedField());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRanges</Name>
				<Source><![CDATA[
    private void copyRanges(QueryBuildDataSource _fromDataSource, QueryBuildDataSource _toDataSource)
    {
        boolean useDimensionFieldsOnInventSum = _fromDataSource.table() == tableNum(InventDim);

        int rangeCount = _fromDataSource.rangeCount();
        for (int rangeNo = 1; rangeNo <= rangeCount; rangeNo++)
        {
            QueryBuildRange fromRange = _fromDataSource.range(rangeNo);

            QueryBuildRange toRange;

            if (useDimensionFieldsOnInventSum)
            {
                int inventSumDimensionField = InventDim::getInventSumFieldIdFromInventDimFieldId(fromRange.field());

                QueryBuildRange inventSumDimensionRange;
                
                if (fromRange.fieldArrayIndex())
                {
                    inventSumDimensionRange = _toDataSource.findRange(inventSumDimensionField, fromRange.fieldArrayIndex());
                }
                else
                {
                    inventSumDimensionRange = _toDataSource.findRange(inventSumDimensionField);
                }

                if (!inventSumDimensionRange
                    || inventSumDimensionRange.value() != fromRange.value())
                {
                    toRange = _toDataSource.addRange(inventSumDimensionField, fromRange.fieldArrayIndex(), fromRange.rangeType());
                }
            }
            else
            {
                toRange = _toDataSource.addRange(fromRange.field(), fromRange.fieldArrayIndex(), fromRange.rangeType());
            }

            if (toRange)
            {
                toRange.value(fromRange.value());
                toRange.status(fromRange.status());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyOrderByFields</Name>
				<Source><![CDATA[
    private void copyOrderByFields(
        Query _fromQuery,
        QueryBuildDataSource _fromDataSource,
        QueryBuildDataSource _toDataSource)
    {
        boolean useDimensionFieldsOnInventSum = _fromDataSource.table() == tableNum(InventDim);

        int _fromOrderByFieldCount = _fromQuery.orderByFieldCount();
        for (int _fromOrderByFieldNo = 1; _fromOrderByFieldNo <= _fromOrderByFieldCount; _fromOrderByFieldNo++)
        {
            QueryOrderByField fromOrderByField = _fromQuery.orderByField(_fromOrderByFieldNo);

            if (fromOrderByField.dataSource().table() == _fromDataSource.table())
            {
                if (useDimensionFieldsOnInventSum)
                {
                    _toDataSource.addOrderByField(InventDim::getInventSumFieldIdFromInventDimFieldId(fromOrderByField.fieldID()), fromOrderByField.direction());
                }
                else
                {
                    _toDataSource.addOrderByField(fromOrderByField.fieldID(), fromOrderByField.direction());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQueryFilterFields</Name>
				<Source><![CDATA[
    private void copyQueryFilterFields(
        Query _fromQuery,
        Query _toQuery)
    {
        int _fromQueryFilterCount = _fromQuery.queryFilterCount();
        for (int _fromQueryFilterNo = 1; _fromQueryFilterNo <= _fromQueryFilterCount; _fromQueryFilterNo++)
        {
            QueryFilter fromQueryFilter = _fromQuery.queryFilter(_fromQueryFilterNo);
            QueryFilter toQueryFilter;

            if (fromQueryFilter.dataSource().table() == tableNum(InventDim))
            {
                toQueryFilter = _toQuery.addQueryFilter(_toQuery.dataSourceTable(tableNum(InventSum)), fieldId2Name(tableNum(InventSum), InventDim::getInventSumFieldIdFromInventDimFieldId(fieldName2Id(tableNum(InventDim), fromQueryFilter.field()))));
            }
            else
            {
                toQueryFilter = _toQuery.addQueryFilter(_toQuery.dataSourceTable(fromQueryFilter.dataSource().table()), fromQueryFilter.field());
            }

            toQueryFilter.value(fromQueryFilter.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJoinMode</Name>
				<Source><![CDATA[
    private void setJoinMode(
        QueryBuildDataSource _fromDataSource,
        QueryBuildDataSource _toDataSource)
    {
        if (_fromDataSource.joined())
        {
            QueryBuildDataSource fromParentDataSource = _fromDataSource.parentDataSource();

            if (fromParentDataSource
                && fromParentDataSource.table() == tableNum(InventDim)
                && fromParentDataSource.joinMode() == JoinMode::NoExistsJoin
                && _fromDataSource.joinMode() == JoinMode::ExistsJoin)
            {
                // InventDim data source removed. Changed to not exists join as on InventDim data source.
                _toDataSource.joinMode(JoinMode::NoExistsJoin);
            }
            else
            {
                _toDataSource.joinMode(_fromDataSource.joinMode());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRelationsAndFetchMode</Name>
				<Source><![CDATA[
    private void setRelationsAndFetchMode(
        QueryBuildDataSource _fromDataSource,
        QueryBuildDataSource _toDataSource)
    {
        _toDataSource.relations(_fromDataSource.relations());
        _toDataSource.fetchMode(_fromDataSource.fetchMode());        
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConvertLocDirActionQueryByQueryName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean canConvertLocDirActionQueryByQueryName()
    {
        if (this.isSpecificQuery())
        {
            return true;
        }

        Query expectedQuery = new Query(queryName);

        int expectedDataSourceCount = expectedQuery.dataSourceCount();
        int dataSourceCount = query.dataSourceCount();

        boolean canConvert = expectedQuery && (dataSourceCount >= expectedDataSourceCount);

        if (canConvert)
        {
            for (int dataSourceNo = 1; dataSourceNo <= expectedDataSourceCount; dataSourceNo++)
            {
                if (query.dataSourceNo(dataSourceNo).table() != expectedQuery.dataSourceNo(dataSourceNo).table())
                {
                    canConvert = false;
                    break;
                }
            }

            if (canConvert)
            {
                for (int dataSourceNo = expectedDataSourceCount + 1; dataSourceNo <= dataSourceCount; dataSourceNo++)
                {
                    if (!this.addAdditionalDataSourceAllowed(query.dataSourceNo(dataSourceNo)))
                    {
                        canConvert = false;
                        break;
                    }
                }
            }
        }

        return canConvert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecificQuery</Name>
				<Source><![CDATA[
    private boolean isSpecificQuery()
    {
        if (query.dataSourceCount() == 5
            && query.dataSourceNo(1).table() == tableNum(WMSLocation)
            && query.dataSourceNo(2).table() == tableNum(InventDim)
            && query.dataSourceNo(3).table() == tableNum(InventSum)
            && query.dataSourceNo(4).table() == tableNum(InventDim)
            && query.dataSourceNo(5).table() == tableNum(InventBatch))
        { 
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataSourceAllowed</Name>
				<Source><![CDATA[
    private boolean addAdditionalDataSourceAllowed(QueryBuildDataSource _dataSource)
    {
        QueryBuildDataSource parentDataSource = _dataSource.parentDataSource();

        if (parentDataSource)
        {
            if (parentDataSource.table() == tableNum(WMSLocation))
            {
                // Data sources joined to root data source
                return true;
            }
            else if (parentDataSource.table() == tableNum(InventDim) 
                && _dataSource.table() == tableNum(InventBatch))
            {
                // InventBatch with two InventDim data sources
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryNameUseDimOfInventSum</Name>
				<Source><![CDATA[
    private QueryName queryNameUseDimOfInventSum(QueryName _queryName)
    {
        switch (_queryName)
        {
            case queryStr(WHSLocDirActionPick):
                return queryStr(WHSLocDirActionPickWithInventDim);

            case queryStr(WHSLocDirActionPickBatch):
                return queryStr(WHSLocDirActionPickBatchWithInventDim);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateLocationDirectiveAction</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean canUpdateLocationDirectiveAction()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSLocDirActionQueryConverter construct()
    {
        return new WHSLocDirActionQueryConverter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeQueryLog</Name>
				<Source><![CDATA[
    private void writeQueryLog(
        SysInstrumentationActivityContext       _activityContext,
        WHSLocDirActionQueryConverterLogType    _logType)
    {
        _activityContext.addCustomProperty('IsQueryConverted', any2Str(false));

        if (WHSLocDirActionQueryConverterLogFlight::instance().isEnabled())
        {
            WHSLocDirActionQueryConverterLog log;

            ttsbegin;
            log.QueryName = queryName;
            log.QueryXML = query.xml();
            log.LogType = _logType;
            log.insert();
            ttscommit;

            _activityContext.addCustomProperty('LogRecId', int642Str(log.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAndSaveLocDirActionQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static Query convertAndSaveLocDirActionQuery(
        WHSLocDirAction _locDirAction, 
        WHSWorkType _workType, 
        Query _query)
    {
        const str SaveQueryProperty = 'SaveQuery';
        const str SavedQueryLocDirActionRecId = 'SavedQueryLocDirActionRecId';

        if (_locDirAction.canOptimizeQuery(_workType))
        {
            using (SysInstrumentationActivityContext activityContext = WHSInstrumentationLogger::createLogger(classStr(WHSLocDirActionQueryConverter)).locationDirectiveActivities().locationDirectiveActionQueryConvertAndSave(_locDirAction, _workType))
            {
                WHSLocDirActionQueryConverter converter;

                if (!_locDirAction.BatchEnabled)
                {
                    converter = WHSLocDirActionQueryConverter::newQuery(_query, queryStr(WHSLocDirActionPick));
                }
                else
                {
                    converter = WHSLocDirActionQueryConverter::newQuery(_query, queryStr(WHSLocDirActionPickBatch));
                }

                if (converter)
                {
                    Query convertedQuery = converter.convertLocDirActionQueryByQueryName();

                    if (convertedQuery
                        && converter.canUpdateLocationDirectiveAction()
                        && !WHSLocDirAction::queryContainsInventDimDataSource(convertedQuery))
                    {
                        WHSLocDirAction::saveConvertedLocationDirectiveActionQuery(_locDirAction, convertedQuery);

                        activityContext.addCustomProperty(SaveQueryProperty, any2Str(true));
                        activityContext.addCustomProperty(SavedQueryLocDirActionRecId, any2Str(_locDirAction.RecId));
                    }
                    else
                    {
                        activityContext.addCustomProperty(SaveQueryProperty, any2Str(false));
                        activityContext.addCustomProperty(SavedQueryLocDirActionRecId, any2Str(_locDirAction.RecId));                    
                    }

                    return convertedQuery;
                }
            }
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSLocDirActionQueryConverter newQuery(Query _query, QueryName _queryName)
    {
        WHSLocDirActionQueryConverter converter = WHSLocDirActionQueryConverter::construct();

        Debug::assert(_query != null);

        converter.query = _query;
        converter.queryName = _queryName;

        return converter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>