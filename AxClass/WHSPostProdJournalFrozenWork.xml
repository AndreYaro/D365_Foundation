<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPostProdJournalFrozenWork</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSPostProdJournalFrozenWork
{
    private ProdBOM prodBOM;
    private Map     processedInventory;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmProdBOM</Name>
				<Source><![CDATA[
    internal ProdBOM parmProdBOM(prodBOM _prodBOM = prodBOM)
    {
        prodBOM = _prodBOM;
        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessedInventory</Name>
				<Source><![CDATA[
    internal Map parmProcessedInventory(Map _processedInventory = processedInventory)
    {
        processedInventory = _processedInventory;
        return processedInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WHSPostProdJournalFrozenWork construct()
    {
        return new WHSPostProdJournalFrozenWork();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdPickingJournal</Name>
				<Source><![CDATA[
    internal void createProdPickingJournal()
    {
        ProdTable prodTable = ProdTable::find(prodBOM.ProdId);

        if (prodTable.ProdStatus != ProdStatus::StartedUp
            || prodBOM.flushingPrinciple() != ProdFlushingPrincipBOM::Picked
            || processedInventory.elements() == 0
            || !prodBOM)
        {
            return;
        }

        ProdJournalCreateBOM prodJournalCreateBOM;
        ProdParametersDim	 prodParamDim = prodBOM.prodTable().prodParametersDim();
        ProdJournalId		 journalId;
        date				 todaysDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        MapEnumerator        mapEnumerator = processedInventory.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            // The production BOM could be updated when the journal is created, if above location dimensions are being specified
            // need to reselect the record to avoid an update conflict.
            prodBOM.reread();

            prodJournalCreateBOM = WHSPostProdJournalFrozenWork::createProdJournalStatic(prodParamDim, prodBOM, todaysDate, mapEnumerator.currentValue(), journalId, mapEnumerator.currentKey());
            
            if (!journalId)
            {
                journalId = prodJournalCreateBOM.parmJournalId();
            }
        }

        if (journalId)
        {
            WHSPostProdJournal::postJournalInBatch(prodJournalCreateBOM.usedProdJournalTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdJournalStatic</Name>
				<Source><![CDATA[
    private static ProdJournalCreateBOM createProdJournalStatic(
        ProdParametersDim	 _prodParamDim,
        ProdBOM				 _prodBOMLine,
        date				 _todaysDate,
        InventHandlingQty    _inventHandlingQty,
        ProdJournalId		 _journalId,
        InventDimId          _inventDimId = '',
        PdsCWQty             _cwQty = 0)
    {
        Qty bomQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_prodBOMLine.ItemId,
                                                                                           _prodBOMLine.InventDimId,
                                                                                           _inventHandlingQty,
                                                                                           InventTableModule::find(_prodBOMLine.ItemId,ModuleInventPurchSales::Invent).UnitId,
                                                                                           _prodBOMLine.UnitId);

        ProdJournalCreateBOM prodJournalCreateBOM = ProdJournalCreateBOM::newConsumption(_prodBOMLine, _prodParamDim.BOMJournalNameId, _todaysDate, bomQty);
        prodJournalCreateBOM.parmInventDimId(_inventDimId);
        prodJournalCreateBOM.parmCWQtyConsump(_cwQty);

        // If it's the first run this will be blank, a journal Id will be assigned in runOperation,
        // if it's after the first run assigning the previous journal Id will add lines to the same journal
        prodJournalCreateBOM.parmJournalId(_journalId);
                
        prodJournalCreateBOM.runOperation();

        return prodJournalCreateBOM;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>