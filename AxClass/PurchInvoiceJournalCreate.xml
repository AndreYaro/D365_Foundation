<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchInvoiceJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchInvoiceJournalCreate</c> class creates and validates the vendor invoice journals.
/// </summary>
public class PurchInvoiceJournalCreate extends FormletterJournalCreate
{
    VendInvoiceJour vendInvoiceJour;
    VendInvoiceTrans vendInvoiceTrans;

    PurchTable purchTable;

    VendInvoiceInfoTable vendInvoiceInfoTable;
    PurchParmUpdate purchParmUpdate;
    PurchLine purchLine;

    PurchTotals purchTotals;
    RecordSortedList recordListPurchParmLine;
    NoYes creditNote;
    Num internalNumber;
    InterCompanyVoucher interCompanyVoucher;
    boolean useInternalNumber;
    PurchQty invoiceUpdatedOnly;

    ParmId interCompanyParmId;
    boolean printFormletter;

    List packingSlipUpdateList;

    // <GEERU>
    boolean printFacture;
    boolean printAcceptanceReport;
    boolean printReimbursementSlip;
    boolean printInventBaileeReport;
    // </GEERU>

    boolean executingPaymentAuthorizationTask;

    #ISOCountryRegionCodes
    // <GEEU>
    #EECountryRegionCodes
    // </GEEU>
    // <GIN>
    ExciseInvoiceAddressType_IN exciseInvoiceAddress;
    // </GIN>
    RecordInsertList recordListTAMVendRebateVendInvoiceTrans;

    private boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    protected NumberSeq allocateNumAndVoucher()
    {
        RefRecId invoiceNumber;
        RefRecId invoiceVoucher;
        NumberSequenceDatatype numberSequenceDatatype;
        boolean voucherEqualsNumber;
        NumberSeq tmpNumberSeq;
        NumberSequenceGroupId numberSequenceGroup;
        VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU;

        // <GMY>
        boolean countryRegion_MY = TaxGSTFeatureChecker_MY::isCountryRegionMY();
        // </GMY>

        if (this.isDocAutoNumbering_LTLV())
        {
            invoiceNumber = NumberSequenceTable::findByNaturalKey(ltDocNumberingCode, NumberSeqScopeFactory::createDefaultScope().getId()).RecId;
        }

        if (countryRegion_RU)
        {
            vendInvoiceInfoTable_RU = vendInvoiceInfoTable.vendInvoiceInfoTable_RU();
        }

        if (vendInvoiceInfoTable.isNonPO())
        {
            numberSequenceGroup = vendInvoiceInfoTable.NumberSequenceGroup;
        }
        else
        {
            numberSequenceGroup = purchTable.NumberSequenceGroup;
        }

        if (numberSequenceGroup)
        {
            if (this.doesInvoiceMeetCriteriaForCreditNote())
            {
                numberSequenceDatatype = NumberSequenceDatatype::find(PurchParameters::numRefPurchCreditNoteId().NumberSequenceDatatype);
                // <GEEU>
                if (!invoiceNumber)
                {
                    // </GEEU>
                    invoiceNumber = NumberSequenceGroupRef::findNaturalKey(
                    numberSequenceDatatype.RecId,
                    NumberSeqScopeFactory::createDefaultScope().getId(),
                    numberSequenceGroup).NumberSequenceId;
                    // <GEEU>
                }
                // </GEEU>

                if (!invoiceNumber)
                {
                    invoiceNumber = PurchParameters::numRefPurchCreditNoteId().NumberSequenceId;
                }
                // <GEERU>
                if ((countryRegion_RU && ! vendInvoiceInfoTable_RU.Correct_RU && PurchParameters::numRefPurchCreditNoteVoucher().AllowSameAs) ||
                    ! countryRegion_RU && PurchParameters::numRefPurchCreditNoteVoucher().AllowSameAs)
                // </GEERU>
                {
                    voucherEqualsNumber = true;
                    invoiceVoucher = invoiceNumber;
                }
                else
                {
                    // <GEERU>
                    if (countryRegion_RU)
                    {
                        numberSequenceDatatype = NumberSequenceDatatype::find(vendInvoiceInfoTable_RU.Correct_RU ?
                                                                              PurchParameters::numRefPurchCorrectCreditNoteVoucher_RU().NumberSequenceDatatype :
                                                                              PurchParameters::numRefPurchCreditNoteVoucher().NumberSequenceDatatype);
                    }
                    else
                    {
                        // </GEERU>
                        numberSequenceDatatype = NumberSequenceDatatype::find(PurchParameters::numRefPurchCreditNoteVoucher().NumberSequenceDatatype);
                        // <GEERU>
                    }
                    // </GEERU>
                    invoiceVoucher = NumberSequenceGroupRef::findNaturalKey(
                        numberSequenceDatatype.RecId,
                        NumberSeqScopeFactory::createDefaultScope().getId(),
                        numberSequenceGroup).NumberSequenceId;

                    if (!invoiceVoucher)
                    {
                        // <GEERU>
                        if (countryRegion_RU)
                        {
                            invoiceVoucher = vendInvoiceInfoTable_RU.Correct_RU ?
                                             PurchParameters::numRefPurchCorrectCreditNoteVoucher_RU().NumberSequenceId :
                                             PurchParameters::numRefPurchCreditNoteVoucher().NumberSequenceId;
                        }
                        else
                        {
                            // </GEERU>
                            invoiceVoucher = PurchParameters::numRefPurchCreditNoteVoucher().NumberSequenceId;
                            // <GEERU>
                        }
                        // </GEERU>
                    }
                }
            }
            else
            {
                // <GMY>
                if (countryRegion_MY && purchTable.hasLinesWithRefrence_MY())
                {
                    //This should be Debit note for Malaysia
                    numberSequenceDatatype = NumberSequenceDatatype::find(PurchParameters::numRefPurchDebitNoteId().NumberSequenceDatatype);
                }
                else
                {
                    // </GMY>
                    numberSequenceDatatype = NumberSequenceDatatype::find(PurchParameters::numRefPurchInvoiceId().NumberSequenceDatatype);
                    // <GMY>
                }
                // </GMY>
                // <GEEU>
                if (!invoiceNumber)
                {
                    // </GEEU>
                    invoiceNumber = NumberSequenceGroupRef::findNaturalKey(
                        numberSequenceDatatype.RecId,
                        NumberSeqScopeFactory::createDefaultScope().getId(),
                        numberSequenceGroup).NumberSequenceId;
                    // <GEEU>
                }
                // </GEEU>

                if (!invoiceNumber)
                {
                    // <GMY>
                    if (countryRegion_MY && purchTable.hasLinesWithRefrence_MY())
                    {
                        invoiceNumber = PurchParameters::numRefPurchDebitNoteId().NumberSequenceId;
                    }
                    else
                    {
                        // </GMY>
                        invoiceNumber = PurchParameters::numRefPurchInvoiceId().NumberSequenceId;
                        // <GMY>
                    }
                    // </GMY>
                }

                // <GEERU>
                if ((countryRegion_RU && ! vendInvoiceInfoTable_RU.Correct_RU && PurchParameters::numRefPurchInvoiceVoucher().AllowSameAs) ||
                    (! countryRegion_RU && PurchParameters::numRefPurchInvoiceVoucher().AllowSameAs))
                // </GEERU>
                {
                    voucherEqualsNumber = true;
                    invoiceVoucher = invoiceNumber;
                }
                else
                {
                    // <GEERU>
                    if (countryRegion_RU)
                    {
                        numberSequenceDatatype = NumberSequenceDatatype::find(vendInvoiceInfoTable_RU.Correct_RU ?
                                                                              PurchParameters::numRefPurchCorrectInvoiceVoucher_RU().NumberSequenceDatatype :
                                                                              PurchParameters::numRefPurchInvoiceVoucher().NumberSequenceDatatype);
                    }
                    else
                    {
                        // </GEERU>
                        // <GMY>
                        if (countryRegion_MY && purchTable.hasLinesWithRefrence_MY())
                        {
                            numberSequenceDatatype = NumberSequenceDatatype::find(PurchParameters::numRefPurchDebitNoteVoucher().NumberSequenceDatatype);
                        }
                        else
                        {
                            if (vendInvoiceInfoTable.isAdvance())
                            {
                                numberSequenceDatatype = NumberSequenceDatatype::find(PurchParameters::numRefPurchAdvanceVoucher().NumberSequenceDatatype);
                            }
                            else
                            {
                                // </GMY>
                                numberSequenceDatatype = NumberSequenceDatatype::find(PurchParameters::numRefPurchInvoiceVoucher().NumberSequenceDatatype);
                                // <GMY>
                            }
                        }
                        // </GMY>
                        // <GEERU>
                    }
                    // </GEERU>
                    invoiceVoucher = NumberSequenceGroupRef::findNaturalKey(
                        numberSequenceDatatype.RecId,
                        NumberSeqScopeFactory::createDefaultScope().getId(),
                        numberSequenceGroup).NumberSequenceId;

                    if (!invoiceVoucher)
                    {
                        // <GEERU>
                        if (countryRegion_RU)
                        {
                            invoiceVoucher = vendInvoiceInfoTable_RU.Correct_RU ?
                                             PurchParameters::numRefPurchCorrectInvoiceVoucher_RU().NumberSequenceId :
                                             PurchParameters::numRefPurchInvoiceVoucher().NumberSequenceId;
                        }
                        else
                        {
                            // </GEERU>
                            // <GMY>
                            if (countryRegion_MY && purchTable.hasLinesWithRefrence_MY())
                            {
                                invoiceVoucher = PurchParameters::numRefPurchDebitNoteVoucher().NumberSequenceId;
                            }
                            else
                            {
                                if (vendInvoiceInfoTable.isAdvance())
                                {
                                    invoiceVoucher = PurchParameters::numRefPurchAdvanceVoucher().NumberSequenceId;
                                }
                                else
                                {
                                    // </GMY>
                                    invoiceVoucher = PurchParameters::numRefPurchInvoiceVoucher().NumberSequenceId;
                                    // <GMY>
                                }
                            }
                            // </GMY>
                            // <GEERU>
                        }
                        // </GEERU>
                    }
                }
            }

            if (invoiceNumber)
            {
                useInternalNumber = true;

                // <GEERU>
                if (countryRegion_RU)
                {
                    tmpNumberSeq = NumberSeq::newGetNumAndVoucherFromId(invoiceNumber, invoiceVoucher, voucherEqualsNumber, false, false, UnknownNoYes::No);
                }
                else
                {
                    // </GEERU>
                    tmpNumberSeq = NumberSeq::newGetNumAndVoucherFromId(invoiceNumber, invoiceVoucher, voucherEqualsNumber);
                    // <GEERU>
                }
                // </GEERU>
            }
            else
            {
                useInternalNumber = false;

                // <GEERU>
                if (countryRegion_RU)
                {
                    tmpNumberSeq = NumberSeq::newGetVoucherFromId(invoiceVoucher, false, false, UnknownNoYes::No);
                }
                else
                {
                    // </GEERU>
                    tmpNumberSeq = NumberSeq::newGetVoucherFromId(invoiceVoucher);
                    // <GEERU>
                }
                // </GEERU>
            }
        }
        else
        {
            if (this.doesInvoiceMeetCriteriaForCreditNote())
            {
                // <GEERU>
                if (countryRegion_RU)
                {
                    if (PurchParameters::numRefPurchCreditNoteId().NumberSequenceId)
                    {
                        useInternalNumber = true;

                        tmpNumberSeq = NumberSeq::newGetNumAndVoucher(PurchParameters::numRefPurchCreditNoteId(),
                                                                      vendInvoiceInfoTable_RU.Correct_RU ? PurchParameters::numRefPurchCorrectCreditNoteVoucher_RU() : PurchParameters::numRefPurchCreditNoteVoucher(),
                                                                      false,
                                                                      false,
                                                                      UnknownNoYes::No);
                    }
                    else
                    {
                        useInternalNumber = false;

                        tmpNumberSeq = NumberSeq::newGetVoucher(vendInvoiceInfoTable_RU.Correct_RU ? PurchParameters::numRefPurchCorrectCreditNoteVoucher_RU() : PurchParameters::numRefPurchCreditNoteVoucher(),
                                                                false,
                                                                false,
                                                                UnknownNoYes::No);
                    }
                }
                else
                {
                    // </GEERU>
                    useInternalNumber = true;

                    tmpNumberSeq = NumberSeq::newGetNumAndVoucher(PurchParameters::numRefPurchCreditNoteId(), PurchParameters::numRefPurchCreditNoteVoucher());
                    // <GEERU>
                }
                // </GEERU>
            }
            else
            {
                // <GEERU>
                if (countryRegion_RU)
                {
                    if (PurchParameters::numRefPurchInvoiceId().NumberSequenceId)
                    {
                        useInternalNumber = true;

                        tmpNumberSeq = NumberSeq::newGetNumAndVoucher(PurchParameters::numRefPurchInvoiceId(),
                                                                      vendInvoiceInfoTable_RU.Correct_RU ? PurchParameters::numRefPurchCorrectInvoiceVoucher_RU() : PurchParameters::numRefPurchInvoiceVoucher(),
                                                                      false,
                                                                      false,
                                                                      UnknownNoYes::No);
                    }
                    else
                    {
                        useInternalNumber = false;

                        tmpNumberSeq = NumberSeq::newGetVoucher(vendInvoiceInfoTable_RU.Correct_RU ? PurchParameters::numRefPurchCorrectInvoiceVoucher_RU() : PurchParameters::numRefPurchInvoiceVoucher(),
                                                                false,
                                                                false,
                                                                UnknownNoYes::No);
                    }
                }
                else
                {
                    // </GEERU>
                    useInternalNumber = true;

                    if (vendInvoiceInfoTable.isAdvance())
                    {
                        tmpNumberSeq = NumberSeq::newGetNumAndVoucher(PurchParameters::numRefPurchInvoiceId(), PurchParameters::numRefPurchAdvanceVoucher());
                    }
                    else
                    {
                        // <GMY>
                        if (countryRegion_MY && purchTable.hasLinesWithRefrence_MY())
                        {
                            tmpNumberSeq = NumberSeq::newGetNumAndVoucher(PurchParameters::numRefPurchDebitNoteId(), PurchParameters::numRefPurchDebitNoteVoucher());
                        }
                        else
                        {
                            // </GMY>
                            tmpNumberSeq = NumberSeq::newGetNumAndVoucher(PurchParameters::numRefPurchInvoiceId(), PurchParameters::numRefPurchInvoiceVoucher());
                            // <GMY>
                        }
                        // </GMY>
                    }
                    // <GEERU>
                }
                // </GEERU>
            }
        }

        // Italian functionality of VAT books and VAT book sections
        if (MultipleTaxIdReportingHelper::isLegalEntityOrTaxInCountryRegion(
            this.parmTax(), [#isoIT], MultipleTaxIdScope::VATDeclaration))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00028, funcName());

            if (!TaxBookSection::checkTaxBookSection(NumberSequenceTable::findByNaturalKey(tmpNumberSeq.parmVoucherSequenceCode()).RecId, this.invoiceDate()))
            {
                throw error("@SYS21533");
            }
        }
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.postAllocateNumAndVoucher_BR(tmpNumberSeq);
        }
        // </GBR>

        return tmpNumberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cascadeAllPdsVendBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    After completion of the purchase order, the vendor batch information should be locked for the batches created.
    /// </summary>
    protected void cascadeAllPdsVendBatchInfo()
    {
        Common parmLine = this.typeParmLine();
        PurchParmLine purchParmLine; //used for casting
        RecordSortedList list = this.recordListParmLine();

        // pre-init record kernel values, such as tablenum
        purchParmLine.initValue();

        if (list)
        {
            list.first(parmLine);
            if (parmLine.RecId && (purchParmLine.TableId == parmLine.TableId))
            {
                purchParmLine = parmLine;
                purchParmLine.bufferPdsVendBatchInfo().cascadeDetailsToBatchesCreated();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret;
        PurchTable purchTableLocal = purchTable;

        // <GIN>
        AmountCur customTaxAmount_IN;
        TaxWithholdAmountCur withholdingTaxAmount = 0;
        TaxWithholdTrans_IN withholdingTrans;
        int taxSign = 1;
        VendInvoiceInfoLine vendInvoiceInfoLineloc;
        VendInvoiceInfoLineTaxExtension_IN vendInvoiceInfoLineTaxExtloc;
        // </GIN>

        ret = super();

        if (this.parmIsSimulatePosting())
        {
            this.checkInvoiceImportedAmountsMatch();
            this.checkHeading();
            this.checkInvoice();
            this.checkLines();
            this.checkLedgerPeriod();
        }
        else if (ret && vendInvoiceInfoTable.Hold == NoYes::No &&
            (!this.checkHeading() ||
            !this.checkInvoice() ||
            !this.checkLines() ||
            !this.checkLedgerPeriod() ||
            !this.checkInvoiceImportedAmountsMatch()))
        {
            ret = false;
        }

        if (ret)
        {
            if (!this.parmInterCompanyParmId())
            {
                // Not posting and not printing
                // <GEERU>
                if (countryRegion_RU &&
                  (purchParmUpdate.Proforma && !printFormletter && !printFacture && !printAcceptanceReport && !printInventBaileeReport && !printReimbursementSlip) ||
                  (!countryRegion_RU && purchParmUpdate.Proforma && ! printFormletter))
                  // </GEERU>
                {
                    // If the invoice isn't going to be saved - warn that updating was not specified
                    if (vendInvoiceInfoTable.VendInvoiceSaveStatus != VendInvoiceSaveStatus::Pending)
                    {
                        ret = checkFailed("@SYS24178");
                    }
                    // The invoice is going to be saved, then skip the rest of the validation
                    else
                    {
                        return true;
                    }
                }
            }

            if ((ret
                && this.isInterCompanyPOInvoice(purchTableLocal))
                    || this.parmIsSimulatePosting())
            {
                // <GIN>
                if (TaxWithholdParameters_IN::checkTaxParameters())
                {
                    select crossCompany RecId from vendInvoiceInfoLineloc
                        where vendInvoiceInfoLineloc.ParmId == vendInvoiceInfoTable.ParmId
                            && vendInvoiceInfoLineloc.TableRefId == vendInvoiceInfoTable.TableRefId
                        join TDSGroup, TCSGroup from vendInvoiceInfoLineTaxExtloc
                            where vendInvoiceInfoLineTaxExtloc.VendInvoiceInfoLine == vendInvoiceInfoLineloc.RecId;

                    if (vendInvoiceInfoLineTaxExtloc.TDSGroup != '')
                    {
                        taxSign = taxSign * -1;
                    }
                }
                // </GIN>

                boolean skipInterCompanySalesInvoiceValidation = BrazilParameters::isEnabled() &&
                    FeatureStateProvider::isFeatureEnabled(PurchInvoiceSkipIntercompanySalesInvoiceValidationFeature_BR::instance()) &&
                    vendInvoiceInfoTable.IsTheFiscalDocumentIssuer_BR();

                if (purchTableLocal.InterCompanyCompanyId)
                {
                    changecompany(purchTableLocal.InterCompanyCompanyId)
                    {
                        SalesTable salesTableLocal;

                        select count(RecId) from salesTableLocal
                        where salesTableLocal.SalesId == purchTableLocal.InterCompanySalesId &&
                            salesTableLocal.ProjId != "";

                        if (salesTableLocal.RecId == 0)
                        {
                            CustInvoiceTrans custInvoiceTransLocal;

                            // Determine whether associated sales invoice journal includes orders other than the primary order of this invoice
                            select firstonly RecId, SalesId from custInvoiceTransLocal
                            where custInvoiceTransLocal.InvoiceId == vendInvoiceInfoTable.Num &&
                                custInvoiceTransLocal.SalesId == purchTableLocal.InterCompanySalesId &&
                                custInvoiceTransLocal.OrigSalesId != purchTableLocal.InterCompanySalesId;

                            if (!custInvoiceTransLocal)
                            {
                                select firstonly RecId, SalesId from custInvoiceTransLocal
                                where custInvoiceTransLocal.InvoiceId == vendInvoiceInfoTable.Num &&
                                    custInvoiceTransLocal.OrigSalesId == purchTableLocal.InterCompanySalesId &&
                                    custInvoiceTransLocal.SalesId != purchTableLocal.InterCompanySalesId;
                            }

                            boolean salesInvoiceSummary = false;
                            SalesId salesSumNum = purchTableLocal.InterCompanySalesId;

                            if (custInvoiceTransLocal)
                            {
                                salesInvoiceSummary = true;
                                salesSumNum = custInvoiceTransLocal.SalesId;
                            }

                            CustInvoiceJour custInvoiceJourLocal;

                            if (salesInvoiceSummary)
                            {
                                select count(RecId), sum(InvoiceAmount), sum(SumTax), sum(Qty) from custInvoiceJourLocal
                                where custInvoiceJourLocal.RefNum == RefNum::SalesOrder &&
                                    (custInvoiceJourLocal.SalesId == purchTableLocal.InterCompanySalesId ||
                                    custInvoiceJourLocal.SalesId == salesSumNum) &&
                                    custInvoiceJourLocal.InvoiceId == vendInvoiceInfoTable.Num;
                            }
                            else
                            {
                                if (this.parmInterCompanyParmId())
                                {
                                    select count(RecId), sum(InvoiceAmount), sum(SumMarkup), sum(SumTax), sum(Qty) from custInvoiceJourLocal
                                    where custInvoiceJourLocal.ParmId == this.parmInterCompanyParmId() &&
                                        custInvoiceJourLocal.InvoiceId == vendInvoiceInfoTable.Num;
                                }
                                else
                                {
                                    select count(RecId), sum(InvoiceAmount), sum(SumMarkup), sum(SumTax), sum(Qty) from custInvoiceJourLocal
                                    where custInvoiceJourLocal.SalesId == purchTableLocal.InterCompanySalesId &&
                                        custInvoiceJourLocal.InvoiceId == vendInvoiceInfoTable.Num;
                                }
                            }

                            skipInterCompanySalesInvoiceValidation = skipInterCompanySalesInvoiceValidation && !BrazilParameters::isEnabled();

                            if (custInvoiceJourLocal.RecId == 0 && !skipInterCompanySalesInvoiceValidation)
                            {
                                ret = ret && checkFailed(strFmt("@SCM:IntercompanyPurchaseOrderInvoiceWithWrongInvoiceId", vendInvoiceInfoTable.Num, purchTableLocal.InterCompanySalesId, purchTableLocal.InterCompanyCompanyId));
                            }

                            // <GIN>
                            //if any of the parameters are checked, then check for the withholding tax amount
                            //and add it to the CustInvoiceJour.InvoiceAmount
                            if (TaxWithholdParameters_IN::checkTaxParameters())
                            {
                                if (TaxWithholdAmountCheckForInterCompanyPO_INFlight::instance().isEnabled())
                                {
                                    TaxWithholdTrans_IN withholdingTransLocal;
                                    select sum(TaxWithholdAmountCur) from withholdingTransLocal
                                        group by TaxType
                                        where withholdingTransLocal.SalesId == purchTableLocal.InterCompanySalesId
                                            && withholdingTransLocal.Invoice == vendInvoiceInfoTable.Num;

                                    withholdingTaxAmount = withholdingTransLocal.TaxWithholdAmountCur;
                                }
                                else
                                {
                                    select sum(TaxWithholdAmountCur) from withholdingTrans
                                        group by TaxType
                                        where withholdingTrans.SalesId == purchTableLocal.InterCompanySalesId;

                                    withholdingTaxAmount = withholdingTrans.TaxWithholdAmountCur;
                                }

                                withholdingTaxAmount = withholdingTaxAmount * -1;

                                if (purchTotals.purchTotalAmount() + (purchTotals.parmTaxWithholdAmount_IN() * taxSign) != custInvoiceJourLocal.InvoiceAmount + withholdingTaxAmount)
                                {
                                    ret = ret && checkFailed(strfmt("@SYS94316",purchTableLocal.InterCompanyCompanyId, custInvoiceJourLocal.InvoiceAmount + withholdingTaxAmount , purchTotals.purchTotalAmount() + (purchTotals.parmTaxWithholdAmount_IN() * taxSign)));
                                }
                            }
                            else
                            {
                                if (purchTotals.parmTaxWithholdAmount_IN())
                                {
                                    if (purchTotals.purchTotalAmount() + (purchTotals.parmTaxWithholdAmount_IN() * taxSign) != custInvoiceJourLocal.InvoiceAmount + withholdingTaxAmount)
                                    {
                                        ret = ret && checkFailed(strfmt("@SYS94316",purchTableLocal.InterCompanyCompanyId, custInvoiceJourLocal.InvoiceAmount + withholdingTaxAmount , purchTotals.purchTotalAmount() + (purchTotals.parmTaxWithholdAmount_IN() * taxSign)));
                                    }
                                }
                                else
                            // </GIN>
                                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && purchTable.isInterCompanyOrder() && purchTable.isCustomsImportOrder_IN())
                                {
                                    if (!custInvoiceJourLocal.SumTax)
                                    {
                                        customTaxAmount_IN = purchTotals.taxTotal();
                                    }
                                }

                                if (purchTotals.purchTotalAmount() != custInvoiceJourLocal.InvoiceAmount  + customTaxAmount_IN && !skipInterCompanySalesInvoiceValidation)
                                {
                                    ret = ret && checkFailed(strfmt("@SYS94316",purchTableLocal.InterCompanyCompanyId, custInvoiceJourLocal.InvoiceAmount , purchTotals.purchTotalAmount()));
                                }
                                // <GIN>
                            }
                            // </GIN>
                        }
                        else
                        {
                            ProjInvoiceJour projInvoiceJourLocal;
                            ProjInvoiceItem projInvoiceItemLocal;

                            if (this.parmInterCompanyParmId())
                            {
                                select count(RecId), sum(InvoiceAmount), sum(SumMarkup) from projInvoiceJourLocal
                                where projInvoiceJourLocal.ParmId == this.parmInterCompanyParmId() &&
                                    projInvoiceJourLocal.ProjInvoiceId == vendInvoiceInfoTable.Num;
                            }
                            else
                            {
                                select count(RecId), sum(InvoiceAmount), sum(SumMarkup) from projInvoiceJourLocal
                                exists join projInvoiceItemLocal
                                    where projInvoiceJourLocal.ProjInvoiceId == projInvoiceItemLocal.ProjInvoiceId &&
                                        projInvoiceItemLocal.SalesId == purchTableLocal.InterCompanySalesId &&
                                        projInvoiceJourLocal.ProjInvoiceId == vendInvoiceInfoTable.Num;
                            }

                            if (projInvoiceJourLocal.RecId == 0)
                            {
                                ret = ret && checkFailed(strFmt("@SYS94315", vendInvoiceInfoTable.Num, purchTableLocal.InterCompanyCompanyId, this.parmInterCompanyParmId()));
                            }

                            // <GIN>
                            //if any of the parameters are checked, then check for the withholding tax amount
                            //and add it to the CustInvoiceJour.InvoiceAmount
                            if (TaxWithholdParameters_IN::checkTaxParameters())
                            {
                                select sum(TaxWithholdAmountCur) from withholdingTrans
                                group by TaxType
                                where withholdingTrans.SalesId == purchTableLocal.InterCompanySalesId;

                                withholdingTaxAmount = withholdingTrans.TaxWithholdAmountCur;

                                withholdingTaxAmount = withholdingTaxAmount * -1;

                                if (purchTotals.purchTotalAmount() + (purchTotals.parmTaxWithholdAmount_IN() * taxSign) != projInvoiceJourLocal.InvoiceAmount + withholdingTaxAmount)
                                {
                                    ret = ret && checkFailed(strfmt("@SYS94316",purchTableLocal.InterCompanyCompanyId, projInvoiceJourLocal.InvoiceAmount + withholdingTaxAmount , purchTotals.purchTotalAmount() + (purchTotals.parmTaxWithholdAmount_IN() * taxSign)));
                                }
                            }
                            else
                            {
                                if (purchTotals.parmTaxWithholdAmount_IN())
                                {
                                    if (purchTotals.purchTotalAmount() + (purchTotals.parmTaxWithholdAmount_IN() * taxSign) != projInvoiceJourLocal.InvoiceAmount + withholdingTaxAmount)
                                    {
                                        ret = ret && checkFailed(strfmt("@SYS94316",purchTableLocal.InterCompanyCompanyId, projInvoiceJourLocal.InvoiceAmount + withholdingTaxAmount , purchTotals.purchTotalAmount() + (purchTotals.parmTaxWithholdAmount_IN() * taxSign)));
                                    }
                                }
                                else
                            // </GIN>
                            if (purchTotals.purchTotalAmount() != projInvoiceJourLocal.InvoiceAmount)
                                {
                                    ret = ret && checkFailed(strfmt("@SYS94316",purchTableLocal.InterCompanyCompanyId, projInvoiceJourLocal.InvoiceAmount , purchTotals.purchTotalAmount() ));
                                }
                                // <GIN>
                            }
                            // </GIN>
                        }
                    }
                }
            }

            if (PurchOrderCheckSkipValidationOnEmptyPurchIdFlight::instance().isEnabled()
                && !purchTableLocal.isInterCompanyOrder()
                && (ret || this.parmIsSimulatePosting()))
            {
                CustInvoiceJour custInvoiceJour;
                if (vendInvoiceInfoTable.PurchId && !custInvoiceJour.checkIntercompanyInvoice(purchTableLocal.InvoiceAccount, vendInvoiceInfoTable.Num, purchTableLocal.DataAreaId))
                {
                    ret = checkFailed(strFmt("@SCM:NonIntercompanyPurchOrderInvoiceWithInterCompanySalesOrderInvoiceIdLabel", vendInvoiceInfoTable.Num));
                }
            }
        }

        if (!this.checkAllHeaderChargesAreAllocated())
        {
            ret = checkFailed("@SPS2136");
        }

        ret = ret && VendParameters::checkDocumentDate(vendInvoiceInfoTable.TransDate, vendInvoiceInfoTable.DocumentDate);

        ret = ret && this.checkPurchInclTax();
        // <GEEU>
        ret = ret && this.checkDocumentData_PL();
        // </GEEU>
        // <GTH>
        ret = ret && this.checkDocumentData_TH();
        // </GTH>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyPOInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to validate if intercompany purchase invoice can be posted.
    /// </summary>
    /// <param name = "_purchTable">
    /// The <c>PurchTable</c> record.
    /// </param>
    /// <returns>
    /// true if the current invoice is an intercompany invoice which can be posted; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean isInterCompanyPOInvoice(PurchTable _purchTable)
    {
        return (vendInvoiceInfoTable.Hold == NoYes::No
                && !vendInvoiceInfoTable.isNonPO()
                && _purchTable.isInterCompanyOrder()
                && _purchTable.PurchaseType != PurchaseType::ReturnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllHeaderChargesAreAllocated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if there are miscellaneous charges associated with the current vendor invoice header record.
    /// </summary>
    /// <returns>
    /// true if there are no charges associated with the header or the commitments feature is disabled; otherwise, false.
    /// </returns>
    protected boolean checkAllHeaderChargesAreAllocated()
    {
        return !(PublicSectorUtils::isFrenchRegulatoryEnabled() && vendInvoiceInfoTable.existUnallocatedMiscCharge());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    protected boolean checkDiscardLine(Common _vendInvoiceInfoLine)
    {
        VendInvoiceInfoLine line = _vendInvoiceInfoLine;

        if (Project::Enabled() && line.ReceiveNow == 0 && line.psaReleaseAmount)
        {
            return false;
        }

        if (line.ReceiveNow == 0 || line.LineType == PurchInvoiceLineType::AdvanceApplication)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAdvanceInvoicesForStdPostedInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates an advance invoice for existing standard posted invoices before posting.
    /// </summary>
    /// <returns>
    ///    true if the purchase order associated with advance invoice has no standard posted invoice; otherwise, false.
    /// </returns>
    protected boolean checkAdvanceInvoicesForStdPostedInvoices()
    {
        if (VendInvoiceTrans::existForPurchId(vendInvoiceInfoTable.PurchId))
        {
            return checkFailed(strFmt("@AccountsPayable:PrepaymentInvoicePostingError", vendInvoiceInfoTable.Num));
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDocumentData_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks various attributes of a project invoice during posting.
    /// </summary>
    /// <returns>
    /// True if document is postable.
    /// </returns>
    protected boolean checkDocumentData_PL()
    {
        boolean ret = true;
        VendInvoiceInfoTable vendInvoiceInfoTableLocal;
        boolean isPL = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
        boolean isCZ = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]);
        boolean isIntracomVAT = VendParameters::find().DocumentDateForIntracomVAT_W;
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W;

        if (isPL || isCZ)
        {
            GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes(
                    [ [#isoCZ, GlobalizationConstants::FeatureReferenceCZ00010] ],
                    funcName()
                );

            while select PurchId, Num, DocumentDate, OrderAccount from vendInvoiceInfoTableLocal
                where vendInvoiceInfoTableLocal.ParmId == purchParmUpdate.ParmId
                join PurchReceiptDate_W, VatDueDate_W from vendInvoiceInfoTable_W
                    where vendInvoiceInfoTable_W.VendInvoiceInfoTable == vendInvoiceInfoTableLocal.RecId
            {
                if (! vendInvoiceInfoTableLocal.DocumentDate && isIntracomVAT)
                {
                    ret = checkFailed(strFmt("@GLS110211", vendInvoiceInfoTableLocal.Num, fieldId2pname(tableNum(VendInvoiceInfoTable), fieldNum(VendInvoiceInfoTable, DocumentDate))));
                }

                if (isCZ && vendInvoiceInfoTable_W.VatDueDate_W && vendInvoiceInfoTableLocal.DocumentDate > vendInvoiceInfoTable_W.VatDueDate_W && isIntracomVAT)
                {
                    ret = checkFailed("@GLS110105");
                }

                if (isPL)
                {
                    if (!vendInvoiceInfoTable_W.PurchReceiptDate_W)
                    {
                        ret = checkFailed(strFmt("@GLS110211", vendInvoiceInfoTableLocal.Num, fieldId2pname(tableNum(VendInvoiceInfoTable_W), fieldNum(VendInvoiceInfoTable_W, PurchReceiptDate_W))));
                    }

                    if (!vendInvoiceInfoTable_W.VatDueDate_W && VendTable::find(vendInvoiceInfoTableLocal.OrderAccount).MandatoryVatDate_PL)
                    {
                        ret = checkFailed(strFmt("@GLS220904", vendInvoiceInfoTableLocal.PurchId));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDocumentData_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates tax invoice date when posting.
    /// </summary>
    /// <returns>
    /// true, if tax invoice date of the document being posted is ok; otherwise, false.
    /// </returns>
    protected boolean checkDocumentData_TH()
    {
        boolean ret = true;
        VendInvoiceInfoTable vendInvoiceInfoTableLocal;
        TmpTaxWorkTrans tmpTaxWorkTrans;

        if (   TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled()
            && VendParameters::find().ValidateTaxInvoiceDate_TH)
        {
            // check if we have any non-exempt tax
            tmpTaxWorkTrans.setTmpData(this.parmTax().tmpTaxWorkTrans());
            select firstonly RecId from tmpTaxWorkTrans
                where tmpTaxWorkTrans.ExemptTax == NoYes::No;

            if (tmpTaxWorkTrans.RecId)
            {
                TransDate today = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                TransDate limitDate = dateStartMth(today);
                AllowedTaxInvoicePostingPeriod_TH allowedPostingPeriod = VendParameters::find().AllowedTaxInvoicePostingPeriod_TH;

                for (int i = 1; i <= allowedPostingPeriod; i++)
                {
                    limitDate = prevMth(limitDate);
                }

                while select DocumentDate from vendInvoiceInfoTableLocal
                    where vendInvoiceInfoTableLocal.ParmId == purchParmUpdate.ParmId
                        && vendInvoiceInfoTableLocal.DocumentDate
                        && (   vendInvoiceInfoTableLocal.DocumentDate > today
                            || vendInvoiceInfoTableLocal.DocumentDate < limitDate)
                {
                    if (vendInvoiceInfoTableLocal.DocumentDate > today)
                    {
                        ret = checkFailed(strFmt("@AccountsPayable:TaxInvoiceDateCannotBeBiggerThanTheCurrentDate", vendInvoiceInfoTableLocal.DocumentDate));
                    }
                    else if (vendInvoiceInfoTableLocal.DocumentDate < limitDate)
                    {
                        ret = checkFailed(strFmt("@AccountsPayable:TaxInvoiceDateCannotBeLessThanTheEarliestAllowedDate", vendInvoiceInfoTableLocal.DocumentDate, limitDate));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates an invoice for duplicate numbers before posting.
    /// </summary>
    /// <returns>
    ///    true if the invoice passes the duplicate number check; otherwise, false.
    /// </returns>
    protected boolean checkDuplicateInvoice()
    {
        VendTable vt = vendInvoiceInfoTable.vendTable_InvoiceAccount();
        // <GTH>
        boolean ret;
        // </GTH>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            return vt.checkInvoice(this.invoiceId_BR(), vendInvoiceInfoTable.TransDate);
        }
        // </GBR>

        ret = vt.checkInvoice(vendInvoiceInfoTable.Num, vendInvoiceInfoTable.TransDate);

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            ret = vt.checkTaxInvoice(vendInvoiceInfoTable.DocumentNum, vendInvoiceInfoTable.DocumentDate) && ret;
        }
        // </GTH>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForMultiplePOLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current invoice contains more than one line for a single purchase order line.
    /// </summary>
    /// <returns>
    /// false if there are multiple purchase order lines on the current invoice; otherwise, true.
    /// </returns>
    private boolean checkForMultiplePOLines()
    {
        boolean ok = true;
        PurchInvoiceMultiplePOLines multiplePOLines;

        // Doing a normal select with an inner or an exists join
        // for this data results in a bad query plan that cannot be
        // fixed through indexing alone.
        // Instead, use an aggregation and a "having" clause of '>1'.
        // Since having clauses can only be added with designed queries,
        // it is used here wrapped in a view instead of doing the query
        // directly.

        select firstonly PurchLineRecId from multiplePOLines
            where multiplePOLines.ParmId == vendInvoiceInfoTable.ParmId &&
                multiplePOLines.TableRefId == vendInvoiceInfoTable.TableRefId &&
                multiplePOLines.PurchLineRecId != 0;

        if (multiplePOLines.PurchLineRecId != 0)
        {
            ok = checkFailed(strFmt("@SYS122954", vendInvoiceInfoTable.Num));
            info("@SYS122955" + '\n' + "@SYS122956");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHeading</Name>
				<Source><![CDATA[
    protected boolean checkHeading()
    {
        boolean ok = true;

        if (!vendInvoiceInfoTable.RecId)
        {
            ok = checkFailed(strFmt("@SYS15741", vendInvoiceInfoTable.PurchId));
        }

        if (!vendInvoiceInfoTable.OrderAccount)
        {
            ok = checkFailed(strFmt("@SYS19291", vendInvoiceInfoTable.PurchId));
        }

        if (!VendTable::exist(vendInvoiceInfoTable.OrderAccount))
        {
            ok = checkFailed(strFmt("@SYS19292", vendInvoiceInfoTable.OrderAccount, vendInvoiceInfoTable.PurchId));
        }

        if (!vendInvoiceInfoTable.InvoiceAccount)
        {
            ok = checkFailed(strFmt("@SYS19293", vendInvoiceInfoTable.PurchId));
        }

        if (!VendTable::exist(vendInvoiceInfoTable.InvoiceAccount))
        {
            ok = checkFailed(strFmt("@SYS19294", vendInvoiceInfoTable.InvoiceAccount, vendInvoiceInfoTable.PurchId));
        }

        if (vendInvoiceInfoTable.CurrencyCode && !Currency::exist(vendInvoiceInfoTable.CurrencyCode))
        {
            ok = checkFailed(strFmt("@SYS19295", vendInvoiceInfoTable.CurrencyCode, vendInvoiceInfoTable.PurchId));
        }

        if ((vendInvoiceInfoTable.isNonPO() || !purchTable.isInterCompanyOrder()) && !vendInvoiceInfoTable.checkMarkupTrans())
        {
            ok = false;
        }

        if (vendInvoiceInfoTable.isNonPO())
        {
            if (TaxVATNumTable::isVATNumMandatory(VendParameters::find().MandatoryInvoiceVATNum, vendInvoiceInfoTable))
            {
                ok = checkFailed("@SYS74693");
            }

            if ((vendInvoiceInfoTable.CashDisc || vendInvoiceInfoTable.CashDiscDate) && !vendInvoiceInfoTable.CashDiscCode)
            {
                ok = checkFailed("@SYS70370");
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                ok = vendInvoiceInfoTable.checkIntrastatFulfillDate_HU() && ok;
            }
        }
        else
        {
            if (TaxVATNumTable::isVATNumMandatory(VendParameters::find().MandatoryInvoiceVATNum, purchTable))
            {
                ok = checkFailed(strFmt("@SYS54453", purchTable.PurchId));
            }

            if ((vendInvoiceInfoTable.CashDisc || vendInvoiceInfoTable.CashDiscDate) && !purchTable.CashDisc)
            {
                ok = checkFailed(strFmt("@SYS129415", purchTable.PurchId));
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                ok = purchTable.checkIntrastatFulfillDate_HU() && ok;
            }
        }

        if (!vendInvoiceInfoTable.checkAccountingDate())
        {
            ok = checkFailed("@SYS335117");
        }

        if (vendInvoiceInfoTable.Num == ''
            && !this.isRevision_RU()
            && !this.isDocAutoNumbering_LTLV())
        {
            ok = checkFailed("@AccountsPayable:MissingInvoiceNumber");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoice</Name>
				<Source><![CDATA[
    protected boolean checkInvoice()
    {
        boolean invoiceOk = true;

        #ISOCountryRegionCodes

        if (this.mustVendorInvoiceUseReviewProcess())
        {
            // Skip most of the posting validation when the invoice is on hold
            if (vendInvoiceInfoTable.Hold == NoYes::No
                || this.parmIsSimulatePosting())
            {
                invoiceOk = this.checkDuplicateInvoice();

                if (invoiceOk && !FeatureStateProvider::isFeatureEnabled(VendInvoiceExtendInvoiceIdFeature::instance()) && strLen(vendInvoiceInfoTable.Num) > 20)
                {
                    invoiceOk = checkFailed(strFmt("@AccountsPayable:VendInvoiceWithLongNumFail", vendInvoiceInfoTable.Num));
                }

                if ((invoiceOk
                    || this.parmIsSimulatePosting())
                        && vendInvoiceInfoTable.isAdvance())
                {
                    invoiceOk = this.checkAdvanceInvoicesForStdPostedInvoices();
                }

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]))
                {
                    if (vendInvoiceInfoTable.isNonPO())
                    {
                        invoiceOk = invoiceOk && TradeBLWIParameters::checkBLWI(vendInvoiceInfoTable.RecId,
                            TradeBLWITypeOfForm::VendInvoice,
                            vendInvoiceInfoTable.vendTable_InvoiceAccount());
                    }
                    else
                    {
                        invoiceOk = invoiceOk && TradeBLWIParameters::checkBLWI(purchTable.RecId,
                            TradeBLWITypeOfForm::PurchTable,
                            purchTable.vendTable_InvoiceAccount());
                    }

                    if (!Bank_BE::checkPaymentId(vendInvoiceInfoTable.PaymId))
                    {
                        invoiceOk = false;
                    }
                }
            }
            else
            {
                // Only perform this check if the invoice is on hold and user is printing, otherwise the check was done as a part of checkLines
                if (printFormletter && !this.checkForMultiplePOLines())
                {
                    invoiceOk = false;
                }
            }

            // Check for price and quantity matching variances
            if (!this.checkMatching())
            {
                invoiceOk = false;
            }

            if (!this.checkInvoicePolicies())
            {
                invoiceOk = false;
            }

            // Check purchase policy spending threshold before posting
            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && invoiceOk)
            {
                invoiceOk = PurchSpendingThresholdValidation_PSN::checkSpendThresholdPolicyValidation(vendInvoiceInfoTable);
                invoiceOk = invoiceOk && this.checkPaymentCombinations();
            }
        }
        else
        {
            invoiceOk = checkFailed(strFmt("@SYS321222", vendInvoiceInfoTable.Num));
        }

        return invoiceOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustVendorInvoiceUseReviewProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a vendor invoice for review process before posting.
    /// </summary>
    /// <returns>
    /// true if is proforma or request status meets the conditions; otherwise, false.
    /// </returns>
    protected boolean mustVendorInvoiceUseReviewProcess()
    {
        InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy  = purchTable.interCompanyEndPointActionPolicy();

        return (this.proforma()
            || (interCompanyEndpointActionPolicy && interCompanyEndpointActionPolicy.BypassVendorInvoiceWorkflowForIntercompanyVendorInvoices)
            || vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Approved
            || (vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::InReview && this.parmExecutingPaymentAuthorizationTask())
            || (vendInvoiceInfoTable.RequestStatus != VendInvoiceRequestStatus::InReview && (MCRRoyaltyVendTrans::existsVendInvoiceId(vendInvoiceInfoTable.Num) || !VendInvoiceHeaderWorkflow::findWorkflowConfigurationToActivate(vendInvoiceInfoTable))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoiceMatchingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if use invoice matching is enabled.
    /// </summary>
    /// <param name = "_vendParameters">
    /// A <c>VendParameters</c> record.
    /// </param>
    /// <returns>
    /// true if use invoice matching is enabled; otherwise, false.
    /// </returns>
    protected boolean checkInvoiceMatchingEnabled(VendParameters _vendParameters)
    {
        return (_vendParameters.editUseInvoiceMatching() == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoicePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates an invoice against vendor invoice policy before posting.
    /// </summary>
    /// <returns>
    /// true if the invoice passes the vendor invoice policy checks; otherwise, false.
    /// </returns>
    protected boolean checkInvoicePolicies()
    {
        boolean ok = true;
        VendInvoicePolicyValidation invoicePolicyValidation = new VendInvoicePolicyValidation();
        VendParameters vendParameters = VendParameters::find();

        if (this.checkInvoiceMatchingEnabled(vendParameters))
        {
            if (vendParameters.PostInvoiceMatchDiscrepancies == InvoiceMatchPostingOption::RequireApproval && !vendInvoiceInfoTable.VarianceApproved)
            {
                invoicePolicyValidation.parmVendInvoiceInfoTable(vendInvoiceInfoTable);

                if (invoicePolicyValidation.checkVendorInvoicePolicyValidation())
                {
                    ok = checkFailed(strFmt("@SYS319899", vendInvoiceInfoTable.Num));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLedgerPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether posting in the ledger period is allowed.
    /// </summary>
    /// <returns>
    ///    true if posting in the ledger period is allowed; otherwise, false.
    /// </returns>
    protected boolean checkLedgerPeriod()
    {
        RecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        boolean ok = LedgerFiscalCalendar::checkLedgerPeriodDateModule(calendarRecId, vendInvoiceInfoTable.updateDate(), SysModule::Purch);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLines</Name>
				<Source><![CDATA[
    protected boolean checkLines()
    {
        boolean ok = true;
        VendInvoiceInfoLine invoiceLine;
        // <GIN>
        boolean isCustomsEnabled = TaxParameters::isCustomsEnable_IN();
        // </GIN>

        // Prevent more than one invoice line for the same PO line
        if (ok)
        {
            // <GIN>
            // this validation should be skipped for the customs Import order transaction
            if (!isCustomsEnabled || purchParmUpdate.CustomsImportOrderType_IN != CustomsImportOrderType_IN::ImportOrder)
            {
                // </GIN>
                ok = this.checkForMultiplePOLines();
                // <GIN>
            }
            // </GIN>
        }

        // Validates if there is a setup made for project category validation at the time of post.
        if (ok)
        {
            VendInvoiceInfoLine vendInvoiceInfoLine;
            VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project;

            while select RecID from vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmID == VendInvoiceInfoTable.ParmId &&
                    vendInvoiceInfoLine.TableRefId == VendInvoiceInfoTable.TableRefId
            join ProjId, ProjCategoryId, ProjDataAreaId from vendInvoiceInfoLine_Project
                where vendInvoiceInfoLine_Project.VendInvoiceInfoLineRefRecId == vendInvoiceInfoLine.RecID
            {
                // Change the company to the project company if intercompany project is being used.
                changecompany (vendInvoiceInfoLine_Project.ProjDataAreaId)
                {
                    if (!ProjValProjCategorySetUp::checkProjCategory(vendInvoiceInfoLine_Project.ProjId, vendInvoiceInfoLine_Project.ProjCategoryId))
                    {
                        // The combination project/category is mandatory, but does not exist for project '%1' and category '%2'.
                        ok = checkFailed(strFmt("@SYS69535", vendInvoiceInfoLine_Project.ProjId, vendInvoiceInfoLine_Project.ProjCategoryId));
                    }
                }

            }

        }

        // Don't allow posting of any line against unconfirmed PO
        if (ok
            || this.parmIsSimulatePosting())
        {
            // The header's PO is checked in PurchFormletterProvider.checkHeading()
            while select OrigPurchId from invoiceLine
                group by OrigPurchId
                where invoiceLine.ParmId == vendInvoiceInfoTable.ParmId &&
                      invoiceLine.TableRefId == vendInvoiceInfoTable.TableRefId &&
                      invoiceLine.OrigPurchId != '' &&
                      invoiceLine.OrigPurchId != vendInvoiceInfoTable.PurchId
            {
                if (invoiceLine.purchTable().DocumentState != VersioningDocumentState::Confirmed)
                {
                    ok = checkFailed(strFmt("%1, %2", invoiceLine.OrigPurchId, "@SYS309931"));
                }
            }
        }

        if ((ok || this.parmIsSimulatePosting())
            && VendParameters::IsBlockPostingAndSubmissionToWorkflow()
            && !VendInvoiceWorkflowValidation::validateInvoiceQuantityLessThanProductReceiptQuantity(vendInvoiceInfoTable))
        {
            ok = checkFailed(strFmt("@AccountsPayable:InvoiceQuantityLessThanProductReceiptQuantity", vendInvoiceInfoTable.Num));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMatching</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates an invoice for matching variances before posting.
    /// </summary>
    /// <returns>
    ///    true if the invoice passes the matching checks; otherwise, false.
    /// </returns>
    protected boolean checkMatching()
    {
        VendParameters vendParameters = VendParameters::find();

        // If user is not using invoice matching, return true
        if (!this.checkInvoiceMatchingEnabled(vendParameters))
        {
            return true;
        }

        // If user has already approved the invoice, return true
        if (vendInvoiceInfoTable.VarianceApproved == NoYes::Yes)
        {
            return true;
        }

        // Update the expected values for all lines on this invoice
        VendInvoiceMatchingLine::updateExpectedValues(vendInvoiceInfoTable);

        // Update the expected values for invoice totals
        if (vendParameters.UseTotalPriceMatching == NoYes::Yes)
        {
            VendInvoiceMatching::updateExpectedValues(vendInvoiceInfoTable, true);
        }

        // Update the expected values for all the Misc Charges on this invoice.
        if (vendParameters.UseMiscChargeMatching == NoYes::Yes)
        {
            VendInvoiceInfoMarkupMatchingTolerance::updateMiscChargeTolerance(this.ParmId, vendInvoiceInfoTable.TableRefId, true);
            VendInvoiceInfoSubMarkupMatchingTrans::updateExpectedValues(vendInvoiceInfoTable, true);
        }

        // If user does not want posting errors, return true if matching has been performed at least one time.
        if (vendParameters.PostInvoiceMatchDiscrepancies == InvoiceMatchPostingOption::AllowWithWarning)
        {
            if (vendInvoiceInfoTable.LastMatchVariance == LastMatchVarianceOptions::OK
                || vendInvoiceInfoTable.LastMatchVariance == LastMatchVarianceOptions::Warning
                || !vendParameters.editAutomaticHeaderMatching()
                || purchTable.isInterCompanyOrder())
            {
                // Matching was performed before and if it was unsuccessful, warning was already given.
                return true;
            }

            if (vendInvoiceInfoTable.Hold == NoYes::No && vendInvoiceInfoTable.checkIfMatched(false, true) == LastMatchVarianceOptions::Warning)
            {
                return checkFailed(strFmt("@SYS137185", vendInvoiceInfoTable.Num));
            }
        }
        else
        {
            // If the invoice isn't on hold, check for matching variances. If the check fails, return an error
            if (vendInvoiceInfoTable.Hold == NoYes::No && vendInvoiceInfoTable.checkIfMatched(false, true) == LastMatchVarianceOptions::Warning)
            {
                return checkFailed(strFmt("@SYS117291", vendInvoiceInfoTable.Num));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentCombinations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether payment schedule, payment group or vendor bank is defined or their combination is defined.
    /// </summary>
    /// <returns>
    /// true if only payment schedule or payment group or vendor bank is defined; otherwise, false.
    /// </returns>
    private boolean checkPaymentCombinations()
    {
        boolean ret = true;
        Percent sumOfAllocationPercentage = VendInvoiceInfo_PaymentDisbursement::getSumOfAllocationPercentage(vendInvoiceInfoTable.ParmId, vendInvoiceInfoTable.TableRefId);

        if ((vendInvoiceInfoTable.PaymentSched && vendInvoiceInfoTable.VendPaymentGroup) ||
            (vendInvoiceInfoTable.PaymentSched && sumOfAllocationPercentage > 0) ||
            (vendInvoiceInfoTable.VendPaymentGroup && sumOfAllocationPercentage > 0))
        {
            ret = false;
            error("@SPS286");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVATTaxAgentChargeType_RU</Name>
				<Source><![CDATA[
    protected boolean checkVATTaxAgentChargeType_RU()
    {
        return vendInvoiceJour.checkVATTaxAgentChargeType_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the links between the invoice journal lines and the agreement lines.
    /// </summary>
    protected void createAgreementLinks()
    {
        AgreementLineReleasedLine agreementLineReleasedLineInsert;
        AgreementLineReleasedLine agreementLineReleasedLine;
        VendInvoiceTrans invoiceTrans;
        VendInvoiceJour invoiceJour = this.getJournal();
        RefTableId refRelationType = tableNum(VendInvoiceTrans);

        insert_recordset agreementLineReleasedLineInsert (ReferenceRelationType, VendInvoiceTrans, AgreementLine)
            select refRelationType, RecId from invoiceTrans
                where invoiceTrans.PurchID == invoiceJour.PurchId
                   && invoiceTrans.InvoiceId == invoiceJour.InvoiceId
                   && invoiceTrans.InvoiceDate == invoiceJour.InvoiceDate
                   && invoiceTrans.NumberSequenceGroup == invoiceJour.NumberSequenceGroup
                   && invoiceTrans.InternalInvoiceId == invoiceJour.InternalInvoiceId
             join AgreementLine from agreementLineReleasedLine
                where invoiceTrans.InventTransId == agreementLineReleasedLine.PurchLineInventTransId
                   && invoiceTrans.DataAreaId == agreementLineReleasedLine.PurchLineDataAreaId
                   && !agreementLineReleasedLine.IsDeleted
                   && agreementLineReleasedLine.ReferenceRelationType == tableNum(PurchLine);

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            // insert Agreement Release line for Direct invoicing
            insert_recordset agreementLineReleasedLineInsert (ReferenceRelationType, VendInvoiceTrans, AgreementLine)
                select refRelationType, RecId, AgreementLine_PSN from invoiceTrans
                    where invoiceTrans.PurchID == invoiceJour.PurchId
                        && invoiceTrans.InvoiceId == invoiceJour.InvoiceId
                        && invoiceTrans.InvoiceDate == invoiceJour.InvoiceDate
                        && invoiceTrans.NumberSequenceGroup == invoiceJour.NumberSequenceGroup
                        && invoiceTrans.InternalInvoiceId == invoiceJour.InternalInvoiceId
                        && invoiceTrans.AgreementLine_PSN != 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal header when updating the sales order, the purchase order, or the request for
    /// quote.
    /// </summary>
    protected void createJournalHeader()
    {
        // <GIN>
        AmountCur taxCustomsDuty;
        AmountCur invoiceTaxValue;
        VendInvoiceInfoTable_IN vendInvoiceInfoTableLoc;
        // </GIN>

        // <GEECZ>
        VendInvoiceJourSymbol vendInvoiceJourSymbol;
        // </GEECZ>
        // <GIN>
        if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && TaxParameters::isCustomsEnable_IN())
        {
            taxCustomsDuty = this.parmTax().getCustomsDuty_IN();
            vendInvoiceJour.InvoiceAmount = vendInvoiceJour.InvoiceAmount - taxCustomsDuty;
        }

        if (TaxParameters::checkTaxParameters_IN() && !taxCustomsDuty)
        {
            if (vendInvoiceInfoTable.RecId != 0)
            {
                invoiceTaxValue = PurchTotals_ParmTrans::getInclTaxAmountForPostingPerTable_IN(vendInvoiceInfoTable);
            }
            else
            {
                invoiceTaxValue = PurchTotals_ParmTrans::getInclTaxAmountForPostingPerTable_IN(purchTable);
            }

            vendInvoiceJour.InvoiceAmount = vendInvoiceJour.InvoiceAmount - invoiceTaxValue;
        }

        if (TaxParameters::isExciseEnable_IN())
        {
            vendInvoiceInfoTableLoc = vendInvoiceInfoTable.vendInvoiceInfoTable_IN();
            vendInvoiceInfoTableLoc.ExciseInvoiceAddress = this.parmExciseInovoiceAddress_IN();
        }
        // <GEEPL>
        this.initJournalHeaderFromSAD_PL();
        // </GEEPL>
        // </GIN>
        if (FeatureStateProvider::isFeatureEnabled(ProjOpsSubContractPurchaseOrderFeature::instance()) 
            && vendInvoiceInfoTable.RecId)
        {
            ProjCDSActualsImportSubConHelper::updateActualsWithProductReceiptId(vendInvoiceInfoTable.Num, vendInvoiceInfoTable.RecId);
        }
        vendInvoiceJour.write();

        if (!this.proforma()
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            EInvoice_IT::newVendInvoice(vendInvoiceJour);
        }

        // <GEECZ>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            vendInvoiceJourSymbol.initFromVendInvoiceInfoTable(vendInvoiceJour, vendInvoiceInfoTable.RecId);
            if (vendInvoiceJourSymbol.VendInvoiceJour)
            {
                vendInvoiceJourSymbol.insert();
            }
        }
        // </GEECZ>

        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
        {
            TaxSpecificExchangeRateHelper::transferTaxSpecificExchangeRateType(
                vendInvoiceInfoTable.TableId,
                vendInvoiceInfoTable.RecId,
                vendInvoiceJour.TableId,
                vendInvoiceJour.RecId);
        }
        // <GEEU>
        else if (TaxParameters::isBankExchRateEnabled_W())
        {
            SalesTaxExchangeRateHelper::changeSourceRecord(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId, vendInvoiceJour.TableId, vendInvoiceJour.RecId);
        }
        // </GEEU>

        if (TradeBLWIParameters::isBLWIFeatureEnabled())
        {
            if (vendInvoiceInfoTable.isNonPO())
            {
                TradeBLWIJournalPurposeCodes::createRecordFromJournal(vendInvoiceInfoTable.RecId,
                    TradeBLWITypeOfForm::VendInvoice,
                    vendInvoiceJour.RecId,
                    TradeBLWITypeOfForm::VendInvoiceJour);
            }
            else
            {
                TradeBLWIJournalPurposeCodes::createRecordFromJournal(purchTable.RecId,
                    TradeBLWITypeOfForm::PurchTable,
                    vendInvoiceJour.RecId,
                    TradeBLWITypeOfForm::VendInvoiceJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VendInvoiceTrans</c> table buffer.
    /// </summary>
    /// <param name = "_vendInvoiceInfoLine">
    /// A <c>VendInvoiceInfoLine</c> record.
    /// </param>
    protected void initVendInvoiceTrans(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        vendInvoiceTrans.RecId = systemSequence.reserveValues(1, vendInvoiceTrans.TableId);

        vendInvoiceTrans.initValue();

        vendInvoiceTrans.initFromVendInvoiceJour(vendInvoiceJour);
        vendInvoiceTrans.initFromParmLine(_vendInvoiceInfoLine);
        vendInvoiceTrans.initFromParmTable(vendInvoiceInfoTable);
        vendInvoiceTrans.initFromVendInvoiceInfoLine(_vendInvoiceInfoLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    protected void createJournalLine(Common _vendInvoiceInfoLine)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine = _vendInvoiceInfoLine;

        purchLine.clear();
        vendInvoiceTrans.clear();

        systemSequence.suspendRecIds(vendInvoiceTrans.TableId);

        this.initVendInvoiceTrans(vendInvoiceInfoLine);

        if (vendInvoiceInfoLine.isNonPO() || vendInvoiceInfoLine.isAdvance())
        {
            if (vendInvoiceInfoLine.isCategoryBased())
            {
                vendInvoiceTrans.initFromVendInvoiceLineForeignTrade(VendInvoiceLineForeignTradeCategory::findVendInvoiceInfoLine(vendInvoiceInfoLine));
            }
            // <GIN>
            // Assign TDS and TCS group when it's Non PO or prepayment.
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                VendInvoiceInfoLineTaxExtension_IN vendInvoiceInfoLineTaxExtension_IN = VendInvoiceInfoLineTaxExtension_IN::findByVendInvoiceInfoLineRecId(vendInvoiceInfoLine.RecId);
                vendInvoiceTrans.tdsGroup_IN = vendInvoiceInfoLineTaxExtension_IN.TDSGroup;
                vendInvoiceTrans.tcsGroup_IN = vendInvoiceInfoLineTaxExtension_IN.TCSGroup;
            }
            // </GIN>

            if (Project::Enabled())
            {
                VendInvoiceInfoLine_Project projVendInvoiceInfoLine = VendInvoiceInfoLine_Project::findByVendInvoiceInfoLineRefRecId(vendInvoiceInfoLine.RecId);

                if (projVendInvoiceInfoLine)
                {
                    ProjPWPVendorRetentionSetting projVendorRetentionSetting = ProjPWPVendorRetentionSetting::findByProjVendor(projVendInvoiceInfoLine.ProjId, vendInvoiceJour.OrderAccount);

                    if (projVendorRetentionSetting.PwpThresholdPercent > 0)
                    {
                        vendInvoiceTrans.IsPwp = NoYes::Yes;
                        vendInvoiceTrans.ReadyForPayment = NoYesCombo::No;
                    }
                }
            }
        }
        else
        {
            purchLine = vendInvoiceInfoLine.purchLine();

            if (purchLine.pdsCalculationId)
            {
                PDSAdvancedPricing_PurchLine::newPurchLine(purchLine).updatePurchLineAmount();
            }

            InventQualityManagementBlockHandler::blockPurchaseInvoice(purchLine);

            vendInvoiceTrans.initFromPurchLine(purchLine, vendInvoiceInfoLine);

            vendInvoiceTrans.PartDelivery = !(purchLine.PurchStatus == PurchStatus::Invoiced && purchLine.PurchQty == vendInvoiceTrans.Qty);

            if (purchLine.isCategoryBased())
            {
                vendInvoiceTrans.initFromPurchLineForeignTradeCategory(PurchLineForeignTradeCategory::findpurchLine(purchLine));
            }

            if (Project::Enabled())
            {
                if (vendInvoiceInfoLine.psaIsFinal
                    || (ProjAllowToSettlePartialReleaseVendorRetentionInvoiceFlight::instance().isEnabled()
                    && ProjVendorInvoiceRetentionCalcFeatureHelper::isTransitionFlightEnabled()
                    && vendInvoiceInfoLine.ReceiveNow == 0 
                    && vendInvoiceInfoLine.PSAReleaseAmount != 0))
                {
                    vendInvoiceTrans.ReadyForPayment = NoYesCombo::Yes;
                }
            }
        }

        vendInvoiceTrans.setLineNum(lineNum);

        vendInvoiceTrans.TaxGroup = vendInvoiceInfoLine.TaxGroup;
        vendInvoiceTrans.TaxItemGroup = vendInvoiceInfoLine.TaxItemGroup;
        vendInvoiceTrans.OverrideSalesTax = vendInvoiceInfoLine.OverrideSalesTax;
        vendInvoiceTrans.InventQty = vendInvoiceInfoLine.InventNow;
        vendInvoiceTrans.PdsCWQty = vendInvoiceInfoLine.PdsCWReceiveNow;
        vendInvoiceTrans.LineAmount = vendInvoiceInfoLine.lineAmountExclTax(vendInvoiceJour.InvoiceDate);
        vendInvoiceTrans.LineAmountTax = vendInvoiceInfoLine.LineAmount - vendInvoiceTrans.LineAmount;
        vendInvoiceTrans.LineAmountMST = vendInvoiceJour.amountMST(vendInvoiceTrans.LineAmount);

        if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled()
            || BrazilParameters::isEnabled())
        {
            vendInvoiceTrans.TaxWithholdGroup_TH = vendInvoiceInfoLine.TaxWithholdGroup;
            vendInvoiceTrans.TaxWithholdItemGroupHeading_TH = vendInvoiceInfoLine.TaxWithholdItemGroupHeadingId;
        }

        // Estimated tax used for assetTrans; final vendInvoiceTrans.TaxAmount is determined after posting all lines
        vendInvoiceTrans.TaxAmount = this.parmTax().taxInCostPrice(vendInvoiceInfoLine.TableId, vendInvoiceInfoLine.RecId);

        // <GEERU>
        if (countryRegion_RU &&
            (vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::CommissionPrincipalAgent || vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::Bailee))
        {
            vendInvoiceTrans.FacturedFully_RU = NoYes::Yes;
        }
        // </GEERU>

        this.insertJournalLine(vendInvoiceTrans);

        this.createPackingSlipLine(_vendInvoiceInfoLine);

        // <GEERU>
        if (countryRegion_RU && vendInvoiceInfoLine.existsCorrLink_RU())
        {
            VendInvoiceTransCorrLink_RU vendInvoiceTransCorrLink;
            vendInvoiceTransCorrLink.TransRecId = vendInvoiceTrans.RecId;
            vendInvoiceTransCorrLink.CorrTransRecId = vendInvoiceInfoLine.vendInvoiceInfoLineCorrLink_RU().CorrTransRecId;

            recordListCorrLinks.add(vendInvoiceTransCorrLink);
        }
        // </GEERU>

        // Create Rebate Specific VendInvoiceTrans
        if (#TAMVendRebateEnabled)
        {
            this.createTAMVendRebateVendInvoiceTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    protected void createJournalLink(Common _vendInvoiceInfoLine)
    {
        VendInvoicePurchLink vendInvoicePurchLink;
        VendInvoiceInfoLine vendInvoiceInfoLine = _vendInvoiceInfoLine;

        vendInvoicePurchLink.clear();
        vendInvoicePurchLink.initFromParmLine(vendInvoiceInfoLine);
        vendInvoicePurchLink.initFromVendInvoiceJour(vendInvoiceJour);

        this.insertJournalLink(vendInvoicePurchLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPackingSlipLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a packing slip line for the part of the invoice quantity that has not been packing slip
    ///    updated already.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    ///    A <c>VendInvoiceInfoLine</c> record.
    /// </param>
    protected void createPackingSlipLine(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        PurchLine localPurchLine;
        VendInvoiceInfoLine localVendInvoiceInfoLine;

        if (!_vendInvoiceInfoLine.isNonPO() && purchLine.isDropShipment() && !this.proforma())
        {
            if (vendInvoiceTrans.Qty * purchLine.RemainPurchFinancial >= 0 && abs(vendInvoiceTrans.Qty) > abs(purchLine.RemainPurchFinancial))
            {
                localPurchLine = purchLine.data();
                localPurchLine.PurchReceivedNow = vendInvoiceTrans.Qty - purchLine.RemainPurchFinancial;
                localPurchLine.InventReceivedNow = vendInvoiceTrans.InventQty - purchLine.RemainInventFinancial;
                packingSlipUpdateList.addEnd(localPurchLine);

                select forupdate localVendInvoiceInfoLine
                    where localVendInvoiceInfoLine.RecId == _vendInvoiceInfoLine.RecId;

                localVendInvoiceInfoLine.RemainBeforeInventPhysical -= localPurchLine.InventReceivedNow;
                localVendInvoiceInfoLine.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTAMVendRebateVendInvoiceTrans</Name>
				<Source><![CDATA[
    private void createTAMVendRebateVendInvoiceTrans()
    {
        TAMVendRebateVendInvoiceTrans tamVendRebateVendInvoiceTrans;

        tamVendRebateVendInvoiceTrans.initFromPurchTablePurchLine(purchTable, purchLine);
        tamVendRebateVendInvoiceTrans.VendInvoiceTransRecId = vendInvoiceTrans.RecId;
        recordListTAMVendRebateVendInvoiceTrans.add(tamVendRebateVendInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endCreate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes after a journal is created.
    /// </summary>
    protected void endCreate()
    {
        #ISOCountryRegionCodes
        // <GTE>
        VendInvoiceTrans            vendInvoiceTransLoc;
        TransitDocumentManager_IN   transitManager;
        // </GTE>
        // <GEERU>
        NumberSeq               numberSeqInventBailee;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])         &&
            ! this.proforma()                                                    &&
            vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::Bailee &&
            vendInvoiceJour.PurchaseType         != PurchaseType::ReturnItem     &&
            vendInvoiceJour.hasPositiveTrans_RU())
        {
            numberSeqInventBailee = NumberSeq::newGetNum(VendParameters::numRefInventBaileeReceiptReportId_RU(), false, true);
            if (! numberSeqInventBailee)
            {
                throw error("@GLS115662");
            }
            vendInvoiceJour.InventBaileeReceiptReportId_RU = numberSeqInventBailee.num();
            vendInvoiceJour.doUpdate();
        }
        // </GEERU>

        super();

        this.postPackingSlip();

        if (#PdsVendBatchEnabled && this.isJournalCreated())
        {
            //cascade only if nothing went wrong on the posting
            this.cascadeAllPdsVendBatchInfo();
        }
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.endCreateTrans_IN();
        }
        // </GIN>

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            transitManager = TransitDocumentManager_IN::newManager();
            transitManager.transit(vendInvoiceInfoTable, vendInvoiceJour);

            while select SourceDocumentLine from vendInvoiceTransLoc
                where vendInvoiceTransLoc.InvoiceId             == vendInvoiceJour.InvoiceId
                    && vendInvoiceTransLoc.PurchID              == vendInvoiceJour.PurchId
                    && vendInvoiceTransLoc.InvoiceDate          == vendInvoiceJour.InvoiceDate
                    && vendInvoiceTransLoc.NumberSequenceGroup  == vendInvoiceJour.NumberSequenceGroup
            {
                transitManager.transit(
                    VendInvoiceInfoLine::findSourceDocumentLine(vendInvoiceTransLoc.SourceDocumentLine),
                    vendInvoiceTransLoc,
                    vendInvoiceJour);
            }
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxBusinessService::transferTaxDocument(vendInvoiceInfoTable, vendInvoiceJour);
        }
        // </GTE>

        if (VendInvoiceAutomationStateManagement::isAutomationInvoice(vendInvoiceInfoTable)
            && !this.proforma())
        {
            // For an automated invoice, update the document event log record(s)
            // from 'VendInvoiceInfoTable' and 'VendInvoiceInfoLine' to 'VendInvoiceJour' and 'VendInvoiceTrans' respectively.
            this.transferDocumentHistoryLog();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDocumentHistoryLog</Name>
				<Source><![CDATA[
    private void transferDocumentHistoryLog()
    {
        if (vendInvoiceInfoTable.RecId != 0)
        {
            DocumentEventLogTransferReferencesTmp documentEventLogTransferReferencesTmp;
            VendInvoiceInfoTable vendInvoiceInfoTableLocal;
            VendInvoiceJour vendInvoiceJourLocal;
            TableId vendInvoiceInfoTableId = tableNum(VendInvoiceInfoTable);
            TableId vendInvoiceJourTableId = tableNum(VendInvoiceJour);

            // Transfer the header from 'VendInvoiceInfoTable' to 'VendInvoiceJour'
            insert_recordset documentEventLogTransferReferencesTmp
                (OriginalSourceTableId,
                OriginalSourceRecId,
                TransferredSourceTableId,
                TransferredSourceRecId)
                select vendInvoiceInfoTableId, RecId from vendInvoiceInfoTableLocal
                group by vendInvoiceInfoTableLocal.RecId, vendInvoiceJourLocal.RecId
                join vendInvoiceJourTableId, RecId from vendInvoiceJourLocal
                where vendInvoiceInfoTableLocal.SourceDocumentHeader == vendInvoiceJourLocal.SourceDocumentHeader
                    && vendInvoiceInfoTableLocal.RecId == vendInvoiceInfoTable.RecId;

            VendInvoiceInfoLine vendInvoiceInfoLineLocal;
            VendInvoiceTrans vendInvoiceTransLocal;
            TableId vendInvoiceInfoLineTableId = tableNum(VendInvoiceInfoLine);
            TableId vendInvoiceTransTableId = tableNum(VendInvoiceTrans);

            // Transfer the lines from 'VendInvoiceInfoLine' to 'VendInvoiceTrans'
            insert_recordset documentEventLogTransferReferencesTmp
                (OriginalSourceTableId,
                OriginalSourceRecId,
                TransferredSourceTableId,
                TransferredSourceRecId)
                select vendInvoiceInfoLineTableId, RecId from vendInvoiceInfoLineLocal
                group by vendInvoiceInfoLineLocal.RecId, vendInvoiceTransLocal.RecId
                join vendInvoiceInfoTableLocal
                where vendInvoiceInfoTable.RecId == vendInvoiceInfoTableLocal.RecId
                    && vendInvoiceInfoLineLocal.ParmId == vendInvoiceInfoTableLocal.ParmId
                    && vendInvoiceInfoLineLocal.TableRefId == vendInvoiceInfoTableLocal.TableRefId
                join vendInvoiceTransTableId, RecId from vendInvoiceTransLocal
                where vendInvoiceInfoLineLocal.SourceDocumentLine == vendInvoiceTransLocal.SourceDocumentLine;

            DocumentEventLog::transferReferences(documentEventLogTransferReferencesTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endCreateTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends create transaction.
    /// </summary>
    protected void endCreateTrans_IN()
    {
        VendInvoiceTrans vendInvoiceTransLoc;

        while select vendInvoiceTransLoc
            where vendInvoiceTransLoc.InvoiceId == vendInvoiceJour.InvoiceId
                && vendInvoiceTransLoc.PurchID == vendInvoiceJour.PurchId
                && vendInvoiceTransLoc.InvoiceDate == vendInvoiceJour.InvoiceDate
                && vendInvoiceTransLoc.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
                && vendInvoiceTransLoc.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
        {
            if (purchTable.purchTable_W().CustomsImportOrder_IN)
            {
                EximVendInvoiceTrans_IN::insertEximVendInvoiceTrans(vendInvoiceTransLoc.RecId, vendInvoiceTransLoc.purchLine().RecId);
            }

            TableId sourceTableId;
            RefRecId sourceRecId;

            if (vendInvoiceTransLoc.InventTransId && vendInvoiceTransLoc.OrigPurchId)
            {
                sourceTableId = tableNum(PurchLine);
                sourceRecId = vendInvoiceTransLoc.purchLine().RecId;
            }
            else
            {
                sourceTableId = tableNum(VendInvoiceInfoLine);
                sourceRecId = VendInvoiceInfoLine::findSourceDocumentLine(vendInvoiceTransLoc.SourceDocumentLine).RecId;
            }

            VendInvoiceTransTaxExtensionIN::insertVendInvoiceExtensionIN(vendInvoiceTransLoc.RecId, sourceTableId, sourceRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    protected FormletterType formletterType()
    {
        return FormletterType::Purchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatchWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight registered quantity for the specified line.
    /// </summary>
    /// <param name="_inventMovement">
    /// The inventory movement related to the line.
    /// </param>
    /// <param name="_vendInvoiceInfoLine">
    /// The line being processed.
    /// </param>
    /// <returns>
    /// The weight for the catch weight quantity.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Insufficient inventory transactions with status Registered.
    /// </exception>
    protected InventQty getCatchWeight(InventMov_Purch _inventMovement, VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        PdsCWInventQty cwQtyNotAssigned = _vendInvoiceInfoLine.PdsCWReceiveNow;
        InventQty qtyAssigned = 0;
        PdsCatchWeightMovementQtyAdjustment pdsCatchWeightMovementQtyAdjustment;
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
        boolean assignedFromSubLines = false;

        pdsCatchWeightMovementQtyAdjustment = PdsCatchWeightMovementQtyAdjustment::newPurchInvoice(
            _inventMovement,
            _vendInvoiceInfoLine);

        while select PdsCWInventNow, InventNow, DocumentId, JournalRefRecId, JournalRefTableId
            from vendInvoiceInfoSubLine
            where vendInvoiceInfoSubLine.LineRefRecId == _vendInvoiceInfoLine.RecId
        {
            if (vendInvoiceInfoSubLine.JournalRefTableId == tableNum(VendPackingSlipTrans))
            {
                VendPackingSlipTrans packingSlipTrans = VendPackingSlipTrans::findRecId(vendInvoiceInfoSubLine.JournalRefRecId);
                pdsCatchWeightMovementQtyAdjustment.parmInventDimCriteria(packingSlipTrans.inventDim());

                InventDimParm inventDimParm;
                inventDimParm.initPhysicalDimensionsFromInventDim(
                    InventDimGroupSetup::newItemId(_inventMovement.itemId()),
                    pdsCatchWeightMovementQtyAdjustment.parmInventDimCriteria());

                inventDimParm.InventStatusFlag = NoYes::No;
                inventDimParm.InventLocationIdFlag = NoYes::No;
                inventDimParm.WMSLocationIdFlag = NoYes::No;

                // product receipt can have different batch ID from its inventory transactions, i.e. batch id in purhcase line is different
                // from its registered batch ID on invenotry transactions. So ignore batch ID flag here and sort the invenotry transaction later
                if (inventDimParm.InventBatchIdFlag)
                {
                    inventDimParm.InventBatchIdFlag = NoYes::No;
                }
                
                pdsCatchWeightMovementQtyAdjustment.parmInventDimParm(inventDimParm);
                pdsCatchWeightMovementQtyAdjustment.parmInventDimPhysicalMatched(packingSlipTrans.InventDimId);
            }

            if (vendInvoiceInfoSubLine.PdsCWInventNow == 0 
                && vendInvoiceInfoSubLine.InventNow != 0 
                && _vendInvoiceInfoLine.purchLine().isInterCompanyOrder())
            {
                qtyAssigned += vendInvoiceInfoSubLine.InventNow;
            }
            else
            {
                using (InventCWPostWithInventDimPhysicalMatchContext context = InventCWPostWithInventDimPhysicalMatchContext::construct())
                {
                    context.parmConsiderInventDimPhysicalMatched(pdsCatchWeightMovementQtyAdjustment.parmInventDimPhysicalMatched() != '');

                    qtyAssigned += pdsCatchWeightMovementQtyAdjustment.purchReceiptQty(
                        DocumentStatus::Invoice,
                        vendInvoiceInfoSubLine.PdsCWInventNow,
                        vendInvoiceInfoSubLine.DocumentId);
                }
            }

            if (!pdsCatchWeightMovementQtyAdjustment.isFullCatchWeightQuantityAssigned())
            {
                warning("@SCM:ItemFullCatchWeightQuantityNotAssignedReceive");
                Info("@SCM:InventOrderRegisterGeneralGuide");
                throw error(strFmt("@SYS54028",StatusReceipt::Registered));
            }

            cwQtyNotAssigned -= vendInvoiceInfoSubLine.PdsCWInventNow;
            assignedFromSubLines = true;
        }

        if (!assignedFromSubLines)
        {
            // Assign quantities when there is no explicit matching
            qtyAssigned += pdsCatchWeightMovementQtyAdjustment.purchReceiptQty(
                DocumentStatus::Invoice,
                cwQtyNotAssigned);

            if (!pdsCatchWeightMovementQtyAdjustment.isFullCatchWeightQuantityAssigned())
            {
                warning("@SCM:ItemFullCatchWeightQuantityNotAssignedReceive");
                Info("@SCM:InventOrderRegisterGeneralGuide");
                throw error(strFmt("@SYS54028",StatusReceipt::Registered));
            }
        }
        else
        {
            if (cwQtyNotAssigned > 0)
            {
                warning("@SCM:ItemCatchWeightQuantityNotAssigned");
                Info("@SCM:InventOrderRegisterGeneralGuide");
                throw error(strFmt("@SYS54028",StatusReceipt::Registered));
            }
        }

        return qtyAssigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostLedgerVoucher</Name>
				<Source><![CDATA[
    protected Voucher getCostLedgerVoucher()
    {
        if (SourceDocumentCompletionRule::useSingleVoucher())
        {
            return voucher;
        }
        else
        {
            if (this.doesInvoiceMeetCriteriaForCreditNote())
            {
                return NumberSeq::newGetVoucher(NumberSeqReference::findReference(extendedTypeNum(InventPurchCreditVoucher))).voucher();
            }
            else
            {
                return NumberSeq::newGetVoucher(NumberSeqReference::findReference(extendedTypeNum(InventPurchInvoiceVoucher))).voucher();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    public Common getJournal()
    {
        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumAndVoucher</Name>
				<Source><![CDATA[
    protected container getNumAndVoucher()
    {
        container numAndVoucher;

        if (!this.proforma() && journalNumber == '')
        {
            numberSeq = this.allocateNumAndVoucher();
            if (numberSeq)
            {
                if (useInternalNumber)
                {
                    numAndVoucher = numberSeq.numAndVoucher();

                    Num newNum = conPeek(numAndVoucher, 1);
                    Voucher newVoucher = conPeek(numAndVoucher, 2);
                    numAndVoucher = [internalNumber, newNum, newVoucher];
                }
                else
                {
                    numAndVoucher = [internalNumber, '', numberSeq.voucher()];
                }
            }
        }

        return numAndVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorAdvanceLedgerVoucherId</Name>
				<Source><![CDATA[
    private RefRecId getVendorAdvanceLedgerVoucherId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(PurchAdvanceVoucher)).NumberSequenceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCatchWeightValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts inventory quantities for catch weight items which have been registered.
    /// </summary>
    protected void initCatchWeightValues()
    {
        VendInvoiceInfoLine localVendInvoiceInfoLine;
        PurchLine localPurchLine;
        InventTransOrigin inventTransOrigin;
        InventTableModule inventTableModuleInvent;
        InventQty qtyAssigned;
        InventQty inventQtyDelta;
        InventQty inventQtyRemain;
        SalesQty purchQtyAssigned;
        SalesQty purchQtyRemain;
        SalesQty purchQtyDelta;
        InventMov_Purch inventMovement;

        if (!#pdsCatchWeightEnabled)
        {
            return;
        }

        // process invoice lines for the inventoried items, where the catch weight has been received
        while select forupdate localVendInvoiceInfoLine
            where localVendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId &&
                localVendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId &&
                localVendInvoiceInfoLine.PdsCWReceiveNow > 0
            join UnitId from inventTableModuleInvent
                where inventTableModuleInvent.ItemId == localVendInvoiceInfoLine.ItemId &&
                    inventTableModuleInvent.ModuleType == ModuleInventPurchSales::Invent
            exists join RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == localVendInvoiceInfoLine.InventTransId
        {
            localPurchLine = localVendInvoiceInfoLine.purchLine(true);
            inventMovement = InventMov_Purch::newFromPurchLine(localPurchLine);

            // Find the catch weight from the inventory transactions
            qtyAssigned = this.getCatchWeight(inventMovement, localVendInvoiceInfoLine);

            if (qtyAssigned > 0 && localVendInvoiceInfoLine.InventNow != qtyAssigned)
            {
                // Find the remain catch weight
                inventQtyRemain = abs(inventMovement.transIdSum().registered() + inventMovement.transIdSum().received() - qtyAssigned);

                inventQtyDelta = qtyAssigned - localVendInvoiceInfoLine.InventNow;
                localPurchLine = localVendInvoiceInfoLine.purchLine();

                // Update purchParmLine with the new values for catch weight
                if (localPurchLine.PurchUnit == inventTableModuleInvent.UnitId)
                {
                    // Same unit so update purch qty related field too
                    localVendInvoiceInfoLine.ReceiveNow += inventQtyDelta;
                    localVendInvoiceInfoLine.RemainBefore = localPurchLine.RemainPurchPhysical;
                    localVendInvoiceInfoLine.RemainAfter = inventQtyRemain;
                }
                else if (UnitOfMeasure::findBySymbol(localPurchLine.PurchUnit).UnitOfMeasureClass == UnitOfMeasure::findBySymbol(inventTableModuleInvent.UnitId).UnitOfMeasureClass)
                {
                    // Same unit class so update purch qty related field too, but convert to proper unit
                    purchQtyAssigned = UnitOfMeasureConverter::convert(
                        qtyAssigned,
                        UnitOfMeasure::unitOfMeasureIdBySymbol(inventTableModuleInvent.UnitId),
                        UnitOfMeasure::unitOfMeasureIdBySymbol(localPurchLine.PurchUnit),
                        NoYes::No,
                        localPurchLine.inventTable().Product);

                    purchQtyDelta = purchQtyAssigned - localVendInvoiceInfoLine.ReceiveNow;

                    localVendInvoiceInfoLine.ReceiveNow += purchQtyDelta;
                    localVendInvoiceInfoLine.RemainBefore = localPurchLine.RemainPurchPhysical;

                    // Convert the remain catch weight to the purch unit qty
                    purchQtyRemain = UnitOfMeasureConverter::convert(
                        inventQtyRemain,
                        UnitOfMeasure::unitOfMeasureIdBySymbol(inventTableModuleInvent.UnitId),
                        UnitOfMeasure::unitOfMeasureIdBySymbol(localPurchLine.PurchUnit),
                        NoYes::No,
                        localPurchLine.inventTable().Product);

                    localVendInvoiceInfoLine.RemainAfter = purchQtyRemain;
                }

                localVendInvoiceInfoLine.InventNow += inventQtyDelta;
                localVendInvoiceInfoLine.RemainBeforeInvent = localPurchLine.RemainInventPhysical;
                localVendInvoiceInfoLine.RemainAfterInvent = inventQtyRemain;
                localVendInvoiceInfoLine.update();
                recordListPurchParmLine = null;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    protected void initJournalHeader()
    {
        NumberSequenceTable numberSequenceTable;
        NumberSequenceReference numberSequenceReference;
        PurchLine purchLineLoc;
        boolean onlyServiceItem = true;
        InventTable inventTable;

        boolean skipPurchConsumpAccount_RU = countryRegion_RU && !VendParameters::find().UsePurchConsumpAccount_RU;
        VendInvoiceJour_IN vendInvoiceJourLoc;
        PurchLine purchLineNum;
        TaxRegistrationNumbers_IN taxRegistrationNumbers;
        ExciseNumSequenceRef_IN exciseNumSequenceRef;
        TransTaxInformation transTaxInformation;

        vendInvoiceJour.clear();
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            select firstonly RecId from purchLineLoc
                 exists join inventTable
                       where purchLineLoc.PurchId == purchTable.PurchId &&
                              purchLineLoc.ItemId == inventTable.ItemId &&
                             !purchLineLoc.IsDeleted &&
                             inventTable.ItemType != ItemType::Service;
            if (purchLineLoc.RecId)
            {
                onlyServiceItem = false;
            }

            numberSequenceReference = NumberSeqReference::findReference(extendedTypeNum(TaxInvoicePurchId));
            numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

            if (onlyServiceItem)
            {
                if (numberSequenceTable.Continuous)
                {
                    vendInvoiceJour.initValue();
                }
            }
            else
            {
                if (!numberSequenceTable.Continuous)
                {
                    throw error(strFmt("@SYS26207", numberSequenceTable.NumberSequence));
                }
                vendInvoiceJour.initValue();
            }
        }
        else
        {
            vendInvoiceJour.initValue();
        }

        [journalNumber, internalNumber, voucher] = this.getNumAndVoucher();

        vendInvoiceJour.ParmId = purchParmUpdate.ParmId;
        vendInvoiceJour.InvoiceId = vendInvoiceInfoTable.Num;

        if (this.isDocAutoNumbering_LTLV())
        {
            if (!LtInvoiceAutoNumberingTable::checkLastDate(ltDocNumberingCode, this.updateDate(), true))
            {
                throw error("@GLS111607");
            }

            NumberSequenceCode numberSequenceCode = LtInvoiceAutoNumberingTable::find(ltDocNumberingCode).NumberSequenceCode;
            journalNumber = NumberSeq::newGetNumFromCode(numberSequenceCode).num();
            if (!journalNumber)
            {
                throw error("@AccountsPayable:MissingInvoiceNumber");
            }

            vendInvoiceJour.NumberSequenceCode_LT = numberSequenceCode;
            vendInvoiceJour.InvoiceId = journalNumber;
            LtInvoiceAutoNumberingTable::updateLastDate(ltDocNumberingCode, this.invoiceDate());
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
        {
            vendInvoiceJour.OffsessionId_RU = vendInvoiceInfoTable.vendInvoiceInfoTable_Officials().OffSessionId;
        }

        if (vendInvoiceJour.InvoiceId == '' && this.isRevision_RU())
        {
            vendInvoiceJour.InvoiceId = NumberSeq::newGetNumFromId(PurchParameters::numRefPurchRevisionInvoiceId_RU().NumberSequenceId, false, true).num();
        }

        vendInvoiceJour.LedgerVoucher = voucher;
        vendInvoiceJour.InternalInvoiceId = internalNumber;
        vendInvoiceJour.InvoiceDate = this.invoiceDate();
        vendInvoiceJour.RemittanceAddress = LogisticsLocationEntity::location2PostalAddress(vendInvoiceInfoTable.RemittanceLocation).RecId;

        if (vendInvoiceInfoTable.Hold == NoYes::Yes)
        {
            // Document on hold should always be proforma
            vendInvoiceJour.Proforma = true;
        }
        else
        {
            vendInvoiceJour.Proforma = this.proforma();
        }

        this.setDeliveryFields();

        vendInvoiceJour.initFromParmTable(vendInvoiceInfoTable);
        vendInvoiceJour.initFromVendInvoiceInfoTable(vendInvoiceInfoTable);

        if (!(vendInvoiceInfoTable.isNonPO() || vendInvoiceInfoTable.isAdvance()))
        {
            vendInvoiceJour.initFromPurchTable(purchTable);
        }

        vendInvoiceJour.initFromPurchTotals(purchTotals);
        if (!vendInvoiceJour.PurchId)
        {
            vendInvoiceJour.PurchId = this.findPurchIdFromSubTable(vendInvoiceInfoTable.ParmId, vendInvoiceInfoTable.TableRefId);
        }

        vendInvoiceJour.InterCompanyLedgerVoucher = this.parmInterCompanyVoucher();

        vendInvoiceJour.calcDue();

        // <GEERU>
        if (countryRegion_RU && (vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::CommissionPrincipalAgent || vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::Bailee))
        {
            vendInvoiceJour.FacturedFully_RU = NoYes::Yes;
        }
        // </GEERU>

        vendInvoiceJour.InterCompanyPosted = this.parmInterCompanyPosted();

        // <GEERU>
        if (skipPurchConsumpAccount_RU)
        {
            vendInvoiceJour.CostLedgerVoucher = voucher;
        }
        else
        {
            // </GEERU>
            vendInvoiceJour.CostLedgerVoucher = this.getCostLedgerVoucher();
            // <GEERU>
        }
        // </GEERU>
        // <GSA>
        if (LedgerParameters::find().IsZakatEnabled_SA)
        {
            vendInvoiceJour.ContractNum_SA = purchParmUpdate.PurchId_SA ? PurchTable::find(purchParmUpdate.PurchId_SA).ContractNum_SA : purchTable.ContractNum_SA;
        }
        // </GSA>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.postInitJournalHeader_BR(internalNumber);
        }
        // </GBR>
        // <GIN>
        if (TaxParameters::isExciseEnable_IN() && purchTable.isExcisable_IN())
        {
            select RecId from purchLineNum
                where purchLineNum.PurchId == purchTable.PurchId;

            transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(purchLineNum);
            taxRegistrationNumbers = TaxRegistrationNumbers_IN::find(TaxInformation_IN::find(transTaxInformation.TaxInformation).ManECCRegistrationNumberTable);
            exciseNumSequenceRef = ExciseNumSequenceRef_IN::findByRegistrationNumber(taxRegistrationNumbers.RecId, ExciseReference_IN::Excise);
            if (exciseNumSequenceRef.NumberSequenceTable)
            {
                vendInvoiceJourLoc = vendInvoiceJour.vendInvoiceJour_IN();
                vendInvoiceJourLoc.ExciseInvoiceId = NumberSeq::newGetNumFromId(exciseNumSequenceRef.NumberSequenceTable).num();
                vendInvoiceJour.packVendInvoiceJour_IN(vendInvoiceJourLoc);
            }
        }
        // </GIN>

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
        {
            TaxTransactionTaxIDHelper::saveTaxIdToCustVendJour(this.parmTax(), vendInvoiceJour);
            if (vendInvoiceInfoTable.isNonPO())
            {
                TaxIntegrationListCodeUtility::updateListCodeToJournalTable(vendInvoiceJour, vendInvoiceInfoTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchIdFromSubTable</Name>
				<Source><![CDATA[
    private PurchId findPurchIdFromSubTable(ParmId _parmId, TradeLineRefId _tableRefId)
    {
        PurchId purchId;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        select count(RecId) from vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.TableRefId == _tableRefId
                && vendInvoiceInfoSubTable.ParmId == _parmId
                && vendInvoiceInfoSubTable.OrigPurchId != '';

        if (vendInvoiceInfoSubTable.RecId == 1)
        {
            select OrigPurchId from vendInvoiceInfoSubTable
                where vendInvoiceInfoSubTable.TableRefId == _tableRefId
                    && vendInvoiceInfoSubTable.ParmId == _parmId
                    && vendInvoiceInfoSubTable.OrigPurchId != '';

            purchId = vendInvoiceInfoSubTable.OrigPurchId;
        }

        return purchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeaderFromSAD_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes invoice journal header from SAD
    /// </summary>
    protected void initJournalHeaderFromSAD_PL()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLoopLines</Name>
				<Source><![CDATA[
    protected void initLoopLines()
    {
        super();
        packingSlipUpdateList = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordList</Name>
				<Source><![CDATA[
    protected void initRecordList()
    {
        super();

        if (#TAMVendRebateEnabled)
        {
            recordListTAMVendRebateVendInvoiceTrans = new RecordInsertList(tableNum(TAMVendRebateVendInvoiceTrans));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    protected void initSourceTable()
    {
        purchTable.clear();

        if (!vendInvoiceInfoTable.isNonPO())
        {
            purchTable = vendInvoiceInfoTable.purchTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    protected void initTotals()
    {
        boolean recalcTotals;
        this.initCatchWeightValues();

        if (totals)
        {
            purchTotals = totals;
        }
        else
        {
            purchTotals = PurchTotals::newParmTable(vendInvoiceInfoTable, PurchUpdate::All, purchParmUpdate.ParmId, purchParmUpdate.SumPurchId, documentStatus, PurchTotalsCachingMethod::Reuse);
            recalcTotals = true;
        }

        //Turn off discount calculation on advance invoice
        if (vendInvoiceInfoTable.InvoiceType == PurchInvoiceType::VendorAdvance)
        {
            purchTotals.parmKeepEndDisc(true);
            recalcTotals = true;
        }

        if (recalcTotals)
        {
            purchTotals.calc(true);
        }

        this.parmTax(purchTotals.tax());

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            this.parmTaxWithholdCalculation_IN(purchTotals.taxWithholdCalculation_IN());
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordList</Name>
				<Source><![CDATA[
    protected void insertRecordList()
    {
        super();

        if (#TAMVendRebateEnabled)
        {
            recordListTAMVendRebateVendInvoiceTrans.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyVoucher</Name>
				<Source><![CDATA[
    InterCompanyVoucher interCompanyVoucher(InterCompanyVoucher _interCompanyVoucher = interCompanyVoucher)
    {
        interCompanyVoucher = _interCompanyVoucher;
        return interCompanyVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the invoice date for the purchase invoice.
    /// </summary>
    /// <returns>
    ///    The invoice date for the purchase invoice.
    /// </returns>
    protected TransDate invoiceDate()
    {
        return this.updateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoiceId by joining invoice series with invoice number
    /// </summary>
    /// <returns>
    /// The invoiceId
    /// </returns>
    private InvoiceId invoiceId_BR()
    {
        if (vendInvoiceInfoTable.Num == '')
        {
            return '';
        }

        return strLRTrim(vendInvoiceInfoTable.vendInvoiceInfoTable_W().FiscalDocumentSeries_BR) + strLRTrim(vendInvoiceInfoTable.Num);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal was created.
    /// </summary>
    /// <returns>
    /// true if the journal was created; otherwise, false.
    /// </returns>
    protected boolean isJournalCreated()
    {
        return (vendInvoiceJour.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineCorrLinksTableId_RU</Name>
				<Source><![CDATA[
    protected TableId journalLineCorrLinksTableId_RU()
    {
        return tableNum(VendInvoiceTransCorrLink_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    protected TableId journalLineTableId()
    {
        return tableNum(VendInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether lines exist in the order line parameter table.
    /// </summary>
    /// <returns>
    /// true if lines exist; otherwise, false.
    /// </returns>
    protected boolean linesExists()
    {
        // Allow an invoice journal to be created with no lines if it is on hold
        return (vendInvoiceInfoTable.Hold == NoYes::Yes ||
                (super() && vendInvoiceInfoTable.hasLinesOtherThanPrepayApplicationLines()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table ID for the <c>VendInvoicePurchLink</c> table.
    /// </summary>
    /// <returns>
    ///    The table ID for the <c>VendInvoicePurchLink</c> table.
    /// </returns>
    /// <remarks>
    ///    The table ID is used to create a record sorted list that contains links between invoice and
    ///    purchase orders.
    /// </remarks>
    protected TableId linksTableId()
    {
        return tableNum(VendInvoicePurchLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>noLinesForPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions when there are not selected any lines for posting.
    /// </summary>
    /// <param name="_throwError">
    /// true if the error message should be thrown as an exception; otherwise, false.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Posting has been cancelled.
    /// </exception>
    protected void noLinesForPosting(boolean _throwError = false)
    {
        // Invoices should always throw the exception so the service runs its code to handle errors and save the invoice
        super(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        return PurchParameters::numRefPurchInvoiceId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceVoucher</Name>
				<Source><![CDATA[
    protected NumberSequenceReference numberSequenceReferenceVoucher()
    {
        return PurchParameters::numRefPurchInvoiceVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExciseInovoiceAddress_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the ExciseInvoiceAddress_IN parameter.
    /// </summary>
    /// <param name="_exciseInvoiceAddress">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the ExciseInvoiceAddress_IN parameter.
    /// </returns>
    ExciseInvoiceAddressType_IN parmExciseInovoiceAddress_IN(ExciseInvoiceAddressType_IN _exciseInvoiceAddress = exciseInvoiceAddress)
    {
        exciseInvoiceAddress = _exciseInvoiceAddress;
        return exciseInvoiceAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExecutingPaymentAuthorizationTask</Name>
				<Source><![CDATA[
    boolean parmExecutingPaymentAuthorizationTask(boolean _executingPaymentAuthorizationTask = executingPaymentAuthorizationTask)
    {
        executingPaymentAuthorizationTask = _executingPaymentAuthorizationTask;
        return executingPaymentAuthorizationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyParmId</Name>
				<Source><![CDATA[
    public ParmId parmInterCompanyParmId(ParmId _interCompanyParmId = interCompanyParmId)
    {
        interCompanyParmId = _interCompanyParmId;
        return interCompanyParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyVoucher</Name>
				<Source><![CDATA[
    public InterCompanyVoucher parmInterCompanyVoucher(InterCompanyVoucher _interCompanyVoucher = interCompanyVoucher)
    {
        interCompanyVoucher = _interCompanyVoucher;
        return interCompanyVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = vendInvoiceInfoTable)
    {
        vendInvoiceInfoTable = _parmTable;

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = purchParmUpdate)
    {
        purchParmUpdate = _parmUpdate as PurchParmUpdate;

        return purchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintAcceptanceReport_RU</Name>
				<Source><![CDATA[
    public boolean parmPrintAcceptanceReport_RU(boolean _printAcceptanceReport = printAcceptanceReport)
    {
        printAcceptanceReport = _printAcceptanceReport;
        return printAcceptanceReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintFacture_RU</Name>
				<Source><![CDATA[
    public boolean parmPrintFacture_RU(boolean _printFacture = printFacture)
    {
        printFacture = _printFacture;
        return printFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintFormletter</Name>
				<Source><![CDATA[
    boolean parmPrintFormletter(boolean _printFormletter = printFormletter)
    {
        printFormletter = _printFormletter;
        return printFormletter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintInventBaileeReport_RU</Name>
				<Source><![CDATA[
    public boolean parmPrintInventBaileeReport_RU(boolean _printInventBaileeReport = printInventBaileeReport)
    {
        printInventBaileeReport = _printInventBaileeReport;
        return printInventBaileeReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAllocateNumAndVoucher_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Changes the number sequence to be used to determine the invoice number when dealing with a fiscal document issued by own establishment.
    /// </summary>
    /// <param name="_tmpNumberSeq">
    ///     A reference to <c>NumberSeq</c> class containing the number sequences selected by the systems so far. If a fiscal document issued
    ///     by own establishment is being posted, we are going to change the invoice number sequence to the one configured on the
    ///     fiscal document type associated with the vendor invoice.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     An exception will be thrown if the fiscal document type is missing in <c>VendInvoiceInfoTable</c>
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     An exception will be thrown if number sequence group does not have a number sequence reference attached to it
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     An exception will be thrown if the number sequence is not continuous
    /// </exception>
    public void postAllocateNumAndVoucher_BR(NumberSeq _tmpNumberSeq)
    {
        NumberSequenceTable numberSequenceTable;
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W;

        if (!vendInvoiceInfoTable.IsTheFiscalDocumentIssuer_BR() || vendInvoiceInfoTable.isCancelDocument_BR())
        {
            return;
        }

        vendInvoiceInfoTable_W = vendInvoiceInfoTable.vendInvoiceInfoTable_W();
        if (!vendInvoiceInfoTable_W.FiscalDocumentType_BR)
        {
            throw error("@GLS62");
        }

        numberSequenceTable = FiscalDocumentType_BR::getFiscalDocumentNumberSequence(vendInvoiceInfoTable_W.FiscalDocumentType_BR);

        if (!numberSequenceTable.NumberSequence)
        {
            throw error(strFmt("@GLS1025", "@GLS1018"));
        }
        if (!numberSequenceTable.Continuous)
        {
            throw error(strFmt("@GLS1024", numberSequenceTable.NumberSequence));
        }

        _tmpNumberSeq.parmNumberSequenceId(numberSequenceTable.RecId);
        _tmpNumberSeq.parmNumberSequenceCode(numberSequenceTable.NumberSequence);
        _tmpNumberSeq.parmNumTableNum(numberSequenceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInitJournalHeader_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Substitutes label "Automatic" in invoice number field and updates the Fiscal Document Series
    /// </summary>
    /// <param name="_internalNumber">
    /// The internal number created by the number sequence
    /// </param>
    public void postInitJournalHeader_BR(Num _internalNumber)
    {
        VendInvoiceInfoTable_W vendInvoiceInfoTableW;

        if (vendInvoiceInfoTable.Num == "@SYS11318") // Automatic
        {
            vendInvoiceInfoTable.Num = this.proforma() && !_internalNumber ? '0' : _internalNumber;
            vendInvoiceJour.InvoiceId = vendInvoiceInfoTable.Num;
        }

        if (vendInvoiceInfoTable.IsTheFiscalDocumentIssuer_BR())
        {
            vendInvoiceInfoTableW = vendInvoiceInfoTable.vendInvoiceInfoTable_W();

            vendInvoiceInfoTableW.FiscalDocumentSeries_BR = FiscalDocumentType_BR::getFiscalDocumentSeries(vendInvoiceInfoTableW.FiscalDocumentType_BR);

            vendInvoiceInfoTable.packVendInvoiceInfoTable_W(vendInvoiceInfoTableW);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateQuantitiesOnVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates quantities on <c>VendInvoiceInfoLine</c>.
    /// </summary>
    /// <remarks>
    /// The quantities on <c>VendInvoiceInfoLine</c> need to be recalculated to reflect the new quantities on the purchase line after
    /// the packing slip has been posted.
    /// </remarks>
    private void recalculateQuantitiesOnVendInvoiceInfoLine()
    {
        VendInvoiceInfoLine localVendInvoiceInfoLine;
        RecordSortedList list = this.recordListParmLine();
        boolean moreRecords = list.first(localVendInvoiceInfoLine);
        while (moreRecords)
        {
            if (localVendInvoiceInfoLine.purchLine().isDropShipment())
            {
                VendInvoiceInfoLine updateVendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(localVendInvoiceInfoLine.RecId, true);
                updateVendInvoiceInfoLine.setQty(DocumentStatus::Invoice, purchParmUpdate.CreditRemaining);
                if (PdsGlobal::pdsIsCWItem(updateVendInvoiceInfoLine.ItemId))
                {
                    updateVendInvoiceInfoLine.VendDocumentLineMap::pdsCWSetQty(DocumentStatus::Invoice, purchParmUpdate.CreditRemaining);
                }
                if (updateVendInvoiceInfoLine.closed)
                {
                    updateVendInvoiceInfoLine.VendDocumentLineMap::modifiedClosed();
                }
                updateVendInvoiceInfoLine.doUpdate();
            }
            moreRecords = list.next(localVendInvoiceInfoLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a packing slip for the part of the invoice quantity that has not already been packing slip updated.
    /// </summary>
    /// <remarks>
    /// A packing slip is only posted if the order is a drop shipment order.
    /// </remarks>
    protected void postPackingSlip()
    {
        if (!packingSlipUpdateList.empty())
        {
            Num internalPackingSlipId = NumberSeq::newGetNum(PurchParameters::numRefPurchPackingSlipId()).num();
            PurchFormLetter purchFormLetter = PurchFormLetter::construct(DocumentStatus::PackingSlip);
            purchFormLetter.createFromLines(true);
            purchFormLetter.parmLineList(packingSlipUpdateList.pack());
            
            TransDate transDate = vendInvoiceJour.InvoiceDate;
            
            purchFormLetter.update(purchTable, internalPackingSlipId, transDate, PurchUpdate::ReceiveNow);
            this.recalculateQuantitiesOnVendInvoiceInfoLine();

            CostEventDatabaseUpdateManager::commitCurrentRecords();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    protected boolean proforma()
    {
        return purchParmUpdate.Proforma || vendInvoiceInfoTable.Hold == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recIdSuspensionTables</Name>
				<Source><![CDATA[
    protected List recIdSuspensionTables()
    {
        List ret = super();

        ret.addEnd(vendInvoiceTrans.TableId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordListParmLine()
    {
        return purchTotals.recordListPurchParmLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryFields</Name>
				<Source><![CDATA[
    protected void setDeliveryFields()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    protected Common sourceTable()
    {
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected Object totals()
    {
        return purchTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    protected Common typeParmLine()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate updateDate()
    {
        return vendInvoiceInfoTable.updateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchInvoiceJournalCreate construct()
    {
        return new PurchInvoiceJournalCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether selected purchase orders on this invoice have different setting for price include sales tax
    /// </summary>
    /// <returns>
    /// True if selected purchase orders on this invoice have same setting for price include sales tax; otherwise, false
    /// </returns>
    public boolean checkPurchInclTax()
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTableLocal;
        PurchTable purchTableLocal;
        boolean prevPurchInclTax;
        boolean ret = true;
        Counter recordCount;

        // For each PO on this invoice, make sure the price is inclusive or exclusive of tax
        while select origPurchId from vendInvoiceInfoSubTableLocal
            where vendInvoiceInfoSubTableLocal.ParmId == vendInvoiceInfoTable.ParmId &&
                  vendInvoiceInfoSubTableLocal.TableRefId == vendInvoiceInfoTable.TableRefId
            join InclTax from purchTableLocal
                where purchTableLocal.PurchId == vendInvoiceInfoSubTableLocal.OrigPurchId
        {
            recordCount++;

            // Check for some of the selected purchase orders on this vendor invoice have different settings for whether prices include sales tax.
            if (recordCount > 1 && prevPurchInclTax != purchTableLocal.InclTax)
            {
                ret = checkFailed("@AccountsPayable:PriceIncludeSalesTaxSettingsDifferent");
                break;
            }
            prevPurchInclTax = purchTableLocal.InclTax;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesInvoiceMeetCriteriaForCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether credit note criteria is met for the current invoice.
    /// </summary>
    /// <returns>
    /// true if credit note criteria is met for the current invoice; otherwise, false.
    /// </returns>
    protected boolean doesInvoiceMeetCriteriaForCreditNote()
    {
        return purchTotals.isCreditNote();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoiceImportedAmountsMatch</Name>
				<Source><![CDATA[
    private boolean checkInvoiceImportedAmountsMatch()
    {
        boolean isImportedAmountValid = true;

        if (VendInvoiceAutomationStateManagement::isAutomationInvoice(vendInvoiceInfoTable) &&
            VendParameters::find().AutomationTotalsReqForWorkflowSubmission &&
            ((vendInvoiceInfoTable.ImportedAmount != 0 && vendInvoiceInfoTable.ImportedAmount != purchTotals.purchTotalAmount()) ||
             (vendInvoiceInfoTable.ImportedSalesTax != 0 && vendInvoiceInfoTable.ImportedSalesTax != purchTotals.purchTaxTotal())))
        {
            isImportedAmountValid = checkFailed("@AccountsPayable:VendInvoiceValidationTotalsError");
        }

        return isImportedAmountValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRevision_RU</Name>
				<Source><![CDATA[
    private boolean isRevision_RU()
    {
        return countryRegion_RU
            && vendInvoiceInfoTable.correctionType_RU() == FactureCorrectionType_RU::Revision;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocAutoNumbering_LTLV</Name>
				<Source><![CDATA[
    private boolean isDocAutoNumbering_LTLV()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV])
            && vendInvoiceInfoTable.vendInvoiceInfoTable_W().DocAutoNumbering_LT;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>