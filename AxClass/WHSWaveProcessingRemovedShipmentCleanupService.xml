<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveProcessingRemovedShipmentCleanupService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveProcessingRemovedShipmentCleanupService</c> class is used to cleanup the wave processing removed shipment records
/// </summary>
internal final class WHSWaveProcessingRemovedShipmentCleanupService extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteBasedOnLastModifiedBefore</Name>
				<Source><![CDATA[
    private void deleteBasedOnLastModifiedBefore(utcDateTime _beforeDateTime)
    {
        WHSWaveProcessingRemovedShipment removedShipment;
        Microsoft.Dynamics.Ax.Xpp.PlatformExtensions.CommonExtensions::SetSqlDeleteIndexHint(removedShipment, indexStr(WHSWaveProcessingRemovedShipment, ModifiedDateIndex));
        ttsbegin;
        delete_from removedShipment
            where removedShipment.ModifiedDateTime < _beforeDateTime;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBasedOnRewaveCountThreshold</Name>
				<Source><![CDATA[
    private void deleteBasedOnRewaveCountThreshold(WHSRewaveCounter _cleanupRewaveCountThreshold)
    {
        WHSWaveProcessingRemovedShipment removedShipment;
 
        Microsoft.Dynamics.Ax.Xpp.PlatformExtensions.CommonExtensions::SetSqlDeleteIndexHint(removedShipment, indexStr(WHSWaveProcessingRemovedShipment, RewaveCountIndex));
        ttsbegin;
        delete_from removedShipment
            where removedShipment.RewaveCount >= _cleanupRewaveCountThreshold;
        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecordsWhereShipmentRecordDoesNotExistsOrDoNotHaveOpenStatus</Name>
				<Source><![CDATA[
    private void deleteRecordsWhereShipmentRecordDoesNotExistsOrDoNotHaveOpenStatus()
    {
        WHSWaveProcessingRemovedShipment removedShipment;
        WHSShipmentTable shipmentRec;

        using (var committer = WHSRecordDeletionCommitter::construct())
        {
            while select forupdate removedShipment 
                notexists join shipmentRec
                where shipmentRec.ShipmentId == removedShipment.ShipmentId
                    && shipmentRec.ShipmentStatus == WHSShipmentStatus::Open
            {
                committer.deleteRecord(removedShipment);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run deletion of wave processing removed shipment records
    /// </summary>
    /// <param name = "_contract">Contract including values for the process via SysOperation</param>
    public void execute(WHSWaveProcessingRemovedShipmentCleanupContract _contract)
    {
        utcDateTime beforeDateTime = DateTimeUtil::utcNow();
        beforeDateTime = DateTimeUtil::addDays(beforeDateTime, -_contract.parmDaysToKeep());

        WHSRewaveCounter cleanupRewaveCountThreshold = _contract.parmCleanupRewaveCountThreshold();
        
        this.deleteBasedOnLastModifiedBefore(beforeDateTime);
        this.deleteBasedOnRewaveCountThreshold(cleanupRewaveCountThreshold);
        this.deleteRecordsWhereShipmentRecordDoesNotExistsOrDoNotHaveOpenStatus();
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>