<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMVendRebateBatchCalcDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMVendRebateBatchCalcDialog</c> class serves to calculate multiple rebates at once.
/// </summary>
class TAMVendRebateBatchCalcDialog extends RunBaseBatch implements BatchRetryable
{
    TAMVendRebateBatchCalcDialog        vendRebateBatchCalcDialog;
    StartDate                           startDate;
    EndDate                             endDate;
    DialogField                         diagStartDate;
    DialogField                         diagEndDate;

    DialogRunbase                       dialogRunbase;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        startDate,
        endDate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds date range fields to dialog box.
    /// </summary>
    /// <returns>
    /// The dialog box object for rebate batch calculation.
    /// </returns>
    public Object dialog()
    {
        dialogRunbase = super();

        diagStartDate = dialogRunbase.addFieldValue(
            extendedtypestr(StartDate), startDate, "@SYS6255", "@SYS6255");
        diagEndDate = dialogRunbase.addFieldValue(
            extendedtypestr(EndDate), endDate, "@SYS22882", "@SYS22882");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets dialog date range values.
    /// </summary>
    /// <returns>
    /// true if the values were successfully retrieved from the dialog; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        startDate = diagStartDate.value();
        endDate = diagEndDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets dialog start date value.
    /// </summary>
    /// <returns>
    /// The start date to be used in calculation.
    /// </returns>
    public date getStartDate()
    {
        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets application module value.
    /// </summary>
    /// <returns>
    /// The vendor application module value.
    /// </returns>
    public SysModule module()
    {
        return SysModule::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Substantiates the <c>TAMVendRebateBatchCalcDialog</c> object.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the dialog object parameters.
    /// </summary>
    /// <returns>
    /// The list of stored parameters.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        TAMVendRebateTable::applyBatchRebates(startDate, endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the last parameters saved.
    /// </summary>
    /// <param name="_packedClass">
    /// The list of stored parameters.
    /// </param>
    /// <returns>
    /// true if the restore succeded; otherwise false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        Integer     version = conpeek(_packedClass,1);
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion  :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>TAMVendRebateBatchCalcDialog</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TAMVendRebateBatchCalcDialog</c> class.
    /// </returns>
    public static TAMVendRebateBatchCalcDialog construct()
    {
        return new TAMVendRebateBatchCalcDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>TAMVendRebateBatchCalcDialog</c> class description.
    /// </summary>
    /// <returns>
    /// The <c>TAMVendRebateBatchCalcDialog</c> class description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@PRO1189";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance and runs the <c>TAMVendRebateBatchCalcDialog</c> class.
    /// </summary>
    /// <param name="_args">
    /// Any arguments passed to the class.
    /// </param>
    public static void main(Args _args)
    {
        TAMVendRebateBatchCalcDialog tamVendRebateBatchCalcDialog =
            TAMVendRebateBatchCalcDialog::construct();

        #PdsNumbers

        try
        {
            if (tamVendRebateBatchCalcDialog.prompt())
            {
                tamVendRebateBatchCalcDialog.runOperation();
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::Error)
        {
            warning("@PRO1190");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>