<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentValidationBase_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Base class for Fiscal Document validations.
/// </summary>
/// <remarks>
///     All validations classes should extend from this class. It provides the basic infrastructure
///     for a validation class to properly interact with the entire validation framework.
/// </remarks>
public class FiscalDocumentValidationBase_BR implements IFiscalDocumentValidation_BR
{
    #FiscalDocumentValidationCodes_BR
    FiscalDocumentParmData_BR               fiscalDocumentParmData;
    FiscalDocumentLineParmData_BR           fiscalDocumentLineParmData;
    FiscalDocumentTaxTransParmData_BR       fiscalDocumentTaxTransParmData;
    FiscalDocumentMiscChargeParmData_BR     fiscalDocumentMiscChargeParmData;

    CompanyInfo                             companyInfo;
    LogisticsPostalAddress                  thirdPartyPostalAddress;
    LogisticsPostalAddress                  deliveryPostalAddress;

    ILogger_BR                              logger;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDeliveryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>LogisticsPostalAddress</c> table buffer representing the delivery address
    ///     of the fiscal document being validated.
    /// </summary>
    /// <returns>
    ///     The <c>LogisticsPostalAddress</c> table buffer representing the delivery address of the fiscal document being validated.
    /// </returns>
    public LogisticsPostalAddress getDeliveryPostalAddress()
    {
        return deliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getThirdPartyPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>LogisticsPostalAddress</c> table buffer representing the third party address
    ///     of the fiscal document being validated.
    /// </summary>
    /// <returns>
    ///     The <c>LogisticsPostalAddress</c> table buffer representing the third party address of the fiscal document being validated.
    /// </returns>
    public LogisticsPostalAddress getThirdPartyPostalAddress()
    {
        return thirdPartyPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEFDValidationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if NF-e validation is necessary for the fiscal document.
    /// </summary>
    /// <returns>
    /// True if the fiscal document is a NF-e and the issuer is the own establishment; otherwise, false.
    /// </returns>
    protected boolean isEFDValidationNeeded()
    {
        return this.parmFiscalDocumentParmData().isElectronic() &&
               this.parmFiscalDocumentParmData().parmFiscalDocumentIssuer() == FiscalDocumentIssuer_BR::OwnEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ILogger_BR _logger = new InfoLogLogger_BR())
    {
        companyInfo = CompanyInfo::find();
        logger      = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentLineParmData</Name>
				<Source><![CDATA[
        public FiscalDocumentLineParmData_BR parmFiscalDocumentLineParmData(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData = fiscalDocumentLineParmData)
    {
        fiscalDocumentLineParmData = _fiscalDocumentLineParmData;
        return fiscalDocumentLineParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentMiscChargeParmData</Name>
				<Source><![CDATA[
        public FiscalDocumentMiscChargeParmData_BR parmFiscalDocumentMiscChargeParmData(FiscalDocumentMiscChargeParmData_BR _fiscalDocumentMiscChargeParmData = fiscalDocumentMiscChargeParmData)
    {
        fiscalDocumentMiscChargeParmData = _fiscalDocumentMiscChargeParmData;
        return fiscalDocumentMiscChargeParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentParmData</Name>
				<Source><![CDATA[
        public FiscalDocumentParmData_BR parmFiscalDocumentParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData = fiscalDocumentParmData)
    {
        if (!prmisdefault(_fiscalDocumentParmData))
        {
            thirdPartyPostalAddress = LogisticsPostalAddress::findRecId(_fiscalDocumentParmData.parmThirdPartyPostalAddress());
            deliveryPostalAddress   = LogisticsPostalAddress::findRecId(_fiscalDocumentParmData.parmDeliveryLogisticsPostalAddress());
        }

        fiscalDocumentParmData = _fiscalDocumentParmData;
        return fiscalDocumentParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentTaxTransParmData</Name>
				<Source><![CDATA[
        public FiscalDocumentTaxTransParmData_BR parmFiscalDocumentTaxTransParmData(FiscalDocumentTaxTransParmData_BR _fiscalDocumentTaxTransParmData = fiscalDocumentTaxTransParmData)
    {
        fiscalDocumentTaxTransParmData = _fiscalDocumentTaxTransParmData;
        return fiscalDocumentTaxTransParmData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>