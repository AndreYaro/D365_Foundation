<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionValidationLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;

/// <summary>
/// The <c>RetailTransactionValidationLine</c> class validates the lines of a Retail transaction.
/// </summary>
internal class RetailTransactionValidationLine extends RetailTransactionValidationBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateNegativePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the sign of the price for the transaction line.
    /// </summary>
    /// <param name = "_itemInfo">Object that represents the transaction line to be validated.</param>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::LineLevel, "@Retail:ConsistencyCheckerNegativePriceDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateNegativePrice(ItemInfo _itemInfo)
    {
        if (_itemInfo.Price < 0)
        {
            RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerNegativePriceError", _itemInfo.LineNumber, _itemInfo.ItemId, _itemInfo.Price);

            this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::NegativePrice, errorMessage, _itemInfo.LineNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSignOfQtyAndNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the sign of quantity and net amount is the same for the transaction line.
    /// </summary>
    /// <param name = "_itemInfo">Object that represents the transaction line to be validated.</param>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::LineLevel, "@Retail:ConsistencyCheckerSignOfQtyAndNetAmountDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateSignOfQtyAndNetAmount(ItemInfo _itemInfo)
    {
        if (!_itemInfo.Giftcard)
        {
            // If the sign of qty and net amount are not the same, so qty * netAmount will be a negative amount.
            if (_itemInfo.Quantity * _itemInfo.NetAmount < 0)
            {
                RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerSignOfQtyAndNetAmountError", _itemInfo.LineNumber, _itemInfo.ItemId, _itemInfo.Quantity, _itemInfo.NetAmount);

                this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::SignOfQtyAndNetAmount, errorMessage, _itemInfo.LineNumber);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemAndVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the item and variant of a transaction line.
    /// </summary>
    /// <param name = "_itemInfo">Object that represents the transaction line to be validated.</param>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::LineLevel, "@Retail:ConsistencyCheckerInvalidItemVariantDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateItemAndVariant(ItemInfo _itemInfo)
    {
        InventTable inventTable = InventTable::find(_itemInfo.ItemId);

        if (inventTable)
        {
            // Item number is valid
            EcoResProduct ecoResProduct = EcoResProduct::find(inventTable.Product);
   
            switch (ecoResProduct.productSubtype())
            {
                case EcoResProductSubtype::Product:
                    // Standalone product - no extra action needed
                    break;
                case EcoResProductSubtype::ProductMaster:
                    // Check variant - RetailVariantId is an index in InventDimCombination
                    InventDimCombination inventDimCombination = InventDimCombination::findVariantId(_itemInfo.VariantId);

                    if (!inventDimCombination || inventDimCombination.ItemId != _itemInfo.ItemId)
                    {
                        // Variant is not valid or variant does not belong to the item.
                        RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerInvalidVariantError", _itemInfo.VariantId, _itemInfo.ItemId, _itemInfo.LineNumber);

                        this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::VariantId, errorMessage, _itemInfo.LineNumber);
                    }

                    break;
            }
        }
        else
        {
            // Item is not valid
            RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerInvalidItemError", _itemInfo.ItemId, _itemInfo.LineNumber);

            this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::ItemId, errorMessage, _itemInfo.LineNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the item unit of measure of a transaction line.
    /// </summary>
    /// <param name = "_itemInfo">Object that represents the transaction line to be validated.</param>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::LineLevel, "@Retail:ConsistencyCheckerInvalidItemUnitOfMeasureDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateItemUnitOfMeasure(ItemInfo _itemInfo)
    {
        UnitOfMeasureSymbol inventUOM = InventTableModule::find(_itemInfo.ItemId, ModuleInventPurchSales::Invent).UnitId;
        UnitOfMeasureSymbol salesUOM = _itemInfo.Unit;

        if (inventUOM != salesUOM)
        {
            InventTable inventTable = InventTable::find(_itemInfo.ItemId);
            EcoResProductUnitConverter ecoResProductUnitConverter;
            InventDimId inventDimid;
            
            if (_itemInfo.VariantId != '') // variant item
            {
                inventDimid = InventDimCombination::findVariantId(_itemInfo.VariantId).InventDimId;
            }
            
            ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_itemInfo.ItemId, inventDimId, salesUOM, inventUOM, false, true);
            
            if (ecoResProductUnitConverter.canValueBeConverted())
            {
                var calculationResult = ecoResProductUnitConverter.convertValue(_itemInfo.Quantity);
                if (calculationResult == 0)
                {
                    RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerIncorrectCalculationUnitOfMeasureError", _itemInfo.ItemId, _itemInfo.Quantity, salesUOM, calculationResult, inventUOM);
                    this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::UnitOfMeasure, errorMessage, _itemInfo.LineNumber);
                }
            }
            else // No conversion between invent UOM and sales UOM.
            {
                RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerInvalidItemUnitOfMeasureError", _itemInfo.ItemId, salesUOM, inventUOM);
                this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::UnitOfMeasure, errorMessage, _itemInfo.LineNumber);
            }
        }
        else // Validates that item quantity decimal precision matches the item sales unit of measure decimal precision in transaction lines.
        {
            Qty roundedSalesQty = decRound(_itemInfo.Quantity, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(salesUOM)));

            if (roundedSalesQty == 0)
            {
                RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerInvalidItemQtyDecimalPrecision", _itemInfo.ItemId, _itemInfo.Quantity, roundedSalesQty, _itemInfo.Unit, _itemInfo.LineNumber);
                this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::UnitOfMeasure, errorMessage, _itemInfo.LineNumber);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSerialItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the serial controlled item and its invent serial id of a transaction line.
    /// </summary>
    /// <param name = "_itemInfo">Object that represents the transaction line to be validated.</param>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::LineLevel, "@Retail:ConsistencyCheckerInvalidSerialItemDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateSerialItem(ItemInfo _itemInfo)
    { 
        // Serial number is only mandatory for cash and carry transactions or for items being carried out during a customer order.
        if ( _itemInfo.DeliveryMode == '' || _itemInfo.DeliveryMode == RetailParameters::find().CarryOutDeliveryModeCode ) 
        {
            EcoResTrackingDimensionGroupItem ecoResTrackingDimensionGroupItem =  EcoResTrackingDimensionGroupItem::findByItem(curExt(), _itemInfo.ItemId);
            EcoResTrackingDimensionGroupFldSetup trackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(ecoResTrackingDimensionGroupItem.TrackingDimensionGroup, fieldNum(InventDim, InventSerialId));

            if (trackingDimensionGroupFldSetup.RecId && (trackingDimensionGroupFldSetup.IsActive || trackingDimensionGroupFldSetup.IsSalesProcessActivated) &&
                (!trackingDimensionGroupFldSetup.IsAllowBlankIssueEnabled && _itemInfo.SerialId == ''))
            {
                // Serial item is not valid
                RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerInvalidSerialItemError", _itemInfo.ItemId);

                this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::SerialNumberMissing, errorMessage, _itemInfo.LineNumber);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNonSerialItemDontHaveSerialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the items serial number dimension is inactive, then the serial number should not be provided.
    /// </summary>
    /// <param name = "_itemInfo">Object that represents the transaction line to be validated.</param>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::LineLevel, "@Retail:ConsistencyCheckerNonSerialItemDimensionDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateNonSerialItemDontHaveSerialNumber(ItemInfo _itemInfo)
    {
        EcoResTrackingDimensionGroupItem ecoResTrackingDimensionGroupItem =  EcoResTrackingDimensionGroupItem::findByItem(curExt(), _itemInfo.ItemId);
        EcoResTrackingDimensionGroupFldSetup trackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(ecoResTrackingDimensionGroupItem.TrackingDimensionGroup, fieldNum(InventDim, InventSerialId));
                
        // when items serial number dimension is inactive, then the serial number should not be provided
        if (_itemInfo.SerialId != '' && !(trackingDimensionGroupFldSetup.IsActive || trackingDimensionGroupFldSetup.IsSalesProcessActivated))
        {
            RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerNonSerialItemDimensionError", _itemInfo.ItemId);
            this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::SerialNumberMustBeEmpty, errorMessage, _itemInfo.LineNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesLineDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the sales line discount is equal to sum discounts in discount trans for a sales line.
    /// </summary>
    /// <param name = "_itemInfo">Object that represents the transaction line to be validated.</param>
    /// <param name = "_currency">Currency code of transaction.</param>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::LineLevel, "@Retail:ConsistencyCheckerDiscountTransNotEqualsSalesTransDiscountDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateSalesLineDiscountAmount(ItemInfo _itemInfo)
    {
        RetailDiscAmount lineDiscount = CurrencyExchange::round(_itemInfo.Discount * _itemInfo.Quantity, this.parmCustomerOrderInfo().CurrencyCode);
        RetailDiscAmount sumOfDiscountTrans;
   
        for (int j = 0; j < _itemInfo.Discounts.Count; j++)
        {
            sumOfDiscountTrans += _itemInfo.Discounts.get_item(j).Amount;
        }

        if (abs(sumOfDiscountTrans - lineDiscount) >  RetailTransactionValidationHelper::getMaximumRoundingDifferenceAllowed())
        {
            RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerDiscountTransNotEqualsSalesTransDiscountError", lineDiscount, sumOfDiscountTrans, _itemInfo.LineNumber);
            this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::LineDiscountAmount, errorMessage, _itemInfo.LineNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGiftItemIsNotReturnType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that gift item line is not of return type.
    /// </summary>
    /// <param name = "_itemInfo">Object that represents the transaction line to be validated.</param>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::LineLevel, "@Retail:ConsistencyCheckerReturnGiftCardDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateGiftItemIsNotReturnType(ItemInfo _itemInfo)
    {
        if (_itemInfo.Giftcard)
        {
            RetailGiftCardSalesLineOperation giftCardOperation = RetailTransactionValidationHelper::getExtensionPropertyFromExtensionPropertyCollection(
            _itemInfo.ExtensionProperties, fieldStr(RetailTransactionSalesTrans, GiftCardOperation)).get_IntegerValue();

            if (_itemInfo.NetAmount < 0 && giftCardOperation != RetailGiftCardSalesLineOperation::CashOut)
            {
                RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerReturnGiftCardError", _itemInfo.ItemId, _itemInfo.Quantity);

                this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::ReturnGiftCardItem, errorMessage, _itemInfo.LineNumber);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLineTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that sales line tax amount is equal to sum of taxes in RetailTransactionTaxTrans for that line.
    /// </summary>
    /// <param name = "_itemInfo">Object that represents the transaction line to be validated.</param>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::LineLevel, "@Retail:ConsistencyCheckerLineTaxDoesNotMatchTaxTransDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateLineTaxAmount(ItemInfo _itemInfo)
    {
        RetailTaxAmount lineTaxAmount = _itemInfo.TaxAmount;
        RetailTaxAmount sumOfTaxTrans;

        // sums up all the taxes from RetailTransactionTaxTrans for a sales line.
        for (int i = 0; i < _itemInfo.Taxes.Count; i++)
        {
            TaxInfo taxInfo = _itemInfo.Taxes.get_item(i);

            if (!taxInfo.IsExempt)
            {
                sumOfTaxTrans += taxInfo.Amount;
            }
        }

        // the sum of taxes from RetailTransactionTaxTrans should be equal to tax amount stored with sales trans for a line.
        if (abs(sumOfTaxTrans - lineTaxAmount) >  RetailTransactionValidationHelper::getMaximumRoundingDifferenceAllowed())
        {
            RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerLineTaxDoesNotMatchTaxTransError", lineTaxAmount, sumOfTaxTrans);
            this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::LineTaxAmount, errorMessage, _itemInfo.LineNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxIntersection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that sales tax group and item tax group intersection is valid.
    /// </summary>
    /// <param name = "_itemInfo">Object that represents the transaction line to be validated.</param>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::LineLevel, "@Retail:ConsistencyCheckerSalesTaxGroupAndItemTaxGroupIntersectionValidationDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateTaxIntersection(ItemInfo _itemInfo)
    {
        if (TaxParameters::find().CheckIntersection == CheckTaxGroups::Error)
        {        
            if (CheckTaxGroups::Error == Tax::isValidTaxGroupIntersection(_itemInfo.SalesTaxGroup, _itemInfo.ItemTaxGroup))
            {        
                RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerSalesTaxGroupAndItemTaxGroupIntersectionInvalidError", _itemInfo.SalesTaxGroup, _itemInfo.ItemTaxGroup);
                this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::InvalidTaxIntersection, errorMessage, _itemInfo.LineNumber);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesLineTaxExemptAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the original price of the item equals the sum of the new price and the exempted tax amount.
    /// </summary>
    /// <param name = "_itemInfo">Object that represents the transaction line to be validated.</param>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::LineLevel, "@Retail:ConsistencyCheckerTaxExemptAmountsForPriceInclusiveValidationDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateSalesLineTaxExemptAmounts(ItemInfo _itemInfo)
    {
        if (this.parmCustomerOrderInfo().IsTaxExemptedForPriceInclusive)
        {
            Amount originalPrice = _itemInfo.TaxExemptPriceInclusiveOriginalPrice;
            Amount price = _itemInfo.Price;
            Amount exemptTaxAmount = _itemInfo.TaxExemptPriceInclusiveReductionAmount;

            if (originalPrice != 0)
            {
                if (abs(originalPrice - (price + exemptTaxAmount)) > RetailTransactionValidationHelper::getMaximumRoundingDifferenceAllowed())
                {
                    RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerTaxExemptAmountsForPriceInclusiveError", price, exemptTaxAmount, originalPrice);
                    this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::TaxExemptForPriceInclusive, errorMessage, _itemInfo.LineNumber);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesLinesChargeLinesTaxExemptAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the original amount of the item's charges equals the sum of the new charge amounts and the exempted tax amount.
    /// </summary>
    /// <param name = "_itemInfo">Object that represents the transaction line to be validated.</param>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::LineLevel, "@Retail:ConsistencyCheckerTaxExemptAmountsForPriceInclusiveChargesValidationDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateSalesLinesChargeLinesTaxExemptAmounts(ItemInfo _itemInfo)
    {
        if (this.parmCustomerOrderInfo().IsTaxExemptedForPriceInclusive)
        {
            ChargeInfoCollection charges = _itemInfo.Charges;

            for (int i = 0; i < charges.get_Count(); i++)
            {
                ChargeInfo chargeInfo = charges.get_Item(i) as ChargeInfo;

                Amount originalAmount = chargeInfo.TaxExemptPriceInclusiveOriginalAmount;
                Amount amount = chargeInfo.Amount;
                Amount exemptTaxAmount = chargeInfo.TaxExemptPriceInclusiveReductionAmount;

                if (originalAmount != 0)
                {
                    if (abs(originalAmount - (amount + exemptTaxAmount)) > RetailTransactionValidationHelper::getMaximumRoundingDifferenceAllowed())
                    {
                        RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerTaxExemptAmountsForPriceInclusiveChargesError", amount, exemptTaxAmount, originalAmount);
                        this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::TaxExemptForPriceInclusive, errorMessage, _itemInfo.LineNumber);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemBarCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the item barcode of a transaction line.
    /// </summary>
    /// <param name = "_itemInfo">Object that represents the transaction line to be validated.</param>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::LineLevel, "@Retail:ConsistencyCheckerInvalidItemBarCodeDescription"),
        RetailTransactionValidationApplicableToAllTypes
    ]
    internal void validateItemBarCode(ItemInfo _itemInfo)
    {
        if (_itemInfo.BarCodeId)
        {
            InventItemBarcode inventItemBarcode;

            // Check that the item has valid barcode.
            select firstonly RecId from inventItemBarcode
                where inventItemBarcode.ItemId == _itemInfo.ItemId
                && inventItemBarcode.itemBarCode == _itemInfo.BarCodeId;

            if (!inventItemBarcode.RecId)
            {
                // Check barcode masks
                RetailBarcodeMaskTable barcodeMask;

                int barcodeLen = strLen(_itemInfo.BarCodeId);
                str firstChar = subStr(_itemInfo.BarCodeId, 0, 1);
                str likeMask = firstChar + strRep('?', barcodeLen - 1);
                
                while select * from barcodeMask
                    index hint PrefixIdx
                    order by barcodeMask.Prefix desc, barcodeMask.Mask
                    where barcodeMask.type == RetailBarcodeMaskTypeBase::Item
                    && barcodeMask.Prefix like firstChar + '*'
                    && barcodeMask.Mask like likeMask
                {
                    if (barcodeMask.prefix && barcodeMask.prefix == subStr(_itemInfo.BarCodeId, 0, strLen(barcodeMask.Prefix)))
                    {
                        // Barcode mask is found. - No exception
                        return;
                    }
                }

                // Barcode is not valid or barcode does not belong to the item.
                RetailTransactionValidationErrorMessage errorMessage = strFmt("@Retail:ConsistencyCheckerInvalidBarCodeError", _itemInfo.BarCodeId, _itemInfo.ItemId, _itemInfo.LineNumber);
                this.insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType::InvalidItemBarcode, errorMessage, _itemInfo.LineNumber);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>