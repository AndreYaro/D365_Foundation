<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookStructSmallVATAmounts_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookStructSmallVATAmounts_RU
{
    Amount          amountInclVAT;

    Amount          amountLiableToVAT;
    Amount          taxAmountVAT;
    UnitQty         qty;
    ItemNameDisplay itemName;

    private TaxAmount taxInCostPrice;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        amountInclVAT,
        amountLiableToVAT,
        taxAmountVAT,
        itemName,
        qty
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAmounts</Name>
				<Source><![CDATA[
    public void addAmounts(AmountMST   _amountInclVAT,
                           TaxBase     _amountLiableToVAT,
                           TaxAmount   _amountVAT,
                           UnitQty     _qty = 0)
    {
        amountInclVAT     += _amountInclVAT;
        amountLiableToVAT += _amountLiableToVAT;
        taxAmountVAT      += _amountVAT;
        qty               += _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxInCostPrice</Name>
				<Source><![CDATA[
    internal void addTaxInCostPrice(TaxAmount _taxInCostPrice)
    {
        taxInCostPrice += _taxInCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAmounts2</Name>
				<Source><![CDATA[
    public void addAmounts2(BookStructSmallVATAmounts_RU _structAmounts)
    {
        amountInclVAT     += _structAmounts.amountInclVAT();
        amountLiableToVAT += _structAmounts.amountLiableToVAT();
        taxAmountVAT      += _structAmounts.taxAmountVAT();
        qty               += _structAmounts.qty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountInclVAT</Name>
				<Source><![CDATA[
    public Amount amountInclVAT(Amount _amountInclVAT = amountInclVAT)
    {
        amountInclVAT = _amountInclVAT;
        return amountInclVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountLiableToVAT</Name>
				<Source><![CDATA[
    public Amount  amountLiableToVAT(Amount _amountLiableToVAT = amountLiableToVAT)
    {
        amountLiableToVAT = _amountLiableToVAT;
        return amountLiableToVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    public void clear()
    {
        amountInclVAT     = 0;
        amountLiableToVAT = 0;
        taxAmountVAT      = 0;
        taxInCostPrice    = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    public boolean equal(Object _amounts)
    {
        boolean isEqual = (amountInclVAT == _amounts.amountInclVAT() && amountLiableToVAT == _amounts.amountLiableToVAT() && taxAmountVAT == _amounts.taxAmountVAT());

        return isEqual && (taxInCostPrice == _amounts.taxInCostPrice());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    public ItemNameDisplay itemName(ItemNameDisplay _itemName = itemName)
    {
        ;
        itemName = _itemName;
        return itemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        amountInclVAT     = 0;
        amountLiableToVAT = 0;
        taxAmountVAT      = 0;
        taxInCostPrice    = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [#CurrentVersion, #CurrentList];
        packed = SysPackExtensions::appendExtension(packed, classStr(BookStructSmallVATAmounts_RU), [taxInCostPrice]);
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    public UnitQty  qty(UnitQty _qty = qty)
    {
        ;
        qty = _qty;
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseAmounts</Name>
				<Source><![CDATA[
    public void reverseAmounts()
    {
        amountInclVAT     =  - amountInclVAT;
        amountLiableToVAT =  - amountLiableToVAT;
        taxAmountVAT      =  - taxAmountVAT;
        taxInCostPrice    =  - taxInCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseAmountsAndQty</Name>
				<Source><![CDATA[
    public void reverseAmountsAndQty()
    {
        amountInclVAT     = - amountInclVAT;
        amountLiableToVAT = - amountLiableToVAT;
        taxAmountVAT      = - taxAmountVAT;
        taxInCostPrice    = - taxInCostPrice;
        qty               = - qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subAmounts</Name>
				<Source><![CDATA[
    public void subAmounts(AmountMST   _amountInclVAT,
                           TaxBase     _amountLiableToVAT,
                           TaxAmount   _amountVAT)
    {
        amountInclVAT     -= _amountInclVAT;
        amountLiableToVAT -= _amountLiableToVAT;
        taxAmountVAT      -= _amountVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subAmounts2</Name>
				<Source><![CDATA[
    public void subAmounts2(BookStructSmallVATAmounts_RU _structAmounts)
    {
        amountInclVAT     -= _structAmounts.amountInclVAT();
        amountLiableToVAT -= _structAmounts.amountLiableToVAT();
        taxAmountVAT      -= _structAmounts.taxAmountVAT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountVAT</Name>
				<Source><![CDATA[
    public Amount taxAmountVAT(Amount _taxAmountVAT = taxAmountVAT)
    {
        taxAmountVAT = _taxAmountVAT;
        return taxAmountVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxInCostPrice</Name>
				<Source><![CDATA[
    internal TaxAmount taxInCostPrice(TaxAmount _taxInCostPrice = taxInCostPrice)
    {
        taxInCostPrice = _taxInCostPrice;
        return taxInCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;

                container packedExtension = SysPackExtensions::findExtension(_packedClass, classStr(BookStructSmallVATAmounts_RU));
                if(packedExtension != conNull())
                {
                    [taxInCostPrice] = packedExtension;
                }

                return true;

            default :
                return false;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static BookStructSmallVATAmounts_RU create(container _packedClass)
    {
        BookStructSmallVATAmounts_RU cls = new BookStructSmallVATAmounts_RU();

        cls.unpack(_packedClass);

        return cls;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountsByReducedKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sums up the values in the map using the reduced key not
    ///    taking into account inequality of one of the key elements.
    /// </summary>
    /// <param name="_key">
    ///    Key by which to find and sum up the values in the map and which has
    ///    to be reduced in case of no value is found in the map by the full key.
    /// </param>
    /// <param name="_bookStructSmallVATAmountsMap">
    ///    Map in which values are to be summed up and which has values of type
    ///    <c>BookStructSmallVATAmounts_RU</c> either packed or unpacked.
    /// </param>
    /// <param name="_keyElementToDelete">
    ///    Position of the element in the map key to be deleted in case of
    ///    no value is found in the map by the full key; optional.
    /// </param>
    /// <returns>
    ///    The entity of <c>BookStructSmallVATAmounts_RU</c> class which contains value
    ///    found by the full key or summed up values of the map found by the reduced key.
    /// </returns>
    #define.defaultDimensionPosition(2)
    public static BookStructSmallVATAmounts_RU getAmountsByReducedKey(container _key, Map _bookStructSmallVATAmountsMap, int _keyElementToDelete = #defaultDimensionPosition)
    {
        MapEnumerator                   me;
        container                       reducedKey;
        BookStructSmallVATAmounts_RU    factureAmountsSum;

        if (   _bookStructSmallVATAmountsMap.keyType() != Types::Container
            || (   _bookStructSmallVATAmountsMap.valueType() != Types::Class
                && _bookStructSmallVATAmountsMap.valueType() != Types::Container))
        {
            throw error(strFmt("@SYS118115",funcName()));
        }

        if (_bookStructSmallVATAmountsMap.exists(_key))
        {
            if (_bookStructSmallVATAmountsMap.valueType() == Types::Container)
            {
                return BookStructSmallVATAmounts_RU::create(_bookStructSmallVATAmountsMap.lookup(_key));
            }
            else
            {
                return _bookStructSmallVATAmountsMap.lookup(_key);
            }
        }

        reducedKey = conDel(_key, _keyElementToDelete, 1);
        factureAmountsSum = new BookStructSmallVATAmounts_RU();
        me = _bookStructSmallVATAmountsMap.getEnumerator();

        while (me.moveNext())
        {
            if (reducedKey == conDel(me.currentKey(), _keyElementToDelete, 1))
            {
                if (typeOf(me.currentValue()) == Types::Container)
                {
                    factureAmountsSum.addAmounts2(BookStructSmallVATAmounts_RU::create(me.currentValue()));
                }
                else
                {
                    factureAmountsSum.addAmounts2(me.currentValue());
                }
            }
        }

        return factureAmountsSum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>