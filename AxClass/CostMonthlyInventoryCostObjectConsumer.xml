<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostMonthlyInventoryCostObjectConsumer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostMonthlyInventoryCostObjectConsumer</c> class implements a common consumer that must be used for
/// all consumers of monthly inventory cost object cache.
/// </summary>
public final class CostMonthlyInventoryCostObjectConsumer implements SysIDataCacheConsumer
{
    SysIFilter                  filter;
    TransDate                   transDate;

    SysIDataCacheContextManager cacheContextManager;
    SysIDataCacheContext        cacheContext;
    SysIDataCacheManager        cacheManager;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmConsumer</Name>
				<Source><![CDATA[
    public SysIDataConsumer parmConsumer()
    {
        return SysDataConsumerFactory::newFromType(SysDataConsumerTypeEnum::DataSet, classStr(CostMonthlyInventoryCostObjectCacheDataSet));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryable</Name>
				<Source><![CDATA[
    public SysIQueryable parmQueryable()
    {
        Query query = new Query();
        query.addDataSource(tableNum(CostMonthlyInventoryCostObjectCache));

        return SysQueryableFactory::newFromQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilter</Name>
				<Source><![CDATA[
    public SysIFilter parmFilter()
    {
        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    private TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFilter</Name>
				<Source><![CDATA[
    private void initializeFilter()
    {
        filter = SysFilterFactory::createEmptyFilter();

        SysIFilterValue filterValue = SysFilterValueFactory::createFilterValueForDate(transDate, extendedTypeNum(TransDate));
        filter.addItem(filterValue, SysFilterOperator::Equal, SysFilterValueResolutionMethod::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static CostMonthlyInventoryCostObjectConsumer construct()
    {
        return new CostMonthlyInventoryCostObjectConsumer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCacheContextManager</Name>
				<Source><![CDATA[
    protected SysIDataCacheContextManager parmCacheContextManager()
    {
        return cacheContextManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCacheContext</Name>
				<Source><![CDATA[
    protected SysIDataCacheContext parmCacheContext()
    {
        return cacheContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCacheManager</Name>
				<Source><![CDATA[
    protected SysIDataCacheManager parmCacheManager()
    {
        return cacheManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostMonthlyInventoryCostObjectConsumer</c> class for a given month.
    /// </summary>
    /// <param name = "_lastDateOfMonth">
    /// The last date of the month.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostMonthlyInventoryCostObjectConsumer</c> class.
    /// </returns>
    public static CostMonthlyInventoryCostObjectConsumer newFromDate(TransDate _lastDateOfMonth)
    {
        CostMonthlyInventoryCostObjectConsumer costMonthlyInventoryCostObjectConsumer = CostMonthlyInventoryCostObjectConsumer::construct();
        costMonthlyInventoryCostObjectConsumer.parmTransDate(_lastDateOfMonth);
        costMonthlyInventoryCostObjectConsumer.initializeFilter();
        costMonthlyInventoryCostObjectConsumer.initializeContextAndManagers();

        return costMonthlyInventoryCostObjectConsumer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeContextAndManagers</Name>
				<Source><![CDATA[
    private void initializeContextAndManagers()
    {
        SysIDataConsumer dataConsumer = this.parmConsumer();
        SysIDataCacheConfigurationManager manager = SysDataCacheConfigurationManagerFactory::newFromType(dataConsumer.parmType());
        SysIDataCacheConfiguration cacheConfiguration = manager.getConfigurationForConsumer(dataConsumer.parmIdentifier());
        SysIDataContext dataContext = SysDataContextBuilder::newContextWithFilter(this.parmFilter(), cacheConfiguration.parmFilteringEnabled());

        cacheContextManager = SysDataCacheContextManagerFactory::newManager();
        cacheContext = cacheContextManager.findOrCreateCacheContext(dataConsumer.parmType(), dataConsumer.parmIdentifier(),dataContext.parmId());
        cacheManager = SysDataCacheManagerFactory::newFromType(dataConsumer.parmType(), dataConsumer.parmIdentifier());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDataSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the monthly inventory cost object dataset.
    /// </summary>
    public static void prepareDataSet(TransDate _lastDateOfMonth)
    {
        CostMonthlyInventoryCostObjectConsumer cacheConsumer = CostMonthlyInventoryCostObjectConsumer::newFromDate(_lastDateOfMonth);

        if (!cacheConsumer.parmCacheManager().isCacheValid(cacheConsumer.parmCacheContextManager().getLastUpdate(cacheConsumer.parmCacheContext().parmId())))
        {
            cacheConsumer.parmCacheManager().forceRefreshCacheNoFetch(cacheConsumer.parmCacheContext());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the monthly inventory cost object dataset.
    /// </summary>
    public static boolean isValid(TransDate _lastDateOfMonth)
    {
        CostMonthlyInventoryCostObjectConsumer cacheConsumer = CostMonthlyInventoryCostObjectConsumer::newFromDate(_lastDateOfMonth);

        return cacheConsumer.parmCacheManager().isCacheValid(cacheConsumer.parmCacheContextManager().getLastUpdate(cacheConsumer.parmCacheContext().parmId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastDateToCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the last date to cache.
    /// </summary>
    /// <returns>
    /// The last date to cache.
    /// </returns>
    public static transDate lastDateToCache()
    {
        return dateEndMth(DateTimeUtil::getToday(DateTimeUtil::getCompanyTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataCacheContextId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the context Id associated with a specific month end date.
    /// </summary>
    /// <param name = "_lastDateOfMonth">
    /// The last date of the month for which to get the context Id.
    /// </param>
    /// <returns>A <c>SysDateCacheContextId</c> for the specified date.</returns>
    public static SysDataCacheContextId getDataCacheContextId(TransDate _lastDateOfMonth)
    {
        CostMonthlyInventoryCostObjectConsumer cacheConsumer = CostMonthlyInventoryCostObjectConsumer::newFromDate(_lastDateOfMonth);

        return cacheConsumer.parmCacheContext().parmId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCostStamentCacheUpdatedAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to updates of the cost statement cache and invalidates datasets that are affected by the update.
    /// </summary>
    /// <param name = "_updatedAfterDate">
    /// The date the cache is updated after.
    /// </param>
    [SubscribesTo(tablestr(CostStatementCache), staticDelegateStr(CostStatementCache, cacheUpdatedAfter))]
    public static void onCostStamentCacheUpdatedAfter(TransDate _updatedAfterDate)
    {
        TransDate lastDateOfMonth = dateEndMth(_updatedAfterDate);
        TransDate lastDateToCache = CostMonthlyInventoryCostObjectConsumer::lastDateToCache();

        if (lastDateOfMonth <= lastDateToCache)
        {
            CostMonthlyInventoryCostObjectConsumer::invalidateCache(lastDateOfMonth);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidateCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invalidates the dataset for a given month.
    /// </summary>
    /// <param name = "_lastDateOfMonth">
    /// The last date of the month.
    /// </param>
    private static void invalidateCache(TransDate _lastDateOfMonth)
    {
        CostMonthlyInventoryCostObjectConsumer cacheConsumer = CostMonthlyInventoryCostObjectConsumer::newFromDate(_lastDateOfMonth);

        if (cacheConsumer.parmCacheContextManager().getLastUpdate(cacheConsumer.parmCacheContext().parmId()))
        {
            cacheConsumer.parmCacheContextManager().setLastUpdate(cacheConsumer.parmCacheContext().parmCacheContextStructureId(), cacheConsumer.parmCacheContext().parmId(), DateTimeUtil::minValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last update of the monthly cache for this consumer.
    /// </summary>
    /// <returns>The last update of the monthly cache.</returns>
    public SysDataCacheLastUpdate getLastUpdate()
    {
        return this.parmCacheContextManager().getLastUpdate(this.parmCacheContext().parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInvalidCurrentOrPreviousMonths</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current or one of the previous months is invalid.
    /// </summary>
    /// <returns>true if the current or one of the previous months is invalid; otherwise, false.</returns>
    public boolean hasInvalidCurrentOrPreviousMonths()
    {
        SysIDataCacheContextMetadata    cacheContextMetadata = SysDataCacheContextMetadataFactory::newMetadata();
        DictTable                       cacheContextDictTable = new DictTable(cacheContextMetadata.parmTypeId());
        Common                          cacheContextTable = cacheContextDictTable.makeRecord();
        SysIFilterMetadata              filterMetadata = SysFilterMetadataFactory::newFilterMetadata();
        DictTable                       filterDictTable = new DictTable(filterMetadata.parmTypeId());
        Common                          filterTable = filterDictTable.makeRecord();
        DataArea                        dataArea;

        select firstonly cacheContextTable
            where cacheContextTable.(cacheContextMetadata.parmConsumer()) == this.parmConsumer().parmIdentifier()
               && cacheContextTable.(cacheContextMetadata.parmLastUpdate()) == DateTimeUtil::minValue()
            exists join dataArea
            where dataArea.RecId == cacheContextTable.(cacheContextMetadata.parmDataContextIdExt(SysDataContextValueTypeEnum::Company))
                   && dataArea.Id == curExt()
            exists join filterTable
            where filterTable.(filterMetadata.parmId()) == cacheContextTable.(cacheContextMetadata.parmDataContextIdExt(SysDataContextValueTypeEnum::Filter))
                   && filterTable.(filterMetadata.parmValue(SysFilterValueTypeEnum::Date)) <= transDate;

        return (cacheContextTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastRefreshTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the refresh time of the last valid month before (and including) the consumer's month.
    /// </summary>
    /// <returns>The date time of the cache's last update for the consumer's month.</returns>
    /// <remarks>
    /// This method queries the data cache context and the associated filter and data area tables. It looks for
    /// the first context that is valid (last update is not <c>DateTimeUtil::minValue()</c>) in descending order of
    /// context month date.
    /// </remarks>
    public SysDataCacheLastUpdate lastRefreshTime()
    {
        SysIDataCacheContextMetadata cacheContextMetadata = SysDataCacheContextMetadataFactory::newMetadata();
        SysIFilterMetadata           filterMetadata = SysFilterMetadataFactory::newFilterMetadata();

        Query query = new Query();
        query.topRows(1);

        QueryBuildDataSource qbdsCacheContext = query.addDataSource(cacheContextMetadata.parmTypeId());
        qbdsCacheContext.addRange(cacheContextMetadata.parmConsumer()).value(queryValue(this.parmConsumer().parmIdentifier()));
        qbdsCacheContext.addRange(cacheContextMetadata.parmLastUpdate()).value(SysQuery::valueNot(DateTimeUtil::minValue()));
        qbdsCacheContext.addSelectionField(cacheContextMetadata.parmLastUpdate());

        // Add the filter data source to get access to the context month date and specify the order of the search.
        QueryBuildDataSource qbdsFilterTable = qbdsCacheContext.addDataSource(filterMetadata.parmTypeId());
        qbdsFilterTable.addLink(cacheContextMetadata.parmDataContextIdExt(SysDataContextValueTypeEnum::Filter), filterMetadata.parmId());
        qbdsFilterTable.orderMode(OrderMode::OrderBy);
        qbdsFilterTable.addSelectionField(filterMetadata.parmId());
        qbdsFilterTable.addOrderByField(filterMetadata.parmValue(SysFilterValueTypeEnum::Date), SortOrder::Descending);
        qbdsFilterTable.addRange(filterMetadata.parmValue(SysFilterValueTypeEnum::Date)).value(SysQuery::range(dateNull(), transDate));

        // Add the range on the company
        QueryBuildDataSource qbdsDataArea = qbdsFilterTable.addDataSource(tableNum(DataArea));
        qbdsDataArea.joinMode(JoinMode::ExistsJoin);
        qbdsDataArea.addLink(cacheContextMetadata.parmDataContextIdExt(SysDataContextValueTypeEnum::Company), fieldNum(DataArea, RecId), qbdsCacheContext.name());
        qbdsDataArea.addRange(fieldNum(DataArea, Id)).value(queryValue(curExt()));

        QueryRun queryRun = new QueryRun(query);
        queryRun.next();

        Common cacheContextTable = queryRun.get(cacheContextMetadata.parmTypeId());

        return cacheContextTable.(cacheContextMetadata.parmLastUpdate());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>