<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdYearlyReportDP_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdYearlyReportDP_IT</c> class report data provider class for the <c>TaxWithholdYearlyReportIT</c> report.
/// </summary>
[
    SRSReportQuery(querystr(TaxWithholdYearlyReport_IT)),
    SRSReportParameterAttribute(classstr(TaxWithholdYearlyReportContract_IT))
]
class TaxWithholdYearlyReportDP_IT extends SRSReportDataProviderBase
{
    private const str FeatureReference = 'IT-00018';

    VendAccount fromVendAccount;
    VendAccount toVendAccount;
    TransDate fromPaymentDate;
    TransDate toPaymentDate;
    TransDate fromCompetenceDate;
    TransDate toCompetenceDate;
    TaxWithholdTrans taxWithholdTrans;
    TaxWithholdTable taxWithholdTable;
    VendTable vendTable;
    TaxWithholdYearlyReportTmp_IT taxWithholdYearlyReportTmp_IT;

    private const str VendTableStr = 'vendTable';
    private const str TaxWithholdTableStr = 'TaxWithholdTable';
    private const str TaxWithholdTransStr = 'TaxWithholdTrans';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>DocumentDate</c> data type.
    /// </summary>
    /// <returns>
    /// The <c>DocumentDate</c> value.
    /// </returns>
    private DocumentDate documentDate()
    {
        VendTrans vendTrans = VendTrans::find(taxWithholdTrans.VendTransInvoiceId);
        VendInvoiceJour vendInvoiceJour = VendInvoiceJour::findFromVendTransVoucher(taxWithholdTrans.Invoice,
                                                                                    vendTrans.Voucher,
                                                                                    vendTrans.TransDate,
                                                                                    taxWithholdTrans.VendAccount);

        return vendInvoiceJour.DocumentDate ? vendInvoiceJour.DocumentDate : vendInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>gettaxWithholdYearlyReportTmp_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from <c>TaxWithholdYearlyReportTmp_IT</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxWithholdYearlyReportTmp_IT</c> table.
    /// </returns>
    [
        SRSReportDataSet(tablestr(TaxWithholdYearlyReportTmp_IT))
    ]
    public TaxWithholdYearlyReportTmp_IT gettaxWithholdYearlyReportTmp_IT()
    {
        select * from taxWithholdYearlyReportTmp_IT;
        return taxWithholdYearlyReportTmp_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query with the input values.
    /// </summary>
    /// <param name="_query">
    /// The current query of the report.
    /// </param>
    protected void initQuery(Query _query)
    {
        QueryBuildRange range = _query.dataSourceTable(tablenum(VendTable)).findRange(fieldnum(VendTable, AccountNum));

        if (fromVendAccount && toVendAccount)
        {
            if (!range)
            {
                range = _query.dataSourceTable(tablenum(VendTable)).addRange(fieldnum(VendTable ,AccountNum));
            }
            range.value(queryRange(fromVendAccount, toVendAccount));
        }
        else
        {
            if (range)
            {
                _query.dataSourceTable(tablenum(VendTable)).clearRange(fieldnum(VendTable, AccountNum));
            }
        }

        range = _query.dataSourceTable(tablenum(TaxWithholdTrans)).findRange(fieldnum(TaxWithholdTrans, TransDate));

        if (fromPaymentDate && toPaymentDate)
        {
            if (!range)
            {
                range = _query.dataSourceTable(tablenum(TaxWithholdTrans)).addRange(fieldnum(TaxWithholdTrans, TransDate));
            }
            range.value(queryRange(fromPaymentDate, toPaymentDate));
        }
        else
        {
            if (range)
            {
                _query.dataSourceTable(tablenum(TaxWithholdTrans)).clearRange(fieldnum(TaxWithholdTrans, TransDate));
            }
        }

        range = _query.dataSourceTable(tablenum(TaxWithholdTrans)).findRange(fieldnum(TaxWithholdTrans, CompetenceDate));

        if (fromCompetenceDate && toCompetenceDate)
        {
            if (!range)
            {
                range = _query.dataSourceTable(tablenum(TaxWithholdTrans)).addRange(fieldnum(TaxWithholdTrans, CompetenceDate));
            }
            range.value(queryRange(fromCompetenceDate, toCompetenceDate));
        }
        else
        {
            if (range)
            {
                _query.dataSourceTable(tablenum(TaxWithholdTrans)).clearRange(fieldnum(TaxWithholdTrans, CompetenceDate));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>TaxWithholdYearlyReportTmp_IT</c> table based on the input string.
    /// </summary>
    /// <param name="_name">
    /// Specifies the table or region from where the data originated.
    /// </param>
    private void insert(str _name)
    {
        switch (_name)
        {
            case VendTableStr:
                taxWithholdYearlyReportTmp_IT.AccountNum = vendTable.AccountNum;
                taxWithholdYearlyReportTmp_IT.VendName = vendTable.name();
                taxWithholdYearlyReportTmp_IT.BirthPlace = vendTable.BirthPlace;
                taxWithholdYearlyReportTmp_IT.BirthDate = vendTable.birthDate();
                taxWithholdYearlyReportTmp_IT.VendAddress = vendTable.postalAddress().Street + '   ' + vendTable.postalAddress().ZipCode + ' ' + vendTable.postalAddress().City + '   ' + vendTable.postalAddress().County;
                taxWithholdYearlyReportTmp_IT.FiscalCode = vendTable.FiscalCode;
                taxWithholdYearlyReportTmp_IT.CountryRegionName = LogisticsAddressCountryRegion::name(vendTable.postalAddress().CountryRegionId);
                break;
            case TaxWithholdTableStr:
                taxWithholdYearlyReportTmp_IT.TaxWithholdReasonCode = TaxWithholdTable.TaxWithholdReasonCode;
                taxWithholdYearlyReportTmp_IT.TaxWithholdRecipient = taxWithholdTable.TaxWithholdRecipient;
                taxWithholdYearlyReportTmp_IT.TaxWithholdSource = taxWithholdTable.TaxWithholdSource;
                break;
            case TaxWithholdTransStr:
                taxWithholdYearlyReportTmp_IT.TaxWithholdCode = taxWithholdTrans.TaxWithholdCode;
                taxWithholdYearlyReportTmp_IT.Voucher = taxWithholdTrans.Voucher;
                taxWithholdYearlyReportTmp_IT.CompetenceDate  = taxWithholdTrans.CompetenceDate;
                taxWithholdYearlyReportTmp_IT.TransDate = taxWithholdTrans.TransDate;
                taxWithholdYearlyReportTmp_IT.Invoice = taxWithholdTrans.Invoice;
                taxWithholdYearlyReportTmp_IT.TaxWithholdBaseAmount = taxWithholdTrans.TaxWithholdBaseAmount;
                taxWithholdYearlyReportTmp_IT.TaxTaxWithholdAmount = taxWithholdTrans.TaxTaxWithholdAmount;
                taxWithholdYearlyReportTmp_IT.TaxNotTaxableExpenses = taxWithholdTrans.TaxNotTaxableExpenses;
                taxWithholdYearlyReportTmp_IT.TaxNotTaxableByTreaty = taxWithholdTrans.TaxNotTaxableByTreaty;
                taxWithholdYearlyReportTmp_IT.TaxExemptedAmount = taxWithholdTrans.TaxExemptedAmount;
                taxWithholdYearlyReportTmp_IT.DocumentDate = this.documentDate();
                taxWithholdYearlyReportTmp_IT.TaxWithholdValue = TaxWithholdData::find(taxWithholdTrans.TaxWithholdCode,taxWithholdTrans.TransDate,this.totalAmount()).TaxWithholdValue;
                taxWithholdYearlyReportTmp_IT.TotalAmount = this.totalAmount();
                taxWithholdYearlyReportTmp_IT.TaxWithholdExclude = this.taxWithholdExclude();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the Microsoft SQL Server Reporting Services report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic.This method will be called by Reporting
    /// Services at runtime.The method should compute data and populate the data tables that will be
    /// returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        TaxWithholdYearlyReportContract_IT contract = this.parmDataContract() as TaxWithholdYearlyReportContract_IT;

        fromVendAccount = contract.parmFromVendAccount();
        toVendAccount = contract.parmToVendAccount();
        fromPaymentDate = contract.parmFromPaymentDate();
        toPaymentDate = contract.parmToPaymentDate();
        fromCompetenceDate = contract.parmFromCompetenceDate();
        toCompetenceDate = contract.parmToCompetenceDate();

        this.initQuery(this.parmQuery());

        QueryRun qr = new QueryRun(this.parmQuery());

        while (qr.next())
        {
            if (SysReportRun::changed(qr, tablenum(VendTable)))
            {
                vendTable = qr.get(tablenum(VendTable));
                this.insert(VendTableStr);
            }

            if (SysReportRun::changed(qr, tablenum(TaxWithholdTable)))
            {
                taxWithholdTable = qr.get(tablenum(TaxWithholdTable));
                this.insert(TaxWithholdTableStr);
            }

            taxWithholdTrans = qr.get(tablenum(TaxWithholdTrans));
            this.insert(TaxWithholdTransStr);
            taxWithholdYearlyReportTmp_IT.insert();
            taxWithholdYearlyReportTmp_IT.TaxWithholdReasonCode = "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdExclude</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>TaxWithholdExclude</c> value.
    /// </summary>
    /// <returns>
    /// The <c>TaxWithholdExclude</c> value.
    /// </returns>
    private TaxWithholdExclude taxWithholdExclude()
    {
        TaxWithholdExclude  taxWithholdExclude;
        AmountCur tmpAmount = taxWithholdTrans.TaxExemptedAmount + taxWithholdTrans.TaxWithholdBaseAmount;

        if (tmpAmount)
        {
            taxWithholdExclude = taxWithholdTrans.TaxExemptedAmount * 100 / tmpAmount;
        }
        return taxWithholdExclude;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>totalAmount</c> value.
    /// </summary>
    /// <returns>
    /// The <c>totalAmount</c> value.
    /// </returns>
    private AmountCur totalAmount()
    {
        return taxWithholdTrans.TaxNotTaxableExpenses  +
               taxWithholdTrans.TaxNotTaxableByTreaty  +
               taxWithholdTrans.TaxExemptedAmount      +
               taxWithholdTrans.TaxWithholdBaseAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>