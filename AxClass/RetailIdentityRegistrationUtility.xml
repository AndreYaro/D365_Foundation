<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailIdentityRegistrationUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// The <c>RetailIdentityRegistrationUtility</c> class is a support class for the <c>RetailCDXChannelService</c> class.
/// This class enables registering an application identity with AX to facilitate authentication.
/// </summary>
/// <remarks>
/// This is a framework class. Customizing this class may cause problems when accessing the real-time service.
/// </remarks>
public class RetailIdentityRegistrationUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>AddRetailServerIdentity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers an application and its identity provider to enable authentication to a resource server.
    /// </summary>
    /// <param name = "_identityProviderContract">The RetailIdentityProviderContract contract.</param>
    internal static void AddRetailServerIdentity (RetailIdentityProviderContract _identityProviderContract)
    {
        List relyingPartyContract = _identityProviderContract.parmRelyingParties();
        RetailIdentityProvider identityProvider;
        str errorMessage = 'Allowlist application with retail server - Error.';
        const str RetailIdentityRegistrationUtilityClass = classStr(RetailIdentityRegistrationUtility);

        if (_identityProviderContract.parmIdentityProviderUrl() == null || strLen(_identityProviderContract.parmIdentityProviderUrl()) == 0)
        {
            ApplicationEventSource::EventWriteRetailIdentityRegistrationUtilityFailure(funcName(), errorMessage + ' Identity provider URL is empty or null.');
            throw Global::error(errorMessage + ' Identity provider URL is empty or null.');
        }

        ttsbegin;
       
        identityProvider = RetailIdentityProvider::findOrCreate(_identityProviderContract.parmIdentityProviderUrl(), _identityProviderContract.parmIdentityProviderName(), _identityProviderContract.parmIdentityProviderType());
        
        if (identityProvider.RecId)
        {
            ListEnumerator enumerator = relyingPartyContract.getEnumerator();

            while (enumerator.moveNext())
            {
                RetailRelyingPartyContract partyContract = enumerator.current();

                if (partyContract.parmClientId() == null || strLen(partyContract.parmClientId()) == 0)
                {
                    ttsabort;
                    ApplicationEventSource::EventWriteRetailIdentityRegistrationUtilityFailure(funcName(), errorMessage + ' Client Id is empty or null.');
                    throw Global::error(errorMessage + ' Client Id is empty or null.');
                }

                RetailRelyingParty relyingParty = RetailRelyingParty::findOrCreate(identityProvider.RecId, partyContract.parmClientId(), partyContract.parmRelyingPartyType(), partyContract.parmRelyingPartyUserType());
                
                if (relyingParty.RecId)
                {
                    if (partyContract.parmClientName() != null && strLen(partyContract.parmClientName()) > 0)
                    {
                        relyingParty.selectForUpdate(true);
                        relyingParty.Name = partyContract.parmClientName();
                        relyingParty.update();
                    }

                    List serverResourceContract = partyContract.parmServerResourceIds();

                    ListEnumerator serverEnumerator = serverResourceContract.getEnumerator();

                    while (serverEnumerator.moveNext())
                    {
                        RetailServerResourceContract serverContract = serverEnumerator.current();

                        if (serverContract.parmServerResourceId() == null || strLen(serverContract.parmServerResourceId()) == 0)
                        {
                            ttsabort;
                            ApplicationEventSource::EventWriteRetailIdentityRegistrationUtilityFailure(funcName(), errorMessage + ' Server resource URL is empty or null.');
                            throw Global::error(errorMessage + ' Server resource URL is empty or null.');
                        }

                        RetailServerResource serverResource = RetailServerResource::findOrCreate(relyingParty.RecId, serverContract.parmServerResourceId());

                        if (!serverResource.RecId)
                        {
                            ttsabort;
                            ApplicationEventSource::EventWriteRetailIdentityRegistrationUtilityFailure(funcName(), errorMessage + ' Failed to find or create Server resource.');
                            throw Global::error(errorMessage + ' Failed to find or create Server resource.');
                        }

                        if (serverContract.parmServerResourceName() != null && strLen(serverContract.parmServerResourceName()) > 0)
                        {
                            serverResource.selectForUpdate(true);
                            serverResource.Name = serverContract.parmServerResourceName();
                            serverResource.update();
                        }
                    }
                }
                else
                {
                    ttsabort;
                    ApplicationEventSource::EventWriteRetailIdentityRegistrationUtilityFailure(funcName(), errorMessage + ' Failed to find or create Relying party.');
                    throw Global::error(errorMessage + ' Failed to find or create Relying party.');
                }

            }
        }
        else
        {
            ttsabort;
            ApplicationEventSource::EventWriteRetailIdentityRegistrationUtilityFailure(funcName(), errorMessage + ' Failed to find or create Identity provider.');
            throw Global::error(errorMessage + ' Failed to find or create Identity provider.');
        }
        ttscommit;

        if (RetailCdxSyncGlobalConfigOnScaleUnitRegisterFlight::instance().isEnabled())
        {
            System.Exception ex;
            const str GlobalConfigurationScheduleName = '1110';

            try
            {
               RetailIdentityRegistrationUtility::EnqueueScheduleRunner(GlobalConfigurationScheduleName);
            }
            catch (ex)
            {
               // Failures in running global configuration should not impact the service call
               ApplicationEventSource::EventWriteCdxEnqueueScheduleRunnerFailure(funcName(), strFmt('Failed to run global configuration delta sync: %1', ex.message));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EnqueueScheduleRunner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the distribution schedule 1110 (global configuration).
    /// </summary>
    internal static void EnqueueScheduleRunner(Name _scheduleName)
    {
         RetailCDXScheduleRunner scheduleRunner = new RetailCDXScheduleRunner();
         RetailConnSchedule      schedule;
         BatchInfo               batchSyncInfo;

         schedule = RetailConnSchedule::find(_scheduleName);
             
         if (schedule)
         {
            if (schedule.Active == NoYes::Yes)
            {
                batchSyncInfo = scheduleRunner.batchInfo();
                batchSyncInfo.parmCaption(strFmt("@Retail:GlobalConfigurationScheduleCaption", _scheduleName));
                scheduleRunner.paramScheduleRecID(schedule.RecId);
                RetailCDXScheduleRunner::queueInBatch(scheduleRunner, conNull()); // no recurrence.
                ApplicationEventSource::EventWriteCdxEnqueueScheduleRunnerSuccess(funcName(), _scheduleName);
            }
            else
            {
                ApplicationEventSource::EventWriteCdxEnqueueScheduleRunnerFailure(funcName(), strFmt('Failed to run global configuration delta sync. Schedule %1 not active.', _scheduleName));
            }
         }
         else
         {
            ApplicationEventSource::EventWriteCdxEnqueueScheduleRunnerFailure(funcName(), strFmt('Failed to run global configuration delta sync. Schedule %1 not found.', _scheduleName));
         }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RegisterAadApplication</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers an AAD application and its identity provider to enable authentication to a resource server.
    /// </summary>
    /// <param name = "_aadApplicationContract">The RetailAadApplicationContract contract.</param>
    internal static void RegisterAadApplication(RetailAadApplicationContract _aadApplicationContract)
    {
        SysAADClientTable sysAADClientTable;

        ttsbegin;

        select forUpdate sysAADClientTable
            where sysAADClientTable.AADClientId == _aadApplicationContract.parmAadClientId();

        sysAADClientTable.AADClientId = _aadApplicationContract.parmAadClientId();
        sysAADClientTable.Name        = _aadApplicationContract.parmName();
        sysAADClientTable.UserId      = _aadApplicationContract.parmUserId();
        sysAADClientTable.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UnRegisterAadApplication</Name>
				<Source><![CDATA[
    /// <summary>
    /// UnRegisters an AAD application.
    /// </summary>
    /// <param name = "_aadApplicationContract">The RetailAadApplicationContract contract.</param>
    internal static void UnRegisterAadApplication(RetailAadApplicationContract _aadApplicationContract)
    {
        SysAADClientTable sysAADClientTable;

        ttsbegin;

        delete_from sysAADClientTable
            where   sysAADClientTable.AADClientId == _aadApplicationContract.parmAadClientId();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>