<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RCashExchAdjPL</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the main class for exchange adjustment calculation on cash transactions.
/// </summary>
class RCashExchAdjPL extends RCashExchAdj implements BatchRetryable
{
    PlExchDiffCalcType    exchDiffCalcType;
    RCashTrans            cashTransOutcome, cashTransIncome;
    DialogField           fullRecalcField;
    NoYes                 fullRecalc;
    NumberSeq             numberSeq;
    Voucher               voucher;
    LedgerVoucher         ledgerVoucher;
    TransactionTxt        transactionTxt;
    TransTxt              transTxt;
    Map                   oldTransMap;
    boolean               gain;

    private const int CurrentVersion = 1;
    #localmacro.CurrentList
        toDate,
        fullRecalc
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the exchange rate adjustment for cash account.
    /// </summary>
    /// <param name="_accountNum">
    /// The cash account number for which exch rate adjustment is calculated.
    /// </param>
    public void calcAndPost(RCashAccount _accountNum)
    {
        AmountMST                       exchAmount, totalExchAmount, inSettleAmountMst, outSettleAmountMst;
        int                             idx;
        LedgerDimensionAccount          ledgerAccount;
        CurrencyCode                    currencyCode;
        DimensionDefault                dimension;
        const int Four = 4;

        this.clear();

        try
        {
            ttsbegin;
            if (fullRecalc)
            {
                this.prepare(_accountNum);
            }

            KeySum keySum = KeySum::construct(Four,1);

            while (this.fetchOutcome(_accountNum))
            {
                this.progressUpdate(strfmt("@SYS27234",
                                    cashTransOutcome.AccountNum,
                                    cashTransOutcome.Voucher,
                                    cashTransOutcome.CurrencyCode));

                exchAmount      = 0;
                totalExchAmount = 0;

                while (cashTransOutcome.AmountCur != cashTransOutcome.SettleAmountCur_PL)
                {
                    if (! this.fetchIncome(_accountNum))
                    {
                        break;
                    }

                    AmountCur settleAmount = min(cashTransIncome.AmountCur - cashTransIncome.SettleAmountCur_PL,
                                       cashTransOutcome.SettleAmountCur_PL - cashTransOutcome.AmountCur);

                    if (settleAmount == (cashTransIncome.AmountCur - cashTransIncome.SettleAmountCur_PL) &&
                        settleAmount == (cashTransOutcome.SettleAmountCur_PL - cashTransOutcome.AmountCur) )
                    {
                        inSettleAmountMst = cashTransIncome.AmountMST - cashTransIncome.SettleAmountMST_PL;
                        outSettleAmountMst = cashTransOutcome.SettleAmountMST_PL - cashTransOutcome.AmountMST;
                    }
                    else if (settleAmount == (cashTransIncome.AmountCur - cashTransIncome.SettleAmountCur_PL) )
                    {
                        inSettleAmountMst = cashTransIncome.AmountMST - cashTransIncome.SettleAmountMST_PL;
                        outSettleAmountMst = CurrencyExchangeHelper::amount(cashTransOutcome.AmountMST * settleAmount / (cashTransOutcome.AmountCur ? cashTransOutcome.AmountCur : -1));
                    }
                    else
                    {
                        inSettleAmountMst = CurrencyExchangeHelper::amount(cashTransIncome.AmountMST * settleAmount / (cashTransIncome.AmountCur ? cashTransIncome.AmountCur : 1));
                        outSettleAmountMst = cashTransOutcome.SettleAmountMST_PL - cashTransOutcome.AmountMST;
                    }

                    cashTransIncome.SettleAmountCur_PL += settleAmount;
                    cashTransIncome.SettleAmountMST_PL += inSettleAmountMst;
                    cashTransIncome.update();

                    exchAmount = outSettleAmountMst - inSettleAmountMst;
                    totalExchAmount += exchAmount;

                    cashTransOutcome.SettleAmountCur_PL -= settleAmount;
                    cashTransOutcome.SettleAmountMST_PL -= outSettleAmountMst;
                    cashTransOutcome.ExchAdjustment_PL  += exchAmount;
                    cashTransOutcome.update();
                }

                if (! totalExchAmount)
                {
                    continue;
                }
                else
                {
                    if (totalExchAmount > 0)
                        gain = True;
                    else
                        gain = False;
                }

                keySum.updateNow([cashTransOutcome.LedgerDimension, cashTransOutcome.CurrencyCode, gain], totalExchAmount);
            }

            if (keySum.numOfTrans())
            {
                this.progressUpdate("@SYS5943");

                for (idx = 1; idx <= keySum.numOfTrans(); idx ++)
                {
                    [ledgerAccount, currencyCode, gain] = keySum.index2Key(idx);
                    exchAmount                          = keySum.index2Data(idx);

                    if (oldTransMap && oldTransMap.exists([ledgerAccount, currencyCode, gain]))
                    {
                        exchAmount = exchAmount - oldTransMap.lookup([ledgerAccount, currencyCode, gain]);
                        oldTransMap.remove([ledgerAccount, currencyCode, gain]);
                    }
                    this.postTrans(_accountNum,
                                   currencyCode,
                                   exchAmount,
                                   dimension,
                                   ledgerAccount);
                }

                if (oldTransMap && ! oldTransMap.empty())
                {
                    MapEnumerator oldTransEnumerator = oldTransMap.getEnumerator();
                    while (oldTransEnumerator.moveNext())
                    {
                        [ledgerAccount, currencyCode, gain] = oldTransEnumerator.currentKey();
                        exchAmount                          = oldTransEnumerator.currentValue();

                        this.postTrans(_accountNum,
                                       currencyCode,
                                       - exchAmount,
                                       dimension,
                                       ledgerAccount);
                    }
                }
                if (ledgerVoucher)
                {
                    ledgerVoucher.end();
                    TransactionLog::create(this.transactionLogType(), this.transactionLogTxt());
                }
            }
            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks if unposted transactions exist in
    /// the slip journal for the cash account.
    /// </summary>
    /// <returns>
    /// False if any unposted transactions exist for the cash account.
    /// </returns>
    public boolean check()
    {
        RCashTrans cashTrans;
        boolean ret = true;

        while (queryRun.next())
        {
            RCashTable cashTable = queryRun.get(tablenum(RCashTable));

            setprefix(strfmt("@GLS104785", cashTable.AccountNum));

            select firstonly cashTrans
                order by TransDate desc
                where cashTrans.AccountNum      == cashTable.AccountNum   &&
                      cashTrans.Posted          == NoYes::No              &&
                      cashTrans.TransDate       <= toDate                 &&
                      cashTrans.TransStatus     == RCashTransStatus::Approved;
            if (cashTrans)
            {
                SysInfoAction_Formrun sysInfoAction = SysInfoAction_Formrun::newFormnameControlnameDesc(formstr(LedgerJournalTable), "", "@SYS53465");
                sysInfoAction.parmCallerBuffer(cashTrans.ledgerJournalTrans().ledgerJournalTable());
                ret = checkFailed(strfmt("@GLS106879", cashTrans.ledgerJournalTrans().JournalNum, cashTrans.TransDate),
                                  "", sysInfoAction.parmCallerBuffer() ? sysInfoAction : null);
            }
        }
        queryRun.reset();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    private void clear()
    {
        cashTransOutcome.clear();
        cashTransIncome.clear();
        ledgerVoucher = null;
        oldTransMap   = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunBase dialog = super();
        DialogGroup dialogGroup = dialog.addGroup("@SYS7170");
        dialogGroup.widthMode(FormWidth::ColumnWidth);

        fullRecalcField = dialog.addFieldValue(enumStr(NoYes), fullRecalc, "@SYS7170", "@GLS110758");

        dialogFromCur.visible(false);
        dialogToCur.visible(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchIncome</Name>
				<Source><![CDATA[
    private boolean fetchIncome(RCashAccount _accountNum)
    {
        if (exchDiffCalcType == PlExchDiffCalcType::FIFO)
        {
            select firstonly forupdate cashTransIncome
                order by TransDate asc, DocId asc, AmountCur asc, CurrencyCode asc
                where cashTransIncome.AccountNum        == _accountNum                        &&
                      cashTransIncome.AmountCur         >  0                                  &&
                      cashTransIncome.TransDate         <= toDate                             &&
                      cashTransIncome.DocType           != RCashDocType::ExchRateDifference   &&
                      cashTransIncome.AmountCur         != cashTransIncome.SettleAmountCur_PL &&
                      cashTransIncome.CurrencyCode      == cashTransOutcome.CurrencyCode      &&
                      cashTransIncome.ExcludeExchAdj_PL != NoYes::Yes;
        }
        else
        {
            select firstonly forupdate cashTransIncome
                order by TransDate desc, DocId desc, AmountCur desc, CurrencyCode desc
                where cashTransIncome.AccountNum        == _accountNum                        &&
                      cashTransIncome.AmountCur         >  0                                  &&
                      cashTransIncome.TransDate         <= cashTransOutcome.TransDate         &&
                      cashTransIncome.DocType           != RCashDocType::ExchRateDifference   &&
                      cashTransIncome.AmountCur         != cashTransIncome.SettleAmountCur_PL &&
                      cashTransIncome.CurrencyCode      == cashTransOutcome.CurrencyCode      &&
                      cashTransIncome.ExcludeExchAdj_PL != NoYes::Yes;
        }

        return cashTransIncome.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchOutcome</Name>
				<Source><![CDATA[
    private boolean fetchOutcome(RCashAccount _accountNum)
    {
        if (! cashTransOutcome)
        {
            if (exchDiffCalcType == PlExchDiffCalcType::FIFO)
            {
                select forupdate cashTransOutcome
                    order by TransDate asc, DocId asc, AmountCur asc, CurrencyCode asc
                    where cashTransOutcome.AccountNum           == _accountNum                         &&
                          cashTransOutcome.AmountCur            <  0                                   &&
                          cashTransOutcome.TransDate            <= toDate                              &&
                          cashTransOutcome.DocType              != RCashDocType::ExchRateDifference    &&
                          cashTransOutcome.AmountCur            != cashTransOutcome.SettleAmountCur_PL &&
                          cashTransOutcome.ExcludeExchAdj_PL    != NoYes::Yes;
            }
            else
            {
                select forupdate cashTransOutcome
                    order by TransDate desc, DocId desc, AmountCur desc, CurrencyCode desc
                    where cashTransOutcome.AccountNum           == _accountNum                         &&
                          cashTransOutcome.AmountCur            <  0                                   &&
                          cashTransOutcome.TransDate            <= toDate                              &&
                          cashTransOutcome.DocType              != RCashDocType::ExchRateDifference    &&
                          cashTransOutcome.AmountCur            != cashTransOutcome.SettleAmountCur_PL &&
                          cashTransOutcome.ExcludeExchAdj_PL    != NoYes::Yes;
            }
        }

        else
        {
            next cashTransOutcome;
        }

        return cashTransOutcome.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the dilog values to the class variables.
    /// the slip journal for the cash account.
    /// </summary>
    /// <returns>
    /// True on successful execution of the method.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            fullRecalc = fullRecalcField.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCashTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the cash transaction buffer.
    /// </summary>
    /// <param name ="_accountNum">
    /// The cash account for the exchange adjustment.
    /// </param>
    /// <param name ="_toDate">
    /// The date before which the transactions should
    /// be considered for exchange adjustment.
    /// </param>
    /// <param name ="_currencyCode">
    /// The currency code for the exchange adjustment.
    /// </param>
    /// <param name ="_exchAmount">
    /// The calculated exchange amount.
    /// </param>
    /// <param name ="_defaultDimension">
    /// The default dimension for the cash transaction.
    /// </param>
    /// <param name ="_ledgerVoucherObject">
    /// The ledger voucher object created for transaction posting.
    /// </param>
    /// <param name ="_defaultAccount">
    /// The default account from ledger journal.
    /// </param>
    /// <param name ="_offsetDefaultAccount">
    /// The offset account from ledger journal.
    /// </param>
    /// <param name ="_isReportingExchAdj">
    /// The exhange adjustment reporting flag..
    /// </param>
    /// <returns>
    /// Cash transaction buffer.
    /// </returns>
    protected RCashTrans initCashTrans(RCashAccount                 _accountNum,
                                       TransDate                    _toDate,
                                       CurrencyCode                 _currencyCode,
                                       AmountMSTExchAdjustment      _exchAmount,
                                       DimensionDefault             _defaultDimension,
                                       LedgerVoucherObject          _ledgerVoucherObject,
                                       LedgerDimensionDefaultAccount _defaultAccount,
                                       LedgerDimensionDefaultAccount _offsetDefaultAccount,
                                       boolean                       _isReportingExchAdj)
    {
        RCashTrans  cashTrans;

        cashTrans.TransDate                = _toDate;
        cashTrans.AttachmentNum            = "";
        cashTrans.PaymentNotes             = "";
        cashTrans.AccountNum               = _accountNum;
        cashTrans.Voucher                  = _ledgerVoucherObject.parmVoucher();
        cashTrans.Txt                      = _ledgerVoucherObject.lastTransTxt();
        cashTrans.CurrencyCode             = _currencyCode;
        cashTrans.AmountCur                = 0.0;
        cashTrans.AmountMST                = _isReportingExchAdj ? 0 : _exchAmount;
        cashTrans.ReportingCurrencyAmount  = _isReportingExchAdj ? _exchAmount : 0;

        cashTrans.DocId                    = this.allocateNumSeqCode(_accountNum, _isReportingExchAdj);

        cashTrans.DocType                  = _isReportingExchAdj ? RCashDocType::ReportingExchRateDifference : RCashDocType::ExchRateDifference;
        cashTrans.LedgerDimension          = LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultAccount, _defaultDimension);
        cashTrans.OffsessionId             = "";
        cashTrans.OffsetLedgerDimensionNum = LedgerDimensionFacade::serviceCreateLedgerDimension(_offsetDefaultAccount, _defaultDimension);
        cashTrans.OffsetAccountType        = LedgerJournalACType::Ledger;
        cashTrans.OffsetLedgerDimension    = cashTrans.OffsetLedgerDimensionNum;
        cashTrans.TransStatus              = RCashTransStatus::Approved;
        cashTrans.Posted                   = NoYes::Yes;

        return cashTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    private void initLedgerVoucher()
    {
        if (! ledgerVoucher)
        {
            numberSeq = NumberSeq::newGetVoucher(RCashParameters::numRefCashExchAdjVoucher(), false);
            voucher   = numberSeq.voucher();

            transactionTxt = TransactionTxt::construct();
            transactionTxt.setDate(toDate);
            transactionTxt.setType(LedgerTransTxt::RCashExchAdj);
            transactionTxt.setVoucher(voucher);
            transTxt = transactionTxt.txt();

            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                         SysModule::RCash,
                                                         numberSeq.parmVoucherSequenceCode(),
                                                         TransactionLogType::RCashExchAdj,
                                                         transTxt);

            ledgerVoucher.addVoucher(LedgerVoucherObject::newVoucher(voucher,
                                                                     toDate,
                                                                     SysModule::RCash,
                                                                     LedgerTransType::ExchAdjustment));
            ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transTxt);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query query = new Query("@SYS24408");
        QueryBuildDataSource qbds = query.addDataSource(tablenum(RCashTable));
        qbds.addRange(fieldnum(RCashTable, AccountNum));

        queryRun = new QueryRun(query);
        toDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the progress of exchange adjustment process.
    /// </summary>
    protected void initProgress()
    {
        #macrolib.AviFiles

        Counter    counter, progressTotal;
        RCashTrans cashTrans;
        const int FullRecalcCoeff = 2;

        while (queryRun.next())
        {
            RCashTable cashTable = queryRun.get(tablenum(RCashTable));
            counter ++;
            select count(RecId) from cashTrans
                where cashTrans.AccountNum   == cashTable.AccountNum                &&
                      cashTrans.AmountCur    <  0                                   &&
                      cashTrans.TransDate    <= toDate                              &&
                      cashTrans.DocType      != RCashDocType::ExchRateDifference    &&
                      cashTrans.AmountCur    != cashTransOutcome.SettleAmountCur_PL;

            progressTotal += int642int(cashTrans.RecId);
        }
        progressTotal = progressTotal + (fullRecalc ? counter * FullRecalcCoeff : counter);
        queryRun.reset();

        this.progressInit("@SYS55328", progressTotal, #AviUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        exchDiffCalcType = RCashParameters::find().ExchDiffCalcType_PL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method posts the exchange adjustment transaction for the cash account.
    /// </summary>
    /// <param name ="_accountNum">
    /// The cash account for the exchange adjustment.
    /// </param>
    /// <param name ="_currencyCode">
    /// The currency code for the exchange adjustment.
    /// </param>
    /// <param name ="_exchAmount">
    /// The calculated exchange amount.
    /// </param>
    /// <param name ="_dimension">
    /// The default dimension for the cash transaction.
    /// </param>
    /// <param name ="_ledgerAccount">
    /// The ledger account from ledger journal.
    /// </param>
    protected void postTrans(RCashAccount               _accountNum,
                             CurrencyCode               _currencyCode,
                             AmountMSTExchAdjustment    _exchAmount,
                             DimensionDefault           _dimension,
                             LedgerDimensionAccount     _ledgerAccount)
    {
        LedgerPostingType exchPostingType;
        LedgerDimensionDefaultAccount exchLedgerAccount;

        if (_exchAmount)
        {
            this.initLedgerVoucher();

            if (_exchAmount > 0)
            {
                exchPostingType   = LedgerPostingType::ExchRateGain;
                exchLedgerAccount = CurrencyLedgerGainLossAccount::ledgerDimension(Ledger::current(), _currencyCode, CurrencyGainLossAccountType::FinancialGain);
            }
            else
            {
                exchPostingType   = LedgerPostingType::ExchRateLoss;
                exchLedgerAccount = CurrencyLedgerGainLossAccount::ledgerDimension(Ledger::current(), _currencyCode, CurrencyGainLossAccountType::FinancialLoss);
            }

            RCashTrans cashTrans = this.initCashTrans(_accountNum,
                                            ToDate,
                                           _currencyCode,
                                           _exchAmount,
                                           _dimension,
                                           ledgerVoucher.findLedgerVoucherObject(voucher, toDate),
                                           _ledgerAccount,
                                           exchLedgerAccount,
                                           false);

            RCashVoucher::updateBalances(cashTrans);
            cashTrans.insert();

            ledgerVoucher.addTrans(LedgerVoucherTransObject::newBasicMST_RU(ledgerVoucher.findLedgerVoucherObject(voucher, ToDate),
                                                                                   exchPostingType,
                                                                                   cashTrans.LedgerDimension,
                                                                                   _currencyCode,
                                                                                   _exchAmount));
            ledgerVoucher.addTrans(LedgerVoucherTransObject::newBasicMST_RU(ledgerVoucher.findLedgerVoucherObject(voucher, ToDate),
                                                                                   exchPostingType,
                                                                                   cashTrans.OffsetLedgerDimension,
                                                                                   _currencyCode,
                                                                                   - _exchAmount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of exhange adjustment transactions for the cash account.
    /// </summary>
    /// <param name ="_accountNum">
    /// The cash account for the exchange adjustment.
    /// </param>
    protected void prepare(RCashAccount _accountNum)
    {
        RCashTrans                  cashTrans;
        LedgerFiscalCalendarPeriod  ledgerFiscalCalendarPeriod;
        FiscalCalendarPeriod        fiscalCalendarPeriod;

        this.progressUpdate("@SYS26577");

        select firstOnly fiscalCalendarPeriod
            order by fiscalCalendarPeriod.StartDate asc
            where fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            join RecId from ledgerFiscalCalendarPeriod
            where ledgerFiscalCalendarPeriod.Ledger == Ledger::current()
                && ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Open
                && ledgerFiscalCalendarPeriod.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId;

        if (fiscalCalendarPeriod)
        {
            update_recordset cashTrans
                setting SettleAmountCur_PL = 0, ExchAdjustment_PL = 0, SettleAmountMST_PL = 0
                where cashTrans.AccountNum == _accountNum
                    && cashTrans.TransDate >= fiscalCalendarPeriod.StartDate
                    && cashTrans.DocType != RCashDocType::ExchRateDifference;

            oldTransMap = new Map(Types::Container, Types::Real);

            while select sum(AmountMST) from cashTrans
                group by ledgerDimension, CurrencyCode
                where cashTrans.AccountNum == _accountNum
                    && cashTrans.DocType == RCashDocType::ExchRateDifference
                    && cashTrans.TransDate >= fiscalCalendarPeriod.StartDate
            {
                if (cashTrans.AmountMST)
                {
                    oldTransMap.insert([cashTrans.LedgerDimension,
                                        cashTrans.CurrencyCode,
                                        gain],
                                        cashTrans.AmountMST);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the transaction log text.
    /// </summary>
    /// <returns>
    /// Transaction log text
    /// </returns>
    public TransTxt transactionLogTxt()
    {
        return "@GLS110756";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer   version = conpeek(_packedClass, 1);
        container packedQuery;

        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method validates the dialog fields
    /// </summary>
    /// <param name = 'calledFrom'>
    /// The object that calls the dialog.
    /// </param>
    /// <returns>
    /// False if toDate is null.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        if (! toDate)
        {
            ret = checkFailed("@SYS24455");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS55328";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RCashExchAdjPL exchAdj = new RCashExchAdjPL();

        setprefix("@SYS24408");

        if (exchAdj.prompt() && exchAdj.check())
        {
            exchAdj.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExclExchAdj_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method sets the exchanged adjustment field for the cash transaction.
    /// </summary>
    /// <param name = "_rCashTrans">
    /// The cash transaction record.
    /// </param>
    /// <param name = "_excludeExchAdjustment_PL">
    /// The exclude exchange adjustment value, either yes or no.
    /// </param>
    public static void setExclExchAdj_PL(RCashTrans _rCashTrans, PlExcludeExchAdj _excludeExchAdjustment_PL)
    {
        RCashTrans rCashTrans;

        update_recordset rCashTrans
            setting ExcludeExchAdj_PL = _excludeExchAdjustment_PL
            where rCashTrans.RecId == _rCashTrans.RecId;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>