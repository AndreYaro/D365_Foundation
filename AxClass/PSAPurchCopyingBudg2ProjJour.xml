<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAPurchCopyingBudg2ProjJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesPurchCopyFactory(SalesPurchCopy::CopyAllHeader, tableStr(InventJournalTrans))]
[SalesPurchCopyFactory(SalesPurchCopy::CopyAllLines, tableStr(InventJournalTrans))]
[SalesPurchCopyFactory(SalesPurchCopy::CopyJournalHeader, tableStr(InventJournalTrans))]
[SalesPurchCopyFactory(SalesPurchCopy::CopyJournalLines, tableStr(InventJournalTrans))]
public class PSAPurchCopyingBudg2ProjJour
{
    InventJournalTrans  m_tInventJournalTrans;

    TmpFrmVirtual       tmpFrmVirtualLines;
    TmpFrmVirtual       tmpFrmVirtualHeader;

    Qty             qtyFactor;

    NoYes           reverseSign;
    NoYes           recalculateAmount;
    NoYes           copyMarkup;
    NoYes           copyPrecisely;
    NoYes           deleteLines;
    NoYes           startingLineNum;

    LineNum         lineNum;
    Voucher         voucher;
    InventDim       inventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    void copy()
    {
        ForecastSales           tFromForecastSales;
        InventJournalTrans      tInventJournalTrans;
        JournalId               sJournalId = m_tInventJournalTrans.JournalId;

        NoYes                   searchPrice;
        NoYes                   copyQty;

        ttsbegin;

        if (recalculateAmount)
        {
            searchPrice= NoYes::Yes;
        }
        else
        {
            searchPrice= NoYes::No;
        }

        copyQty = qtyFactor ? NoYes::Yes : NoYes::No;

        while select tmpFrmVirtualLines order by num
        {
            tInventJournalTrans.clear();

            tInventJournalTrans.initFromInventJournalTable(InventJournalTable::find(sJournalId));
            tInventJournalTrans.initFromInventJournalTrans(m_tInventJournalTrans);
            tInventJournalTrans.LineNum = InventJournalTrans::lastLineNum(sJournalId)+1;

            switch (tmpFrmVirtualLines.tableNum)
            {
                case tablenum(ForecastSales)        :   select forupdate firstonly * from tFromForecastSales
                                                            where tFromForecastSales.RecId == tmpFrmVirtualLines.RecordNo;
                                                        tInventJournalTrans.initFromForecastSales(tFromForecastSales, !searchPrice, copyQty, tmpFrmVirtualLines.qty);

                                                        break;
            }

            if (copyQty)
            {
                tInventJournalTrans.Qty     = reverseSign ? -tInventJournalTrans.Qty : tInventJournalTrans.Qty;
                tInventJournalTrans.Qty     = tInventJournalTrans.Qty * qtyFactor;
            }

            tInventJournalTrans.CostAmount    = reverseSign ? - tInventJournalTrans.CostAmount : tInventJournalTrans.CostAmount;

            tInventJournalTrans.calcCostAmount();
            tInventJournalTrans.InventDimId = this.parmInventDim().inventDimId;
            tInventJournalTrans.ToInventDimId = m_tInventJournalTrans.InventDimId;
            if (!tInventJournalTrans.Voucher)
            {
                tInventJournalTrans.Voucher = this.parmVoucherNum();
            }
            tInventJournalTrans.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void initParameters(InventJournalTrans _tInventJournalTrans,
                        TmpFrmVirtual  _tmpFrmVirtualLines,
                        TmpFrmVirtual  _tmpFrmVirtualHeader,
                        Qty            _qtyFactor         = 1,
                        NoYes          _reverseSign       = NoYes::No,
                        NoYes          _recalculateAmount = NoYes::No,
                        NoYes          _copyMarkup        = NoYes::No,
                        NoYes          _copyPrecisely     = NoYes::No,
                        NoYes          _deleteLines       = NoYes::No)
    {
        m_tInventJournalTrans   = _tInventJournalTrans;
        tmpFrmVirtualLines      = _tmpFrmVirtualLines;
        tmpFrmVirtualHeader     = _tmpFrmVirtualHeader;
        qtyFactor               = _qtyFactor;
        reverseSign             = _reverseSign;
        recalculateAmount       = _recalculateAmount;
        copyMarkup              = _copyMarkup;
        copyPrecisely           = _copyPrecisely;
        deleteLines             = _deleteLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        startingLineNum = NoYes::No;
        lineNum         = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        inventDim = _inventDim;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucherNum</Name>
				<Source><![CDATA[
    public Voucher parmVoucherNum(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PSAPurchCopyingBudg2ProjJour construct(SalesPurchCopy _salesPurchCopy)
    {
        SalesPurchCopyFactoryAttribute attr = new SalesPurchCopyFactoryAttribute(_salesPurchCopy, tableStr(InventJournalTrans));
        PSAPurchCopyingBudg2ProjJour psaPurchCopyingBudg2ProjJour = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PSAPurchCopyingBudg2ProjJour), attr) as PSAPurchCopyingBudg2ProjJour;

        if (!psaPurchCopyingBudg2ProjJour)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return psaPurchCopyingBudg2ProjJour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>