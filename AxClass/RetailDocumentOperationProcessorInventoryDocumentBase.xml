<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationProcessorInventoryDocumentBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using System.Xml.Linq;
using Microsoft.Dynamics.Commerce.Runtime.TransactionService;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using CommerceRunTimeDataModel = Microsoft.Dynamics.Commerce.Runtime.DataModel;

/// <summary>
/// The <c>RetailDocumentOperationProcessorInventoryDocumentBase</c> class is a base retail inventory document operation processor contains shared inventory document logic.
/// </summary>
internal abstract class RetailDocumentOperationProcessorInventoryDocumentBase extends RetailDocumentOperationProcessorBase
{
    internal const str HeaderNoteAttachmentName = 'Inventory document note';
    internal const str LineNoteAttachmentName = 'Inventory document line note';

    private CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetEventSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get event source.
    /// </summary>
    protected CommerceHQEventSource GetEventSource()
    {
        return this.eventSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventoryInboundOutboundCommitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate commit document.
    /// </summary>
    /// <param name = "_document">The commit document.</param>
    /// <exception cref="Exception::Error">The <c>InventoryInboundOutboundCommitDocument</c> is not valid.</exception>
    protected void validateInventoryInboundOutboundCommitDocument(CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument _document)
    {
        if (_document == null
            || _document.Document == null
            || _document.get_Document().get_SourceDocument() == null
            || _document.DocumentLines == null)
        {
            eventSource.EventWriteInventoryDocumentNotValidInventoryInboundOutboundCommitDocument(this.getOperationName(), this.getRequestId());
            this.throwsException(this.isRetriable, strFmt("@RetailDocumentOperationLabels:RetailDocumentOperationNotValidInventoryInboundOutboundCommitDocument", this.getOperationName(), this.getRequestId()), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventoryInboundOutboundDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate document line.
    /// </summary>
    /// <param name = "_line">The document line.</param>
    /// <exception cref="Exception::Error">The <c>InventoryInboundOutboundDocumentLine</c> is not valid.</exception>
    protected void validateInventoryInboundOutboundDocumentLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line)
    {
        if (_line == null
            || _line.SourceDocumentLine == null)
        {
            eventSource.EventWriteInventoryDocumentNotValidInventoryInboundOutboundDocumentLine(this.getOperationName(), this.getRequestId(), '');
            this.throwsException(this.isRetriable, strFmt("@RetailDocumentOperationLabels:RetailDocumentOperationNotValidInventoryInboundOutboundDocumentLine", this.getOperationName(), this.getRequestId(), _line == null ? '' : _line.LineId), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
        }

        if (_line.SerialNumberLines.Count > 0)
        {
            IEnumerable serialNumberLineList = _line.SerialNumberLines as IEnumerable;
            IEnumerator enumerator = serialNumberLineList.GetEnumerator();
            System.Decimal quantityToUpdate = 0;
            while (enumerator.MoveNext())
            {
                CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine serialNumberLine = enumerator.Current as CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine;
                this.validateInventoryInboundOutboundDocumentSerialNumberLine(_line.SourceDocumentType, serialNumberLine);
                // We only deal with registering serial number line.
                if (serialNumberLine.Status != CommerceRunTimeDataModel.InventorySerialNumberLineStatus::Registering)
                {
                    continue;
                }
                quantityToUpdate += serialNumberLine.Quantity;
            }

            if (quantityToUpdate != _line.QuantityToUpdate)
            {
                this.throwsException(this.isRetriable, strFmt("@RetailDocumentOperationLabels:RetailDocumentOperationNotValidInventoryInboundOutboundDocumentLine", this.getOperationName(), this.getRequestId(), _line == null ? '' : _line.LineId), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventoryInboundOutboundDocumentSerialNumberLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate serial number line.
    /// </summary>
    /// <param name = "_serialNumberLine">The serial number line.</param>
    /// <exception cref="Exception::Error">The <c>InventoryDocumentSerialNumberLine</c> is not valid.</exception>
    private void validateInventoryInboundOutboundDocumentSerialNumberLine(CommerceRunTimeDataModel.InventorySourceDocumentType _sourceDocumentType, CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine _serialNumberLine)
    {
        if (_serialNumberLine == null || _serialNumberLine.LineId == null)
        {
            str serialNumberLineId = _serialNumberLine == null || _serialNumberLine.LineId == null ? '' : _serialNumberLine.LineId;
            eventSource.EventWriteInventoryDocumentNotValidInventoryInboundOutboundSerialNumberLine(this.getOperationName(), this.getRequestId(), serialNumberLineId);
            this.throwsException(this.isRetriable, strFmt("@RetailDocumentOperationLabels:RetailDocumentOperationNotValidInventoryInboundOutboundSerialNumberLine", this.getOperationName(), this.getRequestId(), serialNumberLineId), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachNoteForInventoryCommitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attach note for inventory commit document.
    /// </summary>
    /// <param name = "_inventoryCommitDocument">The inventory commit document.</param>
    protected void attachNoteForInventoryCommitDocument(CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument _inventoryCommitDocument)
    {
        CommerceRunTimeDataModel.InventoryInboundOutboundDocument inventoryDocument = _inventoryCommitDocument.Document;
        IEnumerable lineList = _inventoryCommitDocument.DocumentLines as IEnumerable;

        ttsbegin;
        if (inventoryDocument.Note && inventoryDocument.Note != '')
        {
            this.attachNoteToInventoryDocument(inventoryDocument);
        }

        IEnumerator enumerator = lineList.GetEnumerator();
        while (enumerator.MoveNext())
        {
            CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine line = enumerator.Current as CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine;
            boolean shouldAttachNoteToInventoryDocumentLine = this.shouldAttachNoteToInventoryDocumentLine(line);
            if (shouldAttachNoteToInventoryDocumentLine)
            {
                this.attachNoteToInventoryDocumentLine(line);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get document table object from <c>InventoryInboundOutboundDocument</c>.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocument">The inventory document.</param>
    /// <returns>
    /// An document table with <c>Common</c> type.
    /// </returns>
    protected abstract Common getDocument(CommerceRunTimeDataModel.InventoryInboundOutboundDocument _inventoryInboundOutboundDocument)
    {
        // Abstract function is only implemented in subclasses.
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get document line table object from <c>InventoryInboundOutboundDocumentLine</c>.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocumentLine">The inventory document line.</param>
    /// <returns>
    /// An document table with <c>Common</c> type.
    /// </returns>
    protected abstract Common getDocumentLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _inventoryInboundOutboundDocumentLine)
    {
        // Abstract function is only implemented in subclasses.
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAttachNoteToInventoryDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if note needs to be attached to inventory document line.
    /// </summary>
    /// <param name = "_line">The document line.</param>
    /// <returns>
    /// The boolean value indicates whether line is deleted.
    /// </returns>
    protected boolean shouldAttachNoteToInventoryDocumentLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line)
    {
        if (!_line.Note)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachNoteToInventoryDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attach note to inventory document as new document note attachment.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocument">The inventory document.</param>
    private void attachNoteToInventoryDocument(CommerceRunTimeDataModel.InventoryInboundOutboundDocument _inventoryInboundOutboundDocument)
    {
        DocuRef       docuRef;
        str           note = _inventoryInboundOutboundDocument.Note;
        RetailStaffId noteModifiedByStaffId = _inventoryInboundOutboundDocument.NoteModifiedByStaffId;

        Common document = this.getDocument(_inventoryInboundOutboundDocument);
        docuRef = DocuRef::findTableIdRecId(document.DataAreaId, document.TableId, document.RecId);
        if (!docuRef)
        {
            docuRef = DocumentManagement::attachNoteToCommon(document, DocuType::typeNote(), HeaderNoteAttachmentName, '');
        }
        this.updateNote(docuRef, note, noteModifiedByStaffId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachNoteToInventoryDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attach note to inventory document line as new document note attachment.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocumentLine">The inventory document line.</param>
    private void attachNoteToInventoryDocumentLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _inventoryInboundOutboundDocumentLine)
    {
        DocuRef       docuRef;
        str           note = _inventoryInboundOutboundDocumentLine.Note;
        RetailStaffId noteModifiedByStaffId = _inventoryInboundOutboundDocumentLine.NoteModifiedByStaffId;

        Common documentLine = this.getDocumentLine(_inventoryInboundOutboundDocumentLine);
        docuRef = DocuRef::findTableIdRecId(documentLine.DataAreaId, documentLine.TableId, documentLine.RecId);

        if (!docuRef)
        {
            docuRef = DocumentManagement::attachNoteToCommon(documentLine, DocuType::typeNote(), LineNoteAttachmentName, '');
        }
        this.updateNote(docuRef, note, noteModifiedByStaffId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update note on document reference.
    /// </summary>
    /// <param name = "_docuRef">The document reference.</param>
    /// <param name = "_note">The new note.</param>
    /// <param name = "_noteModifiedByStaffId">The staff id of note author.</param>
    private void updateNote(DocuRef _docuRef, str _note, RetailStaffId _noteModifiedByStaffId)
    {
        ttsbegin;

        _docuRef = DocuRef::findRecId(_docuRef.RecId, true);
        if (_docuRef.Notes != _note)
        {
            _docuRef.Notes = _note;
            _docuRef.Author = DirPersonUser::current().PersonParty;
            _docuRef.Party = HcmWorker::findByPersonnelNumber(_noteModifiedByStaffId).Person;
            _docuRef.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemIdByProductId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get item id by product record id.
    /// </summary>
    /// <param name = "_productRecId">The product record id.</param>
    /// <returns>
    /// The item id.
    /// </returns>
    internal static ItemId getItemIdByProductId(EcoResProductRecId _productRecId)
    {
        EcoResDistinctProduct product = EcoResDistinctProduct::find(_productRecId);

        ItemId itemId;
        InventDimCombination inventDimCombination;
        InventTable inventTable;

        if (!product.isDistinctProduct())
        {
            inventDimCombination = InventDimCombination::findByDistinctProductVariant(_productRecId);
            itemId = inventDimCombination.ItemId;
        }
        else
        {
            inventTable = InventTable::findByProduct(_productRecId);
            itemId = inventTable.ItemId;
        }

        return itemId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>