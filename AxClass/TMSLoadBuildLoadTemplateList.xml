<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildLoadTemplateList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A list of <c>WHSLoadTemplate</c> record IDs.
/// </summary>
[DataContractAttribute]
class TMSLoadBuildLoadTemplateList implements SysPackable
{
    List    templateList;
    str     templateListPack;
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        templateListPack
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an element to the end of the list.
    /// </summary>
    /// <param name="_loadTemplateId">
    /// The load template ID element to be added.
    /// </param>
    public void addEnd(WHSLoadTemplateId _loadTemplateId)
    {
        templateList.addEnd(_loadTemplateId);
    }
]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLoadTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds default record of the <c>WHSLoadTemplate</c> table assuming thats the first one on the list.
    /// </summary>
    /// <returns>
    ///     A record in the <c>WHSLoadTemplate</c> table; otherwise, an exception is thrown because if the list is valid it should have at least one record in it.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     At least one load template should be selected.
    /// </exception>
    public WHSLoadTemplate getDefaultLoadTemplate()
    {
        ListEnumerator listEnum = templateList.getEnumerator();

        if (!listEnum || !listEnum.moveNext())
        {
            throw error("@SYP4861031");
        }

        return WHSLoadTemplate::find(listEnum.current());
    }
]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the list enumerator.
    /// </summary>
    /// <returns>
    /// List enumerator.
    /// </returns>
    public ListEnumerator getEnumerator()
    {
        return templateList.getEnumerator();
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        templateList = new List(Types::String);
    }
]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        templateListPack = SysOperationHelper::base64Encode(templateList.pack());
        return [#CurrentVersion, #CurrentList];
    }
]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        templateList = List::create(SysOperationHelper::base64Decode(templateListPack));

        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the list of objects.
    /// </summary>
    /// <returns>
    ///     true if the list is valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (templateList.elements() < 1)
        {
            ret = checkFailed("@SYP4861031");
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSLoadBuildLoadTemplateList construct()
    {
        return new TMSLoadBuildLoadTemplateList();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>