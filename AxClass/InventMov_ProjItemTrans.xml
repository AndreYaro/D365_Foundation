<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_ProjItemTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventMovementFactoryAttribute(tableStr(ProjItemTrans))]
class   InventMov_ProjItemTrans extends InventMovement
{
    ProjItemTrans       projItemTrans;
    ProjTransItemTrans  projTransItemTrans;

    InventRefTransId    inventRefTransId;
    InventTransOriginId returnInventTransOrigin;

    InventQty           transqty;
    InventDimId         inventDimId;
    InventQty           remainPhysical;

    boolean             canCostValuebeChanged;
    CostAmount          costValueChanged;

    private boolean inventoryPhysicalPostingRequired = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInventoryPhysicalPostingRequired</Name>
				<Source><![CDATA[
    public boolean parmInventoryPhysicalPostingRequired(boolean _inventoryPhysicalPostingRequired = inventoryPhysicalPostingRequired)
    {
        inventoryPhysicalPostingRequired = _inventoryPhysicalPostingRequired;
        return inventoryPhysicalPostingRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            cacheAccountBalanceSheet = projTransItemTrans.accountBalanceSheetLedgerDimension();
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
       // Funding Source field is not used in Item transaction/
        if (! cacheAccountOperations)
        {
            cacheAccountOperations = projTransItemTrans.accountOperationsLedgerDimension(0);
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return projItemTrans.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
    public void addRemainPhysical(InventQty _inventQty)
    {
        remainPhysical += _inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustmentMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a movement is created as an adjustment to a previous transaction.
    /// </summary>
    /// <returns>
    ///    true if the movement is an adjustment to a previous transaction; otherwise, false.
    /// </returns>
    protected boolean adjustmentMovement()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCostValuebeChanged</Name>
				<Source><![CDATA[
    protected boolean canCostValuebeChanged()
    {
        return canCostValuebeChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotSubDelivery</Name>
				<Source><![CDATA[
    protected boolean checkNotSubDelivery(
        InventQty       _physicalNow,
        InventQty       _remainPhysicalNow,
        boolean         _isPhysicalUpdate
        , PdsCWInventQty  _pdsCWPhysicalNow
        , PdsCWInventQty  _pdsCWRemainPhysicalNow
        )
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValueChanged</Name>
				<Source><![CDATA[
    protected CostAmount costValueChanged(InventTrans _inventTrans)
    {
        return costValueChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendAc</Name>
				<Source><![CDATA[
    public CustVendAC custVendAc()
    {
        return projItemTrans.projTable().CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransFinancial</Name>
				<Source><![CDATA[
    public void initInventTransFinancial(
        InventTrans          _inventTrans,
        TransDate            _dateFinancial,
        InvoiceId            _invoiceId,
        CurrencyCode         _currencyCode
        )
    {
        super(_inventTrans, _dateFinancial, _invoiceId, _currencyCode);
        this.setProjAdjustRefId(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransPhysical</Name>
				<Source><![CDATA[
    public void initInventTransPhysical(
        InventTrans       _inventTrans,
        TransDate         _datePhysical,
        PackingSlipId     _packingSlipId)
    {
        super(_inventTrans, _datePhysical, _packingSlipId);
        this.setProjAdjustRefId(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId inventLocationId()
    {
        return InventDim::find(inventDimId).InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId itemId()
    {
        return projItemTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingPreferPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the physically updated transactions are preferred over expected when finding
    /// transactions for marking.
    /// </summary>
    /// <returns>
    /// Returns true if the marked transaction origin is not null otherwise false.
    /// </returns>
    public boolean markingPreferPhysical()
    {
        boolean ret;

        if (this.projId() && this.markingRefInventTransOrigin())
        {
            ret = true;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the marked transaction origin.
    /// </summary>
    /// <returns>
    ///    zero if whole movement is not marked; otherwise, the ID of the transaction origin.
    /// </returns>
    public InventTransOriginId markingRefInventTransOrigin()
    {
        return InventTransOrigin::findByInventTransId(inventRefTransId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    public boolean mustBeBookedPhysically()
    {
        boolean bookPhysically = false;

        if (this.parmInventoryPhysicalPostingRequired()
            && projItemTrans.TransactionOrigin == ProjOrigin::ItemRequirement)
        {    
            bookPhysically = true;
        }

        return bookPhysically;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysical</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountPhysical()
    {
        if (this.parmInventoryPhysicalPostingRequired()
            && ProjItemTrans.TransactionOrigin == ProjOrigin::ItemRequirement)
        {
            // Funding Source field is not used in Item transaction
            if (!cacheAccountPhysical)
            {
                // <GCN>
                if (InventPostingExtendParm_CN::checkExtendParmEnabled())
                {
                    cacheAccountPhysical = this.accountItemExtendParm_CN(InventAccountType::SalesPackingSlip);
                }
                else
                {
                    // </GCN>
                    cacheAccountPhysical = this.accountItem(InventAccountType::SalesPackingSlip);
                    // <GCN>
                }
                // </GCN>
            }
        }
        return cacheAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountPhysical</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount offsetAccountPhysical()
    {
        if (this.parmInventoryPhysicalPostingRequired()
            && projItemTrans.TransactionOrigin == ProjOrigin::ItemRequirement)
        {
            ProjItemTransCost projItemTransCost = ProjItemTransCost::find(projItemTrans.InventTransId, projItemTrans.ProjAdjustRefId, 1);

            cacheOffsetAccountPhysical = ProjPosting::getLedgerDimension(ProjAccountType::CostAccount,
                                            projItemTrans.ProjId,
                                            projItemTrans.CategoryId,
                                            projItemTransCost.FundingSource,
                                            false);
        }
        return cacheOffsetAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a posting account for the current sales order line.
    /// </summary>
    /// <param name="_inventAccountType">
    ///    The posting account type.
    /// </param>
    /// <returns>
    ///    The posting account number for the account type for the current sales order line.
    /// </returns>
    private LedgerDimensionDefaultAccount accountItem(InventAccountType _inventAccountType)
    {
        if (projItemTrans.ProjTransIdRef)
        {
            SalesLine salesOrderLine;
            select firstonly salesOrderLine where salesOrderLine.ProjTransId == projItemTrans.ProjTransIdRef;

            // <GEERU>
            if (this.parmCompanyCountryRegion().isCountryRegionRU())
            {
                return InventPosting::accountItemLedgerDimensionFromParameters(
                    InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(
                        salesOrderLine,
                        _inventAccountType,
                        this.itemGroupId(),
                        this.inventdim()));
            }
            // </GEERU>
            return InventPosting::accountItemLedgerDimensionFromParameters(
                InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(
                    salesOrderLine,
                    _inventAccountType,
                    this.itemGroupId()));
        }
        throw error ("@SYS22828", funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemExtendParm_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a posting account for the current sales order line with site.
    /// </summary>
    /// <param name="_inventAccountType">
    /// The posting account type.
    /// </param>
    /// <returns>
    /// The posting account number for the account type for the current sales order line.
    /// </returns>
    private LedgerDimensionDefaultAccount accountItemExtendParm_CN(InventAccountType _inventAccountType)
    {
        if (projItemTrans.ProjTransIdRef)
        {
            SalesLine salesOrderLine;
            select firstonly salesOrderLine where salesOrderLine.ProjTransId == projItemTrans.ProjTransIdRef;

            return InventPosting::accountItemExtendParmFromParameter_CN(
                InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(
                    salesOrderLine,
                    _inventAccountType,
                    this.inventTable().itemGroupId(),
                    null,
                    InventPostingExtendParm_CN::constructInventDim(this.inventdim()).parmInventSiteId()));
        }
        throw error ("@SYS22828", funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBePicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transactions that are related to this movement must be picked.
    /// </summary>
    /// <returns>
    ///    true if the transactions must be picked; otherwise, false.
    /// </returns>
    public boolean mustBePicked()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transactions that are related to this movement must be registered.
    /// </summary>
    /// <returns>
    ///    true if transactions must be registered; otherwise, false.
    /// </returns>
    public boolean mustBeRegistered()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckOverDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current <c>InventMovement</c> object requires checking for over delivery.
    /// </summary>
    /// <param name="_direction">
    /// The <c>InventDirection</c> of the update that is being made.
    /// </param>
    /// <returns>
    /// true if over delivery must be checked; otherwise, false.
    /// </returns>
    public NoYes mustCheckOverDelivery(InventDirection _direction)
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        ProjItemTrans       _projItemTrans,
        InventType          _inventType = new InventType(_projItemTrans))
    {
        projItemTrans       = _projItemTrans;
        projTransItemTrans  = new ProjTransItemTrans(projItemTrans);

        super(_projItemTrans, _inventType);

        this.parmInventDimId(_projItemTrans.InventDimId);
        this.parmTransQty(-_projItemTrans.Qty);
        this.parmProjAdjustRefId(_projItemTrans.ProjAdjustRefId);
        this.parmRemainPhysical(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!projItemTrans.RecId)
        {
            return null;
        }

        return InventMov_ProjItemTrans::newFromProjItemTrans(projItemTrans.orig());
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    public Percent overDeliveryPct()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanCostValuebeChanged</Name>
				<Source><![CDATA[
    protected boolean parmCanCostValuebeChanged(boolean _canCostValuebeChanged = canCostValuebeChanged)
    {
        canCostValuebeChanged = _canCostValuebeChanged;

        return canCostValuebeChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostValueChanged</Name>
				<Source><![CDATA[
    protected CostAmount parmCostValueChanged(CostAmount _costValueChanged = costValueChanged)
    {
        costValueChanged = _costValueChanged;

        return costValueChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    protected InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventRefTransId</Name>
				<Source><![CDATA[
    public InventRefTransId parmInventRefTransId(InventRefTransId _inventRefTransId = inventRefTransId)
    {
        inventRefTransId = _inventRefTransId;
        return inventRefTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjAdjustRefId</Name>
				<Source><![CDATA[
    protected ProjAdjustRefId parmProjAdjustRefId(ProjAdjustRefId _projAdjustRefId = projAdjustRefId)
    {
        projAdjustRefId = _projAdjustRefId;
        return projAdjustRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainPhysical</Name>
				<Source><![CDATA[
    protected InventQty parmRemainPhysical(InventQty _remainPhysical = remainPhysical)
    {
        remainPhysical = _remainPhysical;
        return remainPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnInventTransOrigin</Name>
				<Source><![CDATA[
    protected InventTransOriginId parmReturnInventTransOrigin(InventTransOriginId _returnInventTransOrigin = returnInventTransOrigin)
    {
        returnInventTransOrigin = _returnInventTransOrigin;
        return returnInventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransQty</Name>
				<Source><![CDATA[
    public InventQty parmTransQty(InventQty _transQty = transQty)
    {
        transQty = _transQty;
        return transQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerPostingType postingBalanceSheet()
    {
        return projTransItemTrans.postingBalanceSheet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        return LedgerPostingType::ProjCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysical</Name>
				<Source><![CDATA[
    public LedgerPostingType postingPhysical()
    {
        LedgerPostingType postPhysical = LedgerPostingType::None;

        if (this.parmInventoryPhysicalPostingRequired()
            && projItemTrans.TransactionOrigin == ProjOrigin::ItemRequirement)
        {
            postPhysical = LedgerPostingType::SalesPackingSlip;
        }

        return postPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOffsetPhysical</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOffsetPhysical()
    {
        LedgerPostingType postOffsetPhysical = LedgerPostingType::None;

        if (this.parmInventoryPhysicalPostingRequired()
            && projItemTrans.TransactionOrigin == ProjOrigin::ItemRequirement)
        {
            postOffsetPhysical = LedgerPostingType::ProjCost;
        }

        return postOffsetPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId projCategoryId()
    {
        return projItemTrans.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    public ProjId projId()
    {
        return projItemTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projLedgerOrigin</Name>
				<Source><![CDATA[
    public ProjLedgerOrigin projLedgerOrigin()
    {
        return ProjOrigin::Adjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projLinePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId projLinePropertyId()
    {
        return projItemTrans.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projSalesCurrencyId</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode projSalesCurrencyId()
    {
        return projItemTrans.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projSalesPrice</Name>
				<Source><![CDATA[
    public ProjSalesPriceCost projSalesPrice()
    {
        return projItemTrans.salesPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTaxGroupId</Name>
				<Source><![CDATA[
    public ProjTaxGroup projTaxGroupId()
    {
        return projItemTrans.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTaxItemGroupId</Name>
				<Source><![CDATA[
    public ProjTaxItemGroup projTaxItemGroupId()
    {
        return projItemTrans.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransactionOrigin</Name>
				<Source><![CDATA[
    public ProjTransactionOrigin projTransactionOrigin()
    {
        return projItemTrans.TransactionOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty remainPhysical()
    {
        return remainPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the original transactions.
    /// </summary>
    /// <returns>
    ///    The ID of the original transaction originator, if any; otherwise, zero.
    /// </returns>
    public InventTransOriginId returnInventTransOrigin()
    {
        return this.transQty() > 0 ? returnInventTransOrigin : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        projItemTrans.InventDimId = _dimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjAdjustRefId</Name>
				<Source><![CDATA[
    public void setProjAdjustRefId(InventTrans _inventTrans)
    {
        if (_inventTrans.ProjAdjustRefId)
        {
            projAdjustRefId = _inventTrans.ProjAdjustRefId;
            return;
        }

        if (!projAdjustRefId)
        {
            projAdjustRefId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        }

        _inventTrans.ProjAdjustRefId = projAdjustRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysical</Name>
				<Source><![CDATA[
    public void setRemainPhysical(InventQty  _inventQty)
    {
        remainPhysical = _inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty  _qtyInvent)
    {
        transQty    = _qtyInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subDeliveryPct</Name>
				<Source><![CDATA[
    protected Percent subDeliveryPct()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return projItemTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return projItemTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty  transQty()
    {
        return transQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol transUnitId()
    {
        return projItemTrans.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useEnteredPriceAsCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the Item transaction is from project.
    /// </summary>
    /// <returns>
    ///    Return true if the Item transaction is from project.
    ///   Otherwise call base class method.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public boolean useEnteredPriceAsCost()
    {
        boolean ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProjItemTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMov_ProjItemTrans</c> class based on the specified record.
    /// </summary>
    /// <param name="_projItemTrans">
    ///    The <c>ProjItemTrans</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_ProjItemTrans</c> class.
    /// </returns>
    public static InventMov_ProjItemTrans newFromProjItemTrans(ProjItemTrans   _projItemTrans)
    {
        return new InventMov_ProjItemTrans(_projItemTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjItemTransNeg</Name>
				<Source><![CDATA[
    public static InventMovement newProjItemTransNeg(
        ProjItemTrans           _projItemTrans,
        InventTrans             _inventTrans,
        InventTransId           _inventTransIdReturn
        )
    {
        InventMov_ProjItemTrans movement_ProjItemTrans = InventMov_ProjItemTrans::newFromProjItemTrans(_projItemTrans);
        movement_ProjItemTrans.parmTransQty(-_inventTrans.Qty);

        movement_ProjItemTrans.parmInventRefTransId(_inventTrans.inventTransOrigin().InventTransId);

        movement_ProjItemTrans.parmInventDimId(_inventTrans.InventDimId);
        movement_ProjItemTrans.parmRemainPhysical(0);
        if (_inventTransIdReturn)
        {
            movement_ProjItemTrans.parmReturnInventTransOrigin(InventTransOrigin::findByInventTransId(_inventTransIdReturn).RecId);
        }

        return movement_ProjItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjItemTransNew</Name>
				<Source><![CDATA[
    public static InventMovement newProjItemTransNew(
        ProjItemTrans           _projItemTrans,
        InventTrans             _inventTrans,
        InventQty               _inventQty,
        CostAmount              _costAmount)
    {
        InventMov_ProjItemTrans movement_ProjItemTrans = InventMov_ProjItemTrans::newFromProjItemTrans(_projItemTrans);
        movement_ProjItemTrans.parmTransQty(_inventQty);
        movement_ProjItemTrans.parmInventDimId(_inventTrans.InventDimId);
        movement_ProjItemTrans.parmRemainPhysical(0);

        if ( ! movement_ProjItemTrans.inventModelGroup().StandardCost && (
            movement_ProjItemTrans.transType() == InventTransType::BOMMain && movement_ProjItemTrans.transSign() > 0 ||
            movement_ProjItemTrans.inventTable().inventItemType().isServiceItem()))
        {
            movement_ProjItemTrans.parmCanCostValuebeChanged(true);
            movement_ProjItemTrans.parmCostValueChanged(_costAmount);
        }

        return movement_ProjItemTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>