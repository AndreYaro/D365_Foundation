<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocQRCode_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationSuite.QRCode;
using QR = QRCoder;
/// <summary>
/// The class <c>EFDocQRCode_BR</c> allows to generate QR code.
/// </summary>
public class EFDocQRCode_BR
{
    private QRCodeErrorCorrectionLevel errorCorrectionLevel = QRCodeErrorCorrectionLevel::Low;
    private System.Drawing.Bitmap icon;
    private real iconRatio = 0.15;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateQRCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a QR code for the <paramref name="qrCodeString"/>.
    /// </summary>
    /// <param name = "qrCodeString">The string that need to be encoded to QR code.</param>
    /// <returns>A container representing a QR code.</returns>
    public container generateQRCode(str qrCodeString)
    {
        try
        {
            using (System.Drawing.Bitmap bm = this.generateQRCodeBitmap(qrCodeString))
            using (System.IO.MemoryStream stream = new System.IO.MemoryStream())
            {
                bm.Save(stream, System.Drawing.Imaging.ImageFormat::Png);
                return Binary::constructFromMemoryStream(stream).getContainer();
            }
        }
        catch (Exception::CLRError)
        {
            throw error(CLRInterop::getLastException().ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pixelsPerSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the section size in pixels.
    /// </summary>
    /// <param name = "_version">QR-code version.</param>
    /// <returns>Section size in pixels.</returns>
    /// <remarks>
    /// For low versions of QR-code (when the input string is short) the image is generated too small.
    /// This leads to problems when using older scanners.
    /// </remarks>
    private int pixelsPerSection(int _currentVersion)
    {
        const int LowVersion = 10;
        int cellSize = 3;

        if (_currentVersion < LowVersion)
        {
            cellSize += (LowVersion - _currentVersion) div 2;
        }

        return cellSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadEncoderType</Name>
				<Source><![CDATA[
    private System.Type loadEncoderType()
    {
        System.Type                     objectType;
        System.Reflection.Assembly      assembly;
        #define.qrCodeClassQualifiedName('Microsoft.Dynamics.ApplicationSuite.QRCode.Encoder')

        assembly    = this.loadQRCodeAssembly();
        objectType  = assembly.GetType(#qrCodeClassQualifiedName);

        if (!objectType)
        {
            throw error(strfmt("@SYS4081901", #qrCodeClassQualifiedName));
        }

        return objectType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadQRCodeAssembly</Name>
				<Source><![CDATA[
    private System.Reflection.Assembly loadQRCodeAssembly()
    {
        System.Reflection.Assembly      assembly = null;
        #define.QRCodeAssembly('Microsoft.Dynamics.ApplicationSuite.QRCode')

        assembly = System.Reflection.Assembly::Load(#QRCodeAssembly);

        if (!assembly)
        {
            throw error(strfmt("@SYS4083127",#QRCodeAssembly));
        }

        return assembly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorCorrectionLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the error correction level to be used in QR code generation.
    /// </summary>
    /// <param name = "_errorCorrectionLevel">The error correction level.</param>
    /// <returns></returns>
    public QRCodeErrorCorrectionLevel parmErrorCorrectionLevel(QRCodeErrorCorrectionLevel _errorCorrectionLevel = errorCorrectionLevel)
    {
        errorCorrectionLevel = _errorCorrectionLevel;
        return errorCorrectionLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the icon to be printed in the middle of the QR Code.
    /// </summary>
    /// <param name = "_icon">The object of the <c>System.Drawing.Bitmap</c></param>
    /// <returns>The icon to be printed in the middle of the QR Code.</returns>
    public System.Drawing.Bitmap parmIcon(System.Drawing.Bitmap _icon = icon)
    {
        icon = _icon;
        return icon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIconRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the ratio of the icon against the whole QR code to be printed in the middle of the QR Code.
    /// </summary>
    /// <param name = "_iconRatio">The ratio of icon.</param>
    /// <returns>The ratio of the icon against the whole QR code to be printed in the middle of the QR Code.</returns>
    public real parmIconRatio(real _iconRatio = iconRatio)
    {
        iconRatio = _iconRatio;
        return iconRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateQRCodeBitmap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the QR code bitmap for the <paramref name="_qrCodeString"/>.
    /// </summary>
    /// <param name = "_qrCodeString">The input string to be encoded.</param>
    /// <returns>The object of the class <c>System.Drawing.Bitmap</c>.</returns>
    /// <exception cref="Exception::ClrError">QR code cannot be created.</exception>
    /// <exception cref="Exception::Error">Unknown error correction level.</exception>
    private System.Drawing.Bitmap generateQRCodeBitmap(str _qrCodeString)
    {
        System.Drawing.Bitmap bm;

        try
        {
            if (FeatureStateProvider::IsFeatureEnabled(QRCoderLibraryFeature::instance()))
            {
                bm = this.generateQRCodeBitmapQRCoder(_qrCodeString);
            }
            else
            {
                bm = this.generateQRCodeBitmapEncoder(_qrCodeString);
            }
        }
        catch (Exception::CLRError)
        {
            throw error(AifUtil::getClrErrorMessage());
        }

        return bm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needDrawIcon</Name>
				<Source><![CDATA[
    private boolean needDrawIcon()
    {
        return (icon != null) && (iconRatio > 0) && (iconRatio < 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateQRCodeBitmapQRCoder</Name>
				<Source><![CDATA[
    private System.Drawing.Bitmap generateQRCodeBitmapQRCoder(str _qrCodeString)
    {
        QR.QRCodeGenerator.ECCLevel eccLevel;

        switch (errorCorrectionLevel)
        {
            case QRCodeErrorCorrectionLevel::Low:
                eccLevel = QR.QRCodeGenerator.ECCLevel::L;
                break;
            case QRCodeErrorCorrectionLevel::Medium:
                eccLevel = QR.QRCodeGenerator.ECCLevel::M;
                break;
            case QRCodeErrorCorrectionLevel::Quartile:
                eccLevel = QR.QRCodeGenerator.ECCLevel::Q;
                break;
            case QRCodeErrorCorrectionLevel::High:
                eccLevel = QR.QRCodeGenerator.ECCLevel::H;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        System.Drawing.Bitmap bm;

        using (QR.QRCodeGenerator qrGenerator = new QR.QRCodeGenerator())
        using (QR.QRCodeData qrCodeData = qrGenerator.CreateQrCode(_qrCodeString, eccLevel))
        using (QR.QRCode qrCode = new QR.QRCode(qrCodeData))
        {
            if (this.needDrawIcon())
            {
                bm = qrCode.GetGraphic(
                            this.pixelsPerSection(qrCodeData.Version),
                            System.Drawing.Color::Black,
                            System.Drawing.Color::White,
                            icon,
                            real2int(iconRatio * 100),
                            1);
            }
            else
            {
                bm = qrCode.GetGraphic(this.pixelsPerSection(qrCodeData.Version));
            }
        }

        return bm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateQRCodeBitmapEncoder</Name>
				<Source><![CDATA[
    private System.Drawing.Bitmap generateQRCodeBitmapEncoder(str _qrCodeString)
    {
        ErrorCorrectionLevel errorCorrectionLevelEncoder;
        switch (errorCorrectionLevel)
        {
            case QRCodeErrorCorrectionLevel::Low:
                errorCorrectionLevelEncoder = ErrorCorrectionLevel::Low;
                break;
            case QRCodeErrorCorrectionLevel::Medium:
                errorCorrectionLevelEncoder = ErrorCorrectionLevel::Medium;
                break;
            case QRCodeErrorCorrectionLevel::Quartile:
                errorCorrectionLevelEncoder = ErrorCorrectionLevel::Quartile;
                break;
            case QRCodeErrorCorrectionLevel::High:
                errorCorrectionLevelEncoder = ErrorCorrectionLevel::High;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        Encoder qrCodeEncoder = new Encoder();
        qrCodeEncoder.ErrorCorrectionLevel = errorCorrectionLevelEncoder;

        System.Drawing.Bitmap bm = qrCodeEncoder.Encode(_qrCodeString);

        if (this.needDrawIcon())
        {
            int sizeX = any2Int(round(bm.Width * iconRatio, 1));
            int sizeY = any2Int(round(bm.Height * iconRatio, 1));
            int offsetX = any2Int(round((bm.Width - sizeX) / 2, 1));
            int offsetY = any2Int(round((bm.Height - sizeY) / 2, 1));

            using (System.Drawing.Graphics graph = System.Drawing.Graphics::FromImage(bm))
            {
                // Overlay Icon on QR Code in the middle
                graph.DrawImage(icon, offsetX, offsetY, sizeX, sizeY);
            }
        }

        return bm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>