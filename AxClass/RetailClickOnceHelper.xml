<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailClickOnceHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.Environment;

/// <summary>
/// Click once helper class.
/// </summary>
class RetailClickOnceHelper
{
    private const System.String RetailDesignerClickOnceBlobName = "Microsoft.Dynamics.Retail.RetailDesignerHost.application";
    private const str GeographyNameSetting = 'InfrastructureConfig.GeographyName';
    private const str BuildBranchSetting = 'InfrastructureConfig.BuildBranch';
    private static str hostEndpoint = '';
    private static str designerAppId = '';
    private static str serviceAuthorityURI = '';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetClickOnceURI</Name>
				<Source><![CDATA[
    private static str GetClickOnceURI(str designerType, str sourceId, str sizeId = '')
    {
        str storageEndpointUrl;
        str aosWebRoleUrl;
        str authUrl;
        str url;
        str redirectUrl = 'https://login.microsoftonline.com/common/oauth2/nativeclient'; // Microsoft Entra ID redirect/reply url.
        Session session = new Session();
        str culture = session.interfaceLanguage();
        boolean backwardCompatibility = isConfigurationkeyEnabled(configurationKeyNum(RetailCDXBackwardCompatibility));

        // Get the storage endpoint URI
        storageEndpointUrl = RetailClickOnceHelper::GetClickOnceBlobStorageEndpoint();

        // Get the AX web role URL
        aosWebRoleUrl = RetailClickOnceHelper::GetHostedServiceEndPoint();

        // Get the Authorization URL
        authUrl = RetailClickOnceHelper::GetServiceAuthorityURI();

        // Appears AX provides the escaped data string when call the browser navigate function...
        // Construct the rest of the URI
        url = System.IO.Path::Combine(aosWebRoleUrl, storageEndpointUrl) +
            '?dt=' + designerType +
            '&sid=' + sourceId +
            '&sizeid=' + sizeId +
            '&aos=' + aosWebRoleUrl +
            '&auth=' + authUrl +    // AuthorityURI - Azure authentication url.
            '&cid=' + RetailClickOnceHelper::GetDesignerAppId() +    // ClientId - Microsoft Entra ID client id
            '&ru=' + redirectUrl +    // RedirectUrl - Azure authentication redirect url
            '&daid=' + curext() +    // DataAreaId
            '&pid=' + int642str(getcurrentpartitionrecid()) +    // PartitionId
            '&bc=' + (backwardCompatibility ? 'TRUE' : 'FALSE') +
            '&cn=' + culture;   // CultureName

        return url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetButtonGridDesignerClickOnceURI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the URL for the click-once to open the specified button grid designer.
    /// </summary>
    /// <param name = "buttonGridId">The data source ID.</param>
    /// <returns>Value for the click-once URL.</returns>
    public static str GetButtonGridDesignerClickOnceURI(str buttonGridId)
    {
        return RetailClickOnceHelper::GetClickOnceURI('ButtonGrid', buttonGridId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetReceiptDesignerClickOnceURI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the URL for the click-once to open the specified receipt designer.
    /// </summary>
    /// <param name = "receiptId">The data source ID.</param>
    /// <returns>Value for the click-once URL.</returns>
    public static str GetReceiptDesignerClickOnceURI(str receiptId)
    {
        return RetailClickOnceHelper::GetClickOnceURI('Receipt', receiptId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetTillLayoutDesignerClickOnceURI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the URL for the click-once to open the specified till-layout designer.
    /// </summary>
    /// <param name = "layoutId">The data source ID.</param>
    /// <param name = "sizeId">The layout size id.</param>
    /// <returns>Value for the click-once URL.</returns>
    public static str GetTillLayoutDesignerClickOnceURI(str layoutId, str sizeId = '')
    {
        return RetailClickOnceHelper::GetClickOnceURI('TillLayout', layoutId, sizeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetTillLayoutDesignerModernClickOnceURI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the URL for the click-once to open the specified till-layout designer [Modern].
    /// </summary>
    /// <param name = "layoutId">The data source ID.</param>
    /// <returns>Value for the click-once URL.</returns>
    [SysObsolete('This method is obsolete.', true, 31\01\2016)]
    public static str GetTillLayoutDesignerModernClickOnceURI(str layoutId)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetTillLayoutDesignerModernClickOnceURI_V2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the URL for the click-once to open the specified till-layout designer [Modern].
    /// </summary>
    /// <param name = "layoutId">The data source ID.</param>
    /// <param name = "sizeId">The layout size id.</param>
    /// <returns>Value for the click-once URL.</returns>
    public static str GetTillLayoutDesignerModernClickOnceURI_V2(str layoutId, str szieId)
    {
        return RetailClickOnceHelper::GetClickOnceURI('TillLayoutModern', layoutId, szieId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsLegacyDesigner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies device type designer.
    /// </summary>
    /// <param name = "retailScreenLayoutLocal">The <c>RetailTillLayout</c> record buffer.</param>
    /// <returns>true if designer form is Till layout designer; else, false.</returns>
    [SysObsolete('This method is obsolete - use IsLegacyDesignerLayoutType.', true, 31\05\2017)]
    public static boolean IsLegacyDesigner(RetailTillLayout retailScreenLayoutLocal)
    {
        RetailDeviceTypes retailDeviceTypesLocal;

        select firstOnly RecId, DesignerForm from retailDeviceTypesLocal
                 where retailDeviceTypesLocal.RecId == retailScreenLayoutLocal.DeviceType;

        return (retailDeviceTypesLocal.DesignerForm == RetailDesignerFormEnum::RetailTillLayoutDesigner);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TargetedDesignerForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the targeted designer form to be used for the given <c>RetailTillLayoutSize</c>.
    /// </summary>
    /// <param name = "retailTillLayoutSize">The <c>RetailTillLayoutSize</c> record buffer.</param>
    /// <returns>The <c>RetailDesignerFormEnum</c> to be used for this given <c>RetailTillLayoutSize</c>.</returns>
    public static RetailDesignerFormEnum TargetedDesignerForm(RetailTillLayoutSize retailTillLayoutSize)
    {
        RetailDesignerFormEnum result;
        
        result = 
            (retailTillLayoutSize.LayoutType == RetailLayoutType::EPOS) ? RetailDesignerFormEnum::RetailTillLayoutDesigner : RetailDesignerFormEnum::RetailTillLayoutDesignerModern;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetHostedServiceEndPoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the AOS web role endpoint url for the CSU
    /// </summary>
    /// <returns>AOS web role URL for the CSU</returns>
    public static str GetHostedServiceEndPoint()
    {
        if (hostEndpoint == '')
        {
            IApplicationEnvironment environment = EnvironmentFactory::GetApplicationEnvironment();
            var infrastructureEnv = environment.Infrastructure;
            var hostUrl = infrastructureEnv.HostUrl;

            // Click-once aosWebUrl parameter expects a trailing forward slash.
            if (!hostUrl.EndsWith(@"/"))
            {
                hostUrl += "/";
            }
            hostEndpoint = hostUrl;
        }
        return hostEndpoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDesignerAppId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Desginer FPA identifier.
    /// </summary>
    /// <returns>The app identifier.</returns>
    public static str GetDesignerAppId()
    {
        if (designerAppId == '')
        {
            str defaultDesignerAppId = 'd6b5a0bd-bf3f-4a8c-b370-619fb3d0e1cc'; // Microsoft Entra First Party Application ID.

            IApplicationEnvironment environment = EnvironmentFactory::GetApplicationEnvironment();
            var configuredDesignerAppId = environment.Commerce.DesignerAppId;

            designerAppId = configuredDesignerAppId == '' ? defaultDesignerAppId : configuredDesignerAppId;
        }

        return designerAppId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetClickOnceBlobStorageEndpoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the RetailDesignerHost clickone blob endpoint url
    /// </summary>
    /// <returns></returns>
    public static str GetClickOnceBlobStorageEndpoint()
    {
        // Eventually the code will try to connect to a URL such as the following:
        // https://usnconeboxax1aos.cloud.onebox.dynamics.com/apps/RetailDesignerHost/Microsoft.Dynamics.Retail.RetailDesignerHost.application?designer=ButtonGrid&buttonGridId=20&dataAreaId=DAT&partitionId=5637144576&backwardCompatibility=FALSE&showColorOption=FALSE&cultureName=en-us
        // When tesing locally, one can use something like this:
        // 'http://localhost/RetailDesignerHost/Microsoft.Dynamics.Retail.RetailDesignerHost.application';
        // This method returns everyting from the appRoot.  The infrastructureEnv.HostName is added elsewhere.

        System.String clickOnceStorageEndoint;
        var environment = EnvironmentFactory::GetApplicationEnvironment();
        var infrastructureEnv = environment.Infrastructure;
        var appRoot = infrastructureEnv.ClickonceAppsDirectory;

        clickOnceStorageEndoint  =
            strFmt('%1/RetailDesignerHost/Microsoft.Dynamics.Retail.RetailDesignerHost.application',
                appRoot);

        return clickOnceStorageEndoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetServiceAuthorityURI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the OAuth service authority URI.
    /// </summary>
    /// <returns>OAuth service authority URI.</returns>
    private static str GetServiceAuthorityURI()
    {
        if (serviceAuthorityURI == '')
        {
            IApplicationEnvironment environment = EnvironmentFactory::GetApplicationEnvironment();
            var addEnvironment = environment.Aad;

            var aadInstance = addEnvironment.AADLoginWsfedEndpointFormat;
            aadInstance = aadInstance.Substring(0, aadInstance.IndexOf("{0}"));
            var aadTenant = addEnvironment.AADTenantId;

            serviceAuthorityURI = aadInstance + aadTenant;
        }

        return serviceAuthorityURI;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>