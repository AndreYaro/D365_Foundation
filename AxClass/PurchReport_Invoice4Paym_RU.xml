<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReport_Invoice4Paym_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReport_Invoice4Paym_RU extends SalesPurchReport_Invoice4Paym_RU implements BatchRetryable
{
    Map vatCodeCache;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales getModule()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    protected tableId getTableId()
    {
        return tablenum(VendInvoice4PaymJour_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineCategoryWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes gross weight.
    /// </summary>
    /// <returns><c>ItemGrossWeight</c> object.</returns>
    protected ItemGrossWeight initLineCategoryWeight()
    {
        ItemGrossWeight ret;

        if (dynamicData.Category)
        {
            ret = PurchLineForeignTradeCategory::find(invoiceTrans.InventTransId, invoiceTrans.dataAreaId).UnitWeight;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupIncludedInLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets included markup.
    /// </summary>
    /// <returns>Item, VAT, Excize.</returns>
    protected container markupIncludedInLine()
    {
        TaxCode tmpCode = this.vatCode(invoiceTrans.TaxGroup_RU, invoiceTrans.TaxItemGroup_RU);

        Amount  item, vat, excise;

        while select ItemPosted_RU,
                     TaxAmountVAT_RU,
                     TaxAmountExcise_RU,
                     TaxAmountVATMST_RU,
                     TaxAmountExciseMST_RU,
                     CalculatedAmountMST_W,
                     TaxGroup,
                     TaxItemGroup
        from markupTrans
        where markupTrans.TransTableId == invoiceTrans.TableId &&
              markupTrans.TransRecId   == invoiceTrans.RecId   &&
              markupTrans.CustVendPosted_RU                    &&
              markupTrans.ItemPosted_RU
        {
            if (this.vatCode(markupTrans.TaxGroup, markupTrans.TaxItemGroup) == tmpCode)
            {
                if (printInMST)
                {
                    item   += markupTrans.ItemPosted_RU ? markupTrans.CalculatedAmountMST_W : 0;
                    vat    += markupTrans.TaxAmountVATMST_RU;
                    excise += markupTrans.TaxAmountExciseMST_RU;
                }
                else
                {
                    item   += markupTrans.ItemPosted_RU;
                    vat    += markupTrans.TaxAmountVAT_RU;
                    excise += markupTrans.TaxAmountExcise_RU;
                }
            }
        }

        return [ item,
                 vat,
                 excise ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupInLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares markups.
    /// </summary>
    protected void markupInLine()
    {
        TaxCode tmpCode = this.vatCode(invoiceTrans.TaxGroup_RU, invoiceTrans.TaxItemGroup_RU);

        while select markupTrans
            where markupTrans.TransTableId  == invoiceTrans.TableId &&
                  markupTrans.TransRecId    == invoiceTrans.RecId   &&
                  markupTrans.CustVendPosted_RU
        {
            if (! markupTrans.ItemPosted_RU ||
                this.vatCode(markupTrans.TaxGroup, markupTrans.TaxItemGroup) != tmpCode)
            {
                this.prepareMarkupLine(markupTrans);
                this.writeDynamicLine();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        vatCodeCache = new Map(Types::Container, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets report type.
    /// </summary>
    /// <returns><c>OffReportType_RU</c> object.</returns>
    protected OffReportType_RU offReportType()
    {
        return OffReportType_RU::PurchInvoice4Paym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets description.
    /// </summary>
    /// <returns><c>Description</c> object.</returns>
    protected Description orderDescription()
    {
        return this.lookupLabel(literalstr("@SYS15812"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportHeader</Name>
				<Source><![CDATA[
    protected void prepareReportHeader()
    {
        SalesPurchReportCounteragentData_RU counteragentData;
        VendInvoiceJour                     vendInvoiceJour;

        super();

        if (costAllocationHistory)
        {
            counteragentData        = this.initContragentData(vendor, vendorBankAccount, invoiceJour.OrderAccount);
            header.CustName         = counteragentData.parmName();
            header.CustBankAddress  = counteragentData.fullAddress(true) + ', ' + counteragentData.fullBankAccountName();
            header.CustINN          = counteragentData.parmINN();
            header.CustKPP          = counteragentData.parmKPP();

            vendInvoiceJour         = VendInvoiceJour::findRecId(costAllocationHistory.AllocatedInvoiceJourRecId);

            counteragentData        = this.initCustVendData(VendTable::find(vendInvoiceJour.InvoiceAccount),
                                                                        null,
                                                                        vendInvoiceJour.InvoiceAccount);
            header.VendName         = counteragentData.parmName();
            header.VendBankAddress  = counteragentData.fullAddress(true, true);
            header.VendINN          = counteragentData.parmINN();
            header.VendKPP          = counteragentData.parmKPP();
        }
        else
        {
            counteragentData        = this.initContragentData(vendor, vendorBankAccount, invoiceJour.OrderAccount);
            header.VendName         = counteragentData.parmName();
            header.VendBankAddress  = counteragentData.fullAddress(true, true) + ', ' + counteragentData.fullBankAccountName();
            header.VendINN          = counteragentData.parmINN();
            header.VendKPP          = counteragentData.parmKPP();

            counteragentData        = this.initCompanyData();
            header.CustINN          = counteragentData.parmINN();
            header.CustKPP          = counteragentData.parmKPP();
            header.CustBankAddress  = strReplace(header.CustBankAddress, '\n', '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    protected void setParameters(PrintCopyOriginal   _printCopyOriginal = PrintCopyOriginal::Copy,
                                 CustVendInvoiceJour _invoiceJour       = null,
                                 RecordSortedList    _journalList       = null)
    {
        CustVendInvoiceJour invoiceJourTmp;
        if (_invoiceJour)
        {
            invoiceJourTmp = _invoiceJour;
        }
        else
        {
            invoiceJourTmp = new DictTable(tablenum(VendInvoice4PaymJour_RU)).makeRecord();
        }
        super(_printCopyOriginal,  invoiceJourTmp, _journalList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets table Id.
    /// </summary>
    /// <returns><c>tableId</c> object.</returns>
    protected tableId transTableId()
    {
        return tablenum(VendInvoice4PaymTrans_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatCode</Name>
				<Source><![CDATA[
    private TaxCode vatCode(TaxGroup     _taxGroup,
                            TaxItemGroup _taxItemGroup)
    {
        TaxCode   ret;
        container key = [ _taxGroup, _taxItemGroup ];

        if (vatCodeCache.exists(key))
        {
            ret = vatCodeCache.lookup(key);
        }
        else
        {
            ret = TaxTable::vatCode_RU(_taxGroup, _taxItemGroup);

            vatCodeCache.insert(key, ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PurchReport_Invoice4Paym_RU launcher = new PurchReport_Invoice4Paym_RU();

        if (_args)
        {
            launcher.setParameters(_args.parmEnum(), _args.record(), _args.object());
            launcher.setCaller(_args.caller());
        }

        if (launcher.prompt())
        {
            launcher.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>