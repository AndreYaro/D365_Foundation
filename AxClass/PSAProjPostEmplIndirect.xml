<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PsaProjPostEmplIndirect</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PsaProjPostEmplIndirect extends ProjPost
{
    ProjJournalTrans m_tProjJournalTrans;
    RefRecId intercompanyDueToCompany;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>indirectCreditAccountSalesAccrued</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount indirectCreditAccountSalesAccrued(ProjId _sProjId, ProjCategoryId _sCategoryId, TaxGroup _taxGroup = '')
    {
        return ProjPosting::getLedgerDimension(ProjAccountType::SalesOffsetAccount, _sProjId, _sCategoryId, any2Int64(0), false, true, _taxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectDebitAccountSalesAccrued</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount indirectDebitAccountSalesAccrued(ProjId _sProjId, ProjCategoryId _sCategoryId, TaxGroup _taxGroup = '')
    {
        return ProjPosting::getLedgerDimension(ProjAccountType::SalesValue, _sProjId, _sCategoryId, any2Int64(0), false, true, _taxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerIndirectAmount</Name>
				<Source><![CDATA[
    public AmountCur ledgerIndirectAmount(PSAIndirectComponentTrans   tProjindirectTrans)
    {
        Amount  indirectAmt;

        indirectAmt = CurrencyExchangeHelper::amount(tProjindirectTrans.Amount, this.currencyIdSales());

        if (this.parmIsCreditNote())
        {
            indirectAmt = -indirectAmt;
        }

        return this.parmUseTransCurrReverseAccrued() ? -indirectAmt : indirectAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        switch (_buffer.TableId)
        {
            case(tableNum(ProjJournalTrans)):
                m_tProjJournalTrans = _buffer;
                projTrans = ProjTrans::newProjJournalTrans(_buffer);
                break;

            case(tableNum(ProjEmplTrans)):
                projTrans = new ProjTransEmplTrans(_buffer);
                break;

            case(tableNum(ProjProposalEmpl)):
                projTrans = ProjTrans::newProjProposalEmpl(_buffer);
                break;
        }

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompanyDueToCompany</Name>
				<Source><![CDATA[
    public RefRecId parmIntercompanyDueToCompany(RefRecId _dueToCompany = intercompanyDueToCompany)
    {
        intercompanyDueToCompany = _dueToCompany;

        return intercompanyDueToCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTurnoverAccrued</Name>
				<Source><![CDATA[
    protected void postTurnoverAccrued()
    {
        LedgerVoucherTransObject oLedgerTransObject;
        ProjTrans oProjTransIndirect;
        ProjCategoryId sCategoryId;
        LedgerDimensionDefaultAccount defaultLedgerDimension;
        LedgerDimensionAccount mergedLedgerDimension;
        AmountCur amountCur;
        ProjLedger tmpProjLedger;

        LedgerVoucherObject ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());
        exchangeRateHelper.parmExchangeRate1(this.exchRateSales());
        exchangeRateHelper.parmExchangeRate2(this.exchRateSecondarySales());

        PSAIndirectComponentTrans tProjindirectTrans;

        while select tProjindirectTrans
            where tProjindirectTrans.TransId == projTrans.transId()
                && tProjindirectTrans.IndirectComponentType == PSAIndirectComponentType::Revenue
        {
            oProjTransIndirect = ProjTrans::psaNewProjEmplIndirecTrans(tProjindirectTrans);
            sCategoryId = PSAIndirectComponent::find(tProjindirectTrans.IndirectComponentId).ComponentCategory;
            LedgerDefaultDimensionValueSet projDefaultDims = ProjTable::find(projTrans.projId()).DefaultDimension;

            if (this.checkEnterAccruedDebit())
            {
                amountCur = -this.ledgerIndirectAmount(tProjindirectTrans);

                tmpProjLedger = ProjLedger::newProjectSales(oProjTransIndirect,
                                        projTrans.transId(),
                                        this.parmTransactionOrigin(),
                                        this.parmLedgerOrigin(),
                                        this.parmElimination(),
                                        tProjindirectTrans.ProjFundingSource);

                // Get the default account
                defaultLedgerDimension = this.parmLedgerDimension(this.indirectDebitAccountSalesAccrued(projTrans.projId(), sCategoryId, projTrans.taxGroup()));
                // need to merge the default account with the default dimensions
                if (ProjPostEmplIndirectWipDimensionFlight::instance().isEnabled())
                {
                    // force this to use Project Dimensions rather than the employee dimensions for Project - Accrued Revenue
                    mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, projTrans.defaultDimension(), projDefaultDims);
                }
                else
                {
                    mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
                }

                oLedgerTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                            ledgerVoucherObject,
                            this.postingTypeTurnoverAccrued(),
                            mergedLedgerDimension,
                            this.currencyIdSales(),
                            amountCur,
                            exchangeRateHelper);

                oLedgerTransObject.parmQuantity(oProjTransIndirect.qty());
                oLedgerTransObject.parmProjLedger(tmpProjLedger);
                oLedgerTransObject.parmTransTxt(oProjTransIndirect.txt());
                ledgerVoucher.addTrans(oLedgerTransObject);
            }

            if (this.checkEnterAccruedCredit())
            {
                amountCur = this.ledgerIndirectAmount(tProjindirectTrans);

                tmpProjLedger = ProjLedger::newProjectSales(oProjTransIndirect,
                                        projTrans.transId(),
                                        this.parmTransactionOrigin(),
                                        this.parmLedgerOrigin(),
                                        this.parmElimination(),
                                        tProjindirectTrans.ProjFundingSource);

                // Get the default account
                defaultLedgerDimension = this.parmLedgerDimension(this.indirectCreditAccountSalesAccrued(projTrans.projId(), sCategoryId, projTrans.taxGroup()));
                // need to merge the default account with the default dimensions
                if (ProjPostEmplIndirectWipDimensionFlight::instance().isEnabled())
                {
                    // force this to use Project Dimensions rather than the employee dimensions for Project - WIP - Sales value
                    mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, projTrans.defaultDimension(), projDefaultDims);
                }
                else
                {
                    mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
                }

                oLedgerTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                            ledgerVoucherObject,
                            this.postingTypeOffsetTurnoverAccrued(),
                            mergedLedgerDimension,
                            this.currencyIdSales(),
                            amountCur,
                            exchangeRateHelper);

                oLedgerTransObject.parmQuantity(oProjTransIndirect.qty());
                oLedgerTransObject.parmProjLedger(tmpProjLedger);
                oLedgerTransObject.parmTransTxt(oProjTransIndirect.txt());
                ledgerVoucher.addTrans(oLedgerTransObject);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>