<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandCreateKanbans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanCommandCreateKanbans</c> class encapsulates the business logic around the creation of kanbans for a specified rule.
/// </summary>
class LeanCommandCreateKanbans extends LeanCommandBase
{
    KanbanRule                      kanbanRule;
    List                            kanbanQuantities;

    int                             numberOfKanbans;
    boolean                         printKanbans;
    boolean                         createManualKanbans;
    KanbanExpress                   priority;

    List                            listCreatedKanbans;

    ItemId                          itemId;
    InventDimId                     inventDimId;
    BOMId                           bomId;

    KanbanDueDateTime               kanbanDueDateTime;

    KanbanSourceRequirementParm     kanbanSourceRequirementParm;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canTriggerRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if kanbans can be created based on the kanban rule.
    /// </summary>
    /// <returns>
    /// true if the kanbans can be created; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canTriggerRule()
    {
        return kanbanRule.status().canTrigger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the logic to create kanban records.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createKanbans()
    {
        ItemId          kanbanItemId      = itemId;
        InventDimId     kanbanInventDimId = inventDimId;
        BOMId           kanbanBomId       = bomId;

        if (!kanbanItemId)
        {
            LeanCoverage leanCoverage = kanbanRule.ruleData().parmLeanCoverage();
            kanbanItemId              = leanCoverage.ItemId;
            kanbanInventDimId         = leanCoverage.InventDimId;
            kanbanBomId               = '';
        }

        KanbanCreate kanbanCreate = KanbanCreate::newStandard(
                                                         kanbanRule,
                                                         kanbanItemId,
                                                         kanbanInventDimId,
                                                         kanbanBomId,
                                                         kanbanQuantities,
                                                         createManualKanbans,
                                                         priority,
                                                         kanbanDueDateTime,
                                                         kanbanSourceRequirementParm);

        listCreatedKanbans = kanbanCreate.create();
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates kanbans and prints the created kanbans if specified.
    /// </summary>
    /// <returns>
    ///    true if the creation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method is executed in a transaction scope provided by the <c>LeanRulesEngine</c> object.
    /// </remarks>
    protected boolean execute()
    {
        if (this.canTriggerRule())
        {
            this.createKanbans();
            return true;
        }
        else
        {
            return checkFailed("@SYS135451");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>listCreatedKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>List</c> with the created <c>Kanban</c> records.
    /// </summary>
    /// <returns>
    ///    A <c>List</c> object that holds the <c>Kanban</c> records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List listCreatedKanbans()
    {
        return listCreatedKanbans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public BOMId parmBomId(BOMId _bomId = bomId)
    {
        bomId = _bomId;
        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateManualKanbans</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmCreateManualKanbans(boolean _createManualKanbans = createManualKanbans)
    {
        createManualKanbans = _createManualKanbans;

        return createManualKanbans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;

        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanDueDateTime</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanDueDateTime parmKanbanDueDateTime(KanbanDueDateTime _kanbanDueDateTime = kanbanDueDateTime)
    {
        kanbanDueDateTime = _kanbanDueDateTime;

        return kanbanDueDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanQuantities</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public List parmKanbanQuantities(List _kanbanQuantities = kanbanQuantities)
    {
        kanbanQuantities = _kanbanQuantities;

        return kanbanQuantities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRule</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanRule parmKanbanRule(KanbanRule _kanbanRule = kanbanRule)
    {
        kanbanRule = _kanbanRule;

        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanSourceRequirementParm</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanSourceRequirementParm parmKanbanSourceRequirementParm(KanbanSourceRequirementParm _kanbanSourceRequirementParm = kanbanSourceRequirementParm)
    {
        kanbanSourceRequirementParm = _kanbanSourceRequirementParm;

        return kanbanSourceRequirementParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintKanbans</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmPrintKanbans(boolean _printKanbans = printKanbans)
    {
        printKanbans = _printKanbans;

        return printKanbans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriority</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanExpress parmPriority(KanbanExpress _priority = priority)
    {
        priority = _priority;

        return priority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printNewKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints kanban based on the specified list of kanbans.
    /// </summary>
    /// <returns>
    ///    true if kanbans in the list were printed; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean printNewKanbans()
    {
        boolean result;

        if (   listCreatedKanbans
            && listCreatedKanbans.elements())
        {
            if (hasGUI())
            {
                result = LeanCommandCreateKanbans::printNewKanbansClient(listCreatedKanbans);
            }
            else
            {
                result = checkFailed(strFmt("@SYS345088",listCreatedKanbans.elements()));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected static LeanCommandCreateKanbans construct()
    {
        return new LeanCommandCreateKanbans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the <c>LeanCommandCreateKanbans</c> class.
    /// </summary>
    /// <param name="_itemId">
    ///    A string value that holds an item ID.
    /// </param>
    /// <param name="_inventDimId">
    ///    A string value that holds an inventory dimension ID.
    /// </param>
    /// <param name="_kanbanRule">
    ///    A <c>KanbanRule</c> record.
    /// </param>
    /// <param name="_kanbanQuantity">
    ///    A real value that holds the kanban quantity.
    /// </param>
    /// <param name="_numberOfKanbans">
    ///    An integer value that holds the number of kanbans to be created; optional.
    /// </param>
    /// <param name="_kanbanDueDateTime">
    ///    A date and time value that holds the kanban due date and time; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LeanCommandCreateKanbans</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCommandCreateKanbans newItemId(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        KanbanRule          _kanbanRule,
        KanbanQuantity      _kanbanQuantity,
        int                 _numberOfKanbans = 1,
        KanbanDueDateTime   _kanbanDueDateTime = utcDateTimeNull())
    {
        LeanCommandCreateKanbans    leanCommandCreateKanbans = LeanCommandCreateKanbans::construct();

        leanCommandCreateKanbans.parmItemId(_itemId);
        leanCommandCreateKanbans.parmInventDimId(_inventDimId);
        leanCommandCreateKanbans.parmKanbanRule(_kanbanRule);
        leanCommandCreateKanbans.parmKanbanDueDateTime(_kanbanDueDateTime);

        List kanbanQuantities = KanbanCreate::makeListQuantities(_numberOfKanbans, _kanbanQuantity);
        leanCommandCreateKanbans.parmKanbanQuantities(kanbanQuantities);

        return leanCommandCreateKanbans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemIdVariableQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>LeanCommandCreateKanbans</c> class.
    /// </summary>
    /// <param name="_itemId">
    /// A string value that holds an item ID.
    /// </param>
    /// <param name="_inventDimId">
    /// A string value that holds an inventory dimension ID.
    /// </param>
    /// <param name="_kanbanRule">
    /// A <c>KanbanRule</c> record.
    /// </param>
    /// <param name="_kanbanQuantities">
    /// A <c>List</c> that holds the kanban quantities with one element per kanban to be created.
    /// </param>
    /// <param name="_kanbanDueDateTime">
    /// A date and time value that holds the kanban due date and time; optional.
    /// </param>
    /// <param name="_createManualKanbans">
    /// true if manual kanbans should be created; otherwise, false.
    /// </param>
    /// <param name="_priority">
    /// A <c>KanbanExpress</c> kanban priority value.
    /// </param>
    /// <param name="_bomId">
    /// A <c>BOMId</c> string value; optional.
    /// </param>
    /// <param name="_kanbanSourceRequirementParm">
    /// The source requirement parameters for the kanbans to be created; optional.
    /// </param>
    /// <returns>
    /// A <c>LeanCommandCreateKanbans</c> instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCommandCreateKanbans newItemIdVariableQuantity(
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        KanbanRule                  _kanbanRule,
        List                        _kanbanQuantities,
        KanbanDueDateTime           _kanbanDueDateTime,
        boolean                     _createManualKanbans,
        KanbanExpress               _priority,
        BOMId                       _bomId = '',
        KanbanSourceRequirementParm _kanbanSourceRequirementParm = null)
    {
        LeanCommandCreateKanbans    leanCommandCreateKanbans = LeanCommandCreateKanbans::construct();

        leanCommandCreateKanbans.parmItemId(_itemId);
        leanCommandCreateKanbans.parmInventDimId(_inventDimId);
        leanCommandCreateKanbans.parmKanbanRule(_kanbanRule);
        leanCommandCreateKanbans.parmKanbanQuantities(_kanbanQuantities);
        leanCommandCreateKanbans.parmKanbanDueDateTime(_kanbanDueDateTime);
        leanCommandCreateKanbans.parmCreateManualKanbans(_createManualKanbans);
        leanCommandCreateKanbans.parmPriority(_priority);
        leanCommandCreateKanbans.parmBomId(_bomId);
        leanCommandCreateKanbans.parmKanbanSourceRequirementParm(_kanbanSourceRequirementParm);

        return leanCommandCreateKanbans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the <c>LeanCommandCreateKanbans</c> class.
    /// </summary>
    /// <param name="_kanbanRule">
    ///    A <c>KanbanRule</c> record.
    /// </param>
    /// <param name="_numberOfKanbans">
    ///    An Integer value that contains the number of kanbans to be created.
    /// </param>
    /// <param name="_printKanbans">
    ///    true if kanbans must be printed; otherwise, false.
    /// </param>
    /// <param name="_createManualKanbans">
    ///    true if manual kanbans should be created; otherwise, false.
    /// </param>
    /// <param name="_kanbanQuantity">
    ///    A real value that contains the kanban quantity.
    /// </param>
    /// <returns>
    ///    A <c>LeanCommandCreateKanbans</c> instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCommandCreateKanbans newStandard(
        KanbanRule      _kanbanRule,
        int             _numberOfKanbans,
        boolean         _printKanbans,
        boolean         _createManualKanbans,
        KanbanQuantity  _kanbanQuantity = 0)
    {
        LeanCommandCreateKanbans    leanCommandCreateKanbans = LeanCommandCreateKanbans::construct();

        leanCommandCreateKanbans.parmKanbanRule(_kanbanRule);
        leanCommandCreateKanbans.parmPrintKanbans(_printKanbans);
        leanCommandCreateKanbans.parmCreateManualKanbans(_createManualKanbans);

        List kanbanQuantities = KanbanCreate::makeListQuantities(_numberOfKanbans, _kanbanQuantity);
        leanCommandCreateKanbans.parmKanbanQuantities(kanbanQuantities);

        return leanCommandCreateKanbans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printNewKanbansClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the kanban from the client.
    /// </summary>
    /// <param name="_listCreatedKanbans">
    /// The list of kanbans to print.
    /// </param>
    /// <returns>
    /// true if the kanbans were printed; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The list object was not initialized.
    /// </exception>
    private static boolean printNewKanbansClient(List _listCreatedKanbans)
    {
        List                kanbans       = new List(Types::String);
        KanbanPrinter       kanbanPrinter = KanbanPrinter::construct();
        str                 workCell      = '';

        // check input parameters
        if (!_listCreatedKanbans)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ListEnumerator le = _listCreatedKanbans.getEnumerator();

        while (le.moveNext())
        {
            Kanban kanban = le.current();
            kanbans.addEnd(kanban.KanbanId);

            if (workCell == '')
            {
                workCell = kanban.firstKanbanJobOfType(LeanKanbanJobType::Process).wrkCtrResourceGroup().WrkCtrId;
            }
        }

        return kanbanPrinter.printKanbans(kanbans, workCell, false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
