<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailChargeOverrideAuditing</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailChargeOverrideAuditing</c> class handles tracking when charges are overwritten for retail orders in AX.
/// </summary>
internal class RetailChargeOverrideAuditing
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setChargeWasOverridden</Name>
				<Source><![CDATA[
    internal static void setChargeWasOverridden(MarkupTrans markupTrans)
    {
        if (RetailCharges::isRetailCharge(markupTrans) && RetailParameters::isRetailAutoChargesEnabledAndInUse())
        {
            markupTrans.IsOverriddenLine = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreviousChargeValue</Name>
				<Source><![CDATA[
    internal static void setPreviousChargeValue(MarkupTrans markupTrans)
    {
        markupTrans.PreviousValue = markupTrans.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptForChargeOverrideReasonCode</Name>
				<Source><![CDATA[
    internal static boolean promptForChargeOverrideReasonCode(MarkupTrans markupTrans, FieldId fieldId)
    {
        if (RetailParameters::isRetailAutoChargesEnabledAndInUse()
            && RetailCharges::isRetailCharge(markupTrans)
            && retailParameters::find().ChargeOverrideReasonCode != "")
        {
            ttsbegin;

            if (RetailChargeOverrideAuditing::logChargeOverride(markupTrans, fieldId))
            {
                ttscommit;
            }
            else
            {
                ttsabort;
                return false;
            }
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestChargeOverrideHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the most recent chargeOverrideHistory record for the passed in charge line.
    /// </summary>
    /// <param name = "markupTrans">The charge line that you want to get the latest override on.</param>
    /// <returns>The most recent ChargeOverrideHistory record for the passed in charge.</returns>
    internal static ChargeOverrideHistory getLatestChargeOverrideHistory(MarkupTrans markupTrans)
    {
        ChargeOverrideHistory chargeOverrideHistory;

        if (RetailParameters::isRetailAutoChargesEnabledAndInUse()
            && markupTrans.RecId != 0
            && RetailCharges::isRetailCharge(markupTrans))
        {
            select firstonly chargeOverrideHistory
                order by OverrideTime desc
                where chargeOverrideHistory.MarkupTransRecId == markupTrans.RecId;
        }

        return chargeOverrideHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logChargeOverride</Name>
				<Source><![CDATA[
    private static boolean logChargeOverride(MarkupTrans markupTrans, FieldId fieldId)
    {
        ChargeOverrideHistory chargeOverrideHistory;

        RetailChargeOverrideAuditing::setChargeOverrideHistoryFields(chargeOverrideHistory, markupTrans, fieldId);
        RetailChargeOverrideAuditing::launchPromptForChargeOverrideReasonCodeForm(chargeOverrideHistory);

        chargeOverrideHistory.reread();

        return chargeOverrideHistory.OverrideReason != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChargeOverrideHistoryFields</Name>
				<Source><![CDATA[
    internal static void setChargeOverrideHistoryFields(ChargeOverrideHistory chargeOverrideHistory, MarkupTrans markupTrans, FieldId fieldId)
    {
        SalesTable salesTable = RetailCharges::getSalesTableForMarkupTrans(markupTrans);

        switch (fieldId)
        {
            case fieldNum(MarkupTrans, Value):
                chargeOverrideHistory.OriginalAmount = markupTrans.PreviousValue;
                chargeOverrideHistory.OverrideAmount = markupTrans.Value;
                break;
            case fieldNum(MarkupTrans, MarkupCategory):
                chargeOverrideHistory.OriginalValue = markupTrans.PreviousOverriddenFieldValue;
                chargeOverrideHistory.OverriddenValue = enum2Str(markupTrans.(fieldId));
                break;
            default:
                chargeOverrideHistory.OriginalValue = markupTrans.PreviousOverriddenFieldValue;
                chargeOverrideHistory.OverriddenValue = markupTrans.(fieldId);
                break;
        }

        chargeOverrideHistory.OverriddenFieldNum = fieldId; 
        chargeOverrideHistory.ChargeCode = markupTrans.MarkupCode;
        chargeOverrideHistory.Channel = salesTable.RetailChannelTable;
        chargeOverrideHistory.SalesOrderId = salesTable.SalesId;
        chargeOverrideHistory.OverrideTime = DateTimeUtil::utcNow();
        chargeOverrideHistory.AxUserId = curUserId();
        chargeOverrideHistory.MarkupTransRecId = markupTrans.RecId;

        chargeOverrideHistory.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchPromptForChargeOverrideReasonCodeForm</Name>
				<Source><![CDATA[
    private static Args launchPromptForChargeOverrideReasonCodeForm(ChargeOverrideHistory chargeOverrideHistory)
    {
        Args overrideArgs = new Args();
        overrideArgs.name(formStr(RetailPromptForChargeOverrideReasonCode));
        overrideArgs.record(chargeOverrideHistory);
        FormRun recapFormRun = classfactory.formRunClass(overrideArgs);
        recapFormRun.run();
        recapFormRun.wait();

        return overrideArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupChargeOverrideReasonCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up and displays the charge override reason codes.
    /// </summary>
    /// <param name="_callingControl">
    /// The form control that called the lookup.
    /// </param>
    internal static void lookupChargeOverrideReasonCodes(FormControl _callingControl)
    {
        SysTableLookup                  sysTableLookup;
        Query                           query = new Query();
        QueryBuildDataSource            queryBuildDataSource;
        RetailInfocodeId                retailInfocodeId;

        retailInfocodeId = RetailParameters::find().ChargeOverrideReasonCode;

        if (retailInfocodeId)
        {
            sysTableLookup = SysTableLookup::newParameters(tableNum(RetailInformationSubcodeTable), _callingControl);
            queryBuildDataSource = query.addDataSource(tableNum(RetailInformationSubcodeTable));
            queryBuildDataSource.addRange(fieldNum(RetailInformationSubcodeTable, InfocodeId)).value(retailInfocodeId);

            sysTableLookup.addLookupfield(fieldNum(RetailInformationSubcodeTable, SubcodeId));
            sysTableLookup.addLookupMethod(tableMethodStr(RetailInformationSubcodeTable, displaySubcodeDescription), true);

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>