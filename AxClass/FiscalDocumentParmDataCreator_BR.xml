<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentParmDataCreator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Orchestrates the process of creating the Fiscal Document ParmData object model.
/// </summary>
/// <remarks>
///     Concrete subclasses must be created for each specific type of source document that has to generate a fiscal document.
/// </remarks>
public abstract class FiscalDocumentParmDataCreator_BR
{
    TaxAmount           totalApproxTaxAmount;
    BrazilParameters    brazilParameters;

    boolean                     hasICMSDiff;
    ICMSDifIssuerTaxAmount      totalICMSDifIssuerTaxAmount;
    ICMSDifRecipientTaxAmount   totalICMSDifRecipientTaxAmount;
    TaxBase                     totalICMSDifRecipientBaseAmount;
    TaxValue                    totalICMSDifInterPartTaxValue;
    TaxValue                    totalICMSDifInterTaxValue;

    TaxAmount                   totalTaxPovertyFundAmount, totalTribSubstTaxPovertyFundAmount;
    private TaxAmount           totalPresumedTaxAmount;
    private TaxAmount           totalPresumedFCPTaxAmount;
    private TaxAmount           totalICMSSubstitutoTaxAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addApproximateTaxTextHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds approximate tax fiscal document text related to the header of the fiscal document.
    /// </summary>
    /// <param name="_fiscalDocumentAmount">
    ///     The fiscal document amount.
    /// </param>
    /// <returns>
    ///     An instance of <c>FiscalDocumentTextListParmData_BR</c> with the fiscal document texts that have been added.
    /// </returns>
    protected FiscalDocumentTextListParmData_BR addApproximateTaxTextHeader(Amountcur _fiscalDocumentAmount)
    {
        FiscalDocumentTextTagReplacer_BR    taxReplacer = FiscalDocumentTextTagReplacer_BR::construct();
        FiscalDocumentTextListParmData_BR   textList;

        textList  = FiscalDocumentTextListParmData_BR::construct();

        if (totalApproxTaxAmount)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00044, funcName());

            if (_fiscalDocumentAmount)
            {
                taxReplacer.parmApproximateTaxValue(round(totalApproxTaxAmount / _fiscalDocumentAmount * 100, 0.01));
            }

            taxReplacer.parmApproxTaxValueSource(brazilParameters.ApproxTaxValueSource);
            taxReplacer.parmApproximateTaxAmount(totalApproxTaxAmount);

            textList.addText(brazilParameters.ApproxTaxValueTextID, FiscalDocumentTextType_BR::Blank, taxReplacer);
        }

        return textList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addApproximateTaxTextLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds approximate tax fiscal document text related to the specified fiscal document line.
    /// </summary>
    /// <param name="_inventTable">
    ///     <c>InventTable</c> table buffer related to the item in line.
    /// </param>
    /// <param name="_fiscalDocumentLineParmData">
    ///     An instance of <c>FiscalDocumentLineParmData_BR</c> representing a line of the fiscal document.
    /// </param>
    /// <returns>
    ///     An instance of <c>FiscalDocumentTextListParmData_BR</c> with the fiscal document texts that have been added.
    /// </returns>
    protected FiscalDocumentTextListParmData_BR addApproximateTaxTextLine(InventTable _inventTable, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        FiscalDocumentTextTagReplacer_BR    tagReplacer = FiscalDocumentTextTagReplacer_BR::construct();
        FiscalDocumentTextListParmData_BR   textList = FiscalDocumentTextListParmData_BR::construct();
        TaxValue                            approximateTaxValue = _inventTable.approximateTaxValue_BR();

        if (approximateTaxValue)
        {
            tagReplacer.parmApproximateTaxValue(approximateTaxValue);
            tagReplacer.parmApproximateTaxAmount(_fiscalDocumentLineParmData.parmApproximateTaxAmount());
            tagReplacer.parmApproxTaxValueSource(brazilParameters.ApproxTaxValueSource);

            textList.addText(brazilParameters.ApproxTaxValueTextID, FiscalDocumentTextType_BR::Blank, tagReplacer);
        }

        return textList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFciTextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the legal text present on Brazilian Parameters related to FCI
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// Line that should have the legal text added
    /// </param>
    /// <param name="_tagsReplacer">
    /// FiscalDocumentTextTagReplacer_BR to be updated with FCI information
    /// </param>
    /// <returns>
    /// Returns a List of legal texts
    /// </returns>
    protected FiscalDocumentTextListParmData_BR addFciTextLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, FiscalDocumentTextTagReplacer_BR _tagsReplacer)
    {
        FiscalDocumentTextListParmData_BR   textList = FiscalDocumentTextListParmData_BR::construct();

        _tagsReplacer.parmFciNumber(_fiscalDocumentLineParmData.parmFciNumber());
        textList.addText(brazilParameters.FCILegalTextId, FiscalDocumentTextType_BR::Blank, _tagsReplacer);

        return textList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNonRecoverableNotIncludedTaxToCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data related to taxes that are not recoverable and not included in amount.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// <c>FiscalDocumentParmData_BR</c> to be processed.
    /// </param>
    /// <remarks>
    /// Taxes not included in price that are not recoverable should be accounted
    /// as "other charges" per NT 2011.005 and IPI regulation.
    /// This method should be called after all the fiscal document parm data model has been created.
    /// </remarks>
    private void addNonRecoverableNotIncludedTaxToCharges(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        MarkupAmount                        notInclNotRecovTax, totalChargeOthers;
        ListEnumerator                      linesEnumerator;
        ListEnumerator                      chargesEnumerator;
        FiscalDocumentLineParmData_BR       fiscalDocLine;
        FiscalDocumentMiscChargeParmData_BR charge, otherCharge;
        Map                                 taxAmountPerType = new Map(Types::Enum, Types::Real);
        Map                                 taxValuePerType = new Map(Types::Enum, Types::Real);
        TaxValue                            ipiTaxValue;
        Amount                              lineIpiAmount, totalIpiAmount;

        boolean isFiscalDocFromPurchInvoice = this.isFiscalDocumentFromPurchInvoice(_fiscalDocumentParmData);

        if (_fiscalDocumentParmData.parmDirection() != FiscalDocDirection_BR::Outgoing) // only valid when issue a fiscal document
        {
            return;
        }

        totalChargeOthers = _fiscalDocumentParmData.parmTotalMarkupOtherAmount();

        linesEnumerator = _fiscalDocumentParmData.parmLines().getEnumerator();
        while (linesEnumerator.moveNext())
        {
            fiscalDocLine = linesEnumerator.current();
            notInclNotRecovTax = this.getNonRecoverableNotIncludedTaxAmount(isFiscalDocFromPurchInvoice,
                                                                            fiscalDocLine.parmRefRecId(),
                                                                            fiscalDocLine.parmRefTableId(),
                                                                            taxAmountPerType,
                                                                            taxValuePerType);
            chargesEnumerator = fiscalDocLine.parmListOfMiscCharges().getEnumerator();
            while (chargesEnumerator.moveNext())
            {
                charge = chargesEnumerator.current();
                notInclNotRecovTax += this.getNonRecoverableNotIncludedTaxAmount(isFiscalDocFromPurchInvoice,
                                                                                 charge.parmMarkupTrans(),
                                                                                 tableNum(MarkupTrans),
                                                                                 taxAmountPerType);
            }

            if (taxAmountPerType.exists(TaxType_BR::IPI))
            {
                lineIpiAmount = taxAmountPerType.lookup(TaxType_BR::IPI);
                fiscaldocline.parmTextTagReplacer().parmIPI(lineIpiAmount);
                taxAmountPerType.insert(TaxType_BR::IPI, 0); // reset the value for the next line
                totalIpiAmount += lineIpiAmount;
                ipiTaxValue = taxValuePerType.lookup(TaxType_BR::IPI);
                fiscaldocline.parmTextTagReplacer().parmIPI_TaxValue(ipiTaxValue);
            }

            if (notInclNotRecovTax != 0)
            {
                otherCharge = new FiscalDocumentMiscChargeParmData_BR();
                otherCharge.parmAmount(notInclNotRecovTax);
                otherCharge.parmType(MarkupClassification_BR::Others);
                fiscalDocLine.parmListOfMiscCharges().addEnd(otherCharge);
                totalChargeOthers += notInclNotRecovTax;
            }
        }

        _fiscalDocumentParmData.parmTotalMarkupOtherAmount(totalChargeOthers);
        _fiscalDocumentParmData.parmTextTagReplacer().parmIPI(totalIpiAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTexts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy all Fiscal document texts from the database to a list of objects.
    /// </summary>
    /// <param name="_record">
    /// A <c>Common</c> record where the Fiscal document texts are attached to.
    /// </param>
    /// <returns>
    /// A <c>FiscalDocumentTextListParmData_BR</c> instance which holds one or more instances of <c>FiscalDocumentTextParmData_BR</c>.
    /// </returns>
    protected FiscalDocumentTextListParmData_BR addTexts(Common _record)
    {
        FiscalDocumentTextParmDataCreator_BR    textParmDataCreator;

        textParmDataCreator = FiscalDocumentTextParmDataCreator_BR::createFromRecord(_record);

        return textParmDataCreator.parmTextList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanDeliveryFields</Name>
				<Source><![CDATA[
    private void cleanDeliveryFields(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        if (_fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Outgoing)
        {
            if (_fiscalDocumentParmData.parmThirdPartyPostalAddress() == _fiscalDocumentParmData.parmDeliveryLogisticsPostalAddress())
            {
                _fiscalDocumentParmData.parmDeliveryLogisticsPostalAddress(0);
            }
            if (_fiscalDocumentParmData.parmThirdPartyCNPJCPF() == _fiscalDocumentParmData.parmDeliveryCNPJCPF())
            {
                _fiscalDocumentParmData.parmDeliveryCNPJCPF('');
            }
            if (_fiscalDocumentParmData.parmThirdPartyIE() == _fiscalDocumentParmData.parmDeliveryIE())
            {
                _fiscalDocumentParmData.parmDeliveryIE('');
            }
        }
        else
        {
            if (_fiscalDocumentParmData.parmFiscalEstablishmentPostalAddress() == _fiscalDocumentParmData.parmDeliveryLogisticsPostalAddress())
            {
                _fiscalDocumentParmData.parmDeliveryLogisticsPostalAddress(0);
            }
            if (_fiscalDocumentParmData.parmFiscalEstablishmentCNPJCPF() == _fiscalDocumentParmData.parmDeliveryCNPJCPF())
            {
                _fiscalDocumentParmData.parmDeliveryCNPJCPF('');
            }
            if (_fiscalDocumentParmData.parmFiscalEstablishmentIE() == _fiscalDocumentParmData.parmDeliveryIE())
            {
                _fiscalDocumentParmData.parmDeliveryIE('');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHavePresumedTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Method that indicates whether the Fiscal Document can have presumed tax or not.
    /// </summary>
    /// <returns>
    ///     True, if current type of fiscal document can have presumed taxes; otherwise, false.
    /// </returns>
    protected boolean canHavePresumedTaxes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Method responsible for creating the entire Fiscal Document ParmData object model. It orchestrates the creation process abtracting it
    ///     from the concrete classes. Concrete classes must implement the abstract members used by this method.
    /// </summary>
    /// <returns>
    ///     Instance of <c>FiscalDocumentParmData_BR</c>, which represents the Fiscal Document header and serves as the root reference
    ///     for the entire ParmData object model.
    /// </returns>
    public FiscalDocumentParmData_BR createParmData()
    {
        FiscalDocumentParmData_BR                   fiscalDocumentParmData;

        List                                    listOfFiscalDocumentLineParmData;
        FiscalDocumentCustVendTransParmData_BR  fiscalDocumentCustVendTransParmData;
        ListEnumerator                          listOfLinesEnumerator;
        FiscalDocumentLineParmData_BR           fiscalDocumentLineParmData;
        List                                    listOfFiscalDocLineTaxParmData;
        List                                    listOfFMiscChargesParmData;
        ListEnumerator                          listOfMiscChargesEnumerator;
        List                                    listOfMiscChargesTaxParmData;
        FiscalDocumentTaxPovertyFundCalc_BR     fiscalDocumentTaxPovertyFundCalc;

        fiscalDocumentParmData = this.initHeaderParmData();

        fiscalDocumentParmData.parmPurpose(this.getFiscalDocumentPurpose());

        this.cleanDeliveryFields(fiscalDocumentParmData);

        if (this.hasCustVendTrans())
        {
            fiscalDocumentCustVendTransParmData = this.initCustVendTransParmData();
            fiscalDocumentCustVendTransParmData.parmListOfInstallments(this.initListOfInstallments());
            fiscalDocumentParmData.parmCustVendTrans(fiscalDocumentCustVendTransParmData);
        }

        fiscalDocumentTaxPovertyFundCalc = new FiscalDocumentTaxPovertyFundCalc_BR(fiscalDocumentParmData);
        FiscalEstablishment_BR fiscalEstablishment = FiscalEstablishment_BR::findById(fiscalDocumentParmData.parmFiscalEstablishmentID());
        FiscalDocumentPresumedTaxCalc_BR fiscalDocumentPresumedTaxCalc = FiscalDocumentPresumedTaxCalc_BR::initPresumedTaxCalc(fiscalEstablishment.getPresumedTaxAlgorithm());
        fiscalDocumentPresumedTaxCalc.parmFiscalDocumentParmData(fiscalDocumentParmData);
        fiscalDocumentPresumedTaxCalc.parmCanHavePresumedTaxes(this.canHavePresumedTaxes());
        fiscalDocumentPresumedTaxCalc.parmFDPresumedSourceDocumentType(this.getFDPresumedSourceDocumentType());

        fiscalDocumentParmData.parmLines(this.initLinesParmData());

        listOfLinesEnumerator = fiscalDocumentParmData.parmLines().getEnumerator();
        while (listOfLinesEnumerator.moveNext())
        {
            fiscalDocumentLineParmData = listOfLinesEnumerator.current();
            listOfFiscalDocLineTaxParmData = this.postInitListOfTaxTransParmDataForLine(fiscalDocumentLineParmData,
                                                  this.initListOfTaxTransParmDataForLine(fiscalDocumentParmData, fiscalDocumentLineParmData));

            listOfFMiscChargesParmData = this.initMiscChargesParmData(fiscalDocumentParmData, fiscalDocumentLineParmData);
            fiscalDocumentLineParmData.parmListOfMiscCharges(listOfFMiscChargesParmData);

            listOfMiscChargesEnumerator = listOfFMiscChargesParmData.getEnumerator();
            while (listOfMiscChargesEnumerator.moveNext())
            {
                FiscalDocumentMiscChargeParmData_BR fiscalDocumentMiscChargeParmData = listOfMiscChargesEnumerator.current();
                listOfMiscChargesTaxParmData = this.postInitListOfTaxTransParmDataForMarkup(fiscalDocumentMiscChargeParmData,
                                                    this.initListOfTaxTransParmDataForMarkup(fiscalDocumentParmData, fiscalDocumentMiscChargeParmData));

                listOfFiscalDocLineTaxParmData.appendList(listOfMiscChargesTaxParmData);
            }
            fiscalDocumentLineParmData.parmListOfTaxes(
                    FiscalDocumentParmDataCreator_BR::aggregateFiscalDocLineTaxes(listOfFiscalDocLineTaxParmData));

            this.setPovertyFundTaxForLine(fiscalDocumentLineParmData, fiscalDocumentTaxPovertyFundCalc);
            this.setICMSDiffTaxAmountsForLine(fiscalDocumentParmData, fiscalDocumentLineParmData);

            if (BrazilParameters::find().ICMSPresumedTax == NoYes::Yes)
            {
                this.setPresumedTaxForLine(fiscalDocumentLineParmData, fiscalDocumentPresumedTaxCalc);
            }

            this.initTagReplacerForFiscalDocLineParmData(fiscalDocumentParmData, fiscalDocumentLineParmData);
        }

        this.addNonRecoverableNotIncludedTaxToCharges(fiscalDocumentParmData);
        this.setAccountingAmountOnFiscalDocumentLines(fiscalDocumentParmData);

        fiscalDocumentParmData.parmListOfShipmentStat(this.initListOfShipmentStatParmData(fiscalDocumentParmData));
        fiscalDocumentParmData.parmListOfFiscalReference(this.initListOffFiscalReference(fiscalDocumentParmData));

        this.initTagReplacerForFiscalDocParmData(fiscalDocumentParmData);

        this.prepareFiscalDocumentText(fiscalDocumentParmData);

        this.setFiscalEstablishmentTribSubstReg(fiscalDocumentParmData);

        return fiscalDocumentParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns currency code of fiscal reference
    /// </summary>
    /// <returns>
    /// The currency code
    /// </returns>
    abstract protected CurrencyCode fiscalReferenceSourceCurrencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fiscal reference exchange rate value
    /// </summary>
    /// <returns>
    /// The exchange rate vaue
    /// </returns>
    protected ExchRate fiscalReferenceSourceExchRate()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceExchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fiscal reference secundary exchange rate value
    /// </summary>
    /// <returns>
    /// The secundary exchange rate value
    /// </returns>
    protected ExchRate fiscalReferenceSourceExchRateSecondary()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID that the fiscal reference table points to.
    /// </summary>
    /// <returns>
    /// The record ID that the fiscal reference table points to.
    /// </returns>
    abstract protected RecId fiscalReferenceSourceRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID that the fiscal reference table points to.
    /// </summary>
    /// <returns>
    /// The table ID that the fiscal reference table points to.
    /// </returns>
    abstract protected TableId fiscalReferenceSourceTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceIdWithoutSeriesPrefix</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the invoice id without the series.
    /// </summary>
    /// <param name="_invoiceId">
    ///     The original invoice id value starting with the series.
    /// </param>
    /// <param name="_series">
    ///     The value of the series.
    /// </param>
    /// <returns>
    ///     The invoice number without the series.
    /// </returns>
    public InvoiceId getInvoiceIdWithoutSeriesPrefix(InvoiceId _invoiceId, FiscalDocumentSeries_BR _series)
    {
        return FiscalDocument_BR::getInvoiceIdWithoutSeriesPrefix(_invoiceId, _series);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNonRecoverableNotIncludedTaxAmount</Name>
				<Source><![CDATA[
    private TaxAmount getNonRecoverableNotIncludedTaxAmount(boolean _isFiscalDocFromPurchInvoice,
                                                            RefRecId _sourceRecId,
                                                            RefTableId _sourceTableId,
                                                            Map _taxAmountMap,
                                                            Map _taxValueMap = null
                                                            )
    {
        TaxTrans                                taxTrans;
        TaxTrans_BR                             taxTrans_BR;
        TaxTable                                taxTable;
        Amount                                  totalTaxAmount,
                                                currentTaxAmount;

        boolean isICMSST60FiscalValue3 = false;

        while select TaxAmountOther_BR, TaxBaseAmountOther_BR, TaxType_BR,
            FiscalValue_BR, TaxationCode_BR from taxTrans_BR
            join TaxValue from taxTrans
            where taxTrans.SourceRecId        == _sourceRecId
                && taxTrans.SourceTableId     == _sourceTableId
                && taxTrans_BR.TaxTrans       == taxTrans.RecId
                && taxTrans_BR.FiscalValue_BR == TaxFiscalValue_BR::WithoutCreditDebitOther
            exists join taxTable
            where taxtable.TaxCode        == taxTrans.TaxCode
               && taxTable.IncludedTax_BR == false
        {
            isICMSST60FiscalValue3 = FiscalDocumentTaxTrans_BR::isTaxTypeICMSST60FiscalValue3(taxTrans_BR.TaxType_BR, taxTrans_BR.FiscalValue_BR, taxTrans_BR.TaxationCode_BR);

            if (this.includeInTotalTaxAmount(isICMSST60FiscalValue3, _isFiscalDocFromPurchInvoice))
            {
                currentTaxAmount = abs(taxTrans_BR.TaxAmountOther_BR);
                totalTaxAmount += currentTaxAmount;

                if (_taxAmountMap.exists(taxTrans_BR.TaxType_BR))
                {
                    currentTaxAmount += _taxAmountMap.lookup(taxTrans_BR.TaxType_BR);
                }
                _taxAmountMap.insert(taxTrans_BR.TaxType_BR, currentTaxAmount);

                if (_taxValueMap)
                {
                    _taxValueMap.insert(taxTrans_BR.TaxType_BR, taxTrans.TaxValue);
                }
            }
        }

        return totalTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Abstract method that indicates whether the Fiscal Document in context has customer/vendor transactions or not.
    /// </summary>
    /// <returns>
    ///     True if the Fiscal Document has customer/vendor transactions. False otherwise.
    /// </returns>
    protected abstract boolean hasCustVendTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Abstract method that provides an instance of the object representing the Customer/Vendor Transaction associated with the Fiscal Document
    /// </summary>
    /// <returns>
    ///     An instance of <c>FiscalDocumentCustVendTransParmData_BR</c> representing the Customer/Vendor Transaction assiciated with the Fiscal Document.
    /// </returns>
    protected abstract FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Abstract method that provides an instance of the object representing the Fiscal Document header information.
    /// </summary>
    /// <returns>
    ///     An instance of <c>FiscalDocumentParmData_BR</c> representing the header of the Fiscal Document.
    /// </returns>
    protected abstract FiscalDocumentParmData_BR initHeaderParmData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Abstract method that provides a list of objects representing the Fiscal Document lines.
    /// </summary>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentLineParmData_BR</c> representing the lines of the Fiscal Document.
    /// </returns>
    protected abstract List initLinesParmData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOffFiscalReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Abstract method that provides a list of objects representing the Fiscal Documents referenced to the current fiscal document.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">Fiscal document.</param>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentReferencedParmData_BR</c>.
    /// </returns>
    protected List initListOffFiscalReference(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        FiscalReferenceParm_BR              fiscalReferenceParm;
        FiscalDocumentReferencedParmData_BR fiscalDocumentReferencedParmData;
        List                                list = new List(Types::Class);

        if (!this.fiscalReferenceSourceTableId() ||
            !this.fiscalReferenceSourceRecId())
        {
            return null;
        }

        while select LegalTextID, RefTableId, RefRecID
            from fiscalReferenceParm
            where fiscalReferenceParm.SourceTableId == this.fiscalReferenceSourceTableId()
                && fiscalReferenceParm.SourceRecId == this.fiscalReferenceSourceRecId()
        {
            fiscalDocumentReferencedParmData = new FiscalDocumentReferencedParmData_BR();

            fiscalDocumentReferencedParmData.parmFiscalDocumentSourceText   (fiscalReferenceParm.LegalTextID);
            fiscalDocumentReferencedParmData.parmSourceTableId              (fiscalReferenceParm.RefTableId);
            fiscalDocumentReferencedParmData.parmSourceRecId                (fiscalReferenceParm.RefRecID);

            list.addEnd(fiscalDocumentReferencedParmData);
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Abstract method that provides a list of objects representing the Fiscal Document installments.
    /// </summary>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentInstallmentParmData_BR</c> representing the installments generated for the Fiscal Document.
    /// </returns>
    protected abstract List initListOfInstallments()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a list of objects representing the shipment specifications for a given Fiscal Document line.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    ///     An instance of <c>FiscalDocumentParmData_BR</c> representing a specific Fiscal Document line.
    /// </param>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentParmData_BR</c> representing the
    ///     shipment specifications incurred for the Fiscal Document line passed in as parameter.
    /// </returns>
    abstract protected List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfTaxTransParmDataForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a list of objects representing the taxes incurred for a given Fiscal Document line.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    ///     An instance of <c>FiscalDocumentParmData_BR</c> representing the header for the given Fiscal Document line.
    /// </param>
    /// <param name="_fiscalDocumentLineParmData">
    ///     An instance of <c>FiscalDocumentLineParmData_BR</c> representing a specific Fiscal Document line.
    /// </param>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentTaxTransParmData_BR</c> representing the taxes incurred for
    ///     the Fiscal Document line passed in as parameter.
    /// </returns>
    protected List initListOfTaxTransParmDataForLine(FiscalDocumentParmData_BR      _fiscalDocumentParmData,
                                                     FiscalDocumentLineParmData_BR  _fiscalDocumentLineParmData)
    {
        #FiscalDocumentModels_BR
        List                                listOfTaxParmData = new List(Types::Class);
        TaxTrans                            taxTrans;
        TaxTrans_BR                         taxTrans_BR;
        FiscalDocumentTaxTransParmData_BR   fiscalDocumentTaxTransParmData;

        boolean isNFSe = _fiscalDocumentParmData.parmRefTableId() == tableNum(CustInvoiceJour)
            && _fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Outgoing
            && _fiscalDocumentParmData.parmModel() == #FiscalDocModel_SE;

        while select taxTrans
            where taxTrans.SourceRecId == _fiscalDocumentLineParmData.parmRefRecId()
                && taxTrans.SourceTableId == _fiscalDocumentLineParmData.parmRefTableId()
            join taxTrans_BR
            where taxTrans_BR.TaxTrans == taxTrans.RecId
        {
            if (isNFSe
                && BusinessDocumentParameters::isFeatureEnabled([EInvoicingFeaturesForService::BR00095])
                && taxTrans_BR.TaxType_BR == TaxType_BR::ISS)
            {
                LogisticsAddressCountryRegionId countryId = LogisticsPostalAddress::findRecId(_fiscalDocumentParmData.parmThirdPartyPostalAddress()).CountryRegionId;
                LogisticsPostalAddress address = LogisticsPostalAddress::findRecId(_fiscalDocumentParmData.parmFiscalEstablishmentPostalAddress());
                BrazilOther_BR country = countryId == EFDocConstants_BR::CountryRegionIdBRA ? BrazilOther_BR::Brazil : BrazilOther_BR::Other;
                ServiceTaxationTypeValue_BR value;
                ServiceTaxationType_BR serviceTaxationType;
                serviceTaxationType.Country = country;

                if (country == BrazilOther_BR::Brazil)
                {
                    serviceTaxationType.StateId = address.State;
                    serviceTaxationType.City = address.City;
                    serviceTaxationType.ServiceCodeOnDlvAddress = _fiscalDocumentParmData.parmServiceCodeOnDlvAddress();
                    serviceTaxationType.Exempt = taxTrans.ExemptTax;
                    serviceTaxationType.ExemptCode = taxTrans.ExemptCode;
                }

                value  = ServiceTaxationType_BR::findByParameters(serviceTaxationType).Value;
                _fiscalDocumentLineParmData.parmServiceTaxationTypeValue(value);
            }

            fiscalDocumentTaxTransParmData = new FiscalDocumentTaxTransParmData_BR();

            this.initTaxTransParmDataFromTaxTrans(_fiscalDocumentParmData,
                                                  fiscalDocumentTaxTransParmData,
                                                  taxTrans,
                                                  taxTrans_BR);

            listOfTaxParmData.addEnd(fiscalDocumentTaxTransParmData);
        }

        return listOfTaxParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfTaxTransParmDataForMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a list of objects representing the taxes incurred for a given Fiscal Document markup trasaction.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    ///     An instance of <c>FiscalDocumentParmData_BR</c> representing the header of current fiscal document.
    /// </param>
    /// <param name="_fiscalDocumentMiscChargeParmData">
    ///     An instance of <c>FiscalDocumentMiscChargeParmData_BR</c> representing a specific Fiscal Document markup transaction.
    /// </param>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentTaxTransParmData_BR</c> representing the taxes incurred for
    ///     the markup transaction passed in as parameter.
    /// </returns>
    protected List initListOfTaxTransParmDataForMarkup(FiscalDocumentParmData_BR            _fiscalDocumentParmData,
                                                       FiscalDocumentMiscChargeParmData_BR  _fiscalDocumentMiscChargeParmData)
    {
        List                                listOfTaxParmData = new List(Types::Class);
        TaxTrans                            taxTrans;
        TaxTrans_BR                         taxTrans_BR;
        FiscalDocumentTaxTransParmData_BR   fiscalDocumentTaxTransParmData;

        while select taxTrans
            where taxTrans.SourceRecId == _fiscalDocumentMiscChargeParmData.parmMarkupTrans()
               && taxTrans.SourceTableId == tableNum(MarkupTrans)
            outer join taxTrans_BR
                where taxTrans.RecId == taxTrans_BR.TaxTrans
        {
            fiscalDocumentTaxTransParmData = new FiscalDocumentTaxTransParmData_BR();

            this.initTaxTransParmDataFromTaxTrans(_fiscalDocumentParmData,
                                                  fiscalDocumentTaxTransParmData,
                                                  taxTrans,
                                                  taxTrans_BR);

            listOfTaxParmData.addEnd(fiscalDocumentTaxTransParmData);
        }

        return listOfTaxParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMiscChargesParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the list of <c>FiscalDocumentMiscChargeParmData_BR</c> for a given <c>FiscalDocumentLineParmData_BR</c>.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// <c>FiscalDocumentLineParmData_BR</c> to create the charges list from.
    /// </param>
    /// <returns>
    /// A <c>List</c> object with <c>FiscalDocumentMiscChargeParmData_BR</c> related to the given <c>FiscalDocumentLineParmData_BR</c>.
    /// </returns>
    protected List initMiscChargesParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentLineParmData_BR    _fiscalDocumentLineParmData)
    {
        List                                    listOfMiscCharges = new List(Types::Class);
        MarkupTrans                             markupTrans;
        FiscalDocumentMiscChargeParmData_BR     miscChargeParmData;
        MarkupTable                             markupTable;
        MarkupAmount                            markupAmount;
        Map                                     markupAmountByType = new Map(Types::Integer, Types::Real);

        while select CalculatedAmount, MarkupClassification_BR, CurrencyCode, RecId from markupTrans
            where markupTrans.TransTableId == _fiscalDocumentLineParmData.parmRefTableId()
               && markupTrans.TransRecId   == _fiscalDocumentLineParmData.parmRefRecId()
            join markupTable
            where markupTable.ModuleType   == markupTrans.ModuleType
               && markupTable.MarkupCode   == markupTrans.MarkupCode
               && (markupTable.CustType    != MarkupType::LedgerAccount ||
                   markupTable.VendType    != MarkupType::LedgerAccount)
        {
            if (_fiscalDocumentParmData.parmImportDeclaration() == false && markupTable.isMarkupOfTypeCustVend() == false)
            {
                continue;
            }

            miscChargeParmData = new FiscalDocumentMiscChargeParmData_BR();

            markupAmount = markupTrans.CalculatedAmount - FiscalDocumentParmDataCreator_BR::getTaxInCostPrice(markupTrans.TableId, markupTrans.RecId, _fiscalDocumentParmData.isForeignOperation());

            if (markupTrans.CurrencyCode != CompanyInfoHelper::standardCurrency())
            {
                if (this.fiscalReferenceSourceCurrencyCode() == markupTrans.CurrencyCode)
                {
                    miscChargeParmData.parmAmount(CurrencyExchangeHelper::amountCur2MST(markupAmount, markupTrans.CurrencyCode, this.fiscalReferenceSourceExchRate(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), this.fiscalReferenceSourceExchRateSecondary()));
                }
                else
                {
                    miscChargeParmData.parmAmount(CurrencyExchangeHelper::amountCur2MST(markupAmount, markupTrans.CurrencyCode));
                }
            }
            else
            {
                miscChargeParmData.parmAmount(markupAmount);
            }

            miscChargeParmData.parmType(markupTrans.MarkupClassification_BR);
            miscChargeParmData.parmMarkupTrans(markupTrans.RecId);

            markupAmountByType.insert(miscChargeParmData.parmType(), miscChargeParmData.parmAmount());

            listOfMiscCharges.addEnd(miscChargeParmData);
        }

        return listOfMiscCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTagReplacerForFiscalDocLineParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fiscal document text tag replacer, so the fiscal document texts related to given fiscal document line
    /// can have its tags replaced.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// The <c>FiscalDocumentParmData_BR</c> representing the current fiscal document.
    /// </param>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> representing the current fiscal document line.
    /// </param>
    protected void initTagReplacerForFiscalDocLineParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        FiscalDocumentTextTagReplacer_BR fiscalDocumentTextTagReplacer;

        fiscalDocumentTextTagReplacer = _fiscalDocumentLineParmData.parmTextTagReplacer();

        this.setICMSDiffTagsForFiscalDocumentLine(_fiscalDocumentParmData, _fiscalDocumentLineParmData, fiscalDocumentTextTagReplacer);

        this.setTaxPovertyFundTagsForFiscalDocLine(_fiscalDocumentParmData, _fiscalDocumentLineParmData, fiscalDocumentTextTagReplacer);
        
		this.setPresumedTagsForFiscalDocLine(_fiscalDocumentLineParmData, fiscalDocumentTextTagReplacer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTagReplacerForFiscalDocParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fiscal document text tag replacer, so the fiscal document texts related to given fiscal document header
    /// can have its tags replaced.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// The <c>FiscalDocumentParmData_BR</c> representing the current fiscal document.
    /// </param>
    protected void initTagReplacerForFiscalDocParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        FiscalDocumentTextTagReplacer_BR fiscalDocumentTextTagReplacer;

        fiscalDocumentTextTagReplacer = _fiscalDocumentParmData.parmTextTagReplacer();

        this.setICMSDiffTagsForFiscalDocument(fiscalDocumentTextTagReplacer);

        this.setTaxPovertyFundTagsForFiscalDocument(fiscalDocumentTextTagReplacer);

        this.setPresumedTagsForFiscalDocument(fiscalDocumentTextTagReplacer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransParmDataFromTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>FiscalDocumentTaxTransParmData_BR</c> object with data from <c>TaxTrans</c> records.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// <c>FiscalDocumentParmData_BR</c> that is the header tax transaction being initialized.
    /// </param>
    /// <param name="_fiscalDocumentTaxTransParmData">
    /// <c>FiscalDocumentTaxTransParmData_BR</c> to be initialized.
    /// </param>
    /// <param name="_taxTrans">
    /// Base <c>TaxTrans</c> to initialize from.
    /// </param>
    /// <param name="_taxTrans_BR">
    /// <c>TaxTrans_BR</c> that is an extension table from <c>TaxTrans</c> representing the regular tax.
    /// </param>
    [Hookable]
    protected void initTaxTransParmDataFromTaxTrans(FiscalDocumentParmData_BR          _fiscalDocumentParmData,
                                                    FiscalDocumentTaxTransParmData_BR  _fiscalDocumentTaxTransParmData,
                                                    TaxTrans                           _taxTrans,
                                                    TaxTrans_BR                        _taxTrans_BR)
    {
        TaxTable                taxTable;
        TaxData                 taxData;
        TaxationCode_BR         taxationCodeIPI;
        TaxationCodeTable_BR    taxationCodeTable;

        taxTable = TaxTable::find(_taxTrans.TaxCode);

        _fiscalDocumentTaxTransParmData.parmTaxTransSourceTableId   (_taxTrans.SourceTableId);
        _fiscalDocumentTaxTransParmData.parmTaxTransSourceRecId     (_taxTrans.SourceRecId);

        _fiscalDocumentTaxTransParmData.parmTaxTrans                (_taxTrans.RecId);
        _fiscalDocumentTaxTransParmData.parmType                    (_taxTrans_BR.TaxType_BR);
        _fiscalDocumentTaxTransParmData.parmTaxExemptCode           (_taxTrans.ExemptCode);

        // IPI demands that we construct the taxation code based on fiscal document direction.
        if (_taxTrans_BR.TaxType_BR == TaxType_BR::IPI)
        {
            taxationCodeTable = TaxationCodeTable_BR::find(_taxTrans_BR.TaxType_BR, _taxTrans_BR.TaxationCode_BR);
            if (_fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Incoming)
            {
                taxationCodeIPI = taxationCodeTable.InputCode;
            }
            else
            {
                taxationCodeIPI = taxationCodeTable.OutputCode;
            }
            taxationCodeIPI += taxationCodeTable.AtoCotepeTaxCode;
            _fiscalDocumentTaxTransParmData.parmTaxationCode(taxationCodeIPI);
        }
        else
        {
            _fiscalDocumentTaxTransParmData.parmTaxationCode(_taxTrans_BR.TaxationCode_BR);
        }

        taxData = TaxData::find(_taxTrans.TaxCode, _taxTrans.TransDate, _taxTrans.TaxBaseAmount);

        if (_taxTrans_BR.TaxType_BR == TaxType_BR::IPI && _fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Outgoing && _taxTrans_BR.FiscalValue_BR == TaxFiscalValue_BR::WithoutCreditDebitOther)
        {
            _fiscalDocumentTaxTransParmData.parmTaxValue                (0);
        }
        else
        {
            _fiscalDocumentTaxTransParmData.parmTaxValue                (taxData.TaxValue);
        }

        _fiscalDocumentTaxTransParmData.parmFiscalValue                 (_taxTrans_BR.FiscalValue_BR);
        _fiscalDocumentTaxTransParmData.parmTaxationOrigin              (_taxTrans_BR.TaxationOrigin_BR);
        _fiscalDocumentTaxTransParmData.parmRetainedTax                 (taxTable.RetainedTax_BR);
        _fiscalDocumentTaxTransParmData.parmIncludedTax                 (taxTable.IncludedTax_BR);

	    if (_taxTrans_BR.TaxReceivableLongTerm_BR == false)
        {
	        _fiscalDocumentTaxTransParmData.parmTaxAmount               (_taxTrans.TaxAmount - _taxTrans.TaxInCostPriceMST);
        }
	    else
        {
	        _fiscalDocumentTaxTransParmData.parmTaxAmount               (0);
        }

        if (_taxTrans_BR.FiscalValue_BR == TaxFiscalValue_BR::WithCreditDebit)
        {
            if (_taxTrans.taxBaseAmountHasBeenAdjusted_BR())
            {
                _fiscalDocumentTaxTransParmData.parmTaxBaseAmount           (_taxTrans.getTaxBaseAmountRegulatedMST_BR());
            }
            else
            {
                _fiscalDocumentTaxTransParmData.parmTaxBaseAmount           (_taxTrans.TaxBaseAmount);
            }
        }

        _fiscalDocumentTaxTransParmData.parmTaxBaseAmountExempt     (_taxTrans_BR.TaxBaseAmountExempt_BR);
        _fiscalDocumentTaxTransParmData.parmTaxBaseAmountOther      (_taxTrans_BR.TaxBaseAmountOther_BR);
        _fiscalDocumentTaxTransParmData.parmTaxAmountOther          (_taxTrans_BR.TaxAmountOther_BR);

        _fiscalDocumentTaxTransParmData.parmTaxReductionPct         (_taxTrans_BR.TaxReductionPct_BR);
        _fiscalDocumentTaxTransParmData.parmTaxSubstitutionMarkupPct    (taxData.TaxSubstitutionMarkupValue);

        _fiscalDocumentTaxTransParmData.parmTaxReceivableLongTerm(_taxTrans_BR.TaxReceivableLongTerm_BR);

        TaxValue nonRecoverableTaxValue = 0;

        if (_fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Incoming)
        {
            CurrencyCode currencyCode = Ledger::accountingCurrency();

            if (_taxTrans_BR.FiscalValue_BR == TaxFiscalValue_BR::WithCreditDebit)
            {
                nonRecoverableTaxValue = CurrencyExchange::round(taxData.TaxValue * taxData.VATExemptPct / 100, currencyCode);
            }
            else if (_taxTrans_BR.FiscalValue_BR == TaxFiscalValue_BR::WithoutCreditDebitOther)
            {
                if (taxData.VATExemptPct != 0)
                {
                    nonRecoverableTaxValue = CurrencyExchange::round(taxData.TaxValue * taxData.VATExemptPct / 100, currencyCode);
                }
                else
                {
                    nonRecoverableTaxValue = taxData.TaxValue;
                }
            }
        }

        _fiscalDocumentTaxTransParmData.parmTaxNonRecoverablePct(nonRecoverableTaxValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCfopOtherStateOutgoing</Name>
				<Source><![CDATA[
    private boolean isCfopOtherStateOutgoing(CFOPId_BR _cfopId)
    {
        CfopDirectionCheck_BR cfopDirectionCheck;
        cfopDirectionCheck = CfopDirectionCheck_BR::construct(_cfopId);

        return cfopDirectionCheck.isOtherStateOutgoing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTribSubstRegApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if tributary subsitution applies to a given <c>FiscalDocumentParmData_BR</c>.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// <c>FiscalDocumentParmData_BR</c> to check if tributary substitution applies to.
    /// </param>
    /// <returns>
    /// true if tributary substituion applies; false otherwise.
    /// </returns>
    protected boolean isTribSubstRegApplicable(FiscalDocumentParmData_BR   _fiscalDocumentParmData)
    {
        ListEnumerator                      lines;
        FiscalDocumentLineParmData_BR       line;
        ListEnumerator                      taxes;
        FiscalDocumentTaxTransParmData_BR   tax;

        if (_fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Outgoing)
        {
            lines = _fiscalDocumentParmData.parmLines().getEnumerator();

            while (lines.moveNext())
            {
                line = lines.current();

                taxes = line.parmListOfTaxes().getEnumerator();

                while (taxes.moveNext())
                {
                    tax = taxes.current();

                    if (tax.parmType() == TaxType_BR::ICMSST)
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructor method for the <c>FiscalDocumentParmDataCreator_BR</c> class.
    /// </summary>
    public void new()
    {
        brazilParameters = BrazilParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideICMSTaxationCodeWhenICMSSTExists</Name>
				<Source><![CDATA[
    private List overrideICMSTaxationCodeWhenICMSSTExists(List _listOfTaxParmData)
    {
        FiscalDocumentTaxTransParmData_BR icmsSTTransParmData;
        FiscalDocumentTaxTransParmData_BR icmsTransParmData;
        FiscalDocumentTaxTransParmData_BR taxTransParmData;
        ListEnumerator  enumerator;

        enumerator = _listOfTaxParmData.getEnumerator();

        while (enumerator.moveNext())
        {
            taxTransParmData = enumerator.current();

            if (taxTransParmData.parmType() == TaxType_BR::ICMS)
            {
                icmsTransParmData = taxTransParmData;
            }

            if (taxTransParmData.parmType() == TaxType_BR::ICMSST)
            {
                icmsSTTransParmData = taxTransParmData;
            }
        }

        if (icmsSTTransParmData && icmsTransParmData)
        {
            // Ax 2009 behaviour, must use for all new customers
            if (brazilParameters::find().ICMSOverrideICMSSTTaxationCode == true)
            {
                // override taxation code for ICMS-ST code from ICMS
                icmsSTTransParmData.parmTaxationCode(icmsTransParmData.parmTaxationCode());
            }
            else // Ax 2012 behaviour, will be deprecated in the future
            {
                // override taxation code for ICMS from ICMS-ST
            icmsTransParmData.parmTaxationCode(icmsSTTransParmData.parmTaxationCode());
        }
        }

        return _listOfTaxParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setICMSDiffIssuerRecipientTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ICMS Diff tax amount for the issuer and for the recipient
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// The <c>FiscalDocumentParmData_BR</c> that is the header of the document.
    /// </param>
    /// <param name="_fiscalDocumentTaxTransParmData">
    /// The <c>FiscalDocumentTaxTransParmData_BR</c> being created.
    /// </param>
    protected void setICMSDiffIssuerRecipientTaxAmount(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentTaxTransParmData_BR _fiscalDocumentTaxTransParmData)
    {
        TaxAmount   totalICMSDiffTaxAmount;

        if (_fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMSDiff)
        {
            totalICMSDiffTaxAmount = (_fiscalDocumentTaxTransParmData.parmTaxBaseAmount() + _fiscalDocumentTaxTransParmData.parmTaxBaseAmountOther())
                * (_fiscalDocumentTaxTransParmData.parmTaxValue() - _fiscalDocumentTaxTransParmData.parmTaxPovertyFundPercentage()) / 100;

            _fiscalDocumentTaxTransParmData.parmICMSDifIssuerTaxAmount(FiscalDocumentTaxTransOutgoingICMSDif_BR::calculateICMSDifIssuerAmount(totalICMSDiffTaxAmount, _fiscalDocumentParmData.parmFiscalDocumentDate()));
            _fiscalDocumentTaxTransParmData.parmICMSDifRecipientTaxAmount(FiscalDocumentTaxTransOutgoingICMSDif_BR::calculateICMSDifRecipientAmount(totalICMSDiffTaxAmount, _fiscalDocumentParmData.parmFiscalDocumentDate()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setICMSDiffTagsForFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values that will replace ICMS-Dif tags.
    /// </summary>
    /// <param name="_fiscalDocumentTextTagReplacer">
    /// Instance of <c>FiscalDocumentTextTagReplacer_BR</c> that will be used to replace the header fiscal document texts.
    /// </param>
    protected void setICMSDiffTagsForFiscalDocument(FiscalDocumentTextTagReplacer_BR _fiscalDocumentTextTagReplacer)
    {
        if (hasICMSDiff)
        {
            _fiscalDocumentTextTagReplacer.parmICMSDifRecipientBaseAmount(totalICMSDifRecipientBaseAmount);
            _fiscalDocumentTextTagReplacer.parmICMSDifRecipientTaxAmount(totalICMSDifRecipientTaxAmount);

            _fiscalDocumentTextTagReplacer.parmICMSDifIssuerTaxAmount(totalICMSDifIssuerTaxAmount);

            _fiscalDocumentTextTagReplacer.parmICMSDifInterPartTaxValue(totalICMSDifInterPartTaxValue);
            _fiscalDocumentTextTagReplacer.parmICMSDifInterTaxValue(totalICMSDifInterTaxValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setICMSDiffTagsForFiscalDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values that will replace ICMS-Dif tags.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// The <c>FiscalDocumentParmData_BR</c> representing the current fiscal document.
    /// </param>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> representing the current fiscal document line.
    /// </param>
    /// <param name="_fiscalDocumentTextTagReplacer">
    /// Instance of <c>FiscalDocumentTextTagReplacer_BR</c> that will be used to replace the line fiscal document texts.
    /// </param>
    protected void setICMSDiffTagsForFiscalDocumentLine(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, FiscalDocumentTextTagReplacer_BR _fiscalDocumentTextTagReplacer)
    {
        ListEnumerator                      taxesEnumerator;
        FiscalDocumentTaxTransParmData_BR   fiscalDocumentTaxTransParmData;
        boolean                             lineHasICMSDiff;
        ICMSDifIssuerTaxAmount              icmsDifIssuerTaxAmount;
        ICMSDifRecipientTaxAmount           icmsDifRecipientTaxAmount;
        TaxBase                             icmsDifRecipientBaseAmount;
        TaxValue                            icmsDifRecipientTaxValue;
        TaxValue                            icmsDifInterTaxValue;
        TaxValue                            icmsDifInterPartTaxValue;

        if (this.isCfopOtherStateOutgoing(_fiscalDocumentLineParmData.parmCFOP())
            && _fiscalDocumentParmData.parmFinalUser()
            && !_fiscalDocumentParmData.parmThirdPartyIcmsContributor())
        {
            taxesEnumerator = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();

            while (taxesEnumerator.moveNext())
            {
                fiscalDocumentTaxTransParmData  = taxesEnumerator.current();

                if (fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMSDiff)
                {
                    lineHasICMSDiff = true;

                    icmsDifIssuerTaxAmount      += fiscalDocumentTaxTransParmData.parmICMSDifIssuerTaxAmount();
                    icmsDifRecipientTaxAmount   += fiscalDocumentTaxTransParmData.parmICMSDifRecipientTaxAmount();
                    icmsDifRecipientBaseAmount  += fiscalDocumentTaxTransParmData.parmTaxBaseAmount() + fiscalDocumentTaxTransParmData.parmTaxBaseAmountOther();
                    icmsDifRecipientTaxValue    = fiscalDocumentTaxTransParmData.parmTaxValue();
                }

                if (fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMS)
                {
                    icmsDifInterTaxValue    = fiscalDocumentTaxTransParmData.parmTaxValue();
                }
            }

            if (lineHasICMSDiff)
            {
                hasICMSDiff = lineHasICMSDiff;

                icmsDifInterPartTaxValue = FiscalDocumentTaxTransOutgoingICMSDif_BR::icmsDiffRecipientPct(_fiscalDocumentParmData.parmFiscalDocumentDate());

                _fiscalDocumentTextTagReplacer.parmICMSDifIssuerTaxAmount(icmsDifIssuerTaxAmount);

                _fiscalDocumentTextTagReplacer.parmICMSDifInterTaxValue(icmsDifInterTaxValue);
                _fiscalDocumentTextTagReplacer.parmICMSDifInterPartTaxValue(icmsDifInterPartTaxValue);

                _fiscalDocumentTextTagReplacer.parmICMSDifRecipientBaseAmount(icmsDifRecipientBaseAmount);
                _fiscalDocumentTextTagReplacer.parmICMSDifRecipientTaxAmount(icmsDifRecipientTaxAmount);
                _fiscalDocumentTextTagReplacer.parmICMSDifRecipientTaxValue(icmsDifRecipientTaxValue + icmsDifInterTaxValue);

                // totals
                totalICMSDifIssuerTaxAmount     += icmsDifIssuerTaxAmount;

                totalICMSDifRecipientBaseAmount += icmsDifRecipientBaseAmount;
                totalICMSDifRecipientTaxAmount  += icmsDifRecipientTaxAmount;

                totalICMSDifInterPartTaxValue   = icmsDifInterPartTaxValue;
                totalICMSDifInterTaxValue       = icmsDifInterTaxValue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setICMSDiffTaxAmountsForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the ICMS Diff tax amounts for the line.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    ///     The <c>FiscalDocumentParmData_BR</c> that is the header of the document.
    /// </param>
    /// <param name="_fiscalDocumentLineParmData">
    ///     The <c>FiscalDocumentLineParmData_BR</c> to set the amounts for.
    /// </param>
    protected void setICMSDiffTaxAmountsForLine(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        FiscalDocumentTaxTransParmData_BR ipiTaxTrans, icmsTaxTrans, icmsDifTaxTrans, fdTaxTrans;
        ListEnumerator taxesEnumerator = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();
        boolean dualBaseEnabled = FeatureStateProvider::isFeatureEnabled(TaxCalculationDualBaseForARFeature_BR::instance());

        while (taxesEnumerator.moveNext())
        {
            fdTaxTrans = taxesEnumerator.current();

            if (!dualBaseEnabled)
            {
                this.setICMSDiffIssuerRecipientTaxAmount(_fiscalDocumentParmData, taxesEnumerator.current());
            }
            else if (fdTaxTrans.parmType() == TaxType_BR::ICMS)
            {
                icmsTaxTrans = fdTaxTrans;
            }
            else if (fdTaxTrans.parmType() == TaxType_BR::ICMSDiff)
            {
                icmsDifTaxTrans = fdTaxTrans;
            }
            else if (fdTaxTrans.parmType() == TaxType_BR::IPI)
            {
                ipiTaxTrans = fdTaxTrans;
            }
        }

        if (dualBaseEnabled && icmsTaxTrans && icmsDifTaxTrans)
        {
            TaxAmount recipientTaxAmount;
            TaxCode taxCode = TaxTrans::findByRecId(icmsDifTaxTrans.parmTaxTrans()).TaxCode;
            Amount totalICMSDiffTaxAmount = (icmsDifTaxTrans.parmTaxBaseAmount() + icmsDifTaxTrans.parmTaxBaseAmountOther())
                * (icmsDifTaxTrans.parmTaxValue() - icmsDifTaxTrans.parmTaxPovertyFundPercentage()) / 100;
            TaxAmount icmsAmount = icmsTaxTrans.parmTaxAmount() + icmsTaxTrans.parmTaxAmountOther() - icmsTaxTrans.parmTaxPovertyFundAmount();
            TaxAmount ipiAmount = ipiTaxTrans ? ipiTaxTrans.parmTaxAmount() + ipiTaxTrans.parmTaxAmountOther() : 0;

            if (TaxTable::find(taxCode).TaxBase == TaxBaseType::PctPerGross)
            {
                recipientTaxAmount = abs((_fiscalDocumentLineParmData.parmLineAmount() + ipiAmount - icmsAmount) / (1 - (icmsDifTaxTrans.parmTaxValue() / 100)) * icmsDifTaxTrans.parmTaxValue() / 100 - icmsAmount);
            }
            else
            {
                recipientTaxAmount = totalICMSDiffTaxAmount;
            }

            icmsDifTaxTrans.parmICMSDifRecipientTaxAmount(CurrencyExchange::round(recipientTaxAmount, Ledger::accountingCurrency()));
            icmsDifTaxTrans.parmICMSDifIssuerTaxAmount(FiscalDocumentTaxTransOutgoingICMSDif_BR::calculateICMSDifIssuerAmount(totalICMSDiffTaxAmount, _fiscalDocumentParmData.parmFiscalDocumentDate()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPovertyFundTaxForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the poverty fund tax amounts for the line.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    ///     The <c>FiscalDocumentLineParmData_BR</c> to set the amounts for.
    /// </param>
    /// <param name="_fiscalDocumentTaxPovertyFundCalc">
    ///     The <c>FiscalDocumentTaxPovertyFundCalc_BR</c> that calculates the poverty fund tax amount.
    /// </param>
    protected void setPovertyFundTaxForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData,
                                            FiscalDocumentTaxPovertyFundCalc_BR _fiscalDocumentTaxPovertyFundCalc)
    {
        _fiscalDocumentTaxPovertyFundCalc.initTaxPovertyFundForLine(_fiscalDocumentLineParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPresumedTagsForFiscalDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values that will replace presumed tags.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> representing the current fiscal document line.
    /// </param>
    /// <param name="_fiscalDocumentTextTagReplacer">
    /// Instance of <c>FiscalDocumentTextTagReplacer_BR</c> that will be used to replace the line fiscal document texts.
    /// </param>
    protected void setPresumedTagsForFiscalDocLine(
        FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData,
        FiscalDocumentTextTagReplacer_BR _fiscalDocumentTextTagReplacer)
    {
        totalPresumedTaxAmount = 0;
        totalPresumedFCPTaxAmount = 0;
        totalICMSSubstitutoTaxAmount = 0;
        ListEnumerator taxesEnumerator = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();
        
        while (taxesEnumerator.moveNext())
        {
            FiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmData  = taxesEnumerator.current();
            
            TaxAmount presumedTaxAmount = fiscalDocumentTaxTransParmData.parmPresumedTaxAmount();
            TaxAmount presumedvICMSSubstituto = fiscalDocumentTaxTransParmData.parmPresumedvICMSSubstituto();
            
            if (presumedTaxAmount && fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMSST)
            {
                _fiscalDocumentTextTagReplacer.parmPresumedTaxAmount(presumedTaxAmount);
                _fiscalDocumentTextTagReplacer.parmPresumedTaxAmountPerInvUnit(fiscalDocumentTaxTransParmData.parmPresumedTaxAmountPerInvUnit());
                _fiscalDocumentTextTagReplacer.parmPresumedTaxBaseAmount(fiscalDocumentTaxTransParmData.parmPresumedTaxBaseAmount());
                _fiscalDocumentTextTagReplacer.parmPresumedTaxBaseAmountPerInvUnit(fiscalDocumentTaxTransParmData.parmPresumedTaxBaseAmountPerInvUnit());
                _fiscalDocumentTextTagReplacer.parmPresumedTaxPercentage(fiscalDocumentTaxTransParmData.parmPresumedTaxPercentage());
                _fiscalDocumentTextTagReplacer.parmPresumedFCPTaxAmount(fiscalDocumentTaxTransParmData.parmPresumedFCPTaxAmount());
                _fiscalDocumentTextTagReplacer.parmPresumedFCPTaxAmountPerInvUnit(fiscalDocumentTaxTransParmData.parmPresumedFCPTaxAmountPerInvUnit());
                _fiscalDocumentTextTagReplacer.parmPresumedFCPTaxBaseAmount(fiscalDocumentTaxTransParmData.parmPresumedFCPTaxBaseAmount());
                _fiscalDocumentTextTagReplacer.parmPresumedFCPTaxBaseAmountPerInvUnit(fiscalDocumentTaxTransParmData.parmPresumedFCPTaxBaseAmountPerInvUnit());
                _fiscalDocumentTextTagReplacer.parmPresumedFCPTaxPercentage(fiscalDocumentTaxTransParmData.parmPresumedFCPTaxPercentage());
            
                totalPresumedTaxAmount += presumedTaxAmount;
                totalPresumedFCPTaxAmount += fiscalDocumentTaxTransParmData.parmPresumedFCPTaxAmount();
            }
            else if (presumedvICMSSubstituto)
            {
                _fiscalDocumentTextTagReplacer.parmICMSSubstitutoTaxAmount(presumedvICMSSubstituto);
                totalICMSSubstitutoTaxAmount += presumedTaxAmount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPresumedTagsForFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values that will replace presumed tags.
    /// </summary>
    /// <param name="_fiscalDocumentTextTagReplacer">
    /// Instance of <c>FiscalDocumentTextTagReplacer_BR</c> that will be used to replace the header fiscal document texts.
    /// </param>
    protected void setPresumedTagsForFiscalDocument(FiscalDocumentTextTagReplacer_BR _fiscalDocumentTextTagReplacer)
    {
        _fiscalDocumentTextTagReplacer.parmPresumedTaxAmount(totalPresumedTaxAmount);
        _fiscalDocumentTextTagReplacer.parmPresumedFCPTaxAmount(totalPresumedFCPTaxAmount);
        _fiscalDocumentTextTagReplacer.parmICMSSubstitutoTaxAmount(totalICMSSubstitutoTaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPresumedTaxForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the presumed tax amounts for the line.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    ///     The <c>FiscalDocumentLineParmData_BR</c> to set the amounts for.
    /// </param>
    /// <param name="_fiscalDocumentPresumedTaxCalc">
    ///     The <c>FiscalDocumentPresumedTaxCalc_BR</c> that calculates the presumed tax amount.
    /// </param>
    protected void setPresumedTaxForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData,
        FiscalDocumentPresumedTaxCalc_BR _fiscalDocumentPresumedTaxCalc)
    {
        _fiscalDocumentPresumedTaxCalc.createPresumedTaxForLine(_fiscalDocumentLineParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxPovertyFundTagsForFiscalDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values that will replace tax poverty fund (ICMS FCP) tags.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// The <c>FiscalDocumentParmData_BR</c> representing the current fiscal document.
    /// </param>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> representing the current fiscal document line.
    /// </param>
    /// <param name="_fiscalDocumentTextTagReplacer">
    /// Instance of <c>FiscalDocumentTextTagReplacer_BR</c> that will be used to replace the line fiscal document texts.
    /// </param>
    protected void setTaxPovertyFundTagsForFiscalDocLine(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, FiscalDocumentTextTagReplacer_BR _fiscalDocumentTextTagReplacer)
    {
        ListEnumerator                      taxesEnumerator;
        FiscalDocumentTaxTransParmData_BR   fiscalDocumentTaxTransParmData;
        TaxAmount                           taxPovertyFundAmount;

        taxesEnumerator = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();

        while (taxesEnumerator.moveNext())
        {
            fiscalDocumentTaxTransParmData  = taxesEnumerator.current();
    
            taxPovertyFundAmount = fiscalDocumentTaxTransParmData.parmTaxPovertyFundAmount();
            container taxTypeCon  = [TaxType_BR::ICMS, TaxType_BR::ICMSDiff];
    
            if (taxPovertyFundAmount && conFind(taxTypeCon, fiscalDocumentTaxTransParmData.parmType()))
            {
                _fiscalDocumentTextTagReplacer.parmTaxPovertyFundAmount(taxPovertyFundAmount);
                _fiscalDocumentTextTagReplacer.parmTaxPovertyFundBaseAmount(fiscalDocumentTaxTransParmData.parmTaxPovertyFundBaseAmount());
                _fiscalDocumentTextTagReplacer.parmTaxPovertyFundPercentage(fiscalDocumentTaxTransParmData.parmTaxPovertyFundPercentage());
                
                totalTaxPovertyFundAmount += taxPovertyFundAmount;
            }
            else if (taxPovertyFundAmount && fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMSST)
            {
                _fiscalDocumentTextTagReplacer.parmTribSubstTaxPovertyFundAmount(taxPovertyFundAmount);
                _fiscalDocumentTextTagReplacer.parmTribSubstTaxPovertyFundBaseAmount(fiscalDocumentTaxTransParmData.parmTaxPovertyFundBaseAmount());
                _fiscalDocumentTextTagReplacer.parmTribSubstTaxPovertyFundPercentage(fiscalDocumentTaxTransParmData.parmTaxPovertyFundPercentage());
                
                totalTribSubstTaxPovertyFundAmount += taxPovertyFundAmount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxPovertyFundTagsForFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values that will replace tax poverty fund (ICMS FCP) tags.
    /// </summary>
    /// <param name="_fiscalDocumentTextTagReplacer">
    /// Instance of <c>FiscalDocumentTextTagReplacer_BR</c> that will be used to replace the header fiscal document texts.
    /// </param>
    protected void setTaxPovertyFundTagsForFiscalDocument(FiscalDocumentTextTagReplacer_BR _fiscalDocumentTextTagReplacer)
    {
        _fiscalDocumentTextTagReplacer.parmTaxPovertyFundAmount(totalTaxPovertyFundAmount);
        _fiscalDocumentTextTagReplacer.parmTribSubstTaxPovertyFundAmount(totalTribSubstTaxPovertyFundAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInitListOfTaxTransParmDataForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Post method to handle fiscal document line taxes after get initiated by <c>initListOfTaxTransParmDataForLine</c>
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    ///     An instance of <c>FiscalDocumentLineParmData_BR</c> representing a specific Fiscal Document line.
    /// </param>
    /// <param name="_listOfTaxParmData">
    ///     A List of classes with instances of <c>FiscalDocumentTaxTransParmData_BR</c> representing the taxes.
    /// </param>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentTaxTransParmData_BR</c> representing the taxes.
    /// </returns>

    protected List postInitListOfTaxTransParmDataForLine(FiscalDocumentLineParmData_BR  _fiscalDocumentLineParmData,
                                                         List                           _listOfTaxParmData)
    {
        List listOfTaxParmData = _listOfTaxParmData;

        listOfTaxParmData = this.overrideICMSTaxationCodeWhenICMSSTExists(_listOfTaxParmData);

        return listOfTaxParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInitListOfTaxTransParmDataForMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Post method to handle fiscal document line taxes after get initiated by <c>initListOfTaxTransParmDataForLine</c>
    /// </summary>
    /// <param name="_fiscalDocumentMiscChargeParmData">
    ///     An instance of <c>FiscalDocumentMiscChargeParmData_BR</c> representing a specific Fiscal Document markup transaction.
    /// </param>
    /// <param name="_listOfTaxParmData">
    ///     A List of classes with instances of <c>FiscalDocumentTaxTransParmData_BR</c> representing the taxes.
    /// </param>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentTaxTransParmData_BR</c> representing the taxes.
    /// </returns>

    protected List postInitListOfTaxTransParmDataForMarkup(FiscalDocumentMiscChargeParmData_BR  _fiscalDocumentMiscChargeParmData,
                                                           List _listOfTaxParmData)
    {
        List listOfTaxParmData = _listOfTaxParmData;

        listOfTaxParmData = this.overrideICMSTaxationCodeWhenICMSSTExists(_listOfTaxParmData);

        return listOfTaxParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareFiscalDocumentText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the Fiscal document texts added to the object before posting them.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// An instance of <c>FiscalDocumentParmData_BR</c> that contains all Fiscal document texts.
    /// </param>
    /// <remarks>
    /// This method allows the implementation classes to override it and add specific transformations before calling prepare().
    /// </remarks>
    protected void prepareFiscalDocumentText(FiscalDocumentParmData_BR  _fiscalDocumentParmData)
    {
        FiscalDocumentTextTagReplacer_BR     tagReplacer;
        ListEnumerator                       linesEnumerator;
        FiscalDocumentLineParmData_BR        line;

        tagReplacer = _fiscalDocumentParmData.parmTextTagReplacer();
        tagReplacer.replaceTagsOnList(_fiscalDocumentParmData.parmListOfTextsParmData());

        linesEnumerator = _fiscalDocumentParmData.parmLines().getEnumerator();
        while (linesEnumerator.moveNext())
        {
            line = linesEnumerator.current();
            tagReplacer = line.parmTextTagReplacer();
            tagReplacer.replaceTagsOnList(line.parmListOfTextsParmData());
        }

        FiscalDocumentTextPost_BR::prepare(_fiscalDocumentParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates sum of line taxes.
    /// </summary>
    /// <param name = "_taxes">Line list of taxes enumerator.</param>
    /// <param name = "_fiscalDocumentParmData">An instance of <c>FiscalDocumentParmData_BR</c>.</param>
    /// <returns>Sum of taxes amount.</returns>
    public Amount sumTaxes(ListEnumerator _taxes, FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        Amount taxNotIncludedInPriceAmount, taxesOnDirectImport;

        boolean isFiscalDocFromPurch = this.isFiscalDocumentFromPurchInvoice(_fiscalDocumentParmData);

        while (_taxes.moveNext())
        {
            FiscalDocumentTaxTransParmData_BR tax = _taxes.current();

            if (_fiscalDocumentParmData.parmImportDeclaration() == false)
            {
                if (tax.parmType() == TaxType_BR::ICMSST || tax.parmType() == TaxType_BR::IPI)
                {
                    taxNotIncludedInPriceAmount += tax.parmTaxAmount();

                    /// Taxes not included in price that are not recoverable should be accounted as "other charges" per NT 2011.005 and IPI regulation.
                    /// The other ipi amount is already converted in misc charges for outgoing fiscal documents, thus cannot be summed
                    if (this.shouldAddTaxInNotIncludedAmount(_fiscalDocumentParmData, tax, isFiscalDocFromPurch))
                    {
                        taxNotIncludedInPriceAmount += tax.parmTaxAmountOther();
                    }
                }
            }
            else // sum all taxes when direct import
            {
                taxesOnDirectImport += tax.parmTaxAmount() + tax.parmTaxAmountOther();
            }
        }

        return taxNotIncludedInPriceAmount + taxesOnDirectImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountingAmountOnFiscalDocumentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the accounting amount for each fiscal document line
    /// </summary>
    /// <param name = "_fiscalDocumentParmData">An instance of <c>FiscalDocumentParmData_BR</c>.</param>
    public void setAccountingAmountOnFiscalDocumentLines(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {

        var linesEnumerator = _fiscalDocumentParmData.parmLines().getEnumerator();
        while (linesEnumerator.moveNext())
        {
            TaxAmount totalTaxes;

            FiscalDocumentLineParmData_BR line = linesEnumerator.current();

            totalTaxes = this.sumTaxes(line.parmListOfTaxes().getEnumerator(), _fiscalDocumentParmData);

            var charges = line.parmListOfMiscCharges().getEnumerator();
            AmountMST totalChargeAmount = 0;
            while (charges.moveNext())
            {
                FiscalDocumentMiscChargeParmData_BR charge = charges.current();
                totalChargeAmount += charge.parmAmount();
            }

            var accountingAmount = line.parmLineAmount() - line.parmLineDiscount()
                                   + totalChargeAmount
                                   + totalTaxes;

            line.parmAccountingAmount(accountingAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalEstablishmentTribSubstReg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tributary substitution registry (IE number) to a <c>FiscalDocumentParmData_BR</c> if it is applicable.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// <c>FiscalDocumentParmData_BR</c> to be set.
    /// </param>
    protected void setFiscalEstablishmentTribSubstReg(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        LogisticsPostalAddress              address;
        FiscalEstablishment_BR              fiscalEstablishment;
        FiscalEstablishmentIEPerState_BR    fiscalEstablishmentIEPerState;

        if (this.isTribSubstRegApplicable(_fiscalDocumentParmData))
        {
            if (_fiscalDocumentParmData.parmDeliveryLogisticsPostalAddress())
            {
                address = LogisticsPostalAddress::findRecId(_fiscalDocumentParmData.parmDeliveryLogisticsPostalAddress());
            }
            else
            {
                address = LogisticsPostalAddress::findRecId(_fiscalDocumentParmData.parmThirdPartyPostalAddress());
            }

            fiscalEstablishment             = FiscalEstablishment_BR::findByCNPJ(_fiscalDocumentParmData.parmFiscalEstablishmentCNPJCPF());
            fiscalEstablishmentIEPerState   = FiscalEstablishmentIEPerState_BR::findByFiscalEstablishmentState(
                                                                        fiscalEstablishment.RecId,
                                                                        address.State,
                                                                        address.CountryRegionId);

            _fiscalDocumentParmData.parmFiscalEstablishmentTribSubstReg(fiscalEstablishmentIEPerState.ieNum_BR);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromCustInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>FiscalDocParmDataCreatorCustInvoice_BR</c> class.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_salesParmTable">
    /// The <c>SalesParmTable</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_salesTotals">
    /// The <c>SalesTotals</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_salesParmUpdate">
    /// The <c>SalesParmUpdate</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_journalLines">
    /// The list of <c>CustInvoiceJour</c> table buffers to be passed to the created instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>FiscalDocParmDataCreatorCustInvoice_BR</c> class that has all auxiliary data
    /// sources correctly set.
    /// </returns>
    public static FiscalDocumentParmData_BR fromCustInvoice(CustInvoiceJour _custInvoiceJour, SalesParmTable _salesParmTable, SalesTotals _salesTotals, SalesParmUpdate _salesParmUpdate, SalesTable _salesTable, RecordSortedList _journalLines)
    {
        FiscalDocParmDataCreatorCustInvoice_BR  creator;

        creator = new FiscalDocParmDataCreatorCustInvoice_BR();

        creator.setCustInvoiceJour(_custInvoiceJour);
        creator.setSalesParmTable(_salesParmTable);
        creator.setSalesTotals(_salesTotals);
        creator.setSalesParmUpdate(_salesParmUpdate);
        creator.setSalesTable(_salesTable);
        creator.setCustInvoiceTransList(_journalLines);

        return creator.createParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromCustProFormaInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>FiscalDocProFormaParmDataCreator_BR</c> class.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_salesParmTable">
    /// The <c>SalesParmTable</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_salesTotals">
    /// The <c>SalesTotals</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_salesParmUpdate">
    /// The <c>SalesParmUpdate</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_journalLines">
    /// The list of the <c>CustInvoiceJour</c> table buffers to be passed to the created instance.
    /// </param>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> table buffer to be passed to the created instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>FiscalDocParmDataCreatorCustInvoice_BR</c> class that has all auxiliary data
    /// sources correctly set.
    /// </returns>
    public static FiscalDocumentParmData_BR fromCustProFormaInvoice(CustInvoiceJour _custInvoiceJour, SalesParmTable _salesParmTable, SalesTotals _salesTotals, SalesParmUpdate _salesParmUpdate, SalesTable _salesTable, RecordSortedList _journalLines, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        FiscalDocParmDataCreatorCustProForma_BR  creator;

        creator = new FiscalDocParmDataCreatorCustProForma_BR();

        creator.setCustInvoiceJour(_custInvoiceJour);
        creator.setSalesParmTable(_salesParmTable);
        creator.setSalesTotals(_salesTotals);
        creator.setSalesParmUpdate(_salesParmUpdate);
        creator.setSalesTable(_salesTable);
        creator.setCustInvoiceTransList(_journalLines);
        creator.setTmpTaxWorkTrans(_tmpTaxWorkTrans);

        return creator.createParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromFiscalDocumentModel2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a FiscalDocumentParmData object with all the parameters properly filled
    /// for a fiscal document model 2.
    /// </summary>
    /// <param name="_fiscalDocumentModel2">
    /// Fiscal document model 2 that will originate the fiscal document.
    /// </param>
    /// <param name="_voucher">
    /// The statement voucher that the fiscal document is associated to.
    /// </param>
    /// <returns>
    /// <c>FiscalDocumentParmData_BR</c> object filled with values properly set for
    /// a fiscal document model 2.
    /// </returns>
    public static FiscalDocumentParmData_BR fromFiscalDocumentModel2(RetailFiscalDocumentModel2_BR _fiscalDocumentModel2,
                                                                     Voucher                       _voucher)
    {
        FiscalDocParmDataCreatorModel2_BR parmDataCreator = new FiscalDocParmDataCreatorModel2_BR();
        parmDataCreator.setFiscalDocumentModel2(_fiscalDocumentModel2);
        parmDataCreator.setVoucher(_voucher);

        return parmDataCreator.createParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromFreeTextInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>FiscalDocParmDataCreatorFTInvoice_BR</c> class.
    /// </summary>
    /// <param name="_custFreeInvoiceCalcTotals">
    /// The <c>CustFreeInvoiceCalcTotals</c> instance to be passed to the created instance.
    /// </param>
    /// <param name="_custInvoiceTable">
    /// The <c>CustInvoiceTable</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_carrierName">
    /// The name of the carrier to be passed to the created instance.
    /// </param>
    /// <param name="_freightChargeTerms">
    /// The freight charge terms to be passed to the created instance.
    /// </param>
    /// <param name="_dlvNoOfCarrier">
    /// The <c>DlvNoOfCarrier_BR</c> value to be passed to the created instance.
    /// </param>
    /// <param name="_dlvStateRegitered">
    /// The <c>DlvStateRegistered_BR</c> value to be passed to the created instance.
    /// </param>
    /// <param name="_dlvTransportBrand">
    /// The <c>DlvTransportBrand_BR</c> value to be passed to the created instance.
    /// </param>
    /// <param name="_volumeType">
    /// The <c>VolumeType_BR</c> value to be passed to the created instance.
    /// </param>
    /// <param name="_volumeQty">
    /// The <c>VolumeQty_BR</c> value to be passed to the created instance.
    /// </param>
    /// <param name="_netWeight">
    /// The <c>ItemNetWeight</c> value to be passed to the created instance.
    /// </param>
    /// <param name="_grossWeight">
    /// The <c>GrossWeight</c> value to be passed to the created instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>FiscalDocParmDataCreatorFTInvoice_BR</c> class that has all auxiliary data
    /// sources correctly set.
    /// </returns>
    public static FiscalDocumentParmData_BR fromFreeTextInvoice(CustFreeInvoiceCalcTotals   _custFreeInvoiceCalcTotals,
                                                                CustInvoiceTable            _custInvoiceTable,
                                                                WMSCarrierName              _carrierName,
                                                                WMSFreightChargeTerms       _freightChargeTerms,
                                                                DlvNoOfCarrier_BR           _dlvNoOfCarrier,
                                                                DlvStateRegistered_BR       _dlvStateRegitered,
                                                                DlvTransportBrand_BR        _dlvTransportBrand,
                                                                VolumeType_BR               _volumeType,
                                                                VolumeQty_BR                _volumeQty,
                                                                ItemNetWeight               _netWeight,
                                                                GrossWeight                 _grossWeight)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00035, funcName());

        FiscalDocParmDataCreatorFTInvoice_BR  creator;

        creator = new FiscalDocParmDataCreatorFTInvoice_BR();

        creator.setCustFreeInvoiceCalcTotals   (_custFreeInvoiceCalcTotals);
        creator.setcustInvoiceTable            (_custInvoiceTable);
        creator.setCustInvoiceJour             (_custInvoiceTable.custInvoiceJour());

        creator.setBillOfLadingInformation_BR(_carrierName,
                                            _freightChargeTerms,
                                            _dlvNoOfCarrier,
                                            _dlvStateRegitered,
                                            _dlvTransportBrand,
                                            _volumeType,
                                            _volumeQty,
                                            _netWeight,
                                            _grossWeight);

        return creator.createParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>FiscalDocumentParmData_BR</c> for a packing slip scenario.
    /// </summary>
    /// <param name="_custPackingSlipJour">
    /// <c>CustPackingSlipJour</c> buffer to build the parm data from.
    /// </param>
    /// <param name="_salesParmTable">
    /// <c>SalesParmTable</c> buffer to build the parm data from.
    /// </param>
    /// <param name="_salesTotals">
    /// <c>SalesTotals</c> object to build the parm data from.
    /// </param>
    /// <param name="_salesParmUpdate">
    /// <c>SalesParmUpdate</c> buffer to build the parm data from.
    /// </param>
    /// <param name="_salesTable">
    /// <c>SalesTable</c> buffer to build the parm data from.
    /// </param>
    /// <param name="_journalLines">
    /// A <c>List</c> object with the <c>CustPackingSlipTrans</c> table buffers to build the parm data from.
    /// </param>
    /// <returns>
    /// <c>FiscalDocumentParmData_BR</c> built from the given parameters.
    /// </returns>
    public static FiscalDocumentParmData_BR fromPackingSlip(CustPackingSlipJour _custPackingSlipJour,
                                                            SalesParmTable      _salesParmTable,
                                                            DeliverySlipTotals_BR _salesTotals,
                                                            SalesParmUpdate     _salesParmUpdate,
                                                            SalesTable          _salesTable,
                                                            List                _journalLines)
    {
        FiscalDocParmDataCreatorPackingSlip_BR  creator;

        creator = new FiscalDocParmDataCreatorPackingSlip_BR();

        creator.setCustPackingSlipJour(_custPackingSlipJour);
        creator.setSalesParmTable(_salesParmTable);
        creator.setSalesTotals(_salesTotals);
        creator.setSalesParmUpdate(_salesParmUpdate);
        creator.setSalesTable(_salesTable);
        creator.setCustPackingSlipTransList(_journalLines);

        return creator.createParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromProjectInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of <c>FiscalDocParmDataCreatorProjInv_BR</c> class.
    /// </summary>
    /// <param name="_projInvoiceJour">
    ///     The <c>ProjInvoiceJour</c> table buffer to be used in the fiscal document posting.
    /// </param>
    /// <param name="_projProposalTotals">
    ///     The <c>ProjProposalTotals</c> instance that will provide values to be used during the fiscal document posting.
    /// </param>
    /// <param name="_projInvoicetable">
    ///     The <c>ProjInvoiceTable</c> table buffer that will provide values to be used during the fiscal document posting.
    /// </param>
    /// <param name="_projProposalJour">
    ///     The <c>ProjProposalJour</c> table buffer from which values will be retrieved to be used in the fiscal document posting.
    /// </param>
    /// <returns>
    ///     An instance of <c>FiscalDocParmDataCreatorProjInv_BR</c> class with all auxiliary data sources properly set.
    /// </returns>
    public static FiscalDocumentParmData_BR fromProjectInvoice(ProjInvoiceJour      _projInvoiceJour,
                                                               ProjProposalTotals   _projProposalTotals,
                                                               ProjInvoiceTable     _projInvoicetable,
                                                               ProjProposalJour     _projProposalJour)
    {
        FiscalDocParmDataCreatorProjInv_BR  creator;

        creator = new FiscalDocParmDataCreatorProjInv_BR();

        creator.init(_projInvoiceJour, _projProposalTotals, _projInvoicetable, _projProposalJour);

        return creator.createParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromProjectProFormaInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of <c>FiscalDocParmDataCreatorProjInvProFormBR</c> class.
    /// </summary>
    /// <param name="_projInvoiceJour">
    ///     The <c>ProjInvoiceJour</c> table buffer to be used in the fiscal document posting.
    /// </param>
    /// <param name="_projProposalTotals">
    ///     The <c>ProjProposalTotals</c> instance that will provide values to be used during the fiscal document posting.
    /// </param>
    /// <param name="_projInvoicetable">
    ///     The <c>ProjInvoiceTable</c> table buffer that will provide values to be used during the fiscal document posting.
    /// </param>
    /// <param name="_projProposalJour">
    ///     The <c>ProjProposalJour</c> table buffer from which values will be retrieved to be used in the fiscal document posting.
    /// </param>
    /// <param name="_tmpTaxWorkTrans">
    ///     The <c>TmpTaxWorkTrans</c> table buffer to be passed to the created instance.
    /// </param>
    /// <returns>
    ///     An instance of <c>FiscalDocParmDataCreatorProjInvProFormBR</c> class with all auxiliary data sources properly set.
    /// </returns>
    public static FiscalDocumentParmData_BR fromProjectProFormaInvoice(ProjInvoiceJour      _projInvoiceJour,
                                                                       ProjProposalTotals   _projProposalTotals,
                                                                       ProjInvoiceTable     _projInvoicetable,
                                                                       ProjProposalJour     _projProposalJour,
                                                                       TmpTaxWorkTrans      _tmpTaxWorkTrans)
    {
        FiscalDocParmDataCreatorProjInvProFormBR  creator;

        creator = new FiscalDocParmDataCreatorProjInvProFormBR();

        creator.init(_projInvoiceJour, _projProposalTotals, _projInvoicetable, _projProposalJour);
        creator.setTmpTaxWorkTrans(_tmpTaxWorkTrans);

        return creator.createParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromTaxTransferDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>FiscalDocumentParmData</c> object with all the parameters properly filled
    /// for a tax transfer fiscal document.
    /// </summary>
    /// <param name="_taxFiscalDocument">
    /// Tax transfer document that will originate the fiscal document.
    /// </param>
    /// <returns>
    /// <c>FiscalDocumentParmData_BR</c> object filled with vales properly set for
    /// a tax transfer fiscal document.
    /// </returns>
    public static FiscalDocumentParmData_BR fromTaxTransferDocument(TaxFiscalDocument_BR _taxFiscalDocument)
    {
        FiscalDocParmDataCreatorTaxTransfer_BR parmDataCreator = new FiscalDocParmDataCreatorTaxTransfer_BR();
        parmDataCreator.parmTaxFiscalDocument(_taxFiscalDocument);

        return parmDataCreator.createParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromVendInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>FiscalDocumentParmData_BR</c> for a vendor invoice scenario.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// <c>VendInvoiceJour</c> buffer to create the parm data from.
    /// </param>
    /// <param name="_vendInvoiceInfoTable">
    /// <c>VendInvoiceInfoTable</c> buffer to create the parm data from.
    /// </param>
    /// <param name="_purchTotals">
    /// <c>PurchTotals</c> object to create the parm data from.
    /// </param>
    /// <param name="_purchParmUpdate">
    /// <c>PurchParmUpdate</c> buffer to create the parm data from.
    /// </param>
    /// <param name="_purchTable">
    /// <c>PurchTable</c> buffer to create the parm data from.
    /// </param>
    /// <param name="_journalLines">
    /// A <c>RecordSortedList</c> object filled with <c>VendInvoiceTrans</c>
    /// buffers to create the parm data from.
    /// </param>
    /// <returns>
    /// <c>FiscalDocumentParmData_BR</c> built from the given parameters.
    /// </returns>
    public static FiscalDocumentParmData_BR fromVendInvoice(VendInvoiceJour         _vendInvoiceJour,
                                                            VendInvoiceInfoTable    _vendInvoiceInfoTable,
                                                            PurchTotals             _purchTotals,
                                                            PurchParmUpdate         _purchParmUpdate,
                                                            PurchTable              _purchTable,
                                                            RecordSortedList        _journalLines)
    {
        FiscalDocParmDataCreatorVendInvoice_BR creator;

        creator = new FiscalDocParmDataCreatorVendInvoice_BR();

        creator.setVendInvoiceJour(_vendInvoiceJour);
        creator.setVendInvoiceInfoTable(_vendInvoiceInfoTable);
        creator.setPurchTotals(_purchTotals);
        creator.setPurchParmUpdate(_purchParmUpdate);
        creator.setPurchTable(_purchTable);
        creator.setVendInvoiceTransList(_journalLines);

        return creator.createParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromVendProFormaInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>FiscalDocumentParmData_BR</c> for a proforma vendor invoice scenario.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// <c>VendInvoiceJour</c> buffer to create the parm data from.
    /// </param>
    /// <param name="_vendInvoiceInfoTable">
    /// <c>VendInvoiceInfoTable</c> buffer to create the parm data from.
    /// </param>
    /// <param name="_purchTotals">
    /// <c>PurchTotals</c> object to create the parm data from.
    /// </param>
    /// <param name="_purchParmUpdate">
    /// <c>PurchParmUpdate</c> buffer to create the parm data from.
    /// </param>
    /// <param name="_purchTable">
    /// <c>PurchTable</c> buffer to create the parm data from.
    /// </param>
    /// <param name="_journalLines">
    /// A <c>RecordSortedList</c> object filled with <c>VendInvoiceTrans</c>
    /// buffers to create the parm data from.
    /// </param>
    /// <returns>
    /// <c>FiscalDocumentParmData_BR</c> built from the given parameters.
    /// </returns>
    public static FiscalDocumentParmData_BR fromVendProFormaInvoice(VendInvoiceJour         _vendInvoiceJour,
                                                                    VendInvoiceInfoTable    _vendInvoiceInfoTable,
                                                                    PurchTotals             _purchTotals,
                                                                    PurchParmUpdate         _purchParmUpdate,
                                                                    PurchTable              _purchTable,
                                                                    RecordSortedList        _journalLines)
    {
        FiscalDocParmDataCreatorVendProForma_BR creator;

        creator = new FiscalDocParmDataCreatorVendProForma_BR();

        creator.setVendInvoiceJour(_vendInvoiceJour);
        creator.setVendInvoiceInfoTable(_vendInvoiceInfoTable);
        creator.setPurchTotals(_purchTotals);
        creator.setPurchParmUpdate(_purchParmUpdate);
        creator.setPurchTable(_purchTable);
        creator.setVendInvoiceTransList(_journalLines);

        return creator.createParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount of taxes in cost price.
    /// </summary>
    /// <param name="_tableId">
    /// The table id of the record related to the taxes.
    /// </param>
    /// <param name="_recId">
    /// The record id of the record related to the taxes.
    /// </param>
    /// <returns>
    /// The amount of taxes in cost price.
    /// </returns>
    public static TaxAmount getTaxInCostPrice(TableId _tableId, RecId _recId, boolean _isDirectImport = false)
    {
        TaxAmount   taxAmount;
        TaxTrans    taxTrans;
        TaxTable    taxTable;

        while select
            TaxInCostPrice,
            SourceRegulateAmountCur,
            TaxInCostPriceRegulated,
            TaxAutoGenerated
        from taxTrans
        where taxTrans.SourceTableId    == _tableId       &&
                taxTrans.SourceRecId    == _recId         &&
                (taxTrans.TaxDirection  == TaxDirection::IncomingTax ||
                taxTrans.TaxDirection   == TaxDirection::UseTax)
            exists join taxTable
                where taxTable.TaxCode == taxTrans.TaxCode
                    && (_isDirectImport || (taxTable.IncludedTax_BR == false && taxTable.RetainedTax_BR == false))
            {
                if (taxTrans.TaxAutogenerated)
                {
                    taxAmount += taxTrans.TaxInCostPrice;
                }
                else
                {
                    taxAmount += taxTrans.TaxInCostPriceRegulated;
                }
            }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFDPresumedSourceDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of source document for the calculation of presumed taxes.
    /// </summary>
    /// <returns>
    /// <c>FDPresumedSourceDocumentType_BR</c> value.
    /// </returns>
    protected FDPresumedSourceDocumentType_BR getFDPresumedSourceDocumentType()
    {
        return FDPresumedSourceDocumentType_BR::Default;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the fiscal document purpose for the operation being posted
    /// </summary>
    /// <returns>
    /// The purpose of the fiscal document being posted
    /// </returns>
    protected abstract FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromRetailFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a FiscalDocumentParmData object with all the parameters properly filled
    /// for a consumer retail fiscal document (model 65).
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record generated by the Retail statement.
    /// </param>
    /// <param name="_retailFiscalDocumentModel">
    /// The <c>RetailFiscalDocument_BR</c> record being posted.
    /// </param>
    /// <returns>
    /// <c>FiscalDocumentParmData_BR</c> object filled with values properly set for
    /// a retail consumer fiscal document (model 65).
    /// </returns>
    public static FiscalDocumentParmData_BR fromRetailFiscalDocument(CustInvoiceJour _custInvoiceJour,
                                                                     RetailFiscalDocument_BR _retailFiscalDocumentModel)
    {
        FiscalDocParmDataCreatorRetailFDoc_BR parmDataCreator = new FiscalDocParmDataCreatorRetailFDoc_BR(_custInvoiceJour, _retailFiscalDocumentModel);

        return parmDataCreator.createParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromRetailFiscalDocumentWithAggregation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a FiscalDocumentParmData object with all the parameters properly filled
    /// for a consumer retail fiscal document (model 65).
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record generated by the Retail statement.
    /// </param>
    /// <param name="_retailFiscalDocumentModel">
    /// The <c>RetailFiscalDocument_BR</c> record being posted.
    /// </param>
    /// <param name="_aggregateBeforePosting">
    /// Indicates whether to aggregate before posting or not.
    /// </param>
    /// <returns>
    /// <c>FiscalDocumentParmData_BR</c> object filled with values properly set for
    /// a retail consumer fiscal document (model 65).
    /// </returns>
    public static FiscalDocumentParmData_BR fromRetailFiscalDocumentWithAggregation(CustInvoiceJour _custInvoiceJour,
                                                                                    RetailFiscalDocument_BR _retailFiscalDocumentModel,
                                                                                    boolean _aggregateBeforePosting)
    {
        FiscalDocParmDataCreatorRetailFDoc_BR parmDataCreator = FiscalDocParmDataCreatorRetailFDoc_BR::constructWithAggregationParameter(_custInvoiceJour, _retailFiscalDocumentModel, _aggregateBeforePosting);

        return parmDataCreator.createParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToFiscalDocumentFreightTerms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>WMSFreightChargeTerms</c> enum to the <c>FiscalDocumentFreightTerms_BR</c> enum.
    /// </summary>
    /// <param name = "_freightChargeTerms">an enum of type <c>WMSFreightChargeTerms</c></param>
    /// <returns>a <c>FiscalDocumentFreightTerms_BR</c></returns>
    protected static FiscalDocumentFreightTerms_BR convertToFiscalDocumentFreightTerms(WMSFreightChargeTerms _freightChargeTerms)
    {
        FiscalDocumentFreightTerms_BR ret;

        switch (_freightChargeTerms)
        {
            case WMSFreightChargeTerms::Prepaid:
                return FiscalDocumentFreightTerms_BR::Prepaid;
            case WMSFreightChargeTerms::Collect:
                return FiscalDocumentFreightTerms_BR::Collect;
            case WMSFreightChargeTerms::ThirdParty:
                return FiscalDocumentFreightTerms_BR::ThirdParty;
            case WMSFreightChargeTerms::Nofreight:
                return FiscalDocumentFreightTerms_BR::Nofreight;
        }

        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDuplicateAllowedForTaxType</Name>
				<Source><![CDATA[
    private static boolean isDuplicateAllowedForTaxType(TaxType_BR _aggregatedTaxType)
    {
        return _aggregatedTaxType == TaxType_BR::INSS || _aggregatedTaxType == TaxType_BR::OtherTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDuplicateTaxTypeAllowedOnTheLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the taxes of same tax type can be aggregated or not
    /// </summary>
    /// <param name="_taxTransParmData">
    ///     The <c>FiscalDocumentTaxTransParmData_BR</c> object to aggregate
    /// </param>
    /// <param name="_taxTransParmDataToAggregate">
    ///     The <c>FiscalDocumentTaxTransParmData_BR</c> object to be aggregated
    /// </param>
    /// <returns>
    ///     true if taxes can be aggregated; false otherwise.
    /// </returns>
    private static boolean isDuplicateTaxTypeAllowedOnTheLine(FiscalDocumentTaxTransParmData_BR _taxTransParmData, FiscalDocumentTaxTransParmData_BR _taxTransParmDataToAggregate)
    {
        boolean isDuplicateTaxType = _taxTransParmDataToAggregate.parmTaxTransSourceTableId() == _taxTransParmData.parmTaxTransSourceTableId()
                && _taxTransParmDataToAggregate.parmTaxValue() != _taxTransParmData.parmTaxValue();

        return !isDuplicateTaxType || (isDuplicateTaxType && FiscalDocumentParmDataCreator_BR::isDuplicateAllowedForTaxType(_taxTransParmDataToAggregate.parmType()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregateFiscalDocLineTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Aggregates the taxes of the source records
    /// </summary>
    /// <param name="_listOfSourceRecordTaxes">
    ///     A list of <c>FiscalDocumentTaxTransParmData_BR</c> for all fiscla document line source records
    /// </param>
    /// <returns>
    ///     A list of aggregated taxes
    /// </returns>
    static public List aggregateFiscalDocLineTaxes(List _listOfSourceRecordTaxes)
    {
        FiscalDocumentTaxTransParmData_BR   taxTransParmData;
        FiscalDocumentTaxTransParmData_BR   taxTransParmDataToAggregate;
        FiscalDocumentTaxTransParmDataAggregator_BR  aggregator = FiscalDocumentTaxTransParmDataAggregator_BR::construct();
        Map                                 aggregation = new Map(Types::String, Types::Class);
        MapEnumerator                       aggregationEnumerator;
        str                                 key;
        ListEnumerator                      le;
        List                                listOfTaxTransParmData;

        le = _listOfSourceRecordTaxes.getEnumerator();

        while (le.moveNext())
        {
            taxTransParmData = le.current();

            key = aggregator.key(taxTransParmData);

            if (!aggregation.exists(key))
            {
                taxTransParmDataToAggregate = new FiscalDocumentTaxTransParmData_BR();
                aggregator.beginNewAggregation(taxTransParmData, taxTransParmDataToAggregate);

                aggregation.insert(key, taxTransParmDataToAggregate);
            }
            else
            {
                taxTransParmDataToAggregate = aggregation.lookup(key);

                if (!FiscalDocumentParmDataCreator_BR::isDuplicateTaxTypeAllowedOnTheLine(taxTransParmData, taxTransParmDataToAggregate))
                {
                    throw error("@GLS63989");
                }
            }

            aggregator.aggregate(taxTransParmData, taxTransParmDataToAggregate);
        }

        aggregationEnumerator = aggregation.getEnumerator();

        listOfTaxTransParmData = new List(Types::Class);

        while (aggregationEnumerator.moveNext())
        {
            FiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmData = aggregationEnumerator.currentValue();

            fiscalDocumentTaxTransParmData.parmTaxBaseAmount                  (abs(fiscalDocumentTaxTransParmData.parmTaxBaseAmount()));
            fiscalDocumentTaxTransParmData.parmTaxAmount                      (abs(fiscalDocumentTaxTransParmData.parmTaxAmount()));
            fiscalDocumentTaxTransParmData.parmTaxBaseAmountOther             (abs(fiscalDocumentTaxTransParmData.parmTaxBaseAmountOther()));
            fiscalDocumentTaxTransParmData.parmTaxAmountOther                 (abs(fiscalDocumentTaxTransParmData.parmTaxAmountOther()));
            fiscalDocumentTaxTransParmData.parmTaxBaseAmountExempt            (abs(fiscalDocumentTaxTransParmData.parmTaxBaseAmountExempt()));

            fiscalDocumentTaxTransParmData.parmICMSDifIssuerTaxAmount         (abs(fiscalDocumentTaxTransParmData.parmICMSDifIssuerTaxAmount()));
            fiscalDocumentTaxTransParmData.parmICMSDifRecipientTaxAmount      (abs(fiscalDocumentTaxTransParmData.parmICMSDifRecipientTaxAmount()));

            // <GBR>
            if (TaxTable::TaxMustMatchBaseAndPercentage_BR(fiscalDocumentTaxTransParmData.parmType()))
            {
                TaxCode taxCode = TaxTrans::findRecId_IN(fiscalDocumentTaxTransParmData.parmTaxTrans()).TaxCode;
                fiscalDocumentTaxTransParmData.parmTaxBaseAmount(
                    fiscalDocumentTaxTransParmData.parmTaxBaseAmount() + TaxTable::calcPennyDiffFromTaxBasePercentageTaxCode_BR(fiscalDocumentTaxTransParmData.parmTaxBaseAmount(), fiscalDocumentTaxTransParmData.parmTaxValue(), fiscalDocumentTaxTransParmData.parmTaxAmount(), taxCode));

                fiscalDocumentTaxTransParmData.parmTaxBaseAmountOther(
                    fiscalDocumentTaxTransParmData.parmTaxBaseAmountOther() + TaxTable::calcPennyDiffFromTaxBasePercentageTaxCode_BR(fiscalDocumentTaxTransParmData.parmTaxBaseAmountOther(), fiscalDocumentTaxTransParmData.parmTaxValue(), fiscalDocumentTaxTransParmData.parmTaxAmountOther(), taxCode));
            }
            // </GBR>

            listOfTaxTransParmData.addEnd(fiscalDocumentTaxTransParmData);
        }

        return listOfTaxTransParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nfePaymentMethod_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get paymnet method for NF-e.
    /// </summary>
    /// <param name="_custVendInvoiceJour">
    /// The <c>CustVendInvoiceJour</c> map related to fiscal document.
    /// </param>
    /// <param name="_purpose">
    /// The purpose of the fiscal document.
    /// </param>
    /// <returns>
    /// returns paymnet method for NF-e.
    /// </returns>
    public static EFDocPaymentMethod_BR nfePaymentMethod_BR(
        CustVendInvoiceJour _custVendInvoiceJour,
        FiscalDocumentPurpose_BR _purpose = FiscalDocumentPurpose_BR::Regular)
    {
        EFDocPaymentMethod_BR paymentMethod = EFDocPaymentMethod_BR::NoPayment;

        if (_purpose != FiscalDocumentPurpose_BR::Return)
        {
            switch (_custVendInvoiceJour.TableId)
            {
                case tableNum(CustInvoiceJour):
                    CustInvoiceJour custInvoiceJour = _custVendInvoiceJour;
                    CustPaymMode custPaymMode = custInvoiceJour.custTrans().PaymMode;
                    
                    if (custPaymMode)
                    {
                        paymentMethod = CustPaymModeTable::find(custPaymMode).PaymentMethod_BR;
                    }

                    break;
                case tableNum(VendInvoiceJour):
                    VendInvoiceJour vendInvoiceJour = _custVendInvoiceJour;
                    VendPaymMode vendPaymMode = vendInvoiceJour.purchTable().PaymMode;
                    
                    if (vendPaymMode)
                    {
                        paymentMethod = VendPaymModeTable::find(vendPaymMode).PaymentMethod_BR;
                    }

                    break;
                default:
                    break;
            }
        }

        return paymentMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAddTaxInNotIncludedAmount</Name>
				<Source><![CDATA[
    private boolean shouldAddTaxInNotIncludedAmount(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentTaxTransParmData_BR _tax, boolean _isFiscalDocFromPurch)
    {
        boolean ret = false;

        if (this.isFiscalDocumentNotOutgoing(_fiscalDocumentParmData)
                && (!this.isICMSST60FiscalValue3OnTax(_tax)
                    || (!_isFiscalDocFromPurch && !ICMSST60TaxCalculationSOFeature::isEnabled())
                    || (this.isICMSST60FiscalValue3OnTax(_tax) && _isFiscalDocFromPurch
                        && EFDocIncludeICMSTST60FV3OnPurchInvoice_BRFlight::instance().isEnabled())))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFiscalDocumentFromPurchInvoice</Name>
				<Source><![CDATA[
    private boolean isFiscalDocumentFromPurchInvoice(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {

        RefTableId fiscalDocRefTableId = _fiscalDocumentParmData.parmRefTableId();
        RefRecId fiscalDocRefRecId = _fiscalDocumentParmData.parmRefRecId();

        return EFiscalDocument_BR::isFiscalDocFromPurchOrder(fiscalDocRefTableId, fiscalDocRefRecId);  
    }

]]></Source>
			</Method>
			<Method>
				<Name>isICMSST60FiscalValue3OnTax</Name>
				<Source><![CDATA[
    private boolean isICMSST60FiscalValue3OnTax(FiscalDocumentTaxTransParmData_BR _tax)
    {
        return FiscalDocumentTaxTrans_BR::isTaxTypeICMSST60FiscalValue3(_tax.parmType(), _tax.parmFiscalValue(), _tax.parmTaxationCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFiscalDocumentNotOutgoing</Name>
				<Source><![CDATA[
    private boolean isFiscalDocumentNotOutgoing(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        return _fiscalDocumentParmData.parmDirection() != FiscalDocDirection_BR::Outgoing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeInTotalTaxAmount</Name>
				<Source><![CDATA[
    private boolean includeInTotalTaxAmount(boolean _isICMSST60FiscalValue3Tax, boolean _isFiscalDocFromPurchInvoice)
    {
        boolean ret = false;

        if ((_isICMSST60FiscalValue3Tax
                && ((_isFiscalDocFromPurchInvoice && EFDocIncludeICMSTST60FV3OnPurchInvoice_BRFlight::instance().isEnabled())
                    || (!_isFiscalDocFromPurchInvoice && !ICMSST60TaxCalculationSOFeature::isEnabled())))
            || (!_isICMSST60FiscalValue3Tax))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>