<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceDPBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjInvoiceDPBase extends SrsReportDataProviderPreProcess
{
    protected ProjInvoiceJour             projInvoiceJour;
    protected ProjInvoiceTmp              projInvoiceTmp;
    protected CompanyInfo                 companyInfo;

    protected PaymentStub                 giroType;
    protected PaymMoneyTransferSlip       moneyTransferSlip;
    protected PaymMoneyTransferSlip_BE    moneyTransferSlip_BE;
    protected PaymMoneyTransferSlip_CH    moneyTransferSlip_CH;
    protected PaymMoneyTransferSlip_FI    moneyTransferSlip_FI;

    protected str                         giroSection;

    const str Blank = '';
    const str GiroFinnish = 'giro_Finnish';
    const str GiroFIK75x = 'giro_FIK75x';
    const str GiroCHRed = 'giro_CH_red';
    const str GiroCHOrange = 'giro_CH_orange';
    const str GiroBBS = 'giro_BBS';
    const str Zero = '0';
    const str XX = 'XX';
    const str XXXXXXXX = 'XXXXXXXX';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountDecimals_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the decimal part of the amount.
    /// </summary>
    /// <returns>
    /// The 'XX' string if no currency is in the projInvoiceJour or the decimal part of the invoice amount.
    /// </returns>
    protected str amountDecimals_CH()
    {
        if (!moneyTransferSlip_CH.checkCurrency() || projInvoiceJour.remainAmountToBePaid() < 0)
        {
            return XX;
        }
        else
        {
            return projInvoiceJour.CashDisc ? Blank : moneyTransferSlip_CH.invoiceAmountPenny();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountNoDecimals_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the integer part of the amount.
    /// </summary>
    /// <returns>
    /// The 'XXXXXXXX' string if no currency is in the projInvoiceJour or the integer part of the invoice amount.
    /// </returns>
    protected str amountNoDecimals_CH()
    {
        if (!moneyTransferSlip_CH.checkCurrency() || projInvoiceJour.remainAmountToBePaid() < 0)
        {
            return XXXXXXXX;
        }
        else
        {
            return projInvoiceJour.CashDisc ? Blank : moneyTransferSlip_CH.invoiceAmountMST();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiCreditorId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value for the <c>fiCreditorId</c> field.
    /// </summary>
    /// <returns>
    /// The string value for the <c>fiCreditorId</c> field.
    /// </returns>
    protected str fiCreditorId()
    {
        CompanyInfoHelper::checkFICreditorIDEmpty(CompanyInfo::find().fiCreditorID_DK);
        return CompanyInfo::find().fiCreditorID_DK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGiro</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Giro, which is used to be display the page footer.
    /// </summary>
    protected void initGiro()
    {
        switch (giroType)
        {
            case PaymentStub::Finnish:
                moneyTransferSlip_FI = new PaymMoneyTransferSlip_FI();
                moneyTransferSlip_FI.initOCRLine_FI();
                moneyTransferSlip = moneyTransferSlip_FI;
                giroSection = GiroFinnish;
                break;
            case PaymentStub::FIK751:
                moneyTransferSlip = PaymMoneyTransferSlip::construct(PaymentStub::FIK751);
                moneyTransferSlip.init(PaymentStub::FIK751);
                giroSection = GiroFIK75x;
                break;
            case PaymentStub::FIK752:
                moneyTransferSlip = PaymMoneyTransferSlip::construct(PaymentStub::FIK752);
                moneyTransferSlip.init(PaymentStub::FIK752);
                giroSection = GiroFIK75x;
                break;
            case PaymentStub::ESR_red_bank:
                moneyTransferSlip_CH = new PaymMoneyTransferSlip_CH();
                moneyTransferSlip_CH.initOCRLineProjInvoice_CH(projInvoiceJour);
                moneyTransferSlip = moneyTransferSlip_CH;
                moneyTransferSlip.init(PaymentStub::ESR_red_bank);
                giroSection = GiroCHRed;
                break;
            case PaymentStub::ESR_orange:
                moneyTransferSlip_CH = new PaymMoneyTransferSlip_CH();
                moneyTransferSlip_CH.initOCRLineProjInvoice_CH(projInvoiceJour);
                moneyTransferSlip = moneyTransferSlip_CH;
                moneyTransferSlip.init(PaymentStub::ESR_orange);
                giroSection = GiroCHOrange;
                break;
            case PaymentStub::BBS:
                moneyTransferSlip = PaymMoneyTransferSlip::construct(PaymentStub::BBS);
                moneyTransferSlip.init(PaymentStub::BBS);
                giroSection = GiroBBS;
                break;
            case PaymentStub::BelSMS101:
            case PaymentStub::BelSMS102:
                moneyTransferSlip_BE = new PaymMoneyTransferSlip_BE();
                moneyTransferSlip_BE.init(giroType);
                break;
            default:
                giroSection = Blank;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatesTempTableForPaymentSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temporary <c>projInvoiceTmp</c> table with the data in the <c>PaymentSlip</c> table.
    /// </summary>
    protected void populatesTempTableForPaymentSlip()
    {
        const str DKK = 'DKK';
        const str EUR = 'EUR';
        const str CHF = 'CHF';
        const str Space = ' ';

        switch (giroType)
        {
            case PaymentStub::FIK751:
            case PaymentStub::FIK752:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceDK00007, funcName());

                projInvoiceTmp.PaymentId = moneyTransferSlip.paymentId(projInvoiceJour.InvoiceAccount, projInvoiceJour.ProjInvoiceId,
                                                                 strLen(int2str(NumberSeq::highest(SalesParameters::numRefInvoiceId().NumberSequenceId))));
                projInvoiceTmp.CompanyCoRegNum = CompanyInfo::find().CoRegNum;
                projInvoiceTmp.InvoiceAmountDecimals = this.invoiceAmountDecimals();
                projInvoiceTmp.InvoiceAmountNoDecimals = this.invoiceAmountNoDecimals();
                projInvoiceTmp.ocrField = moneyTransferSlip.ocrField(projInvoiceJour.InvoiceAccount, projInvoiceJour.ProjInvoiceId,
                                                                     strLen(int2str(NumberSeq::highest(SalesParameters::numRefInvoiceId().NumberSequenceId))));
                projInvoiceTmp.FiCreditorId = this.fiCreditorId();
                projInvoiceTmp.GiroType = giroType;
                if (giroType == PaymentStub::FIK752 && projInvoiceJour.CurrencyId != DKK)
                {
                    projInvoiceTmp.InfoMessage = "@SYS314488";
                    giroType = PaymentStub::FIK751;
                    projInvoiceTmp.GiroType = PaymentStub::FIK751;
                    info("@SYS343346");
                }
                break;
            case PaymentStub::BBS:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00004, funcName());

                projInvoiceTmp.ocrField = moneyTransferSlip.ocrField(projInvoiceJour.InvoiceAccount, projInvoiceJour.ProjInvoiceId,
                                                                     strLen(int2str(NumberSeq::highest(SalesParameters::numRefInvoiceId().NumberSequenceId))));
                projInvoiceTmp.InvoiceAmountDecimals = this.invoiceAmountDecimals();
                projInvoiceTmp.InvoiceAmountNoDecimals = this.invoiceAmountNoDecimals();
                projInvoiceTmp.AmountCheckId = moneyTransferSlip.amountCheckId(projInvoiceJour.remainAmountToBePaid());
                break;
            case PaymentStub::ESR_red_bank:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCH00007, funcName());

                projInvoiceTmp.BankGroupIdName_CH1 = BankAccountTable::find(projInvoiceJour.paymentBankAccountId()).Name;
                projInvoiceTmp.Description_CH = "@SYS12128";
                projInvoiceTmp.PaymentRef1_CH = moneyTransferSlip_CH.ocr_paymentRef1();
                projInvoiceTmp.PaymentRef2_CH = moneyTransferSlip_CH.ocr_paymentRef2();
                projInvoiceTmp.BankAccountTable_AccountNum_CH = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                                                                        moneyTransferSlip.bankAccountNum() : "@AccountsReceivable:FiveAsterisk";
                projInvoiceTmp.BankAccountTable_Clearing_CH = moneyTransferSlip.bankAccountTable().BankClearingCode;
                projInvoiceTmp.InvoiceAmountNoDecimals = this.amountNoDecimals_CH();
                projInvoiceTmp.InvoiceAmountDecimals = this.amountDecimals_CH();
                projInvoiceTmp.PaymentId2_PaymentId3_CH = moneyTransferSlip_CH.ocr_PaymentId2() + Space + moneyTransferSlip_CH.ocr_PaymentId3();
                projInvoiceTmp.CustAddress_CH = CustTable::find(projInvoiceJour.InvoiceAccount).address();
                projInvoiceTmp.LayoutCode_CH = moneyTransferSlip_CH.layoutCode();
                projInvoiceTmp.ocrLine_CH = moneyTransferSlip_CH.ocrLine();
                break;
            case PaymentStub::ESR_orange:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCH00008, funcName());

                projInvoiceTmp.InvoiceAmountNoDecimals = this.amountNoDecimals_CH();
                projInvoiceTmp.InvoiceAmountDecimals = this.amountDecimals_CH();
                projInvoiceTmp.CurrencyCodeISO = moneyTransferSlip_CH.parmIsEUR() ? EUR : (moneyTransferSlip_CH.parmIsCHF() ? CHF :  Blank);
                projInvoiceTmp.AccountNo1 = moneyTransferSlip_CH.ocr_AccountNo1();
                projInvoiceTmp.PaymentId2_PaymentId3_CH = moneyTransferSlip_CH.ocr_PaymentId2() + Space + moneyTransferSlip_CH.ocr_PaymentId3();
                projInvoiceTmp.CustName_CH = CustTable::find(projInvoiceJour.InvoiceAccount).name();
                projInvoiceTmp.CustAddress_CH = CustTable::find(projInvoiceJour.InvoiceAccount).address();
                projInvoiceTmp.LayoutCode_CH = moneyTransferSlip_CH.layoutCode();
                projInvoiceTmp.ocrLine_CH = moneyTransferSlip_CH.ocrLine();
                break;
            case PaymentStub::Finnish:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFI00002, funcName());

                if (hasTableAccess(tableNum(BankAccountTable), AccessType::View))
                {
                    projInvoiceTmp.AccountNum1_FI = moneyTransferSlip_FI.ocr_AccountNum1();
                    projInvoiceTmp.AccountNum2_FI = moneyTransferSlip_FI.ocr_AccountNum2();
                    projInvoiceTmp.AccountNum3_FI = moneyTransferSlip_FI.ocr_AccountNum3();
                    projInvoiceTmp.AccountNum4_FI = moneyTransferSlip_FI.ocr_AccountNum4();
                    projInvoiceTmp.AccountNum5_FI = moneyTransferSlip_FI.ocr_AccountNum5();
                    projInvoiceTmp.AccountNum6_FI = moneyTransferSlip_FI.ocr_AccountNum6();
                }
                else
                {
                    projInvoiceTmp.AccountNum1_FI = Blank;
                    projInvoiceTmp.AccountNum2_FI = Blank;
                    projInvoiceTmp.AccountNum3_FI = Blank;
                    projInvoiceTmp.AccountNum4_FI = Blank;
                    projInvoiceTmp.AccountNum5_FI = Blank;
                    projInvoiceTmp.AccountNum6_FI = Blank;
                }
                projInvoiceTmp.ReferenceNumber_FI = CustParameters::find().CustInvoiceRefNum_FI ? projInvoiceJour.invoiceReferenceNumberFI() : Blank;
                projInvoiceTmp.InvoiceReferenceNumberFI = CustParameters::find().CustInvoiceRefNum_FI ? projInvoiceJour.invoiceReferenceNumberFI() : Blank;
                projInvoiceTmp.ocrLine_FI = moneyTransferSlip_FI.ocrLine(projInvoiceJour.ProjInvoiceId,
                                                                 projInvoiceJour.InvoiceAmount, projInvoiceJour.DueDate);
                break;
            case PaymentStub::BelSMS101:
            case PaymentStub::BelSMS102:
                projInvoiceTmp.PaymentId = moneyTransferSlip_BE.initProjInvoicePaymId(projInvoiceJour);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTableForPaymentSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temporary <c>projInvoiceTmp</c> table with the data in the <c>PaymentSlip</c> table.
    /// </summary>
    protected void initTempTableForPaymentSlip()
    {
        giroType = projInvoiceJour.GiroType;
        this.initGiro();

        projInvoiceTmp.InfoMessage  = '';
        projInvoiceTmp.giroType     = giroType;
        projInvoiceTmp.giroSection  = giroSection;

        this.initTempTableFromProjInvoiceJour();

        if (giroType != PaymentStub::None)
        {
            this.populatesTempTableForPaymentSlip();

            this.populateGiroReportTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateGiroReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the temporary <c>GiroReportTmp</c> table.
    /// </summary>
    protected void populateGiroReportTmp()
    {
        // GIRO: Remove this block of code when GIRO no longer prints as a separate report
        if (GiroReportController::needGiroReport(projInvoiceTmp.GiroType))
        {
            GiroReportTmp::populate(this.parmUserConnection(), projInvoiceTmp);
            projInvoiceTmp.GiroType = PaymentStub::None;
            projInvoiceTmp.GiroSection = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTableFromProjInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temporary <c>projInvoiceTmp</c> table from the data in the <c>ProjInvoiceJour</c>
    /// table.
    /// </summary>
    protected void initTempTableFromProjInvoiceJour()
    {
        projInvoiceTmp.InvoiceNum               = projInvoiceJour.ProjInvoiceId;
        projInvoiceTmp.InvoiceAmount            = projInvoiceJour.InvoiceAmount;
        projInvoiceTmp.InvoiceAccount           = projInvoiceJour.InvoiceAccount;
        projInvoiceTmp.InvoiceName              = CustTable::find(projInvoiceJour.InvoiceAccount).name();
        projInvoiceTmp.InvoiceAccountAddress    = CustTable::find(projInvoiceJour.InvoiceAccount).postalAddress().Address;
        projInvoiceTmp.InvoiceDate              = projInvoiceJour.InvoiceDate;
        projInvoiceTmp.DueDate                  = projInvoiceJour.DueDate;

        projInvoiceTmp.vatNum                   = projInvoiceJour.vatNum;
        projInvoiceTmp.SalesOrdernum            = projInvoiceJour.ProjInvoiceProjId;
        projInvoiceTmp.PaymentCondition         = projInvoiceJour.paymentCondition();
        projInvoiceTmp.CustAccountExt           = projInvoiceJour.ourAccountNum();
        projInvoiceTmp.EnterpriseNumber         = projInvoiceJour.EnterpriseNumber;
        projInvoiceTmp.npiBankingPaymId         = projInvoiceJour.PaymId;
        projInvoiceTmp.smaSpecIndexCalc         = projInvoiceJour.smaSpecIndexCalc;

        projInvoiceTmp.SalesBalance             = projInvoiceJour.SalesOrderbalance;
        projInvoiceTmp.EndDisc                  = projInvoiceJour.EndDisc;
        projInvoiceTmp.CashDisc                 = projInvoiceJour.CashDisc;
        projInvoiceTmp.SumMarkup                = projInvoiceJour.SumMarkup;
        projInvoiceTmp.SumTax                   = projInvoiceJour.SumTax;
        projInvoiceTmp.InvoiceRoundOff          = projInvoiceJour.InvoiceRoundOff;
        projInvoiceTmp.CurrencyCode             = projInvoiceJour.CurrencyId;

        projInvoiceTmp.NetAmount                = projInvoiceJour.netAmount();
        projInvoiceTmp.CashDiscTxt              = projInvoiceJour.cashDiscTxtOnInvoice();
        projInvoiceTmp.PrepaidInvoiceAmount     = projInvoiceJour.InvoiceAmount;
        projInvoiceTmp.PrepaidAmount            = projInvoiceJour.prepaidAmount();
        projInvoiceTmp.RemainAmountToBePaid     = projInvoiceJour.remainAmountToBePaid();
        projInvoiceTmp.PrepaidCurrencyCode      = projInvoiceJour.CurrencyId;

        projInvoiceTmp.ProjInvoiceJourDueDate   = projInvoiceJour.DueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTableFromCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temporary <c>projInvoiceTmp</c> table from the data in the <c>CompanyInfo</c>
    /// table.
    /// </summary>
    protected void initTempTableFromCompanyInfo()
    {
        companyInfo = CompanyInfo::find();
        projInvoiceTmp.CompanyGiro              = companyInfo.Giro;
        projInvoiceTmp.CompanyName              = companyInfo.name();
        projInvoiceTmp.CompanyAddress           = companyInfo.postalAddress().Address;
        projInvoiceTmp.CompanyPhone             = companyInfo.phone();
        projInvoiceTmp.CompanyTeleFax           = companyInfo.teleFax();
        projInvoiceTmp.CompanyCoRegNum          = companyInfo.CoRegNum;

        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForJournalV3(projInvoiceJour.TableId, projInvoiceJour.RecId))
        {
            projInvoiceTmp.CompanyVATNum = TaxTransactionTaxIDHelper::getTaxID(
                projInvoiceJour.TableId,
                projInvoiceJour.RecId,
                projInvoiceJour.InvoiceDate).getLegalEntityTaxID();
        }
        else
        {
            projInvoiceTmp.CompanyVATNum = companyInfo.getPrimaryRegistrationNumber(
                TaxRegistrationTypesList::TAXID,
                projInvoiceJour.InvoiceDate);
        }
        projInvoiceTmp.CompanyEnterpriseNumber  = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, projInvoiceJour.InvoiceDate);
        projInvoiceTmp.CompanyDebitDirectId     = BankAccountTable::findByCompany(companyInfo.DataArea, companyInfo.Bank).DebitDirectId;
        projInvoiceTmp.CompanyLogo              = FormLetter::companyLogo();
        projInvoiceTmp.PrintLogo                = (conLen(projInvoiceTmp.CompanyLogo) > 0 ? NoYes::Yes : NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountDecimals</Name>
				<Source><![CDATA[
    protected str invoiceAmountDecimals()
    {
        AmountCur remainAmountToBePaid = projInvoiceJour.remainAmountToBePaid();
        str ret;
        if (remainAmountToBePaid >= 0)
        {
            ret = System.String::Format('{0:00}', frac(abs(remainAmountToBePaid))*100);
        }
        else
        {
            ret = XX;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountNoDecimals</Name>
				<Source><![CDATA[
    protected str invoiceAmountNoDecimals()
    {
        AmountCur   remainAmountToBePaid = projInvoiceJour.remainAmountToBePaid();
        str         ret;
        const str   XXXXXX = 'XXXXXX';

        if (remainAmountToBePaid >= 0)
        {
            ret = System.String::Format('{0:#}', trunc(abs(remainAmountToBePaid)));
        }
        else
        {
            ret = XXXXXX;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTxtNote_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes the note text for the project invoice, linked project invoice adjustment,
    /// and the type of the report (original or copy) being printed.
    /// </summary>
    /// <param name = "_projInvoiceJour">A project invoice table record.</param>
    /// <param name = "_projInvoiceJourAdjustment">A project invoice adjustment table record.</param>
    /// <param name = "_printCopyOriginal">A <c>PrintCopyOriginal</c> parameter which represents the original invoice, or a copy.</param>
    /// <returns></returns>
    public static str invoiceTxtNote_TH(ProjInvoiceJour _projInvoiceJour, ProjInvoiceJourAdjustment_TH _projInvoiceJourAdjustment, PrintCopyOriginal _printCopyOriginal)
    {
        str invoiceTxtNote;
        LanguageId languageId = _projInvoiceJour.LanguageId ? _projInvoiceJour.LanguageId : infolog.language();

        if (_projInvoiceJourAdjustment.AdjustmentType == CustInvoiceJourAdjustmentType_TH::Substitution)
        {
            if (_printCopyOriginal == PrintCopyOriginal::Copy)
            {
                invoiceTxtNote = SysLabel::labelId2String(literalStr("@AccountsReceivable:SubstitutionInvoices_SubstitutionCopy"), languageId);
            }
            else
            {
                invoiceTxtNote = SysLabel::labelId2String(literalStr("@AccountsReceivable:SubstitutionInvoices_Substitution"), languageId);
            }
        }
        else if (_projInvoiceJourAdjustment.AdjustmentType == CustInvoiceJourAdjustmentType_TH::Adjustment)
        {
            if (_printCopyOriginal == PrintCopyOriginal::Copy)
            {
                invoiceTxtNote = SysLabel::labelId2String(literalStr("@AccountsReceivable:SubstitutionInvoices_AdjustmentCopy"), languageId);
            }
            else
            {
                invoiceTxtNote = SysLabel::labelId2String(literalStr("@AccountsReceivable:SubstitutionInvoices_Original"), languageId);
            }
        }
        else if (_printCopyOriginal == PrintCopyOriginal::Copy)
        {
            invoiceTxtNote = SysLabel::labelId2String(literalStr("@SYS6896"), languageId);
        }
        else
        {
            invoiceTxtNote = SysLabel::labelId2String(literalStr("@AccountsReceivable:SubstitutionInvoices_Original"), languageId);
        }

        return invoiceTxtNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGiroSection</Name>
				<Source><![CDATA[
    public str parmGiroSection(str _giroSection = giroSection)
    {
        giroSection = _giroSection;
        return giroSection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGiroType</Name>
				<Source><![CDATA[
    public PaymentStub parmGiroType(PaymentStub _giroType = giroType)
    {
        giroType = _giroType;
        return giroType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceJour</Name>
				<Source><![CDATA[
    public ProjInvoiceJour parmProjInvoiceJour(ProjInvoiceJour _projInvoiceJour = projInvoiceJour)
    {
        projInvoiceJour = _projInvoiceJour;
        return projInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceTmp</Name>
				<Source><![CDATA[
    public ProjInvoiceTmp parmProjInvoiceTmp(ProjInvoiceTmp _projInvoiceTmp = projInvoiceTmp)
    {
        projInvoiceTmp = _projInvoiceTmp;
        return projInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMoneyTransferSlip_CH</Name>
				<Source><![CDATA[
    public PaymMoneyTransferSlip_CH parmMoneyTransferSlip_CH(PaymMoneyTransferSlip_CH   _moneyTransferSlip_CH = moneyTransferSlip_CH)
    {
        moneyTransferSlip_CH = _moneyTransferSlip_CH;
        return moneyTransferSlip_CH;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>