<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventReport_Age</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventReport_Age
{
    // Packed variables
    TransDate               perDate;
    NoYes                   showZeroLines;
    ValueQty                valueQty;
    InventOnhandDate        dates;

    DialogField             dialogDate;
    DialogField             dialogShowZero;
    DialogField             dialogValueQty;
    DialogField             dialogDates;
    DialogRunbase           dialog;

    TmpInventAge            tmpInventAge;
    InventDimParm           inventDimParm;

    Map                     mapPeriodCostPrice;     //[ numDate(fromDate), costPrice]
    Map                     mapPeriodCostPriceDesc; //[-numDate(fromDate), costPrice]

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        PerDate,
        ShowZeroLines,
        ValueQty,
        Dates
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    void calc(
        ItemId                  _itemId,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParm)
    {
        InventModelTypeCache    inventModelTypeCache = InventModelTypeCache::construct();

        boolean                 foundAny = false;

        InventTable inventTable = InventTable::find(_itemId);

        if (inventModelTypeCache.inventModelType(inventTable.modelGroupId()).isSettled())
        {
            this.calcSettledTransactions(inventTable,_inventDimCriteria,_inventDimParm);
        }
        else
        {
            this.calcNotSettledTransactions(inventTable,_inventDimCriteria,_inventDimParm);
        }

        switch (valueQty)
        {
            case ValueQty::Value:
                foundAny = (tmpInventAge.Value1 != 0) ||
                           (tmpInventAge.Value2 != 0) ||
                           (tmpInventAge.Value3 != 0) ||
                           (tmpInventAge.Value4 != 0) ||
                           (tmpInventAge.Value5 != 0);
                break;
            case ValueQty::Qty:
                foundAny = (tmpInventAge.Qty1 != 0) ||
                           (tmpInventAge.Qty2 != 0) ||
                           (tmpInventAge.Qty3 != 0) ||
                           (tmpInventAge.Qty4 != 0) ||
                           (tmpInventAge.Qty5 != 0);
                break;
        }

        if (foundAny || showZeroLines)
            tmpInventAge.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInventTransFIFO</Name>
				<Source><![CDATA[
    protected void calcInventTransFIFO(
        InventTable         _inventTable,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParm,
        TransDate           _perDate,
        InventQty           _qtyOnhand)
    {
        InventTrans         inventTrans;
        InventTrans         inventTransRef;
        InventDim           inventDim;
        InventDim           inventDimRef;

        real                qtyRatio;

        if (_qtyOnhand < 0)
        {
            return;
        }

        InventQty qtyLeft = _qtyOnhand;

        // find receipts according to qtyOnhand
        while select sum(Qty) from inventTrans
            group by DateStatus desc, InventTransOrigin, Voucher
            where inventTrans.ItemId                        == _inventTable.ItemId
               && inventTrans.DateStatus                    <= _perDate
               && inventTrans.StatusReceipt                 == StatusReceipt::Purchased
               && inventTrans.StatusIssue                   == StatusIssue::None
            #inventDimExistsJoin(inventTrans.InventDimId,inventDim,_inventDimCriteria,_inventDimParm)
                notexists join inventTransRef                                               // exclude internal transfers.
                where inventTransRef.InventTransOrigin      == inventTrans.InventTransOrigin
                   && inventTransRef.StatusIssue            == StatusIssue::Sold
                   && inventTransRef.StatusReceipt          == StatusReceipt::None
                #inventDimExistsJoin(inventTransRef.InventDimId,inventDimRef,_inventDimCriteria,_inventDimParm)
        {
            if (qtyLeft <=0)
            {
                break;
            }

            if (inventTrans.Qty > qtyLeft && inventTrans.Qty )
            {
                qtyRatio = qtyLeft / inventTrans.Qty;
            }
            else
            {
                qtyRatio = 1;
            }
            this.tmpInventAgeAddQty(inventTrans.DateStatus,inventTrans.Qty * qtyRatio);

            qtyLeft -= inventTrans.Qty * qtyRatio;
        }

        if (valueQty == ValueQty::Value)
        {
            this.calcValueFIFO(_inventTable, _inventDimCriteria, _inventDimParm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNotSettledTransactions</Name>
				<Source><![CDATA[
    protected void calcNotSettledTransactions(
        InventTable             _inventTable,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParm)
    {
        InventSumDateDim        inventSumDateDim;
        InventDimCombination    inventDimCombination;

        InventDimParm           inventDimParmTmp;

        this.initTmpInventAge(_inventTable,_inventDimCriteria);

        if (_inventTable.ItemDimCostPrice && ! _inventDimCriteria)  // not having a _inventDimCriteria -> the item group aging report.
        {
            while select inventDimCombination
                where inventDimCombination.ItemId == _inventTable.ItemId
            {
                InventDim inventDimCriteria = inventDimCombination.inventDim();
                inventDimParmTmp.initFromInventDim(inventDimCriteria);

                inventSumDateDim = InventSumDateDim::newParameters(perDate,_inventTable.ItemId,inventDimCriteria,inventDimParmTmp);
                this.calcInventTransFIFO(_inventTable,inventDimCriteria,inventDimParmTmp,perDate,inventSumDateDim.postedQty());
            }
        }
        else
        {
            inventSumDateDim = InventSumDateDim::newParameters(perDate,_inventTable.ItemId,_inventDimCriteria,_inventDimParm);
            this.calcInventTransFIFO(_inventTable,_inventDimCriteria,_inventDimParm,perDate,inventSumDateDim.postedQty());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSettledTransactions</Name>
				<Source><![CDATA[
    protected void calcSettledTransactions(
        InventTable         _inventTable,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParm)
    {
        int                         transNo;
        InventTrans                 inventTrans;

        this.initTmpInventAge(_inventTable,_inventDimCriteria);

        InventSumOpenTransact inventSumOpenTransact = new InventSumOpenTransact(
            perDate,
            _inventTable.ItemId,
            _inventDimCriteria,
            _inventDimParm);

        for (transNo = 1; transNo <= inventSumOpenTransact.transMax(); transNo++)
        {
            select DateFinancial from inventTrans
                where inventTrans.RecId == inventSumOpenTransact.transRecId(transNo);

            if (valueQty == ValueQty::Qty)
            {
                this.tmpInventAgeAddQty(inventTrans.DateFinancial,inventSumOpenTransact.transQty(transNo));
            }
            else if (valueQty == ValueQty::Value)
            {
                this.tmpInventAgeAddValue(inventTrans.DateFinancial,inventSumOpenTransact.transValue(transNo));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcValueFIFO</Name>
				<Source><![CDATA[
    protected void calcValueFIFO(
        InventTable         _inventTable,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParm
        )
    {
        this.initMapPeriodCostPrice(_inventTable, _inventDimCriteria, _inventDimParm);

        this.calcValueFIFOQty(tmpInventAge.Qty1,dates[1]-1);
        this.calcValueFIFOQty(tmpInventAge.Qty2,dates[2]-1);
        this.calcValueFIFOQty(tmpInventAge.Qty3,dates[3]-1);
        this.calcValueFIFOQty(tmpInventAge.Qty4,dates[4]-1);
        this.calcValueFIFOQty(tmpInventAge.Qty5,perDate);

        tmpInventAge.Qty1 = 0;
        tmpInventAge.Qty2 = 0;
        tmpInventAge.Qty3 = 0;
        tmpInventAge.Qty4 = 0;
        tmpInventAge.Qty5 = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcValueFIFOQty</Name>
				<Source><![CDATA[
    protected void calcValueFIFOQty(
        InventQty   _qty,
        TransDate   _transDate)
    {
        CostAmount costPcsPrice = this.findStdCostPrice(_transDate);
        this.tmpInventAgeAddValue(_transDate,_qty * costPcsPrice);  //

        MapEnumerator meCostPrice = mapPeriodCostPrice.getEnumerator();

        while (meCostPrice.moveNext())  // in increasing date order
        {
            if (abs(meCostPrice.currentKey()) > date2num(_transDate))
            {
                this.tmpInventAgeAddValue(num2date(meCostPrice.currentKey()),_qty * (meCostPrice.currentValue() - costPcsPrice));
                costPcsPrice = meCostPrice.currentValue();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(Dialog  _dialog = dialog)
    {
        dialog          = _dialog;

        dialogDate      = dialog.addFieldValue(extendedTypeStr(DateOnhand), perDate, "@SYS7902");
        dialogDates     = dialog.addFieldValue(extendedTypeStr(InventOnhandDate), dates);
        dialogValueQty  = dialog.addFieldValue(enumStr(ValueQty), valueQty, "@SYS14861", "@SYS28393");
        dialogShowZero  = dialog.addFieldValue(extendedTypeStr(ShowZeroLines), showZeroLines, "@SYS4978");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLevel</Name>
				<Source><![CDATA[
    protected Integer findLevel(TransDate transDate)
    {
        if (transDate < dates[1])
            return 1;

        if (transDate < dates[2])
            return 2;

        if (transDate < dates[3])
            return 3;

        if (transDate < dates[4])
            return 4;

        return 5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStdCostPrice</Name>
				<Source><![CDATA[
    protected CostAmount findStdCostPrice(TransDate       _transDate)
    {
        CostAmount      lastCostAmount;

        MapEnumerator me = mapPeriodCostPriceDesc.getEnumerator();

        while (me.moveNext())  // in decreasing order
        {
            if (abs(me.currentKey()) <= date2num(_transDate))
            {
                return me.currentValue();
            }

            lastCostAmount = me.currentValue();
        }

        return lastCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        perDate        = dialogDate.value();
        showZeroLines  = dialogShowZero.value();
        valueQty       = dialogValueQty.value();
        dates          = dialogDates.value();
        this.sortDates();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapPeriodCostPrice</Name>
				<Source><![CDATA[
    protected void initMapPeriodCostPrice(
        InventTable     _inventTable,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm
        )
    {
        InventItemPrice inventItemPrice;
        InventDim       inventDim;
        TransDate       previousActivationDate;

        mapPeriodCostPrice      = new Map(Types::Integer,Types::Real);
        mapPeriodCostPriceDesc  = new Map(Types::Integer,Types::Real);

        InventDimParm   inventDimParmTmp;

        if (_inventTable.ItemDimCostPrice
            && _inventDimParm.anyProductDimensionFlagSet())
        {
            inventDimParmTmp.initFromInventDimParm(_inventDimParm);
            inventDimParmTmp.clearStorageDimensions();
            inventDimParmTmp.clearTrackingDimensions();
        }

        inventDimParmTmp.InventSiteIdFlag = _inventDimParm.InventSiteIdFlag;

        while select inventItemPrice
            order by ActivationDate desc, CreatedDateTime desc
            where inventItemPrice.ItemId == _inventTable.ItemId
               && inventItemPrice.PriceType == CostingVersionPriceType::Cost
            #InventDimExistsJoin(inventItemPrice.inventDimId, inventDim, _inventDimCriteria, inventDimParmTmp)
        {
            if (inventItemPrice.ActivationDate == previousActivationDate)
            {
                continue;
            }

            mapPeriodCostPrice.insert(date2num(inventItemPrice.ActivationDate), inventItemPrice.InventPriceMap::pcsPrice());
            mapPeriodCostPriceDesc.insert(-date2num(inventItemPrice.ActivationDate), inventItemPrice.InventPriceMap::pcsPrice());

            if (inventItemPrice.ActivationDate < dates[1] - 1 )
            {
                break;
            }

            previousActivationDate = inventItemPrice.ActivationDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    void initParmDefault()
    {
        perDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        showZeroLines   = NoYes::No;
        valueQty        = ValueQty::Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpInventAge</Name>
				<Source><![CDATA[
    protected void initTmpInventAge(
        InventTable         _inventTable,
        InventDim           _inventDimCriteria)
    {
        tmpInventAge.clear();
        tmpInventAge.ItemId         = _inventTable.ItemId;
        tmpInventAge.ItemGroupId    = _inventTable.itemGroupId();
        tmpInventAge.ItemType       = _inventTable.ItemType;
        tmpInventAge.InventDimId    = _inventDimCriteria.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateI</Name>
				<Source><![CDATA[
    TransDate       parmDateI(int i)
    {
        return dates[i];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPerDate</Name>
				<Source><![CDATA[
    TransDate   parmPerDate()
    {
        return perDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpInventAge</Name>
				<Source><![CDATA[
    TmpInventAge parmTmpInventAge()
    {
        return tmpInventAge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValueQty</Name>
				<Source><![CDATA[
    ValueQty parmValueQty()
    {
        return valueQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the parameters from the <c>InventAgeDim</c> report.
    /// </summary>
    /// <param name="_perDate">
    ///    The on date value for the last day of the period for which the transactions are needed.
    /// </param>
    /// <param name="_showZeroLines">
    ///    The include list of all items with or without carrying costs.
    /// </param>
    /// <param name="_valueQty">
    ///    The value to include for the carrying cost and inventory level.
    /// </param>
    /// <param name="_cutOffPeriod1">
    ///    The first cut-off date.
    /// </param>
    /// <param name="_cutOffPeriod2">
    ///    The second cut-off date.
    /// </param>
    /// <param name="_cutOffPeriod3">
    ///    The third cut-off date.
    /// </param>
    /// <param name="_cutOffPeriod4">
    ///    The fourth cut-off date.
    /// </param>
    /// <remarks>
    ///    This method gets the parameters from the <c>InventAgeDim</c> report through the
    ///    <c>InventAgeDimDP</c> class and does the required calculations which will be used by the
    ///    <c>InventAgeDimDP</c> class.
    /// </remarks>
    public void setParameters(TransDate  _perDate,
                            NoYes       _showZeroLines,
                            ValueQty    _valueQty,
                            TransDate   _cutOffPeriod1,
                            TransDate   _cutOffPeriod2,
                            TransDate   _cutOffPeriod3,
                            TransDate   _cutOffPeriod4)
    {
        perDate         = _perDate;
        showZeroLines   = _showZeroLines;
        valueQty        = _valueQty;
        dates[1]        = _cutOffPeriod1;
        dates[2]        = _cutOffPeriod2;
        dates[3]        = _cutOffPeriod3;
        dates[4]        = _cutOffPeriod4;

        this.sortDates();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortDates</Name>
				<Source><![CDATA[
    protected void sortDates()
    {
        Integer i;

        this.sortDatesLevel(1);
        this.sortDatesLevel(2);
        this.sortDatesLevel(3);
        for (i = 1; i < 4; i = i +1)
        {
            if (dates[i] == dates[i+1] && dates[i] != dateNull())
                throw error("@SYS15885");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortDatesLevel</Name>
				<Source><![CDATA[
    protected void sortDatesLevel(Integer level)
    {
        Integer myLevel = level + 1;

        while (myLevel <= 4)
        {
            if (dates[level] > dates[myLevel])
            {
                TransDate temp = dates[level];
                dates[level] = dates[myLevel];
                dates[myLevel] = temp;
            }
            myLevel += 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpInventAgeAddQty</Name>
				<Source><![CDATA[
    protected void tmpInventAgeAddQty(
        TransDate       _date,
        InventQty       _qty)
    {
        int level = this.findLevel(_date);

        switch (level)
        {
            case 1: tmpInventAge.Qty1 += _qty; break;
            case 2: tmpInventAge.Qty2 += _qty; break;
            case 3: tmpInventAge.Qty3 += _qty; break;
            case 4: tmpInventAge.Qty4 += _qty; break;
            case 5: tmpInventAge.Qty5 += _qty; break;
        }
        tmpInventAge.QtySum += _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpInventAgeAddValue</Name>
				<Source><![CDATA[
    protected void tmpInventAgeAddValue(
        TransDate   _date,
        Amount      _value)
    {
        int level = this.findLevel(_date);

        switch (level)
        {
            case 1: tmpInventAge.Value1 += _value; break;
            case 2: tmpInventAge.Value2 += _value; break;
            case 3: tmpInventAge.Value3 += _value; break;
            case 4: tmpInventAge.Value4 += _value; break;
            case 5: tmpInventAge.Value5 += _value; break;
        }
        tmpInventAge.ValueSum += _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventReport_Age construct()
    {
        return new InventReport_Age();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>