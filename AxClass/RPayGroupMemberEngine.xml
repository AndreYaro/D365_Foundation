<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayGroupMemberEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPayGroupMemberEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query.
    /// </summary>
    /// <param name="_groupTable">
    /// The payroll groups table.
    /// </param>
    /// <exception cref="Exception::Internal">
    /// Unhandled payroll group.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void createQuery(RPayGroupTable _groupTable)
    {
        SysQueryRun          sysQueryRun;
        Query                query;
        QueryBuildDataSource emplTable;
        QueryBuildDataSource personTable;

        //get query or make default
        if (_groupTable.hasQuery())
        {
            query = new Query(_groupTable.Query);
        }
        else
        {
            query = new Query();
            switch (_groupTable.Type)
            {
                case RPayGroupType::Employee:
                    emplTable = query.addDataSource(tablenum(RHRMEmplTable));
                    personTable = emplTable.addDataSource(tableNum(RHRMPersonTable));
                    personTable.relations(true);
                    personTable.joinMode(JoinMode::InnerJoin);
                break;

                case RPayGroupType::Person:
                    personTable = query.addDataSource(tablenum(RHRMPersonTable));
                    emplTable = personTable.addDataSource(tableNum(RHRMEmplTable));
                    emplTable.relations(true);
                    emplTable.joinMode(JoinMode::OuterJoin);
                break;
                default :
                    throw Exception::Internal;
            }
        }

        //change by user
        sysQueryRun = new  SysQueryRun(query);

        sysQueryRun.promptLoadLastUsedQuery(false);
        sysQueryRun.promptAllowSave(false);
        sysQueryRun.promptAllowAddSorting(QueryAllowAdd::NoFields);

        if (sysQueryRun.prompt())
        {
            _groupTable.Query = sysQueryRun.query().pack();
            _groupTable.update();

            if (Box::yesNo("@RUP1205",DialogButton::Yes,"@RUP1206","@RUP1207") == DialogButton::Yes)
            {
                RPayGroupMemberEngine::refreshGroup(_groupTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAllGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes all groups.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void refreshAllGroups()
    {
        RPayGroupTable groupTable;

        while select groupTable
        {
            RPayGroupMemberEngine::refreshGroup(groupTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshEmpl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void refreshEmpl(RHRMEmplTable _emplTable)
    {
        RPayGroupTable rPayGroupTable;

        while select rPayGroupTable
        {
            RPayGroupMemberEngine::updateEmplGroup(rPayGroupTable, _emplTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshed payroll group members list.
    /// </summary>
    /// <param name="_rPayGroupTable">
    /// The payroll group table record.
    /// </param>
    /// <exception cref="Exception::Internal">
    /// Unhandled payroll group type.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void refreshGroup(RPayGroupTable _rPayGroupTable)
    {
        QueryRun            queryRun;
        RPayGroupMember     rPayGroupMember;
        RHRMEmplTable       emplTable;
        RHRMPersonTable     personTable;

        if (_rPayGroupTable.Query)
        {
            ttsbegin;

            delete_from rPayGroupMember
                where rPayGroupMember.PayGroup == _rPayGroupTable.PayGroup;

            ttscommit;

            queryRun = new QueryRun(new Query(_rPayGroupTable.Query));

            switch (_rPayGroupTable.Type)
            {
                case RPayGroupType::Employee :
                    while (queryRun.next())
                    {
                        emplTable = queryRun.get(tablenum(RHRMEmplTable));
                        if (! RPayGroupMember::memberByGroup(emplTable.EmployeeId, _rPayGroupTable.PayGroup))
                        {
                            RPayGroupMember::addMember(_rPayGroupTable.PayGroup, emplTable.EmployeeId);
                        }
                    }
                break;
                case RPayGroupType::Person :
                    while (queryRun.next())
                    {
                        personTable = queryRun.get(tablenum(RHRMPersonTable));
                        if (! RPayGroupMember::memberByGroup(personTable.PersonnelNumber, _rPayGroupTable.PayGroup))
                        {
                            RPayGroupMember::addMember(_rPayGroupTable.PayGroup, personTable.PersonnelNumber);
                        }
                    }
                    break;
                default:
                    throw Exception::Internal;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmplGroup</Name>
				<Source><![CDATA[
    private static void updateEmplGroup(RPayGroupTable _rPayGroupTable,
                                        Common         _common)

    {
        RHRMEmplTable           emplTable;
        RHRMPersonTable         personTable;
        HcmPersonPrivateDetails hcmPersonPrivateDetails;
        HcmWorker               hcmWorker;

        QueryRun                queryRun;
        RHRMEmplId              emplId;
        RHRMPersonnelNumberId   personnelNumber;
        int                     line;
        Query                   query;
        QueryBuildDataSource    qbds;
        boolean                 exist;

        switch (_common.TableId)
        {
            case tablenum(RHRMEmplTable):
                emplTable   = _common.data();
                emplId      = emplTable.EmployeeId;
                personnelNumber = emplTable.personTable().PersonnelNumber;
                break;

            case tablenum(RHRMPersonTable):
                personTable         = _common.data();
                personnelNumber     = personTable.PersonnelNumber;
                break;

            case tablenum(HcmPersonPrivateDetails):
                hcmPersonPrivateDetails = _common.data();
                select firstOnly PersonnelNumber from hcmWorker
                    where hcmWorker.Person == hcmPersonPrivateDetails.Person;
                personnelNumber = hcmWorker.PersonnelNumber;
                break;
        }

        if (personnelNumber && _rPayGroupTable.hasQuery())
        {
            query = new Query(_rPayGroupTable.Query);

            qbds = query.dataSourceTable(tableNum(RHRMPersonTable));

            if (qbds)
            {
                qbds.addRange(fieldNum(RHRMPersonTable, PersonnelNumber)).value(personnelNumber);
            }

            if (emplId)
            {
                qbds = query.dataSourceTable(tableNum(RHRMEmplTable));

                if (qbds)
                {
                    qbds.addRange(fieldNum(RHRMEmplTable, EmployeeId)).value(emplId);
                }
            }

            queryRun = new QueryRun(query);
            line = infologLine();
            try
            {
                switch (_rPayGroupTable.Type)
                {
                    case RPayGroupType::Employee:

                        exist = false;

                        while (queryRun.next())
                        {
                            exist = true;
                            emplTable = queryRun.get(tableNum(RHRMEmplTable));

                            if (! RPayGroupMember::memberByGroup(emplTable.EmployeeId, _rPayGroupTable.PayGroup))
                            {
                                RPayGroupMember::addMember(_rPayGroupTable.PayGroup, emplTable.EmployeeId);
                            }
                        }

                        if (!exist)
                        {
                            while select emplTable
                                where (emplTable.EmployeeId == emplId || !emplId)
                            exists join personTable
                                where personTable.RecId             == emplTable.RHRMPersonTable &&
                                      personTable.PersonnelNumber   == personnelNumber
                            {
                                if (RPayGroupMember::memberByGroup(emplTable.EmployeeId, _rPayGroupTable.PayGroup))
                                {
                                    RPayGroupMember::deleteMember(_rPayGroupTable.PayGroup, emplTable.EmployeeId);
                                }
                            }
                        }

                        break;

                    case RPayGroupType::Person:

                        exist = false;

                        if (queryRun.next())
                        {
                            personTable = queryRun.get(tableNum(RHRMPersonTable));

                            if (! RPayGroupMember::memberByGroup(personTable.PersonnelNumber, _rPayGroupTable.PayGroup))
                            {
                                RPayGroupMember::addMember(_rPayGroupTable.PayGroup, personTable.PersonnelNumber);
                            }
                        }
                        else
                        {
                            if (RPayGroupMember::memberByGroup(personTable.PersonnelNumber, _rPayGroupTable.PayGroup))
                            {
                                RPayGroupMember::deleteMember(_rPayGroupTable.PayGroup, personTable.PersonnelNumber);
                            }
                        }

                        break;
                }
            }
            catch (Exception::Error)
            {
                infolog.clear(line);
                warning(strfmt("@RUP2195", _rPayGroupTable.PayGroup));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGroupIfInRange</Name>
				<Source><![CDATA[
    private static boolean updateGroupIfInRange(Common  _common,
                                                FieldId _fieldId)
    {
        RPayGroupTable          rPayGroupTable;
        Query                   query;
        QueryBuildDataSource    qBd;
        QueryBuildRange         qBr;
        QueryFilter             queryFilter;
        boolean                 updated;
        int                     filterIndex;
        DictField               dictField = new DictField(_common.TableId, _fieldId);

        while select rPayGroupTable
        {
            if (rPayGroupTable.hasQuery())
            {
                query = new Query(rPayGroupTable.Query);

                for (filterIndex = 1; filterIndex <= query.queryFilterCount(); filterIndex++)
                {
                    queryFilter = query.queryFilter(filterIndex);

                    if (queryFilter.field() == dictField.name() && queryFilter.value())
                    {
                        RPayGroupMemberEngine::updateEmplGroup(rPayGroupTable, _common);
                        updated = true;
                        break;
                    }
                }

                qBd = query.dataSourceTable(_common.TableId);

                if (qBd)
                {
                    qBr = qBd.findRange(fieldId2Ext(_fieldId, 1));

                    if (qBr && qBr.value())
                    {
                        RPayGroupMemberEngine::updateEmplGroup(rPayGroupTable, _common);
                        updated = true;
                    }
                }
            }
        }

        return updated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePayGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates payroll group members.
    /// </summary>
    /// <param name="_common">
    /// The common record to take new values from.
    /// </param>
    /// <param name="_commonOrig">
    /// The common record to compare values with if specified.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updatePayGroup(Common _common, Common _commonOrig = null)
    {
        DictTable   dictTable;

        FieldId     fieldId;
        int         i;
        boolean     updated;

        if (_common)
        {
            dictTable = new DictTable(_common.TableId);

            for (i = 1; i <= dictTable.fieldCnt(); i++)
            {
                fieldId = dictTable.fieldCnt2Id(i);

                if (!_commonOrig || _common.(fieldId) != _commonOrig.(fieldId))
                {
                    updated = RPayGroupMemberEngine::updateGroupIfInRange(_common, fieldId);

                    if (updated)
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>