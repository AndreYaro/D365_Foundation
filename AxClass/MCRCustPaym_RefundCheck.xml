<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCustPaym_RefundCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
///     The <c>MCRCustPaym_RefundCheck</c> class
///     to handle customer payments of type "refund check".
/// </summary>
class McrCustPaym_RefundCheck extends MCRCustPaym
{
    RecId               ledgerJournalTransRecId;
    MCRRCTransBatchID   mcrrcTransBatchID;
    CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a payment field should be editable by the user.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field being evaluated for allow/disallow editing.
    /// </param>
    /// <returns>
    ///     true if editing should be allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Don't allow prepay to be set by user for returns.  The prepay value will
    ///     be dictated by the AdvanceCredit attribute on the return.
    /// </remarks>
    public boolean allowEdit(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(MCRCustPaymTable, IsPrepay):
                // Return merge - don't look at MCRIsReturn
                // any more (instead just see if it's type returnItem)
                if (mcrCustPaymTable.RefTableId == tableNum(SalesTable) &&
                   SalesTable::findRecId(mcrCustPaymTable.RefRecId).SalesType == SalesType::ReturnItem)
                {
                    return false;
                }
                else
                {
                    return true;
                }
        }

        return super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>authorizeRefund</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initiates authorization for a refund check.
    /// </summary>
    /// <returns>
    ///     The updated <c>MCRCustPaymStatus</c> after refund authorization.
    /// </returns>
    private MCRCustPaymStatus authorizeRefund()
    {
        // Require approval if a check is on hold on the same order
        MCRCustPaymTable        mcrCustPaymTable_Check;
        MCRRCSettlementTable    mcrrcSettlementTable;
        Amount                  refundCheckApprovalAmount;
        Amount                  unpostedAmount;
        MCRRCSettlementStatus   mcrrcSettlementStatus;

        ttsbegin;

        // If an unprocessed refund settlement already exists, use it
        select forupdate firstonly mcrrcSettlementTable
            where mcrrcSettlementTable.mcrCustPaymTableRecID        == mcrCustPaymTable.RecId
                && (mcrrcSettlementTable.mcrrcSettlementStatus      == MCRRCSettlementStatus::PendingApproval
                    || mcrrcSettlementTable.mcrrcSettlementStatus   == MCRRCSettlementStatus::Approved);

        // Require approval if a check is on hold on the same order
        // Regardless of the amount
        select firstonly RecId from mcrCustPaymTable_Check
            where mcrCustPaymTable_Check.RefTableId         == mcrCustPaymTable.RefTableId
                && mcrCustPaymTable_Check.RefRecId          == mcrCustPaymTable.RefRecId
                && mcrCustPaymTable_Check.CustPaymType      == MCRCustPaymType::Check
                && mcrCustPaymTable_Check.Status            == MCRCustPaymStatus::Posted
                && mcrCustPaymTable_Check.CheckAuthorized   == NoYes::No;

        // When a refund check is created, first check if a refund check approval amount
        // is defined, and if so make sure that the payment exceeds that amount, therefore
        // needing approval.  If the payment is less than the refund check approval amount,
        // then go ahead and approve the settlement.
        refundCheckApprovalAmount = MCROrderParameters::find().mcrRefundCheckApprovalAmount;
        unpostedAmount = mcrCustPaymTable.getUnpostedAmount();

        eventSource.EventWriteMCRCustPaym_RefundCheckAmounts(funcName(), tableStr(MCRCustPaymTable), mcrCustPaymTable.RecId, refundCheckApprovalAmount, unpostedAmount);

        if (mcrrcSettlementTable)
        {
            // update and re-submit the record if not yet approved or not approved
            //  for a great enough amount
            if (mcrrcSettlementTable.mcrrcSettlementStatus == MCRRCSettlementStatus::PendingApproval
                || mcrrcSettlementTable.mcrSettlementAmount < abs(unpostedAmount))
            {
                if (refundCheckApprovalAmount == 0)
                {
                    mcrrcSettlementTable.mcrrcSettlementStatus = MCRRCSettlementStatus::Approved;
                }
                else
                {
                    if (refundCheckApprovalAmount <= abs(unpostedAmount)
                        // Require approval if a check is on hold on the same order
                        || mcrCustPaymTable_Check)
                    {
                        mcrrcSettlementTable.mcrrcSettlementStatus = MCRRCSettlementStatus::PendingApproval;
                    }
                    else
                    {
                        mcrrcSettlementTable.mcrrcSettlementStatus = MCRRCSettlementStatus::Approved;
                    }
                }
                mcrrcSettlementTable.mcrSettlementAmount = abs(unpostedAmount);

                mcrrcSettlementTable.update();
            }
        }
        else    // create a new settlement record
        {
            if (refundCheckApprovalAmount == 0)
            {
                mcrrcSettlementStatus = MCRRCSettlementStatus::Approved;
            }
            else
            {
                if (refundCheckApprovalAmount <= abs(unpostedAmount)
                    // Require approval if a check is on hold on the same order
                    || mcrCustPaymTable_Check)
                {
                    mcrrcSettlementStatus = MCRRCSettlementStatus::PendingApproval;
                }
                else
                {
                    mcrrcSettlementStatus = MCRRCSettlementStatus::Approved;
                }
            }

            mcrrcSettlementTable = this.createRefundCheckSettlement(abs(unpostedAmount), mcrrcSettlementStatus);
        }

        ttscommit;

        return mcrrcSettlementTable.mcrrcSettlementStatus == MCRRCSettlementStatus::Approved ?
                    MCRCustPaymStatus::Authorized: MCRCustPaymStatus::NotSubmitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the passed amount can be posted.
    /// </summary>
    /// <param name="_postAmount">
    ///     The amount to be checked if it can be posted.
    /// </param>
    /// <returns>
    ///     true if the amount passed in can be posed; otherwise, false.
    /// </returns>
    public boolean canPost(AmountCur _postAmount)
    {
        MCRRCSettlementTable mcrrcSettlementTable;

        // find the settlement record that tracks the approval amount
        select firstonly RecId from mcrrcSettlementTable
            where mcrrcSettlementTable.mcrCustPaymTableRecID  == mcrCustPaymTable.RecId
                && mcrrcSettlementTable.mcrrcSettlementStatus == MCRRCSettlementStatus::InProcess;

        if (_postAmount != 0
            && mcrCustPaymTable.Status == MCRCustPaymStatus::Authorized
            && (!mcrrcSettlementTable.RecId
            || RetailPaymentsAllowCreationOfMultipleInprocessRefundChecksForOrderFlight::instance().isEnabled()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the ledger journal table for refund check payment transactions.
    /// </summary>
    /// <returns>
    ///     The newly created <c>LedterJouranlTable</c> record.
    /// </returns>
    private LedgerJournalTable createLedgerJournalTable()
    {
        LedgerJournalName   ledgerJournalName;
        LedgerJournalTable  ledgerJournalTable_RC;
        CurrencyCode        currency;
        // Get the current exchange rate
        currency = mcrCustPaymTable.getCurrency();

        ttsbegin;

        // Create the journal header
        ledgerJournalTable_RC.initFromLedgerJournalName(ledgerJournalName.JournalName);
        ledgerJournalTable_RC.JournalName = MCROrderParameters::find().LedgerJournalNameId;
        if (ledgerJournalTable_RC.JournalName == "")
        {
            throw error("@MCR30892");
        }
        ledgerJournalTable_RC.Name = ledgerJournalName.Name;
        ledgerJournalTable_RC.CurrencyCode = currency;
        ledgerJournalTable_RC.Posted = NoYes::No;
        // Be sure that the posted date is not set
        ledgerJournalTable_RC.PostedDateTime = utcDateTimeNull();

        // Correct exchange rate
        ledgerJournalTable_RC.ExchRate = ExchangeRateHelper::exchRate(currency, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        ledgerJournalTable_RC.DefaultDimension = mcrCustPaymTable.getDimension();

        ledgerJournalTable_RC.insert();

        ttscommit;

        return ledgerJournalTable_RC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRCTransBatchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a batch record which is
    ///     associated to a journal number.
    /// </summary>
    /// <param name="_ledgerJournalId">
    ///     The ledger journal ID with which to associate the new
    ///     <c>MCRRCTransBatchTable</c> record.
    /// </param>
    /// <returns>
    ///     The newly created <c>MCRRCTransBatchTable</c> record.
    /// </returns>
    /// <remarks>
    ///     This record is used to indicate the journal record is
    ///     specifically for refund checks transactions the
    ///     system has auto generated.
    /// </remarks>
    private MCRRCTransBatchTable createRCTransBatchTable(LedgerJournalId _ledgerJournalId)
    {
        MCRRCTransBatchTable     mcrrcTransBatchTable;
        ttsbegin;
        mcrrcTransBatchTable.initValue();
        mcrrcTransBatchTable.LedgerJournalId = _ledgerJournalId;
        mcrrcTransBatchTable.insert();
        ttscommit;

        return mcrrcTransBatchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRefundCheckSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new refund check settlement record for this payment.
    /// </summary>
    /// <param name="_amount">
    ///     The amount to be applied to the new refund check settlement record.
    /// </param>
    /// <param name="_status">
    ///     The status to be applied to the new refund check settlement record.
    /// </param>
    /// <returns>
    ///     The newly created <c>MCRRCSettlementTable</c> record.
    /// </returns>
    private MCRRCSettlementTable createRefundCheckSettlement(Amount _amount, MCRRCSettlementStatus _status)
    {
        MCRRCSettlementTable mcrrcSettlementTable;
        MCRRCAuthTable mcrrcAuthTable;

        eventSource.EventWriteMcrCustPaymSettlementCreation(funcName(), tableStr(MCRRCSettlementTable),mcrrcSettlementTable.RecId, enum2Str(_status), ledgerJournalTransRecId, 'Settlement record creation started.');
        ttsbegin;

        // set initial status
        mcrrcSettlementTable.mcrrcSettlementStatus = _status;

        // set reference to payment
        mcrrcSettlementTable.mcrCustPaymTableRecID = mcrCustPaymTable.RecId;

        // Set the MCRCCAuthRecId
        mcrrcSettlementTable.mcrrcAuthTableRecID = mcrrcAuthTable.RecId;

        // Set the merchant id
        mcrrcSettlementTable.SalesId = mcrCustPaymTable.displayOrderID();
        mcrrcSettlementTable.LineNum = MCRRCSettlementTable::nextLineNum(mcrrcSettlementTable.SalesId);

        // set refund amount
        mcrrcSettlementTable.mcrSettlementAmount = _amount;

        // Link record to batch & journal trans record if just created.
        mcrrcSettlementTable.mcrrcTransBatchID = mcrrcTransBatchID;
        mcrrcSettlementTable.LedgerJournalTransRecId = ledgerJournalTransRecId;

        // reset references
        mcrrcTransBatchID = '';
        ledgerJournalTransRecId = 0;

        mcrrcSettlementTable.insert();

        ttscommit;
        eventSource.EventWriteMcrCustPaymSettlementCreation(funcName(), tableStr(MCRRCSettlementTable),mcrrcSettlementTable.RecId, enum2Str(_status), ledgerJournalTransRecId, 'Settlement record creation completed.');

        return mcrrcSettlementTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateBatchAndJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Looks for an open batch that is associated to a journal which
    ///     has not passed its line limit.
    /// </summary>
    /// <param name="_forUpdate">
    ///     A boolean that determines whether the record should be selected
    ///     for update; optional.
    /// </param>
    /// <returns>
    ///     A container that consists of the the <c>LedgerJournalTable</c>
    ///     record and the <c>MCRTransBatchTable</c> record.
    /// </returns>
    /// <remarks>
    ///     If this method finds an open batch it passes back the batch
    ///     and journal record which will be used to add new
    ///     refund check transactions; otherwise, it creates a new
    ///     batch and journal record and passes those back.
    /// </remarks>
    private container findOrCreateBatchAndJournal(boolean _forUpdate = false)
    {
        LedgerJournalTable      ledgerJournalTable_RC;
        MCRRCTransBatchTable    mcrrcTransBatchTable;
        mcrrcTransBatchTable = MCRRCTransBatchTable::findOpenBatchFromTenderTypeId(mcrCustPaymTable.TenderTypeId, _forUpdate);

        if (mcrrcTransBatchTable)
        {
            ledgerJournalTable_RC = mcrrcTransBatchTable.findLedgerJournalTable(_forUpdate);
        }
        else
        {
            ledgerJournalTable_RC = this.createLedgerJournalTable();
            mcrrcTransBatchTable = this.createRCTransBatchTable(ledgerJournalTable_RC.JournalNum);
        }

        return [ledgerJournalTable_RC, mcrrcTransBatchTable];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the default value of the passed field if it has been defined.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field for which this method finds the default value.
    /// </param>
    /// <returns>
    ///     The default value of the specified field if it is defined; otherwise, null.
    /// </returns>
    public anytype getDefaultValue(FieldId _fieldId)
    {
        SalesTable  salesTable;
        switch (_fieldId)
        {
            case fieldNum(MCRCustPaymTable, IsPrepay):
                if (mcrCustPaymTable.RefTableId == tableNum(SalesTable))
                {
                    salesTable = SalesTable::findRecId(mcrCustPaymTable.RefRecId);
                }
                // returns merge - look at SalesTable instead of ReturnTable
                if (salesTable.SalesType == SalesType::ReturnItem
                    && salesTable.mcrReturnSalesTable().AdvanceCredit )
                {
                    return NoYes::Yes;
                }
                return NoYes::No;

            case fieldNum(MCRCustPaymTable, PercentAmount):
                return 0.0;

            case fieldNum(MCRCustPaymTable, Amount):
                return 0.0;
        }

        return super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLedgerJournalTransLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the next line numb for the passed journal number.
    /// </summary>
    /// <param name="_ledgerJournalId">
    ///     The passed journal for which this method finds the next line number.
    /// </param>
    /// <returns>
    ///     The next line number from the passed ledger journal.
    /// </returns>
    private LineNum getNextLedgerJournalTransLineNum(LedgerJournalId _ledgerJournalId)
    {
        LedgerJournalTrans  ledgerJournalTrans;

        select maxof (LineNum) from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == _ledgerJournalId;

        return(ledgerJournalTrans.LineNum + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPaymTypeData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Return true.
    /// </summary>
    /// <returns>
    ///     true.
    /// </returns>
    /// <remarks>
    ///     A "refund check" payment has no
    ///     additional required data.
    /// </remarks>
    public boolean hasPaymTypeData()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(MCRCustPaymTable _mcrCustPaymTable, boolean _allowUserInput)
    {
        if (_mcrCustPaymTable.CustPaymType != MCRCustPaymType::RefundCheck)
        {
            throw error(strFmt("@MCR32269", funcName(),
                               enum2str(MCRCustPaymType::RefundCheck)));
        }

        super(_mcrCustPaymTable, _allowUserInput);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBalanceCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform balance for the payment method.
    /// </summary>
    /// <returns>The balance.</returns>
    [Hookable(false)]
    protected real performBalanceCheck()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performAuth</Name>
				<Source><![CDATA[
    protected MCRCustPaymStatus performAuth()
    {
        // If it's fully posted then determine then it's paid.
        if (mcrCustPaymTable.getUnpostedAmount() == 0.0 && mcrCustPaymTable.Amount != 0)
        {
            mcrCustPaymTable.Status = MCRCustPaymStatus::Paid;
        }
        else
        {
            mcrCustPaymTable.Status = this.authorizeRefund();
        }

        ttsbegin;
        mcrCustPaymTable.update();
        ttscommit;

        return mcrCustPaymTable.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performPost</Name>
				<Source><![CDATA[
    protected void performPost(Amount _amount)
    {
        if (_amount < 0.0)
        {
            this.postRefund(abs(_amount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the different processing
    ///     logic that refund checks go through.
    /// </summary>
    /// <param name="_amount">
    ///     The amount to be posted.
    /// </param>
    /// <param name="_isPrepay">
    ///     A boolean determing whether this post is for a pre-payment.
    /// </param>
    /// <remarks>
    ///     Need to skip the update of the posted amount
    ///     because the payment is not actually posted.
    /// </remarks>
    public void post(Amount _amount, boolean _isPrepay)
    {
        setPrefix(strFmt("@MCR10793",
                         enum2str(mcrCustPaymTable.CustPaymType),
                         num2str(_amount, 1, 2, 1, 2)));

        if (!this.validatePost(_amount, true))
        {
            throw error("@MCR10794");
        }

        // create ledger journal records
        this.postToLedgerJournal(_amount, _isPrepay);

        // perform any posting operations for specific payment types
        this.performPost(_amount);

        if (RetailPaymentsAllowCreationOfMultipleInprocessRefundChecksForOrderFlight::instance().isEnabled())
        {
            mcrCustPaymTable.updatePostedAmount(_amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCheckBatch</Name>
				<Source><![CDATA[
    private void postCheckBatch()
    {
        LedgerJournalTable      ledgerJournalTable_RC;
        LedgerJournalCheckPost  ledgerJournalCheckPost;
        LedgerJournalTrans      ledgerJournalTrans;
        // post the payment journal
        ledgerJournalTrans.reread();

        ledgerJournalCheckPost =
            LedgerJournalCheckPost::newLedgerJournalTrans(
                ledgerJournalTrans, LedgerJournalVoucher::Journal, NoYes::Yes,
                NoYes::No, NoYes::No);

        ledgerJournalCheckPost.parmBeQuiet(true);   // hide messages and progress bar

        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

        // handle currency conversion
        ttsbegin;

        ledgerJournalTable_RC =
            LedgerJournalTable::find(ledgerJournalTable_RC.JournalNum, true);

        [ledgerJournalTable_RC.JournalTotalDebit,
             ledgerJournalTable_RC.JournalTotalCredit,
             ledgerJournalTable_RC.JournalTotalOffsetBalance] = LedgerJournalTable::journalBalanceMST(ledgerJournalTable_RC.JournalNum);
        if (ledgerJournalTable_RC.validateWrite())
        {
            ledgerJournalTable_RC.update();
        }
        else
        {
            throw error("@SYS104318");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRefund</Name>
				<Source><![CDATA[
    private void postRefund(Amount _amount)
    {
        MCRRCSettlementTable mcrrcSettlementTable;
        System.Exception exception;

        try
        {
            ttsbegin;
            // create a new settlement record, prepared for processing
            this.createRefundCheckSettlement(_amount, MCRRCSettlementStatus::InProcess);

            // find the settlement record that tracks the approval amount
            select forupdate firstonly mcrrcSettlementTable
                where mcrrcSettlementTable.mcrCustPaymTableRecID  == mcrCustPaymTable.RecId
                    && mcrrcSettlementTable.mcrrcSettlementStatus == MCRRCSettlementStatus::Approved;

            // A record should always be found, and it should always have an amount
            //  greater than the post amount.  The following checks handle error
            //  conditions that should only occur in the case of bad data.
            if (!mcrrcSettlementTable)
            {
                throw error("@MCR23692");
            }

            if (mcrrcSettlementTable.mcrSettlementAmount < _amount)
            {
                throw error("@MCR23693");
            }

            // reduce the approved amount
            mcrrcSettlementTable.mcrSettlementAmount -= _amount;

            mcrrcSettlementTable.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (exception)
        {
            eventSource.EventWriteMCrCustPaymRefundCreationOrPostFailed(funcName(),tableStr(MCRRCSettlementTable),mcrrcSettlementTable.RecId,exception.ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToLedgerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the payment to the <c>ledgerJournalTrans</c> records.
    /// </summary>
    /// <param name="_amount">
    ///     The amount to be posted.
    /// </param>
    /// <param name="_isPrepay">
    ///     A boolean determing whether this post is for a pre-payment.
    /// </param>
    public void postToLedgerJournal(Amount _amount, boolean _isPrepay)
    {
        CurrencyCode            currency;

        LedgerJournalTable      ledgerJournalTable_RC;
        LedgerJournalTrans      ledgerJournalTransOut;
        MCRRCTransBatchTable    mcrCCTransBatchTable;
        ExchRate                exchRate;
        PostingProfile          postingProfileVal;
        Num                     paymOrderId;
        AmountCurCredit         amtCredit;
        AmountCurDebit          amtDebit;
        CustPaymModeTable       custPaymModeTable;

        custPaymModeTable = CustPaymModeTable::find(MCRRefundMethodsTable::find(mcrCustPaymTable.CurrencyCode).PaymMode);

        currency = mcrCustPaymTable.getCurrency();
        // Retrieve the exchange rate from the exchange rates table.
        exchRate = ExchangeRateHelper::exchRate(currency);
        paymOrderId = mcrCustPaymTable.displayOrderID();

        ttsbegin;
        [ledgerJournalTable_RC, mcrCCTransBatchTable] = this.findOrCreateBatchAndJournal();
        // In case of refunds a LedgerjournalTable is being created outside of the custpaym class
        // so use that in the ledgerjournal engine.
        if (!mcrLedgerJournal)
        {
            mcrLedgerJournal = MCRLedgerJournal::construct(LedgerJournalType::CustPayment);
        }
        if (ledgerJournalTable_RC)
        {
            ledgerJournalTable = ledgerJournalTable_RC;
        }
        // create the journal transaction using the ledger journal engine
        if (ledgerJournalTable)
        {
            mcrLedgerJournal.parmLedgerJournalTable(ledgerJournalTable);
            if (_amount > 0.0)
            {
                amtCredit = _amount;
            }
            else
            {
                amtDebit = abs(_amount);
            }

            if (RetailPaymentsApplyPostingProfileWithPrepaymentForOverPaidRefundCheckFlight::instance().isEnabled())
            {
                if (_isPrepay)
                {
                    // Continuity posting profile should be used when posting pre-payments
                    // for a continuity order.
                    if (mcrCustPaymTable.isContinuityOrder())
                    {
                        postingProfileVal = MCROrderParameters::find().ContinuityPaymentProfile;
                        eventSource.EventWriteRetailPaymentPostingProfileOnJournalLine(postingProfileVal, 'ContinuityPaymentProfile', mcrCustPaymTable.RecId);
                    }
                    else
                    {
                        postingProfileVal = CustParameters::find().PrepaymentPostingProfile;
                        eventSource.EventWriteRetailPaymentPostingProfileOnJournalLine(postingProfileVal, 'PrepaymentPostingProfile', mcrCustPaymTable.RecId);
                    }
                }
                else
                {
                    postingProfileVal = CustParameters::find().PostingProfile;
                    eventSource.EventWriteRetailPaymentPostingProfileOnJournalLine(postingProfileVal, 'PostingProfile', mcrCustPaymTable.RecId);
                }
            }
            mcrLedgerJournal.parmLedgerJournalTable(ledgerJournalTable);
            mcrLedgerJournal.parmExchRate(exchRate);
            mcrLedgerJournal.parmCurrencyCode(currency);
            mcrLedgerJournal.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            mcrLedgerJournal.parmTransTxt(strFmt("@MCR10835",
                                             paymOrderId,
                                             enum2str(mcrCustPaymTable.CustPaymType)));
            mcrLedgerJournal.parmPaymReference(this.parmPaymReference());
            mcrLedgerJournal.parmMCRPaymOrderID(paymOrderId);
            mcrLedgerJournal.parmMCRRefPaymID(mcrCustPaymTable.RecId);
            mcrLedgerJournal.parmPrePayment(_isPrepay);
            mcrLedgerJournal.parmPostingProfile(postingProfileVal);
            mcrLedgerJournal.parmTransactionType(LedgerTransType::Payment);
            mcrLedgerJournal.parmAccountNum(mcrCustPaymTable.CustAccount);
            // Paym mode for refund checks is used to determine export format
            mcrLedgerJournal.parmPaymMode(custPaymModeTable.PaymMode);
            mcrLedgerJournal.parmBankTransType(custPaymModeTable.BankTransType);
            // Fetch and store complete offset ledger account structure, instead of just main account.
            mcrLedgerJournal.parmledgerOffsetAccount(MCRCustPaym_RefundCheck::getOffsetLedgerAccountStructure(ledgerJournalTable, custPaymModeTable.offsetLedgerDimension(), mcrCustPaymTable.CustAccount));
            mcrLedgerJournal.parmLedgerOffsetAccountType(custPaymModeTable.AccountType);
            mcrLedgerJournal.parmDefaultDimension(ledgerJournalTable.DefaultDimension);
            ledgerJournalTransOut = mcrLedgerJournal.createLedgerJournalTrans(amtCredit, amtDebit);
        }
        ttscommit;

        ledgerJournalTransRecId = ledgerJournalTransOut.RecId;
        mcrrcTransBatchID = mcrCCTransBatchTable.mcrrcTransBatchID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the refund payment is allowed to be deleted
    ///     from the database.
    /// </summary>
    /// <param name="_showErrors">
    ///     A boolean that determines whether to write errors to an infolog;
    ///     optional.
    /// </param>
    /// <returns>
    ///     True if the record is allowed to be deleted; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Cannot delete refund checks after approval.
    /// </remarks>
    public boolean validateDelete(boolean _showErrors = true)
    {
        boolean ret;

        ret = super(_showErrors);

        if (ret)
        {
            // Allow deleting refund checks if not closed or cancelled.
            if ((mcrCustPaymTable.Status != MCRCustPaymStatus::NotSubmitted
                && mcrCustPaymTable.Status != MCRCustPaymStatus::Declined)
                && !mcrCustPaymTable.allowSpecialDelete())
            {
                ret = false;

                if (_showErrors)
                {
                    error("@MCR30298");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePost</Name>
				<Source><![CDATA[
    public boolean validatePost(Amount _amount, boolean _showErrors = true)
    {
        boolean isValid = true;

        Amount unpostedAmount = mcrCustPaymTable.getUnpostedAmount();

        // this payment must be Posted/Paid
        if (mcrCustPaymTable.Status != MCRCustPaymStatus::Authorized)
        {
            isValid = false;

            if (_showErrors)
            {
                error(strFmt("@MCR30348", enum2str(mcrCustPaymTable.Status)));
            }
        }

        // must be a non-zero amount
        if (_amount == 0.0)
        {
            isValid = false;

            if (_showErrors)
            {
                error(strFmt("@MCR10796", num2str(_amount, 1, 2, -1, -1)));
            }
        }

        // the amount must have the same sign as the unposted payment amount
        if (isValid && sign(_amount) != sign(unpostedAmount))
        {
            isValid = false;

            if (_showErrors)
            {
                error(strFmt("@MCR10796", num2str(_amount, 1, 2, -1, -1)));
            }
        }

        // the amount may not be greater than the unposted payment amount
        if (isValid && abs(_amount) > abs(unpostedAmount))
        {
            isValid = false;

            if (_showErrors)
            {
                error(strFmt("@MCR10796", num2str(_amount, 1, 2, -1, -1)));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates this payment for an insert or update.
    /// </summary>
    /// <param name="_showErrors">
    ///     A boolean determing whether to write errors to the infolog; optional.
    /// </param>
    /// <param name="_validateAccountSetup">
    ///     A boolean determing whether to validate if an account is
    ///     setup on the <c>RetailStoreTenderTypeTable</c>; optional.
    /// </param>
    /// <returns>
    ///     true if all data for this payment is valid and should be allowed
    ///     to be saved to the database; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     If the return value is false, then this payment should not be saved to
    ///     the database.
    /// </remarks>
    public boolean validateWrite(boolean _showErrors = true,
                                 boolean _validateAccountSetup = true)
    {
        boolean isValid = super(_showErrors, _validateAccountSetup);

        // percent amount must be 0
        if (this.isPercentAmountNotZero(mcrCustPaymTable))
        {
            isValid = false;

            if (_showErrors)
            {
                error(strFmt("@MCR10596", enum2str(mcrCustPaymTable.CustPaymType)));
            }
        }

        // amount must be negative
        if (this.isPositiveAmount(mcrCustPaymTable))
        {
            // When a user add charges after return order payment is made. We are not refunding the amount but charging the customer.
            // In this case, the payment amount should be positive. Hence, we are bypassing the validation.
            if (!RetailPaymentsSupportPositiveChargesOnReturnOrderFlight::instance().isEnabled())
            {
                isValid = false;

                if (_showErrors)
                {
                    error(strFmt("@MCR23895", enum2str(mcrCustPaymTable.CustPaymType)));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPercentAmountNotZero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>PercentAmount</c> field of <c>MCRCustPaymTable</c> is not equal to zero.
    /// </summary>
    /// <param name = "_mcrCustPaymTable">
    /// The record buffer of <c>MCRCustPaymTable</c> table.
    /// </param>
    /// <returns>
    /// True if <c>PercentAmount</c> field of <c>MCRCustPaymTable</c> is not equal to zero; otherwise, false.
    /// </returns>
    protected boolean isPercentAmountNotZero(MCRCustPaymTable _mcrCustPaymTable)
    {
        return (_mcrCustPaymTable.PercentAmount != 0.0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPositiveAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>Amount</c> field of <c>MCRCustPaymTable</c> is positive or not.
    /// </summary>
    /// <param name = "_mcrCustPaymTable">
    /// The record buffer of <c>MCRCustPaymTable</c> table.
    /// </param>
    /// <returns>
    /// True if <c>Amount</c> field of <c>MCRCustPaymTable</c> is positive; otherwise, false.
    /// </returns>
    protected boolean isPositiveAmount(MCRCustPaymTable _mcrCustPaymTable)
    {
        return (_mcrCustPaymTable.Amount > 0.0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetLedgerAccountStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the complete offset ledger account structure for the given offset account.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The <c>LedgerJournalTable</c> table.
    /// </param>
    /// <param name="_ledgerJournalAccount">
    /// The ledger journal account number.
    /// </param>
    /// <param name="_ledgerAccount">
    /// The ledger dimension.
    /// </param>
    /// <returns>
    /// Ledger account structure by merging the main account and the dimensions for the main account.
    /// </returns>
    internal static LedgerDimensionBase getOffsetLedgerAccountStructure(
        LedgerJournalTable _ledgerJournalTable,
        LedgerDimensionAccount _ledgerJournalAccount,
        LedgerJournalAC _ledgerAccount)
    {
        LedgerDimensionBase offsetLedgerDimension = _ledgerJournalAccount;

        if (_ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            DimensionDynamicDefaultAccount defaultLedgerDimension = _ledgerJournalTable.parmOffsetLedgerDimension();
                
            if (defaultLedgerDimension)
            {
                // Get dimension values from the primary side
                List dimensionSources = new List(Types::Class);

                LedgerDimensionAccount ledgerAccount = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_ledgerAccount, LedgerJournalACType::Cust);

                if (ledgerAccount)
                {
                    Map primaryDimensionSpecifiers = LedgerDimensionDefaultingEngine::getLedgerDimensionSpecifiers(ledgerAccount, true);
                    
                    if (primaryDimensionSpecifiers)
                    {
                        dimensionSources.addEnd(primaryDimensionSpecifiers);
                    }
                }

                // Get dimensions from main account
                LedgerDimensionDefaultingEngine::addDefaultDimensionForLedgerDimension(dimensionSources, defaultLedgerDimension);

                LedgerDimensionAccount mergedLedgerDimension = LedgerDimensionDefaultingEngine::createLedgerDimension(defaultLedgerDimension, dimensionSources);
                
                // If type is ledger need to create ledger account structure by merging the main account.
                // And the dimensions for the main account with the currently entered values.
                if (mergedLedgerDimension)
                {
                    offsetLedgerDimension = LedgerDimensionFacade::serviceMergeLedgerDimensions(offsetLedgerDimension, mergedLedgerDimension);
                }
            }
        }
       
        return offsetLedgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>