<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBondManual_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerBondManual_RU</c> class is used to bond ledger transactions manually.
/// </summary>
final class LedgerBondManual_RU
{
    LedgerBondId_RU                             vrefIdInprogress;
    DetailSummary                               detailSummary;
    LedgerBondTransAdapter_GeneralJournal_RU    adapter;

    SubledgerVoucherGeneralJournalEntry         voucherEntry;

    Set                                         loadedIDs;
    Map                                         idsToTransObjects;
    LedgerBondClient_RU                         bondClient;
    LedgerBondServer_RU                         bondServer;
    LedgerBondApplier_RU                        bondApplier;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Add loaded transactions
    /// </summary>
    /// <remarks>
    ///  Applies add to all transactions previously loaded by loadUnbondedTrans
    /// </remarks>
    protected void addLoaded()
    {
        SetEnumerator i = loadedIDs.getEnumerator();
        while (i.moveNext())
        {
            bondApplier.add(adapter.adapt(idsToTransObjects.lookup(i.current()), this.parmDetailSummary()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>client</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets bond client;
    /// </summary>
    /// <returns>
    /// A current instance of bond client.
    /// </returns>
    public LedgerBondClient_RU client()
    {
        return bondClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Deletes generalJournalLine by VRefID
    /// </summary>
    /// <param name="_id">
    /// VRefID
    /// </param>
    protected void deleteTransaction(LedgerBondId_RU _id)
    {
        LedgerVoucherTransObject transObject = idsToTransObjects.lookup(_id);
        GeneralJournalAccountEntry              accountEntry;
        TaxTransGeneralJournalAccountEntry      taxEntry;
        GeneralJournalAccountEntry_W            accountEntryW;
        LedgerEntry                             ledgerEntry;

        delete_from taxEntry
            where taxEntry.GeneralJournalAccountEntry == transObject.parmGeneralJournalAccountEntry().RecId;

        delete_from accountEntry
            where accountEntry.RecId == transObject.parmGeneralJournalAccountEntry().RecId;

        delete_from ledgerEntry
            where ledgerEntry.GeneralJournalAccountEntry == transObject.parmGeneralJournalAccountEntry().RecId;

        delete_from accountEntryW
            where accountEntryW.GeneralJournalAccountEntry == transObject.parmGeneralJournalAccountEntry().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Deletes GeneralJournal transactions by given VRefID set
    /// </summary>
    /// <param name="_vrefIDs">
    ///    Set of vRefIDs
    /// </param>
    protected void deleteTransactions(Set _vrefIDs)
    {
        SetEnumerator i = _vrefIDs.getEnumerator();
        while (i.moveNext())
        {
            this.deleteTransaction(i.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxLinks</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Insertts TaxEntries for _accountEntry from _taxLinks
    /// </summary>
    /// <param name="_accountEntry">
    ///   RecID of GeneralJournalAccountEntry
    /// </param>
    /// <param name="_taxLinks">
    ///   collection of recIDs and TaxTransRelationshipType
    /// </param>
    /// <remarks>
    ///   This method is based on ledgerPostingGeneralJournalController.addTaxLink
    /// </remarks>
    protected void insertTaxLinks(GeneralJournalAccountEntry _accountEntry, LedgerPostingOneToManyCollection _taxLinks)
    {
        Set                                 relationshipCollection;
        SetEnumerator                       enumerator;
        TaxTransGeneralJournalAccountEntry  taxLink;
        boolean                             haveMore;
        RecId                               taxTransRecId;
        TaxTransRelationshipType            taxRelationshipType;
        AmountMST                           accountingCurrencyAmount;
        AmountCur                           transactionCurrencyAmount;

        if (_taxLinks == null)
        {
            return;
        }

        haveMore = _taxLinks.first();

        while (haveMore)
        {
            taxTransRecId           = _taxLinks.currentOne();
            relationshipCollection  = _taxLinks.currentMany();

            enumerator = relationshipCollection.getEnumerator();

            while (enumerator.moveNext())
            {
                [taxRelationshipType, accountingCurrencyAmount, transactionCurrencyAmount] = enumerator.current();

                taxLink.TaxTrans                   = taxTransRecId;
                taxLink.GeneralJournalAccountEntry = _accountEntry.RecId;
                taxLink.TaxTransRelationship       = taxRelationshipType;
                taxLink.LedgerDimension            = _accountEntry.LedgerDimension;
                taxLink.AccountingCurrencyAmount   = accountingCurrencyAmount;
                taxLink.TransactionCurrencyAmount  = transactionCurrencyAmount;
                taxLink.TransactionCurrency        = _accountEntry.TransactionCurrencyCode;
                // In legacy posting allocation factor is always 1
                taxLink.AllocationFactor           = 1;
                taxLink.insert();
            }

            haveMore = _taxLinks.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Inserts new general journal header, line, ledger entry with settings in _trans
    /// </summary>
    /// <param name="_trans">
    /// TmpLedgerBondResultTransaction_RU
    /// </param>
    protected void insertTransaction(TmpLedgerBondResultTransaction_RU _trans)
    {
        GeneralJournalAccountEntry  accountEntry;
        GeneralJournalAccountEntry_W accountEntryW;
        LedgerEntry                 entry;
        LedgerEntry                 emptyEntry;

        ttsbegin;

        adapter.update(_trans.asObject(), accountEntry, accountEntryW, entry);

        accountEntry.GeneralJournalEntry = voucherEntry.GeneralJournalEntry;
        accountEntry.insert();

        if (accountEntryW.BondBatchTrans_RU != 0)
        {
            accountEntryW.GeneralJournalAccountEntry = accountEntry.RecId;
            accountEntryW.GeneralJournalEntry = accountEntry.GeneralJournalEntry;
            accountEntryW.insert();
        }

        if (!entry.equal(emptyEntry))
        {
            entry.GeneralJournalAccountEntry = accountEntry.RecId;
            entry.insert();
        }

        this.insertTaxLinks(accountEntry, adapter.getTaxTransRelations(_trans.asObject()));
        this.updateSubLedgers(accountEntry, adapter.getSubLedgers(_trans.asObject()));

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Loads list of unbonded transaction by given _voucherEntry
    /// </summary>
    /// <param name="_voucherEntry">
    /// SubledgerVoucherGeneralJournalEntry
    /// </param>
    protected void load(SubledgerVoucherGeneralJournalEntry _voucherEntry)
    {
        GeneralJournalAccountEntry          accountEntry;
        GeneralJournalAccountEntry_W        accountEntryW;
        LedgerVoucherTransObject            transObject;
        LedgerBondableTrans_RU              bondableTrans;
        TmpLedgerBondResultTransaction_RU   resultTransaction;

        voucherEntry = _voucherEntry;

        while select accountEntry
            where accountEntry.GeneralJournalEntry == _voucherEntry.GeneralJournalEntry
        exists join BondBatchTrans_RU from accountEntryW
            where accountEntryW.GeneralJournalAccountEntry == accountEntry.RecId
                && accountEntryW.BondBatchTrans_RU == 0
        {
            transObject = LedgerVoucherTransObject::newGeneralJournal(accountEntry);
            transObject.parmTaxParentReferenceTableId(accountEntry.TableId);
            transObject.parmTaxParentReferenceRecId(accountEntry.RecId);
            transObject.parmTempRecId(bondServer.lastVrefId() + 1);
            this.loadTaxTransLedgerEntries(transObject, accountEntry);
            bondableTrans = adapter.adapt(transObject, this.parmDetailSummary(), this.loadSubLedgers(accountEntry));
            bondServer.addTrans(bondableTrans);

            resultTransaction = TmpLedgerBondResultTransaction_RU::newByTransObject(bondableTrans);
            //bondApplier.addCheckBalance(resultTransaction);
            loadedIDs.add(bondableTrans.parmID());
            idsToTransObjects.insert(bondableTrans.parmID(), transObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSubLedgers</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns set of RecIDs of SubLedgerJournalAccountEntry linked with given GeneralJournalAccountEntry
    /// </summary>
    /// <param name="_accountEntry">
    /// GeneralJournalAccountEntry
    /// </param>
    /// <returns>
    ///  set of SubLedgerJournalAccountEntry recID's
    /// </returns>
    protected Set loadSubLedgers(GeneralJournalAccountEntry _accountEntry)
    {
        SubLedgerJournalAccountEntry subledgerEntry;
        Set ret = new Set(Types::Int64);

        while select RecId from subledgerEntry
            where subledgerEntry.GeneralJournalAccountEntry == _accountEntry.RecId
        {
            ret.add(subledgerEntry.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxTransLedgerEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads  TaxTransGeneralJournalAccountEntry records, related to GeneralJournalAccountEntry transaction object
    /// </summary>
    /// <param name="_transObject">
    ///  Transaction object
    /// </param>
    /// <param name="_accountEntry">
    /// GeneralJournalAccountEntry
    /// </param>
    protected void loadTaxTransLedgerEntries(LedgerVoucherTransObject _transObject, GeneralJournalAccountEntry _accountEntry)
    {
        TaxTransGeneralJournalAccountEntry taxEntry;

        while select TaxTrans, TaxTransRelationship from taxEntry
            where taxEntry.GeneralJournalAccountEntry == _accountEntry.RecId
        {
            _transObject.addTaxTransRelationship(taxEntry.TaxTrans, taxEntry.TaxTransRelationship);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates new LedgerBondManual_RU
    /// </summary>
    /// <param name="_voucherEntry">
    /// SubledgerVoucherGeneralJournalEntry
    /// </param>
    protected void new(SubledgerVoucherGeneralJournalEntry _voucherEntry)
    {
        bondServer          = new LedgerBondServer_RU();
        bondClient          = new LedgerBondClient_RU(bondServer, _voucherEntry.AccountingDate);
        adapter             = new LedgerBondTransAdapter_GeneralJournal_RU(
                                LedgerVoucherObject::newVoucher(_voucherEntry.Voucher,
                                                                _voucherEntry.AccountingDate));
        bondApplier         = new LedgerBondApplier_RU(bondClient, bondServer, adapter);
        loadedIDs           = new Set(extendedTypeId2Type(extendedtypenum(LedgerBondId_RU)));
        idsToTransObjects   = new Map(extendedTypeId2Type(extendedtypenum(LedgerBondId_RU)), Types::Class);
        bondApplier.onManualBond += eventHandler(this.showManualBondAction);
        this.load(_voucherEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetailSummary</Name>
				<Source><![CDATA[
    protected DetailSummary parmDetailSummary(DetailSummary  _detailSummary = detailSummary)
    {
        detailSummary = _detailSummary;
        return detailSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processExisting</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updates or inserts all transactions from _bonded
    /// </summary>
    /// <param name="_bonded">
    /// list of TmpLedgerBondResultTransaction_RU
    /// </param>
    /// <returns>
    ///  Set of VRefIDs which do not exist in _bonded
    /// </returns>
    protected Set processExisting(RecordSortedList _bonded)
    {
        Set                                 forDelete = Set::create(loadedIDs.pack());
        boolean                             hasMore;
        TmpLedgerBondResultTransaction_RU   resultTrans;

        for (hasMore = _bonded.first(resultTrans); hasMore; hasMore = _bonded.next(resultTrans))
        {
            if (loadedIDs.in(resultTrans.BondId))
            {
                this.updateTransaction(resultTrans);
                forDelete.remove(resultTrans.BondId);
            }
            else
            {
                this.insertTransaction(resultTrans);
            }
        }
        return forDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save manual choosen correspondence
    /// </summary>
    /// <param name="_detailSummary">
    /// Specify summation level.
    /// </param>
    /// <returns>
    /// True if no errors has occured; otherwise false.
    /// </returns>
    public boolean save(DetailSummary _detailSummary)
    {
        RecordSortedList bonded;

        this.parmDetailSummary(_detailSummary);

        ttsbegin;
        this.addLoaded();
        bonded = bondApplier.getResult();

        if (bondApplier.fatalErrorState())
        {
            ttsabort;
            return false;
        }

        this.deleteTransactions(this.processExisting(bonded));
        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTaxLinks</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Replaces all taxTransGeneralJournalAccountEntries from _accountEntry with _taxLinks
    /// </summary>
    /// <param name="_accountEntry">
    ///   RecID from that parameter used
    /// </param>
    /// <param name="_taxLinks">
    ///   collection of recIDs and TaxTransRelationshipType
    /// </param>
    protected void saveTaxLinks(GeneralJournalAccountEntry _accountEntry, LedgerPostingOneToManyCollection _taxLinks)
    {
        TaxTransGeneralJournalAccountEntry taxLink;

        delete_from taxLink where taxLink.GeneralJournalAccountEntry == _accountEntry.RecId;
        this.insertTaxLinks(_accountEntry, _taxLinks);
    }

]]></Source>
			</Method>
			<Method>
				<Name>server</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets bond server;
    /// </summary>
    /// <returns>
    /// A current instance of bond server.
    /// </returns>
    public LedgerBondServer_RU server()
    {
        return bondServer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showManualBondAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows warnig messages.
    /// </summary>
    /// <param name="_warningMessage">
    /// Text of warning.
    /// </param>
    /// <param name="_helpURL">
    /// String of url.
    /// </param>
    /// <remarks>
    /// This method is called by delegate.
    /// </remarks>
    public void showManualBondAction(str _warningMessage, str _helpURL)
    {
        warning(_warningMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubLedgers</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Update GeneralJournalAccountEntrySubledgerJournalAccountEntry.GeneralJournalAccountEntry from _subLedgers by _accountEntry.RecId value
    /// </summary>
    /// <param name="_accountEntry">
    ///   RecID from that parameter used
    /// </param>
    /// <param name="_subLedgers">
    ///   Set of recIDs of SubledgerJournalLines
    /// </param>
    protected void updateSubLedgers(GeneralJournalAccountEntry _accountEntry, Set _subLedgers)
    {
        GeneralJournalAccountEntrySubledgerJournalAccountEntry generalJournalAccountEntrySubledgerJournalAccountEntry;
        SubledgerJournalAccountEntry subledgerEntry;

        Enumerator enumerator = _subLedgers.getEnumerator();

        while (enumerator.moveNext())
        {
            subledgerEntry = SubLedgerJournalAccountEntry::find(enumerator.current(), true);
            subledgerEntry.GeneralJournalAccountEntry = _accountEntry.RecId;
            subledgerEntry.update();
  	

            select firstonly forupdate generalJournalAccountEntrySubledgerJournalAccountEntry
                where generalJournalAccountEntrySubledgerJournalAccountEntry.SubledgerJournalAccountEntry == enumerator.current();

            generalJournalAccountEntrySubledgerJournalAccountEntry.GeneralJournalAccountEntry = _accountEntry.RecId;

            if (generalJournalAccountEntrySubledgerJournalAccountEntry.RecId == 0)
            {
                generalJournalAccountEntrySubledgerJournalAccountEntry.SubledgerJournalAccountEntry = enumerator.current();
                generalJournalAccountEntrySubledgerJournalAccountEntry.insert();
            }
            else
            {
                generalJournalAccountEntrySubledgerJournalAccountEntry.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates general journal with given _trans
    /// </summary>
    /// <param name="_trans">
    ///   TmpLedgerBondResultTransaction_RU
    /// </param>
    private void updateTransaction(TmpLedgerBondResultTransaction_RU _trans)
    {
        LedgerVoucherTransObject voucherObject = idsToTransObjects.lookup(_trans.BondId);

        GeneralJournalAccountEntry  accountEntry;
        GeneralJournalAccountEntry_W accountEntryW;
        LedgerEntry                 ledgerEntry;

        select forupdate accountEntry
            where accountEntry.RecId == voucherObject.parmGeneralJournalAccountEntry().RecId;

        select forupdate ledgerEntry
            where ledgerEntry.RecId == voucherObject.parmLedgerEntry().RecId;

        accountEntryW = GeneralJournalAccountEntry_W::findByGeneralJournalAccountEntry(accountEntry.RecId);
        accountEntryW.selectForUpdate(true);

        adapter.update(_trans.asObject(), accountEntry, accountEntryW, ledgerEntry);
        accountEntry.update();

        if (accountEntryW != null)
        {
            accountEntryW.update();
        }

        if (ledgerEntry)
        {
            ledgerEntry.update();
        }

        this.saveTaxLinks(accountEntry, adapter.getTaxTransRelations(_trans.asObject()));
        this.updateSubLedgers(accountEntry, adapter.getSubLedgers(_trans.asObject()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static LedgerBondManual_RU construct(SubledgerVoucherGeneralJournalEntry _voucherEntry)
    {
        return new LedgerBondManual_RU(_voucherEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeBondFromVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// will promt the user to remove ladger correspondence from the specified voucher.
    /// </summary>
    /// <param name="_voucherEntry">
    /// <c>SubledgerVoucherGeneralJournalEntry</c> table cursor.
    /// </param>
    /// <returns>
    /// True if the user has agreed to remove, otherwise false.
    /// </returns>
    public static boolean removeBondFromVoucher(SubledgerVoucherGeneralJournalEntry _voucherEntry)
    {
        GeneralJournalAccountEntry accountEntry;
        GeneralJournalAccountEntry_W accountEntryW;

        if (! _voucherEntry ||
            Box::yesNo(strfmt("@GLS106873", _voucherEntry.Voucher),
                       DialogButton::Yes,
                       "@GLS106872") != DialogButton::Yes
        )
        {
            return false;
        }

        ttsbegin;

        accountEntryW.skipDataMethods(true);

        update_recordset accountEntryW
            setting BondBatchTrans_RU = 0
        exists join accountEntry
            where accountEntry.RecId == accountEntryW.GeneralJournalAccountEntry
                && accountEntry.GeneralJournalEntry == _voucherEntry.GeneralJournalEntry;

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>