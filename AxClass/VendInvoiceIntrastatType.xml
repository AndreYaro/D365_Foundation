<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceIntrastatType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendInvoiceIntrastatType</c> class is the helper class for the <c>VendInvoiceIntrastat</c>
///    table. It contains utility methods that are used to modify the table data.
/// </summary>
class VendInvoiceIntrastatType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the record from the <c>VendInvoiceIntrastat</c> table that matches the voucher and
    ///    transdate from the vendor journal line. Since there may be multiple journal lines for each voucher
    ///    in a journal, the intrastat information needs to be deleted only when no such lines exist in the
    ///    journal.
    /// </summary>
    /// <param name="_voucher">
    ///    The voucher number of the journal voucher to delete.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date of the voucher to delete.
    /// </param>
    public static void deleteLine(Voucher _voucher, TransDate _transDate)
    {
        VendInvoiceIntrastat vendInvoiceIntrastat;

        if (!LedgerJournalTrans::findJournalForVoucher(_voucher, _transDate))
        {
            ttsbegin;
            delete_from vendInvoiceIntrastat
                where vendInvoiceIntrastat.Voucher      == _voucher
                   && vendInvoiceIntrastat.TransDate    == _transDate;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses a line in the <c>VendInvoiceIntrastat</c> table when a posted vendor invoice journal
    ///    voucher is reversed or cancelled.
    /// </summary>
    /// <param name="_newVoucher">
    ///    The voucher number of the new journal voucher that was created.
    /// </param>
    /// <param name="_newTransdate">
    ///    The transaction date of the new journal voucher.
    /// </param>
    /// <param name="_origVendInvoiceJourRecId">
    ///    The vendor invoice journal record ID for the original posted journal voucher.
    /// </param>
    /// <param name="_newVendInvoiceJourRecId">
    ///    The vendor invoice journal record ID for the new journal voucher that was created as a result of a
    ///    cancellation or reversal of the original one and then posted.
    /// </param>
    public static void reverseTrans(Voucher   _newVoucher,
                                    TransDate _newTransdate,
                                    RefRecId  _origVendInvoiceJourRecId,
                                    RefRecId  _newVendInvoiceJourRecId)
    {
        VendInvoiceIntrastat vendInvoiceIntrastat   = VendInvoiceIntrastat::findByVendInvoiceJour(_origVendInvoiceJourRecId);

        if (vendInvoiceIntrastat)
        {
            vendInvoiceIntrastat.VendInvoiceJour    = _newVendInvoiceJourRecId;
            vendInvoiceIntrastat.TransDate          = _newTransdate;
            vendInvoiceIntrastat.Voucher            = _newVoucher;
            vendInvoiceIntrastat.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendInvoiceJourRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>VendInvoiceJour</c> field of the <c>VendInvoiceIntrastat</c> table with the
    ///    <c>RecId</c> value of the corresponding <c>VendInvoiceJour</c> record that was created when posting
    ///    the vendor invoice journal line.
    /// </summary>
    /// <param name="_voucher">
    ///    The voucher number of the posted vendor journal voucher.
    /// </param>
    /// <param name="_transDate">
    ///    The voucher number of the posted vendor journal voucher.
    /// </param>
    /// <param name="_vendInvoiceJourRecID">
    ///    The <c>RecId</c> value of the <c>VendInvoiceJour</c> table record that was created when posting the
    ///    journal line.
    /// </param>
    public static void updateVendInvoiceJourRecId(Voucher    _voucher,
                                                  TransDate  _transDate,
                                                  RefRecID   _vendInvoiceJourRecID)
    {
        VendInvoiceIntrastat vendInvoiceIntrastat = VendInvoiceIntrastat::findByVoucherTransDate(_voucher,
                                                                                                 _transDate,
                                                                                                 true);

        if (vendInvoiceIntrastat)
        {
            ttsbegin;
            vendInvoiceIntrastat.VendInvoiceJour = _vendInvoiceJourRecID;
            vendInvoiceIntrastat.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>