<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionSkipInventSumLogTTSContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSkipInventSumLogTTSContext</c> class provides a context to determine if InventSumLogTTS should be skipped.
/// </summary>
internal class WHSInventoryTransactionSkipInventSumLogTTSContext implements System.IDisposable
{
    private static WHSInventoryTransactionSkipInventSumLogTTSContext instance;
    private WHSInventoryTransactionSkipInventSumLogTTSContext previousInstance;
    private boolean skipInventSumLogTTS;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (instance)
        {
            previousInstance = instance;
        }

        instance = this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void Dispose()
    {
        if (previousInstance)
        {
            instance = previousInstance;
            previousInstance = null;
        }
        else
        {
            instance = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the class.
    /// </summary>
    /// <returns>A new instance of the class.</returns>
    internal static WHSInventoryTransactionSkipInventSumLogTTSContext construct()
    {
        return new WHSInventoryTransactionSkipInventSumLogTTSContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipInventSumLogTTS</Name>
				<Source><![CDATA[
    internal boolean parmSkipInventSumLogTTS(boolean _skipInventSumLogTTS = skipInventSumLogTTS)
    {
        skipInventSumLogTTS = _skipInventSumLogTTS;

        return skipInventSumLogTTS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipInventSumLogTTS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if InventSumLogTTS should be skipped.
    /// </summary>
    /// <returns>true if InventSumLogTTS should be skipped; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean skipInventSumLogTTS()
    {
        if (instance)
        {
            return instance.parmSkipInventSumLogTTS();
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>