<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationMatchingController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceAutomationMatchingController</c> class is a <c>SysOperationServiceController</c> class
/// performs processing on vendor invoices during execution of the automatic matching background process.
/// </summary>
internal final class VendInvoiceAutomationMatchingController extends SysOperationServiceController implements BatchRetryable
{
    private static VendInvoiceAutomationMatchingLogHandler matchingLogHandler;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    protected ClassDescription defaultCaption()
    {
        return "@AccountsPayable:AutomationMatchingBatchJobCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    internal boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationMatchingController construct()
    {
        return new VendInvoiceAutomationMatchingController(
            classStr(VendInvoiceAutomationMatchingController),
            methodStr(VendInvoiceAutomationMatchingController, runMatching),
            SysOperationExecutionMode::ReliableAsynchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMatching</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run automatic matching batch job.
    /// </summary>
    /// <param name="_processScheduleWorkItem">
    /// Automatic matching process schedule workitem.
    /// </param>
    internal void runMatching(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        VendInvoiceAutomationInvoicesInMatching::removeStaleAutomationMatchingRecords();

        matchingLogHandler = VendInvoiceAutomationMatchingLogHandler::initializeMatchingLogHandler(_processScheduleWorkItem);

        VendInvoiceAutomationInvoiceTmp invoicesReadyForMatching =
            VendInvoiceAutomationMatchingFilter::collectInvoicesReadyForAutomationMatching(matchingLogHandler);

        try
        {
            VendInvoiceAutomationInvoicesInMatching::insertMatchingRecordsFor(invoicesReadyForMatching);
            VendInvoiceAutomationMatchingController::matchVendorInvoices(invoicesReadyForMatching);
        }
        finally
        {
            VendInvoiceAutomationInvoicesInMatching::removeMatchingRecordsFor(invoicesReadyForMatching);
            VendInvoiceAutomationInvoicesInMatchingValidation::insertMatchingValidationRecordsFor(invoicesReadyForMatching);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchVendorInvoices</Name>
				<Source><![CDATA[
    private static void matchVendorInvoices(VendInvoiceAutomationInvoiceTmp _invoicesReadyForMatching)
    {
        // Performs matching process with applicable invoices per company.
        VendInvoiceAutomationInvoiceTmp invoicesCompanyTmp;
        VendInvoiceAutomationInstrumentationMatchingActivities instrumentationMatchingActivities =
            VendInvoiceAutomationInstrumentationMatchingActivities::createFromLoggerName(classStr(VendInvoiceAutomationMatchingController));

        using (var activityContext = instrumentationMatchingActivities.matchVendorInvoicesContext())
        {
            invoicesCompanyTmp.linkPhysicalTableInstance(_invoicesReadyForMatching);

            while select VendInvoiceDataAreaId from invoicesCompanyTmp
            group by invoicesCompanyTmp.VendInvoiceDataAreaId
            {
                changecompany(invoicesCompanyTmp.VendInvoiceDataAreaId)
                {
                    VendInvoiceAutomationInvoiceTmp invoicesReadyForMatchingPerCompany;

                    if ((!VendInvoiceAutomationMatchingSetBasedFlight::instance().isEnabled())
                        && VendorInvoiceAutomationMatchMinPackingSlipFeature::instance().isEnabled()
                        && VendInvoiceAutomationSplitFlight::instance().isEnabled())
                    {
                        select firstonly VendInvoiceDataAreaId from _invoicesReadyForMatching
                            where _invoicesReadyForMatching.VendInvoiceDataAreaId == invoicesCompanyTmp.VendInvoiceDataAreaId;

                        while (_invoicesReadyForMatching.VendInvoiceDataAreaId)
                        {
                            VendInvoiceAutomationInvoiceTmp invoicesReadyForMatchingPerCompanyOrig;

                            insert_recordset invoicesReadyForMatchingPerCompany(
                                VendInvoiceRecId,
                                VendInvoiceDataAreaId,
                                VendInvoiceParmId,
                                VendInvoiceTableRefId,
                                VendInvoiceNum)
                            select firstonly100 VendInvoiceRecId,
                                VendInvoiceDataAreaId,
                                VendInvoiceParmId,
                                VendInvoiceTableRefId,
                                VendInvoiceNum from _invoicesReadyForMatching
                                    where _invoicesReadyForMatching.VendInvoiceDataAreaId == invoicesCompanyTmp.VendInvoiceDataAreaId;

                            insert_recordset invoicesReadyForMatchingPerCompanyOrig(
                                VendInvoiceRecId,
                                VendInvoiceDataAreaId,
                                VendInvoiceParmId,
                                VendInvoiceTableRefId,
                                VendInvoiceNum)
                            select firstonly100 VendInvoiceRecId,
                                VendInvoiceDataAreaId,
                                VendInvoiceParmId,
                                VendInvoiceTableRefId,
                                VendInvoiceNum from _invoicesReadyForMatching
                                    where _invoicesReadyForMatching.VendInvoiceDataAreaId == invoicesCompanyTmp.VendInvoiceDataAreaId;

                            VendInvoiceMatch::matchingInBatch(invoicesReadyForMatchingPerCompany, matchingLogHandler);

                            VendInvoiceAutomationInvoicesInMatching::removeMatchingRecordsFor(invoicesReadyForMatchingPerCompanyOrig);
                            VendInvoiceAutomationInvoicesInMatchingValidation::insertMatchingValidationRecordsFor(invoicesReadyForMatchingPerCompanyOrig);

                            delete_from _invoicesReadyForMatching
                                exists join invoicesReadyForMatchingPerCompanyOrig
                                where _invoicesReadyForMatching.VendInvoiceRecId == invoicesReadyForMatchingPerCompanyOrig.VendInvoiceRecId;

                            delete_from invoicesReadyForMatchingPerCompany;

                            select firstonly VendInvoiceDataAreaId from _invoicesReadyForMatching
                                where _invoicesReadyForMatching.VendInvoiceDataAreaId == invoicesCompanyTmp.VendInvoiceDataAreaId;
                        }
                        
                    }
                    else
                    {
                        insert_recordset invoicesReadyForMatchingPerCompany(
                                VendInvoiceRecId,
                                VendInvoiceDataAreaId,
                                VendInvoiceParmId,
                                VendInvoiceTableRefId,
                                VendInvoiceNum)
                            select VendInvoiceRecId,
                                VendInvoiceDataAreaId,
                                VendInvoiceParmId,
                                VendInvoiceTableRefId,
                                VendInvoiceNum from _invoicesReadyForMatching
                                    where _invoicesReadyForMatching.VendInvoiceDataAreaId == invoicesCompanyTmp.VendInvoiceDataAreaId;

                        VendInvoiceMatch::matchingInBatch(invoicesReadyForMatchingPerCompany, matchingLogHandler);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>