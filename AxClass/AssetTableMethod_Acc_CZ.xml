<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_Acc_CZ</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// To calculate Depreciation using Accelerated CZ method based on Value model.
/// </summary>
public final class AssetTableMethod_Acc_CZ extends AssetTableMethod_CZ
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>periodAmount</Name>
				<Source><![CDATA[
	/// <summary>
    /// Calculates the period amount.
    /// </summary>
    /// <param name = "_alreadyDepreciatedPeriods">Already depreciated periods.</param>
    /// <param name = "_depCoefficient">The depreciation coefficient.</param>
    /// <returns>The period amount.</returns>
    private AssetAmount periodAmount(AssetInterval _alreadyDepreciatedPeriods, Percent _depCoefficient)
    {
        AssetAmount ret = 0.0;

        Percent factor = _depCoefficient - _alreadyDepreciatedPeriods + 1;

        if (factor)
        {
            AssetAmount netBookValue = amountToDepreciate - prevDepAmount + prevYearlyAmount - prevDepAmountExternal;

            ret = 2 * netBookValue / factor;
        }
		else
        {
            info(strFmt("@GLS110779", assetBook.AssetId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the depreciation.
    /// </summary>
    /// <returns>
    /// Depreciation Amount.
    /// </returns>
    public AssetAmount calc()
    {
        AssetAmount periodAmount;
        Percent thisPercentage;

        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();
            this.setAmountToDepreciate();
            AssetTransDate firstYearEndDate = deprYearInterval.endPeriod(assetBook.DepreciationStartDate);
            AssetDepreciationRate_W assetRate = AssetDepreciationGroup_W::findRate(assetBook.DepreciationGroupId_W, this.depDate());

            if (assetRate)
            {
                AssetTrans assetTrans;
                TransactionReversalTrans transactionReversalTrans;
                select firstonly RecId from assetTrans
					where assetTrans.AssetId == assetBook.AssetId
						&& assetTrans.BookId == assetBook.BookId
						&& assetTrans.TransDate <= this.depDate()
						&& assetTrans.TransDate > firstYearEndDate
						&& assetTrans.TransType == AssetTransType::AcquisitionAdj
						&& assetTrans.PostingType_W != RAssetPostingType::Split
					notexists join transactionReversalTrans
						where transactionReversalTrans.RefTableId == tableNum(AssetTrans)
							&& transactionReversalTrans.RefRecId == assetTrans.RecId;

                if (assetTrans.RecId)
                {
                    AssetTrans assetTransLastAdd;
                    select maxof(TransDate) from assetTransLastAdd
						where assetTransLastAdd.AssetId == assetBook.AssetId
							&& assetTransLastAdd.BookId == assetBook.BookId
							&& assetTransLastAdd.TransDate <= this.depDate()
							&& assetTransLastAdd.TransType == AssetTransType::AcquisitionAdj
							&& assetTransLastAdd.PostingType_W != RAssetPostingType::Split
                        notexists join transactionReversalTrans
                            where transactionReversalTrans.RefTableId == tableNum(AssetTrans)
                                && transactionReversalTrans.RefRecId == assetTransLastAdd.RecId;

                    thisPercentage = assetRate.FactorExt;
                    periodAmount = this.periodAmount(this.yearDifference(assetTransLastAdd.TransDate, this.depDate()), thisPercentage);
                }
                else
                {
                    if (this.depDate() <= firstYearEndDate)
                    {
                        thisPercentage = assetRate.Factor;
                        if (thisPercentage == 0 )
                        {
                           info("@GLS220251");
                           periodAmount = 0;
                        }
                        else
                        {
                           periodAmount = amountToDepreciate / thisPercentage;
                        }
                    }
                    else
                    {
                        thisPercentage = assetRate.FactorAlt;
                        periodAmount = this.periodAmount(this.yearDifference(assetBook.DepreciationStartDate, this.depDate()), thisPercentage);
                    }
                }
                periodAmount = periodAmount * currentPeriod / periodsInCurrentYear;
                if (currentPeriod > 1)
                {
                    periodAmount = periodAmount - prevYearlyAmount;
                }

                // If half depreciation is run , then halve the amount
                if (halfDepreciation && (depreciationDate == parmRunDate))
                {
                    periodAmount=periodAmount / 2;
                }

                periodAmount = assetBook.roundOffDepreciation(periodAmount);
            }
            else
            {
                warning(strFmt("@GLS108281", this.depDate()));
                periodAmount = 0;
            }

            periodEnd ++;
            periodstart = periodEnd;
            periodEnd = deprInterval.endPeriod(periodstart);

            // If half depreciation is run then end the period
            if (periodEnd > parmRunDate && halfDepreciation)
            {
                periodEnd = parmRunDate;
            }
            if (periodAmount > amountToDepreciate - prevDepAmount - prevDepAmountExternal)
            {
                periodAmount = amountToDepreciate - prevDepAmount - prevDepAmountExternal;
            }

            prevDepAmount += periodAmount;
            prevYearlyAmount += periodAmount;

            if (amountToDepreciate <= prevDepAmount + prevDepAmountExternal || periodAmount <= 0)
            {
                theEnd = true;
            }
        }

        return periodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>yearDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the period difference between the two transaction dates.
    /// </summary>
    /// <param name="_startDate">
    /// The start date.
    /// </param>
    /// <param name="_endDate">
    /// The end date.
    /// </param>
    /// <returns>
    /// returns the year difference.
    /// </returns>
    /// <remarks>
    /// Runs for both calendar and fiscal.
    /// </remarks>
    private Yr yearDifference(TransDate _startDate, TransDate _endDate)
    {
        Yr yearDifference;

        AssetBookTable assetBookTable = AssetBookTable::find(assetBook.BookId);
        // gets the current calendar
        FiscalCalendarRecId fiscalCalendarId = assetBookTable.getFiscalCalendar();

        if (assetBook.depreciationProfile().DepreciationYear == AssetDepreciationYear::Calendar)
        {
            if (year(_endDate) <= year(_startDate))
            {
                yearDifference = 1;
            }
            else
            {
                yearDifference = year(_endDate) - year(_startDate) + 1;
            }
        }
        else
        {
            FiscalCalendarPeriod ledgerPeriod;
            select count(RecId) from ledgerPeriod
                where ledgerPeriod.EndDate >= _startDate
                    && ledgerPeriod.EndDate < _endDate
                    && ledgerPeriod.Type == FiscalPeriodType::Closing
                    && ledgerPeriod.FiscalCalendar == fiscalCalendarId;

            yearDifference = any2int(ledgerPeriod.RecId + 1);
        }

        // Subtract the suspended years from the year difference.
        // Depreciation should not consider the suspended years.
        AssetDepSuspension_CZ assetDepSuspension_CZ;
        select count(RecId) from assetDepSuspension_CZ
            where assetDepSuspension_CZ.SuspensionDate  >= _startDate
                && assetDepSuspension_CZ.SuspensionDate  <= _endDate
                && assetDepSuspension_CZ.AssetId == assetBook.AssetId
                && assetDepSuspension_CZ.BookId == assetBook.BookId;

        yearDifference -= int642int(assetDepSuspension_CZ.RecId);

        return yearDifference;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>