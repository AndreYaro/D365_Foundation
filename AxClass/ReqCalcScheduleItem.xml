<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcScheduleItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqCalcScheduleItem  extends ReqCalc implements BatchRetryable
{
    ItemId          itemId;
            
    DialogField     dialogRecalculateBomLevels;

    #DEFINE.CurrentVersion(7)

    #LOCALMACRO.CurrentList
        ItemId
    #ENDMACRO

    #DEFINE.CurrentPromptVersion(1)
    #LOCALMACRO.CurrentPromptList
        recalculateBomLevels
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRequisitionLineDemandFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds relevant filters to the query that finds requisition lines demand.
    /// </summary>
    /// <param name="_query">
    /// The query to add the filters to.
    /// </param>
    protected void addRequisitionLineDemandFilters(Query _query)
    {
        QueryBuildDataSource requisitionLine = _query.dataSourceTable(tableNum(PurchReqLine));
        requisitionLine.addRange(fieldNum(PurchReqLine, ItemId)).value(queryValue(itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return strFmt("@SYS25346",itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dflReqPlanId     = dialog.addFieldValue(extendedTypeStr(ReqPlanIdSched), reqPlanId);

        dflReqCalcUpdate = dialog.addFieldValue(enumStr(ReqCalcUpdate), reqCalcUpdate);

        dialogRecalculateBomLevels = dialog.addFieldValue(extendedTypeStr(NoYesId), false, "@SYS112515");

        this.dialogQueryButton();

        dialog.allowUpdateOnSelectCtrl(true);

        this.dialogSelectCtrl();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogQueryButton</Name>
				<Source><![CDATA[
    public void dialogQueryButton()
    {
        return ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    When using the dialog class for dialog, this method is called whenever a control is selected.
    /// </summary>
    /// <remarks>
    ///    To enable this callback, the <c>allowUpdateOnSelectCtrl</c> method must have been set true.
    /// </remarks>
    void dialogSelectCtrl()
    {
        super();

        if (dflReqPlanId.value() != ReqPlanSched::defaultDynamicId())
        {
            dflReqCalcUpdate.value(ReqCalcUpdate::Regeneration);
            dflReqCalcUpdate.allowEdit(false);
        }
        else
        {
            dflReqCalcUpdate.allowEdit(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        reqPlanId       = dflReqPlanId.value();

        reqCalcUpdate   = dflReqCalcUpdate.value();

        recalculateBomLevels = dialogRecalculateBomLevels.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntercompanyDemandQuery</Name>
				<Source><![CDATA[
    protected QueryRun getIntercompanyDemandQuery(ReqIntercompanyQueryFactory _queryFactory, Set _lockedPlanVersions, ReqProcessId _processId)
    {
        return _queryFactory.getIncomingDemandQueryForItem(_lockedPlanVersions, this.parmItemId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReqLog</Name>
				<Source><![CDATA[
    protected void initReqLog()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    protected void insertData()
    {
        ReqSetup        setup;

        setup = reqPlanData.newReqSetup(itemId);

        if (setup.mustItemReqBeCreated())
        {
            this.updateItemLock(itemId);

            if (reqCalcUpdate == ReqCalcUpdate::Regeneration)
            {
                this.insertItemSched(setup);
            }
            else
            {
                this.updateReqTransUpdate(itemId);

                this.addItem2ReqTransCache(itemId,reqCalcUpdate == ReqCalcUpdate::NetChangeMinimized,reqCalcUpdate == ReqCalcUpdate::NetChange);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertItemSched</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the <c>ReqTrans</c> records to create the requirement profile.
    /// </summary>
    /// <param name="_setup">
    ///    A <c>ReqSetup</c> object that contains the coverage settings for the specified item ID.
    /// </param>
    /// <param name="_deleteBeforeInsert">
    ///    A Boolean value that indicates whether the requirement profile is deleted before any new records
    ///    are inserted.
    /// </param>
    protected void insertItemSched(
        ReqSetup    _setup,
        boolean     _deleteBeforeInsert = true
        )
    {
        utcdatetime utcInsertStarted;
        boolean     loopIssue;
        boolean     loopReceipt;

        if (_setup.mustItemReqBeCreated())
        {
            setprefix(fieldLabelValue(tablenum(InventTable), fieldnum(InventTable,ItemId), _setup.itemId()));

            if (_deleteBeforeInsert)
            {
                this.insertApprovedPo(_setup.itemId());

                this.deleteItemRequirement(_setup);

                this.addItem2ReqTransCache(_setup.itemId(),false);
            }

            utcInsertStarted = DateTimeUtil::utcNow();

            [loopIssue,loopReceipt] = this.insertItemInventSum(_setup, false);
            this.insertItemInventTrans(_setup,'',loopIssue,loopReceipt);
            this.insertItemSafetyInvent(_setup);
            this.insertItemForecastInvent(_setup);
            this.mcrInsertItemContinuitySales(_setup);

            if (reqParameters.mustDeleteInventSumLogTTS(reqPlanId, this.isCompleteUpdate()))
            {
                if (ReqPlanManager::isDefaultDynamicReqPlanLocked())
                {
                    InventSumLogTTS::softDeleteItemId(_setup.itemId(), utcInsertStarted);
                }
                else
                {
                    InventSumLogTTS::deleteItemId(_setup.itemId(), utcInsertStarted);
                }
            }

            this.applyKeptCoverage(_setup);
        }

        this.setReqTransUpdated(_setup.itemId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseCacheDuringUpdate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustUseCacheDuringUpdate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustExplodeNonPlannedReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if non-planned receipts should also be exploded.
    /// </summary>
    /// <returns>
    /// true when non-planned receipts should be exploded; otherwise, false.
    /// </returns>
    protected boolean mustExplodeNonPlannedReceipt()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptPack</Name>
				<Source><![CDATA[
    protected container promptPack(boolean promptRet = true)
    {
        return [#CurrentPromptVersion,#CurrentPromptList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptUnpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpack packed prompt.
    /// </summary>
    /// <param name="packedClass">
    /// The packed data.
    /// </param>
    /// <param name="promptRet">
    /// The prompt status
    /// </param>
    /// <returns>
    /// true if unpack succeeds; otherwise, false.
    /// </returns>
    public boolean promptUnpack(container packedClass, boolean promptRet = true)
    {
        Integer         version        = conPeek(packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentPromptVersion:
                [version,#CurrentPromptList,base] = packedClass;
                super(base);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    protected void setParameters()
    {
        super();
        reqTransCache.parmUseReqTransFilter(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsbegin</Name>
				<Source><![CDATA[
    protected void ttsbegin()
    {
        ttsbegin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttscommit</Name>
				<Source><![CDATA[
    protected void ttscommit()
    {
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version        = conPeek(packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,base] = packedClass;
                super(base);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCache</Name>
				<Source><![CDATA[
    public ReqUseCache useCache()
    {
        return ReqUseCache::Maximum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (!itemId)
        {
            return checkFailed("@SYS23094");
        }

        if (!ReqPlanSched::find(this.parmReqPlanId()).RecId)
        {
            return checkFailed(strFmt("@SYS25368",this.parmReqPlanId()));
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ReqCalcScheduleItem construct()
    {
        return new ReqCalcScheduleItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS25297";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateInstrumentationContext</Name>
				<Source><![CDATA[
    protected SysInstrumentationActivityContext initiateInstrumentationContext()
    {
        return this.reqInstrumentationLogger().calc().netChange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqInstrumentationLoggerClassName</Name>
				<Source><![CDATA[
    protected ClassName reqInstrumentationLoggerClassName()
    {
        return classStr(ReqCalcScheduleItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        #OCCRetryCount
        ItemId                      itemId;
        ReqCalcScheduleItem         reqCalcScheduleItem;
        ReqPlanId                   reqPlanId;
        ReqTransForm                reqTransForm;

        itemId    = ReqCalc::argsItemId(args);
        reqPlanId = ReqCalc::argsReqPlanId(args);

        if (!itemId)
        {
            throw error("@SYS25599");
        }

        reqCalcScheduleItem = ReqCalcScheduleItem::newItemId(itemId,reqPlanId);

        if (!reqCalcScheduleItem.prompt())
        {
            return;
        }
        
        try
        {
            reqCalcScheduleItem.runOperation();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            var currentRetryCount = xSession::currentRetryCount();
            if (currentRetryCount >= #RetryNum || !ReqTransientSqlConnectionErrorHandlingHelper::isReqTransientSqlConnectionErrorHandlingToggleEnabled())
            {
                reqCalcScheduleItem.cleanUp();
                throw;
            }
            else
            {
                ReqTransientSqlConnectionErrorHandlingHelper::delayRetry(currentRetryCount);
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    reqCalcScheduleItem.cleanUp();
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                reqCalcScheduleItem.cleanUp();
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::CLRError)
        {
            ApplicationUnhandledExceptionLogger::processUnhandledCLRException();
        }
        catch
        {
            reqCalcScheduleItem.cleanUp();
        }        

        if (args.caller().name() == formStr(ReqTransOverview))
        {
            reqTransForm =  args.caller().reqTransForm();
            reqTransForm.doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemId</Name>
				<Source><![CDATA[
    public static ReqCalcScheduleItem newItemId(ItemId _itemId, ReqPlanIdSched _reqPlanIdSched)
    {
        ReqCalcScheduleItem reqCalcScheduleItem  = ReqCalcScheduleItem::construct();
        reqCalcScheduleItem.getLast();
        reqCalcScheduleItem.parmItemId(_itemId);
        if (_reqPlanIdSched)
        {
            reqCalcScheduleItem.parmReqPlanId(_reqPlanIdSched);
        }
        reqCalcScheduleItem.parmAutoReserveCoverage(false);

        return reqCalcScheduleItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPlanningItemSupplyFilters</Name>
				<Source><![CDATA[
    protected void addPlanningItemSupplyFilters(Query _query)
    {
        QueryBuildDataSource prodTableDs = _query.dataSourceTable(tableNum(ProdTable));

        prodTableDs.addRange(fieldNum(ProdTable, ItemId)).value(queryValue(itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>