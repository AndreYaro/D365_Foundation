<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetFutureValueDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Fetches records for the <c>AssetFutureValue</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetFutureValueBaseData)),
    SRSReportParameterAttribute(classstr(AssetFutureValueContract))
]
public class AssetFutureValueDP extends SRSReportDataProviderPreProcessTempDb
{
    AmountMST openingAmount;
    AmountMST balancePeriod[,5];
    AmountMST amountPeriod[,5];
    AssetGroupId prevAssetGroupId;
    AssetFutureValueTmp assetFutureValueTmp;
    AssetBook assetBook;
    AssetTable assetTable;
    TransDate toDate1;
    TransDate toDate2;
    TransDate toDate3;
    TransDate toDate4;
    AssetBudgetModelId budgetModelId;
    date dateMax;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetFutureValueTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the data from the <c>AssetFutureValueTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>AssetFutureValueTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetFutureValueTmp))
    ]
    public assetFutureValueTmp getAssetFutureValueTmp()
    {
        select assetFutureValueTmp;
        return assetFutureValueTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetFutureValueTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the temporary table.
    /// </summary>
    private void insertAssetFutureValueTmp()
    {
        assetFutureValueTmp.OpeningBalance = openingAmount;
        assetFutureValueTmp.AssetId = assetBook.AssetId;
        assetFutureValueTmp.AssetGroup = assetBook.AssetGroup;
        assetFutureValueTmp.BookId = assetBook.BookId;
        assetFutureValueTmp.AssetName = assetTable.Name;
        assetFutureValueTmp.emptyAmount = 0;
        assetFutureValueTmp.amountPeriod1 = amountPeriod[1];
        assetFutureValueTmp.amountPeriod2 = amountPeriod[2];
        assetFutureValueTmp.amountPeriod3 = amountPeriod[3];
        assetFutureValueTmp.amountPeriod4 = amountPeriod[4];
        assetFutureValueTmp.amountPeriod5 = amountPeriod[5];
        assetFutureValueTmp.balancePeriod1 = balancePeriod[1];
        assetFutureValueTmp.balancePeriod2 = balancePeriod[2];
        assetFutureValueTmp.balancePeriod3 = balancePeriod[3];
        assetFutureValueTmp.balancePeriod4 = balancePeriod[4];
        assetFutureValueTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data based on given parameters and calculations based on criteria.
    /// </summary>
    public void processReport()
    {
        AssetBudget assetBudget;
        QueryRun queryRun;
        Query query = new Query(this.parmQuery());
        AssetFutureValueContract contract = this.parmDataContract() as AssetFutureValueContract;

        List dateList = new List(Types::Date);
        ListEnumerator dateListEnumerator;
        TransDate currentDate;
        TransDate previousDate;
        integer period;

        budgetModelId = contract.parmBudgetModelId();
        dateList.addEnd(contract.parmToDate1());
        dateList.addEnd(contract.parmToDate2());
        dateList.addEnd(contract.parmToDate3());
        dateList.addEnd(contract.parmToDate4());
        dateListEnumerator = dateList.getEnumerator();

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            assetTable = queryRun.get(tablenum(AssetTable));
            assetBook = queryRun.get(tablenum(AssetBook));
            openingAmount = AssetSumCalc_Trans::newAssetYear(assetBook.AssetId, assetBook.BookId,
                                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), AssetYear::All).netBookValue();

            period = 0;
            balancePeriod[period] = 0;
            amountPeriod[period] = 0;
            previousDate = dateNull();
            dateListEnumerator.reset();
            while (dateListEnumerator.moveNext())
            {
                period++;
                currentDate = dateListEnumerator.current();

                // If more than one periods are not defined, skip the summary
                if (currentDate == dateNull() && period > 1)
                {
                    break;
                }

                if (currentDate == dateNull())
                {
                    select sum(AmountCur) from assetBudget
                        where assetBudget.AssetId == assetBook.AssetId
                          && assetBudget.BookId == assetBook.BookId
                          && assetBudget.BudgetModel == budgetModelId
                          && assetBudget.TransDate > previousDate;
                }
                else
                {
                    select sum(AmountCur) from assetBudget
                        where assetBudget.AssetId == assetBook.AssetId
                          && assetBudget.BookId == assetBook.BookId
                          && assetBudget.BudgetModel == budgetModelId
                          && assetBudget.TransDate <= currentDate
                          && assetBudget.TransDate > previousDate;
                }

                balancePeriod[period] = assetbudget.AmountCur;
                amountPeriod[period] = balancePeriod[period];
                amountPeriod[5] += amountPeriod[period];

                if (period == 1)
                {
                    balancePeriod[period]  +=  openingAmount;
                }
                else
                {
                    balancePeriod[period]  +=  balancePeriod[period-1];
                }

                if (currentDate == dateNull())
                {
                    break;
                }
                else
                {
                    previousDate = currentDate;
                }
            }

            this.insertAssetFutureValueTmp();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>