<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationFacade</c> class is the overall facade.
/// </summary>
public final static class TaxIntegrationFacade
{
    public const str LoggerName = 'Tax Integration - Facade';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the tax.
    /// </summary>
    /// <param name = "_document">The document.</param>
    [Replaceable]
    public static void calculate(TaxIntegrationDocumentObject _document)
    {
        TaxIntegrationSequence sequence = TaxIntegrationSequence::construct(LoggerName)
            .appendActivityOnDocument(TaxIntegrationSettingRetrievalActivityOnDocument::construct())
            .appendActivityOnDocument(TaxIntegrationDataRetrievalActivityOnDocument::construct())
            .appendActivityOnDocument(TaxIntegrationCalculationActivityOnDocument::construct())
            .appendActivityOnDocument(TaxIntegrationErrorHandlingActivityOnDocument::construct())
            .appendActivityOnline(TaxIntegrationTaxCodeCheckActivityOnLine::construct())
            .appendActivityOnDocument(TaxIntegrationTaxIdActivityOnDocument::construct())
            .appendActivityOnDocument(TaxIntegrationListCodeActivityOnDocument::construct())
            .appendActivityOnLine(TaxIntegrationDateOfVATRegisterActivityOnLine::construct())
            .appendActivityOnDocument(TaxIntegrationCurrencyExchangeActivityOnDocument::construct())
            .appendActivityOnDocument(TaxIntegrationDataPersistenceActivityOnDocument::construct());
        sequence.act(_document);

        if (!_document.isOK())
        {
            throw _document.getException();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxToISV</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the actual tax with the corresponding taxable document to tax calculation service.
    /// </summary>
    /// <param name = "_sourceTableId">The source table Id.</param>
    /// <param name = "_sourceRecId">The source RecId.</param>
    [Replaceable]
    public static void postTaxToISV(
        RefTableId _sourceTableId,
        RefRecId _sourceRecId,
        TaxModuleType _taxModuleType,
        boolean _isReverse = false,
        RefRecId _origTaxPostLogRecId = 0)
    {
        if (!TaxIntegrationCalculationInputPersisted::findByJournalTable(_sourceTableId, _sourceRecId, _taxModuleType, _isReverse))
        {
            // If no persisted tax calculation data, should not send tax to ISV
            return;
        }

        TaxIntegrationISVTaxPostLog postLog = TaxIntegrationISVTaxPostLog::findOrCreate(_sourceTableId, _sourceRecId, _taxModuleType, _isReverse, _origTaxPostLogRecId);

        if (_isReverse)
        {
            TaxIntegrationISVTaxPostLog originalTaxIntegrationISVTaxPostLog;

            select firstonly Status from originalTaxIntegrationISVTaxPostLog
                where originalTaxIntegrationISVTaxPostLog.RecId == _origTaxPostLogRecId;

            if (originalTaxIntegrationISVTaxPostLog.Status != TaxIntegrationISVTaxPostStatus::Succeeded)
            {
                return;
            }
        }

        TaxIntegrationISVTaxPostController isvTaxPostCountroller = new TaxIntegrationISVTaxPostController(
            classStr(TaxIntegrationISVTaxPostService),
            methodStr(TaxIntegrationISVTaxPostService, execute),
            SysOperationExecutionMode::ReliableAsynchronous);

        TaxIntegrationISVTaxPostContract isvTaxPostContract = isvTaxPostCountroller.getDataContractInfoObject().dataContractObject() as TaxIntegrationISVTaxPostContract;

        isvTaxPostContract.parmSourceTableId(postLog.SourceTableId);
        isvTaxPostContract.parmSourceRecId(postLog.SourceRecId);
        isvTaxPostContract.parmTaxModuleType(_taxModuleType);

        isvTaxPostCountroller.parmShowDialog(false);
        isvTaxPostCountroller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxJurisdictionParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax jurisdiction parameters from tax calculating engin based on the transaction that specfied by the heading tableId and heading recId.
    /// </summary>
    /// <param name = "_sourceHeadingTableId">The tableId of the source heading.</param>
    /// <param name = "_sourceHeadingRecId">The recId of the source heading.</param>
    /// <returns>An object of <c>TaxIntegrationTaxJurisdictionParameters</c>.</returns>
    /// <remarks>If table record exists, it is recommended to use getTaxJurisdictionParametersByTable directly.</remarks>
    [Replaceable]
    public static TaxIntegrationTaxJurisdictionParameters getTaxJurisdictionParameters(RefTableId _sourceHeadingTableId, RefRecId _sourceHeadingRecId)
    {
        if (_sourceHeadingTableId == tableNum(LedgerJournalTrans))
        {
            // In LedgerJournalTransCustPaym::accountNumModifiedPost() and LedgerJournalTransVendPaym::accountNumModifiedPost(),
            // company context is changed according to ledgerJournalTrans.Company.
            // The company context may be changed to other company, so crosscompany keyword is used in query statement.
            LedgerJournalTrans ledgerJournalTrans;
            select firstonly crosscompany ledgerJournalTrans
                where ledgerJournalTrans.RecId == _sourceHeadingRecId;

            if (ledgerJournalTrans.RecId)
            {
                return TaxIntegrationFacade::getTaxJurisdictionParametersByTable(ledgerJournalTrans);
            }
            else
            {
                throw new System.InvalidOperationException(strFmt("@TaxIntegrationException:RecordNotFound", 'RecId', _sourceHeadingRecId, _sourceHeadingTableId));
            }
        }

        return TaxIntegrationFacade::getTaxJurisdictionParametersFromTaxService(
            _sourceHeadingTableId,
            _sourceHeadingRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxJurisdictionParametersByTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax jurisdiction parameters from tax calculating engine based on the transaction heading table.
    /// </summary>
    /// <param name = "_sourceHeadingTable">The record of the source transaction heading table.</param>
    /// <returns>An object of <c>TaxIntegrationTaxJurisdictionParameters</c>.</returns>
    [Replaceable]
    public static TaxIntegrationTaxJurisdictionParameters getTaxJurisdictionParametersByTable(Common _sourceHeadingTable)
    {
        if (_sourceHeadingTable.TableId == tableNum(LedgerJournalTrans))
        {
            // In LedgerJournalTransCustPaym::accountNumModifiedPost() and LedgerJournalTransVendPaym::accountNumModifiedPost(),
            // company context is changed according to ledgerJournalTrans.Company.
            // Note, ledgerJournalTrans.Company does not equal to ledgerJournalTrans.company()
            // ledgerJournalTrans.Company can be changed by frontend user for intercompany transactions.
            LedgerJournalTrans ledgerJournalTrans = _sourceHeadingTable;
            changecompany(ledgerJournalTrans.company())
            {
                return TaxIntegrationFacade::getTaxJurisdictionParametersFromTaxService(
                    _sourceHeadingTable.TableId,
                    _sourceHeadingTable.RecId,
                    _sourceHeadingTable.RecVersion,
                    _sourceHeadingTable);
            }
        }
        else
        {
            return TaxIntegrationFacade::getTaxJurisdictionParametersFromTaxService(
                _sourceHeadingTable.TableId,
                _sourceHeadingTable.RecId,
                _sourceHeadingTable.RecVersion,
                _sourceHeadingTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxJurisdictionParametersFromTaxService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax jurisdiction parameters from tax service by a record.
    /// </summary>
    /// <param name = "_sourceHeadingTableId">The table ID of source record.</param>
    /// <param name = "_sourceHeadingRecId">The record ID of source record.</param>
    /// <param name = "_sourceHeadingRecVersion">The record version of source record.</param>
    /// <param name = "_record">The record, it is optional but highly recommend ledgerJournalTrans.</param>
    /// <returns>An object of <c>TaxIntegrationTaxJurisdictionParameters</c>.</returns>
    private static TaxIntegrationTaxJurisdictionParameters getTaxJurisdictionParametersFromTaxService(
        RefTableId _sourceHeadingTableId,
        RefRecId _sourceHeadingRecId,
        RecVersion _sourceHeadingRecVersion = 0,
        Common _record = null)
    {
        if (!TaxIntegrationUtils::shouldRetrieveCashDiscParametersFromTaxService(_sourceHeadingTableId,_sourceHeadingRecId))
        {
            return null;
        }

        TaxIntegrationBusinessProcess businessProcess =
            TaxIntegrationUtils::getBusinessProcessBySourceHeadingTable(_sourceHeadingTableId, _sourceHeadingRecId);

        if (businessProcess == TaxIntegrationBusinessProcess::Journal
            || (businessProcess == TaxIntegrationBusinessProcess::Project
                && TaxIntegrationUtils::isProjExpenseJournal(_sourceHeadingTableId, _sourceHeadingRecId)))
        {
            return TaxIntegrationFacade::getTaxJurisdictionParametersFromTaxServiceForJournal(
                _sourceHeadingTableId,
                _sourceHeadingRecId,
                _sourceHeadingRecVersion,
                _record);
        }

        TaxIntegrationTaxJurisdictionParameters taxIntegrationTaxJurisdictionParameters;

        container cacheKey = _sourceHeadingRecVersion != 0
            ? [_sourceHeadingTableId, _sourceHeadingRecId, _sourceHeadingRecVersion]
            : TaxIntegrationTaxJurisdictionParameters::cacheKey(_sourceHeadingTableId, _sourceHeadingRecId);
        container cacheValue = TaxCache::getValue(TaxCacheScope::TaxJurisdictionParameter, cacheKey);

        if (cacheValue != conNull())
        {
            taxIntegrationTaxJurisdictionParameters = TaxIntegrationTaxJurisdictionParameters::constructFromPackedMap(cacheValue);
        }
        else
        {
            TaxIntegrationSequence sequence = TaxIntegrationSequence::construct(LoggerName)
                .appendActivityOnDocument(TaxIntegrationSettingRetrievalActivityOnDocument::construct())
                .appendActivityOnDocument(TaxIntegrationDataRetrievalActivityOnDocument::construct())
                .appendActivityOnDocument(TaxIntegrationCalculationActivityOnDocument::construct())
                .appendActivityOnDocument(TaxIntegrationErrorHandlingActivityOnDocument::construct());

            TaxIntegrationDocumentObject document = TaxIntegrationDocumentObject::construct(_sourceHeadingTableId, _sourceHeadingRecId);
            document.setBusinessProcess(businessProcess);

            // Only need header info to determine the tax parameters.
            document.setShouldSkipDocumentCharge(true);
            document.setShouldSkipLine(true);

            sequence.act(document);

            if (!document.isOK())
            {
                throw document.getException();
            }

            taxIntegrationTaxJurisdictionParameters = document.getTaxJurisdictionParameters();
            TaxCache::insertValue(TaxCacheScope::TaxJurisdictionParameter, cacheKey, taxIntegrationTaxJurisdictionParameters.pack());
        }

        return taxIntegrationTaxJurisdictionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxJurisdictionParametersFromTaxServiceForJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax jurisdiction parameters for journal transaction from tax service by a record.
    /// This method only work for LedgerJournalTrans, CustInvoiceJour and VendInvoiceJour.
    /// </summary>
    /// <param name = "_sourceHeadingTableId">The table ID of source record.</param>
    /// <param name = "_sourceHeadingRecId">The record ID of source record.</param>
    /// <param name = "_sourceHeadingRecVersion">The record version of source record.</param>
    /// <param name = "_record">The record, it is optional but highly recommend ledgerJournalTrans.</param>
    /// <returns>An object of <c>TaxIntegrationTaxJurisdictionParameters</c>.</returns>
    /// <remarks>The record may not be ledgerJournalTrans, it maybe CustInvoiceJour or VendInvoiceJour.</remarks>
    private static TaxIntegrationTaxJurisdictionParameters getTaxJurisdictionParametersFromTaxServiceForJournal(
        RefTableId _sourceHeadingTableId,
        RefRecId _sourceHeadingRecId,
        RecVersion _sourceHeadingRecVersion = 0,
        Common _record = null)
    {
        LedgerJournalTrans ledgerJournalTrans;
        TaxIntegrationTaxJurisdictionParameters taxIntegrationTaxJurisdictionParameters;
        TaxIntegrationDocumentObject document;

        container cacheKey = _sourceHeadingRecVersion != 0
            ? [_sourceHeadingTableId, _sourceHeadingRecId, _sourceHeadingRecVersion]
            : TaxIntegrationTaxJurisdictionParameters::cacheKey(_sourceHeadingTableId, _sourceHeadingRecId);
        container cacheValue = TaxCache::getValue(TaxCacheScope::TaxJurisdictionParameter, cacheKey);

        // Return cache if cache is hit, or prepare the ledgerJournalTrans to construct TaxIntegrationDocument
        if (_sourceHeadingTableId == tableNum(ledgerJournalTrans))
        {
            // Type conversion, use the _ledgerJournalTrans buffer by default
            // This buffer can be both saved and unsaved.
            ledgerJournalTrans = _record;

            if (cacheValue != conNull()
            // Cache does not work for unsaved ledgerJournalTrans.
            // When ledgerJournalTrans' fields has changed but ledgerJournalTrans has not been inserted/updated, the key for cache remains the same.
            // But values in ledgerJournaltrans has been changed, we should call service for new parameters.
                && !ledgerJournalTrans.haveTaxesChanged())
            {
                return TaxIntegrationTaxJurisdictionParameters::constructFromPackedMap(cacheValue);
            }
            else
            {
                // Journal document is per journal number and voucher.
                if (!(ledgerJournalTrans.JournalNum && ledgerJournalTrans.voucher))
                {
                    // All calls for journal have _ledgerJournalTrans buffer set. Just in case some calls did not set this buffer.
                    ledgerJournalTrans = ledgerJournalTrans::findRecId(_sourceHeadingRecId, false);

                    // Sometimes, when new line is created, nothing in the unsaved buffer. And cannot find it in DB.
                    // In this case, no need to call service, return empty parameter
                    if (!ledgerJournalTrans)
                    {
                        return taxIntegrationTaxJurisdictionParameters;
                    }
                }
                
                if (!TaxIntegrationFacade::shouldCallTaxCalcForCashDisc(ledgerJournalTrans))
                {
                    return taxIntegrationTaxJurisdictionParameters;
                }
            }
        }
        else if (_sourceHeadingTableId == tableNum(CustInvoiceJour)
            || _sourceHeadingTableId == tableNum(VendInvoiceJour))
        {
            if (cacheValue != conNull())
            {
                return TaxIntegrationTaxJurisdictionParameters::constructFromPackedMap(cacheValue);
            }
            else if (_sourceHeadingTableId == tableNum(CustInvoiceJour))
            {
                ledgerJournalTrans = CustInvoiceJour::findRecId(_sourceHeadingRecId).custVendInvoiceJour::getOrigLedgerJournalTrans();
            }
            else if (_sourceHeadingTableId == tableNum(VendInvoiceJour))
            {
                ledgerJournalTrans = VendInvoiceJour::findRecId(_sourceHeadingRecId).custVendInvoiceJour::getOrigLedgerJournalTrans();
            }
        }
        // Only ledgerJournalTrans/CustInvoiceJour/VendInvoiceJour will go into this method
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        document = TaxIntegrationFacade::initDocumentObjectForJournal(ledgerJournalTrans);

        TaxIntegrationSequence sequence = TaxIntegrationSequence::construct(LoggerName)
                .appendActivityOnDocument(TaxIntegrationSettingRetrievalActivityOnDocument::construct())
                .appendActivityOnDocument(TaxIntegrationDataRetrievalActivityOnDocument::construct())
                .appendActivityOnDocument(TaxIntegrationCalculationActivityOnDocument::construct())
                .appendActivityOnDocument(TaxIntegrationErrorHandlingActivityOnDocument::construct());
        sequence.act(document);

        if (!document.isOK())
        {
            // In case .Net exception is not well handled, like LedgerJournalEngine.accountModified()
            System.Exception netExcepn = document.getException();
            throw error(netExcepn.Message);
        }

        taxIntegrationTaxJurisdictionParameters = document.getTaxJurisdictionParameters();

        // If ledgerJournalTrans is unsaved, do not save the result in cache.
        if (!(_sourceHeadingTableId == tableNum(ledgerJournalTrans)
                && ledgerJournalTrans.haveTaxesChanged()))
        {
            TaxCache::insertValue(TaxCacheScope::TaxJurisdictionParameter, cacheKey, taxIntegrationTaxJurisdictionParameters.pack());
        }

        return taxIntegrationTaxJurisdictionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocumentObjectForJournal</Name>
				<Source><![CDATA[
    private static TaxIntegrationDocumentObject initDocumentObjectForJournal(LedgerJournalTrans _journalLine)
    {
        // One journal may have multiple vourchers, and each voucher is treated as a single tax document,
        // so for journal the jurisdiction parameters will be retrieved based on the voucher (LedgerJournalTrans)
        LedgerJournalTaxDocument taxableDocument = LedgerJournalTaxDocument::construct(
            _journalLine.JournalNum,
            _journalLine.Voucher,
            _journalLine.Invoice,
            _journalLine);

        TaxIntegrationJournalDocumentObject journalDocument = TaxIntegrationJournalDocumentObject::constructWithRecord(taxableDocument.getSourceHeader());

        journalDocument.setCompany(curExt());
        journalDocument.setHeadingTableId(taxableDocument.getSourceHeader().TableId);
        journalDocument.setHeadingRecId(taxableDocument.getSourceHeader().RecId);
        journalDocument.setSource(TaxModuleType::Voucher);
        journalDocument.setVoucher(taxableDocument.getReferenceNumber());
        journalDocument.setLegacyTaxableDocument(taxableDocument);

        if (journalDocument.isProjExpenseJournal())
        {
            journalDocument.setBusinessProcess(TaxIntegrationBusinessProcess::Project);
        }
        else
        {
            journalDocument.setBusinessProcess(TaxIntegrationBusinessProcess::Journal);
        }

        TaxIntegrationDocumentObject document = journalDocument;

        document.setShouldSkipDocumentCharge(true);
        document.setShouldSkipLine(true);

        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCallTaxCalcForCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method would decide whether Tax calculation service call is needed for cash disoucnt
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The ledgerJournalTrans record.</param>
    /// <returns>true, if Tax calculation service call is needed; otherwise, false</returns>
    private static boolean shouldCallTaxCalcForCashDisc(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;
        LedgerJournalTrans ledgerJournalTransMain;
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust || _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            ledgerJournalTransMain = _ledgerJournalTrans;
        }
        else
        {
            changecompany(_ledgerJournalTrans.company())
            {
                select firstonly ledgerJournalTransMain
                    where ledgerJournalTransMain.Voucher == _ledgerJournalTrans.Voucher
                    && (ledgerJournalTransMain.AccountType == LedgerJournalACType::Cust || ledgerJournalTransMain.AccountType == LedgerJournalACType::Vend)
                    && ledgerJournalTransMain.JournalNum == _ledgerJournalTrans.JournalNum;
            }
        }

        if (!ledgerJournalTransMain.Invoice || !ledgerJournalTransMain.CashDiscCode)
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>