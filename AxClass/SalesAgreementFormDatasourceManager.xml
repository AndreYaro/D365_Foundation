<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesAgreementFormDatasourceManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>SalesAgreementFormDatasourceManager</c> contains shared code between the form datasources <see cref="SalesAgreement Form"/> and <see cref="SalesAgreementCreate Form"/>
/// </summary>
public class SalesAgreementFormDatasourceManager extends AgreementFormDatasourceManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doTransferCustData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transferring data from Customer to Sales Agreement Header, Sales Agreement Header Default and
    /// Agreement Header default, without prompting the user.
    /// </summary>
    /// <param name = "_transferCustTable">The customer to transfer.</param>
    protected void doTransferCustData(CustTable _transferCustTable)
    {
        SalesAgreementHeader        salesAgreementHeader = agreementHeader as SalesAgreementHeader;
        SalesAgreementHeaderExt_RU  salesAgreementHeaderExt_RU = agreementHeaderExt_RU as SalesAgreementHeaderExt_RU;

        salesAgreementHeader.initFromCustTable(_transferCustTable);

        purchSalesagreementHeaderDefault.initFromCustTable(_transferCustTable);

        agreementHeaderDefault.initFromCustTable(_transferCustTable);

        FormDataSource agreementHeaderDefault_ds = SysFormDataSource::findDataSource(formRun, tableNum(AgreementHeaderDefault));
        agreementHeaderDefault_ds.refresh();

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            FormDataSource salesAgreementHeaderDefault_ds = SysFormDataSource::findDataSource(formRun, tableNum(SalesagreementHeaderDefault));
            salesAgreementHeaderDefault_ds.refresh();
        }

        FormDataSource salesAgreementHeader_ds = SysFormDataSource::findDataSource(formRun, tableNum(SalesAgreementHeader));
        salesAgreementHeader_ds.refresh();

        // <GEERU>
        if (countryRegion_RU)
        {
            salesAgreementHeaderExt_RU.initFromCustTable(_transferCustTable);
            salesAgreementHeaderExt_RU.initFromDeliveryTerm(DlvTerm::find(agreementHeaderDefault.DeliveryTerm));

            FormDataSource salesAgreementHeaderExt_RU_ds = SysFormDataSource::findDataSource(formRun, tableNum(SalesAgreementHeaderExt_RU));
            salesAgreementHeaderExt_RU_ds.refresh();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transferring data from Customer to Sales Agreement Header, Sales Agreement Header Default and
    /// Agreement Header default, optionally prompting the user before proceeding.
    /// </summary>
    /// <param name="_doPromptUser">
    /// If true, user will be asked whether to proceed and transfer the customer data.
    /// </param>
    public void transferCustAccount(boolean _doPromptUser = true)
    {
        CustTable                   transferCustTable;
        SalesAgreementHeader        salesAgreementHeader = agreementHeader as SalesAgreementHeader;

        if (salesAgreementHeader.CustAccount &&
           !(_doPromptUser
             && SalesParameters::find().PromptTransfer
             && Box::yesNo("@SYS418" + '\n\n' + CustTable::promptAddress(salesAgreementHeader.CustAccount), DialogButton::Yes)
                == DialogButton::No))
        {
            transferCustTable = CustTable::find(salesAgreementHeader.CustAccount);

            this.doTransferCustData(transferCustTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsSetCarrierFieldsFromDlvMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets all the fields that depend on carrier.
    /// </summary>
    /// <param name="_dlvModeId">The delivery mode Id</param>
    public void tmsSetCarrierFieldsFromDlvMode(DlvModeId _dlvModeId)
    {
        TMSSalesAgreementHeader tmsSalesAgreementHeader = tmsAgreementHeader as TMSSalesAgreementHeader;

        TMSCarrierService carrierService = TMSCarrierService::findByDlvModeId(_dlvModeId);

        tmsSalesAgreementHeader.CarrierCode           = carrierService.CarrierCode;
        tmsSalesAgreementHeader.CarrierServiceCode    = carrierService.CarrierServiceCode;
        tmsSalesAgreementHeader.ModeCode              = TMSCarrier::find(carrierService.CarrierCode).ModeCode;

        FormDataSource tmsSalesAgreementHeader_ds = SysFormDataSource::findDataSource(formRun, tableNum(TMSSalesAgreementHeader));
        tmsSalesAgreementHeader_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findContactPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds contact person based on name and current customer.
    /// </summary>
    /// <param name = "_name">Name of the contact person</param>
    /// <returns><c>ContactPerson</c> if one found</returns>
    protected ContactPerson findContactPerson(ContactPersonName _name)
    {
        CustTable       custTable;
        DirPartyTable   partyTable;
        ContactPerson   contactPerson;
        CustVendAC      custVendAccount = this.getCustVendAccount();

        select firstonly contactPerson
            join AccountNum, Party from custTable
            where custTable.AccountNum == custVendAccount
               && custTable.Party      == contactPerson.ContactForParty
                join partyTable
                where partyTable.RecId == contactPerson.Party
                   && partyTable.Name like _name;

        return contactPerson;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContactPersonFailedMessage</Name>
				<Source><![CDATA[
    protected str checkContactPersonFailedMessage()
    {
        return "@SYS92800";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendAccount</Name>
				<Source><![CDATA[
    protected CustAccount getCustVendAccount()
    {
        SalesAgreementHeader salesAgreementHeader = agreementHeader as SalesAgreementHeader;
        return salesAgreementHeader.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendAccountFromContactPerson</Name>
				<Source><![CDATA[
    protected CustVendAC getCustVendAccountFromContactPerson(ContactPerson _contactPerson)
    {
        return _contactPerson.getCustAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementHeaderExt_RUTableNum</Name>
				<Source><![CDATA[
    protected int getAgreementHeaderExt_RUTableNum()
    {
        return tableNum(SalesAgreementHeaderExt_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectWrite</Name>
				<Source><![CDATA[
    protected boolean validateProjectWrite()
    {
        return ProjTable::find(agreementHeaderDefault.Project).status().validateWriteSalesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesAgreementFormDatasourceManager construct()
    {
        SalesAgreementFormDatasourceManager result = new SalesAgreementFormDatasourceManager();

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>