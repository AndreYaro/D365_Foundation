<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_OC3_Table</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetReport_OC3_Table extends RAssetReport_OC3_Base
{
    protected DialogField assetStandardField;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalFields</Name>
				<Source><![CDATA[
    public container additionalFields()
    {
        return super() + [fieldnum(RAssetDocument, StandardId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateRecord</Name>
				<Source><![CDATA[
    public boolean canCreateRecord()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected Dialog dialog()
    {
        Dialog dlg = super();

        if (isProforma)
        {
            assetStandardField = dlg.addField(extendedtypestr(RAssetStandardId));

            assetStandardField.value(RAssetParameters::find().StandardIdDefault);
        }

        this.documentDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrintIfSingle</Name>
				<Source><![CDATA[
    public boolean doPrintIfSingle()
    {
        return !this.isProforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    protected boolean getFromDialog()
    {
        super();

        if (isProforma)
        {
            rAssetStandards = RAssetStandards::find(rAssetTable.AccountNum, assetStandardField.value());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRAssetDocument</Name>
				<Source><![CDATA[
    public void initFromRAssetDocument(RAssetDocument _document)
    {
        super(_document);

        rAssetStandards = _document.findStandards();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    public boolean isProforma()
    {
        // Documents can exist in cancellation
        return !RAssetDocument::existByAssetAndType(rAssetTable.AccountNum, RAssetReportType::OC3)
            && !(select firstonly RecId from rAssetTrans
                where rAssetTrans.AccountNum == rAssetTable.AccountNum
                    && rAssetTrans.PostingType != RAssetPostingType::PartialTakeDown
                    && (rAssetTrans.AssetTransType == RAssetTransType::Revaluation
                        || rAssetTrans.AssetTransType == RAssetTransType::AcquisitionAdj)
                    && !rAssetTrans.StornoRecId).RecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args _args)
    {
        if (_args.dataset() != tablenum(RAssetTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        rAssetTable = _args.record();

        super(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outSpendingRepair</Name>
				<Source><![CDATA[
    protected void outSpendingRepair()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipUpdateDocuments</Name>
				<Source><![CDATA[
    public boolean skipUpdateDocuments(boolean _value = skipUpdateDocuments)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate()
    {
        return documentDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>