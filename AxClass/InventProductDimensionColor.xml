<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventProductDimensionColor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventProductDimensionColor</c> class defines the behavior of the color inventory dimension.
/// </summary>
class InventProductDimensionColor extends InventProductDimension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDefaultValueForItem</Name>
				<Source><![CDATA[
    public anytype parmDefaultValueForItem(InventTable _inventTable, anytype _value = _inventTable.StandardInventColorId)
    {
        _inventTable.StandardInventColorId = _value;
        return _inventTable.StandardInventColorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAlternativeValueForItem</Name>
				<Source><![CDATA[
    public anytype parmAlternativeValueForItem(InventTable _inventTable, anytype _value = _inventTable.AltInventColorId)
    {
        _inventTable.AltInventColorId = _value;
        return _inventTable.AltInventColorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimensionByNaturalKey</Name>
				<Source><![CDATA[
    public Common findDimensionByNaturalKey(anytype _value)
    {
        return EcoResColor::findByName(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDimensionNaturalKey</Name>
				<Source><![CDATA[
    public anytype retrieveDimensionNaturalKey(RecId _id)
    {
        return EcoResColor::find(_id).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDimensionNaturalKeyByProductId</Name>
				<Source><![CDATA[
    public anytype retrieveDimensionNaturalKeyByProductId(RecId _productRecId)
    {
        RefRecId productDimensionAttribute = EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(this.parmInventDimFieldId());

        EcoResColor ecoResColor;
        EcoResProductVariantColor ecoResProductVariantColor;

        select firstonly Name
            from        ecoResColor
            exists join ecoResProductVariantColor
                where   ecoResProductVariantColor.Color                                     == ecoResColor.RecId
                    &&  ecoResProductVariantColor.ProductDimensionAttribute                 == productDimensionAttribute
                    &&  ecoResProductVariantColor.DistinctProductVariant                    == _productRecId;

        return ecoResColor.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductDimensionValue</Name>
				<Source><![CDATA[
    public void createProductDimensionValue(
        EcoResDistinctProductVariant    _ecoResDistinctProductVariant,
        EcoResProductDimensionAttribute _ecoResProductDimensionAttribute,
        RefRecId                        _dimensionValue)
    {
        EcoResProductVariantColor ecoResProductVariantColor;
        ecoResProductVariantColor.initFromDistinctProductVariant(_ecoResDistinctProductVariant);
        ecoResProductVariantColor.ProductDimensionAttribute             = _ecoResProductDimensionAttribute.recId;
        ecoResProductVariantColor.Color                                 = _dimensionValue;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            EcoResProductMasterColor ecoResProductMasterColor;

            select RetailWeight, RetailDisplayOrder from ecoResProductMasterColor
                where ecoResProductMasterColor.Color                == _dimensionValue &&
                      ecoResProductMasterColor.ColorProductMaster   == _ecoResDistinctProductVariant.ProductMaster;

            ecoResProductVariantColor.RetailWeight = ecoResProductMasterColor.RetailWeight;
            ecoResProductVariantColor.RetailDisplayOrder = ecoResProductMasterColor.RetailDisplayOrder;

            EcoResDistinctProductVariant ecoResDistinctProductVariant = EcoResDistinctProductVariant::find(_ecoResDistinctProductVariant.RecId, true);
                    
            if (ecoResDistinctProductVariant)
            {
                ecoResDistinctProductVariant.setCalculatedRetailTotalWeight(ecoResProductVariantColor.RetailWeight);
                ecoResDistinctProductVariant.doUpdate();
            }
        }

        ecoResProductVariantColor.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTranslationByProduct</Name>
				<Source><![CDATA[
    public EcoResProductMasterDimValueTranslation findTranslationByProduct(EcoResProductRecId _productMasterRecId, anytype _dimensionValue, SystemLanguageId _languageId)
    {
        return EcoResProductMasterColor::findTranslationByProduct(_productMasterRecId, _dimensionValue, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailSupported</Name>
				<Source><![CDATA[
    public boolean isRetailSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the singleton instance of the <c>InventProductDimensionColor</c> class.
    /// </summary>
    /// <returns>An instance of the <c>InventProductDimensionColor</c> class.</returns>
    public static InventProductDimensionColor getInstance()
    {
        return InventDimension::singletonFromInventDimFieldId(fieldNum(InventDim, InventColorId)) as InventProductDimensionColor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>