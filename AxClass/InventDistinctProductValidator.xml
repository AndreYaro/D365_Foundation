<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDistinctProductValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Validates that a distinct product is fully specified.
/// </summary>
class InventDistinctProductValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDistinctProductValidator construct()
    {
        return new InventDistinctProductValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimFullySpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares if the invent dim has been specified using the full product dim list.
    /// </summary>
    /// <param name = "_inventDim">An <c>InventDim</c> that has been specified.</param>
    /// <param name = "_inventDimGroupSetup">An <c>InventDimGroupSetup</c> that has been specified.</param>
    /// <param name = "_productDimList">A <c>List</c> of the product dimension fields.</param>
    /// <returns>True if the product is fully specified; false, otherwise.</returns>
    private boolean isInventDimFullySpecified(InventDim _inventDim, InventDimGroupSetup _inventDimGroupSetup, List _productDimList)
    {
        InventDimParm inventDimParmActiveProductDim;

        _inventDimGroupSetup.inventDimParmActiveProductDimension(inventDimParmActiveProductDim);

        //We just compare using the full product dim list since we already have that list and it is faster iterating a few more times than getting the list of the enabled product dimensions for the item
        return _inventDim.allInventDimParmFieldsHaveValues(inventDimParmActiveProductDim, _productDimList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistinctProductFullySpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that all the product dimensions can be specified for the given input.
    /// </summary>
    /// <param name = "_itemId">An item ID.</param>
    /// <param name = "_inventDim">An <c>InventDim</c> buffer.</param>
    /// <returns>True if the product is fully specified; false, otherwise.</returns>
    public boolean isDistinctProductFullySpecified(ItemId _itemId, InventDim _inventDim)
    {
        InventDim     inventDim;
        inventDim.data(_inventDim);

        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(_inventDim);

        // If product dimensions are enabled by configuration key and the inventDim has all the product dimensions for the item filled then we are searching for an exact match on product dimensions.
        // By setting all the product dimension field flags we allow SQL to use the ProductDimIdx index which for many scenarios will be covering and lead to effective query plans
        List productDimList = InventDimMetaDataCache::dimProductDimFieldList();
        if (!productDimList.empty())
        {                       
            InventDimGroupSetup inventDimGroupSetupProductDim = InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId);

            return this.isInventDimFullySpecified(inventDim, inventDimGroupSetupProductDim, productDimList);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistinctProductVariantFullySpecifiedByInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that all the product dimensions are specified for the given input.
    /// </summary>
    /// <param name = "_productMaster">ProductMaster of variant.</param>
    /// <param name = "_inventDim">InventDim with the product dimensions specified.</param>
    /// <returns>true if the product is fully specified; false, otherwise.</returns>
    public boolean isDistinctProductVariantFullySpecifiedByInventDim(RefRecId _productMaster, InventDim _inventDim)
    {
        // If product dimensions are enabled by configuration key and the inventDim has all the product dimensions for the item filled then we are searching for an exact match on product dimensions.
        // By setting all the product dimension field flags we allow SQL to use the ProductDimIdx index which for many scenarios will be covering and lead to effective query plans
        List productDimList = InventDimMetaDataCache::dimProductDimFieldList();
        if (!productDimList.empty())
        {
            InventDimGroupSetup inventDimGroupSetupProductDim = InventDimGroupSetup::newDimensionGroups(EcoResProductDimensionGroupProduct::findByProduct(_productMaster).ProductDimensionGroup, 0, 0);
                  
            return this.isInventDimFullySpecified(_inventDim, inventDimGroupSetupProductDim, productDimList);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductNotStopped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a product is not stopped for the specific order setup type.
    /// </summary>
    /// <param name = "_itemId">ItemId of the item to check the stopped flag for.</param>
    /// <param name = "_setupType">Inventory order setup type to use for checking the stopped flag.</param>
    /// <param name = "_inventDim">Inventory dimensions record.</param>
    /// <param name = "_showSetupType">true if warning should include order setup type; Optional.</param>
    /// <returns>true if product is not stopped or if product doesn't have product dimensions fully specified; otherwise, false.</returns>
    public static boolean checkProductNotStopped(ItemId _itemId, InventItemOrderSetupType _setupType, InventDim _inventDim, boolean _showSetupType = true)
    {
        InventTable inventTable = inventTable::find(_itemId);
        boolean     ret = true;

        if (InventDistinctProductValidator::needCheckProductNotStopped(inventTable, _inventDim))
        {
            ret =  InventItemOrderSetupMap::find(_itemId, _setupType, _inventDim.inventDimId).checkNotStopped(_showSetupType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCheckProductNotStopped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if verification that product is not stopped is needed.
    /// </summary>
    /// <param name = "_inventTable">An item to check.</param>
    /// <param name = "_inventDim">Inventory dimensions record.</param>
    /// <returns>true if check should be performed; otherwise, false.</returns>
    protected static boolean needCheckProductNotStopped(InventTable _inventTable, InventDim _inventDim)
    {
        boolean isVariant;

        if (_inventTable)
        {
            isVariant = _inventTable.hasProductDimensions();
        }

        return _inventTable
            && (!(isVariant && _inventDim.InventDimId == InventDim::inventDimIdBlank()))
            && InventDistinctProductValidator::construct().isDistinctProductFullySpecified(_inventTable.ItemId, _inventDim);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>