<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningLedgerDimensionController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanningLedgerDimensionController</c> class provides control interaction logic for use of the
/// dimension entry control for budget planning in the UI.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class BudgetPlanningLedgerDimensionController extends LedgerDimensionAccountController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        this.parmLedgerDimensionType(LedgerDimensionType::BudgetPlanning);
        this.parmDataAreaId(curext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>doIncludeTotalDimAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether the total dimension attribute values are included in the lookup.
    /// </summary>
    /// <returns>
    /// true if the total values are included in the lookup; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Total values are always included for the budget planning controller so this method always returns true.
    /// </remarks>
    protected boolean doIncludeTotalDimAttributeValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountStructureForced</Name>
				<Source><![CDATA[
    protected boolean isAccountStructureForced()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCombination</Name>
				<Source><![CDATA[
    public DimensionValidationStatus validateCombination(DataAreaId _originalCompany, List _errorMessages, DimensionStorage _dimensionStorage = null)
    {
        DimensionValidationStatus validationStatus = DimensionValidationStatus::Valid;
        DimensionStorage dimStorage = _dimensionStorage;
        DimensionValidationRequest request;
        DimensionValidationStatusContract status;

        changeCompany(this.parmDataAreaId())
        {
            if (_dimensionStorage == null && this.getAccountStructure())
            {
                dimStorage = this.getDimensionStorage(true);
            }

            if (dimStorage && currentSegments.lastIndex() > 0)
            {
                request = DimensionValidationRequest::newForDimensionStorage(dimStorage, this.parmControlDate());
                request.parmDoValueActiveDatesValidation(true);
                request.parmDoValueSuspendedValidation(true);

                status = DimensionValidation::getStatus(request);

                status.displayValidationMessages();

                validationStatus = status.parmValidationStatus();
            }
        }

        return validationStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMainAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the provided main account type.
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account for which the type needs to be validated.
    /// </param>
    /// <returns>
    /// true if the main account type is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateMainAccountType(MainAccount _mainAccount)
    {
        boolean isValid = true;

        if (_mainAccount.Type != DimensionLedgerAccountType::Total)
        {
            isValid = !_mainAccount.isNonPostingAccount();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSegmentValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified dimension attribute value.
    /// </summary>
    /// <param name="_dimAttributeValue">
    /// The record ID of the dimension attribute value to validate.
    /// </param>
    /// <param name="_value">
    /// The display value of the specified dimension attribute.
    /// </param>
    /// <param name="_segmentIndex">
    /// The index of the segment in the control where the specified dimension attribute value was used.
    /// </param>
    /// <returns>
    /// A list of validation error messages.
    /// </returns>
    protected List validateSegmentValue(DimensionAttributeValue _dimAttributeValue, str _value, int _segmentIndex)
    {
        MainAccount mainAccount;
        List errorMessages;
        List errorList;

        errorMessages = new List(Types::String);

        if (this.isAllowedForManualEntry(_dimAttributeValue, _value, errorMessages))
        {
            errorList = new List(Types::String);

            if (_dimAttributeValue.DimensionAttribute == mainAccountDimAttributeRecId)
            {
                mainAccount = MainAccount::find(_dimAttributeValue.EntityInstance);

                mainAccount.checkUserId(curUserId(), false, errorMessages);

                if (this.parmPostingType())
                {
                    mainAccount.checkLedgerPostingType(this.parmPostingType(), false, false, errorMessages);
                }

                if (!this.validateMainAccountType(mainAccount))
                {
                    errorMessages.addEnd(strFmt("@SYS304258", _value));
                }

                if (this.parmCurrency())
                {
                    mainAccount.checkAccountCurrency(this.parmCurrency(), false, false, errorMessages);
                }

                if (errorMessages.elements() == 0)
                {
                    errorList = DimensionController::validateSegment(
                        this.currentSegments,
                        _dimAttributeValue,
                        _value,
                        _segmentIndex,
                        false,
                        this.parmControlDate(),
                        this.parmDoValueActiveDatesValidation(),
                        this.parmDoValueSuspendedValidation());
                }
            }
            else
            {
                errorList = DimensionController::validateSegment(
                    this.currentSegments,
                    _dimAttributeValue,
                    _value,
                    _segmentIndex,
                    false,
                    this.parmControlDate(),
                    this.parmDoValueActiveDatesValidation(),
                    this.parmDoValueSuspendedValidation());
            }

            errorMessages.appendList(errorList);
        }

        return errorMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the segmented value combination.
    /// </summary>
    /// <returns>
    /// The record for the segmented value combination.
    /// </returns>
    public DimensionAttributeValueCombination resolveReference()
    {
        DimensionAttributeValueCombination davc;
        DimensionStorage dimStorage;

        dimStorage = this.getDimensionStorage(false);

        if (dimStorage && dimStorage.hierarchyCount())
        {
            // Only attempt to save if there is at least 1 structure added
            davc = DimensionAttributeValueCombination::find(dimStorage.save());
        }

        return davc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>