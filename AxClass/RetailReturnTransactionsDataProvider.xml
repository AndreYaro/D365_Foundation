<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailReturnTransactionsDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Data;
using ACM = Microsoft.Dynamics.AX.Analytics.CalculationModel;

/// <summary>
/// The <c>RetailReturnTransactionsDataProvider</c> class is the data
/// provider for retail return transactions report.
/// </summary>
[SRSReportParameterAttribute(classstr(RetailReportParametersDataContract))]
class RetailReturnTransactionsDataProvider extends RetailSrsReportDataProviderBase
{
    RetailReturnTransactionsTable      table;
    RetailReportParametersDataContract  dc;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTable</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(RetailReturnTransactionsTable))]
    public RetailReturnTransactionsTable getTable()
    {
        select table;
        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the report.
    /// </summary>
    public void processReport()
    {
        dc = this.parmDataContract();
        this.populateData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the query and insert data into temp table.
    /// </summary>
    void populateData()
    {
        ttsbegin;

        this.InsertChannelsToTmpTable(dc.parmHierarchyRelationId());
        Query q = new Query();
        QueryBuildDataSource  qds = q.addDataSource(tableNum(RetailTransactionsReportView));

        //// Add fields.
        qds.addSelectionField(fieldNum(RetailTransactionsReportView, transDate));
        qds.addSelectionField(fieldNum(RetailTransactionsReportView, transactionId));
        qds.addSelectionField(fieldNum(RetailTransactionsReportView, staffId));
        qds.addSelectionField(fieldNum(RetailTransactionsReportView, itemId));
        qds.addSelectionField(fieldNum(RetailTransactionsReportView, productName));
        qds.addSelectionField(fieldNum(RetailTransactionsReportView, qty));
        qds.addSelectionField(fieldNum(RetailTransactionsReportView, netAmount));
        qds.addSelectionField(fieldNum(RetailTransactionsReportView, returnReason));
        qds.addSelectionField(fieldNum(RetailTransactionsReportView, infoCode));
        qds.addSelectionField(fieldNum(RetailTransactionsReportView, tenderType));
        qds.addSelectionField(fieldNum(RetailTransactionsReportView, employeeName));
        qds.addSelectionField(fieldNum(RetailTransactionsReportView, lineNum));

        //Add ranges.
        QueryBuildRange dateTimeRange = qds.addRange(fieldnum(RetailTransactionsReportView, transDate));
        dateTimeRange.value(this.buildDateRangeForSpecifiedField(dc.parmFromDate(), dc.parmToDate(), fieldStr(RetailTransactionsReportView, transDate)));
        qds.addRange(fieldnum(RetailTransactionsReportView, qty)).value('>0');

        //Add join with RetailReportChannelTable.
        this.JoinChannelFilter(qds, fieldNum(RetailTransactionsReportView, Channel));

        QueryRun qRun = new QueryRun(q);

        // run the query and insert the query results into the temp table.
        while ( qRun.next() )
        {
            RetailTransactionsReportView row = qRun.Get(tableNum(RetailTransactionsReportView));

            select forupdate table
                    where table.transactionId == row.transactionId
                    && table.lineNum == row.lineNum;

            if (table.RecId)
            {
                if (row.infoCode)
                {
                    if (table.returnReason == null)
                    {
                        table.returnReason = strFmt("%1: %2", row.infoCode, row.returnReason);
                    }
                    else
                    {
                        table.returnReason = strFmt("%1, %2: %3", table.returnReason, row.infoCode, row.returnReason);
                    }
                }

                table.update();
            }
            else
            {
                if (row.infoCode)
                {
                    table.returnReason = strFmt("%1: %2", row.infoCode, row.returnReason);
                }
                else
                {
                    table.returnReason = null;
                }

                table.transDate = row.transDate;
                table.transactionId = row.transactionId;
                table.staffId = row.staffId;
                table.itemId = row.itemId;
                table.productName = row.productName;
                table.qty = row.qty;
                table.netAmount = row.netAmount;
                table.tenderType = row.tenderType;
                table.employeeName = row.employeeName;
                table.lineNum = row.lineNum;

                table.insert();
            }
        }

        this.ClearChannelFilterTable();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>