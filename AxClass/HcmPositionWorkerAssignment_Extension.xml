<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionWorkerAssignment_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HcmPositionWorkerAssignment_Extension</c> class contains extension methods for the <c>HcmPositionWorkerAssignment</c> table.
/// </summary>
[ExtensionOf(tableStr(HcmPositionWorkerAssignment))]
public final class HcmPositionWorkerAssignment_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existPositionLegalEntityWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>HcmPositionWorkerAssignment</c> table exists.
    /// </summary>
    /// <param name="_positionRecId">
    /// A value of the <c>Position</c> field.
    /// </param>
    /// <param name="_workerRecId">
    /// The worker record ID.
    /// </param>
    /// <param name="_validFrom">
    /// The value in the <c>ValidFrom</c> field of the record to find.
    /// </param>
    /// <param name="_validTo">
    /// The value in the <c>ValidTo</c> field of the record to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existPositionLegalEntityWorker(HcmPositionRecId _positionRecId,
        HcmWorkerRecId _workerRecId,
        utcdatetime _validFrom = DateTimeUtil::utcNow(),
        utcdatetime _validTo = _validFrom)
    {
        PayrollPositionDetails positionDetails;
        HcmPositionWorkerAssignment positionWorkerAssignment;
        HcmPosition position;

        if (prmisDefault(_validFrom) && prmisDefault(_validTo))
        {
            select firstonly RecId from positionWorkerAssignment
                where positionWorkerAssignment.Worker == _workerRecId
                    && positionWorkerAssignment.Position == _positionRecId
                join RecId from positionDetails
                    where positionDetails.Position == positionWorkerAssignment.Position
                        && positionDetails.PaidByLegalEntity != 0
                        && positionDetails.PayrollNormalHours != 0.00
                join RecId from position
                    where position.RecId == positionDetails.Position;
        }

        else if (_validFrom == _validTo)
        {
            select firstonly validTimeState(_validFrom) RecId from positionWorkerAssignment
                where positionWorkerAssignment.Worker == _workerRecId 
                    && positionWorkerAssignment.Position == _positionRecId
                join RecId from positionDetails
                    where positionDetails.Position == positionWorkerAssignment.Position
                        && positionDetails.PaidByLegalEntity != 0
                        && positionDetails.PayrollNormalHours != 0.00
                join RecId from position
                    where position.RecId == positionDetails.Position;
        }
        else
        {
            select firstonly validTimeState(_validFrom, _validTo)  RecId from positionWorkerAssignment
                where positionWorkerAssignment.Worker == _workerRecId
                    && positionWorkerAssignment.Position == _positionRecId
                join RecId from positionDetails
                    where positionDetails.Position == positionWorkerAssignment.Position
                        && positionDetails.PaidByLegalEntity != 0
                        && positionDetails.PayrollNormalHours != 0.00
                join RecId from position
                    where position.RecId == positionDetails.Position;
        }

        return positionWorkerAssignment.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>