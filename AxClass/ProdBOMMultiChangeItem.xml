<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdBOMMultiChangeItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class ProdBOMMultiChangeItem extends RunBaseMultiParm implements BatchRetryable
{
    private const int initialLastLineNum = 1;

    private ProdBOMParmChangeItem standardParmTable;    
    private FormDataSource callerFormDataSource;
    private QueryRun callerQueryRun;
    private InventQty accumulatedOnHandQty;
    private boolean isDataLoaded;
    private LineNum lastLineNum;      

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        standardParmTable
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.parmEnum() == RunChoose::Run)
        {
            ProdBOMMultiChangeItem prodBOMMultiChangeItem = new ProdBOMMultiChangeItem();
            RunBaseMultiParm::initFromForm(prodBOMMultiChangeItem, _args);

            prodBOMMultiChangeItem.defaultParmBuffer();

            if (!prodBOMMultiChangeItem.prompt())
            {
                return;
            }

            prodBOMMultiChangeItem.runOnServer();
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class based of a query for test purposes.
    /// </summary>
    /// <param name = "_query">
    /// The query with selected ProdTable records.
    /// </param>
    /// <returns>Instance of the created object.</returns>
    public static ProdBOMMultiChangeItem constructWithQuery(Query _query)
    {
        ProdBOMMultiChangeItem prodBOMMultiChangeItem = new ProdBOMMultiChangeItem();
        RunBaseMultiParm::initParm(prodBOMMultiChangeItem);

        prodBOMMultiChangeItem.defaultParmBuffer();

        prodBOMMultiChangeItem.callerQueryRun = new QueryRun(_query);

        return prodBOMMultiChangeItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLoadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that all necessary parameters to populate the data table has been set.
    /// </summary>
    /// <returns>Returns True if we can populate the data table; otherwise, returns False.</returns>
    public boolean canLoadData()
    {
        return  standardParmTable.FromItemId &&
                standardParmTable.FromInventDimId &&
                InventDim::find(standardParmTable.FromInventDimId).validateWriteMandatoryAndProductDim(standardParmTable.FromItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataLoaded</Name>
				<Source><![CDATA[
    public boolean isDataLoaded()
    {
        return isDataLoaded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the table with data based on the caller's data source or the selected query.
    /// </summary>
    public void loadData()
    {
        isDataLoaded = false;

        try
        {
            ttsbegin;

            this.calcOnHandQty();
            this.clearData();

            if (callerQueryRun != null) // User on form can override caller data Source records
            {
                this.loadDataFromQuery();
            }
            else if (callerFormDataSource != null)
            {
                this.loadDataFromDataSource();
            }

            if (lastLineNum > initialLastLineNum)
            {
                isDataLoaded = true; // Show data on Grid
            }
            else
            {
                Info("@SCM:NoMatchingProdBOMLinesFound");
            }

            ttscommit;
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOnHandQty</Name>
				<Source><![CDATA[
    private void calcOnHandQty() 
    {
        InventDim fromInventDim = InventDim::find(standardParmTable.FromInventDimId);
        InventDimParm inventDimParm;

        inventDimParm.initFromInventDim(fromInventDim, InventDim::dimFieldsList());

        accumulatedOnHandQty = InventOnHandQty::newItemDim(standardParmTable.FromItemId, fromInventDim, inventDimParm).physicalInvent();

        this.initializeOnHand(standardParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTableWithQueryResults</Name>
				<Source><![CDATA[
    protected void populateTableWithQueryResults(ParmBuffer _parmBuffer, RunBaseMultiParm _runBaseMultiParm, ParmId _parmId, QueryRun _queryRun)
    {
        // Only save query, the table is populated later on user demand
        callerQueryRun = _queryRun;

        this.clearData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save caller data source with selected records for further use.
    /// The table ProdBOMParmChangeItem is populated later on user demand.
    /// </summary>
    /// <param name = "_common">The last caller record.</param>
    /// <returns>Empty list, because population data is later.</returns>
    protected List packRecords(Common _common)
    {
        if (FormDataUtil::getFormDataSource(_common))
        {
            // Only save data source, the table is populated later on user demand
            callerFormDataSource = FormDataUtil::getFormDataSource(_common);
        }

        return new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDataFromQuery</Name>
				<Source><![CDATA[
    private void loadDataFromQuery()
    {
        if (callerQueryRun == null)
        {
            return;
        }

        callerQueryRun.reset();

        while (callerQueryRun.next())
        {
            if (this.checkBuffer(callerQueryRun.getNo(1)))
            {
                this.insertFromProdTable(callerQueryRun.getNo(1));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDataFromDataSource</Name>
				<Source><![CDATA[
    private void loadDataFromDataSource()
    {
        if (callerFormDataSource == null)
        {
            return;
        }

        var multiSelect = MultiSelectionHelper::construct();
        multiSelect.parmDatasource(callerFormDataSource);

        ProdTable prodTable = multiSelect.getFirst();
        Set processedRecIdSet = new Set(Types::Int64);

        while (prodTable)
        {
            if (!processedRecIdSet.in(prodTable.RecId)) // we should have unique ProdTable
            {
                if (this.checkBuffer(prodTable))
                {
                    this.insertFromProdTable(prodTable);
                }

                processedRecIdSet.add(prodTable.RecId);
            }

            prodTable = multiSelect.getNext();
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFormItems</Name>
				<Source><![CDATA[
    public boolean validateFormItems(ItemId _fromItemId, ItemId _toItemId)
    {
        if (_fromItemId && _toItemId)
        {
            if (InventTable::find(_fromItemId).BOMUnitId != InventTable::find(_toItemId).BOMUnitId)
            {
                return checkFailed("@SCM:UnitOfMeasureIsDifferent");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearData</Name>
				<Source><![CDATA[
    public void clearData()
    {
        ProdBOMParmChangeItem::deleteProdLines(parmId);

        lastLineNum = initialLastLineNum; // Because standard parameters remains
    }

]]></Source>
			</Method>
			<Method>
				<Name>markUnmarkAllRecords</Name>
				<Source><![CDATA[
    public void markUnmarkAllRecords(boolean _isMarked)
    {
        ProdBOMParmChangeItem parmTable;
        ProdTable prodTable;
           
        update_recordset parmTable
            setting IsMarked = _isMarked
                where parmTable.ParmId == parmId
            exists join prodTable
                where prodTable.ProdId == parmTable.ProdId &&
                     (prodTable.ProdStatus == ProdStatus::CostEstimated ||
                      prodTable.ProdStatus == ProdStatus::Scheduled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAllOnHandRecords</Name>
				<Source><![CDATA[
    public void markAllOnHandRecords()
    {
        ProdBOMParmChangeItem parmTable;
        ProdTable prodTable;
           
        update_recordset parmTable
            setting IsMarked = true
                where parmTable.ParmId == parmId &&
                      parmtable.AccumulatedQty < 0
            exists join prodTable
                where prodTable.ProdId == parmTable.ProdId &&
                     (prodTable.ProdStatus == ProdStatus::CostEstimated ||
                      prodTable.ProdStatus == ProdStatus::Scheduled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    public ParmBuffer defaultParmBuffer()
    {
        ProdBOMParmChangeItem prodBOMParmChangeItem;

        this.initializeOnHand(prodBOMParmChangeItem);

        return prodBOMParmChangeItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new BOM line and change quantity to 0 on previous BOM line.
    /// </summary>
    /// <param name = "_fromProdBOM">Previous BOM record.</param>
    /// <param name = "_toInventTable">New Inventory table buffer.</param>
    /// <param name = "_toQty">New BOM item quantity.</param>
    /// <param name = "_toInventDimId">New inventory dimensions buffer.</param>
    private void changeProdBOM(ProdBOM _fromProdBOM, InventTable _toInventTable, BOMQty _toQty, InventDimId _toInventDimId)
    {
        ProdBOM toProdBOM;

        toProdBOM.initFromProdTable(_fromProdBOM.prodTable());
        toProdBOM.initFromInventTable(_toInventTable);

        toProdBOM.ProdLineType          = _fromProdBOM.ProdLineType;
        toProdBOM.VendId                = _fromProdBOM.VendId;
        toProdBOM.ScrapConst            = _fromProdBOM.ScrapConst;
        toProdBOM.ScrapVar              = _fromProdBOM.ScrapVar;
        toProdBOM.BOMConsump            = _fromProdBOM.BOMConsump;
        toProdBOM.LineNum               = ProdBOM::lastLineNum(toProdBOM.ProdId) + 1;
        toProdBOM.InventDimId           = _toInventDimId;
        toProdBOM.BOMQty                = _toQty ? _toQty : _fromProdBOM.BOMQty;
        toProdBOM.BOMQtySerie           = _fromProdBOM.BOMQtySerie;
        toProdBOM.ProdFlushingPrincip   = _fromProdBOM.ProdFlushingPrincip;
        toProdBOM.WrkCtrConsumption     = _fromProdBOM.WrkCtrConsumption;

        if (toProdBOM.validateWrite())
        {
            toProdBOM.insert();
        
            _fromProdBOM.selectForUpdate(true);
            _fromProdBOM.BOMQty = 0;
            _fromProdBOM.update();
        }
        else
        {
            throw error(strFmt("@SCM:CannotChangeBOMItemOnProdOrder", _fromProdBOM.ProdId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeOnHand</Name>
				<Source><![CDATA[
    private void initializeOnHand(ProdBOMParmChangeItem _prodBOMParmChangeItem)
    {
        if (!ProdBOMParmChangeItem::onHandExists(parmId))
        {
            _prodBOMParmChangeItem.RefType = ReqRefType::InventOnHand;
            _prodBOMParmChangeItem.LineNum = initialLastLineNum;
            _prodBOMParmChangeItem.ParmId = parmId;
            _prodBOMParmChangeItem.insert();

            lastLineNum = initialLastLineNum;

            this.parmStandardParm(_prodBOMParmChangeItem);
        }
        else if (_prodBOMParmChangeItem)
        {
            _prodBOMParmChangeItem.selectForUpdate(true);
            _prodBOMParmChangeItem.Quantity = accumulatedOnHandQty;
            _prodBOMParmChangeItem.AccumulatedQty = accumulatedOnHandQty;
            _prodBOMParmChangeItem.doUpdate();
        }         
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    public void initParmBuffer(ParmBuffer _prodBOMParmChangeItem)
    {
        ProdBOMParmChangeItem saveProdBOMParmChangeItem;
        ProdBOMParmChangeItem prodBOMParmChangeItem = _prodBOMParmChangeItem;
        saveProdBOMParmChangeItem.data(prodBOMParmChangeItem);
        prodBOMParmChangeItem.data(standardParmTable);

        prodBOMParmChangeItem.ParmId = saveProdBOMParmChangeItem.ParmId;
        prodBOMParmChangeItem.RecId = saveProdBOMParmChangeItem.RecId;
        prodBOMParmChangeItem.LineNum = saveProdBOMParmChangeItem.LineNum;
        prodBOMParmChangeItem.ProdId = saveProdBOMParmChangeItem.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromProdTable</Name>
				<Source><![CDATA[
    private void insertFromProdTable(ProdTable _prodTable)
    {
        ProdBOMParmChangeItem parmTable;
        RecordInsertList parmTableInsertList = new RecordInsertList(tableNum(ProdBOMParmChangeItem));        
        ProdBOM prodBOM;
        boolean isProdBOMMultiChangeItemBOMQtyFlightEnabled = ProdBOMMultiChangeItemBOMQtyFlight::instance().isEnabled();
        boolean isProdBOMMultiChangeItemNotShowLinesWithZeroQtyFlightEnabled = ProdBOMMultiChangeItemNotShowLinesWithZeroQtyFlight::instance().isEnabled();


        while select BOMQty, RemainInventPhysical, RecId from prodBOM
            order by prodBOM.RawMaterialDate, prodBOM.ProdId
            where prodBOM.ProdId == _prodTable.ProdId &&
                  prodBOM.Itemid == standardParmTable.FromItemId &&
                  prodBOM.InventDimId == standardParmTable.FromInventDimId &&
                  (!isProdBOMMultiChangeItemNotShowLinesWithZeroQtyFlightEnabled ||
                    ((isProdBOMMultiChangeItemBOMQtyFlightEnabled && prodBOM.RemainInventPhysical > 0) ||
                    (!isProdBOMMultiChangeItemBOMQtyFlightEnabled && prodBOM.BOMQty > 0)))
        {
            lastLineNum++;

            parmTable.LineNum           = lastLineNum;
            parmTable.ProdId            = _prodTable.ProdId;
            parmTable.RefType           = ReqRefType::ProdLine;
            parmTable.ParmId            = parmId;

            if (isProdBOMMultiChangeItemBOMQtyFlightEnabled)
            {
                parmTable.Quantity      = prodBOM.RemainInventPhysical;
            }
            else
            {
                parmTable.Quantity      = prodBOM.BOMQty;
            }

            parmTable.ProdBOMRecId      = prodBOM.RecId;
            parmTable.AccumulatedQty    = accumulatedOnHandQty - parmTable.Quantity;
   
            parmTableInsertList.add(parmTable);

            accumulatedOnHandQty = parmTable.AccumulatedQty;
        }

        parmTableInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromItemId</Name>
				<Source><![CDATA[
    public void setFromItemId(ItemId _itemId)
    {
        this.setParameterField(fieldNum(ProdBOMParmChangeItem, FromItemId), _itemId);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToItemId</Name>
				<Source><![CDATA[
    public void setToItemId(ItemId _itemId)
    {
        this.setParameterField(fieldNum(ProdBOMParmChangeItem, ToItemId), _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToQty</Name>
				<Source><![CDATA[
    public void setToQty(ProdQty _toQty)
    {
        this.setParameterField(fieldNum(ProdBOMParmChangeItem, ToQty), _toQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromInventDimId</Name>
				<Source><![CDATA[
    public void setFromInventDimId(InventDimId _inventDimId)
    {
        this.setParameterField(fieldNum(ProdBOMParmChangeItem, FromInventDimId), _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToInventDimId</Name>
				<Source><![CDATA[
    public void setToInventDimId(InventDimId _inventDimId)
    {
        this.setParameterField(fieldNum(ProdBOMParmChangeItem, ToInventDimId), _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameterField</Name>
				<Source><![CDATA[
    private void setParameterField(FieldId _fieldId, anytype _value)
    {
        if (standardParmTable)
        {
            ttsbegin;
            standardParmTable.reread();
            standardParmTable.selectForUpdate(true);
            standardParmTable.(_fieldId) = _value;
            standardParmTable.doUpdate();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    public boolean checkBuffer(Common _common)
    {
        ProdTable prodTable = _common as ProdTable;

        return  prodTable.ProdStatus != ProdStatus::ReportedFinished &&
                prodTable.ProdStatus != ProdStatus::Completed &&
                !ProdBOMParmChangeItem::exist(parmId, prodTable.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    public ParmBuffer parmStandardParm(ParmBuffer _standard = standardParmTable)
    {
        standardParmTable = _standard;

        standardParmTable.reread(); // Always up to date

        return standardParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProdParmCostEstimation</Name>
				<Source><![CDATA[
    private ProdParmCostEstimation defaultProdParmCostEstimation()
    {
        ProdParmCostEstimation ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change all selected BOM lines and estimate production orders.
    /// </summary>
    private void process()
    {
        ProdBOMParmChangeItem parmTable;
        ProdBOM prodBOM;

        ProdMultiCostEstimation estimation = ProdMultiCostEstimation::construct(null);
        RunBaseMultiParm::initParm(estimation);

        InventTable toInventTable = InventTable::find(standardParmTable.ToItemId);
        Set prodTableSet = new Set(Types::String);

        while select prodBOM
            join parmTable
                where parmTable.ProdBOMRecId == prodBOM.RecId &&
                      parmTable.ParmId == parmId &&
                      parmTable.RefType == ReqRefType::ProdLine &&
                      parmTable.IsMarked            
        {
            this.changeProdBOM(prodBOM, toInventTable, standardParmTable.ToQty, standardParmTable.ToInventDimId);

            if (!prodTableSet.in(parmTable.ProdId))
            {
                estimation.insert(parmTable.prodTable(), this.defaultProdParmCostEstimation());
                prodTableSet.add(parmTable.ProdId);
            }
        }

        estimation.runOnServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        if (! this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsbegin;

            this.process();
           
            ttscommit;

            Info("@SYS119229");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)  // The object/form which calls the method
    {
        boolean ret = true;

        if (!standardParmTable.FromItemId)
        {
            ret = checkFailed(strFmt("@SYS84378", fieldPName(ProdBOMParmChangeItem, FromItemId)));          
        }

        if (!standardParmTable.ToItemId)
        {
            ret = checkFailed(strFmt("@SYS84378", fieldPName(ProdBOMParmChangeItem, ToItemId)));
        }

        if (!standardParmTable.FromInventDimId)
        {
            ret = checkFailed(strFmt("@SYS84378", fieldPName(ProdBOMParmChangeItem, FromInventDimId)));
        }

        if (!standardParmTable.ToInventDimId)
        {
            ret = checkFailed(strFmt("@SYS84378", fieldPName(ProdBOMParmChangeItem, ToInventDimId)));
        }

        if (ret)
        {
            ret = this.validateFormItems(standardParmTable.FromItemId, standardParmTable.ToItemId);
        }

        if (ret && !isDataLoaded)
        {      
            ret = checkFailed("@SCM:NoMatchingProdBOMLinesFound");
        }

        if (ret && ProdBOMParmChangeItem::recordsCountToProcess(parmId) == 0)
        {
            ret = checkFailed("@SCM:ProdBOMLineMustBeMarked");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version     = conPeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;                
                ret = super(base);
                break;
            default :
                this.initParmDefault();
                ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    public LineNum lastLineNum()
    {
        return ProdBOMParmChangeItem::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:ProdBOMChangeItemDialogCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    public void cleanupDialog()
    {
        ProdBOMParmChangeItem::deleteParameters(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public Query query()
    {
        return new QueryRun(querystr(ProdBOMMultiSelectChangeItem)).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    public formName formName()
    {
        return formstr(ProdBOMChangeItemDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseDialog</Name>
				<Source><![CDATA[
    public boolean mustUseDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>