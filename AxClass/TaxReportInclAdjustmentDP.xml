<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportInclAdjustmentDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportInclAdjustmentDP</c> class declares the variables that are required for the
///    <c>TaxReportInclAdjustment</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(TaxReportInclAdjustmentContract))
]

public class TaxReportInclAdjustmentDP extends SrsReportDataProviderPreProcessTempDB
{
    TaxReportInclAdjustmentTmp taxReportInclAdjustmentTmp;
    TransTxt transTxt;
    TaxTrans taxTrans;
    TaxPeriod taxPeriod;
    TransDate fromDate;
    TransDate toDate;
    TransDate transDate;
    boolean flagDetailed;
    boolean reported;
    TaxReportPeriod taxReportPeriod;
    Voucher voucher;
    TmpTaxTrans tmpTaxTrans;
    CompanyInfo companyInfo;
    TaxParameters taxParameters;

    Addressing address;
    Addressing companyAddress;
    Name companyName;
    Phone companyPhone;
    VATNum vatNum;
    CompanyName taxAuthName;
    Name taxPeriodName;

    #define.emptyString('')
    /// <summary>
    /// Calculates the Sum transactions and adjustments.
    /// </summary>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    private void calc()
    {
        TaxCalcReportInclAdjustment taxCalcReportInclAdjustment;
        #ISOCountryRegionCodes

        if (voucher)
        {
            taxCalcReportInclAdjustment = new TaxCalcReportInclAdjustment(taxPeriod,
                                                                          fromDate,
                                                                          true,
                                                                          voucher,
                                                                          transDate);
            reported = true;
        }
        else
        {
            taxCalcReportInclAdjustment = new TaxCalcReportInclAdjustment(taxPeriod,
                                                                          fromDate,
                                                                          false);
            reported = false;
        }

        taxCalcReportInclAdjustment.calc();
        tmpTaxTrans = taxCalcReportInclAdjustment.tmpTaxTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>detailedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the details transaction into <c>TaxReportInclAdjustmentTmp</c> temporary table.
    /// </summary>
    /// <param name="_taxPeriod">
    ///    The <c>taxPeriod</c> value to use to filter the <c>TaxTrans</c> table data.
    /// </param>
    /// <param name="_fromDate">
    ///    The <c>fromDate</c> value to use to filter the <c>TaxTrans</c> table data.
    /// </param>
    /// <param name="_toDate">
    ///    The <c>toDate</c> value to use to filter the <c>TaxTrans</c> table data.
    /// </param>
    /// <param name="_taxVersion">
    ///    The <c>taxVersion</c> value to use to filter the <c>TaxTrans</c> table data.
    /// </param>

    private void detailedTransactions(TaxPeriod _taxPeriod,
                                        FromDate _fromDate,
                                        ToDate _toDate,
                                        TaxVersion _taxVersion)
    {
        if (!TaxParameters::reportUseVatDueDate_W())
        {
            while select taxTrans
                where taxTrans.TaxPeriod == _taxPeriod
                    && taxTrans.TransDate >= _fromDate
                    && taxTrans.TransDate <= _toDate
                    && taxTrans.TaxRepCounter == _taxVersion
                    && taxTrans.Source != TaxModuleType::Tax
            {
                this.detailedTransactionsInsert(taxTrans);
            }
        }
        else
        {
            TaxTrans_W taxTrans_W;
            while select taxTrans
                where taxTrans.TaxPeriod == _taxPeriod
                    && taxTrans.TaxRepCounter == _taxVersion
                    && taxTrans.Source != TaxModuleType::Tax
                exists join taxTrans_W
                    where taxTrans_W.TaxTrans == taxTrans.RecId
                        && taxTrans_W.VatDueDate_W >= _fromDate
                        && taxTrans_W.VatDueDate_W <= _toDate

            {
                this.detailedTransactionsInsert(taxTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>detailedTransactionsInsert</Name>
				<Source><![CDATA[
    private void detailedTransactionsInsert(TaxTrans _taxTrans)
    {
        this.insertTaxReportInclAdjustmentTmp(flagDetailed);

        if (!taxParameters.PurchTaxOnOperations && _taxTrans.TaxDirection == TaxDirection::UseTax)
        {
            _taxTrans.TaxBaseAmountCur = _taxTrans.TaxBaseAmountCur * -1;
            _taxTrans.TaxBaseAmount = _taxTrans.TaxBaseAmount * -1;
            _taxTrans.TaxAmountCur = (_taxTrans.TaxAmountCur - _taxTrans.TaxInCostPriceCur) * -1;
            _taxTrans.TaxAmount = (_taxTrans.TaxAmount - _taxTrans.TaxInCostPriceMST) * -1;
            transTxt = "@SYS58906";
            this.insertTaxReportInclAdjustmentTmp(flagDetailed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReportInclAdjustmentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the <c>TaxReportInclAdjustmentTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>TaxReportInclAdjustmentTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('TaxReportInclAdjustmentTmp')
    ]
    public TaxReportInclAdjustmentTmp getTaxReportInclAdjustmentTmp()
    {
        select taxReportInclAdjustmentTmp;
        return taxReportInclAdjustmentTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReportInclAdjustmentTmp</Name>
				<Source><![CDATA[
/// <summary>
    ///    Inserts records into the <c>TaxReportInclAdjustmentTmp</c> temporary table.
    /// </summary>
    /// <param name="_flag">
    ///    true if data gets assigned from the <c>TaxReportPeriod</c> table; false if data gets assigned from
    ///    the dialog.
    /// </param>

    protected  void insertTaxReportInclAdjustmentTmp(boolean _flag)
    {
        taxReportInclAdjustmentTmp.Address = address;
        taxReportInclAdjustmentTmp.CompanyAddress = companyAddress;
        taxReportInclAdjustmentTmp.CompanyName = companyName;
        taxReportInclAdjustmentTmp.CompanyPhone = companyPhone;
        if (_flag)
        {
            taxReportInclAdjustmentTmp.FromTaxPeriod = taxReportPeriod.FromDate;
            taxReportInclAdjustmentTmp.ToTaxPeriod = taxReportPeriod.ToDate;
            taxReportInclAdjustmentTmp.Flag = 1;
        }
        else
        {
            taxReportInclAdjustmentTmp.FromDate = fromDate;
            taxReportInclAdjustmentTmp.ToDate = toDate;
            taxReportInclAdjustmentTmp.Flag = 0;
        }

        taxReportInclAdjustmentTmp.vatNum = vatNum;
        taxReportInclAdjustmentTmp.TransTxt = transTxt;
        taxReportInclAdjustmentTmp.TaxAuthorityName = taxAuthName;
        taxReportInclAdjustmentTmp.TaxPeriodName = taxPeriodName;

        if (_flag)
        {
            taxReportInclAdjustmentTmp.TaxBaseAmountCur = taxTrans.TaxBaseAmountCur;
            taxReportInclAdjustmentTmp.TaxBaseQty = taxTrans.TaxBaseQty;
            taxReportInclAdjustmentTmp.TaxCode = taxTrans.TaxCode;
            taxReportInclAdjustmentTmp.TaxDirection = taxTrans.TaxDirection;
            taxReportInclAdjustmentTmp.TaxCodeName = TaxTable::find(taxTrans.TaxCode).TaxName;
            taxReportInclAdjustmentTmp.TaxPeriod = taxTrans.TaxPeriod;
            taxReportInclAdjustmentTmp.Voucher = taxTrans.Voucher;
            taxReportInclAdjustmentTmp.Source = taxTrans.Source;
            taxReportInclAdjustmentTmp.TransDate = taxTrans.TransDate;
            taxReportInclAdjustmentTmp.TaxAmount = taxTrans.TaxAmount;
            taxReportInclAdjustmentTmp.CurencyCode = taxTrans.CurrencyCode;
            taxReportInclAdjustmentTmp.TaxAmountCur = this.taxTransAmountCur();
            taxReportInclAdjustmentTmp.TaxInCostPrice = taxTrans.TaxInCostPriceCur;
        }
        else
        {
            taxReportInclAdjustmentTmp.TaxBaseAmountCur = this.taxBaseAmountCur();
            taxReportInclAdjustmentTmp.TaxBaseQty = tmpTaxTrans.TaxBaseQty;
            taxReportInclAdjustmentTmp.TaxCode = tmpTaxTrans.TaxCode;
            taxReportInclAdjustmentTmp.TaxDirection = tmpTaxTrans.TaxDirection;
            taxReportInclAdjustmentTmp.TaxCodeName = TaxTable::find(tmpTaxTrans.TaxCode).TaxName;
            taxReportInclAdjustmentTmp.CurencyCode = tmpTaxTrans.CurrencyCode;
            taxReportInclAdjustmentTmp.TaxAmountCur = this.taxAmountCur();
            taxReportInclAdjustmentTmp.TaxInCostPrice = this.taxInCostPrice();
        }
        transTxt = #emptyString;
        taxReportInclAdjustmentTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records based on the parameters entered.
    /// </summary>
    public void processReport()
    {
        #ISOCountryRegionCodes
        boolean flagCounter;
        boolean includeDetails;
        TaxReportAdjustmentTrans taxReportAdjustmentTrans;
        TaxReportPeriod taxReportPeriodPrevious;
        TaxReportInclAdjustmentContract contract = this.parmDataContract() as TaxReportInclAdjustmentContract;

        flagDetailed = false;
        flagCounter=false;

        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        System.Diagnostics.Stopwatch stopWatch;
        guid identifier;
        NoYes isSuccessfulReport;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();
            identifier = newGuid();
            taxEventSourceLog.TaxReportStart(identifier);
            stopWatch.Start();

            companyInfo = CompanyInfo::find();
            taxParameters = TaxParameters::find();

            fromDate = contract.parmFromDate();
            toDate = contract.parmToDate();
            transDate = contract.parmTransDate();
            taxPeriod = contract.parmTaxPeriod();
            voucher = contract.parmVoucher();
            includeDetails = contract.parmIncludeDetails();

            address = TaxAuthorityAddress::address(TaxPeriodHead::find(taxPeriod).TaxAuthority);
            companyAddress = companyInfo.postalAddress().Address;
            companyName = companyInfo.name();
            companyPhone = companyInfo.phone();

            vatNum = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, taxReportInclAdjustmentTmp.ToDate);
            taxAuthName = TaxAuthorityAddress::taxAuthorityName(TaxPeriodHead::find(taxPeriod).TaxAuthority);
            taxPeriodName = TaxPeriodHead::find(taxPeriod).Name;

            this.calc();
            if (taxParameters.PurchTaxOnOperations)
            {
                select tmpTaxTrans where tmpTaxTrans.TaxDirection != TaxDirection::IncomingTax;
            }

            while select tmpTaxTrans
            {
                this.insertTaxReportInclAdjustmentTmp(flagDetailed);
                if (!taxParameters.PurchTaxOnOperations && tmpTaxTrans.TaxDirection == TaxDirection::UseTax)
                {
                    tmpTaxTrans.TaxBaseAmountCur = tmpTaxTrans.TaxBaseAmountCur * -1;
                    tmpTaxTrans.TaxBaseAmountMST = tmpTaxTrans.TaxBaseAmountMST * -1;
                    tmpTaxTrans.TaxAmountCur = (tmpTaxTrans.TaxAmountCur - tmpTaxTrans.TaxInCostPriceCur) * -1;
                    tmpTaxTrans.TaxAmountMST = (tmpTaxTrans.TaxAmountMST - tmpTaxTrans.TaxInCostPriceMST) * -1;
                    transTxt = "@SYS58906";
                    this.insertTaxReportInclAdjustmentTmp(flagDetailed);
                }

                flagCounter=true;
            }

            // If Include details is checked, then the detailed transactions will get inserted into
            // the temp table TaxReportInclAdjustmentTmp.
            if (includeDetails && flagCounter)
            {
                flagDetailed = true;

                // Detailed summation of transactions
                taxReportPeriod = TaxReportPeriod::find(taxPeriod,fromDate);
                this.detailedTransactions(taxPeriod,
                                            taxReportPeriod.FromDate,
                                            taxReportPeriod.ToDate,
                                            0);

                // Detailed calculation of adjustments
                if (reported)
                {
                    while select FromDate,ToDate,TaxVersion from taxReportAdjustmentTrans
                    where taxReportAdjustmentTrans.Voucher   == voucher &&
                          taxReportAdjustmentTrans.TransDate == transDate &&
                          taxReportAdjustmentTrans.TaxPeriod == taxPeriod
                    {
                        this.detailedTransactions(taxPeriod,
                                            taxReportAdjustmentTrans.FromDate,
                                            taxReportAdjustmentTrans.ToDate,
                                            taxReportAdjustmentTrans.TaxVersion);
                    }
                }
                else
                {
                    while select FromDate,ToDate,VersionNum from taxReportPeriodPrevious
                    where taxReportPeriodPrevious.TaxPeriod == taxPeriod &&
                          taxReportPeriodPrevious.FromDate  < fromDate   &&
                          taxReportPeriodPrevious.VersionNum > 0
                    {
                        this.detailedTransactions(taxPeriod,
                                            taxReportPeriodPrevious.FromDate,
                                            taxReportPeriodPrevious.ToDate,
                                            taxReportPeriodPrevious.VersionNum);
                    }
                }
            }
            isSuccessfulReport = NoYes::Yes;
        }
        catch(Exception::Error)
        {
            isSuccessfulReport = NoYes::No;
            throw Exception::Error;
        }
        finally
        {
            stopWatch.Stop();
            taxEventSourceLog.TaxReportStop(identifier, SysCountryRegionCode::countryInfo(), new MenuFunction(menuItemOutputStr(TaxReportInclAdjustment), menuItemType::Output).label(), 'TaxReportInclAdjustment', isSuccessfulReport, stopWatch.ElapsedMilliseconds);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>TaxAmountCur</c> value for the current record in the <c>TmpTaxTrans</c> table.
    /// </summary>
    /// <returns>
    ///    The <c>TaxAmountCur</c> value of the current record.
    /// </returns>
    private TaxAmountCur taxAmountCur()
    {
        if (taxParameters.PurchTaxOnOperations && tmpTaxTrans.TaxDirection == TaxDirection::UseTax)
        {
            tmpTaxTrans.TaxAmountCur = tmpTaxTrans.TaxAmountCur * -1;
            tmpTaxTrans.TaxAmountMST = tmpTaxTrans.TaxAmountMST * -1;
            tmpTaxTrans.TaxInCostPriceCur = 0;
            tmpTaxTrans.TaxInCostPriceMST = 0;
        }

        if (!tmpTaxTrans.CurrencyCode || tmpTaxTrans.CurrencyCode == CompanyInfoHelper::standardCurrency())
        {
            return tmpTaxTrans.TaxAmountMST - tmpTaxTrans.TaxInCostPriceMST;
        }
        else
        {
            return tmpTaxTrans.TaxAmountCur - tmpTaxTrans.TaxInCostPriceCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>TaxBaseAmountCur</c> value for the current record in the <c>TmpTaxTrans</c> table.
    /// </summary>
    /// <returns>
    ///    The <c>TaxBaseAmountCur</c> value of the current record.
    /// </returns>

    private TaxBaseCur taxBaseAmountCur()
    {
        if (taxParameters.PurchTaxOnOperations && tmpTaxTrans.TaxDirection == TaxDirection::UseTax)
        {
            tmpTaxTrans.TaxBaseAmountCur = tmpTaxTrans.TaxBaseAmountCur * -1;
            tmpTaxTrans.TaxBaseAmountMST = tmpTaxTrans.TaxBaseAmountMST * -1;
        }

        if (!tmpTaxTrans.CurrencyCode || tmpTaxTrans.CurrencyCode == CompanyInfoHelper::standardCurrency())
        {
            return tmpTaxTrans.TaxBaseAmountMST;
        }
        else
        {
            return tmpTaxTrans.TaxBaseAmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxInCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>TaxInCostPrice</c> value for the current record in the <c>TmpTaxTrans</c> table.
    /// </summary>
    /// <returns>
    ///    The <c>TaxInCostPrice</c> value of the current record.
    /// </returns>

    private TaxAmountCur taxInCostPrice()
    {
        if (!tmpTaxTrans.CurrencyCode || tmpTaxTrans.CurrencyCode == CompanyInfoHelper::standardCurrency())
        {
            return tmpTaxTrans.TaxInCostPriceMST;
        }
        else
        {
            return tmpTaxTrans.TaxInCostPriceCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTransAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>TaxAmountCur</c> value for the current record in the <c>TaxTrans</c> table.
    /// </summary>
    /// <returns>
    ///    The <c>TaxAmountCur</c> value of the current record.
    /// </returns>

    private TaxAmountCur taxTransAmountCur()
    {
        if (taxParameters.PurchTaxOnOperations && taxTrans.TaxDirection == TaxDirection::UseTax)
        {
            taxTrans.TaxAmountCur = taxTrans.TaxAmountCur * -1;
            taxTrans.TaxAmount = taxTrans.TaxAmount * -1;
            taxTrans.TaxInCostPriceCur = 0;
            taxTrans.TaxInCostPriceMST = 0;
        }

        if (!taxTrans.CurrencyCode || taxTrans.CurrencyCode == Ledger::accountingCurrency(CompanyInfo::current()))
        {
            return taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST;
        }
        else
        {
            return taxTrans.TaxAmountCur - taxTrans.TaxInCostPriceCur;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>