<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ForecastAllocate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ForecastAllocate
{
    BudgetMap   forecast;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
        public void create()
    {
        ForecastInvent                  forecastInvent;
        ForecastItemAllocationLine      allocationLine;
        InventTable                     inventTable;
        InventModelGroup                inventModelGroup;
        InventModelGroupItem            inventModelGroupItem;

        void allocate (ItemId _itemId = '')
        {
            if (! forecast.AllocationId)
                return;

            while select allocationLine
                where allocationLine.AllocationId       == forecast.AllocationId
                    && allocationLine.Percent           != 0
                    && (
                            (( _itemId != '' ) && (allocationLine.ItemId == _itemId))
                        ||  (( _itemId == '' ) && (allocationLine.ItemId != ''))
                       )
                // Only include inventoried items
                exists join inventTable
                    where   inventTable.ItemId            == allocationLine.ItemId
                    exists join inventModelGroupItem
                        where inventModelGroupItem.ItemId           == inventTable.ItemId
                            && inventModelGroupItem.ItemDataAreaId  == inventTable.DataAreaId
                        exists join inventModelGroup
                            where inventModelGroup.ModelGroupId     == inventModelGroupItem.ModelGroupId
                                && inventModelGroup.DataAreaId      == inventModelGroupItem.ModelGroupDataAreaId
                                && inventModelGroup.StockedProduct  == NoYes::Yes
            {
                this.initForecastInvent(forecastInvent);
                forecastInvent.initFromForecastItemAllocationLine(allocationLine);
                this.initDefaults(forecastInvent);
                if (!forecastInvent.checkDimensions())
                {
                    throw error(strfmt("@SYS85685", forecastInvent.ItemId));
                }

                this.convertInventQty(forecastInvent);

                forecastInvent.QtyInvent = forecastInvent.QtyInvent * allocationLine.Percent / 100;
                forecastInvent.QtyInvent = roundDownDec(forecastInvent.QtyInvent,UnitOfMeasure::unitOfMeasureDecimalPrecision(
                    UnitOfMeasure::unitOfMeasureIdBySymbol(forecastInvent.inventTable().inventUnitId())));
                forecastInvent.insert();
            }
        }

        ForecastInvent::deleteTrans(forecast);

        if (! this.mustBeAllocated())
            return;

        if (forecast.ItemId)
        {
            if (ForecastItemAllocationLine::exist(forecast.AllocationId))
            {
                allocate(forecast.ItemId);
            }
            else
            {
                this.initForecastInvent(forecastInvent);
                if (forecastInvent.inventTable().isStocked())
                {
                    this.initDefaults(forecastInvent);
                    forecastInvent.insert();
                }
            }
        }
        else
            allocate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertInventQty</Name>
				<Source><![CDATA[
    protected void convertInventQty(ForecastInvent forecastInvent)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes default values on inventory forecast line.
    /// </summary>
    /// <param name="_forecastInvent">
    ///     The inventory forecast line.
    /// </param>
    protected void initDefaults(ForecastInvent _forecastInvent)
    {
        _forecastInvent.budgetMap::initDefaultWarehouse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForecastInvent</Name>
				<Source><![CDATA[
        protected void initForecastInvent(ForecastInvent forecastInvent)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAllocated</Name>
				<Source><![CDATA[
        protected boolean mustBeAllocated()
    {
        return (forecast.Report == NoYes::Yes && forecast.Active == NoYes::Yes 
             // Skip allocation for temporary forecast buffer to avoid duplicated allocation because its related
             // regular table will be allocated in its insert method.
             && !forecast.isTmp());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(BudgetMap _budget)
    {
        forecast = _budget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static ForecastAllocate construct(BudgetMap _budget)
    {
        ForecastAllocate    forecastAllocate;

        switch (_budget.TableId)
        {
            case tablenum(ForecastSales):
                forecastAllocate = new ForecastAllocateSales(_budget);
                break;

            case tablenum(ForecastPurch):
                forecastAllocate = new ForecastAllocatePurch(_budget);
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return forecastAllocate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>