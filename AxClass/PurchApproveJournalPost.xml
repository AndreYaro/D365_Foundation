<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchApproveJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchApproveJournalPost extends PurchInvoiceJournalPost
{
    LedgerJournalTrans ledgerJournalTrans;
    LedgerJournalId oldVendTransJournalNum;
    TransDate origTransDate;
    Voucher origVoucher;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approval</Name>
				<Source><![CDATA[
    protected NoYes approval()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approveVendTrans</Name>
				<Source><![CDATA[
    protected void approveVendTrans()
    {
        VendTrans vendTrans;
        LedgerJournalTrans localLedgerJournalTrans;
        VendTransOpen vendTransOpen;

        select firstonly forceplaceholders TableId from localLedgerJournalTrans
            where localLedgerJournalTrans.Voucher == origVoucher &&
                  localLedgerJournalTrans.VendTransId
            join forupdate vendTrans
                where vendTrans.RecId == localLedgerJournalTrans.VendTransId &&
                      vendTrans.Invoice == ledgerJournalTrans.Invoice &&
                      vendTrans.Approved == NoYes::No;

        vendTrans.initFromVendInvoiceInfoTableApproval(vendInvoiceInfoTable);

        vendTrans.AccountingEvent = activeAccountingEventId;

        oldVendTransJournalNum = vendTrans.JournalNum;

        vendTrans.JournalNum = '';

        if (vendTrans)
        {
            vendTrans.update();

            vendTrans.reread();
            if (vendInvoiceInfoTable.FixedDueDate != vendTrans.DueDate)
            {
                //Update the due date on vendTransOpen records.
                //This process updates the due date on vendTrans and vendTransCashDisc.
                while select forupdate vendTransOpen
                    where vendTransOpen.RefRecId == vendTrans.RecId
                {
                    vendTransOpen.DueDate = vendInvoiceInfoTable.FixedDueDate;
                    vendTransOpen.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVoucherTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TransDate</c> or <c>DocumentDate</c> on the <c>LedgerVoucherObject</c>.
    /// </summary>
    /// <param name = "_ledgerVoucherObject">A <c>LedgerVoucherObject</c> instance.</param>
    protected void initializeVoucherTransDate(LedgerVoucherObject _ledgerVoucherObject, TransDate _transDate)
    {
        if (this.mustUseDocumentDate())
        {
            _ledgerVoucherObject.parmTransDate(_transDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus documentStatus()
    {
        return DocumentStatus::ApproveJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends the posting.
    /// </summary>
    protected void endPost()
    {
        super();

        if (!this.isProforma() && !this.isOnHold())
        {
            this.postPurgeLedgerAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends the update of selected records.
    /// </summary>
    /// <remarks>
    /// The <c>endUpdate</c> method in the derived classes contains the code for ending the posting of the
    /// selected records posted by the derived <c>FormLetter</c> class. For example the <c>endUpdate</c>
    /// method in the <c>SalesFormLetter</c> class ends the update for the selected sales orders. The
    /// <c>endUpdate</c> method is added to the <c>FormLetter</c> class so that you can run the
    /// <c>endUpdate</c> method when you post in batch. The <c>endUpdate</c> method is called from the
    /// <c>run</c> method in the abstract classes derived from the <c>FormLetter</c> class, and from the
    /// <c>run</c> method in the <c>FormLetterEndMultiThread</c> class.
    /// </remarks>
    protected void endUpdate()
    {
        super();

        this.printPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedEuroTriangulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fixed euro triangulation value.
    /// </summary>
    /// <returns>
    /// The fixed euro triangulation value.
    /// </returns>
    protected UnknownNoYes fixedEuroTriangulation()
    {
        return Currency::noYes2UnknownNoYes(vendInvoiceJour.Triangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fixed exchange rate.
    /// </summary>
    /// <returns>
    /// The fixed exchange rate.
    /// </returns>
    protected VendExchRate fixedExchRate()
    {
        return vendInvoiceJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fixed secondary exchange rate.
    /// </summary>
    /// <returns>
    /// The fixed secondary exchange rate.
    /// </returns>
    protected ExchrateSecondary fixedExchRateSecondary()
    {
        return vendInvoiceJour.ExchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyFixedExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fixed reporting currency exchange rate.
    /// </summary>
    /// <returns>
    /// The fixed reporting currency exchange rate.
    /// </returns>
    internal ReportingCurrencyExchRate reportingCurrencyFixedExchangeRate()
    {
        return vendInvoiceJour.ReportingCurrencyExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerVoucherObject</c> object.
    /// </summary>
    protected void initLedgerVoucher()
    {
        LedgerVoucherObject ledgerVoucherObject;
        DocumentDate        documentDate;
        DocumentNum         documentNum;

        if (! ledgerVoucherIsSet)
        {
            ledgerVoucher = LedgerVoucher::newLedgerPost(formletterProvider.detailSummary(),
                                                         formletterProvider.postingModule(),
                                                         numberSeq ? numberSeq.parmVoucherSequenceCode() : '',
                                                         TransactionLogType::LedgerJournal,
                                                         this.parmLedgerJournalTrans().Txt,
                                                         true);

            ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                                  this.updateDate(),
                                                                  formletterProvider.postingModule(),
                                                                  formletterProvider.ledgerTransType(),
                                                                  (this.creditNote() ? this.parmStorno() : NoYes::No));

            [documentDate, documentNum] = this.ledgerVoucherObjectDocument(ledgerVoucherObject);
            ledgerVoucherObject.parmDocument(documentDate, documentNum);

            this.ledgerVoucherObjectSetParms(ledgerVoucherObject);
            ledgerVoucher.parmJournalNumber(this.parmLedgerJournalTrans().JournalNum);

            // BE country/region requires voucher series; it may not be set if the approval journal didn't change date and voucher number from the register
            if (!ledgerVoucher.parmVoucherSeriesCode())
            {
                ledgerVoucher.parmVoucherSeriesCode(ledgerVoucherObject.parmVoucherSeriesCode());
            }

            ledgerVoucher.addVoucher(ledgerVoucherObject);
        }

        ledgerVoucher.findLedgerVoucherObject(voucher, this.updateDate()).lastTransTxt(transactionTxt.txt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTransPool</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a record in the <c>LedgerJournalTrans</c> table that represents an AP Invoice Pool.
    /// </summary>
    /// <returns>
    ///    A record in the <c>LedgerJournalTrans</c> table that represents an AP Invoice Pool.
    /// </returns>
    protected LedgerJournalTrans ledgerJournalTransPool()
    {
        return LedgerJournalTrans::ledgerJournalTransPool(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherObjectDocument</Name>
				<Source><![CDATA[
    protected container ledgerVoucherObjectDocument(LedgerVoucherObject _ledgerVoucherObject)
    {
        DocumentDate documentDate;
        DocumentNum documentNum;

        [documentDate, documentNum] = _ledgerVoucherObject.parmDocument();
        if (!documentDate && VendParameters::find().UseDocumentDate && ledgerJournalTrans.DocumentDate)
        {
            documentDate = ledgerJournalTrans.DocumentDate;
        }

        return [documentDate, documentNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherObjectSetParms</Name>
				<Source><![CDATA[
    protected void ledgerVoucherObjectSetParms(LedgerVoucherObject _ledgerVoucherObject)
    {
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        super(_ledgerVoucherObject);

        select firstonly RecId from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.Voucher ==  origVoucher &&
                  subledgerVoucherGeneralJournalEntry.AccountingDate == origTransDate &&
                  subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == curext()
        join LedgerPostingJournal from generalJournalEntry
            where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry &&
                  generalJournalEntry.Ledger == Ledger::current() &&
                  generalJournalEntry.LedgerPostingJournal != '';

        _ledgerVoucherObject.parmLedgerPostingJournalId(generalJournalEntry.LedgerPostingJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>TransDate</c> or <c>DocumentDate</c> should be used by the <c>LedgerVoucherObject</c>.
    /// </summary>
    /// <returns>true if the <c>TransDate</c> or <c>DocumentDate</c> should be used by the <c>LedgerVoucherObject</c>; otherwise, false.</returns>
    protected boolean mustUseDocumentDate()
    {
        return vendInvoiceInfoTable.useDocumentDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigTransDate</Name>
				<Source><![CDATA[
    public TransDate parmOrigTransDate(TransDate _origTransDate = origTransDate)
    {
        origTransDate = _origTransDate;
        return origTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigVoucher</Name>
				<Source><![CDATA[
    public Voucher parmOrigVoucher(Voucher _origVoucher = origVoucher)
    {
        origVoucher = _origVoucher;
        return  origVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPurgeLedgerAccount</Name>
				<Source><![CDATA[
    protected void postPurgeLedgerAccount()
    {
        LedgerJournalId ledgerJournalIdPool = LedgerJournalTable::findVendorInvoicePool().JournalNum;
        LedgerJournalTrans offsetLedgerJournalTrans;
        LedgerVoucherObject ledgerVoucherObject;

        // <GEERU>
        LedgerBondClient_RU ledgerBondClient;
        // </GEERU>
        LedgerVoucherTransObject ledgerVoucherTransObject;
        CurrencyExchangeHelper exchangeRateHelper;

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(
                    Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                    this.updateDate());
        exchangeRateHelper.parmExchangeRate1(this.fixedExchRate());
        exchangeRateHelper.parmExchangeRate2(this.fixedExchRateSecondary());
        exchangeRateHelper.parmReportingExchangeRate1(this.reportingCurrencyfixedExchangeRate());

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        // <GEERU>
        ledgerBondClient = ledgerVoucherObject.ledgerBondClient_RU();
        if (ledgerBondClient)
        {
            ledgerBondClient.addNewLogObject();
        }
        // </GEERU>

        this.initializeVoucherTransDate(ledgerVoucherObject, vendInvoiceInfoTable.TransDate);

        while select offsetLedgerJournalTrans
            where offsetLedgerJournalTrans.JournalNum == ledgerJournalTrans.JournalNum
               && offsetLedgerJournalTrans.Voucher == ledgerJournalTrans.Voucher
               && offsetLedgerJournalTrans.PurchLedgerPosting != ArrivalPostingType::None
               && offsetLedgerJournalTrans.PurchLedgerPosting != ArrivalPostingType::Vendor
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucherObject,
                    LedgerPostingType::VendPurchLedger,
                    offsetLedgerJournalTrans.parmLedgerDimension(),
                    offsetLedgerJournalTrans.CurrencyCode,
                    offsetLedgerJournalTrans.amount(),
                    exchangeRateHelper);

            ledgerVoucherTransObject.parmSkipDimensionValidation(true);

            ledgerVoucherTransObject.parmTaxParentReferenceTableId(offsetLedgerJournalTrans.TableId);
            ledgerVoucherTransObject.parmTaxParentReferenceRecId(offsetLedgerJournalTrans.RecId);
            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }

        // <GEERU>
        if (ledgerBondClient)
        {
            ledgerBondClient.bondLog2Log();
            ledgerBondClient.removeCurrentLogObject();
        }
        // </GEERU>

        this.initializeVoucherTransDate(ledgerVoucherObject, vendInvoiceInfoTable.DocumentDate);

        while select forupdate offsetLedgerJournalTrans
              where offsetLedgerJournalTrans.JournalNum == ledgerJournalTrans.JournalNum
                 && offsetLedgerJournalTrans.Voucher == ledgerJournalTrans.Voucher
        {
            offsetLedgerJournalTrans.delete(false);
        }

        while select forupdate offsetLedgerJournalTrans
              where offsetLedgerJournalTrans.JournalNum == ledgerJournalIdPool
                 && offsetLedgerJournalTrans.Voucher == origVoucher

        {
            offsetLedgerJournalTrans.delete(false);
        }

        if (ledgerJournalTrans.JournalNum != oldVendTransJournalNum)
            // && oldVendTransJournalNum != ''  ????
        {
            while select forupdate offsetLedgerJournalTrans
                where offsetLedgerJournalTrans.JournalNum == oldVendTransJournalNum
                   && offsetLedgerJournalTrans.Voucher == ledgerJournalTrans.Voucher
            {
                offsetLedgerJournalTrans.delete(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    protected void postTax(boolean _post)
    {
        // The invoice register tax(es) must be reversed before posting the approval journal taxes, or they will get reversed as well
        this.reversePostedTax();

        // <GIN>
        // reverse the withholding taxes for invoice register.
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            this.reversePostedTaxWithhold_IN();
        }
        // </GIN>

        super(_post);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPosted</Name>
				<Source><![CDATA[
    protected void printPosted()
    {
        if (!this.isProforma()
            && !this.isOnHold()
            && !this.parmChainFormletterContract().isSimulatePosting)
        {
            info(strFmt("@SYS9799", ledgerJournalTrans.Voucher));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePostedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses Tax posting.
    /// </summary>
    protected void reversePostedTax()
    {
        DocumentDate originalDate, reverseDate;
        TaxReverseTax taxReverseTax;
        LedgerPostingController ledgerPostingController;
        LedgerJournalTrans localLedgerJournalTrans;

        this.initializeVoucherTransDate(ledgerVoucher.findLedgerVoucherObject(), vendInvoiceInfoTable.TransDate);

        if (!originalDate)
        {
            originalDate = origTransDate;
        }

        reverseDate = vendInvoiceInfoTable.TransDate;

        select firstonly RecId, ReportingCurrencyExchRate, Voucher, TransDate, Invoice from localLedgerJournalTrans
        where localLedgerJournalTrans.JournalNum == ledgerJournalTrans.JournalNum &&
              localLedgerJournalTrans.Voucher == ledgerJournalTrans.Voucher &&
              localLedgerJournalTrans.TransDate == ledgerJournalTrans.TransDate &&
              localLedgerJournalTrans.PurchLedgerPosting == ArrivalPostingType::Offset;

        taxReverseTax = new TaxReverseTax(ledgerVoucher.lastVoucher(), reverseDate, strFmt("@SYS26545",origVoucher));
        taxReverseTax.setReverseTableId(localLedgerJournalTrans.TableId);
        taxReverseTax.setReverseRecId(localLedgerJournalTrans.RecId);
        taxReverseTax.setSource(TaxModuleType::PurchInvoice);

        ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher);

        taxReverseTax.parmReportingCurrencyExchRate(localLedgerJournalTrans.ReportingCurrencyExchRate);
        taxReverseTax.calcAndPost(ledgerPostingController, origVoucher, originalDate);

        this.initializeVoucherTransDate(ledgerVoucher.findLedgerVoucherObject(), vendInvoiceInfoTable.DocumentDate);

        this.postTaxReversalToISV(localLedgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxReversalToISV</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post reversed tax to ISV.
    /// </summary>
    /// <param name = "_ledgerJournalTransInvoicePool">The invoice pool journal line <c>LedgerJournalTrans</c> record.</param>
    private void postTaxReversalToISV(LedgerJournalTrans _ledgerJournalTransInvoicePool)
    {
        if (TaxIntegrationUtils::isISVApiActivated(TaxServiceISVApiTypes::PostTax))
        {
            TaxIntegrationBusinessProcess businessProcess = TaxIntegrationUtils::getBusinessProcessBySourceHeadingTable(_ledgerJournalTransInvoicePool.TableId, _ledgerJournalTransInvoicePool.RecId);

            if (TaxIntegrationUtils::getTaxSolutionProviderTypeByBusinessProcess(businessProcess) == TaxSolutionProviderType::ISV)
            {
                TaxIntegrationCalculationInputPersisted::copyPackedTaxCalculationInputFromInvoiceRegisterForInvoicePosting(
                    LedgerJournalTrans::ledgerJournalTransRegister(_ledgerJournalTransInvoicePool),
                    _ledgerJournalTransInvoicePool,
                    _ledgerJournalTransInvoicePool.RecId,
                    TaxModuleType::PurchInvoice);

                TaxIntegrationFacade::postTaxToISV(_ledgerJournalTransInvoicePool.TableId, _ledgerJournalTransInvoicePool.RecId, TaxModuleType::PurchInvoice);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePostedTaxWithhold_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse posted tax withhold.
    /// </summary>
    protected void reversePostedTaxWithhold_IN()
    {
        DocumentDate originalDate, reverseDate;
        TaxWithholdReversePost_IN taxWithholdReversePost;
        LedgerPostingController ledgerPostingController;
        LedgerJournalTrans localLedgerJournalTrans;

        this.initializeVoucherTransDate(ledgerVoucher.findLedgerVoucherObject(), VendInvoiceInfoTable.TransDate);

        if (!originalDate)
        {
            originalDate = origTransDate;
        }

        reverseDate = vendInvoiceInfoTable.TransDate;

        this.validateWithholdTax_IN();

        select firstonly RecId from localLedgerJournalTrans
        where localLedgerJournalTrans.JournalNum == ledgerJournalTrans.JournalNum &&
              localLedgerJournalTrans.Voucher == ledgerJournalTrans.Voucher &&
              localLedgerJournalTrans.TransDate == ledgerJournalTrans.TransDate &&
              localLedgerJournalTrans.PurchLedgerPosting == ArrivalPostingType::Offset;

        taxWithholdReversePost = new TaxWithholdReversePost_IN(ledgerVoucher.lastVoucher(), reverseDate, strFmt("@SYS26545",origVoucher));
        taxWithholdReversePost.setReverseTableId(localLedgerJournalTrans.TableId);
        taxWithholdReversePost.setReverseRecId(localLedgerJournalTrans.RecId);
        taxWithholdReversePost.setSource(TaxModuleType::PurchInvoice);

        ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher);

        taxWithholdReversePost.calcAndPost(ledgerPostingController, origVoucher, reverseDate);

        this.initializeVoucherTransDate(ledgerVoucher.findLedgerVoucherObject(), VendInvoiceInfoTable.DocumentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction date.
    /// </summary>
    /// <returns>
    /// A transaction date.
    /// </returns>
    protected TransDate updateDate()
    {
        return vendInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWithholdTax_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if multiple taxtypes attached to transaction lines.
    /// </summary>
    private void validateWithholdTax_IN()
    {
        VendInvoiceInfoLine vendInvoiceInfoLineloc;
        VendInvoiceInfoLineTaxExtension_IN vendInvoiceInfoLineTaxExtension;
        LedgerJournalTrans ledgerJournalTransloc;
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt;
        int tcsLineCount;
        int tdsLineCount;
        TaxInformation_IN taxinformation;

        while select RecId from vendInvoiceInfoLineloc
            where vendInvoiceInfoLineloc.ParmId == vendInvoiceInfoTable.ParmId
            && vendInvoiceInfoLineloc.TableRefId == vendInvoiceInfoTable.TableRefId
        {
            vendInvoiceInfoLineTaxExtension = vendInvoiceInfoLineTaxExtension_IN::findByVendInvoiceInfoLineRecId(vendInvoiceInfoLineloc.RecId);

            if (vendInvoiceInfoLineTaxExtension.TCSGroup)
            {
                tcsLineCount += 1;
            }
            if (vendInvoiceInfoLineTaxExtension.TDSGroup)
            {
                tdsLineCount += 1;
            }

            if (tcsLineCount && tdsLineCount)
            {
                throw error(strfmt("@GLS5856", "@SYS128898"));
            }

            if (vendInvoiceInfoLineTaxExtension.TCSGroup|| vendInvoiceInfoLineTaxExtension.TDSGroup)
            {
                taxinformation = TaxInformation_IN::find(TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(vendInvoiceInfoLineloc).TaxInformation);
                if (!taxinformation || !taxinformation.TAN)
                {
                    throw error(strFmt("@SYS26332", "@GLS5353"));
                }
            }
        }

        select firstonly RecId from ledgerJournalTransloc
            where ledgerJournalTransloc.JournalNum == ledgerJournalTrans.JournalNum
                && ledgerJournalTransloc.Voucher == ledgerJournalTrans.Voucher
                && ledgerJournalTransloc.TransDate == ledgerJournalTrans.TransDate
            join TCSGroup, TDSGroup from ledgerJournalTransTaxExt
                where ledgerJournalTransTaxExt.LedgerJournalTrans == ledgerJournalTransloc.RecId
                    && (ledgerJournalTransTaxExt.TDSGroup || ledgerJournalTransTaxExt.TCSGroup);

        if (ledgerJournalTransTaxExt.TCSGroup)
        {
            tcsLineCount += 1;
        }
        if (ledgerJournalTransTaxExt.TDSGroup)
        {
            tdsLineCount += 1;
        }

        if (tcsLineCount && tdsLineCount)
        {
            throw error(strfmt("@GLS5856", "@SYS128898"));
        }

        if (ledgerJournalTransTaxExt.TCSGroup || ledgerJournalTransTaxExt.TDSGroup)
        {
            taxinformation = TaxInformation_IN::find(TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(ledgerJournalTransloc).TaxInformation);
            if (!taxinformation || !taxinformation.TAN)
            {
                throw error(strFmt("@SYS26332", "@GLS5353"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchApproveJournalPost construct()
    {
        return new PurchApproveJournalPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSourceDocument</Name>
				<Source><![CDATA[
    protected void processSourceDocument()
    {
        //The currency re-evaluation entries on Invoice register should be reversed prior to posting the approval entries to GL.
        //This ensures appropriate reversal and posting of the unrealized gain/loss.
        LedgerJournalCheckPostApproval::postExchangeRateAdjustments(ledgerJournalTrans, ledgerVoucher, vendInvoiceInfoTable.transDate, voucher);
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>