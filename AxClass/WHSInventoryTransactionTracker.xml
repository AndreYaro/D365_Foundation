<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionTracker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventoryTransactionTracker</c> class is responsible for changing on-hand based on the warehouse inventory transactions.
/// </summary>
internal final class WHSInventoryTransactionTracker
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>trackTransaction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void trackTransaction(WHSInventoryTransaction _inventoryTransaction)
    {
        WHSInventoryItemSetElement itemSetElement;

        using (WHSInventoryTranscationOnHandStackContext context = WHSInventoryTranscationOnHandStackContext::construct())
        {
            using (WHSInventoryTransactionSkipInventSumLogTTSContext skipInventSumLogTTSContext = WHSInventoryTransactionSkipInventSumLogTTSContext::construct())
            {
                skipInventSumLogTTSContext.parmSkipInventSumLogTTS(WHSInventoryTransactionTrackerSkipInventSumLogTTSFlight::instance().isEnabled());

                while select itemSetElement
                    where itemSetElement.ItemSetId == _inventoryTransaction.ItemSetId
                {
                    InventDim inventDimTrans = this.createInventDim(_inventoryTransaction, itemSetElement);

                    switch (_inventoryTransaction.Type)
                    {
                        case WHSInventoryTransactionTypeEnum::PhysicalReservation:
                            this.trackTransaction_PhysicalReservation(
                                itemSetElement,
                                inventDimTrans);
                            break;

                        case WHSInventoryTransactionTypeEnum::RemovedPhysicalReservation:
                            this.trackTransaction_RemovedPhysicalReservation(
                                itemSetElement,
                                inventDimTrans);
                            break;

                        case WHSInventoryTransactionTypeEnum::RegisteredReceipt:
                            this.trackTransaction_RegisteredReceipt(
                                itemSetElement,
                                inventDimTrans);
                            break;

                        case WHSInventoryTransactionTypeEnum::RegisteredIssue:
                            this.trackTransaction_RegisteredIssue(
                                itemSetElement,
                                inventDimTrans);
                            break;

                        default:
                            throw error(Error::wrongUseOfFunction(funcName()));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackTransaction_PhysicalReservation</Name>
				<Source><![CDATA[
    private void trackTransaction_PhysicalReservation(
        WHSInventoryItemSetElement _itemSetElement,
        InventDim _inventDimTrans)
    {
        InventTrans inventTrans = this.initInventTrans(
            _itemSetElement.ItemId,
            _inventDimTrans,
            -_itemSetElement.HandlingQty,
            -_itemSetElement.HandlingWeight,
            StatusIssue::ReservPhysical,
            StatusReceipt::None);

        this.initInventSum(_itemSetElement.ItemId, _inventDimTrans.InventDimId)
            .updateInventTrans(inventTrans, NoYes::Yes, null, false, NoYes::No, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackTransaction_RemovedPhysicalReservation</Name>
				<Source><![CDATA[
    private void trackTransaction_RemovedPhysicalReservation(
        WHSInventoryItemSetElement _itemSetElement,
        InventDim _inventDimTrans)
    {
        InventTrans inventTrans = this.initInventTrans(
            _itemSetElement.ItemId,
            _inventDimTrans,
            -_itemSetElement.HandlingQty,
            -_itemSetElement.HandlingWeight,
            StatusIssue::ReservPhysical,
            StatusReceipt::None);

        this.initInventSum(_itemSetElement.ItemId, _inventDimTrans.InventDimId)
            .updateInventTrans(inventTrans, NoYes::No, null, false, NoYes::No, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackTransaction_RegisteredReceipt</Name>
				<Source><![CDATA[
    private void trackTransaction_RegisteredReceipt(
        WHSInventoryItemSetElement _itemSetElement,
        InventDim _inventDimTrans)
    {
        InventTrans inventTrans = this.initInventTrans(
            _itemSetElement.ItemId,
            _inventDimTrans,
            _itemSetElement.HandlingQty,
            _itemSetElement.HandlingWeight,
            StatusIssue::None,
            StatusReceipt::Purchased);

        this.initInventSum(_itemSetElement.ItemId, _inventDimTrans.InventDimId)
            .updateInventTrans(inventTrans, NoYes::Yes, null, false, NoYes::No, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackTransaction_RegisteredIssue</Name>
				<Source><![CDATA[
    private void trackTransaction_RegisteredIssue(
        WHSInventoryItemSetElement _itemSetElement,
        InventDim _inventDimTrans)
    {
        InventTrans inventTrans = this.initInventTrans(
            _itemSetElement.ItemId,
            _inventDimTrans,
            -_itemSetElement.HandlingQty,
            -_itemSetElement.HandlingWeight,
            StatusIssue::Sold,
            StatusReceipt::None);

        this.initInventSum(_itemSetElement.ItemId, _inventDimTrans.InventDimId)
            .updateInventTrans(inventTrans, NoYes::Yes, null, false, NoYes::No, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDim</Name>
				<Source><![CDATA[
    private InventDim createInventDim(
        WHSInventoryTransaction _inventoryTransaction,
        WHSInventoryItemSetElement _itemSetElement)
    {
        InventDim inventDim;

        _inventoryTransaction.copyInventoryDimensionsTo(inventDim);
        _itemSetElement.copyInventoryDimensionsTo(inventDim);

        inventDim = InventDim::findOrCreate(inventDim);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSum</Name>
				<Source><![CDATA[
    private InventSum initInventSum(ItemId _itemId, InventDimId _inventDimId)
    {
        InventSum inventSum;

        inventSum.ItemId = _itemId;
        inventSum.InventDimId = _inventDimId;

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTrans</Name>
				<Source><![CDATA[
    private InventTrans initInventTrans(
        ItemId _itemId,
        InventDim _inventDim,
        WHSInventoryTransactionHandlingQty _handlingQuantity,
        WHSInventoryTransactionHandlingWeight _handlingWeight,
        StatusIssue _statusIssue,
        StatusReceipt _statusReceipt)
    {
        WHSInventoryQuantityPair inventoryQuantity = WHSInventoryTransactionQuantityFormatConverter::convertFromWarehouseHandlingFormatToInventoryFormat(
            _itemId,
            _handlingQuantity,
            _handlingWeight);

        InventTrans inventTrans;

        inventTrans.ItemId = _itemId;
        inventTrans.inventDimId = _inventDim.inventDimId;
        inventTrans.Qty = inventoryQuantity.parmInventQty();
        inventTrans.PdsCWQty = inventoryQuantity.parmCwInventQty();
        inventTrans.StatusIssue = _statusIssue;
        inventTrans.StatusReceipt = _statusReceipt;

        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSInventoryTransactionTracker construct()
    {
        return new WHSInventoryTransactionTracker();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>