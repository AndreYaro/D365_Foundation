<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWarehouseInitiationWizardContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSWarehouseInitiationWizardContext implements SysSaveable
{
    internal str stagingLocationType;
    internal str packagingLocationType;
    internal str finalShippingLocationType;

    public Set warehouseIds = new Set(Types::String);
    public WhsWarehouseGroupAll warehouseSelection;
    public WhsWarehouseGroupId warehouseGroupId;
    
    public boolean isPackingBeforeShippingEnabled;

    public boolean isManualPackingCheckBoxEnabled;
    public boolean isPackWaveContainerCheckBoxEnabled;

    public WHSWorkTemplateCode salesWorkTemplateCode;
    public WHSWaveTemplateName shippingWaveTemplateName;
    public WHSLocDirName soPickLocationDirectiveName;

    public Set selectedTypes = new Set(Types::String);
    public WHSContainerGroupId groupName;
    public WHSContainerizationName containerBuildTemplateCode;
    public WHSWaveStepCode waveStepCode;
    
    public boolean isSalesStagingEnabled;
    public WMSLocationId salesStagingLocationId;
    public WHSLocDirHintCode salesStagingDirectiveCode;
    public WHSWorkClassId salesStagingWorkClassId;
    public WHSLocDirName salesPutStagingLocationDirectiveName;

    public boolean isStagingEnabled;
    public WMSLocationId stagingLocationId;
    public WHSLocDirHintCode stagingDirectiveCode;
    public WHSWorkClassId soStagingWorkClassId;
    public WHSLocDirName soPutStagingLocationDirectiveName;
    
    public WMSLocationId finalShippingLocationId;
    public WHSLocDirHintCode finalShippingDirectiveCode;
    public WHSWorkClassId soFinalShippingWorkClassId;
    public WHSLocDirName soPutFinalShippingLocationDirectiveName;

    public WHSWorkClassId packingFinalShippingWorkClassId;
    public WHSLocDirName packingPutFinalShippingLocationDirectiveName;
    
    public WHSWorkClassId sortingFinalShippingWorkClassId;
    public WHSLocDirName sortingPutFinalShippingLocationDirectiveName;

    public WHSWorkClassId purchaseWorkClassId;
    public WHSWorkTemplateCode purchaseWorkTemplateCode;
    public WHSLocDirName poPutLocationDirectiveName;
    public boolean isPackingEnabled;
    public WMSLocationId packingLocationId;

    public WHSLocDirHintCode packingDirectiveCode;
    public WHSWorkClassId workClassToPackStation;
    public WHSLocDirName packLocation;
    public WHSLocDirName salesPutLocDir;
    
    public WHSCloseContainerProfileId containerPackingPolicy;
    public WHSWeightUOM whsContainerTypeUnitId;
    public WHSPackProfileId packingProfileId;
    public boolean isAvailableAtFinalShipping;
    public boolean isCreateWork;
    public boolean isAvailableAtSortingLoc;

    public WHSWorkTemplateCode packStationWorkTempName;
    public WMSLocationId packingFinalShippingLocationId;
    
    public boolean isMoveSortedContainersCreateWork;
    public WHSOutboundSortTemplateId outboundSortTemp;
    public WMSLocationId sortLocation;
    public WHSWorkClassId sortingWorkTemplateName;
    public WMSLocationId sortingFinalShippingLocationId;
    
    internal WHSWorkTransType outboundWorkTransType;
    internal WHSWarehouseInitiationWizardWorkTransTypeLabels workTransTypeLabels;

    #define.Version1(1)
    #localmacro.CurrentListV1
        // warehouseIds are not stored as SysSaveable as most likely a user would like to change the selection the next time running the wizard
        purchaseWorkClassId,
        purchaseWorkTemplateCode,
        salesWorkTemplateCode,
        shippingWaveTemplateName,
        soPickLocationDirectiveName,
        poPutLocationDirectiveName,
        isStagingEnabled,
        stagingLocationId,
        stagingDirectiveCode,
        soStagingWorkClassId,
        soPutStagingLocationDirectiveName,
        isPackingEnabled,
        packingLocationId,
        packingDirectiveCode,
        finalShippingLocationId,
        finalShippingDirectiveCode,
        soFinalShippingWorkClassId,
        soPutFinalShippingLocationDirectiveName
    #endmacro

    #define.Version2(2)
    #localmacro.CurrentListV2
        // warehouseIds are not stored as SysSaveable as most likely a user would like to change the selection the next time running the wizard
        salesWorkTemplateCode,
        shippingWaveTemplateName,
        soPickLocationDirectiveName,
        isStagingEnabled,
        stagingLocationId,
        stagingDirectiveCode,
        soStagingWorkClassId,
        soPutStagingLocationDirectiveName,
        finalShippingLocationId,
        finalShippingDirectiveCode,
        soFinalShippingWorkClassId,
        soPutFinalShippingLocationDirectiveName,
        isPackingBeforeShippingEnabled
    #endmacro

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        // warehouseIds are not stored as SysSaveable as most likely a user would like to change the selection the next time running the wizard
        salesWorkTemplateCode,
        shippingWaveTemplateName,
        soPickLocationDirectiveName,
        stagingLocationId,
        stagingDirectiveCode,
        soStagingWorkClassId,
        soPutStagingLocationDirectiveName,
        finalShippingLocationId,
        finalShippingDirectiveCode,
        soFinalShippingWorkClassId,
        soPutFinalShippingLocationDirectiveName,
        packingFinalShippingWorkClassId,
        packingPutFinalShippingLocationDirectiveName,
        sortingFinalShippingWorkClassId,
        sortingPutFinalShippingLocationDirectiveName,
        containerPackingPolicy,
        packingProfileId,
        whsContainerTypeUnitId,
        packingDirectiveCode,
        packStationWorkTempName,
        workClassToPackStation,
        salesPutLocDir,
        packLocation,
        outboundSortTemp,
        sortLocation,
        salesStagingLocationId,
        salesStagingDirectiveCode,
        salesStagingWorkClassId,
        salesPutStagingLocationDirectiveName,
        groupName,
        containerBuildTemplateCode,
        waveStepCode,
        packingFinalShippingLocationId,
        sortingWorkTemplateName,
        sortingFinalShippingLocationId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        outboundWorkTransType = WHSWorkTransType::Sales;
        workTransTypeLabels = WHSWarehouseInitiationWizardWorkTransTypeLabels::construct(outboundWorkTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWarehouseInitiationWizardContext construct()
    {
        WHSWarehouseInitiationWizardContext context = new WHSWarehouseInitiationWizardContext();
        xSysLastValue::getLast(context);
        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchContext</Name>
				<Source><![CDATA[
    internal void switchContext(WHSWorkTransType _outboundWorkTransType)
    {
        this.saveContext();

        if (outboundWorkTransType != _outboundWorkTransType)
        {
            outboundWorkTransType = _outboundWorkTransType;
            workTransTypeLabels = WHSWarehouseInitiationWizardWorkTransTypeLabels::construct(outboundWorkTransType);

            xSysLastValue::getLast(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveContext</Name>
				<Source><![CDATA[
    internal void saveContext()
    {
        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        salesWorkTemplateCode = workTransTypeLabels.defaultOutboundWorkTemplateCode();
        shippingWaveTemplateName = "@WAX:WHSWarehouseInitiationWizard_ShippingWaveTemplateName";
        soPickLocationDirectiveName = workTransTypeLabels.defaultOutboundPickLocationDirectiveName();

        WHSParameters whsParameters = WHSParameters::find();
        stagingLocationType = whsParameters.StageLocType ? str2Capital(whsParameters.StageLocType) : "@WAX:WHSWarehouseInitiationWizard_DefaultStagingLocationType";
        packagingLocationType = whsParameters.PackingLocationType ? str2Capital(whsParameters.PackingLocationType) : "@WAX:WHSWarehouseInitiationWizard_DefaultPackingLocationType";
        finalShippingLocationType = whsParameters.ShipFinalLocType ? str2Capital(whsParameters.ShipFinalLocType) : "@WAX:WHSWarehouseInitiationWizard_DefaultFinalShippingLocationType";
        
        salesStagingLocationId =  stagingLocationType;
        salesStagingDirectiveCode =  stagingLocationType;
        salesStagingWorkClassId = workTransTypeLabels.defaultOutboundStagingWorkClassId();
        salesPutStagingLocationDirectiveName = strFmt(workTransTypeLabels.defaultOutboundPutStagingLocationDirectiveName(), stagingLocationType);

        stagingLocationId = stagingLocationType;
        stagingDirectiveCode = stagingLocationType;
        soStagingWorkClassId = "@WAX:WHSWarehouseInitiationWizard_ContainerStagingWorkClassDefaultName";
        soPutStagingLocationDirectiveName = "@WAX:WHSWarehouseInitiationWizard_ContainerPutLocationDirectiveNameFormat";

        finalShippingLocationId = finalShippingLocationType;
        finalShippingDirectiveCode = finalShippingLocationType;
        soFinalShippingWorkClassId = workTransTypeLabels.defaultOutboundFinalShippingWorkClassId();
        soPutFinalShippingLocationDirectiveName = strFmt(workTransTypeLabels.defaultOutboundPutFinalShippingLocationDirectiveName(), finalShippingLocationType);
        
        packingFinalShippingWorkClassId  = "@WAX:WHSWarehouseInitiationWizard_PackingFinalShippingWorkClassDefaultName";
        packingPutFinalShippingLocationDirectiveName = "@WAX:WHSWarehouseInitiationWizard_PackingPutLocationDirectiveNameFormat";

        packStationWorkTempName = strFmt("@WAX:WHSWarehouseInitiationWizard_WorkTemplateWorkPackToBaydoor", finalShippingLocationType);
    
        sortingFinalShippingWorkClassId = "@WAX:WHSWarehouseInitiationWizard_SortFinalShippingWorkClassDefaultName";
        sortingPutFinalShippingLocationDirectiveName = "@WAX:WHSWarehouseInitiationWizard_SortingPutLocationDirectiveNameFormat";

        containerPackingPolicy = "@WAX:WHSWarehouseInitiationWizard_Default";
        packingProfileId = "@WAX:WHSWarehouseInitiationWizard_Default";
        whsContainerTypeUnitId = UnitOfMeasure::findBySymbol("kg") ? UnitOfMeasure::findBySymbol("kg").Symbol : "";
        packingDirectiveCode = "@WAX:WHSWarehouseInitiationWizard_DirectiveCode";
        workClassToPackStation = workTransTypeLabels.defaultWorkClassToPackStation();
        salesPutLocDir = workTransTypeLabels.defaultOutboundPutLocDir();
        packLocation = "@WAX:WHSWarehouseInitiationWizard_Pack";

        outboundSortTemp = "@WAX:WHSWarehouseInitiationWizard_Sort";
        sortLocation = "@WAX:WHSWarehouseInitiationWizard_Sort";

        groupName = "@WAX:WHSWarehouseInitiationWizard_ContainerGroupName";
        containerBuildTemplateCode = "@WAX:WHSWarehouseInitiationWizard_ContainerBuildTemplateName";
        waveStepCode = "@WAX:WHSWarehouseInitiationWizard_WaveStepCodeDefaultValue";
        packingFinalShippingLocationId = "@WAX:WHSWarehouseInitiationWizard_DefaultFinalShippingLocation";

        sortingWorkTemplateName = "@WAX:WHSWarehouseInitiationWizard_SortWorkTemplate";
        sortingFinalShippingLocationId = "@WAX:WHSWarehouseInitiationWizard_DefaultFinalShippingLocation";
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version = runbase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                return true;
            case #Version1 :
                [version,#CurrentListV1] = packedClass;
                return true;
            case #Version2 :
                [version,#CurrentListV2] = packedClass;
                return true;
            default :
                return false;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public dataAreaId lastValueDataAreaId()
    {
        return curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifiername lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public identifiername lastValueElementName()
    {
        return outboundWorkTransType == WHSWorkTransType::Sales
            ? classStr(WHSWarehouseInitiationWizardContext)
            : classStr(WHSWarehouseInitiationWizardContext) + enum2Str(outboundWorkTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Class;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public userId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>