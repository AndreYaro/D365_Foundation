<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRLedgerJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRLedgerJournal</c> class constructs classes to help create and post <c>ledgerjournal</c> records for
/// general journals, customer payment , vendor payments.
/// </summary>
abstract class MCRLedgerJournal
{
    LedgerJournalName       ledgerJournalName;
    LedgerJournalTable      ledgerJournalTable;

    LedgerJournalId         journalName;
    LedgerJournalType       ledgerJourType;
    Name                    name;

    // Parameters that potenially need to be set from the outside.
    LedgerJournalAC         accountNum;
    BankTransactionType     bankTransType;
    PaymReference           paymReference;
    MCRPaymOrderId          mcrPaymOrderID;
    MCRCCBankReconID        mcrCCBankReconId;
    NoYes                   mcrBankReconRecord;
    RefRecId                mcrRefPaymID;
    LedgerJournalTransTxt   transTxt;
    PaymMode                paymentMode;
    CurrencyCode            curCode;
    ExchRate                exchRate;
    TransDate               transactionDate;
    TransDate               documentDate;
    PostingProfile          postingProfile;
    // <GEERU>
    PostingProfile          offsetPostingProfile_RU;
    // </GEERU>
    NoYes                   prePay;
    LedgerTransType         transactionType;
    DimensionDefault        defaultDimension;
    boolean                 posted;
    InvoiceId               invoiceId;
    LedgerJournalId         mcrccGeneralLedgerId;
    LedgerJournalACType     ledgerAccountType;
    Num                     voucherNum;
    DimensionDynamicAccount ledgerAccount;
    // Ledger offset account type gets set based on the child that is constructed.
    DimensionDynamicAccount ledgerOffsetAccount;
    LedgerJournalACType     ledgerOffsetAccountType;

    Counter                 numVouchersPosted;
    Counter                 numVouchersInError;

    Voucher                 voucher;

    HcmApprover             approver;
    NoYes                   approved;

    PaymTermId              paymTermId;

    CustVendPaymStatus      paymentStatus;
    LineNum                 lineNum;
    DueDate                 dueDate;

    DimensionDefault        offsetDefaultDimension;

    TaxGroup                    taxGroup;
    TaxItemGroup                taxItemGroup;
    CustFactureAutoCreate_RU    custFactureAutoCreate_RU;

    #ISOCountryRegionCodes
    #EECountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a created <c>LedgerJournalTable</c> record.
    /// </summary>
    /// <param name="_name">
    /// The <c>Name</c> value used to set the customized journal name.
    /// </param>
    /// <returns>
    /// The created <c>LedgerJournalTable</c> record.
    /// </returns>
    public LedgerJournalTable createLedgerJournalTable(Name _name = "")
    {
        LedgerJournalTable ledgerJournalTableCreate;
        boolean validType = false;

        if (this.validateInputLedgerJourTable())
        {
            switch (ledgerJourType)
            {
                case LedgerJournalType::Daily:
                    validType = true;
                    break;
                case LedgerJournalType::CustPayment:
                case LedgerJournalType::VendInvoiceRegister:
                case LedgerJournalType::Payment:
                // <GEERU>
                case LedgerJournalType::RCash:
                // </GEERU>
                    validType = true;
                    break;
            }

            if (validType)
            {
                ledgerJournalTableCreate.JournalType = ledgerJourType;
                ledgerJournalTableCreate.JournalName = ledgerJournalName.JournalName;
                ledgerJournalTableCreate.CurrencyCode = curCode;
                ledgerJournalTableCreate.ExchRate = exchRate;
                ledgerJournalTableCreate.LedgerJournalInclTax = prePay;

                if (_name)
                {
                    ledgerJournalTableCreate.Name = _name;
                }
                else
                {
                    ledgerJournalTable.Name = ledgerJournalName.Name;
                }

                // Pass default dimension in case one exists.
                ledgerJournalTableCreate.DefaultDimension = defaultDimension;

                ledgerJournalTableCreate.DetailSummaryPosting = DetailSummary::Detail;
                ledgerJournalTableCreate.Posted = posted;
                ledgerJournalTableCreate.Approver = approver;

                ledgerJournalTableCreate.initValue();
                ledgerJournalTableCreate.defaultRow();

                try
                {
                    ledgerJournalTableCreate.insert();
                }
                catch
                {
                    throw error("@MCR39730");
                }

                ledgerJournalTable = ledgerJournalTableCreate;
            }
        }
        else
        {
            throw error(strFmt("@SYS22828", funcName()));
        }

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name="_amtCurCredit">
    /// The credit amount on the <c>LedgerJournalTrans</c>.
    /// </param>
    /// <param name="_amtCurDebit">
    /// The debit amount on the <c>LedgerJournalTrans</c>.
    /// </param>
    /// <param name="_ledgerJournalACType">
    /// The <c>LedgerJournalACType</c> on the <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The created <c>LedgerJournalTrans</c> record.
    /// </returns>
    abstract public LedgerJournalTrans createLedgerJournalTrans(AmountCurCredit     _amtCurCredit,
                                                                AmountCurDebit      _amtCurDebit,
                                                                LedgerJournalACType _ledgerJournalACType = LedgerJournalACType::Ledger)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the ledger journal.
    /// </summary>
    public void deleteJournal()
    {
        if (ledgerJournalTable)
        {
            ttsBegin;
            if (ledgerJournalTable.validateDelete())
            {
                ledgerJournalTable.delete();
            }
            else
            {
                throw error("@SYS104318");
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ledger journal based on the passed buffer.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The <c>LedgerJournalTable</c> buffer used to find the ledger journal.
    /// </param>
    public void getLedgerJournalTable(LedgerJournalTable   _ledgerJournalTable)
    {
        ledgerJournalTable = LedgerJournalTable::findByRecId(_ledgerJournalTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a count of the number of <c>ledgerJournalTrans</c>
    /// records tied to the <c>ledgerJournalTable</c> record.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of the <c>LedgerJournalTrans</c> table record.
    /// </returns>
    public NumberOfRecords getNumOfLines()
    {
        LedgerJournalTrans ledgerJournalTrans_Count;

        select count(RecId) from ledgerJournalTrans_Count
            where ledgerJournalTrans_Count.JournalNum == ledgerJournalTable.JournalNum;

        return ledgerJournalTrans_Count.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumVouchersBooked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of posted vouchers.
    /// </summary>
    /// <returns>
    /// The number of posted vouchers.
    /// </returns>
    public Counter getNumVouchersBooked()
    {
        return numVouchersPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumVouchersInError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of vouchers that have errors.
    /// </summary>
    /// <returns>
    /// The number of vouchers that have errors.
    /// </returns>
    public Counter getNumVouchersInError()
    {
        return numVouchersInError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the voucher of ledger journal.
    /// </summary>
    /// <returns>
    /// The voucher of ledger journal.
    /// </returns>
    public Voucher getVoucher()
    {
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerJournalTrans</c> table record.
    /// </summary>
    /// <param name="_ledgerJournalTrans_Count">
    /// An instance of the <c>LedgerJournalTrans</c> class.
    /// </param>
    protected void initLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans_Count)
    {
        _ledgerJournalTrans_Count.DocumentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        _ledgerJournalTrans_Count.CurrencyCode = curCode;
        _ledgerJournalTrans_Count.Company = curext();
        _ledgerJournalTrans_Count.TransDate = transactionDate;

        // Pull from the ledgerjournal table only if no dimension has been set.
        if (!defaultDimension)
        {
            _ledgerJournalTrans_Count.DefaultDimension = ledgerJournalTable.DefaultDimension;
        }

        //<GEERU>
        _ledgerJournalTrans_Count.CustFactureAutoCreate_RU = custFactureAutoCreate_RU;
        _ledgerJournalTrans_Count.TaxGroup = taxGroup;
        _ledgerJournalTrans_Count.TaxItemGroup = taxItemGroup;
        //</GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parm variables to default values in some cases so
    /// these variables are never null, blank or zero.
    /// </summary>
    private void initParmValues()
    {
        curCode = CompanyInfoHelper::standardCurrency();
        exchRate= ExchangeRateHelper::exchRate(curCode);
        transactionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        documentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of this class.
    /// </summary>
    /// <param name="_ledgerJournalType">
    /// The type of ledger journal.
    /// </param>
    /// <param name="_journalName">
    /// The name of the ledger journal; optional.
    /// </param>
    /// <param name="_detailSummaryPosting">
    /// The level of detail to account for when posting; optional.
    /// </param>
    public void new(LedgerJournalType _ledgerJournalType,
                    LedgerJournalId   _journalName="",
                    DetailSummary     _detailSummaryPosting = DetailSummary::Detail)
    {
        journalName = _journalName;
        ledgerJourType = _ledgerJournalType;
        curCode = CompanyInfoHelper::standardCurrency();
        approver = HcmWorkerLookup::currentWorker();
        approved = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the account number value if creating a journal for a customer or a vendor.
    /// </summary>
    /// <param name="_accountNum">
    /// The account number to be set on the ledger journal.
    /// </param>
    /// <returns>
    /// The ledger journal account value which is a customer or vendor account.
    /// </returns>
    public LedgerJournalAC parmAccountNum(LedgerJournalAC _accountNum = accountNum)
    {
        accountNum = _accountNum;
        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and returns a <c>Boolean</c> value to indicate if the journal has been approved or not.
    /// </summary>
    /// <param name="_approved">
    /// A <c>Boolean</c> value that defines whether the journal has been approved or not.
    /// </param>
    /// <returns>
    /// true if the journal has been approved; otherwise, false.
    /// </returns>
    public NoYes parmApproved(NoYes _approved = approved)
    {
        approved = _approved;
        return approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApprover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the approver and retuns the same.
    /// </summary>
    /// <param name="_approver">
    /// The worker who approved the journal.
    /// </param>
    /// <returns>
    /// The worker approving the journal.
    /// </returns>
    /// <remarks>
    /// Allows for setting and retuning the approver of the journal.
    /// </remarks>
    public HcmApprover parmApprover(HcmApprover _approver = approver)
    {
        approver = _approver;
        return approver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankReconRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and returns a <c>Boolean</c> value to indicate if the journal is a bank reconciliation record.
    /// </summary>
    /// <param name="_mcrBankReconRecord">
    /// A <c>Boolean</c> value that defines if the record is a bank reconciliation record.
    /// </param>
    /// <returns>
    /// true if the journal is a bank reconciliation record; otherwise, false.
    /// </returns>
    public NoYes parmBankReconRecord(NoYes _mcrBankReconRecord = mcrBankReconRecord)
    {
        mcrBankReconRecord = _mcrBankReconRecord;
        return mcrBankReconRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the bank transaction type.
    /// </summary>
    /// <param name="_bankTransType">
    /// Bank transaction type used on the ledger journal.
    /// </param>
    /// <returns>
    /// The bank transaction type.
    /// </returns>
    /// <remarks>
    /// The bank transaction type usually comes from the payment mode for most cases.
    /// </remarks>
    public BankTransactionType parmBankTransType(BankTransactionType _bankTransType = bankTransType)
    {
        bankTransType = _bankTransType;
        return bankTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCCBankReconId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>MCRBankReconId</c> on the <c>LedgerJournalTrans</c> table record.
    /// </summary>
    /// <param name="_mcrCCBankReconId">
    /// The <c>MCRBankReconId</c> to be set on the <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The <c>MCRBankReconId</c> on the <c>LedgerJournalTrans</c> table record.
    /// </returns>
    public MCRCCBankReconID parmCCBankReconId(MCRCCBankReconID _mcrCCBankReconId = mcrCCBankReconId)
    {
        mcrCCBankReconID = _mcrCCBankReconId;
        return mcrCCBankReconID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets currency code on the <c>ledgerjournalTrans</c> table record.
    /// </summary>
    /// <param name="_curCode">
    /// The currency to be set on the <c>ledgerjournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The currency set on the <c>ledgerjournalTrans</c> table record.
    /// </returns>
    public CurrencyCode parmCurrencyCode(CurrencyCode _curCode = curCode)
    {
        if (_curCode != "")
        {
            curCode = _curCode;
        }
        return curCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default dimension of the <c>LedgerJournalTrans</c> table record.
    /// </summary>
    /// <param name="_defaultDimension">
    /// The <c>DimensionDefault</c> to be set on the <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The default dimension set on the <c>LedgerJournalTrans</c> table record.
    /// </returns>
    public DimensionDefault parmDefaultDimension(DimensionDefault _defaultDimension = defaultDimension)
    {
        defaultDimension = _defaultDimension;
        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentDate</Name>
				<Source><![CDATA[
    public TransDate parmDocumentDate(TransDate _docuDate = documentDate )
    {
        documentDate = _docuDate;
        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDueDate</Name>
				<Source><![CDATA[
    public DueDate parmDueDate(DueDate _dueDate = dueDate)
    {
        dueDate = _dueDate;
        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchRate</Name>
				<Source><![CDATA[
    public ExchRate parmExchRate(ExchRate _exchRate = exchRate)
    {
        exchRate = _exchRate;
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>InvoiceId</c> on the <c>LedgerJournalTrans</c> table record.
    /// </summary>
    /// <param name="_invoiceId">
    /// The <c>InvoiceId</c> to be set on the <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The <c>InvoiceId</c> set on the <c>LedgerJournalTrans</c> table record.
    /// </returns>
    public InvoiceId parmInvoice(InvoiceId  _invoiceId = invoiceId)
    {
        invoiceId   = _invoiceId;
        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerAccount</Name>
				<Source><![CDATA[
    public DimensionDynamicAccount parmLedgerAccount(DimensionDynamicAccount _ledgerAccount = ledgerAccount)
    {
        ledgerAccount = _ledgerAccount;
        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerAccountType</Name>
				<Source><![CDATA[
    public LedgerJournalACType parmLedgerAccountType(LedgerJournalACType _ledgerJournalAccountType = LedgerJournalACType::Ledger)
    {
        ledgerAccountType = _ledgerJournalAccountType;
        return ledgerAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>LedgerJournalTable</c> record to the passed in value.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The passed in <c>LedgerJournalTable</c> record to be set.
    /// </param>
    /// <returns>
    /// The <c>LedgerJournalTable</c> record.
    /// </returns>
    public LedgerJournalTable parmLedgerJournalTable(LedgerJournalTable _ledgerJournalTable = ledgerJournalTable)
    {
        ledgerJournalTable = _ledgerJournalTable;
        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmledgerOffsetAccount</Name>
				<Source><![CDATA[
    public DimensionDynamicAccount parmledgerOffsetAccount(DimensionDynamicAccount _ledgerOffsetAccount = ledgerOffsetAccount)
    {
        ledgerOffsetAccount = _ledgerOffsetAccount;
        return ledgerOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerOffsetAccountType</Name>
				<Source><![CDATA[
    public LedgerJournalACType parmLedgerOffsetAccountType(LedgerJournalACType _ledgerJournalACType = LedgerJournalACType::Ledger)
    {
        ledgerOffsetAccountType = _ledgerJournalACType;
        return ledgerOffsetAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    public LineNum parmLineNum(LineNum _lineNum = lineNum)
    {
        lineNum = _lineNum;
        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRCCGeneralLedgerId</Name>
				<Source><![CDATA[
    public LedgerJournalId parmMCRCCGeneralLedgerId(LedgerJournalId _mcrccGeneralLedgerId = mcrccGeneralLedgerId)
    {
        mcrccGeneralLedgerId = _mcrccGeneralLedgerId;
        return mcrccGeneralLedgerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRPaymOrderID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>MCRPaymOrderID</c> on the <c>LedgerJournalTrans</c> table record.
    /// </summary>
    /// <param name="_mcrPaymOrderID">
    /// The <c>MCRPaymOrderID</c> to be set on the <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The <c>MCRPaymOrderID</c> on the <c>LedgerJournalTrans</c> table record.
    /// </returns>
    public MCRPaymOrderId parmMCRPaymOrderID(MCRPaymOrderId _mcrPaymOrderID = mcrPaymOrderID)
    {
        mcrPaymOrderID = _mcrPaymOrderID;
        return mcrPaymOrderID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRRefPaymID</Name>
				<Source><![CDATA[
    public RefRecId parmMCRRefPaymID(RefRecId _mcrRefPaymID = mcrRefPaymID)
    {
        mcrRefPaymID = _mcrRefPaymID;
        return mcrRefPaymID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public Name parmName(Name _name = name)
    {
        name = _name;
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmOffsetDefaultDimension(DimensionDefault _offsetDefaultDimension = offsetDefaultDimension)
    {
        offsetDefaultDimension = _offsetDefaultDimension;
        return offsetDefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentStatus</Name>
				<Source><![CDATA[
    public CustVendPaymStatus parmPaymentStatus(CustVendPaymStatus _paymentStatus = CustVendPaymStatus::None)
    {
        paymentStatus = _paymentStatus;
        return paymentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode(PaymMode _paymentMode = paymentMode)
    {
        paymentMode = _paymentMode;
        return paymentMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymReference</Name>
				<Source><![CDATA[
    public PaymReference parmPaymReference(PaymReference _paymReference = paymReference)
    {
        paymReference = _paymReference;
        return paymReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermId</Name>
				<Source><![CDATA[
    public PaymTermId parmPaymTermId(PaymTermId _paymTermId = paymTermId)
    {
        paymTermId = _paymTermId;
        return paymTermId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the journal has been posted.
    /// </summary>
    /// <param name="_posted">
    /// The <c>Boolean</c> value defining whether the journal has been posted.
    /// </param>
    /// <returns>
    /// true if the journal has been posted; otherwise, false.
    /// </returns>
    public boolean parmPosted(boolean _posted = posted)
    {
        posted = _posted;
        return posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfile</Name>
				<Source><![CDATA[
    public PostingProfile parmPostingProfile(PostingProfile _postingProfile = postingProfile)
    {
        postingProfile = _postingProfile;
        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrePayment</Name>
				<Source><![CDATA[
    public NoYes parmPrePayment(NoYes _prepay = prepay)
    {
        prepay = _prepay;
        return prepay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionType</Name>
				<Source><![CDATA[
    public LedgerTransType parmTransactionType(LedgerTransType _transactionType = transactionType)
    {
        transactionType = _transactionType;
        return transactionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transactionDate)
    {
        transactionDate = _transDate;
        return transactionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransTxt</Name>
				<Source><![CDATA[
    public LedgerJournalTransTxt parmTransTxt(LedgerJournalTransTxt _transTxt = transTxt)
    {
        transTxt = _transTxt;
        return transTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucherNum</Name>
				<Source><![CDATA[
    public Num parmVoucherNum(Num _voucherNum = voucherNum)
    {
        voucherNum = _voucherNum;
        return voucherNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the ledger journal.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The <c>LedgerJournalTable</c> buffer to be posted; optional.
    /// </param>
    public void post(LedgerJournalTable _ledgerJournalTable = null)
    {
        LedgerJournalCheckPost ledgerJournalCheckPost;

        if (_ledgerJournalTable)
        {
            ledgerJournalTable = _ledgerJournalTable;
        }

        if (ledgerJournalTable)
        {
            ledgerJournalTable.reread();

            ledgerJournalCheckPost= LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable,
                                                                                        NoYes::Yes);
            ledgerJournalCheckPost.parmBeQuiet(true);
            ledgerJournalCheckPost.parmMCRProgressBarHide(true);

            try
            {
                LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

                numVouchersPosted   = ledgerJournalCheckPost.numOfVouchersBooked();
                numVouchersInError  = ledgerJournalCheckPost.numOfErrorsInList();
                voucher = ledgerJournalCheckPost.parmVoucher();
            }
            catch
            {
                throw error("@SYS5943");
            }
        }
        else
        {
            throw error("@MCR35899");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInputLedgerJourTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the journal name on the journal table record.
    /// </summary>
    /// <returns>
    /// true if the input was valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A ledger  journal table requires a ledger journal name. The input validator ensures that
    /// if a journal name is passed in then that is used, if not based on the various defaulting
    /// mechanisms the system tries to find one. If no journal name is set up for the
    /// given journal type then the method throws an error.
    /// </remarks>
    private boolean validateInputLedgerJourTable()
    {
        boolean         validInput = true;
        // <GEERU>
        boolean             countryRegion_W     = SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU);
        RetailParameters    rboParameters       = RetailParameters::find();
        // </GEERU>

        // Ensure there is a ledgerjournalname since voucher series and other
        // requirements are driven from this.
        // If Ledgerjournalname is missing issue warning that a journalname based on type will be
        // selected instead of throwing an error.
        if (journalName != "")
        {
            ledgerJournalName = LedgerJournalName::find(journalName);
        }
        else
        {
            // If a journalname is not passed in, the class will try and find one
            // if one is still not found then throw error.
            // <GEERU>
            if (countryRegion_W)
            {
                switch (ledgerJourType)
                {
                    case LedgerJournalType::Daily:
                        ledgerJournalName = LedgerJournalName::find(rboParameters.DefaultLedgerJournalName_RU);
                    break;
                    case LedgerJournalType::CustPayment:
                        ledgerJournalName = LedgerJournalName::find(rboParameters.DefaultCustPaymentJournalName_RU);
                    break;
                    case LedgerJournalType::RCash:
                        ledgerJournalName = LedgerJournalName::find(rboParameters.DefaultRCashJournalName);
                    break;
                    case LedgerJournalType::VendInvoiceRegister:
                    break;
                }
            }
            else
            {
                // </GEERU>
                switch (ledgerJourType)
                {
                    case LedgerJournalType::Daily:
                        select firstonly RecId, JournalName from ledgerJournalName
                            where ledgerJournalName.JournalType == LedgerJournalType::Daily;
                        break;
                    case LedgerJournalType::CustPayment:
                        if (RetailCommerceUnifiedPaymentJournalFeatureExposure::isEnabled())
                        {
                            select firstonly RecId, JournalName from ledgerJournalName
                                where ledgerJournalName.JournalName == RetailParameters::find().PrePaymentLedgerJournalName
                                    && ledgerJournalName.JournalType == LedgerJournalType::CustPayment;
                        }
                        else
                        {
                            select firstonly RecId, JournalName from ledgerJournalName
                                where ledgerJournalName.JournalType == LedgerJournalType::CustPayment;
                        }
                        break;
                    case LedgerJournalType::VendInvoiceRegister:
                        break;
                }
                // <GEERU>
            }
            // </GEERU>
        }
        return validInput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInputLedgerJourTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the journal credit and debit amounts on the journal trasaction record.
    /// </summary>
    /// <param name="_amtCurCredit">
    /// The credit amount to validate.
    /// </param>
    /// <param name="_amtCurDebit">
    /// The debit amount to validate
    /// </param>
    /// <returns>
    /// true if the input was valid; otherwise, false.
    /// </returns>
    protected boolean validateInputLedgerJourTrans(AmountCur    _amtCurCredit,
                                                    AmountCur   _amtCurDebit)
    {
        boolean valid = true;

        // Cannot have both credit and debit on the same record.
        // Cannot have either account numbers be invalid, validate here.
        // Amounts being passed in cannot be negative.
        if (_amtCurCredit != 0 && _amtCurDebit != 0)
        {
            valid = false;
            error("@MCR35844");
        }
        if (_amtCurCredit < 0 || _amtCurDebit < 0)
        {
            valid = false;
            error ("@MCR35843");
        }
        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contructs the appropriate <c>MCRLedgerJournal</c> object based on the
    /// passed in <c>LedgerJournalType</c> value.
    /// </summary>
    /// <param name="_ledgerJournalType">
    /// The <c>LedgerJournalType</c> value to be used on the <c>MCRLedgerJournal</c> object.
    /// </param>
    /// <param name="_journalName">
    /// The name to be set on the journal.
    /// </param>
    /// <returns>
    /// The constructed <c>MCRLedgerJournal</c> object.
    /// </returns>
    public static MCRLedgerJournal construct(LedgerJournalType _ledgerJournalType,
                                     LedgerJournalNameId _journalName="")
    {
        MCRLedgerJournal mcrLedgerJournal;
        switch (_ledgerJournalType)
        {
            case LedgerJournalType::Daily:
                mcrLedgerJournal = new MCRLedgerJournal_Daily(_ledgerJournalType, _journalName);
            break;
            case LedgerJournalType::CustPayment:
                mcrLedgerJournal = new MCRLedgerJournal_CustPayment(_ledgerJournalType, _journalName);
            break;
            // <GEERU>
            case LedgerJournalType::RCash:
                mcrLedgerJournal = new MCRLedgerJournal_RCash(_ledgerJournalType, _journalName);
            break;
            // </GEERU>
            case LedgerJournalType::VendInvoiceRegister:
                mcrLedgerJournal = new MCRLedgerJournal_VendInvoiceRegister(_ledgerJournalType, _journalName);
            break;

            case LedgerJournalType::Payment:
                mcrLedgerJournal = new MCRLedgerJournal_Payment(_ledgerJournalType, _journalName);
            break;
        }
        mcrLedgerJournal.initParmValues();
        return mcrLedgerJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustFactureAutoCreate_RU</Name>
				<Source><![CDATA[
    public CustFactureAutoCreate_RU parmCustFactureAutoCreate_RU(CustFactureAutoCreate_RU _custFactureAutoCreate_RU = custFactureAutoCreate_RU)
    {
        custFactureAutoCreate_RU = _custFactureAutoCreate_RU;
        return custFactureAutoCreate_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetPostingProfile_RU</Name>
				<Source><![CDATA[
    public PostingProfile parmOffsetPostingProfile_RU(PostingProfile _offsetPostingProfile_RU = offsetPostingProfile_RU)
    {
        offsetPostingProfile_RU = _offsetPostingProfile_RU;
        return offsetPostingProfile_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup parmTaxGroup(TaxGroup _taxGroup = taxGroup)
    {
        taxGroup = _taxGroup;
        return taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxItemGroup</Name>
				<Source><![CDATA[
    public TaxItemGroup parmTaxItemGroup(TaxItemGroup _taxItemGroup = taxItemGroup)
    {
        taxItemGroup = _taxItemGroup;
        return taxItemGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>