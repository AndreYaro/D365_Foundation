<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayAbout</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.Environment;

/// <summary>
/// The <c>WHSWorkExecuteDisplayAbout</c> class is used to display About form in RF device.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::About)]
class WHSWorkExecuteDisplayAbout extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>useSingleTransactionMode</Name>
				<Source><![CDATA[
    protected boolean useSingleTransactionMode()
    {
        // To be able to catch exceptions when environment info is not available.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoToMenuWhenCancelling</Name>
				<Source><![CDATA[
    protected boolean mustGoToMenuWhenCancelling()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>environmentName</Name>
				<Source><![CDATA[
    private str environmentName(IApplicationEnvironment _environment)
    {
        int infologLine = infologLine();
        try
        {
            return _environment.get_Infrastructure().get_EnvironmentName();
        }
        catch
        {
            infolog.clear(infologLine);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAbout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to the About form state.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildAbout(container _con)
    {
        xSession    session = new xSession();
        container   ret = _con;
        var         environment = EnvironmentFactory::GetApplicationEnvironment();

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayAboutControls::ApplicationVersionLabel, strFmt("@SYS340809", ApplicationVersion::buildNo()), 1, '', #WHSRFUndefinedDataType, '', 0)];

        UserInfo userInfo = xUserInfo::find();

        str userData = strFmt("@WAX1111", strFmt('%1\n%2', userId, WHSWorkUser::find(userId).UserName));
        str warehouseData = strFmt("@WAX1112", strFmt('%1\n%2', WHSWorkUserSession::find(userId).InventLocationId, curExt()));
        str accountData = strFmt("@WAX:AccountLabel", strFmt('%1\n%2\n%3', userInfo.name, userInfo.networkAlias, curUserGuid()));

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayAboutControls::UserIdLabel, userData, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayAboutControls::UserLocationLabel, warehouseData, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayAboutControls::AccountLabel, accountData, 1, '', #WHSRFUndefinedDataType, '', 0)];
        str environmentName = this.environmentName(environment);
        if (environmentName)
        {
            ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayAboutControls::EnvironmentNameLabel, strFmt("@WAX:EnvironmentNameLabel", environmentName), 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayAboutControls::AOSNameLabel, strFmt("@SYS71011", session.AOSName()), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayAboutControls::AOSRootURLLabel, strFmt("@WAX:AOSWebRoot", environment.get_Infrastructure().get_HostURL()), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret = this.buildPrivacyAndCookiesLinkControl(ret);

        if (WHSVersionNumber::construct(pass.parmAppVersion()).isAboutTheAppButtonSupported())
        {
            ret += [this.buildControl(#RFButton, WHSMobileAppControlNames::RFAboutTheApp, "@WAX:MobileButtonAboutTheApp", 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPrivacyAndCookiesLinkControl</Name>
				<Source><![CDATA[
    private container buildPrivacyAndCookiesLinkControl(container _con)
    {
        container ret = _con;

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayAboutControls::PrivacyAndCookiesLinkLabel, this.getPrivacyAndCookiesLinkLabel(), 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrivacyAndCookiesLinkLabel</Name>
				<Source><![CDATA[
    private str getPrivacyAndCookiesLinkLabel()
    {
        const str PrivacyAndCookiesURL = 'https://go.microsoft.com/fwlink/?LinkId=521839';

        return strFmt("@WAX:PrivacyAndCookiesLink_Label", PrivacyAndCookiesURL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        container ret = connull();

        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        if (_buttonClicked == #RFOK)
        {
            ret = this.updateModeStepPass(_con, WHSWorkExecuteMode::Menu, 0, pass);
            ret = conPoke(ret, 2, pass.pack());

            WHSWorkExecuteDisplay workExecuteDisplay = WHSWorkExecuteDisplay::construct(WHSWorkExecuteMode::Menu);
            return workExecuteDisplay.displayForm(ret, #RFBack);
        }
        else
        {
            ret = this.buildAbout(ret);

            ret = this.updateModeStepPass(ret, WHSWorkExecuteMode::About, 1, pass);

            ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>