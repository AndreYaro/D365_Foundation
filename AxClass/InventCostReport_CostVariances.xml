<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostReport_CostVariances</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostReport_CostVariances</c> class is used when the <c>InventCostVariances</c> report
///    is generated.
/// </summary>
/// <remarks>
///    This class is abstract and contains common functionality for all of the flavors of the
///    <c>InventCostVariances</c> reports.This class is only relevant when generating the
///    <c>InventCostVariances</c> report.
/// </remarks>
class InventCostReport_CostVariances  extends InventCostReport_CostBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateTempTable</Name>
				<Source><![CDATA[
/// <summary>
    ///    Creates <c>InventCostTmpTransBreakdown</c> temporary records.
    /// </summary>
    /// <returns>
    ///    A temporary table buffer with collected data.
    /// </returns>
    protected InventCostTmpTransBreakdown generateTempTable()
    {
        InventCostTmpTransBreakdown inventCostTmpTransBreakdown;

        InventCostTransView         inventCostTransView;
        RecId                       oldInventCostTransRecId = 0;
        InventCostVarianceType      oldVarianceType = 0;
        CostGroupType               oldCostGroupType = 0;
        CostGroupId                 oldCostGroupId = '';
        InventCostAmountHandler     amounts = InventCostAmountHandler::construct();
        InventCostTmpTransBreakdown totalInventCostTmpTransBreakdown;
        InventCostTmpTransBreakdown transInventCostTmpTransBreakdown;
        AmountMST                   varianceAmount;
        Qty                         qty;

        if (this.parmUserConnection())
        {
            inventCostTmpTransBreakdown.setConnection(this.parmUserConnection());
        }

        Query myQuery = InventCostReport_CostBase::buildQuery(fromDate, toDate);

        QueryBuildDataSource qbdsInventCostTransView = myQuery.dataSourceTable(inventCostTransView.TableId);
        QueryBuildDataSource qbdsInventCostTransVariance = qbdsInventCostTransView.addDataSource(tableNum(InventCostTransVariance));
        qbdsInventCostTransVariance.addLink(fieldNum(InventCostTransView, InventCostTransRecId), fieldNum(InventCostTransVariance, InventCostTransRefRecId));
        qbdsInventCostTransVariance.addSortField(fieldNum(InventCostTransVariance, InventCostTransRefRecId));
        qbdsInventCostTransVariance.addSortField(fieldNum(InventCostTransVariance, VarianceType));
        QueryBuildDataSource qbdsBOMCostGroup = qbdsInventCostTransVariance.addDataSource(tableNum(BOMCostGroup));
        qbdsBOMCostGroup.addLink(fieldNum(InventCostTransVariance, CostGroupId), fieldNum(BOMCostGroup, CostGroupId));
        qbdsBOMCostGroup.joinMode(JoinMode::OuterJoin);

        InventCostReport_CostBase::addRangesFromDialog(myQuery, query);
        InventCostReport_CostBase::addLevelAndSplitRange(qbdsInventCostTransVariance,
                                                         level,
                                                         detail,
                                                         fieldNum(InventCostTransVariance, Level),
                                                         fieldNum(InventCostTransVariance, Split));

        QueryRun queryRun = new QueryRun(myQuery);
        queryRun.query().recordLevelSecurity(true);
        boolean addAmountForSplitVariance = (detail == InventCostDetail::Decomposition || level == InventCostLevel::Single);
        while (queryRun.next())
        {
            InventTable inventTable = queryRun.get(tableNum(InventTable));
            inventCostTransView = queryRun.get(tableNum(InventCostTransView));
            InventCostTransVariance inventCostTransVariance = queryRun.get(tableNum(InventCostTransVariance));
            BOMCostGroup bomCostGroup = queryRun.get(tableNum(BOMCostGroup));

            // For each new InventCostTrans reset totals
            if ((axis == InventCostAxis::Item && inventCostTransView.InventCostTransRecId != oldInventCostTransRecId) ||
                (axis == InventCostAxis::Origin && (inventCostTransView.InventCostTransRecId != oldInventCostTransRecId || inventCostTransVariance.VarianceType != oldVarianceType)) ||
                (axis == InventCostAxis::CostGroup && (inventCostTransView.InventCostTransRecId != oldInventCostTransRecId || inventCostTransVariance.CostGroupId != oldCostGroupId || bomCostGroup.CostGroupType != oldCostGroupType)))
            {
                // Prepare for new InventCostTrans
                amounts.clear();
                oldInventCostTransRecId = inventCostTransView.InventCostTransRecId;
                oldVarianceType         = inventCostTransVariance.VarianceType;
                oldCostGroupId          = inventCostTransVariance.CostGroupId;
                oldCostGroupType        = bomCostGroup.CostGroupType;
                varianceAmount          = inventCostTransView.varianceAmount();

                totalInventCostTmpTransBreakdown.clear();
                totalInventCostTmpTransBreakdown.initFromInventTable(inventTable);
                totalInventCostTmpTransBreakdown.initFromInventCostTransView(inventCostTransView);
                totalInventCostTmpTransBreakdown.initFromInventCostTransVariance(inventCostTransVariance);
                totalInventCostTmpTransBreakdown.initFromBOMCostGroup(bomCostGroup);
                qty = totalInventCostTmpTransBreakdown.Qty;
            }

            // Clear amounts from previous row before adding new amounts
            transInventCostTmpTransBreakdown.data(totalInventCostTmpTransBreakdown);
            transInventCostTmpTransBreakdown.Qty                     = 0;
            transInventCostTmpTransBreakdown.VarianceAmount          = 0;
            transInventCostTmpTransBreakdown.VariableAmount          = 0;
            transInventCostTmpTransBreakdown.FixedAmount             = 0;
            transInventCostTmpTransBreakdown.UndefinedAmount         = 0;
            transInventCostTmpTransBreakdown.MaterialsAmount         = 0;
            transInventCostTmpTransBreakdown.ManufacturingAmount     = 0;
            transInventCostTmpTransBreakdown.IndirectAmount          = 0;
            transInventCostTmpTransBreakdown.initFromInventCostTransVariance(inventCostTransVariance);
            transInventCostTmpTransBreakdown.initFromBOMCostGroup(bomCostGroup);

            if (detail == InventCostDetail::No ||
                level == InventCostLevel::Total ||
                inventCostTransVariance.Split == NoYes::No || 
                addAmountForSplitVariance)
            {
                InventCostReport_CostBase::addAmountBasedOnCostGroup(inventCostTransVariance.CostAmount, amounts, bomCostGroup);
                InventCostReport_CostBase::assignAmountToTemp(inventCostTransVariance.CostAmount, bomCostGroup, transInventCostTmpTransBreakdown);

                // Split position amounts according to the ratio between the total variance amount and the variance amount
                // on inventcosttransvariance
                if (varianceAmount != 0)
                {
                    real distributionFactor = inventCostTransVariance.CostAmount / varianceAmount;
                    transInventCostTmpTransBreakdown.OnHandAmount    = totalInventCostTmpTransBreakdown.OnHandAmount * distributionFactor;
                    transInventCostTmpTransBreakdown.wipAmount       = totalInventCostTmpTransBreakdown.wipAmount * distributionFactor;
                    transInventCostTmpTransBreakdown.DeferredAmount  = totalInventCostTmpTransBreakdown.DeferredAmount * distributionFactor;
                    transInventCostTmpTransBreakdown.cogsAmount      = totalInventCostTmpTransBreakdown.cogsAmount * distributionFactor;

                    amounts.addAmount(transInventCostTmpTransBreakdown.OnHandAmount, InventCostAmountType::OnHand);
                    amounts.addAmount(transInventCostTmpTransBreakdown.wipAmount, InventCostAmountType::WIP);
                    amounts.addAmount(transInventCostTmpTransBreakdown.DeferredAmount, InventCostAmountType::Deferred);
                    amounts.addAmount(transInventCostTmpTransBreakdown.cogsAmount, InventCostAmountType::COGS);
                }
            }

            transInventCostTmpTransBreakdown.Qty = qty;
            qty = 0;
            InventCostReport_CostBase::writeTmpTransBreakdownTrans(transInventCostTmpTransBreakdown, inventCostTmpTransBreakdown);
        }

        return inventCostTmpTransBreakdown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an <c>InventCostVariances</c> report that is an <c>Item</c>, <c>Origin</c>, or
    ///    <c>CostGroup</c> report.
    /// </summary>
    /// <returns>
    ///    A temporary table buffer with collected data.
    /// </returns>
    /// <remarks>
    ///    This method is collects data from the <c>InventCostTrans</c> and <c>InventCostTransVariance</c>
    ///    tables and stores it in a temporary table by using a list.
    /// </remarks>
    public InventCostTmpTransBreakdown run()
    {
        return this.generateTempTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventCostReport_CostVariances construct()
    {
        return new InventCostReport_CostVariances();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>