<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReportArchiveHelper_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReportArchiveHelper_RU</c> helper class for report archive.
/// </summary>
class ReportArchiveHelper_RU
{
    SRSReportFileFormat fileFormat;
    Filename fileName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFileArchive</Name>
				<Source><![CDATA[
    private RecId createFileArchive()
    {
        ReportArchive_RU  reportArchive;

        reportArchive.FileFormat = fileFormat;
        reportArchive.FileName = fileName;
        reportArchive.Insert();

        return reportArchive.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>ReportArchiveHelper_RU</c> object.
    /// </summary>
    /// <param name = "_fileFormat">The <c>SRSReportFileFormat</c> value. Optional - defaults to Excel.</param>
    /// <returns> The <c>ReportArchiveHelper_RU</c> object.</returns>
    public static ReportArchiveHelper_RU initFromFileFormat(SRSReportFileFormat _fileFormat = SRSReportFileFormat::Excel)
    {
        ReportArchiveHelper_RU fileArchiveContract = new ReportArchiveHelper_RU();
        fileArchiveContract.parmFileFormat(_fileFormat);

        return fileArchiveContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileFormat</Name>
				<Source><![CDATA[
    public SRSReportFileFormat parmFileFormat(SRSReportFileFormat _fileFormat)
    {
        fileFormat = _fileFormat;
        return fileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    public Filename parmFileName(Filename _fileName = fileName)
    {
        fileName = _fileName;
        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveReportArchiveDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enters details of an report archive in the <c>DocuRef</c> and saves the document in <c>DocuValue</c> table.
    /// </summary>
    /// <param name="_binData">The binary representation of the report.</param>
    /// <returns>The inserted report archive RecID</returns>
    public RecId saveReportArchiveDetails(container _binData = [null])
    {
        DocuRef                 docuRef;
        PrintJobHeader          printJobHeader;
        ReportArchive_RU        reportArchive;
        RecId                   reportArchiveRecId;
        RecId                   docuRefId;

        Filename fName = this.parmFileName();
        str reportName = System.IO.Path::GetFileNameWithoutExtension(fName);

        try
        {
            // Do nothing if there's not anything to archive.
            if(conPeek(_binData,1) == null)
            {
                throw Exception::Error;
            }

            Binary binaryData = Binary::constructFromContainer(_binData);
            System.IO.MemoryStream memStream = binaryData.getMemoryStream();

            // Create the header record
            reportArchiveRecId = this.createFileArchive();

            str fileContentType = System.Web.MimeMapping::GetMimeMapping(fName);
            str attachmentName = reportName;

            // Archive the report
            docuRef = DocumentManagement::attachFile(
                tableNum(ReportArchive_RU),
                reportArchiveRecId,
                curExt(),
                DocuType::typeFile(),
                memStream,
                fName,
                fileContentType,
                attachmentName);
        }
        catch
        {
            ttsbegin;

            // Delete doc from storage if necessary
            if (docuRef && docuRef.RecId)
            {
                docuRefId = docuRef.RecId;

                // Delete the docuRef record
                delete_from docuRef where docuRef.RecId == docuRefId;
            }

            // Delete the print job header record
            if (reportArchiveRecId)
            {
                delete_from reportArchive where reportArchive.RecId == reportArchiveRecId;
            }

            ttscommit;

            // Unable to archive report %1.
            throw error(strFmt("@BI:UnableToArchiveReport", reportName));
        }

        return reportArchiveRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns file to user.
    /// </summary>
    /// <param name = "_record">Reference record.</param>
    public static void viewFile(Common _record)
    {
        DocuRef docuRef = DocumentManagement::findAttachments(_record.TableId, _record.RecId, curExt());

        if (docuRef && docuRef.RecId)
        {
            str docUrl = DocumentManagement::getAttachmentPublicUrl(docuRef);
            
            if (docUrl)
            {
                Browser br = new Browser();
                br.navigate(docUrl);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>