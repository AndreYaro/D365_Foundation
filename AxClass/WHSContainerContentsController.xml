<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSContainerContentsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSContainerContentsController</c> class is used to run print management for <c>WHSContainerContents</c> report.
/// </summary>
class WHSContainerContentsController extends SrsPrintMgmtController implements BatchRetryable
{
    private static const str CurUserIdParameterName = 'CurrentUserId';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the report query ranges based on caller.
    /// </summary>
    protected void prePromptModifyContract()
    {
        this.setShowDialogFromArgs();
        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
        
        SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();
        if (rdlContract.parameterExists(WHSContainerContentsController::CurUserIdParameterName))
        {
            rdlContract.getParameter(WHSContainerContentsController::CurUserIdParameterName).setValueTyped(curUserId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    protected void runPrintMgmt()
    {
        this.loadPrintManagement();

        if (printMgmtReportRun.more())
        {
            this.outputReports();
        }
        else
        {
            warning("@SYS78951");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPrintManagement</Name>
				<Source><![CDATA[
    protected void loadPrintManagement()
    {
        if (this.parmArgs() && this.parmShowDialog(this.parmArgs().parmEnum()))
        {
            printMgmtReportRun.parmDefaultOriginalPrintJobSettings(this.parmReportContract().parmPrintSettings());
        }

        if (this.parmArgs().record())
        {
            printMgmtReportRun.load(this.parmArgs().record(), this.parmArgs().record(), Global::currentUserLanguage());
        }
        else
        {
            printMgmtReportRun.loadSettingDetail(this.getSettingDetail(),  Global::currentUserLanguage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets container ids as range.
    /// </summary>
    /// <param name="_query">
    /// The report query.
    /// </param>
    public void setRanges(Query _query)
    {
        if (this.parmArgs()
        &&  this.parmArgs().dataset() == tableNum(WHSContainerTable)
        &&  _query)
        {
            WHSContainerTable   containerTable;
            str                 range;
            FormDataSource      containerTableDS = FormDataUtil::getFormDataSource(this.parmArgs().record());
            if (containerTableDS)
            {
                // build range
                for (containerTable = containerTableDS.getFirst(true) ? containerTableDS.getFirst(true) : containerTableDS.cursor();
                containerTable;
                containerTable = containerTableDS.getNext())
                {
                    range = range == '' ? containerTable.ContainerId : range + ',' + containerTable.ContainerId;

                    if (!WHSContainerContentsReportAddressValidDateTimeV3Flight::instance().isEnabled())
                    {
                        this.logisticsPostalAdddressMessage(containerTable);
                    }
                }
            }
            else
            {
                containerTable = this.parmArgs().record();
                range = queryValue(containerTable.ContainerId);

                if (!WHSContainerContentsReportAddressValidDateTimeV3Flight::instance().isEnabled())
                {
                    this.logisticsPostalAdddressMessage(containerTable);
                }
            }

            if (range)
            {
                QueryBuildDataSource queryBuildDataSource = _query.dataSourceTable(tableNum(WHSContainerTable));

                // check for QueryBuildDataSource
                if (queryBuildDataSource)
                {
                    // find the range, if it's not found add it
                    QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WHSContainerTable, ContainerId));
                    queryBuildRange.value(range);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsPostalAdddressMessage</Name>
				<Source><![CDATA[
    private void logisticsPostalAdddressMessage(WHSContainerTable _containerTable)
    {
        LogisticsPostalAddress postalAddress;

        WHSShipmentTable        shipmentTable        = WHSShipmentTable::find(_containerTable.ShipmentId);
        InventSite              inventSite           = InventSite::find(shipmentTable.InventSiteId);
        LogisticsPostalAddress  postalAddressCurrent = inventSite.logisticsPostalAddress();
        LogisticsLocationEntity location             = LogisticsLocationEntity::findLocation(inventSite, LogisticsLocationRoleType::None, _containerTable.CreatedDateTime);

        if (location)
        {
            postalAddress = location.getPostalAddress();
        }
        
        if (postalAddress.RecId && postalAddress.RecId != postalAddressCurrent.RecId)
        {
            warning(strFmt("@WAX:WHSContainerContentsSiteAddressWasChanged", _containerTable.ContainerId));
        }
        
        if (!postalAddressCurrent.RecId)
        {
            error(strFmt("@WAX:WHSContainerContentsSiteAddressNotExists"));
        }

        if (!shipmentTable.DeliveryPostalAddress)
        {
            error(strFmt("@WAX:WHSContainerContentsShipmentAddressNotExists"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShowDialogFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dialog will be shown if it is set to true in args.
    /// </summary>
    public void setShowDialogFromArgs()
    {
        if (this.parmArgs())
        {
            this.parmShowDialog(this.parmArgs().parmEnum());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WHSContainerContentsController  controller = new WHSContainerContentsController();

        controller.parmReportName(ssrsReportStr(WHSContainerContents, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a <c>PrintMgmtPrintSettingDetail</c> object with default settings that will be used by print management.
    /// </summary>
    /// <returns>
    /// An initialized object of type <c>PrintMgmtPrintSettingDetail</c>.
    /// </returns>
    protected PrintMgmtPrintSettingDetail getSettingDetail()
    {
        PrintMgmtDocInstanceType    type                  = PrintMgmtDocInstanceType::Original;
        PrintMgmtPrintSettingDetail printSettingDetail    = new PrintMgmtPrintSettingDetail();
        PrintMgmtReportFormat       printMgmtReportFormat = PrintMgmtReportFormat::findSystem(printMgmtReportRun.parmDocType());

        printSettingDetail.parmReportFormatName(printMgmtReportFormat.Name);
        printSettingDetail.parmSSRS(printMgmtReportFormat.SSRS);
        printSettingDetail.parmType(type);
        printSettingDetail.parmInstanceName(enum2str(type));
        printSettingDetail.parmNumberOfCopies(1);
        printSettingDetail.parmPrintJobSettings(printMgmtReportRun.parmDefaultOriginalPrintJobSettings());

        return printSettingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrintMgmtReportRun</Name>
				<Source><![CDATA[
    protected void initPrintMgmtReportRun()
    {
        printMgmtReportRun = PrintMgmtReportRun::construct(PrintMgmtHierarchyType::WHS, PrintMgmtNodeType::WHS, PrintMgmtDocumentType::WHSContainerContents);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if missing primary address on Site is causing an empty query prior to running the report.
    /// </summary>
    /// <returns>
    /// A container containing two items. The first item is the <c>SrsReportPreRunState</c>
    /// enumeration. The second item is the message to show to the user.
    /// </returns>
    protected container preRunValidate()
    {
        Query       validateQuery = this.getFirstQuery();
        container   validateResult = super();
        
        if (WHSContainerContentsReportAddressValidDateTimeV3Flight::instance().isEnabled())
        {
            validateQuery.validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());
            
            QueryBuildDataSource qbds = validateQuery.dataSourceName(queryDatasourceStr(WHSContainerContents, LogisticsAddressSite));
            
            qbds.addRange(fieldNum(LogisticsPostalAddress, ValidFrom))
                .value(strFmt('((%4.%5 && (%1.%2 <= %4.%5) && (%1.%3 >= %4.%5)) || ((%4.%5 = %7) && (%1.%2 <= %6) && (%1.%3 >= %6)))',
                    qbds.name(),
                    fieldStr(LogisticsPostalAddress, ValidFrom),
                    fieldStr(LogisticsPostalAddress, ValidTo),
                    queryDatasourceStr(WHSContainerContents, WHSContainerTable),
                    fieldStr(WHSContainerTable, CloseContainerUTCDateTime),
                    DateTimeUtil::toStr(DateTimeUtil::utcNow()),
                    SysQueryRangeUtil::value(DateTimeUtil::minValue())));
        
            if (validateQuery.dataSourceTable(tableNum(InventSiteLogisticsLocation)) && conPeek(validateResult,1) != SrsReportPreRunState::Error && QueryRun::getQueryRowCount(validateQuery, 1) == 0)
            {
                validateQuery.dataSourceTable(tableNum(InventSiteLogisticsLocation)).enabled(false);
            
                if (QueryRun::getQueryRowCount(validateQuery, 1) > 0)
                {
                    validateResult = [SrsReportPreRunState::Error, "@WAX:WHSContainerContentsReportMissingPrimaryAddress"];
                }

                validateQuery.dataSourceTable(tableNum(InventSiteLogisticsLocation)).enabled(true);
            }
        }
        
        return validateResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>