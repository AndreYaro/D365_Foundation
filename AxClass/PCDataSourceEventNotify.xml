<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcDataSourceEventNotify</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PCDataSourceEventNotify</c> class works as an proxy handler for event handling of a dynamic
///    data source.
/// </summary>
class PcDataSourceEventNotify extends FormObjectSetNotify
{
    Map             callerMethodMap;
    Object          caller;
    SysDictClass    dictClass;
    boolean         isClass;
    boolean         isForm;
    boolean         isTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasObjectMethod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether the object contains a method by the specified name.
    /// </summary>
    /// <param name = "_methodName">The name of the method.</param>
    /// <returns>true if the method exists in the caller object; otherwise, false.</returns>
    private boolean hasObjectMethod(IdentifierName _methodName)
    {
        if (!callerMethodMap.exists(_methodName))
        {
            boolean hasMethod = ((isClass && dictClass.hasObjectMethod(_methodName))
                || (isForm  && SysFormRun::hasMethod(caller, _methodName))
                || (isTable && SysDictTable::hasMethod(caller, _methodName)));

            callerMethodMap.insert(_methodName, hasMethod);
        }

        return callerMethodMap.lookup(_methodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes when the active record changes on the attached data source.
    /// </summary>
    /// <param name="_sender">
    ///    The attached data source.
    /// </param>
    /// <remarks>
    ///    To add a handler to this method, implement a method on the listener class by using the following
    ///    declaration: <c>public void onActive(FormObjectSet _sender)</c>.
    /// </remarks>
    protected void onActive(FormObjectSet _sender)
    {
        super(_sender);

        if (this.hasObjectMethod(identifierstr(OnActive)))
        {
            caller.onActive(_sender);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCacheChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes when the cache changes on the attached data source.
    /// </summary>
    /// <param name="_sender">
    ///    The attached data source.
    /// </param>
    /// <param name="_cacheChangeType">
    ///    The type of change that occurred in the cache of the data source.
    /// </param>
    /// <remarks>
    ///    To add a handler to this method, implement a method on the listener class by using the following
    ///    declaration: <c>public void onCacheChanged(FormObjectSet _sender, NotifyCacheChangeType
    ///    _cacheChangeType)</c>.
    /// </remarks>
    protected void onCacheChanged(FormObjectSet _sender, NotifyCacheChangeType _cacheChangeType)
    {
        super(_sender, _cacheChangeType);

        if (this.hasObjectMethod(identifierstr(onCacheChanged)))
        {
            caller.onCacheChanged(_sender, _cacheChangeType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCurrentChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes when the current marked record changes on the attached data source.
    /// </summary>
    /// <param name="_sender">
    ///    The attached data source.
    /// </param>
    /// <param name="_position">
    ///    The position of the currently marked record on the data source.
    /// </param>
    /// <remarks>
    ///    To add a handler to this method, implement a method on the listener class by using the following
    ///    declaration: <c>public void onCurrentChanged(FormObjectSet _sender, int _position)</c>.
    /// </remarks>
    protected void onCurrentChanged(FormObjectSet _sender, int _position)
    {
        super(_sender, _position);

        if (this.hasObjectMethod(identifierstr(onCurrentChanged)))
        {
            caller.onCurrentChanged(_sender, _position);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onLeave</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes when the active record of the attached data source loses focus on any of the visible
    ///    fields.
    /// </summary>
    /// <param name="_sender">
    ///    The attached data source.
    /// </param>
    /// <returns>
    ///    true if validation and update succeeded; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    To add a handler to this method, implement a method on the listener class by using the following
    ///    declaration: <c>public void onLeave(Boolean _ret, FormObjectSet _sender)</c>.
    /// </remarks>
    protected boolean onLeave(FormObjectSet _sender)
    {
        boolean ret;

        ret = super(_sender);

        if (this.hasObjectMethod(identifierstr(onLeave)))
        {
            caller.onLeave(ret, _sender);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPagingParametersChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes when the active record of the paging parameters changes in the attached data source.
    /// </summary>
    /// <param name="_sender">
    ///    The attached data source.
    /// </param>
    /// <param name="_pagingEnabled">
    ///    A Boolean value that indicates whether the paging is enabled for the data source.
    /// </param>
    /// <param name="_startRowIndex">
    ///    An integer value that indicates the position of the starting row of the cache.
    /// </param>
    /// <param name="_pageSize">
    ///    An integer value that indicates the size, in number of rows, of the cache.
    /// </param>
    /// <remarks>
    ///    To add a handler to this method, implement a method on the listener class by using the following
    ///    declaration: <c>public void onPagingParametersChanged(FormObjectSet _sender, boolean
    ///    _pagingEnabled, int _startRowIndex, int _pageSize)</c>.
    /// </remarks>
    protected void onPagingParametersChanged(FormObjectSet _sender, boolean _pagingEnabled, int _startRowIndex, int _pageSize)
    {
        super(_sender, _pagingEnabled, _startRowIndex, _pageSize);

        if (this.hasObjectMethod(identifierstr(onPagingParametersChanged)))
        {
            caller.onPagingParametersChanged(_sender, _pagingEnabled, _startRowIndex, _pageSize);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes when the attached data source is refreshed.
    /// </summary>
    /// <param name="_sender">
    ///    The attached data source.
    /// </param>
    /// <remarks>
    ///    To add a handler to this method, implement a method on the listener class by using the following
    ///    declaration: <c>public void onRefresh(FormObjectSet _sender)</c>.
    /// </remarks>
    protected void onRefresh(FormObjectSet _sender)
    {
        super(_sender);

        if (this.hasObjectMethod(identifierstr(onRefresh)))
        {
            caller.onRefresh(_sender);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRequestCacheSize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes when the current cache size information is requested from the attached data source.
    /// </summary>
    /// <param name="_sender">
    ///    The attached data source.
    /// </param>
    /// <returns>
    ///    The current cache size of the attached data source.
    /// </returns>
    /// <remarks>
    ///    To add a handler to this method, implement a method on the listener class by using the following
    ///    declaration: <c>public void onRequestCacheSize(int _ret, FormObjectSet _sender)</c>.
    /// </remarks>
    protected int onRequestCacheSize(FormObjectSet _sender)
    {
        int ret;

        ret = super(_sender);

        if (this.hasObjectMethod(identifierstr(onRequestCacheSize)))
        {
            caller.onRequestCacheSize(ret, _sender);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRuntimeMetadataChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes when the metadata properties are dynamically changed in the attached data source.
    /// </summary>
    /// <param name="_sender">
    ///    The attached data source.
    /// </param>
    /// <param name="_changedDatasourceName">
    ///    The current name of the attached data source.
    /// </param>
    /// <param name="_referencedDatasourceName">
    ///    The current name of the referenced data source.
    /// </param>
    /// <param name="_changedFieldId">
    ///    The ID of the metadata field that changed the value.
    /// </param>
    /// <param name="_changeType">
    ///    The type of metadata changed that occurred.
    /// </param>
    /// <remarks>
    ///    To add a handler to this method, implement a method on the listener class by using the following
    ///    declaration:  public void onRuntimeMetadataChanged(FormObjectSet _sender, str
    ///    _changedDatasourceName, str _referencedDatasourceName, fieldId _changedFieldId,
    ///    DataSourceMetadataChangeType _changeType) .
    /// </remarks>
    protected void onRuntimeMetadataChanged(FormObjectSet _sender, str _changedDatasourceName, str _referencedDatasourceName, fieldId _changedFieldId, DataSourceMetadataChangeType _changeType)
    {
        super(_sender, _changedDatasourceName, _referencedDatasourceName, _changedFieldId, _changeType);

        if (this.hasObjectMethod(identifierstr(onRuntimeMetadataChanged)))
        {
            caller.onRuntimeMetadataChanged(_sender, _changedDatasourceName, _referencedDatasourceName, _changedFieldId, _changeType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaller</Name>
				<Source><![CDATA[
    public Object parmCaller(Object _caller = caller)
    {
        caller = _caller;
        dictClass       = new SysDictClass(classidget(caller));
        isTable         = (_caller is DictTable);
        isForm          = (_caller is FormRun);
        isClass         = !isForm && (dictClass.id() != 0);

        callerMethodMap = new Map(Types::String, Types::Enum);

        return caller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>PCDataSourceEventNotify</c> class that is connected to the specified
    ///    caller form.
    /// </summary>
    /// <param name="_callerForm">
    ///    The caller form that will receive the notifications from this instance.
    /// </param>
    /// <returns>
    ///    An object of the <c>PCDataSourceEventNotify</c> class.
    /// </returns>
    /// <remarks>
    ///    The caller form must contain the notification methods that he wishes to receive from the data
    ///    source.
    /// </remarks>
    public static PCDataSourceEventNotify construct(Object _callerForm)
    {
        PCDataSourceEventNotify eventHandlerNotify = new PCDataSourceEventNotify();
        eventHandlerNotify.parmCaller(_callerForm);

        return eventHandlerNotify;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>