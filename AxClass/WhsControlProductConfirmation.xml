<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControlProductConfirmation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>WhsControlProductConfirmation</c> class is responsible for handling the product confirmation controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#ProductConfirmation)]
public class WhsControlProductConfirmation extends WhsControl 
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        if (mode == WHSWorkExecuteMode::ClusterPutaway
            && WHSClusterPutawaySupportProductConfirmationPutSingleItemFlight::instance().isEnabled())
        {
            return this.processWithNoWorkLine();
        }

        if (this.dataEqualsWorkLineItemNumber())
        {
            InventDim workLineInventDim = InventDim::find(context.workLine.InventDimId);

            if (WHSWorkLine::isInventDimIdBlank(workLineInventDim.inventDimId)
                        || !workLineInventDim.anyProductDimensionSpecified())
            {
                fieldValues.insert(#ProductConfirmation, this.parmData());

                return true;
            }
        }
        else
        {
            return this.searchForItem(this.parmData());
        }

        return this.fail("@SYP4980009");
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWithNoWorkLine</Name>
				<Source><![CDATA[
    private boolean processWithNoWorkLine()
    {
        if (this.dataEqualsPassItemNumber())
        {
            InventDim passInventDim = pass.createInventDimFromPass();

            if (WHSWorkLine::isInventDimIdBlank(passInventDim.inventDimId)
                        || !passInventDim.anyProductDimensionSpecified())
            {
                fieldValues.insert(#ProductConfirmation, this.parmData());

                return true;
            }
        }
        else
        {
            return this.searchForItemNoWorkLine(this.parmData());
        }

        return this.fail("@SYP4980009");
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchForItemNoWorkLine</Name>
				<Source><![CDATA[
    private boolean searchForItemNoWorkLine(str _data)
    {
        InventInventItemSearchResult localInventItemSearchResult = controlData.createItemSearch(_data);
        ItemId passItemId = pass.parmItemId();

        if (localInventItemSearchResult
            && localInventItemSearchResult.parmItemId() == passItemId)
        {
            UnitOfMeasureSymbol pieceConfirmUOM = localInventItemSearchResult.parmUnitOfMeasureSymbol();
            Qty                 pieceConfirmQty = localInventItemSearchResult.parmQty();

            InventDim passInventDim = pass.createInventDimFromPass();
            InventDimId currentDimId = passInventDim.inventDimId;

            if (!localInventItemSearchResult.parmInventDimId()
                    && passInventDim.anyProductDimensionSpecified())
            {
                localInventItemSearchResult.parmInventDimId(currentDimId);
            }

            controlData.populateFieldsFromItemSearch(localInventItemSearchResult.parmInventDimId(),
                                                                                       currentDimId,
                                                                                       pieceConfirmUOM,
                                                                                       pieceConfirmQty,
                                                                                       this,
                                                                                       false,
                                                                                       _data);

            return !this.parmHasError();
        }

        return this.fail("@SYP4980009");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataEqualsPassItemNumber</Name>
				<Source><![CDATA[
    protected boolean dataEqualsPassItemNumber()
    {
        return pass.exists(#ItemId) && this.parmData() == pass.parmItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataEqualsWorkLineItemNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether to use the item number from the parmData value.
    /// </summary>
    /// <returns>
    ///     true if the item number from parmData should be used; otherwise, false.
    /// </returns>
    protected boolean dataEqualsWorkLineItemNumber()
    {
        return this.parmData() == context.workLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchForItem</Name>
				<Source><![CDATA[
    protected boolean searchForItem(str _data)
    {
        InventInventItemSearchResult localInventItemSearchResult = controlData.createItemSearch(_data);
        ItemId  passItemId = pass.lookupStr(#ItemId);
        WHSWorkLine workline = context.workLine;

        if (localInventItemSearchResult
            && (localInventItemSearchResult.parmItemId() == workline.ItemId
            ||  (workline.WorkType == WHSWorkType::Count
            &&   localInventItemSearchResult.parmItemId() == passItemId)))
        {
            UnitOfMeasureSymbol pieceConfirmUOM = localInventItemSearchResult.parmUnitOfMeasureSymbol();
            Qty                 pieceConfirmQty = localInventItemSearchResult.parmQty();
            boolean             updatePieceByPiece;
                        
            if (pieceConfirmUOM
                && pieceConfirmQty
                && WHSRFAutoConfirm::isPieceByPieceConfirmationEnabled(pass.lookupStr(#MenuItem), workline.WorkType)
                && !WHSWorkLine::isPutBefore(workline.WorkId, workline.LineNum)
                && !WHSWorkExecute::isPotentialOverPick(workline.whsWorkTable(), workLine)
                && !controlData.isCatchWeightItem(localInventItemSearchResult.parmItemId()))
            {
                updatePieceByPiece = true;
                
                controlData.validateUnitEnabledForCycleCount(workline.WorkType, passItemId, pieceConfirmUOM, this);

            }
                
            if (!this.parmHasError())
            {
                InventDimId currentDimId;

                if (workline.WorkType == WHSWorkType::Count)
                {
                    InventDim passInventDim = pass.createInventDimFromPass();
                    currentDimId = passInventDim.inventDimId;

                    if (!localInventItemSearchResult.parmInventDimId() 
                        && passInventDim.anyProductDimensionSpecified())
                    {
                        localInventItemSearchResult.parmInventDimId(currentDimId);
                    }                    
                }
                else
                {
                    currentDimId = workline.inventDimId;
                }

                controlData.populateFieldsFromItemSearch(localInventItemSearchResult.parmInventDimId(),
                                                                                       currentDimId,
                                                                                       pieceConfirmUOM,
                                                                                       pieceConfirmQty,
                                                                                       this,
                                                                                       updatePieceByPiece,
                                                                                       _data);
            }

            return !this.parmHasError();
        }

        return this.fail("@SYP4980009");
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a field in fieldValue map except if quantity isn't filled for ShortPick step.
    /// </summary>
    internal void populate()
    {
        if ((pass.parmQtyToPick() 
                || !pass.exists(#QtyToPick))
            || step != #ShortPick)
        {
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>