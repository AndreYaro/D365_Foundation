<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqForecastReduce_TransDynamic</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqForecastReduce_TransDynamic</c> class handles reduction of demand or supply forecast according to the principle 'Transactions - dynamic period'.
/// </summary>
class ReqForecastReduce_TransDynamic extends ReqForecastReduce
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcNewReqQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a new forecast quantity.
    /// </summary>
    /// <param name="_reqTrans">
    /// A <c>ReqTrans</c> record of type forecast.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    /// <param name="_reduceValue">
    /// A real value that contains a reduce value.
    /// </param>
    /// <returns>
    /// A real value that contains the reduced forecast quantity.
    /// </returns>
    protected ReqQty calcNewReqQty(
        ReqTrans    _reqTrans,
        ReqSetupDim _setupDim,
        real        _reduceValue)
    {
        return this.calcNewReqQtyFromQty(_reqTrans,_reduceValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodCreateSetKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the key element in the map that contains the reduction periods.
    /// </summary>
    /// <param name="_forecastType">
    /// An enumeration value of type <c>ForecastTableType</c> that determines if the forecast reduction is regarding a demand forecast or a supply forecast.
    /// </param>
    /// <param name="_reqTransCache">
    /// A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    /// <remarks>
    /// The key is set to each date a forecast occurs.
    /// </remarks>
    protected void mapPeriodCreateSetKey(
        ForecastTableType   _forecastType,
        ReqTransCache       _reqTransCache,
        ReqSetupDim         _setupDim)
    {
        ReqTrans                reqTrans;
        Query                   query = ReqForecastReduceQueryFactory::newStandard(_reqTransCache, _forecastType).getForecastTransactionsQuery(_setupDim);
        QueryRun                queryRun;

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            reqTrans = queryRun.get(tableNum(ReqTrans));
            if (_forecastType == ForecastTableType::Demand && reqTrans.RefType == ReqRefType::SalesForecast)
            {
                this.mapPeriodInsert(reqTrans.ReqDate, 0, reqTrans.CustGroupId, reqTrans.CustAccountId);
            }
            else
            {
                this.mapPeriodInsert(reqTrans.ReqDate,0);
            }
        }

        reducePeriodEnd = dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodCreateSetValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value element in the map that contains the reduction periods.
    /// </summary>
    /// <param name="_forecastType">
    ///    A <c>ForecastTableType</c> enumeration value that determines if the forecast reduction is regarding
    ///    a demand forecast or a supply forecast.
    /// </param>
    /// <param name="_reqTransCache">
    ///    A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    ///    A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory
    ///    dimensions.
    /// </param>
    protected void mapPeriodCreateSetValue(
        ForecastTableType   _forecastType,
        ReqTransCache       _reqTransCache,
        ReqSetupDim         _setupDim)
    {
        this.mapPeriodCreateSetValueExpectedQty(_forecastType,_reqTransCache,_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodUpdateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the map that contains the reduction periods.
    /// </summary>
    /// <param name="_reqDate">
    ///  A date that contains the start date of the reduction period.
    /// </param>
    /// <param name="_addValue">
    /// A real value that contains a value which is added to the reduction balance.
    /// </param>
    /// <param name="_customerGroupId">
    /// A Customer Group Identification
    /// </param>
    /// <param name="_customerAccountId">
    /// A Customer Account Identification
    /// </param>
    protected void mapPeriodUpdateBalance(
        TransDate   _reqDate,
        real        _addValue,
        CustGroupId _customerGroupId = '',
        CustAccount _customerAccountId = '')
    {
        this.mapPeriodUpdateValue(_reqDate,_addValue, _customerGroupId, _customerAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
        reductionType = ReqReduceType::OpenOrdersPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static ReqForecastReduce_TransDynamic construct()
    {
        return new ReqForecastReduce_TransDynamic();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>