<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQuarantineMultiEnd</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventQuarantineMultiEnd extends InventQuarantineMulti implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    FormName formName()
    {
        return formStr(InventQuarantineParmEnd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer _inventParmQuarantineOrder)
    {
        InventParmQuarantineOrder inventParmQuarantineOrder = _inventParmQuarantineOrder;
        super(inventParmQuarantineOrder);
        inventParmQuarantineOrder.Type      = InventQuarantineStatus::Ended;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        return new QueryRun(queryStr(InventQuarantineMultiSelectEnd)).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task.
    /// </summary>
    /// <returns>
    ///    true always, because this class has been validated to be able to use impersonation.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdate</Name>
				<Source><![CDATA[
    void runUpdate(InventParmQuarantineOrder      _inventParmQuarantineOrder)
    {
        InventQuarantineUpdEnd inventQuarantineUpdEnd = InventQuarantineUpdEnd::newParmBuffer(_inventParmQuarantineOrder);
        inventQuarantineUpdEnd.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        InventParmQuarantineOrder   inventParmQuarantineOrder;
        InventQuarantineOrder       inventQuarantineOrder;

        boolean ret = super(calledFrom);

        if (ret)
        {
            while select inventQuarantineOrder
                exists join inventParmQuarantineOrder
                where inventQuarantineOrder.QuarantineId    == inventParmQuarantineOrder.QuarantineId
                && inventParmQuarantineOrder.ParmId         == parmId
            {
                ret = inventQuarantineOrder.checkValidReturn() && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventQuarantineMultiEnd construct()
    {
        InventQuarantineMultiEnd inventQuarantineMultiEnd = new InventQuarantineMultiEnd();

        return inventQuarantineMultiEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS58429" + ' - ' + "@SYS15291";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.parmEnum() == RunChoose::Run)
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
            {
                InventQuarantineMultiEnd inventQuarantineMultiEnd = InventQuarantineMultiEnd::construct();
                RunBaseMultiParm::initFromForm(inventQuarantineMultiEnd, _args);

                if (! inventQuarantineMultiEnd.prompt())
                {
                    return;
                }

                inventQuarantineMultiEnd.runOnServer();

                if (_args && _args.caller())
                {
                    Object sysFormRun_doRe = _args.caller();
                    sysFormRun_doRe.doFormCache(inventQuarantineMultiEnd.packRecs());
                }
            }
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>