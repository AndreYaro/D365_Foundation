<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankModernReconciliationUpgradeWizardDataSourceInitializer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankModernReconciliationUpgradeWizardDataSourceInitializer</c> is to build the display information for the Bank Modern Reconciliation Wizard.
/// </summary>
internal final class BankModernReconciliationUpgradeWizardDataSourceInitializer
{
    private const str ListDisplayDelimiter = ', ';
    private FormRun wizardFormRun;
    private Set dataAreaSet;
    private BankModernReconciliationUpgradeWizardGridTmp bankStatementInfoCollectTmp;
    private BankModernReconciliationUpgradeWizardGridTmp matchingRuleInfoCollectTmp;

}

]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new (FormRun _wizardFormRun)
    {
        wizardFormRun = _wizardFormRun;
        dataAreaSet = wizardFormRun.getDataAreaSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BankModernReconciliationUpgradeWizardDataSourceInitializer construct(FormRun _wizardFormRun)
    {
        return new BankModernReconciliationUpgradeWizardDataSourceInitializer(_wizardFormRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankStatementInfoCollectTmp</Name>
				<Source><![CDATA[
    internal BankModernReconciliationUpgradeWizardGridTmp parmBankStatementInfoCollectTmp(BankModernReconciliationUpgradeWizardGridTmp _bankStatementInfoCollectTmp = bankStatementInfoCollectTmp)
    {
        bankStatementInfoCollectTmp = _bankStatementInfoCollectTmp;
        return bankStatementInfoCollectTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchingRuleInfoCollectTmp</Name>
				<Source><![CDATA[
    internal BankModernReconciliationUpgradeWizardGridTmp parmMatchingRuleInfoCollectTmp(BankModernReconciliationUpgradeWizardGridTmp _matchingRuleInfoCollectTmp = matchingRuleInfoCollectTmp)
    {
        matchingRuleInfoCollectTmp = _matchingRuleInfoCollectTmp;
        return matchingRuleInfoCollectTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the tmp data sources for the Bank Modern Reconciliation Wizard.
    /// </summary>
    internal void loadDataSources()
    {
        this.loadNotExecutedDataAreaToBeExecuted();
        this.loadUnpostedMarkAsNewTmpDataSource();
        this.loadUnmatchedPostedTmpDataSource();
        this.loadMatchingRuleTmpDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadNotExecutedDataAreaToBeExecuted</Name>
				<Source><![CDATA[
    private void loadNotExecutedDataAreaToBeExecuted()
    {
        BankParameters bankParameters;
        while select crosscompany DataAreaId from bankParameters
            where bankParameters.BankModernReconciliationUpgradeWizardExecutionStatus == BankModernReconciliationUpgradeWizardExecutionStatus::NotExecuted
        {
            dataAreaSet.add(bankParameters.DataAreaId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadUnpostedMarkAsNewTmpDataSource</Name>
				<Source><![CDATA[
    private void loadUnpostedMarkAsNewTmpDataSource()
    {
        Map bankAccountToStatementDisplayMap = new Map(Types::Record, Types::Class);
        BankAccountTable bankAccountTable;
        BankStmtISOAccountStatement statement;

        while select crosscompany Identification, DataAreaId, RecId from statement
            where statement.Status != BankStatementStatus::Reconciled
                && statement.Voucher == ''
            join AccountID, Name, RecId, DataAreaId from bankAccountTable
                where bankAccountTable.AccountID == statement.BankAccountTable
        {
            BankStmtISOReportEntry statementLine;
            select firstonly crosscompany RecId from statementLine
                where statementLine.BankStmtISOAccountStatement == statement.RecId
                    && statementLine.Reconciled == NoYes::No
                    && statementLine.IsNewBankDocument == NoYes::Yes
                    && statementLine.Voucher == '';
            if (statementLine.RecId)
            {
                if (bankAccountToStatementDisplayMap.exists(bankAccountTable))
                {
                    System.Text.StringBuilder statementListString = bankAccountToStatementDisplayMap.lookup(bankAccountTable);
                    if (!statementListString)
                    {
                        throw Error(Error::wrongUseOfFunction(funcName()));
                    }
                    statementListString.Append(ListDisplayDelimiter);
                    statementListString.Append(statement.Identification);
                }
                else
                {
                    System.Text.StringBuilder statementListString = new System.Text.StringBuilder();
                    statementListString.Append(statement.Identification);
                    bankAccountToStatementDisplayMap.insert(bankAccountTable, statementListString);
                    dataAreaSet.add(statement.DataAreaId);
                }
            }
        }

        MapEnumerator displayMapEnumerator = bankAccountToStatementDisplayMap.getEnumerator();
        while (displayMapEnumerator.moveNext())
        {
            BankAccountTable bankAccountTableLoc = displayMapEnumerator.currentKey();
            System.Text.StringBuilder statementListString = displayMapEnumerator.currentValue();
            this.insertWizardGridTmpRecord(
                bankStatementInfoCollectTmp,
                bankAccountTableLoc.RecId,
                bankAccountTableLoc.AccountID,
                bankAccountTableLoc.Name,
                bankAccountTableLoc.DataAreaId,
                "@Bank:MarkAsNewLineNotPosted",
                statementListString.ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadUnmatchedPostedTmpDataSource</Name>
				<Source><![CDATA[
    private void loadUnmatchedPostedTmpDataSource()
    {
        Map bankAccountToStatementDisplayMap = new Map(Types::Record, Types::Class);
        BankAccountTable bankAccountTable;
        BankStmtISOAccountStatement statement;
        while select crosscompany Identification, DataAreaId, RecId from statement
            join AccountID, Name, RecId, DataAreaId  from BankAccountTable
                where statement.BankAccountTable == BankAccountTable.AccountId
        {
            BankStmtISOReportEntry statementLine;
            BankReconciliationMatchingItem matchingItem;
            BankStmtISOAccountStatement statementOfLine;
            select firstonly crosscompany RecId from statementLine
                where statementLine.BankStmtISOAccountStatement == statement.RecId
                    && statementLine.Reconciled == NoYes::No
                    && statementLine.IsNewBankDocument == NoYes::Yes
                join RecId from statementOfLine
                    where statementOfLine.RecId == statementLine.BankStmtISOAccountStatement
                        && (statementLine.Voucher != '' || statement.Voucher != '')
                notexists join RecId from matchingItem
                    where matchingItem.BankStmtISOReportEntry == statementLine.RecId;

            if (statementLine.RecId)
            {
                if (bankAccountToStatementDisplayMap.exists(bankAccountTable))
                {
                    System.Text.StringBuilder statementListString = bankAccountToStatementDisplayMap.lookup(bankAccountTable);
                    if (!statementListString)
                    {
                        throw Error(Error::wrongUseOfFunction(funcName()));
                    }
                    statementListString.Append(ListDisplayDelimiter);
                    statementListString.Append(statement.Identification);
                }
                else
                {
                    System.Text.StringBuilder statementListString = new System.Text.StringBuilder();
                    statementListString.Append(statement.Identification);
                    bankAccountToStatementDisplayMap.insert(bankAccountTable, statementListString);
                    dataAreaSet.add(statement.DataAreaId);
                }
            }
        }

        MapEnumerator displayMapEnumerator = bankAccountToStatementDisplayMap.getEnumerator();
        while (displayMapEnumerator.moveNext())
        {
            BankAccountTable bankAccountTableLoc = displayMapEnumerator.currentKey();
            System.Text.StringBuilder statementListString = displayMapEnumerator.currentValue();
            this.insertWizardGridTmpRecord(
                bankStatementInfoCollectTmp,
                bankAccountTableLoc.RecId,
                bankAccountTableLoc.AccountID,
                bankAccountTableLoc.Name,
                bankAccountTableLoc.DataAreaId,
                "@Bank:PostedLineNotMatched",
                statementListString.ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadMatchingRuleTmpDataSource</Name>
				<Source><![CDATA[
    private void loadMatchingRuleTmpDataSource()
    {
        BankReconciliationMatchRule matchingRule;
        BankReconciliationMatchRuleSet matchingRuleSet;
        BankReconciliationMatchRuleSetLine matchingRuleSetLine;
        Map ruleToRuleSetDisplayMap = new Map(Types::Record, Types::Class);

        while select RuleId, Name, MatchActionType, RecId from matchingRule
            where matchingRule.MatchActionType == BankReconciliationMatchActionType::Adjustment
            outer join RecId from matchingRuleSetLine
                where matchingRuleSetLine.BankReconciliationMatchRule == matchingRule.RecId
            outer join SetId from matchingRuleSet
                where matchingRuleSet.RecId == matchingRuleSetLine.BankReconciliationMatchRuleSet
        {
            if (ruleToRuleSetDisplayMap.exists(matchingRule))
            {
                System.Text.StringBuilder ruleListString = ruleToRuleSetDisplayMap.lookup(matchingRule);
                if (!ruleListString)
                {
                    throw Error(Error::wrongUseOfFunction(funcName()));
                }
                ruleListString.Append(ListDisplayDelimiter);
                ruleListString.Append(matchingRuleSet.SetId);
            }
            else
            {
                System.Text.StringBuilder ruleListString = new System.Text.StringBuilder();
                ruleListString.Append(matchingRuleSet.SetId);
                ruleToRuleSetDisplayMap.insert(matchingRule, ruleListString);
            }
        }

        MapEnumerator displayMapEnumerator = ruleToRuleSetDisplayMap.getEnumerator();
        while (displayMapEnumerator.moveNext())
        {
            BankReconciliationMatchRule matchingRuleLoc = displayMapEnumerator.currentKey();
            System.Text.StringBuilder ruleListString = displayMapEnumerator.currentValue();
            this.insertWizardGridTmpRecord(
                matchingRuleInfoCollectTmp,
                matchingRuleLoc.RecId,
                matchingRuleLoc.RuleId,
                matchingRuleLoc.Name,
                '',
                enum2str(matchingRuleLoc.MatchActionType),
                ruleListString.ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDataSourcesForUpgradeMatchedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the tmp data sources for the Bank Modern Reconciliation Wizard for collecting the influenced data areas for the upgrade.
    /// </summary>
    /// <param name = "_upgradeAfterDate">The date after which the upgrade is performed.</param>
    internal void loadDataSourcesForUpgradeMatchedTransactions(date _upgradeAfterDate)
    {
        BankReconciliationHeader reconciliationHeader;
        BankReconciliationMatching matching;

        while select crosscompany DataAreaId from reconciliationHeader
            group by reconciliationHeader.DataAreaId
            where reconciliationHeader.CutOffDate >= _upgradeAfterDate
                exists join RecId from matching
                    where matching.BankReconciliationHeader == reconciliationHeader.RecId
                        && matching.MatchingId == 0
        {
            dataAreaSet.add(reconciliationHeader.DataAreaId);
        }

        BankReconciliationMatchingItem documentMatchingItem;
        BankReconciliationMatchingItem statementMatchingItem;

        while select crosscompany DataAreaId from matching
            group by matching.DataAreaId
            join RecId from reconciliationHeader
                where reconciliationHeader.RecId == matching.BankReconciliationHeader
                    && reconciliationHeader.CutOffDate >= _upgradeAfterDate
            exists join RecId from statementMatchingItem
                where statementMatchingItem.BankReconciliationMatching == matching.RecId
                    && statementMatchingItem.BankStmtISOReportEntry != 0
                    && statementMatchingItem.BankDocumentTable == 0
            notexists join documentMatchingItem
                where documentMatchingItem.BankReconciliationMatching == matching.RecId
                    && documentMatchingItem.BankStmtISOReportEntry == 0
                    && documentMatchingItem.BankDocumentTable != 0
        {
            dataAreaSet.add(matching.DataAreaId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWizardGridTmpRecord</Name>
				<Source><![CDATA[
    private void insertWizardGridTmpRecord(
        BankModernReconciliationUpgradeWizardGridTmp _wizardGridTmp,
        RefRecId _refRecId,
        FreeText _refRecord,
        Name _refName,
        DataAreaId _refLegalEntity,
        FreeText _refDescription,
        FreeText1000 _refInfluencedRecordList)
    {
        _wizardGridTmp.clear();
        _wizardGridTmp.RefRecId = _refRecId;
        _wizardGridTmp.RefRecord = _refRecord;
        _wizardGridTmp.RefName = _refName;
        _wizardGridTmp.RefLegalEntity = _refLegalEntity;
        _wizardGridTmp.RefDescription = _refDescription;
        _wizardGridTmp.RefInfluencedRecordList = _refInfluencedRecordList;
        _wizardGridTmp.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>