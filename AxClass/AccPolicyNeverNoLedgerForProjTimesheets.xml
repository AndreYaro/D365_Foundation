<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccPolicyNeverNoLedgerForProjTimesheets</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// An accounting policy comprises rules that control project timesheets attributes if they
/// can be distributed or journalized.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProjectTimesheets), BusinessEvent_ProjectTimesheets::ProjectTimesheetPosting)
]
public class AccPolicyNeverNoLedgerForProjTimesheets extends AccountingPolicy
{
    TSTimesheetTrans    tsTimesheetTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>statusRequiresAccounting</Name>
				<Source><![CDATA[
	protected boolean statusRequiresAccounting(TSAppStatus _ApprovalStatus)
    {
        return tsTimesheetTrans.ApprovalStatus == TSAppStatus::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIsAccountingRequired</Name>
				<Source><![CDATA[
    protected boolean determineIsAccountingRequired()
    {
        TSTimesheetLine tsTimesheetLine;
        ProjTable projTable;

        if (!this.statusRequiresAccounting(tsTimesheetTrans.ApprovalStatus))
        {
            return false;
        }

        tsTimesheetLine = tsTimesheetTrans.timesheetLine();

        if (tsTimesheetLine.ProjectDataAreaId != tsTimesheetLine.dataAreaId)
        {
            // Intercompany scenario is always accounted for because the cost is incurred
            // in the legal entity that employs the resouce.
            return true;
        }

        select firstonly projTable
            where projTable.ProjId == tsTimesheetLine.ProjId &&
            projTable.DataAreaId == tsTimesheetLine.ProjectDataAreaId;

        ProjLedgerStatus emplLedgerStatus;
        
        if (projtable)
        {  
            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()
                && !projTable.ProjInvoiceProjId)
            {
                emplLedgerStatus =  ProjLedgerStatus::Operations;
            }
            else
            {
                emplLedgerStatus =  ProjRevRecHelper::getEmplLedgerStatus(projTable);
            }
        }

        return this.validateEmplLedgerStatus(emplLedgerStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEmplLedgerStatus</Name>
				<Source><![CDATA[
    protected boolean validateEmplLedgerStatus(ProjLedgerStatus emplLedgerStatus)
    {
        return (emplLedgerStatus == ProjLedgerStatus::BalanceSheet || emplLedgerStatus == ProjLedgerStatus::Operations);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIsDistributionRequired</Name>
				<Source><![CDATA[
    protected boolean determineIsDistributionRequired()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the accounting policy.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// A source document line item.
    /// </param>
    public void initialize(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        tsTimesheetTrans = TSTimesheetTrans::findBySourceDocumentLine(_sourceDocumentLineItem.parmSourceDocumentLine().RecId);

        super(_sourceDocumentLineItem);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>