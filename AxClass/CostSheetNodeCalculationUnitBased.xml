<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetNodeCalculationUnitBased</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetNodeCalculationUnitBased</c> class represents the indirect costs that use input
///    data units of measure for calculation.
/// </summary>
abstract class CostSheetNodeCalculationUnitBased extends CostSheetNodeCalculation
{
    CostCalculationUnitBasedSubtype    subtype;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        subtype
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editCostSheetNodeTable</Name>
				<Source><![CDATA[
    protected CostSheetNodeTable editCostSheetNodeTable(boolean _set = false, CostSheetNodeTable _costSheetNodeTable = null)
{
    CostSheetNodeTable costSheetNodeTable = super(_set, _costSheetNodeTable);

    if (_set)
    {
        subtype = _costSheetNodeTable.CalculationUnitBasedSubtype;
    }

    costSheetNodeTable.CalculationUnitBasedSubtype = subtype;

    return costSheetNodeTable;
}

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    public boolean equal(Object _costSheetNode)
{
    boolean ret = super(_costSheetNode);

    if (ret)
    {
        CostSheetNodeCalculationUnitBased costSheetCalculationUnitBased = _costSheetNode;

        ret = subtype == costSheetCalculationUnitBased.getSubtype();
        if (!ret)
        {
            return false;
        }

        ListEnumerator factorEnumerator = this.getFactorEnumerator();
        ListEnumerator factorToCompareEnumerator = costSheetCalculationUnitBased.getFactorEnumerator();
        while (factorEnumerator.moveNext())
        {
            if (!factorToCompareEnumerator.moveNext())
            {
                return false;
            }

            CostSheetCalculationFactor costSheetCalculationFactor = factorEnumerator.current();
            CostSheetCalculationFactor costSheetCalculationFactorToCompare = factorToCompareEnumerator.current();

            if (!this.compareCostSheetCalculationFactorAndAmount(costSheetCalculationFactor, costSheetCalculationFactorToCompare))
            {
                return false;
            }
        }

        if (factorToCompareEnumerator.moveNext())
        {
            return false;
        }
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>getBasisSubtypeFieldName</Name>
				<Source><![CDATA[
    /// <summary>
///    Determines the name of the field in the <c>CostSheetCalculationBasis</c> table that stores subtype
///    values for this type of indirect costs.
/// </summary>
/// <returns>
///    The field name.
/// </returns>
/// <remarks>
///    This method should be overridden if the indirect cost type allows editing of the subtype on the
///    basis lines.
/// </remarks>
/// <exception cref="M:Exception::Error">
///    The indirect cost type cannot use other costing sheet nodes as the basis for calculation.
/// </exception>
protected FieldName getBasisSubtypeFieldName()
{
    return '';
}

]]></Source>
			</Method>
			<Method>
				<Name>getSubtype</Name>
				<Source><![CDATA[
    protected CostCalculationUnitBasedSubtype getSubtype()
{
    return subtype;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSubtypeFieldName</Name>
				<Source><![CDATA[
    /// <summary>
///    Determines the name of the field in the <c>CostSheetNodeTable</c> table that stores the subtype
///    values for this type of indirect costs.
/// </summary>
/// <returns>
///    The field name.
/// </returns>
protected FieldName getSubtypeFieldName()
{
    return fieldStr(CostSheetNodeTable, CalculationUnitBasedSubtype);
}

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
///    Initializes a new instance of the <c>CostSheetNodeCalculationUnitBased</c> class.
/// </summary>
/// <param name="_costSheetNodeTable">
///    The record in the <c>CostSheetNodeTable</c> table that to use to initialize this object.
/// </param>
/// <param name="_parentNodeId">
///    The ID of the parent node.
/// </param>
/// <param name="_modeStrategy">
///    The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
/// </param>
/// <param name="_parentCostGroupId">
///    The ID of the <c>CostSheetNodeGroup</c> object to which the calculation node belongs.
/// </param>
protected void new(
    CostSheetNodeTable      _costSheetNodeTable,
    CostSheetNodeId         _parentNodeId,
    CostSheetModeStrategy   _modeStrategy,
    CostGroupId             _parentCostGroupId)
{
    subtype = _costSheetNodeTable.CalculationUnitBasedSubtype;

    super(_costSheetNodeTable, _parentNodeId, _modeStrategy, _parentCostGroupId);
}

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack(boolean _areSurchargesPackedByParentContext = false)
    {
        return [#CurrentVersion, this.getType(), #CurrentList] + [super(_areSurchargesPackedByParentContext)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>toBOMCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
///    Creates a <c>BOMCalcTrans</c> record by using the settings of this costing sheet node.
/// </summary>
/// <param name="_costProfitSet">
///    The <c>CostProfitSet</c> enumeration value that identifies the profit settings.
/// </param>
/// <param name="_transDate">
///    The date of the transaction.
/// </param>
/// <returns>
///    The created <c>BOMCalcTrans</c> record.
/// </returns>
public BOMCalcTrans toBOMCalcTrans(CostProfitSet _costProfitSet, TransDate _transDate)
{
    BOMCalcTrans bomCalcTrans = super(_costProfitSet, _transDate);

    bomCalcTrans.UnitId = this.getCostCalcTransData().getUnitID();

    return bomCalcTrans;
}

]]></Source>
			</Method>
			<Method>
				<Name>toPmfCoByProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
/// Initializes the <c>PmfCoByProdCalcTrans</c> record.
/// </summary>
/// <param name="_prodCalcMode">
/// A calculation mode.
/// </param>
/// <param name="_costProfitSet">
/// A cost profit value.
/// </param>
/// <param name="_transDate">
/// A transaction date.
/// </param>
/// <returns>
/// The initialized <c>PmfCoByProdCalcTrans</c> record.
/// </returns>
public PmfCoByProdCalcTrans toPmfCoByProdCalcTrans(CostSheetProdCalcMode _prodCalcMode,
                                                   CostProfitSet         _costProfitSet  = CostProfitSet::Standard,
                                                   TransDate             _transDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
{
    PmfCoByProdCalcTrans prodCalcTrans = super(_prodCalcMode, _costProfitSet, _transDate);

    prodCalcTrans.UnitId = this.getCostCalcTransData().getUnitID();

    return prodCalcTrans;
}

]]></Source>
			</Method>
			<Method>
				<Name>toProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
///    Creates a <c>ProdCalcTrans</c> record by using the settings of this costing sheet node.
/// </summary>
/// <param name="_prodCalcMode">
///    A <c>CostSheetProdCalcMode</c> enumeration value that indicates whether the calculation is made for
///    estimation or actual costing.
/// </param>
/// <param name="_costProfitSet">
///    The <c>CostProfitSet</c> enumeration value that identifies the profit settings.
/// </param>
/// <param name="_transDate">
///    The date of the transaction.
/// </param>
/// <returns>
///    The new <c>ProdCalcTrans</c> record.
/// </returns>
public ProdCalcTrans toProdCalcTrans(
    CostSheetProdCalcMode   _prodCalcMode,
    CostProfitSet           _costProfitSet = CostProfitSet::Standard,
    TransDate               _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
    )
{
    ProdCalcTrans prodCalcTrans = super(_prodCalcMode, _costProfitSet, _transDate);

    prodCalcTrans.UnitId = this.getCostCalcTransData().getUnitID();

    return prodCalcTrans;
}

]]></Source>
			</Method>
			<Method>
				<Name>toProdIndirectTrans</Name>
				<Source><![CDATA[
    public ProdIndirectTrans toProdIndirectTrans()
{
    ProdIndirectTrans prodIndirectTrans = super();

    prodIndirectTrans.UnitBasedSubtype = subtype;

    return prodIndirectTrans;
}

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
{
    container           base;
    boolean             ret;
    Integer             version = RunBase::getVersion(_packedClass);
    CostSheetNodeType   nodeType;

    switch (version)
    {
        case #CurrentVersion:
            [version, nodeType, #CurrentList, base] = _packedClass;
            ret = super(base);
            break;

        default:
            ret = false;
    }
    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(CostSheet _costSheet)
{
    boolean ret = super(_costSheet);

    ret = (subtype == CostCalculationUnitBasedSubtype::Undefined ? this.checkFailed("@SYS105359") : true) && ret;

    return ret;
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>