<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayExcludeDays</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for different algorithms of calculation excluded days.
/// </summary>
abstract class RPayExcludeDays
{
    RHRMEmplId          emplId;
    StartDate           startDate;
    EndDate             endDate;
    RPayTimeGroupCode   nonAppearanceTimeGroupCode;
    boolean             isDaysCalculated;

    Set yearsSet;
    Set excludedPeriods;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addYearsBetweenDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds to set all years between two dates.
    /// </summary>
    /// <param name="_startDate">
    /// The start date.
    /// </param>
    /// <param name="_endDate">
    /// The end date.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addYearsBetweenDates(startDate _startDate, EndDate _endDate)
    {
        int curYear;

        for (curYear = year(_startDate); curYear <= year(_endDate); curYear ++)
        {
            yearsSet.add(curYear);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcludedDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of excluded days.
    /// </summary>
    /// <returns>
    /// The number of excluded days.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract Days getExcludedDays()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcludedPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Set of excluded periods.
    /// </summary>
    /// <returns>
    /// the Set of excluded periods.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container getExcludedPeriods()
    {
        if (!isDaysCalculated)
        {
            this.getExcludedDays();
        }

        this.mergePeriods();

        return excludedPeriods.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastDocumentExcludeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves last documet date.
    /// </summary>
    /// <returns>
    /// The last documet date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TransDate getLastDocumentExcludeDate()
    {
        return datenull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getYearsExcludeDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves packed set of excluded years.
    /// </summary>
    /// <returns>
    /// The packed set of excluded years.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract container getYearsExcludeDays()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes parameters.
    /// </summary>
    /// <param name="_emplId">
    /// The employee code.
    /// </param>
    /// <param name="_startDate">
    /// Start date.
    /// </param>
    /// <param name="_endDate">
    /// End date.
    /// </param>
    /// <param name="_nonAppearanceTimeGroupCode">
    /// The non appearance time group code.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init(
        RHRMEmplId          _emplId,
        StartDate           _startDate,
        EndDate             _endDate,
        RPayTimeGroupCode   _nonAppearanceTimeGroupCode)
    {
        emplId                      = _emplId;
        startDate                   = _startDate;
        endDate                     = _endDate;
        nonAppearanceTimeGroupCode  = _nonAppearanceTimeGroupCode;

        yearsSet = new Set(Types::Integer);
        this.resetExcludedPeriods();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergePeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges excluded periods if applicable.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void mergePeriods()
    {
        container       period, newPeriod;
        SetEnumerator   se = excludedPeriods.getEnumerator();

        Set             excludedPeriodsNew = new Set(excludedPeriods.typeId());
        boolean         exitsPeriod;

        if (se.moveNext())
        {
            period = se.current();

            newPeriod = period;

            do
            {
                exitsPeriod = false;
                while (se.moveNext())
                {
                    exitsPeriod = true;
                    period = se.current();

                    if (conpeek(newPeriod, 2) == (conpeek(period, 1) - 1) && conpeek(newPeriod, 4) == conpeek(period, 4))
                    {
                        newPeriod = conpoke(newPeriod, 2, conpeek(period, 2));
                        newPeriod = conpoke(newPeriod, 3, conpeek(period, 3) + conpeek(newPeriod, 3));
                        exitsPeriod = false;
                    }
                    else
                    {
                        break;
                    }
                }

                excludedPeriodsNew.add(newPeriod);
                newPeriod = period;
            }
            while (exitsPeriod);

            excludedPeriods = Set::create(excludedPeriodsNew.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EndDate parmEndDate(EndDate _endDate = endDate)
    {
        endDate = _endDate;

        isDaysCalculated = false;
        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public StartDate parmStartDate(StartDate _startDate = startDate)
    {
        startDate = _startDate;

        isDaysCalculated = false;
        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetExcludedPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the set of excluded periods.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void resetExcludedPeriods()
    {
        excludedPeriods = new Set(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExcludedPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds excluded period to the set.
    /// </summary>
    /// <param name="_startdate">
    /// Start date of period.
    /// </param>
    /// <param name="_endDate">
    /// End date of period.
    /// </param>
    /// <param name="_days">
    /// Number of days of excluded period.
    /// </param>
    /// <param name="_periodName">
    /// The name of excluded period.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateExcludedPeriods(
        StartDate   _startdate,
        EndDate     _endDate,
        Days        _days,
        str         _periodName)
    {
        container period;

        period += _startdate;
        period += _endDate;
        period += _days;
        period += _periodName;

        excludedPeriods.add(period);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves instance of inheritable class depends on type of document.
    /// </summary>
    /// <param name="_excludeType">
    /// The type of document.
    /// </param>
    /// <param name="_emplId">
    /// Employee code.
    /// </param>
    /// <param name="_startDate">
    /// Start date.
    /// </param>
    /// <param name="_endDate">
    /// End date
    /// </param>
    /// <param name="_nonAppearanceTimeGroupCode">
    /// The non appearance time group code.
    /// </param>
    /// <returns>
    /// The instance of inheritable class depends on type of document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayExcludeDays construct(
        RPayExcludeType     _excludeType,
        RHRMEmplId          _emplId,
        StartDate           _startDate,
        EndDate             _endDate,
        RPayTimeGroupCode   _nonAppearanceTimeGroupCode = RPayAverageEarnParameters::find().ExcludedTimeGroup)
    {
        RPayExcludeDays excludeDays;

        switch (_excludeType)
        {
            case RPayExcludeType::Tbl:
                excludeDays = new RPayExcludeTblDays();
                break;
            case RPayExcludeType::SickList:
                excludeDays = new RPayExcludeSickListDays();
                break;
            case RPayExcludeType::Vacation:
                excludeDays = new RPayExcludeVacationDays();
                break;
            case RPayExcludeType::BusinessTrip:
                excludeDays = new RPayExcludeBusinessTripDays();
                break;
        }

        excludeDays.init(_emplId, _startDate, _endDate, _nonAppearanceTimeGroupCode);

        return excludeDays;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>