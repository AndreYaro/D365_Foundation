<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmJournalCheckUnPost_Receive</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmJournalCheckUnPost_Receive extends RHRMJournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
        protected boolean checkJournal(JournalTransList _journalTransList)
    {
        boolean ret;

        ret = super(_journalTransList);

        if (ret && isConfigurationkeyEnabled(configurationKeyNum(RPayroll)))
        {
            ret = this.checkTblExist(_journalTransList);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
        protected boolean checkTrans(JournalTransData _journalTransData)
    {
        boolean                 ret;
        RHRMOrderTrans          rhrmOrderTrans = _journalTransData.journalTrans();

        ret = super(_journalTransData);

        if (RPayHistory::find(rhrmOrderTrans.EmplId).RecId != RPayHistory::findOrderTransRecId(rhrmOrderTrans.RecId).RecId)
        {
            ret = checkFailed(strFmt("@RUP1869",
                                            rhrmOrderTrans.EmplId,
                                            RHRMEmplTable::emplId2Name(rhrmOrderTrans.EmplId)));
        }

        if ((select firstonly rpayTrans
                 where rpayTrans.Emplid    == rHRMOrderTrans.EmplId &&
                       rpayTrans.PayPeriod >= rHRMOrderTrans.StartDate).RecId)
        {
            ret = checkFailed(strfmt("@RUP1834",
                                    rHRMOrderTrans.EmplId,
                                    RHRMEmplTable::emplId2Name(rHRMOrderTrans.EmplId)));
        }

        return ret && RHRMJournalCheckPost::checkDismissOperation(rhrmOrderTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
        protected void postTrans(JournalTransData _journalTransData)
    {
        RHRMOrderTrans          rhrmOrderTrans          = _journalTransData.journalTrans();
        RPayHistory             rPayHistoryLast         = RPayHistory::findLastOperation(rhrmOrderTrans.EmplId,
                                                                                         RHRMJournalType::Dismiss);
        RHRMEmplTable           emplTable               = RHRMEmplTable::find(rhrmOrderTrans.EmplId, true);
        RpayHRMOrganizationId   organizationId;

        super(_journalTransData);

        if (rPayHistoryLast)
        {
            emplTable.PayResignedDate         = rPayHistoryLast.StartDate;

            rPayHistoryLast                   = RPayHistory::findLastOperation(emplTable.EmployeeId,
                                                                               RHRMJournalType::Receive,
                                                                               rhrmOrderTrans.StartDate);

            emplTable.PayEmploymentDate     = rPayHistoryLast.StartDate;
            emplTable.LabourContractDate    = rPayHistoryLast.AttachDocDate;
            emplTable.LabourContract        = rPayHistoryLast.AttachDocNum;
            emplTable.HcmTitle              = RPayHistory::findLastSignOnMove(emplTable.EmployeeId,
                                                                              rhrmOrderTrans.StartDate, rhrmOrderTrans.RecId).HcmTitle;
            if (emplTable.HcmTitle != rhrmOrderTrans.HcmTitle)
            {
                emplTable.PersonnelCategoryId = RHRMPersonTitleTable::find(emplTable.HcmTitle).PersonnelCategoryId;
            }

            emplTable.PayHRMOrganizationId = RPayHistory::findLastSignOnMove(emplTable.EmployeeId,
                                                                             rhrmOrderTrans.StartDate, rhrmOrderTrans.RecId).HrmOrganizationId;
        }
        else
        {
            emplTable.HcmTitle              = 0;
            emplTable.PersonnelCategoryId   = "";
            emplTable.PayHRMOrganizationId  = "";
            emplTable.LabourContractDate    = dateNull();
            emplTable.LabourContract        = "";
            emplTable.PayEmploymentDate     = dateNull();
        }

        emplTable.TermDate          = dateNull();
        emplTable.KindOfWork        = RHRMKindOfWork::Permanent;

        emplTable.doUpdate();

        rPayHistoryLast = RPayHistory::findOrderTransRecId(rhrmOrderTrans.RecId, true);
        organizationId  = rPayHistoryLast.HrmOrganizationId;
        rPayHistoryLast.doDelete();

        this.deleteRates(rhrmOrderTrans);

        if (updateTbl && isConfigurationkeyEnabled(configurationkeynum(RPayTbl)))
        {
            RPayTblSpecTimeTrans::reCreateTbl(rHRMOrderTrans.EmplId,
                                              max(dateStartMth(RPayParameters::payPeriod()), dateStartMth(rHRMOrderTrans.StartDate)),
                                              dateNull(),
                                              organizationId);
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>