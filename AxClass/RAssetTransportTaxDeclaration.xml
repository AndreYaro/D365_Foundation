<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTransportTaxDeclaration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetTransportTaxDeclaration extends rAssetTaxDeclaration implements BatchRetryable
{
    RAssetTransportTaxDeclarationLocation   taxDeclarationLocation;
    RTax25RegisterJournalTrans              taxJourTrans;
    RTax25RegisterJournalTrans              taxCalcJourTrans;

    Map                                     section1Map;
    Map                                     section2Map;
    boolean                                 isDetached;     // new data model of rTax25 register transactions

    #define.okatoPerPage(3)
    #define.pageNumber2(2)
    #define.pageNumber3(3)

    #define.RCOAD(1)
    #define.BudgetRevenueCode(2)
    #define.SalesTaxCode(3)
    #define.AssetId(4)
    #define.TaxAmount(29)

    #define.CurrentVersion(5)
    #localmacro.CurrentList
        employeeId,
        taxDeclarationLocation,
        exportToER,
        reorganization,
        reorganizationCode,
        reorganizationINN,
        reorganizationRRC
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillCellsLeftHeader</Name>
				<Source><![CDATA[
    private void fillCellsLeftHeader(int _workSheet, str _cellName, int _row, str _text, int _number = strLen(_text), str _filler = "", int _cellMacro = #cellMacro)
    {
        this.fillCellsLeft(_workSheet, _cellName, _row, _text, _number, _filler, prmisDefault(_cellMacro) ? 2 : _cellMacro);
    }

]]></Source>
			</Method>
			<Method>
				<Name>advancePaymentSum</Name>
				<Source><![CDATA[
    private RAssetNetBookValue advancePaymentSum(container _header, TransDate _quarterEndDate)
    {
        RTax25RegisterTrans_TransportTaxCalc    taxCalc;
        RTax25RegisterJournalTrans              journalTrans;
        RTax25RegisterTrans                     rTax25RegTransAsset;
        RTax25RegisterJournalTable              rTax25RegJournalTable;
        RAssetAssessedAmount                    ret;
        boolean                                 foundHeader;
        OKATO_RU                                okato;
        PaymentOrderBudgetReceiptClassCode_RU   kbk;
        TaxCode                                 taxCode;
        RAssetId                                assetId;
    
        select firstonly JournalNum, PeriodType, PeriodNum, FiscalYear from rTax25RegJournalTable
            where rTax25RegJournalTable.RegisterJournalType == RTax25RegisterJournalType::Asset_RU
               && rTax25RegJournalTable.EndDate             == _quarterEndDate;
    
        if (RTax25RegisterTrans::existAny(rTax25RegJournalTable.JournalNum,
                                          taxCalcJourTrans.RegisterId,
                                          rTax25RegJournalTable.PeriodType,
                                          rTax25RegJournalTable.PeriodNum,
                                          rTax25RegJournalTable.FiscalYear))
        {
            while select RegisterValues from rTax25RegTransAsset
            order by LineNumber
            where rTax25RegTransAsset.AssessedTaxRegisterType == RAssetAssessedTaxRegType::TransportTaxCalc
              &&  rTax25RegTransAsset.BlockType               == ReportBlockType::Body
                   && rTax25RegTransAsset.JournalNum              == rTax25RegJournalTable.JournalNum
                   && rTax25RegTransAsset.PeriodNum               == rTax25RegJournalTable.PeriodNum
                   && rTax25RegTransAsset.PeriodType              == rTax25RegJournalTable.PeriodType
                   && rTax25RegTransAsset.FiscalYear              == rTax25RegJournalTable.FiscalYear
            {
                [okato, kbk, taxCode, assetId] = rTax25RegTransAsset.RegisterValues;
    
                if (okato && kbk && taxCode)
                {
                    foundHeader = (okato == conPeek(_header, 1) && kbk == conPeek(_header, 2) && taxCode == conPeek(_header, 3));
                }
    
                if (foundHeader && assetId == conPeek(_header, 4))
                {
                    ret += conPeek(rTax25RegTransAsset.RegisterValues, #TaxAmount);
                }
            }
        }
        else
        {
            while select RCOAD, BudgetRevenueCode, SalesTaxCode, TaxAmount, AssetId from taxCalc
                order by LineNumber
                where taxCalc.BlockType == ReportBlockType::Body
            exists join journalTrans
                where journalTrans.RecId       == taxCalc.JournalTransRefRecId     &&
                      journalTrans.RegisterId  == taxCalcJourTrans.RegisterId      &&
                      ! journalTrans.Cancelled                                     &&
                      journalTrans.JournalNum  == rTax25RegJournalTable.JournalNum &&
                      journalTrans.PeriodNum   == rTax25RegJournalTable.PeriodNum  &&
                      journalTrans.PeriodType  == rTax25RegJournalTable.PeriodType &&
                      journalTrans.FiscalYear  == rTax25RegJournalTable.FiscalYear
            {
                if (taxCalc.RCOAD && taxCalc.BudgetRevenueCode && taxCalc.SalesTaxCode)
                {
                    foundHeader = (taxCalc.RCOAD             == conPeek(_header, 1) &&
                                   taxCalc.BudgetRevenueCode == conPeek(_header, 2) &&
                                   taxCalc.SalesTaxCode      == conPeek(_header, 3));
                }
    
                if (foundHeader && taxCalc.AssetId == conPeek(_header, 4))
                {
                    ret += taxCalc.TaxAmount;
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public Description caption()
    {
        return RAssetTransportTaxDeclaration::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRegisterTrans</Name>
				<Source><![CDATA[
    private boolean checkRegisterTrans(OKATO_RU   _okato,
                                       RefTableId _refTableId,
                                       RefRecId   _refRecId)
    
    {
        Branches_RU      branch;
        RAssetLocationId location;
    
        if (taxDeclarationLocation == RAssetTransportTaxDeclarationLocation::ImmovableVehicle)
        {
            if (_refTableId == tableNum(RAssetTable))
            {
                location = RAssetTable::findrec(_refRecId).location(journalTable.EndDate);
                if (location)
                {
                    branch = Branches_RU::find(RAssetLocation::find(location).BranchId);
                    if (branch.VendAccount && branch.Independent)
                        return branch.VendAccount == curVendAccount;
                }
                return !curVendAccount && _okato == curRCOAD;
            }
            return false;
        }
        return _okato == curRCOAD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create1To2Sections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reproduces copies of the second and the third pages of template report.
    /// </summary>
    protected void create1To2Sections()
    {
        int                                     rcoadCount, section1Page;
        OKATO_RU                                okato, prevOKATO;
        PaymentOrderBudgetReceiptClassCode_RU   kbk, prevKBK;
        MapEnumerator                           me;

        me = section1Map.getEnumerator();
        while (me.moveNext())
        {
            [kbk, okato] = me.currentValue();
            if (prevKBK    != kbk ||
                rcoadCount >= #okatoPerPage)
            {
                totalPages++;
                excelDocument.insertSheet(#pageNumber2, totalPages + 1);
                rcoadCount = 0;
                if (prevKBK != kbk)
                {
                    prevKBK   = kbk;
                    prevOKATO = '';
                }
                section1Page = totalPages;
            }
            this.fillSection1(section1Page + 2, rcoadCount, me.currentValue());
            this.createSection2(okato, kbk);
            if (prevOKATO != okato)
            {
                rcoadCount++;
                prevOKATO = okato;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSection2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reproduces copies and fills the third page of template report.
    /// </summary>
    /// <param name="_okato">
    /// Russian Classification of objects of administrative division.
    /// </param>
    /// <param name="_kbk">
    /// Budget revenue code.
    /// </param>
    protected void createSection2(OKATO_RU _okato, PaymentOrderBudgetReceiptClassCode_RU _kbk)
    {
        List                valuesList;
        ListEnumerator      le;

        if (!section2Map.exists(_kbk + _okato))
            return;

        valuesList = section2Map.lookup(_kbk + _okato);

        if (valuesList && valuesList.elements())
        {
            le = valuesList.getEnumerator();
            while (le.moveNext())
            {
                totalPages++;
                excelDocument.insertSheet(#pageNumber3, totalPages + 1);
                this.fillSection2(totalPages + 2, _okato, le.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    protected void fillHeader()
    {
        #localMacro.ReportPeriodCode
            [3, 21, 51, 6, 22, 54, 9, 23, 55, 12, 34, 34]
        #endMacro

        this.fillCellsLeftHeader(1, 'O',  11, int2str(correctionNumber), 3, "@GLS109332");
        this.fillCellsLeftHeader(1, 'AS', 11, int2str(conPeek(#ReportPeriodCode, conFind(#ReportPeriodCode, mthOfYr(journalTable.EndDate)) + 1 + reorganization)));
        this.fillCellsLeftHeader(1, 'BU', 11, int2str(year(journalTable.EndDate)));
        this.fillCellsLeftHeader(1, 'BW', 13, int2str(taxDeclarationLocation + 200));

        if (reorganization)
        {
            this.fillCellsLeftHeader(1, 'S', 26, int2str(reorganizationCode));
            this.fillCellsLeftHeader(1, 'AO', 26, reorganizationINN);
            this.fillCellsLeftHeader(1, 'BK', 26, reorganizationRRC);
        }

        this.fillCellsLeftHeader(1, 'Z', 13, gniCode);

        this.fillCellsLeftHeader(1, #A,  15, subStr(companyName, 1, 40), 40);
        this.fillCellsLeftHeader(1, #A,  17, subStr(companyName, 41, 80), 40);
        this.fillCellsLeftHeader(1, #A,  19, subStr(companyName, 81, 120), 40);
        this.fillCellsLeftHeader(1, #A,  21, subStr(companyName, 121, 180), 40);

        this.fillCellsLeftHeader(1, 'AR', 23, subStr(okdp, 1, 2), 2);
        this.fillCellsLeftHeader(1, 'AX', 23, subStr(okdp, 4, 2), 2);
        this.fillCellsLeftHeader(1, 'BD', 23, subStr(okdp, 7, 2), 2);

        this.fillCellsLeftHeader(1, 'U', 28, companyPhone);

        this.fillCellsLeftHeader(1, 'D',  34, taxPayerSing);
        this.fillCellsLeftHeader(1, 'B',  36, lastName);
        this.fillCellsLeftHeader(1, 'B',  38, firstName);
        this.fillCellsLeftHeader(1, 'B',  40, middleName);

        this.fillHeaderPage(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeaderPage</Name>
				<Source><![CDATA[
    #define.INNColumn('Y')
    #define.INNRow(1)
    #define.KPPColumn('Y')
    #define.KPPRow(4)
    private void fillHeaderPage(int _sheet)
    {
        this.fillCellsLeft(_sheet, #INNColumn, #INNRow, inn, 12, "@GLS109332", _sheet > 1 ? 1 : 2);
        this.fillCellsLeft(_sheet, #KPPColumn, #KPPRow, kpp, 9, "@GLS109332", _sheet > 1 ? 1 : 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection1</Name>
				<Source><![CDATA[
    #define.okatoDelta(18)
    private void fillSection1(int _sheet, int _index, container _values)
    {
        str taxSum;

        if (! _index)
        {
            this.fillCellsLeft(_sheet, 'U', 13, conPeek(_values, 1), 20); // kbk
        }

        this.fillCellsLeft(_sheet, 'U', 15 + _index * #okatoDelta, conPeek(_values, 2), 11, "@SYS24272");   // okato

        taxSum = this.roundAmountStr(conPeek(_values, 3));
        this.fillCellsLeft(_sheet, 'U', 17 + _index * #okatoDelta, taxSum, 15, "@GLS101637");

        taxSum = this.roundAmountStr(conPeek(_values, 4));
        this.fillCellsLeft(_sheet, 'U', 21 + _index * #okatoDelta, taxSum, 15, "@GLS101637");
        taxSum = this.roundAmountStr(conPeek(_values, 5));
        this.fillCellsLeft(_sheet, 'U', 23 + _index * #okatoDelta, taxSum, 15, "@GLS101637");
        taxSum = this.roundAmountStr(conPeek(_values, 6));
        this.fillCellsLeft(_sheet, 'U', 25 + _index * #okatoDelta, taxSum, 15, "@GLS101637");

        if (conPeek(_values, 3) - conPeek(_values, 4) - conPeek(_values, 5) - conPeek(_values, 6) > 0)
        {
            taxSum = this.roundAmountStr(conPeek(_values, 3) - conPeek(_values, 4) - conPeek(_values, 5) - conPeek(_values, 6));
            this.fillCellsLeft(_sheet, 'U', 28 + _index * #okatoDelta, taxSum, 15, "@GLS101637");
        }
        else
        {
            taxSum = this.roundAmountStr(conPeek(_values, 4) + conPeek(_values, 5) + conPeek(_values, 6) - conPeek(_values, 3));
            this.fillCellsLeft(_sheet, 'U', 30 + _index * #okatoDelta, taxSum, 15, "@GLS101637");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection2</Name>
				<Source><![CDATA[
    #define.VehicleType(5)
    #define.SerialNumber(6)
    #define.Model(7)
    #define.RegNo(8)
    #define.RegisterDate(9)
    #define.UnRegisterDate(10)
    #define.TaxBase(11)
    #define.Unit(12)
    #define.UsefulLifeTime(13)
    #define.ReleaseYear(14)
    #define.Months(15)
    #define.OwnedShare(16)
    #define.Factor(17)
    #define.TaxValue(18)
    #define.FactorKp(19)
    #define.Tax(20)
    #define.GracePeriod(21)
    #define.FactorK2(22)
    #define.ExemptionId(23)
    #define.ExemptionAmount(24)
    #define.Privilege(25)
    #define.TaxAllowanceAmount(26)
    #define.Deduction(27)
    #define.DeductionAmount(28)
    private void fillSection2(int _sheet, OKATO_RU _okato, RTax25RegisterTransMap _taxCalc)
    {
        str                 s;
        int                 row;
        RAssetTaxAllowance  allowance;
        RAssetTable         rAssetTable;
        Common              common  = _taxCalc;
        container           fieldId = RTax25RegType::construct(RTax25RegisterType::AmountDifference,
                                                           RAssetAssessedTaxRegType::TransportTaxCalc,
                                                           isDetached).fieldId();
        anytype getField(RTax25FieldId   _fieldId)
        {
            if (isDetached)
            {
                return common.(conpeek(fieldId, _fieldId));
            }
            return conpeek(_taxCalc.RegisterValues, _fieldId);
        }

        rAssetTable = RAssetTable::find(getField(#AssetId));

        this.fillCellsLeft(_sheet, 'K', 11, _okato, 11, "@SYS24272");
        this.fillCellsLeft(_sheet, 'K', 13, getField(#VehicleType), 5);
        this.fillCellsLeft(_sheet, 'K', 16, getField(#SerialNumber), 25);
        this.fillCellsLeft(_sheet, 'K', 19, getField(#Model), 30);
        this.fillCellsLeft(_sheet, 'K', 22, getField(#RegNo), 30);

        s = date2str(
        getField(#RegisterDate),
        123,
        DateDay::Digits2,
        DateSeparator::Hyphen,
        DateMonth::Digits2,
        DateSeparator::Hyphen,
        DateYear::Digits4,
        DateFlags::None);

        this.fillCellsLeft(_sheet, 'K', 24, subStr(s, 1, 2), 2, "@GLS109332");
        this.fillCellsLeft(_sheet, 'N', 24, subStr(s, 4, 2), 2, "@GLS109332");
        this.fillCellsLeft(_sheet, 'Q', 24, subStr(s, 7, 4), 4, "@GLS109332");

        s = date2str(
        getField(#UnRegisterDate),
        123,
        DateDay::Digits2,
        DateSeparator::Hyphen,
        DateMonth::Digits2,
        DateSeparator::Hyphen,
        DateYear::Digits4,
        DateFlags::None);

        this.fillCellsLeft(_sheet, 'K', 27, subStr(s, 1, 2), 2, "@GLS109332");
        this.fillCellsLeft(_sheet, 'N', 27, subStr(s, 4, 2), 2, "@GLS109332");
        this.fillCellsLeft(_sheet, 'Q', 27, subStr(s, 7, 4), 4, "@GLS109332");

        s = num2str(trunc(getField(#TaxBase)), 0, 0, 1, 0);
        this.fillCellsLeft(_sheet, 'K', 30, subStr(s, 1, strLen(s)), 12, "@GLS109332");
        s = num2str(frac(getField(#TaxBase)), 0,
                numOfDec(getField(#TaxBase)) ? numOfDec(getField(#TaxBase)) : 1, 1, 0);
        this.fillCellsLeft(_sheet, 'X', 30, subStr(s, 3, strLen(s)), 2, "@GLS109332");

        this.fillCellsLeft(_sheet, 'K', 48, subStr(s, 1, 1), 1, "@GLS109332");

        this.fillCellsLeft(_sheet, 'K', 32, getField(#Unit), 3);
        if (rAssetTable.VehicleEcoClass)
        this.fillCellsLeft(_sheet, 'K', 35, enum2Value(rAssetTable.VehicleEcoClass), 1);

        this.fillCellsLeft(_sheet, 'K', 37, this.roundAmountStr(getField(#UsefulLifeTime)), 3, "@GLS109332");
        this.fillCellsLeft(_sheet, 'K', 40, this.roundAmountStr(getField(#ReleaseYear)), 4, "@GLS109332");
        this.fillCellsLeft(_sheet, 'K', 43, this.roundAmountStr(getField(#Months)), 2, "@GLS109332");

        row = strLen(getField(#OwnedShare));
        s = subStr(getField(#OwnedShare), 1, strFind(getField(#OwnedShare), "@SYS35673", 1, row)-1);
        this.fillCellsLeft(_sheet, 'K', 46, s, 10, "@GLS109332");
        s = subStr(getField(#OwnedShare), row ,-(row-strFind(getField(#OwnedShare), "@SYS35673", 1, row)));
        this.fillCellsLeft(_sheet, 'V', 46, s, 10, "@GLS109332");

        s = num2str(trunc(getField(#Factor)), 0, 0, 1, 0);
        this.fillCellsLeft(_sheet, 'K', 48, subStr(s, 1, 1), 1, "@GLS109332");
        s = num2str(frac(getField(#Factor)), 0,
                numOfDec(getField(#Factor)) ? numOfDec(getField(#Factor)) : 1, 1, 0);
        this.fillCellsLeft(_sheet, 'M', 48, subStr(s, 3, strLen(s)), 4, "@GLS109332");

        s = num2str(trunc(getField(#TaxValue)), 0, 0, 1, 0);
        this.fillCellsLeft(_sheet, 'K', 50, subStr(s, 1, strLen(s)), 6, "@GLS109332");
        s = num2str(frac(getField(#TaxValue)), 0,
                numOfDec(getField(#TaxValue)) ? numOfDec(getField(#TaxValue)) : 1, 1, 0);
        this.fillCellsLeft(_sheet, 'R', 50, subStr(s, 3, strLen(s)), 2, "@GLS109332");

        s = num2str(trunc(getField(#FactorKp)), 0, 0, 1, 0);
        this.fillCellsLeft(_sheet, 'K', 52, subStr(s, 1, 1), 1, "@GLS109332");
        s = num2str(frac(getField(#FactorKp)), 0,
                numOfDec(getField(#FactorKp)) ? numOfDec(getField(#FactorKp)) : 1, 1, 0);
        this.fillCellsLeft(_sheet, 'M', 52, subStr(s, 3, strLen(s)), 1, "@GLS109332");

        this.fillCellsLeft(_sheet, 'K', 54, this.roundAmountStr(getField(#Tax)), 15, "@GLS109332");
        this.fillCellsLeft(_sheet, 'K', 57, this.roundAmountStr(getField(#GracePeriod)), 2, "@GLS109332");

        s = num2str(trunc(getField(#FactorK2)), 0, 0, 1, 0);
        this.fillCellsLeft(_sheet, 'K', 60, subStr(s, 1, 1), 1, "@GLS109332");
        s = num2str(frac(getField(#FactorK2)), 0,
                numOfDec(getField(#FactorK2)) ? numOfDec(getField(#FactorK2)) : 1, 1, 0);
        this.fillCellsLeft(_sheet, 'M', 60, subStr(s, 3, strLen(s)), 4, "@GLS109332");

        if (getField(#ExemptionId))
        {
            this.fillCellsLeft(_sheet, 'K', 62, getField(#ExemptionId), 5);
            allowance = RAssetTaxAllowance::findByTaxAllowanceId(getField(#ExemptionId));
            if (allowance.ArticleNumber)
            this.fillCellsRight(_sheet, 'T', 62, allowance.ArticleNumber, 4, "@SYS24272");
            if (allowance.ArticleClause)
            this.fillCellsRight(_sheet, 'X', 62, allowance.ArticleClause, 4, "@SYS24272");
            if (allowance.ArticleSubClause)
            this.fillCellsRight(_sheet, 'AB', 62, allowance.ArticleSubClause, 4, "@SYS24272");
            this.fillCellsLeft(_sheet, 'K', 65, this.roundAmountStr(getField(#ExemptionAmount)), 15, "@GLS109332");
        }

        if (RAssetTaxAllowance::findByTaxAllowanceId(getField(#Privilege)).TaxAllowanceType == RAssetTaxAllowanceType::TaxAmountReduction)
        {
            this.fillCellsLeft(_sheet, 'K', 68, getField(#Privilege), 5);
            allowance = RAssetTaxAllowance::findByTaxAllowanceId(getField(#Privilege));
            if (allowance.ArticleNumber)
            this.fillCellsRight(_sheet, 'T', 68, allowance.ArticleNumber, 4, "@SYS24272");
            if (allowance.ArticleClause)
            this.fillCellsRight(_sheet, 'X', 68, allowance.ArticleClause, 4, "@SYS24272");
            if (allowance.ArticleSubClause)
            this.fillCellsRight(_sheet, 'AB', 68, allowance.ArticleSubClause, 4, "@SYS24272");
            this.fillCellsLeft(_sheet, 'K', 71, this.roundAmountStr(getField(#TaxAllowanceAmount)), 15, "@GLS109332");
        }
        else if (getField(#Privilege))
        {
            this.fillCellsLeft(_sheet, 'K', 74, getField(#Privilege), 5);
            allowance = RAssetTaxAllowance::findByTaxAllowanceId(getField(#Privilege));
            if (allowance.ArticleNumber)
            this.fillCellsRight(_sheet, 'T', 74, allowance.ArticleNumber, 4, "@SYS24272");
            if (allowance.ArticleClause)
            this.fillCellsRight(_sheet, 'X', 74, allowance.ArticleClause, 4, "@SYS24272");
            if (allowance.ArticleSubClause)
            this.fillCellsRight(_sheet, 'AB', 74, allowance.ArticleSubClause, 4, "@SYS24272");
            this.fillCellsLeft(_sheet, 'K', 77, this.roundAmountStr(getField(#TaxAllowanceAmount)), 15, "@GLS109332");
        }

        if (getField(#Deduction))
        {
            this.fillCellsLeft(_sheet, 'K', 79, getField(#Deduction), 5);
            this.fillCellsLeft(_sheet, 'K', 81, this.roundAmountStr(getField(#DeductionAmount)), 15, "@GLS109332");
        }

        this.fillCellsLeft(_sheet, 'K', 84, this.roundAmountStr(getField(#TaxAmount)), 15, "@GLS109332");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotalPages</Name>
				<Source><![CDATA[
    #define.KPPRow(4)
    #define.PageNumberColumn('AB')
    protected void fillTotalPages()
    {
        int page;

        this.fillCellsRight(1, 'M', 30, int2str(totalPages), 5, #0, 2);

        excelDocument.deleteWorkSheet(#pageNumber3);
        excelDocument.deleteWorkSheet(#pageNumber2);

        for (page = totalPages; page > 1; page--)
        {
            this.fillCellsRight(page, #PageNumberColumn, #KPPRow, int2str(page), 5, #0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupData</Name>
				<Source><![CDATA[
    #define.EndMarch(31)
    #define.EndJune(30)
    #define.EndSeptember(30)
    #define.MarchNum(03)
    #define.JuneNum(06)
    #define.SeptemberNum(09)
    private void groupData()
    {
        OKATO_RU                                okato;
        PaymentOrderBudgetReceiptClassCode_RU   kbk;
        str                                     mapKey;
        Amount                                  advance1, advance2, advance3;
        Amount                                  calcTax;
        List                                    valuesList;
        TaxCode                                 taxCode;
        RTax25Query                             query = RTax25Query::newParameters(RTax25RegisterType::AmountDifference, taxCalcJourTrans, isDetached);
    
        if (query.first())
        {
            do
            {
                if (query.getRecord().RefTableId)
                {
                    if (this.checkRegisterTrans(okato, query.getRecord().RefTableId, query.getRecord().RefRecId))
                    {
                        mapKey = kbk + okato;
    
                        if (section1Map.exists(mapKey))
                        {
                            [kbk, okato, calcTax, advance1, advance2, advance3]  = section1Map.lookup(mapKey);
                        }
                        else
                        {
                            [kbk, okato, calcTax, advance1, advance2, advance3]  = [kbk, okato, 0, 0, 0, 0];
                        }
    
                        if (section2Map.exists(mapKey))
                        {
                            valuesList  = section2Map.lookup(mapKey);
                        }
                        else
                        {
                            valuesList  = new List(Types::Record);
                        }
    
                        calcTax += query.getField(#TaxAmount);
                        advance1 += this.advancePaymentSum([okato, kbk, taxCode, query.getField(#AssetId)],
                                                       mkDate(#EndMarch, #MarchNum, journalTable.FiscalYear));
                        advance2 += this.advancePaymentSum([okato, kbk, taxCode, query.getField(#AssetId)],
                                                       mkDate(#EndJune, #JuneNum, journalTable.FiscalYear));
                        advance3 += this.advancePaymentSum([okato, kbk, taxCode, query.getField(#AssetId)],
                                                       mkDate(#EndSeptember, #SeptemberNum, journalTable.FiscalYear));
    
                        valuesList.addEnd(query.getRecord());
    
                        section1Map.insert(mapKey, [kbk, okato, calcTax, advance1, advance2, advance3]);
                        section2Map.insert(mapKey, valuesList);
                    }
                }
                else
                {
                    okato   = query.getField(#RCOAD);
                    kbk     = query.getField(#BudgetRevenueCode);
                    taxCode = query.getField(#SalesTaxCode);
                }
            }
            while (query.next());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    protected boolean makeDocument(str _declarationFor)
    {
        section1Map     = new Map(Types::String, Types::Container);
        section2Map     = new Map(Types::String, Types::Class);
        totalPages      = 1;
        excelDocument   = new ComExcelDocument_RU();

        return excelDocument.newFile(TemplateProvider_RU::getFor(this).get(this.templateName()), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxDeclarationLocation</Name>
				<Source><![CDATA[
    public RAssetTransportTaxDeclarationLocation parmTaxDeclarationLocation(RAssetTransportTaxDeclarationLocation  _taxDeclarationLocation = taxDeclarationLocation)
    {
        taxDeclarationLocation = _taxDeclarationLocation;
        return taxDeclarationLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printByDetachedDepartment</Name>
				<Source><![CDATA[
    private void printByDetachedDepartment()
    {
        VendTable           vendTable;
        ContactPerson       contactPerson;
        DirPersonName       dirPersonName;
        RAssetLocationId    location;
        Branches_RU         branch;
        SetEnumerator       se;
        Set                 rcoadSet = this.rcoadSet();
        Set                 detachedSet = new Set(Types::String);
        boolean             findVendDirector = taxPayerSing == '1';
        RTax25Query         query = RTax25Query::newParameters(RTax25RegisterType::AmountDifference, taxCalcJourTrans, isDetached);
    
        if (query.first())
        {
            do
            {
                if (query.getRecord().RefTableId == tableNum(RAssetTable))
                {
                    location = RAssetTable::findRec(query.getRecord().RefRecId).location(journalTable.EndDate);
    
                    if (location)
                    {
                        branch = Branches_RU::find(RAssetLocation::find(location).BranchId);
                        if (branch.Independent && declarationSet.in(branch.VendAccount))
                        {
                            detachedSet.add(branch.VendAccount);
                        }
                    }
                }
            }
            while (query.next());
        }
    
        if (declarationSet.in(companyInfo.Name))
        {
            se = rcoadSet.getEnumerator();
            if (se.moveNext() && this.makeDocument(companyInfo.Name))
            {
                gniCode     = this.gniCode(CompanyInfoHelper::partyOKATOasOfDate_RU(companyInfo, journalTable.EndDate));
                this.fillHeader();
    
                do
                {
                    curRCOAD = se.current();
                    this.groupData();
                }
                while (se.moveNext());
                this.create1To2Sections();
    
                this.endDocument();
            }
        }
    
        taxPayerSing = '2';
        se = detachedSet.getEnumerator();
        while (se.moveNext())
        {
            curVendAccount  = se.current();
            vendTable       = VendTable::find(curVendAccount);
            inn             = vendTable.partyINNasOfDate_RU(journalTable.EndDate);
            kpp             = vendTable.partyKPPasOfDate_RU(journalTable.EndDate);
            okdp            = vendTable.partyOKDPasOfDate_RU(journalTable.EndDate);
            companyPhone    = vendTable.phone();
            //        companyName     = vendTable.name();// PS_324640
            curRCOAD        = vendTable.partyOKATOasOfDate_RU(journalTable.EndDate);
            gniCode         = this.gniCode(curRCOAD);
    
            if (findVendDirector)
            {
                select firstonly Party from contactPerson
                    where contactPerson.ContactPersonId == vendTable.ContactPersonId;
    
                if (!contactPerson)
                {
                    select firstonly Party from contactPerson
                        where contactPerson.ContactForParty == vendTable.Party;
                }
    
                dirPersonName = DirPersonName::find(DirPerson::find(contactPerson.Party).RecId);
                firstName   = dirPersonName.FirstName;
                lastName    = dirPersonName.LastName;
                middleName  = dirPersonName.MiddleName;
            }
    
            if (this.makeDocument(curVendAccount))
            {
                this.fillHeader();
                this.groupData();
                this.create1To2Sections();
                this.endDocument();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printByMajorTaxPayer</Name>
				<Source><![CDATA[
    private void printByMajorTaxPayer()
    {
        SetEnumerator se = this.rcoadSet().getEnumerator();

        if (se.moveNext() && this.makeDocument(companyInfo.Name))
        {
            gniCode     = this.gniCode(CompanyInfoHelper::partyOKATOasOfDate_RU(companyInfo, journalTable.EndDate));
            this.fillHeader();

            do
            {
                curRCOAD = se.current();
                this.groupData();
            }
            while (se.moveNext());
            this.create1To2Sections();

            this.endDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rcoadSet</Name>
				<Source><![CDATA[
    private Set rcoadSet(TaxAuthority _taxAuthority = '')
    {
        Set                 registerSet = new Set(Types::String);
        RTax25Query query = RTax25Query::newParameters(RTax25RegisterType::AmountDifference, taxJourTrans, isDetached);
    
        if (query.first(0, ReportBlockType::Footer))
        {
            do
            {
                registerSet.add(query.getField(#RCOAD));
            }
            while (query.next());
        }
    
        if (_taxAuthority && registerSet.elements())
        {
            return Set::intersection(registerSet, TaxAuthorityAddress::find(_taxAuthority).okatoSet_RU());
        }
    
        return registerSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundAmountStr</Name>
				<Source><![CDATA[
    protected str roundAmountStr(RAssetAmount _amount, str _dash = '')
    {
        return _amount > 0 ? num2str(round(_amount, 1), 0, 0, 1, 0) : _dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        DirPartyTable leader;
        DirPersonName responsible,
                      leaderName;

        this.getLast();

        if (this.checkDocument())
        {
            leader          = DirPartyTable::findByName(OfficialsTable_RU::nameDirector());
            responsible     = DirPersonName::find(EmployeeTable_RU::findByEmployeeId(employeeId).worker().Person);
            leaderName      = DirPersonName::find(leader.RecId);

            inn             = companyInfo.partyINNasOfDate_RU(journalTable.EndDate);
            kpp             = companyInfo.partyKPPasOfDate_RU(journalTable.EndDate);
            okdp            = CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, journalTable.EndDate);
            companyPhone    = companyInfo.phone();
            companyName     = companyInfo.Name;

            if (responsible.RecId)
            {
                taxPayerSing    = '2';
                firstName       = responsible.FirstName;
                lastName        = responsible.LastName;
                middleName      = responsible.MiddleName;
            }
            else if (leaderName.RecId)
            {
                taxPayerSing    = '1';
                firstName       = leaderName.FirstName;
                lastName        = leaderName.LastName;
                middleName      = leaderName.MiddleName;
            }

            try
            {
                if (taxDeclarationLocation == RAssetTransportTaxDeclarationLocation::MajorTaxPayer ||
                    taxDeclarationLocation == RAssetTransportTaxDeclarationLocation::AssigneeAccounting)
                {
                    this.printByMajorTaxPayer();
                }
                else // RAssetTransportTaxDeclarationLocation::ImmovableVehicle
                {
                    this.printByDetachedDepartment();
                }
            }
            catch (Exception::Error)
            {
                this.closeExcelDocument();
                throw error("@SYS18738");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDeclarationType</Name>
				<Source><![CDATA[
    public RAssetAssessedTaxRegType taxDeclarationType()
    {
        return RAssetAssessedTaxRegType::TransportTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected str templateName()
    {
        return resourceStr(RAssetTransportTaxDeclaration);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer          version  = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS116952";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetTransportTaxDeclaration taxDeclaration = new RAssetTransportTaxDeclaration();

        taxDeclaration.initValue(_args);

        if (taxDeclaration.prompt())
        {
            taxDeclaration.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(Args _args)
    {
        super(_args);
        select firstonly taxJourTrans
            where taxJourTrans.JournalNum              == journalTable.JournalNum &&
                  taxJourTrans.PeriodType              == journalTable.PeriodType &&
                  taxJourTrans.PeriodNum               == journalTable.PeriodNum  &&
                  taxJourTrans.FiscalYear              == journalTable.FiscalYear &&
                  taxJourTrans.Cancelled               == NoYes::No               &&
                  taxJourTrans.AssessedTaxRegisterType == RAssetAssessedTaxRegType::TransportTax;
        select firstonly taxCalcJourTrans
            where taxCalcJourTrans.JournalNum              == journalTable.JournalNum &&
                  taxCalcJourTrans.PeriodType              == journalTable.PeriodType &&
                  taxCalcJourTrans.PeriodNum               == journalTable.PeriodNum  &&
                  taxCalcJourTrans.FiscalYear              == journalTable.FiscalYear &&
                  taxCalcJourTrans.Cancelled               == NoYes::No               &&
                  taxCalcJourTrans.AssessedTaxRegisterType == RAssetAssessedTaxRegType::TransportTaxCalc;
    
        isDetached = ! RTax25RegisterTrans::existAny(journalTable.JournalNum,
                                                     taxCalcJourTrans.RegisterId,
                                                     journalTable.PeriodType,
                                                     journalTable.PeriodNum,
                                                     journalTable.FiscalYear);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>