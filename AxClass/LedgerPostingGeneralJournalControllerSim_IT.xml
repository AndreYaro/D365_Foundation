<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPostingGeneralJournalControllerSim_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerPostingGeneralJournalControllerSim_IT</c> class manages the records that are created at the
/// time of a transfer to the simulation journal.
/// </summary>
/// <remarks>
/// This method manages the <c>GeneralJournalAccountEntrySim_IT</c>, <c>LedgerEntry</c>, and
/// <c>TaxTransGeneralJournalAccountEntry</c> tables.
/// </remarks>
public final class LedgerPostingGeneralJournalControllerSim_IT
{
    public NumberSeq journalNumberNumberSeq;

    public LedgerEntryJournalSim_IT ledgerEntryJournal;

    public RecordSortedList generalJournalEntryCollection;
    public Map generalJournalEntryRecIdValues;
    public Map generalJournalEntryNaturalKeys;

    public Set reversalLineRecordIdCollection;

    public RecordSortedList detailGeneralJournalAccountEntryCollection;
    public RecordSortedList summaryGeneralJournalAccountEntryCollection;

    public Map lineCountByHeader;

    // These collections contain the ID values of
    // previously used general journal account entry records.
    public Set detailGeneralJournalAccountEntryRecIdCollection;
    public Set summaryGeneralJournalAccountEntryRecIdCollection;

    // This collection contains a mapping from the sorting fields for a general
    // journal account entry record to its temporary record ID. Each unique combination of
    // sorting fields requires a unique temporary record ID for the ledger entry
    // link.
    public Map summaryGeneralJournalAccountEntryToTempLineId;

    public RecId nextTempRecId;

    private const boolean UseRounding = true;
    private const boolean ThrowForDuplicates = false;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        journalNumberNumberSeq = NumberSeq::newGetNum(NumberSeqReference::findReference(extendedtypenum(GeneralJournalEntrySimJournalNumber_IT)));

        summaryGeneralJournalAccountEntryToTempLineId = new Map(Types::Container, Types::Int64);

        generalJournalEntryCollection = this.createReferenceCollection();
        generalJournalEntryRecIdValues = new Map(Types::Container, Types::Int64);

        reversalLineRecordIdCollection = new Set(Types::Int64);


        detailGeneralJournalAccountEntryCollection = new RecordSortedList(tableNum(GeneralJournalAccountEntrySim_IT));

        summaryGeneralJournalAccountEntryCollection = new RecordSortedList(tableNum(GeneralJournalAccountEntrySim_IT));

        detailGeneralJournalAccountEntryCollection.sortOrder(fieldNum(GeneralJournalAccountEntrySim_IT, RecId));
        summaryGeneralJournalAccountEntryCollection.sortOrder(fieldNum(GeneralJournalAccountEntrySim_IT, RecId));

        lineCountByHeader = new Map(Types::Int64, Types::Int64);

        detailGeneralJournalAccountEntryRecIdCollection = new Set(Types::Int64);
        summaryGeneralJournalAccountEntryRecIdCollection = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LedgerPostingGeneralJournalControllerSim</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>LedgerPostingGeneralJournalControllerSim</c> class.
    /// </returns>
    public static LedgerPostingGeneralJournalControllerSim_IT construct()
    {
        return new LedgerPostingGeneralJournalControllerSim_IT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReferenceCollection</Name>
				<Source><![CDATA[
    private RecordSortedList createReferenceCollection()
    {
        RecordSortedList newList = new RecordSortedList(tableNum(GeneralJournalEntrySim_IT));
        newList.sortOrder(fieldNum(GeneralJournalEntrySim_IT, RecId));

        return newList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the specified information to the collection.
    /// </summary>
    /// <param name="_transferLevel">
    ///    The transfer level of the information.
    /// </param>
    /// <param name="_generalJournalEntry">
    ///    The general journal entry information.
    /// </param>
    /// <param name="_generalJournalAccountEntry">
    ///    The general journal account entry information.
    /// </param>
    /// <param name="_ledgerEntryJournal">
    ///    The ledger entry journal information.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The ledger entry information would have been summarized to a different GeneralJournalEntrySim record.
    /// </exception>
    public void add(
        DetailSummary _transferLevel,
        GeneralJournalEntrySim_IT _generalJournalEntry,
        GeneralJournalAccountEntrySim_IT _generalJournalAccountEntry,
        LedgerEntryJournalSim_IT _ledgerEntryJournal)
    {
        // LedgerEntryJournalSim depends on nothing
        this.addJournal(_ledgerEntryJournal);

        // GeneralJournalEntrySim depends on nothing
        GeneralJournalEntrySim_IT referenceCopy = this.addReference(_generalJournalEntry);

        if (_transferLevel == DetailSummary::Detail)
        {
            // GeneralJournalAccountEntrySim depends on GeneralJournalEntrySim
            GeneralJournalAccountEntrySim_IT lineCopy = this.addLine(
                _transferLevel,
                detailGeneralJournalAccountEntryCollection,
                detailGeneralJournalAccountEntryRecIdCollection,
                referenceCopy,
                _generalJournalAccountEntry);
        }
        else
        {
            // GeneralJournalAccountEntrySim depends on GeneralJournalEntrySim
            GeneralJournalAccountEntrySim_IT lineCopy = this.addLine(
                _transferLevel,
                summaryGeneralJournalAccountEntryCollection,
                summaryGeneralJournalAccountEntryRecIdCollection,
                referenceCopy,
                _generalJournalAccountEntry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJournal</Name>
				<Source><![CDATA[
    private void addJournal(LedgerEntryJournalSim_IT _ledgerEntryJournal)
    {
        if (ledgerEntryJournal.JournalNumber == '')
        {
            ledgerEntryJournal = _ledgerEntryJournal;
        }
        else if (ledgerEntryJournal.JournalNumber != _ledgerEntryJournal.JournalNumber)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // do nothing if non-empty journal numbers match
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReference</Name>
				<Source><![CDATA[
    private GeneralJournalEntrySim_IT addReference(GeneralJournalEntrySim_IT _generalJournalEntry)
    {
        // GeneralJournalEntrySim, Reference, and Header all refer to the GeneralJournalEntrySim table
        GeneralJournalEntrySim_IT referenceCopy;
        boolean success;

        if (_generalJournalEntry.RecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        referenceCopy.RecId = _generalJournalEntry.RecId;

        if (generalJournalEntryCollection.find(referenceCopy))
        {
            referenceCopy.data(_generalJournalEntry);
            success = generalJournalEntryCollection.ins(referenceCopy, true);

            // RecordSortedList.Ins always returns false after a find so assert it is false
            Debug::assert(!success);
        }
        else
        {
            referenceCopy.data(_generalJournalEntry);
            success = generalJournalEntryCollection.ins(referenceCopy);
            Debug::assert(success);
        }

        return referenceCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    private GeneralJournalAccountEntrySim_IT addLine(
        DetailSummary _transferLevel,
        RecordSortedList _lineCollection,
        Set _tempLineIdCollection,
        GeneralJournalEntrySim_IT _generalJournalEntry,
        GeneralJournalAccountEntrySim_IT _generalJournalAccountEntry)
    {
        // GeneralJournalAccountEntrySim and Line refer to the GeneralJournalAccountEntry table
        GeneralJournalAccountEntrySim_IT lineCopy;
        boolean success;
        

        if ((_transferLevel == DetailSummary::Summary) && (_generalJournalAccountEntry.RecId != 0))
        {
            // specifying the RecId when in summary is not allowed because it would have to be ignored
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        lineCopy.data(_generalJournalAccountEntry);
        lineCopy.GeneralJournalEntry = _generalJournalEntry.RecId;

        if (_transferLevel == DetailSummary::Detail && lineCopy.RecId == 0)
        {
            // no summarization

            // assign a temporary record ID even if it has a
            // record ID to make sure we don't get a duplicate
            lineCopy.RecId = this.getNextTemporaryRecId();

            success = _lineCollection.ins(lineCopy);
            Debug::assert(success);

            Debug::assert(!_tempLineIdCollection.in(lineCopy.RecId));

            _tempLineIdCollection.add(lineCopy.RecId);

            this.incrementCountForRecId(lineCountByHeader, lineCopy.GeneralJournalEntry);
        }
        else
        {
            // summarization

            // convert the sort fields to a temporary record ID so that incoming
            // records with duplicate record ID values are appropriately combined
            // or kept separate which is important for ledger entry record linking


            if (summaryGeneralJournalAccountEntryToTempLineId.exists([lineCopy.LedgerDimension, lineCopy.TransactionCurrencyCode, lineCopy.AllocationLevel, lineCopy.IsCorrection, lineCopy.PostingType, lineCopy.GeneralJournalEntry, lineCopy.RecId]))
            {
                lineCopy.RecId = summaryGeneralJournalAccountEntryToTempLineId.lookup([lineCopy.LedgerDimension, lineCopy.TransactionCurrencyCode, lineCopy.AllocationLevel, lineCopy.IsCorrection, lineCopy.PostingType, lineCopy.GeneralJournalEntry, lineCopy.RecId]);
            }
            else
            {
                RefRecId tempLineId = this.getNextTemporaryRecId();

                summaryGeneralJournalAccountEntryToTempLineId.insert([lineCopy.LedgerDimension, lineCopy.TransactionCurrencyCode, lineCopy.AllocationLevel, lineCopy.IsCorrection, lineCopy.PostingType, lineCopy.GeneralJournalEntry, lineCopy.RecId], tempLineId);

                lineCopy.RecId = tempLineId;
            }

            if (_lineCollection.find(lineCopy))
            {
                lineCopy.TransactionCurrencyAmount += _generalJournalAccountEntry.TransactionCurrencyAmount;
                lineCopy.AccountingCurrencyAmount += _generalJournalAccountEntry.AccountingCurrencyAmount;
                lineCopy.ReportingCurrencyAmount += _generalJournalAccountEntry.ReportingCurrencyAmount;

                lineCopy.Quantity += _generalJournalAccountEntry.Quantity;

                success = _lineCollection.ins(lineCopy, true);

                // RecordSortedList.Ins always returns false after a find so assert it is false
                Debug::assert(!success);
            }
            else
            {
                Debug::assert(!_tempLineIdCollection.in(lineCopy.RecId));

                _tempLineIdCollection.add(lineCopy.RecId);

                success = _lineCollection.ins(lineCopy);
                Debug::assert(success);

                this.incrementCountForRecId(lineCountByHeader, lineCopy.GeneralJournalEntry);
            }
        }

        return lineCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextTemporaryRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a temporary record ID.
    /// </summary>
    /// <returns>
    /// A temporary record ID.
    /// </returns>
    /// <remarks>
    /// The values start at one to avoid conflict with actual record ID values that
    /// are provided by callers.
    /// </remarks>
    public RecId getNextTemporaryRecId()
    {
        nextTempRecId++;

        return nextTempRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the information to the general journal.
    /// </summary>
    public void transfer()
    {
        ttsbegin;

        this.transferJournals();

        this.transferReferences();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferJournals</Name>
				<Source><![CDATA[
    private void transferJournals()
    {
        if (ledgerEntryJournal.JournalNumber == '')
        {
            ledgerEntryJournal = null;
        }
        else
        {
            // create the permanent LedgerEntryJournal record
            ledgerEntryJournal.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferReferences</Name>
				<Source><![CDATA[
    private void transferReferences()
    {
        // GeneralJournalEntry, Reference, and Header all refer to the GeneralJournalEntry table
        GeneralJournalEntrySim_IT generalJournalEntry;
        List parallelReferenceCollection = new List(Types::Int64);

        boolean haveRecord = generalJournalEntryCollection.first(generalJournalEntry);

        while (haveRecord)
        {
            generalJournalEntry.JournalNumber = journalNumberNumberSeq.num();

            this.validateGeneralJournalEntrySim(generalJournalEntry);

            // set the LedgerEntryJournal FK (may be empty)
            generalJournalEntry.LedgerEntryJournal = ledgerEntryJournal.RecId;

            boolean success = generalJournalEntryCollection.ins(generalJournalEntry, true);

            // RecordSortedList.ins always returns false for an update so assert it is false
            Debug::assert(!success);

            // capture the temp RecId values in order
            parallelReferenceCollection.addEnd(generalJournalEntry.RecId);

            haveRecord = generalJournalEntryCollection.next(generalJournalEntry);
        }

        // create the permanent GeneralJournalEntry records
        generalJournalEntryCollection.insertDatabase();

        Debug::assert(generalJournalEntryCollection.len() == parallelReferenceCollection.elements());

        RecordInsertList subledgerVoucherLinkList = new RecordInsertList(tableNum(SubledgerVoucherGeneralJournalEntrySim_IT));

        Map tempHeaderIdToHeaderCollection = new Map(Types::Int64, Types::Record);
        Map tempHeaderIdToSubledgerVoucherLinkCollection = new Map(Types::Int64, Types::Record);

        ListEnumerator parallelEnumerator = parallelReferenceCollection.getEnumerator();

        // go through the main collection and parallel collection in parallel
        // because together we can determine the perm RecId to temp RecId mapping
        haveRecord = generalJournalEntryCollection.first(generalJournalEntry);
        boolean haveRecordId = parallelEnumerator.moveNext();

        while (haveRecord && haveRecordId)
        {
            RefRecId tempHeaderId = parallelEnumerator.current();

            // create the temporary record ID to record mappings
            tempHeaderIdToHeaderCollection.insert(tempHeaderId, generalJournalEntry);

            generalJournalEntryRecIdValues.insert(
                [generalJournalEntry.SubledgerVoucher, generalJournalEntry.AccountingDate],
                generalJournalEntry.RecId);
            SubledgerVoucherGeneralJournalEntrySim_IT subledgerVoucherLink;
            subledgerVoucherLink.Voucher = generalJournalEntry.SubledgerVoucher;
            subledgerVoucherLink.VoucherDataAreaId = generalJournalEntry.SubledgerVoucherDataAreaId;
            subledgerVoucherLink.AccountingDate = generalJournalEntry.AccountingDate;
            subledgerVoucherLink.GeneralJournalEntry = generalJournalEntry.RecId;
            subledgerVoucherLinkList.add(subledgerVoucherLink);

            tempHeaderIdToSubledgerVoucherLinkCollection.insert(tempHeaderId, subledgerVoucherLink);

            haveRecord = generalJournalEntryCollection.next(generalJournalEntry);
            haveRecordId = parallelEnumerator.moveNext();
        }

        // create the permanent SubledgerVoucherGeneralJournalEntry records
        subledgerVoucherLinkList.insertDatabase();


        this.transferLines(
            DetailSummary::Detail,
            detailGeneralJournalAccountEntryCollection,
            tempHeaderIdToHeaderCollection,
            tempHeaderIdToSubledgerVoucherLinkCollection);

        this.transferLines(
            DetailSummary::Summary,
            summaryGeneralJournalAccountEntryCollection,
            tempHeaderIdToHeaderCollection,
            tempHeaderIdToSubledgerVoucherLinkCollection);

        LedgerPostingProcessorSim_IT ledgerPostingProcessor = LedgerPostingProcessorSim_IT::Instance();

        haveRecord = generalJournalEntryCollection.first(generalJournalEntry);

        while (haveRecord)
        {
            ledgerPostingProcessor.addGeneralJournalEntrySimRecId(generalJournalEntry.RecId);

            haveRecord = generalJournalEntryCollection.next(generalJournalEntry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGeneralJournalEntrySim</Name>
				<Source><![CDATA[
    private void validateGeneralJournalEntrySim(GeneralJournalEntrySim_IT _generalJournalEntry)
    {
        if (_generalJournalEntry.JournalNumber == '')
        {
            throw error("@SYS24569");
        }

        if (!_generalJournalEntry.AccountingDate)
        {
            throw error("@GeneralLedger:JournalMissingAccountingDate");
        }

        if (!_generalJournalEntry.Ledger)
        {
            throw error("@GeneralLedger:JournalMissingLedger");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGeneralJournalAccountEntrySim</Name>
				<Source><![CDATA[
    private void validateGeneralJournalAccountEntrySim(GeneralJournalAccountEntrySim_IT _generalJournalAccountEntry)
    {
        if (!_generalJournalAccountEntry.GeneralJournalEntry)
        {
            throw error("@GeneralLedger:TransactionMissingGeneralJournalEntry");
        }

        if (!_generalJournalAccountEntry.LedgerDimension)
        {
            throw error("@GeneralLedger:TransactionMissingLedgerDimension");
        }

        if (!_generalJournalAccountEntry.TransactionCurrencyCode)
        {
            throw error("@GeneralLedger:TransactionMissingCurrencyCode");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferLines</Name>
				<Source><![CDATA[
    // GeneralJournalAccountEntry and Line refer to the GeneralJournalAccountEntry table
    private void transferLines(
        DetailSummary _transferLevel,
        RecordSortedList _lineCollection,
        Map _tempHeaderIdToHeaderCollection,
        Map _tempHeaderIdToSubledgerVoucherLinkCollection)
    {
        Map currentLineCountByHeader = new Map(Types::Int64, Types::Int64);
        Map lineIdToTempHeaderIdCollection = new Map(Types::Int64, Types::Int64);
        Map tempLineIdToLineIdCollection = new Map(Types::Int64, Types::Int64);
        Map tempLineIdToTempHeaderIdCollection = new Map(Types::Int64, Types::Int64);
        Set lineCreatedForHeader = new Set(Types::Int64);

        RecordSortedList newLineCollection = new RecordSortedList(tableNum(GeneralJournalAccountEntrySim_IT));
        newLineCollection.sortOrder(fieldNum(GeneralJournalAccountEntrySim_IT, RecId));
        GeneralJournalAccountEntrySim_IT line;
        boolean haveRecord = _lineCollection.first(line);
        boolean success;

        while (haveRecord)
        {
            int64 currentLine = this.incrementCountForRecId(currentLineCountByHeader, line.GeneralJournalEntry);
            int64 lineCount = lineCountByHeader.lookup(line.GeneralJournalEntry);

            if (line.TransactionCurrencyAmount != 0 ||
                line.AccountingCurrencyAmount != 0 ||
                line.ReportingCurrencyAmount != 0 ||
                line.Quantity != 0 ||
                (currentLine == lineCount &&
                !lineCreatedForHeader.in(line.GeneralJournalEntry)))
            {
                // the line will be created because at least one amount field has a value or it is the only line for the header
                lineCreatedForHeader.add(line.GeneralJournalEntry);

                tempLineIdToTempHeaderIdCollection.insert(line.RecId, line.GeneralJournalEntry);

                GeneralJournalEntrySim_IT generalJournalEntry = _tempHeaderIdToHeaderCollection.lookup(line.GeneralJournalEntry);
                line.GeneralJournalEntry = generalJournalEntry.RecId;

                this.validateGeneralJournalAccountEntrySim(line);

                if (line.LedgerAccount == ''|| line.MainAccount == 0)
                {
                    DimensionAttributeValueCombination dimAttrValueCombo;
                    select firstOnly DisplayValue, MainAccount from dimAttrValueCombo
                        where dimAttrValueCombo.RecId == line.LedgerDimension;

                    line.LedgerAccount = dimAttrValueCombo.DisplayValue;
                    line.MainAccount = dimAttrValueCombo.MainAccount;
                }

                // update the internal values because insert has no override
                line.calculateInternalValues();

                success = newLineCollection.ins(line);
                Debug::assert(success);
            }

            haveRecord = _lineCollection.next(line);
        }

        List parallelRecIdCollection = new List(Types::Int64);

        haveRecord = newLineCollection.first(line);
        while (haveRecord)
        {
            // capture the temp RecId values in order
            parallelRecIdCollection.addEnd(line.RecId);

            haveRecord = newLineCollection.next(line);
        }

        if (!TransactionlogUpdateTTSControl::Instance().isInvoked())
        {
            TransactionlogUpdateTTSControl::Instance().invoke();
        }

        // create the permanent GeneralJournalAccountEntry records
        newLineCollection.insertDatabase();

        Debug::assert(newLineCollection.len() == parallelRecIdCollection.elements());

        ListEnumerator parallelEnumerator = parallelRecIdCollection.getEnumerator();

        haveRecord = newLineCollection.first(line);
        success = parallelEnumerator.moveNext();

        while (haveRecord && success)
        {
            RefRecId tempLineId = parallelEnumerator.current();
            RefRecId tempHeaderId = tempLineIdToTempHeaderIdCollection.lookup(tempLineId);

            GeneralJournalEntrySim_IT generalJournalEntry = _tempHeaderIdToHeaderCollection.lookup(tempHeaderId);
            SubledgerVoucherGeneralJournalEntrySim_IT subledgerVoucherLink = _tempHeaderIdToSubledgerVoucherLinkCollection.lookup(tempHeaderId);

            lineIdToTempHeaderIdCollection.insert(line.RecId, tempHeaderId);
            tempLineIdToLineIdCollection.insert(tempLineId, line.RecId);

            haveRecord = newLineCollection.next(line);
            success = parallelEnumerator.moveNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementCountForRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increments the count value in a specified map for a specified record ID key.
    /// </summary>
    /// <param name="_countMap">
    /// The specified map.
    /// </param>
    /// <param name="_recIdKey">
    /// The specified record ID key.
    /// </param>
    /// <returns>
    /// The updated count for the record ID key.
    /// </returns>
    /// <remarks>
    /// The value is used as the count.
    /// </remarks>
    private int64 incrementCountForRecId(Map _countMap, RecId _recIdKey)
    {
        int64 value;

        if (_countMap.exists(_recIdKey))
        {
            value = _countMap.lookup(_recIdKey) + 1;
        }
        else
        {
            value = 1;
        }

        _countMap.insert(_recIdKey, value);

        return value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>