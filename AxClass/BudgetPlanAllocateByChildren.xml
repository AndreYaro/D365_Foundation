<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocateByChildren</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanAllocateByChildren</c> class manages the budget allocation from
/// budget plans to its associated parent budget plan.
/// </summary>
public class BudgetPlanAllocateByChildren extends BudgetPlanAllocateByPlan
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTargetTransactionCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction currency code for the target budget plan line.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The source <c>BudgetPlanLine</c> record to be used.
    /// </param>
    /// <returns>
    /// The transaction currency code for the target budget plan line.
    /// </returns>
    protected CurrencyCode getTargetTransactionCurrencyCode(BudgetPlanLine _sourceBudgetPlanLine)
    {
        BudgetPlanCurrencyCode currencyCode;

        if (BudgetPlanningConfiguration::find().SkipCurrencyConversion
            && this.doesHeaderLayoutContainEditableCurrencyElement(_sourceBudgetPlanLine.BudgetPlanHeader))
        {
            currencyCode =_sourceBudgetPlanLine.TransactionCurrencyCode;
        }
        else
        {
            currencyCode = this.getBudgetPlanHeaderCurrency(_sourceBudgetPlanLine.BudgetPlanHeader);
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(BudgetPlanAllocateRequest _budgetPlanAllocateRequest)
    {
        super(_budgetPlanAllocateRequest);

        targetBudgetPlanHeaderRecId = parentBudgetPlanHeader.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the allocation of the set of <c>BudgetPlanLine</c> records.
    /// </summary>
    /// <remarks>
    /// Deletes the existing <c>BudgetPlanLine</c> records in the parent
    /// budget plan prior to allocate new budget plan lines.
    /// </remarks>
    protected void process()
    {
        BudgetPlanLine                  localBudgetPlanLine;
        NoYes                           canEditParentBudgetPlan;

        canEditParentBudgetPlan = BudgetPlanLayoutHelper::canEditBudgetPlanForScenario(
                                        parentBudgetPlanHeader.RecId,
                                        targetBudgetPlanScenarioRecId);

        // Skip validation when called during allocation schedule event.
        if (canEditParentBudgetPlan == NoYes::No && this.parmIsCalledFromForm())
        {
            error("@Budget:UneditableDestinationPlan");
        }
        else
        {
            if (!budgetPlanLineRecIds.empty())
            {
                ttsBegin;

                if (this.canDeleteExistingTargetLines())
                {
                    // Delete target lines if they already exist
                    delete_from localBudgetPlanLine
                        where localBudgetPlanLine.BudgetPlanHeader    == targetBudgetPlanHeaderRecId
                            && localBudgetPlanLine.BudgetPlanScenario == targetBudgetPlanScenarioRecId;
                }

                super();

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>