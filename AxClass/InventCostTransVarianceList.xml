<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostTransVarianceList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>inventCostTransVarianceList</c> represents a more specialized form of a
///    <c>recordSortedList</c>, which is used to hold the <c>inventCostTransVariance</c> records.
/// </summary>
/// <remarks>
///    This class will be used by the <c>inventCost</c> framework to handle the adding of the
///    <c>inventCostTransVariance</c> records. It provides some functions to add and summarize
///    <c>inventCostTransVariance</c> records into the
///    <c>costTransVarianceList</c><c>recordSortedList</c>.This class will be stored in the
///    <c>inventCostTransVarianceMap</c> class together with a primary key for an <c>inventCostTrans</c>
///    record.
/// </remarks>

class InventCostTransVarianceList
{
    // This class is representing a more specialized form of a recordSortedList.
    RecordSortedList    costTransVarianceList;

    // Only a recordSortedList that has been initialized with the inventCostTransVariance.InventCostTransRefRecId field in
    // the sort order can be written to the database
    boolean             isFinal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an <c>InventCostTransVariance</c> record to the <c>RecordSortedList</c> object.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    The <c>InventCostTransVariance</c> record that is to be added.
    /// </param>
    /// <remarks>
    ///    When the record that is to be added is already found in the list, the <c>costAmount</c> field will
    ///    be summed up.
    /// </remarks>
    public void add(InventCostTransVariance  _inventCostTransVariance)
    {
        InventCostTransVariance     inventCostTransVariance;

        // First, try to get the record that should be added out of the costTransList
        inventCostTransVariance.initFromInventCostTransVariance(_inventCostTransVariance);

        boolean found = this.find(inventCostTransVariance);

        if (found)
        {
            // Ensure we are not mixing posted and not posted values
            if (inventCostTransVariance.IsPosted != _inventCostTransVariance.IsPosted)
            {
                throw error("@SYS86990");
            }

            // If the record was found, the qty fields should have been set, so now add the qty
            // <GEERU>
            inventCostTransVariance.addCostAmount      (_inventCostTransVariance.CostAmount,       _inventCostTransVariance.CostAmountSecCur_RU);
            inventCostTransVariance.addCostAmountPosted(_inventCostTransVariance.CostAmountPosted, _inventCostTransVariance.CostAmountPostedSecCur_RU);
            // </GEERU>
        }
        else
        {
            inventCostTransVariance = _inventCostTransVariance;
        }

        // Due to the fact that the cost amount has be come zero, check this field
        if (inventCostTransVariance.CostAmount != 0 ||
            inventCostTransVariance.CostAmountPosted != 0 ||
            // <GEERU>
            inventCostTransVariance.CostAmountSecCur_RU != 0       ||
            inventCostTransVariance.CostAmountPostedSecCur_RU != 0 ||
            // </GEERU>
            inventCostTransVariance.Split == NoYes::Yes)
        {
            // (Re)Insert the record to the list
            this.insert(inventCostTransVariance);
        }
        else
        {
            // Record is or has become zero ==> remove it from the list
            this.delete(inventCostTransVariance);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total cost amount for the variance.
    /// </summary>
    /// <returns>
    ///    The total cost amount for the variance.
    /// </returns>
    CostAmount costAmount()
    {
        InventCostTransVariance     variance;
        CostAmount                  costAmount;

        boolean found = this.first(variance);
        while (found)
        {
            if (variance.mustPost())
            {
                costAmount    += variance.CostAmount;
            }
            found = this.next(variance);
        }
        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total cost amount posted for the variance.
    /// </summary>
    /// <returns>
    ///    The total cost amount posted for the variance.
    /// </returns>
    CostAmount costAmountPosted()
    {
        InventCostTransVariance     variance;
        CostAmount                  costAmountPosted;

        boolean found = this.first(variance);
        while (found)
        {
            if (variance.mustPost())
            {
                costAmountPosted    += variance.CostAmountPosted;
            }
            found = this.next(variance);
        }
        return costAmountPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes an <c>InventCostTransVariance</c> record from the <c>RecordSortedList</c> object.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    The <c>InventCostTransVariance</c> record that is to be deleted.
    /// </param>
    /// <returns>
    ///    The return value of the <c>del</c> method from the <c>recordSortedList</c> class.
    /// </returns>
    /// <remarks>
    ///    The <c>del</c> method of the <c>RecordSortedList</c> class is called to remove the given record
    ///    from the <c>RecordSortedList</c> object.
    /// </remarks>

    public boolean delete(InventCostTransVariance _inventCostTransVariance)
    {
        return costTransVarianceList.del(_inventCostTransVariance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds an <c>InventCostTransVariance</c> record in the <c>RecordSortedList</c> object.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    The <c>InventCostTransVariance</c> record that is to be found.
    /// </param>
    /// <returns>
    ///    The return value of the <c>find</c> method from the <c>RecordSortedList</c> class.
    /// </returns>
    /// <remarks>
    ///    The <c>find</c> method of the <c>RecordSortedList</c> class is called to find the specified record
    ///    in the <c>RecordSortedList</c> object.
    /// </remarks>

    public boolean find(InventCostTransVariance _inventCostTransVariance)
    {
        return costTransVarianceList.find(_inventCostTransVariance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the cursor of the <c>RecordSortedList</c> object to the element in the first position.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    An instance of the <c>InventCostTransVariance</c> table where the first record of the
    ///    <c>CostTransVarianceList</c> is stored.
    /// </param>
    /// <returns>
    ///    The return value of the <c>first</c> method from the <c>RecordSortedList</c> class.
    /// </returns>
    /// <remarks>
    ///    The <c>first </c>method of the <c>recordSortedList</c> class is called to find the first record in
    ///    the <c>RecordSortedList</c> object.
    /// </remarks>

    public boolean first(InventCostTransVariance _inventCostTransVariance)
    {
        return costTransVarianceList.first(_inventCostTransVariance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>RecordSortedList</c> object.
    /// </summary>
    /// <remarks>
    ///    The
    ///    <c>
    ///       RecordSortedList
    ///    </c>
    ///     object is initialized using the following sort order:
    ///    <list type="number">
    ///       <item>
    ///          <description>Level</description>
    ///       </item>
    ///       <item>
    ///          <description>CostGroupId</description>
    ///       </item>
    ///       <item>
    ///          <description>Split</description>
    ///       </item>
    ///       <item>
    ///          <description>VarianceType</description>
    ///       </item>
    ///       <item>
    ///          <description>Dimension</description>
    ///       </item>
    ///    </list>
    ///     This is the default sort order for a
    ///    <c>
    ///       RecordSortedList
    ///    </c>
    ///     object in the InventCost framework.
    /// </remarks>

    protected void init()
    {
        costTransVarianceList = new RecordSortedList(tableNum(InventCostTransVariance));
        costTransVarianceList.sortOrder(fieldNum(InventCostTransVariance, Level),
                                        fieldNum(InventCostTransVariance, CostGroupId),
                                        fieldNum(InventCostTransVariance, Split),
                                        fieldNum(InventCostTransVariance, VarianceType),
                                        fieldNum(InventCostTransVariance, DefaultDimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFinal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new <c>RecordSortedList</c> object.
    /// </summary>
    /// <remarks>
    ///    The
    ///    <c>
    ///       RecordSortedList
    ///    </c>
    ///     object is initialized using the following sort order:
    ///    <list type="number">
    ///       <item>
    ///          <description>InventCostTransRefRecId</description>
    ///       </item>
    ///       <item>
    ///          <description>Level </description>
    ///       </item>
    ///       <item>
    ///          <description>CostGroupId</description>
    ///       </item>
    ///       <item>
    ///          <description>Split</description>
    ///       </item>
    ///       <item>
    ///          <description>VarianceType</description>
    ///       </item>
    ///       <item>
    ///          <description>Dimension </description>
    ///       </item>
    ///    </list>
    ///     This type of list is only used when the
    ///    <c>
    ///       InventCostTrans
    ///    </c>
    ///     record belonging to the
    ///    <c>
    ///       InventCostTransVariance
    ///    </c>
    ///     records has already been created. This is currently the case in the
    ///    <c>
    ///       InventCostUpdate
    ///    </c>
    ///     class.
    /// </remarks>

    protected void initFinal()
    {
        costTransVarianceList = new RecordSortedList(tableNum(InventCostTransVariance));
        costTransVarianceList.sortOrder(fieldNum(InventCostTransVariance, InventCostTransRefRecId),
                                        fieldNum(InventCostTransVariance, Level),
                                        fieldNum(InventCostTransVariance, CostGroupId),
                                        fieldNum(InventCostTransVariance, Split),
                                        fieldNum(InventCostTransVariance, VarianceType),
                                        fieldNum(InventCostTransVariance, DefaultDimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a given <c>InventCostTransVariance</c> record to the <c>RecordSortedList</c> object.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    The <c>InventCostTransVariance</c> record that is to be inserted.
    /// </param>
    /// <param name="_updateIfExist">
    ///    A Boolean value that is passed to the <c>ins</c> method of the <c>RecordSortedList</c> class;
    ///    optional.
    /// </param>
    /// <returns>
    ///    The return value of the <c>ins</c> method for the <c>RecordSortedList</c> class.
    /// </returns>
    /// <remarks>
    ///    The <c>ins</c> method of the <c>RecordSortedList</c> class will be called to insert the given
    ///    record in the <c>RecordSortedList</c> object.
    /// </remarks>

    public boolean insert(InventCostTransVariance _inventCostTransVariance,
                       boolean                 _updateIfExist = true)
    {
        return costTransVarianceList.ins(_inventCostTransVariance, _updateIfExist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the <c>InventCostTransVarianceList</c> object to the database by calling the
    ///    <c>insertDatabase</c> method of the <c>RecordSortedList</c> class.
    /// </summary>

    public void insertDatabase()
    {
        if (isFinal == false)
        {
            // a recordSortedList containing records
            // without a reference to the inventCostTrans record can not be
            // written to the database
            throw error("@SCM:InventCostTransVarianceSavedWithoutReferenceToInventCostTrans");
        }

        costTransVarianceList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>length</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of records in the <c>RecordSortedList</c> object.
    /// </summary>
    /// <returns>
    ///    The return value of the <c>len</c> method for the <c>RecordSortedList</c> class.
    /// </returns>
    /// <remarks>
    ///    The <c>len</c> method of the <c>RecordSortedList</c> class is called to get the number of records
    ///    from the <c>RecordSortedList</c> object.
    /// </remarks>

    public int length()
    {
        return costTransVarianceList.len();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventCostTransVarianceList</c> class.
    /// </summary>
    /// <param name="_isFinal">
    ///    A Boolean flag that indicates whether the class is to be initialized with a <c>RecordSortedList</c>
    ///    object that includes the <c>recId</c> of the <c>InventCostTransVariance</c> records; optional.
    /// </param>
    /// <remarks>
    ///    This method is protected to ensure that the <c>construct</c> method is used.The default use of this
    ///    method should be with <c>isFinal = false</c>. Only when the <c>InventCostTrans</c> record for which
    ///    the variances should be stored already have a <c>recId</c> value use <c>isFinal = true</c>.
    /// </remarks>

    protected void new(boolean _isFinal = false)
    {
        // Store this value to determine, if the list can be written to the database or not
        isFinal = _isFinal;

        if (isFinal)
        {
            // Only for the list, that will be used for inserting the records in the
            // database use a list including the inventCostTransRefRecId in the sort order
            this.initFinal();
        }
        else
        {
            // Default uses list without inventCostTransRefRecId
            this.init();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the cursor of the <c>RecordSortedList</c> object to the next position.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    An instance of the <c>InventCostTransVariance</c> table where the next record of the
    ///    <c>CostTransVarianceList</c> object should be stored.
    /// </param>
    /// <returns>
    ///    The return value of the <c>next</c> method for the <c>RecordSortedList</c> class.
    /// </returns>
    /// <remarks>
    ///    The <c>next</c> method of the <c>RecordSortedList</c> class is called to find the next record in
    ///    the <c>RecordSortedList</c> object.
    /// </remarks>

    public boolean next(InventCostTransVariance _inventCostTransVariance)
    {
        return costTransVarianceList.next(_inventCostTransVariance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Summarizes a given variance list to the <c>RecordSortedList</c> object.
    /// </summary>
    /// <param name="_sourceList">
    ///    The <c>InventCostTransVarianceList</c> object that is to be added.
    /// </param>
    /// <remarks>
    ///    Each record that is stored in <paramref name="_sourceList" /> is added by calling the <c>add</c>
    ///    method.
    /// </remarks>

    public void summarize(InventCostTransVarianceList _sourceList)
    {
        InventCostTransVariance  sourceVariance;
        boolean          found;

        if (_sourceList && _sourceList.length() != 0)
        {
            found = _sourceList.first(sourceVariance);
            while (found)
            {
                // Add this record to the costTransVarianceList
                this.add(sourceVariance);

                found = _sourceList.next(sourceVariance);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostTransVarianceList construct(boolean _isFinal = false)
    {
        return new InventCostTransVarianceList(_isFinal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventCostTransVarianceList</c> class and inserts the
    ///    <c>InventCostTransVariance</c> records either from memory or from the database.
    /// </summary>
    /// <param name="_inventCostTrans">
    ///    The <c>InventCostTrans </c>record for which the <c>InventCostTransVariancesList</c> class is
    ///    created.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventCostTransVarianceList</c> class that contains all
    ///    <c>InventCostTransVariance</c> records belonging to a given <c>InventCostTrans</c> record.
    /// </returns>
    /// <remarks>
    ///    This method will add the <c>InventCostTransVariance</c> records to the <c>RecordSortedList</c>
    ///    object for the <c>InventCostTransVarianceList</c> class. Since records can be stored in memory, the
    ///    class instance is either retrieved from the <c>InventCostUpdate</c> class by calling the call the
    ///    <c>InventCostUpdate.getCostTransVarianceList</c> method, or it is newly created with all the
    ///    records that are stored in the database.
    /// </remarks>

    public static InventCostTransVarianceList newFromInventCostTrans(InventCostTrans        _inventCostTrans)
    {
        InventCostTransVarianceList   inventCostTransVarianceList;
        InventCostTransVariance       inventCostTransVariance;

        // The requested record can live in 2 different places
        // It can not be in the global record sorted list or already has been written to the database

        // 1.) Get variance from memory
        inventCostTransVarianceList = InventCostUpdateGlobal::Instance().inventCostUpdate().getCostTransVarianceList(_inventCostTrans);

        if (_inventCostTrans.RecId && (!inventCostTransVarianceList || inventCostTransVarianceList.length() == 0))
        {
            if (!inventCostTransVarianceList)
            {
                inventCostTransVarianceList = InventCostTransVarianceList::construct();
            }

            // Record was not found in the inventCostUpdate framework
            // 2.) Try to select it from the database
            while select * from inventCostTransVariance
                where inventCostTransVariance.InventCostTransRefRecId == _inventCostTrans.RecId
            {
                inventCostTransVarianceList.insert(inventCostTransVariance);
        }
        }
        return inventCostTransVarianceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromList</Name>
				<Source><![CDATA[
    public static InventCostTransVarianceList newFromList(InventCostTransVarianceList   _fromList,
                                                          Qty                           _qty,
                                                          DimensionDefault             _dimension)
    {
        InventCostTransVariance         costTransVariance;

        // Assign list to get same sort order
        InventCostTransVarianceList inventCostTransVarianceList = InventCostTransVarianceList::construct();

        // Step through from list
        if (_fromList)
        {
            boolean found = _fromList.first(costTransVariance);
            while (found)
            {
                // Set new cost amount
                costTransVariance.CostAmount = costTransVariance.CostAmount * _qty;
                costTransVariance.DefaultDimension  = _dimension;
                // Update in list
                inventCostTransVarianceList.add(costTransVariance);
                found = _fromList.next(costTransVariance);
            }
        }

        return inventCostTransVarianceList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>