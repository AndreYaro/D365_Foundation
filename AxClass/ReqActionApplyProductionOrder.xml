<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqActionApplyProductionOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class applies an action to a <c>ReqTrans</c> record which is a production order.
/// </summary>
[ReqRefTypeFactoryAttribute(ReqRefType::Production)]
class ReqActionApplyProductionOrder extends ReqActionApplyToOrder
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyActionToReferencedOrder</Name>
				<Source><![CDATA[
    public void applyActionToReferencedOrder()
    {
        ProdTable prodTable;
        boolean   deliveryDateChanged   = false;
        boolean   quantityChanged       = false;

        prodTable = ProdTable::find(reqTrans.RefId, true);

        if (!prodTable.RecId)
        {
            throw error(strFmt("@SYS12725", reqTrans.RefId));
        }

        if (reqTrans.ActionType == ActionType::Cancel)
        {
            if (!prodTable.validateDelete())
            {
                throw error("@SYS18447");
            }

            prodTable.delete(false);
        }
        else
        {
            if (!prodTable.status().formFieldsActive())
            {
                throw error(strFmt("@SYS22041", prodTable.ProdStatus));
            }

            if (reqTrans.ActionDays != 0)
            {
                prodTable.DlvDate = reqTrans.ActionDate;
                deliveryDateChanged = true;
            }

            if (reqTrans.ActionQtyAdd)
            {
                prodTable.QtySched += reqTrans.ActionQtyAdd;
                prodTable.PdsCWBatchSched += PdsCatchWeight::cwQty(prodTable.ItemId, reqTrans.ActionQtyAdd);

                InventMovement::bufferSetRemainQty(prodTable);
                quantityChanged = true;
            }

            if (!prodTable.validateWrite())
            {
                throw error("@SYS18447");
            }

            prodTable.update();

            // When quantity or delivery date changes the order should be re-estimated/re-scheduled.
            if ((deliveryDateChanged || quantityChanged) && !prodTable.status().isBefore(ProdStatus::CostEstimated) )
            {
                if (reqActionApply.parmReestimateProduction())
                {
                    prodTable.reestimate();
                }

                if (reqActionApply.parmRescheduleProduction() && prodTable.SchedStatus != ProdSchedStatus::None)
                {
                    if (deliveryDateChanged)
                    {
                        var schedulingParameters = this.getProductionReschedulingParameters(prodTable, reqTrans.ActionDate);
                        prodTable.rescheduleWithParameters(schedulingParameters);
                    }
                    else
                    {
                        prodTable.reschedule();
                    }

                    reqTrans.reread();
                }
            }

            this.updateReqTrans();
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductionReschedulingParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the scheduling parameters for the production order.
    /// </summary>
    /// <param name = "_prodTable">A production order.</param>
    /// <param name = "_schedDate">A scheduling date.</param>
    /// <remarks>The scheduling direction will be backwards from the scheduling date, to ensure that the order will be ready for the action date.</remarks>
    private ProdParmScheduling getProductionReschedulingParameters(ProdTable _prodTable, SchedDate _schedDate)
    {
        ProdParmScheduling prodParmScheduling = _prodTable.getLastOrDefaultSchedulingParameters();

        prodParmScheduling.SchedDate = _schedDate;
        prodParmScheduling.SchedDirection = ProdSchedDirection::BackwardFromSchedDate;

        return prodParmScheduling;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>