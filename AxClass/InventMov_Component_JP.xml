<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Component_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Inventory movement for assembling and disassembling entry.
/// </summary>
[InventMovementFactoryAttribute(tableStr(AssetComponent_JP))]
class InventMov_Component_JP extends InventMovement
{
    AssetComponent_JP   assetComponent;
    AssetBook           assetBook;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets account for balance sheet.
    /// </summary>
    /// <returns>
    /// The account for balance sheet.
    /// </returns>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::PurchReceipt));
            }
            else
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::SalesIssue));
            }
        }
        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventPostingItemLedgerDimensionParameters</Name>
				<Source><![CDATA[
    public InventPostingItemLedgerDimensionParameters createInventPostingItemLedgerDimensionParameters(
        InventAccountType   _inventAccountType,
        ItemGroupId         _itemGroupId = this.inventTable().itemGroupId())
    {
        InventPostingItemLedgerDimensionParameters searchParameters = super(_inventAccountType, _itemGroupId);

        searchParameters.InventDim_RU = this.inventdim();

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets operation account.
    /// </summary>
    /// <returns>
    /// The operation account.
    /// </returns>
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (!cacheAccountOperations)
        {
            cacheAccountOperations = AssetLedgerAccounts::assetOffsetLedgerDimension(
                assetBook.AssetId,
                assetBook.BookId,
                this.assetTransType(),
                assetBook.PostingProfile);
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset transaction type.
    /// </summary>
    /// <returns>
    /// The asset transaction type.
    /// </returns>
    private AssetTransType assetTransType()
    {
        return (assetComponent.Assembling ? AssetTransType::Acquisition : AssetTransType::WriteDownAdj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheAccountOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the operation account.
    /// </summary>
    /// <param name="_cacheAccountOperations">
    /// The operation account.
    /// </param>
    /// <returns>
    /// The operation account.
    /// </returns>
    public LedgerDimensionDefaultAccount cacheAccountOperations(LedgerDimensionDefaultAccount _cacheAccountOperations = cacheAccountOperations)
    {
        cacheAccountOperations = _cacheAccountOperations;
        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeAutoRepAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the movement can be reported as finished automatically.
    /// </summary>
    /// <returns>
    ///     Always false.
    /// </returns>
    public boolean canBeAutoRepAsFinished()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventLocations</Name>
				<Source><![CDATA[
    public boolean canBeOnAllInventLocations()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && assetComponent.RecId)
        {
            InventTransOriginAssetComponent_JP::writeOriginOwnerRelationship(
                assetComponent.RecId,
                originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the set of financial dimensions to use when posting the scrap.
    /// </summary>
    /// <returns>
    ///    The set of financial dimensions.
    /// </returns>
    public DimensionDefault defaultDimension()
    {
        List                dimensionSources = new List(Types::Class);

        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(assetBook.DefaultDimension));
        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(assetComponent.DefaultDimension));

        return LedgerDimensionDefaultingEngine::getDefaultDimension(dimensionSources);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invent dimension Id.
    /// </summary>
    /// <returns>
    /// The invent dimension Id.
    /// </returns>
    public InventDimId inventDimId()
    {
        return assetComponent.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item Id.
    /// </summary>
    /// <returns>
    /// The item Id.
    /// </returns>
    public ItemId  itemId()
    {
        return assetComponent.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    public boolean mustBeAutoReserved()
    {
        return AssetParameters::find().AssetAssemblingReservation_JP == AssetAssemblingReservation::Automatic
            && this.inventTable().inventItemType().canBeAutoReserved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns flag if the movement needs to be post physically.
    /// </summary>
    /// <returns>
    /// Always false.
    /// </returns>
    public boolean mustBeBookedPhysically()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the quarantine control is required.
    /// </summary>
    /// <returns>
    ///    Always false.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeSameTransSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether all inventory transactions for this movement must have the same sign.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public boolean mustBeSameTransSign()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>InventMov_Component_JP</c> class.
    /// </summary>
    /// <param name="_assetComponent">
    /// A record of <c>AssetComponent_JP</c> table.
    /// </param>
    /// <param name="_inventType">
    /// An <c>InventType</c> instance.
    /// </param>
    public void new(AssetComponent_JP   _assetComponent,
                    InventType          _inventType = new InventType(_assetComponent))
    {
        assetComponent = _assetComponent;
        assetBook = AssetBook::find(assetComponent.AssetId, AssetComponent_JP::getAssemblingAssetBookId(assetComponent.AssetId));
        super(assetComponent, _inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMovement</c> class that is based on the
    ///    original record of <c>AssetComponent_JP</c> record.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventMovement</c> class.
    /// </returns>
    public InventMovement newMovement_Orig()
    {
        if (!assetComponent.RecId)
        {
            return null;
        }
        return InventMov_Component_JP::newFromAssetComponent(assetComponent.orig());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the balance sheet ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    public LedgerPostingType postingBalanceSheet()
    {
        LedgerPostingType result;

        if (this.transQty() >= 0)
        {
            result = LedgerPostingType::InventReceipt;
        }
        else
        {
            result = LedgerPostingType::InventIssue;
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the operations ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use a value of
    ///    <c>LedgerPostingType::LedgerJournal</c> for posting.
    /// </remarks>
    public LedgerPostingType postingOperations()
    {
        return LedgerPostingType::LedgerJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the remaining physical quantity.
    /// </summary>
    /// <returns>
    ///    The remaining physical quantity.
    /// </returns>
    public InventQty remainPhysical()
    {
        return this.transQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the remaining physical quantity.
    /// </summary>
    /// <returns>
    ///    The remaining physical quantity.
    /// </returns>
    public InventQty reserveQty()
    {
        if (this.transSign() > 0)
            return 0;

        return this.transQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the transaction quantity in the <c>AssetComponent_JP</c> table.
    /// </summary>
    /// <param name="_qtyInvent">
    ///    The new transaction quantity stated in inventory unit.
    /// </param>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public void setTransQty(InventQty  _qtyInvent)
    {
        assetComponent.Qty = - _qtyInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction date for the movement.
    /// </summary>
    /// <returns>
    ///    The transaction date.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public TransDate transDate()
    {
        return assetComponent.TransDate ? assetComponent.TransDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the issue transaction ID from the <c>AssetComponent_JP</c> table.
    /// </summary>
    /// <returns>
    ///    The issue inventory blocking transaction ID.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventTransId transId()
    {
        return assetComponent.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory transaction quantity.
    /// </summary>
    /// <returns>
    ///    The inventory transaction quantity.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventQty transQty()
    {
        return assetComponent.Qty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the transaction sign for the movement.
    /// </summary>
    /// <returns>
    ///    -1 if the transaction quantity is assembling; otherwise, 1.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public Integer transSign()
    {
        return (assetComponent.Assembling ? -1 : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the transaction type of the movement.
    /// </summary>
    /// <returns>
    ///    An <c>InventTransType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventTransType transType()
    {
        return InventTransType::Assembling_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAssetComponent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_Component_JP</c> class that is based on the
    ///    specified record.
    /// </summary>
    /// <param name="_assetComponent">
    ///    The <c>RAssetScrap</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Component_JP</c> class.
    /// </returns>
    public static InventMov_Component_JP newFromAssetComponent(AssetComponent_JP _assetComponent)
    {
        return new InventMov_Component_JP(_assetComponent);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>