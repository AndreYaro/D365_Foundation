<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPostInvoiceJobNumberSequenceListCleanup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Cleans up old obsolete <c>CustPostInvoiceJobNumberSequenceList</c> records.
/// </summary>
[SysObsoleteAttribute('CustPostInvoiceJobNumberSequenceListCleanup is deprecated and should not be used', false, 30\06\2022)]
public static class CustPostInvoiceJobNumberSequenceListCleanup
{
    public static const int cleanupHoursInterval = 48;
    public static const int smallIntervalSeconds = 10;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>quickCleanup</Name>
				<Source><![CDATA[
    internal static void quickCleanup(int _timeAllottedSeconds = 30)
    {
        System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();

        int64 elapsedMs;

        stopwatch.Start();
       
        if (appl.ttsLevel() == 0)
        {
            // do a loop of single cleanups until out of time or nothing more to clean
            while (elapsedMs < _timeAllottedSeconds * 1000)
            {
                try
                {
                    if(!CustPostInvoiceJobNumberSequenceListCleanup::quickCleanupOneIteration())
                    {
                        return;
                    }
                }
                catch (Exception::TransientSqlConnectionError)
                {
                    // Note the unusual handling pattern for intermittent exceptions.
                    // This is because cleanup is designed to be called routinely in the course of processing and if one of the calls
                    // cannot do the job for any intermittent reason, we want to proceed with other operations
                    // (which do have their own normal backoff/wait/retry handling for their portion of the process only)
                    // this cleanup is simply postponed until next time any invoice batches are posted.

                    // Not logging telemetry here because 
                    // 1:transient DB error is not something we can solve logically, 
                    // 2:don't risk the log writing itself suffering an issue and bringing down the whole posting in a situation where the environment is unstable
                    return;
                }
                catch (Exception::Deadlock)
                {
                    CustPostInvoiceJobPreallocatedNumberSequenceTelemetryLogger::logInformation(classStr(CustPostInvoiceJobNumberSequenceListCleanup), strFmt('Cleanup abandoned due to deadlock.'));
                    return;
                }
                catch (Exception::UpdateConflict)
                {
                    CustPostInvoiceJobPreallocatedNumberSequenceTelemetryLogger::logInformation(classStr(CustPostInvoiceJobNumberSequenceListCleanup), strFmt('Cleanup abandoned due to update conflict.'));
                    return;
                }

                elapsedMs = stopwatch.get_ElapsedMilliseconds();
            }
        }
        else
        {
            // do a single cleanup, since we can't do small transactions
            CustPostInvoiceJobNumberSequenceListCleanup::quickCleanupOneIteration();
            CustPostInvoiceJobPreallocatedNumberSequenceTelemetryLogger::logInformation(classStr(CustPostInvoiceJobNumberSequenceListCleanup), 'Cleanup called with nonzero ttslevel.');
        }

        CustPostInvoiceJobPreallocatedNumberSequenceTelemetryLogger::logInformation(classStr(CustPostInvoiceJobNumberSequenceListCleanup), strFmt('Cleanup ran out of time: %1 seconds elapsed', elapsedMs));
    }

]]></Source>
			</Method>
			<Method>
				<Name>quickCleanupOneIteration</Name>
				<Source><![CDATA[
    internal static boolean quickCleanupOneIteration()
    {
        boolean retOfNSL = CustPostInvoiceJobNumberSequenceListCleanup::quickCleanupOneIterationNumberSequenceList();
        boolean retOfAssociation = CustPostInvoiceJobNumberSequenceListCleanup::quickCleanupOneIterationInvoiceNumberSequenceList();

        return retOfNSL || retOfAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quickCleanupOneIterationInvoiceNumberSequenceList</Name>
				<Source><![CDATA[
    private static boolean quickCleanupOneIterationInvoiceNumberSequenceList()
    {
        CustPostInvoiceJobNumberSequenceList invoiceList;
        select firstonly minof(CreatedDateTime) from invoiceList;
        utcdatetime targetCleanDate = invoiceList.CreatedDateTime;

        if (!targetCleanDate)
        {
            // there are no entries to process
            return false;
        }

        utcdatetime maximumCleanDate = DateTimeUtil::addHours(DateTimeUtil::utcNow(), -cleanupHoursInterval);
        utcdatetime targetPlusInterval = DateTimeUtil::addSeconds(targetCleanDate, smallIntervalSeconds);

        if (targetCleanDate > maximumCleanDate)
        {
            // nothing to clean - oldest transaction is too recent to clean up
            return false;
        }

        ttsbegin;
        delete_from invoiceList where invoiceList.CreatedDateTime >= targetCleanDate && invoiceList.CreatedDateTime <= targetPlusInterval;
        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quickCleanupOneIterationNumberSequenceList</Name>
				<Source><![CDATA[
    protected static boolean quickCleanupOneIterationNumberSequenceList()
    {
        // No-op Chain of Command extension point
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>