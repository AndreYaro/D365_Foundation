<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_TransportTaxCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class rTax25RegCalc_TransportTaxCalculation extends RTax25RegCalc implements BatchRetryable
{
    RAssetStandardId    standardId;
    int                 periodMth, periodDivider;
    TransDate           dateFromPeriod;

    #define.round(0.01)
    #define.roundFactor(0.0001)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAssets</Name>
				<Source><![CDATA[
    private void addAssets(RAssetTable _rAssetTable,
		TaxCode _taxCode,
        RTax25RegisterLineNum64 _refLineNumber = 0)
    {
        #define.midMonth(15)

        Yr                        usefulLifeYr;
        Months                    usefulLifeMonth, exceptMonths;
        Percent                   percent;
        RAssetTaxAccountingFactor factor1, factor2, factorKp = 0;;
        RAssetAssessedAmount      calculatedTax, taxExemption, allowanceValue;
        RTax25TaxTable            rTax25TaxTable;
        RAssetStandards           rAssetStandards;
        RefRecId                  allowance;
        TransDate                 startDate, endDate;
        real                            ownedPart = 0;
        RAssetTransportTaxOwnedShare    ownedShare;
        TaxAuthority taxAuthorityId;
        RAssetLocationId locationId;
        BranchId_RU branchId;
    
        RAssetTaxAccountingFactor calculateFactor1()    // Kv
        {
            ;
            endDate = _rAssetTable.RegisterRemovalDate;
    
            endDate = (endDate && endDate < dateTo) ? endDate : dateTo;
            startDate = _rAssetTable.VehiclePlateDate > dateFromPeriod ?
                        _rAssetTable.VehiclePlateDate : dateFromPeriod;
    
            usefulLifeMonth = mthOfYr(endDate) - mthOfYr(startDate);
    
            if (dayOfMth(startDate) <= #midMonth)
            {
                usefulLifeMonth++;
            }
            if (dayOfMth(endDate) <= #midMonth)
            {
                usefulLifeMonth--;
            }

            if (_rAssetTable.VehiclePlateDate >= dateFromPeriod || endDate != dateTo)
                return usefulLifeMonth / periodMth;
            return 1;
        }
    
        void calculateFactors(RAssetTaxAllowanceHistory _last, RAssetTaxAllowanceHistory _current)  // Kl
        {
            RAssetAssessedAmount currentFactor;
            Months allowanceMonths;

            if (periodMth)
            {
                allowanceMonths = mthOfYr(_current.StartDate) - mthOfYr(_last.StartDate);

                if (dayOfMth(_last.StartDate) <= #midMonth)
                {
                    allowanceMonths++;
                }
                if (dayOfMth(_current.StartDate) <= #midMonth)
                {
                    allowanceMonths--;
                }

                currentFactor = allowanceMonths / periodMth;
            }

            if (_last.TaxAllowanceRecId && !_current.TaxAllowanceRecId)
            {
                allowance = _last.TaxAllowanceRecId;
                factor2 += currentFactor;
            }
        }
    
        void calculateHistoryFactors()
        {
            RAssetTaxAllowanceHistory     history, historyLast;
            boolean                       looped;
    
            select firstonly historyLast
                order by StartDate desc
                where historyLast.AssetId    == _rAssetTable.AccountNum &&
                      historyLast.StartDate  <= startDate;
    
            historyLast.StartDate = historyLast.StartDate < startDate ? startDate : historyLast.StartDate;
    
            while select history
                order by StartDate asc
                where history.AssetId    == _rAssetTable.AccountNum &&
                      history.StartDate  >  historyLast.StartDate   &&
                      history.StartDate  <= endDate
            {
                calculateFactors(historyLast, history);
                historyLast = history.data();
                looped      = true;
            }
            if (mthOfYr(endDate) != mthOfYr(historyLast.StartDate) ||
                (historyLast && !looped))
            {
                history           = null;
                history.StartDate = endDate;
                calculateFactors(historyLast, history);
            }

            taxExemption = round(_rAssetTable.TaxBase * percent * factor2 / periodDivider, #round);
        }
    
        RAssetAssessedAmount allowanceValue()
        {
            if (rTax25TaxTable.AllowanceReductionRateRecId)
            {
                if (percent < rTax25TaxTable.AllowanceReductionRateValue)
                    return calculatedTax;
                return calculatedTax - round(_rAssetTable.TaxBase * (percent - rTax25TaxTable.AllowanceReductionRateValue) * factor1 / periodDivider, #round);
            }
            else if (rTax25TaxTable.AllowanceDecreaseSumRecId)
            {
                if (rTax25TaxTable.AllowanceDecreaseSumValue > 100)
                    return calculatedTax;
                return round(calculatedTax * rTax25TaxTable.AllowanceDecreaseSumValue / 100, #round);
            }
            return 0;
        }
    
        container createContainer()
        {
            RAssetAssessedAmount taxDeductionValue;
            RAssetTaxAllowanceId taxDeductionID = (dateTo == DateTimeUtil::getEndOfYearDate(preferredLocale, dateTo)
                ? RAssetTaxAllowance::find(_rAssetTable.TaxDeductionRecId).TaxAllowanceId : '');
            RAssetAssessedAmount totalTax = calculatedTax - taxExemption - allowanceValue;

            if (taxDeductionID)
            {
                taxDeductionValue = _rAssetTable.TransportTaxDeductionValue;
                totalTax -= taxDeductionValue;
            }

            return ["", "", "",
                _rAssetTable.AccountNum, _rAssetTable.VehicleType, _rAssetTable.SerialNum,
                _rAssetTable.VehicleModel, _rAssetTable.VehiclePlateNum, _rAssetTable.VehiclePlateDate,
                _rAssetTable.RegisterRemovalDate, _rAssetTable.TaxBase,
                _rAssetTable.TaxBaseUnitId, usefulLifeYr, _rAssetTable.ReleaseYear, usefulLifeMonth, ownedShare, round(factor1, #roundFactor), percent,
                factorKp, calculatedTax, exceptMonths, round(factor2, #roundFactor),
                RAssetTaxAllowance::find(allowance).TaxAllowanceId, taxExemption,
                allowance ? '' : (rTax25TaxTable.AllowanceDecreaseSumRecId ?
                RAssetTaxAllowance::find(rTax25TaxTable.AllowanceDecreaseSumRecId).TaxAllowanceId :
                RAssetTaxAllowance::find(rTax25TaxTable.AllowanceReductionRateRecId).TaxAllowanceId),
                allowanceValue,
                taxDeductionID, taxDeductionValue,
                totalTax > 0 ? totalTax : 0.00,
                locationId,
                branchId,
                taxAuthorityId,
                _refLineNumber];
        }
    
        rAssetStandards = RAssetStandards::find(_rAssetTable.AccountNum, standardId);
        rTax25TaxTable  = RTax25TaxTable::find(RTax25TaxModule::Asset_RU, _taxCode);
    
        usefulLifeYr = real2int(_rAssetTable.usefulLife(dateFrom));
        percent = round(RAssetTransportTaxData::percent(_taxCode, dateFrom, _rAssetTable.TaxBase, usefulLifeYr), #round);
        factor1 = calculateFactor1();
        factorKp = RAssetTransportTaxFactorData::getValue(_rAssetTable.TransportTaxFactorGroupId, dateTo, _rAssetTable.usefulLife(dateTo));
        if (_rAssetTable.DenominatorShare)
        {
            ownedPart =_rAssetTable.NumeratorShare / _rAssetTable.DenominatorShare;
            ownedShare = int2str(_rAssetTable.NumeratorShare) + "@SYS35673" + int2str(_rAssetTable.DenominatorShare);
        }
        else
        {
            if (_rAssetTable.NumeratorShare)
            {
                throw error(strFmt("@RussianFixedAssets:DenominatorOfOwnedShareForFaIsZero", _rAssetTable.AccountNum));
            }
            else
            {
                ownedPart = 1;
                ownedShare = '1' + "@SYS35673" + '1';
            }
        }
        calculatedTax = round(_rAssetTable.TaxBase * percent * factor1 * factorKp * ownedPart / periodDivider, #round);
    
        calculateHistoryFactors();
        exceptMonths  = real2int(round(factor2 * periodMth, #round));
        if (! allowance)
        {
            allowanceValue = allowanceValue();
        }
  
        RAssetLocation rAssetLocation = RAssetLocation::find(_rAssetTable.location(dateTo));
        locationId = rAssetLocation.Location;
        branchId = rAssetLocation.BranchId;

        if (branchId)
        {
            taxAuthorityId = TaxAuthorityAddress::findByOKATO_RU(
                Branches_RU::find(branchId)
                    .vendTable()
                    .partyOKATOasOfDate_RU(dateTo)).TaxAuthority;
        }

        if (!taxAuthorityId)
        {
            taxAuthorityId = TaxAuthorityAddress::findByOKATO_RU(
                CompanyInfoHelper::partyOKATOasOfDate_RU(CompanyInfo::find(), dateTo)).TaxAuthority;
        }

        regQuery.addBodyRecord(0,
			createContainer(),
			_rAssetTable.TableId,
			_rAssetTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        RAssetTable         rAssetTable;
        Map                 sectionOrderMap = new Map(Types::Container, Types::Class);
        MapEnumerator       me;

        void insertMap(TaxCode _taxCode)
        {
            container   key;
            Set         rAssetTableSet;

            if (_taxCode)
            {
                key = [rAssetTable.findOKATO(_taxCode, dateTo),
                       RTax25TaxTable::find(RTax25TaxModule::Asset_RU, _taxCode).PaymentOrderBudgetReceiptClassCode,
                       _taxCode];

                if (sectionOrderMap.exists(key))
                {
                    rAssetTableSet = sectionOrderMap.lookup(key);
                }
                else
                {
                    rAssetTableSet = new Set(Types::Record);
                }
                rAssetTableSet.add(rAssetTable);
                sectionOrderMap.insert(key, rAssetTableSet);
            }
        }

        void fillSections()
        {
            boolean         outSection = false;
            SetEnumerator   se;
            Set             rAssetTableSet;
            TaxCode         taxCode;
            OKATO_RU        okato;

            PaymentOrderBudgetReceiptClassCode_RU pobrcc;

            [okato, pobrcc, taxCode] = me.currentKey();
            rAssetTableSet           = me.currentValue();

            if (!rAssetTableSet)
            {
                return;
            }
   
            RTax25RegisterLineNum64 refLineNumber;

            se = rAssetTableSet.getEnumerator();
            while (se.moveNext())
            {
                rAssetTable = se.current();

                if (!outSection)
                {
                    RTax25RegisterTrans_TransportTaxCalc transportTaxCalcHeader = regQuery.addBodyRecord(0, this.createHeader(okato, pobrcc, taxCode));
                    refLineNumber = transportTaxCalcHeader.LineNumber;
					outSection = true;
                }

                this.addAssets(rAssetTable, taxCode, refLineNumber);
            }
        }

        while select rAssetTable
            where rAssetTable.VehiclePlateDate    <= dateTo
              &&  rAssetTable.VehiclePlateDate
              && (rAssetTable.RegisterRemovalDate >= dateFrom
              || !rAssetTable.RegisterRemovalDate)
              &&  rAssetTable.TransportTaxCode
        {
            insertMap(rAssetTable.TransportTaxCode);
        }

        try
        {
            ttsbegin;

            super();

            me = sectionOrderMap.getEnumerator();
            while (me.moveNext())
            {
                fillSections();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container createHeader(OKATO_RU                              _okato,
                                     PaymentOrderBudgetReceiptClassCode_RU _pobrcC  = "",
                                     TaxCode                               _taxCode = "")
    {
        return [_okato, _pobrcC, _taxCode, "", "", "", "", "", dateNull(), dateNull(), 0., "", 0, 0, 0, "", 0., 0., 0., 0., 0, 0., "", 0., "", 0., "", 0., 0.];
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean ret;
    
        ret = super(_registerJournalTrans, _batch);
    
        standardId = RAssetParameters::standardIdDefault();
        this.initPeriodVariables();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPeriodVariables</Name>
				<Source><![CDATA[
    private void initPeriodVariables()
    {
        dateFromPeriod = dateFrom;

        if (dateTo == DateTimeUtil::getEndOfYearDate(preferredLocale, dateTo))
        {
            periodMth      = 12;
            dateFromPeriod = DateTimeUtil::getStartOfYearDate(preferredLocale, dateFrom);
        }
        else if (registerJournalTrans.PeriodType == RTax25PeriodType::HalfYear) // only first half year
        {
            periodMth = 6;
        }
        else if (dateTo == dateEndQtr(dateTo))
        {
            periodMth = 3;
        }
        else
        {
            periodMth = 1;
        }

        periodDivider = any2Int(12 / periodMth);
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodDivider</Name>
				<Source><![CDATA[
    private int periodDivider()
    {
        if (dateTo == DateTimeUtil::getEndOfYearDate(preferredLocale, dateTo))
            return 1;

        if (registerJournalTrans.PeriodType == RTax25PeriodType::HalfYear)
            return 2;

        if (dateTo == dateEndQtr(dateTo))
            return 4;

        return 12;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>