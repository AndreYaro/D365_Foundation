<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureSource_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FactureSource_RU
{
    str             jourRangeValue,
                    transRangeValue;

    Set             jourSet,
                    transSet;

    MenuFunction    func;
    FactureTrans_RU factureTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initRanges</Name>
				<Source><![CDATA[
    private void initRanges()
    {
        jourRangeValue  = this.set2range(jourSet);
        transRangeValue = this.set2range(transSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrans</Name>
				<Source><![CDATA[
    abstract public void initTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourRange</Name>
				<Source><![CDATA[
    final public str jourRange()
    {
        return jourRangeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuFunctionName</Name>
				<Source><![CDATA[
    abstract protected str menuFunctionName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common          _src,
                    FactureTrans_RU _tmpTrans = null,
                    Set             _jour     = new Set(typeName2Type(extendedTypeStr(recId))),
                    Set             _trans    = new Set(typeName2Type(extendedTypeStr(recId))))
    {
        jourSet  = _jour;
        transSet = _trans;

        if (_tmpTrans.isTmp())
        {
            factureTrans.setTmp();
            factureTrans.setTmpData(_tmpTrans);
        }
        else
        {
            factureTrans = _tmpTrans;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.initTrans();
        this.initRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>set2range</Name>
				<Source><![CDATA[
    #define.Braces("{}")
    private str set2range(Set _set)
    {
        return _set.elements() ? strrem(_set.toString(), #Braces) : SysQuery::valueEmptyString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaller</Name>
				<Source><![CDATA[
    protected void setCaller(Args _args)
    {
        _args.caller(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallerRecord</Name>
				<Source><![CDATA[
    protected void setCallerRecord(Args _args)
    {
        // do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>setObject</Name>
				<Source><![CDATA[
    protected void setObject(Args _args)
    {
        // do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>show</Name>
				<Source><![CDATA[
    protected void show()
    {
        Args         args = new Args();
        ;
        func = new MenuFunction(this.menuFunctionName(), MenuItemType::Display);
        this.setCaller(args);
        this.setCallerRecord(args);
        this.setObject(args);
        func.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRange</Name>
				<Source><![CDATA[
    public str transRange()
    {
        return transRangeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FactureSource_RU construct(Args _args)
    {
        FactureSource_RU    source;
        FactureJour_RU      jour;
        FactureTrans_RU     trans;

        if (! _args                                      ||
            ! _args.record()                             ||
            (_args.dataset() != tablenum(FactureJour_RU) &&
             _args.dataset() != tablenum(FactureTrans_RU)))
            throw error(strfmt("@SYS25821",
                               classstr(FactureSource_RU),
                               tablestr(FactureJour_RU),
                               tablestr(FactureTrans_RU)));

        switch (_args.dataset())
        {
            case tablenum(FactureJour_RU)  :
                jour   = _args.record();

                switch (jour.FactureType)
                {
                    case FactureType_RU::Invoice         :
                        switch (jour.Module)
                        {
                            case FactureModule_RU::Cust :
                                source = new FactureSourceJourCust_RU(jour, _args.caller().getFactureTrans());
                                break;
                            case FactureModule_RU::Vend :
                                source = new FactureSourceJourVend_RU(jour, _args.caller().getFactureTrans());
                                break;
                            default                     :
                                throw error(Error::wrongUseOfFunction(funcname()));
                        }
                        break;
                    case FactureType_RU::AmoutDifference   :
                    case FactureType_RU::ExchAdj           :
                    case FactureType_RU::AdvanceAdjustment :
                    case FactureType_RU::VATAdjustment     :
                        source = FactureSource_AmountDiff_RU::construct(jour);
                        break;
                    case FactureType_RU::AdvanceReport   :
                        source = new FactureSourceJourEmpl_RU(jour, _args.caller().getFactureTrans());
                        break;
                    case FactureType_RU::TaxCorrection   :
                        if (jour.vatTaxAgent)
                            source = new FactureSourceJourVATTaxPayment_RU(jour, _args.caller().getFactureTrans());
                        else
                            source = new FactureSourceJourTaxCorrection_RU(jour, _args.caller().getFactureTrans());
                        break;
                    case FactureType_RU::GTD   :
                        source = new FactureSourceCustomGTDJour_RU(jour, _args.caller().getFactureTrans());
                        break;
                    case FactureType_RU::CustomCorrection   :
                        source = new FactureSourceCustomCorrectionJour_RU(jour, _args.caller().getFactureTrans());
                        break;
                    default                              :
                        throw error("@GLS104736");
                }
                break;
            case tablenum(FactureTrans_RU) :
                trans  = _args.record();

                switch (trans.FactureLineType)
                {
                    case FactureLineType_RU::InvoiceLine      :
                    case FactureLineType_RU::Markup           :
                    case FactureLineType_RU::InvoiceRoundOff  :
                    case FactureLineType_RU::InvoiceEndDisc   :
                        switch (trans.Module)
                        {
                            case FactureModule_RU::Cust                     :
                            case FactureModule_RU::TaxCorrectionSales       :
                            case FactureModule_RU::TaxCorrectionPurch_Cust  :
                                source = FactureSourceTransCust_RU::newSource(trans);
                                break;
                            case FactureModule_RU::Vend                     :
                            case FactureModule_RU::TaxCorrectionPurch       :
                            case FactureModule_RU::TaxCorrectionSales_Vend  :
                                source = FactureSourceTransVend_RU::newSource(trans);
                                break;
                            default                     :
                                throw error(Error::wrongUseOfFunction(funcname()));
                        }
                        break;
                    case FactureLineType_RU::AdvanceReport    :
                        switch (trans.Module)
                        {
                            case FactureModule_RU::Empl :
                                source = FactureSourceTransEmpl_RU::newSource(trans);
                                break;
                            default                     :
                                throw error(Error::wrongUseOfFunction(funcname()));
                        }
                        break;
                    case FactureLineType_RU::TaxCorrection    :
                        switch (trans.Module)
                        {
                            case FactureModule_RU::TaxCorrectionPurch      :
                            case FactureModule_RU::TaxCorrectionSales      :
                            case FactureModule_RU::TaxCorrectionPurch_Cust :
                            case FactureModule_RU::TaxCorrectionSales_Vend :
                                if (FactureJour_RU::find(trans.FactureId, trans.Module).vatTaxAgent)
                                    source = FactureSourceTransVATTaxPayment_RU::newSource(trans);
                                else
                                    source = FactureSourceTransTaxCorrection_RU::newSource(trans);
                                break;
                            default                     :
                                throw error(Error::wrongUseOfFunction(funcname()));
                        }
                        break;
                    default                                   :
                        throw error("@GLS104820");
                }
                break;
        }

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FactureSource_RU source = FactureSource_RU::construct(_args);
        ;
        source.run();
        source.show();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>