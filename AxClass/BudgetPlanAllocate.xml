<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanAllocate</c> class manages the budget planning allocation process.
/// </summary>
abstract public class BudgetPlanAllocate
{
    BudgetPlanScenarioRecId          targetBudgetPlanScenarioRecId;
    Set                              budgetPlanLineRecIds;
    LegalEntityRecId                 legalEntityRecId;
    Factor                           factor;
    LineNum                          newLineNumFactor;
    LineNum                          currentLineNum;
    BudgetPlanScenario               targetBudgetPlanScenario;
    BudgetPlanCurrencyCode           sourceBudgetPlanCurrencyCode;
    BudgetPlanCurrencyCode           targetBudgetPlanCurrencyCode;
    Map                              currencyCodeCache = new Map(Types::Int64, Types::String);
    BudgetPlanCurrencyExchangeHelper budgetPlanCurrencyExchangeHelper = BudgetPlanCurrencyExchangeHelper::construct();
    LedgerRecId                      ledgerRecId;
    boolean                          isCalledFromForm;
    BudgetPlanLayoutRecId            currentLayoutRecId;
    Map                              headerLayoutCache = new Map(Types::Int64, Types::Enum);
    boolean                          appendLines;

    // Layout flags
    boolean matchAssetId;
    boolean matchBudgetClass;
    boolean matchComment;
    boolean matchIsNewRequest;
    boolean matchIsRecurring;
    boolean matchProjectId;
    boolean matchProposedAsset;
    boolean matchProposedProject;
    boolean matchPosition;
    boolean matchSourceDataAreaId;

    const TableName budgetPlanLineTableName = tableStr(BudgetPlanLine);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmIsCalledFromForm</Name>
				<Source><![CDATA[
    public boolean parmIsCalledFromForm(boolean _isCalledFromForm = isCalledFromForm)
    {
        isCalledFromForm = _isCalledFromForm;

        return isCalledFromForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentLayoutRecId</Name>
				<Source><![CDATA[
    public BudgetPlanLayoutRecId parmCurrentLayoutRecId(BudgetPlanLayoutRecId _currentLayoutRecId = currentLayoutRecId)
    {
        currentLayoutRecId = _currentLayoutRecId;

        return currentLayoutRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the new budget plan lines based on a source budget plan line.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The source <c>BudgetPlanLine</c> record to allocate.
    /// </param>
    abstract protected void createBudgetPlanLines(BudgetPlanLine _sourceBudgetPlanLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLayoutMatchFlags</Name>
				<Source><![CDATA[
    protected void setLayoutMatchFlags()
    {
        // Return quickly if a layout is not found.
        if (!currentLayoutRecId)
        {
            return;
        }

        BudgetPlanRowRecId assetElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, AssetId)).RecId;
        BudgetPlanRowRecId budgetClassElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, BudgetClass)).RecId;
        BudgetPlanRowRecId commentElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, Comment)).RecId;
        BudgetPlanRowRecId isNewRequestElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, IsNewRequest)).RecId;
        BudgetPlanRowRecId isRecurringElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, IsRecurring)).RecId;
        BudgetPlanRowRecId projectIdElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, ProjectId)).RecId;
        BudgetPlanRowRecId proposedAssetElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, ProposedAsset)).RecId;
        BudgetPlanRowRecId proposedProjectElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, ProposedProject)).RecId;
        BudgetPlanRowRecId positionElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, Position)).RecId;
        BudgetPlanRowRecId sourceDataAreaIdElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, SourceDataAreaId)).RecId;

        matchAssetId            = (BudgetPlanLayoutElement::findByLayoutElementDefinition(currentLayoutRecId, assetElementDefinitionRecId) != null);
        matchBudgetClass        = (BudgetPlanLayoutElement::findByLayoutElementDefinition(currentLayoutRecId, budgetClassElementDefinitionRecId) != null);
        matchComment            = (BudgetPlanLayoutElement::findByLayoutElementDefinition(currentLayoutRecId, commentElementDefinitionRecId) != null);
        matchIsNewRequest       = (BudgetPlanLayoutElement::findByLayoutElementDefinition(currentLayoutRecId, isNewRequestElementDefinitionRecId) != null);
        matchIsRecurring        = (BudgetPlanLayoutElement::findByLayoutElementDefinition(currentLayoutRecId, isRecurringElementDefinitionRecId) != null);
        matchProjectId          = (BudgetPlanLayoutElement::findByLayoutElementDefinition(currentLayoutRecId, projectIdElementDefinitionRecId) != null);
        matchProposedAsset      = (BudgetPlanLayoutElement::findByLayoutElementDefinition(currentLayoutRecId, proposedAssetElementDefinitionRecId) != null);
        matchProposedProject    = (BudgetPlanLayoutElement::findByLayoutElementDefinition(currentLayoutRecId, proposedProjectElementDefinitionRecId) != null);
        matchPosition           = (BudgetPlanLayoutElement::findByLayoutElementDefinition(currentLayoutRecId, positionElementDefinitionRecId) != null);
        matchSourceDataAreaId   = (BudgetPlanLayoutElement::findByLayoutElementDefinition(currentLayoutRecId, sourceDataAreaIdElementDefinitionRecId) != null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePrevAllocatedBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the previously allocated <c>BudgetPlanLine</c> records from the target budget plan scenario for the specified source <c>BudgetPlanLine</c> record.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The source <c>BudgetPlanLine</c> record for which to delete allocated lines.
    /// </param>
    protected void deletePrevAllocatedBudgetPlanLines(BudgetPlanLine _sourceBudgetPlanLine)
    {
        BudgetPlanLine  destinationBudgetPlanLine;

        delete_from destinationBudgetPlanLine
            where destinationBudgetPlanLine.BudgetPlanScenario      == targetBudgetPlanScenarioRecId
                && destinationBudgetPlanLine.BudgetPlanHeader       == _sourceBudgetPlanLine.BudgetPlanHeader
                && destinationBudgetPlanLine.SourceBudgetPlanLine   == _sourceBudgetPlanLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMatchingTargetBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>Deletes any matching target <c>BudgetPlanLine</c> records from the target budget plan scenario for the specified source <c>BudgetPlanLine</c> record.</summary>
    /// <param name="_sourceBudgetPlanLine"> The source <c>BudgetPlanLine</c> record to match the target lines to be deleted.</param>
    protected void deleteMatchingTargetBudgetPlanLines(BudgetPlanLine _sourceBudgetPlanLine)
    {
        // Return quickly if a layout is not found or source and target are the same.
        if (!currentLayoutRecId || _sourceBudgetPlanLine.BudgetPlanScenario == targetBudgetPlanScenarioRecId)
        {
            return;
        }

        this.deleteBudgetPlanLines(_sourceBudgetPlanLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionMatchClause</Name>
				<Source><![CDATA[
    /// <summary> Builds the an insert query to match the individual ledger dimensions from the source <c>BudgetPlanLine</c>. </summary>
    /// <param name = "_budgetPlanningLedgerDimension">The <c>LedgerDimensionBudgetPlanning</c> link value from the source <c>BudgetPlanLine</c>.</param>
    /// <returns> The sql string for the subquery. </returns>
    /// <remarks>
    /// Example of the string built:
    ///     insert into BudgetPlanDimensionMatch (LedgerDimension)
    ///     select TDAVC.RecId from DimensionAttributeValueCombination TDAVC
    ///     join DimensionAttributeValueCombination SDAVC
    ///     on SDAVC.DIMENSION$BUSINESSUNITVALUE = TDAVC.DIMENSION$BUSINESSUNITVALUE
    ///     and SDAVC.DIMENSION$DEPARTMENTVALUE = TDAVC.DIMENSION$DEPARTMENTVALUE
    ///     where SDAVC.RecId = sourceBudgetPlanLine.LedgerDimension)
    ///
    /// </remarks>
    protected str buildDimensionMatchClause(LedgerDimensionBudgetPlanning _budgetPlanningLedgerDimension, BudgetPlanDimensionMatch _dimensionMatch)
    {
        TableName   dimensionAttributeValueCombination = tableStr(DimensionAttributeValueCombination);
        TableName   dimensionMatchTableName = _dimensionMatch.getPhysicalTableName();
        str         dimensionMatchClause;
        str         targetTableAlias = 'TDAVC';
        str         sourceTableAlias = 'SDAVC';

        dimensionMatchClause += BudgetPlanningConstants::sqlINSERT + BudgetPlanningConstants::sqlINTO + dimensionMatchTableName;
        dimensionMatchClause += BudgetPlanningConstants::openBracket + fieldStr(BudgetPlanDimensionMatch, LedgerDimension) + BudgetPlanningConstants::closeBracket + BudgetPlanningConstants::space;
        dimensionMatchClause += BudgetPlanningConstants::sqlSELECT;
        dimensionMatchClause += targetTableAlias + BudgetPlanningConstants::dot + fieldStr(DimensionAttributeValueCombination, RecId);
        dimensionMatchClause += BudgetPlanningConstants::space + BudgetPlanningConstants::sqlFROM;
        dimensionMatchClause += dimensionAttributeValueCombination + BudgetPlanningConstants::space + targetTableAlias;
        dimensionMatchClause += BudgetPlanningConstants::space + BudgetPlanningConstants::sqlJOIN;
        dimensionMatchClause += dimensionAttributeValueCombination + BudgetPlanningConstants::space + sourceTableAlias;
        dimensionMatchClause += BudgetPlanningConstants::space + BudgetPlanningConstants::sqlON;

        BudgetPlanLayout        layout;
        DimensionAttribute      dimensionAttribute;
        DimensionHierarchyLevel dimensionHierarchyLevel;
        DimensionHierarchy      dimensionHierarchy;
        FieldName               dimensionAttributeValueCombinationFieldName;
        str                     onClause;

        // Add the dimension columns comparisons to the on clause
        while select DimensionValueColumnName from dimensionAttribute
            order by DimensionValueColumnName
            exists join dimensionHierarchyLevel
            where dimensionAttribute.RecId == dimensionHierarchyLevel.DimensionAttribute
                exists join dimensionHierarchy
                where dimensionHierarchy.RecId == dimensionHierarchyLevel.DimensionHierarchy
                    exists join layout
                    where layout.RecId               == currentLayoutRecId
                        && layout.DimensionHierarchy == dimensionHierarchy.RecId
        {
            dimensionAttributeValueCombinationFieldName = BudgetPlanLayoutManager::getSqlFieldName(dimensionAttributeValueCombination, dimensionAttribute.DimensionValueColumnName);

            onClause += (onClause == BudgetPlanningConstants::emptyString) ? onClause : BudgetPlanningConstants::sqlAND;
            onClause += sourceTableAlias + BudgetPlanningConstants::dot + dimensionAttributeValueCombinationFieldName;
            onClause += BudgetPlanningConstants::equal;
            onClause += targetTableAlias + BudgetPlanningConstants::dot + dimensionAttributeValueCombinationFieldName;
        }

        FieldName sqlDAVCPartitionFieldName = BudgetPlanLayoutManager::getSqlFieldName(dimensionAttributeValueCombination, fieldStr(DimensionAttributeValueCombination, Partition));

        dimensionMatchClause += onClause + BudgetPlanningConstants::space;
        dimensionMatchClause += BudgetPlanningConstants::sqlWHERE;
        dimensionMatchClause += sourceTableAlias + BudgetPlanningConstants::dot + fieldStr(DimensionAttributeValueCombination, RecId);
        dimensionMatchClause += BudgetPlanningConstants::equal + int642Str(_budgetPlanningLedgerDimension);
        dimensionMatchClause += BudgetPlanningConstants::sqlAND + BudgetPlanningConstants::space;
        dimensionMatchClause += sourceTableAlias + BudgetPlanningConstants::dot + sqlDAVCPartitionFieldName + BudgetPlanningConstants::equal + int642Str(getCurrentPartitionRecId());

        return dimensionMatchClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>BudgetPlanLine</c> records which match criteria from a source line.
    /// </summary>
    /// <param name = "_sourceBudgetPlanLine"> The source <c>BudgetPlanLine</c> record. </param>
    protected void deleteBudgetPlanLines(BudgetPlanLine _sourceBudgetPlanLine)
    {
        BudgetPlanLine budgetPlanLine;
        BudgetPlanDimensionMatch dimensionMatch;

        try
        {
            str sqlInsert = this.buildDimensionMatchClause(_sourceBudgetPlanLine.LedgerDimension, dimensionMatch);
            BudgetPlanUtility::executeDirectSql(sqlInsert);

            budgetPlanLine.skipDataMethods(true);
            budgetPlanLine.skipDeleteActions(true);

            delete_from budgetPlanLine
                where budgetPlanLine.BudgetPlanScenario == targetBudgetPlanScenarioRecId
                && budgetPlanLine.BudgetPlanHeader == _sourceBudgetPlanLine.BudgetPlanHeader
                    && (!matchAssetId
                        || budgetPlanLine.AssetId == _sourceBudgetPlanLine.AssetId)
                    && (!matchBudgetClass
                        || budgetPlanLine.BudgetClass == _sourceBudgetPlanLine.BudgetClass)
                    && (!matchComment
                        || budgetPlanLine.Comment == _sourceBudgetPlanLine.Comment)
                    && (!matchIsNewRequest
                        || budgetPlanLine.IsNewRequest == _sourceBudgetPlanLine.IsNewRequest)
                    && (!matchIsRecurring
                        || budgetPlanLine.IsRecurring == _sourceBudgetPlanLine.IsRecurring)
                    && (!matchPosition
                        || budgetPlanLine.Position == _sourceBudgetPlanLine.Position)
                    && (!matchProjectId
                        || budgetPlanLine.ProjectId == _sourceBudgetPlanLine.ProjectId)
                    && (!matchProposedAsset
                        || budgetPlanLine.ProposedAsset == _sourceBudgetPlanLine.ProposedAsset)
                    && (!matchProposedProject
                        || budgetPlanLine.ProposedProject == _sourceBudgetPlanLine.ProposedProject)
                    && (!matchSourceDataAreaId
                        || budgetPlanLine.SourceDataAreaId == _sourceBudgetPlanLine.SourceDataAreaId)
                exists join dimensionMatch
                    where dimensionMatch.LedgerDimension == budgetPlanLine.LedgerDimension;
        }
        catch (Exception::Error)
        {
            error("@Budget:BudgetPlan_AllocateError");
        }
        finally
        {
            dimensionMatch.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSourceBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>BudgetPlanLine</c> record when source and target scenarios are the same.
    /// </summary>
    /// <param name="_sourceBudgetPlanLineRecId">
    /// The <c>BudgetPlanLine</c> record ID to delete.
    /// </param>
    protected void deleteSourceBudgetPlanLine(BudgetPlanLineRecId _sourceBudgetPlanLineRecId)
    {
        if (this.canDeleteExistingTargetLines())
        {
            BudgetPlanLine sourceBudgetplanLine;

            if (targetBudgetPlanScenarioRecId ==
                BudgetPlanLine::find(_sourceBudgetPlanLineRecId).BudgetPlanScenario)
            {
                // Delete the budget plan lines when scenarios are the same.
                delete_from sourceBudgetplanLine
                    where sourceBudgetplanLine.RecId == _sourceBudgetPlanLineRecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteExistingTargetLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether <c>BudgetPlanLine</c> records existing with the target <c>BudgetPlanScenario</c> value should be deleted.
    /// </summary>
    /// <returns>
    /// true, if the existing <c>BudgetPlanLine</c> records from the target <c>BudgetPlanScenario</c> value should be deleted; otherwise, false.
    /// </returns>
    public boolean canDeleteExistingTargetLines()
    {
        return appendLines == false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSetSourceBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the association to the source budget plan line needs to be set.
    /// </summary>
    /// <param name="_sourceBudgetPlanLineRecId">
    /// The record ID of the source budget plan line record.
    /// </param>
    /// <param name="_newBudgetPlanLineRecId">
    /// The record ID of the new budget plan line record.
    /// </param>
    /// <returns>
    /// true if the association to the source budget plan line needs to be set; otherwise, false.
    /// </returns>
    protected abstract boolean doSetSourceBudgetPlanLine(BudgetPlanLineRecId _sourceBudgetPlanLineRecId, BudgetPlanLineRecId _newBudgetPlanLineRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the number of lines present that will be allocated.
    /// </summary>
    /// <returns>
    /// The number of lines present that will be allocated.
    /// </returns>
    abstract protected LineNum getNewLineCount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance of the <c>BudgetPlanAllocate</c> class.
    /// </summary>
    /// <param name="_budgetPlanAllocateRequest">
    /// The budget plan allocation request to process.
    /// </param>
    protected void initialize(BudgetPlanAllocateRequest _budgetPlanAllocateRequest)
    {
        budgetPlanLineRecIds          = _budgetPlanAllocateRequest.parmBudgetPlanLineRecIds();
        targetBudgetPlanScenarioRecId = _budgetPlanAllocateRequest.parmTargetBudgetPlanScenarioRecId();
        legalEntityRecId              = _budgetPlanAllocateRequest.parmLegalEntityRecId();
        factor                        = _budgetPlanAllocateRequest.parmFactor();
        isCalledFromForm              = _budgetPlanAllocateRequest.parmIsCalledFromForm();
        currentLayoutRecId            = _budgetPlanAllocateRequest.parmCurrentLayoutRecId();
        appendLines                   = _budgetPlanAllocateRequest.parmAppendLines();
        targetBudgetPlanScenario      = BudgetPlanScenario::find(targetBudgetPlanScenarioRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTargetBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the target <c>BudgetPlanLine</c> table buffer with the source <c>BudgetPlanLine</c> table buffer.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The source <c>BudgetPlanLine</c> table record.
    /// </param>
    /// <param name="_targetBudgetPlanLine">
    /// The target <c>BudgetPlanLine</c> table record.
    /// </param>
    protected void initTargetBudgetPlanLine(
        BudgetPlanLine _sourceBudgetPlanLine,
        BudgetPlanLine _targetBudgetPlanLine)
    {
        BudgetPlanUnitOfMeasureRecId budgetPlanUnitOfMeasureRecId;
        BudgetPlanHeader             targetBudgetPlanHeader = BudgetPlanHeader::find(_targetBudgetPlanLine.BudgetPlanHeader);
        ExchRate                     transactionAmountRateMultiplier = 0;

        // If source budget plan line is from monetary scenario and target scenario is non-monetary, In this case,
        // default unit of measure will be assigned to the target budget plan line.
        if (_sourceBudgetPlanLine.UnitOfMeasure == 0)
        {
            budgetPlanUnitOfMeasureRecId = BudgetPlanScenario::find(targetBudgetPlanScenarioRecId).UnitOfMeasure;
        }
        else
        {
            budgetPlanUnitOfMeasureRecId = _sourceBudgetPlanLine.UnitOfMeasure;
        }

        _targetBudgetPlanLine.clear();

        buf2Buf(_sourceBudgetPlanLine, _targetBudgetPlanLine);

        _targetBudgetPlanLine.BudgetPlanScenario = targetBudgetPlanScenarioRecId;
        _targetBudgetPlanLine.LineReferenceId    = newGuid();

        if (targetBudgetPlanHeader.RecId)
        {
            _targetBudgetPlanLine.BudgetPlanHeader = targetBudgetPlanHeader.RecId;
        }

        sourceBudgetPlanCurrencyCode = this.getSourceTransactionCurrencyCode(_sourceBudgetPlanLine);
        targetBudgetPlanCurrencyCode = this.getTargetTransactionCurrencyCode(_targetBudgetPlanLine);

        if (targetBudgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary)
        {
            _targetBudgetPlanLine.UnitOfMeasure           = 0;
            _targetBudgetPlanLine.TransactionCurrencyCode = targetBudgetPlanCurrencyCode;
            _targetBudgetPlanLine.EstimateType            = BudgetPlanEstimateType::Monetary;

            if (!ledgerRecId)
            {
                ledgerRecId = BudgetPlanningProcess::find(BudgetPlanHeader::find(_targetBudgetPlanLine.BudgetPlanHeader).BudgetPlanningProcess).Ledger;
            }

            budgetPlanCurrencyExchangeHelper.initializeCurrencyExchangeHelper(ledgerRecId);

            transactionAmountRateMultiplier = budgetPlanCurrencyExchangeHelper.calculateTransactionCurrencyAmountMultiplier(
                                                _sourceBudgetPlanLine.TransactionCurrencyAmount,
                                                sourceBudgetPlanCurrencyCode,
                                                targetBudgetPlanCurrencyCode,
                                                _targetBudgetPlanLine.EffectiveDate);

            _targetBudgetPlanLine.TransactionCurrencyAmount = CurrencyExchange::round(
                                                                  transactionAmountRateMultiplier * _sourceBudgetPlanLine.TransactionCurrencyAmount,
                                                                  _targetBudgetPlanLine.TransactionCurrencyCode);

            _targetBudgetPlanLine.TransactionUnitPrice = CurrencyExchangeHelper::price(
                                                            transactionAmountRateMultiplier * _sourceBudgetPlanLine.TransactionUnitPrice,
                                                            _targetBudgetPlanLine.TransactionCurrencyCode);

            _targetBudgetPlanLine.ReportingCurrencyAmount  = _sourceBudgetPlanLine.ReportingCurrencyAmount;
            _targetBudgetPlanLine.AccountingCurrencyAmount = _sourceBudgetPlanLine.AccountingCurrencyAmount;
        }
        else
        {
            _targetBudgetPlanLine.UnitOfMeasure             = budgetPlanUnitOfMeasureRecId;
            _targetBudgetPlanLine.TransactionUnitPrice      = 0;
            _targetBudgetPlanLine.TransactionCurrencyCode   = BudgetPlanningConstants::emptyString;
            _targetBudgetPlanLine.TransactionCurrencyAmount = 0;
            _targetBudgetPlanLine.ReportingCurrencyAmount   = 0;
            _targetBudgetPlanLine.AccountingCurrencyAmount  = 0;
            _targetBudgetPlanLine.EstimateType              = BudgetPlanEstimateType::Quantity;
        }

        // If the source scenario is not the same as the target scenario, we cannot copy the position source information since the position is tied to a scenario.
        if (_sourceBudgetPlanLine.RecId && (_sourceBudgetPlanLine.BudgetPlanScenario != targetBudgetPlanScenarioRecId))
        {
            _targetBudgetPlanLine.PositionScenario = 0;
            _targetBudgetPlanLine.Position         = 0;
        }

        // Determine if we should be setting the SourceBudgetPlanLine field, this determination is made by the child classes.
        if (this.doSetSourceBudgetPlanLine(_sourceBudgetPlanLine.RecId, _targetBudgetPlanLine.RecId))
        {
            _targetBudgetPlanLine.SourceBudgetPlanLine = _sourceBudgetPlanLine.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the allocation of a set of <c>BudgetPlanLine</c> records.
    /// </summary>
    protected void process()
    {
        BudgetPlanLineRecId     sourceBudgetPlanLineRecId;
        BudgetPlanLine          sourceBudgetPlanLine;
        SetEnumerator           budgetPlanLineRecIdEnumerator;

        if (budgetPlanLineRecIds.elements() > 0)
        {
            budgetPlanLineRecIdEnumerator = budgetPlanLineRecIds.getEnumerator();

            if (this.canDeleteExistingTargetLines())
            {
                this.setLayoutMatchFlags();
                while (budgetPlanLineRecIdEnumerator.moveNext())
                {
                    sourceBudgetPlanLineRecId = budgetPlanLineRecIdEnumerator.current();
                    sourceBudgetPlanLine      = BudgetPlanLine::find(sourceBudgetPlanLineRecId);

                    this.deletePrevAllocatedBudgetPlanLines(sourceBudgetPlanLine);
                    this.deleteMatchingTargetBudgetPlanLines(sourceBudgetPlanLine);
                }
            }

            ttsBegin;
            budgetPlanLineRecIdEnumerator.reset();
            while (budgetPlanLineRecIdEnumerator.moveNext())
            {
                sourceBudgetPlanLineRecId = budgetPlanLineRecIdEnumerator.current();
                sourceBudgetPlanLine      = BudgetPlanLine::find(sourceBudgetPlanLineRecId);

                this.createBudgetPlanLines(sourceBudgetPlanLine);
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the budget plan allocation for the specified budget plan allocation request.
    /// </summary>
    /// <param name="_budgetPlanAllocateRequest">
    /// The budget plan allocation request to process.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the alloaction request is not valid.
    /// </exception>
    public static void allocateLines(BudgetPlanAllocateRequest _budgetPlanAllocateRequest)
    {
        if (_budgetPlanAllocateRequest.validate())
        {
            BudgetPlanAllocate          budgetPlanAllocate;

            budgetPlanAllocate = BudgetPlanAllocate::newForAllocateType(_budgetPlanAllocateRequest.getBudgetPlanAllocateType());

            budgetPlanAllocate.initialize(_budgetPlanAllocateRequest);
            budgetPlanAllocate.process();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAllocateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetPlanAllocate</c> class.
    /// </summary>
    /// <param name="_budgetPlanAllocateType">
    /// The <c>BudgetPlanAllocateType</c> to determine which class to instantiate.
    /// </param>
    /// <returns>
    /// A new instance of the <c>BudgetPlanAllocate</c> class.
    /// </returns>
    public static BudgetPlanAllocate newForAllocateType(
        BudgetPlanAllocateType _budgetPlanAllocateType)
    {
        BudgetPlanAllocate budgetPlanAllocate;

        switch (_budgetPlanAllocateType)
        {
            case BudgetPlanAllocateType::AllocateByPeriod:
                budgetPlanAllocate = new BudgetPlanAllocateByPeriod();
                break;

            case BudgetPlanAllocateType::AllocateByDimension:
                budgetPlanAllocate = new BudgetPlanAllocateByDimension();
                break;

            case BudgetPlanAllocateType::AllocateByChildren:
                budgetPlanAllocate = new BudgetPlanAllocateByChildren();
                break;

            case BudgetPlanAllocateType::AllocateByParent:
                budgetPlanAllocate = new BudgetPlanAllocateByParent();
                break;

            case BudgetPlanAllocateType::AllocateByLedgerRule:
                budgetPlanAllocate = new BudgetPlanAllocateByLedgerAllocationRule();
                break;

            case BudgetPlanAllocateType::AllocateByAncestor:
                budgetPlanAllocate = new BudgetPlanAllocateByAncestor();
                break;
        }

        return budgetPlanAllocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetTransactionCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction currency code for the target budget plan line.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The source <c>BudgetPlanLine</c> record to be used.
    /// </param>
    /// <returns>
    /// The transaction currency code for the target budget plan line.
    /// </returns>
    protected BudgetPlanCurrencyCode getTargetTransactionCurrencyCode(BudgetPlanLine _sourceBudgetPlanLine)
    {
        BudgetPlanCurrencyCode currencyCode;

        if (this.doesHeaderLayoutContainEditableCurrencyElement(_sourceBudgetPlanLine.BudgetPlanHeader))
        {
            currencyCode =_sourceBudgetPlanLine.TransactionCurrencyCode;
        }
        else
        {
            currencyCode = this.getBudgetPlanHeaderCurrency(_sourceBudgetPlanLine.BudgetPlanHeader);
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTransactionCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction currency code for the source budget plan line.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The source <c>BudgetPlanLine</c> record to be used.
    /// </param>
    /// <returns>
    /// The transaction currency code for the source budget plan line.
    /// </returns>
    protected BudgetPlanCurrencyCode getSourceTransactionCurrencyCode(BudgetPlanLine _sourceBudgetPlanLine)
    {
        return _sourceBudgetPlanLine.TransactionCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanHeaderCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cached value of the <c>Curreny</c> field of the <c>BudgetPlanHeader</c> table.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> table.
    /// </param>
    /// <returns>currency code of the document header.</returns>
    protected BudgetPlanCurrencyCode getBudgetPlanHeaderCurrency(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanCurrencyCode currencyCode;

        if (!currencyCodeCache.exists(_budgetPlanHeaderRecId))
        {
            currencyCode = BudgetPlanHeader::find(_budgetPlanHeaderRecId).Currency;
            currencyCodeCache.insert(_budgetPlanHeaderRecId, currencyCode);
        }
        else
        {
            currencyCode = currencyCodeCache.lookup(_budgetPlanHeaderRecId);
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesHeaderLayoutContainEditableCurrencyElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the cached value of whether the layout contains the editable currency element.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> table.
    /// </param>
    /// <returns>true, if the layout contains the editable currency element; otherwise false.</returns>
    protected boolean doesHeaderLayoutContainEditableCurrencyElement(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        boolean doesContainCurrencyElement;

        if (!headerLayoutCache.exists(_budgetPlanHeaderRecId))
        {
            BudgetPlanLayoutRecId budgetPlanLayoutRecId = BudgetPlanHeader::find(_budgetPlanHeaderRecId).Layout;
            doesContainCurrencyElement = BudgetPlanLayoutHelper::doesLayoutContainEditableCurrencyElement(budgetPlanLayoutRecId);
            headerLayoutCache.insert(_budgetPlanHeaderRecId, doesContainCurrencyElement);
        }
        else
        {
            doesContainCurrencyElement = headerLayoutCache.lookup(_budgetPlanHeaderRecId);
        }

        return doesContainCurrencyElement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>