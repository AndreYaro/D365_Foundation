<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppServiceFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service class for communicating with warehouse app
/// </summary>
public class WHSMobileAppServiceFacade
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNextFormHandHeld</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next form to be displayed
    /// </summary>
    /// <param name = "_xml">xml representing the last displayed screen and entered data.</param>
    /// <param name = "_dataAreaId">DataAreaId in which the service should be run.</param>
    /// <returns>xml representing the next form and data to be displayed.</returns>
    public XML getNextFormHandHeld(XML _xml, DataAreaId _dataAreaId)
    {
        XML result;
        
        changecompany(_dataAreaId)
        {
            using (var instrumentationTask = WHSMobileRequestInstrumentationTask::newFromParams(WHSMobileDeviceClientType::MobileApp, _xml))
            using (var appInsightsActivity = WHSMobileAppNextPageRequestApplicationInsightsActivity::newFromParameters(_xml))
            {
                result = WHSWorkExecuteDisplay::getNextFormMobileApp(_xml);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns list of legal entities.
    /// </summary>
    /// <returns>
    /// List of <c>WHSCompanyInfo</c>.
    /// </returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(WHSCompanyInfo))]
    public List getCompanies()
    {
        List companiesInfo = new List(Types::AnyType);
        CompanyInfo companyInfo;
        while select Name, DataArea from companyInfo
            where companyInfo.OrganizationType == OMInternalOrganizationType::LegalEntity
        {
            WHSCompanyInfo currentCompanyInfo = new WHSCompanyInfo();
            currentCompanyInfo.name(companyInfo.Name);
            currentCompanyInfo.dataArea(companyInfo.DataArea);
            companiesInfo.addEnd(currentCompanyInfo);
        }
        return companiesInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns either company logo or product image that is requested.
    /// </summary>
    /// <param name="_imageDetails">
    /// Serialized object of <c>WHSMobileAppAttachedImageDetails</c>.
    /// </param>
    /// <param name="_thumbnail">
    /// Boolean that indicates size of the requested image.
    /// </param>
    /// <returns>
    /// The <c>WHSMobileAppImage</c> instance.
    /// </returns>
    public WHSMobileAppImage getImage(str _imageDetails, boolean _thumbnail)
    {
        using (var appInsightsActivity = WHSMobileAppImageRequestApplicationInsightsActivity::newFromParameters(_imageDetails, _thumbnail))
        {
            WHSMobileAppImageProvider imageProvider = WHSMobileAppImageProvider::newFromImageDetails(_imageDetails);
            if (imageProvider)
            {
                imageProvider.setThumbnailImageSize(_thumbnail);

                return imageProvider.getImage();
            }

            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the mobile device user settings.
    /// </summary>
    /// <param name = "_userId">User id who runs the service.</param>
    /// <param name = "_deviceBrand">Device brand id from which service is run.</param>
    /// <param name = "_deviceModel">Device model id from which service is run.</param>
    /// <param name = "_deviceClass">Device class type from which service is run.</param>
    /// <param name = "_dataAreaId">Data area Id in which the service should be run.</param>
    /// <returns>xml representing the mobile device user settings.</returns>
    public XML getUserSettings(WHSUserId _userId,
        WHSMobileAppDeviceBrandId _deviceBrand,
        WHSMobileAppDeviceModelId _deviceModel,
        WHSMobileAppDeviceClass _deviceClass,
        DataAreaId _dataAreaId)
    {
        XML result;
        
        changecompany(_dataAreaId)
        {
            result = WHSMobileAppUserDisplaySettingsProvider::construct().generateUserSettingsXML(_userId, _deviceBrand, _deviceModel, _deviceClass);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the mobile device user settings.
    /// </summary>
    /// <param name = "_xml">xml representing the mobile device user settings which should be changed.</param>
    /// <param name = "_dataAreaId">Data area Id in which the service should be run.</param>
    public void setUserSettings(XML _xml, DataAreaId _dataAreaId)
    {
        changecompany(_dataAreaId)
        {
            WHSMobileAppUserDisplaySettingsProvider::construct().setUserSettingsFromXML(_xml);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWMADependentFeature</Name>
				<Source><![CDATA[
    private boolean isWMADependentFeature(SysFlightName _featureName)
    {
        // Update this method whenever a new feature is used by WMA, and no later than when the feature class is deleted.
        switch (_featureName)
        {
            case identifierStr(WHSMobileIconAndUserSettingsFeature):
            case identifierStr(WHSMobileAppStepInstructionsFeature):
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the provided feature or flight is enabled.
    /// </summary>
    /// <param name = "_featureName">Name of the feature.</param>
    /// <param name = "_isFlight">True, if the feature name passed in is a flight; false otherwise, meaning it is a feature.</param>
    /// <returns>true, if the feature is enabled; false otherwise.</returns>
    public boolean isFeatureEnabled(SysFlightName _featureName, boolean _isFlight)
    {
        if (_isFlight)
        {
            return isFlightEnabled(_featureName);
        }

        var dictClass = SysDictClass::newName(_featureName);
        if (dictClass 
            && dictClass.hasStaticMethod(identifierStr(instance))
            && dictClass.hasObjectMethod(identifierStr(isEnabled))) 
        {
            var instance = dictClass.callStatic(identifierStr(instance));

            if (instance)
            {
                return dictClass.callObject(identifierStr(isEnabled), instance);
            }
        }

        if (this.isWMADependentFeature(_featureName))
        {
            // This is a feature that is no longer feature managed -> always enabled.
            return true;
        }

        // This is a feature the backend doesn't know about (yet) -> disable by default,
        // or, it is a feature class that was forgotten to be added to the isWMADependentFeature() method -> allow to control via ECS.
        return isFlightEnabled('WMA_'+_featureName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>areFeaturesEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the provided features / flights are enabled on the environment we connected to.
    /// </summary>
    /// <param name="_features"> List of FeatureInfo of the features / flights.</param>
    /// <returns>List of <c>WHSFeatureInfo</c> where the isEnabled property is true, if the feature/flight is enabled; otherwise, false</returns>
    [AifCollectionTypeAttribute('_features', Types::Class, classStr(WHSFeatureInfo)),
        AifCollectionTypeAttribute('return', Types::Class, classStr(WHSFeatureInfo))]
    public List areFeaturesEnabled(List _features)
    {
        ListEnumerator  enumerator = _features.getEnumerator();

        while(enumerator.moveNext())
        {
            WHSFeatureInfo feature = enumerator.current();
            feature.isEnabled(this.isFeatureEnabled(feature.name(), feature.isFlight()));
        }

        return _features;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDontShowSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates mobile app don't show again setting.
    /// </summary>
    /// <param name = "_userId">User id who sends the request.</param>
    /// <param name = "_category">The category of target the user wants to show or hide, such as step instruction.</param>
    /// <param name = "_target">The target object the user wants to show or hide.</param>
    /// <param name = "_show">True, if user wants to show the object; false otherwise.</param>
    /// <param name = "_dataAreaId">DataAreaId in which the service should be run.</param>
    public void updateDontShowSetting(WHSUserId _userId,
                                      WHSMobileAppDontShowAgainCategory _category,
                                      WHSMobileAppDontShowAgainTarget _target, 
                                      boolean _show,
                                      DataAreaId _dataAreaId)
    {
        changecompany(_dataAreaId)
        {
            ttsbegin;

            if (_show)
            {
                WHSMobileAppDontShowAgainTable::removeDontShowAgain(_userId, _category, _target);
            }
            else
            {
                WHSMobileAppDontShowAgainTable::addDontShowAgain(_userId, _category, _target);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStepInstruction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instruction for specified menu item, step id and language.
    /// </summary>
    /// <param name = "_menuItemName">Menu item name.</param>
    /// <param name = "_stepId">Step id.</param>
    /// <param name = "_languageId">Language.</param>
    /// <param name = "_confirmation">True, if it is confirmation step</param>
    /// <param name = "_dataAreaId">DataAreaId in which the service should be run.</param>
    /// <returns>The step instruction.</returns>
    public str getStepInstruction(WHSMenuItemName _menuItemName,
                                  WHSMobileAppStepId _stepId,
                                  LanguageId _languageId,
                                  boolean _confirmation,
                                  DataAreaId _dataAreaId)
    {
        changecompany(_dataAreaId)
        {
            return WHSMobileAppStepInstructionProvider::construct().getStepInstruction(_menuItemName, _stepId, _languageId, _confirmation);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>