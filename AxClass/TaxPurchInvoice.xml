<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPurchInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class TaxPurchInvoice extends TaxPost
{
    PurchCalcTax            purchCalcTax;
    Common                  sourceRecord;
    MarkupTrans             markupTrans;

    NoYes                   isMarkupBeingCalculated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowTaxAdjustmentDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the tax posting will delete the tax adjustments.
    /// </summary>
    /// <returns>
    ///    true if tax posting will delete <c>TaxWorkRegulation</c> records; otherwise, false.
    /// </returns>
    protected boolean allowTaxAdjustmentDelete()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertSourceTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the sourceTableId and SourceRecId on the tax transactions
    /// </summary>
    /// <param name="_sourceTableId">
    /// The orignal sourceTableId
    /// </param>
    /// <param name="_sourceRecId">
    /// The orignal sourceRecId
    /// </param>
    /// <returns>
    /// The coverted
    /// </returns>
    protected container convertSourceTable_IN(TableId _sourceTableId, RefRecId _sourceRecId)
    {
        VendInvoiceTrans vendInvoiceTransLocal;

        if (_sourceTableId == tableNum(VendInvoiceInfoLine))
        {
            vendInvoiceTransLocal = VendInvoiceTrans::findSourceDocumentLine(VendInvoiceInfoLine::findRecId(_sourceRecId).SourceDocumentLine);

            if (vendInvoiceTransLocal)
            {
                return [vendInvoiceTransLocal.TableId, vendInvoiceTransLocal.RecId];
            }
        }

        return super(_sourceTableId, _sourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseTaxCalculationdate_IN</Name>
				<Source><![CDATA[
    protected TransDateTime exciseTaxCalculationdate_IN(RefRecId _sourceRecId,
                                                        TableId _sourceTableId)
    {
        TransDateTime                   vendexciseTaxCalculationDateTime;
        VendorCalculationDateType_IN    vendTaxCalculationDateType;

        if (!(VendParameters::find().UseDocumentDate))
        {
            vendTaxCalculationDateType  = this.taxParameters().VendorCalculationDateType_IN;

            switch (vendTaxCalculationDateType)
            {
                case VendorCalculationDateType_IN::DeliveryDate:
                    vendexciseTaxCalculationDateTime = DateTimeUtil::newDateTime(purchCalcTax.deliveryDate(), 0, DateTimeUtil::getUserPreferredTimeZone());
                    break;

                case VendorCalculationDateType_IN::InvoiceDate:
                    vendexciseTaxCalculationDateTime = DateTimeUtil::newDateTime(purchCalcTax.invoiceDate(), 0, DateTimeUtil::getUserPreferredTimeZone());
                    break;

                case VendorCalculationDateType_IN::DocumentDate:
                    vendexciseTaxCalculationDateTime = DateTimeUtil::newDateTime(purchCalcTax.documentDate(), 0, DateTimeUtil::getUserPreferredTimeZone());
                    break;
            }
        }

        return vendexciseTaxCalculationDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitializationClass</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an object of the initialization class.
    /// </summary>
    /// <returns>
    ///    An object of the initialization class.
    /// </returns>
    /// <remarks>
    ///    The initialization class is of a different type for each subclass.
    /// </remarks>
    protected Object getInitializationClass()
    {
        return purchCalcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the original document ID.
    /// </summary>
    /// <returns>
    ///    The original document ID of the transaction header.
    /// </returns>
    /// <remarks>
    ///    The parent of tax lines sometimes changes during posting. This method will return the original
    ///    document ID.
    /// </remarks>
    protected RefRecId getOriginalHeadingRecId()
    {
        return origHeadingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the original transaction line table ID.
    /// </summary>
    /// <returns>
    ///    The original table ID of the transaction line.
    /// </returns>
    /// <remarks>
    ///    The parent of tax lines sometimes changes during posting. This method will return the original
    ///    transaction line table ID.
    /// </remarks>
    protected RefTableId getOriginalHeadingTableId()
    {
        return origHeadingTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModelTaxable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax taxable model.
    /// </summary>
    /// <param name="_documentMap">
    /// The document map.
    /// </param>
    /// <param name="_isScrap">
    /// True if the model is scrap.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxModelTaxable_IN</c> class.
    /// </returns>
    protected TaxModelTaxable_IN getTaxModelTaxable_IN(
        SalesPurchJournalLine _documentMap,
        boolean _isScrap = false)
    {
        SalesPurchJournalLine documentMap;
        VendInvoiceTrans vendInvoiceTransLocal;
        VendInvoiceInfoLine vendInvoiceInfoLineLocal;

        documentMap = _documentMap;

        if (_documentMap.SourceTableId == tableNum(VendInvoiceInfoLine))
        {
            vendInvoiceInfoLineLocal = _documentMap;
            vendInvoiceTransLocal = VendInvoiceTrans::findSourceDocumentLine(vendInvoiceInfoLineLocal.SourceDocumentLine);

            if (vendInvoiceTransLocal)
            {
                documentMap = vendInvoiceTransLocal;
            }
        }

        return super(documentMap, _isScrap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingRecId</Name>
				<Source><![CDATA[
    public RefRecId headingRecId()
    {
        RefRecId ret;

        if (post)
        {
            ret = this.getOriginalHeadingRecId();
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingTableId</Name>
				<Source><![CDATA[
    public RefTableId headingTableId()
    {
        RefTableId ret;

        if (post)
        {
            ret = this.getOriginalHeadingTableId();
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ignoreCalculatedSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether we should ignore the calculated sales tax and only use tax amounts from tax
    ///    adjustments.
    /// </summary>
    /// <returns>
    ///    true if the calculated sales tax should be ignored and only tax amounts from tax adjustments should
    ///    be used; otherwise, false.
    /// </returns>
    public boolean ignoreCalculatedSalesTax()
    {
        return purchCalcTax.ignoreCalculatedSalesTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>keepSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether sales tax adjustments should be deleted when sales tax groups are changed on the transaction.
    /// </summary>
    /// <returns>
    ///   True if sales tax adjustments should not be deleted when sales tax groups are changed on the transaction; otherwise, false.
    /// </returns>
    public boolean keepSalesTaxAdjustments()
    {
        return purchCalcTax.keepSalesTaxAdjustments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(NoYes              _post,
             Object             _initializationClass,
             TmpTaxWorkTrans    _tmpTaxWorkTrans = null)
    {
        super();

        purchCalcTax = _initializationClass as PurchCalcTax;
        if (purchCalcTax == null)
        {
            throw error("@SYS95118");
        }

        post                = _post;
        taxWorkTrans        = _tmpTaxWorkTrans;

        taxModuleType       = TaxModuleType::PurchInvoice;

        headingTableId      = purchCalcTax.tableId();
        headingRecId        = purchCalcTax.recID();
        origHeadingTableId  = purchCalcTax.origHeadingTableID();
        origHeadingRecId    = purchCalcTax.origHeadingRecID();

        if (!headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            if (! this.checkParameters())
                throw error("@SYS18447");

            taxDate             = purchCalcTax.invoiceDate();
            sourceCurrencyCode  = purchCalcTax.currencyCode();
            triangulation       = purchCalcTax.triangulation(taxDate);
        }

        this.setExchRates(purchCalcTax.currencyCode(),
                            purchCalcTax.exchRate(purchCalcTax.invoiceDate()),
                            purchCalcTax.exchRateSecondary(purchCalcTax.invoiceDate()),
                            Currency::noYes2UnknownNoYes(purchCalcTax.triangulation(purchCalcTax.invoiceDate())),
                            purchCalcTax.invoiceDate());
        this.parmReportingCurrencyExchRate(purchCalcTax.reportingCurrencyExchangeRate(purchCalcTax.invoiceDate()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSalesTaxReceivableAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the tax should handle the ledger postings for the tax direction of the sales tax
    ///    receivable.
    /// </summary>
    /// <returns>
    ///    A Boolean value that indicates whether the tax must handle the ledger posting for the tax direction
    ///    of the sales tax receivable.
    /// </returns>
    protected boolean postSalesTaxReceivableAmounts()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record ID of the transaction line to post.
    /// </summary>
    /// <returns>
    ///    The record ID of the transaction line to post.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived classes.
    /// </remarks>
    public RecId sourceRecId()
    {
        if (isMarkupBeingCalculated)
            return markupTrans.RecId;
        else
            return purchCalcTax.transRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    ///    The table ID of the transaction to tax.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived classes.
    /// </remarks>
    public TableId sourceTableId()
    {
        if (isMarkupBeingCalculated)
            return markupTrans.TableId;
        else
            return purchCalcTax.transTableId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxByMarkup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void taxByMarkup()
    {
        NoYes           moreMarkup;
        Integer         sign;

        moreMarkup = true;
        while (moreMarkup)
        {
            markupTrans = purchCalcTax.nextMarkupLine();
            if (markupTrans)
            {
                isMarkupBeingCalculated= NoYes::Yes;

                // We only need the sign on the markup - not the amount itself
                if (purchCalcTax.markupAmount() < 0)
                    sign = -1;
                else
                    sign = 1;

                purchCalcTax.setTaxMarkup('', this.lineTaxAmount(sign));

                markupTrans.doUpdate();
            }
            else
            {
                isMarkupBeingCalculated= NoYes::No;
                moreMarkup  = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method is the main entry point to execute transaction specific logic and to
    ///    post to TaxTrans and to post tax amounts to the Ledger.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    /// <param name="_companyToPost">
    ///    The company to post; optional.
    /// </param>
    /// <returns>
    ///    The total tax amount.
    /// </returns>
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController, SelectableDataArea _companyToPost = curext())
    {
        TaxAmount       taxAmount;
        boolean         moreLines;
        Integer         sign;
        RefRecId        documentHeadingRecId;
        RefTableId      documentHeadingTableId;

        this.initLedgerPosting(_ledgerPostingController);

        if (TaxParameters::find().TaxSpecifyLine)
        {
            ttsbegin;

            if (!skipTableMarkup)
            {
                purchCalcTax.initCursorMarkupHeader(purchCalcTax.tableId(),
                                                    purchCalcTax.recID());
                this.taxByMarkup();
            }

            purchCalcTax.initCursor();
            moreLines   = true;
            while (moreLines)
            {
                sourceRecord= purchCalcTax.nextLine();
                if (sourceRecord)
                {
                    if (purchCalcTax.transLineAmount() < 0 ||
                        purchCalcTax.transQty() < 0)
                        sign = -1;
                    else
                        sign = 1;

                    purchCalcTax.setTax(this.taxWriteCode(), this.lineTaxAmount(sign));
                    sourceRecord.doUpdate();

                    if (!skipLineMarkup)
                    {
                        this.taxByMarkup();
                    }
                }
                else
                    moreLines   = false;
            }
            ttscommit;
        }

        if (post)
        {
            this.saveAndPost(_ledgerPostingController, _companyToPost);

            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
        }
        else
        {
            documentHeadingRecId = headingRecId;
            documentHeadingTableId = headingTableId;
            headingRecId = this.getOriginalHeadingRecId();
            headingTableId = this.getOriginalHeadingTableId();
            this.saveInJournalTrans(documentHeadingTableId, documentHeadingRecId);
            headingRecId = documentHeadingRecId;
            headingTableId = documentHeadingTableId;
            taxAmount = this.totalTaxAmount();
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current transaction to post supports <c>SubLedgerDistributions</c> or
    ///    <c>SubLedgerJournalLines</c> records. By default, this base implementation is that they do not. As
    ///    the individual transaction support the sub-ledger, they must override this and return true.
    /// </summary>
    /// <returns>
    ///    true if the current transaction supports <c>SubLedgerDistributions</c> or
    ///    <c>SubLedgerJournalLines</c> records; otherwise, false.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return purchCalcTax.useSubLedgerJournalLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return purchCalcTax.useTaxUncommitted();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>