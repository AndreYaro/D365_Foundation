<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkPutAwaySplitCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkPutAwaySplitCalculator</c> class calculates the exact quantity and dimensions to be
/// put away by the given work inventory transaction.
/// </summary>
internal final static class WHSWorkPutAwaySplitCalculator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and constructs an item set to be put away by the work inventory transaction for the given put-away flow.
    /// </summary>
    /// <param name = "_workPutFlow">The put away flow.</param>
    /// <param name = "_workInventTrans">The work inventory transaction to calculate put-away for.</param>
    /// <returns>A constructed item set to be put away.</returns>
    /// <remarks>
    /// This method essentially calculates what can be put by the given work inventory transaction. Then it substracts from that set all inventory,
    /// which has been put already - all this done ignoring the _storage_ dimensions. It constructs the item set with inventory which we still can put away
    /// by the given work inventory transaction.
    /// </remarks>
    [Hookable(false)]
    internal static WHSInventoryItemSetDescriptor calculate(WHSWorkPutFlow _workPutFlow, WHSWorkInventTrans _workInventTrans)
    {
        UnitOfMeasureDecimalPrecision weightUnitDecimalPrecision = InventTable::inventDecimals(_workInventTrans.ItemId);
        boolean catchWeightItemsPutUsesInventQty = WHSWorkPutAwaySplitCalculator::catchWeightItemsPutUsesInventQty(_workInventTrans);

        Map allInventoryReadyToPut = WHSWorkPutAwaySplitCalculator::getAllPickedInventoryMap(_workInventTrans);

        // after this operation we will be left with just inventory that we still should put.
        WHSWorkPutAwaySplitCalculator::subtractAlreadyPutInventory(allInventoryReadyToPut, _workPutFlow, _workInventTrans);

        WHSInventoryTransactionHandlingQty      totalHandlingQtyRemainToPut = _workInventTrans.InventQtyRemain;
        WHSInventoryTransactionHandlingWeight   totalHandlingWeightRemainToPut = _workInventTrans.RemainingTransactionWeight;

        WHSInventoryTransactionHandlingQty      totalHandlingQtyToPut = 0;
        WHSInventoryTransactionHandlingWeight   totalHandlingWeightToPut = 0;

        // construct an item set we want to put-away.
        WHSInventoryItemSetId itemSetIdToPut = WHSSequentialGuidGenerator::generateSequentialGuid();

        var allInventoryReadyToPutEnumerator = allInventoryReadyToPut.getEnumerator();
        while (allInventoryReadyToPutEnumerator.moveNext())
        {
            WHSWorkInventoryTransactionDescriptorElement desciptorElementToPut = allInventoryReadyToPutEnumerator.currentValue();

            InventDim productTrackingInventDim = desciptorElementToPut
                .parmInventoryDimensionsDescriptor()
                .parmProductTrackingDimensions()
                .convertToInventDim();

            WHSInventoryTransactionHandlingQty    toPutHandlingQty = min(desciptorElementToPut.parmHandlingQty(), totalHandlingQtyRemainToPut);
            WHSInventoryTransactionHandlingWeight toPutHandlingWeight;

            if (toPutHandlingQty == totalHandlingQtyRemainToPut)
            {
                toPutHandlingWeight = totalHandlingWeightRemainToPut;
            }
            else
            {
                if (catchWeightItemsPutUsesInventQty &&
                    toPutHandlingQty == desciptorElementToPut.parmHandlingQty())
                {
                    // Normally, we calculate the average weight (see the other branch).
                    // But in case of the transfer receipt we actually have the right weights (from the transfer issue) and should use those.
                    toPutHandlingWeight = desciptorElementToPut.parmHandlingWeight();
                }
                else
                {
		            toPutHandlingWeight = WHSCatchWeightHelper::calculateAverageWeight(
                        toPutHandlingQty,
                        _workInventTrans.InventQtyRemain,
                        _workInventTrans.RemainingTransactionWeight,
                        weightUnitDecimalPrecision);
                }
            }

            WHSInventoryItemSetElement::insertItemSetElement(
                itemSetIdToPut,
                desciptorElementToPut.parmItemId(),
                productTrackingInventDim,
                toPutHandlingQty,
                toPutHandlingWeight);

            totalHandlingQtyRemainToPut -= toPutHandlingQty;
            totalHandlingWeightRemainToPut -= toPutHandlingWeight;

            totalHandlingQtyToPut += toPutHandlingQty;
            totalHandlingWeightToPut += toPutHandlingWeight;

            // can stop looping once collected all the quantity to put.
            if (totalHandlingQtyRemainToPut == 0)
            {
                break;
            }
        }

        return WHSInventoryItemSetDescriptor::newFromValues(
            itemSetIdToPut,
            totalHandlingQtyToPut,
            totalHandlingWeightToPut);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllPickedInventoryMap</Name>
				<Source><![CDATA[
    private static Map getAllPickedInventoryMap(WHSWorkInventTrans _workInventTrans)
    {
        Map allPickedInventoryMap = new Map(Types::Container, Types::Class);

        WHSInventoryItemSetElement itemSetElement;

        // We can rely on the fact that item set stamped on the put work inventory transaction contains all the possible inventory which _can_ be put by it.
        // Alternatively we can query here what has been put by the respective pick work lines, similar how we do it in the old stack.
        // So, querying item set elements here is a performance optimization.
        while select itemSetElement
            where itemSetElement.ItemSetId == _workInventTrans.ItemSetId
        {
            Debug::assert(itemSetElement.ItemId == _workInventTrans.ItemId);

            container descriptorElementKey = WHSWorkPutAwaySplitCalculator::constructKey(
                itemSetElement.ItemId,
                _workInventTrans.InventTransIdParent,
                WHSInventoryProductTrackingDimensions::newFromItemSetElement(itemSetElement));

            if (allPickedInventoryMap.exists(descriptorElementKey))
            {
                WHSWorkInventoryTransactionDescriptorElement existingDescriptorElement = allPickedInventoryMap.lookup(descriptorElementKey);

                existingDescriptorElement.addQuantities(
                    itemSetElement.HandlingQty,
                    itemSetElement.HandlingWeight);
            }
            else
            {
                WHSWorkInventoryTransactionDescriptorElement descriptorElement = WHSWorkInventoryTransactionDescriptorElement::newFromValues(
                    itemSetElement.ItemId,
                    itemSetElement.HandlingQty,
                    itemSetElement.HandlingWeight,
                    WHSWorkInventoryTransactionDimensionsDescriptor::newFromDimensions(
                        WHSInventoryStorageDimensions::construct(),  // ignore storage dimensions information
                        WHSInventoryProductTrackingDimensions::newFromItemSetElement(itemSetElement)),
                    _workInventTrans.InventTransIdParent);  // inventory in the item set belongs to this work inventory transaction

                allPickedInventoryMap.add(descriptorElementKey, descriptorElement);
            }
        }

        return allPickedInventoryMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subtractAlreadyPutInventory</Name>
				<Source><![CDATA[
    private static void subtractAlreadyPutInventory(Map _allInventoryReadyToPut, WHSWorkPutFlow _workPutFlow, WHSWorkInventTrans _workInventTrans)
    {
        LineNum fromPutLineNum, toPutLineNum;
        [fromPutLineNum, toPutLineNum] = WHSWorkPutAwaySplitCalculator::getPutWorkLineRanges(_workPutFlow, _workInventTrans);

        // Except of when we have multiple put lines in the end, there will be just one iteration here.
        for (int lineNum = fromPutLineNum; lineNum <= toPutLineNum; lineNum++)
        {
            WHSWorkInventoryTransactionDescriptor transactionDescriptor = WHSWorkInventoryTransactionQuery::newFromWorkId(_workInventTrans.WorkId).registeredReceiptByWorkLine(
                lineNum,
                WHSWorkInventoryTransactionQueryParameters::construct());

            var transactionDescriptorEnumerator = transactionDescriptor.getEnumerator();
            while (transactionDescriptorEnumerator.moveNext())
            {
                WHSWorkInventoryTransactionDescriptorElement descriptorElement = transactionDescriptorEnumerator.current();

                container descriptorElementKey = WHSWorkPutAwaySplitCalculator::constructKey(
                    descriptorElement.parmItemId(),
                    descriptorElement.parmInventTransIdParent(),
                    descriptorElement.parmInventoryDimensionsDescriptor().parmProductTrackingDimensions());

                if (_allInventoryReadyToPut.exists(descriptorElementKey))
                {
                    WHSWorkInventoryTransactionDescriptorElement existingDescriptorElement = _allInventoryReadyToPut.lookup(descriptorElementKey);

                    if (   existingDescriptorElement.parmHandlingQty()    != descriptorElement.parmHandlingQty()
                        || existingDescriptorElement.parmHandlingWeight() != descriptorElement.parmHandlingWeight())
                    {
                        existingDescriptorElement.addQuantities(
                            -descriptorElement.parmHandlingQty(),
                            -descriptorElement.parmHandlingWeight());

                        Debug::assert(existingDescriptorElement.parmHandlingQty() >= 0);
                        Debug::assert(existingDescriptorElement.parmHandlingWeight() >= 0);
                        Debug::assert(existingDescriptorElement.parmHandlingQty() > 0 || existingDescriptorElement.parmHandlingWeight() > 0);
                    }
                    else
                    {
                        // if the result of the substraction is an element with zero quantity, than just remove it from the collection.
                        _allInventoryReadyToPut.remove(descriptorElementKey);
                    }
                }
                else
                {
                    // In transfer receipt scenario, there could possibly exist several put lines.
                    // Those put lines WHSWorkInventTrans' records contain very specific item sets - 
                    // they contain just the stuff to be put by that specific WHSWorkInventTrans record.
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructKey</Name>
				<Source><![CDATA[
    private static container constructKey(ItemId _itemId, InventTransId _inventTransIdParent, WHSInventoryProductTrackingDimensions _productTrackingDimensions)
    {
        return [_itemId, _inventTransIdParent, _productTrackingDimensions.getKey()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPutWorkLineRanges</Name>
				<Source><![CDATA[
    private static container getPutWorkLineRanges(WHSWorkPutFlow _workPutFlow, WHSWorkInventTrans _workInventTrans)
    {
        LineNum fromPutLineNum, toPutLineNum;

        if (_workPutFlow == WHSWorkPutFlow::MoveAll)
        {
            // when we move full put quantity, it means we have a single put work line.
            fromPutLineNum = _workInventTrans.LineNum;
            toPutLineNum = _workInventTrans.LineNum;
        }
        else
        {
            WHSWorkLine prevPickLine = WHSWorkLine::getPrevOppositeWorkLine(_workInventTrans.WorkId, _workInventTrans.LineNum, WHSWorkType::Put);

            fromPutLineNum = WHSWorkLine::getNextOppositeWorkLine(_workInventTrans.WorkId, prevPickLine.LineNum, WHSWorkType::Pick);

            WHSWorkLine workLineLocal;

            // we are executing the partial put-away logic for the final put operations so can just get the last put work line.
            select firstonly LineNum from workLineLocal
                order by workLineLocal.LineNum desc
                where  workLineLocal.WorkId     == _workInventTrans.WorkId
                    && workLineLocal.WorkType   == WHSWorkType::Put
                    && workLineLocal.WorkStatus != WHSWorkStatus::Cancelled;

            toPutLineNum = workLineLocal.LineNum;
        }

        return [fromPutLineNum, toPutLineNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>catchWeightItemsPutUsesInventQty</Name>
				<Source><![CDATA[
	private static boolean catchWeightItemsPutUsesInventQty(WHSWorkInventTrans _workInventTrans)
    {
        return WHSCatchWeightItemsPutUsesInventQtyContext::instance().canCatchWeightItemsPutUseInventQty
			&& WHSWorkTable::find(_workInventTrans.WorkId).WorkTransType == WHSWorkTransType::TransferReceipt;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>