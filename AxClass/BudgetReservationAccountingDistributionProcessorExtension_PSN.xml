<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetReservationAccountingDistributionProcessorExtension_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetReservationAccountingDistributionProcessorExtension_PSN</c> class is the extension of the Accounting
/// distribution processor.
/// </summary>
[
    SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice),
    SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ProductOrder), SourceDocument_ProductOrder::PurchaseOrder),
    SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ProductRequisition), SourceDocument_ProductRequisition::PurchaseRequisition),
    SourceDocumentEnumLiteralExtension(enumStr(BudgetReservation_SourceDocument_PSN), enumLiteralStr(BudgetReservation_SourceDocument_PSN, BudgetReservation))
]
public class BudgetReservationAccountingDistributionProcessorExtension_PSN extends AccDistProcessorExtension
{
    Map processedAccountingDistributionMap;
    boolean creatingDistributionsForReversals;
    boolean useSessionDateForAccounting;
    boolean isSourceBudgetReservation;
    RecordSortedList accountingDistributionReversalList;
    Set processedSourceDocumentLineForUpdateSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetReservationAccountingDistributionProcessorExtension_PSN construct()
    {
        return new BudgetReservationAccountingDistributionProcessorExtension_PSN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdAdjustingDistributionForReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the delegate that is triggered after distributing the source document amounts to the distributions and inserting them into the database.
    /// </summary>
    /// <param name="_accountingDistributionList">
    /// The list of <c>AccountingDistribution</c> objects that were inserted into the database
    /// </param>
    public void createdAdjustingDistributionForReversal(RecordInsertList _accountingDistributionList)
    {
        creatingDistributionsForReversals = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creatingAdjustingDistributionForReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the delegate that is triggered prior to distributing the source document amounts to the distributions.
    /// </summary>
    /// <param name="_sourceDocumentLineItemList">
    /// The list of <c>SourceDocumentLineItem</c> objects that will be distributed to <c>AccountingDistribution</c> records.
    /// </param>
    public void creatingAdjustingDistributionForReversal(SourceDocumentLineItemList _sourceDocumentLineItemList)
    {
        creatingDistributionsForReversals = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedAccountingDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the delegate that is triggered after the updating of an <c>AccountingDistribution</c> record.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// The <c>AccountingDistribution</c> record that was updated.
    /// </param>
    public void updatedAccountingDistribution(AccountingDistribution _accountingDistribution)
    {
        if (useSessionDateForAccounting)
        {
            this.doCorrectionDistributionDateUpdate(_accountingDistribution, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdjustingDate</Name>
				<Source><![CDATA[
    public void setAdjustingDate(AccountingDistribution _accountingDistribution)
    {
        BudgetReservationHeader_PSN budgetReservationHeader;
        BudgetReservationLine_PSN budgetReservationLine;

        if (useSessionDateForAccounting
            && !this.isOpenClose()
            && BudgetReservation_PSN::isSourceBudgetReservation_PSN(_accountingDistribution.SourceDocumentLine)
            && BudgetReservation_PSN::eventExistsForGBRSourceDocumentLine_PSN(_accountingDistribution.SourceDocumentLine)
            && _accountingDistribution.AccountingEvent == AccountingEventType::None)
        {
            select firstOnly RecId from budgetReservationLine
                where budgetReservationLine.SourceDocumentLine == _accountingDistribution.SourceDocumentLine
                join CancelDate from budgetReservationHeader
                    where budgetReservationHeader.RecId == budgetReservationLine.BudgetReservationHeader_PSN;

            if (!budgetReservationHeader.CancelDate)
            {
                _accountingDistribution.AccountingDate = PublicSectorUtils::getSystemDateWithUserTimeZoneOffset();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the accounting distribution processor extension.
    /// </summary>
    public void initialize()
    {
        useSessionDateForAccounting =  BudgetParameters::find().useSessionDateForAccounting;

        accountingDistributionReversalList = new RecordSortedList(tableNum(AccountingDistribution));
        accountingDistributionReversalList.sortOrder(fieldNum(AccountingDistribution, SourceDocumentLine), fieldNum(AccountingDistribution, Number));
    
        processedSourceDocumentLineForUpdateSet = new Set(Types::Int64);

        this.subscribe();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDistributionProcessor</Name>
				<Source><![CDATA[
    public AccountingDistributionProcessor parmAccountingDistributionProcessor(AccountingDistributionProcessor _accountingDistributionProcessor = accountingDistributionProcessor)
    {
        accountingDistributionProcessor = _accountingDistributionProcessor;

        return accountingDistributionProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOpenClose</Name>
				<Source><![CDATA[
    private boolean isOpenClose()
    {
        return this.parmAccountingDistributionProcessor().parmClosingDate()
        || this.parmAccountingDistributionProcessor().parmOpeningDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCorrectionDistributionDateUpdate</Name>
				<Source><![CDATA[
    private void doCorrectionDistributionDateUpdate(AccountingDistribution _accountingDistribution, Boolean _doUpdate = false)
    {
        AccountingDate accountingDate = PublicSectorUtils::getSystemDateWithUserTimeZoneOffset();
        BudgetReservationLine_PSN budgetReservationLine;

        if (useSessionDateForAccounting
            && isSourceBudgetReservation
            && !this.isOpenClose()
            && BudgetReservation_PSN::eventExistsForGBRSourceDocumentLine_PSN(_accountingDistribution.SourceDocumentLine)
            && _accountingDistribution.AccountingEvent == AccountingEventType::None)
        {
            budgetReservationLine = BudgetReservationLine_PSN::findBySourceDocumentLine(_accountingDistribution.SourceDocumentLine);

            if (!processedSourceDocumentLineForUpdateSet.in(_accountingDistribution.SourceDocumentLine))
            {
                BudgetReservation_PSN::correctionDistributionDateUpdate(accountingDate, budgetReservationLine.RecId, 0, true);
                processedSourceDocumentLineForUpdateSet.add(_accountingDistribution.SourceDocumentLine);
            }

            _accountingDistribution.AccountingDate = accountingDate;

            if (_doUpdate)
            {
                _accountingDistribution.selectForUpdate(true);
                _accountingDistribution.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesPurchLineMatchPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the purchase order line has a direct reference to a budget reservation line.
    /// </summary>
    /// <param name="_purchLineSourceDocumentLineRecId">
    /// The record ID of the <c>SourceDocumentLine</c> record.
    /// </param>
    /// <returns>
    /// true if the purchase order line is referencing a purchase requisition line and
    /// the purchase requisition line is not referenced by a budget reservation line; otherwise, false.
    /// </returns>    
    private boolean doesPurchLineMatchPurchReqLine(SourceDocumentLineRecId _purchLineSourceDocumentLineRecId)
    {
        PurchLine                   purchLine;
        BudgetReservationLine_PSN   budgetReservationLine;
    
        if (_purchLineSourceDocumentLineRecId)
        {
            select RecId from purchLine
                where purchLine.SourceDocumentLine == _purchLineSourceDocumentLineRecId
                    && purchLine.PurchReqLineRefId != emptyGuid()
            exists join budgetReservationLine
                where budgetReservationLine.RecId == purchLine.BudgetReservationLine_PSN
                    && budgetReservationLine.PurchReqLine == 0;
        }
    
        return purchLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetReservationAccountingDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the budget reservation accounting distribution related to the <c>_currentAccountingDistribution</c> parent accounting distribution.
    /// </summary>
    /// <param name="_currentAccountingDistribution">
    /// The current accounting distribution that contains a reference to a parent accounting distribution whose budget reservation accounting distribution record should be retrieved.
    /// </param>
    /// <returns>
    /// The budget reservation accounting distribution related to the parent accounting distribution of the <c>_currentAccountingDistribution</c> record.
    /// </returns>
    /// <remarks>
    /// This method will recursively walk back through the parent distribution references for each accounting distribution until it reaches the budget reservation accounting distribution.
    /// </remarks>
    public AccountingDistribution findBudgetReservationAccountingDistribution(AccountingDistribution _currentAccountingDistribution)
    {
        AccountingDistribution  parentDistribution;
        AccountingDistribution  priorParentDistribution;
        SourceDocumentLine      parentSourceDocumentLine;
    
        parentDistribution.data(_currentAccountingDistribution);
    
        while (parentDistribution.ParentDistribution != 0)
        {
            priorParentDistribution.data(parentDistribution);
    
            if (processedAccountingDistributionMap.exists(priorParentDistribution.ParentDistribution))
            {
                parentDistribution = processedAccountingDistributionMap.lookup(priorParentDistribution.ParentDistribution);
            }
            else
            {
                select firstonly RecId, ParentDistribution, ReferenceDistribution, LedgerDimension from parentDistribution
                    where parentDistribution.RecId == priorParentDistribution.ParentDistribution;
            }    
        }
    
        parentSourceDocumentLine = SourceDocumentLine::find(parentDistribution.SourceDocumentLine);
    
        if ((_currentAccountingDistribution.MonetaryAmount == MonetaryAmount::Discount
            || _currentAccountingDistribution.MonetaryAmount == MonetaryAmount::PriceAdjustment)
            && parentSourceDocumentLine.SourceRelationType == tableNum(PurchLine)
            && this.doesPurchLineMatchPurchReqLine(parentSourceDocumentLine.RecId))
        {
            // We do not want discounts/price adjustments on a purchase order line to reference a budget reservation line
            // when that purchase order line is also referencing a purchase requisition line.
            parentDistribution = null;
        }
        else if (parentSourceDocumentLine.SourceRelationType != tableNum(BudgetReservationLine_PSN))
        {
            if (parentDistribution.ReferenceDistribution != 0)
            {
                parentDistribution = AccountingDistribution::find(parentDistribution.ReferenceDistribution);
                parentSourceDocumentLine = SourceDocumentLine::find(parentDistribution.SourceDocumentLine);
            }
    
            if (parentDistribution.RecId && parentSourceDocumentLine.SourceRelationType != tableNum(BudgetReservationLine_PSN))
            {
                parentDistribution = this.findBudgetReservationAccountingDistribution(AccountingDistribution::find(parentDistribution.ReferenceDistribution));
            }
        }
    
        return parentDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMainAccountTypeSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the passed in main account type is supported for referencing by budget reservation.
    /// </summary>
    /// <param name="_mainAccountType">
    /// The main account type to check.
    /// </param>
    /// <returns>
    /// true, if the main account type is supported; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Supported main account types are: expese, revenue and profit/loss.
    /// </remarks>
    private boolean isMainAccountTypeSupported(DimensionLedgerAccountType _mainAccountType)
    {
        return (_mainAccountType == DimensionLedgerAccountType::Expense
                || _mainAccountType == DimensionLedgerAccountType::Revenue
                || _mainAccountType == DimensionLedgerAccountType::ProfitAndLoss);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    
        processedAccountingDistributionMap = new Map(Types::Int64, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the accounting distribution processor events.
    /// </summary>
    protected void subscribe()
    {
        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            accountingDistributionProcessor.addingAccountingDistribution += eventhandler(this.addingAccountingDistribution);

            if (accountingDistributionProcessor.parmSourceDocument() is BudgetReservationSourceDocument_PSN)
            {
                isSourceBudgetReservation = true;

                if (useSessionDateForAccounting)
                {
                    accountingDistributionProcessor.creatingAdjustingDistributionForReversal += eventhandler(this.creatingAdjustingDistributionForReversal);
                    accountingDistributionProcessor.createdAdjustingDistributionForReversal += eventhandler(this.createdAdjustingDistributionForReversal);
                    accountingDistributionProcessor.updatedAccountingDistribution += eventhandler(this.updatedAccountingDistribution);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferenceDistForBudgetReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ReferenceDistribution</c>, <c>LedgerDimension</c>, and <c>ReferenceRole</c> fields on the accounting distribution record
    /// with the corresponding fields on the related budget reservation record for relief.
    /// </summary>
    /// <param name="_currentAccountingDistribution">
    /// An accounting distribution record to update before inserting into the database.
    /// </param>
    public void updateReferenceDistForBudgetReservation(AccountingDistribution _currentAccountingDistribution)
    {
        AccountingDistribution      budgetReservationAccDistToReference;
        DimensionLedgerAccountType  mainAccountType;
    
        if (!SourceDocumentAmount::isVarianceAmount(_currentAccountingDistribution.MonetaryAmount))
        {
            mainAccountType = LedgerDimensionFacade::getMainAccountFromLedgerDimension(_currentAccountingDistribution.LedgerDimension).Type;
    
            if (this.isMainAccountTypeSupported(mainAccountType))
            {
                budgetReservationAccDistToReference = this.findBudgetReservationAccountingDistribution(_currentAccountingDistribution);
    
                if (budgetReservationAccDistToReference.RecId != 0)
                {
                    switch (_currentAccountingDistribution.MonetaryAmount)
                    {
                        case MonetaryAmount::ExtendedPrice:
                            if (_currentAccountingDistribution.ReferenceDistribution != 0)
                            {
                                _currentAccountingDistribution.LedgerDimension = budgetReservationAccDistToReference.LedgerDimension;
                            }
                            break;
    
                        default:
                            if (_currentAccountingDistribution.ParentDistribution != 0)
                            {
                                if (_currentAccountingDistribution.ReferenceDistribution == 0)
                                {
                                    _currentAccountingDistribution.ReferenceDistribution    = budgetReservationAccDistToReference.RecId;
                                    _currentAccountingDistribution.ReferenceRole            = AccountingDistributionReferenceRole::Matching;
                                }
    
                                _currentAccountingDistribution.LedgerDimension = budgetReservationAccDistToReference.LedgerDimension;
                            }
                            break;
                    }
    
                    processedAccountingDistributionMap.insert(_currentAccountingDistribution.RecId, _currentAccountingDistribution);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addingAccountingDistribution</Name>
				<Source><![CDATA[
    public void addingAccountingDistribution(AccountingDistribution _accountingDistribution)
    {
        AccountingDistribution accountingDistributionReversal;

        this.updateReferenceDistForBudgetReservation(_accountingDistribution);

        if (isSourceBudgetReservation
            && useSessionDateForAccounting
            && !this.isOpenClose())
        {
            select RecId, AccountingDate, ReferenceRole from accountingDistributionReversal
                order by number desc
                where accountingDistributionReversal.RecId == _accountingDistribution.ReferenceDistribution;

            if (!creatingDistributionsForReversals && !(accountingDistributionReversal.RecId
                || _accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Reversing))
            {
                this.doCorrectionDistributionDateUpdate(_accountingDistribution);
            }
            else if (accountingDistributionReversal.RecId
                && _accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Reversing
                || (creatingDistributionsForReversals))
            {
                this.setAdjustingDate(_accountingDistribution);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>