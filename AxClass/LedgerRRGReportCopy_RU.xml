<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGReportCopy_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGReportCopy_RU extends RunBase
{
    DataAreaId                  fromDataAreaId;
    LedgerRRGRepCode_RU         fromRepCode;
    LedgerRRGReportTable_RU     fromReportTable;
    LedgerRRGRepCode_RU         toRepCode;
    LedgerRRGRepCode_RU         fromCellCode;
    LedgerRRGCellTable_RU       fromCellTable;
    LedgerRRGRepCode_RU         toCellCode;
    boolean                     clearBeforeCopy;
    boolean                     skipValidate;
    boolean                     cellCopy;
    boolean                     wasInserted;

    private const int           CurrentVersion	= 1;
    private const int           Version1	    = 1;
    private const str           Cell	        = 'Cell';
    private const str           Report	        = 'Report';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountInterval</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerRRGAccountInterval_RU accountInterval(Common _from)
    {
        LedgerRRGAccountInterval_RU accountInterval;

        changecompany(fromDataAreaId)
        {
            select accountInterval where accountInterval.OperationRecID == _from.RecId;
        }

        return accountInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cellCopy</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean cellCopy()
    {
        return cellCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDataAreaId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkDataAreaId()
    {
        DataArea    dataArea;
        boolean     ret = true;

        select dataArea where dataArea.Id == fromDataAreaId;
        if (!dataArea)
        {
            ret = checkFailed(strFmt("@LedgerRRG:LedgerRRG_CompanyNotExist", fromDataAreaId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFromCellCode</Name>
				<Source><![CDATA[
    private boolean checkFromCellCode()
    {
        LedgerRRGCellTable_RU       cellTable;

        changecompany(fromDataAreaId)
        {
            select cellTable where
                cellTable.ReportRecId       == fromReportTable.RecId    &&
                cellTable.CellCode          == fromCellCode;
        }

        if (!cellTable)
        {
            return checkFailed(strFmt("@LedgerRRG:LedgerRRG_SourceCellNotExist", fromCellCode, fromRepCode, fromDataAreaId));
        }

        fromCellTable = cellTable;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFromRepCode</Name>
				<Source><![CDATA[
    private boolean checkFromRepCode()
    {
        changecompany(fromDataAreaId)
        {
            fromReportTable = LedgerRRGReportTable_RU::findByRepCode(fromRepCode);
        }

        if (!fromReportTable)
        {
            return checkFailed(strFmt("@LedgerRRG:LedgerRRG_SourceReportNotExist", fromRepCode, fromDataAreaId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkToCellCode</Name>
				<Source><![CDATA[
    private boolean checkToCellCode()
    {
        if (this.findToCellTable())
        {
            if (Box::yesNo(strFmt("@LedgerRRG:LedgerRRG_CellAlreadyExists", toCellCode, toRepCode), DialogButton::No) != DialogButton::Yes)
            {
                return checkFailed(strFmt("@LedgerRRG:LedgerRRG_CellAlreadyExistsInReport", toCellCode, toRepCode));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkToRepCode</Name>
				<Source><![CDATA[
    private boolean checkToRepCode()
    {
        if (LedgerRRGReportTable_RU::findByRepCode(toRepCode))
        {
            if (Box::yesNo(strFmt("@LedgerRRG:LedgerRRG_ReportToOverride", toRepCode, curext()), DialogButton::No) != DialogButton::Yes)
            {
                return checkFailed(strFmt("@LedgerRRG:LedgerRRG_ReportAlreadyExists", toRepCode, curext()));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAccountInterval</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void copyAccountInterval(Common _from, Common _to)
    {
        LedgerRRGAccountInterval_RU fromAccountInterval;
        LedgerRRGAccountInterval_RU toAccountInterval;

        delete_from toAccountInterval where toAccountInterval.OperationRecID == _to.RecId;

        fromAccountInterval = this.accountInterval(_from);
        while (fromAccountInterval)
        {
            toAccountInterval.clear();
            toAccountInterval.OperationRecID    = _to.RecId;
            toAccountInterval.FromLedgerDimensionAccountId = fromAccountInterval.FromLedgerDimensionAccountId;
            toAccountInterval.ToLedgerDimensionAccountId   = fromAccountInterval.ToLedgerDimensionAccountId;
            toAccountInterval.insert();

            next fromAccountInterval;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCell</Name>
				<Source><![CDATA[
    private void copyCell(LedgerRRGCellTable_RU _from, LedgerRRGCellTable_RU _to)
    {
        _to.Description         = _from.Description;
        _to.IsStatic            = _from.IsStatic;
        _to.TypeByCorrect       = _from.TypeByCorrect;
        _to.LedgerPeriodCode    = _from.LedgerPeriodCode;
        _to.DataType            = _from.DataType;
        _to.ModelNum            = _from.ModelNum;
        _to.rTax25RegisterId    = _from.rTax25RegisterId;
        _to.rTax25FieldId       = _from.rTax25FieldId;
        _to.Alignment           = _from.Alignment;
        _to.Length              = _from.Length;
        _to.PointSignNum        = _from.PointSignNum;
        _to.EmptyChar           = _from.EmptyChar;

        if (_from.DataAreaId == _to.DataAreaId)
        {
            _to.PropertyRefRecId = _from.PropertyRefRecId;
        }

        _to.write();

        this.copyDimensionInterval(_from, _to);
        this.copyTransType(_from, _to);
        this.copyTransOperationsTax(_from, _to);
        this.copyCellDefVal(_from, _to);
        this.copyOperationTable(_from, _to);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCellDefVal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void copyCellDefVal(Common _from, Common _to)
    {
        LedgerRRGCellDefVal_RU fromCellDefVal;
        LedgerRRGCellDefVal_RU toCellDefVal;

        delete_from toCellDefVal where toCellDefVal.CellRecId == _to.RecId;

        changecompany(fromDataAreaId)
        {
            select fromCellDefVal where fromCellDefVal.CellRecId == _from.RecId;
        }

        while (fromCellDefVal)
        {
            toCellDefVal.clear();
            toCellDefVal.CellRecId      = _to.RecId;

            toCellDefVal.DefaultValue   = fromCellDefVal.DefaultValue;
            toCellDefVal.insert();

            next fromCellDefVal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCellTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void copyCellTable(Common _from, Common _to)
    {
        LedgerRRGCellTable_RU       toCellTable;

        if (clearBeforeCopy)
        {
            delete_from toCellTable where toCellTable.ReportRecId == _to.RecId;
        }

        changecompany(fromDataAreaId)
        {
            select fromCellTable where fromCellTable.ReportRecId == _from.RecId;
        }

        while (fromCellTable)
        {
            if (clearBeforeCopy)
            {
                toCellTable.clear();
            }
            else
            {
                select firstonly forupdate toCellTable
                    where toCellTable.ReportRecId   == _to.RecId   &&
                          toCellTable.CellCode      == fromCellTable.CellCode;
            }

            toCellTable.ReportRecId     = _to.RecId;
            toCellTable.CellCode        = fromCellTable.CellCode;

            this.copyCell(fromCellTable, toCellTable);
            next fromCellTable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimensionInterval</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void copyDimensionInterval(Common _from, Common _to)
    {
        LedgerRRGDimensionInterval_RU   fromDimensionInterval;
        LedgerRRGDimensionInterval_RU   toDimensionInterval;

        delete_from toDimensionInterval where
            toDimensionInterval.DimTableID    == _to.TableId &&
            toDimensionInterval.DimRecID      == _to.RecId;

        changecompany(fromDataAreaId)
        {
            select fromDimensionInterval where
                fromDimensionInterval.DimTableID    == _from.TableId &&
                fromDimensionInterval.DimRecID      == _from.RecId;
        }

        while (fromDimensionInterval)
        {
            toDimensionInterval.clear();
            toDimensionInterval.DimTableID         = _to.TableId;
            toDimensionInterval.DimRecID           = _to.RecId;
            toDimensionInterval.DimensionToValue   = fromDimensionInterval.DimensionToValue;
            toDimensionInterval.DimensionFromValue = fromDimensionInterval.DimensionFromValue;
            toDimensionInterval.DimensionAttribute = fromDimensionInterval.DimensionAttribute;
            toDimensionInterval.insert();
            next fromDimensionInterval;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyOffsetAccountInterval</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void copyOffsetAccountInterval(Common _from, Common _to)
    {
        LedgerRRGOffsetAccountInterval_RU fromOffsetAccountInterval;
        LedgerRRGOffsetAccountInterval_RU toOffsetAccountInterval;

        delete_from toOffsetAccountInterval where
            toOffsetAccountInterval.OperationRecID      == _to.RecId;

        fromOffsetAccountInterval = this.offsetAccountInterval(_from);
        while (fromOffsetAccountInterval)
        {
            toOffsetAccountInterval.clear();
            toOffsetAccountInterval.OperationRecID    = _to.RecId;
            toOffsetAccountInterval.FromLedgerDimension   = fromOffsetAccountInterval.FromLedgerDimension;
            toOffsetAccountInterval.ToLedgerDimension     = fromOffsetAccountInterval.ToLedgerDimension;
            toOffsetAccountInterval.insert();

            next fromOffsetAccountInterval;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyOperationTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void copyOperationTable(Common _from, Common _to)
    {
        LedgerRRGOperationTable_RU fromOperationTable;
        LedgerRRGOperationTable_RU toOperationTable;
    
        delete_from toOperationTable where
            toOperationTable.CellTableId    == _to.TableId &&
            toOperationTable.CellRecId      == _to.RecId;
    
        changecompany(fromDataAreaId)
        {
            select fromOperationTable where
                fromOperationTable.CellTableId    == _from.TableId &&
                fromOperationTable.CellRecId      == _from.RecId;
        }
    
        while (fromOperationTable)
        {
            toOperationTable.clear();
            toOperationTable.CellTableId                = _to.TableId;
            toOperationTable.CellRecId                  = _to.RecId;
            toOperationTable.LedgerPeriodCode           = fromOperationTable.LedgerPeriodCode;
            toOperationTable.BalanceType                = fromOperationTable.BalanceType;
            toOperationTable.LedgerOperation            = fromOperationTable.LedgerOperation;
            toOperationTable.Operation                  = fromOperationTable.Operation;
            toOperationTable.OffsetAccountIntervalType  = fromOperationTable.OffsetAccountIntervalType;
            toOperationTable.AccountIntervalType        = fromOperationTable.AccountIntervalType;
            toOperationTable.TypeByCorrect              = fromOperationTable.TypeByCorrect;
            toOperationTable.OffsetAccountNumMask       = fromOperationTable.OffsetAccountNumMask;
            toOperationTable.AccountNumMask             = fromOperationTable.AccountNumMask;
            toOperationTable.DataType                   = fromOperationTable.DataType;
            toOperationTable.ModelNum                   = fromOperationTable.ModelNum;
            toOperationTable.rTax25FieldId              = fromOperationTable.rTax25FieldId;
            toOperationTable.rTax25RegisterId           = fromOperationTable.rTax25RegisterId;
            toOperationTable.ConstantValue              = fromOperationTable.ConstantValue;
            toOperationTable.ConstantText               = fromOperationTable.ConstantText;
            toOperationTable.LineNum                    = fromOperationTable.LineNum;
            toOperationTable.Query                      = fromOperationTable.Query;
            toOperationTable.QueryBaseDateField         = fromOperationTable.QueryBaseDateField;
            toOperationTable.QuerySelectReportDate      = fromOperationTable.QuerySelectReportDate;
            toOperationTable.QuerySelectedField         = fromOperationTable.QuerySelectedField;
            toOperationTable.QueryFieldOperation        = fromOperationTable.QueryFieldOperation;
            toOperationTable.BalanceDetail              = fromOperationTable.BalanceDetail;
            toOperationTable.LedgerRRGEProperties_W     = fromOperationTable.LedgerRRGEProperties_W;
    
            toOperationTable.insert();
    
            this.copyDimensionInterval(fromOperationTable, toOperationTable);
            this.copyTransType(fromOperationTable, toOperationTable);
            this.copyTransOperationsTax(fromOperationTable, toOperationTable);
            this.copyAccountInterval(fromOperationTable, toOperationTable);
            this.copyOffsetAccountInterval(fromOperationTable, toOperationTable);
    
            next fromOperationTable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRTax25ProfitInterval</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copies the <c>LedgerRRGTax25ProfitInterval_RU</c> record from the source <c>Common</c> record to the destination <c>LedgerRRGTax25ProfitInterval_RU</c> record depending for the <c>Common</c> record.
    /// </summary>
    /// <param name="_from">
    ///     Source <c>Common</c> record.
    /// </param>
    /// <param name="_to">
    ///     Destination <c>Common</c> record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void copyRTax25ProfitInterval(Common _from, Common _to)
    {
        LedgerRRGTax25ProfitInterval_RU fromAccountInterval;
        LedgerRRGTax25ProfitInterval_RU toAccountInterval;

        delete_from toAccountInterval where
            toAccountInterval.OperationRecID      == _to.RecId;

        fromAccountInterval = this.rTax25ProfitInterval(_from);
        while (fromAccountInterval)
        {
            toAccountInterval.clear();
            toAccountInterval.OperationRecID    = _to.RecId;
            toAccountInterval.FromAccountId     = fromAccountInterval.FromAccountId;
            toAccountInterval.ToAccountId       = fromAccountInterval.ToAccountId;
            toAccountInterval.insert();

            next fromAccountInterval;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTransOperationsTax</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void copyTransOperationsTax(Common _from, Common _to)
    {
        LedgerRRGTransOperationsTax_RU   fromTransOperationsTax;
        LedgerRRGTransOperationsTax_RU   toTransOperationsTax;

        delete_from fromTransOperationsTax where
            fromTransOperationsTax.OpTaxTableId    == _to.TableId &&
            fromTransOperationsTax.OpTaxRecId      == _to.RecId;

        changecompany(fromDataAreaId)
        {
            select toTransOperationsTax where
                toTransOperationsTax.OpTaxTableId    == _from.TableId &&
                toTransOperationsTax.OpTaxRecId      == _from.RecId;
        }

        while (toTransOperationsTax)
        {
            fromTransOperationsTax.clear();
            fromTransOperationsTax.OpTaxTableId     = _to.TableId;
            fromTransOperationsTax.OpTaxRecId       = _to.RecId;
            fromTransOperationsTax.OperationsTax    = toTransOperationsTax.OperationsTax;
            fromTransOperationsTax.insert();
            next toTransOperationsTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTransType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void copyTransType(Common _from, Common _to)
    {
        LedgerRRGTransType_RU   fromTransType;
        LedgerRRGTransType_RU   toTransType;

        delete_from toTransType where
            toTransType.TransTypeTableId    == _to.TableId &&
            toTransType.TransTypeRecId      == _to.RecId;

        changecompany(fromDataAreaId)
        {
            select fromTransType where
                fromTransType.TransTypeTableId    == _from.TableId &&
                fromTransType.TransTypeRecId      == _from.RecId;
        }

        while (fromTransType)
        {
            toTransType.clear();
            toTransType.TransTypeTableId    = _to.TableId;
            toTransType.TransTypeRecId      = _to.RecId;
            toTransType.TransType           = fromTransType.TransType;
            toTransType.insert();
            next fromTransType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str createdId()
    {
        str res = '';

        if (wasInserted)
        {
            if (cellCopy)
            {
                res = toCellCode;
            }
            else
            {
                res = toRepCode;
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        return Dialog::newFormnameRunbase(formStr(LedgerRRGReportCopy_RU), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCopyCell</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void doCopyCell()
    {
        LedgerRRGCellTable_RU toCellTable;

        if (!skipValidate && !this.validateCell())
        {
            return;
        }

        ttsbegin;

        toCellTable = this.findToCellTable(true);
        wasInserted = toCellTable == null;

        toCellTable.CellCode = toCellCode;

        this.copyCell(fromCellTable, toCellTable);

        ttscommit;

        if (fromCellCode == toCellCode)
        {
            info(strFmt("@LedgerRRG:LedgerRRG_CellCopied", fromCellCode));
        }
        else
        {
            info(strFmt("@LedgerRRG:LedgerRRG_CellCopiedTo", fromCellCode, toCellCode));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>doCopyReportTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void doCopyReportTable()
    {
        LedgerRRGReportTable_RU toReportTable;

        if (!skipValidate && !this.validateReport())
        {
            return;
        }

        ttsbegin;

        toReportTable = LedgerRRGReportTable_RU::findByRepCode(toRepCode, true);

        wasInserted = toReportTable == null;

        toReportTable.RepCode           = toRepCode;
        toReportTable.Description       = fromReportTable.Description;
        toReportTable.Template          = fromReportTable.Template;
        toReportTable.Scale             = fromReportTable.Scale;
        toReportTable.ReportType        = fromReportTable.ReportType;
        toReportTable.TypeByCorrect     = fromReportTable.TypeByCorrect;
        toReportTable.CurrencyForCalc   = fromReportTable.CurrencyForCalc;
        toReportTable.LedgerPeriodCode  = fromReportTable.LedgerPeriodCode;
        toReportTable.PointSignNum      = fromReportTable.PointSignNum;
        toReportTable.DataType          = fromReportTable.DataType;
        toReportTable.ModelNum          = fromReportTable.ModelNum;
        toReportTable.LedgerRRGETemplates_W = fromReportTable.LedgerRRGETemplates_W;

        if (toReportTable.validateWrite())
        {
            toReportTable.write();
        }
        else
        {
            throw error("@SYS21628");
        }

        this.copyDimensionInterval(fromReportTable, toReportTable);
        this.copyTransType(fromReportTable, toReportTable);
        this.copyTransOperationsTax(fromReportTable, toReportTable);
        this.copyCellTable(fromReportTable, toReportTable);

        ttscommit;

        if (fromRepCode != toRepCode)
        {
            info(strFmt("@LedgerRRG:LedgerRRG_ReportCopiedToReport", fromRepCode, fromDataAreaId, toRepCode, curext()));
        }
        else
        {
            info(strFmt("@LedgerRRG:LedgerRRG_ReportCopied", fromRepCode, fromDataAreaId, curext()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findToCellTable</Name>
				<Source><![CDATA[
    private LedgerRRGCellTable_RU findToCellTable(boolean _forupdate = false)
    {
        LedgerRRGCellTable_RU   toCellTable;
        LedgerRRGReportTable_RU toReportTable = LedgerRRGReportTable_RU::findByRepCode(toRepCode);

        toCellTable.selectForUpdate(_forupdate);

        select toCellTable where
            toCellTable.ReportRecId     == toReportTable.RecId      &&
            toCellTable.CellCode        == toCellCode;

        if (_forupdate && !toCellTable)
        {
            toCellTable.ReportRecId     = toReportTable.RecId;
        }

        return toCellTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCellsCount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int64 getCellsCount()
    {
        LedgerRRGCellTable_RU cellTable;

        changecompany(fromDataAreaId)
        {
            fromReportTable = LedgerRRGReportTable_RU::findByRepCode(fromRepCode);

            select count(RecId) from cellTable where
                cellTable.ReportRecId      == fromReportTable.RecId;

        }

        return cellTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromArgs(Args _args)
    {
        FormRun fr;
        if (_args)
        {
            cellCopy = _args.dataset() == tableNum(LedgerRRGCellTable_RU);

            if (cellCopy)
            {
                fromCellTable   = _args.record();
                if (fromCellTable.RecId)
                {
                    fromReportTable = LedgerRRGReportTable_RU::find(fromCellTable.ReportRecId);
                    fromCellCode    = fromCellTable.CellCode;
                }
                else
                {
                    fr = _args.caller();
                    if (fr && fr.args())
                    {
                        fromReportTable = fr.args().record();
                    }
                }

                fromRepCode     = fromReportTable.RepCode;
                toRepCode       = fromReportTable.RepCode;
                toCellCode      = '';
                fromDataAreaId  = curext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        fromDataAreaId  = curext();
        clearBeforeCopy = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueDesignName()
    {
        IdentifierName ret;

        if (cellCopy)
        {
            ret = Cell;
        }
        else
        {
            ret = Report;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountInterval</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerRRGOffsetAccountInterval_RU offsetAccountInterval(Common _from)
    {
        LedgerRRGOffsetAccountInterval_RU offsetAccountInterval;
        changecompany(fromDataAreaId)
        {
            select offsetAccountInterval where
                offsetAccountInterval.OperationRecID      == _from.RecId;
        }

        return offsetAccountInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, fromDataAreaId, fromCellCode, toRepCode, toCellCode, clearBeforeCopy, skipValidate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClearBeforeCopy</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmClearBeforeCopy(boolean _clearBeforeCopy = clearBeforeCopy)
    {
        clearBeforeCopy = _clearBeforeCopy;

        return clearBeforeCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromCellCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGRepCode_RU parmFromCellCode(LedgerRRGRepCode_RU _fromCellCode = fromCellCode)
    {
        if (!prmisDefault(_fromCellCode))
        {
            if (toCellCode == fromCellCode)
            {
                toCellCode      = _fromCellCode;
            }

            fromCellCode    = _fromCellCode;
        }

        return fromCellCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDataAreaId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DataAreaId parmFromDataAreaId(DataAreaId _dataAreaId = fromDataAreaId)
    {
        fromDataAreaId = _dataAreaId;

        return fromDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromRepCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGRepCode_RU parmFromRepCode(LedgerRRGRepCode_RU _repCode = fromRepCode)
    {
        if (!prmisDefault(_repCode))
        {
            fromRepCode = _repCode;
            if (!cellCopy)
            {
                if (fromDataAreaId != curext())
                {
                    toRepCode   = fromRepCode;
                }
                else
                {
                    toRepCode   = '';
                }
            }
        }

        return fromRepCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToCellCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGRepCode_RU parmToCellCode(LedgerRRGRepCode_RU _toCellCode = toCellCode)
    {
        toCellCode = _toCellCode;

        return toCellCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToRepCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGRepCode_RU parmToRepCode(LedgerRRGRepCode_RU _toRepCode = toRepCode)
    {
        toRepCode = _toRepCode;

        return toRepCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rTax25ProfitInterval</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>LedgerRRGTax25ProfitInterval_RU</c> record depending for the <c>Common</c> record.
    /// </summary>
    /// <param name="_from">
    ///     The <c>Common</c> record.
    /// </param>
    /// <returns>
    ///     The <c>LedgerRRGTax25ProfitInterval_RU</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerRRGTax25ProfitInterval_RU rTax25ProfitInterval(Common _from)
    {
        LedgerRRGTax25ProfitInterval_RU accountInterval;

        changecompany(fromDataAreaId)
        {
            select accountInterval where
                accountInterval.OperationRecID      == _from.RecId;
        }

        return accountInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        const int RetryNum	= 5;

        if (!this.validate())
        {
            throw error("@SYS21628");
        }

        try
        {
            if (cellCopy)
            {
                this.doCopyCell();
            }
            else
            {
                this.doCopyReportTable();
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
   
        switch (version)
        {
            case CurrentVersion:
                [version, fromDataAreaId, fromCellCode, toRepCode, toCellCode, clearBeforeCopy, skipValidate] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean     ret = super(_calledFrom);

        if (_calledFrom)
        {
            if (!fromDataAreaId)
            {
                ret = checkFailed("@LedgerRRG:LedgerRRG_SelectSourceCompany");
            }

            if (!fromRepCode)
            {
                ret = checkFailed("@LedgerRRG:LedgerRRG_SelectSourceReportName");
            }

            if (!toRepCode)
            {
                ret = checkFailed("@LedgerRRG:LedgerRRG_SelectTargetReportName");
            }


            if (cellCopy)
            {
                if (!fromCellCode)
                {
                    ret = checkFailed("@LedgerRRG:LedgerRRG_SelectSourceCellName");
                }

                if (!toCellCode)
                {
                    ret = checkFailed("@LedgerRRG:LedgerRRG_SelectTargetCellName");
                }

            }
        }
        else
        {
            if (this.checkDataAreaId())
            {
                if (this.checkFromRepCode())
                {
                    if (cellCopy)
                    {
                        if (this.checkFromCellCode())
                        {
                            if (fromDataAreaId == curext() && toRepCode == fromRepCode && toCellCode == fromCellCode)
                            {
                                ret = checkFailed("@LedgerRRG:LedgerRRG_CannotCopyCell");
                            }
                            else
                            {
                                if (!this.checkToCellCode())
                                {
                                    ret = false;
                                }
                            }
                        }
                        else
                        {
                            ret = false;
                        }
                    }
                    else
                    {
                        if (fromDataAreaId == curext() && toRepCode == fromRepCode)
                        {
                            ret = checkFailed("@LedgerRRG:NewLabel1LedgerRRG_CannotCopyReport");
                        }
                        else
                        {
                            if (!this.checkToRepCode())
                            {
                                ret = false;
                            }
                        }
                    }
                }
                else
                    ret = false;
            }
            else
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCell</Name>
				<Source><![CDATA[
    private boolean validateCell()
    {
        return LedgerRRGReportValidate_RU::validateCell(fromCellCode, fromRepCode, fromDataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReport</Name>
				<Source><![CDATA[
    private boolean validateReport()
    {
        return LedgerRRGReportValidate_RU::validateReport(fromRepCode, fromDataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    server static LedgerRRGReportCopy_RU construct()
    {
        return new LedgerRRGReportCopy_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static ClassDescription description()
    {
        return "@LedgerRRG:LedgerRRG_ParametersCopy";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerRRGReportCopy_RU  ledgerRRGReportCopy;
        Object                  callerForm;
   
        ledgerRRGReportCopy = LedgerRRGReportCopy_RU::construct();

        ledgerRRGReportCopy.getLast();
        ledgerRRGReportCopy.initFromArgs(_args);

        if (ledgerRRGReportCopy.prompt())
        {
            ledgerRRGReportCopy.runOperation();
            if (_args && _args.caller())
            {
                callerForm = _args.caller();
                if (formHasMethod(callerForm, identifierStr(refresh)))
                {
                    callerForm.refresh(ledgerRRGReportCopy.createdId());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>