<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPeriodicDiscountPublisher</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// This contains some utilities and implementations to publish discount changes for <c>RetailDiscountPerformanceImprovementFeature</c> feature.
/// </summary>
public class RetailPeriodicDiscountPublisher
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>publishDiscountChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// When a discount's status is changed, we either clean up published records or trigger another batch to publish the discount.
    /// </summary>
    /// <param name = "_discount">The changed discount(should be selected for update).</param>
    public static void publishDiscountChanges(RetailPeriodicDiscount _discount)
    {
        if (_discount.Status == RetailDisabledEnabled::Enabled)
        {
            if (RetailPricingFeatureToggle::isRetailDiscountPerformanceImprovementFeatureEnabled() && !RetailPricingFeatureToggle::isRetailPricingPropertyFeatureEnabled())
            {
                RetailSharedParameters sharedParameters = RetailSharedParameters::find();

                str caption = RetailPeriodicDiscountPublisher::getCaptionForDiscounts([_discount.OfferId]);
                if (RetailPeriodicDiscountPublisher::isDuplicate(caption))
                {
                    eventSource.EventWritePricingPublishSkipped('duplicate', _discount.RecId, 0);
                    return ;
                }

                // Create a batch job for enabled discounts.
                RetailPeriodicDiscountPublishController controller = new RetailPeriodicDiscountPublishController();
                RetailPeriodicDiscountPublishContract dataContract = controller.getDataContractObject();
                dataContract.parmOfferIds([_discount.OfferId]);
                controller.parmDialogCaption(caption);

                if (sharedParameters.PricingBatchJobGroupId && BatchGroup::exist(sharedParameters.PricingBatchJobGroupId))
                {
                    controller.batchInfo().parmGroupId(sharedParameters.PricingBatchJobGroupId);
                }
                controller.runOperation();
            }
        }
        else
        // The reasons we always delete flatten tables are:
        // 1. The usage of the feature grows and sending 2 DELETE(against an empty table) SQL for customers not enabling the feature will be a small effort.
        // 2. By deleting and set to draft, we don't need to re-publish unchanged discounts when customer re-enables the feature.
        {
            // Delete records directly for disable case as it's faster and no version mismatch.
            RetailPeriodicDiscountProductLookup retailPeriodicDiscountProductLookup;
            RetailPeriodicDiscountCategoryLookup retailPeriodicDiscountCategoryLookup;
            delete_from retailPeriodicDiscountCategoryLookup where retailPeriodicDiscountCategoryLookup.OfferId == _discount.OfferId;
            delete_from retailPeriodicDiscountProductLookup where retailPeriodicDiscountProductLookup.OfferId == _discount.OfferId;
                
            RetailPeriodicDiscountPublisher::setProcessingStatus(_discount, RetailPricingDiscountProcessingStatus::Draft);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishDiscountsChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// When discounts are changed(mostly via DIXF), we either clean up published records or trigger another batch to publish the discount.
    /// </summary>
    /// <param name = "_offerIds">The changed discounts.</param>
    public static void publishDiscountsChanges(container _offerIds)
    {
        RetailSharedParameters sharedParameters = RetailSharedParameters::find();

        RetailPeriodicDiscountPublishController controller = new RetailPeriodicDiscountPublishController();
        RetailPeriodicDiscountPublishContract dataContract = controller.getDataContractObject();
        dataContract.parmOfferIds(_offerIds);

        if (sharedParameters.PricingBatchJobGroupId && BatchGroup::exist(sharedParameters.PricingBatchJobGroupId))
        {
            controller.batchInfo().parmGroupId(sharedParameters.PricingBatchJobGroupId);
        }

        controller.parmDialogCaption(RetailPeriodicDiscountPublisher::getCaptionForDiscounts(_offerIds));

        controller.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishProductDiscountChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publish new Retail Periodic Discount Table for the product that is being released.
    /// </summary>
    /// <param name = "_productRecId">The changed product record id.</param>
    public static void publishProductDiscountChanges(EcoResProductRecId _productRecId)
    {
        str caption = RetailPeriodicDiscountPublisher::getCaptionForProductMaster(_productRecId);
        if (RetailPeriodicDiscountPublisher::isDuplicate(caption))
        {
            eventSource.EventWritePricingPublishSkipped('duplicate',0, _productRecId);
            return ;
        }

        if (RetailPricingFeatureToggle::isRetailDiscountPerformanceImprovementFeatureEnabled() && !RetailPricingFeatureToggle::isRetailPricingPropertyFeatureEnabled())
        {
            // Create a batch job for re-publish discounts.
            RetailSharedParameters sharedParameters = RetailSharedParameters::find();

            RetailPeriodicDiscountPublishController controller = new RetailPeriodicDiscountPublishController();
            RetailPeriodicDiscountPublishContract dataContract = controller.getDataContractObject();
            dataContract.parmProductMasterRecId(_productRecId);

            if (sharedParameters.PricingBatchJobGroupId && BatchGroup::exist(sharedParameters.PricingBatchJobGroupId))
            {
                controller.batchInfo().parmGroupId(sharedParameters.PricingBatchJobGroupId);
            }

            controller.parmDialogCaption(caption);

            controller.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishProductVariantsChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publish new Retail Periodic Discount Table for the product that is being released.
    /// </summary>
    /// <param name = "_productRecIds">The changed product record ids.</param>
    public static void publishProductVariantsChanges(container _productRecIds)
    {
        if (RetailPricingFeatureToggle::isRetailDiscountPerformanceImprovementFeatureEnabled() && !RetailPricingFeatureToggle::isRetailPricingPropertyFeatureEnabled())
        {
            RetailSharedParameters sharedParameters = RetailSharedParameters::find();

            RetailPeriodicDiscountPublishController controller = new RetailPeriodicDiscountPublishController();
            RetailPeriodicDiscountPublishContract dataContract = controller.getDataContractObject();
            dataContract.parmProductMasterRecIds(_productRecIds);

            if (sharedParameters.PricingBatchJobGroupId && BatchGroup::exist(sharedParameters.PricingBatchJobGroupId))
            {
                controller.batchInfo().parmGroupId(sharedParameters.PricingBatchJobGroupId);
            }

            controller.parmDialogCaption(RetailPeriodicDiscountPublisher::getCaptionForProductMasters());

            controller.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishProductVariantChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publish new Retail Periodic Discount Table for the product that has new variants.
    /// </summary>
    /// <param name = "_itemId">The changed product item id.</param>
    public static void publishProductVariantChanges(ItemId _itemId)
    {
        InventTable inventTable = InventTable::find(_itemId);
        if (RetailPeriodicDiscountPublisher::isAssociatedWithDiscount(inventTable.Product))
        {
            RetailPeriodicDiscountPublisher::publishProductDiscountChanges(inventTable.Product);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssociatedWithDiscount</Name>
				<Source><![CDATA[
    internal static boolean isAssociatedWithDiscount(EcoResProductRecId _masterProductId)
    {
        RetailPeriodicDiscount retailPeriodicDiscount;
        RetailPeriodicDiscountLine retailPeriodicDiscountLine;
        RetailGroupMemberLine retailGroupMemberLine;

        select firstonly RecId from retailGroupMemberLine where retailGroupMemberLine.Product == _masterProductId
            exists join retailPeriodicDiscountLine where retailPeriodicDiscountLine.RetailGroupMemberLine == retailGroupMemberLine.RecId
            exists join retailPeriodicDiscount where retailPeriodicDiscount.OfferId == retailPeriodicDiscountLine.OfferId && retailPeriodicDiscount.Status == RetailDisabledEnabled::Enabled;

        return retailGroupMemberLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDuplicate</Name>
				<Source><![CDATA[
    internal static boolean isDuplicate(str _caption)
    {
        Batch batch;
        container batchStatus = [BatchStatus::Waiting, BatchStatus::Ready];
        select firstonly RecId from batch
            where batch.ClassNumber == classNum(RetailPeriodicDiscountPublishController)
            && batch.Status in batchStatus
            && batch.caption == _caption;

        return batch.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaptionForProductMaster</Name>
				<Source><![CDATA[
    private static str getCaptionForProductMaster(EcoResProductRecId _productRecId)
    {
        InventTable inventTable = InventTable::findByProduct(_productRecId);
        return strFmt('@RetailPricing:RetailPeriodicDiscountPublishBatchForProductMasterLabel', inventTable.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaptionForDiscounts</Name>
				<Source><![CDATA[
    private static str getCaptionForDiscounts(container _offerIds)
    {
        return strFmt('@RetailPricing:RetailPeriodicDiscountPublishBatchForDiscountLabel', con2Str(_offerIds));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaptionForProductMasters</Name>
				<Source><![CDATA[
    private static str getCaptionForProductMasters()
    {
        return strFmt('@RetailPricing:RetailPeriodicDiscountPublishBatchForProductsLabel');
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcessingStatus</Name>
				<Source><![CDATA[
    private static void setProcessingStatus(RetailPeriodicDiscount _retailPeriodicDiscount, RetailPricingDiscountProcessingStatus _status)
    {
        ttsbegin;

        _retailPeriodicDiscount.ProcessingStatus = _status;

        if (RetailPricingSkipChangeTrackingForDisabledDiscountsFlight::instance().isEnabled())
        {
            // doUpdate() won't tirgger event handler, so manually trigger price change tracking.
            RetailPriceChangeTrackingEventHandlerDispatcher::scheduleBatchForOnUpdatedDataEvent(
                _retailPeriodicDiscount,
                new ModifyFieldEventArgs(fieldNum(RetailPeriodicDiscount, ProcessingStatus)));
        }

        _retailPeriodicDiscount.doUpdate();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>