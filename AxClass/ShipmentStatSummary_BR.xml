<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ShipmentStatSummary_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Summarizes the shipment information of transfer orders per volume type.
/// Net weight, gross weight, volume quantity of the volumes that are from the same type will be added.
/// </summary>
public class ShipmentStatSummary_BR
{
    Map                   shipmentsPerVolumeType;
    DlvStateRegistered_BR carState;
    TMSCarNumber          carNumber;
    List                  volumeTypes;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the shipment information received to the mapping.
    /// </summary>
    /// <param name="_inventQuantity">
    /// Inventory quantity of the items in this shipment.
    /// </param>
    /// <param name="_volume">
    /// Inventory quantity of the items in this shipment.
    /// </param>
    /// <param name="_volumeType">
    /// Volume type being transported in this shipment.
    /// </param>
    /// <param name="_volumeQuantity">
    /// Volume quantity for the volume type.
    /// </param>
    /// <param name="_grossWeight">
    /// Gross weight of the volume type.
    /// </param>
    /// <param name="_netWeight">
    /// Net weight of the volume type.
    /// </param>
    /// <remarks>
    /// If the volume type already exists in the map, the volume quantity, net weight and gross weight
    /// will be added with the previous data inserted for that volume type.
    /// </remarks>
    protected void addShipment(InventQty _inventQuantity, Volume _volume, VolumeType_BR _volumeType, VolumeQty_BR _volumeQuantity, GrossWeight _grossWeight, ItemNetWeight _netWeight)
    {
        ShipmentStat_BR shipmentStat;

        if (this.hasShipmentForVolumeType(_volumeType))
        {
            shipmentStat = this.getShipmentForVolumeType(_volumeType);

            shipmentStat.parmVolume(shipmentStat.parmVolume()                 + _volume);
            shipmentStat.parmInventQuantity(shipmentStat.parmInventQuantity() + _inventQuantity);
            shipmentStat.parmGrossWeight(shipmentStat.parmGrossWeight()       + _grossWeight);
            shipmentStat.parmItemNetWeight(shipmentStat.parmItemNetWeight()   + _netWeight);
            shipmentStat.parmVolumeQuantity(shipmentStat.parmVolumeQuantity() + _volumeQuantity);
            shipmentStat.parmVolumeType(shipmentStat.parmVolumeType());
        }
        else
        {
            volumeTypes.addEnd(_volumeType);

            shipmentStat = new ShipmentStat_BR();

            shipmentStat.parmVolume(_volume);
            shipmentStat.parmInventQuantity(_inventQuantity);
            shipmentStat.parmGrossWeight(_grossWeight);
            shipmentStat.parmItemNetWeight(_netWeight);
            shipmentStat.parmVolumeQuantity(_volumeQuantity);
            shipmentStat.parmVolumeType(_volumeType);

            shipmentsPerVolumeType.insert(_volumeType, shipmentStat);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentForVolumeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the shipment information for a given volume type.
    /// </summary>
    /// <param name="_volumeType">
    /// Volume type to be searched.
    /// </param>
    /// <returns>
    /// Shipment information for the given volume type.
    /// </returns>
    public ShipmentStat_BR getShipmentForVolumeType(VolumeType_BR _volumeType)
    {
        return shipmentsPerVolumeType.lookup(_volumeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVolumeTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of volume types stored in the current helper.
    /// </summary>
    /// <returns>
    /// List of volume types stored in the current helper.
    /// </returns>
    public List getVolumeTypes()
    {
        return volumeTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasShipmentForVolumeType</Name>
				<Source><![CDATA[
    private boolean hasShipmentForVolumeType(VolumeType_BR _volumeType)
    {
        return shipmentsPerVolumeType.exists(_volumeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        shipmentsPerVolumeType = new Map(Types::String, Types::Class);

        volumeTypes = new List(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCarNumber</Name>
				<Source><![CDATA[
    public TMSCarNumber parmCarNumber(TMSCarNumber _carNumber = carNumber)
    {
        carNumber = _carNumber;

        return carNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCarState</Name>
				<Source><![CDATA[
    public DlvStateRegistered_BR parmCarState(DlvStateRegistered_BR _carState = carState)
    {
        carState = _carState;

        return carState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromLoadForSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the helper object that summarizes the shipment information per volume type for a given sales order.
    /// </summary>
    /// <param name="_loadId">
    /// Id of the load table that contains the transfer order being transported.
    /// </param>
    /// <param name="_salesOrderId">
    /// Id of the sales order that contains the lines being transported.
    /// </param>
    /// <param name="_salesParmSubTable">
    /// SalesParmSubTable buffer, used to restrict this calculation only to the the sales lines that are being invoiced
    /// </param>
    /// <returns>
    /// Returns a new instance of the helper class that summarizes the shipment information per volume type.
    /// </returns>
    public static ShipmentStatSummary_BR constructFromLoadForSalesOrder(WHSLoadId _loadId, WHSOrderNum _salesOrderId, SalesParmSubTable _salesParmSubTable)
    {
        ShipmentStatSummary_BR shipmentsSummary = new ShipmentStatSummary_BR();
        WHSLoadLine            loadLine;
        InventTable            item;
        WHSLoadTable           loadTable = WHSLoadTable::find(_loadId);

        SalesParmLine          salesParmLine;
        SalesLine              salesLine;

        shipmentsSummary.parmCarNumber(loadTable.CarNumber);
        shipmentsSummary.parmCarState(loadTable.CarState_BR);

        while select PickedQty, ItemId, VolumeType_BR, VolumeQty_BR from loadLine
            where loadLine.LoadId            == _loadId
                && loadLine.OrderNum         == _salesOrderId
                && loadLine.InventTransType  == InventTransType::Sales
                && loadLine.TransportRequest == NoYes::No
            exists join salesLine
                where loadLine.InventTransId == salesLine.InventTransId
            exists join salesParmLine
                where salesParmLine.SalesLineRecId == salesLine.RecId
                   && salesParmLine.ParmId         == _salesParmSubTable.ParmId
                   && salesParmLine.TableRefId     == _salesParmSubTable.TableRefId
                   && salesParmLine.OrigSalesId    == _salesParmSubTable.OrigSalesId
        {
            item = InventTable::find(loadLine.ItemId);

            shipmentsSummary.addShipment(loadLine.PickedQty,
                                         item.grossVolume() * loadLine.PickedQty,
                                         loadLine.VolumeType_BR,
                                         loadLine.VolumeQty_BR,
                                         item.grossWeight() * loadLine.PickedQty,
                                         item.NetWeight * loadLine.PickedQty);
        }

        return shipmentsSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromLoadForTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the helper object that summarizes the shipment information per volume type for a given transfer order id.
    /// </summary>
    /// <param name="_loadId">
    /// Id of the load table that contains the transfer order being transported.
    /// </param>
    /// <param name="_transferOrderId">
    /// Id of the transfer order that contains the lines being transported.
    /// </param>
    /// <returns>
    /// Returns a new instance of the helper class that summarizes the shipment information per volume type.
    /// </returns>
    public static ShipmentStatSummary_BR constructFromLoadForTransferOrder(WHSLoadId _loadId, WHSOrderNum _transferOrderId)
    {
        ShipmentStatSummary_BR shipmentsSummary = new ShipmentStatSummary_BR();
        WHSLoadLine            loadLine;
        InventTable            item;
        WHSLoadTable           loadTable = WHSLoadTable::find(_loadId);

        shipmentsSummary.parmCarNumber(loadTable.CarNumber);
        shipmentsSummary.parmCarState(loadTable.CarState_BR);

        while select PickedQty, ItemId, VolumeType_BR, VolumeQty_BR from loadLine
            where loadLine.LoadId            == _loadId
                && loadLine.OrderNum         == _transferOrderId
                && loadLine.InventTransType  == InventTransType::TransferOrderShip
                && loadLine.TransportRequest == NoYes::No
        {
            item = InventTable::find(loadLine.ItemId);

            shipmentsSummary.addShipment(loadLine.PickedQty,
                                         item.grossVolume() * loadLine.PickedQty,
                                         loadLine.VolumeType_BR,
                                         loadLine.VolumeQty_BR,
                                         item.grossWeight() * loadLine.PickedQty,
                                         item.NetWeight * loadLine.PickedQty);
        }

        return shipmentsSummary;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>