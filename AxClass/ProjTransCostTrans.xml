<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransCostTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransCostTrans extends ProjTransCost
{
    ProjCostTrans   projCostTrans;

    boolean         calcTransCost;
    Amount          transCost;
    boolean         calcTransCostMST;
    AmountMST       transCostMST;
    boolean         getCanBeInvoiced;
    boolean         canBeInvoiced;
    boolean         calcLedgerCostAmountMST;
    AmountMST       ledgerCostAmountMST;
    boolean         calcTransTurnover;
    AmountCur       transTurnover;
    boolean         calcLedgerSalesAmountMST;
    AmountMST       ledgerSalesAmountMST;

    ProjCostTransTaxExtensionIN projCostTransTaxExtensionIN;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return projCostTrans.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether a transaction can be adjusted.
    /// </summary>
    /// <returns>
    /// true if the transaction can be adjusted; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A transaction can only be adjusted if it has been posted.
    /// </remarks>
    public boolean adjustable()
    {
        ProjCostTrans       childProjCostTrans;
        ProjCostTransCost   projCostTransCost;
        ProjCostTransSale   projCostTransSale;
        boolean             adjustableCost = true;
        boolean             adjustableSale = true;

        if (projCostTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
        {
            return false;
        }

        if (projCostTrans.CategoryId && ProjCategory::find(projCostTrans.CategoryId).SetupEstimate == NoYes::Yes)
        {
            return false;
        }

        select firstonly RecId from childProjCostTrans
            where childProjCostTrans.AdjRefTransId == projCostTrans.TransId;

        if (!childProjCostTrans.RecId)
        {
            if (projCostTrans.AdjRefTransId)
            {
                ProjCostTrans parentTrans;

                select firstonly RecId, Qty from parentTrans
                        where parentTrans.TransId == projCostTrans.AdjRefTransId;

                if (parentTrans.RecId)
                {
                    if ((parentTrans.Qty > 0 && projCostTrans.Qty < 0) ||
                        (parentTrans.Qty < 0 && projCostTrans.Qty > 0))
                    {
                        return false;
                    }
                }
            }
        }
        else
        {
            return false;
        }

        while select TransStatus from projCostTransCost
            where projCostTransCost.TransId == projCostTrans.TransId
        {
            adjustableCost = adjustableCost && ProjParameters::adjustable(projCostTransCost.TransStatus);
            if (!adjustableCost)
            {
                break;
            }
        }

        while select TransStatus from projCostTransSale
            where projCostTransSale.TransId == projCostTrans.TransId
        {
            adjustableSale = adjustableSale && ProjParameters::adjustable(projCostTransSale.TransStatus);
            if (!adjustableSale)
            {
                break;
            }
        }

        return !childProjCostTrans.RecId && adjustableCost && adjustableSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Assessable value for this transaction.
    /// </summary>
    /// <returns>
    /// Assessable value for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountCur assessableValue_IN()
    {
        return projCostTransTaxExtensionIN.AssessableValueTransactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(
        boolean _chargeable = false)
    {
        ProjCostTransSale   projCostTransSale;
        boolean             ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostTrans)))
        {
            if (!getCanBeInvoiced)
            {
                getCanBeInvoiced = true;
                while select projCostTransSale
                    where projCostTransSale.TransId == this.transId()
                {
                    canBeInvoiced = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale).canBeInvoiced();
                    if (canBeInvoiced)
                    {
                        break;
                    }
                }
            }

            ret = canBeInvoiced;
        }
        else
        {
            ret = super(_chargeable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the category ID for this transaction.
    /// </summary>
    /// <returns>
    /// The category ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public ProjCategoryId categoryId()
    {
        return projCostTrans.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the cost price for this transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public CostPrice costPrice()
    {
        CostPrice ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostTrans)))
        {
            ret = this.qty() ? CurrencyExchangeHelper::price(this.transCost() / this.qty(), this.currencyIdCost()) : 0;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the costs that are reported by this transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the costs reported by this transaction.
    /// </returns>
    /// <remarks>
    /// The costs are always reported in the company currency. Therefore, this method calls the
    /// <c>standardCurrency</c> method of the <c>CompanyInfo</c> class.
    /// </remarks>
    public CurrencyCode currencyIdCost()
    {
        return projCostTrans.CurrencyIdCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currency code for sales amounts reported by this transaction.
    /// </summary>
    /// <returns>
    /// The currency code for sales amounts reported by this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projCostTrans.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultdimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default dimensions for this transaction.
    /// </summary>
    /// <returns>
    /// The default dimension for this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden to provide the necessary
    /// functionality for the specific cost transaction.
    /// </remarks>
    public DimensionDefault defaultdimension()
    {
        return projCostTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction has been invoiced.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public  boolean invoiced()
    {
        ProjCostTransSale   projCostTransSale;
        boolean             ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostTrans)))
        {
            while select projCostTransSale
                where projCostTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale).invoiced();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice date of this transaction.
    /// </summary>
    /// <returns>
    /// A null date.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public InvoiceDate invoiceDate()
    {
        ProjCostTransSale   projCostTransSale;
        InvoiceDate         ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostTrans)))
        {
            while select projCostTransSale
                where projCostTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale).invoiceDate();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice ID of the invoice for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjInvoiceId invoiceId()
    {
        ProjCostTransSale   projCostTransSale;
        ProjInvoiceId       ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostTrans)))
        {
            while select projCostTransSale
                where projCostTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale).invoiceId();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the correction field is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The value of the correction field is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes to support storno.
    /// </remarks>
    public LedgerCorrection isCorrection()
    {
        LedgerCorrection ret;

        ret = projCostTrans.IsCorrection;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerCostAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost amount to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountMST ledgerCostAmountMST()
    {
        Amount              ret;
        ProjCostTransCost   projCostTransCost;
        ProjTrans           projTransCost;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostTrans)))
        {
            if (!calcLedgerCostAmountMST)
            {
                calcLedgerCostAmountMST = true;
                while select projCostTransCost
                    where projCostTransCost.TransId == projCostTrans.TransId
                {
                    projTransCost = ProjTrans::newProjCostTransCost(projCostTrans, projCostTransCost);
                    ledgerCostAmountMST += projTransCost.ledgerCostAmountMST();
                }
            }

            ret = ledgerCostAmountMST;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales amount to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountMST ledgerSalesAmountMST()
    {
        AmountMST           ret;
        ProjCostTransSale   projCostTransSale;
        ProjTrans           projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostTrans)))
        {
            if (!calcLedgerSalesAmountMST)
            {
                calcLedgerSalesAmountMST = true;
                while select projCostTransSale
                    where projCostTransSale.TransId == projCostTrans.TransId
                {
                    projTransSale = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale);
                    ledgerSalesAmountMST += projTransSale.ledgerSalesAmountMST();
                }
            }

            ret = ledgerSalesAmountMST;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return projCostTrans.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumRetailPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Maximum retail price value for this transaction.
    /// </summary>
    /// <returns>
    /// Maximum retail price value for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public MaximumRetailPrice_IN maximumRetailPrice_IN()
    {
        return projCostTransTaxExtensionIN.MaximumRetailPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether budgetary control is enabled.
    /// </summary>
    /// <returns>
    ///    Always true.
    /// </returns>
    public boolean mustHandleBudget()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjCostTrans _projCostTrans)
    {
        projCostTrans   = _projCostTrans;

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            projCostTransTaxExtensionIN = ProjCostTransTaxExtensionIN::findByProjCostTrans(_projCostTrans.RecId);
        }
        // <GIN>

        super(_projCostTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the origin of costs on this transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjOriginCost::GeneralJournal</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjOrigin originCost()
    {
        return projCostTrans.TransactionOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ID of the project associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public ProjId projId()
    {
        return projCostTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction is from a project proposal.
    /// </summary>
    /// <returns>
    /// true if this transaction is from a project proposal; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction. This base class implementation returns false.
    /// </remarks>
    public  boolean proposal()
    {
        ProjCostTransSale   projCostTransSale;
        boolean             ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostTrans)))
        {
            while select projCostTransSale
                where projCostTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale).proposal();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project proposal that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public  ProjProposalId proposalId()
    {
        ProjCostTransSale   projCostTransSale;
        ProjProposalId      ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostTrans)))
        {
            while select projCostTransSale
                where projCostTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale).proposalId();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return projCostTrans.psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    public Qty qty()
    {
        // Update qty to negative if it is a credit note >

        boolean invoiced   = ProjProposalJour::find(ProjProposalCost::find(this.transId(),this.proposalId()).ProposalId).LineProperty   == ProjLinePropertyCode::Invoiced;
        ProjCostTransCost   projCostTransCost;
        Qty                 costTransQty = projCostTrans.Qty;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select TransStatus from projCostTransCost
                where projCostTransCost.TransId == this.transId();

            //  Quantity returned doesn't apply for Selected for credit note transactions
            if (invoiced && projCostTransCost.TransStatus != ProjTransStatus::MarkedCreditnote)
            {
                costTransQty =  (select projInvoiceCost
                                    where projInvoiceCost.ProjInvoiceId == ProjProposalJour::find(ProjProposalCost::find(this.transId(),this.proposalId()).ProposalId).ProjInvoiceId
                                    && projInvoiceCost.TransId       == this.transId()).Qty;
            }
            else
            {
                if (projCostTransCost.TransStatus   == ProjTransStatus::CreditnoteProposal)
                {
                    costTransQty = -projCostTrans.Qty;
                }
            }
        }

        return costTransQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return projCostTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>RecId</c> value for the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the resource.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return projCostTrans.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>RecId</c> value for the resource category that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the resource category.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return projCostTrans.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    SalesPrice salesPrice()
    {
        SalesPrice  ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostTrans)))
        {
            ret = this.qty() ? CurrencyExchangeHelper::price(this.transTurnover() / this.qty(), this.currencyIdSales()) : 0;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjCostTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projCostTrans.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return projCostTrans.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public  Amount transCost()
    {
        Amount              ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostTrans)))
        {
            ret = projCostTrans.TotalCostAmountCur;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCostMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in company currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public AmountMST transCostMST()
    {
        Amount              ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostTrans)))
        {
            ret = CurrencyExchangeHelper::mstAmount(projCostTrans.TotalCostAmountCur, projCostTrans.CurrencyIdCost, projCostTrans.TransDate);
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public TransDate transDate()
    {
        return projCostTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return projCostTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        AmountCur           ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostTrans)))
        {
            ret = projCostTrans.TotalSalesAmountCur;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transaction text, that is, the description.
    /// </summary>
    /// <returns>
    /// The transaction text, that is, the description.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public TransTxt txt()
    {
        return projCostTrans.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public Voucher voucherInvoice()
    {
        return ProjInvoiceJour::find(this.invoiceId(),this.invoiceDate()).LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the original voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Voucher voucherOriginal()
    {
        return projCostTrans.VoucherJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify whether the transaction is an intercompany transaction.
    /// </summary>
    /// <returns>
    /// True if the transaction is an intercompany; otherwise false.
    /// </returns>
    public boolean isIntercompany()
    {
        return projCostTrans.isIntercompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lendingLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the lending legal entity.
    /// </summary>
    public DataAreaId lendingLegalEntity()
    {
        DataAreaId ret = curExt();

        if (this.isIntercompany())
        {
            ret = CompanyInfo::findRecId(ResourceFacade::getLegalEntity(projCostTrans.Resource)).DataArea;

            if (!ret && projCostTrans.VendInvoiceTrans && ProjPendingVendorInvoiceIntercompanyCheckFlight::instance().isEnabled())
            {
                CustInvoiceTable custInvoiceTable = VendInvoiceTrans::getIntercompanyCustInvoiceTable(projCostTrans.VendInvoiceTrans, projCostTrans.ProjId, projCostTrans.DataAreaId);

                if (custInvoiceTable.ProjIntercompany && custInvoiceTable.ProjIntercompany == projCostTrans.DataAreaId)
                {
                    ret = custInvoiceTable.DataAreaId;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>