<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCopyTerminalInformation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Reads the terminal IDs from the dialog and updates the related tables.
/// </summary>
class RetailCopyTerminalInformation extends RunBaseBatch implements BatchRetryable
{
    RetailTerminalTable    tTerminalTable;
    FormDataSource      tTerminalTable_DS;
    RetailTerminalId       terminalIdf;
    RetailTerminalId       terminalIdt;
    DialogRunbase       dialog;
    RetailCopyTerminalInfo _type;

    DialogField         fieldTerminalIdFrom;
    DialogField         fieldTerminalIdTo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the FromTerminalID value and ToTerminalID values from the user.
    /// </summary>
    /// <returns>
    /// The object variable that holds the terminal data.
    /// </returns>
    Object dialog()
    {
    ;

        dialog = super();

        dialog.caption(enum2str(_type));

        dialog.addGroup("@RET4535");
        fieldTerminalIdFrom = dialog.addField(extendedtypestr(RetailTerminalId),"@RET4536");
        fieldTerminalIdTo = dialog.addFieldValue(extendedtypestr(RetailTerminalId),terminalIdt,"@RET4537");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the terminal ID values from the dialog.
    /// </summary>
    /// <returns>
    /// true if the values are retrieved, else error.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// thrown if the terminal ID values are blank.
    /// </exception>
    boolean getFromDialog()
    {
        ;

        terminalIdf = fieldTerminalIdFrom.value();
        terminalIdt = fieldTerminalIdTo.value();

        if (terminalIdf && terminalIdt)
        {
            return super();
        }
        else
        {
            throw error ("@RET4538");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes the variables with the terminal data.
    /// </summary>
    /// <param name="_args">
    /// Argument variable that holds the dataset information.
    /// </param>
    /// <exception cref="Exception::Error">
    /// thrown if the dataset data is empty.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// thrown if the dataset data doesnot match with <c>RetailTerminalTable</c> table.
    /// </exception>
    void initFromArgs(Args _args)
    {
        if (_args && _args.dataset())
        {
            if (_args.dataset() == tablenum(RetailTerminalTable))
            {
                _type               = _args.parmEnum();
                tTerminalTable      = _args.record();
                tTerminalTable_DS   = FormDataUtil::getFormDataSource(tTerminalTable);
                terminalIdt         = tTerminalTable.terminalId;
            }
            else
                throw error ("@RET4123");
        }
        else
        {
            throw error ("@RET4123");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RBOCopyReceiptTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates the <c>RetailTerminalReceiptTxt</c> table with the new terminal ID value.
    /// </summary>
    /// <param name="_terminalId">
    /// The old terminal ID value.
    /// </param>
    /// <param name="_terminalIdNew">
    /// The terminal ID value that is to be updated.
    /// </param>
    /// <param name="_topBottom">
    /// An enum value that indicates the type of receipt text.
    /// </param>
    void RBOCopyReceiptTxt(RetailTerminalId _terminalId,RetailTerminalId _terminalIdNew,RetailTopBottom _topBottom)
    {
        RetailTerminalReceiptTxt   tTerminalReceiptOld;
        RetailTerminalReceiptTxt   tTerminalReceiptTxtNew;
    ;
        ttsbegin;

        while select tTerminalReceiptOld
        where   tTerminalReceiptOld.relation        == RetailTerminalStoreEnum::Terminal
        &&      tTerminalReceiptOld.relationCode    == _terminalId
        &&      tTerminalReceiptOld.type            == _topBottom
        {
            tTerminalReceiptTxtNew = RetailTerminalReceiptTxt::find(tTerminalReceiptOld.relation,
                                                                 _terminalIdNew,
                                                                 tTerminalReceiptOld.lineNum,
                                                                 tTerminalReceiptOld.type,
                                                                 true);
            if (!tTerminalReceiptTxtNew)
            {
                buf2buf(tTerminalReceiptOld,tTerminalReceiptTxtNew);
                tTerminalReceiptTxtNew.relationCode = _terminalIdNew;
                tTerminalReceiptTxtNew.insert();
            }
            else
            {
                buf2buf(tTerminalReceiptOld,tTerminalReceiptTxtNew);
                tTerminalReceiptTxtNew.relationCode = _terminalIdNew;
                tTerminalReceiptTxtNew.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailCopyTerminalFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates the <c>RetailTerminalTable</c> table with the terminal ID values.
    /// </summary>
    /// <param name="_terminalId">
    /// The old terminal ID value.
    /// </param>
    /// <param name="_terminalIdNew">
    /// The updated terminal ID value.
    /// </param>
    void RetailCopyTerminalFields(RetailTerminalId _terminalId,RetailTerminalId _terminalIdNew)
    {
        RetailTerminalTable    tTerminalTableOld = RetailTerminalTable::find(_terminalId);
        RetailTerminalTable    tTerminalTableNew = RetailTerminalTable::find(_terminalIdNew, true);

        // save previous values
        boolean previousSupportOffline = tTerminalTableNew.SupportOffline;
        RefRecId previousOfflineDatabase = tTerminalTableNew.OfflineDatabaseProfile;
        FiscalDocumentSeries_BR previousFiscalDocumentSeries = tTerminalTableNew.FiscalDocumentSeries;

        buf2buf(tTerminalTableOld,tTerminalTableNew);
        tTerminalTableNew.terminalId = _terminalIdNew;

        // restore previous values that cannot be updated
        tTerminalTableNew.SupportOffline = previousSupportOffline;
        tTerminalTableNew.OfflineDatabaseProfile = previousOfflineDatabase;
        tTerminalTableNew.FiscalDocumentSeries = previousFiscalDocumentSeries;

        ttsbegin;

        if (!tTerminalTableNew)
        {
            tTerminalTableNew.insert();
        }
        else
        {
            tTerminalTableNew.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the parameters into the <c>RetailTerminalReceiptTxt</c>,<c>RetailTerminalTable</c> tables.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Thrown when the type doesnot match with the specified options.
    /// </exception>
    void run()
    {
        Switch(_type)
        {
        //Fields
            case    RetailCopyTerminalInfo::Fields             :
               this.RetailCopyTerminalFields(terminalIdf,terminalIdt);
               break;
        //TopReceiptTxt
            case    RetailCopyTerminalInfo::TopReceiptTxt      :
                this.RBOCopyReceiptTxt(terminalIdf,terminalIdt,RetailTopBottom::Top);
                break;
        //BottomReceiptTxt
            case    RetailCopyTerminalInfo::BottomReceiptTxt   :
                this.RBOCopyReceiptTxt(terminalIdf,terminalIdt,RetailTopBottom::Bottom);
                break;
        //CopyAllTerminalInfo
            case    RetailCopyTerminalInfo::AllTerminalInfo    :
                this.RetailCopyTerminalFields(terminalIdf,terminalIdt);
                this.RBOCopyReceiptTxt(terminalIdf,terminalIdt,RetailTopBottom::Top);
                this.RBOCopyReceiptTxt(terminalIdf,terminalIdt,RetailTopBottom::Bottom);
                break;
            default :
                throw error("@RET4220");
        }

        info("@REX4520991");

        tTerminalTable_DS.reread();
        tTerminalTable_DS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;

        ret = super(packedClass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(args args)
    {
        RetailCopyTerminalInformation rboCopyTerminalInformation = new RetailCopyTerminalInformation();
    ;

        rboCopyTerminalInformation.initFromArgs(args);
        rboCopyTerminalInformation.init();

        if (rboCopyTerminalInformation.prompt())
            rboCopyTerminalInformation.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>