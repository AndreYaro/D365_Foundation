<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetProposalAcquisitionAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetProposalAcquisitionAdj</c> class is used to create Fixed Asset Acquisition Adjustment
///    Proposals for the asset journal.
/// </summary>
class AssetProposalAcquisitionAdj extends AssetProposal implements BatchRetryable
{
    private DialogField dialogRunDate;
    private const Version ProposalAcquisitionAdjVersion = 100;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction type of the acquisition adjustment for the proposal.
    /// </summary>
    /// <returns>
    ///    Always returns a value of <c>AcquisionAdj</c>.
    /// </returns>
    AssetTransTypeJournal assetTransType()
    {
        return AssetTransTypeJournal::AcquisitionAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the Acquisition Adjustment Proposal Selection dialog box.
    /// </summary>
    /// <returns>
    ///    The dialog box for the Acquisition Adjustment Proposal.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@SYS115677");

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            dialogRunDate = dialog.addFieldValue(extendedTypeStr(AssetTransDate), runDate, "@SYS14656", "@ApplicationSuite_Localization:AcquisitionAdjProposalToDate");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        boolean retValue = super();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            runDate = dialogRunDate.value();
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        Query    query = new Query(queryStr(assetProposal));
        QueryBuildRange qr;

        super();

        query.name("@SYS115677");
        qr = query.dataSourceTable(tableNum(AssetBookTable)).addRange(fieldNum(AssetBookTable, CurrentOperationsTax));
        qr.status(1);

        qr = query.dataSourceTable(tableNum(AssetBook)).addRange(fieldNum(AssetBook, Status));
        qr.value(queryValue(AssetStatus::Open));
        qr.status(1);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the Asset Acquisition Adjustment journal lines for outstanding invoices associated with the
    ///    assets that have not been acquired and are marked as adjustments.
    /// </summary>
    /// <remarks>
    ///    The asset journal line entry is created by using the line amount and offset account from the
    ///    corresponding invoice line.
    /// </remarks>
    public void run()
    {
        AssetJournal        assetJournal;
        AssetBook           assetBook;
        AssetTable          assetTable;
        AssetTransDate      transDate;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoLine_Asset vendInvoiceInfoLine_Asset;
        VendInvoiceJour     vendInvoiceJour;
        InventTable         inventTable;
        InventModelGroup    inventModelGroup;
        ItemGroupId         itemGroupId;
        LedgerDimensionDefaultAccount defaultLedgerDimension;
        VendInvoiceTrans    vendorInvoiceTrans;
        AmountMST           itemMiscChargesAmount;
        AmountMST           lineAmount;
        AmountMST           totalAcquisitionAdjAmount;
        CurrencyExchangeHelper transExchRateHelper;

        // <GEERU>
        boolean                     countryRegion_RU    = SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]);
        // </GEERU>

        assetJournal = new AssetJournal(journalNum, this.assetTransType());

        // <GCN>
        if (assetJournal && LedgerParameters::isChineseVoucher_CN())
        {
            // Set the voucher type for asset journal with the value user selected.
            assetJournal.parmVoucherType_CN(voucherType_CN);
        }
        // </GCN>
        ttsbegin;

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(AssetBook)))
            {
                assetBook = queryRun.get(tableNum(AssetBook));
                assetTable = queryRun.get(tableNum(AssetTable));
                fiscalCalendarPeriod = null;

                AssetCacheManager::removeCacheAssetTrans(assetBook.AssetId, assetBook.BookId);

                // <GCN>
                // the acquisition value must not be adjusted for fixed asset which depreciation method is SYDM.
                if (AssetParameters::isDepreciationMethodsEnabled())
                {
                    if (assetBook
                        && assetBook.depreciationMethod() == AssetDepreciationMethod::SumYearDigits_CN)
                    {
                        checkFailed(strFmt(AssetBook::txtAjustmentNotAllowedForSYDM_CN(), assetBook.AssetId));
                        continue;
                    }
                }
                // </GCN>
                if (assetBook.AcquisitionPrice && !assetBook.IsDerogatoryBook_FR)
                {
                    // if it is purchase, acquisition date must be used.
                    transDate = this.initFirstDate(assetBook.AcquisitionDate, assetBook.AssetId);
                    boolean isFromAP;

                    // Note that there may be multiple lines, so must be a loop.
                    // Select only active lines
                    while
                        select AssetId
                            from vendInvoiceInfoLine_Asset
                            // <GCN>
                            join LineAmount, ItemId, InventTransId, ParmId, InventDimId, SourceDocumentLine, ProcurementCategory, OrderAccount, TaxGroup from vendInvoiceInfoLine
                            // </GCN>
                            where
                                vendInvoiceInfoLine_Asset.AssetId == assetBook.AssetId
                                && vendInvoiceInfoLine_Asset.AssetAcquired == NoYes::No
                                && vendInvoiceInfoLine_Asset.AssetTransTypePurch == AssetTransTypePurch::AcquisitionAdj
                                && vendInvoiceInfoLine_Asset.VendInvoiceInfoLineRecId == vendInvoiceInfoLine.RecId
                                && vendInvoiceInfoLine.ParmId != ''
                    {
                        // If the item group does not have PostOnHandFinancial set, then
                        // we need to get the account from the PurchConsump
                        inventTable         = InventTable::find(vendInvoiceInfoLine.ItemId);
                        inventModelGroup    = inventTable.modelGroup();
                        itemGroupId         = inventTable.itemGroupId();
                        isFromAP = true;

                        if (inventModelGroup.PostOnhandFinancial)
                        {
                            // we get the ledgerAccount from the invent issue FA account when
                            // we do the acquisition, and the invent issue account if we don't have that
                            defaultLedgerDimension = InventPosting::itemLedgerDimensionFromParameter(
                                                                        this.buildItemLedgerDimensionParameter(
                                                                            InventAccountType::InventIssueFixedAsset,
                                                                            vendInvoiceInfoLine,
                                                                            itemGroupId));

                            if (defaultLedgerDimension == 0)
                            {
                                if (InventPostingExtendParm_CN::checkExtendParmEnabled())
                                {
                                    defaultLedgerDimension = InventPosting::itemLedgerDimensionExtendParm_CN(
                                                                    InventAccountType::InventIssue,
                                                                    InventPostingExtendParm_CN::constructInventDim(vendInvoiceInfoLine.inventDim()),
                                                                    vendInvoiceInfoLine.ItemId,
                                                                    vendInvoiceInfoLine.inventTable().itemGroupId());
                                }
                                else
                                {
                                    defaultLedgerDimension = InventPosting::itemLedgerDimensionFromParameter(
                                                                            this.buildItemLedgerDimensionParameter(
                                                                                InventAccountType::InventIssue,
                                                                                vendInvoiceInfoLine,
                                                                                itemGroupId));
                                }
                            }
                        }
                        else
                        {
                            defaultLedgerDimension = InventPosting::accountItemLedgerDimensionFromParameters(
                                this.buildAccountItemLedgerDimensionParameter(
                                    vendInvoiceInfoLine,
                                    countryRegion_RU ? vendInvoiceInfoLine.inventDim() : null));
                        }

                        assetJournal.parmLedgerJournalOffsetLedgerDimension(defaultLedgerDimension);

                        // Transaction date must be based on the inventory transaction
                        select InvoiceDate from vendInvoiceJour where
                            vendInvoiceJour.ParmId == vendInvoiceInfoLine.ParmId;

                        select RecId, InvoiceDate, CurrencyCode, LineAmount from vendorInvoiceTrans
                            where vendorInvoiceTrans.SourceDocumentLine == vendInvoiceInfoLine.SourceDocumentLine;
                        Debug::assert(vendorInvoiceTrans.RecId);

                        transExchRateHelper = CurrencyExchangeHelper::newExchangeDate(
                                                    Ledger::current(),
                                                    vendorInvoiceTrans.InvoiceDate);

                        // Asset APIs require amounts to be in accounting currency
                        // vendorInvoiceTrans.LineAmount excludes tax
                        lineAmount = transExchRateHelper.calculateTransactionToAccounting(
                                                                vendorInvoiceTrans.CurrencyCode,
                                                                vendorInvoiceTrans.LineAmount,
                                                                true);

                        itemMiscChargesAmount = MarkupTrans::getItemMiscChargesAmount(vendorInvoiceTrans.TableId, vendorInvoiceTrans.RecId);
                        TotalAcquisitionAdjAmount = lineAmount + itemMiscChargesAmount + this.getTaxInCostPriceMST(vendorInvoiceTrans.TableId, vendorInvoiceTrans.RecId);

                        if (!this.checkTransAlreadyPosted(assetBook, totalAcquisitionAdjAmount, vendInvoiceJour.InvoiceDate, AssetTransType::AcquisitionAdj))
                        {
                            assetJournal.createTrans(
                                        totalAcquisitionAdjAmount,
                                        assetBook,
                                        vendInvoiceJour.InvoiceDate);
                        }

                        assetJournal.parmLedgerJournalOffsetLedgerDimension(0);
                    }

                    if (!isFromAP 
                        && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ])
                        && runDate)
                    {
                        AssetAmount preAcquisitionPrice = AssetTrans::amountMSTPerDateTransTypes(
                            assetBook.AssetId,
                            assetBook.BookId,
                            [AssetTransType::PreAcquisition_CZ],
                            transDate,
                            runDate);

                        AssetAmount acquisitionPrice = AssetTrans::amountMSTPerDateTransTypes(
                            assetBook.AssetId,
                            assetBook.BookId,
                            [AssetTransType::Acquisition, AssetTransType::AcquisitionAdj],
                            transDate,
                            runDate);

                        AssetAmount acquisitionAdjustment = preAcquisitionPrice - acquisitionPrice;

                        if (acquisitionAdjustment != 0)
                        {
                            assetJournal.createTrans(acquisitionAdjustment, assetBook, runDate);
                        }
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">A inventory account type.</param>
    /// <param name="_vendInvoiceInfoLine">The vendor invoice line.</param>
    /// <param name="_itemGroupId">An item group Id.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(
        InventAccountType   _inventAccountType,
        VendInvoiceInfoLine _vendInvoiceInfoLine,
        ItemGroupId         _itemGroupId)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = InventPostingItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            _vendInvoiceInfoLine.ItemId,
            _itemGroupId);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            searchParameters.InventDim_RU = _vendInvoiceInfoLine.inventDim();
        }

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ProposalAcquisitionAdjVersion, runDate, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;
        Version version = conPeek(_packedClass,1);

        switch (version)
        {
            //version of the base class
            case CurrentVersion:
                ret = super(_packedClass);
                break;

            case ProposalAcquisitionAdjVersion:
                container base;
                [version, runDate, base] = _packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>