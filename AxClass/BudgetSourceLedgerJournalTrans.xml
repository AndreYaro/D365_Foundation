<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetSourceLedgerJournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetSourceLedgerJournalTrans</c> class is responsible for data management of the
///    <c>BudgetSource</c> records that are associated with the <c>LedgerJournalTrans</c> records.
/// </summary>
/// <remarks>
///    This class extends the <c>BudgetSourceIntegrator</c> class.
/// </remarks>
public class BudgetSourceLedgerJournalTrans extends BudgetSourceIntegrator
{
    LedgerJournalTrans ledgerJournalTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>BudgetSource</c> table buffer for the <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <returns>
    ///    A <c>BudgetSource</c> table buffer.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    Budget control is not supported for the journal type of the <c>LedgerJournalTrans</c> record.
    /// </exception>
    public BudgetSource createBudgetSource()
    {
        if (!BudgetSourceLedgerJournalTrans::isBudgetControlSourceIntegrator(ledgerJournalTrans.ledgerJournalTable().JournalType))
        {
            // Unknown budget control source integrator.
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        BudgetControlSourceIntegrator budgetControlSourceIntegrator = BudgetSourceLedgerJournalTrans::getBudgetControlSourceIntegrator(
            ledgerJournalTrans.ledgerJournalTable().JournalType);

        BudgetSource budgetSource;
        budgetSource.BudgetSourceType = BudgetSourceType::LedgerJournalEntry;
        budgetSource.LedgerEntryJournalLegalEntity = CompanyInfo::findDataArea(ledgerJournalTrans.company()).RecId;
        budgetSource.LedgerEntryJournalNumber = ledgerJournalTrans.JournalNum;
        budgetSource.LedgerEntryJournalReferenceNumber = ledgerJournalTrans.Voucher;
        budgetSource.BudgetControlSourceIntegrator = budgetControlSourceIntegrator;

        return budgetSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceTrackingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget source tracking number.
    /// </summary>
    public Num getBudgetSourceTrackingNumber()
    {
        return ledgerJournalTrans.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceTrackingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget source tracking date.
    /// </summary>
    public TransDate getBudgetSourceTrackingDate()
    {
        return ledgerJournalTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetSourceIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a set of ID values for the <c>BudgetSource</c> records that are associated with the
    ///    <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <returns>
    ///    A set of ID values for the <c>BudgetSource</c> records that are associated with the
    ///    <c>LedgerJournalTrans</c> record.
    /// </returns>
    public Set findBudgetSourceIds()
    {
        RecId budgetSourceId;
        Set budgetSourceIds = new Set(typeName2Type(extendedTypeStr(RecId)));

        budgetSourceId = BudgetSourceLedgerJournalTrans::findBudgetSourceId(this.parmCommonId(), this.parmLedgerJournalTrans().company());

        if (budgetSourceId != 0)
        {
            budgetSourceIds.add(budgetSourceId);
        }

        return budgetSourceIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetCheckResult</c> value that is associated with the specified <c>Common</c> record.
    /// </summary>
    /// <param name="_doCheckLedgerBudgetControlEnabled">
    /// A Boolean value that indicates whether to check that budget control is enabled on the primary
    /// ledger of the current legal entity before trying to get the <c>BudgetCheckResult</c> value;
    /// optional.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value of the <c>BudgetSource</c> record that is associated with the
    /// <c>Common</c> record.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult(boolean _doCheckLedgerBudgetControlEnabled = true)
    {
        BudgetCheckResult budgetCheckResult;
        ProjBudgetCheckResult projBudgetCheckResult;
        ProjBudgetStatus    projBudgetStatus;

        budgetCheckResult = BudgetSourceLedgerJournalTrans::findBudgetCheckResult(
            ledgerJournalTrans.DataAreaId,
            ledgerJournalTrans.JournalNum,
            ledgerJournalTrans.Voucher);

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Project ||
           ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Project)
        {
            select maxof(BudgetCheckResult) from projBudgetStatus where projBudgetStatus.SourceDocumentLine == ledgerJournalTrans.RecId;

            projBudgetCheckResult   = projBudgetStatus ? projBudgetStatus.BudgetCheckResult : ProjBudgetCheckResult::NoCheck;
        }

        //adding projBudgetCheckResult + 1, since this base enum value starts from 0
        if (enum2int(budgetCheckResult) >= enum2int(projBudgetCheckResult) + 1)
        {
            budgetCheckResult = budgetCheckResult;
        }
        else
        {
            budgetCheckResult = enum2int(projBudgetCheckResult) + 1;
        }

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        commonId = ledgerJournalTrans.RecId;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a <c>BudgetSource</c> record that is associated with the specified <c>LedgerJournalTrans</c> record exists.
    /// </summary>
    /// <param name="_ledgerJournalTransId">
    /// The record ID of the <c>LedgerJournalTrans</c> table.
    /// </param>
    /// <param name="_ledgerJournalTransLegalEntityDataArea">
    /// The <c>DataAreaId</c> for the legal entity where the <c>LedgerJournalTrans</c> record is created.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean existBudgetSource(
        RecId _ledgerJournalTransId,
        DataAreaId _ledgerJournalTransLegalEntityDataArea)
    {
        return BudgetSourceLedgerJournalTrans::findBudgetSourceId(_ledgerJournalTransId, _ledgerJournalTransLegalEntityDataArea) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the budget check result for the <c>BudgetSource</c> record that is associated with the
    ///    journal legal entity data area, the journal, and the voucher.
    /// </summary>
    /// <param name="_journalLegalEntityDataArea">
    ///    The data area for the legal entity for the journal.
    /// </param>
    /// <param name="_journal">
    ///    The journal.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher.
    /// </param>
    /// <returns>
    ///    The budget check result for the <c>BudgetSource</c> record that is associated with the journal
    ///    legal entity data area, the journal, and the voucher.
    /// </returns>
    public static BudgetCheckResult findBudgetCheckResult(
        DataAreaId _journalLegalEntityDataArea,
        LedgerJournalId _journal,
        Voucher _voucher)
    {
        BudgetSource budgetSource;
        LedgerEntryJournal ledgerEntryJournal;
        GeneralJournalEntry generalJournalEntry;

        changecompany(_journalLegalEntityDataArea)
        {
            select firstonly CheckResult, RecId from budgetSource
                    where   (budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry &&
                            budgetSource.BudgetTransactionLine == 0 &&
                            budgetSource.SourceDocumentLine == 0 &&
                            budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                            budgetSource.LedgerEntryJournalNumber == _journal &&
                            budgetSource.LedgerEntryJournalReferenceNumber == _voucher &&
                            budgetSource.LedgerEntryJournalLegalEntity == CompanyInfo::findDataArea(curext()).RecId);

            if (budgetSource.RecId == 0)
            {
                // Intercompany journal posting details are associated to the logged in company journal's budget source.
                // Therefore, we must retrieve budget source from the GeneralJournalEntry record's budget source reference.
                select firstonly CheckResult from budgetSource
                    exists join generalJournalEntry
                        where generalJournalEntry.BudgetSourceLedgerEntryPosted == budgetSource.RecId
                    exists join ledgerEntryJournal
                        where ledgerEntryJournal.RecId == generalJournalEntry.LedgerEntryJournal &&
                            ledgerEntryJournal.JournalNumber == _journal;
            }
        }

        return budgetSource.CheckResult == 0 ? BudgetCheckResult::NoCheck : budgetSource.CheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>BudgetSource</c> record associated with the <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name="_ledgerJournalTransId">
    /// The ID for the <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_ledgerJournalTransLegalEntityDataArea">
    /// The <c>DataAreaId</c> for the legal entity where the <c>LedgerJournalTrans</c> record is created.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The <c>ConcurrencyModel</c> option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// The <c>BudgetSource</c> record that is associated with the <c>LedgerJournalTrans</c> record.
    /// </returns>
    public static BudgetSource findBudgetSource(
        RecId _ledgerJournalTransId,
        DataAreaId _ledgerJournalTransLegalEntityDataArea,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetSource budgetSource;
        LedgerJournalTrans ledgerJournalTrans;
        RecId legalEntity;
        LedgerEntryJournal ledgerEntryJournal;
        GeneralJournalEntry generalJournalEntry;

        budgetSource.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetSource.concurrencyModel(_concurrencyModel);
        }

        if (_ledgerJournalTransId != 0)
        {
            changecompany(_ledgerJournalTransLegalEntityDataArea)
            {
                // CompanyInfo is a subtype table.
                // Query CompanyInfo table separately to leverage table cache performance enhancement.
                legalEntity = CompanyInfo::findDataArea(_ledgerJournalTransLegalEntityDataArea).RecId;

                // Adding ranges for all the alternate key fields of budget source table
                // for performance reason.
                select firstonly * from budgetSource
                    where budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry
                    exists join ledgerJournalTrans
                        where ledgerJournalTrans.RecId == _ledgerJournalTransId &&
                            budgetSource.BudgetTransactionLine == 0 &&
                            budgetSource.SourceDocumentLine == 0 &&
                            budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                            budgetSource.LedgerEntryJournalNumber == ledgerJournalTrans.JournalNum  &&
                            budgetSource.LedgerEntryJournalReferenceNumber == ledgerJournalTrans.Voucher &&
                            budgetSource.LedgerEntryJournalLegalEntity == legalEntity;

                if (budgetSource == null)
                {
                    // Intercompany journal posting details are associated to the logged in company journal's budget source.
                    // Therefore, we must retrieve budget source from the GeneralJournalEntry record's budget source reference.
                    select firstonly * from budgetSource
                        exists join generalJournalEntry
                            where generalJournalEntry.BudgetSourceLedgerEntryPosted == budgetSource.RecId
                        exists join ledgerEntryJournal
                            where ledgerEntryJournal.RecId == generalJournalEntry.LedgerEntryJournal
                        exists join ledgerJournalTrans
                            where ledgerJournalTrans.JournalNum == ledgerEntryJournal.JournalNumber &&
                                ledgerJournalTrans.RecId == _ledgerJournalTransId;
                }
            }
        }

        return budgetSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetSourceByLedgerReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>BudgetSource</c> record that is associated with the specified ledger journal entry
    ///    legal entity data area, journal and reference numbers.
    /// </summary>
    /// <param name="_journalLegalEntityDataArea">
    ///    The legal entity data area where the ledger journal entry is entered.
    /// </param>
    /// <param name="_journalNumber">
    ///    The journal number.
    /// </param>
    /// <param name="_voucherNumber">
    ///    The voucher number.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The <c>ConcurrencyModel</c> option to use when you read the record; optional.
    /// </param>
    /// <returns>
    ///    The <c>BudgetSource</c> record associated with the specified journal and reference numbers.
    /// </returns>
    public static BudgetSource findBudgetSourceByLedgerReference(
        DataAreaId _journalLegalEntityDataArea,
        LedgerJournalId _journalNumber,
        Voucher _voucherNumber,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetSource budgetSource;
        LedgerEntryJournal ledgerEntryJournal;
        LedgerJournalTrans ledgerJournalTrans;
        GeneralJournalEntry generalJournalEntry;

        budgetSource.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetSource.concurrencyModel(_concurrencyModel);
        }

        changecompany(_journalLegalEntityDataArea)
        {
            // Adding ranges for all the alternate key fields of budget source table
            // in a specified order for performance reason.
            select firstonly * from budgetSource
                    where   (budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry &&
                            budgetSource.BudgetTransactionLine == 0 &&
                            budgetSource.SourceDocumentLine == 0 &&
                            budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                            budgetSource.LedgerEntryJournalNumber == _journalNumber &&
                            budgetSource.LedgerEntryJournalReferenceNumber == _voucherNumber &&
                            budgetSource.LedgerEntryJournalLegalEntity == CompanyInfo::findDataArea(curext()).RecId);

            if (budgetSource == null)
            {
                // Intercompany journal posting details are associated to the logged in company journal's budget source.
                // Therefore, we must retrieve budget source from the GeneralJournalEntry record's budget source reference.
                select firstonly * from budgetSource
                    exists join generalJournalEntry
                        where generalJournalEntry.BudgetSourceLedgerEntryPosted == budgetSource.RecId
                    exists join ledgerEntryJournal
                        where ledgerEntryJournal.RecId == generalJournalEntry.LedgerEntryJournal &&
                            ledgerEntryJournal.JournalNumber == _journalNumber
                    exists join ledgerJournalTrans
                        where ledgerJournalTrans.JournalNum == ledgerEntryJournal.JournalNumber &&
                            ledgerJournalTrans.Voucher == _voucherNumber;
            }
        }

        return budgetSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record ID for the <c>BudgetSource</c> record that is associated with the <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name="_ledgerJournalTransId">
    /// The record ID of the <c>LedgerJournalTrans</c> table.
    /// </param>
    /// <param name="_ledgerJournalTransLegalEntityDataArea">
    /// The <c>DataAreaId</c> for the legal entity where the <c>LedgerJournalTrans</c> record is created.
    /// </param>
    /// <returns>
    /// The record ID for the <c>BudgetSource</c> record that is associated with the <c>LedgerJournalTrans</c> record.
    /// </returns>
    public static RecId findBudgetSourceId(
        RecId _ledgerJournalTransId,
        DataAreaId _ledgerJournalTransLegalEntityDataArea)
    {
        BudgetSource budgetSource;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerEntryJournal ledgerEntryJournal;
        GeneralJournalEntry generalJournalEntry;
        RecId legalEntity;

        if (_ledgerJournalTransId != 0)
        {
            changecompany(_ledgerJournalTransLegalEntityDataArea)
            {
                // CompanyInfo is a subtype table.
                // Query CompanyInfo table separately to leverage table cache performance enhancement.
                legalEntity = CompanyInfo::findDataArea(_ledgerJournalTransLegalEntityDataArea).RecId;

                // Adding ranges for all the alternate key fields of budget source table
                // in a specified order for performance reason.
                select firstonly RecId from budgetSource
                        where budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry
                    exists join ledgerJournalTrans
                        where ledgerJournalTrans.RecId == _ledgerJournalTransId &&
                            budgetSource.BudgetTransactionLine == 0 &&
                            budgetSource.SourceDocumentLine == 0 &&
                            budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                            budgetSource.LedgerEntryJournalNumber == ledgerJournalTrans.JournalNum  &&
                            budgetSource.LedgerEntryJournalReferenceNumber == ledgerJournalTrans.Voucher &&
                            budgetSource.LedgerEntryJournalLegalEntity == legalEntity;

                if (budgetSource.RecId == 0)
                {
                    // Intercompany journal posting details are associated to the logged in company journal's budget source.
                    // Therefore, we must retrieve budget source from the GeneralJournalEntry record's budget source reference.
                    select firstonly RecId from budgetSource
                        exists join generalJournalEntry
                            where generalJournalEntry.BudgetSourceLedgerEntryPosted == budgetSource.RecId
                        exists join ledgerEntryJournal
                            where ledgerEntryJournal.RecId == generalJournalEntry.LedgerEntryJournal
                        exists join ledgerJournalTrans
                            where ledgerJournalTrans.JournalNum == ledgerEntryJournal.JournalNumber &&
                                ledgerJournalTrans.RecId == _ledgerJournalTransId;
                }
            }
        }

        return budgetSource.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlSourceIntegrator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the budget control source integrator for the specified ledger journal type.
    /// </summary>
    /// <param name="_journalType">
    ///    The ledger journal type.
    /// </param>
    /// <returns>
    ///    The budget control source integrator.
    /// </returns>
    protected internal static BudgetControlSourceIntegrator getBudgetControlSourceIntegrator(LedgerJournalType _journalType)
    {
        BudgetControlSourceIntegrator sourceIntegrator;

        switch (_journalType)
        {
            case LedgerJournalType::Daily:
                sourceIntegrator = BudgetControlSourceIntegrator::DailyJournal;
                break;

            case LedgerJournalType::Allocation:
                sourceIntegrator = BudgetControlSourceIntegrator::AllocationJournal;
                break;

            case LedgerJournalType::Assets:
                sourceIntegrator = BudgetControlSourceIntegrator::FixedAssetJournal;
                break;

            case LedgerJournalType::Cost:
                sourceIntegrator = BudgetControlSourceIntegrator::ProjectExpenseJournal;
                break;

            case LedgerJournalType::Approval:
            case LedgerJournalType::PurchaseLedger:
            case LedgerJournalType::VendInvoiceRegister:
                sourceIntegrator = BudgetControlSourceIntegrator::VendorInvoiceJournal;
                break;

            default:
                sourceIntegrator = str2Enum(sourceIntegrator,'');
                break;
        }

        return sourceIntegrator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetControlSourceIntegrator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether budget control is supported for the specified ledger journal type.
    /// </summary>
    /// <param name="_journalType">
    ///    The ledger journal type.
    /// </param>
    /// <returns>
    ///    true if budget control is supported for the ledger journal type; otherwise false.
    /// </returns>
    public static boolean isBudgetControlSourceIntegrator(LedgerJournalType _journalType)
    {
        BudgetControlSourceIntegrator budgetControlSourceIntegrator = BudgetSourceLedgerJournalTrans::getBudgetControlSourceIntegrator(_journalType);
        DictEnum budgetControlSourceIntegratorDictEnum = new DictEnum(enumNum(BudgetControlSourceIntegrator));
        boolean isBudgetControlSourceIntegrator;

        if (budgetControlSourceIntegratorDictEnum.value2Symbol(enum2int(budgetControlSourceIntegrator)) != '')
        {
            isBudgetControlSourceIntegrator = true;
        }
        
        return isBudgetControlSourceIntegrator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the journal is enabled for budget checking based on the configuration filter settings for the source integrator.
    /// </summary>
    /// <param name = "_ledgerAccountDataArea">The data area of the ledger for which to retrieve the configuration filter settings.</param>
    /// <param name = "_journalDataArea">The data area of the journal.</param>
    /// <param name = "_journalNumber">The journal number.</param>
    /// <param name = "_journalType">The journal type.</param>
    /// <returns>True if the journal is enabled for budget checking; otherwise, false.</returns>
    internal static boolean isJournalEnabled(dataAreaId _ledgerAccountDataArea, dataAreaId _journalDataArea, LedgerJournalId _journalNumber, LedgerJournalType _journalType)
    {
        boolean isJournalEnabled = true;

        LegalEntityRecId legalEntityId = CompanyInfo::current(_ledgerAccountDataArea);
        LedgerRecId ledgerRecId = Ledger::primaryLedger(legalEntityId);
        BudgetControlSourceIntegrator budgetControlSourceIntegrator = BudgetSourceLedgerJournalTrans::getBudgetControlSourceIntegrator(_journalType);
        BudgetControlIIntegratorFilterable filterable = BudgetControlIntegratorFilterableFactory::getInstance(budgetControlSourceIntegrator);
        if (filterable)
        {
            Query query = BudgetControlConfiguration::getSourceIntegratorQuery(ledgerRecId, budgetControlSourceIntegrator);
            if (query)
            {
                QueryBuildDataSource ledgerJournalTableDataSource = query.dataSourceTable(filterable.getTableId());

                if (ledgerJournalTableDataSource)
                {
                    changecompany(_journalDataArea)
                    {
                        // For intercompany checks, always switch to the journal's data area since the query will only find it in that company.
                        ledgerJournalTableDataSource.firstOnly(true);
                        ledgerJournalTableDataSource.addSelectionField(fieldNum(LedgerJournalTable, RecId));

                        SysQuery::findOrCreateRange(ledgerJournalTableDataSource, fieldNum(LedgerJournalTable, JournalNum))
                            .value(_journalNumber);

                        QueryRun qr = new QueryRun(query);

                        if (!qr.next())
                        {
                            isJournalEnabled = false;
                        
                            LedgerJournalTableRecId journalTableRecId = LedgerJournalTable::find(_journalNumber).RecId;

                            BudgetControlInstrumentationLogger::createLogger(classStr(BudgetSourceLedgerJournalTrans))
                                .processing().journalIsNotEnabled(legalEntityId, journalTableRecId);
                        }
                    }
                }
            }
        }

        return isJournalEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBudgetSourceLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetSourceLedgerJournalTrans</c> class by using the specified
    ///    <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetSourceLedgerJournalTrans</c> class.
    /// </returns>
    public static BudgetSourceLedgerJournalTrans newBudgetSourceLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        BudgetSourceLedgerJournalTrans budgetSourceLedgerJournalTrans = new BudgetSourceLedgerJournalTrans();
        budgetSourceLedgerJournalTrans.parmLedgerJournalTrans(_ledgerJournalTrans);

        return budgetSourceLedgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the new <c>BudgetSource</c> record for the specified <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// The record ID of the saved <c>BudgetSource</c> record.
    /// </returns>
    /// <remarks>
    /// If a <c>BudgetSource</c> record for the specified <c>LedgerJournalTrans</c> record does not exist,
    /// this method will insert a record; otherwise, it will return the <c>BudgetSource</c> record ID.
    /// </remarks>
    public static BudgetSourceRecId saveBudgetSource(LedgerJournalTrans _ledgerJournalTrans)
    {
        BudgetSourceRecId budgetSourceId;
        BudgetSource budgetSource;
        BudgetSourceLedgerJournalTrans budgetSourceLedgerJournalTrans = BudgetSourceLedgerJournalTrans::newBudgetSourceLedgerJournalTrans(_ledgerJournalTrans);

        budgetSourceId = BudgetSourceLedgerJournalTrans::findBudgetSourceId(_ledgerJournalTrans.RecId, _ledgerJournalTrans.company());

        if (!budgetSourceId)
        {
            budgetSource = budgetSourceLedgerJournalTrans.createBudgetSource();
            budgetSource.insert();

            budgetSourceId = budgetSource.RecId;
        }

        return budgetSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetSourceByVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the new <c>BudgetSource</c> record for the specified ledger journal entry legal entity data
    /// area, journal and voucher numbers.
    /// </summary>
    /// <param name="_journalLegalEntityDataArea">
    /// The legal entity data area where the ledger journal entry is entered.
    /// </param>
    /// <param name="_journalNumber">
    /// The journal number.
    /// </param>
    /// <param name="_voucherNumber">
    /// The voucher number.
    /// </param>
    /// <param name="_journalType">
    /// The journal type.
    /// </param>
    /// <returns>
    /// The record ID of the saved <c>BudgetSource</c> record.
    /// </returns>
    /// <remarks>
    /// If a <c>BudgetSource</c> record does not exist for the specified <c>LedgerJournalTrans</c> record,
    /// this method will insert one record; otherwise, it will just return the <c>BudgetSource</c> record
    /// ID.
    /// </remarks>
    public static BudgetSourceRecId saveBudgetSourceByVoucher(
        DataAreaId _journalLegalEntityDataArea,
        LedgerJournalId _journalNumber,
        Voucher _voucherNumber,
        LedgerJournalType _journalType)
    {
        BudgetSource budgetSource;

        budgetSource = BudgetSourceLedgerJournalTrans::findBudgetSourceByLedgerReference(
            _journalLegalEntityDataArea,
            _journalNumber,
            _voucherNumber);

        if (budgetSource == null)
        {
            budgetSource.BudgetSourceType = BudgetSourceType::LedgerJournalEntry;
            budgetSource.LedgerEntryJournalLegalEntity = CompanyInfo::findDataArea(_journalLegalEntityDataArea).RecId;
            budgetSource.LedgerEntryJournalNumber = _journalNumber;
            budgetSource.LedgerEntryJournalReferenceNumber = _voucherNumber;
            budgetSource.BudgetControlSourceIntegrator = BudgetSourceLedgerJournalTrans::getBudgetControlSourceIntegrator(_journalType);
            budgetSource.insert();
        }

        return budgetSource.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetSourcesWithNewJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates <c>BudgetSource</c> records that are related to the specified voucher number range from one
    ///    journal to a new journal.
    /// </summary>
    /// <param name="_journalLegalEntity">
    ///    The <c>LegalEntity</c> data type that the original journal was created.
    /// </param>
    /// <param name="_originalLedgerJournalId">
    ///    The <c>LedgerJournalId</c> data type with which the <c>BudgetSource</c> records are associated.
    /// </param>
    /// <param name="_newLedgerJournalId">
    ///    The <c>LedgerJournalId</c> data type that the <c>BudgetSource</c> in which the records will be
    ///    updated.
    /// </param>
    /// <param name="_fromVoucher">
    ///    The voucher number at the start of the range of vouchers to update.
    /// </param>
    /// <param name="_toVoucher">
    ///    The voucher number at the end of the range of vouchers to update; optional.
    /// </param>
    /// <remarks>
    ///    This method assumes that new journal is in the same <c>LegalEntity</c> data type as the original
    ///    journal.
    /// </remarks>
    public static void updateBudgetSourcesWithNewJournal(
        LegalEntity _journalLegalEntity,
        LedgerJournalId _originalLedgerJournalId,
        LedgerJournalId _newLedgerJournalId,
        Voucher _fromVoucher,
        Voucher _toVoucher = _fromVoucher)
    {
        BudgetSource budgetSource;

        ttsbegin;

        update_recordset budgetSource
            setting LedgerEntryJournalNumber = _newLedgerJournalId
            where budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry &&
                budgetSource.LedgerEntryJournalLegalEntity == _journalLegalEntity &&
                budgetSource.LedgerEntryJournalNumber == _originalLedgerJournalId &&
                budgetSource.LedgerEntryJournalReferenceNumber >= _fromVoucher &&
                budgetSource.LedgerEntryJournalReferenceNumber <= _toVoucher;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetSourcesWithNewVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BudgetSource</c> records that are related to the specified voucher number to a new
    ///    voucher number.
    /// </summary>
    /// <param name="_journalLegalEntity">
    ///    The <c>LegalEntity</c> data type that the journal was created.
    /// </param>
    /// <param name="_journalId">
    ///    The <c>LedgerJournalId</c> data type with which the <c>BudgetSource</c> records are associated.
    /// </param>
    /// <param name="_originalVoucher">
    ///    The original voucher number.
    /// </param>
    /// <param name="_newVoucher">
    ///    The new voucher number.
    /// </param>
    public static void updateBudgetSourcesWithNewVoucher(
        LegalEntity _journalLegalEntity,
        LedgerJournalId _journalId,
        Voucher _originalVoucher,
        Voucher _newVoucher)
    {
        BudgetSource budgetSource;

        ttsbegin;

        budgetSource = BudgetSourceLedgerJournalTrans::findBudgetSourceByLedgerReference(
            CompanyInfo::findRecId(_journalLegalEntity).DataArea,
            _journalId,
            _originalVoucher,
            true);

        if (budgetSource != null)
        {
            budgetSource.LedgerEntryJournalReferenceNumber = _newVoucher;
            budgetSource.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>