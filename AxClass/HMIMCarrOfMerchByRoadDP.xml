<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMCarrOfMerchByRoadDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>HMIMCarrOfMerchByRoadDP</c> DataProvider class for HMIMCarrOfMerchByRoad Report
/// </summary>
[SRSReportQueryAttribute(queryStr(HMIMCarrOfMerchByRoadReportQuery))]
public class HMIMCarrOfMerchByRoadDP extends SRSReportDataProviderBase
{
    HMIMCarrOfMerchByRoad         carrOfMerchByRoad;
    HMIMCarrOfMerchByRoadItem     carrOfMerchByRoadItems;
    HMIMCarrOfMerchByRoadTmp      carrOfMerchByRoadTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHMIMCarrOfMerchByRoadTmp</Name>
				<Source><![CDATA[
    [SrsReportDataSetAttribute(tableStr(HMIMCarrOfMerchByRoadTmp))]
    public HMIMCarrOfMerchByRoadTmp getHMIMCarrOfMerchByRoadTmp()
    {
        select carrOfMerchByRoadTmp;
        return carrOfMerchByRoadTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun = new QueryRun(this.parmQuery());

        while(queryRun.next())
        {
            carrOfMerchByRoad       = queryRun.get(tableNum(HMIMCarrOfMerchByRoad));
            carrOfMerchByRoadItems  = queryRun.get(tableNum(HMIMCarrOfMerchByRoadItem));
            this.insertcarrOfMerchByRoadTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertcarrOfMerchByRoadTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates data to the temporary table
    /// </summary>
    private void insertcarrOfMerchByRoadTmp()
    {
        carrOfMerchByRoadTmp.clear();
        carrOfMerchByRoadTmp.CMRDocumentId                  = carrOfMerchByRoad.CMRDocumentId;
        carrOfMerchByRoadTmp.ShipmentId                     = carrOfMerchByRoad.ShipmentId;
        carrOfMerchByRoadTmp.CustAccount                    = carrOfMerchByRoad.CustAccount;
        
        LogisticsPostalAddress address = LogisticsPostalAddress::findRecId(carrOfMerchByRoad.ShippingPostalAddress);
        carrOfMerchByRoadTmp.ShipFromName                   = carrOfMerchByRoad.shippingAddressName();
        carrOfMerchByRoadTmp.FromStreet                     = address.Street;
        carrOfMerchByRoadTmp.FromCity                       = address.City;
        carrOfMerchByRoadTmp.FromState                      = address.State;
        carrOfMerchByRoadTmp.FromZipCode                    = address.ZipCode;
        
        address = LogisticsPostalAddress::findRecId(carrOfMerchByRoad.DeliveryPostalAddress);
        carrOfMerchByRoadTmp.ShipToName                     = carrOfMerchByRoad.deliveryAddressName();
        carrOfMerchByRoadTmp.ToCity                         = address.City;
        carrOfMerchByRoadTmp.ToStreet                       = address.Street;
        carrOfMerchByRoadTmp.ToState                        = address.State;
        carrOfMerchByRoadTmp.ToZipCode                      = address.ZipCode;
        
        carrOfMerchByRoadTmp.PickupDate                     = carrOfMerchByRoad.PickupDate;
        carrOfMerchByRoadTmp.PickupLoc                      = carrOfMerchByRoad.PickupLoc;
        carrOfMerchByRoadTmp.PickupName                     = carrOfMerchByRoad.PickupName;
        carrOfMerchByRoadTmp.DropOffDate                    = carrOfMerchByRoad.DropOffDate;
        carrOfMerchByRoadTmp.DropOffLoc                     = carrOfMerchByRoad.DropOffLoc;
        carrOfMerchByRoadTmp.DropOffName                    = carrOfMerchByRoad.DropOffName;
        carrOfMerchByRoadTmp.ConsignorInstruction           = carrOfMerchByRoad.ConsignorInstruction;
        carrOfMerchByRoadTmp.SuccessiveCarrier              = carrOfMerchByRoad.SuccessiveCarrier;
        carrOfMerchByRoadTmp.Documents                      = carrOfMerchByRoad.Documents;
        carrOfMerchByRoadTmp.SpecialAgreement               = carrOfMerchByRoad.SpecialAgreement;
        carrOfMerchByRoadTmp.Payment                        = carrOfMerchByRoad.Payment;
        carrOfMerchByRoadTmp.Particular                     = carrOfMerchByRoad.Particular;
        carrOfMerchByRoadTmp.COD                            = carrOfMerchByRoad.COD;
        carrOfMerchByRoadTmp.CRMConvention                  = carrOfMerchByRoad.CRMConvention;
        carrOfMerchByRoadTmp.CompanyName                    = carrOfMerchByRoad.CompanyName;
        carrOfMerchByRoadTmp.ShippingLocation               = carrOfMerchByRoad.ShippingLocation;
        carrOfMerchByRoadTmp.CarrierCode                    = carrOfMerchByRoad.CarrierCode;
        carrOfMerchByRoadTmp.CarrierName                    = carrOfMerchByRoad.CarrierName;
        carrOfMerchByRoadTmp.CarrierAddress                 = carrOfMerchByRoad.CarrierAddress;
        carrOfMerchByRoadTmp.CarrierObservation             = carrOfMerchByRoad.CarrierObservation;
        
        carrOfMerchByRoadTmp.ItemId                         = carrOfMerchByRoadItems.ItemId;
        carrOfMerchByRoadTmp.GrossWeight                    = carrOfMerchByRoadItems.GrossWeight;
        carrOfMerchByRoadTmp.ItemVolume                     = carrOfMerchByRoadItems.ItemVolume;
        carrOfMerchByRoadTmp.Qty                            = carrOfMerchByRoadItems.Qty;
        carrOfMerchByRoadTmp.UOM                            = carrOfMerchByRoadItems.UOM;
        carrOfMerchByRoadTmp.NatureOfGoods                  = carrOfMerchByRoadItems.NatureOfGoods;
        carrOfMerchByRoadTmp.ADRPoints                  = carrOfMerchByRoad.ADRPoints;

        this.insertTable(carrOfMerchByRoadTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTable</Name>
				<Source><![CDATA[
    private void insertTable(HMIMCarrOfMerchByRoadTmp _carrOfMerchByRoadTmp)
    {
        _carrOfMerchByRoadTmp.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>