<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcGlobalTableConstraintDataSourcePop</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for populating the data source of the user defined table constraint edit form.
/// </summary>
class PcGlobalTableConstraintDataSourcePop
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
/// <summary>
    /// Populates the data sources of the table constraint edit form.
    /// </summary>
    /// <param name="_tableConstraintDefinition">
    /// A table constraint definition.
    /// </param>
    /// <param name="_columnNameToDatasource">
    /// A mapping from column name to data source.
    /// </param>
    /// <returns>
    /// The row data map
    /// </returns>
    public Map populate(PCGlobalTableConstraintDefinition _tableConstraintDefinition, Map _columnNameToDatasource)
    {
        EcoResValue                         value;
        PCTableConstraintCell               cell;
        PCTableConstraintColumnDefinition   column;
        FormDataSource                      dataSource;
        PCGlobalTableConstraintEditTmp      gridValue;
        Map                                 rowDataMap = new Map(Types::Int64, Types::String);
        str                                 rowString;
        RefRecId                            lastRow;

        PCContractNotNull::assertRecord(_tableConstraintDefinition, funcName());
        PCContractNotNull::assertObject(_columnNameToDatasource, funcName());

        while select value
            join TableConstraintRow from cell order by TableConstraintRow
                where cell.Value == value.RecId
            join Name from column order by Name
                where column.RecId                      == cell.TableConstraintColumnDefinition
                &&    column.TableConstraintDefinition  == _tableConstraintDefinition.RecId
        {
            dataSource = _columnNameToDatasource.lookup(column.Name);

            gridValue.setTmpData(dataSource.cursor());
            gridValue.RowId = cell.TableConstraintRow;
            this.setValueFromEcoResValue(gridValue, value);
            gridValue.insert();

            if (gridValue.RowId != lastRow)
            {
                if (rowString)
                {
                    rowDataMap.insert(lastRow, rowString);
                }
                rowString = "";
            }
            rowString += this.combineColumnAndValue(column.Name, value);
            lastRow = gridValue.RowId;
        }
        if (rowString)
        {
            rowDataMap.insert(gridValue.RowId, rowString);
        }

        return rowDataMap;
    }
]]></Source>
			</Method>
			<Method>
				<Name>setValueFromEcoResValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the temporary value from the <c>EcoResValue</c> record.
    /// </summary>
    /// <param name="_tmpValue">
    /// A temporary record buffer for a table constraint cell value.
    /// </param>
    /// <param name="_value">
    /// An <c>EcoResValue</c> record.
    /// </param>
    protected void setValueFromEcoResValue(PCGlobalTableConstraintEditTmp _tmpValue, EcoResValue _value)
    {
        EcoResTextValue     textValue;
        EcoResBooleanValue  booleanValue;
        EcoResIntValue      integerValue;

        if (_value is EcoResTextValue)
        {
            textValue = _value as EcoResTextValue;
            _tmpValue.TextValue = textValue.pcGetStringValue();
        }
        else if (_value is EcoResBooleanValue)
        {
            booleanValue = _value as EcoResBooleanValue;
            _tmpValue.BooleanValue = booleanValue.BooleanValue;
        }
        else if (_value is EcoResIntValue)
        {
            integerValue = _value as EcoResIntValue;
            _tmpValue.IntValue = integerValue.IntValue;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCGlobalTableConstraintDataSourcePop construct()
    {
        return new PCGlobalTableConstraintDataSourcePop();
    }

]]></Source>
			</Method>
			<Method>
				<Name>combineColumnAndValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Combine column name and value
    /// </summary>
    /// <param name="_columnName">
    /// Column name
    /// </param>
    /// <param name="_value">
    /// Cell value
    /// </param>
    /// <returns>
    /// Column and the cell value
    /// </returns>
    private str combineColumnAndValue(str _columnName, EcoResValue _value)
    {
        EcoResIntValue      intValue;
        EcoResBooleanValue  boolValue;
        str                 columnValue;

        #PC
        switch (true)
        {
            case _value is EcoResTextValue:
                columnValue = int642str(_value.RecId);
                break;
            case _value is EcoResIntValue:
                intValue = _value as EcoResIntValue;
                columnValue = strRFix(int2str(intValue.IntValue), 10, '0');
                break;
            case _value is EcoResBooleanValue:
                boolValue = _value as EcoResBooleanValue;
                if (boolValue.BooleanValue == NoYes::Yes)
                {
                    columnValue = #True;
                }
                else
                {
                    columnValue = #False;
                }
                break;
            default:
                throw error(error::wrongUseOfFunction(funcName()));
            }

        return strFmt("%1%2", _columnName, columnValue);
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>