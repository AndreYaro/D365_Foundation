<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rhrmReport_T7</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rhrmReport_T7 extends RHRMReport implements BatchRetryable
{
    DialogField                     dialogTransYear;
    DialogField                     dialogOrganization;
    RHRMOrganizationAll             hrmOrganizationAll;
    RHRMLeaveScheduleTable          rhrmLeaveScheduleTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>animationBoxCaption</Name>
				<Source><![CDATA[
    public str animationBoxCaption()
    {
        return "@RUP1723";
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxText</Name>
				<Source><![CDATA[
    public str animationBoxText()
    {
        return "@RUP1740";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.caption("@RUP1740");
        dialogTransYear    = dialog.addField(extendedTypeStr(RHRMLeaveScheduleYear), "@RUP1741", "@RUP1742");
        dialogOrganization = dialog.addField(extendedTypeStr(RHRMOrganizationAll), "@GLS106284", "@RUP1823");

        if (rhrmLeaveScheduleTable)
        {
            dialogTransYear.allowEdit(false);
            dialogTransYear.value(rhrmLeaveScheduleTable.FormationYear);
        }
        else
        {
            dialogTransYear.value(RHRMLeaveScheduleTable::findLast().FormationYear);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        rhrmLeaveScheduleTable = RHRMLeaveScheduleTable::find(dialogTransYear.value());
        hrmOrganizationAll = dialogOrganization.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    public void initData(Args _args)
    {
        super(_args);
        if (_args.record())
            rhrmLeaveScheduleTable = _args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    #define.Value31(31)
    public void run()
    {
        int                 countPass;
        RPayVacationTable   payVacationTable;
        DocumentDate        startDate;
        DocumentDate        endDate;
        RHRMOrderTrans      rhrmOrderTrans;
        RPayHistory         rPayHistory;

        startDate = mkDate(01, 01, rhrmLeaveScheduleTable.FormationYear);
        endDate = mkDate(#Value31, 12, rhrmLeaveScheduleTable.FormationYear);

        wordDocument.insertFieldValue(#CI_Name,                CompanyInfo::find().Name);
        wordDocument.insertFieldValue(#CI_CodeOKPO_RU,         CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), endDate));
        wordDocument.insertFieldValue(#OTR_title,              OfficialsTable_RU::findDirector().Title);
        wordDocument.insertFieldValue(#OTR_name,               OfficialsTable_RU::findDirector().Name);
        wordDocument.insertFieldValue(#Year,                   int2str(rhrmLeaveScheduleTable.FormationYear));
        wordDocument.insertFieldValue(#ProfNum,               rhrmLeaveScheduleTable.AttachDocNum);
        wordDocument.insertFieldValue(#ProfDate,              this.dateInWord(rhrmLeaveScheduleTable.AttachDocDate, true, false));
        wordDocument.insertFieldValue(#DocNum,                 rhrmLeaveScheduleTable.LeaveScheduleNum);
        wordDocument.insertFieldValue(#DocDate,                this.dateInNumber(rhrmLeaveScheduleTable.TransDate));

        wordDocument.tableGoToCell(countPass, 1, #Table);

        countPass = #Value5;
        while select payVacationTable
            where payVacationTable.FormationYear == rhrmLeaveScheduleTable.FormationYear
        {
            rPayHistory = RPayHistory::getHistoryLineByDate(payVacationTable.EmplId, payVacationTable.StartDate);

            if (hrmOrganizationAll &&
                hrmOrganizationAll != rPayHistory.HrmOrganizationId)
                continue;

            wordDocument.tableGoToCell(countPass, 1);
            wordDocument.tableInsertRowsBelow();

            wordDocument.tableInsertValue(countPass, 1, rPayHistory.HrmOrganizationId);
            wordDocument.tableInsertValue(countPass, #Value2, rPayHistory.titleId());
            wordDocument.tableInsertValue(countPass, #Value3, payVacationTable.emplName());
            wordDocument.tableInsertValue(countPass, #Value4, payVacationTable.EmplId);
            wordDocument.tableInsertValue(countPass, #Value5, int2str(payVacationTable.calendarDayNumber()));
            wordDocument.tableInsertValue(countPass, #Value6, this.dateInNumber(payVacationTable.StartDate));

            select firstonly StartDate from rhrmOrderTrans
                order StartDate asc
                where rhrmOrderTrans.LeaveScheduleTransRecId == payVacationTable.RecId;

            wordDocument.tableInsertValue(countPass, #Value7, this.dateInNumber(rhrmOrderTrans.StartDate));
            wordDocument.tableInsertValue(countPass, #Value8, payVacationTable.ReasonDocNum + "@GLS106147" + this.dateInNumber(payVacationTable.ReasonDocDate));
            wordDocument.tableInsertValue(countPass, #Value9, this.dateInNumber(payVacationTable.TransferDate));
            wordDocument.tableInsertValue(countPass, #Value10, payVacationTable.Notes);
            countPass++;
        }
        wordDocument.tableDeleteRow();
        wordDocument.unlinkFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _p1 = null)
    {
        boolean ret;

        ret = super(_p1);

        if (ret)
        {
            if (! RHRMLeaveScheduleTable::find(dialogTransYear.value()).RecId)
                ret = checkFailed("@RUP1895");
        }

        return ret;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>