<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalOverviewViewModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalOverviewViewModel</c> class is the view model for the
/// <c>SubledgerJournalOverviewFormView</c> class.
/// </summary>
class SubledgerJournalOverviewViewModel
{
    SubledgerJournalOverviewFormView        subledgerJournalOverviewFormView;

    // Datasources
    FormDataSource                          subledgerJournalAccountEntryDataSource;
    FormDataSource                          generalJournalAccountEntryDataSource;
    FormDataSource                          subledgerJournalEntryDataSource;
    QueryBuildRange                         transactionVocherRange;

    SubledgerJournalAccountEntry            activeSubledgerJournalAccountEntry;
    GeneralJournalAccountEntry              activeGeneralJournalAccountEntry;
    GeneralJournalEntry                     activeGeneralJournalEntry;
    SubledgerJournalEntry                   activeSubledgerJournalEntry;
    Ledger                                  activeLedger;
    SourceDocumentHeader                    activeSourceDocumentHeader;

    List                                    totalCurrencyList;
    List                                    transactionVoucherList;

    CurrencyCode                            activeCurrencyCode;

    Amount                                  transactionCurrencyDebitTotal;
    Amount                                  transactionCurrencyCreditTotal;
    Amount                                  accountingCurrencyDebitTotal;
    Amount                                  accountingCurrencyCreditTotal;
    Amount                                  reportingCurrencyDebitTotal;
    Amount                                  reportingCurrencyCreditTotal;

    str                                     subledgerEntryRangeExpression;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTotalDebitCreditAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total debit and credit amounts.
    /// </summary>
    private void calculateTotalDebitCreditAmounts()
    {
        SubledgerJournalAccountEntry    subledgerJournalAccountEntry;
        SubledgerIJournalOverview       subledgerJournalOverview;

        subledgerJournalOverview = subledgerJournalOverviewFormView.parmFormRun() as SubledgerIJournalOverview;

        // calculate debit total amounts
        subledgerJournalAccountEntry = SubledgerJournalOverviewViewModel::calculateTotalAmounts(
                subledgerEntryRangeExpression,
                activeCurrencyCode,
                DebitCredit::Debit);

        transactionCurrencyDebitTotal   = subledgerJournalAccountEntry.TransactionCurrencyAmount;
        accountingCurrencyDebitTotal    = subledgerJournalAccountEntry.AccountingCurrencyAmount;
        reportingCurrencyDebitTotal     = subledgerJournalAccountEntry.ReportingCurrencyAmount;

        this.setOverviewTotalDebitAmounts(subledgerJournalOverview, subledgerJournalAccountEntry);

        // calculate credit total amounts
        subledgerJournalAccountEntry = SubledgerJournalOverviewViewModel::calculateTotalAmounts(
                subledgerEntryRangeExpression,
                activeCurrencyCode,
                DebitCredit::Credit);

        transactionCurrencyCreditTotal   = -subledgerJournalAccountEntry.TransactionCurrencyAmount;
        accountingCurrencyCreditTotal    = -subledgerJournalAccountEntry.AccountingCurrencyAmount;
        reportingCurrencyCreditTotal     = -subledgerJournalAccountEntry.ReportingCurrencyAmount;

        this.setOverviewTotalCreditAmounts(subledgerJournalOverview, subledgerJournalAccountEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generalJournalAccountEntryActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the general journal account entry activated event.
    /// </summary>
    /// <param name="_activeGeneralJournalAccountEntry">
    /// The activated general journal account entry.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void generalJournalAccountEntryActivated(GeneralJournalAccountEntry  _activeGeneralJournalAccountEntry)
    {
        activeGeneralJournalAccountEntry = _activeGeneralJournalAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generalJournalEntryActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the general journal entry activated event.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void generalJournalEntryActivated()
    {
        container   voucherPack;
        container   currencyPack;

        activeGeneralJournalEntry = subledgerJournalOverviewFormView.parmFormRun().args().record();
        activeLedger = Ledger::findByLegalEntity(CompanyInfo::current());

        [subledgerEntryRangeExpression, voucherPack, currencyPack] = SubledgerJournalOverviewViewModel::getServerState(activeGeneralJournalEntry, activeLedger);

        transactionVoucherList = List::create(voucherPack);
        totalCurrencyList = List::create(currencyPack);

        this.setDataSourceQueryCriteria();

        subledgerJournalOverviewFormView.initViewForGeneralJournalEntry();

        this.calculateTotalDebitCreditAmounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the subledger journal overview view model.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initialize()
    {
        subledgerJournalAccountEntryDataSource = subledgerJournalOverviewFormView.parmSubledgerDatasource();
        generalJournalAccountEntryDataSource = subledgerJournalOverviewFormView.parmGeneralJournalDatasource();
        subledgerJournalEntryDataSource = subledgerJournalOverviewFormView.parmSubledgerJournalEntryDataSource();

        transactionVocherRange = subledgerJournalAccountEntryDataSource.query().dataSourceTable(tableNum(SubledgerJournalEntry)).addRange(fieldNum(SubledgerJournalEntry, Voucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingCurrencyCreditTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the accounting currency credit total amount.
    /// </summary>
    /// <returns>
    /// The accounting currency credit total amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Amount parmAccountingCurrencyCreditTotal()
    {
        // <GEERU>
        if (subledgerJournalOverviewFormView.parmShowTransModeControl_RU() &&
            subledgerJournalOverviewFormView.parmShowTransModeControl_RU().selection() == LedgerBondShowTransMode_RU::ShowDebitOnly)
        {
            return 0;
        }
        // </GEERU>
        return accountingCurrencyCreditTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingCurrencyDebitTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the accounting currency debit total amount.
    /// </summary>
    /// <returns>
    /// The accounting currency debit total amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Amount parmAccountingCurrencyDebitTotal()
    {
        // <GEERU>
        if (subledgerJournalOverviewFormView.parmShowTransModeControl_RU() &&
            subledgerJournalOverviewFormView.parmShowTransModeControl_RU().selection() == LedgerBondShowTransMode_RU::ShowCreditOnly)
        {
            return 0;
        }
        // </GEERU>
        return accountingCurrencyDebitTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the active transaction currency.
    /// </summary>
    /// <param name="_activeCurrencyCode">
    /// The activated currency code.
    /// </param>
    /// <returns>
    /// The transaction currency code.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CurrencyCode parmActiveCurrencyCode(CurrencyCode _activeCurrencyCode = activeCurrencyCode)
    {
        activeCurrencyCode = _activeCurrencyCode;

        return activeCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the active ledger name.
    /// </summary>
    /// <param name="_activeLedger">
    /// The ledger name.
    /// </param>
    /// <returns>
    /// The active ledger name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Ledger parmActiveLedger(Ledger _activeLedger = activeLedger)
    {
        activeLedger = _activeLedger;

        return activeLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the active <c>GeneralJournalAccountEntry</c> record.
    /// </summary>
    /// <returns>
    /// the active <c>GeneralJournalAccountEntry</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GeneralJournalAccountEntry parmActiveGeneralJournalAccountEntry()
    {
        return activeGeneralJournalAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveGeneralJournalEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the active general journal entry.
    /// </summary>
    /// <returns>
    /// The active general journal entry.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GeneralJournalEntry parmActiveGeneralJournalEntry()
    {
        return activeGeneralJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the active source document header.
    /// </summary>
    /// <returns>
    /// The active source document header.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SourceDocumentHeader parmActiveSourceDocumentHeader()
    {
        return activeSourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyCreditTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the reporting currency credit total amount.
    /// </summary>
    /// <returns>
    /// The reporting currency credit total amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Amount parmReportingCurrencyCreditTotal()
    {
        // <GEERU>
        if (subledgerJournalOverviewFormView.parmShowTransModeControl_RU() &&
            subledgerJournalOverviewFormView.parmShowTransModeControl_RU().selection() == LedgerBondShowTransMode_RU::ShowDebitOnly)
        {
            return 0;
        }
        // </GEERU>
        return reportingCurrencyCreditTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyDebitTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the reporting currency debit total amount.
    /// </summary>
    /// <returns>
    /// The reporting currency debit total amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Amount parmReportingCurrencyDebitTotal()
    {
        // <GEERU>
        if (subledgerJournalOverviewFormView.parmShowTransModeControl_RU() &&
            subledgerJournalOverviewFormView.parmShowTransModeControl_RU().selection() == LedgerBondShowTransMode_RU::ShowCreditOnly)
        {
            return 0;
        }
        // </GEERU>
        return reportingCurrencyDebitTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubledgerJournalOverviewFormView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>SubledgerJournalOverviewFormView</c> instance.
    /// </summary>
    /// <param name="_subledgerJournalOverviewFormView">
    /// The <c>SubledgerJournalOverviewFormView</c> class instance.
    /// </param>
    /// <returns>
    /// The <c>SubledgerJournalOverviewFormView</c> instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SubledgerJournalOverviewFormView parmSubledgerJournalOverviewFormView(
        SubledgerJournalOverviewFormView _subledgerJournalOverviewFormView = subledgerJournalOverviewFormView)
    {
        subledgerJournalOverviewFormView = _subledgerJournalOverviewFormView;

        return subledgerJournalOverviewFormView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalCurrencyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the transaction currency list.
    /// </summary>
    /// <returns>
    /// The transaction currency list.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List parmTotalCurrencyList()
    {
        List    currencyList;

        currencyList = totalCurrencyList;

        return currencyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCreditTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the transaction currency credit total amount.
    /// </summary>
    /// <returns>
    /// The transaction currency credit total amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Amount parmTransactionCurrencyCreditTotal()
    {
        // <GEERU>
        if (subledgerJournalOverviewFormView.parmShowTransModeControl_RU() &&
            subledgerJournalOverviewFormView.parmShowTransModeControl_RU().selection() == LedgerBondShowTransMode_RU::ShowDebitOnly)
        {
            return 0;
        }
        // </GEERU>
        return transactionCurrencyCreditTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyDebitTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the transaction currency debit total amount.
    /// </summary>
    /// <returns>
    /// The transaction currency debit total amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Amount parmTransactionCurrencyDebitTotal()
    {
        // <GEERU>
        if (subledgerJournalOverviewFormView.parmShowTransModeControl_RU() &&
            subledgerJournalOverviewFormView.parmShowTransModeControl_RU().selection() == LedgerBondShowTransMode_RU::ShowCreditOnly)
        {
            return 0;
        }
        // </GEERU>
        return transactionCurrencyDebitTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionVoucherList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the transaction voucher list.
    /// </summary>
    /// <returns>
    /// The transaction voucher list..
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List parmTransactionVoucherList()
    {
        return transactionVoucherList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataSourceQueryCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data source query criteria.
    /// </summary>
    private void setDataSourceQueryCriteria()
    {
        subledgerJournalEntryDataSource.queryBuildDataSource().addRange(fieldNum(SubledgerJournalEntry, RecId)).value(subledgerEntryRangeExpression);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryBuildRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the query build range.
    /// </summary>
    private void setQueryBuildRange()
    {
            transactionVocherRange.value(SysQuery::valueNotEmptyString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOverviewTotalDebitAmounts</Name>
				<Source><![CDATA[
    private void setOverviewTotalDebitAmounts(SubledgerIJournalOverview _subledgerJournalOverview, SubledgerJournalAccountEntry _subledgerJournalAccountEntry)
    {
        _subledgerJournalOverview.parmTransactionCurrencyDebitTotal(_subledgerJournalAccountEntry.TransactionCurrencyAmount);
        _subledgerJournalOverview.parmAccountingCurrencyDebitTotal(_subledgerJournalAccountEntry.AccountingCurrencyAmount);
        _subledgerJournalOverview.parmReportingCurrencyDebitTotal(_subledgerJournalAccountEntry.ReportingCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOverviewTotalCreditAmounts</Name>
				<Source><![CDATA[
    private void setOverviewTotalCreditAmounts(SubledgerIJournalOverview _subledgerJournalOverview, SubledgerJournalAccountEntry _subledgerJournalAccountEntry)
    {
        _subledgerJournalOverview.parmTransactionCurrencyCreditTotal(-_subledgerJournalAccountEntry.TransactionCurrencyAmount);
        _subledgerJournalOverview.parmAccountingCurrencyCreditTotal(-_subledgerJournalAccountEntry.AccountingCurrencyAmount);
        _subledgerJournalOverview.parmReportingCurrencyCreditTotal(-_subledgerJournalAccountEntry.ReportingCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the active currency differs from the ledger account.
    /// </summary>
    /// <returns>
    /// true if the active currency is same as ledger; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean showAccountingCurrencyAmount()
    {
        boolean showAccountingCurrency;

        if (activeLedger.AccountingCurrency != activeCurrencyCode)
        {
            showAccountingCurrency = true;
        }

        return showAccountingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showReportingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reporting currency credit total amount.
    /// </summary>
    /// <returns>
    /// The reporting currency credit total amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean showReportingCurrencyAmount()
    {
        boolean showReportingCurrency;

        if (activeLedger.ReportingCurrency)
        {
            showReportingCurrency = true;
        }

        return showReportingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subledgerJournalAccountEntryActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the subledger journal account entry for the activated event.
    /// </summary>
    /// <param name="_subledgerJournalAccountEntry">
    /// The subledger journal account entry.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void subledgerJournalAccountEntryActivated(SubledgerJournalAccountEntry  _subledgerJournalAccountEntry)
    {
        activeSubledgerJournalAccountEntry = _subledgerJournalAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subledgerJournalEntryActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the subledger journal entry activated event.
    /// </summary>
    /// <param name="_activeSubledgerJournalEntry">
    /// The subledger journal entry.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void subledgerJournalEntryActivated(SubledgerJournalEntry  _activeSubledgerJournalEntry)
    {
        activeSubledgerJournalEntry = _activeSubledgerJournalEntry;

        activeSourceDocumentHeader = SourceDocumentHeader::find(AccountingEvent::find(activeSubledgerJournalEntry.AccountingEvent).SourceDocumentHeader);

        subledgerJournalOverviewFormView.initViewForSubledgerJournalEntry();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCurrencyCodeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the total currency code change.
    /// </summary>
    /// <param name="_selectedCurrencyCode">
    /// The changed currency code.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void totalCurrencyCodeChanged(CurrencyCode _selectedCurrencyCode)
    {
        activeCurrencyCode = _selectedCurrencyCode;

        this.calculateTotalDebitCreditAmounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amounts.
    /// </summary>
    /// <param name="_subledgerEntryRangeExpression">
    /// The query build range value for subledger journal entry.
    /// </param>
    /// <param name="_transactionCurrencyCode">
    /// The transaction currency code.
    /// </param>
    /// <param name="_debitCredit">
    /// The debit credit enumeration.
    /// </param>
    /// <param name="_transactionVoucher">
    /// The transaction voucher.
    /// </param>
    /// <returns>
    /// The subledger journal account entry that has the total amounts.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static SubledgerJournalAccountEntry calculateTotalAmounts(
        str                 _subledgerEntryRangeExpression,
        CurrencyCode        _transactionCurrencyCode,
        DebitCredit         _debitCredit)
    {
        SubledgerJournalAccountEntry    subledgerJournalAccountEntry;
        Query                           query;
        QueryRun                        qr;
        QueryBuildDataSource            qbds;
        QueryBuildRange                 qbr;

        query = new Query();
        qbds = query.addDataSource(tableNum(SubledgerJournalAccountEntry));
        qbds.addRange(fieldNum(SubledgerJournalAccountEntry, Side)).value(queryValue(_debitCredit));

        if (_transactionCurrencyCode)
        {
            qbds.addRange(fieldNum(SubledgerJournalAccountEntry, TransactionCurrency)).value(queryValue(_transactionCurrencyCode));
            qbds.addSelectionField(fieldNum(SubledgerJournalAccountEntry, TransactionCurrencyAmount), SelectionField::Sum);
        }

        qbds.addSelectionField(fieldNum(SubledgerJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(SubledgerJournalAccountEntry, ReportingCurrencyAmount), SelectionField::Sum);

        qbds = qbds.addDataSource(tableNum(SubledgerJournalEntry));
        qbds.addLink(fieldNum(SubledgerJournalAccountEntry, SubledgerJournalEntry), fieldNum(SubledgerJournalEntry, RecId));

        qbr = qbds.addRange(fieldNum(SubledgerJournalEntry, RecId));
        qbr.value(_subledgerEntryRangeExpression);

        qr = new QueryRun(query);
        qr.next();

        subledgerJournalAccountEntry = qr.get(tableNum(SubledgerJournalAccountEntry));

        return subledgerJournalAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of <c>SubledgerJournalOverviewViewModel</c> class.
    /// </summary>
    /// <returns>
    /// The <c>SubledgerJournalOverviewViewModel</c> instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static SubledgerJournalOverviewViewModel construct()
    {
        return new SubledgerJournalOverviewViewModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServerState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the voucher and currency list for the subledger journal overview form.
    /// </summary>
    /// <param name="_generalJournalEntry">
    /// The general journal entry.
    /// </param>
    /// <param name="_ledger">
    /// The company information.
    /// </param>
    /// <returns>
    /// A container that contains a voucher and currency list.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getServerState(
        GeneralJournalEntry _generalJournalEntry,
        Ledger              _ledger)
    {
        str addRecIdToExpression(str _expression, int64 _recId)
        {
            str ret = _expression;

            if (strLen(ret) > 0)
            {
                ret += ',';
            }

            ret += queryValue(_recId);

            return ret;
        }

        SubledgerJournalAccountEntry    subledgerJournalAccountEntry;
        GeneralJournalAccountEntry      generalJournalAccountEntry;
        SubledgerJournalEntry           subledgerJournalEntry;
        str                             rangeExpression = '';

        Set accountingEventSet = new Set(Types::Int64);

        // Finds the related accounting events of the general journal entry.
        while select AccountingEvent from subledgerJournalEntry
            group by AccountingEvent
            where subledgerJournalEntry.Ledger == _ledger.RecId &&
                  subledgerJournalEntry.AccountingEvent != 0
        exists join subledgerJournalAccountEntry
            where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
        exists join generalJournalAccountEntry
            where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry &&
                generalJournalAccountEntry.GeneralJournalEntry == _generalJournalEntry.RecId
        {
            accountingEventSet.add(subledgerJournalEntry.AccountingEvent);
        }

        SetEnumerator accountingEventSetEnumerator = accountingEventSet.getEnumerator();
        // Creates the query build range expression for the selected accounting events.
        while (accountingEventSetEnumerator.moveNext())
        {
            while select RecId from subledgerJournalEntry
                where subledgerJournalEntry.AccountingEvent == accountingEventSetEnumerator.current()
            {
                rangeExpression = addRecIdToExpression(rangeExpression, subledgerJournalEntry.RecId);
            }
        }

        List transactionVoucherList = SubledgerJournalOverviewViewModel::getVoucherListFromExpression(rangeExpression);
        List transactionCurrencyList = SubledgerJournalOverviewViewModel::getCurrencyListFromExpression(rangeExpression);

        return [rangeExpression,
            transactionVoucherList.pack(),
            transactionCurrencyList.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherListFromExpression</Name>
				<Source><![CDATA[
    private static List getVoucherListFromExpression(str _subledgerJournalEntryRecIdExpression)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(SubledgerJournalEntry));
        qbds.addGroupByField(fieldNum(SubledgerJournalEntry, Voucher));
        QueryBuildRange qbr = qbds.addRange(fieldNum(SubledgerJournalEntry, RecId));
        qbr.value(_subledgerJournalEntryRecIdExpression);
        QueryRun qr = new QueryRun(query);

        List transactionVoucherList = new List(Types::String);

        while (qr.next())
        {
            SubledgerJournalEntry subledgerJournalEntry = qr.get(tableNum(SubledgerJournalEntry));
            transactionVoucherList.addEnd(subledgerJournalEntry.Voucher);
        }

        return transactionVoucherList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyListFromExpression</Name>
				<Source><![CDATA[
    private static List getCurrencyListFromExpression(str _subledgerJournalEntryRecIdExpression)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(SubledgerJournalAccountEntry));
        qbds.addGroupByField(fieldNum(SubledgerJournalAccountEntry, TransactionCurrency));

        qbds = qbds.addDataSource(tableNum(SubledgerJournalEntry));
        qbds.addLink(fieldNum(SubledgerJournalAccountEntry, SubledgerJournalEntry), fieldNum(SubledgerJournalEntry, RecId));
        QueryBuildRange qbr = qbds.addRange(fieldNum(SubledgerJournalEntry, RecId));
        qbr.value(_subledgerJournalEntryRecIdExpression);
        QueryRun qr = new QueryRun(query);

        List transactionCurrencyList = new List(Types::String);

        while (qr.next())
        {
            SubledgerJournalAccountEntry subledgerJournalAccountEntry = qr.get(tableNum(SubledgerJournalAccountEntry));
            transactionCurrencyList.addEnd(subledgerJournalAccountEntry.TransactionCurrency);
        }

        return transactionCurrencyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSubledgerJournalOverviewFormView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>SubledgerJournalOverviewViewModel</c> class.
    /// </summary>
    /// <param name="_subledgerJournalOverviewFormView">
    /// An instance of the <c>SubledgerJournalOverviewFormView</c> class.
    /// </param>
    /// <returns>
    /// The instance of <c>SubledgerJournalOverviewViewModel</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static SubledgerJournalOverviewViewModel newFromSubledgerJournalOverviewFormView(
        SubledgerJournalOverviewFormView    _subledgerJournalOverviewFormView
        )
    {
        SubledgerJournalOverviewViewModel   subledgerJournalOverviewViewModel;

        Debug::assert(_subledgerJournalOverviewFormView != null);

        subledgerJournalOverviewViewModel = SubledgerJournalOverviewViewModel::construct();
        subledgerJournalOverviewViewModel.parmSubledgerJournalOverviewFormView(_subledgerJournalOverviewFormView);

        Debug::assert(subledgerJournalOverviewViewModel != null);

        subledgerJournalOverviewViewModel.initialize();

        return subledgerJournalOverviewViewModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVoucherCurrencyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the transaction currency list of a specific voucher.
    /// </summary>
    /// <param name="_subledgerEntryRangeExpression">
    /// The query build range value for subledger journal entry.
    /// </param>
    /// <param name="_transactionVoucher">
    /// The transaction voucher.
    /// </param>
    /// <returns>
    /// The currency list.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static List populateVoucherCurrencyList(
        str     _subledgerEntryRangeExpression,
        Voucher _transactionVoucher = '')
    {
        SubledgerJournalAccountEntry    subledgerJournalAccountEntry;
        List                            totalCurrencyList;
        Query                           query;
        QueryRun                        qr;
        QueryBuildDataSource            qbds;
        QueryBuildRange                 qbr;

        totalCurrencyList = new List(Types::String);

        query = new Query();
        qbds = query.addDataSource(tableNum(SubledgerJournalAccountEntry));
        qbds.addGroupByField(fieldNum(SubledgerJournalAccountEntry, TransactionCurrency));

        qbds = qbds.addDataSource(tableNum(SubledgerJournalEntry));
        qbds.addLink(fieldNum(SubledgerJournalAccountEntry, SubledgerJournalEntry), fieldNum(SubledgerJournalEntry, RecId));

        qbr = qbds.addRange(fieldNum(SubledgerJournalEntry, RecId));
        qbr.value(queryValue(_subledgerEntryRangeExpression));
        qbr = qbds.addRange(fieldNum(SubledgerJournalEntry, Voucher));
        qbr.value(queryValue(_transactionVoucher));

        qr = new QueryRun(query);

        while (qr.next())
        {
            subledgerJournalAccountEntry = qr.get(tableNum(SubledgerJournalAccountEntry));
            totalCurrencyList.addEnd(subledgerJournalAccountEntry.TransactionCurrency);
        }

        return totalCurrencyList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>