<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdBOMCurrent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class serves as a FormCtrl for form ProdBOMOverview
/// </summary>
public class PmfFormCtrl_ProdBOMCurrent extends PmfFormCtrl
{
    boolean calledFromFormula;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();
    
        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        if (this.isCatchWeightEnabled())
        {
            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,BOMQuantity)),
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,BOMQuantity_PdsCWRemainFinancial)),
                    methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,InventoryQuantity)),
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,InventoryQuantity_PdsCWInventCalc)),
                    methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,InventoryQuantity)),
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,InventoryQuantity_PdsCWInventStup)),
                    methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,InventoryQuantity)),
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,InventoryQuantity_PdsCWRemainPhysical)),
                    methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,ProductionGroup)),
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,ProductionGroup_PdsCWBatchSched)),
                    methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,ProductionGroup)),
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,ProductionGroup_M_PdsCWUnitId)),
                    methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,Quantity)),
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,Quantity_PdsCWBatchSize)),
                    methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,Quantity)),
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,Quantity_PdsCWBatchEst)),
                    methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,Quantity)),
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,Quantity_PdsCWBatchStup)),
                    methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,Quantity)),
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,Quantity_PdsCWRemainInventPhysical)),
                    methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,BOMLine)),
                    formRun.design().controlName(formControlStr(ProdBOMCurrent,PdsCW)),
                    methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);
        }

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdBOMCurrent,BOMLine)),
                methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO142");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOMCurrent,Identification)),
                formRun.design().controlName(formControlStr(ProdBOMCurrent,Identification_ProdId)),
                methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO138");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdBOMCurrent,BOMQuantity)),
                methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO143");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdBOMCurrent,Production)),
                methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO138");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOMCurrent,IdentificationProd)),
                formRun.design().controlName(formControlStr(ProdBOMCurrent,IdentificationProd_ProdId)),
                methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO138");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdBOMCurrent,ProductionGroup)),
                methodstr(PmfFormCtrl_ProdBOMCurrent, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO138");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called before the form has been initialized
    /// </summary>
    /// <remarks>
    /// Overriding classes need to set the FormRun object.
    /// </remarks>
    public void initPre()
    {
        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (formRun.args().menuItemName()
                == menuitemdisplaystr(PmfProdBOMFormulaCurrent))
        {
            calledFromFormula = true;
        }

        calledFromFormula = calledFromFormula
            || this.menuItemName() == menuitemdisplaystr(PmfProdBOMFormulaCurrent)
            || (this.caller()
                && this.caller().name() == formstr(ProdBOMOverview)
                && this.caller().pmfIsEnabled());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is item formula enabled?
    /// </summary>
    /// <returns>
    /// true, if formula enabled; otherwise false
    /// </returns>
    public NoYes isFormulaEnabled()
    {
        ProdBOM prodBOM = buffer;

        return #PmfEnabled && (calledFromFormula
                || prodBOM.prodTable().ProdType == ProdType::Process);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The object is created
    /// </summary>
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdBOM))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>
    /// returns instance
    /// </returns>
    public static PmfFormCtrl_ProdBOMCurrent construct()
    {
        return new PmfFormCtrl_ProdBOMCurrent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PmfFormCtrl_ProdBOMCurrent</c>
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// New instance of class <c>PmfFormCtrl_ProdBOMCurrent</c>
    /// </returns>
    public static PmfFormCtrl_ProdBOMCurrent newFromForm(FormRun _fr)
    {
        PmfFormCtrl_ProdBOMCurrent frmCtrl;

        frmCtrl = PmfFormCtrl_ProdBOMCurrent::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>