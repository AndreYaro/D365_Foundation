<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCdxChannelDbDirectAccess</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net;
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Retail.CommerceDataExchange;
using Microsoft.Dynamics.Retail.SynchLibrary.Metadata;

/// <summary>
/// The <c>RetailCdxChannelDbDirectAccess</c> class executes various operations against channel database. This class is not supposed to be executed in transaction scope (ttsbegin/ttscommit).
/// </summary>
public class RetailCdxChannelDbDirectAccess extends RunBaseBatch implements BatchRetryable
{
    RetailCDXDownloadUpload    downloadUpload;
    RetailConnJobId            jobID;
    RetailCDXDataStoreRefRecId dataStoreRecID;
    RetailCDXScheduleRefRecId  scheduleRecID;

    str                        workDir;
    RetailCdxSqlCommandTimeout sqlTimeout;
    RetailCDXTryCount          maxTryCount;
    int                        totalRowsAffected;

    guid                       correlationId;
    // container of container [tableName, fieldName, minFilter, maxFilter];
    container tableReplicationLog;

    // Obsolete: kept for backward compatibility.
    System.Reflection.Assembly cdxAssembly;

    #define.DownloadSessionLockName('DownloadSessionLock\%1')
    #define.CurrentVersion(1)

    #localmacro.CurrentList
        downloadUpload,
        jobID,
        dataStoreRecID,
        scheduleRecID,
        correlationId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        RetailConnDatabaseProfile dataStore;

        select Name from dataStore where dataStore.RecId == dataStoreRecID;

        if (this.downloadUpload == RetailCDXDownloadUpload::Download)
        {
            return strFmt("@Retail:RetailCdxChannelDatabaseDataApplyBatchJobCaption", dataStore.Name);
        }
        else
        {
            return strFmt("@Retail:RetailCdxChannelDatabaseDataApplyBatchJobCaption", dataStore.Name) + ': ' + this.jobID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct channel database data processing batch task
    /// </summary>
    /// <param name = "_downloadUpload">Type of data processing</param>
    /// <param name = "_jobID">Job ID.</param>
    /// <param name = "_dataStoreRecID">Data store RecId.</param>
    /// <param name = "_scheduleRecID">Schedule RecId.</param>
    /// <returns>The channel database data process task.</returns>
    public void new (RetailCDXDownloadUpload _downloadUpload, RetailConnJobId _jobID, RetailCDXDataStoreRefRecId _dataStoreRecID, RetailCDXScheduleRefRecId _scheduleRecID)
    {
        super();

        this.downloadUpload = _downloadUpload;
        this.jobID = _jobID;
        this.dataStoreRecID = _dataStoreRecID;
        this.scheduleRecID  = _scheduleRecID;

        this.maxTryCount = RetailConnParameters::getCDXTryCount();
        this.sqlTimeout = RetailConnParameters::find().getSqlCommandTimeout();

        str workDirBase = System.IO.Path::GetTempPath();
        str workDirName = System.IO.Path::GetRandomFileName();
        workDir = System.IO.Path::Combine(workDirBase, workDirName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDataWritingRunner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct channel database data writing batch task
    /// </summary>
    /// <param name = "_dataStoreRecID">Data store RecId.</param>
    /// <returns>The constructed batch task runner.</returns>
    public static RetailCdxChannelDbDirectAccess constructDataWritingRunner(RetailCDXDataStoreRefRecId _dataStoreRecID)
    {
        RetailCdxChannelDbDirectAccess runner = new RetailCdxChannelDbDirectAccess(
            RetailCdxDownloadUpload::Download,
            '',
            _dataStoreRecID,
            0);

        return runner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDataReadingRunner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct channel database data reading batch task
    /// </summary>
    /// <param name = "_jobID">Job ID.</param>
    /// <param name = "_dataStoreRecID">DataStore RecId.</param>
    /// <param name = "_scheduleRecID">Schedule RecId.</param>
    /// <returns>The constructed batch task runner.</returns>
    public static RetailCdxChannelDbDirectAccess constructDataReadingRunner(RetailConnJobId _jobID, RetailCDXDataStoreRefRecId _dataStoreRecID, RetailCDXScheduleRefRecId _scheduleRecID)
    {
        RetailCdxChannelDbDirectAccess runner = new RetailCdxChannelDbDirectAccess(
            RetailCdxDownloadUpload::Upload,
            _jobID,
            _dataStoreRecID,
            _scheduleRecID);

        return runner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute data process task.
    /// </summary>
    public void run()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
        System.Exception ex;

        try
        {
            RetailConnDatabaseProfile dataStore = RetailConnDatabaseProfile::findByRecId(this.dataStoreRecID);

            if (!dataStore)
            {
                throw error(strFmt("@Retail:DataStoreNotFoundErrorMsg", this.dataStoreRecID));
            }

            RetailCdxDataStoreHeartBeatLog::LogAccess(this.dataStoreRecID);

            if (dataStore.isDataStoreSynchronizationPaused())
            {
                warning(strFmt("@Retail:DataStoreSyncPausedByUserWarningMsg", dataStore.Name));
                ApplicationEventSource::EventWriteCDXDataStoreDataSyncPausedByUser(dataStore.Name, this.paramCorrelationId());
                return;
            }

            if (!dataStore.ConnectionString)
            {
                warning(strFmt("@Retail:InvalidDataStoreConnectionStringWarningMsg", dataStore.Name));
                ApplicationEventSource::EventWriteRetailCDXDbDirectAccessWarning(this.jobID, this.dataStoreRecID, this.scheduleRecID, this.paramCorrelationId(), 'Data store connection string is missing.');
                return;
            }

            if (this.downloadUpload == RetailCDXDownloadUpload::Download)
            {
                this.RunDownload();
            }
            else
            {
                this.RunUpload();
            }
        }
        catch (xppEx)
        {
            ex = xppEx;
            ApplicationEventSource::EventWriteRetailCDXDbDirectAccessError(this.jobID, this.dataStoreRecID, this.scheduleRecID, this.paramCorrelationId(), ex.Message);
        }
        catch (ex)
        {
            ApplicationEventSource::EventWriteRetailCDXDbDirectAccessError(this.jobID, this.dataStoreRecID, this.scheduleRecID, this.paramCorrelationId(), ex.Message);
        }
        finally
        {
            this.cleanUp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpload</Name>
				<Source><![CDATA[
    private void runUpload()
    {
        RetailCDXJobUploadSourceContext uploadSourceCtx = new RetailCDXJobUploadSourceContext(this.jobID, this.dataStoreRecID, this.scheduleRecID, this.paramCorrelationId(), this.getBatchJobId());
        uploadSourceCtx.execute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version        = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSqlLoginFailure</Name>
				<Source><![CDATA[
    private boolean isSqlLoginFailure(int errorNumber)
    {
        // Adding error codes associated with User Login Failure Exception.
        // Reference Link: https://docs.microsoft.com/en-us/sql/relational-databases/errors-events/database-engine-events-and-errors?view=sql-server-2017
        switch (errorNumber)
        {
            case 4064:
            case 18401:
            case 18451:
            case 18452:
            case 18456:
            case 18458:
            case 18459:
            case 18460:
            case 18461:
            case 18462:
            case 18463:
            case 18464:
            case 18465:
            case 18466:
            case 18467:
            case 18468:
            case 18470:
            case 18471:
            case 18486:
            case 18487:
            case 18488:
            case 40184:
            case 40197:
            case 40501:
            case 40620:
            case 40697:
            case 40801:
            case 46721:
            case 47035:
            case 47036:
            case 47037:
            case 47039:
            case 47041:
            case 47042:
            case 49918:
            case 49920:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDownload</Name>
				<Source><![CDATA[
    protected void runDownload()
    {
        RetailConnDatabaseProfile         dataStore;
        boolean                           sessionErrorFound;

        select firstonly Name from dataStore where dataStore.RecId == this.dataStoreRecID;

        RetailCdxFeatureControl::initializeSynchLibraryFeatureControlParameters();

        List downloadSessions = RetailCDXDownloadService::GetDownloadSessionList(dataStore.Name);
        ListIterator downloadSessionListIterator = new ListIterator(downloadSessions);

        while (downloadSessionListIterator.more())
        {
            RetailAsyncClientDownloadSession session = downloadSessionListIterator.value();
            if (RetailCdxFeatureControl::isDownloadSessionDependencyEnforcementEnabled())
            {
                // if the system is configured to apply the download sessions in sequence (i.e. in the order they are created)
                // then stop applying subsequent available download sessions as soon as the current download session fails. i.e. do not suppress the exception
                this.applyDownloadSession(session);
            }
            else
            {
                // if the system is not configured to run the download sessions in sequence (i.e. in the order they are created) then suppress any failure
                // so that it doesn't prevent the next available download session from being applied.
                try
                {
                    this.applyDownloadSession(session);
                }
                catch (Exception::Error)
                {
                    // suppress exception as failure events is already logged in the context.
                    sessionErrorFound = true;
                }
            }

            downloadSessionListIterator.next();
        }

        // throw error message to fail the batch task if any of the session fail to be applied on the target.
        if (sessionErrorFound)
        {
            throw error("@Retail:ApplyDownloadSessionErrorMsg");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDownloadV1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the package of all available download sessions.
    /// </summary>
    [SysObsolete('This method is deprecated.', false, 10\10\2023)]
    protected void runDownloadV1()
    {
        this.runDownload();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDownloadSession</Name>
				<Source><![CDATA[
    private void applyDownloadSession(RetailAsyncClientDownloadSession _session)
    {
        RetailCDXJobDownloadTargetContext downloadTargetContext = new RetailCDXJobDownloadTargetContext(_session, this.dataStoreRecID);
        downloadTargetContext.execute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    private void cleanUp()
    {
        try
        {
            if (workDir && System.IO.Directory::Exists(workDir))
            {
                System.IO.Directory::Delete(workDir, true);
            }
        }
        catch (Exception::CLRError)
        {
            System.Exception ex = CLRInterop::getLastException();
            new RetailCDXLogger().logCDXResourceCleanUpFailureWarning(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadDataPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the data package from the blob storage.
    /// </summary>
    /// <param name = "_blobId">The file blob Id.</param>
    /// <param name = "_dataGroupRecId">The Retail CDX Data Group.</param>
    /// <param name = "_checkSumExpected">The Retail CDX Check Sum.</param>
    /// <param name = "_logger">The <c>RetailCDXSessionLogger</c> object.</param>
    /// <returns>The downloaded data package.</returns>
    protected DataPackage downloadDataPackage(RetailCDXFilePathOrGuid _blobId, RetailCDXDataGroupRefRecId _dataGroupRecId, RetailCDXCheckSum _checkSumExpected, RetailCdxSessionLogger _logger)
    {
        RetailConnParameters schedulerParameter = RetailConnParameters::find();

        if (!System.IO.Directory::Exists(this.workDir))
        {
            System.IO.Directory::CreateDirectory(workDir);
        }

        str subWorkDirName = _blobId;
        str subWorkDir = System.IO.Path::Combine(workDir, subWorkDirName);

        System.IO.Directory::CreateDirectory(subWorkDir);

        str dataFilePath = System.IO.Path::Combine(subWorkDir, RetailCDXConstants::PackageFileName);

        _logger.logDownloadSessionDataStoreStartDownloading();

        RetailCDXFilePathOrGuid uri = RetailCDXPackageStore::getPackageLink(
            _dataGroupRecId,
            RetailCDXDownloadUpload::Download,
            _blobId,
            schedulerParameter.getSasTokenTimeout());

        WebClient webClient;

        try
        {
            webClient = new WebClient();
            webClient.DownloadFile(uri, dataFilePath);
        }
        finally
        {
            if (webClient)
            {
                webClient.Dispose();
            }
        }

        _logger.logDownloadSessionDataStoreFinishDownloading();

        // validate checksum
        boolean isDataPackageValid = Microsoft.Dynamics.Retail.SynchLibrary.Utility.FileCheck::ValidateFile(dataFilePath, _checkSumExpected);

        if (!isDataPackageValid)
        {
            _logger.logDownloadSessionDataStoreCheckSumValidationFailed();
            throw Global::error("@Retail:RetailCdxCheckSumValidationFailed");
        }

        DataPackage::DecompressDataPackage(dataFilePath, subWorkDir);
        DataPackage dataPackage = new DataPackage(subWorkDir);
        dataPackage.LoadManifest();

        return dataPackage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceRequestHeader</Name>
				<Source><![CDATA[
    private ReadRequestHeader getSourceRequestHeader(str _connectionString, RetailCDXSessionNumber _rerunSession)
    {
        RetailConnSchedulerJobTable job;
        RetailConnSchedulerSubjobTable subjob;
        RetailConnSchedulerJobLine jobLine;
        RetailConnSchedulerSubjobFieldList fieldMapping;
        RetailConnConversionType convType;
        str fromField, toField, convValue;
        ReadRequestHeader header;
        ReadRequest readRequest;
        System.Data.SqlClient.SqlConnection conn = null;
        System.Data.SqlClient.SqlCommand cmd = null;
        System.Data.SqlClient.SqlParameterCollection params;
        CLRObject params_t;
        CLRObject exception;
        int64 minFilter;
        int64 maxFilter;
        int64 minActiveRowVersion;
        Retailcdxuploadsession uploadSessionTable;
        boolean tableExists;
        DictField targetField;
        boolean extensionTableSupportAvailable;
        System.Type readRequestType;
        System.Reflection.MethodInfo readRequestAddExtensionTableMethod;
        RetailConnLocationDesignTable parentDesignTable;
        RetailConnLocationDesignTable extensionDesignTable;

        str sqlCheckTableExists = 'IF EXISTS (SELECT * FROM sys.tables WHERE object_id = OBJECT_ID(@tableViewName)) SELECT CAST(1 AS BIT) ELSE IF EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(@tableViewName)) SELECT CAST(1 AS BIT) ELSE SELECT CAST(0 AS BIT);';
        str sqlGetMinFilter = 'SELECT ISNULL(MAX(FILTERMAX), 0) FROM [crt].[TABLEREPLICATIONLOG] WHERE TABLENAME=@tableName AND FILTERFIELDNAME=@filterName;';
        str sqlGetMinFilterRerun = 'SELECT ISNULL((SELECT TOP 1 FILTERMIN FROM [crt].[TABLEREPLICATIONLOG] WHERE TABLENAME=@tableName AND FILTERFIELDNAME=@filterName AND UPLOADSESSIONID=@localUploadSessionId), -1);';
        str sqlGetMinActiveRowVersion = 'SELECT CAST(MIN_ACTIVE_ROWVERSION() AS BIGINT);';
        str sqlGetMaxFilter_template = 'SELECT ISNULL(MAX(CAST({1} AS BIGINT)), 0) FROM {0} WHERE ROWVERSION < @minActiveRowVersion;';
        str sqlGetMaxFilter;

        RetailConnDatabaseProfile dataStore;
        str errorMessage;

        select firstonly Name from dataStore where dataStore.RecId == this.dataStoreRecID;

        select firstonly IsUpload from job
        where job.jobId == this.jobID;

        if (!job.IsUpload)
        {
            // Job %1 is not an upload job
            throw Global::error(strFmt("@REX4040216", this.jobID));
        }

        try
        {
            // given that application updates may not be bundled with binary updates
            // we need to verify whether the necessary functionality is available on the current binary references
            readRequestType = new ReadRequest('.', '.').GetType();
            readRequestAddExtensionTableMethod = readRequestType.GetMethod("AddExtensionTable");
            extensionTableSupportAvailable = readRequestAddExtensionTableMethod != null;

            if (_rerunSession)
            {
                select firstonly LocalUploadSessionId
                    from uploadSessionTable
                    where uploadSessionTable.UploadSessionId == _rerunSession;
            }

            header = new Microsoft.Dynamics.Retail.CommerceDataExchange.ReadRequestHeader();
            header.JobID = this.jobID;
            header.SourceDataStoreName = dataStore.Name;
            conn = new System.Data.SqlClient.SqlConnection(_connectionString);
            conn.Open();

            // get MIN_ACTIVE_ROWVERSION
            cmd = new System.Data.SqlClient.SqlCommand(sqlGetMinActiveRowVersion, conn);
            minActiveRowVersion = cmd.ExecuteScalar();
            cmd.Dispose();
            cmd = null;

            while select *
                from subjob
                exists join jobline
                    where subjob.subJobId == jobLine.subJobId
                        && jobLine.enabled == NoYes::Yes
                exists join job
                where jobLine.jobId == job.jobId
                    && Job.jobId == this.jobID
            {
                // table mapping
                readRequest = new ReadRequest(subjob.ChannelTableName, subjob.AXTableName);

                while select fromFieldName, toFieldName, conversionType, conversionValue
                    from fieldMapping
                    where fieldMapping.subjobId == subjob.subJobId
                {
                    fromField = fieldMapping.fromFieldName;
                    toField = fieldMapping.toFieldName;
                    convValue = fieldMapping.conversionValue;
                    convType = fieldMapping.conversionType;

                    TableId tid = tableName2Id(subjob.AXTableName);
                    targetField = new DictField(tid, fieldName2Id(tid, toField));

                    if (!targetField || !targetField.name(DbBackend::Sql))
                    {
                        // if configuration key is not enabled for a field, skip
                        continue;
                    }

                    if (convType == RetailConnConversionType::None)
                    {
                        readRequest.AddTransferColumnPair(fromField, toField);
                    }
                    else if (convType == RetailConnConversionType::Constant)
                    {
                        readRequest.AddTransferColumnPair(fromField, toField, convValue);
                    }
                }

                if (!RetailConnReplicationUtilities::isGlobalTable(subjob.AXTableName))
                {
                    readRequest.AddTransferColumnPair('DATAAREAID', 'DataAreaId');
                }

                // add extension tables, if any
                if (extensionTableSupportAvailable)
                {
                    while select locationTableName from extensionDesignTable
                    exists join parentDesignTable
                    where parentDesignTable.locationTableName == subJob.ChannelTableName &&
                          parentDesignTable.RetailConnChannelSchema == subJob.RetailConnChannelSchema &&
                          extensionDesignTable.ParentTable == parentDesignTable.RecId
                    {
                        System.Object[] argumentArray = new System.Object[1]();
                        argumentArray.SetValue(extensionDesignTable.locationTableName, 0);
                        readRequestAddExtensionTableMethod.Invoke(readRequest, argumentArray);
                    }
                }

                // if table does not exist, skip adding read request
                cmd = new System.Data.SqlClient.SqlCommand(sqlCheckTableExists, conn);
                params_t = cmd.get_Parameters();
                params = params_t as System.Data.SqlClient.SqlParameterCollection;
                params.Add('@tableViewName', subjob.ChannelTableName);
                tableExists = cmd.ExecuteScalar();
                cmd.Dispose();
                cmd = null;

                if (!tableExists)
                {
                    continue;
                }

                if (_rerunSession)
                {
                    cmd = new System.Data.SqlClient.SqlCommand(sqlGetMinFilterRerun, conn);
                    params_t = cmd.get_Parameters();
                    params = params_t as System.Data.SqlClient.SqlParameterCollection;
                    params.Add('@tableName', subjob.ChannelTableName);
                    params.Add('@filterName', subjob.ReplicationCounterFieldName);
                    params.Add('@localUploadSessionId', uploadSessionTable.LocalUploadSessionId);
                    minFilter = cmd.ExecuteScalar();
                    cmd.Dispose();
                    cmd = null;

                    // upload session not found in channel DB. Re-run is not possible.
                    // update upload session with error message and exit.
                    if (minFilter < 0)
                    {
                        errorMessage = strfmt("@Retail:RetailCdxRerunUploadSessionMissingErrorMessage", uploadSessionTable.LocalUploadSessionId, dataStore.Name);
                        throw Global::error(errorMessage);
                    }
                }
                else
                {
                    cmd = new System.Data.SqlClient.SqlCommand(sqlGetMinFilter, conn);
                    params_t = cmd.get_Parameters();
                    params = params_t as System.Data.SqlClient.SqlParameterCollection;
                    params.Add('@tableName', subjob.ChannelTableName);
                    params.Add('@filterName', subjob.ReplicationCounterFieldName);
                    minFilter = cmd.ExecuteScalar();
                    cmd.Dispose();
                    cmd = null;
                }

                sqlGetMaxFilter = System.String::Format(
                    System.Globalization.CultureInfo::get_InvariantCulture(),
                    sqlGetMaxFilter_template,
                    subjob.ChannelTableName,
                    subjob.ReplicationCounterFieldName);

                cmd = new System.Data.SqlClient.SqlCommand(sqlGetMaxFilter, conn);
                params_t = cmd.get_Parameters();
                params = params_t as System.Data.SqlClient.SqlParameterCollection;
                params.Add('@minActiveRowVersion', minActiveRowVersion);
                maxFilter = cmd.ExecuteScalar();
                cmd.Dispose();
                cmd = null;

                this.tableReplicationLog += [ [subjob.ChannelTableName, subjob.ReplicationCounterFieldName, minFilter, maxFilter] ];

                readRequest.AddFilter(
                subjob.ReplicationCounterFieldName,
                Microsoft.Dynamics.Retail.CommerceDataExchange.FilterOperator::GreaterThan,
                int642str(minFilter));

                readRequest.AddFilter(
                subjob.ReplicationCounterFieldName,
                Microsoft.Dynamics.Retail.CommerceDataExchange.FilterOperator::LessThanOrEqualTo,
                int642str(maxFilter));

                header.AddReadRequest(readRequest);
            }

            conn.Close();
            conn.Dispose();
            conn = null;

            return header;
        }
        finally
        {
            if (cmd != null)
            {
                cmd.Dispose();
                cmd = null;
            }

            if (conn != null)
            {
                conn.Dispose();
                conn = null;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRerunSessionId</Name>
				<Source><![CDATA[
    private RetailCDXSessionNumber getRerunSessionId()
    {
        RetailCDXUploadSession uploadSessionTable;

        select minof(UploadSessionId)
        from uploadSessionTable
        where uploadSessionTable.DataStore == this.dataStoreRecID
            && uploadSessionTable.JobId == this.jobID
            && uploadSessionTable.Rerun == RetailCDXUploadSessionRerun::Marked;

        return uploadSessionTable.UploadSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramDataStoreRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the data store record Id.
    /// </summary>
    /// <param name="_dataStoreRecID">The data store record Id.</param>
    /// <returns>Data store record Id.</returns>
    internal RefRecId paramDataStoreRecID(RefRecId _dataStoreRecID = dataStoreRecID)
    {
        dataStoreRecID = _dataStoreRecID;

        return dataStoreRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramJobID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value for job ID in <c>RetailConnJobID</c>.
    /// </summary>
    /// <param name="_jobID">The value of <c>RetailConnJobID</c>; optional.</param>
    /// <returns>Job ID.</returns>
    internal RetailConnJobID paramJobID(RetailConnJobID _jobID = jobID)
    {
        jobID = _jobID;

        return jobID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTableReplicationLog</Name>
				<Source><![CDATA[
    private int64 updateTableReplicationLog(System.Data.SqlClient.SqlConnection _conn, RetailCDXFileSize fileSize, System.Data.SqlClient.SqlTransaction _sqlTransaction, RetailCdxSessionLogger _logger)
    {
        // update table replication log
        System.Data.SqlClient.SqlCommand cmd = null;
        System.Data.SqlClient.SqlParameterCollection params;
        int64 sessionId;
        CLRObject params_t;
        CLRObject exception;
        str tableName;
        str fieldName;
        int64 minFilter;
        int64 maxFilter;

        str sqlCreateUploadSession = 'INSERT INTO [crt].[UPLOADSESSION] ([JOBID],[STATUS],[DATECREATED],[DATEUPLOADED],[FILESIZE]) VALUES(@jobId, @status, GETUTCDATE(), GETUTCDATE(), @fileSize); SELECT SCOPE_IDENTITY();';
        str sqlInsertReplicationLog = 'INSERT INTO [crt].[TABLEREPLICATIONLOG] ([UPLOADSESSIONID],[TABLENAME],[FILTERFIELDNAME],[FILTERMIN],[FILTERMAX]) VALUES (@uploadSessionId, @tableName, @filterFieldName, @filterMin, @filterMax);';

        try
        {
            cmd = new System.Data.SqlClient.SqlCommand(sqlCreateUploadSession, _conn, _sqlTransaction);
            params_t = cmd.get_Parameters();
            params = params_t as System.Data.SqlClient.SqlParameterCollection;
            params.Add('@jobId', this.jobID);
            params.Add('@status', enum2int(RetailCDXUploadSessionStatus::Applied));
            params.Add('@fileSize', fileSize);
            sessionId = cmd.ExecuteScalar();
            cmd.Dispose();
            cmd = null;

            for (int i = 1; i <= conlen(this.tableReplicationLog); ++i)
            {
                container log = conpeek(this.tableReplicationLog, i);
                [tableName, fieldName, minFilter, maxFilter] = log;

                cmd = new System.Data.SqlClient.SqlCommand(sqlInsertReplicationLog, _conn, _sqlTransaction);
                params_t = cmd.get_Parameters();
                params = params_t as System.Data.SqlClient.SqlParameterCollection;
                params.Add('@uploadSessionId', sessionId);
                params.Add('@tableName', tableName);
                params.Add('@filterFieldName', fieldName);
                params.Add('@filterMin', minFilter);
                params.Add('@filterMax', maxFilter);
                cmd.ExecuteNonQuery();

                cmd.Dispose();
                cmd = null;
            }

            return sessionId;
        }
        catch (Exception::CLRError)
        {
            exception = CLRInterop::getLastException();

            if (cmd != null)
            {
                cmd.Dispose();
                cmd = null;
            }

            _logger.logUploadSessionCreateLocalUploadSessionFailed(exception.ToString());
            throw Global::warning(exception.ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDownloadSession</Name>
				<Source><![CDATA[
    private void updateDownloadSession(str _connectionString, int64 downloadSessionId, int64 fileSize, str jobIdentifier, str jobDescription, utcdatetime dateRequested, utcdatetime dateDownloaded, utcdatetime dateApplied, RetailCDXDownloadSessionStatus status, RetailCdxSessionLogger _logger)
    {
        // update table crt.downloadsession
        System.Data.SqlClient.SqlConnection conn = null;
        System.Data.SqlClient.SqlCommand cmd = null;
        System.Data.SqlClient.SqlParameterCollection params;
        CLRObject params_t;
        CLRObject exception;
        str tableName;
        str fieldName;
        int64 minFilter;
        int64 maxFilter;

        str sqlCreateDownloadSession = 'IF EXISTS (SELECT * FROM [crt].[DOWNLOADSESSION] WHERE ID = @sessionId) UPDATE [crt].[DOWNLOADSESSION] SET FILESIZE = @fileSize, DATEREQUESTED = @dateRequested, DATEDOWNLOADED = @dateDownloaded, DATEAPPLIED = @dateApplied, STATUS = @status WHERE ID = @sessionId '
            + 'ELSE INSERT INTO [crt].[DOWNLOADSESSION] ([ID],[JOBID],[JOBDESCRIPTION],[FILESIZE],[DATEREQUESTED],[DATEDOWNLOADED],[DATEAPPLIED],STATUS) VALUES(@sessionId, @jobId, @jobDescription, @fileSize, @dateRequested, @dateDownloaded, @dateApplied, @status)';

        try
        {
            conn = new System.Data.SqlClient.SqlConnection(_connectionString);
            conn.Open();

            cmd = new System.Data.SqlClient.SqlCommand(sqlCreateDownloadSession, conn);
            params_t = cmd.get_Parameters();
            params = params_t as System.Data.SqlClient.SqlParameterCollection;
            params.Add('@sessionId', downloadSessionId);
            params.Add('@jobId', jobIdentifier);
            params.Add('@jobDescription', jobDescription);
            params.Add('@fileSize', fileSize);
            params.Add('@dateRequested', datetime2Str(dateRequested));
            params.Add('@dateDownloaded', datetime2Str(dateDownloaded));
            params.Add('@dateApplied', datetime2Str(dateApplied));
            params.Add('@status', enum2int(status));

            cmd.ExecuteNonQuery();
            cmd.Dispose();
            cmd = null;
            conn.Close();
            conn.Dispose();
            conn = null;

            return;
        }
        catch (Exception::CLRError)
        {
            exception = CLRInterop::getLastException();

            if (cmd != null)
            {
                cmd.Dispose();
                cmd = null;
            }

            if (conn != null)
            {
                conn.Dispose();
                conn = null;
            }

            // Swallow the exception and log the error message.
            _logger.logUpdateChannelDbDownloadSessionFailed(exception.toString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUploadSession</Name>
				<Source><![CDATA[
    private void createUploadSession(boolean _success, RetailCDXFilePathOrGuid _targetStorage, RetailCDXFileSize _fileSize, RetailCdxCheckSum _checkSum, RetailCdxLocalUploadSessionId _localUploadSessionId, str _errorMessage, RetailCDXSessionNumber _rerunFor, RetailCdxSessionLogger _logger)
    {
        int infoLogLine1, infoLogLine2;

        infoLogLine1 = Global::infologLine();
        try
        {
            RetailCDXSessionNumber axUploadSessionId = RetailCDXUploadHelper::CreateUploadSession(this.dataStoreRecID, this.jobID, this.scheduleRecID, _success, _targetStorage, _fileSize, _checkSum, _localUploadSessionId, _errorMessage, _rerunFor);
        }
        catch
        {
            // if there is an exception during creating AX upload session Id, log it and throw
            str exceptionMessage;

            infoLogLine2 = Global::infologLine();

            if (infoLogLine2 > infoLogLine1)
            {
                exceptionMessage = infolog.text(infoLogLine2);
            }

            if (_logger)
            {
                _logger.logUploadSessionCreateAXUploadSessionFailed(_localUploadSessionId, exceptionMessage);
            }

            throw Global::error(strFmt("@Retail:RetailCDXCreateAXUploadSessionFailed", _localUploadSessionId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailCdxChannelDbDirectAccess</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailCdxChannelDbDirectAccess</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDataPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the data package by applying its content to the database.
    /// </summary>
    /// <param name = "_connectionString">The connection string of the channel database where the package should be applied.</param>
    /// <param name = "_dataPackage">The data package with the changes.</param>
    /// <returns>The number of affected rows by the data package.</returns>
    protected int processDataPackage(str _connectionString, DataPackage _dataPackage)
    {
        SqlTargetRequestHandler handler = new SqlTargetRequestHandler(_connectionString, this.sqlTimeout);
        handler.ProcessDataPackage(_dataPackage);

        return handler.RowsAffected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramCorrelationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the correlation Id..
    /// </summary>
    /// <param name="_correlationId">The correlation Id.</param>
    /// <returns>The correlation Id.</returns>
    internal guid paramCorrelationId(guid _correlationId = correlationId)
    {
        correlationId = _correlationId;

        return correlationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current batchJobId.
    /// </summary>
    /// <returns>The batch job Id.</returns>
    internal RecId getBatchJobId()
    {
        RecId batchJobId;

        if (BatchHeader::isExecutingInBatch())
        {
            batchJobId = this.parmCurrentBatch().BatchJobId;
        }

        return batchJobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>