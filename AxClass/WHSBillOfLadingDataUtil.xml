<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSBillOfLadingDataUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSBillOfLadingDataUtil</c> is responsible for populating the WHS bill of lading tables with data driven from WHS processes.
/// </summary>
public class WHSBillOfLadingDataUtil
{
    WHSBillOfLading         billOfLading;
    WHSBillOfLadingCarrier  billOfLadingCarrier;
    WHSBillOfLadingOrder    billOfLadingOrder;
    WHSLoadTable            loadTable;
    WHSShipmentTable        whsShipmentTable;
    WHSLoadLine             loadLine;
    WHSNMFCCode             curNMFCCode;
    SalesTable              salesTable;
    container               previousPurchaseOrders;
    boolean                 createMasterBOL;

    boolean                 doPrompt;
    WHSShipmentTable        shipmentCriteria;
    InventQty               orderQty;
    Weight                  orderWeight;
    WMSHazardousMaterial    hazardousMaterial;
    CustPurchaseOrder       orderNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteExistingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all Bill of Ladings report data associated to the current bill of lading Id.
    /// </summary>
    private void deleteExistingData()
    {
        ttsBegin;

        // Deleting BOL header will clean up order and carrier records automatically.
        select firstonly forUpdate billOfLading
            where billOfLading.billOfLadingId == whsShipmentTable.BillOfLadingId;

        billOfLading.delete();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMasterBOL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all master Bill of Ladings report data associated to the current bill of lading Id.
    /// </summary>
    private void deleteMasterBOL()
    {
        // Deleting master BOL will remove the master BOL Id from relating records automatically.
        delete_from billofLading
            where billOfLading.BillOfLadingId == loadTable.BillOfLadingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryRun</Name>
				<Source><![CDATA[
    private QueryRun getQueryRun()
    {
        Query                query = new Query(queryStr(WHSBillOfLading));
        QueryBuildDataSource qbds  = query.dataSourceTable(tableNum(WHSShipmentTable));

        if (shipmentCriteria.RecId)
        {
            SysQuery::findOrCreateRange(qbds, fieldNum(WHSShipmentTable, RecId)).value(queryValue(shipmentCriteria.RecId));
        }

        qbds.update(true);

        QueryRun qr = new QueryRun(query);

        return qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateMasterBOL</Name>
				<Source><![CDATA[
    public boolean parmCreateMasterBOL(boolean _createMasterBOL = createMasterBOL)
    {
        createMasterBOL = _createMasterBOL;

        return createMasterBOL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPromptForQuery</Name>
				<Source><![CDATA[
    public boolean parmPromptForQuery(boolean _prompt = doPrompt)
    {
        doPrompt = _prompt;

        return doPrompt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentCriteria</Name>
				<Source><![CDATA[
    public WHSShipmentTable parmShipmentCriteria(WHSShipmentTable _shipmentTable = shipmentCriteria)
    {
        shipmentCriteria = _shipmentTable;

        return shipmentCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderNum</Name>
				<Source><![CDATA[
    protected CustPurchaseOrder findOrderNum()
    {
        return salesTable.PurchOrderFormNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBillOfLadingTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the tables related to the Bill of Ladings report.
    /// </summary>
    public void populateBillOfLadingTables()
    {
        boolean                 firstLoop = true;

        QueryRun queryRun = this.getQueryRun();

        if (doPrompt)
        {
            if (!queryRun.prompt())
            {
                return;
            }
        }

        ttsBegin;

        previousPurchaseOrders = conNull();
        while (queryRun.next())
        {
            whsShipmentTable    = queryRun.get(tableNum(WHSShipmentTable));
            loadLine            = queryRun.get(tableNum(WHSLoadLine));
            loadTable           = WHSLoadTable::find(whsShipmentTable.LoadId);
            curNMFCCode         = WHSEcoResProductTransportationCodes::findByItemId(loadLine.ItemId).nmfcCode;
            salesTable          = salesTable::find(loadLine.OrderNum);
            orderNum            = this.findOrderNum();

            if (HMIMManagementFeatureVisibilityManager::isVisible())
            {
                hazardousMaterial   = InventTable::find(loadLine.ItemId).HMIMIndicator;
            }
            
            if (!whsShipmentTable.BillOfLadingId)
            {
                whsShipmentTable.setBillOfLadingId();
                whsShipmentTable.update();

                TMSFreightBillDetail::setBillOfLadingId(whsShipmentTable);
            }

            if (createMasterBOL
            &&  firstLoop)
            {
                // If load does not have a BOL Id yet, need to populate it before creating the master BOL
                if (!loadTable.BillOfLadingId)
                {
                    loadTable.selectForUpdate(true);
                    loadTable.BillOfLadingId = WHSNumberSeqExt::newGetNum(WHSParameters::numRefWHSBillOfLadingId()).num(WHSNumberSeqExtParameters::emptyParameters());
                    loadTable.update();
                }

                this.deleteMasterBOL();
                this.populateMasterBOL();
            }

            this.validateNMFCCodes(queryRun);

            if (firstLoop)
            {
                firstLoop = false;

                this.deleteExistingData();
                this.populateBOLHeader();
            }

            this.populateCarrierInformation();
            this.populateCustomerOrderInfo();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBOLHeader</Name>
				<Source><![CDATA[
    private void populateBOLHeader()
    {
        DocuRef         docuRef;
        Notes           notes;
        WHSParameters   whsParameters = WHSParameters::find();

        ttsBegin;

        //Populate Notes
        while select Notes from docuRef
            where docuRef.TypeId       == whsParameters.bolNoteType
            &&    docuRef.RefRecId     == whsShipmentTable.RecId
            &&    docuRef.RefTableId   == whsShipmentTable.TableId
            &&    docuRef.RefCompanyId == whsShipmentTable.DataAreaId
        {
            notes += docuRef.Notes + '\n';
        }
        billOfLading.Notes                      = notes;

        // Populate general header information.
        this.initializeBillOfLadingFromShipment(whsShipmentTable);

        if (WHSBillOfLadingDataUtilDeliveryAddressFromPurchLineFlight::instance().isEnabled())
        {
            billOfLading.ShippingPostalAddress  = whsShipmentTable.getPickUpAddress().parmPostalAddressRecId();
        }
        else
        {
            billOfLading.ShippingPostalAddress  = loadTable.OriginPostalAddress;
        }

        billOfLading.MasterBillOfLadingId       = loadTable.BillOfLadingId;

        this.initializeBillOfLading();

        billOfLading.insert();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query for finding the carrier record.
    /// </summary>
    /// <returns>Sys query.</returns>
    protected SysDaQueryObject buildQueryForCarrier()
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(billOfLadingCarrier);

        queryObject.firstOnlyHint = true;
        queryObject.forUpdateHint = true;

        queryObject.whereClause(
            new SysDaEqualsExpression(new SysDaFieldExpression(billOfLadingCarrier, fieldStr(WHSBillOfLadingCarrier, billOfLadingId)), new SysDaValueExpression(whsShipmentTable.BillOfLadingId)).and(
            new SysDaEqualsExpression(new SysDaFieldExpression(billOfLadingCarrier, fieldStr(WHSBillOfLadingCarrier, NMFCCode)), new SysDaValueExpression(curNMFCCode))).and(
            new SysDaEqualsExpression(new SysDaFieldExpression(billOfLadingCarrier, fieldStr(WHSBillOfLadingCarrier, HazardousMaterial)), new SysDaValueExpression(hazardousMaterial))));

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBillOfLadingCarrier</Name>
				<Source><![CDATA[
    protected void findBillOfLadingCarrier()
    {
        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.execute(new SysDaFindObject(this.buildQueryForCarrier()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBillOfLadingCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BillOfLadingCarrier</c> record.
    /// </summary>
    protected void initializeBillOfLadingCarrier()
    {
        WHSNMFC nmfc = WHSNMFC::find(curNMFCCode);

        billOfLadingCarrier.BillOfLadingId      = whsShipmentTable.BillOfLadingId;
        billOfLadingCarrier.HandlingType        = nmfc.DefaultHandlingType;
        billOfLadingCarrier.PackageType         = nmfc.DefaultHandlingType;
        if (HMIMBillOfLadingItemHazardousToggle::instance().isEnabled())
        {
            billOfLadingCarrier.Name                = hazardousMaterial ? this.retrieveBillOfLadingCarrierName() : nmfc.Name;
        }
        else
        {
            billOfLadingCarrier.Name                = hazardousMaterial ? WHSParameters::find().HMIMHazardousMaterialGroupDesc : nmfc.Name;
        }
        billOfLadingCarrier.NMFCCode            = nmfc.NMFCCode;
        billOfLadingCarrier.LTLClassCode        = nmfc.LTLClassCode;
        billOfLadingCarrier.HazardousMaterial   = hazardousMaterial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveBillOfLadingCarrierName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BillOfLadingCarrier</c> record.
    /// </summary>
    /// <returns>
    /// The carrier name for the item and load.
    /// </returns>
    private TMSName retrieveBillOfLadingCarrierName()
    {
        HMIMItemMaterial    itemMaterial;
        TMSName             carrierName;
        Description255      shipTxtTranslation;

        LanguageId          languageId = SystemParameters::getSystemLanguageId();

        while select itemMaterial
            where itemMaterial.ItemId == loadLine.ItemId
        {
            shipTxtTranslation  = itemMaterial.getItemShipPrintText(languageId);
            carrierName         += carrierName ? strFmt(' , %1', shipTxtTranslation) : shipTxtTranslation;
        }
        
        return carrierName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregateBillOfLadingCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aggregates the <c>BillOfLadingCarrier</c> record.
    /// </summary>
    protected void aggregateBillOfLadingCarrier()
    {
        billOfLadingCarrier.HandlingQty += loadLine.PickedQty;
        billOfLadingCarrier.PackageQty += loadLine.PickedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstTimePopulatingCarrierInformationForOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected final boolean isFirstTimePopulatingCarrierInformationForOrder()
    {
        boolean isFirstTime = !conFind(previousPurchaseOrders, orderNum);

        if (isFirstTime)
        {
            previousPurchaseOrders += orderNum;
        }

        return isFirstTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCarrierInformation</Name>
				<Source><![CDATA[
    protected void populateCarrierInformation()
    {
        ttsBegin;

        if (this.isFirstTimePopulatingCarrierInformationForOrder())
        {
            orderQty = 0;
            orderWeight = 0;
        }
        else
        {
            select firstOnly forUpdate billOfLadingOrder
                where billOfLadingOrder.BillOfLadingId  == whsShipmentTable.BillOfLadingId
                &&    billOfLadingOrder.OrderNum        == orderNum;

            orderQty    = billOfLadingOrder.Qty;
            orderWeight = billOfLadingOrder.Weight;
        }
        
        InventTable inventTable = inventTable::find(loadLine.ItemId);
        Weight subtotalWeight = loadLine.PickedQty * inventTable.grossWeight();
        
        this.findBillOfLadingCarrier();

        if (!billOfLadingCarrier.RecId)
        {
            this.initializeBillOfLadingCarrier();
        }

        this.aggregateBillOfLadingCarrier();
        billOfLadingCarrier.Weight += subtotalWeight;

        billOfLadingCarrier.write();

        orderQty    += loadLine.PickedQty;
        orderWeight += subtotalWeight;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBillOfLadingOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BillOfLadingOrder</c> record.
    /// </summary>
    protected void initializeBillOfLadingOrder()
    {
        billOfLadingOrder.BillOfLadingId    = whsShipmentTable.BillOfLadingId;
        billOfLadingOrder.OrderNum          = orderNum;
        billOfLadingOrder.isPallet          = !loadTable.LoadFloorStack;
        billOfLadingOrder.ReferenceType     = WMSReferenceType::Sales;
        billOfLadingOrder.Qty               = orderQty;
        billOfLadingOrder.Weight            = orderWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustomerOrderInfo</Name>
				<Source><![CDATA[
    protected void populateCustomerOrderInfo()
    {
        ttsBegin;

        select firstOnly forUpdate billOfLadingOrder
            where billOfLadingOrder.BillOfLadingId  == whsShipmentTable.BillOfLadingId
            &&    billOfLadingOrder.OrderNum        == orderNum;

        if (!billOfLadingOrder.RecId)
        {
            this.initializeBillOfLadingOrder();
            billOfLadingOrder.insert();
        }
        else
        {
            if (billOfLadingOrder.Qty       != orderQty     ||
                billOfLadingOrder.Weight    != orderWeight)
            {
                billOfLadingOrder.Qty               = orderQty;
                billOfLadingOrder.Weight            = orderWeight;
                billOfLadingOrder.update();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBillOfLadingFromShipment</Name>
				<Source><![CDATA[
    protected void initializeBillOfLadingFromShipment(WHSShipmentTable _whsShipmentTable)
    {
        billOfLading.shipmentId                 = _whsShipmentTable.ShipmentId;
        billOfLading.inventLocationId           = _whsShipmentTable.InventLocationId;
        billOfLading.CustAccount                = _whsShipmentTable.AccountNum;
        billOfLading.billOfLadingId             = _whsShipmentTable.BillOfLadingId;

        if (WHSBillOfLadingDataUtilDeliveryAddressFromPurchLineFlight::instance().isEnabled())
        {
            billOfLading.DeliveryPostalAddress = _whsShipmentTable.getDropOffAddress().parmPostalAddressRecId();
        }
        else
        {
            billOfLading.DeliveryPostalAddress  = _whsShipmentTable.DeliveryPostalAddress;
        }
        
        billOfLading.ProNum                     = _whsShipmentTable.ProNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBillOfLadingFromLoadTable</Name>
				<Source><![CDATA[
    protected void initializeBillOfLadingFromLoadTable(WHSLoadTable _loadTable)
    {
        billOfLading.inventLocationId           = _loadTable.InventLocationId;
        billOfLading.CustAccount                = _loadTable.AccountNum;
        billOfLading.billOfLadingId             = _loadTable.BillOfLadingId;
        billOfLading.MasterBOLFlag              = NoYes::Yes;
        billOfLading.ShippingPostalAddress      = _loadTable.OriginPostalAddress;
        billOfLading.DeliveryPostalAddress      = _loadTable.DestinationPostalAddress;

        billOfLading.ProNum                     = _loadTable.ProNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBillOfLading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BillOfLading</c> record.
    /// </summary>
    protected void initializeBillOfLading()
    {
        WHSParameters   whsParameters = WHSParameters::find();
        DlvTerm         dlvTerm = DlvTerm::find(whsShipmentTable.DlvTermId);
        TMSCarrier      carrier = TMSCarrier::find(loadTable.CarrierCode);

        billOfLading.FreightChargeTerms         = dlvTerm.FreightChargeTerm;

        billOfLading.CarrierCode                = carrier.CarrierCode;
        billOfLading.carrierName                = carrier.Name;
        billOfLading.CarrierServiceCode         = loadTable.CarrierServiceCode;
        billOfLading.TrailerNumber              = loadTable.TrailerNumber;
        billOfLading.SealNum                    = this.retrieveSealNums();
        billOfLading.SCAC                       = carrier.SCAC;

        if (!billOfLading.ProNum)
        {
            billOfLading.ProNum                 = loadTable.ProNum;
        }

        billOfLading.TrailerLoaded              = whsParameters.DefaultTrailerLoaded;
        billOfLading.FreightCounted             = whsParameters.DefaultFreightCounted;
        
        billOfLading.ThirdPartyPostalAddress    = LogisticsPostalAddress::findByLocation(carrier.getLocationFromRole(TMSParameters::find().BOLCarrierRoleRecId).RecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMasterBOL</Name>
				<Source><![CDATA[
    private void populateMasterBOL()
    {
        ttsBegin;
        
        billOfLading.shipmentId = whsShipmentTable.ShipmentId;

        this.initializeBillOfLadingFromLoadTable(loadTable);
        this.initializeBillOfLading();
        billOfLading.insert();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSealNums</Name>
				<Source><![CDATA[
    private WHSSealNums retrieveSealNums()
    {
        WHSSealNum sealNums = loadTable.InspectionSeal;
        
        TMSLoadSeal tmsLoadSeal;
        while select SealNum from tmsLoadSeal
            where tmsLoadSeal.LoadId == loadTable.LoadId
        {
            if (sealNums)
            {
                sealNums += ', ' + tmsLoadSeal.SealNum;
            }
            else
            {
                sealNums = tmsLoadSeal.sealNum;
            }
        }

        return sealNums;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNMFCCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that all products on the shipment have NMFC code defined
    /// </summary>
    /// <param name="_queryRun">
    /// An instance of queryRun that is currently being used to populate the bill of lading data.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws and error when NMFC code has not been defined for the current product being processed.
    /// </exception>
    private void validateNMFCCodes(QueryRun _queryRun)
    {
        if (!curNMFCCode && this.mustCheckNMFCCode(loadLine))
        {
            error(strFmt("@WAX2195", loadLine.itemId));
            // If we failed validation then we must loop over the rest of the the loadLines and validate those items as well.
            while (_queryRun.next())
            {
                loadLine         = _queryRun.get(tableNum(WHSLoadLine));
                curNMFCCode      = WHSEcoResProductTransportationCodes::findByItemId(loadLine.ItemId).nmfcCode;
                if (!curNMFCCode && this.mustCheckNMFCCode(loadLine))
                {
                    error(strFmt("@WAX2195", loadLine.ItemId));
                }
            }
            throw error("@WAX2196");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckNMFCCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if NMFC code must be checked.
    /// </summary>
    /// <param name = "_loadLine">Load line for NMFC code.</param>
    /// <returns>true if NMFC code must be checked; otherwise, false.</returns>
    protected boolean mustCheckNMFCCode(WHSLoadLine _loadLine)
    {
        return _loadLine.ItemId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSBillOfLadingDataUtil construct()
    {
        WHSBillOfLadingDataUtil whsBillOfLadingDataUtil = new WHSBillOfLadingDataUtil();

        return whsBillOfLadingDataUtil;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>