<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRAutoTaxSearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRAutoTaxSearch</c> class searchs for the correct sales tax based of
///     priorities set in the Sales tax defaulting rules and sends a warning is the sales tax is incorrect.
/// </summary>
public class MCRAutoTaxSearch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoSearchActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the autosearching tax group parameter has been set.
    /// </summary>
    /// <returns>
    ///     true if auto tax search is on; otherwise, false.
    /// </returns>
    public boolean autoSearchActive()
    {
        TaxParameters  taxParameters;

        taxParameters = TaxParameters::find();

        return taxParameters.MCRAutoTaxSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the sales tax if it is found.
    /// </summary>
    /// <param name="_city">
    ///     The city name used when searching for a tax group.
    /// </param>
    /// <param name="_state">
    ///     The state used when searching for a tax group.
    /// </param>
    /// <param name="_county">
    ///     The county name used when searching for a tax group.
    /// </param>
    /// <param name="_zip">
    ///     The zip code used when searching for a tax group.
    /// </param>
    /// <param name="_country">
    ///     The country used when searching for a tax group.
    /// </param>
    /// <returns>
    ///     The sales tax group that matches parameters passed into the method.
    /// </returns>
    public str setSalesTaxGroup(
        LogisticsAddressCityName    _city,
        LogisticsAddressStateId     _state,
        AddressCountyId             _county,
        LogisticsAddressZipCodeId   _zip,
        AddressCountryRegionId      _country)
    {
        TaxGroup salesTaxGroup;

        salesTaxGroup = this.taxSearch(_city, _state, _county, _zip,  _country);

        if (salesTaxGroup == "" && MCRAutoTaxHeader::findOrCreate(curext()).Warnings)
        {
            warning("@MCR20600");
        }
        return salesTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxSearch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the sales tax using the parameters.
    /// </summary>
    /// <param name="_city">
    ///     The city name used when searching for a tax group.
    /// </param>
    /// <param name="_state">
    ///     The state used when searching for a tax group.
    /// </param>
    /// <param name="_county">
    ///     The county used when searching for a tax group.
    /// </param>
    /// <param name="_zip">
    ///     The zip code used when searching for a tax group.
    /// </param>
    /// <param name="_country">
    ///     The country used when searching for a tax group.
    /// </param>
    /// <returns>
    ///     The sales tax group that matches parameters passed into the method.
    /// </returns>
    private TaxGroup taxSearch(
        LogisticsAddressCityName    _city,
        LogisticsAddressStateId     _state,
        AddressCountyId             _county,
        LogisticsAddressZipCodeId   _zip,
        AddressCountryRegionId      _country)
    {
        TaxGroup                defaultTaxGroup;
        MCRAutoTaxPriority      autoTaxPriority;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        QueryRun                queryRange;
        TaxGroupHeading         taxGroupHeading;

        while select City, State, County, ZipCode, Country from autoTaxPriority
            order by priority
        {
            query = new Query();
            queryBuildDataSource = query.addDataSource(tablenum(TaxGroupHeading));

            //checks to see if the box if checked and the field has a value. If true return city else a blank.
            queryBuildRange  = queryBuildDataSource.addRange(fieldnum(TaxGroupHeading, MCRCity));
            queryBuildRange.value((autoTaxPriority.City && _city != "") ? _city : sysQuery::valueEmptyString());
            queryBuildRange  = queryBuildDataSource.addRange(fieldnum(TaxGroupHeading, MCRState));
            queryBuildRange.value((autoTaxPriority.State && _state != "") ? _state : sysQuery::valueEmptyString());
            queryBuildRange  = queryBuildDataSource.addRange(fieldnum(TaxGroupHeading, MCRCounty));
            queryBuildRange.value((autoTaxPriority.County && _county != "") ? _county : sysQuery::valueEmptyString());
            queryBuildRange  = queryBuildDataSource.addRange(fieldnum(TaxGroupHeading, MCRZipCode));

            if (strlen(_zip) > 5)
            {
               queryBuildRange  = queryBuildDataSource.addRange(fieldnum(TaxGroupHeading, MCRZipCode));
               queryBuildRange.value((autoTaxPriority.ZipCode) ? substr(_zip,1,5): sysQuery::valueEmptyString());
            }
            else
            {
               queryBuildRange  = queryBuildDataSource.addRange(fieldnum(TaxGroupHeading, MCRZipCode));
               queryBuildRange.value((autoTaxPriority.ZipCode && _zip != "") ? _zip : sysQuery::valueEmptyString());
            }

            queryBuildRange  = queryBuildDataSource.addRange(fieldnum(TaxGroupHeading, MCRCountry));
            queryBuildRange.value((autoTaxPriority.Country && _country != "") ? _country : sysQuery::valueEmptyString());

            queryRange = new QueryRun(query);
            queryRange.next();

            if (queryRange.getNo(1))
            {
                taxGroupHeading = queryRange.getNo(1);
                break;
            }
        }
        if (taxGroupHeading)
        {
            defaultTaxGroup = taxGroupHeading.TaxGroup;
        }
        else
        {
            defaultTaxGroup = "";
        }

        return defaultTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWarnings</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sends warning if the sales tax is differnt than the
    ///     default sale tax using the tax search.
    /// </summary>
    /// <param name="_salesTax">
    ///     The sales tax group currently set on the address.
    /// </param>
    /// <param name="_city">
    ///     The city name used when searching for a tax group.
    /// </param>
    /// <param name="_state">
    ///     The state used when searching for a tax group.
    /// </param>
    /// <param name="_county">
    ///     The county used when searching for a tax group.
    /// </param>
    /// <param name="_zip">
    ///     The zip code used when searching for a tax group.
    /// </param>
    /// <param name="_country">
    ///     The country used when searching for a tax group.
    /// </param>
    public void taxWarnings(
        TaxGroup                    _salesTax,
        LogisticsAddressCityName    _city,
        LogisticsAddressStateId     _state,
        AddressCountyId             _county,
        LogisticsAddressZipCodeId   _zip,
        AddressCountryRegionId      _country)
    {
        TaxGroup defaultTaxGroup;

        if (MCRAutoTaxHeader::findOrCreate(curext()).Warnings)
        {
            defaultTaxGroup = this.taxSearch(_city, _state, _county, _zip,  _country);

            if (_salesTax != defaultTaxGroup)
            {
                warning("@MCR20601");
            }
        }
        else
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAutoChangeTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// update auto charge tax group for the address.
    /// </summary>
    /// <param name = "postalAddress">Logistics portal address.</param>
    [SubscribesTo(tablestr(LogisticsPostalAddress), delegatestr(LogisticsPostalAddress, updateAutoChangeTaxGroup))]
    public static void updateAutoChangeTaxGroup(LogisticsPostalAddress postalAddress)
    {
        MCRAutoTaxSearch autoTaxSearch;
        LogisticsLocationExt logisticsLocationExt = LogisticsLocationExt::find(postalAddress.Location);
        if (postalAddress.RecId)
        {
            autoTaxSearch = new MCRAutoTaxSearch();

            if (autoTaxSearch.autoSearchActive())
            {
                ttsbegin;
                logisticsLocationExt.selectForUpdate(true);
                logisticsLocationExt.TaxGroup = autoTaxSearch.setSalesTaxGroup(postalAddress.City,
                                                           postalAddress.State,
                                                           postalAddress.County,
                                                           postalAddress.ZipCode,
                                                           postalAddress.CountryRegionId);
                if (logisticsLocationExt.RecId)
                {
                    if (logisticsLocationExt.validateWrite())
                    {
                        logisticsLocationExt.update();
                    }
                }
                else if (logisticsLocationExt.TaxGroup)
                {
                    logisticsLocationExt.Location = postalAddress.Location;
                    if (logisticsLocationExt.validateWrite())
                    {
                        logisticsLocationExt.insert();
                    }
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>