<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransReportsController_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Common controller <c>TaxTransReportsController_IN</c> class for tax reports.
/// This class is used for the following <c>SalesTaxTransReport_IN</c>, <c>ServiceTaxTransReport_IN</c>, <c>TaxTransReport_IN</c>, <c>VATTransReport_IN</c> reports.
/// </summary>
class TaxTransReportsController_IN extends SrsReportRunController implements BatchRetryable
{
    container   fieldValues;
    str         headerNote;
    str         footerNote;
    str         fieldName;

    #define.FieldName('ParamSort')
    #define.ColumnName('ColumnCaption')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParameterNameByIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets selected parameter value based on index.
    /// </summary>
    /// <param name="_parameterIndex">
    /// <c>_parameterIndex</c> to which it is assigned to.
    /// </param>
    /// <returns>
    /// Parameter name based on index.
    /// </returns>
    public str getParameterNameByIndex(int _parameterIndex)
    {
        return (fieldName + int2str(_parameterIndex));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemporaryTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to return record Id of the temp table for menu item.
    /// </summary>
    /// <param name="_args">
    /// An instance of the <c>Args</c> class.
    /// </param>
    /// <returns>
    /// The record ID of the temp table.
    /// </returns>
    private recId getTemporaryTable(Args _args)
    {
        SrsReportRunPermission permission;
        RecId                  tmpTableDataRecId;
        Common                 temporarytable;

        permission = new SrsReportRunPermission();
        permission.assert();

        temporarytable    = _args.record();
        tmpTableDataRecId = SRSTmpTblMarshaller::SendTmpTblToDataProvider(temporarytable);

        CodeAccessPermission::revertAssert();

        return (tmpTableDataRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
        protected void preRunModifyContract()
    {
        this.setParameters(this.parmReportContract().parmRdpContract());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLabelsCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will sets field captions.
    /// </summary>
    /// <param name="_fieldValues">
    /// <c>_fieldValues</c> to which it is assigned to.
    /// </param>
    /// <param name="_headerNote">
    /// <c>_headerNote</c> to which it is assigned to.
    /// </param>
    /// <param name="_footerNote">
    /// <c>_footerNote</c> to which it is assigned to.
    /// </param>
    public void setLabelsCaption(
        container _fieldValues,
        str       _headerNote,
        str       _footerNote)
    {
        fieldValues = _fieldValues;
        headerNote  = _headerNote;
        footerNote  = _footerNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class objects and processes the report business logic.
    /// </summary>
    /// <param name="_contract">
    /// An instance of contract <c>SrsTmpTblMarshallerContract</c> class.
    /// </param>
    public void setParameters(SrsTmpTblMarshallerContract _contract)
    {
        SrsReportRdlDataContract rdlContract;
        int                      idx;

        #define.HeaderNote('HeaderNote')
        #define.FooterNote('FooterNote')

        rdlContract = this.parmReportContract().parmRdlContract();

        rdlContract.setValue(#HeaderNote, headerNote);
        rdlContract.setvalue(#FooterNote, footerNote);

        for (idx = 1; idx <= conlen(fieldValues); idx++)
        {
            rdlContract.setvalue(this.getParameterNameByIndex(idx), conpeek(fieldValues, idx));
        }

        _contract.parmTmpTableDataRecId(this.getTemporaryTable(this.parmArgs()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to set report name for menu item.
    /// </summary>
    public void setReportName()
    {
        switch (this.parmArgs().menuItemName())
        {
            case menuitemoutputstr(ServiceTaxTransReport_IN):
                fieldName = #FieldName;
                this.parmReportName(ssrsReportStr(ServiceTaxTransReport_IN, Report));
                break;

            case menuitemoutputstr(TaxTransReport_IN) :
                fieldName = #ColumnName;
                this.parmReportName(ssrsReportStr(TaxTransReport_IN, Report));
                break;

            case menuitemoutputstr(VATTransReport_IN) :
                fieldName = #FieldName;
                this.parmReportName(ssrsReportStr(VATTransReport_IN, Report));
                break;

            case menuitemoutputstr(SalesTaxTransReport_IN) :
                fieldName = #FieldName;
                this.parmReportName(ssrsReportStr(SalesTaxTransReport_IN, Report));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        TaxTransReportsController_IN controller = _args.parmObject();

        if (controller != null)
        {
            controller.parmArgs(_args);
            controller.setReportName();
            controller.parmShowDialog(false);
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>