<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostSalesOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes and posts sales orders based on run document parameters.
/// </summary>
[DemoDataPostBaseFactoryAttribute(DemoDataPostDocument::SalesOrder)]
public class DemoDataPostSalesOrder extends DemoDataPostBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSalesOrderBeUpdatedForDocumentStatus</Name>
				<Source><![CDATA[
    private boolean canSalesOrderBeUpdatedForDocumentStatus(SalesTable _salesTable, DocumentStatus _salesOrderDocumentStatus)
    {
        container canBeUpdated = _salesTable.checkIfUpdate();
        SalesTableCanBeUpdatedContract canBeUpdatedContract = SalesTableCanBeUpdatedContract::create(canBeUpdated);

        boolean shouldAllowProcessing;

        switch (_salesOrderDocumentStatus)
        {
            case DocumentStatus::Confirmation:
                shouldAllowProcessing = canBeUpdatedContract.parmCanConfirmationBeUpdated();
                break;

            case DocumentStatus::PackingSlip:
                shouldAllowProcessing = canBeUpdatedContract.parmCanPackingSlipBeUpdated();
                break;

            case DocumentStatus::Invoice:
                shouldAllowProcessing = canBeUpdatedContract.parmCanInvoiceBeUpdated();
                break;
        }

        return shouldAllowProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProcess</Name>
				<Source><![CDATA[
    private void doProcess(RecordSortedList _salesOrders, DocumentStatus _salesOrderDocumentStatus)
    {
        var salesFormLetter = SalesFormLetter::construct(_salesOrderDocumentStatus);

        DemoDataPostRunDocumentStatus runDocumentStatus;
        DemoDataPostDocumentStatus status;
        SalesTable salesTable;
        boolean salesOrderFound = _salesOrders.first(salesTable);

        while (salesOrderFound)
        {
            status = DemoDataPostDocumentStatus::Failed;

            runDocumentStatus = DemoDataPostRunDocumentStatus::addDocumentForProcessing(
                runId,
                demoDataPostRunDocument.RecId,
                salesTable.RecId,
                salesTable.TableId,
                salesTable.SalesId);

            try
            {
                salesFormLetter.update(
                    salesTable,
                    DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                    SalesUpdate::All,
                    AccountOrder::None,
                    NoYes::No,
                    NoYes::No);

                status = DemoDataPostDocumentStatus::Success;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0 && xSession::currentRetryCount() < DemoDataPostConstants::MaxRetryCount)
                {
                    retry;
                }
            }
            catch
            {
                Global::exceptionTextFallThrough();
            }
            finally
            {
                ttsbegin;

                runDocumentStatus.DocumentStatus = status;
                runDocumentStatus.CompletionTime = DateTimeUtil::getSystemDateTime();
                runDocumentStatus.update();

                ttscommit;
            }

            salesOrderFound = _salesOrders.next(salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Map the demo data target to a document status.
    /// </summary>
    /// <returns>The document status.</returns>
    private DocumentStatus findDocumentStatus()
    {
        DocumentStatus documentStatus;

        switch (demoDataPostRunDocument.DocumentTarget)
        {
            case DemoDataPostDocumentTarget::Confirm:
                documentStatus = DocumentStatus::Confirmation;
                break;

            case DemoDataPostDocumentTarget::PackingSlip:
                documentStatus = DocumentStatus::PackingSlip;
                break;

            case DemoDataPostDocumentTarget::Invoice:
                documentStatus = DocumentStatus::Invoice;
                break;

            default:
                throw error(strFmt("@DemoDataPost:InvalidDocumentTarget", demoDataPostRunDocument.DocumentTarget, demoDataPostRunDocument.Document));
        }

        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the set of sales orders to process.
    /// </summary>
    /// <param name = "_salesOrderDocumentStatus">The sales order document status for processing.</param>
    /// <returns>The set of sales orders.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RecordSortedList findSalesOrders(DocumentStatus _salesOrderDocumentStatus)
    {
        RecordSortedList salesTableList = new RecordSortedList(tableNum(SalesTable));
        salesTableList.sortOrder(fieldNum(SalesTable, SalesId));

        SalesTable salesTable;

        if (demoDataPostRunDocument.FromDocumentId && demoDataPostRunDocument.ToDocumentId)
        {
            while select salesTable
                order by SalesId
                where salesTable.SalesId >= demoDataPostRunDocument.FromDocumentId
                    && salesTable.SalesId <= demoDataPostRunDocument.ToDocumentId
            {
                if (this.canSalesOrderBeUpdatedForDocumentStatus(salesTable, _salesOrderDocumentStatus))
                {
                    salesTableList.ins(salesTable);
                }
            }
        }
        else if (demoDataPostRunDocument.FromDocumentId && !demoDataPostRunDocument.ToDocumentId)
        {
            while select salesTable
                order by SalesId
                where salesTable.SalesId >= demoDataPostRunDocument.FromDocumentId
            {
                if (this.canSalesOrderBeUpdatedForDocumentStatus(salesTable, _salesOrderDocumentStatus))
                {
                    salesTableList.ins(salesTable);
                }
            }
        }
        else if (!demoDataPostRunDocument.FromDocumentId && demoDataPostRunDocument.ToDocumentId)
        {
            while select salesTable
                order by SalesId
                where salesTable.SalesId <= demoDataPostRunDocument.ToDocumentId
            {
                if (this.canSalesOrderBeUpdatedForDocumentStatus(salesTable, _salesOrderDocumentStatus))
                {
                    salesTableList.ins(salesTable);
                }
            }
        }
        else
        {
            while select salesTable
                order by SalesId
            {
                if (this.canSalesOrderBeUpdatedForDocumentStatus(salesTable, _salesOrderDocumentStatus))
                {
                    salesTableList.ins(salesTable);
                }
            }
        }

        return salesTableList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    public DemoDataPostDocument getDocument()
    {
        return DemoDataPostDocument::SalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process()
    {
        DocumentStatus salesOrderDocumentStatus = this.findDocumentStatus();

        RecordSortedList salesOrderList = this.findSalesOrders(salesOrderDocumentStatus);

        this.doProcess(salesOrderList, salesOrderDocumentStatus);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>