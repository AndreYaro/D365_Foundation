<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>psaCustRetentionReleaseInvoiceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportParameterAttribute(classStr(PSAProjInvoiceContract))
]
class psaCustRetentionReleaseInvoiceDP extends SrsReportDataProviderPreProcess
{
    PSACustRetentionReleaseInvoiceTmp   tmpPSACustRetentionReleaseInvoice;
    PSAProjInvoiceTaxTmp                tmpPSAProjInvoiceTax;
    FormletterProformaPrint             formletterProformaPrint;
    CustTable                           custTable;
    PSAContractLineItems                contractLineItems;
    ProjTable                           projTable;
    ProjRevenueTrans                    projRevenueTrans;
    ProjProposalJour                    projProposalJour;
    CompanyInfo                         companyInfo;
    ProjInvoiceRevenueDetail            projInvoiceRevenueDetail;
    ProjRevenueTransSale                projRevenueTransSale;
    ProjInvoiceRevenue                  projInvoiceRevenue;
    ProjInvoiceJour                     projInvoiceJour;
    ProjProposalRevenueDetail           projProposalRevenueDetail;
    ProjProposalRevenue                 projProposalRevenue;
    ProjInvoiceJour                     projInvoiceJourMain;
    PrePrintLevel                       prePrintLevel;
    DocuRefSearch                       docuRefHeader;
    DocuRefSearch                       docuRef;
    boolean                             printDocuHeader;
    boolean                             printDocuLine;
    // <GTH>
    PSAProjInvoiceHeaderTmp             tmpPSAProjInvoiceHeader;
    // </GTH>

    boolean                 showSepaNotification;
    CustDirectDebitMandate  custDirectDebitMandate;
    CustBankAccount         custDirectDebitMandateBankAccount;

    ProjInvoiceLocalizationTmp      projInvoiceLocalizationTmp;
    boolean                         isFirstRecord;

    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProjInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>ProjInvoiceLocalizationTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PSAManageInvoiceTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(ProjInvoiceLocalizationTmp))
    ]
    public ProjInvoiceLocalizationTmp getProjInvoiceLocalizationTmp()
    {
        return projInvoiceLocalizationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAProjInvoiceHeader_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to select all records from table <c>PSAProjInvoiceHeaderTmp</c>.
    /// </summary>
    /// <returns>
    /// Returns the table object with all the data.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PSAProjInvoiceHeaderTmp))]
    public PSAProjInvoiceHeaderTmp getPSAProjInvoiceHeader_TH()
    {
        return tmpPSAProjInvoiceHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSACustRetentionReleaseInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>PSACustRetentionReleaseInvoiceTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PSACustRetentionReleaseInvoiceTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PSACustRetentionReleaseInvoiceTmp))
    ]
    public PSACustRetentionReleaseInvoiceTmp getPSACustRetentionReleaseInvoiceTmp()
    {
        return tmpPSACustRetentionReleaseInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpPSACustomerRetention</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the specified record and inserts it in the temporary table.
    /// </summary>
    public void insertTmpPSACustomerRetention()
    {
        CustTable cust = CustTable::find(projInvoiceJourMain.InvoiceAccount);
        tmpPSACustRetentionReleaseInvoice.CompanyPhone       = companyInfo.phone();
        tmpPSACustRetentionReleaseInvoice.CompanyTelefax     = companyInfo.teleFax();
        tmpPSACustRetentionReleaseInvoice.CompanyGiro        = companyInfo.Giro;
        tmpPSACustRetentionReleaseInvoice.CompanyCoRegNum    = companyInfo.CoRegNum;
        tmpPSACustRetentionReleaseInvoice.DeliveryName       = companyInfo.Name;
        tmpPSACustRetentionReleaseInvoice.DeliveryAddress    = companyInfo.postalAddress().Address;
        tmpPSACustRetentionReleaseInvoice.CompanyLogo        = FormLetter::companyLogo();
        tmpPSACustRetentionReleaseInvoice.CompanyDebitDirectId = BankAccountTable::findByCompany(companyInfo.DataArea, companyInfo.Bank).DebitDirectId;
        tmpPSACustRetentionReleaseInvoice.CustCompanyName    = cust.name();
        tmpPSACustRetentionReleaseInvoice.CustCompanyAddress = cust.address();
        tmpPSACustRetentionReleaseInvoice.CustCompanyPhone   = cust.phone();
        tmpPSACustRetentionReleaseInvoice.CustCompanyTelefax = cust.telefax();

        tmpPSACustRetentionReleaseInvoice.ProjInvoiceId      = projInvoiceJourMain.ProjInvoiceId;
        tmpPSACustRetentionReleaseInvoice.Name               = cust.name();
        tmpPSACustRetentionReleaseInvoice.InvoiceAccount     = projInvoiceJourMain.InvoiceAccount;
        tmpPSACustRetentionReleaseInvoice.InvoiceDate        = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        tmpPSACustRetentionReleaseInvoice.DueDate            = projInvoiceJour.DueDate;
        tmpPSACustRetentionReleaseInvoice.CurrencyId         = projInvoiceJourMain.CurrencyId;
        tmpPSACustRetentionReleaseInvoice.ContractId         = projInvoiceJourMain.ProjInvoiceProjId;
        tmpPSACustRetentionReleaseInvoice.PaymTermId         = cust.PaymTermId;
        tmpPSACustRetentionReleaseInvoice.AccountNum         = projInvoiceJourMain.InvoiceAccount;
        tmpPSACustRetentionReleaseInvoice.OurAccountNum      = projInvoiceJourMain.ourAccountNum();

        tmpPSACustRetentionReleaseInvoice.CustInvoiceDate    = projInvoiceJour.InvoiceDate;

        PSAProjProposalProj psaProjProposalProj;
        if (projRevenueTransSale.PSARefREcId)
        {
            ProjProposalRevenue projProposalRevenueLoc;
            ProjProposalRevenueDetail projProposalRevenueDetailLoc;
            select firstonly InvoicedNow from psaProjProposalProj
                exists join projProposalRevenueLoc
                    where psaProjProposalProj.ProjProposalId == projProposalRevenueLoc.ProposalId
                        && psaProjProposalProj.RetainedNow == projProposalRevenueDetail.AmountCur
                exists join projProposalRevenueDetailLoc
                    where projProposalRevenueDetailLoc.ProposalRefRecId == projProposalRevenueLoc.RecId
                        && projProposalRevenueDetailLoc.SaleRefRecId == projRevenueTransSale.PSARefREcId;
        }

        if (psaProjProposalProj.InvoicedNow)
        {
            tmpPSACustRetentionReleaseInvoice.InvoiceAmount = psaProjProposalProj.InvoicedNow;
        }
        else
        {
            tmpPSACustRetentionReleaseInvoice.InvoiceAmount = projInvoiceJour.InvoiceAmount + projProposalRevenueDetail.AmountCur;
        }

        tmpPSACustRetentionReleaseInvoice.RetainedAmtReq = projProposalRevenueDetail.AmountCur;
        tmpPSACustRetentionReleaseInvoice.InvoiceId          = projInvoiceJour.ProjInvoiceId;

        tmpPSACustRetentionReleaseInvoice.ShowSepaNotification = showSepaNotification;
        tmpPSACustRetentionReleaseInvoice.MandateReference   = custDirectDebitMandate.MandateReference;
        tmpPSACustRetentionReleaseInvoice.MandateSWIFTNo     = custDirectDebitMandateBankAccount.SWIFTNo;

        unchecked (Uncheck::TableSecurityPermission)
        {
            tmpPSACustRetentionReleaseInvoice.MandateBankIBAN = custDirectDebitMandateBankAccount.BankIBAN;
        }

        // PrePrintLevelShow used to print invoice according to selected paper format
        tmpPSACustRetentionReleaseInvoice.PrePrintLevelShow  = prePrintLevel;

        // Document attachments shown on Invoice
        if (printDocuHeader && docuRefHeader != null)
        {
            tmpPSACustRetentionReleaseInvoice.DocuRefHeaderVisibility   = NoYes::Yes;
            tmpPSACustRetentionReleaseInvoice.DocumentHeader            = Docu::concatDocuRefNotes(docuRefHeader);
            // Have to rewind docuRefSearch for use by next line
            docuRefHeader.init();
        }

        if (printDocuLine && docuRef != null)
        {
            tmpPSACustRetentionReleaseInvoice.DocuRefLineVisibility     = NoYes::Yes;
            tmpPSACustRetentionReleaseInvoice.DocumentLine              = Docu::concatDocuRefNotes(docuRef);
            // Have to rewind docuRefSearch for use by next line
            docuRef.init();
        }

        tmpPSACustRetentionReleaseInvoice.CompanyVATNum = TaxTransactionTaxIDHelper::getTaxID(
            projInvoiceJour.TableId,
            projInvoiceJour.RecId,
            projInvoiceJour.InvoiceDate).getLegalEntityTaxID();

        // Tax Exempt Number shown on Invoice
        if (ProjFormletterParameters::find().PrintInvoiceVATNum)
        {
            tmpPSACustRetentionReleaseInvoice.InvoiceVATNumVisibility = NoYes::Yes;
        }
        tmpPSACustRetentionReleaseInvoice.InvoiceAccountVATNum = TaxTransactionTaxIDHelper::getTaxID(
            projInvoiceJour.TableId,
            projInvoiceJour.RecId,
            projInvoiceJour.InvoiceDate).getCounterPartyTaxID();

        tmpPSACustRetentionReleaseInvoice.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocuRefSearch instance to print the Document Header on the invoice.
    /// </summary>
    private void printDocumentHeader()
    {
        printDocuHeader = false;

        if ((ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::Head) ||
            (ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::All))

        {
            docuRefHeader = DocuRefSearch::newTypeIdAndRestriction(ProjProposalJour::find(projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
            printDocuHeader = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocuRefSearch instance to print the Document Header on the invoice.
    /// </summary>
    /// <param name="_projProposalRevenueDetail">
    /// ProjProposalRevenueDetail reference.
    /// </param>
    private void printDocumentLine(ProjProposalRevenueDetail _projProposalRevenueDetail)
    {
        printDocuLine = false;

        if ((ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::Line) ||
            (ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::All))
        {
            docuRef = DocuRefSearch::newTypeIdAndRestriction(_projProposalRevenueDetail,
                                                            ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                            DocuRestriction::External);
            printDocuLine = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SQL Server Reporting Services (SSRS) report.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by SSRS at
    /// run time. The method should compute data and populate the data tables that will be returned to
    /// SSRS.
    /// </remarks>
    public void processReport()
    {
        PSAProjInvoiceContract contract    = this.parmDataContract() as PSAProjInvoiceContract;

        tmpPSACustRetentionReleaseInvoice.setConnection(this.parmUserConnection());

        prePrintLevel = ProjFormletterParameters::find().PrePrintLevelInvoice;
        companyInfo = CompanyInfo::find();

        if (contract.parmProjInvoiceJourRecId())
        {
            projInvoiceJourMain = ProjInvoiceJour::findRecId(contract.parmProjInvoiceJourRecId());
        }

        if (contract.parmFormLetterRecordId())
        {
            this.unpackFormLetter(contract.parmFormLetterRecordId());
        }

        showSepaNotification = this.showSepaNotification();

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU, #isoCZ, #isoPL]))
        {
            projInvoiceLocalizationTmp.setConnection(this.parmUserConnection());

            PSAProjInvoiceRPTHelperEE::createProjInvoiceLocalizationTmp(projInvoiceLocalizationTmp, projInvoiceJourMain);
        }
        // </GEEU>

        // Get the Document attachment to display in header
        this.printDocumentHeader();

        while select projProposalRevenueDetail
                join projRevenueTransSale
                    where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
                join projProposalRevenue
                    where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                        && projProposalRevenue.ProposalId == projInvoiceJourMain.ProposalId
        {
            select projInvoiceJour
                    join projInvoiceRevenue
                      join projInvoiceRevenueDetail
                        where projInvoiceJour.ProjInvoiceId == projInvoiceRevenue.ProjInvoiceId
                        && projInvoiceJour.InvoiceDate == projInvoiceRevenue.InvoiceDate
                        && projInvoiceRevenue.RecId == projInvoiceRevenueDetail.InvoiceRefRecId
                && projInvoiceRevenueDetail.SaleRefRecId == projRevenueTransSale.psaRefREcId;

            // Get the Document attachment to display for each line
            this.printDocumentLine(projProposalRevenueDetail);

            this.insertTmpPSACustomerRetention();
        }
        tmpPSAProjInvoiceTax
            = PSAProjInvoiceTaxTmp::insertPSAProjInvoiceTmpForTax(
                projInvoiceJourMain,
                PSAProjInvoiceTaxTmp::getTaxSpec(projInvoiceJourMain, formletterProformaPrint));

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            this.insertPSAProjInvoiceHeaderTmp_TH();
        }
        // </GTH>

        // <GCH> Swiss QR Bill (CH)
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCH]) && ProjInvoiceQRBillFlight_CH::instance().isEnabled())
        {
            GiroReportTmp::populateFromGiroReportData(this.parmUserConnection(), this.GiroReport());
        }
        // <GCH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSepaNotification</Name>
				<Source><![CDATA[
    private boolean showSepaNotification()
    {
        if (projInvoiceJourMain.DirectDebitMandate)
        {
            select firstOnly custDirectDebitMandate
                    where custDirectDebitMandate.RecId == projInvoiceJourMain.DirectDebitMandate
                join custDirectDebitMandateBankAccount
                    where custDirectDebitMandateBankAccount.AccountID == custDirectDebitMandate.BankAccount &&
                            custDirectDebitMandateBankAccount.CustAccount == custDirectDebitMandate.CustAccount;

            if (custDirectDebitMandate && custDirectDebitMandateBankAccount)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAProjInvoiceTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to select all records from table <c>PSAProjInvoiceTaxTmp</c>.
    /// </summary>
    /// <returns>
    /// Returns the table object with all the data.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PSAProjInvoiceTaxTmp))
    ]
    public PSAProjInvoiceTaxTmp getPSAProjInvoiceTax()
    {
        return tmpPSAProjInvoiceTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPSAProjInvoiceHeaderTmp_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserting data in to the table <c>PSAProjInvoiceHeaderTmp</c> from TH tax report information.
    /// </summary>
    private void insertPSAProjInvoiceHeaderTmp_TH()
    {
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            LogisticsPostalAddress  logisticsPostalAddress = LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress);
            DirPartyLocation        dirPartyLocation       = DirPartyLocation::findByPartyLocation(
                CustTable::find(projInvoiceJour.InvoiceAccount).Party,
                logisticsPostalAddress.Location);

            TaxInformation_TH taxInformation_TH = TaxInformation_TH::find(dirPartyLocation.Location);

            tmpPSAProjInvoiceHeader.InvoiceBranch_TH                = taxInformation_TH.BranchNumber;
            tmpPSAProjInvoiceHeader.InvoiceTaxRegNumber_TH          = TaxRegistration::getTaxRegistrationFromInvoiceJour_TH(projInvoiceJour).RegistrationNumber;

            TaxTrans                taxTrans;

            select sum(TaxAmount) from taxTrans
                where taxTrans.Voucher    == projInvoiceJourMain.LedgerVoucher
                    && taxTrans.TransDate == projInvoiceJourMain.InvoiceDate;

            if (taxTrans)
            {
                tmpPSAProjInvoiceHeader.SalesTax = abs(taxTrans.TaxAmount);
            }

            tmpPSAProjInvoiceHeader.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the formletter packed class.
    /// </summary>
    /// <param name="_formLetterRecId">
    /// The recid of tempstroe where formletter is stored.
    /// </param>
    private void unpackFormLetter(RecId _formLetterRecId)
    {
        SRSTmpDataStore srsTmpDataStore;
        container       formLetterPackedValue;

        if (_formLetterRecId)
        {
            ttsbegin;
            select forupdate firstonly Value from srsTmpDataStore
                where srsTmpDataStore.RecId == _formLetterRecId;

            if (srsTmpDataStore.RecId)
            {
                // get and delete first.
                formLetterPackedValue = srsTmpDataStore.Value;
                srsTmpDataStore.delete();

                // then create form letter
                if (projInvoiceJour.isProforma())
                {
                    formletterProformaPrint = FormletterProformaPrint::newUnpack(formLetterPackedValue);
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    private TmpTaxWorkTrans tmpTaxWorkTrans()
    {
        if (projInvoiceJour.isProforma() && formletterProformaPrint)
        {
            return formletterProformaPrint.tmpTaxWorkTrans(projInvoiceJour.RecId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalRetentionAmount</Name>
				<Source><![CDATA[
    private Amount totalRetentionAmount()
    {
        PSACustRetentionReleaseInvoiceTmp tmpInvoice;

        select sum(RetainedAmtReq) from tmpInvoice;

        return tmpInvoice.RetainedAmtReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GiroReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a GiroReport object with the data from this datasource
    /// </summary>
    /// <returns>GiroReport object for Swiss QR Bill Code</returns>
    public GiroReportTmp GiroReport()
    {
        GiroReportTmp giro;

        PaymMoneyTransferSlip_CH moneyTransferSlip = new PaymMoneyTransferSlip_CH();
        moneyTransferSlip.initOCRLineProjInvoice_CH(projInvoiceJour);
      
        giro.BillInformation = CustQRBillQRCodeCreator_CH::getBillInformation(projInvoiceJour, this.tmpTaxWorkTrans());

        giro.CompanyGiro = companyInfo.Giro;
        giro.GiroType = projInvoiceJour.GiroType;
        giro.Description_CH = "@SYS12128"; // Same used in FreeTextInvoiceDP
        giro.fiCreditorID_DK = companyInfo.fiCreditorID_DK;

        giro.CompanyName = companyInfo.Name;
        giro.AccountNum = tmpPSACustRetentionReleaseInvoice.AccountNum;
        giro.CompanyAddress = companyInfo.postalAddress().Address;
        giro.CompanyPhone = companyInfo.phone();
        
        LogisticsPostalAddress invoiceAddress = LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress);

        giro.CustAddress_CH = invoiceAddress.Address;
        giro.CustName_CH = projInvoiceJour.DeliveryName;
        
        giro.InvoiceName = projInvoiceJour.DeliveryName;
        giro.InvoiceAmount = this.totalRetentionAmount();
        giro.AmountCheckId = moneyTransferSlip.amountCheckId(projInvoiceJour.remainAmountToBePaid());
        giro.InvoiceAccount = projInvoiceJour.InvoiceAccount;
        giro.DueDate = projInvoiceJour.DueDate;
        
        giro.InvoiceAddressLine1 = strRemoveCr(invoiceAddress.Street);
        giro.InvoiceAddressLine2 = strFmt('%1 %2', invoiceAddress.ZipCode, invoiceAddress.City);
        giro.InvoiceCountryRegionId = invoiceAddress.CountryRegionId;
        giro.LanguageId = projInvoiceJour.LanguageId;

        // Bank & Account Information
        str qrIBAN = moneyTransferSlip.bankAccountTable().QRIBAN_CH;
        giro.IBAN = qrIBAN ? qrIBAN : moneyTransferSlip.bankAccountTable().IBAN;

        giro.PaymentRef1_CH = moneyTransferSlip.ocr_paymentRef1();
        giro.PaymentRef2_CH = moneyTransferSlip.ocr_paymentRef2();

        giro.AccountNo1_CH = moneyTransferSlip.ocr_AccountNo1();
        giro.PaymentId2_PaymentId3_CH = strFmt('%1 %2', moneyTransferSlip.ocr_PaymentId2(), moneyTransferSlip.ocr_PaymentId3());
        
        giro.LayoutCode_CH = moneyTransferSlip.layoutCode();
        giro.AccountNo2_CH = moneyTransferSlip.ocr_AccountNo2();
        giro.OcrLine_CH = moneyTransferSlip.ocrLine();
        giro.OcrField = projInvoiceJour.PaymId;

        giro.CurrencyCodeISO_CH = Currency::currencyCodeISO(projInvoiceJour.CurrencyId);

        return giro;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>