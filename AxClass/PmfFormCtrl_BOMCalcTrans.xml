<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMCalcTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Process form control class for BOMCalcDialog.
/// </summary>
class PmfFormCtrl_BOMCalcTrans
    extends PmfFormCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.parmFormRun().name() != formStr(BOMCalcTrans))
        {
            throw error("@PRO2119");
        }

        if (this.isFormulaEnabled())
        {
            this.parmFormRun().design().titleDatasource('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTable</c> record used in the form.
    /// </summary>
    /// <returns>
    /// An <c>InventTable</c> record.
    /// </returns>
    public InventTable inventTable()
    {
        Common              common = this.callerBuffer();
        BOMCalcTable        callerBOMCalcTable;
        InventItemPrice     callerInventItemPrice;
        InventItemPriceSim  callerInventItemPriceSim;
        InventTable         inventTable;

        switch (common.TableId)
        {
            case tableNum(BOMCalcTable) :
                callerBOMCalcTable = common;
                inventTable = InventTable::find(callerBOMCalcTable.ItemId);
                break;
            case tableNum(InventItemPrice) :
                callerInventItemPrice = common;
                inventTable = InventTable::find(callerInventItemPrice.ItemId);
                break;
            case tableNum(InventItemPriceSim) :
                callerInventItemPriceSim = common;
                inventTable = InventTable::find(callerInventItemPriceSim.ItemId);
                break;
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the form is operating with a formula.
    /// </summary>
    /// <returns>
    /// true if the form is operating with a formula; otherwise, false.
    /// </returns>
    public boolean isFormulaEnabled()
    {
        InventTable         inventTable = this.inventTable();

        return inventTable.isFormulaAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tableNum(BOMCalcTrans)
            && _datasources1.TableId != tableNum(BOMCalcTransDetailUnionAll))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMCalcTrans construct()
    {
        return new PmfFormCtrl_BOMCalcTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of this form control using a given form reference.
    /// </summary>
    /// <param name="_fr">FormRun object reference of the form.</param>
    /// <returns>New instance of the form control for the calc trans form.</returns>
    public static PmfFormCtrl_BOMCalcTrans newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_BOMCalcTrans::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>