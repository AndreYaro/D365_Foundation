<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustRecurrenceInvoiceWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustRecurrenceInvoiceWorkflow</c> class is used to start a recurrence invoice workflow by
///    calling the <c>activateFromWorkflowTemplate</c> method of the <c>Workflow</c> class.
/// </summary>
public class CustRecurrenceInvoiceWorkflow
{
    CustRecurrenceInvoiceGroup custRecurrenceInvoiceGroup;
    WorkflowVersionTable workflowVersionTable;
    WorkflowComment workflowComment;
    boolean submit;
    WorkflowWorkItemTable workflowWorkItemTable;
    userId userId;
    menuItemName menuItemName;
    workflowTypeName workflowTemplateName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a dialog box for submitting a recurrence invoice.
    /// </summary>
    /// <returns>
    /// True if the dialog box was closed by pressing the Ok button; otherwise, false.
    /// </returns>
    public boolean dialogOk()
    {
        WorkflowSubmitDialog workflowSubmitDialog;
        WorkflowWorkItemActionDialog workflowWorkItemActionDialog;
        boolean ok;

        if (menuItemName == menuitemactionstr(CustRecurrenceInvoiceSubmitToWorkflow))
        {
            workflowSubmitDialog = WorkflowSubmitDialog::construct(this.parmWorkflowVersionTable());
            workflowSubmitDialog.run();
            this.parmWorkflowComment(workflowSubmitDialog.parmWorkflowComment());
            ok = workflowSubmitDialog.parmIsClosedOK();
        }
        else if (menuItemName == menuitemactionstr(CustRecurrenceInvoiceReSubmit))
        {
            workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct( workflowWorkItemTable,
                                                                                    WorkflowWorkItemActionType::Resubmit,
                                                                                    new MenuFunction(menuitemactionstr(CustRecurrenceInvoiceReSubmit), MenuItemType::Action));
            workflowWorkItemActionDialog.run();
            this.parmWorkflowComment(workflowWorkItemActionDialog.parmWorkflowComment());
            ok = workflowWorkItemActionDialog.parmIsClosedOK();
            userId = workflowWorkItemActionDialog.parmTargetUser();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(Common _documentRecord,
                        menuItemName _menuItemName,
                        WorkflowVersionTable _workflowVersionTable,
                        WorkflowWorkItemTable _workflowWorkItemTable)

    {
        this.parmCustRecurrenceInvoiceGroup(_documentRecord);
        this.parmSubmit(_menuItemName == menuitemactionstr(CustRecurrenceInvoiceSubmitToWorkflow));
        this.parmMenuItemName(_menuItemName);
        this.parmWorkflowVersionTable(_workflowVersionTable);
        this.parmWorkflowWorkItemtable(_workflowWorkItemTable);
        this.parmWorkflowTemplateName(this.parmWorkflowVersionTable().workflowTable().TemplateName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustRecurrenceInvoiceGroup</Name>
				<Source><![CDATA[
    public CustRecurrenceInvoiceGroup parmCustRecurrenceInvoiceGroup(CustRecurrenceInvoiceGroup _custRecurrenceInvoiceGroup = custRecurrenceInvoiceGroup)
    {
        custRecurrenceInvoiceGroup = _custRecurrenceInvoiceGroup;

        return custRecurrenceInvoiceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    public menuItemName parmMenuItemName(menuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;

        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubmit</Name>
				<Source><![CDATA[
    public boolean parmSubmit(boolean _submit = submit)
    {
        submit = _submit;

        return submit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;

        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowTemplateName</Name>
				<Source><![CDATA[
    public workflowTypeName parmWorkflowTemplateName(workflowTypeName _workflowTemplateName = workflowTemplateName)
    {
        workflowTemplateName = _workflowTemplateName;

        return workflowTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowVersionTable</Name>
				<Source><![CDATA[
    public WorkflowVersionTable parmWorkflowVersionTable(WorkflowVersionTable _workflowVersionTable = workflowVersionTable)
    {
        workflowVersionTable = _workflowVersionTable;

        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemtable</Name>
				<Source><![CDATA[
    public WorkflowWorkItemTable parmWorkflowWorkItemtable(WorkflowWorkItemTable _workflowWorkItemTable = workflowWorkItemTable)
    {
        workflowWorkItemTable = _workflowWorkItemTable;

        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resubmits the recurrence invoice workflow.
    /// </summary>
    /// <remarks>
    /// This method restarts the workflow configuration by calling the <c>dispatchWorkItemAction</c> method
    /// on the <c>Workflow</c> class with information about the recurrence invoice record.
    /// </remarks>
    public void reSubmit()
    {
        FormDataSource custRecurrenceInvoiceGroup_ds;

        custRecurrenceInvoiceGroup.reread();

        if (custRecurrenceInvoiceGroup.WorkflowApprovalState == CustFreeInvoiceWFApprovalState::Returned)
        {
            WorkflowWorkItemActionManager::dispatchWorkItemAction(
                workflowWorkItemTable,
                workflowComment,
                userId,
                WorkflowWorkItemActionType::Resubmit,
                menuItemName);

            custRecurrenceInvoiceGroup_ds = FormDataUtil::getFormDataSource(custRecurrenceInvoiceGroup);
            custRecurrenceInvoiceGroup.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Submitted;
            custRecurrenceInvoiceGroup.WorkflowApprovalState = CustFreeInvoiceWFApprovalState::Submitted;
            if (custRecurrenceInvoiceGroup_ds)
            {
                custRecurrenceInvoiceGroup_ds.write();
                custRecurrenceInvoiceGroup_ds.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the recurrence invoice workflow.
    /// </summary>
    /// <remarks>
    /// This method starts the workflow configuration by calling the <c>activateFromWorkflowTemplate</c>
    /// method on the <c>Workflow</c> class with information about the recurrence invoice record.
    /// </remarks>
    public void submit()
    {
        FormDataSource custRecurrenceInvoiceGroup_ds;

        custRecurrenceInvoiceGroup.reread();

        if (custRecurrenceInvoiceGroup.WorkflowApprovalState == CustFreeInvoiceWFApprovalState::NotSubmitted)
        {
            Workflow::activateFromWorkflowType(
                this.parmWorkflowTemplateName(),
                custRecurrenceInvoiceGroup.RecId,
                this.parmWorkflowComment(),
                NoYes::No);

            custRecurrenceInvoiceGroup_ds = FormDataUtil::getFormDataSource(custRecurrenceInvoiceGroup);
            custRecurrenceInvoiceGroup.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Submitted;
            custRecurrenceInvoiceGroup.WorkflowApprovalState = CustFreeInvoiceWFApprovalState::Submitted;

            if (custRecurrenceInvoiceGroup_ds)
            {
                custRecurrenceInvoiceGroup_ds.write();
                custRecurrenceInvoiceGroup_ds.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustRecurrenceInvoiceWorkflow construct()
    {
        return new CustRecurrenceInvoiceWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits a recurrence invoice document and starts corresponding workflow.
    /// </summary>
    /// <param name="args">
    /// An <c>Args</c> value from the caller.
    /// </param>
    public static void main(Args args)
    {
        CustRecurrenceInvoiceWorkflow custRecurrenceInvoiceWorkflow;
        CustRecurrenceInvoiceGroup custRecurrenceInvoiceGroup;

        custRecurrenceInvoiceGroup = args.record();
        custRecurrenceInvoiceWorkflow = CustRecurrenceInvoiceWorkflow::construct();
        if (args.menuItemName() == menuitemactionstr(CustRecurrenceInvoiceSubmitToWorkflow) ||
            args.menuItemName() == menuitemactionstr(CustRecurrenceInvoiceReSubmit))
        {
            custRecurrenceInvoiceWorkflow.init(args.record(), args.menuItemName(), args.caller().getActiveWorkflowConfiguration(), args.caller().getActiveWorkflowWorkItem());
        }
        else
        {
            custRecurrenceInvoiceWorkflow.init(args.record(), args.menuItemName(), null, null);
        }

        if (custRecurrenceInvoiceWorkflow.dialogOk())
        {
            if (custRecurrenceInvoiceWorkflow.parmSubmit())
            {
                custRecurrenceInvoiceWorkflow.submit();
            }

            else
            {
                custRecurrenceInvoiceWorkflow.reSubmit();
            }

            if (args.menuItemName() == menuitemactionstr(CustRecurrenceInvoiceSubmitToWorkflow) ||
                    args.menuItemName() == menuitemactionstr(CustRecurrenceInvoiceReSubmit))
            {
                args.caller().updateWorkflowControls();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>