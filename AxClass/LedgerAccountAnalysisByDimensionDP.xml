<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAccountAnalysisByDimensionDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerAccountAnalysisByDimensionDP</c> class is the report data provider class for the
/// <c>LedgerAccountAnalysisByDimension</c> table overview report.
/// </summary>
/// <remarks>
/// This is the RDP class for the <c>LedgerAccountAnalysisByDimension</c> table SRS Report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(LedgerAccountAnalysisByDimensionContract))
]
class LedgerAccountAnalysisByDimensionDP extends SRSReportDataProviderBase
{
    //TMP Table and Contract class
    LedgerAccountAnalysisByDimensionTmp         ledgerAccountAnalysisByDimensionTmp;
    LedgerAccountAnalysisByDimensionContract    contract;

    DimensionAttribute      dimensionAttributeTable;

    //Report parameters
    Name                    dimensionAttribute;
    MainAccountNum          account;
    DimensionValue          fromDimensionValue;
    DimensionValue          toDimensionValue;
    TransDate               fromDate;
    TransDate               toDate;
    CurrentOperationsTax    postingLayer;

    #define.DimValueOrder1(1)
    #define.DimValueOrder2(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the related query to retrieve data.
    /// </summary>
    /// <param name="_isBeginning">
    /// A Boolean value that indicates whether the data is a beginning balance.
    /// </param>
    private void executeQuery(boolean   _isBeginning)
    {
        DimensionAttributeLevelValueView    dimensionAttributeLevelValueView;
        DimensionAttributeLevelValueView    dimensionAttributeLevelValueViewLoc;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        boolean                             isOtherDimensionValue;

        Query       query;
        QueryRun    queryRun;

        query = new Query(queryStr(LedgerAccountAnalysisByDimension));
        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(DimensionAttributeLevelValueView)), fieldNum(DimensionAttributeLevelValueView, DisplayValue)).value(account);
        if (_isBeginning)
        {
            //Beginning Balance
            SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(GeneralJournalEntry)), fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(dateNull(), fromDate - 1));
        }
        else
        {
            //Period Balance
            SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(GeneralJournalEntry)), fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(fromDate, toDate));
        }

        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(GeneralJournalEntry)), fieldNum(GeneralJournalEntry, PostingLayer)).value(queryValue(postingLayer));
        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(GeneralJournalEntry)), fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            isOtherDimensionValue = true;

            dimensionAttributeLevelValueView    = queryRun.get(tableNum(DimensionAttributeLevelValueView));
            generalJournalAccountEntry          = queryRun.get(tableNum(GeneralJournalAccountEntry));

            ledgerAccountAnalysisByDimensionTmp.clear();
            select firstonly dimensionAttributeLevelValueViewLoc
                where   dimensionAttributeLevelValueViewLoc.ValueCombinationRecId   == generalJournalAccountEntry.LedgerDimension
                    &&  dimensionAttributeLevelValueViewLoc.DimensionAttribute      == dimensionAttributeTable.RecId;
            if (dimensionAttributeLevelValueViewLoc.DisplayValue >= fromDimensionValue && dimensionAttributeLevelValueViewLoc.DisplayValue <= toDimensionValue)
            {
                //Dimension Value is not in Dimension Value Range, belong to "Others"
                isOtherDimensionValue = false;
            }

            this.processTmpTable(
                _isBeginning,
                isOtherDimensionValue,
                generalJournalAccountEntry.IsCredit,
                generalJournalAccountEntry.AccountingCurrencyAmount,
                dimensionAttributeLevelValueViewLoc.AttributeValueRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerAccountAnalysisByDimensionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>LedgerAccountAnalysisByDimension</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>LedgerAccountAnalysisByDimension</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(LedgerAccountAnalysisByDimensionTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerAccountAnalysisByDimensionTmp getLedgerAccountAnalysisByDimensionTmp()
    {
        return ledgerAccountAnalysisByDimensionTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEndingBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes ending balance.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void processEndingBalance()
    {
        while select forupdate ledgerAccountAnalysisByDimensionTmp
        {
            ledgerAccountAnalysisByDimensionTmp.EndingBalance       = ledgerAccountAnalysisByDimensionTmp.BeginningBalance + ledgerAccountAnalysisByDimensionTmp.Debit + ledgerAccountAnalysisByDimensionTmp.Credit;
            ledgerAccountAnalysisByDimensionTmp.EndingDirections    =
                ledgerAccountAnalysisByDimensionTmp.EndingBalance > 0 ?
                LedgerBalanceDirectionForSSRS::Debit :
                (ledgerAccountAnalysisByDimensionTmp.EndingBalance < 0 ? LedgerBalanceDirectionForSSRS::Credit : LedgerBalanceDirectionForSSRS::Balance);
            ledgerAccountAnalysisByDimensionTmp.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the parameters before the report is ran.
    /// </summary>
    private void processParameters()
    {
        //Get parameters form contract
        dimensionAttribute  = contract.parmDimensionAttribute();
        account             = contract.parmAccount();
        fromDimensionValue  = contract.parmFromDimensionValue();
        toDimensionValue    = contract.parmToDimensionValue();
        fromDate            = contract.parmFromDate();
        toDate              = contract.parmToDate();
        postingLayer        = contract.parmPostingLayer();

        dimensionAttributeTable = DimensionAttribute::findByLocalizedName(dimensionAttribute, false, SystemParameters::systemLanguageId());

        if (!fromDimensionValue)
        {
            //set "From Dimension" value to first value when "From Dimension" is empty
            fromDimensionValue = this.setDimensionValue(SelectionField::Min);
        }
        if (!toDimensionValue)
        {
            //set "To Dimension" value to last value when "To Dimension" is empty
            toDimensionValue = this.setDimensionValue(SelectionField::Max);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        //Initializes contract class
        contract = this.parmDataContract();

        //Process parameters
        this.processParameters();

        //Gets beginning balance
        this.executeQuery(true);
        //Gets period balance
        this.executeQuery(false);

        //Process ending balance.
        this.processEndingBalance();

        //Insert an empty record if there are no match records
        select firstonly RecId from ledgerAccountAnalysisByDimensionTmp;
        if (ledgerAccountAnalysisByDimensionTmp.RecId == 0)
        {
            ledgerAccountAnalysisByDimensionTmp.clear();
            ledgerAccountAnalysisByDimensionTmp.FromDimensionValue  = fromDimensionValue;
            ledgerAccountAnalysisByDimensionTmp.ToDimensionValue    = toDimensionValue;
            ledgerAccountAnalysisByDimensionTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the unit costs and percentage.
    /// </summary>
    /// <param name="_isBeginning">
    /// A Boolean value that indicates whether the data is a beginning balance.
    /// </param>
    /// <param name="_isOther">
    /// A Boolean value that indicates whether the data is an other dimension.
    /// </param>
    /// <param name="_isCredit">
    /// A Boolean value that indicates whether the data is credit.
    /// </param>
    /// <param name="_accountingAmount">
    /// An accounting amount.
    /// </param>
    /// <param name="_attributeValueRecId">
    /// A dimension attribute value record ID.
    /// </param>
    private void processTmpTable(
        boolean     _isBeginning,
        boolean     _isOther,
        boolean     _isCredit,
        AmountMST   _accountingAmount,
        RecId       _attributeValueRecId)
    {
        DimensionAttributeValue     dimensionAttributeValue;

        DimensionValue  dimensionValue;
        DimensionValue  dimensionValueOthers;
        Description     dimensionName;

        dimensionAttributeValue = DimensionAttributeValue::find(_attributeValueRecId);
        dimensionValue          = dimensionAttributeValue.getValue();
        dimensionName           = dimensionAttributeValue.getName();
        //Others
        dimensionValueOthers    = "@SYS118908";

        if (_isOther)
        {
            //Other dimension values
            select forupdate firstonly ledgerAccountAnalysisByDimensionTmp
                where ledgerAccountAnalysisByDimensionTmp.DimensionValue == dimensionValueOthers;
            if (!ledgerAccountAnalysisByDimensionTmp.RecId)
            {
                ledgerAccountAnalysisByDimensionTmp.DimensionValue      = dimensionValueOthers;
                ledgerAccountAnalysisByDimensionTmp.DimValueOrder       = #DimValueOrder2;
            }
        }
        else
        {
            //Dimension values in Range
            select forupdate firstonly ledgerAccountAnalysisByDimensionTmp
                where ledgerAccountAnalysisByDimensionTmp.DimensionValue == dimensionValue;
            if (!ledgerAccountAnalysisByDimensionTmp.RecId)
            {
                ledgerAccountAnalysisByDimensionTmp.DimensionValue      = dimensionValue;
                ledgerAccountAnalysisByDimensionTmp.DimensionName       = dimensionName;
                ledgerAccountAnalysisByDimensionTmp.DimValueOrder       = #DimValueOrder1;
            }
        }

        if (_isBeginning)
        {
            //Processing Beginning Balance to Tmp Table
            ledgerAccountAnalysisByDimensionTmp.BeginningBalance        += _accountingAmount;
            ledgerAccountAnalysisByDimensionTmp.BeginningDirections     =
                ledgerAccountAnalysisByDimensionTmp.BeginningBalance > 0 ?
                LedgerBalanceDirectionForSSRS::Debit :
                (ledgerAccountAnalysisByDimensionTmp.BeginningBalance < 0 ? LedgerBalanceDirectionForSSRS::Credit : LedgerBalanceDirectionForSSRS::Balance);
        }
        else
        {
            //Processing Period Balance
            if (_isCredit)
            {
                ledgerAccountAnalysisByDimensionTmp.Credit += _accountingAmount;
            }
            else
            {
                ledgerAccountAnalysisByDimensionTmp.Debit += _accountingAmount;
            }

            ledgerAccountAnalysisByDimensionTmp.EndingBalance       = ledgerAccountAnalysisByDimensionTmp.BeginningBalance + ledgerAccountAnalysisByDimensionTmp.Debit + ledgerAccountAnalysisByDimensionTmp.Credit;
            ledgerAccountAnalysisByDimensionTmp.EndingDirections    =
                ledgerAccountAnalysisByDimensionTmp.EndingBalance > 0 ?
                LedgerBalanceDirectionForSSRS::Debit :
                (ledgerAccountAnalysisByDimensionTmp.EndingBalance < 0 ? LedgerBalanceDirectionForSSRS::Credit : LedgerBalanceDirectionForSSRS::Balance);
        }

        ledgerAccountAnalysisByDimensionTmp.FromDimensionValue  = fromDimensionValue;
        ledgerAccountAnalysisByDimensionTmp.ToDimensionValue    = toDimensionValue;
        ledgerAccountAnalysisByDimensionTmp.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the from dimension or the to dimension values if they are empty.
    /// </summary>
    /// <param name="_minOrMax">
    /// A Boolean value that indicates whether to judge the from dimension or the to dimension value.
    /// </param>
    /// <returns>
    /// The dimension value.
    /// </returns>
    private DimensionValue setDimensionValue(SelectionField   _minOrMax)
    {
        Query       query;
        QueryRun    queryRun;
        Common      common;

        DimensionValue          dimensionValue;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        query = new Query();
        query.addDataSource(dimensionAttributeTable.BackingEntityType).addSelectionField(dimensionAttributeTable.ValueAttribute, _minOrMax);

        if (dimensionAttributeTable.Type == DimensionAttributeType::CustomList
            && dimensionAttributeTable.BackingEntityType == tableNum(DimensionFinancialTag))
        {
            qbds = query.dataSourceTable(dimensionAttributeTable.BackingEntityType).addDataSource(tableNum(DimensionAttributeDirCategory));
            qbds.addLink(fieldNum(DimensionFinancialTag, FinancialTagCategory), fieldNum(DimensionAttributeDirCategory, DirCategory));

            qbds = qbds.addDataSource(tableNum(DimensionAttribute));
            qbds.relations(true);

            qbr = SysQuery::findOrCreateRange(qbds, fieldNum(DimensionAttribute, Name));
            qbr.value(dimensionAttribute);
        }

        queryRun = new QueryRun(query);
        if (queryRun.next())
        {
            common          = queryRun.get(dimensionAttributeTable.BackingEntityType);
            dimensionValue  = common.(dimensionAttributeTable.ValueAttribute);
        }

        return dimensionValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>