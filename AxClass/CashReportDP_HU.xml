<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashReportDP_HU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CashReportDP_HU</c> class provides data for the <c>CashReport_HU</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CashReport))
]
class CashReportDP_HU extends CashReportDP
{
    private const str FeatureReference = 'HU-00016';
    
    HuDenominationSummary denominationSummary;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpTransactions</Name>
				<Source><![CDATA[
    protected void createTmpTransactions(QueryRun _queryRun)
    {
        #define.FirstRecord(1)
        super(_queryRun);

        if (cashReportHeader.Denomination_HU && recordNum == #FirstRecord)
        {
            denominationSummary = _queryRun.get(tableNum(HuDenominationSummary));
            if (denominationSummary)
            {
                this.insertFromHuDenominationSummary();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Overrides the base method to calculate the opening amount using Hungary specific <c>ClosingBalance_HU</c> field.
    /// </summary>
    /// <returns>
    ///     The opening amount.
    /// </returns>
    protected AmountCur getOpeningAmount()
    {
        RCashReportJour_PL   reportJour;
        RCashBalanceCur      cashBalance;
        RCashTrans           cashTransLocal;

        select firstonly RecId, ReportNum, ClosingBalance_HU, TransDate, AccountNum, CurrencyCode from reportJour
            order by TransDate desc, ReportNum desc
            where reportJour.AccountNum    == cashReportJour.AccountNum
               && reportJour.CurrencyCode  == cashReportJour.CurrencyCode
               && (reportJour.TransDate     <  cashReportJour.TransDate
                    || (reportJour.TransDate    == cashReportJour.TransDate
                        && reportJour.ReportNum  < cashReportJour.ReportNum));

        if (reportJour.RecId && ! reportJour.ClosingBalance_HU)
        {
            cashBalance = new RCashBalanceCur(reportJour.TransDate);
            cashBalance.calc(reportJour.AccountNum, reportJour.CurrencyCode);

            select sum(AmountCur) from cashTransLocal
                where cashTransLocal.TransDate    == reportJour.TransDate
                   && cashTransLocal.AccountNum   == reportJour.AccountNum
                   && cashTransLocal.CurrencyCode == reportJour.CurrencyCode
                   && cashTransLocal.ReportNum_PL != reportJour.ReportNum;

            reportJour.ClosingBalance_HU = cashBalance.amountCur() - cashTransLocal.AmountCur;
        }

        return reportJour.ClosingBalance_HU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreparedBy</Name>
				<Source><![CDATA[
    protected UserName getPreparedBy()
    {
        return HcmWorker::find(HcmWorkerLookup::currentWorker()).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Overrides the base method to make Hungary specific changes to cash report query.
    /// </summary>
    /// <returns>
    ///     The query to retrieve data for cash report.
    /// </returns>
    protected Query getQuery()
    {
        RCashAccount cashAccountNum;
        Query        ret = super();

        cashAccountNum = ret.dataSourceTable(tableNum(RCashReportJour_PL)).findRange(fieldNum(RCashReportJour_PL, AccountNum)).value();

        if (RCashTable::find(cashAccountNum).Denomination_HU)
        {
            ret.dataSourceTable(tableNum(HuDenominationSummary)).enabled(true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashReportHeaderTmp</Name>
				<Source><![CDATA[
    protected CashReportHeaderTmp initializeCashReportHeaderTmp()
    {
        CashReportHeaderTmp cashReportHeaderTmpLocal = super();

        cashReportHeaderTmpLocal.ClosingBalance_HU  = cashReportJour.ClosingBalance_HU;
        cashReportHeaderTmpLocal.Denomination_HU    = RCashTable::find(cashReportJour.AccountNum).Denomination_HU;
        return cashReportHeaderTmpLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashReportLinesTmp</Name>
				<Source><![CDATA[
    protected CashReportLinesTmp initializeCashReportLinesTmp()
    {
        CashReportLinesTmp cashReportLinesTmpLocal = super();
        cashReportLinesTmpLocal.JournalNum         = LedgerJournalTrans::findJournalForVoucher(cashTrans.Voucher, cashTrans.TransDate).JournalNum;

        return cashReportLinesTmpLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromHuDenominationSummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts records in the <c>CashReportLinesTmp</c> temporary table from <c>HuDenominationSummary</c> table.
    /// </summary>
    protected void insertFromHuDenominationSummary()
    {
        cashReportLines.clear();
        cashReportLines.DenominationName  = HuDenominations::findRecId(denominationSummary.HuDenominations).Name;
        cashReportLines.DenominationNotes = denominationSummary.Notes;
        cashReportLines.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>