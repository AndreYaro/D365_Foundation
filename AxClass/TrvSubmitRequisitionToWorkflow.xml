<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvSubmitRequisitionToWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class to handle the submission of travel requisition records to workflow.
/// </summary>
class TrvSubmitRequisitionToWorkflow extends TrvSubmitToWorkflow
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateApprovalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current status of the travel requisition against the workflow submitted record.
    /// </summary>
    /// <returns>
    /// False if the status is different from the workflow submitted record. Otherwise, true.
    /// </returns>
    protected boolean validateApprovalStatus()
    {
        TrvRequisitionTable     trvRequisitionTableLocal;
        TrvRequisitionTable     trvRequisitionTableInstance = this.parmEntity();

        trvRequisitionTableLocal.disableCache(true);
        select firstonly ApprovalStatus from trvRequisitionTableLocal where trvRequisitionTableLocal.RecId == trvRequisitionTableInstance.RecId;

        // Check whether travel requisition is already submitted.
        return trvRequisitionTableLocal.ApprovalStatus == trvRequisitionTableInstance.ApprovalStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubmitterUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets workflow submitter user id of the entity in the system with the workflow submitted record.
    /// </summary>
    /// <returns>
    /// The submitter user id of the workflow
    /// </returns>
    protected WorkflowUser getSubmitterUserId()
    {
        TrvRequisitionTable     trvRequisitionTableInstance = this.parmEntity();
        WorkflowUser            submittingUserId;

        submittingUserId = DirPersonUserEx::worker2UserId(trvRequisitionTableInstance.CreatingWorker);

        return submittingUserId ? submittingUserId : curuserid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of <c>TrvSubmitRequisitionToWorkflow</c>.
    /// </summary>
    /// <param name = "_entity">Travel requisition record that will be submitted.</param>
    /// <param name = "_workflowVersionTable">An instance of <c>WorkflowVersionTable</c>.</param>
    /// <param name = "_workflowComment">Workflow comments.</param>
    /// <returns>Created instance of <c>TrvSubmitRequisitionToWorkflow</c></returns>
    public static TrvSubmitRequisitionToWorkflow construct(Common _entity, WorkflowVersionTable _workflowVersionTable = null, WorkflowComment _workflowComment = '')
    {
        TrvSubmitRequisitionToWorkflow submitToWorkflow = new TrvSubmitRequisitionToWorkflow();
        submitToWorkflow.initialize(_entity, _workflowVersionTable, _workflowComment);
        return submitToWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submit the travel requisition.
    /// </summary>
    /// <returns>True if successful, otherwise false.</returns>
    protected boolean submit()
    {
        WorkflowContext workflowContext = WorkflowContext::construct();
       
        this.submitToWorkflow();

        // Set travel requisition to pending status on submit.
        workflowContext.parmRecId(this.parmEntity().RecId);
        workflowContext.parmTableId(this.parmEntity().TableId);
        TrvRequisitionStateChangeManager::updateRequisitionStatus(workflowContext.parmRecId(), TrvRequisitionApprovalStatus::Submitted);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submit validation logic for travel requisition.
    /// </summary>
    /// <returns>True, always.</returns>
    protected boolean validateSubmit()
    {
        // Including validateSubmit in the transaction scope will cause undesired behavior with budget checks.
        // The budget source records won't be updated until after the commit, so any budget error will be missed during validation.
        // Therefore, we don't include this line within the ttsbegin-ttscommit block.
        return this.parmEntity().validateSubmit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAsyncValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do the submit validation asynchronously.
    /// </summary>
    /// <returns>The async task object.</returns>
    protected System.Threading.Tasks.Task doAsyncValidation(System.Threading.CancellationTokenSource _tokenSource)
    {
        System.Threading.Tasks.Task task = runAsync(classnum(TrvSubmitRequisitionToWorkflow),
                                            "handleValidationAsync",
                                            [this.parmEntity()],
                                            _tokenSource.Token);
        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleValidationAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle submit validations. This is a wrapper method suitable for being called asynchronously.
    /// </summary>
    /// <param name = "params">A <c>TrvRequisitionTable</c> record in a container.</param>
    /// <param name = "cancellationToken">A cancellation token to request cancellation of async method's execution.</param>
    /// <returns>A container with a single value: True.</returns>
    public static container handleValidationAsync(container _params, System.Threading.CancellationToken _cancellationToken)
    {
        if (conLen(_params) != 1)
        {
            error(strFmt("@SYS22828", funcName()));
        }

        TrvRequisitionTable trvRequisitionTable;
        [trvRequisitionTable] = [_params];

        boolean valid = trvRequisitionTable.validateSubmit();

        if (_cancellationToken.IsCancellationRequested)
        {
            _cancellationToken.ThrowIfCancellationRequested();
        }

        return [valid];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>