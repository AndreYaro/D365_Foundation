<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventReceiptForTestRegistrator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTestReceiptRegistrator</c> class registers inventory quantities by using the inventory
/// dimensions during inventory receiving.
/// </summary>
class InventReceiptForTestRegistrator
{
    InventQty                       totalReceiptQuantity;
    PdsCWInventQty                  totalReceiptCWQuantity;
    Map                             updatedQuantitiesPerDimMap;

    private boolean createQualityItemSamplingWork = true;
    private boolean mustBeQuarantineControlled = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        updatedQuantitiesPerDimMap = new Map(Types::String, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalReceiptCWQuantity</Name>
				<Source><![CDATA[
        public PdsCWInventQty parmTotalReceiptCWQuantity(PdsCWInventQty _totalReceiptCWQuantity = totalReceiptCWQuantity)
    {
        totalReceiptCWQuantity = _totalReceiptCWQuantity;

        return totalReceiptCWQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalReceiptQuantity</Name>
				<Source><![CDATA[
        public InventQty parmTotalReceiptQuantity(InventQty _totalReceiptQuantity = totalReceiptQuantity)
    {
        totalReceiptQuantity = _totalReceiptQuantity;

        return totalReceiptQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdatedQuantitiesPerDimMap</Name>
				<Source><![CDATA[
        public Map parmUpdatedQuantitiesPerDimMap()
    {
        return updatedQuantitiesPerDimMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>register</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers a receipt quantity with the current instance of the <c>InventTestReceiptRegistrator</c>
    /// class.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> record.
    /// </param>
    public void register(InventTrans _inventTrans)
    {
        InventQty       qty;
        PdsCWInventQty  cwQty;

        InventDimId inventDimId = _inventTrans.inventDimId;
        if (updatedQuantitiesPerDimMap.exists(inventDimId))
        {
            [qty, cwQty] = updatedQuantitiesPerDimMap.lookup(inventDimId);
        }
        updatedQuantitiesPerDimMap.insert(inventDimId, [qty+_inventTrans.Qty, cwQty+_inventTrans.PdsCWQty]);

        totalReceiptQuantity += _inventTrans.Qty;
        totalReceiptCWQuantity += _inventTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventReceiptForTestRegistrator construct()
    {
        return new InventReceiptForTestRegistrator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>merge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merge with the given <c> InventReceiptForTestRegistrator</c> object.
    /// </summary>
    /// <param name = "_InventReceiptForTestRegistrator"> The <c> InventReceiptForTestRegistrator</c> object. </param>
    public void merge(InventReceiptForTestRegistrator _inventReceiptForTestRegistrator)
    {
        Map updatedQuantitiesPerDimMapLocal;
        
        if (_inventReceiptForTestRegistrator)
        {
            updatedQuantitiesPerDimMapLocal= _inventReceiptForTestRegistrator.parmUpdatedQuantitiesPerDimMap();
        }

        if (updatedQuantitiesPerDimMapLocal)
        {
            MapEnumerator mapEnumerator = updatedQuantitiesPerDimMapLocal.getEnumerator();
            
            while(mapEnumerator.moveNext())
            {
                InventQty       qtyToMerge;
                PdsCWInventQty  cwQtyToMerge;
                InventDimId     inventDimId;

                inventDimId = mapEnumerator.currentKey();
                [qtyToMerge, cwQtyToMerge] = mapEnumerator.currentValue();
                if (updatedQuantitiesPerDimMap.exists(inventDimId))
                {
                    InventQty       qty;
                    PdsCWInventQty  cwQty;
                    [qty, cwQty] = updatedQuantitiesPerDimMap.lookup(inventDimId);
                    updatedQuantitiesPerDimMap.insert(inventDimId, [qty + qtyToMerge, cwQty+ cwQtyToMerge]);
                }
                else
                {
                    updatedQuantitiesPerDimMap.insert(inventDimId, [qtyToMerge, cwQtyToMerge]);
                }
            }

            totalReceiptQuantity += _inventReceiptForTestRegistrator.parmTotalReceiptQuantity();
            totalReceiptCWQuantity += _inventReceiptForTestRegistrator.parmTotalReceiptCWQuantity();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Registers a receipt inventory quantity with the <c>_inventReceiptForTestRegistrator</c> object.
    /// </summary>
    /// <param name="_inventReceiptForTestRegistrator">
    ///    An instance of the <c>InventReceiptForTestRegistrator</c> class.
    /// </param>
    /// <param name="_inventTrans">
    ///    A record in the <c>InventTrans</c> table.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventReceiptForTestRegistrator</c> class.
    /// </returns>
    /// <remarks>
    ///    This method creates a new instance of the <c>InventReceiptForTestRegistrator</c> class if null is
    ///    passed as a parameter.
    /// </remarks>
    public static InventReceiptForTestRegistrator registerReceipt(
        InventReceiptForTestRegistrator _inventReceiptForTestRegistrator,
        InventTrans                     _inventTrans)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return null;
        }

        if (!_inventReceiptForTestRegistrator)
        {
            // Instantiate and initialize a new instance of the InventReceiptForTestRegistrator class
            // if none was passed as a parameter
            _inventReceiptForTestRegistrator = InventReceiptForTestRegistrator::construct();
        }

        _inventReceiptForTestRegistrator.register(_inventTrans);

        return _inventReceiptForTestRegistrator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateQualityItemSamplingWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final boolean parmCreateQualityItemSamplingWork(boolean _createQualityItemSamplingWork = createQualityItemSamplingWork)
    {
        createQualityItemSamplingWork = _createQualityItemSamplingWork;
        return createQualityItemSamplingWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMustBeQuarantineControlled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final NoYes parmMustBeQuarantineControlled(NoYes _mustBeQuarantineControlled = mustBeQuarantineControlled)
    {
        mustBeQuarantineControlled = _mustBeQuarantineControlled;
        return mustBeQuarantineControlled;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>