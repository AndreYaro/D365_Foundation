<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPostBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerPostBatch</c> class forms the foundation for ledger multiposting. The
///    <c>LedgerJournalPostBatch</c> and <c>AssetDepBookJournalPostBatch</c> classes provide examples of
///    how to extend this object.
/// </summary>
/// <remarks>
///    The <c>constructChild</c>, <c>getJournal</c>, <c>getJournalsToPost</c> and <c>validatePost</c>
///    methods must be overridden in derivative classes.
/// </remarks>
abstract class LedgerPostBatch extends RunBaseBatch implements SysPackable
{
    boolean isJournalSplitForbidden; // Flag that indicates journal splits are forbidden. (e.g., a leaf task)
    boolean transferErrors; // Flag that indicates transfer errors (i.e. errorfull transactions are moved to new journal) should be used during posting.
    LedgerJournalId journalId; // The id of the journal to be run through the batch posting process.
    Integer numberOfJournalLines; // The number of lines stored by the journal.

    private const int CurrentVersion = 3;
    private const int Version2 = 2;
    private const int Version1 = 1;

    #LOCALMACRO.CurrentListV2
        isJournalSplitForbidden,
        transferErrors,
        journalId,
        numberOfJournalLines
    #ENDMACRO

    #LOCALMACRO.CurrentListV1
        isJournalSplitForbidden,
        transferErrors,
        journalId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateNumberOfJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the number of journal lines to be posted by the specified journal.
    /// </summary>
    /// <param name="_journalId">
    ///    The ID of the journal to be posted.
    /// </param>
    /// <returns>
    ///    The number of journal lines to be posted.
    /// </returns>
    /// <remarks>
    ///    This is an abstract method. See <c>LedgerJournalPostBatch</c> class for an example of a concrete
    ///    implementation.
    /// </remarks>
    protected abstract int calculateNumberOfJournalLines(str _journalId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    An override that indicates to the batch framework that this can be run in a batch process.
    /// </summary>
    /// <returns>
    ///    true
    /// </returns>
    /// <remarks>
    ///    This method always returns true.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    An override that indicates to the batch framework that this can be run as a batch journal.
    /// </summary>
    /// <returns>
    ///    true
    /// </returns>
    /// <remarks>
    ///    This method always returns true.
    /// </remarks>
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSessionInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the journal's session information.
    /// </summary>
    /// <param name="_journalTable">
    ///    The journal to clear the session information from.
    /// </param>
    /// <remarks>
    ///    Overriding this method is optional. It should only be necessary if you are using
    ///    <c>setSessionInfo</c>.
    /// </remarks>
    protected void clearSessionInfo(Common _journalTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructChild</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the derivative class for posting journals.
    /// </summary>
    /// <param name="_journalRecord">
    ///    The journal record with which to initialize the child.
    /// </param>
    /// <param name="_transferErrors">
    ///    A Boolean value that determines whether the child transfers errors. If true, the child transfers
    ///    errors.
    /// </param>
    /// <param name="_isJournalSplitForbidden">
    ///    A Boolean value that determines whether journal splits are forbidden; optional. The default value
    ///    is false.
    /// </param>
    /// <returns>
    ///    A new instance of a <c>LedgerPostBatch</c> derivative class.
    /// </returns>
    /// <remarks>
    ///    This is called within a transaction when inside a batch process. It is called outside a transaction
    ///    when outside a batch process in the run method. In most cases you should just return a new instance
    ///    of your derivative class. See the <c>LedgerJournalPostBatch </c>class for an example.
    /// </remarks>
    protected abstract LedgerPostBatch constructChild(Common _journalRecord, boolean _transferErrors, boolean _isJournalSplitForbidden = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the journal for the supplied journal ID.
    /// </summary>
    /// <param name="_journalId">
    ///    The ID of the journal to retrieve.
    /// </param>
    /// <returns>
    ///    The selected journal record.
    /// </returns>
    /// <remarks>
    ///    The record does not need to be selected for update unless the derivative class methods (such as
    ///    <c>validatePost</c>) are performing updates. See the <c>LedgerJournalPostBatch</c> class for an
    ///    example
    /// </remarks>
    protected abstract Common getJournal(str _journalId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalsToPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the list of journals to post.
    /// </summary>
    /// <param name="_journalRecord">
    ///    The journal record that may have to be split.
    /// </param>
    /// <returns>
    ///    A <c>RecordSortedList</c> of journals to be posted.
    /// </returns>
    /// <remarks>
    ///    This is called within a transaction in the <c>run</c> method. If no splitting, etc., is needed you
    ///    may just construct an Array object and add the _journalRecord record to the list. See the
    ///    <c>LedgerJournalPostBatch</c> class for an example.
    /// </remarks>
    protected abstract Array getJournalsToPost(Common _journalRecord)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of journal lines to be posted.
    /// </summary>
    /// <returns>
    ///    The number of journal lines to be posted.
    /// </returns>
    /// <remarks>
    ///    This is used to get the number of journal lines for the purpose of bundling via the
    ///    <c>BatchTaskBundleAssembler</c> and <c>LedgerPostBatchTaskBundle</c> classes.
    /// </remarks>
    public Integer getNumberOfJournalLines()
    {
        return numberOfJournalLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs derivative objects. This is an abstract class so it should not be used in the context of
    ///    'new <c>LedgerPostBatch</c>(...)'.
    /// </summary>
    /// <param name="_journalId">
    ///    The ID of the journal to post.
    /// </param>
    /// <param name="_transferErrors">
    ///    A Boolean flag that determines if errors will be transferred to a new journal. If true, errors will
    ///    be transferred.
    /// </param>
    /// <param name="_isJournalSplitForbidden">
    ///    A Boolean value that determines whether journal splits are forbidden; optional. If true, journal
    ///    splits are forbidden.
    /// </param>
    /// <param name="_numberOfJournalLines">
    ///    The number of lines in the journal; optional.
    /// </param>
    /// <remarks>
    ///    You should not override this method in your derivative class.
    /// </remarks>
    protected void new(str _journalId, boolean _transferErrors, boolean _isJournalSplitForbidden = false, int _numberOfJournalLines = -1)
    {
        super();

        journalId                = _journalId;
        transferErrors           = _transferErrors;
        isJournalSplitForbidden  = _isJournalSplitForbidden;

        if (_numberOfJournalLines == -1)
        {
            numberOfJournalLines = this.calculateNumberOfJournalLines(_journalId);
        }
        else
        {
            numberOfJournalLines = _numberOfJournalLines;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a container that holds the packed class.
    /// </summary>
    /// <returns>
    ///    A container that holds the packed class.
    /// </returns>
    public container pack()
    {
        return [CurrentVersion, isJournalSplitForbidden, transferErrors, journalId, numberOfJournalLines, this.parmInBatch(), buf2Con(this.parmCurrentBatch())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks a container's packed class data.
    /// </summary>
    /// <param name="packedClass">
    ///    A container with the packed class' data.
    /// </param>
    /// <returns>
    ///    true if the unpack is successful; otherwise, false.
    /// </returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case CurrentVersion:
                container currentBatchContainer;
                boolean currentIsInBatch;
                [version, isJournalSplitForbidden, transferErrors, journalId, numberOfJournalLines, currentIsInBatch, currentBatchContainer] = packedClass;
                this.parmCurrentBatch(con2Buf(currentBatchContainer));
                this.parmInBatch(currentIsInBatch);
                break;
            case Version2:
                [version, #CurrentListV2] = packedClass;
                break;
            case Version1:
                [version, #CurrentListV1] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsJournalSplitForbidden</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns whether journal splitting is forbidden.
    /// </summary>
    /// <returns>
    ///    true if journal splitting (distribution) is forbidden; otherwise, false.
    /// </returns>
    public boolean parmIsJournalSplitForbidden()
    {
        return isJournalSplitForbidden;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies which journal will be posted.
    /// </summary>
    /// <returns>
    ///    The ID of the journal that is to be run through the batch posting process.
    /// </returns>
    public LedgerJournalId parmJournalId()
    {
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that the class should transfer errors during posting if true.
    /// </summary>
    /// <returns>
    /// true if transfer errors is enabled; otherwise, false.
    /// </returns>
    public boolean parmTransferErrors()
    {
        return transferErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts a journal.
    /// </summary>
    /// <param name="_journalRecord">
    ///    The journal to post.
    /// </param>
    /// <param name="_allowJournalSplit">
    ///    A Boolean flag that determines whether the journal should be split by the posting engine.
    /// </param>
    /// <remarks>
    ///    If your posting engine has no concept of splitting, you may just ignore the second parameter. This
    ///    is called outside a transaction in the run method. See the <c>LedgerJournalPostBatch</c> for an
    ///    example.
    /// </remarks>
    protected abstract void post(Common _journalRecord, boolean _allowJournalSplit)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the posting task.
    /// </summary>
    /// <remarks>
    ///    This is the entry point of the batch task. This is written so that there is an "all-or-nothing"
    ///    behavior (complete transactional roll-back) for things run inside the batch. Posts outside a batch
    ///    can still partially finish in the presence of errors.
    /// </remarks>
    public void run()
    {
        Array               journalsToPostArray;
        Common              journal;
        BatchHeader         batchHeader;
        boolean             needClearSessionInfo = false;
        int                 i = 1;
        LedgerPostBatch     ledgerPostBatch;

        #OCCRetryCount
        if (!this.validate())
        {
            throw error("@SYS104318");
        }

        try
        {
            if (this.isInBatch())
            {
                // Get the header for this batch.
                batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            }

            journal = this.getJournal(journalId);

            this.validatePost(journal);

            ttsbegin;

            journalsToPostArray = this.getJournalsToPost(journal);

            if (journalsToPostArray.lastIndex() == 1)
            {
                // We've reached the base case. The post can't be made any more parallel, so simply
                // post the journal.

                journal = journalsToPostArray.value(1);

                // Set session info so that we can recover from catastrophic failures.
                needClearSessionInfo = this.setSessionInfo(journal);

                // Must commit this transaction so that the following posting calls
                // can be within their own transaction.
                ttscommit;

                try
                {
                    // Post the journal without splitting
                    this.post(journal, false);

                    if (needClearSessionInfo)
                    {
                        this.clearSessionInfo(journal);
                    }
                }
                catch (Exception::Error)
                {
                    if (needClearSessionInfo)
                    {
                        this.clearSessionInfo(journal);
                    }

                    // Chain the error forward so that the batch engine knows
                    // the task has failed. Note that if this is not running
                    // in a batch process, the error will be caught inside the
                    // try-catch block contained by the execution loop below.
                    throw Exception::Error;
                }
            }
            else
            {
                // The are multiple journals to post, so create more batchJournalPost tasks to
                // handle them.

                if (batchHeader != null)
                {
                    // This is being run as batch, so create new tasks to do the posting.

                    for (i = 1; i <= journalsToPostArray.lastIndex(); i++)
                    {
                        // Create a task for each journal. (this is still inside the transaction)
                        journal = journalsToPostArray.value(i);
                        ledgerPostBatch = this.constructChild(journal, transferErrors, true);

                        batchHeader.addRuntimeTask(ledgerPostBatch, this.parmCurrentBatch().RecId);
                    }

                    batchHeader.save();

                    ttscommit;

                    // At this point the journal has been split, etc., and has had tasks created to
                    // post the journal.
                }
                else
                {
                    // This is being run outside of batch. Directly post each of the journals
                    // without creating new batch run-time tasks.

                    // Must commit this transaction so that the following run()
                    // call can be within its own transaction.
                    ttscommit;

                    for (i = 1; i <= journalsToPostArray.lastIndex(); i++)
                    {
                        // Construct a ledgerPostBatch derived object and post the journal outside the batch framework.
                        journal = journalsToPostArray.value(i);
                        ledgerPostBatch = this.constructChild(journal, transferErrors, true);

                        try
                        {
                            // Call run outside of a transaction so that it can be within its
                            // own transaction block.
                            ledgerPostBatch.runOperation();
                        }
                        catch (Exception::Error)
                        {
                            // Catch any exception so that any one error won't bring down
                            // the entire process of posting the journals.
                            Global::exceptionTextFallThrough();
                        }
                    }
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates to the batch framework that this should be run on an Application Object Server (AOS).
    /// </summary>
    /// <returns>
    ///    true
    /// </returns>
    /// <remarks>
    ///    This is an override method that always returns true.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSessionInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the journal's session information.
    /// </summary>
    /// <param name="_journalRecord">
    ///    The journal to set session information for.
    /// </param>
    /// <returns>
    ///    true if the session information was changed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    To override this method is optional. It only has to be overridden if you must track session
    ///    information for system recovery, and so on
    /// </remarks>
    protected boolean setSessionInfo(Common _journalRecord)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a journal for posting. An exception should be thrown for an invalid journal.
    /// </summary>
    /// <param name="_journalRecord">
    ///    The journal record to be posted.
    /// </param>
    /// <remarks>
    ///    This is called outside a transaction in the run method. Please use "throw error" and not
    ///    "checkFailed" since the <c>run</c> method expects a hard failure for an invalid journal. See the
    ///    <c>LedgerJournalPostBatch</c> class for an example.
    /// </remarks>
    protected abstract void validatePost(Common _journalRecord)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>