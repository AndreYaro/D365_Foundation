<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmReportsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>smmReportsController</c> is the controller class for the <c>CustBasedata</c> report, the
/// <c>CustListReport</c> report, and the <c>smmSalesCustItemStatistics</c> report.
/// </summary>
public class smmReportsController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildPeriodQuery</Name>
				<Source><![CDATA[
    private Query buildPeriodQuery(Query _query)
    {
        QueryBuildDataSource                queryBuildDataSource;
        QueryBuildRange                     queryBuildRange;
        Query                               queryBuild;

        FromDate                            fromDate_Period1;
        ToDate                              toDate_Period1;
        FromDate                            fromDate_Period2;
        ToDate                              toDate_Period2;

        smmSalesCustItemStatisticsContract  contract = reportContract.parmRdpContract() as smmSalesCustItemStatisticsContract;

        queryBuild              = new Query(_query.pack());

        fromDate_Period1        = contract.parmPeriodOneFromDate();
        toDate_Period1          = contract.parmPeriodOneToDate();
        fromDate_Period2        = contract.parmPeriodTwoFromDate();
        toDate_Period2          = contract.parmPeriodTwoToDate();

        queryBuildDataSource    = queryBuild.dataSourceTable(tablenum(CustInvoiceJour));
        queryBuildRange         = SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(CustInvoiceJour, InvoiceDate));

        queryBuildRange.value(queryRange(fromDate_Period1, toDate_Period1) + ',' + queryRange(fromDate_Period2, toDate_Period2));

        return queryBuild;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the query range for the <c>CustBaseData</c> report.
    /// </summary>
    /// <remarks>
    /// Includes merged customer if flagged.
    /// </remarks>
    protected void preRunModifyContract()
    {
        Query                       query;
        QueryBuildRange             qbRangeMergedRoot;
        QueryBuildDatasource        qbdsCustTable;
        SrsReportRdlDataContract    contract;
        NoYes                       mcrInclMergeCust;

        #define.parametermcrInclMergeCust('mcrInclMergeCust')

        if (args.menuItemName() == menuitemOutputStr(CustBasedata))
        {
            contract = this.parmReportContract().parmRdlContract();
            mcrInclMergeCust = contract.getParameter(#parametermcrInclMergeCust).getValueTyped();

            if (!mcrInclMergeCust)
            {
                query = this.getFirstQuery();
                qbdsCustTable = query.dataSourceTable(tableNum(CustTable));

                qbRangeMergedRoot = qbdsCustTable.addRange(fieldNum(CustTable, MCRMergedRoot));
                qbRangeMergedRoot.value(SysQuery::valueEmptyString());
            }

            contract.getParameter('TPFTaxLicenseNumAccess').setValueTyped(hasFieldAccess(tableNum(CustTable), fieldNum(CustTable, TaxLicenseNum)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report name based on caller command.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> context.
    /// </param>
    /// <returns>
    /// The report name.
    /// </returns>
    public static str getReportName(Args _args)
    {
        str reportName;

        if (_args.menuItemName() == menuitemOutputStr(CustBasedata))
        {
            reportName = ssrsReportStr(CustBasedata, Report);
        }
        else if (_args.menuItemName() == menuitemOutputStr(CustListReport))
        {
            reportName = ssrsReportStr(CustListReport, Report);
        }
        else if (_args.menuItemName() == menuitemOutputStr(smmSalesCustItemStatistics))
        {
            reportName = ssrsReportStr(smmSalesCustItemStatistics, Report);
        }

        return reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        smmReportsController  controller = new smmReportsController();
        controller.parmReportName(smmReportsController::getReportName(_args));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>