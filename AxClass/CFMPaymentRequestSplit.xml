<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class splits payment request.
/// </summary>
[CFMPaymentRequestSourceTypeAttribute(CFMPaymentRequestSourceType::Manual), CFMPaymentRequestSourceTypeAttribute(CFMPaymentRequestSourceType::PlannedPayment)]
class CFMPaymentRequestSplit
{
    CFMPaymentRequestTable paymentRequestTable;
    CFMPaymentRequestTable paymentRequestTableSplitted;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>CFMPaymentRequestSplit</c> class.
    /// </summary>
    /// <param name="_paymentRequestTable">
    /// The payment request.
    /// </param>
    /// <returns>
    /// Instance of <c>CFMPaymentRequestSplit</c> class.
    /// </returns>
    public static CFMPaymentRequestSplit construct(CFMPaymentRequestTable _paymentRequestTable)
    {
        if (!_paymentRequestTable)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CFMPaymentRequestSourceTypeAttribute extensionAttribute = new CFMPaymentRequestSourceTypeAttribute(_paymentRequestTable.SourceType);
        CFMPaymentRequestSplit paymentRequestSplit = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMPaymentRequestSplit), extensionAttribute);

        if (!paymentRequestSplit)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        paymentRequestSplit.initialize(_paymentRequestTable);

        return paymentRequestSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSplitAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether payment request split is allowed.
    /// </summary>
    /// <param name="_paymentRequestTable">
    /// The payment request.
    /// </param>
    /// <returns>
    /// True if split is allowed; otherwise False.
    /// </returns>
    public static boolean isSplitAllowed(CFMPaymentRequestTable _paymentRequestTable)
    {
        boolean ret;

        boolean paymentRequestSourceTypeIsCustVendInvoice()
        {
            return _paymentRequestTable.SourceType == CFMPaymentRequestSourceType::CustInvoice ||
                   _paymentRequestTable.SourceType == CFMPaymentRequestSourceType::VendInvoice;
        }

        ret = _paymentRequestTable.Status != CFMPaymentRequestStatus::Accepted &&
              _paymentRequestTable.Status != CFMPaymentRequestStatus::Completed &&
              _paymentRequestTable.Status != CFMPaymentRequestStatus::Canceled &&
              _paymentRequestTable.WorkflowStatus != CFMPaymentRequestWorkflowStatus::Submitted &&
              !_paymentRequestTable.Outdated &&
              !_paymentRequestTable.unpostedJournalExist() &&
              !(paymentRequestSourceTypeIsCustVendInvoice() &&
               CFMPaymentRequestCashDisc::existByPaymentRequest(_paymentRequestTable.RecId));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class instance from the payment request.
    /// </summary>
    /// <param name="_paymentRequestTable">
    /// The payment request.
    /// </param>
    protected void initialize(CFMPaymentRequestTable _paymentRequestTable)
    {
        paymentRequestTable = _paymentRequestTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSuccessMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs success message to infolog.
    /// </summary>
    protected void showSuccessMessage()
    {
        SysInfoAction_Formrun infoAction = SysInfoAction_Formrun::newFormname(formStr(CFMPaymentRequest));
        infoAction.parmCallerBuffer(paymentRequestTableSplitted);
        info(strFmt("@CashFlowManagement:PaymRequestSuccessfullySplit", paymentRequestTableSplitted.PaymentRequestId), '', infoAction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>split</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits payment request and its source.
    /// </summary>
    /// <param name="_splitAmount">
    /// The amount to split.
    /// </param>
    /// <param name="_splitPaymentDate">
    /// The payment date of the splitted payment request.
    /// </param>
    public void split(AmountCur _splitAmount, TransDate _splitPaymentDate)
    {
        if (CFMPaymentRequestSplit::isSplitAllowed(paymentRequestTable))
        {
            ttsBegin;
            // All number sequences should taken from the source company
            changecompany(paymentRequestTable.SourceDataAreaId)
            {
                this.splitPaymentRequest(_splitAmount, _splitPaymentDate);
                this.splitCashDiscounts(_splitAmount, _splitPaymentDate);
                this.showSuccessMessage();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitCashDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits payment request cash discounts.
    /// </summary>
    /// <param name="_splitAmount">
    /// The amount to split.
    /// </param>
    /// <param name="_splitPaymentDate">
    /// The payment date of the splitted payment request.
    /// </param>
    protected void splitCashDiscounts(AmountCur _splitAmount, DueDate _splitPaymentDate)
    {
        // Amount to pay before splitting
        AmountCur balanceAmount  = paymentRequestTable.amountCurBalance() + _splitAmount;

        if (!balanceAmount)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CFMPaymentRequestCashDisc cashDiscount;

        while select forUpdate cashDiscount
            where cashDiscount.PaymentRequestTable == paymentRequestTable.RecId
        {
            CFMPaymentRequestCashDisc cashDiscountSplitted;

            cashDiscountSplitted.PaymentRequestTable = paymentRequestTableSplitted.RecId;
            cashDiscountSplitted.CashDiscDate = cashDiscount.CashDiscDate;
            cashDiscountSplitted.CashDiscAmount = CurrencyExchangeHelper::amount(cashDiscount.CashDiscAmount * _splitAmount / balanceAmount, paymentRequestTable.CurrencyCode);
            cashDiscountSplitted.insert();

            cashDiscount.CashDiscAmount -= cashDiscountSplitted.CashDiscAmount;
            cashDiscount.update();
        }

        CFMPaymentRequestCashDiscCreate::updatePaymRequestCashDiscountLines(paymentRequestTable);
        CFMPaymentRequestCashDiscCreate::updatePaymRequestCashDiscountLines(paymentRequestTableSplitted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitPaymentRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits payment request.
    /// </summary>
    /// <param name="_splitAmount">
    /// The amount to split.
    /// </param>
    /// <param name="_splitPaymentDate">
    /// The payment date of the splitted payment request.
    /// </param>
    protected void splitPaymentRequest(AmountCur _splitAmount, DueDate _splitPaymentDate)
    {
        CFMJournalTable schedJournal;

        if (paymentRequestTable.Status == CFMPaymentRequestStatus::Scheduled)
        {
            schedJournal = paymentRequestTable.findJournalByDate(CFMJournalType::Plan, _splitPaymentDate);
        }

        paymentRequestTable.selectForUpdate(true);

        paymentRequestTableSplitted.clear();
        paymentRequestTableSplitted.data(paymentRequestTable);
        paymentRequestTableSplitted.PaymentRequestId = NumberSeq::newGetNum(CFMParameters::numRefPaymentRequestId()).num();
        paymentRequestTableSplitted.PaymentDate = _splitPaymentDate;
        paymentRequestTableSplitted.SourceRefRecId = 0;

        if (schedJournal.RecId == 0 && paymentRequestTable.Status == CFMPaymentRequestStatus::Scheduled)
        {
            paymentRequestTableSplitted.Status = CFMPaymentRequestStatus::Confirmed;
        }

        paymentRequestTableSplitted.insert();

        // PR amount to pay (before splitting)
        AmountCur balanceAmountTotal = paymentRequestTable.amountCurBalance();

        // PR original amount (before splitting)
        AmountCur origAmountTotal = paymentRequestTable.amountCur();

        // Original amount to split
        AmountCur origAmountToSplit = CurrencyExchangeHelper::amount(origAmountTotal * _splitAmount / balanceAmountTotal, paymentRequestTable.CurrencyCode);

        RecordInsertList journalTransLogSplittedList = new RecordInsertList(tableNum(CFMJournalTransLog));

        CFMPaymentRequestLine paymentRequestLine;

        AmountCur lineBalanceAmountSum;
        AmountCur lineBalanceAmountSplitted;
        AmountCur lineBalanceAmountSplittedSum;
        AmountCur lineOrigAmountSum;
        AmountCur lineOrigAmountSplittedSum;

        while select forUpdate paymentRequestLine
            where paymentRequestLine.PaymentRequestTable == paymentRequestTable.RecId
        {
            // Distributing amount to split and original amount to split among splitted payment request lines proportionally to unsplitted line amount to pay / line original amount
            lineBalanceAmountSum += paymentRequestLine.BalanceAmountCur;
            lineOrigAmountSum += paymentRequestLine.AmountCur;

            AmountCur lineOrigAmountSplitted = CurrencyExchangeHelper::amount(origAmountToSplit * lineOrigAmountSum / origAmountTotal - lineOrigAmountSplittedSum, paymentRequestTable.CurrencyCode);
            lineBalanceAmountSplitted = CurrencyExchangeHelper::amount(_splitAmount * lineBalanceAmountSum / balanceAmountTotal - lineBalanceAmountSplittedSum, paymentRequestTable.CurrencyCode);

            lineOrigAmountSplittedSum += lineOrigAmountSplitted;
            lineBalanceAmountSplittedSum += lineBalanceAmountSplitted;

            CFMPaymentRequestLine paymentRequestLineSplitted;

            paymentRequestLineSplitted.clear();
            paymentRequestLineSplitted.data(paymentRequestLine);
            paymentRequestLineSplitted.AmountCur = lineOrigAmountSplitted;
            paymentRequestLineSplitted.BalanceAmountCur = lineBalanceAmountSplitted;
            paymentRequestLineSplitted.PaymentRequestTable = paymentRequestTableSplitted.RecId;
            paymentRequestLineSplitted.insert();

            paymentRequestLine.AmountCur -= lineOrigAmountSplitted;
            paymentRequestLine.BalanceAmountCur -= lineBalanceAmountSplitted;
            paymentRequestLine.update();

            if (schedJournal.RecId != 0)
            {
                CFMJournalTransLog transLogSource;

                changeCompany(schedJournal.company())
                {
                    select firstonly transLogSource
                        where transLogSource.Source == paymentRequestLine.RecId
                           && transLogSource.SourceHeader == paymentRequestTable.RecId
                           && transLogSource.SourceType == CFMJournalTransSourcetype::PaymentRequest
                           && transLogSource.JournalTable == schedJournal.RecId;

                    if (transLogSource)
                    {
                        CFMJournalTransLog transLogDest;
                        transLogDest.clear();
                        buf2Buf(transLogSource, transLogDest);
                        transLogDest.Source = paymentRequestLineSplitted.RecId;
                        transLogDest.SourceHeader = paymentRequestTableSplitted.RecId;

                        journalTransLogSplittedList.add(transLogDest);
                    }

                    journalTransLogSplittedList.insertDatabase();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>