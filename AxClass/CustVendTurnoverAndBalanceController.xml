<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTurnoverAndBalanceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendTurnoverAndBalanceController</c> class is the controller class for the <c>CustVendTurnoverAndBalance</c> report.
/// </summary>
public class CustVendTurnoverAndBalanceController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00026, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustQuery</Name>
				<Source><![CDATA[
    private void initCustQuery(Query _query)
    {
        SysQuery::findOrCreateDataSource(_query, tableNum(VendTable)).enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendQuery</Name>
				<Source><![CDATA[
    private void initVendQuery(Query _query)
    {
        SysQuery::findOrCreateDataSource(_query, tableNum(CustTable)).enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the query before prompting the user based on whether the menu item used
    ///    was from Accounts Payable or Accounts Receivable.
    /// </summary>
    protected void prePromptModifyContract()
    {
        CustVendTurnoverAndBalanceContract dataContract;

        dataContract = this.parmReportContract().parmRdpContract();
        dataContract.parmSysVersion(SysReportRun::sysVersion());
        dataContract.parmUserName(SysReportRun::userName());

        if (!dataContract.parmFromDate())
        {
            // Provide a default date because the last value is empty.
            dataContract.parmFromDate(FiscalCalendars::findFirstDayofYear(Ledger::fiscalCalendar(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }

        if (!dataContract.parmToDate())
        {
            // Provide a default date because the last value is empty.
            dataContract.parmToDate(FiscalCalendars::findLastDayofYear(Ledger::fiscalCalendar(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }

        if (this.parmArgs().menuItemName() == menuitemOutputStr(VendTurnoverAndBalance))
        {
            this.initVendQuery(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
            dataContract.parmModuleCustVend(ModuleCustVend::Vend);
            this.parmDialogCaption("@GLS110886");
        }
        else
        {
            this.initCustQuery(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
            dataContract.parmModuleCustVend(ModuleCustVend::Cust);
            this.parmDialogCaption("@GLS110887");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the opportunity for validation prior to running the report.
    /// </summary>
    /// <returns>
    ///    A container containing two items. The first item is the <c>SrsReportPreRunState</c>
    ///    enumeration. The second item is the message to show to the user.
    /// </returns>
    protected container preRunValidate()
    {
        // Now that this report is a preprocess tempdb report, we no longer need
        // the limits that were required in the older version of the report.
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustVendTurnoverAndBalanceController controller = new CustVendTurnoverAndBalanceController();
        controller.parmReportName(ssrsReportStr(CustVendTurnoverAndBalance, Report));
        controller.parmArgs(_args);
        controller.parmLoadFromSysLastValue(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>