<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowForecastProcessFutureBalanceStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// This is a strategy for processing cash flow daily aggregation of future cashflow values.
/// </summary>
[Export(identifierStr(Dynamics.AX.Application.CashFlowIForecastProcessBalanceStrategy))]
[ExportMetadata(classStr(CashFlowIForecastProcessBalanceStrategy), classStr(CashFlowForecastProcessFutureBalanceStrategy))]
internal class CashFlowForecastProcessFutureBalanceStrategy implements CashFlowIForecastProcessBalanceStrategy
{
    private CashFlowForecastProcessBalanceContract processBalanceContract;
    private CashFlowForecastProcessDefaultDimensionLoader dimensionLoader;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromProcessBalanceContract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initializeFromProcessBalanceContract(CashFlowForecastProcessBalanceContract _processBalanceContract)
    {
        processBalanceContract = _processBalanceContract;
        dimensionLoader = CashFlowForecastProcessDefaultDimensionLoader::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDimensionReferences</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void loadDimensionReferences()
    {
        dimensionLoader.loadDimensionReferences();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearReferences</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void clearReferences()
    {
        dimensionLoader.clearReferences();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalances</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createBalances()
    {
        CashFlowForecastBalanceTmp balanceTmp;
   
        this.calculateDailyBalances(balanceTmp);
        this.insertBalances(balanceTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBalances</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void clearBalances()
    {
        CashFlowForecastBalance cashFlowForecastBalance;

        if (processBalanceContract.deleteMode == CashFlowProcessBalanceDeleteMode::DeleteAll)
        {
            delete_from cashFlowForecastBalance
                where cashFlowForecastBalance.IsActuals == NoYes::No;
        }
        else if (processBalanceContract.deleteMode == CashFlowProcessBalanceDeleteMode::DeletePeriod)
        {
            delete_from cashFlowForecastBalance
                where cashFlowForecastBalance.IsActuals == NoYes::No
                    && cashFlowForecastBalance.AccountingDate >= processBalanceContract.periodOpenDate
                    && cashFlowForecastBalance.AccountingDate <= processBalanceContract.periodCloseDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBalances</Name>
				<Source><![CDATA[
    private void insertBalances(CashFlowForecastBalanceTmp _balanceTmp)
    {
        const NoYes isActuals = NoYes::No;

        CashFlowForecastBalance balances;
        insert_recordset balances (AccountingDate, MainAccount, DefaultDimension, IsOpeningBalance, IsActuals, Type, SubTypeName, BankAccount, AccountingCurrencyAmountIn, AccountingCurrencyAmountOut, EnterpriseCurrencyAmountIn, EnterpriseCurrencyAmountOut)
        select AccountingDate, MainAccount, DefaultDimension, IsOpeningBalance, isActuals, Type, SubTypeName, BankAccount,
            sum(AccountingCurrencyAmountIn), sum(AccountingCurrencyAmountOut),
            sum(EnterpriseCurrencyAmountIn), sum(EnterpriseCurrencyAmountOut) from _balanceTmp
        group by AccountingDate, MainAccount, DefaultDimension, IsOpeningBalance, Type, SubTypeName, BankAccount
            where  _balanceTmp.AccountingCurrencyAmountIn != 0
                || _balanceTmp.AccountingCurrencyAmountOut != 0
                || _balanceTmp.EnterpriseCurrencyAmountIn != 0
                || _balanceTmp.EnterpriseCurrencyAmountOut != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDailyBalances</Name>
				<Source><![CDATA[
    private void calculateDailyBalances(CashFlowForecastBalanceTmp _balanceTmp)
    {
        CashFlowForecastDefaultDimensionReference dimensionReferences;
        LedgerCov ledgerCov;
        LedgerCovDocument ledgerCovDoc;
        LedgerLiquidity liquidity;

        const NoYes isOpeningBalance = NoYes::No;
        const LedgerCovDocumentType noneType = LedgerCovDocumentType::None;

        ledgerCov.clear();
        ledgerCovDoc.clear();

        // Credits = AccountingCurrencyAmountOut
        insert_recordset _balanceTmp (MainAccount, IsOpeningBalance, IsCredit, AccountingDate, AccountingCurrencyAmountOut, EnterpriseCurrencyAmountOut, BankAccount, Type, SubTypeName, DefaultDimension)
            select MainAccount, isOpeningBalance, Crediting, TransDate, sum(AmountMST), sum(EnterpriseCurrencyAmount), BankAccount from ledgerCov
                group by ledgerCov.TransDate, ledgerCov.MainAccount, ledgerCov.Crediting, ledgerCov.BankAccount, ledgerCovDoc.Type, ledgerCovDoc.SubTypeName, dimensionReferences.BalanceDefaultDimension
                where ledgerCov.IsBeginningBalance == NoYes::No
                    && ledgerCov.Crediting == NoYes::Yes
                    && ledgerCov.TransDate >= processBalanceContract.periodOpenDate
                    && ledgerCov.TransDate <= processBalanceContract.periodCloseDate
            join Type, SubTypeName from ledgerCovDoc
                where ledgerCovDoc.TransTableId == ledgerCov.TransTableId
                   && ledgerCovDoc.TransRecId == ledgerCov.TransRecId
            join BalanceDefaultDimension from dimensionReferences
                where dimensionReferences.MainAccount == ledgerCov.MainAccount
                    && dimensionReferences.OriginalDefaultDimension == ledgerCov.DefaultDimension
            exists join liquidity
                where liquidity.MainAccount == ledgerCov.MainAccount;
                
        ledgerCov.clear();
        ledgerCovDoc.clear();

        insert_recordset _balanceTmp (MainAccount, IsOpeningBalance, IsCredit, AccountingDate, AccountingCurrencyAmountOut, EnterpriseCurrencyAmountOut, BankAccount, Type, DefaultDimension)
            select MainAccount, isOpeningBalance, Crediting, TransDate, sum(AmountMST), sum(EnterpriseCurrencyAmount), BankAccount, noneType from ledgerCov
                group by ledgerCov.TransDate, ledgerCov.MainAccount, ledgerCov.Crediting, ledgerCov.BankAccount, dimensionReferences.BalanceDefaultDimension
                where ledgerCov.IsBeginningBalance == NoYes::No
                    && ledgerCov.Crediting == NoYes::Yes
                    && ledgerCov.TransDate >= processBalanceContract.periodOpenDate
                    && ledgerCov.TransDate <= processBalanceContract.periodCloseDate
            join BalanceDefaultDimension from dimensionReferences
                where dimensionReferences.MainAccount == ledgerCov.MainAccount
                    && dimensionReferences.OriginalDefaultDimension == ledgerCov.DefaultDimension
            exists join liquidity
                where liquidity.MainAccount == ledgerCov.MainAccount
            notexists join ledgerCovDoc
                where ledgerCovDoc.TransTableId == ledgerCov.TransTableId
                   && ledgerCovDoc.TransRecId == ledgerCov.TransRecId;

        ledgerCov.clear();
        ledgerCovDoc.clear();

        // Debits = AccountingCurrencyAmountIn
        insert_recordset _balanceTmp (MainAccount, IsOpeningBalance, IsCredit, AccountingDate, AccountingCurrencyAmountIn, EnterpriseCurrencyAmountIn, BankAccount, Type, SubTypeName, DefaultDimension)
            select MainAccount, isOpeningBalance, Crediting, TransDate, sum(AmountMST), sum(EnterpriseCurrencyAmount), BankAccount from ledgerCov
                group by ledgerCov.TransDate, ledgerCov.MainAccount, ledgerCov.Crediting, ledgerCov.BankAccount, ledgerCovDoc.Type, ledgerCovDoc.SubTypeName, dimensionReferences.BalanceDefaultDimension
                where ledgerCov.IsBeginningBalance == NoYes::No
                    && ledgerCov.Crediting == NoYes::No
                    && ledgerCov.TransDate >= processBalanceContract.periodOpenDate
                    && ledgerCov.TransDate <= processBalanceContract.periodCloseDate
            join Type, SubTypeName from ledgerCovDoc
                where ledgerCovDoc.TransTableId == ledgerCov.TransTableId
                   && ledgerCovDoc.TransRecId == ledgerCov.TransRecId
            join BalanceDefaultDimension from dimensionReferences
                where dimensionReferences.MainAccount == ledgerCov.MainAccount
                    && dimensionReferences.OriginalDefaultDimension == ledgerCov.DefaultDimension
            exists join liquidity
                where liquidity.MainAccount == ledgerCov.MainAccount;

        ledgerCov.clear();
        ledgerCovDoc.clear();

        insert_recordset _balanceTmp (MainAccount, IsOpeningBalance, IsCredit, AccountingDate, AccountingCurrencyAmountIn, EnterpriseCurrencyAmountIn, BankAccount, Type, DefaultDimension)
            select MainAccount, isOpeningBalance, Crediting, TransDate, sum(AmountMST), sum(EnterpriseCurrencyAmount), BankAccount, noneType from ledgerCov
                group by ledgerCov.TransDate, ledgerCov.MainAccount, ledgerCov.Crediting, ledgerCov.BankAccount, dimensionReferences.BalanceDefaultDimension
                where ledgerCov.IsBeginningBalance == NoYes::No
                    && ledgerCov.Crediting == NoYes::No
                    && ledgerCov.TransDate >= processBalanceContract.periodOpenDate
                    && ledgerCov.TransDate <= processBalanceContract.periodCloseDate
            join BalanceDefaultDimension from dimensionReferences
                where dimensionReferences.MainAccount == ledgerCov.MainAccount
                    && dimensionReferences.OriginalDefaultDimension == ledgerCov.DefaultDimension
            exists join liquidity
                where liquidity.MainAccount == ledgerCov.MainAccount
            notexists join ledgerCovDoc
                where ledgerCovDoc.TransTableId == ledgerCov.TransTableId
                   && ledgerCovDoc.TransRecId == ledgerCov.TransRecId;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>