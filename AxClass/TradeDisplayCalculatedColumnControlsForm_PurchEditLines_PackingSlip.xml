<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeDisplayCalculatedColumnControlsForm_PurchEditLines_PackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class TradeDisplayCalculatedColumnControlsForm_PurchEditLines_PackingSlip extends TradeDisplayCalculatedColumnControlsForm
{

    private PurchEditLinesForm  purchEditLinesForm;

    private FormControl backOrderFormControl;
    private FormControl qualityOrderStatusDisplayFormControl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static TradeDisplayCalculatedColumnControlsForm_PurchEditLines_PackingSlip construct()
    {
        return new TradeDisplayCalculatedColumnControlsForm_PurchEditLines_PackingSlip();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    internal static TradeDisplayCalculatedColumnControlsForm_PurchEditLines_PackingSlip newFromForm(
        FormRun             _formRun,
        PurchEditLinesForm  _purchEditLinesForm)
    {
        if (!_formRun || !_purchEditLinesForm)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        TradeDisplayCalculatedColumnControlsForm_PurchEditLines_PackingSlip displayCalculatedColumnControlsForm = TradeDisplayCalculatedColumnControlsForm_PurchEditLines_PackingSlip::construct();

        if (_purchEditLinesForm is PurchEditLinesForm_PackingSlip)
        {
            displayCalculatedColumnControlsForm.purchEditLinesForm = _purchEditLinesForm;
            displayCalculatedColumnControlsForm.parmCallerForm(_formRun);

            displayCalculatedColumnControlsForm.initFormControls();
            
            Map displayCalculatedColumnsControlsMap = displayCalculatedColumnControlsForm.generateDisplayCalculatedColumnsControlsMap();
            displayCalculatedColumnControlsForm.parmCallerDisplayCalculatedColumnControls(displayCalculatedColumnsControlsMap);
            
            displayCalculatedColumnControlsForm.init();
        }

        return displayCalculatedColumnControlsForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormControls</Name>
				<Source><![CDATA[
    private void initFormControls()
    {
        FormControl backorderControl = this.parmCallerForm().design().controlName(formControlStr(PurchEditLines, backOrder));
        if (backorderControl)
        {
            backOrderFormControl = backorderControl;
        }

        FormControl qualityOrderStatusControl = this.parmCallerForm().design().controlName(formControlStr(PurchEditLines, qualityOrderStatusDisplay));
        if (qualityOrderStatusControl)
        {
            qualityOrderStatusDisplayFormControl = qualityOrderStatusControl;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDisplayCalculatedColumnsControlsMap</Name>
				<Source><![CDATA[
    private Map generateDisplayCalculatedColumnsControlsMap()
    {
        Map displayFieldParmControlsMap = new Map(Types::Integer, Types::Class);
        
        if (!purchEditLinesForm.backOrder() && backOrderFormControl)
        {
            displayFieldParmControlsMap.add(fieldNum(TradeDisplayCalculatedColumnParm, ShowBackOrder), backOrderFormControl);
        }

        if (InventParameters::find().UseQualityManagement && qualityOrderStatusDisplayFormControl)
        {
            displayFieldParmControlsMap.add(fieldNum(TradeDisplayCalculatedColumnParm, ShowQualityOrderStatus), qualityOrderStatusDisplayFormControl);
        }
        return displayFieldParmControlsMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>