<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOnlineChannelProvisionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for provisioning <c>RetailOnlineChannelTable</c>.
/// </summary>
internal final class RetailOnlineChannelProvisionHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>provisionRetailOnlineChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provision a retail online channel basedon a template channel.
    /// </summary>
    /// <param name="_sourceChannelRecId">The RecId of the source <c>RetailOnlineChannelTable</c>.</param>
    /// <param name="_channelId">The retail channel id for the new channel.</param>
    /// <param name="_sourceParty">The RecId of the <c>DirPartyTable</c> which will provide the address for the new retail online channel.</param>
    /// <param name="_newChannelName">The name of the new retail online channel.</param>
    /// <param name="_omOperatingUnitNumber">The OM operating unit number for the new channel.</param>
    /// <returns>The copied retail online channel.</returns>
    internal static RetailOnlineChannelTable provisionRetailOnlineChannel(
        RetailChannelRecId _sourceChannelRecId,
        RetailChannelId _channelId,
        DirPartyRecId _sourceParty,
        DirPartyName _newChannelName,
        OMOperatingUnitNumber _omOperatingUnitNumber)
    {
        RetailOnlineChannelTable sourceRetailOnlineChannelTable = RetailOnlineChannelTable::find(_sourceChannelRecId);

        if (!sourceRetailOnlineChannelTable)
        {
            throw error('@Retail:TemplateRetailOnlineChannelNotExistErrorMessage');
        }

        ttsbegin;

        // Fill fields using template channel.
        RetailOnlineChannelTable newChannel;
        newChannel.data(sourceRetailOnlineChannelTable);
        newChannel.RecId = 0;
        newChannel.RetailChannelId = _channelId;

        // Copy operating unit.
        OMOperatingUnit sellerOMOperatingUnit = RetailOnlineChannelProvisionHelper::provisionOMOperatingUnit(
            sourceRetailOnlineChannelTable.OMOperatingUnitID,
            _newChannelName,
            _omOperatingUnitNumber);
        newChannel.OMOperatingUnitID = sellerOMOperatingUnit.RecId;

        // Copy warehouse.
        InventLocation sellerWarehouse = RetailOnlineChannelProvisionHelper::provisionInventLocation(
            sourceRetailOnlineChannelTable.inventLocation,
            sourceRetailOnlineChannelTable.inventLocationDataAreaId,
            _channelId,
            _newChannelName);
        newChannel.inventLocation = sellerWarehouse.InventLocationId;
        newChannel.inventLocationDataAreaId = sellerWarehouse.DataAreaId;

        // Find logistics postal address.
        DirPartyLocation prospectPostalLocation = DirPartyLocation::findPrimaryPartyLocation(_sourceParty);
        LogisticsPostalAddress prospectPostalAddress;
        if (prospectPostalLocation)
        {
            prospectPostalAddress = LogisticsPostalAddress::findByLocation(prospectPostalLocation.Location);
        }

        // Copy address to warehouse address.
        RetailOnlineChannelProvisionHelper::provisionLogisticsPostalAddressToInventLocation(sellerWarehouse.RecId, prospectPostalAddress, _newChannelName);

        // Copy address to operating unit address.
        RetailOnlineChannelProvisionHelper::provisionLogisticsPostalAddressToDirParty(sellerOMOperatingUnit.RecId, prospectPostalAddress, _newChannelName);

        // Unlink financial dimension.
        newChannel.DefaultDimension = 0;

        // Create channel.
        newChannel.insert();

        RetailOnlineChannelProvisionHelper::provisionLanguage(_sourceChannelRecId, newChannel.RecId);

        RetailOnlineChannelProvisionHelper::provisionCountryRegion(_sourceChannelRecId, newChannel.RecId);

        RetailOnlineChannelProvisionHelper::provisionPaymentConnector(_sourceChannelRecId, newChannel.RecId);

        RetailOnlineChannelProvisionHelper::provisionRetailChannelTableExt(_sourceChannelRecId, newChannel.RecId);

        RetailOnlineChannelProvisionHelper::provisionRetailChannelAttributeGroup(_sourceChannelRecId, newChannel.RecId);

        RetailOnlineChannelProvisionHelper::provisionRetailStoreLocatorGroupOwner(_sourceChannelRecId, newChannel.RecId);

        RetailOnlineChannelProvisionHelper::provisionRetailCDXDataStoreChannel(_sourceChannelRecId, newChannel.RecId);

        RetailCopyStoreInformation::copyStoreTender(_sourceChannelRecId, newChannel.RecId);

        ttscommit;

        return newChannel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>provisionOMOperatingUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provision an <c>OMOperatingUnit</c>.
    /// </summary>
    /// <param name="_sourceOMOperatingUnitRecId">The RecId of the source <c>OMOperatingUnit</c>.</param>
    /// <param name="_orgName">The name of the new <c>OMOperatingUnit</c>.</param>
    /// <param name="_omOperatingUnitNumber">The OM operating unit number of the new <c>OMOperatingUnit</c>.</param>
    /// <returns>The copied <c>OMOperatingUnit</c>.</returns>
    internal static OMOperatingUnit provisionOMOperatingUnit(
        OMOperatingUnitRefRecId _sourceOMOperatingUnitRecId,
        Name _orgName,
        OMOperatingUnitNumber _omOperatingUnitNumber)
    {
        ttsbegin;

        OMOperatingUnit sourceOMOperatingUnit;
        select firstonly sourceOMOperatingUnit
            where sourceOMOperatingUnit.RecId == _sourceOMOperatingUnitRecId;

        OMOperatingUnit newOMOperatingUnit;
        if (sourceOMOperatingUnit)
        {
            newOMOperatingUnit.data(sourceOMOperatingUnit);
            newOMOperatingUnit.RecId = 0;
        }

        newOMOperatingUnit.PartyNumber = DirPartyTable::getNewPartyNumber();
        newOMOperatingUnit.OMOperatingUnitNumber = _omOperatingUnitNumber;
        newOMOperatingUnit.Name = _orgName;
        newOMOperatingUnit.NameAlias = _orgName;
        newOMOperatingUnit.insert();

        ttscommit;

        return newOMOperatingUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>provisionInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provision an <c>InventLocation</c>.
    /// </summary>
    /// <param name="_sourceInventLocationId">The RecId of the source <c>InventLocation</c>.</param>
    /// <param name="_sourceInventLocationDataAreaId">The name of the data area id of the source <c>InventLocation</c>.</param>
    /// <param name="_newInventLocationId">The id of the new <c>InventLocation</c>.</param>
    /// <param name="_newInventLocationName">The name of the new <c>InventLocation</c>.</param>
    /// <returns>The copied <c>InventLocation</c>.</returns>
    internal static InventLocation provisionInventLocation(
        InventLocationId _sourceInventLocationId,
        DataAreaId _sourceInventLocationDataAreaId,
        InventLocationId _newInventLocationId,
        Name _newInventLocationName)
    {
        InventLocation sourceInventLocation;
        InventLocation newInventLocation;

        ttsbegin;

        changecompany(_sourceInventLocationDataAreaId)
        {
            select firstonly sourceInventLocation
            where sourceInventLocation.InventLocationId == _sourceInventLocationId &&
                sourceInventLocation.DataAreaId == _sourceInventLocationDataAreaId;

            if (sourceInventLocation)
            {
                newInventLocation.data(sourceInventLocation);
                newInventLocation.RecId = 0;
            }

            newInventLocation.InventLocationId = _newInventLocationId;
            newInventLocation.Name = _newInventLocationName;
            newInventLocation.insert();
        }

        ttscommit;

        return newInventLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>provisionLogisticsPostalAddressToInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provision a <c>LogisticsPostalAddress</c> to an <c>InventLocation</c>.
    /// </summary>
    /// <param name="_destInventLocationIdRecId">The RecId of the <c>InventLocation</c> to which the address will be copied.</param>
    /// <param name="_sourceLogisticsPostalAddress">The <c>LogisticsPostalAddress</c> to be copied.</param>
    /// <param name="_description">The description of the copied <c>LogisticsPostalAddress</c>.</param>
    internal static void provisionLogisticsPostalAddressToInventLocation(RefRecId _destInventLocationIdRecId, LogisticsPostalAddress _sourceLogisticsPostalAddress, LogisticsDescription _description)
    {
        if (!_sourceLogisticsPostalAddress)
        {
            return;
        }

        ttsbegin;

        LogisticsLocation logisticsLocation;
        logisticsLocation.Description = _description;
        logisticsLocation.IsPostalAddress = NoYes::Yes;
        logisticsLocation.insert();

        LogisticsPostalAddress logisticsPostalAddress;
        logisticsPostalAddress.data(_sourceLogisticsPostalAddress);
        logisticsPostalAddress.RecId = 0;
        logisticsPostalAddress.Location = logisticsLocation.RecId;
        logisticsPostalAddress.insert();

        InventLocationLogisticsLocation inventLocationLogisticsLocation;
        inventLocationLogisticsLocation.InventLocation = _destInventLocationIdRecId;
        inventLocationLogisticsLocation.IsDefault = NoYes::Yes;
        inventLocationLogisticsLocation.IsPostalAddress = NoYes::Yes;
        inventLocationLogisticsLocation.IsPrimary = NoYes::Yes;
        inventLocationLogisticsLocation.IsPrivate = NoYes::No;
        inventLocationLogisticsLocation.Location = logisticsLocation.RecId;
        inventLocationLogisticsLocation.insert();

        InventLocationLogisticsLocationRole inventLocationLogisticsLocationRole;
        inventLocationLogisticsLocationRole.LocationLogisticsLocation = inventLocationLogisticsLocation.RecId;
        inventLocationLogisticsLocationRole.LocationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery).RecId;
        // InventLocationLogisticsLocationRole.insert will set this location as the default location.
        inventLocationLogisticsLocationRole.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>provisionLogisticsPostalAddressToDirParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provision a <c>LogisticsPostalAddress</c> to a <c>DirPartyTable</c>.
    /// </summary>
    /// <param name="_destDirPartyRecId">The RecId of the <c>DirPartyTable</c> to which the address will be copied.</param>
    /// <param name="_sourceLogisticsPostalAddress">The <c>LogisticsPostalAddress</c> to be copied.</param>
    /// <param name="_description">The description of the copied <c>LogisticsPostalAddress</c>.</param>
    internal static void provisionLogisticsPostalAddressToDirParty(DirPartyRecId _destDirPartyRecId, LogisticsPostalAddress _sourceLogisticsPostalAddress, LogisticsDescription _description)
    {
        if (!_sourceLogisticsPostalAddress)
        {
            return;
        }

        ttsbegin;

        LogisticsLocation operatingUnitLocation;
        operatingUnitLocation.Description = _description;
        operatingUnitLocation.IsPostalAddress = NoYes::Yes;
        operatingUnitLocation.insert();

        LogisticsPostalAddress operatingUnitPostalAddress;
        operatingUnitPostalAddress.data(_sourceLogisticsPostalAddress);
        operatingUnitPostalAddress.RecId = 0;
        operatingUnitPostalAddress.Location = operatingUnitLocation.RecId;
        operatingUnitPostalAddress.insert();

        DirPartyLocation operatingUnitDirPartyLocation;
        operatingUnitDirPartyLocation.IsPrimary = NoYes::Yes;
        operatingUnitDirPartyLocation.IsLocationOwner = NoYes::Yes;
        operatingUnitDirPartyLocation.IsPrimaryTaxRegistration = NoYes::Yes;
        operatingUnitDirPartyLocation.IsPostalAddress = NoYes::Yes;
        operatingUnitDirPartyLocation.Party = _destDirPartyRecId;
        operatingUnitDirPartyLocation.Location = operatingUnitLocation.RecId;
        operatingUnitDirPartyLocation.insert();

        DirPartyLocationRole operatingUnitDirPartyLocationRole;
        operatingUnitDirPartyLocationRole.PartyLocation = operatingUnitDirPartyLocation.RecId;
        operatingUnitDirPartyLocationRole.LocationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Business).RecId;
        operatingUnitDirPartyLocationRole.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>provisionLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provision languages from a <c>RetailOnlineChannelTable</c> to another.
    /// </summary>
    /// <param name="_sourceOnlineChannel">The RecId of the source <c>RetailOnlineChannelTable</c>.</param>
    /// <param name="_destOnlineChannel">The RecId of the destination <c>RetailOnlineChannelTable</c>.</param>
    internal static void provisionLanguage(RetailChannelRecId _sourceOnlineChannel, RetailChannelRecId _destOnlineChannel)
    {
        RetailOnlineChannelLanguages sourceChannelDefaultLanguage, destChannelDefaultLanguage;

        ttsbegin;

        while select sourceChannelDefaultLanguage
            where sourceChannelDefaultLanguage.OnlineChannel == _sourceOnlineChannel
        {
            destChannelDefaultLanguage.clear();
            destChannelDefaultLanguage.data(sourceChannelDefaultLanguage);
            destChannelDefaultLanguage.OnlineChannel = _destOnlineChannel;
            destChannelDefaultLanguage.RecId = 0;
            destChannelDefaultLanguage.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>provisionCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provision countries / regions from a <c>RetailOnlineChannelTable</c> to another.
    /// </summary>
    /// <param name="_sourceOnlineChannel">The RecId of the source <c>RetailOnlineChannelTable</c>.</param>
    /// <param name="_destOnlineChannel">The RecId of the destination <c>RetailOnlineChannelTable</c>.</param>
    internal static void provisionCountryRegion(RetailChannelRecId _sourceOnlineChannel, RetailChannelRecId _destOnlineChannel)
    {
        RetailOnlineChannelCountryRegions sourceCountryRegions, destCountryRegions;

        ttsbegin;

        while select sourceCountryRegions
            where sourceCountryRegions.OnlineChannel == _sourceOnlineChannel
        {
            destCountryRegions.data(sourceCountryRegions);
            destCountryRegions.OnlineChannel = _destOnlineChannel;
            destCountryRegions.RecId = 0;
            destCountryRegions.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>provisionPaymentConnector</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provision payment connectors from a <c>RetailOnlineChannelTable</c> to another.
    /// </summary>
    /// <param name="_sourceOnlineChannel">The RecId of the source <c>RetailOnlineChannelTable</c>.</param>
    /// <param name="_destOnlineChannel">The RecId of the destination <c>RetailOnlineChannelTable</c>.</param>
    internal static void provisionPaymentConnector(RetailChannelRecId _sourceOnlineChannel, RetailChannelRecId _destOnlineChannel)
    {
        RetailChannelPaymentConnectorLine sourceConnector, sellerConnector;

        ttsbegin;

        while select sourceConnector
            where sourceConnector.OnlineChannel == _sourceOnlineChannel
        {
            sellerConnector.clear();
            sellerConnector.data(sourceConnector);
            sellerConnector.RecId = 0;
            sellerConnector.secureMerchantPropertiesEdit(true, sourceConnector.secureMerchantPropertiesEdit(false, '')); // Copy decrypted field and encrypt.
            sellerConnector.OnlineChannel = _destOnlineChannel;
            sellerConnector.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>provisionRetailChannelTableExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provision channel profile and live channel database setting from one retail channel to another.
    /// </summary>
    /// <param name="_sourceChannelRecId">The RecId of the source retail channel.</param>
    /// <param name="_destChannelRecId">The RecId of the destination retail channel.</param>
    internal static void provisionRetailChannelTableExt(RetailChannelRecId _sourceChannelRecId, RetailChannelRecId _destChannelRecId)
    {
        ttsbegin;

        RetailChannelTableExt source = RetailChannelTableExt::find(_sourceChannelRecId);

        if (source)
        {
            RetailChannelTableExt dest;
            dest.data(source);
            dest.Channel = _destChannelRecId;
            dest.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetailAddressBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an address book for a retail channel.
    /// </summary>
    /// <param name="_channelRecId">The RecId of the <c>RetailChannelTable</c> to which the address book will be created.</param>
    /// <param name="_addressBookName">The name of the new address book.</param>
    /// <param name="_type">The type of the new address book.</param>
    /// <param name="_description">The description of the new address book.</param>
    /// <returns>The new <c>DirAddressBook</c>.</returns>
    internal static DirAddressBook createRetailAddressBook(RetailChannelRecId _channelRecId, Name _addressBookName, RetailAddressBookType _type, str _description)
    {
        DirAddressBook addressBook;

        ttsbegin;

        addressBook.Name = _addressBookName;
        addressBook.Description = _description;
        addressBook.insert();

        RetailStoreAddressBook channelAddressBook;
        channelAddressBook.clear();
        channelAddressBook.AddressBook = addressBook.RecId;
        channelAddressBook.StoreRecId = _channelRecId;
        channelAddressBook.AddressBookType = _type;
        channelAddressBook.insert();

        ttscommit;

        return addressBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPartyToAddressBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a party to the address book if it's not in it.
    /// </summary>
    /// <param name="_partyRecId">The RecId of the party.</param>
    /// <param name="_addressBookRecId">The RecId of the address book.</param>
    internal static void addPartyToAddressBook(DirPartyRecId _partyRecId, DirAddressBookRecId _addressBookRecId)
    {
        DirPartyTable party;
        DirAddressBook addressBook;
        DirAddressBookParty dirAddressBookParty;

        select firstonly party where party.RecId == _partyRecId;
        if (!party)
        {
            return;
        }

        select firstonly addressBook where addressBook.RecId == _addressBookRecId;
        if (!addressBook)
        {
            return;
        }

        ttsbegin;

        select firstonly dirAddressBookParty
            where dirAddressBookParty.Party == _partyRecId &&
            dirAddressBookParty.AddressBook == _addressBookRecId;

        if (!dirAddressBookParty)
        {
            dirAddressBookParty.clear();
            dirAddressBookParty.Party = _partyRecId;
            dirAddressBookParty.AddressBook = _addressBookRecId;
            dirAddressBookParty.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkerForParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a worker for the party provided.
    /// </summary>
    /// <param name="_partyRecId">The RecId of the party.</param>
    /// <param name="_addressBookRecId">The RecId of the address book.</param>
    /// <param name="_dataAreaId">The data area id of the new worker.</param>
    /// <param name="_retailWorkerId">The worker id for the retail worker of the seller channel.</param>
    /// <returns>The RecId of the new <c>Hcmworker</c>.</returns>
    internal static HcmWorkerRecId createWorkerForParty(
        DirPartyRecId _partyRecId,
        DirAddressBookRecId _addressBookRecId,
        DataAreaId _dataAreaId,
        HcmPersonnelNumberId _retailWorkerId)
    {
        DirPerson person = DirPartyTable::findRec(_partyRecId, false, DirPartyType::Person);
        if (!person)
        {
            throw error('@Retail:CreateHcmworkerForNonExistentDirPersonError');
        }

        HcmWorker existingWorker = HcmWorker::findByPerson(_partyRecId);
        if (existingWorker)
        {
            return existingWorker.RecId;
        }

        ttsbegin;

        DirPersonName workerPersonName = DirPersonName::find(_partyRecId);
        if (!workerPersonName)
        {
            str firstName, middleName, lastName;
            [firstName, middleName, lastName] = DirPerson::splitNameParts(DirPartyTable::findRec(_partyRecId).Name);
            workerPersonName.FirstName = firstName;
            workerPersonName.MiddleName = middleName;
            workerPersonName.LastName = lastName;
            workerPersonName.Person = _partyRecId;
            workerPersonName.insert();
        }

        HcmCreateWorkerContract newRetailWorkerContract = HcmCreateWorkerContract::construct();

        newRetailWorkerContract.parmDirPersonName(workerPersonName);
        newRetailWorkerContract.parmEmploymentType(HcmEmploymentType::Contractor);
        newRetailWorkerContract.parmEmploymentValidFrom(DateTimeUtil::utcNow());
        newRetailWorkerContract.parmLegalEntityRecId(CompanyInfo::findDataArea(_dataAreaId).RecId);
        HcmPersonnelNumberId workerPersonnelNumber = _retailWorkerId;

        newRetailWorkerContract.parmPersonnelNumber(workerPersonnelNumber);
        HcmWorkerRecId newRetailWorkerRecId = HcmWorkerTransition::newCreateHcmWorkerV2(newRetailWorkerContract);

        if (_addressBookRecId != 0)
        {
            RetailOnlineChannelProvisionHelper::addPartyToAddressBook(_partyRecId, _addressBookRecId);
        }

        ttscommit;

        return newRetailWorkerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetailStaffForHcmWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create retail staff for hcm worker.
    /// </summary>
    /// <param name = "_hcmWorkerRecId">The HcmWorker RecId.</param>
    /// <returns>The created retail staff or the existing one for the worker.</returns>
    internal static RefRecId createRetailStaffForHcmWorker(HcmWorkerRecId _hcmWorkerRecId)
    {
        RetailStaffTable retailStaffTable;
        HcmWorker hcmWorker;

        select firstonly RecId from retailStaffTable
            join RecId from hcmWorker
                where hcmWorker.RecId == _hcmWorkerRecId &&
                    hcmWorker.PersonnelNumber == retailStaffTable.staffId;

        if (retailStaffTable)
        {
            return retailStaffTable.RecId;
        }

        hcmWorker = HcmWorker::find(_hcmWorkerRecId);

        if (!hcmWorker)
        {
            throw error('@Retail:CreateRetailStaffTableForNonExistentHcmWorkerError');
        }

        retailStaffTable.clear();
        retailStaffTable.initValue();
        retailStaffTable.staffId = hcmWorker.PersonnelNumber;
        retailStaffTable.insert();

        return retailStaffTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailStaffExternalIdByCustomerExternalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update external Id and external sub Id of the person's <c>RetailStaffTable</c> using its values in the <c>RetailExternalIdToCustomerMap</c>.
    /// </summary>
    /// <param name = "_personRecId">The person's <c>DirPerson</c>.RecId.</param>
    internal static void updateRetailStaffExternalIdByCustomerExternalId(DirPersonRecId _personRecId)
    {
        HcmWorker hcmWorker = HcmWorker::findByPerson(_personRecId);
        CustTable custTable = CustTable::findByPartyRecId(_personRecId);

        RetailExternalIdToCustomerMap retailExternalIdToCustomerMap;
        RetailIdentityProvider provider;

        select retailExternalIdToCustomerMap
            where retailExternalIdToCustomerMap.CustomerAccountNumber == custTable.AccountNum &&
                retailExternalIdToCustomerMap.DataAreaId == custTable.DataAreaId
            join provider
                where provider.RecId == retailExternalIdToCustomerMap.ProviderId;

        if (!retailExternalIdToCustomerMap)
        {
            return;
        }

        ttsbegin;

        RetailStaffTable staff = RetailStaffTable::find(hcmWorker.PersonnelNumber, true);

        staff.ExternalIdentityId = '';
        staff.ExternalIdentitySubId = retailExternalIdToCustomerMap.ExternalIdentityId;

        staff.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>provisionRetailChannelAttributeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provision channel attribute groups for the destination channel.
    /// </summary>
    /// <param name = "_sourceOnlineChannel">The channel id of the source channel providing the attribute groups.</param>
    /// <param name = "_destOnlineChannel">The channel id of the destination channel where the channel attribute groups will be added.</param>
    internal static void provisionRetailChannelAttributeGroup(RetailChannelRecId _sourceOnlineChannel, RetailChannelRecId _destOnlineChannel)
    {
        RetailChannelAttributeGroup sourceRetailChannelAttributeGroup, destRetailChannelAttributeGroup;

        ttsbegin;

        while select sourceRetailChannelAttributeGroup
            where sourceRetailChannelAttributeGroup.Channel == _sourceOnlineChannel
        {
            destRetailChannelAttributeGroup.clear();
            destRetailChannelAttributeGroup.data(sourceRetailChannelAttributeGroup);
            destRetailChannelAttributeGroup.RecId = 0;
            destRetailChannelAttributeGroup.Channel = _destOnlineChannel;

            destRetailChannelAttributeGroup.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>provisionRetailStoreLocatorGroupOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provision fulfillment groups for the destination channel.
    /// </summary>
    /// <param name = "_sourceOnlineChannel">The channel id of the source channel providing the fulfillment groups.</param>
    /// <param name = "_destOnlineChannel">The channel id of the destination channel where the fulfillment groups will be added.</param>
    internal static void provisionRetailStoreLocatorGroupOwner(RetailChannelRecId _sourceOnlineChannel, RetailChannelRecId _destOnlineChannel)
    {
        RetailStoreLocatorGroupOwner sourceRetailStoreLocatorGroupOwner, destRetailStoreLocatorGroupOwner;

        ttsbegin;

        while select sourceRetailStoreLocatorGroupOwner
            where sourceRetailStoreLocatorGroupOwner.Channel == _sourceOnlineChannel
        {
            destRetailStoreLocatorGroupOwner.clear();
            destRetailStoreLocatorGroupOwner.data(sourceRetailStoreLocatorGroupOwner);
            destRetailStoreLocatorGroupOwner.RecId = 0;
            destRetailStoreLocatorGroupOwner.Channel = _destOnlineChannel;

            destRetailStoreLocatorGroupOwner.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>provisionRetailCDXDataStoreChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provision channel database for the destionation channel.
    /// </summary>
    /// <param name = "_sourceOnlineChannel">The channel id of the source channel providing the channel database.</param>
    /// <param name = "_destOnlineChannel">The channel id of the destination channel where the channel database will be added.</param>
    internal static void provisionRetailCDXDataStoreChannel(RetailChannelRecId _sourceOnlineChannel, RetailChannelRecId _destOnlineChannel)
    {
        RetailCDXDataStoreChannel sourceRetailCDXDataStoreChannel, destRetailCDXDataStoreChannel;

        ttsbegin;

        while select sourceRetailCDXDataStoreChannel
            where sourceRetailCDXDataStoreChannel.Channel == _sourceOnlineChannel
        {
            destRetailCDXDataStoreChannel.clear();
            destRetailCDXDataStoreChannel.data(sourceRetailCDXDataStoreChannel);
            destRetailCDXDataStoreChannel.RecId = 0;
            destRetailCDXDataStoreChannel.Channel = _destOnlineChannel;

            destRetailCDXDataStoreChannel.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>