<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_Netting</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalEngine_Netting</c> class supports netting journals.
/// </summary>
/// <remarks>
/// This class is an extension of the <c>LedgerJournalEngine</c> class.
/// </remarks>
public final class LedgerJournalEngine_Netting extends LedgerJournalEngine_Payment
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>synchronizeLinkedLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the linked fields of the customer journal line to match
    /// the paired vendor journal line.
    /// </summary>
    /// <param name = "_custLedgerJournalTrans">The customer journal line to be updated.</param>
    /// <param name = "_vendLedgerJournalTrans">The vendor journal line that was updated.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void synchronizeLinkedLedgerJournalTrans(
        LedgerJournalTrans _custLedgerJournalTrans,
        LedgerJournalTrans _vendLedgerJournalTrans)
    {
        _custLedgerJournalTrans.amountCur2DebCred(-_vendLedgerJournalTrans.amount());
        _custLedgerJournalTrans.OffsetLedgerDimension = _vendLedgerJournalTrans.OffsetLedgerDimension;
        _custLedgerJournalTrans.ExchRate = _vendLedgerJournalTrans.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSegmentChangedForOffsetAccount</Name>
				<Source><![CDATA[
    public RecId onSegmentChangedForOffsetAccount(
        SegmentedEntryControl _offsetSegmentedEntryControl,
        DimensionControlSegment _dimensionControlSegment,
        MainAccountRecId _currentMainAccountId,
        LedgerJournalTrans _ledgerJournalTrans)
    {
        MainAccountRecId updatedMainAccountId = _currentMainAccountId;

        // Note: everything in this method is done in the context of the offset company
        changecompany(_offsetSegmentedEntryControl.parmDataAreaId())
        {
            if (_dimensionControlSegment.parmDimensionAttribute().RecId == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount))
            {
                MainAccountRecId mainAccountId = _dimensionControlSegment.parmDimensionAttributeValue().EntityInstance;

                if ((mainAccountId != 0) && (_currentMainAccountId != mainAccountId))
                {
                    updatedMainAccountId = mainAccountId;

                    Map dimensionSpecifiers = this.findMainAccountDimensionValues(mainAccountId);

                    if (dimensionSpecifiers)
                    {
                        _offsetSegmentedEntryControl.setDimensionSpecifiers(dimensionSpecifiers, false);
                    }
                }
                else if (mainAccountId == 0)
                {
                    updatedMainAccountId = 0;
                }
            }
        }

        return updatedMainAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMainAccountDimensionValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the dimension values that are associated to the main account.
    /// </summary>
    /// <param name="_mainAccountId">
    /// The ID of the main account.
    /// </param>
    /// <returns>
    /// A map that contains a dimension specifier for each dimension attribute present in the value set.
    /// </returns>
    private Map findMainAccountDimensionValues(RecId _mainAccountId)
    {
        Map dimensionSpecifiers = null;

        MainAccountLegalEntity mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(_mainAccountId, CompanyInfo::current());

        if (mainAccountLegalEntity.DefaultDimension)
        {
            dimensionSpecifiers = LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(mainAccountLegalEntity.DefaultDimension);
        }

        return dimensionSpecifiers;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>