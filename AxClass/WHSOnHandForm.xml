<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOnHandForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSOnHandForm</c> class contains the business logic of the <c>WHSOnHand</c> form.
/// </summary>
public class WHSOnHandForm
{
    WHSWorkTable        workTable;
    InventSiteId        inventSiteId;
    InventLocationId    inventLocationId;
    str                 wmsLocationIdFilter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>btnQuarantine_clicked</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates quarantine work for selected record, updates the status of the items as damaged/available chosen by user.
	/// </summary>
	/// <param name="_inventSumBottom">
	/// Record containing item info and physical quantity of the item.
	/// </param>
	/// <param name="_inventDimBottom">
	/// Record containing item dimensions.
	/// </param>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when no record is selected to quarantine.
	/// </exception>
    public void btnQuarantine_clicked(
        InventSum   _inventSumBottom,
        InventDim   _inventDimBottom)
    {
        WHSUserId       userId = WHSParameters::find().GenericWorkUserId;

        if (!userId)
        {
            throw error("@WAX2758");
        }

        boolean isCWItem = PdsGlobal::pdsIsCWItem(_inventSumBottom.ItemId);

        this.validateInventoryStatusChangedAllowed(_inventSumBottom, _inventDimBottom, isCWItem);

        Dialog dialog = this.initInventoryStatusChangeDialog();

        DialogField dfStatus = dialog.addField(extendedTypeStr(WHSInventStatusId));

        if (dialog.run())
        {
            WhsWorkExecute workExecute = WhsWorkExecute::construct();

            this.createOrUpdateQuarantineWork(_inventSumBottom,
                                              _inventDimBottom,
                                              dfStatus.value(),
                                              workExecute,
                                              userId,
                                              isCWItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateQuarantineWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update quarantine work.
    /// </summary>
    /// <param name = "_inventSumBottom">Record containing item info and physical quantity of the item.</param>
    /// <param name = "_inventDimBottom">Record containing item dimensions.</param>
    /// <param name = "_toStatus">Targer status.</param>
    /// <param name = "_workExecute">Work execute class.</param>
    /// <param name = "_userId">Work user id.</param>
    /// <param name = "_isCWItem">Is item catche weight item.</param>
    private void createOrUpdateQuarantineWork(InventSum         _inventSumBottom,
                                              InventDim         _inventDimBottom,
                                              WhsInventStatusId _toStatus,
                                              WhsWorkExecute    _workExecute,
                                              WHSUserId         _userId,
                                              boolean           _isCWItem)
    {
        InventDim inventDimNew;

        //create a copy of the inventDim that was passed in but with the new status set
        inventDimNew.initFromInventDim(_inventDimBottom);
        inventDimNew.InventStatusId = _toStatus;
        inventDimNew = InventDim::findOrCreate(inventDimNew);

        _workExecute.createOrUpdateQuarantineWork(_userId,
                                             inventDimNew,
                                             _inventDimBottom.InventStatusId,
                                             _inventSumBottom.ItemId,
                                             _isCWItem ? _inventSumBottom.PdsCWPhysicalInvent : _inventSumBottom.PhysicalInvent,
                                             WHSCatchWeightHelper::inventHandlingUnitId(_inventSumBottom.ItemId),
                                             false,
                                             true,
                                             '', 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventoryStatusChangedAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if inventory status change is allowed.
    /// </summary>
    /// <param name = "_inventSumBottom">Record containing item info and physical quantity of the item.</param>
    /// <param name = "_inventDimBottom">Record containing item dimensions.</param>
    /// <param name = "_isCWItem">Is item catche weight item.</param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown when no record is selected to quarantine.
    /// </exception>
    protected void validateInventoryStatusChangedAllowed(InventSum   _inventSumBottom,
                                                       InventDim   _inventDimBottom,
                                                       boolean     _isCWItem )
    {
        if (_inventDimBottom.InventDimId == '')
        {
            throw error("@WAX2216");
        }

        if (_isCWItem)
        {
            WHSInventTable::ensureInventoryStatusChangedAllowedForItem(_inventSumBottom.ItemId, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventoryStatusChangeDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize inventory status change dialog.
    /// </summary>
    /// <returns>Inventory status change dialog.</returns>
    private Dialog initInventoryStatusChangeDialog()
    {
        Dialog dialog = new Dialog();
        dialog.caption("@WAX:InventoryStatusChange");
        dialog.windowType(FormWindowType::PopUp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimSiteWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build an inventDim based on the bottom inventDim that includes site and warehouse.
    /// </summary>
    /// <param name = "_inventDim">Inventory dimensions.</param>
    /// <returns>Inventory dimensions.</returns>
    private InventDim initInventDimSiteWarehouse(InventDim _inventDim)
    {
        _inventDim.InventLocationId = this.parmInventLocationId();
        _inventDim.initFromInventLocation(_inventDim.inventLocation());
        _inventDim.initFromInventDim(_inventDim);

        return InventDim::findOrCreate(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>btnQuarantineMultiSelect_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates quarantine work for selected records, updates the status of the items as damaged/available chosen by user.
    /// </summary>
    /// <param name="_inventSumBottomHelper">
    /// Multi select helper for the records containing item info and physical quantity of the item.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown when no record is selected to quarantine.
    /// </exception>
    [Hookable(false)]
    internal void btnQuarantineMultiSelect_clicked(MultiSelectionHelper _inventSumBottomHelper)
    {
        WHSUserId userId = WHSParameters::find().GenericWorkUserId;

        if (!userId)
        {
            throw error("@WAX2758");
        }
        
        Dialog dialog = this.initInventoryStatusChangeDialog();
        DialogField dfStatus = dialog.addField(extendedTypeStr(WHSInventStatusId));

        if (dialog.run())
        {
            WhsWorkExecute workExecute = WhsWorkExecuteQuarantineByInventDim::construct();

            InventSum inventSumBottom = _inventSumBottomHelper.getFirst();

            while (inventSumBottom)
            {
                InventDim  inventDimBottom = inventSumBottom.joinChild();

                inventDimBottom = this.initInventDimSiteWarehouse(inventDimBottom);

                boolean isCWItem = PdsGlobal::pdsIsCWItem(inventSumBottom.ItemId);

                this.validateInventoryStatusChangedAllowed(inventSumBottom, inventDimBottom, isCWItem);

                this.createOrUpdateQuarantineWork(inventSumBottom,
                                                  inventDimBottom,
                                                  dfStatus.value(),
                                                  workExecute,
                                                  userId,
                                                  isCWItem);

                inventSumBottom = _inventSumBottomHelper.getNext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterWorkTable</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds locations used in work.
	/// </summary>
	/// <param name="_whsWorkTable">
	/// Work record.
	/// </param>
	/// <returns>
	/// Container containing locations, warehouse and site id.
	/// </returns>
    public container filterWorkTable(WHSWorkTable _whsWorkTable)
    {
        WHSWorkLine workLine;
        str         wmsLocationIdFilterAdd;

        while select  WMSLocationId from workLine
            group by WMSLocationId
            where workLine.WorkId         == _whsWorkTable.WorkId
                && workLine.WMSLocationId != ''
        {
            if (wmsLocationIdFilterAdd)
            {
                wmsLocationIdFilterAdd += ',';
            }

            wmsLocationIdFilterAdd += workLine.WMSLocationId;
        }

        this.parmWMSLocationIdFilter(wmsLocationIdFilterAdd);
        this.parmInventSiteId(_whsWorkTable.InventSiteId);
        this.parmInventLocationId(_whsWorkTable.InventLocationId);

        return [wmsLocationIdFilter, inventSiteId, inventLocationId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;

        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSLocationIdFilter</Name>
				<Source><![CDATA[
    public str parmWMSLocationIdFilter(str _wmsLocationIdFilter = wmsLocationIdFilter)
    {
        wmsLocationIdFilter = _wmsLocationIdFilter;

        return wmsLocationIdFilter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>