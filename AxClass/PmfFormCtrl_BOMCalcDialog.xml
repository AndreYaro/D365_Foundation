<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMCalcDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Process form control class for BOMCalcDialog.
/// </summary>
public class PmfFormCtrl_BOMCalcDialog
    extends PmfFormCtrl
{
    boolean calledFromFormula;
    BOMCalcJob bomCalcJob;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isFormulaEnabled())
        {
            this.parmFormRun().design().caption("@PRO2118");
            this.parmFormRun().design().titleDatasource('');
        }

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        if (this.isCatchWeightEnabled())
        {
            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(BOMCalcDialog, General)),
                    formRun.design().controlName(formControlStr(BOMCalcDialog, PdsCWQty)),
                    methodStr(PmfFormCtrl_BOMCalcDialog, isPdsCWQtyVisible),
                    ButtonRuleEffectType::Visible);
        }

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMCalcDialog,General)),
                formRun.design().controlName(formControlStr(BOMCalcDialog,PmfFormulaId)),
                methodStr(PmfFormCtrl_BOMCalcDialog, isPmfFormulaIdVisible),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMCalcDialog,General)),
                formRun.design().controlName(formControlStr(BOMCalcDialog,BOMId)),
                methodStr(PmfFormCtrl_BOMCalcDialog, isBOMIdVisible),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMCalcDialog,ItemIdGrp)),
                formRun.design().controlName(formControlStr(BOMCalcDialog,PmfFormulaIdShow)),
                methodStr(PmfFormCtrl_BOMCalcDialog, isPmfFormulaIdShowVisible),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMCalcDialog,ItemIdGrp)),
                formRun.design().controlName(formControlStr(BOMCalcDialog,PmfFormulaIdShow)),
                methodStr(PmfFormCtrl_BOMCalcDialog, isPmfFormulaIdShowEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMCalcDialog,General)),
                formRun.design().controlName(formControlStr(BOMCalcDialog,PmfFormulaId)),
                methodStr(PmfFormCtrl_BOMCalcDialog, isVersionFieldsEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMCalcDialog,General)),
                formRun.design().controlName(formControlStr(BOMCalcDialog,PmfFormulaId)),
                methodStr(PmfFormCtrl_BOMCalcDialog, isVersionFieldsEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMCalcDialog,InventoryDimensions)),
                formRun.design().controlName(formControlStr(BOMCalcDialog,Inventorydimensions_InventSiteId)),
                methodStr(PmfFormCtrl_BOMCalcDialog, isVersionSiteIdEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMCalcDialog,General)),
                formRun.design().controlName(formControlStr(BOMCalcDialog,itemQty)),
                methodStr(PmfFormCtrl_BOMCalcDialog, isVersionFieldsEnabled),
                ButtonRuleEffectType::Enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches some form features prior to standard form initialization.
    /// </summary>
    public void initPre()
    {
        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        calledFromFormula = #PmfEnabled
            && ((!bomCalcJob.showItem())
                || (bomCalcJob.showItem()
                    && InventTable::find(bomCalcJob.parmItemId()).isFormulaAllowed()));

        this.setDefaultBatchSize();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOMIdVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to determine if the standard Production BOM Id should be visible.
    /// </summary>
    /// <returns>Yes if the field is visible.</returns>
    public NoYes isBOMIdVisible()
    {
        return bomCalcJob.showItem()
            && isConfigurationkeyEnabled(configurationKeyNum(BOMVersion))
            && !this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to determine if the form is operating with a Formula.
    /// </summary>
    /// <returns>Yes if the form is operating with a Formula; No otherwise.</returns>
    public NoYes isFormulaEnabled()
    {
        return #PmfEnabled && calledFromFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPdsCWQtyVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to determine if the Catch Weight quantity field should be shown.
    /// </summary>
    /// <returns>Yes if the field should be shown.</returns>
    public NoYes isPdsCWQtyVisible()
    {
        return bomCalcJob.showItem() && PdsGlobal::pdsIsCWItem(bomCalcJob.parmItemId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPmfFormulaIdShowEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to determine if the Formula item id field should be enabled.
    /// </summary>
    /// <returns>Yes if the field should be enabled.</returns>
    public NoYes isPmfFormulaIdShowEnabled()
    {
        return bomCalcJob.showSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPmfFormulaIdShowVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to determine if the Formula Item id field should be shown.
    /// </summary>
    /// <returns>Yes if the field should be shown.</returns>
    public NoYes isPmfFormulaIdShowVisible()
    {
        return (bomCalcJob.showSales()
                && isConfigurationkeyEnabled(configurationKeyNum(BOMVersion)))
            || !formRun.design().controlName(formControlStr(BOMCalcDialog,ItemIdShow)).visible();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPmfFormulaIdVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to determine if the Formula id field should be shown.
    /// </summary>
    /// <returns>Yes if the field should be shown.</returns>
    public NoYes isPmfFormulaIdVisible()
    {
        return bomCalcJob.showItem()
            && isConfigurationkeyEnabled(configurationKeyNum(BOMVersion))
            && this.isFormulaEnabled()
            && !bomCalcJob.showSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVersionFieldsEnabled</Name>
				<Source><![CDATA[
    public boolean isVersionFieldsEnabled()
    {
        // If the BOMVersion has been supplied as a parameter to the job then it should not be allowed to edit the
        // fields that can be derived from the version
        return !bomCalcJob.parmPmfBOMVersion().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVersionSiteIdEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the site id control should be enabled.
    /// </summary>
    /// <returns>
    /// true if the site id control should be enabled.
    /// </returns>
    /// <remarks>
    /// If the BOM version has been supplied as a parameter to the job then it should not be allowed to edit the
    /// fields that can be derived from the version, except if the BOM version does not have a site.
    /// </remarks>
    public boolean isVersionSiteIdEnabled()
    {
        BOMVersion bomVersion = bomCalcJob.parmPmfBOMVersion();

        return !bomVersion.RecId || !bomVersion.inventDim().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomCalcJob</Name>
				<Source><![CDATA[
    public BOMCalcJob parmBomCalcJob(
        BOMCalcJob _bomCalcJob = bomCalcJob)
    {
        if (!prmisDefault(_bomCalcJob))
        {
            bomCalcJob = _bomCalcJob;
        }

        return bomCalcJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomIdPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event method that executes after the BOM Id has changed.
    /// </summary>
    public void parmBomIdPost()
    {
        BOMVersion bomVersion;
        FromQty    fromQty;

        if (BOM::isPmfFormula(bomCalcJob.parmBOMId()))
        {
            if (bomCalcJob.showSales())
            {
                fromQty = bomCalcJob.parmSalesQty();
            }
            else
            {
                fromQty = bomCalcJob.parmItemQty();
            }

            bomVersion =
                BOMVersion::findActive(
                    bomCalcJob.parmItemId(),
                    bomCalcJob.parmCalcDate(),
                    fromQty,
                    InventDim::find(bomCalcJob.parmInventDimId()));

            if (bomVersion)
            {
                bomCalcJob.parmItemQty(bomVersion.PmfBatchSize);
                bomCalcJob.parmPmfYieldPct(bomVersion.PmfYieldPct);
                formRun.design().controlName(formControlStr(BOMCalcDialog,itemQty)).update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsHtmlHelp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override help topic for this dialog when processing a formula.
    /// </summary>
    /// <returns>Container with the help file and topic when calculating a formula; otherwise an empty container.</returns>
    /// <remarks>
    /// See global function pdsShowCustomHelp for additional information.
    /// </remarks>
    public container pdsHtmlHelp()
    {
        #PmfHelp

        container   helpData = conNull();

        if (this.isFormulaEnabled())
        {
            helpData = [#PmfHelpFile, #PmfBOMCalcDialogHelp];
        }

        return helpData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultBatchSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the default item quantity in the calculation job to the batch size for a formula item.
    /// </summary>
    public void setDefaultBatchSize()
    {
        BOMVersion      bomVersion;

        // this calculation should only happen when the calculation dialog is invoked from Item / BOM designer
        // when you are in the sales scenario (sales order/quotation) the item quantities are already defaulted
        if (this.isFormulaEnabled() &&
            !bomCalcJob.showSales() &&
            bomCalcJob.parmItemId() &&
            bomCalcJob.parmBOMId() )
        {
            bomVersion = BOMVersion::find(bomCalcJob.parmItemId(),
                bomCalcJob.parmBOMId(), true,
                bomCalcJob.parmCalcDate(), bomCalcJob.parmCalcDate(), bomCalcJob.parmItemQty());

            if (!bomVersion)
            {
                bomVersion = BOMVersion::find(bomCalcJob.parmItemId(),
                    bomCalcJob.parmBOMId(), true,
                    bomCalcJob.parmCalcDate(), bomCalcJob.parmCalcDate(), maxint());
            }

            if (bomVersion.RecId)
            {
                bomCalcJob.parmItemQty(max(bomCalcJob.parmItemQty(), max(1, bomVersion.PmfBatchSize)));
                bomCalcJob.parmCWQty(PdsCatchWeight::cwQty(bomCalcJob.parmItemId(), bomCalcJob.parmItemQty()));

                bomCalcJob.parmPmfYieldPct(bomVersion.PmfYieldPct);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMCalcDialog construct()
    {
        return new PmfFormCtrl_BOMCalcDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of this form control using a given form and calculation job reference.
    /// </summary>
    /// <param name="_fr">FormRun object reference of the form.</param>
    /// <param name="_bomCalcJob">BOMCalcJob object reference which activated the calculation job dialog.</param>
    /// <returns>New instance of the form control for the calculation dialog.</returns>
    public static PmfFormCtrl_BOMCalcDialog newFromForm(
        FormRun _fr, BOMCalcJob _bomCalcJob)
    {
        PmfFormCtrl_BOMCalcDialog frmCtrl;

        frmCtrl = PmfFormCtrl_BOMCalcDialog::construct();
        frmCtrl.parmFormRun(_fr);
        frmCtrl.parmBomCalcJob(_bomCalcJob);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>