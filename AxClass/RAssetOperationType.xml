<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetOperationType</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetOperationType
{
    Common           common;
    RAssetTable      rAssetTable;
    RAssetStatusType rAssetStatusType;
    RAssetTransDate  transDate;
    RAssetStandardId rAssetStandardId;
    RAssetStandards  rAssetStandards;
    RAssetSumCalc    rAssetSumCalc;
    boolean          isCorrection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBePosted</Name>
				<Source><![CDATA[
    protected boolean canBePosted()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean      ret;
        ;
        ret = this.checkPostStandard();
        ret = ret && (isCorrection || LedgerFiscalCalendar::checkLedgerPeriodDateModule(CompanyInfoHelper::fiscalCalendarRecId(), transDate, SysModule::FixedAssets_RU));
        ret = ret && this.checkAcquisitionDate();
        ret = ret && this.checkInventory();
        ret = ret && this.checkLastDepDate();
        if (ret)
        {
            if (! this.canBePosted())
            {
                ret = checkFailed(strFmt("@GLS116701",rAssetTable.AccountNum,rAssetStandardId,rAssetStatusType.rAssetStatus(),this.rAssetTransType()));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAcquisitionDate</Name>
				<Source><![CDATA[
    protected boolean checkAcquisitionDate()
    {
        if (rAssetTable.AcquisitionDate > transDate)
        {
            return checkFailed(strFmt("@GLS116467", rAssetTable.AccountNum,rAssetStandardId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeprPeriod</Name>
				<Source><![CDATA[
    protected boolean checkDeprPeriod(boolean   _checkPrevPeriod = false)
    {
        return rAssetStandards.checkDeprPeriod(transDate, _checkPrevPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventory</Name>
				<Source><![CDATA[
    protected boolean checkInventory()
    {
        return ! RAssetInventoryTable::checkInventory(rAssetTable,transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLastDepDate</Name>
				<Source><![CDATA[
    protected boolean checkLastDepDate()
    {
        if (transDate < dateStartMth(rAssetStandards.LastDepDate))
        {
            return checkFailed(strFmt("@GLS116507", rAssetTable.AccountNum,rAssetStandardId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLastOperationDate</Name>
				<Source><![CDATA[
    protected boolean checkLastOperationDate(boolean _includeStorno = true)
    {
        ;
    
        if (RAssetTrans::transLastDate(rAssetTable.AccountNum,rAssetStandards.AssetStandardId, _includeStorno) > transDate)
        {
            return checkFailed(strFmt("@GLS116499", rAssetTable.AccountNum,rAssetStandardId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNetBookValue</Name>
				<Source><![CDATA[
    protected boolean checkNetBookValue()
    {
        CurrencyCode       currencyCode;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset;
        AmountCur          assetAmount;
        ;
    
        if (common.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = common;
            ledgerJournalTrans_RAsset = LedgerJournalTrans_RAsset::find(ledgerJournalTrans.RecId);
    
            if ((select RecId from rAssetAdjustmentTable
                    where rAssetAdjustmentTable.LedgerJournalNum == ledgerJournalTrans.JournalNum).RecId != 0)
                return true;
    
            currencyCode       = rAssetStandards.CurrencyCode;
            if (ledgerJournalTrans.CurrencyCode == currencyCode)
            {
                assetAmount = ledgerJournalTrans.amount();
            }
            else
            {
                assetAmount = CurrencyExchangeHelper::curAmount2CurAmount(ledgerJournalTrans.amount(), ledgerJournalTrans.CurrencyCode, currencyCode, ledgerJournalTrans_RAsset.getTransDate(ledgerJournalTrans));
            }
            rAssetSumCalc = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum, rAssetStandardId);
    
            if (rAssetSumCalc.netBookValue() + assetAmount < 0 )
            {
                return checkFailed(strFmt("@GLS116209", rAssetTable.AccountNum, rAssetStandardId));
            }
    
            rAssetSumCalc.parmDateTo(ledgerJournalTrans_RAsset.getTransDate(ledgerJournalTrans));
            if (rAssetSumCalc.netBookValue() + assetAmount < 0 )
            {
                return checkFailed(strFmt("@GLS116209", rAssetTable.AccountNum, rAssetStandardId));
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostStandard</Name>
				<Source><![CDATA[
    private boolean checkPostStandard()
    {
        ;
        rAssetStandards = RAssetStandards::find(rAssetTable.AccountNum, rAssetStandardId);
        if (! rAssetStandards)
        {
            return checkFailed(strFmt("@GLS116700",rAssetTable.AccountNum,rAssetStandardId));
        }
        if (! rAssetStandards.Depreciation)
        {
            return checkFailed(strFmt("@GLS116208", rAssetTable.AccountNum,rAssetStandardId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCheck</Name>
				<Source><![CDATA[
    public boolean needCheck(RAssetRelationRecId _assetToFromRecId_RU)
    {
        return ! _assetToFromRecId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common           _common,
                       TransDate        _transDate,
                       RAssetStandardId _rAssetStandardId)
    {
        LedgerJournalTrans ledgerJournalTrans;

        common           = _common;
        transDate        = _transDate;
        rAssetStandardId = _rAssetStandardId;

        switch (common.TableId)
        {
            case tableNum(CustInvoiceLine):
                rAssetTable = RAssetTable::find(common.(fieldNum(CustInvoiceLine, AssetId_RU)));
                break;
            case tableNum(SalesLine):
                rAssetTable = RAssetTable::find(common.(fieldNum(SalesLine, AssetId_RU)));
                break;
            case tableNum(LedgerJournalTrans):
                rAssetTable = RAssetTable::find(common.parmAccount());
                ledgerJournalTrans = _common;
                isCorrection = ledgerJournalTrans.TransDate != transDate;
                break;
            case tableNum(RAssetTransferTrans):
                rAssetTable = RAssetTable::find(common.(fieldNum(RAssetTransferTrans, AccountNum)));
                break;
            default:
                throw error(strFmt("@SYS23455",funcName()));
        }
        rAssetStatusType = RAssetStatusType::construct(common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetTransType</Name>
				<Source><![CDATA[
    protected RAssetTransType rAssetTransType()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public server static RAssetOperationType construct(RAssetTransType  _rAssetTransType,
                                                       Common           _common,
                                                       TransDate        _transDate,
                                                       RAssetStandardId _rAssetStandardId)
    {
        CustInvoiceLine    custInvoiceLine;
        SalesLine          salesLine;
        LedgerJournalTrans ledgerJournalTrans;
    
        switch (_rAssetTransType)
        {
            case RAssetTransType::Acquisition:
                return new RAssetOperationType_Acquisition(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::AcquisitionAdj:
                return new RAssetOperationType_AcquisitionAdj(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::CompanyIssue:
                return new RAssetOperationType_CompanyIssue(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::CompanyReceipt:
                return new RAssetOperationType_CompanyReceipt(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::Depreciation:
                ledgerJournalTrans = _common;
                if (LedgerJournalTrans_RAsset::find(ledgerJournalTrans.RecId).ToFromRecId)
                    return new RAssetOperationType_DeprStorno(_common,_transDate,_rAssetStandardId);
                else
                    return new RAssetOperationType_Depreciation(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::DepreciationAdj:
                return new RAssetOperationType_DepreciationAdj(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::Disposal:
                return new RAssetOperationType_Disposal(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::DisposalSale:
                switch (_common.TableId)
                {
                    case tableNum(CustInvoiceLine):
                        custInvoiceLine = _common;
                        break;
                    case tableNum(SalesLine):
                        salesLine = _common;
                        break;
                }
                if ((custInvoiceLine.RecId && custInvoiceLine.AmountCur < 0) ||
                    (salesLine.RecId && salesLine.creditNoteLine()))
                {
                    return new RAssetOperationType_DisposalSaleReverse(_common, _transDate, _rAssetStandardId);
                }
                else
                {
                    return new RAssetOperationType_DisposalSale(_common, _transDate, _rAssetStandardId);
                }
            case RAssetTransType::DisposalScrap:
                return new RAssetOperationType_DisposalScrap(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::PartialTakeDown:
                return new RAssetOperationType_PartialTakeDown(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::Lending:
                return new RAssetOperationType_Lending(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::LendingRet:
                return new RAssetOperationType_LendingRet(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::Other:
                return new RAssetOperationType_Other(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::Revaluation:
                return new RAssetOperationType_Revaluation(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::WriteDownAdj:
                return new RAssetOperationType_WriteDownAdj(_common,_transDate,_rAssetStandardId);
            case RAssetTransType::WriteUpAdj:
                return new RAssetOperationType_WriteDownAdj(_common,_transDate,_rAssetStandardId);
        }
        return new RAssetOperationType(_common,_transDate,_rAssetStandardId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
