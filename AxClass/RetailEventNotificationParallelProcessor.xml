<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEventNotificationParallelProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The event notification parallel processor.
/// </summary>
/// <remarks>
/// Runs the class in batch.
/// </remarks>
public class RetailEventNotificationParallelProcessor extends RunBaseBatch implements BatchRetryable
{
    public static str EmailParallelizationMaxNumberOfWorkersKey = "EmailParallelizationMaxNumberOfWorkers";
    public static str EmailParallelizationBatchSizeKey = "EmailParallelizationBatchSize";
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    private BatchHeader batchHeader;
    private int numberOfWorkersScheduled = 0;
    #define.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the batches to handle unprocessed event notifications in parallel mode.
    /// </summary>
    public void run()
    {
        eventSource.EventWriteEmailNotificationProcessorAsyncRun(this.parmCurrentBatch().BatchJobId, this.parmCurrentBatch().RecId);
        RetailEventNotificationAction retailEventNotificationAction;
        RetailEventNotificationAction retailEventNotificationActionCount;
        int maxNumberOfWorkersDefaultValue = 100, batchSizeDefaultValue = 100;
        int maxNumberOfWorkers = this.getSharedParameterByKey(EmailParallelizationMaxNumberOfWorkersKey, maxNumberOfWorkersDefaultValue);
        eventSource.EventWriteEmailNotificationMaxNumberOfWorkers(this.parmCurrentBatch().BatchJobId, this.parmCurrentBatch().RecId, maxNumberOfWorkers);

        int batchSize = this.getSharedParameterByKey(EmailParallelizationBatchSizeKey, batchSizeDefaultValue);
        eventSource.EventWriteEmailNotificationBatchSize(this.parmCurrentBatch().BatchJobId, this.parmCurrentBatch().RecId, batchSize);

        Array work = new Array(Types::Int64);
        int   currentBatchSize, currentNumberOfWorkers = 0;

        select count(RecId) from retailEventNotificationActionCount
            where retailEventNotificationAction.Processed == NoYes::No;
        int64 totalCount = retailEventNotificationActionCount.RecId;

        eventSource.EventWriteEmailNotificationActionsTotalCount(this.parmCurrentBatch().BatchJobId, this.parmCurrentBatch().RecId, totalCount);

        while select RecId from retailEventNotificationAction
            where retailEventNotificationAction.Processed == NoYes::No
        {
            currentBatchSize++;
            work.value(currentBatchSize, retailEventNotificationAction.RecId);

            if (currentBatchSize >= batchSize)
            {
                this.createWorker(work);

                // Reset buffer
                currentBatchSize = 0;
                work = new Array(Types::Int64);
            
                if (this.numberOfWorkersScheduled >= maxNumberOfWorkers)
                {
                    break;
                }
            }
        }

        // process the remainder of the notifications
        if (currentBatchSize > 0)
        {
            this.createWorker(work);
        }

        eventSource.EventWriteEmailNotificationAllWorksScheduled(this.parmCurrentBatch().BatchJobId, this.parmCurrentBatch().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharedParameterByKey</Name>
				<Source><![CDATA[
    private int getSharedParameterByKey(str _key, int _defaultValue)
    {
        RetailSharedConfigurationParameters parameter = RetailSharedConfigurationParameters::findByName(_key);
        if (!parameter.RecId || !isInteger(parameter.Value))
        {
            return _defaultValue;
        }

        var workers = str2Int(parameter.Value);

        if (workers <= 0)
        {
            return _defaultValue;
        }

        return workers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorker</Name>
				<Source><![CDATA[
    private void createWorker(Array _work)
    {
        RetailEventNotificationParallelTask worker = new RetailEventNotificationParallelTask();
        worker.parmPackedNotificationRecIdList(_work.pack());

        if (!batchHeader)
        {
            batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        }

        batchHeader.addRuntimeTask(worker, this.parmCurrentBatch().RecId);
        batchHeader.save();

        eventSource.EventWriteEmailNotificationBatchScheduled(this.parmCurrentBatch().BatchJobId,  this.parmCurrentBatch().RecId, _work.lastIndex());

        this.numberOfWorkersScheduled++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// The class description
    /// </summary>
    /// <returns>The class description</returns>
    public static ClassDescription description()
    {
        return "@Retail:RetailEvenNotificationProcessorParallelDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>