<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseReportRefIdentitiesProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendorInvoiceRefIdentitiesProvider</c> class loads travel expense reference identities
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ExpenseReport), SourceDocument_ExpenseReport::ExpenseReport)]
class TrvExpenseReportRefIdentitiesProvider extends SourceDocReferenceIdentitiesProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        typeEnumName = enumStr(SourceDocument_ExpenseReport);
        typeEnumValue = SourceDocument_ExpenseReport::ExpenseReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocAccEventRefIdentities</Name>
				<Source><![CDATA[
    private void insertSourceDocAccEventRefIdentities()
    {
        SubledgerJournalEntryIdentityInProcess      subledgerJournalEntryIdentityInProcess;
        SourceDocumentAcctEventReferenceIdentity    sourceDocumentAcctEventReferenceIdentity, sourceDocumentAcctEventReferenceIdentityNotExists;
        HcmWorker                                   hcmWorker;
        DirPerson                                   dirPerson;
        TrvExpTable                                 trvExpTable;
        AccountingEvent                             accountingEvent;
        SubledgerJournalTransferId                  refIdentityTransferId;

        refIdentityTransferId = this.parmReferenceIdentityTransferId();

        if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
        {
            sourceDocumentAcctEventReferenceIdentity.skipDataMethods(true);
            sourceDocumentAcctEventReferenceIdentity.skipBusinessEvents(true);
            sourceDocumentAcctEventReferenceIdentity.skipEvents(true);
        }

        insert_recordset sourceDocumentAcctEventReferenceIdentity(
            DocumentNumber,
            DocumentDate,
            DocumentDescription,
            DocumentText,
            SourceDocumentHeader,
            AccountingEvent)
        select
            ExpNumber,
            PostedDate,
            Txt2,
            Destination,
            SourceDocumentHeader
        from trvExpTable
        join RecId from accountingEvent
            where accountingEvent.SourceDocumentHeader == trvExpTable.SourceDocumentHeader
        exists join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == accountingEvent.RecId
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
        notExists join sourceDocumentAcctEventReferenceIdentityNotExists
            where sourceDocumentAcctEventReferenceIdentityNotExists.SourceDocumentHeader == trvExpTable.SourceDocumentHeader
                && sourceDocumentAcctEventReferenceIdentityNotExists.AccountingEvent == accountingEvent.RecId;

        update_recordset sourceDocumentAcctEventReferenceIdentity setting
            PartyNumber = hcmWorker.PersonnelNumber
            where sourceDocumentAcctEventReferenceIdentity.PartyNumber == ''
        join trvExpTable
            where trvExpTable.SourceDocumentHeader == sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader
        join accountingEvent
            where accountingEvent.SourceDocumentHeader == trvExpTable.SourceDocumentHeader
        join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == accountingEvent.RecId
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
        join PersonnelNumber from hcmWorker
            where hcmWorker.RecId == trvExpTable.CreatingWorker
               && hcmWorker.PersonnelNumber != ''
        join Name from dirPerson
            where dirPerson.RecId == hcmWorker.Person;

        update_recordset sourceDocumentAcctEventReferenceIdentity setting
            PartyName = dirPerson.Name
            where sourceDocumentAcctEventReferenceIdentity.PartyName == ''
        join trvExpTable
            where trvExpTable.SourceDocumentHeader == sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader
        join accountingEvent
            where accountingEvent.SourceDocumentHeader == trvExpTable.SourceDocumentHeader
        join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == accountingEvent.RecId
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
        join PersonnelNumber from hcmWorker
            where hcmWorker.RecId == trvExpTable.CreatingWorker
        join Name from dirPerson
            where dirPerson.RecId == hcmWorker.Person
               && dirPerson.Name != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocLineRefIdentities</Name>
				<Source><![CDATA[
    private void insertSourceDocLineRefIdentities()
    {
        SubledgerJournalEntryIdentityInProcess      subledgerJournalEntryIdentityInProcess;
        SourceDocumentAcctEventReferenceIdentity    sourceDocumentAcctEventReferenceIdentity;
        SourceDocumentLineReferenceIdentity         sourceDocumentLineReferenceIdentity, sourceDocumentLineReferenceIdentityNotExists;
        SourceDocumentReferenceIdentityEnumTmp      sourceDocumentReferenceIdentityEnumTmp;
        TrvExpTrans                                 trvExpTrans;
        trvExpTrans                                 trvExpTransChild;
        TrvExpTable                                 trvExpTable;
        AccountingEvent                             accountingEvent;
        AccountingDistribution                      accountingDistribution;
        SourceDocumentHeader                        sourceDocumentHeader;
        SourceDocumentLine                          sourceDocumentLine;
        SubledgerJournalTransferId                  refIdentityTransferId;
        TrvExpSubCategory                           trvExpSubCategory;
        TrvSharedSubCategory                        trvSharedSubCategory;

        refIdentityTransferId = this.parmReferenceIdentityTransferId();

        if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
        {
            sourceDocumentLineReferenceIdentity.skipDataMethods(true);
            sourceDocumentLineReferenceIdentity.skipBusinessEvents(true);
            sourceDocumentLineReferenceIdentity.skipEvents(true);
        }

        insert_recordset sourceDocumentLineReferenceIdentity(
            SourceDocumentLine,
            LineNumber,
            LineDate,
            LineText,
            LineDescription,
            SourceDocumentAcctEventReferenceIdentity)
        select
            SourceDocumentLine,
            LineNumber,
            TransDate,
            MerchantId,
            AdditionalInformation from trvExpTrans
            group by
                sourceDocumentLine.RecId,
                accountingEvent.RecId,
                trvExpTrans.SourceDocumentLine,
                trvExpTrans.LineNumber,
                trvExpTrans.TransDate,
                trvExpTrans.MerchantId,
                trvExpTrans.AdditionalInformation,
                sourceDocumentAcctEventReferenceIdentity.RecId
        join sourceDocumentLine
            where sourceDocumentLine.RecId == trvExpTrans.SourceDocumentLine
        join sourceDocumentHeader
            where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
        join accountingEvent
            where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
        join accountingDistribution
            where accountingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
               && accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
               && accountingDistribution.AccountingEvent == accountingEvent.RecId
        join RecId from sourceDocumentAcctEventReferenceIdentity
            where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
               && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
        join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
        notExists join sourceDocumentLineReferenceIdentityNotExists
            where sourceDocumentLineReferenceIdentityNotExists.SourceDocumentLine == trvExpTrans.SourceDocumentLine
                && sourceDocumentLineReferenceIdentityNotExists.SourceDocumentAcctEventReferenceIdentity == sourceDocumentAcctEventReferenceIdentity.RecId;

        update_recordSet sourceDocumentLineReferenceIdentity setting
                ProductNumber = trvSharedSubCategory.Name
            where sourceDocumentLineReferenceIdentity.ProductNumber == ''
        join trvExpTrans
            where trvExpTrans.SourceDocumentLine == sourceDocumentLineReferenceIdentity.SourceDocumentLine
               && trvExpTrans.LineType == TrvExpLineType::ItemizedLine
               && trvExpTrans.SubCategoryRecId != 0
        join trvExpSubCategory
            where trvExpSubCategory.RecId == trvExpTrans.SubCategoryRecId
        join trvSharedSubCategory
            where trvSharedSubCategory.RecId == trvExpSubCategory.TrvSharedSubCategory
        join sourceDocumentLine
            where sourceDocumentLine.RecId == sourceDocumentLineReferenceIdentity.SourceDocumentLine
        join sourceDocumentHeader
            where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
        join accountingEvent
            where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
        join accountingDistribution
            where accountingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
               && accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
               && accountingDistribution.AccountingEvent == accountingEvent.RecId
        join RecId from sourceDocumentAcctEventReferenceIdentity
            where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
               && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
        join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId;

        update_recordSet sourceDocumentLineReferenceIdentity setting
                ProductNumber = trvExpTrans.Description
            where sourceDocumentLineReferenceIdentity.ProductNumber == ''
        join trvExpTrans
            where trvExpTrans.SourceDocumentLine == sourceDocumentLineReferenceIdentity.SourceDocumentLine
               && trvExpTrans.SubCategoryRecId == 0
        join sourceDocumentLine
            where sourceDocumentLine.RecId == sourceDocumentLineReferenceIdentity.SourceDocumentLine
        join sourceDocumentHeader
            where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
        join accountingEvent
            where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
        join accountingDistribution
            where accountingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
               && accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
               && accountingDistribution.AccountingEvent == accountingEvent.RecId
        join RecId from sourceDocumentAcctEventReferenceIdentity
            where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
               && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
        join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId;

        update_recordSet sourceDocumentLineReferenceIdentity setting
                LineDescription = trvExpTrans.AdditionalInformation
            where sourceDocumentLineReferenceIdentity.LineDescription == ''
        join trvExpTransChild
            where trvExpTransChild.SourceDocumentLine == sourceDocumentLineReferenceIdentity.SourceDocumentLine
               && trvExpTransChild.ParentRecId != 0
        join trvExpTrans
            where trvExpTrans.RecId == trvExpTransChild.ParentRecId
        join sourceDocumentLine
            where sourceDocumentLine.RecId == sourceDocumentLineReferenceIdentity.SourceDocumentLine
        join sourceDocumentHeader
            where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
        join accountingEvent
            where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
        join accountingDistribution
            where accountingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
               && accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
               && accountingDistribution.AccountingEvent == accountingEvent.RecId
        join RecId from sourceDocumentAcctEventReferenceIdentity
            where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
               && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
        join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxSourceDocLineRefIdentities</Name>
				<Source><![CDATA[
    private void insertTaxSourceDocLineRefIdentities()
    {
        SubledgerJournalEntryIdentityInProcess      subledgerJournalEntryIdentityInProcess;
        SourceDocumentAcctEventReferenceIdentity    sourceDocumentAcctEventReferenceIdentity;
        SourceDocumentLineReferenceIdentity         sourceDocumentLineReferenceIdentity;
        AccountingEvent                             accountingEvent;
        SourceDocumentHeader                        sourceDocumentHeader;
        SourceDocumentLine                          sourceDocumentLine;
        AccountingDistribution                      accountingDistribution;
        TaxTrans                                    taxTrans;
        TableId                                     vendorInvoiceTransTableId;
        TableId                                     markupTranstableId;
        SubledgerJournalTransferId                  refIdentityTransferId;

        vendorInvoiceTransTableId = tableNum(TrvExpTrans);
        markupTranstableId = tableNum(MarkupTrans);

        refIdentityTransferId = this.parmReferenceIdentityTransferId();

        if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
        {
            sourceDocumentLineReferenceIdentity.skipDataMethods(true);
            sourceDocumentLineReferenceIdentity.skipBusinessEvents(true);
            sourceDocumentLineReferenceIdentity.skipEvents(true);
        }

        insert_recordset sourceDocumentLineReferenceIdentity(
            SourceDocumentLine,
            ProductNumber,
            Quantity,
            LineText,
            LineDescription,
            SourceDocumentAcctEventReferenceIdentity)
        select
            SourceDocumentLine,
            TaxCode,
            TaxValue,
            TaxItemGroup,
            TaxGroup from taxTrans
                group by
                sourceDocumentLine.RecId,
                accountingEvent.RecId,
                taxTrans.SourceDocumentLine,
                taxTrans.TaxCode,
                taxTrans.TaxValue,
                taxTrans.TaxItemGroup,
                taxTrans.TaxGroup,
                sourceDocumentAcctEventReferenceIdentity.RecId
            where (taxTrans.SourceTableId == vendorInvoiceTransTableId || taxTrans.SourceTableId == markupTranstableId)
        join sourceDocumentLine
            where sourceDocumentLine.RecId == taxTrans.SourceDocumentLine
        join sourceDocumentHeader
            where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
        join accountingEvent
            where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
        join accountingDistribution
            where accountingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
               && accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
               && accountingDistribution.AccountingEvent == accountingEvent.RecId
        join RecId from sourceDocumentAcctEventReferenceIdentity
            where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
               && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
        join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReferenceIdentities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into <c>SourceDocumentAcctEventReferenceIdentity</c> and <c>SourceDocumentLineReferenceIdentity</c> tables with expense report reference identities.
    /// </summary>
    protected void populateReferenceIdentities()
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
                SourceDocumentInstrumentationConstants::SourceDocReferenceIdentitiesProvider,
                classStr(TrvExpenseReportRefIdentitiesProvider),
                SourceDocumentInstrumentationConstants::TrvExpenseReportRefIdentitiesProvider))
        {
            int64 startTime, curTime = 0;

            startTime = activityContext.getElapsedMilliseconds();
            // Process the main source document reference identities for the header and lines
            this.insertSourceDocAccEventRefIdentities();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::TimeToInsertAcctEventRefIdentities,
                int642Str(curTime - startTime));

            startTime = activityContext.getElapsedMilliseconds();
            // Process the related line reference identities
            this.insertSourceDocLineRefIdentities();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::TimeToInsertLineRefIdentities,
                int642Str(curTime - startTime));

            startTime = activityContext.getElapsedMilliseconds();
            // Process the related tax reference identities
            this.insertTaxSourceDocLineRefIdentities();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::TimeToInsertTaxRefIdentities,
                int642Str(curTime - startTime));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>